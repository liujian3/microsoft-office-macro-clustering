Attribute VB_Name = "Module1"
Public boolError As Boolean
Public strError As String
Const lngWhite As Long = 16777215
Const lngOrange As Long = 49407
Const lngRed As Long = 255

Sub Copy_Rows()
'Find all the rows ("A:G") that have a "X" in column "A" copy
'that row to the next blank row on a different sheet.

Debug.Print ActiveWorkbook.Name

Application.ScreenUpdating = False
    
'Copy rows containing X
Sheets("ZPUR0078").Select
For Each r In Sheets("ZPUR0078").UsedRange.Rows
    n = r.Row
        If Sheets("ZPUR0078").Cells(n, 1) = "X" Or Sheets("ZPUR0078").Cells(n, 1) = "x" Then
        Sheets("ZPUR0078").Range(Cells(n, 2), Cells(n, 7)).Copy Destination:=Sheets("Upload File").Range("B65536").End(xlUp).Offset(1, -1)
        Else
    End If
Next r

'Replace all X's with the date they were transferred
Sheets("ZPUR0078").Columns("A").Replace What:="X", Replacement:=Date, SearchOrder:=xlByColumns, MatchCase:=True

Sheets("ZPUR0078").Select

Application.ScreenUpdating = True
End Sub

Sub Save_Rows()

Application.DisplayAlerts = False

    Sheets("Upload File").Select
    Cells.Select
    Selection.Copy
    Workbooks.Add
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

' Save file name and path into a variable
    template_file = ActiveWorkbook.FullName
 

' Only allowing the save as option to be of .txt format.
' Attaching the current date to the file name.
    fileSaveName = Application.GetSaveAsFilename( _
    InitialFileName:="C:\Service Entry Sheet Upload_" + VBA.Strings.Format(Now, "yyyymmdd") + ".txt", _
    fileFilter:="Text Files (*.txt), *.txt")
    
    If fileSaveName = False Then
        Exit Sub
    End If

' Save file as .txt TAB delimited
    ActiveWorkbook.SaveAs Filename:= _
        fileSaveName, FileFormat:=xlText, _
       CreateBackup:=False

    
    file_name_saved = ActiveWorkbook.FullName
    MsgBox "Your service entry sheet upload file has been successfully created at: " & vbCr & vbCr & file_name_saved
    
    
' Go back to excel format after TAB delimited file has been created and saved
  '  ActiveWorkbook.SaveAs Filename:= _
   '     template_file, FileFormat:= _
    '    xlNormal, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False _
     '   , CreateBackup:=False

Application.ActiveWorkbook.Close

Application.DisplayAlerts = True

End Sub

Sub Clear_Rows()

Sheets("Upload File").Range("A1:AB65536").ClearContents

Sheets("ZPUR0078").Activate

End Sub

Public Sub ButtonPresses()

Call Clear_Rows

Call Copy_Rows

Call Save_Rows

Call Clear_Rows

End Sub

Public Sub MovetoZPUR()

Dim oSheet As Excel.Worksheet

Set oSheet = Sheets("ZPUR0078")
oSheet.Range("A6:AB65536").ClearContents

'Copy rows containing data
Sheets("Receipting Schedule").Select

'Find last row
Dim lngLastRow As Long
lngLastRow = Sheets("Receipting Schedule").Range("F65536").End(xlUp).Row

Dim introw As Integer
introw = 6

For introw = 6 To lngLastRow

    Sheets("Receipting Schedule").Range(Cells(introw, 5), Cells(introw, 10)).Copy Destination:=Sheets("ZPUR0078").Range("B65536").End(xlUp).Offset(1, 0)
  
Next introw

Sheets("ZPUR0078").Activate

End Sub

Public Sub ValidateData()

If CheckValidation = True Then
    
    MsgBox "Validation complete. All cells correct", vbInformation, "Validation Successful"

Else

    MsgBox "Errors in validation of data. Please rectify the following:" & vbCrLf & strError & vbCrLf & strBlankError, vbCritical, "Validation Errors"

End If



End Sub

Public Function CheckValidation() As Boolean

boolError = False
strError = ""

Sheets("Receipting Schedule").Activate

'Data is only entered into the first thirteen columns on the Receipting Schedule tab. Check each cell to see if it is blank when it shouldn't be
'First, establish which column is the longest...that will help identify where there's missing data as we know how far down we will be going
Dim lngLastDataRow As Long
Dim i As Integer
Dim varRow As Variant

Sheets("Receipting Schedule").Activate

ActiveSheet.Unprotect Password:="unlock"

Range("A8:N500").Interior.Color = lngWhite

lngLastDataRow = 0

For i = 1 To 12
    
    If i <> 8 And i <> 9 Then
    
        varRow = Worksheets("Receipting Schedule").Cells(65536, i).End(xlUp).Row
        
        If varRow > lngLastDataRow Then
        
            lngLastDataRow = varRow
        
        End If
            
    End If
    
Next i

If lngLastDataRow < 8 Then

    boolError = True
    
    GoTo ErrorChecker
    
End If

'Now we can loop through every cell of every row until we get to the longest column's row
Dim introw As Integer
Dim intcol As Integer

For introw = 8 To lngLastDataRow

    For intcol = 1 To 12
    
        strCellValue = Worksheets("Receipting Schedule").Cells(introw, intcol).Value
        
        If intcol = 5 Then
        
            If Len(strCellValue) <> 10 Then
                
                boolError = True
                strError = strError & "Purchase Order must be 10 characters long" & vbCrLf
                Call ColourIt(Sheets("Receipting Schedule"), intcol, introw, "Orange")
            
            End If
        
        End If
        
        If strCellValue = "" Then
            
            boolError = True
            Call ColourIt(Sheets("Receipting Schedule"), intcol, introw, "Orange")
        
        End If
        
    Next intcol

Next introw


ErrorChecker:

'trim last comma
If boolError = True Then
    
    If lngLastDataRow < 8 Then
    
        strError = "No data entered on the Receipting Schedule tab"
        CheckValidation = False
    
    Else
        
        strError = strError & "There is missing data in the cells coloured Orange."
        CheckValidation = False
        
    End If
Else

    CheckValidation = True

End If

Cells.Range("D3").Select

ActiveSheet.Protect Password:="unlock"

End Function

Public Sub ColourIt(ByRef xlws As Worksheet, ByVal intcol As Integer, ByVal introw As Integer, ByVal strColour As String)

xlws.Cells(introw, intcol).Select

Select Case strColour

    Case "Orange": xlws.Cells(introw, intcol).Interior.Color = lngOrange
    Case "White": xlws.Cells(introw, intcol).Interior.Color = lngWhite
    Case "Red": xlws.Cells(introw, intcol).Interior.Color = lngRed

End Select

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
