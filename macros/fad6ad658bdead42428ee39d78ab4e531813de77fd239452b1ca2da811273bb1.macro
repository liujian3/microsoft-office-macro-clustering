Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckValue(TargetCell As Range)
    
    If TargetCell.Row >= 7 Then
        TargetCell.Interior.ColorIndex = 0
        
        Select Case TargetCell.Column
            
            Case 2
                If Check_4_Digits(TargetCell.Value) = False Then
                    MsgBox "Inserire 4 cifre!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            
            Case 3
                If Check_Letters_Spaces(TargetCell.Value) = False Then
                    MsgBox "Inserire solo lettere (maiuscole) o spazi!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            
            Case 4, 5, 7
                If Check_Letters_Spaces_Apostrophes(TargetCell.Value) = False Then
                    MsgBox "Inserire solo lettere (maiuscole), spazi o apostrofi!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            
            Case 6
                If Check_11_Digits(TargetCell.Value) = False Then
                    MsgBox "Inserire 11 cifre", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            Case 9, 14 'Controllo formale data
               If Check_Date(TargetCell.Value) = False Then
                    MsgBox "Formato data non corretto. Inserire una data nel formato GG/MM/AAAA!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            Case 11
               If Check_Letters_Digits(TargetCell.Value) = False Then
                    MsgBox "Inserire solo lettere (maiuscole) o numeri senza spazi", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            
            Case 10, 15 'Controllo formale data e controllo sul campo data precedente (inizio validit|fffd|)
                If Check_Date(TargetCell.Value) = False Then
                    MsgBox "Formato data non corretto. Inserire una data nel formato GG/MM/AAAA!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                   TargetCell.Value = ""
                ElseIf TargetCell.Previous.Value = "" Then
                    MsgBox "Verificare data di inizio validit|fffd| (cella precedente) prima di inserire fine validit|fffd|", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                ElseIf Check_Date_After_PrevColumn(TargetCell.Previous.Value, TargetCell.Value) = False Then
                    MsgBox "Verificare data: deve essere successiva alla data di inizio validit|fffd|", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            
            Case 17 'Scadenza assicurazione - Controllo formale data e controllo sul campo data inizio validit|fffd| badge
                If Check_Date(TargetCell.Value) = False Then
                    MsgBox "Formato data non corretto. Inserire una data nel formato GG/MM/AAAA!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                   TargetCell.Value = ""
                ElseIf TargetCell.Offset(0, -3).Value = "" Then
                    MsgBox "Compilare la data di inizio validit|fffd| badge prima di inserire scadenza assicurazione", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                ElseIf Check_Date_After_Today(TargetCell.Value) = False Then
                    MsgBox "Verificare data: non pu|fffd| essere precedente alla data odierna (" & Format(Date, "dd/mm/yyyy") & ")!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                ElseIf Check_Date_After_PrevColumn(TargetCell.Offset(0, -3).Value, TargetCell.Value) = False Then
                    MsgBox "Verificare data: deve essere successiva alla data di inizio validit|fffd| del badge", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            Case 18 'Ultima revisione - Controllo formale data e controllo che la data non sia posteriore ad oggi
                If Check_Date(TargetCell.Value) = False Then
                    MsgBox "Formato data non corretto. Inserire una data nel formato GG/MM/AAAA!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                   TargetCell.Value = ""
                ElseIf Check_Date_After_Today(TargetCell.Value) = True Then
                    MsgBox "Verificare data: non pu|fffd| essere successiva alla data odierna (" & Format(Date, "dd/mm/yyyy") & ")!", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
            Case 8, 12, 13
                If Check_Letters_Uppercase(TargetCell.Value) = False Then
                    MsgBox "Inserire solo maiuscole", vbOKOnly, "Errore cella " & Replace(TargetCell.Address, "$", "")
                    TargetCell.Value = ""
                End If
                
            Case Else
            
        End Select
        
    End If
    
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Target.Value <> "" Then
    
        CheckValue Target
    
    End If

End Sub

Private Function Check_4_Digits(CellValue As String) As Boolean

    Check_4_Digits = True

    If Len(CellValue) <> 4 Then
        
        Check_4_Digits = False
        Exit Function
    
    End If
    
    For i = 1 To 4
        
        If Mid(CellValue, i, 1) < "0" Or Mid(CellValue, i, 1) > "9" Then
            Check_4_Digits = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_Letters_Spaces(CellValue As String) As Boolean

    Check_Letters_Spaces = True

    For i = 1 To Len(CellValue)
        
        If (Mid(CellValue, i, 1) < "A" Or Mid(CellValue, i, 1) > "Z") And Mid(CellValue, i, 1) <> " " Then
            Check_Letters_Spaces = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_Letters_Spaces_Apostrophes(CellValue As String) As Boolean

    Check_Letters_Spaces_Apostrophes = True

    For i = 1 To Len(CellValue)
        
        If (Mid(CellValue, i, 1) < "A" Or Mid(CellValue, i, 1) > "Z") And Mid(CellValue, i, 1) <> " " And Mid(CellValue, i, 1) <> "'" Then
            Check_Letters_Spaces_Apostrophes = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_11_Digits(CellValue As String) As Boolean

    Check_11_Digits = True

    If Len(CellValue) <> 11 Then
        Check_11_Digits = False
        Exit Function
    
    End If
    
    For i = 1 To 11
        
        If Mid(CellValue, i, 1) < "0" Or Mid(CellValue, i, 1) > "9" Then
            Check_11_Digits = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_Letters_Spaces_Apostrophes_Digits(CellValue As String) As Boolean

    Check_Letters_Spaces_Apostrophes_Digits = True

    For i = 1 To Len(CellValue)
        
        If Not ((Mid(CellValue, i, 1) >= "0" And Mid(CellValue, i, 1) <= "9") Or (Mid(CellValue, i, 1) >= "A" And Mid(CellValue, i, 1) <= "Z") Or Mid(CellValue, i, 1) = " " Or Mid(CellValue, i, 1) = "'") Then
            Check_Letters_Spaces_Apostrophes_Digits = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_Letters_Uppercase(CellValue As String) As Boolean

    Check_Letters_Uppercase = True

    For i = 1 To Len(CellValue)
        
        If (Mid(CellValue, i, 1) >= "a" And Mid(CellValue, i, 1) <= "z") Then
            Check_Letters_Uppercase = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_Letters_Spaces_Slash_Digits(CellValue As String) As Boolean

    Check_Letters_Spaces_Slash_Digits = True

    For i = 1 To Len(CellValue)
        
        If Not ((Mid(CellValue, i, 1) >= "0" And Mid(CellValue, i, 1) <= "9") Or (Mid(CellValue, i, 1) >= "A" And Mid(CellValue, i, 1) <= "Z") Or Mid(CellValue, i, 1) = " " Or Mid(CellValue, i, 1) = "/") Then
            Check_Letters_Spaces_Slash_Digits = False
            Exit Function
        End If
    
    Next i
    
End Function
Private Function Check_Letters_Digits(CellValue As String) As Boolean

    Check_Letters_Digits = True

    For i = 1 To Len(CellValue)
        
        If Not ((Mid(CellValue, i, 1) >= "0" And Mid(CellValue, i, 1) <= "9") Or (Mid(CellValue, i, 1) >= "A" And Mid(CellValue, i, 1) <= "Z")) Then
            Check_Letters_Digits = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_16_Letters_Digits(CellValue As String) As Boolean

    Check_16_Letters_Digits = True

    If Len(CellValue) <> 16 Then
        
        Check_16_Letters_Digits = False
        Exit Function
    
    End If
    
    For i = 1 To 16
        
        If Not ((Mid(CellValue, i, 1) >= "0" And Mid(CellValue, i, 1) <= "9") Or (Mid(CellValue, i, 1) >= "A" And Mid(CellValue, i, 1) <= "Z")) Then
            Check_16_Letters_Digits = False
            Exit Function
        End If
    
    Next i
    
End Function

Private Function Check_LLLLLLNNLNNLNNNL(CellValue As String) As Boolean

    Check_LLLLLLNNLNNLNNNL = True

    If Len(CellValue) <> 16 Then
        
        Check_LLLLLLNNLNNLNNNL = False
        Exit Function
    
    End If
    
    For i = 1 To 16
        
        Select Case i
            
            Case 1 To 6, 9, 12, 16
                If Not (Mid(CellValue, i, 1) >= "A" And Mid(CellValue, i, 1) <= "Z") Then
                    Check_LLLLLLNNLNNLNNNL = False
                    Exit Function
                End If
            
            Case 7, 8, 10, 11, 13, 14, 15
                If Not (Mid(CellValue, i, 1) >= "0" And Mid(CellValue, i, 1) <= "9") Then
                    Check_LLLLLLNNLNNLNNNL = False
                    Exit Function
                End If
        
        End Select
        
    Next i
    
End Function

Private Function Check_Date_After_PrevColumn(CellValueStartVal As String, CellValueEndVal As String) As Boolean
    Dim dateStartVal As Date
    Dim dateEndVal As Date
    Dim result As Integer
    Dim relationship As String

    Check_Date_After_PrevColumn = True
 
    dateStartVal = Format(CellValueStartVal, "DD/MM/YYYY")
    dateEndVal = Format(CellValueEndVal, "DD/MM/YYYY")
    
    If Not dateEndVal > dateStartVal Then
       Check_Date_After_PrevColumn = False
    End If
    
End Function
Private Function Check_Date_After_Today(CellValue As String) As Boolean
    Dim dateToday As Date
    Dim dateVal As Date
    Dim result As Integer
    Dim relationship As String

    Check_Date_After_Today = True
 
    dateToday = Date
    dateVal = Format(CellValue, "DD/MM/YYYY")
    
    If dateToday > dateVal Then
       Check_Date_After_Today = False
    End If
    
End Function

Private Function Check_Date(CellValue As String) As Boolean

  Dim D, M, Y As Integer
    
    Check_Date = True
    
    If Len(CellValue) <> 10 Then
        
        Check_Date = False
        Exit Function
    
    End If
    
    For i = 1 To 10
        If i = 3 Or i = 6 Then
            If Not (Mid(CellValue, i, 1) = "/") Then
                Check_Date = False
                Exit Function
            End If
        Else
            If Mid(CellValue, i, 1) < "0" Or Mid(CellValue, i, 1) > "9" Then
                Check_Date = False
                Exit Function
            End If
        End If
    Next i
    
    D = CInt(Left(CellValue, 2))
    M = CInt(Mid(CellValue, 4, 2))
    Y = CInt(Mid(CellValue, 7, 10))
        
    If Y < 1900 Or Y > 2100 Then
        Check_Date = False
        Exit Function
    End If
    
    If M < 1 Or M > 12 Then
        Check_Date = False
        Exit Function
    End If
    
    Select Case M
        Case 1, 3, 5, 7, 8, 10, 12
            If D < 0 Or D > 31 Then
                Check_Date = False
                Exit Function
            End If
        
        Case 4, 6, 9, 11
            If D < 0 Or D > 30 Then
                Check_Date = False
                Exit Function
            End If
        
        Case 2
            If (Y Mod 4) = 0 Then
                If D < 0 Or D > 29 Then
                    Check_Date = False
                    Exit Function
                End If
            Else
                If D < 0 Or D > 28 Then
                    Check_Date = False
                    Exit Function
                End If
            End If
    End Select
    
End Function

Private Function Check_Mandatory() As Boolean
 ' Colonne obbligatorie 1,2,3,...
    Dim allMandatoryOk As Boolean
    Dim myRecord1 As Range
    Dim myField1 As Range
    Dim csvField1 As String
        
    Check_Mandatory = True
    
    For Each myRecord1 In Range("B6:B" & _
                Range("B" & Rows.Count).End(xlUp).Row)
            With myRecord1
                For Each myField1 In Range(.Cells(1), _
                        Cells(.Row, 24)) 'mod versione 9 fino alla colonna 24 (esclude colonna NOTE)
                    csvField1 = Trim(myField1.Text)
                    If ((myField1.Column > 1 And myField1.Column < 8) Or (myField1.Column > 10 And myField1.Column < 16) Or (myField1.Column > 16 And myField1.Column < 19)) And Len(csvField1) = 0 Then
                     Check_Mandatory = False
                     myField1.Interior.ColorIndex = 3
                    
                   End If
                Next myField1
            End With
        Next myRecord1
End Function


Sub CreaCSV_v9()
        Const DELIMITER As String = ";" 'or "|", "," vbTab, etc.
        Dim myRecord As Range
        Dim myField As Range
        Dim csvField As String
        Dim nFileNum As Long
        Dim sOut As String
        Dim nomeFile As String
        Dim nomeFileBakup As String
        Dim MyPATH As String
        Dim FileNAME As String
        Dim Date_Time As String
        Dim nomeContractor As String
        
        nFileNum = FreeFile
        
        'Range("E1").Value = Range("B7").Value
        If Len(Range("E1")) <> 4 Then
            MsgBox ("Impossibile salvare il file: compilare codice societ|fffd| (COD_COINSEDIATA)")
        Exit Sub
        End If
        
        MyPATH = ActiveWorkbook.Path
        FileNAME = ActiveWorkbook.Name
        FileNAME = Left(FileNAME, Len(FileNAME) - 5) '  REMOVE  XLS  EXTENSION
        nomeContractor = Mid(Replace(Trim(Range("G7")), "'", ""), 1, 3)
        
        'inizio mod v9
        Date_Time = Format(Date, "yyyymmdd") & "_" & Format(Time, "HHMM_ss")
        FileNAME = Range("E1") & "_" & "VEICOLI_" & nomeContractor & "_" & Date_Time & ".csv"   '  ADD  CSV  EXTENSION
        'fine mod v9
         
        nomeFile = MyPATH & "\" & FileNAME
        nomeFileBakup = nomeFile & "_" & Replace(Date, "/", "") & "_" & Replace(Time, ":", "") & ".bak"
        
        ' returns TRUE if the file exists
        If Len(Dir(nomeFile)) > 0 Then
            'Alert User
             x = MsgBox("Il file " & FileNAME & " esiste gi|fffd|. Si desidera sovrascriverlo?", vbYesNoCancel)
             If x = vbCancel Then
                MsgBox ("Il file non |fffd| stato creato.")
                Exit Sub
             ElseIf x = vbNo Then
                Name nomeFile As nomeFileBakup
             End If
        End If
        
        Open nomeFile For Output As #nFileNum
            
        For Each myRecord In Range("B6:B" & _
                Range("B" & Rows.Count).End(xlUp).Row)
            With myRecord
                For Each myField In Range(.Cells(1), _
                        Cells(.Row, 18)) 'mod versione 9 fino alla colonna 17 (esclude colonna NOTE)
                    csvField = Trim(myField.Text)
                    sOut = sOut & DELIMITER & csvField
                Next myField
                Print #nFileNum, Mid(sOut, 2)
                sOut = Empty
            End With
        Next myRecord
                
        Close #nFileNum
                
        If (Check_Mandatory = False) Then
         MsgBox ("Attenzione: alcuni campi obbligatori non sono stati compilati. Il file |fffd| stato creato, ma potrebbe essere incompleto: " & nomeFile)
        Else
            MsgBox ("Il file |fffd| stato creato: " & nomeFile)
        End If
        
    End Sub
    


Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Questa_cartella_di_lavoro"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
