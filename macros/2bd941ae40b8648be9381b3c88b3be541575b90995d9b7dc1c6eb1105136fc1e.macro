Attribute VB_Name = "Fehler"
Function gesch|fffd|tzt(Zeile, Spalte) As Boolean
    Dim Hilfe1
    On Error GoTo Fehler
    gesch|fffd|tzt = False
    Hilfe1 = ActiveSheet.Cells(Zeile, Spalte).Value
    ActiveSheet.Cells(Zeile, Spalte).Value = 1
    ActiveSheet.Cells(Zeile, Spalte).Value = Hilfe1
    Exit Function
Fehler:
    gesch|fffd|tzt = True
End Function

Sub RemovePageBreaks()
    Cells.PageBreak = xlNone
End Sub

Sub RemoveWaitCursor()
With Application
        .ScreenUpdating = True
        .Cursor = xlDefault
    End With
End Sub

Attribute VB_Name = "Men|fffd|befehle"
Sub ZeilenHoeheOptimieren()
    Dim i As Integer
    With Application
        .ScreenUpdating = False
        .Cursor = xlWait
    End With
    ActiveSheet.Unprotect ""
    For i = 13 To ActiveWorkbook.Names("Summentext").RefersToRange.Row - 1
        ActiveSheet.Cells(i, 25) = ActiveSheet.Cells(i, 4)
        ActiveSheet.Cells(i, 25).Rows.AutoFit
        ActiveSheet.Cells(i, 25).RowHeight = ActiveSheet.Cells(i, 25).RowHeight
        ActiveSheet.Cells(i, 25).ClearContents
    Next i
    ActiveSheet.Protect "", True, True, True
    With Application
        .ScreenUpdating = True
        .Cursor = xlDefault
    End With
End Sub


Sub InsertRows()
    On Error Resume Next
    Dim i As Integer
    Dim lines As Integer
    Dim SelLines As Integer
    
    With Application
        .ScreenUpdating = False
        .Cursor = xlWait
    End With
    
    On Error Resume Next
    ActiveSheet.Unprotect ("")
    On Error GoTo 0
    
    Summentext = ActiveWorkbook.Names("Summentext").RefersToRange.Row
    If ((Selection.Row < 12) Or (Selection.Row + Selection.Rows.Count > Summentext)) Then Exit Sub
    
    'erste Zeile, an die angeh|fffd|ngt werden soll
    lines = Selection.Row
    SelLines = Selection.Rows.Count - 1
    
    For i = 0 To SelLines
        Call AddLineWhere(lines, True)
    Next i
       
    'erste Zeile, an die angeh|fffd|ngt werden soll
    'Lines = Selection.Row + Selection.Rows.Count - 1
    'SelLines = Selection.Rows.Count - 1
    
    'For i = 0 To SelLines
    '    Call AddLineWhere(Lines, False)
    '    Lines = Lines + 1
    'Next i
    
    With Application
        .ScreenUpdating = True
        .Cursor = xlDefault
    End With
    
    ActiveSheet.Protect "", DrawingObjects:=True, Contents:=True, Scenarios:=True
    
End Sub

Sub DeleteRows()
    On Error Resume Next
    If Selection.Row < 4 Then Exit Sub
    
    ActiveSheet.Unprotect ""
    
    If (Selection.Rows.Count > ActiveWorkbook.Names("Summentext").RefersToRange.Row - 14) Then
        Exit Sub
    End If
    
    Selection.EntireRow.Delete
        
    ActiveSheet.Range(Cells(ActiveWorkbook.Names("Summentext").RefersToRange.Row - 1, 1), Cells(ActiveWorkbook.Names("Summentext").RefersToRange.Row - 1, 20)).Select
        With Selection.Borders(xlEdgeBottom)
            .Color = RGB(0, 0, 0)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
    
    Application.CutCopyMode = False
    ActiveSheet.Protect "", DrawingObjects:=True, Contents:=True, Scenarios:=True
End Sub

Sub AddLineWhere(where As Integer, up As Boolean)
'Wenn erste Zeile gew|fffd|hlt ist, dann Zeile darunter nehmen und hinunterkopieren.
    With ActiveWorkbook
        
        
        Rows(where).Select
        
        Selection.Insert Shift:=xlDown
        Rows(where + 1).Select
        Rows(where + 1).Borders(xlEdgeTop).LineStyle = xlLineStyleNone
        Selection.Copy
        
        Rows(where).Select
        

'Zeile oberhalb einf|fffd|gen
        If (up) Then
            Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
            
        ' Formel f|fffd|r Einzelkubatur kopieren
            Cells(where + 1, 15).Select
            Selection.Copy
            Cells(where, 15).Select
            Selection.PasteSpecial Paste:=xlFormulas, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
            
        ' Formel f|fffd|r Gesamtkubatur kopieren
            Cells(where + 1, 16).Select
            Selection.Copy
            Cells(where, 16).Select
            Selection.PasteSpecial Paste:=xlFormulas, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
                
        ' Formel f|fffd|r Gesamtmasse kopieren
            Cells(where + 1, 20).Select
            Selection.Copy
            Cells(where, 20).Select
            Selection.PasteSpecial Paste:=xlFormulas, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
                
            Rows(where + 1).Select
            Rows(where + 1).Borders(xlEdgeTop).LineStyle = xlLineStyleNone
            
            Cells(where, 1).Select
            
            
'Zeile unterhalb einf|fffd|gen
        Else
            Selection.PasteSpecial Paste:=7, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
            Rows(where + 1).ClearContents
        
        ' Formel f|fffd|r Einzelkubatur kopieren
            Cells(where, 15).Select
            Selection.Copy
            Cells(where + 1, 15).Select
            Selection.PasteSpecial Paste:=xlFormulas, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
        
        ' Formel f|fffd|r Gesamtkubatur kopieren
            Cells(where, 16).Select
            Selection.Copy
            Cells(where + 1, 16).Select
            Selection.PasteSpecial Paste:=xlFormulas, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
        
        ' Formel f|fffd|r Gesamtmasse kopieren
            Cells(where, 20).Select
            Selection.Copy
            Cells(where + 1, 20).Select
            Selection.PasteSpecial Paste:=xlFormulas, Operation:=xlNone, SkipBlanks:=False, _
                Transpose:=False
            Cells(where + 1, 1).Select
        End If
     
        Application.CutCopyMode = False
        
    End With
    
End Sub

Sub SchutzAufheben()
    On Error Resume Next
    ActiveSheet.Unprotect ""
    On Error GoTo 0
End Sub

Sub Schuetzen()
    On Error Resume Next
    ActiveSheet.Protect "", True, True, True
    On Error GoTo 0
End Sub
Sub AddLine()
    ActiveSheet.Unprotect ""
    With Application
        .ScreenUpdating = False
        .Cursor = xlWait
    End With
    Call AddLineWhere(ActiveWorkbook.Names("Summentext").RefersToRange.Row - 1, False)
    ActiveSheet.Protect "", DrawingObjects:=True, Contents:=True, Scenarios:=True
    With Application
        .ScreenUpdating = False
        .Cursor = xlDefault
    End With
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Symbolleiste"
Sub SymbolLeisteErzeugen()
Attribute SymbolLeisteErzeugen.VB_Description = "Erzeugt die Symbolleiste bei jedem Start"
Attribute SymbolLeisteErzeugen.VB_ProcData.VB_Invoke_Func = " \n14"
'
' SymbolLeisteErzeugen Macro
' Erzeugt die Symbolleiste bei jedem Start
'

'
Dim c1 As CommandBar, c2 As CommandBar, ConA, con1, con3, con4
    Dim Name1 As String
    Name1 = "Readiness for Delivery"
    Set c1 = CommandBars.Add(Name:=Name1, Position:=msoBarFloating)
    c1.Visible = True
    
    Set ConA = c1.Controls.Add(Type:=msoControlPopup)
    ConA.Caption = "VAI-Site"
    Set c2 = c1.Controls(1).CommandBar
    Set con1 = c2.Controls.Add(Type:=msoControlButton)
    Set con2 = c2.Controls.Add(Type:=msoControlButton)
    Set con3 = c2.Controls.Add(Type:=msoControlButton)
    Set con4 = c2.Controls.Add(Type:=msoControlButton)
    Set con5 = c2.Controls.Add(Type:=msoControlButton)
    
    con1.Caption = "&Unprotect Document"
    con2.Caption = "&Protect Document"
    con3.BeginGroup = True
    con3.Caption = "&Insert Rows"
    con4.Caption = "&Delete Rows"
    con5.Caption = "&Add single line"
    
    con5.BeginGroup = True
    con5.Caption = "&Optimize Lines"
    
    con1.OnAction = "SchutzAufheben"
    con2.OnAction = "Schuetzen"
    con3.OnAction = "InsertRows"
    con4.OnAction = "DeleteRows"
    con5.OnAction = "AddLine"
    con5.OnAction = "ZeilenHoeheOptimieren"
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Activate()
On Error Resume Next
Application.CommandBars("Lieferbereitschaft").Visible = True
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Dim x
On Error Resume Next
For Each x In Application.CommandBars
    If x.Name = "Lieferbereitschaft" Then
        x.Delete
    End If
Next
For Each x In ActiveWorkbook.CommandBars
    If x.Name = "Lieferbereitschaft" Then
        x.Delete
    End If
Next
End Sub

Private Sub Workbook_Deactivate()
On Error Resume Next
Application.CommandBars("Lieferbereitschaft").Visible = False
End Sub


Private Sub Workbook_BeforePrint(Cancel As Boolean)
    'Call ZeilenHoeheOptimieren
End Sub


Private Sub Workbook_Open()
    Dim c1
    On Error Resume Next
    For Each c1 In Application.CommandBars
        If c1.Name = "Lieferbereitschaft" Then
            c1.Delete
        End If
    Next
    Call SymbolLeisteErzeugen
    ActiveSheet.Range("A13").Select
End Sub



INQUEST-PP=macro
