Attribute VB_Name = "TemplateSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=============================================================================
' Copyright (C) 1996-2006 NumeriX LLC. All rights reserved.
'
' This software comprises valuable trade secrets and may be used, copied,
' transmitted, stored, and distributed only in accordance with the terms
' of a written license or trial agreement and with the inclusion of this
' copyright notice.
'=============================================================================

Option Explicit

'------------------------------------------------------------------------------
' fields
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the pricing model, or <c>Nothing</c> if there is no
    '''     pricing-model range
    ''' </summary>
    Private m_rngModel As Range
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the numerical method, or <c>Nothing</c> if there is
    '''     no numerical-method range
    ''' </summary>
    Private m_rngMethod As Range
    '--------------------------------------------------------------------------

'------------------------------------------------------------------------------
' overridden/implemented methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet activates.
    ''' </summary>
    Private Sub Worksheet_Activate()
    
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet changes.
    ''' </summary>
    ''' <param name="rngTarget">
    '''     the range of this worksheet that has changed
    ''' </param>
    Private Sub Worksheet_Change(ByVal rngTarget As Range)
    
        '
        ' get the model and method ranges
        '
        Call GetRanges
        If ((m_rngModel Is Nothing) Or (m_rngMethod Is Nothing)) Then
        
            Exit Sub
        
        End If
        
        '
        ' set the method validation, if necessary
        '
        If (StrComp(rngTarget.Address, m_rngModel.Address, vbTextCompare) = 0) Then
        
            With m_rngMethod.Validation
            
                Call .Delete
                Call .Add(Type:=xlValidateList, _
                          AlertStyle:=xlValidAlertStop, _
                          Operator:=xlBetween, _
                          Formula1:=GetListOfMethods(m_rngModel.Value))
                .InCellDropdown = True
                .ErrorTitle = "Method Selection Error"
                .ErrorMessage = "The model does not support this method."
                .ShowError = False
                
            End With
            
        End If
    
    End Sub
    '--------------------------------------------------------------------------
    
'------------------------------------------------------------------------------
' private methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the list of methods that correspond to a specified model.
    ''' </summary>
    ''' <param name="strModelID">
    '''     the ID of the model to use
    ''' </param>
    ''' <returns>
    ''' </returns>
    Private Function GetListOfMethods(ByVal strModelID As String) As String
    
        Dim strModelType As String: strModelType = ""
        Dim strOutput As String: strOutput = ""
        Dim i As Integer: i = 0
        Dim j As Integer: j = 0
        Dim intModelsCount As Integer: intModelsCount = 0
        Dim intMethodsCount As Integer: intMethodsCount = 0
        Dim vntHeadings As Variant
        Dim vntValues As Variant
        Dim vntModelMethods As Variant
        
        '
        ' initialize the error handler
        '
        On Error GoTo errorHandler
        
        '
        ' get views for the headings and values
        '
        vntHeadings = Application.Run("nxLibView", strModelID, "CALL HEADERS")
        vntValues = Application.Run("nxLibView", strModelID, "CALL VALUES")
        
        '
        ' search for the model type
        '
        For i = 1 To UBound(vntHeadings)
        
            If (StrComp(vntHeadings(i, 1), "MODEL", vbTextCompare) = 0) Then
            
                strModelType = vntValues(i, 1)
                strModelType = RemoveSpaces(strModelType)
                Exit For
                
            End If
            
        Next i
        
        '
        ' get the supported methods
        '
        vntModelMethods = Application.Run("nxLibView", "GLOBAL.ModelMethods")
        intModelsCount = UBound(vntModelMethods)
        intMethodsCount = UBound(vntModelMethods, 2)
        For i = 2 To intModelsCount
        
            If (StrComp(CStr(vntModelMethods(i, 1)), strModelType, vbTextCompare) = 0) Then
            
                For j = 2 To intMethodsCount
                
                    If (vntModelMethods(i, j) = 1) Then
                    
                        strOutput = (strOutput & vntModelMethods(1, j) & ",")
                        
                    End If
                    
                Next j
                
                GetListOfMethods = VBA.Left$(strOutput, (Len(strOutput) - 1))
                Exit Function
                
            End If
            
        Next i
        
errorHandler:

        GetListOfMethods = "BackwardPDE,BackwardLattice,BackwardTree,BackwardAnalytic,BackwardMC,ForwardMC,ForwardAnalytic"
        Exit Function
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the pricing-model and numerical-method ranges.
    ''' </summary>
    Private Sub GetRanges()
    
        On Error GoTo errorHandler
        Set m_rngModel = Range("Nx_D_" & Me.Name & "_ModelID")
        Set m_rngMethod = Range("Nx_D_" & Me.Name & "_NumMethod")
        
        Exit Sub
        
errorHandler:

        Set m_rngModel = Nothing
        Set m_rngMethod = Nothing
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes all spaces from a specified string.
    ''' </summary>
    ''' <param name="strInput">
    '''     the string from which to remove all spaces
    ''' </param>
    ''' <returns>
    '''     a copy of the specified string, with spaces removed
    ''' </returns>
    Private Function RemoveSpaces(ByVal strInput As String) As String
    
        Dim strResult As String: strResult = ""
        Dim ch As String * 1
        Dim i As Integer: i = 0
        
        For i = 1 To Len(strInput)
        
            ch = VBA.Mid$(strInput, i, 1)
            If (StrComp(ch, " ", vbBinaryCompare) <> 0) Then
            
                strResult = (strResult & ch)
                
            End If
            
        Next
        
        RemoveSpaces = strResult
        
    End Function
    '--------------------------------------------------------------------------


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mktEQDivVol1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modEqBS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 3, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityValue")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue")
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".Opt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & "Call" & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("E11").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub CommandButton1_Click()
    generateOptions
End Sub

Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_OptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

Private Sub CommandButton2_Click()
    ResizeTable
End Sub

Private Sub ResizeTable()
    Range("NX_" & Me.Name & "_M_SelectionGrid") = ""
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_VolCurveID"))
    
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        anchor.Offset(dateCounter, 0) = temp(i, 1)
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next
    
    For i = 2 To UBound(temp, 2)
        If Not IsNumeric(temp(1, i)) Or Len(temp(1, i)) = 0 Then Exit For
        strikeCounter = strikeCounter + 1
        anchor.Offset(0, strikeCounter) = temp(1, i)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeCounter))
    Exit Sub

ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Attribute VB_Name = "modHW1F"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "ComboBox1, 3, 1, MSForms, ComboBox"
'Option Explicit
Option Base 1
Option Compare Text

Private hasBeenInitialised As Boolean

Private Sub Worksheet_Activate()
    hasBeenInitialised = False
    ComboBox1.Clear
    ComboBox1.AddItem ("Clear Grid")
    ComboBox1.AddItem ("2y CMS")
    ComboBox1.AddItem ("5y CMS")
    ComboBox1.AddItem ("10y CMS")
    ComboBox1.AddItem ("20y CMS")
    ComboBox1.AddItem ("30y CMS")
    ComboBox1.AddItem ("5y Diagonal")
    ComboBox1.AddItem ("10y Diagonal")
    ComboBox1.AddItem ("15y Diagonal")
    ComboBox1.AddItem ("20y Diagonal")
    ComboBox1.AddItem ("25y Diagonal")
    ComboBox1.AddItem ("30y Diagonal")
    ComboBox1.AddItem ("40y Diagonal")
    ComboBox1.AddItem ("50y Diagonal")
    hasBeenInitialised = True
End Sub


Private Sub generateSwaptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_SwaptionDefs")
    Dim strikeAdd$: strikeAdd = Range("NX_" & asn & "_M_StrikeValue").Address
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim flavourAdd$: flavourAdd = Range("NX_" & asn & "_M_FlavourValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue").Address
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue").Address
    Dim sptnIDAdd$: sptnIDAdd = Range("NX_" & asn & "_M_SwaptionIDValue").Address
    Dim convAdd$: convAdd = Range("NX_" & asn & "_M_ConventionValue").Address
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                rngOt.Cells(counter, 3).Formula = "=" & strikeAdd
                ID = prefixVal & "." & modelVal & "." & rngIn.Cells(j, 1).Value & "." & rngIn.Cells(1, i).Value
                rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTenor(" & _
                    prefixVal & "&" & invCom & "." & invCom & "&" & modelVal & "&" & invCom & "." & rngIn.Cells(j, 1).Value & "." & rngIn.Cells(1, i).Value & invCom _
                    & "," & CcyAdd & "," & flavourAdd _
                    & "," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & "," & strikeAdd & "," & sptnIDAdd & "," & convAdd & ")"
            End If
        Next
    Next
    
    Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 4)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_SwaptionDefs", RefersTo:=Selection

    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    
    Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & prefixVal & "&" & invCom & "." & invCom & "&" & modelVal & "&" & invCom & ".Collection" & invCom & "," & CcyAdd & "," _
        & Range(rngOt.Cells(1, 4).Offset(-1, 0), rngOt.Cells(counter, 4)).Address & ")"
    
    Range("E11").Select
    
    
    ActiveSheet.Calculate
End Sub

Private Sub ComboBox1_Change()
    If hasBeenInitialised = False Then Exit Sub
    Application.ScreenUpdating = False
    Select Case ComboBox1.Text
        Case "CLEAR GRID":   clearSwaptionSelectionGrid
                             clearSwaptions
                             ActiveSheet.Calculate
                             Exit Sub
        Case "2y CMS":       populateCMS "2y"
        Case "5y CMS":       populateCMS "5y"
        Case "10y CMS":      populateCMS "10y"
        Case "20y CMS":      populateCMS "20y"
        Case "30y CMS":      populateCMS "30y"
        Case "5y Diagonal":  populateDiagonal 5
        Case "10y Diagonal": populateDiagonal 10
        Case "15y Diagonal": populateDiagonal 15
        Case "20y Diagonal": populateDiagonal 20
        Case "25y Diagonal": populateDiagonal 25
        Case "30y Diagonal": populateDiagonal 30
        Case "40y Diagonal": populateDiagonal 40
        Case "50y Diagonal": populateDiagonal 50
        Case Else
            MsgBox "Fatal error in swaption creation"
            Exit Sub
    End Select
    generateSwaptions
    ActiveSheet.Calculate
End Sub

Private Sub CommandButton1_Click()
    generateSwaptions
End Sub

' clear the swaptions
Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SwaptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

' clear swaption selection area
Private Sub clearSwaptionSelectionGrid()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Range(rng.Cells(2, 2), rng.Cells(rng.Rows.Count, rng.Columns.Count)).FormulaArray = ""
End Sub

Private Sub populateCMS(CMSTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = CMSTenor Then
            For j = 2 To rng.Rows.Count
                rng.Cells(j, i) = "Y"
            Next j
            Exit Sub
        End If
    Next
End Sub

Private Sub populateDiagonal(tenorYrs As Integer)
    Dim i As Integer
    For i = 1 To tenorYrs - 1
        doIndividualOption i & "Y", tenorYrs - i & "Y"
    Next
End Sub

Private Sub doIndividualOption(optTenor$, swapTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Dim foundSwap As Boolean: foundSwap = False
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = swapTenor Then
            foundSwap = True
            Exit For
        End If
    Next
    If foundSwap Then
        For j = 1 To rng.Rows.Count
            If rng.Cells(j, 1) = optTenor$ Then
                rng.Cells(j, i) = "Y"
                Exit For
            End If
        Next
    End If
End Sub




INQUEST-PP=macro
