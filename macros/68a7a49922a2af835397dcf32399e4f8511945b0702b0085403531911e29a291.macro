Attribute VB_Name = "Feuil11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil311"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil321"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil51111"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil5112"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil5121"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil51211"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil512111"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil51212"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil5131"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil51311"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil514"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmAbout"
Attribute VB_Base = "0{EAB699B8-B2E4-47DA-A35F-DE8F68BCB267}{78A430CE-27AC-464C-8669-CD8CECC711A5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False














Option Explicit
Private Sub cmdOk_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
  maj_frmAbout
End Sub
Attribute VB_Name = "frmConfiguration"
Attribute VB_Base = "0{5F4CB42C-A862-47B0-BB7E-A32D3799F2AC}{614A11B8-E088-4442-BA5B-AAFFFB86F9ED}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False














Option Explicit

'********************************************************
' Fonction : ChangeLangue
'
' Met |fffd| jour les textes affich|fffd|s dans la fen|fffd|tre
' Configuration sans toutefois enregistrer la config
'
'********************************************************
Private Sub ChangeLangue(iLangue As Long)
Dim il As Long
Dim nIndex As Long
Dim w As Control

  il = iLangue
  For nIndex = 1 To cInfoConfig
    
    If LCase(frmConfiguration.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmConfiguration(nIndex)) Then
      frmConfiguration.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmConfiguration(nIndex)
    End If

    For Each w In frmConfiguration.Controls
      If LCase(w.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmConfiguration(nIndex)) Then
        w.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmConfiguration(nIndex)
        Exit For
      End If
    Next
  Next

End Sub

Private Sub chkCable_Click()
  
  If chkCable.Value Then
  
    chkInsertion.Value = True
    chkORL.Value = True
    chkOut.Value = True
    chkLength.Value = True
    chkReference.Value = True
    chkComparaison.Value = True
    chkFibre.Enabled = True
    
    chkInsertion.Enabled = True
    chkORL.Enabled = True
    chkOut.Enabled = True
    chkLength.Enabled = True
    chkReference.Enabled = True
    chkComparaison.Enabled = True
        
  Else
  
    chkInsertion.Value = False
    chkORL.Value = False
    chkOut.Value = False
    chkLength.Value = False
    chkReference.Value = False
    chkComparaison.Value = False
    chkFibre.Enabled = False
    chkFibre.Value = False
    chkInsertion.Enabled = False
    chkORL.Enabled = False
    chkOut.Enabled = False
    chkLength.Enabled = False
    chkReference.Enabled = False
    chkComparaison.Enabled = False
    
  End If

End Sub

Private Sub chkComparaison_Click()
  majFrameComparaison
End Sub

Private Sub cmdAnnuleConfiguration_Click()
  Unload Me
  
End Sub

Private Sub cmdOKConfiguration_Click()
  
  fraPatientez.Visible = True
  fraPatientez.Repaint
  
     
  record_frmConfigurationDefaut
  Set_Multi_Langue_Defaut
  
  'sauvegarder les modifs dans le mod|fffd|le
  ActiveWorkbook.Save

  fraPatientez.Visible = False
  
  Unload Me
  
End Sub

Private Sub cmdSelectionLogo_Click()
Dim sNomFichier As Variant

  'isa 23/11
  sNomFichier = Application.GetOpenFilename("Logo file (*.*), *.*")
  If sNomFichier <> False Then
    txtLogo.Text = sNomFichier
  End If

End Sub
Private Sub optAllemand_Click()
  ChangeLangue 3
End Sub

Private Sub optAnglais_Click()
  ChangeLangue 1
End Sub

Private Sub optEspagnol_Click()
  ChangeLangue 4
End Sub

Private Sub optFrancais_Click()
  ChangeLangue 2
End Sub

Private Sub optUtilisateur_Click()
  ChangeLangue 5
End Sub

Private Sub txtNombreDigit_AfterUpdate()
  
  On Error GoTo Limites
  
  If Trim(txtNombreDigit.Text) = "" Then
    txtNombreDigit.Text = "2"
  Else
    If (CLng(txtNombreDigit.Text) < 1) Or (CLng(txtNombreDigit.Text) > 3) Then
      txtNombreDigit.Text = "2"
    End If
  End If

  Exit Sub
  
Limites:
  txtNombreDigit.Text = "2"
End Sub

Private Sub txtNombreFibre_AfterUpdate()

On Error GoTo nonumber

  If Trim(txtNombreFibre.Text) = "" Then
    If CLng(txtNombreFibre.Text) < 1 Then
      txtNombreFibre.Text = "12"
    End If
  End If
  
  Exit Sub
  
nonumber:
    txtNombreFibre.Text = "12"
End Sub

Private Sub UserForm_Initialize()
  maj_frmConfiguration
  maj_frmConfigurationDefaut
End Sub
Attribute VB_Name = "frmMenu"
Attribute VB_Base = "0{4CCC1867-7A46-47B4-AE8D-217387492720}{0637E306-25E1-4A7C-810C-E866CA9E44F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


















Option Explicit


'******************************************************************
' Fonction : Init_Communication
'
' Parametrage de la liaison serie
'******************************************************************
Public Function Init_Communication() As Boolean
  
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Select
  gBitSecond = Cells(cLigCommunication, cColCommunication + 1)
  gParity = Cells(cLigCommunication, cColCommunication + 2)
  gDataBit = Cells(cLigCommunication, cColCommunication + 3)
  gStopBit = Cells(cLigCommunication, cColCommunication + 4)
  gCommPort = Cells(cLigCommunication, cColCommunication + 5)
  g_TimeOutCom = fctCDbl(Cells(cLigCommunication, cColCommunication + 6))
  g_TimeOutVide = fctCDbl(Cells(cLigCommunication, cColCommunication + 7))
  g_TimeOutConfig = 0.5
End Function

Private Sub cmdApropos_Click()
  frmMenu.Hide
  frmAbout.Show
  frmMenu.Show
End Sub

Private Sub cmdConfiguration_Click()
  frmConfiguration.Show
End Sub

Private Sub cmdImpression_Click()
Dim sFichierTexte As String
Dim nIndex As Integer
  
  sFichierTexte = Application.GetOpenFilename("OFI 2000 report file (*.xls), *.xls")
        
  If (sFichierTexte <> "Faux") Then
    frmMenu.Hide
    Workbooks.Open FileName:=sFichierTexte
    Dim tableau() As String
    ReDim tableau(Sheets.Count)
    
    For nIndex = 1 To Sheets.Count
      tableau(nIndex) = Sheets(nIndex).Name
    Next

    Select Case Sheets.Count
      Case 1
        Sheets(tableau(1)).Select
      Case 2
        Sheets(Array(tableau(1), tableau(2))).Select
      Case 3
        Sheets(Array(tableau(1), tableau(2), tableau(3))).Select
      Case 4
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4))).Select
      Case 5
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5))).Select
      Case 6
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6))).Select
      Case 7
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7))).Select
      Case 8
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8))).Select
      Case 9
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9))).Select
      Case 10
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9), tableau(10))).Select
      Case 11
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9), tableau(10), tableau(11))).Select
      Case 11
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9), tableau(10), tableau(11))).Select
      Case 12
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9), tableau(10), tableau(11), _
                     tableau(12))).Select
      Case 13
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9), tableau(10), tableau(11), _
                     tableau(12), tableau(13))).Select
      Case 14
        Sheets(Array(tableau(1), tableau(2), tableau(3), tableau(4), tableau(5), tableau(6), _
                     tableau(7), tableau(8), tableau(9), tableau(10), tableau(11), _
                     tableau(12), tableau(13), tableau(14))).Select
    
    End Select
    
    Sheets(1).Activate
    ActiveWindow.SelectedSheets.PrintPreview
    ActiveWorkbook.Close
    frmMenu.Show
  End If
  
End Sub

Private Sub cmdInterrogationOFI_Click()
  frmMenu.Hide
  frmOFI.Show
  frmMenu.Show
End Sub

Private Sub cmdPreparationRapport_Click()
Dim bCodeRet As Boolean
Dim sFichierTexte As String
  
  frmMenu.Hide
  sFichierTexte = Application.GetOpenFilename("OFI 2000 report file (*.txt), *.txt")
      
  If (sFichierTexte <> "Faux") Then
    LectureFichierTexte sFichierTexte
  End If
  frmMenu.Show
  
End Sub

Private Sub cmdSortie_Click()
      
  If MSComm.PortOpen Then
    MSComm.PortOpen = False
  End If
  Unload Me
  InitFenetreAppli
End Sub


Private Sub UserForm_Activate()
  maj_frmMenu
End Sub

Private Sub UserForm_Initialize()
Dim bCodeRet As Boolean

  maj_frmMenu
  bCodeRet = Init_Communication

End Sub
Attribute VB_Name = "frmOFI"
Attribute VB_Base = "0{696E56FE-E53D-4993-8480-5FEDC1931FC0}{90DE8134-61EB-4F99-A160-8A7B095761EE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit



Dim bRecupereRefOFI2 As Boolean

Private Sub cboCable_Change()
  cmdNewReport.Enabled = False
  fraComparaison.Visible = False
  cboLambda1.Clear
  cboLambda2.Clear
  
  ' MY : On remet tous les compteurs de t|fffd|l|fffd|chargement |fffd| z|fffd|ro.
  optThreshold.Value = False
  optCableLTS.Value = False
  optFibreMesureLTS.Value = False
  optThreshold2.Value = False
  optCableLTS2.Value = False
  optFibreMesureLTS2.Value = False
  optCableCCA.Value = False
  optFibreMesureCCA.Value = False
  lblFiberLTS.Caption = ""
  lblFiberCCA.Caption = ""

End Sub

Private Sub CheckBox31_Click()

End Sub

Private Sub cmdInitialisationOFI_Click()
Dim bCodeRet As Boolean
Dim iCable As Long

  On Error GoTo err_initialisation
  
  fraPatientez.Visible = True
  
  cboCable.Clear
  cboCable.Visible = False
  lblFiberLTS.Caption = ""
  cmdStop.Enabled = False
  cmdNewReport.Enabled = False
  cmdInterrogationOFICable.Enabled = False
  optThreshold.Value = False
  optCableLTS.Value = False
  optFibreMesureLTS.Value = False
  ' Modif MY 01/06/03
  frmOFI.optCableCCA.Value = False
  frmOFI.optFibreMesureCCA.Value = False
  frmOFI.optCableLTS2.Value = False
  frmOFI.optThreshold2.Value = False
  frmOFI.optFibreMesureLTS2.Value = False
  frmOFI.lblFiberCCA.Caption = ""
  ' End modifs MY 06/03
  
  bCodeRet = InitialisationOFI
  If bCodeRet Then
    For iCable = 1 To CLng(g_sTrameNBCable)
      cboCable.AddItem g_tabIdentCable(iCable)
    Next
    cboCable.ListIndex = 0
    lblCable.Visible = True
    cboCable.Visible = True
    cmdInterrogationOFICable.Enabled = True
    cmdNewReport.Enabled = False
  Else
    lblCable.Visible = False
    cboCable.Visible = False
    cmdNewReport.Enabled = False
    cmdInterrogationOFICable.Enabled = False
  End If
  
  cmdStop.Enabled = True
  
  fraPatientez.Visible = False
  
  Exit Sub
  
err_initialisation:
  MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(7), _
         vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(2)
  cmdStop.Enabled = True
  fraPatientez.Visible = False
  
End Sub

Private Sub cmdInterrogationOFICable_Click()
Dim bCodeRet As Boolean
Dim sFichierSauvegarde As String


  fraPatientez.Visible = True
  
  On Error GoTo fintraitement
  
  cmdStop.Enabled = False
  
  ' Etat d'avancement de l'OFI
  optThreshold.Value = False
  optCableLTS.Value = False
  optFibreMesureLTS.Value = False
  optCableCCA.Value = False
  optFibreMesureCCA.Value = False

  
  ' Etat d'avancement de l'OFI 2
  bRecupereRefOFI2 = False
  optThreshold2.Visible = False
  optThreshold2.Value = False
  optCableLTS2.Visible = False
  optCableLTS2.Value = False
  optFibreMesureLTS2.Visible = False
  optFibreMesureLTS2.Value = False
  
  
  bCodeRet = InterrogationOFI(cboCable.Text)
  If bCodeRet Then
    
    ' Si cable a mesures LTS, alors on demande OFI2 sinon non.
    If gb_LTS = True Then
        frmOFI2.Show
        
        SuppMesNonEffectuees

        txtIndexOfRefraction.Text = CStr(fctCDbl(g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreIR)))
    
        If (g_tabMultiLangue.bSelect_Insertion Or _
            g_tabMultiLangue.bSelect_Orl) And _
            g_tabMultiLangue.bSelect_Comparaison Then
            ' il faut r|fffd|aliser la comparaison, donc proposer |fffd| l'utilisateur
            ' de s|fffd|lectionner les deux longueurs |fffd| comparer
            ' si une longuer d'onde, pas de comparaison
            ' si deux longueurs ondes on compare pas sans demander l'avis
            ' sinon on affiche de quoi effectuer le choix avant que
            ' l'operateur fasse un "new report"
            If g_NbOndeMax >= 2 Then
                fraComparaison.Visible = True
                cboLambda1.Clear
                cboLambda2.Clear
                Dim iLambda As Long
                For iLambda = 1 To g_NbOndeMax
                    cboLambda1.AddItem g_tabIdentOndeMax(iLambda)
                    cboLambda2.AddItem g_tabIdentOndeMax(iLambda)
                Next
                cboLambda1.ListIndex = 0
                cboLambda2.ListIndex = 1
            End If
        End If
    End If
    If gb_CCA Or gb_LTS Then
        cmdNewReport.Enabled = True
    Else   ' Message d'erreur : aucun r|fffd|sultat dans aucun des cables
      MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(10), _
         vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(5)

    End If
    
    
  Else
    MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(3), _
          vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
    lblFiberLTS.Caption = ""
    lblFiberCCA.Caption = ""
    cmdNewReport.Enabled = False
    optThreshold.Value = False
    optCableLTS.Value = False
    optFibreMesureLTS.Value = False
    optCableCCA.Value = False
    optFibreMesureCCA.Value = False
  End If
  
    

  cmdStop.Enabled = True

  fraPatientez.Visible = False
  Exit Sub
  
fintraitement:
  MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(7), _
         vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
  cmdStop.Enabled = True
  fraPatientez.Visible = False
  
End Sub


Private Sub cmdNewReport_Click()
Dim sFichierSauvegarde As String

  On Error GoTo err_rapport
  
  'on m|fffd|morise le choix de l'op|fffd|rateur
  g_tabMultiLangue.sTitre = txtTitre.Text
  g_tabMultiLangue.sOrigine = txtOrigine.Text
  g_tabMultiLangue.sDestination = txtDestination.Text
  
  If (gb_LTS) Then
  
      
      gfIndexOfRefractionCustom = fctCDbl(txtIndexOfRefraction.Text)
  End If  'gb_LTS
      
     If (g_tabMultiLangue.sTitre <> "") And (g_tabMultiLangue.sOrigine <> "") _
          And (g_tabMultiLangue.sDestination <> "") Then
             
        If fraComparaison.Visible And gb_LTS Then
          g_tabMultiLangue.sLambda1 = cboLambda1.Text
          g_tabMultiLangue.sLambda2 = cboLambda2.Text
        Else
          g_tabMultiLangue.sLambda1 = ""
          g_tabMultiLangue.sLambda2 = ""
        End If
      
        'sauvegarde du fichier texte : car c'est |fffd| ce moment l|fffd| uniquement
        '                              que l'on a toutes les billes au niveau lambda 1 et lambda 2
        '
        If chkTxtFile.Value Then
          'proposer de sauver en fichier .txt
          sFichierSauvegarde = Application.GetSaveAsFilename(Title:="OFI 2000 - " & " report file", _
                                                           InitialFilename:="OFI_" & cboCable.Text & ".txt", _
                                                           FileFilter:="Text File (*.txt),*.txt")
          If (sFichierSauvegarde <> "Faux") Then
            SauvegardeFichierTexte cboCable.Text, sFichierSauvegarde
            DoEvents
          End If
        End If  'chkTxtFile.Value
    
        frmOFI.Hide
        ' on fabrique le rapport
        CreationNouveauClasseur
        
        frmOFI.Show
  
  
    Else
        If g_tabMultiLangue.sTitre = "" Then
            g_tabMultiLangue.sTitre = g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(6)
            txtTitre.Text = g_tabMultiLangue.sTitre
        End If
        MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(1), _
          vbInformation + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(5)
    End If
    Exit Sub

err_rapport:
   MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(8), _
        vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
End Sub

Private Sub cmdStop_Click()
  
  Unload frmOFI

End Sub


Private Sub CommandButton1_Click()
    fctTestCWDM
End Sub

Private Sub UserForm_Activate()
  maj_frmOFI
End Sub

Attribute VB_Name = "frmOFI2"
Attribute VB_Base = "0{EFC919A2-AA2A-4D7C-B17A-36E4A151DD58}{86D3BC49-912B-403E-85A3-3BF1F714288A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Option Explicit

Private Sub cmdContinuer_Click()
  Unload frmOFI2
End Sub

'------------------------------------------------
' Recuperation des references sur l'OFI numero 2
'------------------------------------------------
Private Sub cmdRecuperer_Click()
Dim bCodeRet As Boolean
  
  cmdRecuperer.Enabled = False
  cmdContinuer.Enabled = False
  
  bCodeRet = InitialisationOFI
  If bCodeRet Then
    bCodeRet = InterrogationOFI2(frmOFI.cboCable.Text)
    If bCodeRet Then
      cmdContinuer_Click
    End If
  End If
  
  cmdRecuperer.Enabled = True
  cmdContinuer.Enabled = True
 
End Sub

Private Sub UserForm_Activate()
  maj_frmOFI2
End Sub

Private Sub UserForm_Initialize()
  maj_frmOFI2
End Sub
Attribute VB_Name = "modGeneral"
Option Explicit

Public Const cNBZoneFixeCable = 8         'Nbre de champs fixes dans la trame CABLE?cable_id
Public Const cNBZoneFixeFibre = 15        'nombre de zones fixes dans la trame fibre
Public Const cNBZoneFixeFibreCCA = 10     'Modifs MY : nombre de zones fixes dans la trame fibre / CWDM
Public Const cNbLgOndeMax = 8             'nombre maximum de longeur onde

Public Const cBleuCiel = 20               'couleur des ent|fffd|tes de colonnes
Public Const cCreme = 30                  'couleur des ent|fffd|tes de colonnes titres

Public Const cFeuilleStart = "Start"                                    'identification des onglets
Public Const cFeuilleMultiLingue = "MultiLingue"                        'identification des onglets
Public Const cFeuilleGeneralInformation = "GeneralInformation"          'identification des onglets
Public Const cFeuilleSommaire = "Summary"                               'identification des onglets
Public Const cFeuilleInsertion = "LossTable"                            'identification des onglets
Public Const cFeuilleORL = "ORLTable"                                   'identification des onglets
Public Const cFeuilleComparaisonInsertion = "LossComparison"            'identification des onglets
Public Const cFeuilleComparaisonORL = "ORLComparison"                   'identification des onglets
Public Const cFeuilleOUT = "OutOfRange"                                 'identification des onglets
Public Const cFeuilleReference = "ReferenceTable"                       'identification des onglets
Public Const cFeuilleLongueur = "LengthAndDelay"                        'identification des onglets
Public Const cFeuilleInfogeneralFibre = "GeneralFiberInformation"       'identification des onglets
Public Const cFeuilleDetailFibre = "FiberDetails"                       'identification des onglets

Public Const cFeuilleGeneralInformationCCA = "GeneralInformationCCA"    'identification des onglets
Public Const cFeuilleThresholdCWDM = "CWDMThresholdTable"               'identification des onglets
Public Const cFeuilleCWDM = "CWDMMeasurements"                          'identification des onglets

Public Const cLigCommunication = 9        'RS 232       => onglet start
Public Const cColCommunication = 1        'RS 232 1 |fffd| 6 => onglet start

Public Const cInfoConfig = 33             'nombre de control |fffd| remplacer sur la feuille - CWDM Modif
Public Const cInfoMenu = 7                'nombre de control |fffd| remplacer sur la feuille
Public Const cInfoOFI = 24                'nombre de control |fffd| remplacer sur la feuille - CWDM Modif
Public Const cInfoOFI2 = 4                'nombre de control |fffd| remplacer sur la feuille
Public Const cInfoAbout = 3               'nombre de control |fffd| remplacer sur la feuille

Public Const cInfoMesure = 15             'nom des colonnes de param|fffd|tres
Public Const cLigInfoConfig = 13          'position des controles : frmConfiguration
Public Const cLigInfoMenu = 48            'position des controles : frmMenu -> Modif MY/CWDM
Public Const cligInfoOFI = 57             'position des controles : frmOFI  -> Modif MY/CWDM
Public Const cligInfoOFI2 = 81            'position des controles : frmOFI2 -> Modif MY/CWDM
Public Const cligInfoAbout = 87           'position des controles : frmAbout-> Modif MY/CWDM


Public Const cColNomControl = 1           'colonne ou se trouve l'identifiant des controles
Public Const cColLangue1 = 2              'premi|fffd|re colonne de traduction
Public Const cLigDefautConfig = cLigInfoConfig + 1    'ecran Configuration : ligne pour les valeurs par defaut
Public Const cColDefautConfig = 8                     'ecran Configuration : colonne pour les valeurs par defaut
Public Const cLigDefautOFI = cligInfoOFI + 1          'ecran OFI : ligne pour les valeurs par defaut
Public Const cColDefautOFI = 8                        'ecran OFI : colonne pour les valeurs par defaut
Public Const cNbLangue = 5                            'nombre de langues disponibles

Public Const cLOSSOE = "LOSSOE"           'identifcation parametres trame mesure
Public Const cLOSSREFOE = "LOSSREFOE"     'identifcation parametres trame mesure
Public Const cLOSSTYPOE = "LOSSTYPOE"     'identifcation parametres trame mesure
Public Const cLOSSEO = "LOSSEO"           'identifcation parametres trame mesure
Public Const cLOSSREFEO = "LOSSREFEO"     'identifcation parametres trame mesure
Public Const cLOSSTYPEO = "LOSSTYPEO"     'identifcation parametres trame mesure
Public Const cAVLOSS = "LOSSAVR"          'identifcation parametres trame mesure
Public Const cORLOE = "ORLOE"             'identifcation parametres trame mesure
Public Const cORLREFOE = "ORLREFOE"       'identifcation parametres trame mesure
Public Const cORLEO = "ORLEO"             'identifcation parametres trame mesure
Public Const cORLREFEO = "ORLREFEO"       'identifcation parametres trame mesure
Public Const cWORL = "ORLWRST"            'identifcation parametres trame mesure
Public Const cABSPOW = "ABSPOW"           'identifcation parametres trame mesure
Public Const cUNITPOW = "UNITPOW"         'identifcation parametres trame mesure
Public Const cMODE = "MODE"               'identifcation parametres trame mesure

' TOUS ONGLETS : ENTETE DE PAGE
' TOUS ONGLETS : ENTETE DE PAGE
' TOUS ONGLETS : ENTETE DE PAGE
' TOUS ONGLETS : ENTETE DE PAGE
' TOUS ONGLETS : ENTETE DE PAGE
Const cLigEnteteDebut = 1                     'premi|fffd|re ligne d'ent|fffd|te
Const cColEnteteDebut = 2                     'premi|fffd|re colonne d'ent|fffd|te
Const cLigEnteteFin = cLigEnteteDebut + 4     'Derniere ligne d'ent|fffd|te
Const cColEnteteFin = cColEnteteDebut + 9    'Derniere colonne d'ent|fffd|te
Const cNbColParPage = 11                 'Nbre de colonnes Max en position portrait

Const cLigEnteteTitre = 3
Const cColEnteteTitre = 4
Const cLigEnteteOrigine = 5
Const cColEnteteOrigine = 2
Const cLigEnteteExtremite = 5
Const cColEnteteExtremite = 8
Const cLigEnteteLogo = 3
Const cColEnteteLogo = 3
'
' Onglet GeneralInformation et GeneralFiberInformation
' Onglet GeneralInformation et GeneralFiberInformation
' Onglet GeneralInformation et GeneralFiberInformation
' Onglet GeneralInformation et GeneralFiberInformation
'
Const cLigGeneralInfoCable = 7       'ligne titre tableau CABLE
Const cColGeneralInfoCable = 5
Const cLigGeneralInfoMesure = 16      'ligne titre tableau MESURE
Const cColGeneralInfoMesure = 5
Const cLigGeneralInfoSeuil = 23   'ligne titre tableau SEUIL
Const cColGeneralInfoSeuil = 3

Const cLigGeneralInfoOperateur = cLigGeneralInfoCable + 1
Const cLigGeneralInfoNoCable = cLigGeneralInfoCable + 2
Const cLigGeneralInfoNbFibre = cLigGeneralInfoCable + 3
Const cLigGeneralInfoNbTubeFibre = cLigGeneralInfoCable + 4
Const cLigGeneralInfoNbFibreTube = cLigGeneralInfoCable + 5
Const cLigGeneralInfoIndice = cLigGeneralInfoCable + 6
  
' Onglet GeneralInformationCCA
' Onglet GeneralInformationCCA
' Onglet GeneralInformationCCA

Const cLigGeneralCCAInfoCable = 7       'ligne titre tableau CABLE
Const cColGeneralCCAInfoCable = 5
Const cLigGeneralCCAInfoMesure = 15      'ligne titre tableau MESURE
Const cColGeneralCCAInfoMesure = 5

Const cLigGeneralCCAInfoOperateur = cLigGeneralCCAInfoCable + 1
Const cLigGeneralCCAInfoNoCable = cLigGeneralCCAInfoCable + 2
Const cLigGeneralCCAInfoNbFibre = cLigGeneralCCAInfoCable + 3
Const cLigGeneralCCAInfoNbTubeFibre = cLigGeneralCCAInfoCable + 4
Const cLigGeneralCCAInfoNbFibreTube = cLigGeneralCCAInfoCable + 5
'
' Onglet Summary
' Onglet Summary
' Onglet Summary
' Onglet Summary
'
Const cLigSummaryResult = 7      'ligne titre tableau des onglets affich|fffd|s
Const cColSummaryResult = 3

Const cLigSummaryInsertion = cLigSummaryResult + 1
Const cLigSummaryORL = cLigSummaryResult + 2
Const cLigSummaryHorsSeuils = cLigSummaryResult + 3
Const cLigSummaryReference = cLigSummaryResult + 4
Const cLigSummaryLongueur = cLigSummaryResult + 5
Const cLigSummaryComparaison = cLigSummaryResult + 6
Const cLigSummaryCWDM = cLigSummaryResult + 7
Const cLigSummaryFibre = cLigSummaryResult + 8

'
' Onglet LossTable
' Onglet LossTable
' Onglet LossTable
' Onglet LossTable
' Onglet LossTable
'
Const cLigLossTable = 7
Const cColLossTable = 1
'
' Onglet ORLTable
' Onglet ORLTable
' Onglet ORLTable
' Onglet ORLTable
' Onglet ORLTable
'
Const cLigORLTable = 7
Const cColORLTable = 1
'
' Onglet LossCompareTable
'
Const cLigLossCompareTable = 7 'premiere ligne du tableau (cadre)
Const cColLossCompareTable = 2  'premiere colonne du tableau (cadre)
Const cColLossOELambda1 = 4
Const cColLossOELambda2 = 5
Const cColDifferenceOE = 6
Const cColLossEOLambda1 = 7
Const cColLossEOLambda2 = 8
Const cColDifferenceEO = 9
'
' Onglet ORLCompareTable
'
Const cLigORLCompareTable = 7
Const cColORLCompareTable = 2
Const cColORLOELambda1 = 4
Const cColORLOELambda2 = 5
Const cColORLEOLambda1 = 7
Const cColORLEOLambda2 = 8
'
' Onglet OutOfRangeTable
'
Const cLigOutOfRangeTable = 7
Const cColOutOfRangeTable = 3
'
' Onglet ReferenceTable
'
Const cLigReferenceTable = 7
Const cColReferenceTable = 1
'
' Onglet LengthAndDelay
'
Const cLigLengthTable = 7
Const cColLengthTable = 3
'
' Onglet FiberDetails
'
Const cLigFibreTable = 7
Const cColFibreTable = 1
Const cNbColFixeFibre = 7 'nombre de colonnes toujours pr|fffd|sentes
'
' Onglet CWDMThresholdTable
'
Const cLigCWDMThreshold = 9
Const cColCWDMThreshold = 4
Const cNbColFixeThresholdCWDM = 6 'nombre de colonnes toujours pr|fffd|sentes
Const cNbLigThresholdMesures = 4  ' Nombre de lignes s|fffd|parant ent|fffd|te fibre et thresholds CCA

' Onglet CWDMMeasurements
'
Const cLigFibreCWDMTable = 9
Const cColFibreCWDMTable = 3
Const cNbColFixeFibreCWDM = 8 'nombre de colonnes toujours pr|fffd|sentes
Const cNbLigFibreMesures = 4  ' Nombre de lignes s|fffd|parant ent|fffd|te fibre et mesures CCA

Dim gnMemoLargeur As Integer
Dim gnMemoHauteur As Integer



' Tous les controles de chaque fen|fffd|tre sont mis |fffd| jour
' suivant la langue
'
Type typ_Configuration
  tab_sfrmConfiguration(cInfoConfig) As String
  tab_sfrmMenu(cInfoMenu) As String
  tab_sfrmOFI(cInfoOFI) As String
  tab_sfrmOFI2(cInfoOFI2) As String
  tab_sfrmAbout(cInfoAbout) As String
End Type
'
' La premi|fffd|re partie concerne les choix effectu|fffd|s
' par l'utilisateur au niveau de la configuration
' La deuxi|fffd|me partie concerne les contr|fffd|les et la
' traduction suivant la langue
'
Type typ_Langue
  iLangue_courante As Long
  iType_papier As Long
  bImpression As Boolean
  iNbFibre As Long
  iNbdigit As Long
  bSelect_Cable As Boolean
  bSelect_Insertion As Boolean
  bSelect_Orl As Boolean
  bSelect_Out As Boolean
  bSelect_Reference As Boolean
  bSelect_Length As Boolean
  bSelect_Comparaison As Boolean
  bSelect_GenCWDM As Boolean
  bSelect_FibCWDM As Boolean
  bSelect_ThresCWDM As Boolean
  dSeuilComparaisonLoss As Double
  dSeuilComparaisonORL As Double
  bSelect_Fibre As Boolean
  bSelect_TxtFile As Boolean
  sLogo As String
  sTitre As String
  sOrigine As String
  sDestination As String
  sLambda1 As String
  sLambda2 As String
  Nom_Control As typ_Configuration
  Config_Langue(cNbLangue) As typ_Configuration
End Type
'
' gestion des langues dans les tableaux, les infos $xx$
' sont remplac|fffd|es par les textes suivant la langue
'
Type typ_lxlangue
  libelle() As String
End Type

Type typ_lexique
  nbLexique As Long
  repere() As String
  langue(cNbLangue) As typ_lxlangue
End Type
'
'
Public gfIndexOfRefractionCustom As Double

Public g_tabLexique As typ_lexique    ' contient tous les libell|fffd|s utilis|fffd|s dans les
                                      ' colonnes des tableaux avant remplissage
Public g_tabLexiqueSupp As typ_lexique ' contient tous les libell|fffd|s utilis|fffd|s dans les
                                       ' colonnes des tableaux apres remplissage
Public g_tabMultiLangue As typ_Langue ' contient tous les libell|fffd|s utlis|fffd|s dans les
                                      ' |fffd|crans aisni que les valeurs par d|fffd|faut suivant
                                      ' la langue s|fffd|lectionn|fffd|e
Public g_tabMessageErreur(cNbLangue) As typ_lxlangue 'contient les libelles des messages d'erreur
Public gClasseurOFI As String

' GESTION RAFRAICHISSEMENT ECRAN
Dim m_nCompteurVerrouillageEcran As Integer


Public Function fctCDbl(strValeur As String) As Double
Dim iPos As Long
Dim sTexte As String
Dim sCar As String 'separateur courant

On Error Resume Next

  ' il faut valider le caract|fffd|re de s|fffd|paration des d|fffd|cimales
  sTexte = CStr(21 / 10)
  sCar = Mid$(sTexte, 2, 1)
  iPos = InStr(strValeur, ".")
  If (sCar <> ".") And iPos <> 0 Then
    Mid(strValeur, iPos, 1) = sCar
  End If
  Err = 0
  fctCDbl = CDbl(strValeur)
End Function

'********************************************************
' Fonction : Ajout_Logo
'
'********************************************************
Function Ajout_Logo()
Const cDecale = 3                 'pour ne pas positionner l'image sur le cadre
Dim nFichier As Long
Dim nOnglet As Long
Dim HauteurLogo As Long
Dim Ratio As Double

    On Error Resume Next
    
    Err.Number = 0
    nFichier = FreeFile()
    Open g_tabMultiLangue.sLogo For Input As nFichier
    Close nFichier
        
    ' si le fichier existe
    If Err.Number = 0 Then
      ' redimensionner le logo
      HauteurLogo = Rows(cLigEnteteLogo).RowHeight - (2 * cDecale)
      Cells(cLigEnteteLogo, cLigEnteteLogo).Select
      ' on ouvre la figure
      Err.Number = 0
      ActiveSheet.Pictures.Insert(g_tabMultiLangue.sLogo).Select
      
      ' on la redimensionne
      If Err.Number = 0 Then
        ActiveSheet.DrawingObjects("Picture 1").Select
            
        Ratio = Selection.Height / HauteurLogo
        
        Selection.Height = Selection.Height / Ratio
        Selection.Width = Selection.Width / Ratio
          
        Selection.Top = Selection.Top + cDecale
        Selection.Left = Selection.Left + cDecale
     End If
     
    End If

End Function
'********************************************************
' Fonction : get_tabLexique
'
'********************************************************
Function Get_tabLexique()
Dim nbRepere As Long
Dim nbDebutRepereMsg As Long
Dim il As Long
Dim nIndex As Long

  On Error Resume Next
  
  ThisWorkbook.Activate
  Sheets(cFeuilleMultiLingue).Activate

  ' recuperation des lexiques
  nbRepere = Cells(2, 1).Value
  g_tabLexique.nbLexique = nbRepere
  
  ReDim g_tabLexique.repere(nbRepere)
  
  For il = 1 To cNbLangue
    ReDim g_tabLexique.langue(il).libelle(nbRepere)
  Next
  
  For nIndex = 1 To nbRepere
    g_tabLexique.repere(nIndex) = Cells(2 + nIndex, 1).Value
    For il = 1 To cNbLangue
      g_tabLexique.langue(il).libelle(nIndex) = Cells(2 + nIndex, 1 + il)
    Next
  Next
  
  ' recuperation des messages d'erreur
  nbDebutRepereMsg = 2 + nbRepere + 1
  nbRepere = Cells(nbDebutRepereMsg, 1).Value
  
  For il = 1 To cNbLangue
    ReDim g_tabMessageErreur(il).libelle(nbRepere)
  Next
  
  For nIndex = 1 To nbRepere
    For il = 1 To cNbLangue
      g_tabMessageErreur(il).libelle(nIndex) = Cells(nbDebutRepereMsg + nIndex, 1 + il)
    Next
  Next
  
  ' recuperation du lexique supplementaire
  nbDebutRepereMsg = nbDebutRepereMsg + nbRepere + 1
  nbRepere = Cells(nbDebutRepereMsg, 1).Value
  
  ReDim g_tabLexiqueSupp.repere(nbRepere)
  
  For il = 1 To cNbLangue
    ReDim g_tabLexiqueSupp.langue(il).libelle(nbRepere)
  Next
  
  For nIndex = 1 To nbRepere
    g_tabLexiqueSupp.repere(nIndex) = Cells(2 + nIndex, 1).Value
    For il = 1 To cNbLangue
      g_tabLexiqueSupp.langue(il).libelle(nIndex) = Cells(2 + nIndex, 1 + il)
    Next
  Next
  
End Function
'********************************************************
' Fonction : trueFalse
'
'********************************************************
Function trueFalse(car As String) As Boolean
  On Error Resume Next
  
  If (car = "Y") Or (car = "y") Then
    trueFalse = True
  Else
    trueFalse = False
  End If

End Function
'********************************************************
' Fonction : YesNo
'
'********************************************************
Function YesNo(etat As Boolean) As String
  On Error Resume Next
  
  If etat Then
    YesNo = "Y"
  Else
    YesNo = "N"
  End If
End Function
'********************************************************
' Fonction : YesNo
'
'********************************************************
Function StatusTest(etat As String) As String
  On Error Resume Next
  
  If etat = "1" Then
    StatusTest = "$testPass$"
  Else
    StatusTest = "$testFail$"
  End If
End Function
Function DetecTest(etat As String) As String

  On Error Resume Next
  
    If etat = "0.00" Then
    
        DetecTest = "Non Det."
        
    Else
        DetecTest = etat
    End If
    
End Function
          
Function AffichMesure(sTypeMesureChoisi As String, iLength As Long, iFibre As Long, iLig As Long, iCol As Long)
Dim j As Long
Dim iMesure As Long

  On Error Resume Next
  For j = 1 To CLng(g_tabMesure(iFibre).sNbTypeMesure)
    If g_tabMesure(iFibre).sTypeMesure(j) = sTypeMesureChoisi Then
      iMesure = j
      Exit For
    End If
  Next
  
  If g_tabMesure(iFibre).sTypeMesure(iMesure) <> "" Then
      If ((g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure) <> "") And _
          (g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure) <> "UNDEF")) Then
          If (Cells(cLigFibreTable, iCol) = "") Then
              Cells(cLigFibreTable, iCol).Value = "$" & g_tabMesure(iFibre).sTypeMesure(iMesure) & "$"
          End If
      
          ' afficher la valeur
          Select Case sTypeMesureChoisi
            Case cORLREFOE, cORLREFEO, cORLOE, cORLEO, cWORL
              Cells(iLig, iCol).Value = FormateORL(g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure))
            Case Else
              Err = 0
              
              If (fctCDbl(g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure)) <> 0) Then
                Cells(iLig, iCol).Value = fctCDbl(g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure))
              Else
                Cells(iLig, iCol).Value = g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure)
              End If
          End Select
          
          
          iCol = iCol + 1
      End If
  End If
  
  On Error GoTo 0

End Function

'********************************************************
' Fonction : Get_Multi_Langue_Defaut
'
' R|fffd|cup|fffd|re les valeurs s|fffd|lectionn|fffd|es par l'utilisateur
'
'********************************************************
Function Get_Multi_Langue_Defaut() As Boolean

  On Error Resume Next

  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate
  '==================================
  ' Valeurs par d|fffd|faut CONFIGURATION
  '==================================
  g_tabMultiLangue.iLangue_courante = Cells(cLigDefautConfig, cColDefautConfig).Value
  g_tabMultiLangue.iType_papier = Cells(cLigDefautConfig + 1, cColDefautConfig).Value
  g_tabMultiLangue.bImpression = trueFalse(Cells(cLigDefautConfig + 2, cColDefautConfig).Value)
  g_tabMultiLangue.iNbFibre = Cells(cLigDefautConfig + 3, cColDefautConfig).Value
  g_tabMultiLangue.iNbdigit = Cells(cLigDefautConfig + 4, cColDefautConfig).Value
  g_tabMultiLangue.bSelect_Cable = trueFalse(Cells(cLigDefautConfig + 5, cColDefautConfig).Value)
  '
  'premi|fffd|re longueur d'onde
  '
  g_tabMultiLangue.bSelect_Insertion = trueFalse(Cells(cLigDefautConfig + 6, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_Orl = trueFalse(Cells(cLigDefautConfig + 7, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_Out = trueFalse(Cells(cLigDefautConfig + 8, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_Reference = trueFalse(Cells(cLigDefautConfig + 9, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_Length = trueFalse(Cells(cLigDefautConfig + 10, cColDefautConfig).Value)
  '
  'commun aux deux longueurs d'onde
  '
  g_tabMultiLangue.bSelect_Comparaison = trueFalse(Cells(cLigDefautConfig + 11, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_Fibre = trueFalse(Cells(cLigDefautConfig + 12, cColDefautConfig).Value)
  g_tabMultiLangue.sLogo = Cells(cLigDefautConfig + 13, cColDefautConfig).Value
  g_tabMultiLangue.sTitre = Cells(cLigDefautConfig + 14, cColDefautConfig).Value
  If g_tabMultiLangue.sTitre = "" Then
    g_tabMultiLangue.sTitre = g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(6)
  End If
  g_tabMultiLangue.dSeuilComparaisonLoss = fctCDbl(Cells(cLigDefautConfig + 15, cColDefautConfig).Value)
  g_tabMultiLangue.dSeuilComparaisonORL = fctCDbl(Cells(cLigDefautConfig + 16, cColDefautConfig).Value)
  g_tabMultiLangue.sOrigine = ""
  g_tabMultiLangue.sDestination = ""
  g_tabMultiLangue.bSelect_GenCWDM = trueFalse(Cells(cLigDefautConfig + 18, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_FibCWDM = trueFalse(Cells(cLigDefautConfig + 19, cColDefautConfig).Value)
  g_tabMultiLangue.bSelect_ThresCWDM = trueFalse(Cells(cLigDefautConfig + 20, cColDefautConfig).Value)
  
  '========================
  ' Valeurs par d|fffd|faut OFI
  '========================
  g_tabMultiLangue.bSelect_TxtFile = trueFalse(Cells(cLigDefautOFI, cColDefautConfig).Value)
  
End Function
'********************************************************
' Fonction : Set_Multi_Langue_Defaut
'
' M|fffd|morise les valeurs saisies par l'utilisateur
'
'********************************************************
Function Set_Multi_Langue_Defaut() As Boolean
  
  On Error Resume Next
  
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate
  '==================================
  ' Valeurs par d|fffd|faut CONFIGURATION
  '==================================
  Cells(cLigDefautConfig, cColDefautConfig).Value = g_tabMultiLangue.iLangue_courante
  Cells(cLigDefautConfig + 1, cColDefautConfig).Value = g_tabMultiLangue.iType_papier
  Cells(cLigDefautConfig + 2, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bImpression)
  Cells(cLigDefautConfig + 3, cColDefautConfig).Value = g_tabMultiLangue.iNbFibre
  Cells(cLigDefautConfig + 4, cColDefautConfig).Value = g_tabMultiLangue.iNbdigit
  Cells(cLigDefautConfig + 5, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Cable)
  'longueur d'onde
  Cells(cLigDefautConfig + 6, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Insertion)
  Cells(cLigDefautConfig + 7, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Orl)
  Cells(cLigDefautConfig + 8, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Out)
  Cells(cLigDefautConfig + 9, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Reference)
  Cells(cLigDefautConfig + 10, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Length)
  Cells(cLigDefautConfig + 11, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Comparaison)
  Cells(cLigDefautConfig + 12, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_Fibre)
  Cells(cLigDefautConfig + 13, cColDefautConfig).Value = g_tabMultiLangue.sLogo
  
  Cells(cLigDefautConfig + 15, cColDefautConfig).Value = g_tabMultiLangue.dSeuilComparaisonLoss
  Cells(cLigDefautConfig + 16, cColDefautConfig).Value = g_tabMultiLangue.dSeuilComparaisonORL
  
  Cells(cLigDefautConfig + 18, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_GenCWDM)
  Cells(cLigDefautConfig + 19, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_FibCWDM)
  Cells(cLigDefautConfig + 20, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_ThresCWDM)

  '========================
  ' Valeurs par d|fffd|faut OFI
  '========================
  Cells(cLigDefautOFI, cColDefautConfig).Value = YesNo(g_tabMultiLangue.bSelect_TxtFile)
  
End Function

'********************************************************
' Fonction : Get_Multi_Langue_Controls
'
' Recup|fffd|re les noms des contr|fffd|les affich|fffd|s dans les
' |fffd|crans et leur traduction
'
'********************************************************
Function Get_Multi_Langue_Controls() As Boolean
Dim iLangue As Long
Dim nIndex As Long
  
  On Error Resume Next
  
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate

  '========================
  ' Libell|fffd|s des controls
  '========================
  
  For iLangue = 1 To cNbLangue
    
    For nIndex = 1 To cInfoConfig
      g_tabMultiLangue.Nom_Control.tab_sfrmConfiguration(nIndex) = _
           Cells(cLigInfoConfig + nIndex - 1, cColNomControl).Value
      g_tabMultiLangue.Config_Langue(iLangue).tab_sfrmConfiguration(nIndex) = _
           Cells(cLigInfoConfig + nIndex - 1, cColLangue1 + iLangue - 1).Value
    Next
    
    For nIndex = 1 To cInfoMenu
      g_tabMultiLangue.Nom_Control.tab_sfrmMenu(nIndex) = _
           Cells(cLigInfoMenu + nIndex - 1, cColNomControl).Value
      g_tabMultiLangue.Config_Langue(iLangue).tab_sfrmMenu(nIndex) = _
           Cells(cLigInfoMenu + nIndex - 1, cColLangue1 + iLangue - 1).Value
    Next
    
    For nIndex = 1 To cInfoOFI
      g_tabMultiLangue.Nom_Control.tab_sfrmOFI(nIndex) = _
           Cells(cligInfoOFI + nIndex - 1, cColNomControl).Value
      g_tabMultiLangue.Config_Langue(iLangue).tab_sfrmOFI(nIndex) = _
           Cells(cligInfoOFI + nIndex - 1, cColLangue1 + iLangue - 1).Value
    Next
    
    For nIndex = 1 To cInfoOFI2
      g_tabMultiLangue.Nom_Control.tab_sfrmOFI2(nIndex) = _
           Cells(cligInfoOFI2 + nIndex - 1, cColNomControl).Value
      g_tabMultiLangue.Config_Langue(iLangue).tab_sfrmOFI2(nIndex) = _
           Cells(cligInfoOFI2 + nIndex - 1, cColLangue1 + iLangue - 1).Value
    Next
    
    For nIndex = 1 To cInfoAbout
      g_tabMultiLangue.Nom_Control.tab_sfrmAbout(nIndex) = _
           Cells(cligInfoAbout + nIndex - 1, cColNomControl).Value
      g_tabMultiLangue.Config_Langue(iLangue).tab_sfrmAbout(nIndex) = _
           Cells(cligInfoAbout + nIndex - 1, cColLangue1 + iLangue - 1).Value
    Next
    
  Next
  
End Function
'********************************************************
' Fonction : maj_frmMenu
'
' Met |fffd| jour les textes affich|fffd|s dans la fen|fffd|tre Menu
'
'********************************************************
Function maj_frmMenu() As Boolean
Dim il As Long
Dim nIndex As Long
Dim w As Control

  VerrouilleRafraichissementEcran
  On Error Resume Next
  
  il = g_tabMultiLangue.iLangue_courante
  For nIndex = 1 To cInfoMenu
    
    If LCase(frmMenu.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmMenu(nIndex)) Then
      frmMenu.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmMenu(nIndex)
    End If
    
    For Each w In frmMenu.Controls
      If LCase(w.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmMenu(nIndex)) Then
        w.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmMenu(nIndex)
        Exit For
      End If
    Next
  Next
  AutoriseRafraichissementEcran

End Function

'********************************************************
' Fonction : maj_frmOFI
'
' Met |fffd| jour les textes affich|fffd|s dans la fen|fffd|tre OFI
'
'********************************************************
Function maj_frmOFI() As Boolean
Dim il As Long
Dim nIndex As Long
Dim w As Control

  VerrouilleRafraichissementEcran
  On Error Resume Next

  il = g_tabMultiLangue.iLangue_courante
  For nIndex = 1 To cInfoOFI
    
    If LCase(frmOFI.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmOFI(nIndex)) Then
      frmOFI.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmOFI(nIndex)
    End If
    
    For Each w In frmOFI.Controls
      If LCase(w.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmOFI(nIndex)) Then
        w.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmOFI(nIndex)
        Exit For
      End If
    Next
  Next
  frmOFI.txtTitre = g_tabMultiLangue.sTitre
  frmOFI.txtOrigine = g_tabMultiLangue.sOrigine
  frmOFI.txtDestination = g_tabMultiLangue.sDestination
  frmOFI.fraPatientez.Visible = False
  
  AutoriseRafraichissementEcran
  
End Function

'********************************************************
' Fonction : maj_frmOFI2
'
' Met |fffd| jour les textes affich|fffd|s dans la fen|fffd|tre OFI2
'
'********************************************************
Function maj_frmOFI2() As Boolean
Dim il As Long
Dim nIndex As Long
Dim w As Control

  VerrouilleRafraichissementEcran
  On Error Resume Next

  il = g_tabMultiLangue.iLangue_courante
  For nIndex = 1 To cInfoOFI2
    
    If LCase(frmOFI2.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmOFI2(nIndex)) Then
      frmOFI2.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmOFI2(nIndex)
    End If
    
    For Each w In frmOFI2.Controls
      If LCase(w.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmOFI2(nIndex)) Then
        w.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmOFI2(nIndex)
        Exit For
      End If
    Next
  Next
  
  AutoriseRafraichissementEcran
End Function
'********************************************************
' Fonction : maj_frmConfiguration
'
' Met |fffd| jour les textes affich|fffd|s dans la fen|fffd|tre
' Configuration
'
'********************************************************
Function maj_frmConfiguration() As Boolean
Dim il As Long
Dim nIndex As Long
Dim w As Control

  VerrouilleRafraichissementEcran
  On Error Resume Next
  
  il = g_tabMultiLangue.iLangue_courante
  For nIndex = 1 To cInfoConfig
    
    If LCase(frmConfiguration.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmConfiguration(nIndex)) Then
      frmConfiguration.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmConfiguration(nIndex)
    End If

    For Each w In frmConfiguration.Controls
      If LCase(w.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmConfiguration(nIndex)) Then
        w.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmConfiguration(nIndex)
        Exit For
      End If
    Next
  Next
  
  AutoriseRafraichissementEcran

End Function
'********************************************************
' Fonction : maj_frmAbout
'
' Met |fffd| jour les textes affich|fffd|s dans la fen|fffd|tre
' Configuration
'
'********************************************************
Function maj_frmAbout() As Boolean
Dim il As Long
Dim nIndex As Long
Dim w As Control

  VerrouilleRafraichissementEcran
  On Error Resume Next
  
  il = g_tabMultiLangue.iLangue_courante
  For nIndex = 1 To cInfoAbout
  
    If LCase(frmAbout.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmAbout(nIndex)) Then
      frmAbout.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmAbout(nIndex)
    End If

    For Each w In frmAbout.Controls
      If LCase(w.Name) = LCase(g_tabMultiLangue.Nom_Control.tab_sfrmAbout(nIndex)) Then
        w.Caption = g_tabMultiLangue.Config_Langue(il).tab_sfrmAbout(nIndex)
        Exit For
      End If
    Next
  Next
  
  AutoriseRafraichissementEcran
  

End Function



'********************************************************
' Fonction : maj_frmConfigurationDefaut
'
' Met |fffd| jour les options s|fffd|leectionn|fffd|es pr|fffd|c|fffd|demment
' par l'utilisateur
'
'********************************************************
Function maj_frmConfigurationDefaut()

  VerrouilleRafraichissementEcran
  On Error Resume Next

  Select Case g_tabMultiLangue.iLangue_courante
    Case 1: frmConfiguration.optAnglais = True
    Case 2: frmConfiguration.optFrancais = True
    Case 3: frmConfiguration.optAllemand = True
    Case 4: frmConfiguration.optEspagnol = True
    Case Else: frmConfiguration.optUtilisateur = True
  End Select
  
  Select Case g_tabMultiLangue.iType_papier
    Case 1: frmConfiguration.optA4 = True
    Case 2: frmConfiguration.optA3 = True
    Case 3: frmConfiguration.optUSLetter = True
    Case Else: frmConfiguration.optUSLegal = True
  End Select
    
  frmConfiguration.chkPrintPreview = g_tabMultiLangue.bImpression
  frmConfiguration.txtNombreFibre = g_tabMultiLangue.iNbFibre
  frmConfiguration.txtNombreDigit = g_tabMultiLangue.iNbdigit
  frmConfiguration.txtLogo = g_tabMultiLangue.sLogo
  frmConfiguration.chkCable = g_tabMultiLangue.bSelect_Cable
  frmConfiguration.chkInsertion = g_tabMultiLangue.bSelect_Insertion
  frmConfiguration.chkORL = g_tabMultiLangue.bSelect_Orl
  frmConfiguration.chkOut = g_tabMultiLangue.bSelect_Out
  frmConfiguration.chkReference = g_tabMultiLangue.bSelect_Reference
  frmConfiguration.chkLength = g_tabMultiLangue.bSelect_Length
  frmConfiguration.chkComparaison = g_tabMultiLangue.bSelect_Comparaison
  frmConfiguration.ChkGenCWDM = g_tabMultiLangue.bSelect_GenCWDM
  frmConfiguration.ChkFibCWDM = g_tabMultiLangue.bSelect_FibCWDM
  frmConfiguration.chkThresCWDM = g_tabMultiLangue.bSelect_ThresCWDM
  frmConfiguration.txtSeuilComparaisonLoss = g_tabMultiLangue.dSeuilComparaisonLoss
  frmConfiguration.txtSeuilComparaisonORL = g_tabMultiLangue.dSeuilComparaisonORL
  majFrameComparaison
  frmConfiguration.chkFibre = g_tabMultiLangue.bSelect_Fibre
  
  AutoriseRafraichissementEcran
  
End Function
Function majFrameComparaison()
  frmConfiguration.fraSeuilComparaison.Visible = frmConfiguration.chkComparaison
End Function

'********************************************************
' Fonction : record_frmconfigurationdefaut
'
' memorise dans la structure les valeurs saisies
' par l'utilisateur afin de pouvoir les utiliser
' |fffd| chauqe ouverture de fen|fffd|tre
'
'********************************************************
Function record_frmConfigurationDefaut()

  VerrouilleRafraichissementEcran
  On Error Resume Next

  If frmConfiguration.optAnglais Then g_tabMultiLangue.iLangue_courante = 1
  If frmConfiguration.optFrancais Then g_tabMultiLangue.iLangue_courante = 2
  If frmConfiguration.optAllemand Then g_tabMultiLangue.iLangue_courante = 3
  If frmConfiguration.optEspagnol Then g_tabMultiLangue.iLangue_courante = 4
  If frmConfiguration.optUtilisateur Then g_tabMultiLangue.iLangue_courante = 5
  
  If frmConfiguration.optA4 Then g_tabMultiLangue.iType_papier = 1
  If frmConfiguration.optA3 Then g_tabMultiLangue.iType_papier = 2
  If frmConfiguration.optUSLetter Then g_tabMultiLangue.iType_papier = 3
  If frmConfiguration.optUSLegal Then g_tabMultiLangue.iType_papier = 4
    
  g_tabMultiLangue.bImpression = frmConfiguration.chkPrintPreview
  g_tabMultiLangue.iNbFibre = frmConfiguration.txtNombreFibre
  g_tabMultiLangue.iNbdigit = frmConfiguration.txtNombreDigit
  g_tabMultiLangue.sLogo = frmConfiguration.txtLogo
  g_tabMultiLangue.bSelect_Cable = frmConfiguration.chkCable
  g_tabMultiLangue.bSelect_Insertion = frmConfiguration.chkInsertion
  g_tabMultiLangue.bSelect_Orl = frmConfiguration.chkORL
  g_tabMultiLangue.bSelect_Out = frmConfiguration.chkOut
  g_tabMultiLangue.bSelect_Reference = frmConfiguration.chkReference
  g_tabMultiLangue.bSelect_Length = frmConfiguration.chkLength
  g_tabMultiLangue.bSelect_Comparaison = frmConfiguration.chkComparaison
  g_tabMultiLangue.bSelect_GenCWDM = frmConfiguration.ChkGenCWDM
  g_tabMultiLangue.bSelect_FibCWDM = frmConfiguration.ChkFibCWDM
  g_tabMultiLangue.bSelect_ThresCWDM = frmConfiguration.chkThresCWDM
  g_tabMultiLangue.dSeuilComparaisonLoss = fctCDbl(frmConfiguration.txtSeuilComparaisonLoss)
  g_tabMultiLangue.dSeuilComparaisonORL = fctCDbl(frmConfiguration.txtSeuilComparaisonORL)
  majFrameComparaison
  g_tabMultiLangue.bSelect_Fibre = frmConfiguration.chkFibre
  
  AutoriseRafraichissementEcran
  
End Function

'********************************************************
' Fonction : Auto_Open
'
' A l'ouverture du fichier on se positionne sur le
' premier onglet
'
'********************************************************
Public Sub Auto_Open()
  
    gnMemoLargeur = 0
    gnMemoHauteur = 0
    
    On Error Resume Next
    
    InitFenetreAppli

End Sub
'********************************************************
' Fonction : start_OFIApplication
'
' On recup|fffd|re toutes les infos m|fffd|moris|fffd|es dans les onglets
' "Start" et "multilingue"
'
'********************************************************
Public Sub start_OFIapplication()
  
  On Error Resume Next
  
  InitFenetreAppli
  
        
    Get_tabLexique
    Get_Multi_Langue_Defaut
    Get_Multi_Langue_Controls
    
    If (VerificationPresenceImprimante = True) Then
        frmMenu.Show
    Else
        MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(11), _
               vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(2)
    End If

End Sub

Function VerificationPresenceImprimante() As Boolean
    ' ON VERIFIE LA PRESENCE D'UNE IMPRIMANTE.
    ' CE QUE L'ON TESTE N'A PAS TROP D'IMPORTANCE
    ' L'ESSENTIEL ETANT D'ACCEDER A PageSetup
    On Error Resume Next
    Err = 0
    
    ActiveSheet.PageSetup.PaperSize = ActiveSheet.PageSetup.PaperSize

    If (Err <> 0) Then
        VerificationPresenceImprimante = False
    Else
        VerificationPresenceImprimante = True
    End If
    
    On Error GoTo 0
        
End Function
'********************************************************
' Fonction : Sauvegarde_fichier_texte
'
' Si 'loption fichier texte est s|fffd|lectionn|fffd|e
' on prpose |fffd| l'utilisateur de sauvegarder le
' fichier texte
'
'********************************************************
Public Sub SauvegardeFichierTexte(sNoCable As String, sNomFichier As String)
Dim infoFibre As Long
Dim souschaine As String
Dim nIndex As Long
Dim j As Long
Dim infomesure As Long
Dim nbChannelGrid As Long
Dim iChannel As Long
Dim sEntete As String

  On Error GoTo err_sauvegarde

  Open sNomFichier For Output As 1
      
  If gb_LTS And gb_CCA Then
    sEntete = "[ENTETE MIXTE]"
  ElseIf gb_LTS And Not gb_CCA Then
    sEntete = "[ENTETE]"
  ElseIf gb_CCA And Not gb_LTS Then
    sEntete = "[ENTETE CCA]"
  End If
  ' First Part if LTS results
  If gb_LTS Then
      '[entete] + nb lignes entete + nb colonne entete + nbLignes + nbColonnes
      Print #1, sEntete & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & "1" & Chr(9) & "2" & Chr(9)
      Print #1, "Date " & Chr(9) & Date & Chr(9)
      Print #1, "Cable " & Chr(9) & sNoCable & Chr(9)
      Print #1, "Title" & Chr(9) & g_tabMultiLangue.sTitre & Chr(9)
      Print #1, "Origin" & Chr(9) & g_tabMultiLangue.sOrigine & Chr(9)
      Print #1, "Extremity" & Chr(9) & g_tabMultiLangue.sDestination & Chr(9)
      Print #1, "Lambda 1" & Chr(9) & g_tabMultiLangue.sLambda1 & Chr(9)
      Print #1, "Lambda 2" & Chr(9) & g_tabMultiLangue.sLambda2 & Chr(9)
    
      '[threshold] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      Print #1, "[THRESHOLD]" & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & cNbLgOndeMax & Chr(9) & "4" & Chr(9)
      Print #1, "WaveLength" & Chr(9) & "Loss" & Chr(9) & "Abs Power" & Chr(9) & "ORL" & Chr(9)
      For nIndex = 1 To cNbLgOndeMax
        Print #1, g_tabThreshold.sWaveLength(nIndex) & Chr(9) & g_tabThreshold.sLoss(nIndex) & Chr(9) & _
                  g_tabThreshold.sAbsPower(nIndex) & Chr(9) & g_tabThreshold.sORL(nIndex) & Chr(9)
      Next
      
      '[threshold delay] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      Print #1, "[THRESHOLD_DELAY]" & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & cNbLgOndeMax & Chr(9) & "4" & Chr(9)
      Print #1, "Delay :" & Chr(9) & g_tabThreshold.sdelay & Chr(9)
      
      '[cable] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      Print #1, "[CABLE]" & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & "1" & Chr(9) & "9" & Chr(9)
      Print #1, "Origine" & Chr(9) & _
                "Status" & Chr(9) & _
                "Date" & Chr(9) & _
                "Time" & Chr(9) & _
                "Nb Tested Fiber" & Chr(9) & _
                "Nb Fiber" & Chr(9) & _
                "ID Local Operator" & Chr(9) & _
                "ID Distant operator" & Chr(9) & _
                "Tubes in cable" & Chr(9) & _
                "Fiber in tube" & Chr(9)
      Print #1, g_tabCable.sOrigine & Chr(9) & _
                g_tabCable.sStatus & Chr(9) & _
                g_tabCable.sDate & Chr(9) & _
                g_tabCable.sTime & Chr(9) & _
                g_tabCable.sNBFTestes & Chr(9) & _
                g_tabCable.sNBFibres & Chr(9) & _
                g_tabCable.sIDLocalOperateur & Chr(9) & _
                g_tabCable.sIDDistantOperator & Chr(9) & _
                g_tabCable.sNBTubesCable & Chr(9) & _
                g_tabCable.sNBFiberTubes & Chr(9)
        
      '[fiber_header X] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
      Print #1, "[FIBER_HEADER_X]" & Chr(9) & "1" & Chr(9) & "1" & Chr(9) & g_tabCable.sNBFTestes & Chr(9) & cNBZoneFixeFibre & Chr(9)
      Print #1, "Fiber" & Chr(9) & "Status" & Chr(9) & "Date" & Chr(9) & "Time" & Chr(9) & "Color" & Chr(9) & _
                "Delay" & Chr(9) & "UnitTime" & Chr(9) & "IR" & Chr(9) & "Length" & Chr(9) & _
                "Unit cable length" & Chr(9) & "Local OFI type" & Chr(9) & "Distant OFI type" & Chr(9) & _
                "Local soft version" & Chr(9) & "Distant soft version " & Chr(9) & _
                "Local serial number" & Chr(9) & "Distant serial number" & Chr(9)
        
      For nIndex = 1 To g_tabCable.sNBFTestes
        souschaine = g_tabCable.sIdentFibre(nIndex).sNomFibre & Chr(9)
        For infoFibre = 1 To cNBZoneFixeFibre
          souschaine = souschaine & g_tabCable.sIdentFibre(nIndex).sParamFibre(infoFibre) & Chr(9)
        Next
        Print #1, souschaine & Chr(9)
      Next
    
      '[fiber_measure header] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
      Print #1, "[FIBER_MEASURE_HEADER]" & Chr(9) & "1" & Chr(9) & "1" & Chr(9) & g_tabCable.sNBFTestes & Chr(9) & cNBZoneFixeFibre & Chr(9)
      Print #1, "Fiber" & Chr(9) & "Nb Wavelength" & Chr(9) & "Nb Measure" & Chr(9)
      For nIndex = 1 To g_tabCable.sNBFTestes
        Print #1, g_tabCable.sIdentFibre(nIndex).sNomFibre & Chr(9) & g_tabMesure(nIndex).sNbOnde _
                  & Chr(9) & g_tabMesure(nIndex).sNbTypeMesure & Chr(9) & g_tabMesure(nIndex).sNbMesureReel & Chr(9)
        souschaine = g_tabCable.sIdentFibre(nIndex).sNomFibre & Chr(9)
        For j = 1 To CLng(g_tabMesure(nIndex).sNbOnde)
          souschaine = souschaine & g_tabMesure(nIndex).sOnde(j).sIdentOnde & Chr(9)
        Next
        Print #1, souschaine & Chr(9)
          
        For infomesure = 1 To CLng(g_tabMesure(nIndex).sNbTypeMesure)
          souschaine = g_tabMesure(nIndex).sTypeMesure(infomesure) & Chr(9)
          For j = 1 To CLng(g_tabMesure(nIndex).sNbOnde)
            souschaine = souschaine & g_tabMesure(nIndex).sOnde(j).sValeurMesure(infomesure) & Chr(9)
          Next
          Print #1, souschaine & Chr(9)
        Next
      Next
      
      '[Wavelength Identification]+ nblignes entete + nb colonne entete + nbLignes + nbColonnes
      Print #1, "[WAVELENGTH_IDENTIFICATION]" & Chr(9) & "0" & Chr(9) & "0" & Chr(9) & g_NbOndeMax & Chr(9) & 1 & Chr(9)
      For nIndex = 1 To g_NbOndeMax
        Print #1, g_tabIdentOndeMax(nIndex) & Chr(9)
      Next
      
  End If  ' if gb_LTS
  
  ' ***********************************************************************************
  ' Second Part if CCA results
  If gb_CCA Then
      '[entete] + nb lignes entete + nb colonne entete + nbLignes + nbColonnes
      Print #1, sEntete & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & "1" & Chr(9) & "2" & Chr(9)
      Print #1, "Date " & Chr(9) & Date & Chr(9)
      Print #1, "Cable " & Chr(9) & sNoCable & Chr(9)
      Print #1, "Title" & Chr(9) & g_tabMultiLangue.sTitre & Chr(9)
      Print #1, "Origin" & Chr(9) & g_tabMultiLangue.sOrigine & Chr(9)
      Print #1, "Extremity" & Chr(9) & g_tabMultiLangue.sDestination & Chr(9)
     
      '[cable] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      Print #1, "[CABLE]" & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & "1" & Chr(9) & "9" & Chr(9)
      Print #1, "Origine" & Chr(9) & _
                "Status" & Chr(9) & _
                "Date" & Chr(9) & _
                "Time" & Chr(9) & _
                "Nb Test Fib" & Chr(9) & _
                "Nb Fiber" & Chr(9) & _
                "ID Loc Oper" & Chr(9) & _
                "Tubes / cable" & Chr(9) & _
                "Fiber / tube" & Chr(9)
      Print #1, g_tabCableCCA.sOrigine & Chr(9) & _
                g_tabCableCCA.sStatus & Chr(9) & _
                g_tabCableCCA.sDate & Chr(9) & _
                g_tabCableCCA.sTime & Chr(9) & _
                g_tabCableCCA.sNBFTestes & Chr(9) & _
                g_tabCableCCA.sNBFibres & Chr(9) & _
                g_tabCableCCA.sIDLocalOperateur & Chr(9) & _
                g_tabCableCCA.sNBTubesCable & Chr(9) & _
                g_tabCableCCA.sNBFiberTubes & Chr(9)
        
      '[fiber_header X] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
      Print #1, "[FIBER_HEADER_X]" & Chr(9) & "1" & Chr(9) & "1" & Chr(9) & g_tabCableCCA.sNBFTestes & Chr(9) & cNBZoneFixeFibreCCA & Chr(9)
        
      ' Boucle sur toutes les fibres, et pour chaque fibre on marque les resultats
      For nIndex = 1 To g_tabCableCCA.sNBFTestes
      
        Print #1, "Fiber id" & Chr(9) & "Status" & Chr(9) & "Date" & Chr(9) & "Time" & Chr(9) & "Color" & Chr(9) & _
                "Local OFI type" & Chr(9) & "Local soft version" & Chr(9) & "Local serial number" & Chr(9)
        souschaine = g_tabCableCCA.sIdentFibre(nIndex).sNomFibre & Chr(9)
        For infoFibre = 1 To cNBZoneFixeFibreCCA
          souschaine = souschaine & g_tabCableCCA.sIdentFibre(nIndex).sParamFibre(infoFibre) & Chr(9)
        Next
        Print #1, souschaine & Chr(9)
        Print #1, "Used Plan" & Chr(9) & "Grid Name" & Chr(9) & "Grid CH. Nb" & Chr(9) _
            & "Comp. Power" & Chr(9)
         Print #1, g_tabMesureCCA(nIndex).sUsedPlan & Chr(9) & g_tabMesureCCA(nIndex).sGridName _
                    & Chr(9) & g_tabMesureCCA(nIndex).sGridChannelNumber & Chr(9) & _
                    g_tabMesureCCA(nIndex).sPowerComp & Chr(9)
         
        '[fiber_measure threshold] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
        Print #1, "[FIBER_CWDM]" & Chr(9) & "1" & Chr(9) & "1" & Chr(9) & g_tabCableCCA.sNBFTestes & Chr(9) & cNBZoneFixeFibreCCA & Chr(9)
        nbChannelGrid = CLng(g_tabMesureCCA(nIndex).sGridChannelNumber)
        Print #1, "Band id" & Chr(9) & "Channel id" & Chr(9) & "Grid lambda" & _
                        "Measured lambda" & Chr(9) & "Lambda Power" & Chr(9) _
                        & "Lambda Delta" & Chr(9) & "Power margin" & Chr(9) & _
                        "Wavelength thresholds" & Chr(9) & "Wavelength thresholds" & Chr(9) & "Power threshold"
               
        For iChannel = 1 To nbChannelGrid
          Print #1, g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sBandId & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sChannelId & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sGridLambda & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sMeasuredLambda & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sLambdaPower & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sLambdaDelta & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sPowerMargin & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sWavelengthSeuil & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sWavelengthThreshold & Chr(9) _
                    & g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sPowerThreshold & Chr(9)
        Next iChannel
      Next nIndex  'nIndex = 1 To g_tabCableCCA.sNBFTestes    fibre
    
  End If  ' if gb_CCA
  
  Close 1
 
  Exit Sub
err_sauvegarde:
  MsgBox Error$, vbCritical + vbOKOnly, Application.Name
End Sub
'******************************************************************
' PROCEDURE : fctStrLigneValeur
'
' permet de d|fffd|couper les lignes du fichier texte
' retourne le text situ|fffd| avant un chr(9)
' supprime le text retourn|fffd| de la chaine d'entree
'******************************************************************
Private Sub fctStrLigneValeur(ByRef sInformation As String, ByRef strValeur As String)
Dim sTexte As String
Dim sCar As String 'separateur courant

  On Error Resume Next

  sInformation = Mid$(strValeur, 1, InStr(strValeur, Chr(9)) - 1)
  strValeur = Mid$(strValeur, InStr(strValeur, Chr(9)) + 1)
  ' il faut valider le caract|fffd|re de s|fffd|paration
  sTexte = CStr(21 / 10)
  sCar = Mid$(sTexte, 2, 1)
  Mid(sInformation, InStr(sInformation, "."), 1) = sCar
  
End Sub
'********************************************************
' Fonction : DecoupeBloc
'
'
'********************************************************
Private Sub DecoupeBloc(sIn As String, sOut As String, i1 As Long, i2 As Long, i3 As Long, i4 As Long)
Dim sValeur As String
Dim nIndex As Long

  On Error Resume Next
  
  For nIndex = 1 To 5
    fctStrLigneValeur sValeur, sIn
    Select Case nIndex
      Case 1: sOut = sValeur
      Case 2: i1 = CLng(sValeur)
      Case 3: i2 = CLng(sValeur)
      Case 4: i3 = CLng(sValeur)
      Case 5: i4 = CLng(sValeur)
    End Select
  Next
  
End Sub
'********************************************************
' Fonction : Lecture_fichier_texte
'
' on est capable de relire un fichier texte
'
' en entr|fffd|e : le nom du fichier
'
'********************************************************
Public Sub LectureFichierTexte(sNomFichier As String)
Dim sLigne As String
Dim sIdentBloc As String
Dim nbLigEntete As Long
Dim nbColEntete As Long
Dim nbLignes As Long
Dim nbColonnes As Long
Dim sNotUsed As String
Dim nIndex As Long
Dim infoFibre As Long
Dim j As Long
Dim infomesure As Long
Dim sInfo As String

  On Error GoTo err_sauvegarde

  Open sNomFichier For Input As 1
      
  Line Input #1, sLigne
  DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      
  If sIdentBloc <> "[ENTETE]" And sIdentBloc <> "[ENTETE CCA]" And sIdentBloc <> "[ENTETE MIXTE]" Then
     MsgBox "Fichier inconnu", vbCritical + vbOKOnly, ""
     Close 1
     Exit Sub
  End If
    
  ' On cherche ici |fffd| connaitre le type de fichier pour savoir comment le lire.
  
  If sIdentBloc = "[ENTETE MIXTE]" Then
    gb_LTS = True
    gb_CCA = True
  ElseIf sIdentBloc = "[ENTETE]" Then
    gb_LTS = True
    gb_CCA = False
  Else
    gb_CCA = True
    gb_LTS = False
  End If
      
  ' On traite ici le cas des mesures LTS
  If gb_LTS Then
        
      
      Line Input #1, sLigne                     '[date] & date
      Line Input #1, sLigne                     '[Cable] & Nom du Cable
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabCable.sNomcable, sLigne
      Line Input #1, sLigne                     '[Title] & Titre
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sTitre, sLigne
      Line Input #1, sLigne                     '[Origin] & Origine
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sOrigine, sLigne
      Line Input #1, sLigne                     '[Extremity] & Destination
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sDestination, sLigne
      Line Input #1, sLigne                     '[Lambda 1] & Lambda1
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sLambda1, sLigne
      Line Input #1, sLigne                     '[Lambda 2] & Lambda2
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sLambda2, sLigne
      
      '[threshold] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      '[THRESHOLD] & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & cNbLgOndeMax & Chr(9) & "4"
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
        
      ''  Print #1,
      Line Input #1, sLigne                     '[Entetes colonne] "WaveLength"  & "Loss"  & "Abs Power" & "ORL"
      
      For nIndex = 1 To cNbLgOndeMax
        Line Input #1, sLigne                   'WaveLength(nIndex)  & Loss(nIndex)  & Abs Power(nIndex) & ORL(nIndex)
        fctStrLigneValeur g_tabThreshold.sWaveLength(nIndex), sLigne
        fctStrLigneValeur g_tabThreshold.sLoss(nIndex), sLigne
        fctStrLigneValeur g_tabThreshold.sAbsPower(nIndex), sLigne
        fctStrLigneValeur g_tabThreshold.sORL(nIndex), sLigne
      Next
      
      '[threshold delay] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      '[THRESHOLD_DELAY] & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & cNbLgOndeMax & Chr(9) & "4"
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      Line Input #1, sLigne                     '[Delay :] & delay
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabThreshold.sdelay, sLigne
    
      '[cable] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      '[CABLE] & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & "1" & Chr(9) & "9"
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      
      ''  Print #1,
      Line Input #1, sLigne                    '[Titre colonnes ] Origine & Status & Date & Time &
                                               'ID Local Operator & ID Distant operator &
                                               'Nb tubes par cable & nb fibre par tube &
                                               'Nb Fiber & Nb Tested Fiber
      
      Line Input #1, sLigne                    'Origine & Status & Date & Time &
                                               'ID Local Operator & ID Distant operator &
                                               'Nb tubes par cable & nb fibre par tube &
                                               'Nb Fiber & Nb Tested Fiber
      fctStrLigneValeur g_tabCable.sOrigine, sLigne
      fctStrLigneValeur g_tabCable.sStatus, sLigne
      fctStrLigneValeur g_tabCable.sDate, sLigne
      fctStrLigneValeur g_tabCable.sTime, sLigne
      fctStrLigneValeur g_tabCable.sNBFTestes, sLigne
      fctStrLigneValeur g_tabCable.sNBFibres, sLigne
      fctStrLigneValeur g_tabCable.sIDLocalOperateur, sLigne
      fctStrLigneValeur g_tabCable.sIDDistantOperator, sLigne
      fctStrLigneValeur g_tabCable.sNBTubesCable, sLigne
      fctStrLigneValeur g_tabCable.sNBFiberTubes, sLigne
          
      '[fiber_header X] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
      '[FIBER_HEADER_X] & Chr(9) & "1" & Chr(9) & "1" & Chr(9) & g_tabCable.sNBFTestes & Chr(9) & cNBZoneFixeFibre
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      g_tabCable.sNBFTestes = nbLignes
      
      Line Input #1, sLigne                    'Fiber & Status & Date & Time  & Color  &
                                               'Delay  & UnitTime  & IR  & Length  &
                                               'Unit cable length  & Local OFI type  & Distant OFI type  &
                                               'Local soft version  & Distant soft version   &
                                               'Local serial number  & Distant serial number
    
      ReDim g_tabCable.sIdentFibre(g_tabCable.sNBFTestes)
      ReDim g_tabMesure(g_tabCable.sNBFTestes)
      
      For nIndex = 1 To g_tabCable.sNBFTestes
        Line Input #1, sLigne
        fctStrLigneValeur g_tabCable.sIdentFibre(nIndex).sNomFibre, sLigne
        For infoFibre = 1 To cNBZoneFixeFibre
          fctStrLigneValeur g_tabCable.sIdentFibre(nIndex).sParamFibre(infoFibre), sLigne
        Next
      Next
     
      '[fiber_measure header] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
      '[FIBER_MEASURE_HEADER] & Chr(9) & "1" & Chr(9) & "1" & g_tabCable.sNBFTestes & Chr(9) & cNBZoneFixeFibre
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      
      Line Input #1, sLigne                    'Fiber & Nb Wavelength & Nb Measure
      
      For nIndex = 1 To g_tabCable.sNBFTestes
        Line Input #1, sLigne                  'nom fibre & onde & nombre de mesure & nombre de mesures r|fffd|elles
        fctStrLigneValeur g_tabCable.sIdentFibre(nIndex).sNomFibre, sLigne
        fctStrLigneValeur g_tabMesure(nIndex).sNbOnde, sLigne
        
        fctStrLigneValeur g_tabMesure(nIndex).sNbTypeMesure, sLigne
        fctStrLigneValeur sInfo, sLigne
        g_tabMesure(nIndex).sNbMesureReel = sInfo
        
        ReDim g_tabMesure(nIndex).sOnde(CLng(g_tabMesure(nIndex).sNbOnde))
        ReDim g_tabMesure(nIndex).sTypeMesure(CLng(g_tabMesure(nIndex).sNbTypeMesure))
    
        Line Input #1, sLigne
        fctStrLigneValeur sNotUsed, sLigne
        
        For j = 1 To CLng(g_tabMesure(nIndex).sNbOnde)
          fctStrLigneValeur g_tabMesure(nIndex).sOnde(j).sIdentOnde, sLigne
          ReDim g_tabMesure(nIndex).sOnde(j).sValeurMesure(CLng(g_tabMesure(nIndex).sNbTypeMesure))
        Next
              
              
        For infomesure = 1 To CLng(g_tabMesure(nIndex).sNbTypeMesure)
          Line Input #1, sLigne
          fctStrLigneValeur g_tabMesure(nIndex).sTypeMesure(infomesure), sLigne
          
          For j = 1 To CLng(g_tabMesure(nIndex).sNbOnde)
           fctStrLigneValeur g_tabMesure(nIndex).sOnde(j).sValeurMesure(infomesure), sLigne
          Next
    
        Next
      Next
      
      '[Wavelength Identification]+ nblignes entete + nb colonne entete + nbLignes + nbColonnes
      '[WAVELENGTH_IDENTIFICATION]" & Chr(9) & "0" & Chr(9) & "0" & Chr(9) & g_NbOndeMax & Chr(9) & 1 & Chr(9)
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      g_NbOndeMax = CLng(nbLignes)
      For nIndex = 1 To g_NbOndeMax
        Line Input #1, sLigne
        fctStrLigneValeur g_tabIdentOndeMax(nIndex), sLigne
      Next
      
      If gb_CCA Then
         Line Input #1, sLigne                     'on passe |fffd| la ligne suivante si CCA
      End If  'gb_CCA : On ne lit cette ligne que si ensuite CCA car sinon erreur EOF
       
  End If  ' if gb_LTS
      
  If gb_CCA Then


      Dim nbChannelGrid As Long
      Dim iChannel As Long
      
      Line Input #1, sLigne                     '[date] & date
      Line Input #1, sLigne                     '[Cable] & Nom du Cable
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabCableCCA.sNomcable, sLigne
      Line Input #1, sLigne                     '[Title] & Titre
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sTitre, sLigne
      Line Input #1, sLigne                     '[Origin] & Origine
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sOrigine, sLigne
      Line Input #1, sLigne                     '[Extremity] & Destination
      fctStrLigneValeur sNotUsed, sLigne
      fctStrLigneValeur g_tabMultiLangue.sDestination, sLigne
      
      '[cable] + nblignes entete + nb colonne entete+ nbLignes + nbColonnes
      '[CABLE] & Chr(9) & "1" & Chr(9) & "0" & Chr(9) & "1" & Chr(9) & "9"
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      
      ''  Print #1,
      Line Input #1, sLigne                    '[Titre colonnes ] Origine & Status & Date & Time &
                                               'ID Local Operator &                                                'Nb tubes par cable & nb fibre par tube &
                                               'Nb Fiber & Nb Tested Fiber
      
      Line Input #1, sLigne                    'Origine & Status & Date & Time &
                                               'ID Local Operator &                                                'Nb tubes par cable & nb fibre par tube &
                                               'Nb Fiber & Nb Tested Fiber
      fctStrLigneValeur g_tabCableCCA.sOrigine, sLigne
      fctStrLigneValeur g_tabCableCCA.sStatus, sLigne
      fctStrLigneValeur g_tabCableCCA.sDate, sLigne
      fctStrLigneValeur g_tabCableCCA.sTime, sLigne
      fctStrLigneValeur g_tabCableCCA.sNBFTestes, sLigne
      fctStrLigneValeur g_tabCableCCA.sNBFibres, sLigne
      fctStrLigneValeur g_tabCableCCA.sIDLocalOperateur, sLigne
      fctStrLigneValeur g_tabCableCCA.sNBTubesCable, sLigne
      fctStrLigneValeur g_tabCableCCA.sNBFiberTubes, sLigne
          
          
      '[fiber_header X] + nblignes entete + nb colonne entete + nbLignes + nbColonnes
      '[FIBER_HEADER_X] & Chr(9) & "1" & Chr(9) & "1" & Chr(9) & g_tabCable.sNBFTestes & Chr(9) & cNBZoneFixeFibre
      Line Input #1, sLigne
      DecoupeBloc sLigne, sIdentBloc, nbLigEntete, nbColEntete, nbLignes, nbColonnes
      g_tabCableCCA.sNBFTestes = nbLignes
      
    
      ReDim g_tabCableCCA.sIdentFibre(g_tabCableCCA.sNBFTestes)
      ReDim g_tabMesureCCA(g_tabCableCCA.sNBFTestes)
      
      For nIndex = 1 To g_tabCableCCA.sNBFTestes
        Line Input #1, sLigne                    'Fiber & Status & Date & Time  & Color  &
                                               'Local OFI type  & Local soft version  & Local serial number
        Line Input #1, sLigne    ' Contient les valeurs de chaque nouvelle fibre
        fctStrLigneValeur g_tabCableCCA.sIdentFibre(nIndex).sNomFibre, sLigne
        For infoFibre = 1 To cNBZoneFixeFibreCCA
          fctStrLigneValeur g_tabCableCCA.sIdentFibre(nIndex).sParamFibre(infoFibre), sLigne
        Next
        
        
        Line Input #1, sLigne
        Line Input #1, sLigne  ' Ici on r|fffd|cup|fffd|re my grid, comp power... values.
        fctStrLigneValeur g_tabMesureCCA(nIndex).sUsedPlan, sLigne
        fctStrLigneValeur g_tabMesureCCA(nIndex).sGridName, sLigne
        fctStrLigneValeur g_tabMesureCCA(nIndex).sGridChannelNumber, sLigne
        fctStrLigneValeur g_tabMesureCCA(nIndex).sPowerComp, sLigne
       
        Line Input #1, sLigne  'Ligne de [FIBER CWDM]
        Line Input #1, sLigne  'Ligne des titres
        
        nbChannelGrid = CLng(g_tabMesureCCA(nIndex).sGridChannelNumber)
        ReDim g_tabMesureCCA(nIndex).sMesureCWDM(nbChannelGrid)
        ' On boucle sur chaque longueur d'onde :
        For iChannel = 1 To nbChannelGrid
              
            Line Input #1, sLigne  'Ligne des valeurs
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sBandId, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sChannelId, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sGridLambda, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sMeasuredLambda, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sLambdaPower, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sLambdaDelta, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sPowerMargin, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sWavelengthSeuil, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sWavelengthThreshold, sLigne
            fctStrLigneValeur g_tabMesureCCA(nIndex).sMesureCWDM(iChannel).sPowerThreshold, sLigne
       
         Next iChannel
        
        Next nIndex  ' Fibre 1 To g_tabCableCCA.sNBFTestes
      
  End If  ' if gb_CCA
  
  
  ' ************************************ END OF CCA add-on ***********************************
  Close 1

  CreationNouveauClasseur

  Exit Sub
err_sauvegarde:
  MsgBox Error$, vbCritical + vbOKOnly, Application.Name
  Close 1
End Sub

'********************************************************
' Fonction : majLibelleOngletCourant
'
' remplace toutes les chaines de caract|fffd|res $xx$ par les
' libell|fffd|s fournis dans la langue courante
'
' Avant d'appeler cette fonction il faut avoir pr|fffd|alablement
' s|fffd|lectionn|fffd| le ou les onglets concern|fffd|s par le remplacement
'
'********************************************************
Function majLibelleOngletCourant()
Dim nIndex As Long
Dim il As Long

  VerrouilleRafraichissementEcran
  On Error Resume Next
  il = g_tabMultiLangue.iLangue_courante
  For nIndex = 1 To g_tabLexique.nbLexique
    Cells.Replace What:=g_tabLexique.repere(nIndex), _
            Replacement:=g_tabLexique.langue(il).libelle(nIndex), _
            LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False
  Next
  AutoriseRafraichissementEcran
  
End Function
'********************************************************
' Fonction : remplitTableauInfoGeneral
'
' A partir des valeurs saisies par l'utilisateur ou
' r|fffd|cup|fffd|r|fffd|es de l'OFI on renseigne l'onglet
' de pr|fffd|sentation g|fffd|n|fffd|rale
'
'********************************************************
Function remplitTableauInfoGeneral()
Dim il As Long
Dim nIndex As Long
Dim j As Long
Dim iLambda As Long

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete
  
  il = g_tabMultiLangue.iLangue_courante
  '
  'Cable information
  '
  
  Cells(cLigGeneralInfoOperateur, cColGeneralInfoCable).Value = g_tabCable.sIDLocalOperateur
  Cells(cLigGeneralInfoNoCable, cColGeneralInfoCable).Value = g_tabCable.sNomcable
  Cells(cLigGeneralInfoNbFibre, cColGeneralInfoCable).Value = g_tabCable.sNBFTestes
  Cells(cLigGeneralInfoNbTubeFibre, cColGeneralInfoCable).Value = g_tabCable.sNBTubesCable
  Cells(cLigGeneralInfoNbFibreTube, cColGeneralInfoCable).Value = g_tabCable.sNBFiberTubes
  Cells(cLigGeneralInfoIndice, cColGeneralInfoCable).Value = gfIndexOfRefractionCustom 'fctCDbl(g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreIR))
  '
  ' Measurement information
  '
  Cells(cLigGeneralInfoMesure + 2, cColGeneralInfoMesure).Value = g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreLocalOFIType)
  Cells(cLigGeneralInfoMesure + 3, cColGeneralInfoMesure).Value = g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreLocalSerialNumber)
  Cells(cLigGeneralInfoMesure + 4, cColGeneralInfoMesure).Value = g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreLocalSoftVersion)
  '
  ' Threshold values
  '
  ' how many wavelength are not null ?
  Dim cptWaveLength As Long
  cptWaveLength = 0
    
  For nIndex = 1 To g_NbOndeMax
    If (g_tabIdentOndeMax(nIndex) <> "") Then
      For j = 1 To cNbLgOndeMax
        If g_tabIdentOndeMax(nIndex) = g_tabThreshold.sWaveLength(j) Then
          iLambda = j
          Exit For
        End If
      Next j
      If Val(g_tabThreshold.sWaveLength(iLambda)) < 10000 Then
        cptWaveLength = cptWaveLength + 1
        Cells(cLigGeneralInfoSeuil + 1, cColGeneralInfoSeuil + cptWaveLength).Value = CInt(g_tabThreshold.sWaveLength(iLambda))
        Cells(cLigGeneralInfoSeuil + 2, cColGeneralInfoSeuil + cptWaveLength).Value = fctCDbl(g_tabThreshold.sLoss(iLambda))
        Cells(cLigGeneralInfoSeuil + 3, cColGeneralInfoSeuil + cptWaveLength).Value = fctCDbl(g_tabThreshold.sORL(iLambda))
        Cells(cLigGeneralInfoSeuil + 4, cColGeneralInfoSeuil + cptWaveLength).Value = fctCDbl(g_tabThreshold.sdelay)
      End If
    End If
  Next nIndex
  
  ' on supprime les lignes non s|fffd|lectionn|fffd|es par l'utilisateur
  If Not g_tabMultiLangue.bSelect_Orl Then
    Cells(cLigGeneralInfoSeuil + 3, 1).Select
    Selection.EntireRow.Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Insertion Then
    Cells(cLigGeneralInfoSeuil + 2, 1).Select
    Selection.EntireRow.Delete
  End If
  '
  ' Fusion des cellules de pr|fffd|sentation du tableau des valeurs de seuil
  '
  Range(Cells(cLigGeneralInfoSeuil, cColGeneralInfoSeuil), Cells(cLigGeneralInfoSeuil, cColGeneralInfoSeuil + cptWaveLength)).Select
  With Selection
    .MergeCells = True
  End With
  '
  ' Encadrement des cellules de pr|fffd|sentation du tableau des valeurs de seuil
  '
  BordureTableau cLigGeneralInfoSeuil, cColGeneralInfoSeuil, cLigGeneralInfoSeuil + 4, cColGeneralInfoSeuil + cptWaveLength

  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran

End Function

'********************************************************
' Fonction : remplitTableauInfoGeneralCCA
'
' A partir des valeurs saisies par l'utilisateur ou
' r|fffd|cup|fffd|r|fffd|es de l'OFI on renseigne l'onglet
' de pr|fffd|sentation g|fffd|n|fffd|rale pour les mesures CCA
'
'********************************************************
Function remplitTableauInfoGeneralCCA()
Dim il As Long
Dim nIndex As Long
Dim j As Long
Dim iLambda As Long

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
'  CopieTableauEntete
  
  il = g_tabMultiLangue.iLangue_courante
  '
  'Cable information
  '
  
  Cells(cLigGeneralCCAInfoOperateur, cColGeneralCCAInfoCable).Value = g_tabCableCCA.sIDLocalOperateur
  Cells(cLigGeneralCCAInfoNoCable, cColGeneralCCAInfoCable).Value = g_tabCableCCA.sNomcable
  Cells(cLigGeneralCCAInfoNbFibre, cColGeneralCCAInfoCable).Value = g_tabCableCCA.sNBFTestes
  Cells(cLigGeneralCCAInfoNbTubeFibre, cColGeneralCCAInfoCable).Value = g_tabCableCCA.sNBTubesCable
  Cells(cLigGeneralCCAInfoNbFibreTube, cColGeneralCCAInfoCable).Value = g_tabCableCCA.sNBFiberTubes
  '
  ' Measurement information : We provide this information here but this information may be
  ' different for every fiber ! Not very logical but done this way for LTS before...
  
  Cells(cLigGeneralCCAInfoMesure + 2, cColGeneralCCAInfoMesure).Value = g_tabCableCCA.sIdentFibre(1).sParamFibre(cParamFibreCCALocalOFIType)
  Cells(cLigGeneralCCAInfoMesure + 3, cColGeneralCCAInfoMesure).Value = g_tabCableCCA.sIdentFibre(1).sParamFibre(cParamFibreCCALocalSerialNumber)
  Cells(cLigGeneralCCAInfoMesure + 4, cColGeneralCCAInfoMesure).Value = g_tabCableCCA.sIdentFibre(1).sParamFibre(cParamFibreCCALocalSoftVersion)
  
  Application.DisplayAlerts = True
  
  
  'OrientationPapierFibres cFeuilleGeneralInformationCCA, CLng(g_tabCableCCA.sNBFTestes), bOrientation
    
  CopieTableauEntete
            
  
  ' Pour |fffd|tre s|fffd|r de n'avoir qu'une page horizontalement (enfin en g|fffd|n|fffd|ral - d|fffd|pend imprimante)
  ActiveSheet.PageSetup.PrintArea = Range(Columns(1), Columns(cColEnteteOrigine + cColEnteteExtremite + 1)).Address
  
  ' correctif
  'Cells(1, 2).Value = ""
  
  AutoriseRafraichissementEcran
  
  


End Function


'********************************************************
' Fonction : remplitTableauInfoGeneralFibre
'
' A partir des valeurs saisies par l'utilisateur ou
' r|fffd|cup|fffd|r|fffd|es de l'OFI on renseigne l'onglet
' de pr|fffd|sentation g|fffd|n|fffd|rale
'
'********************************************************
Function remplitTableauInfoGeneralFibre()
Dim il As Long
Dim nIndex As Long
Dim j As Long
Dim iLambda As Long

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  
  CopieTableauEntete

  il = g_tabMultiLangue.iLangue_courante
  '
  'Cable information
  '
  
  Cells(cLigGeneralInfoOperateur, cColGeneralInfoCable).Value = g_tabCable.sIDLocalOperateur
  Cells(cLigGeneralInfoNoCable, cColGeneralInfoCable).Value = g_tabCable.sNomcable
  Cells(cLigGeneralInfoNbFibre, cColGeneralInfoCable).Value = g_tabCable.sNBFTestes
  Cells(cLigGeneralInfoNbTubeFibre, cColGeneralInfoCable).Value = g_tabCable.sNBTubesCable
  Cells(cLigGeneralInfoNbFibreTube, cColGeneralInfoCable).Value = g_tabCable.sNBFiberTubes
  Cells(cLigGeneralInfoIndice, cColGeneralInfoCable).Value = gfIndexOfRefractionCustom ' fctCDbl(g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreIR))
  '
  ' Measurement information
  '
  Cells(cLigGeneralInfoMesure + 2, cColGeneralInfoMesure).Value = g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreLocalOFIType)
  Cells(cLigGeneralInfoMesure + 3, cColGeneralInfoMesure).Value = g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreLocalSerialNumber)
  Cells(cLigGeneralInfoMesure + 4, cColGeneralInfoMesure).Value = g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreLocalSoftVersion)
  '
  ' Threshold values
  '
  ' how many wavelength are not null ?
  Dim cptWaveLength As Long
  cptWaveLength = 0
  
  For nIndex = 1 To g_NbOndeMax
    If (g_tabIdentOndeMax(nIndex) <> "") Then
      For j = 1 To cNbLgOndeMax
        If g_tabIdentOndeMax(nIndex) = g_tabThreshold.sWaveLength(j) Then
          iLambda = j
          Exit For
        End If
      Next j
      If Val(g_tabThreshold.sWaveLength(iLambda)) < 10000 Then
        cptWaveLength = cptWaveLength + 1
            Cells(cLigGeneralInfoSeuil + 1, cColGeneralInfoSeuil + cptWaveLength).Value = CInt(g_tabThreshold.sWaveLength(iLambda))
            Cells(cLigGeneralInfoSeuil + 2, cColGeneralInfoSeuil + cptWaveLength).Value = fctCDbl(g_tabThreshold.sLoss(iLambda))
            Cells(cLigGeneralInfoSeuil + 3, cColGeneralInfoSeuil + cptWaveLength).Value = fctCDbl(g_tabThreshold.sORL(iLambda))
            Cells(cLigGeneralInfoSeuil + 4, cColGeneralInfoSeuil + cptWaveLength).Value = fctCDbl(g_tabThreshold.sAbsPower(iLambda))
      End If
    End If
  Next nIndex
  
  ' on supprime les lignes non s|fffd|lectionn|fffd|es par l'utilisateur
  If Not g_tabMultiLangue.bSelect_Orl Then
    Cells(cLigGeneralInfoSeuil + 3, 1).Select
    Selection.EntireRow.Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Insertion Then
    Cells(cLigGeneralInfoSeuil + 2, 1).Select
    Selection.EntireRow.Delete
  End If
  
  '
  ' Fusion des cellules de pr|fffd|sentation du tableau des valeurs de seuil
  '
  Range(Cells(cLigGeneralInfoSeuil, cColGeneralInfoSeuil), _
        Cells(cLigGeneralInfoSeuil, cColGeneralInfoSeuil + cptWaveLength)).Select
  With Selection
    .MergeCells = True
  End With
  '
  ' Encadrement des cellules de pr|fffd|sentation du tableau des valeurs de seuil
  '
  BordureTableau cLigGeneralInfoSeuil, cColGeneralInfoSeuil, _
                 cLigGeneralInfoSeuil + 4, cColGeneralInfoSeuil + cptWaveLength

  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran

End Function

'********************************************************
' Fonction : remplitTableauEntete
'
' A partir des valeurs saisies par l'utilisateur ou
' r|fffd|cup|fffd|r|fffd|es de l'OFI on renseigne l'ent|fffd|te des
' onglets
'
'********************************************************
Function remplitTableauEntete()

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Cells(cLigEnteteTitre, cColEnteteTitre).Value = g_tabMultiLangue.sTitre
  Cells(cLigEnteteOrigine, cColEnteteOrigine).Value = g_tabMultiLangue.sOrigine
  Cells(cLigEnteteExtremite, cColEnteteExtremite).Value = g_tabMultiLangue.sDestination

  Ajout_Logo
  AutoriseRafraichissementEcran

End Function

' Copie l'entete de l'onglet general vers l'onglet pass|fffd| en param|fffd|tre
Function CopieTableauEntete(Optional nNoColonne As Integer)
Dim sNomOnglet As String
Dim sTitreOnglet As String
Dim sRefGeneralOnglet As String
    
    sNomOnglet = ActiveSheet.Name
    sTitreOnglet = Cells(cLigEnteteDebut, cColEnteteDebut)

' TRAITER ICI le cas CWDM !!!!!!!!!!!!!!!!!!!! Temp MY !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    
    
    If gb_LTS Then      'Si au moins un r|fffd|sultat LTS (gb_LTS) alors on peut prendre le premier g|fffd|n|fffd|ral comme ref
        sRefGeneralOnglet = cFeuilleGeneralInformation
    Else
        sRefGeneralOnglet = cFeuilleGeneralInformationCCA
    End If
        
    If (sNomOnglet <> cFeuilleGeneralInformation And sNomOnglet <> cFeuilleGeneralInformationCCA) Then
            
        Sheets(sRefGeneralOnglet).Select
        Range(Cells(cLigEnteteDebut, cColEnteteDebut), Cells(cLigEnteteFin, cColEnteteFin)).Select
        Selection.Copy
            
        Sheets(sNomOnglet).Select
            
        If (nNoColonne = 0) Then
            Cells(cLigEnteteDebut, cColEnteteDebut).Select
        Else
            Cells(cLigEnteteDebut, nNoColonne).Select
        End If
        ActiveSheet.Paste
            
        If (nNoColonne = 0) Then
            Cells(cLigEnteteDebut, cColEnteteDebut) = sTitreOnglet
        Else
            Cells(cLigEnteteDebut, nNoColonne) = sTitreOnglet
        End If
    Else
        remplitTableauEntete
    End If
    
    
End Function

'********************************************************
' Fonction : remplitTableauSommaire
'
' A partir des valeurs saisies par l'utilisateur ou
' r|fffd|cup|fffd|r|fffd|es de l'OFI on renseigne l'onglet sommaire
'
' ATTENTION : il faut supprimer de bas en haut
'             sinon les lignes n'existent plus
'             et on supprime n'importe quoi
'
'********************************************************
Function remplitTableauSommaire()
  
  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete
  
  If Not g_tabMultiLangue.bSelect_Fibre Then
    Rows(cLigSummaryFibre).Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Comparaison Then
    Rows(cLigSummaryComparaison).Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Length Then
    Rows(cLigSummaryLongueur).Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Reference Then
    Rows(cLigSummaryReference).Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Out Then
    Rows(cLigSummaryHorsSeuils).Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Orl Then
    Rows(cLigSummaryORL).Delete
  End If
  
  If Not g_tabMultiLangue.bSelect_Insertion Then
    Rows(cLigSummaryInsertion).Delete
  End If
    
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
    
End Function
'********************************************************
' Fonction : Seuil_Gras_Rouge
'********************************************************
Function Seuil_Gras_Rouge(l1 As Long, c1 As Long, ValeurSeuil As Double, bInferieur As Boolean, Optional l2 As Long, Optional c2 As Long)
Dim l As Long
Dim c As Long
  
  On Error Resume Next
  
  If (l2 <> 0) And (c2 <> 0) Then
    Range(Cells(l1, c1), Cells(l2, c2)).Select
  Else
    Cells(l1, c1).Select
  End If
  Selection.FormatConditions.Delete
  If (bInferieur = True) Then
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:=ValeurSeuil
  Else
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=ValeurSeuil
  End If
  
  With Selection.FormatConditions(1).Font
    .Bold = True
    .ColorIndex = 3
  End With
  
End Function

'********************************************************
' Fonction : remplitTableauLoss
'
'********************************************************
Function remplitTableauLoss()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iLength As Long
Dim iMesure As Long
Dim iNbLength As Long
Dim nValeurSeuil As Double
Dim bOrientation As Boolean
Dim k As Long
Dim increment As Long
Dim iLengthOnde As Long

  On Error GoTo err_remplittableauloss

  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete
  
  iNbFibre = CLng(g_tabCable.sNBFTestes)
  iNbLength = g_NbOndeMax '12/12/2000 CLng(g_tabMesure(1).sNbOnde)
  
  For iFibre = 1 To iNbFibre
         
    ' n|fffd| fibre
    Cells(cLigLossTable + 1 + iFibre, cColLossTable).Value = g_tabCable.sIdentFibre(iFibre).sNomFibre
    ' couleur du fibre
    Cells(cLigLossTable + 1 + iFibre, cColLossTable + 1).Value = g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreColours)
   
    For iLength = 1 To iNbLength
     
      ' Affichage de la longueur d'onde pour LOSS puis pour ORL
      Cells.Replace What:="$lambda" & LTrim(Str(iLength)) & "$", Replacement:=g_tabIdentOndeMax(iLength), LookAt:=xlPart, _
                             SearchOrder:=xlByRows, MatchCase:=False
     
      For iLengthOnde = 1 To CLng(g_tabMesure(iFibre).sNbOnde)
        
        If g_tabMesure(iFibre).sOnde(iLengthOnde).sIdentOnde = g_tabIdentOndeMax(iLength) Then
                          
          ' Affichage des valeurs LOSSEO, LOSSOE, AVLOSS
          For iMesure = 1 To CLng(g_tabMesure(iFibre).sNbTypeMesure)
            If (g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure) <> "") Then
                Select Case g_tabMesure(iFibre).sTypeMesure(iMesure)
                  Case cLOSSOE
                    ' afficher la valeur
                    Cells(cLigLossTable + 1 + iFibre, cColLossTable + 2 + ((iLength - 1) * 3)).Value = _
                                                fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                  Case cLOSSEO
                    ' afficher la valeur
                    Cells(cLigLossTable + 1 + iFibre, cColLossTable + 3 + ((iLength - 1) * 3)).Value = _
                                                fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                  Case cAVLOSS
                    ' afficher la valeur
                    Cells(cLigLossTable + 1 + iFibre, cColLossTable + 4 + ((iLength - 1) * 3)).Value = _
                                                fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                End Select
            End If
          Next
        End If
      Next
    Next
  Next
  AutoriseRafraichissementEcran
  
  VerrouilleRafraichissementEcran
  
  ' affichage des valeurs de seuil en rouge
  For iLength = 1 To iNbLength
    ' rechercher la valeur de seuil pour cette longueur d'onde
    For k = 1 To cNbLgOndeMax
      If g_tabIdentOndeMax(iLength) = g_tabThreshold.sWaveLength(k) Then
        nValeurSeuil = fctCDbl(g_tabThreshold.sLoss(k))
        Exit For
      End If
    Next
    Seuil_Gras_Rouge (cLigLossTable + 1 + 1), _
                        (cColLossTable + 4 + ((iLength - 1) * 3)), _
                        nValeurSeuil, _
                        True, _
                        (cLigLossTable + 1 + iNbFibre), _
                        (cColLossTable + 4 + ((iLength - 1) * 3))
  Next
  
  ' on selectionne le type de format de papier pour positionner les sauts de page
  OrientationPapierInsertion cFeuilleInsertion, iNbLength, bOrientation
  
  ' Supprimer les colonnes en trop : au maximum 8 longueurs d'ondes
  Dim ligDeb As Long
  Dim ligFin As Long
  Dim colDeb As Long
  Dim colFin As Long
  
  If (iNbLength > 0) And (iNbLength < cNbLgOndeMax) Then
    ligDeb = cLigLossTable
    colDeb = cColLossTable + 1 + (3 * iNbLength) + 1
    ligFin = cLigLossTable + 2
    colFin = cColLossTable + 1 + (cNbLgOndeMax * 3)
    Range(Cells(ligDeb, colDeb), Cells(ligFin, colFin)).Select
    Selection.Clear
  End If
  
  ' Encadrer le tableau
  ligDeb = cLigLossTable + 2
  colDeb = cColLossTable
  ligFin = cLigLossTable + 1 + iNbFibre
  colFin = cColLossTable + 1 + (3 * iNbLength)

  BordureTableau ligDeb, colDeb, ligFin, colFin
    
  colDeb = cColLossTable + 2
  DigitTableau ligDeb, colDeb, ligFin, colFin
  FibreParPage ligDeb, iNbFibre
  
  If iNbLength >= 3 Then
    ' recopier l'ent|fffd|te n fois en fonction du nombre de longueur d'onde
    ' il faut connaitre le nombre de colonnes utilis|fffd|es et placer l'ent|fffd|te |fffd| chaque saut de page
    Dim iCol As Long
    Dim nbPage As Long
  
    nbPage = 0
    For iCol = cNbColParPage To colFin
      If (Columns(iCol).PageBreak = xlPageBreakManual) Or _
         (Columns(iCol).PageBreak = xlPageBreakAutomatic) Then
        
        CopieTableauEntete (iCol)

        If nbPage = 0 Then
          nbPage = 1
          increment = iCol - 1
        End If
        iCol = iCol + increment
        If iCol > colFin Then
          Exit For
        End If
      End If
    Next
    
    
    ' si on est en mode paysage, il faut recentrer l'ent|fffd|te
    If Not bOrientation Then
      Range(Cells(cLigEnteteDebut, 1), Cells(cLigEnteteFin, 1)).Select
      For k = 1 To (colFin - cNbColParPage) / 2
        Selection.Insert Shift:=xlToRight
      Next k
    End If
  
  End If
  
  'repositionner le tableau pour ameliorer la pr|fffd|sentation sauf pour A3
  If g_tabMultiLangue.iType_papier <> 2 Then
    colDeb = cColLossTable
    ligDeb = cLigLossTable
    Range(Cells(ligDeb, colDeb), Cells(ligFin, colDeb)).Select
    Select Case g_NbOndeMax
      Case 1: ' on decale de 2 colonnes
        Selection.Insert Shift:=xlToRight
        Selection.Insert Shift:=xlToRight
      Case 2: ' on decale de 1 colonne
        Selection.Insert Shift:=xlToRight
    End Select
        
  End If
        
    If (colFin < cColEnteteFin) Then
        colFin = cColEnteteFin
    End If
    ActiveSheet.PageSetup.PrintArea = Range(Columns(1), Columns(colFin)).Address
  
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
  Exit Function
  
err_remplittableauloss:
  MsgBox Application.Name, vbCritical + vbOKOnly, "Error"
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran

End Function
'********************************************************
' Fonction : remplitTableauComparaisonLoss
'
'********************************************************
Function remplitTableauComparaisonLoss()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iLength As Long
Dim iMesure As Long
Dim nValeurSeuil As Double
Dim iLambda1 As Long 'indice du premier fibre
Dim iLambda2 As Long 'indice du deuxieme fibre
Dim ligDeb As Long
Dim ligFin As Long
Dim colDeb As Long
Dim colFin As Long
Dim iNbLength As Long
Dim nIndex As Long

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False

  CopieTableauEntete
  
  iNbFibre = 0
  For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
    
    iLambda1 = 0
    iLambda2 = 0
    
    For iLength = 1 To g_tabMesure(iFibre).sNbOnde
              
      If g_tabMesure(iFibre).sOnde(iLength).sIdentOnde = g_tabMultiLangue.sLambda1 Then
        iLambda1 = iLength
      End If
      If g_tabMesure(iFibre).sOnde(iLength).sIdentOnde = g_tabMultiLangue.sLambda2 Then
        iLambda2 = iLength
      End If
         
      If (iLambda1 <> 0) And (iLambda2 <> 0) Then
        iNbFibre = iNbFibre + 1
        
        ' n|fffd| fibre
        Cells(cLigLossCompareTable + 1 + iNbFibre, cColLossCompareTable).Value = g_tabCable.sIdentFibre(iFibre).sNomFibre
        ' couleur du fibre
        Cells(cLigLossCompareTable + 1 + iNbFibre, cColLossCompareTable + 1).Value = g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreColours)
        
        iNbLength = g_tabMesure(iFibre).sNbOnde
    
        ' Affichage des valeurs LOSSEO, LOSSOE, AVLOSS
        For iMesure = 1 To CLng(g_tabMesure(iFibre).sNbTypeMesure)
          Select Case g_tabMesure(iFibre).sTypeMesure(iMesure)
            Case cLOSSEO
              ' afficher la valeur
              Cells(cLigLossCompareTable + 1 + iNbFibre, cColLossEOLambda1).Value = _
                    fctCDbl(g_tabMesure(iFibre).sOnde(iLambda1).sValeurMesure(iMesure))
              Cells(cLigLossCompareTable + 1 + iNbFibre, cColLossEOLambda2).Value = _
                    fctCDbl(g_tabMesure(iFibre).sOnde(iLambda2).sValeurMesure(iMesure))
            Case cLOSSOE
              ' afficher la valeur
              Cells(cLigLossCompareTable + 1 + iNbFibre, cColLossOELambda1).Value = _
                    fctCDbl(g_tabMesure(iFibre).sOnde(iLambda1).sValeurMesure(iMesure))
              Cells(cLigLossCompareTable + 1 + iNbFibre, cColLossOELambda2).Value = _
                    fctCDbl(g_tabMesure(iFibre).sOnde(iLambda2).sValeurMesure(iMesure))
          End Select
        Next
        Exit For
      End If
    Next
  Next
  
  ' Faire la difference OE
  ligDeb = cLigLossCompareTable + 2
  ligFin = cLigLossCompareTable + 1 + iNbFibre
  For nIndex = ligDeb To ligFin
    Cells(nIndex, cColDifferenceOE).Select
    ActiveCell.FormulaR1C1 = "=ABS(RC[-1]-RC[-2])"
  Next
  
  ' Faire la difference EO
  ligDeb = cLigLossCompareTable + 2
  ligFin = cLigLossCompareTable + 1 + iNbFibre
  For nIndex = ligDeb To ligFin
    Cells(nIndex, cColDifferenceEO).Select
    ActiveCell.FormulaR1C1 = "=ABS(RC[-1]-RC[-2])"
  Next

  ' Encadrer le tableau
  ligDeb = cLigLossCompareTable
  colDeb = cColLossCompareTable
  ligFin = cLigLossCompareTable + 1 + iNbFibre
  colFin = cColDifferenceEO

  BordureTableau ligDeb, colDeb, ligFin, colFin
  
  colDeb = cColLossCompareTable + 2
  ligDeb = cLigLossCompareTable + 2
  
  DigitTableau ligDeb, colDeb, ligFin, colFin
  FibreParPage ligDeb, iNbFibre

  ' mise en rouge des valeurs superieures au seuil
  ligDeb = cLigLossCompareTable + 2
  ligFin = cLigLossCompareTable + 1 + iNbFibre
  Seuil_Gras_Rouge ligDeb, cColDifferenceOE, g_tabMultiLangue.dSeuilComparaisonLoss, False, ligFin, cColDifferenceOE
  Seuil_Gras_Rouge ligDeb, cColDifferenceEO, g_tabMultiLangue.dSeuilComparaisonLoss, False, ligFin, cColDifferenceEO

  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
          
End Function
'********************************************************
' Fonction : remplitTableauComparaisonORL
'
'********************************************************
Function remplitTableauComparaisonORL()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iLength As Long
Dim iMesure As Long
Dim nValeurSeuil As Double
Dim iLambda1 As Long 'indice du premier fibre
Dim iLambda2 As Long 'indice du deuxieme fibre
Dim ligDeb As Long
Dim ligFin As Long
Dim colDeb As Long
Dim colFin As Long
Dim iNbLength As Long
Dim nIndex As Long
Dim fValeur1 As Double
Dim fValeur2 As Double
Dim fDifference As Double
Dim sChaine As String



  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete

  iNbFibre = 0
  For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
    
    iLambda1 = 0
    iLambda2 = 0
    
    ' determiner les index pour lambda 1 et 2
    For iLength = 1 To g_tabMesure(iFibre).sNbOnde
      
      If g_tabMesure(iFibre).sOnde(iLength).sIdentOnde = g_tabMultiLangue.sLambda1 Then
        iLambda1 = iLength
      End If
      If g_tabMesure(iFibre).sOnde(iLength).sIdentOnde = g_tabMultiLangue.sLambda2 Then
        iLambda2 = iLength
      End If
  
      If (iLambda1 <> 0) And (iLambda2 <> 0) Then
        
        iNbFibre = iNbFibre + 1
     
        ' n|fffd| fibre
        Cells(cLigORLCompareTable + 1 + iNbFibre, cColORLCompareTable).Value = g_tabCable.sIdentFibre(iFibre).sNomFibre
        ' couleur du fibre
        Cells(cLigORLCompareTable + 1 + iNbFibre, cColORLCompareTable + 1).Value = g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreColours)
        
        iNbLength = g_tabMesure(iFibre).sNbOnde
    
        ' Affichage des valeurs ORLEO, ORLOE, AVORL
        For iMesure = 1 To CLng(g_tabMesure(iFibre).sNbTypeMesure)
          Select Case g_tabMesure(iFibre).sTypeMesure(iMesure)
            Case cORLEO
              ' afficher la valeur
              Cells(cLigORLCompareTable + 1 + iNbFibre, cColORLEOLambda1).Value = _
                     FormateORL(g_tabMesure(iFibre).sOnde(iLambda1).sValeurMesure(iMesure))
              Cells(cLigORLCompareTable + 1 + iNbFibre, cColORLEOLambda2).Value = _
                     FormateORL(g_tabMesure(iFibre).sOnde(iLambda2).sValeurMesure(iMesure))
            Case cORLOE
              ' afficher la valeur
              Cells(cLigORLCompareTable + 1 + iNbFibre, cColORLOELambda1).Value = _
                     FormateORL(g_tabMesure(iFibre).sOnde(iLambda1).sValeurMesure(iMesure))
              Cells(cLigORLCompareTable + 1 + iNbFibre, cColORLOELambda2).Value = _
                     FormateORL(g_tabMesure(iFibre).sOnde(iLambda2).sValeurMesure(iMesure))
         End Select
        Next
        Exit For
      End If
    Next
  Next
  
  ' Faire la difference OE
  ligDeb = cLigORLCompareTable + 2
  ligFin = cLigORLCompareTable + 1 + iNbFibre
  For nIndex = ligDeb To ligFin
    Err = 0
    fValeur1 = GetValeurORL(Cells(nIndex, cColORLOELambda1))
    fValeur2 = GetValeurORL(Cells(nIndex, cColORLOELambda2))
    
    If ((fValeur1 <> 0) And (fValeur2 <> 0)) Then
        If ((IsValeurORLNonMesurable(Cells(nIndex, cColORLOELambda1)) = True) Or _
            (IsValeurORLNonMesurable(Cells(nIndex, cColORLOELambda2))) = True) Then
            sChaine = ">"
        Else
            sChaine = ""
        End If
        fDifference = Abs(fValeur2 - fValeur1)
        Cells(nIndex, cColDifferenceOE) = sChaine + Format(fDifference, "0.00")
        If (fDifference > g_tabMultiLangue.dSeuilComparaisonORL) Then
            With Cells(nIndex, cColDifferenceOE).Font
                .Bold = True
                .ColorIndex = 3
            End With
        End If
    End If
  Next
  
  ' Faire la difference EO
  ligDeb = cLigORLCompareTable + 2
  ligFin = cLigORLCompareTable + 1 + iNbFibre
  For nIndex = ligDeb To ligFin
    Err = 0
    fValeur1 = GetValeurORL(Cells(nIndex, cColORLEOLambda1))
    fValeur2 = GetValeurORL(Cells(nIndex, cColORLEOLambda2))
    
    If ((fValeur1 <> 0) And (fValeur2 <> 0)) Then
        If ((IsValeurORLNonMesurable(Cells(nIndex, cColORLEOLambda1)) = True) Or _
            (IsValeurORLNonMesurable(Cells(nIndex, cColORLEOLambda2))) = True) Then
            sChaine = ">"
        Else
            sChaine = ""
        End If
        fDifference = Abs(fValeur2 - fValeur1)
        Cells(nIndex, cColDifferenceEO) = sChaine + Format(fDifference, "0.00")
        If (fDifference > g_tabMultiLangue.dSeuilComparaisonORL) Then
            With Cells(nIndex, cColDifferenceEO).Font
                .Bold = True
                .ColorIndex = 3
            End With
        End If
    End If
  Next

  ' Encadrer le tableau
  ligDeb = cLigORLCompareTable
  colDeb = cColORLCompareTable
  ligFin = cLigORLCompareTable + 1 + iNbFibre
  colFin = cColDifferenceEO


  BordureTableau ligDeb, colDeb, ligFin, colFin

  colDeb = cColORLCompareTable + 2
  ligDeb = cLigORLCompareTable + 2
  DigitTableau ligDeb, colDeb, ligFin, colFin
  
  FibreParPage ligDeb, iNbFibre


  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
          
End Function

'********************************************************
' Fonction : remplitTableauORL
'
'********************************************************
Function FormateORL(sValeur As String) As String
Dim fValeur As Double

    fValeur = GetValeurORL(sValeur)
    If (fValeur <> 0) Then
        FormateORL = Format(fValeur, "0.00")
        If (IsValeurORLNonMesurable(sValeur) = True) Then
            FormateORL = ">" + FormateORL
        End If
    Else
        FormateORL = ""
    End If

End Function

Function GetValeurORL(sValeur As String) As Double

On Error GoTo ErrGetValeurORL
    If (IsValeurORLNonMesurable(sValeur) = True) Then
        GetValeurORL = fctCDbl(Mid(Trim(sValeur), 2))
    Else
        GetValeurORL = fctCDbl(sValeur)
        If (GetValeurORL < 0) Then ' Pour les versions de FiberTrace <= x.70
            GetValeurORL = 0
        End If
    End If
    
Exit Function

ErrGetValeurORL:
    GetValeurORL = 0
End Function

Function IsValeurORLNonMesurable(sValeur As String) As Boolean
    
    If (Left(Trim(sValeur), 1) = ">") Then
        IsValeurORLNonMesurable = True
    Else
        IsValeurORLNonMesurable = False
    End If

End Function

Function remplitTableauORL()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iLength As Long
Dim iMesure As Long
Dim iNbLength As Long
Dim nValeurSeuil As Double
Dim k As Long
Dim increment As Long
Dim bOrientation As Boolean
Dim iLengthOnde As Long

  On Error GoTo err_remplittableauorl
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete

  iNbFibre = CLng(g_tabCable.sNBFTestes)
  iNbLength = g_NbOndeMax 'CLng(g_tabMesure(1).sNbOnde)
  
  For iFibre = 1 To iNbFibre
    
    ' n|fffd| fibre
    Cells(cLigORLTable + 1 + iFibre, cColORLTable).Value = g_tabCable.sIdentFibre(iFibre).sNomFibre
    ' couleur du fibre
    Cells(cLigORLTable + 1 + iFibre, cColORLTable + 1).Value = g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreColours)
    
    For iLength = 1 To iNbLength
      
        For k = 1 To cNbLgOndeMax
          If g_tabIdentOndeMax(iLength) = g_tabThreshold.sWaveLength(k) Then
            nValeurSeuil = fctCDbl(g_tabThreshold.sORL(k))
            Exit For
          End If
        Next
      ' Affichage de la longueur d'onde pour LOSS puis pour ORL
      Cells.Replace What:="$lambda" & LTrim(Str(iLength)) & "$", Replacement:=g_tabIdentOndeMax(iLength), LookAt:=xlPart, _
                             SearchOrder:=xlByRows, MatchCase:=False
      
      For iLengthOnde = 1 To CLng(g_tabMesure(iFibre).sNbOnde)
      
        If g_tabMesure(iFibre).sOnde(iLengthOnde).sIdentOnde = g_tabIdentOndeMax(iLength) Then
                  
        
          ' Affichage des valeurs ORLEO, ORLOE, AVORL
          For iMesure = 1 To CLng(g_tabMesure(iFibre).sNbTypeMesure)
            Select Case g_tabMesure(iFibre).sTypeMesure(iMesure)
              Case cORLOE
                ' afficher la valeur
                Cells(cLigORLTable + 1 + iFibre, cColORLTable + 2 + ((iLength - 1) * 3)).Value = _
                                            FormateORL(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
              Case cORLEO
                ' afficher la valeur
                Cells(cLigORLTable + 1 + iFibre, cColORLTable + 3 + ((iLength - 1) * 3)).Value = _
                                            FormateORL(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
              Case cWORL
                ' afficher la valeur
                
                Cells(cLigORLTable + 1 + iFibre, cColORLTable + 4 + ((iLength - 1) * 3)).Value = _
                                            FormateORL(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                
                If (GetValeurORL(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure)) < nValeurSeuil) Then
                    With Cells(cLigORLTable + 1 + iFibre, cColORLTable + 4 + ((iLength - 1) * 3)).Font
                        .Bold = True
                        .ColorIndex = 3
                    End With

                End If
            End Select
          Next
        End If
      Next
    Next
  Next
  
  
  ' on selectionne le type de format de papier pour positionner les sauts de page
  OrientationPapierInsertion cFeuilleORL, iNbLength, bOrientation
  
  'supprimer les colonnes en trop
  Dim ligDeb As Long
  Dim ligFin As Long
  Dim colDeb As Long
  Dim colFin As Long
  
  If iNbLength > 0 And iNbLength < cNbLgOndeMax Then
    ligDeb = cLigORLTable
    colDeb = cColORLTable + 1 + (3 * iNbLength) + 1
    ligFin = cLigORLTable + 2
    colFin = cColORLTable + 1 + (cNbLgOndeMax * 3)
    Range(Cells(ligDeb, colDeb), Cells(ligFin, colFin)).Select
    Selection.Clear
  End If
  
  'encadrer le tableau
  ligDeb = cLigORLTable + 2
  colDeb = cColORLTable
  ligFin = cLigORLTable + 1 + iNbFibre
  colFin = cColORLTable + 1 + (3 * iNbLength)

  BordureTableau ligDeb, colDeb, ligFin, colFin
    
  colDeb = cColORLTable + 2
  DigitTableau ligDeb, colDeb, ligFin, colFin
  FibreParPage ligDeb, iNbFibre
    
  If iNbLength > 3 Then
    ' recopier l'ent|fffd|te n fois en fonction du nombre de longueur d'onde
    ' il faut connaitre le nombre de colonnes utilis|fffd|es et placer l'ent|fffd|te |fffd| chaque saut de page
    Dim iCol As Long
    Dim nbPage As Long
  
    nbPage = 0
    For iCol = cNbColParPage To colFin
      If (Columns(iCol).PageBreak = xlPageBreakManual) Or _
         (Columns(iCol).PageBreak = xlPageBreakAutomatic) Then
        
        CopieTableauEntete (iCol)

        If nbPage = 0 Then
          nbPage = 1
          increment = iCol
        End If
        iCol = iCol + increment
        If iCol > colFin Then
          Exit For
        End If
      End If
    Next
  
    ' si on est en mode paysage, il faut recentrer l'ent|fffd|te
    If Not bOrientation Then
      Range(Cells(cLigEnteteDebut, 1), Cells(cLigEnteteFin, 1)).Select
      For k = 1 To (colFin - cNbColParPage) / 2
        Selection.Insert Shift:=xlToRight
      Next k
    End If
  
  End If
  
  'repositionner le tableau pour ameliorer la pr|fffd|sentation sauf pour A3
  If g_tabMultiLangue.iType_papier <> 2 Then
    colDeb = cColORLTable
    ligDeb = cLigORLTable
    Range(Cells(ligDeb, colDeb), Cells(ligFin, colDeb)).Select
    Select Case g_NbOndeMax
      Case 1: ' on decale de 2 colonnes
        Selection.Insert Shift:=xlToRight
        Selection.Insert Shift:=xlToRight
      Case 2: ' on decale de 1 colonne
        Selection.Insert Shift:=xlToRight
    End Select
  End If
  
    If (colFin < cColEnteteFin) Then
        colFin = cColEnteteFin
    End If
    ActiveSheet.PageSetup.PrintArea = Range(Columns(1), Columns(colFin)).Address
  
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
  Exit Function
  
err_remplittableauorl:
  Call MsgBox(Application.Name + " : " + Error$, vbCritical + vbOKOnly, "Error")
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
End Function
'********************************************************
' Fonction : remplitTableauReference
'
'********************************************************
Function remplitTableauReference()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iLength As Long
Dim iMesure As Long
Dim iNbLength As Long
Dim bOrientation As Boolean
Dim increment As Long
Dim iLengthOnde As Long
Dim ligDeb As Long
Dim ligFin As Long
Dim colDeb As Long
Dim colFin As Long
Dim nIndex As Integer

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete

  iNbFibre = CLng(g_tabCable.sNBFTestes)
  iNbLength = 0
  iLength = 1
  For iFibre = 1 To iNbFibre
    ' n|fffd| fibre
    Cells(cLigReferenceTable + 1 + iFibre, cColReferenceTable).Value = g_tabCable.sIdentFibre(iFibre).sNomFibre
    ' couleur du fibre
    Cells(cLigReferenceTable + 1 + iFibre, cColReferenceTable + 1).Value = g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreColours)
    
    iNbLength = g_NbOndeMax '12/12/2000 g_tabMesure(iFibre).sNbOnde
    For iLength = 1 To iNbLength
    
      ' Affichage de la longueur d'onde pour LOSS puis pour ORL
      Cells.Replace What:="$lambda" & LTrim(Str(iLength)) & "$", Replacement:=g_tabIdentOndeMax(iLength), LookAt:=xlPart, _
                             SearchOrder:=xlByRows, MatchCase:=False
    
      For iLengthOnde = 1 To CLng(g_tabMesure(iFibre).sNbOnde) '12/12/2000
      
        If g_tabMesure(iFibre).sOnde(iLengthOnde).sIdentOnde = g_tabIdentOndeMax(iLength) Then '12/12/2000
        
          ' Affichage des valeurs ReferenceLOSS, ReferenceORL
          For iMesure = 1 To CLng(g_tabMesure(iFibre).sNbTypeMesure)
        
            If (g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure) <> "") Then
                Select Case g_tabMesure(iFibre).sTypeMesure(iMesure)
                    Case cLOSSREFOE
                      ' afficher la valeur
                      Cells(cLigReferenceTable + 1 + iFibre, cColReferenceTable + 2 + ((iLength - 1) * 4)).Value = _
                                                  fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                    Case cLOSSREFEO
                      ' afficher la valeur
                      Cells(cLigReferenceTable + 1 + iFibre, cColReferenceTable + 3 + ((iLength - 1) * 4)).Value = _
                                                  fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                    Case cORLREFOE
                      ' afficher la valeur
                      Cells(cLigReferenceTable + 1 + iFibre, cColReferenceTable + 4 + ((iLength - 1) * 4)).Value = _
                                                  fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                    Case cORLREFEO
                      ' afficher la valeur
                      Cells(cLigReferenceTable + 1 + iFibre, cColReferenceTable + 5 + ((iLength - 1) * 4)).Value = _
                                                  fctCDbl(g_tabMesure(iFibre).sOnde(iLengthOnde).sValeurMesure(iMesure))
                End Select
            End If
          Next
          Exit For
        End If
      Next
    Next
  Next
  
  ' on selectionne le type de format de papier pour positionner les sauts de page
  OrientationPapierReference cFeuilleReference, iNbLength, bOrientation
    
  ' on efface les colonnes non utlis|fffd|es
  If iNbLength > 0 And iNbLength < cNbLgOndeMax Then
    ligDeb = cLigReferenceTable
    colDeb = cColReferenceTable + 1 + (4 * iNbLength) + 1
    ligFin = cLigReferenceTable + 2
    colFin = cColReferenceTable + 1 + (cNbLgOndeMax * 4)
    Range(Cells(ligDeb, colDeb), Cells(ligFin, colFin)).Select
    Selection.Clear
  End If
  
  ' Encadrer le tableau
  ligDeb = cLigReferenceTable + 2
  colDeb = cColReferenceTable
  ligFin = cLigReferenceTable + 1 + iNbFibre
  colFin = cColReferenceTable + 1 + (4 * iNbLength)

  BordureTableau ligDeb, colDeb, ligFin, colFin
    
  colDeb = cColReferenceTable + 2
  
  'prise en compte du nombre de digits
  DigitTableau ligDeb, colDeb, ligFin, colFin
  
  'saut de page
  FibreParPage ligDeb, iNbFibre
    
  If iNbLength > 3 Then
    ' recopier l'ent|fffd|te n fois en fonction du nombre de longueur d'onde
    ' il faut connaitre le nombre de colonnes utilis|fffd|es et placer l'ent|fffd|te |fffd| chaque saut de page
    Dim iCol As Long
    Dim nbPage As Long
    Dim nNbColonneParPage As Integer
  
    nbPage = 0
    nNbColonneParPage = 0
    For iCol = cNbColParPage To colFin
      If (Columns(iCol).PageBreak = xlPageBreakManual) Or _
         (Columns(iCol).PageBreak = xlPageBreakAutomatic) Then
        
        If (nNbColonneParPage = 0) Then
            nNbColonneParPage = iCol - 1
        End If
        CopieTableauEntete (iCol)
        
        If nbPage = 0 Then
          nbPage = 1
          increment = iCol
        End If
        iCol = iCol + increment
        If iCol > colFin Then
          Exit For
        End If
      End If
    Next
    
    If (nNbColonneParPage = 0) Then
        nNbColonneParPage = cNbColParPage
    End If
    
    
    ' si on est en mode paysage, il faut recentrer l'ent|fffd|te
    If Not bOrientation Then
      Range(Cells(cLigEnteteDebut, 1), Cells(cLigEnteteFin, 1)).Select
      For nIndex = 1 To (colFin - nNbColonneParPage) / 2 - 1
        Selection.Insert Shift:=xlToRight
      Next nIndex
    End If
  
  End If
  
    'repositionner le tableau pour ameliorer la pr|fffd|sentation sauf pour A3
  If g_tabMultiLangue.iType_papier <> 2 Then
    colDeb = cColReferenceTable
    ligDeb = cLigReferenceTable
    Range(Cells(ligDeb, colDeb), Cells(ligFin, colDeb)).Select
    Select Case g_NbOndeMax
      Case 1: ' on decale de 2 colonnes
        Selection.Insert Shift:=xlToRight
        Selection.Insert Shift:=xlToRight
    End Select
  End If
    
    If (colFin < cColEnteteFin) Then
        colFin = cColEnteteFin
    End If
    
    ' 2 COLONNES FIXES
    Range(Columns(1), Columns(2 + (nNbColonneParPage - 2) * (Int(colFin / (nNbColonneParPage - 2)) + 1))).Select
    ActiveSheet.PageSetup.PrintArea = Selection.Address

  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
        
End Function

'********************************************************
' Fonction : remplitTableauOutOfRange
'
'********************************************************
Function remplitTableauOutOfRange()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iNbFibreMauvais As Long

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete

  iNbFibre = CLng(g_tabCable.sNBFTestes)
  iNbFibreMauvais = 0
  For iFibre = 1 To iNbFibre
    If CBool(g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreStatus)) = False Then
      iNbFibreMauvais = iNbFibreMauvais + 1
      ' n|fffd| fibre
      Cells(cLigOutOfRangeTable + iNbFibreMauvais, cColOutOfRangeTable).Value = g_tabCable.sIdentFibre(iFibre).sNomFibre
      ' couleur du fibre
      Cells(cLigOutOfRangeTable + iNbFibreMauvais, cColOutOfRangeTable + 1).Value = g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreColours)
      ' status du fibre
      Cells(cLigOutOfRangeTable + iNbFibreMauvais, cColOutOfRangeTable + 2).Value = StatusTest(g_tabCable.sIdentFibre(iFibre).sParamFibre(cParamFibreStatus))
    End If
  Next
  
  '
  ' Fusion des cellules pour le commentaire
  '
  Range(Cells(cLigOutOfRangeTable + 1, cColOutOfRangeTable + 3), _
        Cells(cLigOutOfRangeTable + 1, cColOutOfRangeTable + 6)).Select
  With Selection
      .HorizontalAlignment = xlRight
      .VerticalAlignment = xlBottom
      .WrapText = False
      .Orientation = 0
      .ShrinkToFit = False
      .MergeCells = False
  End With
  Selection.Merge
  
  If iNbFibreMauvais > 1 Then
    Selection.AutoFill Destination:=Range(Cells(cLigOutOfRangeTable + 1, cColOutOfRangeTable + 3), _
                                          Cells(cLigOutOfRangeTable + iNbFibreMauvais, cColOutOfRangeTable + 6)), Type:=xlFillDefault
  
    Dim ligDeb As Long
    Dim ligFin As Long
    Dim colDeb As Long
    Dim colFin As Long
      
    'encadrer le tableau
    ligDeb = cLigOutOfRangeTable
    colDeb = cColOutOfRangeTable
    ligFin = cLigOutOfRangeTable + iNbFibreMauvais
    colFin = cColOutOfRangeTable + 3
  
    BordureTableau ligDeb, colDeb, ligFin, colFin
          
    ligDeb = cLigOutOfRangeTable + 1
    FibreParPage ligDeb, iNbFibre
  
  End If
        
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
        
End Function

'********************************************************
' Fonction : remplitTableauLength
'
'********************************************************
Function remplitTableauLength()
Dim iFibre As Long
Dim iNbFibre As Long
Dim dValeurSeuil As Double
Dim nIndex As Long
Dim iFibreValide As Long
Dim ligDeb As Long
Dim ligFin As Long
Dim colDeb As Long
Dim colFin As Long
Dim sChaine As String

  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete

  iNbFibre = CLng(g_tabCable.sNBFTestes)
  iFibreValide = 1
  For nIndex = 1 To iNbFibre
    sChaine = g_tabCable.sIdentFibre(nIndex).sParamFibre(cParamFibreUnitCableLength)
    sChaine = Trim(sChaine)
    If (sChaine <> "") Then
      iFibreValide = nIndex
      Exit For
    End If
  Next
  ' Affichage des unit|fffd|s : a partir de la premi|fffd|re fibre valide
  sChaine = g_tabCable.sIdentFibre(iFibreValide).sParamFibre(cParamFibreUnitCableLength)
  Cells.Replace What:="$unit1$", Replacement:=sChaine, LookAt:=xlPart, _
                               SearchOrder:=xlByRows, MatchCase:=False
  sChaine = g_tabCable.sIdentFibre(iFibreValide).sParamFibre(cParamFibreUnitTime)
  If (sChaine = "us") Then sChaine = "|fffd|s"
  Cells.Replace What:="$unit2$", Replacement:=sChaine, LookAt:=xlPart, _
                             SearchOrder:=xlByRows, MatchCase:=False

  '
  ' Fusion des cellules chaque info est sur deux colonnes pour conserver l'homog|fffd|n|fffd|it|fffd|
  ' on fusionne sur la premi|fffd|re fibre
  For nIndex = 1 To 3
    Range(Cells(cLigLengthTable + 1, cColLengthTable + 1 + ((nIndex - 1) * 2)), _
          Cells(cLigLengthTable + 1, cColLengthTable + 2 + ((nIndex - 1) * 2))).Select
    Selection.Merge
    Selection.HorizontalAlignment = xlRight
  Next
  
  ' on etend |fffd| toutes les fibres
  Range(Cells(cLigLengthTable + 1, cColLengthTable + 1), _
        Cells(cLigLengthTable + 1, cColLengthTable + 6)).Select
  
  If iNbFibre > 1 Then
    Selection.AutoFill Destination:=Range(Cells(cLigLengthTable + 1, cColLengthTable + 1), _
                                          Cells(cLigLengthTable + iNbFibre, cColLengthTable + 2 + ((3 - 1) * 2))), Type:=xlFillDefault
  End If
  
  For iFibre = 1 To iNbFibre
    With g_tabCable.sIdentFibre(iFibre)
    ' n|fffd| fibre
    Cells(cLigLengthTable + iFibre, cColLengthTable).Value = .sNomFibre
    ' couleur de la fibre
    Cells(cLigLengthTable + iFibre, cColLengthTable + 1).Value = .sParamFibre(cParamFibreColours)
    ' longueur de la  fibre
    Err = 0
    Cells(cLigLengthTable + iFibre, cColLengthTable + 3) = _
                    fctCDbl(.sParamFibre(cParamFibreLength)) / _
                    gfIndexOfRefractionCustom * _
                    fctCDbl(.sParamFibre(cParamFibreIR))
    If (Err <> 0) Then
        Cells(cLigLengthTable + iFibre, cColLengthTable + 3).Value = .sParamFibre(cParamFibreLength)
    End If
    ' delay du fibre
    Err = 0
    Cells(cLigLengthTable + iFibre, cColLengthTable + 5).Value = fctCDbl(.sParamFibre(cParamFibreDelay))
    If (Err <> 0) Then
        Cells(cLigLengthTable + iFibre, cColLengthTable + 5).Value = .sParamFibre(cParamFibreDelay)
    End If
    End With
    
  Next

  ' valeur du seuil
  dValeurSeuil = fctCDbl(g_tabThreshold.sdelay)
  ' mis en rouge des valeurs de seuil
  Seuil_Gras_Rouge (cLigLengthTable + 1), _
                    (cColLengthTable + 5), _
                    dValeurSeuil, _
                    True, _
                    (cLigLengthTable + iNbFibre), _
                    (cColLengthTable + 5)
      
  'encadrer le tableau
  ligDeb = cLigLengthTable
  colDeb = cColLengthTable
  ligFin = cLigLengthTable + iNbFibre
  colFin = cColLengthTable + 5

  BordureTableau ligDeb, colDeb, ligFin, colFin
        
  ' on met en place le nombbre de digit
  colDeb = cColLengthTable + 3
  DigitTableau ligDeb, colDeb, ligFin, colFin
   
  'on fait les sauts de page
  ligDeb = cLigLengthTable + 1
  FibreParPage ligDeb, iNbFibre

  ActiveSheet.PageSetup.PrintArea = Range(Columns(1), Columns(cColEnteteFin)).Address
  
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
        
End Function

'********************************************************
' Fonction : remplitTableauFibreDetail
'
'********************************************************
Function remplitTableauFibreDetail()
Dim iFibre As Long
Dim iNbFibre As Long
Dim iLength As Long
Dim iNbLength As Long
Dim iLig As Long
Dim iCol As Long
Dim bOrientation As Boolean
Dim increment As Long
Dim iFibreValide As Long
Dim sChaine As String
Dim nIndex As Long
Dim nMaxColonne As Long
Dim sTypeMesureChoisi As String
  
  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete (3)
  
  iNbFibre = CLng(g_tabCable.sNBFTestes)
  iFibreValide = 1
  For nIndex = 1 To iNbFibre
    sChaine = g_tabCable.sIdentFibre(nIndex).sParamFibre(cParamFibreUnitCableLength)
    sChaine = Trim(sChaine)
    If (sChaine <> "") Then
      iFibreValide = nIndex
      Exit For
    End If
  Next
  
  ' Affichage des unit|fffd|s
  sChaine = g_tabCable.sIdentFibre(iFibreValide).sParamFibre(cParamFibreUnitCableLength)
  Cells.Replace What:="$unit1$", Replacement:=sChaine, LookAt:=xlPart, _
                             SearchOrder:=xlByRows, MatchCase:=False
  sChaine = g_tabCable.sIdentFibre(iFibreValide).sParamFibre(cParamFibreUnitTime)
  If (sChaine = "us") Then sChaine = "|fffd|s"
  Cells.Replace What:="$unit2$", Replacement:=sChaine, LookAt:=xlPart, _
                             SearchOrder:=xlByRows, MatchCase:=False
  
  iNbLength = g_NbOndeMax

  ' pour chaque fibre
  iLig = cLigFibreTable
  iCol = cColFibreTable
  
  Dim nbColDiffrente As Long
  
  nMaxColonne = 0
  For iLength = 1 To iNbLength
  
    For iFibre = 1 To iNbFibre
    
      If iLength <= CLng(g_tabMesure(iFibre).sNbOnde) Then
        
        With g_tabCable.sIdentFibre(iFibre)
        
          iLig = iLig + 1
          iCol = cColFibreTable
          ' n|fffd| fibre
          Cells(iLig, iCol).Value = .sNomFibre
          iCol = iCol + 1
          ' couleur du fibre
          Cells(iLig, iCol).Value = .sParamFibre(cParamFibreColours)
          iCol = iCol + 1
          ' date
          Cells(iLig, iCol).Value = CDate(.sParamFibre(cParamFibreDate))
          iCol = iCol + 1
          ' time
          Cells(iLig, iCol).Value = .sParamFibre(cParamFibreTime)
          iCol = iCol + 1
          ' longueur d'onde
          Cells(iLig, iCol).Value = g_tabMesure(iFibre).sOnde(iLength).sIdentOnde
          iCol = iCol + 1
          ' status
          Cells(iLig, iCol).Value = StatusTest(.sParamFibre(cParamFibreStatus))
          iCol = iCol + 1
          ' longueur de la fibre
          Cells(iLig, iCol).Value = _
                    fctCDbl(.sParamFibre(cParamFibreLength)) / _
                    gfIndexOfRefractionCustom * _
                    fctCDbl(.sParamFibre(cParamFibreIR))
          iCol = iCol + 1
          ' delay du fibre
          Cells(iLig, iCol).Value = fctCDbl(.sParamFibre(cParamFibreDelay))
          iCol = iCol + 1
          
          ' Affichage des valeurs LOSSEO, LOSSOE, AVLOSS ,....
          ' cLOSSREFOE
          sTypeMesureChoisi = cLOSSREFOE
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cLOSSREFEO
          sTypeMesureChoisi = cLOSSREFEO
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cLOSSTYPOE
          sTypeMesureChoisi = cLOSSTYPOE
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cLOSSTYPEO
          sTypeMesureChoisi = cLOSSTYPEO
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cLOSSOE
          sTypeMesureChoisi = cLOSSOE
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cLOSSEO
          sTypeMesureChoisi = cLOSSEO
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cAVLOSS
          sTypeMesureChoisi = cAVLOSS
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cORLREFOE
          sTypeMesureChoisi = cORLREFOE
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cORLREFEO
          sTypeMesureChoisi = cORLREFEO
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cORLOE
          sTypeMesureChoisi = cORLOE
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cORLEO
          sTypeMesureChoisi = cORLEO
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cWORL
          sTypeMesureChoisi = cWORL
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cABSPOW
          sTypeMesureChoisi = cABSPOW
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
          ' cUNITPOW
          sTypeMesureChoisi = cUNITPOW
          AffichMesure sTypeMesureChoisi, iLength, iFibre, iLig, iCol
        
        End With
      End If
      
      If (nMaxColonne < (iCol - 1)) Then
        nMaxColonne = iCol - 1 'iCol est post-incr|fffd|ment|fffd|
      End If
    Next iFibre
  Next iLength
  
  ' on selectionne le type de format de papier pour positionner les sauts de page
  OrientationPapierFibres cFeuilleDetailFibre, CLng(g_tabMesure(1).sNbMesureReel), bOrientation
  
  Dim ligDeb As Long
  Dim ligFin As Long
  Dim colDeb As Long
    
  'encadrer le tableau
  ligDeb = cLigFibreTable
  colDeb = cColFibreTable
  ligFin = iLig ''cLigFibreTable + (iNbFibre * iNbLength)

  BordureTableau ligDeb, colDeb, ligFin, nMaxColonne
        
  CouleurTableau ligDeb, colDeb, ligDeb, nMaxColonne, cBleuCiel
    
  colDeb = cColFibreTable + cNbColFixeFibre - 1 'sont aussi les longueurs et les d|fffd|lais
  DigitTableau ligDeb, colDeb, ligFin, nMaxColonne
  
  ligDeb = cLigFibreTable + 1
  FibreParPage ligDeb, (iNbFibre * iNbLength)

  ' recopier l'ent|fffd|te n fois en fonction du nombre de param|fffd|tres
  ' il faut connaitre le nombre de colonnes utilis|fffd|es et placer l'ent|fffd|te |fffd| chaque saut de page
  
  Dim nbPage As Long
  
  nbPage = 0
    For iCol = cNbColParPage To nMaxColonne
        If ((Columns(iCol).PageBreak = xlPageBreakManual) Or _
            (Columns(iCol).PageBreak = xlPageBreakAutomatic)) Then
            
            CopieTableauEntete (iCol)
            
            If nbPage = 0 Then
                nbPage = 1
'                increment = iCol
            End If
'            iCol = iCol + increment
            
            If iCol > nMaxColonne Then
                Exit For
            End If
        End If
    Next iCol
  
  ' 2 COLONNES FIXES
  Range(Columns(1), Columns(2 + (cNbColParPage - 2) * (Int(nMaxColonne / (cNbColParPage - 2)) + 1))).Select
  ActiveSheet.PageSetup.PrintArea = Selection.Address
  
  ' correctif
  Cells(1, 2).Value = ""
  
  ' si on est en mode paysage, il faut recentrer l'ent|fffd|te
  If Not bOrientation Then
      Range(Cells(cLigEnteteDebut, 1), Cells(cLigEnteteFin, 1)).Select
      For nIndex = 1 To (nMaxColonne - cNbColParPage) / 2
        Selection.Insert Shift:=xlToRight
      Next nIndex
  End If

  'Selection.MergeCells = True

  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
  
End Function
'********************************************************
' Fonction : remplitCWDMThreshold
'
'********************************************************
Function remplitCWDMThreshold()



Dim iFibre As Long
Dim iNbFibres As Long
Dim iLength As Long
Dim iLambda As Long
Dim iNbLambda As Long
Dim iLig As Long
Dim iCol As Long
Dim bOrientation As Boolean
Dim iFibreValide As Long
Dim sChaine As String
Dim sChaine1 As String
Dim sSeuil As String
Dim nIndex As Long
Dim sTypeMesureChoisi As String
Dim ligDeb As Long
Dim ligFin As Long
Dim colDeb As Long
Dim iLigNewFiberTab() As Long

  
  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete (3)
  
  iNbFibres = CLng(g_tabCableCCA.sNBFTestes)
  
  ' On va garder un marqueur du d|fffd|but (num|fffd|ro de ligne) de chaque nouvelle fibre.
  ' Ceci nous aidera ensuite |fffd| cr|fffd|er le tableau
  ReDim iLigNewFiberTab(iNbFibres)
  
  ' pour chaque fibre
  iLig = cLigCWDMThreshold
  iCol = cColCWDMThreshold
  
  Dim nbColDiffrente As Long
  
  
  ' On va pr|fffd|senter une page par fibre (au moins).
  For iFibre = 1 To iNbFibres
   
   With g_tabCableCCA.sIdentFibre(iFibre)
   
       iLigNewFiberTab(iFibre) = iLig
       
       iCol = cColCWDMThreshold
       
       ' Test Temp MY TP
      'Call DigitTableau(iLig, iCol, iLig, cNbColFixeThresholdCWDM + iCol - 1)
       BordureTableau iLig, iCol, iLig, cNbColFixeThresholdCWDM + iCol - 1
       
       ' n|fffd| fibre
       Cells(iLig, iCol).Value = .sNomFibre
       iCol = iCol + 1
       
       ' couleur de fibre
       Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCAColours)
       iCol = iCol + 1
       
       ' date
       Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCADate)
       iCol = iCol + 1
       'sChaine = g_tabCableCCA.sIdentFibre(iFibre).sParamFibre(cParamFibreCCADate)
       'Cells(iLig, iCol).Value = Format(sChaine, "jj/mmm/yyyy")
       'iCol = iCol + 1
       
       'time
       Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCATime)
       iCol = iCol + 1
       'sChaine1 = g_tabCableCCA.sIdentFibre(iFibre).sParamFibre(cParamFibreCCATime)
       'Cells(iLig, iCol).Value = Format(sChaine1, "HH mm ss")
       'iCol = iCol + 1
          
       ' Nom grille pour la fibre
       Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sGridName
       iCol = iCol + 1
       
       ' Status
       Cells(iLig, iCol).Value = StatusTest(g_tabCableCCA.sIdentFibre(iFibre).sParamFibre(cParamFibreCCAStatus))
    
    End With
       
       iLig = iLig + cNbLigThresholdMesures - 2
       ' On repositionne au d|fffd|but du tableau de mesures CCA
       ' mais |fffd| nouvelle page si nouvelle fibre
       
       ' On doit ici r|fffd||fffd|crire manuellement l'ent|fffd|te des CCA measurements
       ' car non contigu avec informations fibres.
       iCol = cColCWDMThreshold
       
       Range(Cells(cLigCWDMThreshold + cNbLigThresholdMesures - 2, cColCWDMThreshold), _
       Cells(cLigCWDMThreshold + cNbLigThresholdMesures - 2, cNbColFixeThresholdCWDM + cColCWDMThreshold - 1)).Copy
       
       Range(Cells(iLig, iCol), _
       Cells(iLig, cNbColFixeThresholdCWDM + cColCWDMThreshold - 1)).PasteSpecial xlPasteValues
       Range(Cells(iLig, iCol), _
       Cells(iLig, cNbColFixeThresholdCWDM + cColCWDMThreshold - 1)).PasteSpecial xlPasteFormats
       
       Selection.Merge
       
       iLig = iLig + 1
       CouleurTableau iLig, iCol, iLig, cNbColFixeThresholdCWDM + iCol - 1, cBleuCiel
       
       For iCol = cColCWDMThreshold To cNbColFixeThresholdCWDM + cColCWDMThreshold - 1
            Cells(cLigCWDMThreshold + cNbLigThresholdMesures - 1, iCol).Copy
            Cells(iLig, iCol).PasteSpecial xlPasteFormats
            Cells(iLig, iCol).PasteSpecial xlPasteValues
       Next iCol
              
       ' On boucle sur chaque longueur d'onde pour |fffd|crire une ligne par longueur d'onde
       iNbLambda = CLng(g_tabMesureCCA(iFibre).sGridChannelNumber)
        
       
       ' On boucle sur chaque longueur d'ondes
       For iLambda = 1 To iNbLambda
   
           iCol = cColCWDMThreshold   ' On repositionne en d|fffd|but de tableau ligne suivante
           
           iLig = iLig + 1
           ' Band id
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sBandId
           iCol = iCol + 1
           ' channel id
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sChannelId
           iCol = iCol + 1
           ' grid lambda
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sGridLambda
           iCol = iCol + 1
           ' Power level threshold
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sPowerThreshold
           iCol = iCol + 1
           ' lambda threshold +
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sWavelengthSeuil
           iCol = iCol + 1
           ' lambda threshold -
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sWavelengthThreshold
           iCol = iCol + 1
            
       Next iLambda
        
       'encadrer le tableau
       ligDeb = iLigNewFiberTab(iFibre) + cNbLigThresholdMesures - 1
       colDeb = cColCWDMThreshold
       ligFin = iLig
         
       BordureTableau ligDeb, colDeb, ligFin, cNbColFixeThresholdCWDM + cColCWDMThreshold - 1
               
       'CouleurTableau ligDeb, colDeb, ligDeb, cNbColFixeThresholdCWDM + cColCWDMThreshold - 1, cBleuCiel
           
       DigitTableau ligDeb, colDeb, ligFin, cNbColFixeThresholdCWDM + cColCWDMThreshold - 1
           
        
       iLig = iLig + 1
       Rows(iLig).PageBreak = xlPageBreakManual
       
  Next iFibre

  ' on selectionne le type de format de papier pour positionner les sauts de page
  OrientationPapierFibres cFeuilleThresholdCWDM, CLng(g_tabCableCCA.sNBFTestes), bOrientation
    
  CopieTableauEntete
            
  
  ' Pour |fffd|tre s|fffd|r de n'avoir qu'une page horizontalement (enfin en g|fffd|n|fffd|ral - d|fffd|pend imprimante)
  ActiveSheet.PageSetup.PrintArea = Range(Columns(1), Columns(cColEnteteOrigine + cColEnteteExtremite + 1)).Address
  
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
  
End Function

'********************************************************
' Fonction : remplitTableauCWDM
'
'********************************************************
Function remplitTableauCWDM()



Dim iFibre As Long
Dim iNbFibres As Long
Dim iLength As Long
Dim iLambda As Long
Dim iNbLambda As Long
Dim iLig As Long
Dim iCol As Long
Dim bOrientation As Boolean
Dim iFibreValide As Long
Dim sChaine As String
Dim sChaine1 As String
Dim nIndex As Long
Dim sTypeMesureChoisi As String
Dim ligDeb As Long
Dim ligFin As Long
Dim colDeb As Long
Dim iLigNewFiberTab() As Long


  
  On Error Resume Next
  
  VerrouilleRafraichissementEcran
  Application.DisplayAlerts = False
  
  CopieTableauEntete (3)
  
  iNbFibres = CLng(g_tabCableCCA.sNBFTestes)
  
  ' On va garder un marqueur du d|fffd|but (num|fffd|ro de ligne) de chaque nouvelle fibre.
  ' Ceci nous aidera ensuite |fffd| cr|fffd|er le tableau
  ReDim iLigNewFiberTab(iNbFibres)
  
  ' pour chaque fibre
  iLig = cLigCWDMThreshold
  iCol = cColCWDMThreshold
  
  Dim nbColDiffrente As Long
  
  
  ' On va pr|fffd|senter une page par fibre (au moins).
  For iFibre = 1 To iNbFibres
   
   
   With g_tabCableCCA.sIdentFibre(iFibre)
   
        iLigNewFiberTab(iFibre) = iLig
       
        iCol = cColFibreCWDMTable
       
        ' Test Temp MY TP
        'Call DigitTableau(iLig, 5, iLig, cNbColFixeFibreCWDM + iCol - 1)
        BordureTableau iLig, iCol, iLig, cNbColFixeFibreCWDM + iCol - 1
       
         ' n|fffd| fibre
         Cells(iLig, iCol).Value = .sNomFibre
        iCol = iCol + 1
        
        ' couleur de fibre
        Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCAColours)
        iCol = iCol + 1
       
        ' date
        Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCADate)
        iCol = iCol + 1
        'sChaine = g_tabCableCCA.sIdentFibre(iFibre).sParamFibre(cParamFibreCCADate)
        'Cells(iLig, iCol).Value = Format(sChaine, "dd/mm/yyyy")
         'iCol = iCol + 1
       
        'time
        Cells(iLig, iCol).Value = g_tabCableCCA.sIdentFibre(iFibre).sParamFibre(cParamFibreCCATime)
        iCol = iCol + 1
        'sChaine1 = .sParamFibre(cParamFibreCCATime)
        'Cells(iLig, iCol).Value = Format(sChaine1, " HH:mm:ss ")
        'iCol = iCol + 1
       
        ' Nom grille pour la fibre
        Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sGridName
        iCol = iCol + 1
       
        ' Power min pour la fibre
        Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCAPowerMin)
        iCol = iCol + 1
       
        ' Power max pour la fibre
        Cells(iLig, iCol).Value = .sParamFibre(cParamFibreCCAPowerMax)
         iCol = iCol + 1
       
         ' Status
         Cells(iLig, iCol).Value = StatusTest(.sParamFibre(cParamFibreCCAStatus))

    End With
       
       
       iLig = iLig + cNbLigFibreMesures - 2
       ' On repositionne au d|fffd|but du tableau de mesures CCA
       ' mais |fffd| nouvelle page si nouvelle fibre
       
       ' On doit ici r|fffd||fffd|crire manuellement l'ent|fffd|te des CCA measurements
       ' car non contigu avec informations fibres.
       iCol = cColFibreCWDMTable
       
       Range(Cells(cLigFibreCWDMTable + cNbLigFibreMesures - 2, cColFibreCWDMTable), _
       Cells(cLigFibreCWDMTable + cNbLigFibreMesures - 2, cNbColFixeFibreCWDM + cColFibreCWDMTable - 1)).Copy
       
       Range(Cells(iLig, iCol), _
       Cells(iLig, cNbColFixeFibreCWDM + cColFibreCWDMTable - 1)).PasteSpecial xlPasteValues
       Range(Cells(iLig, iCol), _
       Cells(iLig, cNbColFixeFibreCWDM + cColFibreCWDMTable - 1)).PasteSpecial xlPasteFormats
       
       Selection.Merge
       
       iLig = iLig + 1
       CouleurTableau iLig, iCol, iLig, cNbColFixeFibreCWDM + iCol - 1, cBleuCiel
       
       For iCol = cColFibreCWDMTable To cNbColFixeFibreCWDM + cColFibreCWDMTable - 1
            
            
            Cells(cLigFibreCWDMTable + cNbLigFibreMesures - 1, iCol).Copy
            Cells(iLig, iCol).PasteSpecial xlPasteFormats
            Cells(iLig, iCol).PasteSpecial xlPasteValues

       Next iCol
              
       ' On boucle sur chaque longueur d'onde pour |fffd|crire une ligne par longueur d'onde
       iNbLambda = CLng(g_tabMesureCCA(iFibre).sGridChannelNumber)
        
       
       ' On boucle sur chaque longueur d'ondes
       For iLambda = 1 To iNbLambda
   
           iCol = cColFibreCWDMTable   ' On repositionne en d|fffd|but de tableau ligne suivante
           
           iLig = iLig + 1
           ' Band id
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sBandId
           iCol = iCol + 1
           ' channel id
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sChannelId
           iCol = iCol + 1
           ' grid lambda
           Cells(iLig, iCol).Value = g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sGridLambda
           iCol = iCol + 1
           ' measured lambda
           Cells(iLig, iCol).Value = DetecTest(g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sMeasuredLambda)
           iCol = iCol + 1
           ' lambda deviation
           Cells(iLig, iCol).Value = DetecTest(g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sLambdaDelta)
           iCol = iCol + 1
           ' Power level
           Cells(iLig, iCol).Value = DetecTest(g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sLambdaPower)
           iCol = iCol + 1
           ' Power margin
           Cells(iLig, iCol).Value = DetecTest(g_tabMesureCCA(iFibre).sMesureCWDM(iLambda).sPowerMargin)
           iCol = iCol + 1
           
       Next iLambda
        
       'encadrer le tableau
       ligDeb = iLigNewFiberTab(iFibre) + cNbLigFibreMesures - 1
       colDeb = cColFibreCWDMTable
       ligFin = iLig
         
       BordureTableau ligDeb, colDeb, ligFin, cNbColFixeFibreCWDM + cColFibreCWDMTable - 1
               
       'CouleurTableau ligDeb, colDeb, ligDeb, cNbColFixeFibreCWDM + cColFibreCWDMTable - 1, cBleuCiel
           
       DigitTableau ligDeb, colDeb, ligFin, cNbColFixeFibreCWDM + cColFibreCWDMTable - 1
           
        
       iLig = iLig + 1
       Rows(iLig).PageBreak = xlPageBreakManual
       
  Next iFibre
  
  

  ' on selectionne le type de format de papier pour positionner les sauts de page
  OrientationPapierFibres cFeuilleCWDM, CLng(g_tabCableCCA.sNBFTestes), bOrientation
    
  CopieTableauEntete
            
  
  ' Pour |fffd|tre s|fffd|r de n'avoir qu'une page horizontalement (enfin en g|fffd|n|fffd|ral - d|fffd|pend imprimante)
  ActiveSheet.PageSetup.PrintArea = Range(Columns(1), Columns(cColEnteteOrigine + cColEnteteExtremite + 1)).Address
  
  Application.DisplayAlerts = True
  AutoriseRafraichissementEcran
  
End Function


'********************************************************
' Fonction : BordureTableau
'
' permet d'encadrer toutes les cellules dans une zone
' d|fffd|finie
'
'********************************************************
Function DigitTableau(l1 As Long, c1 As Long, l2 As Long, c2 As Long)

  On Error Resume Next
  Range(Cells(l1, c1), Cells(l2, c2)).Select
  
  Select Case CLng(g_tabMultiLangue.iNbdigit)
    Case 1:
      Selection.NumberFormat = "0.0"
    Case 3:
      Selection.NumberFormat = "0.000"
    Case Else
      Selection.NumberFormat = "0.00"
  End Select
  Selection.HorizontalAlignment = xlRight
  
  Cells(l1, c1).Select

End Function
  
'********************************************************
' Fonction : FibreParpage
'
' Oblige un saut de page manuel tous les "x" fibres
'
'********************************************************
Function FibreParPage(l1 As Long, NbFibre As Long)
Dim modulo As Long
Dim nIndex As Long

  On Error Resume Next
  
  If CLng(g_tabMultiLangue.iNbFibre) < NbFibre Then
    modulo = NbFibre / CLng(g_tabMultiLangue.iNbFibre)
    For nIndex = 1 To modulo
      Rows(l1 + (nIndex * CLng(g_tabMultiLangue.iNbFibre))).PageBreak = xlPageBreakManual
    Next
  End If
  
End Function

'********************************************************
' Fonction : BordureTableau
'
' permet d'encadrer toutes les cellules dans une zone
' d|fffd|finie
'
'********************************************************
Function BordureTableau(l1 As Long, c1 As Long, l2 As Long, c2 As Long)
  
  On Error Resume Next
  Range(Cells(l1, c1), Cells(l2, c2)).Select
  
  With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
  With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
  With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
  With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
  With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
  With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
    
  Cells(l1, c1).Select
  
End Function
'********************************************************
'
'********************************************************
Function CouleurTableau(l1 As Long, c1 As Long, l2 As Long, c2 As Long, couleur As Long)
  
  On Error Resume Next
  Range(Cells(l1, c1), Cells(l2, c2)).Select
  
  With Selection.Interior
        .ColorIndex = couleur
        .PatternColorIndex = xlAutomatic
  End With

  Cells(l1, c1).Select

End Function



'********************************************************
' Fonction : CreationNouveauClasseur
'
' Creation du classeur pour un cable
'
'********************************************************
Public Sub CreationNouveauClasseur()
Dim sOngletModele As String
Dim sSheet As String
Dim sFichierSauvegarde As String
  
  On Error Resume Next
  
  Application.DisplayAlerts = False
  
  ' on se positionne sur le modele
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate
  Cells(cLigDefautConfig + 14, cColDefautConfig).Value = g_tabMultiLangue.sTitre

  ' Ouverture d'un nouveau classeur avec un seul onglet
  Application.SheetsInNewWorkbook = 1
  Workbooks.Add
  
  ' Recuperation du nom du classeur
  gClasseurOFI = Application.ActiveWindow.Caption
  sOngletModele = Application.ActiveSheet.Name
  sSheet = sOngletModele
  
  If (gfIndexOfRefractionCustom = 0) Then
    gfIndexOfRefractionCustom = fctCDbl(g_tabCable.sIdentFibre(1).sParamFibre(cParamFibreIR))
  End If
  If gb_LTS Then    'Seulement |fffd| faire si mesures LTS
  
    'recopie de l'onglet , apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
    RecopieOnglet cFeuilleGeneralInformation, sSheet
    
    'on renseigne l'onglet "information generale"
    remplitTableauInfoGeneral
    
    ' on met a jour en fonction des langues
    majLibelleOngletCourant
  
    ' suivant les choix de l'utilisateur on pr|fffd|pare les
    ' autres onglets
  
      If g_tabMultiLangue.bSelect_Cable Then
        
        'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
        RecopieOnglet cFeuilleSommaire, sSheet
            
        'on renseigne l'onglet "Sommaire"
        remplitTableauSommaire
        
        ' on met a jour en fonction des langues
        majLibelleOngletCourant
        
        If g_tabMultiLangue.bSelect_Insertion Then
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleInsertion, sSheet
            
          ' remplir le tableau des valeurs
          remplitTableauLoss
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
        
        End If  '    If g_tabMultiLangue.bSelect_Insertion
        
        If g_tabMultiLangue.bSelect_Orl Then
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleORL, sSheet
                
          ' remplir le tableau des valeurs
          remplitTableauORL
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
        
        End If '    If g_tabMultiLangue.bSelect_Orl
        
        If g_tabMultiLangue.bSelect_Out Then
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleOUT, sSheet
                
          ' remplir le tableau des valeurs
          remplitTableauOutOfRange
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
          
        End If 'If g_tabMultiLangue.bSelect_Out
        
        If g_tabMultiLangue.bSelect_Reference Then
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleReference, sSheet
                
          ' remplir le tableau des valeurs
          remplitTableauReference
              
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
              
        End If '    If g_tabMultiLangue.bSelect_Reference
        
        If g_tabMultiLangue.bSelect_Length Then
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleLongueur, sSheet
                
          ' remplir le tableau des valeurs
          remplitTableauLength
              
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
              
        End If '    If g_tabMultiLangue.bSelect_Length
        
        If g_tabMultiLangue.bSelect_Insertion Then
        
          If g_tabMultiLangue.bSelect_Comparaison Then
            
            'If g_tabMesure(1).sNbOnde >= 2 Then
            If g_NbOndeMax >= 2 Then
    
              'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
              RecopieOnglet cFeuilleComparaisonInsertion, sSheet
                        
              Workbooks(gClasseurOFI).Activate
              Sheets(cFeuilleComparaisonInsertion).Select
                        
              Cells.Replace What:="$lambda1$", Replacement:=g_tabMultiLangue.sLambda1, LookAt:=xlPart, _
                            SearchOrder:=xlByRows, MatchCase:=False
              Cells.Replace What:="$lambda2$", Replacement:=g_tabMultiLangue.sLambda2, LookAt:=xlPart, _
                            SearchOrder:=xlByRows, MatchCase:=False
              
              ' remplir le tableau des valeurs
              remplitTableauComparaisonLoss
              
              ' on met a jour en fonction des langues
              majLibelleOngletCourant
                      
            End If
          End If 'If g_tabMultiLangue.bSelect_Comparaison
        End If  'If g_tabMultiLangue.bSelect_Insertion
        
        If g_tabMultiLangue.bSelect_Orl Then
        
          If g_tabMultiLangue.bSelect_Comparaison Then
            
            'If g_tabMesure(1).sNbOnde >= 2 Then
            If g_NbOndeMax >= 2 Then
    
              'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
              RecopieOnglet cFeuilleComparaisonORL, sSheet
              
              Workbooks(gClasseurOFI).Activate
              Sheets(cFeuilleComparaisonORL).Select
              
              Cells.Replace What:="$lambda1$", Replacement:=g_tabMultiLangue.sLambda1, LookAt:=xlPart, _
                            SearchOrder:=xlByRows, MatchCase:=False
              Cells.Replace What:="$lambda2$", Replacement:=g_tabMultiLangue.sLambda2, LookAt:=xlPart, _
                            SearchOrder:=xlByRows, MatchCase:=False
              
              ' remplir le tableau des valeurs
              remplitTableauComparaisonORL
              
              ' on met a jour en fonction des langues
              majLibelleOngletCourant
                      
            End If
          End If
        End If 'If g_tabMultiLangue.bSelect_Orl
        
        If g_tabMultiLangue.bSelect_Fibre Then
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleInfogeneralFibre, sSheet
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
          
          ' remplir le tableau des valeurs
          remplitTableauInfoGeneralFibre
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
          
          'recopie de l'onglet, apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
          RecopieOnglet cFeuilleDetailFibre, sSheet
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
                
          ' remplir le tableau des valeurs
          remplitTableauFibreDetail
          
          ' on met a jour en fonction des langues
          majLibelleOngletCourant
        End If '    If g_tabMultiLangue.bSelect_Fibre
      End If    'If g_tabMultiLangue.bSelect_Cable Then

  End If 'If gb_LTS  Les tableaux pr|fffd|c|fffd|dents ne sont |fffd| faire que si gb_LTS
  
  ' *********************************** CWDM - MY ******************************************
  If gb_CCA Then
     
     If g_tabMultiLangue.bSelect_GenCWDM Then
          'recopie de l'onglet , apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
           RecopieOnglet cFeuilleGeneralInformationCCA, sSheet
           ' on met a jour en fonction des langues
           majLibelleOngletCourant
           remplitTableauInfoGeneralCCA
     End If  'If g_tabMultiLangue.bSelect_GenCWDM
           
     If g_tabMultiLangue.bSelect_ThresCWDM Then
           'recopie de l'onglet , apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
           RecopieOnglet cFeuilleThresholdCWDM, sSheet
           ' on met a jour en fonction des langues
           majLibelleOngletCourant
           remplitCWDMThreshold
           majLibelleOngletCourant
     End If  'If g_tabMultiLangue.bSelect_ThresCWDM
           
     If g_tabMultiLangue.bSelect_FibCWDM Then
           'recopie de l'onglet , apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
           RecopieOnglet cFeuilleCWDM, sSheet
           majLibelleOngletCourant
           remplitTableauCWDM
           majLibelleOngletCourant
     End If  'If g_tabMultiLangue.bSelect_FibCWDM
   
   End If 'if gb_CCA
   ' *********************************** CWDM - MY ******************************************
  
  'suppression du premier onglet cr|fffd||fffd| par d|fffd|faut
  Application.DisplayAlerts = False
  Sheets(sOngletModele).Delete
    
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate
  
    ' apercu avant impression
    ApercuAvantImpression
    
    'sauvegarde du classeur
    sFichierSauvegarde = Application.GetSaveAsFilename(Title:="OFI 2000", _
                                                     InitialFilename:="OFI_" & g_tabCable.sNomcable & ".xls", _
                                                     FileFilter:="Excel (*.xls),*.xls")
    If (sFichierSauvegarde <> "Faux") Then
      Windows(gClasseurOFI).Activate
      ActiveWorkbook.SaveAs FileName:=sFichierSauvegarde, FileFormat:=xlNormal, _
      Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, _
      CreateBackup:=False
      Windows(ActiveWorkbook.Name).Activate
      ActiveWorkbook.Close
    End If
  
  Application.DisplayAlerts = True
    
End Sub
'********************************************************
'
'********************************************************
Private Sub RecopieOnglet(FeuilleModele As String, Onglet As String)
Dim OngletPrecedent As String

  OngletPrecedent = Onglet
  'on se positionne sur le modele
  ThisWorkbook.Activate
  Sheets(FeuilleModele).Activate

  ' Copier l'onglet general
  Sheets(FeuilleModele).Copy after:= _
        Workbooks(gClasseurOFI).Sheets(OngletPrecedent)

  ' mettre |fffd| jour les libell|fffd|s
  MiseEnPage FeuilleModele

  ' on memorise ce qui vient d'|fffd|tre fait
  Onglet = FeuilleModele

End Sub

'********************************************************
'
'********************************************************
Private Sub MiseEnPage(feuille As String)
Dim lPaperSize

  On Error GoTo formatinconnu
  
  Select Case g_tabMultiLangue.iType_papier
    Case 2: lPaperSize = xlPaperA3
    Case 3: lPaperSize = xlPaperLetter
    Case 4: lPaperSize = xlPaperLegal
    Case Else
      lPaperSize = xlPaperA4
  End Select

  Workbooks(gClasseurOFI).Activate
  Sheets(feuille).Select
  ActiveSheet.PageSetup.PaperSize = lPaperSize

  Exit Sub
  
formatinconnu:
  ActiveSheet.PageSetup.PaperSize = xlPaperA4

End Sub

'********************************************************
'
'********************************************************
Private Sub OrientationPapierInsertion(sFeuille As String, nbLgOnde As Long, bPortrait As Boolean)
  
  On Error Resume Next
  
  Workbooks(gClasseurOFI).Activate
  Sheets(sFeuille).Select
  bPortrait = True

  If ActiveSheet.PageSetup.PaperSize = xlPaperA3 Then 'A3
    Select Case nbLgOnde
      Case 1, 2, 3, 4
'        ActiveSheet.PageSetup.Orientation = xlPortrait
      Case 5, 6, 7
        ActiveSheet.PageSetup.Orientation = xlLandscape
        bPortrait = False
      Case 8
'        ActiveSheet.PageSetup.Orientation = xlPortrait
        Columns(15).PageBreak = xlPageBreakManual
    End Select
  Else
    Select Case nbLgOnde
      Case 1, 2, 3:
'        ActiveSheet.PageSetup.Orientation = xlPortrait
      Case 4:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        bPortrait = False
      Case 5, 6, 7, 8:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        Columns(15).PageBreak = xlPageBreakManual
        bPortrait = False
    End Select
  End If
End Sub

'********************************************************
'
'********************************************************
Private Sub OrientationPapierReference(sFeuille As String, nbLgOnde As Long, bPortrait As Boolean)
  
  On Error Resume Next
  
  Workbooks(gClasseurOFI).Activate
  Sheets(sFeuille).Select
  bPortrait = True

  If ActiveSheet.PageSetup.PaperSize = xlPaperA3 Then 'A3
    Select Case nbLgOnde
      Case 1, 2, 3
'        ActiveSheet.PageSetup.Orientation = xlPortrait
      Case 5
        ActiveSheet.PageSetup.Orientation = xlLandscape
        bPortrait = False
      Case Else
'        ActiveSheet.PageSetup.Orientation = xlPortrait
        Columns(15).PageBreak = xlPageBreakManual
    End Select
  Else
    Select Case nbLgOnde
      Case 1, 2:
'        ActiveSheet.PageSetup.Orientation = xlPortrait
      Case 3:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        bPortrait = False
      Case 4, 5, 6:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        Columns(15).PageBreak = xlPageBreakManual
        bPortrait = False
      Case Else:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        Columns(15).PageBreak = xlPageBreakManual
        Columns(27).PageBreak = xlPageBreakManual
        bPortrait = False
    End Select
  End If
End Sub

'********************************************************
'
'********************************************************
Private Sub OrientationPapierFibres(sFeuille As String, nbTypeMesure As Long, bPortrait As Boolean)
  
  On Error Resume Next
  
  Workbooks(gClasseurOFI).Activate
  Sheets(sFeuille).Select
  bPortrait = True
  
  If ActiveSheet.PageSetup.PaperSize = xlPaperA3 Then 'A3
    Select Case nbTypeMesure
      Case 1, 2, 3, 4, 5, 6, 7, 8
'        ActiveSheet.PageSetup.Orientation = xlPortrait
      Case Else
        ActiveSheet.PageSetup.Orientation = xlLandscape
        bPortrait = False
    End Select
  Else
    Select Case nbTypeMesure
      Case 1, 2, 3:
'        ActiveSheet.PageSetup.Orientation = xlPortrait
      Case 4, 5, 6, 7, 8:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        Columns(17).PageBreak = xlPageBreakManual
        bPortrait = False
      Case 9, 10, 11, 12:
'        ActiveSheet.PageSetup.Orientation = xlPortrait
        Columns(12).PageBreak = xlPageBreakManual
        Columns(21).PageBreak = xlPageBreakManual
      Case Else:
        ActiveSheet.PageSetup.Orientation = xlLandscape
        Columns(16).PageBreak = xlPageBreakManual
        bPortrait = False
    End Select
  End If
End Sub

'********************************************************
'
'********************************************************
Public Sub ApercuAvantImpression()

  On Error Resume Next
  
  If g_tabMultiLangue.bImpression Then
      
    Windows(gClasseurOFI).Activate
    Sheets.Select
    
    Sheets(1).Activate
    ActiveWindow.SelectedSheets.PrintPreview
  
  Else
    Sheets(1).Select
  End If
  
End Sub



'********************************************************
'
'********************************************************

' Tests for CWDM


Function fctTestCWDM()

Dim sFichierSauvegarde As String
Dim sOngletModele As String
Dim sSheet As String
Dim bCodeRet As Boolean

  
  'on m|fffd|morise le choix de l'op|fffd|rateur
  g_tabMultiLangue.sTitre = "AB"
  g_tabMultiLangue.sOrigine = "A"
  g_tabMultiLangue.sDestination = "B"
  
 
    frmOFI.Hide
    ' on fabrique le rapport
    
  g_tabCableCCA.sNomcable = "Cable01"
 ' bCodeRet = InitialisationOFI
  fctRequestCWDMResults ("Cable01")


' On teste ici l'|fffd|criture du fichier !
 Call SauvegardeFichierTexte("Cable01", "C:\Developpment projects\CWDM FiberBudget\MyTestFile.txt")
 Exit Function

    '********************************************************
    ' d|fffd|but ajout
    '********************************************************
 
  Application.DisplayAlerts = False
  
  ' on se positionne sur le modele
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate
  Cells(cLigDefautConfig + 14, cColDefautConfig).Value = g_tabMultiLangue.sTitre

  ' Ouverture d'un nouveau classeur avec un seul onglet
  Application.SheetsInNewWorkbook = 1
  Workbooks.Add
  
  ' Recuperation du nom du classeur
  gClasseurOFI = Application.ActiveWindow.Caption
  sOngletModele = Application.ActiveSheet.Name
  sSheet = sOngletModele
  
  'recopie de l'onglet , apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
  RecopieOnglet cFeuilleGeneralInformationCCA, sSheet
  ' on met a jour en fonction des langues
  majLibelleOngletCourant
  remplitTableauInfoGeneralCCA
  
  'recopie de l'onglet , apres l'onglet x, puis memorise le nouvel onglet cr|fffd||fffd|
  RecopieOnglet cFeuilleThresholdCWDM, sSheet
  ' on met a jour en fonction des langues
  majLibelleOngletCourant
  remplitCWDMThreshold
  
  RecopieOnglet cFeuilleCWDM, sSheet
  majLibelleOngletCourant
  remplitTableauCWDM
  
  'suppression du premier onglet cr|fffd||fffd| par d|fffd|faut
  Application.DisplayAlerts = False
  Sheets(sOngletModele).Delete
    
  ThisWorkbook.Activate
  Sheets(cFeuilleStart).Activate
  
  ' apercu avant impression
  ApercuAvantImpression
    
  'sauvegarde du classeur
'  sFichierSauvegarde = Application.GetSaveAsFilename(Title:="OFI 2000", _
'                                                     InitialFilename:="OFI_" & g_tabCable.sNomcable & ".xls", _
'                                                     FileFilter:="Excel (*.xls),*.xls")
'  If (sFichierSauvegarde <> "Faux") Then
'      Windows(gClasseurOFI).Activate
'      ActiveWorkbook.SaveAs FileName:=sFichierSauvegarde, FileFormat:=xlNormal, _
'      Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, _
'      CreateBackup:=False
'      Windows(ActiveWorkbook.Name).Activate
'      ActiveWorkbook.Close
'    End If
  
  Application.DisplayAlerts = True
    
' ***************************************** Fin d'ajout de creation nouveau classeur
    frmMenu.Show
  
  
End Function



' DIMENSIONNE LA FENETRE Macro FiberCable A LA TAILLE DU BOUTON DE LANCEMENT
Function InitFenetreAppli()
    
    
    m_nCompteurVerrouillageEcran = 0
    Application.ScreenUpdating = True
    
    
    ThisWorkbook.Activate
    Sheets(1).Select
    Cells(1, 2).Select
    Cells(1, 1).Activate
    
    Application.ReferenceStyle = xlR1C1
    ActiveWindow.WindowState = xlNormal
    
    If ((gnMemoLargeur = 0) Or (gnMemoHauteur = 0)) Then
        On Error Resume Next
        gnMemoLargeur = Cells(1, 1).Width + 20
        gnMemoHauteur = Cells(1, 1).Height + 30
        
        Do
            Err = 0
            gnMemoLargeur = gnMemoLargeur + 1
            ActiveWindow.Width = gnMemoLargeur
        Loop While (Err <> 0)
        
        Do
            Err = 0
            gnMemoHauteur = gnMemoHauteur + 1
            ActiveWindow.Height = gnMemoHauteur
        Loop While (Err <> 0)
        
        Do
            gnMemoLargeur = gnMemoLargeur + 5
            ActiveWindow.Width = gnMemoLargeur
        Loop While (ActiveWindow.VisibleRange.Cells.Count <= 1)
        Do
            gnMemoLargeur = gnMemoLargeur - 1
            ActiveWindow.Width = gnMemoLargeur
        Loop While (ActiveWindow.VisibleRange.Cells.Count > 1)
        ActiveWindow.Width = gnMemoLargeur + 1
        
        Do
            gnMemoHauteur = gnMemoHauteur + 5
            ActiveWindow.Height = gnMemoHauteur
        Loop While (ActiveWindow.VisibleRange.Cells.Count <= 2)
        Do
            gnMemoHauteur = gnMemoHauteur - 1
            ActiveWindow.Height = gnMemoHauteur
        Loop While (ActiveWindow.VisibleRange.Cells.Count > 2)
        
        On Error GoTo 0
    Else
        ActiveWindow.Width = gnMemoLargeur
        ActiveWindow.Height = gnMemoHauteur
    End If
    
    
    
    'ActiveWindow.Width = 236
    'ActiveWindow.Height = 87

End Function




Function VerrouilleRafraichissementEcran()
    m_nCompteurVerrouillageEcran = m_nCompteurVerrouillageEcran + 1
    Application.ScreenUpdating = False

End Function
Function AutoriseRafraichissementEcran()
    m_nCompteurVerrouillageEcran = m_nCompteurVerrouillageEcran - 1
    
    If (m_nCompteurVerrouillageEcran < 0) Then
        m_nCompteurVerrouillageEcran = 0 ' Juste pour pouvoir poser un point d'arret
    End If
    
    If (m_nCompteurVerrouillageEcran <= 0) Then
        m_nCompteurVerrouillageEcran = 0
        Application.ScreenUpdating = True
    End If

End Function





Attribute VB_Name = "modInterrogationOFI"
Option Explicit
'
' When you add a new param, please update the cNBZoneFixeFibre constante declare
' in the modGeneral source
'
' These constants concern the structure fiber typ_fibre
Public Const cParamFibreStatus = 1
Public Const cParamFibreDate = 2
Public Const cParamFibreTime = 3
Public Const cParamFibreColours = 4
Public Const cParamFibreIR = 5
Public Const cParamFibreDelay = 6
Public Const cParamFibreUnitTime = 7
Public Const cParamFibreLength = 8
Public Const cParamFibreUnitCableLength = 9
Public Const cParamFibreLocalOFIType = 10
Public Const cParamFibreDistantOFIType = 11
Public Const cParamFibreLocalSoftVersion = 12
Public Const cParamFibreDistantSoftVersion = 13
Public Const cParamFibreLocalSerialNumber = 14
Public Const cParamFibreDistantSerialNumber = 15

' When you add a new param, please update the cNBZoneFixeFibreCCA constant declared
' in the modGeneral source
'
' These constants concern the structure fiber typ_fibre_CWDM
Public Const cParamFibreCCAStatus = 1
Public Const cParamFibreCCADate = 2
Public Const cParamFibreCCATime = 3
Public Const cParamFibreCCAColours = 4
Public Const cParamFibreCCALocalOFIType = 5
Public Const cParamFibreCCALocalSoftVersion = 6
Public Const cParamFibreCCALocalSerialNumber = 7
Public Const cParamFibreCCANbChannelDetect = 8
Public Const cParamFibreCCAPowerMax = 9
Public Const cParamFibreCCAPowerMin = 10


Const cMsgRemote = "*REM"
Const cMsgStatus = "*ESR?"
Const cMsgBaudRate = "SYSTEM:BAUDRATE "
Const cMsgLangue = "SYSTEM:LANGUAGE"
Const cMsgenglish = " engl"
Const cMsgfrench = " french"
Const cMsggerman = " german"
Const cMsgspanish = " spanish"
Const cMsgIdentitication = "*IDN?"
Const cMsgOFIEnteteBaudRate = " BPS_"
Const cMsgOFIGlobalHeader = "RESults:SUMMary?"
Const cMsgOFIThresold = "RESults:THReshold? "
Const cMsgOFICCACableHeader = "CCARESults:CABLe? "
Const cMsgOFICCAFiberHeader = "CCARESults:FIBer? "
Const cMsgOFICCATypeOfMeasure = "CCARESults:MEASure? "
Const cMsgOFICableHeader = "RESults:CABle? "
Const cMsgOFIFiberHeader = "RESults:FIBer? "
Const cMsgOFITypeOfMeasure = "RESults:MEASure? "
Const cMsgOFICWDM = "RESults:CWDM? "
Const cCARSEPARATEUR = ","
Const cCARFINTRANSMISSON = vbCr
' Modifs MY for CWDM
'Const cMsgOFITypeLTS = "LTS"
'Const cMsgOFITypeCCA = "CCA"
Const cMsgNone = " "    'Message renvoy|fffd| par l'OFI pour dire qu'aucun cable LTS ou CCA n'est dispo


'===========================================================
' Declarations des variables globales |fffd| toute l'application
'===========================================================
Public g_sMessage As String 'trame recue de l'OFI

'============================
' declarations des types
'============================
Type typ_trameThreshold
  sWaveLength(cNbLgOndeMax) As String
  sLoss(cNbLgOndeMax) As String
  sAbsPower(cNbLgOndeMax) As String
  sORL(cNbLgOndeMax) As String
  sdelay As String
End Type

Type typ_fibre
  sNomFibre As String
  sParamFibre(cNBZoneFixeFibre) As String
End Type

Type typ_trameCable
  sNomcable As String
  sOrigine As String
  sStatus As String
  sDate As String
  sTime As String
  sIDLocalOperateur As String
  sIDDistantOperator As String
  sNBTubesCable As String
  sNBFiberTubes As String
  sNBFibres As String
  sNBFTestes As String
  sIdentFibre() As typ_fibre
End Type

Type typ_MesureOnde
  sIdentOnde As String
  sValeurMesure() As String
End Type

Type typ_trameMesure
  sNbOnde As String
  sOnde() As typ_MesureOnde
  sNbTypeMesure As String      'nombre de mesures max disponibles dans l'OFI
  sNbMesureReel As Long        'nombre de mesures r|fffd||fffd|llement affich|fffd|es
  sTypeMesure() As String
End Type

' Modifs MY 06/03 for CWDM
Type typ_fibre_CWDM
  sNomFibre As String
  sParamFibre(cNBZoneFixeFibreCCA) As String
End Type

' Cable request for CWDM
Type typ_trameCableCWDM
  sOrigine As String
  sStatus As String
  sDate As String
  sTime As String
  sIDLocalOperateur As String
  sIDDistantOperator As String
  sNBTubesCable As String
  sNBFiberTubes As String
  sNBFibres As String
  sNBFTestes As String
  sIdentFibre() As typ_fibre_CWDM
  sNomcable As String
End Type

Type typ_MesureCWDM
  sBandId As String
  sChannelId As String
  sGridLambda As String
  sMeasuredLambda As String
  sLambdaPower As String
  sLambdaDelta As String
  sPowerMargin As String
  sWavelengthThreshold As String
  sWavelengthSeuil As String
  sPowerThreshold As String
End Type

Type typ_trameCWDM
  sUsedPlan As String
  sSweep    As String
  sMode     As String
  sGridName As String
  sNbChGrid As String
  sPowerComp As String
  sGridChannelNumber As String
  sMesureCWDM() As typ_MesureCWDM
End Type
' End modifs MY for CWDM

'============================
' Declarations des tableaux
'============================
Public g_sTrameNBCable As String
Public g_tabIdentCable() As String
Public g_tabThreshold As typ_trameThreshold
Public g_tabCable As typ_trameCable
Public g_tabMesure() As typ_trameMesure
Public g_NbOndeMax As Long
Public g_tabIdentOndeMax(cNbLgOndeMax) As String
' Modifs MY for CWDM (CCA Measurement)
Public g_tabMesureCCA() As typ_trameCWDM
Public g_tabCableCCA As typ_trameCableCWDM


'===============================================
' Declaration variable pour savoir si utile d'appeler OFI2 (seulement si mesures LTS)
'===============================================
Public gb_LTS As Boolean
Public gb_CCA As Boolean

'===============================================
' Declarations pour gestion de la communication
'===============================================
Public g_TimeOutConfig As Double       'en secondes
Public g_TimeOutCom As Double       'en secondes
Public g_TimeOutVide As Double   'en secondes pour vider le buffer
Public gCommPort As Long         'port com1 ou 2
Public gBitSecond As String      '9600 |fffd| 115200
Public gDataBit As String        '4,5,6,7 ou 8
Public gStopBit As String        '1-1.5-2
Public gParity As String         'E,N,O
Dim ctlCommOFI As Control

'*************************************************************
' Fonction : fctOFIEmission
'
' Envoi d'un ordre |fffd| l'appareil OFI
' Ajout du caract|fffd|re de fin de trame
'*************************************************************
Function fctOFIEmission(sOrdre As String) As Boolean
  
  fctOFIEmission = True
  If ctlCommOFI.OutBufferCount = 0 Then
    ctlCommOFI.Output = sOrdre & cCARFINTRANSMISSON
  Else
    fctOFIEmission = False
  End If
  
End Function
'*************************************************************
' Fonction : fctTimeOutVideRS232
'
' Vidage de la ligne
' Attente d'un message provenant de l'OFI
'*************************************************************
Function fctTimeOutVideRS232() As Boolean
Dim fInitTime
 
  fInitTime = Timer

  g_sMessage = ""
  fInitTime = Timer
  ctlCommOFI.InputLen = 0
  Do
    DoEvents

    If (ctlCommOFI.InBufferCount > 0) Then
      g_sMessage = g_sMessage & ctlCommOFI.Input
      ' Reinit timer
      fInitTime = Timer
    End If

    If ((Timer - fInitTime) > g_TimeOutVide) Then
      g_sMessage = ""
      Exit Do
    End If
  Loop Until InStr(g_sMessage, cCARFINTRANSMISSON)
      
  fctTimeOutVideRS232 = True

End Function

'*************************************************************
' Fonction : fctTimeOut
'
' Attente d'un message provenant de l'OFI
'*************************************************************
Function fctTimeOut(fTimeOut As Double) As Boolean
Dim fInitTime
  
  If (fTimeOut = 0) Then
    fTimeOut = g_TimeOutCom
  End If
  fInitTime = Timer
  
  g_sMessage = ""
  fInitTime = Timer
  ctlCommOFI.InputLen = 0
  Do
    DoEvents

    If (ctlCommOFI.InBufferCount > 0) Then
      g_sMessage = g_sMessage & ctlCommOFI.Input
      ' Reinit timer
      fInitTime = Timer
    End If

    If ((Timer - fInitTime) > fTimeOut) Then
        g_sMessage = ""
        Exit Do
    End If
  Loop Until InStr(g_sMessage, cCARFINTRANSMISSON)
      
  If g_sMessage <> "" Then
    fctTimeOut = False
  Else
    fctTimeOut = True
  End If

End Function

'******************************************************************
' PROCEDURE : TemporisationCommunication
'
' Permet de g|fffd|rer une tempo antre l'envoi des diff|fffd|rents ordres
'******************************************************************
Private Sub TemporisationCommunication()
Dim fInitTime
  
  fInitTime = Timer
  Do
    DoEvents
  Loop Until ((Timer - fInitTime) > g_TimeOutVide)

End Sub
'******************************************************************
' PROCEDURE :
'
' permet de d|fffd|couper les trames re|fffd|ues de l'OFI
' retourne le text situ|fffd| avant une ","
' supprime le text retourn|fffd| de la chaine d'entree
'******************************************************************
Private Function GetStrValeur(ByRef strValeur As String) As String
Dim iPos As Long
Dim sTexte As String
Dim sCar As String 'separateur courant

On Error Resume Next

  ' on recup|fffd|re la valeur pr|fffd|c|fffd|dant un s|fffd|parateur
  GetStrValeur = Mid$(strValeur, 1, InStr(strValeur, cCARSEPARATEUR) - 1)
  iPos = InStr(GetStrValeur, ";")
  If iPos <> 0 Then
    Mid(GetStrValeur, InStr(GetStrValeur, ";"), 1) = ":"
    If InStr(GetStrValeur, ";") <> 0 Then
      Mid(GetStrValeur, InStr(GetStrValeur, ";"), 1) = ":"
    End If
  End If
  
  'on retire la valeur pr|fffd|c|fffd|demment r|fffd|cup|fffd|r|fffd|e, pour retourner le reste de la chaine
  strValeur = Mid$(strValeur, InStr(strValeur, cCARSEPARATEUR) + 1)
  
  ' il faut valider le caract|fffd|re de s|fffd|paration des d|fffd|cimales
''  sTexte = CStr(21 / 10)
''  sCar = Mid$(sTexte, 2, 1)
''  iPos = InStr(GetStrValeur, ".")
''  If (sCar <> ".") And iPos <> 0 Then
''    Mid(GetStrValeur, iPos, 1) = sCar
''  End If
End Function
'******************************************************************
' Fonction : InterrogationOFI
'
' G|fffd|re le dialogue entre l'application et l'OFI
'******************************************************************
Function InterrogationOFI(noCable As String) As Boolean

Dim bCodeRetLTS As Boolean
Dim bCodeRetCCA As Boolean
Dim nIndex As Long
  
  On Error GoTo err_Interrogation
  If Not ctlCommOFI.PortOpen Then
    ctlCommOFI.PortOpen = True
  End If
  
  InterrogationOFI = True
  
  ' We reinit those options as false for new download
  ' Modif MY 01/06/03
  frmOFI.optCableLTS.Value = False
  frmOFI.optThreshold.Value = False
  frmOFI.optFibreMesureLTS.Value = False
  frmOFI.optCableCCA.Value = False
  frmOFI.optFibreMesureCCA.Value = False
  frmOFI.optCableLTS2.Value = False
  frmOFI.optThreshold2.Value = False
  frmOFI.optFibreMesureLTS2.Value = False
        
  g_tabCable.sNomcable = noCable
  g_tabCableCCA.sNomcable = noCable
  
  ' ****************************************************************************************
  ' ----------------------------------------------------------------------------------------
  ' --- Modifs MY for CWDM 06/03 - We now consider CWDM and previous measur (LTS) as
  ' --- totally distinct measurements for ascendant compatibility with other programs & OFI
  ' --- So we do a first loop on the LTS cable information, and after we download all fiber
  ' --- and measurement results, we ask for a new request for CWDM results only.
  ' --- Therefore, 2 new subfunctions are created, to be called one after the other
  ' ----------------------------------------------------------------------------------------
  ' ****************************************************************************************
    fctTimeOutVideRS232 'vidage de la ligne
    bCodeRetLTS = fctRequestLTSResults(noCable)
    bCodeRetCCA = fctRequestCWDMResults(noCable)
        If Not (bCodeRetLTS) And (bCodeRetCCA) Then
            InterrogationOFI = False
        End If
  Exit Function

err_Interrogation:
  MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(7), _
         vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
  InterrogationOFI = False
End Function

Function fctRequestLTSResults(noCable As String) As Boolean

Dim bCodeRet As Boolean
Dim iFibre As Long
Dim NbFibre As String
Dim nofibre As String
Dim ilgOnde As Long
Dim nIndex As Long
Dim iParam As Long

Dim sMessageCable As String
Dim smessageThreshold As String
Dim sMessageFibre As String
Dim sMessageMesure As String
Dim sMessageCWDM As String

Dim sParam As String
Dim nbLongueurOnde As Long
Dim nbMesure As Long
Dim lblFiber As Control
Dim optTexte As Control
Dim nbLgOnde As Long
'Dim iParam As Long
Dim l_UsedMeasure() As Long
Dim iMesure As Long
Dim iLength As Long
Dim cptMesureUse As Long

  Set lblFiber = frmOFI.lblFiberLTS
  Set optTexte = frmOFI.optFibreMesureLTS
  
  lblFiber.Caption = ""
  g_NbOndeMax = 0
  
  ' ****************************************************************************************
  ' ----------------------------------------------------------------------------------------
  ' ---- first request on cable for all LTS measurements
  ' ----------------------------------------------------------------------------------------
  ' ****************************************************************************************
  
  '----------------------
  ' Cable information
  '----------------------
  'bCodeRet = fctOFIEmission(cMsgOFICableHeader & """" & noCable & """")
  bCodeRet = fctOFIEmission(cMsgOFICableHeader & """" & noCable & """")
  
  If Not fctTimeOut(0) Then
    
    sMessageCable = g_sMessage
    
    ' On regarde tout de suite si on a un r|fffd|sultat LTS
    If sMessageCable = cMsgNone Then
      gb_LTS = False   ' On positionne flag |fffd| false pour ne pas demander OFI2
      Exit Function
    Else
      gb_LTS = True
    End If
       ' On positionne flag |fffd| true pour demander OFI2
    
    g_tabCable.sOrigine = GetStrValeur(sMessageCable)
    g_tabCable.sStatus = GetStrValeur(sMessageCable)
    g_tabCable.sDate = GetStrValeur(sMessageCable)
    g_tabCable.sTime = GetStrValeur(sMessageCable)
    g_tabCable.sIDLocalOperateur = GetStrValeur(sMessageCable)
    g_tabCable.sIDDistantOperator = GetStrValeur(sMessageCable)
    g_tabCable.sNBTubesCable = GetStrValeur(sMessageCable)
    g_tabCable.sNBFiberTubes = GetStrValeur(sMessageCable)
    g_tabCable.sNBFibres = GetStrValeur(sMessageCable)
    g_tabCable.sNBFTestes = GetStrValeur(sMessageCable)
        
    'Etat d'avancement
    frmOFI.optCableLTS.Value = True
            
    '=========================================
    ' On recherche les infos sur chaque fibre
    '=========================================
    '======================
    ' Fiber information
    '======================

    ReDim g_tabCable.sIdentFibre(g_tabCable.sNBFTestes)
    ReDim g_tabMesure(CLng(g_tabCable.sNBFTestes))
              
    
    '----------------------
    ' Threshold information
    '----------------------
    bCodeRet = fctOFIEmission(cMsgOFIThresold & """" & noCable & """")
    
    If Not fctTimeOut(0) Then
      smessageThreshold = g_sMessage
      
      For nIndex = 1 To cNbLgOndeMax
        g_tabThreshold.sWaveLength(nIndex) = GetStrValeur(smessageThreshold)
      Next
      
      For nIndex = 1 To cNbLgOndeMax
        For iParam = 1 To 3 'Loss, Orl et Power
          Select Case iParam
            Case 1: g_tabThreshold.sLoss(nIndex) = GetStrValeur(smessageThreshold)
            Case 2: g_tabThreshold.sORL(nIndex) = GetStrValeur(smessageThreshold)
            Case 3: g_tabThreshold.sAbsPower(nIndex) = GetStrValeur(smessageThreshold)
          End Select
        Next
      Next
      g_tabThreshold.sdelay = GetStrValeur(smessageThreshold)
    Else
      fctRequestLTSResults = False
      Exit Function
    End If
    
      For nIndex = 1 To cNbLgOndeMax
          If (Val(g_tabThreshold.sWaveLength(nIndex)) > 9999) Then
              g_tabThreshold.sWaveLength(nIndex) = ""
              g_tabThreshold.sLoss(nIndex) = ""
              g_tabThreshold.sORL(nIndex) = ""
              g_tabThreshold.sAbsPower(nIndex) = ""
          End If
      Next nIndex
    
    'Etat d'avancement
    frmOFI.optThreshold.Value = True
        
        
    TemporisationCommunication
    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
          
      g_tabCable.sIdentFibre(iFibre).sNomFibre = GetStrValeur(sMessageCable)
      lblFiber.Caption = iFibre & " / " & g_tabCable.sNBFTestes
      
      'bCodeRet = fctOFIEmission(cMsgOFIFiberHeader & """" & noCable & """,""" & g_tabCable.sIdentFibre(iFibre).sNomFibre & """")
      bCodeRet = fctOFIEmission(cMsgOFIFiberHeader & """" & noCable & """,""" & g_tabCable.sIdentFibre(iFibre).sNomFibre & """")
      If Not fctTimeOut(0) Then
        sMessageFibre = g_sMessage
        For nIndex = 1 To cNBZoneFixeFibre
          g_tabCable.sIdentFibre(iFibre).sParamFibre(nIndex) = GetStrValeur(sMessageFibre)   'status,date,time,colours,ir,delay,unit time,length,unit cable length,local ofi type, distant ofi type, local serial number, distant serial number
        Next
      Else
        fctRequestLTSResults = False
        Exit Function
      End If
                  
      '=========================================================
      ' On recupere les mesures de chaque fibre de chaque cable
      '=========================================================
      '======================
      ' Measurement information
      '======================
      'bCodeRet = fctOFIEmission(cMsgOFITypeOfMeasure & """" & noCable & """,""" & g_tabCable.sIdentFibre(iFibre).sNomFibre & """")
      bCodeRet = fctOFIEmission(cMsgOFITypeOfMeasure & """" & noCable & """,""" & g_tabCable.sIdentFibre(iFibre).sNomFibre & """")
      If Not fctTimeOut(0) Then
        sMessageMesure = g_sMessage

        g_tabMesure(iFibre).sNbOnde = GetStrValeur(sMessageMesure)
        nbLongueurOnde = CLng(g_tabMesure(iFibre).sNbOnde)         'nombre de longueur d'onde
        ReDim g_tabMesure(iFibre).sOnde(nbLongueurOnde)
        
        For ilgOnde = 1 To nbLongueurOnde
          g_tabMesure(iFibre).sOnde(ilgOnde).sIdentOnde = GetStrValeur(sMessageMesure)  'longueur d'onde
        Next
        
        g_tabMesure(iFibre).sNbTypeMesure = GetStrValeur(sMessageMesure)
        nbMesure = CLng(g_tabMesure(iFibre).sNbTypeMesure)                'nombre de mesures r|fffd|alis|fffd|es
        
        ReDim g_tabMesure(iFibre).sTypeMesure(nbMesure)
        For nIndex = 1 To nbMesure
          g_tabMesure(iFibre).sTypeMesure(nIndex) = GetStrValeur(sMessageMesure)
        Next
                
        '22/11/2000 : version 3.1.1 les mesures arrivent par longueur d'onde
        '             et non pas par type de mesure
        For ilgOnde = 1 To nbLongueurOnde
          ReDim g_tabMesure(iFibre).sOnde(ilgOnde).sValeurMesure(nbMesure)
          For nIndex = 1 To nbMesure
            g_tabMesure(iFibre).sOnde(ilgOnde).sValeurMesure(nIndex) = GetStrValeur(sMessageMesure)
          Next
        Next
        
      Else
        fctRequestLTSResults = False
        Exit Function
      End If
                    
    Next 'pour chaque fibre
    
    'une fois toutes les infos rapatri|fffd|es on cherche le nombre de longueur d'onde diff|fffd|rente
    Dim OndePrecedente As String
    Dim onde(cNbLgOndeMax) As String
    
    OndePrecedente = ""
    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
      For ilgOnde = 1 To g_tabMesure(iFibre).sNbOnde
        For nIndex = 1 To cNbLgOndeMax
          If onde(nIndex) = g_tabMesure(iFibre).sOnde(ilgOnde).sIdentOnde Then
            Exit For
          Else
            If onde(nIndex) = "" Then
              onde(nIndex) = g_tabMesure(iFibre).sOnde(ilgOnde).sIdentOnde
              Exit For
            End If
          End If
        Next
      Next
    Next
    
    For nIndex = 1 To cNbLgOndeMax
      If onde(nIndex) <> "" Then
        g_NbOndeMax = g_NbOndeMax + 1
        g_tabIdentOndeMax(g_NbOndeMax) = onde(nIndex)
      End If
    Next
    
    '
    ' une fois toutes les mesures rapatri|fffd|es on recherche les mesures qui n'ont pas |fffd|t|fffd| effectu|fffd|es
    '

    ReDim l_UsedMeasure(CLng(g_tabMesure(1).sNbTypeMesure))

    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
      For iMesure = 1 To g_tabMesure(iFibre).sNbTypeMesure
        For iLength = 1 To CLng(g_tabMesure(iFibre).sNbOnde)
          If Trim(g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure)) <> "" Then
            l_UsedMeasure(iMesure) = l_UsedMeasure(iMesure) + 1
          End If
        Next
      Next
    Next

    For iMesure = 1 To g_tabMesure(1).sNbTypeMesure
      If l_UsedMeasure(iMesure) <> 0 Then
        cptMesureUse = cptMesureUse + 1
      End If
    Next
    '
    ' On d|fffd|tecte les mesures non effectu|fffd|es sur l'ensemble des fibres
    '
    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
      g_tabMesure(iFibre).sNbMesureReel = cptMesureUse
      For iMesure = 1 To g_tabMesure(iFibre).sNbTypeMesure
        If l_UsedMeasure(iMesure) = 0 Then
          g_tabMesure(iFibre).sTypeMesure(iMesure) = ""
        End If
      Next
    Next
    
    
    '
    'Etat d'avancement
    '
    frmOFI.optFibreMesureLTS.Value = True
      
  Else
    gb_LTS = False
    fctRequestLTSResults = False
    Exit Function
  End If
  
End Function
  
Function fctRequestCWDMResults(noCable As String) As Boolean
  
' ****************************************************************************************
' ----------------------------------------------------------------------------------------
' ---- second request on cable for all CWDM measurements
' ----------------------------------------------------------------------------------------
' ****************************************************************************************
  

Dim bCodeRet As Boolean
Dim iFibre As Long
Dim NbFibres As Long
Dim nofibre As String
Dim ilgOnde As Long
Dim nIndex As Long
Dim iNbChannelDetectGrid As String


Dim sMessageCableCCA As String
Dim sMessageFibreCCA As String
Dim sMessageMesureCCA As String

Dim lblFiber As Control
Dim optTexte As Control
Dim nbChannelGrid As Long

Set lblFiber = frmOFI.lblFiberCCA
Set optTexte = frmOFI.optFibreMesureCCA
  
lblFiber.Caption = ""

  
'----------------------
' Cable information
'----------------------
  bCodeRet = fctOFIEmission(cMsgOFICCACableHeader & """" & noCable & """")
  
  If Not fctTimeOut(0) Then
    
    sMessageCableCCA = g_sMessage
    
    ' On regarde tout de suite si on a un r|fffd|sultat CCA
    If sMessageCableCCA = cMsgNone Then
      gb_CCA = False   ' On positionne flag |fffd| false pour ne pas cr|fffd|er tableaux meme si demand|fffd|s
      Exit Function
    Else
        gb_CCA = True
    End If
    ' On force ici le r|fffd|sultat en attendant de pouvoir faire les tests en r|fffd|el !
    ' Temp MY
        
    g_tabCableCCA.sOrigine = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sStatus = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sDate = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sTime = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sIDLocalOperateur = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sNBTubesCable = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sNBFiberTubes = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sNBFibres = GetStrValeur(sMessageCableCCA)
    g_tabCableCCA.sNBFTestes = GetStrValeur(sMessageCableCCA)
    'Etat d'avancement
    frmOFI.optCableCCA.Value = True
            
    '=========================================
    ' On recherche les infos sur chaque fibre
    '=========================================
    '======================
    ' Fiber information
    '======================

    
    'NbFibres = CLng(g_tabCableCCA.sNBFTestes)
    
    ' On dimentionne le tableau identFibres au nombre de fibres total
    ReDim g_tabCableCCA.sIdentFibre(g_tabCableCCA.sNBFTestes)
    ' On dimentionne le tableau des mesures au nombre de fibres total
    ReDim g_tabMesureCCA(CLng(g_tabCableCCA.sNBFTestes))
    
    TemporisationCommunication
    
    For iFibre = 1 To CLng(g_tabCableCCA.sNBFTestes)
    
      'TemporisationCommunication
      g_tabCableCCA.sIdentFibre(iFibre).sNomFibre = GetStrValeur(sMessageCableCCA)
      lblFiber.Caption = iFibre & " / " & g_tabCableCCA.sNBFTestes
      
      bCodeRet = fctOFIEmission(cMsgOFICCAFiberHeader & """" & noCable & """,""" & g_tabCableCCA.sIdentFibre(iFibre).sNomFibre & """")
      
      If Not fctTimeOut(0) Then
        sMessageFibreCCA = g_sMessage
        
         For nIndex = 1 To cNBZoneFixeFibreCCA
          g_tabCableCCA.sIdentFibre(iFibre).sParamFibre(nIndex) = GetStrValeur(sMessageFibreCCA)
          'status,date,time,colour,local ofi type,local serial number, nb chann detect, power max, power min
        Next
      Else
        fctRequestCWDMResults = False
        Exit Function
      End If
                  
      '=========================================================
      ' On recupere les mesures de chaque fibre de chaque cable
      '=========================================================
      '======================
      ' Measurement information - CCA
      '======================
      
       bCodeRet = fctOFIEmission(cMsgOFICCATypeOfMeasure & """" & noCable & """,""" & g_tabCableCCA.sIdentFibre(iFibre).sNomFibre & """")
      If Not fctTimeOut(0) Then
        sMessageMesureCCA = g_sMessage
        
        g_tabMesureCCA(iFibre).sUsedPlan = GetStrValeur(sMessageMesureCCA)              ' On r|fffd|cup|fffd|re le plan utilis|fffd| dans la struct mais pas utilis|fffd| pour l'instant ensuite
        g_tabMesureCCA(iFibre).sGridName = GetStrValeur(sMessageMesureCCA)              ' On r|fffd|cup|fffd|re la grille
        g_tabMesureCCA(iFibre).sGridChannelNumber = GetStrValeur(sMessageMesureCCA)     ' Nombre de canaux total dans la grille
        g_tabMesureCCA(iFibre).sPowerComp = GetStrValeur(sMessageMesureCCA)             ' Puissance composite fibre
        iNbChannelDetectGrid = GetStrValeur(sMessageMesureCCA)                          ' Nombre de canaux d|fffd|tect|fffd|s - Inutilis|fffd|
        
        nbChannelGrid = CLng(g_tabMesureCCA(iFibre).sGridChannelNumber)
        
        ' On dimentionne le tableau au nombre de canaux total pour chaque fibre
        ReDim g_tabMesureCCA(iFibre).sMesureCWDM(nbChannelGrid)
        
        For ilgOnde = 1 To nbChannelGrid
            ' On parcourt toutes les longueurs d'ondes de la grille, m|fffd|me si pas de mesure associ|fffd|e
            
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sBandId = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sChannelId = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sGridLambda = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sMeasuredLambda = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sLambdaPower = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sLambdaDelta = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sPowerMargin = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sWavelengthThreshold = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sWavelengthSeuil = GetStrValeur(sMessageMesureCCA)
            g_tabMesureCCA(iFibre).sMesureCWDM(ilgOnde).sPowerThreshold = GetStrValeur(sMessageMesureCCA)
        Next ' Next channel to save
        
      Else
        fctRequestCWDMResults = False
        Exit Function
      End If
     'TemporisationCommunication
                    
    Next 'pour chaque fibre
    
    '
    ' -------------------------------------
    ' Etat d'avancement
    ' -------------------------------------
    '
    
    frmOFI.optFibreMesureCCA.Value = True
      
  Else
    fctRequestCWDMResults = False
    gb_CCA = False
    Exit Function
  End If

End Function

Function SuppMesNonEffectuees()

Dim l_UsedMeasure() As Long
Dim iFibre As Long
Dim iMesure As Long
Dim iLength As Long
Dim cptMesureUse As Long

    '
    ' une fois toutes les mesures rapatri|fffd|es on recherche les mesures qui n'ont pas |fffd|t|fffd| effectu|fffd|es
    '
    
    ReDim l_UsedMeasure(CLng(g_tabMesure(1).sNbTypeMesure))
    
    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
      For iMesure = 1 To g_tabMesure(iFibre).sNbTypeMesure
        For iLength = 1 To CLng(g_tabMesure(iFibre).sNbOnde)
          If Trim(g_tabMesure(iFibre).sOnde(iLength).sValeurMesure(iMesure)) <> "" Then
            l_UsedMeasure(iMesure) = l_UsedMeasure(iMesure) + 1
          End If
        Next
      Next
    Next

    cptMesureUse = 0
    For iMesure = 1 To g_tabMesure(1).sNbTypeMesure
      If l_UsedMeasure(iMesure) <> 0 Then
        cptMesureUse = cptMesureUse + 1
      End If
    Next
    '
    ' On d|fffd|tecte les mesures non effectu|fffd|es sur l'ensemble des fibres
    '
    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
      g_tabMesure(iFibre).sNbMesureReel = cptMesureUse
      For iMesure = 1 To g_tabMesure(iFibre).sNbTypeMesure
        If l_UsedMeasure(iMesure) = 0 Then
          g_tabMesure(iFibre).sTypeMesure(iMesure) = ""
        End If
      Next
    Next


End Function

'******************************************************************
' Fonction : InterrogationOFI2
'
' G|fffd|re le dialogue entre l'application et l'OFI2
'******************************************************************
Function InterrogationOFI2(noCable As String) As Boolean

Dim bCodeRet As Boolean

Dim iFibre As Long
Dim NbFibre As String
Dim nofibre As String
Dim ilgOnde As Long
Dim nIndex As Long

Dim sMessageCable As String
Dim sMessageFibre As String
Dim sMessageMesure As String
Dim smessageThreshold As String

Dim nbLongueurOnde As Long
Dim nbMesure As Long
Dim lblFiber As Control
Dim optTexte As Control
Dim nbLgOnde As Long
Dim iParam As Long
Dim sTemp As String
Dim bVerifConformite As Boolean

  
  Set lblFiber = frmOFI.lblFiberLTS
  Set optTexte = frmOFI.optFibreMesureLTS
  
  lblFiber.Caption = ""
'  g_NbOndeMax = 0
  bVerifConformite = True
  
  On Error GoTo err_Interrogation
  If Not ctlCommOFI.PortOpen Then
    ctlCommOFI.PortOpen = True
  End If
  
  InterrogationOFI2 = True
        
  frmOFI.optThreshold2.Visible = True
  frmOFI.optCableLTS2.Visible = True
  frmOFI.optFibreMesureLTS2.Visible = True
  
        
  '----------------------
  ' Threshold information
  '----------------------
  bCodeRet = fctOFIEmission(cMsgOFIThresold & """" & noCable & """")
  
  If Not fctTimeOut(0) Then
    smessageThreshold = g_sMessage
    
    For nIndex = 1 To cNbLgOndeMax
      sTemp = GetStrValeur(smessageThreshold)
      ' verif de conformite OFI 1 / OFI 2
'      If sTemp <> g_tabThreshold.sWaveLength(nIndex) Then
'        bVerifConformite = False
'      End If
    Next
    
    For nIndex = 1 To cNbLgOndeMax
      For iParam = 1 To 3 'Loss, Orl et Power
        Select Case iParam
          Case 1:
            sTemp = GetStrValeur(smessageThreshold)
            ' g_tabThreshold.sLoss(nIndex)
          Case 2:
            sTemp = GetStrValeur(smessageThreshold)
            ' g_tabThreshold.sORL(nIndex)
          Case 3:
            sTemp = GetStrValeur(smessageThreshold)
            ' g_tabThreshold.sAbsPower(nIndex)
        End Select
      Next
    Next
    sTemp = GetStrValeur(smessageThreshold)
    ' g_tabThreshold.sdelay
  Else
    InterrogationOFI2 = False
    Exit Function
  End If
  
  'Etat d'avancement
  frmOFI.optThreshold2.Value = True
  
  '----------------------
  ' Cable information
  '----------------------
  bCodeRet = fctOFIEmission(cMsgOFICableHeader & """" & noCable & """")
  
  If Not fctTimeOut(0) Then
    
    sMessageCable = g_sMessage
    
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sOrigine
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sStatus
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sDate
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sTime
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sIDLocalOperateur
    sTemp = GetStrValeur(sMessageCable)
        ' g_tabCable.sIDDistantOperator
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sNBTubesCable
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sNBFiberTubes
    sTemp = GetStrValeur(sMessageCable)
         ' g_tabCable.sNBFibres
    sTemp = GetStrValeur(sMessageCable)
    ' g_tabCable.sNBFTestes
        
    'Etat d'avancement
    frmOFI.optCableLTS2.Value = True
            
    '=========================================
    ' On recherche les infos sur chaque fibre
    '=========================================

    TemporisationCommunication
    For iFibre = 1 To CLng(g_tabCable.sNBFTestes)
          
      sTemp = GetStrValeur(sMessageCable)
      lblFiber.Caption = iFibre & " / " & g_tabCable.sNBFTestes
      
      bCodeRet = fctOFIEmission(cMsgOFIFiberHeader & """" & noCable & """,""" & g_tabCable.sIdentFibre(iFibre).sNomFibre & """")
      If Not fctTimeOut(0) Then
        sMessageFibre = g_sMessage
        For nIndex = 1 To cNBZoneFixeFibre
          sTemp = GetStrValeur(sMessageFibre)
        Next
      Else
        InterrogationOFI2 = False
        Exit Function
      End If
                  
      '=========================================================
      ' On recupere les mesures de chaque fibre de chaque cable
      '=========================================================
      
      bCodeRet = fctOFIEmission(cMsgOFITypeOfMeasure & """" & noCable & """,""" & g_tabCable.sIdentFibre(iFibre).sNomFibre & """")
      If Not fctTimeOut(0) Then
        sMessageMesure = g_sMessage

        sTemp = GetStrValeur(sMessageMesure)
        nbLongueurOnde = CLng(g_tabMesure(iFibre).sNbOnde)         'nombre de longueur d'onde
        
        For ilgOnde = 1 To nbLongueurOnde
          sTemp = GetStrValeur(sMessageMesure)
        Next
        
        sTemp = GetStrValeur(sMessageMesure)
        nbMesure = CLng(sTemp)                'nombre de mesures r|fffd|alis|fffd|es
        
        For nIndex = 1 To nbMesure
          g_tabMesure(iFibre).sTypeMesure(nIndex) = GetStrValeur(sMessageMesure)
        Next

        'les mesures arrivent par longueur d'onde et non pas par type de mesure
        For ilgOnde = 1 To nbLongueurOnde
          For nIndex = 1 To nbMesure
            sTemp = GetStrValeur(sMessageMesure)
            If (g_tabMesure(iFibre).sTypeMesure(nIndex) = cLOSSREFOE) Or _
               (g_tabMesure(iFibre).sTypeMesure(nIndex) = cLOSSREFEO) Or _
               (g_tabMesure(iFibre).sTypeMesure(nIndex) = cORLREFOE) Or _
               (g_tabMesure(iFibre).sTypeMesure(nIndex) = cORLREFEO) Then
              If sTemp <> "" Then
                g_tabMesure(iFibre).sOnde(ilgOnde).sValeurMesure(nIndex) = sTemp
              End If ' la reference est non vide
            End If ' il s'agit d'un reference
          Next
        Next
        
      Else
        InterrogationOFI2 = False
        Exit Function
      End If
                    
    Next 'pour chaque fibre
    
    '
    'Etat d'avancement
    '
    frmOFI.optFibreMesureLTS2.Value = True
  
  Else
    InterrogationOFI2 = False
    Exit Function
  End If
  
  Exit Function
  
err_Interrogation:
  MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(7), _
         vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
  InterrogationOFI2 = False
End Function

'******************************************************************
' Procedure : InitialisationOFI
'
' mise |fffd| z|fffd|ro des structures d'accueil
' ouverture du port
' interrogation de l'appareil au niveau des cables
'
'******************************************************************
Public Function InitialisationOFI() As Boolean
Dim bCodeRet As Boolean
Dim iCable As Long
Dim sMessageGlobalHeader As String
Dim noCable As String
Dim iColCable As Long
Dim bTimeOut As Boolean
Dim sTabDebitOFI(5) As String
Dim sTabDebit(5) As String
Dim nIndexDebit As Integer
Dim bBoolPremierTour As Boolean
Dim il As Long
      
    On Error Resume Next
    
    sTabDebit(1) = "9600"
    sTabDebit(2) = "19200"
    sTabDebit(3) = "38400"
    sTabDebit(4) = "57600"
    sTabDebit(5) = "115200"
    
    
    InitialisationOFI = True
    
    Set ctlCommOFI = frmMenu.MSComm
    il = g_tabMultiLangue.iLangue_courante
    
    If Not ctlCommOFI.PortOpen Then
        ctlCommOFI.CommPort = gCommPort
        ctlCommOFI.Settings = gBitSecond & "," & gParity & "," & gDataBit & "," & gStopBit
        ctlCommOFI.Handshaking = comRTS
        
        ctlCommOFI.PortOpen = True
    End If
    
    If (ctlCommOFI.PortOpen = True) Then
        bCodeRet = fctTimeOutVideRS232 'vidage de la ligne
    
        '==================================================================
        ' On demande |fffd| l'OFI de passer en mode remote
        '==================================================================
        ' "9600", "19200", "38400", "57600", "115200"
        
        ' ON FERA 2 TOUR CAR L'OFI PEUT SE REINITIALISER
        bBoolPremierTour = True
        nIndexDebit = 1
        Do
            gBitSecond = sTabDebit(nIndexDebit)
            ctlCommOFI.Settings = gBitSecond & "," & gParity & "," & gDataBit & "," & gStopBit
            
            ' DEUX FOIS CAR L'OFI AVAIT PEUT-ETRE DES CARACTERES BIZARRES EN ATTENTE
            bCodeRet = fctTimeOutVideRS232 'vidage de la ligne
            bCodeRet = fctOFIEmission(cMsgRemote)
            bCodeRet = fctTimeOutVideRS232 'vidage de la ligne
            
            bCodeRet = fctOFIEmission(cMsgIdentitication)
            bTimeOut = fctTimeOut(g_TimeOutConfig)
             
            If (bTimeOut = False) Then
                ' OK : ON VERIFIE LA REPONSE
                If (InStr(g_sMessage, "OFI") < 0) Then
                    bTimeOut = True
                End If
            End If
            
            If (bTimeOut = True) Then
                'PAS DE REPONSE : ON RECHERCHE L'OFI
                If (nIndexDebit <= 5) Then
                    nIndexDebit = nIndexDebit + 1
                Else
                    
                    If (bBoolPremierTour = True) Then
                        bBoolPremierTour = False
                        nIndexDebit = 1
                    Else
                        InitialisationOFI = False
                    End If
                    
                    
                End If
            End If
        Loop While ((bTimeOut = True) And (InitialisationOFI = True))
        
        ' OK : ON PROGRAMME LA VITESSE MAXIMUM
        If (InitialisationOFI = True) Then
            ' ON PURGE LA FILE D'ATTENTE STATUS = 0
            bCodeRet = fctOFIEmission(cMsgStatus)
            bTimeOut = fctTimeOut(g_TimeOutConfig)
            
            ' ON VERIFIE D'ABORD QU'IL COMPREND L'ORDRE
            bCodeRet = fctOFIEmission(cMsgBaudRate + cMsgOFIEnteteBaudRate + gBitSecond)
            ' STATUS = 0
            bCodeRet = fctOFIEmission(cMsgStatus)
            bTimeOut = fctTimeOut(g_TimeOutConfig)
            
            If (Val(g_sMessage) = 0) Then
                ' IL COMPREND L'ORDRE DE CHANGEMENT DE DEBIT
                nIndexDebit = 5
                ' D'ABORD L'OFI
                bCodeRet = fctOFIEmission(cMsgBaudRate + cMsgOFIEnteteBaudRate + sTabDebit(nIndexDebit))
                bTimeOut = fctTimeOut(g_TimeOutConfig)
                
                ' ENSUITE LE PORT COMM
                ctlCommOFI.Settings = sTabDebit(nIndexDebit) & "," & gParity & "," & gDataBit & "," & gStopBit
                bCodeRet = fctOFIEmission(cMsgIdentitication)
                bTimeOut = fctTimeOut(g_TimeOutConfig)

                If (bTimeOut = False) Then
                    ' OK : ON VERIFIE LA REPONSE
                    If (InStr(g_sMessage, "OFI") >= 0) Then
                        ' OK : ON VALIDE LE DEBIT
                        gBitSecond = sTabDebit(nIndexDebit)
                    End If
                End If
            
            End If
        End If
        '==================================================================
        ' on recherche les infos sur les "N" cables disponibles dans l'OFI
        '==================================================================
        If (InitialisationOFI = True) Then
            ctlCommOFI.Settings = gBitSecond & "," & gParity & "," & gDataBit & "," & gStopBit
            
            ' DEUX FOIS CAR L'OFI AVAIT PEUT-ETRE DES CARACTERES BIZARRES EN ATTENTE
            bCodeRet = fctTimeOutVideRS232 'vidage de la ligne
            bCodeRet = fctOFIEmission(cMsgRemote)
            bCodeRet = fctTimeOutVideRS232 'vidage de la ligne
            bCodeRet = fctOFIEmission(cMsgIdentitication)
            bTimeOut = fctTimeOut(g_TimeOutConfig)
            If (bTimeOut = True) Then
                bCodeRet = fctOFIEmission(cMsgIdentitication)
                bTimeOut = fctTimeOut(g_TimeOutConfig)
            End If
            
            
            Select Case il
                Case 1: il = 1
                  bCodeRet = fctOFIEmission(cMsgLangue & cMsgenglish)
                Case 2: il = 2
                   bCodeRet = fctOFIEmission(cMsgLangue & cMsgfrench)
                Case 3: il = 3
                   bCodeRet = fctOFIEmission(cMsgLangue & cMsggerman)
                Case 4: il = 4
                   bCodeRet = fctOFIEmission(cMsgLangue & cMsgspanish)
            End Select
            
           
            bCodeRet = fctOFIEmission(cMsgOFIGlobalHeader)
            
            If Not fctTimeOut(0) Then
                'on decoupe la reponse
                sMessageGlobalHeader = g_sMessage
                g_sTrameNBCable = GetStrValeur(sMessageGlobalHeader)                  'nb cables
                
                ReDim g_tabIdentCable(CLng(g_sTrameNBCable))
                For iCable = 1 To CLng(g_sTrameNBCable)
                    g_tabIdentCable(iCable) = GetStrValeur(sMessageGlobalHeader)        'cable id 1 |fffd| nb cables
                Next
            Else
                InitialisationOFI = False
            End If
        End If
        
        If (InitialisationOFI = False) Then
            MsgBox g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(3), _
            vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
        End If
    Else
        InitialisationOFI = False
        sMessageGlobalHeader = g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(9)
        
        sMessageGlobalHeader = sMessageGlobalHeader & " (COM" & gCommPort & ")"
        MsgBox sMessageGlobalHeader, vbCritical + vbOKOnly, g_tabMessageErreur(g_tabMultiLangue.iLangue_courante).libelle(4)
    End If

End Function









' InQuest injected base64 decoded content
' x*'~(.
' *'8R
' Y^"w
' WBX3
' xG+j
' jabn
' jabn
' jabn
' jabn
' jabn
' jabn
' jabn
' jabn
' jabn
' jabn

INQUEST-PP=macro
