Attribute VB_Name = "FindleyRecorded"
Sub InstallAddressCopy()
'
' InstallAddressCopy Macro
' Macro recorded 2/27/2004 by Pete Findley
' Modified 3/1/2004 by Chris Resch

    'Disable screen updates for better appearance
    Application.ScreenUpdating = False
    
    'Copy Customer #/Name/Addr1/Addr2
    Worksheets("Input Info").Range("B12:B15").Copy
    Worksheets("Install Form").Range("C8:C11").PasteSpecial Paste:=xlPasteValues
    
    'Copy City
    Worksheets("Input Info").Range("B17:B17").Copy
    Worksheets("Install Form").Range("C12:C12").PasteSpecial Paste:=xlPasteValues

    'Copy State
    Worksheets("Input Info").Range("B18:B18").Copy
    Worksheets("Install Form").Range("F12:F12").PasteSpecial Paste:=xlPasteValues

    'Copy Zip
    Worksheets("Input Info").Range("B19:B19").Copy
    Worksheets("Install Form").Range("I12:I12").PasteSpecial Paste:=xlPasteValues

    'Copy Contact Name
    Worksheets("Input Info").Range("B27:B27").Copy
    Worksheets("Install Form").Range("C13:C13").PasteSpecial Paste:=xlPasteValues

    'Copy Contact Email
    Worksheets("Input Info").Range("B28:B28").Copy
    Worksheets("Install Form").Range("C14:C14").PasteSpecial Paste:=xlPasteValues

    'Copy Phone
    Worksheets("Input Info").Range("B20:B20").Copy
    Worksheets("Install Form").Range("F13:F13").PasteSpecial Paste:=xlPasteValues

    'Copy Fax
    Worksheets("Input Info").Range("B21:B21").Copy
    Worksheets("Install Form").Range("I13:I13").PasteSpecial Paste:=xlPasteValues

    'Re-enable screen updates for better appearance
    Application.ScreenUpdating = True
    
    'Empty clipboard to avoid prompt when closing workbook
    Application.CutCopyMode = False

End Sub


Attribute VB_Name = "GrailModule"
Option Explicit
Dim gblTitle As String
Dim gblResponse As Variant
Dim gblCompatibilityLevel As Integer
Dim gblUpdateServer As String


Private Sub UnprotectSheet(Optional NoScreenUpdates As Boolean = True)
'   Author:     Chris Resch
'   Modified:   1-Nov-2003
'   Purpose:    Unprotects the active worksheet so macros can be executed; written as a separate sub
'               to minimize the number of places the protection password is stored
    On Error Resume Next
    If NoScreenUpdates Then Application.ScreenUpdating = False   'Turn screen refresh off
'    ActiveSheet.Unprotect Password:="grail0302isg"     'Unprotect sheet so we can modify
'    ActiveSheet.Unprotect Password:="#sgspree03"     'Unprotect sheet so we can modify
    ActiveSheet.Unprotect Password:="#sgspree03;"     'Unprotect sheet so we can modify
End Sub

Private Sub ProtectSheet(Optional ScreenUpdates As Boolean = True)
'   Author:     Chris Resch
'   Modified:   1-Nov-2003
'   Purpose:    Protects the active worksheet after macros have beeen executed; written as a separate sub
'               to minimize the number of places the protection password is stored
    On Error Resume Next
    ActiveSheet.Protect Password:="#sgspree03;", DrawingObjects:=True, Contents:=True, Scenarios:=True 'Protect sheet
    If ScreenUpdates Then Application.ScreenUpdating = True   'Turn screen refresh back on
End Sub

Sub curbydevice()
Attribute curbydevice.VB_Description = "Macro recorded 3/27/2002 by Steve Hymer"
Attribute curbydevice.VB_ProcData.VB_Invoke_Func = " \n14"
' This sub refreshes the pivot table (called from activate event)
' Updated   6-Nov-2003   Chris Resch

    On Error Resume Next
    
    Call UnprotectSheet
    ActiveSheet.PivotTables("pt_DeviceType").PivotCache.Refresh
    ActiveSheet.PivotTables("pt_SumOfTotVol").PivotCache.Refresh
    ActiveSheet.PivotTables("pt_SumOfTotCosts").PivotCache.Refresh
    Call ProtectSheet
    
End Sub

Sub curbydept()
Attribute curbydept.VB_Description = "Macro recorded 3/27/2002 by Steve Hymer"
Attribute curbydept.VB_ProcData.VB_Invoke_Func = " \n14"
' This sub refreshes the pivot table (called from activate event)
' Updated   6-Nov-2003   Chris Resch

    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("pt_DeviceByDept").PivotCache.Refresh
    Call ProtectSheet
End Sub

Sub curinfo()
Attribute curinfo.VB_Description = "Macro recorded 3/27/2002 by Steve Hymer"
Attribute curinfo.VB_ProcData.VB_Invoke_Func = " \n14"
' This sub refreshes the pivot table (called from activate event)
' Updated   6-Nov-2003   Chris Resch

    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("pt_CurInfo").PivotCache.Refresh
    Call ProtectSheet
End Sub

Sub solbydevice()
Attribute solbydevice.VB_Description = "Macro recorded 3/27/2002 by Steve Hymer"
Attribute solbydevice.VB_ProcData.VB_Invoke_Func = " \n14"
' This sub refreshes the pivot table (called from activate event)
' Updated   6-Nov-2003   Chris Resch

    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("pt_SolByDevice").PivotCache.Refresh
    ActiveSheet.PivotTables("pt_SumOfSolVol").PivotCache.Refresh
    ActiveSheet.PivotTables("pt_SumOfSolTot").PivotCache.Refresh
    Call ProtectSheet
End Sub

Sub solcost()
' This sub refreshes the pivot table (called from activate event)
' Updated   29-Jun-2010   Chris Resch

    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("PivotTable3").PivotCache.Refresh
    ActiveSheet.PivotTables("PivotTable4").PivotCache.Refresh
    Call ProtectSheet
End Sub

Sub solbydept()
' This sub refreshes the pivot table (called from activate event)
' Updated   29-Jun-2010   Chris Resch

    On Error Resume Next
    Call UnprotectSheet
    'MsgBox "pre"
    ActiveSheet.PivotTables("PivotTable8").PivotCache.Refresh
    'MsgBox "Post"
    Call ProtectSheet
End Sub
Sub pivotrefresh()
'
' pivotrefresh Macro
' Macro recorded 2/27/2002 by Steve Hymer
'
    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("PivotTable1").PivotSelect "'Canon iR2050 c/p'", _
        xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable1").RefreshTable
    Call ProtectSheet
End Sub

Sub bydevice()
'
' bydevice Macro
' Macro recorded 2/27/2002 by Steve Hymer
'
    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("PivotTable3").PivotSelect "'Bk Laser Printer'", _
        xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable3").RefreshTable
    Call ProtectSheet
End Sub

Sub deviceinfo()
'
' deviceinfo Macro
' Macro recorded 2/27/2002 by Steve Hymer
'
    On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("PivotTable1").PivotSelect "'Fax Machine'", _
        xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable1").RefreshTable
    Call ProtectSheet
End Sub

Sub HideRows()
' HideRows Macro: Unprotect worksheet, hide the appropriate rows, then protect the sheet again
' Macro recorded 2/28/2002 by Steve Hymer
' Modified 3/27/2002 by Chris Resch
    
   On Error Resume Next                                'Automatically continue if we encounter any errors
    Call UnprotectSheet
    Range("B8:B307").Select
    'Select all cells that contain a blank value
    Selection.SpecialCells(xlCellTypeBlanks).EntireRow.Hidden = True
    Range("B8:B8").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
End Sub

Sub HideRowsAddendumA()
' HideRowsOtherSheet Macro: Unprotect worksheet, hide the appropriate rows, then protect the sheet again
' Called for all tabs except the main tab -- can't use the same macro since the cells are not blank -- they
' contain a formula referencing the main tab
' Created 3/27/2002 by Chris Resch
    
   On Error Resume Next                                'Automatically continue if we encounter any errors
    Call UnprotectSheet
    
    Range("B6:B305").Select
    'Select all cells that contain a number -- cells in use will have text in them instead of a number
    Selection.SpecialCells(xlCellTypeFormulas, xlNumbers).EntireRow.Hidden = True
    
    Range("B308:B322").Select
    'Select all cells that contain a blank value
    Selection.SpecialCells(xlCellTypeBlanks).EntireRow.Hidden = True
    
    Range("B6:B6").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
End Sub

Sub UnhideRowsAddendumA()
' UnhideRows Macro: Unprotect worksheet, unhide the appropriate rows, then protect the sheet again
' Macro recorded 2/28/2002 by Steve Hymer
' Modified 3/27/2002 by Chris Resch'
    
   On Error Resume Next                                'Automatically continue if we encounter any errors
    Call UnprotectSheet
    Range("B6:B322").Select
    Selection.EntireRow.Hidden = False
    Range("B6:B6").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
End Sub

Sub bydept()

' bydept Macro
' Macro recorded 2/27/2002 by Steve Hymer

   On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("PivotTable1").PivotSelect _
        "Sales Quantity 'Digital Bk Copier'", xlDataOnly
    ActiveSheet.PivotTables("PivotTable1").RefreshTable
    Call ProtectSheet
End Sub

Sub ExportQuotationModelVolumeCostComparison()
'   Author:     Chris Resch
'   Modified:   07-02-2007
'   Purpose:    Since the user cannot copy objects from a protected sheet, this macro copies the
'               graphs and pivot table on the page to a new word document for the user
'               Updated to copy picture of object, instead of embed the object itself -- MUCH FASTER!

   On Error Resume Next
    Dim oWord As New Word.Application                       'Word application object
    Dim oDoc As Document
        
    'Give user a chance to back out if they accidentally clicked on the button
    gblResponse = MsgBox("Exporting this information to Word may take a minute.  Continue?", vbYesNo + vbQuestion, gblTitle)
    If gblResponse = vbNo Then GoTo Cancel
            
    'Disable event processing so we don't unintentionally trigger other events here
    Application.EnableEvents = False
    Application.StatusBar = "Exporting to Word document...please wait"
    
    Call UnprotectSheet
    Set oWord = CreateObject("Word.Application.10")
    Set oDoc = oWord.Documents.Add
    oWord.Visible = True
        
    'Model Volume Cost Comparison Graph
    ActiveSheet.ChartObjects("Chart 164").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    'oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
 
    Call ProtectSheet
    
    Set oDoc = Nothing
    Set oWord = Nothing
    
    Range("A13:A13").Select          'Reselect single cell for better user appearance

    'Re-enable event processing
    Application.EnableEvents = True
    Application.StatusBar = False

Cancel:
End Sub
Sub ExportCurByDevice()
'   Author:     Chris Resch
'   Modified:   11-26-2003
'   Purpose:    Since the user cannot copy objects from a protected sheet, this macro copies the
'               graphs and pivot table on the page to a new word document for the user
'               Updated to copy picture of object, instead of embed the object itself -- MUCH FASTER!

    On Error Resume Next
    Dim oWord As New Word.Application                       'Word application object
    Dim oDoc As Document
        
    'Give user a chance to back out if they accidentally clicked on the button
    gblResponse = MsgBox("Exporting this information to Word may take a minute.  Continue?", vbYesNo + vbQuestion, gblTitle)
    If gblResponse = vbNo Then GoTo Cancel
            
    'Disable event processing so we don't unintentionally trigger other events here
    Application.EnableEvents = False
    Application.StatusBar = "Exporting to Word document...please wait"
    
    Call UnprotectSheet
    Set oWord = CreateObject("Word.Application.10")
    Set oDoc = oWord.Documents.Add
    oWord.Visible = True
            
    'Table
    ActiveSheet.Range("A1:D19").Select
    Selection.Copy
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
        
    'Pivot Table
'    ActiveSheet.PivotTables("pt_DeviceType").PivotSelect "", xlDataAndLabel
'    Selection.Copy
'    oDoc.Words.Last.Select
'    oWord.Selection.Paste
'    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf

    'Current Document Volume/Month Graph
    ActiveSheet.ChartObjects("Chart 6").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
 
    'Current Document Costs/Month Graph
    ActiveSheet.ChartObjects("Chart 7").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
    
    'Current Monthly Document Cost & Volume Analysis Graph
    ActiveSheet.ChartObjects("Chart 8").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste

    'Current Monthly Costs Graph
    ActiveSheet.ChartObjects("Chart9").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    
    'Current Cost Per Document Graph
'    ActiveSheet.ChartObjects("Chart 16").Chart.CopyPicture _
'        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
'    oDoc.Words.Last.Select
'    oWord.Selection.Paste
'    Call ProtectSheet
    
    Set oDoc = Nothing
    Set oWord = Nothing
    
    Range("E12:E12").Select          'Reselect single cell for better user appearance

    'Re-enable event processing
    Application.EnableEvents = True
    Application.StatusBar = False

Cancel:
End Sub

Sub ExportSolByDevice()
'   Author:     Chris Resch
'   Modified:   7-12-2002
'   Purpose:    Since the user cannot copy objects from a protected sheet, this macro copies the
'               graphs and pivot table on the page to a new word document for the user

   On Error Resume Next
    Dim oWord As New Word.Application                       'Word application object
    Dim oDoc As Document
        
    'Give user a chance to back out if they accidentally clicked on the button
    gblResponse = MsgBox("Exporting this information to Word may take a minute.  Continue?", vbYesNo + vbQuestion, gblTitle)
    If gblResponse = vbNo Then GoTo Cancel
          
    'Disable event processing so we don't unintentionally trigger other events here
    Application.EnableEvents = False
    Application.StatusBar = "Exporting to Word document...please wait"
          
    Call UnprotectSheet
    Set oWord = CreateObject("Word.Application.10")
    Set oDoc = oWord.Documents.Add
    oWord.Visible = True
        
    'Table
    ActiveSheet.Range("A1:G19").Select
    Selection.Copy
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
        

    'Pivot Table
'    ActiveSheet.PivotTables("pt_SolByDevice").PivotSelect "", xlDataAndLabel
'    Selection.Copy
'    oDoc.Words.Last.Select
'    oWord.Selection.Paste
'    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
            
    'Pivot Table
'    ActiveSheet.PivotTables("pt_SumofSolVol").PivotSelect "", xlDataAndLabel
'    Selection.Copy
'    oDoc.Words.Last.Select
'    oWord.Selection.Paste
'    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
            
    'Pivot Table
'    ActiveSheet.PivotTables("pt_SumOfSolTot").PivotSelect "", xlDataAndLabel
'    Selection.Copy
'    oDoc.Words.Last.Select
'    oWord.Selection.Paste
'    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
            
    'Solution Document Volume/Month Graph
    ActiveSheet.ChartObjects("Chart 19").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
            
    'Solution-Current Document Volume/Month Comparison Graph
    ActiveSheet.ChartObjects("Chart 5").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
    
    'Solution Document Costs/Month Graph
    ActiveSheet.ChartObjects("Chart 6").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
    
    'Solution-Current Document Costs/Month Comparison Graph
    ActiveSheet.ChartObjects("Chart 20").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
    
    'Total Monthly Document Costs Comparison Graph
    ActiveSheet.ChartObjects("Chart 8").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
    
    'Total Monthly Costs Comparison Graph
    ActiveSheet.ChartObjects("Chart 9").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf

    'Cost per Copy Comparison Graph
    ActiveSheet.ChartObjects("Chart 17").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf
    
    'Total Cost per Copy Comparison Graph
    ActiveSheet.ChartObjects("Chart 18").Chart.CopyPicture _
        Appearance:=xlScreen, Size:=xlScreen, Format:=xlPicture
    oDoc.Words.Last.Select
    oWord.Selection.Paste
    oWord.Selection.InsertAfter vbCrLf & vbCrLf & vbCrLf & vbCrLf

    Call ProtectSheet
    
    Set oDoc = Nothing
    Set oWord = Nothing

    Range("D12:D12").Select          'Reselect single cell for better user appearance
       
    'Re-enable event processing
    Application.EnableEvents = True
    Application.StatusBar = False

Cancel:
End Sub
Sub curbydeptsum()
'
' curbydeptsum Macro
' Macro recorded 4/19/2002 by Steve Hymer
   On Error Resume Next
    Call UnprotectSheet
    ActiveSheet.PivotTables("PivotTable2").PivotSelect "hr", xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable2").RefreshTable
    ActiveSheet.PivotTables("PivotTable2").PivotSelect "hr", xlDataAndLabel
    Call ProtectSheet
End Sub

Sub SolDataUnlockCells()
'   Author:     Chris Resch
'   Modified:   5-3-2004
'   Purpose:    If the user selects OVERRIDE as the value in any row in the column,
'               this macro unprotects the corresponding cells to the right to allow
'               the user to override the solution data
'   Modification: Add check for column 11 (K) so ensure that a config selection has NOT been made
'                 (can't override info on a new config)
    Dim x As Integer, y As Integer, startcol As Integer
    
   On Error Resume Next
    Call UnprotectSheet
    startcol = 78     'Set column # for the column, for easy reference (BZ=78)
    'Loop through all the remains and check for the Override trigger
    For x = 8 To 307
        'Stop
        If ActiveSheet.Cells(x, startcol).Value = "Override" And ActiveSheet.Cells(x, 11) = "" Then
            'Now loop through the relevant range of cells across in the row and unlock
            For y = startcol + 1 To startcol + 10
                ActiveSheet.Cells(x, y).Locked = False
            Next y
        End If
    Next x
    Call ProtectSheet
End Sub

Sub SolDataLockAllCells()
'   Author:     Chris Resch
'   Modified:   5-3-2004
'   Purpose:    This macro re-protects all cells in the range to avoid accidental changes
    Dim x As Integer, y As Integer, startcol As Integer, formularow As Integer
    
   On Error Resume Next
    Call UnprotectSheet
    startcol = 78       'Set column # for the column, for easy reference (BZ=78)
    formularow = 331    'This row contains the master formulas from which we copy to restore our cells
    'Loop through all cells in the range and force Locked property
    For x = 8 To 307
        'If the first cell is still protected, no need to process remaining cells in the row
        If ActiveSheet.Cells(x, startcol + 1).Locked = False Then
            For y = startcol + 1 To startcol + 10
                ActiveSheet.Cells(x, y).Locked = True   'Lock cell
                'If user had overridden previously, but now selected NOT to override, we
                'need to restore the cell formulas to guarantee cell integrity
                If ActiveSheet.Cells(x, startcol).Value <> "Override" Then
                    ActiveSheet.Cells(formularow, y).Copy Destination:=ActiveSheet.Cells(x, y)
                End If
            Next y
        End If
    Next x
    Call ProtectSheet
End Sub

Sub HideRowsSolSum()
' HideRowsSolData Macro: Unprotect worksheet, hide the appropriate rows, then protect the sheet again
' Called for Solution Data tab -- can't use the same macro since the range is different
' Created 3/27/2002 by Chris Resch
    
   On Error Resume Next                                'Automatically continue if we encounter any errors
    Call UnprotectSheet
    
    Range("B24:B323").Select
    'Select all cells that contain a number -- cells in use will have text in them instead of a number
    Selection.SpecialCells(xlCellTypeFormulas, xlNumbers).EntireRow.Hidden = True
    
'    Range("B308:B322").Select
'    'Select all cells that contain a blank value
'    Selection.SpecialCells(xlCellTypeBlanks).EntireRow.Hidden = True
    
    Range("B24:B24").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
End Sub

Sub UnhideRowsSolSum()
' UnhideRows Macro: Unprotect worksheet, unhide the appropriate rows, then protect the sheet again
' Macro recorded 2/28/2002 by Steve Hymer
' Modified 3/27/2002 by Chris Resch'
    
   On Error Resume Next                                'Automatically continue if we encounter any errors
    Call UnprotectSheet
    Range("B24:B323").Select
    Selection.EntireRow.Hidden = False
    Range("B24:B24").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
End Sub

Sub Copy_Ship_To_to_Bill_To()
'
' Copy_Ship_To_to_Bill_To Macro
' Updated: 17-Feb-2004  To adjust for changes in the Input Page field locations

    Application.ScreenUpdating = False
    
    Range("B12:B28").Select
    Selection.Copy
    Range("E12").Select
    ActiveSheet.Paste
    Range("E13").Select
        
    'Empty clipboard to avoid prompt when closing workbook
    Application.CutCopyMode = False
    
    'Position focus on AP contact for ease of use
    Range("E27:E27").Select
    
    Application.ScreenUpdating = True
    
End Sub

Sub RefreshOrderFormRows(SheetToUpdate As String)
' RefreshOrderFormLines: Unprotect worksheet, unhide all rows, hide all blank rows, then protect the sheet again
' Created 10/26/2003 by Chris Resch'
    
    On Error Resume Next                                'Automatically continue if we encounter any errors
    
    Dim CurSheet As String, bVisible As Boolean
        
    Application.StatusBar = "Refreshing display...please wait"
    
    'Disable screen updates
    Application.ScreenUpdating = False
    
    'Save current active sheet so we can restore it when we're finished
    CurSheet = ActiveSheet.Name
    
    'Store current state of Order Form sheet
    bVisible = Sheets(SheetToUpdate).Visible
    
    'Activate the Order Form sheet
    If Not bVisible Then Sheets(SheetToUpdate).Visible = True
    Sheets(SheetToUpdate).Select
    Call UnprotectSheet(False)
    
    'First unhide all rows
    Range("H20:H2020").Select
    Selection.EntireRow.Hidden = False
    
    'Now hide all Zero quantity rows
    'Select all cells that contain text -- cells with valid quantities will be numeric
    Selection.SpecialCells(xlCellTypeFormulas, xlTextValues).EntireRow.Hidden = True
    
    Range("E17:E17").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet(False)
    
    'Restore Order Form status
    Sheets(SheetToUpdate).Visible = bVisible
    
    'Reactivate saved sheet
    Sheets(CurSheet).Select
    
    'Reenable screen updates
    Application.ScreenUpdating = True
    Application.StatusBar = False
End Sub

Sub RefreshCommissionFormRows()
' RefreshCommissionFormRows: Unprotect worksheet, unhide all rows, hide all blank rows, then protect the sheet again
' Created 12/5/2004 by Chris Resch'
    
    On Error Resume Next                                'Automatically continue if we encounter any errors
    
    Dim CurSheet As String, bVisible As Boolean
        
    Application.StatusBar = "Refreshing display...please wait"
    
    'Disable screen updates
    Application.ScreenUpdating = False
    
    'Save current active sheet so we can restore it when we're finished
    CurSheet = ActiveSheet.Name
    
    'Store current state of Order Form sheet
    bVisible = Sheets("Commission Form").Visible
    
    'Activate the Order Form sheet
    If Not bVisible Then Sheets("Commission Form").Visible = True
    Sheets("Commission Form").Select
    Call UnprotectSheet(False)
    
    'First unhide all rows
    Range("A8:A307").Select
    Selection.EntireRow.Hidden = False

    'Now hide appropriate rows; Select all cells that contain a number -- cells in use will have text in them instead of a number
    Selection.SpecialCells(xlCellTypeFormulas, xlNumbers).EntireRow.Hidden = True

    Range("A8:A8").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet(False)
    
    'Restore Order Form status
    Sheets("Commission Form").Visible = bVisible
    
    'Reactivate saved sheet
    Sheets(CurSheet).Select
    
    'Reenable screen updates
    Application.ScreenUpdating = True
    Application.StatusBar = False
End Sub

Sub UpdateMasterDataSheets()
' This sub updates each data sheet in the current workbook sequentially from a
' master data source located in another workbook
' Updated 1/20/2004 by Chris Resch - move location of master data sheet
' Updated 10/29/2003 by Chris Resch - add date checking logic
' Created 10/26/2003 by Chris Resch
    
    Dim wkSheet, SrcBook, DstBook, Msg As String
    Dim fs As Object
    
    On Error Resume Next
    
    'Give user a chance to back out if they accidentally clicked on the button
    gblResponse = MsgBox("Updating the pricing may take a few minutes.  Continue?", vbYesNo + vbQuestion, gblTitle)
    If gblResponse = vbNo Then GoTo Cancel
   
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    'For now, hardcode source name and path for data source
    SrcBook = "D@Data-v" & gblCompatibilityLevel & ".xlsx"

    'DstBook will always be the current workbook
    DstBook = ActiveWorkbook.Name

    'Build update file location
    'If fs.FileExists("\\dcnas01\d@$\D@-OW\" & SrcBook) Then
    If fs.FileExists(gblUpdateServer & SrcBook) Then
        
        'Disable event processing until finished
        Application.EnableEvents = False
        'Turn off screen updates while we proceed
        Application.ScreenUpdating = False
        'Disable automatic calculations until after we finish the copy
        Application.Calculation = xlManual
        
        Application.StatusBar = "Accessing updated data...please wait"

        Workbooks.Open Filename:= _
            gblUpdateServer & SrcBook, UpdateLinks:=0, ReadOnly:=True
'            "\\dcnas01\d@$\D@-OW\" & SrcBook, UpdateLinks:=0, ReadOnly:=True

        'Verify the pricing version is compatible with the version of this grail
        'Pricing compatibility level is stored in cell E3 of the Validation Tables sheet
        Windows(SrcBook).Activate
        Sheets("Validation Tables").Select
        'The following line is in for debug use only (when req'd)
        'MsgBox "Current Grail Compatibility: " & gblCompatibilityLevel & Chr$(13) & "Price sheet level:" & ActiveSheet.Range("e3").Value2
        
        If ActiveSheet.Range("e3").Value2 = gblCompatibilityLevel Then
          'The grail data sheet compatibility version matches, so continue

          'Update data sheets
          Application.StatusBar = "Updating Finance Rates...please wait"
          Call UpdateMasterDataSheets_Refresh("Finance Rates", SrcBook, DstBook)
          Application.StatusBar = "Updating Service Pricing...please wait"
          Call UpdateMasterDataSheets_Refresh("Service Pricing", SrcBook, DstBook)
          Application.StatusBar = "Updating Model-Item...please wait"
          Call UpdateMasterDataSheets_Refresh("Model-Item Table", SrcBook, DstBook)
          Application.StatusBar = "Updating Item List...please wait"
          Call UpdateMasterDataSheets_Refresh("Item List", SrcBook, DstBook)
          Application.StatusBar = "Updating Sales Tax Codes...please wait"
          Call UpdateMasterDataSheets_Refresh("Sales Tax Codes", SrcBook, DstBook)
          Application.StatusBar = "Updating City Tax Codes...please wait"
          Call UpdateMasterDataSheets_Refresh("City Tax Codes", SrcBook, DstBook)
          Application.StatusBar = "Updating County Codes...please wait"
          Call UpdateMasterDataSheets_Refresh("County Codes", SrcBook, DstBook)
          Application.StatusBar = "Updating LaserCare Service Pricing...please wait"
          Call UpdateMasterDataSheets_Refresh("LaserCare Service Pricing", SrcBook, DstBook)
          Application.StatusBar = "Updating MFP Service Pricing...please wait"
          Call UpdateMasterDataSheets_Refresh("MFP Service Pricing", SrcBook, DstBook)
          Application.StatusBar = "Updating KPC Service Pricing...please wait"
          Call UpdateMasterDataSheets_Refresh("KPC Service Pricing", SrcBook, DstBook)
        
          Application.StatusBar = "Updating Validation Tables...please wait"
          Call UpdateMasterDataSheets_Refresh("Validation Tables", SrcBook, DstBook)
         
          'CRITICAL: We must reset the expiration formula in Cell C3 on the Validation Tables sheet,
          'or the current value (copied as a value) will always remain
          Windows(DstBook).Activate
          Sheets("Validation Tables").Visible = True
          Sheets("Validation Tables").Select
          Call UnprotectSheet(False)
          'Set formula for C3 = IF(TODAY()>B2, True, False)
          ActiveSheet.Cells(3, 3).Formula = "=IF(TODAY()>B2, True, False)"
          Call ProtectSheet(False)
          Sheets("Validation Tables").Visible = False
        
          'Empty clipboard to avoid prompt when closing workbook
          Application.CutCopyMode = False
        
        Else
          'Give user a chance to back out if they accidentally clicked on the button
          Msg = "The pricing file you are trying to use is not compatible with this version of the DOC@nalysis.  This version requires a version "
          Msg = Msg & gblCompatibilityLevel & " pricing file." & Chr$(13) & Chr$(13)
          Msg = Msg & "The update has been aborted to prevent corruption of this Grail."
          gblResponse = MsgBox(Msg, vbOK + vbCritical, gblTitle)
        End If
        
        'Close new data source workbook
        Workbooks(SrcBook).Close SaveChanges:=False
                
        'Destroy file handle
        Set fs = Nothing
        
        'Restore sheet selection
        Sheets("Input Info").Select
        
        'Restore event processing
        Application.EnableEvents = True
        'Restore screen updates
        Application.ScreenUpdating = False
        'Restore automatic calculations
        Application.Calculation = xlAutomatic
        
    Else
        'Update file not found; alert user and exit
        Msg = "Sorry....but the new information data sheet is not accessible at this " & _
              "time." & Chr$(13) & Chr$(13)
        Msg = Msg & "You must be connected to the OfficeWare network to be able to run this update."
        gblResponse = MsgBox(Msg, vbCritical + vbOKOnly, gblTitle)
    End If
    
    'Restore status bar to Excel control
    Application.StatusBar = False

Cancel:

End Sub


Sub UpdateMasterDataSheets_Refresh(wkSheet As String, ByVal SrcBook As String, ByVal DstBook As String)
'This sub copies the entire wkSheet from the SrcBook to replace the data in the DstBook
'This has been broken out into a separate routine so we can call multiple times for
'different wkSheets
'This sub is also called by the DevUtils to copy the Config sheets during development
' Created 10/26/2003 by Chris Resch

    Dim UpdDate As Date, ExpDate As Date

        'Verify we can access the new sheet before erasing the old data
        Windows(SrcBook).Activate
        Sheets(wkSheet).Select
               
        'Clear existing sheet in Grail
        Windows(DstBook).Activate
        Sheets(wkSheet).Visible = True
        Sheets(wkSheet).Select
        Call UnprotectSheet(False)
        
        Cells.Select
        Selection.Clear
        'Copy data from new sheet to clipboard
        Windows(SrcBook).Activate
        Sheets(wkSheet).Select
        Cells.Select
        Selection.Copy
        'Paste new data
        Windows(DstBook).Activate
        Sheets(wkSheet).Select
        Range("A1:A1").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        'ActiveSheet.Paste
        'Reselect single cell for better UI appearance, protect sheet and then hide
        Range("A1:A1").Select
        Call ProtectSheet(False)
        Sheets(wkSheet).Visible = False

End Sub

Sub SetConfigSheetDisplayMode(ByVal Sh As Object)
'This sub is called from the Worksheet_Change sub on the SolData and Quotations sheets
'whenever a change in the Config choices is made
'We use it to show or hide the appropriate config sheets based on whether or not
'the particular configuration sheet is being used in the proposed solution

    Dim Show As Boolean
    Dim ConfigSheet, ConfigKey, d, i, c          'Create some variables
    
    Set d = CreateObject("Scripting.Dictionary")
    d.Add "A", "Config A"
    d.Add "B", "Config B"
    d.Add "C", "Config C"
    d.Add "D", "Config D"
    d.Add "E", "Config E"
    d.Add "F", "Config F"
    d.Add "G", "Config G"
    d.Add "H", "Config H"
    d.Add "I", "Config I"
    d.Add "J", "Config J"
    d.Add "K", "Config K"
    d.Add "L", "Config L"
    d.Add "M", "Config M"
    d.Add "N", "Config N"
    d.Add "O", "Config O"
    d.Add "P", "Config P"
    d.Add "Q", "Config Q"
    d.Add "R", "Config R"
    d.Add "S", "Config S"
    d.Add "T", "Config T"
    d.Add "U", "Config U"
    d.Add "V", "Config V"
    d.Add "W", "Config W"
    d.Add "X", "Config X"
    
    ConfigSheet = d.Items             'Get the items
    ConfigKey = d.keys

    'If the SolData sheet is deactivated, show/hide the Config sheets as appropriate
    If Sh.Name = "SolData" Or Sh.Name = "Quotation" Then
        
      'Process all config sheet options
      For i = 0 To d.Count - 1 'Iterate the array
    
        'For each config, check if used in the proposed solution (SOLDATA)
        'Convert cell value to UPPER before comparison for completeness
        Show = False
        If Sh.Name = "SolData" Then     'Each sheet has a different range
            For Each c In Worksheets(Sh.Name).Range("K7:K306").Cells
             If UCase(c.Value) = ConfigKey(i) Then
                 Show = True
                 Exit For
             End If
            Next c
        ElseIf Sh.Name = "Quotation" Then    'Use correct range
            For Each c In Worksheets(Sh.Name).Range("A12:A25").Cells
             If UCase(c.Value) = ConfigKey(i) Then
                 Show = True
                 Exit For
             End If
            Next c
        End If
        
        'Show or hide this Config sheet as appropriate
        If Show = False Then
            Sheets(ConfigSheet(i)).Visible = False
        Else
            Sheets(ConfigSheet(i)).Visible = True
        End If
      
      Next i
    End If
End Sub

Sub InitGrail()
'This sub is used to initialize global variables in this module, and is called when
'the workbook is first opened
    Dim Msg As String
    gblTitle = "OfficeWare DOC@nalysis (c) 2004-2009  All Rights Reserved"
    gblCompatibilityLevel = 14
        
    'Disable event processing & screen updates until finished
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    'Get UpdateServer setting (stored in cell c4 on Validation tab)
    Sheets("Validation Tables").Visible = True
    Sheets("Validation Tables").Select
    'Read update server from file & build complete path (hardcode share name for security)
    gblUpdateServer = ActiveSheet.Range("c4").Value2 & "\D@$\D@-OW\"
    Sheets("Validation Tables").Visible = False
    'Reset view to always open to the INPUT INFO sheet
    Sheets("Input Info").Select
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    'DEBUG PURPOSES ONLY
    'MsgBox "Current UpdateServer path: " & gblUpdateServer
    
    'Display copyright message
    Msg = "Copyright OfficeWare (2004-2007)  All Rights Reserved" & Chr$(13) & Chr$(13)
    Msg = Msg & "DOC@nalysis is a registered Service Mark of OfficeWare, Inc." & Chr$(13) & Chr$(13)
    Msg = Msg & "Notice: The development concepts, layout, and all information "
    Msg = Msg & "contained in these spreadsheets is considered an OfficeWare Trade Secret, "
    Msg = Msg & "is copyright protected and is for INTERNAL OfficeWare use only. "
    Msg = Msg & "Any copying or distribution of this document or concept outside of OfficeWare "
    Msg = Msg & "is a violation of the copyright and is strictly prohibited (as described "
    Msg = Msg & "in the Nondisclosure section of your OfficeWare work agreement)." & Chr$(13) & Chr$(13)
    Msg = Msg & "Click YES to continue accept these terms, or NO to exit"
    gblResponse = MsgBox(Msg, vbYesNo, gblTitle)
    'If user doesn't accept terms, then close the workbook
    If gblResponse = vbNo Then ActiveWorkbook.Close SaveChanges:=False
    
    
       
End Sub

Sub RefreshConfigRows()
' RefreshConfigRows: Unprotect worksheet, unhide all rows, hide all blank rows, then protect the sheet again
' This procedure is called for the Order Form AND the Install Form CHANGE event
' Created 10/30/2003 by Chris Resch'
    
   On Error Resume Next        'Automatically continue if we encounter any errors
    
    Application.StatusBar = "Refreshing display...please wait"
    
    'Disable event processing so we don't unintentionally trigger other events here
    Application.EnableEvents = False

    Call UnprotectSheet
    
    Range("P27:P105").Select
    
    'Unhide all rows
    Selection.EntireRow.Hidden = False
    
    'Select all cells that contain a number -- cells in use will have text in them instead of a number
    Selection.SpecialCells(xlCellTypeFormulas, xlNumbers).EntireRow.Hidden = True
        
    Range("C21:C21").Select             'Reselect single cell for better user appearance
    Call ProtectSheet
    
    'Restore event processing and status bar to normal operation
    Application.EnableEvents = True
    Application.StatusBar = False
End Sub


Sub UpdateConfigSheets()
' This sub is for development use only; it is used to quickly update all the Config
' sheets after the "Cost Calc Standard" sheet has been modified
' Created 10/31/2003 by Chris Resch
    
    Dim wkSheet As String, Msg As String, CurSheet As String
    Dim SrcSheet As String

    'Disable event processing until finished
    Application.EnableEvents = False
    'Turn off screen updates while we proceed
    Application.ScreenUpdating = False
    'Disable automatic calculations until after we finish the copy
    Application.Calculation = xlManual
    
    'Save current active sheet so we can restore it when we're finished
    CurSheet = ActiveSheet.Name
    
    'Hard code source of sheet from which to copy
    SrcSheet = "Cost Calc Standard"
        
    'Unprotect source data sheet so we can proceed with a select..copy command
    Sheets(SrcSheet).Select
    Call UnprotectSheet(False)
        
    'Update data sheets
    Application.StatusBar = "Updating Config A...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config A")
    Application.StatusBar = "Updating Config B...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config B")
    Application.StatusBar = "Updating Config C...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config C")
    Application.StatusBar = "Updating Config D...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config D")
    Application.StatusBar = "Updating Config E...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config E")
    Application.StatusBar = "Updating Config F...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config F")
    Application.StatusBar = "Updating Config G...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config G")
    Application.StatusBar = "Updating Config H...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config H")
    Application.StatusBar = "Updating Config I...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config I")
    Application.StatusBar = "Updating Config J...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config J")
    Application.StatusBar = "Updating Config K...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config K")
    Application.StatusBar = "Updating Config L...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config L")
    Application.StatusBar = "Updating Config M...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config M")
    Application.StatusBar = "Updating Config N...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config N")
    Application.StatusBar = "Updating Config O...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config O")
    Application.StatusBar = "Updating Config P...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config P")
    Application.StatusBar = "Updating Config Q...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config Q")
    Application.StatusBar = "Updating Config R...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config R")
    Application.StatusBar = "Updating Config S...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config S")
    Application.StatusBar = "Updating Config T...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config T")
    Application.StatusBar = "Updating Config U...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config U")
    Application.StatusBar = "Updating Config V...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config V")
    Application.StatusBar = "Updating Config W...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config W")
    Application.StatusBar = "Updating Config X...please wait"
    Call UpdateConfigSheets_Refresh(SrcSheet, "Config X")
    
    'Empty clipboard to avoid prompt when closing workbook
    Application.CutCopyMode = False
        
    'Re-enable source data sheet protection when copy is complete
    Sheets(SrcSheet).Select
    Call ProtectSheet(False)
        
    'Reactivate saved sheet
    Sheets(CurSheet).Select
        
    'Restore screen updates
    Application.ScreenUpdating = True
    
    'Restore event processing until finished
    Application.EnableEvents = True
    
    'Restore automatic calculations
    Application.Calculation = xlAutomatic
            
    'Restore status bar to Excel control
    Application.StatusBar = False
    
End Sub

Sub UpdateConfigSheets_Refresh(SrcwkSheet As String, DstwkSheet As String)
'This sub copies the entire wkSheet from the source to replace the Desination
'This has been broken out into a separate routine so we can call multiple times for
'different wkSheets
'Created 10/31/2003 by Chris Resch

    Dim bVisible As Boolean

    'Store visible status of current destination sheet so we can restore when done
    bVisible = Sheets(DstwkSheet).Visible
    
    'Clear existing sheet in Grail
    If Not bVisible Then Sheets(DstwkSheet).Visible = True
    Sheets(DstwkSheet).Select
    Call UnprotectSheet(False)
    Cells.Select
    Selection.Clear
    
    'Copy data from new sheet to clipboard
    Sheets(SrcwkSheet).Select
    Cells.Select
    Selection.Copy
    'Call ProtectSheet(False)
    
    'Paste new data
    Sheets(DstwkSheet).Select
    Range("A1:A1").Select
    ActiveSheet.Paste
    'Reselect single cell for better UI appearance, protect sheet and then restore visible setting
    Range("A1:A1").Select
    Call ProtectSheet(False)
    Sheets(DstwkSheet).Visible = bVisible
    
    
    
End Sub

Sub Worksheet_Config_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
' Created:  1-Nov-2003  Chris Resch
    
    'If the model was changed, show/hide the item rows as appropriate
    'Only process for changes in Cell H:3 (model selection has changed)
    If Target.Column = 8 And Target.Row = 3 Then
        Call RefreshConfigRows
    End If
End Sub

Sub AutoHideRows()
' AutoHideRows Macro: Unprotect worksheet, show all rows,
' hide the appropriate rows, then protect the sheet again
' Called via event handler
' Created   3/27/2002   Chris Resch
' Updated:  11/7/2003   Chris Resch
    
   On Error Resume Next                                'Automatically continue if we encounter any errors
    Call UnprotectSheet
    
    'First, unhide all rows
    Range("B8:B307").Select
    Selection.EntireRow.Hidden = False
    
    'Now hide appropriate rows; Select all cells that contain a number -- cells in use will have text in them instead of a number
    Selection.SpecialCells(xlCellTypeFormulas, xlNumbers).EntireRow.Hidden = True
    Range("B8:B8").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
End Sub

Sub RefreshContractChangeFormRows()
' RefreshContractChangeRows Macro: Unprotect worksheet, show all rows, hide all numeric rows, then protect sheet again
' hide the appropriate rows, then protect the sheet again
' Called via event handler
' Created   6/3/2004   Chris Resch
' Updated:  6/3/2004   Chris Resch
    
    On Error Resume Next                                'Automatically continue if we encounter any errors
    
    Dim CurSheet As String, bVisible As Boolean
        
    Application.StatusBar = "Refreshing display...please wait"
    
    'Disable screen updates
    Application.ScreenUpdating = False
    
    'Save current active sheet so we can restore it when we're finished
    CurSheet = ActiveSheet.Name
    
    'Store current state of Order Form sheet
    bVisible = Sheets("Contract Change Form").Visible
    
    'Activate the Order Form sheet
    If Not bVisible Then Sheets("Contract Change Form").Visible = True
    Sheets("Contract Change Form").Select
    Call UnprotectSheet(False)
    
    'First unhide all rows
    Range("G8:G307").Select
    Selection.EntireRow.Hidden = False
    
    'Now hide appropriate rows; Select all cells that contain a number -- cells in use will have text in them instead of a number
    Selection.SpecialCells(xlCellTypeFormulas, xlNumbers).EntireRow.Hidden = True
    
    Range("O2:O2").Select                               'Reselect single cell for better user appearance
    Call ProtectSheet
    
    'Restore Order Form status
    Sheets("Contract Change Form").Visible = bVisible
    
    'Reactivate saved sheet
    Sheets(CurSheet).Select
    
    'Reenable screen updates
    Application.ScreenUpdating = True
    Application.StatusBar = False
    
End Sub

Sub AutoHideCurDataRows()
' AutoHideCurDataRows Macro: Unprotect worksheet, show all rows,
' hide the appropriate rows, then protect the sheet again
' Called via event handler
' Created   3/27/2002   Chris Resch
' Updated:  11/7/2003   Chris Resch
    
    Dim nRows As Integer, ExtraRange
   On Error Resume Next                                'Automatically continue if we encounter any errors
    
    Call UnprotectSheet(False)
    
    'First, unhide all rows
    Range("B8:B307").Select
    Selection.EntireRow.Hidden = False
    
    'Now hide appropriate rows; Select all cells that contain a blank value
    Selection.SpecialCells(xlCellTypeBlanks).EntireRow.Hidden = True

    'Now leave 1 blank row (to allow for add'l user input)
    'First, retrieve count of lines current in use
    nRows = Range("B308:B308").Cells.Value
    'Add 8 since we start on row 8
    nRows = nRows + 8
    'Create the range string for the row to unhide
    ExtraRange = "B" & nRows & ":B" & nRows
    'Now select range and unhide row
    Range(ExtraRange).Select
    Selection.EntireRow.Hidden = False

    'Leave current selection -- keeps open for future use
    Call ProtectSheet(False)
End Sub

Attribute VB_Name = "Module1"
Sub ReinstateOverrideFormulas()
Attribute ReinstateOverrideFormulas.VB_Description = "Macro recorded 4/29/2004 by Pete Findley"
Attribute ReinstateOverrideFormulas.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ReinstateOverrideFormulas Macro
' Macro recorded 4/29/2004 by Pete Findley
'

'
    Range("$BW$307:$CE$307").Select
    Selection.Copy
    Range("$BW$8:$BW$306").Select
    Range("BV8").Activate
    ActiveSheet.Paste
End Sub

Sub RestoreEventProcessing()
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
End Sub

Sub unlockrow()
'
' unlockrow Macro
' Macro recorded 5/11/2002 by Steve Hymer
'

'
    Range("BW6:CE6").Select
    ActiveWindow.SmallScroll ToRight:=-1
    Selection.Locked = False
    Selection.FormulaHidden = False
End Sub

Attribute VB_Name = "Module2"
Sub test_refresh()
Attribute test_refresh.VB_ProcData.VB_Invoke_Func = " \n14"
'
' test_refresh Macro
'

'
    ActiveSheet.Unprotect
    Range("D322").Select
    ActiveSheet.PivotTables("PivotTable3").PivotCache.Refresh
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CurData).
'Based on where the change was made, we will take different action
    
    Dim c, ColOffset
    
    'Disable event processing & screen updates while we do our work
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    'If the user has added a new entry, call the refresh routine
    'Only process for changes in Column B, Rows 8-307
    If Target.Column = 2 And Target.Row >= 8 And Target.Row <= 307 Then
        Call AutoHideCurDataRows
    End If
        
    'Reenable event handling & screen updates when complete
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (Input Info).
'Based on where the change was made, we will take different action
    
    Dim c, ColOffset
    
    'Disable event processing & screen updates while we do our work
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    'Grail Mode of Operations
    'Only process for changes in Column E, Rows 2
    If Target.Column = 5 And Target.Row = 7 Then
        'Make appropriate adjustments to show/hide the various tabs
        'Determine offset from SheetName to column for the current mode
        Select Case Target.Cells.Value
            Case "Quotation"
                ColOffset = 2
            Case "DOC@nalysis Development"
                ColOffset = 3
            Case "DOC@nalysis Presentation"
                ColOffset = 4
            Case "DOC@nalysis Paperwork"
                ColOffset = 5
            Case "UK/KCTCS Forms"
                ColOffset = 6
        End Select
        
        If ColOffset > 0 Then   'Ensure valid select was found before proceeding
           For Each c In Worksheets("_SheetIndex").Range("A7:A33").Cells
              'Based on the value held in the appropriate column, show/hide the sheet
              Sheets(c.Value).Visible = c.Offset(rowOffSet:=0, columnOffset:=ColOffset).Value
           Next c
        End If

    End If
        
    'Reenable event handling & screen updates when complete
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
End Sub
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (Install Form).
'Based on where the change was made, we will take different action
    
    Dim c, ColOffset
    
    
    'Config sheet selected for Install Form
    'Only process for changes in Column K, Rows 4
    If Target.Column = 11 And Target.Row = 4 Then
        
        'This goes here instead of up above b/c this macro is triggered by the
        'copy address macro, and we don't want this to run and have an unexpected effect
        'Disable event processing & screen updates while we do our work
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        
        'Show all/hide blank lines for new install form
        Call RefreshConfigRows
    
        'Reenable event handling & screen updates when complete
        Application.EnableEvents = True
        Application.ScreenUpdating = True
    
    End If
        
    
End Sub

Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet47"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet48"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet49"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (SolData).
'Based on where the change was made, we will take different action
    
    ThisColumn = Target.Column
    ThisRow = Target.Row
    
    'Config Sheet Selection
    'Only process for changes in Column K, Rows 7-306
    If ThisColumn = 11 And ThisRow >= 7 And ThisRow <= 306 Then
        'Disable event handling while we make our changes
        Call SetConfigSheetDisplayMode(ActiveSheet)
        Application.EnableEvents = False
        'Reenable event handling when complete
        Application.EnableEvents = True
    End If
End Sub

Attribute VB_Name = "Sheet50"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub

Attribute VB_Name = "Sheet52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet54"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (Quotation).
'Based on where the change was made, we will take different action
    
    ThisColumn = Target.Column
    ThisRow = Target.Row
    
    'Config Sheet Selection
    'Only process for changes in Column A, Rows 12-25
    If ThisColumn = 1 And ThisRow >= 12 And ThisRow <= 25 Then
        'Disable event handling while we make our changes
        Call SetConfigSheetDisplayMode(ActiveSheet)
        Application.EnableEvents = False
        'Reenable event handling when complete
        Application.EnableEvents = True
    End If
End Sub
Attribute VB_Name = "Sheet55"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet56"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet57"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet59"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet60"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet61"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet62"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (CostCalc).
'Based on where the change was made, we will take different action
'We call another sub, passing the info, because the same routine is called from all
'of the various configuration worksheets
'Created: 11-3-2003    Chris Resch
  Call Worksheet_Config_Change(Target)

End Sub


Attribute VB_Name = "Sheet63"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet65"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet66"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (Install Form).
'Based on where the change was made, we will take different action
    
    Dim c, ColOffset
    
    
    'Config sheet selected for Install Form
    'Only process for changes in Column K, Rows 4
    If Target.Column = 11 And Target.Row = 4 Then
        
        'This goes here instead of up above b/c this macro is triggered by the
        'copy address macro, and we don't want this to run and have an unexpected effect
        'Disable event processing & screen updates while we do our work
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        
        'Show all/hide blank lines for new install form
        Call RefreshConfigRows
    
        'Reenable event handling & screen updates when complete
        Application.EnableEvents = True
        Application.ScreenUpdating = True
    
    End If
        
    
End Sub


Attribute VB_Name = "Sheet67"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet68"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
'This routine is called whenever a change is made to this worksheet (Install Form).
'Based on where the change was made, we will take different action
    
    Dim c, ColOffset
    
    
    'Config sheet selected for Install Form
    'Only process for changes in Column K, Rows 4
    If Target.Column = 11 And Target.Row = 4 Then
        
        'This goes here instead of up above b/c this macro is triggered by the
        'copy address macro, and we don't want this to run and have an unexpected effect
        'Disable event processing & screen updates while we do our work
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        
        'Show all/hide blank lines for new install form
        Call RefreshConfigRows
    
        'Reenable event handling & screen updates when complete
        Application.EnableEvents = True
        Application.ScreenUpdating = True
    
    End If

End Sub
Attribute VB_Name = "Sheet69"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
'This sub is triggered whenever a sheet is changed in the workbook
'We use it to force automatic updates on various sheets

Select Case Sh.Name
    Case "Order Form"
        'If the OrderForm is activated, refresh the lines to verify accuracy
        Call RefreshOrderFormRows("Order Form")
    Case "Contract Change Form"
        'If the Contract Change Form is activated, refresh the lines to verify accuracy
        Call RefreshContractChangeFormRows
    Case "CurSum", "SolPlan", "SolData", "Addendum A"
        'If any of these sheets are activated, refresh the visible rows
        Call AutoHideRows
    Case "Addendum B"
        'If any of these sheets are activated, refresh the visible rows
        Call RefreshOrderFormRows("Addendum B")
    Case "CurByDevice"
        'Refresh pivot table(s)
        Call curbydevice
    Case "CurByDept"
        'Refresh pivot table(s)
        Call curbydept
    Case "CurInfo"
        'Refresh pivot table(s)
        Call curinfo
    Case "SolByDevice"
        'Refresh pivot table(s)
        Call solbydevice
    Case "SolCost"
        'Refresh pivot table(s)
        Call AutoHideRows
        Call solcost
    Case "SolByDept"
        Call solbydept
    Case "Commission Form"
        'If the Commission Form is activated, refresh the lines to ensure accuracy
        Call RefreshCommissionFormRows
    Case "Install Form"
        'Refresh rows
        Call RefreshConfigRows
    Case "UK-KCTCS Form", "UK Publishing Form", "UK Departmental Form"
        'Refresh rows
        Call RefreshConfigRows
'    Case "UK Publishing Form"
'        'Refresh rows
'        Call RefreshConfigRows
        
        
'    Case Else   'For debug use...find out what name was indicated
'        MsgBox Sh.Name
End Select
    
End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)
'This sub is triggered whenever the user goes to print part or all of the workbook
'We use it to force automatic refresh on the Order Form before printing
    
    'Disable event processing so we don't unintentionally trigger other events here
    Application.EnableEvents = False
    
    'Refresh the Order Form sheet before it is printed to ensure accuracy
    Call RefreshOrderFormRows("Order Form")
        
    'Refresh the Commission Form sheet before printing to ensure accuracy
    Call RefreshCommissionFormRows
    
    'Reenable event processing
    Application.EnableEvents = True
End Sub

Private Sub Workbook_Open()
    'Initialize global variables upon opening the workbook
    Call InitGrail
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

End Sub


INQUEST-PP=macro
