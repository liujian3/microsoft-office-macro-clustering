Attribute VB_Name = "CheckList"
Option Explicit
Public Caller As String

Public Sub DeleteLines()
Dim DeleteRows As Object
Dim StartRow As Integer
Dim EndRow As Integer

On Error GoTo ErrorHandlier

StartRow = Selection.Row
For Each DeleteRows In Selection.Rows
    EndRow = DeleteRows.Row
Next
Rows(StartRow & ":" & EndRow).Select
frmDeleteLines.Show

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Private Sub InsertLines()
Dim Result As String

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "CheckList" Then
        Selection.EntireRow.Select
        frmInsertLines.Show
    Else
        Result = MsgBox("Use this option on the Checklist sheet only", vbInformation, "Checklist option")
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub InsertSpecialNote()

    Dim Result As String

    If ActiveSheet.Name = "CheckList" Then
        Selection.Resize(1, 1).EntireRow.Select
        frmInsertSpecialNote.Show
    Else
        Result = MsgBox("Use this option on the Checklist sheet only", vbInformation, "Checklist option")
    End If
    
End Sub

Public Sub InsertNewCat()
Dim Result As String

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "CheckList" Then
        Selection.EntireRow.Select
        frmInsertNewCat.Show
    Else
        Result = MsgBox("Use this option on the Checklist sheet only", vbInformation, "Checklist option")
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub InsertAllowance()
Dim Result As String

    If ActiveSheet.Name = "CheckList" Then
        Selection.EntireRow.Select
        frmInsertAllowance.Show
    Else
        Result = MsgBox("Use this option on the Checklist sheet only", vbInformation, "Checklist option")
    End If
    
End Sub

Public Sub InsertOption()
Dim Result As String

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "CheckList" Then
        Selection.EntireRow.Select
        frmInsertOption.Show
    Else
        Result = MsgBox("Use this option on the Checklist sheet only", vbInformation, "Checklist option")
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub Projects()
    
    frmTemplates.Show
    Unload frmTemplates
    
End Sub

Public Sub ShowAllCat()
Dim SearchCell As Range

On Error GoTo ErrorHandlier

    ActiveSheet.Outline.ShowLevels RowLevels:=2

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub HideAllCat()
Dim SearchCell As Range

On Error GoTo ErrorHandlier

    ActiveSheet.Outline.ShowLevels RowLevels:=1

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub LookUp()
Dim Position As Integer

On Error GoTo ErrorHandlier
 
    frmLookUp.Show

Error_Exit:
   
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Public Sub ToggleRedBlack()
Attribute ToggleRedBlack.VB_ProcData.VB_Invoke_Func = "r\n14"
Const Black = 1
Const Red = 3
Dim Response As Integer

On Error GoTo ErrorHandlier
    
    If ActiveSheet.Name = "CheckList" Then
        If WorksheetFunction.IsNumber(ActiveCell.EntireRow.Cells(2)) Then
            If ActiveCell.EntireRow.Cells(5).Font.ColorIndex = Black Or ActiveCell.EntireRow.Cells(6).Font.ColorIndex = Black _
                Or ActiveCell.EntireRow.Cells(5).Font.ColorIndex = xlAutomatic Or ActiveCell.EntireRow.Cells(6).Font.ColorIndex = xlAutomatic Then
                ActiveCell.EntireRow.Columns("e:f").Font.ColorIndex = Red
            Else: ActiveCell.EntireRow.Columns("e:f").Font.ColorIndex = Black
            End If
        Else: Response = MsgBox("The cursor must be in a header or description row!", vbExclamation, "Toggle Black & Red")
        End If
    Else
        Response = MsgBox("You must be on the CheckList sheet to use this function", vbExclamation, "Toggle Black & Red")
    End If
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit

End Sub

Public Sub FieldNotes()
Dim CheckListrow As Range
Dim I As Integer
Dim j As Integer
Dim RowCount As Integer
Dim CheckListRange As Range
Dim Ahead As Integer
Dim FieldNotes As Worksheet
Dim PageNo As Integer
Dim Response As Integer

On Error GoTo ErrorHandlier

Application.ScreenUpdating = False

Set FieldNotes = Worksheets("FieldNotes")
ThisWorkbook.Unprotect
Worksheets("Tables").Range("ManualPage") = True
Worksheets("FieldNotes").Visible = True
Worksheets("FieldNotes").Select
Range("A1").Select
ThisWorkbook.Protect
FieldNotes.Cells.EntireRow.Delete
FieldNotes.Cells.EntireRow.Interior.ColorIndex = 2
PageNo = 1
j = 1
Ahead = 1
RowCount = ThisWorkbook.Worksheets("CheckList").UsedRange.Rows.Count
Set CheckListRange = ThisWorkbook.Worksheets("CheckList").UsedRange
For I = 1 To RowCount
    If CheckListRange.Rows(I + Ahead).Hidden = False And CheckListRange.Rows(I + 1).Cells(2) <> "" Then
        CheckListRange.Rows(I).Copy FieldNotes.Range("a" & j)
        If CheckListRange.Rows(I).Cells(2).Interior.ColorIndex <> 37 Then
            FieldNotes.Range("a" & j).Cells(1).Interior.ColorIndex = 2
        End If
        j = j + 1
    ElseIf CheckListRange.Rows(I).Hidden = False And CheckListRange.Rows(I).Cells(2) <> "" Then
        CheckListRange.Rows(I).Copy FieldNotes.Range("a" & j)
        If CheckListRange.Rows(I).Cells(2).Interior.ColorIndex <> 37 Then
            FieldNotes.Range("a" & j).Cells(1).Interior.ColorIndex = 2
        End If
        j = j + 2
    End If
Next

If j > 1 Then
    With FieldNotes
        .Columns(1).ColumnWidth = 5
        .Columns(4).ColumnWidth = 3
        .Columns(5).ColumnWidth = 2
        .Columns(6).ColumnWidth = 58
        .Columns(7).ColumnWidth = 19
        .Columns(8).ColumnWidth = 19
        .Columns(9).ColumnWidth = 0.75
        .Columns(10).ColumnWidth = 9
        .Columns(11).ColumnWidth = 4
        .Columns(2).Delete
        .Columns(2).Delete
        .Columns("G:O").Delete
        .Columns(2).HorizontalAlignment = xlCenter
        .Columns(1).Font.Bold = True
        .Columns(1).Font.ColorIndex = 2
        .Range("A10:A5000").Font.Size = 8
        .Range("A10:A5000").RowHeight = 14
        .Columns("G:IV").Delete
    End With
        
    With FieldNotes
        For I = 1 To j - 2
            If .Rows(I + 1).Cells(1).Interior.ColorIndex = 2 Or .Rows(I + 1).Cells(1).Interior.ColorIndex = xlNone Then
                If .Rows(I).Cells(3) <> "" And (.Rows(I).Cells(1).Interior.ColorIndex = 2 Or .Rows(I + 1).Cells(1).Interior.ColorIndex = xlNone) Then
                    .Rows(I).Cells(2) = "|1e|"
                    .Rows(I).Cells(1) = ""
                    AddBorders (I)
                ElseIf .Rows(I).Cells(1).Interior.ColorIndex = 2 Then
                    .Rows(I).Cells(3) = "|1e|"
                    .Rows(I).Cells(1) = ""
                    AddBorders (I)
                Else
                    With .Rows(I).Cells(6).Borders(xlEdgeRight)
                        .LineStyle = xlContinuous
                        .Weight = xlThin
                    End With
                End If
            End If
            If .Rows(I).Cells(1).Borders(xlEdgeBottom).LineStyle = xlContinuous Then
                With .Rows(I).Cells(1).Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .Weight = xlThin
                    .ColorIndex = 1
                End With
            End If
            If .Rows(I + 2).Cells(1).Interior.ColorIndex <> 2 Or .Rows(I + 2).Cells(1).Interior.ColorIndex = 6 Then
                With .Rows(I).Cells(2).Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .Weight = xlThin
                End With
            End If
            If .Rows(I).Cells(1) <> "" Then
                .Rows(I).Range(Cells(1), Cells(6)).Interior.ColorIndex = 1
            Else
                .Rows(I).EntireRow.Interior.ColorIndex = xlNone
                .Rows(I).EntireRow.Font.ColorIndex = 1
            End If
        Next
    End With
    Range("Manualheader").Copy
    Sheets("FieldNotes").Rows("1:1").Insert Shift:=xlDown
    FieldNotes.PageSetup.PrintArea = "A1:F" & I + Range("ManualHeader").Rows.Count - 1
    FrameManualPrint
    Application.ScreenUpdating = True
    Worksheets("FieldNotes").Select
    Range("A1").Select
    ManualProjectName
Else
    Response = MsgBox("A manual check list was not generated as no details on the Checklist were visible!", vbExclamation, "Generate Manual Checklist")
    Application.ScreenUpdating = True
    Worksheets("CheckList").Select
    Range("A1").Select
End If

Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub AddBorders(I)
Dim ManRow As Range

    Set ManRow = Worksheets("FieldNotes").Rows(I).Columns("c:f")
    ManRow.Borders(xlDiagonalDown).LineStyle = xlNone
    ManRow.Borders(xlDiagonalUp).LineStyle = xlNone
    With ManRow.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With ManRow.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With ManRow.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With ManRow.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    ManRow.Borders(xlInsideVertical).LineStyle = xlNone
    If Worksheets("FieldNotes").Rows(I).Cells(2).Borders(xlEdgeBottom).LineStyle = xlContinuous Then
        With Worksheets("FieldNotes").Rows(I).Cells(2).Borders(xlEdgeBottom)
            .LineStyle = xlNone
        End With
    End If
End Sub

Public Sub LoopThroughCheckListRows()
Dim CheckListrow As Range
Dim I As Integer
Dim RowCount As Integer
Dim CheckListRange As Range

RowCount = ThisWorkbook.Worksheets("CheckList").UsedRange.Rows.Count
Set CheckListRange = ThisWorkbook.Worksheets("CheckList").UsedRange
For I = 10 To RowCount
    If CheckListRange.Rows(I).Cells(3).Interior.ColorIndex = 2 Or CheckListRange.Rows(I).Cells(3).Interior.ColorIndex = xlNone Then
        CheckListRange.Rows(I).EntireRow.RowHeight = 14
    End If
Next

End Sub


Public Sub CallManual()

    Caller = "FieldNotes"
    frmWait.Show
    
End Sub

Public Sub FrameManCheckListPrint()
Dim hb As Variant
Dim PreviousRow As Range
Dim cell As Range

With Worksheets("FieldNotes")
    For Each cell In .UsedRange.Rows
        If cell.Borders(xlEdgeTop).LineStyle = xlContinuous And cell.Row > 7 Then
            If cell.Cells(1).Interior.ColorIndex <> 15 And cell.Offset(-1).Cells(1).Interior.ColorIndex <> 15 Then
                cell.Range(Cells(1), Cells(6)).Borders(xlEdgeTop).LineStyle = xlNone
            End If
        End If
    Next
    For Each hb In .HPageBreaks
        With hb.Location.Rows.Range(Cells(1), Cells(6)).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With hb.Location.Rows.Offset(-1).Range(Cells(1), Cells(6)).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    Next
End With

End Sub

Public Sub ManualProjectName()
Dim ProjectName As String

On Error GoTo ErrorHandlier

    ProjectName = InputBox("If you would like to rename this file accept or edit the name below and click OK", "SpecWriter", "Field Notes")
    If ProjectName <> "" Then
        SetProjectName ProjectName
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub




Attribute VB_Name = "Estimate"
Option Explicit
Option Compare Text

Public Sub GenerateEstimate()

Dim CheckListArray As Variant
Dim SectionArray As Variant
Dim EstimateArray() As Variant
Dim ItemNo As Integer
Dim SubItemNo As Integer
Dim OutPutLineNo As Integer
Dim OutPutSectionNo As Integer
Dim ChecklistLineNo As Integer
Dim I As Integer
Dim CurrentCode As Integer
Dim Result As Integer
Dim RowNo As Integer
Dim LastCell As String
Dim MarkUp As String
Dim Response As Integer
Dim Response2 As Integer
Dim SheetName As Worksheet
Dim Leftfooter As String
Dim Rightfooter As String
Dim SummaryRows As Integer
Dim CancelEstimate As Boolean

Const GenerateCall = True
Const CodeColCL = 1
Const SelectedColCL = 3
Const SectionNoColCL = 2
Const ItemDescColCL = 5
Const SubitemDescCL = 6
Const ItemDescCL = 7
Const CountColCL = 8
Const AmountColCl = 10
Const UnitColCl = 11

Const CodeColE = 0
Const Level1ColE = 1
Const Level2ColE = 2
Const CountColE = 3
Const AmountColE = 4
Const UnitColE = 5
Const CostColE = 6
Const MarkUpColE = 7
Const ExtendedColE = 8

On Error GoTo ErrorHandlier

    Application.ScreenUpdating = False
    CancelEstimate = False
    ThisWorkbook.Unprotect
    Worksheets("Estimate").Visible = True
    Worksheets("Tables").Range("EstimatePage") = True
    Worksheets("Estimate").Select
    If Range(Worksheets("Estimate").PageSetup.PrintArea).Rows.Count > 7 Then
        Response = MsgBox("Do you wish to copy existing Estimate to Prior Estimate", vbYesNoCancel, "SpecWriter")
        If Response = vbCancel Then
            CancelEstimate = True
            Response2 = MsgBox("Estimate generation has been cancelled", vbExclamation)
        Else
            If Response = vbYes Then
                With Worksheets("PriorEstimate")
                .Visible = True
                    Worksheets("Tables").Range("PriorEstimatePage") = True
                    Worksheets("Estimate").Cells.Copy .Cells
                    .PageSetup.PrintArea = "A1:I" & .UsedRange.Rows.Count
                    ThisWorkbook.Protect
                End With
            End If
        End If
    End If
    If CancelEstimate = False Then
        CheckListArray = Range("EstimateSec1")
        MarkUp = Range("EstimateMarkUp")
            
        ReDim EstimateArray(4000, 8)
        ItemNo = 1
        OutPutLineNo = 0
        ChecklistLineNo = 1
        While ChecklistLineNo < UBound(CheckListArray, 1)
            If CheckListArray(ChecklistLineNo, SelectedColCL) = "x" And CheckListArray(ChecklistLineNo, SectionNoColCL) < 6 Then
                If CheckListArray(ChecklistLineNo, ItemDescColCL) <> "" Then
                    OutPutLineNo = OutPutLineNo + 1
                    EstimateArray(OutPutLineNo, 1) = CheckListArray(ChecklistLineNo, 5)
                    EstimateArray(OutPutLineNo, 6) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                    EstimateArray(OutPutLineNo, MarkUpColE) = MarkUp
                    EstimateArray(OutPutLineNo, 8) = "=G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1)"
                    OutPutLineNo = OutPutLineNo + 1
                    ItemNo = ItemNo + 1
                    ChecklistLineNo = ChecklistLineNo + 1
                    SubItemNo = 0
                Else
                    While CheckListArray(ChecklistLineNo, 6) <> "" Or CheckListArray(ChecklistLineNo, 2) <> ""
                        If CheckListArray(ChecklistLineNo, SelectedColCL) = "x" Then
                            If SubItemNo > 25 Then
                                EstimateArray(OutPutLineNo, Level1ColE) = Chr(97) & Chr(97 + SubItemNo - 26) & ")"
                            Else
                                EstimateArray(OutPutLineNo, Level1ColE) = Chr(97 + SubItemNo) & ")"
                            End If
                            EstimateArray(OutPutLineNo, Level2ColE) = CheckListArray(ChecklistLineNo, SubitemDescCL)
                            EstimateArray(OutPutLineNo, 6) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                            EstimateArray(OutPutLineNo, MarkUpColE) = MarkUp
                            EstimateArray(OutPutLineNo, 8) = "=G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1)"
                            SubItemNo = SubItemNo + 1
                            OutPutLineNo = OutPutLineNo + 1
                        End If
                        ChecklistLineNo = ChecklistLineNo + 1
                    Wend
                End If
            Else
                ChecklistLineNo = ChecklistLineNo + 1
            End If
        Wend
                           
        CheckListArray = Range("EstimateSec2")
        ChecklistLineNo = 1
        OutPutLineNo = OutPutLineNo + 1
        While ChecklistLineNo < UBound(CheckListArray, 1)
            If WorksheetFunction.IsNumber(CheckListArray(ChecklistLineNo, CodeColCL)) Then
                CurrentCode = CheckListArray(ChecklistLineNo, CodeColCL)
            End If
            ChecklistLineNo = ChecklistLineNo + 1
            While CheckListArray(ChecklistLineNo, SectionNoColCL) <> "" And CheckListArray(ChecklistLineNo, SectionNoColCL) < 6
                If (CheckListArray(ChecklistLineNo, ItemDescColCL) = "" And CheckListArray(ChecklistLineNo, SubitemDescCL) = "" And CheckListArray(ChecklistLineNo, SelectedColCL) = "x") _
                    Or ((CheckListArray(ChecklistLineNo, ItemDescColCL) = "" Or CheckListArray(ChecklistLineNo, SubitemDescCL) = "") And CheckListArray(ChecklistLineNo, SelectedColCL) <> "x") _
                    Or ((CheckListArray(ChecklistLineNo, ItemDescColCL) <> "" Or CheckListArray(ChecklistLineNo, SubitemDescCL) <> "") And CheckListArray(ChecklistLineNo, SelectedColCL) <> "x") Then
                    ChecklistLineNo = ChecklistLineNo + 1
                Else
                    If CheckListArray(ChecklistLineNo, ItemDescColCL) <> "" And CheckListArray(ChecklistLineNo, SelectedColCL) = "x" Then
                        OutPutLineNo = OutPutLineNo + 1
                        SubItemNo = 0
                        EstimateArray(OutPutLineNo, CodeColE) = CurrentCode
                        If IsEmpty(CheckListArray(ChecklistLineNo, ItemDescCL)) = False Then
                            If CheckListArray(ChecklistLineNo, SectionNoColCL) = 3 Then
                                EstimateArray(OutPutLineNo, CountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, ItemDescCL))
                                EstimateArray(OutPutLineNo, CostColE) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                            ElseIf CheckListArray(ChecklistLineNo, SectionNoColCL) = 5 Then
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, ItemDescCL))
                                EstimateArray(OutPutLineNo, CostColE) = CheckListArray(ChecklistLineNo, CountColCL)
                            ElseIf CheckListArray(ChecklistLineNo, SectionNoColCL) = 4 Then
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                                EstimateArray(OutPutLineNo, CostColE) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                            Else
                                EstimateArray(OutPutLineNo, CountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, AmountColCl))
                                EstimateArray(OutPutLineNo, CostColE) = CheckListArray(ChecklistLineNo, CountColCL)
                            End If
                        Else
                            EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, AmountColCl))
                            EstimateArray(OutPutLineNo, CountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                            EstimateArray(OutPutLineNo, CostColE) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                            EstimateArray(OutPutLineNo, UnitColE) = CheckListArray(ChecklistLineNo, UnitColCl)
                        End If
                        EstimateArray(OutPutLineNo, Level1ColE) = CheckListArray(ChecklistLineNo, ItemDescColCL)
                        EstimateArray(OutPutLineNo, UnitColE) = CheckListArray(ChecklistLineNo, UnitColCl)
                        EstimateArray(OutPutLineNo, ExtendedColE) = "=IF(ISERROR(G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1)),,G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1))"
                        EstimateArray(OutPutLineNo, MarkUpColE) = MarkUp
                        OutPutLineNo = OutPutLineNo + 1
                        ChecklistLineNo = ChecklistLineNo + 1
                    End If
                    While CheckListArray(ChecklistLineNo, SubitemDescCL) <> "" And CheckListArray(ChecklistLineNo, SelectedColCL) = "x"
                        If SubItemNo > 25 Then
                            EstimateArray(OutPutLineNo, Level1ColE) = Chr(97) & Chr(97 + SubItemNo - 26) & ")"
                        Else
                            EstimateArray(OutPutLineNo, Level1ColE) = Chr(97 + SubItemNo) & ")"
                        End If
                        EstimateArray(OutPutLineNo, Level2ColE) = CheckListArray(ChecklistLineNo, SubitemDescCL)
                        If IsEmpty(CheckListArray(ChecklistLineNo, ItemDescCL)) = False Then
                            If CheckListArray(ChecklistLineNo, ItemDescCL) Like "*included*" Then
                                EstimateArray(OutPutLineNo, CountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                                EstimateArray(OutPutLineNo, CostColE) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                            ElseIf CheckListArray(ChecklistLineNo, ItemDescCL) Like "*Allowance*" Then
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, ItemDescCL))
                                EstimateArray(OutPutLineNo, CostColE) = CheckListArray(ChecklistLineNo, CountColCL)
                            ElseIf CheckListArray(ChecklistLineNo, SectionNoColCL) = 4 Then
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                            Else
                                EstimateArray(OutPutLineNo, CountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                                EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, AmountColCl))
                                EstimateArray(OutPutLineNo, CostColE) = CheckListArray(ChecklistLineNo, CountColCL)
                            End If
                        Else
                            EstimateArray(OutPutLineNo, AmountColE) = LTrim(CheckListArray(ChecklistLineNo, AmountColCl))
                            EstimateArray(OutPutLineNo, CountColE) = LTrim(CheckListArray(ChecklistLineNo, CountColCL))
                            EstimateArray(OutPutLineNo, CostColE) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
                            EstimateArray(OutPutLineNo, UnitColE) = CheckListArray(ChecklistLineNo, UnitColCl)
                        End If
                        EstimateArray(OutPutLineNo, ExtendedColE) = "=IF(ISERROR(G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1)),,G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1))"
                        EstimateArray(OutPutLineNo, MarkUpColE) = MarkUp
                        SubItemNo = SubItemNo + 1
                        If ChecklistLineNo <> UBound(CheckListArray, 1) Then
                            ChecklistLineNo = ChecklistLineNo + 1
                        End If
                        OutPutLineNo = OutPutLineNo + 1
                    Wend
                End If
            Wend
        Wend
        For I = 0 To 9
            EstimateArray(OutPutLineNo, CostColE) = "=IF(ISERROR(D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & "),,D" & OutPutLineNo + 6 & "*E" & OutPutLineNo + 6 & ")"
            EstimateArray(OutPutLineNo, MarkUpColE) = MarkUp
            EstimateArray(OutPutLineNo, ExtendedColE) = "=IF(ISERROR(G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1)),,G" & OutPutLineNo + 6 & "*(H" & OutPutLineNo + 6 & " + 1))"
            OutPutLineNo = OutPutLineNo + 1
        Next
        OutPutLineNo = OutPutLineNo - 1
        With Worksheets("Estimate")
            .Range("A6:A5000").EntireRow.Delete
            .Range("A6:I" & OutPutLineNo + 6) = EstimateArray
            .Range("E4") = Date
            .Columns("D:D").NumberFormat = "0.00"
            .Columns("E:E").NumberFormat = "[$$-409]#,##0.00"
            .Columns("G:G").NumberFormat = "[$$-409]#,##0.00"
            .Columns("I:I").NumberFormat = "[$$-409]#,##0.00"
            .Range("E4").NumberFormat = "mm/dd/yy"
            .Range("D6:E" & OutPutLineNo + 6).Locked = False
        End With
        
        With Worksheets("Estimate").Range("A6:I" & OutPutLineNo + 6).Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("A6:I" & OutPutLineNo + 6).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("A6:I" & OutPutLineNo + 6).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("A6:I" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        
        With Worksheets("Estimate").Range("A6:A" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("C6:C" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("D6:D" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("F6:F" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("G6:G" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("Estimate").Range("H6:H" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        
        Worksheets("Estimate").Range("A6:F" & OutPutLineNo + 6).Borders(xlInsideHorizontal).LineStyle = xlNone
        Worksheets("Estimate").Columns("H:H").Style = "Percent"
        SummaryRows = Worksheets("Tables").Range("ConCostSummary").Rows.Count
        Worksheets("Tables").Range("ConCostSummary").Copy
        Worksheets("Estimate").Range("A" & OutPutLineNo + 7).Insert
        
        With Worksheets("Estimate").Range("A" & OutPutLineNo + 7)
            .Offset(2, 6) = "=sum(G6:G" & OutPutLineNo + 6 & ")"
            .Offset(2, 8) = "=sum(I6:I" & OutPutLineNo + 6 & ")"
        End With
        Worksheets("Estimate").Range("A6:I" & OutPutLineNo + SummaryRows + 6).Interior.ColorIndex = 2
        Worksheets("Estimate").Range("A" & OutPutLineNo + 7 & ":I" & OutPutLineNo + 7).Interior.ColorIndex = 15
        Worksheets("Estimate").PageSetup.PrintArea = "A1:I" & OutPutLineNo + SummaryRows + 6
        Set SheetName = Worksheets("Estimate")
        EstToggleLines (GenerateCall)
        Application.ScreenUpdating = True
        Worksheets("Estimate").Activate
        Range("A1").Select
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
   Resume Error_Exit
        
End Sub


Public Sub ShowTakeOffLookUp()
Attribute ShowTakeOffLookUp.VB_ProcData.VB_Invoke_Func = "l\n14"
    
    frmTakeoffLookUp.Show
    
End Sub

Public Sub ShowEstimatesettings()

    frmEstimateDisplay.Show
    
End Sub

Public Sub EstPageView()

Worksheets("Estimate").Activate

    If Range("EstPageBreakView") Then
        ActiveWindow.View = xlNormalView
        Range("EstPageBreakView") = False
        ActiveWindow.Zoom = Range("SpecZoom")
    Else
        ActiveWindow.View = xlPageBreakPreview
        Range("EstPageBreakView") = True
        ActiveWindow.Zoom = Range("SpecZoom")
    End If

End Sub

Public Sub EstToggleLines(Optional GenerateCall)
Dim GridColor As Integer
Dim SummaryRows As Integer

On Error GoTo ErrorHandlier

SummaryRows = Range("ConCostSummary").Rows.Count

If IsMissing(GenerateCall) Then
    GenerateCall = False
End If

If GenerateCall Then
    If Range("EstGridLines") Then
        GridColor = 15
    Else
        GridColor = 2
    End If
Else
    If Range("EstGridLines") Then
        Range("EstGridLines") = False
    Else
        Range("EstGridLines") = True
    End If
End If

If Range("EstGridLines") Then
    GridColor = 15
    With Worksheets("Estimate")
        With .Range("A6:I" & .UsedRange.Rows.Count - SummaryRows).Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = GridColor
        End With
        With .Range("A" & .UsedRange.Rows.Count - (SummaryRows - 2) & ":I" & .UsedRange.Rows.Count - 2).Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = GridColor
        End With
    End With
Else
    With Worksheets("Estimate")
        With .Range("A6:I" & .UsedRange.Rows.Count - SummaryRows).Borders(xlInsideHorizontal)
            .LineStyle = xlNone
        End With
        With .Range("A" & .UsedRange.Rows.Count - (SummaryRows - 2) & ":I" & .UsedRange.Rows.Count - 2).Borders(xlInsideHorizontal)
            .LineStyle = xlNone
        End With
    End With
End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
   Resume Error_Exit
        
End Sub

Public Sub CallEstimate()
    Caller = "Estimate"
    frmWait.Show
End Sub
Attribute VB_Name = "PrintPreview"
Option Explicit
Option Compare Text

Public Sub PreviewFieldNotes()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("FieldNotes")
    Set VisibleRange = Worksheets("Tables").Range("ManualPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Preview"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub PrintFieldNotes()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("FieldNotes")
    Set VisibleRange = Worksheets("Tables").Range("ManualPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub PrintCheckList()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("Checklist")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    SheetName.PageSetup.PrintArea = "A1:L" & Range("checkList").Rows.Count
    Action = "Print"
    PrintPreview SheetName, Action, , , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub PrintCheckListNoUnit()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("Checklist")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    SheetName.PageSetup.PrintArea = "A1:I" & Range("checkList").Rows.Count
    Action = "Print"
    PrintPreview SheetName, Action, , , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Sub PrintEstimate()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
            
    Set SheetName = Worksheets("Estimate")
    Set VisibleRange = Worksheets("Tables").Range("EstimatePage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Sub PrintEstimatePreview()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
            
    Set SheetName = Worksheets("Estimate")
    Set VisibleRange = Worksheets("Tables").Range("EstimatePage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Preview"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Sub PrintEstimateTwice()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
            
    Set SheetName = Worksheets("Estimate")
    Set VisibleRange = Worksheets("Tables").Range("EstimatePage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print2"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Sub PrintPiorEstimate()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
           
    Set SheetName = Worksheets("PriorEstimate")
    Set VisibleRange = Worksheets("Tables").Range("PriorEstimatePage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print2"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter
       
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Sub PreviewSpecification()
Dim SheetName As Worksheet
Dim Leftfooter As String
Dim Rightfooter As String
Dim LeftHeader As String
Dim RightHeader As String
Dim Action As String

On Error GoTo ErrorHandlier

    Set SheetName = Worksheets("Specifications")
    Action = "Preview"
    PrintPreview SheetName, Action
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PrintSpecifications()
Dim SheetName As Worksheet
Dim Action As String

On Error GoTo ErrorHandlier

    Set SheetName = Worksheets("Specifications")
    Action = "Print"
    PrintPreview SheetName, Action
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PrintSpecificationsTwice()
Dim SheetName As Worksheet
Dim Action As String

On Error GoTo ErrorHandlier

    Set SheetName = Worksheets("Specifications")
    Action = "Print2"
    PrintPreview SheetName, Action
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PreviewTakeoff()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
        
    Set SheetName = Worksheets("TakeOff")
    Set VisibleRange = Worksheets("Tables").Range("TakeOffPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Preview"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PrintTakeoff()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
        
    Set SheetName = Worksheets("TakeOff")
    Set VisibleRange = Worksheets("Tables").Range("TakeOffPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PreviewValues()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("ScheduleValues")
    Set VisibleRange = Worksheets("Tables").Range("ValuesPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Preview"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PrintValues()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("ScheduleValues")
    Set VisibleRange = Worksheets("Tables").Range("ValuesPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Sub PrintPriorValues()
Dim SheetName As Worksheet
Dim VisibleRange As Range
Dim Rightfooter As String
Dim Action As String

On Error GoTo ErrorHandlier
    
    Set SheetName = Worksheets("PriorValues")
    Set VisibleRange = Worksheets("Tables").Range("PriorValuesPage")
    Rightfooter = Range("ProjectName") & " Page &P of &N"
    Action = "Print"
    PrintPreview SheetName, Action, VisibleRange, , Rightfooter
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub PrintPreview(SheetName, Action, Optional VisibleRange, Optional Leftfooter, Optional Rightfooter, Optional LeftHeader, Optional RightHeader)

On Error GoTo ErrorHandlier

    Application.ScreenUpdating = False
    ThisWorkbook.Unprotect
    If IsMissing(VisibleRange) = False Then
        VisibleRange = True
        SheetName.Visible = True
    End If
    Select Case SheetName.Name
    Case "Estimate"
        FrameEstimatePrint
    Case "ScheduleValues"
        FrameValuePrint
    End Select
    With SheetName.PageSetup
        .LeftHeader = LeftHeader
        .RightHeader = RightHeader
        .Leftfooter = Leftfooter
        .Rightfooter = Rightfooter
    End With
    If Action = "Print" Then
        SheetName.PrintOut
    ElseIf Action = "Preview" Then
        SheetName.PrintPreview
    ElseIf Action = "Print2" Then
        SheetName.PrintOut copies:=2
    End If
    ThisWorkbook.Protect
    Application.ScreenUpdating = True

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub FrameEstimatePrint()
Dim hb As Variant
Dim cell As Range

With Worksheets("estimate")
    .Select
    ActiveWindow.ScrollRow = 4500
    .Cells.SpecialCells(xlLastCell).Select
    .Range("A1").Select
    For Each cell In .UsedRange.Rows
        If cell.Borders(xlEdgeTop).LineStyle = xlContinuous And cell.Row > 7 Then
            If cell.Cells(1).Interior.ColorIndex <> 15 And cell.Offset(-1).Cells(1).Interior.ColorIndex <> 15 Then
                cell.Resize(1, 9).Borders(xlEdgeTop).LineStyle = xlNone
            End If
        End If
    Next
    For Each hb In .HPageBreaks
        With hb.Location.Rows.Resize(1, 9).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With hb.Location.Offset(-1).Resize(1, 9).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    Next
    ActiveWindow.ScrollRow = 1
End With

End Sub

Public Sub FrameValuePrint()
Dim hb As Variant
Dim cell As Range

With Worksheets("ScheduleValues")
    .Select
    ActiveWindow.ScrollRow = 2000
    .Cells.SpecialCells(xlLastCell).Select
    .Range("A1").Select
    For Each cell In .UsedRange.Rows
        If cell.Borders(xlEdgeTop).LineStyle = xlContinuous And cell.Row > 7 Then
            If cell.Cells(1).Interior.ColorIndex <> 15 And cell.Offset(-1).Cells(1).Interior.ColorIndex <> 15 Then
                cell.Range(Cells(1), Cells(9)).Borders(xlEdgeTop).LineStyle = xlNone
            End If
        End If
    Next
    For Each hb In .HPageBreaks
        With hb.Location.Rows.Resize(1, 9).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With hb.Location.Offset(-1).Resize(1, 9).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    Next
    ActiveWindow.ScrollRow = 1
End With

End Sub

Public Sub FrameManualPrint()
Dim hb As Variant
Dim cell As Range

With Worksheets("FieldNotes")
    .Select
    ActiveWindow.ScrollRow = 4500
    .Cells.SpecialCells(xlLastCell).Select
    .Range("A1").Select
    For Each hb In .HPageBreaks
        With hb.Location.Rows.Resize(1, 1).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With hb.Location.Offset(-1).Resize(1, 1).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    Next
    ActiveWindow.ScrollRow = 1
End With

End Sub

Public Sub FrameSpecificationsPrint()
Dim hb As Variant
Dim PageBreakNo As Integer
Dim LastRow As Integer
Dim I As Integer
Dim LastLine As Integer
Dim PageHeight As Integer
Dim PageBreakAddress As Range

PageBreakNo = 1
ActiveWindow.ScrollRow = 5000
Worksheets("Specifications").Cells.SpecialCells(xlLastCell).Select
Range("A1").Select
If Worksheets("Specifications").HPageBreaks.Count > 1 Then
    PageHeight = Worksheets("Specifications").HPageBreaks(1).Location.Row - 1
    With Worksheets("Specifications")
        I = 1
        While I <> .HPageBreaks.Count + 1
            Set PageBreakAddress = .HPageBreaks(I).Location
            Range("A" & PageBreakAddress.Row - 2 & ":A" & PageBreakAddress.Row + 1).EntireRow.Insert
            With PageBreakAddress.Rows.Offset(-4, 0).Range(Cells(1), Cells(7)).Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            PageBreakAddress.Offset(-5, 0).Value = "Page " & PageBreakNo & "  Accepted by Builder ________________________  Accepted by Owner(s) ____________________ ___________________"
            PageBreakAddress.Offset(-5, 0).Font.Underline = xlUnderlineStyleNone
            PageBreakAddress.Offset(-5, 0).Font.Size = 10
            PageBreakNo = PageBreakNo + 1
            PageBreakAddress.Offset(-4, 0).Value = Range("ProjectName") & " Specifications Page " & PageBreakNo
            PageBreakAddress.Offset(-4, 0).Font.Underline = xlUnderlineStyleNone
            PageBreakAddress.Offset(-4, 6).Value = "Copyright " & DatePart("yyyy", Date) & " by " & Range("CompanyName")
            PageBreakAddress.Offset(-4, 6).HorizontalAlignment = xlRight
            PageBreakAddress.Offset(-4, 0).Font.Size = 10
            PageBreakAddress.Offset(-4, 6).Font.Bold = True
            LastRow = PageBreakAddress.Row + PageHeight - 4
            I = I + 1
        Wend
        LastLine = Worksheets("Specifications").UsedRange.SpecialCells(xlLastCell).Row
        Worksheets("Specifications").PageSetup.PrintArea = "A1:G" & LastRow
        Range("A" & LastLine & ":G" & LastRow).Interior.ColorIndex = 2
        Range("A" & LastRow).Value = "Page " & PageBreakNo & "  Accepted by Builder ________________________  Accepted by Owner(s) ____________________ ___________________"
        Range("A" & LastRow).Font.Size = 10
        Range("A" & LastRow).Font.Bold = False
    End With
End If

End Sub

Public Sub DeleteSpecPageBreaks()
Dim SpecRow As Range
Dim LastLine As Integer

With Worksheets("Specifications")

    For Each SpecRow In .UsedRange.Rows
        If SpecRow.Cells(1).Borders(xlEdgeBottom).LineStyle = xlContinuous And SpecRow.Row > 7 Then
            Range("A" & SpecRow.Row - 2 & ":A" & SpecRow.Row + 1).EntireRow.Delete
        End If
    Next
    LastLine = .UsedRange.SpecialCells(xlLastCell).Row
    .UsedRange.SpecialCells(xlLastCell).EntireRow.Delete
    
End With

End Sub

Public Sub PrintPageSetup()
Dim SpecSheet As Worksheet
Dim CurrentSheet As String
Dim FooterMargin As Single
Dim HeaderMargin As Single
Dim TopMargin As Single
Dim BottomMargin As Single

On Error GoTo 0

Application.ScreenUpdating = False
CurrentSheet = ActiveSheet.Name
For Each SpecSheet In Worksheets
    If SpecSheet.Name = "Specifications" Then
        FooterMargin = 0
        HeaderMargin = 0
        TopMargin = 0.4
        BottomMargin = 0.25
    Else
        FooterMargin = 0.25
        HeaderMargin = 0.25
        TopMargin = 0.5
        BottomMargin = 0.85
    End If
    SpecSheet.Activate
    With SpecSheet.PageSetup
        .LeftHeader = ""
        .RightHeader = ""
        .Leftfooter = ""
        .Rightfooter = ""
        .LeftMargin = Application.InchesToPoints(0.4)
        .RightMargin = Application.InchesToPoints(0.42)
        .TopMargin = Application.InchesToPoints(TopMargin)
        .BottomMargin = Application.InchesToPoints(BottomMargin)
        .HeaderMargin = Application.InchesToPoints(HeaderMargin)
        .FooterMargin = Application.InchesToPoints(FooterMargin)
        .PrintHeadings = False
        .PrintGridlines = False
        .CenterHorizontally = False
        .CenterVertically = False
        .Orientation = xlPortrait
        .PaperSize = xlPaperLetter
        .FirstPageNumber = xlAutomatic
        .BlackAndWhite = True
        .Zoom = 90
    End With
Next
Worksheets(CurrentSheet).Activate
Application.ScreenUpdating = True

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Attribute VB_Name = "SetUp"
Option Explicit
Option Compare Text
Public ActiveApps As Integer

Declare Function GetSystemMetrics32 Lib "user32" _
    Alias "GetSystemMetrics" (ByVal nIndex As Long) As Long
    
Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

Public Sub RestoreMenus()
Attribute RestoreMenus.VB_ProcData.VB_Invoke_Func = " \n14"
Dim Toolbar As CommandBar

On Error GoTo ErrorHandlier
    
    With ThisWorkbook
        .Unprotect
        Application.Caption = Empty
        For Each Toolbar In Application.CommandBars
            Toolbar.Enabled = True
        Next
        Application.CommandBars("Worksheet Menu Bar").Protection = msoBarNoProtection
        Application.CommandBars("Worksheet Menu Bar").Reset
        If Not .Worksheets("Tables").Range("DistMode") Then
            Application.CommandBars("Visual Basic").Visible = True
        Else
            Application.CommandBars("Visual Basic").Visible = False
        End If
        Application.DisplayFormulaBar = True
        Application.DisplayStatusBar = True
    End With
    
    If ActiveWorkbook.Name <> ThisWorkbook.Name Then
        Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!TempRestoreMenus", Description:="", ShortcutKey:=""
        Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!TempSetUpEnviroment", Description:="", ShortcutKey:=""
        Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ShowTakeOffLookUp", Description:="", ShortcutKey:=""
        Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ToggleRedBlack", Description:="", ShortcutKey:=""
        Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ToggleHighLighter", Description:="", ShortcutKey:=""
        Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ResetSpecWriter", Description:="", ShortcutKey:=""
    End If
    Assistant.AssistWithHelp = True
    Application.OnKey "{F1}"
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub SetUpEnviroment()
Attribute SetUpEnviroment.VB_ProcData.VB_Invoke_Func = " \n14"
Dim mb As CommandBarControl
Dim Toolbars As CommandBar
Dim SpecSheets As Worksheet

On Error GoTo ErrorHandlier
    
    With ThisWorkbook
        .Unprotect
        Application.Caption = .Worksheets("Tables").Range("SpecCaption")
        If .Name <> "Speczip.xls" Then
            .Worksheets("Tables").Range("ProjectName") = Mid(.Name, 1, Len(.Name) - 4)
        Else
            .SaveAs .Path & "\" & .Worksheets("Tables").Range("ProjectName") & ".xls"
        End If
        .Worksheets("Tables").Visible = xlVeryHidden
    End With
    
    SetSheets
    Application.CommandBars("Worksheet Menu Bar").Protection = msoBarNoProtection
    For Each mb In Application.CommandBars("Worksheet Menu Bar").Controls
        mb.Delete
    Next
    For Each Toolbars In Application.CommandBars
        If Toolbars.Name <> "Worksheet Menu Bar" Then
            'Toolbars.Visible = False
            Toolbars.Enabled = False
        End If
    Next
    Assistant.AssistWithHelp = False
    
    Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!TempRestoreMenus", Description:="", ShortcutKey:="q"
    Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!TempSetUpEnviroment", Description:="", ShortcutKey:="a"
    Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ShowTakeOffLookUp", Description:="", ShortcutKey:="l"
    Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ToggleRedBlack", Description:="", ShortcutKey:="r"
    Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ToggleHighLighter", Description:="", ShortcutKey:="h"
    Application.MacroOptions Macro:="'" & ThisWorkbook.Name & "'!ResetSpecWriter", Description:="", ShortcutKey:="z"

    Application.OnKey "{F1}", "SpecWriterHelp"

    With Application.CommandBars("Worksheet Menu Bar")
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&File"
            With .Controls.Add(Type:=msoControlButton, Id:=2949)
                .Caption = "&Enter Project Name"
                .OnAction = "EnterProjectName"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=4)
                .BeginGroup = True
                .Caption = "&Print Dialog Box"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949)
                .BeginGroup = True
                .Caption = "&Save To Hard Drive"
                .OnAction = "DefaultSave"
                .FaceId = 3
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949)
                .Caption = "&Zip To Floppy Drive"
                .OnAction = "CallZipUp"
                .FaceId = 3
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=748)
                .Style = msoButtonIconAndCaption
                .Caption = "File Save Dialog Box"
                .FaceId = 3
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=106)
                .BeginGroup = True
                .Caption = "&Close Project File"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Checklist"

            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .Caption = "Lookup/Goto a Catagory"
                .OnAction = "LookUp"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .BeginGroup = True
                .Caption = "Show all Groups"
                .FaceId = 462
                .OnAction = "ShowAllCat"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                .Caption = "Hide all Groups"
                .FaceId = 464
                .OnAction = "HideAllCat"
            End With
            .Controls.Add Type:=msoControlButton, Id:=3159, Before:=4
            .Controls.Add Type:=msoControlButton, Id:=3160, Before:=5
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=6)
                .BeginGroup = True
                .Caption = "Insert Special Note"
                .FaceId = 296
                .OnAction = "InsertSpecialNote"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=7)
                Application.CommandBars.FindControl(Id:=296).CopyFace
                .PasteFace
                .Caption = "Insert New Catagory"
                .FaceId = 296
                .OnAction = "InsertNewCat"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=8)
                .FaceId = 296
                .Caption = "Insert Allowance Description"
                .OnAction = "InsertAllowance"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=9)
                .FaceId = 296
                .Caption = "Insert Option Description"
                .OnAction = "InsertOption"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=10)
                .BeginGroup = True
                .FaceId = 296
                .Caption = "Insert Specification Line[s]"
                .OnAction = "InsertLines"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=11)
                .FaceId = 293
                .Caption = "Delete Specification Line[s]"
                .OnAction = "DeleteLines"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=12)
                .BeginGroup = True
                .Caption = "Use Templates"
                .OnAction = "Projects"
            End With
            With .Controls.Add(Type:=msoControlPopup, Before:=13)
                .BeginGroup = True
                .Caption = "Field Notes"
                With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                    .Caption = "Generate Field Notes"
                    .FaceId = 2054
                    .OnAction = "CallManual"
                End With
                With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                    .Caption = "Preview Field Notes"
                    .FaceId = 109
                    .OnAction = "PreviewFieldNotes"
                End With
                With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                    .Caption = "Print Field Notes"
                    .FaceId = 4
                    .OnAction = "PrintFieldNotes"
                End With
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=14)
                .FaceId = 4
                .Caption = "Print Checklist"
                .OnAction = "PrintCheckListNoUnit"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=15)
                .Caption = "Print Checklist w/Prices"
                .FaceId = 4
                .OnAction = "PrintCheckList"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Specifications"
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .Caption = "Generate Specifications"
                .FaceId = 2054
                .OnAction = "CallSpecifications"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .BeginGroup = True
                .Caption = "Preview Specifications"
                .FaceId = 109
                .OnAction = "PreviewSpecification"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                .Caption = "Print Specifications"
                .FaceId = 4
                .OnAction = "PrintSpecifications"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=4)
                .BeginGroup = True
                .Caption = "Print Specifications Twice"
                .FaceId = 4
                .OnAction = "PrintSpecificationsTwice"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&TakeOff"
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .FaceId = 109
                .Caption = "Page Break View On/Off"
                .OnAction = "TakeOffPageView"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .BeginGroup = True
                .FaceId = 296
                .Caption = "Insert New Row"
                .OnAction = "InsertTakeOffLines"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                .FaceId = 293
                .Caption = "Delete Row or Rows"
                .OnAction = "DeleteTakeOffLines"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=4)
                .BeginGroup = True
                .FaceId = 296
                .Caption = "Insert New Section"
                .OnAction = "InsertBlank"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=5)
                .BeginGroup = True
                .Caption = "Preview TakeOff"
                .FaceId = 109
                .OnAction = "PreviewTakeoff"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=6)
                .Caption = "Print TakeOff Sheet"
                .FaceId = 4
                .OnAction = "PrintTakeoff"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Estimate"
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .Caption = "Generate Estimate Worksheet"
                .FaceId = 2054
                .OnAction = "CallEstimate"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .BeginGroup = True
                .Caption = "Set Default Markup"
                .OnAction = "ProgramSettings"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                .Caption = "Presentation Options"
                .OnAction = "ShowEstimatesettings"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=4)
                .FaceId = 109
                .Caption = "Page Break View On/Off"
                .OnAction = "EstPageView"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=5)
                .Caption = "Grid Lines On/Off"
                .OnAction = "EstToggleLines"
                .FaceId = 723
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=6)
                .BeginGroup = True
                .Caption = "Preview Estmate"
                .FaceId = 109
                .OnAction = "PrintEstimatePreview"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=7)
                .Caption = "Print Estmate"
                .FaceId = 4
                .OnAction = "PrintEstimate"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=8)
                .Caption = "Print Estmate Twice"
                .FaceId = 4
                .OnAction = "PrintEstimateTwice"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=9)
                .BeginGroup = True
                .Caption = "Print Prior Estmate"
                .FaceId = 4
                .OnAction = "PrintPiorEstimate"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Values"
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .Caption = "Generate Schedule of Values"
                .FaceId = 2054
                .OnAction = "CallValue"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .BeginGroup = True
                .Caption = "Set/Change Markup"
                .OnAction = "ProgramSettings"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                .Caption = "Presentation Options"
                .OnAction = "ShowValuesettings"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=4)
                .FaceId = 109
                .Caption = "Page Break View On/Off"
                .OnAction = "ValuePageView"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=5)
                .Caption = "Grid Lines On/Off"
                .OnAction = "ValueToggleLines"
                .FaceId = 723
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=6)
                .BeginGroup = True
                .Caption = "Preview Schedule of Values"
                .FaceId = 109
                .OnAction = "PreviewValues"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=7)
                .Caption = "Print Schedule of Values"
                .FaceId = 4
                .OnAction = "PrintValues"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=8)
                .BeginGroup = True
                .Caption = "Print Prior Schedule"
                .FaceId = 4
                .OnAction = "PrintPriorValues"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Settings"
             With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .Caption = "Program Settings"
                .OnAction = "ProgramSettings"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .Caption = "Display Settings"
                .OnAction = "DisplaySettings"
            End With
        End With
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Help"
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=1)
                .Caption = "SpecWriter &Help"
                .OnAction = "SpecWriterHelp"
                .FaceId = 983
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=2)
                .Caption = "About SpecWriter"
                .OnAction = "AboutSpecWriter"
            End With
            With .Controls.Add(Type:=msoControlButton, Id:=2949, Before:=3)
                .Caption = "Hot Keys Legend"
                .OnAction = "HotKeysLegendShow"
            End With
        End With
    End With
    
    Application.CommandBars("Worksheet Menu Bar").Protection = msoBarNoCustomize _
        + msoBarNoChangeDock + msoBarNoChangeVisible + msoBarNoMove + msoBarNoResize _
        + msoBarNoVerticalDock
        
    ThisWorkbook.Protect

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub EnterProjectName()
Dim ProjectName As String
Dim Response As Integer

On Error GoTo ErrorHandlier
    
    ProjectName = InputBox("Please enter the name for this Project", "SpecWriter", Range("ProjectName"))
    If ProjectName <> "" Then
        SetProjectName ProjectName
        Response = MsgBox("We recommend that you save your project file each time you enter or change the project name. Do you want to save this project file now?." _
        , vbInformation + vbYesNo, "Save File")
        If Response = vbYes Then
            DefaultSave
        End If
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Public Sub ProgramSettings()

    frmProgramSettings.Show

End Sub

Public Sub DisplaySettings()

    frmDisplaySettings.Show

End Sub

Public Function DefaultSave() As Boolean
Dim Response As Integer
Dim ProjectName As String
Dim SpecPath As String

On Error GoTo ErrorHandlier
    
    DefaultSave = False
    SpecPath = Range("DefaultDirectory") & "\"
    If Range("ProjectName") = Range("MasterName") Then
        ProjectName = InputBox("Please enter the name for this Project", "SpecWriter", Range("ProjectName"))
        If ProjectName = "" Then
            ProjectName = Range("ProjectName")
        Else
            SetProjectName ProjectName
        End If
        Response = MsgBox("Please verify that you wish to save this file as" & Chr(13) & Chr(10) & "'" & SpecPath & Range("ProjectName") & ".xls'", vbYesNo + vbInformation, "SpecWriter")
        If Response = vbYes Then
            If ProjectName = Range("MasterName") Then
                Response = MsgBox("Warning: You are about to overwrite your existing SpecWriter" _
                    & Chr(13) & Chr(10) & "Master File. While this may be your intention, it's also entirely " _
                    & Chr(13) & Chr(10) & "possible that you simply forgot to enter a project name. If you " _
                    & Chr(13) & Chr(10) & "wish to enter a project name, please select 'Cancel'. If you want " _
                    & Chr(13) & Chr(10) & "to save this file as your new SpecWriter Master File, then select 'OK'.", vbOKCancel + vbExclamation, "SpecWriter")
                If Response = vbOK Then
                    Application.DisplayAlerts = False
                    ThisWorkbook.SaveAs SpecPath & Range("ProjectName")
                    DefaultSave = True
                    Application.DisplayAlerts = True
                Else
                    EnterProjectName
                    'Response = MsgBox("Please set the filename under the File Menu and Save again", vbInformation, "SpecWriter")
                    'DefaultSave = True
                End If
            Else
                Application.DisplayAlerts = False
                ThisWorkbook.SaveAs SpecPath & Range("ProjectName")
                DefaultSave = True
                Application.DisplayAlerts = True
            End If
        Else
            'DefaultSave = True
            Response = MsgBox("Please set the filename under the File Menu and Save again", vbInformation, "SpecWriter")
        End If
    Else
        Response = MsgBox("Please verify that you wish to save this file as" & Chr(13) & Chr(10) & "'" & SpecPath & Range("ProjectName") & ".xls'", vbYesNo + vbInformation, "SpecWriter")
        If Response = vbYes Then
            Application.DisplayAlerts = False
            ThisWorkbook.SaveAs SpecPath & Range("ProjectName")
            DefaultSave = True
            Application.DisplayAlerts = True
        Else
            Response = MsgBox("Please set the filename under the File Menu and Save again", vbInformation, "SpecWriter")
        End If
    End If

Error_Exit:

Exit Function

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Function

Public Sub SetProjectName(ProjectName)

On Error GoTo ErrorHandlier

    Range("ProjectName") = ProjectName
    Worksheets("CheckList").Range("D4") = ProjectName
    Worksheets("Specifications").Range("B4") = ProjectName
    Worksheets("TakeOff").Range("B4") = ProjectName
    Worksheets("Estimate").Range("B4") = ProjectName
    Worksheets("ScheduleValues").Range("B4") = ProjectName

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
        
End Sub


Public Sub SetSheets()
Dim SpecSheet As Worksheet
Dim CurrentSheet As String

On Error GoTo ErrorHandlier

    CurrentSheet = ActiveSheet.Name
    For Each SpecSheet In Worksheets
        SpecSheet.Activate
        ActiveWindow.DisplayGridlines = False
        ActiveWindow.DisplayHeadings = False
        ActiveWindow.DisplayHorizontalScrollBar = False
        ActiveWindow.DisplayZeros = False
    Next
    Application.DisplayFormulaBar = False
    Application.DisplayStatusBar = False
    Worksheets(CurrentSheet).Activate
        
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub TempRestoreMenus()
Attribute TempRestoreMenus.VB_ProcData.VB_Invoke_Func = "q\n14"
Dim CurrentSheet As Worksheet
Dim PowerSheet As Worksheet

    Application.ScreenUpdating = False
    With ThisWorkbook
        .Unprotect
        .Worksheets("Tables").Visible = True
        .Worksheets("ScheduleValues").Visible = True
        .Worksheets("Tables").Range("ValuesPage") = True
        .Worksheets("PriorEstimate").Visible = True
        .Worksheets("Tables").Range("PriorEstimatePage") = True
        .Worksheets("PriorValues").Visible = True
        .Worksheets("Tables").Range("PriorValuesPage") = True
        .Worksheets("FieldNotes").Visible = True
        .Worksheets("Tables").Range("ManualPage") = True
        RestoreMenus
        Set CurrentSheet = .ActiveSheet
        For Each PowerSheet In .Worksheets
            PowerSheet.Activate
            ActiveWindow.DisplayGridlines = True
            ActiveWindow.DisplayHeadings = True
            ActiveWindow.DisplayHorizontalScrollBar = True
            ActiveWindow.DisplayZeros = True
        Next
        CurrentSheet.Activate
    End With
    Application.ScreenUpdating = True
    
End Sub

Public Sub TempSetUpEnviroment()
Attribute TempSetUpEnviroment.VB_ProcData.VB_Invoke_Func = "a\n14"

    Application.ScreenUpdating = False
    SetUpEnviroment
    Application.ScreenUpdating = True
    
End Sub


Public Sub AboutSpecWriter()

    frmAboutSpecWriter.Show

End Sub

Public Sub ResetAllSheet()
Dim SpecSheet As Worksheet
        
    For Each SpecSheet In Worksheets
        SpecSheet.Activate
        Range("A1").Select
    Next
    Worksheets("Checklist").Select
    Range("A1").Select
    
End Sub

Public Sub HotKeysLegendShow()
    frmHelpHotKeys.Show
End Sub

Public Sub ToggleHighLighter()
Attribute ToggleHighLighter.VB_ProcData.VB_Invoke_Func = "h\n14"
Const White = 2
Const None = xlNone
Const HigkLight = 6
Dim Response As Integer

On Error GoTo ErrorHandlier
                
Select Case ActiveSheet.Name
    Case "CheckList"
        If WorksheetFunction.IsNumber(ActiveCell.EntireRow.Cells(2)) Then
            If ActiveCell.EntireRow.Cells(5).Interior.ColorIndex = None Or ActiveCell.EntireRow.Cells(5).Interior.ColorIndex = White Then
                Range(ActiveCell.EntireRow.Cells(5), ActiveCell.EntireRow.Cells(8)).Interior.ColorIndex = HigkLight
            Else: Range(ActiveCell.EntireRow.Cells(5), ActiveCell.EntireRow.Cells(8)).Interior.ColorIndex = White
            End If
        End If
    Case "Specifications"
        If ActiveCell.Row > 7 Then
            If ActiveCell.EntireRow.Cells(2).Interior.ColorIndex = None Or ActiveCell.EntireRow.Cells(2).Interior.ColorIndex = White Then
                Range(ActiveCell.EntireRow.Cells(2), ActiveCell.EntireRow.Cells(7)).Interior.ColorIndex = HigkLight
            Else: Range(ActiveCell.EntireRow.Cells(2), ActiveCell.EntireRow.Cells(7)).Interior.ColorIndex = White
            End If
        End If
    Case "Estimate"
        If ActiveCell.Row > 5 Then
            If ActiveCell.EntireRow.Cells(1).Interior.ColorIndex = None Or ActiveCell.EntireRow.Cells(1).Interior.ColorIndex = White Then
                Range(ActiveCell.EntireRow.Cells(1), ActiveCell.EntireRow.Cells(9)).Interior.ColorIndex = HigkLight
            Else: Range(ActiveCell.EntireRow.Cells(1), ActiveCell.EntireRow.Cells(9)).Interior.ColorIndex = White
            End If
        End If
    Case "ScheduleValues"
        If ActiveCell.Row > 5 Then
            If ActiveCell.EntireRow.Cells(1).Interior.ColorIndex = None Or ActiveCell.EntireRow.Cells(1).Interior.ColorIndex = White Then
                Range(ActiveCell.EntireRow.Cells(1), ActiveCell.EntireRow.Cells(5)).Interior.ColorIndex = HigkLight
            Else: Range(ActiveCell.EntireRow.Cells(1), ActiveCell.EntireRow.Cells(5)).Interior.ColorIndex = White
            End If
        End If
End Select
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub ResetSpecWriter()
Attribute ResetSpecWriter.VB_ProcData.VB_Invoke_Func = "z\n14"
Dim Response As Integer

    Response = MsgBox("You have activate the keyboard command to reset SpecWriter. " & _
                        "This will erase your current work and restore the factory settings. " & _
                        "Please indicate that this is your intention or select 'Cancel' " & _
                        "to terminate the procedure.", vbExclamation + vbOKCancel, "Reset SpecWriter")
    If Response = vbOK Then
        Application.ScreenUpdating = False
        ThisWorkbook.Unprotect
        Worksheets("Specifications").Range("A5:A5000").EntireRow.Delete
        Worksheets("Specifications").Activate
        Range("A1").Select
        ActiveWindow.ScrollRow = 1
        Worksheets("TakeOff").Activate
        Range("A1").Select
        Worksheets("Estimate").Range("A7:A5000").EntireRow.Delete
        Worksheets("Estimate").Activate
        Range("A1").Select
        ActiveWindow.ScrollRow = 1
        Worksheets("PriorEstimate").Cells.Delete
        Worksheets("PriorEstimate").Activate
        Range("A1").Select
        ActiveWindow.ScrollRow = 1
        Worksheets("ScheduleValues").Range("A7:A4000").EntireRow.Delete
        Worksheets("ScheduleValues").Activate
        Range("A1").Select
        ActiveWindow.ScrollRow = 1
        Worksheets("PriorValues").Cells.Delete
        Worksheets("PriorValues").Activate
        Range("A1").Select
        ActiveWindow.ScrollRow = 1
        Worksheets("FieldNotes").Cells.Delete
        Worksheets("FieldNotes").Activate
        Range("A1").Select
        ActiveWindow.ScrollRow = 1
            
        Worksheets("Tables").Range("ValuesPage") = False
        Worksheets("ScheduleValues").Visible = False
        
        Worksheets("Tables").Range("PriorEstimatePage") = False
        Worksheets("PriorEstimate").Visible = False
        
        Worksheets("Tables").Range("PriorValuesPage") = False
        Worksheets("PriorValues").Visible = False
            
        Worksheets("Tables").Range("ManualPage") = False
        Worksheets("FieldNotes").Visible = False
         
        Worksheets("CheckList").Select
        Worksheets("CheckList").Outline.ShowLevels RowLevels:=1
        
        Worksheets("Tables").Range("ShowSectionNo") = False
        Worksheets("Checklist").Columns(2).Hidden = True
    If Worksheets("Tables").Range("ShowUnitCostCheck") = False And Worksheets("Tables").Range("ShowSectionNo") = True Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 69.5
        Worksheets("Checklist").Columns(9).ColumnWidth = 2
    ElseIf Worksheets("Tables").Range("ShowUnitCostCheck") = True And Worksheets("Tables").Range("ShowSectionNo") = False Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 59
        Worksheets("Checklist").Columns(9).ColumnWidth = 0.75
    ElseIf Worksheets("Tables").Range("ShowUnitCostCheck") = False And Worksheets("Tables").Range("ShowSectionNo") = False Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 72
        Worksheets("Checklist").Columns(9).ColumnWidth = 2
    ElseIf Worksheets("Tables").Range("ShowUnitCostCheck") = True And Worksheets("Tables").Range("ShowSectionNo") = True Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 56.5
        Worksheets("Checklist").Columns(9).ColumnWidth = 0.75
    End If

         
        Range("EstStandardSetting") = True
        Range("EstCostSetting") = False
        Range("EstMarkupSetting") = False
        Range("EstPriceSetting") = False
        Range("CautionMessages") = True
        Range("EstimateFont") = 10
        Range("EstGridLines") = True
        Call frmEstimateDisplay.cmdOK_Click
             
        ThisWorkbook.Protect
        Application.ScreenUpdating = True
        Range("A1").Select
    End If
    
End Sub

Public Sub ZipUp()
Dim AppPath As String
Dim Zip As String
Dim X As Double
Dim Response As Integer
Dim iTask As Long, ret As Long
           
    On Error GoTo ErrorHandlier
    
    AppPath = ThisWorkbook.Path & "\"
    On Error Resume Next
    Kill AppPath & "Speczip.zip"
    Kill AppPath & "SpecZip.exe"
    Kill AppPath & "Speczip.xls"
    Kill AppPath & "Speczip.Bat"
    Kill "A:\Speczip.exe"
    On Error GoTo ErrorHandlier
    
    Response = MsgBox("Please insert a disk into drive A:", vbInformation, "Insert Disk")
    ThisWorkbook.SaveCopyAs AppPath & "Speczip.xls"
    ChDrive ThisWorkbook.Path
    ChDir ThisWorkbook.Path
    CreateBatFile
    'look if "SpecZip.Bat" exists
    If Dir$("SpecZip.Bat") <> "" Then
        Zip = Shell("COMMAND.COM /C SpecZip.Bat", vbHide)
        If Zip = 0 Then  'Shell fails
           Response = MsgBox("SpecWriter was unable to Create the zip files", vbExclamation, "Zip Failed")
           Exit Sub
        End If
        Do While (Dir$("SpecZip.Bat") <> "")
            DoEvents            'let Shell work
        Loop
    End If
    Application.Wait Now + TimeValue("00:00:05")
    FileCopy AppPath & "Speczip.exe", "a:Speczip.exe"
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    If Err.Number = 53 Then
        Response = MsgBox("A file is missing. Installation cannot proceed!", vbCritical, "Files Missing")
    ElseIf Err.Number = 71 Then
        Response = MsgBox("Drive A is not ready. Please insert a disk and press Retry  ", vbExclamation + vbRetryCancel, "Drive Not Ready")
        If Response = vbRetry Then
            Resume
        Else: Resume Error_Exit
        End If
    Else
        MsgBox (Err.Description)
    End If
    Resume Error_Exit
    
End Sub
Public Sub CreateBatFile()
Dim Handle As Integer

    Handle = FreeFile
    Open "SpecZip.Bat" For Output As #Handle
    Print #Handle, "pkzip Speczip.zip Speczip.xls Pkzip.exe zip2exe.exe SpecHelp.hlp SpecHelp.CNT"
    Print #Handle, ""
    Print #Handle, "zip2exe Speczip.Zip"
    Print #Handle, ""
    Print #Handle, "del SpecZip.Bat"
    Close #Handle
    
End Sub

Public Sub CallZipUp()
    Caller = "ZipUp"
    frmWait.Show
End Sub

Public Sub SpecWriterHelp()
Dim Response As Integer
       
    On Error GoTo ErrorHandlier
            
    Application.Help "SpecHelp.hlp", 0
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    If Err.Number = 53 Then
        Response = MsgBox("Help is not available", vbCritical, "Files Missing")
    Else
        MsgBox (Err.Description)
    End If
    Resume Error_Exit
            
End Sub

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdAddRoom, 2, 1, MSForms, CommandButton"

Private Sub cmdAddRoom_Click()
Dim Result As String

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "CheckList" Then
        'Selection.EntireRow.Select
        frmInsertNewRoom.Show
    Else
        Result = MsgBox("Use this option on the Checklist sheet only", vbInformation, "Checklist option")
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Excel.Range, Cancel As Boolean)
Dim ExpandButton As Range

    If ActiveCell.Column = 3 Then
        If ActiveCell.Value <> "" Then
            ActiveCell.Value = ""
        Else
            ActiveCell.Value = "X"
        End If
        ActiveCell.Offset(1, 0).Select
    End If

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)
On Error Resume Next

    If ActiveCell.Column > 11 Then
        ActiveCell.Offset(0, -1).Select
    End If
    
End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Specifications"
Option Explicit
Option Compare Text
Public StartTime As Variant

Public Sub GenerateSpecificationMain()
Dim Response As Integer

On Error GoTo ErrorHandlier
    
    If Range("CautionMessages") Then
        Response = MsgBox("You are about to create new specifications that will replace the existing specifications. While this is the standard operation, this caution message allows you the opportunity to cancel the procedure.", vbOKCancel + vbExclamation, "Caution Message")
        If Response = vbOK Then
            GenerateSpecification
        Else
            Response = MsgBox("Specification generation has been cancelled", vbInformation, "Operation Canceled")
        End If
    Else
        GenerateSpecification
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
        
End Sub

Public Sub GenerateSpecification()

Dim CheckListArray As Variant
Dim SectionArray As Variant
Dim SpecificationArray() As Variant
Dim SectionNo As Integer
Dim ItemNo As Integer
Dim SectionSubItemNo As Integer
Dim OutPutLineNo As Integer
Dim OutPutSectionNo As Integer
Dim ChecklistLineNo As Integer
Dim NoData As Boolean
Dim NoDataSection8 As Boolean
Dim LastCell As String
Dim PageEnd As Boolean
Dim FixedAllowance As Single
Dim UnitAllowance As Single
Dim SheetName As Worksheet
Dim Leftfooter As String
Dim Rightfooter As String
Dim SpecCell As Range
Dim Section8 As Boolean
Dim I As Integer

On Error GoTo ErrorHandlier
        
    StartTime = Now()
    Application.ScreenUpdating = False
    Worksheets("Specifications").Select
    CheckListArray = Range("Checklist")
    SectionArray = Range("Sections")
    ReDim SpecificationArray(4500, 9)
    SectionNo = 1
    ItemNo = 1
    OutPutLineNo = 0
    ChecklistLineNo = 1
    NoData = False
    For SectionNo = 1 To 8
        OutPutLineNo = OutPutLineNo + 1
        SpecificationArray(OutPutLineNo, 0) = SectionArray(SectionNo, 2) & "   " & SectionArray(SectionNo, 3)
        OutPutLineNo = OutPutLineNo + 1
        NoData = True
        NoDataSection8 = True
        While ChecklistLineNo < UBound(CheckListArray, 1)
            While CheckListArray(ChecklistLineNo, 1) = SectionNo
                If CheckListArray(ChecklistLineNo, 2) = "x" Then
                    If CheckListArray(ChecklistLineNo, 4) <> "" Then
                        OutPutLineNo = OutPutLineNo + 1
                        SpecificationArray(OutPutLineNo, 1) = CStr(ItemNo) & "."
                        SpecificationArray(OutPutLineNo, 2) = CheckListArray(ChecklistLineNo, 4)
                        If SectionNo = 4 And CheckListArray(ChecklistLineNo, 6) <> "" Then
                            SpecificationArray(OutPutLineNo, 5) = LTrim(CheckListArray(ChecklistLineNo, 6))
                            SpecificationArray(OutPutLineNo, 6) = CheckListArray(ChecklistLineNo, 7)
                        End If
                        If SectionNo = 5 And CheckListArray(ChecklistLineNo, 6) <> "" Then
                            SpecificationArray(OutPutLineNo, 5) = "Allowance:"
                            SpecificationArray(OutPutLineNo, 6) = CheckListArray(ChecklistLineNo, 7)
                            If IsNumeric(CheckListArray(ChecklistLineNo, 7)) Then
                                FixedAllowance = FixedAllowance + CheckListArray(ChecklistLineNo, 7)
                            End If
                        End If
                        If SectionNo <> 8 Then
                            OutPutLineNo = OutPutLineNo + 1
                        End If
                        ItemNo = ItemNo + 1
                        ChecklistLineNo = ChecklistLineNo + 1
                        NoDataSection8 = False
                    Else
                        While CheckListArray(ChecklistLineNo, 4) = ""
                            If CheckListArray(ChecklistLineNo, 2) = "x" Then
                                If SectionSubItemNo > 25 Then
                                    SpecificationArray(OutPutLineNo, 2) = Chr(97) & Chr(97 + SectionSubItemNo - 26) & ")"
                                Else
                                    SpecificationArray(OutPutLineNo, 2) = Chr(97 + SectionSubItemNo) & ")"
                                End If
                                SpecificationArray(OutPutLineNo, 3) = CheckListArray(ChecklistLineNo, 5)
                                SpecificationArray(OutPutLineNo, 6) = CheckListArray(ChecklistLineNo, 7)
                                SpecificationArray(OutPutLineNo, 5) = CheckListArray(ChecklistLineNo, 6)
                                SectionSubItemNo = SectionSubItemNo + 1
                                If SectionNo = 4 And CheckListArray(ChecklistLineNo, 6) <> "" Then
                                    SpecificationArray(OutPutLineNo, 5) = LTrim(CheckListArray(ChecklistLineNo, 6))
                                    SpecificationArray(OutPutLineNo, 6) = CheckListArray(ChecklistLineNo, 7)
                                End If
                                If SectionNo = 5 And CheckListArray(ChecklistLineNo, 6) <> "" Then
                                    SpecificationArray(OutPutLineNo, 5) = "Allowance:"
                                    SpecificationArray(OutPutLineNo, 6) = CheckListArray(ChecklistLineNo, 7)
                                    If IsNumeric(CheckListArray(ChecklistLineNo, 7)) Then
                                        FixedAllowance = FixedAllowance + CheckListArray(ChecklistLineNo, 7)
                                    End If
                                End If
                                OutPutLineNo = OutPutLineNo + 1
                                NoData = False
                            End If
                            ChecklistLineNo = ChecklistLineNo + 1
                        Wend
                    End If
                Else
                    ChecklistLineNo = ChecklistLineNo + 1
                End If
                SectionSubItemNo = 0
            Wend
            ChecklistLineNo = ChecklistLineNo + 1
        Wend
        
        ItemNo = 1
        ChecklistLineNo = 1
        If NoData And SectionNo <> 8 Then
            OutPutLineNo = OutPutLineNo + 1
            SpecificationArray(OutPutLineNo, 3) = SectionArray(SectionNo, 4)
            OutPutLineNo = OutPutLineNo + 1
        ElseIf SectionNo = 8 And NoDataSection8 Then
            OutPutLineNo = OutPutLineNo + 1
            SpecificationArray(OutPutLineNo, 3) = SectionArray(SectionNo, 4)
            OutPutLineNo = OutPutLineNo + 1
        End If
        If SectionNo = 5 Then
            OutPutLineNo = OutPutLineNo + 1
            SpecificationArray(OutPutLineNo, 4) = "Fixed Cost Allowance Total:"
            SpecificationArray(OutPutLineNo, 6) = FixedAllowance
        End If
        OutPutLineNo = OutPutLineNo + 1
    Next
    With Worksheets("Specifications")
        .Range("A5:A5000").EntireRow.Delete
        OutPutLineNo = OutPutLineNo + 1
        .Range("A5:G" & OutPutLineNo + 5).Interior.ColorIndex = 2
        .Range("G4") = Date
        .Range("A5:G" & OutPutLineNo + 5) = SpecificationArray
        .Range("A5:G" & OutPutLineNo + 5).Locked = False
        .PageSetup.PrintArea = "A1:G" & OutPutLineNo + 5
        
        Erase SpecificationArray
        Erase CheckListArray
        For Each SpecCell In .Range("A5:A" & OutPutLineNo + 5)
            If SpecCell <> "" Then
                SpecCell.Font.Underline = xlUnderlineStyleSingle
            End If
        Next
    End With
    Set SpecCell = Cells.Find(What:= _
        "SECTION EIGHT   This contract specifically DOES NOT include any of the following:" _
        , After:=ActiveCell, LookIn:=xlFormulas, LookAt:=xlPart, SearchOrder:= _
        xlByRows, SearchDirection:=xlNext, MatchCase:=False)
    I = 0
    While SpecCell.Offset(I).Row < Worksheets("Specifications").UsedRange.SpecialCells(xlLastCell).Row
        If SpecCell.Offset(I, 2) <> "" Then
            SpecCell.Offset(I, 2).Font.Bold = False
        End If
        I = I + 1
    Wend
    
    Worksheets("Specifications").Activate
    FrameSpecificationsPrint
    For Each SpecCell In Worksheets("Specifications").Range("G7:G" & OutPutLineNo + 5)
        If SpecCell <> "" And Left(SpecCell, 9) <> "Copyright" Then
            SpecCell.Borders(xlEdgeBottom).LineStyle = xlContinuous
        End If
    Next
    Application.ScreenUpdating = True
    Range("A1").Select
    'MsgBox ("Time taken = " & Format(Now() - StartTime, "nn:ss"))
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
   Resume Error_Exit
        
End Sub

Public Sub CallSpecifications()
Attribute CallSpecifications.VB_ProcData.VB_Invoke_Func = " \n14"
    Caller = "Specifications"
    frmWait.Show
End Sub

Attribute VB_Name = "TakeOff"
Option Explicit

Private Sub InsertTakeOffLines()
Dim Result As String

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "TakeOff" Then
        Selection.EntireRow.Select
        frmInsertLines.Show
    Else
        Result = MsgBox("Use this option on the TakeOff sheet only", vbInformation, "Checklist option")
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub DeleteTakeOffLines()
Dim DeleteRows As Object
Dim StartRow As Integer
Dim EndRow As Integer

On Error GoTo ErrorHandlier

StartRow = Selection.Row
For Each DeleteRows In Selection.Rows
    EndRow = DeleteRows.Row
Next
Rows(StartRow & ":" & EndRow).Select
frmDeleteLines.Show

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub InsertBlank()
Dim Result As String

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "TakeOff" Then
        Selection.EntireRow.Select
        frmInsertBlank.Show
    Else
        Result = MsgBox("Use this option on the TakeOff sheet only", vbInformation, "Checklist option")
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Public Sub TakeOffPageView()

Worksheets("TakeOff").Activate

    If Range("TakeOffPageBreakView") Then
        ActiveWindow.View = xlNormalView
        Range("TakeOffPageBreakView") = False
        ActiveWindow.Zoom = Range("SpecZoom")
    Else
        ActiveWindow.View = xlPageBreakPreview
        Range("TakeOffPageBreakView") = True
        ActiveWindow.Zoom = Range("SpecZoom")
    End If

End Sub
Attribute VB_Name = "TempStuff"
Option Explicit

Sub FindCharacter()
Attribute FindCharacter.VB_Description = "Macro recorded 6/24/98 by Richard Press"
Attribute FindCharacter.VB_ProcData.VB_Invoke_Func = " \n14"
Dim tempstring As String
Dim Response As Integer
Dim mypos As Integer
Dim newString As String
Dim SeachString As String
Dim I As Integer
Dim temp As Range
    
    SeachString = Chr(30) '& "b"
    Sheets("CheckList").Activate
For I = 1 To 500
    
        Set temp = Cells.Find(What:=SeachString, After:=ActiveCell, LookIn:=xlFormulas, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
    'If temp is Nothing Then
        tempstring = temp.Value
        temp.Activate
        Response = MsgBox("Delete this Character", vbYesNo)
        If Response = vbYes Then
            mypos = InStr(1, tempstring, SeachString)
            newString = Left(tempstring, mypos - 1) + Mid(tempstring, mypos + 2)
            ActiveCell = newString
        End If
    'End If
Next
    
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Activate()

    Application.ScreenUpdating = False
    SetUpEnviroment
    Application.ScreenUpdating = True

End Sub

Private Sub Workbook_Deactivate()

    Application.ScreenUpdating = False
    RestoreMenus
    Application.ScreenUpdating = True

End Sub

Private Sub Workbook_Open()

    Application.WindowState = xlMaximized
    ActiveWindow.WindowState = xlMaximized
    frmStartUp.Show
    Worksheets("Checklist").Select
    Range("A1").Select

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Dim Response As Integer

On Error GoTo ErrorHandlier

    Application.ScreenUpdating = False
    If ThisWorkbook.Saved = False Then
        Response = MsgBox("Do you wish to save this Project before closing?", vbYesNoCancel + vbExclamation, "SpecWriter")
        If Response = vbYes Then
            Cancel = Not (DefaultSave)
        ElseIf Response = vbNo Then
            ThisWorkbook.Saved = True
        Else
            Cancel = True
        End If
    End If
    Application.ScreenUpdating = True

Error_Exit:

Exit Sub

ErrorHandlier:

    MsgBox (Err.Description)
    Resume Error_Exit

End Sub

Attribute VB_Name = "Values"
Option Explicit
Option Compare Text

Public Sub GenerateValues()

Dim CheckListArray As Variant
Dim ValueArray() As Variant
Dim OutPutLineNo As Integer
Dim ChecklistLineNo As Integer
Dim CurrentCode As Integer
Dim LastCell As String
Dim MarkUp As String
Dim Response As Integer
Dim Response2 As Integer
Dim SheetName As Worksheet
Dim Leftfooter As String
Dim Rightfooter As String
Dim ColonPos As Integer
Dim CancelValue As Boolean

Const GenerateCall = True
Const CodeColCL = 1
Const SelectedColCL = 3
Const SectionNoColCL = 2
Const ItemDescColCL = 5

Const CodeColV = 0
Const Level1ColV = 1
Const CostColV = 2
Const MarkUpColV = 3
Const ExtendedColV = 4

On Error GoTo ErrorHandlier
    
    If Worksheets("ScheduleValues").Visible = False Then
        ThisWorkbook.Unprotect
        Worksheets("ScheduleValues").Visible = True
        Worksheets("Tables").Range("ValuesPage") = True
        'Worksheets("Tables").Select
        ThisWorkbook.Protect
    End If
    If Range(Worksheets("ScheduleValues").PageSetup.PrintArea).Rows.Count > 7 Then
        Response = MsgBox("Do you wish to copy existing Schedule of Values to Prior Values", vbYesNoCancel, "SpecWriter")
        If Response = vbCancel Then
            CancelValue = True
            Response2 = MsgBox("Schedule of Values generation has been cancelled", vbExclamation)
        Else
            If Response = vbYes Then
                Application.ScreenUpdating = False
                Set SheetName = Worksheets("PriorValues")
                With Worksheets("PriorValues")
                    If .Visible = False Then
                        ThisWorkbook.Unprotect
                        .Visible = True
                        Worksheets("Tables").Range("PriorValuesPage") = True
                        ThisWorkbook.Protect
                    End If
                    LastCell = .Range("A1").SpecialCells(xlLastCell).Address
                    Worksheets("ScheduleValues").Cells.Copy .Cells
                    .PageSetup.PrintArea = "A1:E" & .UsedRange.Rows.Count
                End With
            End If
        End If
    End If
    If CancelValue = False Then
        MarkUp = Range("ValueMarkUp")
        ReDim ValueArray(500, 8)
        OutPutLineNo = 0
        ChecklistLineNo = 1
        CheckListArray = Range("EstimateSec2")
        While ChecklistLineNo < UBound(CheckListArray, 1)
            If WorksheetFunction.IsNumber(CheckListArray(ChecklistLineNo, CodeColCL)) And CheckListArray(ChecklistLineNo, ItemDescColCL) <> "" Then
                CurrentCode = CheckListArray(ChecklistLineNo, CodeColCL)
            End If
            ChecklistLineNo = ChecklistLineNo + 1
            While CheckListArray(ChecklistLineNo, SectionNoColCL) <> "" And CheckListArray(ChecklistLineNo, SectionNoColCL) < 6
                If CheckListArray(ChecklistLineNo, ItemDescColCL) <> "" And CheckListArray(ChecklistLineNo, SelectedColCL) = "x" Then
                    IncrementLine OutPutLineNo, ValueArray
                    ValueArray(OutPutLineNo, CodeColV) = CurrentCode
                    ColonPos = InStr(1, CheckListArray(ChecklistLineNo, ItemDescColCL), ":")
                    If ColonPos > 0 Then
                        ValueArray(OutPutLineNo, Level1ColV) = Left(CheckListArray(ChecklistLineNo, ItemDescColCL), ColonPos - 1)
                    Else
                        ValueArray(OutPutLineNo, Level1ColV) = CheckListArray(ChecklistLineNo, ItemDescColCL)
                    End If
                    ValueArray(OutPutLineNo, MarkUpColV) = MarkUp
                    ValueArray(OutPutLineNo, ExtendedColV) = "=C" & OutPutLineNo + 6 & "*(D" & OutPutLineNo + 6 & " + 1)"
                    ChecklistLineNo = ChecklistLineNo + 1
                End If
                ChecklistLineNo = ChecklistLineNo + 1
            Wend
        Wend
        Application.ScreenUpdating = False
        IncrementLine OutPutLineNo, ValueArray
        Set SheetName = Worksheets("ScheduleValues")
        With Worksheets("ScheduleValues")
            .Range("A6:A4000").EntireRow.Delete
            .Range("A6:E" & OutPutLineNo + 5) = ValueArray
            .Range("B4") = Range("ProjectName")
            .Range("E4") = Date
            .Range("D6:D" & OutPutLineNo + 5).Style = "Percent"
            .Range("E6:E" & OutPutLineNo + 5).NumberFormat = "[$$-409]#,##0.00"
            .Range("C6:C" & OutPutLineNo + 5).NumberFormat = "[$$-409]#,##0.00"
            .Range("D4").NumberFormat = "mm/dd/yy"
            .Range("B" & OutPutLineNo + 7) = "Total Contract Price:"
            .Range("E" & OutPutLineNo + 7) = "=sum(E7:E" & OutPutLineNo + 5 & ")"
            .Range("A6:E" & OutPutLineNo + 8).Interior.ColorIndex = 2
            .PageSetup.PrintArea = "A1:E" & OutPutLineNo + 8
        End With
        
        With Worksheets("ScheduleValues").Range("A6:E" & OutPutLineNo + 8).Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("A6:E" & OutPutLineNo + 8).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("A6:E" & OutPutLineNo + 8).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("A6:E" & OutPutLineNo + 8).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("A6:A" & OutPutLineNo + 8).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("B6:B" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("C6:C" & OutPutLineNo + 6).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("D6:D" & OutPutLineNo + 8).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("E6:E" & OutPutLineNo + 8).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 1
        End With
        With Worksheets("ScheduleValues").Range("A" & OutPutLineNo + 7 & ":E" & OutPutLineNo + 7).Borders(xlEdgeTop)
            .LineStyle = xlDouble
            .Weight = xlThick
            .ColorIndex = 1
        End With
        ValueToggleLines (GenerateCall)
        Application.ScreenUpdating = True
        Worksheets("ScheduleValues").Activate
        Range("A1").Select
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
   Resume Error_Exit
        
End Sub

Private Sub IncrementLine(OutPutLineNo, ValueArray)
    
    OutPutLineNo = OutPutLineNo + 1
    
End Sub

Public Sub ShowValuesettings()

    frmValueDisplay.Show
    
End Sub

Public Sub ValueToggleLines(Optional GenerateCall)
Dim GridColor As Integer

If IsMissing(GenerateCall) Then
    GenerateCall = False
End If

If GenerateCall Then
    If Range("ValueGridLines") Then
        GridColor = 15
    Else
        GridColor = 2
    End If
Else
    If Range("ValueGridLines") Then
        Range("ValueGridLines") = False
    Else
        Range("ValueGridLines") = True
    End If
End If

If Range("ValueGridLines") Then
    With Worksheets("ScheduleValues")
        With .Range("A6:E" & .UsedRange.Rows.Count - 2).Borders(xlInsideHorizontal)
            .LineStyle = xlNone
        End With
    End With
Else
    GridColor = 15
    With Worksheets("ScheduleValues")
        With .Range("A6:E" & .UsedRange.Rows.Count - 2).Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = GridColor
        End With
    End With
End If
    
End Sub

Public Sub ValuePageView()

Worksheets("ScheduleValues").Activate

    If Range("ValuePageBreakView") Then
        ActiveWindow.View = xlNormalView
        Range("ValuePageBreakView") = False
        ActiveWindow.Zoom = Range("SpecZoom")
    Else
        ActiveWindow.View = xlPageBreakPreview
        Range("ValuePageBreakView") = True
        ActiveWindow.Zoom = Range("SpecZoom")
    End If

End Sub

Public Sub CallValue()
    Caller = "Value"
    frmWait.Show
End Sub

Attribute VB_Name = "frmAboutSpecWriter"
Attribute VB_Base = "0{7AC39C51-7DE9-11D6-87A7-00034763B29C}{7AC39C16-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
   
    Me.txtMemory = Format(Application.MemoryFree, "#,###,###,###") & " bytes"
    Me.txtOpSys = Application.OperatingSystem
    Me.txtResolution = GetSystemMetrics32(SM_CXSCREEN) & " x " & GetSystemMetrics32(SM_CYSCREEN)
    Me.txtCopyright = "Copyright " & Chr(169) & " 1998 by Power Tools Software, Inc."

End Sub
Attribute VB_Name = "frmDeleteLines"
Attribute VB_Base = "0{7AC39C7E-7DE9-11D6-87A7-00034763B29C}{7AC39C1E-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
















Option Explicit

Private Sub CommandButton1_Click()
    Me.Hide
End Sub

Private Sub CommandButton2_Click()

On Error GoTo ErrorHandlier

    Selection.Delete Shift:=xlUp
    Selection.Resize(1, 1).Select
    Me.Hide
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
   
End Sub

Attribute VB_Name = "frmDisplaySettings"
Attribute VB_Base = "0{7AC39C55-7DE9-11D6-87A7-00034763B29C}{7AC39C20-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    
    Me.Hide
    
End Sub

Private Sub cmdOK_Click()
Dim SpecZoom As Integer
Dim EstimateFont As Integer
Dim SpecSheet As Worksheet
Dim CurrentSheet As String

On Error GoTo ErrorHandlier
    
    Application.ScreenUpdating = False
    ThisWorkbook.Unprotect
    
    Worksheets("Tables").Range("ShowSectionNo") = Me.cbxShowSecNumbers.Value
    Worksheets("Checklist").Columns(2).Hidden = Not Me.cbxShowSecNumbers.Value
        
    Worksheets("Tables").Range("ShowUnitCostCheck") = Me.cbxShowUnitCostCheck
    Worksheets("Checklist").Columns(10).Hidden = Not Me.cbxShowUnitCostCheck.Value
    Worksheets("Checklist").Columns(11).Hidden = Not Me.cbxShowUnitCostCheck.Value
    If Worksheets("Tables").Range("ShowUnitCostCheck") = False And Worksheets("Tables").Range("ShowSectionNo") = True Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 69.5
        Worksheets("Checklist").Columns(9).ColumnWidth = 2
    ElseIf Worksheets("Tables").Range("ShowUnitCostCheck") = True And Worksheets("Tables").Range("ShowSectionNo") = False Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 59
        Worksheets("Checklist").Columns(9).ColumnWidth = 0.75
    ElseIf Worksheets("Tables").Range("ShowUnitCostCheck") = False And Worksheets("Tables").Range("ShowSectionNo") = False Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 72
        Worksheets("Checklist").Columns(9).ColumnWidth = 2
    ElseIf Worksheets("Tables").Range("ShowUnitCostCheck") = True And Worksheets("Tables").Range("ShowSectionNo") = True Then
        Worksheets("Checklist").Columns(6).ColumnWidth = 56.5
        Worksheets("Checklist").Columns(9).ColumnWidth = 0.75
    End If
    
    ' Show Pages
        
    Worksheets("Tables").Range("TakeOffPage") = Me.cbxDisplayTakeOff.Value
    Worksheets("TakeOff").Visible = Me.cbxDisplayTakeOff.Value
      
    Worksheets("Tables").Range("EstimatePage") = Me.cbxDisplayEstimate.Value
    Worksheets("Estimate").Visible = Me.cbxDisplayEstimate.Value
        
    Worksheets("Tables").Range("ValuesPage") = Me.cbxDisplayValues.Value
    Worksheets("ScheduleValues").Visible = Me.cbxDisplayValues.Value
    
    Worksheets("Tables").Range("PriorEstimatePage") = Me.cbxDisplayPriorEstimate.Value
    Worksheets("PriorEstimate").Visible = Me.cbxDisplayPriorEstimate.Value
   
    Worksheets("Tables").Range("PriorValuesPage") = Me.cbxDisplayPriorValues.Value
    Worksheets("PriorValues").Visible = Me.cbxDisplayPriorValues.Value
       
    Worksheets("Tables").Range("ManualPage") = Me.cbxManualCheckList.Value
    Worksheets("FieldNotes").Visible = Me.cbxManualCheckList.Value
       
    CurrentSheet = ActiveSheet.Name
    If Me.opt79Zoom = True Then
        SpecZoom = 79
        Range("SpecZoom") = 79
    ElseIf Me.opt100Zoom = True Then
        SpecZoom = 100
        Range("SpecZoom") = 100
    ElseIf Me.optCustomZoom = True Then
        SpecZoom = Me.txtZoom.Text
        Range("SpecZoom") = Me.txtZoom.Text
    End If
    For Each SpecSheet In Worksheets
        SpecSheet.Activate
        ActiveWindow.Zoom = SpecZoom
    Next
    
    If Me.optEst8Font = True Then
        Range("EstimateFont") = 8
        EstimateFont = 8
    ElseIf Me.optEst9Font = True Then
        Range("EstimateFont") = 9
        EstimateFont = 9
    ElseIf Me.optEst10Font = True Then
        Range("EstimateFont") = 10
        EstimateFont = 10
    End If
    With Worksheets("Estimate")
        .Range("A6:I" & .UsedRange.Rows.Count).Font.Size = EstimateFont
    End With
    
    Worksheets(CurrentSheet).Activate
    ThisWorkbook.Protect
    Unload frmDisplaySettings
    Application.ScreenUpdating = False
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit

End Sub

Private Sub opt100Zoom_Click()
    
    Me.txtZoom.Text = 100
    
End Sub

Private Sub opt79Zoom_Click()

    Me.txtZoom.Text = 79
    
End Sub

Private Sub optCustomZoom_Click()
    
    Me.txtZoom.SetFocus
    
End Sub

Private Sub UserForm_Initialize()
   
On Error GoTo ErrorHandlier

    
    Me.cbxShowUnitCostCheck = Worksheets("Tables").Range("ShowUnitCostCheck")
    Me.cbxShowSecNumbers = Worksheets("Tables").Range("ShowSectionNo")
    
    Me.cbxDisplayTakeOff = Worksheets("Tables").Range("TakeOffPage")
    Me.cbxDisplayEstimate = Worksheets("Tables").Range("EstimatePage")
    Me.cbxDisplayValues = Worksheets("Tables").Range("ValuesPage")
    Me.cbxDisplayTakeOff = Worksheets("Tables").Range("TakeOffPage")
    Me.cbxDisplayPriorEstimate = Worksheets("Tables").Range("PriorEstimatePage")
    Me.cbxDisplayPriorValues = Worksheets("Tables").Range("PriorValuesPage")
    Me.cbxManualCheckList = Worksheets("Tables").Range("ManualPage")
    
    Select Case Range("SpecZoom")
        Case 79
            Me.opt79Zoom = True
            Me.txtZoom = Range("SpecZoom")
        Case 100
            Me.opt100Zoom = True
            Me.txtZoom = Range("SpecZoom")
        Case Else
            Me.optCustomZoom = True
            Me.txtZoom = Range("SpecZoom")
    End Select

    Select Case Range("EstimateFont")
        Case 8
            Me.optEst8Font = True
        Case 9
            Me.optEst9Font = True
        Case Else
            Me.optEst10Font = True
    End Select

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
               
End Sub

Attribute VB_Name = "frmEstimateDisplay"
Attribute VB_Base = "0{7AC39C49-7DE9-11D6-87A7-00034763B29C}{7AC39C22-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub cmdCancel_Click()

    Me.Hide
    
End Sub

Public Sub cmdOK_Click()
    
Application.ScreenUpdating = False

With Worksheets("Estimate")
    If Me.optStandard = True Then
        .Columns("D:G").Hidden = False
        .Columns("C:C").ColumnWidth = 71
        .Columns("G:G").ColumnWidth = 11
        .Columns("H:I").Hidden = True
        Range("EstStandardSetting") = True
        Range("EstCostSetting") = False
        Range("EstMarkupSetting") = False
        Range("EstPriceSetting") = False
    ElseIf Me.optShowCost = True Then
        .Columns("C:C").ColumnWidth = 88
        .Columns("D:I").Hidden = True
        .Columns("G:G").Hidden = False
        .Columns("G:G").ColumnWidth = 14
        Range("EstCostSetting") = True
        Range("EstStandardSetting") = False
        Range("EstMarkupSetting") = False
        Range("EstPriceSetting") = False
    ElseIf Me.optShowMarkup = True Then
        .Columns("C:C").ColumnWidth = 53
        .Columns("D:I").Hidden = False
        .Columns("G:G").ColumnWidth = 11
        .Columns("I:I").ColumnWidth = 11
        Range("EstMarkupSetting") = True
        Range("EstStandardSetting") = False
        Range("EstCostSetting") = False
        Range("EstPriceSetting") = False
    ElseIf Me.optShowPrice = True Then
        .Columns("D:H").Hidden = True
        .Columns("I:I").Hidden = False
        .Columns("I:I").ColumnWidth = 14
        .Columns("C:C").ColumnWidth = 88
        Range("EstPriceSetting") = True
        Range("EstMarkupSetting") = False
        Range("EstStandardSetting") = False
        Range("EstCostSetting") = False
    End If
End With
        
Me.Hide
Application.ScreenUpdating = True

    
End Sub

Private Sub UserForm_Initialize()
        
    Me.lblStandard = Range("EstStandardTxt")
    Me.lblShowCost = Range("EstShowCostTxt")
    Me.lblShowMarkup = Range("EstShowMarkupTxt")
    Me.lblShowPrice = Range("EstShowPriceTxt")
    
    Me.optStandard = Range("EstStandardSetting")
    Me.optShowCost = Range("EstCostSetting")
    Me.optShowMarkup = Range("EstMarkupSetting")
    Me.optShowPrice = Range("EstPriceSetting")
    
End Sub
Attribute VB_Name = "frmHelpHotKeys"
Attribute VB_Base = "0{7AC39C4D-7DE9-11D6-87A7-00034763B29C}{7AC39C24-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False













Option Explicit

Private Sub cmdOK_Click()
    Me.Hide
End Sub
Attribute VB_Name = "frmInsertAllowance"
Attribute VB_Base = "0{7AC39C6E-7DE9-11D6-87A7-00034763B29C}{7AC39C26-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

















Option Explicit


Private Sub Cancel_Click()

    Me.Hide
    
End Sub

Private Sub OK_Click()

On Error GoTo ErrorHandlier

    Range("Allowance").Copy
    ActiveCell.Insert Shift:=xlDown
    Selection.Resize(Range("Allowance").Rows.Count, 1).Rows.Group
    Selection.Resize(1, 1).Select
    Me.Hide

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Attribute VB_Name = "frmInsertBlank"
Attribute VB_Base = "0{7AC39C86-7DE9-11D6-87A7-00034763B29C}{7AC39C28-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
















Option Explicit

Private Sub Cancel_Click()

    Me.Hide
    
End Sub

Private Sub OK_Click()
Dim I As Integer

On Error GoTo ErrorHandlier

    Range("MeasureBlank").Copy
    Cells(Selection.Row, 1).Insert Shift:=xlDown
    Selection.Resize(1, 1).Select
    Me.Hide

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Attribute VB_Name = "frmInsertLines"
Attribute VB_Base = "0{7AC39C7A-7DE9-11D6-87A7-00034763B29C}{7AC39C2A-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub Cancel_Click()

    Me.Hide
    
End Sub

Private Sub OK_Click()
Dim InsertRange As Range

On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "CheckList" Then
        Selection.EntireRow.Insert
        Set InsertRange = Selection
        If Cells(Selection.Row - 1, 2) <> "" Then
            Selection.Resize(1, 1).Offset(-1, 0).EntireRow.Copy
            Cells(Selection.Row, 1).PasteSpecial Paste:=xlPasteFormats
            Cells(Selection.Row - 1, 2).Copy
            ActiveSheet.Paste Destination:=InsertRange.Columns(2)
        Else
            Selection.Offset(1, 0).EntireRow.Copy
            Cells(Selection.Row, 1).PasteSpecial Paste:=xlPasteFormats
            Cells(Selection.Row + 1, 2).Copy
            ActiveSheet.Paste Destination:=InsertRange.Columns(2)
        End If
        Selection.Cells(3).Select
    End If
    
    If ActiveSheet.Name = "TakeOff" Then
        
        Selection.EntireRow.Insert
        
    End If
    Selection.Resize(1, 1).Select
    Application.CutCopyMode = False
    Me.Hide

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Attribute VB_Name = "frmInsertNewCat"
Attribute VB_Base = "0{7AC39C72-7DE9-11D6-87A7-00034763B29C}{7AC39C2C-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub Cancel_Click()

    Me.Hide
    
End Sub

Private Sub OK_Click()
Dim I As Integer

On Error GoTo ErrorHandlier
    
    'If Cells(Selection.Row, 2) = "" Then
    If Cells(Selection.Row, 1).Interior.ColorIndex = 2 Or Cells(Selection.Row, 1).Interior.ColorIndex = xlNone Then
        Selection.Offset(1, 0).EntireRow.Insert
        Range("SpecialCatagory").Copy
        Cells(Selection.Row + 1, 1).Insert Shift:=xlDown
        Rows(Selection.Row + 2 & ":" & Range("SpecialCatagory").Rows.Count + Selection.Row).Group
        Cells(Selection.Row + 1, 1).Select
        ActiveWindow.ScrollRow = ActiveCell.Row - 1
    Else
        I = 0
        'While Cells(Selection.Row + i, 2) <> ""
        While Cells(Selection.Row + I, 1).Interior.ColorIndex <> 2 And Cells(Selection.Row + I, 1).Interior.ColorIndex <> xlNone
            I = I + 1
        Wend
        Selection.Offset(1 + I, 0).EntireRow.Insert
        Range("SpecialCatagory").Copy
        Cells(Selection.Row + 1 + I, 1).Insert Shift:=xlDown
        Rows(Selection.Row + 2 + I & ":" & Range("SpecialCatagory").Rows.Count + Selection.Row + I).Group
        Cells(Selection.Row + 1 + I, 1).Select
        ActiveWindow.ScrollRow = ActiveCell.Row - 1
    End If
    
    Me.Hide
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Attribute VB_Name = "frmInsertNewRoom"
Attribute VB_Base = "0{7AC39C8E-7DE9-11D6-87A7-00034763B29C}{7AC39C40-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdCancel_Click()

    Me.Hide
    
End Sub

Private Sub cmdOK_Click()
Dim I As Integer
Dim ButtonRange As Range

On Error GoTo ErrorHandlier

    Set ButtonRange = Worksheets("checklist").cmdAddRoom.TopLeftCell
    I = 0
    While Cells(ButtonRange.Row + I, 1).Interior.ColorIndex <> 2 And Cells(ButtonRange.Row + I, 1).Interior.ColorIndex <> xlNone
        I = I + 1
    Wend
    ButtonRange.Offset(1 + I, 0).EntireRow.Insert
    Range("AdditionalRoom").Copy
    Cells(ButtonRange.Row + 1 + I, 1).Insert Shift:=xlDown
    Rows(ButtonRange.Row + 2 + I & ":" & Range("AdditionalRoom").Rows.Count + ButtonRange.Row + I).Group
    Range("I" & Range("AdditionalRoom").Rows.Count + ButtonRange.Row + I + 1).Borders(xlEdgeRight).LineStyle = xlContinuous
    Cells(ButtonRange.Row + 1 + I, 1).Select
    ActiveWindow.ScrollRow = ActiveCell.Row - 1
        
Error_Exit:
    
Me.Hide

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Attribute VB_Name = "frmInsertOption"
Attribute VB_Base = "0{7AC39C6A-7DE9-11D6-87A7-00034763B29C}{7AC39C2E-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


















Option Explicit


Private Sub Cancel_Click()

    Me.Hide
    
End Sub

Private Sub OK_Click()

On Error GoTo ErrorHandlier

    Range("Option").Copy
    ActiveCell.Insert Shift:=xlDown
    Selection.Resize(Range("Option").Rows.Count, 1).Rows.Group
    Selection.Resize(1, 1).Select
    Me.Hide

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
End Sub


Attribute VB_Name = "frmInsertSpecialNote"
Attribute VB_Base = "0{7AC39C76-7DE9-11D6-87A7-00034763B29C}{7AC39C30-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False















Option Explicit

Private Sub Cancel_Click()

    Me.Hide
    
End Sub

Private Sub OK_Click()

On Error GoTo ErrorHandlier

    Selection.EntireRow.Insert
    
    If Cells(Selection.Row - 1, 2) <> "" Then
        Selection.Offset(-1, 0).EntireRow.Copy
        Cells(Selection.Row, 1).PasteSpecial Paste:=xlPasteFormats
        Cells(Selection.Row - 1, 2).Copy Cells(Selection.Row, 2)
        
    Else
        Selection.Offset(1, 0).EntireRow.Copy
        Cells(Selection.Row, 1).PasteSpecial Paste:=xlPasteFormats
        Cells(Selection.Row + 1, 2).Copy Cells(Selection.Row, 2)
        
    End If
    
    Cells(Selection.Row, 6) = "Special Note: "
    Cells(Selection.Row, 6).Select
    SendKeys "{F2}"
    
    Me.Hide

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Attribute VB_Name = "frmLookUp"
Attribute VB_Base = "0{7AC39C62-7DE9-11D6-87A7-00034763B29C}{7AC39C32-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub cmdCancel_Click()

    Me.Hide
    
End Sub

Private Sub cmdOK_Click()
Dim LookupRange As String
Dim Position As Integer

On Error GoTo ErrorHandlier

    Application.ScreenUpdating = False
    LookupRange = lbxLookUp.Column(2)
    Worksheets("CheckList").Activate
    Range(LookupRange).Select
    Position = ActiveCell.Offset(1).Row
    If ActiveCell.Offset(1).EntireRow.Hidden = True Then
        ExecuteExcel4Macro "SHOW.DETAIL(1," & Position & ",TRUE)"
    End If
    ActiveWindow.ScrollRow = ActiveCell.Row - 1
    If ActiveCell.Offset(0, 1) <> "" Then
        ActiveCell.Offset(0, 2).Select
    Else
        ActiveCell.Offset(1, 2).Select
    End If
    Me.Hide
    Application.ScreenUpdating = True

Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Private Sub lbxLookUp_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Dim LookupRange As String
Dim Position As Integer

On Error GoTo ErrorHandlier

    cmdOK_Click
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Attribute VB_Name = "frmProgramSettings"
Attribute VB_Base = "0{7AC39C59-7DE9-11D6-87A7-00034763B29C}{7AC39C34-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    
    Me.Hide
    
End Sub

Private Sub cmdOK_Click()
Dim ProjectNameChange As Boolean
Dim Response As Integer

On Error GoTo ErrorHandlier
    
    Application.ScreenUpdating = False
    ThisWorkbook.Unprotect

    With Worksheets("Tables")
        If .Range("ProjectName") <> Me.txtProjectName.Text Then
            ProjectNameChange = True
        End If
        .Range("ProjectName") = Me.txtProjectName.Text
        .Range("CompanyName") = Me.txtCompanyName.Text
        .Range("DefaultDirectory") = Me.txtdefaultDir
        .Range("CautionMessages") = Me.cbxDisplayCaution
        .Range("EstimateMarkUp") = Me.txtEstimateMarkUp / 100
        .Range("ValueMarkUp") = Me.txtValueMarkUp / 100
    End With
           
    If ProjectNameChange Then
        Response = MsgBox("For this change to take effect this file must be saved. Do you want to save this file now.", vbInformation + vbYesNo, "Save File")
        If Response = vbYes Then
            DefaultSave
        End If
    End If
    Worksheets("CheckList").Range("D4") = Me.txtProjectName.Text
    Worksheets("Specifications").Range("B4") = Me.txtProjectName.Text
    Worksheets("TakeOff").Range("B4") = Me.txtProjectName.Text
    Worksheets("Estimate").Range("B4") = Me.txtProjectName.Text
    Worksheets("ScheduleValues").Range("B4") = Me.txtProjectName.Text
    'Application.DefaultFilePath = Me.txtdefaultDir
    
    'Worksheets(CurrentSheet).Activate
    ThisWorkbook.Protect
    Unload Me
    Application.ScreenUpdating = False


Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Private Sub UserForm_Initialize()

On Error GoTo ErrorHandlier

With Worksheets("Tables")
    Me.txtProjectName.Text = .Range("ProjectName")
    Me.txtCompanyName.Text = .Range("CompanyName")
    Me.txtdefaultDir = .Range("DefaultDirectory")
    Me.txtEstimateMarkUp = .Range("EstimateMarkUp") * 100
    Me.txtValueMarkUp = .Range("ValueMarkUp") * 100
    Me.cbxDisplayCaution = .Range("CautionMessages")

End With
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub

Private Sub CmdReset_Click()
        
    PrintPageSetup

End Sub
Attribute VB_Name = "frmStartUp"
Attribute VB_Base = "0{7AC39C8A-7DE9-11D6-87A7-00034763B29C}{7AC39C36-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub UserForm_Activate()

    Application.ScreenUpdating = False
    Me.Repaint
    SetUpEnviroment
    ResetAllSheet
    Application.ScreenUpdating = True
    Application.ScreenUpdating = False
    Application.Wait Now + TimeValue("00:00:05")
    Application.ScreenUpdating = True
    Worksheets("Checklist").Select
    Range("A1").Select
    Unload Me
    
    
End Sub

Private Sub UserForm_Initialize()

    lblSplashText = ThisWorkbook.Worksheets("Tables").Range("SplashText1") & Chr(13) & ThisWorkbook.Worksheets("Tables").Range("SplashText2") & Chr(13) & ThisWorkbook.Worksheets("Tables").Range("SplashText3") & " " & Range("CompanyName")

End Sub


Attribute VB_Name = "frmTakeoffLookUp"
Attribute VB_Base = "0{7AC39C5E-7DE9-11D6-87A7-00034763B29C}{7AC39C38-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit
Dim Cancel As Boolean

Private Sub cmdOK_Click()


On Error GoTo ErrorHandlier

    If ActiveSheet.Name = "Estimate" Then
        Cells(Selection.Row, 4) = Me.lstTakeOffLookup.Column(3)
    End If
    
    Unload frmTakeoffLookUp
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
          
    Resume Error_Exit
    
End Sub


Private Sub lstTakeOffLookup_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    
    cmdOK_Click
    
End Sub


Private Sub UserForm_Initialize()
Dim TakeOffRow As Range
Dim TakeOffarray() As Variant
Dim Response As Integer
Dim ActiveCellRange As String
Dim IndexedRange As Integer

On Error GoTo ErrorHandlier
    
    If ActiveSheet.Name = "Estimate" Then
        Cells(Selection.Row, 4).Select
        ActiveCellRange = ActiveCell.Formula
        ReDim TakeOffarray(Range("TakeOff").Rows.Count - 1, 3)
        For Each TakeOffRow In Range("TakeOff").Rows
            If TakeOffRow.Cells(1) <> "" Then
                TakeOffarray(TakeOffRow.Row - 10, 0) = TakeOffRow.Cells(1)
                TakeOffarray(TakeOffRow.Row - 10, 1) = Format(TakeOffRow.Cells(4), "##,##0.00")
                TakeOffarray(TakeOffRow.Row - 10, 2) = TakeOffRow.Cells(5)
                TakeOffarray(TakeOffRow.Row - 10, 3) = "=" & "TakeOff!" & TakeOffRow.Cells(4).Address(False, False)
                If TakeOffarray(TakeOffRow.Row - 10, 3) = ActiveCellRange Then
                    IndexedRange = TakeOffRow.Row - 10
                End If
            End If
        Next
        Me.lstTakeOffLookup.List() = TakeOffarray
        If lstTakeOffLookup.ListCount > IndexedRange + 8 Then
            Me.lstTakeOffLookup.Selected(IndexedRange + 8) = True
        End If
        Me.lstTakeOffLookup.Selected(IndexedRange) = True
    Else
        Response = MsgBox("You must be on the Estimate sheet to use the function", vbExclamation, "specWriter")
        End
        'Me.Hide
    End If
    
Error_Exit:
    
Exit Sub

ErrorHandlier:
    
    MsgBox (Err.Description)
    Resume Error_Exit
    
End Sub

Private Sub cmdCancel_Click()
    
    Unload frmTakeoffLookUp
    Application.ScreenUpdating = True
       
End Sub

Attribute VB_Name = "frmTemplates"
Attribute VB_Base = "0{7AC39C66-7DE9-11D6-87A7-00034763B29C}{7AC39C3A-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim RememberCell As Range
Dim RememberSheet As Worksheet
Dim Action As String
Dim ButtonPressed As Boolean

Private Sub CmdUse_Click()

On Error GoTo ErrorHandlier
        
    ResetTemplateForm
    Action = "Use"
    ButtonPressed = True
    Me.lblTemplateAction = "Please select the template you wish to use"
    If IsNull(lstbxSelectProject) = False Then
        Me.cmdOK.Enabled = True
        txtProjectName.Enabled = False
        txtProjectName.BackColor = &H80000005
        txtProjectName.Text = lstbxSelectProject.Column(0)
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub CmdAdd_Click()

On Error GoTo ErrorHandlier

    ResetTemplateForm
    Action = "Add"
    ButtonPressed = True
    Me.lblTemplateAction = "Please enter the name of the new template"
    Me.lstbxSelectProject.Enabled = False
    Me.lstbxSelectProject.BackColor = &H80000004
    txtProjectName.Enabled = True
    txtProjectName.BackColor = &H80000005
    txtProjectName.Text = ""
    txtProjectName.SetFocus

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub CmdReplace_Click()

On Error GoTo ErrorHandlier

    ResetTemplateForm
    Action = "Replace"
    ButtonPressed = True
    Me.lblTemplateAction = "Please select the template to be replaced."
    If IsNull(lstbxSelectProject) = False Then
        Me.cmdOK.Enabled = True
        txtProjectName.Enabled = False
        txtProjectName.BackColor = &H80000005
        txtProjectName.Text = lstbxSelectProject.Column(0)
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub CmdRename_Click()

On Error GoTo ErrorHandlier

    ResetTemplateForm
    Action = "Rename"
    ButtonPressed = True
    Me.lblTemplateAction = "Please select the template you wish to rename."
    If IsNull(lstbxSelectProject) = False Then
        txtProjectName.Enabled = True
        txtProjectName.BackColor = &H80000005
        txtProjectName.Text = lstbxSelectProject.Column(0)
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub CmdDelete_Click()

On Error GoTo ErrorHandlier

    ResetTemplateForm
    Action = "Delete"
    ButtonPressed = True
    Me.lblTemplateAction = "Please select the template you wish to delete."
    If IsNull(lstbxSelectProject) = False Then
        Me.cmdOK.Enabled = True
        txtProjectName.Enabled = False
        txtProjectName.BackColor = &H80000005
        txtProjectName.Text = lstbxSelectProject.Column(0)
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub


Private Sub cmdCancel_Click()

    Me.Hide
    Application.ScreenUpdating = True
       
End Sub

Private Sub cmdOK_Click()
Dim Response As Integer
Dim cell As Range
Dim UniqueName As Boolean
Dim NewTemplateName As String

On Error GoTo ErrorHandlier

Select Case Action
Case "Use"
    If IsNull(lstbxSelectProject) = True Then
        Response = MsgBox("Please select a template first.", vbOKOnly, "Use Templates")
    Else
        If Range("CautionMessages") = True Then
            Response = MsgBox("Please verify that you wish to replace the existing template '" & Range("ActiveTemplateName") & "'" & vbNewLine & "with the template '" & lstbxSelectProject.Column(0) & "'.", vbOKCancel, "Use Templates")
            If Response = vbOK Then
                ExecuteUse
            End If
        Else
            ExecuteUse
        End If
    End If
Case "Add"
    NewTemplateName = frmTemplates.txtProjectName
    UniqueName = True
    For Each cell In Range("CurrentTemplates").Columns(1).Cells
        If cell.Value = NewTemplateName Then
            UniqueName = False
        End If
    Next
    If UniqueName = False Then
        Response = MsgBox("This project name already exists. Please use a different name", vbExclamation, "SpecWriter")
    ElseIf IsNull(Me.txtProjectName) = True Or Me.txtProjectName = "" Then
        Response = MsgBox("Please enter a valid template name.", vbOKOnly, "Add Templates")
    Else
        If Range("CautionMessages") = True Then
            Response = MsgBox("Please verify that you wish to save the current checklist selections to the  " & vbNewLine & "named template '" & NewTemplateName & "'.", vbOKCancel, "Add Templates")
            If Response = vbOK Then
                ExecuteAdd (NewTemplateName)
            End If
        Else
            ExecuteAdd (NewTemplateName)
        End If
    End If
Case "Replace"
    If IsNull(lstbxSelectProject) = True Then
        Response = MsgBox("Please select a template first.", vbOKOnly, "Replace existing Templates")
    Else
        If Range("CautionMessages") = True Then
            Response = MsgBox("Please verify that you wish to replace the existing template  " & vbNewLine & "'" & frmTemplates.txtProjectName & "' with the current checklist selections.", vbOKCancel, "Replace Existing Templates")
            If Response = vbOK Then
                ExecuteReplace
            End If
        Else
            ExecuteReplace
        End If
    End If
Case "Rename"
    NewTemplateName = frmTemplates.txtProjectName
    UniqueName = True
    For Each cell In Range("CurrentTemplates").Columns(1).Cells
        If cell.Value = NewTemplateName Then
            UniqueName = False
        End If
    Next
    If UniqueName = False Then
        Response = MsgBox("This project name already exists. Please use a different name", vbExclamation, "Rename an Existing Template")
    ElseIf IsNull(Me.txtProjectName) = True Then
        Response = MsgBox("Please enter a new template name.", vbOKOnly, "Add Templates")
    Else
        If Range("CautionMessages") = True Then
            Response = MsgBox("Please verify that you wish to rename the existing template '" & lstbxSelectProject.Column(0) & "'" & vbNewLine & "with the name '" & frmTemplates.txtProjectName & "'.", vbOKCancel, "Rename an existing Template")
            If Response = vbOK Then
                ExecuteRename (NewTemplateName)
            End If
        Else
            ExecuteRename (NewTemplateName)
        End If
    End If
Case "Delete"
    If IsNull(lstbxSelectProject) = True Then
        Response = MsgBox("Please select a template first.", vbOKOnly, "Delete an existing Templates")
    ElseIf Range("CautionMessages") = True Then
        Response = MsgBox("Please verify that you wish to Delete the existing template '" & lstbxSelectProject.Column(0) & "'.", vbOKCancel, "Delete an existing Templates")
        If Response = vbOK Then
            ExecuteDelete
        End If
    Else
        ExecuteDelete
    End If
    
End Select

Remember

Error_Exit:
Unload Me

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
        
End Sub

Private Sub ExecuteDelete()
Dim cell As Range
Dim ColumnNo As Integer
Dim SelectedCell As Range

On Error GoTo ErrorHandlier

    ColumnNo = Range(lstbxSelectProject.Column(1)).Column
    If lstbxSelectProject.Column(0) = Range("ActiveTemplateName") Then
        Range("ActiveTemplateName") = Empty
        Range("ActiveTemplateRange") = Empty
    End If
    ActiveWorkbook.Names(lstbxSelectProject.Column(1)).Delete
    Worksheets("CheckList").Columns(ColumnNo).Delete
    For Each cell In Range("CurrentTemplates")
        If cell = lstbxSelectProject.Column(0) Then
            Set SelectedCell = cell
        End If
    Next
    SelectedCell.EntireRow.Delete
    ResetTemplateForm
    AddRows


Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Public Sub ExecuteUse()
Dim ColumnNo As Integer

On Error GoTo ErrorHandlier

        ColumnNo = Range(lstbxSelectProject.Column(1)).Column
        Range("ActiveTemplateName") = lstbxSelectProject.Column(0)
        Range("ActiveTemplateRange") = lstbxSelectProject.Column(1)
        Worksheets("CheckList").Columns(ColumnNo).Copy
        Worksheets("CheckList").Range("Tags").PasteSpecial Paste:=xlFormulas
        Application.CutCopyMode = False
        Worksheets("CheckList").Activate
        Range("A1").Select
        ResetTemplateForm
        AddRows
        Me.Hide

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
        
End Sub

Public Sub ExecuteAdd(NewTemplateName)
Dim mypos As Variant
Dim NewRangeName As String
Dim RowCount As Integer
Dim I As Integer
Dim Response As Integer
Dim InvalideChar As Boolean

On Error GoTo ErrorHandlier

    NewRangeName = NewTemplateName
    For I = 1 To Len(NewTemplateName)
        If Mid(NewTemplateName, I, 1) Like "[!A-Z]" _
            And Mid(NewTemplateName, I, 1) Like "[!a-z]" _
            And Mid(NewTemplateName, I, 1) Like "[!0-9]" _
            And Mid(NewTemplateName, I, 1) <> " " Then
            I = Len(NewTemplateName)
            InvalideChar = True
        End If
    Next
    If Not InvalideChar Then
        mypos = InStr(1, NewRangeName, " ") Or InStr(1, NewRangeName, "'")
        While mypos <> 0
            Mid(NewRangeName, mypos, 1) = "_"
            mypos = InStr(1, NewRangeName, " ")
        Wend
        RowCount = Range("CurrentTemplates").Rows.Count
        Range("CurrentTemplates").Rows(RowCount - 1).EntireRow.Insert
        Range("CurrentTemplates").Cells(RowCount - 1, 1) = NewTemplateName
        Range("CurrentTemplates").Cells(RowCount - 1, 2) = NewRangeName
        Range("CurrentTemplates").Sort Key1:=Range("CurrentTemplates").Cells(1), Order1:=xlAscending
        Worksheets("CheckList").Columns(15).Insert Shift:=xlToRight
        ActiveWorkbook.Names.Add Name:=NewRangeName, RefersToR1C1:="=CheckList!R2C15"
        Worksheets("CheckList").Range("Tags").Copy
        Worksheets("CheckList").Columns(Range(NewRangeName).Column).EntireColumn.PasteSpecial Paste:=xlFormulas
        Application.CutCopyMode = False
        Worksheets("CheckList").Range("O2") = NewTemplateName
        ResetTemplateForm
        Remember
        AddRows
        Range("ActiveTemplateName") = NewTemplateName
        Range("ActiveTemplateRange") = NewRangeName
    Else
        Response = MsgBox("Please only use these characters " & vbNewLine & "in your template name:   " & vbNewLine & vbNewLine & _
            "               A to Z" & vbNewLine & _
            "               a to z" & vbNewLine & _
            "               0 to 9" & vbNewLine & _
            "               Space", vbExclamation, "Invalide Character in Template Name")
        txtProjectName.SetFocus
    End If
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
                
End Sub

Public Sub ExecuteReplace()
Dim ColumnNo As Integer

On Error GoTo ErrorHandlier
    
    ColumnNo = Range(lstbxSelectProject.Column(1)).Column
    Worksheets("CheckList").Range("Tags").Copy
    Worksheets("CheckList").Columns(ColumnNo).PasteSpecial Paste:=xlFormulas
    Application.CutCopyMode = False
    Range(lstbxSelectProject.Column(1)) = lstbxSelectProject.Column(0)
    ResetTemplateForm
    AddRows

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
                
End Sub

Public Sub ExecuteRename(NewTemplateName)
Dim mypos As Variant
Dim SpecCell As Range
Dim NewRangeName As String
Dim SelectedProject As String
Dim SelectedProjectRange As String
Dim I As Integer
Dim Response As Integer
Dim InvalideChar As Boolean

On Error GoTo ErrorHandlier

    SelectedProject = lstbxSelectProject.Column(0)
    SelectedProjectRange = lstbxSelectProject.Column(1)
    
    NewRangeName = NewTemplateName
    For I = 1 To Len(NewTemplateName)
        If Mid(NewTemplateName, I, 1) Like "[!A-Z]" _
            And Mid(NewTemplateName, I, 1) Like "[!a-z]" _
            And Mid(NewTemplateName, I, 1) Like "[!0-9]" _
            And Mid(NewTemplateName, I, 1) <> " " Then
            I = Len(NewTemplateName)
            InvalideChar = True
        End If
    Next
    If Not InvalideChar Then
        mypos = InStr(1, NewRangeName, " ") Or InStr(1, NewRangeName, "'")
        While mypos <> 0
            Mid(NewRangeName, mypos, 1) = "_"
            mypos = InStr(1, NewRangeName, " ")
        Wend
        For Each SpecCell In Range("CurrentTemplates").Columns(1).Cells
            If SpecCell.Value = SelectedProject Then
                SpecCell.Value = NewTemplateName
                SpecCell.Offset(0, 1).Value = NewRangeName
            End If
        Next
        If Range("ActiveTemplateName") = SelectedProject Then
            Range("ActiveTemplateName") = NewTemplateName
            Range("ActiveTemplateRange") = NewRangeName
        End If
        Range(SelectedProjectRange) = NewTemplateName
        ActiveWorkbook.Names.Add Name:=NewRangeName, RefersTo:="=CheckList!" & Range(SelectedProjectRange).Address
        ActiveWorkbook.Names(SelectedProjectRange).Delete
        ResetTemplateForm
        AddRows
    Else
        Response = MsgBox("Please only use these characters " & vbNewLine & "in your template name:   " & vbNewLine & vbNewLine & _
            "               A to Z" & vbNewLine & _
            "               a to z" & vbNewLine & _
            "               0 to 9" & vbNewLine & _
            "               Space", vbExclamation, "Invalide Character in Template Name")
        txtProjectName.SetFocus
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub lstbxSelectProject_Click()
Dim Response As String
Dim TemplateName As String

On Error GoTo ErrorHandlier

If ButtonPressed = True Then
    If IsNull(lstbxSelectProject) = False Then
        If Action = "Delete" Or Action = "Use" Or Action = "Replace" Then
            cmdOK.Enabled = True
            Me.txtProjectName.Enabled = False
        Else
            cmdOK.Enabled = False
            Me.txtProjectName.Enabled = True
            txtProjectName.SetFocus
        End If
        TemplateName = lstbxSelectProject.Column(0)
        txtProjectName.BackColor = &H80000005
        txtProjectName = TemplateName
    End If
End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
End Sub


Private Sub txtProjectName_Change()
Dim textlenght As Integer

On Error GoTo ErrorHandlier

    textlenght = Len(Me.txtProjectName.Text)
    If textlenght > 0 Then
        Me.cmdOK.Enabled = True
    Else
        Me.cmdOK.Enabled = False
    End If

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub UserForm_Initialize()

On Error GoTo ErrorHandlier

    Set RememberCell = ActiveCell
    Set RememberSheet = ActiveSheet
    AddRows
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
            
End Sub

Private Sub Remember()

    RememberSheet.Activate
    RememberCell.Select
    
End Sub

Public Sub AddRows()
Dim ListRow As String
Dim TemplateRange As Range

On Error GoTo ErrorHandlier

    Set TemplateRange = Worksheets("Tables").Range("CurrentTemplates")
    If TemplateRange.Rows.Count > 2 Then
        ListRow = "Tables!" & Range(TemplateRange.Rows(1).Columns(1).Address, TemplateRange.Rows(TemplateRange.Rows.Count - 2).Columns(2).Address).Address
    Else
        ListRow = Empty
    End If
    lstbxSelectProject.RowSource = ListRow
    If lstbxSelectProject.RowSource = Empty Then
        cmdRename.Enabled = False
        cmdDelete.Enabled = False
        cmdReplace.Enabled = False
    Else
        cmdRename.Enabled = True
        cmdDelete.Enabled = True
        cmdReplace.Enabled = True
    End If
    
Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
                  
End Sub

Public Sub ResetTemplateForm()

On Error GoTo ErrorHandlier
    
    Me.lstbxSelectProject.BackColor = &H80000005
    Me.lstbxSelectProject.Enabled = True
    txtProjectName.BackColor = &H80000004
    txtProjectName = ""
    Me.lblTemplateAction = ""
    Me.cmdOK.Enabled = False
    ButtonPressed = False

Error_Exit:

Exit Sub

ErrorHandlier:
    
   MsgBox (Err.Description)
   Resume Error_Exit
           
End Sub
Attribute VB_Name = "frmValueDisplay"
Attribute VB_Base = "0{7AC39C82-7DE9-11D6-87A7-00034763B29C}{7AC39C3C-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
        
    Me.lblShowCost = Range("ValShowCostTxt")
    Me.lblShowPrice = Range("ValShowPriceTxt")
    
    Me.optCostMarkup = Range("ValCostSetting")
    Me.optShowPrice = Range("ValPriceSetting")
   
End Sub


Private Sub cmdCancel_Click()

    Me.Hide
    
End Sub

Private Sub cmdOK_Click()
    
With Worksheets("ScheduleValues")
    If Me.optCostMarkup = True Then
        .Columns("C:D").Hidden = False
        .Columns("B:B").ColumnWidth = 65
        .Columns("E:E").ColumnWidth = 15
        Range("ValCostSetting") = True
        Range("ValPriceSetting") = False
    ElseIf Me.optShowPrice = True Then
        .Columns("B:B").ColumnWidth = 82
        .Columns("E:E").ColumnWidth = 15
        .Columns("C:D").Hidden = True
        Range("ValCostSetting") = False
        Range("ValPriceSetting") = True
    End If
End With
        
Me.Hide
    
End Sub
Attribute VB_Name = "frmWait"
Attribute VB_Base = "0{7AC39C45-7DE9-11D6-87A7-00034763B29C}{7AC39C3E-7DE9-11D6-87A7-00034763B29C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Activate()

Me.Repaint
frmWait.MousePointer = fmMousePointerHourGlass

Select Case Caller
    Case "Specifications"
        GenerateSpecificationMain
    Case "FieldNotes"
        FieldNotes
    Case "Estimate"
        GenerateEstimate
    Case "Value"
        GenerateValues
    Case "ZipUp"
        ZipUp
End Select

frmWait.MousePointer = fmMousePointerDefault

Unload Me

End Sub

Private Sub UserForm_Initialize()

Select Case Caller
    Case "Specifications"
        lblMessage = "Generating Specifications ... Please wait"
    Case "FieldNotes"
        lblMessage = "Generating Field Notes ... Please wait"
    Case "Estimate"
        lblMessage = "Generating Estimate ... Please wait"
    Case "Value"
        lblMessage = "Generating Schedule of Values ... Please wait"
    Case "ZipUp"
        lblMessage = "Creating zip file ... Please wait - 1 min approx."
End Select

End Sub

' InQuest injected base64 decoded content
' $.+-F
' *^r'
' y*^r'
' )^J)

INQUEST-PP=macro
