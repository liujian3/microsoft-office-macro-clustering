Attribute VB_Name = "CreatePDF"
Option Explicit

'Note: The macro's in this module call the functions in the "FunctionsModule"
'Be sure that you also copy the code from this module if you want to use it in your own workbook.

Sub RDB_Workbook_To_PDF()
    Dim FileName As String

    'Call the function with the correct arguments
    FileName = RDB_Create_PDF(ActiveWorkbook, "", True, True)

    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveWorkbook, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    If FileName <> "" Then
        'Ok, you find the PDF where you saved it
        'You can call the mail macro here if you want
    Else
        MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
               "Microsoft Add-in is not installed" & vbNewLine & _
               "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
               "The path to Save the file in arg 2 is not correct" & vbNewLine & _
               "You didn't want to overwrite the existing PDF if it exist"
    End If
End Sub



Sub RDB_Worksheet_Or_Worksheets_To_PDF()
    Dim FileName As String

    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If

    'Call the function with the correct arguments
    'Tip: You can also use Sheets("Sheet3") instead of ActiveSheet in the code(sheet not have to be active then)
    FileName = RDB_Create_PDF(ActiveSheet, "", True, True)

    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveSheet, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    If FileName <> "" Then
        'Ok, you find the PDF where you saved it
        'You can call the mail macro here if you want
    Else
        MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
               "Microsoft Add-in is not installed" & vbNewLine & _
               "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
               "The path to Save the file in arg 2 is not correct" & vbNewLine & _
               "You didn't want to overwrite the existing PDF if it exist"
    End If
End Sub



Sub RDB_Selection_Range_To_PDF()
    Dim FileName As String

    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "ungroup the sheets and try the macro again"
    Else
        'Call the function with the correct arguments


        'For a fixed range use this line
        FileName = RDB_Create_PDF(Range("A10:I15"), "", True, True)

        'For the selection use this line
        'FileName = RDB_Create_PDF(Selection, "", True, True)

        'For a fixed file name and overwrite it each time you run the macro use
        'RDB_Create_PDF(Selection, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

        If FileName <> "" Then
            'Ok, you find the PDF where you saved it
            'You can call the mail macro here if you want
        Else
            MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
                   "Microsoft Add-in is not installed" & vbNewLine & _
                   "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
                   "The path to Save the file in arg 2 is not correct" & vbNewLine & _
                   "You didn't want to overwrite the existing PDF if it exist"
        End If
    End If
End Sub



Sub RDB_Sheet_Level_Names_To_PDF()
    Dim FileName As String

    'Call the function with the correct arguments
    FileName = Create_PDF_Sheet_Level_Names("addtopdf", "", True, True)

    'For a fixed file name and overwrite it each time you run the macro use
    'Create_PDF_Sheet_Level_Names("addtopdf", _
     '         "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    If FileName <> "" Then
        'Ok, you find the PDF where you saved it
        'You can call the mail macro here if you want
    Else
        MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
               "Microsoft Add-in is not installed" & vbNewLine & _
               "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
               "The path to Save the file in arg 2 is not correct" & vbNewLine & _
               "You didn't want to overwrite the existing PDF if it exist"
    End If
End Sub




Attribute VB_Name = "CreatePDFMail"
Option Explicit

'Note: The macro's in this module call the functions in the "FunctionsModule"
'Be sure that you also copy the code from this module if you want to use it in your own workbook.

Sub RDB_Workbook_To_PDF_And_Create_Mail()
    Dim FileName As String

    'Call the function with the correct arguments
    FileName = RDB_Create_PDF(ActiveWorkbook, "", True, False)

    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveWorkbook, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    If FileName <> "" Then
        RDB_Mail_PDF_Outlook FileName, "ron@debruin.nl", "This is the subject", _
                             "See the attached PDF file with the last figures" _
                           & vbNewLine & vbNewLine & "Regards Ron de bruin", False
    Else
        MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
               "Microsoft Add-in is not installed" & vbNewLine & _
               "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
               "The path to Save the file in arg 2 is not correct" & vbNewLine & _
               "You didn't want to overwrite the existing PDF if it exist"
    End If
End Sub



Sub RDB_Worksheet_Or_Worksheets_To_PDF_And_Create_Mail()
    Dim FileName As String

    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If

    'Call the function with the correct arguments
    'Tip: You can also use Sheets("Sheet3") instead of ActiveSheet in the code(sheet not have to be active then)
    FileName = RDB_Create_PDF(ActiveSheet, "", True, False)

    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveSheet, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    If FileName <> "" Then
        RDB_Mail_PDF_Outlook FileName, "ron@debruin.nl", "This is the subject", _
                             "See the attached PDF file with the last figures" _
                           & vbNewLine & vbNewLine & "Regards Ron de bruin", False
    Else
        MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
               "Microsoft Add-in is not installed" & vbNewLine & _
               "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
               "The path to Save the file in arg 2 is not correct" & vbNewLine & _
               "You didn't want to overwrite the existing PDF if it exist"
    End If
End Sub



Sub RDB_Selection_Range_To_PDF_And_Create_Mail()
    Dim FileName As String

    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "ungroup the sheets and try the macro again"
    Else
        'Call the function with the correct arguments


        'For a fixed range use this line
        FileName = RDB_Create_PDF(Range("A10:I15"), "", True, False)

        'For the selection use this line
        'FileName = RDB_Create_PDF(Selection, "", True, True)

        'For a fixed file name and overwrite it each time you run the macro use
        'RDB_Create_PDF(Selection, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

        If FileName <> "" Then
            RDB_Mail_PDF_Outlook FileName, "ron@debruin.nl", "This is the subject", _
                                 "See the attached PDF file with the last figures" _
                               & vbNewLine & vbNewLine & "Regards Ron de bruin", False
        Else
            MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
                   "Microsoft Add-in is not installed" & vbNewLine & _
                   "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
                   "The path to Save the file in arg 2 is not correct" & vbNewLine & _
                   "You didn't want to overwrite the existing PDF if it exist"
        End If
    End If
End Sub



Sub RDB_Sheet_Level_Names_To_PDF_And_Create_Mail()
    Dim FileName As String

    'Call the function with the correct arguments
    FileName = Create_PDF_Sheet_Level_Names("addtopdf", "", True, False)

    'For a fixed file name and overwrite it each time you run the macro use
    'Create_PDF_Sheet_Level_Names("addtopdf", _
     '         "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    If FileName <> "" Then
        RDB_Mail_PDF_Outlook FileName, "ron@debruin.nl", "This is the subject", _
                             "See the attached PDF file with the last figures" _
                           & vbNewLine & vbNewLine & "Regards Ron de bruin", False
    Else
        MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
               "Microsoft Add-in is not installed" & vbNewLine & _
               "You Canceled the GetSaveAsFilename dialog" & vbNewLine & _
               "The path to Save the file in arg 2 is not correct" & vbNewLine & _
               "You didn't want to overwrite the existing PDF if it exist"
    End If
End Sub



'Create a PDF and mail of every sheet with a mail address in cell A1 (Sheet5 and sheet6)
'You see that the code create two mails, one with sheet5 and one with sheet6 and send it
'to the address in A1 of that sheet.

Sub Mail_Every_Worksheet_With_Address_In_A1_PDF()
'Working only in 2007 and up
    Dim sh As Worksheet
    Dim TempFilePath As String
    Dim TempFileName As String
    Dim FileName As String

    'Temporary path to save the PDF files
    'You can also use another folder like
    'TempFilePath = "C:\Users\Ron\MyFolder\"
    TempFilePath = Environ$("temp") & "\"

    'Loop through every worksheet
    For Each sh In ThisWorkbook.Worksheets
        FileName = ""

        'Test A1 for a mail address
        If sh.Range("A1").Value Like "?*@?*.?*" Then

            'If there is a mail address in A1 create the file name and the PDF
            TempFileName = TempFilePath & "Sheet " & sh.name & " of " _
                         & ThisWorkbook.name & " " _
                         & Format(Now, "dd-mmm-yy h-mm-ss") & ".pdf"

            FileName = RDB_Create_PDF(sh, TempFileName, True, False)


            'If publishing is OK create the mail
            If FileName <> "" Then
                RDB_Mail_PDF_Outlook FileName, sh.Range("A1").Value, "This is the subject", _
                                     "See the attached PDF file with the last figures" _
                                   & vbNewLine & vbNewLine & "Regards Ron de bruin", False

                'After the mail is created delete the PDF file in TempFilePath
                If Dir(TempFileName) <> "" Then Kill TempFileName

            Else
                MsgBox "Not possible to create the PDF, possible reasons:" & vbNewLine & _
                       "Microsoft Add-in is not installed" & vbNewLine & _
                       "The path to Save the file in arg 2 is not correct" & vbNewLine & _
                       "You didn't want to overwrite the existing PDF if it exist"
            End If

        End If
    Next sh
End Sub

'The code below are used by the macros in the other two modules
'Do not change the code in the functions in this module

Function RDB_Create_PDF(Myvar As Object, FixedFilePathName As String, _
                        OverwriteIfFileExist As Boolean, OpenPDFAfterPublish As Boolean) As String
    Dim FileFormatstr As String
    Dim Fname As Variant

    'Test If the Microsoft Add-in is installed
    If Dir(Environ("commonprogramfiles") & "\Microsoft Shared\OFFICE" _
         & Format(val(Application.version), "00") & "\EXP_PDF.DLL") <> "" Then

        If FixedFilePathName = "" Then
            'Open the GetSaveAsFilename dialog to enter a file name for the pdf
            FileFormatstr = "PDF Files (*.pdf), *.pdf"
            Fname = Application.GetSaveAsFilename("", filefilter:=FileFormatstr, _
                                                  Title:="Create PDF")

            'If you cancel this dialog Exit the function
            If Fname = False Then Exit Function
        Else
            Fname = FixedFilePathName
        End If

        'If OverwriteIfFileExist = False we test if the PDF
        'already exist in the folder and Exit the function if that is True
        If OverwriteIfFileExist = False Then
            If Dir(Fname) <> "" Then Exit Function
        End If

        'Now the file name is correct we Publish to PDF
        On Error Resume Next
        Myvar.ExportAsFixedFormat _
                Type:=xlTypePDF, _
                FileName:=Fname, _
                Quality:=xlQualityStandard, _
                IncludeDocProperties:=True, _
                IgnorePrintAreas:=False, _
                OpenAfterPublish:=OpenPDFAfterPublish
        On Error GoTo 0

        'If Publish is Ok the function will return the file name
        If Dir(Fname) <> "" Then RDB_Create_PDF = Fname
        Set Myvar = Nothing
        'Set Fname = Nothing
    End If
End Function



Function RDB_Mail_PDF_Outlook(FileNamePDF As String, StrTo As String, _
                              strsubject As String, StrBody As String, Send As Boolean)
    Dim OutApp As Object
    Dim OutMail As Object

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .To = StrTo
        .Cc = ""
        .BCC = ""
        .Subject = strsubject
        .Body = StrBody
        .Attachments.add FileNamePDF
        If Send = True Then
            .Send
        Else
            .display
        End If
    End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing
End Function



Function Create_PDF_Sheet_Level_Names(NamedRange As String, FixedFilePathName As String, _
                                      OverwriteIfFileExist As Boolean, OpenPDFAfterPublish As Boolean) As String
'This function will create a PDF with every sheet with
'a sheet level name variable <NamedRange> in it
    Dim FileFormatstr As String
    Dim Fname As Variant
    Dim Ash As Worksheet
    Dim sh As Worksheet
    Dim ShArr() As String
    Dim s As Long
    Dim SheetLevelName As name

    'Test If the Microsoft Add-in is installed
    If Dir(Environ("commonprogramfiles") & "\Microsoft Shared\OFFICE" _
         & Format(val(Application.version), "00") & "\EXP_PDF.DLL") <> "" Then

        'We fill the Array with sheets with the sheet level name variable
        For Each sh In ActiveWorkbook.Worksheets
            If sh.Visible = -1 Then
                Set SheetLevelName = Nothing
                On Error Resume Next
                Set SheetLevelName = sh.Names(NamedRange)
                On Error GoTo 0
                If Not SheetLevelName Is Nothing Then
                    s = s + 1
                    ReDim Preserve ShArr(1 To s)
                    ShArr(s) = sh.name
                End If
            End If
        Next sh

        'We exit the function If there are no sheets with
        'a sheet level name variable named <NamedRange>
        If s = 0 Then Exit Function

        If FixedFilePathName = "" Then

            'Open the GetSaveAsFilename dialog to enter a file name for the pdf
            FileFormatstr = "PDF Files (*.pdf), *.pdf"
            Fname = Application.GetSaveAsFilename("", filefilter:=FileFormatstr, _
                                                  Title:="Create PDF")

            'If you cancel this dialog Exit the function
            If Fname = False Then Exit Function
        Else
            Fname = FixedFilePathName
        End If


        'If OverwriteIfFileExist = False we test if the PDF
        'already exist in the folder and Exit the function if that is True
        If OverwriteIfFileExist = False Then
            If Dir(Fname) <> "" Then Exit Function
        End If

        Application.ScreenUpdating = False
        Application.EnableEvents = False

        'Remember the ActiveSheet
        Set Ash = ActiveSheet

        'Select the sheets with the sheet level name in it
        Sheets(ShArr).Select

        'Now the file name is correct we Publish to PDF
        On Error Resume Next
        ActiveSheet.ExportAsFixedFormat _
                Type:=xlTypePDF, _
                FileName:=Fname, _
                Quality:=xlQualityStandard, _
                IncludeDocProperties:=True, _
                IgnorePrintAreas:=False, _
                OpenAfterPublish:=OpenPDFAfterPublish
        On Error GoTo 0

        'If Publish is Ok the function will return the file name
        If Dir(Fname) <> "" Then
            Create_PDF_Sheet_Level_Names = Fname
        End If

        Ash.Select

        Application.ScreenUpdating = True
        Application.EnableEvents = True
    End If
End Function




Attribute VB_Name = "Deinstall_form"
Attribute VB_Base = "0{874138F2-6C3F-4CA1-B7DC-32D712EF089F}{94703D96-771C-4EF2-A7AE-8C2B3CEF75BD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Change()

If ComboBox1.Value = "Deinstalovat a odv|fffd|zt stroj v den instalace" Then
    MonthView1.Enabled = False
    DTPicker1.Enabled = False
    OptionButton1.Enabled = False
    OptionButton2.Enabled = False
Else
    MonthView1.Enabled = True
    DTPicker1.Enabled = True
    OptionButton1.Enabled = True
    OptionButton2.Enabled = True
End If

End Sub

Private Sub CommandButton1_Click()

If ComboBox1.Value = "" Then
MsgBox ("Pros|fffd|m vyberte jednu z mo|fffd|nost|fffd| deinstalace.")
Exit Sub
End If
Worksheets("Obchodni list").Range("deinstall_type").Value = ComboBox1.Value

If ComboBox1.Value = "Deinstalovat a odv|fffd|zt stroj v den instalace" Then
    Worksheets("Obchodni list").Range("deinstall_termin").Value = "instalace"
    term = "Term|fffd|n deinstalace je v den instalace analyz|fffd|toru."
Else:
    Worksheets("Obchodni list").Range("deinstall_termin").Value = Format(DTPicker1.Value, "dd.MM.yyyy")
        If OptionButton1.Value = True Then
            term = "P|fffd|esn|fffd| term|fffd|n deinstalace: " + Format(DTPicker1.Value, "dd.MM.yyyy")
        Else:
            term = "Orienta|fffd|n|fffd| term|fffd|n deinstalace: " + Format(DTPicker1.Value, "dd.MM.yyyy")
        End If
End If

If TextBox1.Value = "" Then
    poznamka = ""
Else:
    poznamka = vbNewLine + "Pozn|fffd|mka k deinstalaci: " + TextBox1.Value + " "
End If

instruments = ", stroje k deinstalaci: " & TextBox3.Value

Worksheets("Obchodni list").Range("deinstall_description").Value = term + instruments + poznamka
Worksheets("Obchodni list").Range("deinstall_EQ_NR").Value = TextBox2.Value

End Sub


Private Sub CommandButton2_Click()
Find_instrument.Show
End Sub

Private Sub CommandButton3_Click()

End Sub

Private Sub Label6_Click()

End Sub

Private Sub Label7_Click()

End Sub

Private Sub Label8_Click()

End Sub

Private Sub Label9_Click()

End Sub

Private Sub MonthView1_DateClick(ByVal DateClicked As Date)
DTPicker1.Value = MonthView1.Value
End Sub

Private Sub UserForm_Initialize()


ComboBox1.list = Range("typy_deinstalace").Value
DTPicker1.CustomFormat = "dd.MM.yyyy"
MonthView1.Value = Now

Worksheets("Obchodni list").Range("deinstall_description").Value = ""
Worksheets("Obchodni list").Range("deinstall_EQ_NR").Value = ""
Worksheets("XML").Range("str_instrument_deinstalace").Value = Worksheets("XML").Range("string1").Value & Worksheets("XML").Range("string2").Value
End Sub
Attribute VB_Name = "Doprava"
Attribute VB_Base = "0{313A9C31-9A14-4F4C-BD8C-F8CB08DD9759}{A9657AC9-03C2-42B6-8E91-008C949EE5D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Change()

End Sub

Private Sub DTPicker1_CallbackKeyDown(ByVal KeyCode As Integer, ByVal Shift As Integer, ByVal CallbackField As String, CallbackDate As Date)

End Sub

Private Sub FSE_ListBox_Change()

End Sub

Private Sub Label2_Click()

End Sub

Private Sub Label4_Click()

End Sub

Private Sub Label7_Click()

End Sub

Private Sub MonthView1_DateClick(ByVal DateClicked As Date)
TextBox1.Value = Format(MonthView1.Value, "yyyy-MM-dd")

If DTPicker1.Visible = True Then
    DTPicker1.Value = Format(MonthView1.Value, "yyyy-MM-dd")
End If

End Sub

Private Sub objednani_btn_Click()

Dim rng As Range
Dim rng2 As Range
Dim rng3 As Range
Dim FileName As String
Dim typ As String
Dim str As String

If TextBox1.Value = "" Then
    MsgBox "Pros|fffd|m vyberte datum dod|fffd|vky"
    Exit Sub
End If

If DTPicker1.Value = "" Or DTPicker1.Value = "00:00" Then
    MsgBox "Pros|fffd|m vypl|fffd|te |fffd|as dod|fffd|vky"
    Exit Sub
End If

If FSE_ListBox.Value = "" Then
    MsgBox "Pros|fffd|m vypl|fffd|te technika"
    Exit Sub
End If

If OptionButton2.Value = True Then
    If ComboBox1.Value = "" Then
        MsgBox "Pros|fffd|m vypl|fffd|te Ze kter|fffd|ho skladu uskute|fffd|nit p|fffd|evoz"
        Exit Sub
    End If
    If ComboBox2.Value = "" Then
        MsgBox "Pros|fffd|m vypl|fffd|te Do kter|fffd|ho skladu uskute|fffd|nit p|fffd|evoz"
        Exit Sub
    End If
End If

If OptionButton1.Value = True Then
    Call doprava_zakaznik
End If

If OptionButton2.Value = True Then
    Call navoz_prevodka
End If
'MsgBox "Informace o zm|fffd|n|fffd|ch byla odesl|fffd|na na Logistiku a Flempo"

End Sub


Private Sub OptionButton1_Click()
    ComboBox1.Value = ""
    ComboBox1.Visible = False
    Label6.Visible = False
    
    ComboBox2.Value = ""
    ComboBox2.Visible = False
    Label7.Visible = False
    Label2.Visible = True
    DTPicker1.Visible = True
End Sub

Private Sub OptionButton2_Click()
    ComboBox1.Value = ""
    ComboBox1.Visible = True
    Label6.Visible = True
    
    ComboBox2.Value = ""
    ComboBox2.Visible = True
    Label7.Visible = True
    Label2.Visible = False
    DTPicker1.Visible = False
End Sub



Private Sub TextBox2_Change()

End Sub

Private Sub UserForm_Initialize()
MonthView1.Value = Now


'MonthView1.DayBold("5.10.2016") = True

FSE_ListBox.list = Worksheets("Help").Range("AT1:AT20").Value
ComboBox1.list = Worksheets("Help").Range("BC2:BC40").Value
ComboBox2.list = Worksheets("Help").Range("BC2:BC40").Value

DTPicker1.Format = dtpCustom
DTPicker1.CustomFormat = "HH:mm"

If OptionButton1.Value = True Then
    ComboBox1.Value = ""
    ComboBox1.Visible = False
    Label6.Visible = False
    
    ComboBox2.Value = ""
    ComboBox2.Visible = False
    Label7.Visible = False
    
    Label2.Visible = True
    DTPicker1.Visible = True
End If
If OptionButton2.Value = True Then
    ComboBox1.Value = ""
    ComboBox1.Visible = True
    Label6.Visible = True
    
    ComboBox2.Value = ""
    ComboBox2.Visible = True
    Label7.Visible = True
    Label2.Visible = False
    DTPicker1.Visible = False
End If
End Sub

Sub navoz_prevodka()
    Dim JSM As String
    Dim vstup As String
    Dim datum As String
    Dim nazev As String
    Dim FileName As String
    Dim nazev_souboru As String
    Dim heslo As String
    Dim OutApp As Object
    Dim OutMail As Object
    Dim sTo As String
    Dim sCC  As String
    Dim sBCC As String
    Dim sSubject As String
    Dim StrBody As String
    Dim atribut As Integer
    Dim c As Integer
    Dim x As Integer
    Dim y As Integer
     
   tech0 = FSE_ListBox.Value

t = 2
Do Until Worksheets("Help").Range("AT" & t).Value = ""
    If Worksheets("Help").Range("AT" & t).Value = tech0 Then
        tech1 = Worksheets("Help").Range("AV" & t).Value
        tech2 = Worksheets("Help").Range("AW" & t).Value
        tech3 = Worksheets("Help").Range("AY" & t).Value
        tech4 = Worksheets("Help").Range("BA" & t).Value
        tech5 = Worksheets("Help").Range("AZ" & t).Value
    End If
t = t + 1
Loop

msg = tech1 & " " & tech2 & ",      Tel: " & tech3

               
    Sheets(Array("Obchodni list", "Dodaci listy Sklad", "Dodaci listy Servis")).Select
    
    nazev_souboru = Worksheets("Help").Range("B35").Value
    FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
    Worksheets(Array("Obchodni list", "Dodaci listy Sklad", "Dodaci listy Servis")).Select
    FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    nazev = nazev_souboru
    

    Dim contact As String
    Dim descr As String
    
    If Worksheets("Obchodni list").Range("LAB_contact_ID").Value = "" Then
    contact = Worksheets("XML").Range("string1").Value & "Kontakt na laborato|fffd|: " & Worksheets("Obchodni list").Range("LAB_contact_title").Value & " " & Worksheets("Obchodni list").Range("LAB_contact_name").Value & " " & Worksheets("Obchodni list").Range("LAB_contact_surname").Value & vbNewLine & _
                "Tel: " & Worksheets("Obchodni list").Range("LAB_contact_phone").Value & ", " & Worksheets("Obchodni list").Range("LAB_contact_email").Value & Worksheets("XML").Range("string2").Value
     Worksheets("XML").Range("str_contact").Value = contact
    ElseIf Worksheets("Obchodni list").Range("LAB_contact_ID").Value <> "" Then
        contact = Worksheets("XML").Range("string1").Value & Worksheets("XML").Range("string2").Value
        Worksheets("XML").Range("str_contact").Value = contact
    End If
    
    Dim summary_navoz As String
    
    'Worksheets("XML").Range("str_summary_navoz").Value = Worksheets("XML").Range("String1").Value & "Intern|fffd| p|fffd|eprava: " & Worksheets("Obchodni list").Range("File_name").Value & Worksheets("XML").Range("String2").Value
    summary_navoz = "Intern|fffd| p|fffd|eprava: " & Worksheets("Obchodni list").Range("File_name").Value
    descr = "Dobr|fffd| den," & vbNewLine & vbNewLine & "|fffd||fffd|d|fffd|m o p|fffd|evezen|fffd| p|fffd||fffd|stroje a p|fffd||fffd|slu|fffd|enstv|fffd| dle vypln|fffd|n|fffd|ch sklad|fffd| a dodac|fffd|ch list|fffd| v p|fffd||fffd|loze." & vbNewLine & "Pozn|fffd|mka: " & vbNewLine & TextBox2.Value
    
    
Worksheets("XML").Range("str_desc_navoz").Value = Worksheets("XML").Range("string1").Value & descr & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_transfer_from_navoz").Value = Worksheets("XML").Range("string1").Value & ComboBox1.Value & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_transfer_to_navoz").Value = Worksheets("XML").Range("string1").Value & ComboBox2.Value & Worksheets("XML").Range("string2").Value
'Worksheets("XML").Range("str_due_date_navoz").Value = Worksheets("XML").Range("string1").Value & Format(Worksheets("Obchodni list").Range("install_date").Value, "yyyy-MM-dd") & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_duedate_navoz").Value = Worksheets("XML").Range("string1").Value & Format(TextBox1, "yyyy-MM-dd") & Worksheets("XML").Range("string2").Value
'Worksheets("XML").Range("str_reporter_transport").Value = Worksheets("XML").Range("string1").Value & tech5 & Worksheets("XML").Range("string2").Value

ThisWorkbook.Save
    
    Call check("Objednani prevozu stroje")
    
    Dim typ As String
    Dim str As String
    typ = "INSTRUMENT_TRANSFER"
    str = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    sTo = "rinku@sysmex.cz"
    sCC = ""
    sBCC = ""
    sSubject = summary_navoz
    StrBody = str

              
    With OutMail
        .To = sTo
        .Cc = sCC
        .BCC = sBCC
        .Subject = sSubject
        .Body = StrBody
        .BodyFormat = 2 'olFormatPlain
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
Worksheets("Obchodni list").Range("IND_preprava").Value = "p|fffd|evodka"

Application.EnableEvents = True

Worksheets("Obchodni list").Select
Unload Me
End Sub

Sub doprava_zakaznik()
Dim rng As Range
Dim rng2 As Range
Dim rng3 As Range
Dim FileName As String
Dim typ As String
Dim str As String
tech0 = FSE_ListBox.Value

t = 2
Do Until Worksheets("Help").Range("AT" & t).Value = ""
    If Worksheets("Help").Range("AT" & t).Value = tech0 Then
        tech1 = Worksheets("Help").Range("AV" & t).Value
        tech2 = Worksheets("Help").Range("AW" & t).Value
        tech3 = Worksheets("Help").Range("AY" & t).Value
        tech4 = Worksheets("Help").Range("BA" & t).Value
        tech5 = Worksheets("Help").Range("AZ" & t).Value
    End If
t = t + 1
Loop

msg = tech1 & " " & tech2 & ",      Tel: " & tech3

'Set rng = Sheets("Obchodni list").Range("A24:I37").SpecialCells(xlCellTypeVisible)
'Set rng2 = Sheets("Obchodni list").Range("A50:I52").SpecialCells(xlCellTypeVisible)
'Set rng3 = Sheets("Obchodni list").Range("A24:I52")

'rng3.CopyPicture xlScreen, xlPicture

FileName = "C:\Temp\" & Worksheets("Obchodni list").Range("file_name").Value & "_DOP.pdf"
Worksheets(Array("Obchodni list", "Dodaci listy Sklad", "Dodaci listy Servis")).Select
pdf = RDB_Create_PDF(ActiveSheet, FileName, True, False)
http = Worksheets("Help").Range("A64").Value

desc = "Dobr|fffd| den, |fffd||fffd|d|fffd|m o objedn|fffd|n|fffd| p|fffd|epravy pro instalaci projektu: " & Worksheets("Obchodni list").Range("file_name").Value & vbNewLine & "Informace: " & vbNewLine & "Zodpov|fffd|dn|fffd| technik na m|fffd|st|fffd|: " & msg & vbNewLine & "Datum a |fffd|as, kdy m|fffd| b|fffd|t zbo|fffd||fffd| na m|fffd|st|fffd|: " & DTPicker1.Value & vbNewLine & "Pozn|fffd|mka k p|fffd|eprav|fffd|:" & TextBox2.Value

Dim summary_transport As String

'Worksheets("XML").Range("str_summary_transport").Value = Worksheets("XML").Range("string1").Value & "OBJEDN|fffd|N|fffd| DOPRAVY " & Worksheets("Obchodni list").Range("file_name").Value & Worksheets("XML").Range("string2").Value
summary_transport = "OBJEDN|fffd|N|fffd| DOPRAVY " & Worksheets("Obchodni list").Range("File_name").Value
Worksheets("XML").Range("str_desc_transport").Value = Worksheets("XML").Range("string1").Value & desc & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_due_date_transport").Value = Worksheets("XML").Range("string1").Value & Format(Worksheets("Obchodni list").Range("install_date").Value, "yyyy-MM-dd") & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_delivery_date_transport").Value = Worksheets("XML").Range("string1").Value & Format(DTPicker1.Value, "yyyy-MM-dd HH:mm") & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_reporter_transport").Value = Worksheets("XML").Range("string1").Value & tech5 & Worksheets("XML").Range("string2").Value

Call check("Objednani dopravy k zakaznikovi")

typ = "TRANSPORT"
str = XML_generator(typ)

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .To = Worksheets("Help").Range("A31").Value
        .Cc = ""
        .BCC = ""
        .Subject = summary_transport
        .Body = str
        .BodyFormat = 2 'olFormatPlain
        .Attachments.add FileName
        .display
    End With
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
    
Worksheets("Obchodni list").Select
Worksheets("Obchodni list").Range("IND_preprava").Value = "objedn|fffd|na"
Unload Me
End Sub
Attribute VB_Name = "ERR_handler"
Attribute VB_Base = "0{64A6DEDD-F6B5-401A-A5FB-428970015D8A}{E21459BB-BC49-4F13-99E5-1E259CB853DB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ERR_list_Click()
Dim I As Variant
I = ERR_list.ListIndex
Sheets("Obchodni list").Range(ERR_list.list(I, 0)).Select
End Sub


Private Sub OptionButton_SLS_Click()
ERR_handler.ERR_list.clear
End Sub

Private Sub OptionButton_SRV_Click()
ERR_handler.ERR_list.clear
End Sub

Private Sub Refresh_btn_Click()

ERR_handler.ERR_list.clear
Dim OBCH_sh As Worksheet
Set OBCH_sh = Worksheets("Obchodni list")
Dim ERRMSG As Integer

ERRMSG = 0
If OptionButton_SLS.Value = True Then
        If OBCH_sh.Range("zeme_instalace").Value = "" Or OBCH_sh.Range("zeme_instalace").Value = "zvolte" Then
            ERR_handler.ERR_list.AddItem "zeme_instalace"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m pole country"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("LOGIN_short").Value = "JM|fffd|NO" Or OBCH_sh.Range("LOGIN_short").Value = "" Then
            ERR_handler.ERR_list.AddItem "LOGIN_short"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m va|fffd|i zkratku."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("SLS_issue").Value = "" Then
            ERR_handler.ERR_list.AddItem "SLS_issue"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m rinku |fffd||fffd|slo SLS-X, kde x je |fffd||fffd|slo."
            ERRMSG = ERRMSG + 1
        End If
        
        
        If OBCH_sh.Range("project_FY").Value = "zvolte_prosim" Or OBCH_sh.Range("project_FY").Value = "" Then
            ERR_handler.ERR_list.AddItem "project_FY"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m |fffd||fffd|slo sales projektu."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("typ_analyzatoru").Value = "zvolte_prosim" Or OBCH_sh.Range("typ_analyzatoru").Value = "" Then
            
            'ERR_handler.ERR_list.AddItem "F4 - Vypl|fffd|te pros|fffd|m typ Analyz|fffd|toru" & "typ_analyzatoru"
            ERR_handler.ERR_list.AddItem "typ_analyzatoru"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m typ Analyz|fffd|toru"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("druh_servisu").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("druh_servisu").Value = "" Then
            ERR_handler.ERR_list.AddItem "druh_servisu"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m typ smlouvy"
            ERRMSG = ERRMSG + 1
        End If
        
        score = 0
        If OBCH_sh.Range("pozadovany_CRAS").Value = "ANO" Then
            If OBCH_sh.Range("IT_contact_title").Value <> "" Then score = score + 1
            If OBCH_sh.Range("IT_contact_email").Value <> "" Then score = score + 1
            If OBCH_sh.Range("IT_contact_surname").Value <> "" Then score = score + 1
            If OBCH_sh.Range("IT_contact_phone").Value <> "" Then score = score + 1
            
            If score = 0 Then
                ERR_handler.ERR_list.AddItem "IT_contact_surname"
                ERR_handler.ERR_list.list(ERRMSG, 1) = "Pokud chcete vzd|fffd|lenou podporu vypl|fffd|te pros|fffd|m IT kontakt."
                ERRMSG = ERRMSG + 1
            End If
            
        End If
        
        If OBCH_sh.Range("pozadovany_CRAS").Value = "" Or OBCH_sh.Range("pozadovany_CRAS").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "pozadovany_CRAS"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jestli vy|fffd|adujete slu|fffd|bu CRAS + po|fffd||fffd|tadla do CRM"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("pozadovane_sncs").Value = "" Or OBCH_sh.Range("pozadovane_sncs").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "pozadovane_sncs"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m p|fffd|ipojen|fffd| slu|fffd|by SNCS - QC"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("pozadovany_LIS").Value = "pozadovane_sncs" Or OBCH_sh.Range("pozadovany_LIS").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "pozadovany_LIS"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m p|fffd|ipojen|fffd| LIS."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("pozadovane_produkty").Value = "" Or OBCH_sh.Range("pozadovane_produkty").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "pozadovane_produkty"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m zda chcete podporu Produktov|fffd|ho odd|fffd|len|fffd|."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("likvidace_pristroje").Value = "" Or OBCH_sh.Range("likvidace_pristroje").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "likvidace_pristroje"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m pole ""Likvidace star|fffd|ho p|fffd||fffd|stroje""."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("on_stock_date").Value = "" Or OBCH_sh.Range("on_stock_date").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "on_stock_date"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m datum od kdy bude stroj k dispozici na sklad|fffd|"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("pristroj_novy_repas").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("pristroj_novy_repas").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "pristroj_novy_repas"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m stav p|fffd||fffd|stroje"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("termin").Value = "" Or OBCH_sh.Range("termin").Value = "zvolte pros|fffd|m" Then
            ERR_handler.ERR_list.AddItem "termin"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Bez vypln|fffd|n|fffd| Term|fffd|nu instalace u z|fffd|kazn|fffd|ka nelze ulo|fffd|it!"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("install_date").Value = "" Then
            ERR_handler.ERR_list.AddItem "install_date"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Bez vypln|fffd|n|fffd| data instalace u z|fffd|kazn|fffd|ka nelze ulo|fffd|it!"
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("customer_ID").Value = "" Then
            ERR_handler.ERR_list.AddItem "customer_ID"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m z|fffd|kaznick|fffd| |fffd||fffd|slo."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("customer_name").Value = "" Or OBCH_sh.Range("customer_name").Value = "Pokud nen|fffd| vypln|fffd|no z PL tabulky pros|fffd|m vypl|fffd|te |fffd||fffd|slo z|fffd|kazn|fffd|ka a stiskn|fffd|te vyhledat z|fffd|kazn|fffd|ka." Then
            ERR_handler.ERR_list.AddItem "customer_name"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m adresu instalace u z|fffd|kazn|fffd|ka. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("customer_city").Value = "" Then
            ERR_handler.ERR_list.AddItem "customer_city"
            'divide_text ("D28 - Vypl|fffd|te pros|fffd|m M|fffd|sto adresy z|fffd|kazn|fffd|ka do pole D28. Nejl|fffd|pe v|fffd|ak zad|fffd|n|fffd|m |fffd||fffd|sla z|fffd|kazn|fffd|ka a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka se vypln|fffd| Adresa (pokud je z|fffd|kazn|fffd|k veden v minerv|fffd|)")
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m M|fffd|sto adresy z|fffd|kazn|fffd|ka. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("customer_street").Value = "" Then
            ERR_handler.ERR_list.AddItem "customer_street"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m Ulici. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("customer_ZIP").Value = "" Then
            ERR_handler.ERR_list.AddItem "customer_ZIP"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m PS|fffd| adresy s|fffd|kazn|fffd|ka. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("pozadovany_LIS").Value = "ANO" Then
            If OBCH_sh.Range("LIS_connection_date").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("LIS_connection_date").Value = "" Then
                ERR_handler.ERR_list.AddItem "LIS_connection_date"
                ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m term|fffd|n p|fffd|ipojen|fffd| LIS."
                ERRMSG = ERRMSG + 1
            End If
            
            If OBCH_sh.Range("LIS_contact_surname").Value = "" Then
                ERR_handler.ERR_list.AddItem "IT_contact_surname"
                ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jm|fffd|no a alespo|fffd| p|fffd||fffd|jmen|fffd|, pop|fffd||fffd|pad|fffd| titul kontaktu na LIS, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
                ERRMSG = ERRMSG + 1
            End If
        
            If OBCH_sh.Range("LIS_contact_email").Value = "" And OBCH_sh.Range("LIS_contact_phone").Value = "" Then
                ERR_handler.ERR_list.AddItem "IT_contact_phone"
                ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| telefon nebo email kontaktu na LIS, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
                ERRMSG = ERRMSG + 1
            End If
        
        End If
        
        If OBCH_sh.Range("pozadovany_LIS").Value = "ANO" Then
        
            If OBCH_sh.Range("IT_contact_surname").Value = "" Then
                ERR_handler.ERR_list.AddItem "IT_contact_surname"
                ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jm|fffd|no a alespo|fffd| p|fffd||fffd|jmen|fffd|, pop|fffd||fffd|pad|fffd| titul kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
                ERRMSG = ERRMSG + 1
            End If
            
            If OBCH_sh.Range("IT_contact_email").Value = "" And OBCH_sh.Range("IT_contact_phone").Value = "" Then
                ERR_handler.ERR_list.AddItem "IT_contact_phone"
                ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| telefon nebo email kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
                ERRMSG = ERRMSG + 1
            End If
        End If
        
        If OBCH_sh.Range("LAB_contact_surname").Value = "" Then
            ERR_handler.ERR_list.AddItem "LAB_contact_surname"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jm|fffd|no a alespo|fffd| p|fffd||fffd|jmen|fffd|, pop|fffd||fffd|pad|fffd| titul kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("LAB_contact_email").Value = "" And OBCH_sh.Range("LAB_contact_phone").Value = "" Then
            ERR_handler.ERR_list.AddItem "LAB_contact_phone"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| telefon nebo email kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("typ_zkumavek").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("typ_zkumavek").Value = "" Then
            ERR_handler.ERR_list.AddItem "typ_zkumavek"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m typ zkumavek."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("instrument_SN1").Value = "" Then
            ERR_handler.ERR_list.AddItem "instrument_SN1"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| jedno SN p|fffd||fffd|stroje."
            ERRMSG = ERRMSG + 1
        End If
'servis
ElseIf OptionButton_SRV.Value = True Then
    ERRMSG = 0
        
    If OBCH_sh.Range("termin").Value <> "P|fffd|esn|fffd|:" Then
        ERR_handler.ERR_list.AddItem "termin"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "p|fffd|ed schv|fffd|len|fffd|m po|fffd|adavku je nutn|fffd| zvolit ""P|fffd|esn|fffd|"" term|fffd|n a datum instalace."
        ERRMSG = ERRMSG + 1
    End If
        
    datum = OBCH_sh.Range("install_date").Value
            
    If datum = "" Then
        ERR_handler.ERR_list.AddItem "install_date"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Neni vyplneno datum instalace, email nelze odeslat"
        ERRMSG = ERRMSG + 1
    End If
    
    If OBCH_sh.Range("FSE_install_assignee").Value = "" Then
            ERR_handler.ERR_list.AddItem "FSE_install_assignee"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol Technika, kter|fffd| bude instalovat. (tla|fffd||fffd|tko preinstalace)"
            ERRMSG = ERRMSG + 1
    End If
    
    If OBCH_sh.Range("preinstall_status").Value = "" Then
            ERR_handler.ERR_list.AddItem "preinstall_status"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol m|fffd|sto preinstalace (tla|fffd||fffd|tko preinstalace)."
            ERRMSG = ERRMSG + 1
    End If
        
    If OBCH_sh.Range("preinstall_status").Value = "SCZ" Then
              
        If OBCH_sh.Range("preinstall_FSE").Value = "" Then
            ERR_handler.ERR_list.AddItem "preinstall_status"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol Technika, kter|fffd| bude preinstalovat (tla|fffd||fffd|tko preinstalace). "
            ERRMSG = ERRMSG + 1
        End If
                 
        If OBCH_sh.Range("date_transfer_preinstall").Value = "" Then
            ERR_handler.ERR_list.AddItem "date_transfer_preinstall"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol datum n|fffd|vozu stroje na preinstalaci. "
            ERRMSG = ERRMSG + 1
        End If
                 
        If OBCH_sh.Range("date_start_preinstall").Value = "" Then
            ERR_handler.ERR_list.AddItem "date_start_preinstall"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol start preinstalace (tla|fffd||fffd|tko preinstalace)."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("date_end_preinstall").Value = "" Then
            ERR_handler.ERR_list.AddItem "date_end_preinstall"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol konec preinstalace (tla|fffd||fffd|tko preinstalace)."
            ERRMSG = ERRMSG + 1
        End If
    End If
End If
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "Find_contact"
Attribute VB_Base = "0{F443F45A-D727-4AAF-8DDD-341432622ACB}{2FB4D039-D4A5-43F1-B346-6209BCC5FF5B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Label1_Click()

End Sub

Private Sub ListView1_BeforeLabelEdit(Cancel As Integer)

End Sub

Private Sub UserForm_Initialize()

'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
'Dim I As Long ' counter
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant
Dim strsql As String


' Establish connection to the database
server_name = "syseusql07" '"172.16.1.223" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "Minerva_SAPway_CASH" ' Enter your database name here
user_id = "" ' enter your user ID here
password = "" ' Enter your password here

 ' Enter your server name here - if running from a local computer use 127.0.0.1

'Set conn = New ADODB.Connection
'HostName = Environ$("computername")
'conn.Open "DSN=minerva connect;Trusted_Connection=Yes;APP=Microsoft Office 2010;WSID=" & HostName & ";DATABASE=Minerva_SAPway_CASH" _

''Response.Write
Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "Driver={SQL Server};Server=" & server_name & ";Database=" & database_name & _
    ";WSID=" & hostName & ";"
customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value



    Set rs = New ADODB.Recordset
    sqlstr = "SELECT isnull(contactID,'')as ID_contact,isnull(position,'')as Pozice,isnull(title,'') as Titul,isnull(Salutation,'')as Osloven|fffd|,isnull(First_name,'')as Jm|fffd|no, isnull(last_name,'') as P|fffd||fffd|jmen|fffd|, isnull(directphone,'')as Direktphone, isnull(mobilephone,'')as Mobil,isnull(email,'')as email, isnull(department,'')as Odd|fffd|len|fffd| from rinku_customer_contacts where customerno=" & customer_nr
    'sqlstr = "SELECT contactID as ID,position as pozice,title as titul,Salutation as osloveni,First_name as jmeno, last_name as prijemni,directphone as directphone, mobilephone as mobil, department as oddeleni from rinku_customer_contacts where customerno=3100045670"
    rs.Open sqlstr, conn, adOpenStatic
    
    If rs.RecordCount = 0 Then
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing
        Write_LAB_contact.Locked = True
        Write_IT_contact.Locked = True
        MsgBox ("U uveden|fffd|ho z|fffd|kaznick|fffd|ho |fffd||fffd|sla nebyl nalezen |fffd||fffd|dn|fffd| kontakt.")
        Exit Sub
    End If
    
    ' Set Column Headers.
    For intCount1 = 0 To rs.Fields.count - 1
        Set colnew = ListView1.ColumnHeaders.add(, , rs(intCount1).name)
    Next intCount1
    ListView1.View = 3    ' Set View property to 'Report'.
         
    ' Set Total Records Counter.
    rs.MoveLast
    intTotCount = rs.RecordCount
    rs.MoveFirst
    

          ' Loop through recordset and add Items to the control.
          For intCount1 = 1 To intTotCount
             If IsNumeric(rs(0).Value) Then
                Set newline = ListView1.ListItems.add(, , str(rs(0).Value))
             Else
                Set newline = ListView1.ListItems.add(, , rs(0).Value)
             End If
             For intCount2 = 1 To rs.Fields.count - 1
                newline.SubItems(intCount2) = rs(intCount2).Value
             Next intCount2
             rs.MoveNext
          Next intCount1

'-----------------------------------------------------------------------
' Close connections

rs.Close

Set rs = Nothing
conn.Close
Set conn = Nothing
On Error GoTo 0

End Sub

Sub write_contact(dept As String)


    id = ListView1.SelectedItem.Text
    Position = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(1)
    Title = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(2)
    Salutation = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(3)
    first_name = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(4)
    last_name = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(5)
    direktphone = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(6)
    mobil = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(7)
    Email = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(8)
    department = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(9)

Dim OBCH_sh As Worksheet
Set OBCH_sh = Worksheets("Obchodni list")
If dept = "LAB" Then
    With OBCH_sh
        .Range("LAB_contact_ID").Value = id
        .Range("LAB_contact_title").Value = Title
        .Range("LAB_contact_name").Value = first_name
        .Range("LAB_contact_surname").Value = last_name
        .Range("LAB_contact_email").Value = Email
        If direktphone <> "" And mobil <> "" Then
            .Range("LAB_contact_phone").Value = direktphone & ", " & mobil
        ElseIf direktphone = "" And mobil <> "" Then
            .Range("LAB_contact_phone").Value = mobil
        ElseIf direktphone <> "" And mobil = "" Then
            .Range("LAB_contact_phone").Value = direktphone
        ElseIf direktphone = "" And mobil = "" Then
            .Range("LAB_contact_phone").Value = ""
        End If
        
    quest = MsgBox("Zaps|fffd|no. P|fffd|ejete si pokra|fffd|ovat v z|fffd|pisu dal|fffd||fffd|ch kontakt|fffd| do obchodn|fffd|ho listu? Pokud ne okno se zav|fffd|e.", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
    
    End If
        
    End With
ElseIf dept = "IT" Then
    With OBCH_sh
        .Range("IT_contact_ID").Value = id
        .Range("IT_contact_title").Value = Title
        .Range("IT_contact_name").Value = first_name
        .Range("IT_contact_surname").Value = last_name
        .Range("IT_contact_email").Value = Email
        If direktphone <> "" And mobil <> "" Then
            .Range("IT_contact_phone").Value = direktphone & ", " & mobil
        ElseIf direktphone = "" And mobil <> "" Then
            .Range("IT_contact_phone").Value = mobil
        ElseIf direktphone <> "" And mobil = "" Then
            .Range("IT_contact_phone").Value = direktphone
        ElseIf direktphone = "" And mobil = "" Then
            .Range("IT_contact_phone").Value = ""
        End If
    Call check("Zapis kontaktu")
    quest = MsgBox("Zaps|fffd|no. P|fffd|ejete si pokra|fffd|ovat v z|fffd|pisu dal|fffd||fffd|ch kontakt|fffd| do obchodn|fffd|ho listu? Pokud ne okno se zav|fffd|e.", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
    
    End If
    End With
End If
End Sub

Private Sub Write_IT_contact_Click()
write_contact ("IT")
End Sub

Private Sub Write_LAB_contact_Click()
write_contact ("LAB")
End Sub
Attribute VB_Name = "Find_instrument"
Attribute VB_Base = "0{F2BC6CBB-5891-4F61-8093-5E6DA3340E61}{0D559CFC-51CE-4015-86BC-4DC6008A9199}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Sub write_checked_values()
    Dim EQN1 As String
    Dim EQN2 As String
    
    Dim MAT1 As String
    
    Dim NAME1 As String
    Dim NAME2 As String
    
    EQN1 = ""
    'Position = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(1)
    'Title = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(2)
    'Salutation = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(3)
    'first_name = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(4)
    'last_name = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(5)
    'direktphone = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(6)
    'mobil = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(7)
    'Email = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(8)
    'department = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(9)

' Returns the number of selected items.
Dim li As ListItem  ' Used to loop over all items.
Dim c As Integer    ' Used to count selected items.

    ' Loop over each item.
    For Each li In ListView1.ListItems

        ' Increase count if selected.
        If li.Checked = True Then
            c = c + 1
            EQN2 = li.SubItems(4)
            EQN1 = EQN1 & EQN2 & ", "
            
            MAT1 = li.SubItems(7)
            
            NAME2 = instrument_UNIVERSAL_identify("MAT", MAT1, "name")
            
            If NAME2 = "EOF" Then
                NAME2 = li.SubItems(2)
            End If
            
            NAME1 = NAME1 & NAME2 & ", "
        End If
    Next
    
    
    
EQN1 = Left(EQN1, Len(EQN1) - 2)
NAME2 = Left(NAME1, Len(NAME1) - 2)
Deinstall_form.TextBox2.Value = EQN1
Deinstall_form.TextBox3.Value = NAME2

Unload Find_instrument

End Sub


Private Sub ComboBox1_Change()

End Sub

Private Sub CommandButton1_Click()
Call write_checked_values
End Sub

Private Sub CommandButton2_Click()

Dim I As Integer    ' Used to count selected items.

    ' Loop over each item.
    For I = 0 To ListBox2.ListCount - 1

        VAL1 = TextBox2.Value
        If I = 0 Then
            TextBox2.Value = ListBox2.list(I) & ", "
        ElseIf I = ListBox2.ListCount - 1 Then
            TextBox2.Value = VAL1 & ListBox2.list(I)
        ElseIf I < ListBox2.ListCount - 1 Then
            TextBox2.Value = VAL1 & ListBox2.list(I) & ", "
        End If
        
    Next
    
Deinstall_form.TextBox3.Value = Me.TextBox2.Value
Unload Find_instrument

End Sub

Private Sub Label2_Click()

End Sub

Private Sub Label4_Click()

End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

ListBox2.AddItem ListBox1.Value
End Sub

Private Sub ListBox2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
tst = ListBox2.ListIndex
ListBox2.RemoveItem (tst)
End Sub

Private Sub ListView1_BeforeLabelEdit(Cancel As Integer)

End Sub




Private Sub MultiPage1_Change()

End Sub

Private Sub TextBox2_Change()

End Sub

Private Sub UserForm_Initialize()

Me.TextBox1.Value = Worksheets("Obchodni list").Range("customer_ID").Value
Me.ListBox1.list = Worksheets("Help").Range("instrument").Value

If Worksheets("Obchodni list").Range("customer_ID").Value = "" Then
    MsgBox "pr|fffd|zdn|fffd| z|fffd|kaznick|fffd| |fffd||fffd|slo, nelze hledat v minerv|fffd|. pros|fffd|m p|fffd|ejd|fffd|te k ru|fffd|n|fffd|mu zad|fffd|n|fffd|."
    Me.MultiPage1.Value = 1
    Exit Sub
End If

'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
'Dim I As Long ' counter
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant
Dim strsql As String


' Establish connection to the database
server_name = "syseusql07" '"172.16.1.223" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "Minerva_SAPway_CASH" ' Enter your database name here
user_id = "" ' enter your user ID here
password = "" ' Enter your password here

 ' Enter your server name here - if running from a local computer use 127.0.0.1

'Set conn = New ADODB.Connection
'HostName = Environ$("computername")
'conn.Open "DSN=minerva connect;Trusted_Connection=Yes;APP=Microsoft Office 2010;WSID=" & HostName & ";DATABASE=Minerva_SAPway_CASH" _

''Response.Write
Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "Driver={SQL Server};Server=" & server_name & ";Database=" & database_name & _
    ";WSID=" & hostName & ";"

customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value



    Set rs = New ADODB.Recordset
    sqlstr = "SELECT CustomerNo as 'Customer no.',isnull(SerialNo,'')as SN,isnull(Description1,'')as 'SAP name',isnull(Description2,'') as Description,isnull(EquipmentNo,'')as 'Equipment No.', InstallDate as 'Install Date',WarrentyEnd as 'Warranty end', isnull(MaterialNo,'')as 'Material No.' FROM rinku_instruments WHERE CustomerNo=" & customer_nr & " AND isMainUnit=1"
    'sqlstr = "SELECT contactID as ID,position as pozice,title as titul,Salutation as osloveni,First_name as jmeno, last_name as prijemni,directphone as directphone, mobilephone as mobil, department as oddeleni from rinku_customer_contacts where customerno=3100045670"
    rs.Open sqlstr, conn, adOpenStatic
    
    If rs.RecordCount = 0 Then
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing
        MsgBox ("U uveden|fffd|ho z|fffd|kaznick|fffd|ho |fffd||fffd|sla nebyl nalezen |fffd||fffd|dn|fffd| p|fffd||fffd|stroj.")
        Exit Sub
    End If
    
    ' Set Column Headers.
    For intCount1 = 0 To rs.Fields.count - 1
        Set colnew = ListView1.ColumnHeaders.add(, , rs(intCount1).name)
    Next intCount1
    ListView1.View = 3    ' Set View property to 'Report'.
         
    ' Set Total Records Counter.
    rs.MoveLast
    intTotCount = rs.RecordCount
    rs.MoveFirst
    
    ListView1.ColumnHeaders(1).Width = 80
    ListView1.ColumnHeaders(2).Width = 80
    ListView1.ColumnHeaders(3).Width = 200
    ListView1.ColumnHeaders(4).Width = 150
    ListView1.ColumnHeaders(5).Width = 60
    'ListView1.ColumnHeaders(6).Width = 100

          ' Loop through recordset and add Items to the control.
          For intCount1 = 1 To intTotCount
             If IsNumeric(rs(0).Value) Then
                Set newline = ListView1.ListItems.add(, , str(rs(0).Value))
             Else
                Set newline = ListView1.ListItems.add(, , rs(0).Value)
             End If
             For intCount2 = 1 To rs.Fields.count - 1
                newline.SubItems(intCount2) = rs(intCount2).Value
             Next intCount2
             rs.MoveNext
          Next intCount1

'-----------------------------------------------------------------------
' Close connections

rs.Close

Set rs = Nothing
conn.Close
Set conn = Nothing
On Error GoTo 0

End Sub

Attribute VB_Name = "Finder"
Attribute VB_Base = "0{57AA280D-18D3-49D9-94F7-8BD927610DBB}{7E68B8C6-8184-484A-B5E1-AC97C418F50A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
customer_nr.Value = Worksheets("Obchodni list").Range("customer_ID").Value
Call start_search_Click
End Sub

Private Sub CommandButton2_Click()
customer_nr.Value = Worksheets("Obchodni list").Range("payer_ID").Value
Call start_search_Click
End Sub

Private Sub customer_nr_Change()

End Sub

Private Sub start_search_Click()
Dim nr As String
Dim I As Integer
Dim sh As String

        Check_name1.Value = False
        Check_name2.Value = False
        Check_name3.Value = False
        Check_name4.Value = False
        Check_street.Value = False
        Check_city.Value = False
        Check_zip.Value = False
        
If Worksheets("Obchodni list").Range("zeme_instalace").Value = "SCZ" Then
    client = 3013
ElseIf Worksheets("Obchodni list").Range("zeme_instalace").Value = "SSK" Then
    client = 3015
End If

If Worksheets("Obchodni list").Range("customer_ID").Value <> customer_nr.Text Then

quest = MsgBox("V|fffd|mi zadan|fffd| z|fffd|kaznick|fffd| |fffd||fffd|slo: " & customer_nr.Text & " se li|fffd||fffd| od |fffd||fffd|sla v obchodn|fffd|m listu: " & Worksheets("Obchodni list").Range("customer_ID").Value & vbNewLine & vbNewLine & "P|fffd|ejete si pokra|fffd|ovat v hled|fffd|n|fffd| v|fffd|mi zadan|fffd|ho |fffd||fffd|sla z|fffd|kazn|fffd|ka?", vbYesNo)

    If quest = 6 Then
        sqlstr = "SELECT CustomerNo,name, name2, name3, name4, address1, city, ZIP, shortname from rinku_customer where client='" & client & "' and customerno='" & customer_nr.Text & "'"
        load_from_minerva_FN (sqlstr)
    Else: Exit Sub
    End If
Else
        sqlstr = "SELECT CustomerNo,name, name2, name3, name4, address1, city, ZIP, shortname from rinku_customer where client='" & client & "' and customerno='" & Worksheets("Obchodni list").Range("Customer_ID").Value & "'"
        load_from_minerva_FN (sqlstr)
End If

I = 2
sh = "source"

Do Until Worksheets(sh).Range("A" & I).Value = ""
nr = Worksheets(sh).Range("A" & I).Value
If nr = customer_nr.Value Then
    customer_name1.Value = Worksheets(sh).Range("B" & I).Value
    customer_name2.Value = Worksheets(sh).Range("C" & I).Value
    customer_name3.Value = Worksheets(sh).Range("D" & I).Value
    customer_name4.Value = Worksheets(sh).Range("E" & I).Value
    street.Value = Worksheets(sh).Range("F" & I).Value
    city.Value = Worksheets(sh).Range("G" & I).Value
    ZIP.Value = Worksheets(sh).Range("H" & I).Value
    
    If customer_name1.Value <> "" Then
        Check_name1.Value = True
    End If
    If customer_name2.Value <> "" Then
        Check_name2.Value = True
    End If
    If customer_name3.Value <> "" Then
        Check_name3.Value = True
    End If
    If customer_name4.Value <> "" Then
        Check_name4.Value = True
    End If
    If street.Value <> "" Then
        Check_street.Value = True
    End If
    If city.Value <> "" Then
        Check_city.Value = True
    End If
    If ZIP.Value <> "" Then
        Check_zip.Value = True
    End If
    
    Exit Do
End If
I = I + 1
Loop
End Sub

Private Sub UserForm_Initialize()
sh = ActiveSheet.name
If sh <> "P|fffd|ed|fffd|n|fffd| LIS" Then
Worksheets(sh).Range("B9:G14").Value = ""
Worksheets(sh).Range("D28:F34").Value = ""
Worksheets(sh).Range("J29").Value = ""
Else:
Worksheets(sh).Range("A5:A10").Value = ""
End If

customer_nr.Value = Worksheets("Obchodni list").Range("customer_ID").Value
Call start_search_Click

End Sub

Private Sub write_adress_Click()

Dim sh4 As String
sh4 = ThisWorkbook.ActiveSheet.name

If sh4 <> "P|fffd|ed|fffd|n|fffd| LIS" Then
    If Option_First = True Then
        out = wrt_address(sh4, "B", 9)
    ElseIf Option_both = True Then
        out = wrt_address(sh4, "B", 9)
        out = wrt_address(sh4, "D", 29)
    ElseIf Option_Second = True Then
        out = wrt_address(sh4, "D", 29)
    End If
    sh5 = sh4
    
    If Dokumentace_Check = True Then
            ThisWorkbook.Worksheets("Dokumentace").Select
            sh4 = ThisWorkbook.ActiveSheet.name
            
        If Option_First = True Then
            out = wrt_address(sh4, "B", 9)
        ElseIf Option_both = True Then
            out = wrt_address(sh4, "B", 9)
            out = wrt_address(sh4, "D", 29)
        ElseIf Option_Second = True Then
            out = wrt_address(sh4, "D", 29)
        End If
    End If
    
    If zaskoleni_Check = True Then
            ThisWorkbook.Worksheets("zaskoleni").Select
            sh4 = ThisWorkbook.ActiveSheet.name
            
        If Option_First = True Then
            out = wrt_address(sh4, "B", 9)
        ElseIf Option_both = True Then
            out = wrt_address(sh4, "B", 9)
            out = wrt_address(sh4, "D", 29)
        ElseIf Option_Second = True Then
            out = wrt_address(sh4, "D", 29)
        End If
    End If
    
    ThisWorkbook.Worksheets(sh5).Select
ElseIf sh4 = "P|fffd|ed|fffd|n|fffd| LIS" Then
            ThisWorkbook.Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Select
            sh4 = ThisWorkbook.ActiveSheet.name
            
            out = wrt_address(sh4, "A", 5)

End If


End Sub

Function wrt_address(sh2 As String, column1 As String, j As Integer)

        If Check_name1.Value = True Then
            Worksheets(sh2).Range(column1 & j).Value = customer_name1.Value
            j = j + 1
        End If
        
        If Check_name2.Value = True Then
            Worksheets(sh2).Range(column1 & j).Value = customer_name2.Value
            j = j + 1
        End If
        
        If Check_name3.Value = True Then
            Worksheets(sh2).Range(column1 & j).Value = customer_name3.Value
            j = j + 1
        End If
        
        If Check_name4.Value = True Then
            Worksheets(sh2).Range(column1 & j).Value = customer_name4.Value
            j = j + 1
        End If
        
        If Check_street.Value = True Then
            Worksheets(sh2).Range(column1 & j).Value = street.Value
            j = j + 1
        End If
        
        If Check_city.Value = True Then
            Worksheets(sh2).Range(column1 & j).Value = ZIP.Value & " " & city.Value
            j = j + 1
        End If
        
        'If Check_zip.Value = True Then
        '    Worksheets(sh2).Range("B" & J).Value = ZIP.Value
        '    J = J + 1
        'End If
        
        If Worksheets(sh2).name <> "P|fffd|ed|fffd|n|fffd| LIS" Then
        Worksheets(sh2).Range("J29").Value = customer_nr.Value
        Else:
        Worksheets(sh2).Range("A2").Value = "z|fffd|kaznick|fffd| |fffd||fffd|slo: " & customer_nr.Value
        End If
        
End Function
Attribute VB_Name = "FunctionsModule"
Option Explicit

Attribute VB_Name = "GT"
    'IMPORTANT - CHANGE gtExampleLoad() to include gtDoit() for each Gist you want to load
' bootstrap code to update VBA modules from gists
' all code is in this module - so no classes etc.
' latebinding is used to avoid need for any references
' can be found at https://gist.github.com/3403537
Option Explicit
' v2.04 - 3403537
' if you are using your own gists - change this
Const gistOwner = "brucemcpherson"

Public Function gtExampleLoad()
' this is an example of how you would load your VBE with a particular manifest
' you could set the 2nd parameter to overrride conflict checking the first time used-

' we are going to need cDataSet and cjobject stuff as well
  gtDoit "3414394", True
  
' and crest
  gtDoit "5055578", True
  
'uameasure - if instrumenting.
  gtDoit "7471153", True
  
End Function

Public Function gtDeadDropLoad()

' scriptdbcom & deaddrop
  gtDoit "8767201", True
  
' parsecom - may want to use parse.com instead
  gtDoit "7663169", True

End Function
Private Function gtExampleMakeManifestScriptDbCom()
    ' this is an example of how you would create a manifest to be loaded up as a Gist
    '
    Dim dom As Object ' DOMDocument
    Set dom = gtInitManifest("cDataset and associated classes and modules", "bruce@mcpher.com")
    '
    ' call this for each required gist of the manifest
    '---cDataSet
    gtAddToManifest dom, "3414216", "class", "cCell", "cCell.cls"
    gtAddToManifest dom, "3414216", "class", "cDataSet", "cDataSet.cls"
    gtAddToManifest dom, "3414216", "class", "cDataSets", "cDataSets.cls"
    gtAddToManifest dom, "3414216", "class", "cDataColumn", "cDataColumn.cls"
    gtAddToManifest dom, "3414216", "class", "cDataRow", "cDataRow.cls"
    gtAddToManifest dom, "3414216", "class", "cHeadingRow", "cHeadingRow.cls"
    '--Useful modules
    gtAddToManifest dom, "3414346", "module", "usefulStuff"
    '--cJobject
    gtAddToManifest dom, "3414365", "class", "cJobject"
    gtAddToManifest dom, "3414365", "module", "usefulcJobject", "usefulcJobject.vba"

    '--regex
    gtAddToManifest dom, "3414836", "module", "regXLib", "regXLib.vba"
    gtAddToManifest dom, "3414836", "class", "cregXLib", "cregXLib.cls"
    
    '-- browser & auth
    gtAddToManifest dom, "3423912", "class", "cBrowser", "cBrowser.cls"
    gtAddToManifest dom, "6937450", "class", "cOauth2", "cOauth2.cls"
    gtAddToManifest dom, "6937450", "module", "oAuthExamples", "oAuthExamples.vba"
    
    '-- scriptdb and deaddrop
    gtAddToManifest dom, "7943765", "class", "cScriptDbCom", "cScriptDbCom.cls"
    gtAddToManifest dom, "7943765", "class", "cDeadDrop", "cDeadDrop.cls"
    gtAddToManifest dom, "7943765", "module", "scriptDbCom", "scriptDbCom.vba"
    
    '-- encryption
    gtAddToManifest dom, "6937529", "module", "usefulEncrypt", "usefulEncrypt.vba"
    
        '-- analytics
    gtAddToManifest dom, "7453196", "module", "UAMeasure", "UAMeasure.vba"
    gtAddToManifest dom, "7453152", "class", "cUAMeasure", "cUAMeasure.cls"
    
    ' -- references
    gtCreateReferences dom
    

    
    ' cut and paste the result of this into a gist - this will be your manifest
    Debug.Print dom.XML
    
End Function
Private Function gtExampleMakeManifest()
    ' this is an example of how you would create a manifest to be loaded up as a Gist
    '
    Dim dom As Object ' DOMDocument
    Set dom = gtInitManifest("cDataset and associated classes and modules", "bruce@mcpher.com")
    '
    ' call this for each required gist of the manifest
    '---cDataSet
    gtAddToManifest dom, "3414216", "class", "cCell", "cCell.cls"
    gtAddToManifest dom, "3414216", "class", "cDataSet", "cDataSet.cls"
    gtAddToManifest dom, "3414216", "class", "cDataSets", "cDataSets.cls"
    gtAddToManifest dom, "3414216", "class", "cDataColumn", "cDataColumn.cls"
    gtAddToManifest dom, "3414216", "class", "cDataRow", "cDataRow.cls"
    gtAddToManifest dom, "3414216", "class", "cHeadingRow", "cHeadingRow.cls"
    '--Useful modules
    gtAddToManifest dom, "3414346", "module", "usefulStuff"
    gtAddToManifest dom, "5102369", "class", "cStringChunker.cls"

    '--cJobject
    gtAddToManifest dom, "3414365", "class", "cJobject"
    gtAddToManifest dom, "3414365", "module", "usefulcJobject", "usefulcJobject.vba"

    '--regex
    gtAddToManifest dom, "3414836", "module", "regXLib", "regXLib.vba"
    gtAddToManifest dom, "3414836", "class", "cregXLib", "cregXLib.cls"
    
    
    ' -- references
    gtCreateReferences dom
    
    ' cut and paste the result of this into a gist - this will be your manifest
    Debug.Print dom.XML
    
End Function
Private Function gtExampleMakeManifestCrest()
    ' this is an example of how you would create a manifest to be loaded up as a Gist
    '
    Dim dom As Object ' DOMDocument
    Set dom = gtInitManifest("restlibrary associated classes and modules", "bruce@mcpher.com")
    '
    ' call this for each required gist of the manifest

    
    ' crest and restlibrary
    gtAddToManifest dom, "3423885", "module", "restLibrary", "restLibrary.vba"
    gtAddToManifest dom, "3423885", "class", "cRest", "cRest.cls"
    gtAddToManifest dom, "3423912", "class", "cBrowser", "cBrowser.cls"
    
    ' -- references
    gtCreateReferences dom
    
    ' cut and paste the result of this into a gist - this will be your manifest
    Debug.Print dom.XML
    
End Function


Private Function gtClassDocumenter()
    ' this is an example of how you would create a manifest to be loaded up as a Gist
    ' this is modules required for classDoucumenter
    Dim dom As Object ' DOMDocument
    Set dom = gtInitManifest("class", "bruce@mcpher.com")
    '
    ' call this for each required gist of the manifest
    '---cVBA
    gtAddToManifest dom, "5019927", "class", "cVBAProject", "cVBAProject.vba"
    gtAddToManifest dom, "5019927", "class", "cVBAModule", "cVBAModule.vba"
    gtAddToManifest dom, "5019927", "class", "cVBAProcedure", "cVBAProcedure.vba"
    gtAddToManifest dom, "5019927", "module", "classSerializer", "classSerializer.vba"
    '-- browser
    gtAddToManifest dom, "3423912", "class", "cBrowser", "cBrowser.cls"
    
    ' -- references
    gtCreateReferences dom
    
    ' cut and paste the result of this into a gist - this will be your manifest
    Debug.Print dom.XML
    
End Function
Private Function gtCreateReferences(dom As Object) 'DOMDocument)
    ' adds all current references to an xml
    Dim r As Object ' Reference
    
    With ActiveWorkbook.VBProject
        For Each r In .References
            gtAddRefToManifest dom, r
        Next r
    End With

End Function
Private Function gtUpdateAll()
    ' do all updates for known manifests in this project
    Dim modle As Object 'VBComponent
    Dim stampLine As Long, co As New Collection, manifest As String, s As String, v As Variant
    For Each modle In ThisWorkbook.VBProject.VBComponents
        ' do we know this module?
        stampLine = gtManageable(modle)
        If stampLine > 0 Then
            ' yes we do - get the manifest
            manifest = gtStampManifest(modle, stampLine)
            If (manifest = vbNullString) Then
                MsgBox ("gistThat stamp in module " & modle.name & " fiddled with.Run again as greenField")
            Else
            ' add it to the collection of manifests we need to process
              If gtCoIndex(manifest, co) = 0 Then
                co.add manifest, manifest
              End If
            End If
        End If
    Next modle
    ' todo check if versions are up to date
    If co.count > 0 Then
        s = vbNullString
        For Each v In co
            gtDoit CStr(v)
            If s <> vbNullString Then s = s & ","
            s = s & CStr(v)
        Next v
        MsgBox ("updated " & co.count & " manifests(" & s & ")")
    End If
End Function
Private Function gtCoIndex(sid As Variant, co As Collection) As Long
    ' find index in a collection
    Dim I As Long
    gtCoIndex = 0
    For I = 1 To co.count
        If co(I) = sid Then
          gtCoIndex = I
          Exit Function
        End If
    Next I
End Function
Private Function gtPreventCaching(url As String) As String
    ' this will tweak the url with an extra random parameter to prevent any accidental caching
    Dim p As String
    If (InStr(1, url, "?") > 0) Then
        p = "&"
    Else
        p = "?"
    End If
    Randomize
    gtPreventCaching = url & p & "gtPreventCaching=" & CStr(Int(10000 * Rnd()))
End Function
Public Function gtDoit(gtDoitmanifestID As String, Optional greenField As Boolean = False) As Boolean
    Dim dom As Object ' DOMDocument
    Dim rawUrl As String, t As String, n As String, g As String
    Dim xNode As Object ' IXMLDOMNode
    Dim attrib As Object 'IXMLDOMAttribute
    Dim vbCom As Object 'VBComponent
    ' get the requested manifest
    Set dom = gtRecreateManifest(gtDoitmanifestID)

    ' now we know which gists are needed here
    If (gtWillItWork(dom, greenField)) Then
        'theres a good chance it will work
        ' for each module
        For Each xNode In dom.SelectSingleNode("//gists").ChildNodes
            t = xNode.Attributes.getNamedItem("type").Text
            Select Case t
                Case "class", "module"
                    ' get the gist
                    rawUrl = gtConstructRawUrl(xNode.Attributes.getNamedItem("gistid").Text, _
                                            xNode.Attributes.getNamedItem("filename").Text)
                    ' prevent caching will make it look like a different request
                    g = gtHttpGet(gtPreventCaching(rawUrl))
                    ' module name
                    n = xNode.Attributes.getNamedItem("module").Text
                    ' does it exist - if so then delete it
                    Set vbCom = gtModuleExists(n, ThisWorkbook)
                    If (Not vbCom Is Nothing) Then
                        ' delete everything in it
                        With vbCom.codeModule
                            .DeleteLines 1, .CountOfLines
                        End With
                    Else
                        Set vbCom = gtAddModule(n, ThisWorkbook, xNode.Attributes.getNamedItem("type").Text)
                    End If
        
                    ' add in the new code
                    With vbCom.codeModule
                        .AddFromString g
                    End With
        
                    ' stamp it
                    gtInsertStamp vbCom, gtDoitmanifestID, rawUrl
                
                Case "reference"
                    gtAddReference xNode.Attributes.getNamedItem("name").Text, _
                                   xNode.Attributes.getNamedItem("guid").Text, _
                                   xNode.Attributes.getNamedItem("major").Text, _
                                   xNode.Attributes.getNamedItem("minor").Text
                Case Else
                    Debug.Assert False
            
            End Select
        Next xNode
        gtDoit = True
    Else

    End If
End Function

Private Function gtAddReference(name As String, guid As String, major As String, minor As String) As Object ' Reference
    ' add a reference (if its not already there)
    Dim r As Object ' Reference
    On Error GoTo handle
    With ActiveWorkbook.VBProject
        For Each r In .References
            If (r.name = name) Then
                If (r.major < major Or r.major = major And r.minor < minor And Not r.BuiltIn) Then
                    .References.AddFromGuid guid, major, minor
                    .References.remove (r)
                End If
                Exit Function
            End If
        Next r
    ' if we get here then we need to add it
      Set gtAddReference = .References.AddFromGuid(guid, major, minor)
      Exit Function
    End With
    
handle:
    MsgBox ("warning - tried and failed to add reference to " & name & "v" & major & "." & minor)
    Exit Function
    
End Function
Private Function gtStampManifest(vbCom As Object, line As Long) As String 'VBComponent
    ' the manifest should be on the given line
    Dim s As String, n As Long, p As Long, marker As String
    marker = "manifest:"
    s = vbNullString
    With vbCom.codeModule
       n = InStr(1, LCase(.Lines(line, 1)), marker)
       If (n > 0) Then
        s = Mid(.Lines(line, 1), n + Len(marker))
        p = InStr(1, s, " ")
        s = Left(s, p - 1)
       End If
    End With
    gtStampManifest = s
End Function
Private Function gtInsertStamp(vbCom As Object, manifest As String, rawUrl As String) As Long 'VBComponent
    Dim stampLine As Long
    stampLine = gtManageable(vbCom)
    ' if it wasnt found then insert at line 1
    With vbCom.codeModule
        If stampLine <> 0 Then
            .DeleteLines stampLine, 1
        Else
            stampLine = 1
        End If
        .InsertLines stampLine, gtStampLog(manifest, rawUrl)
    End With
    gtInsertStamp = stampLine
    
End Function
Private Function gtWillItWork(dom As Object, _
                Optional greenField As Boolean = False) As Boolean 'DOMDocument
    
    Dim xNode As Object ' IXMLDOMNode
    Dim attrib As Object 'IXMLDOMAttribute
    Dim n As String, s As String, t As String
    Dim modle As Object 'VBComponent
    
    ' check we have something to do
    gtWillItWork = Not dom Is Nothing
    If Not gtWillItWork Then
        Exit Function
    End If
    ' first we check if these are new modules
    s = vbNullString
    For Each xNode In dom.SelectSingleNode("//gists").ChildNodes
        ' the target module
        t = xNode.Attributes.getNamedItem("type").Text
        Select Case t
            Case "class", "module"
                n = xNode.Attributes.getNamedItem("module").Text
                Set modle = gtModuleExists(n, ThisWorkbook)
                
                If (Not modle Is Nothing) Then
                    ' it exists - validate its not somethig else with the same name
                    If (gtManageable(modle) = 0 And Not greenField) Then
                        s = gtAddStr(s, n)
                    End If
                End If
            Case "reference"
            Case Else
                s = gtAddStr(s, "unknown type " & t)
        End Select
    Next xNode
    
    If (s <> vbNullString) Then
        MsgBox ("there may be a conflict with these modules names (" & s & _
            ") and some others in your project. " & _
            "If this is the first time you have run this - run with greenfield set to true to override this check")
        gtWillItWork = False
        Exit Function
    End If
   
   ' now check all gists are getable
   ' todo
   
End Function
Private Function gtAddStr(t As String, n As String) As String
    Dim s As String
    s = t
    If (s <> vbNullString) Then s = s & ","
    gtAddStr = s & n
End Function

Private Function gtRecreateManifest(manifestID As String) As Object 'DOMDocument
    Dim dom As Object 'DOMDocument
    Dim manifest As String
    
    ' get the xml string
    manifest = gtHttpGet(gtPreventCaching(gtConstructRawUrl(manifestID)))
    
    If manifest <> vbNullString Then
    ' parse the xml
        Set dom = CreateObject("MSXML.DOMDocument")
        dom.LoadXML (manifest)
        Set gtRecreateManifest = dom
    Else
        MsgBox ("Could not get manifest for " & manifestID)
    End If
End Function

Private Function gtModuleExists(name As String, wb As Workbook) As Object 'VBComponent
    ' determine whether this module exists in the given workbook
    Dim modle As Object 'VBComponent
    For Each modle In wb.VBProject.VBComponents
       If Trim(LCase(modle.name)) = Trim(LCase(name)) Then
        Set gtModuleExists = modle
        Exit Function
       End If
    Next modle
End Function

Private Function gtAddModule(name As String, wb As Workbook, modType As String) As Object ' VBComponent
    ' determine whether this module exists in the given workbook
    Dim modle As Object, t As String ' VBComponent, t As Long

    Select Case LCase(modType)
        Case "class"
            t = 2
        Case "module"
            t = 1
        Case Else
            MsgBox ("unknown module type " & modType)
    End Select
        
    Set modle = wb.VBProject.VBComponents.add(t)
    modle.name = name
    
    ' added by andypope.info
    If modle.codeModule.CountOfLines > 1 Then
        ' remove Option Explict lines if it was added automatically
        modle.codeModule.DeleteLines 1, modle.codeModule.CountOfLines
    End If
    
    Set gtAddModule = modle
End Function

Private Function gtConstructRawUrl(gistID As String, _
                Optional gistFileName As String = vbNullString) As String
    ' given a gist, where is it?
    Dim s As String
    ' raw URL
    s = "https://gist.github.com/" & gistOwner & "/" & gistID & "/raw"

    ' a gist can have multiple files in it
    If gistFileName <> vbNullString Then s = s & "/" & gistFileName
    ' TODO - specific versions
    gtConstructRawUrl = s
End Function

Private Function gtAddToManifest(dom As Object, _
                                 gistID As String, _
                                 modType As String, _
                                 modle As String, _
                                 Optional FileName As String = vbNullString, _
                                 Optional version As String = vbNullString _
                        ) As Object ' DOMDocument
                                 
    Dim Element As Object 'IXMLDOMElement
    Dim attrib As Object 'IXMLDOMAttribute
    Dim elements As Object 'IXMLDOMNodeList
    Dim head As Object 'IXMLDOMElement
    ' add an item to the manifest element - returns the dom for chaining
    Set elements = dom.getElementsByTagName("gists")
    Set head = elements.NextNode
    Set Element = dom.createElement("item" & CStr(head.ChildNodes.length + 1))
    head.appendChild Element
    
    Set attrib = dom.createAttribute("gistid")
    attrib.NodeValue = gistID
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("version")
    attrib.NodeValue = version
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("filename")
    attrib.NodeValue = FileName
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("module")
    attrib.NodeValue = modle
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("type")
    attrib.NodeValue = modType
    Element.setAttributeNode attrib
    
    Set gtAddToManifest = dom
End Function
Private Function gtAddRefToManifest(dom As Object, r As Object) As Object   ' DOMDocument, reference, domdocument
                                 
    Dim Element As Object 'IXMLDOMElement
    Dim attrib As Object 'IXMLDOMAttribute
    Dim elements As Object 'IXMLDOMNodeList
    Dim head As Object 'IXMLDOMElement
    
    ' add an item to the manifest element - returns the dom for chaining
    Set elements = dom.getElementsByTagName("gists")
    Set head = elements.NextNode
    Set Element = dom.createElement("item" & CStr(head.ChildNodes.length + 1))
    head.appendChild Element
    'r.GUID, r.name, r.Major, r.Minor, r.description
    Set attrib = dom.createAttribute("guid")
    attrib.NodeValue = r.guid
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("name")
    attrib.NodeValue = r.name
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("major")
    attrib.NodeValue = r.major
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("minor")
    attrib.NodeValue = r.minor
    Element.setAttributeNode attrib

    Set attrib = dom.createAttribute("description")
    attrib.NodeValue = r.description
    Element.setAttributeNode attrib
    
    Set attrib = dom.createAttribute("type")
    attrib.NodeValue = "reference"
    Element.setAttributeNode attrib
    
    Set gtAddRefToManifest = dom
End Function
Private Function gtInitManifest(Optional description As String = vbNullString, _
                                 Optional contact As String = vbNullString) As Object ' DOMDocument
    Dim Element As Object 'IXMLDOMElement
    Dim attrib As Object 'IXMLDOMAttribute
    Dim dom As Object ' DOMDocument
    Dim e2 As Object ' IXMLDOMElement
   
 ' creates an xml manifest of required gists
   Set dom = CreateObject("MSXML.DOMDocument")

    Set Element = dom.createElement("gistThat")
    Set attrib = dom.createAttribute("info")
    attrib.NodeValue = _
            "this is a manifest for gistThat VBA code distribution " & _
            " - see ramblings.mcpher.com for details"
    Element.setAttributeNode attrib

    
    With dom.appendChild(Element)
        Set Element = dom.createElement("manifest")
        .appendChild Element
        

        
        Set attrib = dom.createAttribute("description")
        attrib.NodeValue = description
        Element.setAttributeNode attrib

        Set attrib = dom.createAttribute("contact")
        attrib.NodeValue = contact
        Element.setAttributeNode attrib

        Element.appendChild dom.createElement("gists")

    End With
    Set gtInitManifest = dom
   
End Function
 
Private Function gtHttpGet(url As String) As String
    ' TODO oAuth
    Dim ohttp As Object
    Set ohttp = CreateObject("Msxml2.ServerXMLHTTP.6.0")
    Call ohttp.Open("GET", url, False)
    Call ohttp.Send("")
    gtHttpGet = ohttp.ResponseText
    Set ohttp = Nothing
End Function
Private Function gtStampLog(manifest As String, rawUrl As String) As String
    ' create a comment to identify this as manageable
    gtStampLog = gtStamp & _
        " updated on " & Now() & " : from manifest:" & _
        manifest & _
        " gist " & rawUrl
End Function
Private Function gtStamp() As String
' this marks a module as manageable
    gtStamp = "'gistThat@mcpher.com :do not modify this line" & _
    " - see ramblings.mcpher.com for details:"
End Function
Private Function gtManageable(vbCom As Object) As Long  ' VBComponent
    ' return the line number of the gtStamp
    ' parameters as passed by ref in .find method
    Dim startLine As Long, startColumn As Long, endLine As Long, endColumn As Long
    startLine = 1: endLine = vbCom.codeModule.CountOfLines: startColumn = 1: endColumn = 255
    
    If (vbCom.codeModule.find(gtStamp(), startLine, startColumn, endLine, endColumn)) Then
        gtManageable = startLine
    End If
    
End Function


Attribute VB_Name = "JSONLib"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const INVALID_JSON      As Long = 1
Const INVALID_OBJECT    As Long = 2
Const INVALID_ARRAY     As Long = 3
Const INVALID_BOOLEAN   As Long = 4
Const INVALID_NULL      As Long = 5
Const INVALID_KEY       As Long = 6

Private Sub class_initialize()

End Sub

Private Sub Class_Terminate()

End Sub

'
'   parse string and create JSON object (Dictionary or Collection in VB)
'
Public Function parse(ByRef str As String) As Object

    Dim Index As Long
    Index = 1
    
    On Error Resume Next

    Call skipChar(str, Index)
    Select Case Mid(str, Index, 1)
    Case "{"
        Set parse = parseObject(str, Index)
    Case "["
        Set parse = parseArray(str, Index)
    End Select

End Function

'
'   parse collection of key/value (Dictionary in VB)
'
Private Function parseObject(ByRef str As String, ByRef Index As Long) As Object

    Set parseObject = CreateObject("Scripting.Dictionary")
    
    ' "{"
    Call skipChar(str, Index)
    If Mid(str, Index, 1) <> "{" Then Err.Raise vbObjectError + INVALID_OBJECT, description:="char " & Index & " : " & Mid(str, Index)
    Index = Index + 1
    
    Do
    
        Call skipChar(str, Index)
        If "}" = Mid(str, Index, 1) Then
            Index = Index + 1
            Exit Do
        ElseIf "," = Mid(str, Index, 1) Then
            Index = Index + 1
            Call skipChar(str, Index)
        End If
        
        Dim key As String
        
        ' add key/value pair
        parseObject.add key:=parseKey(str, Index), Item:=parseValue(str, Index)
        
    Loop

End Function

'
'   parse list (Collection in VB)
'
Private Function parseArray(ByRef str As String, ByRef Index As Long) As Collection

    Set parseArray = New Collection
    
    ' "["
    Call skipChar(str, Index)
    If Mid(str, Index, 1) <> "[" Then Err.Raise vbObjectError + INVALID_ARRAY, description:="char " & Index & " : " + Mid(str, Index)
    Index = Index + 1
    
    Do
        
        Call skipChar(str, Index)
        If "]" = Mid(str, Index, 1) Then
            Index = Index + 1
            Exit Do
        ElseIf "," = Mid(str, Index, 1) Then
            Index = Index + 1
            Call skipChar(str, Index)
        End If
        
        ' add value
        parseArray.add parseValue(str, Index)
        
    Loop

End Function

'
'   parse string / number / object / array / true / false / null
'
Private Function parseValue(ByRef str As String, ByRef Index As Long)

    Call skipChar(str, Index)
    
    Select Case Mid(str, Index, 1)
    Case "{"
        Set parseValue = parseObject(str, Index)
    Case "["
        Set parseValue = parseArray(str, Index)
    Case """", "'"
        parseValue = parseString(str, Index)
    Case "t", "f"
        parseValue = parseBoolean(str, Index)
    Case "n"
        parseValue = parseNull(str, Index)
    Case Else
        parseValue = parseNumber(str, Index)
    End Select

End Function

'
'   parse string
'
Private Function parseString(ByRef str As String, ByRef Index As Long) As String

    Dim quote   As String
    Dim Char    As String
    Dim code    As String
    
    Call skipChar(str, Index)
    quote = Mid(str, Index, 1)
    Index = Index + 1
    Do While Index > 0 And Index <= Len(str)
        Char = Mid(str, Index, 1)
        Select Case (Char)
        Case "\"
            Index = Index + 1
            Char = Mid(str, Index, 1)
            Select Case (Char)
            Case """", "\\", "/"
                parseString = parseString & Char
                Index = Index + 1
            Case "b"
                parseString = parseString & vbBack
                Index = Index + 1
            Case "f"
                parseString = parseString & vbFormFeed
                Index = Index + 1
            Case "n"
                parseString = parseString & vbNewLine
                Index = Index + 1
            Case "r"
                parseString = parseString & vbCr
                Index = Index + 1
            Case "t"
                parseString = parseString & vbTab
                Index = Index + 1
            Case "u"
                Index = Index + 1
                code = Mid(str, Index, 4)
                parseString = parseString & ChrW(val("&h" + code))
                Index = Index + 4
            End Select
        Case quote
            Index = Index + 1
            Exit Function
        Case Else
            parseString = parseString & Char
            Index = Index + 1
        End Select
    Loop

End Function

'
'   parse number
'
Private Function parseNumber(ByRef str As String, ByRef Index As Long)

    Dim Value   As String
    Dim Char    As String
    
    Call skipChar(str, Index)
    Do While Index > 0 And Index <= Len(str)
        Char = Mid(str, Index, 1)
        If InStr("+-0123456789.eE", Char) Then
            Value = Value & Char
            Index = Index + 1
        Else
            If InStr(Value, ".") Or InStr(Value, "e") Or InStr(Value, "E") Then
                parseNumber = CDbl(Value)
            Else
                parseNumber = CInt(Value)
            End If
            Exit Function
        End If
    Loop


End Function

'
'   parse true / false
'
Private Function parseBoolean(ByRef str As String, ByRef Index As Long) As Boolean

    Call skipChar(str, Index)
    If Mid(str, Index, 4) = "true" Then
        parseBoolean = True
        Index = Index + 4
    ElseIf Mid(str, Index, 5) = "false" Then
        parseBoolean = False
        Index = Index + 5
    Else
        Err.Raise vbObjectError + INVALID_BOOLEAN, description:="char " & Index & " : " & Mid(str, Index)
    End If

End Function

'
'   parse null
'
Private Function parseNull(ByRef str As String, ByRef Index As Long)

    Call skipChar(str, Index)
    If Mid(str, Index, 4) = "null" Then
        parseNull = Null
        Index = Index + 4
    Else
        Err.Raise vbObjectError + INVALID_NULL, description:="char " & Index & " : " & Mid(str, Index)
    End If

End Function

Private Function parseKey(ByRef str As String, ByRef Index As Long) As String

    Dim dquote  As Boolean
    Dim squote  As Boolean
    Dim Char    As String
    
    Call skipChar(str, Index)
    Do While Index > 0 And Index <= Len(str)
        Char = Mid(str, Index, 1)
        Select Case (Char)
        Case """"
            dquote = Not dquote
            Index = Index + 1
            If Not dquote Then
                Call skipChar(str, Index)
                If Mid(str, Index, 1) <> ":" Then
                    Err.Raise vbObjectError + INVALID_KEY, description:="char " & Index & " : " & parseKey
                End If
            End If
        Case "'"
            squote = Not squote
            Index = Index + 1
            If Not squote Then
                Call skipChar(str, Index)
                If Mid(str, Index, 1) <> ":" Then
                    Err.Raise vbObjectError + INVALID_KEY, description:="char " & Index & " : " & parseKey
                End If
            End If
        Case ":"
            If Not dquote And Not squote Then
                Index = Index + 1
                Exit Do
            End If
        Case Else
            If InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Char) Then
            Else
                parseKey = parseKey & Char
            End If
            Index = Index + 1
        End Select
    Loop

End Function

'
'   skip special character
'
Private Sub skipChar(ByRef str As String, ByRef Index As Long)

    While Index > 0 And Index <= Len(str) And InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Mid(str, Index, 1))
        Index = Index + 1
    Wend

End Sub

Public Function toString(ByRef obj As Variant) As String

    Select Case VarType(obj)
        Case vbNull
            toString = "null"
        Case vbDate
            toString = """" & CStr(obj) & """"
        Case vbString
            toString = """" & encode(obj) & """"
        Case vbObject
            Dim bFI, I
            bFI = True
            If TypeName(obj) = "Dictionary" Then
                toString = toString & "{"
                Dim Keys
                Keys = obj.Keys
                For I = 0 To obj.count - 1
                    If bFI Then bFI = False Else toString = toString & ","
                    Dim key
                    key = Keys(I)
                    toString = toString & """" & key & """:" & toString(obj(key))
                Next I
                toString = toString & "}"
            ElseIf TypeName(obj) = "Collection" Then
                toString = toString & "["
                Dim Value
                For Each Value In obj
                    If bFI Then bFI = False Else toString = toString & ","
                    toString = toString & toString(Value)
                Next Value
                toString = toString & "]"
            End If
        Case vbBoolean
            If obj Then toString = "true" Else toString = "false"
        Case vbVariant, vbArray, vbArray + vbVariant
            Dim sEB
            toString = multiArray(obj, 1, "", sEB)
        Case Else
            toString = Replace(obj, ",", ".")
    End Select

End Function

Private Function encode(str) As String
    
    Dim I, j, aL1, aL2, c, p

    aL1 = Array(&H22, &H5C, &H2F, &H8, &HC, &HA, &HD, &H9)
    aL2 = Array(&H22, &H5C, &H2F, &H62, &H66, &H6E, &H72, &H74)
    For I = 1 To Len(str)
        p = True
        c = Mid(str, I, 1)
        For j = 0 To 7
            If c = Chr(aL1(j)) Then
                encode = encode & "\" & Chr(aL2(j))
                p = False
                Exit For
            End If
        Next

        If p Then
            Dim a
            a = AscW(c)
            If a > 31 And a < 127 Then
                encode = encode & c
            ElseIf a > -1 Or a < 65535 Then
                encode = encode & "\u" & String(4 - Len(Hex(a)), "0") & Hex(a)
            End If
        End If
    Next
End Function

Private Function multiArray(aBD, iBC, sPS, ByRef sPT)   ' Array BoDy, Integer BaseCount, String PoSition
    Dim iDU, iDL, I ' Integer DimensionUBound, Integer DimensionLBound
    On Error Resume Next
    iDL = LBound(aBD, iBC)
    iDU = UBound(aBD, iBC)
    
    Dim sPB1, sPB2  ' String PointBuffer1, String PointBuffer2
    If Err.Number = 9 Then
        sPB1 = sPT & sPS
        For I = 1 To Len(sPB1)
            If I <> 1 Then sPB2 = sPB2 & ","
            sPB2 = sPB2 & Mid(sPB1, I, 1)
        Next
'        multiArray = multiArray & toString(Eval("aBD(" & sPB2 & ")"))
        multiArray = multiArray & toString(aBD(sPB2))
    Else
        sPT = sPT & sPS
        multiArray = multiArray & "["
        For I = iDL To iDU
            multiArray = multiArray & multiArray(aBD, iBC + 1, I, sPT)
            If I < iDU Then multiArray = multiArray & ","
        Next
        multiArray = multiArray & "]"
        sPT = Left(sPT, iBC - 2)
    End If
    Err.clear
End Function

Attribute VB_Name = "JsonConverter"
''
' VBA-JSON v2.0.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' === VBA-UTC Headers
#If Mac Then

Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As Long) As Long

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#Else

Private Declare Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)
    
#End If

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean
    
    ' The JSON standard requires object keys to be quoted (" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean
    
    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal json_String As String) As Object
    Dim json_Index As Long
    json_Index = 1
    
    ' Remove vbCr, vbLf, and vbTab from json_String
    json_String = VBA.Replace(VBA.Replace(VBA.Replace(json_String, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")
    
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(json_String, json_Index)
    Case "["
        Set ParseJson = json_ParseArray(json_String, json_Index)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} json_DictionaryCollectionOrArray (Dictionary, Collection, or Array)
' @return {String}
''
Public Function ConvertToJson(ByVal json_DictionaryCollectionOrArray As Variant) As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    
    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True

    Select Case VBA.VarType(json_DictionaryCollectionOrArray)
    Case VBA.vbNull, VBA.vbEmpty
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(json_DictionaryCollectionOrArray))
        
        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(json_DictionaryCollectionOrArray) Then
            ConvertToJson = json_DictionaryCollectionOrArray
        Else
            ConvertToJson = """" & json_Encode(json_DictionaryCollectionOrArray) & """"
        End If
    Case VBA.vbBoolean
        If json_DictionaryCollectionOrArray Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        ' Array
        json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
        
        On Error Resume Next
        
        json_LBound = LBound(json_DictionaryCollectionOrArray, 1)
        json_UBound = UBound(json_DictionaryCollectionOrArray, 1)
        json_LBound2D = LBound(json_DictionaryCollectionOrArray, 2)
        json_UBound2D = UBound(json_DictionaryCollectionOrArray, 2)
        
        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
                
                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                        End If
                        
                        json_BufferAppend json_buffer, _
                            ConvertToJson(json_DictionaryCollectionOrArray(json_Index, json_Index2D)), _
                            json_BufferPosition, json_BufferLength
                    Next json_Index2D
                    
                    json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    json_BufferAppend json_buffer, _
                        ConvertToJson(json_DictionaryCollectionOrArray(json_Index)), _
                        json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If
        
        On Error GoTo 0
        
        json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        
        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    
    ' Dictionary or Collection
    Case VBA.vbObject
        ' Dictionary
        If VBA.TypeName(json_DictionaryCollectionOrArray) = "Dictionary" Then
            json_BufferAppend json_buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In json_DictionaryCollectionOrArray.Keys
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                json_BufferAppend json_buffer, _
                    """" & json_Key & """:" & ConvertToJson(json_DictionaryCollectionOrArray(json_Key)), _
                    json_BufferPosition, json_BufferLength
            Next json_Key
            json_BufferAppend json_buffer, "}", json_BufferPosition, json_BufferLength
        
        ' Collection
        ElseIf VBA.TypeName(json_DictionaryCollectionOrArray) = "Collection" Then
            json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In json_DictionaryCollectionOrArray
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                json_BufferAppend json_buffer, _
                    ConvertToJson(json_Value), _
                    json_BufferPosition, json_BufferLength
            Next json_Value
            json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        End If
        
        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    Case Else
        ' Number
        On Error Resume Next
        ConvertToJson = VBA.Replace(json_DictionaryCollectionOrArray, ",", ".")
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String
    
    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1
        
        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If
            
            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection
    
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1
        
        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If
            
            json_ParseArray.add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    
    json_SkipSpaces json_String, json_Index
    
    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1
    
    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)
        
        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            
            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_buffer, VBA.ChrW(VBA.val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String
    
    json_SkipSpaces json_String, json_Index
    
    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)
        
        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15 characters containing only numbers and decimal points -> Number
            If Not JsonOptions.UseDoubleForLargeNumbers And Len(json_Value) >= 16 Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """" Or VBA.Mid$(json_String, json_Index, 1) = "'" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> " ") And (json_Char <> ":") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '""' or '''")
    End If
    
    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    
    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If
        
        ' From spec, ", \, and control characters must be escaped (solidus is optional)
        
        Select Case json_AscCode
        Case 34
            ' " -> 34 -> \"
            json_Char = "\"""
        Case 92
            ' \ -> 92 -> \\
            json_Char = "\\"
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = "\/"
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = "\b"
        Case 12
            ' form feed -> 12 -> \f
            json_Char = "\f"
        Case 10
            ' line feed -> 10 -> \n
            json_Char = "\n"
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = "\r"
        Case 9
            ' tab -> 9 -> \t
            json_Char = "\t"
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select
            
        json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index
    
    json_Encode = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)
    
    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)
    
    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String
        Dim json_Index As Long
        
        json_StringIsLargeNumber = True
        
        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['
    
    Dim json_StartIndex As Long
    Dim json_StopIndex As Long
    
    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
#If Mac Then
    json_buffer = json_buffer & json_Append
#Else
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Copy memory for "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long
    
    json_AppendLength = VBA.LenB(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition
    
    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunks until buffer is long enough
        Dim json_TemporaryLength As Long
        
        json_TemporaryLength = json_BufferLength
        Do While json_TemporaryLength < json_LengthPlusPosition
            ' Initially, initialize string with 255 characters,
            ' then add large chunks (8192) after that
            '
            ' Size: # Characters x 2 bytes / character
            If json_TemporaryLength = 0 Then
                json_TemporaryLength = json_TemporaryLength + 510
            Else
                json_TemporaryLength = json_TemporaryLength + 16384
            End If
        Loop
        
        json_buffer = json_buffer & VBA.Space$((json_TemporaryLength - json_BufferLength) \ 2)
        json_BufferLength = json_TemporaryLength
    End If
    
    ' Copy memory from append to buffer at buffer position
    json_CopyMemory ByVal json_UnsignedAdd(StrPtr(json_buffer), _
                    json_BufferPosition), _
                    ByVal StrPtr(json_Append), _
                    json_AppendLength
    
    json_BufferPosition = json_BufferPosition + json_AppendLength
#End If
End Sub

Private Function json_BufferToString(ByRef json_buffer As String, ByVal json_BufferPosition As Long, ByVal json_BufferLength As Long) As String
#If Mac Then
    json_BufferToString = json_buffer
#Else
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_buffer, json_BufferPosition \ 2)
    End If
#End If
End Function

#If VBA7 Then
Private Function json_UnsignedAdd(json_Start As LongPtr, json_Increment As Long) As LongPtr
#Else
Private Function json_UnsignedAdd(json_Start As Long, json_Increment As Long) As Long
#End If

    If json_Start And &H80000000 Then
        json_UnsignedAdd = json_Start + json_Increment
    ElseIf (json_Start Or &H80000000) < -json_Increment Then
        json_UnsignedAdd = json_Start + json_Increment
    Else
        json_UnsignedAdd = (json_Start + &H80000000) + (json_Increment + &H80000000)
    End If
End Function

''
' VBA-UTC v1.0.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling
    
#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME
    
    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate
    
    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.Number & " - " & Err.description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling
    
#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME
    
    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate
    
    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.Number & " - " & Err.description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling
    
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date
    
    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))
    
    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If
            
            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")
                
                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), VBA.CInt(utc_OffsetParts(2)))
                End Select
                
                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If
        
        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), VBA.CInt(utc_TimeParts(2)))
        End Select
        
        If utc_HasOffset Then
            ParseIso = ParseIso + utc_Offset
        Else
            ParseIso = ParseUtc(ParseIso)
        End If
    End If
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.Number & " - " & Err.description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling
    
    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.Number & " - " & Err.description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    
    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If
    
    utc_Result = utc_ExecuteInShell(utc_ShellCommand)
    
    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")
        
        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
    Dim utc_File As Long
    Dim utc_Chunk As String
    Dim utc_Read As Long
    
    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")
    
    If utc_File = 0 Then: Exit Function
    
    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File)
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, utc_Read)
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = utc_pclose(utc_File)
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If
Attribute VB_Name = "LIS_contact"
Attribute VB_Base = "0{01559EBB-DFE8-4E47-A441-6EE3F946DBB2}{52FE6F5F-442C-42A7-8830-856B22556FCF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CGM_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F2").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G2").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J2").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H2").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K2").Value

sh1.Range("LIS_company_name").Value = "GCM"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B2").Value
sh3.Range("G3").Value = sh2.Range("F2").Value & sh2.Range("G2").Value & " " & sh2.Range("H2").Value
sh3.Range("G4").Value = sh2.Range("J2").Value
sh3.Range("G5").Value = sh2.Range("E2").Value
sh3.Range("G6").Value = sh2.Range("D2").Value
sh1.Activate
Unload Me
End Sub


Private Sub CompuGroup_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F25").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G25").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J25").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H25").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K25").Value

sh1.Range("LIS_company_name").Value = "Compu Group"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B25").Value
sh3.Range("G3").Value = sh2.Range("F25").Value & sh2.Range("G25").Value & " " & sh2.Range("H25").Value
sh3.Range("G4").Value = sh2.Range("J25").Value
sh3.Range("G5").Value = sh2.Range("E25").Value
sh3.Range("G6").Value = sh2.Range("D25").Value
sh1.Activate
Unload Me
End Sub

Private Sub DDsoft_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F8").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G8").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J8").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H8").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K8").Value

sh1.Range("LIS_company_name").Value = "DS Soft Olomouc s.r.o"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B8").Value
sh3.Range("G3").Value = sh2.Range("F8").Value & sh2.Range("G8").Value & " " & sh2.Range("H8").Value
sh3.Range("G4").Value = sh2.Range("J8").Value
sh3.Range("G5").Value = sh2.Range("E8").Value
sh3.Range("G6").Value = sh2.Range("D8").Value
sh1.Activate
Unload Me
End Sub

Private Sub ICZ_SK_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F24").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G24").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J24").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H24").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K24").Value

sh1.Range("LIS_company_name").Value = "ICZ SK"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B24").Value
sh3.Range("G3").Value = sh2.Range("F24").Value & sh2.Range("G24").Value & " " & sh2.Range("H24").Value
sh3.Range("G4").Value = sh2.Range("J24").Value
sh3.Range("G5").Value = sh2.Range("E24").Value
sh3.Range("G6").Value = sh2.Range("D24").Value
sh1.Activate
Unload Me
End Sub

Private Sub Infomed_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")
sh1.Range("LIS_contact_title").Value = sh2.Range("F22").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G22").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J22").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H22").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K22").Value

sh1.Range("LIS_company_name").Value = "Infomed"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B22").Value
sh3.Range("G3").Value = sh2.Range("F22").Value & sh2.Range("G22").Value & " " & sh2.Range("H22").Value
sh3.Range("G4").Value = sh2.Range("J22").Value
sh3.Range("G5").Value = sh2.Range("E22").Value
sh3.Range("G6").Value = sh2.Range("D22").Value
sh1.Activate
Unload Me
End Sub

Private Sub LCS_SK_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")
sh1.Range("LIS_contact_title").Value = sh2.Range("F21").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G21").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J21").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H21").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K21").Value

sh1.Range("LIS_company_name").Value = "LCS SK"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B21").Value
sh3.Range("G3").Value = sh2.Range("F21").Value & sh2.Range("G21").Value & " " & sh2.Range("H21").Value
sh3.Range("G4").Value = sh2.Range("J21").Value
sh3.Range("G5").Value = sh2.Range("E21").Value
sh3.Range("G6").Value = sh2.Range("D21").Value
sh1.Activate
Unload Me
End Sub

Private Sub Msoft_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F7").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G7").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J7").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H7").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K7").Value

sh1.Range("LIS_company_name").Value = "Msoft"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B7").Value
sh3.Range("G3").Value = sh2.Range("F7").Value & sh2.Range("G7").Value & " " & sh2.Range("H7").Value
sh3.Range("G4").Value = sh2.Range("J7").Value
sh3.Range("G5").Value = sh2.Range("E7").Value
sh3.Range("G6").Value = sh2.Range("D7").Value
sh1.Activate
Unload Me
End Sub

Private Sub Paclt_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F4").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G4").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J4").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H4").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K4").Value

sh1.Range("LIS_company_name").Value = "Paclt"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B4").Value
sh3.Range("G3").Value = sh2.Range("F4").Value & sh2.Range("G4").Value & " " & sh2.Range("H4").Value
sh3.Range("G4").Value = sh2.Range("J4").Value
sh3.Range("G5").Value = sh2.Range("E4").Value
sh3.Range("G6").Value = sh2.Range("D4").Value
sh1.Activate
Unload Me
End Sub

Private Sub SoftwareProject_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F23").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G23").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J23").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H23").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K23").Value

sh1.Range("LIS_company_name").Value = "Software Project"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B23").Value
sh3.Range("G3").Value = sh2.Range("F23").Value & sh2.Range("G23").Value & " " & sh2.Range("H23").Value
sh3.Range("G4").Value = sh2.Range("J23").Value
sh3.Range("G5").Value = sh2.Range("E23").Value
sh3.Range("G6").Value = sh2.Range("D23").Value
sh1.Activate
Unload Me
End Sub

Private Sub STAPRO_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F6").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G6").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J6").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H6").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K6").Value

sh1.Range("LIS_company_name").Value = "Stapro"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B6").Value
sh3.Range("G3").Value = sh2.Range("F6").Value & sh2.Range("G6").Value & " " & sh2.Range("H6").Value
sh3.Range("G4").Value = sh2.Range("J6").Value
sh3.Range("G5").Value = sh2.Range("E6").Value
sh3.Range("G6").Value = sh2.Range("D6").Value
sh1.Activate
Unload Me
End Sub

Private Sub stapro_SK_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F20").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G20").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J20").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H20").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K20").Value

sh1.Range("LIS_company_name").Value = "Stapro SK"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B20").Value
sh3.Range("G3").Value = sh2.Range("F20").Value & sh2.Range("G20").Value & " " & sh2.Range("H20").Value
sh3.Range("G4").Value = sh2.Range("J20").Value
sh3.Range("G5").Value = sh2.Range("E20").Value
sh3.Range("G6").Value = sh2.Range("D20").Value
sh1.Activate
Unload Me
End Sub

Private Sub Steiner_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F5").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G5").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J5").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H5").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K5").Value

sh1.Range("LIS_company_name").Value = "Steiner"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B5").Value
sh3.Range("G3").Value = sh2.Range("F5").Value & sh2.Range("G5").Value & " " & sh2.Range("H5").Value
sh3.Range("G4").Value = sh2.Range("J5").Value
sh3.Range("G5").Value = sh2.Range("E5").Value
sh3.Range("G6").Value = sh2.Range("D5").Value
sh1.Activate
Unload Me
End Sub

Private Sub TIS_Brno_Click()
Dim sh1 As Worksheet
Dim sh2 As Worksheet
Dim sh3 As Worksheet

Set sh1 = Worksheets("Obchodni list")
Set sh2 = Worksheets("LIS")
Set sh3 = Worksheets("P|fffd|ed|fffd|n|fffd| LIS")

sh1.Range("LIS_contact_title").Value = sh2.Range("F3").Value
sh1.Range("LIS_contact_name").Value = sh2.Range("G3").Value
sh1.Range("LIS_contact_email").Value = sh2.Range("J3").Value

sh1.Range("LIS_contact_surname").Value = sh2.Range("H3").Value
sh1.Range("LIS_contact_phone").Value = sh2.Range("K3").Value

sh1.Range("LIS_company_name").Value = "TIS Brno"

sh3.Range("G2:G7").clear
sh3.Range("G2").Value = sh2.Range("B3").Value
sh3.Range("G3").Value = sh2.Range("F3").Value & sh2.Range("G3").Value & " " & sh2.Range("H3").Value
sh3.Range("G4").Value = sh2.Range("J3").Value
sh3.Range("G5").Value = sh2.Range("E3").Value
sh3.Range("G6").Value = sh2.Range("D3").Value
sh1.Activate
Unload Me
End Sub


Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "List1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "find_customer_btn, 93, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton4, 87, 1, MSForms, CommandButton"
Attribute VB_Control = "LAB_find_contact, 71, 2, MSForms, CommandButton"
Attribute VB_Control = "Find_customer, 68, 3, MSForms, CommandButton"
Attribute VB_Control = "LIS_kontakt, 35, 4, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 63, 5, MSForms, CommandButton"
Attribute VB_Control = "CommandButton3, 77, 6, MSForms, CommandButton"
Attribute VB_Control = "CommandButton1, 79, 7, MSForms, CommandButton"

Sub CheckInOut(strWkbCheckIn As String)

    ' Determine if workbook can be checked in.
    If Workbooks(strWkbCheckIn).CanCheckIn = True Then
        Workbooks(strWkbCheckIn).CheckIn
        MsgBox strWkbCheckIn & " Dokument byl vr|fffd|cen se zm|fffd|nami (check in)."
    Else
        MsgBox "This file cannot be checked in " & _
            "at this time.  Please try again later."
    End If

End Sub



Sub slozka_SP()

Call Shell("explorer.exe " & Worksheets("Help").Range("A43").Value, vbNormalFocus)

End Sub

Private Sub CommandButton1_Click()
    'objednani Produktove podpory rinku
    Dim typ As String
    Dim OBCH_sh As Worksheet
    Set OBCH_sh = Worksheets("Obchodni list")

    Dim xml_sh As Worksheet
    Set xml_sh = Worksheets("XML")
        
    If OBCH_sh.Range("pozadovane_produkty").Value = "" Or OBCH_sh.Range("pozadovane_produkty").Value = "NE" Or OBCH_sh.Range("pozadovane_produkty").Value = "Ne" Or OBCH_sh.Range("pozadovane_produkty").Value = "ne" Then
        question = MsgBox("|fffd||fffd|dost produktov|fffd| podpory nebyla p|fffd|vodn|fffd| vypln|fffd|na, nebo byla nastanevena na NE. P|fffd|ejete si zm|fffd|nit status na ANO a pokra|fffd|ovat ve schv|fffd|len|fffd|? Pokud ne, schvalov|fffd|n|fffd| neprob|fffd|hne.", vbYesNo)
        If question = 6 Then
            OBCH_sh.Range("pozadovane_produkty").Value = "ANO"
        Else:
            OBCH_sh.Range("pozadovane_produkty").Value = "NE"
            Exit Sub
        End If
    End If
        
    If OBCH_sh.Range("customer_training_date").Value = "" Then
        MsgBox "p|fffd|ed schv|fffd|len|fffd|m po|fffd|adavku je nutn|fffd| zvolit datum |fffd|kolen|fffd|."
        OBCH_sh.Range("customer_training_date").Select
        Exit Sub
    End If
    
    If OBCH_sh.Range("PP_training_assignee").Value = "" Then
        MsgBox "p|fffd|ed schv|fffd|len|fffd|m po|fffd|adavku je nutn|fffd| zvolit, kdo bude |fffd|kolit."
        OBCH_sh.Range("PP_training_assignee").Select
        Exit Sub
    End If
    
    nazev_souboru = Worksheets("Help").Range("B35").Value
    FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
    FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    nazev = nazev_souboru
    
    kontrolni_seznam_Instalace = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A1:M32"), "C:\Temp\Kontrolni_seznam_Instalace.pdf", True, False)
    kontrolni_seznam_Preinstalace = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A33:M70"), "C:\Temp\Kontrolni_seznam_Preinstalace.pdf", True, False)
    kontrolni_seznam_Sales = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A71:M125"), "C:\Temp\Kontrolni_seznam_Sales.pdf", True, False)
    kontrolni_seznam_Products = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A126:M180"), "C:\Temp\Kontrolni_seznam_Products.pdf", True, False)
    
    If OBCH_sh.Range("pozadovane_produkty").Value = "ANO" Or OBCH_sh.Range("pozadovane_produkty").Value = "ano" Or OBCH_sh.Range("pozadovane_produkty").Value = "Ano" Then
        
        typ = "PRODUCT_ORDER"
        
        Dim summary_products As String
        summary_products = "Za|fffd|kolen|fffd|: " & OBCH_sh.Range("File_name").Value
        'XML_sh.Range("str_summary_products").Value = XML_sh.Range("String1").Value & "|fffd||fffd|dost o produktovou podporu: " & OBCH_sh.Range("project_FY").Value & XML_sh.Range("String2").Value
        xml_sh.Range("str_desc_zaskoleni").Value = xml_sh.Range("String1").Value & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
        "Pl|fffd|novan|fffd| term|fffd|n instalace: " & OBCH_sh.Range("termin").Value & " " & OBCH_sh.Range("install_date").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
        "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
        "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
        xml_sh.Range("String2").Value
    
        u = 2
        Do Until Worksheets("Help").Range("AT" & u).Value = ""
            PP_help = Worksheets("Help").Range("AT" & u).Value
            PP_pozadavek_pre = OBCH_sh.Range("PP_training_assignee").Value
            
            If PP_help = PP_pozadavek_pre Then
                xml_sh.Range("str_assignee_zaskoleni").Value = xml_sh.Range("string1").Value & Worksheets("Help").Range("AZ" & u).Value & xml_sh.Range("string2").Value
            End If
        u = u + 1
        Loop
    
            'contact3 = XML_sh.Range("string1").Value & "LAB: " & OBCH_sh.Range("LAB_contact_title").Value & " " & OBCH_sh.Range("LAB_contact_name").Value & " " & OBCH_sh.Range("LAB_contact_surname").Value & vbNewLine & _
            '    "Tel: " & OBCH_sh.Range("LAB_contact_phone").Value & ", " & OBCH_sh.Range("LAB_contact_email").Value & vbNewLine & _
            '    "IT: " & OBCH_sh.Range("IT_contact_title").Value & " " & OBCH_sh.Range("IT_contact_name").Value & " " & OBCH_sh.Range("IT_contact_surname").Value & vbNewLine & _
            '    "Tel: " & OBCH_sh.Range("IT_contact_phone").Value & ", " & OBCH_sh.Range("IT_contact_email").Value & vbNewLine & _
            '    "LIS: " & OBCH_sh.Range("LIS_contact_title").Value & " " & OBCH_sh.Range("LIS_contact_name").Value & " " & OBCH_sh.Range("LIS_contact_surname").Value & vbNewLine & _
            '    "Tel: " & OBCH_sh.Range("LIS_contact_phone").Value & ", " & OBCH_sh.Range("LIS_contact_email").Value & XML_sh.Range("string2").Value
                
            '    XML_sh.Range("str_IT_contact").Value = contact3
        
    str_body_Products = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_products
        .Body = str_body_Products
        .BodyFormat = 2
        .Attachments.add FileName
        '.Attachments.Add kontrolni_seznam_Products
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_produkty").Value = "|fffd|kol"
    Call check("Produktov|fffd| podpora schv|fffd|lena, |fffd|kol odesl|fffd|n do Rinku")
    
    End If
End Sub

Private Sub CommandButton2_Click()
    MENU.Show
End Sub

Private Sub CommandButton3_Click()
    Preinstall_form.Show False
End Sub

Private Sub schvaleni_btn_Click()
End Sub



Private Sub CommandButton4_Click()
Dim quest As Integer
Dim OBCH_sh As Worksheet
Set OBCH_sh = Worksheets("Obchodni list")

OBCH_sh.Range("payer_ID").Value = ""
OBCH_sh.Range("payer_name").Value = ""

'quest = MsgBox("Upozorn|fffd|n|fffd|, pro aktualizaci je nutn|fffd| b|fffd|t p|fffd|ipojen ve firemn|fffd| s|fffd|ti nebo p|fffd|es VPN, chcete pokra|fffd|ovat?", vbYesNo)

'If quest = 7 Then
'    Exit Sub
'End If

find_payer.write_customer.Enabled = False
find_payer.Write_payer.Enabled = True
find_payer.Show
End Sub

Sub find_customer_btn_Click()
Dim quest As Integer
Dim OBCH_sh As Worksheet
Set OBCH_sh = Worksheets("Obchodni list")

OBCH_sh.Range("customer_ID").Value = ""
OBCH_sh.Range("customer_name").Value = ""
OBCH_sh.Range("customer_city").Value = ""
OBCH_sh.Range("customer_street").Value = ""
OBCH_sh.Range("customer_ZIP").Value = ""

'quest = MsgBox("Upozorn|fffd|n|fffd|, pro aktualizaci je nutn|fffd| b|fffd|t p|fffd|ipojen ve firemn|fffd| s|fffd|ti nebo p|fffd|es VPN, chcete pokra|fffd|ovat?", vbYesNo)

'If quest = 7 Then
'    Exit Sub
'End If

find_payer.write_customer.Enabled = True
find_payer.Write_payer.Enabled = True
find_payer.Show
End Sub

Sub Find_customer_Click()

Project_name_wizard.Show

End Sub
Sub Find_customer_PaL()

Dim nr As String
Dim I As Integer
Dim sh As String
Dim city0 As String
Dim sqlstr As String
Dim client As String

I = 2

sh = "source"
customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value
payer_nr = Worksheets("Obchodni list").Range("payer_ID").Value

If customer_nr = "" Then
    MsgBox ("Pr|fffd|zdn|fffd| pole |fffd||fffd|slo z|fffd|kazn|fffd|ka H25")
    Exit Sub
ElseIf Len(customer_nr) <> 10 Then
    MsgBox ("Nevyhovuj|fffd|c|fffd| d|fffd|lka z|fffd|kaznick|fffd|ho |fffd||fffd|sla. |fffd||fffd|slo mus|fffd| m|fffd|t d|fffd|lku 10 znak|fffd|.")
    Exit Sub
End If

If Worksheets("Obchodni list").Range("zeme_instalace").Value = "SCZ" Then
    client = 3013
ElseIf Worksheets("Obchodni list").Range("zeme_instalace").Value = "SSK" Then
    client = 3015
End If

sqlstr = "SELECT CustomerNo, name, name2, name3, name4, address1, city, ZIP, shortname from rinku_customer where client='" & client & "' and customerno='" & customer_nr & "'"

load_from_minerva_FN (sqlstr)

Do Until Worksheets(sh).Range("A" & I).Value = ""
nr = Worksheets(sh).Range("A" & I).Value
If nr = customer_nr Then
    customer_name1 = Worksheets(sh).Range("B" & I).Value
    customer_name2 = Worksheets(sh).Range("C" & I).Value
    customer_name3 = Worksheets(sh).Range("D" & I).Value
    customer_name4 = Worksheets(sh).Range("E" & I).Value
    city = Worksheets(sh).Range("G" & I).Value
    
    customer = customer_name1 & " " & customer_name2 & " " & customer_name3 & " " & customer_name4
    
    Worksheets("Obchodni list").Range("customer_name").Value = customer
    Worksheets("Obchodni list").Range("customer_street").Value = Worksheets(sh).Range("F" & I).Value
    Worksheets("Obchodni list").Range("customer_city").Value = city
    Worksheets("Obchodni list").Range("customer_ZIP").Value = Worksheets(sh).Range("H" & I).Value
    Worksheets("Obchodni list").Range("project_FY").Value = Worksheets(sh).Range("I" & I).Value & "_" & Worksheets("Obchodni list").Range("typ_analyzatoru")
    Call check("Proveden z|fffd|pis z|fffd|kaznick|fffd|ho |fffd||fffd|sla z PaL")
    Exit Do
End If
I = I + 1
Loop

If payer_nr <> "" Then

I = 2
    If payer_nr = "" Then
        MsgBox ("Pr|fffd|zdn|fffd| pole |fffd||fffd|slo z|fffd|kazn|fffd|ka H25")
        Exit Sub
    ElseIf Len(payer_nr) <> 10 Then
        MsgBox ("Nevyhovuj|fffd|c|fffd| d|fffd|lka z|fffd|kaznick|fffd|ho |fffd||fffd|sla payera. |fffd||fffd|slo mus|fffd| m|fffd|t d|fffd|lku 10 znak|fffd|.")
        Exit Sub
    End If
    
    If Worksheets("Obchodni list").Range("zeme_instalace").Value = "SCZ" Then
        client = 3013
    ElseIf Worksheets("Obchodni list").Range("zeme_instalace").Value = "SSK" Then
        client = 3015
    End If
    
    sqlstr = "SELECT CustomerNo, name, name2, name3, name4, address1, city, ZIP, shortname from rinku_customer where client='" & client & "' and customerno='" & payer_nr & "'"
    
    load_from_minerva_FN (sqlstr)
    
    Do Until Worksheets(sh).Range("A" & I).Value = ""
    nr = Worksheets(sh).Range("A" & I).Value
    If nr = payer_nr Then
        payer_name1 = Worksheets(sh).Range("B" & I).Value
        payer_name2 = Worksheets(sh).Range("C" & I).Value
        payer_name3 = Worksheets(sh).Range("D" & I).Value
        payer_name4 = Worksheets(sh).Range("E" & I).Value
        
        payer = payer_name1 & " " & payer_name2 & " " & payer_name3 & " " & payer_name4
        
        Worksheets("Obchodni list").Range("payer_name").Value = payer
        Call check("Proveden z|fffd|pis |fffd||fffd|sla payera z PaL")
        Exit Do
    End If
    I = I + 1
    Loop

End If


End Sub
Private Sub LAB_find_contact_Click()

customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value

If customer_nr = "" Then
    MsgBox ("Pr|fffd|zdn|fffd| pole |fffd||fffd|slo z|fffd|kazn|fffd|ka")
    Exit Sub
ElseIf Len(customer_nr) <> 10 Then
    MsgBox ("Nevyhovuj|fffd|c|fffd| d|fffd|lka z|fffd|kaznick|fffd|ho |fffd||fffd|sla. |fffd||fffd|slo mus|fffd| m|fffd|t d|fffd|lku 10 znak|fffd|.")
    Exit Sub
End If


Dim quest As Integer

quest = MsgBox("Upozorn|fffd|n|fffd|, pro aktualizaci je nutn|fffd| b|fffd|t p|fffd|ipojen ve firemn|fffd| s|fffd|ti nebo p|fffd|es VPN, chcete pokra|fffd|ovat?", vbYesNo)

If quest = 7 Then
    Exit Sub
End If

customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value

If customer_nr = "" Then
    MsgBox ("Pr|fffd|zdn|fffd| pole |fffd||fffd|slo z|fffd|kazn|fffd|ka H25")
    Exit Sub
ElseIf Len(customer_nr) <> 10 Then
    MsgBox ("Nevyhovuj|fffd|c|fffd| d|fffd|lka z|fffd|kaznick|fffd|ho |fffd||fffd|sla. |fffd||fffd|slo mus|fffd| m|fffd|t d|fffd|lku 10 znak|fffd|.")
    Exit Sub
End If

Find_contact.Show
End Sub

Private Sub LIS_kontakt_Click()
LIS_contact.Show
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    'SLS issue
    If Target.Address = "$C$11:$D$11" Then
        'SLS_issue.Show False
                
        If Worksheets("Obchodni list").Range("SLS_issue").Value = "" Then
            Call AGetTickets("Obch_list")
        End If
        'fGetIssuesStatus.Show False
    End If
    
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    '** Code goes in the Worksheet specific module
    'deinstalace
    If Target.Address = Range("likvidace_pristroje").Address Then
        'SLS_issue.Show False
                
        If Worksheets("Obchodni list").Range("likvidace_pristroje").Value = "ANO" Then
            Deinstall_form.Show False
        End If
        'fGetIssuesStatus.Show False
    End If
    
If Target.Address = Range("druh_smlouvy").Address Then
        'If Intersect(Target, Range("F3")) Is Nothing Then Exit Sub
        
        
        If Worksheets("Obchodni list").Range("druh_smlouvy").Value = "DEMO" Then
            Application.ScreenUpdating = False
            Worksheets("Obchodni list").Range("druh_servisu").Value = "Warranty service"
            Worksheets("Obchodni list").Range("pozadovany_CRAS").Value = "NE"
            Worksheets("Obchodni list").Range("pozadovane_sncs").Value = "NE"
            Worksheets("Obchodni list").Range("pozadovany_LIS").Value = "NE"
            Worksheets("Obchodni list").Calculate
            Application.ScreenUpdating = True
            'Exit Sub
        Else
            Application.ScreenUpdating = False
            Worksheets("Obchodni list").Range("druh_servisu").Value = "zvolte pros|fffd|m"
            Worksheets("Obchodni list").Range("pozadovany_CRAS").Value = "zvolte pros|fffd|m"
            Worksheets("Obchodni list").Range("pozadovane_sncs").Value = "zvolte pros|fffd|m"
            Worksheets("Obchodni list").Range("pozadovany_LIS").Value = "zvolte pros|fffd|m"
            Worksheets("Obchodni list").Calculate
            Application.ScreenUpdating = True
            'Exit Sub
        End If
            
    ElseIf Target.Address = Range("pozadovany_CRAS").Address Then
            If Range("pozadovany_CRAS").Value = "NE" Then
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("IT_contact_title").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("IT_contact_name").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("IT_contact_surname").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("IT_contact_phone").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("IT_contact_email").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Application.ScreenUpdating = True
                Exit Sub
            Else
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("IT_contact_title").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("IT_contact_name").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("IT_contact_surname").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("IT_contact_phone").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("IT_contact_email").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Application.ScreenUpdating = True
                Exit Sub
            End If
    ElseIf Target.Address = Range("pozadovany_LIS").Address Then

            If Range("pozadovany_LIS").Value = "NE" Then
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("LIS_connection_date").Value = ""
                Worksheets("Obchodni list").Range("LIS_connection_date").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("LIS_contact_title").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("LIS_contact_name").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("LIS_contact_surname").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("LIS_contact_phone").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("LIS_contact_email").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("LIS_select1").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Application.ScreenUpdating = True
                Exit Sub
            Else
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("LIS_connection_date").FormulaLocal = "=install_date"
                Worksheets("Obchodni list").Range("LIS_connection_date").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("LIS_contact_title").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("LIS_contact_name").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("LIS_contact_surname").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("LIS_contact_phone").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("LIS_contact_email").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("LIS_select1").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Application.ScreenUpdating = True
                Exit Sub
            End If
    ElseIf Target.Address = Range("pozadovane_produkty").Address Then
            
            If Range("pozadovane_produkty").Value = "NE" Then
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("customer_training_date").Select
                Worksheets("Obchodni list").Range("customer_training_date").Value = ""
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("PP_training_assignee").Select
                Worksheets("Obchodni list").Range("PP_training_assignee").Value = ""
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Application.ScreenUpdating = True
                Exit Sub
            Else
            Application.ScreenUpdating = False
                'Worksheets("Obchodni list").Range("customer_training_date").FormulaLocal = "=KDY|fffd|(zeme_instalace=""SCZ"";WORKDAY(install_date;1;CZ_svatky);KDY|fffd|(zeme_instalace=""SSK"";WORKDAY(install_date;1;sk_svatky);""country nevypln|fffd|no""))"
                Worksheets("Obchodni list").Range("customer_training_date").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("PP_training_assignee").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Application.ScreenUpdating = True
                Exit Sub
            End If
    ElseIf Target.Address = Range("likvidace_pristroje").Address Then
            
            If Range("likvidace_pristroje").Value = "NE" Then
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("deinstall_type").Select
                Worksheets("Obchodni list").Range("deinstall_type").Value = ""
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("deinstall_termin").Select
                Worksheets("Obchodni list").Range("deinstall_termin").Value = ""
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("deinstall_description").Select
                Worksheets("Obchodni list").Range("deinstall_description").Value = ""
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("deinstall_EQ_NR").Select
                Worksheets("Obchodni list").Range("deinstall_EQ_NR").Value = ""
                Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Application.ScreenUpdating = True
                Exit Sub
            Else
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("deinstall_type").Value = ""
                Worksheets("Obchodni list").Range("deinstall_type").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("deinstall_termin").Value = ""
                Worksheets("Obchodni list").Range("deinstall_termin").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("deinstall_description").Value = ""
                Worksheets("Obchodni list").Range("deinstall_description").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("deinstall_EQ_NR").Value = ""
                Worksheets("Obchodni list").Range("deinstall_EQ_NR").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Application.ScreenUpdating = True
                Exit Sub
            End If
    ElseIf Target.Address = Range("preinstall_status").Address Then
            
            If Range("pozadovany_LIS").Value = "SCZ" Then
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("date_start_preinstall").Select
                   Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                Worksheets("Obchodni list").Range("date_end_preinstall").Select
                   Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
                   Application.ScreenUpdating = True
                Exit Sub
            Else
            Application.ScreenUpdating = False
                Worksheets("Obchodni list").Range("date_start_preinstall").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Worksheets("Obchodni list").Range("date_end_preinstall").Select
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                Application.ScreenUpdating = True
                Exit Sub
            End If
    ElseIf Target.Address = Range("zeme_instalace").Address Then
            If Range("zeme_instalace").Value = "zvolte" Then
                Worksheets("cenov|fffd| popt|fffd|vka - LIS").Range("LIS_address").Value = Worksheets("Help").Range("SCZ_address").Value
                Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("LIS_address2").Value = Worksheets("Help").Range("SCZ_address").Value
            ElseIf Range("zeme_instalace").Value = "SCZ" Then
                Worksheets("cenov|fffd| popt|fffd|vka - LIS").Range("LIS_address").Value = Worksheets("Help").Range("SCZ_address").Value
                Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("LIS_address2").Value = Worksheets("Help").Range("SCZ_address").Value
            ElseIf Range("zeme_instalace").Value = "SSK" Then
                Worksheets("cenov|fffd| popt|fffd|vka - LIS").Range("LIS_address").Value = Worksheets("Help").Range("SSK_address").Value
                Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("LIS_address2").Value = Worksheets("Help").Range("SSK_address").Value
            End If
    End If
End Sub

Sub povol()
Application.EnableEvents = True
End Sub

Sub vzorce_recovery()
Worksheets("Obchodni list").Range("customer_training_date").FormulaLocal = "=KDY|fffd|(zeme_instalace=""SCZ"";WORKDAY(install_date;1;CZ_svatky);KDY|fffd|(zeme_instalace=""SSK"";WORKDAY(install_date;1;sk_svatky);""country nevypln|fffd|no""))"

End Sub

Attribute VB_Name = "List10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "List12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "List13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub user()



End Sub

Sub fill()
    For atribut = 4 To 57
    c = 4
    x = Worksheets("Buffer").Cells(atribut, 2).Value
    y = Worksheets("Buffer").Cells(atribut, 3).Value

        Worksheets("Buffer").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
        Worksheets("Check").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
    Next atribut
End Sub
Attribute VB_Name = "List14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub user()

If Worksheets("Obchodni list").Range("I13").Value <> "ANO" Then Exit Sub

For c = 3 To 28

If Worksheets("Check").Cells(3, c).Value = "" Then
Worksheets("Check").Cells(1, c).Value = Environ("username")
Worksheets("Check").Cells(2, c).Value = Now
Worksheets("Check").Cells(3, c).Value = "check"


    If Worksheets("Check").Cells(4, c - 1).Value <> Worksheets("Obchodni list").Cells(3, 6).Value Then
        Worksheets("Check").Cells(4, c).Value = Worksheets("Obchodni list").Cells(3, 6).Value
        Exit For
    ElseIf Worksheets("Check").Cells(4, c - 1).Value = Worksheets("Obchodni list").Cells(3, 6).Value Then
        Worksheets("Check").Cells(4, c).Value = "---"
        Exit For
    End If

End If
Next c


End Sub
Attribute VB_Name = "List15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "change_format2, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "stock_info, 2, 1, MSForms, CommandButton"
Private Sub change_format_Click()
Worksheets("Dodaci listy sklad").Range("F5:F300").NumberFormat = "0"
End Sub

Private Sub change_format2_Click()

Worksheets("Dodaci listy servis").Range("F5:F300").NumberFormat = "0"

End Sub

Private Sub stock_info_Click()
stock_menu.Show
End Sub
Attribute VB_Name = "List16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "search_menu, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "read_rows, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "clear_parts, 4, 3, MSForms, CommandButton"
Attribute VB_Control = "predani_switch, 5, 4, MSForms, CommandButton"

Private Sub clear_parts_Click()
sh2 = "Predani"
Worksheets(sh2).Range("A37:K300").clear
Worksheets(sh2).Range("B37:K37").Select
    
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With

End Sub

Private Sub predani_switch_Click()
    If Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O P|fffd|ED|fffd|N|fffd| P|fffd||fffd|STROJE" Then
        Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE"
    ElseIf Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE" Then
        Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O P|fffd|ED|fffd|N|fffd| P|fffd||fffd|STROJE"
    End If
    
    Application.ScreenUpdating = False
    
    Range("B21:K26").Select
    Selection.Cut destination:=Range("L21:U26")
    Range("B29:K34").Select
    Selection.Cut destination:=Range("B21:K26")
    Range("L21:U26").Select
    Selection.Cut destination:=Range("B29:K34")
    Range("H26").Select
    
    Application.ScreenUpdating = True
End Sub

Private Sub read_rows_Click()
Dim j As Integer
Dim serial As String
I = 5
j = 37
sh = "Dodaci listy Sklad"
sh2 = "Predani"

sh3 = "Dodaci listy Servis"
'Application.ScreenUpdating = False
'ThisWorkbook.Sheets(sh2).EnableCalculation = False

Worksheets(sh2).Range("A37:K300").clear
Worksheets(sh2).Range("B37:K37").Select
    
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With

Do Until I = 150

part = Worksheets(sh).Range("B" & I).Value
piece = Worksheets(sh).Range("C" & I).Value
serial = Worksheets(sh).Range("F" & I).Value
    
    If serial = "" Then
        serial = "-"
    End If
    
choice = Worksheets(sh).Range("H" & I).Value

If choice = "x" Or choice = "X" Then
    
    
    'If Worksheets(sh).Range("A" & i).Value <> "" Then
        Worksheets(sh2).Range("B" & j).Value = part
        Worksheets(sh2).Range("B" & j).IndentLevel = 1
        
        Worksheets(sh2).Range("H" & j).Value = piece
        
        'Worksheets("Dodaci listy").Range("F5:F300").NumberFormat = "@"
        
    
       'Worksheets(sh2).Range("I" & j).Value = serial
        Worksheets(sh2).Range("I" & j).NumberFormat = "@"
        'Worksheets(sh2).Range("I" & j).Value = serial
        Worksheets(sh2).Range("I" & j).Value = serial
        Worksheets(sh2).Range("I" & j).IndentLevel = 1
        
        Worksheets(sh2).Range("H" & j).Select
        Call border(j)
        
        Worksheets(sh2).Range("B" & j).Select
        Call border2(j)
        
        Worksheets(sh2).Range("K" & j).Select
        Call border3(j)
        
        j = j + 1
    'End If
End If
    I = I + 1
Loop

I = 5
Do Until I = 150

part = Worksheets(sh3).Range("B" & I).Value
piece = Worksheets(sh3).Range("C" & I).Value
serial = Worksheets(sh3).Range("F" & I).Value
    
    If serial = "" Then
        serial = "-"
    End If
    
choice = Worksheets(sh3).Range("H" & I).Value

If choice = "x" Or choice = "X" Then
    
    
    'If Worksheets(sh).Range("A" & i).Value <> "" Then
        Worksheets(sh2).Range("B" & j).Value = part
        Worksheets(sh2).Range("B" & j).IndentLevel = 1
        
        Worksheets(sh2).Range("H" & j).Value = piece
        
        'Worksheets("Dodaci listy").Range("F5:F300").NumberFormat = "@"
        
    
       'Worksheets(sh2).Range("I" & j).Value = serial
        Worksheets(sh2).Range("I" & j).NumberFormat = "@"
        'Worksheets(sh2).Range("I" & j).Value = serial
        Worksheets(sh2).Range("I" & j).Value = serial
        Worksheets(sh2).Range("I" & j).IndentLevel = 1
        
        Worksheets(sh2).Range("H" & j).Select
        Call border(j)
        
        Worksheets(sh2).Range("B" & j).Select
        Call border2(j)
        
        Worksheets(sh2).Range("K" & j).Select
        Call border3(j)
        
        j = j + 1
    'End If
End If
    I = I + 1
Loop



    Worksheets(sh2).Range("B" & j & ":K" & j).Select
    Call border4(j)
    
    If j > 59 And j < 68 Then
        j = 68
    End If
        
        Worksheets(sh2).Range("B" & j + 5 & ":D" & j + 5).Select
        Call border5(j)
        Worksheets(sh2).Range("B" & j + 5).Value = "z|fffd|stupce za SYSMEX CZ s.r.o."
        
        Worksheets(sh2).Range("H" & j + 5 & ":K" & j + 5).Select
        Call border5(j)
        Worksheets(sh2).Range("H" & j + 5).Value = "z|fffd|stupce za laborato|fffd|"
        Sheets(sh2).Shapes("stample_predani").Top = Sheets(sh2).rows(j).Top
        
        place = InputBox("Zadej m|fffd|sto, kde se bude podepisovat p|fffd|ed|fffd|n|fffd|. Bude to V......")
        
        Worksheets(sh2).Range("B" & j + 8 & ":D" & j + 8).Select
        Call border5(j)
        Worksheets(sh2).Range("B" & j + 8).Value = "V " & place & ", dne"
        Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("F37").Value = "V " & place & " dne ....................."
'Application.ScreenUpdating = True
'ThisWorkbook.Sheets(sh2).EnableCalculation = True
    check ("DOCS2")
End Sub

Private Sub search_menu_Click()

Finder.Show

End Sub



Attribute VB_Name = "List17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub excelmysql2()
' VBA to perform various actions on MySQL tables using VBA
' Majority of the original code adapted from Carlmack http://www.ozgrid.com/forum/showthread.php?t=46893
 
' PLEASE DO THE FOLLOWING BEFORE EXECUTING CODE:
' 1)In VBE you need to go Tools/References and check Microsoft Active X Data Objects 2.x library
 ' 2)Install MySQL ODBC 3.51 Driver. See dev.mysql.com/downloads/connector/odbc/3.51.html or google "MySQL ODBC 3.51 Driver"
 
'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
Dim I As Long ' counter
Dim sqlstr As String ' SQL to perform various actions
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant

'----------------------------------------------------------------------
' Establish connection to the database
server_name = "172.16.1.223" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "Minerva_SAPway_CASH" ' Enter your database name here
user_id = "scz27302" ' enter your user ID here
password = "Sysmex0819" ' Enter your password here

Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "DSN=minerva connect;Trusted_Connection=Yes;APP=Microsoft Office 2010;WSID=" & hostName & ";DATABASE=Minerva_SAPway_CASH" _

With Worksheets("Source").Cells ' Enter your sheet name and range here
.ClearContents
End With

Set rs = New ADODB.Recordset
sqlstr = "SELECT     account.account_id, account.name, account.name2, account.name3,account.name4, account.address1, account.city, account.plz from account where kz_land ='CZ'"
'qlstr = "SELECT     ac_asset.kdnr_cid, account.name, account.name2, account.name3,account.name4, account.address1, account.plz , account.city, account.postfach FROM ac_asset INNER JOIN account ON ac_asset.mandant = account.mandant AND ac_asset.kdnr_cid = account.account_id WHERE kz_land ='CZ'"
rs.Open sqlstr, conn, adOpenStatic
With Worksheets("Source").Range("A2") ' Enter your sheet name and range here
.ClearContents
.CopyFromRecordset rs
End With

'-----------------------------------------------------------------------
' Close connections
On Error Resume Next
rs.Close

Set rs = Nothing
conn.Close
Set conn = Nothing
On Error GoTo 0
End Sub


Attribute VB_Name = "List18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "read_rows_dokumentace, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "search_menu2, 1, 3, MSForms, CommandButton"
Private Sub load_from_minerva2_Click()
load_from_minerva_FN
End Sub

Private Sub read_rows_dokumentace_Click()
Dim j As Integer

I = 5
j = 40
k = 1
sh = "Dodaci listy Sklad"
sh2 = "Dokumentace"
sh3 = "source2"
sh4 = "zaskoleni"
sh5 = "Dodaci listy Servis"

Worksheets(sh2).Range("A39:K300").clear
Worksheets(sh4).Range("A39:K43").clear

Do Until Worksheets(sh).Range("A" & I).Value = ""

part = Worksheets(sh).Range("B" & I).Value
piece = Worksheets(sh).Range("C" & I).Value
serial = Worksheets(sh).Range("F" & I).Value

If Worksheets(sh).Range("I" & I).Value = "x" Then
    
    trans = Worksheets(sh).Range("B" & I).Value
    Do Until Worksheets(sh3).Range("A" & k).Value = ""
        If Worksheets(sh3).Range("C" & k).Value = part Then
            trans = Worksheets(sh3).Range("B" & k).Value
            Exit Do
        End If
        k = k + 1
    Loop
    
    
    Worksheets(sh2).Range("C" & j).Value = trans
    Worksheets(sh2).Range("C" & j).IndentLevel = 1
       
    Worksheets(sh2).Range("G" & j).Value = "SN: " & serial
    Worksheets(sh2).Range("G" & j).IndentLevel = 1
    
    Worksheets(sh4).Range("C" & j).Value = trans
    Worksheets(sh4).Range("C" & j).IndentLevel = 1
       
    Worksheets(sh4).Range("G" & j).Value = "SN: " & serial
    Worksheets(sh4).Range("G" & j).IndentLevel = 1
    
    
    j = j + 1
   
End If
    I = I + 1
Loop

    j = j + 1
    Worksheets(sh2).Range("B" & j).Value = "Dokumenty: "
    Worksheets(sh2).Range("B" & j).Select
    Selection.Font.Bold = True
    j = j + 2
    Worksheets(sh2).Range("C" & j).Value = "1. P|fffd|ed|fffd|vac|fffd| protokol k p|fffd||fffd|stroji"
    j = j + 2
    Worksheets(sh2).Range("C" & j).Value = "2. Origin|fffd|l opera|fffd|n|fffd|ho manu|fffd|lu (sou|fffd||fffd|st p|fffd||fffd|stroje)"
    j = j + 2
    Worksheets(sh2).Range("C" & j).Value = "3. |fffd|esk|fffd| p|fffd|eklad opera|fffd|n|fffd|ho manu|fffd|lu"
    'J = J + 2
    'Worksheets(sh2).Range("C" & J).Value = "4. Prohl|fffd|en|fffd| o shod|fffd|"
    j = j + 2
    Worksheets(sh2).Range("C" & j).Value = "4. Bezpe|fffd|nostn|fffd| listy a p|fffd||fffd|balov|fffd| let|fffd|ky k pou|fffd||fffd|van|fffd|m reagenci|fffd|m"
    'j = j + 2
    'Worksheets(sh2).Range("C" & j).Value = "5. CE Certifik|fffd|t"
    j = j + 2
    Worksheets(sh2).Range("C" & j).Value = "5. Verifika|fffd|n|fffd| protokol"
    'J = J + 2
    'Worksheets(sh2).Range("C" & J).Value = "7. Objedn|fffd|vka na kontroln|fffd| materi|fffd|l"
    j = j + 2
    Worksheets(sh2).Range("C" & j).Value = "6. Formul|fffd||fffd| celoro|fffd|n|fffd| objedn|fffd|vky kontroln|fffd|ho materi|fffd|lu (ti|fffd|t|fffd|n|fffd| i elektronick|fffd| verze)."
    
    place = InputBox("Zadej m|fffd|sto, kde se bude podepisovat p|fffd|ed|fffd|n|fffd|. Bude to V......")
        
        Worksheets(sh2).Range("B" & j + 6 & ":D" & j + 6).Select
        Call border5(j)
        Worksheets(sh2).Range("B" & j + 6).Value = "V " & place & ", dne"
        Worksheets(sh4).Range("B63").Value = "V " & place & ", dne"
        
        Worksheets(sh2).Range("H" & j + 6 & ":K" & j + 6).Select
        Call border5(j)
        Worksheets(sh2).Range("H" & j + 6).Value = "P|fffd|evzal(a)"
        Worksheets(sh2).Range("H" & j + 7).Value = "Jm|fffd|no a p|fffd||fffd|jmen|fffd|, h|fffd|lkov|fffd|"
        Worksheets(sh2).Range("H" & j + 8).Value = "Podpis, raz|fffd|tko"
   Call check("DOCS1")
End Sub

Private Sub search_menu2_Click()
Finder.Show
End Sub
Attribute VB_Name = "List19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Function BookOpen(strBookName As String) As Boolean
    Dim oBk As Workbook
    On Error Resume Next
    Set oBk = Workbooks(strBookName)
    On Error GoTo 0
    If oBk Is Nothing Then
        BookOpen = False
    Else
        BookOpen = True
    End If
End Function
Function Contains(objCollection As Object, strName As String) As Boolean
    Dim o As Object
    On Error Resume Next
    Set o = objCollection(strName)
    Contains = (Err.Number = 0)
    Err.clear
 End Function
Private Function ConvertAccent(ByVal inputString As String) As String
 
Const AccChars As String = _
    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||3979||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5f3e||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7ca||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|{} /\<>|?*"
Const RegChars As String = _
    "AaAaAaAaAaCcCcCcDdDdEeEeEeEeIiIiLlLlLlNnNnOoOoOoOoRrRrSsSssSsTtTtUuUuUuUuYyZzZzZz()________"
 
Dim I As Long, j As Long
Dim tempstring As String
Dim currentCharacter As String
Dim found As Boolean
Dim foundPosition As Long
 
  tempstring = inputString
 
  ' loop through the shorter string
  Select Case True
    Case Len(AccChars) <= Len(inputString)
      ' accent character list is shorter (or same)
      ' loop through accent character string
      For I = 1 To Len(AccChars)
 
        ' get next accent character
        currentCharacter = Mid$(AccChars, I, 1)
 
        ' replace with corresponding character in "regular" array
        If InStr(tempstring, currentCharacter) > 0 Then
          tempstring = Replace(tempstring, currentCharacter, Mid$(RegChars, I, 1))
        End If
 
      Next I
    Case Len(AccChars) > Len(inputString)
      ' input string is shorter
      ' loop through input string
      For I = 1 To Len(inputString)
 
        ' grab current character from input string and
        ' determine if it is a special char
        currentCharacter = Mid$(inputString, I, 1)
        found = (InStr(AccChars, currentCharacter) > 0)
 
        If found Then
 
          ' find position of special character in special array
          foundPosition = InStr(AccChars, currentCharacter)
 
          ' replace with corresponding character in "regular" array
          tempstring = Replace(tempstring, currentCharacter, _
    Mid$(RegChars, foundPosition, 1))
 
        End If
      Next I
  End Select
 
  ConvertAccent = tempstring
End Function
Function Send_as_PDF(ByVal FileName As String, Recipient As String, CCopy As String, Title As String, Message As String) As Boolean
Dim IsCreated As Boolean
  Dim I As Long
  Dim signature As String
  Dim OutlApp As Object
 
  ' Define PDF filename
  I = InStrRev(FileName, ".pdf")
  If I < 1 Then FileName = FileName & ".pdf"
  FileName = CreateObject("WScript.Shell").SpecialFolders("Desktop") & "\" & FileName

 
  ' Export activesheet as PDF
  With ActiveSheet
    .ExportAsFixedFormat Type:=xlTypePDF, FileName:=FileName, Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False
  End With
 
  ' Use already open Outlook if possible
  ''On Error Resume Next
  Set OutlApp = GetObject(, "Outlook.Application")
  If Err Then
    Set OutlApp = CreateObject("Outlook.Application")
    IsCreated = True
  End If
  ''OutlApp.Visible = True
  ''On Error GoTo 0
 
  ' Prepare e-mail with PDF attachment
  With OutlApp.CreateItem(0)
  .display

  signature = .htmlBody
   
    ' Prepare e-mail
    .Subject = Title
    .To = Recipient ' <-- Put email of the recipient here
    .Cc = CCopy ' <-- Put email of 'copy to' recipient here
    .htmlBody = "<div class=WordSection1><p class=MsoNormal><o:p><font size=""11pt"">" & Message & "</font>" & signature
    .Attachments.add FileName
   
    ' Try to send
    On Error Resume Next
    ''Application.Visible = True
    If Err Then
      MsgBox "Chyba v odesl|fffd|n|fffd| e-mailu", vbExclamation
    Else
      ''MsgBox "E-mail byl |fffd|sp|fffd|n|fffd| odesl|fffd|n", vbInformation
    End If
    ''On Error GoTo 0
   
  End With
 
  ' Delete PDF file
  Kill FileName
 
  ' Quit Outlook if it was created by this code
  ''If IsCreated Then OutlApp.Quit 'zvazit ponechani
 
  ' Release the memory of object variable
  Set OutlApp = Nothing

End Function

Private Sub Worksheet_Activate()
If ThisWorkbook.Sheets.count > 4 And Not Contains(Sheets, "Obchodni list") Then
    With Application
    .Calculation = xlCalculationManual
    .ScreenUpdating = False
    .EnableEvents = False
    End With
Hide_Rows ("pro zakaznika")
    With Application
    If .Calculation <> xlCalculationAutomatic Then
    .Calculation = xlCalculationAutomatic
    End If
    .ScreenUpdating = True
    .EnableEvents = True
    End With
End If
End Sub

Private Function Hide_Rows(ByVal nazev_sesitu As String)
    
    On Error Resume Next
   
    'skryti nepouzitych radku
    Dim Firstrow As Long
    Dim lastrow As Long
    Dim lrow As Long
    Dim CalcMode As Long
    Dim ViewMode As Long
    Dim rngHide As Range
    Dim rngUnhide As Range
    
    With Application
    CalcMode = .Calculation
    .Calculation = xlCalculationManual
    .ScreenUpdating = False
    .EnableEvents = False
    End With

With ThisWorkbook.Sheets(nazev_sesitu)
        .Select
        ViewMode = ActiveWindow.View
        ActiveWindow.View = xlNormalView
        .DisplayPageBreaks = False
        'Firstrow = .UsedRange.Cells(1).Row
        Firstrow = .Cells(1).row
        lastrow = .UsedRange.rows(.UsedRange.rows.count).row
        For lrow = lastrow To Firstrow Step -1
            With .Cells(lrow, "H")
                If Not IsError(.Value) Then
                    If .Value = "#" Then
                        If rngHide Is Nothing Then
                            Set rngHide = .Cells
                        Else
                            Set rngHide = Application.Union(rngHide, .Cells)
                        End If
                    End If
                    If .Value = "$" Then
                        If rngUnhide Is Nothing Then
                            Set rngUnhide = .Cells
                        Else
                            Set rngUnhide = Application.Union(rngUnhide, .Cells)
                        End If
                    End If
                End If
            End With
        Next lrow
    End With

    If Not rngHide Is Nothing Then rngHide.EntireRow.hidden = True
    If Not rngUnhide Is Nothing Then rngUnhide.EntireRow.hidden = False
    
    ActiveWindow.View = ViewMode
    
    With Application
    .Calculation = CalcMode
    .EnableEvents = True
    .ScreenUpdating = True
    End With
    
End Function

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    Dim CalcMode As Long
    Dim ViewMode As Long


On Error GoTo ErrorHandler

'zobrazit formular fakturacni adresy
If Not Intersect(Target, Sheets("pro zakaznika").Range("$A$4")) Is Nothing And _
    ThisWorkbook.Sheets.count > 4 And Not Contains(Sheets, "Obchodni list") Then
    load Fakturace_InvoicingID
    Fakturace_InvoicingID.Show vbModeless
    Sheets("pro zakaznika").Range("$A$2").Select
End If

'zobrazit formular projektu
If Not Intersect(Target, Sheets("pro zakaznika").Range("$E$4")) Is Nothing And _
    ThisWorkbook.Sheets.count > 4 And Not Contains(Sheets, "Obchodni list") Then
    load Projekt_CustomerID
    Projekt_CustomerID.Show vbModeless
    Sheets("pro zakaznika").Range("$A$2").Select
End If


    Dim nazev As String
    Dim jmeno As String
    Dim dotpos As String
    Dim typsmlouvy As String
    Dim nazevprojektu_str As String
     nazevprojektu_str = ThisWorkbook.Sheets("pro zakaznika").Range("$C$2").Value
    
    Dim SesitNabidky As Workbook, NazevSesituNabidky As String
    NazevSesituNabidky = ThisWorkbook.name
    Dim NazevNoveNabidky As String
    NazevNoveNabidky = Worksheets("pro zakaznika").Range("B2").Value
    NazevNoveNabidky = ConvertAccent(NazevNoveNabidky)
'odeslani souboru
If Not Intersect(Target, ThisWorkbook.Worksheets("pro zakaznika").Range("$F$2:$G$2")) Is Nothing And _
    ThisWorkbook.Sheets.count > 4 Then
    Range("A2").Select

    Workbooks(NazevSesituNabidky).Activate
    
        jmeno = ThisWorkbook.name
        dotpos = InStrRev(jmeno, ".")
        nazev = Left(jmeno, dotpos - 1)
        
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
        
        
    If BookOpen(NazevNoveNabidky & ".xlsm") = True Then
    Workbooks(NazevNoveNabidky & ".xlsm").Close SaveChanges = True
    End If
    If BookOpen(NazevNoveNabidky & ".xlsx") = True Then
    Workbooks(NazevNoveNabidky & ".xlsx").Close SaveChanges = True
    End If

        Dim wb As Workbook
        Dim nazev_s_cestou As String
        Dim cesta As String
        Set fso = CreateObject("Scripting.FileSystemObject")

        If Not fso.FolderExists("C:\temp\") Then
        MkDir "C:\temp\"
        End If

        cesta_temp = "C:\temp\"

        nazev_s_cestou = ThisWorkbook.FullName
    ''    If InStrRev(nazev_s_cestou, "\") = 0 Then
    ''    cesta = Left(nazev_s_cestou, InStrRev(nazev_s_cestou, "/"))
    ''        Else
    ''    cesta = Left(nazev_s_cestou, InStrRev(nazev_s_cestou, "\"))
    ''    End If
        
        cesta = Left(nazev_s_cestou, InStrRev(nazev_s_cestou, "\"))
        
        Set wb = Workbooks.add
        Application.DisplayAlerts = False
        
        If Left(ThisWorkbook.FullName, 49) = "http://syseusp01.sysmexd.sysmex.de/affiliate/SCZ/" Or _
            Left(ThisWorkbook.FullName, 44) = "\\syseusp01.sysmexd.sysmex.de\affiliate\SCZ\" _
        Then
        
        With wb
            .SaveAs FileName:=cesta_temp & NazevNoveNabidky & ".xlsm" _
            , FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
    
           '.SaveAs Filename:=TempPath & NazevNoveNabidky & ".xlsx" _
           , FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
    
         '   .ChangeFileAccess Mode:=xlReadOnly, WritePassword:="admin"
        End With
    
        Else:
        With wb
            .SaveAs FileName:=cesta & NazevNoveNabidky & ".xlsm" _
            , FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
    
           '.SaveAs Filename:=TempPath & NazevNoveNabidky & ".xlsx" _
           , FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
    
         '   .ChangeFileAccess Mode:=xlReadOnly, WritePassword:="admin"
        End With

        End If
    
    '    Workbooks(NazevSesituNabidky).Activate
    
        Workbooks(NazevSesituNabidky).Sheets("pro zakaznika").Copy _
        Before:=Workbooks(NazevNoveNabidky & ".xlsm").Sheets(1)
        
With Workbooks(NazevNoveNabidky & ".xlsm")
        
        Dim wsh As Worksheet
        Dim f As Boolean
        f = True
        For Each wsh In Worksheets
          Select Case wsh.name
            ' List the exceptions here
            Case "pro zakaznika"
              ' Skip these
            Case Else
              wsh.Select f
              f = False
          End Select
        Next wsh
        ActiveWindow.SelectedSheets.Delete
        Application.DisplayAlerts = True
        
        .Sheets("pro zakaznika").Range("A:Z").Select
        Selection.Copy
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
            
        .Sheets("pro zakaznika").Range("D2:E2").Select
            With Selection.Interior
                .Pattern = xlNone
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
        Selection.Borders().LineStyle = xlNone
        Selection.ClearComments
        Selection.ClearContents
        .Sheets("pro zakaznika").Range("A1").Select
        
        ''End With
        
        Application.ScreenUpdating = True
        Application.ScreenUpdating = False
        
End With

    ''uprava vysky radku u nadpisu
With Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika")
    ''.Calculate
    Dim I As Integer
    Dim bunka As Range
    On Error Resume Next
    ''Dim konec As Long
    ''konec = .UsedRange.Rows(.UsedRange.Rows.Count).Row
        For I = 1 To 3000
        Set bunka = .Cells(I, 9)
            If bunka.Text <> "" Then
            bunka.EntireRow.AutoFit
            bunka.RowHeight = bunka.RowHeight + 0.01
            End If
        Next I
    On Error GoTo ErrorHandler
End With

    'odstraneni nepouzitych radku
    Dim Firstrow As Long
    Dim lastrow As Long
    Dim lrow As Long
    Dim rng As Range

With Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika")

        .Select
        
        ViewMode = ActiveWindow.View
        ActiveWindow.View = xlNormalView
        .DisplayPageBreaks = False

        Firstrow = .UsedRange.Cells(1).row
        lastrow = .UsedRange.rows(.UsedRange.rows.count).row
        For lrow = lastrow To Firstrow Step -1
            With .Cells(lrow, "H")
                If Not IsError(.Value) Then
                    If .Value = "#" Then
                        If rng Is Nothing Then
                            Set rng = .Cells
                        Else
                            Set rng = Application.Union(rng, .Cells)
                        End If
                    End If
                End If
            End With

        Next lrow
    .DisplayPageBreaks = True

    End With
    
    If Not rng Is Nothing Then rng.EntireRow.Delete

    ActiveWindow.View = ViewMode

Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika").Range("$F$2:$G$2").Value = "Odeslat z|fffd|kazn|fffd|kovi"
    
    Dim nazev2 As String
    Dim jmeno2 As String
    Dim dotpos2 As String
    Dim typsmlouvy2 As String
    ''Dim Name As String
    Dim LinkToContent As Boolean
    ''Dim Type as Object
    Dim Value As Object
    Dim LinkSource As Object
    
        jmeno2 = ThisWorkbook.name
        dotpos2 = InStrRev(jmeno2, ".")
        nazev2 = Left(jmeno2, dotpos - 1)
        
    ''    If Worksheets("pristroje").Range("C3").Value = "prodej" Then
    ''    typsmlouvy2 = "Sales"
    ''    Else
    ''    typsmlouvy2 = "Rental"
    ''    End If
    
With Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika")
             
        ''Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika").Activate
          .columns("H:Z").Delete Shift:=xlToLeft
          .columns("H:Z").Select
''          .Range(Selection, Selection.End(xlToRight)).EntireColumn.Hidden = True
        
        ActiveWindow.View = xlPageBreakPreview
        ActiveWindow.Zoom = 100
        .Range("A1").Select
        
End With

On Error Resume Next

With Workbooks(NazevNoveNabidky & ".xlsm")

        .BuiltinDocumentProperties.Item("Title").Value = Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika").Range("A1").Value 'vlozit nazev dokumentu
        .BuiltinDocumentProperties.Item("Author").Value = UserName 'vlozit autora dokumentu
        .BuiltinDocumentProperties.Item("Last Author").Value = UserName 'vlozit autora dokumentu
        .BuiltinDocumentProperties.Item("Subject").Value = Workbooks(NazevNoveNabidky & ".xlsm").Sheets("pro zakaznika").Range("A1").Value 'vlozit popis dokumentu
        .BuiltinDocumentProperties.Item("Company").Value = "Sysmex CZ s.r.o." 'vlozit firmu
        
        .CustomDocumentProperties.add _
        name:="Field", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Field").Value
        
        .CustomDocumentProperties.add _
        name:="Customer ID", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Customer ID").Value
        
        .CustomDocumentProperties.add _
        name:="Analyser", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Analyser").Value
        
        .CustomDocumentProperties.add _
        name:="Salesman", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=UserInitials
        
        .CustomDocumentProperties.add _
        name:="Project FY", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.Sheets("testy a reagencie").Range("projekt").Value
        ''Value:=Year(Now - 90)

        .CustomDocumentProperties.add _
        name:="FY", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=year(DateSerial(year(Now), month(Now) + 10, 0) - 90)

        
        .CustomDocumentProperties.add _
        name:="Price", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeNumber, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Price").Value
        
        .CustomDocumentProperties.add _
        name:="Document Type", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:="Po|fffd|adavek_smlouva"
        
        .CustomDocumentProperties.add _
        name:="Type of Contract", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Type of Contract").Value
        
        .CustomDocumentProperties.add _
        name:="Probabiliy", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=Empty
        
        .CustomDocumentProperties.add _
        name:="Probability", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=Empty
        
        .CustomDocumentProperties.add _
        name:="Approval", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeBoolean, _
        Value:=True
        
        .CustomDocumentProperties.add _
        name:="Status", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:="Prob|fffd|h|fffd|"
        
        .CustomDocumentProperties.add _
        name:="End of Project", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeDate, _
        Value:=DateSerial(year(Now), month(Now) + 10, 0) 'dnes + 9 mesicu & konec mesice
        
        .CustomDocumentProperties.add _
        name:="Final Version", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Final Version").Value
                
        .CustomDocumentProperties.add _
        name:="Tender", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("Tender").Value
                
        .CustomDocumentProperties.add _
        name:="RINKU item", _
        LinkToContent:=False, _
        Type:=msoPropertyTypeString, _
        Value:=ThisWorkbook.CustomDocumentProperties.Item("RINKU item").Value
        
End With
    
        Application.Calculation = xlCalculationAutomatic
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        
End If

'skryt nebo zobrazit ceny
If Not Intersect(Target, ThisWorkbook.Worksheets("pro zakaznika").Range("$D$2:$E$2")) Is Nothing And _
        ThisWorkbook.Worksheets("pro zakaznika").Range("$D$2").Value <> "" Then
    With ThisWorkbook.Worksheets("pro zakaznika")
        If .Range("$D$2").Value = "Zobrazen|fffd| ceny" Then
        .Range("$D$2").Value = "Skryt|fffd| ceny"
        Else: .Range("$D$2").Value = "Zobrazen|fffd| ceny"
        End If
        .Select
        .Range("$C$2").Select
    End With
End If
      
'po vygenerovani excelu
If Not Intersect(Target, ThisWorkbook.Worksheets("pro zakaznika").Range("$F$2:$G$2")) Is Nothing And _
    ThisWorkbook.Worksheets("pro zakaznika").Range("$F$2").Value = "Odeslat z|fffd|kazn|fffd|kovi" Then
    Application.EnableEvents = False
With ThisWorkbook.Sheets("pro zakaznika")
                .Range("D2:G2").Select
            With Selection.Interior
                .Pattern = xlNone
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
        .Range("D2:G2").Borders().LineStyle = xlNone
        .Range("D2:G2").ClearComments
        .Range("D2:G2").ClearContents
        .Range("A1").Select
End With
    Application.EnableEvents = True
    
        'poslat email
        Dim signature
        Dim titul As String
        Dim strsubject As String
        Dim strzprava As String
        Dim jmenouziv As String
        jmenouziv = Application.UserName
        
If ThisWorkbook.Sheets("pro zakaznika").Range("A2").Value = True Then
        titul = ThisWorkbook.Sheets("pro zakaznika").Range("A1").Value & " a jejich p|fffd|edpokl|fffd|dan|fffd| spot|fffd|eba"

        strzprava = "V|fffd|en|fffd| obchodn|fffd| p|fffd||fffd|tel|fffd|, " & "<BR/><BR/>" & _
                  "v p|fffd||fffd|loze v|fffd|m pos|fffd|l|fffd|m seznam reagenci|fffd| pou|fffd||fffd|van|fffd|ch pro " & ThisWorkbook.Sheets("pro zakaznika").Range("G3").Value & " v|fffd|etn|fffd| informace o p|fffd|edpokl|fffd|dan|fffd| spot|fffd|eb|fffd| reagenci|fffd|. " & "<BR/><BR/>" & _
                  ThisWorkbook.Sheets("pro zakaznika").Range("popis_spotreby_text").Value & "<BR/><BR/>" & _
                  "Pokud byste pot|fffd|ebovali dal|fffd||fffd| informace, pros|fffd|m kontaktujte mne. " & "<BR/><BR/>" & _
                  "S pozdravem a p|fffd||fffd|n|fffd|m p|fffd|kn|fffd|ho dne"
        
        ''ActiveWorkbook.Save
                
    End If

        
If ThisWorkbook.Sheets("pro zakaznika").Range("A2").Value = False Then
        titul = ThisWorkbook.Sheets("pro zakaznika").Range("A1").Value & " a ich predpokladan|fffd| spotreba"

        strzprava = "V|fffd|en|fffd| obchodn|fffd| priatelia, " & "<BR/><BR/>" & _
                  "v prielohe v|fffd|m posielam zoznam reag|fffd|nci|fffd| pou|fffd||fffd|van|fffd|ch pre " & ThisWorkbook.Sheets("pro zakaznika").Range("G3").Value & " vr|fffd|tane inform|fffd|cie o predpokladan|fffd| spotrebe reag|fffd|nci|fffd|. " & "<BR/><BR/>" & _
                  ThisWorkbook.Sheets("pro zakaznika").Range("popis_spotreby_text").Value & "<BR/><BR/>" & _
                  "Pokial by ste potrebovali dal|fffd|ie inform|fffd|cie, pros|fffd|m kontaktujte m|fffd|a. " & "<BR/><BR/>" & _
                  "S pozdravom a |fffd|elan|fffd|m pekn|fffd|ho d|fffd|a"
        
        ''ActiveWorkbook.Save
                
    End If
    
    Run Send_as_PDF(NazevNoveNabidky & ".pdf", "", "", titul, strzprava)

End If

On Error GoTo 0

        Exit Sub
        
ErrorHandler:
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.ScreenUpdating = True
        MsgBox "Chyba " & Err.Number & " (" & Err.description & ") v odesilani zpravy na logistiku"

End Sub

Attribute VB_Name = "List2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "List20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "search_menu2, 1, 0, MSForms, CommandButton"
Private Sub load_from_minerva_Click()
load_from_minerva_Click
End Sub

Private Sub search_menu2_Click()
Finder.Show
End Sub
Attribute VB_Name = "List21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "List3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Objednani_zbozi, 20, 0, MSForms, CommandButton"
Sub web_SP()
Dim Newsite As Object

Set Newsite = CreateObject("InternetExplorer.application")
Newsite.Visible = True

'buildSaveDest = "http://syseusp01.sysmexd.sysmex.de/affiliate/SCZ/Departments/service/Install_management/Analyser_installation/Analyser%20installation%20lib/" & ActiveWorkbook.Name 'Build Save As dest
Newsite.Navigate "http://syseusp01.sysmexd.sysmex.de/affiliate/SCZ/department/service/protocols/Internal%20Protocols%20lib/"
'Newsite.Navigate "http://sysdesp07.sysmexd.sysmex.de/Affiliates/scz/department/service/protocols/Internal Protocols lib/"

End Sub

Sub slozka_SP()

Call Shell("explorer.exe " & "\\syseusp01.sysmexd.sysmex.de\Affiliates\scz\department\service\protocols\Internal Protocols lib\", vbNormalFocus)

End Sub


Private Sub Objednani_zbozi_Click()
' Don't forget to copy the function RangetoHTML in the module.
' Working in Office 2000-2010
    Dim rng As Range
    Dim OutApp As Object
    Dim OutMail As Object
    Dim increment As Integer

'If Worksheets("Pristrojovy list").Range("F1").Value = "zvolte" Then
'MsgBox "Pros|fffd|m vypl|fffd|te Druh p|fffd|evodu do pole F1."
'Exit Sub
'End If

'For Index = 27 To 41 '40 To 58

If Worksheets("Pristrojovy list").Range("E2").Value = "Zvolte" Or Worksheets("Pristrojovy list").Range("E2").Value = "" Then
    MsgBox "nelze odeslat. zadejte prosim oba sklady mezi kterymi ma presun probehnout"
Exit Sub
ElseIf Worksheets("Pristrojovy list").Range("E3").Value = "" And Worksheets("Pristrojovy list").Range("E2").Value = "Zvolte" Or Worksheets("Pristrojovy list").Range("E2").Value = "" Then
    MsgBox "nelze odeslat. zadejte prosim oba sklady mezi kterymi ma presun probehnout"
Exit Sub
End If


adress = ""

    'short = Worksheets("Pristrojovy list").Cells(1, 5).Value
    increment = Worksheets("Help").Cells(43, 8).Value
    increment = increment + 1
    Worksheets("Help").Cells(43, 8).Value = increment
    
    
    Dim Ash1 As Worksheet
    Sheets("Pristrojovy list").Copy After:=Sheets(Sheets.count)
    
    Set Ash1 = ActiveSheet
    Ash1.name = "OBJ0" & increment
    nam = "OBJ0" & increment
    Worksheets(nam).Activate
    
    vypis = Worksheets("Pristrojovy list").Range("E2").Value
    
    'Application.ScreenUpdating = False
    Dim atribut As Integer
    finish = 192
    
    For atribut = 12 To finish
    DoEvents
        If Worksheets(nam).Cells(atribut + 1, 1).Value = "Pozn|fffd|mky servisu a skladu" Then Exit For
        'End If
        
        If Worksheets(nam).Cells(atribut, 7).Value = "" Or Worksheets(nam).Cells(atribut, 7).Value = "Po|fffd|adov|fffd|no" Then
    
        Worksheets(nam).rows(atribut).Delete Shift:=xlUp
        'finish = finish - 1
        atribut = atribut - 1
        
        End If
    Next atribut


  For init = 1 To 220
        If Worksheets(nam).Cells(init, 1).Value = "end" Then
            Exit For
        End If
  Next init
    

  rang = "A1:" & "J" & init
  
    Set rng = Nothing
    On Error Resume Next
    'Only the visible cells in the selection
    Set rng = Sheets(nam).Range(rang).SpecialCells(xlCellTypeVisible)
    On Error GoTo 0

    If rng Is Nothing Then
        MsgBox "The selection is not a range or the sheet is protected" & _
               vbNewLine & "please correct and try again.", vbOKOnly
        Exit Sub
    End If

    'With Application
    '    .EnableEvents = False
    '    '.ScreenUpdating = False
    'End With

    nazev_souboru = nam & "_" & Worksheets(nam).Range("I1").Value
    FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru & ".pdf", True, False)
    FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    http = Worksheets("Help").Range("A64").Value
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    
    Dim summary_obj_zbozi As String
    summary_obj_zbozi = "Intern|fffd| skladov|fffd| objedn|fffd|vka: " & nam & "_" & Worksheets("Obchodni list").Range("project_FY").Value
    'Worksheets("XML").Range("str_summary_objednani_zb").Value = Worksheets("XML").Range("string1").Value & "Intern|fffd| skladov|fffd| objedn|fffd|vka: " & nam & "_" & Worksheets("Obchodni list").Range("project_FY") & Worksheets("XML").Range("string2").Value
    Worksheets("XML").Range("str_desc_objednani_zb").Value = Worksheets("XML").Range("string1").Value & "|fffd||fffd|d|fffd|m o dod|fffd|n|fffd| zbo|fffd||fffd| viz p|fffd||fffd|loha." & Worksheets("XML").Range("string2").Value
    
    Dim typ As String
    Dim str As String
    
    typ = "GOODS_ORDER"
    Call check("GOODS_ORDER")
    str = XML_generator(typ)
    
    'Sheets(nam).Range(rang).CopyPicture xlScreen, xlPicture
    ''''Worksheets("Obchodni list").Paste
    'Sheets(nam).Range(rang).CopyPicture xlScreen, xlPicture
    On Error Resume Next
    With OutMail
        .To = "rinku@sysmex.cz " '& sklad
        .Cc = ""
        .BCC = ""
        .Subject = summary_obj_zbozi
        .Body = str
        
        .Attachments.add FileName
        .display
    End With
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
    Call check("OBJ0" & increment)
     Worksheets("Pristrojovy list").Activate
End Sub

Sub Worksheet_Change(ByVal Target As Range)

If Target.Address = "$A$55" Then
    For I = 16 To 118
        If Target.Value = Worksheets("Help").Range("Y" & I).Value Then
            Worksheets("Pristrojovy list").Range("B55").Value = Worksheets("Help").Range("Z" & I).Value
            Worksheets("Pristrojovy list").Range("F55").Value = 1
        Exit Sub
        End If
    Next I
ElseIf Target.Address = "$A$56" Then
    For j = 16 To 118
        If Target.Value = Worksheets("Help").Range("Y" & j).Value Then
            Worksheets("Pristrojovy list").Range("B56").Value = Worksheets("Help").Range("Z" & j).Value
            Worksheets("Pristrojovy list").Range("F56").Value = 1
        Exit Sub
        End If
    Next j
ElseIf Target.Address = "$A$57" Then
    For k = 16 To 118
        If Target.Value = Worksheets("Help").Range("Y" & k).Value Then
            Worksheets("Pristrojovy list").Range("B57").Value = Worksheets("Help").Range("Z" & k).Value
            Worksheets("Pristrojovy list").Range("F57").Value = 1
        Exit Sub
        End If
    Next k
ElseIf Target.Address = "$A$58" Then
    For l = 16 To 118
        If Target.Value = Worksheets("Help").Range("Y" & l).Value Then
            Worksheets("Pristrojovy list").Range("B58").Value = Worksheets("Help").Range("Z" & l).Value
            Worksheets("Pristrojovy list").Range("F58").Value = 1
        Exit Sub
        End If
    Next l
ElseIf Target.Address = "$A$59" Then
    For m = 16 To 118
        If Target.Value = Worksheets("Help").Range("Y" & m).Value Then
            Worksheets("Pristrojovy list").Range("B59").Value = Worksheets("Help").Range("Z" & m).Value
            Worksheets("Pristrojovy list").Range("F59").Value = 1
        Exit Sub
        End If
    Next m
End If
End Sub

Attribute VB_Name = "List4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "List5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "change_format, 5, 0, MSForms, CommandButton"
Attribute VB_Control = "stock_info, 6, 1, MSForms, CommandButton"
Private Sub change_format_Click()
Worksheets("Dodaci listy").Range("F5:F300").NumberFormat = "0"
End Sub

Private Sub stock_info_Click()
stock_menu.Show
End Sub
Attribute VB_Name = "List6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "List7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub odeslani_SNCS_PDF()
If Worksheets("SNCS").Range("H11").Value = "" Then
MsgBox "Vypl|fffd|te pros|fffd|m s|fffd|riov|fffd| |fffd||fffd|slo analyz|fffd|toru. D|fffd|ky."
Exit Sub
  End If
 
    Dim FileName As String
    Dim nazev_souboru As String
     
        
    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If

     Dim DTAddress As String
    DTAddress = CreateObject("WScript.Shell").SpecialFolders("Desktop") & Application.PathSeparator & Worksheets("Help").Range("B37")
        
    'Call the function with the correct arguments
    'Tip: You can also use Sheets("Sheet3") instead of ActiveSheet in the code(sheet not have to be active then)
    'FileName = Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("A7").Value \\sysdesp07.sysmexd.sysmex.de\Affiliates\scz\department\service\ics\sncs\SNCS lib\
     FileName = RDB_Create_PDF(Worksheets("SNCS"), DTAddress, True, True)
     
    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveSheet, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)

    'If FileName <> "" Then
    '    RDB_Mail_PDF_Outlook FileName, "Guenther.Heiko@sysmex-europe.com", "", Worksheets("Help").Range("A46").Value, _
                             "Hi Heiko," & vbNewLine & vbNewLine & "I'd like to ask you to register new analyser listed in registration form attached." _
                           & vbNewLine & vbNewLine & "Thank you and have a nice day" & vbNewLine & vbNewLine, False
    'Else
     '   MsgBox "zru|fffd|eno"
    'End If
End Sub

Sub ulozeni_SNCS_SP()
  Dim FileName As String
    Dim nazev_souboru As String
    Dim filename2 As String
    
   Set fso = CreateObject("Scripting.FileSystemObject")

If Not fso.FolderExists("C:\temp\") Then
MkDir "C:\temp\"
End If
        
    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If
    
nazev_souboru = Worksheets("Help").Range("B37").Value
    
   FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru & ".pdf", True, False, "")
    
    FromPath = "C:\Temp\" & nazev_souboru & ".pdf"
    ToPath = "\\sysdesp07.sysmexd.sysmex.de\Affiliates\scz\department\service\ics\sncs\SNCS lib\" & nazev_souboru & ".pdf"
          
    Set fso = CreateObject("scripting.filesystemobject")
     
    If fso.fileExists(FromPath) = False Then
        MsgBox FromPath & " doesn't exist"
        Exit Sub
    End If
    
     If fso.fileExists(FromPath) = True Then
        MsgBox "Ulo|fffd|en|fffd| souboru  " & FromPath & "   prob|fffd|hlo v po|fffd||fffd|dku. stisknut|fffd|m OK prob|fffd|hne ulo|fffd|en|fffd| na sharepoint"
    End If
    
    If fso.fileExists(FromPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| souboru do " & FromPath & "   Selhalo, pros|fffd|m opakujte ulo|fffd|en|fffd|. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If
        
    
    fso.CopyFile source:=FromPath, destination:=ToPath

    If fso.fileExists(ToPath) = True Then
        MsgBox "Ulo|fffd|en|fffd| na sharepoint prob|fffd|hlo v po|fffd||fffd|dku"
    End If
    
    If fso.fileExists(ToPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| na sharepoint selhalo, pros|fffd|m ov|fffd||fffd|te p|fffd|ipojen|fffd| na sharepoint. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If
End Sub

Sub slozka_SNCS_SP()

Call Shell("explorer.exe " & "\\sysdesp07.sysmexd.sysmex.de\Affiliates\scz\department\service\ics\sncs\SNCS lib\", vbNormalFocus)

End Sub

Sub SNCS_web_SP()
Dim Newsite As Object

Set Newsite = CreateObject("InternetExplorer.application")
Newsite.Visible = True
Newsite.Navigate "http://sysdesp07.sysmexd.sysmex.de/Affiliates/scz/department/service/ics/sncs/SNCS lib/"

End Sub

Attribute VB_Name = "List8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Save_as_PDF, 7, 0, MSForms, CommandButton"
Sub odeslani_PDF()
    Dim FileName As String
    Dim OutApp As Object
    Dim OutMail As Object
    Dim sTo As String
    Dim sCC  As String
    Dim sBCC As String
    Dim sSubject As String
    Dim StrBody As String

    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If
    
    Set fso = CreateObject("Scripting.FileSystemObject")

If Not fso.FolderExists("C:\temp\") Then
MkDir "C:\temp\"
End If

If Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("SRV_LIS_issue").Value = "" Then
MsgBox "Pros|fffd|m vypl|fffd|te |fffd||fffd|slo popt|fffd|vky/objedn|fffd|vky - SRV |fffd|kol Rinku pro LIS"
Exit Sub
End If
 



    nazev_souboru = Worksheets("Help").Range("file_name_POP_OBJ_LIS").Value

    'Call the function with the correct arguments
    'Tip: You can also use Sheets("Sheet3") instead of ActiveSheet in the code(sheet not have to be active then)
    'FileName = Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("A7").Value
    'filename = RDB_Create_PDF(ActiveSheet, "", True, True, "C:\Temp\" & Worksheets("Help").Range("b41").Value)
FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    
   'KDO = InputBox("Jsi MHA nebo PBE? Pokud ne, zvolte Va|fffd|i zkratku a budou vy|fffd||fffd|d|fffd|ny dodate|fffd|n|fffd| informace")
   'If KDO = "MHA" Or KDO = "mha" Or KDO = "Mha" Then
   'nam = "Martin Hanzelka"
   'Mob = "Mob: 731 657 103"
   'Fce = "Servisn|fffd| technik"
   'Email = "Martin.hanzelka@sysmex.cz"
   'ElseIf KDO = "PBE" Or KDO = "pbe" Or KDO = "Pbe" Then
   'nam = "Petr B|fffd|m"
   'Mob = "Mob: 737 259 112"
   'Fce = "Servis Manager CZ/SK"
   'Email = "Bem.Petr@Sysmex.cz"
   'ElseIf KDO <> "MHA" Or KDO = "mha" Or KDO = "Mha" Or KDO = "PBE" Or KDO = "pbe" Or KDO = "Pbe" Then
   'nam = InputBox("Va|fffd|e Jm|fffd|no a p|fffd||fffd|jmen|fffd|")
   'Mob = InputBox("V|fffd|e tel.?")
   'Fce = InputBox("Va|fffd|e funkce")
   'Email = InputBox("V|fffd| e-mail ?")
   'End If
   
      
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    sTo = Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("G28").Value
    sCC = "rinku@sysmex.cz"
    sBCC = ""
    sSubject = "[RINKU] (" & Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("SRV_LIS_issue").Value & ") " & Worksheets("Cenov|fffd| popt|fffd|vka - lis").Range("A7").Value & " " & nazev_souboru
    StrBody = "Dobr|fffd| den," & vbNewLine & vbNewLine & "v p|fffd||fffd|loze p|fffd|ikl|fffd|d|fffd|m popt|fffd|vku/objedn|fffd|vku na p|fffd|ipojen|fffd| k LIS " _
    & vbNewLine & "Pros|fffd|m V|fffd|s o zp|fffd|tn|fffd| zasl|fffd|n|fffd| cenov|fffd| nab|fffd|dky / POTVRZEN|fffd| P|fffd|IJAT|fffd| OBJEDN|fffd|VKY . " & vbNewLine & vbNewLine & "S p|fffd||fffd|telsk|fffd|m pozdravem. " & vbNewLine & nam & vbNewLine & Fce & vbNewLine & vbNewLine & Email & vbNewLine & Mob & vbNewLine & vbNewLine & "Sysmex CZ s.r.o., Elgartova 683/4, 614 00 Brno, Czech Republic"
    With OutMail
        .To = sTo
        .Cc = sCC
        .BCC = sBCC
        .Subject = sSubject
        .Body = StrBody
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing

If Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("LIS_pop_obj").Value = "Cenov|fffd| popt|fffd|vka |fffd|." Then
    Call check("Odesl|fffd|na popt|fffd|vka LIS")
    Worksheets("Obchodni list").Range("IND_LIS").Value = "popt|fffd|vka"
ElseIf Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("LIS_pop_obj").Value = "Objedn|fffd|vka |fffd|." Then
    Call check("Odesl|fffd|na objedn|fffd|vka LIS")
    Worksheets("Obchodni list").Range("IND_LIS").Value = "objedn|fffd|vka"
End If

        'RDB_Mail_PDF_Outlook filename, , "",  Worksheets("Cenov|fffd| popt|fffd|vka - lis").Range("A7").Value & Worksheets("Cenov|fffd| popt|fffd|vka - lis").Range("B7").Value,
         '                    "Dobr|fffd| den," & vbNewLine & vbNewLine & "v p|fffd||fffd|loze p|fffd|ikl|fffd|d|fffd|m popt|fffd|vku/objedn|fffd|vku na p|fffd|ipojen|fffd| k LIS " _
                           & vbNewLine & "Pros|fffd|m V|fffd|s o zp|fffd|tn|fffd| zasl|fffd|n|fffd| cenov|fffd| nab|fffd|dky / POTVRZEN|fffd| P|fffd|IJAT|fffd| OBJEDN|fffd|VKY . " & vbNewLine & vbNewLine & "S p|fffd||fffd|telsk|fffd|m pozdravem. " & vbNewLine & Nam & vbNewLine & Fce & vbNewLine & vbNewLine & Email & vbNewLine & Mob & vbNewLine & vbNewLine & "Sysmex CZ s.r.o., Elgartova 683/4, 614 00 Brno, Czech Republic", False

End Sub


Sub poptavka_SP()
  Dim FileName As String
    Dim nazev_souboru As String
    Dim filename2 As String
    
   Set fso = CreateObject("Scripting.FileSystemObject")

If Not fso.FolderExists("C:\temp\") Then
MkDir "C:\temp\"
End If
        
    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If
    
nazev_souboru = Worksheets("Help").Range("b41").Value
    
   FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
    
    FromPath = "C:\Temp\" & nazev_souboru & ".pdf"
    ToPath = "\\syseusp01.sysmexd.sysmex.de\affiliate\SCZ\Departments\service\ics\LIS\LIS lib\" & nazev_souboru & ".pdf"
          
    Set fso = CreateObject("scripting.filesystemobject")
     
    If fso.fileExists(FromPath) = False Then
        MsgBox FromPath & " doesn't exist"
        Exit Sub
    End If
    
     If fso.fileExists(FromPath) = True Then
        MsgBox "Ulo|fffd|en|fffd| souboru  " & FromPath & "   prob|fffd|hlo v po|fffd||fffd|dku. stisknut|fffd|m OK prob|fffd|hne ulo|fffd|en|fffd| na sharepoint"
    End If
    
    If fso.fileExists(FromPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| souboru do " & FromPath & "   Selhalo, pros|fffd|m opakujte ulo|fffd|en|fffd|. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If
        
    
    fso.CopyFile source:=FromPath, destination:=ToPath

    If fso.fileExists(ToPath) = True Then
        MsgBox "Ulo|fffd|en|fffd| na sharepoint prob|fffd|hlo v po|fffd||fffd|dku"
    End If
    
    If fso.fileExists(ToPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| na sharepoint selhalo, pros|fffd|m ov|fffd||fffd|te p|fffd|ipojen|fffd| na sharepoint. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If
End Sub


Private Sub Save_as_PDF_Click()
Dim nazev_souboru As String
Dim Myvar As Object

Set Myvar = ActiveSheet

nazev_souboru = Worksheets("Help").Range("file_name_POP_OBJ_LIS").Value

FileFormatstr = "PDF Files (*.pdf), *.pdf"
Fname = Application.GetSaveAsFilename(nazev_souboru, filefilter:=FileFormatstr, _
                                                  Title:="Create PDF")
                                                  
    Myvar.ExportAsFixedFormat _
    Type:=xlTypePDF, _
    FileName:=Fname, _
    Quality:=xlQualityStandard, _
    IncludeDocProperties:=True, _
    IgnorePrintAreas:=False, _
    OpenAfterPublish:=False
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    'SLS issue
    If Target.Address = "$B$7:$D$7" Then
        SRV_issue.Show False
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Targ = Worksheets("Cenov|fffd| popt|fffd|vka - lis").Range("A7").Value

If Targ = "Objedn|fffd|vka |fffd|." Then
obj = "Objedn|fffd|vka slu|fffd|eb LIS"
ElseIf Targ = "Cenov|fffd| popt|fffd|vka |fffd|." Then
obj = "Cenov|fffd| popt|fffd|vka slu|fffd|eb LIS"
End If

ActiveSheet.PageSetup.LeftHeader = "&""Arial,Regular""&20" & obj
End Sub
Attribute VB_Name = "List9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Save_as_PDF_2, 5, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton1, 6, 1, MSForms, CommandButton"

Sub odeslani_PDF_predani_LIS()
    Dim FileName As String

    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If
    Set fso = CreateObject("Scripting.FileSystemObject")

If Not fso.FolderExists("C:\temp\") Then
MkDir "C:\temp\"
End If

    'Dim filename As String
    Dim OutApp As Object
    Dim OutMail As Object
    Dim sTo As String
    Dim sCC  As String
    Dim sBCC As String
    Dim sSubject As String
    Dim StrBody As String
    
If Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("F15").Value = "" Or Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("F15").Value = "0" Then
MsgBox "Pros|fffd|m vypl|fffd|te v|fffd|robn|fffd| |fffd||fffd|slo analyz|fffd|toru do pole F15."
Exit Sub
End If

'nazev_souboru = Worksheets("Help").Range("B35").Value
nazev_souboru = Worksheets("Help").Range("file_name_predani_LIS").Value
    
    'Call the function with the correct arguments
    'Tip: You can also use Sheets("Sheet3") instead of ActiveSheet in the code(sheet not have to be active then)
    'FileName = Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("A7").Value
    'filename = RDB_Create_PDF(ActiveSheet, "", True, False, Worksheets("Help").Range("B38").Value)
    FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
    FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveSheet, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)
 Dim FromPath As String
    Dim ToPath As String
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    sTo = Worksheets("P|fffd|ed|fffd|n|fffd| LIS").Range("A4").Value
    sCC = "rinku@sysmex.cz"
    sBCC = ""
    sSubject = "[RINKU] (" & Worksheets("cenov|fffd| popt|fffd|vka - lis").Range("SRV_LIS_issue").Value & ") " & "Protokol o p|fffd|ipojen|fffd| k LIS: " & Worksheets("Help").Range("B45").Value
    StrBody = "V|fffd|en|fffd| pan|fffd| magistro," & vbNewLine & vbNewLine & _
    "v p|fffd||fffd|loze V|fffd|m pos|fffd|l|fffd|m protokol o p|fffd|ipojen|fffd| analyz|fffd|toru do LIS. Pros|fffd|m V|fffd|s o potvrzen|fffd| p|fffd|ipojen|fffd| a schv|fffd|len|fffd| projektu. Podepsan|fffd| protokol m|fffd||fffd|ete naskenovat a zaslat zp|fffd|t na tuto e-mailovou adresu nebo zaslat po|fffd|tou na adresu firmy Sysmex CZ. P|fffd||fffd|padn|fffd| nedostatky p|fffd|ipojen|fffd| k LIS m|fffd||fffd|ete dopsat na protokol. Pokud do 7 dn|fffd| neobdr|fffd||fffd|me Va|fffd|e vyj|fffd|d|fffd|en|fffd|, budeme projekt pova|fffd|ovat za schv|fffd|len|fffd|."

    With OutMail
        .To = sTo
        .Cc = sCC
        .BCC = sBCC
        .Subject = sSubject
        .Body = StrBody
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    Call check("Odesl|fffd|no p|fffd|ed|fffd|n|fffd| LIS")
    Worksheets("Obchodni list").Range("IND_LIS").Value = "p|fffd|ed|fffd|n|fffd|"
End Sub


Sub predani_SP()
  Dim FileName As String
    Dim nazev_souboru As String
    Dim filename2 As String
    
   Set fso = CreateObject("Scripting.FileSystemObject")

If Not fso.FolderExists("C:\temp\") Then
MkDir "C:\temp\"
End If
        
    If ActiveWindow.SelectedSheets.count > 1 Then
        MsgBox "There is more then one sheet selected," & vbNewLine & _
               "be aware that every selected sheet will be published"
    End If
    
nazev_souboru = Worksheets("Help").Range("B38").Value
    
   FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
    
    FromPath = "C:\Temp\" & nazev_souboru & ".pdf"
    ToPath = "\\syseusp01.sysmexd.sysmex.de\affiliate\SCZ\Departments\service\ics\LIS\LIS lib\" & nazev_souboru & ".pdf"
          
    Set fso = CreateObject("scripting.filesystemobject")
     
    If fso.fileExists(FromPath) = False Then
        MsgBox FromPath & " doesn't exist"
        Exit Sub
    End If
    
     If fso.fileExists(FromPath) = True Then
        MsgBox "Ulo|fffd|en|fffd| souboru  " & FromPath & "   prob|fffd|hlo v po|fffd||fffd|dku. stisknut|fffd|m OK prob|fffd|hne ulo|fffd|en|fffd| na sharepoint"
    End If
    
    If fso.fileExists(FromPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| souboru do " & FromPath & "   Selhalo, pros|fffd|m opakujte ulo|fffd|en|fffd|. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If
        
    
    fso.CopyFile source:=FromPath, destination:=ToPath

    If fso.fileExists(ToPath) = True Then
        MsgBox "Ulo|fffd|en|fffd| na sharepoint prob|fffd|hlo v po|fffd||fffd|dku"
    End If
    
    If fso.fileExists(ToPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| na sharepoint selhalo, pros|fffd|m ov|fffd||fffd|te p|fffd|ipojen|fffd| na sharepoint. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If
End Sub


Private Sub CommandButton1_Click()
Finder.Show
End Sub

Private Sub Save_as_PDF_2_Click()
Set Myvar = ActiveSheet

nazev_souboru = Worksheets("Help").Range("file_name_predani_LIS").Value
'nazev_souboru = Worksheets("Help").Range("B38")

FileFormatstr = "PDF Files (*.pdf), *.pdf"
Fname = Application.GetSaveAsFilename(nazev_souboru, filefilter:=FileFormatstr, _
                                                  Title:="Create PDF")
                                                  
    Myvar.ExportAsFixedFormat _
    Type:=xlTypePDF, _
    FileName:=Fname, _
    Quality:=xlQualityStandard, _
    IncludeDocProperties:=True, _
    IgnorePrintAreas:=False, _
    OpenAfterPublish:=False
End Sub
Attribute VB_Name = "MENU"
Attribute VB_Base = "0{81CED7F3-9802-4F4F-892B-4CAB2481EFF9}{ECF02BA1-8EF9-4C18-B7EF-4B8ECBFD7D26}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton2_Click()

End Sub

Private Sub Frame1_Click()

End Sub

Private Sub Label38_Click()

End Sub

Private Sub objednani_dopravy_Click()
    Dim OutApp As Object
    Dim OutMail As Object
    Dim sTo As String
    Dim sCC  As String
    Dim sBCC As String
    Dim sSubject As String
    Dim StrBody As String
    Dim komentar As String
    Dim FileName As String
    Dim priloha As String
    Dim KAM_watcher
    Dim c As Integer
    
'If Worksheets("Obchodni list").Range("I12").Value = "" Then
'MsgBox ("Objednat dopravu je mo|fffd|n|fffd| a|fffd| po schv|fffd|len|fffd| Va|fffd|eho po|fffd|adavku." & vbNewLine & vbNewLine & "- V tento okam|fffd|ik V|fffd| po|fffd|adavek nebyl za|fffd|azen do harmonogramu instalac|fffd|.")
'Exit Sub
'End If
    
For c = 5 To 50

If Worksheets("Check").Cells(3, c).Value = "" Then

'vyber = Range(Worksheets("Check").Cells("A1:A60"), Worksheets("Check").Cells("D1:D60"))
    
Exit For
End If
Next c

Doprava.Show
End Sub

Private Sub open_sharepoint_Click()

Dim Newsite As Object

Set Newsite = CreateObject("InternetExplorer.application")
Newsite.Visible = True
Newsite.Navigate "http://syseusp01.sysmexd.sysmex.de/affiliate/SCZ/Departments/service/Install_management/Analyser_installation/default.aspx"
'Newsite.Navigate "http://sysdesp07.sysmexd.sysmex.de/Affiliates/scz/department/service/Install_Management/Analyser_Installation/default.aspx"
End Sub

Private Sub schvalovaci_tlacitko_Click()
flempo2
End Sub

Sub Flempo_Click()
    Dim JSM As String
    Dim x As String
    Dim datum As String
    Dim nazev As String
    Dim FileName As String
    Dim nazev_souboru As String
    Dim heslo As String
    Dim OutApp As Object
    Dim OutMail As Object
    Dim sTo As String
    Dim sCC  As String
    Dim sBCC As String
    Dim sSubject As String
    Dim StrBody As String
flempo2
End Sub

Private Sub preinstall_start_Click()
Doprava.OptionButton2.Value = True

Doprava.Show
End Sub

Private Sub source_actualize_Click()
    ' Call the main subroutine.
    
Dim quest As Integer

quest = MsgBox("pozor pro z|fffd|sk|fffd|n|fffd| nov|fffd|ch informac|fffd| z datab|fffd|ze je nutno b|fffd|t p|fffd|ipojen p|fffd|es VPN", vbOKCancel)
If quest = 1 Then

' VBA to perform various actions on MySQL tables using VBA
' Majority of the original code adapted from Carlmack http://www.ozgrid.com/forum/showthread.php?t=46893
 
' PLEASE DO THE FOLLOWING BEFORE EXECUTING CODE:
' 1)In VBE you need to go Tools/References and check Microsoft Active X Data Objects 2.x library
 ' 2)Install MySQL ODBC 3.51 Driver. See dev.mysql.com/downloads/connector/odbc/3.51.html or google "MySQL ODBC 3.51 Driver"
 
'-------------------------------------------------------------------------
' Connection variables

Dim conn As New ADODB.Connection
Dim conn2 As New ADODB.Connection
Dim conn3 As New ADODB.Connection
Dim conn4 As New ADODB.Connection

Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
Dim I As Long ' counter
Dim sqlstr As String ' SQL to perform various actions
Dim sqlstr2 As String
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset

'Dim vstup As String
Dim vtype As Variant

'----------------------------------------------------------------------
' Establish connection to the database
server_name = "172.26.12.199" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "mydb1"
' Enter your database name here
user_id = "pozadavek" ' enter your user ID here
password = "Instalacni_pozadavek_2016" ' Enter your password here

Set conn = New ADODB.Connection 'MySQL ODBC 3.51 Driver
conn.Open "DRIVER={MySQL ODBC 5.2 ANSI Driver}" _
& ";SERVER=" & server_name _
& ";DATABASE=" & database_name _
& ";UID=" & user_id _
& ";PWD=" & password _
& ";OPTION=16427" ' Option 16427 = Convert LongLong to Int: This just helps makes sure that large numeric results get properly interpreted

' Various Actions

' Define variables (not all of the variables will be required for each action)
vtype = Array("Text", "LongText", "Int(10)", "Float", "Double", "Date", "Time") ' array of commonly used MySQL variable types
table1 = "firsttable"
table2 = "secondtable"
field1 = "fieldtitle1"
field2 = "fieldtitle2"

'---------------------------------------------
' Add, remove or extract records from an existing table

' Erase entire table contents but do not remove the table
'vstup = dotaz
'vstup = InputBox("Prijmeni bez diakritiky")
' Extract MySQL table data to first worksheet in the workbook
'GoTo skipextract

With Worksheets("Help").Range("C3:C70") ' Enter your sheet name and range here
.ClearContents
End With

With Worksheets("Help").Range("BC2:BC40") ' Enter your sheet name and range here
.ClearContents
End With

With Worksheets("Help").Range("AT2:BA50") ' Enter your sheet name and range here
.ClearContents
End With

Set rs = New ADODB.Recordset
sqlstr = "SELECT instrument_name from instrument_type where instrument_pozadavek=1" 'extracts all data
rs.Open sqlstr, conn, adOpenStatic
With Worksheets("Help").Range("C3") ' Enter your sheet name and range here
'.ClearContents
.CopyFromRecordset rs
End With

rs.Close
Set rs = Nothing

Set rs = New ADODB.Recordset
sqlstr = "SELECT * FROM mydb.staff_view" 'extracts all data
rs.Open sqlstr, conn, adOpenStatic
With Worksheets("Help").Range("AT2") ' Enter your sheet name and range here
'.ClearContents
.CopyFromRecordset rs
End With

Set rs = New ADODB.Recordset
sqlstr2 = "SELECT stock_name from `jira-db`.`stock_evidence` order by stock_name"
rs.Open sqlstr2, conn, adOpenStatic
With Worksheets("Help").Range("BC2") ' Enter your sheet name and range here
'.ClearContents
.CopyFromRecordset rs
End With

rs.Close
Set rs = Nothing

conn.Close
Set conn = Nothing

On Error GoTo 0

MsgBox ("aktualizov|fffd|no")
End If
End Sub

Sub ukonceni_preinstalace_Click()

Dim nazev_souboru As String
Dim Adresa
Dim hypertext As String
Dim FileName As String
Dim quest As String
Dim nazev As String
Dim f As String
Dim summary As String
Dim desc As String
Dim OutApp As Object
Dim OutMail As Object
Dim sTo As String
Dim sCC As String
Dim sBCC As String
Dim sSubject As String
Dim StrBody As String
Dim dotaz As Variant
Dim typ As String
Dim str As String

If Worksheets("Obchodni list").Range("typ_analyzatoru").Value = "Sentimag" Or Worksheets("Obchodni list").Range("typ_analyzatoru").Value = "sentimag" Then
   Worksheets("Obchodni list").Range("preinstall_status").Value = "Bez preinstalace"
   Worksheets("Obchodni list").Range("preinstall_FSE").Value = "LDO"
   Worksheets("Obchodni list").Range("FSE_install_assignee").Value = "LDO"
   Worksheets("Pristrojovy list").Range("FSE_Pristojovy_list").Value = "LDO"
Else:
    quest = MsgBox("Upozorn|fffd|n|fffd|, chyst|fffd|te se ukon|fffd|it preinstalaci. Jste si jist zda byly objedn|fffd|ny v|fffd|echny pot|fffd|ebn|fffd| d|fffd|ly/reagencie? P|fffd|ejete si pokra|fffd|ovat v ukon|fffd|en|fffd| preinstalace?", vbYesNo)
    If quest = 7 Then Exit Sub
    
p1:
    If Worksheets("Pristrojovy list").Range("FSE_Pristojovy_list").Value = "JM|fffd|NO" Or Worksheets("Pristrojovy list").Range("FSE_Pristojovy_list").Value = "" Then
    Preinstall_FSE.Show
    GoTo p1
    End If
End If

Sheets(Array("Obchodni list", "Dodaci listy Sklad", "Dodaci listy Sklad", "Dodaci listy Servis")).Select
    
Worksheets("Pristrojovy list").Range("I3").Value = "Preinstalace ukon|fffd|ena, " & Worksheets("Pristrojovy list").Range("FSE_Pristojovy_list").Value & ", " & Format(Now(), "YYYY-MM-DD HH:NN")
   
nazev = Worksheets("Help").Range("A7").Value
hypertext = Worksheets("Help").Range("A64").Value
nazev_souboru = Worksheets("Help").Range("b40").Value

f = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, False, False)
FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    'For a fixed file name and overwrite it each time you run the macro use
    'RDB_Create_PDF(ActiveSheet, "C:\Users\Ron\Test\YourPdfFile.pdf", True, True)
summary = "Ukon|fffd|en|fffd| preinstalace:" & nazev_souboru
desc = "Potvrzen|fffd| ukon|fffd|en|fffd| preinstalace " & nazev_souboru & vbNewLine & "" _
        & nazev & "   , |fffd||fffd|dam o vystaven|fffd| a dod|fffd|n|fffd| pot|fffd|ebn|fffd| dokumentace." & vbNewLine & "D|fffd|kuji" & vbNewLine & vbNewLine & "Datum instalace: " & Worksheets("Obchodni list").Range("install_date").Value

Worksheets("XML").Range("str_summary_ukonceni").Value = Worksheets("XML").Range("string1").Value & summary & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_desc_ukonceni").Value = Worksheets("XML").Range("string1").Value & desc & Worksheets("XML").Range("string2").Value
Worksheets("XML").Range("str_watchers_ukonceni").Value = Worksheets("XML").Range("string1").Value & "17660, " & Worksheets("Obchodni list").Range("LOGIN_vyber").Value & Worksheets("XML").Range("string2").Value

typ = "PRE_END"
str = XML_generator(typ)


    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    sTo = "rinku@sysmex.cz"
    sCC = ""
    sBCC = ""
    sSubject = summary
              
    With OutMail
        .To = sTo
        .Cc = sCC
        .BCC = sBCC
        .Subject = sSubject
        .Body = str
        .BodyFormat = 2 'olFormatPlain
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing

Call check("Ukonceni preinstalace, po|fffd|adavek na dokumentaci v Rinku")
Worksheets("Obchodni list").Range("IND_preinstalace").Value = "ukon|fffd|ena"
Worksheets("Obchodni list").Range("IND_dokumentace").Value = "|fffd|kol"

Worksheets("Obchodni list").Select

Unload Me
End Sub

Private Sub Ulozeni_SP_one_click_Click()

Unload Me

'Ulo|fffd|en|fffd| se|fffd|itu na sharepoint
Dim Adresa As String
Dim hypertext As String
Dim preklad As String
Dim datum As Date
Dim str_folder As String
Dim fso As Object
Dim FromPath As String
Dim OutApp As Object
Dim OutMail As Object
Dim sTo As String
Dim sCC As String
Dim sBCC As String
Dim sSubject As String
Dim StrBody As String
Dim buildSaveDest As String
Dim citycz As String
Dim city_CZ As String
Dim city_EN As String
Dim score As String
Dim http As String
Dim product As String
Dim KAM_watcher As String
Dim y As String
Dim m As String
Dim d As String
Dim h As String
Dim MN As String
Dim typ As String
Dim str_saved_file As String

Dim ERRMSG As Integer

Dim OBCH_sh As Worksheet
Set OBCH_sh = Worksheets("Obchodni list")

Dim xml_sh As Worksheet
Set xml_sh = Worksheets("XML")

y = year(Now())
m = month(Now())
d = day(Now())
h = hour(Now())
MN = Minute(Now())

 
If Len(m) = 1 Then
m = "0" & m
End If

If Len(d) = 1 Then
d = "0" & d
End If

If Len(h) = 1 Then
h = "0" & h
End If

If Len(MN) = 1 Then
MN = "0" & MN
End If

OBCH_sh.Range("rok_vyber").Value = y
OBCH_sh.Range("MESIC_vyber").Value = m
OBCH_sh.Range("DEN_vyber").Value = d
OBCH_sh.Range("LOGIN_vyber").Value = Environ("UserName")

Dim a As Integer
a = 2
Do Until Worksheets("help").Range("AZ" & a).Value = ""
    If OBCH_sh.Range("LOGIN_vyber").Value = Worksheets("help").Range("AZ" & a).Value Then
        OBCH_sh.Range("LOGIN_short").Value = Worksheets("help").Range("AT" & a).Value
        Exit Do
    End If
    a = a + 1
Loop

citycz = OBCH_sh.Range("project_FY").Value
city_CZ = diakritika(citycz)
city_EN = Replace(city_CZ, " ", "_")
    
OBCH_sh.Range("project_FY").Value = city_EN
OBCH_sh.Range("File_name").Value = city_EN & "_" & y & "-" & m & "-" & d & "_" & h & MN

ERRMSG = 0
ERR_handler.OptionButton_SLS = True

If OBCH_sh.Range("zeme_instalace").Value = "" Or OBCH_sh.Range("zeme_instalace").Value = "zvolte" Then
    ERR_handler.ERR_list.AddItem "zeme_instalace"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m pole country"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("LOGIN_short").Value = "JM|fffd|NO" Or OBCH_sh.Range("LOGIN_short").Value = "" Then
    ERR_handler.ERR_list.AddItem "LOGIN_short"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m va|fffd|i zkratku."
    ERRMSG = ERRMSG + 1
End If

        If OBCH_sh.Range("SLS_issue").Value = "" Then
            ERR_handler.ERR_list.AddItem "SLS_issue"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m rinku |fffd||fffd|slo SLS-X, kde x je |fffd||fffd|slo."
            ERRMSG = ERRMSG + 1
        End If
        
If OBCH_sh.Range("project_FY").Value = "zvolte_prosim" Or OBCH_sh.Range("project_FY").Value = "" Then
    ERR_handler.ERR_list.AddItem "project_FY"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m |fffd||fffd|slo sales projektu."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("typ_analyzatoru").Value = "zvolte_prosim" Or OBCH_sh.Range("typ_analyzatoru").Value = "" Then
    'ERR_handler.ERR_list.AddItem "F4 - Vypl|fffd|te pros|fffd|m typ Analyz|fffd|toru" & "typ_analyzatoru"
    ERR_handler.ERR_list.AddItem "typ_analyzatoru"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m typ Analyz|fffd|toru"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("druh_servisu").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("druh_servisu").Value = "" Then
    ERR_handler.ERR_list.AddItem "druh_servisu"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m typ smlouvy"
    ERRMSG = ERRMSG + 1
End If

score = 0
If OBCH_sh.Range("pozadovany_CRAS").Value = "ANO" Or OBCH_sh.Range("pozadovany_CRAS").Value = "ano" Or OBCH_sh.Range("pozadovany_CRAS").Value = "Ano" Then
    If OBCH_sh.Range("IT_contact_title").Value <> "" Then score = score + 1
    If OBCH_sh.Range("IT_contact_email").Value <> "" Then score = score + 1
    If OBCH_sh.Range("IT_contact_surname").Value <> "" Then score = score + 1
    If OBCH_sh.Range("IT_contact_phone").Value <> "" Then score = score + 1
    
    If score = 0 Then
        ERR_handler.ERR_list.AddItem "IT_contact_surname"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Pokud chcete vzd|fffd|lenou podporu vypl|fffd|te pros|fffd|m IT kontakt."
        ERRMSG = ERRMSG + 1
    End If
    
End If

If OBCH_sh.Range("pozadovany_CRAS").Value = "" Or OBCH_sh.Range("pozadovany_CRAS").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "pozadovany_CRAS"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jestli vy|fffd|adujete slu|fffd|bu CRAS + po|fffd||fffd|tadla do CRM"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("pozadovane_sncs").Value = "" Or OBCH_sh.Range("pozadovane_sncs").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "pozadovane_sncs"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m p|fffd|ipojen|fffd| slu|fffd|by SNCS - QC"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("pozadovany_LIS").Value = "pozadovane_sncs" Or OBCH_sh.Range("pozadovany_LIS").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "pozadovany_LIS"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m p|fffd|ipojen|fffd| LIS."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("pozadovane_produkty").Value = "" Or OBCH_sh.Range("pozadovane_produkty").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "pozadovane_produkty"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m zda chcete podporu Produktov|fffd|ho odd|fffd|len|fffd|."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("likvidace_pristroje").Value = "" Or OBCH_sh.Range("likvidace_pristroje").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "likvidace_pristroje"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m pole ""Likvidace star|fffd|ho p|fffd||fffd|stroje""."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("on_stock_date").Value = "" Or OBCH_sh.Range("on_stock_date").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "on_stock_date"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m datum od kdy bude stroj k dispozici na sklad|fffd|"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("pristroj_novy_repas").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("pristroj_novy_repas").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "pristroj_novy_repas"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m stav p|fffd||fffd|stroje"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("termin").Value = "" Or OBCH_sh.Range("termin").Value = "zvolte pros|fffd|m" Then
    ERR_handler.ERR_list.AddItem "termin"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Bez vypln|fffd|n|fffd| Term|fffd|nu instalace u z|fffd|kazn|fffd|ka nelze ulo|fffd|it!"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("install_date").Value = "" Then
    ERR_handler.ERR_list.AddItem "install_date"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Bez vypln|fffd|n|fffd| data instalace u z|fffd|kazn|fffd|ka nelze ulo|fffd|it!"
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("customer_ID").Value = "" Then
    ERR_handler.ERR_list.AddItem "customer_ID"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m z|fffd|kaznick|fffd| |fffd||fffd|slo."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("customer_name").Value = "" Or OBCH_sh.Range("customer_name").Value = "Pokud nen|fffd| vypln|fffd|no z PL tabulky pros|fffd|m vypl|fffd|te |fffd||fffd|slo z|fffd|kazn|fffd|ka a stiskn|fffd|te vyhledat z|fffd|kazn|fffd|ka." Then
    ERR_handler.ERR_list.AddItem "customer_name"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m adresu instalace u z|fffd|kazn|fffd|ka. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("customer_city").Value = "" Then
    ERR_handler.ERR_list.AddItem "customer_city"
    'divide_text ("D28 - Vypl|fffd|te pros|fffd|m M|fffd|sto adresy z|fffd|kazn|fffd|ka do pole D28. Nejl|fffd|pe v|fffd|ak zad|fffd|n|fffd|m |fffd||fffd|sla z|fffd|kazn|fffd|ka a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka se vypln|fffd| Adresa (pokud je z|fffd|kazn|fffd|k veden v minerv|fffd|)")
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m M|fffd|sto adresy z|fffd|kazn|fffd|ka. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("customer_street").Value = "" Then
    ERR_handler.ERR_list.AddItem "customer_street"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m Ulici. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("customer_ZIP").Value = "" Then
    ERR_handler.ERR_list.AddItem "customer_ZIP"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m PS|fffd| adresy s|fffd|kazn|fffd|ka. Nejl|fffd|pe zad|fffd|n|fffd|m z|fffd|kaznick|fffd|ho |fffd||fffd|sla a stiskem tla|fffd||fffd|tka vyhledat z|fffd|kazn|fffd|ka."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("pozadovany_LIS").Value = "ANO" Or OBCH_sh.Range("pozadovany_LIS").Value = "ano" Or OBCH_sh.Range("pozadovany_LIS").Value = "Ano" Then
    If OBCH_sh.Range("LIS_connection_date").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("LIS_connection_date").Value = "" Then
        ERR_handler.ERR_list.AddItem "LIS_connection_date"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m term|fffd|n p|fffd|ipojen|fffd| LIS."
        ERRMSG = ERRMSG + 1
    End If
    
    If OBCH_sh.Range("LIS_contact_surname").Value = "" Then
        ERR_handler.ERR_list.AddItem "IT_contact_surname"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jm|fffd|no a alespo|fffd| p|fffd||fffd|jmen|fffd|, pop|fffd||fffd|pad|fffd| titul kontaktu na LIS, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
        ERRMSG = ERRMSG + 1
    End If

    If OBCH_sh.Range("LIS_contact_email").Value = "" And OBCH_sh.Range("LIS_contact_phone").Value = "" Then
        ERR_handler.ERR_list.AddItem "IT_contact_phone"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| telefon nebo email kontaktu na LIS, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
        ERRMSG = ERRMSG + 1
    End If

End If

If OBCH_sh.Range("pozadovany_LIS").Value = "ANO" Or OBCH_sh.Range("pozadovany_LIS").Value = "ano" Or OBCH_sh.Range("pozadovany_LIS").Value = "Ano" Then

    If OBCH_sh.Range("IT_contact_surname").Value = "" Then
        ERR_handler.ERR_list.AddItem "IT_contact_surname"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jm|fffd|no a alespo|fffd| p|fffd||fffd|jmen|fffd|, pop|fffd||fffd|pad|fffd| titul kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
        ERRMSG = ERRMSG + 1
    End If
    
    If OBCH_sh.Range("IT_contact_email").Value = "" And OBCH_sh.Range("IT_contact_phone").Value = "" Then
        ERR_handler.ERR_list.AddItem "IT_contact_phone"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| telefon nebo email kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
        ERRMSG = ERRMSG + 1
    End If
End If

If OBCH_sh.Range("LAB_contact_surname").Value = "" Then
    ERR_handler.ERR_list.AddItem "LAB_contact_surname"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m jm|fffd|no a alespo|fffd| p|fffd||fffd|jmen|fffd|, pop|fffd||fffd|pad|fffd| titul kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("LAB_contact_email").Value = "" And OBCH_sh.Range("LAB_contact_phone").Value = "" Then
    ERR_handler.ERR_list.AddItem "LAB_contact_phone"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| telefon nebo email kontaktu do laborato|fffd|e, nebo vyhledejte kontakt pomoc|fffd| tla|fffd||fffd|tka LAB a IT."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("typ_zkumavek").Value = "zvolte pros|fffd|m" Or OBCH_sh.Range("typ_zkumavek").Value = "" Then
    ERR_handler.ERR_list.AddItem "typ_zkumavek"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m typ zkumavek."
    ERRMSG = ERRMSG + 1
End If

If OBCH_sh.Range("instrument_SN1").Value = "" Then
    ERR_handler.ERR_list.AddItem "instrument_SN1"
    ERR_handler.ERR_list.list(ERRMSG, 1) = "Vypl|fffd|te pros|fffd|m alespo|fffd| jedno SN p|fffd||fffd|stroje."
    ERRMSG = ERRMSG + 1
End If

If ERRMSG > 0 Then
    'ERRMSG = "Protokol nelze odeslat z d|fffd|vodu absence n|fffd|sledun|fffd|c|fffd|ch pol|fffd|: " & vbNewLine & vbNewLine & ERRMSG & vbNewLine & vbNewLine & "ukl|fffd|d|fffd|n|fffd| bude zru|fffd|eno. pros|fffd|m opravte chyby a spus|fffd|te znovu ukl|fffd|d|fffd|n|fffd|."
    'MsgBox (ERRMSG)|fffd|
    ERR_handler.OptionButton_SRV.Visible = False
    ERR_handler.Show False

    Exit Sub
End If

'MsgBox "Nyn|fffd| bude ov|fffd||fffd|eno p|fffd|ipojen|fffd| na sharepoint, klikn|fffd|te na OK a vy|fffd|kejte"
'skryt|fffd| otevreni slozky na sharepointu

'ov|fffd||fffd|en|fffd| existence slo|fffd|ky
'folder = Worksheets("Help").Range("A41").Value
Set fso = CreateObject("Scripting.FileSystemObject")

If Not fso.FolderExists("C:\temp\") Then
MkDir "C:\temp\"
End If

'pracovn|fffd| ulo|fffd|en|fffd| do tempu
FromPath = "C:\temp\" & Worksheets("Help").Range("A7").Value & Worksheets("Help").Range("A8").Value
ActiveWorkbook.SaveAs FileName:=FromPath _
, FileFormat:=52, password:="", WriteResPassword:="", _
ReadOnlyRecommended:=False, CreateBackup:=False

If fso.fileExists(FromPath) = True Then
        MsgBox "Nyn|fffd| prob|fffd|hne automatick|fffd| ukl|fffd|d|fffd|n|fffd| na sharepoint, pokud nastanou pot|fffd|e zkuste ulo|fffd|it soubor ru|fffd|n|fffd| n|fffd|sleduj|fffd|c|fffd|m zp|fffd|sobem. V obchodn|fffd|m listu klikn|fffd|te na tla|fffd||fffd|tko Otev|fffd||fffd|t sharepoint, v okn|fffd| internet exploreru polo|fffd|ka Analyser instalation lib - zvolte Upload. Namapujte p|fffd||fffd|slu|fffd|nou cestu, kter|fffd| je C:\temp\v|fffd| soubor a potvr|fffd|e."
    End If
    
    If fso.fileExists(FromPath) = False Then
        MsgBox "Ulo|fffd|en|fffd| souboru do " & FromPath & "   Selhalo, pros|fffd|m opakujte ulo|fffd|en|fffd|. V p|fffd||fffd|pad|fffd| chyby ulo|fffd|te soubor ru|fffd|n|fffd|. Pou|fffd|ijte Tla|fffd||fffd|tko otev|fffd||fffd|t Sharepoint. D|fffd|ky"
        Exit Sub
    End If


'This example copy all files and subfolders from FromPath to ToPath.
     'Note: If ToPath already exist it will overwrite existing files in this folder
     'if ToPath not exist it will be made for you.
    'Dim FSO As Object
    Dim ToPath As String
    
    
    ToPath = Worksheets("Help").Range("A43").Value
       
    str_folder = Worksheets("Help").Range("A41").Value
    Call Shell("explorer.exe " & str_folder, vbHide)
       
    Set fso = CreateObject("scripting.filesystemobject")
     
    If fso.fileExists(FromPath) = False Then
        MsgBox FromPath & " doesn't exist"
        Exit Sub
    End If

Dim atr As String
Call check("SAVE")
    'ActiveWorkbook.SaveAs filename:=ToPath _
    ', FileFormat:=52, Password:="", WriteResPassword:="", _
    'ReadOnlyRecommended:=False, CreateBackup:=False
'MsgBox "Po ulo|fffd|en|fffd| na sharepoint se otev|fffd|en|fffd| dokument s|fffd|m zav|fffd|e a vygeneruje se email po upozorneni schvalovaciho teamu. Pros|fffd|m ode|fffd|lete ho."
        buildSaveDest = "http://syseusp01.sysmexd.sysmex.de/affiliate/SCZ/Departments/service/Install_management/Analyser_installation/Analyser%20installation%20lib/" & ActiveWorkbook.name 'Build Save As dest
        'buildSaveDest = "http://sysdesp07.sysmexd.sysmex.de/Affiliates/scz/department/service/Install_Management/Analyser_Installation/Analyser%20installation%20lib/" & ActiveWorkbook.Name 'Build Save As dest
        Application.ActiveWorkbook.SaveAs buildSaveDest  'Save current File to SharePoint

        'ThisWorkbook.Save
    'FSO.CopyFile Source:=Adresa, Destination:=ToPath
    'MsgBox "You can find the files and subfolders from " & FromPath & " in " & ToPath

'Adresa = Worksheets("Help").Range("A43").Value
'ActiveWorkbook.SaveAs filename:=Adresa _
', FileFormat:=52, password:="", WriteResPassword:="", _
'ReadOnlyRecommended:=False, CreateBackup:=False
MsgBox "Dokument byl ulo|fffd|en na sharepoint. Nyn|fffd| prob|fffd|hne vygenerov|fffd|n|fffd| emailu pro servisn|fffd| odd|fffd|len|fffd| (nutno zkontrolovat a ru|fffd|n|fffd| odeslat). Bude n|fffd|sledovat automatick|fffd| z|fffd|pis atribut|fffd| do knihovny na sharepointu."

If Worksheets("Obchodni list").Range("typ_analyzatoru").Value <> "Sentimag" Or Worksheets("Obchodni list").Range("typ_analyzatoru").Value <> "sentimag" Then
    
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
        .Calculate
    End With
       
    If OBCH_sh.Range("pozadovane_produkty").Value = "ANO" Or OBCH_sh.Range("pozadovane_produkty").Value = "Ano" Or OBCH_sh.Range("pozadovane_produkty").Value = "ano" Then
        product = ", scz66551"
                    ''mail JSM
            http = Worksheets("Help").Range("file_hyperlink").Value
            sSubject = "INSTALACE - Ulo|fffd|en nov|fffd| instala|fffd|n|fffd| po|fffd|adavek " & OBCH_sh.Range("File_name").Value
            StrBody = "Dobr|fffd| den," & vbNewLine & vbNewLine & _
              "na sharepoint do knihovny Analyser Instalation, byl pr|fffd|v|fffd| ulo|fffd|en nov|fffd| instala|fffd|n|fffd| po|fffd|dadavek s n|fffd|zvem " & OBCH_sh.Range("File_name").Value & vbNewLine & _
                http & vbNewLine & vbNewLine & _
              "Tento po|fffd|adavek nyn|fffd| |fffd|ek|fffd| na schv|fffd|len|fffd| p|fffd||fffd|slu|fffd|n|fffd|ch odd|fffd|len|fffd|." & vbNewLine & vbNewLine & _
              "d|fffd|kuji"
              
            With OutMail
                .To = "smidova.jana@sysmex.cz"
                .Cc = ""
                .BCC = ""
                .Subject = sSubject
                .Body = StrBody
                .display
            End With
            Set OutMail = Nothing
            Set OutApp = Nothing
            ''
    Else
        product = ""
    End If
    
    KAM_watcher = Worksheets("Obchodni list").Range("LOGIN_vyber").Value
        
    If OBCH_sh.Range("zeme_instalace").Value = "SCZ" Then
        xml_sh.Range("str_assignee_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & "scz75270" & xml_sh.Range("String2").Value
        xml_sh.Range("str_watchers_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & KAM_watcher & ", scz29331" & xml_sh.Range("String2").Value '& product
    ElseIf OBCH_sh.Range("zeme_instalace").Value = "SSK" Then
        xml_sh.Range("str_assignee_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & "scz75270" & xml_sh.Range("String2").Value
        xml_sh.Range("str_watchers_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & KAM_watcher & ", scz29331" & xml_sh.Range("String2").Value '& product
    Else
        xml_sh.Range("str_assignee_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & "scz75270" & xml_sh.Range("String2").Value
        xml_sh.Range("str_watchers_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & KAM_watcher & ", scz29331" & xml_sh.Range("String2").Value '& product
    End If
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    
    StrBody = "Dobr|fffd| den," & vbNewLine & vbNewLine & _
              "na sharepoint byl pr|fffd|v|fffd| ulo|fffd|en nov|fffd| instala|fffd|n|fffd| po|fffd|dadavek s n|fffd|zvem " & Worksheets("Help").Range("A7").Value & vbNewLine & _
              "Tento po|fffd|adavek nyn|fffd| |fffd|ek|fffd| na schv|fffd|len|fffd| p|fffd||fffd|slu|fffd|n|fffd|ch odd|fffd|len|fffd|." & vbNewLine
                  
          'oznameni o ulozeni pozadavku
                Dim summary_saved_file As String
                Dim contact_saved_file As String
                
                summary_saved_file = Worksheets("Help").Range("A7").Value & " - Ulo|fffd|en nov|fffd| instala|fffd|n|fffd| po|fffd|adavek"
                xml_sh.Range("str_summary_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & summary_saved_file & xml_sh.Range("String2").Value
                
                xml_sh.Range("str_desc_schvaleni_pozadavku").Value = xml_sh.Range("String1").Value & StrBody & vbNewLine & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
                "Po|fffd|adovan|fffd| term|fffd|n p|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("LIS_connection_termin").Value & " " & OBCH_sh.Range("LIS_connection_date").Value & vbNewLine & _
                "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
                "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
                "SN: " & OBCH_sh.Range("instrument_SN1").Value & ", " & OBCH_sh.Range("instrument_SN2").Value & vbNewLine & _
                "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
                xml_sh.Range("String2").Value
            
            typ = "NEW_SAVED_FILE"
            str_saved_file = XML_generator(typ)
                
            Set OutApp = CreateObject("Outlook.Application")
            Set OutMail = OutApp.CreateItem(0)
            
            'mail rinku
            With OutMail
                .To = "rinku@sysmex.cz"
                .Cc = ""
                .BCC = ""
                .Subject = summary_saved_file
                .Body = str_saved_file
                .BodyFormat = 2
                '.Attachments.add
                '.Display
                .Send
            End With
            Set OutMail = Nothing
            Set OutApp = Nothing
            
            
            Call check("Pozadavek ulozen na sharepoint, vygenerovan rinku email.")
            
            OBCH_sh.Range("IND_instalace").Value = "|fffd|ek|fffd| na schv|fffd|len|fffd|"
            OBCH_sh.Range("IND_preinstalace").Value = "|fffd|ek|fffd| na schv|fffd|len|fffd|"
            OBCH_sh.Range("IND_produkty").Value = "|fffd|ek|fffd| na schv|fffd|len|fffd|"
            
 ElseIf Worksheets("Obchodni list").Range("typ_analyzatoru").Value = "Sentimag" Or Worksheets("Obchodni list").Range("typ_analyzatoru").Value = "sentimag" Then
 
 Call MENU.ukonceni_preinstalace_Click
 
End If
 
    'atributy
    'MsgBox "Nyn|fffd| budou zaps|fffd|ny pot|fffd|ebn|fffd| atributy na Sharepoint. Pot|fffd| bude dokument vr|fffd|cen se zm|fffd|nami na sharepoint a automaticky uzav|fffd|en. Pro dal|fffd||fffd| p|fffd||fffd|stup otev|fffd|rejte dokument p|fffd||fffd|mo z Sharepoinu - knihovna Analyzer instalation "
    If OBCH_sh.Range("termin").Value = "P|fffd|esn|fffd|:" Then preklad = "Exact"
    If OBCH_sh.Range("termin").Value = "Do:" Then preklad = "Till"
    datum = OBCH_sh.Range("install_date").Value
    
    ThisWorkbook.BuiltinDocumentProperties("Title").Value = Worksheets("Help").Range("A7").Value
    ActiveWorkbook.ContentTypeProperties.Item("Salesman").Value = OBCH_sh.Range("LOGIN_vyber").Value
    ActiveWorkbook.ContentTypeProperties.Item("Taskname").Value = OBCH_sh.Range("file_name").Value
    ActiveWorkbook.ContentTypeProperties.Item("Affiliate").Value = OBCH_sh.Range("zeme_instalace").Value
    ActiveWorkbook.ContentTypeProperties.Item("Date of install").Value = datum
    ActiveWorkbook.ContentTypeProperties.Item("Date").Value = preklad
    ActiveWorkbook.ContentTypeProperties.Item("Customer Nr.").Value = OBCH_sh.Range("customer_ID").Value
    ActiveWorkbook.ContentTypeProperties.Item("SN").Value = OBCH_sh.Range("instrument_SN1").Value
    ThisWorkbook.Save
    

        ' Determine if workbook can be checked in.
        If ThisWorkbook.CanCheckIn = True Then
            ThisWorkbook.CheckIn
            MsgBox " Dokument byl vr|fffd|cen se zm|fffd|nami na Sharepoint knihovna analyser instalation, nyn|fffd| se zav|fffd|e."
        Else
            MsgBox "This file cannot be checked in " & _
                "at this time.  Please try again later."
        End If

End Sub

Private Function divide_text(My As String)
  
  If Len(My) >= (List1.Width - Me.TextWidth(Right(My, 1))) Then
    Debug.Print "Longer"
    Do Until TextWidth(mm) >= 90
      I = I + 1
      mm = mm & Mid(My, I, 1)
      DoEvents 'Prevent Crash
    Loop
    ERR_handler.ERR_list.AddItem Mid(My, 1, I - 1)
    ERR_handler.ERR_list.AddItem Mid(My, I, Len(My) - I + 1)
  Else
    ERR_handler.ERR_list.AddItem My
  End If
End Function


Private Sub UserForm_Click()

End Sub

Attribute VB_Name = "Module1"
Public Function getValue(issue As Object, key As String) As String
    Dim rvalue As String
    On Error GoTo gerr
    Select Case key
        Case "key"
            If IsNull(issue("key")) Then
                rvalue = ""
            Else
                rvalue = issue("key")
            End If
        Case "status"
            If IsNull(issue("fields")("status")("name")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("status")("name")
            End If
        Case "project"
            If IsNull(issue("fields")("project")("name")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("project")("name")
            End If
        Case "summary"
            If IsNull(issue("fields")("summary")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("summary")
            End If
        Case "created"
            If IsNull(issue("fields")("created")) Then
                rvalue = ""
            Else
                rvalue = fromISODateTimeNoZ(issue("fields")("created"))
            End If
        Case "updated"
            If IsNull(issue("fields")("updated")) Then
                rvalue = ""
            Else
                rvalue = fromISODateTimeNoZ(issue("fields")("updated"))
            End If
        Case "assignee"
            If IsNull(issue("fields")("assignee")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("assignee")("name")
            End If
        Case "reporter"
            If IsNull(issue("fields")("reporter")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("reporter")("name")
            End If
        Case "fixversions"
            If IsNull(issue("fields")("fixversions")) Then
                rvalue = ""
            Else
                rvalue = GetFieldsWithCount(issue("fields")("fixversions"))
            End If
        Case "issuetype"
            If IsNull(issue("fields")("issuetype")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("issuetype")("name")
            End If
        Case "labels"
            If IsNull(issue("fields")("labels")) Then
                rvalue = ""
            Else
                rvalue = GetFieldsWithCount(issue("fields")("labels"))
            End If
        Case "priority"
            If IsNull(issue("fields")("priority")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("priority")("name")
            End If
        Case "severity"
            If IsNull(issue("fields")("customfield_12520")("value")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_12520")("value")
            End If
        Case "resolution"
            If IsNull(issue("fields")("resolution")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("resolution")("name")
            End If
        Case "issuelinks"
            If IsNull(issue("fields")("issuelinks")) Then
                rvalue = ""
            Else
                rvalue = GetFieldsIssueLink(issue("fields")("issuelinks"))
            End If
        Case "businessDriver"
            If IsNull(issue("fields")("customfield_15623")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_15623")
            End If
        Case "businessSignificance"
            If IsNull(issue("fields")("customfield_12420")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_12420")
            End If
        Case "description"
            If IsNull(issue("fields")("description")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("description")
            End If
        Case "detailedDescription"
            If IsNull(issue("fields")("customfield_15621")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_15621")
            End If
        Case "billable"
            If IsNull(issue("fields")("customfield_15926")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_15926")(1)("value")
            End If
        Case "LOE"
            If IsNull(issue("fields")("customfield_15629")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_15629")
            End If
        Case "approvalRequired"
            If IsNull(issue("fields")("customfield_16320")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_16320")("value")
            End If
        Case "approvedBy"
            If IsNull(issue("fields")("customfield_11622")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("customfield_11622")("displayName")
            End If
        Case "source"
            If IsNull(issue("fields")("source")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("source")("name")
            End If
        Case "watchers"
            If IsNull(issue("fields")("watchers")) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("watchers")("name")
            End If
        Case "issuelinks"
            If IsNull(issue) Then
                rvalue = ""
            Else
                rvalue = issue("fields")("issuelinks")("name")
            End If
    End Select
    getValue = rvalue
    GoTo finish:
gerr:
    AppendStatus ("error getValue issue key: " & key & " " & Err.description)
finish:
End Function
Attribute VB_Name = "Module13"
Function border(j As Integer)
Attribute border.VB_ProcData.VB_Invoke_Func = " \n14"

Application.ScreenUpdating = False
    If j = 37 Then
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
    Else: Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    End If
    
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
    
    
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
    
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
 Application.ScreenUpdating = True
End Function
Function border2(j As Integer)
Application.ScreenUpdating = False
    If j = 37 Then
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
    Else: Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    End If
    
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With

    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        '.WrapText = False
        '.Orientation = 0
        '.AddIndent = False
        '.IndentLevel = 1
        '.ShrinkToFit = False
        '.ReadingOrder = xlContext
        '.MergeCells = False
    End With
 Application.ScreenUpdating = True
End Function

Function border3(j As Integer)
Application.ScreenUpdating = False
    If j = 37 Then
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
    Else: Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    End If
    
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
    
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        '.WrapText = False
        '.Orientation = 0
        '.AddIndent = False
        '.IndentLevel = 1
        '.ShrinkToFit = False
        '.ReadingOrder = xlContext
        '.MergeCells = False
    End With
 Application.ScreenUpdating = True
End Function

Function border4(j As Integer)
 Application.ScreenUpdating = False

    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlHairline
    End With
   Application.ScreenUpdating = True

End Function

Function border5(j As Integer)
Application.ScreenUpdating = False
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlDot
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Selection.merge
 Application.ScreenUpdating = True
End Function
Attribute VB_Name = "Module14"
Function diakritika(source As Variant) As String

Const cz As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||61a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||75e||fffd||fffd|"
Const en As String = "aAcCdDeEeEiInNoOrRsStTuUuUyYzZ|fffd|"

Dim TmpS As String
Dim OutS As String

Dim I As Integer

OutS = ""
If IsNull(source) Or source = "" Then
 diakritika = ""
Else
 For I = 1 To Len(source)
 TmpS = Mid(source, I, 1)
 If InStr(1, cz, TmpS, vbBinaryCompare) > 0 Then TmpS = Mid(en, InStr(1, cz, TmpS, vbBinaryCompare), 1)
 OutS = OutS & TmpS
 Next I
 diakritika = OutS
 End If

End Function

Public Function UserName()
    UserName = Environ$("UserName")
End Function

Function XML_generator(typ As String)
    Dim I As Integer
    Dim col As String
    Dim str As String
    str = ""
    
    If typ = "APPROVED" Then
        col = "H"
    ElseIf typ = "PRE_START" Then
        col = "I"
    ElseIf typ = "LIS_ORDER" Then
        col = "J"
    ElseIf typ = "CRAS" Then
        col = "K"
    ElseIf typ = "PRE_END" Then
        col = "L"
    ElseIf typ = "INSTRUMENT_TRANSFER" Then
        col = "M"
    ElseIf typ = "GOODS_ORDER" Then
        col = "N"
    ElseIf typ = "TRANSPORT" Then
        col = "O"
    ElseIf typ = "PRODUCT_ORDER" Then
        col = "P"
    ElseIf typ = "EIPU" Then
        col = "Q"
    ElseIf typ = "NEW_SAVED_FILE" Then
        col = "R"
    ElseIf typ = "DEINSTALL" Then
        col = "S"
    ElseIf typ = "SNCS" Then
        col = "T"
    End If
    
    I = 20
    Do Until Worksheets("XML").Range(col & I).Value = ""
        str = str & vbNewLine & Worksheets("XML").Range(col & I).Value
        I = I + 1
    Loop
    XML_generator = str
End Function

Function FormIsLoaded(UFName As String) As Boolean
 Dim UF As Integer
 For UF = 0 To VBA.UserForms.count - 1
 FormIsLoaded = UserForms(UF).name = UFName
 If FormIsLoaded Then Exit Function
 Next UF
 End Function
Attribute VB_Name = "Module16"
Sub Makro5()
Attribute Makro5.VB_ProcData.VB_Invoke_Func = " \n14"
    
    If Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O P|fffd|ED|fffd|N|fffd| P|fffd||fffd|STROJE" Then
        Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE"
    ElseIf Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE" Then
        Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE"
    End If
    
    Application.ScreenUpdating = False
    
    Range("B21:K26").Select
    Selection.Cut destination:=Range("L21:U26")
    Range("B29:K34").Select
    Selection.Cut destination:=Range("B21:K26")
    Range("L21:U26").Select
    Selection.Cut destination:=Range("B29:K34")
    Range("H26").Select
    
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Module17"
Function user_UNIVERSAL_identify(transform_from As String, transform_input As String, transform_to As String)

Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
Dim I As Long ' counter
Dim sqlstr As Variant ' SQL to perform various actions
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String

Dim rs4 As ADODB.Recordset '
Dim vtype As Variant

Dim sh1 As Worksheet
Set sh1 = Worksheets("Source")

server_name = "172.26.12.199" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "mydb1"
database_name2 = "mydb" ' Enter your database name here
user_id = "pozadavek" ' enter your user ID here
password = "Instalacni_pozadavek_2016" ' Enter your password here

        Set conn = New ADODB.Connection 'MySQL ODBC 3.51 Driver
        conn.Open "DRIVER={MySQL ODBC 5.2 ANSI Driver}" _
        & ";SERVER=" & server_name _
        & ";DATABASE=" & database_name _
        & ";UID=" & user_id _
        & ";PWD=" & password _
        & ";OPTION=16427" ' Option 16427 = Convert LongLong to Int: This just helps makes sure that large numeric results get properly interpreted

        Set rs = New ADODB.Recordset
        
        If transform_from = "short" And transform_to = "name_surname" Then
            sqlstr = "SELECT CONCAT(name, "" "",surname) FROM mydb.staff WHERE short LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "login" And transform_to = "name_surname" Then
            sqlstr = "SELECT CONCAT(name, "" "",surname) FROM mydb.staff WHERE logon LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "login" And transform_to = "short" Then
            sqlstr = "SELECT short FROM mydb.staff WHERE logon LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "login" And transform_to = "name_surname" Then
            sqlstr = "SELECT CONCAT(name, "" "",surname) FROM mydb.staff WHERE login LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "short" And transform_to = "login" Then
            sqlstr = "SELECT logon FROM mydb.staff WHERE short LIKE '" & transform_input & "';" 'extracts all data
        End If
        
        rs.Open sqlstr, conn, adOpenStatic
        
        'With sh1.Range("V" & d) ' Enter your sheet name and range here instrument_info where ABS(month(" & DT & ")-month(Verification_date)<2)
        '.CopyFromRecordset rs
        'End With
        
        user_UNIVERSAL_identify = rs.Fields.Item(0).Value
        
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing

End Function

Function instrument_UNIVERSAL_identify(transform_from As String, transform_input As String, transform_to As String)

Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
Dim I As Long ' counter
Dim sqlstr As Variant ' SQL to perform various actions
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String

Dim rs4 As ADODB.Recordset '
Dim vtype As Variant

Dim sh1 As Worksheet
Set sh1 = Worksheets("Source")

Dim EOF As Boolean

server_name = "172.26.12.199" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "mydb1"
database_name2 = "mydb" ' Enter your database name here
user_id = "pozadavek" ' enter your user ID here
password = "Instalacni_pozadavek_2016" ' Enter your password here

        Set conn = New ADODB.Connection 'MySQL ODBC 3.51 Driver
        conn.Open "DRIVER={MySQL ODBC 5.2 ANSI Driver}" _
        & ";SERVER=" & server_name _
        & ";DATABASE=" & database_name _
        & ";UID=" & user_id _
        & ";PWD=" & password _
        & ";OPTION=16427" ' Option 16427 = Convert LongLong to Int: This just helps makes sure that large numeric results get properly interpreted

        Set rs = New ADODB.Recordset
        
        If transform_from = "MAT" And transform_to = "name" Then
            sqlstr = "SELECT instrument_name FROM mydb1.instrument_type WHERE instrument_CRM='" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "MAT" And transform_to = "name" Then
            'sqlstr = "SELECT CONCAT(name, "" "",surname) FROM mydb.staff WHERE logon LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "name" And transform_to = "EQN" Then
            'sqlstr = "SELECT short FROM mydb.staff WHERE logon LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "name" And transform_to = "MAT" Then
            'sqlstr = "SELECT CONCAT(name, "" "",surname) FROM mydb.staff WHERE login LIKE '" & transform_input & "';" 'extracts all data
        ElseIf transform_from = "short" And transform_to = "login" Then
            'sqlstr = "SELECT logon FROM mydb.staff WHERE short LIKE '" & transform_input & "';" 'extracts all data
        End If
        
        rs.Open sqlstr, conn, adOpenStatic
        
        'With sh1.Range("V" & d) ' Enter your sheet name and range here instrument_info where ABS(month(" & DT & ")-month(Verification_date)<2)
        '.CopyFromRecordset rs
        'End With
        

        EOF = rs.EOF
        
        If EOF = True Then
            instrument_UNIVERSAL_identify = "EOF"
        Else:
            instrument_UNIVERSAL_identify = rs.Fields.Item(0).Value
        End If
        
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing

End Function
Sub tt()
Dim cst As String
cst = Worksheets("Obchodni list").Range("customer_ID").Value
Find_CRAS (cst)
End Sub

Function Find_CRAS(customer_ID As String)

'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
'Dim I As Long ' counter
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant
Dim strsql As String

Worksheets("Source").Range("A5:C10").clear

' Establish connection to the database
server_name = "syseusql07" '"172.16.1.223" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "Minerva_SAPway_CASH" ' Enter your database name here
user_id = "" ' enter your user ID here
password = "" ' Enter your password here

 ' Enter your server name here - if running from a local computer use 127.0.0.1
''Response.Write
Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "Driver={SQL Server};Server=" & server_name & ";Database=" & database_name & _
    ";WSID=" & hostName & ";"
customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value



    Set rs = New ADODB.Recordset
    sqlstr = "SELECT [MaterialNo],[EquipmentNo],[SerialNo] FROM [Minerva_SAPway_CASH].[dbo].[rinku_instruments] WHERE [MaterialNo] like 'CZCERAS%' AND [CustomerNo]='" & customer_nr & "'"
    'sqlstr = "SELECT contactID as ID,position as pozice,title as titul,Salutation as osloveni,First_name as jmeno, last_name as prijemni,directphone as directphone, mobilephone as mobil, department as oddeleni from rinku_customer_contacts where customerno=3100045670"
    rs.Open sqlstr, conn, adOpenStatic
    
    If rs.RecordCount = 0 Then
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing
        Worksheets("Source").Range("A5").Value = "CRAS neevidov|fffd|n pod t|fffd|mto z|fffd|kazn|fffd|kem."
        'Find_CRAS = rs.RecordCount
        Exit Function
    Else:
    Worksheets("Source").Range("A5").Value = "Evidov|fffd|n n|fffd|sleduj|fffd|c|fffd| CRAS"
    With Worksheets("Source").Range("A6") ' Enter your sheet name and range here
        '.ClearContents
        .CopyFromRecordset rs
        Find_CRAS = rs.RecordCount
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing
        On Error GoTo 0
        End With
        Exit Function
    End If

End Function

Attribute VB_Name = "Module2"
Option Explicit
Private Function SheetProtected(TargetSheet As Worksheet) As Boolean
     'Function purpose:  To evaluate if a worksheet is protected
     
    
    Else
        SheetProtected = False
    End If
     
End Function

Sub Copy_Folder()
     'This example copy all files and subfolders from FromPath to ToPath.
     'Note: If ToPath already exist it will overwrite existing files in this folder
     'if ToPath not exist it will be made for you.
    Dim fso As Object
    Dim FromPath As String
    Dim ToPath As String
     
    FromPath = "C:\Temp\" '<< Change
    ToPath = Worksheets("Help").Range("A41").Value
     
    If Right(FromPath, 1) = "\" Then
        FromPath = Left(FromPath, Len(FromPath) - 1)
    End If
     
    If Right(ToPath, 1) = "/" Then
        ToPath = Left(ToPath, Len(ToPath) - 1)
    End If
     
    Set fso = CreateObject("scripting.filesystemobject")
     
    If fso.FolderExists(FromPath) = False Then
        MsgBox FromPath & " doesn't exist"
        Exit Sub
    End If
     
    fso.CopyFolder source:=FromPath, destination:=ToPath
    MsgBox "You can find the files and subfolders from " & FromPath & " in " & ToPath
     
End Sub

Attribute VB_Name = "Module3"
Option Explicit

Function check(atr As String)

Dim I As Integer
I = 3

Do Until Worksheets("Log").Range("A" & I).Value = ""
    
    If Worksheets("Log").Range("A" & I + 1).Value = "" Then
        Worksheets("Log").Range("A" & I + 1).Value = Now
        Worksheets("Log").Range("C" & I + 1).Value = Environ("UserName")
        Worksheets("Log").Range("E" & I + 1).Value = atr
        Exit Do
    End If
    
    I = I + 1
    
Loop

End Function

Function check_old(atr As String)
Dim c As Variant
Dim atribut As Integer
Dim x As Integer
Dim y As Integer
Dim heslo As String

If Worksheets("Obchodni list").Range("I13").Value <> "ANO" Then Exit Function

Worksheets("Obchodni list").Select

heslo = "Sysmex56"

If ActiveSheet.ProtectContents = True Then
   ActiveSheet.Unprotect heslo
End If

For c = 4 To 50

If Worksheets("Check").Cells(3, c).Value = "" Then

    Worksheets("Check").Cells(1, c).Value = Environ("username")
    Worksheets("Check").Cells(2, c).Value = Now
    Worksheets("Check").Cells(3, c).Value = atr
    
    For atribut = 6 To 54
    x = Worksheets("Buffer").Cells(atribut, 2).Value
    y = Worksheets("Buffer").Cells(atribut, 3).Value
    
    If c = 4 Then
                Worksheets("Check").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
                Worksheets("Buffer").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
                Worksheets("Check").Cells(atribut, c).Interior.Color = RGB(255, 250, 100)
    Else:
            If Worksheets("Buffer").Cells(atribut, c - 1).Value <> Worksheets("Obchodni list").Cells(x, y).Value Then
                Worksheets("Check").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
                Worksheets("Buffer").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
                Worksheets("Check").Cells(atribut, c).Interior.Color = RGB(255, 250, 100)
            ElseIf Worksheets("Buffer").Cells(atribut, c - 1).Value = Worksheets("Obchodni list").Cells(x, y).Value Then
                Worksheets("Check").Cells(atribut, c).Value = "---"
                Worksheets("Buffer").Cells(atribut, c).Value = Worksheets("Obchodni list").Cells(x, y).Value
            End If
    End If
    Next atribut
Exit Function
End If
Next c
check = c

If ActiveSheet.ProtectContents = False Then
   ActiveSheet.Unprotect heslo
End If
End Function
Attribute VB_Name = "Module4"
Function RangetoHTML(rng As Range)
' Changed by Ron de Bruin 28-Oct-2006
' Working in Office 2000-2010
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook
 
    TempFile = Environ$("temp") & "/" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"
 
    'Copy the range and create a new workbook to past the data in
    rng.Copy
    Set TempWB = Workbooks.add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With
 
    'Publish the sheet to a htm file
    With TempWB.PublishObjects.add( _
         SourceType:=xlSourceRange, _
         FileName:=TempFile, _
         Sheet:=TempWB.Sheets(1).name, _
         source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With
 
    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.ReadAll
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")
 
    'Close TempWB
    TempWB.Close SaveChanges:=False
 
    'Delete the htm file we used in this function
    Kill TempFile
 
    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
End Function








Attribute VB_Name = "Module5"
Function load_from_minerva_FN(sqlstr As String)
' VBA to perform various actions on MySQL tables using VBA
' Majority of the original code adapted from Carlmack http://www.ozgrid.com/forum/showthread.php?t=46893
 
' PLEASE DO THE FOLLOWING BEFORE EXECUTING CODE:
' 1)In VBE you need to go Tools/References and check Microsoft Active X Data Objects 2.x library
 ' 2)Install MySQL ODBC 3.51 Driver. See dev.mysql.com/downloads/connector/odbc/3.51.html or google "MySQL ODBC 3.51 Driver"
 
'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
Dim I As Long ' counter
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant

'----------------------------------------------------------------------
' Establish connection to the database

' Establish connection to the database
server_name = "syseusql07" '"172.16.1.223" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "Minerva_SAPway_CASH" ' Enter your database name here
user_id = "" ' enter your user ID here
password = "" ' Enter your password here

 ' Enter your server name here - if running from a local computer use 127.0.0.1

'Set conn = New ADODB.Connection
'HostName = Environ$("computername")
'conn.Open "DSN=minerva connect;Trusted_Connection=Yes;APP=Microsoft Office 2010;WSID=" & HostName & ";DATABASE=Minerva_SAPway_CASH" _

''Response.Write
Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "Driver={SQL Server};Server=" & server_name & ";Database=" & database_name & _
    ";WSID=" & hostName & ";"


With Worksheets("Source").Cells ' Enter your sheet name and range here
.clear
End With

Set rs = New ADODB.Recordset
'sqlstr = "SELECT     account.account_id, account.name, account.name2, account.name3,account.name4, account.address1, account.city, account.plz, account.kurzname from account where kz_land ='CZ'"
rs.Open sqlstr, conn, adOpenStatic
With Worksheets("Source").Range("A2") ' Enter your sheet name and range here
.ClearContents
.CopyFromRecordset rs
End With

'-----------------------------------------------------------------------
' Close connections
On Error Resume Next
rs.Close

Set rs = Nothing
conn.Close
Set conn = Nothing
On Error GoTo 0

End Function

Function load_from_MYSQL_FN(sqlstr As String)
' VBA to perform various actions on MySQL tables using VBA
' Majority of the original code adapted from Carlmack http://www.ozgrid.com/forum/showthread.php?t=46893
 
' PLEASE DO THE FOLLOWING BEFORE EXECUTING CODE:
' 1)In VBE you need to go Tools/References and check Microsoft Active X Data Objects 2.x library
 ' 2)Install MySQL ODBC 3.51 Driver. See dev.mysql.com/downloads/connector/odbc/3.51.html or google "MySQL ODBC 3.51 Driver"
 
'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
Dim I As Long ' counter
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant

'----------------------------------------------------------------------
' Establish connection to the database
server_name = "172.16.1.199" ' Enter your server name here - if running from a local computer use 127.0.0.1

'quest = MsgBox("Upozorn|fffd|n|fffd|, pro aktualizaci je nutn|fffd| b|fffd|t p|fffd|ipojen ve firemn|fffd| s|fffd|ti nebo p|fffd|es VPN, chcete pokra|fffd|ovat?", vbYesNo)

'If quest = 7 Then
'    Exit Function
'End If

Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "DSN=minerva connect;Trusted_Connection=Yes;APP=Microsoft Office 2010;WSID=" & hostName & ";DATABASE=Minerva_SAPway_CASH" _

With Worksheets("Source").Cells ' Enter your sheet name and range here
.ClearContents
End With

Set rs = New ADODB.Recordset
'sqlstr = "SELECT     account.account_id, account.name, account.name2, account.name3,account.name4, account.address1, account.city, account.plz, account.kurzname from account where kz_land ='CZ'"
rs.Open sqlstr, conn, adOpenStatic
With Worksheets("Source").Range("A2") ' Enter your sheet name and range here
.ClearContents
.CopyFromRecordset rs
End With

'-----------------------------------------------------------------------
' Close connections
On Error Resume Next
rs.Close

Set rs = Nothing
conn.Close
Set conn = Nothing
On Error GoTo 0

End Function

Private Sub predani_switch_Click()
    If Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O P|fffd|ED|fffd|N|fffd| P|fffd||fffd|STROJE" Then
        Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE"
    ElseIf Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE" Then
        Worksheets("predani").Range("B18").Value = "Z|fffd|PIS O VR|fffd|CEN|fffd| P|fffd||fffd|STROJE"
    End If
    
    Application.ScreenUpdating = False
    
    Range("B21:K26").Select
    Selection.Cut destination:=Range("L21:U26")
    Range("B29:K34").Select
    Selection.Cut destination:=Range("B21:K26")
    Range("L21:U26").Select
    Selection.Cut destination:=Range("B29:K34")
    Range("H26").Select
    
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "Module6"
Sub Find_customer_macro()
Attribute Find_customer_macro.VB_Description = "vyhleda zakaznika a vypni do obchodniho listu"
Attribute Find_customer_macro.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Find_customer_macro Makro
' vyhleda zakaznika a vypni do obchodniho listu
'
    Call Find_customer_PaL
End Sub
Attribute VB_Name = "Password_window"
Attribute VB_Base = "0{02CEEC1F-AB1C-4F60-B289-19AE3BCF9C01}{A117FE79-5495-452F-A388-F98E08F6369E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub OK_btn_Click()
JSM = TextBox1.Value

Exit Sub
Attribute VB_Name = "Preinstall_FSE"
Attribute VB_Base = "0{0B0DDF4C-C073-42F0-BB07-D8E4EBA4098D}{5546E590-F434-4634-B039-7A700427B2EC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
FSE_ListBox.list = Worksheets("Help").Range("AT1:AT20").Value

End Sub

Private Sub write_button_Click()
        Worksheets("Pristrojovy list").Range("FSE_Pristojovy_list").Value = FSE_ListBox.Value
        Unload Me
End Sub
Attribute VB_Name = "Preinstall_form"
Attribute VB_Base = "0{20949FFE-622A-4583-8823-D022D66A4DF6}{9571C340-2D59-4346-A5B3-35C7D165A1AC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Approved_btn_Click()
'podminka ktera jisti schvaleni - pokud neni vyplnena bunka v obchodnim listu tak nespisti skript
'Unload MENU
Application.Calculate

    Dim JSM As String
    Dim vstup As String
    Dim datum As String
    Dim nazev As String
    Dim FileName As String
    Dim nazev_souboru As String
    Dim heslo As String
    Dim OutApp As Object
    Dim OutMail As Object
    Dim atribut As Integer
    Dim typ As String
    Dim customer_ID As String
    
    Dim OBCH_sh As Worksheet
    Set OBCH_sh = Worksheets("Obchodni list")

    Dim xml_sh As Worksheet
    Set xml_sh = Worksheets("XML")
    
    Dim ERRMSG As Integer
    
    Dim kontrolni_seznam_Instalace As String
    Dim kontrolni_seznam_Preinstalace As String
    Dim kontrolni_seznam_Sales As String
    Dim kontrolni_seznam_Products As String
    
    customer_ID = OBCH_sh.Range("customer_ID").Value
    ERRMSG = 0
    ERR_handler.OptionButton_SRV.Value = True
    
    If OBCH_sh.Range("termin").Value <> "P|fffd|esn|fffd|:" Then
        ERR_handler.ERR_list.AddItem "termin"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "p|fffd|ed schv|fffd|len|fffd|m po|fffd|adavku je nutn|fffd| zvolit ""P|fffd|esn|fffd|"" term|fffd|n a datum instalace."
        ERRMSG = ERRMSG + 1
    End If
        
    datum = OBCH_sh.Range("install_date").Value
            
    If datum = "" Then
        ERR_handler.ERR_list.AddItem "install_date"
        ERR_handler.ERR_list.list(ERRMSG, 1) = "Neni vyplneno datum instalace, email nelze odeslat"
        ERRMSG = ERRMSG + 1
    End If
    
    If OBCH_sh.Range("FSE_install_assignee").Value = "" Then
            ERR_handler.ERR_list.AddItem "FSE_install_assignee"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol Technika, kter|fffd| bude instalovat. (tla|fffd||fffd|tko preinstalace)"
            ERRMSG = ERRMSG + 1
    End If
    
    If OBCH_sh.Range("preinstall_status").Value = "" Then
            ERR_handler.ERR_list.AddItem "preinstall_status"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol m|fffd|sto preinstalace (tla|fffd||fffd|tko preinstalace)."
            ERRMSG = ERRMSG + 1
    End If
        
    If OBCH_sh.Range("preinstall_status").Value = "SCZ" Or OBCH_sh.Range("preinstall_status").Value = "SSK" Then
              
        If OBCH_sh.Range("preinstall_FSE").Value = "" Then
            ERR_handler.ERR_list.AddItem "preinstall_status"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol Technika, kter|fffd| bude preinstalovat (tla|fffd||fffd|tko preinstalace). "
            ERRMSG = ERRMSG + 1
        End If
                 
        If OBCH_sh.Range("date_transfer_preinstall").Value = "" Then
            ERR_handler.ERR_list.AddItem "date_transfer_preinstall"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol datum n|fffd|vozu stroje na preinstalaci. "
            ERRMSG = ERRMSG + 1
        End If
                 
        If OBCH_sh.Range("date_start_preinstall").Value = "" Then
            ERR_handler.ERR_list.AddItem "date_start_preinstall"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol start preinstalace (tla|fffd||fffd|tko preinstalace)."
            ERRMSG = ERRMSG + 1
        End If
        
        If OBCH_sh.Range("date_end_preinstall").Value = "" Then
            ERR_handler.ERR_list.AddItem "date_end_preinstall"
            ERR_handler.ERR_list.list(ERRMSG, 1) = "Zvol konec preinstalace (tla|fffd||fffd|tko preinstalace)."
            ERRMSG = ERRMSG + 1
        End If
    End If
    
    If ERRMSG > 0 Then
        'ERRMSG = "Protokol nelze odeslat z d|fffd|vodu absence n|fffd|sledun|fffd|c|fffd|ch pol|fffd|: " & vbNewLine & vbNewLine & ERRMSG & vbNewLine & vbNewLine & "ukl|fffd|d|fffd|n|fffd| bude zru|fffd|eno. pros|fffd|m opravte chyby a spus|fffd|te znovu ukl|fffd|d|fffd|n|fffd|."
        'MsgBox (ERRMSG)
        
        ERR_handler.OptionButton_SLS.Visible = False
        ERR_handler.Show False
        Exit Sub
    End If

    JSM = InputBox("Zkratka va|fffd|eho jm|fffd|na (velka pismena)?")
    'Password_window.Show
    'Application.EnableEvents = False
        
    If JSM = "JSM" Then
        OBCH_sh.Range("schvalil").Value = "JSM"
    ElseIf JSM = "MPR" Then
        OBCH_sh.Range("schvalil").Value = "MPR"
    ElseIf JSM = "PBE" Then
        OBCH_sh.Range("schvalil").Value = "PBE"
    ElseIf JSM = "PZU" Then
        OBCH_sh.Range("schvalil").Value = "PZU"
    ElseIf JSM = "test" Then
        OBCH_sh.Range("schvalil").Value = "TEST"
    Else
        MsgBox "spatne jmeno"
    Exit Sub
    End If
       
           
    vstup = InputBox("Type your password here.", "Password Required")

    If vstup = "Sysmex56" Then
        heslo = "Sysmex56"
    ElseIf vstup = "test" Then
        heslo = "test"
    Else
        MsgBox "Youd didn't enter a correct password."
        Exit Sub
    End If
 
        
Sheets(Array("Obchodni list", "Dodaci listy Sklad", "Dodaci listy Servis")).Select
    
    nazev_souboru = Worksheets("Help").Range("B35").Value
    FileName = RDB_Create_PDF(ActiveSheet, "C:\Temp\" & nazev_souboru, True, False)
    FileName = "C:\Temp\" & nazev_souboru & ".pdf"
    nazev = nazev_souboru
    
    kontrolni_seznam_Instalace = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A1:M32"), "C:\Temp\Kontrolni_seznam_Instalace.pdf", True, False)
    kontrolni_seznam_Preinstalace = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A33:M70"), "C:\Temp\Kontrolni_seznam_Preinstalace.pdf", True, False)
    kontrolni_seznam_Sales = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A71:M125"), "C:\Temp\Kontrolni_seznam_Sales.pdf", True, False)
    kontrolni_seznam_Products = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A125:M180"), "C:\Temp\Kontrolni_seznam_Products.pdf", True, False)
    
    Dim str_body_schvaleni As String
      
    Dim contact As String
    Dim descr_sch As String
    Dim summary_schvaleni As String
    Dim FSE_watch_schvaleni As String
    Dim watchers_schvaleni As String
    Dim FSE_help As String
    Dim FSE_pozadavek As String
    
'schvaleni pozadavku INSTALACE
    'If OBCH_sh.Range("LAB_contact_ID").Value = "" Then
    '    contact = XML_sh.Range("string1").Value & "LAB: " & OBCH_sh.Range("LAB_contact_title").Value & " " & OBCH_sh.Range("LAB_contact_name").Value & " " & OBCH_sh.Range("LAB_contact_surname").Value & vbNewLine & _

   '           "Tel: " & OBCH_sh.Range("LAB_contact_phone").Value & ", " & OBCH_sh.Range("LAB_contact_email").Value & XML_sh.Range("string2").Value
   '     XML_sh.Range("str_contact").Value = contact
    
   'ElseIf OBCH_sh.Range("LAB_contact_ID").Value <> "" Then
   '     contact = XML_sh.Range("string1").Value & "" & XML_sh.Range("string2").Value
    '     XML_sh.Range("str_contact").Value = contact
    'End If
    
                contact = xml_sh.Range("string1").Value & "LAB: " & OBCH_sh.Range("LAB_contact_title").Value & " " & OBCH_sh.Range("LAB_contact_name").Value & " " & OBCH_sh.Range("LAB_contact_surname").Value & vbNewLine & _
                "Tel: " & OBCH_sh.Range("LAB_contact_phone").Value & ", " & OBCH_sh.Range("LAB_contact_email").Value & vbNewLine & _
                "IT: " & OBCH_sh.Range("IT_contact_title").Value & " " & OBCH_sh.Range("IT_contact_name").Value & " " & OBCH_sh.Range("IT_contact_surname").Value & vbNewLine & _
                "Tel: " & OBCH_sh.Range("IT_contact_phone").Value & ", " & OBCH_sh.Range("IT_contact_email").Value & vbNewLine & _
                "LIS: " & OBCH_sh.Range("LIS_contact_title").Value & " " & OBCH_sh.Range("LIS_contact_name").Value & " " & OBCH_sh.Range("LIS_contact_surname").Value & vbNewLine & _
                "Tel: " & OBCH_sh.Range("LIS_contact_phone").Value & ", " & OBCH_sh.Range("LIS_contact_email").Value & xml_sh.Range("string2").Value
                
                xml_sh.Range("str_contact").Value = contact
                
    
    'XML_sh.Range("str_summary_schvaleni").Value = XML_sh.Range("String1").Value & "Schvalen|fffd| instala|fffd|n|fffd|ho po|fffd|adavku: " & OBCH_sh.Range("File_name").Value & XML_sh.Range("String2").Value
    summary_schvaleni = "Instalace: " & OBCH_sh.Range("File_name").Value
    
    descr_sch = xml_sh.Range("string1").Value & "Typ Instalace: " & OBCH_sh.Range("Druh_smlouvy").Value & vbNewLine & _
                "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
                "P|fffd||fffd|stroj: " & OBCH_sh.Range("pristroj_novy_repas").Value & vbNewLine & _
                "SN: " & OBCH_sh.Range("instrument_SN1").Value & ", " & OBCH_sh.Range("instrument_SN2").Value & vbNewLine & _
                "Servisn|fffd| smlouva: " & OBCH_sh.Range("druh_servisu").Value & vbNewLine & _
                "CRAS: " & OBCH_sh.Range("pozadovany_cras").Value & vbNewLine & _
                "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
                "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
                "Po|fffd|adovan|fffd| podpora produktov|fffd|ho odd.: " & OBCH_sh.Range("pozadovane_produkty").Value & vbNewLine & _
                "Na sklad|fffd| od: " & OBCH_sh.Range("on_stock_date").Value & vbNewLine & _
                "N|fffd|voz na preinstalaci: " & OBCH_sh.Range("date_transfer_preinstall").Value & vbNewLine & _
                "Datum Instalace: " & OBCH_sh.Range("install_date").Value & vbNewLine & _
                "Term|fffd|n p|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("LIS_connection_date").Value & vbNewLine & _
                "Odb|fffd|r/likvidace p|fffd||fffd|stroje: " & OBCH_sh.Range("likvidace_pristroje").Value & vbNewLine & _
                "Pozn: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
                xml_sh.Range("string2").Value

    xml_sh.Range("str_desc_schvaleni").Value = descr_sch
        
    t = 2
    Do Until Worksheets("Help").Range("AT" & t).Value = ""
        FSE_help = Worksheets("Help").Range("AT" & t).Value
        FSE_pozadavek = OBCH_sh.Range("FSE_install_assignee").Value
        
        If FSE_help = FSE_pozadavek Then
             xml_sh.Range("str_assignee_schvaleni").Value = xml_sh.Range("string1").Value & Worksheets("Help").Range("AZ" & t).Value & xml_sh.Range("string2").Value
        End If
    t = t + 1
    Loop

    'watchers_schvaleni = XML_sh.Range("String1").Value & OBCH_sh.Range("LOGIN_vyber").Value & XML_sh.Range("String2").Value
    'XML_sh.Range("str_watchers_schvaleni").Value = watchers_schvaleni
    
    typ = "APPROVED"
    str_body_schvaleni = XML_generator(typ)
    
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
       
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_schvaleni
        .Body = str_body_schvaleni
        .BodyFormat = 2 'olFormatPlain
        .Attachments.add FileName
        .Attachments.add kontrolni_seznam_Instalace
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing

    OBCH_sh.Range("schvaleno").Value = "ANO"
    OBCH_sh.Range("IND_instalace").Value = "|fffd|kol"
    Call check("Instalace schvalena - odeslana do Rinku")
    
'objednani CRAS rinku
If OBCH_sh.Range("pozadovany_CRAS").Value = "ANO" Or OBCH_sh.Range("pozadovany_CRAS").Value = "ano" Or OBCH_sh.Range("pozadovany_CRAS").Value = "Ano" Then
        
        typ = "CRAS"
        
        Dim summary_CRAS As String
        Dim contact_CRAS As String
        Dim CRAS_nr As Integer
        Dim CRAS_comment As String
        CRAS_nr = Find_CRAS(customer_ID)
        
        If CRAS_nr = 0 Then
            CRAS_comment = Worksheets("Source").Range("A5").Value
        Else:
            CRAS_comment = Worksheets("Source").Range("A5").Value + vbNewLine
            For c = 5 To 5 + CRAS_nr
                CRAS_comment = CRAS_comment + " " + Worksheets("Source").Range("A" & c).Value + " " + Worksheets("Source").Range("C" & c).Value + vbNewLine
            Next c
        End If
        'XML_sh.Range("str_summary_CRAS").Value = XML_sh.Range("String1").Value & "Instalace CRAS " & OBCH_sh.Range("project_FY").Value & XML_sh.Range("String2").Value
        summary_CRAS = "CRAS: " & OBCH_sh.Range("File_name").Value
        
        xml_sh.Range("str_desc_CRAS").Value = xml_sh.Range("String1").Value & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
        "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
        "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
        CRAS_comment & vbNewLine & _
        xml_sh.Range("String2").Value
        
    str_body_CRAS = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_CRAS
        .Body = str_body_CRAS
        .BodyFormat = 2
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_CRAS").Value = "|fffd|kol"
    Call check("po|fffd|adavek na p|fffd||fffd|pravu CRAS odeslan do Rinku")
End If
    
'objednani LIS rinku
If OBCH_sh.Range("pozadovany_LIS").Value = "ANO" Or OBCH_sh.Range("pozadovany_LIS").Value = "ano" Or OBCH_sh.Range("pozadovany_LIS").Value = "Ano" Then
        typ = "LIS_ORDER"
        
        Dim summary_LIS As String
        Dim contact_LIS As String
        summary_LIS = "LIS: " & OBCH_sh.Range("File_name").Value
        'XML_sh.Range("str_summary_LIS_order").Value = XML_sh.Range("String1").Value & "Objedn|fffd|n|fffd| LIS " & OBCH_sh.Range("project_FY").Value & XML_sh.Range("String2").Value
        xml_sh.Range("str_desc_LIS_order").Value = xml_sh.Range("String1").Value & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| term|fffd|n p|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("LIS_connection_termin").Value & " " & OBCH_sh.Range("LIS_connection_date").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
        "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
        "LIS - N|fffd|zev firmy : " & OBCH_sh.Range("LIS_company_name").Value & vbNewLine & _
        "LIS - Objedn|fffd|v|fffd| u dodavatele: " & OBCH_sh.Range("LIS_ordered_by").Value & vbNewLine & _
        "LIS - Fakturace bude hrazena: " & OBCH_sh.Range("LIS_invoice_by").Value & vbNewLine & _
        "SN: " & OBCH_sh.Range("instrument_SN1").Value & ", " & OBCH_sh.Range("instrument_SN2").Value & vbNewLine & _
        "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
        xml_sh.Range("String2").Value
    
    
            'contact_LIS = XML_sh.Range("string1").Value & "LAB: " & OBCH_sh.Range("LAB_contact_title").Value & " " & OBCH_sh.Range("LAB_contact_name").Value & " " & OBCH_sh.Range("LAB_contact_surname").Value & vbNewLine & _
            '    "Tel: " & OBCH_sh.Range("LAB_contact_phone").Value & ", " & OBCH_sh.Range("LAB_contact_email").Value & vbNewLine & _
            '    "IT: " & OBCH_sh.Range("IT_contact_title").Value & " " & OBCH_sh.Range("IT_contact_name").Value & " " & OBCH_sh.Range("IT_contact_surname").Value & vbNewLine & _
            '    "Tel: " & OBCH_sh.Range("IT_contact_phone").Value & ", " & OBCH_sh.Range("IT_contact_email").Value & vbNewLine & _
            '    "LIS: " & OBCH_sh.Range("LIS_contact_title").Value & " " & OBCH_sh.Range("LIS_contact_name").Value & " " & OBCH_sh.Range("LIS_contact_surname").Value & vbNewLine & _
            '    "Tel: " & OBCH_sh.Range("LIS_contact_phone").Value & ", " & OBCH_sh.Range("LIS_contact_email").Value & XML_sh.Range("string2").Value
                
            '    XML_sh.Range("str_IT_contact").Value = contact_LIS
        
    str_body_LIS = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
             
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_LIS
        .Body = str_body_LIS
        .BodyFormat = 2
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_LIS").Value = "|fffd|kol"
    Call check("po|fffd|adavek na LIS odeslan do Rinku")
End If

'zacatek preinstalace
If OBCH_sh.Range("preinstall_status").Value = "SCZ" Or OBCH_sh.Range("preinstall_status").Value = "SSK" Then
        typ = "PRE_START"
        
        Dim descr_pre As String
        Dim summary_pre_start As String
        Dim FSE_pozadavek_pre As String
        Dim contact_pre As String
        Dim str_pre_start As String
        
        summary_pre_start = "Preinstalace: " & OBCH_sh.Range("File_name").Value
        'XML_sh.Range("str_summary_products").Value = XML_sh.Range("String1").Value & "|fffd||fffd|dost o produktovou podporu: " & OBCH_sh.Range("project_FY").Value & XML_sh.Range("String2").Value
    
        
    descr_pre = xml_sh.Range("string1").Value & "Typ Instalace: " & OBCH_sh.Range("Druh_smlouvy").Value & vbNewLine & _
    "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
    "P|fffd||fffd|stroj: " & OBCH_sh.Range("pristroj_novy_repas").Value & vbNewLine & _
    "SN: " & OBCH_sh.Range("instrument_SN1").Value & ", " & OBCH_sh.Range("instrument_SN2").Value & vbNewLine & _
    "Na sklad|fffd| od: " & OBCH_sh.Range("on_stock_date").Value & vbNewLine & _
    "Navezen|fffd| p|fffd||fffd|stroje na preinstalaci: " & OBCH_sh.Range("date_transfer_preinstall").Value & vbNewLine & _
    "Datum instalace: " & OBCH_sh.Range("install_date").Value & vbNewLine & _
    "CRAS: " & OBCH_sh.Range("pozadovany_cras").Value & vbNewLine & _
    "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
    "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
    "N|fffd|pov|fffd|da: " & "Objedn|fffd|n|fffd| p|fffd|epravy prov|fffd|st p|fffd|es Menu pro odesl|fffd|n|fffd| v instala|fffd|n|fffd|m po|fffd|adavku" & _
    "Pozn: " & OBCH_sh.Range("project_notes").Value & xml_sh.Range("string2").Value


    xml_sh.Range("str_desc_preinstalace").Value = descr_pre
    
    u = 2
    Do Until Worksheets("Help").Range("AT" & u).Value = ""
        FSE_help = Worksheets("Help").Range("AT" & u).Value
        FSE_pozadavek_pre = OBCH_sh.Range("preinstall_FSE").Value
        
        If FSE_help = FSE_pozadavek_pre Then
            xml_sh.Range("str_assignee_schvaleni_preinstalace").Value = xml_sh.Range("string1").Value & Worksheets("Help").Range("AZ" & u).Value & xml_sh.Range("string2").Value
        End If
    u = u + 1
    Loop
           
    str_pre_start = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_pre_start
        .Body = str_pre_start
        .BodyFormat = 2
        .Attachments.add FileName
        .Attachments.add kontrolni_seznam_Preinstalace
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_preinstalace").Value = "|fffd|kol"
    Call check("|fffd|kol na preinstalaci odeslan do Rinku")
End If

'objednani EIPU rinku
If Me.CheckBox1.Value = True Then
        'Call check("CRAS")
        typ = "EIPU"
        
        
        Dim summary_EIPU As String
        Dim contact_EIPU As String
        
        'XML_sh.Range("str_summary_CRAS").Value = XML_sh.Range("String1").Value & "Instalace CRAS " & OBCH_sh.Range("project_FY").Value & XML_sh.Range("String2").Value
        summary_EIPU = "EIPU: " & OBCH_sh.Range("File_name").Value
        
        xml_sh.Range("str_desc_EIPU").Value = xml_sh.Range("String1").Value & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
        "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
        "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
        xml_sh.Range("String2").Value
        
    str_body_EIPU = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_EIPU
        .Body = str_body_EIPU
        .BodyFormat = 2
        .Attachments.add FileName
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_EIPU").Value = "|fffd|kol"
    Call check("po|fffd|adavek na p|fffd||fffd|pravu EIPU odeslan do Rinku")
End If

'objednani deinstalace
Dim FSE_deinstall_short As String
    
If OBCH_sh.Range("likvidace_pristroje").Value = "ANO" Then
        typ = "DEINSTALL"
        
        Dim desc_deinstall As String
        Dim summary_deinstall As String
        Dim FSE_deinstall As String
        Dim str_deinstall_termin As String
        
        summary_deinstall = "Deinstalace: " & OBCH_sh.Range("File_name").Value
        xml_sh.Range("str_summary_deinstalace").Value = summary_deinstall
        
        If OBCH_sh.Range("deinstall_termin").Value = "instalace" Then
            str_deinstall_termin = OBCH_sh.Range("install_date").Value
        Else
            str_deinstall_termin = OBCH_sh.Range("deinstall_termin").Value
        End If
        
        xml_sh.Range("str_duedate_deinstalace").Value = xml_sh.Range("string1").Value & Format(str_deinstall_termin, "YYYY-mm-dd") & xml_sh.Range("string2").Value
        xml_sh.Range("str_instrument_deinstalace").Value = xml_sh.Range("string1").Value & OBCH_sh.Range("deinstall_EQ_NR").Value & xml_sh.Range("string2").Value
        
        
    desc_deinstall = xml_sh.Range("string1").Value & "Typ Instalace: " & OBCH_sh.Range("Druh_smlouvy").Value & vbNewLine & _
    "Typ DEinstalace: " & OBCH_sh.Range("deinstall_type").Value & vbNewLine & _
    "Datum DEinstalace: " & str_deinstall_termin & vbNewLine & _
    "Datum instalace: " & OBCH_sh.Range("install_date").Value & vbNewLine & _
    "Pozn: " & OBCH_sh.Range("deinstall_description").Value & vbNewLine & _
    OBCH_sh.Range("project_notes").Value & xml_sh.Range("string2").Value

    xml_sh.Range("str_desc_deinstalace").Value = desc_deinstall
    
        FSE_deinstall_short = OBCH_sh.Range("FSE_install_assignee").Value
        
        FSE_deinstall = user_UNIVERSAL_identify("short", FSE_deinstall_short, "login")
        xml_sh.Range("str_assignee_deinstalace").Value = xml_sh.Range("string1").Value & FSE_deinstall & xml_sh.Range("string2").Value
        
        KAM_watcher = user_UNIVERSAL_identify("short", OBCH_sh.Range("LOGIN_short").Value, "login")
        watchers_deinstall = KAM_watcher & ", scz17660"
        xml_sh.Range("str_watchers_deinstalace").Value = xml_sh.Range("string1").Value & watchers_deinstall & xml_sh.Range("string2").Value
           
    str_deinstall_body = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_deinstall
        .Body = str_deinstall_body
        .BodyFormat = 2
        '.Attachments.add Filename
        '.Attachments.add kontrolni_seznam_Preinstalace
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_deinstalace").Value = "|fffd|kol"
    Call check("|fffd|kol na deinstalaci odeslan do Rinku")
End If

'zadost SNCS
If OBCH_sh.Range("pozadovane_sncs").Value = "ANO" Or OBCH_sh.Range("pozadovane_sncs").Value = "ano" Or OBCH_sh.Range("pozadovany_CRAS").Value = "Ano" Then
        typ = "SNCS"
        
        Dim desc_sncs As String
        Dim summary_sncs As String
        Dim FSE_sncs As String
        Dim str_sncs_termin As String
        
        summary_sncs = "SNCS |fffd||fffd|dost: " & OBCH_sh.Range("File_name").Value
        xml_sh.Range("str_summary_SNCS").Value = summary_sncs
        
        str_sncs_termin = OBCH_sh.Range("install_date").Value + 7
                
        xml_sh.Range("str_duedate_sncs").Value = xml_sh.Range("string1").Value & Format(str_sncs_termin, "YYYY-mm-dd") & xml_sh.Range("string2").Value
        
    desc_sncs = xml_sh.Range("String1").Value & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| term|fffd|n p|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("LIS_connection_termin").Value & " " & OBCH_sh.Range("LIS_connection_date").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
        "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
        "SN: " & OBCH_sh.Range("instrument_SN1").Value & ", " & OBCH_sh.Range("instrument_SN2").Value & vbNewLine & _
        "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
        xml_sh.Range("String2").Value

        



    xml_sh.Range("str_desc_sncs").Value = desc_sncs
        
        Dim FSE_sncs_short As String
        FSE_sncs_short = OBCH_sh.Range("FSE_install_assignee").Value
        
        FSE_sncs = user_UNIVERSAL_identify("short", FSE_sncs_short, "login")
        xml_sh.Range("str_assignee_sncs").Value = xml_sh.Range("string1").Value & FSE_sncs & xml_sh.Range("string2").Value
        
        KAM_watcher = user_UNIVERSAL_identify("short", OBCH_sh.Range("LOGIN_short").Value, "login")
        watchers_sncs = KAM_watcher & ", scz17660"
        xml_sh.Range("str_watchers_sncs").Value = xml_sh.Range("string1").Value & watchers_sncs & xml_sh.Range("string2").Value
           
    str_sncs_body = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_sncs
        .Body = str_sncs_body
        .BodyFormat = 2
        '.Attachments.add Filename
        '.Attachments.add kontrolni_seznam_Preinstalace
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_SNCS").Value = "|fffd|kol"
    Call check("|fffd|kol na sncs odeslan do Rinku")

End If
OBCH_sh.Select

'If ActiveSheet.ProtectContents = True Then
'   ActiveSheet.Unprotect heslo
'End If
Range("A1:G1,A15:I15,A25:I28,I14").Select
Selection.Locked = True
Selection.FormulaHidden = False
ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowInsertingColumns:=False, AllowInsertingRows:=True, AllowInsertingHyperlinks:=True, AllowDeletingColumns:=True, AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
ActiveSheet.Protect password:=heslo

ThisWorkbook.Save
'Unload Me

    str_body_schvaleni = ""
    contact = ""
    descr_sch = ""
    summary_schvaleni = ""
    FSE_watch_schvaleni = ""
    watchers_schvaleni = ""
    FSE_help = ""
    FSE_pozadavek = ""
    summary_CRAS = ""
    contact_CRAS = ""
    summary_LIS = ""
    contact_LIS = ""
    descr_pre = ""
    summary_pre_start = ""
    FSE_pozadavek_pre = ""
    contact_pre = ""
    str_pre_start = ""
    
    JSM = ""
    vstup = ""
    datum = ""
    nazev = ""
    FileName = ""
    nazev_souboru = ""
    heslo = ""
    Set OutApp = Nothing
    Set OutMail = Nothing
    
End Sub

Private Sub ComboBox2_Change()
If ComboBox2.Value = "Bez preinstalace" Then
    FSE_ListBox.Enabled = False
    MonthView1.Enabled = False
    DTPicker1.Enabled = False
    DTPicker2.Enabled = False
    DTPicker3.Enabled = False
    FSE_ListBox.Value = ""
    
ElseIf ComboBox2.Value = "SEG" Then
    FSE_ListBox.Enabled = False
    MonthView1.Enabled = False
    DTPicker1.Enabled = False
    DTPicker2.Enabled = False
    DTPicker3.Enabled = False
    FSE_ListBox.Value = ""
ElseIf ComboBox2.Value = "SCZ" Then
    FSE_ListBox.Enabled = True
    MonthView1.Enabled = True
    DTPicker1.Enabled = True
    DTPicker2.Enabled = True
    DTPicker3.Enabled = True
    FSE_ListBox.Value = ""
End If
End Sub



Private Sub ComboBox3_Change()

End Sub

Private Sub CommandButton1_Click()
MonthView1.SelStart = Format(DTPicker1.Value, "YYYY-MM-dd")
If DTPicker1.Value > DTPicker2.Value Then
    MsgBox "Datum za|fffd||fffd|tku preinstalace nem|fffd||fffd|e b|fffd|t d|fffd||fffd|ve ne|fffd| datum konce preinstalace"
End If
End Sub

Private Sub CommandButton2_Click()
MonthView1.SelEnd = Format(DTPicker2.Value, "YYYY-MM-dd")
If DTPicker2.Value < DTPicker1.Value Then
    MsgBox "Datum konce preinstalace nem|fffd||fffd|e b|fffd|t d|fffd||fffd|ve ne|fffd| datum startu preinstalace"
End If
End Sub



Private Sub CommandButton3_Click()
Call MENU.ukonceni_preinstalace_Click
End Sub


Private Sub CommandButton4_Click()
    MonthView2.SelStart = Format(DTPicker4.Value, "YYYY-MM-dd")
    If DTPicker4.Value > DTPicker5.Value Then
        MsgBox "Datum za|fffd||fffd|tku instalace nem|fffd||fffd|e b|fffd|t d|fffd||fffd|ve ne|fffd| datum konce instalace"
    End If
End Sub

Private Sub CommandButton5_Click()
    MonthView2.SelEnd = Format(DTPicker5.Value, "YYYY-MM-dd")
    If DTPicker5.Value < DTPicker4.Value Then
        MsgBox "Datum konce instalace nem|fffd||fffd|e b|fffd|t d|fffd||fffd|ve ne|fffd| datum startu instalace"
    End If
End Sub

Private Sub CheckBox2_Click()

    If CheckBox2.Value = True Then
    DTPicker4.Enabled = True
    Else
    DTPicker4.Enabled = False
    DTPicker4.Value = Worksheets("Obchodni list").Range("install_date").Value
    End If
End Sub

Private Sub MonthView1_SelChange(ByVal StartDate As Date, ByVal EndDate As Date, Cancel As Boolean)

DTPicker1.Value = MonthView1.SelStart
DTPicker2.Value = MonthView1.SelEnd

End Sub

Private Sub MonthView2_SelChange(ByVal StartDate As Date, ByVal EndDate As Date, Cancel As Boolean)

If DTPicker4.Enabled = True Then
DTPicker4.Value = MonthView2.SelStart
Else
MonthView2.SelStart = DTPicker4.Value
End If

DTPicker5.Value = MonthView2.SelEnd

End Sub


Private Sub ToggleButton1_Click()
Call MENU.ukonceni_preinstalace
End Sub


Private Sub UserForm_Initialize()

Dim dt2 As Date
Dim dt1 As Date

'DTPicker1.Format = dtpCustom
DTPicker1.CustomFormat = "dd.MM.yyyy"
DTPicker2.CustomFormat = "dd.MM.yyyy"
DTPicker3.CustomFormat = "dd.MM.yyyy"

'start/konec preinstalace
DTPicker4.CustomFormat = "dd.MM.yyyy"
DTPicker5.CustomFormat = "dd.MM.yyyy"

Preinstall_form.FSE_ListBox.list = Worksheets("Help").Range("AT1:AT33").Value
Preinstall_form.ListBox1.list = Worksheets("Help").Range("AI26:AJ50").Value
Preinstall_form.FSE_install.list = Worksheets("Help").Range("AT1:AT33").Value

Preinstall_form.ComboBox2.AddItem "SCZ"
Preinstall_form.ComboBox2.AddItem "SSK"
Preinstall_form.ComboBox2.AddItem "SEG"
Preinstall_form.ComboBox2.AddItem "Bez preinstalace"

MonthView1.Value = Now


If Worksheets("Obchodni list").Range("preinstall_FSE").Value <> "" Then
    Preinstall_form.FSE_ListBox.Value = Worksheets("Obchodni list").Range("preinstall_FSE").Value
Else
    Preinstall_form.FSE_ListBox.Value = "JDU"
End If

If Worksheets("Obchodni list").Range("FSE_install_assignee").Value <> "" Then
    Preinstall_form.FSE_install.Value = Worksheets("Obchodni list").Range("FSE_install_assignee").Value
Else
    Preinstall_form.FSE_install.Value = ""
End If

For lngIndex = 0 To ListBox1.ListCount - 1
    If ListBox1.list(lngIndex, 0) <> "" Then
    ListBox1.list(lngIndex, 0) = Format(ListBox1.list(lngIndex, 0), "dd.MM.YYYY")
    End If
Next

If Worksheets("Obchodni list").Range("install_date").Value <> "" Then
    DTPicker4.Value = Worksheets("Obchodni list").Range("install_date").Value
Else
    DTPicker4.Value = "1.1.1900"
End If

If Worksheets("Obchodni list").Range("installation_planned_end").Value <> "" Then
    DTPicker5.Value = Worksheets("Obchodni list").Range("installation_planned_end").Value
Else
    DTPicker5.Value = "1.1.1900"
End If

If Worksheets("Obchodni list").Range("date_start_preinstall").Value <> "" Then
    DTPicker1.Value = Worksheets("Obchodni list").Range("date_start_preinstall").Value
Else
    DTPicker1.Value = Now()
End If

If Worksheets("Obchodni list").Range("date_end_preinstall").Value <> "" Then
    DTPicker2.Value = Worksheets("Obchodni list").Range("date_end_preinstall").Value
Else
    DTPicker2.Value = Now()
End If

If Worksheets("Obchodni list").Range("date_transfer_preinstall").Value <> "" Then
    DTPicker3.Value = Worksheets("Obchodni list").Range("date_transfer_preinstall").Value
Else
    DTPicker3.Value = Now()
End If

If Worksheets("Obchodni list").Range("preinstall_FSE").Value <> "" Then
        FSE_ListBox.Value = Worksheets("Obchodni list").Range("preinstall_FSE").Value
End If

If Worksheets("Obchodni list").Range("preinstall_status").Value <> "" Then
    Preinstall_form.ComboBox2.Value = Worksheets("Obchodni list").Range("preinstall_status").Value
Else:
    Preinstall_form.ComboBox2.Value = "SCZ"
End If

MonthView2.Value = DTPicker4.Value
dt2 = Format(Now(), "dd.MM.YYYY")

lngIndex = 0
Do Until lngIndex = ListBox1.ListCount - 1

If Format(ListBox1.list(lngIndex, 0), "dd.MM.YYYY") = "" Then
Exit Do
Else:
    dt1 = Format(ListBox1.list(lngIndex, 0), "dd.MM.YYYY")
            If dt1 < dt2 Then
                ListBox1.Selected(lngIndex) = True
                ListBox1.RemoveItem intIndex
                lngIndex = lngIndex - 1
            End If
            lngIndex = lngIndex + 1
End If
Loop
tst = 0
End Sub

Private Sub write_button_Click()
    Worksheets("Obchodni list").Range("preinstall_status").Value = ComboBox2.Value
       
    If ComboBox2.Value = "SCZ" Then
        Worksheets("Obchodni list").Range("date_start_preinstall").Value = DTPicker1.Value
        Worksheets("Obchodni list").Range("date_end_preinstall").Value = DTPicker2.Value
        Worksheets("Obchodni list").Range("preinstall_FSE").Value = FSE_ListBox.Value
        
        Application.ScreenUpdating = False
        Worksheets("Obchodni list").Range("date_start_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        
        Worksheets("Obchodni list").Range("date_end_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        
        Worksheets("Obchodni list").Range("preinstall_FSE").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        
        Worksheets("Obchodni list").Range("date_transfer_preinstall").Select
        Worksheets("Obchodni list").Range("date_transfer_preinstall").Value = DTPicker3.Value
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
         Application.ScreenUpdating = True
         
    ElseIf ComboBox2.Value = "SSK" Then
        Worksheets("Obchodni list").Range("date_start_preinstall").Value = DTPicker1.Value
        Worksheets("Obchodni list").Range("date_end_preinstall").Value = DTPicker2.Value
        Worksheets("Obchodni list").Range("preinstall_FSE").Value = FSE_ListBox.Value
        
        Application.ScreenUpdating = False
        Worksheets("Obchodni list").Range("date_start_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        
        Worksheets("Obchodni list").Range("date_end_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        
        Worksheets("Obchodni list").Range("preinstall_FSE").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        
        Worksheets("Obchodni list").Range("date_transfer_preinstall").Select
        Worksheets("Obchodni list").Range("date_transfer_preinstall").Value = DTPicker3.Value
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        Application.ScreenUpdating = True
    Else
        Application.ScreenUpdating = False
        Worksheets("Obchodni list").Range("date_start_preinstall").Value = ""
        Worksheets("Obchodni list").Range("date_end_preinstall").Value = ""
        Worksheets("Obchodni list").Range("preinstall_FSE").Value = ""
        
        Worksheets("Obchodni list").Range("date_start_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
        
        Worksheets("Obchodni list").Range("date_end_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
        
        Worksheets("Obchodni list").Range("preinstall_FSE").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
        
        Worksheets("Obchodni list").Range("date_transfer_preinstall").Select
        Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
         Application.ScreenUpdating = True
    End If
    
    Worksheets("Obchodni list").Range("FSE_install_assignee").Value = FSE_install.Value
End Sub


Attribute VB_Name = "Project_name_wizard"
Attribute VB_Base = "0{13CB9DE6-B152-4D3D-B7D9-5F586B4FCC30}{5DC07CCB-4504-4FFA-9077-9EA76BFF7CBD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    find_payer.write_customer.Enabled = True
    find_payer.Write_payer.Enabled = True
    find_payer.Show
End Sub

Private Sub instrument_ListBox_Change()
    TextBox1.Value = TextBox2.Value & Odd & "_" & instrument_ListBox.Value
End Sub

Private Sub TextBox2_Change()
    TextBox1.Value = TextBox2.Value & Odd & "_" & instrument_ListBox.Value
End Sub

Private Sub UserForm_Initialize()
prodej_combobox.list = Worksheets("Help").Range("prodej_DRUH").Value
country_combobox.list = Worksheets("Help").Range("SCZ").Value
instrument_ListBox.list = Worksheets("Help").Range("instrument").Value

prodej_combobox.Value = Worksheets("Obchodni list").Range("druh_smlouvy").Value
country_combobox.Value = Worksheets("Obchodni list").Range("zeme_instalace").Value
instrument_ListBox.Value = Worksheets("Obchodni list").Range("typ_analyzatoru").Value

TextBox2.Value = ""

End Sub

Private Sub write_btn_Click()

If country_combobox.Value = "" Or country_combobox.Value = "zvolte" Then
    MsgBox ("Zvolte pros|fffd|m zemi instalace.")
    Exit Sub
End If

If prodej_combobox.Value = "" Or prodej_combobox.Value = "zvolte pros|fffd|m" Then
    MsgBox ("Zvolte pros|fffd|m druh prodeje.")
    Exit Sub
End If

If instrument_ListBox.Value = "" Then
    MsgBox ("Zvolte pros|fffd|m analyz|fffd|tor.")
    Exit Sub
End If

If TextBox2.Value = "" Then
    MsgBox ("Zadejte pros|fffd|m zkratku z|fffd|kazn|fffd|ka z minervy - nejl|fffd|pe vyhledejte z|fffd|kazn|fffd|ka tla|fffd||fffd|tkem.")
    Exit Sub
End If

If TextBox1.Value = "" Then
    MsgBox ("Pole s n|fffd|zvem projektu nesm|fffd| z|fffd|stat pr|fffd|zdn|fffd|.")
    Exit Sub
End If


Worksheets("Obchodni list").Range("druh_smlouvy").Value = prodej_combobox.Value
Worksheets("Obchodni list").Range("zeme_instalace").Value = country_combobox.Value
Worksheets("Obchodni list").Range("project_FY").Value = TextBox1.Value
Worksheets("Obchodni list").Range("typ_analyzatoru").Value = instrument_ListBox.Value

MsgBox "V|fffd|echny informace byly zapsan|fffd|, pros|fffd|m d|fffd|le pokra|fffd|uje "

Unload Me
End Sub
Attribute VB_Name = "Properties"
Public Sub WriteProp(sPropName As String, sValue As String, _
       Optional lType As Long = msoPropertyTypeString)

'In the above declaration, "Optional lType As Long = msoPropertyTypeString" means
 'that if the Document Property's Type is Text, we don't need to include the lType argument
 'when we call the procedure; but if it's any other Prpperty Type (e.g. date) then we do

 Dim bCustom As Boolean

   On Error GoTo ErrHandlerWriteProp

  'Try to write the value sValue to the custom documentproperties
   'If the customdocumentproperty does not exists, an error will occur
   'and the code in the errorhandler will run
  ActiveWorkbook.BuiltinDocumentProperties(sPropName).Value = sValue
  'Quit this routine
  Exit Sub

Proceed:
  'We know now that the property is not a builtin documentproperty,
   'but a custom documentproperty, so bCustom = True
  bCustom = True

Custom:
  'Try to set the value for the customproperty sPropName to sValue
   'An error will occur if the documentproperty doesn't exist yet
   'and the code in the errorhandler will take over
  ActiveWorkbook.CustomDocumentProperties(sPropName).Value = sValue
   Exit Sub

AddProp:
  'We came here from the errorhandler, so know we know that
   'property sPropName is not a built-in property and that there's
   'no custom property with this name
   'Add it
  On Error Resume Next
  ActiveWorkbook.CustomDocumentProperties.add name:=sPropName, _
     LinkToContent:=False, Type:=msoPropertyTypeString, Value:=sValue

   If Err Then
    'If we still get an error, the value isn't valid for the Property Type
     'e,g an invalid date was used
    Debug.Print "The Property " & Chr(34) & _
      sPropName & Chr(34) & " couldn't be written, because " & _
      Chr(34) & sValue & Chr(34) & _
      " is not a valid value for the property type"
   End If

   Exit Sub

ErrHandlerWriteProp:
   Select Case Err
     Case Else
    'Clear the error
    Err.clear
   'bCustom is a boolean variable, if the code jumps to this
    'errorhandler for the first time, the value for bCustom is False
   If Not bCustom Then
     'Continue with the code after the label Proceed
     Resume Proceed
    Else
     'The errorhandler was executed before because the value for
      'the variable bCustom is True, therefor we know that the
      'customdocumentproperty did not exist yet, jump to AddProp,
      'where the property will be made
     Resume AddProp
    End If
   End Select

End Sub
Function ReadProp(sPropName As String) As Variant

Dim bCustom As Boolean
Dim sValue As String

   On Error GoTo ErrHandlerReadProp
   'Try the built-in properties first
   'An error will occur if the property doesn't exist
   sValue = ActiveWorkbook.BuiltinDocumentProperties(sPropName).Value
   ReadProp = sValue
   Exit Function

ContinueCustom:
   bCustom = True

Custom:
   sValue = ActiveWorkbook.CustomDocumentProperties(sPropName).Value
   ReadProp = sValue
   Exit Function

ErrHandlerReadProp:
   Err.clear
   'The boolean bCustom has the value False, if this is the first
   'time that the errorhandler is runned
   If Not bCustom Then
     'Continue to see if the property is a custom documentproperty
     Resume ContinueCustom
   Else
     'The property wasn't found, return an empty string
     ReadProp = ""
     Exit Function
   End If

End Function
Attribute VB_Name = "SLS_issue"
Attribute VB_Base = "0{6CFAE6CF-170A-4CEA-A216-899E8CF6962C}{76E6D924-9967-4F47-AE4C-1B63AB33E81D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
If Label3.Caption = "" Then
    quest = MsgBox("Oravdu jsi p|fffd|ejete zapsat pr|fffd|zdn|fffd| |fffd||fffd|slo SLS do obchodn|fffd|ho listu?", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
        Worksheets("Obchodni list").Range("SLS_issue").Value = Label3.Caption
        Unload Me
    End If
ElseIf Label3.Caption = "SLS-" Then
    quest = MsgBox("Oravdu jsi p|fffd|ejete ulo|fffd|it ne|fffd|pln|fffd| |fffd||fffd|slo SLS do obchodn|fffd|ho listu?", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
        Worksheets("Obchodni list").Range("SLS_issue").Value = Label3.Caption
        Unload Me
    End If
End If

    quest = MsgBox("Oravdu jsi p|fffd|ejete ulo|fffd|it toto " & Label3.Caption & " do obchodn|fffd|ho listu?", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
        Worksheets("Obchodni list").Range("SLS_issue").Value = Label3.Caption
        Unload Me
    End If
    
End Sub

Private Sub Label3_Click()

End Sub

Private Sub TextBox1_Change()

OnlyNumbers
str1 = Replace("SLS-" & TextBox1.Value, " ", "")
Label3.Caption = str1

End Sub

Private Sub OnlyNumbers()

    If TypeName(Me.ActiveControl) = "TextBox" Then

        With Me.ActiveControl

            If Not IsNumeric(.Value) And .Value <> vbNullString Then

                MsgBox "Zadejte pros|fffd|m pouze |fffd||fffd|slo SLS projektu. Zbytek se dopln|fffd| automaticky. P|fffd|smena nejsou povolen|fffd|. Zkuste to pros|fffd|m znovu."

                .Value = vbNullString

            End If

        End With

    End If

    

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "SRV_issue"
Attribute VB_Base = "0{12EDD129-16A0-467D-8BB7-2F3E22AF079A}{DC8B0082-B6BA-49DC-B94E-DAAB2161CA62}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
If Label3.Caption = "" Then
    quest = MsgBox("Oravdu jsi p|fffd|ejete zapsat pr|fffd|zdn|fffd| |fffd||fffd|slo SRV do listu Popt|fffd|vky/Objedn|fffd|vky LIS?", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
        Worksheets("cenov|fffd| popt|fffd|vka - LIS").Range("SRV_LIS_issue").Value = Label3.Caption
        Unload Me
    End If
ElseIf Label3.Caption = "SLS-" Then
    quest = MsgBox("Oravdu jsi p|fffd|ejete ulo|fffd|it ne|fffd|pln|fffd| |fffd||fffd|slo SLS do listu Popt|fffd|vky/Objedn|fffd|vky LIS??", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
        Worksheets("cenov|fffd| popt|fffd|vka - LIS").Range("SRV_LIS_issue").Value = Label3.Caption
        Unload Me
    End If
End If

    quest = MsgBox("Oravdu jsi p|fffd|ejete ulo|fffd|it toto " & Label3.Caption & " listu Popt|fffd|vky/Objedn|fffd|vky LIS?", vbYesNo)
    If quest = 7 Then
        Unload Me
    ElseIf quest = 6 Then
        Worksheets("cenov|fffd| popt|fffd|vka - LIS").Range("SRV_LIS_issue").Value = Label3.Caption
        Unload Me
    End If
    
End Sub

Private Sub Label3_Click()

End Sub

Private Sub TextBox1_Change()

OnlyNumbers
str1 = Replace("SRV-" & TextBox1.Value, " ", "")
Label3.Caption = str1

End Sub

Private Sub OnlyNumbers()

    If TypeName(Me.ActiveControl) = "TextBox" Then

        With Me.ActiveControl

            If Not IsNumeric(.Value) And .Value <> vbNullString Then

                MsgBox "Zadejte pros|fffd|m pouze |fffd||fffd|slo SLS projektu. Zbytek se dopln|fffd| automaticky. P|fffd|smena nejsou povolen|fffd|. Zkuste to pros|fffd|m znovu."

                .Value = vbNullString

            End If

        End With

    End If

    

End Sub

Private Sub UserForm_Click()

End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 2, 0, MSForms, CommandButton"

Private Sub CommandButton1_Click()
Call InternalInitialize
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub tesst()
Application.ScreenUpdating = True

End Sub

Sub test2()
    Dim kontrolni_seznam_Instalace As String
    Dim kontrolni_seznam_Preinstalace As String
    Dim kontrolni_seznam_Sales As String
    Dim kontrolni_seznam_Products As String
    
    kontrolni_seznam_Instalace = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A1:M32"), "C:\Temp\Kontrolni_seznam_Instalace.pdf", True, False)
    kontrolni_seznam_Preinstalace = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A33:M70"), "C:\Temp\Kontrolni_seznam_Preinstalace.pdf", True, False)
    kontrolni_seznam_Sales = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A71:M125"), "C:\Temp\Kontrolni_seznam_Sales.pdf", True, False)
    kontrolni_seznam_Products = RDB_Create_PDF(Worksheets("Kontrolni seznam").Range("A125:M180"), "C:\Temp\Kontrolni_seznam_Products.pdf", True, False)
    
End Sub

Sub test3()
        
    Dim OBCH_sh As Worksheet
    Set OBCH_sh = Worksheets("Obchodni list")
    
    Dim xml_sh As Worksheet
    Set xml_sh = Worksheets("XML")
    
    Dim create_sh As Worksheet
    Set create_sh = Worksheets("Create")
    Dim customer_ID As String
    Dim typ As String
    
    customer_ID = OBCH_sh.Range("customer_ID").Value
    
            typ = "CRAS"
        
        Dim summary_CRAS As String
        Dim contact_CRAS As String
        Dim CRAS_nr As Integer
        Dim CRAS_comment As String
        CRAS_nr = Find_CRAS(customer_ID)
        
        If CRAS_nr = 0 Then
            CRAS_comment = Worksheets("Source").Range("A5").Value
        Else:
            'CRAS_comment = Worksheets("Source").Range("A5").Value + vbNewLine
            For c = 5 To 5 + CRAS_nr
                CRAS_comment = CRAS_comment + " " + Worksheets("Source").Range("A" & c).Value + " " + Worksheets("Source").Range("C" & c).Value + vbNewLine
            Next c
        End If
        'XML_sh.Range("str_summary_CRAS").Value = XML_sh.Range("String1").Value & "Instalace CRAS " & OBCH_sh.Range("project_FY").Value & XML_sh.Range("String2").Value
        summary_CRAS = "CRAS: " & OBCH_sh.Range("File_name").Value
        
        xml_sh.Range("str_desc_CRAS").Value = xml_sh.Range("String1").Value & "Analyz|fffd|tor: " & OBCH_sh.Range("typ_analyzatoru").Value & vbNewLine & _
        "Po|fffd|adovan|fffd| SNCS: " & OBCH_sh.Range("pozadovane_sncs").Value & vbNewLine & _
        "P|fffd|ipojen|fffd| LIS: " & OBCH_sh.Range("pozadovany_LIS").Value & vbNewLine & _
        "Pozn|fffd|mky k projektu: " & OBCH_sh.Range("project_notes").Value & vbNewLine & _
        CRAS_comment & vbNewLine & _
        xml_sh.Range("String2").Value
        
    str_body_CRAS = XML_generator(typ)
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
              
    With OutMail
        .To = "rinku@sysmex.cz"
        .Cc = ""
        .BCC = ""
        .Subject = summary_CRAS
        .Body = str_body_CRAS
        .BodyFormat = 2
        '.Attachments.add Filename
        .display
        '.Send
    End With
    Set OutMail = Nothing
    Set OutApp = Nothing
    
    OBCH_sh.Range("IND_CRAS").Value = "|fffd|kol"
    Call check("po|fffd|adavek na p|fffd||fffd|pravu CRAS odeslan do Rinku")
            
End Sub

Sub test4()
    Dim OBCH_sh As Worksheet
    Set OBCH_sh = Worksheets("Obchodni list")

    Dim xml_sh As Worksheet
    Set xml_sh = Worksheets("XML")
        u = 2
        Do Until Worksheets("Help").Range("AT" & u).Value = ""
            PP_help = Worksheets("Help").Range("AT" & u).Value
            PP_pozadavek_pre = OBCH_sh.Range("PP_training_assignee").Value
            
            If PP_help = PP_pozadavek_pre Then
                xml_sh.Range("str_assignee_zaskoleni").Value = xml_sh.Range("string1").Value & Worksheets("Help").Range("AZ" & u).Value & xml_sh.Range("string2").Value
            End If
        u = u + 1
        Loop
End Sub


Attribute VB_Name = "cCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:44 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cCell.cls
' a data Cell - holds value at time of loading, or can be kept fresh if there might be formula updates
Option Explicit
' Version 2.04 -
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pValue As Variant                   ' value of cell when first loaded
Private pColumn As Long                     ' column number
Private pParent As cDataRow                 ' cDataRow to which this belongs
Public Property Get row() As Long
    row = pParent.row
End Property
Public Property Get column() As Long
    column = pColumn
End Property
Public Property Get parent() As cDataRow
    Set parent = pParent
End Property
Public Property Get myKey() As String
    myKey = makeKey(pParent.parent.headings(pColumn).toString)
End Property

Public Property Get where() As Range    ' return the range from whence it came
    If row = 0 Then
    ' its a heading
        Set where = pParent.where.Resize(1, 1).Offset(row, pColumn - 1)
    Else
        Set where = pParent.where.Resize(1, 1).Offset(, pColumn - 1)
    End If
End Property
Public Property Get refresh() As Variant ' refresh the current value and return it
    pValue = where.Value
    refresh = pValue
End Property
Public Property Get toString(Optional sFormat As String = vbNullString, _
            Optional followFormat As Boolean = False, _
            Optional deLocalize As Boolean = False) As String ' Convert to a string, applying a format if supplied
    Dim s As String, os As String, ts As String
    If Len(sFormat) > 0 Then
        os = Format(Value, sFormat)
    Else
        If followFormat Then
            s = where.NumberFormat
            If Len(s) > 0 And s <> "General" Then
                os = Format(Value, s)
            Else
                os = CStr(Value)
            End If
        Else
            os = CStr(Value)
        End If
    End If
    
    If deLocalize Then
        If VarType(Value) = vbDouble Or VarType(Value) = vbCurrency Or VarType(Value) = vbSingle Then
            ' commas to dots
            ts = Mid(CStr(1.1), 2, 1)
            os = Replace(os, ts, ".")
            
        ElseIf VarType(Value) = vbBoolean Then
        
            If Value Then
                os = "true"
            Else
                os = "false"
            
            End If
        
        End If
    
    End If
    toString = os
    
End Property
Public Property Get Value() As Variant   ' return the value, refreshing it if necessary
    If pParent.parent.keepFresh Then
        Value = refresh
    Else
        Value = pValue
    End If
End Property
Public Property Let Value(p As Variant)
    parent.parent.columns(pColumn).dirty = True
    If pParent.parent.keepFresh Then
        Commit p
    Else
        pValue = p
    End If
End Property
Public Function needSwap(Cc As cCell, e As eSort) As Boolean
    ' this can be used from a sorting alogirthm
    Select Case e
        Case eSortAscending
            needSwap = LCase(toString) > LCase(Cc.toString)
            
        Case eSortDescending
            needSwap = LCase(toString) < LCase(Cc.toString)
    
        Case Else
            needSwap = False
    End Select
End Function
Public Function Commit(Optional p As Variant) As Variant
    Dim v As Variant
    If Not IsMissing(p) Then
        pValue = p
    End If
    
    where.Value = pValue
    Commit = refresh

End Function
Public Function create(par As cDataRow, colNum As Long, rCell As Range, _
            Optional v As Variant) As cCell        ' Fill the Cell up
    
    ' if v is specifed we knw the value without needing to access the sheet
    If IsMissing(v) Then
        pValue = rCell.Value
    Else
        pValue = v
    End If
    pColumn = colNum
    Set pParent = par
    Set create = Me                     ' return for convenience
End Function


Public Sub tearDown()
    ' clean up
    Set pParent = Nothing
End Sub






Attribute VB_Name = "cDataColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:45 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cDataColumn.cls
' a collection of data Cells representing one column of data
' v2.04 -
Option Explicit
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pCollect As Collection                      ' a collection of data Cells - one for every row in this column
Private pWhere As Range
Private pParent As cDataSet
Private pColumn As Long
Private pTypeofColumn As eTypeofColumn
Private pHeadingCell As cCell    ' we can use this to find the heading for this column
Private pDirty As Boolean
Public Enum eTypeofColumn
    eTCdate
    eTCnumeric
    eTCtext
    eTCmixed
    eTCboolean
    eTCunknown
End Enum
Public Enum eSort
    eSortNone
    eSortAscending
    eSortDescending
End Enum
Public Property Get googleType() As String
    Select Case pTypeofColumn
        Case eTCnumeric
            googleType = "number"
        Case eTCdate
            googleType = "date"
        Case Else
            googleType = "string"
            
    End Select
End Property
Public Property Get dirty() As Boolean
    dirty = pDirty
End Property
Public Property Let dirty(p As Boolean)
        pDirty = p
End Property
Public Property Get typeofColumn() As eTypeofColumn
    typeofColumn = pTypeofColumn
End Property
Public Property Let typeofColumn(p As eTypeofColumn)
    pTypeofColumn = p
End Property
Public Property Get column() As Long
    column = pColumn
End Property
Public Property Get rows() As Collection
    Set rows = pCollect
End Property
Public Property Get parent() As cDataSet
    Set parent = pParent
End Property
Public Property Get where() As Range
    If Not pWhere Is Nothing Then
        Set where = pWhere.Resize(pParent.rows.count)
    End If
End Property
Public Property Get cell(rowID As Variant) As cCell
    Set cell = pParent.cell(rowID, pHeadingCell.column)
End Property
Public Property Get Value(rowID As Variant) As Variant
    Value = cell(rowID).Value
End Property
Public Function refresh(Optional rowID As Variant) As Variant
    Dim dt As cCell
    If IsMissing(rowID) Then
        For Each dt In rows
            refresh = dt.refresh
        Next dt
        refresh = Empty
    Else
        refresh = cell(rowID).refresh
    End If

End Function
Public Function filtered(v As Variant) As Collection
    ' this creates a filtered collection of cells for this column based on matching some value
    Dim c As Collection, Cc As cCell
    Set c = New Collection
    For Each Cc In rows
        ' this filter is in addition to any excel ones in operations
        If Not Cc.parent.hidden And v = Cc.Value Then c.add Cc
    Next Cc
    Set filtered = c
End Function


Public Property Get uniqueValues(Optional eSort As eSort = eSortNone) As Collection
    ' return a collection of unique values for this column
    Dim Cc As cCell
    Dim vUnique As Collection
    Set vUnique = New Collection
    
    For Each Cc In rows
        If (Not Cc.parent.hidden) Then
            If exists(vUnique, Cc.toString) Is Nothing Then vUnique.add Cc, CStr(Cc.Value)
        End If
    Next Cc
    If eSort <> eSortNone Then SortColl vUnique, eSort

    Set uniqueValues = vUnique
End Property
Public Sub Commit(Optional p As Variant, Optional rowID As Variant)
    Dim dt As cCell, v As Variant
    
    If IsMissing(rowID) Then
        For Each dt In pCollect
            dt.Commit p
        Next dt
    Else
       cell(rowID).Commit p
    End If
   
End Sub
Public Property Get values() As Variant
    Dim Cc As cCell
    ReDim a(1 To parent.visibleRowsCount) As Variant
    For Each Cc In rows
        If Not Cc.parent.hidden Then a(Cc.row) = Cc.Value
    Next Cc
    values = a
End Property
Public Function find(v As Variant) As cCell
    Dim Cc As cCell
    For Each Cc In rows
        If makeKey(Cc.Value) = makeKey(v) Then
            Set find = Cc
            Exit Function
        End If
    Next Cc
End Function
Public Function max() As Variant
    max = Application.WorksheetFunction.max(values)
End Function
Public Function min() As Variant
    min = Application.WorksheetFunction.min(values)
End Function
Public Property Get toString(rowNum As Long, Optional sFormat As String = vbNullString) As String
    toString = cell(rowNum).toString(sFormat)
End Property
Public Function create(dset As cDataSet, hcell As cCell, ncol As Long) As cDataColumn
    Dim rCell As Range, dcell As cCell
    pTypeofColumn = eTCunknown
    Set pParent = dset

    pColumn = ncol
    If Not pParent.where Is Nothing Then
        Set pWhere = hcell.where.Offset(1).Resize(dset.where.rows.count)
    End If
    Set pHeadingCell = hcell
    Set create = Me
End Function
Private Function exists(vCollect As Collection, sid As Variant) As cCell
    If Not vCollect Is Nothing Then
        On Error GoTo handle
        Set exists = vCollect(sid)
        Exit Function
    End If
handle:
    Set exists = Nothing
End Function

Public Sub tearDown()
    ' clean up
    Set pCollect = Nothing
    Set pParent = Nothing
End Sub

Private Sub class_initialize()
    Set pCollect = New Collection
End Sub





Attribute VB_Name = "cDataRow"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:47 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cDataRow.cls
' a collection of data Cells representing one row of data
Option Explicit
'v 2.02
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pCollect As Collection                  ' a collection of data Cells - one for every column in this row
Private pWhere As Range
Private pParent As cDataSet
Private pRow As Long
Private pHidden As Boolean
Public Property Get hidden()
    hidden = pHidden
End Property
Public Property Get parent() As cDataSet
    Set parent = pParent
End Property
Public Property Get row() As Long
    row = pRow
End Property
Public Property Get columns() As Collection
    Set columns = pCollect
End Property
Public Property Get where() As Range
    Set where = pWhere
End Property

Public Property Get cell(sid As Variant, Optional complain As Boolean = False) As cCell
    Dim c As cCell
    Set c = exists(sid)
    If c Is Nothing And complain Then
        MsgBox (CStr(sid) & " is not a known column heading")
    End If
    Set cell = c

End Property
Public Property Get Value(sid As Variant) As Variant
    Dim Cc As cCell
    Set Cc = cell(sid)
    If Not Cc Is Nothing Then
        Value = Cc.Value
    End If
End Property
Public Property Get values(Optional bIncludeKey = False) As Variant
    Dim Cc As cCell
    ReDim a(1 To columns.count) As Variant
    For Each Cc In columns
        If Cc.column <> pParent.keyColumn Or bIncludeKey Then
            a(Cc.column) = Cc.Value
        Else
            a(Cc.column) = Empty
        End If
    Next Cc
    values = a
End Property

Public Function find(v As Variant, Optional bIncludeKey = False) As cCell
    Dim Cc As cCell
    For Each Cc In columns
        If Cc.column <> pParent.keyColumn Or bIncludeKey Then
            If makeKey(Cc.Value) = makeKey(v) Then
                Set find = Cc
                Exit Function
            End If
        End If
    Next Cc
End Function
Public Function max(Optional bIncludeKey = False) As Variant
    max = Application.WorksheetFunction.max(values(bIncludeKey))
End Function
Public Function min(Optional bIncludeKey = False) As Variant
    max = Application.WorksheetFunction.min(values(bIncludeKey))
End Function
Public Function refresh(Optional sid As Variant) As Variant
    Dim dt As cCell, v As Variant
    If IsMissing(sid) Then
        For Each dt In columns
            v = dt.refresh
        Next dt

    Else
        refresh = cell(sid).refresh
    End If
End Function

Public Sub Commit(Optional p As Variant, Optional sid As Variant)
    Dim dt As cCell
    If IsMissing(sid) Then
        For Each dt In columns
            dt.Commit p
        Next dt
    Else
      cell(sid).Commit p
    End If
   
End Sub
Public Property Get toString(sid As Variant, Optional sFormat As String = vbNullString) As String
    toString = cell(sid).toString(sFormat)
End Property
Public Function create(dset As cDataSet, rDataRow As Range, nRow As Long, _
                            rv As Variant) As cDataRow
                            
    Dim rCell As Range, dcell As cCell, hcell As cCell, hr As cHeadingRow, n As Long
    Dim r As Range, dc As cDataColumn

    Set pWhere = rDataRow
    Set pParent = dset
    pRow = nRow
    n = 0
    ' recordfilter
    pHidden = False
    If (pParent.recordFilter) Then
        pHidden = rDataRow.EntireRow.hidden
    End If
    
    If pRow = 0 Then        ' we are doing a headingrow
        For Each r In pWhere.Cells
            n = n + 1
            If IsEmpty(r) Then
                MsgBox ("unexpected blank heading cell at " & SAd(r))
                Exit Function
            End If
            Debug.Assert Not IsEmpty(r)
            Set dcell = New cCell
            With dcell
                pCollect.add .create(Me, n, r), makeKey(CStr(r.Value))
            End With
        Next r
    Else
        Set hr = pParent.headingRow
        For Each hcell In hr.headings
            ' create a cell to hold it in
            Set rCell = rDataRow.Cells(1, hcell.column)
            Set dcell = New cCell
            dcell.create Me, hcell.column, rCell, rv(nRow - 1 + LBound(rv, 1), hcell.column - 1 + LBound(rv, 2))
            pCollect.add dcell

            ' set the type of column
            Set dc = pParent.columns(hcell.column)
            With dc
                If Not IsEmpty(rCell) Then
                    If .typeofColumn <> eTCmixed Then
                        If IsDate(rCell.Value) Then
                            If .typeofColumn <> eTCdate Then
                                If .typeofColumn = eTCunknown Then
                                    .typeofColumn = eTCdate
                                Else
                                    .typeofColumn = eTCmixed
                                End If
                            End If
                            
                        ElseIf IsNumeric(rCell.Value) Then
                            If .typeofColumn <> eTCnumeric Then
                                If .typeofColumn = eTCunknown Then
                                    .typeofColumn = eTCnumeric
                                Else
                                    .typeofColumn = eTCmixed
                                End If
                            End If
                        
                        Else
                            If .typeofColumn <> eTCtext Then
                                If .typeofColumn = eTCunknown Then
                                    .typeofColumn = eTCtext
                                Else
                                    .typeofColumn = eTCmixed
                                End If
                            End If
                        End If
                    End If
                End If
            End With
            
        Next hcell
    End If
    Set create = Me
End Function

Private Function exists(sid As Variant) As cCell
    On Error GoTo handle
    If VarType(sid) = vbLong Or VarType(sid) = vbInteger Then
        Set exists = pCollect(sid)
    Else
        Set exists = pCollect(pParent.headings(makeKey(CStr(sid))).column)
    End If
    Exit Function
handle:
    Set exists = Nothing
End Function
Public Sub tearDown()
    ' clean up
    Dim Cc As cCell
    If Not pCollect Is Nothing Then
        For Each Cc In columns
            Cc.tearDown
        Next Cc
        Set pCollect = Nothing
    End If
    
    Set pParent = Nothing
End Sub

Private Sub class_initialize()
    Set pCollect = New Collection
End Sub




Attribute VB_Name = "cDataSet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:45 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cDataSet.cls
' class cDataSet
' v2.12 - 3414216
Option Explicit
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Option Compare Text
Private pCollect As Collection              ' a collection of data rows  - one for every row in the data
Private pCollectColumns As Collection       ' a collection of data columns  - one for every column in the data
Private pWhere As Range
Private pHeadingRow As cHeadingRow
Private pName As String
Private pisLab As Boolean
Private pKeepfresh As Boolean
Private pParent As cDataSets
Private pRecordFilter As Boolean
Private pLikely As Boolean

Const cJobName = "cDataSet"
Public Enum eJsonConv
    eJsonConvPropertyNames
End Enum
Private pKeyColumn As Long
Public Property Get self() As cDataSet
    Set self = Me
End Property

Public Property Get activeListObject() As ListObject
    ' this one checks for any intersection with a table and stores it
    Dim o As ListObject
    Set o = intersectListObject(headingRow.where)
    If o Is Nothing Then Set o = intersectListObject(where)
    Set activeListObject = o
End Property
Private Function intersectListObject(r As Range) As ListObject
    Dim o As ListObject
    If Not r Is Nothing Then
        For Each o In r.Worksheet.ListObjects
            If Not Intersect(o.Range, r) Is Nothing Then
                Set intersectListObject = o
                Exit Function
            End If
        Next o
    End If
End Function
Public Function makeListObject(Optional sname As String = vbNullString) As ListObject
    ' creates a list object the to map the current dataset - will use the dataset name to generate a name if not given
    If sname = vbNullString Then sname = "table_" + self.name
    Set makeListObject = _
        self.where.Worksheet.ListObjects.add(xlSrcRange, self.headingRow.where.Resize(self.rows.count + 1), , xlYes)
        
    makeListObject.name = sname
    
End Function
Public Property Get visibleRowsCount() As Long
    Dim n As Long, dr As cDataRow
    If pRecordFilter Then
        n = 0
        For Each dr In rows
            If Not dr.hidden Then n = n + 1
        Next dr
        visibleRowsCount = n
    Else
        visibleRowsCount = rows.count
    End If
End Property
Public Property Get recordFilter() As Boolean
    recordFilter = pRecordFilter
End Property
Public Property Get keyColumn() As Long
    keyColumn = pKeyColumn
End Property
Public Property Get keepFresh() As Boolean
    keepFresh = pKeepfresh
End Property
Public Property Get parent() As cDataSets
    Set parent = pParent
End Property
Public Property Get name() As String
    name = pName
End Property
Public Property Get rows() As Collection
    Set rows = pCollect
End Property
Public Property Get columns() As Collection
    Set columns = pCollectColumns
End Property
Public Property Get headings() As Collection
    Set headings = pHeadingRow.headings
End Property
Public Property Get where() As Range
    Set where = pWhere
End Property
Public Property Get headingRow() As cHeadingRow
    Set headingRow = pHeadingRow
End Property
Public Property Set headingRow(p As cHeadingRow)
    Set pHeadingRow = p
End Property
Public Property Get cell(rowID As Variant, sid As Variant) As cCell
    Dim dr As cDataRow
    Set dr = row(rowID)
    If Not dr Is Nothing Then Set cell = dr.cell(sid)
End Property
Public Property Get isCellTrue(rowID As Variant, sid As Variant) As Boolean
    Dim Cc As cCell, s As String
    Set Cc = cell(rowID, sid)
    isCellTrue = False
    If (Not Cc Is Nothing) Then
        Select Case LCase(Cc.toString)
            Case "yes", "y", "1", "true"
                isCellTrue = True

        End Select
    End If
    
End Property
Public Property Get Value(rowID As Variant, sid As Variant, _
            Optional complain As Boolean = True) As Variant
    On Error GoTo screwed
    Value = cell(rowID, sid).Value
    Exit Property
    
screwed:
    MsgBox ("could not get value at row " & rowID & " column " & sid & " in dataset " & name)
    Exit Property
    
End Property
Public Function letValue(p As Variant, rowID As Variant, sid As Variant) As Variant

    cell(rowID, sid).Value = p
End Function
Public Property Get toString(rowID As Variant, sid As Variant) As String
    toString = CStr(Value(rowID, sid))

End Property
Public Property Get row(rowID As Variant) As cDataRow
    If Not pisLab Then
        If VarType(rowID) <> vbInteger And VarType(rowID) <> vbLong Then
            MsgBox "Dataset " & pName & " must have labels enabled to use non-numeric labels"
            Exit Property
        End If
    End If
    Set row = exists(rowID)
End Property
Public Property Get column(sid As Variant) As cDataColumn
    Set column = pCollectColumns(sid)
End Property

Public Property Get jObject(Optional jSonConv As eJsonConv = eJsonConvPropertyNames, _
                Optional datesToIso As Boolean = False, _
                Optional includeParseTypes As Boolean = False, _
                Optional includeDataSetName As Boolean = True, _
                Optional dataSetName As String = vbNullString) As cJobject

    ' convert dataset to a JSON string
    Dim dr As cDataRow, dh As cCell, dc As cCell, cr As cJobject, ca As cJobject, d As Date, jName As String
    
    ' create serialization object
    Dim cj As cJobject
    Set cj = New cJobject
    jName = cJobName
    If dataSetName <> vbNullString Then jName = dataSetName
    
    ' so far only implemented the property names conversion
    Debug.Assert jSonConv = eJsonConvPropertyNames
    
    If includeDataSetName Then
        cj.init Nothing, pName
        Set cr = cj.add(jName).addArray
    Else
        Set cr = cj.init(Nothing).addArray
    End If
    
    For Each dr In rows
        With cr.add
            For Each dc In dr.columns
              Set dh = headings(dc.column)
              If columns(dc.column).googleType = "number" Then
                .add dh.toString, dc.Value
              
              ElseIf datesToIso And columns(dc.column).googleType = "date" Then
              
                If includeParseTypes Then
                    With .add(dh.toString)
                        .add "__type", "Date"
                        .add "iso", toISODateTime(dc.Value)
                    End With
                Else
                    .add dh.toString, toISODateTime(dc.Value)
                End If
              
              Else
               .add dh.toString, dc.toString
               
              End If
            Next dc
        End With
    Next dr
    ' return from branch where data starts
    If includeDataSetName Then
        Set jObject = cj.child(jName)
    Else
        Set jObject = cr
    End If
    
End Property
Public Function refresh(Optional rowID As Variant, Optional sid As Variant) As Variant
   ' this one can be a single cell refresh or more
    Dim dr As cDataRow
    refresh = Empty
    If IsMissing(rowID) And IsMissing(sid) Then
        For Each dr In rows
            dr.refresh
        Next dr
    ElseIf IsMissing(rowID) Then
        refresh = column(sid).refresh
    ElseIf IsMissing(sid) Then
        refresh = row(rowID).refresh
    Else
        refresh = cell(rowID, sid).refresh
    End If
End Function
Public Sub Commit(Optional p As Variant, Optional rowID As Variant, Optional sid As Variant)
   ' this one can be a single cell refresh or more
    Dim dr As cDataRow

    If IsMissing(rowID) And IsMissing(sid) Then
        For Each dr In rows
            dr.Commit p
        Next dr
    ElseIf IsMissing(rowID) Then
         column(sid).Commit p
    
    ElseIf IsMissing(sid) Then
         row(rowID).Commit p
    
    Else
        cell(rowID, sid).Commit p
    End If
End Sub

Private Function create(rp As Range, _
                Optional sn As String = vbNullString, Optional blab As Boolean = False, _
                Optional keepFresh As Boolean = False, Optional stopAtFirstEmptyRow = True, _
                Optional sKey As String = vbNullString, Optional maxDataRows As Long = 0) As cDataSet
                
    Dim dRow As cDataRow, dcol As cDataColumn, hcell As cCell, exitwhile As Boolean
    Dim topRow As Long, nRow As Long, ncol As Long, m As Long, av As Variant
    Dim rv As Variant, I As Long


    pKeepfresh = keepFresh
   
    If sn = vbNullString Then
        pName = rp.Worksheet.name
    Else
        pName = sn
    End If
    ' take the whle thing or a maximum no of rows
    m = rp.rows.count - 1
    If maxDataRows > 0 And maxDataRows < m Then m = maxDataRows
    If (m > 0) Then
        Set pWhere = rp.Offset(1).Resize(m, headings.count)
    End If
    
    pName = makeKey(pName)
    pisLab = blab
    If pisLab Then
        If sKey = vbNullString Then
            pKeyColumn = 1
        Else
            pKeyColumn = headingRow.exists(sKey).column
        End If
    End If
    
    ' create the columns
    ncol = 0
    For Each hcell In headings
        Set dcol = New cDataColumn
        ncol = ncol + 1
        dcol.create Me, hcell, ncol
        pCollectColumns.add dcol, makeKey(hcell.Value)

    Next hcell
    ' get the shape of a blank delimited table
    If (m > 0) Then

        If stopAtFirstEmptyRow Then
            Set pWhere = toEmptyRow(pWhere)
        End If
        ' read in the whole lot at once
        If Not pWhere Is Nothing Then
          ' excel doesnt return an array if range size is 1.
          av = pWhere.Value
          If IsArray(av) Then
            rv = av
          Else
            ReDim rv(1, 1)
            rv(LBound(rv, 1), LBound(rv, 2)) = av
          End If

          
          For I = LBound(rv, 1) To UBound(rv, 1)
              Set dRow = New cDataRow
              dRow.create Me, pWhere.Offset(I - LBound(rv, 1)).Resize(1), I + 1 - LBound(rv, 1), rv
              If pisLab Then
                  If exists(makeKey(dRow.cell(pKeyColumn).Value)) Is Nothing Then
                      pCollect.add dRow, makeKey(dRow.cell(pKeyColumn).Value)
                  Else
                      MsgBox ("Could not add duplicate key " + dRow.cell(pKeyColumn).toString + _
                              " in data set " + pName + " column " + headings(pKeyColumn).toString + _
                              " at " + SAd(dRow.where))
                  End If
              Else
                  pCollect.add dRow
              End If
              For Each dcol In pCollectColumns
                  dcol.rows.add dRow.cell(dcol.column)
              Next dcol
      
          Next I
        End If
    Else
        Set pWhere = Nothing
    End If
 
    Set create = Me
End Function


Public Function populateJSON(job As cJobject, rstart As Range, _
        Optional wClearContents As Boolean = True, _
        Optional stopAtFirstEmptyRow As Boolean = True) As cDataSet
        
    Dim joRow As cJobject, joCol As cJobject, rm As Range
    ' take a json object and apply it to a range
    
    If job Is Nothing Then
        MsgBox "input json object not defined"
        
    ElseIf Not job.isArrayRoot Then
        MsgBox job.key & " must be a rowise array object"

    Else
    
        If wClearContents Then
            rstart.Worksheet.Cells.ClearContents
        End If
        
        For Each joRow In job.children
            For Each joCol In joRow.children
                With joCol
                    Set rm = rstart.Cells(joRow.childIndex + 1, .childIndex)
                    rm.Value = .Value
                    rstart.Cells(1, .childIndex).Value = .key
                End With
            Next joCol
        Next joRow
        ' now do a normal populate
        
        Set populateJSON = populateData(rstart.Resize(rm.row - rstart.row + 1, _
                rm.column - rstart.column + 1), _
            , , , , , , , , stopAtFirstEmptyRow)
    
    End If
    
End Function
Public Function populateGoogleWire(sWire As String, rstart As Range, _
        Optional wClearContents As Boolean = True, _
        Optional stopAtFirstEmptyRow As Boolean = True) As cDataSet
    Dim jo As cJobject, s As String, p As Long, e As Long, joc As cJobject, jc As cJobject, jr As cJobject, cr As cJobject
    Dim jt As cJobject, v As Variant, aString As Variant, newWire As Boolean
    Dim jStart As String
    
    jStart = "table:"
    p = InStr(1, sWire, jStart)
    'there have been multiple versions of wire ...
    If p = 0 Then
        'try the other one
        jStart = q & ("table") & q & ":"
        p = InStr(1, sWire, jStart)
        newWire = True
    End If


    ' take a google wire string and apply it to a range
    p = InStr(1, sWire, jStart)
    e = Len(sWire) - 1

    If p <= 0 Or e <= 0 Or p > e Then
        MsgBox " did not find table definition data"
        Exit Function
    End If
    
    If Mid(sWire, e, 2) <> ");" Then
        MsgBox ("incomplete google wire message")
        Exit Function
    End If
    ' encode the 'table:' part to a cjobject
    p = p + Len(jStart)
    s = "{" & jStart & "[" & Mid(sWire, p, e - p - 1) & "]}"
    ' google protocol doesnt have quotes round the key of key value pairs,
    ' and i also need to convert date from javascript syntax new Date()
    s = rxReplace("(new\sDate)(\()(\d+)(,)(\d+)(,)(\d+)(\))", s, "'$3/$5/$7'")
    If Not newWire Then s = rxReplace("(\w+)(:)", s, "'$1':")
    ' this should return an object as follow
    ' {table:[ cols:[c:[{id:x,label:x,pattern:x,type:x}] , rows:[ c:[(v:x,f:x}] ]}
    Set jo = New cJobject
    Set jo = jo.deSerialize(s, eDeserializeGoogleWire)
    'need to convert that to cdataset:[{label:"x",,,},{},,,]
    'column labels can be extracted then from jo.child("1.cols.n.label")  .. where 'n'= column number

    Set joc = New cJobject
    Set cr = joc.init(Nothing, cJobName).addArray
    For Each jr In jo.child("1.rows").children
        With cr.add
            For Each jc In jo.child("1.cols").children
                Set jt = jr.child("c").children(jc.childIndex)
                ' sometimes there is no "v" if a null value
                If Not jt.childExists("v") Is Nothing Then
                    Set jt = jt.child("v")
                End If
                    
                If jc.child("type").toString = "date" Then
                    ' month starts at zero in javascript
                    aString = Split(jt.toString, "/")
                    If LBound(aString) <= UBound(aString) Then
                        If UBound(aString) - LBound(aString) <> 2 Then
                            Debug.Print jt.fullKey, jt.toString & " should have been a date"
                            v = jt.Value
                        Else
                            v = DateSerial(CInt(aString(0)), CInt(aString(1)) + 1, CInt(aString(2)))
                        End If
                    Else
                       v = Empty
                    End If
                Else
                    v = jt.Value
                End If
                ''Debug.Print jc.fullKey, jc.Child("type").toString, _
                 ''   jc.Child("id").toString, jt.toString, jc.Child("label").toString, v
                .add jc.child("label").toString, v
            Next jc
        End With
    Next jr
    If joc.hasChildren Then
        If joc.child(1).hasChildren Then
            Set populateGoogleWire = populateJSON(joc, rstart, wClearContents, stopAtFirstEmptyRow)
            cr.tearDown
            joc.tearDown
            Exit Function
        End If
    End If
    MsgBox ("there was no actionable data - check that your google doc types reflect the data in the cells")
    

End Function
Public Function rePopulate() As cDataSet
    ' this repopulates and creates a new cdataset
    Dim newSet As cDataSet, s As String
    If pKeyColumn > 0 Then
     s = headingRow.headings(pKeyColumn)
    End If
    Set newSet = New cDataSet
    ' delete it from parent collection
    If Not pParent Is Nothing Then
        pParent.dataSets.remove (pName)
    End If
    ' recreate it with the same parameters as before
    Set rePopulate = newSet.populateData(firstCell(headingRow.where), , pName, _
            pisLab, , , pLikely, s, , , pRecordFilter)
    
End Function
Private Sub class_initialize()
    Set pHeadingRow = New cHeadingRow
    Set pCollect = New Collection
    Set pCollectColumns = New Collection
End Sub
Public Function load(sheetName As String, _
            Optional parameterBlock As String = vbNullString) As cDataSet
            
    ' this is just a quick populateData with most common parameters
    Set load = populateData(wholeSheet(sheetName), , , parameterBlock <> vbNullString, parameterBlock, , True)
    
End Function
Public Function populateData(Optional rstart As Range = Nothing, Optional keepFresh As Boolean = False, Optional sn As String = vbNullString, _
        Optional blab As Boolean = False, Optional blockstarts As String = vbNullString, _
        Optional ps As cDataSets, _
        Optional bLikely As Boolean = False, _
        Optional sKey As String = vbNullString, _
        Optional maxDataRows As Long = 0, _
        Optional stopAtFirstEmptyRow As Boolean = True, _
        Optional brecordFilter As Boolean = False) As cDataSet
    
    Dim blockName As String, rp As Range, rInput As Range
    pRecordFilter = brecordFilter
    
    pLikely = bLikely
    
    If rstart Is Nothing Then
        Set rInput = getLikelyColumnRange
    ElseIf bLikely Then
        Set rInput = getLikelyColumnRange(rstart.Worksheet)
    Else
        Set rInput = rstart
    End If
    ' this is about taking a block from the range rather than the whole range
    blockName = makeKey(sn)
    If blockstarts <> vbNullString Then
        Set rp = cleanFind(blockstarts, rInput.Resize(, 1), True, True)
        If rp Is Nothing Then
            Exit Function
        End If
        If blockName = vbNullString Then
            blockName = makeKey(blockstarts)
        End If
        If (bLikely Or stopAtFirstEmptyRow) Then
            Set rp = toEmptyBox(rp.Resize(rInput.rows.count - rp.row + 1, rInput.columns.count))
        Else
            Set rp = toEmptyCol(rp.Resize(rInput.rows.count - rp.row + 1, rInput.columns.count))
        End If
    Else
        Set rp = rInput
    End If

    
    ' set up headings
    pHeadingRow.create Me, rp.Resize(1)
    ' create dataset

    create rp, blockName, blab, keepFresh, stopAtFirstEmptyRow, sKey, maxDataRows
    Set populateData = Me
    
    Set pParent = ps
    If Not pParent Is Nothing Then pParent.dataSets.add Me, pName
End Function
Public Property Get values(Optional bIncludeKey = False) As Variant
    Dim dr As cDataRow
    ReDim a(1 To visibleRowsCount) As Variant
    For Each dr In rows
        If Not dr.hidden Then a(dr.row) = dr.values(bIncludeKey)
    Next dr
    values = a
End Property
Public Function find(v As Variant, Optional bIncludeKey = False) As cCell
    Dim dr As cDataRow, Cc As cCell
    For Each dr In rows
        Set Cc = dr.find(v, bIncludeKey)
        If Not Cc Is Nothing Then
            Set find = Cc
            Exit Function
        End If
    Next dr
End Function
Public Function max(Optional bIncludeKey = False) As Variant
    max = Application.WorksheetFunction.max(values(bIncludeKey))
End Function
Public Function min(Optional bIncludeKey = False) As Variant
    min = Application.WorksheetFunction.min(values(bIncludeKey))
End Function
Public Function flushDirtyColumns()
    Dim dc As cDataColumn
    For Each dc In columns
        If dc.dirty Then
            dc.Commit
            dc.dirty = False
        End If
    Next dc
End Function
Public Function bigCommit(Optional rout As Range = Nothing, Optional clearWs As Boolean = False, _
                    Optional headOrderArray As Variant = Empty, _
                    Optional filterHead As String = vbNullString, Optional filterValue As Variant = Empty, _
                    Optional filterApproximate As Boolean = True, _
                    Optional outputHeadings As Boolean = True, Optional filterUpperValue) As Long
                    
    ' this one does a quick bulk commit
    Dim rTarget As Range, headOrder As Collection, hcell As cCell, nHeads As Long, s As String, j As Long
    Dim dArray As Variant, dr As cDataRow, n As Long, I As Long, filterCol As Long, fArray As Variant
    ' get start of where we are putting this to
    If rout Is Nothing Then
        Set rTarget = headingRow.where
    Else
        Set rTarget = rout
    End If
    
    'possible that we clear the target worksheet frst
    If clearWs Then rTarget.Worksheet.Cells.ClearContents
      
    ' its possible to specify only a subset of columns, or reorder them
    If IsEmpty(headOrderArray) Then
    ' all columns are required
        Set headOrder = headings
    Else
    ' a subset or reordering is required
        Set headOrder = New Collection
        For nHeads = LBound(headOrderArray) To UBound(headOrderArray)
            Set hcell = headingRow.exists(CStr(headOrderArray(nHeads)))
            If Not hcell Is Nothing Then
                headOrder.add hcell, makeKey(hcell.Value)
            Else
                s = s & headOrderArray(nHeads) & ","
            End If
        Next nHeads
        If Len(s) > 0 Then
            MsgBox "These fields do not exist " & s
        End If
    End If
    ' is there a filter ?
    filterCol = 0
    If filterHead <> vbNullString Then
        Set hcell = headingRow.exists(filterHead)
        If hcell Is Nothing Then
            MsgBox (filterHead & " does not exist to filter on..ignoring")
        Else
            filterCol = hcell.column
        End If
    End If
    ' now create the array
    If headOrder.count > 0 Then
        n = 0
        If outputHeadings Then n = 1
            
        ReDim dArray(1 To rows.count + n, 1 To headOrder.count)
        Set rTarget = rTarget.Resize(pCollect.count + n, headOrder.count)
        I = 0
        If outputHeadings Then
            ' headings
            For Each hcell In headOrder
                I = I + 1
                dArray(1, I) = hcell.Value
            Next hcell
        End If
        
        For Each dr In pCollect
            If filterOk(dr, filterCol, filterValue, filterApproximate, filterUpperValue) Then
                If Not recordFilter Or Not dr.hidden Then
                    n = n + 1
                    I = 0
                    For Each hcell In headOrder
                        I = I + 1
                        dArray(n, I) = dr.cell(hcell.column).Value
                    Next hcell
                End If
            End If
        Next dr
        If filterCol <> 0 And n <> pCollect.count + 1 Then
            Set rTarget = rTarget.Resize(n, headOrder.count)
            ReDim fArray(1 To n, 1 To headOrder.count)
            For I = 1 To n
                For j = 1 To headOrder.count
                    fArray(I, j) = dArray(I, j)
                Next j
            Next I
            dArray = Empty
            rTarget = fArray
        Else
            rTarget = dArray
        End If
    End If
    bigCommit = n
    
End Function
Private Function filterOk(dr As cDataRow, filterCol As Long, _
        filterValue As Variant, filterApproximate As Boolean, Optional filterUpperValue As Variant) As Boolean
    Dim filterUpper As Variant
    ' added capability for ranged filter
    If (IsMissing(filterUpperValue)) Then
        filterUpper = filterValue
    Else
        filterUpper = filterUpperValue
    End If
    ' note that filterApproximate is incompatible with a filter range
    ' you should set filterapproximate to false for the uppervalue to have an effect
    filterOk = True
    If filterCol <> 0 Then
        With dr.cell(filterCol)
            If filterApproximate Then
                filterOk = (.Value Like filterValue)
            Else
                filterOk = (.Value <= filterUpper And .Value >= filterValue)
            End If
        End With
    End If
End Function

Private Function exists(sid As Variant) As cDataRow
    On Error GoTo handle
    Set exists = pCollect(sid)
    Exit Function
handle:
    Set exists = Nothing
End Function
Public Sub tearDown()
    ' clean up
    Dim dr As cDataRow, dc As cDataColumn
    
    If Not pCollect Is Nothing Then
        For Each dr In rows
            dr.tearDown
        Next dr
        Set pCollect = Nothing
    End If
    If Not pHeadingRow Is Nothing Then
        pHeadingRow.tearDown
        Set pHeadingRow = Nothing
    End If
    If Not pCollectColumns Is Nothing Then
        For Each dc In columns
            dc.tearDown
        Next dc
        Set pCollectColumns = Nothing
    End If
    
    
    Set pParent = Nothing
End Sub






Attribute VB_Name = "cDataSets"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:45 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cDataSets.cls
Option Explicit
' v2.01
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
' CdataSets
Private pCollect As Collection
Private pName As String
Public Property Get dataSets() As Collection
    Set dataSets = pCollect
End Property
Public Property Get dataSet(sn As String, Optional complain As Boolean = False) As cDataSet
    Dim ds As cDataSet
    Set ds = exists(sn)
    If ds Is Nothing Then
        If complain Then MsgBox ("data set " & sn & " doesnt exist")
    End If
    Set dataSet = ds
End Property

Public Property Get name() As String
    name = pName
End Property
Public Function create(Optional sname As String = "DataSets") As cDataSets
    pName = sname

    Set create = Me
End Function
Public Function init(Optional rInput As Range = Nothing, Optional keepFresh As Boolean = False, _
                Optional sn As String = vbNullString, _
                Optional blab As Boolean = False, Optional blockstarts As String, _
                Optional bLikely As Boolean = False, _
                Optional sKey As String = vbNullString, _
                Optional respectFilter As Boolean = False) As cDataSet
    Dim ds As cDataSet
    Set ds = New cDataSet
    With ds
        .populateData rInput, keepFresh, sn, blab, blockstarts, Me, bLikely, sKey, , , respectFilter
    End With
    
    ''pCollect.add ds, ds.name
    Set init = ds
End Function
Private Function exists(sid As Variant) As cDataSet
    On Error GoTo handle
    Set exists = pCollect(sid)
    Exit Function
handle:
    Set exists = Nothing
End Function

Public Sub tearDown()
    ' clean up
    Dim ds As cDataSet
    If Not pCollect Is Nothing Then
        For Each ds In dataSets
            ds.tearDown
        Next ds
        Set pCollect = Nothing
    End If
End Sub

Private Sub class_initialize()
    Set pCollect = New Collection
End Sub






Attribute VB_Name = "cHeadingRow"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:48 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cHeadingRow.cls
' a collection of Cells that contain the headings associated with a dataset
' v2.03 - 3414216
Option Explicit
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pDataRow As cDataRow
Public Property Get parent() As cDataSet
    Set parent = pDataRow.parent
End Property
Public Property Get dataRow() As cDataRow
    Set dataRow = pDataRow
End Property
Public Property Get headings() As Collection
    Set headings = pDataRow.columns
End Property
Public Property Get where() As Range
    Set where = pDataRow.where
End Property
Public Function create(dset As cDataSet, rHeading As Range, Optional keepFresh As Boolean = False) As cHeadingRow
    Dim rCell As Range, hcell As cCell, n As Long, dr As cDataRow

    With pDataRow
        .create dset, rHeading, 0, keepFresh
    End With
    Set create = Me
End Function
Public Function exists(s As String) As cCell
    If headings.count > 0 Then
        On Error GoTo handle
        Set exists = headings(makeKey(s))
        Exit Function
    End If
handle:
    Set exists = Nothing
End Function
Public Property Get headingList() As String
    ' return a comma separated list of the headings
    Dim t As cStringChunker, Cc As cCell
    Set t = New cStringChunker
    For Each Cc In headings
        t.add Cc.toString & ","
    Next Cc
    ' remove final comma if there is one
    headingList = t.chop.content
    Set t = Nothing
End Property

Public Function validate(complain As Boolean, ParamArray args() As Variant) As Boolean
    Dim I As Long, s As String
    s = ""
    For I = LBound(args) To UBound(args)
        If exists(CStr(args(I))) Is Nothing Then
            s = s & args(I) & ","
        End If
    Next I
    If Len(s) = 0 Then
        validate = True
    Else
        s = Left(s, Len(s) - 1)
        If complain Then
            MsgBox "The following required columns are missing from dataset " & parent.name & ":" & s
        End If
    End If
End Function
Public Sub tearDown()
    ' clean up
    pDataRow.tearDown
    Set pDataRow = Nothing
End Sub

Private Sub class_initialize()
    Set pDataRow = New cDataRow
End Sub


Attribute VB_Name = "cHeadingRow1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:48 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414216/raw/cHeadingRow.cls
' a collection of Cells that contain the headings associated with a dataset
' v2.03 - 3414216
Option Explicit
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pDataRow As cDataRow
Public Property Get parent() As cDataSet
    Set parent = pDataRow.parent
End Property
Public Property Get dataRow() As cDataRow
    Set dataRow = pDataRow
End Property
Public Property Get headings() As Collection
    Set headings = pDataRow.columns
End Property
Public Property Get where() As Range
    Set where = pDataRow.where
End Property
Public Function create(dset As cDataSet, rHeading As Range, Optional keepFresh As Boolean = False) As cHeadingRow
    Dim rCell As Range, hcell As cCell, n As Long, dr As cDataRow

    With pDataRow
        .create dset, rHeading, 0, keepFresh
    End With
    Set create = Me
End Function
Public Function exists(s As String) As cCell
    If headings.count > 0 Then
        On Error GoTo handle
        Set exists = headings(makeKey(s))
        Exit Function
    End If
handle:
    Set exists = Nothing
End Function
Public Property Get headingList() As String
    ' return a comma separated list of the headings
    Dim t As cStringChunker, Cc As cCell
    Set t = New cStringChunker
    For Each Cc In headings
        t.add Cc.toString & ","
    Next Cc
    ' remove final comma if there is one
    headingList = t.chop.content
    Set t = Nothing
End Property

Public Function validate(complain As Boolean, ParamArray args() As Variant) As Boolean
    Dim I As Long, s As String
    s = ""
    For I = LBound(args) To UBound(args)
        If exists(CStr(args(I))) Is Nothing Then
            s = s & args(I) & ","
        End If
    Next I
    If Len(s) = 0 Then
        validate = True
    Else
        s = Left(s, Len(s) - 1)
        If complain Then
            MsgBox "The following required columns are missing from dataset " & parent.name & ":" & s
        End If
    End If
End Function
Public Sub tearDown()
    ' clean up
    pDataRow.tearDown
    Set pDataRow = Nothing
End Sub

Private Sub class_initialize()
    Set pDataRow = New cDataRow
End Sub


Attribute VB_Name = "cJobject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:49 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414365/raw
' this is used for object serliazation. Its just basic JSON with only string data types catered for
Option Explicit
' v2.19 3414365
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pParent As cJobject
Private pValue As Variant
Private pKey As String
Private pChildren As Collection
Private pValid As Boolean
Private pIndex As Long
Const cNull = "_null"
Const croot = "_deserialization"
Private pFake As Boolean            ' not a real key
Private pisArrayRoot                ' this is the root of an array
Private pPointer As Long            ' this one is used for deserializing string
Private pJstring As String          ' so is this
Private pWhatNext As String
Private pActive As Boolean
Private pJtype As eDeserializeType
Private pBacktrack As cJobject        ' used in parsing
Public Enum eDeserializeType
    eDeserializeNormal
    eDeserializeGoogleWire
End Enum
' this is for treeview - i couldnt find it anywhere
Public Enum tvw
    tvwFirst = 0
    tvwLast = 1
    tvwNext = 2
    tvwPrevious = 3
    tvwChild = 4
End Enum
Public Property Get backtrack() As cJobject
    Set backtrack = pBacktrack
End Property
Public Property Set backtrack(back As cJobject)
    Set pBacktrack = back
End Property

Public Property Get self() As cJobject
    Set self = Me
End Property
Public Property Get isValid() As Boolean
    isValid = pValid
End Property
Public Property Let setValid(good As Boolean)
    pValid = good
End Property
Public Property Get jString() As String
    jString = pJstring
End Property
Public Property Get fake() As Boolean
    fake = pFake
    If Not pParent Is Nothing Then
        fake = fake And pParent.isArrayRoot
    End If
End Property
Public Property Get childIndex() As Long
    childIndex = pIndex
End Property
Public Property Let childIndex(p As Long)
    pIndex = p
End Property
Public Property Get isArrayRoot() As Boolean
    isArrayRoot = pisArrayRoot
End Property
Public Property Get isArrayMember() As Boolean
    If Not pParent Is Nothing Then
        isArrayMember = pParent.isArrayRoot
    Else
        isArrayMember = False
    End If
End Property
Public Property Let isArrayRoot(p As Boolean)
    pisArrayRoot = p
End Property

Public Property Get parent() As cJobject
    Set parent = pParent
End Property
Public Property Set parent(p As cJobject)
    Set pParent = p
End Property
Public Property Get isRoot() As Boolean
    isRoot = (root Is Me)
End Property
Public Sub clearParent()
    Set pParent = Nothing
End Sub
Public Property Get root() As cJobject
    Dim jo As cJobject
    ' the root is the object with no parent
    Set jo = Me
    While Not jo.parent Is Nothing
        Set jo = jo.parent
    Wend
    Set root = jo
End Property
Public Property Get key() As String
    key = pKey
End Property
Public Property Get Value() As Variant
    Value = pValue
End Property
Public Function cValue(Optional childName As String = vbNullString) As Variant
    If childName = vbNullString Then
        cValue = Value
    Else
        cValue = child(childName).Value
    End If
End Function
Public Function toString(Optional childName As String = vbNullString) As String
   
    toString = CStr(cValue(childName))

End Function
Public Property Let Value(p As Variant)
    pValue = p
End Property

Public Property Get children() As Collection
    Set children = pChildren
End Property
Public Property Set children(p As Collection)
    Set pChildren = p
End Property
Public Property Get hasChildren() As Boolean
    hasChildren = False
    If Not pChildren Is Nothing Then
        hasChildren = (pChildren.count > 0)
    End If
End Property
Public Function deleteChild(childName As String) As cJobject
    ' this deletes a child from the children collection
    Dim job As cJobject, Target As cJobject
    Set Target = childExists(childName)
    
    If (Not Target Is Nothing) Then
        children.remove Target.childIndex
        For Each job In children
            If job.childIndex > Target.childIndex Then
                job.childIndex = job.childIndex - 1
            End If
        Next job
        Target.tearDown
       
    End If
    Set deleteChild = Me
End Function
Public Function valueIndex(v As Variant) As Long
    ' check to see if h is in the cj array
    Dim cj As cJobject
    valueIndex = 0
    For Each cj In children
        If cj.Value = v Then
            valueIndex = cj.childIndex
            Exit Function
        End If
    Next cj
    
End Function

Public Function toTreeView(tr As Object, Optional bEnableCheckBoxes As Boolean = False) As Object
    ' this populates a treeview with a cJobject
    tr.CheckBoxes = bEnableCheckBoxes
    Set toTreeView = treeViewPopulate(tr, Me)
    
End Function

Private Function treeViewPopulate(tr As Object, cj As cJobject, Optional parent As cJobject = Nothing)
    Dim c As cJobject, s As String
    s = vbNullString
    If cj.hasChildren Then
        s = cj.key
    Else
        s = cj.key + " : " & cj.toString
    End If
    If (Not parent Is Nothing) Then
        tr.Nodes.add parent.fullKey, tvwChild, cj.fullKey, s
    Else
        tr.Nodes.add(, , cj.fullKey, cj.key).Expanded = True
    End If
    For Each c In cj.children
        treeViewPopulate tr, c, cj
    Next c
    Set treeViewPopulate = tr
    
End Function
Public Function init(p As cJobject, Optional k As String = cNull, Optional v As Variant = Empty) As cJobject
    Set pParent = p
    Set pBacktrack = p
    pFake = (k = cNull)
    If pFake Then
        pKey = CStr(pIndex)
    Else
        pKey = k
    End If

    If Not pParent Is Nothing Then
        If Not child(pKey) Is Nothing Then
            MsgBox ("Programming error " & pKey & " is a duplicate object")
            pValid = False
        Else
            pIndex = pParent.children.count + 1
            If pFake Then
                pKey = CStr(pIndex)
            End If
            pParent.children.add Me, pKey
        End If
    End If
    

    pValue = v

    Set init = Me

End Function

Public Function child(s As String) As cJobject
    Dim aString As Variant, n As Long, jo As cJobject, jc  As cJobject
    
    If Len(s) > 0 Then
        aString = Split(s, ".")
        Set jo = Me
        ' we take something x.y.z and find the child
        For n = LBound(aString) To UBound(aString)
            Set jc = jo.childExists(CStr(aString(n)))
            Set jo = jc
            If jo Is Nothing Then Exit For
        Next n
    End If
    Set child = jo

End Function
Public Function insert(Optional s As String = cNull, Optional v As Variant = Empty) As cJobject
    Dim joNew As cJobject, sk As String
    Set joNew = childExists(s)

    If joNew Is Nothing Then
        ' if its an array, use the child index as the name if there is no name given
        If pisArrayRoot And s = cNull Then
            sk = cNull

        Else
            sk = s
        End If
        
        Set joNew = New cJobject
        joNew.init Me, sk, v
    Else
        If Not IsEmpty(v) Then joNew.Value = v
    End If
    Set insert = joNew
End Function
Public Function add(Optional k As String = cNull, Optional v As Variant = Empty) As cJobject
    Dim aString As Variant, n As Long, jo As cJobject, jc  As cJobject
    aString = Split(k, ".")
    Set jo = Me
    ' we take something x.y.z and add z with parent of y
    For n = LBound(aString) To UBound(aString)
        Set jc = jo.insert(CStr(aString(n)), v)
        Set jo = jc
    Next n
    Set add = jo
End Function
Public Function addArray() As cJobject
    pisArrayRoot = True
    Set addArray = Me
End Function
' check if this childExists in current children
Public Function childExists(s As String) As cJobject
    On Error GoTo handle
    Set childExists = pChildren(s)
    Exit Function
handle:
    Set childExists = Nothing
End Function
Private Function unSplitToString(a As Variant, delim As String, _
    Optional startAt As Long = -999, Optional howMany As Long = -999, _
    Optional startAtEnd As Boolean = False) As String
    Dim s As String, c As cStringChunker, I As Long

    ' sort out possible boundaries
    If startAt = -999 Then startAt = LBound(a)
    If howMany = -999 Then howMany = UBound(a) - startAt + 1
    If startAtEnd Then startAt = UBound(a) - howMany + 1
    ' will return nullstring on outside bounds
    If startAt < LBound(a) Or howMany + startAt - 1 > UBound(a) Then
        unSplitToString = vbNullString
    Else
        Set c = New cStringChunker
        ' combine and convert to string
        For I = startAt To startAt + howMany - 1
            c.add(CStr(a(I))).add delim
        Next I
        unSplitToString = c.chopIf(delim).content
        Set c = Nothing
    End If
    End Function

Public Function find(s As String) As cJobject
    Dim jo As cJobject, f As cJobject, k As String, fk As String, possible As Boolean
    k = makeKey(s)
    fk = makeKey(fullKey(False))
    
    ' need to deal with find("x.y.z") as well as simple find("x")
    Dim kk As String, a As Variant, b As Variant
    b = Split(fk, ".")
    a = Split(k, ".")
    kk = unSplitToString(b, ".", , arrayLength(a), True)
    
    'now the fullkey is the same number of items as the key to compare it against
    If kk = k Then
        Set f = Me
    ElseIf hasChildren Then
        For Each jo In pChildren
            Set f = jo.find(s)
            If Not f Is Nothing Then Exit For
        Next jo
    End If
    Set find = f
End Function
Public Function convertToArray() As cJobject
    ' here's where have something like {x:{a:'x',b:'y'}} and we need to make {x:[{a:'x',b:'y'}]}
    Dim kids As Collection, newParent As cJobject, job As cJobject, newRoot As cJobject, I As Long
    
    ' if its got no kids but has a value then we need to assign that value
    
    If Not hasChildren Then
        addArray
        If Not IsEmpty(Value) Then
            ' make a space for the value
            add , Value
        Else
            ' do nothing
        End If
        Set convertToArray = Me
    Else
        ' we need to make a space for the object and for each child
        Set kids = children
        ' remove current item
        parent.children.remove (key)
        ' reset child indices
        I = 0
        For Each job In parent.children
            I = I + 1
            job.childIndex = I
        Next job
        
        ' add a new version of me
        Set newRoot = parent.add(key).addArray

        ' move over contents
        With newRoot.add
            For Each job In kids
                .add job.key, job.Value
            Next job
        End With
        
        Set convertToArray = newRoot
    End If

    
End Function
Public Function fullKey(Optional includeRoot As Boolean = True) As String
    ' reconstruct full key to parent
    Dim s As String, jo As cJobject
    Set jo = Me
    While Not jo Is Nothing
        If (Not jo.isRoot) Or includeRoot Then s = jo.key & "." & s
        Set jo = jo.parent
    Wend
    If Len(s) > 0 Then s = Left(s, Len(s) - 1)
    fullKey = s
    
End Function

Public Function findByValue(x As Variant) As cJobject
    Dim job As cJobject, result As cJobject
    
    If Value = x Then
        Set findByValue = Me
        Exit Function
    
    Else
        For Each job In children
            Set result = job.findByValue(x)
            If Not result Is Nothing Then
                Set findByValue = result
                Exit Function
            End If
        Next job
    End If
    
End Function
Public Function hasKey() As Boolean
    hasKey = pKey <> vbNullString And _
        pKey <> cNull And _
        (hasChildren Or Not isArrayMember) And Not pFake
End Function
Public Function needsCurly() As Boolean
    needsCurly = hasKey
    If hasChildren Then
        needsCurly = pChildren(1).hasKey
    End If
    
End Function

Public Function needsSquare() As Boolean

    needsSquare = isArrayRoot

End Function
Public Function stringify(Optional blf As Boolean) As String
    stringify = serialize(blf)
End Function
Public Function serialize(Optional blf As Boolean = False) As String
' make a JSON string of this structure
  Dim t As cStringChunker
  
  Set t = New cStringChunker
  If Not fake Then t.add "{"
  recurseSerialize Me, t, blf
  If Not fake Then t.add "}"

  serialize = t.content
End Function
Public Property Get needsIndent() As Boolean
    needsIndent = needsCurly Or needsSquare
End Property
Public Function recurseSerialize(job As cJobject, Optional soFar As cStringChunker = Nothing, _
                Optional blf As Boolean = False) As cStringChunker
  Dim s As String, jo As cJobject, t As cStringChunker
  Static indent As Long
  If indent = 0 Then indent = 3
  If soFar Is Nothing Then
    Set t = New cStringChunker
  Else
    Set t = soFar
  End If

  If blf And (job.hasKey Or job.needsCurly) Then t.add Space(indent)
  
  If job.hasKey Then
    t.add(quote(job.key)).add (":")
  End If
  
  If Not (job.hasChildren Or job.isArrayRoot) Then
    If blf And Not job.hasKey Then s = s & Space(indent)
    If (VarType(job.Value) <> vbLong And _
        VarType(job.Value) <> vbBoolean And _
        VarType(job.Value) <> vbInteger And _
        VarType(job.Value) <> vbDouble And Not IsEmpty(job.Value)) _
        Then
        t.add quote(CStr(escapeify(job.Value)))
    Else
        If Not IsEmpty(job.Value) Then
            t.add LCase(job.toString)
        Else
            t.add "null"
        End If
    End If
        
  Else
    ' arrays need squares
    
    If job.needsSquare Then t.add "["
    If job.needsCurly Then t.add "{"
    If blf And Not job.isArrayRoot Then t.add vbLf
    If job.needsIndent Then
        indent = indent + 3
    End If
    
    For Each jo In job.children
      recurseSerialize(jo, t, blf).add (",")
      If blf Then t.add (vbLf)
    Next jo
    
    ' get rid of trailing comma
    t.chopWhile(" ").chopIf(vbLf).chopIf (",")

    
    If job.needsIndent Then
        indent = indent - 3
        If blf Then t.add vbLf
    End If
    If blf Then t.add Space(indent)
    If job.needsCurly Then t.add "}"
    If job.needsSquare Then t.add " ]"
    
  End If
  Set recurseSerialize = t
End Function

Public Property Get longestFullKey() As Long
    longestFullKey = clongestFullKey(root)
End Property
Public Function clone() As cJobject
    Dim cj As cJobject
    Set cj = New cJobject
    Set cj = cj.init(Nothing).append(Me).children(1)
    cj.clearParent
    Set clone = cj
End Function
Public Function merge(mergeThisIntoMe As cJobject) As cJobject
    ' merge this cjobject with another
    ' items in merged with are replaced with items in Me
    Dim cj As cJobject, p As cJobject
    
    Set p = Me.find(mergeThisIntoMe.fullKey(False))
    
    If p Is Nothing Then
    ' i dont have it yet
        Set p = Me.append(mergeThisIntoMe)
    Else
    ' actually i do have it already
        If p.isArrayRoot Then
            ' but its an array - i need to get rid of it
            Set p = p.remove
            Set p = p.append(mergeThisIntoMe)
        Else
            p.Value = mergeThisIntoMe.Value
        End If
    End If
    ' now the other childreb tio merge in
    For Each cj In mergeThisIntoMe.children
       p.merge cj
    Next cj
    Set merge = Me

End Function
Public Function remove() As cJobject
    ' removes a branch
    Dim cj As cJobject, p As cJobject, I As Long
    
    Debug.Assert Not parent Is Nothing
    Debug.Assert parent.hasChildren
    
    parent.children.remove childIndex
    ' fix the childindices
    I = 0
    For Each cj In parent.children
        I = I + 1
        cj.childIndex = I
    Next cj
    Set remove = parent

End Function
Public Function append(appendThisToMe As cJobject) As cJobject
    ' append another object to me
    Dim cj As cJobject, p As cJobject

    If appendThisToMe.parent Is Nothing Then
        Set p = Me.add(appendThisToMe.key, appendThisToMe.Value)
    
    ElseIf Not appendThisToMe.fake Then
        Set p = Me.add(appendThisToMe.key, appendThisToMe.Value)
    
    Else
        Set p = Me.add(, appendThisToMe.Value)
    End If
    
    If appendThisToMe.isArrayRoot Then p.addArray
    For Each cj In appendThisToMe.children
       p.append cj
    Next cj
    Set append = Me
End Function
Public Property Get depth(Optional l As Long = 0) As Long
    Dim jo As cJobject
    l = l + 1
    For Each jo In pChildren
        l = jo.depth(l)
    Next jo
    depth = l
End Property
Private Function clongestFullKey(job As cJobject, Optional soFar As Long = 0) As Long
    Dim jo As cJobject
    Dim l As Long
    l = Len(job.fullKey)
    If l < soFar Then l = soFar
    If Not job.children Is Nothing Then
        For Each jo In job.children
            l = clongestFullKey(jo, l)
        Next jo
    End If
    clongestFullKey = l
End Function
Public Property Get formatData(Optional bDebug As Boolean = False) As String
    formatData = cformatdata(root, , bDebug)
End Property
Private Function cformatdata(job As cJobject, Optional soFar As String = "", Optional bDebug As Boolean = False) As String
    Dim jo As cJobject, ji As cJobject
    Dim s As String
    s = soFar

        s = s & itemFormat(job, bDebug)
        If job.hasChildren Then
            For Each ji In job.children
                s = cformatdata(ji, s, bDebug)
            Next ji
        End If


    cformatdata = s
End Function
Private Function itemFormat(jo As cJobject, Optional bDebug As Boolean = False) As String
    Dim s As String
    s = jo.fullKey & Space(longestFullKey + 4 - Len(jo.fullKey)) _
            & CStr(jo.Value)
    If bDebug Then
        s = s + "("
        s = s & "debug: Haskey :" & jo.hasKey & " NeedsCurly :" & jo.needsCurly & " NeedsSquare:" & jo.needsSquare
        s = s + " isArrayMember:" & jo.isArrayMember & " isArrayRoot:" & jo.isArrayRoot & " Fake:" & jo.fake
        s = s & ")"
    
    End If
    itemFormat = s + vbCrLf
End Function
Public Sub jdebug()
    Debug.Print formatData(True)
End Sub
Private Function quote(s As String) As String
    quote = q & s & q
End Function
Public Function parse(s As String, Optional jtype As eDeserializeType, Optional complain As Boolean = True) As cJobject
    Dim j As cJobject
    Set j = deSerialize(s, jtype, complain)
    If j.key = croot Then
        ' drop fake header
        j.sever
    End If
    Set parse = j
End Function
Public Function deSerialize(s As String, Optional jtype As eDeserializeType = eDeserializeNormal, Optional complain As Boolean = True) As cJobject
    ' this will take a simple JSON string and deserialize into a cJobject branch starting at ME
    ' prepare string for processing
    Dim jo As cJobject

    pPointer = 1
    pJstring = noisyTrim(s)
    Set jo = New cJobject
    jo.init Nothing, croot
    pJtype = jtype
    Set jo = dsLoop(jo, complain)
    ' already has its own root
    If jtype = eDeserializeGoogleWire Then
        Set jo = jo.children(1)
        jo.clearParent
    End If
    jo.setValid = pValid
    Set deSerialize = jo
End Function
Public Function sever() As cJobject
    pKey = cNull
    Set pParent = Nothing
    Set sever = Me
    pFake = True
End Function
Private Function noisyTrim(s As String) As String
    Dim ns As String
    ns = Trim(s)
    If Len(ns) > 0 Then
        While (isNoisy(Right(ns, 1)))
            ns = Left(ns, Len(ns) - 1)
        Wend
    End If
    noisyTrim = ns
End Function
Private Function nullItem(job As cJobject) As cJobject
    Set nullItem = Nothing
    
    If peek() = "," Then
    ' need an array element
    ' simulate a { 'x':'x}
        If pJtype = eDeserializeGoogleWire Then
            Set nullItem = job.add.add("v")
        Else
            Set nullItem = job.add
        End If
    End If
    

End Function

Private Function dsLoop(job As cJobject, Optional complain As Boolean = True) As cJobject
    Dim cj As cJobject, jo As cJobject, ws As String
    Set jo = job
    pActive = True
    pWhatNext = "{["
    While pPointer <= Len(pJstring) And pActive
        Set jo = dsProcess(jo, complain)
    Wend
    Set dsLoop = job
End Function
Private Function okWhat(what As String) As Boolean

    okWhat = (InStr(pWhatNext, nOk) <> 0 And _
                (what = "." Or what = "-" Or IsNumeric(what))) Or _
                (InStr(pWhatNext, what) <> 0)

            
End Function
Private Function peekNextToken() As String
    ' this is in case the next token is a special
    Dim k As Long
    peekNextToken = vbNullString

    ignoreNoise
    k = pPointer
    While Not (isQuote(pointedAt(k)) Or isNoisy(pointedAt(k)) Or _
        IsNumeric(pointedAt(k)) Or 0 <> InStr("[]{},.:", pointedAt(k)))
        k = k + 1
    Wend
    If (k > pPointer) Then peekNextToken = LCase(pointedAt(, k - pPointer))
    
End Function

Private Function doNextToken() As String
    Dim nextToken As String
    ' poke around to fix exceptions like null, false, true
    nextToken = peekNextToken
    If nextToken = "null" Then
        pPointer = pPointer + Len(nextToken)
        ignoreNoise
        doNextToken = pointedAt
    ElseIf nextToken = "false" Then
        doNextToken = "0"
        pPointer = pPointer + Len(nextToken)
    ElseIf nextToken = "true" Then
        doNextToken = "1"
        pPointer = pPointer + Len(nextToken)
    End If
End Function
Private Function dsProcess(job As cJobject, Optional complain As Boolean = True) As cJobject
    Dim k As Long, jo As cJobject, s As String, what As String, jd As cJobject, v As Variant
    Dim nextToken As String, nt As String, a As Variant, av As String, jt As cJobject
    'are we done?
    Set dsProcess = job
    If pPointer > Len(pJstring) Then Exit Function

    Set jo = job
    ignoreNoise

    nextToken = doNextToken
    If nextToken <> vbNullString Then
        what = nextToken
    Else
        what = pointedAt
    End If
    
    ' is it what was expected
    
    If Not okWhat(what) Then
        badJSON pWhatNext, , complain
        Exit Function
    End If
    ' process next token
    Select Case what
    ' start of key:value pair- do nothing except set up to get the key name
        Case "{"
            pPointer = pPointer + 1
            If jo.isArrayRoot Then Set jo = jo.add
            Set dsProcess = jo
            pWhatNext = anyQ & ",}"
            
    ' its the beginning of an array - need to kick off a new array
        Case "["
            pPointer = pPointer + 1
            If jo.isArrayRoot Then
                ' this is a double [[
                Set jo = jo.add
            End If
            If nullItem(jo.addArray) Is Nothing Then
                pWhatNext = nOk & anyQ & "{],["
            Else
                pWhatNext = ","
            End If
            Set dsProcess = jo

            
     ' could be a key or an array value
        Case q, qs, "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "."
            v = getvItem(, nextToken)
            If IsEmpty(v) Then
                badJSON pWhatNext, , complain
            Else
                ' start of key/value pair
                If peek() = ":" Then
                ' add as a new key, and set up for getting the value
                    Set jt = jo
                    Set jo = jo.add(CStr(v))
                    Set jo.backtrack = jt
                    
                    pWhatNext = ":"
                ElseIf jo.isArrayRoot Then
                ' an array value is allowed without a key
                    jo.add , v
                    pWhatNext = ",]"
                Else
                    badJSON pWhatNext, , complain
                End If
                Set dsProcess = jo

            End If

    ' its the value of a pair
        Case ":"
            pPointer = pPointer + 1
            nt = peekNextToken
            v = getvItem(, doNextToken)

            If IsEmpty(v) And nt <> "null" Then
                ' about to start an array rather than get a value
                pWhatNext = "{["
            Else
                ' store the value, come back for the next
                ' boolean hack
                If (v = 1 And nt = "true") Then
                    v = True
                ElseIf (v = 0 And nt = "false") Then
                    v = False
                End If
                jo.Value = v
                Set jo = jo.backtrack
                pWhatNext = ",}"
            End If
            Set dsProcess = jo
            
        Case ","
    ' another value - same set
            pPointer = pPointer + 1
            If nullItem(jo) Is Nothing Then
                pWhatNext = nOk & anyQ & "{}],["
            Else
                pWhatNext = ","
            End If
            Set dsProcess = jo
            
        Case "}"
    ' backup a level
            pPointer = pPointer + 1
            pWhatNext = ",]}"
            Set dsProcess = jo.backtrack
               
        Case "]"
    ' backup a level
            pPointer = pPointer + 1
            pWhatNext = ",}]"
            Set dsProcess = jo.backtrack
            
        Case Else
    ' unexpected thing happened
            badJSON pWhatNext, , complain
    
    End Select

    
End Function
Private Function nOk() As String
    ' some character to say that a numeric is ok
    nOk = Chr(254)
End Function
Private Function getvItem(Optional whichQ As String = "", Optional nextToken = vbNullString) As Variant
    Dim s As String
    ' is it a string?
    getvItem = Empty
    ignoreNoise
    Select Case nextToken
        Case "1"
            getvItem = 1
        Case "0"
            getvItem = 0
        Case Else
            If isQuote(pointedAt) Then
                getvItem = getQuotedItem(whichQ)
            Else
    ' maybe its a number
                s = getNumericItem
                If Len(s) > 0 Then getvItem = toNumber(s)
            End If
    End Select
    
End Function
Private Function peek() As String
    Dim k As Long
    ' peek ahead to next non noisy character
    k = pPointer
    ignoreNoise
    peek = pointedAt
    pPointer = k
End Function
Private Function peekBehind() As String
    Dim k As Long
    k = pPointer - 1
    While k > 0 And isNoisy(pointedAt(k))
        k = k - 1
    Wend
    If k > 0 Then
        peekBehind = pointedAt(k)
    End If
End Function
Private Function toNumber(sIn As String) As Variant
    ' convert string to numeric , either double or long
    Dim ts As String, s As String, x As Date
 ' find out the '.' separator for this locale
    ts = Mid(CStr(1.1), 2, 1)
 ' and use it so that cdbl works properly
    s = Replace(sIn, ".", ts)
    On Error GoTo overflow
   

    If InStr(1, s, ts) Then
        toNumber = CDbl(s)
    Else
        toNumber = CLng(s)
    End If
    Exit Function
    
overflow:
    'perhaps this is a javascript date
    On Error GoTo overflowAgain
    If (Len(s) = 13) Then
        x = DateAdd("s", CDbl(Left(s, 10)), DateSerial(1970, 1, 1))
    End If
    toNumber = x
    Resume Next
    Exit Function
    
overflowAgain:
    'this wasnt a javascript date
    toNumber = 0
    Resume Next
    Exit Function
    
End Function
Private Function pointedAt(Optional pos As Long = 0, Optional sLen As Long = 1) As String
    ' return what ever the currently quoted character is
    Dim k As Long
    If pos = 0 Then
        k = pPointer
    Else
        k = pos
    End If
    pointedAt = Mid(pJstring, k, sLen)
End Function

Private Function getQuotedItem(Optional whichQ As String = "") As String
    Dim s As String, k As Long, wq As String
    ignoreNoise
    s = ""

    If isQuote(pointedAt, whichQ) Then
        wq = pointedAt
    ' extract until the next matching quote
        k = pPointer + 1

        While Not isQuote(pointedAt(k), wq)
          If isUnicode(pointedAt(k, 2)) Then
            s = s & ChrW(CLng("&H" & pointedAt(k + 2, 4)))
            'S = S & StrConv(Hex2Dec(pointedAt(k + 2, 4)), vbFromUnicode)
            k = k + 6
            
          ElseIf isEscape(pointedAt(k)) Then
            Select Case LCase(pointedAt(k + 1))
                Case "t"
                    s = s & vbTab
                Case "n"
                    s = s & vbLf
                Case "r"
                    s = s & vbCr
                Case Else
                    s = s & pointedAt(k + 1)
            End Select
            k = k + 2
          Else
            s = s & pointedAt(k)
            k = k + 1
          End If
        Wend
        pPointer = k + 1
    End If
    getQuotedItem = s

End Function

Private Function getNumericItem() As String
    Dim s As String, k As Long, eAllowed As Boolean
    ignoreNoise
    s = vbNullString
    eAllowed = False
    k = pPointer
    While IsNumeric(pointedAt(k)) Or pointedAt(k) = "." Or pointedAt(k) = "-" Or (eAllowed And pointedAt(k) = "E")
        s = s & pointedAt(k)
        eAllowed = InStr(1, s, "E") < 1
        k = k + 1
    Wend
    pPointer = pPointer + Len(s)

    getNumericItem = s
    
End Function


Private Function isQuote(s As String, Optional whichQ As String = "") As Boolean
    If Len(whichQ) = 0 Then
        ' any quote
        isQuote = (s = q Or s = qs)
    Else
        isQuote = (s = whichQ)
    End If
End Function
Private Sub badJSON(pWhatNext As String, Optional add As String = "", Optional complain As Boolean = True)
    If (complain) Then
        MsgBox add & "got " & pointedAt & " expected --(" & pWhatNext & _
            ")-- Bad JSON at character " & CStr(pPointer) & " starting at " & _
            Mid(pJstring, pPointer)
    End If
    pValid = False
    pActive = False
    
End Sub

Private Sub ignoreNoise(Optional pos As Long = 0, Optional extraNoise As String = "")
    Dim k As Long, t As Long
    If pos = 0 Then
        t = pPointer
    Else
        t = pos
    End If
    For k = t To Len(pJstring)
        If Not isNoisy(Mid(pJstring, k, 1), extraNoise) Then Exit For
    Next k
    pPointer = k
End Sub
Private Function isNoisy(s As String, Optional extraNoise As String = "") As Boolean
    isNoisy = InStr(vbTab & " " & vbCrLf & vbCr & vbLf & extraNoise, s)
End Function
Private Function isEscape(s As String) As Boolean
    isEscape = (s = "\")
End Function
Private Function isUnicode(s As String) As Boolean
    isUnicode = LCase(s) = "\u"
End Function
Private Function q() As String
    q = Chr(34)
End Function
Private Function qs() As String
    qs = Chr(39)
End Function
Private Function anyQ() As String
    anyQ = q & qs
End Function
Public Function addD3TreeItem(ds As cDataSet, label As String, key As String, parentkey As String, _
    Optional drd As cDataRow = Nothing) As cJobject
    Dim cj As cJobject, dr As cDataRow, Cc As cCell
    ' does parent key exist?
    Set cj = find(parentkey)
    If (cj Is Nothing) Then
        Set dr = findD3Parent(ds, parentkey)
        If Not dr Is Nothing Then
            Set cj = addD3TreeItem(ds, label, parentkey, cleanDot(dr.cell("Parent key").toString), dr)
        End If
    End If
    If cj Is Nothing Then
        MsgBox ("could not find " & key & " " & parentkey)
    Else
        With cj.add(key)
            .add "label", label
            ' anything else on this row?
            If Not drd Is Nothing Then
                For Each Cc In drd.columns
                    If (Cc.myKey <> "key" And Cc.myKey <> "label" And _
                        Cc.myKey <> "parent key" And Not IsEmpty(Cc.Value)) Then
                        .add Cc.myKey, Cc.Value
                    End If
                Next Cc
            End If
        End With
    End If
    Set addD3TreeItem = cj
End Function
Private Function findD3Parent(ds As cDataSet, parentkey) As cDataRow
    Dim dr As cDataRow
    For Each dr In ds.rows
        If cleanDot(dr.cell("key").toString) = parentkey Then
            Set findD3Parent = dr
            Exit Function
        End If
    Next dr
    
End Function
Private Function cleanDot(s As String) As String
    '. has special meaning for cJobject so if present in key, then remove
    cleanDot = makeKey(Replace(s, ".", "_ _"))
End Function
Public Function makeD3Tree(ds As cDataSet, dsOptions As cDataSet, Optional options As String = "options") As cJobject
    ' this one will take a list of Name/Parents and make a structured cJobject out of it
    Dim dr As cDataRow, cj As cJobject, parent As String, name As String, c3 As cJobject, ct As cJobject
    Const container = "contents"
    If Not ds.headingRow.validate(True, "Label", "Parent Key", "Key") Then Exit Function
    Set cj = add("D3Root")
    
    For Each dr In ds.rows
        Set ct = cj.addD3TreeItem(ds, _
            dr.cell("label").toString, _
            cleanDot(dr.cell("key").toString), _
            cleanDot(dr.cell("Parent key").toString), dr)
    Next dr
    ' now lets tweak that to a d3 format
    Set c3 = New cJobject
    
    With c3.init(Nothing)
        ' add an options branch
        With .add("options")
            For Each dr In dsOptions.rows
                If dr.cell("value").toString <> vbNullString Then
                    .add dr.cell(options).toString, _
                            dr.cell("value").toString
                End If
            Next dr
        End With
        
        
        ' add a branch for data
        With .add("data")
            .add "label", dsOptions.cell("root", "value").toString
            .makeD3 cj.children(1)
        End With
    End With
    Set makeD3Tree = c3
End Function
Public Function makeD3(cj As cJobject) As cJobject
    Dim cjc As cJobject

    If cj.hasChildren Then
        With add("children").addArray.add
            For Each cjc In cj.children
                .makeD3 cjc
            Next cjc
        End With
    Else
        add cj.key, cj.Value
    End If
    
    Set makeD3 = Me
End Function

Public Sub tearDown()
    Dim cj As cJobject
    If Not pChildren Is Nothing Then
        For Each cj In pChildren
            cj.tearDown
        Next cj
    End If
    Set pParent = Nothing
    Set pBacktrack = Nothing
    Set pChildren = Nothing
End Sub


Private Sub class_initialize()
    pisArrayRoot = False
    pValid = True
    pIndex = 1
    Set pChildren = New Collection
End Sub




Attribute VB_Name = "cStringChunker"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:53 AM : from manifest:5028829 gist https://gist.github.com/brucemcpherson/5102369/raw/cStringChunker.cls
' stringChunker class for VBA because string concat takes ages
Option Explicit
' v1.06  5102369
Private pContent As String
Private pSize As Long
' minimum amount to increment by each time
Const defaultChunkSize = 64
Public Property Get size() As Long
    ' this is how much content is real
    size = pSize
End Property
Public Property Get content() As String
    ' return the real part of the content
    If pSize > 0 Then
        content = getLeft(size)
    Else
        content = vbNullString
    End If
End Property
Public Property Get getLeft(howMany As Long) As String
    ' return the left part of the content
    ' c.getLeft(howmany) is equivalent to left(c.content,howmany), but avoids extra assignment
    getLeft = getMid(1, howMany)
End Property
Public Property Get getRight(howMany As Long) As String
    ' return the right part of the content
    ' c.getRight(howmany) is equivalent to right(c.content,howmany), but avoids extra assignment
    getRight = getMid(pSize - howMany + 1, howMany)
End Property
Public Property Get getMid(startPos As Long, Optional howMany As Long = -1) As String
    ' extract from content
    ' c.getMid(startPos,howmany) is equivalent to mid(c.content,startPos, howmany), but avoids extra assignment
    Dim n As Long
    Debug.Assert startPos > 0 And startPos <= pSize
    n = howMany
    If n = -1 Then
        n = pSize - startPos + 1
    End If
    n = minNumber(pSize - startPos + 1, n)
    If n > 0 Then
        getMid = Mid(pContent, startPos, n)
    Else
        getMid = vbNullString
    End If
End Property
Public Property Get self() As cStringChunker
    ' convenience for with in with
    Set self = Me
End Property
Public Function clear() As cStringChunker
    ' easy to clear out.. may as well keep the same buffer going
    pSize = 0
    Set clear = Me
End Function
Public Function uri(addstring As String) As cStringChunker
    Set uri = add(URLEncode(addstring))
End Function
Public Function toString() As String
    toString = content()
End Function
Public Function add(addstring As String) As cStringChunker
    Dim k As Long
    ' add some content to end
    k = Len(addstring)
    If k > 0 Then
        adjustSize (k)
    
        Mid(pContent, size + 1, k) = addstring
        pSize = size + k
    End If
    Set add = Me
End Function
Public Function addLine(addstring As String) As cStringChunker
    Set addLine = add(addstring).add(vbCrLf)
End Function
Public Function insert(Optional insertString As String = " ", _
                    Optional insertBefore As Long = 1) As cStringChunker
    'default position is at beginning, insert a space
    'c.insert("x",c.size+1) is equivalent to c.add("x")
    
    If insertBefore = pSize + 1 Then
        Set insert = add(insertString)
        
    Else
        ' 'todo .. how to handle programming errors?
        Debug.Assert insertBefore > 0 And insertBefore <= pSize
        
        ' regular string concatenation is better since there is overlap
        pContent = getLeft(insertBefore - 1) & insertString & getMid(insertBefore)
        pSize = Len(pContent)
        Set insert = Me
            
    End If
    Set insert = Me
End Function
Public Function overWrite(Optional overWriteString As String = " ", _
                    Optional overWriteAt As Long = 1) As cStringChunker
    'default position is at beginning, overwrite with a space
    Dim k As Long
    k = Len(overWriteString)
    If k > 0 Then
        ' 'todo .. how to handle programming errors?
        Debug.Assert overWriteAt >= 0
        '' we'll allow overwrite to extend past end, be greedy
        adjustSize (k)
        pSize = maxNumber(pSize, k + overWriteAt - 1)
        
        Mid(pContent, overWriteAt, k) = overWriteString
        
    End If
    Set overWrite = Me
End Function
                        
Public Function Shift(Optional startPos As Long = 1, _
                Optional howManyChars As Long = 0, _
                Optional replaceWith As String = vbNullString) As cStringChunker
    ' shift by howmany chars .. negative= left, positive = right
    'TODO how to deal with programming errors? message, raise error, assert?
    Dim howMany As Long
    
    howMany = howManyChars
    If howMany = 0 Then
        howMany = Len(replaceWith)
    End If
        
    Debug.Assert howMany + startPos > 0
    Debug.Assert startPos <= pSize And startPos > 0
    
    ' make space
    If howMany <> 0 Then

        If howMany > 0 Then
        ' its a right shift, use insert
            Set Shift = insert(Space(howMany), startPos)
        Else
            ' a left shift
            If startPos > 1 Then
                ' we can do an overwrite
                overWrite getMid(startPos + howMany, pSize - startPos + 1), startPos
                pSize = pSize + howMany
            End If
        
        End If
    End If
    
    Set Shift = Me
End Function
Public Function chop(Optional n As Long = 1) As cStringChunker
    ' chop n charaters from end of content
    pSize = maxNumber(0, pSize - n)
    Set chop = Me
End Function
Public Function chopIf(t As String) As cStringChunker
    ' chop if its t
    Dim k As Long
    k = Len(t)
    If k <= pSize Then
        If getRight(k) = t Then
            chop (k)
        End If
    End If
    Set chopIf = Me
End Function
Public Function chopWhile(t As String) As cStringChunker
    ' chop if its t
    Dim k As Long, x As Long
    
    Set chopWhile = Me
    x = pSize
    While chopIf(t).size <> x
        x = pSize
    Wend

End Function
Private Function maxNumber(a As Long, b As Long) As Long
    If a > b Then
        maxNumber = a
    Else
        maxNumber = b
    End If
End Function
Private Function minNumber(a As Long, b As Long) As Long
    If a < b Then
        minNumber = a
    Else
        minNumber = b
    End If
End Function
Private Function adjustSize(needMore As Long) As cStringChunker
    Dim need As Long
    need = pSize + needMore
    If Len(pContent) < need Then
        pContent = pContent & Space(needMore + maxNumber(defaultChunkSize, Len(pContent)))
    End If
    Set adjustSize = Me
End Function
Private Sub class_initialize()
    pSize = 0
    pContent = Space(defaultChunkSize)
End Sub






Attribute VB_Name = "cVBAArgument"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:54 AM : from manifest:5028829 gist https://gist.github.com/brucemcpherson/5019927/raw/cVBAArgument.cls
Option Explicit
' one of these for each argument for each proc in the VBE-IDE
' v2.01 -
Private pParent As cVBAProcedure
Private pName As String
Private pArgType As String
Private pOptional As Boolean
Private pDefault As String
Public Property Get name() As String
    name = pName
End Property
Public Property Get parent() As cVBAProcedure
    Set parent = pParent
End Property
Public Property Get argType() As String
    argType = pArgType
End Property
Public Property Get default() As String
    default = pDefault
End Property
Public Property Get isOptional() As Boolean
    isOptional = pOptional
End Property
Public Function init(m As cVBAProcedure, decString As String) As cVBAArgument
    Set pParent = m
    ' from the declaration item, figure out what this argument is
    Dim o As String, s As String, p As Long, np As Long, t As String, u As String, r As String
    Dim g As Long
    s = Trim(decString)
    o = "Optional"
    r = "(\w+)"
    t = rxGroup(r, s, 1)
    pOptional = (t = o)
    If pOptional Then
        r = "Optional\s+(\w+)"
        pName = rxGroup(r, s, 1)
    Else
        pName = t
    End If
    r = r + "\s+As\s+(\w+)"

    If rxTest(r, s) Then
        pArgType = Trim(rxGroup(r, s, 2))
        r = r + "\s+=(.*)"
        pDefault = rxGroup(r, s, 3)
    Else
        pArgType = "Variant"
    End If

    Set init = Me
End Function
Public Sub tearDown()
    Set pParent = Nothing
End Sub


Attribute VB_Name = "cVBAModule"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:52 AM : from manifest:5028829 gist https://gist.github.com/brucemcpherson/5019927/raw/cVBAModule.vba
Option Explicit
'
' one of these for each module/class
'
Private pvCom As VBComponent
Private pProcedures As Collection
Private pParent As cVBAProject
Public Property Get name() As String
    name = pvCom.name
End Property
Public Property Get parent() As cVBAProject
    Set parent = pParent
End Property
Public Property Get vCom() As VBComponent
    Set vCom = pvCom
End Property
Public Property Get procedures() As Collection
    Set procedures = pProcedures
End Property
Public Sub init(v As VBComponent, pj As cVBAProject)
    Set pProcedures = New Collection
    Set pParent = pj
    Set pvCom = v
End Sub
Public Sub tearDown()
    Dim proc As cVBAProcedure
    For Each proc In pProcedures
         proc.tearDown
    Next proc
    Set pProcedures = Nothing
    Set pParent = Nothing
End Sub
Public Property Get textKind() As String
    Select Case pvCom.Type
    
        Case vbext_ct_ActiveXDesigner
            textKind = "ActiveXDesigner"
            
        Case vbext_ct_ClassModule
            textKind = "ClassModule"
            
        Case vbext_ct_Document
            textKind = "Document"
        
        Case vbext_ct_MSForm
            textKind = "MSForm"
            
        Case vbext_ct_StdModule
            textKind = "StdModule"
            
        Case Else
            Debug.Assert False
            
    End Select
End Property



Attribute VB_Name = "cVBAProcedure"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:52 AM : from manifest:5028829 gist https://gist.github.com/brucemcpherson/5019927/raw/cVBAProcedure.vba
Option Explicit
' one of these for each procedure/property in the VBE-IDE
' v2.03
Private pParent As cVBAModule
Private pName As String
Private pProcKind As vbext_prockind
Private pArguments As Collection
Private Sub class_initialize()
    Set pArguments = New Collection
End Sub
Public Property Get name() As String
    name = pName
End Property
Public Property Get arguments() As Collection
    Set arguments = pArguments
End Property
Public Property Get parent() As cVBAModule
    Set parent = pParent
End Property
Public Property Get procKind() As vbext_prockind
    procKind = pProcKind
End Property
Public Function init(m As cVBAModule, pn As String, pk As vbext_prockind) As cVBAProcedure
    Set pParent = m
    pProcKind = pk
    pName = pn
    pParent.procedures.add Me, name & "-" & procTextKind
    dealWithArguments declaration
    Set init = Me
End Function
Public Sub tearDown()
    Dim p As cVBAArgument
    For Each p In arguments
        p.tearDown
    Next p
    Set pParent = Nothing
End Sub
Public Property Get lineCount() As Long
    lineCount = codeModule.ProcCountLines(pName, pProcKind)
End Property
Public Property Get codeModule() As codeModule
    Set codeModule = pParent.vCom.codeModule
End Property
Public Property Get startLine() As Long
    startLine = codeModule.ProcBodyLine(pName, pProcKind)
End Property
Private Function removeComments(s As String) As String
    Dim sr As String
    ' regex for comments (accounts for within quoted strings)
    sr = bracket(q & ".*?" & q) & "|" & bracket("'.*$") ' (".*?")|('.*$)
    removeComments = rxReplace(sr, s, "$1")
End Function
Private Function dealWithArguments(dec As String) As cVBAProcedure
    Dim rx As String, s As String, a As Variant, I As Long, p As cVBAArgument
    ''rx = "(?:\w+\s*\()(.*)\)"
    rx = "\((.*)\)"
    s = Trim(rxString(rx, dec))
    '' rx doesnt work very well in vb ..
    If Left(s, 1) = "(" Then s = Mid(s, 2)
    If Right(s, 1) = ")" Then s = Left(s, Len(s) - 1)
    a = Split(s, ",")
    For I = LBound(a) To UBound(a)
        Set p = New cVBAArgument
        p.init Me, CStr(a(I))
        arguments.add p, LCase(a(I))
        
    Next I
    Set dealWithArguments = Me
End Function
Public Property Get scope() As String
    Dim dec As String
    dec = declaration
    If rxTest("^Private", dec) Then
        scope = "Private"
    Else
        scope = "Public"
    End If
End Property
Private Function textKind(k As vbext_prockind) As String
    Dim dec As String
    
    Select Case k
        Case vbext_pk_Get
            textKind = "Get"
            
        Case vbext_pk_Set
            textKind = "Set"
            
        Case vbext_pk_Let
            textKind = "Let"
            
        Case vbext_pk_Proc
            dec = declaration
            If rxTest("function\s\w", dec) Then
                textKind = "Function"
            Else
                textKind = "Sub"
            End If
            
            
        Case Else
            Debug.Assert False
        
    End Select
End Function
Public Property Get procTextKind() As String
    procTextKind = textKind(pProcKind)
End Property
Public Property Get procReturns() As String
    ' return the type of thing it returns
    Dim dec As String, r As String
    'regex to get as xxx
    r = "(.*[^\w+$])(\w+$)"
    Select Case procTextKind
    
        Case "Get", "Function"
            dec = declaration
            
            If (rxTest(r, dec)) Then
                procReturns = rxReplace(r, dec, "$2")
            Else
                procReturns = "Variant"
            End If
            
        Case "Set", "Let", "Sub"
            procReturns = "void"
            
        Case Else
            Debug.Assert False
        
    End Select
End Property
Public Property Get getTheCode() As String
    ' returns the entire code for this procedure
    getTheCode = codeModule.Lines(startLine, lineCount)
End Property
Public Property Get declaration() As String
    ' return the declaration line, stripped of comments and consolidated onto one line
    Dim n As Long, s As String, t As String, doMore As Boolean
    
    n = 0
    t = vbNullString
    Do
        s = LTrim(RTrim(removeComments(codeModule.Lines(n + startLine, 1))))
        If (s <> vbNullString) Then
            doMore = Right(s, 1) = "_" And n < lineCount
            If (doMore) Then s = Left(s, Len(s) - 1)
            t = t & s
        Else
            doMore = False
        End If
        n = n + 1
        
    Loop While doMore
    declaration = t
    
End Property


Attribute VB_Name = "cVBAProject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:52 AM : from manifest:5028829 gist https://gist.github.com/brucemcpherson/5019927/raw/cVBAProject.vba
Option Explicit
' cVBAProject.vba
' one of these for each project in the workbook
Private pWorkBook As Workbook
Private pModules As Collection

Public Property Get name() As String
    name = pWorkBook.VBProject.name
End Property
Public Property Get wBook() As Workbook
    Set wBook = pWorkBook
End Property

Public Property Get modules() As Collection
    Set modules = pModules
End Property
Public Sub init(wb As Workbook)
    Set pWorkBook = wb
    Set pModules = New Collection
End Sub
Public Sub tearDown()
    Dim vm As cVBAModule
    For Each vm In pModules
        vm.tearDown
    Next vm
    Set pModules = Nothing
End Sub


Attribute VB_Name = "fGetIssuesStatus"
Attribute VB_Base = "0{AE2E53EE-E0CD-4657-86FC-9CB17D591C8E}{CC738C55-41DC-4441-9394-7E0E97A38D34}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Dim count As Integer
'Private Sub bOk_Click()
'    Me.tbStatus.Value = ""
'    Unload Me
'End Sub


Private Sub ComboBox1_Change()
Call AGetTickets("form")
End Sub

Private Sub ComboBox2_Change()

If ComboBox2.Value = "SLS" Then
  ComboBox3.clear
  Me.ComboBox3.AddItem "|fffd|kol"
  Me.ComboBox3.AddItem "Projekt"
  Me.ComboBox3.Value = "Projekt"
ElseIf ComboBox2.Value = "SRV" Then
  ComboBox3.clear
  Me.ComboBox3.AddItem "|fffd|kol"
  Me.ComboBox3.AddItem "Pre-instalace"
  Me.ComboBox3.AddItem "Instalace"
  Me.ComboBox3.AddItem "De-instalace"
  Me.ComboBox3.AddItem "Objedn|fffd|vka"
  Me.ComboBox3.AddItem "LIS P|fffd|ipojeni"
  Me.ComboBox3.AddItem "B|fffd|n|fffd| servis"
  Me.ComboBox3.AddItem "Akutn|fffd| servis"
  Me.ComboBox3.AddItem "LAB Solution"
  Me.ComboBox3.Value = "|fffd|kol"
ElseIf ComboBox2.Value = "LG" Then
  ComboBox3.clear
  Me.ComboBox3.AddItem "|fffd|kol"
  Me.ComboBox3.AddItem "P|fffd|evodka"
  Me.ComboBox3.AddItem "Objedn|fffd|n|fffd| p|fffd||fffd|stroje"
  Me.ComboBox3.AddItem "Po|fffd|adavek na smlouvu"
  Me.ComboBox3.AddItem "Zalo|fffd|en|fffd| z|fffd|kazn|fffd|ka"
  Me.ComboBox3.AddItem "P|fffd|ed|fffd|vac|fffd| dokumentace"
  Me.ComboBox3.Value = "|fffd|kol"
ElseIf ComboBox2.Value = "IT" Then
  ComboBox3.clear
  Me.ComboBox3.AddItem "|fffd|kol"
  Me.ComboBox3.AddItem "Improvement"
  Me.ComboBox3.AddItem "Rinku"
  Me.ComboBox3.Value = "|fffd|kol"
End If

End Sub

Private Sub ComboBox4_Change()

End Sub

Private Sub CommandButton1_Click()
Call AGetTickets("Tlacitko")
End Sub

Private Sub CommandButton2_Click()

Dim Newsite As Object
Dim id As String

id = Me.ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(1)

Set Newsite = CreateObject("InternetExplorer.application")
Newsite.Visible = True
Newsite.Navigate Range("ServerNames").Value & "/browse/" & id

End Sub

Private Sub CommandButton3_Click()

Dim id As String


    id = Me.ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(1)
    With Worksheets("Obchodni list")
        .Hyperlinks.add Anchor:=.Range("SLS_issue"), _
        Address:=Range("ServerNames").Value & "/browse/" & id, _
        ScreenTip:="kliknut|fffd|m otev|fffd|ete v prohl|fffd|e|fffd|i", _
        TextToDisplay:=id
    End With

End Sub

Private Sub Label1_Click()

End Sub

Private Sub Label3_Click()

End Sub

Private Sub Label5_Click()

End Sub

Private Sub Label6_Click()

End Sub

Private Sub ListView1_BeforeLabelEdit(Cancel As Integer)
Me.ComboBox1.Enabled = False
Me.ComboBox1.Value = ""
End Sub

Private Sub MultiPage1_Change()

End Sub

Private Sub OptionButton1_Click()
Me.ComboBox1.Enabled = False
Call AGetTickets("form")
End Sub

Private Sub OptionButton2_Click()
Call AGetTickets("form")
End Sub

Private Sub OptionButton3_Click()
Me.ComboBox1.Enabled = True
Me.ComboBox1.Value = ""
End Sub

Private Sub UserForm_Initialize()
  Me.ComboBox1.list = Worksheets("Help").Range("AT1:AT33").Value
  Me.ComboBox2.AddItem "SLS"
  Me.ComboBox2.AddItem "LG"
  Me.ComboBox2.AddItem "SRV"
  Me.ComboBox2.AddItem "IT"
  
  'Me.ComboBox4.AddItem "Open"
  'Me.ComboBox4.AddItem "Closed"
  'Me.ComboBox4.AddItem "In Progress"
  'Me.ComboBox4.Value = "Open"
   Me.ComboBox4.Value = "Unresolved"
  Me.ComboBox2.Value = "SLS"
  count = 1
End Sub

Sub progress(pctCompl As Single)

    Me.bar.Width = pctCompl * 2

    DoEvents

End Sub
Sub AppendStatusBar(s As String)
    
    Me.statusBar.Caption = s
    DoEvents
End Sub

Sub AppendStatus(s As String)
  
    With Me.tbStatus
        '.SetFocus '//required
        '.Value = count & ") " & s & vbCrLf & "===========================================" & vbCrLf & Me.tbStatus.Text
        .Value = Me.tbStatus.Text & vbCrLf & "============================================" & vbCrLf & count & ") " & s
        .SelStart = Len(.Value)
    End With
    count = count + 1
    DoEvents
End Sub
Attribute VB_Name = "fLogin"
Attribute VB_Base = "0{D5190226-A804-49FB-8F28-AC18A281ABBF}{797C1FE5-9923-4E31-8494-35961A03BC86}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Cancel As Boolean

Private Sub bCancel_Click()
    Cancel = True
    Me.Hide
End Sub

Private Sub bOk_Click()
    'WriteProp "NoAuth", fLogin.cbNoAuth.Value, msoPropertyTypeString
    WriteProp "JiraServer", Worksheets("API").Range("ServerNames"), msoPropertyTypeString 'fLogin.txtServer.Value
    WriteProp "JiraUsername", fLogin.txtUsername.Value, msoPropertyTypeString
    Cancel = False
    Me.Hide
    
End Sub


Private Sub UserForm_Activate()
    Dim r As String 'Range
    r = "" 'Range("ServerNames") 'set
    'Me.txtServer.clear
    'While r.Value <> ""
    '    Me.txtServer.AddItem (r.Value)
    '    Set r = r.Offset(1, 0)
    'Wend
    
    'Me.cbNoAuth.Value = ReadProp("NoAuth")
    'Me.txtServer = ReadProp("JiraServer")
    Me.txtUsername = Environ("UserName") 'ReadProp("JiraUsername")

        Me.txtPassword.Enabled = True
        Me.txtUsername.Enabled = True

End Sub

Attribute VB_Name = "find_payer"
Attribute VB_Base = "0{C1B93F17-8F2C-4BCF-A7E6-61D146592D92}{B5624489-A551-4D3D-85B9-E61447A582C7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub write_customer_Click()
Dim loadedform As Boolean
    id = ListView1.SelectedItem.Text
    id = Replace(id, " ", "")
    jmeno = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(1)
    city = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(2)
    street = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(3)
    ZIP = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(4)
    short = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(5)
    Dim OBCH_sh As Worksheet
    Set OBCH_sh = Worksheets("Obchodni list")

loadedform = FormIsLoaded("Project_name_wizard")

If loadedform = True Then
    Project_name_wizard.TextBox2.Value = short
End If

    With OBCH_sh
        .Range("customer_ID").Value = id
        .Range("customer_name").Value = jmeno
        .Range("customer_city").Value = city
        .Range("customer_street").Value = street
        .Range("customer_ZIP").Value = ZIP
        Call check("Zapis cisla zakaznika - ")
        MsgBox ("Zaps|fffd|no.")
    
    'Unload Me

        
    End With
End Sub

Private Sub ListView1_BeforeLabelEdit(Cancel As Integer)

End Sub

Private Sub UserForm_Initialize()
ComboBox1.AddItem "SCZ"
ComboBox1.AddItem "SSK"
ComboBox1.AddItem "SCZ+SSK"

If Worksheets("Obchodni list").Range("zeme_instalace").Value = "SCZ" Then
    ComboBox1.Value = "SCZ"
ElseIf Worksheets("Obchodni list").Range("zeme_instalace").Value = "SSK" Then
    ComboBox1.Value = "SSK"
End If

End Sub

Private Sub Write_payer_Click()
    id = ListView1.SelectedItem.Text
    id = Replace(id, " ", "")
    jmeno = ListView1.ListItems.Item(ListView1.SelectedItem.Index).SubItems(1)
Dim OBCH_sh As Worksheet
Set OBCH_sh = Worksheets("Obchodni list")

    With OBCH_sh
        .Range("payer_ID").Value = id
        .Range("payer_name").Value = jmeno
        
        Call check("Zapis payera")
        MsgBox ("Zaps|fffd|no.")
    
    'Unload Me

        
    End With
End Sub

Private Sub Find_payer_Click()

ListView1.ColumnHeaders.clear
ListView1.ListItems.clear

'-------------------------------------------------------------------------
' Connection variables
Dim conn As New ADODB.Connection
Dim server_name As String
Dim database_name As String
Dim user_id As String
Dim password As String

' Table action variables
'Dim I As Long ' counter
Dim table1 As String, table2 As String
Dim field1 As String, field2 As String
Dim rs As ADODB.Recordset
Dim rs2 As ADODB.Recordset
'Dim vstup As String
Dim vtype As Variant
Dim strsql As String

' Set the text, alignment and width for each column header.
'header1.Text = "Customer name"


VAL1 = TextBox1.Value
val2 = TextBox2.Value

' Establish connection to the database
server_name = "syseusql07" '"172.16.1.223" ' Enter your server name here - if running from a local computer use 127.0.0.1
database_name = "Minerva_SAPway_CASH" ' Enter your database name here
user_id = "" ' enter your user ID here
password = "" ' Enter your password here

 ' Enter your server name here - if running from a local computer use 127.0.0.1

'Set conn = New ADODB.Connection
'HostName = Environ$("computername")
'conn.Open "DSN=minerva connect;Trusted_Connection=Yes;APP=Microsoft Office 2010;WSID=" & HostName & ";DATABASE=Minerva_SAPway_CASH" _

''Response.Write
Set conn = New ADODB.Connection
hostName = Environ$("computername")
conn.Open "Driver={SQL Server};Server=" & server_name & ";Database=" & database_name & _
    ";WSID=" & hostName & ";"
customer_nr = Worksheets("Obchodni list").Range("Customer_ID").Value

If ComboBox1.Value = "SCZ" Then
    lokalizace = "Client='3013'"
ElseIf ComboBox1.Value = "SSK" Then
    lokalizace = "Client='3015'"
ElseIf ComboBox1.Value = "SCZ+SSK" Then
    lokalizace = "(Client='3013' OR Client='3015')"
End If

If OptionButton1.Value = True Then
    typ_zakaznika = "LEFT(CustomerNo,2)='31' AND "
ElseIf OptionButton2.Value = True Then
    typ_zakaznika = "LEFT(CustomerNo,2)='37' AND "
ElseIf OptionButton3.Value = True Then
    typ_zakaznika = ""
End If
    Set rs = New ADODB.Recordset
    sqlstr = "SELECT CustomerNo, CONCAT(name,' ',name2,' ',name3,' ',name4)as Jmeno, isnull(city,'')as city, isnull(address1,'')as street, isnull(ZIP,'')as ZIP,isnull(shortname,'')as short FROM rinku_customer WHERE " & typ_zakaznika & lokalizace & " AND (CONCAT(name,'',name2,'',name3,'',name4) COLLATE SQL_Latin1_General_CP1253_CI_AI) LIKE '%" & VAL1 & "%' and (CONCAT(name,'',name2,'',name3,'',name4) COLLATE SQL_Latin1_General_CP1253_CI_AI) NOT LIKE '%xxx%' AND city like '%" & val2 & "%' COLLATE SQL_Latin1_General_CP1253_CI_AI ORDER BY Jmeno ASC, city ASC "   'OR city LIKE '%" & val3 & "%')"
    'sqlstr = "SELECT contactID as ID,position as pozice,title as titul,Salutation as osloveni,First_name as jmeno, last_name as prijemni,directphone as directphone, mobilephone as mobil, department as oddeleni from rinku_customer_contacts where customerno=3100045670"
    rs.Open sqlstr, conn, adOpenStatic
    
    If rs.RecordCount = 0 Then
        rs.Close
        Set rs = Nothing
        conn.Close
        Set conn = Nothing
        'Write_LAB_contact.Locked = True
        'Write_IT_contact.Locked = True
        MsgBox ("Na z|fffd|klad|fffd| hledan|fffd|ch slov nebyl nalezen |fffd||fffd|dn|fffd| z|fffd|kazn|fffd|k.")
        Exit Sub
        
    End If
    
    ' Set Column Headers.
    For intCount1 = 0 To rs.Fields.count - 1
        Set colnew = ListView1.ColumnHeaders.add(, , rs(intCount1).name)
    Next intCount1
    ListView1.View = 3    ' Set View property to 'Report'.
         
    ' Set Total Records Counter.
    rs.MoveLast
    intTotCount = rs.RecordCount
    rs.MoveFirst
    

          ' Loop through recordset and add Items to the control.
          For intCount1 = 1 To intTotCount
             If IsNumeric(rs(0).Value) Then
                Set newline = ListView1.ListItems.add(, , str(rs(0).Value))
             Else
                Set newline = ListView1.ListItems.add(, , rs(0).Value)
             End If
             For intCount2 = 1 To rs.Fields.count - 1
                newline.SubItems(intCount2) = rs(intCount2).Value
             Next intCount2
             rs.MoveNext
          Next intCount1
    
'-----------------------------------------------------------------------
' Close connections
ListView1.ColumnHeaders(1).Width = 60
ListView1.ColumnHeaders(2).Width = 380
ListView1.ColumnHeaders(3).Width = 80
ListView1.ColumnHeaders(4).Width = 80
ListView1.ColumnHeaders(5).Width = 45
ListView1.ColumnHeaders(6).Width = 100

rs.Close

Set rs = Nothing
conn.Close
Set conn = Nothing
'On Error GoTo 0

End Sub
Attribute VB_Name = "mgetTickets"
Option Explicit
Public fStatus As fGetIssuesStatus

Public issues As Object
Private Declare Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hWnd As Long, _
  ByVal Operation As String, _
  ByVal FileName As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMinimizedFocus _
  ) As Long
Sub AppendStatus(s As String)
    If fStatus Is Nothing Then
        Set fStatus = New fGetIssuesStatus
        fStatus.Show False
        fStatus.AppendStatus (s)
    Else
        fStatus.AppendStatus (s)
    End If
End Sub
Public Sub OpenUrl5(url As String)

    Dim lSuccess As Long
    lSuccess = ShellExecute(0, "Open", url)

End Sub
Function GetIssuesObject() As Object
    Set GetIssuesObject = issues
End Function
'Sub Instructions(control As IRibbonControl)
'        Dim f As New fFirstUse
'        f.Show
'End Sub
'Public Sub Login(control As IRibbonControl)
'    Call RestLogin
'    Call UserPassBase64
'End Sub

Public Function GetIssues(query As String) As String

    Dim JiraService As New MSXML2.XMLHTTP60
    Dim json As Object
    Dim s As String
     
    usernamep = UserPassBase64
   
    
    If usernamep = "cancel" Then
        fStatus.AppendStatus ("User canceled login.")
    Else
        fStatus.AppendStatus ("Getting Jira Issues you might see Not Responding in title bar. The time this takes is dependant on the complexity of your query, network, and number of issues being returned.")
        
        With JiraService
             s = "https://rinku.sysmex.cz" + "/rest/api/2/search?jql=" + query + "&startAt=" + _
                        fStatus.TextBox1.Value + "&maxResults=" + _
                        fStatus.TextBox2.Value  'CStr(Range("StartAt").Value CStr(Range("MaxResults").Value)
             
             .Open "GET", s
             
             .SetRequestHeader "Content-Type", "application/json"
             .SetRequestHeader "Accept", "application/json"
             'If usernamep = "NoAuth" Then
             '   .SetRequestHeader "Authorization", "No Auth"
             'Else
                .SetRequestHeader "Authorization", "Basic " & usernamep
             'End If
             .Send
            
             If .Status = "401" Then
                 fStatus.AppendStatus ("Something wrong with query in GetIssues, check your network connection, :  " + .ResponseText)
                 GetIssues = ""
             Else
                 GetIssues = JiraService.ResponseText
             End If
        End With
    End If
End Function

Sub InternalInitialize()
    Dim r As Range
    Dim tempModule As Object
    
    Set r = Range("getValueTable")
    On Error Resume Next
    'ThisWorkbook.VBProject.VBComponents.remove
    ThisWorkbook.VBProject.VBComponents.Item ("Module1")
    Set tempModule = CreateCaseSub(r)

End Sub

'Public Sub Initialize(control As IRibbonControl)
'    Call InternalInitialize
'End Sub
Sub ProcessIssues(JsonIssues As String)
    Dim t As ListObject
    Dim z As Double
    Dim JsonObject As Object
    'Dim r As Range
    Dim r As Integer
    Dim fpath As Range
    Dim s As String
    Dim colnew As Variant
    Dim newline As Variant
    Dim gtval As String
    
    Dim rOFF1 As Integer
    Dim rOFF2 As Integer
    Dim c As Integer
    Dim g As Integer
    Dim intCount1 As Integer
    'Set t = ActiveWorkbook.Sheets("Tickets").ListObjects("Table2")
    
    ' ignoring error if table is already empty
    On Error Resume Next
    't.DataBodyRange.Delete
    On Error GoTo 0

    
    'Set r = Range("StartRow") ' row to start putting data in
    r = 2
    Set fpath = Worksheets("API").Range("StartFieldKey") ' Column headings to loop through
    
    'Convert Json to an object array that makes it easy to access the Json Hierarchy
    fStatus.AppendStatus ("Parsing Returned Json")
    Set JsonObject = JsonConverter.ParseJson(JsonIssues)
        
    fStatus.TextBox3.Value = JsonObject("total")
    fStatus.AppendStatus ("Retrieved " & CStr(JsonObject("total")) & " issue(s) matching query from Jira. Max issues to be retrieved is set at " & fStatus.TextBox2.Value & vbCrLf & " Update maxResults on Trickets sheet to retrieve more.")
    Set issues = JsonObject("issues")
    On Error GoTo gerr
    
    rOFF2 = 1
    c = 1
    For z = 1 To issues.count ' row loop: through and process each issue
        fStatus.AppendStatusBar ("Na|fffd||fffd|t|fffd|n|fffd| hodnot z Rinku " & z & " z " & issues.count)
        fStatus.progress ((z * 100 / (issues.count)) / 2)
        
        While (fpath.Value <> "") ' column loop: for each column in excel get the value from the Json Object and put in the cell
            
            ' Select statement first handles fields that have to have special handling these are fields that have multiple values usually
            ' the case else : calls the default field handling where there is a simple translaction from the Json
            On Error Resume Next
            gtval = getValue(issues(z), fpath.Value)
            'r.Offset(0, fpath.column - 1).Value = gtval
            

            
            rOFF1 = r 'r.Offset.row
            
            If z = 1 Then
                Set colnew = fStatus.ListView1.ColumnHeaders.add(, , fpath.Value)
            End If
            
            
            If rOFF1 = rOFF2 Then
                newline.SubItems(c) = gtval 'fpath.column -1
                rOFF2 = rOFF1
                c = c + 1
            ElseIf rOFF1 <> rOFF2 Then
                Set newline = fStatus.ListView1.ListItems.add(1, , gtval)
                rOFF2 = rOFF1
                c = 1
            End If
                    On Error GoTo gerr
            
            Set fpath = fpath.Offset(1, 0)
            
            
        Wend
        Set fpath = Worksheets("API").Range("StartFieldKey")
        
        r = r + 1
        'Set r = r.Offset(1, 0)

    Next z
    GoTo finish
gerr:
    fStatus.AppendStatus ("Oops something went wrong: " & vbCrLf & Err.description & vbCrLf & " source: " & Err.source & " at row: " & r & " column: " & fpath.Value)
    
finish:

End Sub
Sub AGetTickets(btn As String)
    Dim JsonIssues As String
    Dim tempModule As Object
    Dim r As Integer 'Range
    'Set r = Range("StartRow")
    Dim intCount1 As Integer
    Dim colnew As Variant
    Dim JQL As String
    Dim t As Integer
    Dim tech1 As String
    Dim tech2 As String
    Dim tech3 As String
    Dim tech4 As String
    Dim tech5 As String
    
    If btn = "Obch_list" Then
    Set fStatus = New fGetIssuesStatus
        fStatus.tbStatus.MultiLine = True
        
        fStatus.ListView1.View = lvwReport
        fStatus.ListView1.ColumnHeaders.clear
        fStatus.ListView1.ListItems.clear
        fStatus.Show (False)
    Else:
        fStatus.ListView1.View = lvwReport
        fStatus.ListView1.ColumnHeaders.clear
        fStatus.ListView1.ListItems.clear
    End If
    
    'On Error GoTo gerr
    
    If fStatus.OptionButton1.Value = True Then
        JQL = "project = " & fStatus.ComboBox2.Value & " AND issuetype = " & fStatus.ComboBox3.Value & " AND resolution = " & fStatus.ComboBox4.Value & " AND assignee = " & Environ("Username") '& " AND resolution = Unresolved"
    ElseIf fStatus.OptionButton2.Value = True Then
        JQL = "project = " & fStatus.ComboBox2.Value & " AND issuetype = " & fStatus.ComboBox3.Value & " AND resolution = " & fStatus.ComboBox4.Value
    ElseIf fStatus.OptionButton3.Value = True Then
    
    t = 2
    Do Until Worksheets("Help").Range("AT" & t).Value = ""
    If Worksheets("Help").Range("AT" & t).Value = fStatus.ComboBox1.Value Then
        tech1 = Worksheets("Help").Range("AV" & t).Value
        tech2 = Worksheets("Help").Range("AW" & t).Value
        tech3 = Worksheets("Help").Range("AY" & t).Value
        tech4 = Worksheets("Help").Range("BA" & t).Value
        tech5 = Worksheets("Help").Range("AZ" & t).Value
        Exit Do
    End If
    t = t + 1
    Loop
    
    JQL = "project = " & fStatus.ComboBox2.Value & " AND issuetype = " & fStatus.ComboBox3.Value & " AND resolution = " & fStatus.ComboBox4.Value & " AND assignee = " & tech5 '& " AND resolution = Unresolved"
    
    End If
    'JQL = "project = IT AND status != Closed"
    'JQL = "project = IT AND issuetype = |fffd|kol AND resolution = Unresolved AND CustomerCRM = ""3100023399"" AND assignee in (currentUser())"
    JsonIssues = GetIssues(JQL)
    
    If JsonIssues = "" Then
        fStatus.AppendStatus ("No Issues where returned")
    Else
        ProcessIssues (JsonIssues)
        'Call UpdateLinkedIssuesStatus
    End If
    GoTo finish
    
gerr:
    fStatus.AppendStatus ("oops problem in GetTickets:" & Err.description)
finish:

If fStatus.ListView1.ColumnHeaders.count > 0 Then
    fStatus.ListView1.ColumnHeaders(1).Width = 40
    fStatus.ListView1.ColumnHeaders(2).Width = 50
    fStatus.ListView1.ColumnHeaders(3).Width = 40
    fStatus.ListView1.ColumnHeaders(4).Width = 180
    fStatus.ListView1.ColumnHeaders(5).Width = 50
    fStatus.ListView1.ColumnHeaders(6).Width = 180
    fStatus.ListView1.ColumnHeaders(7).Width = 60
    'fStatus.ListView1.ColumnHeaders(8).Width = 100
End If

    fStatus.AppendStatus ("All Done!")
End Sub

'Public Sub GetTickets(control As IRibbonControl)
'    Call AGetTickets
'
'End Sub

Function GetFieldsWithCount(ByRef field As Variant) As String
    Dim s As String
    Dim I As Integer
    If IsEmpty(field) = True Then
        s = ""
        
    Else
    For I = 1 To field.count
        s = s & field(I)
    Next
    End If
    GetFieldsWithCount = s
End Function
Function GetFieldsIssueLink(ByRef field As Variant) As String
    Dim s As String
    Dim I As Integer
     
    If IsEmpty(field) = True Then
        s = ""
        
    Else
    
        On Error Resume Next
        For I = 1 To field.count
            s = s & field(I)("inwardIssue")("key") & "," & vbCrLf
            If Err.Number <> 0 Then
                Err.clear
                s = s & field(I)("outwardIssue")("key") & "," & vbCrLf
            End If
        Next
        s = CTrim(s)
    End If
    GetFieldsIssueLink = s
End Function
 Function CreateCaseSub() As VBComponent
     Dim code As String
     Dim r As Range
    
     Set r = Range("getValueStart")
     code = "Public Function getValue(issue as object, key as String) as String" & vbNewLine & _
                 vbTab & "dim rvalue as String" & vbNewLine & _
                 vbTab & "on error goto gerr" & vbNewLine & _
                 vbTab & "Select Case key" & vbNewLine
    
     While (r.Value <> "")
         code = code & vbTab & vbTab & "Case " & """" & r.Offset(0, 0).Value & """" & vbNewLine & _
         vbTab & vbTab & vbTab & "if IsNull(issue" & r.Offset(0, 2).Value & ") then" & vbNewLine & _
         vbTab & vbTab & vbTab & vbTab & "rvalue = """"" & vbNewLine & _
         vbTab & vbTab & vbTab & "else" & vbNewLine

         If r.Offset(0, 3).Value = "" Then
             code = code & vbTab & vbTab & vbTab & vbTab & "rvalue = issue" & r.Offset(0, 1).Value & vbNewLine
         Else
             code = code & vbTab & vbTab & vbTab & vbTab & "rvalue = " & r.Offset(0, 3).Value & "(issue" & r.Offset(0, 1).Value & ")" & vbNewLine
            
         End If
         code = code & vbTab & vbTab & vbTab & "End if" & vbNewLine
         Set r = r.Offset(1, 0)
     Wend
     code = code & vbTab & "End Select" & vbNewLine & _
             vbTab & "getValue = rvalue" & vbNewLine & _
             vbTab & "goto finish:" & vbNewLine & _
             "gerr:" & vbNewLine & _
             vbTab & "AppendStatus (""error getValue issue key: "" & key & "" "" & err.description )" & vbNewLine & _
             "finish:" & vbNewLine & _
             "End Function"
    
    
    
     Dim tempModule As VBComponent
     Set tempModule = ThisWorkbook.VBProject.VBComponents.add(VBIDE.vbext_ComponentType.vbext_ct_StdModule)
     Call tempModule.codeModule.DeleteLines(1, tempModule.codeModule.CountOfLines)
     Call tempModule.codeModule.AddFromString(code)
     tempModule.name = "Module1"
     Set CreateCaseSub = tempModule
 End Function




Public Function fromISODateTimeNoZ(o As Variant) As Date
    Dim rx As RegExp, matches As MatchCollection, d As Date, ms As Double, sec As Double
    Dim iso As String
    iso = o
    Set rx = New RegExp
    With rx
        .ignorecase = True
        .Global = True
        .Pattern = "(\d{4})-([01]\d)-([0-3]\d)T([0-2]\d):([0-5]\d):(\d*\.?\d*)"
    End With
    Set matches = rx.Execute(iso)
    
    ' TODO -- timeszone

    If matches.count = 1 And matches.Item(0).SubMatches.count = 6 Then

        With matches.Item(0)
            sec = CDbl(.SubMatches(5))
            ms = sec - Int(sec)
            d = DateSerial(.SubMatches(0), .SubMatches(1), .SubMatches(2)) + _
                TimeSerial(.SubMatches(3), .SubMatches(4), Int(sec)) + ms / 86400
        End With
    
    Else
        d = 0
    End If
    
    fromISODateTimeNoZ = d
   
End Function
Public Function CTrim(s As String) As String


    If Right(s, 1) = vbLf Then
        s = Left(s, Len(s) - 1)
    End If
    If Right(s, 1) = vbCr Then
        s = Left(s, Len(s) - 1)
    End If
    If Right(s, 1) = "," Then
        s = Left(s, Len(s) - 1)
    End If
    
  
   
    If Left(s, 1) = vbCr Then
        s = Right(s, Len(s) - 1)
    End If
      If Left(s, 1) = vbLf Then
        s = Right(s, Len(s) - 1)
    End If
    If Left(s, 1) = "," Then
        s = Right(s, Len(s) - 1)
    End If

    CTrim = s
End Function

Sub UpdateLinkedIssuesStatus()

    Dim r As Range
    Dim h As Range
    Dim li As Range
    Dim s() As String
    Dim s1 As String
    Dim s3 As String
    Dim s4 As String
    Dim key As String
    Dim JsonString As String
    Dim JsonObject As Object
    Dim x, z As Integer
    Dim lic As Integer
    Dim fv As Object
    Dim rowCount As Integer
    Dim minusValue As Integer
    Dim s2 As String
    Dim sb As String
    Set r = Range("StartRow")
    Set h = Range("StartRow").Offset(-1, 0)
    Set li = h.EntireRow.find("Linked Issues")
    
    On Error GoTo gerr

    
    rowCount = 0
    lic = li.column - 1
     
    If li.Offset(0, 1).Value = "Linked Issues Summary" Then
      li.Offset(0, 1).EntireColumn.Delete
    End If
    If li.Offset(0, 1).Value = "Linked Issues Status" Then
      li.Offset(0, 1).EntireColumn.Delete
    End If
    If li.Offset(0, 1).Value = "Linked Issues Fixed Versions" Then
        li.Offset(0, 1).EntireColumn.Delete
    End If
    li.Offset(0, 1).EntireColumn.insert
    li.Offset(0, 1).Value = "Linked Issues Fixed Versions"
    li.Offset(0, 1).EntireColumn.insert
    li.Offset(0, 1).Value = "Linked Issues Status"
    li.Offset(0, 1).EntireColumn.insert
    li.Offset(0, 1).Value = "Linked Issues Summary"
    li.Offset(0, 1).ColumnWidth = 60
    li.Offset(0, 2).ColumnWidth = 30
    li.Offset(0, 3).ColumnWidth = 60
    
    ' likely a more elogant way to do this
    While LTrim(RTrim(r.Value)) <> ""
        rowCount = rowCount + 1
        Set r = r.Offset(1, 0)
    Wend
     Set r = Range("StartRow")
    minusValue = r.row - 1
    AppendStatus ("Updating linked issues status. For each issue checking each linked issue and making a call to Jira to get information on the linked issue.  Status and Fixed Version is then added to the respective columns in the worksheet for each linked issue.")
    While LTrim(RTrim(r.Value)) <> ""
        sb = "Updating linked issue " + CStr(r.row - minusValue) + " of " + CStr(rowCount) + " status."
        fStatus.AppendStatusBar (sb)
        fStatus.progress ((((r.row - 1) * 100 / (rowCount)) / 2) + 50)
        If r.Offset(0, lic).Value <> "" Then
            s = Split(r.Offset(0, lic).Value, ",")
            For x = LBound(s) To UBound(s)
                key = LTrim(RTrim(s(x)))
                If key <> "" Then
                  JsonString = GetIssue(key)
                  If (InStr(JsonString, "errorMessages") > 0) Then
                      Debug.Print key + " " + JsonString
                  Else
                      
                      Set JsonObject = JsonConverter.ParseJson(JsonString)
                    
                      s1 = s1 + JsonObject("fields")("status")("name")
                      s4 = JsonObject("fields")("summary")
                      If Len(s4) > 60 Then
                        s4 = Left(s4, 60) & "..."
                      End If
                      s3 = s3 + s4
                      
                      Set fv = JsonObject("fields")("fixVersions")
                      For z = 1 To fv.count
                      
                          s2 = CStr(s2) + "," + fv(z)("name")
                      Next z
                      s1 = s1 & vbCrLf
                      s3 = s3 & vbCrLf
                      s2 = s2 & vbCrLf
                  End If
                End If
            Next x
            
            
            r.Offset(0, lic + 1).Value = CTrim(s3)
            r.Offset(0, lic + 2).Value = CTrim(s1)
            s2 = CTrim(s2)
            
            s2 = Replace(s2, vbCrLf & ",", vbCrLf)
            r.Offset(0, lic + 3).Value = s2
            s1 = ""
            s2 = ""
            s3 = ""
        End If
        Set r = r.Offset(1, 0)
    Wend
    GoTo finish
gerr:
    AppendStatus ("oops something went wrong in UpdateLinkedIssues Status:" & Err.description)
finish:
    fStatus.AppendStatus ("Finished updating Linked issues status.")
    
End Sub
'Sub UpdateStatus(control As IRibbonControl)
'    Call UpdateLinkedIssuesStatus
'
'
'End Sub
Attribute VB_Name = "regXLib"
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:53 AM : from manifest:5028829 gist https://gist.github.com/brucemcpherson/3414836/raw/regXLib.vba
Option Explicit
' v2.02
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Public Function rxString(sname As String, s As String, Optional ignorecase As Boolean = True) As String
    Dim rx As cregXLib
    ' create a new regx
    Set rx = rxMakeRxLib(sname)
    rx.ignorecase = ignorecase
    ' extract the string that matches the requested pattern
    rxString = rx.getString(s)

End Function
Public Function rxGroup(sname As String, s As String, group As Long, Optional ignorecase As Boolean = True) As String
    Dim rx As cregXLib
    ' create a new regx
    Set rx = rxMakeRxLib(sname)
    rx.ignorecase = ignorecase
    ' extract the string that matches the requested pattern
    rxGroup = rx.getGroup(s, group)

End Function
Public Function rxTest(sname As String, s As String, Optional ignorecase As Boolean = True) As Boolean
    Dim rx As cregXLib
    ' create a new regx
    Set rx = rxMakeRxLib(sname)
    rx.ignorecase = ignorecase
    ' extract the string that matches the requested pattern
    rxTest = rx.getTest(s)

End Function
Public Function rxReplace(sname As String, sFrom As String, sTo As String, Optional ignorecase As Boolean = True) As String
    Dim rx As cregXLib
     ' create a new regx
    Set rx = rxMakeRxLib(sname)
    rx.ignorecase = ignorecase
    ' replace the string that matches the requested pattern
    rxReplace = rx.getReplace(sFrom, sTo)
    
End Function
Public Function rxPattern(sname As String) As String
    Dim rx As cregXLib
     ' create a new regx
    Set rx = rxMakeRxLib(sname)
    ' just returnthe pattern
    rxPattern = rx.Pattern
    
End Function
 Function rxMakeRxLib(sname As String) As cregXLib
    Dim rx As cregXLib, s As String
    Set rx = New cregXLib
    ' normally sname points to a preselected regEX
    ' if not known, silently assume its a regex pattern
        s = Replace(UCase(sname), " ", "")
        Select Case s
            Case "POSTALCODEUK"
                rx.init s, _
                "(((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] |" & _
                " JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) |" & _
                " (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)"
            
            Case "POSTALCODESPAIN"
                rx.init s, _
                    "^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$"
                    
            Case "PHONENUMBERUS"
                rx.init s, _
                "^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$"
                
            Case "CREDITCARD" 'amex/visa/mastercard
                rx.init s, _
                "^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}"
                
            Case "NUMERIC"
                rx.init s, _
                    "[\0-9]"
            
            Case "ALPHABETIC"
                rx.init s, _
                    "[\a-zA-Z]"
                    
            Case "NONNUMERIC"
                rx.init s, _
                    "[^\0-9]"
                    
            Case "IPADDRESS"
                rx.init s, _
                "^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$"
            
            Case "SINGLESPACE"  ' should take a replace value of "$1 "
                rx.init s, _
                    "(\S+)\x20{2,}(?=\S+)"
            
            Case "EMAIL"
                rx.init s, _
                    "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$"
                    
            Case "EMAILINSIDE"
                rx.init s, _
                    "\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b"
                    
            Case "NONPRINTABLE"
                rx.init s, "[\x00-\x1F\x7F]"
                
                
            Case "PUNCTUATION"
                rx.init s, "[^A-Za-z0-9\x20]+"

            Case Else
                rx.init "Adhoc", sname
        
        End Select
    
    Set rxMakeRxLib = rx
End Function




Attribute VB_Name = "stock_menu"
Attribute VB_Base = "0{7E2DCC98-443D-41CF-BC77-6AD0E58D0203}{BC1D1399-5B93-454D-AC79-5A930AEBEA70}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ListBox1_Click()

End Sub

Private Sub UserForm_Initialize()
'Author       : Ken Puls (www.excelguru.ca)
'Macro Purpose: To populate a multi-column listbox with data from
'               a worksheet range
    
    Dim lbtarget As MSForms.ListBox
    Dim rngSource As Range
    
    'Set reference to the range of data to be filled
    Set rngSource = Worksheets("Help").Range("H27:I41")
    
    'Fill the listbox
    Set lbtarget = Me.ListBox1
    With lbtarget
        'Determine number of columns
        .ColumnCount = 3
        'Set column widths
        .ColumnWidths = "50;100"
        'Insert the range of data supplied
        .list = rngSource.Cells.Value
    End With
    
End Sub

Attribute VB_Name = "test"
Option Explicit

Public usernamep As String
Dim url As String
Dim noauth As Boolean
Public Sub RestLogin()
    usernamep = ""
End Sub
Public Function GetUrl() As String
    GetUrl = url
End Function

Public Function gtExampleLoad()
' this is an example of how you would load your VBE with a particular manifest
' you could set the 2nd parameter to overrride conflict checking the first time used-

' we are going to need cDataSet and cjobject stuff as well
  gtDoit "3414394", True
  
' this one loads the class serializer
  gtDoit "5028829", True
  gtDoit "5019927", True
  
End Function
Function UpdateTicketJson(r As Range) As String
   '  { "update": { "labels": [{"remove": "test" }] } }
    Dim jm As cJobject
    Dim s As String
    Dim d As String
    Set jm = New cJobject
    With jm.init(Nothing)
    
     With .add.addArray '.add("update")
     'With .add("priority")
     '           With .add.addArray
     '               With .add
     '               .add "Set", r.Offset(0, 5).value
     '               End With
     '           End With
    'End With
                '{"update":{"labels":[{"add":"Test"} ],"watchers":["scz17660","scz17660" ]}}
                
            With .add("Source")
                .add "", "VB"
            End With
                

    End With
    End With
    Debug.Print jm.stringify
    UpdateTicketJson = jm.stringify
End Function

Function CreateJsonTicket(r As Range) As String

    Dim jm As cJobject
    Dim s As String
    Dim d As String
    Dim dd As String
    Set jm = New cJobject
    With jm.init(Nothing)

            ' add an array member
            With .add("fields")
                ' add an object to this array member
                With .add("project")
                .add "key", r.Value
                End With
                                
                s = (r.Offset(0, 2).Value)
                d = r.Offset(0, 3).Value
                'd = d & vbNewLine & vbNewLine & r.Offset(0, 7).Value
                
                If Len(s) > 254 Then
                    d = d + vbNewLine + s
                    s = Mid(s, 1, 254)
                    .add "summary", s
                Else
                
                    .add "summary", s
                End If
                If r.Offset(0, 3).Value = "" Then
                .add "description", ""
                Else
                .add "description", d
                End If
            
                With .add("issuetype")
                    .add "name", r.Offset(0, 1).Value
                End With
                
                dd = r.Offset(0, 4).Value
                
                With .add("")
                    .add "duedate", dd
                End With
                
                
                With .add("assignee")
                    .add "name", "scz17660"
                    .add "key", "scz17660"
                End With

            End With
            
            r.Offset(0, id.column - 1).Value = JsonObject("id")
            r.Offset(0, id.column).Value = JsonObject("key")
            r.Offset(0, id.column + 1).Value = JsonObject("self")
            
    End With
    'Debug.Print jm.stringify
    CreateJsonTicket = Replace(jm.stringify, Chr(13) + Chr(10), "\n")
    
End Function

Sub CreateTickets()
    Dim r As Range
    Dim h As Range
    Dim li As Range
    Dim s() As String
    Dim key As String
    Dim JsonString As String
    Dim JsonUpdate As String
    Dim JsonObject As Object
    Dim x, z As Integer
    Dim lic As Integer
    Dim fv As Object
    Dim id As Range
    Dim rowCount As Integer
    Dim JsonCreate As String
    Set r = Range("Create!$A$2")
    Set h = Range("Create!1:1")
    Set id = h.find("id")
    
    rowCount = 0
  
    ' likely a more elogant way to do this
    While LTrim(RTrim(r.Value)) <> ""
        rowCount = rowCount + 1
        Set r = r.Offset(1, 0)
    Wend
     'Set r = Range("Create!$A$2")
    
    While LTrim(RTrim(r.Value)) <> ""
        'Application.statusBar = "Creating " + CStr(r.row - 1) + " of " + CStr(rowCount) + " tickets."
        JsonCreate = CreateJsonTicket(1)
      
        
        JsonString = JiraCreateTicket(JsonCreate)
        If (InStr(JsonString, "errorMessages") > 0) Then
            Debug.Print key + " " + JsonString
            r.Offset(0, id.column + 2).Value = JsonCreate
            r.Offset(0, id.column + 3).Value = JsonString
        Else
        
            Set JsonObject = JsonConverter.ParseJson(JsonString)
        
            
        
            JsonUpdate = UpdateTicketJson(r)
            JsonString = JiraUpdateTicket(JsonUpdate, r.Offset(0, id.column).Value)
            
            If (InStr(JsonString, "errorMessages") > 0) Then
                Debug.Print "Error updating:" + key + " " + JsonString
                r.Offset(0, id.column + 4).Value = JsonCreate
                r.Offset(0, id.column + 5).Value = JsonString
        
            End If
        End If
        
        Set r = r.Offset(1, 0)
    Wend
    Application.statusBar = False

End Sub

Public Function UserPassBase64() As String
    Dim objXML       As MSXML2.DOMDocument60
    Dim objNode      As MSXML2.IXMLDOMElement
    Dim arrData()    As Byte
    
    If usernamep = "" Or usernamep = "cancel" Then
        fLogin.Show
        If (fLogin.Cancel = False) Then
            usernamep = fLogin.txtUsername.Value + ":" + fLogin.txtPassword.Value
            url = Worksheets("API").Range("ServerNames") 'fLogin.txtServer.Value
            'noauth = fLogin.cbNoAuth.Value
            'If noauth = True Then
            '    UserPassBase64 = "NoAuth"
            '    usernamep = "NoAuth"
            'Else
                arrData = StrConv(usernamep, vbFromUnicode)
                Set objXML = New MSXML2.DOMDocument60
                Set objNode = objXML.createElement("b64")
                objNode.DataType = "bin.base64"
                objNode.nodeTypedValue = arrData
                UserPassBase64 = objNode.Text
            'End If
        Else
            UserPassBase64 = "cancel"
        End If
    Else
        UserPassBase64 = usernamep
    End If
    
End Function
Public Function JiraUpdateTicket(JsonUpdate As String, issueKey As String) As String
 
 Dim JiraService As New MSXML2.XMLHTTP60
    Dim json As Object
 
    usernamep = UserPassBase64
    If usernamep = "" Then
        MsgBox ("Oops something went wrong with getting username and password.")
    Else
        With JiraService
        'http://MYJIRA.INSTALL.COM:8080/rest/api/2/issue/ISSUE-KEY/editmeta
        .Open "POST", "https://rinku.sysmex.cz/" + "/rest/api/2/issue/" + issueKey, False
        .SetRequestHeader "Content-Type", "application/json"
        .SetRequestHeader "Accept", "application/json"
        
        .SetRequestHeader "Authorization", "Basic " & usernamep
        
        'JsonUpdate =
      On Error Resume Next
        .Send JsonUpdate
        On Error GoTo 0
        Application.DisplayAlerts = True
        'MsgBox .Status
        If .Status = "401" Then
            'MsgBox "Not authorized or invalid username/password"\
            Debug.Print "Issue not created"
            JiraUpdateTicket = ""
        Else
            
             JiraUpdateTicket = JiraService.ResponseText
            
        End If
        
        End With
        
    End If
End Function
Public Function JiraCreateTicket(JsonCreate As String) As String
    Dim JiraService As New MSXML2.XMLHTTP60
    Dim json As Object
    
    
    usernamep = UserPassBase64
    If usernamep = "" Then
        MsgBox ("Oops something went wrong with getting username and password.")
    Else
        With JiraService
        .Open "POST", "https://rinku.sysmex.cz" + "/rest/api/2/issue/", False
        .SetRequestHeader "Content-Type", "application/json"
        '.SetRequestHeader "Accept", "application/json"
        'JsonCreate = "{"fields":{"project":{"name":"IT"},"summary":"TEST","description":"TESTSTSTTS","issuetype":{"name":"|fffd|kol"}}}"
        '.SetRequestHeader "content-Type", "X-AtlassianToken:nocheck"
        .SetRequestHeader "Origin", "https://rinku.sysmex.cz/"
        
        .SetRequestHeader "Authorization", "Basic " & usernamep
        .Send JsonCreate
        'MsgBox .Status
        If .Status = "401" Then
            'MsgBox "Not authorized or invalid username/password"\
            Debug.Print "Issue not created"
            JiraCreateTicket = ""
        Else
            
             JiraCreateTicket = JiraService.ResponseText
            
        End If
        End With
    End If
End Function
Public Function GetIssue(issueKey As String) As String

    Dim JiraService As New MSXML2.XMLHTTP60
    Dim json As Object

     
    usernamep = UserPassBase64
    If usernamep = "cancel" Then
       fStatus.AppendStatus ("User canceled login.")
    Else
        With JiraService
        .Open "GET", url + "/rest/api/2/issue/" + issueKey, False
        .SetRequestHeader "Content-Type", "application/json"
        .SetRequestHeader "Accept", "application/json"
        
             If usernamep = "NoAuth" Then
                .SetRequestHeader "Authorization", "No Auth"
             Else
                .SetRequestHeader "Authorization", "Basic " & usernamep
             End If
        .Send ""
        'MsgBox .Status
        If .Status = "401" Then
            'MsgBox "Not authorized or invalid username/password"\
            Debug.Print "Issue not found:" + issueKey
            GetIssue = ""
        Else
            
             GetIssue = JiraService.ResponseText
            
        End If
        End With
    End If
End Function


Function MyDocuments() As String

    'Returns the path of My Documents folder.

    MyDocuments = Environ("USERPROFILE") & "\My Documents"

End Function




' todo: remove IsArray not sure it's used.
'Private Function IsArray(Value As Variant) As Boolean
'    If Not IsEmpty(Value) Then
'        If IsObject(Value) Then
'            If TypeOf Value Is Collection Then
'                IsArray = True
'            End If
'        ElseIf VarType(Value) = vbArray Or VarType(Value) = 8204 Then
'            ' VarType = 8204 seems to arise from Array(...) constructor
'            IsArray = True
'        End If
'    End If
'End Function


Public Sub JiraUpdate_watchers()
 Dim JsonUpdate As String
 Dim issueKey As String
 Dim response As String
'JsonUpdate = "{""update"" : {""assignee"" : [{""set"" : {""username"" : ""scz75270""}}]}}"
JsonUpdate = """SSK22310""" '"{""watchers"":[{""key"":""scz75270""}]"
issueKey = "SRV-3002"

 Dim JiraService As New MSXML2.XMLHTTP60
    Dim json As Object
 
    usernamep = UserPassBase64
    If usernamep = "" Then
        MsgBox ("Oops something went wrong with getting username and password.")
    Else
        With JiraService
        'http://MYJIRA.INSTALL.COM:8080/rest/api/2/issue/ISSUE-KEY/editmeta
        .Open "POST", "https://rinku.sysmex.cz/" + "rest/api/2/issue/" + issueKey + "/watchers", False
        .SetRequestHeader "Content-Type", "application/json"
        .SetRequestHeader "Accept", "application/json"
        .SetRequestHeader "Origin", "https://rinku.sysmex.cz/"
        .SetRequestHeader "Authorization", "Basic " & usernamep
        
        
      On Error Resume Next
        .Send JsonUpdate
        On Error GoTo 0
        Application.DisplayAlerts = True
        'MsgBox .Status
        If .Status = "401" Then
            'MsgBox "Not authorized or invalid username/password"\
            Debug.Print "Issue not created"
            'JiraUpdateTicket2 = ""
        Else
            
             response = JiraService.ResponseText
            
        End If
        
        End With
        
    End If
End Sub

Public Sub JiraUpdate_source()
 Dim JsonUpdate As String
 Dim issueKey As String
 Dim response As String
'JsonUpdate = "{""update"" : {""assignee"" : [{""set"" : {""username"" : ""scz75270""}}]}}"
JsonUpdate = """update"":<JemhXmlData>" & vbNewLine & _
"<Entries>" & vbNewLine & _
"<Entry>" & vbNewLine & _
"<Key>source</Key>" & vbNewLine & _
"<Values>" & vbNewLine & _
"<string>VB</string>" & vbNewLine & _
"</Values>" & vbNewLine & _
"</Entry>" & vbNewLine & _
"<Entries>" & vbNewLine & _
"<JemhXmlData>"
'"{""update"":{""customfield_10826"":[{""edit"":{""value"":""VB""","id":"10555"}}]}" ',""id"":""10555""
issueKey = "SRV-3002"

 Dim JiraService As New MSXML2.XMLHTTP60
    Dim json As Object
 
    usernamep = UserPassBase64
    If usernamep = "" Then
        MsgBox ("Oops something went wrong with getting username and password.")
    Else
        With JiraService
        'http://MYJIRA.INSTALL.COM:8080/rest/api/2/issue/ISSUE-KEY/editmeta
        .Open "SEND", "https://rinku.sysmex.cz/" + "rest/api/2/issue/" + issueKey, False
        .SetRequestHeader "Content-Type", "application/json"
        .SetRequestHeader "Accept", "application/json"
        .SetRequestHeader "Origin", "https://rinku.sysmex.cz/"
        .SetRequestHeader "Authorization", "Basic " & usernamep
        
        
      On Error Resume Next
        .Send JsonUpdate
        On Error GoTo 0
        Application.DisplayAlerts = True
        'MsgBox .Status
        If .Status = "401" Then
            'MsgBox "Not authorized or invalid username/password"\
            Debug.Print "Issue not created"
            'JiraUpdateTicket2 = ""
        Else
            
             response = JiraService.ResponseText
            
        End If
        
        End With
        
    End If
End Sub
Attribute VB_Name = "usefulStuff"
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:49 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414346/raw
Option Explicit
' v2.23  3414346

' Acknowledgement for the microtimer procedures used here to
' thanks to Charles Wheeler - http://www.decisionmodels.com/
' ---


#If VBA7 And Win64 Then

Private Declare PtrSafe Function getTickCount _
    Lib "kernel32" Alias "QueryPerformanceCounter" (cyTickCount As Currency) As Long

Private Declare PtrSafe Function getFrequency _
    Lib "kernel32" Alias "QueryPerformanceFrequency" (cyFrequency As Currency) As Long
    
Private Declare PtrSafe Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hWnd As Long, _
  ByVal Operation As String, _
  ByVal FileName As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMaximizedFocus _
  ) As Longlong
  
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" ( _
    ByVal CodePage As Longlong, ByVal dwflags As Longlong, _
    ByVal lpWideCharStr As Longlong, ByVal cchWideChar As Longlong, _
    ByVal lpMultiByteStr As Longlong, ByVal cchMultiByte As Longlong, _
    ByVal lpDefaultChar As Longlong, ByVal lpUsedDefaultChar As Longlong) As Longlong
    
    
#Else

Private Declare Function getTickCount Lib "kernel32" Alias "QueryPerformanceCounter" (cyTickCount As Currency) As Long
Private Declare Function getFrequency Lib "kernel32" Alias "QueryPerformanceFrequency" (cyFrequency As Currency) As Long
Private Declare Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hWnd As Long, _
  ByVal Operation As String, _
  ByVal FileName As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMaximizedFocus _
  ) As Long
  
Private Declare Function WideCharToMultiByte Lib "kernel32" ( _
    ByVal CodePage As Long, ByVal dwflags As Long, _
    ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, _
    ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, _
    ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
    
#End If

' note original execute shell stuff came from this post
' http://stackoverflow.com/questions/3166265/open-an-html-page-in-default-browser-with-vba
' thanks to http://stackoverflow.com/users/174718/dmr

Private Const CP_UTF8 = 65001
Public Const cFailedtoGetHandle = -1
Public Function nameExists(s As String) As name
    On Error GoTo handle
    Set nameExists = ActiveWorkbook.Names(s)
    Exit Function
handle:
    Set nameExists = Nothing
End Function
Public Function whereIsThis(r As Variant) As Range
    Dim n As name
    
    If TypeName(r) = "range" Then
        Set whereIsThis = r
    Else
        Set n = nameExists(CStr(r))
        If Not n Is Nothing Then
            Set whereIsThis = n.RefersToRange
        Else
            Set whereIsThis = Range(r)
        End If
    End If
            
        
End Function
Public Function OpenUrl(url) As Boolean
    #If VBA7 And Win64 Then
    Dim lSuccess As Longlong
    #Else
    Dim lSuccess As Long
    #End If
    lSuccess = ShellExecute(0, "Open", url)
    OpenUrl = lSuccess > 32
End Function

Function firstCell(inrange As Range) As Range
    Set firstCell = inrange.Cells(1, 1)
End Function
Function lastCell(inrange As Range) As Range
    Set lastCell = inrange.Cells(inrange.rows.count, inrange.columns.count)
End Function
Function isSheet(o As Object) As Boolean
     Dim r As Range
     On Error GoTo handleError
        Set r = o.Cells
        isSheet = True
        Exit Function

handleError:
    isSheet = False
End Function
Public Function findShape(sname As String, Optional ws As Worksheet = Nothing) As Shape
    Dim s As Shape, t As Shape
    If ws Is Nothing Then Set ws = ActiveSheet
    For Each s In ws.Shapes
        If makeKey(s.name) = makeKey(sname) Then
            Set t = s
            Exit For
        End If
        If s.Type = msoGroup Then
            Set t = findRecurse(sname, s.GroupItems)
            If Not t Is Nothing Then
                Exit For
            End If
        End If
    Next s
    Set findShape = t
    
End Function
Public Function findRecurse(Target As String, co As GroupShapes) As Shape
    Dim s As Shape, t As Shape
    ' only works one level down.. cant get .gtoupitems to work properly
    For Each s In co
        If makeKey(s.name) = makeKey(Target) Then
            Set t = s
            Exit For
        End If
    Next s
    Set findRecurse = t
End Function
Public Sub clearHyperLinks(ws As Worksheet)
' delete all the hyperlinks on a sheet
    With ws
        While .Hyperlinks.count > 0
           .Hyperlinks(1).Delete
        Wend
    End With
End Sub
Function sheetExists(sname As String, Optional complain As Boolean = True) As Worksheet
    
    On Error GoTo handleError
        Set sheetExists = Sheets(sname)
        Exit Function

handleError:
    If complain Then MsgBox ("Could not open sheet " & sname)
    Set sheetExists = Nothing

End Function
Function wholeSheet(wn As String) As Range
    ' return a range representing the entire used worksheet
    Set wholeSheet = wholeWs(sheetExists(wn))
End Function
Function wholeWs(ws As Worksheet) As Range
    Set wholeWs = ws.UsedRange
End Function
Function wholeRange(r As Range) As Range
    Set wholeRange = wholeWs(r.Worksheet)
End Function
Function cleanFind(x As Variant, r As Range, Optional complain As Boolean = False, _
        Optional singlecell As Boolean = False) As Range
    ' does a normal .find, but catches where range is nothing
    Dim u As Range
    Set u = Nothing

    If r Is Nothing Then
        Set u = Nothing
    Else
        Set u = r.find(x, , xlValues, xlWhole)
    End If
    
    If singlecell And Not u Is Nothing Then
        Set u = firstCell(u)
    End If
 
    If complain And u Is Nothing Then
        Call msglost(x, r)
    End If
    
    Set cleanFind = u
    
End Function
Sub msglost(x As Variant, r As Range, Optional extra As String = "")

    MsgBox ("Couldnt find " & CStr(x) & " in " & SAd(r) & " " & extra)

End Sub
Function SAd(rngIn As Range, Optional Target As Range = Nothing, Optional singlecell As Boolean = False, _
        Optional removeRowDollar As Boolean = False, Optional removeColDollar As Boolean = False) As String
    Dim strA As String
    Dim r As Range
    Dim u As Range
    
    ' creates an address including the worksheet name
    strA = ""
    For Each r In rngIn.Areas
        Set u = r
        If singlecell Then
            Set u = firstCell(u)
        End If
        strA = strA + SAdOneRange(u, Target, singlecell, removeRowDollar, removeColDollar) & ","
    Next r
    SAd = Left(strA, Len(strA) - 1)
End Function
Function SAdOneRange(rngIn As Range, Optional Target As Range = Nothing, Optional singlecell As Boolean = False, _
                        Optional removeRowDollar As Boolean = False, Optional removeColDollar As Boolean = False) As String
    Dim strA As String
    
    ' creates an address including the worksheet name
    
    strA = AddressNoDollars(rngIn, removeRowDollar, removeColDollar)
    
    ' dont bother with worksheet name if its on the same sheet, and its been asked to do that
    
    If Not Target Is Nothing Then
        If Target.Worksheet Is rngIn.Worksheet Then
            SAdOneRange = strA
            Exit Function
        End If
    End If

    ' otherwise add the sheet name
    
    SAdOneRange = "'" & rngIn.Worksheet.name & "'!" & strA
        
End Function
Function AddressNoDollars(a As Range, Optional doRow As Boolean = True, Optional doColumn As Boolean = True) As String
' return address minus the dollars
    Dim st As String
    Dim p1 As Long, p2 As Long
    AddressNoDollars = a.Address
    
    If doRow And doColumn Then
        AddressNoDollars = Replace(a.Address, "$", "")
    Else
        p1 = InStr(1, a.Address, "$")
        p2 = 0
        If p1 > 0 Then
            p2 = InStr(p1 + 1, a.Address, "$")
        End If
        ' turn $A$1 into A$1
        If doColumn And p1 > 0 Then
            AddressNoDollars = Left(a.Address, p1 - 1) & Mid(a.Address, p1 + 1)
        
        ' turn $a$1 into $a1
        ElseIf doRow And p2 > 0 Then
            AddressNoDollars = Left(a.Address, p2 - 1) & Mid(a.Address, p2 + 1, p2 - p1)
    
        End If
    End If
    
    
End Function
Function isReallyEmpty(r As Range) As Boolean
    Dim b As Boolean
    b = (Application.CountBlank(r) = r.Cells.count)

    isReallyEmpty = b
End Function
Function toEmptyRow(r As Range) As Range
    Dim o As Range, u As Range, w As Long
    ' returns to first blank row
    Set u = wholeRange(r)
    Set o = r
    w = lastCell(u).row + 1
    Do While True
        ' whats left in the sheet
        Set o = cleanFind(Empty, o.Resize(w, 1), True, True)
        If isReallyEmpty(o.Resize(1, r.columns.count)) Then
            Exit Do
        Else
            Set o = o.Offset(1)
        End If
    Loop

    If (o.row > lastCell(r).row And r.rows.count > 1) Then
        Set toEmptyRow = r
    Else
        If o.row > r.row Then
            Set toEmptyRow = r.Resize(o.row - r.row)
        Else
            MsgBox ("nothing on sheet")
            Set toEmptyRow = Nothing
        End If
    End If
    
End Function
Function toEmptyCol(r As Range) As Range

    Dim o As Range, u As Range, w As Long
    ' returns to first blank column
    Set u = wholeRange(r)
    Set o = r
    w = lastCell(u).column + 1
    Do While True
        Set o = cleanFind(Empty, o.Resize(1, w), True, True)
        If isReallyEmpty(toEmptyRow(o)) Then
            Exit Do
        Else
            Set o = o.Offset(, 1)
        End If
    Loop
    If (o.column > r.column) Then
        Set toEmptyCol = r.Resize(r.rows.count, o.column - r.column)
    End If
End Function
Function toEmptyBox(r As Range) As Range
    Set toEmptyBox = toEmptyCol(toEmptyRow(r))
End Function
Public Function getLikelyColumnRange(Optional ws As Worksheet = Nothing) As Range
    ' figure out the likely default value for the refedit.
    Dim rstart As Range
    If ws Is Nothing Then
        Set rstart = wholeSheet(ActiveSheet.name)
    Else
        Set rstart = wholeSheet(ws.name)
    End If

    Set getLikelyColumnRange = toEmptyBox(rstart)
    
End Function
Sub deleteAllFromCollection(co As Collection)
    Dim o As Object, I As Long
    For I = co.count To 1 Step -1
        co(I).Delete
    Next I
    
End Sub
Sub deleteAllShapes(r As Range, startingwith As String)
   
    Dim l As Long
    With r.Worksheet
        For l = .Shapes.count To 1 Step -1
            If Left(.Shapes(l).name, Len(startingwith)) = startingwith Then
                .Shapes(l).Delete
            End If
        Next l
    End With
    
End Sub
Function makearangeofShapes(r As Range, startingwith As String) As ShapeRange
   
    Dim s As Shape
    
    Dim n() As String, sz As Long
    With r.Worksheet
        For Each s In .Shapes
            If Left(s.name, Len(startingwith)) = startingwith Then
                sz = sz + 1
                ReDim Preserve n(1 To sz) As String
                n(sz) = s.name

            End If
        Next s
        Set makearangeofShapes = .Shapes.Range(n)
    End With
    
End Function


Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
#If VBA7 And Win64 Then
    Dim lLength As Longlong
#Else
    Dim lLength As Long
#End If
If UTF16 <> "" Then
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
    sBuffer = Space$(CLng(lLength))
    lLength = WideCharToMultiByte( _
        CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
    sBuffer = StrConv(sBuffer, vbUnicode)
    UTF16To8 = Left$(sBuffer, CLng(lLength - 1))
Else
    UTF16To8 = ""
End If
End Function




Public Function URLEncode( _
   StringVal As String, _
   Optional SpaceAsPlus As Boolean = False, _
   Optional UTF8Encode As Boolean = True _
) As String

Dim StringValCopy As String: StringValCopy = _
    IIf(UTF8Encode, UTF16To8(StringVal), StringVal)
Dim StringLen As Long: StringLen = Len(StringValCopy)

If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim I As Long, CharCode As Integer
    Dim Char As String, Space As String

  If SpaceAsPlus Then Space = "+" Else Space = "%20"

  For I = 1 To StringLen
    Char = Mid$(StringValCopy, I, 1)
    CharCode = Asc(Char)
    Select Case CharCode
      Case 97 To 122, 65 To 90, 48 To 57, 45, 46, 95, 126
        result(I) = Char
      Case 32
        result(I) = Space
      Case 0 To 15
        result(I) = "%0" & Hex(CharCode)
      Case Else
        result(I) = "%" & Hex(CharCode)
    End Select
  Next I
  URLEncode = Join(result, "")

End If
End Function
Public Sub cloneFormat(b As Range, a As Range)
    
    ' this probably needs additional properties copied over
    With a.Interior
        .Color = b.Interior.Color
    End With
    With a.Font
        .Color = b.Font.Color
        .size = b.Font.size
    End With
    With a
        .HorizontalAlignment = b.HorizontalAlignment
        .VerticalAlignment = b.VerticalAlignment
        
    End With

End Sub
' sort a collection
Function SortColl(ByRef coll As Collection, eorder As Long) As Long
    Dim ita As Long, itb As Long
    Dim va As Variant, vb As Variant, bSwap As Boolean
    Dim x As Object, y As Object
    
    For ita = 1 To coll.count - 1
        For itb = ita + 1 To coll.count
            Set x = coll(ita)
            Set y = coll(itb)
            bSwap = x.needSwap(y, eorder)
            If bSwap Then
                With coll
                    Set va = coll(ita)
                    Set vb = coll(itb)
                    .add va, , itb
                    .add vb, , ita
                    .remove ita + 1
                    .remove itb + 1
                End With
            End If
        Next
    Next
End Function
Public Function getHandle(sname As String, Optional readOnly As Boolean = False) As Integer
    Dim hand As Integer
    On Error GoTo handleError
        hand = FreeFile
        If (readOnly) Then
            Open sname For Input As hand
        Else
            Open sname For Output As hand
        End If
        getHandle = hand
        Exit Function

handleError:
    MsgBox ("Could not open file " & sname)
    getHandle = cFailedtoGetHandle
End Function
Function afConcat(arr() As Variant) As String
    Dim I As Long, s As String
    s = ""
    For I = LBound(arr) To UBound(arr)
        s = s & arr(I, 1) & "|"
    Next I
    afConcat = s
End Function
Public Function quote(s As String) As String
    quote = q & s & q
End Function
Public Function q() As String
    q = Chr(34)
End Function
Public Function qs() As String
    qs = Chr(39)
End Function
Public Function bracket(s As String) As String
    bracket = "(" & s & ")"
End Function
Public Function list(ParamArray args() As Variant) As String
    Dim I As Long, s As String
    s = vbNullString
    For I = LBound(args) To UBound(args)
        If s <> vbNullString Then s = s & ","
        s = s & CStr(args(I))
    Next I
    list = s
End Function

Public Function qlist(ParamArray args() As Variant) As String
    Dim I As Long, s As String
    s = vbNullString
    For I = LBound(args) To UBound(args)
        If s <> vbNullString Then s = s & ","
        s = s & quote(CStr(args(I)))
    Next I
    qlist = s
End Function
Public Function diminishingReturn(val As Double, Optional s As Double = 10) As Double
    diminishingReturn = Sgn(val) * s * (Sqr(2 * (Sgn(val) * val / s) + 1) - 1)
End Function

Sub pivotCacheRefreshAll()

    Dim pc As PivotCache
    Dim ws As Worksheet

    With ActiveWorkbook
        For Each pc In .PivotCaches
            pc.refresh
        Next pc
    End With

End Sub
Public Function makeKey(v As Variant) As String
    makeKey = LCase(Trim(CStr(v)))
End Function
' The below is taken from http://stackoverflow.com/questions/496751/base64-encode-string-in-vbscript
Function Base64Encode(sText)
    Dim oXML, oNode
    Set oXML = CreateObject("Msxml2.DOMDocument.3.0")
    Set oNode = oXML.createElement("base64")
    oNode.DataType = "bin.base64"
    oNode.nodeTypedValue = Stream_StringToBinary(sText)
    Base64Encode = oNode.Text
    Set oNode = Nothing
    Set oXML = Nothing
End Function
'Stream_StringToBinary Function
'2003 Antonin Foller, http://www.motobit.com
'Text - string parameter To convert To binary data
Function Stream_StringToBinary(Text)
  Const adTypeText = 2
  Const adTypeBinary = 1

  'Create Stream object
  Dim BinaryStream 'As New Stream
  Set BinaryStream = CreateObject("ADODB.Stream")

  'Specify stream type - we want To save text/string data.
  BinaryStream.Type = adTypeText

  'Specify charset For the source text (unicode) data.
  BinaryStream.Charset = "us-ascii"

  'Open the stream And write text/string data To the object
  BinaryStream.Open
  BinaryStream.WriteText Text

  'Change stream type To binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeBinary

  'Ignore first two bytes - sign of
  BinaryStream.Position = 0

  'Open the stream And get binary data from the object
  Stream_StringToBinary = BinaryStream.Read

  Set BinaryStream = Nothing
End Function

'Stream_BinaryToString Function
'2003 Antonin Foller, http://www.motobit.com
'Binary - VT_UI1 | VT_ARRAY data To convert To a string
Function Stream_BinaryToString(Binary)
  Const adTypeText = 2
  Const adTypeBinary = 1

  'Create Stream object
  Dim BinaryStream 'As New Stream
  Set BinaryStream = CreateObject("ADODB.Stream")

  'Specify stream type - we want To save text/string data.
  BinaryStream.Type = adTypeBinary

  'Open the stream And write text/string data To the object
  BinaryStream.Open
  BinaryStream.Write Binary

  'Change stream type To binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeText

  'Specify charset For the source text (unicode) data.
  BinaryStream.Charset = "us-ascii"

  'Open the stream And get binary data from the object
  Stream_BinaryToString = BinaryStream.ReadText
  Set BinaryStream = Nothing
End Function
' Decodes a base-64 encoded string (BSTR type).
' 1999 - 2004 Antonin Foller, http://www.motobit.com
' 1.01 - solves problem with Access And 'Compare Database' (InStr)
Function Base64Decode(ByVal base64String)
  'rfc1521
  '1999 Antonin Foller, Motobit Software, http://Motobit.cz
  Const Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  Dim dataLength, sOut, groupBegin
  
  'remove white spaces, If any
  base64String = Replace(base64String, vbCrLf, "")
  base64String = Replace(base64String, vbTab, "")
  base64String = Replace(base64String, " ", "")
  
  'The source must consists from groups with Len of 4 chars
  dataLength = Len(base64String)
  If dataLength Mod 4 <> 0 Then
    Err.Raise 1, "Base64Decode", "Bad Base64 string."
    Exit Function
  End If

  
  ' Now decode each group:
  For groupBegin = 1 To dataLength Step 4
    Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
    ' Each data group encodes up To 3 actual bytes.
    numDataBytes = 3
    nGroup = 0

    For CharCounter = 0 To 3
      ' Convert each character into 6 bits of data, And add it To
      ' an integer For temporary storage.  If a character is a '=', there
      ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
      ' the whole string.)

      thisChar = Mid(base64String, groupBegin + CharCounter, 1)

      If thisChar = "=" Then
        numDataBytes = numDataBytes - 1
        thisData = 0
      Else
        thisData = InStr(1, Base64, thisChar, vbBinaryCompare) - 1
      End If
      If thisData = -1 Then
        Err.Raise 2, "Base64Decode", "Bad character In Base64 string."
        Exit Function
      End If

      nGroup = 64 * nGroup + thisData
    Next
    
    'Hex splits the long To 6 groups with 4 bits
    nGroup = Hex(nGroup)
    
    'Add leading zeros
    nGroup = String(6 - Len(nGroup), "0") & nGroup
    
    'Convert the 3 byte hex integer (6 chars) To 3 characters
    pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + _
      Chr(CByte("&H" & Mid(nGroup, 3, 2))) + _
      Chr(CByte("&H" & Mid(nGroup, 5, 2)))
    
    'add numDataBytes characters To out string
    sOut = sOut & Left(pOut, numDataBytes)
  Next

  Base64Decode = sOut
End Function
Public Function openNewHtml(sname As String, sContent As String) As Boolean
    Dim handle As Integer

    handle = getHandle(sname)
    If (handle <> cFailedtoGetHandle) Then
        Print #handle, sContent
        Close #handle
        openNewHtml = True
    End If

End Function
Public Function readFromFile(sname As String) As String
    Dim handle As Integer
    handle = getHandle(sname, True)
    If (handle <> cFailedtoGetHandle) Then
        readFromFile = Input$(LOF(handle), #handle)
        Close #handle
    End If
End Function
Public Function arrayLength(a) As Long
    arrayLength = UBound(a) - LBound(a) + 1
End Function
Public Function getControlValue(ctl As Object) As Variant
    Select Case TypeName(ctl)
        Case "Shape"
            getControlValue = ctl.TextFrame.Characters.Text
        Case "Label"
            getControlValue = ctl.Caption
        Case Else
            getControlValue = ctl.Value
    End Select
End Function
Public Function setControlValue(ctl As Object, v As Variant) As Variant
    Select Case TypeName(ctl)
        Case "Shape"
            ctl.TextFrame.Characters.Text = v
        Case "Label"
            ctl.Caption = v
        Case Else
            ctl.Value = v
    End Select
    setControlValue = v
End Function
Public Function isinCollection(vCollect As Variant, sid As Variant) As Boolean
    Dim v As Variant
    If Not vCollect Is Nothing Then
        On Error GoTo handle
        Set v = vCollect(sid)
        isinCollection = True
        Exit Function
    End If
handle:
    isinCollection = False
End Function
'--- based on trig at http://www.movable-type.co.uk/scripts/latlong.html
Public Function getLatFromDistance(mLat As Double, d As Double, heading As Double) As Double
    Dim lat As Double
    ' convert ro radians
    lat = toRadians(mLat)
    getLatFromDistance = _
        fromRadians( _
            Application.WorksheetFunction.Asin(sIn(lat) * _
            Cos(d / earthRadius) + _
            Cos(lat) * _
            sIn(d / earthRadius) * _
            Cos(heading)))
End Function
Public Function getLonFromDistance(mLat As Double, mLon As Double, d As Double, heading As Double) As Double
    Dim lat As Double, lon As Double, newLat As Double
    ' convert ro radians
    lat = toRadians(mLat)
    lon = toRadians(mLon)
    newLat = toRadians(getLatFromDistance(mLat, d, heading))
    getLonFromDistance = _
        fromRadians( _
             (lon + Application.WorksheetFunction.Atan2(Cos(d / earthRadius) - _
            sIn(lat) * _
            sIn(newLat), _
            sIn(heading) * _
            sIn(d / earthRadius) * _
            Cos(lat))))
End Function
Public Function earthRadius() As Double
    ' earth radius in km.
    earthRadius = 6371
End Function
Public Function toRadians(deg)
    toRadians = Application.WorksheetFunction.Pi / 180 * deg
End Function
Public Function fromRadians(rad) As Double
    'convert radians to degress
    fromRadians = 180 / Application.WorksheetFunction.Pi * rad
End Function
Public Function dimensionCount(a As Variant) As Long
' the only way I can figure out how to do this is to keep trying till it fails
    Dim n As Long, j As Long

    n = 1
    On Error GoTo allDone
    While True
        j = UBound(a, n)
        n = n + 1
    Wend
    Debug.Assert False
    Exit Function
    
allDone:
    dimensionCount = n - 1
    Exit Function
    
End Function
Public Function min(ParamArray args() As Variant)
    min = Application.WorksheetFunction.min(args)
End Function
Public Function max(ParamArray args() As Variant)
    max = Application.WorksheetFunction.max(args)
End Function
Public Function encloseTag(tag As String, Optional newline As Boolean = True, _
                    Optional tClass As String = vbNullString, _
                    Optional args As Variant) As String
    
    Dim I As Long, t As cStringChunker
    Set t = New cStringChunker
    ' args can be an array or a single item
    If Not IsArray(args) Then
        With t
            .add("<").add (tag)
            If tClass <> vbNullString Then .add(" class=").add (tClass)
            .add (">")
            If newline Then .add (vbCrLf)
            .add (CStr(args))
            If newline Then .add (vbCrLf)
            .add("</").add(tag).add (">")
            If newline Then .add (vbCrLf)
        End With
    Else
        ' recurse for array memmbers
        For I = LBound(args) To UBound(args)
            t.add encloseTag(tag, newline, tClass, args(I))
        Next I
    End If
    encloseTag = t.content
End Function

Public Function scrollHack() As String
    'hack for IOS
    scrollHack = _
     "<div id='wrapper' style='width:100%;height:100%;overflow-x:auto;" & _
     "overflow-y:auto;-webkit-overflow-scrolling: touch;'>"
End Function

Public Function escapeify(s As String) As String
    escapeify = _
                    Replace( _
                        Replace( _
                            Replace( _
                                Replace(s _
                                    , q, "\" & q), _
                                "%", "\" & "%"), _
                            ">", "\>"), _
                        "<", "\<")
    

    
End Function
Public Function unEscapify(s As String) As String
    unEscapify = _
                    Replace( _
                        Replace( _
                            Replace( _
                                Replace( _
                                    s, "\" & q, q), _
                                 "\" & "%", "%"), _
                             "\>", ">"), _
                         "\<", "<")
    
End Function
Public Function basicStyle() As String
    With New cStringChunker
        .add ".viewdiv {}"
        .add ".hide {"
        .add "display:none;position:absolute;"
        .add "padding:5px;background:white;color:black;"
        .add "border-radius:5px;border:1px solid black;"
        .add "}"
        basicStyle = .content
    End With

End Function
' i adapted this from some table css I found - apologies I dont have the site for crediting.
Public Function tableStyle() As String
    Dim t As cStringChunker
    Set t = New cStringChunker
t.add _
 " table {" & _
    "font-family:Arial, Helvetica, sans-serif;" & _
    "color:#666;" & _
    "font-size:10px;" & _
    "background:#eaebec;" & _
    "margin:4px;" & _
    "border:#ccc 1px solid;" & _
    "-moz-border-radius:3px;" & _
    "-webkit-border-radius:3px;" & _
    "border-radius:3px;" & _
    "-moz-box-shadow: 0 1px 2px #d1d1d1;" & _
    "-webkit-box-shadow: 0 1px 2px #d1d1d1;" & _
    "box-shadow: 0 1px 2px #d1d1d1;" & _
    "}" & _
 "table th {" & _
    "padding:8px 9px 8px 9px;" & _
    "border-top:1px solid #fafafa;" & _
    "border-bottom:1px solid #e0e0e0;" & _
    "background: #ededed;" & _
    "background: -webkit-gradient(linear, left top, left bottom, from(#ededed), to(#ebebeb));" & _
    "background: -moz-linear-gradient(top,  #ededed,  #ebebeb);" & _
    "}"
    
t.add _
 "table tr {" & _
    "text-align: left;" & _
    "padding-left:16px;" & _
    "}" & _
 "table td {" & _
    "padding:6px;" & _
    "border-top: 1px solid #ffffff;" & _
    "border-bottom:1px solid #e0e0e0;" & _
    "border-left: 1px solid #e0e0e0;" & _
    "background: #fafafa;" & _
    "}" & _
 "table tr.even td {" & _
    "background: #f6f6f6;" & _
    "}"


 
    tableStyle = t.content
End Function
Public Function is64BitExcel() As Boolean
#If VBA7 And Win64 Then
    is64BitExcel = True
#Else
    is64BitExcel = False
#End If
End Function
Public Function includeJQuery() As String
    ' include jquery source
    With New cStringChunker
        .addLine jScriptTag("http://www.google.com/jsapi")
        .addLine jScriptTag
        .addLine "google.load('jquery', '1');"
        .addLine "</script>"
        includeJQuery = .content
    End With
    
End Function
Public Function includeGoogleCallBack(c As String) As String
    ' include google call back
    With New cStringChunker
        .addLine jScriptTag
        .addLine "google.setOnLoadCallback("
        .addLine c
        .addLine ");"
        .addLine "</script>"
        includeGoogleCallBack = .content
    End With
    
End Function
Public Function jScriptTag(Optional src As String) As String
    With New cStringChunker
        .add "<script type='text/javascript'"
        If src <> vbNullString Then
            .add(" src='").add(src).addLine ("'></script>")
        Else
            .addLine ">"
        End If
        jScriptTag = .content
    End With
End Function
Public Function jDivAtMouse()
    With New cStringChunker
        .addLine "function() {"
        .add "$('a.viewdiv').mousemove("
        .addLine "function(e) {"
        .add "var targetdiv = $('#d'+this.id);"
        .add "targetdiv.css({left:(e.pageX + 20) + 'px',"
        .add "top: (Math.max(0,e.pageY - targetdiv.height()/2)) + 'px'}).show();"
        .addLine "});"
        .add "$('a.viewdiv').mouseout("
        .addLine "function(e) {"
        .add "$('#d'+this.id).hide();"
        .addLine "});"
        .addLine "}"
        jDivAtMouse = .content
    End With
End Function
Public Function toClipBoard(s As String) As String
    With New MSForms.DataObject
        .SetText s
        .PutInClipboard
    End With
End Function

Public Function importTabbed(fn As String, r As Range) As Range

    r.Worksheet.QueryTables.add(Connection:= _
        "TEXT;" + fn, destination:=r).refresh BackgroundQuery:=False

    Set importTabbed = r
End Function

Function biasedRandom(possibilities, weights) As String
    Dim w As Variant, a As Variant, p As Variant, _
        r As Double, I As Long
    ' comes in as 2 lists
    a = Split(weights, ",")
    p = Split(possibilities, ",")
    ReDim w(LBound(a) To UBound(a))

    ' create cumulative
    For I = LBound(w) To UBound(w)
        w(I) = CDbl(a(I))
        If I > LBound(w) Then w(I) = w(I - 1) + w(I)
    Next I
    
    ' get random index
    r = Rnd() * w(UBound(w))
    
    ' find its weighted position
    For I = LBound(w) To UBound(w)
        If (r <= w(I)) Then
            biasedRandom = p(I)
            Exit Function
        End If
    Next I
    
End Function

Public Sub sleep(seconds As Long)

    Application.Wait TimeSerial(hour(Now()), Minute(Now()), Second(Now()) + seconds)
End Sub
Public Function getDateFromTimestamp(s As String) As Date
    Dim d As Double
    
    If (Len(s) = 13) Then
        ' javaScript Time
        d = CDbl(Left(s, 10))
        ' may need to round for milliseconds
        If Int(Mid(s, 11, 3) >= 500) Then
            d = d + 1
        End If
        
    ElseIf (Len(s) = 10) Then
        ' unix Time
        d = CDbl(s)
    
    Else
        ' wtf time
        getDateFromTimestamp = 0
        Exit Function
    
    End If
    getDateFromTimestamp = DateAdd("s", d, DateSerial(1970, 1, 1))

End Function
Public Function dateFromUnix(s As Variant) As Variant
    Dim d As Date, sd As String
    sd = CStr(s)
    
    If (Len(sd) > 0) Then
        d = getDateFromTimestamp(sd)
        If d = 0 Then
            dateFromUnix = CVErr(xlErrValue)
        Else
            dateFromUnix = d
        End If
    Else
        dateFromUnix = Empty
    End If

End Function
Public Function isSomething(o As Object) As Boolean

    isSomething = Not o Is Nothing
End Function


Public Function tinyTime() As Double
' Returns seconds.
    Dim cyTicks1 As Currency
    Static cyFrequency As Currency
    tinyTime = 0
' Get frequency.
    If cyFrequency = 0 Then getFrequency cyFrequency
' Get ticks.
    getTickCount cyTicks1
    If cyFrequency Then tinyTime = cyTicks1 / cyFrequency
End Function
Public Function getTableRange(tableName As String, _
            Optional complain As Boolean = True) As Range
    Dim ls As ListObject
    Set ls = getListObject(tableName)
    If (isSomething(ls)) Then
        Set getTableRange = ls.Range
    ElseIf complain Then
        MsgBox ("couldnt find table " + tableName)
    End If
    
End Function

Public Function getListObject(tableName As String) As ListObject
    Dim ws As Worksheet
    For Each ws In ActiveWorkbook.Worksheets
        If listObjectExists(ws, tableName) Then
            Set getListObject = ws.ListObjects(tableName)
            Exit Function
        End If
    Next ws
    
End Function
Public Function listObjectExists(ws As Worksheet, sname As String) As Boolean
    Dim lo As ListObject
    On Error GoTo handleError
        Set lo = ws.ListObjects(sname)
        listObjectExists = isSomething(lo)
        Exit Function

handleError:
    listObjectExists = False

End Function



Attribute VB_Name = "usefulcJobject"
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 2/16/2016 10:02:50 AM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414365/raw/usefulcJobject.vba
'v2.13
Option Explicit
Public Function fromISODateTime(iso As String) As Date
    Dim rx As RegExp, matches As MatchCollection, d As Date, ms As Double, sec As Double
    Set rx = New RegExp
    With rx
        .ignorecase = True
        .Global = True
        .Pattern = "(\d{4})-([01]\d)-([0-3]\d)T([0-2]\d):([0-5]\d):(\d*\.?\d*)Z"
    End With
    Set matches = rx.Execute(iso)
    
    ' TODO -- timeszone

    If matches.count = 1 And matches.Item(0).SubMatches.count = 6 Then

        With matches.Item(0)
            sec = CDbl(.SubMatches(5))
            ms = sec - Int(sec)
            d = DateSerial(.SubMatches(0), .SubMatches(1), .SubMatches(2)) + _
                TimeSerial(.SubMatches(3), .SubMatches(4), Int(sec)) + ms / 86400
        End With
    
    Else
        d = 0
    End If
    
    fromISODateTime = d
   
End Function

Public Function toISODateTime(d As Date) As String
    Dim s As String, ms As Double, adjustSecond As Long
    
    ' need to adjust if seconds are going to be rounded up
    ms = milliseconds(d)
    adjustSecond = 0
    If (ms >= 0.5) Then adjustSecond = -1
    
    ' TODO - timezone
    toISODateTime = Format(year(d), "0000") & "-" & Format(month(d), "00") & "-" & Format(day(d), "00T") & _
            Format(d, "hh:mm:") & Format(DateAdd("s", adjustSecond, d), "ss") & Format(ms, ".000Z")

    
End Function
Public Function milliseconds(d As Date) As Double
    ' extract the milliseconds from the time
    Dim t As Date
    t = (d - DateSerial(year(d), month(d), day(d)) - TimeSerial(hour(d), Minute(d), Second(d)))
    If t < 0 Then
        ' the millsecond rounded it up
        t = (d - DateSerial(year(d), month(d), day(d)) - TimeSerial(hour(d), Minute(d), Second(d) - 1))
    End If
    
    milliseconds = t * 86400
    
End Function
Public Function JSONParse(s As String, Optional jtype As eDeserializeType, Optional complain As Boolean = True) As cJobject
    Dim j As New cJobject
    Set JSONParse = j.init(Nothing).parse(s, jtype, complain)
    j.tearDown
End Function
Public Function JSONStringify(j As cJobject, Optional blf As Boolean) As String
    JSONStringify = j.stringify(blf)
End Function
Public Function jSonArgs(options As String) As cJobject
    ' takes a javaScript like options paramte and converts it to cJobject
    ' it can be accessed as job.child('argName').value or job.find('argName') etc.
    Dim job As New cJobject
    If options <> vbNullString Then
        Set jSonArgs = job.init(Nothing, "jSonArgs").deSerialize(options)
    End If
End Function
Public Function optionsExtend(givenOptions As String, _
            Optional defaultOptions As String = vbNullString) As cJobject
    Dim jGiven As cJobject, jDefault As cJobject, _
        jExtended As cJobject, cj As cJobject
    ' this works like $.extend in jQuery.
    ' given and default options arrive as a json string
    ' example -
    ' optionsExtend ("{'width':90,'color':'blue'}", "{'width':20,'height':30,'color':'red'}")
    ' would return a cJobject which serializes to
    ' "{width:90,height:30,color:blue}"
    Set jGiven = jSonArgs(givenOptions)
    Set jDefault = jSonArgs(defaultOptions)
    
    ' now we combine them
    If Not jDefault Is Nothing Then
        Set jExtended = jDefault
    Else
        Set jExtended = New cJobject
        jExtended.init Nothing
    End If
    
    ' now we merge that with whatever was given
    If Not jGiven Is Nothing Then
        jExtended.merge jGiven
    End If
    
    ' and its over
    Set optionsExtend = jExtended
End Function

'udfs to expose classes
Public Function ucJobjectMake(r As Variant) As cJobject
    Dim cj As New cJobject
    Set ucJobjectMake = cj.deSerialize(CStr(r))
End Function
Public Function ucJobjectChildValue(json As Variant, child As Variant) As String
    ucJobjectChildValue = ucJobjectMake(CStr(json)).child(CStr(child)).Value
End Function
Public Function ucJobjectLint(json As Variant, Optional child As Variant) As String
    Dim cj As cJobject
    Set cj = ucJobjectMake(json)
    If Not IsMissing(child) Then
        Set cj = cj.child(CStr(child))
    End If
    ucJobjectLint = cj.serialize(True)
End Function
Public Function cleanGoogleWire(sWire As String) As String
    Dim jStart As String, p As Long, newWire As Boolean, e As Long, s As String, reg As RegExp, _
        match As match, matches As MatchCollection, v As Double, I As Long, _
        year As Long, month As Long, day As Long, hour As Long, min As Long, sec As Long, ms As Long, _
        t As cStringChunker, consumed As Long

    jStart = "table:"
    p = InStr(1, sWire, jStart)
    'there have been multiple versions of wire ...
    If p = 0 Then
        'try the other one
        jStart = q & ("table") & q & ":"
        p = InStr(1, sWire, jStart)
        newWire = True
    End If

    p = InStr(1, sWire, jStart)
    e = Len(sWire) - 1

    If p <= 0 Or e <= 0 Or p > e Then
        MsgBox " did not find table definition data"
        Exit Function
    End If
    
    If Mid(sWire, e, 2) <> ");" Then
        MsgBox ("incomplete google wire message")
        Exit Function
    End If
    ' encode the 'table:' part to a cjobject
    p = p + Len(jStart)
    s = "{" & jStart & "[" & Mid(sWire, p, e - p - 1) & "]}"
    ' google protocol doesnt have quotes round the key of key value pairs,
    ' and i also need to convert date from javascript syntax new Date()
    ' we'll force it to be a 13 digit timestamp, since cjobject knows how to make that into a date
    's = rxReplace("(new\sDate)(\()(\d+)(,)(\d+)(,)(\d+)(\))", s, "'$3/$5/$7'")
    'new\s+date\s*\(\s*(\d+)\s*(,\s*\d+)\s*(,\s*\d+)?\s*(,\s*\d+)?\s*(,\s*\d+)?\s*(,\s*\d+)?\s*(,\s*\d+)?\)
    Set reg = New RegExp
    With reg
        .Pattern = "new\s+Date\s*\(\s*(\d+)\s*(,\s*\d+)\s*(,\s*\d+)?\s*(,\s*\d+)?\s*(,\s*\d+)?\s*(,\s*\d+)?\s*(,\s*\d+)?\)"
        .Global = True
    End With
    Set matches = reg.Execute(s)

    
    If matches.count > 0 Then
        Set t = New cStringChunker
        consumed = 0
        For Each match In matches
            t.add Mid(s, consumed + 1, match.FirstIndex - consumed)
            consumed = consumed + match.FirstIndex - consumed
            With match
                If .SubMatches.count >= 2 And .SubMatches.count <= 7 Then
                    'these are the only valid number of args to a javascript new Date()
                    day = 1
                    hour = 0
                    min = 0
                    sec = 0
                    ms = 0
                    year = .SubMatches(0)
                    month = Replace(.SubMatches(1), ",", "") + 1
                    If .SubMatches.count > 2 And Not IsEmpty(.SubMatches(2)) Then day = Replace(.SubMatches(2), ",", "")
                    If .SubMatches.count > 3 And Not IsEmpty(.SubMatches(3)) Then hour = Replace(.SubMatches(3), ",", "")
                    If .SubMatches.count > 4 And Not IsEmpty(.SubMatches(4)) Then min = Replace(.SubMatches(4), ",", "")
                    If .SubMatches.count > 5 And Not IsEmpty(.SubMatches(5)) Then sec = Replace(.SubMatches(5), ",", "")
                    If .SubMatches.count > 6 And Not IsEmpty(.SubMatches(6)) Then ms = Replace(.SubMatches(6), ",", "")
                    ' now convert to a date and format
                    t.add(q) _
                        .add(CStr(DateSerial(year, month, day) + TimeSerial(hour, min, sec) + CDbl(ms) / 86400)) _
                        .add (q)
                    consumed = consumed + match.length
                End If
            End With
        Next match
        If consumed < Len(s) Then t.add Mid(s, consumed + 1)
        s = t.content
        Set t = Nothing
    End If
    If Not newWire Then s = rxReplace("(\w+)(:)", s, "'$1':")
    cleanGoogleWire = s
    
End Function

Public Function xmlStringToJobject(xmlString As String, Optional complain As Boolean = True) As cJobject
    Dim doc As Object
    ' parse xml

    Set doc = CreateObject("msxml2.DOMDocument")
    doc.LoadXML xmlString
    If doc.parsed And doc.parseError = 0 Then
        Set xmlStringToJobject = docToJobject(doc, complain)
        Exit Function
    End If

    Set xmlStringToJobject = Nothing
    If complain Then
        MsgBox ("Invalid xml string - xmlparseerror code:" & doc.parseError)
    End If
    
    Exit Function
    
End Function
Public Function docToJobject(doc As Object, Optional complain As Boolean = True) As cJobject
    ' convert xml document to a cjobject
    Dim node As IXMLDOMNode, job As cJobject
    Set job = New cJobject
    job.init Nothing
       
    Set docToJobject = handleNodes(doc, job)
End Function
Private Function isArrayRoot(parent As IXMLDOMNode) As Boolean
    
    Dim node As IXMLDOMNode, n As Long, node2 As IXMLDOMNode
    
    
    isArrayRoot = False
    If parent.NodeType = NODE_ELEMENT And parent.ChildNodes.length > 1 Then
        For Each node2 In parent.ChildNodes
            If node2.NodeType = NODE_ELEMENT Then
                n = 0
                For Each node In parent.ChildNodes
                    If node.NodeType = NODE_ELEMENT And _
                        node2.nodeName = node.nodeName Then n = n + 1
                Next node
                If n > 1 Then
                    ' this shoudl be true, but for leniency i'll comment
                    'Debug.Assert n = parent.ChildNodes.Length
                    isArrayRoot = True
                    Exit Function
                End If
            End If
        Next node2
    End If

    
End Function
Private Function handleNodes(parent As IXMLDOMNode, job As cJobject) As cJobject
    Dim node As IXMLDOMNode, joc As cJobject, attrib As IXMLDOMAttribute, I As Long, _
         arrayJob As cJobject
    
    If isArrayRoot(parent) Then
        ' we need an array associated with this this node
        ' subsequent members will need to make space for themselves
        Set joc = job.add(parent.nodeName).addArray
    Else
        Set joc = handleNode(parent, job)
    End If
    
    ' deal with any attributes
    If Not parent.Attributes Is Nothing Then
        For Each attrib In parent.Attributes
            handleNode attrib, joc
        Next attrib
    End If
    
    ' do the children
    If Not parent.ChildNodes Is Nothing And parent.ChildNodes.length > 0 Then
        For Each node In parent.ChildNodes
            handleNodes node, joc
        Next node
    End If
    
    ' always return the level at which we arrived
    Set handleNodes = job
    
End Function
Private Function handleNode(node As IXMLDOMNode, job As cJobject, Optional arrayHead As Boolean = False) As cJobject
    Dim key As cJobject
    '' not a comprehensive convertor
    Set handleNode = job
    Debug.Print node.nodeName & node.NodeType & node.NodeValue
    Select Case node.NodeType
        Case NODE_ATTRIBUTE
            ' we cant have an array of attributes - this will silently use the latest
            job.add node.nodeName, node.NodeValue
            
        Case NODE_ELEMENT
            If job.isArrayRoot Then
                Dim b As Boolean
                b = (node.ChildNodes.length = 1)
                If (b) Then b = node.ChildNodes(0).NodeType = NODE_TEXT
                If (b) Then
                    Set handleNode = job.add.add
                Else
                    Set handleNode = job.add.add(node.nodeName)
                End If
            Else
                Set handleNode = job.add(node.nodeName)
            End If

        Case NODE_TEXT
            job.Value = node.NodeValue

            
        Case NODE_DOCUMENT, NODE_CDATA_SECTION, NODE_ENTITY_REFERENCE, _
            NODE_ENTITY, NODE_PROCESSING_INSTRUCTION, NODE_COMMENT, NODE_DOCUMENT_TYPE, _
            NODE_DOCUMENT_FRAGMENT, NODE_NOTATION
            ' just ignore these for now

            
        Case Else
            Debug.Assert False
    End Select
    
End Function

Public Function makeSheetFromJob(job As cJobject, sheetName As String) As cDataSet
    Dim ds As cDataSet, Target As Range, dc As cCell, jo As cJobject


    ' clear the target sheet
    Set ds = New cDataSet
    
    ' need something there to load
    Set Target = Sheets(sheetName).Range("a1")
    If IsEmpty(Target.Value) Then
        Target.Value = "dummy"
    End If
    ds.load Target.Worksheet.name
    
    ' create headings based on all data found
    makeSheetHeadingsFromJob job, ds
    ds.tearDown
    
    ' now reload with new headings
    Set ds = New cDataSet
    ds.load (Target.Worksheet.name)
    
    ' now populate the data
    With ds.headingRow
        For Each jo In job.children
            For Each dc In .headings
                If (isSomething(jo.child(dc.Value))) Then
                    .where.Resize(1, 1).Offset(jo.childIndex, dc.column - 1).Value = jo.child(dc.Value).Value
                End If
            Next dc
            If (jo.childIndex Mod 1000 = 0) Then
                Debug.Print "done "; jo.childIndex; " rows"
            End If
        Next jo
    End With
    
    ' clean
    Dim dsnew As cDataSet
    Set dsnew = New cDataSet
    dsnew.load (ds.name)
    ds.tearDown
    Set makeSheetFromJob = dsnew
    
End Function
Public Sub makeSheetHeadingsFromJob(jo As cJobject, ds As cDataSet)
    Dim jobHead As cJobject, job As cJobject, joc As cJobject, jod As cJobject
    Set jobHead = New cJobject
    

    ' first step, identify the headings
    ' this will also take care of situation when each item doesnt have the same children
    Set jobHead = jobHead.init(Nothing)
    For Each job In jo.children
        Set jobHead = rescurseSheetHeadersFromJob(job, jobHead)
    Next job
    
    ' let's clear all existing
    If (isSomething(ds.where)) Then
        ds.where.ClearContents
    End If

    ds.headingRow.where.ClearContents
    
    ' now the heading
    With firstCell(ds.headingRow.where)
        For Each job In jobHead.children
            .Offset(, job.childIndex - 1).Value = Replace(job.key, "___", ".")
        Next job
    End With

    jobHead.tearDown
End Sub

Private Function rescurseSheetHeadersFromJob(job As cJobject, _
            jobHead As cJobject, Optional k As String = vbNullString) As cJobject
    Dim joc As cJobject, s As String

    ' the trick here is to collapse to a single depth- we'll replace the underscores with . later
    If job.hasChildren Then
        If k <> vbNullString Then k = k + "___"
        For Each joc In job.children
            rescurseSheetHeadersFromJob joc, jobHead, k + joc.key
        Next joc
    Else
        If k = vbNullString Then k = job.key
        If (Not IsEmpty(job.Value)) Then
            jobHead.add k
        End If
    End If
    
    Set rescurseSheetHeadersFromJob = jobHead
End Function




' InQuest injected base64 decoded content
' 1jjex
' Cl*&
' 1jjex
' K+-zd
' xZ+-
' fz{l

INQUEST-PP=macro
