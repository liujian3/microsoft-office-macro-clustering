Attribute VB_Name = "Coffee"
Option Explicit
Sub Coffee()
   MsgBox ("Its a joke." + vbCr + "You could add more actions here.")
End Sub
Sub startTheClock()
'  This initialisation routine needs to be run to start the
'  timer when ppt is switched to presentation mode

    ' Set Forum.tShow = Application
    MsgBox ("Go to Menu: Slide Show --> Rehearse timings!")
End Sub

Sub CGGVblurb()
   MsgBox ("This ppt add-in comes courtesy of CGGVeritas" + vbCr + _
   "It comes with no warranty, no guarantees and no support!")
End Sub
Attribute VB_Name = "ComDlg"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'
' This code is taken from an atricle on the microsoft pages
'
' No copyright is mentioned on these pages.
'
'
' http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnovba00/html/CommonDialogsPartI.asp


Option Explicit
 
DefStr S
DefLng N
DefBool B
DefVar V
 
' OFN constants.
Const OFN_ALLOWMULTISELECT   As Long = &H200
Const OFN_CREATEPROMPT       As Long = &H2000
Const OFN_EXPLORER           As Long = &H80000
Const OFN_EXTENSIONDIFFERENT As Long = &H400
Const OFN_FILEMUSTEXIST      As Long = &H1000
Const OFN_HIDEREADONLY       As Long = &H4
Const OFN_LONGNAMES          As Long = &H200000
Const OFN_NOCHANGEDIR        As Long = &H8
Const OFN_NODEREFERENCELINKS As Long = &H100000
Const OFN_OVERWRITEPROMPT    As Long = &H2
Const OFN_PATHMUSTEXIST      As Long = &H800
Const OFN_READONLY           As Long = &H1
 
' The maximum length of a single file path.
Const MAX_PATH As Long = 260
' This MAX_BUFFER value allows you to select approx.
' 500 files with an average length of 25 characters.
' Change this value as needed.
Const MAX_BUFFER As Long = 50 * MAX_PATH
' String constants:
Const sBackSlash As String = "\"
Const sPipe As String = "|"
 
' API functions to use the Windows common dialog boxes.
Private Declare Function GetOpenFileName _
  Lib "COMDLG32.DLL" Alias "GetOpenFileNameA" _
  (pOpenfilename As OPENFILENAME) As Long
Private Declare Function GetSaveFileName _
  Lib "COMDLG32.DLL" Alias "GetSaveFileNameA" _
  (pOpenfilename As OPENFILENAME) As Long
Private Declare Function GetActiveWindow _
  Lib "user32" () As Long
 
' Type declaration, used by GetOpenFileName and
' GetSaveFileName.
Private Type OPENFILENAME
  lStructSize       As Long
  hwndOwner         As Long
  hInstance         As Long
  lpstrFilter       As String
  lpstrCustomFilter As String
  nMaxCustFilter    As Long
  nFilterIndex      As Long
  lpstrFile         As String
  nMaxFile          As Long
  lpstrFileTitle    As String
  nMaxFileTitle     As Long
  lpstrInitialDir   As String
  lpstrTitle        As String
  Flags             As Long
  nFileOffset       As Integer
  nFileExtension    As Integer
  lpstrDefExt       As String
  lCustData         As Long
  lpfnHook          As Long
  lpTemplateName    As String  ' Can also be a Long.
End Type
 
' Private variables.
Private OFN As OPENFILENAME
Private colFileTitles As New Collection
Private colFileNames As New Collection
Private sFullName
Private sFileTitle
Private sPath
Private sExtension
 
' Public enumeration variable.
Public Enum XFlags
  PathMustExist = OFN_PATHMUSTEXIST
  FileMustExist = OFN_FILEMUSTEXIST
  PromptToCreateFile = OFN_CREATEPROMPT
End Enum
 
Property Let AllowMultiSelect(bFlag)
  SetFlag OFN_ALLOWMULTISELECT, bFlag
End Property
 
Property Let DialogTitle(sCaption)
  OFN.lpstrTitle = sCaption
End Property
 
Property Let Filter(vFilter)
  If IsArray(vFilter) Then _
    vFilter = Join(vFilter, vbNullChar)
  OFN.lpstrFilter = _
    Replace(vFilter, sPipe, vbNullChar) & vbNullChar
End Property
 
Property Get Filter()
  With OFN
    If .nFilterIndex Then
      Dim sTemp()
      sTemp = Split(.lpstrFilter, vbNullChar)
      Filter = sTemp(.nFilterIndex * 2 - 2) & sPipe & _
        sTemp(.nFilterIndex * 2 - 1)
    End If
  End With
End Property
 
Property Let FilterIndex(nIndex)
  OFN.nFilterIndex = nIndex
End Property
 
Property Get FilterIndex() As Long
  FilterIndex = OFN.nFilterIndex
End Property
 
Property Let RestoreCurDir(bFlag)
  SetFlag OFN_NOCHANGEDIR, bFlag
End Property
 
Property Let ExistFlags(nFlags As XFlags)
  OFN.Flags = OFN.Flags Or nFlags
End Property
 
Property Let CheckBoxVisible(bFlag)
  SetFlag OFN_HIDEREADONLY, Not bFlag
End Property
 
Property Let CheckBoxSelected(bFlag)
  SetFlag OFN_READONLY, bFlag
End Property
 
Property Get CheckBoxSelected() As Boolean
  CheckBoxSelected = OFN.Flags And OFN_READONLY
End Property
 
Property Let FileName(sFileName)
  If Len(sFileName) <= MAX_PATH Then _
    OFN.lpstrFile = sFileName
End Property
 
Property Get FileName() As String
  FileName = sFullName
End Property
 
Property Get FileNames() As Collection
  Set FileNames = colFileNames
End Property
 
Property Get FileTitle() As String
  FileTitle = sFileTitle
End Property
 
Property Get FileTitles() As Collection
  Set FileTitles = colFileTitles
End Property
 
Property Let Directory(sInitDir)
  OFN.lpstrInitialDir = sInitDir
End Property
 
Property Get Directory() As String
  Directory = sPath
End Property
 
Property Let Extension(sDefExt)
  OFN.lpstrDefExt = LCase$(Left$( _
    Replace(sDefExt, ".", vbNullString), 3))
End Property
 
Property Get Extension() As String
  Extension = sExtension
End Property
 
Function ShowOpen() As Boolean
  ShowOpen = Show(True)
End Function
 
Function ShowSave() As Boolean
  ' Set or clear appropriate flags for Save As dialog.
  SetFlag OFN_ALLOWMULTISELECT, False
  SetFlag OFN_PATHMUSTEXIST, True
  SetFlag OFN_OVERWRITEPROMPT, True
  ShowSave = Show(False)
End Function
 
Private Function Show(bOpen)
  With OFN
    .lStructSize = Len(OFN)
    ' Could be zero if no owner is required.
    .hwndOwner = GetActiveWindow
    ' If the RO checkbox must be checked, we should also
    ' display it.
    If .Flags And OFN_READONLY Then _
      SetFlag OFN_HIDEREADONLY, False
    ' Create large buffer if multiple file selection
    ' is allowed.
    .nMaxFile = IIf(.Flags And OFN_ALLOWMULTISELECT, _
      MAX_BUFFER + 1, MAX_PATH + 1)
    .nMaxFileTitle = MAX_PATH + 1
    ' Initialize the buffers.
    .lpstrFile = .lpstrFile & String$( _
      .nMaxFile - 1 - Len(.lpstrFile), 0)
    .lpstrFileTitle = String$(.nMaxFileTitle - 1, 0)
 
    ' Display the appropriate dialog.
    If bOpen Then
      Show = GetOpenFileName(OFN)
    Else
      Show = GetSaveFileName(OFN)
    End If
 
    If Show Then
      ' Remove trailing null characters.
      Dim nDoubleNullPos
      nDoubleNullPos = InStr(.lpstrFile & vbNullChar, _
                              String$(2, 0))
      If nDoubleNullPos Then
        ' Get the file name including the path name.
        sFullName = Left$(.lpstrFile, nDoubleNullPos - 1)
        ' Get the file name without the path name.
        sFileTitle = Left$(.lpstrFileTitle, _
          InStr(.lpstrFileTitle, vbNullChar) - 1)
        
        ' Get the extension.
        If .nFileExtension Then
          sExtension = Mid$(sFullName, .nFileExtension + 1)
        End If
        ' If sFileTitle is a string,
        ' we have a single selection.
        If Len(sFileTitle) Then
          ' Add to the collections.
          colFileTitles.Add _
            Mid$(sFullName, .nFileOffset + 1)
          colFileNames.Add sFullName
        Else  ' Tear multiple selection apart.
          Dim sTemp()
          Dim nCount As Integer
          sTemp = Split(sFullName, vbNullChar)
          ' Set the path
          sPath = sTemp(0)
          ' If array contains no elements,
          ' UBound returns -1.
          If UBound(sTemp) > LBound(sTemp) Then
            ' We have more than one array element!
            ' Remove backslash if sPath is the root folder.
            If Len(sPath) = 3 Then _
              sPath = Left$(sPath, 2)
            ' Loop through the array, and create the
            ' collections; skip the first element
            ' (containing the path name), so start the
            ' counter at 1, not at 0.
            For nCount = 1 To UBound(sTemp)
              colFileTitles.Add sTemp(nCount)
              ' If the string already contains a backslash,
              ' the user must have selected a shortcut
              ' file, so we don't add the path.
              colFileNames.Add IIf(InStr(sTemp(nCount), sBackSlash), _
              sTemp(nCount), sPath & sBackSlash & sTemp(nCount))
            Next
            ' Clear this variable.
            sFullName = vbNullString
          End If
        End If
        ' Add backslash if sPath is the root folder.
        If Len(sPath) = 2 Then _
          sPath = sPath & sBackSlash
      End If
    End If
  End With
End Function
 
Private Sub SetFlag(nValue, bTrue)
  ' Wrapper routine to set or clear bit flags.
  With OFN
    If bTrue Then
      .Flags = .Flags Or nValue
    Else
      .Flags = .Flags And Not nValue
    End If
  End With
End Sub
 
Private Sub Class_Initialize()
  ' This routine runs when the object is created.
  OFN.Flags = OFN.Flags Or OFN_EXPLORER Or _
              OFN_LONGNAMES  ' Or OFN_HIDEREADONL
End Sub

'
'  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnovba00/html/CommonDialogsPartI.asp
'
'
Sub GetFileFromAPI()
  
  Dim OFN As OPENFILENAME
  Dim Ret
  Dim n As Integer
  ' Any filters?
   Dim f(2) As String
   f(0) = "jpgs|*.jpg"
   f(1) = "gifs|*.gif"
   f(2) = "Text Files|*.txt"
   
  With OFN
    .lStructSize = Len(OFN)     ' Size of structure.
    .nMaxFile = 260             ' Size of buffer.
    
    ' Create buffer.
    .lpstrFile = String(.nMaxFile - 1, 0)
    Ret = GetOpenFileName(OFN)  ' Call function.
    If Ret <> 0 Then            ' Non-zero is success.
      ' Find first null char.
      n = InStr(.lpstrFile, vbNullChar)
      ' Return what's before it.
      MsgBox Left(.lpstrFile, n - 1)
    End If
  End With
End Sub


Sub Insert1PicViaForm()

' Added by hhoeber on 21.05.06 to load single file using code from
'
'  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnovba00/html/CommonDialogsPartI.asp
'
'
Dim OFN As OPENFILENAME
Dim Ret
Dim n As Integer
Dim ddd As String
Dim oSld As Slide
Dim oPic As Shape

  With OFN
    .lStructSize = Len(OFN)     ' Size of structure.
    .nMaxFile = 260             ' Size of buffer.
    ' Create buffer.
    .lpstrFile = String(.nMaxFile - 1, 0)
    Ret = GetOpenFileName(OFN)  ' Call function.
    If Ret <> 0 Then            ' Non-zero is success.
      ' Find first null char.
      n = InStr(.lpstrFile, vbNullChar)
      ' Return what's before it.
      ' MsgBox Left(.lpstrFile, n - 1)
      ' Full path and filename
      ddd = Left(.lpstrFile, n - 1)
      ' Add slide at end of presentation
      Set oSld = ActivePresentation.Slides.Add(ActivePresentation.Slides.Count + 1, ppLayoutBlank)
      ' Insert pic as selected
      Set oPic = oSld.Shapes.AddPicture(FileName:=ddd, _
              LinkToFile:=msoFalse, _
              SaveWithDocument:=msoTrue, _
              Left:=20, _
              Top:=50, _
              Width:=100, _
              Height:=50)
    End If
  End With
End Sub


Attribute VB_Name = "CreateAgenda"
Option Explicit

Sub CreateAgenda()

Dim i, j As Integer
'

Dim intParaCount As Integer
Dim oBodyText As Shape
Dim OBaseSlide As Slide
Dim oNewSlide As Slide
Dim oNewBodyText As Shape

' Note: RGB value for highlight color is hardcoded below.  Edit if you want to.

Set OBaseSlide = ActiveWindow.Selection.SlideRange(1)
With OBaseSlide
    ' Get a reference to the body text placeholder
    For i = 1 To .Shapes.Placeholders.Count
        If .Shapes.Placeholders(i).PlaceholderFormat.Type = ppPlaceholderBody Then
            Set oBodyText = .Shapes.Placeholders(i)
        End If
        
    Next i
    
    ' Quit when no text is found to make agenda from
    If oBodyText Is Nothing Then
        MsgBox "There is no text to create an agenda from."
        Exit Sub
    End If

    intParaCount = oBodyText.TextFrame.TextRange.Paragraphs.Count
    For i = intParaCount To 1 Step -1
        Set oNewSlide = OBaseSlide.Duplicate(1)
        ' get a reference to the body text placeholder
        With oNewSlide
            For j = 1 To .Shapes.Placeholders.Count
                If .Shapes.Placeholders(j).PlaceholderFormat.Type = ppPlaceholderBody Then
                    Set oNewBodyText = .Shapes.Placeholders(j)
                    'set background grey (0,0,0) or (169,169,169)
                    oNewBodyText.TextFrame.TextRange.Font.Color.RGB = RGB(128, 128, 128)
                End If
            Next j
            With oNewBodyText
                ' set main textmnnnnnnnnjnmj to black
                .TextFrame.TextRange.Paragraphs(i).Font.Color.RGB = RGB(0, 0, 0)
            End With
        End With ' oNewSlide
    Next i

End With

End Sub

 Sub AgendaLinks()
' Adds a slide at the beginning listing all titles of all slides
    Dim oSld As Slide
    Dim oShp As Shape
    Dim oAgenda As TextRange
    Dim X As Integer
    ' Add a slide to the beginning of presentation
    ActivePresentation.Slides.Add 1, ppLayoutText
    With ActivePresentation.Slides(1)
        .Shapes(1).TextFrame.TextRange = "Titles slide"
        Set oAgenda = .Shapes(2).TextFrame.TextRange
    End With

    oAgenda = ""

    For Each oSld In ActivePresentation.Slides
        ' Does the slide have title placeholder?
        If oSld.Shapes.HasTitle Then
            ' Get the reference to the title shape on the slide
            Set oShp = oSld.Shapes.title
            ' Check if the placeholder has  any text in it.
            If oShp.TextFrame.TextRange.Text = "" Then
                oAgenda = oAgenda & _
                          "Slide " & oSld.SlideIndex & Chr(13)
            Else
                oAgenda = oAgenda & _
                          oShp.TextFrame.TextRange.Text & Chr(13)
            End If
        Else
            oAgenda = oAgenda & _
                      "Slide " & oSld.SlideIndex & Chr(13)
        End If
        oAgenda.Font.Size = 8

    Next oSld

    ' Add hyperlinks to the titles.
    For X = 1 To oAgenda.Sentences.Count
        Set oSld = ActivePresentation.Slides(X)
        With oAgenda.Sentences(X) _
             .ActionSettings(ppMouseClick).Hyperlink

            .Address = ""
            ' Hyperlink - Slide ID, Slide Index, Slide Title
            .SubAddress = oSld.SlideID & "," & _
                          oSld.SlideIndex & "," & _
                          oAgenda.Sentences(X).Text
        End With
    Next X
    ' Delete the first one because it points to itself.
    oAgenda.Sentences(1).Delete
End Sub

Attribute VB_Name = "DisplayMessage"
Option Explicit

Sub identifyMultiPic()

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then  ' Only 1 slide is displayed!
          
       Call IdentifyPic

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
        'MsgBox ("slide number is " & oSlide.SlideNumber)
            
        ' activate the current slide
        ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
        ' Call the method
        Call IdentifyPic
            
        Next oSlide

End If

End Sub

Sub IdentifyPic()

Dim Osh As Shape
Dim OBaseSlide As Slide

Dim oSldSource As Slide
Dim oShpSource As Shape

Dim currSlideNr As Integer

Dim infoDisplay As String

infoDisplay = ""

On Error GoTo ErrorExtract
'On Error Resume Next
' Check what view we are in

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If

' Determine what is the selected current shape
Set Osh = ActiveWindow.Selection.ShapeRange(1)
If ActiveWindow.Selection.ShapeRange.Type = msoPicture Then
        infoDisplay = infoDisplay + ActiveWindow.Selection.ShapeRange.AlternativeText + vbCrLf
        MsgBox infoDisplay, vbInformation + vbOKOnly
Else
        MsgBox "This is not an image", vbInformation + vbOKOnly
End If
    
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

ErrorExtract:
    If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            ' Now check if there is a single image on the slide and if so
            '    select this as the master
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(currSlideNr)
            If noPics = 0 Then
               MsgBox "There are no images on this slide", vbInformation + vbOKOnly
            End If
            If noPics > 0 Then
                 Set oSldSource = ActiveWindow.Selection.SlideRange(1)
                 For Each oShpSource In oSldSource.Shapes
                      If oShpSource.Type = msoPicture Then
                          infoDisplay = infoDisplay + oShpSource.AlternativeText + vbCrLf
                      End If
                 Next oShpSource
                 MsgBox infoDisplay, vbInformation, vbOKOnly
             End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        If (resettoslidesorter = True) Then
             ActiveWindow.ViewType = ppViewSlideSorter
        End If
    End If


End Sub
Sub Identify(oShp As Shape)

' This is the subroutine which works when the ppt is in display mode and when clicking with the mouse

'Dim oShp As Shape
' Check if a shape is selected on this page
'Set oShp = ActiveWindow.Selection.ShapeRange(1)


   'MsgBox ("clicked")
   'MsgBox "picture is " & oShp.name, vbInformation + vbOKOnly
   'MsgBox ("size pic is " & oShp.Height)
   
   MsgBox "Pic info: " & oShp.AlternativeText, vbInformation + vbOKOnly

End Sub

Sub DisplayMessage(oShp As Shape)
' Ascertain the position of the mouse by checking the
' index value of shape over which the mouse rests.
    With SlideShowWindows(1).View.Slide _
         .Shapes(2).TextFrame.TextRange
        Select Case oShp.ZOrderPosition
    ' 1 is the title
        Case 1
            .Text = ""
        Case 2
            .Text = "Descriptive Message when mouse moves over Shape 2"
        Case 3
            .Text = "Descriptive Message when mouse moves over Shape 3"
        Case 4
            .Text = "Descriptive Message when mouse moves over Shape 4"
        Case 5
            .Text = "Descriptive Message when mouse moves over Shape 5"
        Case 6
            .Text = "Descriptive Message when mouse moves over Shape 6"
        Case 7
            .Text = "Descriptive Message when mouse moves over Shape 7"
        Case 8
            .Text = "Descriptive Message when mouse moves over Shape 8"
        End Select
        DoEvents
    End With
End Sub

Sub Popup(Osh As Shape)
' Assign the shape's MouseOver or MouseClick Action Setting as
' Run Macro:  Popup
' Use the formatting dialog, Web Text tab to enter your popup text
' On playback, a popup will display the web text then disappear
' when you click the popup again

    Dim oPopup As Shape
    Dim oSl As Slide
    Dim dOffset As Double
    dOffset = 10

    Set oSl = Osh.Parent
    ' create a rectangle for the popup
    Set oPopup = oSl.Shapes.AddShape(msoShapeRectangle, _
        Osh.Left + dOffset, _
        Osh.Top + dOffset, _
        Osh.Width, _
        Osh.Height)

    ' set popup shape properties here as needed
    With oPopup
        ' fill
        .Fill.ForeColor.RGB = RGB(255, 255, 200)
        ' text settings
        With .TextFrame
            .WordWrap = msoTrue
            With .TextRange
                ' text color
                .Font.Color.RGB = RGB(0, 0, 0)
                .Text = Osh.AlternativeText
            End With
        End With

        ' Set action setting to Delete
        ' which will delete the new shape when the user clicks it
        .ActionSettings(ppMouseClick).Run = "Delete"
    End With

    ActivePresentation.SlideShowWindow.View.GotoSlide (oSl.SlideIndex)

End Sub

Sub Delete(Osh As Shape)
    Osh.Delete
End Sub

Attribute VB_Name = "HenningsAddIns"
'
Option Explicit

'*********************************************************
'
' GLOBAL CONSTANTS
'
'*********************************************************
Global Const noPicTypes = 3

'*********************************************************
'
' SOME INFO ON PPT PIXELS AND INCHES
'
'  ' size of screen show
' 720 x 540 points ie 72 points per inch
'
' It is my understanding that ppt codes are for points and
'     that the (0,0) is at the top-left of the ppt
'
' (10" x 7.5 inches)
'
'*********************************************************

'*********************************************************
'
'   CGG 2006 ppt default picture and histogram
'
'*********************************************************

Global defaultPicLeft As Integer
Global defaultPicTop As Integer
Global defaultPicHeight As Integer
Global defaultPicWidth As Integer
Global defaultPicScaleWidth As Double
Global defaultPicScaleHeight As Double

Global defaultHistoLeft As Integer
Global defaultHistoTop As Integer
Global defaultHistoHeight As Integer
Global defaultHistoWidth As Integer
Global defaultHistoScaleWidth As Double
Global defaultHistoScaleHeight As Double

'*********************************************************
'
'   LAYOUT PARAMETERS for picture and histogram
'
'*********************************************************

Global layoutPicLeft As Double
Global layoutPicTop As Double
Global layoutPicWidth As Double
Global layoutPicHeight As Double
Global layoutPicScaleWidth As Double
Global layoutPicScaleHeight As Double

Global layoutHistoLeft As Integer
Global layoutHistoTop As Integer
Global layoutHistoHeight As Integer
Global layoutHistoWidth As Integer
Global layoutHistoScaleWidth As Double
Global layoutHistoScaleHeight As Double

Global setPicLayout As Boolean

Global setHistoLayout As Boolean

Global setMaster As Boolean

'*********************************************************
'
' GLOBAL VARIABLES
'
'*********************************************************

Global textColourBlack As Boolean
Global lineColourBlack As Boolean

Global picResizeByHand As Single
Global picResizeByHandSet As Boolean

Global associationName As String
Global setAname As Boolean

'*********************************************************
' DEFINE A TOOLBAR WITH BUTTONS FOR HENNINGS VBAs FOR CGG
'*********************************************************

Sub Auto_Open()

On Error GoTo ErrorHandler

' Set some variables to start

' variables for dummy toolbar
Dim dummyoToolbar As CommandBar
    Dim dummyoButton As CommandBarButton
    Dim dummyMyToolbar As String

'Variables for Tools to be added
 Dim NewControl As CommandBarControl

' Store an object reference to a command bar.
Dim ToolsMenu As CommandBars

' VARIABLES FOR BUTTONS
    Dim oToolbar As CommandBar
    Dim oButton As CommandBarButton
    Dim MyToolbar As String
    
    ' DUMMY TOOLBAR
    
    ' Give the toolbar a name
    dummyMyToolbar = "dumdum"

    ' Create the toolbar; PowerPoint will error if it already exists
    Set dummyoToolbar = CommandBars.Add(name:=dummyMyToolbar, Position:=msoBarTop, Temporary:=True)
    If Err.Number <> 0 Then
          ' The toolbar's already there, so we have nothing to do
          Exit Sub
    End If
    Set dummyoButton = dummyoToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With dummyoButton
         .Caption = "dumdum"
    End With

    ' REAL TOOLBAR
    
    ' Give the toolbar a name
    MyToolbar = "pptVista                                  ---- first release ---- February 2007 -----"

    On Error Resume Next
    ' so that it doesn't stop on the next line if the toolbar's already there

    ' Create the toolbar; PowerPoint will error if it already exists
    Set oToolbar = CommandBars.Add(name:=MyToolbar, Position:=msoBarTop, Temporary:=True)
    If Err.Number <> 0 Then
          ' The toolbar's already there, so we have nothing to do
          Exit Sub
    End If
    
    On Error GoTo ErrorHandler

'********************************
' START ADDING BUTTONS TO TOOLBAR
'********************************

'*****************************************************************************
    '  button --> logo display with information
    '
    ' Button pic is:   CGGVeritas logo
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "ppt add-in courtesy of CGGVeritas"
         .Caption = "CGGVeritas"
         .OnAction = "CGGVblurb"
         .Style = msoButtonCaption
         '.FaceId = 133
    End With
    '*****************************************************************************
    '  button --> load pics
    '
    ' Button pic is:   133
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Load multiple plots"
         .Caption = "Load multiple plots"
         .OnAction = "LoadMultiplePics"   ' "ImportPicsviaBox"
         .Style = msoButtonIcon
         .FaceId = 133
    End With
      
    '*****************************************************************************
    '  button --> load associated plots to pics with pics
    '
    ' Button pic is:   136
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Load multiple plots with their associated plots"
         .Caption = "Load multiple plots with their associated plots"
         .OnAction = "LoadMultiplePicsHisto"
         .Style = msoButtonIcon
         .FaceId = 136
    End With
    
     '*****************************************************************************
    '  button --> load associated plot to pic - pic must be in first line of notes text
    '
    ' Button pic is:   535
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Load associated plot"
         .Caption = "Load  associated plot"
         .OnAction = "loadMultiHisto"
         .Style = msoButtonIcon
         .FaceId = 535
    End With
    
     '*****************************************************************************
    '  button --> set name of associated plot
    '
    ' Button pic is:   576
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Define associated plot"
         .Caption = "Define  associated plot"
         .OnAction = "setAssociationName"
         .Style = msoButtonIcon
         .FaceId = 576
    End With
    
    '*****************************************************************************
    '  button --> reload pic ie create new slide with same pic reloaded
    '
    ' Button pic is:   37
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Reload this pic on a new slide"
         .Caption = "Reload this pic on a new slide"
         .OnAction = "reloadMultiPic"
         .Style = msoButtonIcon
         .FaceId = 37
    End With
    
    '*****************************************************************************
    '  button --> display pic info
    '
    ' Button pic is:   49
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Display pic information"
         .Caption = "Display pic information"
         .OnAction = "identifyMultiPic"
         .Style = msoButtonIcon
         .FaceId = 49
    End With
    
    '*****************************************************************************
    '  button --> define layout
    '
    ' Button pic is: 3020
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "define layout slide"
         .Caption = "Define layout slide"
         .OnAction = "initialisePPTMasterLayout"
         .Style = msoButtonIcon
         .FaceId = 3020
    End With
    
    '*****************************************************************************
    '  button --> define the selected object (ie figure) as the master figure
    '
    ' Button pic is:   M (ID 92)
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Button to set Master Object"
          'Tooltip text when mouse if placed over button
         .Caption = "Choose master"
         'Text if Text in Icon is chosen
         .OnAction = "SetMasterPic"
          'Runs the Sub "***" as defined when button is clicked
         .Style = msoButtonIcon
          ' Button displays as icon, not text or both
         .FaceId = 92
          '92 is M
          ' chooses icon # from the available Office icons
    End With
    
    '*****************************************************************************
    ' Second button --> propagate the shape of the master figure allowing the
    '                   aspect ratio to change
    '
    ' Button pic is:   smiley (ID 59)
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Button to shape to Master Object"
         .Caption = "Shape to master"
         .OnAction = "overlayMulti1"
         .Style = msoButtonIcon
         .FaceId = 165
    End With
    
    '*****************************************************************************
    ' Second' button --> propagate the shape of the master figure allowing the
    '                    aspect ratio to change and using cropping info
    '
    ' Button pic is: 206
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Button to shape and crop to Master Object"
         .Caption = "Crop and Shape to master"
         .OnAction = "overlayMulti2"
         .Style = msoButtonIcon
         .FaceId = 206
    End With
    
    '*****************************************************************************
    ' Third button --> align top left of pic to that of Master
    '
    ' Button pic is:   repeat side ID 53
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Button to align to Master Object"
         .Caption = "Align to master"
         .OnAction = "overlayMulti0"
         .Style = msoButtonIcon
         .FaceId = 164
    End With
    
    '*****************************************************************************
    ' recrop and resize to master but dont move it
    '
    ' Button pic is:   ID 3053
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Button to shape to Master Object without moving top left corner"
         .Caption = "Shape to master in place"
         .OnAction = "overlayMulti3"
         .Style = msoButtonIcon
         .FaceId = 3053
    End With
    
    '*****************************************************************************
    ' Reset picture to its original version
    '
    ' Button pic is: 127
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Reset picture properties"
         .Caption = "Reset picture properties"
         .OnAction = "resetPicPropsMultiPic"
         .Style = msoButtonIcon
         .FaceId = 127
    End With
    
    
    '*****************************************************************************
    ' Merge 2 plots onto 1 slide
    '
    ' Button pic is:   3778
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Merge 2 plots onto 1 slide"
         .Caption = "Merge 2 plots onto 1 slide"
         .OnAction = "collect2Plots"
         .Style = msoButtonIcon
         .FaceId = 3778
    End With
    
    '*****************************************************************************
    ' Merge 2 plots onto 1 slide
    '
    ' Button pic is:   3779
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Merge 3 plots onto 1 slide"
         .Caption = "Merge 3 plots onto 1 slide"
         .OnAction = "collect3Plots"
         .Style = msoButtonIcon
         .FaceId = 3779
    End With
    
    '*****************************************************************************
    ' Merge 2 plots onto 1 slide
    '
    ' Button pic is:   3780
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Merge 4 plots onto 1 slide"
         .Caption = "Merge 4 plots onto 1 slide"
         .OnAction = "collect4Plots"
         .Style = msoButtonIcon
         .FaceId = 3780
    End With
    
    '*****************************************************************************
    ' Crop left
    '
    ' Button pic is:
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Crop the left of the picture"
         .Caption = "Crop the left of the picture"
         .OnAction = "CropLeft"
         .Style = msoButtonIcon
         .FaceId = 2064
    End With
    
    '*****************************************************************************
    ' Crop right
    '
    ' Button pic is:
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Crop the right of the picture"
         .Caption = "Crop the right of the picture"
         .OnAction = "CropRight"
         .Style = msoButtonIcon
         .FaceId = 2066
    End With
    
    '*****************************************************************************
    ' Crop top
    '
    ' Button pic is:
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Crop the top of the picture"
         .Caption = "Crop the top of the picture"
         .OnAction = "CropTop"
         .Style = msoButtonIcon
         .FaceId = 2061
    End With
    
    '*****************************************************************************
    ' Crop bottom
    '
    ' Button pic is:
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Crop the bottom of the picture"
         .Caption = "Crop the bottom of the picture"
         .OnAction = "CropBottom"
         .Style = msoButtonIcon
         .FaceId = 2063
    End With
    
    '*****************************************************************************
    ' Set scale size
    '
    ' Button pic is:   21
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Set cropping size"
         .Caption = "Set cropping size"
         .OnAction = "setCropSize"
         .Style = msoButtonIcon
         .FaceId = 21
    End With
   
    '*****************************************************************************
    ' Scale size of selected pic up by 10 %
    '
    ' Button pic is:   62
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Scale size of picture up"
         .Caption = "Scale size of picture up"
         .OnAction = "ScaleUp"
         .Style = msoButtonIcon
         .FaceId = 62
    End With
    
    '*****************************************************************************
    ' Scale size of selected pic down by 10 %
    '
    ' Button pic is:   63
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Scale size of picture down"
         .Caption = "Scale size of picture down"
         .OnAction = "ScaleDown"
         .Style = msoButtonIcon
         .FaceId = 63
    End With
        
    '*****************************************************************************
    ' caption on x axis
    '
    ' Button pic is:   117
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create annotation for x axis"
         .Caption = "Create x axis annotation (textbox)"
         .OnAction = "MultiAddxCaption"
         .Style = msoButtonIcon
         .FaceId = 117
    End With
    
    '*****************************************************************************
    ' caption on y axis
    '
    ' Button pic is:   389
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create annotation for y axis"
         .Caption = "Create y axis annotation"
         .OnAction = "MultiAddyCaption"
         .Style = msoButtonIcon
         .FaceId = 389
    End With
    
    '*****************************************************************************
    ' Create intro slide
    '
    ' Button pic is: 490
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create intro slide"
         .Caption = "Create intro slide"
         .OnAction = "CreateIntroductions"
         .Style = msoButtonIcon
         .FaceId = 490
    End With
    
    '*****************************************************************************
    ' Create observations slide
    '
    ' Button pic is:   491
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create observations slide"
         .Caption = "Create observations slide"
         .OnAction = "CreateObservations"
         .Style = msoButtonIcon
         .FaceId = 491
    End With
    
    '*****************************************************************************
    ' Create conclusions slide
    '
    ' Button pic is:   492
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create conclusions slide"
         .Caption = "Create conclusions slide"
         .OnAction = "CreateConclusions"
         .Style = msoButtonIcon
         .FaceId = 492
    End With
    
     '*****************************************************************************
    ' Create chapter slide
    '
    ' Button pic is:   493
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create chapter slide"
         .Caption = "Create chapter slide"
         .OnAction = "CreateChapter"
         .Style = msoButtonIcon
         .FaceId = 493
    End With
    '*****************************************************************************
    ' Create agenda
    '
    ' Button pic is:   12
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create agenda slides"
         .Caption = "Create agenda slides"
         .OnAction = "CreateAgenda"
         .Style = msoButtonIcon
         .FaceId = 12
    End With
    
    '*****************************************************************************
    ' Create hyperlinks
    '
    ' Button pic is:   303
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create slide with hyperlinks"
         .Caption = "Create slide with hyperlinks"
         .OnAction = "AgendaLinks"
         .Style = msoButtonIcon
         .FaceId = 303
    End With
    
    '*****************************************************************************
    ' Create arrow pointing to right
    '
    ' Button pic is:   39
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create arrow pointing to right"
         .Caption = "Create arrow to right"
         .OnAction = "MultiCreateRightArrow"
         .Style = msoButtonIcon
         .FaceId = 39
    End With
      
    '*****************************************************************************
    ' Create arrow pointing up
    '
    ' Button pic is:   38
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create arrow pointing up"
         .Caption = "Create upward arrow"
         .OnAction = "MultiCreateUpArrow"
         .Style = msoButtonIcon
         .FaceId = 38
    End With
    
    '*****************************************************************************
    ' Create see through oval shape
    '
    ' Button pic is:
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Create see through oval"
         .Caption = "Create see through oval"
         .OnAction = "MultiCreateGreenOval"
         .Style = msoButtonIcon
         .FaceId = 1119
    End With
    
    '*****************************************************************************
    ' Insert tick yes at textbox location
    '
    ' Button pic is:   1087
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Insert tick at text location"
         .Caption = "Insert tick in text"
         .OnAction = "InsertyesTick"
         .Style = msoButtonIcon
         .FaceId = 1087
    End With
    
    '*****************************************************************************
    ' Change text colour from white to black or back again
    '
    ' Button pic is:   662
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Flip text colour black and white"
         .Caption = "Flip text colour black and white"
         .OnAction = "flipTextColour"
         .Style = msoButtonIcon
         .FaceId = 662
    End With
    
    '*****************************************************************************
    ' Change line colour from white to black or back again
    '
    ' Button pic is:   663
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Flip line colour black and white"
         .Caption = "Flip line colour black and white"
         .OnAction = "flipLineColour"
         .Style = msoButtonIcon
         .FaceId = 663
    End With
    
    '*****************************************************************************
    ' start timer
    '
    ' Button pic is:   2110
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Run a show timer"
         .Caption = "Run a show timer"
         .OnAction = "startTheClock"
         .Style = msoButtonIcon
         .FaceId = 2110
    End With
    
    '*****************************************************************************
    ' coffee cup
    '
    ' Button pic is:   480
    '
    '*****************************************************************************
    
    Set oButton = oToolbar.Controls.Add(Type:=msoControlButton)

    ' And set some of the button's properties
    With oButton
         .DescriptionText = "Coffee ?"
         .Caption = "Milk and sugar please"
         .OnAction = "Coffee"
         .Style = msoButtonIcon
         .FaceId = 480
    End With
    
    '****************************************************************************
    ' Last button done
    '****************************************************************************

    ' Repeat the above for as many more buttons as you need to add
    ' Be sure to change the .OnAction property at least for each new button

    ' You can set the toolbar position and visibility here if you like
    ' By default, it'll be visible when created
    'oToolbar.Top = 150
    'oToolbar.Left = 700
    'oToolbar.Width = 900
    oToolbar.Visible = True
     
     '**********************************
     ' ADD SOME TOOLS TO TOOLS MENU
     '**********************************

 '     ' Figure out where to place the menu choice.
 '    Set ToolsMenu = Application.CommandBars
'
 '     ' Create the menu choice. The choice is created in the first
 '     ' position in the Tools menu.
 '     Set NewControl = ToolsMenu("Tools").Controls.Add _
 '                      (Type:=msoControlButton, _
 '                       Before:=1)
'
 '     ' Name the command.
 '     NewControl.Caption = "Set master directory"
 '
 '     ' Connect the menu choice to your macro. The OnAction property
 '     ' should be set to the name of your macro.
 '     NewControl.OnAction = "setGlobalDirName"

 '     ' Create the menu choice. The choice is created in the first
  '    ' position in the Tools menu.
  '    Set NewControl = ToolsMenu("Tools").Controls.Add _
  '                     (Type:=msoControlButton, _
  '                      Before:=1)
'
  '    ' Name the command.
   '   NewControl.Caption = "Type of plots"
   '
   '   ' Connect the menu choice to your macro. The OnAction property
   '   ' should be set to the name of your macro.
   '  NewControl.OnAction = "setGlobalPicType"

'****************************************************
'
'              LAYOUT PARAMS
'
' Initial picture locations (if not tagged!)
'
'****************************************************

' top and left for old CGG format
defaultPicLeft = 20
defaultPicTop = 50
' pic should fill all of the slide
defaultPicWidth = 660 'ActivePresentation.PageSetup.SlideWidth
defaultPicHeight = 450 'ActivePresentation.PageSetup.SlideHeight
' pic is scaled back to leave some space for captions
defaultPicScaleWidth = 0.9
defaultPicScaleHeight = 0.9

setPicLayout = False

'****************************************************
'
' CHECK FOR HISTOGRAM SETTINGS
'
'****************************************************

defaultHistoLeft = 500
defaultHistoTop = 300
defaultHistoWidth = 200
defaultHistoHeight = 100
defaultHistoScaleWidth = 0.5
defaultHistoScaleHeight = 0.5

setHistoLayout = False

'****************************************************
'
' CHECK FOR TAGS FOR LAYOUT
'   this will set the layout values to the default
'   defined here if no tags are found.
'
'****************************************************

' Call checkForTag --> this can only be done once the ppt is active so
'                      it is done whenever a pic is loaded

'****************************************************
'
' Make sure that nothing is sized to a master which isnt defined
'
'****************************************************

setMaster = False

' Set default resizing up or down to 10 %

picResizeByHandSet = False

' association name has not been set by hand
setAname = False

' Colours are black for text and lines

textColourBlack = True
lineColourBlack = True

NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorHandler:
     'Just in case there is an error
     MsgBox "Error in opening add-in " & Err.Number & vbCrLf & Err.Description
     Resume NormalExit:
End Sub
Sub Auto_Close()

Dim oControl As CommandBarControl
Dim ToolsMenu As CommandBars

' Get an object reference to a command bar.
Set ToolsMenu = Application.CommandBars

 ' Loop through the commands on the tools menu.
 For Each oControl In ToolsMenu("pptVista                                  ---- first release ---- February 2007 -----").Controls
 
     ' Check to see whether the comand exists.
    If oControl.Caption = "Load multiple plots" Then
        
        ' Remove the command from the menu.
        oControl.Delete
    
    ElseIf oControl.Caption = "Load multiple plots with their associated plots" Then
        oControl.Delete
    ElseIf oControl.Caption = "Load  associated plot" Then
        oControl.Delete
    ElseIf oControl.Caption = "Define  associated plot" Then
        oControl.Delete
    ElseIf oControl.Caption = "Reload this pic on a new slide" Then
        oControl.Delete
    ElseIf oControl.Caption = "Display pic information" Then
         oControl.Delete
    ElseIf oControl.Caption = "Define layout slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Choose master" Then
         oControl.Delete
    ElseIf oControl.Caption = "Shape to master" Then
         oControl.Delete
    ElseIf oControl.Caption = "Crop and Shape to master" Then
         oControl.Delete
    ElseIf oControl.Caption = "Align to master" Then
         oControl.Delete
    ElseIf oControl.Caption = "Shape to master in place" Then
         oControl.Delete
    ElseIf oControl.Caption = "Reset picture properties" Then
         oControl.Delete
    ElseIf oControl.Caption = "Merge 2 plots onto 1 slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Merge 3 plots onto 1 slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Merge 4 plots onto 1 slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Crop the left of the picture" Then
         oControl.Delete
    ElseIf oControl.Caption = "Crop the right of the picture" Then
         oControl.Delete
    ElseIf oControl.Caption = "Crop the top of the picture" Then
         oControl.Delete
    ElseIf oControl.Caption = "Crop the bottom of the picture" Then
         oControl.Delete
    ElseIf oControl.Caption = "Set cropping size" Then
         oControl.Delete
    ElseIf oControl.Caption = "Scale size of picture up" Then
         oControl.Delete
    ElseIf oControl.Caption = "Scale size of picture down" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create x axis annotation (textbox)" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create y axis annotation" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create intro slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create observations slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create conclusions slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create chapter slide" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create agenda slides" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create slide with hyperlinks" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create arrow to right" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create upward arrow" Then
         oControl.Delete
    ElseIf oControl.Caption = "Create see through oval" Then
         oControl.Delete
    ElseIf oControl.Caption = "Insert tick in text" Then
         oControl.Delete
    ElseIf oControl.Caption = "Flip text colour black and white" Then
         oControl.Delete
    ElseIf oControl.Caption = "Flip line colour black and white" Then
         oControl.Delete
    ElseIf oControl.Caption = "Run a show timer" Then
         oControl.Delete
    ElseIf oControl.Caption = "Milk and sugar please" Then
         oControl.Delete
    End If
    
Next oControl

    
End Sub

Private Sub CleanTools()
' Manual cleaning of Tools in case coding and editing has gone wrong
'
' Use with caution and preferably only in debug mode

Dim oControl As CommandBarControl
Dim ToolsMenu As CommandBars

' Get an object reference to a command bar.
Set ToolsMenu = Application.CommandBars

 ' Loop through the commands on the tools menu.
 For Each oControl In ToolsMenu("pptVista                                  ---- first release ---- February 2007 -----").Controls
  
    ' Check to see whether the comand exists.
    If oControl.Caption = "Milk and sugar please" Then

        ' Remove the command from the menu.
        oControl.Delete
              
    End If
    
Next oControl

End Sub

Attribute VB_Name = "MultiPicsLoad"
'**********************************************************************
'
'    LIST OF SUBS AND FUNCS
'
'  SUBS
'  ----
'
'  LoadMultiplePics  --> HH routine to load multiple pics each one on a slide of its own
'  LoadMultiplePicsHisto --> HH routine to load a pic and (if exists) an associated plot with it
'  newSlideSinglePic --> HH routine that puts an image on a slide, either new or the associated plot onto current
'
'  FUNCTIONS
'  ---------
'
'  GetMultiplePics  --> the very internal dialog to load multiple pics
'  getPicInfo --> HH routine given a file name create information about the file to store with the pic being loaded
'  doesPicExist --> HH routine to check if an image name exists as a file in that location
'
'
'**********************************************************************
Option Explicit

Sub LoadMultiplePics()

Dim howMany As Integer
Dim picNames(200) As String
Dim orderpicnames(200) As String
Dim i As Integer
Dim success As Boolean
Dim picName As String

Dim currSlideNr As Integer
Dim resettoslidesorter As Boolean

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

' Check out global tags for pic loading
Call checkForTag

' CurrentSlideActivate
If (ActiveWindow.ViewType = ppViewSlideSorter) Then
        ActiveWindow.ViewType = ppViewNormal
        resettoslidesorter = True
End If

' What is the slide we are on? eg 29
currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
' MsgBox ("current slide is " & currSlideNr)
    
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

' Load pic names via common dialogs

howMany = -1

success = False
success = GetMultiplePics(howMany, picNames)

If (success = False) Then
    Exit Sub
End If

If (howMany > 199) Then
    MsgBox "The maximum number of pics to load in one go is 199 - I'm sorry", vbOKOnly
    Exit Sub
End If

' Shuffle the order so that they come in in order of clicking!

orderpicnames(howMany) = picNames(1)

For i = 2 To howMany
    orderpicnames(i - 1) = picNames(i)
Next i

For i = 1 To howMany
    picNames(i) = orderpicnames(i)
 Next i

For i = 1 To howMany
          
     ' create slides with titles --- this is not a histogram
     
     Call newSlideSinglePic(picNames(i), currSlideNr + 1, True, False)
     currSlideNr = currSlideNr + 1
  
Next i

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in opening multi-pic+histo load: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub

' Added by hhoeber on 21.05.06 to load single/mulitple files using article on
'
'  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnovba00/html/CommonDialogsPartI.asp
'
'
Sub LoadMultiplePicsHisto()

Dim howMany As Integer
Dim picNames(200) As String
Dim shortpicNames(200) As String
Dim suffixlessNames(200) As String
Dim suffixOnly(200) As String
Dim orderpicnames(200) As String
Dim picLoaded(200) As Boolean
Dim i As Integer
Dim j As Integer
Dim success As Boolean

Dim picName As String
Dim picname1, suffixname, trialString, testHisto, trialHisto, trialPic As String
Dim loadName1, loadName2 As String
Dim indexName1, indexName2 As Integer

Dim withTitle As Boolean
Dim asHisto As Boolean

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

' Check out global tags for pic loading
Call checkForTag

' Check what the association name is ie has it been set by hand?

Call checkAName
MsgBox ("association name is " & associationName)

' Check what page we're on

Dim currSlideNr As Integer
Dim resettoslidesorter As Boolean

' CurrentSlideActivate
If (ActiveWindow.ViewType = ppViewSlideSorter) Then
        ActiveWindow.ViewType = ppViewNormal
        resettoslidesorter = True
End If

' What is the slide we are on? eg 29
currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
' MsgBox ("current slide is " & currSlideNr)
    
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

' Load pic names via common dialogs

howMany = -1

success = False
success = GetMultiplePics(howMany, picNames)

If (success = False) Then
    Exit Sub
End If

If (howMany > 199) Then
    MsgBox "The maximum number of pics to load in one go is 199 - I'm sorry", vbOKOnly
    Exit Sub
End If

' Shuffle the order so that they come in in order of clicking!

orderpicnames(howMany) = picNames(1)

For i = 2 To howMany
    orderpicnames(i - 1) = picNames(i)
Next i

For i = 1 To howMany
    picNames(i) = orderpicnames(i)
    ' Set a flag for pic loaded or not --> this will help jump over
    ' histogram plots that may have already been loaded ...
    picLoaded(i) = False
    
    ' Create picNames without the full path name but still with suffix
    shortpicNames(i) = pathToName(picNames(i))
    
    ' Create list of suffixes and suffix-less names
    'Remove everything after the dot
    picname1 = Left(shortpicNames(i), InStr(1, shortpicNames(i), "."))
    suffixOnly(i) = right(shortpicNames(i), Len(shortpicNames(i)) - Len(picname1))
    ' Remove the dot
    suffixlessNames(i) = Left(picname1, Len(picname1) - 1)
    ' MsgBox ("Picture name is " & suffixlessNames(i))
 Next i

' This needs libraries
Dim OfsFileSys As New FileSystemObject
         Dim ofsFiles As Files
         Dim ofsFile As File
         Dim fff As String
         
For i = 1 To howMany
        ' MsgBox (picNames(i))

        If (picLoaded(i) = False) Then  ' if it's already loaded we can go straight to next pic
            
            ' Possible cases are:
            '  1) this is a normal pic without a histo
            '  2) this is a normal pic with a histo
            '  3) this is a histo with a pic
            '  4) this is a histo without a pic
            
            ' Cases 1 and 2 are similar ie we load 2 plots onto the slide
            ' Cases 3 and 4 are similar ie we load just the 1 plot onto the slide
                   
            picName = suffixlessNames(i)
           'MsgBox ("Picture name is " & picName)
                      
            ' Now check if this name contains Histo or not
            ' if yes --> look for pic-name without Histo
            ' if no  --> look for pic-name with Histo
            
            ' Subtract 5 last digits from trialString and see if this is = "Histo"
                        
            Dim isHisto As Boolean
            Dim isPic   As Boolean
            testHisto = right(suffixlessNames(i), Len(associationName))
            
            If (testHisto = associationName) Then
                ' MsgBox ("this is an associated file")
                isHisto = True
                isPic = False
            Else
                isHisto = False
                isPic = True
            End If
            
            ' If its a pic, lets see if there is a Histo to go with it?
            
            Dim picWithHisto As Boolean
            Dim picOnly      As Boolean
            Dim histoOnly    As Boolean
            Dim numberPicsonSlide As Integer
            
            numberPicsonSlide = 1
            
            ' IF IT'S A PIC CHECK FOR HISTO
            If (isPic = True) Then
            
                loadName1 = picName
                indexName1 = i
                picLoaded(i) = True
                
               ' loop over remaining pics and see if any of then are trialHisto
                trialHisto = picName + associationName
                
               For j = i To howMany
                   
                  If (picLoaded(j) = False) Then
                      If (trialHisto = suffixlessNames(j)) Then
                         numberPicsonSlide = 2
                         picWithHisto = True
                         picOnly = False
                         histoOnly = False
                         ' MsgBox ("Found histo to pic --- " & trialHisto)
                         
                         loadName2 = trialHisto
                         indexName2 = j
                         picLoaded(j) = True
                      End If
                     
                  End If
               
               Next j
               If (numberPicsonSlide = 1) Then
                  picOnly = True
                  picWithHisto = False
               End If
            End If
            
            ' IF IT'S A HISTO CHECK FOR PIC
            
            If (isHisto = True) Then
            
                loadName1 = picName
                indexName1 = i
                picLoaded(i) = True
            
                ' loop over remaining pics and see if any of them are trialPic
                trialPic = Left(picName, Len(picName) - Len(associationName))
                
                For j = i To howMany
                   
                  If (picLoaded(j) = False) Then
                      If (trialPic = suffixlessNames(j)) Then
                         numberPicsonSlide = 2
                         picWithHisto = True
                         picOnly = False
                         histoOnly = False
                         ' MsgBox ("Found pic to associated pic --- " & trialPic)
                         loadName1 = trialPic
                         indexName1 = j
                         picLoaded(i) = True
                         picLoaded(j) = True
                         loadName2 = picName
                         indexName2 = i
                      End If
                     
                  End If
               
               Next j
               If (numberPicsonSlide = 1) Then
                  histoOnly = True
                  picWithHisto = False
                  loadName1 = picName
                  indexName1 = i
                  picLoaded(i) = True
               End If
            End If
           
          '***********************************************************
          '
          '  Now we have all the information ie we know wich pic is on
          '    its own - whether histo or not - if a pic has an associated
          '    histogram etc.
          '
          '  So now we do the loading
          '
          '***********************************************************
          
          If ((histoOnly = True) Or (picOnly = True)) Then
            
                withTitle = True
                asHisto = False
                Call newSlideSinglePic(picNames(i), currSlideNr + 1, withTitle, asHisto)
                
                currSlideNr = currSlideNr + 1
                         
         End If ' only 1 pic ie only pic or only histo
         
         If (picWithHisto = True) Then  ' We load pic and histo as loadName1 and loadName 2 onto 1 slide
         
               ' main pic goes in and the title of the slide is derived from this
               withTitle = True
               asHisto = False
               Call newSlideSinglePic(picNames(indexName1), currSlideNr + 1, withTitle, asHisto)
               
               ' Histo goes on same slide and title is not added
               withTitle = False
               asHisto = True
               Call newSlideSinglePic(picNames(indexName2), currSlideNr + 1, withTitle, asHisto)
         
               currSlideNr = currSlideNr + 1
               
         End If
         
     End If
  
Next i

'********************************
' Error trapping
'********************************

NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in opening multi-pic+histo load: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If

End Sub
' Added by hhoeber on 12.12.06 to load multiple files and to
' automatically put xxx.jpg and xxxHisto.jpg on same slide'
'

Public Function GetMultiplePics(nPics As Integer, picNames() As String) As Integer
  
  Dim detail As Long
  
  Dim CDLG As ComDlg
  Set CDLG = New ComDlg
  
  With CDLG
    .DialogTitle = "Choose multiple files"
    .Directory = CStr(".")  'Options.DefaultFilePath(wdDocumentsPath)
    
    ' Filter options
    Dim f(5) As String
    f(0) = "Figures(*.gif *.jpg)|*.gif*;*.jpg"
    f(1) = "Gifs(*.gif)|*.gif"
    f(2) = "Jpgs (*.jpg)|*.jpg"
    f(3) = "Bmps (*.bmp)|*.bmp"
    f(4) = "All Files (*.*)|*.*"
    .Filter = f
    .FilterIndex = 0
    
    .CheckBoxSelected = False
    .AllowMultiSelect = True
    .ExistFlags = FileMustExist + PathMustExist
    'MsgBox ("ShowOpen is " & .ShowOpen)
    If .ShowOpen Then
      ' MsgBox ("ShowOpen is " & .ShowOpen)
      ' MsgBox ("Number of files = " & CDLG.FileNames.Count)
      nPics = CInt(CDLG.FileNames.Count)
      Dim i As Integer
      For i = 1 To .FileNames.Count
        ' MsgBox (.FileNames(i))
         picNames(i) = .FileNames(i)
        
        ' Documents.Open FileName:=.FileNames(i), ReadOnly:=.CheckBoxSelected
      Next
    End If
  End With
  Set CDLG = Nothing
 
If (nPics < 1) Then
    GetMultiplePics = False
Else
    GetMultiplePics = True
End If

End Function
Public Function doesPicExist(fullPicName As String) As Boolean
'
'  takes the full path+pic name and returns true of false depending on whether the pic
'     exists as a file
'
Dim OfsFileSys As New FileSystemObject

If (OfsFileSys.FileExists(fullPicName) = False) Then
    doesPicExist = False
Else
    doesPicExist = True
End If

End Function
Public Function getPicInfo(fullPicName As String) As String

'
'  takes the full path+pic name and returns the info when the pic
'     was loaded, created and modified
'
'  This information is stored in the alternative text placeholder of
'    the associated pic
'

Dim notesText As String

Dim OfsFileSys As New FileSystemObject
Dim ofsFiles As Files
Dim ofsFile As File

Dim picName As String
Dim dirName As String

Call splitFullName(fullPicName, picName, dirName)
       
' what is the full file and paht name and when was it loaded
notesText = fullPicName & " loaded on " & Date & " " & Time
                                       
picName = OfsFileSys.GetFileName(fullPicName)
          
Set ofsFiles = OfsFileSys.GetFolder(dirName).Files
Set ofsFile = ofsFiles.Item(picName)
          
' When was the file created and modified
notesText = notesText + " created on " & ofsFile.DateCreated & _
                        " last modified on " & ofsFile.DateLastModified
                  
' add a carriage return
notesText = notesText + vbCrLf
                                       
' Put everything into notes page
' oSld.NotesPage.Shapes.Placeholders(2).TextFrame.TextRange.InsertAfter notesText
          
' Add all info to the pic-info box
' oPic.AlternativeText = notesText
          
' free file system object
          
Set ofsFile = Nothing
Set ofsFiles = Nothing
Set OfsFileSys = Nothing

' Return the result
getPicInfo = notesText

End Function

Sub newSlideSinglePic(fullPicName As String, currSlideNr As Integer, withTitle As Boolean, asHisto As Boolean)

' slide
Dim oSld As Slide
' picture on slide
Dim oPic As Shape
' pic info associated with mouse clicking
Dim notesText As String
' scales to reshape the loaded pics as full pic or as histogram

Dim HistoWidthScale As Double
Dim HistoHeightScale As Double

' Dimensions of the pic on loading
Dim wwHisto, hhHisto, llHisto, ttHisto As Integer

'***********************************************************
'
'  PICTURE --> NEW SLIDE
'
'***********************************************************
If (asHisto = False) Then

    ' This adds a new slide in the current location
    Set oSld = ActivePresentation.Slides.Add(currSlideNr, ppLayoutTitleOnly)
       
    Set oPic = oSld.Shapes.AddPicture(FileName:=fullPicName, _
                                      LinkToFile:=msoFalse, _
                                      SaveWithDocument:=msoTrue, _
                                      Left:=layoutPicLeft, _
                                      Top:=layoutPicTop, _
                                      Width:=defaultPicWidth, _
                                      Height:=defaultPicHeight)
                                      
     With oPic
        
        ' Reset it to its "real" size
        
            .scaleHeight 1, msoTrue
            .scaleWidth 1, msoTrue
        
        If 3 * .Width > 4 * .Height Then
           ' .Width = ActivePresentation.PageSetup.SlideWidth
           .Width = layoutPicWidth
            
        Else
            '.Height = ActivePresentation.PageSetup.SlideHeight
            .Height = layoutPicHeight
        End If
        
        ' Lets make the size of the plots a little smaller to leave room for captions and comments
        '.Height = layoutPicScaleHeight * .Height
        '.Width = layoutPicScaleWidth * .Width
 
        With .ActionSettings(ppMouseClick) ' or ppMouseOver if you prefer
           .Run = "Identify"
         '  .Action = ppActionRunMacro
        End With
    
        notesText = getPicInfo(fullPicName)

        .AlternativeText = notesText
        
    End With

ElseIf (asHisto = True) Then
    
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select

    Set oPic = ActivePresentation.Slides.Range(currSlideNr).Shapes.AddPicture(FileName:=fullPicName, _
                                               LinkToFile:=msoFalse, _
                                               SaveWithDocument:=msoTrue, _
                                               Left:=layoutHistoLeft, _
                                               Top:=layoutHistoTop, _
                                               Width:=defaultHistoWidth, _
                                               Height:=defaultHistoHeight)
                                               
     ' Reset it to its "real" size
    With oPic
     ' .Name = globalPicDir & picName
      .scaleHeight 1, msoTrue
     .scaleWidth 1, msoTrue
    End With
     
    ' Optionally, make it fill the slide - even if that means changing the proportions of the picture
    ' To do that, uncomment the following:
    '  With oPic
    '      .LockAspectRatio = msoFalse
    '      .height = ActivePresentation.PageSetup.Slideheight
    '      .width = ActivePresentation.PageSetup. Slidewidth
    '  End With
    
    ' Or make the picture as big as possible on the slide
    ' without changing the proportions
    ' Leave the above commented out, uncomment this instead:
    With oPic
        If 3 * .Width > 4 * .Height Then
            '.Width = ActivePresentation.PageSetup.SlideWidth
            '.Top = 0.5 * (ActivePresentation.PageSetup.SlideHeight - .Height)
            .Width = layoutHistoWidth
        Else
            '.Height = ActivePresentation.PageSetup.SlideHeight
            '.Left = 0.5 * (ActivePresentation.PageSetup.SlideWidth - .Width)
            .Height = layoutHistoHeight
        End If
        ' Lets make the size of the plots a little smaller to leave room for captions and comments
        '.Height = layoutHistoScaleHeight * .Height
        '.Width = layoutHistoScaleWidth * .Width
    End With
    
    With oPic.ActionSettings(ppMouseClick)   ' or ppMouseOver if you prefer
        .Run = "Identify"
        '.Action = ppActionRunMacro
    End With
    
    notesText = getPicInfo(fullPicName)

    oPic.AlternativeText = notesText

End If

' Set the action such that clicking on the loaded picture returns the stored
'   text in AlternativeText
            
'With oPic.ActionSettings(ppMouseClick)   ' or ppMouseOver if you prefer
'        .Run = "Identify"
'        .Action = ppActionRunMacro
'End With

'**********************************************
' Build up pic-info
' The pic info used to be placed in the notes pages
'    as placeholder 2 in ppt (commented out below).
'
' In this version the pic info (still called notesText) is
'   placed into the alternativeText of the picture. This has
'   the advantage of associating the text with the pic ie we
'   can move the pic around and the information moves with it.
'
'**********************************************
                                                
'notesText = getPicInfo(fullPicName)
          
' Put everything into notes page
' oSld.NotesPage.Shapes.Placeholders(2).TextFrame.TextRange.InsertAfter notesText
          
' Add all info to the pic-info box
'oPic.AlternativeText = notesText
          
'**********************************************
' Add a box with the full path name of the pic
'**********************************************
          
'Set myShape = oSld.Shapes.AddShape(Type:=msoShapeRectangle, Left:=100, Top:=470, _
'              Width:=500, Height:=35)
'
'    myShape.Fill.ForeColor.RGB = RGB(255, 255, 255)
'
'    myShape.TextFrame.TextRange.Text = globalPicDir & picName
'
          
'**********************************************
' Add a title --> remove the path
'**********************************************

Dim dirName As String
Dim picName As String

If (withTitle = True) Then
    Call splitFullName(fullPicName, picName, dirName)
                    
    oSld.Shapes(1).TextFrame.TextRange = picName
End If

End Sub
Attribute VB_Name = "ObjectsManipulations"
Option Explicit

Sub findSymbolNumber()
     
     
    Dim oRange As TextRange
     
    Set oRange = ActiveWindow.Selection.TextRange.Characters
    
    Dim i As Integer
    For i = 250 To 253
    MsgBox i
    oRange.Text = Chr$(i)  ' the number of the character you want
    oRange.Font.name = "Wingdings"  ' the name of the font you want to use
    Next i
End Sub
Sub insertyesTick()
     
'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

    Dim oRange As TextRange
     
    Set oRange = ActiveWindow.Selection.TextRange.Characters
    
    oRange.Text = Chr$(252)  ' the number of the character you want
    oRange.Font.name = "Wingdings"  ' the name of the font you want to use
  
'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in insert tick: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
Sub MultiAddxCaption()

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call AddxCaption

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call AddxCaption
            
     Next oSlide

End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in add caption(x): " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
Sub MultiAddyCaption()

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call AddyCaption

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call AddyCaption
            
     Next oSlide

End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in add caption(y): " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub

Sub AddxCaption()
'
' Macro added 08/05/2006 by hhoeber
'
' Only works in normal view or slide view
'
Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If
    
    ActiveWindow.Selection.SlideRange.Shapes.AddTextbox(msoTextOrientationHorizontal, 250#, 450#, 174#, 31.25).Select
    ActiveWindow.Selection.ShapeRange.TextFrame.WordWrap = msoTrue
    ActiveWindow.Selection.ShapeRange.TextFrame.TextRange.Characters(Start:=1, Length:=0).Select
    ActiveWindow.Selection.TextRange.ParagraphFormat.Alignment = ppAlignCenter
    With ActiveWindow.Selection.TextRange
        .Text = "caption x"
        With .Font
            .name = "Arial"
            .Size = 14
            .Bold = msoTrue
            .Italic = msoFalse
            .Underline = msoFalse
            .Shadow = msoFalse
            .Emboss = msoFalse
            .BaselineOffset = 0
            .AutoRotateNumbers = msoFalse
            .Color.RGB = RGB(0, 0, 0)         'ppForeground
        End With
    End With
    With ActiveWindow.Selection.ShapeRange
        .Fill.ForeColor.RGB = RGB(255, 255, 255) 'ppTitle
        .Fill.Visible = msoTrue
        .Fill.Solid
    End With
    With ActiveWindow.Selection.ShapeRange
        .Line.ForeColor.RGB = RGB(0, 0, 0)         'ppForeground
        .Line.Visible = msoTrue
    End With
    
    If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If
    
End Sub
Sub AddyCaption()
'
' Macro added 08/05/2006 by hhoeber
'
'

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If

    ActiveWindow.Selection.SlideRange.Shapes.AddTextbox(msoTextOrientationHorizontal, -60#, 250#, 174#, 31.25).Select
    ActiveWindow.Selection.ShapeRange.TextFrame.WordWrap = msoTrue
    ActiveWindow.Selection.ShapeRange.TextFrame.TextRange.Characters(Start:=1, Length:=0).Select
    ActiveWindow.Selection.TextRange.ParagraphFormat.Alignment = ppAlignCenter
    
    With ActiveWindow.Selection.TextRange
        .Text = "caption y"
       
        With .Font
            .name = "Arial"
            .Size = 14
            .Bold = msoTrue
            .Italic = msoFalse
            .Underline = msoFalse
            .Shadow = msoFalse
            .Emboss = msoFalse
            .BaselineOffset = 0
            .AutoRotateNumbers = msoFalse
            .Color.RGB = RGB(0, 0, 0)         'ppForeground
        End With
    End With
    With ActiveWindow.Selection.ShapeRange
        .Fill.ForeColor.RGB = RGB(255, 255, 255) 'ppTitle
        .Fill.Visible = msoTrue
        .Fill.Solid
    End With
    With ActiveWindow.Selection.ShapeRange
        .Line.ForeColor.RGB = RGB(0, 0, 0)         'ppForegroundppForeground
        .Line.Visible = msoTrue
    End With
   ActiveWindow.Selection.ShapeRange.IncrementRotation -90#
   
       If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If
    
End Sub
Sub MultiCreateRightArrow()

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call CreateRightArrow

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call CreateRightArrow
            
     Next oSlide

End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in create rightarrow: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
Sub CreateRightArrow()
'
' Macro added 08/05/2006 by hhoeber'

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If
    ActiveWindow.Selection.SlideRange.Shapes.AddLine(200#, 300#, 300#, 300#).Select
    With ActiveWindow.Selection.ShapeRange
        .Line.EndArrowheadStyle = msoArrowheadTriangle
        .Line.EndArrowheadLength = msoArrowheadLengthMedium
        .Line.EndArrowheadWidth = msoArrowheadWidthMedium
        .flip msoFlipVertical
        .Line.ForeColor.RGB = RGB(0, 0, 0)
        .Line.Visible = msoTrue
        .Line.Weight = 2.25
        .Line.Style = msoLineSingle
    End With
    
        If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If
   
'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in add arrow-right: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
End Sub
Sub MultiCreateUpArrow()

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call CreateUpArrow

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call CreateUpArrow
            
     Next oSlide

End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in create up-arrow: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
Sub CreateUpArrow()
'
' Macro added 08/05/2006 by hhoeber'

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If
    ActiveWindow.Selection.SlideRange.Shapes.AddLine(200#, 300#, 200#, 400#).Select
    With ActiveWindow.Selection.ShapeRange
        .Line.EndArrowheadStyle = msoArrowheadTriangle
        .Line.EndArrowheadLength = msoArrowheadLengthMedium
        .Line.EndArrowheadWidth = msoArrowheadWidthMedium
        .flip msoFlipVertical
        .Line.ForeColor.RGB = RGB(0, 0, 0)
        .Line.Visible = msoTrue
        .Line.Weight = 2.25
        .Line.Style = msoLineSingle
    End With
    
        If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in error-up: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If

End Sub
Sub MultiCreateGreenOval()

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call CreateGreenOval

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call CreateGreenOval
            
     Next oSlide

End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in create green oval: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
Sub CreateGreenOval()
'
' Macro added 12/05/2006 by hhoeber'

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If
    ActiveWindow.Selection.SlideRange.Shapes.AddShape(msoShapeOval, 288#, 264#, 96#, 72#).Select
    With ActiveWindow.Selection.ShapeRange
        .Line.ForeColor.RGB = RGB(0, 128, 0)
        .Line.Visible = msoTrue
        .Line.Weight = 3#
        .Line.Visible = msoTrue
        .Line.Style = msoLineSingle
        .scaleWidth 0.69, msoFalse, msoScaleFromBottomRight
        .scaleHeight 0.92, msoFalse, msoScaleFromTopLeft
    End With
    
        If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in green oval: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If

End Sub

Attribute VB_Name = "ResetCroppingButton"
Attribute VB_Base = "0{4719347F-F908-4018-9C73-A68C1C7B862A}{B9E49E2A-97DB-4449-A68C-A82A70442703}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub Button1_Click()
        
        'MsgBox ("inputting now")
        picResizeByHand = TextBox1.Value
        'MsgBox ("You typed " + TextBox1.Value)
        picResizeByHandSet = True
   
End Sub

Attribute VB_Name = "SetAssociation"
Attribute VB_Base = "0{D11D7797-F874-43AA-A1F4-DD774F100DAD}{CDB1AB2E-359D-470A-88B6-DF7B02D78380}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub Button1_Click()
        
        'MsgBox ("inputting now")
        associationName = TextBox1.Value
        'MsgBox ("You typed " + TextBox1.Value)
        setAname = True
   
End Sub

Attribute VB_Name = "Utilities"
Sub CheckSlideContent()

Dim X As Integer
Dim Y As Integer
Dim oObject As Boolean
Dim intParaCount As Integer
Dim oBodyText As Shape
Dim OBaseSlide As Slide
Dim oNewSlide As Slide
Dim oNewBodyText As Shape
Dim nrShapes As Integer

' nrShapes = ActivePresentation.Slides(3).Shapes.Count
' MsgBox "Number of shapes on slide 3 " & nrShapes

oObject = False
Set OBaseSlide = ActiveWindow.Selection.SlideRange(1)
With OBaseSlide
    ' Get a reference to the body text placeholder
    For X = 1 To .Shapes.Placeholders.Count
        If .Shapes.Placeholders(X).PlaceholderFormat.Type = ppPlaceholderBody Then
            Set oBodyText = .Shapes.Placeholders(X)
        End If
        
    Next X
    
    ' No body text on the slide?
    If oBodyText Is Nothing Then
        MsgBox "There is no text to create an agenda from."
        Exit Sub
    End If
    
        
End With

End Sub
Attribute VB_Name = "collectPics"
Option Explicit

Sub collect2Plots()
'
' Macro added 10/05/2006 by hhoeber
'
    Dim currSlideNr As Integer
    
    Dim cp1 As Integer
    Dim cp2 As Integer
    
    Dim oPic1, oPic2, Osh As Shape
    Dim wi, he As Integer
    Dim i, j As Integer
    Dim FileName(999) As String
    Dim noPics1, noPics2 As Integer
    Dim newTitle As String
    Dim picName As String
   
' What is the slide we are on? eg 29
currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
' MsgBox ("current slide is " & currSlideNr)
' Are there 2 slides here?
Dim lastSlideNr As Integer
lastSlideNr = ActivePresentation.Slides.Count
If (currSlideNr + 1 > lastSlideNr) Then
    MsgBox ("There are not enough slides following this one!")
    Exit Sub
End If
    
' Check that the slides have only 1 pic each for time being this is all I can do

 noPics1 = ReturnNoPics(currSlideNr)
 noPics2 = ReturnNoPics(currSlideNr + 1)
 ' Make sure that slide 29 is still the active one
 ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 ' MsgBox ("No pics are " & noPics1 & " and " & noPics2)
 
 If (noPics1 > 1) Then
    MsgBox ("Slide " & currSlideNr & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 If (noPics2 > 1) Then
    MsgBox ("Slide " & currSlideNr + 1 & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 
 ' Create title
 newTitle = "Slides " + CStr(currSlideNr + 1) + " and " + CStr(currSlideNr + 2)
    
' Duplicate slide ie 29=30 --> plot we still want is now on 31
' currSlideNr = 29 2nd pic on slide 31
    'MsgBox ("current slide is " & ActiveWindow.Selection.SlideRange.SlideIndex)
    ActiveWindow.Selection.SlideRange(1).Duplicate
    ' MsgBox ("current slide is " & currSlideNr)
    cp2 = currSlideNr + 2
    
    
' Make current slide active eg 29
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
' Set the title
    ActivePresentation.Slides.Range(Array(currSlideNr)).Shapes(1).TextFrame.TextRange = newTitle
    
' Make next slide active and grab picture eg slide 31
    ActivePresentation.Slides.Range(Array(cp2)).Select
    ActiveWindow.ViewType = ppViewNormal
    picName = picNames(cp2, 1)
    ' MsgBox ("pic is called " & picname)
    ActiveWindow.Selection.SlideRange.Shapes(picName).Select
    ' grab picture on this slide
    Set oPic2 = ActiveWindow.Selection.SlideRange.Shapes(picName)
    ActiveWindow.Selection.Copy
    ActiveWindow.ViewType = ppViewSlideSorter
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.View.Paste
       
    ActiveWindow.ViewType = ppViewSlideSorter
  
' Loop over pics and resize

wi = 0.95 * ActivePresentation.PageSetup.SlideWidth / 2
he = 0.95 * ActivePresentation.PageSetup.SlideHeight / 2
j = 0
For Each Osh In ActivePresentation.Slides.Range(currSlideNr).Shapes

    ' Is it a picture?
    If ((Left(Osh.name, Len(Osh.name) - 2) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 3) = "Picture")) Then
            
        FileName(j + 1) = Osh.name
        j = j + 1
        
        ' MsgBox ("name is " & oSh.Name)
        '  MsgBox ("width = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Width _
                & " height = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Height)
        
        ' Resize pic
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).LockAspectRatio = msoFalse
        
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Width = wi
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Height = he
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Top = _
                 50 + 0.15 * (ActivePresentation.PageSetup.SlideHeight - he)
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Left = _
                 20 + (j - 1) * wi
       
        'MsgBox ("width = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Width _
        '        & " height = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Height)
        
     End If
     
ActiveWindow.ViewType = ppViewNormal
     
Next Osh

'Set oPic1 = ActiveWindow.Selection.SlideRange.Shapes(fileName(1))
'wi = oPic1.Width
'he = oPic1.Height
'
For i = 2 To 2

    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).LockAspectRatio = msoFalse
    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).Width = wi
    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).Height = he

Next i

ActiveWindow.ViewType = ppViewSlideSorter
    
End Sub

Sub collect3Plots()
'
' Macro added 10/05/2006 by hhoeber
'
    Dim currSlideNr As Integer
    Dim cp2 As Integer
    Dim cp3 As Integer
    Dim oPic1, oPic2, Osh As Shape
    Dim wi, he As Integer
    Dim i, j As Integer
    Dim FileName(999) As String
    Dim noPics1, noPics2, noPics3 As Integer
    Dim newTitle As String
    Dim picName As String
    
' What is the slide we are on? eg 29
    currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
    ' MsgBox ("current slide is " & CurrSlideNr)
    
' Are there 3 slides here?
Dim lastSlideNr As Integer
lastSlideNr = ActivePresentation.Slides.Count
If (currSlideNr + 2 > lastSlideNr) Then
    MsgBox ("There are not enough slides following this one!")
    Exit Sub
End If

' Check that the slides have only 1 pic each for time being this is
' all I can do

 noPics1 = ReturnNoPics(currSlideNr)
 noPics2 = ReturnNoPics(currSlideNr + 1)
 noPics3 = ReturnNoPics(currSlideNr + 2)
 ' Make sure that slide 29 is still the active one
 ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 ' MsgBox ("No pics are " & noPics1 & " and " & noPics2)
 
 If (noPics1 > 1) Then
    MsgBox ("Slide " & currSlideNr & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 If (noPics2 > 1) Then
    MsgBox ("Slide " & currSlideNr + 1 & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 If (noPics3 > 1) Then
    MsgBox ("Slide " & currSlideNr + 2 & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 
 ' Create title
 newTitle = "Slides " + CStr(currSlideNr + 1) + _
              " and " + CStr(currSlideNr + 2) + _
              " and " + CStr(currSlideNr + 3)
    
' Duplicate slide ie becomes 30 --> plot we still want is now on 31
    ActiveWindow.Selection.SlideRange(1).Duplicate
    
    cp2 = currSlideNr + 2
    cp3 = currSlideNr + 3
    
' Make current slide active eg 29
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
' Set the title
    ActivePresentation.Slides.Range(Array(currSlideNr)).Shapes(1).TextFrame.TextRange = newTitle
    
' Make next slide active and grab picture eg slide 31
    ActivePresentation.Slides.Range(Array(cp2)).Select
    ActiveWindow.ViewType = ppViewNormal
    picName = picNames(cp2, 1)
    ActiveWindow.Selection.SlideRange.Shapes(picName).Select
    ' grab picture on this slide
    Set oPic2 = ActiveWindow.Selection.SlideRange.Shapes(picName)
    ActiveWindow.Selection.Copy
    ActiveWindow.ViewType = ppViewSlideSorter
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.View.Paste
       
    ActiveWindow.ViewType = ppViewSlideSorter

' Repeat with slide one further down
    ActivePresentation.Slides.Range(Array(cp3)).Select
    ActiveWindow.ViewType = ppViewNormal
    picName = picNames(cp3, 1)
    ActiveWindow.Selection.SlideRange.Shapes(picName).Select
    ActiveWindow.Selection.Copy
    ActiveWindow.ViewType = ppViewSlideSorter
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.View.Paste
    ActiveWindow.ViewType = ppViewSlideSorter
    
    ActiveWindow.ViewType = ppViewNormal
        
' Loop over pics and resize

wi = 0.95 * ActivePresentation.PageSetup.SlideWidth / 3
he = 0.95 * ActivePresentation.PageSetup.SlideHeight / 3
j = 0
For Each Osh In ActivePresentation.Slides.Range(currSlideNr).Shapes

     ' Is it a picture?
    If ((Left(Osh.name, Len(Osh.name) - 2) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 3) = "Picture")) Then
            
        FileName(j + 1) = Osh.name
        j = j + 1
        
        ' MsgBox ("name is " & oSh.Name)
        '  MsgBox ("width = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Width _
                & " height = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Height)
        
        ' Resize pic
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).LockAspectRatio = msoFalse
        
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Width = wi
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Height = he
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Top = _
                 50 + 0.15 * (ActivePresentation.PageSetup.SlideHeight - he)
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Left = _
                 20 + (j - 1) * wi
       
        'MsgBox ("width = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Width _
        '        & " height = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Height)
        
     End If
     
Next Osh

ActiveWindow.ViewType = ppViewNormal

'Set oPic1 = ActiveWindow.Selection.SlideRange.Shapes(fileName(1))
'wi = oPic1.Width
'he = oPic1.Height
'
For i = 2 To j

    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).LockAspectRatio = msoFalse
    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).Width = wi
    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).Height = he

Next i

ActiveWindow.ViewType = ppViewSlideSorter
    
End Sub

Sub collect4Plots()
'
' Macro added 10/05/2006 by hhoeber
'
   Dim currSlideNr As Integer
   Dim cp2 As Integer
   Dim cp3 As Integer
   Dim cp4 As Integer
   Dim oPic1, oPic2, Osh As Shape
   Dim wi, he As Integer
   Dim i, j As Integer
    Dim FileName(999) As String
    Dim noPics1, noPics2, noPics3, noPics4 As Integer
    Dim newTitle As String
   Dim picName As String
   
' What is the slide we are on? eg 29
    currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
    ' MsgBox ("current slide is " & CurrSlideNr)

' Are there 4 slides here?
Dim lastSlideNr As Integer
lastSlideNr = ActivePresentation.Slides.Count
If (currSlideNr + 3 > lastSlideNr) Then
    MsgBox ("There are not enough slides following this one!")
    Exit Sub
End If

' Check that the slides have only 1 pic each for time being this is
' all I can do

 noPics1 = ReturnNoPics(currSlideNr)
 noPics2 = ReturnNoPics(currSlideNr + 1)
 noPics3 = ReturnNoPics(currSlideNr + 2)
 noPics4 = ReturnNoPics(currSlideNr + 3)
 
 ' Make sure that slide 29 is still the active one
 ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 ' MsgBox ("No pics are " & noPics1 & " and " & noPics2)
 
 If (noPics1 > 1) Then
    MsgBox ("Slide " & currSlideNr & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 If (noPics2 > 1) Then
    MsgBox ("Slide " & currSlideNr + 1 & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 If (noPics3 > 1) Then
    MsgBox ("Slide " & currSlideNr + 2 & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 If (noPics4 > 1) Then
    MsgBox ("Slide " & currSlideNr + 2 & " has more than 1 pic! So I quit.")
    Exit Sub
 End If
 
 ' Create title
 newTitle = "Slides " + CStr(currSlideNr + 1) + _
              " and " + CStr(currSlideNr + 2) + _
              " and " + CStr(currSlideNr + 3) + _
              " and " + CStr(currSlideNr + 4)
              
' Duplicate slide ie becomes 30 --> plot we still want is now on 31
    ActiveWindow.Selection.SlideRange(1).Duplicate
    
    cp2 = currSlideNr + 2
    cp3 = currSlideNr + 3
    cp4 = currSlideNr + 4
    
' Make current slide active eg 29
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
' Set the title
    ActivePresentation.Slides.Range(Array(currSlideNr)).Shapes(1).TextFrame.TextRange = newTitle
    
' Make next slide active and grab picture eg slide 31
    ActivePresentation.Slides.Range(Array(cp2)).Select
    ActiveWindow.ViewType = ppViewNormal
    picName = picNames(cp2, 1)
    ActiveWindow.Selection.SlideRange.Shapes(picName).Select
    ' grab picture on this slide
    Set oPic2 = ActiveWindow.Selection.SlideRange.Shapes(picName)
    ActiveWindow.Selection.Copy
    ActiveWindow.ViewType = ppViewSlideSorter
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.View.Paste
       
    ActiveWindow.ViewType = ppViewSlideSorter

' Repeat with slide one further down
    ActivePresentation.Slides.Range(Array(cp3)).Select
    ActiveWindow.ViewType = ppViewNormal
    picName = picNames(cp3, 1)
    ActiveWindow.Selection.SlideRange.Shapes(picName).Select
    ActiveWindow.Selection.Copy
    ActiveWindow.ViewType = ppViewSlideSorter
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.View.Paste
    
    ActiveWindow.ViewType = ppViewSlideSorter
    
' Repeat with slide one further down
    ActivePresentation.Slides.Range(Array(cp4)).Select
    picName = picNames(cp4, 1)
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.Selection.SlideRange.Shapes(picName).Select
    ActiveWindow.Selection.Copy
    ActiveWindow.ViewType = ppViewSlideSorter
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
    ActiveWindow.ViewType = ppViewNormal
    ActiveWindow.View.Paste
    
    ActiveWindow.ViewType = ppViewSlideSorter
    
    ActiveWindow.ViewType = ppViewNormal
        
' Loop over pics and resize

wi = 0.8 * ActivePresentation.PageSetup.SlideWidth / 2
he = 0.8 * ActivePresentation.PageSetup.SlideHeight / 2
j = 0
For Each Osh In ActivePresentation.Slides.Range(currSlideNr).Shapes

    ' Is it a picture?
    If ((Left(Osh.name, Len(Osh.name) - 2) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 3) = "Picture")) Then
        
        FileName(j + 1) = Osh.name
        j = j + 1
        
        ' MsgBox ("name is " & oSh.Name)
        '  MsgBox ("width = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Width _
                & " height = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Height)
        
        ' Resize pic
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).LockAspectRatio = msoFalse
        
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Width = wi
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Height = he
        
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Top = _
                 50 + he * Int((j - 1) / 2)
                 
        ActiveWindow.Selection.SlideRange.Shapes(Osh.name).Left = _
                   50 + (j - 1) * wi - 2 * wi * Int((j - 1) / 2)
       
        'MsgBox ("width = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Width _
        '        & " height = " & ActiveWindow.Selection.SlideRange.Shapes(oSh.Name).Height)
        
     End If
     
Next Osh

ActiveWindow.ViewType = ppViewNormal

'Set oPic1 = ActiveWindow.Selection.SlideRange.Shapes(fileName(1))
'wi = oPic1.Width
'he = oPic1.Height
'
For i = 2 To j

    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).LockAspectRatio = msoFalse
    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).Width = wi
    ActiveWindow.Selection.SlideRange.Shapes(FileName(i)).Height = he

Next i

ActiveWindow.ViewType = ppViewSlideSorter

End Sub

Sub noPicsonSlide()
' Returns a message box stating the slide number and the number of pics on that slide
' Added 11/05/06

Dim nrPics As Integer
Dim currSlideNr As Integer
    Dim oPic1, oPic2, Osh As Shape
    Dim wi, he As Integer
    Dim i, j As Integer
    Dim FileName(999) As String
   
' What is the slide we are on? eg 29
    currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
    ' MsgBox ("current slide is " & CurrSlideNr)

' Make current slide active eg 29
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 
nrPics = ReturnNoPics(currSlideNr)
MsgBox ("Number of pics on slide " & currSlideNr & " is " & nrPics)

End Sub
Sub picNamesonSlide()
' Returns a message box stating the names of the number of expected plots
' Added 11/05/06

Dim nrPics As Integer
Dim currSlideNr As Integer
Dim Osh As Shape
Dim name As String
Dim pics(999) As String

Dim i, j As Integer
Dim FileName(999) As String
   
' What is the slide we are on? eg 29
currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
' MsgBox ("current slide is " & CurrSlideNr)

' Make current slide active eg 29
ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 
nrPics = ReturnNoPics(currSlideNr)
' MsgBox ("Number of pics on slide " & CurrSlideNr & " is " & nrPics)

' What are the names of these pics?
name = picNames(currSlideNr, nrPics)
MsgBox ("Pics are called " & name)

' Pull off individual pic names one by one
h = Left(name, Len("Picture"))
MsgBox ("First pic is " & h)

h = right(name, Len("Picture"))
MsgBox ("Next pic is " & h)
End Sub

Function picNames(currSlideNr As Integer, noPicsExpected As Integer) As String
' Checks that the number of pics expected is indeed the number of pics
' and then returns the names as one big string
' Added 11/05/06

Dim trueNoPics As Integer
Dim nameCollection As String
Dim j As Integer
Dim Osh As Shape

nameCollection = ""

' Check that there really is just that particular number of pics

' Make current slide active eg 29
ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 
trueNoPics = ReturnNoPics(currSlideNr)
' MsgBox ("Number of pics on slide " & CurrSlideNr & " is " & trueNoPics)

If (trueNoPics = noPicsExpected) Then
 ' carry on and get the names
 j = 0
    For Each Osh In ActivePresentation.Slides.Range(currSlideNr).Shapes

        ' Is it a picture?
        If ((Left(Osh.name, Len(Osh.name) - 2) = "Picture") _
             Or (Left(Osh.name, Len(Osh.name) - 3) = "Picture") _
            Or (Left(Osh.name, Len(Osh.name) - 4) = "Picture") _
             Or (Left(Osh.name, Len(Osh.name) - 5) = "Picture") _
             Or (Left(Osh.name, Len(Osh.name) - 6) = "Picture") _
             ) Then
       
            j = j + 1
        
            nameCollection = nameCollection + Osh.name + " "
                    
            ' MsgBox ("name is " & oSh.name)
            
            
         End If
     
    Next Osh
    picNames = nameCollection
 
 Else
    ' There's a flaw
        MsgBox ("The number of pics on slide " & currSlideNr & " was meant to be " & noPicsExpected & _
         vbCr & "but it is " & trueNoPics)
        
        picNames = ""
End If

End Function
Function ReturnNoPics(currSlideNr As Integer) As Integer
' Counts all objects on slide that are pictures
' Added 11/05/06

Dim j As Integer
Dim Osh As Shape
   
' What is the slide we are on? eg 29
    ' currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
    ' MsgBox ("current slide is " & CurrSlideNr)
 
' Make current slide active eg 29
    ActivePresentation.Slides.Range(Array(currSlideNr)).Select

j = 0
For Each Osh In ActivePresentation.Slides.Range(currSlideNr).Shapes

    ' Is it a picture?
    If ((Left(Osh.name, Len(Osh.name) - 2) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 3) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 4) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 5) = "Picture") _
          Or (Left(Osh.name, Len(Osh.name) - 6) = "Picture") _
          ) Then
       
        j = j + 1
        
        ' MsgBox ("name is " & oSh.Name)
            
     End If
     
Next Osh
' Set return value of this function

ReturnNoPics = j


End Function

Function countNoImagesOnSlide(currSlideNr As Integer) As Integer

    Dim oSldSource As Slide
    Dim oShpSource As Shape
    Dim Ctr As Integer
    Dim sPath As String
    Dim noPics As Integer
    
    noPics = 0
    
    Set oSldSource = ActiveWindow.Selection.SlideRange(1)
    'For Each oSldSource In ActivePresentation.Slides
        For Each oShpSource In oSldSource.Shapes
            If oShpSource.Type = msoPicture Then
               noPics = noPics + 1
            End If
        Next oShpSource

countNoImagesOnSlide = noPics

End Function
Sub countImagesonSlide()

Dim nrPics As Integer
Dim currSlideNr As Integer
Dim Osh As Shape
Dim name As String
Dim pics(999) As String

Dim i, j As Integer
Dim FileName(999) As String
   
' What is the slide we are on? eg 29
currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
' MsgBox ("current slide is " & CurrSlideNr)

' Make current slide active eg 29
ActivePresentation.Slides.Range(Array(currSlideNr)).Select
 
nrPics = countNoImagesOnSlide(currSlideNr)
MsgBox ("Number of images on slide " & currSlideNr & " is " & nrPics)


End Sub

Function countNoPicsSlide() As Integer

On Error GoTo ErrorExtract

Dim oSldSource As Slide
Dim oShpSource As Shape
Dim Ctr As Integer
Dim sPath As String
Dim noPics As Integer
    
    noPics = 0
    countNoPicsSlide = 0
    
    ' Check what view we are in

    Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If
    
    ' Set active slide to current slide
    Set oSldSource = ActiveWindow.Selection.SlideRange(1)
    
    'For Each oSldSource In ActivePresentation.Slides
        For Each oShpSource In oSldSource.Shapes
            If oShpSource.Type = msoPicture Then
               noPics = noPics + 1
            End If
        Next oShpSource
    'Next oSldSource
    
    If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If
    countNoPicsSlide = noPics
    Exit Function
ErrorExtract:
    If Err.Number <> 0 Then
        MsgBox Err.Description, vbCritical, "Error #" & Err.Number
    End If

If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
End If
End Function

Attribute VB_Name = "colourSettings"
Option Explicit

Sub flipTextColour()
'
' Macro added 12/05/2006 by hhoeber
'
' (0,0,0)       black
' (255,255,255) white

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

    If ActiveWindow.Selection.TextRange = Empty Then
        MsgBox "You must select something"
        Exit Sub
    End If
    
    With ActiveWindow.Selection.TextRange
    If (textColourBlack = True) Then
           ' means current is black and new is white
            .Font.Color.RGB = RGB(255, 255, 255)
            textColourBlack = False
        Else
            .Font.Color.RGB = RGB(0, 0, 0)
            textColourBlack = True
        End If
    End With
    
'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in flip-colour-text: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub

Sub flipLineColour()
'
' Macro added 12/05/2006 by hhoeber'
'
' (0,0,0)       black
' (255,255,255) white

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

    With ActiveWindow.Selection.ShapeRange
        If (lineColourBlack = True) Then
           ' means current is black and new is white
           .Line.ForeColor.RGB = RGB(255, 255, 255)
           lineColourBlack = False
         Else
            .Line.ForeColor.RGB = RGB(0, 0, 0)
            lineColourBlack = True
         End If
        .Line.Visible = msoTrue
    End With
    
'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in flip-colour-line load: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
End Sub






Attribute VB_Name = "extractImages"
Option Explicit

Sub ExtractImagesFromPres()
On Error GoTo ErrorExtract
    Dim oSldSource As Slide
    Dim oShpSource As Shape
    Dim Ctr As Integer
    Dim sPath As String
    
    sPath = "G:\"
    Ctr = 0
    For Each oSldSource In ActivePresentation.Slides
        For Each oShpSource In oSldSource.Shapes
            If oShpSource.Type = msoPicture Then
        ' Hidden Export method
                Call oShpSource.Export(sPath & "Img" & _
                Format(Ctr, "0000") & ".GIF", ppShapeFormatGIF)
                Ctr = Ctr + 1
            End If
        Next oShpSource
    Next oSldSource
    If Ctr = 0 Then
        MsgBox "There were no images found in this presentation", _
                        vbInformation, "Image extraction failed."
    End If
    Exit Sub
ErrorExtract:
    If Err.Number <> 0 Then
        MsgBox Err.Description, vbCritical, "Error #" & Err.Number
    End If
End Sub


Attribute VB_Name = "loadHisto"
Option Explicit

Sub loadMultiHisto()

Dim oSlide As Slide

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

' Check out global tags for pic loading
Call checkForTag

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method to set
    Call loadHisto

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
        'MsgBox ("slide number is " & oSlide.SlideNumber)
    
        ' activate the current slide
         ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
         ' Call the method to set
         Call loadHisto
            
         Next oSlide
End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in historgram loading: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
'*****************************************************************************
'
Sub splitFullName(fullPicName As String, picName As String, dirName As String)
'
'*****************************************************************************
' takes full path name = fullPicName
' and removes the pic name leaving the directory path = dirName
' and removes the directory name leaving the pic name = picName

' Length of a string
Dim rr As Long

' Find the first backslash starting from the right of the full name
'  and count how long the part of the string to the left of that is

'  example: g:/dir1/dir2/piccie.jpg  --> length of g:/dir1/dir2/ is 13
'
'
rr = InStrRev(fullPicName, "\")

' Keep only the first rr characters from the fullPicName ie isolate
'   the directory name!

dirName = Left(fullPicName, rr)

' Now subtract the length of the directory name from the full length
'   to get the length of the piccie name

rr = Len(fullPicName) - Len(dirName)

' Keep only the first rr characters from the full length to get the
'   name of the picture without the path

picName = right(fullPicName, rr)

End Sub
Public Function pathToDir(fullPicName As String) As String
'takes full path name and removes the pic name leaving the directory path

Dim rr As Long

rr = InStrRev(fullPicName, "\")
pathToDir = Left(fullPicName, rr)

End Function
Public Function pathToName(fullPicName As String) As String
' takes full path name and removes the directory path leaving the pic name

Dim rr As Long

Dim dirName As String

rr = InStrRev(fullPicName, "\")

' Keep only the first rr characters from the fullPicName ie isolate
'   the directory name!

dirName = Left(fullPicName, rr)

' Now subtract the length of the directory name from the full length
'   to get the length of the piccie name

rr = Len(fullPicName) - Len(dirName)

' Keep only the first rr characters from the full length to get the
'   name of the picture without the path

pathToName = right(fullPicName, rr)

End Function
Sub checkAName()

 If (setAname = False) Then
    associationName = "Histo"
 End If

End Sub
Sub setAssociationName()

SetAssociation.Show vbModal
'MsgBox ("new value is " & picResizeByHand)
End Sub


Sub loadHisto()
'
' Macro programmed 09/12/2006 by hhoeber
' Loads file called xxxHisto into slide with plot xxx already loaded.
'  The histo is resized into bottom right corner
'
Dim currSlideNr As Integer

Dim oSldSource As Slide
Dim oShpSource As Shape

Dim Osh As Shape
Dim oSld As Slide

On Error GoTo ErrorExtract

' Check what the association name is ie has it been set by hand?

Call checkAName
'MsgBox ("association name is " & associationName)

'get the total number of slides
' n = ActivePresentation.Slides.Count
' MsgBox ("total number of slides is" & n)

' Check what view we are in

Dim resettoslidesorter As Boolean
 
' CurrentSlideActivate
If (ActiveWindow.ViewType = ppViewSlideSorter) Then
    ActiveWindow.ViewType = ppViewNormal
    resettoslidesorter = True
End If

' Current slide number
'MsgBox "slide index of current slide is:" & ActiveWindow.View.Slide.SlideIndex
currSlideNr = ActiveWindow.View.Slide.SlideIndex

' Check if a shape is selected on this page
Set Osh = ActiveWindow.Selection.ShapeRange(1)

Call loadHistoDoTheWork1(Osh)

If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

ErrorExtract:
If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            ' Now check if there is a single image on the slide and if so
            '    select this as the master
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(ActiveWindow.Selection.SlideRange.SlideIndex)
            Select Case noPics
            Case 0
               MsgBox ("There are no images on this slide!")
            Case 1
               ' If we arrive here there is only 1 image on the slide and we can select it
                '    and load its histogram
                 Set oSldSource = ActiveWindow.Selection.SlideRange(1)
                 For Each oShpSource In oSldSource.Shapes
                      If oShpSource.Type = msoPicture Then
                          Set Osh = oShpSource
                      End If
                 Next oShpSource
            
                  ' CODE HERE
                  Call loadHistoDoTheWork1(Osh)
        
            End Select
            
            If noPics > 1 Then
               MsgBox ("I can see" & noPics & " images on this slide - so which one?")
            End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        If (resettoslidesorter = True) Then
             ActiveWindow.ViewType = ppViewSlideSorter
        End If
    End If
    
End Sub
Sub loadHistoDoTheWork1(Osh As Shape)

' HH added 07.01.2007

' This version of loading histos works not with the notes pages but with the info loaded into the AlternativeText of
' the shape

Dim currSlideNr As Integer
Dim newSlideNr As Integer
Dim trialString, trialString1, suffixname As String

Dim fullPicName As String
Dim picName As String
Dim dirName As String

Dim withTitle As Boolean
Dim asHisto As Boolean

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

' Current slide number
currSlideNr = ActiveWindow.View.Slide.SlideIndex

'Select the pic info from the alternative text
Dim notesText As String
notesText = Osh.AlternativeText

' Isolate pic name -->  picture name is first !

' What is the first word
trialString = Left(notesText, InStr(1, notesText, " loaded"))

'Remove everything after the dot
fullPicName = Left(trialString, InStr(1, trialString, "."))
suffixname = right(trialString, Len(trialString) - Len(fullPicName))

' Remove the dot
trialString = Left(fullPicName, Len(fullPicName) - 1)
' Add Histo . and last three
fullPicName = trialString + associationName + "." + suffixname

Call splitFullName(fullPicName, picName, dirName)

'MsgBox ("Picture name is " & fullpicname)

' Make sure this picture exists and error message end routine if not
          
If (doesPicExist(fullPicName) = False) Then
    MsgBox ("The file you are trying to load " & fullPicName & "does not exist")
   
    Exit Sub
Else
   
    ' Histo goes on same slide and title is not added
    withTitle = False
    asHisto = True
    Call newSlideSinglePic(fullPicName, currSlideNr, withTitle, asHisto)
               
End If

Dim resettoslidesorter As Boolean
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

'********************************
' Error trapping
'********************************

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
    End If

End Sub
Attribute VB_Name = "moveThiings"
' size of screen show
' 720 x 540 points ie 72 points per inch
' 10" x 7.5 inches

Private Declare Function GetDC Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function ReleaseDC Lib "user32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440

Private Declare Function GetSystemMetrics Lib "user32" ( _
    ByVal nIndex As Long) As Long

Private Const SM_CXFULLSCREEN = 16
Private Const SM_CYFULLSCREEN = 17
Sub Test()

' Routine to test where best to place a plot
' size of screen show
' 720 x 540 points ie 72 points per inch

    Dim Wt As Single
    Dim Ht As Single
    
    'Wt = GetSystemMetrics(SM_CXFULLSCREEN)
    'Ht = GetSystemMetrics(SM_CYFULLSCREEN)
    With ActiveWindow.Selection.ShapeRange(1)
        'ConvertPixelsToPoints Wt, Ht
        ' Window size in points
        Wt = 720
        Ht = 540
        .Left = Wt - .Width - 4
        .Top = Ht - .Height - 26
        '.Show vbModeless
    End With
End Sub

Sub MoveToFiveFive()
    ActivePresentation.SlideShowWindow.View.Slide.Shapes(1).Top = 5
    ActivePresentation.SlideShowWindow.View.Slide.Shapes(1).Left = 5
End Sub
Sub AskAndMove()
    myTop = InputBox("How far from the top?")
    If myTop < 500 And myTop > 0 Then
        myLeft = InputBox("How far from the left?")
        If myLeft < 500 And myLeft > 0 Then
            ActivePresentation.SlideShowWindow.View.Slide.Shapes(1).Top = myTop
            ActivePresentation.SlideShowWindow.View.Slide.Shapes(1).Left = myLeft
        Else
            MsgBox ("Don't move off the screen; you're too low or too high")
        End If
    Else
        MsgBox ("Don't move off the screen; your too far to the left or right")
    End If
End Sub
Sub ConvertPixelsToPoints(ByRef X As Single, ByRef Y As Single)
    Dim hDC As Long
    Dim RetVal As Long
    Dim XPixelsPerInch As Long
    Dim YPixelsPerInch As Long

    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    X = X * TWIPSPERINCH / 20 / XPixelsPerInch
    Y = Y * TWIPSPERINCH / 20 / YPixelsPerInch
End Sub

Attribute VB_Name = "newSlides"
Option Explicit

Sub InsertSlideAtThisLocation(title As String, bodyText As String)

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim currSlideNr As Integer

Dim resettoslidesorter As Boolean

Dim oSl As Slide

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If

    ' What is the slide we are on? eg 29
    currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
    ' MsgBox ("current slide is " & currSlideNr)
    
    With ActivePresentation
 
        Set oSl = .Slides.Add(currSlideNr + 1, ppLayoutText)
        With oSl
            .Shapes(1).TextFrame.TextRange = title
            .Shapes(2).TextFrame.TextRange = bodyText
        End With
    
End With
    
If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in creating new slide: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    
End Sub
Sub CreateConclusions()

    Call InsertSlideAtThisLocation("Conclusions", "Conclusions 1")

End Sub
Sub CreateObservations()

    Call InsertSlideAtThisLocation("Observations", "Observations 1")

End Sub
Sub CreateIntroductions()

    Call InsertSlideAtThisLocation("Introduction", "Introduction 1")

End Sub

Sub CreateChapter()

Dim currSlideNr As Integer
Dim resettoslidesorter As Boolean

Dim myShape As Shape
Dim myTextBox As TextBox
Dim notesText As String
Dim oSl As Slide

notesText = "Added" & " on " & Date

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If

    ' What is the slide we are on? eg 29
    currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
    ' MsgBox ("current slide is " & currSlideNr)
    
    With ActivePresentation
 
        Set oSl = .Slides.Add(currSlideNr + 1, ppLayoutText)
        With oSl
           ' .Shapes(1).TextFrame.TextRange = title
           ' .Shapes(2).TextFrame.TextRange = bodyText
         
        '**********************************************
        ' Add  info to the notes page
        '    ie placeholder 2 in ppt
        '**********************************************
        
        .NotesPage.Shapes.Placeholders(2).TextFrame.TextRange.InsertAfter notesText
        
        '**********************************************
        ' Add a box with text "Chapter X" in large font
        '**********************************************
              
        Set myShape = ActivePresentation.Slides(currSlideNr + 1).Shapes.AddShape(Type:=msoShapeRectangle, Left:=100, Top:=200, _
              Width:=500, Height:=100)

        .Shapes("Rectangle 4").TextFrame.TextRange.Text = "Chapter X"
             
        .Shapes("Rectangle 4").TextFrame.TextRange.Font.Size = 48
        
        .Shapes("Rectangle 4").TextFrame.TextRange.Font.Color.RGB = RGB(0, 0, 0)
    
       End With
    End With
    
    If (resettoslidesorter = True) Then
        ActiveWindow.ViewType = ppViewSlideSorter
    End If

End Sub

Attribute VB_Name = "newpptFromSlides"
'-------------------------------------------------------------------------------
' Copyright |fffd|1999-2006, Shyam Pillai, All Rights Reserved.
' --------------------------------------------------------------------------------
' You are free to use this code within your own applications, add-ins,
' documents etc but you are expressly forbidden from selling or
' otherwise distributing this source code without prior consent.
' This includes both posting free demo projects made from this
' code as well as reproducing the code in text or html format.
' --------------------------------------------------------------------------------

Option Explicit
Public Declare Function GetTempPath Lib "kernel32" Alias _
"GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Sub ExtractSelection()
    Dim oPres As Presentation
    Dim oSlide As Slide
    Dim sIDs As String
    Dim sTempFile As String
    Dim i As Integer
    
    On Error Resume Next
    ' Create a string containing slide IDs of selection
    ' It output string  will look like this ":256:276:290:"
    sIDs = ":"
    For Each oSlide In ActiveWindow.Selection.SlideRange
        sIDs = sIDs & CStr(oSlide.SlideID) & ":"
    Next oSlide
    ' Create path to store dummy file
    sTempFile = GetUserTempFolder & "~temp.ppt"
    ' save a copy of the original file
    Call ActivePresentation.SaveCopyAs(sTempFile)
    ' Open the copy
    Set oPres = Application.Presentations.Open(sTempFile, , False)
    ' Search for IDs which do not appear in the ID string and delete those slide.
    ' e.g. since it is a copy, it will also have the same slide IDs
    ' Search if ":256:" exists in the earlier list of IDs, if it does
    ' retain the slide else delete it.
    With oPres
        For i = .Slides.Count To 1 Step -1
            If InStr(1, sIDs, ":" & CStr(.Slides(i).SlideID) & ":") = 0 Then
                .Slides(i).Delete
            End If
        Next i
    End With
    oPres.Save
    oPres.Close
    Call Application.Presentations.Open(sTempFile, , True, True)
    ' Delete the temp file
    Kill sTempFile
End Sub
Function GetUserTempFolder() As String
    ' Function to retrieve the temp folder
    On Error Resume Next
    Dim sTemp As String
    sTemp = String(100, Chr$(0))
    Call GetTempPath(100, sTemp)
    sTemp = Left(sTemp, InStr(sTemp, Chr$(0)) - 1)
    GetUserTempFolder = sTemp
    Exit Function
Error_GetUserTempFolder:
    GetUserTempFolder = ""
End Function



Attribute VB_Name = "pictureMasterandSetting"
Option Explicit

' Global params for the master pic dimensions and position
Global w, h, l, t As Double
' Global params for the amount of cropping done on master pic
Global cl, cr, ct, cb As Double

Global masterSource As String
Sub tellMaster()

MsgBox "width = " & w & " height = " & h
MsgBox "left = " & l & " top = " & t
MsgBox "master source is " & masterSource

End Sub
Sub overlayMulti0()

Call overlayMultiPicNewAspectCropped(0)

End Sub
Sub overlayMulti1()

Call overlayMultiPicNewAspectCropped(1)

End Sub
Sub overlayMulti2()

Call overlayMultiPicNewAspectCropped(2)

End Sub
Sub overlayMulti3()

Call overlayMultiPicNewAspectCropped(3)

End Sub
Sub overlayMultiPicNewAspectCropped(overlayType As Integer)

Dim oSlide As Slide

On Error Resume Next

If (setMaster = False) Then
    MsgBox "The master plot is not set at the moment", vbOKOnly
    Exit Sub
End If

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Select Case overlayType
            Case 0
               Call OverlayPicNewAspectCropped(0)
            Case 1
               Call OverlayPicNewAspectCropped(1)
            Case 2
               Call OverlayPicNewAspectCropped(2)
            Case 3
               Call OverlayPicNewAspectCropped(3)
    End Select

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Select Case overlayType
            Case 0
               Call OverlayPicNewAspectCropped(0)
            Case 1
               Call OverlayPicNewAspectCropped(1)
            Case 2
               Call OverlayPicNewAspectCropped(2)
            Case 3
               Call OverlayPicNewAspectCropped(3)
     End Select
                 
     Next oSlide

End If

End Sub
Sub SetMasterPic()
' Here the cropping of the master pic is included too
' Added 12/05/06 by HH

Dim Osh As Shape
Dim OBaseSlide As Slide

Dim oSldSource As Slide
Dim oShpSource As Shape

Dim currSlideNr As Integer

On Error GoTo ErrorExtract

' Check what view we are in

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If

' Determine what is the selected current shape
Set Osh = ActiveWindow.Selection.ShapeRange(1)

masterSource = Osh.AlternativeText

' Its width and height
w = ActiveWindow.Selection.ShapeRange.Width
h = ActiveWindow.Selection.ShapeRange.Height
' Its left and top position
l = ActiveWindow.Selection.ShapeRange.Left
t = ActiveWindow.Selection.ShapeRange.Top

' the cropping criteria
cl = ActiveWindow.Selection.ShapeRange.PictureFormat.CropLeft
cr = ActiveWindow.Selection.ShapeRange.PictureFormat.CropRight
ct = ActiveWindow.Selection.ShapeRange.PictureFormat.CropTop
cb = ActiveWindow.Selection.ShapeRange.PictureFormat.CropBottom

'Display this in a message box
'MsgBox "width = " & w & " height = " & h
'MsgBox "left = " & l & " top = " & t
    
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

setMaster = True

ErrorExtract:
    If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            ' Now check if there is a single image on the slide and if so
            '    select this as the master
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(currSlideNr)
            If noPics = 0 Then
               MsgBox ("There are no images on this slide!")
            End If
            If noPics > 1 Then
               MsgBox ("I can see " & noPics & " images on this slide - so which one?")
            End If
            If noPics = 1 Then
                ' If we arrive here there is only 1 image on the slide and we can select it
                '    as the master!
                 Set oSldSource = ActiveWindow.Selection.SlideRange(1)
                 For Each oShpSource In oSldSource.Shapes
                      If oShpSource.Type = msoPicture Then
                          Set Osh = oShpSource
                      End If
                 Next oShpSource
            
                   masterSource = Osh.AlternativeText
                  ' Its width and height
                   w = Osh.Width
                  h = Osh.Height
                 ' Its left and top position
                  l = Osh.Left
                 t = Osh.Top

                 ' the cropping criteria
                 cl = Osh.PictureFormat.CropLeft
                  cr = Osh.PictureFormat.CropRight
                 ct = Osh.PictureFormat.CropTop
                 cb = Osh.PictureFormat.CropBottom
                 
                 'Display this in a message box
                'MsgBox "width = " & w & " height = " & h
                'MsgBox "left = " & l & " top = " & t
                
                setMaster = True
             End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        If (resettoslidesorter = True) Then
             ActiveWindow.ViewType = ppViewSlideSorter
        End If
    End If

End Sub
Sub OverlayPicNewAspectCropped(overlayType As Integer)

' Moves and reshapes the selected shape to the same as the master
'   Cropping is also performed as per the master shape

' The selected picture or object to be shaped
Dim Osh As Shape
Dim OBaseSlide As Slide

Dim oSldSource As Slide
Dim oShpSource As Shape

Dim currSlideNr As Integer

On Error GoTo ErrorExtract

' Check what view we are in

Dim resettoslidesorter As Boolean

    ' CurrentSlideActivate
    If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
    End If

'MsgBox ("current slide number is " & ActiveWindow.Selection.SlideRange.SlideIndex)
'MsgBox "master source is " & masterSource

' Determine what is the selected current shape
Set Osh = ActiveWindow.Selection.ShapeRange(1)

'Display pic info of previous pic in a message box
' MsgBox "old width = " & w & " height = " & h
' MsgBox "left = " & l & " top = " & t

'******************************************************
'And change it so that it overlays with the master pic!!
'******************************************************

Call overlayDoTheWorks(Osh, overlayType)

If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

ErrorExtract:
    If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            ' Now check if there is a single image on the slide and if so
            '    select this as the master
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(currSlideNr)
            
            If noPics = 0 Then
               MsgBox ("There are no images on this slide!")
            End If
            If noPics > 0 Then
            
                 Set oSldSource = ActiveWindow.Selection.SlideRange(1)
                 For Each oShpSource In oSldSource.Shapes
                    If oShpSource.Type = msoPicture Then
                       Set Osh = oShpSource
                       With Osh
                            Call overlayDoTheWorks(Osh, overlayType)
                       End With
                    End If
                 Next oShpSource
                 
            End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        If (resettoslidesorter = True) Then
             ActiveWindow.ViewType = ppViewSlideSorter
        End If
    End If
    
End Sub
Sub overlayDoTheWorks(sha As Shape, oType As Integer)

With sha
Select Case oType
    
        Case 0 ' set top left corner only
        
        ' First move it so that the left top corner is identical
        .Left = l
        .Top = t
        
        Case 1 ' overlay with master but no cropping
    
        ' First move it so that the left top corner is identical
        .Left = l
        .Top = t
 
        ' Allow to change shape without keeping aspect ratio
        .LockAspectRatio = msoFalse
 
        .Width = w
        .Height = h
    
        Case 2 ' overlay with master and crop to master

        ' crop first as per master picture
        ' MsgBox ("Cropping by " & cl & " " & cr & " " & ct & " " & cb)
        .PictureFormat.CropLeft = cl
        .PictureFormat.CropRight = cr
        .PictureFormat.CropTop = ct
        .PictureFormat.CropBottom = cb
    
       ' First move it so that the left top corner is identical
       .Left = l
       .Top = t
 
       ' Allow to change shape without keeping aspect ratio
       .LockAspectRatio = msoFalse
 
       .Width = w
       .Height = h
       
       Case 3
       
         Dim ll As Integer
         ll = .Left
         Dim tt As Integer
         tt = .Top
         
       
       ' crop first as per master picture
        ' MsgBox ("Cropping by " & cl & " " & cr & " " & ct & " " & cb)
        .PictureFormat.CropLeft = cl
        .PictureFormat.CropRight = cr
        .PictureFormat.CropTop = ct
        .PictureFormat.CropBottom = cb
 
        .Left = ll
        .Top = tt
        
       ' Allow to change shape without keeping aspect ratio
       .LockAspectRatio = msoFalse
 
       .Width = w
       .Height = h
       
    End Select
End With
End Sub

Sub ScaleDown()

Dim picResize As Single

If (picResizeByHandSet = False) Then
    picResize = 10#
End If

picResize = 10#

Dim oSlide As Slide

'On Error Resume Next

Dim indices(200) As Integer

Call getSlideCollection(indices())

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call ScaleUporDownAllSides(picResize, 2)

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call ScaleUporDownAllSides(picResize, 2)
            
     Next oSlide

End If
'Call setSlideCollection(indices())
End Sub
Sub ScaleUp()
Dim picResize As Single

If (picResizeByHandSet = False) Then
    picResize = 10#
End If

picResize = 10#

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call ScaleUporDownAllSides(picResize, 1)

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
     'MsgBox ("slide number is " & oSlide.SlideNumber)
     'MsgBox "width = " & w & " height = " & h
     'MsgBox "left = " & l & " top = " & t
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call ScaleUporDownAllSides(picResize, 1)
            
     Next oSlide

End If
    
End Sub
Sub ScaleDoTheWorks(sha As Shape, scaleFac As Single)

Dim lt, ll As Single

' Its left and top position
ll = sha.Left
lt = sha.Top
'll = ActiveWindow.Selection.ShapeRange.Left
'lt = ActiveWindow.Selection.ShapeRange.Top

'******************************************************
'And change it so that it is x % smaller and
' top left corner is in the same location
'******************************************************

With sha
    
    .scaleHeight CSng(scaleFac), msoFalse, msoScaleFromMiddle
    .scaleWidth CSng(scaleFac), msoFalse, msoScaleFromMiddle
    .Left = ll
    .Top = lt

End With

End Sub
Sub ScaleUporDownAllSides(iDownScale As Single, updown As Integer)
' Picture is rescaled down by size given
' Added 14/05/06 by HH

' 1 means scale up
' 2 means scale down

Dim Osh As Shape

Dim scaleFactor As Single

If (updown = 1) Then
    scaleFactor = (100# + iDownScale) / 100#
Else
    scaleFactor = (100# - iDownScale) / 100#
End If

' Set an error message if nothing is selected and quit routine

On Error GoTo ErrorExtract

' Determine what is the selected current shape
Set Osh = ActiveWindow.Selection.ShapeRange(1)

'If (Osh = Empty) Then
'    MsgBox "empty!"
'End If

Call ScaleDoTheWorks(Osh, scaleFactor)

Dim currSlideNr As Integer
Dim oSldSource As Slide
Dim oShpSource As Shape

ErrorExtract:
If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            ' Now check if there is a single image on the slide and if so
            '    select this as the master
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(ActiveWindow.Selection.SlideRange.SlideIndex)
            Select Case noPics
            Case 0
               MsgBox ("There are no images on this slide!")
            End Select
            
            If noPics > 0 Then
               'MsgBox ("I can see" & noPics & " images on this slide - so which one?")
               Set oSldSource = ActiveWindow.Selection.SlideRange(1)
               For Each oShpSource In oSldSource.Shapes
                 If oShpSource.Type = msoPicture Then
                    Set Osh = oShpSource
                    Call ScaleDoTheWorks(Osh, scaleFactor)
                 End If
                Next oShpSource
            End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        'If (resetToSlideSorter = True) Then
        '     ActiveWindow.ViewType = ppViewSlideSorter
        'End If
    End If

End Sub
Sub MultiSlideCrop(whichSide As Integer)

Dim Osh As Shape

' Set an error message if nothing is selected and quit routine

On Error GoTo ErrorExtract

' Determine what is the selected current shape
Set Osh = ActiveWindow.Selection.ShapeRange(1)

Call CropDoTheWorks(Osh, whichSide)

Dim currSlideNr As Integer
Dim oSldSource As Slide
Dim oShpSource As Shape

ErrorExtract:
If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            ' Now check if there is a single image on the slide and if so
            '    select this as the master
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(ActiveWindow.Selection.SlideRange.SlideIndex)
            Select Case noPics
            Case 0
               MsgBox ("There are no images on this slide!")
            End Select
            
            If noPics > 0 Then
               'MsgBox ("I can see" & noPics & " images on this slide - so which one?")
               Set oSldSource = ActiveWindow.Selection.SlideRange(1)
               For Each oShpSource In oSldSource.Shapes
                 If oShpSource.Type = msoPicture Then
                    Set Osh = oShpSource
                    Call CropDoTheWorks(Osh, whichSide)
                 End If
                Next oShpSource
            End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        'If (resetToSlideSorter = True) Then
        '     ActiveWindow.ViewType = ppViewSlideSorter
        'End If
    End If

    
End Sub
Sub CropDoTheWorks(oShape As Shape, whSide As Integer)

Dim lcl As Integer
Dim lcr As Integer
Dim lct As Integer
Dim lcb As Integer

On Error Resume Next

' Determine what is the selected current shape
'Set Osh = ActiveWindow.Selection.ShapeRange(1)

' how much is cropped already

lcl = oShape.PictureFormat.CropLeft
lcr = oShape.PictureFormat.CropRight
lct = oShape.PictureFormat.CropTop
lcb = oShape.PictureFormat.CropBottom

' Check for cropping size
Call checkCropSize

With oShape
    
    Select Case whSide
        Case 0
        .PictureFormat.CropLeft = lcl + picResizeByHand
        
        Case 1
        .PictureFormat.CropRight = lcr + picResizeByHand
        
        Case 2
        .PictureFormat.CropTop = lct + picResizeByHand
        
        Case 3
        .PictureFormat.CropBottom = lcb + picResizeByHand
        
     End Select
    
    .Fill.Visible = msoFalse
    .Line.Visible = msoFalse
    
End With

End Sub
Sub CropLeft()
Attribute CropLeft.VB_Description = "Macro recorded 14/05/2006 by hhoeber"
'
' Macro added 14/05/2006 by hhoeber
'

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call MultiSlideCrop(0)

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call MultiSlideCrop(0)
            
     Next oSlide

End If

End Sub
Sub CropRight()
'
' Macro added 14/05/2006 by hhoeber
'

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call MultiSlideCrop(1)

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call MultiSlideCrop(1)
            
     Next oSlide

End If

End Sub
Sub CropTop()
'
' Macro added 14/05/2006 by hhoeber
'

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call MultiSlideCrop(2)

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call MultiSlideCrop(2)
            
     Next oSlide

End If

End Sub
Sub CropBottom()
'
' Macro added 14/05/2006 by hhoeber
'

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then
    ' Call the method
    Call MultiSlideCrop(3)

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
    
     ' activate the current slide
     ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
     ' Call the method to set
     Call MultiSlideCrop(3)
            
     Next oSlide

End If

End Sub
Sub checkCropSize()

 If (picResizeByHandSet = False) Then
    picResizeByHand = 10
 End If

End Sub
Sub setCropSize()

ResetCroppingButton.Show vbModal
'MsgBox ("new value is " & picResizeByHand)
End Sub


Attribute VB_Name = "reloadPic"
Option Explicit

Sub reloadMultiPic()

Dim oSlide As Slide

'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

' Check out global tags for pic loading
Call checkForTag

'**************************
' Only 1 slide is displayed
'**************************
If (ActiveWindow.ViewType = ppViewNormal) Then
          
       Call ReloadPic
       
'****************************
' Several slides are selected
'****************************
Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
                  
        ' activate the current slide
        ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
        Call ReloadPic
            
        Next oSlide

End If

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in reloading pics: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
End Sub
Sub ReloadPic()
'
' Macro programmed 01/05/2006 by hhoeber
' Reloads plot from current slide onto new next slide - does not remove current slide
'

Dim Osh As Shape

On Error GoTo ErrorExtract

' Check if just one shape is selected on this page
Set Osh = ActiveWindow.Selection.ShapeRange(1)
    
Call reloadMultiPicDoTheWorks

Dim currSlideNr As Integer
Dim oSldSource As Slide
Dim oShpSource As Shape
Dim noPicsThisSlide As Integer

ErrorExtract:
If Err.Number <> 0 Then
    If Err.Number = -2147188160 Then
        
        'check if there is just 1 pic on this slide
                
        currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
        noPicsThisSlide = countNoImagesOnSlide(currSlideNr)
        If noPicsThisSlide = 0 Then
            
               MsgBox "There are no images on this slide!", vbOKOnly
               Exit Sub
                
        ElseIf noPicsThisSlide > 0 Then
            
            Call reloadMultiPicDoTheWorks
            
        End If
            
    
    Else
        
        MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
End If
   
End Sub

Sub reloadMultiPicDoTheWorks()

Dim currSlideNr As Integer
Dim newSlideNr As Integer
Dim picName As String
Dim dirName As String
Dim fullPicName As String
Dim rr As Long

Dim notesText As String
Dim newNotesText As String
Dim oPic As Shape
Dim ww, hh, ll, tt As Double
Dim oSldSource As Slide
Dim oShpSource As Shape
Dim Osh As Shape
Dim oShape As Shape

currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
newSlideNr = currSlideNr + 1
   
'****************************************************
' Here's how to duplicate a slide with copy, paste
'   slide is placed in the right location
'   This only works in slide sorter view
'****************************************************

Dim resetToCurrentView As Boolean
resetToCurrentView = False

If (ActiveWindow.ViewType = ppViewNormal) Then

    ActiveWindow.ViewType = ppViewSlideSorter
    resetToCurrentView = True
    
End If
    
With ActivePresentation.Windows(1).Selection.SlideRange
        ActivePresentation.Slides(currSlideNr).Copy
End With
ActivePresentation.Windows(1).View.Paste
  
If (resetToCurrentView = True) Then
    ActiveWindow.ViewType = ppViewNormal
End If
'****************************************************
' End of duplicate slide
'****************************************************

Set oSldSource = ActiveWindow.Selection.SlideRange(1)

If oSldSource.Shapes.HasTitle Then
      oSldSource.Shapes.title.TextFrame.TextRange.Text = oSldSource.Shapes.title.TextFrame.TextRange.Text + " - reload"
End If

For Each oShpSource In oSldSource.Shapes
    If oShpSource.Type = msoPicture Then
       
        Set oShape = oShpSource
       
       ' Its width and height
        ww = oShape.Width
        hh = oShape.Height
        ' Its left and top position
        ll = oShape.Left
        tt = oShape.Top

        'Display this in a message box
        ' MsgBox "width = " & w & " height = " & h
        ' MsgBox "left = " & l & " top = " & t

        'Select notes page and text within for current page
         notesText = oShape.AlternativeText
        'MsgBox ("Notes are " & notesText)

        ' Find the name of the pic and the text to the right of it and the directory
        Call splitFullName(notesText, picName, dirName)

        ' Now picName has the actual picname and all the text to the right of it
        '  Now we isolate the pic name by identifying the first space from the left

        rr = InStr(picName, " loaded")
        picName = Left(picName, rr)

        ' Now concatentate the dir and the pic-name back together

        fullPicName = dirName + picName

        ' Remove the shape ie the pic
        oShape.Delete
        
        ' Make sure this picture exists and error message end routine if not
          
          
        If (doesPicExist(fullPicName) = False) Then
            MsgBox ("The file you are trying to load " & fullPicName & "does not exist")
   
        Else
        
        
            Set oPic = oSldSource.Shapes.AddPicture(FileName:=fullPicName, _
                                      LinkToFile:=msoFalse, _
                                      SaveWithDocument:=msoTrue, _
                                      Left:=ll, _
                                      Top:=tt, _
                                      Width:=ww, _
                                      Height:=hh)
    
           ' make sure all shapes are visible
           oPic.ZOrder msoSendToBack
       
           ' Add comment to notes page
           newNotesText = dirName & picName & " loaded on " & Date

           Dim OfsFileSys As New FileSystemObject
           Dim ofsFiles As Files
           Dim ofsFile As File
    
           Dim fff As String
           Dim sss As String
    
           sss = pathToDir(fullPicName)
    
           fff = OfsFileSys.GetFileName(fullPicName)
           Set ofsFiles = OfsFileSys.GetFolder(sss).Files
           Set ofsFile = ofsFiles.Item(fff)
          
           ' When was the file created and modified
           newNotesText = newNotesText + " created on " & ofsFile.DateCreated & _
                                  " last modified on " & ofsFile.DateLastModified
                 
           ' add a carriage return
           newNotesText = newNotesText + vbCrLf
        
           oPic.AlternativeText = newNotesText
           
           ' free file system object
          
           Set ofsFile = Nothing
           Set ofsFiles = Nothing
           Set OfsFileSys = Nothing
                      
       End If
  End If
    
Next oShpSource
   
End Sub



Attribute VB_Name = "resetPicProps"
Option Explicit

Sub resetPicPropsMultiPic()

Dim oSlide As Slide

On Error Resume Next

If (ActiveWindow.ViewType = ppViewNormal) Then  ' Only 1 slide is displayed!
          
       Call resetPicProp

Else
    
    For Each oSlide In ActiveWindow.Selection.SlideRange
         
        'MsgBox ("slide number is " & oSlide.SlideNumber)
            
        ' activate the current slide
        ActivePresentation.Slides.Range(oSlide.SlideNumber).Select
    
        ' Call the method
        Call resetPicProp
            
        Next oSlide

End If

End Sub

Sub resetPicProp()

Dim Osh As Shape
Dim OBaseSlide As Slide

Dim oSldSource As Slide
Dim oShpSource As Shape

Dim currSlideNr As Integer

On Error GoTo ErrorExtract

' Check what view we are in

Dim resettoslidesorter As Boolean
 
' CurrentSlideActivate
If (ActiveWindow.ViewType = ppViewSlideSorter) Then
          ActiveWindow.ViewType = ppViewNormal
          resettoslidesorter = True
End If

' Determine what is the selected current shape
Set Osh = ActiveWindow.Selection.ShapeRange(1)
If ActiveWindow.Selection.ShapeRange.Type = msoPicture Then
        Call resetPicPropsDoTheWorks(Osh)
Else
        MsgBox "This is not an image", vbInformation + vbOKOnly
End If
    
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

ErrorExtract:
    If Err.Number <> 0 Then
        If Err.Number = -2147188160 Then
        
            Dim noPics As Integer
            currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
            noPics = countNoImagesOnSlide(currSlideNr)
            If noPics = 0 Then
               MsgBox "There are no images on this slide", vbInformation + vbOKOnly
            End If
            
            If noPics > 0 Then
                 Set oSldSource = ActiveWindow.Selection.SlideRange(1)
                 For Each oShpSource In oSldSource.Shapes
                      If oShpSource.Type = msoPicture Then
                          Call resetPicPropsDoTheWorks(oShpSource)
                      End If
                 Next oShpSource
             End If
    
        Else
        
           MsgBox Err.Description, vbCritical, "Error #" & Err.Number
        
        End If
        If (resettoslidesorter = True) Then
             ActiveWindow.ViewType = ppViewSlideSorter
        End If
    End If


End Sub

Sub resetPicPropsDoTheWorks(oShp As Shape)

   With oShp
   
        .PictureFormat.CropBottom = 0
        .PictureFormat.CropTop = 0
        .PictureFormat.CropLeft = 0
        .PictureFormat.CropRight = 0
        
        ' allow reshaping without aspect ratio preservation
        .LockAspectRatio = msoFalse
        
        ' width and height
        .scaleHeight 1, True, msoScaleFromTopLeft
        .scaleWidth 1, True, msoScaleFromTopLeft
        .PictureFormat.CropBottom = 0
        .PictureFormat.CropTop = 0
        .PictureFormat.CropLeft = 0
        .PictureFormat.CropRight = 0
        
        ' now lock aspect ratio again
        .LockAspectRatio = msoTrue
        
        ' brightness, colour etc
        .PictureFormat.Brightness = 0.5
        .PictureFormat.Contrast = 0.5
        .PictureFormat.ColorType = msoPictureAutomatic
        
  End With
  
End Sub


Attribute VB_Name = "selectSlideCollection"
Option Explicit
Sub testSlideIndices()

' Macro added HH 05.01.07
' User clicks on a selection of slides in slide sorter view and this routine
' figures out what those slides are
' This allows us to generically do the same manipulation on each of these slides.
'**********************************************
'            ERROR TRAPPING
'**********************************************
On Error GoTo ErrorExtract

Dim indices(200) As Integer

Call getSlideCollection(indices())

'test : change slide seletion
'ActivePresentation.Slides.Range(1).Select

Call setSlideCollection(indices())

'********************************
' Error trapping
'********************************
NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code

ErrorExtract:
    If Err.Number <> 0 Then
        
        MsgBox "Error in selecting slide collection: " & Err.Description, vbCritical, "Error #" & Err.Number
        
    End If
    

End Sub

Sub getSlideCollection(indices() As Integer)


Dim oSlide As Slide

' Dim indices(200) As Integer
Dim counter As Integer

counter = 0

For Each oSlide In ActiveWindow.Selection.SlideRange
         
    'MsgBox ("selected slide ID is " & oSlide.SlideID & " slide number is " & oSlide.SlideNumber)
    indices(counter) = oSlide.SlideNumber
    counter = counter + 1
        
Next oSlide

' Nothing found ie selected: we do nothing
If counter = 0 Then
    Exit Sub
End If

' If something is found:
' Set the indices which aren't used to the same as the first index
Dim j As Integer
For j = counter To 199
    indices(j) = indices(0)
Next j

End Sub
Sub setSlideCollection(indices() As Integer)

ActivePresentation.Slides.Range(Array(indices(0), indices(1), indices(2), indices(3), indices(4), indices(5), indices(6), indices(7), indices(8), _
                indices(9), indices(10), indices(11), indices(12), indices(13), indices(14), indices(15), indices(16), indices(17), indices(18), indices(19), _
                indices(20), indices(21), indices(22), indices(23), indices(24), indices(25), indices(26), indices(27), indices(28), indices(29), indices(30), _
                indices(31), indices(32), indices(33), indices(34), indices(35), indices(36), indices(37), indices(38), indices(39), indices(40), _
                indices(41), indices(42), indices(43), indices(44), indices(45), indices(46), indices(47), indices(48), indices(49), indices(50), _
                indices(51), indices(52), indices(53), indices(54), indices(55), indices(56), indices(57), indices(58), indices(59), indices(60), _
                indices(61), indices(62), indices(63), indices(64), indices(65), indices(66), indices(67), indices(68), indices(69), indices(70), _
                indices(71), indices(72), indices(73), indices(74), indices(75), indices(76), indices(77), indices(78), indices(79), indices(80), _
                indices(81), indices(82), indices(83), indices(84), indices(85), indices(86), indices(87), indices(88), indices(89), indices(90), _
                indices(91), indices(92), indices(93), indices(94), indices(95), indices(96), indices(97), indices(98), indices(99), indices(100), _
                indices(101), indices(102), indices(103), indices(104), indices(105), indices(106), indices(107), indices(108), indices(109), indices(110), _
                indices(111), indices(112), indices(113), indices(114), indices(115), indices(116), indices(117), indices(118), indices(119), indices(120), _
                indices(121), indices(122), indices(123), indices(124), indices(125), indices(126), indices(127), indices(128), indices(129), indices(130), _
                indices(131), indices(132), indices(133), indices(134), indices(135), indices(136), indices(137), indices(138), indices(139), indices(140), _
                indices(141), indices(142), indices(143), indices(144), indices(145), indices(146), indices(147), indices(148), indices(149), indices(150), _
                indices(151), indices(152), indices(153), indices(154), indices(155), indices(156), indices(157), indices(158), indices(159), indices(160), _
                indices(161), indices(162), indices(163), indices(164), indices(165), indices(166), indices(167), indices(168), indices(169), indices(170), _
                indices(171), indices(172), indices(173), indices(174), indices(175), indices(176), indices(177), indices(178), indices(179), indices(180), _
                indices(181), indices(182), indices(183), indices(184), indices(185), indices(186), indices(187), indices(188), indices(189), indices(190), _
                indices(191), indices(192), indices(193), indices(194), indices(195), indices(196), indices(197), indices(198), indices(199) _
                )).Select


End Sub

Attribute VB_Name = "tagManipulations"
Option Explicit

Sub checkForTag()

On Error GoTo ErrorHandler

'****************************************************
'
' CHECK FOR LAYOUT TAGS FOR MAIN IMAGE
'
'****************************************************

Dim noTagsInPPT As Integer

' extract all tags from the current ppt and count how many there are

noTagsInPPT = ActivePresentation.Tags.Count

'*******************************************************************
'
'      MAIN PICTURE TAGS
'
'*******************************************************************

Dim picLayoutCounter As Integer


' If there are tags, set the layout for them, but check that the 4 tags
'    are all there! If they arent revert to default layout below

If (noTagsInPPT > 0) Then

    picLayoutCounter = 0
    
    If (showAParticularTag("LAYOUT_PICLEFT") = True) Then
        
        layoutPicLeft = CDbl(ActivePresentation.Tags("LAYOUT_PICLEFT"))
        
        'MsgBox "layout - left value is " & layoutLeft, vbOKOnly
        picLayoutCounter = picLayoutCounter + 1
        
    End If
    
    If (showAParticularTag("LAYOUT_PICTOP") = True) Then
        
        layoutPicTop = CDbl(ActivePresentation.Tags("LAYOUT_PICTOP"))
        
        'MsgBox "layout - top value is " & layoutTop, vbOKOnly
        picLayoutCounter = picLayoutCounter + 1
        
    End If
    
    If (showAParticularTag("LAYOUT_PICW") = True) Then
        
        layoutPicWidth = CDbl(ActivePresentation.Tags("LAYOUT_PICW"))
        
        'MsgBox "layout - width value is " & layoutWidth, vbOKOnly
        picLayoutCounter = picLayoutCounter + 1
        
    End If
    
    If (showAParticularTag("LAYOUT_PICH") = True) Then
        
        layoutPicHeight = CDbl(ActivePresentation.Tags("LAYOUT_PICH"))
        
        'MsgBox "layout - height value is " & layoutHeight, vbOKOnly
        picLayoutCounter = picLayoutCounter + 1
    End If

End If

' If no tags are present or there arent the 4 tags necessary set the layout to the default one

If ((noTagsInPPT = 0) Or (picLayoutCounter <> 4)) Then

    'MsgBox "Resetting main picture to default layout!", vbOKOnly
    
    ' Reset the layout to the default one:
    
    layoutPicLeft = defaultPicLeft
    layoutPicTop = defaultPicTop
    
    layoutPicWidth = defaultPicWidth
    layoutPicHeight = defaultPicHeight

' Set the picscale factor to 0.9 of the available picture space - this space
' may vary - ie it changes when the top and the left corner of the picture
' is changed - but the scale factor remains unchanged (this may change in future codes)

    layoutPicScaleWidth = defaultPicScaleWidth
    layoutPicScaleHeight = defaultPicScaleHeight
    
    setPicLayout = True

End If

'*******************************************************************
'
'      HISTO PICTURE TAGS
'
'*******************************************************************

Dim histoLayoutCounter As Integer


' If there are tags, set the layout for them, but check that the 4 tags
'    are all there! If they arent revert to default layout below

If (noTagsInPPT > 0) Then

    histoLayoutCounter = 0
    
    If (showAParticularTag("LAYOUT_HISTOLEFT") = True) Then
        
        layoutHistoLeft = CDbl(ActivePresentation.Tags("LAYOUT_HISTOLEFT"))
        
        'MsgBox "layout - left value is " & layoutLeft, vbOKOnly
        histoLayoutCounter = histoLayoutCounter + 1
        
    End If
    
    If (showAParticularTag("LAYOUT_HISTOTOP") = True) Then
        
        layoutHistoTop = CDbl(ActivePresentation.Tags("LAYOUT_HISTOTOP"))
        
        'MsgBox "layout - top value is " & layoutTop, vbOKOnly
        histoLayoutCounter = histoLayoutCounter + 1
        
    End If
    
    If (showAParticularTag("LAYOUT_HISTOW") = True) Then
        
        layoutHistoWidth = CDbl(ActivePresentation.Tags("LAYOUT_HISTOW"))
        
        'MsgBox "layout - width value is " & layoutWidth, vbOKOnly
        histoLayoutCounter = histoLayoutCounter + 1
        
    End If
    
    If (showAParticularTag("LAYOUT_HISTOH") = True) Then
        
        layoutHistoHeight = CDbl(ActivePresentation.Tags("LAYOUT_HISTOH"))
        
        'MsgBox "layout - height value is " & layoutHeight, vbOKOnly
        histoLayoutCounter = histoLayoutCounter + 1
    End If

End If

' If no tags are present or there arent the 4 tags necessary set the layout to the default one

If ((noTagsInPPT = 0) Or (histoLayoutCounter <> 4)) Then

    'MsgBox "Resetting associated plot to default layout!", vbOKOnly
    
    ' Reset the layout to the default one:
    
    layoutHistoLeft = defaultHistoLeft
    layoutHistoTop = defaultHistoTop
    
    layoutHistoWidth = defaultHistoWidth
    layoutHistoHeight = defaultHistoHeight

' Set the picscale factor to 0.9 of the available picture space - this space
' may vary - ie it changes when the top and the left corner of the picture
' is changed - but the scale factor remains unchanged (this may change in future codes)

    layoutHistoScaleWidth = defaultHistoScaleWidth
    layoutHistoScaleHeight = defaultHistoScaleHeight
    
    setHistoLayout = True

End If

NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code
    
ErrorHandler:
     'Just in case there is an error
     MsgBox "Error in checking tags " & Err.Number & vbCrLf & Err.Description
     Resume NormalExit:
End Sub
Sub initialisePPTMasterLayout()

Call slideToPPTMasterLayout

' Call checkForTag

End Sub
Sub slideToPPTMasterLayout()

' Set all pre-defined locations of where pics will be loaded and what size they are to be

Dim Osh As Shape
Dim currSlideNr As Integer
Dim oSldSource As Slide
Dim oShpSource As Shape
Dim noPics As Integer
Dim infoDisplay As String

Dim Width As Integer
Dim Height As Integer

' Set an error message if nothing is selected and quit routine

On Error GoTo ErrorExtract

infoDisplay = ""

' Check what view we are in

Dim resettoslidesorter As Boolean

' CurrentSlideActivate
If (ActiveWindow.ViewType = ppViewSlideSorter) Then
    ActiveWindow.ViewType = ppViewNormal
    resettoslidesorter = True
End If

' See how many shapes there are on the slide
currSlideNr = ActiveWindow.Selection.SlideRange.SlideIndex
noPics = countNoImagesOnSlide(currSlideNr)

If noPics = 0 Then
    MsgBox "There are no images on this slide", vbInformation + vbOKOnly
    Exit Sub

    ' We allow for 2 pics on for the layout ie the main and the associated plot

ElseIf noPics > 2 Then
    MsgBox "There are more than 2 images on this slide - I can only do a max of 2!", vbInformation + vbOKOnly
    Exit Sub
    
ElseIf noPics = 1 Then  ' just the one pic

    Set oSldSource = ActiveWindow.Selection.SlideRange(1)
    For Each oShpSource In oSldSource.Shapes
    If oShpSource.Type = msoPicture Then
    
            infoDisplay = infoDisplay + oShpSource.AlternativeText + vbCrLf
            ' Call getPicInfoforMasterLayout(oShpSource)
            ' Now let's store this information as TAGS
            ActivePresentation.Tags.Add "LAYOUT_PICLEFT", CStr(oShpSource.Left)
            ActivePresentation.Tags.Add "LAYOUT_PICTOP", CStr(oShpSource.Top)
                      
            ' how much space is now left on the slide to the left and downward
            
            Width = ActivePresentation.PageSetup.SlideWidth - oShpSource.Left
            Height = ActivePresentation.PageSetup.SlideHeight - oShpSource.Top
                        
            ActivePresentation.Tags.Add "LAYOUT_PICW", CStr(oShpSource.Width)
            ActivePresentation.Tags.Add "LAYOUT_PICH", CStr(oShpSource.Height)
            
    End If
    Next oShpSource
    'MsgBox infoDisplay, vbInformation, vbOKOnly

ElseIf noPics = 2 Then  ' main pic (the larger one) and associated pic

    '**********************************************************
    ' loop over the 2 pics and find out which one is the main
    '**********************************************************
    
    Set oSldSource = ActiveWindow.Selection.SlideRange(1)
    Dim largerPic As Integer
    Dim picSize(2) As Double
    Dim counter As Integer
    largerPic = 1
    counter = 1
    For Each oShpSource In oSldSource.Shapes
        If oShpSource.Type = msoPicture Then
            Set Osh = oShpSource
            picSize(counter) = Osh.Height * Osh.Width
            counter = counter + 1
        End If
    Next oShpSource
    If picSize(2) > picSize(1) Then
        largerPic = 2
    End If

    '**********************************************************
    ' Now loop again and set the tags
    '**********************************************************
    
    counter = 1
    Set oSldSource = ActiveWindow.Selection.SlideRange(1)
    For Each oShpSource In oSldSource.Shapes
        If oShpSource.Type = msoPicture Then
    
            ' Now let's store this information as TAGS
            
            If ((counter = 1 And largerPic = 1) Or (counter = 2 And largerPic = 2)) Then
                ' its the larger pic
                ActivePresentation.Tags.Add "LAYOUT_PICLEFT", CStr(oShpSource.Left)
                ActivePresentation.Tags.Add "LAYOUT_PICTOP", CStr(oShpSource.Top)
                      
                ' how much space is now left on the slide to the left and downward
            
                Width = ActivePresentation.PageSetup.SlideWidth - oShpSource.Left
                Height = ActivePresentation.PageSetup.SlideHeight - oShpSource.Top
                        
                ActivePresentation.Tags.Add "LAYOUT_PICW", CStr(oShpSource.Width)
                ActivePresentation.Tags.Add "LAYOUT_PICH", CStr(oShpSource.Height)
            Else
                ' its the smaller pic ie the histo
                ActivePresentation.Tags.Add "LAYOUT_HISTOLEFT", CStr(oShpSource.Left)
                ActivePresentation.Tags.Add "LAYOUT_HISTOTOP", CStr(oShpSource.Top)
                      
                ' how much space is now left on the slide to the left and downward
            
                Width = ActivePresentation.PageSetup.SlideWidth - oShpSource.Left
                Height = ActivePresentation.PageSetup.SlideHeight - oShpSource.Top
                        
                ActivePresentation.Tags.Add "LAYOUT_HISTOW", CStr(oShpSource.Width)
                ActivePresentation.Tags.Add "LAYOUT_HISTOH", CStr(oShpSource.Height)
            End If
            
            counter = counter + 1
        End If
    Next oShpSource
    'MsgBox infoDisplay, vbInformation, vbOKOnly
End If


' Reset to the initial view
If (resettoslidesorter = True) Then
    ActiveWindow.ViewType = ppViewSlideSorter
End If

NormalExit:
    Exit Sub   ' so it doesn't go on to run the errorhandler code
    
ErrorExtract:
        
    MsgBox "Error in defining ppt layout: " & Err.Description, vbCritical, "Error #" & Err.Number
                    
    If (resettoslidesorter = True) Then
            ActiveWindow.ViewType = ppViewSlideSorter
    End If
                   
End Sub
Sub removeAParticularTag(tagName As String)

ActivePresentation.Tags.Delete tagName

End Sub
Sub addTag()

ActivePresentation.Tags.Add "HENNING", "41"

End Sub

Function showAParticularTag(tagName As String) As Boolean

Dim tagValue As String

tagValue = ActivePresentation.Tags(tagName)

If (tagValue = Empty) Then

  'MsgBox "There is no such tag as " & tagName, vbOKOnly
  showAParticularTag = False
  
Else

    'MsgBox "tag is " + thisTagName, vbOKOnly
    showAParticularTag = True
    
End If

End Function

Sub retrieveATag()

Call showAParticularTag("Henning")

End Sub

Sub getAllTagsInPPT()
    
Dim i As Long
Dim S As String

If (ActivePresentation.Tags.Count < 1) Then
    MsgBox "There are no tags at all", vbOKOnly
    Exit Sub
End If

With ActivePresentation
        For i = 1 To .Tags.Count
            S = S + CStr(i) + ": Name = " + .Tags.name(i) + _
                ", Value = " + .Tags.Value(i) + vbCrLf
        Next
        MsgBox S
End With

End Sub

Sub clearAllTagsInPPT()

' If the coding here looks convolute, that is on purpose.
'   I could not get the loop to work in 1 go to remove all tags - for reasons I dont understand.
'   This here, with the double loop, seems to work.

Dim i As Integer
Dim tagName(199) As String
Dim noTags As Integer

noTags = 0

With ActivePresentation

    For i = 1 To .Tags.Count
           tagName(i) = CStr(.Tags.name(i))
           noTags = noTags + 1
    Next i
    
End With

With ActivePresentation

    For i = 1 To noTags
        removeAParticularTag tagName(i)
    Next i
    
End With
End Sub

Sub getPicInfoforMasterLayout(mShape As Shape)

' returns the values of the Shape needed for defining the ppt master layout

With mShape

    MsgBox "width = " & .Width & " height = " & .Height
    MsgBox "left = " & .Left & " top = " & .Top

End With

End Sub

' InQuest injected base64 decoded content
' [b>'

INQUEST-PP=macro
