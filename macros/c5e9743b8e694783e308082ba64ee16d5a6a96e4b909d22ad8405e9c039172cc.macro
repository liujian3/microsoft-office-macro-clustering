Attribute VB_Name = "Module1"
Sub Create_EmptyTables()

    With Application
        .ScreenUpdating = False
        .DisplayAlerts = False
        .EnableEvents = False
        .Calculation = xlCalculationAutomatic
    End With
    
    Dim shDataAll, shTemplate, shCorrection, shDataDay As Worksheet
    Dim dt As Object, dCurrDate, dStartDate As Date
    Dim currRange, myRan As Range
    Dim iNumHours As Integer, sStartDate As String
    
    
    
    On Error GoTo Error1
    
    Set dt = CreateObject("WbemScripting.SWbemDateTime")
    ThisWorkbook.Save
    
        Set shDataAll = Worksheets("|fffd||fffd||fffd||fffd|")
        Set shTemplate = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Set shCorrection = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        
        On Error Resume Next '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        'Worksheets("|fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd||fffd|").Unprotect Password:="311"   |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Worksheets("|fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd||fffd|").Visible = xlSheetVisible
        Worksheets("|fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd||fffd|").Delete
        On Error GoTo 0
        
        Worksheets.Add(After:=Worksheets(Sheets.Count)).Name = "|fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd||fffd|"
        Set shDataDay = Worksheets("|fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd||fffd|")
        
        
        With shDataAll
            For i = 2 To 10
                If i = 5 Then i = i + 3
                If .Range("B" & i) = "" Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| B2:B10"
                    GoTo Ends
                End If
            Next i
            
            If (.Range("B8") <> 1) And (.Range("B8") <> 2) Then
                MsgBox "(!) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| B8 (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd| 2."
                GoTo Ends
            End If
            
            sStartDate = Replace(.Range("B3").Value, " ", "")
            If IsDate(sStartDate) Then
              'strDate = Format(CDate(strDate), "dd.mm.yyyy")
               dStartDate = Format(CDate(sStartDate), "dd.mm.yyyy")
               .Range("B3").Value = CStr(dStartDate)
            Else
               MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| B3."
               GoTo Ends
            End If
        End With
            

 '************************************************************************************************

        
        shDataAll.Range("B2:C10").Copy shDataDay.Range("B2")
        
        With shDataAll
           
            lLastRow = .Cells(Rows.Count, 7).End(xlUp).Row
            lLastColumn = .Cells(11, Columns.Count).End(xlToLeft).Column
            .Unprotect Password:="311"
            .Range(.Cells(11, 8), .Cells(12, lLastColumn + 1)).Clear
            Set myRan = .Range(.Cells(13, 8), .Cells(lLastRow, lLastColumn + 1))
            myRan.ClearContents
            
 
            
            'dStartDate = .Range("B3").Value
            iUserNumDay = .Range("B4").Value
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            iMaxNumDay = MaxNumberDays(dStartDate)
            iStartDay = Day(dStartDate)
            
            If iUserNumDay <= iMaxNumDay Then
                iNumDay = iUserNumDay
                Else
                    iNumDay = iMaxNumDay
            End If
            .Range("B4").Value = iNumDay
            iFinaleDay = iStartDay + iNumDay - 1
            iCurrDay = iStartDay
            dCurrDate = dStartDate
            iFirstEmptyColumn = 8
            
            For i = iStartDay To iFinaleDay
                dt.SetVarDate dCurrDate
                dStartTimeLine = dt.GetVarDate(False)
                
                dt.SetVarDate DateAdd("d", 1, dCurrDate)
                dEndTimeLine = dt.GetVarDate(False)
                
                iNumHours = DateDiff("h", dStartTimeLine, dEndTimeLine)
                shTemplate.Unprotect Password:="311"
                Set currRange = Find_myRange(iNumHours, shTemplate)
                currRange.Copy .Cells(11, iFirstEmptyColumn)
                iLastFilledColumn = iFirstEmptyColumn + iNumHours - 1
                .Range(.Cells(11, iFirstEmptyColumn), .Cells(11, iLastFilledColumn)).Value = iCurrDay
                .Activate
                .Range("H13").Select
                iFirstEmptyColumn = iLastFilledColumn + 1
                dCurrDate = DateAdd("d", 1, dCurrDate)
                iCurrDay = Day(dCurrDate)
                
            Next i
            
        End With
        
        With shCorrection
            .Unprotect Password:="311"
            lLastRow = .Cells(Rows.Count, 3).End(xlUp).Row
            lLastColumn = .Cells(6, Columns.Count).End(xlToLeft).Column
            Set myRan = .Range(.Cells(6, 2), .Cells(lLastRow, lLastColumn + 1))
            myRan.Clear
            
            iLastFilledColumn = shDataAll.Cells(11, Columns.Count).End(xlToLeft).Column
            shDataAll.Range(shDataAll.Cells(11, 8), shDataAll.Cells(12, iLastFilledColumn)).Copy .Range("B6")
            iLastFilledColumn = .Cells(6, Columns.Count).End(xlToLeft).Column
            shTemplate.Range("B17:B20").Copy .Range("B8")
            shTemplate.Range("C17:C20").Copy .Range(.Cells(8, 3), .Cells(8, iLastFilledColumn))
            .Range(.Cells(8, 2), .Cells(8, iLastFilledColumn)).Interior.Color = RGB(230, 240, 200)
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            .Range(.Cells(8, 2), .Cells(8, iLastFilledColumn)).Locked = False
            .Range("B1:B2").Locked = False
            .Activate
            .Range("B8").Select
            ActiveWindow.ScrollColumn = 3
        End With
        
    GoTo Ends
    
Error1:
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Err.Number & " - " & Err.Description)
    
Ends:
    shDataAll.Activate
    shDataAll.Range("H13").Select
    ActiveWindow.ScrollColumn = 8
    shDataAll.Protect Password:="311"
    shCorrection.Protect Password:="311"
    shTemplate.Visible = xlSheetVeryHidden '!!!!!!!!!!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !!!!!!!!!!!!!!!!!!!
    shDataDay.Visible = xlSheetVeryHidden
    With Application
        .ScreenUpdating = True
        .DisplayAlerts = True
        .EnableEvents = True
        '.Calculation = xlCalculationAutomatic
    End With

End Sub

Private Function Find_myRange(iNumHours, shTempl) As Range
    Dim strRan As String
        
        If iNumHours = 25 Then
            strRan = "B3:Z4"
            ElseIf iNumHours = 23 Then
                strRan = "B7:X8"
            Else
                strRan = "B11:Y12"
        End If

    Set Find_myRange = shTempl.Range(strRan)

End Function

Sub Main()

    With Application
        .ScreenUpdating = False
        .DisplayAlerts = False
        .EnableEvents = False
        .Calculation = xlCalculationAutomatic
    End With

    Dim shDataAll, shDataDay As Worksheet
    Dim myRan As Range
    Dim dt As Object, dCurrDate As Date
    
    On Error GoTo Error1
    
        Set dt = CreateObject("WbemScripting.SWbemDateTime")
        
        ThisWorkbook.Save
        Set shDataAll = Sheets("|fffd||fffd||fffd||fffd|")
        Set shDataDay = Sheets("|fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd||fffd|")
        
        n = 0
        For i = 3 To 4
            If (shDataDay.Range("B" & i).Value <> shDataAll.Range("B" & i).Value) Then n = n + 1
        Next i
        If n > 0 Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|3:|fffd|4 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd|"". |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|""! "
            GoTo Ends
        End If
        
        lLastRow = shDataAll.Cells(Rows.Count, 7).End(xlUp).Row
        
        shDataAll.Range("A1:G" & lLastRow).Copy
        
        shDataDay.Range("A1").PasteSpecial xlPasteAll
        shDataDay.Range("A1").PasteSpecial Paste:=xlPasteColumnWidths ', Operation:=xlNone, SkipBlanks:=False, Transpose:=False  '
        
        With shDataDay
            .Range("E13:E" & lLastRow).FormulaLocal = "=$B$6"
            .Range("F13:F" & lLastRow).FormulaLocal = "=$B$7"
            dStartDate = .Range("B3").Value
            iUserNumDay = .Range("B4").Value
        End With
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        iMaxNumDay = MaxNumberDays(dStartDate)
        If iUserNumDay <= iMaxNumDay Then
            iNumDay = iUserNumDay
            Else
                iNumDay = iMaxNumDay
        End If
        shDataDay.Range("B4").Value = iNumDay
        iStartDay = Day(dStartDate)
        iFinaleDay = iStartDay + iNumDay - 1
        dCurrDate = dStartDate
        lLastCol = 7
        
        For sCurrDay = iStartDay To iFinaleDay
            '|fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| GMT |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            dt.SetVarDate dCurrDate
            dStartTimeLine = dt.GetVarDate(False)
            '|fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| GMT |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            dt.SetVarDate DateAdd("d", 1, dCurrDate)
            dEndTimeLine = dt.GetVarDate(False)
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            iNumHours = DateDiff("h", dStartTimeLine, dEndTimeLine)
            
            shDataDay.Range("H11", shDataDay.Cells(lLastRow, 35)).Clear
            
            lFirstCol = lLastCol + 1
            lLastCol = lFirstCol + iNumHours - 1
            With shDataAll
                Set myRan = .Range(.Cells(11, lFirstCol), .Cells(lLastRow, lLastCol))
            End With
            myRan.Copy shDataDay.Range("H11")
            With shDataDay
                '.Range("B3").Value = CStr(dCurrDate)
                .Range("B6").Value = Format(dStartTimeLine, "yyyy-mm-ddThh:nnZ")
                .Range("B7").Value = Format(dEndTimeLine, "yyyy-mm-ddThh:nnZ")
            End With
            
            Call Generate_FileXML(shDataDay, dCurrDate, iNumHours, dt)

            dCurrDate = DateAdd("d", 1, dCurrDate)
        Next sCurrDay
        
        sFinaleDate = CStr(DateAdd("d", iNumDay - 1, dStartDate))
        
        If iNumDay = 1 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| XML |fffd||fffd| " & CStr(dStartDate)
            Else
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| XML (" & iNumDay & " |fffd||fffd|.) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| " & CStr(dStartDate) & " |fffd||fffd| " & sFinaleDate
        End If
        
    GoTo Ends
    
Error1:
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Err.Number & " - " & Err.Description)
    
Ends:
    shDataAll.Activate
    shDataAll.Range("H13").Select
    ActiveWindow.ScrollColumn = 8
    
    With Application
        .ScreenUpdating = True
        .DisplayAlerts = True
        .EnableEvents = True
        '.Calculation = xlCalculationAutomatic
    End With
End Sub

Private Function MaxNumberDays(dStartDate) As Integer
    Dim s As String
    Dim d1, d2 As Date

    s = "01." & CStr(Month(dStartDate)) & "." & CStr(Year(dStartDate))
    d1 = Format(s, "dd.mm.yyyy")
    d2 = DateAdd("m", 1, d1)
    dayInNonth = DateDiff("d", d1, d2)
    MaxNumberDays = dayInNonth - Day(dStartDate) + 1

End Function

Private Sub Generate_FileXML(shDay, dCurrDate, iNumHours, dDt)

    Dim doc As MSXML2.DOMDocument60, pi
    Dim root As IXMLDOMElement, dataNode As IXMLDOMElement
    Dim i As Long

    Set doc = New MSXML2.DOMDocument60

    Set root = doc.createElement("EnergyAccount_MarketDocument")
    doc.appendChild root
    AddAttributeWithValue root, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance"
    AddAttributeWithValue root, "xsi:schemaLocation", "urn:iec62325.351:tc57wg16:451-4:energyaccountdocument:4:0 xsd/iec62325-451-4-settlement_v4_0.xsd"
    AddAttributeWithValue root, "xmlns:ecl", "urn:entsoe.eu:wgedi:codelists"
 
    Set att = doc.createAttribute("xmlns")
    att.Value = "urn:iec62325.351:tc57wg16:451-4:energyaccountdocument:4:0"
    root.setAttributeNode att
         
        '''Set header'''
        '''mRID
        Set mRIDNode = doc.createElement("mRID")
        mRIDValue = Trim(shDay.Range("B2")) & "-EA-" & Format(shDay.Range("B3"), "yyyy-mm-dd")
        Set tagText = doc.createTextNode(mRIDValue)
        mRIDNode.appendChild (tagText)
        root.appendChild mRIDNode
        '''revisionNumber
        Set dataNode = doc.createElement("revisionNumber")
        revisionNumberValue = Trim(shDay.Range("B9")) '+++
        Set tagText = doc.createTextNode(revisionNumberValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        '''type
        Set dataNode = doc.createElement("type")
        typeValue = "A11"
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        '''docStatus and value
        Set dataNode = doc.createElement("docStatus")
        docStatusValue = "A01"
        Set subNode = doc.createElement("value")
        Set tagText = doc.createTextNode(docStatusValue)
        subNode.appendChild (tagText)
        dataNode.appendChild (subNode)
        root.appendChild dataNode
        '''process.processType
        Set dataNode = doc.createElement("process.processType")
        If shDay.Range("B8").Value = 1 Then
            typeValue = "A05" '+++++++++
        Else
            typeValue = "A08"
        End If
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        '''process.classificationType
        Set dataNode = doc.createElement("process.classificationType")
        typeValue = "A01"
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        '''sender_MarketParticipant.mRID
        Set dataNode = doc.createElement("sender_MarketParticipant.mRID")
        typeValue = Trim(shDay.Range("B2"))
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        AddAttributeWithValue dataNode, "codingScheme", "A01"
        '''sender_MarketParticipant.marketRole.type
        Set dataNode = doc.createElement("sender_MarketParticipant.marketRole.type")
        typeValue = "A09"
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
         '''receiver_MarketParticipant.mRID
        Set dataNode = doc.createElement("receiver_MarketParticipant.mRID")
        typeValue = "10X1001C--00001X"
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        AddAttributeWithValue dataNode, "codingScheme", "A01"
        '''receiver_MarketParticipant.marketRole.type
        Set dataNode = doc.createElement("receiver_MarketParticipant.marketRole.type")
        typeValue = "A04"
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        '''createdDateTime
        Set dataNode = doc.createElement("createdDateTime")
        
                dDt.SetVarDate Now
                Now_ = dDt.GetVarDate(False)
        
        
        'Now_ = Now
        'createdTimeValue = Now_ - TimeSerial(shDay.Range("B5"), 0, 0)  '+++
        createdTimeValueFormated = Format(Now_, "yyyy-mm-ddThh:nn:ssZ")
        Set tagText = doc.createTextNode(createdTimeValueFormated)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        '''period.timeInterval
        Set dataNode = doc.createElement("period.timeInterval")
        StartValue = shDay.Range("B6")  '+++
        Set subNode = doc.createElement("start")
        Set tagText = doc.createTextNode(StartValue)
        subNode.appendChild (tagText)
        dataNode.appendChild (subNode)
        endValue = shDay.Range("B7")   '+++
        Set subNode = doc.createElement("end")
        Set tagText = doc.createTextNode(endValue)
        subNode.appendChild (tagText)
        dataNode.appendChild (subNode)
        root.appendChild dataNode
         '''domain.mRID
        Set dataNode = doc.createElement("domain.mRID")
        typeValue = Trim(shDay.Range("B10"))  '+++
        Set tagText = doc.createTextNode(typeValue)
        dataNode.appendChild (tagText)
        root.appendChild dataNode
        AddAttributeWithValue dataNode, "codingScheme", "A01"
        '''Set body'''
        '''Set TimeSeries
    
        'For i_ = 11 To Sheets(1).UsedshDay.Range.Rows.Count
        
        
        i_ = 13   '+++
       
        Do While Trim(shDay.Range("G" & i_)) <> ""
  
           If Not (Trim(shDay.Range("A" & i_)) = "") Then
            
        
           i = i_

         Set dataNodeTimeSeries = doc.createElement("TimeSeries")

         ''' set mRID
         Set dataNodeSeries = doc.createElement("mRID")
         'mRIDValue = shDay.Range("A" & i) & "-" & shDay.Range("C" & i)
         
         sSubjectName = Range("A" & i)
         mRIDValue = CorrectSubjectName(sSubjectName)
         
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)

         '''set businessType
         Set dataNodeSeries = doc.createElement("businessType")
         mRIDValue = "A14"
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)
         '''set product
         Set dataNodeSeries = doc.createElement("product")
         mRIDValue = "8716867000016"
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)
         '''set objectAggregation
         Set dataNodeSeries = doc.createElement("objectAggregation")
         mRIDValue = "A01"
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)
         '''set area_Domain.mRID
         Set NodeSeries = doc.createElement("area_Domain.mRID")
         mRIDValue = Trim(shDay.Range("C" & i))
         Set tagText = doc.createTextNode(mRIDValue)
         NodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (NodeSeries)
         'AddAttributeWithValue NodeSeries, "codingScheme", "A01"
     
        Set att = doc.createAttribute("codingScheme")
        att.Value = "A01"
        NodeSeries.setAttributeNode att

         '''set objectAggregation
         Set dataNodeSeries = doc.createElement("marketParticipant.mRID")
         mRIDValue = Trim(shDay.Range("B" & i))
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)
         'AddAttributeWithValue dataNodeTimeSeries, "codingScheme", "A01"
        Set att = doc.createAttribute("codingScheme")
        att.Value = "A01"
        dataNodeSeries.setAttributeNode att
         '''set measure_Unit.name
         Set dataNodeSeries = doc.createElement("measure_Unit.name")
         mRIDValue = "KWH"
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)
         '''set marketEvaluationPoint.mRID
         Set dataNodeSeries = doc.createElement("marketEvaluationPoint.mRID")
         mRIDValue = Trim(shDay.Range("D" & i))
         Set tagText = doc.createTextNode(mRIDValue)
         dataNodeSeries.appendChild (tagText)
         dataNodeTimeSeries.appendChild (dataNodeSeries)
         'AddAttributeWithValue dataNodeTimeSeries, "codingScheme", "A01"
        Set att = doc.createAttribute("codingScheme")
        att.Value = "A01"
        dataNodeSeries.setAttributeNode att
         'set period
           Set dataPeriod = doc.createElement("Period")
           dataNodeTimeSeries.appendChild dataPeriod
           ''' set  time interval
           Set timeInterval = doc.createElement("timeInterval")
           dataPeriod.appendChild timeInterval
             StartValue = shDay.Range("E" & i)  '??????????????????????!!!!!!!!!!!!!!!!!!!!!!!
             Set subNode_Period = doc.createElement("start")
             Set tagText = doc.createTextNode(StartValue)
             subNode_Period.appendChild (tagText)
             timeInterval.appendChild (subNode_Period)
             endValue = shDay.Range("F" & i) '????????????????????????????????????!!!!!!!!!!!!!!!
             Set subNode_EndPeriod = doc.createElement("end")
             Set tagText = doc.createTextNode(endValue)
             subNode_EndPeriod.appendChild (tagText)
         
             timeInterval.appendChild subNode_EndPeriod
           ''' set  time interval
           Set Resolution = doc.createElement("resolution")
           Set tagText = doc.createTextNode("PT60M")
          
           Resolution.appendChild (tagText)
       
           dataPeriod.appendChild Resolution
           

           For j = 1 To iNumHours
              Set Point = doc.createElement("Point")
              dataPeriod.appendChild Point
              Set Position = doc.createElement("position")
             
              Set tagText = doc.createTextNode(j)
              Position.appendChild (tagText)
              Point.appendChild (Position)
              ColumnLetter = Split(shDay.Cells(1, (j + 7)).Address, "$")(1)
              
              In_has_value = False
              Out_has_value = False
              Set in_ = doc.createElement("in_Quantity.quantity")
              Set out_ = doc.createElement("out_Quantity.quantity")
              If Trim(shDay.Range("G" & i)) = "IN" Then
            
               In_has_value = True
               in_value = Int(shDay.Range(ColumnLetter & i))
               Set tagText = doc.createTextNode(in_value)
               in_.appendChild (tagText)
           
              End If
              
               
              If Trim(shDay.Range("G" & i)) = "OUT" Then
             
               Out_has_value = True
               out_value = Int(shDay.Range(ColumnLetter & i))
               Set tagText = doc.createTextNode(out_value)
               out_.appendChild (tagText)
         
              End If
              
              next_i = (i_ + 1)
           If Trim(shDay.Range("A" & next_i)) = "" Then
              If Trim(shDay.Range("G" & next_i)) = "IN" Then
  
               In_has_value = True
               in_value = Int(shDay.Range(ColumnLetter & next_i))
               Set tagText = doc.createTextNode(in_value)
               in_.appendChild (tagText)
 
              End If
              
               
              If Trim(shDay.Range("G" & next_i)) = "OUT" Then
      
               Out_has_value = True
               out_value = Int(shDay.Range(ColumnLetter & (next_i)))
               Set tagText = doc.createTextNode(out_value)
               out_.appendChild (tagText)
 
              End If
           End If
           
           
           
           If In_has_value = False Then
        
               Set tagText = doc.createTextNode("0")
               in_.appendChild (tagText)
             
           End If
           If Out_has_value = False Then
     
               Set tagText = doc.createTextNode("0")
               out_.appendChild (tagText)
        
           End If
               Point.appendChild (in_)
               Point.appendChild (out_)
              
           Next j
                      root.appendChild dataNodeTimeSeries
          End If
          i_ = i_ + 1
       Loop

        sCurrDate = Format(dCurrDate, "yyyy-mm-dd_")
        
        Set pi = doc.createProcessingInstruction("xml", "version=""1.0""")
        doc.InsertBefore pi, doc.ChildNodes.Item(0)
        createdTimeValueFormated = Format(Now, "yyyy-mm-ddThh_nn_ssZ")
        xmlFileName = ThisWorkbook.Path & "\EAMD_" & Trim(shDay.Range("B2")) & "_" & sCurrDate & createdTimeValueFormated & ".xml"
        Smooth_Xml doc
        doc.Save xmlFileName


    'MsgBox "|fffd||fffd||fffd||fffd| " & xmlFileName & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !", vbInformation

End Sub

'utility: add an attribute (with a value) to an element
Sub AddAttributeWithValue(ByRef el As IXMLDOMElement, attName, attValue)
    Dim att
    Set att = el.OwnerDocument.createAttribute(attName)
    att.Value = attValue
    el.setAttributeNode att
End Sub


Sub Smooth_Xml(inDoc)
 inDoc.LoadXML Replace(inDoc.XML, "><", ">" & vbCrLf & "<")
 inDoc.LoadXML Replace(inDoc.XML, "/>", "/>" & vbCrLf)
 inDoc.LoadXML Replace(inDoc.XML, "xmlns=""""", "")
End Sub

Private Function CorrectSubjectName(sSubjName)
    Dim s As String
    Dim arrSymb
    s = """;<;>;/;\;';@;$;&"
    arrSymb = Split(s, ";")
    sSubjName = Left(Trim(sSubjName), 16)
    For i = LBound(arrSymb) To UBound(arrSymb)
        sSubjName = Replace(sSubjName, arrSymb(i), "_")
    Next i
    CorrectSubjectName = sSubjName
End Function

Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 39, 4, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 58, 5, MSForms, CommandButton"

Private Sub CommandButton1_Click()
    Main
End Sub

Private Sub CommandButton2_Click()
    Create_EmptyTables
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd|27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
