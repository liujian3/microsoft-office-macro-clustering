Attribute VB_Name = "Modul1"
Option Explicit
#If VBA7 Then
    Declare PtrSafe Function GlobalUnlock Lib "Kernel32" (ByVal hMem As Long) As Long
    Declare PtrSafe Function GlobalLock Lib "Kernel32" (ByVal hMem As Long) As Long
    Declare PtrSafe Function GlobalAlloc Lib "Kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
    Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
    Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
    Declare PtrSafe Function lstrcpy Lib "Kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
    Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
    Declare PtrSafe Function lstrlenW Lib "Kernel32" (ByVal lpString As Long) As Long
    Declare PtrSafe Function SHGetFolderPath Lib "shfolder.dll" Alias "SHGetFolderPathA" (ByVal hwndOwner As Long, ByVal nFolder As Long, ByVal hToken As Long, ByVal dwReserved As Long, ByVal lpszPath As String) As Long
    Declare PtrSafe Function abGetSystemDirectory Lib "Kernel32" Alias "GetSystemDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
    Declare PtrSafe Function GetVersionEx Lib "Kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long
    Declare PtrSafe Sub keybd_event Lib "user32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwflags As Long, ByVal dwExtraInfo As Long)
    Declare PtrSafe Function GetKeyboardState Lib "user32" (pbKeyState As Byte) As Long
    Declare PtrSafe Function SetKeyboardState Lib "user32" (lppbKeyState As Byte) As Long
    Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long

#Else
    Declare Function GlobalUnlock Lib "Kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalLock Lib "Kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalAlloc Lib "Kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Declare Function CloseClipboard Lib "user32" () As Long
    Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
    Declare Function EmptyClipboard Lib "user32" () As Long
    Declare Function lstrcpy Lib "Kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
    Declare Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
    Declare Function lstrlenW Lib "Kernel32" (ByVal lpString As Long) As Long
    Declare Function SHGetFolderPath Lib "shfolder.dll" Alias "SHGetFolderPathA" (ByVal hwndOwner As Long, ByVal nFolder As Long, ByVal hToken As Long, ByVal dwReserved As Long, ByVal lpszPath As String) As Long
    Declare Function abGetSystemDirectory Lib "Kernel32" Alias "GetSystemDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
    Declare Function GetVersionEx Lib "Kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long
    Declare Sub keybd_event Lib "user32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwflags As Long, ByVal dwExtraInfo As Long)
    Declare Function GetKeyboardState Lib "user32" (pbKeyState As Byte) As Long
    Declare Function SetKeyboardState Lib "user32" (lppbKeyState As Byte) As Long
    Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Public Const GHND = &H42
Public Const CF_TEXT = 1
Public Const MAXSIZE = 4096
Public Const VK_NUMLOCK = &H90
Public Const VK_SCROLL = &H91
Public Const VK_CAPITAL = &H14
Public Const KEYEVENTF_EXTENDEDKEY = &H1
Public Const KEYEVENTF_KEYUP = &H2
Public Const VER_PLATFORM_WIN32_NT = 2
Public Const VER_PLATFORM_WIN32_WINDOWS = 1

Public Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128   '  Maintenance string for PSS usage
End Type
      

Function ClipBoard_SetData(MyString As String)
   Dim hGlobalMemory As Long, lpGlobalMemory As Long
   Dim hClipMemory As Long, x As Long

   ' Allocate moveable global memory.
   '-------------------------------------------
   hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1)

   ' Lock the block to get a far pointer
   ' to this memory.
   lpGlobalMemory = GlobalLock(hGlobalMemory)

   ' Copy the string to this global memory.
   lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString)

   ' Unlock the memory.
   If GlobalUnlock(hGlobalMemory) <> 0 Then
      MsgBox "Could not unlock memory location. Copy aborted."
      GoTo OutOfHere2
   End If

   ' Open the Clipboard to copy data to.
   If OpenClipboard(0&) = 0 Then
      MsgBox "Could not open the Clipboard. Copy aborted."
      Exit Function
   End If

   ' Clear the Clipboard.
   x = EmptyClipboard()

   ' Copy the data to the Clipboard.
   hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory)

OutOfHere2:

   If CloseClipboard() = 0 Then
      MsgBox "Could not close Clipboard."
   End If

End Function
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Control = "btnSaveCsr, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "btnSaveSign, 1, 2, MSForms, CommandButton"
Attribute VB_Control = "btnSelectFile, 0, 3, MSForms, CommandButton"
Option Explicit

Const iOutlookClient = 1
' Const iNotesClient = 2
Const iNoClient = 3

Dim MV_sCommonName As String
Dim MV_sCommonHSA As String
Dim MV_sFunctionMail As String
Dim MV_sOrderName As String
Dim MV_sOrderHsaID As String
Dim MV_sOrderPhone As String
Dim MV_sOrderMail As String
Dim MV_sResponsName As String
Dim MV_sResponsHSAid As String
Dim MV_sResponsPhone As String
Dim MV_sResponsMail As String
Dim MV_sCertFunction As String

Dim MV_bSelect1 As Boolean
Dim MV_bSelect2 As Boolean
Dim MV_bSelect3 As Boolean
Dim MV_bSelect4 As Boolean
Dim MV_bSelect5 As Boolean
Dim MV_bSelect6 As Boolean
Dim MV_bCSRLoaded As Boolean
Dim MV_bTemplateLoaded As Boolean

Private Sub PrepareBookmarks()
Dim sBookmark As Bookmark
Dim LV_sTemp As String
Dim LV_iLength As Integer
Dim LV_bLeading As Boolean
Dim LV_sChar As String
Dim i As Integer

For Each sBookmark In ActiveDocument.Bookmarks
    LV_iLength = Len(sBookmark.Range)
    LV_bLeading = True
    
    If LV_iLength > 1 And InStr(sBookmark, "Kryss") = 0 Then
        LV_sTemp = ""
        For i = 1 To LV_iLength
            LV_sChar = Asc(Mid(sBookmark.Range, i, 1))
            If LV_bLeading = True And LV_sChar = 32 Then
            
            Else
                LV_bLeading = False
                LV_sTemp = LV_sTemp + Chr(LV_sChar)
            End If
        Next
        ActiveDocument.FormFields(sBookmark).Result = Trim(LV_sTemp)
        
    End If
Next
End Sub

Private Function CheckFields() As Boolean
' Kontrollerar obligatoriska inmatningsf|fffd|lt och kryssrutor
Dim LV_sMsg As String
Dim LV_sFields As String
Dim LV_sTemp As String


LV_sMsg = "Mata in f|fffd|ljande f|fffd|lt innan best|fffd|llningen kan skickas:"

LV_sTemp = Replace(ActiveDocument.Bookmarks("commonname").Range.Text, " ", "")
If Asc(LV_sTemp & " ") = 32 Then LV_sFields = LV_sFields & "Namn p|fffd| certifikatet, " & vbLf

LV_sTemp = Replace(ActiveDocument.Bookmarks("ordername").Range.Text, " ", "")
If Asc(LV_sTemp & " ") = 32 Then LV_sFields = LV_sFields & "Namn p|fffd| best|fffd|llare, " & vbLf

LV_sTemp = Replace(ActiveDocument.Bookmarks("orderhsaid").Range.Text, " ", "")
If Asc(LV_sTemp & " ") = 32 Then LV_sFields = LV_sFields & "Best|fffd|llarens HSAID, " & vbLf

LV_sTemp = Replace(ActiveDocument.Bookmarks("responsname").Range.Text, " ", "")
If Asc(LV_sTemp & " ") = 32 Then LV_sFields = LV_sFields & "Namn p|fffd| mottagare " & vbLf

If (ActiveDocument.FormFields("Kryss1").CheckBox.Value Or _
    ActiveDocument.FormFields("Kryss2").CheckBox.Value) = False Then
    LV_sFields = LV_sFields & "Typ av certifikat (Prod/Test) " & vbLf
End If


If (ActiveDocument.FormFields("Kryss4").CheckBox.Value Or _
    ActiveDocument.FormFields("Kryss5").CheckBox.Value) = False Then
    LV_sFields = LV_sFields & "Typ av certifikat (Legitimering eller Underskrift) " & vbLf
End If

If MV_bCSRLoaded = False Then
    LV_sTemp = ActiveDocument.Shapes(1).TextFrame.TextRange.Text
    If InStr(LV_sTemp, "CERTIFICATE REQUEST--") = 0 Then
        LV_sFields = LV_sFields & "CSR-filen |fffd|r inte laddad " & vbLf
    End If
End If

' If Asc(ActiveDocument.Bookmarks("function_email").Range.Text) = 32 Then LV_sFields = LV_sFields & "Funktionsbrevl|fffd|da till certifikatet, " & vbLf

If LV_sFields <> "" Then
    MsgBox LV_sMsg & vbLf & vbLf & LV_sFields
    CheckFields = False
Else
    CheckFields = True
End If
Beep
End Function


Private Sub btnSaveCsr_Click()
' Sparar Crs-filen p|fffd| gemensamt diskutrymme och skapar mappen om det beh|fffd|vs

Dim LV_sFilename As String
Dim LV_sPath As String
Dim lblError As Label
Dim LV_sData As String
Dim LV_sWord As String
Dim FolderExists As Boolean

LV_sFilename = Left(ActiveDocument.Name, InStr(ActiveDocument.Name, ".doc"))
LV_sFilename = Left(LV_sFilename, Len(LV_sFilename) - 1)

On Error Resume Next
ClipBoard_SetData LV_sFilename
On Error GoTo 0

'LV_sFilename = ActiveDocument.Bookmarks("commonname").Range.Text
'LV_sFilename = LV_sFilename & "_" & Format(Now(), "YYYYMMDD")
'If Selection.FormFields("Kryss2").CheckBox.Value = True Then
'    LV_sFilename = LV_sFilename & "_TEST"
'End If
'LV_sWord = LV_sFilename & ".doc" |fffd|ndring 201604221

LV_sWord = Replace(LV_sFilename, " ", "") & ".doc"

LV_sFilename = LV_sFilename & ".csr"

LV_sPath = "FindText"

On Error Resume Next
    FolderExists = (GetAttr(LV_sPath) And vbDirectory) = vbDirectory
On Error GoTo 0
    
If Not FolderExists = True Then
    LV_sPath = GetDocumentPath() & "\"
End If
    
LV_sData = ActiveDocument.Shapes(1).TextFrame.TextRange.Text

On Error GoTo lblError
    Open LV_sPath & LV_sFilename For Output As #1
        Print #1, LV_sData
    Close 1
    
    'ActiveDocument.SaveAs2 LV_sPath & LV_sWord
    'On Error GoTo 0
    MsgBox "Filen CSR-filen sparad i:" & vbLf & LV_sPath & LV_sFilename
    FileCopy ActiveDocument.FullName, LV_sPath & LV_sWord
On Error GoTo 0

Exit Sub

lblError:

Err.Clear

On Error Resume Next

LV_sPath = GetDocumentPath()
Open LV_sPath & "\" & LV_sFilename For Output As #1
    Print #1, LV_sData
Close 1

'ActiveDocument.SaveAs2 LV_sPath & "\" & LV_sWord
MsgBox "Filen CSR-filen sparad i:" & vbLf & LV_sPath & "\" & LV_sFilename
FileCopy ActiveDocument.FullName, LV_sPath & LV_sWord

On Error GoTo 0

End Sub

Public Sub CheckOpenSSL()
On Error GoTo 0
If Not Dir("C:\OpenSSL-Win64\Bin", vbDirectory) = vbNullString Then
    ChDir "C:\OpenSSL-Win64\Bin\"
    'Shell "generate.bat"
    'Shell "C:\OpenSSL-Win64\Bin\openssl.exe req -in " & Chr(34) & "www.appsok.se_20160517.csr" & Chr(34) & " -noout -subject > C:\OpenSSL-Win64\Bin\result.txt"
    
End If

End Sub

Sub SaveAsTextFile()
'This sub changes the file extension to .txt. Used for the included CRS-file to make it readable

    Dim strDocName As String
    Dim intPos As Integer

    'Find position of extension in filename
    strDocName = ActiveDocument.Name
    intPos = InStrRev(strDocName, ".")

    If intPos = 0 Then

        'If the document has not yet been saved
        'Ask the user to provide a filename
        strDocName = InputBox("Please enter the name " & _
            "of your document.")
    Else

        'Strip off extension and add ".txt" extension
        strDocName = Left(strDocName, intPos - 1)
        strDocName = strDocName & ".txt"
    End If

    'Save file with new extension
    ActiveDocument.SaveAs FileName:=strDocName, _
        FileFormat:=wdFormatText
End Sub

Sub ShowSaveAsDialog()
 Dim dlgSaveAs As FileDialog
 Set dlgSaveAs = Application.FileDialog(FileDialogType:=msoFileDialogSaveAs)
 dlgSaveAs.Show
End Sub

Private Sub btnSaveSign_Click()
Dim LV_sFilename As String
Dim LV_sTemp As String
Dim LV_sPath As String
Dim i As Integer
Dim sUsername As String
Dim sResponsible As String
Dim sig As Signature
Dim sComputername As String
Dim sname As String

Dim LV_sHSAiD As String
Dim LV_iPos1 As Integer
Dim LV_iPos2 As Integer
Dim LV_sHSAiDSystem As String
Dim LV_sNameSystem As String

Dim lblContinue As Label


PrepareBookmarks

If CheckFields = False Then
    Exit Sub
End If
sUsername = Application.UserName

LV_iPos1 = InStr(sUsername, "(")
If LV_iPos1 > 1 Then
    LV_iPos2 = InStr(sUsername, ")")
    If LV_iPos2 > LV_iPos1 Then
        LV_sHSAiD = Mid(sUsername, LV_iPos1 + 1, LV_iPos2 - LV_iPos1 - 1)
    End If
    sUsername = Left(sUsername, LV_iPos1 - 1)
    LV_sHSAiDSystem = ActiveDocument.FormFields("orderhsaid").Range.Text
    If LV_sHSAiD <> "" And InStr(LCase(LV_sHSAiDSystem), LCase(LV_sHSAiD)) = 0 Then
        If MsgBox("Ditt HSA-ID (" + LV_sHSAiD + ") |fffd|r inte samma som system|fffd|garens HSA-ID (" + LV_sHSAiDSystem + ")" + vbLf + "Vill du verkligen signera detta dokument?", vbQuestion + vbYesNo + vbDefaultButton2) = vbNo Then
            Exit Sub
        Else
            GoTo lblContinue
        End If
    Else
        GoTo lblContinue
    End If
Else
    LV_sNameSystem = ActiveDocument.FormFields("ordername").Range.Text
    If LV_sNameSystem <> "" And Not (InStr(LCase(sUsername), LCase(LV_sNameSystem)) > 0 Or InStr(LCase(LV_sNameSystem), LCase(sUsername)) > 0) Then
        If MsgBox("Ditt anv|fffd|ndarnamn (" + sUsername + ") |fffd|r inte samma som System|fffd|garens namn (" + LV_sNameSystem + ")" + vbLf + "Vill du verkligen signera detta dokument?", vbQuestion + vbYesNo + vbDefaultButton2) = vbNo Then
            Exit Sub
        Else
            GoTo lblContinue
        End If
    Else
        GoTo lblContinue
    End If
End If

lblContinue:

LV_sFilename = ""
LV_sTemp = Replace(ActiveDocument.Bookmarks("commonname").Range.Text, Chr(32), "")

For i = 1 To Len(LV_sTemp)
    'Debug.Print Asc(Mid(LV_sTemp, i, 1))
    If Asc(Mid(LV_sTemp, i, 1)) <> 32 Then
        LV_sFilename = LV_sFilename & Mid(LV_sTemp, i, 1)
    End If
Next i

'LV_sFilename = Trim(ActiveDocument.Bookmarks("commonname").Range.Text)
LV_sFilename = LV_sFilename & "_" & Format(Now(), "YYYYMMDD")

LV_sPath = GetDocumentPath()

HideButton True
ThisDocument.SaveAs2 LV_sPath & "\" & LV_sFilename & ".doc", , , , , , True

On Error Resume Next
ActiveDocument.Unprotect
On Error GoTo 0

LV_sTemp = Trim(ActiveDocument.Bookmarks("citydate").Range.Text)
If Asc(Mid(LV_sTemp, 1, 1)) = 32 Then
    ActiveDocument.FormFields("citydate").Result = Format(Now(), "yyyy-mm-dd")
End If


LV_sTemp = Trim(ActiveDocument.Bookmarks("namesign").Range.Text)
If Asc(Mid(LV_sTemp, 1, 1)) = 32 Then
    ActiveDocument.FormFields("namesign").Result = sUsername
End If

lblStart:

Application.Selection.GoTo wdGoToBookmark, Name:="BookmarkSignature"
If FindText("SignHere!") = False Then
    ActiveDocument.Bookmarks("BookmarkSignature").Range.InsertAfter "SignHere!"
    With Selection.Find
        .ClearFormatting
        .MatchWholeWord = True
        .MatchCase = False
        .Execute FindText:="SignHere!"
    End With
    If FindText("SignHere!") = False Then
        MsgBox "Problem att skapa signatur"
    End If
End If


sComputername = Environ$("computername") & "." & Environ$("userdnsdomain")
sUsername = "Username:" & Environ$("username")
sname = Application.UserName

SendKeys "{tab}{Enter}" + sname + "{Enter}{tab}{Enter}"
    

If IsNumLockOn = False Then
    ToggleNumLock
End If

Set sig = ActiveDocument.Signatures.AddSignatureLine
sig.Setup.ShowSignDate = True
sig.Setup.AllowComments = False
sig.Setup.SigningInstructions = "Anv|fffd|nd SITHS Type 1 CA v1 certifikatet!! |fffd|ndra om det inte |fffd|r valt!"
' sig.SignatureLineShape
' DoEvents
' SendKeys "{NUMLOCK}", True
' DoEvents

If IsNumLockOn = False Then
    ToggleNumLock
End If

sig.Sign GetDocumentPath() & "\signatur.jpg", sComputername, sUsername

If IsNumLockOn = False Then
    ToggleNumLock
End If


'SendKeys sUsername + "{tab}{Enter}"
'Set sig = ActiveDocument.Signatures.AddSignatureLine
    'Test several properties before commiting the Signature object to disk.
If sig.Issuer = "SITHS Type 1 CA v1" And _
    sig.IsCertificateExpired = False And _
    sig.IsCertificateRevoked = False And _
    sig.IsValid = True Then
    
    'sig.Signer = strSigner And _
    'ActiveDocument.FormFields("commonname").Result = sig.Details.SignatureText
    'MsgBox "Signed"
    'AddSignature = True
    'Otherwise, remove the Signature object from the SignatureSet collection.
Else
    HideButton False
    If sig.Issuer <> "SITHS Type 1 CA v1" Then
        MsgBox "Felaktig utf|fffd|rdare av certifikat!" + vbCr + sig.Issuer + vbCr + "Signaturen m|fffd|ste g|fffd|ras om"
        sig.Delete
        HideButton False
        Exit Sub
    End If
    If sig.IsCertificateExpired = True Then
        MsgBox "Certifikatet |fffd|r utg|fffd|nget" + vbCr + "Signaturen m|fffd|ste g|fffd|ras om"
        sig.Delete
        Exit Sub
    End If
    If sig.IsCertificateRevoked = True Then
        MsgBox "Certifikatet |fffd|r revokerat" + vbCr + sig.Issuer + vbCr + "Signaturen m|fffd|ste g|fffd|ras om"
        sig.Delete
        Exit Sub
    End If
    If sig.IsValid = False Then
        MsgBox "Certifikatet |fffd|r inte giltigt"
        sig.Delete
        Exit Sub
    End If
End If

'Commit all signatures in the SignatureSet collection to the disk.
ActiveDocument.Signatures.Commit



HideButton False

On Error Resume Next
ActiveDocument.Protect wdAllowOnlyFormFields

'Options.SendMailAttach = True
'ActiveDocument.SendMail

ClipBoard_SetData LV_sPath & "\" & LV_sFilename & ".doc"
On Error GoTo 0

Select Case CheckMailClient
    Case iOutlookClient
        If SendOutlookMail(LV_sFilename, LV_sPath & "\" & LV_sFilename & ".doc") = False Then
            MsgBox "Starta Outlook f|fffd|r att skicka iv|fffd|g best|fffd|llningen!"
            Application.Quit SaveChanges:=wdDoNotSaveChanges
        End If
End Select
End Sub
Private Sub HideButton(LV_bState As Boolean)
If LV_bState = True Then
    btnSelectFile.Width = 1
    btnSelectFile.Height = 1
    
    btnSaveSign.Width = 1
    btnSaveSign.Height = 1
    
    btnSaveCsr.Width = 130
    btnSaveCsr.Height = 16
Else
    btnSelectFile.Width = 60
    btnSelectFile.Height = 20
    
    btnSaveSign.Width = 60
    btnSaveSign.Height = 20
    
    btnSaveCsr.Width = 1
    btnSaveCsr.Height = 1
End If

End Sub

Private Sub btnSaveTemplateFile_Click()
Dim LV_sPath As String
Dim LV_sFilename As String

LV_sPath = GetDocumentPath()
LV_sFilename = "FunctionalCertTemplate.txt"

MV_sOrderName = ActiveDocument.FormFields("ordername").Result
MV_sOrderHsaID = ActiveDocument.FormFields("orderhsaid").Result
MV_sOrderPhone = ActiveDocument.FormFields("orderphone").Result
MV_sOrderMail = ActiveDocument.FormFields("ordermail").Result

MV_sResponsName = ActiveDocument.FormFields("responsname").Result
MV_sResponsHSAid = ActiveDocument.FormFields("responshsaid").Result
MV_sResponsPhone = ActiveDocument.FormFields("responsphone").Result
MV_sResponsMail = ActiveDocument.FormFields("responsmail").Result

Open LV_sPath & "\" & LV_sFilename For Output As #1
    Print #1, MV_sOrderName
    Print #1, MV_sOrderHsaID
    Print #1, MV_sOrderPhone
    Print #1, MV_sOrderMail

    Print #1, MV_sResponsName
    Print #1, MV_sResponsHSAid
    Print #1, MV_sResponsPhone
    Print #1, MV_sResponsMail
Close 1
End Sub

Public Sub btnSelectFile_Click()
    If SelectCRSFile() = True Then
        btnSaveSign.Enabled = True
        LoadDefaultTemplateFile False
        MV_bCSRLoaded = True
    Else
        btnSaveSign.Enabled = False
        MV_bCSRLoaded = False
    End If
End Sub

Function TestDirectory()
Dim objFolders As Object
Set objFolders = CreateObject("WScript.Shell").SpecialFolders

MsgBox objFolders("desktop")
MsgBox objFolders("allusersdesktop")
MsgBox objFolders("sendto")
MsgBox objFolders("startmenu")
MsgBox objFolders("recent")
MsgBox objFolders("favorites")
MsgBox objFolders("mydocuments")

End Function

Function GetDocumentPath() As String
Dim objFolders As Object
Set objFolders = CreateObject("WScript.Shell").SpecialFolders

GetDocumentPath = objFolders("mydocuments")

End Function

Public Function GetSystemPath() As String
Dim strBuffer As String
Dim intLen As Integer

strBuffer = Space(160)
intLen = abGetSystemDirectory(strBuffer, 160)
GetSystemPath = Left(strBuffer, intLen)

End Function

Private Function SelectCRSFile()
Dim intChoice As Integer
Dim msoFileDialogOpen As Integer
Dim strPath As String

msoFileDialogOpen = 1

With Application.FileDialog(msoFileDialogOpen)
    .Filters.Clear
    .Filters.Add "Certificate request", "*.csr;*.txt", 1
    
    .AllowMultiSelect = False
    .Title = "V|fffd|lj CSR-filen"
    intChoice = .Show

    If intChoice <> 0 Then
        strPath = .SelectedItems(1)
    End If

End With

If Dir(strPath) <> "" And strPath <> "" Then
    SaveVariables
    If LoadTextInfo(strPath) = True Then
        SelectCRSFile = True
    End If
    UpdateForm
Else
    SelectCRSFile = False
End If

End Function
Private Function LoadTextInfo(LV_sFile) As Boolean
Dim LV_iFile As Integer
Dim Read As String
Dim Data As String

On Error Resume Next
LV_iFile = FreeFile()
Read = ""

Open LV_sFile For Input As #LV_iFile
Do While Not EOF(LV_iFile)
    Line Input #LV_iFile, Data
    Read = Read & Data
Loop
Close LV_iFile

If Read <> "" And InStr(Read, "CERTIFICATE REQUEST--") > 0 Then
    ' |fffd|ndrat 20160426 BEGIN CERTIFICATE REQUEST => CERTIFICATE REQUEST f|fffd|r att l|fffd|sa BEGIN NEW CERTIFICATE REQUEST
    ' |fffd|ndrat 20161026 CERTIFICATE REQUEST => CERTIFICATE REQUEST--
    ' SaveVariables
    ActiveDocument.Unprotect
    ActiveDocument.Shapes(1).TextFrame.TextRange.Text = Read
    ' ActiveDocument.Shapes(1).Fill.ForeColor.RGB = RGB(0, 250, 0)
    btnSelectFile.BackColor = 65280
    
    ActiveDocument.Protect wdAllowOnlyFormFields
    LoadTextInfo = True
    ' UpdateForm
Else
    ActiveDocument.Shapes(1).TextFrame.TextRange.Text = ""
    ActiveDocument.Shapes(1).Fill.ForeColor.RGB = RGB(255, 255, 255)
    LoadTextInfo = False
End If

End Function
Public Sub SaveVariables()

    MV_sOrderName = ActiveDocument.Bookmarks("ordername").Range.Text

    MV_sCommonName = ActiveDocument.Bookmarks("commonname").Range.Text
    MV_sCommonHSA = ActiveDocument.Bookmarks("commonhsa").Range.Text
    MV_sFunctionMail = ActiveDocument.Bookmarks("function_email").Range.Text
    
    MV_sOrderHsaID = ActiveDocument.Bookmarks("orderhsaid").Range.Text
    MV_sOrderPhone = ActiveDocument.Bookmarks("orderphone").Range.Text
    MV_sOrderMail = ActiveDocument.Bookmarks("ordermail").Range.Text
    MV_sResponsName = ActiveDocument.Bookmarks("responsname").Range.Text
    MV_sResponsHSAid = ActiveDocument.Bookmarks("responshsaid").Range.Text
    MV_sResponsPhone = ActiveDocument.Bookmarks("responsphone").Range.Text
    MV_sResponsMail = ActiveDocument.Bookmarks("responsmail").Range.Text
    ' MV_sCommonName = ActiveDocument.Bookmarks("commonname").Range.Text
   
    MV_bSelect1 = ActiveDocument.FormFields("Kryss1").CheckBox.Value
    MV_bSelect2 = ActiveDocument.FormFields("Kryss2").CheckBox.Value
    MV_bSelect3 = False 'ActiveDocument.FormFields("Kryss3").CheckBox.Value
    MV_bSelect4 = ActiveDocument.FormFields("Kryss4").CheckBox.Value
    MV_bSelect5 = ActiveDocument.FormFields("Kryss5").CheckBox.Value
    

End Sub

Public Sub UpdateForm()

    If MV_sOrderName <> "" Then
        ActiveDocument.FormFields("ordername").Result = MV_sOrderName
    End If
    If MV_sCommonHSA <> "" Then
        ActiveDocument.FormFields("commonhsa").Result = MV_sCommonHSA
    End If
    If MV_sFunctionMail <> "" Then
        ActiveDocument.FormFields("function_email").Result = MV_sFunctionMail
    End If
    If MV_sOrderHsaID <> "" Then
        ActiveDocument.FormFields("orderhsaid").Result = MV_sOrderHsaID
    End If
    If MV_sOrderPhone <> "" Then
        ActiveDocument.FormFields("orderphone").Result = MV_sOrderPhone
    End If
    If MV_sOrderMail <> "" Then
        ActiveDocument.FormFields("ordermail").Result = MV_sOrderMail
    End If
    If MV_sResponsName <> "" Then
        ActiveDocument.FormFields("responsname").Result = MV_sResponsName
    End If
    If MV_sResponsHSAid <> "" Then
        ActiveDocument.FormFields("responshsaid").Result = MV_sResponsHSAid
    End If
    If MV_sResponsPhone <> "" Then
        ActiveDocument.FormFields("responsphone").Result = MV_sResponsPhone
    End If
    If MV_sResponsMail <> "" Then
        ActiveDocument.FormFields("responsmail").Result = MV_sResponsMail
    End If
    If MV_sCommonName <> "" Then
        ActiveDocument.FormFields("commonname").Result = MV_sCommonName
    End If
    
    If MV_bSelect1 = True Then
        ActiveDocument.FormFields("Kryss1").CheckBox.Value = MV_bSelect1
    End If
    If MV_bSelect2 = True Then
        ActiveDocument.FormFields("Kryss2").CheckBox.Value = MV_bSelect2
    End If
    If MV_bSelect3 = True Then
        'ActiveDocument.FormFields("Kryss3").CheckBox.Value = MV_bSelect3
    End If
    If MV_bSelect4 = True Then
        ActiveDocument.FormFields("Kryss4").CheckBox.Value = MV_bSelect4
    End If
    If MV_bSelect5 = True Then
        ActiveDocument.FormFields("Kryss5").CheckBox.Value = MV_bSelect5
    End If

End Sub

Private Function CheckMailClient() As Integer
Dim MailClient As Integer
Dim oOutlookApp As Object
Dim Session As Object

Err.Clear
On Error Resume Next
Set oOutlookApp = GetObject(, "Outlook.Application")
If Err.Number = 0 Then
    Set oOutlookApp = Nothing
    CheckMailClient = iOutlookClient
    Exit Function
End If

On Error GoTo 0
Err.Clear

CheckMailClient = iNoClient

End Function

   
Sub CreateNotepadMail(LV_sAttachment As String)
Dim LV_sDocumemtPath As String
Dim LV_sSystemPath As String
Dim LV_sBody As String

LV_sDocumemtPath = GetDocumentPath()
LV_sSystemPath = GetSystemPath()

LV_sBody = GetMailText(LV_sAttachment)

On Error Resume Next
    Open LV_sDocumemtPath & "\mail01.txt" For Output As #1
        Print #1, LV_sBody
    Close 1
    Shell LV_sSystemPath & "\notepad.exe " & LV_sDocumemtPath & "\mail01.txt"
    Kill LV_sDocumemtPath & "\mail01.txt"
On Error GoTo 0
End Sub

Private Function FindText(sFind As String) As Boolean
Dim rng1 As Range

Set rng1 = ActiveDocument.Range
If rng1.Find.Execute(FindText:=sFind) Then
    rng1.Select
    FindText = True
Else
    FindText = False
End If

End Function
        
Private Function GetMailText(LV_sAttachment As String) As String
Dim BodyText As String
Dim CertificateName As String
Dim UserName As String

CertificateName = ActiveDocument.Bookmarks("commonname").Range.Text
' UserName = Session.UserName

BodyText = "Hejsan RA-Funktionen," & vbCr & vbLf & vbCr & vbLf & "H|fffd|r kommer best|fffd|llningen av funktionscertifikatet till :" & CertificateName & vbCr & vbLf & _
            "Bifogat till detta mail s|fffd| har jag lagt till best|fffd|llningen och csr-filen (Certificate Signing Request)." & vbCr & vbLf & vbCr & vbLf & _
            "V|fffd|nligen bearbeta denna best|fffd|llningen." & vbCr & vbLf & vbCr & vbLf & _
            "Med v|fffd|nliga h|fffd|lsningar " & vbCr & vbLf & Application.UserName & vbCr & vbLf
            '& vbCr & vbLf & _ "Bifoga manuellt filen:" & LV_sAttachment & vbCr & vbLf & "Anv|fffd|nd CTRL+V f|fffd|r att f|fffd| hj|fffd|lp att komplettera s|fffd|kv|fffd|gen!"
            
GetMailText = BodyText

End Function

Public Function SendOutlookMail(LV_sFile As String, LV_sAttachment As String) As Boolean
Dim objOutlook As Object
Dim objOutlookMsg As Object
Dim objOutlookRecip As Object
Dim objOutlookAttach As Object
Dim BodyText As String
Dim CertificateName  As String
    
On Error GoTo errorhandler1:

Set objOutlook = CreateObject("Outlook.Application")
Set objOutlookMsg = objOutlook.CreateItem(0)

'Set objOutlookMsg = objOutlook.CreateItem(olMailItem)

    With objOutlookMsg
        ' Add the To recipient(s) to the message.
        .To = ActiveDocument.FormFields("mailto").Result
        '"rafunktionen@sll.se"
        ' Set the Subject, Body, and Importance of the message.
        .Subject = "Funktionscertifikat - " & LV_sFile
        
        BodyText = GetMailText(LV_sAttachment)

        .Body = BodyText
        '.Importance = olImportanceHigh  'High importance

             ' Add attachments to the message.
        If LV_sAttachment <> "" Then
            If Not IsMissing(LV_sAttachment) Then
                Set objOutlookAttach = .Attachments.Add(LV_sAttachment)
            End If
        End If

        .Display
        
          Set objOutlook = Nothing
    End With
    SendOutlookMail = True
Exit Function

errorhandler1:
If Err.Description <> "" Then
    MsgBox Err.Description
End If

If Err.Number = 0 Then
    SendOutlookMail = True
Else
    SendOutlookMail = False
End If
End Function



Function AddSignature()

    On Error GoTo Error_Handler

    Dim sig As Signature
    'Display the dialog box that lets the
    'user select a digital signature.
    'If the user selects a signature, then
    'it is added to the Signatures
    'collection. If the user doesn't, then
    'an error is returned.
    Set sig = ActiveDocument.Signatures.Add
    sig.Setup.SuggestedSigner = "BBEERR"


    'Test several properties before commiting the Signature object to disk.
    If sig.Issuer = "SITHS Type 1 CA v1" And _
        sig.IsCertificateExpired = False And _
        sig.IsCertificateRevoked = False And _
        sig.IsValid = True Then
        
        'sig.Signer = strSigner And _
        'ActiveDocument.FormFields("commonname").Result = sig.Details.SignatureText
        'MsgBox "Signed"
        AddSignature = True
    'Otherwise, remove the Signature object from the SignatureSet collection.
    Else
        sig.Delete
        MsgBox "Not signed"
        AddSignature = False
    End If

    'Commit all signatures in the SignatureSet collection to the disk.
    ActiveDocument.Signatures.Commit

    Exit Function
Error_Handler:
    AddSignature = False
    MsgBox Err.Description
    
End Function
Function IsNumLockOn() As Boolean
        Dim o As OSVERSIONINFO
        
        o.dwOSVersionInfoSize = Len(o)
        GetVersionEx o
        Dim keys(0 To 255) As Byte
        GetKeyboardState keys(0)
        IsNumLockOn = keys(VK_NUMLOCK)
End Function

Sub ToggleNumLock()
        Dim o As OSVERSIONINFO
                
        o.dwOSVersionInfoSize = Len(o)
        GetVersionEx o
        Dim keys(0 To 255) As Byte
        GetKeyboardState keys(0)

          If o.dwPlatformId = VER_PLATFORM_WIN32_WINDOWS Then  '=====Win95
                keys(VK_NUMLOCK) = Abs(Not keys(VK_NUMLOCK))
                SetKeyboardState keys(0)
          ElseIf o.dwPlatformId = VER_PLATFORM_WIN32_NT Then   '=====WinNT
          'Simulate Key Press
            keybd_event VK_NUMLOCK, &H45, KEYEVENTF_EXTENDEDKEY Or 0, 0
          'Simulate Key Release
            keybd_event VK_NUMLOCK, &H45, KEYEVENTF_EXTENDEDKEY _
               Or KEYEVENTF_KEYUP, 0
          End If
        
End Sub


Sub RevisedFindIt()
' Purpose: display the text between (but not including)
' the words "Title" and "Address" if they both appear.
    Dim rng1 As Range
    Dim rng2 As Range
    Dim strTheText As String

    Set rng1 = ActiveDocument.Range
    If rng1.Find.Execute(FindText:="SignHere!") Then
        rng1.Select
        'Set rng2 = ActiveDocument.Range(rng1.End, ActiveDocument.Range.End)
        'If rng2.Find.Execute(FindText:="SignThere!") Then
        '    strTheText = ActiveDocument.Range(rng1.End, rng2.Start).Text
        '    ActiveDocument.Range(rng1.End, rng2.Start).Select
        '    MsgBox strTheText
        'End If
    End If
End Sub


Private Sub LoadDefaultTemplateFile(LV_bLoad As Boolean)
Dim LV_sPath As String
Dim LV_sFilename As String
Dim lblTemp As Label

If MV_bTemplateLoaded = True Then Exit Sub

LV_sPath = GetDocumentPath()
LV_sFilename = "FunctionalTempTemplate.txt"

If Dir(LV_sPath & "\" & LV_sFilename) <> "" Then
    GoTo lblTemp
End If

LV_sFilename = "FunctionalCertTemplate.txt"
If Dir(LV_sPath & "\" & LV_sFilename) = "" Or LV_bLoad = True Then
    Exit Sub
End If

On Error Resume Next
lblTemp:

Open LV_sPath & "\" & LV_sFilename For Input As #1
    If LV_sFilename = "FunctionalTempTemplate.txt" Then
        Input #1, MV_sCommonName
        Input #1, MV_sCommonHSA
        Input #1, MV_sFunctionMail
        
        ActiveDocument.FormFields("commonname").Result = MV_sCommonName
        ActiveDocument.FormFields("commonhsa").Result = MV_sCommonHSA
        ActiveDocument.FormFields("function_email").Result = MV_sFunctionMail
    End If
    
    Input #1, MV_sOrderName
    Input #1, MV_sOrderHsaID
    Input #1, MV_sOrderPhone
    Input #1, MV_sOrderMail

    Input #1, MV_sResponsName
    Input #1, MV_sResponsHSAid
    Input #1, MV_sResponsPhone
    Input #1, MV_sResponsMail
Close 1


ActiveDocument.FormFields("ordername").Result = MV_sOrderName
ActiveDocument.FormFields("orderhsaid").Result = MV_sOrderHsaID
ActiveDocument.FormFields("orderphone").Result = MV_sOrderPhone
ActiveDocument.FormFields("ordermail").Result = MV_sOrderMail

ActiveDocument.FormFields("responsname").Result = MV_sResponsName
ActiveDocument.FormFields("responshsaid").Result = MV_sResponsHSAid
ActiveDocument.FormFields("responsphone").Result = MV_sResponsPhone
ActiveDocument.FormFields("responsmail").Result = MV_sResponsMail

If LV_sFilename = "FunctionalTempTemplate.txt" Then
    Kill LV_sPath & "\" & LV_sFilename
    MV_bTemplateLoaded = True
End If
Err.Clear


End Sub


' InQuest injected base64 decoded content
' *'jP
' [Szjej
' *'jT

INQUEST-PP=macro
