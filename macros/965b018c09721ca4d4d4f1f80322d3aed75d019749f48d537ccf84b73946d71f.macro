Attribute VB_Name = "Module_GlobalVariables"
Option Explicit

Public LineNumberColumn, _
        DoorNameColumn, _
        DoorTypeColumn, _
        DoorSizeColumn, _
        DoorSwingColumn, _
        JambColumn, _
        JambExtentionColumn, _
        JambDepthColumn, _
        DoorCostColumn, _
        PrehangCostColumn, _
        FinishCostColumn, _
        DoorQuantityColumn, _
        DoorThicknessColumn, DoorWidthColumn, DoorHeightColumn, _
        TotalColumn As Integer

Attribute VB_Name = "Module_LastRevision"
Option Explicit

Public Function LastRevision() As String

    Dim Count As Integer
    Dim SheetName() As String
    
    LastRevision = "A"

    For Count = 1 To ThisWorkbook.Sheets.Count
        
        SheetName = (Split(ThisWorkbook.Sheets(Count).Name, "."))
         
        If SheetName(0) = "SCHEDULE" Or SheetName(0) = "SCHEDULE MARKUP" Then

            If Asc(SheetName(1)) > Asc(LastRevision) Then

                LastRevision = SheetName(1)
            
            End If

        End If

    Next Count

End Function

Attribute VB_Name = "Module_Misc"
Option Explicit

Public Function ReturnFraction(fDecimalNumber As Variant) As String
    
    Select Case fDecimalNumber - Int(fDecimalNumber)
    
        Case 0#
            ReturnFraction = ""
            
        Case 0.0625
            
            ReturnFraction = " " & " " & "1/16"
            
        Case 0.125
        
            ReturnFraction = " " & "1/8"
            
        Case 0.1875
        
            ReturnFraction = " " & "3/16"
        
        Case 0.25
        
            ReturnFraction = " " & "1/4"
          
        Case 0.3125
            
            ReturnFraction = " " & "5/16"
            
        Case 0.375
        
            ReturnFraction = " " & "3/8"
            
        Case 0.4375
        
            ReturnFraction = " " & "7/16"
        
        Case 0.5
        
            ReturnFraction = " " & "1/2"
        
        Case 0.5625
            
            ReturnFraction = " " & "9/16"
            
        Case 0.625
        
            ReturnFraction = " " & "5/8"
            
        Case 0.6875
        
            ReturnFraction = " " & "11/16"
        
        Case 0.75
        
            ReturnFraction = " " & "3/4"
          
        Case 0.8125
            
            ReturnFraction = " " & "13/16"
            
        Case 0.875
        
            ReturnFraction = " " & "7/8"
            
        Case 0.9375
        
            ReturnFraction = " " & "15/16"
           
    End Select

End Function

Public Function ReportFolderStatus(fFolderName As String) As Boolean

   Dim Object


   Set Object = CreateObject("Scripting.FileSystemObject")
   
   If (Object.FolderExists(fFolderName)) Then
        
        ReportFolderStatus = True
   
   Else
        
        ReportFolderStatus = False
   
   End If

End Function

Public Function WorkSheetExists(fSheetName As String) As Boolean

    Dim Sheet As Worksheet


    For Each Sheet In ThisWorkbook.Worksheets
        
        If Application.Proper(Sheet.Name) = Application.Proper(fSheetName) Then
            
            WorkSheetExists = True
            
            Exit Function
        
        End If
    
    Next Sheet

    WorkSheetExists = False

End Function

Public Function GetDesktopPath() As String
     
    Dim objWSHShell As Object

    Set objWSHShell = CreateObject("WScript.Shell")
     
    GetDesktopPath = objWSHShell.SpecialFolders("Desktop")

End Function

Public Function FindColumn(fStartRow As Integer, fStartColumn As Integer, fColumnName As String) As Single

    FindColumn = ActiveSheet.Cells(fStartRow, fStartColumn).EntireRow.Find(What:=fColumnName, LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:=False).Column

End Function

Public Function SortArrayAtoZ(myArray As Variant)

    Dim i As Long
    Dim j As Long
    Dim Temp

    For i = LBound(myArray) To UBound(myArray) - 1
    
        For j = i + 1 To UBound(myArray)
        
            If UCase(myArray(i)) > UCase(myArray(j)) Then
            
                Temp = myArray(j)
            
                myArray(j) = myArray(i)
            
                myArray(i) = Temp
        
            End If
    
        Next j

    Next i

    SortArrayAtoZ = myArray

End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()

    
    If IsEmpty(Range("CoverPage_OrderNumber").Value) = True Then

        Range("CoverPage_Title").Value = "QUOTE" & "." & LastRevision
    
    Else
    
        Range("CoverPage_Title").Value = "ORDER" & "." & LastRevision
    
    End If

    If WorkSheetExists("SCHEDULE MARKUP" & "." & LastRevision) Then

        Range("CoverPage_QuoteNumber").Offset(0, 2).Value = DateValue(ThisWorkbook.Names("SCHEDULE MARKUP" & "." & LastRevision & "!" & "Schedule_TimeStamp").RefersToRange.Value)
        Range("CoverPage_Subtotal").Value = ThisWorkbook.Names("SCHEDULE MARKUP" & "." & LastRevision & "!" & "Schedule_SubTotal").RefersToRange.Value

    Else

        Range("CoverPage_QuoteNumber").Offset(0, 2).Value = DateValue(ThisWorkbook.Names("SCHEDULE" & "." & LastRevision & "!" & "Schedule_TimeStamp").RefersToRange.Value)
        Range("CoverPage_Subtotal").Value = ThisWorkbook.Names("SCHEDULE" & "." & LastRevision & "!" & "Schedule_SubTotal").RefersToRange.Value

    End If

End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

    Dim StartRow As Integer
    Dim EndRow As Integer
    

        If Target.Row = Range("CoverPage_A_Start").Row Then

            StartRow = Range("CoverPage_A_Start").Row + 1
            EndRow = Range("CoverPage_A_End").Row + 1

            If Rows(StartRow & ":" & EndRow).EntireRow.Hidden = False Then

                Rows(StartRow & ":" & EndRow).EntireRow.Hidden = True

            Else

                Rows(StartRow & ":" & EndRow).EntireRow.Hidden = False

            End If

        End If

        If Target.Address = Range("CoverPage_ApplyDiscount").Address Then

            If IsEmpty(Range("CoverPage_ApplyDiscount")) = True Then

                Range("CoverPage_ApplyDiscount").Value = "Appl. " & Date

            Else

                Range("CoverPage_ApplyDiscount").ClearContents

            End If

        End If

        If Target.Address = Range("CoverPage_ApplySalesTax").Address Then

            If IsEmpty(Range("CoverPage_ApplySalesTax")) = True Then

                Range("CoverPage_ApplySalesTax").Value = "CERTIFICATE"

            Else

                Range("CoverPage_ApplySalesTax").ClearContents

            End If

        End If

        If Target.Address = Range("CoverPage_ApplyDeposit").Address Then

            If IsEmpty(Range("CoverPage_ApplyDeposit")) = True Then

                Range("CoverPage_ApplyDeposit").Value = "Rec. " & Date

            Else

                Range("CoverPage_ApplyDeposit").ClearContents

            End If

        End If

End Sub

Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub CommandButton_CreateMarkup_Click()

    Dim ValueBefore As Double
    Dim ValueAfter As Double
    
    Dim StartRow As Integer
    Dim EndRow As Integer
    
    Dim MarkupPercentage As Double

    Dim ActiveCell As Range
    Dim ActiveRange As Range

    Dim ScheduleName() As String

'*****
 
    ScheduleName = Split(ActiveSheet.Name, ".")
    
    If WorkSheetExists(ScheduleName(0) & " " & "MARKUP" & "." & ScheduleName(1)) = True Then

        Sheets(ScheduleName(0) & " " & "MARKUP" & "." & ScheduleName(1)).Delete

        Sheets(ActiveSheet.Name).Copy After:=Sheets("COVER PAGE")
        ActiveSheet.Name = ScheduleName(0) & " " & "MARKUP" & "." & ScheduleName(1)
    
    Else
    
        Sheets(ActiveSheet.Name).Copy After:=Sheets("COVER PAGE")
        ActiveSheet.Name = ScheduleName(0) & " " & "MARKUP" & "." & ScheduleName(1)
    
    End If

'*****

    MarkupPercentage = InputBox(Prompt:="Enter Markup Percentage", Title:="USER QUERY", Default:=30)

'*****

    StartRow = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row + 1
    EndRow = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row - 1

'*****

    Set ActiveRange = Worksheets(ScheduleName(0) & " " & "MARKUP" & "." & ScheduleName(1)) _
                        .Range("G" & StartRow & ":" & "I" & EndRow)
    
    For Each ActiveCell In ActiveRange.Cells
    
        With ActiveCell
    
            ValueBefore = .Value
    
            ValueAfter = ValueBefore + (ValueBefore * MarkupPercentage / 100)
        
            .Value = ValueAfter
            .Font.Color = RGB(200, 100, 100)
        
        End With
    
    Next ActiveCell
    
End Sub

Private Sub CommandButton_CreateRevision_Click()
    
    Dim ScheduleName() As String

'*****  NOTE:  *****

        ActiveSheet.Copy After:=Sheets("COVER PAGE")
    
        ActiveSheet.Name = "SCHEDULE" & "." & Chr(Asc(LastRevision) + 1)
        ActiveSheet.Range("K1").Value = "SCHEDULE" & "." & Chr(Asc(LastRevision))

End Sub

Private Sub CommandButton_CompareRevision_Click()

    Dim ScheduleName() As String
    Dim CurrentRevision, PreviousRevision As String
    
    Dim LastRow, LastColumn, RowCounter, ColumnCounter As Integer

'*****  NOTE:  *****

    ScheduleName() = Split(ActiveWorkbook.ActiveSheet.Name, ".")
    
    CurrentRevision = ScheduleName(1)
    PreviousRevision = InputBox("USER PROMPT:", "SYSTEM", "A")
    
    LastRow = Worksheets("SCHEDULE" & "." & CurrentRevision).UsedRange.Rows.Count
    LastColumn = Worksheets("SCHEDULE" & "." & CurrentRevision).UsedRange.Columns.Count

    For RowCounter = 8 To LastRow - 4
    
        For ColumnCounter = 1 To LastColumn
        
            If Worksheets("SCHEDULE" & "." & CurrentRevision).Cells(RowCounter, ColumnCounter).Value <> Worksheets("SCHEDULE" & "." & PreviousRevision).Cells(RowCounter, ColumnCounter).Value Then
    
                Worksheets("SCHEDULE" & "." & CurrentRevision).Cells(RowCounter, ColumnCounter).Interior.ColorIndex = 27
    
            Else
    
                Worksheets("SCHEDULE" & "." & CurrentRevision).Cells(RowCounter, ColumnCounter).Interior.ColorIndex = 0
    
            End If

        Next ColumnCounter

    Next RowCounter

End Sub

Private Sub CommandButton_SortSales_Click()

    Dim StartRow, EndRow As Integer

'*****

        StartRow = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row + 1
        EndRow = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row - 1

        Application.ScreenUpdating = False

        With ActiveSheet.Sort

            .SortFields.Clear
            .SortFields.Add Key:=Range("A" & StartRow & ":" & "A" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SetRange Range("A" & StartRow & ":" & "Z" & EndRow)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply

        End With

        Application.ScreenUpdating = True

'*****

End Sub


Private Sub CommandButton_SortDrafting_Click()

    Dim StartRow, EndRow As Integer

'*****

        StartRow = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row + 1
        EndRow = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row - 1


        

        Application.ScreenUpdating = False

        With ActiveSheet.Sort

            .SortFields.Clear
            .SortFields.Add Key:=Range("C" & StartRow & ":" & "C" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SortFields.Add Key:=Range("K" & StartRow & ":" & "K" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SortFields.Add Key:=Range("M" & StartRow & ":" & "M" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SortFields.Add Key:=Range("N" & StartRow & ":" & "N" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SortFields.Add Key:=Range("O" & StartRow & ":" & "O" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SortFields.Add Key:=Range("P" & StartRow & ":" & "P" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SortFields.Add Key:=Range("F" & StartRow & ":" & "F" & EndRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            .SetRange Range("A" & StartRow & ":" & "Z" & EndRow)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply

        End With

        Application.ScreenUpdating = True

'*****

End Sub


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

    Dim Response As String

        If Target.Address = ActiveSheet.Range("Schedule_TimeStamp").Address Then
        
            Response = MsgBox("Do you wish to time stamp the current schedule?", vbQuestion + vbYesNo, "SYSTEM")

            If Response = vbYes Then

                ActiveSheet.Range("Schedule_TimeStamp").Value = Now

            End If
        
        End If

        If ActiveCell.Columns(1).Column = 1 _
            And ActiveCell.Rows(1).Row > ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row _
            And ActiveCell.Rows(1).Row < ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row Then
        
            Rows(ActiveCell.Row).Select
        
            UserForm_Configerator.Left = 200
            UserForm_Configerator.Top = 50
        
            UserForm_Configerator.Show
    
        End If

End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)

    'Dim obj As New DataObject
    'Dim txt As String

    'If ActiveCell.Columns(1).Column = 1 _
        'And ActiveCell.Rows(1).Row > ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row _
        'And ActiveCell.Rows(1).Row < ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row Then

    'txt = Target.Offset(0, 3).Value & " - " & Target.Offset(0, 5).Value & " - " & Target.Offset(0, 4).Value

    'obj.SetText txt

    'obj.PutInClipboard

    'End If

End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

    Public CoverPageDataFilePath As String

Private Sub Workbook_Open()

    Dim UserResponse, QuoteNumber As String

    Dim SourceWorkBook As Object


        UserResponse = MsgBox("Update Quote with ClarityCRM Information", vbQuestion + vbYesNo, "SYSTEM")
 
        Select Case UserResponse

            Case vbNo

                Exit Sub

            Case vbYes

                QuoteNumber = InputBox("Quote Number", "SYSTEM")

                Application.ScreenUpdating = False

                Set SourceWorkBook = Workbooks.Open(GetDesktopPath() & "\CRM Download\" & "PopulateCoverSheet 2018" & ".xlsm", False, True)

                If Not (QuoteNumber = GetCRMInformation("Quotations.CRM", QuoteNumber, "QuoteNumber")) Then

                    MsgBox Prompt:="ERROR: Quote Number Does Not Exist!!!!", Buttons:=vbExclamation, Title:="SYSTEM"

                    SourceWorkBook.Close False

                    Exit Sub

                End If

                If QuoteNumber = GetCRMInformation("Quotations.CRM", QuoteNumber, "QuoteNumber") And _
                    Not (QuoteNumber = GetCRMInformation("Quotations.CRM", QuoteNumber, "Fontrick Quote Number")) Then

                    MsgBox Prompt:="ERROR: Quote Number and Fontrick Quote Number Do Not Match!", Buttons:=vbExclamation, Title:="SYSTEM"

                    SourceWorkBook.Close False

                    Exit Sub

                End If

                If QuoteNumber = GetCRMInformation("Quotations.CRM", QuoteNumber, "QuoteNumber") And _
                    QuoteNumber = GetCRMInformation("Quotations.CRM", QuoteNumber, "Fontrick Quote Number") Then

                    MsgBox Prompt:="Quote Number Found!", Buttons:=vbInformation, Title:="SYSTEM"

                    If Not (GetCRMInformation("Quotations.CRM", QuoteNumber, "Status") = "Active - Awaiting Qualification") Then

                        MsgBox Prompt:="ERROR: Status must be set to Active - Awaiting Qualification!", Buttons:=vbExclamation, Title:="SYSTEM"

                        SourceWorkBook.Close False

                        Exit Sub

                    Else

                        Call CreateQuote(QuoteNumber)

                        SourceWorkBook.Close False

                        Call SaveQuote(QuoteNumber)

                    End If

                    Application.ScreenUpdating = True
                
                End If

        End Select

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)

    Dim DeliveryResponse As Integer


        If ThisWorkbook.Names("CoverPage_Delivery").RefersToRange.Value = 0 Then

            DeliveryResponse = MsgBox("Delivery Charge is missing from Quote!" & vbCrLf & "Do you wish to add a charge of $150.00?", vbYesNo, "SYSTEM")

        End If

        If DeliveryResponse = vbYes Then

            ThisWorkbook.Names("CoverPage_Delivery").RefersToRange.Value = 150

        End If

End Sub

Private Sub CreateQuote(QuoteNumber As String)


        Application.ScreenUpdating = False

        With ThisWorkbook.Worksheets("COVER PAGE")

            .Range("CoverPage_Estimator").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Owner")
            .Range("CoverPage_Estimator").Offset(1, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Owner EMail")

            .Range("CoverPage_Salesperson").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Outside Sales Rep")
            .Range("CoverPage_AccountNotes").Offset(0, 0).Value = GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "AccountNotes")

            .Range("CoverPage_QuoteNumber").Offset(0, 0).Value = QuoteNumber
            .Range("CoverPage_QuoteNumber").Offset(0, 1).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "QuoteDate")

            .Range("CoverPage_AccountName").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Account")
            .Range("CoverPage_AccountName").Offset(1, 0).Value = GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "Address1")
            .Range("CoverPage_AccountName").Offset(2, 0).Value = GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "Address2")
            .Range("CoverPage_AccountName").Offset(3, 0).Value = GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "City") & ", " & _
                                                                    GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "State") & " " & _
                                                                    GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "ZipCode")
            .Range("CoverPage_AccountName").Offset(4, 0).Value = GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "CompanyPhone")

            .Range("CoverPage_JobName").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Job Name")

            .Range("CoverPage_JobContact").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Contact")
            .Range("CoverPage_JobContact").Offset(1, 0).Value = "P: " & GetCRMInformation("Contacts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Contact"), "Phone")
            .Range("CoverPage_JobContact").Offset(2, 0).Value = "E: " & GetCRMInformation("Contacts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Contact"), "Email")

            If GetCRMInformation("Quotations.CRM", QuoteNumber, "Delivery Address 1") = "" Then

                .Range("CoverPage_DeliveryInfo").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "ShipAddress1")
                .Range("CoverPage_DeliveryInfo").Offset(1, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "ShipAddress2")
                .Range("CoverPage_DeliveryInfo").Offset(2, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "ShipCity") & ", " & _
                                                                        GetCRMInformation("Quotations.CRM", QuoteNumber, "ShipState") & " " & _
                                                                        GetCRMInformation("Quotations.CRM", QuoteNumber, "ShipZipCode")

            Else

                .Range("CoverPage_DeliveryInfo").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Delivery Address 1")
                .Range("CoverPage_DeliveryInfo").Offset(1, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Delivery Address 2")
                .Range("CoverPage_DeliveryInfo").Offset(2, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Delivery City") & ", " & _
                                                                        GetCRMInformation("Quotations.CRM", QuoteNumber, "Delivery State") & " " & _
                                                                        GetCRMInformation("Quotations.CRM", QuoteNumber, "Delivery Zip")

            End If

            If Not (GetCRMInformation("Quotations.CRM", QuoteNumber, "Site Contact") = "") Then

                .Range("CoverPage_DeliveryContact").Offset(0, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Site Contact")
                .Range("CoverPage_DeliveryContact").Offset(1, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Site Phone Number")
                .Range("CoverPage_DeliveryContact").Offset(2, 0).Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Site Contact EMail")

            End If

            .Range("CoverPage_Terms").Value = GetCRMInformation("Quotations.CRM", QuoteNumber, "Term")

            Select Case GetCRMInformation("Accounts.CRM", GetCRMInformation("Quotations.CRM", QuoteNumber, "Account"), "TaxStatus")

                Case "NA"

                    .Range("CoverPage_ApplySalesTax").ClearContents

                Case "Resale Certificate", "Tax Exempt Certificate"

                    .Range("CoverPage_ApplySalesTax").Value = "CERTIFICATE"

            End Select

            .Range("CoverPage_LeadTime").Value = "Expected Lead Time: " & GetCRMInformation("Quotations.CRM", QuoteNumber, "Lead Time")

        End With

        Application.ScreenUpdating = True

End Sub

Private Sub SaveQuote(QuoteNumber As String)

    Dim FileName As String
    
    Dim DirectoryName As String
    
    Dim SubFolderA, SubFolderB, SubFolderC As String


        DirectoryName = "\\SERVER2019\ShareDataNEW\Quotes-Orders\FONTRICK DOOR INC"

        SubFolderA = Range("CoverPage_AccountName").Offset(0, 0).Value
        SubFolderB = Year(Date)

        If Range("CoverPage_JobName").Offset(0, 0).Value = "" Then

            SubFolderC = QuoteNumber

        Else

            SubFolderC = QuoteNumber & " " & "-" & " " & Range("CoverPage_JobName").Offset(0, 0).Value

        End If
    
        FileName = QuoteNumber

        If ReportFolderStatus(DirectoryName & "\" & SubFolderA) Then
    
            MsgBox ("SYSTEM: " & DirectoryName & "\" & SubFolderA & " EXISTS")
    
        Else
    
            MsgBox ("SYSTEM: " & DirectoryName & "\" & SubFolderA & " CREATED")
            MkDir DirectoryName & "\" & SubFolderA
    
        End If
    
        If ReportFolderStatus(DirectoryName & "\" & SubFolderA & "\" & SubFolderB) Then
    
            MsgBox ("SYSTEM: " & DirectoryName & "\" & SubFolderA & "\" & SubFolderB & " EXISTS")
    
        Else
    
            MsgBox ("SYSTEM: " & DirectoryName & "\" & SubFolderA & "\" & SubFolderB & " CREATED")
            MkDir DirectoryName & "\" & SubFolderA & "\" & SubFolderB

        End If
    
        If ReportFolderStatus(DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC) Then
    
            MsgBox ("SYSTEM: " & DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC & " EXISTS")
    
        Else
    
            MsgBox ("SYSTEM: " & DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC & " CREATED")
            MkDir DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC

        End If

        If IsEmpty(FileName) Then Exit Sub

        ThisWorkbook.SaveAs FileName:=DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC & "\" & _
                                        FileName & ".xlsm", FileFormat:=xlOpenXMLWorkbookMacroEnabled, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, CreateBackup:=False

        MsgBox (DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC & "\" & FileName & ".xlsm")

        MkDir DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC & "\" & "PRICING"
        MkDir DirectoryName & "\" & SubFolderA & "\" & SubFolderB & "\" & SubFolderC & "\" & "DRAWINGS"

End Sub

Private Function GetCRMInformation(WorksheetName As String, RowHeading As String, ColumnHeading As String) As String

    Dim ColumnNumber, RowNumber As Integer
    Dim ColumnSource, RowSource As Range

On Error GoTo ErrorHandler

        With Workbooks("PopulateCoverSheet 2018").Worksheets(WorksheetName)

            Set ColumnSource = .Rows(2).Find(What:=ColumnHeading, After:=.Cells(2, 2), LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)

                ColumnNumber = ColumnSource.Column

            Set RowSource = .Columns(2).Find(What:=RowHeading, After:=.Cells(3, 2), LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)

                RowNumber = RowSource.Row

            GetCRMInformation = .Cells(RowNumber, ColumnNumber).Value

        End With

Exit Function

ErrorHandler:

    GetCRMInformation = "Error: " & ColumnHeading

End Function

Attribute VB_Name = "UserForm_Configerator"
Option Explicit

Private Sub UserForm_Initialize()

'*****

    LineNumberColumn = 1
    
    DoorNameColumn = FindColumn(6, 1, "Name")
    DoorTypeColumn = FindColumn(6, 1, "Type")
    
    DoorSizeColumn = FindColumn(6, 1, "Size")
    DoorSwingColumn = FindColumn(6, 1, "Swing")
    
    DoorQuantityColumn = FindColumn(6, 1, "DoorQuantity")
    
    DoorThicknessColumn = FindColumn(6, 1, "DoorThickness")
    DoorWidthColumn = FindColumn(6, 1, "DoorWidth")
    DoorHeightColumn = FindColumn(6, 1, "DoorHeight")

    JambColumn = FindColumn(6, 1, "Jamb")
    JambExtentionColumn = FindColumn(6, 1, "JambExtention")
    JambDepthColumn = FindColumn(6, 1, "JambDepth")

'*****
 
    ComboBox_DoorType.List = PopulateDoorType()

    ComboBox_DoorQuantity.List = Array(1, 2, 3, 4)

    ComboBox_DoorThickness.List = Array(1.375, 1.75, 2.25)

    ComboBox_DoorWidth.List = Array(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, _
                                    20, 21, 22, 23, 24, 25, 26, 27, 28, 29, _
                                    30, 31, 32, 33, 34, 35, 36, 37, 38, 39, _
                                    40, 41, 42, 43, 44, 45, 46, 47, 48)

    ComboBox_DoorHeight.List = Array(80, 84, 90, 96)

    ComboBox_DoorSwing.List = Array("N/A", "???", "LH", "RH", "LHI", "RHI", "DBL", "DBL - LHA", "DBL - RHA", "PKT", "DBL - PKT", "SLD", "FXD", "PVT")

    ComboBox_JambExtention.List = Array("", "N/A", "Up To")
    ComboBox_JambDepth.List = Array("", 4.5625, 4.625, 6.5625, 6.625, 7.25)

'*****

    ActiveCell.EntireRow.Select
    
    Call ReadLine

End Sub


Private Function PopulateDoorType() As String()

    Dim IndexA, IndexB As Single
    Dim LowerBound, UpperBound As Single

    Dim DoorTypeList() As String
    Dim DoorType As Variant

    Dim DoorTypeExist As Boolean

    Dim StringA, StringB As String

        LowerBound = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row + 1
        UpperBound = ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row - 1
 
        IndexB = 1
        
        ReDim DoorTypeList(1 To IndexB)
        
        For IndexA = LowerBound To UpperBound
            
            DoorTypeExist = False

            For Each DoorType In DoorTypeList()
            
                If Cells(IndexA, DoorTypeColumn).Value = DoorType Then

                    DoorTypeExist = True

                End If
                
            Next DoorType
    
            If DoorTypeExist = False Then

                DoorTypeList(IndexB) = Cells(IndexA, DoorTypeColumn).Value

                IndexB = IndexB + 1

                ReDim Preserve DoorTypeList(1 To IndexB)

            End If

        Next IndexA


        For IndexA = 1 To UBound(DoorTypeList)

            For IndexB = IndexA To UBound(DoorTypeList)

                If UCase(DoorTypeList(IndexB)) < UCase(DoorTypeList(IndexA)) Then

                    StringA = DoorTypeList(IndexA)

                    StringB = DoorTypeList(IndexB)

                    DoorTypeList(IndexA) = StringB

                    DoorTypeList(IndexB) = StringA

                End If

            Next IndexB

        Next IndexA


        PopulateDoorType = DoorTypeList()

End Function

Private Sub TextBox_DoorName_AfterUpdate()

    ActiveCell.Offset(0, DoorNameColumn - 1).Value = TextBox_DoorName
    
End Sub

Private Sub ComboBox_DoorType_AfterUpdate()

    ActiveCell.Offset(0, DoorTypeColumn - 1) = ComboBox_DoorType
    
    ComboBox_DoorType.List = PopulateDoorType()

End Sub

Private Sub ComboBox_DoorSwing_AfterUpdate()

    ActiveCell.Offset(0, DoorSwingColumn - 1) = ComboBox_DoorSwing
   
End Sub

Private Sub ComboBox_DoorQuantity_AfterUpdate()

    ActiveCell.Offset(0, DoorQuantityColumn - 1).Value = ComboBox_DoorQuantity.Value
    
    ActiveCell.Offset(0, DoorSizeColumn - 1) = ComboBox_DoorQuantity.Value & " " & "@" & " " & _
        Int(ComboBox_DoorThickness.Value) & ReturnFraction(ComboBox_DoorThickness.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorWidth.Value) & ReturnFraction(ComboBox_DoorWidth.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorHeight.Value) & ReturnFraction(ComboBox_DoorHeight.Value) & Chr(34)

End Sub

Private Sub ComboBox_DoorThickness_AfterUpdate()

    ActiveCell.Offset(0, DoorThicknessColumn - 1).Value = ComboBox_DoorThickness.Value
    
    ActiveCell.Offset(0, DoorSizeColumn - 1) = ComboBox_DoorQuantity.Value & " " & "@" & " " & _
        Int(ComboBox_DoorThickness.Value) & ReturnFraction(ComboBox_DoorThickness.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorWidth.Value) & ReturnFraction(ComboBox_DoorWidth.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorHeight.Value) & ReturnFraction(ComboBox_DoorHeight.Value) & Chr(34)

End Sub

Private Sub ComboBox_DoorWidth_AfterUpdate()
    
    ActiveCell.Offset(0, DoorWidthColumn - 1).Value = ComboBox_DoorWidth.Value
    
    ActiveCell.Offset(0, DoorSizeColumn - 1) = ComboBox_DoorQuantity.Value & " " & "@" & " " & _
        Int(ComboBox_DoorThickness.Value) & ReturnFraction(ComboBox_DoorThickness.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorWidth.Value) & ReturnFraction(ComboBox_DoorWidth.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorHeight.Value) & ReturnFraction(ComboBox_DoorHeight.Value) & Chr(34)
    
End Sub

Private Sub ComboBox_DoorHeight_AfterUpdate()

    ActiveCell.Offset(0, DoorHeightColumn - 1).Value = ComboBox_DoorHeight.Value

    ActiveCell.Offset(0, DoorSizeColumn - 1) = ComboBox_DoorQuantity.Value & " " & "@" & " " & _
        Int(ComboBox_DoorThickness.Value) & ReturnFraction(ComboBox_DoorThickness.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorWidth.Value) & ReturnFraction(ComboBox_DoorWidth.Value) & Chr(34) & " " & "x" & " " & _
        Int(ComboBox_DoorHeight.Value) & ReturnFraction(ComboBox_DoorHeight.Value) & Chr(34)

End Sub

Private Sub ComboBox_JambExtention_AfterUpdate()

    ActiveCell.Offset(0, JambExtentionColumn - 1).Value = ComboBox_JambExtention.Value

    If ComboBox_JambExtention.Value = "" And ComboBox_JambDepth.Value = "" Then
    
        ActiveCell.Offset(0, JambColumn - 1) = ""
    
    ElseIf ComboBox_JambExtention.Value = "N/A" Then

        ComboBox_JambDepth.Value = ""
        
        ActiveCell.Offset(0, JambDepthColumn - 1).Value = ""
        
        ActiveCell.Offset(0, JambColumn - 1) = "N/A"

    ElseIf ComboBox_JambExtention.Value = "" And ComboBox_JambDepth.Value <> "" Then

        ActiveCell.Offset(0, JambColumn - 1) = Int(ComboBox_JambDepth.Value) & ReturnFraction(ComboBox_JambDepth.Value) & Chr(34)
    
    ElseIf ComboBox_JambExtention.Value = "Up To" And ComboBox_JambDepth.Value <> "" Then

        ActiveCell.Offset(0, JambColumn - 1) = "Up To" & " " & Int(ComboBox_JambDepth.Value) & ReturnFraction(ComboBox_JambDepth.Value) & Chr(34)
        
    End If

End Sub

Private Sub ComboBox_JambDepth_AfterUpdate()

    ActiveCell.Offset(0, JambDepthColumn - 1).Value = ComboBox_JambDepth.Value

    If ComboBox_JambExtention.Value = "" And ComboBox_JambDepth.Value = "" Then
    
        ActiveCell.Offset(0, JambColumn - 1) = ""
    
    ElseIf ComboBox_JambExtention.Value = "N/A" Then

        ComboBox_JambDepth.Value = ""
        
        ActiveCell.Offset(0, JambDepthColumn - 1).Value = ""
        
        ActiveCell.Offset(0, JambColumn - 1) = "N/A"

    ElseIf ComboBox_JambExtention.Value = "" And ComboBox_JambDepth.Value <> "" Then

        ActiveCell.Offset(0, JambColumn - 1) = Int(ComboBox_JambDepth.Value) & ReturnFraction(ComboBox_JambDepth.Value) & Chr(34)
    
    ElseIf ComboBox_JambExtention.Value = "Up To" And ComboBox_JambDepth.Value <> "" Then

        ActiveCell.Offset(0, JambColumn - 1) = "Up To" & " " & Int(ComboBox_JambDepth.Value) & ReturnFraction(ComboBox_JambDepth.Value) & Chr(34)
        
    End If

End Sub

Private Sub CommandButton_NextLine_Click()
   
    If ActiveCell.Rows(1).Row + 1 < ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_End").RefersToRange.Rows(1).Row Then
        
        ActiveCell.Offset(1, 0).EntireRow.Select
        
        Call ReadLine
   
    End If

End Sub

Private Sub CommandButton_PreviousLine_Click()

    If ActiveCell.Rows(1).Row - 1 > ActiveWorkbook.Names(ActiveSheet.Name & "!Schedule_Start").RefersToRange.Rows(1).Row Then

        ActiveCell.Offset(-1, 0).EntireRow.Select

        Call ReadLine

    End If
    
End Sub

Private Sub CommandButton_CreateLine_Click()

On Error Resume Next

    ActiveCell.EntireRow.Copy
        
    Range("Schedule_End").Insert Shift:=xlDown
    Range("Schedule_End").Offset(-1, 0).Select
        
    ActiveCell.Offset(0, LineNumberColumn - 1).Value = ActiveCell.Rows(1).Row - 7
    
    If CheckBox_AutoName.Value = True Then

        ActiveCell.Offset(0, DoorNameColumn - 1).Value = CInt(Int(ActiveCell.Offset(0, DoorNameColumn - 1).Value) + 1)
    
    Else

        ActiveCell.Offset(0, DoorNameColumn - 1).Value = ""

    End If
    
    Range("Schedule_SubTotal").Formula = "=SUM(J" & Range("Schedule_Start").Row & ":J" & Range("Schedule_End").Row & ")"
        
    Call ReadLine

End Sub

Private Sub ReadLine()
    
    Dim Counter As Integer
        
    TextBox_ActiveLineNumber = ActiveCell.Offset(0, LineNumberColumn - 1).Value
    
    TextBox_DoorName = ActiveCell.Offset(0, DoorNameColumn - 1).Value

    ComboBox_DoorType.Value = ActiveCell.Offset(0, DoorTypeColumn - 1).Value

    ComboBox_DoorQuantity.Value = ActiveCell.Offset(0, DoorQuantityColumn - 1).Value
    
    ComboBox_DoorThickness.Value = ActiveCell.Offset(0, DoorThicknessColumn - 1).Value
    ComboBox_DoorWidth.Value = ActiveCell.Offset(0, DoorWidthColumn - 1).Value
    ComboBox_DoorHeight.Value = ActiveCell.Offset(0, DoorHeightColumn - 1).Value

    ComboBox_DoorSwing.Value = ActiveCell.Offset(0, DoorSwingColumn - 1).Value

    ComboBox_JambExtention.Value = ActiveCell.Offset(0, JambExtentionColumn - 1).Value
    ComboBox_JambDepth.Value = ActiveCell.Offset(0, JambDepthColumn - 1).Value

End Sub



INQUEST-PP=macro
