Attribute VB_Name = "Module1"
Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long          ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As Long, ByVal lpValueName As String) As Long

Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long

'--------------
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Declare PtrSafe Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
Declare PtrSafe Function OSRegSetValueEx Lib "advapi32" Alias "RegSetValueExA" (ByVal hkey As Long, ByVal lpszValueName As String, ByVal dwReserved As Long, ByVal fdwType As Long, lpbData As Any, ByVal cbData As Long) As Long
Declare PtrSafe Function OSRegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpszValueName As String, ByVal dwReserved As Long, lpdwType As Long, lpbData As Any, cbData As Long) As Long


'
'|fffd||11713|x|fffd||30e||64fe|
'
'Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
'Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Declare PtrSafe Function GetSystemMetrics Lib "USER32" (ByVal flag As Integer) As Integer

Option Explicit

Private Const TEXTHEAD As String = "__TKO__"
Private Const TEXTTAIL As String = "_T_"

Private TextCollection As Collection
Private KeyCollection As Collection

Public Function IsKeyInCollection(ByVal TestCollection As Collection, ByVal key As Variant) As Boolean
   Dim Value As Variant
   IsKeyInCollection = True
   On Error Resume Next
   Value = TestCollection(key)
   If IsEmpty(Value) Then
      Set Value = TestCollection(key)
      If Value Is Nothing Then
         IsKeyInCollection = False
      End If
   End If
End Function

Public Function AddKey(ByVal key As Variant) As Variant
    Dim cnt As Long
    Dim var As Variant
    If VarType(key) <> vbString Then
        var = CStr(key)
    Else
        var = key
    End If
    cnt = KeyCollection.Count + 1
    If Not IsKeyInCollection(TextCollection, var) Then
        TextCollection.Add TEXTHEAD & cnt & TEXTTAIL, var
        KeyCollection.Add var, TEXTHEAD & cnt & TEXTTAIL
    End If
    AddKey = TextCollection(var)
End Function

Public Function IsTextInCollection(ByVal text As Variant) As Boolean
    IsTextInCollection = IsKeyInCollection(KeyCollection, text)
End Function

Public Function GetTextFromCollection(ByVal key As Variant) As Variant
    GetTextFromCollection = KeyCollection(key)
End Function

Public Function IsPartTextInCollection(ByVal text As Variant) As Boolean
    Dim RE As Object, REMatches As Object
    Set RE = CreateObject("vbscript.regexp")
    With RE
        '.MultiLine = False
        .Global = False
        .IgnoreCase = True
        .Pattern = TEXTHEAD & "[0-9]{1,}" & TEXTTAIL
    End With
    Set REMatches = RE.Execute(text)
    IsPartTextInCollection = IIf(REMatches.Count > 0, True, False)
End Function

Function GetAllTags(strData As Variant) As Object
    Dim RE As Object
    Set RE = CreateObject("vbscript.regexp")
    With RE
        '.MultiLine = False
        .Global = True
        .IgnoreCase = True
        .Pattern = TEXTHEAD & "[0-9]{1,}" & TEXTTAIL
    End With
    Set GetAllTags = RE.Execute(strData)
End Function

Public Function ReplaceTextInCollection(ByVal text As Variant) As Variant
    Dim i As Long
    Dim var As Variant
    Dim AllTags As Object
    var = text
    Set AllTags = GetAllTags(var)
    For i = 0 To AllTags.Count - 1
        var = Replace(var, AllTags.Item(i), KeyCollection(AllTags.Item(i))) '10.4.23 LSQ mdf : IE5.0 |fffd||389||fffd|
    Next
    ReplaceTextInCollection = var
End Function

Sub InitCollection()
    Set TextCollection = New Collection
    Set KeyCollection = New Collection
End Sub

Sub ReleaseCollection()
    Set TextCollection = Nothing
    Set KeyCollection = Nothing
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
