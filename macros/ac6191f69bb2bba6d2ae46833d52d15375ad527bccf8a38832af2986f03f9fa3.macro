Attribute VB_Name = "BingoFrm"
Attribute VB_Base = "0{5CD9C263-1C2E-4390-BA28-4F6E8BF33C03}{3F3FDA83-E916-4E14-AFAA-ED5DD0A87E1F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CheckBox6_Click()
  Application.Calculate
End Sub

Private Sub ComboBox1_Change()
   Dim i As Long
   For i = 3 To 9
      If WorksheetExists("Template " & i & " Row") Then ThisWorkbook.Worksheets("Template " & i & " Row").Visible = False
   Next i
   If WorksheetExists("Template " & ComboBox1.Value & " Row") Then ThisWorkbook.Worksheets("Template " & ComboBox1.Value & " Row").Visible = True
   
End Sub

Private Sub CommandButton1_Click()
  ThisWorkbook.Worksheets("Leader Board").Range("A1:Z" & NumClues + 1).Clear
  Call MakeSheets
End Sub


Private Sub CommandButton2_Click()
  If WorksheetExists("1") Then
    Call PrepareForPrinting
  Else
    MsgBox ("You Need to Generate Bingo Boards before they can be printed.")
  End If
 End Sub

Private Sub CommandButton3_Click() ' Load Drawing Form
  If WorksheetExists("1") Then
    ThisWorkbook.Worksheets("List").Range("N14").Value = True
    DrawFrm.Show
  Else
    MsgBox ("You Need to Generate Bingo Boards before you Draw Clues.")
  End If
  Me.Left = Application.Width - 1.15 * Me.Width
End Sub

Private Sub CommandButton4_Click()
  ActiveWorkbook.FollowHyperlink Address:=VideoLinkTB.Text
End Sub

Private Sub CommandButton5_Click() ' Go to the List Worksheet
  Dim s As String
  ThisWorkbook.Worksheets("List").Activate
  ThisWorkbook.Worksheets("List").Range("B2").Activate
  s = "Edit Column B to change the word pool for the Bingo Squares" & Chr(10) & Chr(10) & _
         "Edit Column Numbers in Column H to force Bingo Words into Specific Bingo Board Columns. " & _
         "For example each Bingo Column Might be a Category." & Chr(10) & Chr(10) & _
         "Column A is optional.  If you prefer to give clues rather than reading the actual word for the bingo squares. " & _
         "Example: You might make the clues (Column A) you read in English, But you might make the Bingo Squares the word in Spanish." & _
         "Or the clue (Column A) could be a Novel, and the Bingo Squares (Column B) could be an Author."
  s = MsgBox(s, , "How to Edit")
End Sub

Private Sub CommandButton6_Click()
  Call DeleteBoards
End Sub

Private Sub CommandButton7_Click()
 Dim i As Long
   For i = 3 To 9
      If WorksheetExists("Template " & i & " Row") Then ThisWorkbook.Worksheets("Template " & i & " Row").Visible = False
   Next i
   If WorksheetExists("Template " & ComboBox1.Value & " Row") Then ThisWorkbook.Worksheets("Template " & ComboBox1.Value & " Row").Visible = True
   ThisWorkbook.Worksheets("Template " & ComboBox1 & " Row").Activate
   
End Sub

Private Sub UserForm_Activate()
   VideoLinkTB.Text = ThisWorkbook.Worksheets("List").Range("M17").Value
   CheckBox4.Visible = False
End Sub

Private Sub UserForm_Initialize()
   Dim s As String
   VideoLinkTB.Text = ThisWorkbook.Worksheets("List").Range("M17").Value
   s = Application.WorksheetFunction.VLookup("ZZZ", ThisWorkbook.Worksheets("Change Log").Range("A1:B300"), 1, 1)
   Me.Caption = "Bingo Board Generator (" & s & ") See Link at Bottom of Form for Instructions and Updates."
End Sub


Attribute VB_Name = "DrawFrm"
Attribute VB_Base = "0{A7A3C77B-4D66-465D-941B-FCD95E3B3374}{4641F41A-B9AA-46D1-AC05-E21CDC00CFDB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ClueSize_Change()
    Worksheets("List").Range("N19").Value = Me.ClueSize.Value
  Call ResizeStuff
End Sub

Private Sub DrawButton_Click()
Application.ScreenUpdating = False
  Dim maxpick As Long
  DrawClue (Me.ManualDrawCB.Value)
  Me.DrawButton.SetFocus
    If SpeakSquare.Value Then Application.Speech.Speak ThisWorkbook.Worksheets("Leader Board").Range("B2").Value, 1
  If SpeakClue.Value Then Application.Speech.Speak ThisWorkbook.Worksheets("Leader Board").Range("A2").Value, 1
   maxpick = Application.WorksheetFunction.Max(ThisWorkbook.Worksheets("List").Range("D2:D" & NumClues + 1))
   Me.Caption = maxpick & " of " & Application.WorksheetFunction.CountA(ThisWorkbook.Worksheets("List").Range("B2:B" & NumClues + 1)) & " clues drawn."
  Me.DrawButton.Caption = "Draw (Press Space Bar)"
  Me.DrawButton.SetFocus
  Application.ScreenUpdating = True
End Sub
Public Sub ClickDrawButton()
  DrawButton_Click
End Sub

Private Sub CommandButton2_Click()
  Call ResetDrawing
End Sub


Private Sub ManualDrawCB_Click()
   If ManualDrawCB.Value Then
       DrawButton.Caption = "Update Leaders"
       ThisWorkbook.Worksheets("List").Columns("D:D").EntireColumn.Hidden = False
   Else
       DrawButton.Caption = "Draw"
       ThisWorkbook.Worksheets("List").Columns("D:D").EntireColumn.Hidden = True
   End If
End Sub

Private Sub MultiPage1_Change()

End Sub

Private Sub ShowClue_Click()
  If ShowClue.Value Then
     Me.ClueLB.Visible = True
  Else
    Me.ClueLB.Visible = False
  End If
End Sub

Private Sub ShowSquare_Click()
  If ShowSquare.Value Then
     Me.SquareLB.Visible = True
     Me.ClueLB.Left = Me.SquareLB.Left + Me.SquareLB.Width + 50
  End If
  If Not ShowSquare.Value Then
     Me.SquareLB.Visible = False
     Me.ClueLB.Left = Me.SquareLB.Left
  End If
End Sub

Private Sub SquareSize_Change()
  Worksheets("List").Range("N18").Value = Me.SquareSize.Value
  Call ResizeStuff
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
  ShowClue.Value = True
  ShowSquare.Value = True
  Me.SquareSize.Value = Worksheets("List").Range("N18").Value
  Me.ClueSize.Value = Worksheets("List").Range("N19").Value
  Me.ManualDrawCB.Value = Not ThisWorkbook.Worksheets("List").Columns("D:D").EntireColumn.Hidden
  If ManualDrawCB.Value Then DrawButton.Caption = "Update Leaders"
  
  ResizeStuff
  Me.DrawButton.SetFocus
End Sub

Private Sub ResizeStuff()
  Dim SquareLeft As Long
  Dim ClueLeft As Long
  Dim MinClueLeft As Long
  MinClueLeft = 125
  SquareLeft = 5
  ClueLeft = 5
  Me.Width = 0.9 * Application.Width
  Me.Height = 0.9 * Application.Height
  Me.MultiPage1.Height = 0.9 * Me.Height
  Me.MultiPage1.Width = 0.95 * Me.Width
  Me.ClueLB.Height = 0.9 * (Me.Height - Me.ClueLB.Top)
  Me.SquareLB.Height = 0.9 * (Me.Height - Me.SquareLB.Top)
  Me.SquareLB.Width = SquareSize.Value
  Me.SquareLB.Left = SquareLeft
  Me.ClueLB.Width = ClueSize.Value
  ClueLeft = Me.SquareLB.Left + Me.SquareLB.Width + SquareLeft
  Me.ClueLB.Left = ClueLeft
  Me.SpeakClue.Left = Application.WorksheetFunction.Max(ClueLeft, MinClueLeft)
  Me.ShowClue.Left = Application.WorksheetFunction.Max(ClueLeft, MinClueLeft)
  Me.ClueSize.Left = Application.WorksheetFunction.Max(ClueLeft, MinClueLeft)
  Me.ClueWidthLabel.Left = Application.WorksheetFunction.Max(ClueLeft, MinClueLeft) + Me.ClueSize.Width + 5
  Me.MultiPage1.Pages(1).ScrollWidth = Me.ClueLB.Left + Me.ClueLB.Width + 50

End Sub
Attribute VB_Name = "Module1"
Public Sub ShowBingoForm()
Attribute ShowBingoForm.VB_ProcData.VB_Invoke_Func = "b\n14"
  BingoFrm.Show
End Sub
Public Sub DrawClueFromLeaderBoardSheet()
   Call DrawClue(Not ThisWorkbook.Worksheets("List").Columns("D:D").EntireColumn.Hidden)
End Sub
Public Sub DrawClue(Optional ManualDraw As Boolean = False)
   Dim LSht As Worksheet
   Dim maxpick As Long
   Dim NextPickRow As Long
   Dim LRng As Range
   Dim LBRng As Range
   Dim sht As Worksheet
   Set LSht = ThisWorkbook.Worksheets("List")
   Set LBSht = ThisWorkbook.Worksheets("Leader Board")
   Set LRng = LSht.Range("A1:D" & NumClues + 1)
   Set LBRng = LBSht.Range("A1:D" & NumClues + 1)
       
   If Not ManualDraw Then
      Application.Calculate
      maxpick = LSht.Range("D2:D" & NumClues + 1).Cells.Count - LSht.Range("D2:D" & NumClues + 1).SpecialCells(xlCellTypeBlanks).Count
      If maxpick >= NumClues Then
        MsgBox "All clues have been drawn"
        Exit Sub
      End If
     NextPickRow = Application.WorksheetFunction.Match(LSht.Range("G1"), LSht.Range("G2:G" & NumClues + 1), 0) + 1
     
     If ThisWorkbook.Worksheets("List").Range("N4").Value And LSht.Cells(NextPickRow, 8).Value > ThisWorkbook.Worksheets("List").Range("N6").Value Then
        Call DrawClue
     Else
        LSht.Cells(NextPickRow, 4).Value = maxpick + 1
     End If
     
   End If
   LBRng.Clear
   SortClues
   SortLeaders
   Application.CutCopyMode = False
End Sub
Public Sub SortClues()
  Dim LSht, LBSht As Worksheet
  Dim LRng, LBRng As Range
  Set LSht = ThisWorkbook.Worksheets("List")
  Set LBSht = ThisWorkbook.Worksheets("Leader Board")
  Set LRng = LSht.Range("A1:D" & NumClues + 1)
  Set LBRng = LBSht.Range("A1:D" & NumClues + 1)
  Dim maxpick As Long
  maxpick = Application.WorksheetFunction.Max(LSht.Range("D2:D" & NumClues + 1))
  LRng.Copy
  LBRng.PasteSpecial Paste:=xlPasteValues
   
  LBSht.Sort.SortFields.Clear
  LBSht.Sort.SortFields.Add Key:=Range("D2:D" & NumClues + 1), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=lSortNormal
  With LBSht.Sort
      .SetRange Range("A1:D" & NumClues + 1)
      .Header = xlYes
      .MatchCase = False
      .Orientation = xlTopToBottom
      .SortMethod = xlPinYin
      .Apply
  End With
  LBSht.Range(LBSht.Cells(maxpick + 2, 1), LBSht.Cells(NumClues + 1, 4)).Clear
End Sub
Public Sub SortLeaders()
  Dim LSht, LBSht As Worksheet
  Dim LRng, LBRng As Range
  Set LSht = ThisWorkbook.Worksheets("List")
  Set LBSht = ThisWorkbook.Worksheets("Leader Board")
  Set LRng = LSht.Range("I1:L" & ThisWorkbook.Worksheets("List").Range("N9").Value + 1)
  Set LBRng = LBSht.Range("F1:I" & ThisWorkbook.Worksheets("List").Range("N9").Value + 1)
  LBRng.Clear
  LRng.Copy
  LBRng.PasteSpecial Paste:=xlPasteValues
  LBSht.Sort.SortFields.Clear
    LBSht.Sort.SortFields.Add Key:=Range("G2:G" & ThisWorkbook.Worksheets("List").Range("N9").Value + 1), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=lSortNormal
    LBSht.Sort.SortFields.Add Key:=Range("I2:I" & ThisWorkbook.Worksheets("List").Range("N9").Value + 1), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=lSortNormal
    With LBSht.Sort
        .SetRange LBRng
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Public Sub MakeSheets()
Attribute MakeSheets.VB_ProcData.VB_Invoke_Func = "d\n14"
   Dim TSht As Worksheet
   Dim NewWB As Workbook
   Dim BoardRng As Range
   Dim HideRng As Range
   Dim i As Long
   Dim ws2 As Worksheet
   Dim N As Long
   Dim NumRows As Long
   Dim FirstClueRow As Long
   Dim FirstClueCol As Long
   Dim Start As Double
   Dim GenerationTime As Double
   Dim s As String
   Dim sMsg As String
   Dim UpdateScreen As Boolean
   Dim SelectAllBoards As Boolean
   Dim SpeakWhenDone As Boolean
   Dim LSht As Worksheet
   Dim MustContain As String
   Dim ForceTryCount As Long
   Set LSht = ThisWorkbook.Worksheets("List")
   Start = Timer
   Call DeleteBoards
   ' Application.StatusBar = "Running, please give me a minute."
   NumRows = LSht.Range("N6").Value ' Size of Board
   FirstClueRow = LSht.Range("N7").Value
   FirstClueCol = LSht.Range("N8").Value
   UpdateScreen = LSht.Range("N11").Value
   SelectAllBoards = LSht.Range("N12").Value
   SpeakWhenDone = LSht.Range("N13").Value
   MustContain = LSht.Range("N20").Value
   N = LSht.Range("N9").Value  ' Number of Boards to Generate

   If Not WorksheetExists("Template " & NumRows & " Row") Then
       MsgBox "There is no " & N & "Row template yet.  You can copy an existing template and rename the Copy Template " & N & " Row.  Understand that you will have to unhide Columns and make make changes.  Look at a few template worksheets to get the hang of it, but in principle you could have any size Bingo Board."
   Else
      Set TSht = ThisWorkbook.Worksheets("Template " & NumRows & " Row")
   End If
   
   Application.Calculation = xlCalculationManual
   Application.ScreenUpdating = UpdateScreen
   Application.Calculate
   
   For i = N To 1 Step -1
    
    
    
    Set NewWB = ThisWorkbook
ForceTryCount = 1
TryAgain:
    ForceTryCount = ForceTryCount + 1
    ThisWorkbook.Worksheets("List").Calculate
    TSht.Calculate
If Not (HasRequiredSquares(TSht.Range(TSht.Cells(FirstClueRow, FirstClueCol), TSht.Cells(FirstClueRow + NumRows - 1, FirstClueCol + NumRows - 1)), MustContain)) Then
    If ForceTryCount < 100 Then
       GoTo TryAgain
    Else
       MsgBox "I can't manage to fit all of your required words on a board.  Please double check your required word list.  Separate any required words with a comma.  Do not insert a space before or after the required word."
       Exit Sub
    End If
Else
    TSht.Copy _
    After:=NewWB.Sheets("Change Log")
    Set ws2 = ActiveSheet
    Set BoardRng = ws2.Range(Cells(FirstClueRow, FirstClueCol), Cells(FirstClueRow + NumRows - 1, FirstClueCol + NumRows - 1))
End If
    
    BoardRng.Copy
    BoardRng.PasteSpecial Paste:=xlPasteValues
    ws2.Name = i
    ws2.Cells(1, 1).Select
    
  Next i
  

    LSht.Range("E1").Value = "Generated :" & Format(Now(), "m/d/yyyy h:mm:ss")
    LSht.Unprotect

    
   LSht.Range("I3:L10000").Clear
   For i = 2 To N + 1
      LSht.Range("I2:L2").Copy LSht.Range("I" & i & ":L" & i)
      LSht.Cells(i, 9).Value = i - 1
   Next i
   
   ws2.Protect
     
   Application.Calculation = xlCalculationAutomatic
   Application.Calculate
     
  If SelectAllBoards Then
    ' NewWB.Worksheets("1").Activate
     For i = 1 To 10000
       If WorksheetExists("" & i & "") Then ThisWorkbook.Worksheets("" & i & "").Select (False)
       
     Next i
  End If
  Application.ScreenUpdating = True
  GenerationTime = Timer - Start
  If SpeakWhenDone Then Application.Speech.Speak "Thank you for waiting.  Your " & N & " Bingo Boards took " & Format(GenerationTime, "0.00") & " seconds to process."
  s = Format(GenerationTime, "0.00") & " seconds to generate " & N & " boards.  That's " & Format(GenerationTime / N, "0.00") & " seconds per board."
  If SelectAllBoards Then s = s & Chr(10) & Chr(10) & "Press the Prepare for Printing Button to prepare boards for printing."
   
  sMsg = MsgBox(s, , "All Done! " & Format(GenerationTime, "0.00") & " seconds")
End Sub
Public Function HasRequiredSquares(BRng As Range, MSquares As String) As Boolean
   Dim i As Long
   Dim BArr As Variant
   Dim STest As Boolean
   STest = True
   BArr = BRng
   Dim MSqrs() As String
   MSqrs = Split(MSquares, ",")
   For i = LBound(MSqrs) To UBound(MSqrs)
      STest = STest And IsInArray(MSqrs(i), BArr)
   Next i
   HasRequiredSquares = STest
End Function
Public Function IsInArray(ByVal vToFind As Variant, vArr As Variant) As Boolean

    Dim i As Long
    Dim bReturn As Boolean
    Dim vLine As Variant

    For i = LBound(vArr, 1) To UBound(vArr, 1)
        vLine = Application.WorksheetFunction.Index(vArr, i) 'slice off one line
        If IsArray(vLine) Then 'if it's an array, use the filter
            bReturn = UBound(Filter(vLine, vToFind)) > -1
        Else 'if it's not an array, it was 1d so check the value
            bReturn = vLine = vToFind
        End If
        If bReturn Then Exit For 'stop looking if one found
    Next i

    IsInArray = bReturn

End Function
Public Sub foo()
  MsgBox Range(Cells(1, 1), Cells(7, 26)).Columns.Address
End Sub
Public Sub DeleteBoards()
   Dim LSht As Worksheet
   Dim N, i As Long
   Dim CalcMode As Long
   CalcMode = Application.Calculation
   Application.Calculation = xlCalculationManual
   Set LSht = ThisWorkbook.Worksheets("List")
   N = LSht.Range("N9").Value  ' Number of Boards to Generate
   Application.DisplayAlerts = False
   For i = 1 To 10000
     If WorksheetExists("" & i & "") Then ThisWorkbook.Worksheets("" & i & "").Delete
   Next i
   Application.Calculation = CalcMode
   Application.DisplayAlerts = True
End Sub

Function WorksheetExists(shtName As String, Optional wb As Workbook) As Boolean
    Dim sht As Worksheet
      If wb Is Nothing Then Set wb = ThisWorkbook
    On Error Resume Next
    Set sht = wb.Sheets(shtName)
    On Error GoTo 0
    WorksheetExists = Not sht Is Nothing
End Function
Public Sub ResetDrawing()
    ThisWorkbook.Worksheets("List").Range("D2:D1000").Clear
    SortClues
    SortLeaders
End Sub
Public Function NumClues() As Long
   NumClues = ThisWorkbook.Worksheets("List").Range("B2:B10000").Cells.Count - ThisWorkbook.Worksheets("List").Range("B2:B10000").SpecialCells(xlCellTypeBlanks).Count
End Function
Public Function NumDrawn() As Long 'Probably not using this right now
  NumDrawn = ThisWorkbook.Worksheets("Leader Board").Range("D2").Value
End Function
Public Sub PrepareForPrinting()
    Dim s As String
    Unload BingoFrm
    ThisWorkbook.Worksheets("List").Range("N14").Value = False
    Call SelectAllTheBoards
     s = ""
     s = s & "Press Page Setup" & Chr(10)
     s = s & "Then Header Footer" & Chr(10)
     s = s & "Then Custom Footer" & Chr(10)
     s = s & "Notice the buttons.  You will likely want to insert the worksheet name as this is the board number.  So you might want something like Board &[Tab] which will print as 'Board 1', 'Board 2' etc." & Chr(10)
     s = s & "You may also want to highlight the text and press the font button." & Chr(10) & Chr(10)
     s = s & " If you want to print more than one bingo board per sheet of paper, I recommend printing all of the Bingo Boards to a single .pdf file.  (If the worksheets are not selected, press shift while clicking the worksheet tabs) and printing to .pdf"
     s = s & "  Then use a website such as to https://online2pdf.com/multiple-pages-per-sheet to print more than one Bingo card per page."
     s = s & Chr(10) & Chr(10) & "Remember that any changes you make to the template spreadsheet, for example inserting rows, columns, textboxes, pictures, font changes etc, will show up on every board once you Generate New Boards."
     s = s & Chr(10) & Chr(10) & "To Edit the Template press the Edit Board Template Button. Press Control and B Simultaneously to Show Form"
     s = MsgBox(s, , "You may want to customize the Footers and Headers before printing.")
    ActiveWindow.SelectedSheets.PrintPreview
     
End Sub
Public Sub SelectAllTheBoards()
     For i = 1 To 10000
       If WorksheetExists("" & i & "") Then ThisWorkbook.Worksheets("" & i & "").Select (False)
       If i = 1 Then ThisWorkbook.Worksheets("" & i & "").Select (True)
     Next i
End Sub
Public Sub ShowTemplate(N As Long)
   'For i =
End Sub
Attribute VB_Name = "Module2"
Public Sub TalkToMe()
    Application.Speech.Speak "Baked Potato"
End Sub
Attribute VB_Name = "Module3"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    Columns("C:H").Select
    Selection.EntireColumn.Hidden = False
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub CommandButton1_Click()
  If BingoFrm.Visible = True Then
     DrawFrm.ClickDrawButton
  Else
     ShowBingoForm
  End If

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
  ThisWorkbook.Worksheets("List").Activate
  ThisWorkbook.Worksheets("List").Range("B2").Activate
  Call ShowBingoForm
End Sub


INQUEST-PP=macro
