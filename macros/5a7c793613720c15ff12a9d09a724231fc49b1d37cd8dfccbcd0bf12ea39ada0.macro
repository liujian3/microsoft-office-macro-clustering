Attribute VB_Name = "Bildablage"
Attribute VB_Base = "0{B0969468-13E9-4E25-A1A9-8861738252B2}{E2CEA8A7-8932-45D4-86F6-E7AE0DB5E541}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    On Error GoTo NOAUTOSAVE
    If Cells(1, 1).Comment.Text = "Autosave" Then Exit Sub
    
NOAUTOSAVE:
    Application.EnableEvents = False
    Cancel = True
    If SaveAsUI = False Then
        Select Case Right(ThisWorkbook.Name, 4)
            Case Is = "xlsm", ".xls"
            If SaveAsUI = False Then ActiveWorkbook.Save Else Application.Dialogs(xlDialogSaveAs).Show , 52
        End Select
    Else
        Application.Dialogs(xlDialogSaveAs).Show , 52
    End If
    Application.EnableEvents = True
End Sub
Private Sub workbook_open()
Dim Pfadliste

'Kopfdaten vervollst|fffd|ndigen
user = Registry_Read("HKEY_CURRENT_USER\Trumpf\UserInfo\User\UserInitials")
If Range("s1") = "" Then Range("s1") = Date 'aktuelles Datum bei neuer Liste
If Range("s2") = "" Then Range("s2") = user 'Benutzer bei neuer Liste aus Userdaten /Trumpf

'Liste an Bildschirmgr|fffd|sse anpassen
Range("A4:T4").Select
ActiveWindow.Zoom = True
Range("B5").Select

If RFCUser Like "*" & CutUser(user) & "*" = False Then
    Bildablage.txt_RFC = ""
End If
Pverz = VerzDa(Left(OrgPfadlisten, (Len(OrgPfadlisten) - 6)))
If Pverz = True Then 'Zugriff auf Trumpf Netzwerk vorhanden

    Pfadliste = Left(KopPfadlisten, (Len(KopPfadlisten) - 6))
    If PermitUser Like "*" & CutUser(user) & "*" Then
        ActiveSheet.Cells(1, 1) = Pfadliste & "Daten\"
        Update_Datenlisten_TWS
        Update_Datenlisten_PC
        If ThisWorkbook.Path <> "" Then
            Range("T2") = user
            If Range("T1") = "" Then MsgBox "Bitte bei `Date receipt' Datum zur Warenr|fffd|cklieferung eintragen.", vbInformation, "Datum Retoure"
            ActiveSheet.PageSetup.CenterFooter = ThisWorkbook.Path & "\" & ThisWorkbook.Name
        End If
        On Error Resume Next
        ThisWorkbook.VBProject.References.AddFromGuid GUID:="{5EA428A0-F2B8-45E7-99FA-0E994E82B5BC}", Major:=1, minor:=0
        On Error GoTo 0
    Else
        'alle anderen Toge / VG Benutzer
        ActiveSheet.Cells(1, 1) = Pfadliste & "Daten\"
        Update_Datenlisten_PC
        
    End If

Else 'kein Zugriff auf Trumpf Netzwerk vorhanden
    
    Pfadliste = Registry_Read("HKEY_CURRENT_USER\UserInfo\UserPfadReturnlist")
    If Len(Pfadliste) > 0 Then
        If Right(Pfadliste, 1) <> "\" Then Pfadliste = Left(Pfadliste, Len(Pfadliste) - 1)
        If Len(Pfadliste) > 6 Then ActiveSheet.Cells(1, 1) = Pfadliste & "Daten\"
    End If
    Pruefung_Datenlisten
    
End If
End Sub
Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)
    Reset_Kontext
End Sub


Attribute VB_Name = "Kontextmenue"
Sub Kontext_Add(Name As String, Makro As String, Bild)
    Dim Ctrl As CommandBarButton
    With CommandBars("Cell")
        If Left(.Controls.Item(1).Caption, 3) = "Aus" Then
            While .Controls.Count > 0
             On Error Resume Next
             .Controls(1).Delete
            Wend
        End If
        Set Ctrl = .Controls.Add(msoControlButton)
        With Ctrl
            .Caption = Name
            .OnAction = Makro
            .Picture = Bildablage.Controls(Bild).Picture
        End With
    End With
End Sub
Sub M_Maske()
    If Cells(5, 1) <> "" Then Position.Show vbModeless
End Sub
Sub M_Listcheck()
    If Cells(5, 1) <> "" Then Listcheck.Show vbModeless
End Sub
Sub M_landmatrix()
    Set WshShell = CreateObject("WScript.Shell")
    WshShell.Run "http://topics-intern01.corp.trumpf.com/sites/prozessmanagement-tws/Lists/TWS%20ExportMatrix/AllItems.aspx?InitialTabId=Ribbon.ListItem&VisibilityContext=WSSTabPersistence"
End Sub
Sub M_lagerpool()
    Lageraufloesung.Show
End Sub
Sub M_Update()
    Send_listen
End Sub
Sub M_Zolllist()
    TWS_Customslist_create
    TWS_Customslist_Datacopy
End Sub
Sub M_Listimport()
    list_import
End Sub
Sub Format_Returncheck()
    ClearRange ActiveCell.Row, ActiveCell.Row, ActiveCell.Column
End Sub
Sub Reset_Kontext()
     CommandBars("Cell").Reset 'erstellt wieder das Standardkontextmen|fffd|
End Sub
Sub Maschinenlebenslauf()
    Set WshShell = CreateObject("WScript.Shell")
    Maschine = Cells(ActiveCell.Row, ActiveCell.Column)
    WshShell.Run "http://sis01.corp.trumpf.com/SISMain/CreateReport.aspx?cmd=ShowMachineReport&lang=de-DE&id=" & Maschine
End Sub
Sub MaschinenInfo()
    Set WshShell = CreateObject("WScript.Shell")
    Maschine = Cells(ActiveCell.Row, ActiveCell.Column)
    WshShell.Run "http://sis01.corp.trumpf.com/sismain/default.aspx?cmd=showmachine&key=" & Maschine
End Sub
Sub Fallnummer()
    Set WshShell = CreateObject("WScript.Shell")
    Fallnr = Cells(ActiveCell.Row, ActiveCell.Column)
    WshShell.Run "http://sis01.corp.trumpf.com/sismain/CreateReport.aspx?cmd=ShowErrorReport&id=" & Fallnr & "&lang=1031"
End Sub
Sub GoogleSearch()
    Frage = InputBox("was soll ich suchen?", "Internetsuche google")
    Set objIE = CreateObject("InternetExplorer.Application")
    WebSite = "www.google.com"
    With objIE
        .Visible = True
        .navigate WebSite
        Do While .Busy Or .readystate <> 4
            DoEvents
        Loop

        Set Element = .document.getElementsByName("q")
        Element.Item(0).Value = Frage
        .document.forms(0).submit
        '.Quit
        End With

End Sub
Function GoogleSearch1(strSearchTerm As String) As String
   Dim ie As Object
   Dim sHTML As String

   On Error GoTo ZERR
   Set ie = CreateObject("InternetExplorer.Application")

   With ie
       .Visible = False
       .navigate ("http://www.google.com/search?q=" & strSearchTerm)
       Do Until .readystate = 4
           DoEvents
       Loop
       sHTML = .document.Body.innerHTML
   End With
   Set ie = Nothing
GoogleSearch1 = sHTML
ZERR:
   Set ie = Nothing
End Function

Attribute VB_Name = "Lageraufloesung"
Attribute VB_Base = "0{0730AE79-B4BA-45A7-B7C5-7D95660D24DB}{4F29B32D-AFFC-460F-99CA-A672B8A8DD8A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub OptionButton1_Click()
     Range("P3") = ""
     Me.Hide
End Sub
Private Sub OptionButton2_Click()
     Range("P3") = "Lageraufloesung 80%"
     Me.Hide
End Sub
Private Sub OptionButton3_Click()
     Range("P3") = "Lageraufloesung 60%"
     Me.Hide
End Sub
Attribute VB_Name = "Listcheck"
Attribute VB_Base = "0{DF773A92-3AFE-4CD9-904C-DBF7C22FD0D0}{4E66BCB0-AA95-4AE0-9D89-189CE2217349}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_MAT_02_Click()
    If CB_MAT_02 = False Then
        TextBox30.Visible = False
        Label10.Visible = False
        CommandButton2.Enabled = True
    Else
        TextBox30.Visible = True
        Label10.Visible = True
        If Len(TextBox30) = 4 Then CommandButton2.Enabled = True Else CommandButton2.Enabled = False
    End If
End Sub
Private Sub CommandButton2_Click()
    checklist
End Sub
Private Sub Fpos_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then Fpos.Value = ""
End Sub
Private Sub Lpos_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then Lpos.Value = ""
End Sub
Private Sub Fpos_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Fpos = "" Then Fpos = Cells(5, 1)
End Sub
Private Sub Lpos_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Lpos = "" Then Lpos = Cells(Cells(Rows.Count, 1).End(xlUp).Row, 1)
End Sub
Private Sub TextBox30_Change()
    If Len(TextBox30) = 4 Then CommandButton2.Enabled = True Else CommandButton2.Enabled = False
End Sub
Private Sub UserForm_Initialize()
    Fpos = Cells(5, 1)
    Lpos = Cells(Cells(Rows.Count, 1).End(xlUp).Row, 1)
End Sub
Attribute VB_Name = "Multipos"
Attribute VB_Base = "0{14C488DB-9709-4708-A26B-4010190D2BD5}{FCB84F7F-5613-42C6-99CF-2C3A926E631F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    Multi_QM "E"
    Unload Me
End Sub
Private Sub CommandButton2_Click()
    Multi_QM "V"
    Unload Me
End Sub
Sub Multi_QM(VE As String)
    Me.Hide
    With ListBox1
        Anzahllist = .ListCount
        For i = 1 To Anzahllist
            If .Selected(i - 1) = True Then
                Position.Spalte1 = Cells(.List(i - 1, 5), 1)
                Position.loadform
                Meldung_anlegen "QM02", Position.CBSAP0, VE
            End If
        Next i
    End With
End Sub
Private Sub UserForm_Initialize()
    Me.Left = Position.Left + 760
    Me.Top = Position.Top
    lastx = Cells(Rows.Count, 1).End(xlUp).Row
    For i = 5 To lastx
        With ListBox1
            .AddItem
            .List(.ListCount - 1, 0) = Cells(i, 1)
            .List(.ListCount - 1, 1) = Format(Cells(i, 2), "0000000")
            .List(.ListCount - 1, 2) = Cells(i, 3)
            .List(.ListCount - 1, 3) = Cells(i, 4)
            .List(.ListCount - 1, 4) = Format(Cells(i, 10), "00")
            .List(.ListCount - 1, 5) = i
            .List(.ListCount - 1, 6) = Cells(i, 5)
        End With
    Next i
End Sub

Attribute VB_Name = "NewUnit"
Attribute VB_Base = "0{4AC14A98-4D9D-4B16-9807-C2E9A78EFE90}{4DAA11A1-FAE8-40EF-8EB8-52712CE470F7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Change()
If ComboBox1 <> "" Then Readtemplate1
End Sub

Private Sub CommandButton1_Click()
For i = 1 To 5
    If NewUnit.Controls("text_" & i) = "" Then
        Frame1.ForeColor = &HFF&
        Frame1.Caption = "Measurements (not complete)"
        Exit Sub
    End If
Next i

lZeile = Cells(Rows.Count, 1).End(xlUp).Row
If Cells(lZeile, 1) = "Packing:" Then
    lZeile = lZeile
Else
    Cells(lZeile + 1, 1) = "Packing:"
End If
If Cells(lZeile + 3, 2) = "" Then lZeile = lZeile + 3 Else lZeile = Cells(Rows.Count, 2).End(xlUp).Row + 1

Cells(lZeile, 2) = Cells(1, 2)
Cells(lZeile, 3) = text_1 & "               " & text_5
Cells(lZeile, 4) = text_2 & " x " & text_3 & " x " & text_4 & " cm"
Cells(lZeile, 4).HorizontalAlignment = xlCenter
Cells(lZeile, 5) = text_5 & " KG"

ActiveSheet.cmdAction0.Visible = True
If CheckBox1 = True Then Temp = "Unit": Writetemplate Temp
Unload Me
End Sub
Private Sub UserForm_Initialize()
Pfad = "C:\Trumpf\Returnlist\Templates\"


sName = Dir(Pfad & "Unit_*.txt")
Do While sName > ""
    ComboBox1.AddItem sName
    sName = Dir
Loop

With NewUnit.text_1
    .AddItem "Case"
    .AddItem "Carton"
    .AddItem "Pallet"
    .AddItem "Sea crate"
End With
End Sub

Attribute VB_Name = "Position"
Attribute VB_Base = "0{67C25620-380C-40A6-BE19-6C0B41EB8E10}{651A496D-05E3-4C24-A2DC-1F5277ABCFA9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function MoveWindow Lib "user32.dll" (ByVal hwnd As Long, ByVal X As Long, ByVal Y As Long, _
ByVal nWidth As Long, ByVal nHeight As Long, ByVal bRepaint As Long) As Long
Private Sub CommandButton1_Click()
    Show_picture Spalte2
End Sub
Private Sub Autosave_Click()
    If Autosave = True Then format_comment 1, 1, "Autosave", False Else Cells(1, 1).Comment.Delete
End Sub
Private Sub CommandButton2_Click()
    Spalte1 = Cells(Cells.Find(TXT_Search, Range("" & lastfind)).Row, 1)
    lastfind = Cells.Find(TXT_Search, Range("" & lastfind)).Address(False, False)
    loadform
End Sub
Private Sub CommandButton7_Click()
    Multipos.Show vbModeless
End Sub
Private Sub CommandButton8_Click()
    If IsNumeric(Spalte17) Then QMeldung_aendern CBSAP0
End Sub
Private Sub CommandButton9_Click()
    With Kurztxt
        If Left(.Value, 4) = "Auto" Then .Value = ""
        .Enabled = True
        .SetFocus
    End With
End Sub
Private Sub Image1_Click()
    Show_picture Spalte2
End Sub

Private Sub PosAuf_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then PosAuf.Value = ""
End Sub
Private Sub Posback_Click()
    If IsNumeric(Posback.ControlTipText) Then Spalte1 = Posback.ControlTipText
    loadform
End Sub
Private Sub Posnext_Click()
    If IsNumeric(Posnext.ControlTipText) Then Spalte1 = Posnext.ControlTipText
    loadform
End Sub
Private Sub Spalte1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then loadform
End Sub
Private Sub Spalte1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then Spalte1.Value = ""
End Sub
Private Sub Spalte5_Change()
    Sheets(1).Cells(zeiletabelle, 5) = Format(Spalte5, 0)
End Sub
Private Sub Spalte6_Change()
    Sheets(1).Cells(zeiletabelle, 6) = Format(Spalte6, 0)
End Sub
Private Sub Spalte7_Change()
    Spalte7 = Format(Spalte7, "##,##0.00" & " |fffd|")
End Sub
Private Sub Spalte13_Change()
    Sheets(1).Cells(zeiletabelle, 13) = Spalte13
End Sub
Private Sub Spalte17_Change()
    Sheets(1).Cells(zeiletabelle, 17) = Spalte17
    If Len(Spalte17) > 14 Then Sheets(1).Cells(zeiletabelle, 17).Rows.AutoFit
End Sub
Private Sub Spalte18_Change()
    Sheets(1).Cells(zeiletabelle, 18) = Spalte18
End Sub
Private Sub Spalte19_Change()
    Sheets(1).Cells(zeiletabelle, 19) = Format(Spalte19, 0)
End Sub
Private Sub Spalte20_Change()
    Sheets(1).Cells(zeiletabelle, 20) = Spalte20
End Sub

Private Sub TBT1_Click()
    Kurztxt = beschreibung
End Sub
Private Sub TBT2_Click()
    Kurztxt = beschreibung
End Sub
Private Sub TBT3_Click()
    Kurztxt = beschreibung
End Sub
Private Sub TXT_Search_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then
        On Error GoTo error
        Spalte1 = Cells(Cells.Find(TXT_Search).Row, 1)
        lastfind = Cells.Find(TXT_Search).Address(False, False)
        loadform
        CommandButton2.Enabled = True
    End If
    Exit Sub
error:
    MsgBox "Keine Daten gefunden", vbCritical, "Fehler Suchtext"
    Range("A5").Select
End Sub
Private Sub TXT_Search_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then
        TXT_Search.Value = ""
        lastfind = ""
        CommandButton2.Enabled = False
    End If
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Cells(1, 1).Comment.Delete
End Sub
Private Sub VE_Einlagerung_Click()
    Meldung_anlegen "QM02", CBSAP0, "E"
End Sub
Private Sub VE_Pruefung_Click()
    Meldung_anlegen "QM02", CBSAP0, "P"
End Sub
Private Sub VE_Verschrottung_Click()
    Meldung_anlegen "QM02", CBSAP0, "V"
End Sub
Private Sub UserForm_Activate()
    Dim lngWidth As Long, lngHeight As Long, llngHwnd As Long
    llngHwnd = FindWindow("ThunderDFrame", Me.Caption)
    With Cells(6, 1)
        lngWidth = ActiveWindow.PointsToScreenPixelsX((.Left + .Width) / 0.75)
        lngHeight = ActiveWindow.PointsToScreenPixelsY(.Top / 0.75)
    End With
    Call MoveWindow(llngHwnd, lngWidth + 15, lngHeight + 220, Me.Width / 0.75, Me.Height / 0.75, 1)
End Sub
Private Sub UserForm_Initialize()
    Spalte1 = Cells(5, 1)
    Me.Caption = "Daten zur Position " & "(" & Spalte1 & " bis " & Cells(Cells(Rows.Count, 1).End(xlUp).Row, 1) & ")"
    
    For i = 1 To 19
        Position.Spalte18.AddItem Choose(i, "100%", "100% abzgl.|fffd|PK", "100% abzgl.|fffd|PK 178|fffd|", "100% abzgl.|fffd|PK 200|fffd|", "80%", "80% abzgl.|fffd|PK", "" & _
        "75%", "60%", "60% abzgl.|fffd|PK", "50%", "25%", "20%", "RGS 500|fffd| KD / 300|fffd| TG", "RGS 500|fffd|/Stk.", "RGS 300|fffd|/Stk.", "RGS 32|fffd|/Stk.", "no credit note", "KLA", "unter 25|fffd|")
    Next i
    loadform
End Sub

Sub loadform()
    If Autosave = True Then ActiveWorkbook.Save
    
    Set suche = ActiveSheet.Cells.Columns(1).Find(Spalte1)
    If Not suche Is Nothing Then
        zeiletabelle = suche.Row
        Posback.ControlTipText = Cells(zeiletabelle - 1, 1)
        Posnext.ControlTipText = Cells(zeiletabelle + 1, 1)
        For i = 1 To 20
            Position.Controls("Spalte" & i) = Sheets(1).Cells(zeiletabelle, i)
        Next i
        
        Auftragscheck 'Pr|fffd|fung ob Auftrag vorhanden und Eintscheidungsbuttons freischalten
        PosAuf = Auftragspos 'Position zum Auftrag aus Kommentar f|fffd|llen
        Kurztxt = beschreibung 'Text f|fffd|r Beschreibungsfeld

    Else
        Exit Sub
    End If
    
    'Bild laden
    Bild = Format(Spalte2, "0000000") & ".jpg"
    If Dir(PfadBilderSIS & Bild) <> "" Then
        Image1.Picture = LoadPicture(PfadBilderSIS & Bild)
    Else
        Image1.Picture = LoadPicture("")
    End If

    On Error Resume Next
    POPUPKND = "": POPUPLF = ""
    If RFC_Open = True Then
        POPUPMAT = Read_SO10TEXT("110_" & Format(Spalte2, "0000000"))
        TXT_GA = Read_Table("MARA", "MATNR EQ '" & Format(Spalte2, "000000000000000000") & "'", "GROES")
        RFC_Close
    End If
    
    'Tabellezeile an Datensatz anpassen
    Application.GoTo ActiveSheet.Range("A" & zeiletabelle), True
    If TB_Meldung = True And IsNumeric(Spalte17) Then QMeldung_aendern CBSAP0
End Sub
Function beschreibung() As String
    Dim textstrg As String
    With Position
        If .TBT1 = True Then textstrg = textstrg & Cells(zeiletabelle, 11): t = "_"
        If .TBT2 = True Then textstrg = textstrg & t & Cells(1, 4): t = "_"
        If .TBT3 = True Then textstrg = textstrg & t & "pos-" & Cells(zeiletabelle, 1)

        Select Case Len(textstrg)
            Case 0
            .Kurztxt.Enabled = False
            beschreibung = "Automatischer Beschreibungstext Meldung"
        
            Case Is > 36
            MsgBox "Beschreibungstext ist l|fffd|nger als 36 Zeichen." & Chr(10) & _
            "Bitte die Textl|fffd|nge der Felder Listennr,Report Subsidairy k|fffd|rzen", vbInformation, "Beschreibungstext zu lang"
            .TBT1 = False: .TBT2 = False: .TBT3 = False: .Kurztxt.Enabled = False
            beschreibung = "Automatischer Beschreibungstext Meldung"
            
            Case Else
            Kurztxt.Enabled = True
            beschreibung = textstrg
    
        End Select
    End With
End Function
Sub Auftragscheck()
    Dim wert As Boolean
    If Spalte5 = "" Then wert = False Else wert = True
    VE_Einlagerung.Enabled = wert
    VE_Pruefung.Enabled = wert
    VE_Verschrottung.Enabled = wert
    If wert = True And Spalte10 > 5 Then VE_Einlagerung.Enabled = False
End Sub
Function Auftragspos()
    On Error GoTo nocomment
    strg = Cells(zeiletabelle, 5).Comment.Text
    If Left(strg, 12) = "Auftragspos:" Then
        POSNR = CLng(Mid(strg, 13, Len(strg)))
    End If
nocomment:
    Auftragspos = POSNR
End Function

Attribute VB_Name = "RFC"
Public functionCtrl As Object
Public sapConnection As Object
Public Declare Function GetTickCount Lib "kernel32" () As Long

Public Function RFC_Open() As Boolean '   stellt die Verbindung zum SAP-System her
    Set functionCtrl = CreateObject("SAP.Functions")
    Set sapConnection = functionCtrl.Connection

    With sapConnection
        .MessageServer = "sapr3prod.corp.trumpf.com"
        .GroupName = "SAP-Produktiv"
        .ApplicationServer = "10.251.118.125"
        .CLIENT = "001"
        .System = "C11"
        .user = "RFC_MERBITZ"
        .Password = Bildablage.txt_RFC
        .Language = "DE"
        .UseSAPLogonIni = False
    End With
   
    If sapConnection.Logon(0, True) Then
        functionCtrl.Connection = sapConnection
        RFC_Open = True
    Else
        RFC_Open = False
    End If
    
End Function
Public Sub RFC_Close()
    On Error Resume Next
    functionCtrl.Connection.Logoff
    Set functionCtrl = Nothing
    Set sapConnection = Nothing
End Sub
Public Function Read_SO10TEXT(Textstring As String) As String
Dim objList As Object

Set objList = functionCtrl.Add("RFC_READ_TEXT")
Set Newrow = objList.Tables("TEXT_LINES")

Newrow.AppendRow
Newrow(1, "TDOBJECT") = "TEXT"
Newrow(1, "TDNAME") = Textstring
Newrow(1, "TDID") = "ZQSW"
Newrow(1, "TDSPRAS") = "DE"
If objList.Call = True Then
    For i = 1 To Newrow.RowCount
        Text = Text & Newrow(i, "TDLINE") & vbLf
    Next
    Newrow.Rows.RemoveAll
    Read_SO10TEXT = Text
End If
End Function
Public Function Read_Table(TABLE As String, FieldOPT As String, FieldOUT As String)
    
    Dim objRfcFunc As Object
    Dim objOptTab As Object
    Dim objFldTab As Object
    Dim objDatTab As Object
    
    Set objRfcFunc = functionCtrl.Add("RFC_READ_TABLE")
    Set objQueryTab = objRfcFunc.Exports("QUERY_TABLE")
    Set objOptTab = objRfcFunc.Tables("OPTIONS")
    Set objFldTab = objRfcFunc.Tables("FIELDS")
    Set objDatTab = objRfcFunc.Tables("DATA")
    
    objQueryTab.Value = TABLE   'TABLE
    objOptTab.FreeTable: objOptTab.Rows.Add: objOptTab(1, "TEXT") = FieldOPT
    objFldTab.FreeTable: objFldTab.Rows.Add: objFldTab(1, "FIELDNAME") = FieldOUT
    If objRfcFunc.Call = True Then
        Read_Table = objDatTab(1, "WA")
        objDatTab.Rows.RemoveAll
    End If
End Function
Sub RFCchecklist()
    Dim iStart As Long
    iStart = GetTickCount
    
    If RFC_Open = False Then Exit Sub
    lastx = Cells(Rows.Count, 2).End(xlUp).Row
    For i = 5 To lastx
        IDNR = Format(Cells(i, 2), "000000000000000000")
        
        '*****Pr|fffd|fung Lagerhaltigkeit Materialstamm*****
        If Read_Table("MVKE", "MATNR EQ '" & IDNR & "' And VKORG EQ '1102' And VTWEG EQ '01'", "MTPOS") <> "NORM" Then
            format_comment i, 16, "MAT - nicht Lagerhaltig", True
        End If
        
        '*****Pr|fffd|fung R|fffd|ckholung QS Materialstamm*****
        If Read_Table("MARA", "MATNR EQ '" & IDNR & "'", "ZZRRQS") = "X" Then
            format_comment i, 16, "MAT - QS-Untersuchung", True
        End If
        
        '*****Pr|fffd|fung Serialpflicht Materialstamm*****
        If Left(Read_Table("MARC", "MATNR EQ '" & IDNR & "' And WERKS EQ '1103'", "SERNP"), 3) = "ZWM" Then
            format_comment i, 13, "Serialpflichtig", False
        End If
        
        '*****Pr|fffd|fung Stardardpreis Materialstamm*****
        STDPREIS = Trim(Read_Table("MBEW", "MATNR EQ '" & IDNR & "' And BWKEY EQ '1103'", "STPRS"))
        If STDPREIS <> "" Then
            If CDec(WorksheetFunction.Substitute(STDPREIS, ".", ",")) < 637 Then format_comment i, 16, "MAT- Standardpreis:" & STDPREIS & " |fffd| unter Wertgrenze", True
        End If
        
    Next
    RFC_Close
    
    MsgBox "Laufzeit: " & (GetTickCount - iStart) / 1000 & " Sekunden"
End Sub
Attribute VB_Name = "Returnlist"
Public Const OrgPfadlisten As String = "\\srvditz1\logistic\xChange\Retouren_Ausland\Information\Daten\"
Public Const KopPfadlisten As String = "C:\Trumpf\Returnlist\Daten\"
Public Const PfadBilderSIS As String = "\\srvditz1\tksupport\twe\"
Public Const PfadMAT As String = "\\srvditz1\DataXchange_R3\TWS_EXCHANGE\TWS_Retouren\"
Public Const PfadEQI As String = "\\srvditz1\DataXchange_R3\TWS_EXCHANGE\EQUISTAMM.txt"
Public Const PfadRFC = "\\srvditz1\logistic\GemeinsameAblage\05_Retouren\01_Infos_Dokumente_Vorlagen\01_Abwicklung-Retouren\07_Textbausteine\"
Public Const Matrix As String = "\\srvditz1\logistic\xChange\LZSI-AZET\14_TWS_Matrix\TWS_Matrix_v2.xlsm"
Public Const PermitUser As String = "TWS815,TH408,TLS917,TWS811"
Public Const RFCUser As String = "TWS815"
Sub Creditnoteliste()
    Dim wkbk As Workbook
    Dim gr, u
    strgpfad = Sheets(1).Cells(1, 1): If strgpfad = "" Then Exit Sub
    strFileName = strgpfad & "Material.xlsb"
    
    For i = 1 To 5
        If i = 1 Then Workbooks.Add Else Sheets.Add After:=Worksheets(Worksheets.Count)
        With Sheets(i)
            .Name = Choose(i, "Xchange_4_Years", "Xchange_6_Years", "Xchange_10_Years", "Special_Regulation", "Customs_made")
            For u = 1 To 5
                .Cells(1, u) = Choose(u, "Material no.", "Beschreibung", "Description", "Credit note rule", "Date: " & Date)
            Next u
            .Columns(1).NumberFormat = "0000000"
            .Columns(2).NumberFormat = "0000000"
            .Columns(2).ColumnWidth = 50#
            .Columns(3).ColumnWidth = 50#
            .Columns(4).ColumnWidth = 16#
            .Columns(5).ColumnWidth = 15#
            .Activate
        End With
        Range("a2").Select
        ActiveWindow.FreezePanes = True
        With Sheets(i).Range("A1:D1")
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .Interior.ColorIndex = 15
        End With
    Next i
    Sheets(1).Activate
    
    Set wkbk = GetObject(strFileName)
    For z = 1 To wkbk.Sheets(1).Cells(Rows.Count, 1).End(xlUp).Row
        gr = wkbk.Sheets(1).Cells(z, 8)
        Select Case gr
                Case "0", "1"
                    m = gr + 1
                Case "6"
                    m = 3
                Case "2", "3"
                    m = gr + 2
                Case Else
                    m = 0
            End Select
            If m > 0 Then
                last = Sheets(m).Cells(Rows.Count, 1).End(xlUp).Row + 1
                For i = 1 To 3
                        Sheets(m).Cells(last, i) = wkbk.Sheets(1).Cells(z, i)
                        Sheets(m).Cells(last, 4) = Sheets(m).Name
                Next i
            End If
    Next z
    wkbk.Close SaveChanges:=False
End Sub
Sub setcode(X)
    Cells(X, 10).NumberFormat = "00"
    With Cells(X, 10).Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="01,02,03,04,05,06,11,12,13,14,15,16,17,18,21,29"
        .IgnoreBlank = True
        .InCellDropdown = True
        .ErrorTitle = "Wrong Code"
        .ErrorMessage = _
        "The value entered is invalid." & Chr(10) & "" & Chr(10) & "You will find information about the " & Chr(10) & "returns reasons as a commentary " & Chr(10) & "in the column head."
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Sub Zellemarkieren(ByVal irow As Long, ByVal Y As Long, linestyle, linedicke, farbe As Long)
    For i = 7 To 10
        With Cells(irow, Y)
            .Borders(i).linestyle = linestyle
            .Borders(i).Weight = linedicke
            .Borders(i).ColorIndex = farbe
        End With
    Next i
End Sub

Sub format_comment(X, Y, Ctxt As String, plus As Boolean)
    Application.ScreenUpdating = False
    Dim cmt As Comment
    If Cells(X, Y).Comment Is Nothing Then
        Set cmt = Cells(X, Y).AddComment
    Else
        Set cmt = Cells(X, Y).Comment
    End If
    With cmt
        If plus = True And Len(Cells(X, Y).Comment.Text) > 0 Then
            .Text Text:=Cells(X, Y).Comment.Text & vbCrLf & Ctxt
        Else
            .Text Text:=Ctxt
        End If
        .Shape.TextFrame.AutoSize = True
        .Shape.TextFrame.Characters.Font.Size = 10
        .Visible = False
    End With
    Application.ScreenUpdating = True
End Sub
Function GSREGEL(code As String)
    If Len(code) > 0 Then
        Select Case code
            Case Is = 0, 1, 2, 3, 5, 6
            GSREGEL = Choose(CInt(code) + 1, "Xchange 4_years", "Xchange 6_years", "Special Regulation", "Custom made", "", "no Xchange part", "Xchange 10_years")
        End Select
    Else
        GSREGEL = ""
    End If
End Function
Sub ClearRange(x1, x2, Y)
    With Range(Cells(x1, Y), Cells(x2, Y))
        For i = 7 To 12
            .Borders(i).linestyle = xlNone
        Next
        .ClearComments
    End With
End Sub
Sub Updatebalken_load(Balkentext)
    updatebalken.PW_Text.Caption = Balkentext
    Load updatebalken
    updatebalken.Show vbModeless
    DoEvents
End Sub
Sub Updatebalken_refresh(teiler, skip)
    Dim zs
    updatebalken.PW_Balken.Width = (210 / teiler) * skip
    DoEvents
    If updatebalken.PW_Balken.Width = 210 Then
        Application.Wait (Now + TimeValue("0:00:01"))
        Unload updatebalken
    End If
End Sub
Sub checklistenpos(irow)
Application.ScreenUpdating = False
Dim i
Dim Mdate As Date

If Cells(irow, 2) = "" Then Exit Sub


With Range(Cells(irow, 1), Cells(irow, 20))
    For i = 1 To 12
        .Borders(i).linestyle = xlNone
    Next i
    .Interior.ColorIndex = xlNone
End With
Cells(irow, 20).ClearComments
Range(Cells(irow, 7), Cells(irow, 10)).Font.ColorIndex = 0

If irow Mod 2 = 0 Then Range(Cells(irow, 1), Cells(irow, 20)).Interior.ColorIndex = 15
If Cells(irow, 7) = 0 Then Cells(irow, 7).Font.ColorIndex = 3 'preischeck


Select Case Format(Cells(irow, 10), "00")

    Case Is = "01", "02", "03", "04", "05" ' Nicht ben|fffd|tigte Teile (01-05) kleiner 25|fffd|
    If (Cells(irow, 4) * Cells(irow, 7)) < 25 Then
        Cells(irow, 16) = "NO"
        'Listenpreis ist kleiner 25|fffd|
        format_comment irow, 16, "List price is less then 25|fffd|", False
    Else
        Cells(irow, 16) = "yes"
    End If
    custommade irow
                
    Case Is = "13" 'Teile (13) ohne Gutschriftsregel
    If (Cells(irow, 4) * Cells(irow, 7)) > 149.99 Then Cells(irow, 16) = "yes"
    If Cells(irow, 15) = "" Then
        Cells(irow, 16) = "NO"
        'Teil obliegt keiner Restgutschriftsregel
        format_comment irow, 16, "Part does not come under credit note rule", False
        If Cells(irow, 7) > 10000 Then
            Cells(irow, 16) = "check"
            'R|fffd|cksendung wird vorab durch die Retourenabteilung gepr|fffd|ft und entschieden
            format_comment irow, 16, "Approval to return parts, must be aquired, prior to returning then.", False
        End If
    End If
    noxchange irow
    custommade irow
                
    Case Is = "06", "11", "12", "14", "15", "16", "17", "18", "21" 'Teile (06-17) gr|fffd|sser 150|fffd|
    If (Cells(irow, 4) * Cells(irow, 7)) > 149.99 Then
        Cells(irow, 16) = "yes"
    Else
        Cells(irow, 16) = "NO"
        'Listenpreis ist kleiner 150|fffd|
        format_comment irow, 16, "List price is less then 150|fffd|", False
    End If
    If Format(Cells(irow, 10), "00") = "06" Then
        custommade irow
    Else
        noxchange irow
    End If
    If Cells(irow, 10) = "16" Then
        Mdate = Cells(irow, 9)
        If Mdate < Date And Cells(irow, 8) <> "" Then Cells(irow, 9).Font.ColorIndex = 3
        If Cells(irow, 8) = "" Then
            Zellemarkieren irow, 8, xlContinuous, xlThick, 3
            Cells(irow, 16) = "incomplete"
        End If
    End If
                
    Case Is = "29"
    Cells(irow, 16) = "NO"
    custommade irow
            
    Case Is = ""
    Cells(irow, 16) = "incomplete"
    Zellemarkieren irow, 10, xlContinuous, xlThick, 3
End Select

Select Case Left(Format(Cells(irow, 10), "00"), 1)
    Case "1", "2": checkz = Split("4,5,8,12", ",")
    Case Else: checkz = Split("4,5", ",")
End Select
For i = 0 To UBound(checkz)
    If Cells(irow, CInt(checkz(i))) = "" Then
        Cells(irow, 16) = "incomplete"
        Zellemarkieren irow, CInt(checkz(i)), xlContinuous, xlThick, 3
    End If
Next i


Select Case Cells(irow, 16)
    Case "NO"
    Cells(irow, 16).Font.ColorIndex = 3
    Cells(irow, 16).Font.Bold = True
    
    Case "yes"
    Cells(irow, 16).Font.ColorIndex = 1
    Cells(irow, 16).Font.Bold = False
    Cells(irow, 16).ClearComments
    
    Case "incomplete"
    Cells(irow, 16).Font.ColorIndex = 3
    Cells(irow, 16).Font.Bold = False
End Select


'Zellschutz f|fffd|r R|fffd|cksendeerlaubnis
With Cells(irow, 16).Validation
    .Delete
    .Add xlValidateCustom, xlValidAlertStop, xlBetween, "=Or(Left(S2,3) = ""TWS"",Left(T2,3) = ""TWS"")"
    .IgnoreBlank = False
End With
'G|fffd|ltigkeitspr|fffd|fung f|fffd|r Auftragsnummer
With Cells(irow, 5).Validation
    .Delete
    .Add xlValidateWholeNumber, xlValidAlertStop, xlBetween, "30000000", "45000000"
    .IgnoreBlank = False
End With

'G|fffd|ltigkeitspr|fffd|fung f|fffd|r Rechnungsfeld
With Cells(irow, 6).Validation
    .Delete
    .Add xlValidateWholeNumber, xlValidAlertStop, xlBetween, "40000000", "200000000"
    .IgnoreBlank = False
End With
'G|fffd|ltigkeitspr|fffd|fung f|fffd|r St|fffd|ckzahl
With Cells(irow, 4).Validation
    .Delete
    .Add xlValidateWholeNumber, xlValidAlertStop, xlBetween, "1", "99999999"
    .IgnoreBlank = False
End With

Application.ScreenUpdating = True
End Sub
Sub custommade(irow)
    If Cells(irow, 15) = "Custom made" Then
        Cells(irow, 16) = "no"
        Cells(irow, 16).ClearComments
        format_comment irow, 16, "Part is specially produced for your order no." & Chr(10) & _
        "Cancellation or return of the part is not possible.", False
    End If
End Sub
Sub noxchange(irow)
    If Cells(irow, 15) = "no Xchange part" Then
        Cells(irow, 16) = "no"
        Cells(irow, 16).ClearComments
        format_comment irow, 16, "Part does not come under any Xchange credit note rule" & Chr(10) & _
        "Return of the part is not necessary.", False
    End If
End Sub

Attribute VB_Name = "SAP"
Public Session As SAPFEWSELib.GuiSession
Function SAP_LOGON(Optional Modus As String, Optional WND0 As Boolean, Optional SAPSYSTEM As String = "01") As Boolean
    Dim GUIapp As SAPFEWSELib.guiapplication
    Dim GUIcon As SAPFEWSELib.GuiConnection
    Dim SAPNAME(1 To 3) As String
    Dim bWindowFound As Boolean
    Dim t As Double
    Dim i As Integer
    
    SAPNAME(1) = "01. R/3 Produktiv / Production System" '01=C11
    SAPNAME(2) = "02. R/3 Test / Quality Assurance System" '02=KON
    SAPNAME(3) = "03. R/3 Entwicklungs / Development System" '03=ENT
    
    On Error Resume Next
SC: Set GUIapp = GetObject("SAPGUI").GetScriptingEngine 'Set connection
    '*****Pr|fffd|fung ob SAP Logonpad ge|fffd|ffnet ist*****
    If ERR.Number <> 0 Then
        Set WShell = CreateObject("WScript.Shell")
        WShell.Run """C:\Programme\SAP\FrontEnd\SAPgui\saplgpad.exe""" 'Deutscher Pfad von SAP Logon
        WShell.Run """C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplgpad.exe""" 'Englischer Pfad von SAP Logon
        WShell.AppActivate "SAP Logon"
        
        'Warten bis "SAP Logon" ge|fffd|ffnet ist
        Do Until bWindowFound
            bWindowFound = WShell.AppActivate("SAP Logon Pad")
            t = Timer    ' Anfangszeit setzen.
            Do While Timer < t + 1
            Loop
        Loop
        
        ERR.clear: GoTo SC
    End If

    '*****gew|fffd|nschte Verbindung setzten*****
    For Each GUIcon In GUIapp.Connections
        If Left(GUIcon.Description, 2) = SAPSYSTEM Then
            If WND0 = True Then
                Set Session = GUIcon.Sessions(0)
            Else
                'Leeren oder Optional Modus suchen
                For Each Session In GUIcon.Sessions
                    Select Case Session.Info.Transaction
                        Case "SESSION_MANAGER", Modus
                        Set Session = GUIcon.Sessions(i)
                        Exit For
                    End Select
                i = i + 1
                Next
                'Neuen Modus |fffd|ffen wenn kein leerer Modus vorhanden
                If i = GUIcon.Sessions.Count Then
                    GUIcon.Children(0).createSession
                    t = Timer
                    Do While i = GUIcon.Sessions.Count 'Warten bis neuer Modus aktiv
                        If Timer - t > 5 Then 'Falls Modus nicht innerhalb 5 s erzeugt wird
                            MsgBox "Es konnte kein neuer SAP-Modus erzeugt werden." & vbNewLine & _
                            "Bitte SAP Scripting Berechtigung pr|fffd|fen.", vbCritical, "Fehler SAP Logon"
                            Exit Function
                        End If
                    Loop
                    Set Session = GUIcon.Children(CLng(i))
                End If
            End If
            SAP_LOGON = True
        End If
    Next
    
    '*****Neue Verbindung |fffd|ffen*****
    If SAP_LOGON = False Then
        If MsgBox(SAPNAME(CInt(SAPSYSTEM)) & " ist nicht verbunden." & vbLf & "Wollen Sie sich anmelden?", vbInformation + vbYesNo, "SAP-Anmeldung") = vbYes Then
            Set GUIcon = GUIapp.OpenConnection(SAPNAME(CInt(SAPSYSTEM)))
            Set Session = GUIcon.Children(0)
            SAP_LOGON = True
        End If
    End If
End Function
Sub checklist()
    Dim Auftext As String
    Dim AufDaten As Variant
    Dim X As Integer
    
    If SAP_LOGON = False Then Exit Sub
    With Listcheck
        .STATUS_BALKEN.Width = 0
        If .CB_MAT_01 = True Or .CB_MAT_02 = True Or .CB_MAT_03 = True Or .CB_MAT_04 = True Or CB_MAT_05 = True Then MULTIPLI = 1 Else matcheck = True
        If .CB_AUF_01 = True Or .CB_AUF_02 = True Or .CB_AUF_03 = True Then MULTIPLI = MULTIPLI + 1
        If .CB_EQI_01 = True Then MULTIPLI = MULTIPLI + 1
        Set suche1 = Cells.Columns(1).Find(.Fpos)
        Set suche2 = Cells.Columns(1).Find(.Lpos)
        If Not suche1 Is Nothing Then fx = suche1.Row Else MsgBox "Von Position existiert nicht", vbCritical, "Fehler Pos": Exit Sub
        If Not suche2 Is Nothing Then Lx = suche2.Row Else MsgBox "bis Position existiert nicht", vbCritical, "Fehler Pos": Exit Sub
    End With
    teiler = CDec(174 / ((Lx - fx + 1) * MULTIPLI))
    AufDaten = WorksheetFunction.Transpose(Range(Cells(fx, 5), Cells(Lx, 5)))
    
    With Session
        ClearRange fx, Lx, 16
        If matcheck = True Then GoTo STEP2
        Listcheck.STATUS_TEXT = "Materialstatus wird gepr|fffd|ft"
        
        'Qs Untersuchung
        If Listcheck.CB_MAT_02 = True Then
            .starttransaction "se16n"
            .findById("wnd[0]/usr/ctxtGD-TAB").Text = "marc"
            .findById("wnd[0]").sendVKey 0
            .findById("wnd[0]/usr/tblSAPLSE16NSELFIELDS_TC/ctxtGS_SELFIELDS-LOW[2,2]").Text = Listcheck.TextBox30
            For i = fx To Lx
                .findById("wnd[0]/usr/tblSAPLSE16NSELFIELDS_TC/ctxtGS_SELFIELDS-LOW[2,1]").Text = Cells(i, 2)
                .findById("wnd[0]").sendVKey 8
                If .findById("wnd[0]/sbar").Text = "" Then
                    QS = .findById("wnd[0]/usr/cntlRESULT_LIST/shellcont/shell").getcellvalue(0, "ZZRRQS")
                    If QS = "X" Then format_comment i, 16, "MAT - QS-Untersuchung", True
                    .findById("wnd[0]").sendVKey 3
                Else
                    .findById("wnd[0]").sendVKey 0
                End If
            Next i
        End If
        
        .starttransaction "ZSD_0088"
        .findById("wnd[0]/usr/ctxtSP$00002-LOW").Text = "1102"  'VKO
        .findById("wnd[0]/usr/ctxtSP$00003-LOW").Text = "01"    'Vertriebsweg
        .findById("wnd[0]/usr/ctxtSP$00006-LOW").Text = "DE"    'Sprachenschl|fffd|ssel
        .findById("wnd[0]/usr/ctxtSP$00005-LOW").Text = "1103"  'Bewertungskreis
        .findById("wnd[0]/usr/ctxtSP$00007-LOW").Text = "1100"  'Lagerort
        .findById("wnd[0]/usr/ctxtSP$00008-LOW").Text = "1103"  'Werk
        For i = fx To Lx
            If Cells(i, 2) = "" Then GoTo endemat
            .findById("wnd[0]/usr/ctxtSP$00001-LOW").Text = Cells(i, 2)
            .findById("wnd[0]").sendVKey 8
            
            If .findById("wnd[0]/sbar").Text = "" Then
                Set grid = .findById("wnd[0]/usr/cntlCONTAINER/shellcont/shell")
                
                'Lagerhaltigkeit pr|fffd|fen
                If Listcheck.CB_MAT_01 = True Then
                    If grid.getcellvalue(grid.CurrentCellRow, "MTPOS") <> "NORM" Then format_comment i, 16, "MAT - nicht Lagerhaltig", True
                End If
         
                'Serialpflicht pr|fffd|fen
                If Listcheck.CB_MAT_03 = True Then
                    If Left(grid.getcellvalue(grid.CurrentCellRow, "SERNP"), 3) = "ZWM" Then format_comment i, 13, "Serialpflichtig", False
                End If
                
                'Ek Preis |fffd|berpr|fffd|fen
                If Listcheck.CB_MAT_04 = True Then
                    STDPREIS = grid.getcellvalue(grid.CurrentCellRow, "STPRS")
                    If STDPREIS <> "" Then
                        If CDec(STDPREIS) < CDec(Listcheck.WERTEGRENZE) Then format_comment i, 16, "MAT- Standardpreis:" & STDPREIS & " |fffd| unter Wertgrenze", True
                    End If
                End If
                
                .findById("wnd[0]").sendVKey 3
            Else
                format_comment i, 16, "MAT - Material im Werk 1103 nicht vorhanden", True
            End If
            
            'Bild einf|fffd|gen wenn in der SIS File Ablage vorhanden
            If Listcheck.CB_MAT_05 = True Then Insert_picture i
            
endemat:
            If Not Cells(i, 16).Comment Is Nothing Then Zellemarkieren i, 16, xlDash, xlMedium, 3
            Listcheck.STATUS_BALKEN.Width = Listcheck.STATUS_BALKEN.Width + teiler
        Next i
        
        

        
STEP2: 'Pr|fffd|fung Auftrag
        ClearRange fx, Lx, 6
        Listcheck.STATUS_TEXT = "Auftragsstatus wird gepr|fffd|ft"
        If Listcheck.CB_AUF_01 = True Or Listcheck.CB_AUF_02 = True Or Listcheck.CB_AUF_03 = True Then
            
            For i = fx To Lx
            
                'Wenn Auftrag nicht vorhanden |fffd|ber Rechnungsnummer Auftrag suchen
                If Trim(Cells(i, 5)) = "" And Len(Cells(i, 6)) = 8 Then
                    .starttransaction "ZSD_0089"
                    clear_selection (14)
                    .findById("wnd[0]/usr/ctxtSP$00010-LOW").Text = Cells(i, 6)
                    .findById("wnd[0]/usr/ctxtSP$00011-LOW").Text = Cells(i, 2)
                    .findById("wnd[0]").sendVKey 8
                    If .findById("wnd[0]/sbar").Text = "" Then
                        Set grid = .findById("wnd[0]/usr/cntlCONTAINER/shellcont/shell")
                        Cells(i, 5) = grid.getcellvalue(grid.CurrentCellRow, "AUBEL")
                        Cells(i, 5).Font.Color = RGB(255, 0, 0)
                        .findById("wnd[0]").sendVKey 3
                    End If
                    .findById("wnd[0]").sendVKey 3
                End If
                
                'Auftragscheck
                If Len(Trim(Cells(i, 5))) = 8 Then
                    .starttransaction "ZSD_0086"
                    clear_selection (16)
                    .findById("wnd[0]/usr/ctxtDD_VBELN-LOW").Text = Trim(Cells(i, 5))
                    .findById("wnd[0]/usr/ctxtSP$00003-LOW").Text = Left(Cells(i, 2), 7)
                    .findById("wnd[0]").sendVKey 8
                    
                    If .findById("wnd[0]/sbar").Text = "" Then
                        Set grid = .findById("wnd[0]/usr/cntlGRID1/shellcont/shell")
                        
                        If grid.getcellvalue(X, "VBFA-RFMNG") = 0 Then X = X + 1
                        VKORG = grid.getcellvalue(X, "VBAP-WERKS")
                        AUFPO = grid.getcellvalue(X, "VBAP-POSNR")
                        VBART = grid.getcellvalue(X, "VBAK-AUART")
                        
                        Do Until grid.getcellvalue(X, "VBAK-VBELN") = ""
                            BELEGTYP = grid.getcellvalue(X, "VBFA-VBTYP_N")
                            Select Case BELEGTYP
                                
                                Case Is = "V" 'Streckengesch|fffd|ft
                                AufDat = CDate(grid.getcellvalue(X, "VBFA-ERDAT"))
                                LFMenge = LFMenge + CLng(grid.getcellvalue(X, "VBFA-RFMNG"))
                                VBeleg = "X"
                                
                                Case Is = "J" 'Auslieferung
                                If VBeleg = "" Then
                                    AufDat = CDate(grid.getcellvalue(X, "VBFA-ERDAT"))
                                    LFMenge = LFMenge + CLng(grid.getcellvalue(X, "VBFA-RFMNG"))
                                End If
                                
                                Case Is = "T" 'Retourenlieferung zum Auftrag
                                RTMenge = RTMenge + CLng(grid.getcellvalue(X, "VBFA-RFMNG"))
                                
                                'Pr|fffd|fung Werk zur Lieferung
                                LiefRT = CLng(grid.getcellvalue(X, "VBFA-VBELN"))
                                .starttransaction "ZSD_0090"
                                .findById("wnd[0]/usr/ctxtSP$00001-LOW").Text = LiefRT
                                .findById("wnd[0]").sendVKey 8
                                Set grid = .findById("wnd[0]/usr/cntlCONTAINER/shellcont/shell")
                                If .findById("wnd[0]/sbar").Text = "" Then
                                    VST = grid.getcellvalue(grid.CurrentCellRow, "VSTEL")
                                    VKO = grid.getcellvalue(grid.CurrentCellRow, "VKORG")
                                    If VST <> "1103" Or Left(VKO, 2) <> "11" Then RTMenge = RTMenge - 1
                                    .findById("wnd[0]").sendVKey 3
                                End If
                                .starttransaction "ZSD_0086"
                                .findById("wnd[0]/usr/ctxtDD_VBELN-LOW").Text = Trim(Cells(i, 5))
                                .findById("wnd[0]/usr/ctxtSP$00003-LOW").Text = Cells(i, 2)
                                .findById("wnd[0]").sendVKey 8
                                Set grid = .findById("wnd[0]/usr/cntlGRID1/shellcont/shell")
                                
                                Case Is = "5", "M", "U" 'Rechnung intern extern
                                If Cells(i, 6) = "" Or BELEGTYP = "5" And Cells(i, 6).Font.Color = 255 Then
                                    Cells(i, 6) = grid.getcellvalue(X, "VBFA-VBELN")
                                    Cells(i, 6).Font.Color = RGB(255, 0, 0)
                                End If
                                
                                Case Is = "N" 'Stornorechnung
                                If Cells(i, 6).Font.Color = RGB(255, 0, 0) Then Cells(i, 6) = ""
                                
                                Case Is = "C", "I" 'Auftrag berechnet und kostenlos
                                If Listcheck.CB_AUF_02 = True Then FOAUF = FOAUF + 1
                                
                            End Select
                            X = X + 1
                        Loop
                        
                        format_comment i, 5, "Auftragspos:" & AUFPO, False
                        If VKORG <> "1103" Then format_comment i, 16, "AUF - Auftrag ist vom Werk " & VKORG, True
                        If Left(VBART, 3) = "ZRP" Then format_comment i, 16, "AUF - Auftrag ist ein Reparaturauftrag ", True
                        If Listcheck.CB_AUF_01 = True Then
                            If LFMenge - Cells(i, 4) < 0 Then format_comment i, 16, "AUF - Retourenmenge > Liefermenge", True
                            If LFMenge - RTMenge <= 0 Then format_comment i, 16, "AUF - Keine Retourenmenge vorhanden", True
                        End If
                        If Listcheck.CB_AUF_02 = True Then
                            If FOAUF > 0 Then format_comment i, 16, "AUF - " & FOAUF & " Folgeauftr|fffd|ge vorhanden", True
                        End If
                        If Listcheck.CB_AUF_03 = True Then
                            If DateDiff("d", AufDat, Now) > 1460 Then format_comment i, 16, "AUF - Auslieferdatum (" & AufDat & ") ist > 4 Jahre", True
                        End If
                        LFMenge = 0: RTMenge = 0: GSMenge = 0: FOAUF = 0: X = 0: VBeleg = ""
                        .findById("wnd[0]").sendVKey 3
                        
                    Else
                        GoTo Noorder
                    End If
                    
                    'Check ob Auftrag mehrfach enthalten mit Kommentar in Rechnungsspalte
                    If Lx > 5 And fx <> Lx Then
                        suche = Trim(Cells(i, 5))
                        For a = 1 To UBound(AufDaten)
                            If AufDaten(a) = suche And i - a <> fx - 1 Then
                                If Not Cells(i, 6).Comment Is Nothing Then
                                    c = Cells(i, 6).Comment.Text
                                    XAUF = Mid(c, 21, Len(c) - 20) & ","
                                Else
                                    XAUF = ""
                                End If
                                format_comment i, 6, "Auftrag auch in Pos:" & XAUF & Cells(a + fx - 1, 1), False
                            End If
                        Next
                    End If

                Else
Noorder:            format_comment i, 16, "AUF - Auftrag/Material nicht vorhanden", True
                End If
                
                If Not Cells(i, 16).Comment Is Nothing Then Zellemarkieren i, 16, xlDash, xlMedium, 3
                Listcheck.STATUS_BALKEN.Width = Listcheck.STATUS_BALKEN.Width + teiler
            Next i
        End If
        
        
        'Gew|fffd|hrleistungsdaten
        ClearRange fx, Lx, 8
        Listcheck.STATUS_TEXT = "Maschinenstatus wird gepr|fffd|ft"
        If Listcheck.CB_EQI_01 = True Then
        
            .starttransaction "ZSD_0091"
            For i = fx To Lx
                If Left(Cells(i, 8), 10) <> "" Then
                    .findById("wnd[0]/usr/ctxtSP$00002-LOW").Text = Left(Cells(i, 8), 10)
                    .findById("wnd[0]/usr/ctxtSP$00009-LOW").Text = ""
                    .findById("wnd[0]/usr/ctxtSP$00010-LOW").Text = ""
                    .findById("wnd[0]/usr/ctxtSP$00011-LOW").Text = ""
                    .findById("wnd[0]/usr/ctxt%LAYOUT").Text = "/TRUMPF"
                    .findById("wnd[0]").sendVKey 8
                    If .findById("wnd[0]/sbar").Text = "" Then
                        Set grid = .findById("wnd[0]/usr/cntlCONTAINER/shellcont/shell")
                        HGW1 = grid.getcellvalue(grid.CurrentCellRow, "GWLDT")
                        HGW2 = grid.getcellvalue(grid.CurrentCellRow, "GWLEN")
                        WGW1 = grid.getcellvalue(grid.CurrentCellRow, "ZGWLDT")
                        WGW2 = grid.getcellvalue(grid.CurrentCellRow, "ZGWLEN")
                        
                        If CLng(Left(HGW1, 2)) And CLng(Left(HGW2, 2)) > 0 Then format_comment i, 8, "Herstellergew|fffd|hrleistung:" & HGW1 & "-" & HGW2, True
                        If CLng(Left(WGW1, 2)) And CLng(Left(WGW2, 2)) > 0 Then format_comment i, 8, "Wiederverk|fffd|ufergew|fffd|hrleistung:" & WGW1 & "-" & WGW2, True
                        If CLng(Left(HGW2, 2)) And CLng(Left(WGW2, 2)) > 0 And CDate(HGW2) <> CDate(WGW2) Then format_comment i, 16, "EQUI - Herstellergew|fffd|hrleistung <> Wiederverk|fffd|ufergew|fffd|hrleistung", True
                        .findById("wnd[0]").sendVKey 3
                    End If
                End If
                
                If Not Cells(i, 16).Comment Is Nothing Then Zellemarkieren i, 16, xlDash, xlMedium, 3
                Listcheck.STATUS_BALKEN.Width = Listcheck.STATUS_BALKEN.Width + teiler
            Next i
            
        End If
        .endtransaction
        
    End With
    Listcheck.STATUS_TEXT = "Liste erfolgreich gepr|fffd|ft"
    format_comment 4, 16, "Listcheck:" & Date & "_" & Range("T2") & "_Pos " & Listcheck.Fpos & "-" & Listcheck.Lpos, True
End Sub
Sub clear_selection(X As Long)
    On Error Resume Next
    For i = 1 To X
        Session.findById("wnd[0]/usr/ctxtSP$000" & Format(i, "00") & "-LOW").Text = ""
        Session.findById("wnd[0]/usr/txtSP$000" & Format(i, "00") & "-LOW").Text = ""
    Next i
End Sub
Sub Material_Cockpit()
    If SAP_LOGON("ZMM79") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "ZMM79"
        .findById("wnd[0]/usr/ctxtZMATNR_LOW").Text = Cells(z, 2)
        .findById("wnd[0]/usr/ctxtZWERKS_LOW").Text = "1103"
        .findById("wnd[0]/usr/ctxtZVKORG").Text = ""
        .findById("wnd[0]/usr/ctxtZVTWEG").Text = ""
        .findById("wnd[0]").sendVKey 0
        With .findById("wnd[0]/shellcont/shell/shellcont[1]/shell")
            .expandNode Format(Cells(z, 2), "0000000")
            .doubleClickNode Format(Cells(z, 2), "0000000") & "1103"
        End With
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Material_anzeigen()
    If SAP_LOGON("MM03") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "MM03"
        .findById("wnd[0]/usr/ctxtRMMG1-MATNR").Text = Cells(z, 2)
        .findById("wnd[0]").sendVKey 0
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Stueckliste()
    If SAP_LOGON("CS03") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "cs03"
        .findById("wnd[0]/usr/ctxtRC29N-MATNR").Text = Cells(z, 2)
        .findById("wnd[0]/usr/ctxtRC29N-WERKS").Text = ""
        For i = 1 To 8
            .findById("wnd[0]/usr/ctxtRC29N-STLAN").Text = i
            .findById("wnd[0]").sendVKey 0
            If Right(.ActiveWindow.Text, 8) <> "Einstieg" Then Exit For
        Next i
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub SO10text_anzeigen()
    If SAP_LOGON("SO10") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "SO10"
        .findById("wnd[0]/usr/ctxtRSSCE-TDNAME").Text = "110_" & Format(Cells(z, 2), "0000000")
        .findById("wnd[0]/usr/ctxtRSSCE-TDID").Text = "zqsw"
        .findById("wnd[0]/usr/ctxtRSSCE-TDSPRAS").Text = "de"
        .findById("wnd[0]/usr/btn%#AUTOTEXT002").press
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Auftrag_Anzeigen()
    If SAP_LOGON("VA03") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "VA03"
        .findById("wnd[0]/usr/ctxtVBAK-VBELN").Text = Cells(z, 5)
        .findById("wnd[0]").sendVKey 0
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Auftrag_Belegfluss_Alle()
    If SAP_LOGON("VA03") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "VA03"
        .findById("wnd[0]/usr/ctxtVBAK-VBELN").Text = Cells(z, 5)
        .findById("wnd[0]").sendVKey 17
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Rechnung_Belegfluss()
    If SAP_LOGON("VF03") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "VF03"
        .findById("wnd[0]/usr/ctxtVBRK-VBELN").Text = Cells(z, 6)
        .findById("wnd[0]").sendVKey 25
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Serialhistorie()
    If SAP_LOGON("IQ03") = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "iq03"
        .findById("wnd[0]/usr/ctxtRISA0-MATNR").Text = Cells(z, 2)
        .findById("wnd[0]/usr/ctxtRISA0-SERNR").Text = Cells(z, 13)
        .findById("wnd[0]").sendVKey 0
        .findById("wnd[0]").sendVKey 30
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub QMeldung_aendern(Optional Modus As Boolean)
    If SAP_LOGON("QM02", Modus) = False Then Exit Sub
    z = ActiveCell.Row
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "QM02"
        .findById("wnd[0]/usr/ctxtRIWO00-QMNUM").Text = Left(Cells(z, 17), 7)
        .findById("wnd[0]").sendVKey 0
        If Position.Visible = True Then Read_QMHinweistext
        .findById("wnd[0]").JumpForward
    End With
End Sub
Sub Meldung_anlegen(TA As String, Modus As Boolean, QMART As String)
    Dim code(1 To 29) As String
    code(1) = "          3": code(2) = "          4": code(3) = "          5": code(4) = "          6": code(5) = "          7"
    code(6) = "          8": code(11) = "          9": code(12) = "         10": code(13) = "         11": code(15) = "         13":
    code(16) = "         14": code(17) = "         15": code(21) = "         19": code(29) = "         22"

    If SAP_LOGON(TA, Modus) = False Then Exit Sub
    With Session
        .findById("wnd[0]").maximize
        .starttransaction "zmm81"
        .findById("wnd[0]/usr/ctxtVBAP-VBELN").Text = Trim(Position.Spalte5)
        .findById("wnd[0]/usr/ctxtVBAP-POSNR").Text = Trim(Position.PosAuf)
        .findById("wnd[0]").sendVKey 0
        If .findById("wnd[0]/sbar").Text <> "" Then
            MsgBox "Ung|fffd|ltiger Auftrag / Keine offenene Retoure vorhanden"
            GoTo break
        Else
            Set grid = .findById("wnd[0]/usr/subSUB1:/XAPTION/SAPLSCREEN:0102/cntlCONTAINER/shellcont/shell")
        
            'Folgeauftrag vorhanden pr|fffd|fen
            If .findById("wnd[0]/usr/txtG_MSGTXT").Text <> "" Then
                Antwort = MsgBox("Achtung Folgeauftrag vorhanden." & Chr(10) & _
                "Retoure trotzdem buchen?", vbInformation + vbYesNo, "Folgeauftrag")
                If Antwort = 7 Then GoTo break
            End If
           
            'Materialnummer im Auftrag pr|fffd|fen
            grid.setCurrentCell 0, "MATNR"
            grid.contextMenu
            grid.selectContextMenuItem "&FILTER"
            .findById("wnd[1]/usr/ssub%_SUBSCREEN_FREESEL:SAPLSSEL:1105/ctxt%%DYN001-LOW").Text = Position.Spalte2
            .findById("wnd[1]").sendVKey 0
            POSNR = grid.getcellvalue(grid.CurrentCellRow, "POSNR")

            If IsNumeric(POSNR) Then
                'Pr|fffd|fung Absagegrund Unterpostion
                If grid.getcellvalue(grid.CurrentCellRow, "ABGRU") = "11" Then
                    MsgBox "Retoure ist bereits mit Upos abgeschlossen"
                    GoTo break
                End If
                
                'RS-Meldung vorhanden pr|fffd|fen
                If grid.getcellvalue(grid.CurrentCellRow, "QMNUM_RS") <> "" Then
                    RSM = grid.getcellvalue(grid.CurrentCellRow, "QMNUM_RS")
                    Antwort = MsgBox("Zur Retourenposition ist eine RS-Meldung (" & RSM & ") vorhanden." & Chr(13) & Chr(13) & _
                    "JA         = Retoure fortsetzen ohne Anzeige RS-Meldung" & Chr(10) & _
                    "NEIN      = Retoure abbrechen und RS-Meldung anzeigen" & Chr(10) & _
                    "CANCEL = Retoure abbrechen", vbInformation + vbYesNoCancel, "RS-Meldung")

                    Select Case Antwort
                        Case 7 'NEIN
                        grid.currentCellColumn = "QMNUM_RS"
                        grid.clickCurrentCell
                        Exit Sub
                        Case 2 'CHANCEL
                        GoTo break
                    End Select
                End If
                
                grid.modifyCell grid.CurrentCellRow, "KWMENG", Position.Spalte4 'Menge |fffd|ndern
                grid.modifyCell grid.CurrentCellRow, "SERIN", Position.Spalte13 'Serialnummer |fffd|bernehmen
                If Position.Kurztxt <> "Automatischer Beschreibungstext Meldung" Then
                    grid.modifyCell grid.CurrentCellRow, "QMTXT", Position.Kurztxt 'Beschreibung Kurztext |fffd|bermehmen
                End If
                grid.modifyCell grid.CurrentCellRow, "BSTKD", Position.Kurztxt 'Beschreibung in Bestellung |fffd|bermehmen
                Position.Kurztxt = ""
                
                Select Case QMART
                    Case Is = "E"
                    'Serialnummernpr|fffd|fung nicht ben|fffd|tigt
                    If grid.getcellvalue(grid.CurrentCellRow, "QSPLIT") = "X" Then
                        If Position.Spalte4 > 1 Then MsgBox "Serialplichtige Teile bitte einzeln bearbeiten": GoTo break
                        If grid.getcellvalue(grid.CurrentCellRow, "SERNR") <> Position.Spalte13 Then
                            MsgBox "Serialnummer Auslieferung - R|fffd|cksendung ist ungleich." & Chr(10) & _
                            "SN Auslieferung: " & grid.getcellvalue(grid.CurrentCellRow, "SERNR") & Chr(10) & _
                            "SN R|fffd|cksendung: " & Position.Spalte13 & Chr(10) & _
                            "Bitte Serialnummer pflegen oder manuell bearbeiten.", vbCritical, "Serialpr|fffd|fung"
                            GoTo break
                        End If
                    End If
                    'Preispr|fffd|fung
                    If grid.getcellvalue(grid.CurrentCellRow, "STPRS") * Position.Spalte4 < 5 Then
                        Antwort = MsgBox("EK Preis ist kleiner 5|fffd|, Teil wird bei Einlagerung verschrottet", vbInformation + vbOKCancel, "Preispr|fffd|fung")
                        If Antwort = 2 Then GoTo break
                    End If
                    
                    grid.modifyCell grid.CurrentCellRow, "VWE", "Einlagern"
                    
                    Case Is = "P"
                    grid.modifyCell grid.CurrentCellRow, "VWE", "Pr|fffd|fung"
                    
                    Case Is = "V"
                    grid.modifyCell grid.CurrentCellRow, "VWE", "Verschrotten"
                End Select
            Else
                MsgBox "Keine offene Retoure zum Material: " & Position.Spalte2 & " vorhanden.", vbInformation, "Retoure buchen": GoTo break
            End If

            'Retourenprozess starten
            .findById("wnd[0]").sendVKey 11
            
            
            'Pr|fffd|fungen Retourenprozess
            If .ActiveWindow.Text = "Equipment anlegen?" Then
                 .findById("wnd[0]").maximize
                GoTo break
            End If
            If .findById("wnd[0]/sbar").Text <> "" Then
                If Right(.findById("wnd[0]/sbar").Text, 9) = "gesichert" Then GoTo start
                If Left(.findById("wnd[0]/sbar").Text, 20) = "Bitte Code ausw|fffd|hlen" Then GoTo start
                MsgBox .findById("wnd[0]/sbar").Text
                GoTo break
            End If
            
start:
            Select Case QMART
                Case Is = "E"
                With Position
                    .Spalte17 = .Spalte17 & grid.getcellvalue(grid.CurrentCellRow, "QMNUM")
                    If Left(grid.getcellvalue(grid.CurrentCellRow, "AUART_ORG"), 3) = "ZKL" Then .Spalte18 = "KLA" Else .Spalte18 = "100%"
                End With
                
                Case Is = "V"
                Position.Spalte17 = Position.Spalte17 & grid.getcellvalue(grid.CurrentCellRow, "QMNUM")
                
                Case Is = "P"
                If .ActiveWindow.Text = "QS-Warntext vorhanden! Fortfahren?" Then .findById("wnd[1]/usr/btnBUTTON_1").press
                .findById("wnd[1]/usr/cntlTREE_CONTROL_AREA/shellcont/shell").changeCheckbox code(Position.Spalte10), "1", True
                .findById("wnd[1]/tbar[0]/btn[0]").press
                Read_QMHinweistext
                With Position
                    .Spalte17 = .Spalte17 & Session.findById("wnd[0]/usr/subSCREEN_1:SAPLIQS0:1070/ctxtVIQMEL-QMNUM").Text
                    If Left(grid.getcellvalue(grid.CurrentCellRow, "AUART_ORG"), 3) = "ZKL" And .Spalte18 = "" Then .Spalte18 = "KLA"
                End With
            End Select
        End If
        Exit Sub
break:
        .findById("wnd[0]").sendVKey 15
    End With
End Sub
Sub Read_QMHinweistext()
    With Session
        Do Until windowexists = False
            .findById("wnd[1]").sendVKey 0
        Loop
        On Error Resume Next
        LFNR = .findById("wnd[0]/usr/tabsTAB_GROUP_10/tabp10\TAB01/ssubSUB_GROUP_10:SAPLIQS0:7235/subCUSTOM_SCREEN:SAPLIQS0:7212/subSUBSCREEN_2:SAPLIQS0:7790/subUSER0001:SAPLXQQM:0101/txtLANGTEXT").Text
        LFNR = .findById("wnd[0]/usr/tabsTAB_GROUP_10/tabp10\TAB01/ssubSUB_GROUP_10:SAPLIQS0:7235/subCUSTOM_SCREEN:SAPLIQS0:7212/subSUBSCREEN_2:SAPLIQS0:7790/ssubUSER0001:SAPLXQQM:0101/txtLANGTEXT").Text
        KDNR = .findById("wnd[0]/usr/tabsTAB_GROUP_10/tabp10\TAB01/ssubSUB_GROUP_10:SAPLIQS0:7235/subCUSTOM_SCREEN:SAPLIQS0:7212/subSUBSCREEN_4:SAPLIQS0:7730/subANSPRECH:SAPLIPAR:0100/ctxtVIQMEL-KUNUM").Text
        On Error GoTo 0
        If RFC_Open = True Then
            Position.POPUPKND = Read_SO10TEXT("110_K_0000" & KDNR)
            Position.POPUPLF = Read_SO10TEXT("110_L_" & Left(LFNR, 10))
            RFC_Close
        End If
    End With
End Sub
Function windowexists(Optional Wnd As Integer = 1) As Boolean
    On Error Resume Next
    Session.findById ("wnd[1]")
    windowexists = ERR.Number = 0
    ERR.clear
End Function


Attribute VB_Name = "Start"
Public user As String
Function Registry_Read(Regstring)
    Dim wsh As Object
    Dim VAR As String
    On Error Resume Next
    Set wsh = CreateObject("WScript.Shell")
    Registry_Read = wsh.RegRead(Regstring)
End Function
Function CutUser(user)
    Dim Cuser As String
    
    On Error Resume Next
    
    Cuser = Mid(user, 1, Len(user) - 1)
    
    If Len(Cuser) > 0 Then
        Do Until Asc(Right(Cuser, 1)) < 58 And Asc(Right(Cuser, 1)) > 0
            Cuser = Left(Cuser, Len(Cuser) - 1)
        Loop
        CutUser = Cuser
    Else
        CutUser = "Leer"
    End If
    
    On Error GoTo 0
End Function
Function VerzDa(str As String) As Boolean
    On Error GoTo Fehler
    ChDir (str)
    VerzDa = True
    Exit Function
Fehler:
    VerzDa = False
End Function
Sub Update_Datenlisten_TWS() 'TWS update
    On Error GoTo Fehler
    If Dir(OrgPfadlisten, vbDirectory) <> "" Then
        
        'Materialiste aktualisieren
        neuematerialliste = Finddatfix(PfadMAT, "TWS_Retouren", "txt", "new")
        If Dir(OrgPfadlisten & "material.xlsb") = "" Then Materialdatenaktualisieren
        If neuematerialliste <> "" Then
            Kill OrgPfadlisten & "material.xlsb"
            Kill OrgPfadlisten & "Material.txt"
            Name PfadMAT & neuematerialliste As OrgPfadlisten & "Material.txt"
            Materialdatenaktualisieren
        End If
    
        'Maschinenliste aktualisieren
        neuemaschinenliste = FileDateTime(PfadEQI)
        If Dir(OrgPfadlisten & "maschine.xlsb") <> "" Then
            aktuellemaschinenliste = FileDateTime(OrgPfadlisten & "maschine.xlsb")
        Else
            Maschinedatenaktualisieren
            aktuellemaschinenliste = FileDateTime(OrgPfadlisten & "maschine.xlsb")
        End If
        If neuemaschinenliste > aktuellemaschinenliste Then
            Kill OrgPfadlisten & "maschine.xlsb"
            Maschinedatenaktualisieren
        End If
        
    Else
        MsgBox "Datenlisten zur automatischen Komplettierung existieren nicht." & Chr(13) & _
        "Bitte wenden Sie sich an den zust|fffd|ndigen Administrator.", vbCritical, "Datenlisten"
    End If
    Exit Sub
Fehler:
    MsgBox "Fehler beim aktualisieren der Datenlisten zur automatischen Komplettierung" & Chr(13) & _
    "Bitte wenden Sie sich an den zust|fffd|ndigen Administrator.", vbCritical, "Datenlisten"

End Sub

Public Function Finddatfix(ByVal strsuchepfad As String, ByVal strfile As String, ByVal strFileendg As String, ByVal newold As String) As String
    Dim suchdat As String

    suchdat = Dir(strsuchepfad & strfile & "*." & strFileendg)
    Finddatfix = suchdat
    Do Until suchdat = ""
        Select Case newold
            Case Is = "new"
            If FileDateTime(strsuchepfad & suchdat) > FileDateTime(strsuchepfad & Finddatfix) Then Finddatfix = suchdat
            Case Is = "old"
            If FileDateTime(strsuchepfad & suchdat) < FileDateTime(strsuchepfad & Finddatfix) Then Finddatfix = suchdat
        End Select
        If suchdat <> "" Then suchdat = Dir
    Loop
End Function
Sub Materialdatenaktualisieren()
    Application.ScreenUpdating = False
        Updatebalken_load "Update materialliste"
        Workbooks.OpenText Filename:=OrgPfadlisten & "Material.txt", _
        DataType:=xlDelimited, Other:=True, OtherChar:="|", FieldInfo:= _
        Array(Array(1, 9), Array(2, 1), Array(3, 1), Array(4, 1), Array(5, 9), Array(6, 9), _
        Array(7, 9), Array(8, 9), Array(9, 9), Array(10, 2), Array(11, 9), Array(12, 9), _
        Array(13, 9), Array(14, 9), Array(15, 2), Array(16, 1), Array(17, 9), Array(18, 1), _
        Array(19, 9), Array(20, 9), Array(21, 9), Array(22, 9), Array(23, 9), Array(24, 1))
        
        'Preisspalte formatieren
        lastx = ActiveSheet.Cells(Rows.Count, 1).End(xlUp).Row
        For i = 1 To lastx
            If ActiveSheet.Cells(i, 4) <> "" Then
                ActiveSheet.Cells(i, 4) = CDec(WorksheetFunction.Substitute(ActiveSheet.Cells(i, 4), ".", ","))
            End If
        Next i
        
        ActiveWorkbook.SaveAs OrgPfadlisten & "material.xlsb", xlExcel12
        ActiveWindow.Close False
        Updatebalken_refresh 1, 1
    Application.ScreenUpdating = True
End Sub
Sub Maschinedatenaktualisieren()
    Application.ScreenUpdating = False
        Updatebalken_load "Update maschinenliste"
        Workbooks.OpenText Filename:=PfadEQI, Semicolon:=True, DataType:=xlDelimited
        Range("B:CV").Delete Shift:=xlToLeft
        ActiveWorkbook.SaveAs OrgPfadlisten & "Maschine.xlsb", xlExcel12
        ActiveWindow.Close False
        Updatebalken_refresh 1, 1
    Application.ScreenUpdating = True
End Sub
Sub Update_Datenlisten_PC() 'Updatecheck f|fffd|r Benutzer mit Netztwerkzugriff
    Dim listenname(1 To 2) As String
    Dim lnr(1 To 2) As Long

    listenname(1) = "Material.xlsb"
    listenname(2) = "Maschine.xlsb"
    anleitung = "User-manual-Returnlist.pdf"

    On Error GoTo ENDE 'check ob update vorhanden

        For i = 1 To 2
            If FileDateTime(OrgPfadlisten & listenname(i)) <> FileDateTime(KopPfadlisten & listenname(i)) Then lnr(i) = 1
        Next i
        If FileDateTime(Left(OrgPfadlisten, Len(OrgPfadlisten) - 6) & anleitung) <> FileDateTime(Left(KopPfadlisten, Len(KopPfadlisten) - 6) & anleitung) Then Al = 1
        If lnr(1) & lnr(2) & Al > 0 Then Downloaddaten lnr(1), lnr(2), Al

    Exit Sub

ENDE:
    Downloaddaten 1, 1, 1
End Sub

Sub Downloaddaten(ByVal dat1 As Long, ByVal dat2 As Long, ByVal Al As Long)
    Dim p%
    Dim liste(1 To 2) As Long
    Dim listenname(1 To 2) As String

    liste(1) = dat1: liste(2) = dat2
    listenname(1) = "Material.xlsb"
    listenname(2) = "Maschine.xlsb"
    anleitung = "User-manual-Returnlist.pdf"

    If Dir(KopPfadlisten, vbDirectory) = "" Then
        If Dir("c:\Trumpf\", vbDirectory) = "" Then MkDir "c:\Trumpf\"
        If Dir("c:\Trumpf\Returnlist\", vbDirectory) = "" Then MkDir "c:\Trumpf\Returnlist\"
        MkDir KopPfadlisten
    End If

    updatebalken.Show vbModeless: DoEvents
    For i = 1 To 2
        If liste(i) > 0 Then CopyFileFSO OrgPfadlisten & listenname(i), KopPfadlisten & listenname(i), True
        updatebalken.PW_Text.Caption = "Update lists for automatic completion."
        updatebalken.PW_Balken.Width = p + 70
        p = p + 70
        DoEvents
    Next i
    If Al > 0 Then CopyFileFSO Left(OrgPfadlisten, Len(OrgPfadlisten) - 6) & anleitung, Left(KopPfadlisten, Len(KopPfadlisten) - 6) & anleitung
    
    updatebalken.Hide
End Sub

Public Function CopyFileFSO(strSourceFile As String, strTargetFile As String, _
                            Optional boolOverwrite As Boolean = True)
On Error GoTo Err_Handler

    Set oFSO = CreateObject("Scripting.FileSystemObject")
    If boolOverwrite = True Then
        oFSO.CopyFile strSourceFile, strTargetFile
      Else
        oFSO.CopyFile strSourceFile, strTargetFile, False
    End If
    
Err_Handler_Exit:
    Exit Function
Err_Handler:
    Dim strErrString As String
    strErrString = "Error Information..." & vbCrLf
    strErrString = strErrString & "Error#: " & ERR.Number & vbCrLf
    strErrString = strErrString & "Description: " & ERR.Description & vbCrLf
    MsgBox strErrString, vbCritical + vbOKOnly, "Error in Function: CopyFileFSO"
    Resume Err_Handler_Exit
End Function

Sub Pruefung_Datenlisten() 'Pr|fffd|fung Datenlisten kein Netzwerkzugriff.
    Dim Pfadlisten As String
    Pfadlisten = Range("a1")
 
    If Pfadlisten = "" Then
        Antwort = MsgBox("Access to TRUMPF network is not possible." & (Chr(13)) & _
        " \\srvditz1\logistic\xchange\Retouren_Ausland\Information\" & (Chr(13)) & (Chr(13)) & _
        "You must first choose the path/file, from which you opened the list," & (Chr(13)) & _
        "before using |fffd|TWS_Returnlist.xltm|fffd| for the first time." & (Chr(13)), vbCritical + vbRetryCancel, "Access")
        If Antwort = 4 Then
            Pfad_Registry_aendern
            Exit Sub
        Else
            Exit Sub
        End If
    End If
    
    If Dir(Pfadlisten & "Material.xls*") = "" Then listenstrg = listenstrg & "Material-list "
    If Dir(Pfadlisten & "Maschine.xls*") = "" Then listenstrg = listenstrg & "Machine-list "
    If Pfadlisten <> "" Then
        If Dir(Left(Pfadlisten, Len(Pfadlisten) - 6) & "TWS_Returnlist.xlt*") = "" Then Vorlage = False Else Vorlage = True
    End If
    
          
    If listenstrg <> "" Then
        
        If listenstrg <> "" Then
            Access_eng = "For help please contact your TWS returns administrator."
            Access_deu = "F|fffd|r Hilfe wenden Sie sich bitte an Ihren zust|fffd|ndigen Sachbearbeiter."
            Access_const = vbCritical
        End If
        
        If Vorlage = False Then
            Access_eng = "Reason: wrong programme path" & _
                         vbCr & vbCr & Pfadlisten & vbCr & vbCr & _
                         "Select button retry --> chose TWS_Returnlist.xltm path/folder"
            Access_deu = "Ursache: Falscher Programmpfad" & _
                         vbCr & vbCr & Pfadlisten & vbCr & vbCr & _
                         "Klick Button Wiederholen --> Programmpfad neu ausw|fffd|hlen"
            Access_const = vbCritical + vbRetryCancel
        End If
    
    
        Antwort = MsgBox("The following lists for automatic completion do not exist:" & vbCr & vbCr & _
        listenstrg & vbCr & vbCr & "The processing ease is limited." & vbCr & _
        Access_eng & vbCr & vbCr & _
        "---------------------------------------------------------------------------" & vbCr & vbCr & _
        "Die folgenden Listen zur automatischen Komplettierung sind nicht vorhanden:" & vbCr & vbCr & _
        listenstrg & vbCr & vbCr & "Eine Bearbeitung ist nur eingeschr|fffd|nkt m|fffd|glich." & vbCr & _
        Access_deu, Access_const, "Lists for automatic completion")
        If Antwort = 4 Then Pfad_Registry_aendern
    
    End If
End Sub
Sub Pfad_Registry_aendern()
Attribute Pfad_Registry_aendern.VB_ProcData.VB_Invoke_Func = "p\n14"
    Dim WSHShellwe

    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Please chose the TWS_Returnlist.xltm path/folder - Bitte Order zur TWS_Returnlist.xltm w|fffd|hlen"
        .InitialFileName = Pfad
        .InitialView = msoFileDialogViewLargeIcons
        .ButtonName = "Ok"
        If .Show = -1 Then Pfadliste = .SelectedItems(1) & "\"
    End With

    Set WshShell = CreateObject("WScript.Shell")
    WshShell.RegWrite "HKEY_CURRENT_USER\UserInfo\UserPfadReturnlist", Pfadliste
    Set WshShell = Nothing
    ActiveSheet.Cells(1, 1) = Pfadliste & "Daten\"
End Sub
Sub clear()
    Set WshShell = CreateObject("WScript.Shell")
    WshShell.RegWrite "HKEY_CURRENT_USER\UserInfo\UserPfadReturnlist", ""
    Set WshShell = Nothing
End Sub
Sub CheckReference()

   Dim vbProj As Object ' This refers to your VBA project.
   Dim chkRef As Object ' A reference.

   Set vbProj = ActiveWorkbook.VBProject

   ' Check through the selected references in the References dialog box.
   For Each chkRef In vbProj.References
  
      If chkRef.IsBroken Then
         MsgBox chkRef.Name
         vbProj.References.Remove chkRef
      End If

   Next
End Sub
Sub checkliste()
    Dim dat1, dat2 As Date

    dat1 = FileDateTime(Application.RecentFiles.Item(1).Path)
    dat2 = FileDateTime(Left(OrgPfadlisten, 57) & "TWS_Returnlist.xltm")

    If dat1 < dat2 Then Antwort = MsgBox("++++++++Attention+++Attention+++Attention++++++++" & Chr(13) & Chr(13) & _
        "You are using an old version of the Returns List." & Chr(13) & Chr(13) & _
        "By continuing to use an older copy, there is a higher" & Chr(13) & _
        "chance that discrepancies could arise with regard to " & Chr(13) & _
        "credit note values." & Chr(13) & Chr(13) & _
        "Click 'OK' and a new 'TWS_Returnlist' shortcut will be" & Chr(13) & _
        "created onto your desktop. The current list will be" & Chr(13) & _
        "closed. Please only use the shortcut on your desktop." & Chr(13) & Chr(13) & _
        "+++++++ Achtung +++ Achtung +++ Achtung +++++++" & Chr(13) & Chr(13) & _
        "Sie verwenden eine |fffd|ltere Version der Retourenliste." & Chr(13) & Chr(13) & _
        "Durch die Verwendung einer |fffd|lteren Kopie kann es zu" & Chr(13) & _
        "Differenzen bei Gutschriften kommen." & Chr(13) & Chr(13) & _
        "Dr|fffd|cken Sie 'OK' und es wird eine aktuelle Verkn|fffd|pfung" & Chr(13) & _
        "'TWS_Returnlist' auf dem Desktop erstellt. Die aktuelle" & Chr(13) & _
        "Liste wird geschlossen.Bitte verwenden Sie nur noch die" & Chr(13) & _
        "Verkn|fffd|fung auf Ihrem Desktop.", vbCritical + vbOKCancel + vbMsgBoxSetForeground, "Old Version")
    If Antwort = 1 Then
        MakeDesktopShortcut
        Workbooks(1).Close SaveChanges:=False
    End If
End Sub

Attribute VB_Name = "TWS_Tools"
Public zeiletabelle As Long
Public lastfind As String
Sub Send_listen()
    Dim Antwort
    Dim objReference As Object

    On Error GoTo error
    Antwort = MsgBox("Hat die TG|fffd|S / VG|fffd|S Berechtigung f|fffd|r das Trumpfnetzwerk?", vbQuestion + vbYesNo, "Update / Link")
    If Antwort = 7 Then
        Datenpacken
        Sendemail_OhneNetzwerk
    Else
        Sendemail_mitNetzwerk
    End If
error:
End Sub
Sub Datenpacken()
    If Dir("C:\Temp\Returnlist.zip") <> "" Then Kill "C:\Temp\Returnlist.zip"

    anleitung = Mid(OrgPfadlisten, 1, 57) & "User-manual-Returnlist.pdf"
    liste = Mid(OrgPfadlisten, 1, 57) & "TWS_Returnlist.xltm"
    Daten = "C:\temp\Daten\"
    
    If Dir("C:\Temp\Daten\", vbDirectory) = "" Then MkDir "C:\Temp\Daten\"
    CopyFileFSO OrgPfadlisten & "material.xlsb", "c:\Temp\Daten\material.xlsb", True
    CopyFileFSO OrgPfadlisten & "maschine.xlsb", "c:\Temp\Daten\maschine.xlsb", True

    WindowsZip liste, "c:\temp\returnlist.zip"
    Application.Wait (Now + TimeValue("0:00:03"))
    WindowsZip Daten, "c:\temp\returnlist.zip"
    WindowsZip anleitung, "c:\temp\returnlist.zip"
    Kill "c:\temp\daten\*.*"
    RmDir "c:\temp\daten\"
End Sub

Sub Sendemail_OhneNetzwerk()
Dim bStarted As Boolean
Dim oOutlookApp As Outlook.Application
Dim oItem As Outlook.MailItem
Dim betreff As String

On Error Resume Next

textthml = "Sehr geehrte Damen und Herren," & _
"<P></P>" & _
"<DIV>&nbsp;</DIV>" & _
"<DIV>anbei aktuelle Version der Vorlage zur R|fffd|cksendung von Ersatzteilen.</DIV>" & _
"<P></P>" & _
"<DIV>Bitte entpacken Sie die Daten der ""Returnlist.zip"" auf ihren Computer oder Netzwerk.</DIV>" & _
"<DIV>Bitte beachten Sie beim entpacken das die Struktur Ordners ""Daten"" erhalten bleibt.</DIV>" & _
"<DIV>Bereits vorhandene Dateien k|fffd|nnen Sie l|fffd|schen oder |fffd|berschreiben.</DIV>" & _
"<DIV>Hinweise zur Bedienung der Retourenliste finden Sie im Dokument ""User-manual-Returnlist.pdf""</DIV>" & _
"<P></P>" & _
"<DIV>Zur Aktualisierung bzw. bei Fragen zur Vorlage ""Returnlist"" wenden Sie sich bitte an Ihren zust|fffd|ndigen Sachbearbeiter.</DIV>" & _
"<DIV>&nbsp;</DIV>" & _
"<P></P>" & _
"<P></P>" & _
"<DIV>Dear Ladies and Gentlemen,</DIV>" & _
"<P></P>" & _
"<DIV>&nbsp;</DIV>" & _
"<DIV>Here is the latest version of the template, to be used when returning spare parts.</DIV>" & _
"<P></P>" & _
"<DIV>Please unpack the Returnlist.zip file onto your PC, or company network.</DIV>" & _
"<DIV>Please make sure that when unpacking this file, the file folder structure is retained.</DIV>" & _
"<DIV>The existing data can be erased or overwritten.</DIV>" & _
"<DIV>For information on using the Returnslist please see the ""User-manual-Returnlist.pdf""</DIV>" & _
"<P></P>" & _
"<DIV>For updates, or to answer any questions you may have regarding the template 'Returnlist', please contact your TWS returns administrator.</DIV>"

Set oOutlookApp = GetObject(, "Outlook.Application")
If ERR <> 0 Then
    Set oOutlookApp = CreateObject("Outlook.Application")
    bStarted = True
End If

Set oItem = oOutlookApp.CreateItem(olMailItem)

With oItem
    .To = ""
    .Subject = "Retourenliste / Return list , update :" & Date
    .htmlBody = textthml
    .Attachments.Add Source:="c:\temp\Returnlist.zip"
    .Display
End With

If bStarted Then
    oOutlookApp.Quit
End If

Set oItem = Nothing
Set oOutlookApp = Nothing
Kill "C:\Temp\Returnlist.zip"

End Sub

Sub Sendemail_mitNetzwerk()
Dim bStarted As Boolean
Dim oOutlookApp As Outlook.Application
Dim oItem As Outlook.MailItem
Dim betreff As String
Dim wsh As New WshShell
Dim sPath As String

On Error Resume Next

MakeDesktopShortcut
sPath = wsh.SpecialFolders.Item("Desktop")

textthml = "Sehr geehrte Damen und Herren," & _
"<P></P>" & _
"<DIV>&nbsp;</DIV>" & _
"<DIV>anbei Verkn|fffd|pfung oder Link der Vorlage zur R|fffd|cksendung von Ersatzteilen.</DIV>" & _
"<DIV><A href = file://srvditz1/logistic/xChange/Retouren_Ausland/Information/TWS_Returnlist.xltm ><FONT color=#0000ff>Link Retourenliste (ab Office 2007)</FONT> </A></DIV>" & _
"<DIV>&nbsp;</DIV>" & _
"<P></P>" & _
"<DIV>Die Verwendung der Verkn|fffd|pfung oder Link ist nur m|fffd|glich wenn Sie einen Zugriff auf das Trumpfnetzwerk haben.</DIV>" & _
"<DIV>Bitte benutzen Sie nur diese Verkn|fffd|pfung oder Link und keine Kopie der Orginalliste.</DIV>" & _
"<DIV>Hinweise zur Bedienung der Retourenliste finden Sie im Dokument ""User-manual-Returnlist"" <A href = file://srvditz1/logistic/xChange/Retouren_Ausland/Information/User-manual-Returnlist.pdf ><FONT color=#0000ff>Link Hilfe</FONT></A> </DIV>" & _
"<DIV>Bei Fragen zur Vorlage ""Returnlist"" k|fffd|nnen Sie sich auch gern an Ihren zust|fffd|ndigen Sachbearbeiter wenden.</DIV>" & _
"<DIV>&nbsp;</DIV>" & _
"<P></P>" & _
"<DIV>Dear Ladies and Gentlemen,</DIV>" & _
"<P></P>" & _
"<DIV>&nbsp;</DIV>" & _
"<DIV>Attached is the shortcut or link, to be used when returning spare parts.</DIV>" & _
"<DIV><A href = file://srvditz1/logistic/xChange/Retouren_Ausland/Information/TWS_Returnlist.xltm ><FONT color=#0000ff>Link Returnlist (Office 2007 or higher)</FONT> </A></DIV>" & _
"<DIV>&nbsp;</DIV>" & _
"<P></P>" & _
"<DIV>The usage of the shortcut or link is only possible when you have access to Trumpf server network.</DIV>" & _
"<DIV>Please only use this shortcut or link, and not a copy, of the original list.</DIV>" & _
"<DIV>For information on using the Returnslist please see the ""User-manual-Returnlist"".&nbsp;<A href = file://srvditz1/logistic/xChange/Retouren_Ausland/Information/User-manual-Returnlist.pdf ><FONT color=#0000ff>Link Help</FONT></A> </DIV>" & _
"<DIV>If you have any questions regarding the ""Returnlist"" template please contact your TWS returns administrator.</DIV>"

Set oOutlookApp = GetObject(, "Outlook.Application")
If ERR <> 0 Then
    Set oOutlookApp = CreateObject("Outlook.Application")
    bStarted = True
End If

Set oItem = oOutlookApp.CreateItem(olMailItem)

With oItem
    .To = ""
    .Subject = "Link Retourenliste / Return list"
    .htmlBody = textthml
    .Attachments.Add Source:=sPath & "\TWS_Returnlist.lnk"
    .Display
End With

If bStarted Then
    oOutlookApp.Quit
End If

Set oItem = Nothing
Set oOutlookApp = Nothing
Set wsh = Nothing
Kill sPath & "\TWS_Returnlist.lnk"

End Sub

Sub MakeDesktopShortcut()
    Dim wsh As New WshShell
    Dim SC As WshShortcut
    Dim sPath As String, sFile As String
    
    sPath = wsh.SpecialFolders.Item("Desktop")
    Set SC = wsh.CreateShortcut(sPath & "\TWS_Returnlist.lnk")
    SC.TargetPath = Left(OrgPfadlisten, 57) & "TWS_Returnlist.xltm"
    SC.Save
    Set wsh = Nothing
End Sub

Function WindowsZip(sFile, sZipFile)
    Set oZipShell = CreateObject("WScript.Shell")
    Set oZipFSO = CreateObject("Scripting.FileSystemObject")
  
    If Not oZipFSO.FileExists(sZipFile) Then
        NewZip (sZipFile)
    End If

    Set oZipApp = CreateObject("Shell.Application")
    sZipFileCount = oZipApp.Namespace(sZipFile).Items.Count

    aFileName = Split(sFile, "\")
    sFileName = (aFileName(UBound(aFileName)))
  
    'listfiles
    sDupe = False
    For Each sFileNameInZip In oZipApp.Namespace(sZipFile).Items
        If LCase(sFileName) = LCase(sFileNameInZip) Then
            sDupe = True
            Exit For
        End If
    Next
  
    If Not sDupe Then
        oZipApp.Namespace(sZipFile).Copyhere sFile

        'Keep script waiting until Compressing is done
        On Error Resume Next
        sLoop = 0
        Do Until sZipFileCount < oZipApp.Namespace(sZipFile).Items.Count
            WScript.Sleep (100)
            sLoop = sLoop + 1
        Loop
        On Error GoTo 0
    End If
End Function

Sub NewZip(sNewZip)
    Set oNewZipFSO = CreateObject("Scripting.FileSystemObject")
    Set oNewZipFile = oNewZipFSO.CreateTextFile(sNewZip)
    oNewZipFile.Write Chr(80) & Chr(75) & Chr(5) & Chr(6) & String(18, 0)
    oNewZipFile.Close
    Set oNewZipFSO = Nothing
End Sub
Sub list_import()
    Dim listimport As String
    Dim Iwb As Workbook
    Dim Awb As Workbook
    Dim lnr As Range
    Dim lastrow As Long
    Dim checkImport As String
   
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = "Retourenliste von TG/VG ausw|fffd|hlen"
        .InitialFileName = "\\srvditz1\logistic\xchange\Retouren_Ausland\"
        .InitialView = msoFileDialogViewLargeIcons
        .ButtonName = "Ok"
        If .Show = -1 Then
            listimport = .SelectedItems(1)
        End If
    End With
    If listimport <> "" Then
        Application.ScreenUpdating = False
        Application.EnableEvents = False
            
        Set Awb = ActiveWorkbook
        Set Iwb = GetObject(listimport)
        'Pfadimport = Mid(listimport, 1, Len(listimport) - Len(Iwb.Name))
 
           
        'check Importliste
        With Iwb.Sheets("Returnlist")
            If .Cells(4, 1) <> "Pos." Then checkImport = "X"
            If .Cells(4, 20) <> "TWS notes" Then checkImport = "X"
            
            If checkImport <> "X" Then
                lastrow = .UsedRange.Rows.Count
                .Range(.Cells(5, 1), .Cells(lastrow, 20)).Copy Awb.Sheets(1).Cells(5, 1)
                    
                Set lnr = .Cells.Find("List no. / Invoice no.:")
                If Not lnr Is Nothing Then Awb.Sheets(1).Cells(1, 4) = lnr.Offset(0, 1)
                Awb.Sheets(1).Cells(1, 19) = .Cells(1, 19) 'Feld Erstelldatum
                Awb.Sheets(1).Cells(2, 19) = .Cells(2, 19) 'Feld Ersteller Liste
                Awb.Sheets(1).Cells(1, 20) = .Cells(1, 20) 'Feld Bearbeitungsdatum
                Awb.Sheets(1).Cells(3, 16) = .Cells(3, 16) 'Feld Lagerausl|fffd|sung
                
                Range("A5:A" & lastrow).RowHeight = 25.5
                Antwort = MsgBox("Liste neu formatieren?" & vbLf & vbLf & _
                "- Materialdaten (Bezeichnung / TWS Listpreis) neu laden" & vbLf & _
                "- Maschinendaten (Gew|fffd|hrleistung) neu laden" & vbLf & _
                "- Formatierung mit farblichem Zeilenraster", vbYesNo, "Listenformat")
                If Antwort = 6 Then Check_Format
                Range("T2") = Registry_Read("HKEY_CURRENT_USER\Trumpf\UserInfo\User\UserInitials")
            Else
                MsgBox "Importierte Liste hat nicht das richtige Listenformat", vbInformation, "Fehler Import"
                listimport = ""
            End If
        End With
        Iwb.Close False
        
        
        'Abfrage Listen speichern
        Select Case Right(listimport, 4)
            Case Is = "xlsm"  'Office 2007 version
            Antwort = MsgBox("Soll die importierte Liste |fffd|berschrieben werden?", vbInformation + vbDefaultButton2 + vbYesNo, "Speichern als...")
            If Antwort = 6 Then
                Application.DisplayAlerts = False
                Awb.SaveAs listimport, xlOpenXMLWorkbookMacroEnabled
                Application.DisplayAlerts = True
            End If
            
            Case Is = ".xls"
            Antwort = MsgBox("Die importierte Liste ist eine Office-97 Version." & vbCrLf & _
            "Durch neue Version Office 2007 ersetzen?", vbInformation + vbDefaultButton2 + vbYesNo, "Speichern als...")
            If Antwort = 6 Then
                Application.DisplayAlerts = False
                Awb.SaveAs listimport & "m", xlOpenXMLWorkbookMacroEnabled
                Kill listimport
                Application.DisplayAlerts = True
            End If
        End Select
        
        Application.EnableEvents = True
        Application.ScreenUpdating = True
    End If
End Sub
Sub Check_Format()
    Application.ScreenUpdating = True
    Application.EnableEvents = False
        lastx = Cells(Rows.Count, 2).End(xlUp).Row
        For i = 5 To lastx
            
            With Cells(i, 2) 'Spalte Materialnummer
                ID = Trim(.Value)
                .ClearContents
                .NumberFormat = "0000000"
                .HorizontalAlignment = xlGeneral
                .Value = Format(ID, "0000000")
            End With
                
            With Cells(i, 4) 'Spalte St|fffd|ckzahl
                If IsNumeric(.Value) = False Then .Value = ExtractNumber(.Value, Cells(i, 1))
            End With
          
            With Cells(i, 7) 'Spalte TWS Listenpreis
                .ClearContents
                .NumberFormat = "#,##0.00 _|fffd|"
                .HorizontalAlignment = xlRight
            End With
            
            With Cells(i, 8) 'Spalte Maschinenliste
                Trim (.Value)
                .HorizontalAlignment = xlCenter
            End With
            
            With Cells(i, 9) 'Spalte Garantiedaten Maschinen
                If Not IsDate(.Value) Then .Value = ""
            End With

        Next i
    Application.EnableEvents = True
    For i = 1 To 2
        s = Choose(i, 2, 8)
        Range(Cells(5, s), Cells(lastx, s)).Copy
        Cells(5, s).Select
        ActiveSheet.Paste
    Next i
End Sub
Private Function ExtractNumber(str, pos) As Long
    For i = 1 To Len(str)
        If Not IsNumeric(Mid(str, i, 1)) Then Exit For
    Next i
    If i > 1 Then
        ExtractNumber = Mid(str, 1, i - 1)
    Else
ERR:    Antwort = InputBox("Mengenangabe zur Pos: " & pos & " ist nicht korrekt." & Chr(10) & _
        "Bitte Neue Menge eingeben.", "Menge")
        If IsNumeric(Antwort) Then ExtractNumber = Antwort Else GoTo ERR
    End If
End Function
Sub clear_Before_savetemplate()
Attribute clear_Before_savetemplate.VB_ProcData.VB_Invoke_Func = "m\n14"
    Range("A1:B3").ClearContents
    Range("S1:T2").ClearContents
    Sheets(1).TWS_CTool.Visible = False
End Sub
Sub Insert_picture(i)
    If Dir(PfadBilderSIS & Format(Cells(i, 2), "0000000") & ".jpg") <> "" Then
        With ActiveSheet.Cells(i, 2)
            .ClearComments
            Set objComment = .AddComment
        End With
        With objComment
           .Shape.Fill.UserPicture PfadBilderSIS & Format(Cells(i, 2), "0000000") & ".jpg"
           .Shape.Height = 150
           .Shape.Width = 150
        End With
    End If
End Sub
Sub Show_picture(IDNR)
    Dim p
    Set p = CreateObject("shell.application")
    p.Open "\\srvditz2\tksupport\twe\" & Format(IDNR, "0000000") & ".jpg"
End Sub



Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Zollliste, 45, 4, MSForms, CommandButton"
Attribute VB_Control = "CMB_Search, 234, 5, MSForms, CommandButton"
Attribute VB_Control = "suchestring, 235, 6, MSForms, TextBox"
Attribute VB_Control = "Label1, 280, 7, MSForms, Label"
Attribute VB_Control = "Label2, 577, 8, MSForms, Label"
Attribute VB_Control = "Creditnotelist, 618, 9, MSForms, CommandButton"
Attribute VB_Control = "L1, 630, 10, MSForms, CommandButton"
Attribute VB_Control = "Label3, 1042, 11, MSForms, Label"
Option Explicit
Private Sub CMB_Search_Click()
    Dim str As String
    Dim i%
    On Error GoTo error
    str = ActiveSheet.suchestring
    Cells.Find(str, ActiveCell).Activate
error:
End Sub

Private Sub suchestring_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Dim i%
    If KeyCode = 13 Then
        Dim str As String
        On Error GoTo error
        str = ActiveSheet.suchestring
        Cells.Find(str).Activate
    End If
    Exit Sub
error:
    MsgBox "Keine Daten gefunden", vbCritical, "Fehler Suchtext"
    Range("A5").Select
End Sub
Private Sub suchestring_GotFocus()
    suchestring.Value = ""
End Sub
Private Sub Creditnotelist_Click()
    Creditnoteliste
End Sub
Private Sub L1_Click()
    Dim Y
    Dim TxtZ, TxtK As String
    
    If L1.Caption = "DE" Then L1.Caption = "EN" Else L1.Caption = "DE"
    For Y = 5 To Cells(Rows.Count, 2).End(xlUp).Row
        If Not Cells(Y, 3).Comment Is Nothing Then Switch Y
    Next Y
End Sub
Sub Switch(Y) 'Sprache wechseln
    Dim TxtZ, TxtK As String
    TxtZ = Cells(Y, 3)
    TxtK = Cells(Y, 3).Comment.Text
    Cells(Y, 3) = TxtK
    If TxtZ <> "" Then Cells(Y, 3).Comment.Text Text:=TxtZ
End Sub
Private Sub Label2_Click()
    Dim s
    Set s = CreateObject("shell.application")
    s.Open Left(Range("A1"), Len(Range("A1")) - 6) & "User-manual-Returnlist.pdf"
End Sub
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Dim X, Y, i
    
    Reset_Kontext
    X = Target.Row: Y = Target.Column
    user = Registry_Read("HKEY_CURRENT_USER\Trumpf\UserInfo\User\UserInitials")
    If PermitUser Like "*" & CutUser(user) & "*" Then
       
        '*****Men|fffd|kontext*****
        If X = 4 And Y < 21 Then
            Kontext_Add "Retourenmaske", "M_Maske", "IMG_MASKE"
            Kontext_Add "R|fffd|cksendepruefung", "M_Listcheck", "IMG_LISTCHECK"
            Kontext_Add "L|fffd|ndermatrix", "M_landmatrix", "IMG_PEOPLE"
            Kontext_Add "Lageraufl|fffd|sung", "M_lagerpool", "IMG_PROZENT"
            Kontext_Add "TWS-Zollliste erstellen", "M_Zolllist", "IMG_LISTE"
            Kontext_Add "Link-Update senden", "M_Update", "IMG_EMAIL"
            Kontext_Add "Liste importieren", "M_Listimport", "IMG_REFRESH"
            'Kontext_Add "CheckALL", "RFCchecklist", "IMG_LISTCHECK"
        End If
        
        '*****Positionskontext*****
        If X > 4 And Cells(X, Y) <> "" Then
            Select Case Y
                Case 2
                Kontext_Add "Materialcockpit", "Material_Cockpit", "IMG_SAP"
                Kontext_Add "Material anzeigen", "Material_anzeigen", "IMG_SAP"
                Kontext_Add "St|fffd|ckliste anzeigen", "Stueckliste", "IMG_SAP"
                Kontext_Add "SO10-Text anzeigen", "SO10text_anzeigen", "IMG_SAP"
               
                Case 5
                Kontext_Add "Auftrag anzeigen", "Auftrag_Anzeigen", "IMG_SAP"
                Kontext_Add "Belegfluss Auftrag", "Auftrag_Belegfluss_Alle", "IMG_SAP"
                
                Case 6
                Kontext_Add "Belegfluss Rechnung anzeigen", "Rechnung_Belegfluss", "IMG_SAP"
                
                Case 8
                Kontext_Add "Lebenslauf zur Maschine anzeigen", "Maschinenlebenslauf", "IMG_SIS"
                Kontext_Add "Maschinen Info anzeigen", "MaschinenInfo", "IMG_SIS"
                
                Case 13
                Kontext_Add "Serialhistorie anzeigen", "Serialhistorie", "IMG_SAP"
                
                Case 14
                Kontext_Add "Fehlerbericht zur Fallnummer anzeigen", "Fallnummer", "IMG_SIS"
                
                Case 16
                Kontext_Add "R|fffd|cksendepr|fffd|fung OK", "Format_Returncheck", "IMG_OK"
                
                Case 17
                Kontext_Add "Meldung anzeigen", "QMeldung_aendern", "IMG_SAP"
                
            End Select
        End If
    End If
End Sub
Private Sub Worksheet_Change(ByVal Target As Excel.Range)
Dim WB As Workbook
Dim rZelle As Range
Dim WRONGMAT As Boolean
Dim X, Y, z, XMAT, IDNR As Long
Dim Pfadliste, MASCHNR As String

Pfadliste = ActiveSheet.Cells(1, 1)
On Error GoTo MatErr
    If Target.Row > 4 Then
    X = Target.Row
    Y = Target.Column
    XMAT = Selection.Rows.Count - 1
    If XMAT > 0 Then X = Selection.Row
    
    Application.EnableEvents = False
    Select Case Target.Column
    
        Case Is = 2
        If Cells(X, Y) <> "" Then
            If WB Is Nothing Then Set WB = GetObject(Pfadliste & "Material.xlsb") 'Material aus Materiallist komplettieren
            If XMAT > 0 Then Updatebalken_load ("Import material data") 'Load Fortschrittsbalken
            For z = X To X + XMAT
                Application.ScreenUpdating = False
                    IDNR = Cells(z, Y)
                    Set rZelle = WB.ActiveSheet.Columns(1).Find(IDNR, LookAt:=xlPart, LookIn:=xlValues)
                    If Not rZelle Is Nothing Then
                         If rZelle = IDNR Then
                             Cells(z, Y + 1).Font.ColorIndex = 1
                             Cells(z, Y + 1) = rZelle.Offset(0, 2) 'Materialbezeichnung Englisch
                             format_comment z, Y + 1, rZelle.Offset(0, 1), False 'Materialbezeichnung Deutsch
                             Cells(z, Y + 5) = rZelle.Offset(0, 3) 'Listenpreis
                             Cells(z, Y + 13) = GSREGEL(rZelle.Offset(0, 7).Value) 'Gutschriftregelung
                         Else
                             WRONGMAT = True
                         End If
                     Else
                         WRONGMAT = True
                     End If
                     If WRONGMAT = True Then
                         With Cells(z, Y + 1)
                             .ClearComments
                             .Font.ColorIndex = 3
                             .Value = "Unknown Material no."
                         End With
                         Cells(z, Y + 5) = 0
                         WRONGMAT = False
                     End If
                    
                    If Not Cells(z, 3).Comment Is Nothing And L1.Caption = "DE" Then Switch z 'Switch Beschreibung DE <--> EN
                    If z = 5 Then Cells(z, Y - 1) = 1 Else Cells(z, Y - 1) = Cells(z - 1, Y - 1) + 1 'Z|fffd|hler Positionsnummer
                    setcode (z)
                    checklistenpos z
                    Rows(z).RowHeight = 24.75
                    Range(Cells(z, 1), Cells(z, 20)).VerticalAlignment = xlCenter
                Application.ScreenUpdating = True
                If XMAT > 0 Then Updatebalken_refresh XMAT + 1, z - X + 1 'Refresh Fortschrittsbalken
            Next z
        End If
        
        Case Is = 8
        If Cells(X, Y) <> "" Then
            If WB Is Nothing Then Set WB = GetObject(Pfadliste & "Maschine.xlsb")
            If XMAT > 0 Then Updatebalken_load ("Import machine data") 'Load Fortschrittsbalken
            For z = X To X + XMAT
                Application.ScreenUpdating = False
                    MASCHNR = UCase(Trim(Cells(z, Y))): Cells(z, Y) = MASCHNR
                    Set rZelle = WB.ActiveSheet.Columns(1).Find(MASCHNR, LookAt:=xlPart, LookIn:=xlValues)
                    If Not rZelle Is Nothing Then
                        Cells(z, Y + 1) = rZelle.Offset(0, 1)
                        checklistenpos z
                    End If
                Application.ScreenUpdating = True
                If XMAT > 0 Then Updatebalken_refresh XMAT + 1, z - X + 1 'Refresh Fortschrittsbalken
            Next z
        End If
        
        Case Is = 4, 7, 5, 12
        checklistenpos X
        
        Case Is = 10
        If Cells(X, Y) <> "" Then
            If XMAT > 0 Then Updatebalken_load ("Check Return permitted") 'Load Fortschrittsbalken
            For z = X To X + XMAT
                Application.ScreenUpdating = False
                    checklistenpos z
                Application.ScreenUpdating = True
                If XMAT > 0 Then Updatebalken_refresh XMAT + 1, z - X + 1 'Refresh Fortschrittsbalken
            Next z
        End If
        
    End Select
    End If
MatErr:
    Application.EnableEvents = True
Exit Sub
End Sub
Private Sub Zollliste_Click()
Dim i
Dim customs

If ThisWorkbook.Path = "" Then
    MsgBox "Erstellen der Zollliste ist nicht m|fffd|glich." & Chr(13) & _
    "Bitte Retourenliste zuerst speichern." & Chr(13) & Chr(13) & _
    "*****************************************" & Chr(13) & _
    "Create Customs list is not possible." & Chr(13) & _
    "Please first save the Returnlist.", vbCritical, "Zollliste / Customs list"
    Exit Sub
End If
For i = 1 To Sheets.Count
    If Sheets(i).Name = "Customs-list" Then customs = "on"
Next i
If customs = "on" Then
    Dim Antwort
    Antwort = MsgBox("The Customs list exists already." & (Chr(13)) & (Chr(13)) & _
    "Press 'yes' for current list will be erased and a new one will be created." & (Chr(13)) & _
    "'No' for abort action.", vbCritical + vbYesNo + vbApplicationModal, "New Customs")
    If Antwort = 7 Then Exit Sub
    Application.DisplayAlerts = False
    Sheets("Customs-list").Delete
    Application.DisplayAlerts = True
End If

check_price
If check_price = "" Then
    create_customslist
    Zoll.Show
    NewWorksheetcode
    AddButtonAndCode
Else
    Cells(check_price, 7).Select
    MsgBox "Preis zur Position " & Cells(check_price, 1) & " ist nicht vorhanden." & Chr(13) & _
    "*****************************************" & Chr(13) & _
    "Price for position " & Cells(check_price, 1) & " do not exist.", vbCritical, "Preisfehler / Error Pricing"
End If
End Sub
Attribute VB_Name = "Zoll"
Attribute VB_Base = "0{480221B4-446A-44F3-86CB-EA903373E5CE}{BEDE6ECB-4CCD-46F7-9FB6-EF7EB6D6AE0A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Change()
    If ComboBox1 <> "" Then Readtemplate
End Sub
Private Sub CommandButton1_Click()
Dim RL As Worksheet
Dim DL As Worksheet

Set RL = Sheets("Returnlist")
Set DL = Sheets("Customs-list")

'Versender eintragen
For i = 1 To 5
DL.Cells(i + 1, 4) = Zoll.Controls("text_" & Format(i, "00"))
Next i

'Rechnungsempf|fffd|nger eintragen
For i = 6 To 9
DL.Cells(i - 4, 5) = Zoll.Controls("text_" & Format(i, "00"))
Next i
DL.Cells(i - 4, 5) = Zoll.Controls("text_10") & Zoll.Controls("text_11")

'Warenempf|fffd|nger eintragen
For i = 12 To 14
DL.Cells(i - 10, 6) = Zoll.Controls("text_" & Format(i, "00"))
Next i
DL.Cells(i - 10, 6) = Zoll.Controls("text_15") & Zoll.Controls("text_16")

'Faktor Lageraufl|fffd|sung bestimmen
faktorlager = 1
If RL.Range("p3") <> "" Then
    Select Case Mid(Sheets("Returnlist").Range("p3"), 17, 3) ' Lageraufloesung.Lager_Prozent
        Case Is = "80%"
        faktorlager = 0.8
        Case Is = "60%"
        faktorlager = 0.6
    End Select
End If

'Daten aus Retourenliste |fffd|bernehmen
ilastrow = RL.Cells(Rows.Count, 1).End(xlUp).Row
irowDL = 11
For i = 5 To ilastrow
    If RL.Cells(i, 16) = "yes" Then
        DL.Cells(irowDL, 2) = RL.Cells(i, 1) 'Position kopieren
        DL.Cells(irowDL, 3) = RL.Cells(i, 2) 'Materialnummer kopieren
        DL.Cells(irowDL, 3).NumberFormat = "0000000"
        DL.Cells(irowDL, 4) = RL.Cells(i, 3) 'Beschreinung Englisch kopieren
        DL.Cells(irowDL, 6) = RL.Cells(i, 4) 'Anzahl kopieren
        DL.Cells(irowDL, 7) = RL.Cells(i, 10) 'R|fffd|cksendegrund kopieren
        
        If RL.Cells(i, 15) = "Special Regulation" Then rule = 1 Else rule = 0
        Set suche1 = RL.Cells(i, 3).Find(What:="RS 3021", LookIn:=xlValues)
        Set suche2 = RL.Cells(i, 3).Find(What:="RS 2048", LookIn:=xlValues)
        Set suche3 = RL.Cells(i, 3).Find(What:="(R)", LookIn:=xlValues)
        Set suche4 = RL.Cells(i, 3).Find(What:="eco-line", LookIn:=xlValues)
        Select Case RL.Cells(i, 10)
            Case Is = 1, 2, 3, 4, 5, 6, 11, 12, 15, 16, 17, 21
            DL.Cells(irowDL, 9) = ((Format(RL.Cells(i, 7), "0.00") * DL.Cells(irowDL, 6)) - (Format(RL.Cells(i, 7), "0.00") * DL.Cells(irowDL, 6) * 0.25)) * faktorlager 'Summe (Preis * Anzahl) kopieren
            If faktorlager < 1 Then format_comment irowDL, 9, Sheets("Returnlist").Range("p3"), False
            
            Case Is = 13, 14, 18
            DL.Cells(irowDL, 9) = ((Format(RL.Cells(i, 7), "0.00") * DL.Cells(irowDL, 6)) - (Format(RL.Cells(i, 7), "0.00") * DL.Cells(irowDL, 6) * 0.25)) * 0.2 'Summe (Preis * Anzahl) kopieren
            If Not suche1 Is Nothing And rule = 1 Then zp = 500
            If Not suche2 Is Nothing And rule = 1 Then zp = 500
            If Not suche3 Is Nothing And zp > 0 Then zp = 250
            If Not suche4 Is Nothing And zp > 0 Then zp = 250
            If zp > 0 Then DL.Cells(irowDL, 9) = zp
        
            
        End Select
        DL.Cells(irowDL, 9).NumberFormat = "#,##0.00"
        If irowDL Mod 2 = 0 Then Range(Cells(irowDL, 1), Cells(irowDL, 11)).Interior.ColorIndex = 15
        irowDL = irowDL + 1
        zp = 0
    End If
Next i

DL.Cells(irowDL + 2, 1) = "Machinery parts for return."
DL.Cells(irowDL + 3, 1) = "Declared value for customs clearance purpose only."
DL.Cells(irowDL + 4, 1) = "Country of orgin: Germany"
DL.Cells(irowDL + 5, 1) = "Terms of delivery: "
DL.Cells(irowDL + 5, 4) = Zoll.Text_17

finaldutylist
If CheckBox1 = True Then Temp = "adress": Writetemplate Temp
Unload Me
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then Cancel = True
End Sub
Private Sub UserForm_Initialize()
    Pfad = "C:\Trumpf\Returnlist\Templates\"
    sName = Dir(Pfad & "Adress_*.txt")
    Do While sName > ""
        ComboBox1.AddItem sName
        sName = Dir
    Loop
End Sub


Attribute VB_Name = "Zollliste"
Sub TWS_Customslist_create()
    Application.ScreenUpdating = False
    For i = 1 To Sheets.Count
        If Sheets(i).Name = "TWS-Customs-list" Then
            Application.DisplayAlerts = False
            Sheets(i).Delete
            Application.DisplayAlerts = True
        End If
    Next i
    Sheets.Add After:=Worksheets(Worksheets.Count)
    ActiveWindow.DisplayHeadings = False
    Sheets(1).Shapes("Trumpflogo").Copy

    '+++++ Formatierung +++++
    With ActiveSheet
        .Name = "TWS-Customs-list"
        .Cells.VerticalAlignment = xlCenter
        .Columns(1).ColumnWidth = 4.57
        .Columns(2).ColumnWidth = 9.14
        .Columns(3).ColumnWidth = 40
        .Columns(4).ColumnWidth = 25
        .Columns(5).ColumnWidth = 7
        .Columns(6).ColumnWidth = 20
        .Columns(7).ColumnWidth = 20
        .Columns(8).ColumnWidth = 18
        .Rows(10).RowHeight = 24
        .Paste 'Trumpf Logo kopieren
        
        With .Cells(1, 8) 'Datumsfeld anlegen und formatieren
            .Value = "Date:"
            .HorizontalAlignment = xlRight
            .Font.Bold = True
        End With
        With .Cells(1, 9)
            .Value = Date
            .HorizontalAlignment = xlLeft
            .Font.Bold = True
        End With
        
        With .Cells(1, 3) 'Absenderfeld anlegen und formatieren
            .Value = "Absender:"
            .Font.Underline = xlUnderlineStyleSingle
            .Font.Bold = True
        End With
        
        With .Cells(1, 4) 'Rechnungsempf|fffd|nger anlegen und formatieren
            .Value = "Rechnungsempf|fffd|nger:"
            .Font.Underline = xlUnderlineStyleSingle
            .Font.Bold = True
        End With
        .Cells(2, 4) = "TRUMPF WerkzeugmaschinenGmbH+Co."
        .Cells(3, 4) = "Johann-Maus-Str. 2"
        .Cells(4, 4) = "71254 Ditzingen Germany"
        
        With .Cells(1, 6) 'Warenempf|fffd|nger anlegen und formatieren
            .Value = "Warenempf|fffd|nger:"
            .Font.Underline = xlUnderlineStyleSingle
            .Font.Bold = True
        End With
        .Cells(2, 6) = "TRUMPF WerkzeugmaschinenGmbH+Co."
        .Cells(3, 6) = "Dienstleistungzentrum / Bereich Retouren"
        .Cells(4, 6) = "Trumpfstr. 1 / Tor 11, 71254 Ditzingen Germany"
        
        'Spalten|fffd|berschriften und formatieren
        .Range("c2:f6").Font.Size = 8
        .Range("c2:f6").Font.Bold = True
        .Cells(8, 3) = "Listennummer:"
        .Cells(8, 3).HorizontalAlignment = xlRight
        .Cells(8, 3).Font.Bold = True
        .Cells(10, 1) = "Pos."
        .Cells(10, 2) = "Materialnr."
        .Cells(10, 3) = "Beschreibung"
        .Cells(10, 4) = "Rechnungsnummer"
        .Cells(10, 5) = "St|fffd|ck"
        .Cells(10, 6) = "Summe (|fffd|)"
        .Cells(10, 7) = "TNR"
        .Cells(10, 8) = "Gesamtgewicht  (Kg)"
        
        With .Range("A10:H10")
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Interior.ColorIndex = 48
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeRight).Weight = xlThin
            .Borders(xlInsideVertical).Weight = xlThin
            .Borders(xlInsideHorizontal).Weight = xlThin
        End With
        With .PageSetup
            .Orientation = xlLandscape
            .Zoom = 88
            .LeftMargin = Application.InchesToPoints(0.393700787401575)
            .RightMargin = Application.InchesToPoints(0.393700787401575)
            .TopMargin = Application.InchesToPoints(0.393700787401575)
            .BottomMargin = Application.InchesToPoints(0.393700787401575)
        End With
        .Range("A1:I10").Select
        ActiveWindow.Zoom = True
        .Range("A11").Select
    End With
    Create_Button
    ActiveWindow.FreezePanes = True
    Application.ScreenUpdating = True
End Sub
Sub TWS_Customslist_Datacopy()
    Dim RL, cl As Worksheet
    Dim X As Integer
   
    Set RL = Sheets("Returnlist")
    Set cl = Sheets("TWS-Customs-list")
    Set WBM = GetObject(RL.Cells(1, 1) & "Material.xlsb")

    lastx = RL.Cells(Rows.Count, 1).End(xlUp).Row: p = 11
    For c = 5 To lastx
        If RL.Cells(c, 16) = "yes" Then
            cl.Cells(p, 1) = RL.Cells(c, 1) 'Position
            cl.Cells(p, 2) = RL.Cells(c, 2) 'Materialnummer
            cl.Cells(p, 2).NumberFormat = "0000000"
            cl.Cells(p, 4) = RL.Cells(c, 5)
            cl.Cells(p, 5) = RL.Cells(c, 4) 'St|fffd|ckzahl
            cl.Cells(p, 6) = Customslist_preis(c, Format(RL.Cells(c, 10), "00")) 'Listenpreis abzgl. Zollpauschale und Abh|fffd|ngigkeit R|fffd|cksendegrund
            cl.Cells(p, 6).NumberFormat = "0.00"
            
            Set rZelle = WBM.Sheets(1).Columns(1).Find(CLng(RL.Cells(c, 2)), LookAt:=xlPart, LookIn:=xlValues)
            If Not rZelle Is Nothing Then
                cl.Cells(p, 3) = rZelle.Offset(0, 1) 'Deutsche Bezeichnung
                cl.Cells(p, 7) = rZelle.Offset(0, 6) 'Zolltarifnummer
                cl.Cells(p, 8) = CStr(rZelle.Offset(0, 4)) 'Gewicht |fffd|bernehmen
                If rZelle.Offset(0, 5) = "G" Then cl.Cells(p, 8) = cl.Cells(p, 8) / 1000 'Gewichtsumrechnung bei Gramm
                cl.Cells(p, 8) = cl.Cells(p, 8) * cl.Cells(p, 5) 'Gewicht mit Menge multiplizieren
            Else
                cl.Cells(p, 3) = RL.Cells(c, 3) 'Bezeichnung aus Returnlist |fffd|bernehmen
            End If
            p = p + 1
        End If
    Next c
    WBM.Close False
    
    If SAP_LOGON = False Then Exit Sub
    lastx = cl.Cells(Rows.Count, 1).End(xlUp).Row
    With Session
    
        'Auftragsnummer in Rechnungsnummer umwandeln
        .starttransaction "ZSD_0086"
        clear_selection 16
        For c = 11 To lastx
            If cl.Cells(c, 4) = "" Then GoTo e1
            .findById("wnd[0]/usr/ctxtDD_VBELN-LOW").Text = Left(cl.Cells(c, 4), 8)
            .findById("wnd[0]/usr/ctxtSP$00003-LOW").Text = Left(cl.Cells(c, 2), 7)
            .findById("wnd[0]").sendVKey 8
            If .findById("wnd[0]/sbar").Text = "" Then
                Set grid = .findById("wnd[0]/usr/cntlGRID1/shellcont/shell"): X = 0: RGNMR = "": BELEGTYP = ""
                
                Do Until grid.getcellvalue(X, "VBAK-VBELN") = "" Or BELEGTYP = "U"
                    BELEGTYP = grid.getcellvalue(X, "VBFA-VBTYP_N")
                    If BELEGTYP = "5" Or BELEGTYP = "M" Or BELEGTYP = "U" Then
                        If RGNMR <> "" Then
                            If BELEGTYP = "M" Or BELEGTYP = "U" Then RGNMR = ""
                        End If
                        If RGNMR = "" Then
                            RGNMR = grid.getcellvalue(X, "VBFA-VBELN")
                            RGDT = grid.getcellvalue(X, "VBFA-ERDAT")
                            cl.Cells(c, 4) = RGNMR
                            format_comment c, 4, CStr(RGDT), False
                            If DateDiff("d", CDate(RGDT), Now) > 1095 Then cl.Cells(c, 4).Font.Color = 255
                        End If
                    End If
                    X = X + 1
                Loop
                .findById("wnd[0]").sendVKey 3
            Else
                cl.Cells(c, 4) = "Mat. / Auftrag nicht vorhanden"
            End If
e1:     Next c

        'Importnummer umrechnen
        .starttransaction "ZSD_0087"
        For c = 11 To lastx
            If cl.Cells(c, 7) = "" Then GoTo e2
            .findById("wnd[0]/usr/ctxtSP$00001-LOW").Text = cl.Cells(c, 7)
            .findById("wnd[0]").sendVKey 8
            If .findById("wnd[0]/sbar").Text = "" Then
                Set grid = .findById("wnd[0]/usr/cntlCONTAINER/shellcont/shell")
                cl.Cells(c, 7) = grid.getcellvalue(grid.CurrentCellRow, "STAWN_IMP")
                .findById("wnd[0]").sendVKey 3
            Else
                format_comment c, 7, CStr("11-stellige Importnummer nicht vorhanden"), False
            End If
e2:     Next c
    
        'Debitor suchen und Warenabsender f|fffd|llen
        If Len(RGNMR) <> 8 Then GoTo e3
        On Error Resume Next
        .findById("wnd[0]/tbar[0]/okcd").Text = "/nVF03"
        .findById("wnd[0]").sendVKey 0
        .findById("wnd[0]/usr/ctxtVBRK-VBELN").Text = RGNMR
        .findById("wnd[0]").sendVKey 0
        DEBI = .findById("wnd[0]/usr/ctxtKURGV-KUNNR").Text
        .findById("wnd[0]/tbar[0]/okcd").Text = "/nVD03"
        .findById("wnd[0]").sendVKey 0
        .findById("wnd[1]/usr/ctxtRF02D-KUNNR").Text = DEBI
        .findById("wnd[1]/usr/ctxtRF02D-VKORG").Text = "1102"
        .findById("wnd[1]/usr/ctxtRF02D-VTWEG").Text = "01"
        .findById("wnd[1]/usr/ctxtRF02D-SPART").Text = "03"
        .findById("wnd[1]").sendVKey 0
        .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/").Select
        cl.Cells(2, 3) = .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/ssubSUBSC:SAPLATAB:0201/subAREA1:SAPMF02D:7111/subADDRESS:SAPLSZA1:0300/subCOUNTRY_SCREEN:SAPLSZA1:0301/txtADDR1_DATA-NAME1").Text
        cl.Cells(3, 3) = .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/ssubSUBSC:SAPLATAB:0201/subAREA1:SAPMF02D:7111/subADDRESS:SAPLSZA1:0300/subCOUNTRY_SCREEN:SAPLSZA1:0301/txtADDR1_DATA-STR_SUPPL1").Text
        cl.Cells(4, 3) = .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/ssubSUBSC:SAPLATAB:0201/subAREA1:SAPMF02D:7111/subADDRESS:SAPLSZA1:0300/subCOUNTRY_SCREEN:SAPLSZA1:0301/txtADDR1_DATA-STREET").Text
        PLZ = .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/ssubSUBSC:SAPLATAB:0201/subAREA1:SAPMF02D:7111/subADDRESS:SAPLSZA1:0300/subCOUNTRY_SCREEN:SAPLSZA1:0301/txtADDR1_DATA-POST_CODE1").Text
        ORT = .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/ssubSUBSC:SAPLATAB:0201/subAREA1:SAPMF02D:7111/subADDRESS:SAPLSZA1:0300/subCOUNTRY_SCREEN:SAPLSZA1:0301/txtADDR1_DATA-CITY1").Text
        cl.Cells(5, 3) = PLZ & " " & ORT
        cl.Cells(6, 3) = .findById("wnd[0]/usr/subSUBTAB:SAPLATAB:0100/tabsTABSTRIP100/tabpTAB01/ssubSUBSC:SAPLATAB:0201/subAREA1:SAPMF02D:7111/subADDRESS:SAPLSZA1:0300/subCOUNTRY_SCREEN:SAPLSZA1:0301/txtT005T-LANDX").Text
e3:     .endtransaction
    End With
    
    cl.Cells(8, 4) = RL.Cells(1, 4) 'Listennummer kopieren
    cl.Cells(p + 1, 1) = "R|fffd|cksendung von Maschinenteilen"
    cl.Cells(p + 2, 1) = "Warenwerte gelten nur f|fffd|r Zollzwecke"
    cl.Cells(p + 3, 1) = "Ursprungsland:"
    cl.Cells(p + 4, 1) = "Lieferbedingung:"
    cl.Cells(p + 1, 5) = "Gesamt:"
    cl.Cells(p + 1, 6) = Format(WorksheetFunction.Sum(Range("F11:F" & p - 1)), "#,##0.00 |fffd|") 'Summe Preis
    cl.Cells(p + 1, 8) = Format(WorksheetFunction.Sum(Range("H11:H" & p - 1)), "0.00 KG") 'Summe Gewicht
    cl.Range("E" & p + 1 & ":H" & p + 1).HorizontalAlignment = xlRight

    For i = 7 To 12
        Range("A11:H" & p - 1).Borders(i).Weight = xlThin
    Next i
    For i = 7 To 10
        Range("E" & p + 1 & ":H" & p + 1).Borders(i).Weight = xlMedium
    Next i
    
End Sub
Function Customslist_preis(zeile, code)
    With Sheets("Returnlist")
        LGAUF = Trim(.Range("p3"))
        If Left(LGAUF, 15) = "Lageraufloesung" Then faktorlager = Mid(LGAUF, 17, 2) / 100 Else faktorlager = 1 'Faktor Lageraufl|fffd|sung bestimmen
        Select Case code
            Case Is = "01", "02", "03", "04", "05", "06", "11", "12", "15", "16", "21"
            Customslist_preis = (.Cells(zeile, 7) * 0.75) * faktorlager
            Case Is = "13", "14", "18", "17"
            Customslist_preis = (.Cells(zeile, 7) * 0.75) * 0.2
        End Select
    End With
End Function
Sub Create_Button()
    Dim ole1, ole2 As OLEObject
    Dim sCode As String
      
    With Sheets("TWS-Customs-list")
    Set ole1 = .OLEObjects.Add("forms.commandbutton.1")
        ole1.Name = "RGDRUCK"
        ole1.Left = 687
        ole1.Top = 27
        ole1.Width = 150
        ole1.PrintObject = False
        ole1.Object.Caption = "Rechnungen drucken"
        
    Set ole2 = .OLEObjects.Add("forms.commandbutton.1")
        ole2.Name = "PDFDRUCK"
        ole2.Left = 687
        ole2.Top = 52
        ole2.Width = 150
        ole2.PrintObject = False
        ole2.Object.Caption = "Rechnungen als PDF"
        
    Set ole1 = Nothing
    Set ole2 = Nothing
    
    End With
    
    sCode = "Private Sub RGDRUCK_Click()" & vbCrLf & "TWS_Customslist_Druck ""D"" " & vbCrLf & "End Sub" & vbCrLf & _
            "Private Sub PDFDRUCK_Click()" & vbCrLf & "TWS_Customslist_Druck ""P"" " & vbCrLf & "End Sub"
    ActiveWorkbook.VBProject.VBComponents(ActiveWorkbook.VBProject.VBComponents.Count).CodeModule.AddFromString sCode
End Sub
Sub TWS_Customslist_Druck(AG As String)
    Dim cl As Worksheet
    
    Set cl = Sheets("TWS-Customs-list")
    If SAP_LOGON = False Then Exit Sub
    Select Case AG
        Case Is = "D"
        SAPDRUCKER = InputBox("Bitte SAP Drucker angeben", "SAP Drucker")
        Case Is = "P"
        SAPDRUCKER = "Fil1"
        Shell "Explorer.exe " & "\\srvditz1\PDFOutput_R3\" & Left(Range("S2"), 3) & "\", vbNormalFocus
    End Select
    
    On Error Resume Next
    lastx = cl.Cells(Rows.Count, 3).End(xlUp).Row
    For i = 11 To lastx
        If cl.Cells(i, 4).Font.Color <> 255 And cl.Cells(i, 4) <> cl.Cells(i, 4).Offset(-1, 0) Then
            With Session
                .SendCommand ("VF03")
                .findById("wnd[0]/usr/ctxtVBRK-VBELN").Text = cl.Cells(i, 4)
                .findById("wnd[0]/mbar/menu[0]/menu[11]").Select
                .findById("wnd[1]").sendVKey 6
                .findById("wnd[2]/usr/txtNAST-ANZAL").Text = "1"
                .findById("wnd[2]/usr/ctxtNAST-LDEST").Text = SAPDRUCKER
                .findById("wnd[2]/usr/chkNAST-DIMME").Selected = True
                .findById("wnd[2]/usr/chkNAST-DELET").Selected = True
                .findById("wnd[2]").sendVKey 0
                .findById("wnd[1]").sendVKey 86
                .endtransaction
            End With
        End If
    Next i
End Sub


Sub create_customslist()
    Application.ScreenUpdating = False
    Sheets.Add After:=Worksheets(Worksheets.Count)
    ActiveWindow.DisplayHeadings = False
    Sheets(1).Shapes("Trumpflogo").Copy
    ActiveWindow.Zoom = 93

'Formatierung

    With ActiveSheet
        .Name = "Customs-list"
        .Cells.VerticalAlignment = xlCenter
        .Columns(1).ColumnWidth = 3
        .Columns(2).ColumnWidth = 4.57
        .Columns(3).ColumnWidth = 9.14
        .Columns(4).ColumnWidth = 35
        .Columns(5).ColumnWidth = 35
        .Columns(6).ColumnWidth = 6
        .Columns(7).ColumnWidth = 23
        .Columns(8).ColumnWidth = 26
        .Columns(9).ColumnWidth = 11
        .Columns(10).ColumnWidth = 10
        .Columns(11).ColumnWidth = 16
        .Rows(7).RowHeight = 10
        .Rows(9).RowHeight = 10
        .Rows(10).RowHeight = 39
        .Paste
        .Cells(1, 10) = "Date:"
        .Cells(1, 10).HorizontalAlignment = xlRight
        .Cells(1, 10).Font.Bold = True
        .Cells(1, 11) = Date
        .Cells(1, 11).HorizontalAlignment = xlLeft
        .Cells(1, 11).Font.Bold = True
        .Cells(1, 4) = "Shipper:"
        .Cells(1, 4).Font.Underline = xlUnderlineStyleSingle
        .Cells(1, 4).Font.Bold = True
        .Cells(1, 5) = "Billing of Shipment:"
        .Cells(1, 5).Font.Underline = xlUnderlineStyleSingle
        .Cells(1, 5).Font.Bold = True
        .Cells(1, 6) = "Address of Shipments:"
        .Cells(1, 6).Font.Underline = xlUnderlineStyleSingle
        .Cells(1, 6).Font.Bold = True
        .Range("D2:G6").Font.Size = 8
        .Range("D2:G6").Font.Bold = True
        .Cells(8, 4) = "List no. / Invoice no.:"
        .Cells(8, 4).HorizontalAlignment = xlRight
        .Cells(8, 4).Font.Bold = True
        .Cells(8, 5).FormulaR1C1 = "=Returnlist!R[-7]C[-1]"
        .Cells(10, 1) = "Unit"
        .Cells(10, 1).Orientation = 90
        .Cells(10, 2) = "Pos."
        .Cells(10, 3) = "Material no. / Materialnr."
        .Cells(10, 4) = "Description"
        .Cells(10, 5) = "Beschreibung"
        .Cells(10, 6) = "Pcs. / St|fffd|ck"
        .Cells(10, 7) = "Reason for return"
        .Cells(10, 8) = "R|fffd|cksendegrund"
        .Cells(10, 9) = "Amount (|fffd|) / Summe (|fffd|)"
        .Cells(10, 10) = "TNR"
        .Cells(10, 11) = "Total weight (kg) / Gesamtgewicht  (Kg)"
        With .Range("A10:K10")
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Interior.ColorIndex = 48
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeRight).Weight = xlThin
            .Borders(xlInsideVertical).Weight = xlThin
            .Borders(xlInsideHorizontal).Weight = xlThin
        End With
    
        .PageSetup.Orientation = xlLandscape
        .PageSetup.Zoom = 75
        .PageSetup.LeftMargin = Application.InchesToPoints(0.393700787401575)
        .PageSetup.RightMargin = Application.InchesToPoints(0.393700787401575)
        .PageSetup.TopMargin = Application.InchesToPoints(0.393700787401575)
        .PageSetup.BottomMargin = Application.InchesToPoints(0.393700787401575)
        .Range("A11").Select
    End With
ActiveWindow.FreezePanes = True
Application.ScreenUpdating = True
End Sub

Sub finaldutylist()
Dim fso     As Object
Dim fsoFile As Object
Dim strRet1 As String
Dim strRet2 As String
Dim lngFind As Long
Dim wkbk As Workbook
Dim DL As Worksheet
Set DL = Sheets("Customs-list")
Dim Gewicht As String

strgpfad = Sheets(1).Cells(1, 1): If strgpfad = "" Then Exit Sub

Apos = DL.Cells(Rows.Count, 2).End(xlUp).Row - 10
For s = 1 To Apos
    Set wkbk = GetObject(strgpfad & "Material.xlsb")
    Set rZelle = wkbk.Sheets(1).Columns(1).Find(DL.Cells(s + 10, 3), LookAt:=xlPart, LookIn:=xlValues)
    
    If Not rZelle Is Nothing Then
        With wkbk.Sheets(1)
            DL.Cells(s + 10, 5) = .Cells(rZelle.Row, rZelle.Column + 1) 'Deutscher Text
            DL.Cells(s + 10, 10) = .Cells(rZelle.Row, rZelle.Column + 6) 'Zolltarifnummer
            DL.Cells(s + 10, 10).HorizontalAlignment = xlCenter
            Select Case .Cells(rZelle.Row, rZelle.Column + 5) 'Gewicht
                Case Is = "KG"
                Gewicht = .Cells(rZelle.Row, rZelle.Column + 4)
                DL.Cells(s + 10, 11) = Gewicht
                Case Is = "G"
                Gewicht = .Cells(rZelle.Row, rZelle.Column + 4)
                DL.Cells(s + 10, 11) = Gewicht / 1000000
            End Select
            DL.Cells(s + 10, 11) = DL.Cells(s + 10, 11) * DL.Cells(s + 10, 6) 'Gewicht multiplizieren
            DL.Cells(s + 10, 11).HorizontalAlignment = xlLeft
        End With
    End If
   
    'R|fffd|cksendegr|fffd|nde |fffd|bersetzen
    Select Case Sheets(2).Cells(s + 10, 7)
        Case Is = 1
        DL.Cells(s + 10, 7) = "Wrong order"
        DL.Cells(s + 10, 8) = "Falsche Bestellung"
        Case Is = 2
        DL.Cells(s + 10, 7) = "Wrong delivery"
        DL.Cells(s + 10, 8) = "Falsche Lieferung"
        Case Is = 3
        DL.Cells(s + 10, 7) = "Wrong amount"
        DL.Cells(s + 10, 8) = "Falsche Menge"
        Case Is = 4
        DL.Cells(s + 10, 7) = "Wrong version"
        DL.Cells(s + 10, 8) = "Falsche Ausf|fffd|hrung"
        Case Is = 5
        DL.Cells(s + 10, 7) = "Not needed"
        DL.Cells(s + 10, 8) = "Nicht ben|fffd|tigt"
        Case Is = 6
        DL.Cells(s + 10, 7) = "Used for test"
        DL.Cells(s + 10, 8) = "Zu Testzwecken eingebaut"
        Case Is = 11
        DL.Cells(s + 10, 7) = "Damage during transport"
        DL.Cells(s + 10, 8) = "Transportschaden"
        Case Is = 12
        DL.Cells(s + 10, 7) = "Received defective"
        DL.Cells(s + 10, 8) = "Defekt erhalten"
        Case Is = 13
        DL.Cells(s + 10, 7) = "For partical credit"
        DL.Cells(s + 10, 8) = "Zur Restgutschrift"
        Case Is = 14
        DL.Cells(s + 10, 7) = "Repair for customer"
        DL.Cells(s + 10, 8) = "Reparatur gegen Berechnung"
        Case Is = 15
        DL.Cells(s + 10, 7) = "Part warranty"
        DL.Cells(s + 10, 8) = "Teilegarantie"
        Case Is = 16
        DL.Cells(s + 10, 7) = "Machine warranty"
        DL.Cells(s + 10, 8) = "Maschinengarantie"
        Case Is = 17
        DL.Cells(s + 10, 7) = "Maintenance"
        DL.Cells(s + 10, 8) = "Wartung"
        Case Is = 18
        DL.Cells(s + 10, 7) = "For check"
        DL.Cells(s + 10, 8) = "Zur |fffd|berpr|fffd|fung"
        Case Is = 19
        DL.Cells(s + 10, 7) = ""
        DL.Cells(s + 10, 8) = "R|fffd|ckruf"
        Case Is = 21
        DL.Cells(s + 10, 7) = "Retrofitting"
        DL.Cells(s + 10, 8) = "Umr|fffd|stung"
        Case Is = 29
        DL.Cells(s + 10, 7) = "Miscellaneous"
        DL.Cells(s + 10, 8) = "Sonstiges"
    End Select
Next s
wkbk.Close SaveChanges:=False
End Sub
Sub NewWorksheetcode()
    Dim sCode As String
    sCode = "Private Sub Worksheet_Change(ByVal Target As Range)" & vbCrLf & _
    "x = Target.Row" & vbCrLf & _
    "y = Target.Column" & vbCrLf & _
    "If y = 1 And x > 10 Then" & vbCrLf & _
    vbTab & "If IsEmpty(Cells(x, y)) = True Then Exit Sub" & vbCrLf & _
    vbTab & "If IsEmpty(Cells(x, y + 1)) = False Then" & vbCrLf & _
    vbTab & vbTab & "izeilen = Cells(Rows.Count, 2).End(xlUp).Row" & vbCrLf & _
    vbTab & vbTab & "unit = Range(Cells(10, 1), Cells(izeilen, 1)).Find(Cells(x, y)).Row" & vbCrLf & _
    vbTab & vbTab & "If unit = x Then unit = Range(Cells(x, 1), Cells(izeilen, 1)).Find(Cells(x, y)).Row" & vbCrLf & _
    vbTab & vbTab & "If unit <> x Then" & vbCrLf & _
    vbTab & vbTab & vbTab & "ActiveSheet.cmdAction0.Visible = True" & vbCrLf & _
    vbTab & vbTab & "Else" & vbCrLf & _
    vbTab & vbTab & vbTab & "Cells(1, 2) = Cells(x, y):NewUnit.Show" & vbCrLf & _
    vbTab & vbTab & "End If" & vbCrLf & _
    vbTab & "End If" & vbCrLf & _
    "End If" & vbCrLf & _
    "End Sub"
    ActiveWorkbook.VBProject.VBComponents(ActiveWorkbook.VBProject.VBComponents.Count).CodeModule.AddFromString sCode
End Sub

Sub AddButtonAndCode()
    Dim i As Long
    Dim Name As String, NName As String

    i = 0

    NName = "cmdAction" & i
    ' Test if there is a button already and if so, increment its name
    For Each OLEObject In ActiveSheet.OLEObjects
        If Left(OLEObject.Name, 9) = "cmdAction" Then
            Name = Right(OLEObject.Name, Len(OLEObject.Name) - 9)
            If Name >= i Then
                i = Name + 1
            End If
            NName = "cmdAction" & i
            Hght = Hght + 27
        End If
    Next
    ' Add button
    Dim myCmdObj As OLEObject, N%
    Set myCmdObj = ActiveSheet.OLEObjects.Add(ClassType:="Forms.CommandButton.1", _
        Link:=False, DisplayAsIcon:=False, Left:=15, Top:=77, _
        Width:=86, Height:=24)
    ' Define buttons name
    myCmdObj.Name = NName
    ' Define buttons caption
    myCmdObj.Visible = False
    myCmdObj.Object.Caption = "Check Packaging"
    myCmdObj.Object.BackColor = &H8080FF
    ' Inserts code for the button
    With ThisWorkbook.VBProject.VBComponents(ActiveSheet.CodeName).CodeModule
        N = .CountOfLines
        .InsertLines N + 1, "Private Sub " & NName & "_Click()"
        .InsertLines N + 2, vbTab & "checkunits" & vbCrLf
        .InsertLines N + 3, "End Sub"
    End With
End Sub

Sub checkunits()
    Dim GWcase As Variant
    Dim vol1 As Variant
    Dim vol2 As Variant
    Dim vol3 As Variant

    Do Until Cells(X + 11, 1) = ""
        X = X + 1
    Loop
    endepos = X + 10
    beginpacks = Sheets("Customs-list").Cells(Rows.Count, 1).End(xlUp).Row + 2
    Endepacks = Sheets("Customs-list").Cells(Rows.Count, 2).End(xlUp).Row

    For i = 1 To Endepacks - beginpacks + 1
        suchunit = Cells(beginpacks + i - 1, 2)
        GWcase = LTrim(Right(Cells(beginpacks + i - 1, 3), 4))
        'GWcase = (Split(Cells(beginpacks + i - 1, 5), "K")(LBound(Split(Cells(beginpacks + i - 1, 5), "K"))))
        For z = 11 To endepos
            If Cells(z, 1) = suchunit Then GWcase = GWcase + Cells(z, 11)
        Next z
        Cells(beginpacks + i - 1, 5) = GWcase & " KG"
        GWUnits = GWUnits + GWcase
    
        zellma|fffd|e = Cells(beginpacks + i - 1, 4)
        vol1 = Split(zellma|fffd|e, "x")(LBound(Split(zellma|fffd|e, "x"))) / 100
        vol2 = Trim(Split(Trim(Mid(zellma|fffd|e, InStr(zellma|fffd|e, "x") + 1)), "x")(LBound(Split(Trim(Mid(zellma|fffd|e, InStr(zellma|fffd|e, "x") + 1)), "x")))) / 100
        vol3 = (Split((Split(zellma|fffd|e, "x")(UBound(Split(zellma|fffd|e, "x")))), "c")(LBound(Split((Split(zellma|fffd|e, "x")(UBound(Split(zellma|fffd|e, "x")))), "c")))) / 100
        volcase = vol1 * vol2 * vol3
        volgesamt = volgesamt + volcase
    Next i
    Cells(beginpacks - 2, 3) = Endepacks - beginpacks + 1 & " packages ; " & GWUnits & "kg" & " ; " & Format(volgesamt, "0.000") & " m3"

    ActiveSheet.cmdAction0.Visible = False
End Sub

Sub Writetemplate(Temp)
    Dim i%
    Dim Pfad, Templatename As String
    
    Pfad = "C:\Trumpf\Returnlist\Templates\"
    If Dir(Pfad, vbDirectory) = "" Then
        If Dir("c:\Trumpf\", vbDirectory) = "" Then MkDir "c:\Trumpf\"
        If Dir("c:\Trumpf\Returnlist\", vbDirectory) = "" Then MkDir "c:\Trumpf\Returnlist\"
        MkDir Pfad
    End If
    Templatename = InputBox("Plaese create name for this template", "New template")
    
    Select Case Temp
        Case Is = "adress"
        Open Pfad & "Adress_" & Templatename & ".txt" For Output As #1
        For i = 1 To 17
            Print #1, Zoll.Controls("text_" & Format(i, "00"))
        Next i
    
        Case Is = "Unit"
        Open Pfad & "Unit_" & Templatename & ".txt" For Output As #1
        For i = 1 To 5
            Print #1, NewUnit.Controls("text_" & i)
        Next i
    End Select
    Close
End Sub

Sub Readtemplate() 'Adresstemplate lesen
    Dim i%

    Open "C:\Trumpf\Returnlist\Templates\" & Zoll.ComboBox1.Value For Input As #1
    For i = 1 To 17
        Line Input #1, s
        Zoll.Controls("text_" & Format(i, "00")) = s
    Next i
    Close
End Sub

Sub Readtemplate1() 'Verpackungstemplate lesen
    Dim i%

    Open "C:\Trumpf\Returnlist\Templates\" & NewUnit.ComboBox1.Value For Input As #1
    For i = 1 To 5
        Line Input #1, s
        NewUnit.Controls("text_" & i) = s
    Next i
Close
End Sub
Function check_price()
    For i = 5 To Cells(Rows.Count, 2).End(xlUp).Row
        If Cells(i, 7) = 0 Then
            check_price = i
            Exit Function
        End If
    Next i
End Function

Attribute VB_Name = "updatebalken"
Attribute VB_Base = "0{5DD98CC3-0B73-4AFF-A34A-A5EDEAD281E8}{65189548-A877-4F26-8F11-D41A1EA905BF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
        updatebalken.PW_Balken.Width = 0
End Sub

' InQuest injected base64 decoded content
' R-zk
' +&j)
' HMz5!
' jKnzY^
' )^J)
' I4H?]4
' I4H?]4

INQUEST-PP=macro
