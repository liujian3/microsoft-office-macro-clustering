Attribute VB_Name = "ChecksAll"
Option Explicit

'Check all fields in sheet "SRpage2_Mail_Body" and proves if the text fields are filled when necessary
Public Function Checks() As Boolean

Set Sheet = ThisWorkbook.Sheets(strSheetBody)
'Check if the fields that are active in the Sheet "SRpage2_Mail_Body" are filled
If ThisWorkbook.Sheets(strSheetBody).opbAltTspLSPYes.Value = True And Sheet.Range("E4").Value = "" Then
    MsgBox "Complete the information relative to alternative Transportation"
    Checks = False
    Exit Function
ElseIf ThisWorkbook.Sheets(strSheetBody).opbAltntRoutYes.Value = True And Sheet.Range("E7").Value = "" Then
    MsgBox "Complete the information relative to alternative Route"
    Checks = False
    Exit Function
ElseIf ThisWorkbook.Sheets(strSheetBody).opbAltBrdOffYes.Value = True And Sheet.Range("E10").Value = "" Then
    MsgBox "Complete the information relative to alternative Customs Office of Export"
    Checks = False
    Exit Function
ElseIf ThisWorkbook.Sheets(strSheetBody).opbAttOriDocYes.Value = True And Sheet.Range("E22").Value = "" Then
    MsgBox "Complete the information relative to Original Documents"
    Checks = False
    Exit Function

'Check if the fields in the Sheet "SRpage3_Delivery_Summary" are filled
ElseIf ThisWorkbook.Sheets(strSheetSummary).Range("N3").Value = "Yellow" Or ThisWorkbook.Sheets(strSheetSummary).Range("N3").Value = "Red" Then
    MsgBox "Input valid data in the summary sheet."
    Checks = False
    Exit Function
Else
    Checks = True
End If

End Function

'Run the checks, to ensure that all necessary ZIP files were created.
Public Function CheckZIPFiles() As Boolean

'Declare the objects to seach for files
Dim fso As Object
Dim fsFolder As Object
Dim fsFile As Object

Dim strFileName As String 'String to Store file name

'Declare all variables that will signalize whether the ZIP files are attached or not.
Dim bolDN As Boolean
Dim bolExp As Boolean
Dim bolImp As Boolean
bolDN = False
bolExp = False
bolImp = False

strFileName = GetFileName 'Retrieve File name (Title)
 
Set fso = CreateObject("Scripting.FileSystemObject")
Set fsFolder = fso.GetFolder(ThisWorkbook.Path)

'Run through all files and check if the ZIP files for the DNs and invoices are there
For Each fsFile In fsFolder.Files
    Select Case fsFile.Name
        Case strDN & ".zip" 'If the DNs are attached, boolean variable set to TRUE
            bolDN = True
        Case strExp & ".zip" 'If the Export Invoices are attached, boolean variable set to TRUE
            bolExp = True
        Case strImp & ".zip" 'If the Import Invoices are attached, boolean variable set to TRUE
            bolImp = True
    End Select
Next

If bolDN = False Then 'If there are no DNs attached
    MsgBox "There are no DN attached" 'Show combobox warning user
    CheckZIPFiles = False 'Set the Check function as false
    Exit Function
ElseIf ThisWorkbook.Sheets(strSheetSummary).Range("E8").Value <> ThisWorkbook.Sheets(strSheetSummary).Range("F8").Value Then 'If there is a Exp. Invoice number and no Exp. Invoice file...
    If ThisWorkbook.Sheets(strSheetSummary).Range("E8").Value <> "" And bolExp = False Then 'If there is a Exp. Invoice number and no Exp. Invoice file...
        MsgBox "Please, attach the Export Invoices." 'Show message telling the user to attach the Exp. Invoices
        CheckZIPFiles = False 'Set the Check function as false
        Exit Function
    ElseIf ThisWorkbook.Sheets(strSheetSummary).Range("F8").Value <> "" And bolImp = False Then 'If there is a Imp. Invoice number and no Imp. Invoice file...
        MsgBox "Please, attach the Import Invoices." 'Show message telling the user to attach the Emp. Invoices
        CheckZIPFiles = False 'Set the Check function as false
        Exit Function
    End If
ElseIf ThisWorkbook.Sheets(strSheetSummary).Range("E8").Value = ThisWorkbook.Sheets(strSheetSummary).Range("F8").Value And bolExp = False And bolImp = False Then 'If there is a Exp. Invoice number and no Exp. Invoice file...
    MsgBox "Please, attach either the Export or the Import Invoices." 'Show message telling the user to attach the Emp. Invoices
    CheckZIPFiles = False 'Set the Check function as false
    Exit Function
End If

CheckZIPFiles = True 'Set the function as true, so that the E-mail can be sent

End Function

Attribute VB_Name = "DecVariables"
Option Explicit

'These Modul is used to declare all constante values

'Declare the name of the Sheets
Public Const strSheetMailSub As String = "SRpage1_Mail_Subject"
Public Const strSheetBody As String = "SRpage2_Mail_Body"
Public Const strSheetSummary As String = "SRpage3_Delivery_Summary"
Public Const strSheetMaster As String = "SRpage4_Mail_Master"
Public Const strSheetObject As String = "ObjectData_Hidden"
Public Const strSheetTranspMatrix As String = "Country level"

Public Const strTranspMatrixFile As String = "Tilburg_HUB transportation matrix.xlsx"

'Name of the zip files
Public Const strDN As String = "DN"
Public Const strImp As String = "imIV"
Public Const strExp As String = "exIV"


Public Sheet As Worksheet
Attribute VB_Name = "Emails"
Option Explicit

'Write the Email automaticaly
Public Sub Send_Email()

Dim Email_Subject As String, Email_Send_From As String, Email_Send_To As String, Email_Cc As String, Email_Bcc As String
Dim rgnEmail_Body1 As Range, rgnEmail_Body2 As Range
Dim strWksAbruf As String, strWksPick As String
Dim Mail_Object As Variant, Mail_Single As Variant
Dim attAttach As Variant
Dim fso As Object
Dim fsFolder As Object
Dim fsFile As Object
 
Email_Subject = GetFileName 'Get name of the SR
Email_Send_From = ""
Email_Send_To = "nl.sm.tlb.nokiacustomerservice@dbschenker.com" 'E-mail of the receiver.
Email_Cc = ""
Email_Bcc = ""

'Body of the Message with Variables Included. Text made in HTML
Set rgnEmail_Body1 = ThisWorkbook.Sheets(strSheetMaster).Range("F5:L18")

'Routine to copy the table with the DNs
Dim i As Integer
i = 7
Do
    i = i + 1
Loop While ThisWorkbook.Sheets(strSheetSummary).Range("C" & i).Value <> ""

Set rgnEmail_Body2 = ThisWorkbook.Sheets(strSheetSummary).Range("C7:J" & i - 1)

On Error GoTo debugs
Set Mail_Object = CreateObject("Outlook.Application") 'Creates Object Mail
Set Mail_Single = Mail_Object.CreateItem(0)
Set attAttach = Mail_Single.Attachments
Set fso = CreateObject("Scripting.FileSystemObject")
Set fsFolder = fso.GetFolder(ThisWorkbook.Path)

'Attach all files in the folder where the excel file of the SR is stored
For Each fsFile In fsFolder.Files
    If Left(fsFile.Name, 1) <> "~" Then 'Exclude temporary excel file from the selection. Otherwise, the code crashes
        attAttach.Add ThisWorkbook.Path & "\" & fsFile.Name
    End If
Next

'''Changes On "22/05/2018"
''''If Alternative Trasportation LSP For Shipment is selected or not in "SRpage2_Mail_Body"
Dim mail_body_alter As String
mail_body_alter = ""
'''If ThisWorkbook.Sheets(strSheetBody).opbAltTspLSPYes.Value = True Then
'''    mail_body_alter = "<br><br><br>You have selected a alternative transport mode. Please, attach the E-mail with the Approval of the Regional Distribution Manager"
'''End If

''''''
With Mail_Single
    .Subject = Email_Subject
    .To = Email_Send_To
    .cc = Email_Cc
    .BCC = Email_Bcc
    .HTMLBody = RangetoHTML(rgnEmail_Body1) + "<br><br>" + RangetoHTML(rgnEmail_Body2) + mail_body_alter
    .Display 'or .send
End With
debugs:
If Err.Description <> "" Then MsgBox Err.Description
End Sub


'Copy the table to E-mail Body. First convert to HTML
Function RangetoHTML(rng As Range)
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    
    Application.ScreenUpdating = False 'Freeze screen
    Application.DisplayAlerts = False
    
    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to past the data in
    rng.Copy
    ThisWorkbook.Worksheets.Add().Name = "Temp"
    With ThisWorkbook.Sheets("Temp")
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With ThisWorkbook.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=ThisWorkbook.Sheets("Temp").Name, _
         Source:=ThisWorkbook.Sheets("Temp").UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.readall
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", "align=left x:publishsource=")

    'Close TempWB
    ThisWorkbook.Sheets("Temp").Delete

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    
    Application.ScreenUpdating = True 'Unfreeze Screen
    Application.DisplayAlerts = True
    
End Function





Attribute VB_Name = "GetPath"
Option Explicit


Public Function GetFileName() As String

GetFileName = ThisWorkbook.Sheets(strSheetMaster).Range("B6").Value 'Name of the SR to be sent

End Function

Public Function GetFilePath() As String

GetFilePath = ThisWorkbook.Path 'Return the Path of the present file

End Function


 
Public Function DefNewDirPath2() As String 'Return the name of the new folder that will be created for the present SRs

Dim strNewFolder1 As String
Dim strFileName As String

strNewFolder1 = GetFilePath 'Get the name of the Folder created for the SRs created today
strFileName = GetFileName 'Get the name of the file

DefNewDirPath2 = strNewFolder1 & "\" & strFileName 'Return the name of the new folder that will be created for the present SRs

End Function

Attribute VB_Name = "Hide"
Option Explicit
 
Public Sub HideAltTraLSP() 'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

If ThisWorkbook.Sheets(strSheetBody).opbAltTspLSPNo.Value = True Then
    ThisWorkbook.Sheets(strSheetBody).Range("D4").Font.ThemeColor = xlThemeColorDark2
    ThisWorkbook.Sheets(strSheetBody).txbAltTraLSP.Visible = False
    ThisWorkbook.Sheets(strSheetBody).txbAltTraLSP = ""
Else
    ThisWorkbook.Sheets(strSheetBody).Range("D4").Font.Color = -7257838
    ThisWorkbook.Sheets(strSheetBody).txbAltTraLSP.Visible = True
End If

End Sub

    
Public Sub HideAltntRout() 'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

If ThisWorkbook.Sheets(strSheetBody).opbAltntRoutNo.Value = True Then
    ThisWorkbook.Sheets(strSheetBody).Range("D7").Font.ThemeColor = xlThemeColorDark2
    ThisWorkbook.Sheets(strSheetBody).txbAltRte.Visible = False
    ThisWorkbook.Sheets(strSheetBody).txbAltRte = ""
Else
    ThisWorkbook.Sheets(strSheetBody).Range("D7").Font.Color = -7257838
    ThisWorkbook.Sheets(strSheetBody).txbAltRte.Visible = True
End If

End Sub


Public Sub HideAltBrdOff() 'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

If ThisWorkbook.Sheets(strSheetBody).opbAltBrdOffNo.Value = True Then
    ThisWorkbook.Sheets(strSheetBody).Range("D10").Font.ThemeColor = xlThemeColorDark2
    ThisWorkbook.Sheets(strSheetBody).txbAltBorOff.Visible = False
    ThisWorkbook.Sheets(strSheetBody).txbAltBorOff = ""
Else
    ThisWorkbook.Sheets(strSheetBody).Range("D10").Font.Color = -7257838
    ThisWorkbook.Sheets(strSheetBody).txbAltBorOff.Visible = True
End If

End Sub


Public Sub HideAttOriDoc() 'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

If ThisWorkbook.Sheets(strSheetBody).opbAttOriDocNo.Value = True Then
    ThisWorkbook.Sheets(strSheetBody).Range("D22").Font.ThemeColor = xlThemeColorDark2
    ThisWorkbook.Sheets(strSheetBody).cmbAttOriDoc.Visible = False
    ThisWorkbook.Sheets(strSheetBody).cmbAttOriDoc = ""
Else
    ThisWorkbook.Sheets(strSheetBody).Range("D22").Font.Color = -7257838
    ThisWorkbook.Sheets(strSheetBody).cmbAttOriDoc.Visible = True
End If

End Sub

Attribute VB_Name = "PDF_Check"

Function PDF_PO_TO_Excel(Folder_Name_1 As String) As String

    this = ThisWorkbook.Name
    Windows(this).Activate
    Sheets("PDFLoad").Select
    Sheets("PDFLoad").Rows.Clear
    Sheets("PDFLoad").Rows.Clear
    Dim Pre_Len As Long
    Dim Folder_Name, FileSystemObject, GetFolder, FilesInFolder, EachFile As Variant
    Folder_Name = Folder_Name_1
    ''''MsgBox Folder_Name & "    " & "D:\Outbound_Transpot_Matrix\SR_ FI24_www_AG_23-5-18_Sea_34234\exIV.zip"
    Set FileSystemObject = CreateObject("Scripting.FileSystemObject")
    Set GetFolder = FileSystemObject.GetFolder(Folder_Name)
    Set FilesInFolder = GetFolder.Files
    Dim File_cnt As Long
    File_cnt = 0
    Folder_Name = ""
    
    
    For Each Filename In FilesInFolder
        
        Windows(this).Activate
        Sheets("PDFLoad").Select
        Sheets("PDFLoad").Rows.Clear
        Sheets("PDFLoad").Rows.Clear
        
        Dim PdfFilePath As String
        PdfFilePath = ""
        '''PdfFilePath = "D:\Outbound_Transpot_Matrix\Invoice_PDF\210328313.pdf"
        '''PdfFilePath = Folder_Name_1 & "\" & Filename
        PdfFilePath = Filename
        '''''MsgBox PdfFilePath
        ActiveWorkbook.FollowHyperlink PdfFilePath, NewWindow:=True
        If Err.Number <> 0 Then
            Err.Clear
            Err.Clear
            Err.Clear
        End If
        Application.Wait TimeSerial(Hour(Now()), Minute(Now()), Second(Now()) + 3)
        SendKeys "^a", True
        Application.Wait TimeSerial(Hour(Now()), Minute(Now()), Second(Now()) + 1)
        SendKeys "^c", True
        '''
        Application.Wait TimeSerial(Hour(Now()), Minute(Now()), Second(Now()) + 3)
        SendKeys "^q", True
        Application.Wait TimeSerial(Hour(Now()), Minute(Now()), Second(Now()) + 1)
        
        Sheets("PDFLoad").Select
        Range("A1").Select
        Application.Wait TimeSerial(Hour(Now()), Minute(Now()), Second(Now()) + 1)
        Dim dTILL As Double
        SendKeys ("^v"), True
        dTILL = Now + TimeSerial(0, 0, 3)
        While dTILL > Now: DoEvents: Wend
        Application.CutCopyMode = False
        
        Range("A1").Select
        Cells.Select
        With Selection.Font
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
        End With
        Range("B3").Select
        ActiveWorkbook.Save
        Range("A1").Select
        
        Dim Len_A_Data As Long
        Dim PO_Number_PDF As String
        PO_Number_PDF = ""
        Dim PO_Number_PO_String As String
        PO_Number_PO_String = ""
        Dim Item_Poss_Pdf As String
        Dim Item_Desc_Pdf As String
        Dim Qty_Pdf As String
        
        Item_Poss_Pdf = ""
        Item_Desc_Pdf = ""
        Qty_Pdf = ""
        
        Len_A_Data = 0
        Len_A_Data = Range("A" & Rows.Count).End(xlUp).Row
        If Len_A_Data > 1 Then
            Dim ii As Long
            For ii = 1 To Len_A_Data
                Dim A_Value As String
                A_Value = ""
                A_Value = Trim(Range("A" & ii).Text)
'''                A_Value = UCase(Trim(Range("A" & ii).Text))
'''                If InStr(UCase(A_Value), UCase("ZZ NA")) > 0 Then
'''                    '''MsgBox "This PDF Contains Material NA in " & ii & " Row.Please Upload Right File"
'''                    PDF_PO_TO_Excel = "No"
'''                    Exit Function
'''                End If
                
                '''' Testing in Another Way ''''
                Dim A_Value_Position As String
                Dim arr() As String
                A_Value_Position = ""
                A_Value_Position = Trim(Left(A_Value, 4))
                If IsNumeric(A_Value_Position) Then
                    Dim ikjh As Long
                    For ikjh = ii + 1 To ii + 7
                        Dim A_Value_Check As String
                        A_Value_Check = ""
                        A_Value_Check = Trim(Range("A" & ikjh).Text)
                        Dim Left_4 As String
                        Left_4 = ""
                        Left_4 = Left(A_Value_Check, 4)
                        If IsNumeric(Left_4) Then
                            GoTo 189
                        End If
                        Erase arr()
                        If InStr(A_Value_Check, " ") Then
                            arr = Split(A_Value_Check, " ")
                            If Len(arr(1)) = 2 And InStr(A_Value_Check, "NA ") > 0 Then
                                PDF_PO_TO_Excel = "No"
                                Erase arr()
                                Exit Function
                            End If
                        End If
                        Erase arr()
                    Next
                End If
                ''''''''''''''''''''''''''''''''
                
189            Next
            
        End If
    Next

    PDF_PO_TO_Excel = "Yes"


End Function







Attribute VB_Name = "SaveFile"
Option Explicit

Public Sub SaveExcel()

Dim strNewDir2 As String
Dim strVersion As String
Dim strFileName As String
Dim strPathName As String

On Error Resume Next ' If directory exist goto next line

strNewDir2 = DefNewDirPath2
strFileName = GetFileName
strVersion = "SR Form " & Left(Right(ThisWorkbook.Name, 10), 5)

MkDir strNewDir2

strPathName = strNewDir2 & "\" & strFileName 'create total string

Worksheets(strSheetMaster).Range("L18").Value = strVersion 'Input the version of the SR Form used before saving it.

ActiveWorkbook.SaveAs Filename:=strPathName, FileFormat:=52, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, CreateBackup:=False 'Save file as...

MsgBox "The file '" & strFileName & "' was created in the folder '" & strNewDir2 & "'" 'Display a message, informing the user that the file was created.

'Save the date permantly
Application.ScreenUpdating = False
ActiveWorkbook.Worksheets(strSheetMailSub).Activate
ActiveSheet.Unprotect Password:=123
ActiveSheet.Range("E3").Select
Selection.Locked = False
Selection.Copy
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Selection.Locked = True
ActiveSheet.Protect Password:=123
ActiveWorkbook.Worksheets(strSheetMaster).Activate
Application.ScreenUpdating = True

End Sub


Public Function IsFileSaved() As Boolean 'Check of the file is the pattern of the form.

Dim strFileName As String
strFileName = ThisWorkbook.Name

If Left(strFileName, 7) = "SR_Form" Then 'If the form is the pattern form, then display message and assign true to function
    MsgBox "Save the File first"
    IsFileSaved = True
    Exit Function
End If

IsFileSaved = False

End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cobSource, 12, 1, MSForms, ComboBox"
Attribute VB_Control = "combutUpdateTranspMatrix, 8, 2, MSForms, CommandButton"
Attribute VB_Control = "cobDestiCoun, 2, 3, MSForms, ComboBox"
Attribute VB_Control = "txbCustoName, 3, 4, MSForms, TextBox"
Attribute VB_Control = "cobShippType, 4, 5, MSForms, ComboBox"
Attribute VB_Control = "txbSRReferen, 5, 6, MSForms, TextBox"
Attribute VB_Control = "combutNextSubject, 6, 7, MSForms, CommandButton"
Option Explicit




Private Sub combutNextSubject_Click() 'Go to next Sheet (2)
    
    Sheets(strSheetBody).Activate

End Sub

Private Sub combutUpdateTranspMatrix_Click()

Call UpdateTranspMatrixRoutine 'Update the Transport Matrix

End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "txbAltBorOff, 1, 0, MSForms, TextBox"
Attribute VB_Control = "cmbAttOriDoc, 2, 1, MSForms, ComboBox"
Attribute VB_Control = "txbAltRte, 10, 2, MSForms, TextBox"
Attribute VB_Control = "txbAltTraLSP, 12, 3, MSForms, TextBox"
Attribute VB_Control = "TextBox4, 13, 4, MSForms, TextBox"
Attribute VB_Control = "opbAltTspLSPYes, 14, 5, MSForms, OptionButton"
Attribute VB_Control = "opbAltTspLSPNo, 15, 6, MSForms, OptionButton"
Attribute VB_Control = "opbAltntRoutYes, 17, 7, MSForms, OptionButton"
Attribute VB_Control = "opbAltntRoutNo, 18, 8, MSForms, OptionButton"
Attribute VB_Control = "opbAltBrdOffYes, 19, 9, MSForms, OptionButton"
Attribute VB_Control = "opbAltBrdOffNo, 20, 10, MSForms, OptionButton"
Attribute VB_Control = "opbDangGoodsYes, 21, 11, MSForms, OptionButton"
Attribute VB_Control = "opbDangGoodsNo, 22, 12, MSForms, OptionButton"
Attribute VB_Control = "opbSGSInspecYes, 23, 13, MSForms, OptionButton"
Attribute VB_Control = "opbSGSInspecNo, 24, 14, MSForms, OptionButton"
Attribute VB_Control = "opbAttImpInvYes, 25, 15, MSForms, OptionButton"
Attribute VB_Control = "opbAttImpInvNo, 26, 16, MSForms, OptionButton"
Attribute VB_Control = "opbReqEADAppYes, 27, 17, MSForms, OptionButton"
Attribute VB_Control = "opbReqEADAppNo, 28, 18, MSForms, OptionButton"
Attribute VB_Control = "opbAttOriDocYes, 29, 19, MSForms, OptionButton"
Attribute VB_Control = "opbAttOriDocNo, 30, 20, MSForms, OptionButton"
Attribute VB_Control = "combutBackPageBody, 34, 21, MSForms, CommandButton"
Attribute VB_Control = "combutNextBody, 36, 22, MSForms, CommandButton"
Option Explicit

Private Sub combutBackPageBody_Click()
    
    Sheets(strSheetMailSub).Activate 'Go to previous Sheet (1)

End Sub

Private Sub combutNextBody_Click()
    
    Sheets(strSheetSummary).Activate 'Go to Next Sheet (3)

End Sub

Private Sub opbAltBrdOffNo_Click()

Call HideAltBrdOff 'When selection the option button NO for "alternative Customs Office of Export", text box is hidden

End Sub

Private Sub opbAltBrdOffYes_Click()

Call HideAltBrdOff 'When selection the option button YES for "alternative Customs Office of Export", text box is unhidden

End Sub

Private Sub opbAltntRoutNo_Click()

    Call HideAltntRout 'When selection the option button NO for "alternative Route", text box is hidden

End Sub

Private Sub opbAltntRoutYes_Click()

    Call HideAltntRout 'When selection the option button Yes for "alternative Route", text box is unhidden

End Sub

Private Sub opbAltTspLSPNo_Click()

    Call HideAltTraLSP 'When selection the option button NO for "alternative Transportation LSP", text box is hidden

End Sub

Private Sub opbAltTspLSPYes_Click()
    
    Call HideAltTraLSP 'When selection the option button YES for "alternative Transportation LSP", text box is unhidden

End Sub


Private Sub opbAttOriDocNo_Click()

Call HideAttOriDoc 'When selection the option button NO for "Orginial Documents", text box is hidden

End Sub

Private Sub opbAttOriDocYes_Click()

Call HideAttOriDoc 'When selection the option button YES for "Orginial Documents", text box is unhidden

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "combutAttImp, 29, 0, MSForms, CommandButton"
Attribute VB_Control = "combutAttExp, 28, 1, MSForms, CommandButton"
Attribute VB_Control = "combutAttDNs, 27, 2, MSForms, CommandButton"
Attribute VB_Control = "combutBackMail, 26, 3, MSForms, CommandButton"
Attribute VB_Control = "combutSendEmail, 23, 4, MSForms, CommandButton"
Attribute VB_Control = "combutSaveFile, 25, 5, MSForms, CommandButton"
Option Explicit


Private Sub combutAttDNs_Click()

'If file is the pattern file, then get out of the function
If IsFileSaved = True Then
    Exit Sub
End If
    
    Call Zip_Files(strDN) 'Zip DNs

End Sub

Private Sub combutAttExp_Click()

'If file is the pattern file, then get out of the function
If IsFileSaved = True Then
    Exit Sub
End If

    Call Zip_Files(strExp) 'Zip Export invoices
    Sheets(strSheetMaster).Select

End Sub

Private Sub combutAttImp_Click()

'If file is the pattern file, then get out of the function
If IsFileSaved = True Then
    Exit Sub
End If

    Call Zip_Files(strImp) 'Zip Import invoices

End Sub


Private Sub combutBackMail_Click()

    Sheets(strSheetSummary).Activate 'Go to previous Sheet (1)

End Sub

'Button to save the file in sheet "SRpage4_Mail_Master"
Private Sub combutSaveFile_Click()

Dim strFileName As String
strFileName = ThisWorkbook.Name 'Get File Name

'If there is no name in the field where the standard name for the file is, file won't be saved
If ThisWorkbook.Sheets(strSheetMaster).Range("B5").Value = "" Then
    MsgBox "No Title. Fill all mandatory fields in page 1."
    Exit Sub
ElseIf Left(strFileName, 7) <> "SR_Form" Then 'If the file is not the standard template, but an already filled SR, file won't be saved
    MsgBox "File already saved. Use the Excel Save button."
    Exit Sub
End If

Call SaveExcel   'Run Macro to save the excel file in the defined folder

End Sub

'Button to send the e-mail in sheet "SRpage4_Mail_Master"
Private Sub combutSendEmail_Click()

'If file is the pattern file, then get out of the function
If IsFileSaved = True Then
    Exit Sub
End If

'Check if all necessary fields are filled, if not, leave sub without sending the e-mail
If Checks = False Then
    Exit Sub
End If

'Check if all necessary attachements are in the folder
If CheckZIPFiles = False Then
    Exit Sub
End If

'Check if the E-mail with the Regional Distribution Manager is necessary and instruct user to attach it in the E-mail.
If ThisWorkbook.Sheets(strSheetBody).opbAltTspLSPYes.Value = True Then
    MsgBox "You have selected a alternative transport mode. Please, attach the E-mail with the Approval of the Regional Distribution Manager"
End If


ActiveWorkbook.Save

Call Send_Email 'Run Macro to send the Email

End Sub





Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CheckBox1, 1, 0, MSForms, CheckBox"
Attribute VB_Control = "combutBackSummary, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "combutNextSummary, 3, 2, MSForms, CommandButton"


Private Sub combutBackSummary_Click() 'Go to previous Sheet (2)
    
    Sheets(strSheetBody).Activate

End Sub

Private Sub combutNextSummary_Click() 'Go to next Sheet (4)
    
    Sheets(strSheetMaster).Activate

End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()

On Error Resume Next
Call HideAltTraLSP   'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

Call HideAltntRout   'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

Call HideAltBrdOff   'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

Call HideAttOriDoc   'Hide or Unhide fields related to the question "Use an alternate Transportation LSP for the Shipment?"

Sheets(strSheetMailSub).Select 'Go to the first sheet

Dim Now_Date As String
Now_Date = ""
Now_Date = Format(Now, "mm/dd/yyyy")

''Dim sdfe As Boolean
''sdfe = Sheets(strSheetMailSub).ProtectContents
''If sdfe = True Then
''    ActiveSheet.Unprotect "123"
''    Sheets(strSheetMailSub).Range("E3").Value = Now_Date
''    ActiveSheet.Protect "123", True, True
''End If
''
''Sheets(strSheetMailSub).Select 'Go to the first sheet
''



End Sub
Attribute VB_Name = "UpdateTranspMatrix"
Option Explicit


Public Sub UpdateTranspMatrixRoutine() 'Run both macros used to update the Transport Matrix in the SR Form file

'Declare the path where the Transport Matrix will be stored in the local computer
Dim strFilePath As String
Dim strTranspMatrixPath As String
Dim intResp As Integer
strFilePath = GetFilePath()
strTranspMatrixPath = strFilePath & "\Transportation_Matrix\" & strTranspMatrixFile 'Transport Matrix file will be saved in folder Transport_Matrix, in the same fodler where the SR Form is stored

On Error GoTo ErrHand: 'If folder is already created, skip command
MkDir strFilePath & "\Transportation_Matrix"
ErrHand:

intResp = MsgBox("Download the latest Transport Matrix and save it in the address" & Chr(34) & strTranspMatrixPath & Chr(34), vbOKCancel, "Transport Matrix Saved?") 'https://sharenet-ims.int.net.nokia.com/Open/509566670

If intResp = vbCancel Then
    MsgBox "Transport Matrix was not updated."
    Exit Sub
ElseIf intResp = vbOK Then
    If Dir(strTranspMatrixPath) = "" Then
        MsgBox "Transport Matrix file was not found in the correct folder with the correct name. Transport Matrix not updated."
        Exit Sub
    End If
    Application.ScreenUpdating = False
    Call UpdateTransportMatrix(strTranspMatrixPath) 'Call function to copy transport matrix to SR form file

Sheets(strSheetMailSub).Range("E18").Value = Now() 'Record the last time the Transport Matrix was successfully updated
Sheets(strSheetMailSub).Activate
ThisWorkbook.Save 'Save workbook, so that the time of the last update is stored

Application.ScreenUpdating = True

MsgBox "Transport Matrix updated successfully"

End If

End Sub


Public Sub UpdateTransportMatrix(strTranspMatrixPath As String)

'Get the path where the file is stored
Dim strFilePath As String
Dim strFormName As String
strFilePath = GetFilePath()
strFormName = ThisWorkbook.Name

'Delete the previous version of the Sheet "Country level" of the SR Form file
Application.DisplayAlerts = False
On Error Resume Next
Worksheets(strSheetTranspMatrix).Delete
Err.Clear
Application.DisplayAlerts = True
On Error GoTo 0

Workbooks.Open (strTranspMatrixPath) 'Open the Transport Matrix file

'Copy the Sheet from the transport matrix excel file downloaded from IMS and copyit to the SR Form Excel
Windows(strTranspMatrixFile).Activate
Sheets(strSheetTranspMatrix).Select
Sheets(strSheetTranspMatrix).Copy After:=Workbooks(strFormName).Sheets(strSheetObject)

Workbooks(strTranspMatrixFile).Close SaveChanges:=False 'Close the Transport Matrix file

'Update the Vlookup formula in the sheet ObjectData_Hidden
With Sheets(strSheetObject)
    .Visible = True
    .Select
    .Range("d2").Select
    .Range("d2").Formula = "=IF(ISNA(VLOOKUP($B2,'Country level'!$D$3:$H$187,COLUMNS($B2:D2)-1,0)=TRUE)," & Chr(34) & Chr(34) & ",(VLOOKUP($B2,'Country level'!$D$3:$H$187,COLUMNS($B2:D2)-1,0)))"
End With
Selection.Copy
Range(Selection, Selection.End(xlToRight)).Select
Range(Selection, Selection.End(xlDown)).Select
ActiveSheet.Paste
Application.CutCopyMode = False

Sheets(strSheetTranspMatrix).Visible = False
Sheets(strSheetObject).Visible = False

End Sub


Attribute VB_Name = "ZipFile"
Option Explicit

Sub NewZip(sPath)
'Create empty Zip File
'Changed by keepITcool Dec-12-2005
    If Len(Dir(sPath)) > 0 Then Kill sPath
    Open sPath For Output As #1
    Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
    Close #1
End Sub


Function bIsBookOpen(ByRef szBookName As String) As Boolean 'Check is the file to be zipped is open
' Rob Bovey
    On Error Resume Next
    bIsBookOpen = Not (Application.Workbooks(szBookName) Is Nothing)
End Function


Function Split97(sStr As Variant, sdelim As String) As Variant
'Tom Ogilvy
    Split97 = Evaluate("{""" & Application.Substitute(sStr, sdelim, """,""") & """}")
End Function

Public Sub Zip_Files(strFileName As String) 'Browse to the folder you want and select the file or files
    Dim strDefPath As String, sFName As String
    Dim oApp As Object, iCtr As Long, i As Integer
    Dim FName, vArr, FileNameZip

    strDefPath = ThisWorkbook.Path
    If Right(strDefPath, 1) <> "\" Then
        strDefPath = strDefPath & "\"
    End If

    FileNameZip = strDefPath & strFileName & ".zip"

    'Browse to the file(s), use the Ctrl key to select more files
    '"Excel Files (*.xl*), *.xl*"
    FName = Application.GetOpenFilename(filefilter:="PDF file (*.pdf), *.pdf", _
                    MultiSelect:=True, Title:="Select the files you want to zip")
    If IsArray(FName) = False Then
        'do nothing
    Else
        'Create empty Zip File
        NewZip (FileNameZip)
        Set oApp = CreateObject("Shell.Application")
        i = 0
        For iCtr = LBound(FName) To UBound(FName)
            vArr = Split97(FName(iCtr), "\")
            sFName = vArr(UBound(vArr))
            If bIsBookOpen(sFName) Then
                MsgBox "You can't zip a file that is open!" & vbLf & "Please close it and try again: " & FName(iCtr)
            Else
                'Copy the file to the compressed folder
                i = i + 1
                oApp.Namespace(FileNameZip).CopyHere FName(iCtr)

                'Keep script waiting until Compressing is done
                On Error Resume Next
                Do Until oApp.Namespace(FileNameZip).items.Count = i
                    Application.Wait (Now + TimeValue("0:00:01"))
                Loop
                On Error GoTo 0
            End If
        Next iCtr
        
        '''MsgBox FileNameZip
        ''''' Check PDF To Excel Files
        If UCase(strFileName) = UCase("exIV") Then
            Dim Result_1 As String
            Dim FOlderName1 As String
            FOlderName1 = ""
            FOlderName1 = FileNameZip
            FOlderName1 = FOlderName1
            FOlderName1 = Trim(Replace(FOlderName1, ".zip", ""))
            If Len(Dir(FileNameZip, vbDirectory)) > 0 Then
                '''' UnZip
                Dim output_File As Variant
                output_File = FOlderName1 & "\"
                If Len(Dir(FOlderName1, vbDirectory)) > 0 Then
                    '''MsgBox FOlderName1
                    Dim delete_folder_name As String
                    delete_folder_name = ""
                    delete_folder_name = FOlderName1
                    If Right(delete_folder_name, 1) <> "\" Then delete_folder_name = delete_folder_name & "\"
                    Kill delete_folder_name & "*.*"
                    RmDir delete_folder_name
                End If
                If Len(Dir(FOlderName1, vbDirectory)) <= 0 Then
                    MkDir FOlderName1
                End If
                Call UnzipAFile(FileNameZip, output_File)
            End If
            
            Result_1 = ""
            Result_1 = PDF_PO_TO_Excel(FOlderName1)
            If UCase(Result_1) = UCase("No") Then
                If Len(Dir(FileNameZip, vbDirectory)) > 0 Then
                    Kill FileNameZip
                    MsgBox "One Of the attached file Contains NA as material. Please Upload Right File !!!!"
                    Exit Sub
                End If
            End If
            
        End If
    
        MsgBox "You find the zipfile here: " & FileNameZip
    End If
End Sub


Sub UnzipAFile(zippedFileFullName As Variant, unzipToPath As Variant)

    Dim ShellApp As Object
    'Copy the files & folders from the zip into a folder
    Set ShellApp = CreateObject("Shell.Application")
    ShellApp.Namespace(unzipToPath).CopyHere ShellApp.Namespace(zippedFileFullName).items

End Sub






INQUEST-PP=macro
