Attribute VB_Name = "PCUSBDLL_mdl"
Option Explicit

'/*----------------------------------------------------------
 '   |fffd||8414|
'----------------------------------------------------------*/

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd||64fe||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|F|fffd|R|fffd||fffd||fffd|t|fffd|B|fffd|M|fffd||fffd||fffd||fffd||fffd|[|fffd|V|fffd||fffd||fffd||fffd|
Public Const DESC_CONF_IF_CNT = 0         '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X|fffd||fffd|
Public Const DESC_CONF_PWR_TYPE = 1       '// |fffd|d|fffd||34b||fffd||fffd||fffd||fffd|`
Public Const DESC_CONF_MAX_PWR = 2        '// |fffd||151||fffd|d

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd||64fe||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|F|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X
Public Const DESC_IF_NUM = 0              '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|XNo.
Public Const DESC_IF_ENDP_CNT = 1         '// |fffd|G|fffd||fffd||fffd|h|fffd|||fffd|C|fffd||fffd||fffd|g|fffd||fffd|
Public Const DESC_IF_ENDP_CLASS = 2       '// |fffd|N|fffd||fffd||fffd|X
Public Const DESC_IF_ENDP_SCLS = 3        '// |fffd|T|fffd|u|fffd|N|fffd||fffd||fffd|X
Public Const DESC_IF_ENDP_PRTCL = 4       '// |fffd|v|fffd||fffd||fffd|g|fffd|R|fffd||fffd|
Public Const DESC_IF_ATTR = 9            '// bAttribute

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd||64fe||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|F|fffd|G|fffd||fffd||fffd|h|fffd|||fffd|C|fffd||fffd||fffd|g
Public Const DESC_ENDP_PIPE = 0           '// |fffd|p|fffd|C|fffd|vNo.
Public Const DESC_ENDP_TR_TYPE = 1        '// |fffd|]|fffd||fffd||fffd|^|fffd|C|fffd|v
Public Const DESC_ENDP_MAX_PCKT = 2       '// |fffd||151||fffd|p|fffd|P|fffd|b|fffd|g|fffd|T|fffd|C|fffd|Y
Public Const DESC_ENDP_INTERVAL = 3       '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|o|fffd||fffd|
Public Const DESC_ENDP_ATTR = 9           '// bAttribute

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l|fffd|F|fffd|d|fffd||34b||fffd||fffd||fffd|
Public Const DESC_BUS_POWERED = 0         '// |fffd|o|fffd|X|fffd|p|fffd||fffd||fffd|[
Public Const DESC_SELF_POWERED = 1        '// |fffd|Z|fffd||fffd||fffd|t|fffd|p|fffd||fffd||fffd|[
Public Const DESC_REMOTE_WAKEUP = 2       '// |fffd||fffd||fffd||fffd||fffd|[|fffd|g|fffd|E|fffd|F|fffd|C|fffd|N|fffd|A|fffd|b|fffd|v
Public Const DESC_PWR_UNKNOWN = 9         '// |fffd||fffd||fffd|m|fffd||313|d|fffd||34b||fffd||fffd||fffd||fffd|^|fffd|C|fffd|v

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l|fffd|F|fffd|]|fffd||fffd||fffd|^|fffd|C|fffd|v
Public Const DESC_TR_INTERRUPT = 0        '// |fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|
Public Const DESC_TR_BULK = 1             '// |fffd|o|fffd||fffd||fffd|N|fffd|]|fffd||fffd|
Public Const DESC_TR_ISOCHRONOUS = 2      '// |fffd|A|fffd|C|fffd|\|fffd|N|fffd||fffd||fffd|i|fffd|X|fffd|]|fffd||fffd|
Public Const DESC_TR_CONTROL = 3          '/ |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|
Public Const DESC_TR_UNKNOWN = 9          '// |fffd||fffd||fffd|m|fffd||313|]|fffd||fffd||fffd|^|fffd|C|fffd|v

'/ |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l|fffd|F|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X|fffd|N|fffd||fffd||fffd|X
Public Const DESC_IF_CLS_FWU_IR = &HFE       '// Firmware Update or IrDA/USB Bridge
Public Const DESC_IF_CLS_AUDIO = &H1         '// Audio Interface
Public Const DESC_IF_CLS_CDC_CI = &H2        '// CDC Control Interface
Public Const DESC_IF_CLS_CDC_DI = &HA       '// CDC Data Interface
Public Const DESC_IF_CLS_HID = &H3           '// HID
Public Const DESC_IF_CLS_HUB = &H9           '/ HUB
Public Const DESC_IF_CLS_MS = &H8          '// Mass Storage
Public Const DESC_IF_CLS_PHY = &H5           '// Physical
Public Const DESC_IF_CLS_PRN = &H7           '// Printer
Public Const DESC_IF_CLS_VENDOR = &HFF       '// Vendor defined

'/*----------------------------------------------------------
 '   |fffd||590||fffd||fffd||fffd|
'----------------------------------------------------------*/
Declare Function OpenDevice Lib "FGUSB.dll" () As Boolean    '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|I|fffd|[|fffd|v|fffd||fffd|
Declare Function CloseDevice Lib "FGUSB.dll" () As Boolean    '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|N|fffd||fffd||fffd|[|fffd|Y
Declare Function ResetDevice Lib "FGUSB.dll" () As Boolean    '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303||fffd||fffd|Z|fffd|b|fffd|g
Declare Function IsWorkingDevice Lib "FGUSB.dll" () As Boolean   '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd||317|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30a|m|fffd|F
Declare Function ControlTransfer Lib "FGUSB.dll" (ByVal InOut As Long, _
                                                ByVal ReqType As Long, _
                                                ByVal Target As Long, _
                                                ByVal ShortTransfer As Long, _
                                            ByVal Request As Long, _
                                                ByVal Value As Long, _
                                                ByVal Index As Long, _
                                                ByVal Length As Long, _
                                                ByRef data As Byte _
                                                      ) As Long

Declare Function OpenPipe Lib "FGUSB.dll" (ByVal PipeNo As Long) As Boolean      '// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|I|fffd|[|fffd|v|fffd||fffd|// |fffd|p|fffd|C|fffd|vNo.
Declare Function ClosePipe Lib "FGUSB.dll" () As Boolean              '// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|N|fffd||fffd||fffd|[|fffd|Y
Declare Function ResetPipe Lib "FGUSB.dll" () As Boolean               '// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303||fffd||fffd|Z|fffd|b|fffd|g
Declare Function ReadPipe Lib "FGUSB.dll" (ByVal Length As Long, _
                                           ByRef data As Byte) As Long
                                                                        '// |fffd||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd|(byte) |fffd||fffd|1|fffd||20f||fffd|'// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303||fffd||fffd|Z|fffd|b|fffd|g

Declare Function GetConfigurationDescriptor Lib "FGUSB.dll" (param As Integer) As Long   '/ |fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l
Declare Function GetInterfaceDescriptor Lib "FGUSB.dll" (indexInterface As Integer, _
                                                        param As Integer) As Long
Declare Function GetEndpointDescriptor Lib "FGUSB.dll" (indexInterface As Integer, _
                                                        indexEndpoint As Integer, _
                                                        param As Integer) As Long




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const MenuType = "Worksheet Menu Bar"   ' |fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd|^|fffd|C|fffd|v
Dim MainMenu As CommandBarControl       ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[
Dim SubMenu As CommandBarControl        ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[

'*************************
'   |fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||1c9||fffd||fffd||fffd|
'*************************
Private Sub Workbook_Open()
    ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
    
    '***********
    'msgbox
    '***********
    XLANAME_K = "ToriemonUSB"
    new_book = "Open the new file."
    book_open1 = "Open the file."
    connect_error = "FG communication failed."
    
    INFO = "Version information"
    menu_start = "START"

    
    Set MainMenu = Application.CommandBars(MenuType) _
                .Controls.Add(msoControlPopup, , , , True)
    MainMenu.Caption = XLANAME_K
    ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = menu_start
    SubMenu.OnAction = "main_select_frm_show"
    
    ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = INFO
    SubMenu.OnAction = "ver_proc_k"
End Sub

'*************************
'   |fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'*************************
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
    For Each MainMenu In Application.CommandBars(MenuType).Controls
        If MainMenu.Caption = XLANAME_K Then
            MainMenu.Delete
        End If
    Next MainMenu
End Sub

Attribute VB_Name = "calc_mdl"
Option Explicit



Public Sub weight_average() '|fffd||fffd||fffd||3cc|v|fffd|Z
    weight_avg = renzoku_data(1)
    
    For data_count = 2 To data_count - 1 Step 1
        weight_avg = weight_avg + renzoku_data(data_count)
    Next data_count
   
    weight_avg = weight_avg / (data_count - 1) '|fffd||fffd||fffd||311||fffd||fffd||fffd||153||fffd||fffd||fffd||a0bd||fffd||5cf|d|fffd|l|fffd|f|fffd|[|fffd|^|fffd||315||fffd|
End Sub

Public Sub Max_weight()
    max_gf = renzoku_data(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For data_count = 2 To data_count - 1 Step 1
        If renzoku_data(data_count) >= max_gf Then
            max_gf = renzoku_data(data_count)
        End If
    Next data_count
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|d|fffd|l***************************
    'If max_gf > max_limit Then
    '    limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd|
    'End If
    '*****************************************************
End Sub
Public Sub P_Max_weight()
    max_p_gf = 0         '|fffd||5cf|d|fffd|v|fffd||fffd||fffd|X|fffd||151||fffd|l
    
    For data_count = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(data_count), 1, 1) = "+" Or renzoku_data(data_count) = 0 Then
            If renzoku_data(data_count) >= max_p_gf Then
                max_p_gf = renzoku_data(data_count)
            End If
        End If
    Next data_count

End Sub
Public Sub M_Max_weight()
    max_m_gf = 0          '|fffd||5cf|d|fffd|}|fffd|C|fffd|i|fffd|X|fffd||151||fffd|l
    
    For data_count = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(data_count), 1, 1) = "-" Or renzoku_data(data_count) = 0 Then
            If Abs(renzoku_data(data_count)) >= Abs(max_m_gf) Then
                max_m_gf = renzoku_data(data_count)
            End If
        End If
    Next data_count

End Sub
Public Sub Min_weight()               '|fffd||5cf|d|fffd||14f||fffd||fffd|l
    min_gf = renzoku_data(1)
    
    For data_count = 2 To data_count - 1 Step 1
        If renzoku_data(data_count) <= min_gf Then
            min_gf = renzoku_data(data_count)
        End If
    Next data_count
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|d|fffd|l***************************
    'If min_gf < min_limit Then
    '    limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd|
    'End If
    '*****************************************************
End Sub
Public Sub P_Min_weight()               '|fffd||5cf|d|fffd|v|fffd||fffd||fffd|X|fffd||14f||fffd||fffd|l
    If Mid(renzoku_data(1), 1, 1) = "+" Then
        min_p_gf = renzoku_data(1)
    Else
        min_p_gf = 0
        Exit Sub
    End If
   
    For data_count = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(data_count), 1, 1) = "+" Or renzoku_data(data_count) = 0 Then
            If renzoku_data(data_count) <= min_p_gf Then
                min_p_gf = renzoku_data(data_count)
            End If
        Else
            min_p_gf = 0
        End If
    Next data_count
End Sub
Public Sub M_Min_weight()               '|fffd||5cf|d|fffd|}|fffd|C|fffd|i|fffd|X|fffd||14f||fffd||fffd|l
    If Mid(renzoku_data(1), 1, 1) = "-" Then
        min_m_gf = Abs(renzoku_data(1))
    Else
        min_m_gf = 0
        Exit Sub
    End If
    For data_count = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(data_count), 1, 1) = "-" Or renzoku_data(data_count) = 0 Then
            If Abs(renzoku_data(data_count)) <= Abs(min_m_gf) Then
                min_m_gf = renzoku_data(data_count)
            End If
        Else
             min_m_gf = 0
        End If
    Next data_count
End Sub
Public Sub Weight_varp()               '|fffd||5cf|d|fffd||315||fffd||fffd|U
    w_varp = (renzoku_data(1) - weight_avg) ^ 2
    For data_count = 2 To data_count - 1 Step 1
            w_varp = w_varp + (renzoku_data(data_count) - weight_avg) ^ 2
    Next data_count
    w_varp = Sqr(w_varp / (data_count - 1))  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c1|A|fffd|W|fffd||fffd||fffd||38d||fffd||fffd||155|\
End Sub

'---- 2007.07.09 konegawa ----
Public Sub weight_average_p() '|fffd||fffd||fffd||3cc|v|fffd|Z|fffd|i|fffd|{|fffd|f|fffd|[|fffd|^|fffd|j
    Dim l_data_cnt As Long
    '|fffd||fffd||fffd||3d2|l
    ctu_weight_avg_p = 0
    If ctu_data_p_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_weight_avg_p = renzoku_data_p(1)
    
    For l_data_cnt = 2 To ctu_data_p_cnt - 1 Step 1
        ctu_weight_avg_p = ctu_weight_avg_p + renzoku_data_p(l_data_cnt)
    Next l_data_cnt
   
    ctu_weight_avg_p = ctu_weight_avg_p / (ctu_data_p_cnt - 1) '|fffd||fffd||fffd||311||fffd||fffd||fffd||153||fffd||fffd||fffd||a0bd||fffd||5cf|d|fffd|l|fffd|f|fffd|[|fffd|^|fffd||315||fffd|

End Sub


Public Sub weight_average_m() '|fffd||fffd||fffd||3cc|v|fffd|Z|fffd|i|fffd|{|fffd|f|fffd|[|fffd|^|fffd|j
    Dim l_data_cnt As Long
    '|fffd||fffd||fffd||3d2|l
    ctu_weight_avg_m = 0
    If ctu_data_m_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_weight_avg_m = renzoku_data_m(1)
    
    For l_data_cnt = 2 To ctu_data_m_cnt - 1 Step 1
        ctu_weight_avg_m = ctu_weight_avg_m + renzoku_data_m(l_data_cnt)
    Next l_data_cnt
   
    ctu_weight_avg_m = ctu_weight_avg_m / (ctu_data_m_cnt - 1) '|fffd||fffd||fffd||311||fffd||fffd||fffd||153||fffd||fffd||fffd||a0bd||fffd||5cf|d|fffd|l|fffd|f|fffd|[|fffd|^|fffd||315||fffd|

End Sub

Public Sub Max_weight_p()
    Dim l_data_cnt As Long
    ctu_max_p_gf = 0
    If ctu_data_p_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_max_p_gf = renzoku_data_p(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For l_data_cnt = 2 To ctu_data_p_cnt - 1 Step 1
        If Abs(renzoku_data_p(l_data_cnt)) > Abs(ctu_max_p_gf) Then
            ctu_max_p_gf = renzoku_data_p(l_data_cnt)
        End If
    Next l_data_cnt
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|d|fffd|l***************************
    'If max_gf > max_limit Then
    '    limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd|
    'End If
    '*****************************************************
End Sub


Public Sub Max_weight_m()
    Dim l_data_cnt As Long
    ctu_max_m_gf = 0
    If ctu_data_m_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_max_m_gf = renzoku_data_m(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For l_data_cnt = 2 To ctu_data_m_cnt - 1 Step 1
        If Abs(renzoku_data_m(l_data_cnt)) > Abs(ctu_max_m_gf) Then
            ctu_max_m_gf = renzoku_data_m(l_data_cnt)
        End If
    Next l_data_cnt
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|d|fffd|l***************************
    'If max_gf > max_limit Then
    '    limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd|
    'End If
    '*****************************************************
End Sub


Public Sub Min_weight_p()
    Dim l_data_cnt As Long
    ctu_min_p_gf = 0
    If ctu_data_p_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_min_p_gf = renzoku_data_p(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For l_data_cnt = 2 To ctu_data_p_cnt - 1 Step 1
        If Abs(renzoku_data_p(l_data_cnt)) < Abs(ctu_min_p_gf) Then
            ctu_min_p_gf = renzoku_data_p(l_data_cnt)
        End If
    Next l_data_cnt
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|d|fffd|l***************************
    'If max_gf > max_limit Then
    '    limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd|
    'End If
    '*****************************************************
End Sub


Public Sub Min_weight_m()
    Dim l_data_cnt As Long
    ctu_min_m_gf = 0
    If ctu_data_m_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_min_m_gf = renzoku_data_m(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For l_data_cnt = 2 To ctu_data_m_cnt - 1 Step 1
        If Abs(renzoku_data_m(l_data_cnt)) < Abs(ctu_min_m_gf) Then
            ctu_min_m_gf = renzoku_data_m(l_data_cnt)
        End If
    Next l_data_cnt
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|d|fffd|l***************************
    'If max_gf > max_limit Then
    '    limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd|
    'End If
    '*****************************************************
End Sub

Public Sub Weight_varp_p()               '|fffd||5cf|d|fffd||315||fffd||fffd|U
    Dim l_data_cnt As Long
    ctu_w_varp_p = 0
    If ctu_data_p_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_w_varp_p = (renzoku_data_p(1) - ctu_weight_avg_p) ^ 2
    For l_data_cnt = 2 To ctu_data_p_cnt - 1 Step 1
            ctu_w_varp_p = ctu_w_varp_p + (renzoku_data_p(l_data_cnt) - ctu_weight_avg_p) ^ 2
    Next l_data_cnt
    ctu_w_varp_p = Sqr(ctu_w_varp_p / (ctu_data_p_cnt - 1)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c1|A|fffd|W|fffd||fffd||fffd||38d||fffd||fffd||155|\
End Sub

Public Sub Weight_varp_m()               '|fffd||5cf|d|fffd||315||fffd||fffd|U
    Dim l_data_cnt As Long
    ctu_w_varp_m = 0
    If ctu_data_m_cnt = 1 Then
        Exit Sub
    End If
    
    ctu_w_varp_m = (renzoku_data_m(1) - ctu_weight_avg_m) ^ 2
    For l_data_cnt = 2 To ctu_data_m_cnt - 1 Step 1
            ctu_w_varp_m = ctu_w_varp_m + (renzoku_data_m(l_data_cnt) - ctu_weight_avg_m) ^ 2
    Next l_data_cnt
    ctu_w_varp_m = Sqr(ctu_w_varp_m / (ctu_data_m_cnt - 1)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c1|A|fffd|W|fffd||fffd||fffd||38d||fffd||fffd||155|\
End Sub

'|fffd|l|fffd||30c||713||fffd||fffd||590||fffd||fffd|@val|fffd|F|fffd|l|fffd|Adot|fffd|F|fffd|l|fffd||30c||713||fffd||fffd||fffd||fffd||9305||fffd|i10|fffd||fffd||fffd||702||141|j
Public Function calc_round(val As Variant, dot As Byte) As Variant
    Dim minus_flg As Byte

    If dot > 10 Then
        dot = 10
    End If

    If val < 0 Then
        minus_flg = 1
        val = val * -1
    End If

    calc_round = val * (10 ^ dot)
    calc_round = Int(calc_round + 0.5)
    calc_round = calc_round / (10 ^ dot)

    If minus_flg = 1 Then
        calc_round = calc_round * -1
    End If
End Function

'---- 2007.07.09 konegawa ----
Attribute VB_Name = "jdg_frm"
Attribute VB_Base = "0{9C281A87-2082-4F95-824B-6EB114307DD9}{9CC451C7-957D-4B93-9734-3A848EB3A081}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CommandButton1_Click()
    jdg_frm.Hide
    With main_select_frm.jdg_lbl
        .BackColor = &H808080
        .Caption = ""
        .ForeColor = &HC0C0C0
    End With
End Sub
Public Sub UserForm_Initialize()
'*********************************************************
'*********************************************************
'|fffd||fffd||fffd||fffd||fffd|W|fffd|L
'************
    jdg_frm.Caption = "Toriemon USB"
    jdg_frame.Caption = "Comparator"
    Label76.Caption = "Upper Limit"
    Label89.Caption = "Lower Limit"
    Label91.Caption = "Result"
    'jdg_lbl.Caption = ""
    'Max_limit_lbl.Caption = ""
    'Min_limit_lbl.Caption = ""
    CommandButton1.Caption = "Return to Previous Sheet"
    '************
    'Font
    '************
    jdg_frm.Font = "MS UI Gothic"
    jdg_frame.Font = "MS UI Gothic"
    Label76.Font = "MS UI Gothic"
    Label89.Font = "MS UI Gothic"
    Label91.Font = "MS UI Gothic"
    CommandButton1.Font = "MS UI Gothic"
'**********************************************************
'**********************************************************
    
    Max_limit_lbl = max_limit
    Min_limit_lbl = min_limit
        
    With jdg_frm.jdg_lbl
        If limit_jdg = 1 Then
            .BackColor = &HF96309
            .Caption = "OK"
            .ForeColor = &HFFFF80
        ElseIf limit_jdg = 0 Then
            .BackColor = &HFF&
            .Caption = "NG"
            .ForeColor = &HC0C0FF
        Else
            .BackColor = &H808080
            .Caption = ""
            .ForeColor = &HC0C0C0
        End If
    End With
End Sub
Attribute VB_Name = "limit_frm"
Attribute VB_Base = "0{EF7108FB-D5C2-4BCD-8DA5-889356A5906D}{4EA0168D-9798-46EF-ABDC-CD49708028F7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim max_range As Double
Dim send_limit As String
Private Sub Max_limit_lbl_Change()
    'Max_limit_lbl.Text = StrConv(Max_limit_lbl.Text, vbNarrow)|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd||fffd||fffd||142||356||fffd||fffd||fffd|
End Sub

Private Sub Max_limit_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    Dim dummy_max As Double
    Dim dummy_min As Double
    m_flg = False
    usb_mdl.unit
    max_range = input_max_range
    On Error GoTo MAX_ERROR
    dummy_max = Max_limit_lbl.Text
    dummy_min = Min_limit_lbl.Text
    If Abs(val(Max_limit_lbl.Text)) > max_range Then
        MsgBox write_over & " ( from -" & max_range & " to " & max_range & ")" & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        re_set
        Exit Sub
    End If
    
    If Mid(Max_limit_lbl.Text, 1, 1) = "-" Then
        Max_limit_lbl.Text = Mid(Max_limit_lbl.Text, 2)
        m_flg = True
    End If
    Do While (Len(Max_limit_lbl.Text) <> 1 And Mid(Max_limit_lbl.Text, 1, 1) = "0" And Mid(Max_limit_lbl.Text, 2, 1) <> ".")
        Max_limit_lbl.Text = Mid(Max_limit_lbl.Text, 2)
    Loop
    If m_flg = True Then
         Max_limit_lbl.Text = "-" & Max_limit_lbl.Text
         m_flg = False
    End If
    
    Exit Sub

MAX_ERROR:
    MsgBox write_miss & vbCr, vbOKOnly + vbExclamation, toriemon_mark
    re_set
End Sub
Private Sub Min_limit_lbl_Change()
    'Min_limit_lbl.Text = StrConv(Min_limit_lbl.Text, vbNarrow)'|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd||fffd||fffd||142||356||fffd||fffd||fffd|
End Sub

Private Sub Min_limit_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    Dim dummy_max As Double
    Dim dummy_min As Double
    m_flg = False
    usb_mdl.unit
    max_range = input_max_range
    On Error GoTo MIN_ERROR
    dummy_max = Max_limit_lbl.Text
    dummy_min = Min_limit_lbl.Text

    If Abs(val(Min_limit_lbl.Text)) > max_range Then
        MsgBox write_over & " ( from -" & max_range & " to " & max_range & ")" & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        re_set
        Exit Sub
    End If
    
    If Mid(Min_limit_lbl.Text, 1, 1) = "-" Then
        Min_limit_lbl.Text = Mid(Min_limit_lbl.Text, 2)
        m_flg = True
    End If
    Do While (Len(Min_limit_lbl.Text) <> 1 And Mid(Min_limit_lbl.Text, 1, 1) = "0" And Mid(Min_limit_lbl.Text, 2, 1) <> ".")
        Min_limit_lbl.Text = Mid(Min_limit_lbl.Text, 2)
    Loop
    If m_flg = True Then
         Min_limit_lbl.Text = "-" & Min_limit_lbl.Text
         m_flg = False
    End If
    
Exit Sub

MIN_ERROR:
    MsgBox write_miss & vbCr, vbOKOnly + vbExclamation, toriemon_mark
    re_set
End Sub
Private Sub Ok_btn_Click()
    Dim ret As Integer
    Dim send_max_limit As String
    Dim send_min_limit As String
    Dim buff(13) As Byte
    Dim usb_len As Long
    Dim ii As Integer
    Dim send_buff As String
    Dim intRet As Integer
    
    If main_select_frm.device_cheak = False Then
        Exit Sub
    End If
    
    If Abs(val(Max_limit_lbl.Text)) <= Abs(val(Min_limit_lbl.Text)) Then
        If Not ((Abs(val(Max_limit_lbl.Text)) = 0 And Abs(val(Min_limit_lbl.Text)) = 0) Or (((val(Max_limit_lbl.Text) <> val(Min_limit_lbl.Text)) And (Abs(val(Max_limit_lbl.Text)) = Abs(val(Min_limit_lbl.Text)))))) Then
            '*******************************************************
            MsgBox "|Higher limit value| < |Lower limit value| or Higher limit value = Lower limit value." & vbCr, vbOKOnly + vbExclamation, toriemon_mark
            '*******************************************************
            re_set
            Exit Sub
        End If
    End If
    If Abs(val(Max_limit_lbl.Text)) > max_range Or Abs(val(Min_limit_lbl.Text)) > max_range Then
        '***************************************************************************************************************
        MsgBox write_over & " ( from -" & max_range & " to " & max_range & ")" & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        '****************************************************************************************************************
        re_set
        Exit Sub
    End If
    
    max_limit = Max_limit_lbl.Text
    
    min_limit = Min_limit_lbl.Text

    usb_mdl.unit
    If limit_frm_exit_flg = True Then
        limit_frm_exit_flg = False
        re_set
        Exit Sub
    End If

    usb_mdl.fg_type
    If limit_frm_exit_flg = True Then
        limit_frm_exit_flg = False
        re_set
        Exit Sub
    End If
    
    If limit_zero_padding(max_limit) = False Then
        re_set
        Exit Sub
    End If
    send_max_limit = send_limit
    If limit_zero_padding(min_limit) = False Then
        re_set
        Exit Sub
    End If
    send_min_limit = send_limit
 
    
    buff(0) = Asc("E")
    buff(1) = Asc("K")

    For ii = 1 To 5
        buff(ii + 1) = Asc(Mid(send_max_limit, ii, 1))
        buff(ii + 6) = Asc(Mid(send_min_limit, ii, 1))
    Next ii
    buff(12) = 13

    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_ENDP, 0, USB_REQ_PARM_LMT, USB_VAL_PARMLMT_WR, 0, USB_LEN_PARM_LMT, buff(0))
    
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    main_select_frm.Max_limit_lbl.Caption = Max_limit_lbl.Text
    main_select_frm.Min_limit_lbl.Caption = Min_limit_lbl.Text
    main_select_frm.Max_limit_lbl_2.Caption = Max_limit_lbl.Text
    main_select_frm.Min_limit_lbl_2.Caption = Min_limit_lbl.Text
    main_select_frm.Max_limit_lbl_3.Caption = Max_limit_lbl.Text
    main_select_frm.Min_limit_lbl_3.Caption = Min_limit_lbl.Text
    limit_frm.Hide

End Sub
Private Sub re_set()
    usb_mdl.limit_read
    Max_limit_lbl.Text = main_select_frm.Max_limit_lbl.Caption
    Min_limit_lbl.Text = main_select_frm.Min_limit_lbl.Caption
End Sub
Private Sub Cansel_btn_Click()
    limit_frm.Hide
End Sub

Public Sub UserForm_Initialize()
'****************************************************************
'****************************************************************
    '****************
    '|fffd||fffd||fffd||fffd|
    '****************
    limit_frm.Caption = "Toriemon USB"
    Label1.Caption = "Input of Upper Limit"
    Label2.Caption = "Input of Lower Limit"
    'Max_limit_lbl.Text = ""
    'Min_limit_lbl.Text = ""
    Ok_btn.Caption = "OK"
    Cansel_btn.Caption = "Cancel"

    '****************
    'Font
    '****************
    limit_frm.Font = "MS UI Gothic"
    Label1.Font = "MS UI Gothic"
    Label2.Font = "MS UI Gothic"
    Max_limit_lbl.Font = "MS UI Gothic"
    Min_limit_lbl.Font = "MS UI Gothic"
    Ok_btn.Font = "MS UI Gothic"
    Cansel_btn.Font = "MS UI Gothic"
'****************************************************************
'****************************************************************
    
    Max_limit_lbl.Text = main_select_frm.Max_limit_lbl.Caption
    Min_limit_lbl.Text = main_select_frm.Min_limit_lbl.Caption

End Sub

Public Function zero_padding(para As String, after_len As Integer)
    para = Trim(para)
    zero_padding = para
    Do While Not Len(zero_padding) = after_len
        zero_padding = Mid(zero_padding, 1, 1) & "0" & Mid(zero_padding, 2, Len(zero_padding))
    Loop
End Function
Public Function limit_zero_padding(load As Variant) As Boolean
    Dim bairitu(5) As Integer
    
    If fg_type_num = "02" Or fg_type_num = "03" Then
        bairitu(0) = 1000       '0.000*1000|fffd||fffd|0000(N)
        bairitu(1) = 10         '000.0*10|fffd||fffd|0000(kg)
        bairitu(2) = 10         '(g)
        bairitu(3) = 1000       '(lb)
        bairitu(4) = 100        '(Oz)
    ElseIf fg_type_num = "04" Then
        bairitu(0) = 100        '00.00*100|fffd||fffd|0000(N)
        bairitu(1) = 1          '0000*1|fffd||fffd|0000(kg)
        bairitu(2) = 1          '(g)
        bairitu(3) = 1000       '(lb)
        bairitu(4) = 100        '(Oz)
    ElseIf fg_type_num = "05" Then
        bairitu(0) = 100        '00.00*100|fffd||fffd|0000(N)
        bairitu(1) = 1000       '0.000*1000|fffd||fffd|0000(Kg)
        bairitu(2) = 1000       '(g)
        bairitu(3) = 1000       '(lb)
    ElseIf fg_type_num = "06" Then
        bairitu(0) = 100        '00.00*100|fffd||fffd|0000(N)
        bairitu(1) = 1000       '0.000*1000|fffd||fffd|0000(Kg)
        bairitu(2) = 1000       '(g)
        bairitu(3) = 100        '(lb)
    ElseIf fg_type_num = "07" Or fg_type_num = "08" Then
        bairitu(0) = 10         '000.0*10|fffd||fffd|0000(N)
        bairitu(1) = 100        '00.00*100|fffd||fffd|0000(Kg)
        bairitu(2) = 100        '(g)
        bairitu(3) = 100        '(lb)
    ElseIf fg_type_num = "09" Then
        bairitu(0) = 10         '000.0*10|fffd||fffd|0000(N)
        bairitu(1) = 100        '00.00*100|fffd||fffd|0000(Kg)
        bairitu(2) = 100        '(g)
        bairitu(3) = 10         '(lb)
    Else
        bairitu(0) = 1          '0000*1|fffd||fffd|0000(N)
        bairitu(1) = 10         '000.0*10|fffd||fffd|0000(Kg)
        bairitu(2) = 10         '(g)
        bairitu(3) = 10         '(lb)
    End If
        
    send_limit = val(load) * bairitu(unit_num)
    
    If Not Mid(send_limit, 1, 1) = "-" Then
        send_limit = "+" & send_limit
    End If
        
    If send_limit_jdg = False Then
        limit_zero_padding = False
        Exit Function
    End If
        
    send_limit = zero_padding(send_limit, 5)
    limit_zero_padding = True
            
End Function
Public Function input_max_range() As Double
Dim max_range(5) As Double
    If fg_type_num = "02" Then
        max_range(0) = 2        '(N)
        max_range(1) = 0      '(kg)
        max_range(2) = 200        '(g)
        max_range(3) = 0.5      '(lb)
        max_range(4) = 8        '(Oz)
    ElseIf fg_type_num = "03" Then
        max_range(0) = 5       '(N)
        max_range(1) = 0         '(kg)
        max_range(2) = 500         '(g)
        max_range(3) = 1      '(lb)
        max_range(4) = 16        '(Oz)
    ElseIf fg_type_num = "04" Then
        max_range(0) = 10       '(N)
        max_range(1) = 0        '(kg)
        max_range(2) = 1000         '(g)
        max_range(3) = 2       '(lb)
        max_range(4) = 32        '(Oz)
    ElseIf fg_type_num = "05" Then
        max_range(0) = 20       '(N)
        max_range(1) = 2         '(kg)
        max_range(2) = 0         '(g)
        max_range(3) = 5       '(lb)
        max_range(4) = 0        '(Oz)
    ElseIf fg_type_num = "06" Then
        max_range(0) = 50       '(N)
        max_range(1) = 5         '(kg)
        max_range(2) = 0         '(g)
        max_range(3) = 10       '(lb)
        max_range(4) = 0        '(Oz)
    ElseIf fg_type_num = "07" Then
        max_range(0) = 100       '(N)
        max_range(1) = 10         '(kg)
        max_range(2) = 0         '(g)
        max_range(3) = 20       '(lb)
        max_range(4) = 0        '(Oz)
    ElseIf fg_type_num = "08" Then
        max_range(0) = 200       '(N)
        max_range(1) = 20         '(kg)
        max_range(2) = 0         '(g)
        max_range(3) = 50       '(lb)
        max_range(4) = 0        '(Oz)
    ElseIf fg_type_num = "09" Then
        max_range(0) = 500       '(N)
        max_range(1) = 50        '(kg)
        max_range(2) = 0         '(g)
        max_range(3) = 100       '(lb)
        max_range(4) = 0        '(Oz)
    Else
        max_range(0) = 1000       '(N)
        max_range(1) = 100         '(kg)
        max_range(2) = 0         '(g)
        max_range(3) = 200       '(lb)
        max_range(4) = 0        '(Oz)
    End If
    input_max_range = max_range(unit_num)
End Function

Public Function send_limit_jdg() As Boolean

    If Not InStr(send_limit, ".") = 0 Then       '1000|fffd|{|fffd||fffd||fffd||fffd||fffd||302||fffd|0|fffd||209||fffd||fffd||302||182||fffd|
        MsgBox a_hantei_overFG, vbExclamation, toriemon_mark
        send_limit_jdg = False
        Exit Function
    ElseIf Len(send_limit) > 5 Then              '1000|fffd|{|fffd||fffd||fffd||fffd||fffd||fffd|9999|fffd||20f||fffd||242||202||fffd||fffd||fffd||fffd||a347|
         MsgBox a_hantei_overFG, vbExclamation, toriemon_mark
        send_limit_jdg = False
        Exit Function
    End If
    
    send_limit = zero_padding(send_limit, 5)
    send_limit_jdg = True
            
End Function

Attribute VB_Name = "main_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************
' |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|
Public Const VERSION_K = "Ver1.01"
Public Const CORP = "Nidec-Shimpo Corp."
Public Const URL = "URL: http://www.shimpoamerica.com/"
Public Const COPYRIGHT = "Copyright(C) Nidec-Shimpo Corporation 2007. All Rights Reserved. "


' |fffd|\|fffd||fffd||fffd|F|fffd|R|fffd|[|fffd|h
Public Const COLOR_FLESH = &HC0E0FF
Public Const COLOR_GREEN = &HFF00&
Public Const COLOR_RED = &HFF&
Public Const COLOR_YELLOW = &HFFFF&
' |fffd|Z|fffd||fffd||fffd||311||fffd||fffd||fffd||fffd|
Public Const TATE = 0      ' |fffd|c|fffd||fffd|
Public Const YOKO = 1      ' |fffd||fffd||fffd||fffd|
' |fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|\
Public Const STS_DATAENA = "|fffd||635e||fffd||94|\"
Public Const STS_DATARCV = "|fffd|f|fffd|[|fffd|^|fffd||635e||fffd||fffd|"
' |fffd||fffd||fffd|M|fffd|R|fffd|}|fffd||fffd||fffd|h
Public Const MSEC_1 = "1000|fffd||fffd|/|fffd|b"
Public Const MSEC_10 = "100|fffd||fffd|/|fffd|b"
Public Const MSEC_20 = "50|fffd||fffd|/|fffd|b"
Public Const MSEC_500 = "20|fffd||fffd|/|fffd|b"
Public Const MSEC_1000 = "10|fffd||fffd|/|fffd|b"

'**********************
'msgbox|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|:|fffd||3d0||fffd||fffd||933e|
'**********************

Public toriemon_mark As String
Public write_over As String
Public write_miss As String
Public kagen_over_jyougen As String
Public cell_unusable As String
Public torikomi_genkai As String
Public clear_question As String
Public memory_nodata As String
Public device_error As String
Public communicate_error As String
Public a_hantei_overFG As String
Public writable_over As String
Public new_book As String
Public book_open1 As String
Public connect_error As String
Public torikomi_kaisuu As String
Public trigger_range As String
Public FG_connect As String
Public torikomi_able As String
Public setuzoku_ijyou As String
Public torikomi_tyuu As String
Public tuusin_ijyou As String
Public keisokutyuu As String


'************************
'Version Japanese
'************************
Public XLANAME_K As String
Public INFO As String
Public menu_start As String

'************************
'|fffd||fffd||fffd|g|fffd||313||fffd||fffd|{|fffd||fffd|
'************************
Public frequency_10 As String
Public frequency_20 As String
Public frequency_50 As String
Public frequency_100 As String
Public frequency_1000 As String
Public lon_mem_mode As String
Public ctu_mem_mode As String
Public std_mem_mode As String
Public torikomi_wait As String
Public torikomi_able1 As String
Public judge As String
Public puls_max As String
Public mins_max As String
Public puls_min As String
Public mins_min As String
Public average As String
Public std_deviation As String
Public up_limit As String
Public dn_limit As String
Public last_value As String
Public data_read As String
Public ctu_data As String
'---- 2007.07.09 konegawa----
Public ctu_p_data As String
Public ctu_m_data As String
Public ctu_title_data_num As String
Public ctu_title_max As String
Public ctu_title_min As String
Public ctu_title_ave As String
Public ctu_title_dev As String
'---- 2007.07.09 konegawa----
Public measure_data As String
Public puls_peak As String
Public mins_peak As String
Public data_num As String
Public w_eight As String
'Public w_eight1 As String
Public no_jdg_mark As String
Public toriemon_mark1 As String
Public lon_mem As String
Public ctu_mem As String
Public std_mem As String
Public u_nit As String
Public mem_adrs As String
Public puls_pk_value As String
Public mins_pk_value As String
Public puls_pk_value_1 As String
Public mins_pk_value_1 As String


'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||3d0||fffd|
'**************************
Public g_areas As Variant               ' |fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd|G|fffd||fffd||fffd|A
Public g_cell_dir As Integer            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public g_hdrout As Boolean              ' |fffd|w|fffd|b|fffd|_|fffd|o|fffd||357|L/|fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public ite_num As Long                  '|fffd||151||fffd||635e||fffd|f|fffd|[|fffd|^|fffd||fffd|
Public data_count As Long               '|fffd||fffd||835e||fffd||42f83|f|fffd|[|fffd|^|fffd||fffd|
Public renzoku_data(65100) As String    '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^
Public first_Row As Long                '|fffd||14f||fffd||fffd||303|Z|fffd||fffd||fffd||292|u
Public first_Col As Long
Public S_trg_num As Double              '2nd|fffd|g|fffd||fffd||fffd|K
Public trg_flg_2 As Boolean
Public trg_on_flg_2 As Boolean
Public P_load_2 As Boolean              '|fffd|}|fffd|g|fffd||fffd||fffd|K|fffd||fffd|
Public M_load_2 As Boolean
Public weight_avg As Double             '|fffd||fffd||fffd||fffd||5cf|d|fffd||fffd||fffd||3d2|l
Public max_gf As Double                 '|fffd||151||fffd|l
Public min_gf As Double                 '|fffd||14f||fffd||fffd|l
Public max_p_gf As Double               '+|fffd||151||fffd|l
Public min_p_gf As Double               '+|fffd||14f||fffd||fffd|l
Public max_m_gf As Double               '-|fffd||151||fffd|l
Public min_m_gf As Double               '-|fffd||14f||fffd||fffd|l
Public w_varp As Double                 '|fffd||fffd||fffd|U
'---- 2007.07.09 konegawa----
Public renzoku_data_p(65100) As String    '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^
Public renzoku_data_m(65100) As String    '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^
Public ctu_data_p_cnt As Long
Public ctu_data_m_cnt As Long
Public ctu_weight_avg_p As Double             '|fffd||fffd||fffd||fffd||5cf|d|fffd||fffd||fffd||3d2|l
Public ctu_weight_avg_m As Double             '|fffd||fffd||fffd||fffd||5cf|d|fffd||fffd||fffd||3d2|l
Public ctu_max_p_gf As Double               '+|fffd||151||fffd|l
Public ctu_min_p_gf As Double               '+|fffd||14f||fffd||fffd|l
Public ctu_max_m_gf As Double               '-|fffd||151||fffd|l
Public ctu_min_m_gf As Double               '-|fffd||14f||fffd||fffd|l
Public ctu_w_varp_p As Double                 '|fffd||fffd||fffd|U
Public ctu_w_varp_m As Double                 '|fffd||fffd||fffd|U
'---- 2007.07.09 konegawa----
Public max_limit As Double              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l
Public min_limit As Double              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|l
Public limit_jdg As Integer             '|fffd||327a||fffd||fffd||fffd||fffd|
Public jdg_flg As Boolean               '|fffd||327a||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public Sheet_name As String             '|fffd||fffd||fffd||303|V|fffd|[|fffd|g
Public Sheet_num As Integer             '|fffd|V|fffd|[|fffd|g|fffd||50d||fffd|
Public graph_sheet_name As String       '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g
Public f_sheet_name As String           '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||693||fffd||fffd|O|fffd||fffd|SHEET
Public graph_on_flg As Boolean          '|fffd|O|fffd||fffd||fffd|t|fffd||c42c||fffd|t|fffd||fffd||fffd|O
Public torikomi_name As String          '|fffd|H|fffd|H|fffd|H|fffd|H
Public mem_name As String               '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h
Public mem_name_num As Integer
Public tandoku_data As String           '|fffd|P|fffd||183|f|fffd|[|fffd|^
Public P_peak_data As String            '+|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^
Public M_peak_data As String            '-|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^
Public stop_btn_flg As Boolean          '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public form_close_flg As Boolean
Public sing_unit As String              '|fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|P
Public sing_data As String              '|fffd|f|fffd|[|fffd|^|fffd||fffd|
Public sing_p_max As String             '+|fffd||151||fffd|l
Public sing_p_min As String             '|fffd|{|fffd||14f||fffd||fffd|l
Public sing_m_max As String             '|fffd|||fffd||151||fffd|l
Public sing_m_min As String             '-|fffd||14f||fffd||fffd|l
Public sing_avg As String               '|fffd||fffd||fffd||3d2|l
Public sing_div As String               '|fffd|W|fffd||fffd||fffd||fffd|
Public sing_max_limit As String         '|fffd||327a||fffd||fffd||fffd|l
Public sing_min_limit As String
Public sing_no(110) As String           '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||50d||fffd|
Public sing_h_l(110) As String          'Hi-Low|fffd||fffd|
Public sing_load(110) As String         '|fffd||5cf|d
Public cont_unit As String
Public cont_data As String
Public cont_p_max As String
Public cont_p_min As String
Public cont_m_max As String
Public cont_m_min As String
Public cont_p_peak As String
Public cont_m_peak As String
Public cont_avg As String
Public cont_div As String
Public cont_max_limit As String
Public cont_min_limit As String
Public cont_no(1010) As String
Public cont_h_l(1010) As String
Public cont_load(1010) As String
Public std_unit As String
Public std_max_limit As String
Public std_min_limit As String
Public std_data As String
Public std_no(60) As String
Public std_p_max(60) As String
Public std_p_min(60) As String
Public std_m_max(60) As String
Public std_m_min(60) As String
Public std_p_peak(60) As String
Public std_m_peak(60) As String
Public std_last(60) As String
Public mem_data_count As Long
Public usb_len_err As Boolean
Public fg_type_num As String
Public unit_num As String
Public cell_limit_flg As Boolean
Public limit_frm_exit_flg As Boolean
Public mem_exit_flg As Boolean

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||590||fffd|
'**************************
Declare Sub Sleep Lib "KERNEL32" (ByVal dwMilliseconds As Long) ' |fffd|E|fffd|F|fffd|C|fffd|g|fffd|p|fffd||590||fffd|

'*************************
'   |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||295|\
'*************************
Private Sub main_select_frm_show()
    Dim bRet As Boolean
    Dim aa As Integer
    Dim intRet As Integer
    Dim myBook As Workbook
    Dim book_open As Integer
    '****************
    'Mark
    '****************
    
'***********************************************************************
'***********************************************************************
    XLANAME_K = "Toriemon USB"
    new_book = "Open the new file."
    book_open1 = "Open the file."
    FG_connect = "Please check connection with force gauge or power supply."
'***********************************************************************
'***********************************************************************
    book_open = 0
    For Each myBook In Workbooks
        book_open = book_open + 1
    Next myBook
    If book_open = 0 Then
        MsgBox book_open1, vbExclamation, XLANAME_K
        Exit Sub
    End If
    connect_error = "FG communication failed."
    stop_btn_flg = False
    form_close_flg = False
    
    On Error GoTo OPEN_ERROR
    bRet = OpenDevice()
    Do While (1)
        If bRet Then
            Exit Do
        Else
            MsgBox connect_error & Chr(13) & "" & Chr(13) & FG_connect & vbCr, vbOKOnly + vbExclamation, XLANAME_K
            Exit Sub
        End If
    Loop
    main_select_frm.Show
    Exit Sub
    
'v1.01add

OPEN_ERROR:
    MsgBox "Run Time error 49, DLL error occurred." & Chr(13) & "" & Chr(13) & _
            "Contact system administrator before installing program." & Chr(13) & "" & Chr(13) & _
            "Please reinstall ToriemonUSB program in proper sequence." & Chr(13) & "" & Chr(13) & _
            "Refer to manual for REINSTALLATION instructions." & vbCr, vbOKOnly + vbExclamation, XLANAME_K
End Sub

'*************************
'   |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'*************************
Private Sub ver_proc_k()
    Dim ver As String
    
    '*********************
    'Version
    '*********************
 '***********************************************************************
 '***********************************************************************
    XLANAME_K = "ToriemonUSB_ENG_USA"
    INFO = "Version information"
  '***********************************************************************
'***********************************************************************
    ver = XLANAME_K & " " & VERSION_K
    MsgBox ver & vbCrLf & vbCrLf & CORP & vbCrLf & vbCrLf & URL & vbCrLf & vbCrLf & COPYRIGHT, vbOKOnly, INFO
    
End Sub
Attribute VB_Name = "main_select_frm"
Attribute VB_Base = "0{3A674961-BA75-4594-9D89-DDA2D2172F8B}{DBC21B87-4296-4BEF-883A-0A2AD4D31821}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub change_btn_Click()
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    limit_frm.UserForm_Initialize
    limit_frm.Show
End Sub
Private Sub change_btn_2_Click()
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    limit_frm.UserForm_Initialize
    limit_frm.Show
End Sub

Private Sub change_btn_3_Click()
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    limit_frm.UserForm_Initialize
    limit_frm.Show
End Sub

Private Sub Fugou_btn_1_Click()
    If Fugou_btn_1.Value = True Then
        Fugou_btn_2.Value = False
        P_load_2 = False
        M_load_2 = True
    Else
        Fugou_btn_2.Value = True
        P_load_2 = True
        M_load_2 = False
    End If
End Sub

Private Sub Fugou_btn_2_Click()
    If Fugou_btn_2.Value = True Then
        Fugou_btn_2.BackColor = &H8080FF
        Fugou_btn_1.Value = False
        Fugou_btn_1.BackColor = &H8000000F
        P_load_2 = True
        M_load_2 = False
    Else
        Fugou_btn_2.BackColor = &H8000000F
        Fugou_btn_1.Value = True
        Fugou_btn_1.BackColor = &H8080FF
        P_load_2 = False
        M_load_2 = True
    End If
End Sub
Private Sub Ite_lbl_Change()
    'Ite_lbl.Text = StrConv(Val(Ite_lbl.Text), vbNarrow)
End Sub
Private Sub Ite_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim pnt As Integer
    On Error GoTo ITE_ERROR
    
    If val(Ite_lbl.Text) > 65000 Or val(Ite_lbl.Text) < 0 Then
        MsgBox torikomi_kaisuu & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        Ite_lbl.Text = 0
        Exit Sub
    End If
   
    Do While (Len(Ite_lbl.Text) <> 1 And Mid(Ite_lbl.Text, 1, 1) = "0")
        Ite_lbl.Text = Mid(Ite_lbl.Text, 2)
    Loop
    
    pnt = InStr(1, Ite_lbl.Text, ".")
    If pnt <> 0 Then
        Ite_lbl.Text = Mid(Ite_lbl.Text, 1, pnt - 1)
    End If
    
    ite_num = Ite_lbl.Text
    
    Exit Sub

ITE_ERROR:
    MsgBox write_miss & vbCr, vbOKOnly + vbExclamation, toriemon_mark
    Ite_lbl.Text = 0
End Sub



Private Sub MultiPage_Change()
    If device_cheak = False Then
        Exit Sub
    End If
    
    With main_select_frm
        .jdg_lbl.BackColor = &H808080
        .jdg_lbl.Caption = ""
        .jdg_lbl.ForeColor = &HC0C0C0
        .jdg_lbl_2.BackColor = &H808080
        .jdg_lbl_2.Caption = ""
        .jdg_lbl_2.ForeColor = &HC0C0C0
    End With
    
    
    'If MultiPage.Value = 0 Or MultiPage.Value = 1 Then
        usb_mdl.limit_read
    'End If
    If MultiPage.Value = 2 Then
        usb_mdl.mem_mode_read
        usb_mdl.mem_number_read
    End If
End Sub

Private Sub S_trg_lbl_Change()
    'S_trg_lbl.Text = StrConv(S_trg_lbl.Text, vbNarrow)
End Sub

Private Sub S_trg_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo TRG_ERROR
    
    If val(S_trg_lbl.Text) > 9999 Or val(S_trg_lbl.Text) < -9999 Then
        MsgBox trigger_range & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        S_trg_lbl.Text = 0
        Exit Sub
    End If
    
    If Mid(S_trg_lbl.Text, 1, 1) = "-" Then
        S_trg_lbl.Text = Mid(S_trg_lbl.Text, 2)
        m_flg = True
    End If
    Do While (Len(S_trg_lbl.Text) <> 1 And Mid(S_trg_lbl.Text, 1, 1) = "0" And Mid(S_trg_lbl.Text, 2, 1) <> ".")
        S_trg_lbl.Text = Mid(S_trg_lbl.Text, 2)
    Loop
    If m_flg = True Then
         S_trg_lbl.Text = "-" & S_trg_lbl.Text
         m_flg = False
    End If
    S_trg_num = S_trg_lbl.Text
    Exit Sub

TRG_ERROR:
    MsgBox write_miss & vbCr, vbOKOnly + vbExclamation, toriemon_mark
    S_trg_lbl.Text = 0

End Sub
Private Sub Torikomi_box_Change()
    If Not Torikomi_box.Text = frequency_10 And Not Torikomi_box.Text = frequency_20 And Not Torikomi_box.Text = frequency_50 And Not Torikomi_box.Text = frequency_100 And Not Torikomi_box.Text = frequency_1000 Then
        Torikomi_box.Text = torikomi_name
    End If
    
    torikomi_name = Torikomi_box.Text
End Sub
Private Sub Mem_box_Change()
    Dim usb_len As Long
    Dim buff(0) As Byte
    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    If Not Mem_box.Text = lon_mem_mode And Not Mem_box.Text = ctu_mem_mode And Not Mem_box.Text = std_mem_mode Then
        Mem_box.Text = mem_name
    End If
    
    mem_name = Mem_box.Text
   
    If Mem_box.Text = lon_mem_mode Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MEMMODE, USB_VAL_MEM_SING, 0, USB_LEN_MEMMODE, buff(0))
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
    ElseIf Mem_box.Text = ctu_mem_mode Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MEMMODE, USB_VAL_MEM_CONT, 0, USB_LEN_MEMMODE, buff(0))
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
    ElseIf Mem_box.Text = std_mem_mode Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MEMMODE, USB_VAL_MEM_NORM, 0, USB_LEN_MEMMODE, buff(0))
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
    End If
    
    usb_mdl.mem_number_read
    
End Sub

Private Sub Trg_on_btn_2_Click()
    If Trg_on_btn_2 Then
        Fugou_btn_2.Enabled = True
        Fugou_btn_1.Enabled = True
        S_trg_lbl.Enabled = True
        trg_on_flg_2 = True
    
    Else
        Fugou_btn_2.Enabled = False
        Fugou_btn_1.Enabled = False
        S_trg_lbl.Enabled = False
        trg_on_flg_2 = False
    End If
End Sub

Private Sub jdg_on_btn_Click()
    If Jdg_on_btn Then
        Jdg_on_btn_2.Value = True
        jdg_flg = True
    Else
        Jdg_on_btn_2.Value = False
        main_select_frm.jdg_lbl.BackColor = &H808080
        main_select_frm.jdg_lbl.Caption = ""
        main_select_frm.jdg_lbl.ForeColor = &HC0C0C0
        main_select_frm.jdg_lbl_2.BackColor = &H808080
        main_select_frm.jdg_lbl_2.Caption = ""
        main_select_frm.jdg_lbl_2.ForeColor = &HC0C0C0
        jdg_flg = False
    End If
End Sub
Private Sub jdg_on_btn_2_Click()
    If Jdg_on_btn_2 Then
        Jdg_on_btn.Value = True
        jdg_flg = True
    Else
        Jdg_on_btn.Value = False
        main_select_frm.jdg_lbl.BackColor = &H808080
        main_select_frm.jdg_lbl.Caption = ""
        main_select_frm.jdg_lbl.ForeColor = &HC0C0C0
        main_select_frm.jdg_lbl_2.BackColor = &H808080
        main_select_frm.jdg_lbl_2.Caption = ""
        main_select_frm.jdg_lbl_2.ForeColor = &HC0C0C0
        jdg_flg = False
    End If
End Sub


'********************
'   |fffd|t|fffd|H|fffd|[|fffd||fffd||fffd||fffd||fffd|[|fffd|h
'********************
Private Sub UserForm_Initialize()
    Dim bRet As Boolean
    Dim torikomi(4) As String
    Dim m_modo(2) As String
    Dim i As Integer
    
'***************************************************************************
'***************************************************************************
    '*************************
    'msgbox|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd|F|fffd||3d0||fffd||fffd||fffd||fffd|e
    '*************************
      
     toriemon_mark = "Toriemon USB"
     write_over = "Input range is over."
     write_miss = "Input value is wrong."
     kagen_over_jyougen = "Lower limit value is more than higher limit value. Still Continew?"
     cell_unusable = "Selected cell is not displayed."
     torikomi_genkai = "Limitation for loading number."
     clear_question = "Are your sure to clear?"
     memory_nodata = "No memory data."
     device_error = "Force gauge is not recognized."
     communicate_error = "Communication error happens."
     a_hantei_overFG = "Either higher or lower limit value is out of the range for FG."
     writable_over = "Input range of Excel is over."
     torikomi_kaisuu = "Input integer number from 0 to 65000 for loading number."
     trigger_range = "Input trigger from -9999 to 9999."
     FG_connect = "Please check connection with force gauge or power supply."
     torikomi_able = "Idle"
     setuzoku_ijyou = "No Communication"
     torikomi_tyuu = "Importing"
     tuusin_ijyou = "Connection error"
     keisokutyuu = "Measuring"

    
     '*********************
     '|fffd||fffd||fffd|g|fffd||313||fffd||fffd|{|fffd||fffd|
     '*********************
       
     frequency_10 = "10times/sec"
     frequency_20 = "20times/sec"
     frequency_50 = "50times/sec"
     frequency_100 = "100times/sec"
     frequency_1000 = "1000times/sec"
     lon_mem_mode = "Single Memory Mode"
     ctu_mem_mode = "Continuous Memory Mode"
     std_mem_mode = "Standard Memory Mode"
     torikomi_wait = "Waiting"
     torikomi_able1 = "Idle"
     judge = "Result"
     puls_max = "'+MAX"
     mins_max = "'-MAX"
     puls_min = "'+MIN"
     mins_min = "'-MIN"
     average = "AVG"
     std_deviation = "DEV"
     up_limit = "Upper Limit"
     dn_limit = "Lower Limit"
     last_value = "Last_data"
     'data_read = "|fffd||fffd||221||fffd||fffd||fffd||fffd|"
     ctu_data = "Continuous Data"
     '---- 2007.07.09 konegawa----
     ctu_p_data = "Adata(sign:+)"
     ctu_m_data = "Bdata(sign:-)"
     ctu_title_data_num = "N"
     ctu_title_max = "MAX"
     ctu_title_min = "MIN"
     ctu_title_ave = "AVE"
     ctu_title_dev = "DEV"
     '---- 2007.07.09 konegawa----
     measure_data = "Current Data"
     puls_peak = "'+Peak"
     mins_peak = "'-Peak"
     data_num = "Number of data"
     w_eight = "Load"
     no_jdg_mark = ""
     toriemon_mark1 = "Toriemon USB"
     lon_mem = "Single Memory"
     ctu_mem = "Continuous Memory"
     std_mem = "Standard Memory"
     u_nit = "Unit"
     mem_adrs = "Data No."
     puls_pk_value = "'+Peak"
     mins_pk_value = "'-Peak"
     puls_pk_value_1 = "'+Peak"
     mins_pk_value_1 = "'-Peak"

     
    '**********************
    '|fffd||fffd||fffd|
    '**********************
    
    main_select_frm.Caption = "Toriemon USB MainMenu "
    Frame12.Caption = "Reset"
    Zero_btn.Caption = "Tare"
    Peak_reset_btn.Caption = "Peak Reset"
    Frame7.Caption = "Start Cell"
    Frame39.Caption = "Status"
    State.Caption = "Idle"

    MultiPage.renzoku_page.Caption = "Continuous"
    Frame51.Caption = "Continuous"
    Label117.Caption = "Number of Data"
    Label118.Caption = "Sampling Rate"
    Label119.Caption = "Trigger"
    Start_btn.Caption = "START"
    Stop_btn.Caption = "STOP"
    Frame43.Caption = "Comparator"
    change_btn.Caption = "Change"
    Label103.Caption = "Upper Limit"
    Label104.Caption = "Lower Limit"
    Label107.Caption = "Result"
    'jdg_lbl.Caption = ""
    Torikomi_box.Text = "10times/sec"
    Label116.Caption = "Header"
    Label109.Caption = "Graph"

    MultiPage.tandoku_page.Caption = "Single"
    Frame53.Caption = "Single"
    Data_in_btn.Caption = "Current Data"
    Peak_in_btn.Caption = "Peak Data"
    Frame46.Caption = "Comparator"
    Label120.Caption = "Upper Limit"
    Label110.Caption = "Lower Limit"
    Label113.Caption = "Result"
    change_btn_2.Caption = "Change"
    'jdg_lbl_2.Caption = ""
    Frame10.Caption = "Cell"
    Opt_btn_tate.Caption = "Down"
    Opt_btn_yoko.Caption = "Right"
    Label115.Caption = "Header"

    MultiPage.mem_page.Caption = "Memory"
    Frame56.Caption = "Memory mode"
    Mem_box.Text = "Single Memory Mode"
    Frame57.Caption = "Number of memory data"
    Frame61.Caption = "Comparator"
    change_btn_3.Caption = "Change"
    Label123.Caption = "Upper Limit"
    Label124.Caption = "Lower Limit"
    Frame54.Caption = "Memory Data"
    Mem_input_btn.Caption = "Import"
    Mem_clear_btn.Caption = "Clear"
    Frame55.Caption = "Measurement"
    Mem_start_btn.Caption = "START"
    Mem_stop_btn.Caption = "STOP"

    
    '*********************
    'Font
    '*********************
    main_select_frm.Font = "MS UI Gothic"
    
    Frame12.Font = "MS UI Gothic"
    Zero_btn.Font = "MS UI Gothic"
    Peak_reset_btn.Font = "MS UI Gothic"
    Frame7.Font = "MS UI Gothic"
    Frame39.Font = "MS UI Gothic"
    State.Font = "MS UI Gothic"
    
    MultiPage.Font = "MS UI Gothic"
    
    Frame51.Font = "MS UI Gothic"
    Label117.Font = "MS UI Gothic"
    Label118.Font = "MS UI Gothic"
    Start_btn.Font = "MS UI Gothic"
    Stop_btn.Font = "MS UI Gothic"
    Frame43.Font = "MS UI Gothic"
    change_btn.Font = "MS UI Gothic"
    Label103.Font = "MS UI Gothic"
    Label104.Font = "MS UI Gothic"
    Label107.Font = "MS UI Gothic"
    'jdg_lbl.Font
    Torikomi_box.Font = "MS UI Gothic"
    Label116.Font = "MS UI Gothic"
    Label109.Font = "MS UI Gothic"
    
   
    Frame53.Font = "MS UI Gothic"
    Data_in_btn.Font = "MS UI Gothic"
    Peak_in_btn.Font = "MS UI Gothic"
    Frame46.Font = "MS UI Gothic"
    Label120.Font = "MS UI Gothic"
    Label110.Font = "MS UI Gothic"
    Label113.Font = "MS UI Gothic"
    change_btn_2.Font = "MS UI Gothic"
    jdg_lbl_2.Font = "MS UI Gothic"
    Frame10.Font = "MS UI Gothic"
    Opt_btn_tate.Font = "MS UI Gothic"
    Opt_btn_yoko.Font = "MS UI Gothic"
    Label115.Font = "MS UI Gothic"
    
   
    Frame56.Font = "MS UI Gothic"
    Mem_box.Font = "MS UI Gothic"
    Frame57.Font = "MS UI Gothic"
    Frame61.Font = "MS UI Gothic"
    change_btn_3.Font = "MS UI Gothic"
    Label123.Font = "MS UI Gothic"
    Label124.Font = "MS UI Gothic"
    Frame54.Font = "MS UI Gothic"
    Mem_input_btn.Font = "MS UI Gothic"
    Mem_clear_btn.Font = "MS UI Gothic"
    Frame55.Font = "MS UI Gothic"
    Mem_start_btn.Font = "MS UI Gothic"
    Mem_stop_btn.Font = "MS UI Gothic"

'**************************************************************
'**************************************************************
    
    usb_len_err = False
    stop_btn_flg = False
    form_close_flg = False
    torikomi_name = frequency_10
    
    torikomi(0) = frequency_10
    torikomi(1) = frequency_20
    torikomi(2) = frequency_50
    torikomi(3) = frequency_100
    'torikomi(4) = "1000|fffd||fffd|/|fffd|b"
    m_modo(0) = lon_mem_mode
    m_modo(1) = ctu_mem_mode
    m_modo(2) = std_mem_mode
    
    MultiPage.Value = 0
    
    For i = 0 To 3 '4
        Torikomi_box.AddItem torikomi(i)
    Next
    
    For i = 0 To 2
        Mem_box.AddItem m_modo(i)
    Next
    
    usb_mdl.limit_read
    usb_mdl.mem_mode_read
    
    State.Caption = torikomi_able
    State.BackColor = &H80FF80

    graph_on_flg = False
            
    P_load_2 = True
    M_load_2 = False
    
    Fugou_btn_2.Enabled = False
    Fugou_btn_2.Value = True
    Fugou_btn_1.Enabled = False
    Fugou_btn_1.Value = False
    S_trg_lbl.Enabled = False
   
        
    g_cell_dir = TATE                           ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||fffd|
   
    limit_jdg = 1

    trg_on_flg_2 = False
    jdg_flg = False
    
    Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = True                     '|fffd||635e||fffd||fffd|
    Trg_on_btn_2.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    
    Graph_on_btn.Enabled = True                     '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = True                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = True                   '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = True                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = True                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = True                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = True                     '|fffd|c|fffd||fffd|
    Opt_btn_yoko.Enabled = True                     '|fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = True                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I
    RefEdit1.Enabled = True                         '|fffd|Z|fffd||fffd||fffd|I
    Header_on_btn.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = True                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = True
   
End Sub

'************************
'   |fffd|t|fffd|H|fffd|[|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|[|fffd|h
'************************
Public Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Dim bRet As Boolean
    bRet = ClosePipe()
    bRet = CloseDevice()
    'If (bRet) Then
    'Else
    '    MsgBox "CloseDevice : NG"
    'End If
    form_close_flg = True
End Sub
'***************
'RefEdit|fffd|C|fffd|x|fffd||fffd||fffd|g
'***************
Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

'**************
'   OK|fffd|{|fffd|^|fffd||fffd|
'**************
Private Sub start_btn_click()
    cell_limit_flg = True
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    
    ite_num = Abs(Ite_lbl.Text)                          '|fffd||635e||fffd||fffd|
    
    If ite_num = 0 Then                             '|fffd||635e||fffd||fffd|0|fffd||302||182||fffd||fffd||343|G|fffd||fffd||fffd|h|fffd||fffd||fffd|X
        ite_num = 65000
    End If
    
    f_sheet_name = ActiveSheet.Name
    data_count = 1                                  ' |fffd|f|fffd|[|fffd|^|fffd||fffd|
    '---- 2007.07.09 konegawa----
    ctu_data_p_cnt = 1
    ctu_data_m_cnt = 1
    '---- 2007.07.09 konegawa----
    trg_flg_2 = False
    
    S_trg_num = S_trg_lbl.Text                      '2nd|fffd|g|fffd||fffd||fffd|K
   
    limit_jdg = 1                                   '|fffd||327a||fffd||fffd||fffd||fffd||fffd||83c9||fffd||fffd||fffd|l
    
    If Graph_on_btn.Value = True Then
        graph_on_flg = True
    Else
        graph_on_flg = False
    End If
    
    max_limit = Max_limit_lbl.Caption             '|fffd||fffd||fffd||fffd|l|fffd||fffd||835e|
    min_limit = Min_limit_lbl.Caption             '|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||835e|
    
    g_areas = RefEdit1.Value                        ' |fffd|Z|fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        range(g_areas).Activate
        On Error Resume Next
    End If
    
    first_Row = ActiveCell.Row                      ' |fffd||635e||fffd|J|fffd|n|fffd||fffd||fffd||303|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    first_Col = ActiveCell.Column
    
    RefEdit1.Text = ""
    
    If main_select_frm.Graph_on_btn Then
        outp_mdl.Sheet_move
    End If
    
    Ite_lbl.Enabled = False                         '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = False                    '|fffd||635e||fffd||fffd|
    Trg_on_btn_2.Enabled = False                    '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    Graph_on_btn.Enabled = False                    '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = False                       '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = True                         '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = False                  '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = False                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = False                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = False                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = False                     '|fffd|c|fffd||fffd|
    Opt_btn_yoko.Enabled = False                     '|fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = False                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I
    RefEdit1.Enabled = False                         '|fffd|Z|fffd||fffd||fffd|I
    Header_on_btn.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = False                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = False
    change_btn.Enabled = False
    MultiPage.tandoku_page.Enabled = False
    MultiPage.mem_page.Enabled = False
    
    
    State.Caption = torikomi_wait
    State.BackColor = &H80FFFF
    
    main_select_frm.jdg_lbl.BackColor = &H808080
    main_select_frm.jdg_lbl.Caption = ""
    main_select_frm.jdg_lbl.ForeColor = &HC0C0C0
    
    usb_mdl.interrupt
    
    If usb_len_err = True Then
        stop_rutin
        usb_len_err = False
        Exit Sub
    End If
    
    State.Caption = torikomi_able
    State.BackColor = &H80FF80
   
    calc_mdl.weight_average
    calc_mdl.Max_weight
    calc_mdl.Min_weight
    calc_mdl.Weight_varp
    calc_mdl.P_Max_weight
    calc_mdl.M_Max_weight
    calc_mdl.P_Min_weight
    calc_mdl.M_Min_weight
    
    '---- 2007.07.09 konegawa ----
    calc_mdl.weight_average_p
    calc_mdl.weight_average_m
    calc_mdl.Max_weight_p
    calc_mdl.Max_weight_m
    calc_mdl.Min_weight_p
    calc_mdl.Min_weight_m
    calc_mdl.Weight_varp_p
    calc_mdl.Weight_varp_m
'    max_p_gf = ctu_max_p_gf
'    max_m_gf = ctu_max_m_gf
'    min_p_gf = ctu_min_p_gf
'    min_m_gf = ctu_min_m_gf
    
    '---- 2007.07.09 konegawa ----
    
    '|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|d|fffd|l******************************************************************
    
    If max_limit > 0 And min_limit >= 0 Then
        If max_p_gf <= max_limit And min_p_gf >= min_limit And (max_m_gf = 0 And min_m_gf = 0) Then
            limit_jdg = 1
        Else
            limit_jdg = 0
        End If
    ElseIf max_limit > 0 And min_limit < 0 Then                 '
        If max_p_gf <= max_limit And max_m_gf >= min_limit Then
            limit_jdg = 1
        Else
            limit_jdg = 0
        End If
       
    ElseIf max_limit < 0 And min_limit > 0 Then
        If max_m_gf >= max_limit And max_p_gf <= min_limit Then
            limit_jdg = 1
        Else
            limit_jdg = 0
        End If
    ElseIf max_limit < 0 And min_limit <= 0 Then
        If max_m_gf >= max_limit And min_m_gf <= min_limit And (max_p_gf = 0 And min_p_gf = 0) Then
            limit_jdg = 1
        Else
            limit_jdg = 0
        End If
    ElseIf max_limit = 0 And min_limit = 0 Then
        limit_jdg = 4
    Else
        MsgBox ""
    End If
    
    '***************************************************************************************
    
    
    If main_select_frm.Graph_on_btn Then
        main_select_frm.Hide
        outp_mdl.mk_fig
        
        If main_select_frm.Jdg_on_btn.Value = True Then
            jdg_frm.UserForm_Initialize
            jdg_frm.Show
        Else
            not_jdg_frm.Show
        End If

        Sheets(f_sheet_name).Activate
        Sheets(f_sheet_name).Cells(first_Row, first_Col).Select
        main_select_frm.Show
    Else
        On Error Resume Next
        ActiveSheet.Cells(first_Row, first_Col + 1).Activate
        
        With main_select_frm.jdg_lbl
            If jdg_flg = True Then
                If limit_jdg = 1 Then
                    .BackColor = &HF96309
                    .Caption = "OK"
                    .ForeColor = &HFFFF80
                ElseIf limit_jdg = 0 Then
                    .BackColor = &HFF&
                    .Caption = "NG"
                    .ForeColor = &HC0C0FF
                Else
                    .BackColor = &H808080
                    .Caption = ""
                    .ForeColor = &HC0C0C0
                End If
            Else
                .BackColor = &H808080
                .Caption = ""
                .ForeColor = &HC0C0C0
            End If
        End With
    End If
   
    Exit Sub
Range_err:
    MsgBox cell_unusable & vbCr, vbOKOnly + vbExclamation, toriemon_mark
    Exit Sub
End Sub
Private Sub stop_btn_Click()
    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    stop_btn_flg = True
    
End Sub

Public Sub stop_rutin()
    Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = True                     '|fffd||635e||fffd||fffd|
    Trg_on_btn_2.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    
    If Trg_on_btn_2 Then
        Fugou_btn_2.Enabled = True
        Fugou_btn_1.Enabled = True
        S_trg_lbl.Enabled = True
    End If
               
    Graph_on_btn.Enabled = True                     '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = True                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = True                   '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = True                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = True                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = True                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = True                     '|fffd|c|fffd||fffd|
    Opt_btn_yoko.Enabled = True                     '|fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = True                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I
    RefEdit1.Enabled = True                         '|fffd|Z|fffd||fffd||fffd|I
    Header_on_btn.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = True                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = True
    change_btn.Enabled = True
    change_btn_2.Enabled = True
    change_btn_3.Enabled = True
    MultiPage.renzoku_page.Enabled = True
    MultiPage.tandoku_page.Enabled = True
    MultiPage.mem_page.Enabled = True
  
                
End Sub
Private Sub Mem_start_btn_Click()

    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    usb_mdl.mem_number_read
    main_select_frm.State.Caption = keisokutyuu
    main_select_frm.State.BackColor = &HFFFF00
       
    If Mem_box.Text = ctu_mem_mode Then
        
        If mem_number_lbl.Caption >= 1000 Then
            MsgBox torikomi_genkai & vbCr, vbOKOnly + vbExclamation, toriemon_mark
            main_select_frm.State.Caption = torikomi_able
            main_select_frm.State.BackColor = &H80FF80
            Exit Sub
        End If
        
        usb_mdl.cont_mem_start
    
    
    ElseIf Mem_box.Text = std_mem_mode Then
        
        If mem_number_lbl.Caption >= 50 Then
            MsgBox torikomi_genkai & vbCr, vbOKOnly + vbExclamation, toriemon_mark
            main_select_frm.State.Caption = torikomi_able
            main_select_frm.State.BackColor = &H80FF80
            Exit Sub
        End If
        
        usb_mdl.std_mem_start
    
    
    End If
    If Mem_box.Text = lon_mem_mode Then
        If mem_number_lbl.Caption >= 100 Then
            MsgBox torikomi_genkai & vbCr, vbOKOnly + vbExclamation, toriemon_mark
            main_select_frm.State.Caption = torikomi_able
            main_select_frm.State.BackColor = &H80FF80
            
            Exit Sub
        End If
        
        usb_mdl.sing_mem_start
    
    
    End If
    If mem_exit_flg = True Then
        Exit Sub
    End If
    
    If Mem_box.Text = lon_mem_mode Then
        main_select_frm.State.Caption = torikomi_able
        main_select_frm.State.BackColor = &H80FF80
        Exit Sub
    End If
    
    Ite_lbl.Enabled = False                         '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = False                     '|fffd||635e||fffd||fffd|
    Trg_on_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    Graph_on_btn.Enabled = False                    '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = False                       '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                         '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = False                  '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = False                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = False                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = False                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = False                     '|fffd|c|fffd||fffd|
    Opt_btn_yoko.Enabled = False                     '|fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = True                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = False                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I
    RefEdit1.Enabled = False                         '|fffd|Z|fffd||fffd||fffd|I
    Header_on_btn.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = False                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = False
    change_btn_3.Enabled = False
    MultiPage.tandoku_page.Enabled = False
    MultiPage.renzoku_page.Enabled = False
End Sub

Private Sub Mem_stop_btn_Click()
    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    If Mem_box.Text = ctu_mem_mode Then
        usb_mdl.cont_mem_stop
    ElseIf Mem_box.Text = std_mem_mode Then
        usb_mdl.std_mem_stop
    End If
  
    stop_rutin
    
    main_select_frm.State.Caption = torikomi_able
    main_select_frm.State.BackColor = &H80FF80
    
   ' usb_mdl.mem_number_read
End Sub
Private Sub Mem_clear_btn_Click()
    Dim usb_len As Long
    Dim intRet As Integer
     
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    intRet = MsgBox(clear_question, vbYesNo + vbQuestion, toriemon_mark)
    If intRet = vbYes Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MSR_CLR, USB_VAL_CLR_ALL, 0, USB_LEN_MSR_CLR, 0)
        
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
        
        mem_number_lbl.Caption = 0
        
    End If
    
End Sub
Private Sub Mem_input_btn_Click()
    
    usb_mdl.mem_number_read
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    If mem_number_lbl.Caption = 0 Then
        MsgBox memory_nodata & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        Exit Sub
    End If
    mem_data_get
    
End Sub
Private Sub mem_data_get()
    Dim buff(15) As Byte
    Dim usb_len As Long
    
    If device_cheak = False Then
        Exit Sub
    End If
    
     g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.Text = ""
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MEM_CNT, USB_VAL_MEM_CNT, 0, USB_LEN_MEM_CNT, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    mem_data_count = Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12))
    
    If Mem_box.Text = lon_mem_mode Then
        usb_mdl.single_data_in
    ElseIf Mem_box.Text = ctu_mem_mode Then
        usb_mdl.cont_data_in
    ElseIf Mem_box.Text = std_mem_mode Then
        usb_mdl.std_data_in
    End If
    Exit Sub
Range_err:
    MsgBox cell_unusable & vbCr, vbOKOnly + vbExclamation, toriemon_mark
End Sub

Private Sub Data_in_btn_Click()
    Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    data_count = 0
    
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I
    End If
 
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.Text = ""
  
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_SING_ST, USB_VAL_SING_ST, 0, USB_LEN_SING_ST, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    tandoku_data = Chr(buff(2))
    
    For ii = 3 To usb_len Step 1
        tandoku_data = tandoku_data & Chr(buff(ii))
    Next ii
    
    outp_mdl.cell_output2
    
    Exit Sub
  
Range_err:
    MsgBox cell_unusable & vbCr, vbOKOnly + vbExclamation, toriemon_mark
End Sub
Private Sub Peak_in_btn_Click()
    Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.limit_read                          '|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|l|fffd||1c2||74d||fffd||fffd||741|i|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||242||112||1c9||fffd||fffd|j
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I
    End If
       
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.Text = ""
    
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MSR_RD, USB_VAL_MSR_PEAK, 0, USB_LEN_MSR_PEAK, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    P_peak_data = Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)) & Chr(buff(7))
    M_peak_data = Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12)) & Chr(buff(13))
 
   ' P_peak_data = Chr(buff(2))
    'M_peak_data = Chr(buff(8))
   ' For ii = 3 To 7 Step 1
    '    P_peak_data = P_peak_data & Chr(buff(ii))
     '   M_peak_data = P_peak_data & Chr(buff(ii + 7))
    'Next ii
    
    outp_mdl.cell_output3
 
    Exit Sub

Range_err:
    MsgBox cell_unusable & vbCr, vbOKOnly + vbExclamation, toriemon_mark
End Sub
Private Sub Peak_reset_btn_Click()
    Dim usb_len As Long
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MSR_CLR, USB_VAL_CLR_PEAK, 0, USB_LEN_MSR_CLR, 0)
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
  
End Sub
Private Sub Zero_btn_Click()
    Dim usb_len As Long
    
    If device_cheak = False Then
        Exit Sub
    End If
        
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MODE, USB_VAL_MODE_TARE, 0, USB_LEN_MODE, 0)
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If

End Sub

'**********************
'   |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|I
'**********************
Private Sub OptBtn_tate_Click()
    g_cell_dir = TATE                           ' |fffd|c|fffd||fffd||fffd||fffd|I
   
End Sub

Private Sub OptBtn_yoko_Click()
    g_cell_dir = YOKO                           ' |fffd||fffd||fffd||fffd||fffd||fffd|I
 
End Sub

Public Function device_cheak()
    Dim bRet As Boolean
    If IsWorkingDevice() = False Then
        MsgBox device_error & Chr(13) & FG_connect & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        main_select_frm.State.Caption = setuzoku_ijyou
        main_select_frm.State.BackColor = &HFF&
        bRet = ResetDevice()
        bRet = OpenDevice()
        device_cheak = False
    Else
        main_select_frm.State.Caption = torikomi_able
        main_select_frm.State.BackColor = &H80FF80
        device_cheak = True
    End If
    
End Function

Attribute VB_Name = "not_jdg_frm"
Attribute VB_Base = "0{327DD94D-6D7F-4D8C-A484-F820AF0A3989}{EA4B5E0F-526F-4826-B34C-38C9380947B6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CommandButton1_Click()
not_jdg_frm.Hide
End Sub

Private Sub UserForm_Initialize()
'**************************************************************
'**************************************************************
    '*************
    '|fffd||fffd||fffd||fffd|
    '*************
    not_jdg_frm.Caption = "Toriemon USB"
    CommandButton1.Caption = "Return to Previous Sheet"

    '*************
    'Font
    '*************
    not_jdg_frm.Font = "MS UI Gothic"
    CommandButton1.Font = "MS UI Gothic"
'**************************************************************
'**************************************************************
End Sub
Attribute VB_Name = "outp_mdl"
Option Explicit
Dim next_graph_sheet_name

'***********************
'   |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'***********************
Public Sub cell_output1()
    Dim Row As Long
    Dim Col As Long
   
    On Error GoTo CELL_ERROR
    cell_limit_flg = True
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    Col = ActiveCell.Column
    
    ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||34f|c|fffd||fffd|
    If main_select_frm.Header_on_btn Then
        
        If Not graph_on_flg Then
            ActiveSheet.Cells(Row, Col) = ctu_data
            '---- 2007.07.09 konegawa ----
            ActiveSheet.Cells(Row, Col + 1) = ctu_p_data
            ActiveSheet.Cells(Row, Col + 2) = ctu_m_data
            '---- 2007.07.09 konegawa ----
            Row = Row + 1
        End If
        
        main_select_frm.Header_on_btn = False
    End If
    
    If graph_on_flg Then
        ActiveSheet.Cells(Row, Col) = ctu_data
        '---- 2007.07.09 konegawa ----
        ActiveSheet.Cells(Row, Col + 1) = ctu_p_data
        ActiveSheet.Cells(Row, Col + 2) = ctu_m_data
        '---- 2007.07.09 konegawa ----
        Row = Row + 1
        graph_on_flg = False
    End If
        
    If data_count <= ite_num Then
        ActiveSheet.Cells(Row, Col) = renzoku_data(data_count)
        '---- 2007.07.09 konegawa----
        If val(renzoku_data(data_count)) > 0 Then
            ActiveSheet.Cells(Row, Col + 1) = renzoku_data(data_count)
            renzoku_data_p(ctu_data_p_cnt) = renzoku_data(data_count)
            ctu_data_p_cnt = ctu_data_p_cnt + 1
        ElseIf val(renzoku_data(data_count)) < 0 Then
            ActiveSheet.Cells(Row, Col + 2) = renzoku_data(data_count) * -1
            renzoku_data_m(ctu_data_m_cnt) = renzoku_data(data_count) * -1
            ctu_data_m_cnt = ctu_data_m_cnt + 1
        End If
        '---- 2007.07.09 konegawa----
        ActiveSheet.Cells(Row + 1, Col).Select
    Else
        ActiveSheet.Cells(Row + 1, Col).Select  ' |fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
        Exit Sub
    End If
    
    Exit Sub
CELL_ERROR:
    MsgBox writable_over & vbCr, vbOKOnly + vbExclamation, toriemon_mark
    cell_limit_flg = False
End Sub

'***********************
' |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'***********************
Public Sub cell_output2()
    Dim Row As Long
    Dim Col As Long
    
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    Col = ActiveCell.Column
    
    If plot_range(Row, Col) = False Then
        Exit Sub
    End If
    
    If main_select_frm.Header_on_btn_2 Then
        ActiveSheet.Cells(Row, Col) = measure_data
        
        If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
            Col = Col + 1
        Else
            Row = Row + 1
        End If
        
        main_select_frm.Header_on_btn_2 = False
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|d|fffd|l*****************************************************************************************************************************
    'If tandoku_data < min_limit And tandoku_data > max_limit Then  '|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|i|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd|j
    '    limit_jdg = 3
    'ElseIf tandoku_data > max_limit Then '|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd||a347|
    '    limit_jdg = 0           'High
    'ElseIf tandoku_data < min_limit Then  '|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|
    '    limit_jdg = 2           'low
    'Else
    '    limit_jdg = 1
    'End If
    '******************************************************************************************************************************************
    
    '|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l******************************************************************************************************************************
    
    If max_limit > min_limit Then
        If tandoku_data > max_limit Then
            limit_jdg = 0
        ElseIf tandoku_data < min_limit Then
            limit_jdg = 2
        Else
            limit_jdg = 1
        End If
    
    ElseIf max_limit < min_limit Then   '|fffd|i|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd|j
        If tandoku_data < max_limit Then
            limit_jdg = 0
        ElseIf tandoku_data > min_limit Then
            limit_jdg = 2
        Else
            limit_jdg = 1
        End If
    Else
        limit_jdg = 4
    End If
    '******************************************************************************************************************************************
    
            
    ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||34f|c|fffd||fffd|
    If g_cell_dir = YOKO Then                           '|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
        ActiveSheet.Cells(Row, Col) = tandoku_data      '|fffd|Z|fffd||fffd||fffd||253|\|fffd||fffd|t
        ActiveSheet.Cells(Row, Col + 1).Select      '|fffd||fffd||fffd|Z|fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
    Else
        ActiveSheet.Cells(Row, Col) = tandoku_data  ' |fffd|@    |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||30f||a347||fffd|A
        ActiveSheet.Cells(Row + 1, Col).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
    End If
    
    With main_select_frm.jdg_lbl_2
        If jdg_flg = True Then
            If limit_jdg = 1 Then
                .BackColor = &HF96309
                .Caption = "OK"
                .ForeColor = &HFFFF80
            ElseIf limit_jdg = 0 Then
                .BackColor = &HFF&
                .Caption = "HIGH"
                .ForeColor = &HC0C0FF
            ElseIf limit_jdg = 2 Then
                .BackColor = &HFF&
                .Caption = "LOW"
                .ForeColor = &HC0C0FF
            ElseIf limit_jdg = 3 Then
                .BackColor = &HFF&
                .Caption = "BOTH"
                .ForeColor = &HC0C0FF
            Else
                .BackColor = &H808080
                .Caption = ""
                .ForeColor = &HC0C0C0
            End If
        Else
            .BackColor = &H808080
            .Caption = ""
            .ForeColor = &HC0C0C0
        End If
    End With
   
End Sub

'*********************************
'|fffd|@|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'*********************************
Public Sub cell_output3()
    Dim Row As Long
    Dim Col As Long
   
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    Col = ActiveCell.Column
    
    If plot_range(Row, Col) = False Then
        Exit Sub
    End If
    
    With ActiveSheet
    
        If main_select_frm.Header_on_btn_2 Then
            If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
                .Cells(Row, Col) = puls_pk_value_1
                .Cells(Row + 1, Col) = mins_pk_value_1
                Col = Col + 1
            Else
                .Cells(Row, Col) = puls_pk_value_1
                .Cells(Row, Col + 1) = mins_pk_value_1
                Row = Row + 1
            End If
            main_select_frm.Header_on_btn_2 = False
        End If
        If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
            .Cells(Row, Col) = P_peak_data
            .Cells(Row + 1, Col) = M_peak_data
            .Cells(Row, Col + 1).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
        Else
            .Cells(Row, Col) = P_peak_data  ' |fffd|@    |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||30f||a347||fffd|A
            .Cells(Row, Col + 1) = M_peak_data
            .Cells(Row + 1, Col).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
        End If
    
    End With
    
    main_select_frm.jdg_lbl_2.BackColor = &H808080
    main_select_frm.jdg_lbl_2.Caption = ""
    main_select_frm.jdg_lbl_2.ForeColor = &HC0C0C0

End Sub

'**********************
'|fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|`
'**********************
Public Sub mk_fig()
    Dim Sheet_name As String                            ' |fffd|V|fffd|[|fffd|g|fffd||fffd|6|fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||314||50d||fffd|
    
    On Error Resume Next
                  
    Sheet_name = ActiveSheet.Name
    ActiveSheet.ChartObjects.Add(220, 14, 647, 300).Select
    ActiveChart.ChartType = xlXYScatter
    ActiveChart.SetSourceData Source:=ActiveSheet.range(ActiveSheet.Cells(1, 1), ActiveSheet.Cells(1 + data_count, 1)), PlotBy:=xlColumns
    ActiveChart.Location Where:=xlLocationAsObject, Name:=graph_sheet_name
    With ActiveChart
        .Legend.Select
        Selection.Delete
        .ChartTitle.Select
        Selection.Delete
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = data_num
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = w_eight
        .Axes(xlValue).MajorGridlines.Border.ColorIndex = 57                               '|fffd||23d5||fffd||fffd||fffd|J|fffd||fffd||fffd|[
        .Axes(xlValue).MajorGridlines.Border.LineStyle = xlDot
        .PlotArea.Interior.ColorIndex = 2
        .SeriesCollection(1).Border.ColorIndex = 3                      '|fffd||210||fffd||fffd||310|F
        .SeriesCollection(1).Border.LineStyle = 1                       '|fffd||210||fffd||fffd||303|J|fffd||fffd||fffd|[
        .SeriesCollection(1).Border.weight = xlMedium 'xlThick
        .SeriesCollection(1).MarkerStyle = 0                            '|fffd|}|fffd|[|fffd|J|fffd|[|fffd|X|fffd|^|fffd|C|fffd||fffd|
        .PlotArea.Border.LineStyle = xlNone                          '|fffd|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd||fffd||fffd|E|fffd||fffd||fffd||fffd|
        
    End With
    
    With ActiveSheet
'        .Cells(28, 3) = data_num
'        .Cells(28, 4) = data_count - 1
'        .Cells(29, 3) = judge
'        .Cells(28, 5) = puls_max
'        .Cells(28, 6) = max_p_gf
'        .Cells(29, 5) = mins_max
'        .Cells(29, 6) = max_m_gf
'        .Cells(28, 7) = puls_min
'        .Cells(28, 8) = min_p_gf
'        .Cells(29, 7) = mins_min
'        .Cells(29, 8) = min_m_gf
'        .Cells(28, 9) = average
'        .Cells(28, 10) = Round(weight_avg, 3)
'        .Cells(29, 9) = std_deviation
'        .Cells(29, 10) = Round(w_varp, 3)
'        .Cells(28, 11) = up_limit
'        .Cells(28, 12) = max_limit
'        .Cells(29, 11) = dn_limit
'        .Cells(29, 12) = min_limit

'        If jdg_flg = True Then
'            If limit_jdg = 1 Then
'                .Cells(29, 4) = "OK"
'            ElseIf limit_jdg = 0 Then
'                .Cells(29, 4) = "NG"
'            End If
'        Else
'            .Cells(29, 4) = no_jdg_mark
'        End If

        '---- 2007.07.09 konegawa ----
        .Cells(28, 5) = data_num
        .Cells(28, 6) = data_count - 1
        .Cells(29, 5) = judge
        .Cells(28, 8) = up_limit
        .Cells(28, 9) = max_limit
        .Cells(29, 8) = dn_limit
        .Cells(29, 9) = min_limit
        
        .Cells(31, 6) = ctu_p_data
        .Cells(32, 6).HorizontalAlignment = xlRight
        .Cells(32, 6) = ctu_title_data_num
        .Cells(32, 7).HorizontalAlignment = xlRight
        .Cells(32, 7) = ctu_title_max
        .Cells(32, 8).HorizontalAlignment = xlRight
        .Cells(32, 8) = ctu_title_min
        .Cells(32, 9).HorizontalAlignment = xlRight
        .Cells(32, 9) = ctu_title_ave
        .Cells(32, 10).HorizontalAlignment = xlRight
        .Cells(32, 10) = ctu_title_dev
        
        If ctu_data_p_cnt > 1 Then      '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|v|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd|
            .Cells(33, 6) = ctu_data_p_cnt - 1
            .Cells(33, 7) = ctu_max_p_gf
            .Cells(33, 8) = ctu_min_p_gf
            .Cells(33, 9) = calc_round(val(ctu_weight_avg_p), 3)
            .Cells(33, 10) = calc_round(val(ctu_w_varp_p), 3)
        Else
            .Cells(33, 6) = "-"
            .Cells(33, 7) = "-"
            .Cells(33, 8) = "-"
            .Cells(33, 9) = "-"
            .Cells(33, 10) = "-"
        End If
        
        .Cells(33, 6).HorizontalAlignment = xlCenter
        .Cells(33, 7).HorizontalAlignment = xlCenter
        .Cells(33, 8).HorizontalAlignment = xlCenter
        .Cells(33, 9).HorizontalAlignment = xlCenter
        .Cells(33, 10).HorizontalAlignment = xlCenter
        
        .Cells(34, 6) = ctu_m_data
        .Cells(35, 6).HorizontalAlignment = xlRight
        .Cells(35, 6) = ctu_title_data_num
        .Cells(35, 7).HorizontalAlignment = xlRight
        .Cells(35, 7) = ctu_title_max
        .Cells(35, 8).HorizontalAlignment = xlRight
        .Cells(35, 8) = ctu_title_min
        .Cells(35, 9).HorizontalAlignment = xlRight
        .Cells(35, 9) = ctu_title_ave
        .Cells(35, 10).HorizontalAlignment = xlRight
        .Cells(35, 10) = ctu_title_dev
        
         If ctu_data_m_cnt > 1 Then      '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|v|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd|
            .Cells(36, 6) = ctu_data_m_cnt - 1
            .Cells(36, 7) = ctu_max_m_gf
            .Cells(36, 8) = ctu_min_m_gf
            .Cells(36, 9) = calc_round(val(ctu_weight_avg_m), 3)
            .Cells(36, 10) = calc_round(val(ctu_w_varp_m), 3)
        Else
            .Cells(36, 6) = "-"
            .Cells(36, 7) = "-"
            .Cells(36, 8) = "-"
            .Cells(36, 9) = "-"
            .Cells(36, 10) = "-"
        End If
        
        .Cells(36, 6).HorizontalAlignment = xlCenter
        .Cells(36, 7).HorizontalAlignment = xlCenter
        .Cells(36, 8).HorizontalAlignment = xlCenter
        .Cells(36, 9).HorizontalAlignment = xlCenter
        .Cells(36, 10).HorizontalAlignment = xlCenter
        
        If jdg_flg = True Then
            If limit_jdg = 1 Then
                .Cells(29, 6) = "OK"
            ElseIf limit_jdg = 0 Then
                .Cells(29, 6) = "NG"
            End If
        Else
            .Cells(29, 6) = no_jdg_mark
        End If
        '---- 2007.07.09 konegawa ----


        .Cells(1, 1).Select
    End With
    
End Sub

'**************************
' |fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||308||fffd|
'**************************
Public Sub Sheet_move()
    
    Sheet_name = ActiveSheet.Name        '|fffd||fffd||fffd||303|V|fffd|[|fffd|g
    Sheet_num = 1
    graph_sheet_name = "Graph" & Sheet_num           '|fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g
    
    Do
        If check_Sheet(graph_sheet_name) Then                         '|fffd|@|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347|
            graph_sheet_name = "Graph" & Sheet_num
            Exit Do
        Else
            Exit Do
        End If
    Loop
    
    If Sheets.Count >= 255 Then                   '|fffd||402||182||82||303|t|fffd|@|fffd|C|fffd||fffd||fffd||243||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||fffd|225|fffd||82||fffd|
        MsgBox new_book & vbCr, vbOKOnly + vbExclamation, toriemon_mark1
        ActiveSheet.Cells(1, 1).Select
        Exit Sub
    End If
    
    Worksheets.Add after:=Worksheets(Sheets.Count)  '|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||30c||fffd||243|V|fffd|[|fffd|g|fffd||fffd|
    ActiveSheet.Name = graph_sheet_name              '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||255||3cd|X
    Worksheets(graph_sheet_name).Activate              '|fffd|V|fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
    ActiveSheet.Cells(1, 1).Select                                  '|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||292|u
End Sub
'************************
'  |fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||317|L|fffd||fffd||fffd||fffd|
'************************
Private Function check_Sheet(Sheet) As Boolean '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||317|L|fffd||fffd||fffd||314||fffd|
    Dim sn As Object
    Dim graph_name As String
    
    check_Sheet = False
    graph_name = Mid(Sheet, 1, 5)
    For Each sn In Sheets
        If LCase(graph_name) = LCase(Mid(sn.Name, 1, 5)) Then             '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|
            Sheet_num = val(Mid(sn.Name, 6, 3)) + 1
           check_Sheet = True
        End If
    Next sn
End Function
'********************************
'   |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub sing_data_output()
    Dim Row As Long
    Dim Col As Long
    Dim ii As Long
    
    On Error GoTo CELL_ERROR
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    Col = ActiveCell.Column
     
    With ActiveSheet
        .Cells(Row, Col) = lon_mem
        .Cells(Row + 1, Col) = u_nit
        .Cells(Row + 1, Col + 1) = sing_unit
        sing_unit = ""
        .Cells(Row + 2, Col) = data_num '|fffd||1c2||74d||fffd||fffd||42f92|P
        .Cells(Row + 2, Col + 1) = sing_data
    
        .Cells(Row + 3, Col) = puls_max
        .Cells(Row + 3, Col + 1) = sing_p_max
        sing_p_max = ""
        .Cells(Row + 4, Col) = mins_max
        .Cells(Row + 4, Col + 1) = sing_m_max
        sing_m_max = ""
        .Cells(Row + 5, Col) = puls_min
        .Cells(Row + 5, Col + 1) = sing_p_min
        sing_p_min = ""
        .Cells(Row + 6, Col) = mins_min
        .Cells(Row + 6, Col + 1) = sing_m_min
        sing_m_min = ""
    
        .Cells(Row + 7, Col) = average
        .Cells(Row + 7, Col + 1) = sing_avg
        sing_avg = ""
        .Cells(Row + 8, Col) = std_deviation
        .Cells(Row + 8, Col + 1) = sing_div
        sing_div = ""
        .Cells(Row + 9, Col) = up_limit
        .Cells(Row + 9, Col + 1) = sing_max_limit
        sing_max_limit = ""
        .Cells(Row + 10, Col) = dn_limit
        .Cells(Row + 10, Col + 1) = sing_min_limit
        sing_min_limit = ""
        .Cells(Row + 11, Col) = mem_adrs
        .Cells(Row + 11, Col + 1) = judge
        .Cells(Row + 11, Col + 2) = w_eight
    
        For ii = 0 To sing_data Step 1
            .Cells(Row + 12 + ii, Col) = sing_no(ii)
            sing_no(ii) = ""
            .Cells(Row + 12 + ii, Col + 1) = sing_h_l(ii)
            sing_h_l(ii) = ""
            .Cells(Row + 12 + ii, Col + 2) = sing_load(ii)
            sing_load(ii) = ""
        Next ii
        
        sing_data = ""
        .Cells(Row, Col + 3).Select
        Exit Sub
    
    End With
    
CELL_ERROR:
    MsgBox writable_over & vbCr, vbOKOnly + vbExclamation, toriemon_mark
End Sub

'********************************
'   |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub cont_data_output()
    Dim Row As Long
    Dim Col As Long
    Dim ii As Long

    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    Col = ActiveCell.Column
    
    On Error GoTo CELL_ERROR
    
    With ActiveSheet
        .Cells(Row, Col) = ctu_mem
        .Cells(Row + 1, Col) = u_nit
        .Cells(Row + 1, Col + 1) = cont_unit
        cont_unit = ""
        .Cells(Row + 2, Col) = data_num '|fffd||1c2||74d||fffd||fffd||42f92|P
        .Cells(Row + 2, Col + 1) = cont_data
        .Cells(Row + 3, Col) = puls_max
        .Cells(Row + 3, Col + 1) = cont_p_max
        cont_p_max = ""
        .Cells(Row + 4, Col) = mins_max
        .Cells(Row + 4, Col + 1) = cont_m_max
        cont_m_max = ""
        .Cells(Row + 5, Col) = puls_min
        .Cells(Row + 5, Col + 1) = cont_p_min
        cont_p_min = ""
        .Cells(Row + 6, Col) = mins_min
        .Cells(Row + 6, Col + 1) = cont_m_min
        cont_m_min = ""
        .Cells(Row + 7, Col) = puls_pk_value
        .Cells(Row + 7, Col + 1) = cont_p_peak
        cont_p_peak = ""
        .Cells(Row + 8, Col) = mins_pk_value
        .Cells(Row + 8, Col + 1) = cont_m_peak
        cont_m_peak = ""
        .Cells(Row + 9, Col) = average
        .Cells(Row + 9, Col + 1) = cont_avg
        cont_avg = ""
        .Cells(Row + 10, Col) = std_deviation
        .Cells(Row + 10, Col + 1) = cont_div
        cont_div = ""
        .Cells(Row + 11, Col) = up_limit
        .Cells(Row + 11, Col + 1) = cont_max_limit
        cont_max_limit = ""
        .Cells(Row + 12, Col) = dn_limit
        .Cells(Row + 12, Col + 1) = cont_min_limit
        cont_min_limit = ""
        .Cells(Row + 13, Col) = mem_adrs
        .Cells(Row + 13, Col + 1) = judge
        .Cells(Row + 13, Col + 2) = w_eight
    
        For ii = 0 To cont_data - 1 Step 1
            .Cells(Row + 14 + ii, Col) = cont_no(ii)
            cont_no(ii) = ""
            .Cells(Row + 14 + ii, Col + 1) = cont_h_l(ii)
            cont_h_l(ii) = ""
            .Cells(Row + 14 + ii, Col + 2) = cont_load(ii)
            cont_load(ii) = ""
        Next ii
        cont_data = ""
        .Cells(Row, Col + 3).Select
    End With
 
 Exit Sub

CELL_ERROR:
    MsgBox writable_over & vbCr, vbOKOnly + vbExclamation, toriemon_mark

End Sub
'********************************
'   |fffd|W|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub std_data_output()
    Dim Row As Long
    Dim Col As Long
    Dim ii As Long

    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||fffd|
    Col = ActiveCell.Column
    On Error GoTo CELL_ERROR
    
    With ActiveSheet
        .Cells(Row, Col) = std_mem
        .Cells(Row + 1, Col) = u_nit
        .Cells(Row + 1, Col + 1) = std_unit
        .Cells(Row + 1, Col + 2) = up_limit
        .Cells(Row + 1, Col + 3) = std_max_limit
        .Cells(Row + 1, Col + 4) = dn_limit
        .Cells(Row + 1, Col + 5) = std_min_limit
        .Cells(Row + 2, Col) = "No."
        .Cells(Row + 2, Col + 1) = puls_max
        .Cells(Row + 2, Col + 2) = mins_max
        .Cells(Row + 2, Col + 3) = puls_min
        .Cells(Row + 2, Col + 4) = mins_min
        .Cells(Row + 2, Col + 5) = puls_pk_value
        .Cells(Row + 2, Col + 6) = mins_pk_value
        .Cells(Row + 2, Col + 7) = last_value
    
   
        For ii = 0 To std_data - 1 Step 1
            .Cells(Row + 3 + ii, Col) = std_no(ii)
            std_no(ii) = ""
            .Cells(Row + 3 + ii, Col + 1) = std_p_max(ii)
            std_p_max(ii) = ""
            .Cells(Row + 3 + ii, Col + 2) = std_m_max(ii)
            std_m_max(ii) = ""
            .Cells(Row + 3 + ii, Col + 3) = std_p_min(ii)
            std_p_min(ii) = ""
            .Cells(Row + 3 + ii, Col + 4) = std_m_min(ii)
            std_m_min(ii) = ""
            .Cells(Row + 3 + ii, Col + 5) = std_p_peak(ii)
            std_p_peak(ii) = ""
            .Cells(Row + 3 + ii, Col + 6) = std_m_peak(ii)
            std_m_peak(ii) = ""
            .Cells(Row + 3 + ii, Col + 7) = std_last(ii)
            std_last(ii) = ""
        Next ii
        std_data = ""
        .Cells(Row, Col + 8).Select
    End With
 
 Exit Sub

CELL_ERROR:
    MsgBox writable_over & vbCr, vbOKOnly + vbExclamation, toriemon_mark
End Sub

Public Function plot_range(tate_range As Long, yoko_range As Long) As Boolean
    plot_range = True
    If tate_range + 1 > 65536 Then
        MsgBox writable_over & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        plot_range = False
    End If
    If yoko_range + 1 > 256 Then
        MsgBox writable_over & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        plot_range = False
    End If
    
End Function
Attribute VB_Name = "usbFGparam_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************
'#pragma once
'/*----------------------------------------------------------
    '|fffd||8414|
'----------------------------------------------------------*/
'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FbRequest
 '   // |fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
Public Const USB_REQ_VAR = &H10             ' // |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|"
Public Const USB_REQ_TYPE = &H11        '   // |fffd|`
Public Const USB_REQ_UNIT = &H12             '// |fffd|P|fffd||fffd|"
Public Const USB_REQ_MODE = &H20              '// |fffd||fffd||fffd||c0c2||fffd|[|fffd|h|fffd||fffd|
Public Const USB_REQ_CONT_ST = &H21           '// |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M/|fffd||fffd|~
Public Const USB_REQ_SING_ST = &H22                 '// |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd|M
Public Const USB_REQ_MSR_RD = &H23           ' / |fffd||fffd||fffd||fffd|l|fffd||fffd||fffd|M
Public Const USB_REQ_MSR_CLR = &H24           '// |fffd|N|fffd||fffd||fffd|A
Public Const USB_REQ_MEMMODE = &H25     '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||fffd|
Public Const USB_REQ_MEMMODE_RD = &H26       '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd|
Public Const USB_REQ_MEMMODE_CONT = &H27      '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||fffd||fffd||fffd||fffd|p|fffd|\|fffd||fffd||fffd|s
Public Const USB_REQ_MEM_DATA = &H28           '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
Public Const USB_REQ_MEM_CNT = &H29            ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1cf|o
Public Const USB_REQ_DSP_DATA = &H2A    '// |fffd|\|fffd||fffd||fffd|l|fffd|v|fffd||fffd|
Public Const USB_REQ_PARM_LMT = &H30           '// |fffd||327a||fffd||fffd||fffd||752||fffd|/|fffd||1cf|o
Public Const USB_REQ_PARM_DSP = &H31          '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const USB_REQ_PARM_PEAK = &H32         '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||fffd|
Public Const USB_REQ_PARM_POWER = &H33        '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||fffd|
Public Const USB_REQ_PARM_HOLD = &H34         '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||fffd|
Public Const USB_REQ_PARM_ANALOG = &H35       '// |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||fffd|
Public Const USB_REQ_PARM_FILTER = &H36      '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd|
Public Const USB_REQ_PARM_ALL = &H40          '// |fffd||fffd||fffd||742||310||752||fffd|v|fffd||fffd|
    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
Public Const USB_REQ_SECRET = &H50            '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd|
Public Const USB_REQ_DSP_REVERSE = &H60        '// |fffd||28f||fffd|/|fffd|t|fffd|\
Public Const USB_REQ_PROOF = &H70           '// |fffd|Z
Public Const USB_REQ_SET_TYPE = &H80         '// |fffd||fffd||fffd|i|fffd||fffd|
Public Const USB_REQ_PROOF_DATE = &H81       '// |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const USB_REQ_PROOF_DATED = &H82      '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_REQ_PRODUCT_DATE = &H83      '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const USB_REQ_PRODUCT_DATED = &H84     '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_REQ_AD_RANGE = &H85          '/ A/D|fffd||fffd||fffd||fffd||fffd|W|fffd||fffd|
Public Const USB_REQ_MODEL = &H86            '// |fffd|@|fffd||fffd||fffd|
Public Const USB_REQ_COUNTRY = &H87         '// |fffd||fffd||fffd||290||fffd|
Public Const USB_REQ_MODEL_INFO = &H88       '// |fffd||fffd|i|fffd|E|fffd||fffd||fffd||281|E|fffd|@|fffd||fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_REQ_PARM1 = &H90             '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^1
Public Const USB_REQ_PARM2 = &H91            '/ |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^2
Public Const USB_REQ_PARM3 = &H92           '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^3
Public Const USB_REQ_PARM4 = &H93            '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^4
Public Const USB_REQ_PARM_INIT = &H94       '/ |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||fffd|

'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd| : wValue
   ' // |fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_VAR
Public Const USB_VAL_VAR = &H0                     '// |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|
        '// USB_REQ_TYPE
Public Const USB_VAL_TYPE = &H0                    '// |fffd|`
        '// USB_REQ_UNIT
Public Const USB_VAL_UNIT = &H0                    '// |fffd|P
        '// USB_REQ_MODE
Public Const USB_VAL_MODE_TARE = &H0              '// |fffd||fffd||fffd||708||fffd||fffd||fffd||fffd||fffd|
Public Const USB_VAL_MODE_PPEAK = &H10            '// +|fffd|s|fffd|[|fffd|N|fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd|
Public Const USB_VAL_MODE_NORM = &H20             '// |fffd||28f||fffd|v|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||fffd|
Public Const USB_VAL_MODE_MPEAK = &H30            '// -|fffd|s|fffd|[|fffd|N|fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd|
Public Const USB_VAL_MODE_UNITG = &H100          '// G|fffd|P|fffd||290||fffd|
Public Const USB_VAL_MODE_UNITKG = &H200        '// KG|fffd|P|fffd||290||fffd|
Public Const USB_VAL_MODE_UNITN = &H300          '// N|fffd|P|fffd||290||fffd|
Public Const USB_VAL_MODE_UNITLB = &H400          '/ LB|fffd|P|fffd||290||fffd|
Public Const USB_VAL_MODE_UNITOZ = &H500         '// Oz|fffd|P|fffd||290||fffd|
        '// USB_REQ_CONT_ST
Public Const USB_VAL_CONT_START = &H1              '// |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M|fffd|v|fffd||fffd|
Public Const USB_VAL_CONT_STOP = &H0             '// |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|~|fffd|v|fffd||fffd|
        '// USB_REQ_SING_ST
Public Const USB_VAL_SING_ST = &H0                     '// |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd|M
        '// USB_REQ_MSR_RD
Public Const USB_VAL_MSR_PPEAK = &H0          '// +|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_VAL_MSR_MPEAK = &H1            '// -|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_VAL_MSR_PEAK = &H2              '// |fffd|}|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd||183|s|fffd|[|fffd|N|fffd|l|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
        '// USB_REQ_MSR_CLR
Public Const USB_VAL_CLR_PEAK = &H0                '// |fffd|}|fffd|s|fffd|[|fffd|N|fffd|l|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
Public Const USB_VAL_CLR_ALL = &H1               '// |fffd|S|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
Public Const USB_VAL_CLR_LAST = &H2             '/ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||14f|I|fffd|f|fffd|[|fffd|^|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE
Public Const USB_VAL_MEM_SING = &H0              '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|v|fffd||fffd|
Public Const USB_VAL_MEM_CONT = &H1               '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|v|fffd||fffd|
Public Const USB_VAL_MEM_NORM = &H2               '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE_RD
Public Const USB_VAL_MEMMODE_RD = &H0             '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE_CONT
Public Const USB_VAL_MEMCONT_SING = &H0           '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|f|fffd|[|fffd|^|fffd|o|fffd|^|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMCONT_START = &H10          '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMCONT_STOP = &H11          '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_VAL_MEMNORM_START = &H20         '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMNORM_STOP = &H21         '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_MEM_DATA
Public Const USB_VAL_MEMDATA_CONT = &H0           '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMDATA_SING = &H1            '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMDATA_NORM = &H2            '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
        '// USB_REQ_MEM_CNT
Public Const USB_VAL_MEM_CNT = &H0                 '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1cf|o
        '// USB_REQ_DSP_DATA
Public Const USB_VAL_DSP_DATA = &H0               '// |fffd|\|fffd||fffd||fffd|l|fffd|v|fffd||fffd|
        '// USB_REQ_PARM_LMT
Public Const USB_VAL_PARMLMT_WR = &H0           '// |fffd||327a||fffd||fffd||fffd||fffd|
Public Const USB_VAL_PARMLMT_RD = &H1              '// |fffd||327a||fffd||fffd||fffd||1cf|o
        '// USB_REQ_PARM_DSP
Public Const USB_VAL_PARMDSP_01 = &H1              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 1   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_02 = &H2              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 2   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_03 = &H3              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 3   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_05 = &H4              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 5   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_10 = &H5            '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 10  |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_20 = &H6             '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 20  |fffd||fffd|/sec
        '// USB_REQ_PARM_PEAK
Public Const USB_VAL_PARMPEAK_OFF = &H0           '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@OFF
Public Const USB_VAL_PARMPEAK_ON = &H1           '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@ON
        '// USB_REQ_PARM_POWER
Public Const USB_VAL_PARMPOWER_NONE = &H0         '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||752||fffd|
Public Const USB_VAL_PARMPOWER_10MIN = &H1       '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||752||fffd|@10min
        '// USB_REQ_PARM_HOLD    |fffd||fffd||fffd|L|fffd||fffd|2|fffd||fffd||fffd||682||fffd|OR|fffd||150||752||80b7|
Public Const USB_VAL_PARMHOLD_EDGE = &H0          '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd|G|fffd|b|fffd|W|fffd|g|fffd||fffd||fffd|K
Public Const USB_VAL_PARMHOLD_LEVEL = &H1          '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd||fffd||fffd|x|fffd||fffd||fffd|g|fffd||fffd||fffd|K
Public Const USB_VAL_PARMHOLD_CLOSE = &H0          '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd||83|g|fffd||fffd||fffd|K
Public Const USB_VAL_PARMHOLD_OPEN = &H10         '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd|J|fffd|g|fffd||fffd||fffd|K
        '// USB_REQ_PARM_ANALOG
Public Const USB_VAL_PARMANA_ON = &H0            '// |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@ON
Public Const USB_VAL_PARMANA_OFF = &H1           '// |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@OFF
        '// USB_REQ_PARM_FILTER
Public Const USB_VAL_PARMFILTER_3MS = &H0         '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd|@3ms
Public Const USB_VAL_PARMFILTER_20MS = &H1        '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd|@20ms
Public Const USB_VAL_PARMFILTER_150MS = &H2      '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd|@150ms
        '// USB_REQ_PARM_ALL
Public Const USB_VAL_PARM_ALL = &H0              '/ |fffd||fffd||fffd||742||310||752||fffd|v|fffd||fffd|

    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_SECRET
Public Const USB_VAL_SECRET_ENABLE = &H0          '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd|
Public Const USB_VAL_SECRET_DISABLE = &H1        '/ |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||58e|~
        '// USB_REQ_DSP_REVERSE
Public Const USB_VAL_DSP_REVERSE = &H0            '// |fffd||28f||fffd|/|fffd|t|fffd|\
        '// USB_REQ_PROOF
Public Const USB_VAL_PROOF_BOOT = &H0              '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|N
Public Const USB_VAL_PROOF_START = &H1             '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n
Public Const USB_VAL_PROOF_ZERO = &H2             '// |fffd|[|fffd||fffd||fffd|_|fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n
Public Const USB_VAL_PROOF_LOAD = &H3            '// |fffd||5cf|d|fffd|_|fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n
Public Const USB_VAL_PROOF_STOP = &H4            '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I
        '// USB_REQ_SET_TYPE
Public Const USB_VAL_TYPE_0002 = &H2            '// |fffd|^|fffd||501|@0.2kg
Public Const USB_VAL_TYPE_0005 = &H3              '// |fffd|^|fffd||501|@0.5kg
Public Const USB_VAL_TYPE_0010 = &H4             '// |fffd|^|fffd||501|@1.0kg
Public Const USB_VAL_TYPE_0020 = &H5            '// |fffd|^|fffd||501|@2.0kg
Public Const USB_VAL_TYPE_0050 = &H6              '/ |fffd|^|fffd||501|@5.0kg
Public Const USB_VAL_TYPE_0100 = &H7              '// |fffd|^|fffd||fffd| 10.0kg
Public Const USB_VAL_TYPE_0200 = &H8             '// |fffd|^|fffd||fffd| 20.0kg
Public Const USB_VAL_TYPE_0500 = &H9              '// |fffd|^|fffd||fffd| 50.0kg
Public Const USB_VAL_TYPE_NEW0100 = &H1A          '// |fffd|^|fffd||fffd|100.0kg      |fffd|VFGC/FGN|fffd||fffd|100kg|fffd|d|fffd|l
Public Const USB_VAL_TYPE_1000 = &HA              ' // |fffd|^|fffd||fffd|100.0kg
Public Const USB_VAL_TYPE_1500 = &HB              '// |fffd|^|fffd||fffd|150.0kg      |fffd||fffd||fffd|Y|fffd||fffd||fffd|i|fffd||142||343|T|fffd|||fffd|[|fffd|g
Public Const USB_VAL_TYPE_2500 = &HC              '// |fffd|^|fffd||fffd|250.0kg      |fffd||fffd||fffd|Y|fffd||fffd||fffd|i|fffd||142||343|T|fffd|||fffd|[|fffd|g
Public Const USB_VAL_TYPE_5000 = &HD            '// |fffd|^|fffd||fffd|500.0kg      |fffd||fffd||fffd|Y|fffd||fffd||fffd|i|fffd||142||343|T|fffd|||fffd|[|fffd|g
        '// USB_REQ_PROOF_DATE           |fffd|Z|fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wValue|fffd||250||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PROOF_DATED
Public Const USB_VAL_PROOF_DATED = &H0             '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PRODUCT_DATE         |fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wValue|fffd||250||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PRODUCT_DATED
Public Const USB_VAL_PRODUCT_DATED = &H0          ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_AD_RANGE
Public Const USB_VAL_ADRANGE_WR = &H0            '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd||fffd|
Public Const USB_VAL_ADRANGE_RD = &H1              '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|v|fffd||fffd|
        '// USB_REQ_MODEL
Public Const USB_VAL_MODEL_FGC = &H0              '// |fffd|@|fffd||fffd|@FGC
Public Const USB_VAL_MODEL_FGX = &H1               '// |fffd|@|fffd||fffd|@FGX
        '// USB_REQ_COUNTRY
Public Const USB_VAL_COUNTRY_JPN = &H0             '// |fffd||fffd||fffd||281|@|fffd||fffd||fffd|{
Public Const USB_VAL_COUNTRY_USA = &H1             '// |fffd||fffd||fffd||281|@|fffd||10d||fffd|
Public Const USB_VAL_COUNTRY_EU = &H2              '// |fffd||fffd||fffd||281|@|fffd||fffd||fffd|B
        '// USB_REQ_MODEL_INFO
Public Const USB_VAL_MODEL_INFO = &H0             '// |fffd||fffd|i|fffd|E|fffd||fffd||fffd||281|E|fffd|@|fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PARM1
Public Const USB_VAL_PARM1_WR = &H0                '/ |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^1|fffd||fffd|
Public Const USB_VAL_PARM1_RD = &H1              ' // |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^1|fffd|v|fffd||fffd|
        '// USB_REQ_PARM2
Public Const USB_VAL_PARM2_WR = &H0               ' |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^2|fffd||fffd|
Public Const USB_VAL_PARM2_RD = &H1                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^2|fffd|v|fffd||fffd|
        '// USB_REQ_PARM3
Public Const USB_VAL_PARM3_WR = &H0                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^3|fffd||fffd|
Public Const USB_VAL_PARM3_RD = &H1               '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^3|fffd|v|fffd||fffd|
        '// USB_REQ_PARM4
Public Const USB_VAL_PARM4_WR = &H0               ' // |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^4|fffd||fffd|
Public Const USB_VAL_PARM4_RD = &H1                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^4|fffd|v|fffd||fffd|
        '// USB_REQ_PARM_INIT
Public Const USB_VAL_PARM_INIT = &H0              ' // |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||fffd|

'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FwIndex     |fffd|g|fffd|p|fffd||fffd||fffd||202||fffd||fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||352||fffd|`|fffd||fffd||fffd||fffd|
    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
       ' // USB_REQ_PROOF_DATE   |fffd|Z|fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wIndex|fffd||24c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      '  // USB_REQ_AD_RANGE     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wIndex|fffd||24c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

       ' // USB_REQ_AD_RANGE
Public Const USB_IND_ADRANGE_10 = &H0          '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@10mV
Public Const USB_IND_ADRANGE_20 = &H1          '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@20mV
Public Const USB_IND_ADRANGE_40 = &H2         '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@40mV
Public Const USB_IND_ADRANGE_80 = &H3          '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@80mV

'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FwLength
    '// |fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_VAR
Public Const USB_LEN_VAR = 12               '  // |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|
        '// USB_REQ_TYPE=
Public Const USB_LEN_TYPE = 5                ' // |fffd|`
        '// USB_REQ_UNIT
Public Const USB_LEN_UNIT = 4                ' // |fffd|P
        '// USB_REQ_MODE
Public Const USB_LEN_MODE = 0                '// |fffd||fffd||fffd||c0c2||fffd|[|fffd|h|fffd||fffd|
        '// USB_REQ_CONT_ST
Public Const USB_LEN_CONT_ST = 0             ' // |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M/|fffd||fffd|~  Interrupt
        '// USB_REQ_SING_ST
Public Const USB_LEN_SING_ST = 9             ' // |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd|M
        '// USB_REQ_MSR_RD
Public Const USB_LEN_MSR_PPEAK = 9           ' // +|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_LEN_MSR_MPEAK = 9            '// -|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_LEN_MSR_PEAK = 15            '// |fffd|}|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd||183|s|fffd|[|fffd|N|fffd|l|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
        '// USB_REQ_MSR_CLR
Public Const USB_LEN_MSR_CLR = 0              '// |fffd|N|fffd||fffd||fffd|A
        '// USB_REQ_MEMMODE
Public Const USB_LEN_MEMMODE = 0              '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||fffd|
        '// USB_REQ_MEMMODE_RD
Public Const USB_LEN_MEMMODE_RD = 4           '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE_CONT
Public Const USB_LEN_MEMCONT_SING = 14        '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|f|fffd|[|fffd|^|fffd|o|fffd|^|fffd|v|fffd||fffd|
Public Const USB_LEN_MEMCONT_START = 8       ' // |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_LEN_MEMCONT_STOP = 8         '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_LEN_MEMNORM_START = 8       ' // |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_LEN_MEMNORM_STOP = 8        ' // |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_MEM_DATA
Public Const USB_LEN_MEM_DATA = 0             '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd| Bulk
        '// USB_REQ_MEM_CNT
Public Const USB_LEN_MEM_CNT = 14             '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1cf|o
        '// USB_REQ_DSP_DATA
Public Const USB_LEN_DSP_DATA = 9             '// |fffd|\|fffd||fffd||fffd|l|fffd|v|fffd||fffd|
        '// USB_REQ_PARM_LMT
Public Const USB_LEN_PARM_LMT = 13            '// |fffd||327a||fffd||fffd||fffd||752||fffd|/|fffd||1cf|o
        '// USB_REQ_PARM_DSP
Public Const USB_LEN_PARM_DSP = 0            ' // |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PARM_PEAK
Public Const USB_LEN_PARM_PEAK = 0            '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||fffd|
        '// USB_REQ_PARM_POWER
Public Const USB_LEN_PARM_POWER = 0           '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||fffd|
        '// USB_REQ_PARM_HOLD
Public Const USB_LEN_PARM_HOLD = 0           ' // |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||fffd|
        '// USB_REQ_PARM_ANALOG
Public Const USB_LEN_PARM_ANALOG = 0         ' // |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||fffd|
        '// USB_REQ_PARM_FILTER
Public Const USB_LEN_PARM_FILTER = 0         '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd|
        '// USB_REQ_PARM_ALL
Public Const USB_LEN_PARM_ALL = 0             '// |fffd||fffd||fffd||742||310||752||fffd|v|fffd||fffd|   Bulk
    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_SECRET
Public Const USB_LEN_SECRET = 0              ' // |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd|
        '// USB_REQ_DSP_REVERSE
Public Const USB_LEN_DSP_REVERSE = 0          '/ |fffd||28f||fffd|/|fffd|t|fffd|\
        '// USB_REQ_PROOF
Public Const USB_LEN_PROOF = 0                '// |fffd|Z|fffd||fffd||fffd|i|fffd|I|fffd||fffd||fffd||20a|O|fffd|j
Public Const USB_LEN_PROOF_STOP = 5          ' // |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I
        '// USB_REQ_SET_TYPE
Public Const USB_LEN_SET_TYPE = 0            ' // |fffd||fffd||fffd|i|fffd||fffd|
        '// USB_REQ_PROOF_DATE
Public Const USB_LEN_PROOF_DATE = 0           '// |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PROOF_DATED
Public Const USB_LEN_PROOF_DATED = 9         ' // |fffd|Z|fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PRODUCT_DATE
Public Const USB_LEN_PRODUCT_DATE = 0        ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PRODUCT_DATED
Public Const USB_LEN_PRODUCT_DATED = 9       ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_AD_RANGE
Public Const USB_LEN_ADRANGE_WR = 0          ' // AD|fffd||fffd||fffd||fffd||fffd|W|fffd||fffd|
Public Const USB_LEN_ADRANGE_RD = 4           '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|v|fffd||fffd|
        '// USB_REQ_MODEL
Public Const USB_LEN_MODEL = 0               ' // |fffd|@|fffd||fffd||fffd|
        '// USB_REQ_COUNTRY
Public Const USB_LEN_COUNTRY = 0             ' // |fffd||fffd||fffd||290||fffd|
        '// USB_REQ_MODEL_INFO
Public Const USB_LEN_MODEL_INFO = 6         ' // |fffd||fffd|i|fffd|E|fffd||fffd||fffd||281|E|fffd|@|fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PARM?
        '// USB_REQ_PARM_INIT
Public Const USB_LEN_PARM = 13                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd||752||fffd|/|fffd|v|fffd||fffd|


'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FData

'// |fffd|p|fffd|C|fffd|v
Public Const PIPE_INTR_IN = 0            ' // |fffd|p|fffd|C|fffd|vNo. : |fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|In
Public Const PIPE_BULK_IN = 1            ' // |fffd|p|fffd|C|fffd|vNo. : |fffd|o|fffd||fffd||fffd|N|fffd|]|fffd||fffd|In
Public Const PIPE_BULK_OUT = 2           ' // |fffd|p|fffd|C|fffd|vNo. : |fffd|o|fffd||fffd||fffd|N|fffd|]|fffd||fffd|Out

'// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|
Public Const USB_RCV_LEN_INT = 9          '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd||fffd||fffd||fffd||30e||fffd|M|fffd|f|fffd|[|fffd|^


Attribute VB_Name = "usb_mdl"
Option Explicit
Dim usb_len As Long
Dim bRet As Boolean

Public Sub limit_read()
    Dim buff(20) As Byte
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_PARM_LMT, USB_VAL_PARMLMT_RD, 0, USB_LEN_MEM_CNT, buff(0))
    
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
    min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
    
    unit
    fg_type
    
    If fg_type_num = "02" Or fg_type_num = "03" Then
        If unit_num = 0 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        Else
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        End If
    
    ElseIf fg_type_num = "04" Then
        If unit_num = 0 Or unit_num = 4 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        End If
    
    ElseIf fg_type_num = "05" Then
        If unit_num = 0 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        End If
    
    ElseIf fg_type_num = "06" Then
        If unit_num = 0 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        End If
        
    ElseIf fg_type_num = "07" Or fg_type_num = "08" Then
        If unit_num = 0 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        Else
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        End If
     ElseIf fg_type_num = "09" Then
        If unit_num = 0 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        End If
    Else
        If unit_num = 1 Or unit_num = 2 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        End If
    End If
    
    main_select_frm.Max_limit_lbl.Caption = max_limit
    main_select_frm.Min_limit_lbl.Caption = min_limit
    main_select_frm.Max_limit_lbl_2.Caption = max_limit
    main_select_frm.Min_limit_lbl_2.Caption = min_limit
    main_select_frm.Max_limit_lbl_3.Caption = max_limit
    main_select_frm.Min_limit_lbl_3.Caption = min_limit
    
End Sub
Public Sub mem_mode_read()
    Dim buff(4) As Byte
   
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_RD, USB_VAL_MEMMODE_RD, 0, USB_LEN_MEMMODE_RD, buff(0))
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    mem_name_num = Chr(buff(2))
    
    If mem_name_num = 0 Then
        main_select_frm.Mem_box.Text = lon_mem_mode
    ElseIf mem_name_num = 1 Then
        main_select_frm.Mem_box.Text = ctu_mem_mode
    ElseIf mem_name_num = 2 Then
        main_select_frm.Mem_box.Text = std_mem_mode
    End If

End Sub

Public Function unit()
    Dim buff(256) As Byte
    Dim ii As Integer
    limit_frm_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_UNIT, USB_VAL_UNIT, 0, USB_LEN_UNIT, buff(0))
    If usb_error(usb_len) = True Then
        limit_frm_exit_flg = True
        Exit Function
    End If
    unit_num = Chr(buff(2)) '|fffd|P|fffd||294||50d||fffd||fffd||fffd|
 
End Function

Public Function fg_type()
    Dim buff(256) As Byte
    limit_frm_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_TYPE, USB_VAL_TYPE, 0, USB_LEN_TYPE, buff(0))
    If usb_error(usb_len) = True Then
        limit_frm_exit_flg = True
        Exit Function
    End If
    fg_type_num = Chr(buff(2)) & Chr(buff(3)) '|fffd|^|fffd||fffd||fffd||fffd|
End Function
    

    
Public Sub interrupt()
    Dim buff(256) As Byte
    Dim iii As Long
'***************************************************************************
    'USB|fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|
'***************************************************************************
     '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M|fffd|v|fffd||fffd|
    iii = 0
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_CONT_ST, USB_VAL_CONT_START, 0, USB_LEN_CONT_ST, buff(0))
  
    If usb_error(usb_len) = True Then
        usb_len_err = True
        Exit Sub
    End If
     
     '|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd|p|fffd|C|fffd|v
     bRet = ResetPipe()
     bRet = OpenPipe(PIPE_INTR_IN)
     
     If bRet Then
     
        Do While (data_count <= ite_num) And (cell_limit_flg = True)
            DoEvents
            '|fffd|f|fffd|[|fffd|^|fffd||fffd|M
         
            usb_len = ReadPipe(USB_RCV_LEN_INT, buff(0))
            If usb_error(usb_len) = True Then
                usb_len_err = True
                Exit Sub
            End If
            renzoku_data(data_count) = Chr(buff(0)) & Chr(buff(1)) & Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5))
        
        '|fffd|g|fffd||fffd||fffd|KON|fffd||fffd||fffd||fffd||fffd|d|fffd|l********************************************************
            'If P_load_2 Then
            '    If renzoku_data(data_count) >= S_trg_num Then
            '        trg_flg_2 = True
            '    End If
            'ElseIf M_load_2 Then
            '    If renzoku_data(data_count) <= S_trg_num Then
            '        trg_flg_2 = True
            '    End If
            'End If
        '*****************************************************************
        '|fffd|g|fffd||fffd||fffd|KON|fffd|A|fffd||fffd||fffd||fffd||fffd|J|fffd|d|fffd|l|fffd||fffd|*****************************************************
            If P_load_2 Then
                If S_trg_num >= 0 Then
                    If renzoku_data(data_count) >= S_trg_num Then
                        trg_flg_2 = True
                    End If
                Else
                    If renzoku_data(data_count) <= S_trg_num Then
                        trg_flg_2 = True
                    End If
                End If
                
            ElseIf M_load_2 Then
                If S_trg_num > 0 Then
                    If renzoku_data(data_count) <= S_trg_num Then
                        trg_flg_2 = True
                    End If
                ElseIf S_trg_num <= 0 Then
                    If renzoku_data(data_count) >= S_trg_num Then
                        trg_flg_2 = True
                    End If
                End If
            End If
        '******************************************************************
            
            If trg_on_flg_2 = False Then
                trg_flg_2 = True
            End If
            
            If trg_flg_2 = False Then
                data_count = 1
                '---- 2007.07.09 konegawa----
                ctu_data_p_cnt = 1
                ctu_data_m_cnt = 1
                '---- 2007.07.09 konegawa----
            'ElseIf main_select_frm.Torikomi_box.Text = "1000|fffd||fffd|/|fffd|b" Then
            '    main_select_frm.State.Caption = "|fffd||fffd||835e||fffd||752||fffd|"
            '    main_select_frm.State.BackColor = &HFFFF00
            '    outp_mdl.cell_output1
            '    data_count = data_count + 1
            ElseIf main_select_frm.Torikomi_box.Text = frequency_100 Then
                main_select_frm.State.Caption = torikomi_tyuu
                main_select_frm.State.BackColor = &HFFFF00
                'If iii Mod 10 = 0 Then
                    outp_mdl.cell_output1
                    data_count = data_count + 1
                'End If
                'iii = iii + 1
            ElseIf main_select_frm.Torikomi_box.Text = frequency_50 Then
                main_select_frm.State.Caption = torikomi_tyuu
                main_select_frm.State.BackColor = &HFFFF00
                'If iii Mod 20 = 0 Then
                If iii Mod 2 = 0 Then
                    outp_mdl.cell_output1
                    data_count = data_count + 1
                End If
                iii = iii + 1
            ElseIf main_select_frm.Torikomi_box.Text = frequency_20 Then
                main_select_frm.State.Caption = torikomi_tyuu
                main_select_frm.State.BackColor = &HFFFF00
                'If iii Mod 50 = 0 Then
                If iii Mod 5 = 0 Then
                    outp_mdl.cell_output1
                    data_count = data_count + 1
                End If
                iii = iii + 1
            ElseIf main_select_frm.Torikomi_box.Text = frequency_10 Then
                main_select_frm.State.Caption = torikomi_tyuu
                main_select_frm.State.BackColor = &HFFFF00
                'If iii Mod 100 = 0 Then
                If iii Mod 10 = 0 Then
                   outp_mdl.cell_output1
                    data_count = data_count + 1
                End If
                iii = iii + 1
            End If
            
            If stop_btn_flg Then
                stop_btn_flg = False
                Exit Do
            End If
         
            If form_close_flg = True Then
                form_close_flg = False
                Exit Do
            End If
        Loop
        
    Else
        'MsgBox "OpenPipe : NG21"
    End If
    '|fffd|N|fffd||fffd||fffd|[|fffd|Y|fffd|p|fffd|C|fffd|v
    bRet = ClosePipe()
    If bRet Then
      '   MsgBox "ClosePipe : OK"
    Else
       '  MsgBox "ClosePipe : NG"
    End If
    '|fffd||fffd||fffd|M|fffd|v|fffd||fffd||fffd||fffd|~
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_CONT_ST, USB_VAL_CONT_STOP, 0, USB_LEN_CONT_ST, buff(0))
    
    If usb_error(usb_len) = True Then
        usb_len_err = True
        Exit Sub
    End If
    
    main_select_frm.stop_rutin

End Sub

Public Sub mem_number_read()
    Dim buff(15) As Byte
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MEM_CNT, USB_VAL_MEM_CNT, 0, USB_LEN_MEM_CNT, buff(0))
    If usb_len = -1 Then
        Exit Sub
    End If
    mem_data_count = Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub
Public Sub single_data_in()
    Dim buff(80) As Byte
    Dim ii As Long
    Dim jj As Long
    Dim long_buff(3000) As String
    Dim most_long_buff As String
    Dim bulk_try As Long
    Dim lll
    bulk_try = 0
    'mem_data_count = 100
    bulk_try = (((13 * 15) + 15 + (mem_data_count * 15)) / 15)
    
    'mem_data_count = 100
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEM_DATA, USB_VAL_MEMDATA_SING, 0, USB_LEN_MEM_DATA, buff(0))
    
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    bRet = ResetPipe()
    bRet = OpenPipe(PIPE_BULK_IN)
       
    If bRet Then

    ii = 0
    For bulk_try = 1 To bulk_try
        usb_len = ReadPipe(15, buff(0))   '// 60|fffd|s|fffd||1cd||fffd|
        
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
        
        For jj = 0 To 14 Step 1
            long_buff(ii * 15 + jj) = buff(jj)
        Next jj
        
        ii = ii + 1
    Next bulk_try
    
    If Chr(long_buff(23)) = 0 Then
        sing_unit = "N"
        ElseIf Chr(long_buff(23)) = 1 Then
        sing_unit = "kgf"
        ElseIf Chr(long_buff(23)) = 2 Then
        sing_unit = "gf"
        ElseIf Chr(long_buff(23)) = 3 Then
        sing_unit = "lbf"
        ElseIf Chr(long_buff(23)) = 4 Then
        sing_unit = "ozf"
    End If
    
    sing_data = Chr(long_buff(40)) & Chr(long_buff(41)) & Chr(long_buff(42)) & Chr(long_buff(43))
    sing_p_max = Chr(long_buff(52)) & Chr(long_buff(54)) & Chr(long_buff(55)) & Chr(long_buff(56)) & Chr(long_buff(57)) & Chr(long_buff(58))
    sing_m_max = Chr(long_buff(67)) & Chr(long_buff(69)) & Chr(long_buff(70)) & Chr(long_buff(71)) & Chr(long_buff(72)) & Chr(long_buff(73))
    sing_p_min = Chr(long_buff(82)) & Chr(long_buff(84)) & Chr(long_buff(85)) & Chr(long_buff(86)) & Chr(long_buff(87)) & Chr(long_buff(88))
    sing_m_min = Chr(long_buff(97)) & Chr(long_buff(99)) & Chr(long_buff(100)) & Chr(long_buff(101)) & Chr(long_buff(102)) & Chr(long_buff(103))
    sing_avg = Chr(long_buff(112)) & Chr(long_buff(114)) & Chr(long_buff(115)) & Chr(long_buff(116)) & Chr(long_buff(117)) & Chr(long_buff(118))
    sing_div = Chr(long_buff(128)) & Chr(long_buff(129)) & Chr(long_buff(130)) & Chr(long_buff(131)) & Chr(long_buff(132)) & Chr(long_buff(133))
    sing_max_limit = Chr(long_buff(142)) & Chr(long_buff(144)) & Chr(long_buff(145)) & Chr(long_buff(146)) & Chr(long_buff(147)) & Chr(long_buff(148))
    sing_min_limit = Chr(long_buff(157)) & Chr(long_buff(159)) & Chr(long_buff(160)) & Chr(long_buff(161)) & Chr(long_buff(162)) & Chr(long_buff(163))
        
    For ii = 0 To mem_data_count - 1 'sing_data - 1 Step 1
        sing_no(ii) = Chr(long_buff(197 + (ii * 15))) & Chr(long_buff(198 + (ii * 15))) & Chr(long_buff(199 + (ii * 15))) & Chr(long_buff(200 + (ii * 15)))
        sing_h_l(ii) = Chr(long_buff(201 + (ii * 15)))
        sing_load(ii) = Chr(long_buff(202 + (ii * 15))) & Chr(long_buff(204 + (ii * 15))) & Chr(long_buff(205 + (ii * 15))) & Chr(long_buff(206 + (ii * 15))) & Chr(long_buff(207 + (ii * 15))) & Chr(long_buff(208 + (ii * 15)))
    Next ii
    
    
    outp_mdl.sing_data_output
   
    Else
        'MsgBox "OpenPipe : NG"
         
    End If
  
    bRet = ClosePipe()
    If bRet = False Then
        'MsgBox "ClosePipe : NG"
    End If
End Sub

Public Sub cont_data_in()
    
    Dim buff(80) As Byte
    Dim ii As Long
    Dim jj As Long
    Dim long_buff(15300) As String
    Dim most_long_buff As String
    Dim bulk_try As Long
   
    bulk_try = 0
    'mem_data_count = 100
    bulk_try = ((15 * 15) + 15 + (mem_data_count * 15)) / 15
    
    'mem_data_count = 100
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEM_DATA, USB_VAL_MEMDATA_CONT, 0, USB_LEN_MEM_DATA, buff(0))
    
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    bRet = ResetPipe()
    bRet = OpenPipe(PIPE_BULK_IN)
    
       
    If bRet Then
        
     ii = 0
    For bulk_try = 1 To bulk_try
        usb_len = ReadPipe(15, buff(0))   '// 60|fffd|s|fffd||1cd||fffd|
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
        For jj = 0 To 14 Step 1
            long_buff(ii * 15 + jj) = buff(jj)
        Next jj
        
        ii = ii + 1
    Next bulk_try
    
    
     If Chr(long_buff(23)) = 0 Then
        cont_unit = "N"
        ElseIf Chr(long_buff(23)) = 1 Then
        cont_unit = "kgf"
        ElseIf Chr(long_buff(23)) = 2 Then
        cont_unit = "gf"
        ElseIf Chr(long_buff(23)) = 3 Then
        cont_unit = "lbf"
        ElseIf Chr(long_buff(23)) = 4 Then
        cont_unit = "ozf"
    End If
    
    cont_data = Chr(long_buff(40)) & Chr(long_buff(41)) & Chr(long_buff(42)) & Chr(long_buff(43))
    cont_p_max = Chr(long_buff(52)) & Chr(long_buff(54)) & Chr(long_buff(55)) & Chr(long_buff(56)) & Chr(long_buff(57)) & Chr(long_buff(58))
    cont_m_max = Chr(long_buff(67)) & Chr(long_buff(69)) & Chr(long_buff(70)) & Chr(long_buff(71)) & Chr(long_buff(72)) & Chr(long_buff(73))
    cont_p_min = Chr(long_buff(82)) & Chr(long_buff(84)) & Chr(long_buff(85)) & Chr(long_buff(86)) & Chr(long_buff(87)) & Chr(long_buff(88))
    cont_m_min = Chr(long_buff(97)) & Chr(long_buff(99)) & Chr(long_buff(100)) & Chr(long_buff(101)) & Chr(long_buff(102)) & Chr(long_buff(103))
    cont_p_peak = Chr(long_buff(112)) & Chr(long_buff(114)) & Chr(long_buff(115)) & Chr(long_buff(116)) & Chr(long_buff(117)) & Chr(long_buff(118))
    cont_m_peak = Chr(long_buff(127)) & Chr(long_buff(129)) & Chr(long_buff(130)) & Chr(long_buff(131)) & Chr(long_buff(132)) & Chr(long_buff(133))
    cont_avg = Chr(long_buff(142)) & Chr(long_buff(144)) & Chr(long_buff(145)) & Chr(long_buff(146)) & Chr(long_buff(147)) & Chr(long_buff(148))
    cont_div = Chr(long_buff(158)) & Chr(long_buff(159)) & Chr(long_buff(160)) & Chr(long_buff(161)) & Chr(long_buff(162)) & Chr(long_buff(163))
    cont_max_limit = Chr(long_buff(172)) & Chr(long_buff(174)) & Chr(long_buff(175)) & Chr(long_buff(176)) & Chr(long_buff(177)) & Chr(long_buff(178))
    cont_min_limit = Chr(long_buff(187)) & Chr(long_buff(189)) & Chr(long_buff(190)) & Chr(long_buff(191)) & Chr(long_buff(192)) & Chr(long_buff(193))
    For ii = 0 To mem_data_count - 1 'sing_data Step 1
        cont_no(ii) = Chr(long_buff(227 + (ii * 15))) & Chr(long_buff(228 + (ii * 15))) & Chr(long_buff(229 + (ii * 15))) & Chr(long_buff(230 + (ii * 15)))
        cont_h_l(ii) = Chr(long_buff(231 + (ii * 15)))
        cont_load(ii) = Chr(long_buff(232 + (ii * 15))) & Chr(long_buff(234 + (ii * 15))) & Chr(long_buff(235 + (ii * 15))) & Chr(long_buff(236 + (ii * 15))) & Chr(long_buff(237 + (ii * 15))) & Chr(long_buff(238 + (ii * 15)))
    Next ii
    
    
    outp_mdl.cont_data_output
   
    Else
       ' MsgBox "OpenPipe : NG\n"
        bRet = ResetPipe()
        Exit Sub
    End If
    
    bRet = ClosePipe()
    If bRet = False Then
        'MsgBox "ClosePipe : NG\n"
    End If

End Sub
Public Sub std_data_in()
    Dim buff(80) As Byte
    Dim ii As Long
    Dim jj As Long
    Dim long_buff(7000) As String
    Dim most_long_buff As String
    Dim bulk_try As Long
    
    bulk_try = 0
   
    bulk_try = (((15 * 7) + (mem_data_count * (8 * 15))) / 15)
   
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEM_DATA, USB_VAL_MEMDATA_NORM, 0, USB_LEN_MEM_DATA, buff(0))
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
    
    bRet = ResetPipe()
    bRet = OpenPipe(PIPE_BULK_IN)
       
    If bRet Then

     ii = 0
    For bulk_try = 1 To bulk_try
        usb_len = ReadPipe(15, buff(0))   '// 15|fffd|s|fffd||1cd||fffd|
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
         For jj = 0 To 14 Step 1
         long_buff(ii * 15 + jj) = buff(jj)
        
        Next jj
        
        ii = ii + 1
    Next bulk_try
    

     If Chr(long_buff(23)) = 0 Then
        std_unit = "N"
        ElseIf Chr(long_buff(23)) = 1 Then
        std_unit = "kgf"
        ElseIf Chr(long_buff(23)) = 2 Then
        std_unit = "gf"
        ElseIf Chr(long_buff(23)) = 3 Then
        std_unit = "lbf"
        ElseIf Chr(long_buff(23)) = 4 Then
        std_unit = "ozf"
    End If
    
    
    std_max_limit = Chr(long_buff(37)) & Chr(long_buff(39)) & Chr(long_buff(40)) & Chr(long_buff(41)) & Chr(long_buff(42)) & Chr(long_buff(43))
    std_min_limit = Chr(long_buff(52)) & Chr(long_buff(54)) & Chr(long_buff(55)) & Chr(long_buff(56)) & Chr(long_buff(57)) & Chr(long_buff(58))
    std_data = Chr(long_buff(70)) & Chr(long_buff(71)) & Chr(long_buff(72)) & Chr(long_buff(73))

        For ii = 0 To mem_data_count - 1
            std_no(ii) = Chr(long_buff(95 + (ii * 120))) & Chr(long_buff(96 + (ii * 120))) & Chr(long_buff(97 + (ii * 120))) & Chr(long_buff(98 + (ii * 120)))
            std_p_max(ii) = Chr(long_buff(112 + (ii * 120))) & Chr(long_buff(114 + (ii * 120))) & Chr(long_buff(115 + (ii * 120))) & Chr(long_buff(116 + (ii * 120))) & Chr(long_buff(117 + (ii * 120))) & Chr(long_buff(118 + (ii * 120)))
            std_m_max(ii) = Chr(long_buff(127 + (ii * 120))) & Chr(long_buff(129 + (ii * 120))) & Chr(long_buff(130 + (ii * 120))) & Chr(long_buff(131 + (ii * 120))) & Chr(long_buff(132 + (ii * 120))) & Chr(long_buff(133 + (ii * 120)))
            std_p_min(ii) = Chr(long_buff(142 + (ii * 120))) & Chr(long_buff(144 + (ii * 120))) & Chr(long_buff(145 + (ii * 120))) & Chr(long_buff(146 + (ii * 120))) & Chr(long_buff(147 + (ii * 120))) & Chr(long_buff(148 + (ii * 120)))
            std_m_min(ii) = Chr(long_buff(157 + (ii * 120))) & Chr(long_buff(159 + (ii * 120))) & Chr(long_buff(160 + (ii * 120))) & Chr(long_buff(161 + (ii * 120))) & Chr(long_buff(162 + (ii * 120))) & Chr(long_buff(163 + (ii * 120)))
            std_p_peak(ii) = Chr(long_buff(172 + (ii * 120))) & Chr(long_buff(174 + (ii * 120))) & Chr(long_buff(175 + (ii * 120))) & Chr(long_buff(176 + (ii * 120))) & Chr(long_buff(177 + (ii * 120))) & Chr(long_buff(178 + (ii * 120)))
            std_m_peak(ii) = Chr(long_buff(187 + (ii * 120))) & Chr(long_buff(189 + (ii * 120))) & Chr(long_buff(190 + (ii * 120))) & Chr(long_buff(191 + (ii * 120))) & Chr(long_buff(192 + (ii * 120))) & Chr(long_buff(193 + (ii * 120)))
            std_last(ii) = Chr(long_buff(202 + (ii * 120))) & Chr(long_buff(204 + (ii * 120))) & Chr(long_buff(205 + (ii * 120))) & Chr(long_buff(206 + (ii * 120))) & Chr(long_buff(207 + (ii * 120))) & Chr(long_buff(208 + (ii * 120)))
        Next ii

    outp_mdl.std_data_output
  
    Else
        'MsgBox "OpenPipe : NG"
         
    End If
  
    bRet = ClosePipe()
    If bRet = False Then
        'MsgBox "ClosePipe : NG"
    End If
       
End Sub

Public Sub sing_mem_start()
Dim buff(10) As Byte
'// USB_REQ_MEMMODE_CONT |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|f|fffd|[|fffd|^|fffd|o|fffd|^
    mem_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMCONT_SING, 0, USB_LEN_MEMCONT_SING, buff(0))
    
    If usb_error(usb_len) = True Then
        mem_exit_flg = True
        Exit Sub
    End If
    mem_data_count = Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub

Public Sub cont_mem_start()
Dim buff(0) As Byte
'// USB_REQ_MEMMODE_CONT |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMCONT_START, 0, USB_LEN_MEMCONT_START, buff(0))
    
    mem_exit_flg = False
    If usb_error(usb_len) = True Then
        mem_exit_flg = True
        Exit Sub
    End If
    
End Sub

Public Sub cont_mem_stop()
'// USB_REQ_MEMMODE_CONT |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I
    Dim buff(10) As Byte
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMCONT_STOP, 0, USB_LEN_MEMCONT_STOP, buff(0))
    
    If usb_len = -1 Then
        mem_number_read
        mem_exit_flg = True
        Exit Sub
    End If
    'On Error GoTo FULLDATA
    mem_data_count = Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
    Exit Sub

'FULLDATA:
    'MsgBox "|fffd||635e||fffd||fffd||fffd||fffd||fffd||fffd||fffd|E|fffd||142||fffd||fffd|B" & vbCr, vbOKOnly + vbExclamation, "|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|USB"
    'mem_data_count = 1000
    'main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub

Public Sub std_mem_start()
'// USB_REQ_MEMMODE_CONT |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n
Dim buff(0) As Byte
    mem_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMNORM_START, 0, USB_LEN_MEMNORM_START, buff(0))
    If usb_error(usb_len) = True Then
        mem_exit_flg = True
        Exit Sub
    End If
End Sub
Public Sub std_mem_stop()
'// USB_REQ_MEMMODE_CONT |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I
    Dim buff(10) As Byte
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMNORM_STOP, 0, USB_LEN_MEMNORM_STOP, buff(0))
    
    If usb_len = -1 Then
        mem_number_read
        mem_exit_flg = True
        Exit Sub
    End If
    mem_data_count = Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub

Public Function usb_error(usb_len_value As Long) As Boolean
    usb_error = False
    'FG_connect = "|fffd||fffd||237||fffd||3f2||fffd||fffd||fffd||fffd||1f5||fffd||fffd||fffd||fffd||4fb||fffd||fffd||7f5||fffd||534||5f4||32c||fffd||fffd|"
    'communicate_error = "|fffd||fffd||fffd||fffd||368||fffd||174||fffd||fffd||fffd|"
    
    If usb_len_value = -1 Then
        MsgBox communicate_error & Chr(13) & FG_connect & vbCr, vbOKOnly + vbExclamation, toriemon_mark
        main_select_frm.State.Caption = tuusin_ijyou
        main_select_frm.State.BackColor = &HFF&
        usb_error = True
    End If
End Function

Attribute VB_Name = "usbcommom_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************

Public Const CONTROL_MASK = 1             ' |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In/Out |fffd|}|fffd|X|fffd|N
Public Const CONTROL_IN = 0              '|fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In  (Device -> Host)
Public Const CONTROL_OUT = 1              ' |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|Out (Host -> Device)

Public Const REQ_TYPE_MASK = 2            '// |fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g|fffd|^|fffd|C|fffd|v|fffd|}|fffd|X|fffd|N
Public Const REQ_TYPE_CLASS = 0          '// |fffd|N|fffd||fffd||fffd|X|fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g
Public Const REQ_TYPE_VENDOR = 2          '// |fffd|x|fffd||fffd||fffd|_|fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g

Public Const TARGET_DEVICE = 0            '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd|f|fffd|o|fffd|C|fffd|X
Public Const TARGET_INTERFACE = 1         '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X
Public Const TARGET_ENDP = 2              '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd|G|fffd||fffd||fffd|h|fffd|||fffd|C|fffd||fffd||fffd|g
Public Const TARGET_OTHER = 3             '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||fffd|

Public Const SHORT_TR_NG = 0              '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In|fffd||30e||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd|
Public Const SHORT_TR_OK = 1              '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In|fffd||30e||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd|

Public Const CONTROL_ERR = -1             '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd||308||64f||fffd|I
Public Const PIPE_READ_ERR = -1           '// |fffd|p|fffd|C|fffd|v|fffd||fffd||fffd||fffd||313||1c2||74d||fffd||fffd||742||308||64f||fffd|I
Public Const CONTROL_DATA_MAX = 64       '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30d||151||fffd|
Public Const CONTROL_REQ_LEN = (CONTROL_DATA_MAX + 12)
                                   ' // |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g|fffd|f|fffd|[|fffd|^




INQUEST-PP=macro
