Attribute VB_Name = "EnterData_InningsSheet"
Option Explicit

Sub IS_EnterWide(nBatter As Integer, nBowler As Integer, nInnings As Integer, ByVal runs As Integer, Optional RunType As Integer = runAdd)
    Dim cWideRuns As Integer
    ExtraRuleAdjust WideRule, runs, cWideRuns
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    cWideRuns = cWideRuns * RunType
    'update bowlers wide tally
    Worksheets("Innings " & nInnings).Cells(nBowler + 20, 8) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 8) + RunType
    'update bowlers total runs conceded
    Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) + runs + cWideRuns
    Worksheets("Innings " & nInnings).Cells(14, WideColumn) = Worksheets("Innings " & nInnings).Cells(14, WideColumn) + runs + cWideRuns
    'check if we need to increment the ballno due to specific rules
    If MaxBallsPerOver > 0 And (BallsBowled - BallNo > MaxBallsPerOver - BallsPerOver _
        Or BallsBowled < BallNo Or BallNo = BallsPerOver) And OverNo + 1 <> Totalovers _
            Then BallNo = BallNo + RunType
End Sub
Sub IS_UndoWide(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer)
    IS_EnterWide nBatter, nBowler, nInnings, runs, runUndo
End Sub
Sub IS_EnterNoBall(nBatter As Integer, nBowler As Integer, nInnings As Integer, ByVal runs As Integer, charType As String, Optional RunType As Integer = runAdd)
    Dim cNoBallRuns As Integer
    ExtraRuleAdjust NoBallRule, runs, cNoBallRuns
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    cNoBallRuns = cNoBallRuns * RunType
        If charType = "b" Or charType = "lb" Or charType = "oslb" Or charType = "oslb" Then
            'update bowlers noball tally
            Worksheets("Innings " & nInnings).Cells(nBowler + 20, 7) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 7) + RunType
            'update bowlers total runs conceded
            Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) + cNoBallRuns + runs
            'add one ball onto the current batter
            Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7) = Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7) + RunType
            'update total extras
            Worksheets("Innings " & nInnings).Cells(14, NoBallColumn) = Worksheets("Innings " & nInnings).Cells(14, NoBallColumn) + runs + cNoBallRuns
        Else
            'update bowlers noball tally
            Worksheets("Innings " & nInnings).Cells(nBowler + 20, 7) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 7) + RunType
            'update bowlers total runs conceded
            Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) + runs + cNoBallRuns
            'update balls faced by batsmen
            If Abs(runs) = 5 Or Abs(runs) > 6 Then
                Dim nRuns As Integer, nBalls As Integer
                nRuns = Right(Worksheets("Innings " & nInnings).Cells(nBatter + 2, 12), 4)
                nBalls = Left(Worksheets("Innings " & nInnings).Cells(nBatter + 2, 12), 4)
                nRuns = nRuns + runs: nBalls = nBalls + RunType
                Worksheets("Innings " & nInnings).Cells(nBatter + 2, 12) = nBalls & Space(8 - Len(nBalls) - Len(nRuns)) & nRuns
            Else
                Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7 + Abs(runs)) = Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7 + Abs(runs)) + RunType
            End If
            'update total extras
            Worksheets("Innings " & nInnings).Cells(14, NoBallColumn) = Worksheets("Innings " & nInnings).Cells(14, NoBallColumn) + cNoBallRuns
        End If
        'check if we need to increment the ballno due to specific rules
    If MaxBallsPerOver > 0 And (BallsBowled - BallNo > MaxBallsPerOver - BallsPerOver _
        Or BallsBowled < BallNo Or BallNo = BallsPerOver) And OverNo + 1 <> Totalovers _
            Then BallNo = BallNo + RunType
End Sub
Sub IS_UndoNoBall(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer, charType As String)
    IS_EnterNoBall nBatter, nBowler, nInnings, runs, charType, runUndo
End Sub
Sub IS_EnterByes(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer, Optional RunType As Integer = runAdd)
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    'add 1 dot ball to the batter
    Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7) = Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7) + RunType
    'add runs to the total byes for the team
    Worksheets("Innings " & nInnings).Cells(14, ByeColumn) = Worksheets("Innings " & nInnings).Cells(14, ByeColumn) + runs
End Sub
Sub IS_UndoByes(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer)
    IS_EnterByes nBatter, nBowler, nInnings, runs, runUndo
End Sub
Sub IS_EnterLegByes(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer, Optional RunType As Integer = runAdd)
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    'add 1 dot ball to the batter
    Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7) = Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7) + RunType
    Worksheets("Innings " & nInnings).Cells(14, LegByeColumn) = Worksheets("Innings " & nInnings).Cells(14, LegByeColumn) + runs
End Sub
Sub IS_UndoLegByes(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer)
    IS_EnterLegByes nBatter, nBowler, nInnings, runs, runUndo
End Sub
Sub IS_EnterRuns(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer, Optional RunType As Integer = runAdd)
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    'enter runs into bowlers stats
    Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) = Worksheets("Innings " & nInnings).Cells(nBowler + 20, 4) + runs
    'enter ball into correct column in batters stats
    If Abs(runs) = 5 Or Abs(runs) > 6 Then
        Dim nRuns As Integer, nBalls As Integer
        nRuns = Right(Worksheets("Innings " & nInnings).Cells(nBatter + 2, 12), 4)
        nBalls = Left(Worksheets("Innings " & nInnings).Cells(nBatter + 2, 12), 4)
        nRuns = nRuns + runs: nBalls = nBalls + RunType
        Worksheets("Innings " & nInnings).Cells(nBatter + 2, 12) = nBalls & Space(8 - Len(nBalls) - Len(nRuns)) & nRuns
    Else
        Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7 + Abs(runs)) = Worksheets("Innings " & nInnings).Cells(nBatter + 2, 7 + Abs(runs)) + RunType
    End If
End Sub

Sub IS_UndoRuns(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer)
    IS_EnterRuns nBatter, nBowler, nInnings, runs, runUndo
End Sub

Sub IS_EnterPenaltyRuns(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer, Optional RunType As Integer = runAdd)
    'check if its penalty for the batters or bowlers
    If runs > 0 Then
        runs = runs * RunType
        'add runs to the penalty runs for the team
        Worksheets("Innings " & nInnings).Cells(14, PenaltyRunsColumn) = Worksheets("Innings " & nInnings).Cells(14, PenaltyRunsColumn) + runs
        If Worksheets("Innings " & nInnings).Cells(14, 5).Value > 0 Then
            Worksheets("Innings " & nInnings).Cells(14, 4).Font.ColorIndex = ciWhite
            Worksheets("Innings " & nInnings).Cells(14, 5).Font.ColorIndex = ciWhite
        Else
            Worksheets("Innings " & nInnings).Cells(14, 4).Font.ColorIndex = Worksheets("Innings " & nInnings).Cells(14, 4).Interior.ColorIndex
            Worksheets("Innings " & nInnings).Cells(14, 5).Font.ColorIndex = Worksheets("Innings " & nInnings).Cells(14, 5).Interior.ColorIndex
        End If
    Else 'It is penalty runs for the fielders
        runs = runs * RunType * -1
        Dim InningsAdd As Integer
        If nInnings = 1 Then
            'add to the start of innings 2
            If innings = 2 Then
                shtMainScoreboard.Cells(14, 3).Value = shtMainScoreboard.Cells(14, 3).Value + runs
            Else
                Worksheets("Innings 2").Cells(14, 3).Value = Worksheets("Innings 2").Cells(14, 3).Value + runs
            End If
        ElseIf nInnings = 2 Or (nInnings = 3 And BattingT = TeamTotals(2, 1)) Then
        'add to innings 1
            InningsAdd = 1
        ElseIf innings = 3 Then
        'add to innings 2
            InningsAdd = 2
        Else
        'add to innings 3
            InningsAdd = 3
        End If
        TeamTotals(InningsAdd, 2) = TeamTotals(InningsAdd, 2) + runs
        'clear the target so it will be recalculated
        shtMainScoreboard.Cells(18, 16) = ""
        Target = Target + runs
        'update the innings sheet
        Dim InningsSheet As Worksheet
        Set InningsSheet = ThisWorkbook.Worksheets("Innings " & InningsAdd)
        InningsSheet.Cells(14, 5) = InningsSheet.Cells(14, 5) + runs
        If InningsSheet.Cells(14, 5).Value > 0 Then
            InningsSheet.Cells(14, 4).Font.ColorIndex = ciWhite
            InningsSheet.Cells(14, 5).Font.ColorIndex = ciWhite
        Else
            InningsSheet.Cells(14, 4).Font.ColorIndex = InningsSheet.Cells(14, 4).Interior.ColorIndex
            InningsSheet.Cells(14, 5).Font.ColorIndex = InningsSheet.Cells(14, 5).Interior.ColorIndex
        End If
    End If
End Sub

Sub IS_UndoPenaltyRuns(nBatter As Integer, nBowler As Integer, nInnings As Integer, runs As Integer)
    IS_EnterPenaltyRuns nBatter, nBowler, nInnings, runs, runUndo
End Sub

Sub MS_UndoWicket(mRuns As Integer, prevCode As Long, intBowler As Integer)
    MS_EnterWicket mRuns, prevCode, intBowler, runUndo
End Sub

Sub MS_EnterWicket(mRuns As Integer, prevCode As Long, intBowler As Integer, Optional RunType As Integer = runAdd)
    Dim mRunType As Integer, mBallType As Integer, mHowOut As Integer
    'extract all the information from varOther
    prevCode = prevCode \ 10
    mRunType = prevCode Mod 10
    prevCode = prevCode \ 10
    mBallType = prevCode Mod 10
    prevCode = prevCode \ 1000
    mHowOut = prevCode Mod 100
    
    'if the batsmen was not timed out or retired
    If mHowOut < eHowOut.hoTIMEDOUT Then
        'check if it was a noball or wide and update bowlers runs conceded
        If mBallType = eBallType.btWide Then 'wide
            EnterWide mRuns, RunType
        ElseIf mBallType = eBallType.btNoBall Then 'no ball
            If mRunType = eRunType.rtRuns Then
                EnterNoBall mRuns, "r", RunType
            ElseIf mRunType = eRunType.rtByes Then
                EnterNoBall mRuns, "b", RunType
            ElseIf mRunType = eRunType.rtLegByes Then
                EnterNoBall mRuns, "lb", RunType
            End If
        Else
            If mRunType = eRunType.rtRuns Then
                EnterRuns mRuns, RunType
            ElseIf mRunType = eRunType.rtByes Then
                EnterByes mRuns, RunType
            ElseIf mRunType = eRunType.rtLegByes Then
                EnterLegByes mRuns, RunType
            End If
        End If
    End If
End Sub

Sub IS_UndoWicket(nInnings As Integer, mRuns As Integer, prevCode As Long, intBowler As Integer)
    IS_EnterWicket nInnings, mRuns, prevCode, intBowler, runUndo
End Sub

Sub IS_EnterWicket(nInnings As Integer, mRuns As Integer, prevCode As Long, intBowler As Integer, Optional RunType As Integer = runAdd)
    Dim mRunType As Integer, mBallType As Integer, mHowOut As Integer
    'extract all the information from varOther
    prevCode = prevCode \ 10
    mRunType = prevCode Mod 10
    prevCode = prevCode \ 10
    mBallType = prevCode Mod 10
    prevCode = prevCode \ 1000
    mHowOut = prevCode Mod 100
    
    'if the batsmen was not timed out or retired
    If mHowOut < eHowOut.hoTIMEDOUT Then
        'check if it was a noball or wide and update bowlers runs conceded
        If mBallType = eBallType.btWide Then 'wide
            IS_EnterWide currBatters(1), intBowler, nInnings, mRuns, RunType
        ElseIf mBallType = eBallType.btNoBall Then 'no ball
            If mRunType = eRunType.rtRuns Then
                IS_EnterNoBall currBatters(1), intBowler, nInnings, mRuns, "r", RunType
            ElseIf mRunType = eRunType.rtByes Then
                IS_EnterNoBall currBatters(1), intBowler, nInnings, mRuns, "b", RunType
            ElseIf mRunType = eRunType.rtLegByes Then
                IS_EnterNoBall currBatters(1), intBowler, nInnings, mRuns, "lb", RunType
            End If
        Else
            If mRunType = eRunType.rtRuns Then
                IS_EnterRuns currBatters(1), intBowler, nInnings, mRuns, RunType
            ElseIf mRunType = eRunType.rtByes Then
                IS_EnterByes currBatters(1), intBowler, nInnings, mRuns, RunType
            ElseIf mRunType = eRunType.rtLegByes Then
                IS_EnterLegByes currBatters(1), intBowler, nInnings, mRuns, RunType
            End If
        End If
    End If
End Sub


Attribute VB_Name = "Enter_Data"
Option Explicit

Global Const WideColumn As Integer = 7
Global Const NoBallColumn As Integer = 9
Global Const ByeColumn As Integer = 11
Global Const LegByeColumn As Integer = 14
Global Const PenaltyRunsColumn As Integer = 5

Global WideRule As ExtraScoringMode
Global NoBallRule As ExtraScoringMode
Global GameType As String

Global Const runUndo As Integer = -1
Global Const runAdd As Integer = 1

Public Enum ExtraScoringMode
    Runs_or_0
    Runs_plus_1
    Runs_or_1
    Runs_plus_2
    Runs_or_2
End Enum
Sub Enterdata(runs As Integer)
    ToggleAutoCalculate False
    'disable the new bowler when a ball is bowled
    shtMainScoreboard.cmdNewBowler.Enabled = False
    Dim charType As String
    Totalballs = Totalballs + 1
    BallsBowled = BallsBowled + 1
    'update batting and bowling scorecards
    If shtMainScoreboard.cmdW.Value = True Then
        charType = "w"
        EnterWide runs
    ElseIf shtMainScoreboard.cmdNB.Value = True Then
        charType = "nb"
        If shtMainScoreboard.cmdB.Value = True Then
            EnterNoBall runs, "b"
        ElseIf shtMainScoreboard.cmdLB.Value = True Then
            EnterNoBall runs, "lb"
        Else
            EnterNoBall runs, "r"
        End If
    ElseIf shtMainScoreboard.cmdB.Value = True Then
        charType = "b"
        EnterByes runs
    ElseIf shtMainScoreboard.cmdLB.Value = True Then
        charType = "lb"
        EnterLegByes runs
    ElseIf runs = EXTRABALLBOWLED Then
        charType = strEXTRABALL
        BallNo = BallNo - 1
        Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) = _
            Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) + 1
    ElseIf runs = PENALTYRUNSCODE Then
        charType = strPENALTYRUNS
        runs = PENALTYRUNSCODE - Val(frmOther.txtRuns.Text)
        EnterPenaltyRuns PENALTYRUNSCODE - runs
    ElseIf runs = SWAPBATSMENCODE Then
        charType = strSWAPBATSMEN
    ElseIf runs = CHANGEBOWLERCODE Then
        charType = strCHANGEBOWLER
    ElseIf runs = CBEOCODE Then
        charType = strCBEO
        runs = CBEOCODE - OtherBowlersBalls
        OtherBowlersBalls = 0
    ElseIf runs = ENDOVERCODE Then
        runs = -BallNo
        Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) = Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) _
            - BallsPerOver + BallNo
        charType = strENDOVER
    ElseIf runs <= ENDDAYCODE Then
        charType = strENDDAY
    Else
        charType = "r"
        EnterRuns runs
    End If
    'enterdata into data sheet
    shtData.Cells(Totalballs + 2, innings * 6 - 4) = OverNo * BallsPerOver + BallNo
    If charType = strENDOVER Then _
        shtData.Cells(Totalballs + 2, innings * 6 - 4) = (OverNo + 1) * BallsPerOver
    shtData.Cells(Totalballs + 2, innings * 6 - 3) = runs
    shtData.Cells(Totalballs + 2, innings * 6 - 2) = charType
    'This contains the bowlers index, batters index, wickets down, bowlers overs, batters details string length before entry of this ball
    shtData.Cells(Totalballs + 2, innings * 6) = currBowlers(1) + currBatters(1) * 100 + Wickets * CLng(10000)
    shtData.Cells(Totalballs + 2, innings * 6 - 5) = (arrBowlers(currBowlers(1), 2) + (arrBowlers(currBowlers(1), 4) + BallsPerOver - 1) \ BallsPerOver) _
        + CLng(1000) * Len(shtDetails.Cells((innings - 1) * 36 + currBatters(1) + 2, 4))
    If frmOther.chk1Short.Value = True Then shtData.Cells(Totalballs + 2, innings * 6 - 1) = "os"
    'this must be done second
    If charType = "nb" Then
        If shtMainScoreboard.cmdLB.Value = True Then
            shtData.Cells(Totalballs + 2, innings * 6 - 1) = shtData.Cells(Totalballs + 2, innings * 6 - 1) & "lb"
        ElseIf shtMainScoreboard.cmdB.Value = True Then
            shtData.Cells(Totalballs + 2, innings * 6 - 1) = shtData.Cells(Totalballs + 2, innings * 6 - 1) & "b"
        End If
    End If
    
    AddNewOverRow
    'enter recent delivery
    If runs >= 0 Then
        EnterRecentDeliveries
        'swapbatsmen if batsmen crossover
        If runs Mod 2 = 1 And frmOther.chk1Short.Value = False Then
            SwapBatsmen
        ElseIf frmOther.chk1Short.Value = True And runs Mod 2 = 0 Then
            SwapBatsmen
        End If
    End If
    'total runs must be updated before current partnership
    Totalruns = shtMainScoreboard.Cells(1 + 15, 2)
    If charType <> strENDOVER Then UpdateCurrentPartnership
    'do other checks
    OtherChecks
shtMainScoreboard.Activate
shtMainScoreboard.Range("B16").Activate
    ToggleAutoCalculate True
End Sub

Sub ExtraRuleAdjust(ExtraRule As ExtraScoringMode, runs As Integer, cExtraRuns As Integer)
    If ExtraRule = Runs_plus_1 Or ExtraRule = Runs_or_1 Then
        cExtraRuns = 1
    ElseIf ExtraRule = Runs_plus_2 Or ExtraRule = Runs_or_2 Then
        cExtraRuns = 2
    Else
        cExtraRuns = 0
    End If
    If ExtraRule = Runs_or_1 Then
        If runs > cExtraRuns Then
            cExtraRuns = 0
        Else
            cExtraRuns = 1
            runs = 0
        End If
    ElseIf ExtraRule = Runs_or_2 Then
        If runs > cExtraRuns Then
            cExtraRuns = 0
        Else
            cExtraRuns = 2
            runs = 0
        End If
    End If
End Sub
Sub EnterWide(ByVal runs As Integer, Optional RunType As Integer = runAdd)
    Dim cWideRuns As Integer
    ExtraRuleAdjust WideRule, runs, cWideRuns
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    cWideRuns = cWideRuns * RunType
    'update bowlers wide tally
    shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 8) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 8) + RunType
    'update bowlers total runs conceded
    shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) + runs + cWideRuns
    shtMainScoreboard.Cells(1 + 14, WideColumn) = shtMainScoreboard.Cells(1 + 14, WideColumn) + runs + cWideRuns
    'check if we need to increment the ballno due to specific rules
    If MaxBallsPerOver > 0 And (BallsBowled - BallNo > MaxBallsPerOver - BallsPerOver _
        Or BallsBowled < BallNo Or BallNo = BallsPerOver) And OverNo + 1 <> Totalovers _
            Then BallNo = BallNo + RunType
End Sub
Sub UndoWide(runs As Integer)
    EnterWide runs, runUndo
End Sub
Sub EnterNoBall(ByVal runs As Integer, charType As String, Optional RunType As Integer = runAdd)
    Dim cNoBallRuns As Integer
    ExtraRuleAdjust NoBallRule, runs, cNoBallRuns
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    cNoBallRuns = cNoBallRuns * RunType
        If charType = "b" Or charType = "lb" Or charType = "oslb" Or charType = "oslb" Then
            'update bowlers noball tally
            shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 7) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 7) + RunType
            'update bowlers total runs conceded
            shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) + cNoBallRuns + runs
            'add one ball onto the current batter
            shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7) = shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7) + RunType
            'update total extras
            shtMainScoreboard.Cells(1 + 14, NoBallColumn) = shtMainScoreboard.Cells(1 + 14, NoBallColumn) + runs + cNoBallRuns
        Else
            'update bowlers noball tally
            shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 7) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 7) + RunType
            'update bowlers total runs conceded
            shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) + runs + cNoBallRuns
            'update balls faced by batsmen
            If Abs(runs) = 5 Or Abs(runs) > 6 Then
                Dim nRuns As Integer, nBalls As Integer
                nRuns = Right(shtMainScoreboard.Cells(currBatters(1) + 3, 12), 4)
                nBalls = Left(shtMainScoreboard.Cells(currBatters(1) + 3, 12), 4)
                nRuns = nRuns + runs: nBalls = nBalls + RunType
                shtMainScoreboard.Cells(currBatters(1) + 3, 12) = nBalls & Space(8 - Len(nBalls) - Len(nRuns)) & nRuns
            Else
                shtMainScoreboard.Cells(currBatters(1) + 3, 7 + Abs(runs)) = shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7 + Abs(runs)) + RunType
            End If
            'update total extras
            shtMainScoreboard.Cells(1 + 14, NoBallColumn) = shtMainScoreboard.Cells(1 + 14, NoBallColumn) + cNoBallRuns
        End If
        'check if we need to increment the ballno due to specific rules
    If MaxBallsPerOver > 0 And (BallsBowled - BallNo > MaxBallsPerOver - BallsPerOver _
        Or BallsBowled < BallNo Or BallNo = BallsPerOver) And OverNo + 1 <> Totalovers _
            Then BallNo = BallNo + RunType
End Sub
Sub UndoNoBall(runs As Integer, charType As String)
    EnterNoBall runs, charType, runUndo
End Sub
Sub EnterByes(runs As Integer, Optional RunType As Integer = runAdd)
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    'add 1 dot ball to the batter
    shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7) = shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7) + RunType
    'add runs to the total byes for the team
    shtMainScoreboard.Cells(1 + 14, ByeColumn) = shtMainScoreboard.Cells(1 + 14, ByeColumn) + runs
    BallNo = BallNo + RunType
    'we dont need to add to the total balls for the bowler
End Sub
Sub UndoByes(runs As Integer)
    EnterByes runs, runUndo
End Sub
Sub EnterLegByes(runs As Integer, Optional RunType As Integer = runAdd)
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    'add 1 dot ball to the batter
    BallNo = BallNo + RunType
    shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7) = shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7) + RunType
    shtMainScoreboard.Cells(1 + 14, LegByeColumn) = shtMainScoreboard.Cells(1 + 14, LegByeColumn) + runs
End Sub
Sub UndoLegByes(runs As Integer)
    EnterLegByes runs, runUndo
End Sub
Sub EnterRuns(runs As Integer, Optional RunType As Integer = runAdd)
    'adjust runs added if the user wants to undo
    runs = runs * RunType
    'enter runs into bowlers stats
    shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) + runs
    BallNo = BallNo + RunType
    'enter ball into correct column in batters stats
    If Abs(runs) = 5 Or Abs(runs) > 6 Then
        Dim nRuns As Integer, nBalls As Integer
        nRuns = Right(shtMainScoreboard.Cells(currBatters(1) + 3, 12), 4)
        nBalls = Left(shtMainScoreboard.Cells(currBatters(1) + 3, 12), 4)
        nRuns = nRuns + runs: nBalls = nBalls + RunType
        shtMainScoreboard.Cells(currBatters(1) + 3, 12) = nBalls & Space(8 - Len(nBalls) - Len(nRuns)) & nRuns
    Else
        shtMainScoreboard.Cells(currBatters(1) + 3, 7 + Abs(runs)) = shtMainScoreboard.Cells(1 + currBatters(1) + 2, 7 + Abs(runs)) + RunType
    End If
End Sub

Sub UndoRuns(runs As Integer)
    EnterRuns runs, runUndo
End Sub

Sub EnterPenaltyRuns(runs As Integer, Optional RunType As Integer = runAdd)
    'check if its penalty for the batters or bowlers
    If runs > 0 Then
        runs = runs * RunType
        'add runs to the penalty runs for the team
        shtMainScoreboard.Cells(15, PenaltyRunsColumn) = shtMainScoreboard.Cells(15, PenaltyRunsColumn) + runs
        If shtMainScoreboard.Cells(15, 5).Value > 0 Then
            shtMainScoreboard.Cells(15, 4).Font.ColorIndex = ciWhite
            shtMainScoreboard.Cells(15, 5).Font.ColorIndex = ciWhite
        Else
            shtMainScoreboard.Cells(15, 4).Font.ColorIndex = shtMainScoreboard.Cells(15, 4).Interior.ColorIndex
            shtMainScoreboard.Cells(15, 5).Font.ColorIndex = shtMainScoreboard.Cells(15, 5).Interior.ColorIndex
        End If
    Else 'It is penalty runs for the fielders
        runs = runs * RunType * -1
        Dim InningsAdd As Integer
        If innings = 1 Then
            'add to the start of innings 2
            fieldersPenaltyRuns = fieldersPenaltyRuns + runs
            Exit Sub
        ElseIf innings = 2 Or (innings = 3 And BattingT = TeamTotals(2, 1)) Then
        'add to innings 1
            InningsAdd = 1
        ElseIf innings = 3 Then
        'add to innings 2
            InningsAdd = 2
        Else
        'add to innings 3
            InningsAdd = 3
        End If
        TeamTotals(InningsAdd, 2) = TeamTotals(InningsAdd, 2) + runs
        'clear the target so it will be recalculated
        shtMainScoreboard.Cells(18, 16) = ""
        Target = Target + runs
        'update the innings sheet
        Dim InningsSheet As Worksheet
        Set InningsSheet = ThisWorkbook.Worksheets("Innings " & InningsAdd)
        InningsSheet.Cells(14, 5) = InningsSheet.Cells(14, 5) + runs
        If InningsSheet.Cells(14, 5).Value > 0 Then
            InningsSheet.Cells(14, 4).Font.ColorIndex = ciWhite
            InningsSheet.Cells(14, 5).Font.ColorIndex = ciWhite
        Else
            InningsSheet.Cells(14, 4).Font.ColorIndex = InningsSheet.Cells(14, 4).Interior.ColorIndex
            InningsSheet.Cells(14, 5).Font.ColorIndex = InningsSheet.Cells(14, 5).Interior.ColorIndex
        End If
        'UpdateTotals
    End If
End Sub

Sub UndoPenaltyRuns(runs As Integer)
    EnterPenaltyRuns runs, runUndo
End Sub

Public Function RPO(balls As Double, runs As Integer)
    If balls > 0 Then
        RPO = runs / (balls / BallsPerOver)
    Else
        RPO = "-"
    End If
End Function

Public Function OversToBalls(Overs As Double)
    If Overs = 0 Then
        OversToBalls = 0
    Else
        OversToBalls = WorksheetFunction.Floor(Overs, 1) * BallsPerOver + (Overs - WorksheetFunction.Floor(Overs, 1)) * 10
    End If
End Function

Public Function BallsToOvers(balls As Integer)
    If balls = 0 Then BallsToOvers = 0 Else _
        BallsToOvers = balls \ BallsPerOver + ((balls Mod BallsPerOver) / 10)
End Function

Public Function getPlayerName(Team As Integer, Number As Integer) As String
    getPlayerName = BatterNames(Team, Number)
End Function
Attribute VB_Name = "Graphs"
Option Explicit

Global Const GraphPrintColor = 2 'white
Global Const GraphDisplayColor = 1 'black

Sub InitializeGraphs()
    SetGraphColor GraphDisplayColor
    SetGridLineColor
    'turn off the lines on the skyscraper
    For i = 1 To 2
        chtWorm.SeriesCollection(i).Border.Weight = xlThick
        chtRunRate.SeriesCollection(i).Border.Weight = xlThick
    Next i
    chtSS1.LineGroups(1).HasSeriesLines = False
    chtSS2.LineGroups(1).HasSeriesLines = False
    'shrink the graphs to minimum size
    For i = 1 To 2
        chtWorm.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
        chtRunRate.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
        chtSkyScraper.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
        chtSS2.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
        chtSS1.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
    Next i
    For i = 3 To 14
        chtWorm.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
        chtRunRate.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
    Next i
    For i = 2 To 4
        chtSS1.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
        chtSS2.SeriesCollection(i).Values = shtGraphData.Range("B2:B2")
    Next i
    For i = 3 To 14
        chtWorm.SeriesCollection(i).MarkerStyle = xlMarkerStyleNone
        chtRunRate.SeriesCollection(i).MarkerStyle = xlMarkerStyleNone
        chtWorm.SeriesCollection(i).MarkerStyle = xlMarkerStyleNone
        chtRunRate.SeriesCollection(i).MarkerStyle = xlMarkerStyleNone
    Next i
    For i = 2 To 4
        chtSS1.SeriesCollection(i).MarkerStyle = xlMarkerStyleNone
        chtSS2.SeriesCollection(i).MarkerStyle = xlMarkerStyleNone
    Next i
End Sub
Sub Graphdata()
    Dim ptsw As Points
    Dim i As Integer
    Const MAXDOTSIZEW As Integer = 36
    Const DOTSIZEW As Integer = 400
    Const OVER1 As Integer = 5
    Const over0 As Integer = OVER1 - 1
    Const COLUMNS As Integer = 16
    'activate the sheet with the graph data
    shtGraphData.Activate
    'check if the graphs have been initialized
    If bGraphsInitialized = False Then InitializeGraphs
    
    If innings Mod 2 = 1 And OverNo > 0 Then
        'do the stuff that only has to be done once on the worm and run rate
        For i = 3 To 8
            'set the source data of the wicket series
            chtWorm.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(over0, 8 + i), shtGraphData.Cells(OverNo + over0, 8 + i))
            chtRunRate.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 30 + i), shtGraphData.Cells(OverNo + over0, 30 + i))
            'set the point size of the dots
            Set ptsw = chtWorm.SeriesCollection(i).Points
            SetDotSize ptsw, DOTSIZEW, MAXDOTSIZEW
            Set ptsw = chtRunRate.SeriesCollection(i).Points
            SetDotSize ptsw, DOTSIZEW, MAXDOTSIZEW
        Next i
        'do the stuff for the sky skraper
        For i = 2 To 4
            chtSS1.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 3 + i), shtGraphData.Cells(OverNo + over0, 3 + i))
            Dim pts As Points
            Set pts = chtSS1.SeriesCollection(i).Points
            SetDotSize pts
        Next i
        'turn on the dots for each specific over
        Dim CurrentUpdateOver As Integer
        For CurrentUpdateOver = LastUpdatedGraphs + 1 To OverNo
            'turn on the dots on the worm graph
            For i = 3 To 8
                If Not shtGraphData.Cells(over0 + CurrentUpdateOver, 8 + i) = "" Then
                    SetDotStyle chtWorm.SeriesCollection(i), (CurrentUpdateOver + 1), Team1Dots
                    SetDotStyle chtRunRate.SeriesCollection(i), (CurrentUpdateOver), Team1Dots
                Else
                    If chtRunRate.SeriesCollection(i).Points(CurrentUpdateOver).MarkerStyle = xlMarkerStyleNone Then Exit For
                    UnsetDotStyle chtWorm.SeriesCollection(i), CurrentUpdateOver + 1
                    UnsetDotStyle chtRunRate.SeriesCollection(i), (CurrentUpdateOver)
                End If
            Next i
            'turn on the dots on the sky scraper 1
            For i = 2 To 4
                If Not shtGraphData.Cells(over0 + CurrentUpdateOver, 3 + i) = "" Then
                    If CurrentUpdateOver > 0 Then
                        SetDotStyle chtSS1.SeriesCollection(i), (CurrentUpdateOver), Team1Dots
                    End If
                Else
                    If chtSS1.SeriesCollection(i).Points(CurrentUpdateOver).MarkerStyle = xlMarkerStyleNone Then Exit For
                    UnsetDotStyle chtSS1.SeriesCollection(i), (CurrentUpdateOver)
                End If
            Next i
        Next CurrentUpdateOver
        'set the range for the first series on each graph
        chtWorm.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(over0, 3), shtGraphData.Cells(OverNo + over0, 3))
        chtRunRate.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 4), shtGraphData.Cells(OverNo + over0, 4))
        'chtSkyScraper.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(over1, 2), shtGraphData.Cells(overno + over0, 2))
        chtSS1.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 2), shtGraphData.Cells(OverNo + over0, 2))
        chtWorm.Axes(xlCategory).CategoryNames = shtGraphData.Range(shtGraphData.Cells(over0, 1), shtGraphData.Cells(OverNo + over0, 1))
        chtRunRate.Axes(xlCategory).CategoryNames = shtGraphData.Range(shtGraphData.Cells(OVER1, 1), shtGraphData.Cells(OverNo + OVER1, 1))
    ElseIf OverNo = 0 And innings Mod 2 = 0 Then ' and it is the second innings
        For i = 3 To 8
            'set the source data of the wicket series
            chtWorm.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(over0, 8 + i), shtGraphData.Cells(Overslasted + over0, 8 + i))
            chtRunRate.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 30 + i), shtGraphData.Cells(Overslasted + over0, 30 + i))
        Next i
        chtWorm.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(over0, 3), shtGraphData.Cells(Overslasted + over0, 3))
        chtRunRate.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 4), shtGraphData.Cells(Overslasted + over0, 4))
        chtSkyScraper.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 2), shtGraphData.Cells(Overslasted + over0, 2))
        chtSS1.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 2), shtGraphData.Cells(Overslasted + over0, 2))
        'chtWorm.Axes(xlCategory).CategoryNames = shtGraphData.Range(shtGraphData.Cells(over0, 1), shtGraphData.Cells(Overslasted + over0, 1))
        'chtRunRate.Axes(xlCategory).CategoryNames = shtGraphData.Range(shtGraphData.Cells(OVER1, 1), shtGraphData.Cells(Overslasted + OVER1, 1))
    End If
    If innings Mod 2 = 0 And OverNo > 0 Then
        'do the stuff on sky scraper that must be done once
        For i = 2 To 4
            chtSS2.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 19 + i), shtGraphData.Cells(OverNo + over0, 19 + i))
            Dim pts2 As Points
            Set pts2 = chtSS2.SeriesCollection(i).Points
            SetDotSize pts2
        Next i
        'do the stuff for the worm and run rate graphs
        For i = 9 To 14
                'set the source data of the wicket series
                chtWorm.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(over0, 2 + i + COLUMNS), shtGraphData.Cells(OverNo + over0, 2 + i + COLUMNS))
                chtRunRate.SeriesCollection(i).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, 30 + i), shtGraphData.Cells(OverNo + over0, 30 + i))
                'set the point size of the dots
                Set ptsw = chtWorm.SeriesCollection(i).Points
                SetDotSize2 ptsw, DOTSIZEW, MAXDOTSIZEW, Overslasted
                Set ptsw = chtRunRate.SeriesCollection(i).Points
                SetDotSize2 ptsw, DOTSIZEW, MAXDOTSIZEW, Overslasted
                If OverNo > Overslasted Then
                    'set the point size of the dots from the first innings
                    Set ptsw = chtWorm.SeriesCollection(i - 6).Points
                    SetDotSize2 ptsw, DOTSIZEW, MAXDOTSIZEW, Overslasted
                    Set ptsw = chtRunRate.SeriesCollection(i - 6).Points
                    SetDotSize2 ptsw, DOTSIZEW, MAXDOTSIZEW, Overslasted
                End If
        Next i
        'update the dots for every over
        For CurrentUpdateOver = LastUpdatedGraphs + 1 To OverNo
            'turn on the dots on the sky scraper for player 2
            For i = 2 To 4
                If Not shtGraphData.Cells(over0 + CurrentUpdateOver, 19 + i) = "" Then
                    SetDotStyle chtSS2.SeriesCollection(i), (CurrentUpdateOver), Team2Dots
                Else
                    If chtSS2.SeriesCollection(i).Points(CurrentUpdateOver).MarkerStyle = xlMarkerStyleNone Then Exit For
                    UnsetDotStyle chtSS2.SeriesCollection(i), (CurrentUpdateOver)
                End If
            Next i
            'set worm dots
            For i = 9 To 14
                If Not shtGraphData.Cells(over0 + CurrentUpdateOver, 18 + i) = "" Then
                    SetDotStyle chtWorm.SeriesCollection(i), CurrentUpdateOver + 1, Team2Dots
                    SetDotStyle chtRunRate.SeriesCollection(i), (CurrentUpdateOver), Team2Dots
                Else
                    If chtRunRate.SeriesCollection(i).Points(CurrentUpdateOver).MarkerStyle = xlMarkerStyleNone Then Exit For
                    UnsetDotStyle chtWorm.SeriesCollection(i), CurrentUpdateOver + 1
                    UnsetDotStyle chtRunRate.SeriesCollection(i), (CurrentUpdateOver)
                End If
            Next i
        Next CurrentUpdateOver
        'update the series collection for each chart
        chtWorm.SeriesCollection(2).Values = shtGraphData.Range(shtGraphData.Cells(over0, COLUMNS + 3), shtGraphData.Cells(OverNo + over0, COLUMNS + 3))
        chtRunRate.SeriesCollection(2).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, COLUMNS + 4), shtGraphData.Cells(OverNo + over0, COLUMNS + 4))
        chtSkyScraper.SeriesCollection(2).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, COLUMNS + 2), shtGraphData.Cells(OverNo + over0, COLUMNS + 2))
        chtSS2.SeriesCollection(1).Values = shtGraphData.Range(shtGraphData.Cells(OVER1, COLUMNS + 2), shtGraphData.Cells(OverNo + over0, COLUMNS + 2))
        'expand the categoryNames if needed
        If OverNo > TeamTotals(innings - 1, 3) Then
            chtWorm.Axes(xlCategory).CategoryNames = shtGraphData.Range(shtGraphData.Cells(over0, 1), shtGraphData.Cells(OverNo + over0, 1))
            chtRunRate.Axes(xlCategory).CategoryNames = shtGraphData.Range(shtGraphData.Cells(OVER1, 1), shtGraphData.Cells(OverNo + OVER1, 1))
        End If
        
    End If
    bGraphsInitialized = True
    LastUpdatedGraphs = OverNo
End Sub

Sub SetDotSize(pts As Points, Optional SSDOTSIZE As Integer = 450, Optional MAXSIZE As Integer = 72)
    Const MINSIZE As Integer = 2
    Dim DotSize As Integer
    Dim OversGone As Integer
    OversGone = OverNo
    If OverNo = 0 Then OversGone = 1
    DotSize = SSDOTSIZE / OversGone
    If DotSize > MAXSIZE Then
        DotSize = MAXSIZE
    ElseIf DotSize < MINSIZE Then
        DotSize = MINSIZE
    End If
    For k = 1 To pts.count
        pts(k).MarkerSize = DotSize
    Next k
End Sub

Sub SetDotSize2(pts As Points, Optional SSDOTSIZE As Integer = 450, Optional MAXSIZE As Integer = 72, Optional ByVal Overs = 50)
    Const MINSIZE As Integer = 2
    Dim DotSize As Integer
    If Overs < OverNo Then Overs = OverNo
    If Overs = 0 Then Overs = 1
    DotSize = SSDOTSIZE / Overs
    If DotSize > MAXSIZE Then
        DotSize = MAXSIZE
    ElseIf DotSize < MINSIZE Then
        DotSize = MINSIZE
    End If
    For k = 1 To pts.count
        pts(k).MarkerSize = DotSize
    Next k
End Sub

Sub HideInningsTwoSheets()
    ActiveWorkbook.Unprotect "laverwood"
    shtGraphs.Visible = xlSheetHidden
    shtOverDetails1.Visible = xlSheetHidden
    shtInnings1.Visible = xlSheetHidden
    chtSkyScraper.Visible = xlSheetHidden
    chtSS2.Visible = xlSheetHidden
    DeleteInningsTwoSheets
    ActiveWorkbook.Protect "laverwood"
End Sub
Sub DeleteInningsTwoSheets()
    ActiveWorkbook.Unprotect "laverwood"
    Application.DisplayAlerts = False
    For i = 2 To Worksheets.count - TotalWorksheets
        Worksheets("Innings " & i).Delete
    Next i
    Application.DisplayAlerts = True
End Sub

Sub UnhideInningsTwoSheets()
    ActiveWorkbook.Unprotect "laverwood"
    shtInnings1.Visible = xlSheetVisible
    chtSkyScraper.Visible = xlSheetVisible
    chtSS2.Visible = xlSheetVisible
    ActiveWorkbook.Protect "laverwood"
End Sub

Sub SetDotStyle(currSeries As Series, numPoint As Integer, color As Integer)
    With currSeries.Points(numPoint)
        .MarkerStyle = xlMarkerStyleCircle
        .MarkerBackgroundColorIndex = color
        .MarkerForegroundColorIndex = color
    End With
End Sub

Sub UnsetDotStyle(currSeries As Series, numPoint As Integer)
    With currSeries.Points(numPoint)
        .MarkerStyle = xlMarkerStyleNone
    End With
End Sub

Sub SetGraphColor(gColor As Variant)
    For i = 1 To ActiveWorkbook.Charts.count
        ActiveWorkbook.Charts(i).PlotArea.Interior.ColorIndex = gColor
    Next i
End Sub

Sub SetGridLineColor()
    Dim GridLineColor As Long
    GridLineColor = RGB(150, 150, 150)
    For i = 1 To ActiveWorkbook.Charts.count
        ActiveWorkbook.Charts(i).Axes(xlValue).MajorGridlines.Border.color = GridLineColor
    Next i
End Sub

Attribute VB_Name = "Help_Icons"
Option Explicit

Declare Function SendMessage Lib "user32" Alias _
"SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, _
   ByVal wParam As Long, ByVal lParam As Long) As Long
   
Declare Function SendMessageText Lib "user32" Alias _
"SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, _
   ByVal wParam As Long, ByVal lParam As String) As Long
   
Declare Function ExtractIcon Lib "shell32.dll" Alias _
"ExtractIconA" (ByVal hInst As Long, _
   ByVal lpszExeFileName As String, _
    ByVal nIconIndex As Long) As Long
    
Private Declare Function GetFocus Lib "user32" () As Long

Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" _
    (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Private Declare Function FindWindowEx Lib "user32" Alias "FindWindowExA" _
    (ByVal hWnd1 As Long, ByVal hWnd2 As Long, ByVal lpsz1 As String, _
    ByVal lpsz2 As String) As Long

Declare Function HtmlHelp Lib "HHCtrl.ocx" Alias "HtmlHelpA" _
   (ByVal hwndCaller As Long, _
   ByVal pszFile As String, _
   ByVal uCommand As Long, _
   dwData As Any) As Long

Const WM_PAINT = &HF
Const WM_SETTEXT = &HC
Const WM_SETICON = &H80

Const HH_DISPLAY_TOPIC = &H0
Const HH_HELP_CONTEXT = &HF

Sub ChangeXLIcons()
    Dim h32NewIcon As Long, h32WndXLMAIN As Long, WorkbookHwnd As Long, path As String
    path = GetSetting(strSCOREBOOK_TITLE, "Location", "Path", "")
    h32NewIcon = ExtractIcon(0, Left(path, Len(path) - 17) & "Scorebook.ico", 0)
    ThisWorkbook.Activate
    WorkbookHwnd = GetFocus
    SendMessage WorkbookHwnd, WM_SETICON, False, h32NewIcon 'Icon big
    h32WndXLMAIN = FindWindow("XLMAIN", Application.Caption)
    SendMessage h32WndXLMAIN, WM_SETICON, 1, h32NewIcon 'Icon big
    SendMessage h32WndXLMAIN, WM_SETICON, 0, h32NewIcon 'Icon small
End Sub

Sub DisplayHelpTopic(Topic As String)
    Dim path As String
    path = GetSetting(strSCOREBOOK_TITLE, "Location", "Path", "")
    If ThisScorebook.locateHelp Then
        HtmlHelp 0, path, HH_DISPLAY_TOPIC, ByVal Topic
    End If
End Sub

Sub DisplayContextHelp(Optional HelpID As Long = HID_CONTENTS)
    If ThisScorebook.locateHelp Then
        HtmlHelp 0, GetSetting(strSCOREBOOK_TITLE, "Location", "Path", ""), HH_HELP_CONTEXT, ByVal HelpID
    End If
End Sub

Sub ResetXLIcon()
    Dim h32NewIcon As Long
    Dim h32WndXLMAIN As Long
    h32NewIcon = ExtractIcon(0, "Excel.exe", 0)
    h32WndXLMAIN = FindWindow("XLMAIN", Application.Caption)
    SendMessage h32WndXLMAIN, WM_SETICON, 1, h32NewIcon 'Icon big
    SendMessage h32WndXLMAIN, WM_SETICON, 0, h32NewIcon 'Icon small
End Sub

Sub ShowAbout()
    frmAbout.Show
End Sub
Attribute VB_Name = "Main"
Option Explicit
Global Const bRelease As Boolean = True
Global Const excelVersion As Double = 9#

Global Const PARTNERSHIP_BALLS_ADJUSTMENT = 12

Global Const m_xlPasteColumnWidths = 8
Global Team1Dots As Integer
Global Team2Dots As Integer
Global bMatchEnded As Boolean
Global Const DetailsInningsSize = 36
'variables for colour settings
Global Const MinOversVisible = 5
Global Const Size1 = 4
Global Const Size2 = 4
Global Const Borders = 3
Global Const Batters = 1
Global Const Bowlers = 2
Global Const Fonts = 4
Global Const Light = 1
Global Const Medium = 2
Global Const Dark = 3
Global Const TitleBar = 4
Global Const TotalScore = 2
Global Const Striker = 3
Global Const NonStriker = 4
Global arrColourIndex(1 To Size1, 1 To Size2) As Integer
Global arrOldRGBs(1 To Size1, 1 To Size2) As Long
Private Const CHANGE_TO_GENERAL_COUNT As Integer = 250 'Max of 255 before changes to unviewable in excel2003
Global Const HID_CONTENTS As Long = 100000
Global Const HID_NEWGAME As Long = 100010
Global Const HID_BASICSCORING As Long = 100020
Global Const HID_OTHERBUTTONS As Long = 100030
Global Const HID_OTHERFEATURES As Long = 100040
Global Const HID_MAINSCOREBOARD As Long = 100050
Global Const HID_DETAILEDSCOREBOARD As Long = 100060
Global Const HID_GRAPHS As Long = 100070
Global Const HID_SYMBOLS As Long = 100080
Global Const HID_ABBREVIATIONS As Long = 100090
Global Const HID_LAVER_WOOD As Long = 100100
Global Const HID_ABOUTCREATOR As Long = 100110
Global Const HID_LIMITATIONS As Long = 100120
Global Const HID_SCORINGWICKETS As Long = 100130
Global Const HID_EDITCOLOURSCHEME As Long = 100140
Global Const HID_CORRECTIONS As Long = 100150

Global Const PENALTYRUNSCODE As Integer = -200
Global Const EXTRABALLBOWLED As Integer = -102
Global Const SWAPBATSMENCODE As Integer = -104
Global Const CHANGEBOWLERCODE As Integer = -108
Global Const ENDOVERCODE As Integer = -116
Global Const CBEOCODE As Integer = -132
Global Const ENDDAYCODE As Integer = -10000
Global Const TotalWorksheets As Integer = 11

Global Const ciYellow As Variant = 27
Global Const ciWhite As Variant = 2
Global Const ALLOWBOWLERUNLOAD As Integer = -111
Global MaxOvers1stInnings As Integer
Global maxDays As Integer
Global FollowOn As Integer
Global OtherBowlersBalls As Integer

Global i As Integer
Global j As Integer
Global k As Integer
Global item As CommandBarControl
Const RECENTDELIVERYCOLUMN As Variant = 23
Const RECENTOVER1 As Variant = 29
Const ROROWSPACE As Variant = 4
Global Const maxInnings As Integer = 4
Global maxOvers As Integer
Global Const maxOversStored As Integer = 500 'this is the maximum overs stored
Global Const maxOversBowlerDisplay As Integer = 100 'max bowlers overs on detailed sheet
Global Const maxOversFullVersion As Integer = 200 'this is the maximum overs displayed
Global defaultOversPerDay As Integer
Global default1InningsOvers As Integer
Global Const maxWickets As Integer = 10
Global Const minOvers As Integer = 1
Global Const hoRETIRED As Integer = 11
Global password As Variant

Global LastUpdatedGraphs As Integer
Global bGraphsInitialized As Boolean
Global BallsBowled As Integer
Global BallNo As Integer
Global OverNo As Integer
Global OversVisible As Integer
Global isNewInnings As Boolean
Global fieldersPenaltyRuns As Integer
'overno, team, info
'1 - total runs scored at end of each over
'2 - contains the number of balls bowled in each over
Global OverScores(1 To maxOversStored, 1 To maxInnings, 1 To 2)
'This contains the runs scored in each teams innings for a two innings game
'1 - the team number
'2 - the teams total runs
'3 - the teams total overs
Global TeamTotals(1 To maxInnings, 1 To 3)
Global Const MAXPLAYERS As Integer = 20
'0 - Not out
'1 - who is out
'2-3 dismissed batsmens runs and balls
'4-5 not out batsmens runs and balls in the partnership
'6-7 total runs overs and balls for partnership
'8-9 partnership runs and overs
'10-11 not out batsmens total runs and balls
Global Partnerships(0 To maxWickets, 0 To PARTNERSHIP_BALLS_ADJUSTMENT, 1 To maxInnings)
Global Totalballs As Integer
Global TeamNames(1 To 2) As String
Global TeamInitials(1 To 2) As String
Global BatterNames(1 To 2, 1 To MAXPLAYERS) As String
Global innings As Integer
Global BattingT As Integer
Global BowlingT As Integer
Global Totalovers As Integer
Global currBatters(1 To 2) As Integer
Global currBowlers(1 To 2) As Integer
Global Wickets As Integer
Global Retired As Integer
'1 bowlers orders,
'2 overs bowled,
'3 runs conceded as of last over,
'4 balls bowled in a partially complete over
Global Const MaxBowlers As Integer = 11
Global arrBowlers(1 To MaxBowlers, 1 To 4) As Integer
Global Totalruns As Integer
Global Notout As Integer
Global Overslasted As Integer
Global Target As Integer
Global TargetOffset As Integer
Global OversRemaining As Double
Global BallsPerOver As Integer
Global MaxBallsPerOver As Integer
Global CurrentDay As Integer
Global OversPreviousInnings As Integer
Global TotalOversAdjustment As Integer
'Global shtBallDetails1 As Worksheet
Global wkb As Excel.Workbook

Sub Buttonvalues(Enabled As Boolean)
    shtMainScoreboard.cmdB.Value = Enabled
    shtMainScoreboard.cmdLB.Value = Enabled
    shtMainScoreboard.cmdNB.Value = Enabled
    shtMainScoreboard.cmdW.Value = Enabled
    frmOther.chk1Short.Value = Enabled
    If Totalballs > 0 Then
        If shtData.Cells(Totalballs + 2, innings * 6 - 2) = "x" Then
            shtMainScoreboard.cmdUndo.Enabled = True
            Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = True
            If Wickets <> 10 Then shtMainScoreboard.cmdNewbatter.Visible = True Else shtMainScoreboard.cmdNewbatter.Visible = False
        Else
            shtMainScoreboard.cmdUndo.Enabled = True
            Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = True
            shtMainScoreboard.cmdNewbatter.Visible = False
        End If
    Else
        shtMainScoreboard.cmdUndo.Enabled = False
        Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = False
        shtMainScoreboard.cmdNewbatter.Visible = False
    End If
End Sub
Sub ToggleButtonVisible(Visible As Boolean)
    Static NewbatterState As Boolean
    shtMainScoreboard.cmdOther.Visible = Visible
    shtMainScoreboard.cmdB.Visible = Visible
    shtMainScoreboard.cmdLB.Visible = Visible
    shtMainScoreboard.cmdNB.Visible = Visible
    shtMainScoreboard.cmdW.Visible = Visible
    shtMainScoreboard.cmdX.Visible = Visible
    shtMainScoreboard.cmd0.Visible = Visible
    shtMainScoreboard.cmd1.Visible = Visible
    shtMainScoreboard.cmd2.Visible = Visible
    shtMainScoreboard.cmd3.Visible = Visible
    shtMainScoreboard.cmd4.Visible = Visible
    shtMainScoreboard.cmd6.Visible = Visible
    If Visible = False Then
        NewbatterState = shtMainScoreboard.cmdNewbatter.Visible
        shtMainScoreboard.cmdNewbatter.Visible = Visible
    Else
        shtMainScoreboard.cmdNewbatter.Visible = NewbatterState
    End If
    shtMainScoreboard.cmdNewgame.Visible = Visible
    shtMainScoreboard.cmdNewBowler.Visible = Visible
    shtMainScoreboard.cmdUndo.Visible = Visible
End Sub
    
Sub ButtonEnabled(Enabled As Boolean)
    With shtMainScoreboard
        .cmdOther.Enabled = Enabled
        .cmdB.Enabled = Enabled
        .cmdLB.Enabled = Enabled
        .cmdNB.Enabled = Enabled
        .cmdW.Enabled = Enabled
        .cmdX.Enabled = Enabled
        .cmd0.Enabled = Enabled
        .cmd1.Enabled = Enabled
        .cmd2.Enabled = Enabled
        .cmd3.Enabled = Enabled
        .cmd4.Enabled = Enabled
        .cmd6.Enabled = Enabled
        .cmdNewgame.Enabled = Enabled
        .cmdNewBowler.Enabled = Enabled
        If Totalballs > 0 Then
            .cmdUndo.Enabled = Enabled
            Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = Enabled
        Else
            .cmdUndo.Enabled = False
            Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = False
        End If
    End With
End Sub
'bowlers orders, overs bowled, runs conceded as of last over
Sub Wicket()
    frmWicket.Show
    ToggleAutoCalculate False
    'check that the user didnt select cancel
    If frmWicket.cmbHowout.ListIndex >= 0 Then
        'do this before we check if its the end of the over
        If frmWicket.cmbHowout.ListIndex < hoTIMEDOUT Then shtMainScoreboard.cmdNewBowler.Enabled = False
        shtMainScoreboard.Cells(1 + 21, 16) = maxWickets - Wickets
        'update the fall of wicket if it wasnt a retired hurt
        If frmWicket.cmbHowout.ListIndex < hoRETIRED Then _
            shtMainScoreboard.Cells(1 + 16 + Wickets, (2 - innings Mod 2) * 3 + 7) = Totalruns
        If Wickets <> maxWickets Then
            If Wickets + Retired >= maxWickets Then shtMainScoreboard.cmdNewgame.Caption = "End Innings"
            ResetPartnershipCombo
        End If
        'check if its the end of the innings
        If Wickets = maxWickets And BallNo < BallsPerOver Then
            DisplayPartnership Wickets
            CheckNewInnings
        End If
        OtherChecks
    End If
End Sub

Sub CheckNewInnings()
    Dim externalBoardEnabled As Boolean
    If (innings < maxInnings And GameType = TWOINNINGS) Or (innings = 1 And GameType <> TWOINNINGS) Then
        ToggleAutoCalculate True
        Dim Reply As Variant
        Reply = MsgBox("Are you sure it's the end of the innings?", vbYesNo, Title:=strSCOREBOOK_TITLE)
        If Reply = vbYes Then
            externalBoardEnabled = False
            If StrComp(ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value, "Yes", vbTextCompare) = 0 Then
                externalBoardEnabled = True
                'temp disable the external scoreboard while we sort out a new game
                ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "No"
            End If
            'These lines ensure that the bowlers and total balls faced are correct when a team is bowled out
            Totalruns = shtMainScoreboard.Cells(1 + 15, 2)
            UpdateTotals
            OutputBowlersOvers currBowlers(1)
            NewInnings
            If externalBoardEnabled = True Then
                're-enable the external scoreboard now we have finished
                ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "Yes"
            End If
        Else
            If Wickets = maxWickets Or (OverNo >= Totalovers And GameType <> TWOINNINGS) _
                Or (GameType = TWOINNINGS _
                And (innings <= 2 And MaxOvers1stInnings > 0 And OverNo >= MaxOvers1stInnings _
                Or maxDays * Totalovers <= OverNo + OversPreviousInnings)) _
                    Then ButtonEnabled False
            shtMainScoreboard.cmdNewgame.Caption = "End Innings"
            shtMainScoreboard.cmdNewgame.Enabled = True
            shtMainScoreboard.Activate
        End If
    Else
        bMatchEnded = EndMatch
    End If
End Sub

Sub OtherChecks()
    Totalruns = shtMainScoreboard.Cells(1 + 15, 2)
    UpdateTotals
    'update other bowler figures
    'check if its the end of the match then over
    If BallNo = BallsPerOver Then
        NewOver
    Else
        OutputBowlersOvers currBowlers(1)
        If ((GameType = TWOINNINGS And innings = 4) Or _
            (GameType <> TWOINNINGS And innings = 2)) And _
                GetRunsRequired(BattingT) <= 0 Then bMatchEnded = EndMatch
    End If
    Buttonvalues False
End Sub

Sub OutputBowlersOvers(currBowlers As Integer)
    If arrBowlers(currBowlers, 4) <= 0 And OtherBowlersBalls <= 0 Then
        shtMainScoreboard.Cells(1 + currBowlers + 20, 2) = arrBowlers(currBowlers, 2) + (BallNo - OtherBowlersBalls) / 10
    Else
        shtMainScoreboard.Cells(1 + currBowlers + 20, 2) = _
            arrBowlers(currBowlers, 2) + (BallNo - OtherBowlersBalls + arrBowlers(currBowlers, 4)) \ BallsPerOver _
            + ((BallNo - OtherBowlersBalls + arrBowlers(currBowlers, 4)) Mod BallsPerOver) / 10
    End If
End Sub

Sub EnterBowlersRunningTotal(currBowlers As Integer, Optional offset = 0)
    i = arrBowlers(currBowlers, 2) + (arrBowlers(currBowlers, 4) + BallsPerOver - 1) \ BallsPerOver
    If i <= maxOversBowlerDisplay Then
        'update the detailed scoreboard
        Dim RunningTotal As Range
        Set RunningTotal = shtDetails.Cells(currBowlers * 2 - 22 + DetailsInningsSize * innings, 3 + i + offset)
        RunningTotal = "'" & shtMainScoreboard.Cells(currBowlers + 21, 5) & " - " & shtMainScoreboard.Cells(currBowlers + 21, 4)
    End If
End Sub

Sub ClearBowlersRunningTotal(currBowlers As Integer)
    i = arrBowlers(currBowlers, 2) + (arrBowlers(currBowlers, 4) + OtherBowlersBalls + BallsPerOver - 1) \ BallsPerOver
    If i <= maxOversBowlerDisplay Then
        'update the detailed scoreboard
        shtDetails.Cells(currBowlers * 2 - 22 + DetailsInningsSize * innings, 3 + i) = ""
    End If
End Sub

Sub NewOver()
    'update the recent overs details
    CopyRecentOvers
    BallNo = 0
    OverNo = OverNo + 1
    
    OverScores(OverNo, innings, 2) = BallsBowled
    BallsBowled = 0
    shtMainScoreboard.Cells(1 + 15, 5) = OverNo
    'increment the number of overs bowled by the current bowler
    If OtherBowlersBalls = 0 Then arrBowlers(currBowlers(1), 2) = arrBowlers(currBowlers(1), 2) + 1
    'check if the bowler bowled a maiden
    'MUST be done before Otherbowlersballs is set to 0
    If OtherBowlersBalls = 0 And arrBowlers(currBowlers(1), 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) Then
        shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) + 1
    Else
        arrBowlers(currBowlers(1), 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4)
    End If
    'do the stuff for if a bowler changed in middle of over
    'THIS MUST COME AFTER THE PREVIOUS LINE
    If OtherBowlersBalls > 0 Then
        arrBowlers(currBowlers(1), 2) = arrBowlers(currBowlers(1), 2) + (arrBowlers(currBowlers(1), 4) + BallsPerOver - OtherBowlersBalls) \ BallsPerOver
        arrBowlers(currBowlers(1), 4) = (arrBowlers(currBowlers(1), 4) + BallsPerOver - OtherBowlersBalls) Mod BallsPerOver
        'this sets otherbowlerballs to
        Enterdata CBEOCODE
    End If
    OutputBowlersOvers currBowlers(1)
    EnterBowlersRunningTotal currBowlers(1)
    Comparison
    OverScores(OverNo, innings, 1) = Totalruns
    SetFormatRemainingBalls
    Graphdata
    'last five overs run rate
    If OverNo > 5 Then shtMainScoreboard.Cells(1 + 16, 16) = (OverScores(OverNo, innings, 1) - OverScores((OverNo - 5), innings, 1)) / 5
    If Wickets <> maxWickets Then SwapBatsmen
    If (OverNo = Totalovers And GameType <> TWOINNINGS) Or Wickets = maxWickets Then
        CheckNewInnings
    Else
        If OversRemaining = 0 And GameType = TWOINNINGS Then EndDay
        If Totalruns >= Target And innings = 2 And GameType <> TWOINNINGS Then
            bMatchEnded = EndMatch
            If bMatchEnded = True Then Exit Sub
        End If
        NewBowler
    End If
End Sub
Sub EndDay()
    CurrentDay = CurrentDay + 1
    If MaxOvers1stInnings = 0 Or innings > 2 Then _
        shtMainScoreboard.Cells(24, 16) = CurrentDay
End Sub
Sub SetFormatRemainingBalls()
    Dim remaining As Double
    'check if 10 overs remaining
    With shtMainScoreboard
        .Activate
        
    If Totalovers - OverNo <= 10 And .cmbOversRemaining.Visible = False Then
        .Cells(1 + 20, 15) = strBALLSREMAINING
        .Cells(1 + 20, 16).NumberFormat = "#"
        .Cells(1 + 20, 16) = ((Totalovers - (TotalOversAdjustment + OverNo + OversPreviousInnings) Mod Totalovers - 1) * BallsPerOver + (BallsPerOver - BallNo))
    Else
        If .cmbOversRemaining.Visible = False Then _
            .Cells(1 + 20, 15) = strOVERSREMAINING
        .Cells(1 + 20, 16).NumberFormat = "#0.0#"
        .Cells(1 + 20, 16) = Int(OversRemaining) + (OversRemaining - Int(OversRemaining)) * BallsPerOver / 10
    End If
    End With
End Sub

Sub Comparison()
    If OverNo <= maxOversFullVersion Then
        Dim firstCol
        firstCol = (2 - innings Mod 2) * 5 - 1
        shtBallDetails.Cells(3 + OverNo, firstCol) = Totalruns
        shtBallDetails.Cells(3 + OverNo, firstCol + 1) = "/"
        shtBallDetails.Cells(3 + OverNo, firstCol + 2) = Wickets
    End If
End Sub
Sub NewoverUndo(Optional nNewBowler As Integer = -1)
    ToggleAutoCalculate False
    BallNo = BallsPerOver
    BallsBowled = OverScores(OverNo, innings, 2) - 1
    OverScores(OverNo, innings, 2) = 0
    OverNo = OverNo - 1
    If OverNo < LastUpdatedGraphs Then LastUpdatedGraphs = OverNo
    shtMainScoreboard.Cells(1 + 15, 5) = OverNo
    'swap the current bowlers
    Dim Lastbowler As Integer
    Lastbowler = currBowlers(2)
    currBowlers(2) = currBowlers(1)
    If nNewBowler = -1 Then
        currBowlers(1) = shtData.Cells(Totalballs + 2, innings * 6) Mod 100
    Else
        currBowlers(1) = nNewBowler
    End If
    CurrBowlerformats Lastbowler
    ClearBowlersRunningTotal currBowlers(1)
    'check if the bowler bowled a maiden
    If OtherBowlersBalls = 0 And CheckMaiden(OverNo + 1, innings) = True Then
        shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) - 1
    Else
        'update the bowlers runs concede as of the previous over
        arrBowlers(currBowlers(1), 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 4) - OverScores(OverNo + 1, innings, 1)
        If OverNo > 0 Then arrBowlers(currBowlers(1), 3) = arrBowlers(currBowlers(1), 3) + OverScores(OverNo, innings, 1)
    End If
    'subtract one over from the bowler if bowled more than one over
    If OtherBowlersBalls = 0 Then arrBowlers(currBowlers(1), 2) = arrBowlers(currBowlers(1), 2) - 1
    'check if the bowler has not bowled any balls and must be deleted
    If arrBowlers(currBowlers(2), 2) <= 0 And arrBowlers(currBowlers(2), 4) = 0 And currBowlers(2) <> currBowlers(1) Then
        arrBowlers(currBowlers(2), 1) = -1
        shtMainScoreboard.Cells(1 + 20 + currBowlers(2), 1) = ""
        For j = 2 To 8
            If Not j = 6 Then shtMainScoreboard.Cells(1 + 20 + currBowlers(2), j) = ""
        Next j
        Lastbowler = currBowlers(2)
        currBowlers(2) = currBowlers(1)
        CurrBowlerformats Lastbowler
        currBowlers(2) = Lastbowler
    End If
    shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 2) = arrBowlers(currBowlers(1), 2) + BallNo / 10
    If Wickets <> maxWickets Then SwapBatsmen
    'Comparison
    OverScores(OverNo + 1, innings, 1) = 0
    'check if 10 overs remaining
    SetFormatRemainingBalls
    'display last five overs run rate if we are past the fifth over
    If OverNo > 5 Then
        shtMainScoreboard.Cells(1 + 16, 16) = (OverScores(OverNo, innings, 1) - OverScores(OverNo - 5, innings, 1)) / 5
    Else
        shtMainScoreboard.Cells(1 + 16, 16) = ""
    End If
    UndoRecentOvers
End Sub
Function CheckMaiden(nOverNo As Integer, nInnings As Integer) As Boolean
    Dim nLastBallNo As Integer, nFirstBallNo As Integer, nFirstBallRow As Integer, nLastBallRow As Integer
    nLastBallNo = nOverNo * BallsPerOver
    nFirstBallNo = (nOverNo - 1) * BallsPerOver + 1
    nFirstBallRow = 3
    'need to account for an extra being bowled at the end of the over
    'and an extra ball being bowled in an over
    If nFirstBallNo > 1 Then
        While shtData.Cells(nFirstBallRow, nInnings * 6 - 4) < nFirstBallNo - 1 _
                Or shtData.Cells(nFirstBallRow + 1, nInnings * 6 - 4) < nFirstBallNo - 1
            nFirstBallRow = nFirstBallRow + 1
        Wend
        nFirstBallRow = nFirstBallRow + 1
    End If
    nLastBallRow = nFirstBallRow
    While shtData.Cells(nLastBallRow, nInnings * 6 - 4) < nLastBallNo _
            Or shtData.Cells(nLastBallRow + 1, nInnings * 6 - 4) < nLastBallNo _
                And shtData.Cells(nLastBallRow + 1, nInnings * 6 - 4) <> ""
        nLastBallRow = nLastBallRow + 1
    Wend
    Dim nRow As Integer, nRuns As Integer
    For nRow = nFirstBallRow To nLastBallRow
        If shtData.Cells(nRow, nInnings * 6 - 2) = "nb" Or shtData.Cells(nRow, nInnings * 6 - 2) = "w" Then
            CheckMaiden = False
            Exit Function
        ElseIf shtData.Cells(nRow, nInnings * 6 - 3) > 0 Then
            If shtData.Cells(nRow, nInnings * 6 - 2) = "r" Then
                CheckMaiden = False
                Exit Function
            ElseIf shtData.Cells(nRow, nInnings * 6 - 2) = "x" Then
                If (shtData.Cells(nRow, nInnings * 6 - 1) \ 10) Mod 10 = eRunType.rtRuns Then
                    CheckMaiden = False
                    Exit Function
                End If
            End If
        End If
    Next nRow
    CheckMaiden = True
End Function

Sub NotOutBatsmen()
    'make sure you check that current batter is an actual batter ie the side wasnt all out
    For i = 1 To 2
        If currBatters(i) <= 10 Then If shtMainScoreboard.Cells(1 + 2 + currBatters(i), 15) = "" Then shtMainScoreboard.Cells(1 + 2 + currBatters(i), 15) = "Not Out"
        If currBatters(i) <= 10 Then If shtMainScoreboard.Cells(1 + 2 + currBatters(i), 15) = strRETIRED Then shtMainScoreboard.Cells(1 + 2 + currBatters(i), 15) = "Not Out"
    Next i
End Sub
Sub ChangeBallDetailsFormulas(col As Integer, innings As Integer)
    Dim row As Integer
    row = 4
    While shtBallDetails.Cells(row, col) <> ""
        shtBallDetails.Cells(row, col).NumberFormat = "General"
        shtBallDetails.Cells(row, col).Formula = "='Innings " & innings & "'!A" & (Right(shtBallDetails.Cells(row, col).Formula, Len(shtBallDetails.Cells(row, col).Formula) - 20) - 1)
        row = row + 1
    Wend
End Sub

Sub NewInnings()
    Dim externalBoardEnabled As Boolean
    InningsFinishedMidOver_Updates
    ToggleAutoCalculate False
    Dim j As Integer
    ActiveWorkbook.Unprotect "laverwood"
    If (innings < maxInnings And GameType = TWOINNINGS And Not (GetRunsRequired(BowlingT) <= 0 And innings = 3)) _
        Or (innings = 1 And GameType <> TWOINNINGS) Then
        NotOutBatsmen
        'change the caption so that the button links to the previous innings
        If bRelease Then
            shtMainScoreboard.cmdNewgame.Caption = "Innings " & innings
            Application.CommandBars("Worksheet Menu Bar").Controls("&File").Controls("&New Game...").Enabled = False
        End If
        ButtonEnabled False
        'copy the innings one data to the other sheet
        If innings = 1 Then
            If bRelease Then Application.CommandBars("Worksheet menu bar").Controls("&Edit").Controls("&Target Runs...").Enabled = True
            CopyInningsData shtInnings1
            shtInnings1.Cells(16, 1) = strSHTINNINGSTITLE & "Innings 1"
            ThisWorkbook.Worksheets("Innings 1").Visible = True
        Else
            NewInningsSheet
        End If
        'complete the graph for team one
        'do all the stuff to be done before moving into innings 3
        If innings Mod 2 = 1 Then
            ChangeBallDetailsFormulas 2, innings
        Else
            ChangeBallDetailsFormulas 7, innings
        End If
        
        If innings = 2 Then
            'do the over details copying FIRST
            'hide the columns in the over details sheet if they havent been already
            If GameType = TWOINNINGS And MaxOvers1stInnings <> 0 Then
                For i = 15 To 18
                    shtOverDetails.COLUMNS(i).Hidden = True
                Next i
            End If
            ActiveWorkbook.Unprotect "laverwood"
            'copy the over details stuff
            shtOverDetails.Range("B4:N" & maxOversFullVersion + 3).Copy
            shtOverDetails1.Visible = xlSheetVisible
            shtOverDetails1.Activate
            HideRows shtOverDetails1
            SetRowVisibilities shtOverDetails1
            shtOverDetails1.Cells(1, 1).Activate
            shtOverDetails.name = "Over Details 2"
            'copy the BallDetails sheet

            shtBallDetails.Range("B4:K" & maxOversFullVersion + 3).Copy
            shtBallDetails.name = "Ball Details 2"
            With shtBallDetails1
                .Visible = xlSheetVisible
                .Activate
                .Range("B4:K" & maxOversFullVersion + 3).Activate
                .Paste
                HideRows shtBallDetails1
                SetRowVisibilities shtBallDetails1
                .Cells(1, 1).Activate
            End With
            'copy the graphs
            shtGraphs.Unprotect
            shtGraphs.Visible = xlSheetVisible
            shtGraphs.Activate
            chtWorm.CopyPicture
            shtGraphs.Cells(2, 1).Activate
            shtGraphs.Paste
            chtRunRate.CopyPicture
            shtGraphs.Cells(39, 1).Activate
            shtGraphs.Paste
            chtSkyScraper.CopyPicture
            shtGraphs.Cells(79, 1).Activate
            shtGraphs.Paste
            chtSS1.CopyPicture
            shtGraphs.Cells(116, 1).Activate
            shtGraphs.Paste
            chtSS2.CopyPicture
            shtGraphs.Cells(153, 1).Activate
            shtGraphs.Paste
            shtGraphs.Cells(1, 1).Activate
            Dim Grph As Shape
            For Each Grph In shtGraphs.Shapes
                Grph.Line.ForeColor.RGB = RGB(0, 0, 0)
                Grph.Line.Visible = msoTrue
                Grph.Line.Weight = 3
                Grph.Width = shtGraphs.Shapes(2).Width
            Next Grph
            shtGraphs.Protect
            'now the graphs have been copied clear the ball details
            ClearBallDetails
            'hide the 2nd innings graphs
            chtSS2.Visible = xlSheetHidden
            chtSkyScraper.Visible = xlSheetHidden
            'if we're moving into the third innings then reinitialize the graphs
            bGraphsInitialized = False
            
            shtMainScoreboard.cmbOversRemaining.Visible = False
            'check if were only half way cause its two innings!
            If GameType = TWOINNINGS And innings = 2 Then
                If shtMainScoreboard.cmbOversRemaining.Text = strOVERSREMAINING1ST Then
                    'change it to be for the overs in the day
                    If shtOverDetails.Cells(4, 17).Formula = "=IF(I4="","",OversToBalls(MaxOversFirstInnings()-A4))" Then
                        shtOverDetails.Cells(4, 17) = "=IF(I4="","",OversToBalls('Main Scoreboard'!$W$32-A4))"
                        shtOverDetails.Range(shtOverDetails.Cells(4, 17), shtOverDetails.Cells(4, maxOversFullVersion + 3)).FillDown
                    End If
                End If
            End If
            shtMainScoreboard.cmbOversRemaining.Text = strOVERSREMAININGDAY
            UpdateTotals
        End If
        'update team totals
        Overslasted = Round(OverNo + 0.49 + BallNo / 6)
        TeamTotals(innings, 1) = BattingT
        TeamTotals(innings, 2) = Totalruns
        TeamTotals(innings, 3) = Overslasted
        'resetvariables
        Target = Totalruns + 1
        If GameType <> TWOINNINGS Then
            OversRemaining = Totalovers
        Else
            OversPreviousInnings = Round(OversPreviousInnings + Overslasted)
            OversRemaining = Int(OversRemaining)
        End If
        'check follow on
        If innings = 2 And GameType = TWOINNINGS And _
            TeamTotals(1, 2) - TeamTotals(2, 2) > FollowOn Then
            If (MsgBox("Was the follow on enforced?", vbYesNo, Title:=strSCOREBOOK_TITLE) = vbYes) Then
                externalBoardEnabled = False
                If StrComp(ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value, "Yes", vbTextCompare) = 0 Then
                    externalBoardEnabled = True
                    'temp disable the external scoreboard while we sort out a new game
                    ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "No"
                End If
                'switch the teams but they will be switched back bellow
                Dim Temp As Integer
                Temp = BowlingT
                BowlingT = BattingT
                BattingT = Temp
                'change the order of names in the sheets, this should change the graphs
                shtMainScoreboard.Cells(1 + 1, 1) = TeamNames(2)
                shtMainScoreboard.Cells(1 + 1, 4) = TeamNames(1)
                shtMainScoreboard.Cells(1 + 16, 10) = TeamInitials(2)
                shtMainScoreboard.Cells(1 + 16, 13) = TeamInitials(1)
                'swap the color of the fall of wickets
                SetColours True
                If externalBoardEnabled = True Then
                    're-enable the external scoreboard now we have finished
                    ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "Yes"
                End If
            Else
                SwapInningsTeamColours
            End If
        Else
            SwapInningsTeamColours
        End If
        'switch the batting and bowling teams
        Temp = BowlingT
        BowlingT = BattingT
        BattingT = Temp
        
        innings = innings + 1
        If innings = 1 Then
            shtDetails.PageSetup.PrintArea = "a2:m36"
        ElseIf innings = 2 Then
            shtDetails.PageSetup.PrintArea = "a2:m36,a38:m72"
        ElseIf innings = 3 Then
            shtDetails.PageSetup.PrintArea = "a2:m36,a38:m72,a74:m108"
        ElseIf innings = 4 Then
            shtDetails.PageSetup.PrintArea = "a2:m36,a38:m72,a74:m108,a110:m144"
        End If
        shtDetails.DisplayPageBreaks = False
        'change the skyscraper graph titles
        If innings Mod 2 = 1 Then
            chtSS1.ChartTitle.Caption = "Innings " & innings & " - " & TeamNames(BattingT)
        Else
            chtSS2.ChartTitle.Caption = "Innings " & innings & " - " & TeamNames(BattingT)
        End If
        'set up the detailed scoreboard
        'We linke to the scorebook in the new innings sheet function
        SetFormulasDetailedScoresheet
        ResetDetailedScoreboard innings
        'copy template retaining fow data
        'innings must be set to 2 before copyformat is called
        'otherwise fow will not be retained
        Copyformat
        'CopyFallOfWickets
        InitializeCurrentBs
        For i = 1 To 11
                arrBowlers(i, 1) = -1
                arrBowlers(i, 2) = 0
                arrBowlers(i, 3) = 0
                arrBowlers(i, 4) = 0
        Next i
        BallNo = 0
        BallsBowled = 0
        OverNo = 0
        Wickets = 0
        Retired = 0
        Totalruns = 0
        Totalballs = 0
        'innitialize the graph for team two
        Graphdata
        shtSavedData.Cells(100, 1) = 2
        'these must be unloaded before a new batter is selected
        ResetfrmNewbowler
        ResetfrmNewbatter
        Unload frmWicket
        'enter batters names on score sheet
        SetFormatRemainingBalls
        Enternames
        'enter how much the team is chasing
        'make sure this is done after format is copied
        If innings = 2 Then
            shtMainScoreboard.Cells(1 + 17, 16) = Target ' how much team2 is chasing
        Else
            shtMainScoreboard.Cells(1 + 17, 16) = ""
        End If
        'enter data like run rate required m
        UpdateTotals
        shtMainScoreboard.Activate
        GetOpeningBatsmen
        NewBowler
        ToggleAutoCalculate False
        ResetPartnershipCombo
        If innings Mod 2 = 0 Then UnhideInningsTwoSheets
        ToggleAutoCalculate True
        'protect sheet1 if it was protected at the start
        If innings > 1 Then shtMainScoreboard.cmdNewbatter.Visible = True
    Else
        'this will happen when a side was bowled out
        bMatchEnded = EndMatch
        If bMatchEnded = True Then
            If bRelease = True Then ActiveWorkbook.Protect "laverwood"
            Exit Sub
        End If
    End If
    ButtonEnabled True
    ActiveWorkbook.Protect "laverwood"
    shtMainScoreboard.Range("B16").Activate
End Sub
Function EndMatch() As Boolean
    Dim externalBoardEnabled As Boolean
    EndMatch = False
    NotOutBatsmen
    'if the button is not NewInnings
    If shtMainScoreboard.cmdNewgame.Caption <> "End Innings" Then
        ToggleAutoCalculate True
        Dim message As String
        message = "Are you sure that is the end of the match!"
        If MsgBox(message, vbYesNo, strSCOREBOOK_TITLE) = vbNo Then
            If Wickets = maxWickets Or (OverNo >= Totalovers And GameType <> TWOINNINGS) _
                        Then ButtonEnabled False
                shtMainScoreboard.cmdNewgame.Caption = "End Innings"
                shtMainScoreboard.cmdNewgame.Enabled = True
                shtMainScoreboard.Activate
            Exit Function
        Else
            externalBoardEnabled = False
            If StrComp(ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value, "Yes", vbTextCompare) = 0 Then
                externalBoardEnabled = True
                'temp disable the external scoreboard while we sort out a new game
                ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "No"
            End If
            'These lines ensure that the bowlers and total balls faced are correct when a team is bowled out
            Totalruns = shtMainScoreboard.Cells(1 + 15, 2)
            UpdateTotals
            OutputBowlersOvers currBowlers(1)
            shtMainScoreboard.cmdNewgame.Caption = "New Game"
            shtMainScoreboard.cmdNewgame.Enabled = True
            If externalBoardEnabled = True Then
                're-enable the external scoreboard now we have finished
                ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "Yes"
            End If
        End If
    End If
    ToggleAutoCalculate False
    InningsFinishedMidOver_Updates
    'copy the info to the second innings scoreboard
    NewInningsSheet
    ButtonEnabled False
    shtMainScoreboard.cmdUndo.Enabled = False
    shtMainScoreboard.cmdNewgame.Enabled = True
    'If bRelease = True Then shtMainScoreboard.cmdNewgame.Caption = "Innings " & innings - 1 Else shtMainScoreboard.cmdNewgame.Caption = "New Game"
    shtMainScoreboard.cmdNewbatter.Visible = False
    Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = False
    Totalballs = 0 'this makes sure the undo is disabled
    innings = innings + 1 'Why did I do this! I SHOULD HAVE PUT A REASON HERE!!
    EndMatch = True 'Should have used a boolean flag like this instead?
    shtMainScoreboard.cmbPartnership.Enabled = False 'because innings has changed program crashes if this is used without adjusting code
End Function
Sub InningsFinishedMidOver_Updates()
    If BallNo < BallsPerOver And BallNo > 0 Then
        OverNo = OverNo + 1
        Comparison
        If GameType <> TWOINNINGS And innings > 1 Then shtOverDetails.Cells(3 + OverNo, 17) = shtOverDetails.Cells(3 + OverNo, 17) + BallsPerOver - BallNo
        EnterBowlersRunningTotal currBowlers(1), 1
        Graphdata
        OverNo = OverNo - 1
    End If
End Sub


Function GetRunsRequired(BattingTeam As Integer)
    Dim RunsRequired
    For i = 1 To maxInnings
        If TeamTotals(i, 1) = BattingTeam Then
            RunsRequired = RunsRequired - TeamTotals(i, 2)
        Else
            RunsRequired = RunsRequired + TeamTotals(i, 2)
        End If
    Next i
    If BattingT = BattingTeam Then
        RunsRequired = RunsRequired - Totalruns + 1
    Else
        RunsRequired = RunsRequired + Totalruns + 1
    End If
    GetRunsRequired = RunsRequired + TargetOffset
End Function
Sub UpdateTotals()
    Dim RunsRequired As Integer
    Dim RunRateRequired As Double
    Dim oldOversRemaining As Double
    RunsRequired = GetRunsRequired(BattingT)
    If GameType <> TWOINNINGS Then
        OversRemaining = ((Totalovers - OverNo - 1) + (BallsPerOver - BallNo) / BallsPerOver)
    Else
        oldOversRemaining = OversRemaining
        OversRemaining = ((Totalovers - (TotalOversAdjustment + OverNo + OversPreviousInnings) Mod Totalovers - 1) + (BallsPerOver - BallNo) / BallsPerOver)
        'this line checks if we need to adjust the Current day
        If (oldOversRemaining = Totalovers Or oldOversRemaining = 0) And OversRemaining = 1 / BallsPerOver Then CurrentDay = CurrentDay - 1
        'Then check if we are doing overs left in the first innings and update overs remaining
        If innings <= 2 And MaxOvers1stInnings > 0 And shtMainScoreboard.cmbOversRemaining.Text = strOVERSREMAINING1ST Then _
            OversRemaining = ((MaxOvers1stInnings - OverNo - 1) + (BallsPerOver - BallNo) / BallsPerOver)
    End If
    'can not have negative overs remaining
    If OversRemaining < 0 Then OversRemaining = 0
    If BallNo = BallsPerOver Then
        shtMainScoreboard.Cells(1 + 15, 5) = OverNo + 1
    Else
        shtMainScoreboard.Cells(1 + 15, 5) = OverNo + BallNo / 10
    End If
    SetFormatRemainingBalls
    If innings > 1 Then
        If RunsRequired < 0 Then
            shtMainScoreboard.Cells(1 + 19, 15) = strLEADS
            shtMainScoreboard.Cells(1 + 19, 16) = Abs(RunsRequired) + 1
        Else
            If shtMainScoreboard.Cells(1 + 17, 16) = "" Then shtMainScoreboard.Cells(1 + 17, 16) = Abs(RunsRequired) + Totalruns
            shtMainScoreboard.Cells(1 + 19, 15) = strTRAILS
            shtMainScoreboard.Cells(1 + 19, 16) = Abs(RunsRequired)
        End If
        If OversRemaining > 0 Then
            RunRateRequired = RunsRequired / OversRemaining
            If RunRateRequired < 0 Then
                RunRateRequired = 0
                shtMainScoreboard.Cells(1 + 18, 16) = ""
            Else
                shtMainScoreboard.Cells(1 + 18, 16) = RunRateRequired
            End If
        Else
            shtMainScoreboard.Cells(1 + 18, 16) = ""
        End If
    End If
    If GameType <> TWOINNINGS Or (innings <= 2 And MaxOvers1stInnings > 0) Then
        For i = 4 To 11
            shtMainScoreboard.Cells(1 + i + 20, 16) = Totalruns + i * OversRemaining
        Next i
        If shtMainScoreboard.Cells(16, 16) <> "" Then _
            shtMainScoreboard.Cells(24, 16) = Totalruns + shtMainScoreboard.Cells(16, 16) * OversRemaining
        If shtMainScoreboard.Cells(23, 15) = strMatchTotals Then
            shtMainScoreboard.Cells(23, 15) = "Predicted Totals"
            shtMainScoreboard.Cells(24, 15) = "Current run rate"
            shtMainScoreboard.Cells(25, 15) = "4 runs per over"
            shtMainScoreboard.Cells(25, 16).NumberFormat = "#"
            shtMainScoreboard.Cells(26, 15) = "5 runs per over"
            shtMainScoreboard.Cells(26, 16).NumberFormat = "#"
            shtMainScoreboard.Cells(27, 15) = "6 runs per over"
            shtMainScoreboard.Cells(28, 15) = "7 runs per over"
            shtMainScoreboard.Cells(29, 15) = "8 runs per over"
            shtMainScoreboard.Cells(30, 15) = "9 runs per over"
            shtMainScoreboard.Cells(31, 15) = "10 runs per over"
            shtMainScoreboard.Cells(32, 15) = "11 runs per over"
        End If
    Else
        If shtMainScoreboard.Cells(23, 15) = "Predicted Totals" Then
            shtMainScoreboard.Cells(23, 15) = strMatchTotals
            shtMainScoreboard.Cells(24, 15) = "Day"
            shtMainScoreboard.Cells(25, 15) = "Overs Bowled"
            shtMainScoreboard.Cells(25, 16).NumberFormat = "#0.0#"
            shtMainScoreboard.Cells(26, 15) = "Overs Remaining"
            shtMainScoreboard.Cells(26, 16).NumberFormat = "#0.0#"
            shtMainScoreboard.Cells(27, 15) = "1st Innings"
            shtMainScoreboard.Cells(28, 15) = "2nd Innings"
            shtMainScoreboard.Cells(29, 15) = "Lead"
            shtMainScoreboard.Cells(30, 15) = "3rd Innings"
            shtMainScoreboard.Cells(31, 15) = "4th Innings"
            shtMainScoreboard.Cells(32, 15) = ""
        End If
        shtMainScoreboard.Cells(24, 16) = CurrentDay
        Dim TotalOversBowled As Double
        TotalOversBowled = OversPreviousInnings + OverNo + Int(BallNo / BallsPerOver) + (BallNo Mod BallsPerOver) / 10
        shtMainScoreboard.Cells(25, 16) = TotalOversBowled
        If maxDays * Totalovers - TotalOversAdjustment < TotalOversBowled Then
            shtMainScoreboard.Cells(26, 16) = 0
        ElseIf BallNo <> 0 Then
            shtMainScoreboard.Cells(26, 16) = maxDays * Totalovers - TotalOversAdjustment - OversPreviousInnings - OverNo - 1 + (BallsPerOver - BallNo) / 10
        Else
            shtMainScoreboard.Cells(26, 16) = maxDays * Totalovers - TotalOversAdjustment - TotalOversBowled
        End If
        shtMainScoreboard.Cells(27, 16) = TeamTotals(1, 2)
        shtMainScoreboard.Cells(28, 16) = TeamTotals(2, 2)
        shtMainScoreboard.Cells(29, 16) = Abs(TeamTotals(1, 2) - TeamTotals(2, 2))
        shtMainScoreboard.Cells(30, 16) = TeamTotals(3, 2)
        shtMainScoreboard.Cells(31, 16) = TeamTotals(4, 2)
        shtMainScoreboard.Cells(32, 16) = ""
    End If
End Sub
Sub SwapBatsmen()
    i = currBatters(1)
    currBatters(1) = currBatters(2)
    currBatters(2) = i
    CurrBatterFormats
End Sub
Sub SwapBowlers()
    i = currBowlers(1)
    currBowlers(1) = currBowlers(2)
    currBowlers(2) = i
    'CurrBowlerformats
End Sub
Sub ResetDetailedScoreboard(innings As Integer)
    shtDetails.Activate
    Range("A" & DetailsInningsSize * (innings - 1) + 1).Activate
    ActiveCell.Range("D3:D13") = ""
    ActiveCell.Range("D3:D13").NumberFormat = "@" 'Set the format to text until we reach a certain ball number
    ActiveCell.Range("D15:CY" & DetailsInningsSize) = ""
    
    ActiveCell.Range("B3").Formula = "='Main Scoreboard'!B4"
    ActiveCell.Range("C3").Formula = "='Main Scoreboard'!C4"
    ActiveCell.Range("B3:C13").NumberFormat = "General"
    ActiveCell.Range("B3:C13").FillDown
    
    For i = 1 To maxWickets + 1
        ActiveCell.Cells(i + 2, 1).NumberFormat = "General"
        ActiveCell.Cells(i + 2, 1).Formula = "='Main Scoreboard'!A" & i + 3
        ActiveCell.Cells(13 + 2 * i, 1).NumberFormat = "General"
        ActiveCell.Cells(13 + 2 * i, 1).Formula = "=if('Main Scoreboard'!A" & 21 + i & "="""","""",'Main Scoreboard'!A" & 21 + i & ")"
        ActiveCell.Cells(13 + 2 * i, 2).NumberFormat = "General"
        ActiveCell.Cells(13 + 2 * i, 2).Formula = "=if('Main Scoreboard'!B" & 21 + i & "="""","""",'Main Scoreboard'!B" & 21 + i & ")"
        ActiveCell.Cells(13 + 2 * i, 3).NumberFormat = "General"
        ActiveCell.Cells(13 + 2 * i, 3).Formula = "=if('Main Scoreboard'!D" & 21 + i & "="""","""",'Main Scoreboard'!D" & 21 + i & ")"
    Next i
End Sub

Sub ClearDetailedScoreboard(innings As Integer)
    shtDetails.Activate
    Range("A" & DetailsInningsSize * (innings - 1) + 1).Activate
    ActiveCell.Range("A3:D13") = ""
    ActiveCell.Range("A15:CY" & DetailsInningsSize) = ""
End Sub

Sub FixDetailedScoreboard(innings As Integer)
    shtDetails.Activate
    Range("A" & DetailsInningsSize * (innings - 1) + 1).Activate
    ActiveCell.Range("A3:CY" & DetailsInningsSize).Copy
    ActiveCell.Range("A3:CY" & DetailsInningsSize).PasteSpecial (xlPasteValues)
End Sub

Sub NewGame()
    ToggleAutoCalculate False
    Dim j As Integer
    ActiveWorkbook.Unprotect "laverwood"
    shtBallDetails.name = "Ball Details"
    shtBallDetails1.Visible = xlSheetHidden
    shtOverDetails.name = "Over Details"
    shtOverDetails1.Visible = xlSheetHidden
    HideInningsTwoSheets
    Initializevar   'initialize variables
    LoadColourIndexArray
    SetColours      'Sets the colours ready for first innings
    fieldersPenaltyRuns = 0 'clear penalty runs pending
    Copyformat      'copy formating from template
    Enternames      'Enter batters names and team names
    Constantnames   'Enter date etc
    'set up the detailed scoreboard
    For i = 2 To 4
        ClearDetailedScoreboard (i)
    Next i
    ResetDetailedScoreboard (1)
    
    'clear the graph worksheet
    Dim Graph As Shape
    shtGraphs.Unprotect
    For Each Graph In shtGraphs.Shapes
        Graph.Delete
    Next Graph
    shtGraphs.Protect
    
    With chtSS1
        .ChartTitle.Caption = "Innings 1 - " & TeamNames(BattingT)
    End With
    
    shtMainScoreboard.Activate
    ResetfrmNewbowler
    ResetfrmNewbatter
    Unload frmWicket
    Cleardata       'clear data sheets
    Graphdata       'Just added
    shtMainScoreboard.Activate
    'get opening batsmen
    GetOpeningBatsmen
    NewBowler
    ResetPartnershipCombo
    shtMainScoreboard.cmbPartnership.Enabled = True
    
    If GameType = TWOINNINGS And MaxOvers1stInnings > 0 Then
        With shtMainScoreboard.cmbOversRemaining
            .Enabled = True
            .Text = strOVERSREMAININGDAY
            .Visible = True
        End With
    Else
        shtMainScoreboard.cmbOversRemaining.Visible = False
    End If
    If GameType = TWOINNINGS And MaxOvers1stInnings = 0 Then
        For i = 15 To 18
            shtOverDetails.COLUMNS(i).Hidden = True
        Next i
    Else
        For i = 15 To 18
            shtOverDetails.COLUMNS(i).Hidden = False
        Next i
    End If

    With shtDetails
        If GameType = TWOINNINGS Then
            .Range(.COLUMNS(4), .COLUMNS(maxOversBowlerDisplay + 3)).Hidden = False
            .Range(.Rows(73), .Rows(144)).Hidden = False
        Else
            .Range(.Rows(73), .Rows(144)).Hidden = True
            .Range(.COLUMNS(4), .COLUMNS(Totalovers / 5 + 13)).Hidden = False
            .Range(.COLUMNS(Totalovers / 5 + 14), .COLUMNS(maxOversBowlerDisplay + 3)).Hidden = True
        End If
    End With
    
    ButtonEnabled True
    shtMainScoreboard.Range("B16").Activate
    ToggleAutoCalculate True
End Sub

Sub SetRowVisibilities(ByRef sht As Worksheet)
    With sht
        .Range(.Rows(4), .Rows(OversVisible + 3)).Hidden = False
    End With
End Sub

Sub HideRows(ByRef sht As Worksheet)
    With sht
        .Range(.Rows(3 + MinOversVisible), .Rows(maxOversFullVersion + 3)).Hidden = True
    End With
End Sub


Sub NewBowler()
    Dim Lastbowler As Integer
    'swap current bowlers
    Lastbowler = currBowlers(2)
    currBowlers(2) = currBowlers(1)
    currBowlers(1) = Lastbowler
    shtMainScoreboard.Activate
    frmNewBowler.Show
    ToggleAutoCalculate False
    If frmNewBowler.cmbBowler.ListIndex < 0 Then
        'swap current bowlers
        Lastbowler = currBowlers(2)
        currBowlers(2) = currBowlers(1)
        currBowlers(1) = Lastbowler
    Else
        'check if its a new bowler and make bowler, current bowler
        For i = 1 To 11
            If arrBowlers(i, 1) = frmNewBowler.cmbBowler.ListIndex + 1 Then
                currBowlers(1) = i
                Exit For
            ElseIf arrBowlers(i, 1) < 0 Then
                currBowlers(1) = i
                arrBowlers(i, 1) = frmNewBowler.cmbBowler.ListIndex + 1
                shtMainScoreboard.Cells(1 + 20 + i, 1) = BatterNames(BowlingT, arrBowlers(i, 1))
                Dim j As Integer
                For j = 2 To 8
                    If Not j = 6 Then shtMainScoreboard.Cells(1 + 20 + i, j) = 0
                Next j
                Exit For
            End If
        Next i
        CurrBowlerformats (Lastbowler)
    End If
End Sub
Sub CurrBowlerformats(Lastbowler As Integer)
    Dim i As Integer
    For i = 1 To 8
        If Not Lastbowler = currBowlers(1) And Not Lastbowler = currBowlers(2) Then
            With shtMainScoreboard.Cells(1 + 20 + Lastbowler, i)
                .Font.Bold = False
                .Interior.ColorIndex = arrColourIndex(BowlingT, Light)
                .Font.ColorIndex = arrColourIndex(Borders, TitleBar)
            End With
        End If
        If Not currBowlers(2) = currBowlers(1) Then
            With shtMainScoreboard.Cells(1 + 20 + currBowlers(2), i)
                .Font.Bold = True
                .Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
                .Font.ColorIndex = arrColourIndex(Fonts, NonStriker)
            End With
        End If
        With shtMainScoreboard.Cells(1 + 20 + currBowlers(1), i)
            .Font.Bold = True
            .Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
            .Font.ColorIndex = arrColourIndex(Fonts, Striker)
        End With
    Next i
End Sub
Sub Cleardata()
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim startcolumn As Integer
    Dim endcolumn As Integer
    j = 3
    For k = 1 To innings
        startcolumn = innings * 6 - 5
        endcolumn = innings * 6
        Do Until (shtData.Cells(j, startcolumn) = "")
            For i = startcolumn To endcolumn
                shtData.Cells(j, i) = ""
            Next i
            j = j + 1
        Loop
    Next k
    ClearBallDetails
End Sub
Sub ClearBallDetails()
    'clear the over details sheet
    Const MAXOVERSONSHEETS As Integer = maxOversFullVersion
    For i = 1 To MAXOVERSONSHEETS
        For j = 2 To 6
            If shtBallDetails.Cells(i + 3, j) = "" Then i = MAXOVERSONSHEETS
            'check if we have deleted all we need to delete
            shtBallDetails.Cells(i + 3, j) = ""
        Next j
    Next i
    For i = 1 To MAXOVERSONSHEETS
        For j = 7 To 11
            If shtBallDetails.Cells(i + 3, j) = "" Then i = MAXOVERSONSHEETS
            'check if we have deleted all we need to delete
            shtBallDetails.Cells(i + 3, j) = ""
        Next j
    Next i
    OversVisible = MinOversVisible
    HideRows shtBallDetails
    HideRows shtOverDetails
    SetRowVisibilities shtBallDetails
    SetRowVisibilities shtOverDetails
End Sub
'this function is called when a wicket falls to replace a new batter
Sub NewBatter(Batter As Integer)
    Dim i As Integer
    Dim j As Integer
    frmNewBatter.NewBatter = Batter
    frmNewBatter.Show
    ToggleAutoCalculate False
    Batter = frmNewBatter.NewBatter
    CurrBatterFormats
End Sub
Sub CurrBatterFormats()
    'do the formats for the striker
    For i = 1 To 2
        If isOldExcelVersion Then shtOverDetails.Activate
        With shtMainScoreboard.Range(shtMainScoreboard.Cells(3 + currBatters(i), 1), shtMainScoreboard.Cells(3 + currBatters(i), 15))
            .Font.Bold = True
            .Interior.ColorIndex = arrColourIndex(BattingT, Medium)
            If i = 1 Then .Font.ColorIndex = arrColourIndex(Fonts, Striker) _
                Else .Font.ColorIndex = arrColourIndex(Fonts, NonStriker)
        End With
        If shtMainScoreboard.Cells(3 + currBatters(i), 7) = "" Then DoZeros currBatters(i)
    Next i

End Sub
Sub Oldbatterformats(Out As Integer)
    'do the stuff
    'get rid of the zeros if a new batter is being replaced
    If shtMainScoreboard.Cells(1 + Out + 2, 15) = "" Then UndoZeros Out
    Dim j As Integer
    Dim i As Integer
    For j = 1 To 15
            With shtMainScoreboard.Cells(1 + 2 + Out, j)
                .Font.Bold = False
                .Interior.ColorIndex = arrColourIndex(BattingT, Light)
                .Font.ColorIndex = arrColourIndex(Borders, TitleBar)
            End With
    Next j

End Sub
Sub UndoZeros(Batter As Integer)
    Dim i As Integer
    For i = 1 To 7
        If shtMainScoreboard.Cells(1 + Batter + 2, 6 + i) = 0 Then shtMainScoreboard.Cells(1 + Batter + 2, 6 + i) = ""
    Next i
End Sub
Sub DoZeros(Batter As Integer)
    For i = 1 To 7
        If shtMainScoreboard.Cells(1 + Batter + 2, 6 + i) = "" Then shtMainScoreboard.Cells(1 + Batter + 2, 6 + i) = 0
    Next i
End Sub

Sub Constantnames()
    'Enter data on page which wont change in the second innings
    SetFormatRemainingBalls
    shtMainScoreboard.Cells(1 + 1, 1) = TeamNames(BattingT)
    shtMainScoreboard.Cells(1 + 1, 4) = TeamNames(BowlingT)
    shtMainScoreboard.Cells(1 + 1, 15) = strDATE & frmTeams.txtDate.Text
    Dim TossInfo As String
    shtMainScoreboard.Cells(1 + 1, 16) = strVENUE & frmTeams.txtLocation
    If frmTeams.optT1.Value = True Then
        TossInfo = TeamInitials(1) & " chose to bat."
    Else
        TossInfo = TeamInitials(2) & " chose to bowl."
    End If
    shtMainScoreboard.Cells(1 + 1, 7) = TossInfo
    shtMainScoreboard.Cells(1 + 31, 23) = Totalovers
    shtMainScoreboard.Cells(1 + 16, 10) = TeamInitials(1)
    shtMainScoreboard.Cells(1 + 16, 13) = TeamInitials(2)
End Sub
Sub EnterBatternames()
    For i = 1 To 11
        shtMainScoreboard.Cells(1 + i + 2, 1) = BatterNames(BattingT, i)
    Next i

End Sub
Sub Enternames()
    'Reset the recent overs info
    ResetRecentOvers
    'Names that will change in second innings
    EnterBatternames
    shtMainScoreboard.Cells(1 + 2, 1) = TeamInitials(BattingT)
    shtMainScoreboard.Cells(1 + 20, 1) = TeamInitials(BowlingT)
End Sub
Sub Copyformat()
    'batting titles
    'change the colours of the main scoreboards batting and bowling cards
    shtMainScoreboard.Range("A3:P3").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtMainScoreboard.Range("A4:P5").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtMainScoreboard.Range("A6:P14").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtMainScoreboard.Range("A15:P15").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    'bowling titles
    shtMainScoreboard.Range("A21:H21").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtMainScoreboard.Range("A22:H22").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtMainScoreboard.Range("A23:H32").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    'partnership combo
    shtMainScoreboard.Range("I29:N29").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtMainScoreboard.Range("I31:N31").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtMainScoreboard.Range("I28:N28").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtMainScoreboard.Range("I30:N30").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtMainScoreboard.Range("I32:N32").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtMainScoreboard.cmbPartnership.BackColor = ThisWorkbook.Colors(arrColourIndex(BattingT, Medium))
    'format batting scorecard
    With shtMainScoreboard.Range("A6:O14")
        .Font.Bold = False
        .Interior.ColorIndex = arrColourIndex(BattingT, Light)
        .Font.ColorIndex = arrColourIndex(BowlingT, TitleBar)
    End With
    'we need to clear all batters
    shtMainScoreboard.Range("G4:O14").Value = ""
    'format bowling scorecard
    With shtMainScoreboard.Range("A23:H32")
        .Font.Bold = False
        .Interior.ColorIndex = arrColourIndex(BowlingT, Light)
        .Font.ColorIndex = arrColourIndex(Borders, TitleBar)
    End With
    shtMainScoreboard.Range("A22:E32").ClearContents
    shtMainScoreboard.Range("G22:H32").ClearContents
    'clear fow comparison
    If innings = 1 Or innings = 3 Then shtMainScoreboard.Range("J18:J27").Value = ""
    shtMainScoreboard.Range("M18:M27").Value = ""
    'clear extras
    shtMainScoreboard.Cells(15, 5).Value = fieldersPenaltyRuns
    fieldersPenaltyRuns = 0 'penalty runs pending
    shtMainScoreboard.Cells(15, 3).Font.ColorIndex = shtMainScoreboard.Cells(15, 3).Interior.ColorIndex
    If shtMainScoreboard.Cells(15, 5).Value > 0 Then
        shtMainScoreboard.Cells(15, 4).Font.ColorIndex = ciWhite
        shtMainScoreboard.Cells(15, 5).Font.ColorIndex = ciWhite
    Else
        shtMainScoreboard.Cells(15, 4).Font.ColorIndex = shtMainScoreboard.Cells(15, 4).Interior.ColorIndex
        shtMainScoreboard.Cells(15, 5).Font.ColorIndex = shtMainScoreboard.Cells(15, 4).Interior.ColorIndex
    End If
    For i = 7 To 11 Step 2
        shtMainScoreboard.Cells(15, i).Value = 0
    Next i
    shtMainScoreboard.Cells(16, 3).Value = 0
    shtMainScoreboard.Cells(16, 5).Value = 0
    shtMainScoreboard.Cells(15, 14).Value = 0
    'clear partnership data
    shtMainScoreboard.Range("M28:N31").ClearContents
    'set run rate formula in partnership data
    shtMainScoreboard.Cells(32, 13).Formula = "=IF(N29>0,RPO(N29, M29),"""")"
    'clear the match match stats
    shtMainScoreboard.Range("I30:I31").Value = ""
    shtMainScoreboard.Cells(16, 16).Formula = "=IF(E16>0, RPO(OversToBalls(E16), B16),"""")"
    shtMainScoreboard.Range("P17:P32").Value = ""
    shtMainScoreboard.Cells(22, 16).Value = maxWickets
End Sub
Sub SetTeamNames()
    'set the team names
    TeamNames(1) = frmTeams.txtT1.Text
    TeamNames(2) = frmTeams.txtT2.Text
    TeamInitials(1) = frmTeams.txtT1I.Text
    TeamInitials(2) = frmTeams.txtT2I.Text
    'get batting lineups
    setNames 1, frmTeams.txtBatters.Text
    setNames 2, frmTeams.txtBowlers.Text
    
End Sub

Private Sub setNames(teamNo As Integer, names As String)
    Dim startPos As Integer
    Dim endPos As Integer
    For i = 1 To MAXPLAYERS
        endPos = InStr(startPos + 1, names, Chr(10), vbTextCompare)
        
        'check if we have reached the last name
        If endPos = 0 Then
            BatterNames(teamNo, i) = Right(names, Len(names) - startPos)
            Exit For
        End If
        
        BatterNames(teamNo, i) = Mid(names, startPos + 1, endPos - startPos - 2)
        startPos = endPos
    Next i
End Sub

Private Sub InitializeCurrentBs()
    currBatters(1) = 1
    currBatters(2) = 2
    currBowlers(1) = 1
    currBowlers(2) = 2
End Sub
Private Sub Initializevar()
    'set flags to make sure graphs will be reinitialized
    bGraphsInitialized = False
    'this is set so that dots on graphs will be set for all overs
    LastUpdatedGraphs = 0
    OtherBowlersBalls = 0
    CurrentDay = 1
    innings = 1
    OversVisible = MinOversVisible
    
    BattingT = 1
    BowlingT = 2
    Totalovers = frmTeams.txtOvers
    FollowOn = frmTeams.txtFollowOn
    OversRemaining = Totalovers
    'Set game rules
    'not that list index corresponds to the appropriate rule
    WideRule = frmTeams.cmbWideRule.ListIndex
    NoBallRule = frmTeams.cmbNoBallRule.ListIndex
    GameType = frmTeams.cmbInnings.Text
    If GameType = TWOINNINGS Then
        MaxOvers1stInnings = frmTeams.txtMaxOvers1st.Text
        maxDays = frmTeams.txtDays.Text
    End If
    BallsPerOver = frmTeams.cmbBallsPerOver.ListIndex * 2 + 6
    If frmTeams.cmbMaxBallsPerOver.ListIndex = 0 Then
        MaxBallsPerOver = 0
    Else
        MaxBallsPerOver = frmTeams.cmbMaxBallsPerOver.ListIndex + BallsPerOver - 1
    End If
    Target = 0
    TargetOffset = 0
    BallNo = 0
    BallsBowled = 0
    OversPreviousInnings = 0
    TotalOversAdjustment = 0
    OverNo = 0
    Wickets = 0
    Retired = 0
    Totalruns = 0
    Totalballs = 0
    shtSavedData.Cells(100, 1) = 1
    SetTeamNames
    InitializeCurrentBs
    For i = 0 To UBound(Partnerships, 2)
        For j = 1 To UBound(Partnerships, 3)
            For k = 0 To UBound(Partnerships, 1)
                Partnerships(k, i, j) = 0
            Next k
        Next j
    Next i
    For i = 1 To UBound(arrBowlers, 1)
        arrBowlers(i, 1) = -1
        arrBowlers(i, 2) = 0
        arrBowlers(i, 3) = 0
        arrBowlers(i, 4) = 0
    Next i
End Sub
Sub GetOpeningBatsmen()
    Unload frmNewBatter
    isNewInnings = True
    Wickets = -1
    NewBatter (1)   'set formulas for newbatters
    Wickets = 0
    NewBatter (2)
    isNewInnings = False
End Sub
Sub DisplayPartnership(PNumber As Integer)
'print data on screen
    shtMainScoreboard.Cells(1 + 27, 13) = Partnerships(PNumber, 6, innings)
    'dont print the wickets if its the current partnership
    If PNumber > Wickets Then shtMainScoreboard.Cells(1 + 27, 14) = "" Else shtMainScoreboard.Cells(1 + 27, 14) = "/" & PNumber
    shtMainScoreboard.Cells(1 + 28, 13) = Partnerships(PNumber, 8, innings)
    shtMainScoreboard.Cells(1 + 28, 14) = Partnerships(PNumber, 9, innings)
    shtMainScoreboard.Cells(1 + 29, 9) = BatterNames(BattingT, Partnerships(PNumber, 1, innings))
    shtMainScoreboard.Cells(1 + 29, 13) = Partnerships(PNumber, 2, innings)
    shtMainScoreboard.Cells(1 + 29, 14) = Partnerships(PNumber, 3, innings)
    shtMainScoreboard.Cells(1 + 30, 9) = BatterNames(BattingT, Partnerships(PNumber, 0, innings))
    shtMainScoreboard.Cells(1 + 30, 13) = Partnerships(PNumber, 4, innings)
    shtMainScoreboard.Cells(1 + 30, 14) = Partnerships(PNumber, 5, innings)
End Sub

Sub Partnership(WhosOut)
    '1 to 11
    '0 - Not out
    '1 - who is out
    '2-3 dismissed batsmens runs and balls
    '4-5 not out batsmens runs and balls in the partnership
    '6-7 total runs overs and balls for partnership
    '8-9 partnership runs and overs
    '10-11 not out batsmens total runs and balls
    '12 balls adjustment for short or long overs
    Partnerships(Wickets, 1, innings) = WhosOut
    Partnerships(Wickets, 0, innings) = Notout
    Dim woPrevRuns As Integer, woPrevBalls As Integer, noPrevRuns As Integer, noPrevBalls As Integer
    If Partnerships(Wickets - 1, 0, innings) = WhosOut Then
        woPrevRuns = Partnerships(Wickets - 1, 10, innings)
        woPrevBalls = Partnerships(Wickets - 1, 11, innings)
    ElseIf Partnerships(Wickets - 1, 0, innings) = Notout Then
        noPrevRuns = Partnerships(Wickets - 1, 10, innings)
        noPrevBalls = Partnerships(Wickets - 1, 11, innings)
    End If
    If shtMainScoreboard.Cells(1 + WhosOut + 2, 2) <> "" Then
        Partnerships(Wickets, 2, innings) = shtMainScoreboard.Cells(1 + WhosOut + 2, 2) - woPrevRuns
        Partnerships(Wickets, 3, innings) = shtMainScoreboard.Cells(1 + WhosOut + 2, 3) - woPrevBalls
    End If
    If shtMainScoreboard.Cells(1 + Notout + 2, 2).Text <> "" Then
        Partnerships(Wickets, 4, innings) = shtMainScoreboard.Cells(1 + Notout + 2, 2) - noPrevRuns
        Partnerships(Wickets, 5, innings) = shtMainScoreboard.Cells(1 + Notout + 2, 3) - noPrevBalls
    End If
    Partnerships(Wickets, 10, innings) = shtMainScoreboard.Cells(1 + Notout + 2, 2)
    Partnerships(Wickets, 11, innings) = shtMainScoreboard.Cells(1 + Notout + 2, 3)
    Partnerships(Wickets, 6, innings) = Totalruns
    Partnerships(Wickets, 7, innings) = (OverNo * BallsPerOver + BallNo)
    Partnerships(Wickets, 8, innings) = Totalruns - Partnerships(Wickets - 1, 6, innings)
    Partnerships(Wickets, 9, innings) = (OverNo * BallsPerOver + BallNo) - _
        Partnerships(Wickets - 1, 7, innings) + Partnerships(Wickets, PARTNERSHIP_BALLS_ADJUSTMENT, innings)
End Sub

Sub RemovePartnership(WhosOut)
    If Wickets < 9 Then
        For i = 0 To 11
            Partnerships(Wickets + 2, i, innings) = 0
        Next i
        'remove this partnership from the partnership list box
        shtMainScoreboard.cmbPartnership.RemoveItem (shtMainScoreboard.cmbPartnership.ListCount - 1)
    End If
End Sub

Sub ResetPartnershipCombo()
    Wickets = Wickets + 1
    Notout = currBatters(2)
    Partnership currBatters(1)
    Wickets = Wickets - 1
    If Wickets = 0 Then shtMainScoreboard.cmbPartnership.Clear
    AddEntryPartnershipCombo Wickets
    shtMainScoreboard.cmbPartnership.ListIndex = Wickets
End Sub
Sub AddEntryPartnershipCombo(Wickets As Integer)
    'add to partnerships list combo
    Dim PEntry As String
    If Wickets = 0 Then
        PEntry = "1st"
    ElseIf Wickets = 1 Then
        PEntry = "2nd"
    ElseIf Wickets = 2 Then
        PEntry = "3rd"
    Else
        PEntry = (Wickets + 1) & "th"
    End If
    PEntry = PEntry + " wkt"
    shtMainScoreboard.cmbPartnership.AddItem (PEntry)
End Sub
Sub UpdateCurrentPartnership()
    'update current partnership
    Wickets = Wickets + 1
    Notout = currBatters(2)
    Partnership currBatters(1)
    Wickets = Wickets - 1
    'display current partnership
    DisplayPartnership Wickets + 1
    shtMainScoreboard.cmbPartnership.ListIndex = Wickets
End Sub

Sub CopyFallOfWickets()
'copy the fall of wicket data must be done after copy format
    j = 10
    For i = 17 To 26
        With shtMainScoreboard.Cells(1 + i, j)
            .Value = shtInnings1.Cells(i, j)
            .Formula = shtInnings1.Cells(i, j).Formula
            .Font.Bold = shtInnings1.Cells(i, j).Font.Bold
            .Interior.ColorIndex = shtInnings1.Cells(i, j).Interior.ColorIndex
            .Font.ColorIndex = shtInnings1.Cells(i, j).Font.ColorIndex
        End With
    Next i
End Sub

Sub CopyInningsData(targetSheet As Worksheet)
    'copy scoresheet to other page
    For i = 1 To 31
        For j = 1 To 16
            If j <> 1 Or i < 16 Or i > 19 Then
                With targetSheet.Cells(i, j)
                    If Not ((i = 15 And j = 16) Or (j = 2 And i >= 3 And i <= 15) Or (j > 2 And j <= 6 And i >= 3 And i <= 13) Or (j = 6 And i >= 21 And i <= 31)) Then _
                        .Value = shtMainScoreboard.Cells(1 + i, j)
                    .Font.Bold = shtMainScoreboard.Cells(1 + i, j).Font.Bold
                    .Interior.ColorIndex = shtMainScoreboard.Cells(1 + i, j).Interior.ColorIndex
                    .Font.ColorIndex = shtMainScoreboard.Cells(1 + i, j).Font.ColorIndex
                End With
            End If
        Next j
    Next i
    With targetSheet
    'clear the cell thats got the sheild being drawn on it
        .Cells(1 + 16, 15) = ""
    'clear the partnerships box
        .Range(.Cells(27, 9), .Cells(31, 14)) = ""
    End With
    'copy partnerships
    CopyPartnerships targetSheet, innings
    'Change the initials to function references
    SetTeamInitialFormula targetSheet, 2, 1
    SetTeamInitialFormula targetSheet, 20, 1
    SetTeamInitialFormula targetSheet, 16, 10
    SetTeamInitialFormula targetSheet, 16, 13
End Sub

Sub SetTeamInitialFormula(targetSheet As Worksheet, targetRow As Integer, targetColumn As Integer)
    Dim teamNumber As Integer
    If shtMainScoreboard.Cells(targetRow + 1, targetColumn).Text = GetTeamInitials(1) Then teamNumber = 1 Else teamNumber = 2
    targetSheet.Cells(targetRow, targetColumn).Formula = "=GetTeamInitials(" & teamNumber & ")"
End Sub

Sub NewInningsSheet()
    ActiveWorkbook.Unprotect "laverwood"
    Dim strSheetName As String
    Dim newSheet As Worksheet
    strSheetName = "Innings " & innings - 1
    Worksheets(strSheetName).Copy After:=Worksheets(strSheetName)
    Set newSheet = Worksheets(strSheetName & " (2)")
    newSheet.PageSetup.BlackAndWhite = True
    strSheetName = "Innings " & innings
    newSheet.name = strSheetName
    CopyInningsData newSheet
    With newSheet
        .ScrollArea = shtInnings1.ScrollArea
        .PageSetup.PrintArea = shtInnings1.PageSetup.PrintArea
        .Cells(16, 1) = strSHTINNINGSTITLE & strSheetName
        .EnableSelection = xlNoRestrictions
        If isOldExcelVersion Then
            .Protect UserInterfaceOnly:=True
        Else
            NewProtectSheet newSheet
        End If
    End With
    'Update the details sheets references
    ActiveWorkbook.Protect "laverwood"
End Sub

Sub NewProtectSheet(sht As Worksheet)
    sht.Protect AllowFormattingColumns:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
End Sub

Sub SetFormulasDetailedScoresheet()
    Dim strSheetName As String
    strSheetName = "Innings " & innings - 1
    For i = 1 To maxWickets + 1
        With shtDetails.Cells((innings - 2) * DetailsInningsSize + i + 2, 1)
            .NumberFormat = "General"
            .Formula = "='" & strSheetName & "'!A" & (i + 2)
        End With
        shtDetails.Cells((innings - 2) * DetailsInningsSize + i + 2, 2).Formula = "='" & strSheetName & "'!B" & (i + 2)
        shtDetails.Cells((innings - 2) * DetailsInningsSize + i + 2, 3).Formula = "='" & strSheetName & "'!C" & (i + 2)
        Dim s As String
        s = "'" & strSheetName & "'!A" & (i + 20)
        With shtDetails.Cells((innings - 2) * DetailsInningsSize + i * 2 + 13, 1)
            .NumberFormat = "General"
            .Formula = "=if( " & s & "="""","""", " & s & ")"
        End With
        s = "'" & strSheetName & "'!B" & (i + 20)
        shtDetails.Cells((innings - 2) * DetailsInningsSize + i * 2 + 13, 2).Formula = "=if( " & s & "="""","""", " & s & ")"
        s = "'" & strSheetName & "'!D" & (i + 20)
        shtDetails.Cells((innings - 2) * DetailsInningsSize + i * 2 + 13, 3).Formula = "=if(" & s & "="""","""", " & s & ")"
    Next i
End Sub

Sub CopyPartnerships(targetSheet As Worksheet, nInnings As Integer, Optional bDoColours As Boolean = True)
        Dim BattingTeam As Integer
        BattingTeam = TeamTotals(nInnings, 1)
        If BattingTeam = 0 Then BattingTeam = BattingT
        For i = 1 To 10
            If Partnerships(i, 1, nInnings) > 0 And Partnerships(i, 7, nInnings) > 0 Then
                targetSheet.Cells(3 * i, 22) = Partnerships(i, 8, nInnings)
                targetSheet.Cells(3 * i, 23) = "'(" & Partnerships(i, 9, nInnings) & ")"
                targetSheet.Cells(3 * i, 17) = "=A" & (2 + Partnerships(i, 1, nInnings))
                targetSheet.Cells(3 * i, 18) = Partnerships(i, 2, nInnings)
                targetSheet.Cells(3 * i, 19) = "'(" & Partnerships(i, 3, nInnings) & ")"
                targetSheet.Cells(3 * i + 1, 17) = "=A" & (2 + Partnerships(i, 0, nInnings)) 'BatterNames(BattingTeam, Partnerships(i, 0, nInnings))
                targetSheet.Cells(3 * i + 1, 18) = Partnerships(i, 4, nInnings)
                targetSheet.Cells(3 * i + 1, 19) = "'(" & Partnerships(i, 5, nInnings) & ")"
            Else
                targetSheet.Cells(3 * i, 22) = ""
                targetSheet.Cells(3 * i, 23) = ""
                targetSheet.Cells(3 * i, 17) = ""
                targetSheet.Cells(3 * i, 18) = ""
                targetSheet.Cells(3 * i, 19) = ""
                targetSheet.Cells(3 * i + 1, 17) = ""
                targetSheet.Cells(3 * i + 1, 18) = ""
                targetSheet.Cells(3 * i + 1, 19) = ""
            End If
            If bDoColours = True Then
                targetSheet.Cells(3 * i - 1, 17).Interior.ColorIndex = arrColourIndex(BattingT, Dark)
                targetSheet.Range("U" & 3 * i & ":U" & 3 * i + 1).Interior.ColorIndex = arrColourIndex(BattingT, Medium)
                targetSheet.Range("Q" & 3 * i & ":Q" & 3 * i + 1).Interior.ColorIndex = arrColourIndex(BattingT, Medium)
                targetSheet.Range("R" & 3 * i & ":T" & 3 * i + 1).Interior.ColorIndex = arrColourIndex(BattingT, Light)
                targetSheet.Range("V" & 3 * i & ":W" & 3 * i + 1).Interior.ColorIndex = arrColourIndex(BattingT, Light)
            End If
        Next i
End Sub

Sub ResetRecentOvers()
    shtMainScoreboard.Cells(1 + RECENTOVER1, RECENTDELIVERYCOLUMN) = ""
    shtMainScoreboard.Cells(1 + RECENTOVER1 + 1, RECENTDELIVERYCOLUMN) = ""
End Sub
    
Sub UndoRecentDeliveries()
    'undo enter the character on the data sheets
    Dim CurrOver As String
    If OverNo < maxOversFullVersion Then
        CurrOver = shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 2)
        CurrOver = Left(CurrOver, Len(CurrOver) - 1)
        shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 2) = CurrOver
        shtMainScoreboard.Cells(1 + RECENTOVER1, RECENTDELIVERYCOLUMN) = CurrOver
    End If
    'undo enter character on the old style scoreboard
    Dim Temp As Range
    Set Temp = shtDetails.Cells((innings - 1) * DetailsInningsSize + currBatters(1) + 2, 4)
    Temp = Left(Temp, Len(Temp) - 1)
    'This changes the number format to @ once batsmans ball faced is reduced to a certain number
    If Len(Temp) = CHANGE_TO_GENERAL_COUNT Then Temp.NumberFormat = "@"
    i = arrBowlers(currBowlers(1), 2) + (arrBowlers(currBowlers(1), 4) + BallsPerOver - 1) \ BallsPerOver
    If i < maxOversBowlerDisplay Then
        Set Temp = shtDetails.Cells((innings - 1) * DetailsInningsSize + currBowlers(1) * 2 + 13, 4 + i)
        Temp = Left(Temp, Len(Temp) - 1)
    End If
End Sub
Function GetEnteredChar(runs As Integer, charType As String, vOther As Variant)
    Select Case charType
    Case "r"
        If runs = 0 Then
            GetEnteredChar = "!"
        ElseIf runs > 9 Then
            GetEnteredChar = "R"
        Else
            GetEnteredChar = runs
        End If
    Case "lb"
        GetEnteredChar = "*"
    Case "b"
        GetEnteredChar = ")"
    Case "x"
        GetEnteredChar = "X"
    Case "nb"
        If vOther = "b" Or vOther = "lb" Or vOther = "osb" Or vOther = "oslb" Then
            Select Case runs
            Case 1
                GetEnteredChar = "#"
            Case 2
                GetEnteredChar = "$"
            Case 3
                GetEnteredChar = "%"
            Case 4
                GetEnteredChar = "&"
            Case Else
                GetEnteredChar = """"
            End Select
        Else
            Select Case runs
            Case 0
                GetEnteredChar = """"
            Case 1
                GetEnteredChar = "["
            Case 2
                GetEnteredChar = "\"
            Case 3
                GetEnteredChar = "]"
            Case 4
                GetEnteredChar = "^"
            Case 5
                GetEnteredChar = "_"
            Case 6
                GetEnteredChar = "`"
            End Select
        End If
    Case "w"
        Select Case runs
        Case 0
            GetEnteredChar = ":"
        Case 1
            GetEnteredChar = ";"
        Case 2
            GetEnteredChar = "<"
        Case 3
            GetEnteredChar = "'"
        Case Else
            GetEnteredChar = "("
        End Select
    Case Else
        GetEnteredChar = ""
    End Select
End Function
Sub AddNewOverRow()
    If OverNo < maxOversFullVersion Then
        If BallsBowled = 1 Then
            If OverNo >= OversVisible Then
                OversVisible = OverNo + 1
                SetRowVisibilities shtOverDetails
                SetRowVisibilities shtBallDetails
            End If
            'enter the bowlers name
            Dim BowlerNo
            BowlerNo = shtData.Cells(Totalballs + 2, innings * 6) Mod 100
            shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 3).NumberFormat = "General"
            shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 3).Formula = "='Main Scoreboard'!A" & BowlerNo + 21
        End If
    End If
End Sub

Sub EnterRecentDeliveries()
    If Totalballs > 0 Then
        Dim runs As Integer
        Dim charType As String, vOther As Variant
        Dim EnteredChar As String
        'get the data from the data sheet
        charType = shtData.Cells(Totalballs + 2, innings * 6 - 2)
        runs = shtData.Cells(Totalballs + 2, innings * 6 - 3)
        vOther = shtData.Cells(Totalballs + 2, innings * 6 - 1)
        
        'enter the balls data
        EnteredChar = GetEnteredChar(runs, charType, vOther)
        'enter character on the old style scoreboard
        Dim Temp As Range
        Set Temp = shtDetails.Cells((innings - 1) * DetailsInningsSize + currBatters(1) + 2, 4)
        Temp = Temp & EnteredChar
        'This changes the number format to general once the batsman has faced a certain number of balls
        If Len(Temp) = CHANGE_TO_GENERAL_COUNT Then Temp.NumberFormat = "General"
        Set Temp = shtDetails.Cells((innings - 1) * DetailsInningsSize + currBowlers(1) * 2 + 13, 4 + arrBowlers(currBowlers(1), 2) + (arrBowlers(currBowlers(1), 4) - 1 + BallsPerOver) \ BallsPerOver)
        Temp = Temp & EnteredChar
        If OverNo < maxOversFullVersion Then
            'enter the character on the data sheets
            shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 2) = shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 2) & EnteredChar
            shtMainScoreboard.Cells(1 + RECENTOVER1, RECENTDELIVERYCOLUMN) = shtBallDetails.Cells(ROROWSPACE + OverNo, (2 - innings Mod 2) * 5 - 2)
        End If
    End If
End Sub

Sub CopyRecentOvers()
    shtMainScoreboard.Cells(1 + RECENTOVER1 + 1, RECENTDELIVERYCOLUMN) = shtMainScoreboard.Cells(1 + RECENTOVER1, RECENTDELIVERYCOLUMN)
    shtMainScoreboard.Cells(1 + RECENTOVER1, RECENTDELIVERYCOLUMN) = ""
End Sub

Sub UndoRecentOvers()
    'clear the total score
    For j = 2 To 4
        shtBallDetails.Cells(ROROWSPACE + OverNo, j + (2 - innings Mod 2) * 5 - 3) = ""
    Next j
    'delete the bowlers name
    shtBallDetails.Cells(ROROWSPACE + OverNo + 1, (2 - innings Mod 2) * 5 - 3) = ""
    'update the current over
    shtMainScoreboard.Cells(1 + RECENTOVER1, RECENTDELIVERYCOLUMN) = shtMainScoreboard.Cells(1 + RECENTOVER1 + 1, RECENTDELIVERYCOLUMN)
    'update the previous over
    If OverNo >= 1 Then
        shtMainScoreboard.Cells(1 + RECENTOVER1 + 1, RECENTDELIVERYCOLUMN) = shtBallDetails.Cells(ROROWSPACE + OverNo - 1, innings * 5 - 2)
    Else
        shtMainScoreboard.Cells(1 + RECENTOVER1 + 1, RECENTDELIVERYCOLUMN) = ""
    End If
End Sub
Sub ResetfrmWicket()
    Unload frmWicket
    Load frmWicket
End Sub

Sub ResetfrmNewbowler()
    Dim Temp As Integer
    'need to set Totalballs so that the form will unload
    Temp = Totalballs
    Totalballs = ALLOWBOWLERUNLOAD
    Unload frmNewBowler
    Load frmNewBowler
    Totalballs = Temp
End Sub

Sub ResetfrmNewbatter()
    Dim Temp As Integer
    Temp = Totalballs
    'set total balls temporarily to 0 to allow the form to unload
    Totalballs = 0
    Unload frmNewBatter
    Totalballs = Temp
    isNewInnings = False
    Load frmNewBatter
End Sub

Sub LoadColourIndexArray()
    'load all the colour indexs
    arrColourIndex(Borders, TitleBar) = shtMainScoreboard.Range("A2").Interior.ColorIndex
    arrColourIndex(Borders, Dark) = shtMainScoreboard.Range("I16").Interior.ColorIndex
    arrColourIndex(Borders, Medium) = shtMainScoreboard.Range("O16").Interior.ColorIndex
    arrColourIndex(Borders, Light) = shtMainScoreboard.Range("P16").Interior.ColorIndex
    arrColourIndex(Batters, Light) = shtDetails.Range("A3").Interior.ColorIndex
    arrColourIndex(Batters, Medium) = shtDetails.Range("B3").Interior.ColorIndex
    arrColourIndex(Batters, Dark) = shtDetails.Range("A2").Interior.ColorIndex
    arrColourIndex(Bowlers, Light) = shtDetails.Range("A15").Interior.ColorIndex
    arrColourIndex(Bowlers, Medium) = shtDetails.Range("A16").Interior.ColorIndex
    arrColourIndex(Bowlers, Dark) = shtDetails.Range("A14").Interior.ColorIndex
    arrColourIndex(Fonts, Dark) = ciYellow
    arrColourIndex(Fonts, Light) = ciWhite
    arrColourIndex(Fonts, TotalScore) = ciYellow
    arrColourIndex(Fonts, Striker) = 3
    arrColourIndex(Fonts, NonStriker) = 16
    'set the dot colors
    Team1Dots = arrColourIndex(Batters, Dark) 'Batters and Bowlers are constants
    Team2Dots = arrColourIndex(Bowlers, Dark)
End Sub
Sub SwapTeamColours()
    ToggleAutoCalculate False
    Dim Temp
    'swap the colours
    For i = 1 To Size2
        If arrColourIndex(1, i) <> 0 Then
            Temp = ThisWorkbook.Colors(arrColourIndex(1, i))
            ThisWorkbook.Colors(arrColourIndex(1, i)) = ThisWorkbook.Colors(arrColourIndex(2, i))
            ThisWorkbook.Colors(arrColourIndex(2, i)) = Temp
        End If
    Next i
    ToggleAutoCalculate True
End Sub

Sub SwapInningsTeamColours()
    'change the colours of the main scoreboards batting and bowling cards
    shtMainScoreboard.Range("A3:P3").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtMainScoreboard.Range("A4:P5").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtMainScoreboard.Range("A6:P14").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtMainScoreboard.Range("A15:P15").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtMainScoreboard.Range("A21:H21").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtMainScoreboard.Range("A22:H22").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtMainScoreboard.Range("A23:H32").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    'change the partnerships colours
    shtMainScoreboard.Range("I29:N29").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtMainScoreboard.Range("I31:N31").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtMainScoreboard.Range("I28:N28").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtMainScoreboard.Range("I30:N30").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtMainScoreboard.Range("I32:N32").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtMainScoreboard.cmbPartnership.BackColor = ThisWorkbook.Colors(arrColourIndex(BowlingT, Medium))
    'WE DONT NEED TO DO THIS NOW BECAUSE WE USE BATTINGT and BOWLINGT to see which colours to use
    'swap the colours
    'Dim Temp
    'For i = 1 To Size2
    '    Temp = arrColourIndex(1, i)
    '    arrColourIndex(1, i) = arrColourIndex(2, i)
    '    arrColourIndex(2, i) = Temp
    'Next i
End Sub
Sub SetColours(Optional bFollowOn As Boolean = False)
    'colours of partnerships
    shtMainScoreboard.Range("J18:J27").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtMainScoreboard.Range("M18:M27").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtMainScoreboard.Range("J17").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtMainScoreboard.Range("M17").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    'colours of comparison
    shtMainScoreboard.Range("R5:T29").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtMainScoreboard.Range("U5:W29").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtMainScoreboard.Range("Y5:AA29").Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtMainScoreboard.Range("AB5:AD29").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtMainScoreboard.Range("R4").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtMainScoreboard.Range("U4").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtMainScoreboard.Range("Y4").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtMainScoreboard.Range("AB4").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    'colours of the Over Details
    shtOverDetails.Activate
    shtOverDetails.Range("B2").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtOverDetails.Range("I2").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtOverDetails.Range("B3:G3").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtOverDetails.Range("I3:N3").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtOverDetails.Range("O3:R3").Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtOverDetails.Range("B4:G" & maxOversFullVersion + 3).Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtOverDetails.Range("I4:N" & maxOversFullVersion + 3).Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    shtOverDetails.Range("O4:R" & maxOversFullVersion + 3).Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtOverDetails1.Range("B2").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtOverDetails1.Range("I2").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    'colours of the Ball Details
    shtBallDetails1.Range("B2").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtBallDetails1.Range("G2").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtBallDetails.Activate
    shtBallDetails.Range("B2").Interior.ColorIndex = arrColourIndex(BattingT, Dark)
    shtBallDetails.Range("G2").Interior.ColorIndex = arrColourIndex(BowlingT, Dark)
    shtBallDetails.Range("B3:F3").Interior.ColorIndex = arrColourIndex(BattingT, Medium)
    shtBallDetails.Range("G3:K3").Interior.ColorIndex = arrColourIndex(BowlingT, Medium)
    shtBallDetails.Range("B4:F" & maxOversFullVersion + 3).Interior.ColorIndex = arrColourIndex(BattingT, Light)
    shtBallDetails.Range("G4:K" & maxOversFullVersion + 3).Interior.ColorIndex = arrColourIndex(BowlingT, Light)
    'do the details sheet
    If bFollowOn = True Then
        shtDetails.Range("A37:CY108").Copy
        shtDetails.Range("A73:CY144").PasteSpecial xlPasteFormats
    Else
        shtDetails.Range("A1:CY72").Copy
        shtDetails.Range("A73:CY144").PasteSpecial xlPasteFormats
    End If
    'do the graphs
    For i = 1 To 2
        chtRunRate.SeriesCollection(i).Border.ColorIndex = arrColourIndex(i, Medium)
        chtSkyScraper.SeriesCollection(i).Interior.ColorIndex = arrColourIndex(i, Medium)
        chtWorm.SeriesCollection(i).Border.ColorIndex = arrColourIndex(i, Medium)
    Next i
    chtSS1.SeriesCollection(1).Interior.ColorIndex = arrColourIndex(Batters, Medium)
    chtSS2.SeriesCollection(1).Interior.ColorIndex = arrColourIndex(Bowlers, Medium)
    'get the dot colors
    Team1Dots = arrColourIndex(Batters, Dark) 'These shouldnt change to BattingT
    Team2Dots = arrColourIndex(Bowlers, Dark)
End Sub
Sub UpdateFallOfWicket(nInnings As Integer)
    j = 1
    Do While Partnerships(j, 0, nInnings) <> 0
        If innings = nInnings And j + 1 <= maxWickets Then
            If Partnerships(j + 1, 0, nInnings) = 0 Then Exit Do
        End If
        If innings > 2 And nInnings > 2 Or innings <= 2 And nInnings <= 2 Then
            If nInnings Mod 2 = 1 Then i = 10 Else i = 13
            If shtMainScoreboard.Cells(17 + j, i) <> "" Then _
                shtMainScoreboard.Cells(17 + j, i) = Partnerships(j, 6, nInnings)
        End If
        If innings = nInnings Then
            'fall of wicket in batters stats
            If shtMainScoreboard.Cells(3 + Partnerships(j, 1, nInnings), 14) <> "" Then _
                shtMainScoreboard.Cells(3 + Partnerships(j, 1, nInnings), 14) = Partnerships(j, 6, nInnings)
        Else
            'do the fall of wicket in the old sheet
            If nInnings Mod 2 = 1 Then
                If Worksheets("Innings " & nInnings).Cells(16 + j, 10) <> "" Then _
                    Worksheets("Innings " & nInnings).Cells(16 + j, 10) = Partnerships(j, 6, nInnings)
                If innings > 2 And nInnings = 1 Then
                    If Worksheets("Innings 2").Cells(16 + j, 10) <> "" Then _
                        Worksheets("Innings 2").Cells(16 + j, 10) = Partnerships(j, 6, nInnings)
                End If
            Else
                If Worksheets("Innings " & nInnings).Cells(16 + j, 13) <> "" Then _
                    Worksheets("Innings " & nInnings).Cells(16 + j, 13) = Partnerships(j, 6, nInnings)
            End If
            'fall of wicket in batters stats
            If Worksheets("Innings " & nInnings).Cells(2 + Partnerships(j, 1, nInnings), 14) <> "" Then _
                Worksheets("Innings " & nInnings).Cells(2 + Partnerships(j, 1, nInnings), 14) = Partnerships(j, 6, nInnings)
        End If
        j = j + 1
        If j > maxWickets Then Exit Do
    Loop
End Sub

Public Function inTeamNamed(ByVal player As String, ByVal teamInit As String) As Boolean
    Dim Team As Integer
    If TeamInitials(1) = teamInit Then
        inTeamNamed = inTeam(player, 1)
    Else
        inTeamNamed = inTeam(player, 2)
    End If
End Function

Public Function inTeam(ByVal player As String, ByVal Team As Integer) As Boolean
    inTeam = False
    'check if the bowler was already in the batting line up
    For i = 1 To MAXPLAYERS
        If BatterNames(Team, i) = player Then
            inTeam = True
            Exit For
        End If
    Next i
End Function

Public Function MaxOversFirstInnings()
    MaxOversFirstInnings = MaxOvers1stInnings
End Function

Public Function isOldExcelVersion() As Boolean
On Error GoTo ErrorHandler
    isOldExcelVersion = Replace(Application.Version, ".", Application.International(xlDecimalSeparator)) <= excelVersion
    Exit Function
ErrorHandler:
    isOldExcelVersion = True
End Function

Public Function GetTeamInitials(teamNumber As Integer) As String
    GetTeamInitials = TeamInitials(teamNumber)
End Function

Public Function GetTeamName(teamNumber As Integer) As String
    GetTeamName = TeamNames(teamNumber)
End Function
Attribute VB_Name = "StringTable"
Option Explicit

Global Const strVENUE As String = "Venue: "
Global Const strDATE As String = "Date: "

Global Const strOVERSREMAININGDAY As String = "O's rem in day"
Global Const strOVERSREMAINING1ST As String = "O's rem in innings"
Global Const strOVERSREMAINING As String = "Overs remaining"
Global Const strBALLSREMAINING As String = "Balls remaining"

Global Const strSHTINNINGSTITLE As String = "Laver & Wood Cricket Scorebook- "

'none of these can begin with o
Global Const strPENALTYRUNS As String = "pr"
Global Const strEXTRABALL As String = "eb"
Global Const strENDDAY As String = "ed"
Global Const strENDOVER As String = "eo"
Global Const strSWAPBATSMEN As String = "sb"
Global Const strCHANGEBOWLER As String = "cb"
Global Const strCBEO As String = "cbeo"

Global Const strPENALTYRUNSLABEL As String = "Penalty runs"

Global Const strRETIRED As String = "retired hurt"
Global Const strLEADS As String = "Leads by"
Global Const strTRAILS As String = "Runs required"

Global Const ONEINNINGS As String = "One Innings"
Global Const TWOINNINGS As String = "Two Innings"

Global Const refTotalOvers As String = "W32:ad32"
Global Const refTargetRuns As String = "P18"

Global Const strCHANGE_TARGET_PROMPT As String = "Change the target to: "
Global Const strCHANGE_OVERS_PROMPT As String = "Change the total overs per innings to: "
Global Const strCHANGE_OVERS_PROMPT_2 As String = "Change the total overs per day to: "

Global Const strCHANGE_HOW_OUT_PROMPT As String = "Change how out for batsmen to: "
Global Const strCHANGE_BATTER_NAME_PROMPT As String = "Change the batsmen's name to: "
Global Const strCHANGE_BOWLER_NAME_PROMPT As String = "Change the bowlers's name to: "

Global Const strCHANGE_HOW_OUT_TITLE As String = "Change How Out"
Global Const strCHANGE_TARGET_TITLE As String = "Change Target Runs"
Global Const strCHANGE_TOTAL_OVERS_TITLE As String = "Change Total Overs"
Global Const strCHANGE_BOWLER_NAME_TITLE As String = "Change Bowler Name"
Global Const strCHANGE_BATTER_NAME_TITLE As String = "Change Batter Name"

Global Const strCHANGE_TARGET_ERROR_NEG As String = "Target can not be negative!"
Global Const strCHANGE_TOTAL_OVERS_ERROR_NEG As String = "Total overs can not be negative!"
Global Const strCHANGE_TOTAL_OVERS_ERROR_MAX_FULL As String = "Total overs can not exceed " & maxOversFullVersion & "!"

Global Const strRUN_ENTRY_ERROR_TITLE As String = "Run Entry Error"
Global Const strRUN_ENTRY_NEG As String = "Runs can not be negative!"
Global Const strRUN_ENTRY_NOT_NUMERIC As String = "Runs must be a number!"

Global Const ctdExt As String = ".ctd"
Global Const strCRICKET_TEAM_DATA As String = "Cricket Team Data (*" & ctdExt & "), *" & ctdExt

Global Const strMatchTotals As String = "Match Totals"

Global Const strSAVE_COMPRESSED_TITLE = "Save Compressed"
Global Const strSAVE_COMPRESSED_PROMPT = "Do you want to include the graphs?"

Global Const strEXCEL_LOCATION_ERROR = "The location of Microsoft Excel has changed. Because of this you will need to reactivate the full version."
Global Const strSCOREBOOK_TITLE = "Laver & Wood Scorebook"

Global Const strCAPTION_OVERS_PER_INNINGS = "Overs per Innings: "

Global Const strSAVING_OPEN_FILE_ERROR As String = "You can not save this scorebook with the same name as another workbook or add-in. Choose a different name, or close the other workbook or add-in before saving."
Global Const strNEW_GAME As String = "New Game"

Global Const strEMAIL As String = "cricketscorebook@gmail.com"
Global Const strWEBPAGE As String = "cricketscorebook.orconhosting.net.nz"
Global Const strURL As String = "http://www.cricketfanatic.orconhosting.net.nz"
Attribute VB_Name = "ThisScorebook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const FaceID_Help As Integer = 984
Const FaceID_Undo As Integer = 128
Const FaceID_Colours As Integer = 1440
Const FaceID_Compress As Integer = 1913

Dim bOldDisplayFullScreen As Boolean
Dim bOldDisplayFormulaBar As Boolean
Dim bOldDisplayStatusBar As Boolean
Dim bOldWindowState As Integer

Dim arrToolBar() As Boolean
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error GoTo ErrorHandler 'make sure all the popup menus are re enabled even if we crash!
    
    If isHiddenMode Then Exit Sub
    
    If ActiveWorkbook.Saved = False Then
        Dim fileSaveName As Variant
        Dim Prompt As String, Result As Variant
        Prompt = "Do you want to save the changes you made to " & ActiveWorkbook.name
        Result = MsgBox(Prompt, vbYesNoCancel, strSCOREBOOK_TITLE)
SaveScorebookAs:
        If Result = vbYes Then
            'check if the file has ever been saved
            If ActiveWorkbook.path = "" Or ActiveWorkbook.ReadOnly = True Then
                fileSaveName = Application.GetSaveAsFilename( _
                    FileFilter:="Excel Spreadsheet Files (*.xls), *.xls")
                If fileSaveName = False Then
                    Cancel = True
                    Exit Sub
                End If
                If Right(fileSaveName, 4) <> ".xls" Then fileSaveName = fileSaveName + ".xls"
                ActiveWorkbook.SaveAs fileSaveName
            Else
                ActiveWorkbook.Save
            End If
        ElseIf Result = vbCancel Then
            Cancel = True
            Exit Sub
        End If
       ActiveWorkbook.Saved = True
    End If
    If bRelease = True Then
        Application.DisplayFormulaBar = bOldDisplayFormulaBar
        Application.Caption = Application.name
        'Application.WindowState = bOldWindowState
        Application.DisplayStatusBar = bOldDisplayStatusBar
        ResetXLIcon
        'reset the menus bars
        Application.CommandBars("Worksheet Menu Bar").Reset
        Dim count As Integer
        'make the toolbars visible that need to be
        For count = 1 To Application.CommandBars.count
            Application.CommandBars(count).Enabled = True
            If Application.CommandBars(count).Type <> msoBarTypePopup And count <= UBound(arrToolBar) Then _
                Application.CommandBars(count).Visible = arrToolBar(count)
        Next count
    End If
    Exit Sub
ErrorHandler:
    Select Case Err
        Case 1004
            MsgBox strSAVING_OPEN_FILE_ERROR, vbExclamation, strSCOREBOOK_TITLE
            Resume SaveScorebookAs
        Case Else
            Resume Next
    End Select
End Sub

Sub beforePrint()
    beforePrinting
    Application.Dialogs(xlDialogPrint).Show
    afterPrinting
End Sub

Sub beforePrintPreview()
    beforePrinting
    ThisWorkbook.PrintPreview
    afterPrinting
End Sub

Sub afterPrinting()
    ToggleAutoCalculate False
    'unhide the buttons of the main scoreboard
    ToggleButtonVisible True
    'make the cells on the main scoreboard yellow
    For i = 1 To 6
        Dim strSheetName As String
        For j = 1 To (innings - 1)
            strSheetName = "Innings " & j
            With Worksheets(strSheetName)
                .Cells(1, i).Font.ColorIndex = ciYellow
                .Cells(15, i).Font.ColorIndex = ciYellow
                .Shapes(1).Visible = msoTrue
                .Shapes(3).Visible = msoTrue
                .Shapes(4).Visible = msoTrue
            End With
        Next j

        shtMainScoreboard.Cells(1 + 1, i).Font.ColorIndex = ciYellow
        shtMainScoreboard.Cells(1 + 15, i).Font.ColorIndex = ciYellow
        'Set the colour for the add
        shtMainScoreboard.Range("A17:A20").Font.ColorIndex = shtMainScoreboard.Range("A17:A20").Interior.ColorIndex

    Next i
    shtGraphs.DisplayPageBreaks = False
    'now update the graphs
    SetGraphColor GraphDisplayColor
    ToggleAutoCalculate True
End Sub

Sub beforePrinting()
    ToggleAutoCalculate False
        SetGraphColor GraphPrintColor
    'hide the buttons of the main scoreboard
    ToggleButtonVisible False

    For i = 1 To 6
        Dim strSheetName As String
        For j = 1 To innings - 1
            strSheetName = "Innings " & j
            With Worksheets(strSheetName)
                .Cells(1, i).Font.ColorIndex = ciWhite
                .Cells(15, i).Font.ColorIndex = ciWhite
                .Shapes(1).Visible = msoFalse
                .Shapes(3).Visible = msoFalse
                .Shapes(4).Visible = msoFalse
            End With
        Next j
        shtMainScoreboard.Cells(1 + 1, i).Font.ColorIndex = ciWhite
        shtMainScoreboard.Cells(1 + 15, i).Font.ColorIndex = ciWhite
    Next i
    'unhide the scorebook add
    shtMainScoreboard.Range("A17:A20").Font.ColorIndex = vbBlack

    ToggleAutoCalculate True
End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    SaveVars
    Dim strSaveAs As String
    If SaveAsUI = True And Me.FileFormat = xlTemplate Then
        Cancel = True
        Application.EnableEvents = False
        'Not sure of FileFilter
        strSaveAs = Application.GetSaveAsFilename _
        (FileFilter:="Excel Macro-Enabled Workbook(*.xlsm) *.xlsm")
        Me.SaveAs strSaveAs
        Application.EnableEvents = True
    End If
End Sub

Private Function NewFindFile() As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = "Locate the scorebook help file 'ScorebookHelp.chm'"
        .Filters.Add "Help Files", "*.chm"
        .AllowMultiSelect = False
        .Show
        If .SelectedItems.count = 0 Then
            NewFindFile = ""
        Else
            NewFindFile = .SelectedItems(1)
        End If
    End With
End Function

Public Function locateHelp() As Boolean
    locateHelp = False
    
    'check that we have the correct location for the scorebook
    Dim path As String
    Dim fs, f, f1, dt As Double, userCode As Variant, storedPassword As Variant, realPassword As Long
    Set fs = CreateObject("Scripting.FileSystemObject")
    path = GetSetting(strSCOREBOOK_TITLE, "Location", "Path", "C:\L&W_Scorebook\ScorebookHelp.chm") 'Get the location of the Scorebook
    While path = "" Or fs.FileExists(path) = False
        If isOldExcelVersion Then
            path = Application.InputBox("Enter the full path for the file ScorebookHelp.chm: (eg. c:\Program Files\LW_Scorebook\ScorebookHelp.chm)", _
                strSCOREBOOK_TITLE, path, Type:=2)
            If path = "False" Then path = ""
        Else
            path = NewFindFile
        End If
        If path = "" Then Exit Function
    Wend
    SaveSetting strSCOREBOOK_TITLE, "Location", "Path", path
    ChangeXLIcons
    locateHelp = True
End Function

Private Sub Workbook_Open()
    Dim count As Integer
    maxOvers = maxOversFullVersion
    
    Dim bBackground As Boolean
    bBackground = isHiddenMode
    
    'set up the menus and toolbars
    Dim SubMenu As CommandBarControl
    Dim newButton As CommandBarControl
    Dim MenuBar As CommandBar

    
    If Not bRelease = True Then
        Application.CommandBars("Worksheet Menu Bar").Reset
        count = Application.CommandBars.count
        For i = 1 To count
            Set MenuBar = Application.CommandBars(i)
            MenuBar.Enabled = True
        Next i
        With Application
            .DisplayStatusBar = True
            .DisplayFormulaBar = True
        End With
    ElseIf Not bBackground Then
        Dim openWorkbookCount As Integer
        openWorkbookCount = Application.Workbooks.count
        For i = openWorkbookCount To 1 Step -1
            If Not Application.Workbooks(i) Is ThisScorebook Then _
                    Application.Workbooks(i).Close
        Next i
        ThisScorebook.Activate
      
        'Hide the tool bars but remember which ones were visible
        ReDim arrToolBar(1 To Application.CommandBars.count)
        For count = 1 To Application.CommandBars.count
            Set MenuBar = Application.CommandBars(count)
            arrToolBar(count) = MenuBar.Visible
            MenuBar.Enabled = False
        Next count
        
        Set MenuBar = Application.CommandBars("Worksheet Menu Bar")
        MenuBar.Enabled = True
        MenuBar.Reset
        MenuBar.Visible = True
        For Each SubMenu In MenuBar.Controls
            If SubMenu.Caption = "&View" Then
                For Each item In SubMenu.Controls
                    If Not (item.Caption = "&Normal" Or _
                       item.Caption = "&Page Break Preview" Or _
                       item.Caption = "F&ull Screen" Or _
                       item.Caption = "&Zoom..." Or _
                       item.Caption = "&Status Bar") _
                        Then item.Delete True
                Next item
            ElseIf SubMenu.Caption = "&File" Then
                For Each item In SubMenu.Controls
                    If item.Caption <> "&New..." And _
                       item.Caption <> "&New Game..." And _
                       item.Caption <> "&Close" And _
                       item.Caption <> "&Open..." And _
                       item.Caption <> "&Save" And _
                       item.Caption <> "Save &As..." And _
                       item.Caption <> "E&xit" And _
                       item.Caption <> "Page Set&up..." And _
                       item.Caption <> "Print Pre&view" And _
                       item.Caption <> "&Print..." And _
                       item.Caption <> "Print Pre&view" And _
                       IsNumeric(Mid(item.Caption, 2, 1)) <> True And _
                       item.Visible <> False _
                        Then item.Delete True
                    If item.Caption = "&New..." Then
                        item.OnAction = "shtMainScoreboard.cmdNewgame_Click"
                        item.Caption = "&New Game..."
                    ElseIf item.Caption = "&Print..." Then
                        item.OnAction = "ThisScorebook.beforePrint"
                    ElseIf item.Caption = "Print Pre&view" Then
                        item.OnAction = "ThisScorebook.beforePrintPreview"
                    End If
                Next item
                SubMenu.Controls.Add before:=5
                With SubMenu.Controls(5)
                    .Caption = "Save Co&mpressed"
                    .OnAction = "QuerySaveCompressed"
                    .FaceId = FaceID_Compress
                End With
            ElseIf SubMenu.Caption = "&Window" Then
                For Each item In SubMenu.Controls
                    If item.Caption <> "&New Window" And _
                       item.Caption <> "&Arrange..." And _
                       item.Caption <> "&Split" And _
                       IsNumeric(Mid(item.Caption, 2, 1)) <> True And _
                       item.Visible <> False _
                        Then item.Delete True
                Next item
            ElseIf SubMenu.Caption = "&Edit" Then
                For Each item In SubMenu.Controls
                    If item.Caption <> "&Copy" And _
                       item.Caption <> "&Find..." _
                        Then item.Delete True
                Next item
                Set item = SubMenu.Controls.Add(Type:=msoControlButton, before:=1, Temporary:=True)
                With item
                    .OnAction = "UndoClick"
                    .Caption = "&Undo"
                    .ShortcutText = "Ctl+Z"
                    .FaceId = FaceID_Undo
                    .Enabled = False
                End With
                SubMenu.Controls(2).BeginGroup = False
                SubMenu.Controls(3).BeginGroup = False
                Set item = SubMenu.Controls.Add(Type:=msoControlButton, Temporary:=True)
                With item
                    .OnAction = "shtMainScoreboard.ChangeTarget"
                    .Caption = "&Target Runs..."
                    .Enabled = False
                    .BeginGroup = True
                End With
                Set item = SubMenu.Controls.Add(Type:=msoControlButton, Temporary:=True)
                With item
                    .OnAction = "shtMainScoreboard.ChangeTotalOvers"
                    .Caption = "Total &Overs..."
                    .Enabled = True
                End With
                Set item = SubMenu.Controls.Add(Type:=msoControlButton, Temporary:=True)
                With item
                    .OnAction = "ThisScorebook.EditColourScheme"
                    .Caption = "Color &Scheme..."
                    .Enabled = True
                    .FaceId = FaceID_Colours
                    .BeginGroup = True
                End With
            ElseIf SubMenu.Caption = "&Help" Then
                For Each item In SubMenu.Controls
                    item.Delete
                Next item 'Help menu items added below!
            Else
                SubMenu.Visible = False
            End If
        Next SubMenu
        'Add the stuff to the help menu!
        Set SubMenu = MenuBar.Controls("Help")
        Set newButton = SubMenu.Controls.Add(Type:=msoControlButton, before:=1, Temporary:=True)
        With newButton
            .Caption = "&About the Scorebook"
            .OnAction = "ShowAbout"
        End With
        Set newButton = SubMenu.Controls.Add(Type:=msoControlButton, ID:=FaceID_Help, before:=1, Temporary:=True)
        With newButton
            .Caption = "&Scorebook Help"
            .OnAction = "DisplayContextHelp"
            .ShortcutText = "F1"
        End With
        With Application
            bOldDisplayFullScreen = .DisplayFullScreen
            .DisplayFullScreen = False
            .Caption = strSCOREBOOK_TITLE
            bOldDisplayStatusBar = .DisplayStatusBar
            .DisplayStatusBar = False
            bOldWindowState = .WindowState
            .WindowState = xlMaximized
            bOldDisplayFormulaBar = .DisplayFormulaBar
            .DisplayFormulaBar = False
            .ActiveWindow.DisplayHeadings = False
        End With
    End If
    ActiveWorkbook.Unprotect "laverwood"
    
    If Not bBackground Then
    
        shtMainScoreboard.Activate
        ToggleAutoCalculate False
        'set the oversremaining combo
        With shtMainScoreboard
            .cmbOversRemaining.AddItem strOVERSREMAININGDAY
            .cmbOversRemaining.AddItem strOVERSREMAINING1ST
            .EnableSelection = xlNoRestrictions
            .ScrollArea = "$A$1:$AD$32"
            .PageSetup.PrintArea = "$A$2:$AD$32"
        End With
        With shtInnings1
            .ScrollArea = "$A$1:$V$31"
            .PageSetup.PrintArea = .ScrollArea
        End With
        With shtGraphs
            .EnableSelection = xlNoSelection
            .ScrollArea = "a1:o186"
        End With
        With shtDetails
            .EnableSelection = xlNoRestrictions
            .ScrollArea = "a1:cz144"
            .PageSetup.PrintArea = "A2:M36"
            .PageSetup.FitToPagesWide = 1
            .PageSetup.Zoom = False
            .DisplayPageBreaks = False
        End With
        With shtBallDetails
            .EnableSelection = xlNoRestrictions
            .ScrollArea = "a1:l" & maxOversFullVersion + 4
        End With
        With shtBallDetails1
            .EnableSelection = xlNoRestrictions
            .ScrollArea = "a1:k" & maxOversFullVersion + 4
        End With
        With shtOverDetails
            .EnableSelection = xlNoRestrictions
            .ScrollArea = "a1:s" & maxOversFullVersion + 4
        End With
        With shtOverDetails1
            .EnableSelection = xlNoRestrictions
            .ScrollArea = "a1:n" & maxOversFullVersion + 4
        End With
        shtInnings1.EnableSelection = xlNoRestrictions
        shtData.EnableSelection = xlNoRestrictions
        shtGraphData.EnableSelection = xlNoRestrictions
        shtSavedData.EnableSelection = xlNoRestrictions
        'check if a blank template is being opened or if the date is the special one or if its the trial version
        If shtSavedData.Cells(1, 2) = "" Or Not bRelease Then
            shtMainScoreboard.cmbOversRemaining.Enabled = False
            shtMainScoreboard.cmbPartnership.Enabled = False
            ButtonEnabled False
            With shtMainScoreboard
                .cmdNewgame.Enabled = True
                .cmdNewbatter.Visible = False
                .cmdNewgame.Caption = "New Game"
            End With
            'only do this if its not the trial version
                shtGraphs.Visible = xlSheetHidden
                shtData.Visible = xlSheetHidden
                shtInnings1.Visible = xlSheetHidden
                shtGraphData.Visible = xlSheetHidden
                shtSavedData.Visible = xlSheetHidden
                chtSkyScraper.Visible = xlSheetHidden
                chtSS2.Visible = xlSheetHidden
            BattingT = 1 'must be set now incase the user tries to change colours!
            BowlingT = 2
        Else
            LoadVars
            'disable the menu items if needed
            If Totalballs > 0 Then shtMainScoreboard.cmdUndo.Enabled = True _
                Else shtMainScoreboard.cmdUndo.Enabled = False
            shtMainScoreboard.cmdNewbatter.Visible = False
            If BallNo = 0 And bMatchEnded = False Then shtMainScoreboard.cmdNewBowler.Enabled = True _
                Else shtMainScoreboard.cmdNewBowler.Enabled = False
        End If
        LoadColourIndexArray
        'change icons
        ThisScorebook.Activate
        locateHelp
        Application.OnKey "^z", "UndoClick"
        Application.OnKey "{F1}", "DisplayContextHelp"
        ToggleAutoCalculate True
        shtMainScoreboard.Range("B16").Activate
        If bRelease Or Not bBackground Then
            ActiveWorkbook.Unprotect "laverwood"
            If isOldExcelVersion Then
                shtMainScoreboard.Protect UserInterfaceOnly:=True
                shtOverDetails.Protect UserInterfaceOnly:=True
                shtOverDetails1.Protect UserInterfaceOnly:=True
                shtBallDetails.Protect UserInterfaceOnly:=True
                shtBallDetails1.Protect UserInterfaceOnly:=True
                shtDetails.Protect UserInterfaceOnly:=True
                shtGraphs.Protect UserInterfaceOnly:=True
                shtInnings1.Protect UserInterfaceOnly:=True
            Else
                NewProtect
            End If
            ActiveWorkbook.Protect "laverwood"
        Else
            ActiveWorkbook.Unprotect "laverwood"
            shtMainScoreboard.Unprotect
            shtOverDetails.Unprotect
            shtOverDetails1.Unprotect
            shtBallDetails.Unprotect
            shtBallDetails1.Unprotect
            shtDetails.Unprotect
            shtGraphs.Unprotect
            shtInnings1.Unprotect
        End If
        
    End If
    
    'if this is the first time we are opening the file then we want to start a new game to prevent a crash
    If StrComp(ActiveWorkbook.Worksheets("Main Scoreboard").Range("AG18").Value, "new", vbTextCompare) = 0 Then
        ActiveWorkbook.Worksheets("Main Scoreboard").Activate
        Call ActiveSheet.cmdNewgame_Click
        ActiveWorkbook.Worksheets("Main Scoreboard").Range("AG18").Value = "notnew"
    End If
        
End Sub

Sub NewProtect()
    shtMainScoreboard.Protect AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtOverDetails.Protect AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtOverDetails1.Protect AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtBallDetails.Protect AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtBallDetails1.Protect AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtDetails.Protect AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtGraphs.Protect AllowFormattingColumns:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
    shtInnings1.Protect AllowFormattingColumns:=True, AllowFormattingCells:=True, UserInterfaceOnly:=True
End Sub

Sub EditColourScheme()
    frmColourScheme.Show
End Sub

Function isHiddenMode() As Boolean
    isHiddenMode = GetSetting(strSCOREBOOK_TITLE, "config", "hidden", False)
End Function


Attribute VB_Name = "Undo_Save_Load"
Option Explicit
Dim i As Integer
Dim j As Integer
Dim k As Integer

Public Enum eRunType
    rtRuns
    rtByes
    rtLegByes
End Enum

Public Enum eBallType
    btLegal
    btWide
    btNoBall
End Enum

Public Enum eHowOut
    hoCAUGHT
    hoBOWLED
    hoLBW
    hoHITWICKET
    hoSTUMPED
    hoRUNOUT
    hoHANDLEDBALL
    hoOBSTRUCTINGFIELD
    hoHitBallTwice
    hoTIMEDOUT
    hoRETIREDOUT
    hoRETIRED
End Enum

Sub UndoWicket(mRuns As Integer, prevCode As Long, intBowler As Integer)
    Dim mNewBatter As Integer, mWhosOut As Integer, mRunType As Integer, mRetired As Integer
    Dim mBallType As Integer, mFielder As Integer, mHowOut As Integer, mCrossed As Integer
    'extract all the information from varOther
    mWhosOut = prevCode Mod 10
    prevCode = prevCode \ 10
    mRunType = prevCode Mod 10
    prevCode = prevCode \ 10
    mBallType = prevCode Mod 10
    prevCode = prevCode \ 10
    mFielder = prevCode Mod 100
    prevCode = prevCode \ 100
    mHowOut = prevCode Mod 100
    prevCode = prevCode \ 100
    mCrossed = prevCode Mod 10
    'mCrossed now contains 1 + 2 if the batsment crossed and the batsmen had previously retired hurt
    mRetired = mCrossed \ 2
    mCrossed = mCrossed Mod 2
    prevCode = prevCode \ 10
    mNewBatter = prevCode Mod 100
    prevCode = prevCode \ 100
    'prevcode should = 0 after this line
    prevCode = prevCode \ 10
    Debug.Assert (prevCode = 0)
    
    'subtract a wicket if the batsmen did not retire hurt
    If mHowOut < eHowOut.hoRETIRED Then Wickets = Wickets - 1
    
    'check if batsmen need to swap
    If mCrossed = 1 And mRuns Mod 2 = 0 Then
        If Not Wickets = 10 Then SwapBatsmen
    ElseIf mCrossed = False And mRuns Mod 2 = 1 Then
        If Not Wickets = 10 Then SwapBatsmen
    End If

    'check if the new batter was coming out of retirement
    If shtMainScoreboard.Cells(1 + 2 + mNewBatter, 15) = strRETIRED Then
        Retired = Retired + 1
    End If
    
    'update current batter  variables
    Dim ReplacedBatter As Integer
    Dim LastBatterOut As Integer
    If mHowOut = eHowOut.hoRETIRED Then
        'if a batsmen retires hurt then fielder is used to store who retired hurt
        LastBatterOut = mFielder
    Else
        LastBatterOut = Partnerships(Wickets + 1, 1, innings)
    End If
    ReplacedBatter = currBatters(mWhosOut + 1)
    currBatters(mWhosOut + 1) = LastBatterOut
    
    'check if bowler got a wicket
    If mHowOut <= eHowOut.hoSTUMPED Then shtMainScoreboard.Cells(1 + 20 + currBowlers(1), 5) = shtMainScoreboard.Cells(1 + 20 + currBowlers(1), 5) - 1
    'display the new total wickets
    shtMainScoreboard.Cells(1 + 15, 3) = Wickets
    'if the batsmen was not timed out or retired
    If mHowOut < eHowOut.hoTIMEDOUT Then
        'decrement the total balls bowled in this over
        BallsBowled = BallsBowled - 1
        'check if it was a noball or wide and update bowlers runs conceded
        If mBallType = eBallType.btWide Then 'wide
            UndoWide mRuns
        ElseIf mBallType = eBallType.btNoBall Then 'no ball
            If mRunType = eRunType.rtRuns Then
                UndoNoBall mRuns, "r"
            ElseIf mRunType = eRunType.rtByes Then
                UndoNoBall mRuns, "b"
            ElseIf mRunType = eRunType.rtLegByes Then
                UndoNoBall mRuns, "lb"
            End If
        Else
            If mRunType = eRunType.rtRuns Then
                UndoRuns mRuns
            ElseIf mRunType = eRunType.rtByes Then
                UndoByes mRuns
            ElseIf mRunType = eRunType.rtLegByes Then
                UndoLegByes mRuns
            End If
        End If
    End If

    'TODO: add stuff to update lastbatterout
    
    'delete batsmens howout if the batter had not retired hurt
    If mRetired = 1 Then
        shtMainScoreboard.Cells(1 + 2 + LastBatterOut, 15) = strRETIRED
    Else
        shtMainScoreboard.Cells(1 + 2 + LastBatterOut, 15) = ""
    End If
    
    'add the replaced batter back into the list
    frmNewBatter.cmbBatter.AddItem BatterNames(BattingT, ReplacedBatter), Retired
    'if the batsmen did not retire hurt
    If mHowOut <> eHowOut.hoRETIRED Then
        'remove the latest partnership
        RemovePartnership (LastBatterOut)
        'fall of wicket in batters stats
        shtMainScoreboard.Cells(1 + LastBatterOut + 2, 14) = ""
        shtMainScoreboard.Cells(1 + 16 + 1 + Wickets, (2 - innings Mod 2) * 3 + 7) = ""
    Else
        'decrement to say that a batsmen has not retired hurt
        Retired = Retired - 1
        'remove the batsmen from the new batters form
        frmNewBatter.cmbBatter.RemoveItem Retired
    End If
    'send in old batter
    If Wickets < 9 Then Oldbatterformats (ReplacedBatter)
    CurrBatterFormats
    'update wickets remaining
    shtMainScoreboard.Cells(1 + 21, 16) = 10 - Wickets
    shtMainScoreboard.Range("B16").Activate
End Sub
Function GetBowlerOrder(nBowler As Integer)
    For i = 1 To MaxBowlers
        If arrBowlers(i, 1) = nBowler Then
            GetBowlerOrder = i
            Exit Function
        End If
    Next i
End Function
Sub UndoClick()
If Totalballs > 0 Then
    ToggleAutoCalculate False
    'change caption of "End Innings button"
    If shtMainScoreboard.cmdNewgame.Caption = "End Innings" Then
        If innings = 1 Then shtMainScoreboard.cmdNewgame.Caption = "New Game" Else _
            shtMainScoreboard.cmdNewgame.Caption = "Innings " & innings - 1
    End If
    'enable the scoring buttons if theyre disabled
    If shtMainScoreboard.cmd0.Enabled = False Then ButtonEnabled True
    'declare some variables to store the data to undo
    Dim intBowler As Integer
    Dim varOther As Variant
    Dim intBallNo As Integer
    Dim runs As Integer
    Dim charType As String
    Dim prevType As String
    'get the data to undo
    With shtData
        intBallNo = .Cells(Totalballs + 2, innings * 6 - 4)
        runs = .Cells(Totalballs + 2, innings * 6 - 3)
        charType = .Cells(Totalballs + 2, innings * 6 - 2)
        If Totalballs > 1 Then prevType = .Cells(Totalballs + 1, innings * 6 - 2) Else prevType = "r"
        varOther = .Cells(Totalballs + 2, innings * 6 - 1)
        intBowler = .Cells(Totalballs + 2, innings * 6) Mod 100
        'clear the data row
    End With
    If charType <> "x" Then BallsBowled = BallsBowled - 1
    If runs >= 0 Then
        'check if we are moving into the previous over
        If BallNo = 0 Then
            'check if we need to undo a new over
            If (currBowlers(1) <> intBowler Or (Totalovers = OverNo And GameType <> TWOINNINGS) Or Wickets = maxWickets) Then
                NewoverUndo intBowler
            End If
        End If
        'swapbatsmen if batsmen crossover
        If charType <> "x" Then
            If runs Mod 2 = 1 And Not Left(varOther, 1) = "o" Then
                SwapBatsmen
            ElseIf Left(varOther, 1) = "o" And runs Mod 2 = 0 Then
                SwapBatsmen
            End If
        End If
    End If
    'update batting and bowling scorecards
    If charType = "w" Then
        UndoWide runs
    ElseIf charType = "nb" Then
        UndoNoBall runs, (varOther)
    ElseIf charType = "b" Then
        UndoByes runs
    ElseIf charType = "lb" Then
        UndoLegByes runs
    ElseIf charType = "r" Then
        UndoRuns runs
    ElseIf charType = "x" Then
        UndoWicket runs, (varOther), intBowler
    ElseIf charType = strENDDAY Then
        If BallNo = 0 Then CurrentDay = CurrentDay - 1
        TotalOversAdjustment = Abs(runs - ENDDAYCODE)
    ElseIf charType = strPENALTYRUNS Then
        UndoPenaltyRuns PENALTYRUNSCODE - runs
    ElseIf charType = strSWAPBATSMEN Then
        SwapBatsmen
    ElseIf charType = strENDOVER Then
        NewoverUndo
        BallNo = Abs(runs)
        Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) = Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) _
            + BallsPerOver - BallNo
        'do this so it doesnt delete a recent delivery
        runs = -200
    ElseIf charType = strCBEO Then
        OtherBowlersBalls = Abs(runs - CBEOCODE)
        'current bowlers have now been swapped
        arrBowlers(currBowlers(2), 4) = 0
        ClearRow
        UndoClick
        Exit Sub
    ElseIf charType = strCHANGEBOWLER Then
        'this stuff must be done in this order!
        Dim oldBowler As Integer
        oldBowler = currBowlers(1)
        OtherBowlersBalls = 0
        currBowlers(1) = intBowler
        ClearBowlersRunningTotal currBowlers(1)
        arrBowlers(currBowlers(1), 4) = 0
        currBowlers(2) = currBowlers(1)
        CurrBowlerformats oldBowler
        CheckRemoveBowler oldBowler
    ElseIf charType = strEXTRABALL Then
        BallNo = BallNo + 1
        Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) = _
            Partnerships(Wickets + 1, PARTNERSHIP_BALLS_ADJUSTMENT, innings) - 1
        OtherChecks
    End If
    ClearRow
    'check if we are at the start of a new over
    'this must be done after the wicket is updated
    If BallsBowled <= 0 Then
        shtMainScoreboard.cmdNewBowler.Enabled = True
    Else
        shtMainScoreboard.cmdNewBowler.Enabled = False
    End If
    'do other checks
    If runs > -100 Then UndoRecentDeliveries
    Totalruns = shtMainScoreboard.Cells(1 + 15, 2)
    UpdateTotals
    OutputBowlersOvers intBowler
    UpdateCurrentPartnership
    With shtData
        .Range(.Cells(Totalballs + 3, innings * 6 - 5), .Cells(Totalballs + 3, innings * 6)).Clear
    End With
    
    Buttonvalues False
End If
If Totalballs = 0 Then
    shtMainScoreboard.cmdNewbatter.Visible = True
    shtMainScoreboard.cmdUndo.Enabled = False
    Application.CommandBars("Worksheet Menu Bar").Controls("Edit").Controls(1).Enabled = False
End If
shtMainScoreboard.Activate
shtMainScoreboard.Range("B16").Activate
End Sub
Sub ClearRow()
    'clear row from data sheet
    For i = 5 To 0
        shtData.Cells(Totalballs + 2, innings * 6 - i) = ""
    Next i
    'undo the last ball
    Totalballs = Totalballs - 1
End Sub
Sub CheckRemoveBowler(ByVal oldBowler As Integer)
    'check if the bowler has not bowled any balls and must be deleted
    If arrBowlers(oldBowler, 2) <= 0 And arrBowlers(oldBowler, 4) = 0 Then
        arrBowlers(oldBowler, 1) = -1
        shtMainScoreboard.Cells(21 + oldBowler, 1) = ""
        For j = 2 To 8
            If Not j = 6 Then shtMainScoreboard.Cells(21 + oldBowler, j) = ""
        Next j
    End If
End Sub

Sub SaveVar(ByRef p As Integer, v As Variant)
    p = p + 1
    shtSavedData.Cells(p, 2) = v
End Sub

'this function saves all the variables onto a data sheet
Sub SaveVars()
If bRelease And innings > 1 Or Totalballs > 0 Then
    Dim Team As Integer
    Dim p As Integer
    'first cell tells us that a game has been saved
    SaveVar p, "Saved Game"
    'save the bool that tells us if a match has ended
    SaveVar p, bMatchEnded
    'save the OtherBowlersBalls
    SaveVar p, OtherBowlersBalls
    'save the Totaloversadjustment
    SaveVar p, TotalOversAdjustment
    'save the max days in the match
    SaveVar p, maxDays
    'save the maximum overs a team can bat in the first innings
    SaveVar p, MaxOvers1stInnings
    'save the follow on
    SaveVar p, FollowOn
    'save the total overs bowled in previous innings
    SaveVar p, OversPreviousInnings
    'save the current day the match is in
    SaveVar p, CurrentDay
    'save the total balls bowled in this over
    SaveVar p, BallsBowled
    'save the overs lasted by team 1
    
    SaveVar p, Overslasted
    'save the target being chased
    
    SaveVar p, Target
    SaveVar p, TargetOffset
    'save max balls per over
    
    SaveVar p, MaxBallsPerOver
    'save balls per over
    SaveVar p, BallsPerOver
    'set flags to make sure graphs will be reinitialized
    SaveVar p, bGraphsInitialized
    'set rule type for wides and noballs
    SaveVar p, WideRule
    SaveVar p, NoBallRule
    'set game type
    SaveVar p, GameType
    'this is set so that dots on graphs will be set for all overs
    SaveVar p, LastUpdatedGraphs
    SaveVar p, innings
    SaveVar p, BattingT
    SaveVar p, BowlingT
    SaveVar p, Totalovers
    SaveVar p, OversRemaining
    SaveVar p, BallNo
    SaveVar p, OverNo
    SaveVar p, OversVisible
    SaveVar p, fieldersPenaltyRuns
    SaveVar p, Wickets
    SaveVar p, Retired
    SaveVar p, Totalruns
    SaveVar p, Totalballs
    SaveVar p, TeamNames(1)
    SaveVar p, TeamNames(2)
    SaveVar p, TeamInitials(1)
    SaveVar p, TeamInitials(2)
    For Team = 1 To 2
        For i = 1 To MAXPLAYERS
            SaveVar p, BatterNames(Team, i)
        Next i
    Next Team
    SaveVar p, currBatters(1)
    SaveVar p, currBatters(2)
    SaveVar p, currBowlers(1)
    SaveVar p, currBowlers(2)
    For i = 0 To 11
        For j = 1 To innings
            If innings > maxInnings Then Exit For
            For k = 0 To 10
                SaveVar p, Partnerships(k, i, j)
            Next k
        Next j
    Next i
    For i = 1 To 11
        For j = 1 To 4
            SaveVar p, arrBowlers(i, j)
        Next j
    Next i
    'save stuff to do with retiring batsmen
    SaveVar p, Retired
    SaveVar p, frmNewBatter.NewBatter
    'save over no data
    For j = 1 To 2
        For k = 1 To innings
            If innings > maxInnings Then Exit For
            SaveVar p, TeamTotals(k, j)
            For i = 1 To Totalovers
                SaveVar p, OverScores(i, k, j)
            Next i
        Next k
    Next j
    If GameType = TWOINNINGS Then
        'save the innings totals
        For k = 1 To innings
            If innings > maxInnings Then Exit For
            SaveVar p, TeamTotals(k, 3)
        Next k
    End If
End If
End Sub

Function LoadVar(ByRef pos As Integer) As Variant
    pos = pos + 1
    LoadVar = shtSavedData.Cells(pos, 2)
End Function

Sub LoadVars()
    Dim Team As Integer
    Dim p As Integer
    'first cell tells us that a game has been saved
    If LoadVar(p) = "Saved Game" Then
        'load the bool that tells us if a match has ended
        bMatchEnded = LoadVar(p)
        'load the OtherBowlersBalls
        OtherBowlersBalls = LoadVar(p)
        'load the Totaloversadjustment
        TotalOversAdjustment = LoadVar(p)
        'load the max days in match
        maxDays = LoadVar(p)
        'load the max overs that can be batted in the first innings
        MaxOvers1stInnings = LoadVar(p)
        'load the follow on
        FollowOn = LoadVar(p)
        'load the oversbowled in previous innings in this over
        OversPreviousInnings = LoadVar(p)
        'load the current day
        CurrentDay = LoadVar(p)
        'load the total balls bowled in this over
        BallsBowled = LoadVar(p)
        'load the overs lasted by team 1
        Overslasted = LoadVar(p)
        'load the target being chased
        Target = LoadVar(p)
        TargetOffset = LoadVar(p)
        'load max balls per over
        MaxBallsPerOver = LoadVar(p)
        'load balls per over
        BallsPerOver = LoadVar(p)
        'set flags to make sure graphs will be reinitialized
        bGraphsInitialized = LoadVar(p)
        'set rule type for wides and noballs
        WideRule = LoadVar(p)
        NoBallRule = LoadVar(p)
        'set game type
        GameType = LoadVar(p)
        'this is set so that dots on graphs will be set for all overs
        LastUpdatedGraphs = LoadVar(p)
        innings = LoadVar(p)
        BattingT = LoadVar(p)
        BowlingT = LoadVar(p)
        Totalovers = LoadVar(p)
        OversRemaining = LoadVar(p)
        BallNo = LoadVar(p)
        OverNo = LoadVar(p)
        OversVisible = LoadVar(p)
        fieldersPenaltyRuns = LoadVar(p)
        Wickets = LoadVar(p)
        Retired = LoadVar(p)
        Totalruns = LoadVar(p)
        Totalballs = LoadVar(p)
        TeamNames(1) = LoadVar(p)
        TeamNames(2) = LoadVar(p)
        TeamInitials(1) = LoadVar(p)
        TeamInitials(2) = LoadVar(p)
        For Team = 1 To 2
            For i = 1 To MAXPLAYERS
                BatterNames(Team, i) = LoadVar(p)
            Next i
        Next Team
        currBatters(1) = LoadVar(p) 'pos = 41
        currBatters(2) = LoadVar(p)
        currBowlers(1) = LoadVar(p)
        currBowlers(2) = LoadVar(p)
        For i = 0 To 11
            For j = 1 To innings
                If innings > maxInnings Then Exit For
                For k = 0 To 10
                    Partnerships(k, i, j) = LoadVar(p)
                Next k
            Next j
        Next i
        For i = 1 To 11
            For j = 1 To 4
                arrBowlers(i, j) = LoadVar(p)
            Next j
        Next i
        'load stuff to do with retiring batsmen
        Retired = LoadVar(p)
        frmNewBatter.NewBatter = LoadVar(p)
        'load over scores data
        For j = 1 To 2
            For k = 1 To innings
                If innings > maxInnings Then Exit For
                TeamTotals(k, j) = LoadVar(p)
                For i = 1 To Totalovers
                    OverScores(i, k, j) = LoadVar(p)
                Next i
            Next k
        Next j
        If GameType = TWOINNINGS Then
            'save the innings totals
            For k = 1 To innings
                If innings > maxInnings Then Exit For
                TeamTotals(k, 3) = LoadVar(p)
            Next k
        End If
    End If
    'set up the partnership combo
    For i = 0 To Wickets
        If i <= 10 Then AddEntryPartnershipCombo (i)
    Next i
    'set up the next batsmen combo
    Load frmNewBatter
    'when the form is loaded all batters are added
    'so remove those who are already out
    'For i = 0 To Wickets + 1
    '    frmNewBatter.cmbBatter.RemoveItem i
    'Next i
End Sub

Sub ToggleAutoCalculate(bSet As Boolean)
    Application.ScreenUpdating = bSet
End Sub

Sub QuerySaveCompressed()
    If MsgBox(strSAVE_COMPRESSED_PROMPT, vbYesNo, strSCOREBOOK_TITLE) = vbNo Then _
        SaveCompressed False Else SaveCompressed
End Sub

Sub PasteRange(ByRef sht As Worksheet, rng As String, Optional row As Integer = 0, Optional col As Integer)
    With sht.Range(rng)
        .PasteSpecial m_xlPasteColumnWidths
        .PasteSpecial xlPasteValues
        .PasteSpecial xlPasteFormats
        .BorderAround Weight:=xlMedium
    End With
    sht.Activate
    sht.Range("A1").Select
    If row > 0 Or col > 0 Then
        With ActiveWindow
            .Split = False
            .SplitColumn = col
            .SplitRow = row
            .FreezePanes = True
        End With
    End If
End Sub

Sub SaveCompressed(Optional bIncludeGraphs As Boolean = True)
    Dim sht As Worksheet, oldTotalOvers As Integer, rng As String, fName As Variant
    fName = Application.GetSaveAsFilename(Left(ThisWorkbook.name, Len(ThisWorkbook.name) - 4) & "(Compressed)", "Microsoft Office Excel Workbook (*.xls), *.xls")
    If fName = False Then Exit Sub
    Application.ScreenUpdating = False
    Set wkb = CreateObject("Excel.Sheet")
    
    oldTotalOvers = Totalovers: If GameType = TWOINNINGS Then Totalovers = maxOvers
    If GameType = TWOINNINGS Then rng = "a1:cz144" Else rng = "A1:W72"
    shtDetails.Range(rng).Copy
    Set sht = wkb.Sheets(1)
    PasteRange sht, rng, 0, 3
    sht.name = "Details"
    
    wkb.Sheets.Add count:=2
    shtBallDetails.Range("A2:K" & (3 + Totalovers)).Copy
    Set sht = wkb.Sheets(2)
    PasteRange sht, ("A1:K" & (2 + Totalovers)), 2, 0
    If GameType = TWOINNINGS And innings > 2 Then sht.name = "Ball Details 2" Else sht.name = "Ball Details"
    
    shtOverDetails.Range("A2:R" & (3 + Totalovers)).Copy
    Set sht = wkb.Sheets(1)
    PasteRange sht, ("A1:R" & (2 + Totalovers)), 2, 0

    If GameType = TWOINNINGS And innings > 2 Then sht.name = "Over Details 2" Else sht.name = "Over Details"
    If innings > 2 And GameType = TWOINNINGS Then
        wkb.Sheets.Add
        shtBallDetails1.Range("A2:K" & (3 + Totalovers)).Copy
        Set sht = wkb.Sheets(1)
        PasteRange sht, ("A1:K" & (2 + Totalovers)), 2, 0
        sht.name = "Ball Details 1"
        
        wkb.Sheets.Add
        shtOverDetails1.Range("A2:N" & (3 + Totalovers)).Copy
        Set sht = wkb.Sheets(1)
        PasteRange sht, ("A1:N" & (2 + Totalovers)), 2, 0
        sht.name = "Over Details 1"
    End If
    If bIncludeGraphs = True Then
        wkb.Sheets.Add
        Set sht = wkb.Sheets(1)
        'copy the graphs
        chtWorm.CopyPicture
        sht.Activate: sht.Cells(2, 1).Activate
        sht.Paste
        chtRunRate.CopyPicture
        sht.Activate: sht.Cells(39, 1).Activate
        sht.Paste
        chtSkyScraper.CopyPicture
        sht.Activate: sht.Cells(79, 1).Activate
        sht.Paste
        chtSS1.CopyPicture
        sht.Activate: sht.Cells(116, 1).Activate
        sht.Paste
        If innings > 1 Then
            chtSS2.CopyPicture
            sht.Activate: sht.Cells(153, 1).Activate
            sht.Paste
        End If
        sht.Cells(1, 1).Activate
        ActiveWindow.DisplayGridlines = False
        If GameType = TWOINNINGS And innings > 2 Then sht.name = "Graphs 2" Else sht.name = "Graphs"
        Dim Grph As Shape
        For Each Grph In sht.Shapes
            Grph.Line.ForeColor.RGB = RGB(0, 0, 0)
            Grph.Line.Visible = msoTrue
            Grph.Line.Weight = 3
            Grph.Width = sht.Shapes(2).Width
        Next Grph
        If innings > 2 And GameType = TWOINNINGS Then
            wkb.Sheets.Add
            Set sht = wkb.Sheets(1)
            shtGraphs.Shapes(1).Copy
            sht.Activate: sht.Cells(2, 1).Activate
            sht.Paste
            shtGraphs.Shapes(2).Copy
            sht.Activate: sht.Cells(39, 1).Activate
            sht.Paste
            shtGraphs.Shapes(3).Copy
            sht.Activate: sht.Cells(79, 1).Activate
            sht.Paste
            shtGraphs.Shapes(4).Copy
            sht.Activate: sht.Cells(116, 1).Activate
            sht.Paste
            shtGraphs.Shapes(5).Copy
            sht.Activate: sht.Cells(153, 1).Activate
            sht.Activate: sht.Range("A1").Select
            ActiveWindow.DisplayGridlines = False
            sht.name = "Graphs 1"
        End If
    End If
    If innings < 3 And GameType = ONEINNINGS Or innings < 5 And GameType = TWOINNINGS Then
        'copy the main scoreboard
        wkb.Sheets.Add
        shtMainScoreboard.Range("A2:AD32").Copy
        Set sht = wkb.Sheets(1)
        PasteRange sht, ("A1:AD31")
         'now to put a little advertising on the sheet
        CopyAdds sht, innings
    End If
    If innings >= 2 Then
        For i = innings - 1 To 1 Step -1
            'copy the second innings scoresheet
            wkb.Sheets.Add
            ThisWorkbook.Worksheets("Innings " & i).Range("A1:V31").Copy
            Set sht = wkb.Sheets(1)
            PasteRange sht, ("A1:V31")
            CopyAdds sht, i
        Next i
    End If
    
    
    wkb.Colors = ThisWorkbook.Colors
    Totalovers = oldTotalOvers
    Application.DisplayAlerts = False
    'could modify this so that it queries the user to confirm if they want to overwrite ?HOW?
    wkb.Close SaveChanges:=True, Filename:=fName
    Application.DisplayAlerts = True
    Set sht = Nothing
    Set wkb = Nothing
    Application.Windows(1).WindowState = xlMaximized
    Application.ScreenUpdating = True
End Sub

'This method copies the adverts for laver&woods onto the scoresheets
'If this method is modified... run it on shtInnings1 with the following code
'thisscorebook.Unprotect "laverwood"
'CopyAdds shtInnings1, 1
Sub CopyAdds(sht As Worksheet, innings As Integer)
    With sht.Range("A16:H19")
        .HorizontalAlignment = xlCenter
        .Merge True
        .Font.Size = 10
        .Font.Bold = True
    End With
    With sht.Range("A16")
        .Value = "Laver & Wood Cricket Scorebook- Innings " & innings
        .Font.Size = 11
    End With
    With sht
        .Hyperlinks.Add Anchor:=.Range("A17"), _
            Address:=strURL, _
            TextToDisplay:="Download free at " & strWEBPAGE, _
            ScreenTip:="Home of the Laver & Wood Cricket Scorebook"
        .Hyperlinks.Add Anchor:=.Range("A18"), _
            Address:="mailto: " & strEMAIL & "?subject=Cricket Scorebook", _
            TextToDisplay:="Contact the creator at " & strEMAIL, _
            ScreenTip:="Email Michael Walmsley the creator"
        .Hyperlinks.Add Anchor:=.Range("A19"), _
            Address:="http://www.laverwood.co.nz", _
            TextToDisplay:="Visit Laver & Wood cricket bat manufacurers", _
            ScreenTip:="Finest quality cricket bats made to your specification"
        .name = "Innings " & innings
    End With
End Sub

Attribute VB_Name = "chtRunRate"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "chtSS1"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "chtSS2"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "chtSkyScraper"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "chtWorm"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "frmAbout"
Attribute VB_Base = "0{74FE9F4A-5ED4-46F8-AFEF-3399F5BEC825}{BD62815C-3B67-4A47-BF7C-A594007CEE22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Private Sub cmdOK_Click()
    frmAbout.Hide
End Sub

Attribute VB_Name = "frmColourScheme"
Attribute VB_Base = "0{A8EA58E1-71D3-4897-8EBF-64700199FE30}{7082E7E0-9C5D-4588-AAD2-0D9D85CA3BC6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub cmdApply_Click()
    frmColourScheme.Hide
End Sub

Private Sub cmdCancel_Click()
    Dim i As Integer, j As Integer
    For i = 1 To Size1
        For j = 1 To Size2
        If arrColourIndex(i, j) <> 0 Then
            If ThisWorkbook.Colors(arrColourIndex(i, j)) <> arrOldRGBs(i, j) Then _
                ThisWorkbook.Colors(arrColourIndex(i, j)) = arrOldRGBs(i, j)
        End If
        Next j
    Next i
    frmColourScheme.Hide
End Sub

Private Sub cmdDark1_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(BattingT, Dark)
    cmdDark1.BackColor = ThisWorkbook.Colors(arrColourIndex(BattingT, Dark))
End Sub

Private Sub cmdDark2_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(BowlingT, Dark)
    cmdDark2.BackColor = ThisWorkbook.Colors(arrColourIndex(BowlingT, Dark))
End Sub

Private Sub cmdDarkB_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Borders, Dark)
    cmdDarkB.BackColor = ThisWorkbook.Colors(arrColourIndex(Borders, Dark))
End Sub

Private Sub cmdDarkF_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Borders, TitleBar)
    cmdDarkF.BackColor = ThisWorkbook.Colors(arrColourIndex(Borders, TitleBar))
End Sub

Private Sub cmdHelp_Click()
    'TODO add the correct help file
    DisplayContextHelp HID_EDITCOLOURSCHEME
End Sub

Private Sub cmdLight1_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(BattingT, Light)
    cmdLight1.BackColor = ThisWorkbook.Colors(arrColourIndex(BattingT, Light))
End Sub

Private Sub cmdLight2_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(BowlingT, Light)
    cmdLight2.BackColor = ThisWorkbook.Colors(arrColourIndex(BowlingT, Light))
End Sub

Private Sub cmdLightB_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Borders, Light)
    cmdLightB.BackColor = ThisWorkbook.Colors(arrColourIndex(Borders, Light))
End Sub

Private Sub cmdLightF_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Fonts, Light)
    cmdLightF.BackColor = ThisWorkbook.Colors(arrColourIndex(Fonts, Light))
End Sub

Private Sub cmdMedium1_Click()
    Application.Dialogs(xlDialogEditColor).Show (arrColourIndex(BattingT, Medium))
    shtMainScoreboard.cmbPartnership.BackColor = ThisWorkbook.Colors(arrColourIndex(BattingT, Medium))
    cmdMedium1.BackColor = ThisWorkbook.Colors(arrColourIndex(BattingT, Medium))
End Sub

Private Sub cmdMedium2_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(BowlingT, Medium)
    cmdMedium2.BackColor = ThisWorkbook.Colors(arrColourIndex(BowlingT, Medium))
End Sub

Private Sub cmdMediumB_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Borders, Medium)
    shtMainScoreboard.cmbOversRemaining.BackColor = ThisWorkbook.Colors(arrColourIndex(Borders, Medium))
    cmdMediumB.BackColor = ThisWorkbook.Colors(arrColourIndex(Borders, Medium))
End Sub

Private Sub cmdNonStriker_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Fonts, NonStriker)
    cmdNonStriker.BackColor = ThisWorkbook.Colors(arrColourIndex(Fonts, NonStriker))
End Sub

Private Sub cmdReset_Click()
    ThisWorkbook.ResetColors
    frmColourScheme.Hide
End Sub

Private Sub cmdStriker_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Fonts, Striker)
    cmdStriker.BackColor = ThisWorkbook.Colors(arrColourIndex(Fonts, Striker))
End Sub

Private Sub cmdTotalScore_Click()
    Application.Dialogs(xlDialogEditColor).Show arrColourIndex(Fonts, TotalScore)
    cmdTotalScore.ForeColor = ThisWorkbook.Colors(arrColourIndex(Fonts, TotalScore))
End Sub

Private Sub UserForm_Activate()
    'fraBatters.Caption = Teamnames(BattingT)
    'fraBowlers.Caption = Teamnames(BowlingT)
    Dim i As Integer, j As Integer
    For i = 1 To Size1
        For j = 1 To Size2
            If arrColourIndex(i, j) <> 0 Then arrOldRGBs(i, j) = ThisWorkbook.Colors(arrColourIndex(i, j))
        Next j
    Next i
    
    cmdDark1.BackColor = arrOldRGBs(BattingT, Dark)
    cmdLight1.BackColor = arrOldRGBs(BattingT, Light)
    cmdMedium1.BackColor = arrOldRGBs(BattingT, Medium)
    cmdDark2.BackColor = arrOldRGBs(BowlingT, Dark)
    cmdLight2.BackColor = arrOldRGBs(BowlingT, Light)
    cmdMedium2.BackColor = arrOldRGBs(BowlingT, Medium)
    cmdDarkB.BackColor = arrOldRGBs(Borders, Dark)
    cmdLightB.BackColor = arrOldRGBs(Borders, Light)
    cmdMediumB.BackColor = arrOldRGBs(Borders, Medium)
    
    cmdStriker.ForeColor = arrOldRGBs(Fonts, Striker)
    cmdNonStriker.ForeColor = arrOldRGBs(Fonts, NonStriker)
    cmdLightF.ForeColor = arrOldRGBs(Fonts, Light)
    cmdDarkF.ForeColor = arrOldRGBs(Fonts, TitleBar)
    cmdTotalScore.ForeColor = arrOldRGBs(Fonts, TotalScore)
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    shtMainScoreboard.cmbPartnership.BackColor = ThisWorkbook.Colors(arrColourIndex(BattingT, Medium))
    shtMainScoreboard.cmbOversRemaining.BackColor = ThisWorkbook.Colors(arrColourIndex(Borders, Medium))
End Sub
Attribute VB_Name = "frmEditBallDetails"
Attribute VB_Base = "0{6F8BDE39-396C-4190-B850-2B63F3378292}{01515695-DD6A-474F-BDEC-94A251F6C525}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim m_WasMaiden As Boolean
Public m_Innings As Integer, m_OverNo As Integer, m_BowlersName As String
Dim m_FirstBallRow As Integer, m_LastBallRow As Integer, m_FirstBallNo As Integer, m_LastBallNo As Integer
Dim m_bFollowedOn As Boolean, m_LastTab As Integer
Dim m_BattingTeam As Integer, m_BowlingTeam As Integer
Public m_TargetBallDetails As Range
Dim m_InsertedBalls As Integer, m_LegalBalls As Integer, m_OldRuns As Integer, m_bOldOneShort As Boolean
Dim m_arrModifiedValues() As Variant
Dim m_arrInitialValues() As Variant
Const cnRuns = 1
Const cCharType = 2
Const cvOther = 3
Const cnBowler = 4
Const cnBatter = 5
Const cnWicket = 6
Const cstrBowler = 7
Const cstrBatter = 8
Const cnBattersStrLen = 9
Const cnBowlersOvers = 10
Const cnNetBowlersRuns = 11
Const cnNetTotalRuns = 12
Const cnNetBattersRuns = 13
Const cnCorresponding = 14
Const cbLegal = 15
Const cnSize = 15

Private Sub CalculateNets()
    Dim prevCode As Long, mRunType As Integer, mBallType As Integer
    Dim nBallNo As Integer, nBowlersNet As Integer, nBattersNet As Integer, nTotalNet As Integer, nRuns As Integer
    Dim cWideRuns As Integer, cNoBallRuns As Integer, nCorresponding As Integer
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow
        nBowlersNet = 0: nTotalNet = 0: nBattersNet = 0
        'subtract the old value
        If m_arrInitialValues(nBallNo, cCharType) = "x" Then
            'extract all the information from varOther
            prevCode = m_arrInitialValues(nBallNo, cvOther)
            prevCode = prevCode \ 10
            mRunType = prevCode Mod 10
            prevCode = prevCode \ 10
            mBallType = prevCode Mod 10
            If mRunType = eRunType.rtRuns And mBallType = eBallType.btLegal Then
                nBattersNet = m_arrInitialValues(nBallNo, cnRuns)
                nBowlersNet = m_arrInitialValues(nBallNo, cnRuns)
                nTotalNet = m_arrInitialValues(nBallNo, cnRuns)
            ElseIf mRunType = eRunType.rtRuns And mBallType = eBallType.btNoBall Then
                nBattersNet = m_arrInitialValues(nBallNo, cnRuns)
                nRuns = m_arrInitialValues(nBallNo, cnRuns)
                ExtraRuleAdjust NoBallRule, nRuns, cNoBallRuns
                nTotalNet = nRuns + cNoBallRuns
                nBowlersNet = nBowlersNet - nRuns - cNoBallRuns
            ElseIf mBallType = eBallType.btWide Then
                nRuns = m_arrInitialValues(nBallNo, cnRuns)
                ExtraRuleAdjust WideRule, nRuns, cWideRuns
                nTotalNet = nRuns + cWideRuns
                nBowlersNet = nRuns + cWideRuns
            ElseIf mRunType = eRunType.rtByes Or mRunType = eRunType.rtLegByes Then
                nTotalNet = m_arrInitialValues(nBallNo, cnRuns)
            End If
        ElseIf m_arrInitialValues(nBallNo, cCharType) = "r" Then
            nBattersNet = m_arrInitialValues(nBallNo, cnRuns)
            nBowlersNet = m_arrInitialValues(nBallNo, cnRuns)
            nTotalNet = m_arrInitialValues(nBallNo, cnRuns)
        ElseIf m_arrInitialValues(nBallNo, cCharType) = "lb" Or m_arrInitialValues(nBallNo, cCharType) = "b" Then
            nTotalNet = m_arrInitialValues(nBallNo, cnRuns)
        ElseIf m_arrInitialValues(nBallNo, cCharType) = "w" Then
            nRuns = m_arrInitialValues(nBallNo, cnRuns)
            ExtraRuleAdjust WideRule, nRuns, cWideRuns
            nTotalNet = nRuns + cWideRuns
            nBowlersNet = nRuns + cWideRuns
        ElseIf m_arrInitialValues(nBallNo, cCharType) = "nb" Then
            If m_arrInitialValues(nBallNo, cvOther) = "" Or m_arrInitialValues(nBallNo, cvOther) = "os" Then
                nBattersNet = m_arrInitialValues(nBallNo, cnRuns)
            End If
            nRuns = m_arrInitialValues(nBallNo, cnRuns)
            ExtraRuleAdjust NoBallRule, nRuns, cNoBallRuns
            nTotalNet = nRuns + cNoBallRuns
            nBowlersNet = nRuns + cNoBallRuns
        ElseIf m_arrInitialValues(nBallNo, cCharType) = strPENALTYRUNS Then
            nTotalNet = (PENALTYRUNSCODE - m_arrInitialValues(nBallNo, cnRuns))
        End If
        m_arrInitialValues(nBallNo, cnNetBattersRuns) = nBattersNet
        m_arrInitialValues(nBallNo, cnNetBowlersRuns) = nBowlersNet
        m_arrInitialValues(nBallNo, cnNetTotalRuns) = nTotalNet
    Next nBallNo
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        nBowlersNet = 0: nTotalNet = 0: nBattersNet = 0
        'add the modified values
        If m_arrModifiedValues(nBallNo, cCharType) = "x" Then
            'extract all the information from varOther
            prevCode = m_arrModifiedValues(nBallNo, cvOther)
            prevCode = prevCode \ 10
            mRunType = prevCode Mod 10
            prevCode = prevCode \ 10
            mBallType = prevCode Mod 10
            If mRunType = eRunType.rtRuns And mBallType = eBallType.btLegal Then
                nBattersNet = nBattersNet + m_arrModifiedValues(nBallNo, cnRuns)
                nBowlersNet = nBowlersNet + m_arrModifiedValues(nBallNo, cnRuns)
                nTotalNet = nTotalNet + m_arrModifiedValues(nBallNo, cnRuns)
            ElseIf mRunType = eRunType.rtRuns And mBallType = eBallType.btNoBall Then
                nBattersNet = nBattersNet + m_arrModifiedValues(nBallNo, cnRuns)
                nRuns = m_arrModifiedValues(nBallNo, cnRuns)
                ExtraRuleAdjust NoBallRule, nRuns, cNoBallRuns
                nTotalNet = nTotalNet + nRuns + cNoBallRuns
                nBowlersNet = nBowlersNet + nRuns + cNoBallRuns
            ElseIf mBallType = eBallType.btWide Then
                nRuns = m_arrModifiedValues(nBallNo, cnRuns)
                ExtraRuleAdjust WideRule, nRuns, cWideRuns
                nTotalNet = nTotalNet + nRuns + cWideRuns
                nBowlersNet = nBowlersNet + nRuns + cWideRuns
            ElseIf mRunType = eRunType.rtByes Or mRunType = eRunType.rtLegByes Then
                nTotalNet = nTotalNet + m_arrModifiedValues(nBallNo, cnRuns)
            End If
        ElseIf m_arrModifiedValues(nBallNo, cCharType) = "r" Then
            nBattersNet = nBattersNet + m_arrModifiedValues(nBallNo, cnRuns)
            nBowlersNet = nBowlersNet + m_arrModifiedValues(nBallNo, cnRuns)
            nTotalNet = nTotalNet + m_arrModifiedValues(nBallNo, cnRuns)
        ElseIf m_arrModifiedValues(nBallNo, cCharType) = "lb" Or m_arrModifiedValues(nBallNo, cCharType) = "b" Then
            nTotalNet = nTotalNet + m_arrModifiedValues(nBallNo, cnRuns)
        ElseIf m_arrModifiedValues(nBallNo, cCharType) = "w" Then
            nRuns = m_arrModifiedValues(nBallNo, cnRuns)
            ExtraRuleAdjust WideRule, nRuns, cWideRuns
            nTotalNet = nTotalNet + nRuns + cWideRuns
            nBowlersNet = nBowlersNet + nRuns + cWideRuns
        ElseIf m_arrModifiedValues(nBallNo, cCharType) = "nb" Then
            If m_arrModifiedValues(nBallNo, cvOther) = "" Or m_arrModifiedValues(nBallNo, cvOther) = "os" Then
                nBattersNet = nBattersNet + m_arrModifiedValues(nBallNo, cnRuns)
            End If
            nRuns = m_arrModifiedValues(nBallNo, cnRuns)
            ExtraRuleAdjust NoBallRule, nRuns, cNoBallRuns
            nTotalNet = nTotalNet + nRuns + cNoBallRuns
            nBowlersNet = nBowlersNet + nRuns + cNoBallRuns
        ElseIf m_arrModifiedValues(nBallNo, cCharType) = strPENALTYRUNS Then
            nTotalNet = nTotalNet + PENALTYRUNSCODE - m_arrModifiedValues(nBallNo, cnRuns)
        End If
        m_arrModifiedValues(nBallNo, cnNetBattersRuns) = nBattersNet
        m_arrModifiedValues(nBallNo, cnNetBowlersRuns) = nBowlersNet
        m_arrModifiedValues(nBallNo, cnNetTotalRuns) = nTotalNet
    Next nBallNo
End Sub
Private Sub cmdCancel_Click()
    frmEditBallDetails.Hide
End Sub
Private Sub UpdatePartnerships()
    'delete the old balls
    Dim nWicket As Integer, nAddBall As Integer, nAddBallBatter As Integer
    For i = 0 To m_LastBallRow - m_FirstBallRow
        nWicket = m_arrInitialValues(i, cnWicket) + 1
        If m_arrInitialValues(i, cbLegal) = True Then
            nAddBall = 1
            nAddBallBatter = 1
        Else
            nAddBall = 0
            If m_arrInitialValues(i, cCharType) = "nb" Then
                nAddBallBatter = 1
            ElseIf m_arrInitialValues(i, cCharType) = "x" Then
                If (m_arrInitialValues(i, cvOther) \ 10) Mod 10 = eBallType.btNoBall Then _
                    nAddBallBatter = 1 Else nAddBallBatter = 0
            Else
                nAddBallBatter = 0
            End If
        End If
        j = nWicket
        'change the total score in all future partnerships
        Do While Partnerships(j, 0, m_Innings) <> Empty
           Partnerships(j, 7, m_Innings) = Partnerships(j, 7, m_Innings) - nAddBall
           Partnerships(j, 6, m_Innings) = Partnerships(j, 6, m_Innings) - m_arrInitialValues(i, cnNetTotalRuns)
           j = j + 1: If j > maxWickets Then Exit Do
        Loop
        Partnerships(nWicket, 8, m_Innings) = Partnerships(nWicket, 8, m_Innings) - m_arrInitialValues(i, cnNetTotalRuns)
        Partnerships(nWicket, 9, m_Innings) = Partnerships(nWicket, 9, m_Innings) - nAddBall
        'check if its the not out batsmen
        If m_arrInitialValues(i, cnBatter) = Partnerships(m_arrInitialValues(i, cnWicket) + 1, 0, m_Innings) Then
            Partnerships(nWicket, 4, m_Innings) = Partnerships(nWicket, 4, m_Innings) - m_arrInitialValues(i, cnNetBattersRuns)
            Partnerships(nWicket, 5, m_Innings) = Partnerships(nWicket, 5, m_Innings) - nAddBallBatter
            j = nWicket
            Do While Partnerships(j, 0, m_Innings) = m_arrInitialValues(i, cnBatter)
                Partnerships(j, 10, m_Innings) = Partnerships(j, 10, m_Innings) - m_arrInitialValues(i, cnNetBattersRuns)
                Partnerships(j, 11, m_Innings) = Partnerships(j, 11, m_Innings) - nAddBallBatter
                j = j + 1: If j > maxWickets Then Exit Do
            Loop
        Else 'its the out batsmen
            Partnerships(nWicket, 2, m_Innings) = Partnerships(nWicket, 2, m_Innings) - m_arrInitialValues(i, cnNetBattersRuns)
            Partnerships(nWicket, 3, m_Innings) = Partnerships(nWicket, 3, m_Innings) - nAddBallBatter
        End If
    Next i
    For i = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        nWicket = m_arrModifiedValues(i, cnWicket) + 1
        If m_arrModifiedValues(i, cbLegal) = True Then
            nAddBall = 1
            nAddBallBatter = 1
        Else
            nAddBall = 0
            If m_arrModifiedValues(i, cCharType) = "nb" Then
                nAddBallBatter = 1
            ElseIf m_arrModifiedValues(i, cCharType) = "x" Then
                If (m_arrModifiedValues(i, cvOther) \ 10) Mod 10 = eBallType.btNoBall Then _
                    nAddBallBatter = 1 Else nAddBallBatter = 0
            Else
                nAddBallBatter = 0
            End If
        End If
        j = nWicket
        'change the total score in all future partnerships
        Do While Partnerships(j, 0, m_Innings) <> Empty
           Partnerships(j, 7, m_Innings) = Partnerships(j, 7, m_Innings) + nAddBall
           Partnerships(j, 6, m_Innings) = Partnerships(j, 6, m_Innings) + m_arrModifiedValues(i, cnNetTotalRuns)
           j = j + 1: If j > maxWickets Then Exit Do
        Loop
        Partnerships(nWicket, 8, m_Innings) = Partnerships(nWicket, 8, m_Innings) + m_arrModifiedValues(i, cnNetTotalRuns)
        Partnerships(nWicket, 9, m_Innings) = Partnerships(nWicket, 9, m_Innings) + nAddBall
        'check if its the not out batsmen
        If m_arrModifiedValues(i, cnBatter) = Partnerships(m_arrModifiedValues(i, cnWicket) + 1, 0, m_Innings) Then
            Partnerships(nWicket, 4, m_Innings) = Partnerships(nWicket, 4, m_Innings) + m_arrModifiedValues(i, cnNetBattersRuns)
            Partnerships(nWicket, 5, m_Innings) = Partnerships(nWicket, 5, m_Innings) + nAddBallBatter
            j = nWicket
            Do While Partnerships(j, 0, m_Innings) = m_arrModifiedValues(i, cnBatter)
                Partnerships(j, 10, m_Innings) = Partnerships(j, 10, m_Innings) + m_arrModifiedValues(i, cnNetBattersRuns)
                Partnerships(j, 11, m_Innings) = Partnerships(j, 11, m_Innings) + nAddBallBatter
                j = j + 1: If j > maxWickets Then Exit Do
            Loop
        Else 'its the out batsmen
            Partnerships(nWicket, 2, m_Innings) = Partnerships(nWicket, 2, m_Innings) + m_arrModifiedValues(i, cnNetBattersRuns)
            Partnerships(nWicket, 3, m_Innings) = Partnerships(nWicket, 3, m_Innings) + nAddBallBatter
        End If
    Next i
    If m_Innings = innings Then
        shtMainScoreboard.cmbPartnership_Change
    Else
        CopyPartnerships Worksheets("Innings " & m_Innings), m_Innings, False
    End If
End Sub
Private Function CheckOddEven() As Boolean
    CheckOddEven = True
    If lblInfo <> strPENALTYRUNSLABEL And _
    (m_OldRuns Mod 2 <> txtRuns.Text Mod 2 And m_bOldOneShort = chkOneShort Or _
    m_OldRuns Mod 2 = txtRuns.Text Mod 2 And m_bOldOneShort <> chkOneShort) Then
        MsgBox "Can not change runs from odd to even or even to odd!", Title:=strSCOREBOOK_TITLE
        txtRuns.SetFocus
        CheckOddEven = False
    End If
End Function
Private Sub cmdContinue_Click()
    If CheckOddEven = False Then Exit Sub
    UpdateBall tabBalls.Value
    OverScores(m_OverNo, m_Innings, 2) = OverScores(m_OverNo, m_Innings, 2) + m_InsertedBalls
    CalculateNets
    'make the required changes
    Dim strLeft As String, strRight As String, strBall
    Dim nBallNo As Integer, oldBallNo As Integer, oldCurrBatter1 As Integer, oldCurrBowler1 As Integer
    Dim nTotalNet As Integer, nBowlersNet As Integer
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow
        nTotalNet = nTotalNet - m_arrInitialValues(nBallNo, cnNetTotalRuns)
        nBowlersNet = nBowlersNet - m_arrInitialValues(nBallNo, cnNetBowlersRuns)
    Next nBallNo
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        nTotalNet = nTotalNet + m_arrModifiedValues(nBallNo, cnNetTotalRuns)
        nBowlersNet = nBowlersNet + m_arrModifiedValues(nBallNo, cnNetBowlersRuns)
    Next nBallNo
    Dim Temp As Range
    
    FillDataSheet
    UpdatePartnerships
    Dim strOverDetails As String
    strOverDetails = GetOverString

    m_TargetBallDetails = strOverDetails
    oldBallNo = BallNo
    oldCurrBatter1 = currBatters(1)
    oldCurrBowler1 = currBowlers(1)

    Dim nBowler As Integer, nBatter As Integer
    For nBallNo = m_LastBallRow - m_FirstBallRow To 0 Step -1
        currBowlers(1) = m_arrInitialValues(nBallNo, cnBowler)
        currBatters(1) = m_arrInitialValues(nBallNo, cnBatter)
        If m_arrInitialValues(nBallNo, cCharType) = "x" Then
            If m_Innings = innings Then
                MS_UndoWicket (m_arrInitialValues(nBallNo, cnRuns)), (m_arrInitialValues(nBallNo, cvOther)), currBowlers(1)
            Else
                IS_UndoWicket m_Innings, (m_arrInitialValues(nBallNo, cnRuns)), (m_arrInitialValues(nBallNo, cvOther)), currBowlers(1)
            End If
        Else
            'remove the initial runs scored
            If m_Innings = innings Then
                If m_arrInitialValues(nBallNo, cCharType) = "nb" Then
                    UndoNoBall (m_arrInitialValues(nBallNo, cnRuns)), (m_arrInitialValues(nBallNo, cCharType))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "w" Then
                    UndoWide (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "b" Then
                    UndoByes (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "lb" Then
                    UndoLegByes (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "r" Then
                    UndoRuns (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = strPENALTYRUNS Then
                    UndoPenaltyRuns (PENALTYRUNSCODE - m_arrInitialValues(nBallNo, cnRuns))
                End If
            Else
                nBowler = m_arrInitialValues(nBallNo, cnBowler)
                nBatter = m_arrInitialValues(nBallNo, cnBatter)
                If m_arrInitialValues(nBallNo, cCharType) = "nb" Then
                    IS_UndoNoBall nBatter, nBowler, m_Innings, (m_arrInitialValues(nBallNo, cnRuns)), (m_arrInitialValues(nBallNo, cCharType))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "w" Then
                    IS_UndoWide nBatter, nBowler, m_Innings, (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "b" Then
                    IS_UndoByes nBatter, nBowler, m_Innings, (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "lb" Then
                    IS_UndoLegByes nBatter, nBowler, m_Innings, (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = "r" Then
                    IS_UndoRuns nBatter, nBowler, m_Innings, (m_arrInitialValues(nBallNo, cnRuns))
                ElseIf m_arrInitialValues(nBallNo, cCharType) = strPENALTYRUNS Then
                    IS_UndoPenaltyRuns nBatter, nBowler, m_Innings, (PENALTYRUNSCODE - m_arrModifiedValues(nBallNo, cnRuns))
                End If
            End If
        End If
        'delete the characters from the batting details
        If chkWicket.Visible = True Then
            If m_arrInitialValues(nBallNo, cnRuns) >= 0 Then
                Set Temp = shtDetails.Cells((m_Innings - 1) * 36 + m_arrInitialValues(nBallNo, cnBatter) + 2, 4)
                strLeft = Left(Temp, m_arrInitialValues(nBallNo, cnBattersStrLen))
                strRight = Right(Temp, Len(Temp) - m_arrInitialValues(nBallNo, cnBattersStrLen) - 1)
                Temp = strLeft & strRight
            End If
        End If
    Next nBallNo
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        tabBalls.Value = nBallNo
        currBowlers(1) = m_arrModifiedValues(nBallNo, cnBowler)
        currBatters(1) = m_arrModifiedValues(nBallNo, cnBatter)
        If chkWicket = True Then
            If m_Innings = innings Then
                MS_EnterWicket (m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cvOther)), currBowlers(1)
            Else
                IS_EnterWicket m_Innings, (m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cvOther)), currBowlers(1)
            End If
        Else
            'remove the initial runs scored
            If m_Innings = innings Then
                If m_arrModifiedValues(nBallNo, cCharType) = "nb" Then
                    EnterNoBall (m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cCharType))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "w" Then
                    EnterWide (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "b" Then
                    EnterByes (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "lb" Then
                    EnterLegByes (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "r" Then
                    EnterRuns (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = strPENALTYRUNS Then
                    EnterPenaltyRuns (PENALTYRUNSCODE - m_arrModifiedValues(nBallNo, cnRuns))
                End If
            Else
                nBowler = m_arrModifiedValues(nBallNo, cnBowler)
                nBatter = m_arrModifiedValues(nBallNo, cnBatter)
                If m_arrModifiedValues(nBallNo, cCharType) = "nb" Then
                    IS_EnterNoBall nBatter, nBowler, m_Innings, (m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cCharType))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "w" Then
                    IS_EnterWide nBatter, nBowler, m_Innings, (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "b" Then
                    IS_EnterByes nBatter, nBowler, m_Innings, (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "lb" Then
                    IS_EnterLegByes nBatter, nBowler, m_Innings, (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = "r" Then
                    IS_EnterRuns nBatter, nBowler, m_Innings, (m_arrModifiedValues(nBallNo, cnRuns))
                ElseIf m_arrModifiedValues(nBallNo, cCharType) = strPENALTYRUNS Then
                    IS_EnterPenaltyRuns nBatter, nBowler, m_Innings, (PENALTYRUNSCODE - m_arrModifiedValues(nBallNo, cnRuns))
                End If
            End If
        End If
        If chkWicket.Visible = True Then
            If m_arrModifiedValues(nBallNo, cnRuns) >= 0 Then
                Set Temp = shtDetails.Cells((m_Innings - 1) * 36 + m_arrModifiedValues(nBallNo, cnBatter) + 2, 4)
                strLeft = Left(Temp, m_arrModifiedValues(nBallNo, cnBattersStrLen))
                strBall = GetEnteredChar(Val(m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cCharType)), (m_arrModifiedValues(nBallNo, cvOther)))
                strRight = Right(Temp, Len(Temp) - m_arrModifiedValues(nBallNo, cnBattersStrLen))
                Temp = strLeft & strBall & strRight
            End If
        End If
    Next nBallNo
    If nTotalNet <> 0 Then
        Dim rTarget As Range
        Set rTarget = m_TargetBallDetails.Parent.Cells(m_TargetBallDetails.row, m_TargetBallDetails.Column + 1)
        While rTarget <> ""
            rTarget = rTarget + nTotalNet
            Set rTarget = rTarget.Parent.Cells(rTarget.row + 1, rTarget.Column)
        Wend
    End If
'update the batters strLength from this point on
    Dim rBatter As Range, rStrLength As Range, nLastBatter As Integer, nOtherBatter As Integer
    Dim nLastStrLen As Integer, nOtherStrLen As Integer, nLastNetStrLen As Integer, nOtherNetStrLen As Integer
    nLastNetStrLen = -1: nOtherNetStrLen = -1
    'find the last batter and  what string lenght of next ball faced should be
    i = m_LastBallRow - m_FirstBallRow + m_InsertedBalls
    nLastBatter = m_arrModifiedValues(i, cnBatter)
    nLastStrLen = m_arrModifiedValues(i, cnBattersStrLen)
    nLastStrLen = nLastStrLen + 1
    'find the other batter whos strLen has to be adjusted
    For i = m_LastBallRow - m_FirstBallRow + m_InsertedBalls - 1 To 0 Step -1
        If m_arrModifiedValues(i, cnBatter) <> nLastBatter And nOtherBatter = 0 Then
            nOtherBatter = m_arrModifiedValues(i, cnBatter)
            nOtherStrLen = m_arrModifiedValues(i, cnBattersStrLen)
            nOtherStrLen = nOtherStrLen + 1
        End If
    Next i
    'now update for the last batter
    i = 1
    Set rBatter = shtData.Cells(m_LastBallRow + m_InsertedBalls + i, m_Innings * 6)
    Set rStrLength = shtData.Cells(m_LastBallRow + m_InsertedBalls + i, m_Innings * 6 - 5)
    While rBatter <> ""
        j = (rBatter \ 100) Mod 100
        If j = nLastBatter Then
            If nLastNetStrLen < 0 Then nLastNetStrLen = nLastStrLen - rStrLength \ 1000
            rStrLength = (rStrLength \ 1000 + nLastNetStrLen) * 1000 + rStrLength Mod 1000
        ElseIf j = nOtherBatter Then
            If nOtherNetStrLen < 0 Then nOtherNetStrLen = nOtherStrLen - rStrLength \ 1000
            rStrLength = (rStrLength \ 1000 + nOtherNetStrLen) * 1000 + rStrLength Mod 1000
        End If
        Set rBatter = shtData.Cells(rBatter.row + 1, m_Innings * 6)
        Set rStrLength = shtData.Cells(rStrLength.row + 1, m_Innings * 6 - 5)
    Wend
    'check if the same bowler bowled every ball
    If m_arrInitialValues(0, cnBowler) = m_arrInitialValues(m_LastBallRow - m_FirstBallRow, cnBowler) Then
        shtDetails.Cells(m_arrInitialValues(0, cnBowler) * 2 - 23 + 36 * m_Innings, 4 + m_arrModifiedValues(0, cnBowlersOvers)) = strOverDetails
        Set Temp = shtDetails.Cells(m_arrModifiedValues(0, cnBowler) * 2 - 22 + 36 * m_Innings, 4 + m_arrModifiedValues(0, cnBowlersOvers))
        UpdateBowlersRunningTotals Temp, nBowlersNet
        'Check if there has been a change effecting maiden
        Dim bMaiden As Boolean
        bMaiden = CheckMaiden(m_OverNo, m_Innings)
        If m_WasMaiden <> bMaiden Then
            If m_WasMaiden = True Then
                If m_Innings = innings Then
                    shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) - 1
                Else
                    Worksheets("Innings " & m_Innings).Cells(currBowlers(1) + 20, 3) = Worksheets("Innings " & m_Innings).Cells(currBowlers(1) + 20, 3) - 1
                End If
            Else
                If m_Innings = innings Then
                    shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) = shtMainScoreboard.Cells(1 + currBowlers(1) + 20, 3) + 1
                Else
                    Worksheets("Innings " & m_Innings).Cells(currBowlers(1) + 20, 3) = Worksheets("Innings " & m_Innings).Cells(currBowlers(1) + 20, 3) + 1
                End If
            End If
        End If
    Else 'there was a bowling change in the middle of the over
        'clear the bowler details
        Dim nBowler1 As Integer, nBowler2 As Integer, nBowler1Net As Integer, nBowler2Net As Integer
        nBowler1 = m_arrModifiedValues(0, cnBowler)
        nBowler2 = m_arrInitialValues(m_LastBallRow - m_FirstBallRow, cnBowler)
        shtDetails.Cells(nBowler1 * 2 - 23 + 36 * m_Innings, 4 + m_arrModifiedValues(0, cnBowlersOvers)) = ""
        shtDetails.Cells(nBowler2 * 2 - 23 + 36 * m_Innings, 4 + m_arrModifiedValues(m_LastBallRow - m_FirstBallRow, cnBowlersOvers)) = ""
        For nBallNo = 0 To m_LastBallRow - m_FirstBallRow
            'count the net runs for each bowler
            If m_arrInitialValues(nBallNo, cnRuns) >= 0 Then
                If m_arrInitialValues(nBallNo, cnBowler) = nBowler1 Then
                    nBowler1Net = nBowler1Net - m_arrInitialValues(nBallNo, cnNetBowlersRuns)
                Else
                    nBowler2Net = nBowler2Net - m_arrInitialValues(nBallNo, cnNetBowlersRuns)
                End If
            End If
        Next nBallNo
        For nBallNo = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
            'count the net runs for each bowler
            If m_arrModifiedValues(nBallNo, cnRuns) >= 0 Then
                Set Temp = shtDetails.Cells(m_arrModifiedValues(nBallNo, cnBowler) * 2 - 23 + 36 * m_Innings, 4 + m_arrModifiedValues(nBallNo, cnBowlersOvers))
                Temp = Temp & GetEnteredChar((m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cCharType)), (m_arrModifiedValues(nBallNo, cvOther)))
                If m_arrModifiedValues(nBallNo, cnBowler) = nBowler1 Then
                    nBowler1Net = nBowler1Net + m_arrModifiedValues(nBallNo, cnNetBowlersRuns)
                Else
                    nBowler2Net = nBowler2Net + m_arrModifiedValues(nBallNo, cnNetBowlersRuns)
                End If
            End If
        Next nBallNo
        'do the first bowlers running totals
        Set Temp = shtDetails.Cells((nBowler1) * 2 - 22 + 36 * m_Innings, 4 + m_arrModifiedValues(0, cnBowlersOvers))
        UpdateBowlersRunningTotals Temp, nBowler1Net
        'do the second bowlers running totals
        Set Temp = shtDetails.Cells((nBowler2) * 2 - 22 + 36 * m_Innings, 4 + m_arrModifiedValues(m_LastBallRow - m_FirstBallRow + m_InsertedBalls, cnBowlersOvers))
        UpdateBowlersRunningTotals Temp, nBowler2Net
    End If
    If bMatchEnded = True Then innings = innings - 1
    If m_Innings <> innings Then
        'update the innings total
        TeamTotals(m_Innings, 2) = TeamTotals(m_Innings, 2) + nTotalNet
        'clear the target so it will be recalculated
        shtMainScoreboard.Cells(18, 16) = ""
        If TeamTotals(m_Innings, 1) = BattingT Then Target = Target - nTotalNet _
            Else Target = Target + nTotalNet
    End If
    'Need to update this before doing the totals
    BallNo = oldBallNo
    currBatters(1) = oldCurrBatter1
    currBowlers(1) = oldCurrBowler1
    UpdateTotals
    UpdateFallOfWicket m_Innings

    If bMatchEnded = True Then innings = innings + 1 'This is matched with the statement above that does the reverse
    frmEditBallDetails.Hide
End Sub
Private Sub UpdateBowlersRunningTotals(Temp As Range, nBowlersNet As Integer)
    'adjust all the bowlers overs
    Dim nBowlersRuns As Integer, i As Integer
    While Temp <> ""
        For i = Len(Temp) - 1 To 3 Step -1
            If Mid(Temp, i - 1, 1) = "-" Then Exit For
        Next i
        nBowlersRuns = Val(Right(Temp, Len(Temp) - i))
        nBowlersRuns = nBowlersRuns + nBowlersNet
        Temp = "'" & Left(Temp, i) & nBowlersRuns
        Set Temp = shtDetails.Cells(Temp.row, Temp.Column + 1)
    Wend
End Sub

Private Sub cmdDeleteBall_Click()
    Dim nBallNo As Integer, nBatter As Integer
    nBallNo = tabBalls.Value
    nBatter = m_arrModifiedValues(nBallNo, cnBatter)
    If tabBalls.Tabs.count - 1 <= nBallNo Then tabBalls.Value = tabBalls.Tabs.count - 2
    m_InsertedBalls = m_InsertedBalls - 1
    If m_arrModifiedValues(nBallNo, cbLegal) = True Then m_LegalBalls = m_LegalBalls - 1
    Dim arrModifiedValues()
    ReDim arrModifiedValues(0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls, 1 To cnSize)
    For i = 0 To nBallNo - 1
        For j = 1 To cnSize
            arrModifiedValues(i, j) = m_arrModifiedValues(i, j)
        Next j
    Next i
    For i = nBallNo To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        For j = 1 To cnSize
            arrModifiedValues(i, j) = m_arrModifiedValues(i + 1, j)
        Next j
        If nBatter = m_arrModifiedValues(i + 1, cnBatter) Then _
            arrModifiedValues(i, cnBattersStrLen) = m_arrModifiedValues(i + 1, cnBattersStrLen) - 1
    Next i
    
    ReDim m_arrModifiedValues(0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls, 1 To cnSize)
    m_arrModifiedValues = arrModifiedValues
    tabBalls.Tabs.Remove tabBalls.Tabs.count - 1
    txtDescription.Text = GetOverString
    SetData
    m_OldRuns = txtRuns.Text
    m_bOldOneShort = chkOneShort
End Sub

Private Sub cmdHelp_Click()
    'TODO add the correct help file
    DisplayContextHelp HID_CORRECTIONS
End Sub

Private Sub cmdInsertBall_Click()
    m_OldRuns = 0
    m_bOldOneShort = False
    'resize the array
    m_InsertedBalls = m_InsertedBalls + 1
    m_LegalBalls = m_LegalBalls + 1
    Dim arrModifiedValues()
    ReDim arrModifiedValues(0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls, 1 To cnSize)
    Dim nBallNo As Integer, j As Integer
    nBallNo = tabBalls.Value
    Dim nBatter As Integer
    'this is the batter whos having a ball inserted
    nBatter = m_arrModifiedValues(nBallNo, cnBatter)
    For nBallNo = 0 To tabBalls.Value - 1
        For j = 1 To cnSize
            arrModifiedValues(nBallNo, j) = m_arrModifiedValues(nBallNo, j)
        Next j
    Next nBallNo
    For nBallNo = m_LastBallRow - m_FirstBallRow + m_InsertedBalls - 1 To tabBalls.Value Step -1
        For j = 1 To cnSize
            If j = cnBattersStrLen And nBatter = m_arrModifiedValues(nBallNo, cnBatter) Then
                arrModifiedValues(nBallNo + 1, j) = m_arrModifiedValues(nBallNo, j) + 1
            Else
                arrModifiedValues(nBallNo + 1, j) = m_arrModifiedValues(nBallNo, j)
            End If
        Next j
    Next nBallNo
    nBallNo = tabBalls.Value
    'set the values for the new delivery
    arrModifiedValues(nBallNo, cnCorresponding) = -1 'this hints that the ball has been inserted
    arrModifiedValues(nBallNo, cbLegal) = True
    arrModifiedValues(nBallNo, cnRuns) = 0
    arrModifiedValues(nBallNo, cCharType) = "r"
    arrModifiedValues(nBallNo, cvOther) = ""
    arrModifiedValues(nBallNo, cnBowler) = arrModifiedValues(nBallNo + 1, cnBowler)
    arrModifiedValues(nBallNo, cnBatter) = arrModifiedValues(nBallNo + 1, cnBatter)
    arrModifiedValues(nBallNo, cnWicket) = arrModifiedValues(nBallNo + 1, cnWicket)
    arrModifiedValues(nBallNo, cnBowlersOvers) = arrModifiedValues(nBallNo + 1, cnBowlersOvers)
    arrModifiedValues(nBallNo, cnBattersStrLen) = arrModifiedValues(nBallNo + 1, cnBattersStrLen) - 1
    arrModifiedValues(nBallNo, cstrBowler) = arrModifiedValues(nBallNo + 1, cstrBowler)
    arrModifiedValues(nBallNo, cstrBatter) = arrModifiedValues(nBallNo + 1, cstrBatter)
    
    ReDim m_arrModifiedValues(0 To OverScores(m_OverNo, m_Innings, 2), 1 To cnSize)
    m_arrModifiedValues = arrModifiedValues
    
    tabBalls.Tabs.Add tabBalls.Tabs.count + 1, tabBalls.Tabs.count + 1
    txtDescription.Text = GetOverString
    
    
    SetData
End Sub


Private Sub optWide_Change()
    If optWide = True Then
        optRuns.Enabled = False
        optByes.Enabled = False
        optLegByes.Enabled = False
    Else
        optRuns.Enabled = True
        optByes.Enabled = True
        optLegByes.Enabled = True
    End If
End Sub

Private Sub tabBalls_Change()
    If m_FirstBallRow <> 0 Then
        If lblInfo <> strPENALTYRUNSLABEL And tabBalls.Value <> m_LastTab And _
        (m_OldRuns Mod 2 <> txtRuns.Text Mod 2 And m_bOldOneShort = chkOneShort Or _
        m_OldRuns Mod 2 = txtRuns.Text Mod 2 And m_bOldOneShort <> chkOneShort) Then
            MsgBox "Can not change runs from odd to even or even to odd!", Title:=strSCOREBOOK_TITLE
            tabBalls.Value = m_LastTab
            txtRuns.SetFocus
            Exit Sub
        ElseIf tabBalls.Value = m_LastTab Then
            Exit Sub
        End If
        If m_LastTab > -1 Then UpdateBall m_LastTab
        m_LastTab = tabBalls.Value
        SetData
        m_OldRuns = txtRuns.Text
        m_bOldOneShort = chkOneShort
        txtDescription.Text = GetOverString
    End If
End Sub

Private Sub txtRuns_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If IsNumeric(txtRuns.Text) = True Then
        If txtRuns.Text < 0 And lblInfo <> strPENALTYRUNSLABEL Then
            MsgBox "The number of runs must be a positive number!", Title:=strSCOREBOOK_TITLE
            Cancel = True
        End If
    Else
        MsgBox "The number of runs must be a number!", Title:=strSCOREBOOK_TITLE
        Cancel = True
    End If
End Sub

Private Sub UserForm_Activate()
    m_LastTab = -1
    m_InsertedBalls = 0
    m_LegalBalls = 0
    If OverScores(m_OverNo, m_Innings, 2) = 0 Then
        frmEditBallDetails.Hide
        Exit Sub
    End If
    m_WasMaiden = CheckMaiden(m_OverNo, m_Innings)
    Dim i As Integer
    lblInnings.Caption = "Innings " & m_Innings
    lblOverNo.Caption = "Over Number " & m_OverNo
    If (m_Innings = 1 Or m_Innings = 2) And innings >= 3 Then
        txtDescription.Text = shtBallDetails1.Cells(m_OverNo + 3, m_Innings * 5 - 2)
    Else
        txtDescription.Text = shtBallDetails.Cells(m_OverNo + 3, (2 - (m_Innings Mod 2)) * 5 - 2)
    End If
    
    m_LastBallNo = m_OverNo * BallsPerOver
    m_FirstBallNo = (m_OverNo - 1) * BallsPerOver + 1
    m_FirstBallRow = 3
    'need to account for an extra being bowled at the end of the over
    'and an extra ball being bowled in an over
    If m_FirstBallNo > 1 Then
        While shtData.Cells(m_FirstBallRow, m_Innings * 6 - 4) < m_FirstBallNo - 1 _
                Or shtData.Cells(m_FirstBallRow + 1, m_Innings * 6 - 4) < m_FirstBallNo - 1
            m_FirstBallRow = m_FirstBallRow + 1
        Wend
        m_FirstBallRow = m_FirstBallRow + 1
    End If
    m_LastBallRow = m_FirstBallRow
    While shtData.Cells(m_LastBallRow, m_Innings * 6 - 4) < m_LastBallNo _
            Or shtData.Cells(m_LastBallRow + 1, m_Innings * 6 - 4) < m_LastBallNo _
                And shtData.Cells(m_LastBallRow + 1, m_Innings * 6 - 4) <> ""
        m_LastBallRow = m_LastBallRow + 1
    Wend
    'check if the followon has been enforced
    If m_Innings > 2 And 2 - (innings Mod 2) <> BattingT Then
        m_bFollowedOn = True
        m_BattingTeam = 5 - m_Innings
        m_BowlingTeam = m_Innings - 2
    Else
        m_BowlingTeam = (m_Innings Mod 2) + 1
        m_BattingTeam = 2 - (m_Innings Mod 2)
        m_bFollowedOn = False
    End If
    'followed on
    'set up the tabs
    ReDim m_arrModifiedValues(0 To m_LastBallRow - m_FirstBallRow, 1 To cnSize)
    ReDim m_arrInitialValues(0 To m_LastBallRow - m_FirstBallRow, 1 To cnSize)
    InitialiseArrays
    tabBalls.Tabs.Clear
    For i = 1 To m_LastBallRow - m_FirstBallRow + 1
        tabBalls.Tabs.Add CStr(i), CStr(i), i - 1
    Next i
    For i = 0 To m_LastBallRow - m_FirstBallRow
        If i > m_LastBallRow - m_FirstBallRow + m_InsertedBalls Then Exit For
        If m_arrModifiedValues(i, cCharType) = strENDOVER Or m_arrModifiedValues(i, cCharType) = strEXTRABALL Then
            tabBalls.Value = i
            cmdDeleteBall_Click
            i = i - 1
        End If
    Next i
    tabBalls.Value = 0
    m_LastTab = 0
    SetData
End Sub
Private Sub FillDataSheet()
    Dim nBallNo As Integer, nInsertedData, nOldLegalBalls As Integer
    nOldLegalBalls = m_LegalBalls
    shtData.Range(shtData.Cells(m_FirstBallRow, m_Innings * 6 - 5), shtData.Cells(m_LastBallRow, m_Innings * 6)).Delete xlShiftUp
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        shtData.Range(shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5), shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6)).Insert xlShiftDown
        If m_arrModifiedValues(nBallNo, cbLegal) = True Then
            If shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 4) Mod BallsPerOver = BallsPerOver - 1 And m_arrModifiedValues(nBallNo, cbLegal) = True And m_LegalBalls > BallsPerOver Then
                m_LegalBalls = m_LegalBalls - 1
                'insert and extra ball data
                shtData.Range(shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5), shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6)).Insert xlShiftDown
                shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5) = shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 5)
                shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 4) = shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 4) - 1
                shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 3) = ""
                shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 2) = strEXTRABALL
                shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 3) = EXTRABALLBOWLED
                shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6) = shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6)
                nInsertedData = nInsertedData + 1
                m_FirstBallRow = m_FirstBallRow + 1
            End If
            shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 4) = shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 4) + 1
        Else
            shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 4) = Val(shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 4))
        End If
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5) = m_arrModifiedValues(nBallNo, cnBowlersOvers) _
            + CLng(1000) * m_arrModifiedValues(nBallNo, cnBattersStrLen)
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 3) = Val(m_arrModifiedValues(nBallNo, cnRuns))
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 2) = m_arrModifiedValues(nBallNo, cCharType)
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 1) = m_arrModifiedValues(nBallNo, cvOther)
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6) = m_arrModifiedValues(nBallNo, cnBowler) + m_arrModifiedValues(nBallNo, cnBatter) * 100 + m_arrModifiedValues(nBallNo, cnWicket) * CLng(10000)
    Next nBallNo
    'check if we need to end the over
    If shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 4) Mod BallsPerOver <> 0 Then
        'insert and end over data
        shtData.Range(shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5), shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6)).Insert xlShiftDown
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5) = shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 5)
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 4) = (shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6 - 4) \ BallsPerOver + 1) * BallsPerOver
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 3) = ""
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 2) = strENDOVER
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 3) = -m_LegalBalls
        shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6) = shtData.Cells(m_FirstBallRow + nBallNo - 1, m_Innings * 6)
        nInsertedData = nInsertedData + 1
        m_FirstBallRow = m_FirstBallRow + 1
    End If
     m_LegalBalls = nOldLegalBalls
    m_FirstBallRow = m_FirstBallRow - nInsertedData
    If m_Innings = innings Then Totalballs = Totalballs + nInsertedData + m_InsertedBalls
End Sub
Function GetOverString() As String
    Dim nBallNo As Integer
    GetOverString = ""
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow + m_InsertedBalls
        GetOverString = GetOverString & GetEnteredChar(Val(m_arrModifiedValues(nBallNo, cnRuns)), (m_arrModifiedValues(nBallNo, cCharType)), (m_arrModifiedValues(nBallNo, cvOther)))
    Next nBallNo
End Function
Private Sub InitialiseArrays()
    Dim nBallNo As Integer
    m_LegalBalls = 0
    For nBallNo = 0 To m_LastBallRow - m_FirstBallRow
        m_arrModifiedValues(nBallNo, cnRuns) = shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 3)
        m_arrModifiedValues(nBallNo, cCharType) = shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 2)
        m_arrModifiedValues(nBallNo, cvOther) = shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 1)
        m_arrModifiedValues(nBallNo, cnBowler) = shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6) Mod 100
        m_arrModifiedValues(nBallNo, cnBatter) = (shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6) \ 100) Mod 100
        m_arrModifiedValues(nBallNo, cnWicket) = (shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6) \ 10000) Mod 100
        m_arrModifiedValues(nBallNo, cnBowlersOvers) = shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5) Mod 1000
        m_arrModifiedValues(nBallNo, cnBattersStrLen) = shtData.Cells(m_FirstBallRow + nBallNo, m_Innings * 6 - 5) \ 1000
        If m_Innings = innings Then
            m_arrModifiedValues(nBallNo, cstrBowler) = shtMainScoreboard.Cells(21 + m_arrModifiedValues(nBallNo, cnBowler), 1)
        Else
             m_arrModifiedValues(nBallNo, cstrBowler) = Worksheets("Innings " & m_Innings).Cells(20 + m_arrModifiedValues(nBallNo, cnBowler), 1)
        End If
        m_arrModifiedValues(nBallNo, cstrBatter) = BatterNames(m_BattingTeam, m_arrModifiedValues(nBallNo, cnBatter))
        m_arrModifiedValues(nBallNo, cnCorresponding) = nBallNo
        m_arrModifiedValues(nBallNo, cbLegal) = False
        If m_arrModifiedValues(nBallNo, cCharType) = "r" Or m_arrModifiedValues(nBallNo, cCharType) = "b" Or m_arrModifiedValues(nBallNo, cCharType) = "lb" Then
            m_LegalBalls = m_LegalBalls + 1
            m_arrModifiedValues(nBallNo, cbLegal) = True
        ElseIf m_arrModifiedValues(nBallNo, cCharType) = "x" Then
            Dim mBallType As Long
            mBallType = (m_arrModifiedValues(nBallNo, cvOther) \ 100) Mod 10
            If mBallType = eBallType.btLegal Then
                m_LegalBalls = m_LegalBalls + 1
                m_arrModifiedValues(nBallNo, cbLegal) = True
            End If
        End If
    Next nBallNo
    m_arrInitialValues = m_arrModifiedValues
End Sub
Private Sub UpdateBall(nBallNo As Integer)
    If chkWicket.Visible = False Then
        If lblInfo.Caption = strPENALTYRUNSLABEL Then _
            m_arrModifiedValues(nBallNo, cnRuns) = PENALTYRUNSCODE - txtRuns.Text
    ElseIf chkWicket = False Then
        m_arrModifiedValues(nBallNo, cnRuns) = txtRuns.Text
        m_arrModifiedValues(nBallNo, cbLegal) = optLegal
        If m_arrModifiedValues(nBallNo, cCharType) = "r" Or m_arrModifiedValues(nBallNo, cCharType) = "b" Or m_arrModifiedValues(nBallNo, cCharType) = "lb" Then
            If optLegal <> True Then m_LegalBalls = m_LegalBalls - 1
        Else
            If optLegal = True Then m_LegalBalls = m_LegalBalls + 1
        End If
        m_arrModifiedValues(nBallNo, cCharType) = "r"
        m_arrModifiedValues(nBallNo, cvOther) = ""
        If optNoBall = True Then
            m_arrModifiedValues(nBallNo, cCharType) = "nb"
            If chkOneShort = True Then m_arrModifiedValues(nBallNo, cvOther) = "os"
            If optByes = True Then
                m_arrModifiedValues(nBallNo, cvOther) = m_arrModifiedValues(nBallNo, cvOther) & "b"
            ElseIf optLegByes = True Then
                m_arrModifiedValues(nBallNo, cvOther) = m_arrModifiedValues(nBallNo, cvOther) & "lb"
            End If
        ElseIf optWide = True Then
            m_arrModifiedValues(nBallNo, cCharType) = "w"
        Else
            If chkOneShort = True Then m_arrModifiedValues(nBallNo, cvOther) = "os"
            If optByes = True Then
                m_arrModifiedValues(nBallNo, cCharType) = "b"
            ElseIf optLegByes = True Then
                m_arrModifiedValues(nBallNo, cCharType) = "lb"
            End If
        End If
    Else
        Dim mRunType As Integer, mBallType As Integer, vOther As Variant
        mBallType = (m_arrModifiedValues(nBallNo, cvOther) \ 100) Mod 10
        If mBallType = eBallType.btLegal And optLegal <> True Then
            m_LegalBalls = m_LegalBalls - 1
        ElseIf mBallType <> eBallType.btLegal And optLegal = True Then
            m_LegalBalls = m_LegalBalls + 1
        End If
        If optWide = True Then
            mBallType = eBallType.btWide
        ElseIf optNoBall = True Then
            mBallType = eBallType.btNoBall
        Else
            mBallType = eBallType.btLegal
        End If
        If optByes = True Then
            mRunType = eRunType.rtByes
        ElseIf optLegByes = True Then
            mRunType = eRunType.rtLegByes
        Else
            mRunType = eRunType.rtRuns
        End If
        vOther = m_arrModifiedValues(nBallNo, cvOther)
        vOther = (CLng(vOther) \ CLng(1000)) * CLng(1000) + CLng(vOther Mod 10)
        vOther = vOther + 10 * mRunType + 100 * mBallType
        m_arrModifiedValues(nBallNo, cvOther) = vOther
        m_arrModifiedValues(nBallNo, cCharType) = "x"
        m_arrModifiedValues(nBallNo, cnRuns) = txtRuns.Text
    End If
End Sub
Private Sub SetData()
    Dim nBallNo As Integer, nRuns As Integer, vOther As Variant
    Dim strBowler As String, strBatter As String, charType As String
    nBallNo = tabBalls.SelectedItem.Index
    charType = m_arrModifiedValues(nBallNo, cCharType)
    vOther = m_arrModifiedValues(nBallNo, cvOther)
    strBatter = m_arrModifiedValues(nBallNo, cstrBatter)
    strBowler = m_arrModifiedValues(nBallNo, cstrBowler)
    nRuns = m_arrModifiedValues(nBallNo, cnRuns)
    cmdDeleteBall.Enabled = True
    lblBowler.Caption = "Bowler: " & strBowler
    lblBatsmen.Caption = "Batsman: " & strBatter
    If nRuns < 0 Then
        cmdDeleteBall.Enabled = False
        HideControls
        If charType = strCHANGEBOWLER Then
            lblInfo.Caption = "Bowling change."
        ElseIf charType = strCBEO Then
            lblInfo.Caption = "End of over."
        ElseIf charType = strENDDAY Then
            lblInfo.Caption = "End of day."
        ElseIf charType = strENDOVER Then
            lblInfo.Caption = "Over ended early."
        ElseIf charType = strEXTRABALL Then
            lblInfo.Caption = "Extra ball added to over."
        ElseIf charType = strSWAPBATSMEN Then
            lblInfo.Caption = "Batsmen changed ends."
        ElseIf charType = strPENALTYRUNS Then
            cmdDeleteBall.Enabled = True
            lblInfo.Caption = strPENALTYRUNSLABEL
            txtRuns.Visible = True
            txtRuns.Text = PENALTYRUNSCODE - nRuns
        End If
    Else
        HideControls True
        lblInfo.Caption = "Runs scored"
        txtRuns.Enabled = True
        optLegal.Enabled = True
        optByes.Enabled = True
        optLegByes.Enabled = True
        txtRuns.Text = nRuns
        chkWicket = False
        chkOneShort.Enabled = True
        optWide.Enabled = True
        optNoBall.Enabled = True
        
        optRuns = True
        optLegal = True
        If Left(vOther, 1) = "o" Then chkOneShort = True Else chkOneShort = False
        If charType = strPENALTYRUNS Then
            HideControls
            lblInfo.Caption = "Penalty runs"
            txtRuns.Visible = True
            txtRuns.Text = PENALTYRUNSCODE - nRuns
        ElseIf charType = "b" Then
            optByes = True
        ElseIf charType = "lb" Then
            optLegByes = True
        ElseIf charType = "w" Then
            optWide = True
        ElseIf charType = "nb" Then
            optNoBall = True
            If vOther = "b" Or vOther = "osb" Then
                optByes = True
            ElseIf vOther = "lb" Or vOther = "oslb" Then
                optLegByes = True
            End If
        ElseIf charType = "x" Then
            chkWicket = True
            chkOneShort.Enabled = False
            'get the wicket info and set it
            Dim prevCode As Long, mRunType As Integer, mBallType As Integer, mHowOut As Integer
            'extract all the information from varOther
            prevCode = vOther
            prevCode = prevCode \ 10
            mRunType = prevCode Mod 10
            prevCode = prevCode \ 10
            mBallType = prevCode Mod 10
            prevCode = prevCode \ 1000
            mHowOut = prevCode Mod 100
            optNoBall.Enabled = False
            optWide.Enabled = False
            If mHowOut = eHowOut.hoHANDLEDBALL Or mHowOut = eHowOut.hoHitBallTwice Or mHowOut = eHowOut.hoRUNOUT Or mHowOut = eHowOut.hoOBSTRUCTINGFIELD Then
                txtRuns.Enabled = True
                optLegal.Enabled = True
                optByes.Enabled = True
                optLegByes.Enabled = True
            Else
                txtRuns.Enabled = False
                optLegal.Enabled = False
                optByes.Enabled = False
                optLegByes.Enabled = False
            End If
            If mHowOut = eHowOut.hoHitBallTwice Then optNoBall.Enabled = True
            If mHowOut = eHowOut.hoSTUMPED Or mHowOut = eHowOut.hoHITWICKET Then optWide.Enabled = True
            If mHowOut = eHowOut.hoRUNOUT Or mHowOut = eHowOut.hoHANDLEDBALL _
                Or mHowOut = eHowOut.hoOBSTRUCTINGFIELD Then
                    optWide.Enabled = True
                    optNoBall.Enabled = True
            End If
            txtRuns.Text = nRuns
            If mRunType = eRunType.rtByes Then
                optByes = True
            ElseIf mRunType = eRunType.rtLegByes Then
                optLegByes = True
            End If
            If mBallType = eBallType.btNoBall Then
                optNoBall = True
            ElseIf mBallType = eBallType.btWide Then
                optWide = True
            End If
        End If
    End If
    If chkWicket.Visible = True Then
        If tabBalls.Tabs.count < 2 Or chkWicket = True Or (txtRuns.Text Mod 2) = 1 And chkOneShort = False Or (txtRuns.Text Mod 2) = 0 And chkOneShort = True Then _
            cmdDeleteBall.Enabled = False Else cmdDeleteBall.Enabled = True
    End If
End Sub

Private Sub HideControls(Optional bVisible As Boolean = False)
    txtRuns.Visible = bVisible
    optLegal.Visible = bVisible
    optWide.Visible = bVisible
    optNoBall.Visible = bVisible
    optRuns.Visible = bVisible
    optByes.Visible = bVisible
    optLegByes.Visible = bVisible
    chkOneShort.Visible = bVisible
    chkWicket.Visible = bVisible
End Sub

Attribute VB_Name = "frmNewBatter"
Attribute VB_Base = "0{A45ADE6F-9485-45C8-AE7D-A54783BB2D0B}{CBF8EEB9-3944-4C34-A9EE-FF22D8F239EC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
'this is the batter that is being replaced
Public NewBatter, B As Integer

Private Sub cmdOK_Click()
    'check if we are replacing a batsmen that has come out of retirement
    If shtMainScoreboard.Cells(1 + NewBatter + 2, 15) = strRETIRED Then Retired = Retired + 1
    'check if the batter has come out of retirement
    If cmbBatter.ListIndex < Retired Then
        'find the batter that has come out of retirement
        'find the first retired batter then the second until the desired retired batsmen is reached
        Dim cRet As Integer
        For B = 1 To 11
            'check if this batsmen was out retired
            If shtMainScoreboard.Cells(1 + 2 + B, 15) = strRETIRED Then
                'make sure this batsmen is not the current batter who is not out
                If Not ((currBatters(1) = B Or currBatters(2) = B) And NewBatter <> B) Then cRet = cRet + 1
            End If
            'if this is the retired batter we are looking for
            If cRet > cmbBatter.ListIndex Then
                For i = 1 To 2
                    If currBatters(i) = NewBatter Then _
                        currBatters(i) = B
                Next i
                Exit For
            End If
        Next B
        Retired = Retired - 1
        NewBatter = B
    Else 'check if the batting order has been changed
        If cmbBatter.ListIndex > Retired Then
            'rearange batting order
            Dim NextUp As String
            NextUp = BatterNames(BattingT, cmbBatter.ListIndex + Wickets + 2)
            'shuffle everyone else down
            For i = cmbBatter.ListIndex + Wickets + 1 To Wickets + 2 + Retired Step -1
                BatterNames(BattingT, i + 1) = BatterNames(BattingT, i)
            Next i
            'set the new batsmen in place
            BatterNames(BattingT, Wickets + 2 + Retired) = NextUp
        End If
        'do this stuff everytime a new batter is chosen
            For i = 1 To 2
               If currBatters(i) = NewBatter Then
                    currBatters(i) = Wickets + 2 + Retired
                    'update the newest selected batter
                    NewBatter = Wickets + 2 + Retired
                    Exit For
                End If
            Next i
    End If
    'update the data sheet to say who the new batter is
    'this must be done after the previous bit which shuffles the batter up to the right place
    If Totalballs > 0 Then
        Dim code As Long
        Const SHIFT As Long = 100000000
        code = shtData.Cells(Totalballs + 2, innings * 6 - 1) Mod SHIFT
        shtData.Cells(Totalballs + 2, innings * 6 - 1) = code + NewBatter * SHIFT
    End If
    'remove the selected batter from the line up
    cmbBatter.RemoveItem (cmbBatter.ListIndex)
    'output the batter names
    EnterBatternames
    frmNewBatter.Hide
End Sub

Private Sub UserForm_Activate()
    'make sure the game has started
    If Totalballs > 0 Then
        If Retired > 0 Then 'if there are currently more than two batsmen retired hurt
            'remove the retired batsmen
            For i = 1 To Retired
                frmNewBatter.cmbBatter.RemoveItem (0)
            Next i
            'add the batsment back on
            For B = 1 To 11
                Dim RetBNO
                'check if this batsmen was out retired
                If shtMainScoreboard.Cells(1 + 2 + B, 15) = strRETIRED Then
                    'make sure this batsmen is not the current batter who is not out
                    If Not ((currBatters(1) = B Or currBatters(2) = B) And frmNewBatter.NewBatter <> B) Then
                        'add the batter to the combo
                        frmNewBatter.cmbBatter.AddItem BatterNames(BattingT, B), RetBNO
                        'increment the counter
                        RetBNO = RetBNO + 1
                    End If
                End If
            Next B
        End If
    End If
    If Wickets >= 1 Then Label1.Caption = "Select the next batsmen:"
    If cmbBatter.ListCount <= Retired Then
        cmbBatter.ListIndex = 0
    Else
        cmbBatter.ListIndex = Retired
    End If
    ToggleAutoCalculate True
    cmbBatter.SetFocus
End Sub

Private Sub UserForm_Initialize()
    Dim i, firstBatsman As Integer
    Label1.Caption = "Select the opening batsmen:"
    If isNewInnings Then firstBatsman = 1 Else firstBatsman = Wickets + 3
    For i = firstBatsman To 11
        cmbBatter.AddItem (BatterNames(BattingT, i))
    Next i
    'add any substitutes
    For i = 12 To MAXPLAYERS
        Dim currPlayer As String
        currPlayer = i & "th man"
        If currPlayer = BatterNames(BattingT, i) Or BatterNames(BattingT, i) = "" Then
            Exit For
        Else
            cmbBatter.AddItem (BatterNames(BattingT, i))
        End If
    Next i
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If Totalballs > 0 Then Cancel = True
End Sub
Attribute VB_Name = "frmNewBowler"
Attribute VB_Base = "0{30D62565-C1E5-4052-868B-D50B59C2DBA0}{A4326A09-0EA0-44F1-9246-C22DEEBA0400}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub cmdCont_Click()
    'prevent same bowler bowling twice
    If Not cmbBowler.ListIndex = arrBowlers(currBowlers(2), 1) - 1 Then
        frmNewBowler.Hide
    Else
        MsgBox Prompt:="The same bowler can't bowl two overs in a row!", Title:=strSCOREBOOK_TITLE
    End If
End Sub

Private Sub UserForm_Activate()
    shtMainScoreboard.cmdNewBowler.Enabled = True
    If arrBowlers(currBowlers(1), 1) > 0 Then
        If arrBowlers(2, 1) > 1 Then
            cmbBowler.ListIndex = arrBowlers(currBowlers(1), 1) - 1
        Else
            cmbBowler.ListIndex = 9
        End If
    Else
        cmbBowler.ListIndex = 10
    End If
    If Totalballs > 0 Then
        frmNewBowler.lblNewBowler.Caption = "Select the next bowler:"
    Else
        frmNewBowler.lblNewBowler.Caption = "Select the first bowler:"
    End If
    ToggleAutoCalculate True
    cmbBowler.SetFocus
End Sub

Private Sub UserForm_Initialize()
    Dim i As Integer
    For i = 1 To 11
        cmbBowler.AddItem (BatterNames(BowlingT, i))
    Next i
    'add any substitutes
    For i = 12 To MAXPLAYERS
        Dim currPlayer As String
        currPlayer = i & "th man"
        If currPlayer = BatterNames(BowlingT, i) Or BatterNames(BowlingT, i) = "" Then
            Exit For
        Else
            cmbBowler.AddItem (BatterNames(BowlingT, i))
        End If
    Next i
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If Totalballs <> ALLOWBOWLERUNLOAD Then Cancel = True
End Sub

Attribute VB_Name = "frmOther"
Attribute VB_Base = "0{32875F80-173D-4DA2-A0A8-E3CAE38E5047}{7FCE8552-762F-4C75-9828-537D1738D75D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    frmOther.Hide
End Sub

Private Sub cmdChangeBowler_Click()
    'change the bowler in the middle of an over
    frmOther.Hide
    Dim oldBowler As Integer, nNewBowler As Integer, oldCurr2 As Integer
    oldCurr2 = currBowlers(2)
    oldBowler = currBowlers(1)
    SwapBowlers
    NewBowler
    If oldBowler <> currBowlers(1) Then
        If arrBowlers(currBowlers(1), 4) = 0 Then
            'this stuff must be done in this order!
            arrBowlers(oldBowler, 2) = arrBowlers(oldBowler, 2) + (arrBowlers(oldBowler, 4) + BallNo) \ BallsPerOver
            arrBowlers(oldBowler, 4) = (arrBowlers(oldBowler, 4) + BallNo) Mod BallsPerOver
            EnterBowlersRunningTotal oldBowler
            OtherBowlersBalls = BallNo
            nNewBowler = currBowlers(1)
            currBowlers(1) = oldBowler
            Enterdata CHANGEBOWLERCODE
            currBowlers(1) = nNewBowler
        Else
            MsgBox "The scorebook only allows for a bowler to replace another bowler once. The bowler will not be changed.", Title:=strSCOREBOOK_TITLE
            Dim stopBowler As Integer
            stopBowler = currBowlers(1)
            currBowlers(1) = oldBowler
            currBowlers(2) = oldCurr2
            CurrBowlerformats stopBowler
        End If
    End If
End Sub

Private Sub cmdEndDay_Click()
    frmOther.Hide
    If BallNo = 0 Then CurrentDay = CurrentDay + 1
    Enterdata ENDDAYCODE - TotalOversAdjustment
    TotalOversAdjustment = TotalOversAdjustment + Int(OversRemaining)
    UpdateTotals
End Sub

Private Sub cmdEndInnings_Click()
    frmOther.Hide
    CheckNewInnings
End Sub

Private Sub cmdEndOver_Click()
    frmOther.Hide
    Enterdata ENDOVERCODE
    ToggleAutoCalculate False
    NewOver
    UpdateCurrentPartnership
End Sub

Private Sub cmdExtraBall_Click()
    frmOther.Hide
    If BallNo = 0 Then
        NewoverUndo
    End If
    Enterdata EXTRABALLBOWLED
End Sub

Private Sub cmdHelp_Click()
    DisplayContextHelp HID_OTHERBUTTONS
End Sub

Private Sub cmdOtherRuns_Click()
    If IsNumeric(txtRuns.Text) Then
        If txtRuns.Text >= 0 Then
            Enterdata txtRuns.Text
            frmOther.Hide
            Exit Sub
        Else
             MsgBox Prompt:=strRUN_ENTRY_NEG, Title:=strSCOREBOOK_TITLE
        End If
    Else
        MsgBox Prompt:=strRUN_ENTRY_NOT_NUMERIC, Title:=strSCOREBOOK_TITLE
    End If
    txtRuns.Text = ""
    txtRuns.SetFocus
End Sub

Private Sub cmdPenaltyRuns_Click()
    'negative runs corresponds to runs scored by the fielding team
    If IsNumeric(txtRuns.Text) Then
        Enterdata PENALTYRUNSCODE
        frmOther.Hide
    Else
        MsgBox Prompt:=strRUN_ENTRY_NOT_NUMERIC, Title:=strSCOREBOOK_TITLE
        txtRuns.Text = ""
        txtRuns.SetFocus
    End If
End Sub

Private Sub cmdSwapBatsmen_Click()
    ToggleAutoCalculate False
    Enterdata SWAPBATSMENCODE
    ToggleAutoCalculate False
    SwapBatsmen
    frmOther.Hide
End Sub

Private Sub UserForm_Activate()
    'Always enable end innings so that matches can be ended to early to collate statistics
    cmdEndInnings.Enabled = True

    If BallNo <= 0 Or OtherBowlersBalls <> 0 Or arrBowlers(currBowlers(1), 4) <> 0 Then
        cmdChangeBowler.Enabled = False
    Else
        cmdChangeBowler.Enabled = True
    End If
    
    If BallNo <= 1 Then
        cmdEndOver.Enabled = False
    Else
        cmdEndOver.Enabled = True
    End If
    
    If (BallNo = BallsPerOver - 1 Or BallNo = 0) And Totalballs > 0 Then
        cmdExtraBall.Enabled = True
    Else
        cmdExtraBall.Enabled = False
    End If
    
    If GameType = TWOINNINGS Then
        cmdEndDay.Enabled = True
    Else
        cmdEndDay.Enabled = False
    End If
    
    txtRuns.Text = 5
    chk1Short.Value = False
End Sub
Attribute VB_Name = "frmTeams"
Attribute VB_Base = "0{751FA061-932C-4664-8A6E-5651DC9948F6}{D8C23B72-7DBC-4F81-A80D-71B406C24A8A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Dim arrTeamNames(1 To 2, 1 To 3) As Object
Const ForReading = 1, ForWriting = 2, ForAppending = 3
Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0

Private Sub cmbBallsPerOver_Change()
    Dim oldIndex As Integer
    oldIndex = cmbMaxBallsPerOver.ListIndex

    If cmbBallsPerOver.ListIndex = 1 Then
        cmbMaxBallsPerOver.RemoveItem 1
        cmbMaxBallsPerOver.RemoveItem 1
        cmbMaxBallsPerOver.AddItem "13"
        cmbMaxBallsPerOver.AddItem "14"
    ElseIf cmbBallsPerOver.ListIndex = 0 Then
        cmbMaxBallsPerOver.AddItem "7", 1
        cmbMaxBallsPerOver.AddItem "6", 1
        cmbMaxBallsPerOver.RemoveItem cmbMaxBallsPerOver.ListCount - 1
        cmbMaxBallsPerOver.RemoveItem cmbMaxBallsPerOver.ListCount - 1
    End If
    cmbMaxBallsPerOver.ListIndex = oldIndex
End Sub

Private Sub cmdCancel_Click()
    frmTeams.Hide
End Sub

Private Sub cmdColourScheme_Click()
    frmColourScheme.Show
End Sub

Private Sub cmdContinue_Click()
    'check that team names are different
    If txtT1.Text = "" Or txtT2.Text = "" Or txtT1I.Text = "" Or txtT2I.Text = "" Then
        MsgBox "Team names can not be blank.", Title:=strSCOREBOOK_TITLE
        Exit Sub
    ElseIf UCase(txtT1.Text) = UCase(txtT2.Text) Or UCase(txtT1I.Text) = UCase(txtT2I.Text) Then
        MsgBox "The two teams must have different names and initials.", Title:=strSCOREBOOK_TITLE
        Exit Sub
    End If

    If maxOvers = 0 Or Not IsNumeric(txtMaxOvers1st.Text) Then maxOvers = maxOversFullVersion
    Dim msg As String
    Dim msg2 As String
    msg2 = "Your must enter a number for 'Total days'"
    msg = "You must enter a number between " & minOvers & " and " & maxOvers & " for the number of overs!"
    If IsNumeric(txtOvers.Text) Then
        If txtOvers.Text > maxOvers Or txtOvers.Text < minOvers Then
            MsgBox msg, Title:=strSCOREBOOK_TITLE
        ElseIf IsDate(txtDate.Text) Then
            If cmbInnings.Text <> TWOINNINGS Or IsNumeric(txtDays.Text) Then
                frmTeams.Hide
                If innings > 1 Then DeleteInningsTwoSheets
                
                'save settings in the registry
                If cmbInnings.Text = TWOINNINGS Then
                    SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "OversPerDay", txtOvers.Text
                Else
                    SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "1InningsOvers", txtOvers.Text
                End If
                
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "T1", txtT1
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "T2", txtT2
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "T1I", txtT1I
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "T2I", txtT2I
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "Team1", txtBatters
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "Team2", txtBowlers
                
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "Innings", cmbInnings.ListIndex
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "MaxBallsPerOver", cmbMaxBallsPerOver.ListIndex
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "BallsPerOver", cmbBallsPerOver.ListIndex
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "Days", txtDays.Text
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "MaxOvers1stInnings", txtMaxOvers1st.Text
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "WideRule", cmbWideRule.ListIndex
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "NoBallRule", cmbNoBallRule.ListIndex
                SaveSetting strSCOREBOOK_TITLE, strNEW_GAME, "Location", txtLocation.Text
                
                NewGame
            Else
                MsgBox msg2, Title:=strSCOREBOOK_TITLE
            End If
        Else
            MsgBox "You must enter a valid date!", Title:=strSCOREBOOK_TITLE
        End If
    Else
        MsgBox msg, Title:=strSCOREBOOK_TITLE
    End If
End Sub
Private Sub SaveOldRules(Optional bSave As Boolean = True)
    Static oldWideRule As ExtraScoringMode
    Static oldNoBallRule As ExtraScoringMode
    
    If bSave = True Then
        'save the old rules
        oldWideRule = cmbWideRule.ListIndex
        oldNoBallRule = cmbNoBallRule.ListIndex
    Else
        'load the old rules = to the old rules
        If cmbWideRule.ListIndex > -1 Then cmbWideRule.ListIndex = oldWideRule
        If cmbNoBallRule.ListIndex > -1 Then cmbNoBallRule.ListIndex = oldNoBallRule
    End If
End Sub
Private Sub LoadOldRules()
    SaveOldRules False
End Sub

Private Sub cmbInnings_Change()
    Static oldText As String
    If cmbInnings.Text <> TWOINNINGS Then
        lblFollowOn.Visible = False
        txtFollowOn.Visible = False
        lblBallsPerOver.Caption = "Balls per Over:"
        lblMaxBalls.Caption = "Max Balls per Over:"
        txtDays.Visible = False
        cmbMaxBallsPerOver.Visible = True
        txtMaxOvers1st.Visible = False
        cmbWideRule.Enabled = True
        cmbNoBallRule.Enabled = True
        'LoadOldRules
        'change other stuff
        lblOvers.Caption = strCAPTION_OVERS_PER_INNINGS
        txtOvers.Text = default1InningsOvers
    ElseIf cmbInnings.Text = TWOINNINGS Then
        lblFollowOn.Visible = True
        txtFollowOn.Visible = True
        lblBallsPerOver.Caption = "Max Overs 1st Inn:"
        lblMaxBalls.Caption = "Total Days:"
        txtDays.Visible = True
        txtMaxOvers1st.Visible = True
        'go back to what ever it was last
        cmbWideRule.Enabled = True
        cmbNoBallRule.Enabled = True
        lblOvers.Caption = "Overs per Day:"
        txtOvers.Text = defaultOversPerDay
        cmbMaxBallsPerOver.Visible = False
        txtDays.Visible = True
    End If
    'store the current state of the combo
    oldText = cmbInnings.Text
End Sub

Private Sub cmdHelp_Click()
    DisplayContextHelp HID_NEWGAME
End Sub

Private Sub cmdLoadT1_Click()
    LoadTeam 1
End Sub
Sub LoadTeam(teamNo As Integer)
    Dim fs, ts, fileOpenName
    fileOpenName = Application.GetOpenFilename(strCRICKET_TEAM_DATA)
    If fileOpenName <> False Then
        If Right(fileOpenName, 4) <> ctdExt Then fileOpenName = fileOpenName & ctdExt
        Set fs = CreateObject("Scripting.FileSystemObject")
        Set ts = fs.OpenTextFile(fileOpenName, ForReading) 'Create a file
        'load colours
        For j = 1 To Size2
            Dim s As Long
            s = Val(ts.Readline)
            If s <> 0 Then ThisWorkbook.Colors(arrColourIndex(teamNo, j)) = s
        Next j
        arrTeamNames(teamNo, 2).Text = ts.Readline
        arrTeamNames(teamNo, 3).Text = ts.Readline
        arrTeamNames(teamNo, 1).Text = ""
        For i = 1 To MAXPLAYERS + 2
            Dim newText As String
            newText = ts.Readline
            arrTeamNames(teamNo, 1).Text = arrTeamNames(teamNo, 1).Text & newText & Chr(10)
            If ts.AtEndOfStream = True Then Exit For
        Next i
        ts.Close
    End If
End Sub

Private Sub cmdLoadT2_Click()
    LoadTeam 2
End Sub

Private Sub cmdSaveT1_Click()
    SaveTeam 1
End Sub

Private Sub cmdSaveT2_Click()
    SaveTeam 2
End Sub
Sub SaveTeam(teamNo As Integer)
    Dim f, fs, ts, fileSaveName
    Dim initialFileName As String
    If teamNo = 1 Then initialFileName = txtT1.Text & ctdExt Else initialFileName = txtT2.Text & ctdExt
    fileSaveName = Application.GetSaveAsFilename(initialFileName, _
                    strCRICKET_TEAM_DATA)
    If fileSaveName <> False Then
        If Right(fileSaveName, 4) <> ctdExt Then fileSaveName = fileSaveName & ctdExt
        Set fs = CreateObject("Scripting.FileSystemObject")
        If fs.FileExists(fileSaveName) = True Then
            If MsgBox("The file " & fileSaveName & " already exists. Are you sure you want to overwrite it?", _
                vbYesNo, Title:=strSCOREBOOK_TITLE) = vbNo Then Exit Sub
        End If
        fs.CreateTextFile fileSaveName, True            'Create a file
        Set f = fs.GetFile(fileSaveName)
        Set ts = f.OpenAsTextStream(ForWriting, TristateUseDefault)
        
        For i = 1 To Size2
            If arrColourIndex(teamNo, i) = 0 Then
                ts.WriteLine 0
            Else
                ts.WriteLine ThisWorkbook.Colors(arrColourIndex(teamNo, i))
            End If
        Next i
        ts.WriteLine arrTeamNames(teamNo, 2).Text
        ts.WriteLine arrTeamNames(teamNo, 3).Text
        ts.WriteLine arrTeamNames(teamNo, 1).Text

        ts.Close
    End If
End Sub

Private Sub cmdSwapNames_Click()
    Dim Temp
    For i = 1 To 17
        Temp = txtBatters.Text
        txtBatters.Text = txtBowlers.Text
        txtBowlers.Text = Temp
    Next i
    Temp = txtT1.Text
    txtT1.Text = txtT2.Text
    txtT2.Text = Temp
    
    Temp = txtT1I.Text
    txtT1I.Text = txtT2I.Text
    txtT2I.Text = Temp
    
    SwapTeamColours
End Sub



Private Sub UserForm_Activate()
    cmdCancel.SetFocus
End Sub

Private Sub UserForm_Initialize()
On Error Resume Next
    'setup the default match settings
    defaultOversPerDay = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "OversPerDay", 90)
    default1InningsOvers = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "1InningsOvers", 50)
    
    txtDate = Format(Date, "Short Date")
    
    txtT1 = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "T1", "Backyard Fans")
    txtT2 = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "T2", "RMs")
    txtT1I = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "T1I", "BYF")
    txtT2I = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "T2I", "RMS")
    Dim team1 As String, team2 As String
    team1 = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "Team1", "")
    team2 = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "Team2", "")
    If team1 <> "" And team2 <> "" Then
        txtBatters = team1
        txtBowlers = team2
    End If
    
    Dim gameTypeValue As Integer, wideRuleValue As Integer, noBallRuleValue As Integer, maxBallsPerOverValue As Integer, ballsPerOverValue As Integer
    gameTypeValue = Int(Val(GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "Innings", 0)))
    'Default the wide rules to the international rules
    wideRuleValue = Int(Val(GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "WideRule", 1)))
    noBallRuleValue = Int(Val(GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "NoBallRule", 1)))
    maxBallsPerOverValue = Int(Val(GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "MaxBallsPerOver", 0)))
    ballsPerOverValue = Int(Val(GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "BallsPerOver", 0)))
    
    txtDays.Text = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "Days", 2)
    txtMaxOvers1st.Text = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "MaxOvers1stInnings", 0)
    txtLocation.Text = GetSetting(strSCOREBOOK_TITLE, strNEW_GAME, "Location", "Innes Common")
    
    'set up the array of textboxes
    Set arrTeamNames(1, 1) = txtBatters
    Set arrTeamNames(2, 1) = txtBowlers
    Set arrTeamNames(1, 2) = txtT1
    Set arrTeamNames(2, 2) = txtT2
    Set arrTeamNames(1, 3) = txtT1I
    Set arrTeamNames(2, 3) = txtT2I
    
    txtBatters.ControlTipText = "Enter the names of the players in the batting team"
    txtBowlers.ControlTipText = "Enter the names of the players in the bowling team"

    With cmbInnings
        .AddItem ONEINNINGS
        .AddItem TWOINNINGS
        .ListIndex = gameTypeValue
    End With
    With cmbWideRule
        .AddItem "0 or n"
        .AddItem "1 + n"
        .AddItem "1 or n"
        .AddItem "2 + n"
        .AddItem "2 or n"
        .ListIndex = wideRuleValue
    End With
    With cmbNoBallRule
        .AddItem "0 or n"
        .AddItem "1 + n"
        .AddItem "1 or n"
        .AddItem "2 + n"
        .AddItem "2 or n"
        .ListIndex = noBallRuleValue
    End With
    With cmbMaxBallsPerOver
        .AddItem "-"
        .AddItem "6"
        .AddItem "7"
        .AddItem "8"
        .AddItem "9"
        .AddItem "10"
        .AddItem "11"
        .AddItem "12"
    End With
    'this must be done after the max balls per over
    With cmbBallsPerOver
        .AddItem "6"
        .AddItem "8"
        .ListIndex = 1
        .ListIndex = ballsPerOverValue
    End With
    cmbMaxBallsPerOver.ListIndex = maxBallsPerOverValue
    
    cmbInnings_Change
End Sub

Attribute VB_Name = "frmWicket"
Attribute VB_Base = "0{C45BCF4A-D6B1-4FB9-A341-946A5700D1DC}{E13C0174-8BE0-43C1-B273-53024256D7A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Const SmallHeight As Integer = 75
Const MediumHeight As Integer = 98
Const LargeHeight As Integer = 125
Public LastBatterOut As Integer
Public LastWhoOut As Integer

Private Sub cmbHowout_Change()
    'reset the variables
    txtRuns.Text = "0"
    cmbRtype.ListIndex = 0
    cmbWhosout.ListIndex = 0
    chkCrossed.Value = False
    'do the stuff that depends on how out
    Select Case cmbHowout.ListIndex
        Case 0, 5 'runout or caught
            cmbFielder.Enabled = True
            chkCrossed.Enabled = True
        Case 3 'hit wicket
            cmbFielder.Enabled = False
            chkCrossed.Enabled = False
            cmbType.Enabled = True
        Case 4  'stumped
            cmbFielder.Enabled = True
            chkCrossed.Enabled = False
            cmbType.Enabled = True
        Case 6 'handled ball
            cmbFielder.Enabled = False
            chkCrossed.Enabled = True
        Case 1, 2, 9, 10, 11  'bowled, lbw, timed out or retired
            cmbFielder.Enabled = False
            chkCrossed.Enabled = False
        Case Else
            cmbFielder.Enabled = False
            chkCrossed.Enabled = True
    End Select
    If cmbHowout.ListIndex >= 5 Then
        frmWicket.Height = LargeHeight
        ToggleRow2 True
        ToggleRow3 True
        SetBottomButtons
        'if it was timed out or retired then only allow to select the batter
        If cmbHowout.ListIndex >= 9 Then
            cmbRtype.Enabled = False
            cmbType.Enabled = False
            txtRuns.Enabled = False
        Else
            cmbRtype.Enabled = False
            cmbType.Enabled = True
            txtRuns.Enabled = True
        End If
    ElseIf cmbHowout.ListIndex = 4 Or cmbHowout.ListIndex = 3 Then
        ToggleRow2 True
        ToggleRow3 False
        frmWicket.Height = MediumHeight
        SetBottomButtons
        cmbWhosout.ListIndex = 0
    Else
        ToggleRow2 False
        ToggleRow3 False
        frmWicket.Height = SmallHeight
        SetBottomButtons
        cmbWhosout.ListIndex = 0
    End If
End Sub

Private Sub cmbType_Change()
    If cmbType.ListIndex = 1 Or txtRuns.Text = "0" Then
        cmbRtype.Enabled = False
    Else
        cmbRtype.Enabled = True
    End If
    If (cmbType.ListIndex = eBallType.btNoBall And (cmbHowout.ListIndex = eHowOut.hoHITWICKET Or cmbHowout.ListIndex = eHowOut.hoSTUMPED)) Or _
       (cmbType.ListIndex = eBallType.btWide And cmbHowout.ListIndex = eHowOut.hoHitBallTwice) Then
            cmbType.ListIndex = eBallType.btLegal
    End If
End Sub

Private Sub cmdCancel_Click()
    'set flag indicating that the wicket was cancelled
    cmbHowout.ListIndex = -1
    frmWicket.Hide
End Sub

Private Sub cmdHelp_Click()
    DisplayContextHelp HID_SCORINGWICKETS
End Sub

 Sub EnterWicket()
    ToggleAutoCalculate False
    'update last batter out variables
    LastWhoOut = cmbWhosout.ListIndex + 1
    LastBatterOut = currBatters(LastWhoOut)
    'add a wicket if the batsmen did not retire hurt
    If cmbHowout.ListIndex < 11 Then Wickets = Wickets + 1
    'check if bowler got a wicket
    If cmbHowout.ListIndex <= 4 Then shtMainScoreboard.Cells(1 + 20 + currBowlers(1), 5) = shtMainScoreboard.Cells(1 + 20 + currBowlers(1), 5) + 1
    'increase total wickets
    shtMainScoreboard.Cells(1 + 15, 3) = Wickets
    'add a ball to total balls
    Totalballs = Totalballs + 1
    'if the batsmen was not timed out or retired
    If cmbHowout.ListIndex < 9 Then
        BallsBowled = BallsBowled + 1
        'check if it was a noball or wide and update bowlers runs conceded
        If cmbType.ListIndex = eBallType.btWide Then
            EnterWide txtRuns.Text
        ElseIf cmbType.ListIndex = eBallType.btNoBall Then
            If cmbRtype.ListIndex = 0 Then
                EnterNoBall txtRuns.Text, "r"
            ElseIf cmbRtype.ListIndex = 1 Then
                EnterNoBall txtRuns.Text, "b"
            Else
                EnterNoBall txtRuns.Text, "lb"
            End If
        Else
            If cmbRtype.ListIndex = 0 Then
                EnterRuns txtRuns.Text
            ElseIf cmbRtype.ListIndex = 1 Then
                EnterByes txtRuns.Text
            Else
                EnterLegByes txtRuns.Text
            End If
        End If
    End If
    'need to update the data sheet before wicket is entered otherwise retired hurt will not work
    Updatedatasheet
    AddNewOverRow
    EnterRecentDeliveries
    'enter batsmens howout
    Dim HowOut As String
    Select Case cmbHowout.ListIndex
        Case eHowOut.hoCAUGHT
        'check for caught and bowled
            If BatterNames(BowlingT, cmbFielder.ListIndex + 1) = BatterNames(BowlingT, arrBowlers(currBowlers(1), 1)) Then
                HowOut = "c&b " & BatterNames(BowlingT, arrBowlers(currBowlers(1), 1))
            Else
                HowOut = "c " & BatterNames(BowlingT, cmbFielder.ListIndex + 1) & " b " & BatterNames(BowlingT, arrBowlers(currBowlers(1), 1))
            End If
        Case eHowOut.hoBOWLED
            HowOut = "b " & BatterNames(BowlingT, arrBowlers(currBowlers(1), 1))
        Case eHowOut.hoLBW
            HowOut = "lbw b " & BatterNames(BowlingT, arrBowlers(currBowlers(1), 1))
        Case eHowOut.hoHITWICKET
            HowOut = "hit wkt b " & BatterNames(BowlingT, arrBowlers(currBowlers(1), 1))
        Case eHowOut.hoSTUMPED
            HowOut = "st " & BatterNames(BowlingT, cmbFielder.ListIndex + 1) & " b " & BatterNames(BowlingT, arrBowlers(currBowlers(1), 1))
        Case eHowOut.hoRUNOUT
            HowOut = "run out(" & BatterNames(BowlingT, cmbFielder.ListIndex + 1) & ")"
        Case Else
            HowOut = cmbHowout.Text
    End Select
    shtMainScoreboard.Cells(1 + 2 + currBatters(cmbWhosout.ListIndex + 1), 15) = HowOut
    'if the batsmen did not retire hurt
    If cmbHowout.ListIndex < 11 Then
        'update latest partnership
        If cmbWhosout.ListIndex = 0 Then Notout = currBatters(2) Else Notout = currBatters(1)
        Totalruns = Totalruns + txtRuns.Text
        Partnership (currBatters(cmbWhosout.ListIndex + 1))
        'fall of wicket in batters stats
        shtMainScoreboard.Cells(1 + currBatters(cmbWhosout.ListIndex + 1) + 2, 14) = Totalruns
    Else
        'add the batsmen to the new batters form
        frmNewBatter.cmbBatter.AddItem BatterNames(BattingT, currBatters(cmbWhosout.ListIndex + 1)), Retired
        'increment to say that another batsmen has retired hurt
        Retired = Retired + 1
    End If
    frmWicket.Hide
    'send in new batter if its not the end of the innings
    If Not (BallNo = BallsPerOver And OverNo + 1 >= Totalovers And GameType <> TWOINNINGS) Then
        Oldbatterformats (currBatters(cmbWhosout.ListIndex + 1))
        currBatters(cmbWhosout.ListIndex + 1) = Wickets + Retired + 2
        If Not Wickets = maxWickets Then NewBatter (Wickets + Retired + 2)
        'check if batsmen need to swap
        If chkCrossed.Value = True And txtRuns.Text Mod 2 = 0 Then
            If Not Wickets = maxWickets Then SwapBatsmen
        ElseIf chkCrossed.Value = False And txtRuns.Text Mod 2 = 1 Then
            If Not Wickets = maxWickets Then SwapBatsmen
        End If
    End If
 End Sub
Private Sub Updatedatasheet()
    Dim code As Long
    'code: batsmen out, retired hurt flag, crossed, howout, fielder, delivery type, runs type, runs scored, whosout
    'check if this batsmen retired hurt and has now been dismissed or retired AGAIN!
    Dim retiredHurt As Integer
    Dim strHowout As String
    strHowout = shtMainScoreboard.Cells(1 + 2 + currBatters(cmbWhosout.ListIndex + 1), 15)
    If strHowout = strRETIRED Then _
        retiredHurt = 2 Else retiredHurt = 0
    'store value for whether or not the batsmen crossed, because true does not have value 1
    Dim chkCrossedValue As Integer
    If chkCrossed.Value = True Then chkCrossedValue = 1 Else chkCrossedValue = 0
    If cmbHowout.ListIndex = eHowOut.hoRETIRED Then
        'have a special code if the batsmen retires hurt
        'store the batsmen who got out instead of the fielder
        code = (retiredHurt + chkCrossedValue) * 10000000 + cmbHowout.ListIndex * 100000 + currBatters(cmbWhosout.ListIndex + 1) * 1000 + cmbType.ListIndex * 100 + cmbRtype.ListIndex * 10 + cmbWhosout.ListIndex
    Else
        code = (retiredHurt + chkCrossedValue) * 10000000 + cmbHowout.ListIndex * 100000 + cmbFielder.ListIndex * 1000 + cmbType.ListIndex * 100 + cmbRtype.ListIndex * 10 + cmbWhosout.ListIndex
    End If
    shtData.Cells(Totalballs + 2, innings * 6 - 4) = OverNo * BallsPerOver + BallNo
    shtData.Cells(Totalballs + 2, innings * 6 - 3) = txtRuns.Text
    shtData.Cells(Totalballs + 2, innings * 6 - 2) = "x"
    shtData.Cells(Totalballs + 2, innings * 6 - 1) = code
    'This contains the bowlers index, batters index, wickets down, bowlers overs, batters details string length before entry of this ball
    shtData.Cells(Totalballs + 2, innings * 6) = currBowlers(1) + currBatters(1) * 100 + Wickets * CLng(10000)
    shtData.Cells(Totalballs + 2, innings * 6 - 5) = (arrBowlers(currBowlers(1), 2) + (arrBowlers(currBowlers(1), 4) + BallsPerOver - 1) \ BallsPerOver) _
        + CLng(1000) * Len(shtDetails.Cells((innings - 1) * 36 + currBatters(1) + 2, 4))
End Sub

Private Sub cmdOK_Click()
    EnterWicket
End Sub

Private Sub txtRuns_Change()
    If IsNumeric(txtRuns.Text) Then
        If txtRuns.Text <= 0 Or cmbType.ListIndex = 1 Then
            cmbRtype.Enabled = False
        Else
            cmbRtype.Enabled = True
        End If
    End If
End Sub

Private Sub txtRuns_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If IsNumeric(txtRuns.Text) Then
        If txtRuns.Text < 0 Then
            MsgBox "Runs can not be negative!", vbCritical, Title:=strSCOREBOOK_TITLE
            Cancel = True
        End If
    Else
        MsgBox "Runs must be a number!", vbCritical, Title:=strSCOREBOOK_TITLE
        Cancel = True
    End If
End Sub
Private Sub ToggleRow2(Visible As Boolean)
    lblDeliveryType.Visible = Visible
    lblRunsType.Visible = Visible
    cmbRtype.Visible = Visible
    cmbType.Visible = Visible
End Sub
Private Sub ToggleRow3(Visible As Boolean)
    lblRunsScored.Visible = Visible
    lblWhosOut.Visible = Visible
    txtRuns.Visible = Visible
    cmbWhosout.Visible = Visible
End Sub
Private Sub SetBottomButtons()
    Const Space As Integer = 45
    cmdHelp.Top = frmWicket.Height - Space
    cmdOK.Top = frmWicket.Height - Space
    cmdCancel.Top = frmWicket.Height - Space
    chkCrossed.Top = frmWicket.Height - Space
End Sub
Private Sub UserForm_Activate()
    chkCrossed.Value = False
    txtRuns.Text = "0"
    cmbHowout.ListIndex = 0
    cmbFielder.ListIndex = 0
    cmbType.ListIndex = 0
    cmbRtype.ListIndex = 0
    cmbRtype.Enabled = False
    frmWicket.Height = SmallHeight
    SetBottomButtons
    cmbWhosout.RemoveItem (1)
    cmbWhosout.RemoveItem (0)
    cmbWhosout.AddItem (BatterNames(BattingT, currBatters(1)))
    cmbWhosout.AddItem (BatterNames(BattingT, currBatters(2)))
    cmbWhosout.ListIndex = 0
    ToggleAutoCalculate True
    cmbHowout.SetFocus
End Sub

Private Sub UserForm_Initialize()
    Dim i As Integer
    'add the eleven main players
    For i = 1 To 11
        cmbFielder.AddItem (BatterNames(BowlingT, i))
    Next i
    'add any substitutes
    For i = 12 To MAXPLAYERS
        Dim currPlayer As String
        currPlayer = i & "th man"
        If currPlayer = BatterNames(BowlingT, i) Or BatterNames(BowlingT, i) = "" Then
            Exit For
        Else
            cmbFielder.AddItem (BatterNames(BowlingT, i))
        End If
    Next i
    cmbRtype.AddItem "runs"
    cmbRtype.AddItem "byes"
    cmbRtype.AddItem "leg byes"
    cmbType.AddItem "legal"
    cmbType.AddItem "wide"
    cmbType.AddItem "no ball"
    cmbHowout.AddItem "caught"
    cmbHowout.AddItem "bowled"
    cmbHowout.AddItem "lbw"
    cmbHowout.AddItem "hit wicket"
    cmbHowout.AddItem "stumped"
    cmbHowout.AddItem "run out"
    cmbHowout.AddItem "handled ball"
    cmbHowout.AddItem "obstructing field"
    cmbHowout.AddItem "hit ball twice"
    cmbHowout.AddItem "timed out" 'index 9
    cmbHowout.AddItem "retired out" 'index 10
    cmbHowout.AddItem strRETIRED 'index 11
    txtRuns.Text = "0"
    'check if we are starting a new game and have not selected first batters yet
    If currBatters(1) = 0 Then
        cmbWhosout.AddItem ""
        cmbWhosout.AddItem ""
    Else
        cmbWhosout.AddItem (BatterNames(BattingT, currBatters(1)))
        cmbWhosout.AddItem (BatterNames(BattingT, currBatters(2)))
    End If
    txtRuns.Text = "0"
    cmbWhosout.ListIndex = 0
    cmbHowout.ListIndex = 0
    cmbFielder.ListIndex = 0
    cmbType.ListIndex = 0
    cmbRtype.ListIndex = 0
    frmWicket.Height = SmallHeight
    SetBottomButtons
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        cmdCancel_Click
        Cancel = True
    End If
End Sub
Attribute VB_Name = "sendToSerial"
Option Explicit

' This code was taken from http://dev.emcelettronica.com/serial-port-communication-in-excel-vba
' All rights reserved

'-------------------------------------------------------------------------------

'
' This VB module is a collection of routines to perform serial port I/O without
' using the Microsoft Comm Control component.  This module uses the Windows API
' to perform the overlapped I/O operations necessary for serial communications.
'
' The routine can handle up to 4 serial ports which are identified with a
' Port ID.
'
' All routines (with the exception of CommRead and CommWrite) return an error
' code or 0 if no error occurs.  The routine CommGetError can be used to get
' the complete error message.
'-------------------------------------------------------------------------------

'-------------------------------------------------------------------------------
' Public Constants
'-------------------------------------------------------------------------------

' Output Control Lines (CommSetLine)
Const LINE_BREAK = 1
Const LINE_DTR = 2
Const LINE_RTS = 3

' Input Control Lines  (CommGetLine)
Const LINE_CTS = &H10&
Const LINE_DSR = &H20&
Const LINE_RING = &H40&
Const LINE_RLSD = &H80&
Const LINE_CD = &H80&

'-------------------------------------------------------------------------------
' System Constants
'-------------------------------------------------------------------------------
Private Const ERROR_IO_INCOMPLETE = 996&
Private Const ERROR_IO_PENDING = 997
Private Const GENERIC_READ = &H80000000
Private Const GENERIC_WRITE = &H40000000
Private Const FILE_ATTRIBUTE_NORMAL = &H80
Private Const FILE_FLAG_OVERLAPPED = &H40000000
Private Const FORMAT_MESSAGE_FROM_SYSTEM = &H1000
Private Const OPEN_EXISTING = 3

' COMM Functions
Private Const MS_CTS_ON = &H10&
Private Const MS_DSR_ON = &H20&
Private Const MS_RING_ON = &H40&
Private Const MS_RLSD_ON = &H80&
Private Const PURGE_RXABORT = &H2
Private Const PURGE_RXCLEAR = &H8
Private Const PURGE_TXABORT = &H1
Private Const PURGE_TXCLEAR = &H4

' COMM Escape Functions
Private Const CLRBREAK = 9
Private Const CLRDTR = 6
Private Const CLRRTS = 4
Private Const SETBREAK = 8
Private Const SETDTR = 5
Private Const SETRTS = 3

'-------------------------------------------------------------------------------
' System Structures
'-------------------------------------------------------------------------------
Private Type COMSTAT
        fBitFields As Long ' See Comment in Win32API.Txt
        cbInQue As Long
        cbOutQue As Long
End Type

Private Type COMMTIMEOUTS
        ReadIntervalTimeout As Long
        ReadTotalTimeoutMultiplier As Long
        ReadTotalTimeoutConstant As Long
        WriteTotalTimeoutMultiplier As Long
        WriteTotalTimeoutConstant As Long
End Type

'
' The DCB structure defines the control setting for a serial
' communications device.
'
Private Type DCB
        DCBlength As Long
        BaudRate As Long
        fBitFields As Long ' See Comments in Win32API.Txt
        wReserved As Integer
        XonLim As Integer
        XoffLim As Integer
        ByteSize As Byte
        Parity As Byte
        StopBits As Byte
        XonChar As Byte
        XoffChar As Byte
        ErrorChar As Byte
        EofChar As Byte
        EvtChar As Byte
        wReserved1 As Integer 'Reserved; Do Not Use
End Type

Private Type OVERLAPPED
        Internal As Long
        InternalHigh As Long
        offset As Long
        OffsetHigh As Long
        hEvent As Long
End Type

Private Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Long
End Type

'-------------------------------------------------------------------------------
' System Functions
'-------------------------------------------------------------------------------
'
' Fills a specified DCB structure with values specified in
' a device-control string.
'
Private Declare Function BuildCommDCB Lib "kernel32" Alias "BuildCommDCBA" _
    (ByVal lpDef As String, lpDCB As DCB) As Long
'
' Retrieves information about a communications error and reports
' the current status of a communications device. The function is
' called when a communications error occurs, and it clears the
' device's error flag to enable additional input and output
' (I/O) operations.
'
Private Declare Function ClearCommError Lib "kernel32" _
    (ByVal hFile As Long, lpErrors As Long, lpStat As COMSTAT) As Long
'
' Closes an open communications device or file handle.
'
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
'
' Creates or opens a communications resource and returns a handle
' that can be used to access the resource.
'
Private Declare Function CreateFile Lib "kernel32" Alias "CreateFileA" _
    (ByVal lpFileName As String, ByVal dwDesiredAccess As Long, _
    ByVal dwShareMode As Long, lpSecurityAttributes As Any, _
    ByVal dwCreationDisposition As Long, ByVal dwFlagsAndAttributes As Long, _
    ByVal hTemplateFile As Long) As Long
'
' Directs a specified communications device to perform a function.
'
Private Declare Function EscapeCommFunction Lib "kernel32" _
    (ByVal nCid As Long, ByVal nFunc As Long) As Long
'
' Formats a message string such as an error string returned
' by anoher function.
'
Private Declare Function FormatMessage Lib "kernel32" Alias "FormatMessageA" _
    (ByVal dwFlags As Long, lpSource As Any, ByVal dwMessageId As Long, _
    ByVal dwLanguageId As Long, ByVal lpBuffer As String, ByVal nSize As Long, _
    Arguments As Long) As Long
'
' Retrieves modem control-register values.
'
Private Declare Function GetCommModemStatus Lib "kernel32" _
    (ByVal hFile As Long, lpModemStat As Long) As Long
'
' Retrieves the current control settings for a specified
' communications device.
'
Private Declare Function GetCommState Lib "kernel32" _
    (ByVal nCid As Long, lpDCB As DCB) As Long
'
' Retrieves the calling thread's last-error code value.
'
Private Declare Function GetLastError Lib "kernel32" () As Long
'
' Retrieves the results of an overlapped operation on the
' specified file, named pipe, or communications device.
'
Private Declare Function GetOverlappedResult Lib "kernel32" _
    (ByVal hFile As Long, lpOverlapped As OVERLAPPED, _
    lpNumberOfBytesTransferred As Long, ByVal bWait As Long) As Long
'
' Discards all characters from the output or input buffer of a
' specified communications resource. It can also terminate
' pending read or write operations on the resource.
'
Private Declare Function PurgeComm Lib "kernel32" _
    (ByVal hFile As Long, ByVal dwFlags As Long) As Long
'
' Reads data from a file, starting at the position indicated by the
' file pointer. After the read operation has been completed, the
' file pointer is adjusted by the number of bytes actually read,
' unless the file handle is created with the overlapped attribute.
' If the file handle is created for overlapped input and output
' (I/O), the application must adjust the position of the file pointer
' after the read operation.
'
Private Declare Function ReadFile Lib "kernel32" _
    (ByVal hFile As Long, ByVal lpBuffer As String, _
    ByVal nNumberOfBytesToRead As Long, ByRef lpNumberOfBytesRead As Long, _
    lpOverlapped As OVERLAPPED) As Long
'
' Configures a communications device according to the specifications
' in a device-control block (a DCB structure). The function
' reinitializes all hardware and control settings, but it does not
' empty output or input queues.
'
Private Declare Function SetCommState Lib "kernel32" _
    (ByVal hCommDev As Long, lpDCB As DCB) As Long
'
' Sets the time-out parameters for all read and write operations on a
' specified communications device.
'
Private Declare Function SetCommTimeouts Lib "kernel32" _
    (ByVal hFile As Long, lpCommTimeouts As COMMTIMEOUTS) As Long
'
' Initializes the communications parameters for a specified
' communications device.
'
Private Declare Function SetupComm Lib "kernel32" _
 (ByVal hFile As Long, ByVal dwInQueue As Long, ByVal dwOutQueue As Long) As Long
'
' Writes data to a file and is designed for both synchronous and a
' synchronous operation. The function starts writing data to the file
' at the position indicated by the file pointer. After the write
' operation has been completed, the file pointer is adjusted by the
' number of bytes actually written, except when the file is opened with
' FILE_FLAG_OVERLAPPED. If the file handle was created for overlapped
' input and output (I/O), the application must adjust the position of
' the file pointer after the write operation is finished.
'
Private Declare Function WriteFile Lib "kernel32" _
    (ByVal hFile As Long, ByVal lpBuffer As String, _
    ByVal nNumberOfBytesToWrite As Long, lpNumberOfBytesWritten As Long, _
    lpOverlapped As OVERLAPPED) As Long


Private Declare Sub AppSleep Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Long)
'-------------------------------------------------------------------------------
' Program Constants
'-------------------------------------------------------------------------------

Private Const MAX_PORTS = 4

'-------------------------------------------------------------------------------
' Program Structures
'-------------------------------------------------------------------------------

Private Type COMM_ERROR
    lngErrorCode As Long
    strFunction As String
    strErrorMessage As String
End Type

Private Type COMM_PORT
    lngHandle As Long
    blnPortOpen As Boolean
    udtDCB As DCB
End Type

 

'-------------------------------------------------------------------------------
' Program Storage
'-------------------------------------------------------------------------------

Private udtCommOverlap As OVERLAPPED
Private udtCommError As COMM_ERROR
Private udtPorts(1 To MAX_PORTS) As COMM_PORT
'-------------------------------------------------------------------------------
' GetSystemMessage - Gets system error text for the specified error code.
'-------------------------------------------------------------------------------
Public Function GetSystemMessage(lngErrorCode As Long) As String
Dim intPos As Integer
Dim strMessage As String, strMsgBuff As String * 256

    Call FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, lngErrorCode, 0, strMsgBuff, 255, 0)

    intPos = InStr(1, strMsgBuff, vbNullChar)
    If intPos > 0 Then
        strMessage = Trim$(Left$(strMsgBuff, intPos - 1))
    Else
        strMessage = Trim$(strMsgBuff)
    End If
    
    GetSystemMessage = strMessage
    
End Function
Public Function PauseApp(PauseInSeconds As Long)
    
    Call AppSleep(PauseInSeconds * 1000)
    
End Function

'-------------------------------------------------------------------------------
' CommOpen - Opens/Initializes serial port.
'
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strPort     - COM port name. (COM1, COM2, COM3, COM4)
'   strSettings - Communication settings.
'                 Example: "baud=9600 parity=N data=8 stop=1"
'
' Returns:
'   Error Code  - 0 = No Error.
'
'-------------------------------------------------------------------------------
Public Function CommOpen(intPortID As Integer, strPort As String, _
    strSettings As String) As Long
    
Dim lngStatus       As Long
Dim udtCommTimeOuts As COMMTIMEOUTS

    On Error GoTo Routine_Error
    
    ' See if port already in use.
    If udtPorts(intPortID).blnPortOpen Then
        lngStatus = -1
        With udtCommError
            .lngErrorCode = lngStatus
            .strFunction = "CommOpen"
            .strErrorMessage = "Port in use."
        End With
        
        GoTo Routine_Exit
    End If

    ' Open serial port.
    udtPorts(intPortID).lngHandle = CreateFile(strPort, GENERIC_READ Or _
        GENERIC_WRITE, 0, ByVal 0&, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0)

    If udtPorts(intPortID).lngHandle = -1 Then
        lngStatus = SetCommError("CommOpen (CreateFile)")
        GoTo Routine_Exit
    End If

    udtPorts(intPortID).blnPortOpen = True

    ' Setup device buffers (1K each).
    lngStatus = SetupComm(udtPorts(intPortID).lngHandle, 1024, 1024)
    
    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (SetupComm)")
        GoTo Routine_Exit
    End If

    ' Purge buffers.
    lngStatus = PurgeComm(udtPorts(intPortID).lngHandle, PURGE_TXABORT Or _
        PURGE_RXABORT Or PURGE_TXCLEAR Or PURGE_RXCLEAR)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (PurgeComm)")
        GoTo Routine_Exit
    End If

    ' Set serial port timeouts.
    With udtCommTimeOuts
        .ReadIntervalTimeout = -1
        .ReadTotalTimeoutMultiplier = 0
        .ReadTotalTimeoutConstant = 1000
        .WriteTotalTimeoutMultiplier = 0
        .WriteTotalTimeoutConstant = 1000
    End With

    lngStatus = SetCommTimeouts(udtPorts(intPortID).lngHandle, udtCommTimeOuts)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (SetCommTimeouts)")
        GoTo Routine_Exit
    End If

    ' Get the current state (DCB).
    lngStatus = GetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (GetCommState)")
        GoTo Routine_Exit
    End If

    ' Modify the DCB to reflect the desired settings.
    lngStatus = BuildCommDCB(strSettings, udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (BuildCommDCB)")
        GoTo Routine_Exit
    End If

    ' Set the new state.
    lngStatus = SetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (SetCommState)")
        GoTo Routine_Exit
    End If

    lngStatus = 0

Routine_Exit:
    CommOpen = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommOpen"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function


Private Function SetCommError(strFunction As String) As Long
    
    With udtCommError
        .lngErrorCode = Err.LastDllError
        .strFunction = strFunction
        .strErrorMessage = GetSystemMessage(.lngErrorCode)
        SetCommError = .lngErrorCode
    End With
    
End Function

Private Function SetCommErrorEx(strFunction As String, lngHnd As Long) As Long
Dim lngErrorFlags As Long
Dim udtCommStat As COMSTAT
    
    With udtCommError
        .lngErrorCode = GetLastError
        .strFunction = strFunction
        .strErrorMessage = GetSystemMessage(.lngErrorCode)
    
        Call ClearCommError(lngHnd, lngErrorFlags, udtCommStat)
    
        .strErrorMessage = .strErrorMessage & "  COMM Error Flags = " & _
                Hex$(lngErrorFlags)
        
        SetCommErrorEx = .lngErrorCode
    End With
    
End Function

'-------------------------------------------------------------------------------
' CommSet - Modifies the serial port settings.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strSettings - Communication settings.
'                 Example: "baud=9600 parity=N data=8 stop=1"
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommSet(intPortID As Integer, strSettings As String) As Long
    
Dim lngStatus As Long
    
    On Error GoTo Routine_Error

    lngStatus = GetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSet (GetCommState)")
        GoTo Routine_Exit
    End If

    lngStatus = BuildCommDCB(strSettings, udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSet (BuildCommDCB)")
        GoTo Routine_Exit
    End If

    lngStatus = SetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSet (SetCommState)")
        GoTo Routine_Exit
    End If

    lngStatus = 0

Routine_Exit:
    CommSet = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommSet"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommClose - Close the serial port.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommClose(intPortID As Integer) As Long
    
Dim lngStatus As Long
    
    On Error GoTo Routine_Error

    If udtPorts(intPortID).blnPortOpen Then
        lngStatus = CloseHandle(udtPorts(intPortID).lngHandle)
    
        If lngStatus = 0 Then
            lngStatus = SetCommError("CommClose (CloseHandle)")
            GoTo Routine_Exit
        End If
    
        udtPorts(intPortID).blnPortOpen = False
    End If

    lngStatus = 0

Routine_Exit:
    CommClose = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommClose"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommFlush - Flush the send and receive serial port buffers.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommFlush(intPortID As Integer) As Long
    
Dim lngStatus As Long
    
    On Error GoTo Routine_Error

    lngStatus = PurgeComm(udtPorts(intPortID).lngHandle, PURGE_TXABORT Or _
        PURGE_RXABORT Or PURGE_TXCLEAR Or PURGE_RXCLEAR)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommFlush (PurgeComm)")
        GoTo Routine_Exit
    End If

    lngStatus = 0

Routine_Exit:
    CommFlush = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommFlush"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommRead - Read serial port input buffer.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strData     - Data buffer.
'   lngSize     - Maximum number of bytes to be read.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommRead(intPortID As Integer, strData As String, _
    lngSize As Long) As Long

Dim lngStatus As Long
Dim lngRdSize As Long, lngBytesRead As Long
Dim lngRdStatus As Long, strRdBuffer As String * 1024
Dim lngErrorFlags As Long, udtCommStat As COMSTAT
    
    On Error GoTo Routine_Error

    strData = ""
    lngBytesRead = 0
    DoEvents
    
    ' Clear any previous errors and get current status.
    lngStatus = ClearCommError(udtPorts(intPortID).lngHandle, lngErrorFlags, _
        udtCommStat)

    If lngStatus = 0 Then
        lngBytesRead = -1
        lngStatus = SetCommError("CommRead (ClearCommError)")
        GoTo Routine_Exit
    End If
'---------------------------------------------------------------------------------
'    If udtCommStat.cbInQue > 0 Then
'        If udtCommStat.cbInQue > lngSize Then
'            lngRdSize = udtCommStat.cbInQue
'        Else
'            lngRdSize = lngSize
'        End If
'    Else
'        lngRdSize = 0
'    End If
'------------------------------------------------------------------------------------

    lngRdSize = lngSize
    If lngRdSize Then
        lngRdStatus = ReadFile(udtPorts(intPortID).lngHandle, strRdBuffer, _
            lngRdSize, lngBytesRead, udtCommOverlap)

        If lngRdStatus = 0 Then
            lngStatus = GetLastError
            If lngStatus = ERROR_IO_PENDING Then
                ' Wait for read to complete.
                ' This function will timeout according to the
                ' COMMTIMEOUTS.ReadTotalTimeoutConstant variable.
                ' Every time it times out, check for port errors.

                ' Loop until operation is complete.
                While GetOverlappedResult(udtPorts(intPortID).lngHandle, _
                    udtCommOverlap, lngBytesRead, True) = 0
                                    
                    lngStatus = GetLastError
                                        
                    If lngStatus <> ERROR_IO_INCOMPLETE Then
                        lngBytesRead = -1
                        lngStatus = SetCommErrorEx( _
                            "CommRead (GetOverlappedResult)", _
                            udtPorts(intPortID).lngHandle)
                        GoTo Routine_Exit
                    End If
                Wend
            Else
                ' Some other error occurred.
                lngBytesRead = -1
                lngStatus = SetCommErrorEx("CommRead (ReadFile)", _
                    udtPorts(intPortID).lngHandle)
                GoTo Routine_Exit
            
            End If
        End If
    
        strData = Left$(strRdBuffer, lngBytesRead)
    End If

Routine_Exit:
    CommRead = lngBytesRead
    Exit Function

Routine_Error:
    lngBytesRead = -1
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommRead"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommWrite - Output data to the serial port.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strData     - Data to be transmitted.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommWrite(intPortID As Integer, strData As String) As Long
    
Dim i As Integer
Dim lngStatus As Long, lngSize As Long
Dim lngWrSize As Long, lngWrStatus As Long
    
    On Error GoTo Routine_Error
    
    ' Get the length of the data.
    lngSize = Len(strData)

    ' Output the data.
    lngWrStatus = WriteFile(udtPorts(intPortID).lngHandle, strData, lngSize, _
        lngWrSize, udtCommOverlap)

    ' Note that normally the following code will not execute because the driver
    ' caches write operations. Small I/O requests (up to several thousand bytes)
    ' will normally be accepted immediately and WriteFile will return true even
    ' though an overlapped operation was specified.
        
    DoEvents
    
    If lngWrStatus = 0 Then
        lngStatus = GetLastError
        If lngStatus = 0 Then
            GoTo Routine_Exit
        ElseIf lngStatus = ERROR_IO_PENDING Then
            ' We should wait for the completion of the write operation so we know
            ' if it worked or not.
            '
            ' This is only one way to do this. It might be beneficial to place the
            ' writing operation in a separate thread so that blocking on completion
            ' will not negatively affect the responsiveness of the UI.
            '
            ' If the write takes long enough to complete, this function will
            ' timeout
            ' according to the CommTimeOuts.WriteTotalTimeoutConstant variable.
            ' At that time we can check for errors and then wait some more.

            ' Loop until operation is complete.
            While GetOverlappedResult(udtPorts(intPortID).lngHandle, _
                udtCommOverlap, lngWrSize, True) = 0
                                
                lngStatus = GetLastError
                                    
                If lngStatus <> ERROR_IO_INCOMPLETE Then
                    lngStatus = SetCommErrorEx( _
                        "CommWrite (GetOverlappedResult)", _
                        udtPorts(intPortID).lngHandle)
                    GoTo Routine_Exit
                End If
            Wend
        Else
            ' Some other error occurred.
            lngWrSize = -1
                    
            lngStatus = SetCommErrorEx("CommWrite (WriteFile)", _
                udtPorts(intPortID).lngHandle)
            GoTo Routine_Exit
        
        End If
    End If
    
    For i = 1 To 10
        DoEvents
    Next
    
Routine_Exit:
    CommWrite = lngWrSize
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommWrite"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommGetLine - Get the state of selected serial port control lines.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   intLine     - Serial port line. CTS, DSR, RING, RLSD (CD)
'   blnState    - Returns state of line (Cleared or Set).
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommGetLine(intPortID As Integer, intLine As Integer, _
   blnState As Boolean) As Long
    
Dim lngStatus As Long
Dim lngComStatus As Long, lngModemStatus As Long
    
    On Error GoTo Routine_Error

    lngStatus = GetCommModemStatus(udtPorts(intPortID).lngHandle, lngModemStatus)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommReadCD (GetCommModemStatus)")
        GoTo Routine_Exit
    End If

    If (lngModemStatus And intLine) Then
        blnState = True
    Else
        blnState = False
    End If
        
    lngStatus = 0
        
Routine_Exit:
    CommGetLine = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommReadCD"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommSetLine - Set the state of selected serial port control lines.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   intLine     - Serial port line. BREAK, DTR, RTS
'                 Note: BREAK actually sets or clears a "break" condition on
'                 the transmit data line.
'   blnState    - Sets the state of line (Cleared or Set).
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommSetLine(intPortID As Integer, intLine As Integer, _
   blnState As Boolean) As Long
   
Dim lngStatus As Long
Dim lngNewState As Long
    
    On Error GoTo Routine_Error
    
    If intLine = LINE_BREAK Then
        If blnState Then
            lngNewState = SETBREAK
        Else
            lngNewState = CLRBREAK
        End If
    
    ElseIf intLine = LINE_DTR Then
        If blnState Then
            lngNewState = SETDTR
        Else
            lngNewState = CLRDTR
        End If
    
    ElseIf intLine = LINE_RTS Then
        If blnState Then
            lngNewState = SETRTS
        Else
            lngNewState = CLRRTS
        End If
    End If

    lngStatus = EscapeCommFunction(udtPorts(intPortID).lngHandle, lngNewState)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSetLine (EscapeCommFunction)")
        GoTo Routine_Exit
    End If

    lngStatus = 0
        
Routine_Exit:
    CommSetLine = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommSetLine"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function



'-------------------------------------------------------------------------------
' CommGetError - Get the last serial port error message.
'
' Parameters:
'   strMessage  - Error message from last serial port error.
'
' Returns:
'   Error Code  - Last serial port error code.
'-------------------------------------------------------------------------------
Public Function CommGetError(strMessage As String) As Long
    
    With udtCommError
        CommGetError = .lngErrorCode
        strMessage = "Error (" & CStr(.lngErrorCode) & "): " & .strFunction & _
            " - " & .strErrorMessage
    End With
    
End Function

Attribute VB_Name = "shtBallDetails"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If (Target.Column = 3 Or Target.Column = 8) And Target.row > 3 Then
        If Target.Value <> "" Then
            If Target.Column = 3 Then
                frmEditBallDetails.m_Innings = 1
            Else
                frmEditBallDetails.m_Innings = 2
            End If
            'check if we are in the third or fourth innings
            If innings > 2 And bMatchEnded <> True Then frmEditBallDetails.m_Innings = frmEditBallDetails.m_Innings + 2
            frmEditBallDetails.m_BowlersName = shtBallDetails.Cells(Target.row, Target.Column - 1)
            frmEditBallDetails.m_OverNo = shtBallDetails.Cells(Target.row, 1)
            Set frmEditBallDetails.m_TargetBallDetails = Target
            frmEditBallDetails.Show
            Cancel = True
        End If
    End If
    Cancel = bRelease
End Sub

Attribute VB_Name = "shtBallDetails1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If (Target.Column = 3 Or Target.Column = 8) And Target.row > 3 Then
        If Target.Value <> "" Then
            If Target.Column = 3 Then
                frmEditBallDetails.m_Innings = 1
            Else
                frmEditBallDetails.m_Innings = 2
            End If
            frmEditBallDetails.m_BowlersName = shtBallDetails1.Cells(Target.row, Target.Column - 1)
            frmEditBallDetails.m_OverNo = shtBallDetails1.Cells(Target.row, 1)
            Set frmEditBallDetails.m_TargetBallDetails = Target
            frmEditBallDetails.Show
            Cancel = True
        End If
    End If
    Cancel = bRelease
End Sub

Attribute VB_Name = "shtData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtDetails"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = bRelease
End Sub
Attribute VB_Name = "shtExternalScoreboard"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public previousVal As Variant

Private Sub Workbook_Open()
    Option Explicit
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets("External Scoreboard")
    previousVal = ws.Range("F14").Value
End Sub

Private Sub Worksheet_Calculate()

Dim ws As Worksheet
Set ws = ThisWorkbook.Worksheets("External Scoreboard")

'check if F14 has an error to stop it from crashing code
If IsError(ws.Range("F14").Value) Then
 Exit Sub
End If

'Determine if change was made to cell F14
  If ws.Range("F14").Value <> previousVal Then
    Application.EnableEvents = False
    previousVal = ws.Range("F14").Value
    'MsgBox ("F14 has changed")
    Call updateExternalScoreboard.sendToExternalScorboard
  End If
  
Application.EnableEvents = True
End Sub
Attribute VB_Name = "shtGraphData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtGraphs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "shtInnings1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const NameCol As Integer = 1
Private Const HowOutCol As Integer = 15
Private Const BaNameFirst As Integer = 3
Private Const BaNameLast As Integer = 13
Private Const BoNameFirst As Integer = 21
Private Const BoNameLast As Integer = 31
Private Sub cmdMain_Click()
    shtMainScoreboard.Activate
End Sub

Private Sub CommandButton2_Click()
    chtWorm.Activate
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    
    Dim Prompt As String
    If Target.Column = HowOutCol Then
        If Target.row >= BaNameFirst And Target.row <= BaNameLast And Me.Cells(Target.row, Target.Column) <> "" Then
            Dim newText
            Dim battingPos As Integer
            battingPos = Target.row - BaNameFirst + 1
            Prompt = strCHANGE_HOW_OUT_PROMPT & battingPos & ": "
            newText = Application.InputBox(Prompt, strCHANGE_HOW_OUT_TITLE, Me.Cells(Target.row, Target.Column), Type:=2)
            If newText <> "" And newText <> False Then
                Me.Range(Target, Target) = newText
            End If
        End If
    ElseIf Target.Column = NameCol And BattingT > 0 Then
        Dim oldText As String
        oldText = Cells(Target.row, Target.Column)
        'check if a batter name is to be changed
        If Target.row >= BaNameFirst And Target.row <= BaNameLast Then
            newText = Application.InputBox(strCHANGE_BATTER_NAME_PROMPT, strCHANGE_BATTER_NAME_TITLE, oldText, Type:=2)
            If newText <> "" And LCase(newText) <> "false" Then
                'if batsmen are being swapped swap the names
                If inTeamNamed(newText, Cells(BaNameFirst - 1, NameCol)) Then
                    For i = BaNameFirst To BaNameLast
                        If Cells(i, NameCol) = oldText Then
                            Cells(i, NameCol) = newText
                        ElseIf Cells(i, NameCol) = newText Then
                            Cells(i, NameCol) = oldText
                        End If
                    Next i
                Else
                    shtMainScoreboard.ReplacePlayer oldText, newText, Cells(BaNameFirst - 1, NameCol)
                End If
            End If
        'check if a bowler name is to be changed
        ElseIf Target.row >= BoNameFirst And Target.row <= BoNameLast Then
            newText = Application.InputBox(strCHANGE_BOWLER_NAME_PROMPT, strCHANGE_BOWLER_NAME_TITLE, oldText, Type:=2)
            If newText <> "" And LCase(newText) <> "false" Then
                'if batsmen are being swapped swap the names
                If inTeamNamed(newText, Cells(BoNameFirst - 1, NameCol)) Then
                    'check if the bowler has already bowled
                    For i = BoNameFirst To BoNameLast
                        If Cells(i, NameCol) = oldText Then
                            Cells(i, NameCol) = newText
                        ElseIf Cells(i, NameCol) = newText Then
                            Cells(i, NameCol) = oldText
                        End If
                    Next i
                Else
                    shtMainScoreboard.ReplacePlayer oldText, newText, Cells(BoNameFirst - 1, NameCol)
                End If
            End If
        End If
    End If
    Cancel = bRelease
End Sub

Public Sub ReplacePlayer(oldText As String, newText As String, Team As String)
    If Cells(BaNameFirst - 1, NameCol) = Team Then
        ReplaceBatter oldText, newText
    Else
        ReplaceBowler oldText, newText
    End If
End Sub

Public Sub ReplaceBatter(ByVal oldText As String, ByVal newText As String)
    'update the name in the bowling line up
    For i = BaNameFirst To BaNameLast
        If Cells(i, NameCol) = oldText Then
            Cells(i, NameCol) = newText
        End If
    Next i
End Sub

Public Sub ReplaceBowler(ByVal oldText As String, ByVal newText As String)
    'update the name in the bowling line up
    For i = BoNameFirst To BoNameLast
        If Cells(i, NameCol) = oldText Then
            Cells(i, NameCol) = newText
        End If
    Next i
    'update the howouts
    For i = BaNameFirst To BaNameLast
        Dim s As String
        Dim pos As Integer
        s = Cells(i, 15)
        s = Trim(s) & " "
        pos = InStr(1, s, " " & oldText & " ", vbTextCompare)
        If pos = 0 Then pos = InStr(1, s, "(" & oldText & ")", vbTextCompare)
        If pos > 0 Then
            s = Left(s, pos) & newText & Right(s, Len(s) - Len(oldText) - pos)
            Cells(i, 15) = s
        End If
    Next i
End Sub
Attribute VB_Name = "shtMainScoreboard"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdNewgame, 13, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdNewbatter, 23, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdX, 16, 3, MSForms, CommandButton"
Attribute VB_Control = "cmd0, 25, 4, MSForms, CommandButton"
Attribute VB_Control = "cmd1, 1, 5, MSForms, CommandButton"
Attribute VB_Control = "cmd2, 2, 6, MSForms, CommandButton"
Attribute VB_Control = "cmd3, 3, 7, MSForms, CommandButton"
Attribute VB_Control = "cmd4, 4, 8, MSForms, CommandButton"
Attribute VB_Control = "cmd6, 6, 9, MSForms, CommandButton"
Attribute VB_Control = "cmdNB, 9, 10, MSForms, ToggleButton"
Attribute VB_Control = "cmdW, 10, 11, MSForms, ToggleButton"
Attribute VB_Control = "cmdLB, 11, 12, MSForms, ToggleButton"
Attribute VB_Control = "cmdB, 12, 13, MSForms, ToggleButton"
Attribute VB_Control = "cmdUndo, 20, 14, MSForms, CommandButton"
Attribute VB_Control = "cmdNewBowler, 21, 15, MSForms, CommandButton"
Attribute VB_Control = "cmbPartnership, 26, 16, MSForms, ComboBox"
Attribute VB_Control = "cmbOversRemaining, 3436, 17, MSForms, ComboBox"
Attribute VB_Control = "cmdOther, 3462, 18, MSForms, CommandButton"
Option Explicit

Private Const NameCol As Integer = 1
Private Const HeaderRow As Integer = 2
Private Const HowOutCol As Integer = 15
Private Const BaNameFirst As Integer = 4
Private Const BaNameLast As Integer = 14
Private Const BoNameFirst As Integer = 22
Private Const BoNameLast As Integer = 32

Private Sub cmbOversRemaining_Change()
    UpdateTotals
End Sub

Sub cmbPartnership_Change()
    If cmbPartnership.ListIndex >= 0 Then
        'display the new partnership
        DisplayPartnership cmbPartnership.ListIndex + 1
    End If
End Sub

Private Sub cmd0_Click()
    Enterdata 0
End Sub
Private Sub cmd1_Click()
    Enterdata 1
End Sub
Private Sub cmd2_Click()
    Enterdata 2
End Sub
Private Sub cmd3_Click()
    Enterdata 3
End Sub
Private Sub cmd4_Click()
    Enterdata 4
End Sub
Private Sub cmd5_Click()
    Enterdata 5
End Sub
Private Sub cmd6_Click()
    Enterdata 6
End Sub

Private Sub cmdB_Click()
    cmd0.Enabled = Not (cmdLB.Value Or cmdB.Value)
    cmdW.Value = False
    cmdLB.Value = False
End Sub

Private Sub cmdLB_Click()
    cmd0.Enabled = Not (cmdLB.Value Or cmdB.Value)
    cmdW.Value = False
    cmdB.Value = False
End Sub

Private Sub cmdNB_Click()
    cmdW.Value = False
    If cmdB.Value = True Then cmdLB.Value = False
End Sub

Private Sub cmdNewbatter_Click()
    Dim OldBatter As Integer
    'figure out who was the new batter before
    If Totalballs > 0 Then
        Const SHIFT As Long = 100000000
        frmNewBatter.NewBatter = shtData.Cells(Totalballs + 2, innings * 6 - 1) \ SHIFT
    
        'store the batter being replaced
        OldBatter = frmNewBatter.NewBatter
        'check that the batter being replaced is not a retired batter
        'if Cells(2 + frmNewBatter.NewBatter, 15) <> strRETIRED Then
            frmNewBatter.cmbBatter.AddItem BatterNames(BattingT, frmNewBatter.NewBatter), Retired
        frmNewBatter.Show
        ToggleAutoCalculate False
        'check if the oldbatter is no longer one of the current batters
        If (OldBatter <> currBatters(1) And OldBatter <> currBatters(2)) Then
            Oldbatterformats (OldBatter)
            CurrBatterFormats
        End If
    Else
        GetOpeningBatsmen
    End If
End Sub

Private Sub cmdNewBowler_Click()
    'swap current bowlers
    Dim Lastbowler As Integer
    Lastbowler = currBowlers(2)
    currBowlers(2) = currBowlers(1)
    currBowlers(1) = Lastbowler
    'check if the bowler has not bowled any balls and must be deleted
    If arrBowlers(currBowlers(2), 2) <= 0 And arrBowlers(currBowlers(2), 4) <= 0 Then
        ToggleAutoCalculate False
        If currBowlers(2) = 1 Then currBowlers(1) = 1
        arrBowlers(currBowlers(2), 1) = -1
        shtMainScoreboard.Cells(1 + 20 + currBowlers(2), 1) = ""
        For j = 2 To 8
            If Not j = 6 Then shtMainScoreboard.Cells(1 + 20 + currBowlers(2), j) = ""
        Next j
        Lastbowler = currBowlers(2)
        currBowlers(2) = currBowlers(1)
        CurrBowlerformats Lastbowler
        currBowlers(2) = Lastbowler
    End If
    NewBowler
End Sub

Public Sub cmdNewgame_Click()
    Dim externalBoardEnabled As Boolean
    If cmdNewgame.Caption = "New Game" Then
        externalBoardEnabled = False
        If StrComp(ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value, "Yes", vbTextCompare) = 0 Then
            externalBoardEnabled = True
            'temp disable the external scoreboard while we sort out a new game
            ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "No"
        End If
        frmTeams.Show
        If externalBoardEnabled = True Then
            're-enable the external scoreboard now we have finished
            ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "Yes"
        End If
    ElseIf cmdNewgame.Caption = "End Innings" Then
        externalBoardEnabled = False
        If StrComp(ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value, "Yes", vbTextCompare) = 0 Then
            externalBoardEnabled = True
            'temp disable the external scoreboard while we sort out a new game
            ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "No"
        End If
        NewInnings
        If externalBoardEnabled = True Then
            're-enable the external scoreboard now we have finished
            ActiveWorkbook.Worksheets("External Scoreboard").Range("B3").Value = "Yes"
        End If
    ElseIf Left(cmdNewgame.Caption, 7) = "Innings" Then
        ActiveWorkbook.Worksheets(cmdNewgame.Caption).Activate
    End If
End Sub

Private Sub cmdOther_Click()
    frmOther.Show
End Sub

Private Sub cmdUndo_Click()
    UndoClick
End Sub

Private Sub cmdW_Click()
    cmdNB.Value = False
    cmdB.Value = False
    cmdLB.Value = False
End Sub

Private Sub cmdW_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    cmdW.Value = True
    cmdNB.Value = False
    cmdB.Value = False
    cmdLB.Value = False
    Enterdata 0
    Cancel = True
End Sub
Private Sub cmdB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    cmdB.Value = True
    cmdW.Value = False
    cmdLB.Value = False
    Enterdata 1
    Cancel = True
End Sub

Private Sub cmdLB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    cmdLB.Value = True
    cmdW.Value = False
    cmdB.Value = False
    Enterdata 1
    Cancel = True
End Sub
Private Sub cmdNB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    cmdNB.Value = True
    cmdW.Value = False
    cmdLB.Value = False
    cmdB.Value = False
    Enterdata 0
    Cancel = True
End Sub

Private Sub cmdX_Click()
    cmdNB.Value = False
    cmdW.Value = False
    cmdLB.Value = False
    cmdB.Value = False
    Wicket
End Sub

Private Sub newTeam(teamNo As Integer, Target As Range)
    Dim newName As String
    Dim oldName As String
    oldName = TeamNames(teamNo)
    newName = Application.InputBox(Prompt:="Enter the team name: ", Title:=strSCOREBOOK_TITLE, Default:=oldName, Type:=2)
    If Len(newName) = 0 Or LCase(newName) = "false" Then
    ElseIf UCase(newName) = UCase(TeamNames(teamNo Mod 2 + 1)) Then
        MsgBox "Teams names must be different.", vbCritical, strSCOREBOOK_TITLE
    Else
        TeamNames(teamNo) = newName
        shtMainScoreboard.Cells(Target.row, Target.Column) = newName
        'now update the skyscraper graphs
        Dim startPos As Integer
        Dim name As String

        startPos = InStr(1, chtSS1.ChartTitle.Text, "-", vbTextCompare)
        name = Trim(Mid(chtSS1.ChartTitle.Text, startPos + 1))
        If name = Trim(oldName) Then
            chtSS1.ChartTitle.Text = Left(chtSS1.ChartTitle.Text, startPos + 1) & newName
        Else
            startPos = InStr(1, chtSS2.ChartTitle.Text, "-")
            name = Trim(Mid(chtSS2.ChartTitle.Text, startPos + 1))
            If name = Trim(oldName) Then chtSS2.ChartTitle.Text = Left(chtSS2.ChartTitle.Text, startPos + 1) & newName
        End If
    End If
End Sub

Private Sub newTeamInitials(Target As Range)
    Dim teamNo As Integer
    If shtMainScoreboard.Cells(Target.row, Target.Column) = TeamInitials(1) Then teamNo = 1 Else teamNo = 2
    Dim newName As String
    Dim oldName As String
    oldName = TeamInitials(teamNo)
    newName = Left(Application.InputBox(Prompt:="Enter the team initials: ", Title:=strSCOREBOOK_TITLE, Default:=oldName, Type:=2), 3)
    If Len(newName) = 0 Or LCase(newName) = "false" Then
    ElseIf UCase(newName) = UCase(TeamInitials(teamNo Mod 2 + 1)) Then
        MsgBox "Teams initials must be different.", vbCritical, Title:=strSCOREBOOK_TITLE
    Else
        TeamInitials(teamNo) = newName
        shtMainScoreboard.Cells(17, 10) = TeamInitials(1)
        shtMainScoreboard.Cells(17, 13) = TeamInitials(2)
        
        If shtMainScoreboard.Cells(3, 1) = oldName Then
            shtMainScoreboard.Cells(3, 1) = newName
            'change the initials in the toss
            Dim s As String
            s = shtMainScoreboard.Cells(2, 7)
            shtMainScoreboard.Cells(2, 7) = newName & Right(s, Len(s) - Len(oldName))
        Else
            shtMainScoreboard.Cells(21, 1) = newName
        End If
    End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    
    Dim Temp As Integer
    Dim battingPos As Integer
    Dim newText As String
    'check if a new game has been started
    If TeamNames(1) = "" Then
        MsgBox "Click the new game button.", vbOKOnly, strSCOREBOOK_TITLE
    'check for changes in team intitials
    ElseIf Target.row = 3 And Target.Column = 1 Or _
            Target.row = 21 And Target.Column = 1 Or _
            Target.row = 17 And Target.Column = 10 Or _
            Target.row = 4 And Target.Column = 18 Or _
            Target.row = 4 And Target.Column = 25 Or _
            Target.row = 17 And Target.Column = 13 Or _
            Target.row = 4 And Target.Column = 21 Or _
            Target.row = 4 And Target.Column = 28 Then
        newTeamInitials Target
    'check for changes in the header: team names, dates etc...
    ElseIf Target.row = HeaderRow Then
        If Target.Column = 15 Then
            newText = Application.InputBox("Enter the date: ", strSCOREBOOK_TITLE, Mid(shtMainScoreboard.Cells(Target.row, Target.Column), Len(strDATE) + 1), Type:=2)
            If newText <> "" And LCase(newText) <> "false" Then
                shtMainScoreboard.Range(Target, Target) = strDATE & newText
            End If
        ElseIf Target.Column = 16 Then
            newText = Application.InputBox("Enter the venue: ", strSCOREBOOK_TITLE, Mid(shtMainScoreboard.Cells(Target.row, Target.Column), Len(strVENUE) + 1), Type:=2)
            If newText <> "" And LCase(newText) <> "false" Then
                shtMainScoreboard.Range(Target, Target) = strVENUE & newText
            End If
        'check if it is a change in team1's name
        ElseIf Target.Column = 1 Then
            newTeam 1, Target
        ElseIf Target.Column = 4 Then
            newTeam 2, Target
        ElseIf Target.Column = 7 Then
            Dim tossDetails As String
            tossDetails = shtMainScoreboard.Cells(Target.row, Target.Column)
            If Right(tossDetails, 4) = "bat." Then
                tossDetails = Left(tossDetails, Len(tossDetails) - 4) & "bowl."
            Else
                tossDetails = Left(tossDetails, Len(tossDetails) - 5) & "bat."
            End If
            shtMainScoreboard.Cells(Target.row, Target.Column) = tossDetails
        End If
    ElseIf Target.Column = HowOutCol And BattingT > 0 Then
        If Target.row >= BaNameFirst And Target.row <= BaNameLast And shtMainScoreboard.Cells(Target.row, Target.Column) <> "" Then
            battingPos = Target.row - BaNameFirst + 1
            newText = Application.InputBox(strCHANGE_HOW_OUT_PROMPT, strCHANGE_HOW_OUT_TITLE, shtMainScoreboard.Cells(Target.row, Target.Column), Type:=2)
            If newText <> "" And LCase(newText) <> "false" Then
                shtMainScoreboard.Range(Target, Target) = newText
            End If
        End If
    ElseIf Target.Column = NameCol And BattingT > 0 Then
        'check if a batter name is to be changed
        If Target.row >= BaNameFirst And Target.row <= BaNameLast Then
            battingPos = Target.row - BaNameFirst + 1
            newText = Application.InputBox(strCHANGE_BATTER_NAME_PROMPT, strCHANGE_BATTER_NAME_TITLE, BatterNames(BattingT, battingPos), Type:=2)
            If newText <> "" And LCase(newText) <> "false" Then
                'if batsmen are being swapped swap the names
                If inTeam(newText, BattingT) Then
                    'inTeam sets i to the position of the old batter
                    Dim oldName As String
                    oldName = BatterNames(BattingT, battingPos)
                    BatterNames(BattingT, i) = oldName
                    If i <= 11 Then _
                        shtMainScoreboard.Cells(Target.row - battingPos + i, Target.Column) = oldName
                    BatterNames(BattingT, battingPos) = newText
                    shtMainScoreboard.Range(Target, Target) = newText
                Else
                'If the batter is not in the team just change the batters name
                    ReplaceBatter BatterNames(BattingT, battingPos), newText
                End If
                'need to set Totalballs so that the form will unload
                ResetfrmNewbatter
                ResetfrmWicket
            End If
        'check if a bowler name is to be changed
        ElseIf Target.row >= BoNameFirst And Target.row <= BoNameLast Then
            Dim BowlingPos As Integer
            BowlingPos = Target.row - BoNameFirst + 1
            battingPos = arrBowlers(BowlingPos, 1)
            If battingPos > 0 Then
                newText = Application.InputBox(strCHANGE_BOWLER_NAME_PROMPT, strCHANGE_BOWLER_NAME_TITLE, BatterNames(BowlingT, battingPos), Type:=2)
                If newText <> "" And LCase(newText) <> "false" Then
                    'if batsmen are being swapped swap the names
                    If inTeam(newText, BowlingT) Then
                        'check if the bowler has already bowled
                        For j = 1 To MaxBowlers
                            If arrBowlers(j, 1) > -1 Then
                                If BatterNames(BowlingT, arrBowlers(j, 1)) = newText Then Exit For
                            Else
                                j = MaxBowlers + 1: Exit For
                            End If
                        Next j
                        Dim OldName2 As String
                        OldName2 = BatterNames(BowlingT, battingPos)
                        BatterNames(BowlingT, i) = OldName2
                        shtMainScoreboard.Cells(Target.row - BowlingPos + j, Target.Column) = OldName2
                        shtMainScoreboard.Range(Target, Target) = newText
                        BatterNames(BowlingT, battingPos) = newText
                    Else
                        ReplaceBowler BatterNames(BowlingT, battingPos), newText
                    End If
                    ResetfrmNewbowler
                    ResetfrmWicket
                End If
            End If
        End If
    ElseIf Target.Address = shtMainScoreboard.Range(refTotalOvers).Address Then
        ChangeTotalOvers
    ElseIf Target.Address = shtMainScoreboard.Range(refTargetRuns).Address Then
        ChangeTarget
    End If
    Cancel = bRelease
    Application.CalculateFull
End Sub

Public Sub ReplacePlayer(ByVal oldText As String, ByVal newText As String, ByVal Team As String)
    If shtMainScoreboard.Cells(BaNameFirst - 1, NameCol) = Team Then
        ReplaceBatter oldText, newText
    Else
        ReplaceBowler oldText, newText
    End If
    ResetfrmNewbowler
    ResetfrmWicket
End Sub

Private Sub ReplaceBatter(ByVal oldText As String, ByVal newText As String)
    'update the name variable
    For i = 1 To MAXPLAYERS
        If BatterNames(BattingT, i) = oldText Then
            BatterNames(BattingT, i) = newText
            Exit For
        End If
    Next i
    'update the name in the bowling line up
    For i = BaNameFirst To BaNameLast
        If shtMainScoreboard.Cells(i, NameCol) = oldText Then
            shtMainScoreboard.Cells(i, NameCol) = newText
        End If
    Next i
    'update the innings sheets
    Dim x As Integer
    For x = 2 To innings
        ThisScorebook.Worksheets("Innings " & (x - 1)).ReplacePlayer oldText, newText, shtMainScoreboard.Cells(BaNameFirst - 1, NameCol)
    Next x
End Sub

Private Sub ReplaceBowler(ByVal oldText As String, ByVal newText As String)
    'update the name variable
    For i = 1 To MAXPLAYERS
        If BatterNames(BowlingT, i) = oldText Then
            BatterNames(BowlingT, i) = newText
            Exit For
        End If
    Next i
    'update the name in the bowling line up
    For i = BoNameFirst To BoNameLast
        If shtMainScoreboard.Cells(i, NameCol) = oldText Then
            shtMainScoreboard.Cells(i, NameCol) = newText
        End If
    Next i
    'update the howouts
    For i = BaNameFirst To BaNameLast
        Dim s As String
        Dim pos As Integer
        s = shtMainScoreboard.Cells(i, 15)
        s = Trim(s) & " "
        pos = InStr(1, s, " " & oldText & " ", vbTextCompare)
        If pos = 0 Then pos = InStr(1, s, "(" & oldText & ")", vbTextCompare)
        If pos > 0 Then
            s = Left(s, pos) & newText & Right(s, Len(s) - Len(oldText) - pos)
            shtMainScoreboard.Cells(i, 15) = s
        End If
    Next i
    'update the innings sheets
    Dim x As Integer
    For x = 2 To innings
        ThisScorebook.Worksheets("Innings " & (x - 1)).ReplacePlayer oldText, newText, shtMainScoreboard.Cells(BoNameFirst - 1, NameCol)
    Next x
End Sub

Public Sub ChangeTotalOvers()
    Dim Newovers As Integer
    Dim cellTotalOvers As Range
    Dim Prompt As String
    
    If cmdNewgame.Caption = "End Innings" Then
        MsgBox "Undo the last ball, then change the number of overs.", vbOKOnly, strSCOREBOOK_TITLE
        Exit Sub
    End If
    
    If GameType <> TWOINNINGS Then Prompt = strCHANGE_OVERS_PROMPT _
        Else Prompt = strCHANGE_OVERS_PROMPT_2
    Set cellTotalOvers = shtMainScoreboard.Range(refTotalOvers)
    Newovers = Application.InputBox(Prompt:=Prompt, Title:=strCHANGE_TOTAL_OVERS_TITLE, _
                        Default:=Totalovers, Type:=1)
    If Newovers <> False Then
        'check if its the end of the innings and prompt for confirmation
        If GameType <> TWOINNINGS And Newovers <= OverNo Then
            Dim Reply As Variant
            Reply = MsgBox("Reducing the number of overs and end the current innings?", vbYesNo, strSCOREBOOK_TITLE)
            If Reply = vbNo Then Exit Sub
        End If
    
        'check if the desired setting is past the current over
        If Newovers > maxOvers Then
            MsgBox strCHANGE_TOTAL_OVERS_ERROR_MAX_FULL, vbOKOnly, strSCOREBOOK_TITLE
        ElseIf Newovers <= 0 Then
            MsgBox strCHANGE_TOTAL_OVERS_ERROR_NEG, vbOKOnly, Title:=strSCOREBOOK_TITLE
        Else
            'do stuff to affect overs remaining in day
            If GameType = TWOINNINGS Then
                TotalOversAdjustment = TotalOversAdjustment + (CurrentDay - 1) * (Newovers - Totalovers)
                If (Totalovers - Newovers) >= OversRemaining Then CurrentDay = CurrentDay + 1
            End If
            Dim oldTotalOvers As Integer
            oldTotalOvers = Totalovers
            Totalovers = Newovers
            cellTotalOvers = Newovers
            UpdateTotals
            
            If GameType <> TWOINNINGS And Newovers <= OverNo Then NewInnings
        End If
    End If
End Sub

Public Sub ChangeTarget()
    If innings > 1 And GameType <> TWOINNINGS Or innings > 3 Then
        Dim NewTarget As Integer
        Dim cellTarget As Range
        Set cellTarget = shtMainScoreboard.Range(refTargetRuns)
        NewTarget = Application.InputBox(Prompt:=strCHANGE_TARGET_PROMPT, Title:=strCHANGE_TARGET_TITLE, _
                            Default:=shtMainScoreboard.Range(refTargetRuns).Text, Type:=1)
        If NewTarget <> False Then
            If NewTarget < 0 Then
                MsgBox strCHANGE_TARGET_ERROR_NEG, vbOK, Title:=strSCOREBOOK_TITLE
            Else
                TargetOffset = TargetOffset + NewTarget - Target
                cellTarget = NewTarget
                Target = NewTarget
                UpdateTotals
                If shtMainScoreboard.cmdNewgame.Caption = "End Innings" Then
                    If innings = 1 Then shtMainScoreboard.cmdNewgame.Caption = "New Game" Else _
                        shtMainScoreboard.cmdNewgame.Caption = "Innings " & innings - 1
                End If
                If NewTarget < Totalruns Then NewInnings
            End If
        End If
    End If
End Sub



Attribute VB_Name = "shtOverDetails"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    If GameType = TWOINNINGS And innings Mod 2 = 0 Then
            If shtMainScoreboard.cmbOversRemaining.Text = strOVERSREMAINING1ST Then
                'check if it has been set for the max overs in a day
                If shtOverDetails.Cells(4, 17) <> "" Then
                    If shtOverDetails.Cells(4, 17) = (shtMainScoreboard.Cells(32, 23) - shtOverDetails.Cells(4, 1)) * BallsPerOver Then
                        'change it to be for the max 1st innings over
                        shtOverDetails.Cells(4, 17).Formula = "=IF(I4="""","""", OversToBalls(MaxOversFirstInnings()-A4))"
                        shtOverDetails.Range(shtOverDetails.Cells(4, 17), shtOverDetails.Cells(maxOversFullVersion + 2, 17)).FillDown
                    End If
                End If
            Else
                'change it to be for the overs in the day
                If shtOverDetails.Cells(4, 17) = (MaxOvers1stInnings - shtOverDetails.Cells(4, 1)) * BallsPerOver Then
                    shtOverDetails.Cells(4, 17) = "=IF(I4="""","""",OversToBalls('Main Scoreboard'!$W$32-A4))"
                    shtOverDetails.Range(shtOverDetails.Cells(4, 17), shtOverDetails.Cells(maxOversFullVersion + 2, 17)).FillDown
                End If
            End If
    End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Cancel = bRelease
End Sub
Attribute VB_Name = "shtOverDetails1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = bRelease
End Sub
Attribute VB_Name = "shtSavedData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "updateExternalScoreboard"
Option Explicit

' External scoreboard integration for LaverWood scorebook
' Laverwood scorebook all rights reservered by laver and wood
' External scorboard integration for http://buildyourownscoreboard.wordpress.com
'
' version 0.1 - First BETA version - ian@woscc.org.uk


Sub sendToExternalScorboard()

Dim ws As Worksheet
Set ws = ThisWorkbook.Worksheets("External Scoreboard")

'where we should output errors to
Dim errorBox As Range
Set errorBox = ws.Range("B12")

'where server responses should go
Dim responseBox As Range
Set responseBox = ws.Range("B10")

'where debug stuff should go
Dim debugBox As Range
Set debugBox = ws.Range("B14")

Dim ScoreboardEnabled As Long
ScoreboardEnabled = ws.Range("C3").Value
' 1 = enabled
' 2 = disabled

Dim CommunicationType As Long
CommunicationType = ws.Range("C4").Value
' 1 = Raspberry
' 2 = USB

Dim WebInterfaceType As Long
WebInterfaceType = ws.Range("C5").Value
' 1 = POST
' 2 = GET

Dim RaspberryAddress As String
RaspberryAddress = ws.Range("B6").Value

Dim DebugEnabled As Long
DebugEnabled = ws.Range("C7").Value
' 1 = enabled
' 2 = disabled

Dim ComPort As Long
ComPort = ws.Range("B8").Value

Dim CurrentScoreString As String
CurrentScoreString = ws.Range("F14").Value

'clear up any old debug, response or message stuff
debugBox = ""
errorBox = ""
responseBox = ""

'check if the external scoreboard is enabled at all
If IsEmpty(ScoreboardEnabled) Or ScoreboardEnabled = 0 Then
    errorBox.Value = "External scoreboard not enable"
    Exit Sub
End If


'check that the config is valid.
If IsEmpty(CommunicationType) Then
    errorBox.Value = "Please select a valid Scoreboard Communication Type from the External Scoreboard tab"
    Exit Sub
End If

If IsEmpty(WebInterfaceType) And CommunicationType = 1 Then
    errorBox.Value = "Please select a valid Scoreboard Webinterface Type from the External Scoreboard tab"
    Exit Sub
End If

If (InStr(1, RaspberryAddress, "/", vbTextCompare)) > 0 Then
    errorBox.Value = "The web address from the Raspberry Address config options apprears to be invalid.  Please enter just an IP address or DNS name only (no http:// prefix or / suffix"
    Exit Sub
End If


If IsEmpty(RaspberryAddress) And CommunicationType = 1 Then
    errorBox.Value = "Please input a Raspberry Address "
    Exit Sub
End If

'break up the score string into its components and pad as required

Dim ScoreComponents() As String
Dim BatA, BatB, Total, Wickets, Overs, Target As String
ScoreComponents = Split(CurrentScoreString, ",")

'if the communicationtype=1 (raspberry)
'create a post/get, and send it to the arduino
If CommunicationType = 1 Then

    Dim Webdata As String
    
    If WebInterfaceType = 1 Then
        'because we are WOSCC type then we need to prefix the data with dashes
        BatA = Right(String(3, "-") & ScoreComponents(1), 3)
        Total = Right(String(3, "-") & ScoreComponents(2), 3)
        BatB = Right(String(3, "-") & ScoreComponents(3), 3)
        Wickets = ScoreComponents(4)
        Overs = Right(String(2, "-") & ScoreComponents(5), 2)
        Target = Right(String(3, "-") & ScoreComponents(6), 3)

        'the web data is always the same format, no matter what the layout.  We will leave layout work to the scoreboard.php
        Webdata = "totalHundreds=" + Mid(Total, 1, 1) & "&" _
            + "totalTens=" + Mid(Total, 2, 1) & "&" _
            + "totalOnes=" + Mid(Total, 3, 1) & "&" _
            + "wicketsOnes=" + Mid(Wickets, 1, 1) & "&" _
            + "oversTens=" + Mid(Overs, 1, 1) & "&" _
            + "oversOnes=" + Mid(Overs, 2, 1) & "&" _
            + "batsmanaHundreds=" + Mid(BatA, 1, 1) & "&" _
            + "batsmanaTens=" + Mid(BatA, 2, 1) & "&" _
            + "batsmanaOnes=" + Mid(BatA, 3, 1) & "&" _
            + "batsmanbHundreds=" + Mid(BatB, 1, 1) & "&" _
            + "batsmanbTens=" + Mid(BatB, 2, 1) & "&" _
            + "batsmanbOnes=" + Mid(BatB, 3, 1) & "&" _
            + "targetHundreds=" + Mid(Target, 1, 1) & "&" _
            + "targetTens=" + Mid(Target, 2, 1) & "&" _
            + "targetOnes=" + Mid(Target, 3, 1)
    ElseIf WebInterfaceType = 2 Then
        'because this is the bradford upon avon varient we need to refix with zeros
        BatA = Right(String(3, "0") & ScoreComponents(1), 3)
        Total = Right(String(3, "0") & ScoreComponents(2), 3)
        BatB = Right(String(3, "0") & ScoreComponents(3), 3)
        Wickets = ScoreComponents(4)
        Overs = Right(String(2, "0") & ScoreComponents(5), 2)
        Target = Right(String(3, "0") & ScoreComponents(6), 3)
        'form the data variable used by the bradford php
        Webdata = "data=" & Total & Wickets & Overs & BatA & BatB & Target
    End If
        
    If DebugEnabled = 1 Then
        debugBox = Webdata
    End If

    Dim objHTTP As Object
    Set objHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
    'build the URL from the options.  The comments should stop an invalid entry being added
    Dim URL As String
    URL = "http://" + RaspberryAddress + "/scoreboard.php"
    
    On Error Resume Next
        ' WebInterface 1 is POST
        If WebInterfaceType = 1 Then
            objHTTP.Open "POST", URL, False
        'WebInterface 2 is GET
        ElseIf WebInterfaceType = 2 Then
            URL = URL & "?" & Webdata
            objHTTP.Open "GET", URL, False
        End If
        objHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
        objHTTP.setRequestHeader "Content-type", "application/x-www-form-urlencoded"
        objHTTP.Send (Webdata)
        objHTTP.WaitForResponse (1)
        If Err.Number <> 0 Then
            ' Handle server errors
            errorBox = Err.Description
            Err.Clear
        Else
            responseBox.Value = objHTTP.Status & " - " & objHTTP.StatusText
        End If
        On Error GoTo 0
End If


'if the communicationtype=2 (arduino)
'create a serial port, set the speed, send the command, then close
'This code was adapted from http://dev.emcelettronica.com/serial-port-communication-in-excel-vba
If CommunicationType = 2 Then

    'we need to pad the values with dashes
    BatA = Right(String(3, "-") & ScoreComponents(1), 3)
    Total = Right(String(3, "-") & ScoreComponents(2), 3)
    BatB = Right(String(3, "-") & ScoreComponents(3), 3)
    Wickets = ScoreComponents(4)
    Overs = Right(String(2, "-") & ScoreComponents(5), 2)
    Target = Right(String(3, "-") & ScoreComponents(6), 3)

    'the serial data format is always the same.  We will leave layout differences to the scoreboard.ino sketch
    Dim Serialdata As String
    Serialdata = "4," _
     + BatA & "," _
     + Total & "," _
     + BatB & "," _
     + Wickets & "," _
     + Overs & "," _
     + Target & ",#"

    Dim intPortID As Integer ' Ex. 1, 2, 3, 4 for COM1 - COM4
    Dim lngStatus As Long
    Dim strData   As String

    intPortID = CInt(ComPort)

    If DebugEnabled = 1 Then
        debugBox = Serialdata
    End If
    
    'Try opening the serial port
    lngStatus = sendToSerial.CommOpen(intPortID, "COM" & CStr(intPortID), "baud=57600 parity=N data=8 stop=1")
    If lngStatus <> 0 Then
        If DebugEnabled = 1 Then
            debugBox = debugBox & vbNewLine & "Error opening serial port - Status:" & lngStatus & " - It may already be open - Not fatal"
            debugBox = debugBox & vbNewLine & sendToSerial.GetSystemMessage(lngStatus)
        End If
    End If
    
    'flush everything, ready for the next command
    lngStatus = sendToSerial.CommFlush(intPortID)
    If lngStatus <> 0 Then
        If DebugEnabled = 1 Then
            debugBox = debugBox & vbNewLine & "Error flushing data - Status:" & lngStatus
            debugBox = debugBox & vbNewLine & sendToSerial.GetSystemMessage(lngStatus)
        End If
    End If
    
    'Writa data
    lngStatus = sendToSerial.CommWrite(intPortID, Serialdata)
    If lngStatus <> 24 Then
        'There is an error.  Lets try and close the serial port, and then open it again.
        errorBox = "Error writing to serial port - Status:" & lngStatus
        errorBox = errorBox & vbNewLine & sendToSerial.GetSystemMessage(lngStatus)
    End If
        
    'Read the serial response
    lngStatus = sendToSerial.CommRead(intPortID, strData, 200)
    responseBox.Value = "First 200 characters: " & Replace(strData, vbCrLf, " - ")
    
    'flush everything, ready for the next command
    lngStatus = sendToSerial.CommFlush(intPortID)
    If lngStatus <> 0 Then
        If DebugEnabled = 1 Then
            debugBox = debugBox & vbNewLine & " Error flushing data - Status:" & lngStatus
            debugBox = debugBox & vbNewLine & sendToSerial.GetSystemMessage(lngStatus)
        End If
    End If
    
    'Close the port
    'Call sendToSerial.CommClose(intPortID)
    
End If

End Sub

Sub closeSerialPort()

Dim ws As Worksheet
Set ws = ThisWorkbook.Worksheets("External Scoreboard")

Dim ComPort As Long
ComPort = ws.Range("B8").Value

Dim intPortID As Integer ' Ex. 1, 2, 3, 4 for COM1 - COM4
    
intPortID = CInt(ComPort)

'Close the port
Call sendToSerial.CommClose(intPortID)

End Sub



' InQuest injected base64 decoded content
' Rxbu
' ZrH+
' j)^u'(
' j)^u'(
' y:-jT

INQUEST-PP=macro
