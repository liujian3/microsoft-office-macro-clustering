Attribute VB_Name = "CodeReset_Macs"

Option Explicit

Sub ResetCalc()
    With Application
        .EnableEvents = True
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
    End With
End Sub

Sub StopCalc()
    With Application
        .EnableEvents = False
        .Calculation = xlCalculationManual
        .ScreenUpdating = False
    End With
End Sub
    
Attribute VB_Name = "DataMappingFilters"
Option Explicit

Sub DataMap_ShowNumbFilter()
Dim MapRow As Long
With Sheet1
If .Range("B1").Value = Empty Then Exit Sub
MapRow = .Range("B1").Value 'Map Row
        With .Shapes("NumbFiltGrp")
            .Left = Sheet1.Range("G" & MapRow).Left
            .Top = Sheet1.Range("G" & MapRow).Top
            .IncrementTop -5
            .Visible = msoCTrue
        End With
End With
End Sub

Sub DataMap_ShowTextFilter()
Dim MapRow As Long
With Sheet1
If .Range("B1").Value = Empty Then Exit Sub
MapRow = .Range("B1").Value 'Map Row
        With .Shapes("TextFiltGrp")
            .Left = Sheet1.Range("G" & MapRow).Left
            .Top = Sheet1.Range("G" & MapRow).Top
            .IncrementTop -15
            .Visible = msoCTrue
        End With
End With
End Sub


Sub AddFilt_Text_StartsWith()
Dim MapRow As Long
Dim FilterBy As String
With Sheet1
    If .Range("B1").Value = Empty Then Exit Sub
    MapRow = .Range("B1").Value
    If .Range("F" & MapRow).Value = Empty Then Exit Sub
    FilterBy = .Range("F" & MapRow).Value 'Filter By Text
    FilterBy = Replace(Replace(Replace(FilterBy, "*", ""), "<", ""), ">", "") 'Remove any previous filtering characters
    .Range("F" & MapRow).Value = FilterBy & "*"
End With
End Sub

Sub AddFilt_Text_EndsWith()
Dim MapRow As Long
Dim FilterBy As String
With Sheet1
    If .Range("B1").Value = Empty Then Exit Sub
    MapRow = .Range("B1").Value
    If .Range("F" & MapRow).Value = Empty Then Exit Sub
    FilterBy = .Range("F" & MapRow).Value 'Filter By Text
    FilterBy = Replace(Replace(Replace(FilterBy, "*", ""), "<", ""), ">", "") 'Remove any previous filtering characters
    .Range("F" & MapRow).Value = "*" & FilterBy
End With
End Sub

Sub AddFilt_Text_Contains()
Dim MapRow As Long
Dim FilterBy As String
With Sheet1
    If .Range("B1").Value = Empty Then Exit Sub
    MapRow = .Range("B1").Value
    If .Range("F" & MapRow).Value = Empty Then Exit Sub
    FilterBy = .Range("F" & MapRow).Value 'Filter By Text
    FilterBy = Replace(Replace(Replace(FilterBy, "*", ""), "<", ""), ">", "") 'Remove any previous filtering characters
    .Range("F" & MapRow).Value = "*" & FilterBy & "*"
End With
End Sub

Sub AddFilt_Numb_LessThan()
Dim MapRow As Long
Dim FilterBy As String
With Sheet1
    If .Range("B1").Value = Empty Then Exit Sub
    MapRow = .Range("B1").Value
    If .Range("F" & MapRow).Value = Empty Then Exit Sub
    FilterBy = .Range("F" & MapRow).Value 'Filter By Text
    FilterBy = Replace(Replace(Replace(FilterBy, "*", ""), "<", ""), ">", "") 'Remove any previous filtering characters
    .Range("F" & MapRow).Value = "<" & FilterBy
End With
End Sub

Sub AddFilt_Numb_GreaterThan()
Dim MapRow As Long
Dim FilterBy As String
With Sheet1
    If .Range("B1").Value = Empty Then Exit Sub
    MapRow = .Range("B1").Value
    If .Range("F" & MapRow).Value = Empty Then Exit Sub
    FilterBy = .Range("F" & MapRow).Value 'Filter By Text
    FilterBy = Replace(Replace(Replace(FilterBy, "*", ""), "<", ""), ">", "") 'Remove any previous filtering characters
    .Range("F" & MapRow).Value = ">" & FilterBy
End With
End Sub
Attribute VB_Name = "DataMappingMacs"
Option Explicit

Sub MapData_Load()
Dim SourceFilePath As String
Dim DestinFilePath As String
Dim SourceWkBk As Workbook
Dim DestinWkBk As Workbook
Dim ImportWkBk As Workbook
Dim SourceWs As Worksheet
Dim SourceShtName As String
Dim SourceFolder As String 'Added
Dim SourceFileName As String 'Added
Dim DestinShtName As String
Dim WsRow As Long
Dim DestinHeaderRow As Long
Dim TableRow As Long
Dim TableCol As Long
Dim ColCount As Long
Dim FirstSourceDataRow As Long
Dim FirstSourceCol As Long
Dim FirstDestinDataRow As Long
Dim FirstDestinCol As Long
Dim LastDestinCol As Long
Dim DestinColNumb As Long
Dim MapRow As Long
Dim LastSourceRow As Long
Dim LastSourceCol As Long
Dim SourceFolderObj As Object
Dim SourceObj As Object


Set ImportWkBk = ThisWorkbook 'Current Import Workbook
With Sheet1
'Check For Source Workbook
If .Range("E8").Value = Empty And .Range("B2").Value = False Then
    MsgBox "Please select a Source Workbook to import"
    ImportStep1
    Exit Sub
End If

'Check For Destination Workbook (if a new workbook was not selected)
If .Range("B4").Value = 1 And .Range("E28").Value = Empty Then
        MsgBox "Please select a Destination Workbook, or choose 'New Workbook' to import"
        ImportStep2
        Exit Sub
End If

'Clear Fields, Formats & Validations
.Range("B62").Value = True 'Set Mapping Load to True
.Range("A65:B165,D65:J165,L65:L165").ClearContents 'Clear Mapping Data
.Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
.Range("E65:E165").NumberFormat = "General" 'Reset All Formats


'Check for Static or Dynamic Source
If .Range("B2").Value = False Then 'Static Source
    SourceFilePath = .Range("E8").Value 'Source Workbook File Path
Else: 'Dyamic Source
        SourceFileName = .Range("F10").Value 'Source File Name variable
    'Determine Source File Types
        Select Case .Range("E10").Value 'File Filter Type
            Case Is = "start with"
                SourceFileName = SourceFileName & "*"
            Case Is = "end with"
                SourceFileName = "*" & SourceFileName
            Case Is = "match"
                SourceFileName = SourceFileName
            Case Is = "contain"
                SourceFileName = "*" & SourceFileName & "*"
        End Select
        
    SourceFolder = .Range("H10").Value
    Set SourceObj = VBA.CreateObject("Scripting.FileSystemObject")
    Set SourceFolderObj = SourceObj.GetFolder(SourceFolder)
    For Each SourceObj In SourceFolderObj.Files
        If LCase(SourceObj.Name) Like LCase(SourceFileName) Then
            Exit For
        End If
    Next SourceObj
    
        On Error Resume Next
        SourceFilePath = SourceObj.Path 'If no matches are found, an error would occur here
        On Error GoTo 0
     If SourceFilePath = "" Then 'If Source File Path is empty then no matches were found
        MsgBox "No source files, based on your matching requirements were found."
        Exit Sub
    End If

End If

On Error Resume Next 'An error would occur if the workbook is not open
Set SourceWkBk = Workbooks(Dir(SourceFilePath)) 'Set Source Workbook
If SourceWkBk Is Nothing Then 'If Source Workbook Is Nothing that means it's not open, so we need to open it
    Set SourceWkBk = Workbooks.Open(SourceFilePath)
    ThisWorkbook.Activate
End If
On Error GoTo 0

'Check For Source Worksheet, if none found, pull first source worksheet
If .Range("I9").Value = Empty Then
        WsRow = 65
        For Each SourceWs In SourceWkBk.Worksheets
        .Range("A" & WsRow).Value = SourceWs.Name
        WsRow = WsRow + 1
    Next
    .Range("I9").Value = .Range("A65").Value 'Use First Worksheet in Source
End If


SourceShtName = .Range("I9").Value 'Source Worksheet Name

If .Range("B4").Value = 1 Then 'Existing Destination Workbook
    DestinFilePath = .Range("E28").Value 'Destination Workbook File Path
    On Error Resume Next
    Set DestinWkBk = Workbooks(Dir(DestinFilePath)) 'Set Destination Workbook
    If DestinWkBk Is Nothing Then
        Set DestinWkBk = Workbooks.Open(DestinFilePath)
        ThisWorkbook.Activate
    End If
    On Error GoTo 0
End If

'Get Source Data Variables
    FirstSourceDataRow = .Range("F12").Value 'First Row of Source Data
    LastSourceRow = .Range("I12").Value 'Last Row Of Source Data
    FirstSourceCol = .Range("F13").Value 'First Column Of Source Data
    LastSourceCol = .Range("I13").Value 'Last Column Of Source Data
    ColCount = 1 'Set Initial Column Count

'Get Destination Data Variables
    DestinShtName = .Range("I29").Value 'Destination Sheet Name
    FirstDestinCol = .Range("F32").Value
    LastDestinCol = .Range("J32").Value
    FirstDestinDataRow = .Range("F31").Value
    'If the Destination is a New Workbook, or New Sheet, set the # of Columns to default to the # of Source Columns, otherwise the # of Columns is set to the Destination Workbook Columns
     If .Range("B4").Value = 2 Or .Range("I29").Value = "<New Worksheet>" Then DestinColNumb = .Range("I16").Value Else: DestinColNumb = .Range("J32").Value
     

'Load Source Table Headers
    MapRow = 65
    For TableCol = FirstSourceCol To LastSourceCol
            If .Range("A6").Value = True Then 'Headers Exist
                .Range("D" & MapRow).Value = SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow - 1, TableCol).Value
            Else: ' No Headers
                .Range("D" & MapRow).Value = "Column" & ColCount
                ColCount = ColCount + 1
            End If
            .Range("B" & MapRow).Value = TableCol 'Source Column Number
            MapRow = MapRow + 1
    Next TableCol


'Load Source Data & Source Format(First Row)
    MapRow = 65 'Reset Map Row
    For TableCol = FirstSourceCol To LastSourceCol
        .Range("E" & MapRow).Value = SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow, TableCol).Value
        .Range("L" & MapRow).Value = "=Iferror(Cell(" & Chr(34) & "format" & Chr(34) & ",'[" & Dir(SourceFilePath) & "]" & SourceShtName & "'!" & SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow, TableCol).Address & ")," & Chr(34) & "G" & Chr(34) & ")"
        MapRow = MapRow + 1
    Next TableCol

'Load Destination Column
    MapRow = 65 'Reset Map Row
        If .Range("B4").Value = 2 Or .Range("I29").Value = "<New Worksheet>" Then 'New Destination Workbook or New Sheet
                For TableCol = 1 To DestinColNumb - 1
                            .Range("G" & MapRow).Value = "Column" & FirstDestinCol & "(" & Replace(Replace(.Cells(1, FirstDestinCol).Address, "1", ""), "$", "") & ")" 'Set Default Column
                            .Range("A" & MapRow).Value = "Column" & FirstDestinCol & "(" & Replace(Replace(.Cells(1, FirstDestinCol).Address, "1", ""), "$", "") & ")" 'Build Drop Down Destination List
                            .Range("H" & MapRow).Value = .Range("N" & MapRow).Value 'Add In Cell Format Type
                            If .Range("N" & MapRow).Value <> Empty And .Range("N" & MapRow).Value <> "General" Then
                                .Range("I" & MapRow).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=" & .Range("N" & MapRow).Value & "FormatList"
                                .Range("I" & MapRow).Value = .Range("M" & MapRow).Value 'Default Format from source
                            End If
                            MapRow = MapRow + 1 'Increment Mappnig Row
                            FirstDestinCol = FirstDestinCol + 1 'Increment One Column To Right
                Next TableCol
        Else: 'Existing Table Destination
            For TableCol = FirstDestinCol To LastDestinCol
                    If .Range("B6").Value = True Then DestinHeaderRow = .Range("F31").Value - 1 Else DestinHeaderRow = .Range("F31").Value
                    .Range("G" & MapRow).Value = DestinWkBk.Sheets(DestinShtName).Cells(DestinHeaderRow, TableCol).Value
                    .Range("A" & MapRow).Value = DestinWkBk.Sheets(DestinShtName).Cells(DestinHeaderRow, TableCol).Value
                    'Determine Cell Formats

                    .Range("H" & MapRow).Value = .Range("N" & MapRow).Value 'Add In Cell Format Type
                    If .Range("N" & MapRow).Value <> Empty And .Range("N" & MapRow).Value <> "General" Then 'Update Cell Validation Type if Not general
                        .Range("I" & MapRow).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=" & .Range("N" & MapRow).Value & "FormatList"
                        .Range("I" & MapRow).Value = .Range("M" & MapRow).Value 'Default Format from Source
                    End If
                    MapRow = MapRow + 1 'Increment Mapping Row
            Next TableCol
        End If
        
.Range("B61").Value = True 'Set Mapping Completed to True
.Range("B62").Value = False 'Set Mapping Load to False
End With
End Sub




Attribute VB_Name = "DestinMacros"
Option Explicit

Sub BrowseForDestination()
Dim FileFldr As FileDialog
Dim DestinFilePath As String
Dim DestinWs As Worksheet
Dim ImportWkBk As Workbook
Dim DestinWkBk As Workbook
Dim WsRow As Long
Set ImportWkBk = ThisWorkbook
With Sheet1
    .Range("B8:B100").ClearContents 'Clear any older source worksheets
    .Range("E47:I53").ClearContents 'Clear Import Summary Message
    .Range("A65:B165,D65:L165").ClearContents 'Clear Mapping Data"
    .Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
    WsRow = 8 'Set Inital Worksheet Row to 8
    Set FileFldr = Application.FileDialog(msoFileDialogFilePicker)
    With FileFldr
        .Title = "Select Destination File"
       .Filters.Add "Excel Files", "*.xlsm,*.xlsx,*.xlsb, *.xls"
        If .Show <> -1 Then GoTo NoSelection
        Sheet1.Range("E28").Value = .SelectedItems(1) 'Get Full File Path
    End With
    
    DestinFilePath = .Range("E28").Value 'Long File Path
    .Range("E29").Value = Dir(DestinFilePath, vbDirectory) 'File Name
    On Error Resume Next
    Set DestinWkBk = Workbooks(Dir(DestinFilePath)) 'Set Destination Workbook
    If DestinWkBk Is Nothing Then
        Set DestinWkBk = Workbooks.Open(DestinFilePath)  'Open Destination Workbook
    End If
    
    For Each DestinWs In DestinWkBk.Worksheets
        Sheet1.Range("B" & WsRow).Value = DestinWs.Name
        WsRow = WsRow + 1
    Next
    .Range("B" & WsRow).Value = "<New Worksheet>"
    .Range("I29").Value = .Range("B8").Value 'Set Intial Sheet Name
NoSelection:
ThisWorkbook.Activate
End With
End Sub

Sub UseNewWorkbook()
With Sheet1
    .Range("E29:F29,B8:B44").ClearContents
    .Range("A65:B165,D65:L165").ClearContents 'Clear Mapping Data
    .Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
    .Range("E65:E165").NumberFormat = "General" 'Reset All Formats
    .Range("B8, I29").Value = "Sheet1"
    .Range("B9").Value = "Sheet2"
    .Range("B10").Value = "Sheet3"
    .Range("E28").Value = "<New Workbook>"
    .Range("F31").Value = 2 'Set First Row of Data
    .Range("F32").Value = 1 'Set First Column of Data
    .Range("B61").Value = False 'Reset Mapping to 'Incomplete'
    .Shapes("DestWkbkBtn").Visible = msoFalse
End With
End Sub

Sub UseExistingWorkbook()
With Sheet1
 .Shapes("DestWkbkBtn").Visible = msoCTrue
 .Range("E28:J28,I29:J29,B8:B44").ClearContents
 .Range("A65:B165,D65:L165").ClearContents 'Clear Mapping Data
.Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
.Range("B61").Value = False 'Reset Mapping to 'Incomplete'
.Range("E65:E165").NumberFormat = "General" 'Reset All Formats
End With
End Sub
Sub GetDestinData()
Dim DestinFilePath As String
Dim DestinShtName As String
Dim DestinWkBk As Workbook
Dim ImportWkBk As Workbook
Dim WsRow As Long
Dim FirstRow As Long
Dim TableRow As Long
Dim TableCol As Long
Dim FirstCol As Long
Dim LastRow As Long
Dim LastCol As Long

Set ImportWkBk = ThisWorkbook
 With Sheet1
    .Range("A65:B165,D65:L165").ClearContents 'Clear Mapping Data"
    .Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
    .Range("E65:E165").NumberFormat = "General" 'Reset All Formats
    .Range("E47:I53").ClearContents 'Clear Import Summary Message
    
If .Range("B4").Value = 1 And Range("I29").Value <> "<New Worksheet>" Then 'Existing Workbook (not new)
        If .Range("E28").Value = Empty Or .Range("E28").Value = "<New Workbook>" Then Exit Sub 'No workbook selected
        DestinFilePath = .Range("E28").Value 'Destin Workbook File Path
    On Error Resume Next
    Set DestinWkBk = Workbooks(Dir(DestinFilePath)) 'Set Destination Workbook
    If DestinWkBk Is Nothing Then
        Set DestinWkBk = Workbooks.Open(DestinFilePath)  'Open Destination Workbook
    End If
        DestinShtName = .Range("I29").Value 'Destin Worksheet Name

        With DestinWkBk.Sheets(DestinShtName)
                'Get Last Row Of Data
                LastRow = .Cells.Find(What:="*", After:=.Range("A1"), _
                Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False).Row
                'Get Last Column Of Data
                 LastCol = .Cells.Find(What:="*", After:=.Range("A1"), _
                 Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByColumns, SearchDirection:=xlPrevious, MatchCase:=False).Column
                    'On Error GoTo 0
                    
                    'Determine First Row Of Table w/ 70% of the cells filled
                For TableRow = 1 To LastRow
                    If (Application.WorksheetFunction.CountA(Range(.Cells(TableRow, 1), .Cells(TableRow, LastCol))) / LastCol) >= 0.7 Then
                        FirstRow = TableRow
                        Exit For
                    End If
                Next TableRow
                
                    'Determine First Column Of Table w/ 50% of the cells filled
                For TableCol = 1 To LastCol
                    If (Application.WorksheetFunction.CountA(Range(.Cells(1, TableCol), .Cells(LastRow, TableCol))) / LastRow) >= 0.5 Then
                        FirstCol = TableCol
                        Exit For
                    End If
                Next TableCol
        End With
                
        'For existing Destination workbooks with headers, add 1 to First Row
        If .Range("B6").Value = True And .Range("B4").Value = 1 Then FirstRow = FirstRow + 1
        
        .Range("F31").Value = FirstRow 'Set First Row Of Destin Data
        .Range("F33").Value = LastRow 'Set Last Row Of Destin Data
        .Range("F32").Value = FirstCol 'Set First Column Of Destin Data
        .Range("J32").Value = LastCol 'Set Last Column Of Destin Destin Data
        
Else: 'New Destination Workbook or New Worksheet

    .Range("F31").Value = 2 'Set First Row Of Destin Data
    .Range("F33").Value = 1 'Set Last Row Of Destin Data
    .Range("F32").Value = 1  'Set First Column Of Destin Data
    .Range("J32").Value = 1 'Set Last Column Of Destin Destin Data
    If .Range("I29").Value = "<New Worksheet>" Then .Range("I30").Value = "New Sheet" 'Set Default New Worksheet Name

End If
.Range("B61").Value = False 'Reset Mapping Complete to False
End With

ImportWkBk.Activate
Exit Sub
MissingDestin:
MsgBox "Please check for a correct Destination Workbook"
End Sub
Attribute VB_Name = "FadeOutMessages"
Option Explicit


Sub Temp_SavedMess()
Dim i As Integer
Dim delay As Double
Dim StartTime As Double
With ActiveSheet.Shapes("TemplateSaved")
.Visible = True
  For i = 1 To 100
  .Fill.Transparency = i / 100
    delay = 0.009
    StartTime = Timer
    Do
    DoEvents
    Loop While Timer - StartTime < delay
  Next i
.Visible = False
End With
End Sub


Sub Temp_DeletedMess()
Dim i As Integer
Dim delay As Double
Dim StartTime As Double
With ActiveSheet.Shapes("TemplateDeleted")
.Visible = True
  For i = 1 To 100
  .Fill.Transparency = i / 100
    delay = 0.006
    StartTime = Timer
    Do
    DoEvents
    Loop While Timer - StartTime < delay
  Next i
.Visible = False
End With
End Sub


Attribute VB_Name = "ImpDataDynamicMacros"
Option Explicit

Sub ImportData_Dynamic()
Dim SourceFilePath As String
Dim DestinFilePath As String

Dim SourceWkBk As Workbook
Dim DestinWkBk As Workbook
Dim ImportWkBk As Workbook

Dim NewDestinSht As Worksheet
Dim SourceShtName As String
Dim DestinShtName As String
Dim SourceFile As String 'Added
Dim SourceFileName As String 'Added
Dim SourceFolder As String 'Added
Dim MoveSourceToFolder As String 'Added

Dim SourceObj As Object 'Added
Dim SourceFolderObj As Object 'Added

Dim FirstSourceDataRow As Long
Dim FirstSourceCol As Long
Dim LastSourceCol As Long
Dim LastSourceRow As Long
Dim SourceCol As Long

Dim FirstDestinDataRow As Long
Dim FirstDestinCol As Long
Dim LastDestinCol As Long
Dim LastDestinDataRow As Long
Dim DestinCol As Long

Dim TotalImportRows As Long
Dim TotalImportColumns As Long
Dim TotalCombinedRows As Long 'Added
Dim SourceWkBkCount  As Long 'Added
Dim TableRow As Long
Dim TableCol As Long
Dim ColCount As Long
Dim FirstAvailRow As Long


Dim MapCol As Long
Dim LastMapCol As Long
Dim CellFormat As String

With Sheet1
'Make sure Data Mapping has been done
If .Range("B61").Value = False Then 'Mapping incomplete
    MsgBox "Please complete Data Mapping before import"
    ImportStep3
    Exit Sub
End If

'Check For Required Dynamic Source Fields

If .Range("E10").Value = "" Or .Range("F10").Value = "" Or .Range("H10").Value = "" Or .Range("I9").Value = "" Then
    MsgBox "Please make sure all dymic source fields have been added"
    ImportStep1
    Exit Sub
End If

Set ImportWkBk = ThisWorkbook 'Set Current Workbook To Import

'Get Destination Workbook Variables
            If .Range("B4").Value = 1 Then 'Use Existing Workbook
                    DestinFilePath = .Range("E28").Value 'Destination file Pat
                    On Error Resume Next 'If workbook is not open, a but would display
                    Set DestinWkBk = Workbooks(Dir(DestinFilePath)) 'Set Destination Workbook
                    If DestinWkBk Is Nothing Then 'Workbook is not open, so open it
                        Set DestinWkBk = Workbooks.Open(DestinFilePath)
                    End If
                    LastDestinDataRow = .Range("F33").Value 'Last Row of Data in Destination
            Else: 'Use New Workbook
                    Set DestinWkBk = Workbooks.Add 'Set New Destination Workbook
                    DestinFilePath = .Range("H10").Value & "\" & .Range("E29").Value & ".xlsx" 'Set Destination File Path To Source Location To Save New Workbook
            End If
            DestinShtName = .Range("I29").Value 'Destination Worksheet Name
            FirstDestinDataRow = .Range("F31").Value 'First Row of Data in Destination
            FirstDestinCol = .Range("F32").Value 'First Column of Destination Data
            LastDestinCol = .Range("J32").Value 'Last Column Of Destination Data
            
            'Create A New Worksheet on Existing Workbook and '<New Worksheet>' Chose
            If .Range("B4").Value = 1 And DestinShtName = "<New Worksheet>" Then
                On Error GoTo DuplicateSheet
                Set NewDestinSht = DestinWkBk.Sheets.Add(After:=DestinWkBk.Sheets(DestinWkBk.Sheets.Count))
                If .Range("I30").Value <> Empty Then NewDestinSht.Name = .Range("I30").Value Else: NewDestinSht.Name = "New Sheet"  'Set New Sheet Name to Default or user set
                DestinShtName = NewDestinSht.Name 'Rename Variable to newly created sheet name
            End If
                    
                
            'Get First Available Row In Destination
                If .Range("B4").Value = 1 And .Range("I29").Value <> "<New Worksheet>" And .Range("I31").Value = "Add To Existing Data" Then 'Add To Existing Data (Do Not Replace)
                    FirstAvailRow = LastDestinDataRow + 1 'Last Row In Destination With a value + 1
                Else:
                    FirstAvailRow = FirstDestinDataRow
                End If
                
'Get Dynamic Source Workbook Details

    'Get Source Workbook Variables
    FirstSourceDataRow = .Range("F12").Value 'First Row of Data (excludes headers)
    FirstSourceCol = .Range("F13").Value 'First Column Of Data from the source sheet
    LastSourceCol = .Range("I13").Value 'Last Source Column
    SourceShtName = .Range("I9").Value 'Source Worksheet Name
    SourceFolder = .Range("H10").Value 'Source Folder
    MoveSourceToFolder = .Range("H11").Value 'Move To Source Folder
    SourceFileName = .Range("F10").Value 'Initial Source File Name
    TotalImportColumns = LastSourceCol - FirstSourceCol + 1
    LastMapCol = Application.WorksheetFunction.CountA(.Range("A65:A163")) + 64 'Use instad of End(xlup) for hidden rows & columns
        'Determine Source File Types
            Select Case .Range("E10").Value 'File Filter Type
                Case Is = "start with"
                    SourceFileName = SourceFileName & "*"
                Case Is = "end with"
                    SourceFileName = "*" & SourceFileName
                Case Is = "match"
                    SourceFileName = SourceFileName
                Case Is = "contain"
                    SourceFileName = "*" & SourceFileName & "*"
            End Select
    
                TableCol = FirstDestinCol 'Set Intial Table Column
                 'Check to See if we are copying over headers and only on the first of many source workbooks
                    If .Range("B4").Value = 2 Or .Range("I29").Value = "<New Worksheet>" Then  'New Workbook or New Worksheet, add headers
                        For MapCol = 65 To LastMapCol
                            If .Range("G" & MapCol).Value <> "<Do Not Import>" Then
                                DestinCol = .Range("O" & MapCol).Value + FirstDestinCol - 1
                                DestinWkBk.Sheets(DestinShtName).Cells(FirstDestinDataRow - 1, DestinCol).Value = .Range("D" & MapCol).Value 'Add Column Header
                                TableCol = TableCol + 1 'Increase The Column Count By 1
                            End If
                        Next MapCol
                    End If
                
                'If Using Existing Destination Workbook, On an Exsting Sheet AND Replacing Data, then clear old data
                    If .Range("B4").Value = 1 And .Range("I29").Value <> "<New Worksheet>" And .Range("I31").Value = "Replace Exisitng Data" Then
                        Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstDestinDataRow, FirstDestinCol), DestinWkBk.Sheets(DestinShtName).Cells(LastDestinDataRow, LastDestinCol)).ClearContents
                    End If
                    
                    
     
    Set SourceObj = VBA.CreateObject("Scripting.FileSystemObject")
    Set SourceFolderObj = SourceObj.GetFolder(SourceFolder)
    
'Begin Loop For All Source Workbooks
    For Each SourceObj In SourceFolderObj.Files
        If LCase(SourceObj.Name) Like LCase(SourceFileName) Then 'Check For File match
                    SourceFilePath = SourceObj.Path
                    SourceFile = Dir(SourceFilePath)
                    SourceWkBkCount = SourceWkBkCount + 1 'Count # of workbooks being Imported
                    On Error Resume Next 'An error will occur if we set a workbook that is not open. If the error occurs we can run a check and open the workbook
                    Set SourceWkBk = Workbooks(SourceFile) 'Set Source Workbook
                    If SourceWkBk Is Nothing Then 'Source Workbook is not open
                        Set SourceWkBk = Workbooks.Open(SourceFilePath)
                    End If
            LastSourceRow = SourceWkBk.Sheets(SourceShtName).Cells.Find(What:="*", After:=.Range("A1"), Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False).Row 'Last Row Of Data
            TotalImportRows = LastSourceRow - FirstSourceDataRow + 1 'Total Rows To Be Imported
                    
         'Check For Data Filters
            If Application.WorksheetFunction.CountA(ImportWkBk.Sheets("Data Import Manager").Range("F65:F" & LastMapCol)) > 0 Then 'User Assigned Filters
                    ImportWkBk.Sheets("TempData").Cells.ClearContents
                    'Copy Over Source Data To Temp Data Sheet
                     Range(ImportWkBk.Sheets("TempData").Cells(1, 1), ImportWkBk.Sheets("TempData").Cells(TotalImportRows + 1, TotalImportColumns)).Value = _
                     Range(SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow - 1, FirstSourceCol), SourceWkBk.Sheets(SourceShtName).Cells(LastSourceRow, LastSourceCol)).Value
                     
                     'Add in Criteria
                     Range(ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns + 2), ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns + TotalImportColumns + 1)).Value = _
                     Range(ImportWkBk.Sheets("TempData").Cells(1, 1), ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns)).Value
                     .Range("F65:F" & LastMapCol).Copy
                     ImportWkBk.Sheets("TempData").Cells(2, TotalImportColumns + 2).PasteSpecial xlPasteValues, , Transpose:=True
                     
                     'Run Advanced Filter
                     Range(ImportWkBk.Sheets("TempData").Cells(1, 1), ImportWkBk.Sheets("TempData").Cells(TotalImportRows + 1, TotalImportColumns)).AdvancedFilter xlFilterCopy, _
                     CriteriaRange:=Range(ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns + 2), ImportWkBk.Sheets("TempData").Cells(2, (TotalImportColumns * 2) + 1)), _
                     CopyToRange:=Range(ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 2) + 2), ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 3) + 1)), Unique:=True
                    
                       LastSourceRow = Range(ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 2) + 2), ImportWkBk.Sheets("TempData").Cells(999999, (TotalImportColumns * 3) + 1)).Find(What:="*", After:=ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 2) + 2), Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False).Row 'Last Row Of Data
                       If LastSourceRow < 2 Then GoTo NoSourceData
                       SourceCol = (TotalImportColumns * 2) + 2 'First Source Column From Filter results
                       TotalImportRows = LastSourceRow - 1 'Total Rows To Be Imported
                       TableCol = FirstDestinCol 'Reset Intial Table Column
                       
                    'Copy Over Data & Formats
                        For MapCol = 65 To LastMapCol 'For Each Column in Source From Data Mapping
                            If .Range("G" & MapCol).Value <> "<Do Not Import>" Then
                               
                                DestinCol = .Range("O" & MapCol).Value + FirstDestinCol - 1  'Determine Destination Column
                                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + LastSourceRow - 2, DestinCol)).Value = _
                                Range(ImportWkBk.Sheets("TempData").Cells(2, SourceCol), ImportWkBk.Sheets("TempData").Cells(LastSourceRow, SourceCol)).Value
                                
                                'Add In Formats
                                If .Range("I" & MapCol).Value <> "" Then CellFormat = .Range("I" & MapCol).Value Else CellFormat = "General"     'Determine Cell Format
                                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + TotalImportRows - 1, DestinCol)).NumberFormat = CellFormat
                                TableCol = TableCol + 1 'Create a column count and increase it by 1
                                SourceCol = SourceCol + 1 ' Increment Column One to the right
                            End If
                        Next MapCol
                    FirstAvailRow = FirstAvailRow + TotalImportRows 'Update First Available Row For Next Import
                    TotalCombinedRows = TotalCombinedRows + TotalImportRows 'Update Total Combined Rows

NoSourceData:
            Else: 'No Filters
                    
                               'Copy Over Data & Formats From Source To Destination
                

                  'Copy Over Data & Formats
                    TableCol = FirstDestinCol 'Reset Intial Table Column
                        For MapCol = 65 To LastMapCol 'For Each Column in Source From Data Mapping
                            If .Range("G" & MapCol).Value <> "<Do Not Import>" Then
                                SourceCol = .Range("B" & MapCol).Value 'Determine Source Column
                                DestinCol = .Range("O" & MapCol).Value + FirstDestinCol - 1  'Determine Destination Column
                                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + TotalImportRows - 1, DestinCol)).Value = _
                                Range(SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow, SourceCol), SourceWkBk.Sheets(SourceShtName).Cells(LastSourceRow, SourceCol)).Value
                                
                                'Add In Formats
                                If .Range("I" & MapCol).Value <> "" Then CellFormat = .Range("I" & MapCol).Value Else CellFormat = "General"     'Determine Cell Format
                                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + TotalImportRows - 1, DestinCol)).NumberFormat = CellFormat
                                TableCol = TableCol + 1 'Create a column count and increase it by 1
                            End If
                        Next MapCol
                    FirstAvailRow = FirstAvailRow + TotalImportRows 'Update First Available Row For Next Import
                    TotalCombinedRows = TotalCombinedRows + TotalImportRows 'Update Total Combined Rows
            End If 'End Filter Check
         
                'Close Source Workbook
                SourceWkBk.Close False
                
                'Move Source Workbook if requested
                    If .Range("F11").Value = "Move Files To" And MoveSourceToFolder <> Empty Then
                        Name SourceFilePath As MoveSourceToFolder & "/" & Dir(SourceFilePath)
                    End If
                    
                'Delete File if option was requested
                    If .Range("F11").Value = "Delete Files" Then
                        Kill (SourceFilePath)
                    End If
                Set SourceWkBk = Nothing 'Clear Source Workbook Variabl
    End If 'File Match
Next SourceObj  'Next Matching Workbook In Folder

If SourceWkBkCount <> 0 Then   'Source Workbooks Found
    Range(DestinWkBk.Sheets(DestinShtName).Cells(1, FirstDestinCol), DestinWkBk.Sheets(DestinShtName).Cells(1, DestinCol)).EntireColumn.AutoFit 'Autofit all columns in destination
    
    'Save Destination Workbook (if existing), or Save As (if new)
    If .Range("B4").Value = 1 Then
        DestinWkBk.Save
    Else
        If Dir(DestinFilePath) <> "" Then Kill (DestinFilePath) 'Delete if existing to prevent errors
        DestinWkBk.SaveAs DestinFilePath
    End If
    
    DestinWkBk.Close False 'Close Destination workbook
    'Completion Message
    .Range("E47").Value = "Your import has successfully been completed." & vbCrLf & "A total of " & TotalCombinedRows & " rows have been imported to " & DestinWkBk.Name & " on Sheet " & DestinShtName
Else: 'No Source Workbooks Found
    MsgBox "No Source Workbooks have been found"
End If

ImportWkBk.Activate
Sheet1.Activate
Exit Sub
DuplicateSheet:
MsgBox "The Sheet Name '" & .Range("I30").Value & "' already exists" & vbCrLf & "Please select a new worksheet name to add"
End With
End Sub




Attribute VB_Name = "ImpDataStaticMacros"
Option Explicit

Sub RunImportMacro()
If Sheet1.Range("B2").Value = True Then ImportData_Dynamic Else: ImportData_Static
End Sub
Sub ImportData_Static()
Dim SourceFilePath As String
Dim DestinFilePath As String

Dim SourceWkBk As Workbook
Dim DestinWkBk As Workbook
Dim ImportWkBk As Workbook

Dim NewDestinSht As Worksheet
Dim SourceShtName As String
Dim DestinShtName As String

Dim FirstSourceDataRow As Long
Dim FirstSourceCol As Long
Dim LastSourceCol As Long
Dim LastSourceRow As Long
Dim SourceCol As Long

Dim FirstDestinDataRow As Long
Dim FirstDestinCol As Long
Dim LastDestinCol As Long
Dim LastDestinDataRow As Long
Dim DestinCol As Long

Dim TotalImportRows As Long
Dim TotalImportColumns As Long
Dim TableRow As Long
Dim TableCol As Long
Dim ColCount As Long
Dim FirstAvailRow As Long


Dim MapCol As Long
Dim LastMapCol As Long
Dim CellFormat As String

With Sheet1
'Make sure Data Mapping has been done
If .Range("B61").Value = False Then 'Mapping incomplete
    MsgBox "Please complete Data Mapping before import"
    ImportStep3
    Exit Sub
End If

Set ImportWkBk = ThisWorkbook 'Set Current Workbook To Import

'Get Source Workbook Variables
    SourceFilePath = .Range("E8").Value 'Source Workbook File Path
    On Error Resume Next 'An error will occur if we set a workbook that is not open. If the error occurs we can run a check and open the workbook
    Set SourceWkBk = Workbooks(Dir(SourceFilePath)) 'Set Source Workbook
    If SourceWkBk Is Nothing Then 'Source Workbook is not open
        Set SourceWkBk = Workbooks.Open(SourceFilePath)
    End If
    On Error GoTo 0
    SourceShtName = .Range("I9").Value 'Source Worksheet Name
    FirstSourceDataRow = .Range("F12").Value 'First Row of Data (excludes headers)
    FirstSourceCol = .Range("F13").Value 'First Column Of Data from the source sheet
    LastSourceCol = .Range("I13").Value 'Last Source Column
    LastSourceRow = .Range("I12").Value 'Last Row Of Data
        TotalImportRows = .Range("F16").Value 'Total Rows To Be Imported
    TotalImportColumns = LastSourceCol - FirstSourceCol + 1

'Get Destination Workbook Variables
    If .Range("B4").Value = 1 Then 'Use Existing Workbook
            DestinFilePath = .Range("E28").Value 'Destination file Path
            On Error Resume Next 'If workbook is not open, a but would display
            Set DestinWkBk = Workbooks(Dir(DestinFilePath)) 'Set Destination Workbook
            If DestinWkBk Is Nothing Then 'Workbook is not open, so open it
                Set DestinWkBk = Workbooks.Open(DestinFilePath)
            End If
            On Error GoTo 0
            LastDestinDataRow = .Range("F33").Value 'Last Row of Data in Destination
    Else: 'Use New Workbook
            Set DestinWkBk = Workbooks.Add 'Set New Destination Workbook
            If .Range("E29").Value = Empty Then .Range("E29").Value = "New Destination File"
            DestinFilePath = SourceWkBk.Path & "\" & .Range("E29").Value & ".xlsx" 'Set Destination File Path To Save New Workbook
            
    End If
    If .Range("I29").Value = Empty Then DestinShtName = "Sheet1" Else: DestinShtName = .Range("I29").Value 'Destination Worksheet Name
    FirstDestinDataRow = .Range("F31").Value 'First Row of Data in Destination
    FirstDestinCol = .Range("F32").Value 'First Column of Destination Data
    LastDestinCol = .Range("J32").Value 'Last Column Of Destination Data
    
    'Create A New Worksheet on Existing Workbook if '<New Worksheet>' Chosen
    If .Range("B4").Value = 1 And DestinShtName = "<New Worksheet>" Then
        On Error GoTo DuplicateSheet
        Set NewDestinSht = DestinWkBk.Sheets.Add(After:=DestinWkBk.Sheets(DestinWkBk.Sheets.Count))
        If .Range("I30").Value <> Empty Then NewDestinSht.Name = .Range("I30").Value Else: NewDestinSht.Name = "New Sheet"  'Set New Sheet Name to Default or user set
        DestinShtName = NewDestinSht.Name 'Rename Variable to newly created sheet name
    End If
    On Error Resume Next
            DestinWkBk

'Get First Available Row In Destination
    If .Range("B4").Value = 1 And .Range("I29").Value <> "<New Worksheet>" And .Range("I31").Value = "Add To Existing Data" Then 'Add To Existing Data (Do Not Replace)
        FirstAvailRow = LastDestinDataRow + 1 'Last Row In Destination With a value + 1
    Else:
        FirstAvailRow = FirstDestinDataRow
    End If
    
    
'Copy Over Data & Formats From Source To Destination
LastMapCol = Application.WorksheetFunction.CountA(.Range("A65:A163")) + 64 'Use instad of End(xlup) for hidden rows & columns

'If Using Existing Destination Workbook, On an Exsting Sheet AND Replacing Data, then clear old data
    If .Range("B4").Value = 1 And .Range("I29").Value <> "<New Worksheet>" And .Range("I31").Value = "Replace Exisitng Data" Then
        Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstDestinDataRow, FirstDestinCol), DestinWkBk.Sheets(DestinShtName).Cells(LastDestinDataRow, LastDestinCol)).ClearContents
    End If
    
TableCol = FirstDestinCol 'Set Intial Table Column
 'Check to See if we are copying over headers
    If .Range("B4").Value = 2 Or .Range("I29").Value = "<New Worksheet>" Then 'New Workbook or New Worksheet, add headers
        For MapCol = 65 To LastMapCol
            If .Range("G" & MapCol).Value <> "<Do Not Import>" Then
                DestinCol = .Range("O" & MapCol).Value + FirstDestinCol - 1
                DestinWkBk.Sheets(DestinShtName).Cells(FirstDestinDataRow - 1, DestinCol).Value = .Range("D" & MapCol).Value 'Add Column Header
                TableCol = TableCol + 1 'Increase The Column Count By 1
            End If
        Next MapCol
    End If

'Check For Data Filters
 If Application.WorksheetFunction.CountA(ImportWkBk.Sheets("Data Import Manager").Range("F65:F" & LastMapCol)) > 0 Then 'User Assigned Filters
    ImportWkBk.Sheets("TempData").Cells.ClearContents
     'Copy Over Source Data To Temp Data Sheet
      Range(ImportWkBk.Sheets("TempData").Cells(1, 1), ImportWkBk.Sheets("TempData").Cells(TotalImportRows + 1, TotalImportColumns)).Value = Range(SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow - 1, FirstSourceCol), SourceWkBk.Sheets(SourceShtName).Cells(LastSourceRow, LastSourceCol)).Value
      'Add in Criteria
      Range(ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns + 2), ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns + TotalImportColumns + 1)).Value = Range(ImportWkBk.Sheets("TempData").Cells(1, 1), ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns)).Value
      .Range("F65:F" & LastMapCol).Copy
      ImportWkBk.Sheets("TempData").Cells(2, TotalImportColumns + 2).PasteSpecial xlPasteValues, , Transpose:=True
      
      'Run Advanced Filter
      Range(ImportWkBk.Sheets("TempData").Cells(1, 1), ImportWkBk.Sheets("TempData").Cells(TotalImportRows + 1, TotalImportColumns)).AdvancedFilter xlFilterCopy, _
      CriteriaRange:=Range(ImportWkBk.Sheets("TempData").Cells(1, TotalImportColumns + 2), ImportWkBk.Sheets("TempData").Cells(2, TotalImportColumns + TotalImportColumns + 1)), _
      CopyToRange:=Range(ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 2) + 2), ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 3) + 1)), Unique:=True
    
        LastSourceRow = Range(ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 2) + 2), ImportWkBk.Sheets("TempData").Cells(999999, (TotalImportColumns * 3) + 1)).Find(What:="*", After:=ImportWkBk.Sheets("TempData").Cells(1, (TotalImportColumns * 2) + 2), Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False).Row 'Last Row Of Data
        If LastSourceRow < 2 Then GoTo NoSourceData
        FirstSourceDataRow = 2
        SourceCol = (TotalImportColumns * 2) + 2 'First Source Column From Filter results
      
           'Copy Over Data & Formats
         TableCol = FirstDestinCol 'Reset Intial Table Column
        For MapCol = 65 To LastMapCol 'For Each Column in Source From Data Mapping
            If .Range("G" & MapCol).Value <> "<Do Not Import>" Then
                
                DestinCol = .Range("O" & MapCol).Value + FirstDestinCol - 1  'Determine Destination Column
                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + LastSourceRow - 2, DestinCol)).Value = _
                Range(ImportWkBk.Sheets("TempData").Cells(FirstSourceDataRow, SourceCol), ImportWkBk.Sheets("TempData").Cells(LastSourceRow, SourceCol)).Value
                
                'Add In Formats
                If .Range("I" & MapCol).Value <> "" Then CellFormat = .Range("I" & MapCol).Value Else CellFormat = "General"     'Determine Cell Format
                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + LastSourceRow - 2, DestinCol)).NumberFormat = CellFormat
                TableCol = TableCol + 1 'Create a column count and increase it by 1
                SourceCol = SourceCol + 1
            End If
        Next MapCol
NoSourceData:

 Else: 'No Filters
   'Copy Over Data & Formats
    TableCol = FirstDestinCol 'Reset Intial Table Column
        For MapCol = 65 To LastMapCol 'For Each Column in Source From Data Mapping
            If .Range("G" & MapCol).Value <> "<Do Not Import>" Then
                SourceCol = .Range("B" & MapCol).Value 'Determine Source Column
                DestinCol = .Range("O" & MapCol).Value + FirstDestinCol - 1  'Determine Destination Column
                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + TotalImportRows - 1, DestinCol)).Value = _
                Range(SourceWkBk.Sheets(SourceShtName).Cells(FirstSourceDataRow, SourceCol), SourceWkBk.Sheets(SourceShtName).Cells(LastSourceRow, SourceCol)).Value
                
                'Add In Formats
                If .Range("I" & MapCol).Value <> "" Then CellFormat = .Range("I" & MapCol).Value Else CellFormat = "General"     'Determine Cell Format
                Range(DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow, DestinCol), DestinWkBk.Sheets(DestinShtName).Cells(FirstAvailRow + TotalImportRows - 1, DestinCol)).NumberFormat = CellFormat
                TableCol = TableCol + 1 'Create a column count and increase it by 1
            End If
        Next MapCol
        
End If

       Range(DestinWkBk.Sheets(DestinShtName).Cells(1, FirstDestinCol), DestinWkBk.Sheets(DestinShtName).Cells(1, DestinCol)).EntireColumn.AutoFit
           
                   'Save Destination Workbook (if existing), or Save As (if new)
            If .Range("B4").Value = 1 Then
                DestinWkBk.Save
            Else
                On Error Resume Next
                Workbooks(Dir(DestinFilePath)).Close False 'Close workbook by the same name if open
                On Error GoTo 0
                If Dir(DestinFilePath) <> "" Then Kill (DestinFilePath) 'Delete if existing to prevent errors
                DestinWkBk.SaveAs DestinFilePath
            End If
              .Range("E47").Value = "Your import has successfully been completed." & vbCrLf & "A total of " & TotalImportRows & " rows have been imported to " & DestinWkBk.Name & " on Sheet " & DestinShtName
            DestinWkBk.Close False
            SourceWkBk.Close False
      ImportWkBk.Activate
Exit Sub
DuplicateSheet:
MsgBox "The Sheet Name '" & .Range("I30").Value & "' already exists" & vbCrLf & "Please select a new worksheet name to add"
End With
End Sub


Sub CloseImportWkBk()
Sheet1.Range("E47:I53").ClearContents
ThisWorkbook.Close True
End Sub



Attribute VB_Name = "RecurringMacros"
Option Explicit

Sub RecurringSwitch()
Dim MoveBtn As Long
With Sheet1
    If .Range("B167").Value = True Then 'Currently Recurring
        .Range("B167").Value = False 'Set Recurring to False
        .Range("G168").Value = "Inactive"
         For MoveBtn = 0 To 32
            Application.Wait Now + 0.000005
            Application.Wait Now + 0.000005
            .Shapes("SwitchFront").IncrementLeft -1
            .Shapes("SwitchFront").Fill.ForeColor.RGB = RGB(0 + (5.75 * MoveBtn), 222 - (1.1875 * MoveBtn), 26 + (4.9375 * MoveBtn))
         Next MoveBtn
          .Shapes("SwitchFront").Left = .Shapes("SwitchBack").Left + 1.5 'Ensures the switch is in the correct Horizontal position
    Else: 'Currently Not Recurring
        .Range("B167").Value = True 'Set Recurring to True
        For MoveBtn = 0 To 32
            Application.Wait Now + 0.000005
            Application.Wait Now + 0.000005
            .Shapes("SwitchFront").IncrementLeft 1
             .Shapes("SwitchFront").Fill.ForeColor.RGB = RGB(184 - (5.75 * MoveBtn), 184 + (1.1875 * MoveBtn), 184 - (4.9375 * MoveBtn))
         Next MoveBtn
         .Shapes("SwitchFront").Left = .Shapes("SwitchBack").Left + 35 'Ensures the switch is in the correct Horizontal position
    End If
    .Shapes("SwitchFront").Top = .Shapes("SwitchBack").Top + 1.5 'Ensures the switch is in the correct vertical position
End With
End Sub

Sub RecurringSave()
Dim RecRow As Long
Dim RecNumb As Long
Dim TempNumb As Long
With Sheet1
If .Range("N4").Value = Empty Then 'Check To Ensure Template
    MsgBox "Please save this as a template before making it recurring"
    Exit Sub
End If

    RecNumb = .Range("B170").Value 'Next Recurring #
    RecRow = Sheet6.Range("A99999").End(xlUp).Row + 1 'First Avail. Recurring Row
    .Range("I168").Value = .Range("B166").Value 'Set Created On To Current Date
    Sheet6.Range("A" & RecRow).Value = RecNumb
    Sheet6.Range("B" & RecRow).Value = .Range("N3").Value 'Template #
    Sheet6.Range("C" & RecRow).Value = .Range("B166").Value 'Set Created On Date
    Sheet6.Range("F" & RecRow).Value = Range("H169").Value 'Add/update Interval
    Sheet6.Range("I" & RecRow).Value = Range("I170").Value 'Add/update Time
    Sheet6.Range("J" & RecRow).Value = "=H" & RecRow & "+I" & RecRow
    Sheet6.Range("K" & RecRow).Value = "=Row()"
    .Range("B168").Value = RecNumb
    .Calculate
End With
End Sub

Sub RecurringCheck()
Dim LastRecurRow As Long
Dim LastResultsRow As Long
Dim ResultsRow As Long
Dim RecurRow As Long
Dim RecurFreq As Long
Dim DateInterval As String
Dim RecurDur As String
Dim SchedDate As Date
Dim NextDate As Date
With Sheet6
    .Range("R4:AM999").ClearContents 'Clear any older results
    LastRecurRow = .Range("A9999").End(xlUp).Row  'Last Recurring row
    If LastRecurRow < 4 Then GoTo NoData
    .Range("A3:K" & LastRecurRow).AdvancedFilter xlFilterCopy, CriteriaRange:=.Range("N3:O4"), CopyToRange:=.Range("R3:AB3"), Unique:=True
    LastResultsRow = .Range("R99999").End(xlUp).Row  'Last Results Row
    If LastResultsRow < 4 Then GoTo NoData
    For ResultsRow = 4 To LastResultsRow
       Sheet1.Range("N3").Value = .Range("S" & ResultsRow).Value 'Add in Template Number
       RunImportMacro
       RecurRow = .Range("AB" & ResultsRow).Value 'Recurring Row
       RecurFreq = .Range("V" & ResultsRow).Value 'Recurring Frequency
       RecurDur = .Range("W" & ResultsRow).Value 'Recurring Duration
       SchedDate = .Range("AA" & ResultsRow).Value 'Scheduled For Date & Time
       Select Case RecurDur
        Case Is = "Day(s)"
            DateInterval = "d"
        Case Is = "Week(s)"
            DateInterval = "ww"
        Case Is = "Month(s)"
            DateInterval = "m"
        Case Is = "Quarter(s)"
            DateInterval = "q"
        Case Is = "Year(s)"
            DateInterval = "yyyy"
       End Select
       
       NextDate = DateAdd(DateInterval, RecurFreq, SchedDate)
       
       .Range("H" & RecurRow).Value = Int(NextDate) 'Add the Next Date ( without the time)
       .Range("G" & RecurRow).Value = Now 'Add in current Date/Time  on Last right
       
       
       
    Next ResultsRow
Exit Sub
NoData:
Sheet1.Range("E47").Value = "No Scheduled Imports Found"
End With
End Sub


Sub testtt()
MsgBox Sheet1.Shapes("SwitchFront").Left
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
If Not Intersect(Target, Range("F2")) Is Nothing And Range("F2").Value <> Empty Then LoadTemplate 'Load template on Change but not on blank

If Not Intersect(Target, Range("I9")) Is Nothing And Range("N6").Value = False Then GetSourceData 'Get Source workbook data on worksheet Change

If Not Intersect(Target, Range("I29")) Is Nothing And Range("N6").Value = False Then GetDestinData 'Get Destination worksheet data on worksheet change

'On Change of Column Format, when Column D is not empty, and not on Mapping load or Template load, then Update Format Validation and Value
If Not Intersect(Target, Range("H64:H163")) Is Nothing And Range("D" & Target.Row).Value <> Empty And Range("B62").Value = False And Range("N6").Value = False Then
    Range("I" & Target.Row).Validation.Delete
  If Range("H" & Target.Row).Value <> "General" Then Range("I" & Target.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=" & Range("H" & Target.Row).Value & "FormatList"
End If

'On Change Of Format, update reformat sample Data
If Not Intersect(Target, Range("I64:I163")) Is Nothing And Range("I" & Target.Row).Value <> Empty Then
    Range("E" & Target.Row, "F" & Target.Row).NumberFormat = Range("I" & Target.Row).Value 'Update Format for sample data
End If

'On Change of 'After Importing Files Action' Display/Hide Select Folder button
If Not Intersect(Target, Range("F11")) Is Nothing And Range("N6").Value = False Then
    If Target.Value = "Move Files To" Then Shapes("MoveToFolderBtn").Visible = msoCTrue Else: Shapes("MoveToFolderBtn").Visible = msoFalse
End If

'On Change of Dynamic Source Field, get List of Sheets from First Matching workbook (when all fields are present)
'If Not Intersect(Target, Range("E10,F10,H10")) Is Nothing And Range("N6").Value = False Then
'
'End If

'On Change Of Recurring Import Details, save in the database, but not on template load
If Not Intersect(Target, Range("G168:G170,H169,I170")) Is Nothing And Range("N6").Value = False Then
    Dim RecurRow As Long
    Dim RecurCol As Long
    If Range("B169").Value = Empty Then RecurringSave 'Save New Recurring Information
    If Range("B169").Value <> Empty And IsNumeric(Cells(Target.Row, Target.Column + 6).Value) = True Then
        RecurRow = Range("B169").Value 'Recurring Row
        RecurCol = Cells(Target.Row, Target.Column + 6).Value
        Sheet6.Cells(RecurRow, RecurCol).Value = Target.Value 'Save Users Change
        If Not Intersect(Target, Range("G170")) Is Nothing And Target.Value <> Empty Then Range("B172").Value = Target.Value ' Update Next Import Data
    End If
End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If Not Intersect(Target, Range("F65:F164")) Is Nothing And Range("D" & Target.Row).Value <> Empty And Target.Count < 2 Then
Range("B1").Value = Target.Row
            If Range("H" & Target.Row).Value = "General" Then 'Text Filter
                Shapes("NumbFiltGrp").Visible = msoFalse
                DataMap_ShowTextFilter 'Display Text Filter Buttons
            Else: 'Number Filter
                Shapes("TextFiltGrp").Visible = msoFalse
                DataMap_ShowNumbFilter 'Display Number Filter Buttons
            End If
Else: 'Other than Filter Selection, hide both groups
    Shapes("NumbFiltGrp").Visible = msoFalse
    Shapes("TextFiltGrp").Visible = msoFalse
    End If
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SourceMacros"
Option Explicit

Sub BrowseForSource()
Dim FileFldr As FileDialog
Dim SourceFilePath As String
Dim SourceWs As Worksheet
Dim SourceWkBk As Workbook
Dim WsRow As Long

With Sheet1
    .Range("A8:A44,F10,H10:J10").ClearContents 'Clear any older source worksheets
    .Range("A65:B165,D65:J165,L65:L165").ClearContents 'Clear Mapping Data
    .Range("E47:I53").ClearContents 'Clear Import Summary Message
    .Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
    .Range("B61").Value = False 'Reset Mapping to 'Incomplete'
    WsRow = 8 'Set Inital Worksheet Row to 8
    Set FileFldr = Application.FileDialog(msoFileDialogFilePicker)
    With FileFldr
        .Title = "Select Source File"
       .Filters.Add "Excel Files", "*.xlsm,*.xlsx,*.xlsb,*.xls"
        If .Show <> -1 Then GoTo NoSelection
        Sheet1.Range("E8").Value = .SelectedItems(1) 'Get Full File Path
    End With
    
    SourceFilePath = .Range("E8").Value 'Long File Path
    .Range("E9").Value = Dir(SourceFilePath, vbDirectory) 'File Name
    On Error Resume Next
    Set SourceWkBk = Workbooks(Dir(SourceFilePath)) 'Set Source Workbook
    On Error GoTo 0
    If SourceWkBk Is Nothing Then 'Workbook Not open yet
        Set SourceWkBk = Workbooks.Open(SourceFilePath) 'Open  & Set Source Workbook
        Workbooks.Open (SourceFilePath)
    End If
On Error Resume Next
    For Each SourceWs In SourceWkBk.Worksheets
        Sheet1.Range("A" & WsRow).Value = SourceWs.Name
        WsRow = WsRow + 1
    Next
On Error GoTo 0
    .Range("I9").Value = .Range("A8").Value 'Set Intial Sheet Name
NoSelection:
End With
End Sub


Sub GetSourceData()
Dim SourceFilePath As String
Dim SourceShtName As String
Dim SourceWkBk As Workbook
Dim ImportWkBk As Workbook
Dim WsRow As Long
Dim FirstRow As Long
Dim TableRow As Long
Dim TableCol As Long
Dim FirstCol As Long
Dim LastRow As Long
Dim LastCol As Long

Set ImportWkBk = ThisWorkbook
With Sheet1
        SourceFilePath = .Range("E8").Value 'Source Workbook File Path
        On Error Resume Next
        Set SourceWkBk = Workbooks(Dir(SourceFilePath)) 'Set Source Workbook
        On Error GoTo 0
        
     If SourceWkBk Is Nothing Then 'Workbook Not open yet
        Set SourceWkBk = Workbooks.Open(SourceFilePath) 'Open  & Set Source Workbook
    End If
        SourceShtName = .Range("I9").Value 'Source Worksheet Name
End With

With SourceWkBk.Sheets(SourceShtName)
        
        'Get Last Row Of Data
        On Error Resume Next
        LastRow = .Cells.Find(What:="*", After:=.Range("A1"), _
        Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False).Row
        'Get Last Column Of Data
         LastCol = .Cells.Find(What:="*", After:=.Range("A1"), _
         Lookat:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByColumns, SearchDirection:=xlPrevious, MatchCase:=False).Column
        On Error GoTo 0
            
            'Determine First Row Of Table w/ 70% of the cells filled
        For TableRow = 1 To LastRow
            If (Application.WorksheetFunction.CountA(Range(.Cells(TableRow, 1), .Cells(TableRow, LastCol))) / LastCol) >= 0.7 Then
                FirstRow = TableRow
                Exit For
            End If
        Next TableRow
        
            'Determine First Column Of Table w/ 50% of the cells filled
        For TableCol = 1 To LastCol
            If (Application.WorksheetFunction.CountA(Range(.Cells(1, TableCol), .Cells(LastRow, TableCol))) / LastRow) >= 0.5 Then
                FirstCol = TableCol
                Exit For
            End If
        Next TableCol

End With

If Sheet1.Range("A6").Value = True Then FirstRow = FirstRow + 1

    Sheet1.Range("F12").Value = FirstRow 'Set First Row Of Source Data
    Sheet1.Range("I12").Value = LastRow 'Set Last Row Of Source Data
    Sheet1.Range("F13").Value = FirstCol 'Set First Column Of Source Data
    Sheet1.Range("I13").Value = LastCol 'Set Last Column Of Source Source Data
    
    
ImportWkBk.Activate
Exit Sub
MissingWorkbook:
MsgBox "Please check for a correct Source Workbook"
End Sub

Sub DynamicSource()
With Sheet1
    .Range("N6").Value = True 'Set Template Load to True
    .Range("E8:I8,E9:F9,I9:J9,E10,F10,H10:J11,F11,F12:F13,I12:J12,I13,A8:A44").ClearContents 'Clear any older Source Data
     .Range("N6").Value = False 'Set Template Load to False
    If .Range("B2").Value = False Then  'Static Source
        .Shapes("SelectSourceBtn").Visible = msoCTrue
        .Shapes("SelectFolderBtn").Visible = msoFalse
        .Shapes("MoveToFolderBtn").Visible = msoFalse
    Else: ' Dynamic Source
        .Shapes("SelectSourceBtn").Visible = msoFalse
        .Shapes("SelectFolderBtn").Visible = msoCTrue
        'Display/Hide Move To Folder Button based on user selection
        If .Range("F11").Value = "Move Files To" Then .Shapes("MoveToFolderBtn").Visible = msoCTrue Else .Shapes("MoveToFolderBtn").Visible = msoFalse
    End If
End With
End Sub

Sub BrowseDynamicSourceFolder()
Dim DynSourceFold As FileDialog
Set DynSourceFold = Application.FileDialog(msoFileDialogFolderPicker)
With DynSourceFold
    .Title = "Select A Source Folder"
      If .Show <> -1 Then GoTo NoSelection
    Sheet1.Range("H10").Value = .SelectedItems(1) 'Get Full FolderPath
End With
NoSelection:
End Sub

Sub BrowseMoveFilesToFolder()
Dim DynSourceFold As FileDialog
Set DynSourceFold = Application.FileDialog(msoFileDialogFolderPicker)
With DynSourceFold
    .Title = "Select A Folder To Move Files After Import    "
      If .Show <> -1 Then GoTo NoSelection
    Sheet1.Range("H11").Value = .SelectedItems(1) 'Get Full FolderPath
End With
NoSelection:
End Sub



Attribute VB_Name = "TabMacros"
Option Explicit

Sub ImportStep1()
Attribute ImportStep1.VB_ProcData.VB_Invoke_Func = " \n14"
StopCalc 'Import Step 1
ResetHideSteps
Sheet1.Shapes("Step1").Fill.ForeColor.RGB = RGB(51, 204, 255)
Sheet1.Shapes("Step1").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
Sheet1.Range("5:22").EntireRow.Hidden = False
Sheet1.Shapes("Step1Grp").Visible = msoCTrue
ResetCalc
End Sub

Sub ImportStep2()
StopCalc 'Import Step 2
ResetHideSteps
Sheet1.Range("23:40").EntireRow.Hidden = False
Sheet1.Shapes("Step2").Fill.ForeColor.RGB = RGB(51, 204, 255)
Sheet1.Shapes("Step2").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
Sheet1.Shapes("Step2Grp").Visible = msoCTrue
ResetCalc
End Sub

Sub ImportStep3()
StopCalc 'Import Step 3
ResetHideSteps
Sheet1.Range("59:95").EntireRow.Hidden = False
Sheet1.Shapes("Step3").Fill.ForeColor.RGB = RGB(51, 204, 255)
Sheet1.Shapes("Step3").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
Sheet1.Shapes("Step3Grp").Visible = msoCTrue
ResetCalc
End Sub

Sub ImportStep4()
StopCalc 'Import Step 4
ResetHideSteps
Sheet1.Range("41:58,166:177").EntireRow.Hidden = False
Sheet1.Shapes("Step4").Fill.ForeColor.RGB = RGB(51, 204, 255)
Sheet1.Shapes("Step4").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
Sheet1.Shapes("Step4Grp").Visible = msoCTrue
Sheet1.Shapes("SwitchBack").Visible = msoCTrue
Sheet1.Shapes("SwitchFront").Visible = msoCTrue
With Sheet1
    If .Range("B167").Value = True Then 'Currently Recurring
         .Shapes("SwitchFront").Left = .Shapes("SwitchBack").Left + 35 'Ensures the switch is in the correct Horizontal position
    Else: 'Currently Not Recurring
        .Shapes("SwitchFront").Left = .Shapes("SwitchBack").Left + 1.5 'Ensures the switch is in the correct Horizontal position
    End If
    .Shapes("SwitchFront").Top = .Shapes("SwitchBack").Top + 1.5 'Ensures the switch is in the correct vertical position
End With
ResetCalc
End Sub

Sub ResetHideSteps()
With Sheet1 'Hide All Shapes & Rows
.Range("5:177").EntireRow.Hidden = True
.Shapes.Range(Array("ButtonSet")).Fill.ForeColor.RGB = RGB(21, 51, 87)
.Shapes.Range(Array("ButtonSet")).TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
.Shapes("Step1Grp").Visible = msoFalse
.Shapes("Step2Grp").Visible = msoFalse
.Shapes("Step3Grp").Visible = msoFalse
.Shapes("Step4Grp").Visible = msoFalse
.Shapes("SwitchBack").Visible = msoFalse
.Shapes("SwitchFront").Visible = msoFalse
End With
End Sub
Attribute VB_Name = "TemplateMacros"
Option Explicit

Sub SaveUpdateTemplate()
Dim TempNumb As Long
Dim TempRow As Long
Dim TempCol As Long
Dim LastMapRow As Long
Dim MapRow As Long
Dim MapCol As Long
Dim MapDataRow As Long

If Sheet1.Range("F2").Value = Empty Then
    MsgBox "Please make sure to add a Template Name"
    Sheet1.Range("F2").Select
    Exit Sub
End If

With Sheet2 ' Template Data Sheet
    'Determine if New or Existing Template
    If Sheet1.Range("N4").Value = Empty Then 'New Template
        TempRow = .Range("A9999").End(xlUp).Row + 1  'First Avail. Template Row
        .Range("A" & TempRow).Value = Sheet1.Range("N5").Value 'New Template #
        Sheet1.Range("N3").Value = .Range("A" & TempRow).Value 'Add in New Template Number
    Else: 'Existnig Template
        TempRow = Sheet1.Range("N4").Value
    End If
    TempNumb = .Range("A" & TempRow).Value 'Assign template #
    
    For TempCol = 2 To 28
    .Cells(TempRow, TempCol).Value = Sheet1.Range(.Cells(1, TempCol).Value).Value 'Save Value
    Next TempCol
End With

'Save / Update Data Mapping
With Sheet1
        LastMapRow = .Range("D164").End(xlUp).Row  'Last MapRow
        If LastMapRow < 65 Then GoTo NoMapData
        For MapRow = 65 To LastMapRow
                If .Range("K" & MapRow).Value = Empty Then 'New Map Data Row
                    MapDataRow = Sheet5.Range("A999999").End(xlUp).Row + 1  'First Available Data Map Row
                    .Range("K" & MapRow).Value = MapDataRow  'Add New Map Row
                    Sheet5.Range("A" & MapDataRow).Value = TempNumb 'Add in Template #
                    Sheet5.Range("H" & MapDataRow).Value = "=Row()"
                Else: 'Existing Map Data Row
                    MapDataRow = .Range("K" & MapRow).Value
                End If
                
                For MapCol = 4 To 9
                    Sheet5.Cells(MapDataRow, MapCol - 2).Value = .Cells(MapRow, MapCol).Value 'Add In Mapped Data
                Next MapCol
                Sheet5.Range("I" & MapDataRow).Value = .Range("L" & MapRow).Value 'Copy Over Cell Format Formula
                Sheet5.Range("J" & MapDataRow).Value = MapRow
                Sheet5.Range("K" & MapDataRow & ":L" & MapDataRow).Value = .Range("A" & MapRow & ":B" & MapRow).Value
        Next MapRow
NoMapData:
.Shapes("SaveTempBtn").Visible = msoFalse
.Shapes("ExistTempGrp").Visible = msoCTrue
End With
Temp_SavedMess
End Sub

Sub ClearTemplate_Load()
With Sheet1
    .Range("N6").Value = True 'Set Template Load To True
    .Range("E8:I8,E9:F9,I9:J9,E10,F10,H10:J11,F11,F12:F13,I12:J12,I13,A8:A44,N3").ClearContents 'Clear any older Source Data
    .Range("E28:J28,E29:F29,I29:J29,I30:J30,F31:F33,I31:J31,J32,B8:B44").ClearContents 'Clear Any Destination Data
    .Range("A65:B165,D65:L165").ClearContents 'Clear Mapping Data
    .Range("E47:I53,B168,G168:G170,I168,B168,B172,B174").ClearContents 'Clear Import Summary Message & Recurring Details
    .Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
    .Range("B61").Value = False 'Reset Mapping to 'Incomplete'
    .Range("B2").Value = False 'Default to Static Source
    .Range("B4").Value = 1 'Set Default Resource to Existing Workbook
    .Range("A6,B6").Value = True 'Set Default to Source & Destination Data To: Has Headers
    .Range("N6").Value = False 'Set Template Load To False
    .Shapes("SaveTempBtn").Visible = msoCTrue
    .Shapes("ExistTempGrp").Visible = msoFalse
    ImportStep1 'Go To Step 1
End With
End Sub

Sub ClearTemplate()
With Sheet1
    .Range("N6").Value = True 'Set Template Load To True
    .Range("E8:I8,E9:F9,I9:J9,E10,F10,H10:J11,F11,F12:F13,I12:J12,I13,A8:A44,N3,F2").ClearContents 'Clear any older Source Data
    .Range("E28:J28,E29:F29,I29:J29,I30:J30,F31:F33,I31:J31,J32,B8:B44").ClearContents 'Clear Any Destination Data
    .Range("A65:B165,D65:L165").ClearContents 'Clear Mapping Data
    .Range("E47:I53,B168,G168:G170,I168,B168,B172,B174").ClearContents 'Clear Import Summary Message & Recurring Details
    .Range("I65:J165").Validation.Delete 'Delete any existing Data Validation
    .Range("B61").Value = False 'Reset Mapping to 'Incomplete'
    .Range("B2").Value = False 'Default to Static Source
    .Range("B4").Value = 1 'Set Default Resource to Existing Workbook
    .Range("A6,B6").Value = True 'Set Default to Source & Destination Data To: Has Headers
    .Range("N6").Value = False 'Set Template Load To False
    .Shapes("SaveTempBtn").Visible = msoCTrue
    .Shapes("ExistTempGrp").Visible = msoFalse
    ImportStep1 'Go To Step 1
End With
End Sub


Sub DeleteTemplate()
Dim TempRow As Long
Dim TempNumb As Long
Dim DataMapRow As Long
Dim DatabaseMapRow As Long
Dim LastDataMapRow As Long
Dim LastDataMapResultsRow As Long
Dim DataMapDatabaseRow As Long

If MsgBox("Are you sure you want to delete this template?", vbYesNo, "Delete Template") = vbNo Then Exit Sub
With Sheet1
        If .Range("N4").Value = Empty Or .Range("N3").Value = Empty Then Exit Sub  'Ensure there is a Template Row and Template Number
        TempNumb = .Range("N3").Value 'Template Number
        TempRow = .Range("N4").Value 'Template Row
        Sheet2.Range(TempRow & ":" & TempRow).EntireRow.Delete
End With

With Sheet5 'Remove Data Mapping Database Rows
    'Load Data Mapping
    LastDataMapRow = .Range("A99999").End(xlUp).Row  'Last Data Map Row
    If LastDataMapRow < 3 Then GoTo NoMapData
    .Range("AC3:AN999").ClearContents 'Clear Previous values
    .Range("AA3").Value = TempNumb 'Template #
    .Range("A2:L" & LastDataMapRow).AdvancedFilter xlFilterCopy, CriteriaRange:=.Range("AA2:AA3"), CopyToRange:=.Range("AC2:AN2"), Unique:=False
    LastDataMapResultsRow = .Range("AC999").End(xlUp).Row  'Last Results Row
    If LastDataMapResultsRow < 3 Then GoTo NoMapData

    
    For DataMapRow = 3 To LastDataMapResultsRow
            DatabaseMapRow = Sheet5.Range("AJ" & DataMapRow).Value 'Original Database Map Row
            If DatabaseMapRow = 0 Then GoTo NextMapRow
            Sheet5.Range("A" & DatabaseMapRow & ":L" & DatabaseMapRow).ClearContents
NextMapRow:
        Next DataMapRow
        
'Resort Main List to remove cleared out rows
    .Sort.SortFields.Clear
    With .Sort
            .SortFields.Add Key:=Sheet5.Range("A2"), Order:=xlAscending
            .SetRange Sheet5.Range("A2:L" & LastDataMapRow)
            .Header = xlYes
            .Apply
    End With
NoMapData:
End With
ClearTemplate
Temp_DeletedMess
End Sub

Sub LoadTemplate()
Dim TempRow As Long
Dim TempCol As Long
Dim MapRow As Long
Dim DataMapRow As Long
Dim DatabaseMapRow As Long
Dim LastDataMapRow As Long
Dim LastDataMapResultsRow As Long
Dim RecRow As Long
Dim RecCol As Long


ClearTemplate_Load
With Sheet1
    If .Range("N7").Value = Empty Then
        MsgBox "Please select a correct tempate"
        Exit Sub 'Name not found, perhaps user is entering a new template
    End If
    .Range("N6").Value = True 'Set Template Load To True
    TempRow = .Range("N7").Value
    .Range("N3").Value = Sheet2.Range("A" & TempRow).Value 'Template #
    For TempCol = 1 To 28
            If TempCol = 2 Then GoTo SkipName
            .Range(Sheet2.Cells(1, TempCol).Value).Value = Sheet2.Cells(TempRow, TempCol).Value 'Add Template Values
SkipName:
    Next TempCol
    
'Load Data Mapping
LastDataMapRow = Sheet5.Range("A99999").End(xlUp).Row  'Last Data Map Row
If LastDataMapRow < 3 Then GoTo NoMapData
Sheet5.Range("AC3:AN999").ClearContents 'Clear Previous results
Sheet5.Range("AA3").Value = Sheet2.Range("A" & TempRow).Value 'Template #
Sheet5.Range("A2:L" & LastDataMapRow).AdvancedFilter xlFilterCopy, CriteriaRange:=Sheet5.Range("AA2:AA3"), CopyToRange:=Sheet5.Range("AC2:AN2"), Unique:=False
LastDataMapResultsRow = Sheet5.Range("AC999").End(xlUp).Row  'Last Results Row
If LastDataMapResultsRow < 3 Then GoTo NoMapData

For DataMapRow = 3 To LastDataMapResultsRow
    MapRow = Sheet5.Range("AL" & DataMapRow).Value 'Mapping Row
    DatabaseMapRow = Sheet5.Range("AJ" & DataMapRow).Value 'Original Database Map Row
    If MapRow = 0 Then GoTo NextMapRow
    .Range("D" & MapRow & ":I" & MapRow).Value = Sheet5.Range("AD" & DataMapRow & ":AI" & DataMapRow).Value ' First 6 Columns
    .Range("K" & MapRow & ":L" & MapRow).Value = Sheet5.Range("AJ" & DataMapRow & ":AK" & DataMapRow).Value ' Datbase Row
    .Range("A" & MapRow & ":B" & MapRow).Value = Sheet5.Range("AM" & DataMapRow & ":AN" & DataMapRow).Value ' Source Column Info
NextMapRow:
Next DataMapRow

.Range("B61").Value = True 'Set Mapping Complete to True
NoMapData:

'Check For Recurring Import Details
If .Range("B173").Value <> Empty Then 'Recurring Import Found
    .Range("B167").Value = False 'Set Recurring to False (when switch macro is run it will go to true)
    RecRow = .Range("B173").Value
    For RecCol = 1 To 9
        .Range(Sheet6.Cells(1, RecCol).Value).Value = Sheet6.Cells(RecRow, RecCol).Value 'Bring over recurring details
    Next RecCol
Else: 'Recurring Import Not Found
.Range("B167").Value = True '(when switch macro is run it will go to False)
End If
RecurringSwitch 'Run Recurring Swtich Macro

    .Range("N6").Value = False 'Set Template Load To False
    .Shapes("SaveTempBtn").Visible = msoFalse
    .Shapes("ExistTempGrp").Visible = msoCTrue
    
End With
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
'RecurringCheck 'Uncomment this out when you are ready to run this workbook on open
End Sub


INQUEST-PP=macro
