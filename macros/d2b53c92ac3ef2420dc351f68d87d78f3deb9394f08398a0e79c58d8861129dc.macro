Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "frmDatePicker"
Attribute VB_Base = "0{70FFD8C1-CA09-4EDD-BD93-5D936453017E}{B0386686-4ED0-44C5-AD2F-5FC6678E115F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'Purpose: This self-contained calendar is primarily designed as a replacement for Microsoft's DTPicker\Month View controls.
         'You can export and import this form module into any VBA project to use as a substitute for the DTPicker or Month view controls.
         'It can also be used in any project requiring a calendar.

         
'CREDIT: frmDatePicker is an adaptation of "CalendarForm" developed by Trevor Eyre (trevoreyre@gmail.com)
        'While I have added several additional customization options, made extensive changes to the code style, comments and methods for
        'rendering the calendar; my changes are primarily cosmetic (i.e., how today's date, restricted dates appear). For the most part,
        'Trevor's calendar is functionally unchanged.
        
        'I have provided Trevor this form module, an outline of the changes and feedback on a few minor coding errors in his original form.
        'Trevor deserves ALL credit for developing the initial processes and form.

'Public and private module level variables.
#If VBA7 And Win64 Then
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" ( _
                                    ByVal lpClassName As String, _
                                    ByVal lpWindowName As String) As Long

Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" ( _
                                 ByVal hwnd As LongPtr, _
                                 ByVal nIndex As Long) As Long

Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" ( _
                                 ByVal hwnd As LongPtr, _
                                 ByVal nIndex As Long, _
                                 ByVal dwNewLong As Long) As Long

Private Declare PtrSafe Function DrawMenuBar Lib "User32" (ByVal hwd As LongPtr) As Long
#Else
  Private Declare Function FindWindow Lib "User32" Alias "FindWindowA" ( _
                                    ByVal lpClassName As String, _
                                    ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLong Lib "User32" Alias "GetWindowLongA" ( _
                                       ByVal hwnd As Long, _
                                       ByVal nIndex As Long) As Long

Private Declare Function SetWindowLong Lib "User32" Alias "SetWindowLongA" ( _
                                       ByVal hwnd As Long, _
                                       ByVal nIndex As Long, _
                                       ByVal dwNewLong As Long) As Long
Private Declare Function DrawMenuBar Lib "User32" (ByVal hwnd As Long) As Long
#End If



Public Enum calWeekStartDOW
  'Used to set the calendar week start DOW (day of the week). Public makes the enumeration available to external calling procedures.
  Sunday = 1 'This is the default.
  Monday = 2
  Tuesday = 3
  Wednesday = 4
  Thursday = 5
  Friday = 6
  Saturday = 7
End Enum

Public Enum calFWOY '
  'Used to set and define how the first week of the year is calculated and displayed.
  FirstJan1 = 1       'The week with January 1st is always counted as week 1.  This is the default.
  FirstFourDays = 2   'The first week in January that has at least four days in it is counted as week 1.
                      'This calculation will change depending on the setting used for first day of the week.
                      'Note - The ISO standard is calculating week 1 as the first week in January with four days with Monday being the first day of the week.
  FirstFullWeek = 3   'The first week in January with a full week is counted as week 1.
                      'Like the FirstFourDays setting, this calculation will change depending on the first day of the week used.
End Enum

'General module level variables:
Private m_bUserFormEventsEnabled As Boolean    'Controls userform events
Private m_bAbbreviateMonths                    'Show abbreviated month labels in calendar heading. Default (False)
Private m_lngComboYearMin As Long              'Current lower bound of year combobox. Not necessarily restricted to this min
Private m_lngComboYearMax As Long              'Current upper bound of year combobox. Not necessarily restricted to this max
Private m_dblRatioToResize As Double           'Ratio to resize elements of userform. This is set by the lngDateFontSize argument in the GetDate function
Private m_strHoverControlName As String        'Name of the date label that is currently being hovered over.
                                               'Used when returning the hovered control to its original color
Private m_BorderSpacing As Double              'Padding between the outermost elements of userform and edge of userform
Private m_lngHoverControlColor As Long         'Original color of the date label that is currently being hovered over
                                           
'Module level variables associated with GetDate parameters and arguments pased by user:
Private m_varDateToPick_Picked                 'The date to initially pick in calendar and ultimately the date actually picked/returned.
                                               'and the date picked by the user if the OK button is enabled
Private m_bOKShow As Boolean                   'Show\hide OK button
Private m_bTodayShow As Boolean                'Show\hide Today button
Private m_bCancelShow As Boolean               'Show\hide Cancel button
Private m_vbStartDayOfWeek As VbDayOfWeek      'Weekday (e.g., Sunday, Monday) to show as date column one in calendar
Private m_vbWeekOneOfYear As VbFirstWeekOfYear 'Determines how first week of year is calculated
Private m_bShowWeekNumbers As Boolean          'Show\hide calculated week numbers associated with calendar date rows
Private m_bShowWkSepLine As Boolean            'Show\hie a separator line between week and date labels
Private m_varMinDate                           'Minimum date value
Private m_varMaxDate                           'Maximum date value
Private m_lngRangeOfYears As Long              'Sets the span of the year combobox year listing
Private m_lngTop As Long                       'Calendar position top
Private m_lngLeft As Long                      'Calendar position left
Private m_strCaption As String                 'frmDatePicker Caption string (default or defined by user)
Private m_lngDateFontSize As Long              'Sets font size of calendar date labels (determines sizing for all other calendar elements)
Private m_strFontName As String                'Sets the font used to render the calendar
Private m_bDateBorder As Boolean               'Show\hide date background borders
Private m_lngDateSpecialEffect As Long         'Sets date background effects.
Private m_lngTodayBGBorder As Long             'Show\hide today's date backgound border.
Private m_bColorButtons                        'Apply header BG color/Header font color to buttons
Private m_bButtonColorsNegative As Boolean     'Show colored buttons in a negative theme
Private m_bRestrictedStrikeThrough As Boolean  'Show restricted dates with stikethough
'Color variables
Private m_lngFrmBackcolor As Long              'frmDatePicker background color
Private m_lngHeaderColor As Long               'Calendar header background color (Month/Year)
Private m_lngHeaderFontColor As Long           'Calendar header font color (Month/Year
Private m_lngSubHeaderColor As Long            'Calendar subheader background color (Week/Day of Week/Week Numbers)
Private m_lngSubHeaderFontColor As Long        'Calendar subheader font color (Week/Day of Week/Week numbers)
Private m_lngDateBGColor As Long               'Color of date label backgrounds
Private m_lngDateLabelColor As Long            'Font color of date labels
Private m_lngDateSatLabelColor As Long         'Font color of Saturday date labels
Private m_lngDateSunLabelColor As Long         'Font color of Sunday date labels
Private m_lngAdjacentMonthLabelColor As Long   'Font color of adjacent month date labels
Private m_lngDateBorderColor As Long           'Color of date background borders
Private m_lngRestrictedBackDateColor As Long   'Color of restricted date background
Private m_lngDatePickedBGColor As Long         'Color of picked date label background
Private m_lngDatePickedLabelBGColor As Long    'Color of the picked date label font
Private m_lngTodayBackDateColor As Long        'Color or today's date background
Private m_lngDateTodayLabelColor As Long       'Font color of today's date
Private m_lngBackDateHoverColor As Long        'Color of date label backgrounds when hovering over
Private m_ShowTitleBar As Boolean              'Show or hide the native userform title bar
Public Function GetDate(Optional dateToPick As String, Optional OKButton As Boolean = False, Optional TodayButton As Boolean = False, _
                        Optional CancelButton As Boolean = False, _
                        Optional StartDayOfWeek As calWeekStartDOW = Sunday, Optional FirstWeekOfYear As calFWOY = FirstJan1, _
                        Optional ShowWeekNumbers As Boolean = False, Optional ShowSepLine As Boolean = True, _
                        Optional MinimumDate As Date = "1/1/100", Optional MaximumDate As Date = "12/31/2915", _
                        Optional RangeOfYears As Long = 10, Optional PositionTop As Long = -5, _
                        Optional PositionLeft As Long = -5, Optional CustomCaption As String = "Pick a date", _
                        Optional DateFontSize As Long = 9, Optional FontName As String = "Calibri", _
                        Optional DateBorder As fmBorderStyle = fmBorderStyleNone, _
                        Optional DateSpecialEffect As fmSpecialEffect = fmSpecialEffectFlat, _
                        Optional TodayBGBorderStyle As fmBorderStyle = fmBorderStyleNone, _
                        Optional ColorButtons As Boolean = True, Optional NegativeButtons As Boolean = False, _
                        Optional RestrictedDateStrikeThrough As Boolean = True, Optional BackgroundColor As Long = 16777215, _
                        Optional HeaderColor As Long = 15658734, Optional HeaderFontColor As Long = 0, _
                        Optional SubHeaderColor As Long = 16448250, Optional SubHeaderFontColor As Long = 8553090, _
                        Optional DateBackgroundColor As Long = 16777215, Optional DateFontColor As Long = 0, _
                        Optional SaturdayFontColor As Long = 0, Optional SundayFontColor As Long = 0, _
                        Optional AdjacentMonthDateLabelFontColor As Long = 12566463, Optional DateBorderColor As Long = 15658734, _
                        Optional RestrictedDateBGColor As Long = 14408187, Optional TodayFontColor As Long = wdColorBlack, _
                        Optional TodayBGShading As Long = 12189695, Optional DatePickedBGColor As Long = 14277081, _
                        Optional DatePickedLabelColor As Long = 0, Optional DateHoverColor As Long = 15658734, _
                        Optional DateFormat As String = "MMMM d, yyyy", Optional ReturnDateString As Boolean = True, _
                        Optional ShowTitleBar As Boolean = True) As Variant

'This function is the point of entry into the frmDatePicker. It recieves optional arguments from the user's call and
'returns a null string, date string or date depending on user action.
'Every argument is optional, meaning your function call can be as simple as:
   
   'MsgBox frmDatePicker.GetDate

'That's all there is to it. The calendar initializes, pops up, and the user picks a date.
'The user action (picked date) is assigned to the variable, and the calendar unloads.

'From there, you can use as many or as few of the optional paremeters as you want in order to display a calendar to suit your needs.
'For example to increase the calendar font size:

   'MsgBox frmDatePicker.GetDate(DateFontSize:=12)

'Most default values are defined in the listed parameters above,
'e.g., Optional DateFontSize As Long = 9, _
'Optional DateBorder As fmBorderStyle = fmBorderStyleNone
'So if you always want your calendar date font size set to 12 then simply change the
'parameter e.g., Optional DateFontSize As Long = 12,
'If you always want your calendar to diplays borders then change the
'parameter e.g., Optional DateBorder As fmBorderStyle = fmBorderStyleSingle
   
   'MsgBox frmDatePicker.GetDate 'Now displays a calendar with font size set at 12.

'Below is a list of all parameters, their data type, and their function:

' -DateToPick (String) - Determines the initial date picked on the Date Picker form.
     'If a DateToPick argument is passed the calendar initializes to and picks the year, month and day passed.
     'If not, the calendar initialize to and displays the current year, month and day.  The current date is highlighted, but NOT picked.
' -OKButton (Boolean) - Determines if OK button is displayed.  Default (False).
     'When false a picked date (date clicked by user) is automatically returned by the GetDate function and the calendar closes.
     'If True, the OK button is disabled until a date is picked (either intially by passing a date to the DateToPick parameter or by user clicking a date).
     'When the OK button is enabled and clicked by the user, the picked date is returned by the GetDate function and the calendar closed.
' -TodayButton (Boolean) - Determines if Today button is displayed. Default (False)
     'If True and OKButton True, clicking the Today button picks the current year month, and day.
     'If TRUE and OKButton False, clicking the Today button the current year, month and day is automatically returned bty the GetDate function and the
     'calendar closeds.
' -CancelButton (Boolean) - Determines if Cancel button is displayed. Default (False)
' -StartDayOfWeek (calWeekStartDOW) - Determines which day to use as first day of the week. (Default Sunday)
' -FirstWeekOfYear (calFWOY) - Determines how first week of the calendar year is calculated adn display. Default (FirstJanFirst)
     'See the calFWOY Enum in the Global Variables section to see the possible values and their behavior.
' -ShowWeekNumbers (Boolean) - Deteremines if week numbers are calculated and displayed. (Default False)
' -ShowSepLine (Boolean) - Shows a separator line between week numbers and date labels when week numbers are displayed. (Default True)
' -MinimumDate (Date) - Sets calendar lower limit and prevents picking any date before this date. Default (1\1\100)
     'This value appears to be the lower limit with VBA as 1\1\99 automatically resolves to 1\1\1999
' -MaximumDate (Date) - Sets calendar upper limit and prevents picking any date after this date. Default (12/31/2915) '900 years seemed adequate.
' -RangeOfYears (Long) - Sets the range of years to show in the year combobox in either direction from the initial DateToPick.
     'For example, if the DateToPick is in 2014, and the RangeOfYears is set to 10 (the default value),
     'the year combobox will show 10 years before and 10 years after 2014 (i.e., 2004-2024).
     'Note that if this range falls outside the bounds set by the MinimumDate or MaximumDate, it will be overridden.
     'Also, this range does NOT limit the date that a user can pick. If the upper limit of the year combobox is 2024,
     'and the user clicks the month spinner to surpass December 2024, it will keep right on going to 2025 and beyond
     '(and those years will be added to the year combobox).
' -PositionTop (Long) - Sets the top position of the frmDatePicker.
     'If no value is assigned, the frmDatePicker is set to position 1 - CenterOwner.
     'Note that PositionTop and PositionLeft must BOTH be set in order to override the default center position.
' -PositionLeft (Long) - Sets the left position of the frmDatePicker.
     'If no value is assigned, the frmDatePicker is set to position 1 - CenterOwner.
     'Note that PositionTop and PositionLeft must BOTH be set in order to override the default center position.
' -CustomCaption (String) - Display custom caption on calendar (Default "Pick a date")
' -DateFontSize (Long) - Sets the font size of calendar date labels. Default (9)
     'Used with form base font size to calculate and resize all other form controls proportionally.
     'Minimum value/6. Maximum value/30.
' -FontName (String) - Setes font used to format calendar controls. Default (Calibri)
' -DateBorder (fmBorderStyle) - Show\Hide borders. (Default fmBordeStyleNone)
' -DateSpecialEffect (fmSpecialEffect) - Sets a special effect for the date labels. (Default fmSpecialEffectNone)
     'This can be set to bump, etched, flat (default value), raised, or sunken.
     'This can be used to make the date labels look like buttons if you desire.
     'Note ***:  Date borders and special effects should be used exclusively of each other.  If you use borders, don't use effects.
' -TodayBGBorderStyle (fmBorderStyle) - Show\hide border. Default(fmBorderStyle)
' -ColorButtons (Boolean) - Colors button controls with scheme used in headers. Default (True)
' -NegativeButtons (Boolean) - Reverses scrollbutton forecolor/backcolor. (Default False)
' -RestrictedDateStrikeThrough (Boolean) - Strike through restricted date labels (Default True)
' -BackgroundColor (Long) - Sets the background color of the frmDatePicker.
' -HeaderColor (Long) - Sets the background color of the header. The header is the month and year label at the top.
' -HeaderFontColor (Long) - Sets the color of the header font.
' -SubHeaderColor (Long) - Sets the background color of the subheader. The subheader is the day of week labels under the header (Su, Mo, Tu, etc).
' -DateBackgroundColor (Long) - Sets the background color of the individual date labels.
' -DateFontColor (Long) - Sets the font color of the individual date labels.
' -SaturdayFontColor (Long) - Sets the font color of Saturday date labels.
' -SundayFontColor (Long) - Sets the font color of Sunday date labels.
' -AdjacentMonthDateLabelFontColor (Long) - Sets the color of the date labels in adjacent months.
     'Adjacent months are the date labels from last month at the top of the calendar and from next month at the bottom of the calendar.
' -DateBorderColor (Long) - Sets the color of the date label borders.
' -RestrictedDateBGColor (Long) - Set teh color of the retricted date (outside min/max date range) date labels.
' -DateHoverColor (Long) - Sets the background color when hovering the mouse over a date label.
' -DatePickedBGColor (Long) - Sets the background color of the Picked date.
' -TodayFontColor (Long) - Sets the font color of today's date.
' -TodayBGShading (Long) - Sets the color of Today's date background
' -TodayBGBorderStyle (Long) - Set the border style of Today's date background.
' -PickedDateLabelColor (Long) 'Defines color applied to the picked date label
' -DateFormat used to set the format of the output date string. (Default "MMMM d, yyyy")
' -ReturnDateString (Boolean) - GetDate returns a string variable or date variable (Default True)
' -ShowTitleBar (Boolean) - Shows or hides the native userform titlebar
  'Initialize module level variables. These variables are used in other procedures in this module.
  m_bUserFormEventsEnabled = False
  
  m_varDateToPick_Picked = dateToPick
  m_bOKShow = OKButton
  m_bTodayShow = TodayButton
  m_bCancelShow = CancelButton
  m_vbStartDayOfWeek = StartDayOfWeek
  m_vbWeekOneOfYear = FirstWeekOfYear
  m_bShowWeekNumbers = ShowWeekNumbers
  m_bShowWkSepLine = ShowSepLine
  m_varMinDate = DateValue(MinimumDate)
  m_varMaxDate = DateValue(MaximumDate)
  m_lngRangeOfYears = RangeOfYears
  m_lngTop = PositionTop
  m_lngLeft = PositionLeft
  m_strCaption = CustomCaption
  m_lngDateFontSize = DateFontSize
  m_strFontName = FontName
  m_bDateBorder = DateBorder
  m_lngDateSpecialEffect = DateSpecialEffect
  m_lngTodayBGBorder = TodayBGBorderStyle
  m_bColorButtons = ColorButtons
  m_bButtonColorsNegative = NegativeButtons
  m_bRestrictedStrikeThrough = RestrictedDateStrikeThrough
  m_lngFrmBackcolor = BackgroundColor
  m_lngHeaderColor = HeaderColor
  m_lngHeaderFontColor = HeaderFontColor
  m_lngSubHeaderColor = SubHeaderColor
  m_lngSubHeaderFontColor = SubHeaderFontColor
  m_lngDateBGColor = DateBackgroundColor
  m_lngDateLabelColor = DateFontColor
  m_lngDateSatLabelColor = SaturdayFontColor
  m_lngDateSunLabelColor = SundayFontColor
  m_lngAdjacentMonthLabelColor = AdjacentMonthDateLabelFontColor
  m_lngDateBorderColor = DateBorderColor
  m_lngRestrictedBackDateColor = RestrictedDateBGColor
  m_lngDateTodayLabelColor = TodayFontColor
  m_lngTodayBackDateColor = TodayBGShading
  m_lngDatePickedBGColor = DatePickedBGColor
  m_lngDatePickedLabelBGColor = DatePickedLabelColor
  m_lngBackDateHoverColor = DateHoverColor
  m_ShowTitleBar = ShowTitleBar
  On Error GoTo Err_Handler
  'Configure the user form for dispaly based on parameters.
Err_Reentry:
  SetUpAdnSizeUserForm
  'Enabled user form events (e.g., combobox changes etc.)
  m_bUserFormEventsEnabled = True
  Show
  If CStr(m_varDateToPick_Picked) = "7/5/1776 10:45:15 AM" Then
    'Value returned if user clicks "X" to cancel. Note - See code in UserForm_QueryClose event.
    GetDate = vbNullString
  Else
    If ReturnDateString Then
      'Return formatted date string.
      GetDate = Format(m_varDateToPick_Picked, DateFormat)
    Else
      'Return date.
      GetDate = CDate(m_varDateToPick_Picked)
    End If
  End If
  Unload Me
lbl_Exit:
  Exit Function
Err_Handler:
  Select Case Err.Number
    Case 13: m_varDateToPick_Picked = CStr(DateValue(Now))
      Resume Err_Reentry
    Case Else
      MsgBox Err.Number & " " & Err.Description
      Resume lbl_Exit
  End Select
End Function

Private Sub SetUpAdnSizeUserForm()
'Called only once when the form loads, this procedure initializes, formats and sets the size and position of every element on the userform.

'Note - The SetDays procedure finalizes the userform width\height and Week\Date row 6 button visibility as determined by the
'number of adjacent month days (e.g., next month days).  Row six is suppressed in row five displays one or more adjacent month days.

Dim lngBaseFontSize As Long           'Base and default font size (9),
                                      'Size used by Trevor during physical layout of the form.
                                      'Reference value used for for resizing.
Dim lngMinFontSize As Long            'Minimum font size. Sizes passed to GetDate function less than this value are set to this value
Dim lngMaxFontSize As Long            'Maxixmum font size. Sizes passed to GetDate function more than this value oare to to this value
Dim lngHdrFontSize As Long            'Font size of the header labels (month and year)
Dim dblHeaderHeight As Double         'Height of the background behind header labels
Dim dblMonthYearHeight As Double      'Height of the month and year header labels
Dim dblMonYrScrollHeight As Double    'Height of the month scroll bar
Dim dbkDayLblHeight As Double         'Height of the background behind the subheader day of week labels
Dim dblDateBGHeight As Double         'Height of the background behind each date label
Dim dblDateBGWidth As Double          'Width of the background behind each date label
Dim dbkDateLblsHeight As Double       'Height of each date label
Dim dblButtonHeight As Double         'Height of Today and OK command buttons
Dim dblPsuedoScrollHeight As Double   'Height of the psuedo scroll buttons (Month up/Month down)
Dim dblMinButtonHeight As Double      'Minimum button height
Dim oBG As Control                    'Stores current date label background in loop to initialize various settings
Dim oLbl As Control                   'Stores current date label in loop to initialize various settings
Dim oCtrl As Control                  'Form control variable.  Used in setting label font name.
Dim lngIndex As Long                  'Used for loops
Dim lngColIndex As Long               'Used for loops
Dim lngTempDayOfWeek As Long          'Used to set day labels in subheader
Dim dateInitialize As Date            'Date value used to initialize calendar.
  
  m_bUserFormEventsEnabled = False 'Allows setting control values without triggering events.
  'Initialize default values
  lngBaseFontSize = 9
  lngMinFontSize = 6
  lngMaxFontSize = 30
  dblMinButtonHeight = 15 '20
  'Compare font size passed with minimum/maximum font sizes. Min\Max values override.
  If m_lngDateFontSize < lngMinFontSize Then m_lngDateFontSize = lngMinFontSize
  If m_lngDateFontSize > lngMaxFontSize Then m_lngDateFontSize = lngMaxFontSize
  
  'Define sizing ratio (m_dblRatioToResize is used to aid resizing form controls).
  m_dblRatioToResize = m_lngDateFontSize / lngBaseFontSize
  'Define size varibles based on m_lngDateFont.
  m_BorderSpacing = 4 * (m_lngDateFontSize / lngBaseFontSize)
  'E.g., if the date font size is 12, the Header background height is set at 30 and the header font size is set at 15.6 (resolved to 16) etc.
  If m_lngDateFontSize < 8 Then m_bAbbreviateMonths = True 'Full month names can't fit in small calendar headers.
  dblHeaderHeight = m_lngDateFontSize * 2.5
  lngHdrFontSize = m_lngDateFontSize * 1.3
  dblMonthYearHeight = m_lngDateFontSize * 1.4
  dblMonYrScrollHeight = m_lngDateFontSize * 1.7
  dbkDayLblHeight = m_lngDateFontSize * 1.65
  dblDateBGHeight = m_lngDateFontSize * 2
  dblDateBGWidth = m_lngDateFontSize * 2
  dbkDateLblsHeight = m_lngDateFontSize * 1.17
  dblButtonHeight = m_lngDateFontSize * 2
  dblPsuedoScrollHeight = m_lngDateFontSize * 2
  If dblButtonHeight < dblMinButtonHeight Then dblButtonHeight = dblMinButtonHeight
  'If m_varMaxDate is less than m_varMinDate, it will default to the m_varMinDate.
  If m_varMaxDate < m_varMinDate Then m_varMaxDate = m_varMinDate
  'Evaluate Today button.
  If Date < DateValue(m_varMinDate) Or Date > DateValue(m_varMaxDate) Then
    'Current day date is out of range. Note - Overides TodayButton parameter if passed as True.
    m_bTodayShow = False
  End If
  'Evalate DateToPick and determine date to use to initialize calendar. Note: Calendar cannot be initialize to a date (i.e., DateToPick or current date)
  'if that date is out of bounds. In such cases the calendar is initalized to the closest month\year of the DateToPick or curent date.
  If IsDate(m_varDateToPick_Picked) Then
    'Valid DateToPick argument was passed. User wants calendar to intilize with a specific date set.
    If CDate(m_varDateToPick_Picked) < m_varMinDate Then
      'Out of range. Set to minimum date.
      m_varDateToPick_Picked = m_varMinDate
    ElseIf CDate(m_varDateToPick_Picked) > m_varMaxDate Then
      'Out of range. Set to maximum date.
       m_varDateToPick_Picked = m_varMaxDate
    End If
    'Initialize calendar to m_varDateToPick_Picked
    dateInitialize = m_varDateToPick_Picked
  Else
    'Value passed does not resolve to a date, pick today's date.
     m_varDateToPick_Picked = Date
    If m_varDateToPick_Picked < m_varMinDate Then
      'Out of range. Set to minimum date.
      m_varDateToPick_Picked = m_varMinDate
    ElseIf m_varDateToPick_Picked > m_varMaxDate Then
      'Out of range. Set to maximum date.
      m_varDateToPick_Picked = m_varMaxDate
    End If
    'Initialize calendar to m_varDateToPick_Picked
    dateInitialize = m_varDateToPick_Picked
  End If
  'Set up and size remaining form elements.
  Caption = m_strCaption
  BackColor = m_lngFrmBackcolor
  'Size header elements.
  With bgHeader 'Month\Year background
    .BackColor = m_lngHeaderColor
    .Height = dblHeaderHeight
    'Adjust width to accommodate week numbers (visible or not)
    If m_bShowWeekNumbers Then
      .Width = 8 * dblDateBGWidth
    Else
      .Width = 7 * dblDateBGWidth
    End If
    .Left = m_BorderSpacing
    .Top = m_BorderSpacing
  End With
  bgScrollCover.BackColor = m_lngHeaderColor
  With scrlMonth 'Month scroll bar
    .Width = bgHeader.Width - (2 * m_BorderSpacing)
    .Left = bgHeader.Left + m_BorderSpacing
    .Height = dblMonYrScrollHeight
    .Top = bgHeader.Top + ((bgHeader.Height - .Height) / 2)
    If m_bColorButtons Then
      If m_bButtonColorsNegative Then
        .BackColor = m_lngHeaderFontColor
        .ForeColor = m_lngHeaderColor
      Else
        .BackColor = m_lngHeaderColor
        .ForeColor = m_lngHeaderFontColor
      End If
    End If
  End With
  With cmdOK 'OK button
    If m_bColorButtons Then
      If m_bButtonColorsNegative Then
        .BackColor = m_lngHeaderFontColor
        .ForeColor = m_lngHeaderColor
      Else
        .BackColor = m_lngHeaderColor
        .ForeColor = m_lngHeaderFontColor
      End If
    End If
  End With
  With cmdCancel 'Cancel button
    If m_bColorButtons Then
      If m_bButtonColorsNegative Then
        .BackColor = m_lngHeaderFontColor
        .ForeColor = m_lngHeaderColor
      Else
        .BackColor = m_lngHeaderColor
        .ForeColor = m_lngHeaderFontColor
      End If
    End If
  End With
  With cmdToday 'Today button
    If m_bColorButtons Then
      If m_bButtonColorsNegative Then
        .BackColor = m_lngHeaderFontColor
        .ForeColor = m_lngHeaderColor
      Else
        .BackColor = m_lngHeaderColor
        .ForeColor = m_lngHeaderFontColor
      End If
    End If
  End With
  With bgScrollCover 'Scroll cover
    'A blank label which sits on top of the month scroll bar to make it look like two spin buttons.
    .Height = scrlMonth.Height
    .Width = scrlMonth.Width - 25 '25 is the width of the actual scroll buttons, which need to remain visible.
    .Left = scrlMonth.Left + 12.5
    .Top = scrlMonth.Top
  End With
  
  With lblMonth
    .AutoSize = False
    .Height = dblMonthYearHeight
    .Font.Size = lngHdrFontSize
    .Top = bgHeader.Top + ((bgHeader.Height - .Height) / 3)
    'Note -.Left attribute of the month and year labels are set in the function SetMonthYear. (change based on the picked month/year)
  End With
  With lblYear
    .AutoSize = False
    .Height = dblMonthYearHeight
    .Font.Size = lngHdrFontSize
    .Top = lblMonth.Top
  End With
  lblMonth.ForeColor = m_lngHeaderFontColor
  lblYear.ForeColor = m_lngHeaderFontColor
  lblPickedDate.ForeColor = m_lngSubHeaderFontColor

  bgDayLabels.BackColor = m_lngSubHeaderColor
  For lngIndex = 1 To 7
    Controls("lblDay" & CStr(lngIndex)).ForeColor = m_lngSubHeaderFontColor
  Next lngIndex
  If m_bShowWeekNumbers Then
    lblWk.ForeColor = m_lngSubHeaderFontColor
    lblSep.BackColor = m_lngSubHeaderFontColor
    For lngIndex = 1 To 6
      Controls("lblWeek" & CStr(lngIndex)).ForeColor = m_lngSubHeaderFontColor
      Controls("bgWeek" & CStr(lngIndex)).BackColor = m_lngSubHeaderColor
    Next lngIndex
  End If
  'Initialize subheader day labels, based on the calendar week start weekday parameter.
  lngTempDayOfWeek = m_vbStartDayOfWeek
  For lngIndex = 1 To 7
    Controls("lblDay" & CStr(lngIndex)).Caption = Choose(lngTempDayOfWeek, "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa")
    lngTempDayOfWeek = lngTempDayOfWeek + 1
    If lngTempDayOfWeek = 8 Then lngTempDayOfWeek = 1
  Next lngIndex
  'Initialize userform position.
  If m_lngTop <> -5 And m_lngLeft <> -5 Then
    'Set custom postion. Note both Top and Left position arguments must be passed and different from default -5.
    StartUpPosition = 0
    Top = m_lngTop
    Left = m_lngLeft
  Else
    'Show at center screen.
    StartUpPosition = 1
  End If
  'Initialize month and year comboboxes, as well as month scroll bar.
  Call SetMonthCombobox(Year(dateInitialize), Month(dateInitialize))
  scrlMonth.Value = Month(dateInitialize)
  m_lngComboYearMin = Year(dateInitialize) - m_lngRangeOfYears
  m_lngComboYearMax = Year(dateInitialize) + m_lngRangeOfYears
  If m_lngComboYearMin < Year(m_varMinDate) Then
    m_lngComboYearMin = Year(m_varMinDate)
  End If
  If m_lngComboYearMax > Year(m_varMaxDate) Then
    m_lngComboYearMax = Year(m_varMaxDate)
  End If
  For lngIndex = m_lngComboYearMin To m_lngComboYearMax
    cmbYear.AddItem lngIndex
  Next lngIndex
  cmbYear.Value = Year(dateInitialize)
  With cmbMonth
    .BackColor = m_lngHeaderFontColor
    .ForeColor = m_lngHeaderColor
  End With
  With cmbMonth
    .BackColor = m_lngHeaderFontColor
    .ForeColor = m_lngHeaderColor
    .Top = lblMonth.Top + (lblMonth.Height - .Height)
    .Font.Size = m_lngDateFontSize + 1
    .Width = .Width * m_dblRatioToResize
  End With
  With cmbYear
    .BackColor = m_lngHeaderFontColor
    .ForeColor = m_lngHeaderColor
    .Top = lblYear.Top + (lblYear.Height - .Height)
    .Font.Size = m_lngDateFontSize + 1
    .Width = lblYear.Width * m_dblRatioToResize
  End With
  'Size subheader elements.
  With bgDayLabels 'Day of week labels background
    .Height = dbkDayLblHeight
    'Adjust width to accommodate week numbers (visible or not).
    If m_bShowWeekNumbers Then
      .Width = 8 * (dblDateBGWidth)
    Else
      .Width = 7 * (dblDateBGWidth)
    End If
    .Left = m_BorderSpacing
    .Top = bgHeader.Top + bgHeader.Height
  End With
  'Week number subheader label
  If Not m_bShowWeekNumbers Then
    lblWk.Visible = False
    lblSep.Left = 171
    lblSep.Visible = False
  Else
    With lblWk
      .AutoSize = False
      .Height = dbkDateLblsHeight
      .Font.Size = m_lngDateFontSize
      .Width = dblDateBGWidth
      .Top = bgDayLabels.Top + ((bgDayLabels.Height - .Height) / 2)
      .Left = m_BorderSpacing
      If m_bShowWkSepLine Then
        lblSep.Left = .Left + (.Width * 0.95)
        lblSep.Visible = True
      Else
        lblSep.Visible = False
      End If
    End With
    lblSep.Top = bgHeader.Top + bgHeader.Height
    lblSep.ZOrder 0
  End If
  'Day of week subheader labels.
  For lngIndex = 1 To 7
    With Controls("lblDay" & CStr(lngIndex))
      .AutoSize = False
      .Height = dbkDateLblsHeight
      .Font.Size = m_lngDateFontSize
      .Width = dblDateBGWidth
      .Top = bgDayLabels.Top + ((bgDayLabels.Height - .Height) / 2)
      If lngIndex = 1 Then '***************************
        'Left position of first label depends on whether week numbers are visible.
        If m_bShowWeekNumbers Then
          .Left = lblWk.Left + lblWk.Width
        Else
          .Left = m_BorderSpacing
        End If
      Else
        'All other labels placed directly next to preceding label.
        .Left = Controls("lblDay" & CStr(lngIndex - 1)).Left + Controls("lblDay" & CStr(lngIndex - 1)).Width
      End If
    End With
  Next lngIndex
  'Size all date labels and backgrounds.
  For lngIndex = 1 To 6 'Calendar rows
    'First set position and visibility of week number label.
    If Not m_bShowWeekNumbers Then
      Controls("lblWeek" & CStr(lngIndex)).Visible = False
      Controls("bgWeek" & CStr(lngIndex)).Visible = False
    Else
      Set oBG = Controls("bgWeek" & CStr(lngIndex))
      With oBG
        .Height = dblDateBGHeight
        .Font.Size = m_lngDateFontSize
        .Width = dblDateBGWidth
        .Left = m_BorderSpacing
        If lngIndex = 1 Then
          .Top = bgDayLabels.Top + bgDayLabels.Height + (((dblDateBGHeight) - .Height) / 2)
        Else
          .Top = Controls("bgWeek" & CStr(lngIndex - 1)).Top + Controls("bgWeek" & CStr(lngIndex - 1)).Height + (((dblDateBGHeight) - .Height) / 2)
        End If
      End With
      With Controls("lblWeek" & CStr(lngIndex))
        .AutoSize = False
        .Height = dbkDateLblsHeight
        .Font.Size = m_lngDateFontSize
        .Width = oBG.Width
        .Left = oBG.Left
        .Top = oBG.Top + ((oBG.Height - .Height) / 2)
      End With
    End If
  Next lngIndex
  'Now set position of each date label in current row.
  For lngIndex = 1 To 42
      Set oBG = Controls("bgDate" & CStr(lngIndex))
      Set oLbl = Controls("lblDate" & CStr(lngIndex))
      'The date label background is sized and placed first. Then the actual date label is simply set to the same position and centered vertically.
      With oBG
        .Height = dblDateBGHeight
        .Width = dblDateBGWidth
        Select Case lngIndex
          Case Is = 1, 8, 15, 22, 29, 36
            'Position under corresponding day label
            .Left = Controls("lblDay1").Left
          Case Else
            'All other labels placed directly adjacent to preceding label in row.
            .Left = Controls("bgDate" & CStr(lngIndex - 1)).Left + Controls("bgDate" & CStr(lngIndex - 1)).Width
          End Select
        If lngIndex < 8 Then
          .Top = bgDayLabels.Top + bgDayLabels.Height
        Else
          .Top = Controls("bgDate" & CStr(lngIndex) - 7).Top + Controls("bgDate" & CStr(lngIndex) - 7).Height
        End If
      End With
      'Size and position actual date label.
      With oLbl
        .AutoSize = False
        .Height = dbkDateLblsHeight
        .Font.Size = m_lngDateFontSize
        .Width = oBG.Width
        .Left = oBG.Left
        .Top = oBG.Top + ((oBG.Height - .Height) / 2)
      End With
    'Next lngColIndex
  Next lngIndex
  'Set userform width. Height is set in SetDay procedure since it depends date label row 6 visibility.
  Width = bgHeader.Left + bgHeader.Width + m_BorderSpacing + (Width - InsideWidth) 'Resolves issue with Word 2010/2013 width disparity.

  If m_lngDateFontSize = 6 Then
    'Note: The minimum font size 6 results in a calculated form width less than the
    'physical minimum of 99 pixels (Word 2010) which results in the calendar controls skewed to the left:
    If Application.Version > 14 Then
      If Width < 105 Then
        'Calculated width is less than the userform minimum width (94.8) so shift .Lefts to center calendar.
        If Not m_ShowTitleBar Then
          For Each oCtrl In Me.Controls
            oCtrl.Left = oCtrl.Left + 3.5
          Next oCtrl
'        Else
'          For Each oCtrl In Me.Controls
'            oCtrl.Left = oCtrl.Left + 0.5
'          Next oCtrl
        End If
      End If
    Else
      If Width = 99 Then
        'Calculated width is less than the userform minimum width (94.8) so shift .Lefts to center calendar.
        For Each oCtrl In Me.Controls
          oCtrl.Left = oCtrl.Left + 2.8
        Next oCtrl
      End If
     End If
  End If
  'Cancel button.
  cmdCancel.Width = bgHeader.Width
  cmdCancel.Left = bgHeader.Left
  cmdToday.Left = cmdCancel.Left
  If Not m_bCancelShow Then
    cmdCancel.Visible = False
  Else
    With cmdCancel
      .Visible = True
      .Height = dblButtonHeight
      .Font.Size = m_lngDateFontSize
    End With
  End If
  'Set size and visibility of OK button and date picked labels.
  If Not m_bOKShow Then
    cmdOK.Visible = False
    lblPickedDate.Visible = False
   Else
     With cmdOK
      .Visible = True
      .Height = dblButtonHeight
      .Width = bgHeader.Width / 2 - m_BorderSpacing 'dblButtonWidth
      .Font.Size = m_lngDateFontSize
      .Top = bgDate36.Top + bgDate36.Height + bgDayLabels.Height + m_BorderSpacing
    End With
    With lblPickedDate
      .Left = 0
      .Visible = True
      .Height = dblMonthYearHeight + (2 * m_dblRatioToResize)
      .Width = Width
      .Font.Size = lngHdrFontSize - 1
      .Top = (bgDate36.Top + bgDate36.Height) + ((bgDayLabels.Height + m_BorderSpacing - .Height) / 2)
    End With
  End If
  'Today button.
  If Not m_bTodayShow Then
    cmdToday.Visible = False
  Else
    With cmdToday
      .Visible = True
      .Height = dblButtonHeight
      .Width = bgHeader.Width / 2 - m_BorderSpacing
  If Not m_bCancelShow Then
    cmdCancel.Visible = False
  Else
    With cmdCancel
      .Visible = True
      .Height = dblButtonHeight
      .Font.Size = m_lngDateFontSize
    End With
  End If
      .Font.Size = m_lngDateFontSize
    End With
  End If
  'Position OK and Today buttons horizontally (.Left) as applicable. Top is set later in SetDay procedure.
  Select Case True
    Case m_bOKShow And m_bTodayShow 'Both used.
      cmdOK.Width = cmdToday.Width
      cmdOK.Left = cmdCancel.Left + (cmdCancel.Width - cmdOK.Width) 'cmdToday.Left + cmdToday.Width + m_BorderSpacing
    Case m_bOKShow 'OK button only.
      With cmdOK
        .Left = cmdCancel.Left
        .Width = cmdCancel.Width
      End With
    Case m_bTodayShow 'Today button only.
      With cmdToday
        .Left = cmdCancel.Left
        .Width = cmdCancel.Width
      End With
  End Select
   On Error Resume Next
  For Each oCtrl In Controls
    Select Case TypeName(oCtrl)
      Case "Label", "CommandButton", "ComboBox": oCtrl.Font.Name = m_strFontName
    End Select
  Next oCtrl
  On Error GoTo 0
  'Set value of form picked date label.
   Call SetPickedDateLabel(dateInitialize)
  'Set month and year labels in header, as well as date labels
  Call SetMonthYear(Month(dateInitialize), Year(dateInitialize))
  Call SetDays(Month(dateInitialize), Year(dateInitialize), Day(dateInitialize))
  If Not m_ShowTitleBar Then RemoveTitleBar
lbl_Exit:
  Exit Sub
End Sub


Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdOK_Click()
  'When the OK button is clicked, the picked date is set, and the frmDatePicker is hidden to return control to the GetDate function.
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdToday_Click()
'The functionality of the Today button changes depending on whether the OK button is enabled or not.
'If the OK button is enabled, clicking the Today button jumps to today's date and picks it.
'If the OK button is disabled, clicking the Today button functions the same as picking the current (today's) date. The GetDate funciton returns
'the current date and the form closes.
    
  m_bUserFormEventsEnabled = False
  m_varDateToPick_Picked = Date
  If m_bOKShow Then
    'cmdOK.Enabled = True
    Call SetPickedDateLabel(m_varDateToPick_Picked)
  End If
  If m_bOKShow Then
    scrlMonth.Value = Month(m_varDateToPick_Picked)
    'Set month/year labels and date labels
    Call SetMonthYear(Month(m_varDateToPick_Picked), Year(m_varDateToPick_Picked))
    Call SetDays(Month(m_varDateToPick_Picked), Year(m_varDateToPick_Picked), Day(m_varDateToPick_Picked))
    m_bUserFormEventsEnabled = True
  Else
    Hide
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'Intercepts the "X" close button on the form.  If user does not pick a date GetDate will return vbNullString
  If CloseMode = 0 Then
    Cancel = True
    m_varDateToPick_Picked = "7/5/1776 10:45:15 AM" 'A relatively obscure and very specific date\time in American history (compared to its neighboring day, which can't
                                          'be picked by the user.  Represents no date picked.
    Hide
  End If
End Sub

Private Sub ClickControl(oCtrl As Control)
'Handles the click event of the date label controls.
'Every date 'label has a click event which passes that label to this sub.
'If the OK button is showing, clicking a date picks that date, but the GetDate return is pending OK click.
'If OK button is not showing, clicking a date picks that date.  GetDate returns the picked date and the calendar is closed.
Dim lngPickedMonth As Long    'Picked month
Dim lngPickedYear As Long     'Picked year
Dim lngPickedDay As Long      'Picked day
Dim lngIndex As Long          'Index of the clicked date label

  'Initialize
  lngPickedMonth = scrlMonth.Value
  lngPickedYear = cmbYear.Value
  
  'Get index of date label from label name and picked day from caption and resolve date picked.
  lngIndex = CLng(Mid(oCtrl.Name, 8, Len(oCtrl.Name) - 7))
  lngPickedDay = CLng(oCtrl.Caption)
  If lngIndex < 8 And lngPickedDay > 6 Then 'Picked date is from previous month.
    'The largest day value that can exist in calendar row 1 from the focus month is 6.
    'Therefore, any day value larger than that comes from the previous month, so decrement the picked month.
    lngPickedMonth = lngPickedMonth - 1
    'Handle a December date picked when January is the focus month.
    If lngPickedMonth = 0 Then
      lngPickedYear = lngPickedYear - 1
      lngPickedMonth = 12
    End If
  ElseIf lngIndex >= 29 And lngPickedDay < 8 Then 'Picked date is from next month.
    'The last row displayed (5 or 6) can display a maximum of 7 days from the next month.
    'Day 7 or smaller must come from the next month.
    lngPickedMonth = lngPickedMonth + 1
    'Handle a January date picked when December is the focus month.
    If lngPickedMonth = 13 Then
      lngPickedYear = lngPickedYear + 1
      lngPickedMonth = 1
    End If
  End If
  
  m_varDateToPick_Picked = DateSerial(lngPickedYear, lngPickedMonth, lngPickedDay)
  If Not m_bOKShow Then
    'Return GetDate value and close calendar.
    Hide
  Else
    m_bUserFormEventsEnabled = False
    'cmdOK.Enabled = True
    scrlMonth.Value = lngPickedMonth
    Call SetPickedDateLabel(m_varDateToPick_Picked)
    Call SetMonthYear(lngPickedMonth, lngPickedYear)
    Call SetDays(lngPickedMonth, lngPickedYear, lngPickedDay)
    m_bUserFormEventsEnabled = True
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub HoverControl(oCtrl As Control)
'Handles the MouseMove event when hovering over one of the date label controls.
'Every date label has a MouseMove event which passes that label to this sub.
'Returns the last hovered date label to its original color, sets the currently hovered date label
'to the m_lngBackDateHoverColor, and stores its name and original color to global variables.
  If m_strHoverControlName <> vbNullString Then
    Controls(m_strHoverControlName).BackColor = m_lngHoverControlColor
  End If
  m_strHoverControlName = oCtrl.Name
  m_lngHoverControlColor = oCtrl.BackColor
  If Not oCtrl.BackColor = m_lngDatePickedBGColor Then
    oCtrl.BackColor = m_lngBackDateHoverColor
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'Restores the last hovered date label to its original color when user is no longer hovering over date label.
  If m_strHoverControlName <> vbNullString Then
   Controls(m_strHoverControlName).BackColor = m_lngHoverControlColor
  End If
lbl_Exit:
  Exit Sub
End Sub
Private Sub bgDayLabels_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'Restores the last hovered date label to its original color when user is no longer hovering over date label.
  If m_strHoverControlName <> vbNullString Then
    Controls(m_strHoverControlName).BackColor = m_lngHoverControlColor
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub lblMonth_Click()
'The month label in the header has an invisible combobox behind it.
'Shows the combobox dropdown when you click on the label.
  cmbMonth.DropDown
lbl_Exit:
  Exit Sub
End Sub
Private Sub lblYear_Click()
'The year label in the header has an invisible combobox behind it.
'Shows the combobox dropdown when you click on the label.
  cmbYear.DropDown
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmbMonth_Change()
  Call cmbMonthYearChange
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmbYear_Change()
  If Not m_bUserFormEventsEnabled Then Exit Sub
  m_bUserFormEventsEnabled = False
  Call SetMonthCombobox(cmbYear.Value, scrlMonth.Value)
  m_bUserFormEventsEnabled = True
  Call cmbMonthYearChange
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmbMonthYearChange()
'Processes the month\year the user selections from either the month or year combobox.
'Sets the value of the month scroll bar to match selection and resets the calendar date labels.
Dim lngPickedMonth As Long           'Month of selected date
Dim lngPickedYear As Long            'Year of selected date
Dim lngPickedDay As Long             'Day of selected date
    
  If Not m_bUserFormEventsEnabled Then Exit Sub
  m_bUserFormEventsEnabled = False
  lngPickedYear = cmbYear.Value
  If lngPickedYear = Year(m_varMinDate) Then
    'In this case the selected month index has to be offset by the month of the minimum date.
    lngPickedMonth = cmbMonth.ListIndex + Month(m_varMinDate)
  Else
    lngPickedMonth = cmbMonth.ListIndex + 1
  End If
  'Get picked day, set the value of the month scroll bar, and reset all date labels on the userform.
  lngPickedDay = fcnGetPickedDay(lngPickedMonth, lngPickedYear)
  scrlMonth.Value = lngPickedMonth
  Call SetMonthYear(lngPickedMonth, lngPickedYear)
  Call SetDays(lngPickedMonth, lngPickedYear, lngPickedDay)
  m_bUserFormEventsEnabled = True
lbl_Exit:
  Exit Sub
End Sub
Private Sub scrlMonth_Change()
'Processes the user clicking the scroll bar to increment\decrement the month\year.
'Ensures month remains within the bounds set by the minimum or maximum date.
Dim lngTempYear As Long      'Temporarily store selected year to test min and max dates
Dim lngMinMonth As Long      'Sets lower limit of scroll bar
Dim lngMaxMonth As Long      'Sets upper limit of scroll bar
Dim lngPickedMonth As Long   'Month of picked date
Dim lngPickedYear As Long    'Year of picked date
Dim lngPickedDay As Long     'Day of picked date
    
  If Not m_bUserFormEventsEnabled Then Exit Sub
  m_bUserFormEventsEnabled = False
  'Default lower and upper limit of scroll bar to allow full range of months.
  lngMinMonth = 0
  lngMaxMonth = 13
  'If the current year is the min or max year, set min or max months
  lngTempYear = cmbYear.Value
  If lngTempYear = Year(m_varMinDate) Then lngMinMonth = Month(m_varMinDate)
  If lngTempYear = Year(m_varMaxDate) Then lngMaxMonth = Month(m_varMaxDate)
  'Keep scroll bar within range of min and max dates.
  If scrlMonth.Value < lngMinMonth Then
    scrlMonth.Value = scrlMonth.Value + 1
    Beep
  End If
  If scrlMonth.Value > lngMaxMonth Then
    scrlMonth.Value = scrlMonth.Value - 1
    Beep
  End If
  If scrlMonth.Value = 0 Then
    'User scrolled from January to December, re-index scroll.
    scrlMonth.Value = 12
    'Decrement year by 1
    cmbYear.Value = cmbYear.Value - 1
    'If new year is outside range of combobox, add it to combobox
    If cmbYear.Value < m_lngComboYearMin Then
      cmbYear.AddItem cmbYear.Value, 0
      m_lngComboYearMin = cmbYear.Value
    End If
    Call SetMonthCombobox(cmbYear.Value, scrlMonth.Value)
  ElseIf scrlMonth.Value = 13 Then
    'User scrolled from December to January, re-index scroll.
    scrlMonth.Value = 1
    'Increment year by  1
    cmbYear.Value = cmbYear.Value + 1
    'If new year is outside range of combobox, add it to combobox.
    If cmbYear.Value > m_lngComboYearMax Then
      cmbYear.AddItem cmbYear.Value, cmbYear.ListCount
      m_lngComboYearMax = cmbYear.Value
    End If
    Call SetMonthCombobox(cmbYear.Value, scrlMonth.Value)
  End If
  'Get the picked date (year, month and day) and reset calendar labels.
  lngPickedMonth = scrlMonth.Value
  lngPickedYear = cmbYear.Value
  lngPickedDay = fcnGetPickedDay(lngPickedMonth, lngPickedYear)
  Call SetMonthYear(lngPickedMonth, lngPickedYear)
  Call SetDays(lngPickedMonth, lngPickedYear, lngPickedDay)
  m_bUserFormEventsEnabled = True
lbl_Exit:
  Exit Sub
End Sub

Private Sub SetMonthCombobox(lngYearIn As Long, lngMonthIn As Long)
'Clears and sets value in month combobox.
'Ensures months displayed in the combobox don't violate bounds set by the minimum or maximum date.
Dim lgnYearMinDate As Long    'Year of the minimum date
Dim lngYearMaxDate As Long    'Year of the maximum date
Dim lngMonthMinDate As Long   'Month of the minimum date
Dim lngMonthMaxDate As Long   'Month of the maximum date
Dim lngIndex As Long          'Used for looping
   
  'Get month and year of minimum and maximum dates and clear combobox
  lgnYearMinDate = Year(m_varMinDate)
  lngYearMaxDate = Year(m_varMaxDate)
  lngMonthMinDate = Month(m_varMinDate)
  lngMonthMaxDate = Month(m_varMaxDate)
  cmbMonth.Clear
  'Evaluate and populate month combobox.
  Select Case True
    Case lngYearIn = lgnYearMinDate And lngYearIn = lngYearMaxDate 'Both minimum and maximum dates occur in selected year.
      For lngIndex = lngMonthMinDate To lngMonthMaxDate
        If Not m_bAbbreviateMonths Then
          cmbMonth.AddItem Choose(lngIndex, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        Else
          cmbMonth.AddItem Choose(lngIndex, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
        End If
      Next lngIndex
      If lngMonthIn < lngMonthMinDate Then lngMonthIn = lngMonthMinDate
      If lngMonthIn > lngMonthMaxDate Then lngMonthIn = lngMonthMaxDate
      cmbMonth.ListIndex = lngMonthIn - lngMonthMinDate
    Case lngYearIn = lgnYearMinDate 'Only minimum date occurs in selected year.
      For lngIndex = lngMonthMinDate To 12
        If Not m_bAbbreviateMonths Then
          cmbMonth.AddItem Choose(lngIndex, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        Else
          cmbMonth.AddItem Choose(lngIndex, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
        End If
      Next lngIndex
      If lngMonthIn < lngMonthMinDate Then lngMonthIn = lngMonthMinDate
      cmbMonth.ListIndex = lngMonthIn - lngMonthMinDate
    Case lngYearIn = lgnYearMinDate 'Only maximum date occurs in selected year.
      For lngIndex = 1 To lngMonthMaxDate
        If Not m_bAbbreviateMonths Then
          cmbMonth.AddItem Choose(lngIndex, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        Else
          cmbMonth.AddItem Choose(lngIndex, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
        End If
      Next lngIndex
      If lngMonthIn > lngMonthMaxDate Then lngMonthIn = lngMonthMaxDate
      cmbMonth.ListIndex = lngMonthIn - 1
    Case Else 'No minimum or maximum date in selected year. Add all months to combobox.
       If Not m_bAbbreviateMonths Then
          cmbMonth.List = Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
       Else
          cmbMonth.List = Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
       End If
      cmbMonth.ListIndex = lngMonthIn - 1
  End Select
lbl_Exit:
  Exit Sub
End Sub

Private Sub SetMonthYear(lngMonthIn As Long, lngYearIn As Long)
'Sets the month and year comboboxes to keep them in sync with any changes made via scroll bar buttons.
'Sets the month and year labels in the header, and centers them in the header.
Dim dblExtraSpace As Double         'Space between month and year labels.
Dim dblCombinedLabelWidth As Double 'Combined width of both month and year labels.
  
  dblExtraSpace = 4 * m_dblRatioToResize
  'Set value of comboboxes
  If lngYearIn = Year(m_varMinDate) Then
    cmbMonth.ListIndex = lngMonthIn - Month(m_varMinDate)
  Else
    cmbMonth.ListIndex = lngMonthIn - 1
  End If
  cmbYear.Value = lngYearIn
  'Set labels and position to center of scroll buttons.
  With lblMonth
    .AutoSize = False
    .Width = Width 'Set to form width to avoid overflow.
    If Not m_bAbbreviateMonths Then
      .Caption = cmbMonth.Value
    Else
      .Caption = Choose(lngMonthIn, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    End If
    .AutoSize = True 'Resize and center
    .AutoSize = False
    .Width = .Width + (3 * m_dblRatioToResize)
  End With
  With lblYear
    .AutoSize = False
    .Width = Width 'Set to form width to avoid overflow.
    .Caption = cmbYear.Value
    .AutoSize = True 'Resize and center.
    .AutoSize = False
    .Width = .Width + (3 * m_dblRatioToResize)
  End With
  'Get combined width of labels and center to scroll bar.
  dblCombinedLabelWidth = lblMonth.Width + lblYear.Width
  lblMonth.Left = ((Width - m_BorderSpacing - dblCombinedLabelWidth) / 2) - (dblExtraSpace / 2)
  lblMonth.ZOrder 0
  lblYear.Left = lblMonth.Left + lblMonth.Width + dblExtraSpace
  lblYear.ZOrder 0
  'Reposition comboboxes to line up with labels.
  Select Case True
    Case m_lngDateFontSize > 9
      cmbMonth.Left = (lblMonth.Left + lblMonth.Width) - cmbMonth.Width - (2 * m_dblRatioToResize)
      cmbMonth.TextAlign = fmTextAlignRight
      cmbYear.Left = lblYear.Left - m_dblRatioToResize
    Case m_lngDateFontSize = 9
     cmbMonth.Left = -6 + ((Width - InsideWidth) / 2)
     cmbMonth.TextAlign = fmTextAlignRight
     cmbYear.Left = lblYear.Left - 7
    Case Else
      cmbMonth.Left = lblMonth.Left - 7 * m_dblRatioToResize
      cmbMonth.TextAlign = fmTextAlignLeft
      cmbYear.Left = lblYear.Left - 7 * m_dblRatioToResize
  End Select
  'Clear hover control name, so labels in new month don't revert to colors from previously selected month.
  m_strHoverControlName = vbNullString
lbl_Exit:
  Exit Sub
End Sub

Private Sub SetDays(lngMonthIn As Long, lngYearIn As Long, Optional lngDayIn As Long)
'Renders the 6 calendar week number labels and 42 calendar date labels.
  '-Sets caption, visibility, forecolors, backcolors, borders and special effects.

'Note: lngMonthIn in defines the "focus" month or primary month to display in the calendar.

Dim lngLastDayOfMonth As Long         'Last day of the focus month
Dim lngWeekStartWeekday  As Long      'Weekday constant value of the first day of the focus month
Dim lngDayIndex As Long               'Index for incrementing focus month days.
Dim dateLabelDate As Date             'Date associated a calendar date label
Dim lngIndex As Long                  'Looping index
Dim lngWeekNumber As Long             'Number Stores week number for week number labels
Dim dateWeekCalcReference As Date     'Weekcalculation reference date defined for row 1.
Dim dateWeekCalc As Date               'Weekcalculation date for all rows.
Dim oLbl As Control                   'The control object of the current date label while changing settings
Dim oBG As Control                    'The control object of the current date label background while changing settings

  lngLastDayOfMonth = Day(DateSerial(lngYearIn, lngMonthIn + 1, 0))
  lngWeekStartWeekday = Weekday(DateSerial(lngYearIn, lngMonthIn, 1), m_vbStartDayOfWeek)
    
  'Date Label Rengering Protocol:
  'The calendar is always rendered so that one or more dates from the previous month is displayed before the first date of the focus month and
  'one  more dates from follow on month is displayed after the last date of the focus month. When the first day of the focus month is a weekday
  'corresponding to the day label in column 1 (e.g., Calendar week starts on Sunday and the first day of the focus month is a Sunday), then row 1 is
  'reserved for rendering 7 days from the previous month and rendering the focus month dates begins at row 2, column 1.
  'In no case with the calendar be rendered displaying more that 7 days from the previous or follow on more. In situations were rendering
  'the follow on month dates begin in row 5, dispay of calendar row 6 is supressed and the calendar resized accordingly.
  
  'Inialize index
  lngDayIndex = 1
  'Loop through all calendar week\date labels and set borders, effects, captions, forecolors and back colors.
  For lngIndex = 1 To 42
    If lngIndex < 7 And m_bShowWeekNumbers Then
      'Deduce and render the 6 week number labels which can appear once per row.
      If lngIndex = 1 Then
        If lngWeekStartWeekday = 1 Then
           'Row 1 will be rendered with last 7 days of the previous month.
           'In this case the date used to calculate the calendar week for row 1 is the date 7 days prior to the first day of the focus month.
           dateWeekCalcReference = DateAdd("d", -7, DateSerial(lngYearIn, lngMonthIn, 1))
        Else
          'Row 1 will be rendered using one or more previous month dates and one or more month dates.
          'In this case the date used to calculate the calendar week for row 1 is the date of the fisrt day of the focus month. (See note)
          dateWeekCalcReference = DateSerial(lngYearIn, lngMonthIn, 1)
          'Note: This is done to allieviate bug in DatePart function used to calculate week number discussed later.
        End If
        dateWeekCalc = dateWeekCalcReference
      Else
        'Week number labels in calendar rows 2 - 6. In this case the date used to calculated the calendar week for the associated
        'calendar row is the date used in row one incremented by lngIndex - 1 week(s).
        dateWeekCalc = DateAdd("ww", lngIndex - 1, dateWeekCalcReference)
      End If
      'Get the week number.
      lngWeekNumber = DatePart("ww", dateWeekCalc, m_vbStartDayOfWeek, m_vbWeekOneOfYear)
      '** The DatePart function will sometimes return week 53 when a week spans two years.
      'If lngWeekNumber is 53, but January 1st resides in the week we are calculating (any time the
      'first day of the week is greater than Dec 25th), we want to calculate based off January 1st, instead of date in December.
      If lngWeekNumber > 52 And Day(dateWeekCalc) > 25 Then
        lngWeekNumber = DatePart("ww", DateSerial(lngYearIn + 1, 1, 1), m_vbStartDayOfWeek, m_vbWeekOneOfYear)
      End If
      'Render the week number label.
      Controls("lblWeek" & CStr(lngIndex)).Caption = lngWeekNumber
    End If
    'Define and set date and date background labels (42 of each).
    Set oLbl = Controls("lblDate" & CStr(lngIndex))
    'Initialize\reset date text labels and date background labels.
    With oLbl
      .Visible = True
      .Enabled = True
      .Font.StrikeThrough = False
      .ForeColor = m_lngDateLabelColor
    End With
    Set oBG = Controls("bgDate" & CStr(lngIndex))
    With oBG
      .Visible = True
      .Enabled = True
      If m_bDateBorder Then
        .BorderStyle = fmBorderStyleSingle
        .BorderColor = m_lngDateBorderColor
      Else
        .BorderStyle = fmBorderStyleNone
      End If
      .SpecialEffect = m_lngDateSpecialEffect
      .BackColor = m_lngDateBGColor
    End With
    With oLbl
      'Process previous month dates.
      If lngWeekStartWeekday = 1 And lngIndex < 8 Then
         'In this case, according to the rendering protocol, we will fill the first calendar row with the last seven days of the previous month.
         'Subtract adjusted index from first day of focus month to deduce previous month date.
         dateLabelDate = DateAdd("d", lngIndex - 9, DateSerial(lngYearIn, lngMonthIn, 1))
         'Add day part to label.
        .Caption = CStr(Day(dateLabelDate))
        .ForeColor = m_lngAdjacentMonthLabelColor
        If dateLabelDate = Date Then
          .ForeColor = m_lngDateTodayLabelColor
          .ZOrder 0
          oBG.BackColor = m_lngTodayBackDateColor
          oBG.BorderStyle = m_lngTodayBGBorder
        End If
      ElseIf lngIndex < lngWeekStartWeekday Then
        'Previous month dates and focus month dates share the first row.
        'Subtract adjusted index from first day of focus month to deduce previous month date.
        dateLabelDate = DateAdd("d", lngIndex - lngWeekStartWeekday, DateSerial(lngYearIn, lngMonthIn, 1))
        'Add day part to label.
        .Caption = CStr(Day(dateLabelDate))
        .ForeColor = m_lngAdjacentMonthLabelColor
      'Next month dates
      ElseIf lngDayIndex > lngLastDayOfMonth Then
        'Add adjusted index to the first day of focus month to deduce follow on month date.
        dateLabelDate = DateAdd("d", lngDayIndex - 1, DateSerial(lngYearIn, lngMonthIn, 1))
        .ForeColor = m_lngAdjacentMonthLabelColor
        'Add day part to label.
        .Caption = CStr(Day(dateLabelDate))
        lngDayIndex = lngDayIndex + 1
      'Focus month dates
      Else
        dateLabelDate = DateSerial(lngYearIn, lngMonthIn, lngDayIndex)
        .Caption = CStr(Day(dateLabelDate))
        'Set caption and label forecolor.
        Select Case True
          Case DatePart("w", CDate(lngMonthIn & " " & oLbl.Caption & " " & lngYearIn)) = 7: .ForeColor = m_lngDateSatLabelColor
          Case DatePart("w", CDate(lngMonthIn & " " & oLbl.Caption & " " & lngYearIn)) = 1: .ForeColor = m_lngDateSunLabelColor
          Case Else: .ForeColor = m_lngDateLabelColor
        End Select
        lngDayIndex = lngDayIndex + 1
      End If
      'Render Today/Picked/Restricted date labels and backgrounds.
      If dateLabelDate = Date Then
        'This the current (today's) date.
        'Note: Today's date label and background color supercedes the normal and Sat/Sun caption/background colors.

        .ForeColor = m_lngDateTodayLabelColor
        .ZOrder 0
        oBG.BackColor = m_lngTodayBackDateColor
        oBG.BorderStyle = m_lngTodayBGBorder
      End If
      If dateLabelDate = m_varDateToPick_Picked Then
        'This is the date picked 1) Passed as DateToPick argument 2) Clicked (picked) by user 3) Picked using the Today button.
        'Note: The Picked date label and background color supercedes all other date caption and background colors except restricted..
        .ForeColor = m_lngDatePickedLabelBGColor
        .ZOrder 0
        oBG.BackColor = m_lngDatePickedBGColor
      End If
      'Flag restricted dates.
      If dateLabelDate < m_varMinDate Or dateLabelDate > m_varMaxDate Then
        .Font.StrikeThrough = m_bRestrictedStrikeThrough
        .Enabled = False
        oBG.BackColor = m_lngRestrictedBackDateColor
        oBG.Enabled = False
      End If
    End With
  Next lngIndex
  'Finalize rendering. Size/resize calendar.
  Select Case True
    'Last date in calendar row five is a follow on month date.
    Case lblDate35.ForeColor = m_lngAdjacentMonthLabelColor And _
                               lblDate36.ForeColor = m_lngAdjacentMonthLabelColor And _
                               lblDate42.ForeColor = m_lngAdjacentMonthLabelColor
      'Per calendar rendering protocol, mask calendar row 6.
      For lngIndex = 36 To 42
        Controls("bgDate" & lngIndex).Visible = False
        Controls("lblDate" & lngIndex).Visible = False
      Next lngIndex
      If m_bShowWeekNumbers Then
        lblWeek6.Visible = False
        bgWeek6.Visible = False
        lblSep.Height = (bgWeek5.Height * 5) + bgDayLabels.Height
      End If
      Select Case True
        Case m_bOKShow
          lblPickedDate.Top = bgDate36.Top + m_BorderSpacing
          If lblPickedDate.Caption <> vbNullString Then
            cmdOK.Top = lblPickedDate.Top + lblPickedDate.Height + m_BorderSpacing
          Else
            cmdOK.Top = lblPickedDate.Top
          End If
          cmdToday.Top = cmdOK.Top
          If m_bCancelShow Then
            cmdCancel.Top = cmdOK.Top + cmdOK.Height + m_BorderSpacing
            Height = (Height - InsideHeight) + cmdCancel.Top + cmdCancel.Height + m_BorderSpacing
          Else
            Height = (Height - InsideHeight) + cmdOK.Top + cmdOK.Height + m_BorderSpacing
          End If
        Case m_bTodayShow 'Only Today button enabled
          cmdToday.Top = bgDate29.Top + bgDate29.Height + m_BorderSpacing
          If m_bCancelShow Then
            cmdCancel.Top = cmdToday.Top + cmdToday.Height + m_BorderSpacing
            Height = (Height - InsideHeight) + cmdCancel.Top + cmdCancel.Height + m_BorderSpacing
          Else
            Height = (Height - InsideHeight) + cmdToday.Top + cmdToday.Height + m_BorderSpacing
          End If
        Case Else 'Neither button enabled
          If m_bCancelShow Then
            cmdCancel.Top = bgDate29.Top + bgDate29.Height + m_BorderSpacing
            Height = (Height - InsideHeight) + cmdCancel.Top + cmdCancel.Height + m_BorderSpacing
          Else
            Height = (Height - InsideHeight) + bgDate29.Top + bgDate29.Height + m_BorderSpacing
          End If
      End Select
    'Focus month and follow on month dates share calendar row 6.
    Case Else
      'Show calendar row 6.
      If m_bShowWeekNumbers Then
        lblWeek6.Visible = True
        bgWeek6.Visible = True
        lblSep.Height = (bgWeek5.Height * 6) + bgDayLabels.Height
      End If
      Select Case True
        Case m_bOKShow
          lblPickedDate.Top = bgDate36.Top + bgDate36.Height + m_BorderSpacing
          If lblPickedDate.Caption <> vbNullString Then
            cmdOK.Top = lblPickedDate.Top + lblPickedDate.Height + m_BorderSpacing
            lblPickedDate.Visible = True
          Else
            lblPickedDate.Visible = False
            cmdOK.Top = lblPickedDate.Top
          End If
          cmdToday.Top = cmdOK.Top
          If m_bCancelShow Then
            cmdCancel.Top = cmdOK.Top + cmdOK.Height + m_BorderSpacing
            Height = (Height - InsideHeight) + cmdCancel.Top + cmdCancel.Height + m_BorderSpacing
          Else
            Height = (Height - InsideHeight) + cmdOK.Top + cmdOK.Height + m_BorderSpacing
          End If
        Case m_bTodayShow 'Only Today button enabled
          cmdToday.Top = bgDate36.Top + bgDate36.Height + m_BorderSpacing
          If m_bCancelShow Then
            cmdCancel.Top = cmdToday.Top + cmdToday.Height + m_BorderSpacing
            Height = (Height - InsideHeight) + cmdCancel.Top + cmdCancel.Height + m_BorderSpacing
          Else
            Height = (Height - InsideHeight) + cmdToday.Top + cmdToday.Height + m_BorderSpacing
          End If
        Case Else 'Neither button enabled
          If m_bCancelShow Then
            cmdCancel.Top = bgDate36.Top + bgDate36.Height + m_BorderSpacing
            Height = (Height - InsideHeight) + cmdCancel.Top + cmdCancel.Height + m_BorderSpacing
          Else
            Height = (Height - InsideHeight) + bgDate36.Top + bgDate36.Height + m_BorderSpacing
          End If
      End Select
   End Select
lbl_Exit:
  Exit Sub
End Sub

Private Sub SetPickedDateLabel(varDatePassed)
'Sets the lblPickedDate caption
  'If there is no Picked date set yet, varDatePassed is a null string
  If varDatePassed = vbNullString Then
    lblPickedDate.Caption = vbNullString
  Else
    lblPickedDate.Caption = "Date Picked: " & Format(varDatePassed, "Short Date")
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Function fcnGetPickedDay(lngMonthIn As Long, lngYearIn As Long) As Long
'Compares current month and year with Picked date.  Returns day number if matched, 0 if not.
  fcnGetPickedDay = 0
  If m_varDateToPick_Picked <> vbNullString Then
    'Evaluate date.
    If lngMonthIn = Month(m_varDateToPick_Picked) And lngYearIn = Year(m_varDateToPick_Picked) Then
      fcnGetPickedDay = Day(m_varDateToPick_Picked)
    End If
  End If
lbl_Exit:
  Exit Function
End Function

'The following subs all call the ClickControl sub, passing the date label that has been clicked.
'A class could have been used to handle the functionality of hovering and clicking on the different controls and then
'declaring each date label as an object of that class. However, that would would require another module.
'Since Trevor's main goal in this project was to have the userform be completely self-contained, he opted for this route.
'**************************************************************************************************************************************************
'User clicked on the background of the date label. Note: Label names reflect a 7 x 6 date label grid with 42 possible date background labels.
Private Sub bgDate1_Click(): ClickControl lblDate1: End Sub
Private Sub bgDate2_Click(): ClickControl lblDate2: End Sub
Private Sub bgDate3_Click(): ClickControl lblDate3: End Sub
Private Sub bgDate4_Click(): ClickControl lblDate4: End Sub
Private Sub bgDate5_Click(): ClickControl lblDate5: End Sub
Private Sub bgDate6_Click(): ClickControl lblDate6: End Sub
Private Sub bgDate7_Click(): ClickControl lblDate7: End Sub
Private Sub bgDate8_Click(): ClickControl lblDate8: End Sub
Private Sub bgDate9_Click(): ClickControl lblDate9: End Sub
Private Sub bgDate10_Click(): ClickControl lblDate10: End Sub
Private Sub bgDate11_Click(): ClickControl lblDate11: End Sub
Private Sub bgDate12_Click(): ClickControl lblDate12: End Sub
Private Sub bgDate13_Click(): ClickControl lblDate13: End Sub
Private Sub bgDate14_Click(): ClickControl lblDate14: End Sub
Private Sub bgDate15_Click(): ClickControl lblDate15: End Sub
Private Sub bgDate16_Click(): ClickControl lblDate16: End Sub
Private Sub bgDate17_Click(): ClickControl lblDate17: End Sub
Private Sub bgDate18_Click(): ClickControl lblDate18: End Sub
Private Sub bgDate19_Click(): ClickControl lblDate19: End Sub
Private Sub bgDate20_Click(): ClickControl lblDate20: End Sub
Private Sub bgDate21_Click(): ClickControl lblDate21: End Sub
Private Sub bgDate22_Click(): ClickControl lblDate22: End Sub
Private Sub bgDate23_Click(): ClickControl lblDate23: End Sub
Private Sub bgDate24_Click(): ClickControl lblDate24: End Sub
Private Sub bgDate25_Click(): ClickControl lblDate25: End Sub
Private Sub bgDate26_Click(): ClickControl lblDate26: End Sub
Private Sub bgDate27_Click(): ClickControl lblDate27: End Sub
Private Sub bgDate28_Click(): ClickControl lblDate28: End Sub
Private Sub bgDate29_Click(): ClickControl lblDate29: End Sub
Private Sub bgDate30_Click(): ClickControl lblDate30: End Sub
Private Sub bgDate31_Click(): ClickControl lblDate31: End Sub
Private Sub bgDate32_Click(): ClickControl lblDate32: End Sub
Private Sub bgDate33_Click(): ClickControl lblDate33: End Sub
Private Sub bgDate34_Click(): ClickControl lblDate34: End Sub
Private Sub bgDate35_Click(): ClickControl lblDate35: End Sub
Private Sub bgDate36_Click(): ClickControl lblDate36: End Sub
Private Sub bgDate37_Click(): ClickControl lblDate37: End Sub
Private Sub bgDate38_Click(): ClickControl lblDate38: End Sub
Private Sub bgDate39_Click(): ClickControl lblDate39: End Sub
Private Sub bgDate40_Click(): ClickControl lblDate40: End Sub
Private Sub bgDate41_Click(): ClickControl lblDate41: End Sub
Private Sub bgDate42_Click(): ClickControl lblDate42: End Sub

'User clicked on the actual date label itself. Note: Label names reflect a 7 x 6 date label grid with 42 possible date labels.
Private Sub lblDate1_Click(): ClickControl lblDate1: End Sub
Private Sub lblDate2_Click(): ClickControl lblDate2: End Sub
Private Sub lblDate3_Click(): ClickControl lblDate3: End Sub
Private Sub lblDate4_Click(): ClickControl lblDate4: End Sub
Private Sub lblDate5_Click(): ClickControl lblDate5: End Sub
Private Sub lblDate6_Click(): ClickControl lblDate6: End Sub
Private Sub lblDate7_Click(): ClickControl lblDate7: End Sub
Private Sub lblDate8_Click(): ClickControl lblDate8: End Sub
Private Sub lblDate9_Click(): ClickControl lblDate9: End Sub
Private Sub lblDate10_Click(): ClickControl lblDate10: End Sub
Private Sub lblDate11_Click(): ClickControl lblDate11: End Sub
Private Sub lblDate12_Click(): ClickControl lblDate12: End Sub
Private Sub lblDate13_Click(): ClickControl lblDate13: End Sub
Private Sub lblDate14_Click(): ClickControl lblDate14: End Sub
Private Sub lblDate15_Click(): ClickControl lblDate15: End Sub
Private Sub lblDate16_Click(): ClickControl lblDate16: End Sub
Private Sub lblDate17_Click(): ClickControl lblDate17: End Sub
Private Sub lblDate18_Click(): ClickControl lblDate18: End Sub
Private Sub lblDate19_Click(): ClickControl lblDate19: End Sub
Private Sub lblDate20_Click(): ClickControl lblDate20: End Sub
Private Sub lblDate21_Click(): ClickControl lblDate21: End Sub
Private Sub lblDate22_Click(): ClickControl lblDate22: End Sub
Private Sub lblDate23_Click(): ClickControl lblDate23: End Sub
Private Sub lblDate24_Click(): ClickControl lblDate24: End Sub
Private Sub lblDate25_Click(): ClickControl lblDate25: End Sub
Private Sub lblDate26_Click(): ClickControl lblDate26: End Sub
Private Sub lblDate27_Click(): ClickControl lblDate27: End Sub
Private Sub lblDate28_Click(): ClickControl lblDate28: End Sub
Private Sub lblDate29_Click(): ClickControl lblDate29: End Sub
Private Sub lblDate30_Click(): ClickControl lblDate30: End Sub
Private Sub lblDate31_Click(): ClickControl lblDate31: End Sub
Private Sub lblDate32_Click(): ClickControl lblDate32: End Sub
Private Sub lblDate33_Click(): ClickControl lblDate33: End Sub
Private Sub lblDate34_Click(): ClickControl lblDate34: End Sub
Private Sub lblDate35_Click(): ClickControl lblDate35: End Sub
Private Sub lblDate36_Click(): ClickControl lblDate36: End Sub
Private Sub lblDate37_Click(): ClickControl lblDate37: End Sub
Private Sub lblDate38_Click(): ClickControl lblDate38: End Sub
Private Sub lblDate39_Click(): ClickControl lblDate39: End Sub
Private Sub lblDate40_Click(): ClickControl lblDate40: End Sub
Private Sub lblDate41_Click(): ClickControl lblDate41: End Sub
Private Sub lblDate42_Click(): ClickControl lblDate42: End Sub

'The following subs all call the HoverControl sub, passing the background of the date label that has been hovered over.
'****************************************************************************************************************************************
'User hovered over the date background. Note: Note: Label names reflect a 7 x 6 date label grid with 42 possible date backbground labels.
Private Sub bgDate1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate1: End Sub
Private Sub bgDate2_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate2: End Sub
Private Sub bgDate3_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate3: End Sub
Private Sub bgDate4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate4: End Sub
Private Sub bgDate5_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate5: End Sub
Private Sub bgDate6_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate6: End Sub
Private Sub bgDate7_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate7: End Sub
Private Sub bgDate8_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate8: End Sub
Private Sub bgDate9_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate9: End Sub
Private Sub bgDate10_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate10: End Sub
Private Sub bgDate11_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate11: End Sub
Private Sub bgDate12_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate12: End Sub
Private Sub bgDate13_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate13: End Sub
Private Sub bgDate14_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate14: End Sub
Private Sub bgDate15_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate15: End Sub
Private Sub bgDate16_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate16: End Sub
Private Sub bgDate17_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate17: End Sub
Private Sub bgDate18_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate18: End Sub
Private Sub bgDate19_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate19: End Sub
Private Sub bgDate20_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate20: End Sub
Private Sub bgDate21_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate21: End Sub
Private Sub bgDate22_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate22: End Sub
Private Sub bgDate23_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate23: End Sub
Private Sub bgDate24_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate24: End Sub
Private Sub bgDate25_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate25: End Sub
Private Sub bgDate26_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate26: End Sub
Private Sub bgDate27_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate27: End Sub
Private Sub bgDate28_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate28: End Sub
Private Sub bgDate29_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate29: End Sub
Private Sub bgDate30_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate30: End Sub
Private Sub bgDate31_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate31: End Sub
Private Sub bgDate32_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate32: End Sub
Private Sub bgDate33_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate33: End Sub
Private Sub bgDate34_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate34: End Sub
Private Sub bgDate35_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate35: End Sub
Private Sub bgDate36_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate36: End Sub
Private Sub bgDate37_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate37: End Sub
Private Sub bgDate38_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate38: End Sub
Private Sub bgDate39_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate39: End Sub
Private Sub bgDate40_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate40: End Sub
Private Sub bgDate41_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate41: End Sub
Private Sub bgDate42_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate42: End Sub

'User hovered over the actual date label.  Note: Label names reflect a 7 x 6 date label grid with 42 possible date labels.
Private Sub lblDate1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate1: End Sub
Private Sub lblDate2_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate2: End Sub
Private Sub lblDate3_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate3: End Sub
Private Sub lblDate4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate4: End Sub
Private Sub lblDate5_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate5: End Sub
Private Sub lblDate6_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate6: End Sub
Private Sub lblDate7_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate7: End Sub
Private Sub lblDate8_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate8: End Sub
Private Sub lblDate9_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate9: End Sub
Private Sub lblDate10_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate10: End Sub
Private Sub lblDate11_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate11: End Sub
Private Sub lblDate12_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate12: End Sub
Private Sub lblDate13_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate13: End Sub
Private Sub lblDate14_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate14: End Sub
Private Sub lblDate15_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate15: End Sub
Private Sub lblDate16_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate16: End Sub
Private Sub lblDate17_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate17: End Sub
Private Sub lblDate18_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate18: End Sub
Private Sub lblDate19_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate19: End Sub
Private Sub lblDate20_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate20: End Sub
Private Sub lblDate21_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate21: End Sub
Private Sub lblDate22_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate22: End Sub
Private Sub lblDate23_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate23: End Sub
Private Sub lblDate24_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate24: End Sub
Private Sub lblDate25_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate25: End Sub
Private Sub lblDate26_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate26: End Sub
Private Sub lblDate27_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate27: End Sub
Private Sub lblDate28_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate28: End Sub
Private Sub lblDate29_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate29: End Sub
Private Sub lblDate30_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate30: End Sub
Private Sub lblDate31_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate31: End Sub
Private Sub lblDate32_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate32: End Sub
Private Sub lblDate33_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate33: End Sub
Private Sub lblDate34_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate34: End Sub
Private Sub lblDate35_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate35: End Sub
Private Sub lblDate36_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate36: End Sub
Private Sub lblDate37_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate37: End Sub
Private Sub lblDate38_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate38: End Sub
Private Sub lblDate39_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate39: End Sub
Private Sub lblDate40_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate40: End Sub
Private Sub lblDate41_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate41: End Sub
Private Sub lblDate42_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single): HoverControl bgDate42: End Sub

'Sub RemoveTitleBar()
'Dim lStyle As Long
'Dim hMenu As Long
'Dim mhWndForm As Long
'  If Val(Application.Version) < 9 Then
'     mhWndForm = FindWindow("ThunderXFrame", Caption)    'for Office 97 version
'  Else
'     mhWndForm = FindWindow("ThunderDFrame", Caption)    'for office 2000 or above
'  End If
'  lStyle = GetWindowLong(mhWndForm, -16)
'  lStyle = lStyle And Not &HC00000
'  SetWindowLong mhWndForm, -16, lStyle
'  DrawMenuBar mhWndForm
'  Height = Height - 24 + (Height - InsideHeight) 'Reduce the height of the form by the height of the title bar
'lbl_Exit:
'  Exit Sub
'End Sub

Private Sub RemoveTitleBar()
Dim lStyle As Long
Dim hMenu As Long
Dim mhWndForm As Long
  Select Case Val(Application.Version)
    Case Is < 9: mhWndForm = FindWindow("ThunderXFrame", Caption)    'for Office 97 version
    Case Else: mhWndForm = FindWindow("ThunderDFrame", Caption)    'for office 2000 and above
  End Select
  lStyle = GetWindowLong(mhWndForm, -16)
  lStyle = lStyle And Not &HC00000
  SetWindowLong mhWndForm, -16, lStyle
  DrawMenuBar mhWndForm
  If Val(Application.Version) > 14 Then
    Height = Height - 29 + (Height - InsideHeight)
  Else
    Height = Height - 22 + (Height - InsideHeight)
  End If
lbl_Exit:
  Exit Sub
End Sub


Attribute VB_Name = "frmDemo"
Attribute VB_Base = "0{79C3B239-F09C-4347-8160-4835E283FFF2}{9F258095-1401-452C-B042-38F6C7F6A097}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdClose_Click()
  Unload Me
End Sub

Private Sub cmdDownload_Click()
 On Error GoTo Err_Link
 ActiveDocument.FollowHyperlink Address:="http://bit.ly/1ossyMA", NewWindow:=True
lbl_Exit:
  Exit Sub
Err_Link:
  MsgBox "The link is broken or the content is no longer available."
  Resume lbl_Exit
End Sub


Private Sub cmdOutput_Click()
  MsgBox "Service date: " & txtDateofService & vbCr _
       & "Date: " & lblSetDate.Caption & vbCr _
       & "Response due date: " & txtResponseDueDate & vbCr _
       & "Date A: " & txtAdvancedDateA & vbCr _
       & "Date B: " & txtAdvancedDateB & vbCr _
       & "Date C: " & txtAdvancedDateC & vbCr _
       & "Date D: " & txtAdvancedDateD
  Unload Me
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Initialize()
  txtDateofService = Format(Now, "MMMM d, yyyy")
lbl_Exit:
  Exit Sub
End Sub

Private Sub txtDateOfService_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  MsgBox "Dismiss this notification and the default calendar will display in the center of the screen." & vbCr + vbCr _
       & "After selecting a date, the calendar closes and the selected date is displayed in the textbox." & vbCr + vbCr _
       & "Use the scroll buttons in the calendar header to advance or regress the displayed calendar or click the diplayed month/year " _
       & "to select a specific month/year." & vbCr + vbCr _
       & "Next review the code corresponding to the ""txtDateOfService"" MouseUp event and you will see that basic employment " _
       & "can't be much simplier i.e., txtDateOfService = frmDatePicker.GetDate" & vbCr + vbCr _
       & "Notes:" & vbCr + vbCr _
       & "1. The default range of years in the year combobox is is ten." & vbCr _
       & "2. If the user closes the calendar without selecting a date, any existing text in the target textbox is removed.", vbInformation + vbOKOnly, "The Anchorage - User Notification"
  'The most basic application.  This is it.  It's all you need ;-)
  txtDateofService = frmDatePicker.GetDate
lbl_Exit:
  Exit Sub
End Sub

Private Sub lblSetDate_Click()
Dim strDatePicked As String
  MsgBox "Here I've passed a single argument (DateBorder:=True) to the frmDatePicker.GetDate function." & vbCr + vbCr _
       & "Arguments are used to customize the calendar by overriding the calendar default values." & vbCr + vbCr _
       & "Note: Some calendar values have minimun and maximum limits e.g., font size.  Arguments passed exceeding " _
       & "these limits are capped at the limits." & vbCr + vbCr _
       & "Note: In this example I've used code in the lblSetDate_Click event to confirm frmDatePicker.GetDate returns a valid date. " _
       & "If the user closes the calendar without selecting a date, the label caption is unchanged.", vbInformation + vbOKOnly, "The Anchorage - User Notification"
  strDatePicked = frmDatePicker.GetDate(DateBorder:=fmBorderStyleSingle)
  If IsDate(strDatePicked) Then
    With lblSetDate
      .Caption = strDatePicked
      'Size label to fit content.
      .Width = frmBasic.Width
      .AutoSize = True
    End With
  End If
End Sub

Private Sub txtResponseDueDate_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim oFrm As New frmDatePicker
Dim dateMin As Date, dateMax As Date
Dim strDatePicked As String
  MsgBox "Here I've passed several arguments (i.e., CustomCaption:=""Select Execution Date"" and a calendar date range " _
       & "(minimum and maximum dates) to the frmDatePicker.GetDate function." & vbCr + vbCr _
       & "The earliest date the user can select is set = the date value applied in the txtDateOfService field earlier. " _
       & "If not defined then the earliest date is set equal the current date." & vbCr + vbCr _
       & "The latest date the user can select is set = the earliest date plus two months." & vbCr + vbCr _
       & "In this exmaple, I've used code in the ""txtResponseDueDate"" MouseUP event to ensure the maximum (latest date) " _
       & "is applied in the txtResponseDueDate field if the user closes the calendar without selecting a date.", vbInformation + vbOKOnly, "The Anchorage - User Notification"
  If IsDate(txtDateofService) Then
    dateMin = CDate(txtDateofService)
  Else
    dateMin = DateValue(Now)
  End If
  strDatePicked = oFrm.GetDate(CustomCaption:="Select Execution Date", MinimumDate:=dateMin, MaximumDate:=DateAdd("M", 2, dateMin))
  If IsDate(strDatePicked) Then
    txtResponseDueDate = strDatePicked
  Else
    txtResponseDueDate = Format(DateAdd("M", 2, dateMin), "MMMM d, yyyy")
  End If
lbl_Exit:
  Exit Sub
End Sub
'Form this point on, I'm going to employ a universal procedure and position the DatePicker under the control of interest.

'Multiple events will fire QueryDatePicker for txtAdvancedDateA.
Private Sub cmdAdvDateA_Click()
  QueryDatePicker txtAdvancedDateA
End Sub
Private Sub txtAdvancedDateA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  QueryDatePicker txtAdvancedDateA
End Sub
Private Sub txtAdvancedDateA_Enter()
  QueryDatePicker txtAdvancedDateA
End Sub

Private Sub cmdAdvDateB_Click()
  QueryDatePicker txtAdvancedDateB
End Sub
Private Sub txtAdvancedDateB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  QueryDatePicker txtAdvancedDateB
End Sub
Private Sub txtAdvancedDateB_Enter()
  QueryDatePicker txtAdvancedDateB
End Sub

Private Sub cmdAdvDateC_Click()
  QueryDatePicker txtAdvancedDateC
End Sub
Private Sub txtAdvancedDateC_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  QueryDatePicker txtAdvancedDateC
End Sub
Private Sub txtAdvancedDateC_Enter()
  QueryDatePicker txtAdvancedDateC
End Sub

Private Sub cmdAdvDateD_Click()
  QueryDatePicker txtAdvancedDateD
End Sub
Private Sub txtAdvancedDateD_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  QueryDatePicker txtAdvancedDateD
End Sub
Private Sub txtAdvancedDateD_Enter()
  QueryDatePicker txtAdvancedDateD
End Sub

Private Sub cmdAdvDateE_Click()
  'Passed strCmd as a named argument.
  QueryDatePicker strCmd:="Insert Date"
End Sub

Private Sub QueryDatePicker(Optional oCtrlTarget As Control, Optional oCtrlTrigger As Control, Optional strCmd As String)
'QueryDatePicker takes a control as an argument so you can use it to set date string values in multiple controls.
Dim dateToPick As Date, dateMin As Date, dateMax As Date
Dim strDatePicked As String
Dim lngFormTop As Long, lngFormLeft As Long
Dim oFrm As New frmDatePicker
Dim strExecute As String
  If Not oCtrlTarget Is Nothing Then
    If oCtrlTarget.Value <> vbNullString Then
      If IsDate(oCtrlTarget.Value) Then
        dateToPick = CDate(oCtrlTarget.Value)
      Else
        dateToPick = Date
      End If
    End If
    'Position calendar. This can take some finesse because of the changes between Word 2010 and later versions.
    If Application.Version > 14 Then
      lngFormTop = Top + (Height - InsideHeight) + frmAdvanced.Top + oCtrlTarget.Top + oCtrlTarget.Height
      lngFormLeft = Left + (Width - InsideWidth) + frmAdvanced.Left + oCtrlTarget.Left - 3
    Else
      lngFormTop = Top + (Height - InsideHeight) + frmAdvanced.Top + oCtrlTarget.Top + oCtrlTarget.Height + 9
      lngFormLeft = Left + (Width - InsideWidth) + frmAdvanced.Left + oCtrlTarget.Left + 3
    End If
    'Get date.
    Select Case oCtrlTarget.Name
      Case "txtAdvancedDateA"

          strDatePicked = oFrm.GetDate(ShowTitleBar:=False, CancelButton:=True, PositionTop:=lngFormTop, PositionLeft:=lngFormLeft, _
                                       SaturdayFontColor:=wdColorGreen, _
                                       SundayFontColor:=wdColorBlue, CustomCaption:="Mini", _
                                       DateFontSize:=6, FontName:="Arial")
      Case "txtAdvancedDateB"
          strDatePicked = oFrm.GetDate(DateFontSize:=7, PositionLeft:=lngFormLeft, _
                                       PositionTop:=lngFormTop, StartDayOfWeek:=Monday, _
                                       TodayButton:=True, OKButton:=True, _
                                       ShowWeekNumbers:=True, FirstWeekOfYear:=FirstFourDays, _
                                       DateFormat:="dddd, MMMM dd yyyy", _
                                       CustomCaption:="Fancy Font", _
                                       ShowSepLine:=True, FontName:="Brush Script MT")
        Case "txtAdvancedDateC"
          strDatePicked = oFrm.GetDate(dateToPick:=DateAdd("d", 10, DateValue(Now)), _
                                       PositionTop:=lngFormTop, PositionLeft:=lngFormLeft, _
                                       RangeOfYears:=5, DateFontSize:=12, OKButton:=True, _
                                       TodayBGShading:=wdColorLightGreen, _
                                       DateSpecialEffect:=fmSpecialEffectEtched, _
                                       DatePickedBGColor:=wdColorTan, _
                                       TodayBGBorderStyle:=1, TodayFontColor:=wdColorRed)
                                       
        Case "txtAdvancedDateD"
          strDatePicked = oFrm.GetDate(dateToPick:=DateAdd("d", 2, Now), MaximumDate:=DateAdd("d", 10, DateValue(Now)), _
                                      MinimumDate:=DateAdd("d", -10, DateValue(Now)), _
                                      DateFontSize:=30, TodayButton:=True, OKButton:=True, ShowWeekNumbers:=True, _
                                      FirstWeekOfYear:=FirstFullWeek, StartDayOfWeek:=Wednesday, BackgroundColor:=wdColorLime, _
                                      HeaderColor:=wdColorBlack, HeaderFontColor:=wdColorYellow, _
                                      NegativeButtons:=False, SubHeaderColor:=wdColorRose, SubHeaderFontColor:=wdColorPink, _
                                      DateBackgroundColor:=wdColorLightBlue, DateFontColor:=wdColorOrange, _
                                      SaturdayFontColor:=wdColorTan, SundayFontColor:=wdColorLightTurquoise, _
                                      DateBorder:=fmBorderStyleSingle, DateBorderColor:=wdColorBrightGreen, _
                                      DateHoverColor:=wdColorLavender, DatePickedBGColor:=wdColorGold, _
                                      AdjacentMonthDateLabelFontColor:=wdColorSkyBlue, DateFormat:="dd MMM yy", _
                                      TodayFontColor:=wdColorGreen, TodayBGShading:=wdColorLightGreen, _
                                      RestrictedDateBGColor:=wdColorPlum, FontName:="Curlz MT", _
                                      CustomCaption:="Rainbow Calendar - Maximum Size")
     End Select
     'If a date string is return display it in the control.
     If strDatePicked <> vbNullString Then oCtrlTarget.Value = strDatePicked
   Else
     Select Case strCmd
       Case "Insert Date"
         strDatePicked = oFrm.GetDate(dateToPick:=Date, DateFontSize:=22, TodayButton:=False, OKButton:=True, _
                                     ShowWeekNumbers:=True, FirstWeekOfYear:=FirstFourDays, BackgroundColor:=10653569, _
                                     HeaderColor:=4076587, HeaderFontColor:=13352870, NegativeButtons:=True, SubHeaderColor:=6315344, _
                                     SubHeaderFontColor:=13352870, DateBackgroundColor:=13352870, DateFontColor:=4076587, SaturdayFontColor:=15794175, _
                                     SundayFontColor:=15794175, DateSpecialEffect:=fmSpecialEffectSunken, DateHoverColor:=wdColorLightGreen, _
                                     DatePickedBGColor:=wdColorBlue, DatePickedLabelColor:=wdColorGold, AdjacentMonthDateLabelFontColor:=6291584, _
                                     DateFormat:=("MMMM dd, yyyy"), TodayFontColor:=32768, TodayBGShading:=13088683, ShowSepLine:=False, _
                                     CustomCaption:="Word Calendar - Curtesy of Greg Maxey (The Anchorage) and Trevor Eyre", FontName:="Tahoma")
        If IsDate(strDatePicked) Then
          Selection.Collapse wdCollapseEnd
          Selection.Range.Text = strDatePicked
        End If
    End Select
  End If
lbl_Exit:
  Set oFrm = Nothing
  Exit Sub
End Sub




Attribute VB_Name = "modDemo"
Option Explicit
Sub DemoDP()
Dim oFrm As New frmDemo
  oFrm.Show
lbl_Exit:
  Exit Sub
End Sub

Sub MyWordCalendar()
Dim strDatePicked As String
Dim oFrm As New frmDatePicker
  strDatePicked = oFrm.GetDate(dateToPick:=Date, DateFontSize:=22, OKButton:=False, TodayButton:=True, _
                               ShowWeekNumbers:=True, FirstWeekOfYear:=FirstFourDays, BackgroundColor:=10653569, _
                               HeaderColor:=4076587, HeaderFontColor:=13352870, NegativeButtons:=True, SubHeaderColor:=6315344, _
                               SubHeaderFontColor:=13352870, DateBackgroundColor:=13352870, DateFontColor:=4076587, SaturdayFontColor:=15794175, _
                               SundayFontColor:=15794175, DateSpecialEffect:=fmSpecialEffectSunken, DateHoverColor:=wdColorLightGreen, _
                               DatePickedBGColor:=wdColorBlue, DatePickedLabelColor:=wdColorGold, AdjacentMonthDateLabelFontColor:=6291584, _
                               DateFormat:=("MMMM dd, yyyy"), TodayFontColor:=32768, TodayBGShading:=13088683, ShowSepLine:=False, _
                               CustomCaption:="Word Calendar - Curtesy of Greg Maxey (The Anchorage) and Trevor Eyre", FontName:="Tahoma")
  If IsDate(strDatePicked) Then
    Selection.Collapse wdCollapseEnd
    Selection.Range.Text = strDatePicked
  End If
lbl_Exit:
  Exit Sub
End Sub

Sub QueryColor()
'If you have a favorite color and can get its corresponding Red, Green and Blue values from a
'Word Color Piker dialog, you can use them to get the long values necessary to apply that color as an argument value.
Dim lngColorVal As Long
  'For example:
  lngColorVal = fcnExtractLongFromRBG(255, 0, 255)
  MsgBox lngColorVal
  Debug.Print lngColorVal
End Sub

Function fcnExtractLongFromRBG(lngR As Long, lngG As Long, lngB As Long)
Dim lngColor As Long
  lngColor = RGB(lngR, lngG, lngB)
  fcnExtractLongFromRBG = lngColor
lbl_Exit:
  Exit Function
End Function

Sub RiddleMeThis()
'A basic Word macro coded by Greg Maxey to
Dim oDate As Date
  MsgBox Month(oDate) & "/" & Day(oDate) & "/" & Year(oDate)
  MsgBox CDbl(CDate("1/1/100 00:00:00 AM"))  'A large negative value and earliest date accurately retured
  MsgBox CDbl(CDate("12/29/1899 4:00:00 PM"))  'A small negative value close to the reference
  MsgBox CDbl(CDate("12/30/1899 12:00:00 AM")) 'The 0 reference point for all past and future dates.
  MsgBox CDbl(CDate("12/31/1899 04:00:00 AM")) 'A small positive value close to the reference
  MsgBox CDbl(Date) 'A large positive value today's date
  MsgBox CDbl(CDate("12/31/2999"))
  MsgBox CDate("12/29/1899 4:00:00 PM")  'Returns a valid date value
  MsgBox CDate("12/31/1899 04:00:00 AM") 'Returns a valid date value
  MsgBox oDate 'Returns a dog's breakfast
  MsgBox CDate("12/30/1899 12:00:00 AM") 'Returns a dog's breakfast
lbl_Exit:
  Exit Sub
End Sub

Sub SimpleUse()
  UserForm1.Show
End Sub


INQUEST-PP=macro
