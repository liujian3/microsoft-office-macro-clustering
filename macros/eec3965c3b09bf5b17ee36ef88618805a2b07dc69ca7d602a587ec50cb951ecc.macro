Attribute VB_Name = "Common"

'*********************************************************************8
'***
'*    Common Module across ALL Workbooks except EntFuncs.Xls
'***
'*********************************************************************8

Option Explicit
Option Private Module

Global EntServer As Object
Global ServerSet As Boolean


' returns True if the passed Nominal Code is valid
Public Function ValidCompany(Company$) As Boolean
    Company$ = Trim(Company$)
    
    If (Len(Company) > 0) And (Len(Company) <= 6) Then
        ValidCompany = True
    Else
        Error 516
        ValidCompany = False
    End If
End Function
 

' returns True if the passed General Ledger Code is valid
Public Function ValidGLCode(GLCode As Long) As Boolean
    If (GLCode <= 0) Then
        If (GLCode < 0) Then
            Error 511
        End If
        
        ValidGLCode = False
    Else
        ValidGLCode = True
    End If
End Function


' returns True if the passed year is valid
Public Function ValidYear(TheYear%) As Boolean
    If ((TheYear > 1900) And (TheYear < 2100)) Or (TheYear = -99) Then
        ' Actual Year or F6 Year
        ValidYear = True
    Else
        Error 512
        ValidYear = False
    End If
End Function


' returns True if the passed period is valid
Public Function ValidPeriod(ThePeriod%) As Boolean
    If ((ThePeriod >= 0) And (ThePeriod <= 99)) Or (ThePeriod = -99) Or (ThePeriod = -98) Or ((ThePeriod >= 101) And (ThePeriod <= 199)) Then
        ' Actual Period or F6 Period or CTD or CTD Period Offset
        ValidPeriod = True
    Else
        Error 513
        ValidPeriod = False
    End If
End Function


' returns True if the passed currency is valid
Public Function ValidCcy(TheCcy%) As Boolean
    If (TheCcy < 0) Or (TheCcy > 90) Then
        Error 514
        ValidCcy = False
    Else
        ValidCcy = True
    End If
End Function


' returns true if the passed customer code is valid
Public Function ValidCustCode(CustCode$, CSType$) As Boolean
    CustCode$ = UCase(Trim(CustCode$))

    If (Len(CustCode) > 0) And (Len(CustCode) <= 6) Then
        ValidCustCode = True
    Else
        ValidCustCode = False
        If (CSType$ = "C") Then
            Error 515
        Else
            Error 526
        End If
    End If
End Function

' returns True if the passed Stock Code is valid
Public Function ValidStockCode(StockCode$) As Boolean
    StockCode$ = UCase(Trim(StockCode$))
    
    ValidStockCode = True
End Function

' returns True if the passed Stock Code is valid
Public Function ValidLocation(LocCode$) As Boolean
    LocCode$ = UCase(Trim(LocCode$))
    
    If (Len(LocCode$) > 0) And (Len(LocCode$) <= 3) Then
        ValidLocation = True
    Else
        ValidLocation = False
        Error 527
    End If
End Function

' returns True if the passed Nominal Code is valid
Public Function ValidCCDep(IsCC%, ByRef CCDep$) As Boolean
    CCDep$ = UCase(Trim(CCDep$))

    If (Len(CCDep$) >= 0) And (Len(CCDep$) <= 3) Then
        ValidCCDep = True
    Else
        If IsCC% = True Then
            Error 519
        Else
            Error 520
        End If
        ValidCCDep = False
    End If
End Function


' Returns True if the passed JC Total Type is valid
Public Function ValidTotType(TType%) As Boolean
    If (TType% = 10) Or (TType% = 20) Or (TType% = 30) Or (TType% = 40) Or (TType% = 50) Or (TType% = 60) Or (TType% = 99) Or (TType% = 160) Or (TType% = 170) Or (TType% = 180) Or (TType% = 190) Then
        ValidTotType = True
    Else
        Error 531
        ValidTotType = False
    End If
End Function


' returns True if the passed Stock Code is valid
Public Function ValidJobCode(JobCode$) As Boolean
    JobCode$ = UCase(Trim(JobCode$))
    
    If (Len(JobCode$) > 0) And (Len(JobCode$) <= 10) Then
        ValidJobCode = True
    Else
        ValidJobCode = False
        Error 521
    End If
End Function

' returns true if the passed Employee Code is valid
Public Function ValidEmployeeCode(EmplCode$, AllowBlank%) As Boolean
    EmplCode$ = UCase(Trim(EmplCode$))
    
    If (Len(EmplCode$) > 0) And (Len(EmplCode$) <= 6) Then
        ValidEmployeeCode = True
    Else
        ' Check for Blank Codes - OK under certain circumstances
        If AllowBlank% And (Len(EmplCode$) = 0) Then
            ValidEmployeeCode = True
        Else
            ValidEmployeeCode = False
            Error 564
        End If
    End If
End Function

' returns true if the passed Time-Rate Code is valid
Public Function ValidTimeRateCode(RateCode$) As Boolean
    RateCode$ = UCase(Trim(RateCode$))

    If (Len(RateCode$) > 0) And (Len(RateCode$) <= 10) Then
        ValidTimeRateCode = True
    Else
        ValidTimeRateCode = False
        Error 565
    End If
End Function


' returns true if the passed Analysis Code is valid
Public Function ValidAnalCode(AnalCode$) As Boolean
    AnalCode$ = UCase(Trim(AnalCode$))

    If (Len(AnalCode$) > 0) And (Len(AnalCode$) <= 10) Then
        ValidAnalCode = True
    Else
        ValidAnalCode = False
        Error 522
    End If
End Function


' returns True if the passed date is valid
Public Function ValidDate(TheDate$, ActDate As Date, ErrNo%) As Boolean
On Error GoTo ValidDate_Error

    If IsDate(TheDate) Then
        ValidDate = True
        ActDate = CDate(TheDate$)
    Else
        ValidDate = False
        Error ErrNo%
    End If
    
    GoTo ValidDate_Exit
    
ValidDate_Error:
    Error ErrNo%
    ValidDate = False

ValidDate_Exit:
End Function


' Validates the Posted/Committed parameter used in some JC history functions
Public Function ValidPC(PCStr$) As Boolean
    PCStr$ = UCase(PCStr$)
    
    If (Len(PCStr$) = 1) And ((Left$(PCStr$, 1) = "P") Or (Left$(PCStr$, 1) = "C")) Then
        ' 1 Char long and "P" or "C"
        ValidPC = True
    Else
        Error 533       ' Invalid Posted/Commited Flag
        ValidPC = False
    End If
End Function


' returns a formatted error string
Public Function GetErrorStr() As String
    GetErrorStr = "Error (" + Trim(Str(Err)) + "): " + EntErrorStr(Err)
End Function


' returns a formatted error string for number fields
Public Function GetErrorNumStr() As String
    GetErrorNumStr = "#(" + Trim(Str(Err)) + "): " + EntErrorStr(Err)
End Function


' Checks for the local server, and gets the server from EntFuncs.XLA if necessary
Public Function LocalCheckServer() As Boolean
On Error GoTo LocalCheckServer_Error

    If Not ServerSet Then
        ' Server Not Running - Start server
        If ZSYS9194(719, EntServer) Then
            ServerSet = True
        Else
            ServerSet = False
        End If
    End If

    ' Finish procedure without causing an error
    LocalCheckServer = ServerSet
    GoTo LocalCheckServer_Exit
    
LocalCheckServer_Error:
    Error 500
    LocalCheckServer = False

LocalCheckServer_Exit:
End Function

Attribute VB_Name = "GetApps"

Option Explicit




' Gets a specified Job Applications value by Job / Analysis Code
Private Function GetJobAppsValue(ValueReq%, Company$, JobCode$, AnalCode$) As Variant
On Error GoTo GetJobAppsValue_Error

    Dim DblVal As Double, RetVal%
     
    DblVal# = 0#
    
    If ValidCompany(Company) And ValidJobCode(JobCode$) Then
        If LocalCheckServer() Then
            RetVal% = EntServer.GetJobAppsValue(Company$, JobCode$, AnalCode$, ValueReq%, DblVal#)
            
            If (RetVal% = 0) Then
                GetJobAppsValue = DblVal
            Else
                Error RetVal%
            End If
        End If
    End If
    
    Exit Function
        
GetJobAppsValue_Error:
    GetJobAppsValue = GetErrorNumStr
End Function


'*******************************************************************************
' Name:        entJCPurchaseApplied
' Description: Returns the cumulative-to-date Applied Total for the Purchase
'              Applications on the specified Job, the Analysis Code can be left
'              blank for a total for the Job or can be used to return a total
'              for an individual Analysis Code
'*******************************************************************************
Public Function entJCPurchaseApplied(Company$, JobCode$, AnalCode$) As Variant
Attribute entJCPurchaseApplied.VB_Description = "Returns the Applied Total from the Purchase Applications for the Job Code and Analysis Code requested"
Attribute entJCPurchaseApplied.VB_HelpID = 20563
Attribute entJCPurchaseApplied.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCPurchaseApplied = GetJobAppsValue(1, Company$, JobCode$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCPurchaseCertified
' Description: Returns the cumulative-to-date Certified Total for the Purchase
'              Applications on the specified Job, the Analysis Code can be left
'              blank for a total for the Job or can be used to return a total
'              for an individual Analysis Code
'*******************************************************************************
Public Function entJCPurchaseCertified(Company$, JobCode$, AnalCode$) As Variant
Attribute entJCPurchaseCertified.VB_Description = "Returns the Certified Total from the Purchase Applications for the Job Code and Analysis Code requested"
Attribute entJCPurchaseCertified.VB_HelpID = 20564
Attribute entJCPurchaseCertified.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCPurchaseCertified = GetJobAppsValue(2, Company$, JobCode$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCSalesApplied
' Description: Returns the cumulative-to-date Applied Total for the Sales
'              Applications on the specified Job, the Analysis Code can be left
'              blank for a total for the Job or can be used to return a total
'              for an individual Analysis Code
'*******************************************************************************
Public Function entJCSalesApplied(Company$, JobCode$, AnalCode$) As Variant
Attribute entJCSalesApplied.VB_Description = "Returns the Applied Total from the Sales Applications for the Job Code and Analysis Code requested"
Attribute entJCSalesApplied.VB_HelpID = 20566
Attribute entJCSalesApplied.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCSalesApplied = GetJobAppsValue(101, Company$, JobCode$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCSalesCertified
' Description: Returns the cumulative-to-date Certified Total for the Sales
'              Applications on the specified Job, the Analysis Code can be left
'              blank for a total for the Job or can be used to return a total
'              for an individual Analysis Code
'*******************************************************************************
Public Function entJCSalesCertified(Company$, JobCode$, AnalCode$) As Variant
Attribute entJCSalesCertified.VB_Description = "Returns the Certified Total from the Sales Applications for the Job Code and Analysis Code requested"
Attribute entJCSalesCertified.VB_HelpID = 20567
Attribute entJCSalesCertified.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCSalesCertified = GetJobAppsValue(102, Company$, JobCode$, AnalCode$)
End Function
Attribute VB_Name = "GetCustomer"
Option Explicit

' Gets a specified Job Applications value by Job / Subcontractor / Analysis Code
Private Function GetJobAppsCustomerValue(ValueReq%, Company$, JobCode$, CustCode$, AnalCode$) As Variant
On Error GoTo GetJobAppsCustomerValue_Error

    Dim DblVal As Double, RetVal%
     
    DblVal# = 0#
    
    If ValidCompany(Company) And ValidJobCode(JobCode$) And ValidCustCode(CustCode$, "C") Then
        If LocalCheckServer() Then
            RetVal% = EntServer.GetJobAppsCustomerValue(Company$, JobCode$, CustCode$, AnalCode$, ValueReq%, DblVal#)
            
            If (RetVal% = 0) Then
                GetJobAppsCustomerValue = DblVal
            Else
                Error RetVal%
            End If
        End If
    End If
    
    Exit Function
        
GetJobAppsCustomerValue_Error:
    GetJobAppsCustomerValue = GetErrorNumStr
End Function


'*******************************************************************************
' Name:        entJCCustomerApplied
' Description: Returns the cumulative-to-date Applied Total for the Sales
'              Applications on the specified Job for the specified Customer.
'              The Analysis Code can be left blank for a total for the Job or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCCustomerApplied(Company$, JobCode$, CustCode$, AnalCode$) As Variant
Attribute entJCCustomerApplied.VB_Description = "Returns the Applied Total for the Job Code, Customer Code and Analysis Code requested"
Attribute entJCCustomerApplied.VB_HelpID = 20561
Attribute entJCCustomerApplied.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCCustomerApplied = GetJobAppsCustomerValue(1, Company$, JobCode$, CustCode$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCCustomerCertified
' Description: Returns the cumulative-to-date Certified Total for the Sales
'              Applications on the specified Job for the specified Customer.
'              The Analysis Code can be left blank for a total for the Job or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCCustomerCertified(Company$, JobCode$, CustCode$, AnalCode$) As Variant
Attribute entJCCustomerCertified.VB_Description = "Returns the Certified Total for the Job Code, Customer Code and Analysis Code requested"
Attribute entJCCustomerCertified.VB_HelpID = 20562
Attribute entJCCustomerCertified.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCCustomerCertified = GetJobAppsCustomerValue(2, Company$, JobCode$, CustCode$, AnalCode$)
End Function


Attribute VB_Name = "GetSubContractor"
Option Explicit

' Gets a specified Job Applications value by Job / Subcontractor / Analysis Code
Private Function GetJobAppsSubContractorValue(ValueReq%, Company$, JobCode$, SubContractor$, AnalCode$) As Variant
On Error GoTo GetJobAppsSubContractorValue_Error

    Dim DblVal As Double, RetVal%
     
    DblVal# = 0#
    
    If ValidCompany(Company) And ValidJobCode(JobCode$) Then
        If LocalCheckServer() Then
            RetVal% = EntServer.GetJobAppsSubContractorValue(Company$, JobCode$, SubContractor$, AnalCode$, ValueReq%, DblVal#)
            
            If (RetVal% = 0) Then
                GetJobAppsSubContractorValue = DblVal
            Else
                Error RetVal%
            End If
        End If
    End If
    
    Exit Function
        
GetJobAppsSubContractorValue_Error:
    GetJobAppsSubContractorValue = GetErrorNumStr
End Function


'*******************************************************************************
' Name:        entJCSubContractorApplied
' Description: Returns the cumulative-to-date Applied Total for the Purchase
'              Applications on the specified Job for the specified Sub-Contractor.
'              The Analysis Code can be left blank for a total for the Job or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCSubContractorApplied(Company$, JobCode$, SubContractor$, AnalCode$) As Variant
Attribute entJCSubContractorApplied.VB_Description = "Returns the Applied Total from the Purchase Applications for the Job Code, Sub Contractor and Analysis Code requested"
Attribute entJCSubContractorApplied.VB_HelpID = 20569
Attribute entJCSubContractorApplied.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCSubContractorApplied = GetJobAppsSubContractorValue(1, Company$, JobCode$, SubContractor$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCSubContractorCertified
' Description: Returns the cumulative-to-date Certified Total for the Purchase
'              Applications on the specified Job for the specified Sub-Contractor.
'              The Analysis Code can be left blank for a total for the Job or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCSubContractorCertified(Company$, JobCode$, SubContractor$, AnalCode$) As Variant
Attribute entJCSubContractorCertified.VB_Description = "Returns the Certified Total from the Purchase Applications for the Job Code, Sub contractor and Analysis Code requested"
Attribute entJCSubContractorCertified.VB_HelpID = 20570
Attribute entJCSubContractorCertified.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCSubContractorCertified = GetJobAppsSubContractorValue(2, Company$, JobCode$, SubContractor$, AnalCode$)
End Function


Attribute VB_Name = "GetTerms"
Option Explicit


'*******************************************************************************
' Name:        entJCTermsBasis
' Description: Returns the Basis (Incremental/Gross Incremental/Gross) from the
'              specified Purchase/Sales/Contract Terms
'              NOTE: The full OurRef of the Terms must be specified,e.g. JPT000001
'*******************************************************************************
Public Function entJCTermsBasis(Company$, TermsOurRef$) As Variant
Attribute entJCTermsBasis.VB_Description = "Returns the Basis (Incremental/Gross Incremental/Gross) for the specified terms"
Attribute entJCTermsBasis.VB_HelpID = 20572
Attribute entJCTermsBasis.VB_ProcData.VB_Invoke_Func = " \n14"
On Error GoTo entJCTermsBasis_Error

    Dim ContractBasis$
    Dim IntVal%

    If ValidCompany(Company) Then
        If LocalCheckServer() Then
            ' Returns the Basis (Incremental, Gross Inc, Gross) for the specified Terms
            IntVal% = EntServer.GetJobTermsBasis(Company$, TermsOurRef$, ContractBasis$)
         
            If (IntVal = 0) Then
                entJCTermsBasis = ContractBasis$
            Else
                Error IntVal%
            End If
        End If ' LocalCheckServer()
    End If ' ValidCompany(Company)
     
    Exit Function
           
entJCTermsBasis_Error:
    entJCTermsBasis = GetErrorStr$
End Function


' Gets a specified Job Terms value by Terms OurRef and optional Analysis Code
Private Function GetJobTermsValue(ValueReq%, Company$, OurRef$, AnalCode$) As Variant
On Error GoTo GetJobTermsValue_Error

    Dim DblVal As Double, RetVal%
     
    DblVal# = 0#
    
    If ValidCompany(Company) Then
        If LocalCheckServer() Then
            RetVal% = EntServer.GetJobTermsValue(Company$, OurRef$, AnalCode$, ValueReq%, DblVal#)
            
            If (RetVal% = 0) Then
                GetJobTermsValue = DblVal
            Else
                Error RetVal%
            End If
        End If
    End If
    
    Exit Function
        
GetJobTermsValue_Error:
    GetJobTermsValue = GetErrorNumStr
End Function


'*******************************************************************************
' Name:        entJCTermsApplied
' Description: Returns the cumulative-to-date Applied Total for the specified Terms.
'              The Analysis Code can be left blank for a total for the Terms or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCTermsApplied(Company$, TermsOurRef$, AnalCode$) As Variant
Attribute entJCTermsApplied.VB_Description = "Returns the Cumulative to-date Applied Total for the specified terms and Analysis Code"
Attribute entJCTermsApplied.VB_HelpID = 20571
Attribute entJCTermsApplied.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCTermsApplied = GetJobTermsValue(1, Company$, TermsOurRef$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCTermsCertified
' Description: Returns the cumulative-to-date Certified Total for the specified Terms.
'              The Analysis Code can be left blank for a total for the Terms or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCTermsCertified(Company$, TermsOurRef$, AnalCode$) As Variant
Attribute entJCTermsCertified.VB_Description = "Returns the Cumulative to-date Certified Total for the specified terms and Analysis Code"
Attribute entJCTermsCertified.VB_HelpID = 20574
Attribute entJCTermsCertified.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCTermsCertified = GetJobTermsValue(2, Company$, TermsOurRef$, AnalCode$)
End Function


'*******************************************************************************
' Name:        entJCTermsBudget
' Description: Returns the Budget for the specified Terms.
'              The Analysis Code can be left blank for a total for the Terms or can
'              be used to return a total for an individual Analysis Code
'*******************************************************************************
Public Function entJCTermsBudget(Company$, TermsOurRef$, AnalCode$) As Variant
Attribute entJCTermsBudget.VB_Description = "Returns the Budget for the specified terms (JPT/JCT/JST) and Analysis Code"
Attribute entJCTermsBudget.VB_HelpID = 20573
Attribute entJCTermsBudget.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCTermsBudget = GetJobTermsValue(3, Company$, TermsOurRef$, AnalCode$)
End Function
Attribute VB_Name = "GetValuationHistory"

Option Explicit


' Gets a specified Job Budget History value
Private Function GetJCValue(ValueReq%, BT$, TType%, PCChar$, Company$, TheYear%, ThePeriod%, TheCcy%, JobCode$, StockCode$) As Variant
On Error GoTo GetJCValue_Error
    Dim CompStr$, Ty%, Tp%, TC%, Mode As Integer
    Dim DblVal As Double, RetVal%, BudgType$, TotType%, Commit%, JCode$, SCode$
     
    DblVal# = 0#
    
    If ValidCompany(Company) And ValidYear(TheYear) And ValidPeriod(ThePeriod) And ValidCcy(TheCcy) And ValidTotType(TType%) And ValidJobCode(JobCode$) And ValidStockCode(StockCode$) And ValidPC(PCChar$) Then
        If LocalCheckServer() Then
            Mode = ValueReq%
            CompStr$ = UCase(Company$)
            BudgType$ = BT$
            TotType% = TType%
            If (UCase(Trim(PCChar$)) = "P") Then
                Commit% = 0
            Else
                Commit% = 1
            End If
            Ty% = TheYear%
            Tp% = ThePeriod%
            TC% = TheCcy%
            JCode$ = UCase$(JobCode$)
            SCode$ = UCase$(StockCode$)
                        
            RetVal% = EntServer.GetJCBudgetValue(Mode%, CompStr$, BudgType$, TotType%, Commit%, Ty%, Tp%, TC%, JCode$, SCode$, DblVal#)
            
            If (RetVal% <> 0) Then
                Error RetVal%
            End If
        End If
    End If
      
    GetJCValue = DblVal
    
    GoTo GetJCValue_Exit
        
GetJCValue_Error:
    GetJCValue = GetErrorNumStr

GetJCValue_Exit:
    
End Function


' HM 17/03/04: Removed as EL not setting this figure
'*******************************************************************************
' Name:        EntJCTotValuationToDate
' Description: Gets the Valuation To Date figure from the Totals Budget for the
'              specified Job/Contract Code
'*******************************************************************************
'Public Function EntJCTotValuationToDate(Company$, Category%, JobCode$) As Variant
'    EntJCTotValuationToDate = GetJCValue(7, "M", Category%, "P", Company$, 2004, 1, 0, JobCode$, "1")
'End Function
 
 
'*******************************************************************************
' Name:        EntJCAnalValuationToDate
' Description: Gets the Valuation To Date figure from the Analysis Budget for the
'              specified Job/Contract Code.
'*******************************************************************************
Public Function EntJCAnalValuationToDate(Company$, JobCode$, AnalysisCode$) As Variant
Attribute EntJCAnalValuationToDate.VB_Description = "Gets the Valuation to date for the Company, Job Code and Analysis Code requested"
Attribute EntJCAnalValuationToDate.VB_HelpID = 20559
Attribute EntJCAnalValuationToDate.VB_ProcData.VB_Invoke_Func = " \n14"
    EntJCAnalValuationToDate = GetJCValue(7, "B", 10, "P", Company$, 2004, 1, 0, JobCode$, AnalysisCode$)
End Function
 
'*******************************************************************************
' Name:        EntJCAnalNextValuationAmount
' Description: Gets the Next Valuation Amount figure from the Analysis Budget
'              for the specified Job Code.
'*******************************************************************************
Public Function EntJCAnalNextValuationAmount(Company$, JobCode$, AnalysisCode$) As Variant
Attribute EntJCAnalNextValuationAmount.VB_Description = "Gets the Next Valuation Amount for the Company, Job Code and Analysis Code requested"
Attribute EntJCAnalNextValuationAmount.VB_HelpID = 20555
Attribute EntJCAnalNextValuationAmount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntJCAnalNextValuationAmount = GetJCValue(8, "B", 10, "P", Company$, 2004, 1, 0, JobCode$, AnalysisCode$)
End Function

'*******************************************************************************
' Name:        EntJCAnalNextValuationPercentage
' Description: Gets the Next Valuation Percentage figure from the Analysis Budget
'              for the specified Job Code, not applicable to Contract Codes
'*******************************************************************************
Public Function EntJCAnalNextValuationPercentage(Company$, JobCode$, AnalysisCode$) As Variant
Attribute EntJCAnalNextValuationPercentage.VB_Description = "Gets the Next Valuation Percentage for the Company, Job Code and Analysis Code requested"
Attribute EntJCAnalNextValuationPercentage.VB_HelpID = 20556
Attribute EntJCAnalNextValuationPercentage.VB_ProcData.VB_Invoke_Func = " \n14"
    EntJCAnalNextValuationPercentage = GetJCValue(9, "B", 10, "P", Company$, 2004, 1, 0, JobCode$, AnalysisCode$)
End Function

Attribute VB_Name = "LineType Totals"
Option Explicit


Private Function LineTypeTotal(Company$, TermsOurRef$, LineType%) As Variant
On Error GoTo LineTypeTotal_Error

    Dim RetVal#
    Dim IntVal%

    If ValidCompany(Company) Then
        If LocalCheckServer() Then
            ' Returns the Basis (Incremental, Gross Inc, Gross) for the specified Terms
            IntVal% = EntServer.GetTransactionLineTypeValue(Company$, TermsOurRef$, LineType%, RetVal#)
         
            If (IntVal = 0) Then
                LineTypeTotal = RetVal#
            Else
                Error IntVal%
            End If
        End If ' LocalCheckServer()
    End If ' ValidCompany(Company)
     
    Exit Function
           
LineTypeTotal_Error:
    LineTypeTotal = GetErrorStr$
End Function


'*******************************************************************************
' Name:        entJCTermsLineTypeTotal
' Description: Returns a Line Type total for the specified Job Terms (JPT/JCT/JST)
'              NOTE: The full OurRef must be specified,e.g. JPT000001
'*******************************************************************************
Public Function entJCTermsLineTypeTotal(Company$, TermsOurRef$, LineType%) As Variant
Attribute entJCTermsLineTypeTotal.VB_Description = "Returns the Line Type Total for the specified terms"
Attribute entJCTermsLineTypeTotal.VB_HelpID = 20575
Attribute entJCTermsLineTypeTotal.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCTermsLineTypeTotal = LineTypeTotal(Company$, TermsOurRef$, LineType%)
End Function


'*******************************************************************************
' Name:        entJCAppsLineTypeTotal
' Description: Returns a Line Type total for the specified Job Application
'              NOTE: The full OurRef must be specified,e.g. JPA000001
'*******************************************************************************
Public Function entJCAppsLineTypeTotal(Company$, TermsOurRef$, LineType%) As Variant
Attribute entJCAppsLineTypeTotal.VB_Description = "Gets the Total for the Company, Our Reference and Line Type requested"
Attribute entJCAppsLineTypeTotal.VB_HelpID = 20560
Attribute entJCAppsLineTypeTotal.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCAppsLineTypeTotal = LineTypeTotal(Company$, TermsOurRef$, LineType%)
End Function



Private Function JobLineTypeTotal(Company$, JobCode$, LineType%) As Variant
On Error GoTo JobLineTypeTotal_Error

    Dim RetVal#
    Dim IntVal%

    If ValidCompany(Company) And ValidJobCode(JobCode$) Then
        If LocalCheckServer() Then
            IntVal% = EntServer.GetJobLineTypeValue(Company$, JobCode$, LineType%, RetVal#)
         
            If (IntVal = 0) Then
                JobLineTypeTotal = RetVal#
            Else
                Error IntVal%
            End If
        End If ' LocalCheckServer()
    End If ' ValidCompany(Company)
     
    Exit Function
           
JobLineTypeTotal_Error:
    JobLineTypeTotal = GetErrorStr$
End Function


'*******************************************************************************
' Name:        entJCPurchaseLineTypeTotal
' Description: Returns a Line Type total from the Purchase Applications for the
'              specified Job
'*******************************************************************************
Public Function entJCPurchaseLineTypeTotal(Company$, JobCode$, LineType%) As Variant
Attribute entJCPurchaseLineTypeTotal.VB_Description = "Returns the Line Type Total from the Purchase Applications for the Job Code requested"
Attribute entJCPurchaseLineTypeTotal.VB_HelpID = 20565
Attribute entJCPurchaseLineTypeTotal.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCPurchaseLineTypeTotal = JobLineTypeTotal(Company$, JobCode$, LineType%)
End Function


'*******************************************************************************
' Name:        entJCSalesLineTypeTotal
' Description: Returns a Line Type total from the Sales Applications for the
'              specified Job
'*******************************************************************************
Public Function entJCSalesLineTypeTotal(Company$, JobCode$, LineType%) As Variant
Attribute entJCSalesLineTypeTotal.VB_Description = "Returns the Line Type Total from the Sales Applications for the Job Code requested"
Attribute entJCSalesLineTypeTotal.VB_HelpID = 20568
Attribute entJCSalesLineTypeTotal.VB_ProcData.VB_Invoke_Func = " \n14"
    entJCSalesLineTypeTotal = JobLineTypeTotal(Company$, JobCode$, LineType% + 100)
End Function
Attribute VB_Name = "SaveValuationHistory"

Option Explicit


' Saves a budget back to the Job History
Private Function SaveJBudgetValue(Mode%, BT$, TType%, PCChar$, Company$, TheYear%, ThePeriod%, TheCcy%, JobCode$, StockCode$, NewBudget#) As String
On Error GoTo SaveJBudgetValue_Error
    Dim StrVal$, IntVal%, Mo%, CompStr$, NewBudg#
    Dim Ty%, Tp%, TC%, BudgType$, TotType%, Commit%, JCode$, SCode$
    
    StrVal = "Error"
    
    If ValidCompany(Company) And ValidYear(TheYear) And ValidPeriod(ThePeriod) And ValidCcy(TheCcy) And ValidTotType(TType%) And ValidJobCode(JobCode$) And ValidStockCode(StockCode$) Then
        If LocalCheckServer() Then
            Mo% = Mode%
            CompStr$ = UCase(Company$)
            BudgType$ = BT$
            TotType% = TType%
            If (UCase(Trim(PCChar$)) = "P") Then
                Commit% = 0
            Else
                Commit% = 1
            End If
            Ty% = TheYear%
            Tp% = ThePeriod%
            TC% = TheCcy%
            JCode$ = UCase$(JobCode$)
            SCode$ = UCase$(StockCode$)
            NewBudg# = NewBudget#
            
            IntVal% = EntServer.SaveJCBudgetValue(Mo%, CompStr$, BudgType$, TotType%, Commit%, Ty%, Tp%, TC%, JCode$, SCode$, NewBudg#)
         
            If (IntVal = 0) Then
                StrVal = "Saved"
            Else
                Error IntVal%
            End If
        End If
    End If
     
    GoTo SaveJBudgetValue_Exit
           
SaveJBudgetValue_Error:
    StrVal = GetErrorStr$

SaveJBudgetValue_Exit:
    SaveJBudgetValue = StrVal
End Function
 

'*******************************************************************************
' Name:        EntJCAnalSaveNextValuationAmount
' Description: Saves the Next Valuation Amount figure and Basis ('I'/'G') to the
'              Analysis Budget for the specified Job Code, will automatically
'              calculate the Next Valuation Percentage.
'              NOTE: Not applicable for Contract Codes.
'*******************************************************************************
Public Function EntJCAnalSaveNextValuationAmount(Company$, JobCode$, AnalysisCode$, NewBudget#, Basis$) As Variant
Attribute EntJCAnalSaveNextValuationAmount.VB_Description = "Sets the Next Valuation Amount to NewAmount for the specified Company, Job Code and Analysis Code requested"
Attribute EntJCAnalSaveNextValuationAmount.VB_HelpID = 20557
Attribute EntJCAnalSaveNextValuationAmount.VB_ProcData.VB_Invoke_Func = " \n14"
On Error GoTo EntJCAnalSaveNextValuationAmount_Error

    Dim BasisChar As String * 1
    Dim BasisVal%
    
    If (Trim(Basis$) <> "") Then
        ' Decode and pass the Valuation Basis in the Period - its a bodge
        ' but its a major pain in the arse to do any other way
        BasisChar = Left$(Trim(Basis$), 1)
        If (BasisChar$ = "I") Then
            BasisVal% = 1
        ElseIf (BasisChar$ = "G") Then
            BasisVal% = 2
        Else
            Error 585
        End If
        
        EntJCAnalSaveNextValuationAmount = SaveJBudgetValue(5, "B", 10, "P", Company$, 2004, BasisVal%, 0, JobCode$, AnalysisCode$, NewBudget#)
    Else
        Error 585
    End If
     
    Exit Function
           
EntJCAnalSaveNextValuationAmount_Error:
    EntJCAnalSaveNextValuationAmount = GetErrorStr$
End Function

'*******************************************************************************
' Name:        EntJCAnalSaveNextValuationPercentage
' Description: Saves the Next Valuation Percentage figure to the Analysis Budget
'              for the specified Job Code, will automatically calculate the Next
'              Valuation Amount.
'*******************************************************************************
Public Function EntJCAnalSaveNextValuationPercentage(Company$, JobCode$, AnalysisCode$, NewBudget#) As Variant
Attribute EntJCAnalSaveNextValuationPercentage.VB_Description = "Sets the Next Valuation Percentage to NewPercent for the specified Company, Job Code and Analysis Code requested"
Attribute EntJCAnalSaveNextValuationPercentage.VB_HelpID = 20558
Attribute EntJCAnalSaveNextValuationPercentage.VB_ProcData.VB_Invoke_Func = " \n14"
    EntJCAnalSaveNextValuationPercentage = SaveJBudgetValue(6, "B", 10, "P", Company$, 2004, 1, 0, JobCode$, AnalysisCode$, NewBudget#)
End Function




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Workbook_AddinInstall()
Dim EFMisc, EFAVF As String
Dim ECHM As String

ECHM = "enterole.chm"
EFMisc = "User Defined" '"Exchequer Miscellaneous Gets"
EFAVF = EFMisc '"Exchequer Apps & Vals Functions"

If Application.Version >= 9 Then
    ' Add functions to Exchequer Miscellaneous Functions section of Insert Formula
    Application.MacroOptions macro:="EntAppsAddInVer", Description:="Returns the version of the Excel Add-In for the applications and valuations functions that you are using", Category:=EFMisc, HelpContextID:=20554, HelpFile:=ECHM

    ' Add functions to Exchequer Apps & Vals Functions section of Insert Formula
    Application.MacroOptions macro:="EntJCAnalNextValuationAmount", Description:="Gets the Next Valuation Amount for the Company, Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20555, HelpFile:=ECHM
    Application.MacroOptions macro:="EntJCAnalNextValuationPercentage", Description:="Gets the Next Valuation Percentage for the Company, Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20556, HelpFile:=ECHM
    Application.MacroOptions macro:="EntJCAnalSaveNextValuationAmount", Description:="Sets the Next Valuation Amount to NewAmount for the specified Company, JobCode and AnalysisCode requested", Category:=EFAVF, HelpContextID:=20557, HelpFile:=ECHM
    Application.MacroOptions macro:="EntJCAnalSaveNextValuationPercentage", Description:="Sets the Next Valuation Percentage to NewPercent for the specified Company, JobCode and AnalysisCode requested", Category:=EFAVF, HelpContextID:=20558, HelpFile:=ECHM
    Application.MacroOptions macro:="EntJCAnalValuationToDate", Description:="Gets the Valuation to date for the Company, Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20559, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCAppsLineTypeTotal", Description:="Gets the Line Type Total for the Company, Our Reference and Line Type requested", Category:=EFAVF, HelpContextID:=20560, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCCustomerApplied", Description:="Returns the Applied Total for the Job Code, Customer Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20561, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCCustomerCertified", Description:="Returns the Certified Total for the Job Code, Customer Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20562, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCPurchaseApplied", Description:="Returns the Applied Total from the Purchase Applications for the Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20563, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCPurchaseCertified", Description:="Returns the Certified Total from the Purchase Applications for the Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20564, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCPurchaseLineTypeTotal", Description:="Returns the Line Type Total from the Purchase Applications for the Job Code requested", Category:=EFAVF, HelpContextID:=20565, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCSalesApplied", Description:="Returns the Applied Total from the Sales Applications for the Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20566, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCSalesCertified", Description:="Returns the Certified Total from the Sales Applications for the Job Code and Analysis Code requested", Category:=EFAVF, HelpContextID:=20567, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCSalesLineTypeTotal", Description:="Returns the Line Type Total from the Sales Applications for the Job Code requested", Category:=EFAVF, HelpContextID:=20568, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCSubContractorApplied", Description:="Returns the Applied Total from the Purchase Applications for the Job Code, Sub Contractor and Analysis Code requested", Category:=EFAVF, HelpContextID:=20569, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCSubContractorCertified", Description:="Returns the Certified Total from the Purchase Applications for the Job Code, Sub contractor and Analysis Code requested", Category:=EFAVF, HelpContextID:=20570, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCTermsApplied", Description:="Returns the Cumulative to-date Applied Total for the specified terms and Analysis Code", Category:=EFAVF, HelpContextID:=20571, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCTermsBasis", Description:="Returns the Basis (Incremental/Gross Incremental/Gross) for the specified terms", Category:=EFAVF, HelpContextID:=20572, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCTermsBudget", Description:="Returns the Budget for the specified terms (JPT/JCT/JST) and Analysis Code", Category:=EFAVF, HelpContextID:=20573, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCTermsCertified", Description:="Returns the Cumulative to-date Certified Total for the specified terms and Analysis Code", Category:=EFAVF, HelpContextID:=20574, HelpFile:=ECHM
    Application.MacroOptions macro:="entJCTermsLineTypeTotal", Description:="Returns the Line Type Total for the specified terms", Category:=EFAVF, HelpContextID:=20575, HelpFile:=ECHM

End If
End Sub
Attribute VB_Name = "Version"

Option Explicit

' Beta Version Number
'Const AddInVer = "b560.002"
' Release Version Number
Const AddInVer = "Exchequer v12.0.0 Build 206"           ' should be incremented for each build


'*******************************************************************************
' Add-In History
'
' Exchequer v12.0.0 Build 206   Updated for v12.0.0 release
'
' Exchequer 2018 R1 Build 205   Updated for 2018-R1 release
'
' v2016R1204  PKR   26/01/2016  Released for v2016 R1
'
' v7.0.203    MH    10/09/12    Released for v7.0
'
' v6.00.202   MH    31/10/07    Rebuild as lost link to EntFuncs.Xla
'
' v6.00.200   MH    16/07/07    Recreated from scratch under XL95 to try and fix help problems in XL2003
'
' v6.00.006   MH    20/06/07    Rebuilt after help stopped working due to an MS Office Update
'
' v6.00.005   MH    14/06/07    Modified to use HTML Help
'
' v5.71.004   MH    19/01/07    Renamed to EntXApps.Xla to reduce support problems
'
' v5.71.003   MH    21/11/06    Released for v5.71
'
' v5.70.003   MH    28/07/05    Rebranded
'
' v5.61.002   HM    02/02/04    Released for v5.61
'
' v5.60.002   HM    14/05/04    Released for v5.60
'
' b560.002    HM    14/04/04    Hid JobLineTypeTotal and LineTypeTotal functions
'                               which were accidentally published, and updated
'                               the help context id's.
'
' b560.001    HM    10/03/04    Created for Apps & Vals functions


'*******************************************************************************
' Name:        EntAppsAddInVer
' Description: Returns the EntXApps.XLA Add-In Version Number
'*****************************************************************************************
Public Function EntAppsAddInVer() As String
Attribute EntAppsAddInVer.VB_Description = "Returns the version information for EntXApps.Xla"
Attribute EntAppsAddInVer.VB_HelpID = 20554
Attribute EntAppsAddInVer.VB_ProcData.VB_Invoke_Func = " \n14"
    EntAppsAddInVer = "Exchequer Apps & Vals Functions - " + AddInVer$
End Function


' InQuest injected base64 decoded content
' z{I	+
' {I	:-U
' z{I	7
' y:-j
' y:-j
' z{I	&

INQUEST-PP=macro
