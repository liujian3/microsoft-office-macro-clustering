Attribute VB_Name = "Abbrev"
'Option Explicit

Rem:==============
Rem: Abbreviations
Rem:====================================================

Function FnDelAbbrev(term, abb As String) As String
  pos = InStr(1, term, " (" & abb & ")", vbTextCompare)
  If CBool(pos) Then FnDelAbbrev = Mid$(term, 1, pos - 1) Else FnDelAbbrev = term
End Function

Function FnMakeAbbTerm(term, abb As String)
   If abb <> "" Then FnMakeAbbTerm = term & " (" + abb + ")" Else FnMakeAbbTerm = term
End Function
'****************************************************
Function invF(Optional c) As Boolean: If IsMissing(c) Then invF = Sheets(1).Cells(1, 1).Interior.ColorIndex = 56 _
                                                      Else invF = c.Worksheet.Cells(c.row, 1).Interior.ColorIndex = 56
End Function
Function inv(ColorIndex, Optional noInv As Boolean): If Not invF Or noInv Then inv = ColorIndex: Exit Function
                          inv = decode(ColorIndex, xlAutomatic, 2, 3, 8, 5, 6, 48, 16, 15, 56, 11, 36, 10, 38, 16, 48, 2, xlAutomatic)
                                                  'Black|3-Red|5-Blue|48-Gray(FontID)|15-Gray(FontSHAD)|11-Dark Blue(code)|10-Green(comment)
                                                  '                                   16-Gray-50%(|fffd||fffd||fffd||fffd||fffd||fffd| SQL)
 If inv = ColorIndex Then inv = decode(ColorIndex, 37, 52, 34, 1, 20, 1, 35, 56, 36, 11, 40, 49, 38, 10) '6 levels
                                                  '(1)37,(2)34,(3)35-Light-Green,(4)36,(5)40,(6)38
                                                             End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub Alloc_copies(sort_column): unlockWB
  If ActiveSheet.name = WS0 Then
    ActiveSheet.Columns("B:D").Font.ColorIndex = inv(5)
    ActiveSheet.Range("B1:D1").Font.ColorIndex = inv(xlAutomatic)
  ElseIf ActiveSheet.name = WSA Then
    With Union(ActiveSheet.Columns("B:B"), _
               ActiveSheet.Columns("D:D"), _
               ActiveSheet.Columns("F:F"))
      .Font.ColorIndex = inv(xlAutomatic)
    End With
  End If
  For i = 2 To FnGetLastRow(FnWSNum(ActiveSheet.name)) - 1
    If UCase(Trim(Cells(i, sort_column))) = _
       UCase(Trim(Cells(i + 1, sort_column))) Then
      Cells(i, sort_column).Font.ColorIndex = inv(3)
      Cells(i + 1, sort_column).Font.ColorIndex = inv(3)
    End If
  Next i
LockWBif: End Sub
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| target_cell, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| term
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd| WS WSI |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Function FnGetAbbrev(target_cell, term)
If logging Then LogString ("in   FnGetAbbrev (" & target_cell & ", " & term & ")")
  term = RTrim$(target_cell.Text)
  abbr = ""
  t_pos = 0
  Do
    pos = t_pos
    t_pos = InStr(pos + 1, target_cell.Text, "(")
  Loop Until t_pos = 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If pos > 0 Then
    pos2 = InStr(pos, target_cell.Text, ")")
    If pos2 = Len(term) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      abbr = Mid$(target_cell.Text, pos + 1, InStr(pos, target_cell.Text, ")") - pos - 1)
      term = Left$(target_cell.Text, pos - 1)
      If (target_cell.Worksheet.name = WSI And _
           target_cell.Characters(InStr(pos, target_cell.Text, abbr), _
           Len(abbr)).Font.Underline = xlUnderlineStyleSingle) Or _
         (target_cell.Worksheet.name <> WSI And _
           (target_cell.Characters(InStr(pos, target_cell.Text, abbr), _
           Len(abbr)).Font.Italic = False Or _
           target_cell.Characters(InStr(pos, target_cell.Text, abbr), _
           Len(abbr)).Font.Underline <> xlUnderlineStyleSingle) _
         ) Then '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        abbr = ""
        term = target_cell.Text
      End If
    End If
  End If
  FnGetAbbrev = Trim$(abbr)
  term = Trim$(term)
If logging Then LogString ("out FnGetAbbrev (<" & FnGetAbbrev & ">: " & target_cell & ", " & term & ")")
End Function
'****************************************************

Attribute VB_Name = "Auto"
Public startUpFlg As Boolean, reminding As Boolean

'Private Sub Auto_Open(): MsgBox "Private": '(MAC |fffd||fffd||fffd| MAIN)
'End Sub '|fffd||fffd| 190402 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

                'flg_Ready |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| customSC_Restore  (WS0 <> "" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - 190219)
Sub remind(): If (WS0 <> "" And FnFormIsVisible("SCSForm")) Or (startUpFlg And flg_Ready) Then Exit Sub Else WSim: smart_freezing = False: reminding = True
              'Optional glbl As Boolean = False 'IIf(glbl, Not FnFormIsLoaded("SCSForm"), WS0 = "")
              'If FnFormIsVisible("SCSForm") Then flg_Ready = True: Exit Sub 'Else customSC_Restore: Exit Sub
sul 3:              If twoWindows Then On Error Resume Next: Windows("MAIN.xls:1").Caption = "1": Windows("").Caption = "_": On Error GoTo 0
sul 4: l% = 1: LogString "in   remind", l: fNoSupfor: LockWB: InitializeApp 'PF.reDraw|iniMode 'If Not FnFormIsLoaded("SCSForm") - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If SCForm.t_hwnd = 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
sul 6:    DDMini DDM, DDM.forceSM: LM "ResetScDDM": Application.Visible = DDM.forceSM <> 0 And Not startUpFlg 'Doppel
    'Else on error resume next: Application.Top = 1: on error goto 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Application.Top |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    'For i = 1 To 4: inc j: While sag(hWnd, FindWindowLike("App" & i & "servant*")) > 0 And j < 10: SendMessage hWnd, WM_CLOSE, 0, 0: Wend: Next 'Servant-killer |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| serv-|fffd||fffd||fffd||fffd||fffd|
sul 8: ParamIni: End If
If Not FnFormIsVisible("scsForm") Then
    On Error Resume Next: Unload DDBar: On Error GoTo 0
    'If App1 Is Nothing Then If App2 Is Nothing Then If App3 Is Nothing Then If App4 Is Nothing Then db_ "!!!!!!!!!":
    'Set App1 = Nothing: Set App2 = Nothing: Set App3 = Nothing: Set App4 = Nothing: db_ "!!!!!!!!!"
            'For i = 1 To 4: inc j: While sag(hWnd, FindWindowLike("App" & i & "servant*")) > 0 And j < 10: SendMessage hWnd, WM_CLOSE, 0, 0: Wend: Next '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
sul 13: 'customSC_Restore True - 190402 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FindForm
        DDBar.Recovery: If DDM.On Then Application.Visible = False: SCSForm.HideTargetW: 'SCSForm.Left = ScLt% * x75 + 1 ' FindForm.Hide
        If useJot_prm Then JOTCaller.reDraw
        Call Chess_Restore: If Application.Visible Then With Application: .Top = ScTp% + 1: .Left = ScLt% * x75 + 1: End With
sul 17: customSC_Restore True: flg_Ready = True: OnTime1 True: SCSForm.UserForm_Layout: 'If CBool(LoadParam("freezing")) Then c_useTimer = True '|fffd||fffd||fffd||fffd||fffd||fffd| Setting (|fffd| |fffd||fffd||fffd||fffd||fffd|)
        If Not startUpFlg Then If CBool(LoadParam("smart_freezing")) Then smart_freezing_start 'Schedule 3, "Delayed_Action"  'Application.Top = 0
sul 18: LogString "out remind", l: UpdateCellMenu: fSup: End If: reminding = False
End Sub ' @project reminder@ 'FindForm.reDraw:

Sub Chess_Restore(): If FnFormIsLoaded("ChessCaller") Then Exit Sub
If IsWindow(sag(hWnd&, FindWindow(vbNullString, "Yea Chess v4.77"))) Then ChessCaller.reDraw hWnd&: Exit Sub
If IsWindow(sag(hWnd&, FindWindowLike("*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*"))) Then ChessCaller.reDraw hWnd&, , True
End Sub

'Sub mainBeforeSavingEvent() 'external-Event-processor (main - the caller)
'If Application.Workbooks("MAIN.XLSB").Saved Then MsgBox "Nothing to save.": Exit Sub
'For Each frm In UserForms: If frm.name <> "SCForm" Then Unload frm 'Mid(frm.name, 1, 6)
'Next: Application.VBE.MainWindow.Visible = False 'Saving >>
'If Not ThisWorkbook.Saved Then _
'   If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes _
'      Then ThisWorkbook.Save: ThisWorkbook.Saved = True
'On Error Resume Next: Unload SCForm: End Sub

Sub Schedule(ss%, funcName$): If Not between(ss%, 0, 59) Then Exit Sub '0ss = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Application.OnTime Now + TimeValue("00:00:" & replicate(CStr(ss%), "0", 2)), funcName$: End Sub
    
'190819 - TEST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?)
Private Sub Delayed_Action(): sul "Delayed_Action in": SCSForm.HideAll True: If DDM.forceSM <> 0 Then Application.Visible = True
'                              'Call smart_freezing_start: sul "Delayed_Action out":
                              End Sub 'OnTime1 True

Sub macnamech(): startUpFlg = True: NOEXCEL: sul "macnamech IN": Protect_for_User_Non_for_VBA
Rem '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'import 'logging etc.
last_used_ID = 0: logging = False: logmsg = False: remind '=WSim=ParamIni=LoadSettings
If nothing2save Then   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| os10
                  ' If os10 Then
                   Schedule 5, "Delayed_Action": sul "Waiting for ""Delayed_Action"" in 5 sec." '190819 - TEST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?)
                Else: SCSForm.HideAll: save_msg% = MsgBox("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| presave.log?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") _
                                     : If save_msg% = vbYes Then Shell "cmd /C explorer """ & ThisWorkbook.path & "\Logs\presave.xml" & """", vbHide 'Exit Sub
                End If
'Msg 1 'Exit Sub  'TEST |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 190219
With Application: .Caption = "|2ea|V": .ShowDevTools = False: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  .ActiveWindow.DisplayVerticalScrollBar = False: Sheets("Dispetcher_").Activate: waitF '_long '.ShowWindowsInTaskbar = True
                  set_App_icon ThisWorkbook.path & "\icons\|2ea|V.ico": setNoHeadersC .Caption: End With
                  'If DDM.on Then Application.Visible = False: SCSForm.loadTargetPos: SCSForm.HideTargetW '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| remind
                  startUpFlg = False: dispGetTaskList: ThisWorkbook.Saved = True
Exit Sub '"False" |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ---------------------------------------------------------------------<<<<<<<<
'>>>>>>>>---------------------------------------------------------------------->>>>>>>>

Call WSim: ParamIni: LoadSettings: InitializeApp: sul "InitializeApp Done..."
'new Icon
set_App_icon ThisWorkbook.path & "\icons\|2ea|V.ico"

'Call MakeCATForm '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Call UpdateCellMenu: NOEXCEL: sul "UpdateCellMenu Done..."
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Editor key)
'If CommandBars("GCoding").Controls("Tools").Visible Then _
'Application.VBE.MainWindow.Visible = True: _
'Call VBEprocedureSelect("inwork_now")
Call customSC_Restore(True): sul "customSC_Restore Done...": Application.ActiveWindow.DisplayVerticalScrollBar = False: Sheets("Dispetcher_").Activate
Call NOEXCEL: sul "NOEXCEL Done..."

Rem '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2
wcaption = Application.Caption: setNoHeadersC wcaption: sul "setNoHeadersC Done..." 'for noHeaders
'                               set_Transparent           'for Transparency - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| customSCS_loadTargetPos_no_rePark
'On Error Resume Next:           remind               'for Inividual App Keys ''' InitializeApp |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '''
'On Error GoTo 0:
            PF.setModeActual: sul "PF.setModeActual Done...": 'Application.Visible = True ': LockWB - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not nothing2save Then SCSForm.HideAll: save_msg% = MsgBox("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| presave.log?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"): _
                                       If save_msg% = vbYes Then Shell "cmd /C explorer """ & ThisWorkbook.path & "\Logs\presave.xml" & """", vbHide: Exit Sub
                                          Schedule 3, "Delayed_Action": sul "Waiting for ""Delayed_Action"" in 3 sec.": 'SCSForm.HideAll True
DDBar.Recovery: sul "DDBar.Recovery Done...": If useJot_prm Then JOTCaller.reDraw: sul "JOTCaller.reDraw Done..."
Call Chess_Restore: sul "Chess_Restore Done...": SCSForm.focusMe: sul "SCSForm.focusMe Done...": End Sub


'custom (Cell) Menu '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub UpdateCellMenu_test(): UpdateCellMenu: End Sub
'---------------------------------------------------------
Sub UpdateCellMenu(Optional d0 = True): If Not d0 Then Exit Sub Else WSim: 'On Error GoTo exitL 'TEST
With Application.CommandBars("Cell"): 'If .Controls(2).Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then Exit Sub
    .Reset: .Enabled = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '.Protection = msoBarNoProtection
     For Each ctrl In .Controls: If ctrl.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|&|fffd|" Then ctrl.Delete Else ctrl.Visible = False 'ctrl.Delete: Next
     Next: With .Controls: With .Add(Before:=1, Temporary:=True): 'Type:=Optional 'ID:=21486, - Invalid argument |fffd| Office2017[P]
          .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PDB": .OnAction = "OpenPDBSession": .Style = msoButtonIconAndCaption: End With
          'msoButtonIconAndCaption - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| msoButtonIcon, msoButtonCaption, msoButtonIconAndCaptionBelow, _
           msoButtonIconAndWrapCaption (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), msoButtonIconAndWrapCaptionBelow
Rem: testID
'On Error GoTo errL:
'For i% = 1 To 100: Select Case i% 'If Not isFullPartOf(CStr(i%), "5 6 7 8 9 10 11 12 13 14 15 16 17 20 22 24 26 27 28 29 30 31 32 33 34 35 36", " ") Then
'                         Case 5 To 17, 20, 22, 24, 26 To 36, 38 - 55: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 To 4, 18, 19, 21, 23, 25, 37
'                         Case Else: With .Add(id:=i%, Temporary:=True): .Caption = "testID " & i%: .OnAction = "": .Style = msoButtonIconAndCaption: End With
''nextL:
'End Select: Next i%: updateLinkedMenu: GoTo exitL
     With .Add(Before:=1, id:=18, Temporary:=True): 'Type:=Optional
          .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML": .OnAction = "openAsW": .Style = msoButtonIconAndCaption: End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .OnAction = "View_Term": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": .OnAction = "Ctrl_Shift_A": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|":  .OnAction = "Ctrl_Shift_D": End With
     With .Add(Temporary:=True): .Caption = "Show: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": .OnAction = "ShowAllActiveRootCatsInComments": End With
     With .Add(id:=165, Temporary:=True): .Caption = "Tools: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|":  .OnAction = "invAllColors": .Style = msoButtonIconAndCaption: End With
     With .Add(Temporary:=True): .Caption = "Tools: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":  .OnAction = "Tools_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Style = msoButtonIconAndCaption: End With
     'With .Add(Temporary:=True): .Caption = "Tools: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|":  .OnAction = "unLockWs": .Style = msoButtonIconAndCaption: End With
If ActiveSheet.ProtectContents Then _
     With .Add(Temporary:=True): .Caption = "Tools: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|": .OnAction = "unLockWsManual": .Style = msoButtonIconAndCaption: End With _
Else With .Add(Temporary:=True): .Caption = "Tools: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": .OnAction = "LockWsManual": .Style = msoButtonIconAndCaption: End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": .OnAction = "dispGetTaskListIf": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": .OnAction = "dispInvertColors": End With
If Not smart_freezing Then _
     With .Add(id:=165, Temporary:=True): .Caption = "Common: smart_freezing ON": .OnAction = "smart_freezing_start": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ShowEditor": .OnAction = "ShowEditor": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": .OnAction = "dispDestroyWindow": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": .OnAction = "Disp_RenameTask": End With
If ActiveSheet.ProtectContents Then _
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|": .OnAction = "unLockWsManual": .Style = msoButtonIconAndCaption: End With _
Else With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": .OnAction = "LockWsManual": .Style = msoButtonIconAndCaption: End With
     With .Add(Temporary:=True): .Caption = "Common: Save and BackUp": .OnAction = "SaveAndBackUp": End With
     With .Add(Temporary:=True): .Caption = "Common: Close All Taks": .OnAction = "Disp_CloseAllTaks": End With
     With .Add(Temporary:=True): .Caption = "Common: Close Active Session": .OnAction = "Disp_CloseActiveSession": End With
     With .Add(Temporary:=True): .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": .OnAction = "Disp_ShutDown": End With
     End With: updateLinkedMenu: 'DDMini DDM, 1 'def
Rem rePicture
    If ActiveSheet.Index = 1 Or sag(abcF, ActiveSheet.Index = 5) Then
       For Each Pic In ActiveSheet.Pictures: Pic.Delete: Next
       For i = 1 To 3: Set PicRange = Cells(1, IIf(abcF, 2, 1) * i + 1): ifnm = ThisWorkbook.path & "\icons\hot\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|(" & i & ").jpg"
                       Set ph = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(PicRange.Item(1), ifnm, True, True, True): ph.OnAction = "Sort_by_" & FnERUs$(i): Next
    'Else: For Each pic In Sheets(1).Pictures: pic.Delete: Next
    End If
exitL: End With: End Sub

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub Disp_RenameTask(): PF.SetTextFieldVisible True: End Sub
Private Sub Disp_CloseAllTaks(): dispUpdateTL: With Sheets(WSD): ls ">", "Disp_CloseAllTaks"
    For r = 1 To .UsedRange.rows.Count: If .Cells(r, 2) = "" Then Exit For
        If Not (.Cells(r, 3) Like "*Windows Media" Or .Cells(r, 3) Like "*@*" Or .Cells(r, 3) Like ">>*" Or _
                .Cells(r, 3) Like "*Outlook" Or .Cells(r, 3) Like "Visual Basic*" Or .Cells(r, 3) = "|fffd| - Debugger") Then _
          dispDestroyWindow hWnd:=.Cells(r, 2), updateTL:=False 'db_ "YES - " & .Cells(r, 3) '
    Next: dispCneanUp: End With: ls "<", "Disp_CloseAllTaks": End Sub
Private Sub Disp_CloseActiveSession(): For i = 1 To 5: dispDestroyWindow SCSForm.GetTBhwnd(i): Next: dispCneanUp: End Sub
Private Sub Disp_ShutDown(): AC_flg = False: n2s = nothing2save '!|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ThisWorkbook.Saved, ThisWorkbook |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If FnFormIsLoaded("SCSForm") Then WinTBswitcher True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TaskBar |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If ThisWorkbook.Saved And n2s Then If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbOKCancel + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|!") _
                                    = vbCancel Then Exit Sub Else AC_flg = True: OnTimess_stop: GoTo exitL '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Rem: |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim save_mode%: save_mode% = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNoCancel + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|...")
                 If save_mode% = vbCancel Then Cancel = True: Exit Sub 'Workbooks("MAIN.XLSB").Save |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| commonSave = True: SaveAndBackUpMain
    StatusForm.ShowProgress 1 / 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "no", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            If Not (n2s) Then If save_mode% = vbYes Then commonSave = True: SaveAndBackUpMain _
               Else If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...") _
                    = vbYes Then commonSave = True: SaveAndBackUpMain: If Not nothing2save Then Msg "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...": Cancel = True: _
                                                                                            Unload StatusForm: Exit Sub '.Run "MAC.XLA!Delay", 3
                 
    AC_flg = True: OnTimess_stop: 'ShowDesktopW True 'SCSForm.HideAll True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
        If FnFormIsLoaded("SCSForm") Then With SCSForm: .ReleaseAllW: .HideTargetW: End With
                              
        'Auto_Open, Auto_Close - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Workbook_Open
        Call CF_RestoreFontAC '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CFF, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
        Call FindHider   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FindForm, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
        'DestroyCATForm '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| docweight |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = timelost |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WB)
        
        For Each Form In UserForms: Unload Form: Next 'FindForm |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| FindHider
        On Error Resume Next: Application.CommandBars("EditForm").Delete
        
    '    While active_bars <> "" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ribbon
    '      pos = InStr(1, active_bars, ";")
    '      If pos > 1 Then
    '        Application.CommandBars(Left$(active_bars, pos - 1)).Visible = True
    '        active_bars = Right$(active_bars, Len(active_bars) - pos)
    '      Else: active_bars = ""
    '      End If
    '    Wend
    With Application: .Visible = False: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '.DisplayFormulaBar = True: .CommandBars("Worksheet Menu Bar").Enabled = True
            If (n2s Or Workbooks("MAIN.XLSB").Saved) And ThisWorkbook.Saved Then GoTo exitL _
               Else If .vbe.MainWindow.Visible Then .vbe.MainWindow.Visible = False
            'Saving >>                             '.VBE.MainWindow.WindowState = vbext_ws_Minimize
            StatusForm.ShowProgress 2 / 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "no", "|fffd||fffd||fffd||fffd||fffd||fffd|"
            If Not ThisWorkbook.Saved Then If save_mode% = vbYes Then ThisWorkbook.Save _
               Else If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") _
                     = vbYes Then ThisWorkbook.Save: If (n2s) Then GoTo exitL
'            StatusForm.ShowProgress 2 / 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "no", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| AC_flg (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'           '|fffd||fffd||fffd| Or Workbooks("MAIN.XLSB").Saved - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
'            If Not (n2s) Then If save_mode% = vbYes Then Workbooks("MAIN.XLSB").Save _
'               Else If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...") _
'                     = vbYes Then Workbooks("MAIN.XLSB").Save: '.Run "MAC.XLA!Delay", 3
    End With: StatusForm.ShowProgress 2 / 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "OK": dodelay 1: Unload StatusForm
exitL:     waitF_long: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ShowDesktopW True  '|fffd||fffd||fffd| Close |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Application.DisplayAlerts = False: Workbooks("MAIN.XLSB").Close False: Application.Quit
End Sub '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Private Sub Tools_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(): flg_Ready = False: is_inv = invF: If is_inv Then invAllColors
              For i = wsEn To wsUa: Sheets(i).Columns(shadcol).Hidden = False: Next i
              Call Sort_by_ABC:
              Call Sort_by_group:
                                flg_Ready = True: If is_inv Then invAllColors: fSup:    'Sort_by_ABC: fSup: fNoSupfor
                                                                                     End Sub
Private Sub SaveAndBackUp(): If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| savePoint?", vbOKCancel + vbQuestion, "SavePoint Action") = vbCancel Then Exit Sub
    ThisWorkbook.force7z = True: commonSave = True: StatForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": StatForm.show vbModal:
                                 commonSave = False: If Not n2s Then dropPresaveLog '~|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    ThisWorkbook.force7z = False: End Sub 'If settingsForm.cbxQuickTest Then StatForm.focusMe: SendKeys "{ENTER}", True
Public Sub SaveAndBackUp_2(Optional justMain As Boolean): WaitMessage: DoEvents '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| StatForm.Activate
    Workbooks("MAIN.XLSB").Save: If Not justMain Then ThisWorkbook.Save: If Not useCmd_prm Then Exit Sub
                                                                            'Shell cmd_path$ & "mac.cmd", vbNormalFocus '|fffd||fffd| AfterSave
                                                                             Shell cmd_path$ & "main.cmd", vbNormalFocus: End Sub
Sub SaveAndBackUpMain(Optional nDo As Boolean): If AC_flg Then Exit Sub Else If nDo Then waitF 0.01: Exit Sub '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                StatForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": StatForm.show vbModal: End Sub


Sub testDDM()
MsgBox "Bottom: " & DDM.Bottom & Chr(10) & _
"Heigth: " & DDM.Heigth & Chr(10) & _
"Left: " & DDM.Left & Chr(10) & _
"Right: " & DDM.Right & Chr(10) & _
"Top: " & DDM.Top & Chr(10) & _
"Width: " & DDM.Width & Chr(10)
End Sub

Sub updateLinkedMenu(Optional fast_logic As Boolean): csd = ActiveSheet.name = "Dispetcher_": On Error Resume Next
If fast_logic Then
   With Application.CommandBars("Cell").Controls("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PDB")
   id$ = Cells(ActiveCell.row, idcol): If id$ = "" Then .Visible = False _
                                                   Else .Visible = dir(ThisWorkbook.path & "\PDB\" & id$, 16) <> ""
   End With
Else
     For Each ctrl In Application.CommandBars("Cell").Controls:
      If Left(ctrl.Caption, 7) = "Common:" Then ctrl.Visible = True _
                                           Else ctrl.Visible = IIf(Left(ctrl.Caption, 10) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", csd, Not csd _
                                                          And (InStr(1, ctrl.Caption, "|fffd||fffd||fffd||fffd||fffd||fffd|") Or InStr(1, ctrl.Caption, "Tools:") Or InStr(1, ctrl.Caption, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") _
                                                            Or InStr(1, ctrl.Caption, "Show:") Or InStr(1, ctrl.Caption, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))) 'Or InStr(1, ctrl.Caption, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
'      If ctrl.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PDB" Then ctrl.Visible = False: If FnIsTrinity Then id$ = Cells(ActiveCell.row, idcol): _
'                                If id$ <> "" Then ctrl.Visible = dir(ThisWorkbook.path & "\PDB\" & id$, 16) <> ""
Next: End If: End Sub


'***********
'Interface
'***********
Sub Ctrl_Shft_Mru(): Ctrl_Shft_M: End Sub
Attribute Ctrl_Shft_Mru.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
Sub Ctrl_Shft_M(): cpt = Windows(1).Caption: ChangeInterface Not Application.DisplayFormulaBar: Windows(1).Caption = cpt: End Sub
Sub Ctrl_Mru(): Ctrl_M: End Sub
Sub Ctrl_M(): cpt = Windows(1).Caption: ChangeInterface Not Application.DisplayFormulaBar, False: Windows(1).Caption = cpt: End Sub
Attribute Ctrl_M.VB_ProcData.VB_Invoke_Func = "m\n14"

Private Sub ChangeInterface(value As Boolean, Optional full_mode As Boolean = True): On Error Resume Next
    With Application: '.ScreenUpdating = False '.Caption = IIf(Value = True, Empty, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
        .DisplayStatusBar = Max(value, full_mode): .DisplayFormulaBar = value
        'Dim iCommandBar As CommandBar: For Each iCommandBar In .CommandBars: iCommandBar.Enabled = Value: Next   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd|
        With .ActiveWindow: .Caption = IIf(value, .Parent.name, "") ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Saved:
            .DisplayGridlines = Max(value, full_mode): .DisplayHeadings = value 'Max(value, full_mode):
            .DisplayWorkbookTabs = value: .DisplayHorizontalScrollBar = value: '.DisplayVerticalScrollBar = value
        End With
        .ExecuteExcel4Macro "SHOW.TOOLBAR(""Ribbon"", " & Max(value, full_mode) & ")"
        'TEST
        .Calculation = IIf(value, xlCalculationManual, xlCalculationAutomatic)
    End With: '.ScreenUpdating = True
'TEST |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 190219 - If FnFormIsLoaded("PF") Then PF.reDraw
End Sub
 
Public Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(): ChangeInterface False: End Sub
Public Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(): ChangeInterface True: End Sub
Attribute VB_Name = "CATForm"
Attribute VB_Base = "0{B090C91A-A8C5-45EB-A6BE-99219DE8255B}{98C2EE9C-D1FA-42B3-9FD0-C835A91BB064}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CheckBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox1_Change(): Call CatChange("CheckBox1"): End Sub
Private Sub CheckBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox2_Change(): Call CatChange("CheckBox2"): End Sub
Private Sub CheckBox3_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox3_Change(): Call CatChange("CheckBox3"): End Sub
Private Sub CheckBox4_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox4_Change(): Call CatChange("CheckBox4"): End Sub
Private Sub CheckBox5_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox5_Change(): Call CatChange("CheckBox5"): End Sub
Private Sub CheckBox6_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox6_Change(): Call CatChange("CheckBox6"): End Sub
Private Sub CheckBox7_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox7_Change(): Call CatChange("CheckBox7"): End Sub
Private Sub CheckBox8_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox8_Change(): Call CatChange("CheckBox8"): End Sub
Private Sub CheckBox9_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox9_Change(): Call CatChange("CheckBox9"): End Sub
Private Sub CheckBox10_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox10_Change(): Call CatChange("CheckBox10"): End Sub
Private Sub CheckBox11_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox11_Change(): Call CatChange("CheckBox11"): End Sub
Private Sub CheckBox12_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox12_Change(): Call CatChange("CheckBox12"): End Sub
Private Sub CheckBox13_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox13_Change(): Call CatChange("CheckBox13"): End Sub
Private Sub CheckBox14_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox14_Change(): Call CatChange("CheckBox14"): End Sub
Private Sub CheckBox15_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox15_Change(): Call CatChange("CheckBox15"): End Sub
Private Sub CheckBox16_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox16_Change(): Call CatChange("CheckBox16"): End Sub
Private Sub CheckBox17_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox17_Change(): Call CatChange("CheckBox17"): End Sub
Private Sub CheckBox18_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox18_Change(): Call CatChange("CheckBox18"): End Sub
Private Sub CheckBox19_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox19_Change(): Call CatChange("CheckBox19"): End Sub
Private Sub CheckBox20_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox20_Change(): Call CatChange("CheckBox20"): End Sub
Private Sub CheckBox21_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox21_Change(): Call CatChange("CheckBox21"): End Sub
Private Sub CheckBox22_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox22_Change(): Call CatChange("CheckBox22"): End Sub
Private Sub CheckBox23_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox23_Change(): Call CatChange("CheckBox23"): End Sub
Private Sub CheckBox24_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox24_Change(): Call CatChange("CheckBox24"): End Sub
Private Sub CheckBox25_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox25_Change(): Call CatChange("CheckBox25"): End Sub
Private Sub CheckBox26_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox26_Change(): Call CatChange("CheckBox26"): End Sub
Private Sub CheckBox27_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox27_Change(): Call CatChange("CheckBox27"): End Sub
Private Sub CheckBox28_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox28_Change(): Call CatChange("CheckBox28"): End Sub
Private Sub CheckBox29_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox29_Change(): Call CatChange("CheckBox29"): End Sub
Private Sub CheckBox30_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox30_Change(): Call CatChange("CheckBox30"): End Sub
Private Sub CheckBox31_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox31_Change(): Call CatChange("CheckBox31"): End Sub
Private Sub CheckBox32_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call CatKeyDown(KeyCode): End Sub
Private Sub CheckBox32_Change(): Call CatChange("CheckBox32"): End Sub
Private Sub Image1_Click(): UpdateCATForm: End Sub
Private Sub Image2_Click(): PF.setCurrentCat "", "": End Sub
Private Sub UserForm_Initialize(): LM "CATForm_Ini"
wcaption = Me.Caption: Call setNoHeadersC(wcaption): Call set_Transparent
If Me.Left = 0 Then Me.Left = ScLt% * x75  'db_ Me.Left & " vs " & ScLt% * x75
Call CatLoader: Me.BorderStyle = 1: CheckBox1.SetFocus: End Sub
Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
If PF.Ready4Cat Then PF.setCurrentCat "", "_*": Exit Sub 'CurrentCat <<
Call CatKeyDown(13): End Sub
Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then CatKeyDown 27
End Sub
'========== 4 Copying =================================================
Public Sub CatKeyDown(KeyCode)
If KeyCode = 13 Then 'Enter (str - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, catstr - :1:2:15:)
  KeyCode = 0: Dim str As String, catStr As String, topcat As String, ncat As Boolean
  For Each cat In CATForm.Controls:
  If Left(cat.name, 5) <> "Image" Then
   If cat.Caption <> "" Then
    If cat.Top < 12 Then 'new HeadingCat
      If str = "" Then topcat = "" 'no blank strings
      If InStr(Len(str), str, ";") Or _
         InStr(Len(RTrim(str)), str, ":") Then str = Mid(str, 1, Len(RTrim(str)) - 1)
      If topcat <> "" Then topcat = Chr(10) & LTrim(cat.Caption) _
                      Else: topcat = LTrim(cat.Caption)
      If cat.TabIndex + 1 <> CATForm.Controls.Count Then topcat = topcat & ": " '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ncat = True: End If
    If cat.value Then
      If cat.Top < 12 Then
        str = str & topcat: ncat = False
      Else
         If ncat Then str = str & topcat: ncat = False
         str = str & LTrim(cat.Caption) & ";"
      End If
      catStr = catStr & ":" & prsAfter("|", cat.tag)
    End If
  End If: End If: Next cat: If InStr(Len(str), str, ";") Or _
                       InStr(Len(RTrim(str)), str, ":") Then str = Mid(str, 1, Len(RTrim(str)) - 1)
  If catStr <> "" Then catStr = catStr & ":"
  'Me.Tag = catstr & "|" & str 'Output
  If FnFormIsVisible("EditForm") Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Call Cat2Form(str, catStr): Unload CATForm
  ElseIf FnIsTrinity(ActiveSheet.name) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)
    Set rangeToUse = Selection: Dim next_id As String:
    For Each singleArea In rangeToUse.Areas
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| rangeToUse)
        next_id = ActiveSheet.Cells(singleArea.row, 1)
        For r = 1 To singleArea.rows.Count '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Next
          If next_id <> "" And next_id <> "ID" Then
            Application.Goto Reference:=FnGetPrefix(Null) + next_id
            If Not ActiveCell.rows.Hidden Then Call setCat(next_id, catStr, True)
            next_id = Cells(ActiveCell.row + 1, 1)
          Else: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Sub
          End If
        Next r
    Next: Unload CATForm
  End If
  'MsgBox Me.Tag: Unload Me:
ElseIf KeyCode = 27 Or KeyCode = 67 Then KeyCode = 0: Unload CATForm: PF.Image16.SpecialEffect = 0 'Escape or <C>
End If: End Sub
'=====================================================================

'=====================================================================
Private Sub CatChange(it): If Not CATForm.Controls(it) Then Exit Sub Else If PF.Ready4Cat Then T$ = CATForm.Controls(it).tag: _
  PF.setCurrentCat Trim(CATForm.Controls(it).Caption), CATForm.Controls(it).name & "|" & prsAfter("|", T$): Exit Sub  'CurrentCat <<
Dim topcat As String: topcat = prsbetweenUp("|", "_", CATForm.Controls(it).tag)
If prsCount("_", CATForm.Controls(it).tag) = 0 Then 'topcat
  For Each cat In CATForm.Controls ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| subcats
   If Left(cat.name, 5) <> "Image" Then If cat.Caption <> "" Then _
                   If prsBetween("|", "_", cat.tag) = topcat Then cat.value = False
  Next cat
Else ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| topcat
  allchckdflg = True
  For Each cat In CATForm.Controls
    If prsBetween("|", "_", cat.tag) = topcat Then _
      If Not cat.value Then allchckdflg = False: Exit For
  Next cat
  For Each cat In CATForm.Controls
    If prsbetweenUp("|", "_", cat.tag) = topcat Then
      If allchckdflg Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| subcats, |fffd||fffd||fffd||fffd||fffd||fffd| topcat
        cat.value = CBool(prsAfter("|", cat.tag) = topcat)
      Else ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| topcat
        If CBool(prsAfter("|", cat.tag) = topcat) Then cat.value = False
      End If
    End If
  Next cat
End If: End Sub

'=====================================================================
Private Sub CatLoader(): On Error Resume Next: For Each cat In CATForm.Controls
If cat.Caption <> "" Then cat.value = CBool(InStr(1, currentCat, ":" & prsAfter("|", cat.tag) & ":"))
                                                   Next cat: End Sub
Attribute VB_Name = "CFF"
Attribute VB_Base = "0{1C05702D-2930-47F3-A993-9CC07EBA1298}{8D5F20BA-0768-41AF-9D84-C1DD9DCAE7E3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'COMMON FIND FORM
'needs also Common Forms & Common Tools Modules
'uses Public last_search As String
Private Const FUR = 2 'FirstUsedRow

Private Sub FindResultMode(m_num)
  Select Case m_num
         Case -1:
            CFF.FrameP.Image1.Visible = False
            CFF.FrameP.Image2.Visible = False
            CFF.FrameP.Image6.Visible = True
         Case 0:
            CFF.FrameP.Image1.Visible = True
            CFF.FrameP.Image2.Visible = False
            CFF.FrameP.Image6.Visible = False
         Case 1:
            CFF.FrameP.Image1.Visible = False
            CFF.FrameP.Image2.Visible = True
            CFF.FrameP.Image6.Visible = False
  End Select
End Sub

Private Sub CheckBox1_Click()
Call FindResultMode(0)
CFF.TextBox1.SetFocus
End Sub

Private Sub CheckBox2_Click()
Call FindResultMode(0)
CFF.TextBox1.SetFocus
End Sub

Private Sub CommandButton3_Click()
 a_record = CFF.CommandButton3.Caption
 If a_record = "" Then Exit Sub
 Workbooks(CT_FnGetCellAddress(a_record, 0)).Activate
 Sheets(CT_FnGetCellAddress(a_record, 1)).Activate
 Cells(CT_FnGetCellAddress(a_record, 2), CT_FnGetCellAddress(a_record, 3)).Activate
End Sub

Private Sub CommandButton4_Click()
 a_record = CFF.CommandButton4.Caption
 If a_record = "" Then Exit Sub
 Workbooks(CT_FnGetCellAddress(a_record, 0)).Activate
 Sheets(CT_FnGetCellAddress(a_record, 1)).Activate
 Cells(CT_FnGetCellAddress(a_record, 2), CT_FnGetCellAddress(a_record, 3)).Activate
End Sub

Private Sub TextBox1_Change()
If InStr(1, Trim$(CFF.TextBox1.Text), " ") = 0 _
  Then CFF.CheckBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" _
  Else: CFF.CheckBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Call FindResultMode(0)
End Sub

Private Sub CommandButton1_Click()
  Call StartSearching(True)
End Sub

Private Sub CommandButton2_Click()
  Call StartSearching(False)
End Sub

Private Sub StartSearching(def_dir)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
CFF.TextBox1.Text = Replace(CFF.TextBox1.Text, Chr(13) + Chr(10), " ")
If Trim$(CFF.TextBox1.Text) = "" Then
  CFF.TextBox1.SetFocus
  Exit Sub
Else: Call FindResultMode(0)
End If

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call CF_RestoreFont(last_row, last_col)
Call unlockWB
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If def_dir Then s_direction = xlNext Else s_direction = xlPrevious
  
If CheckBox1.value Then
  whole_word = True
Else: whole_word = False
End If

If CheckBox2.value Then
  m_case = True
Else: m_case = False
End If

whole_text = Trim$(CFF.TextBox1.Text)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
find_text = Replace(whole_text, " ", "*")

found = False
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If last_row > ActiveWorkbook.ActiveSheet.UsedRange.rows.Count _
    Then last_row = ActiveWorkbook.ActiveSheet.UsedRange.rows.Count
  If last_col > ActiveWorkbook.ActiveSheet.UsedRange.Columns.Count _
    Then last_col = ActiveWorkbook.ActiveSheet.UsedRange.Columns.Count
  Set c = ActiveWorkbook.ActiveSheet.Cells(last_row, last_col)
  CFF.CommandButton4.Caption = ""

  previous_row = c.row
  previous_column = c.Column
  '_____________________________________________________________________________
  If ToggleButton1.value Then _
    Set searchRange = ActiveWorkbook.ActiveSheet.UsedRange _
  Else Set searchRange = Range(ActiveWorkbook.ActiveSheet.Cells(FUR, previous_column), _
                         ActiveWorkbook.ActiveSheet.Cells( _
                         CT_FnGetLastRow(ActiveWorkbook.name, ActiveSheet.name), previous_column))
  Set c = searchRange.find(What:=find_text, after:=c, _
                           LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByColumns, _
                           SearchDirection:=s_direction, MatchCase:=m_case)
  '_____________________________________________________________________________
Do
  If (Not c Is Nothing) Then
    If c.row >= FUR Then
      If ToggleButton1.value Then
        Select Case def_dir
          Case True: found = ((previous_column = c.Column And previous_row < c.row) Or _
                               previous_column < c.Column)
          Case False: found = ((previous_column = c.Column And previous_row > c.row) Or _
                                  previous_column > c.Column)
        End Select
      Else:
        Select Case def_dir
          Case True: found = (previous_column = c.Column And previous_row < c.row)
          Case False: found = (previous_column = c.Column And previous_row > c.row)
        End Select
      End If
    Else: found = False
    End If
    check_result = True
    If found Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      If whole_word Then
        If find_text = whole_text Then
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If m_case Then pos = InStr(1, c.Text, whole_text, vbBinaryCompare) - 1 _
                    Else: pos = InStr(1, c.Text, whole_text, vbTextCompare) - 1
          If pos > 0 Then found = Not CT_FnIsLetterOrNumber(Mid$(c.Text, pos, 1))
          pos = pos + Len(whole_text) + 1
          If pos <= Len(c.Text) And found Then _
            found = Not CT_FnIsLetterOrNumber(Mid$(c.Text, pos, 1))
        Else
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) '<- |fffd||fffd|. |fffd||fffd||fffd||fffd|
          check_result = False
          next_pos = 1
          '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
          Do Until next_pos >= Len(c.Text) Or check_result
            s_pos = 1
            '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            next_word = CT_FnGetNextWord(s_pos, find_text, f_pos)
            s_pos = f_pos + 1
            '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If m_case Then pos = InStr(next_pos, c.Text, next_word, vbBinaryCompare) _
                      Else: pos = InStr(next_pos, c.Text, next_word, vbTextCompare)
            If pos <> 0 Then
              next_pos = pos + Len(next_word)
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd|
              next_target_word = CT_FnGetNextWord(pos, c.Text, f_target_pos)
              s_target_pos = f_target_pos + 1
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              While next_word <> "" And next_target_word <> "" And pos <> 0
                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                If m_case Then pos = InStr(1, next_target_word, next_word, vbBinaryCompare) _
                          Else: pos = InStr(1, next_target_word, next_word, vbTextCompare)
                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                next_word = CT_FnGetNextWord(s_pos, find_text, f_pos)
                s_pos = f_pos + 1
                next_target_word = CT_FnGetNextWord(s_target_pos, c.Text, f_target_pos)
                s_target_pos = f_target_pos + 1
                If next_word = "" And pos <> 0 Then check_result = True
              Wend
            Else: next_pos = Len(c.Text)
                  check_result = False
            End If
          Loop '-> |fffd||fffd|. |fffd||fffd||fffd||fffd|
          found = check_result
        End If
      End If
    Else: found = False
    End If
    If Not found Then
          '_____________________________________________________________________________
          If c.row < FUR Or Not check_result Then
            Select Case def_dir
              Case True: Set c = searchRange.FindNext(c)
              Case False: Set c = searchRange.FindPrevious(c)
            End Select
          Else: Set c = Nothing
          End If
          '_____________________________________________________________________________
    End If
  End If
Loop Until found Or c Is Nothing
Set searchRange = Nothing
If found Then
  Call FindResultMode(1)
  ActiveWorkbook.ActiveSheet.Activate
  c.Activate
  If Not IsNull(ActiveCell.Font.ColorIndex) Then
  '______________________________________
    was_color = ActiveCell.Font.ColorIndex
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If find_text = whole_text Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If m_case Then pos = InStr(1, c.Text, whole_text, vbBinaryCompare) _
              Else: pos = InStr(1, c.Text, whole_text, vbTextCompare)
    With ActiveCell: If .Font.ColorIndex = inv(2) And .Interior.ColorIndex <> inv(1) Then .Font.ColorIndex = inv(xlAutomatic)
    End With:        If pos <> 0 Then ActiveCell.Characters(start:=pos, Length:=Len(whole_text)).Font.ColorIndex = inv(3)
  Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If whole_word Then
      '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) '<- |fffd||fffd|. |fffd||fffd||fffd||fffd|
      check_result = False
      next_pos = 1
      ci = c.Font.ColorIndex
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      Do Until next_pos >= Len(c.Text) Or check_result
        c.Font.ColorIndex = ci
        s_pos = 1
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        next_word = CT_FnGetNextWord(s_pos, find_text, f_pos)
        s_pos = f_pos + 1
        '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If m_case Then pos = InStr(next_pos, c.Text, next_word, vbBinaryCompare) _
                  Else: pos = InStr(next_pos, c.Text, next_word, vbTextCompare)
        If pos <> 0 Then next_pos = pos + Len(next_word)
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd|
          'MsgBox ("7") '!!!|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          next_target_word = CT_FnGetNextWord(pos, c.Text, f_target_pos)
          s_target_pos = f_target_pos + 1
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          While next_word <> "" And next_target_word <> "" And pos <> 0
          '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            If m_case Then pos = InStr(1, next_target_word, next_word, vbBinaryCompare) _
                      Else: pos = InStr(1, next_target_word, next_word, vbTextCompare)
            With ActiveCell: If .Font.ColorIndex = inv(2) And .Interior.ColorIndex <> inv(1) Then .Font.ColorIndex = inv(xlAutomatic)
            End With:        If pos <> 0 Then ActiveCell.Characters(start:=f_target_pos - Len(next_target_word) + pos, _
                                                                    Length:=Len(next_word)).Font.ColorIndex = inv(3)
            '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            next_word = CT_FnGetNextWord(s_pos, find_text, f_pos)
            s_pos = f_pos + 1
            next_target_word = CT_FnGetNextWord(s_target_pos, c.Text, f_target_pos)
            s_target_pos = f_target_pos + 1
            'And pos <> 0 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| FindForm (|fffd| CFF |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|))
            If next_word = "" And pos <> 0 Then check_result = True
          Wend
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| FindForm (|fffd| CFF |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|))
        'Else: next_pos = Len(c.Text)
        '      check_result = False
        'End If
      Loop '-> |fffd||fffd|. |fffd||fffd||fffd||fffd|
    Else
      s_pos = 1
      next_pos = 1
      next_word = CT_FnGetNextWord(s_pos, find_text, f_pos)
      While next_word <> ""
        s_pos = f_pos + 1
        If m_case Then pos = InStr(next_pos, c.Text, next_word, vbBinaryCompare) _
                  Else: pos = InStr(next_pos, c.Text, next_word, vbTextCompare)
        With ActiveCell: If .Font.ColorIndex = inv(2) And .Interior.ColorIndex <> inv(1) Then .Font.ColorIndex = inv(xlAutomatic)
        If pos <> 0 Then .Characters(start:=pos, Length:=Len(next_word)).Font.ColorIndex = inv(3)
        next_pos = pos + Len(next_word)
        next_word = CT_FnGetNextWord(s_pos, find_text, f_pos): End With
      Wend
    End If
  End If
  '______________________________________
  Else: was_color = 0
  End If
  CFF.CommandButton4.Caption = ActiveWorkbook.name + ":" + ActiveSheet.name + ":" + _
                                  str(ActiveCell.row) + ":" + str(ActiveCell.Column) + _
                                                        ":" + str(was_color)
  If Not CFF.CommandButton3.Visible Then
    CFF.TextBox1.Width = CFF.TextBox1.Width - 14
    CFF.TextBox1.Left = 14
    CFF.CommandButton3.Visible = True
  End If
  CFF.CommandButton4.Visible = True
  CFF.Repaint
Else
  Call FindResultMode(-1)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|
  ActiveWorkbook.Activate
  If CBool(ActiveCell.Font.ColorIndex) Then _
    was_color = ActiveCell.Font.ColorIndex _
  Else: was_color = 0
  CFF.CommandButton4.Caption = ActiveWorkbook.name + ":" + ActiveSheet.name + ":" + _
                                  str(ActiveCell.row) + ":" + str(ActiveCell.Column) + _
                                                        ":" + str(was_color)
  CFF.CommandButton4.Visible = False
End If
CFF.TextBox1.SetFocus
Set c = Nothing
Call LockWBif
End Sub

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  If KeyCode = 13 Then 'Enter
    KeyCode = 0
    Call CommandButton1_Click
  ElseIf KeyCode = 38 Then 'Up Arrow
    KeyCode = 0
    Call CommandButton2_Click
  ElseIf KeyCode = 40 Then 'Down Arrow
    KeyCode = 0
    Call CommandButton1_Click
  ElseIf Shift = 2 Then 'Ctrl + F
    If KeyCode = 128 Or KeyCode = 160 Or _
       KeyCode = 70 Or KeyCode = 102 Then Call CF_DoFind: KeyCode = 0
  ElseIf KeyCode = 27 Then 'ESC key - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Call CF_DoFind: KeyCode = 0
  End If
End Sub

Private Sub ToggleButton1_Click()
If ToggleButton1.value Then
  ToggleButton1.ControlTipText = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  CFF.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else: ToggleButton1.ControlTipText = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  CFF.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End If
CFF.TextBox1.SetFocus
End Sub

Private Sub UserForm_Activate(): Call setNoHeadersC(Me.Caption): CFF.TextBox1.SetFocus: End Sub

Private Sub UserForm_Initialize() '|fffd||fffd||fffd||fffd||fffd| Activate (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call CF_Resize: wcaption = Me.Caption: Call TransEnab:
Call SetLayeredWindowAttributes(FindWindow(vbNullString, Me.Caption), 0, 230, LWA_ALPHA): End Sub

Private Sub UserForm_Terminate()
Call CF_RestoreFont(last_row, last_col)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
last_search = CFF.TextBox1.Text
End Sub

Private Sub CF_Resize(): With CFF: .Top = Application.Top + Application.Height - .Height - 18
                                      .Width = 115: .Left = Application.Left + Application.Width - .Width - 1: End With: End Sub
Public Sub CF_Redraw(): With CFF: .Top = Application.Top + Application.Height - .Height - 24
                                      .Left = Application.Left + Application.Width - .Width - 1: End With: End Sub




Attribute VB_Name = "CFTerm"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit 'force explicit declaration of all variables in that module.

'Variables to store the various selections/options

Private pid, pIDg, pIDs 'As String
Private pID_old, pIDg_old 'As String
Private pCat, pCat_old, pLink As String
Private pTerm1, pTerm2, pTerm3 As String
Private pTerm1_old, pTerm2_old, pTerm3_old As String
Private pDef1, pDef2, pDef3 As String
Private pDef1_old, pDef2_old, pDef3_old As String
Private pABC1, pABC2, pABC3 As String
Private pABC1_old, pABC2_old, pABC3_old As String
Private pShad1, pShad2, pShad3 As String
Private pShad1_old, pShad2_old, pShad3_old As String
Private pRowG, pRow1, pRow2, pRow3, pRowA As Integer
'|fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| fUpdated
Private pCat_up, pIDg_up, pABC_up, pTerm_up, pDef_up, pShad_up As Boolean
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private pisGen, pinserted, pnoabc As Boolean
Private pBound_str As String

'Set the class's initial properties to be those of a default object
Private Sub Class_Initialize()
  'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
End Sub

Private Sub Class_Terminate()
  'MsgBox "|fffd||fffd||fffd|"
End Sub

'***************************************************************
'* Property procedures to get and set the term's prameters
'***************************************************************
'Property Get procedure - gets the value of a property.
'Property Let procedure - assigns a value to a property.
'Property Set procedure - sets a reference to an object.
Public Property Get id() As String: id = pid: End Property
Public Property Let id(T As String): pid = T: End Property
Public Property Get cat() As String: cat = pCat: End Property
Public Property Let cat(T As String): pCat = T: End Property
Public Property Get link() As String: link = pLink: End Property
Public Property Let link(T As String): pLink = T: End Property
Public Property Get Gid() As String: Gid = pIDg: End Property
Public Property Let Gid(T As String): pIDg = T: End Property
Public Property Get sid() As String: sid = pIDs: End Property
Public Property Let sid(T As String): pIDs = T: End Property
'ReadOnly
Public Property Get oldcat() As String: oldcat = pCat_old: End Property
Public Property Get oldID() As String: oldID = pID_old: End Property
Public Property Get oldGId() As String: oldGId = pIDg_old: End Property

'TERMS
Public Property Get term(i As Integer) As String: Select Case i: Case 1: term = pTerm1: Case 2: term = pTerm2: Case 3: term = pTerm3: End Select: End Property
Public Property Let term(i As Integer, T As String): Select Case i: Case 1: pTerm1 = T: Case 2: pTerm2 = T: Case 3: pTerm3 = T: End Select: End Property
'ReadOnly
Public Property Get oldterm(i As Integer) As String: Select Case i: Case 1: oldterm = pTerm1_old: Case 2: oldterm = pTerm2_old: Case 3: oldterm = pTerm3_old: End Select: End Property
Private Property Let oldterm(i As Integer, T As String): Select Case i: Case 1: pTerm1_old = T: Case 2: pTerm2_old = T: Case 3: pTerm3_old = T: End Select: End Property

'DEFINITIONS
Public Property Get def(i As Integer) As String: Select Case i: Case 1: def = pDef1: Case 2: def = pDef2: Case 3: def = pDef3: End Select: End Property
Public Property Let def(i As Integer, T As String): Select Case i: Case 1: pDef1 = T: Case 2: pDef2 = T: Case 3: pDef3 = T: End Select: End Property
'ReadOnly
Public Property Get olddef(i As Integer) As String: Select Case i: Case 1: olddef = pDef1_old: Case 2: olddef = pDef2_old: Case 3: olddef = pDef3_old: End Select: End Property
Private Property Let olddef(i As Integer, T As String): Select Case i: Case 1: pDef1_old = T: Case 2: pDef2_old = T: Case 3: pDef3_old = T: End Select: End Property

'ABBREVIATIONS
Public Property Get ABC(i As Integer) As String: Select Case i: Case 1: ABC = pABC1: Case 2: ABC = pABC2: Case 3: ABC = pABC3: End Select: End Property
Public Property Let ABC(i As Integer, T As String): Select Case i: Case 1: pABC1 = T: Case 2: pABC2 = T: Case 3: pABC3 = T: End Select: End Property
'ReadOnly
Public Property Get oldABC(i As Integer) As String: Select Case i: Case 1: oldABC = pABC1_old: Case 2: oldABC = pABC2_old: Case 3: oldABC = pABC3_old: End Select: End Property
Private Property Let oldABC(i As Integer, T As String): Select Case i: Case 1: pABC1_old = T: Case 2: pABC2_old = T: Case 3: pABC3_old = T: End Select: End Property

'SHADOWS
Public Property Get shad(i As Integer) As String: Select Case i: Case 1: shad = pShad1: Case 2: shad = pShad2: Case 3: shad = pShad3: End Select: End Property
Public Property Let shad(i As Integer, T As String): Select Case i: Case 1: pShad1 = T: Case 2: pShad2 = T: Case 3: pShad3 = T: End Select: End Property
'ReadOnly
Public Property Get oldshad(i As Integer) As String: Select Case i: Case 1: oldshad = pShad1_old: Case 2: oldshad = pShad2_old: Case 3: oldshad = pShad3_old: End Select: End Property
Private Property Let oldshad(i As Integer, T As String): Select Case i: Case 1: pShad1_old = T: Case 2: pShad2_old = T: Case 3: pShad3_old = T: End Select: End Property

'Localization
Public Property Get rowG() As Integer: rowG = pRowG: End Property
Public Property Let rowG(r As Integer): pRowG = r: End Property
Public Property Get rowA() As Integer: rowA = pRowA: End Property
Public Property Let rowA(r As Integer): pRowA = r: End Property
Public Property Get row(i As Integer) As Integer: Select Case i: Case 0: row = pRowG: Case 1: row = pRow1: Case 2: row = pRow2: Case 3: row = pRow3: Case 4: row = pRowA: End Select: End Property
Public Property Let row(i As Integer, r As Integer): Select Case i: Case 0: pRowG = r: Case 1: pRow1 = r: Case 2: pRow2 = r: Case 3: pRow3 = r: Case 4: pRowA = r: End Select: End Property

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Property Get isGen() As Boolean: isGen = pisGen: End Property
Public Property Get bound_str() As String: bound_str = pBound_str: End Property
Public Property Let bound_str(T As String): pBound_str = T: End Property
Public Property Get inserted() As Boolean: inserted = pinserted: End Property
Public Property Let inserted(B As Boolean): pinserted = B: End Property
Public Property Get noabc() As Boolean: noabc = pnoabc: End Property
Public Property Get up_str() As String
    If pCat_up Then sadd up_str, "cat"
    If pABC_up Then sadd up_str, iif_(up_str <> "", " | ") + "ABC"
    If pShad_up Then sadd up_str, iif_(up_str <> "", " | ") + "shad"
    If pTerm_up Then sadd up_str, iif_(up_str <> "", " | ") + "term"
    If pDef_up Then sadd up_str, iif_(up_str <> "", " | ") + "def"
    If pIDg_up Then sadd up_str, iif_(up_str <> "", " | ") + "gID"
                         up_str = vbTab & up_str & Chr(10): End Property
Public Property Get up_str_long() As String: up_str_long = ""
    If pCat_up Then sadd up_str_long, " | cat |: " + Me.oldcat + " -> " + cat + Chr(10)
    If pABC_up Then sadd up_str_long, IIf(Me.oldABC(1) <> FnClearFromSpec$(ABC(1)), " | ABC_1 |: [" + Me.oldABC(1) + "] -> [" + FnClearFromSpec$(ABC(1)) + "]" + Chr(10), "") & _
                                       IIf(Me.oldABC(2) <> FnClearFromSpec$(ABC(2)), " | ABC_2 |: [" + Me.oldABC(2) + "] -> [" + FnClearFromSpec$(ABC(2)) + "]" + Chr(10), "") & _
                                       IIf(Me.oldABC(3) <> FnClearFromSpec$(ABC(3)), " | ABC_3 |: [" + Me.oldABC(3) + "] -> [" + FnClearFromSpec$(ABC(3)) + "]" + Chr(10), "")
    If pShad_up Then sadd up_str_long, IIf(Me.oldshad(1) <> FnClearFromSpec$(shad(1)), " | shad_1 |: [" + Me.oldshad(1) + "] -> [" + FnClearFromSpec$(shad(1)) + "]" + Chr(10), "") & _
                                       IIf(Me.oldshad(2) <> FnClearFromSpec$(shad(2)), " | shad_2 |: [" + Me.oldshad(2) + "] -> [" + FnClearFromSpec$(shad(2)) + "]" + Chr(10), "") & _
                                       IIf(Me.oldshad(3) <> FnClearFromSpec$(shad(3)), " | shad_3 |: [" + Me.oldshad(3) + "] -> [" + FnClearFromSpec$(shad(3)) + "]" + Chr(10), "")
    If pTerm_up Then sadd up_str_long, IIf(Me.oldterm(1) <> term(1), " | term_1 |: [" + Me.oldterm(1) + "] -> [" + term(1) + "]" + Chr(10), "") & _
                                       IIf(Me.oldterm(2) <> term(2), " | term_2 |: [" + Me.oldterm(2) + "] -> [" + term(2) + "]" + Chr(10), "") & _
                                       IIf(Me.oldterm(3) <> term(3), " | term_3 |: [" + Me.oldterm(3) + "] -> [" + term(3) + "]" + Chr(10), "")
    If pDef_up Then sadd up_str_long, IIf(Me.olddef(1) <> def(1), " | def_1 |:" + Chr(10) + compareByString$(Me.olddef(1), def(1)) + "" + Chr(10), "") & _
                                       IIf(Me.olddef(2) <> def(2), " | def_2 |:" + Chr(10) + compareByString$(Me.olddef(2), def(2)) + "" + Chr(10), "") & _
                                       IIf(Me.olddef(3) <> def(3), " | def_3 |:" + Chr(10) + compareByString$(Me.olddef(3), def(3)) + "" + Chr(10), ""): db_ Me.olddef(3) & "vs" & def(3)
    If pIDg_up Then sadd up_str_long, " | gID |: " + Me.oldGId + " -> " + Gid
End Property
'***************************************************************
'* Private procedures to perform the updates
'***************************************************************
' applied in Properties
'***************************************************************
'* Public procedures (Methods) CTerm-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'***************************************************************
Public Sub Initialize(id As String)
Dim i As Integer
Dim r As Integer
'----------------------------------------------
pid = id
pIDg = FnGetRootID(id)
'sID----------------------------------------------
i = 1: While (Not exists("_1_" & id & "_" & i)) And i <> 10: inc i: Wend
If i <> 10 Then pIDs = id & "_" & i Else pIDs = ""
'----------------------------------------------
For i = 1 To 3: r = FnGetRowFromID(id, i)
term(i) = Sheets(Index(i)).Cells(r, termcol)
def(i) = FnGetText(Sheets(Index(i)).Cells(r, defcol))
shad(i) = Sheets(Index(i)).Cells(r, shadcol)
Next i
'Cat|Link----------------------------------------------
pCat = Sheets(wsUa).Cells(r, catCol)
If Sheets(wsUa).Cells(r, defcol).Hyperlinks.Count Then _
    pLink = Right(Sheets(wsUa).Cells(r, defcol).Hyperlinks(1).SubAddress, _
            Len(Sheets(wsUa).Cells(r, defcol).Hyperlinks(1).SubAddress) - 3)
'ABC----------------------------------------------
r = FnGetRowFromID(id, eru(wsABC))
If CBool(r) Then For i = 1 To 3: ABC(i) = Sheets(wsABC).Cells(r, i * 2): Next i
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ABC |fffd||fffd| Term
If CBool(r) Then For i = 1 To 3: term(i) = FnDelAbbrev(term(i), ABC(i)): Next i
End Sub

'***************************************************************
'* Public procedures (Methods) Common
'***************************************************************
Public Function fUpdated(Optional shadIgnor As Boolean) As Boolean: Dim newrec As Boolean: If Me.oldID = "" Then newrec = True
  'pCat_up, pIDg_up, pABC_up, pTerm_up, pDef_up
  pABC_up = Not (ABC(1) = Me.oldABC(1) And ABC(2) = Me.oldABC(2) And ABC(3) = Me.oldABC(3))
  pTerm_up = Not (Replace(term(1), "''", "'") = Me.oldterm(1) And Replace(term(2), "''", "'") = Me.oldterm(2) And Replace(term(3), "''", "'") = Me.oldterm(3)) ''|fffd||fffd||fffd||fffd||fffd||fffd|
  pDef_up = Not (LCase(def(1)) = LCase(Me.olddef(1)) And LCase(def(2)) = LCase(Me.olddef(2)) And Not CBool(StrComp(def(3), Me.olddef(3)))): db_ prsCount(Chr(10), def(3)) & " vs " & prsCount(Chr(10), Me.olddef(3)) '; Replace(def(3), Chr(13), "") = Replace(Me.olddef(3), Chr(13), "") & compareByString(LCase(def(3)), LCase(Me.olddef(3))) 'LCase-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pCat_up = IIf(newrec, False, Not (cat = Me.oldcat)): pIDg_up = IIf(newrec, False, Not (Gid = Me.oldGId))
  If shadIgnor Then pShad_up = False Else _
  pShad_up = IIf(newrec, False, Not (FnClearFromSpec$(shad(1)) = Me.oldshad(1) And FnClearFromSpec$(shad(2)) = Me.oldshad(2) And FnClearFromSpec$(shad(3)) = Me.oldshad(3)))
  fUpdated = (pABC_up Or pTerm_up Or pDef_up Or pCat_up Or pIDg_up Or pShad_up)
'MsgBox CStr(Len(term(3))) & " |fffd||fffd||fffd||fffd|2  = " & term(3) + Chr(10) + _
CStr(Len(Me.oldterm(3))) & " old|fffd||fffd||fffd||fffd|2  = " & Me.oldterm(3)
End Function

Public Function fUpdatedPart(part As String) As Boolean
Select Case part: Case "a": fUpdatedPart = pABC_up: Case "t": fUpdatedPart = pTerm_up
       Case "d": fUpdatedPart = pDef_up: Case "c": fUpdatedPart = pCat_up: Case "s": fUpdatedPart = pShad_up: Case "g": fUpdatedPart = pIDg_up: End Select: End Function

'***************************************************************
'* Public procedures (Methods) CFTerm
'***************************************************************
Public Sub InitializeByForm()
If Not FnFormIsLoaded("EditForm") Then
  MsgBox "|fffd||fffd||fffd||fffd||fffd| EditForm |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub: End If
Dim i As Integer
Dim r As Integer
'----------------------------------------------
Rem {c9r}: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| general |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd| ID (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'1) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "rootID" |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd|ell(r,1).ID
With EditForm
pID_old = .CommandButton1.Caption '?
pisGen = .OptionButtonG.value
If pID_old = "" Then '|fffd||fffd||fffd| OLD (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
   pIDg_old = ""
   If Me.isGen Then pid = .TextBoxEnGId.Text _
               Else pid = FnGenerateID(Null, .TextBoxEnGId.Text)
   pIDs = ""
Else:
    pIDg_old = FnGetRootID(Me.oldID)
    'If .ToggleButton1.caption = "" Then '|fffd||fffd||fffd||fffd||fffd||fffd| ComboBox[]G.ControlTipText - c|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
                                         '|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?!? |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ID?
        If Me.isGen Then 'general
          If pID_old = .TextBoxEnGId.Text Then
                pid = pID_old '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Else: pid = .TextBoxEnGId.Text '|fffd||fffd||fffd||fffd||fffd|
          End If
        Else 'sub
          If pIDg_old = .TextBoxEnGId.Text Then '|fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                pid = pID_old '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Else: pid = FnGenerateID(Null, .TextBoxEnGId.Text) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          End If
        End If
    'ElseIf .ToggleButton1.caption = pIDg_old Then pIDg = pIDg_old: pID = pID_old '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    'Else: pIDg = .ToggleButton1.caption: pID = FnGenerateID(Null, Me.GId) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    'End If
    'sID---------------------------------------------- Me.oldID
    i = 1: While (Not exists("_1_" & pID_old & "_" & i)) And i <> 10: inc i: Wend
    If i <> 10 Then pIDs = pID_old & "_" & i Else pIDs = ""
    'oldsID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If
pIDg = FnGetRootID(Me.id)
End With
'----------------------------------------------
pRowG = FnGetRowFromID(Me.oldID, 0) '.rowG

For i = wsEn To wsUa: r = FnGetRowFromID(Me.oldID, eru(i)) 'sheet
    If CBool(r) Then '|fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|"
        row(eru(i)) = r 'rows ERU
        oldterm(eru(i)) = Sheets(i).Cells(r, termcol) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Chr(13), |fffd||fffd||fffd||fffd||fffd| - Chr(10)
        olddef(eru(i)) = Trim(Replace(FnGetText(Sheets(i).Cells(r, defcol)), Chr(13), "")): While Left(olddef(eru(i)), 1) = Chr(10): olddef(eru(i)) = Trim(Right(olddef(eru(i)), Len(olddef(eru(i))) - 1)): Wend '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        oldshad(eru(i)) = Sheets(i).Cells(r, shadcol)
    End If: Next i
With EditForm
For i = 1 To 3: term(i) = .GetTerm(i): def(i) = .GetDef(i): ABC(i) = .GetAbb(i): Next i 'form

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ABC |fffd||fffd| Term
If CBool(r) Then For i = 1 To 3: term(i) = FnDelAbbrev(term(i), ABC(i)): Next i
'UserForms(GetFormIndex("EditForm")).Controls("TextBox" & FnERUs(i) & "Abb")
'Shadow ---------------------------------------
If Me.Gid <> "" Then
  For i = 1 To 3: shad(i) = GetValidShadow(i, Me.id$): Next i '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  '.GetGroup(i, True): Next i '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
Else: For i = 1 To 3: shad(i) = term(i): Next i: End If
End With
'Shadow - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|------------------
'If pIDg = pIDg_old Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'  For i = 1 To 3: shad(i) = oldshad(i): Next i
'ElseIf pIDg = "" Then 'general (|fffd||fffd||fffd||fffd| = |fffd||fffd||fffd||fffd||fffd||fffd|)
'  For i = 1 To 3: shad(i) = term(i): Next i
'ElseIf pIDs = "" Then '  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) 'Already Root || -->will b|fffd| reMaked<--
'  If FnIsRoot(Me.GId) Then For i = 1 To 3: shad(i) = FnGetShadowFrom(i, Me.GId) & ".": Next i
'Else: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) 'Already Root || -->will b|fffd| reMaked<--
'  If FnIsRoot(Me.GId) Then For i = 1 To 3: shad(i) = FnGetShadowFrom(i, Me.GId) & "_" & term(i): Next i
'End If
'Cat|Link----------------------------------------------
pCat = EditForm.TextBoxCat.tag ' 'form
If CBool(Me.row(1)) Then '|fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|"
    pCat_old = Sheets(wsUa).Cells(r, catCol) 'sheet
    If Sheets(wsUa).Cells(r, defcol).Hyperlinks.Count Then _
        pLink = Right(Sheets(wsUa).Cells(r, defcol).Hyperlinks(1).SubAddress, _
                Len(Sheets(wsUa).Cells(r, defcol).Hyperlinks(1).SubAddress) - 3)
End If
'oldLink - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Def-|fffd||fffd||fffd||fffd||fffd|)
'oldABC----------------------------------------------
pRowA = FnGetRowFromID(Me.oldID, eru(wsABC)) 'sheet
If CBool(pRowA) Then
    For i = 1 To 3: oldABC(i) = Sheets(wsABC).Cells(pRowA, i * 2): If oldABC(i) <> "" Then oldterm(i) = Replace(oldterm(i), " (" & oldABC(i) & ")", "")
    Next i
  Else: pnoabc = True: End If
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-------------------------------------
Rem |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
If CBool(Me.row(1)) Then Me.bound_str = Sheets(wsEn).Cells(Me.row(1), 3).id
End Sub



Rem~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rem       |fffd||fffd||fffd||fffd||fffd||fffd|
Rem~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub UpdateRecord(): unProtectTrinity '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'<__________________________________________________________
Rem |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
 Rem' /* |fffd||fffd||fffd||fffd| Logic */
    Dim logic As Boolean: logic = EditForm.ToggleButton1.value
 Rem' /* |fffd||fffd||fffd||fffd| Coding */
    Dim Coding As Boolean: Coding = FnIsCoding(EditForm.TextBoxCat.Text)
'<__________________________________________________________
Dim ws%, i%, next_sheet%, pos%, pref$
For ws = wsGen To wsABC: Select Case ws
'---------------------------------------
Rem /* LINKS */
Case wsGen: If Not Me.isGen Then GoTo passL
        'MsgBox "/* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| wsGen */": GoTo quitL
        With Sheets(wsGen)
            Rem 'add ID
            If Me.inserted Or Me.id <> Me.oldID Then
              'MsgBox "/* Me.id <> Me.oldID */": GoTo quitL
              .Cells(Me.rowG, idcol).value = Me.id: Workbooks("MAIN.XLSB").Names.Add name:="_0_" + Me.id, _
              RefersTo:="=" + WS0 + "!" + Cells(Me.rowG, idcol).Address: End If
            Rem 'edit Links (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            If Me.inserted Or Me.fUpdatedPart("a") Or Me.fUpdatedPart("t") Or Me.oldGId <> "" Then
                'MsgBox "/* Me.fUpdatedPart(a) Or Me.fUpdatedPart(t) */": GoTo quitL
                For i = 1 To 3:    With .Cells(Me.rowG, i + 1): .value = Me.term(i)
                .Hyperlinks.Add Anchor:=.Item(1), Address:="", SubAddress:="_" + CStr(i) + "_" + Me.id, _
                                TextToDisplay:=FnMakeAbbTerm(Me.term(i), Me.ABC(i))
                If Me.sid = "" Then .Font.Bold = False
                End With: Next i: End If
            Rem 'edit |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Me.inserted Or Me.fUpdatedPart("c") Or Me.oldGId <> "" Then .Cells(Me.rowG, catCol).value = Me.cat
        End With
'____/_______/
Rem /* ERU */
Case wsEn, wsRu, wsUa: With Sheets(ws)
            Rem 'add ID
            If Me.inserted Or Me.id <> Me.oldID Then
                'MsgBox "/* Me.id <> Me.oldID */": GoTo quitL
              With Sheets(ws).Cells(Me.row(eru(ws)), idcol): .value = Me.id:
                If Not Me.inserted And Me.oldID <> "" And Me.id <> Me.oldID Then On Error Resume Next: _
                      Workbooks("MAIN.XLSB").Names("_" + CStr(eru(ws)) + "_" + Me.oldID).Delete: On Error GoTo 0
                Workbooks("MAIN.XLSB").Names.Add name:=FnGetPrefix(eru(ws)) + Me.id, RefersTo:="=" + Sheets(ws).name + "!" + .Address
                'ID-|fffd||fffd||fffd||fffd||fffd|
                If Me.isGen Then next_sheet = 0 Else next_sheet = eru(ws) + 1: If next_sheet = 4 Then next_sheet = 1
                .Hyperlinks.Add Anchor:=Sheets(ws).Cells(Me.row(eru(ws)), idcol), Address:="", SubAddress:=FnGetPrefix(next_sheet) + Me.id, TextToDisplay:=Me.id
                .Font.Underline = xlUnderlineStyleNone: .Font.ColorIndex = IIf(Me.isGen, inv(5), inv(48)) 'Font.Color
              End With: End If
            Rem 'Shadow
            If Me.inserted Or Me.fUpdatedPart("s") Then
                With .Cells(Me.row(eru(ws)), shadcol): .value = FnClearFromSpec$(Me.shad(eru(ws)))
                                                If Not Me.isGen Then .Font.ColorIndex = inv(15)           'Font.Color
                                                If Me.sid = "" Then .Font.Bold = False
            End With: End If
            Rem 'Term
            If Me.inserted Or Me.fUpdatedPart("a") Or Me.fUpdatedPart("t") Then
                With .Cells(Me.row(eru(ws)), termcol): .value = FnMakeAbbTerm(Me.term(eru(ws)), Me.ABC(eru(ws)))
                                                If Not Me.isGen Then .Font.ColorIndex = inv(xlAutomatic)  'Font.Color
                                                If Me.sid = "" Then .Font.Bold = False
                If Me.ABC(eru(ws)) <> "" Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| abb_addon
                  pos = InStr(1, .value, "(" & Me.ABC(eru(ws)) & ")", vbTextCompare)
                  .Characters(start:=pos + 1, Length:=Len(Me.ABC(eru(ws)))).Font.Underline = xlUnderlineStyleSingle
                  .Characters(start:=pos + 1, Length:=Len(Me.ABC(eru(ws)))).Font.Italic = True: End If
            End With: End If
            Rem 'Def
            If Me.inserted Or Me.fUpdatedPart("d") Then
              With Sheets(ws).Cells(Me.row(eru(ws)), defcol): If Left$(Me.def(eru(ws)), 1) = "=" Then pref$ = "'" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Not (Coding And ws <> wsRu) And FnIsLetter(Left$(Me.def(eru(ws)), 1)) Then '|fffd||fffd||fffd||fffd||fffd||fffd| " "
                  If FnIsCapsLetter(Mid$(Me.def(eru(ws)), 2, 1)) Then .value = pref$ & " " + Me.def(eru(ws)) _
                  Else .value = pref$ & " " + LCase(Left$(Me.def(eru(ws)), 1)) + Right$(Me.def(eru(ws)), Len(Me.def(eru(ws))) - 1) 'LCase |fffd||fffd||fffd||fffd||fffd| ABC
                Else: .value = pref$ + Me.def(eru(ws)): End If: 'If Left$(Me.def(eru(ws)), 1) = "=" Then db_ .value
            End With: End If
            
            Rem '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Me.inserted Or Me.fUpdatedPart("c") Then LM Me.cat: LP "c" & eru(ws) & "r" & Me.row(eru(ws)): .Cells(Me.row(eru(ws)), catCol).value = Me.cat
        End With
'____/________________/
Rem /* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| */
Case wsABC: If Not CBool(Me.rowA) Then GoTo passL
        With Sheets(wsABC)
            If Me.noabc Or Me.inserted Or Me.id <> Me.oldID Then
              With .Cells(Me.rowA, idcol): .value = Me.id: .Font.ColorIndex = inv(15): End With: End If
            Rem 'Links (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            If Me.noabc Or Me.inserted Or Me.fUpdatedPart("a") Then
                For i = 1 To 3
                    If Me.ABC(i) <> Me.oldABC(i) Then With .Cells(Me.rowA, i * 2): .value = Me.ABC(i): _
                                                           .Font.ColorIndex = inv(xlAutomatic): End With
                Next i: End If
            If Me.noabc Or Me.inserted Or Me.id <> Me.oldID _
                                       Or Me.fUpdatedPart("t") Then
                For i = 1 To 3
                    With .Cells(Me.rowA, i * 2 + 1): .value = Me.term(i)
                    .Hyperlinks.Add Anchor:=.Item(1), _
                                   Address:="", SubAddress:="_" + CStr(i) + "_" + Me.id, TextToDisplay:=Me.term(i)
                    .Font.Underline = xlUnderlineStyleNone: End With:
                Next i: End If
            Rem '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Me.noabc Or Me.inserted Or Me.fUpdatedPart("c") Then .Cells(Me.rowA, 8).value = Me.cat
        End With
'<---------------------------------------------------------
passL: End Select: Next ws: LP 4
'_________________________________________________________
Rem '/* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| */
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Me.inserted And Me.link <> "" Then
       If Not Me.fUpdatedPart("d") Then Call SetDefHyper(Me.id, Me.link, True)
        'Else: For i = 1 To 3: Sheets(index(i)).Hyperlinks.Add _
                              Anchor:=Sheets(index(i)).Cells(Me.row(i), 4), Address:="", _
                                  SubAddress:=FnGetPrefix(i) + Me.link, TextToDisplay:=Me.def(i): Next i: End If
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Me.id <> Me.oldID Then If Me.bound_str <> "" Then Call UpdateDefLinksLocal(Me.id, Me.bound_str)
'_____/_______________/
Rem '/* changes_Log */
If Me.oldID = "" Then LogIDInsert Me.id: GoTo finaL
If Me.oldID <> Me.id Then LogIDChange Me.oldID, Me.id: GoTo finaL
If pABC_up Or pTerm_up Or pDef_up Then LogChangeState Me.id, "item": LogLUPdate Me.id: GoTo finaL
If pCat_up Or pShad_up Or pIDg_up Then LogChangeState Me.id, "serv": GoTo finaL
'_____/_______________/
Rem '/* presave_log */
finaL: add2file Me.toXML("u"): ProtectTrinity: End Sub
Rem~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Public Function toXML$(oper$): Dim s$: If id = "" Then MsgBox "no Term": Exit Function
s = s & "<_" & oper$ & "_> " & Chr(13)
  s = s & " <_id_> " & id & " </_id_>" & IIf(Gid = "", "", "<_GId_> " & Gid & " </_GId_>") _
                                       & IIf(sid = "", "", "<_sID_> " & sid & " </_sID_>") _
                                       & " <_cat_> " & cat & " </_cat_>" & IIf(link = "", "", "<_link_> " & link & " </_link_>") & Chr(13)
  s = s & " <_term1_> " & term(1) & " </_term1_>" & IIf(shad(1) = term(1), "", "<_shad1_> " & shad(1) & " </_shad1_>") & IIf(ABC(1) = "", "", "<_ABC1_>" & ABC(1) & "</_ABC1_>") & Chr(13)
  If def(1) <> "" Then s = s & "  <_def1_> " & Trim(def(1)) & " </_def1_>" & Chr(13)
  s = s & " <_term2_> " & term(2) & " </_term2_>" & IIf(shad(2) = term(2), "", "<_shad2_> " & shad(2) & " </_shad2_>") & IIf(ABC(2) = "", "", "<_ABC2_>" & ABC(2) & "</_ABC2_>") & Chr(13)
  If def(2) <> "" Then s = s & "  <_def2_> " & Trim(def(2)) & " </_def2_>" & Chr(13)
  s = s & " <_term3_> " & term(3) & " </_term3_>" & IIf(shad(3) = term(3), "", "<_shad3_> " & shad(3) & " </_shad3_>") & IIf(ABC(3) = "", "", "<_ABC3_>" & ABC(3) & "</_ABC3_>") & Chr(13)
  If def(3) <> "" Then s = s & "  <_def3_> " & Trim(def(3)) & " </_def3_>" & Chr(13)
s = s & "<_" & oper$ & "_/>": toXML$ = s: End Function

Attribute VB_Name = "CServ"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, low_level |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'Option Explicit 'force explicit declaration of all variables in that module.

'Common declarations
Private Type Trows: id As String: rG As Long: r1 As Long: r2 As Long: r3 As Long: rA As Long: rL As Long: End Type
'Variables to store the various selections/options
Private rows As Trows, o_id$ 'old_id saved

'***************************************************************
'* Property Methods to get and set the term's prameters
'***************************************************************
Public Property Get row(c) As Long: If rows.r1 = 0 Then MsgBox "CServ is not initialized!": Exit Property
                                                 L0M "row(" & c & ")": row = Trow&(rows, c): End Property

'***************************************************************
'* Private Methods
'***************************************************************
Private Function Trow&(TR As Trows, c): With TR
                 Trow& = decode(c, "G", .rG, 0, .rG, 1, .r1, 2, .r2, 3, .r3, 4, .rA, "A", .rA, 5, .rL, "L", .rL): End With: End Function
Private Sub Trow_ini(TR As Trows, id$, Optional triniti As Boolean)
                With TR: If Not triniti Then .rG = FnFarRow&(0, id): .rA = FnFarRow&(4, id): .rL = FnFarRow&(5, id) '|fffd||fffd||fffd|.
                                             .r1 = FnFarRow&(1, id): .r2 = FnFarRow&(2, id): .r3 = FnFarRow&(3, id): End With: End Sub

'***************************************************************
'* Public Methods
'***************************************************************
Public Sub Initialize(id$): o_id$ = id$: Trow_ini rows, id$: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID

Public Sub ShowMe(): Dim i%, s$: For i = 0 To 5: s$ = s & row(i) & " ": Next: MsgBox "'" & o_id$ & "': " & s$: End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| id$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Sub pressID(Optional ByVal id$): ls "~", "pressID", id$           '(TEST)|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Gen->sub (|fffd||fffd||fffd||fffd||fffd| msg |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
         id$ = blank(id$, o_id$): cnt% = prsCount("_", id$): If cnt% = 0 Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MsgBox "'" & ID$ & "' is General!", vbExclamation: Exit Sub
                                                             If exists("_1_" & id$) Then MsgBox id$ & ": |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
         Dim cs As New CServ: Root$ = FnGetRootID(id$): n = prsAfter|fffd|(cnt%, "_", id$): sn% = n
         Do: n = sn%: While exists("_1_" & Root$ & "_" & inc(n)): Wend: dec n '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        If n > sn% Then cs.Initialize Root$ & "_" & n: cs.reID2 FnGenerateID(Null, Root$), False, True
         Loop Until exists("_1_" & id$) Or n = sn%: Set cs = Nothing: End Sub
                                                             
'v2       Dim cs As New CServ: cs.Initialize id$: cs.reID2 FnGenerateID(Null, FnGetRootID(id$)), False, True: Set cs = Nothing: End Sub
'v1       Root$ = FnGetRootID(id$): n = prsAfter|fffd|(cnt%, "_", id$)
'         Dim cs As New CServ: While exists("_1_" & Root$ & "_" & inc(n)): id$ = Root$ & "_" & n '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'                                    cs.Initialize id$: cs.reID2 FnGenerateID(Null, Root$): Wend: Set cs = Nothing: End Sub
'***************************************************************
Public Sub ReCat2(Optional ByVal id$): Dim n%, cat$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Dim doneF As Boolean: RootID$ = FnGetRootID(id$): If Not exists("_1_" & RootID) Then doneF = True: GoTo noRootL  '|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cat |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
nxtLvl: n% = 0: cat$ = "": While exists("_1_" & RootID & "_" & inc(n)): sadd cat$, Sheets(wsEn).Cells(FnFarRow&(1, RootID & "_" & n), catCol):
                           db_ RootID$ & " + " & cat$: Wend: cat$ = FnZoneMerging$("", cat$): db_ RootID$ & " = " & cat$
If cat$ <> Sheets(wsEn).Cells(FnFarRow&(1, RootID), catCol) Then setCat RootID, cat$: RootID$ = FnGetRootID(RootID$): If RootID <> "" Then GoTo nxtLvl '+ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
noRootL: If Not doneF Then doneF = True: If o_id$ <> id$ Then RootID$ = FnGetRootID(o_id$): If RootID <> "" Then GoTo nxtLvl '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| OldRoot |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
End Sub
'***************************************************************

Public Function FullDelete() As Boolean: Dim d_rows As Trows
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDB
myOldFolderName = ThisWorkbook.path & "\PDB\" & o_id$
If dir(myOldFolderName, 16) <> "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| PDB |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Function
'root - |fffd||fffd||fffd||fffd||fffd||fffd|
If FnIsRoot(o_id$) Then MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Function
'Hyper (Def)
If Sheets(wsEn).Cells(row(1), 3).id <> "" Then '<- id |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |id1|id2|...
  id_set$ = Sheets(wsEn).Cells(row(1), 3).id
  For k% = 1 To prsCount("|", id_set) - 1: Trow_ini d_rows, prsBetween|fffd|(k, "|", "|", id_set), True
    For l = wsEn To wsUa: dr& = Trow&(d_rows, eru(l)): Sheets(l).Cells(dr&, defcol).Hyperlinks(1).Delete
  Next l: Next k: End If
If Sheets(wsEn).Cells(row(1), 4).Hyperlinks.Count Then '-> |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| id_set)
    Trow_ini d_rows, prsAfter|fffd|(2, "_", Sheets(wsEn).Cells(row(1), 4).Hyperlinks(1).SubAddress), True
    For l = wsEn To wsUa: dr& = Trow&(d_rows, eru(l)): With Sheets(l).Cells(dr&, termcol): .id = Replace(.id, "|" & o_id & "|", "|")
End With: Next l: End If
'Deleting ****
On Error Resume Next
For i = wsGen To wsLog: CR& = row(eru(i)): If i <> wsABC Then Workbooks("MAIN.XLSB").Names("_" + CStr(eru(i)) + "_" + o_id$).Delete
                        Sheets(i).rows(CR&).Delete '<--
Next i: On Error GoTo 0: FullDelete = True
'Post |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Roots)
oRoot$ = FnGetRootID(o_id$): If oRoot$ = "" Then Exit Function
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| oRoot$
  Me.pressID
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| oRoot$
  If Not FnIsRoot(oRoot$) Then '-> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|       '! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| reID2 !
                  UpdateRowFormatting oRoot: Trow_ini d_rows, oRoot, True
                       If hasIt("_", oRoot) Then 'r_flg = "G" - const
                        For l = wsEn To wsUa: 'If r_flg = "G" Then shad = Sheets(l).Cells(Trow&(d_rows, eru(l)), termcol) Else
                                '   shad = FnGetRootShadow(eru(l), oRoot) '|fffd| General |fffd||fffd||fffd||fffd||fffd| "" |fffd|.|fffd|. shad = term
                                'If shad = "" Then shad = Sheets(l).Cells(Trow&(d_rows, eru(l)), termcol) Else shad = shad & "."
                                'Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol).value = FnClearFromSpec$(shad): Next l: End If
                                Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol).value = GetValidShadow(eru(l), oRoot): Next l: End If
  Else: ReCat2: End If: LogChangeState oRoot$, "serv": End Function '! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| reID2 !
'***************************************************************

Public Function reID2$(ByVal id$, Optional POSTprocessing As Boolean, Optional ByVal noPress As Boolean):  'noPress = True
                                                                If id$ = "" Then GoTo noIdL '|fffd||fffd||fffd||fffd||fffd| ID (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                                If rows.r1 = 0 Then _
                                                                  If Not POSTprocessing Then GoTo nL  'isn't Initialized (& not NEW)
                                                                'Else: id$ = Sheets(wsEn).Cells(row(1), idcol): End If '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
oRoot$ = FnGetRootID(o_id$): nRoot$ = FnGetRootID(id$): nRoot_WasBefore = FnIsRoot(nRoot$, id$)     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'Auto
    If FnFormIsLoaded("EditForm") Then If EditForm.FnAutoMode Then _
      If hasIt("|" & o_id$ & "|", EditForm.CommandButton1.ControlTipText) Then _
        EditForm.CommandButton1.ControlTipText = Replace(EditForm.CommandButton1.ControlTipText, "|" & o_id$ & "|", "|" & id$ & "|")
              
                                  If id$ = o_id$ Then justShadowsFlg = True: GoTo justShadowsL    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                                  If POSTprocessing Then
                                                        If Not exists("_1_" & id$) Then Exit Function '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| pressID |fffd||fffd||fffd||fffd||fffd| (|fffd|-sub-|fffd||fffd||fffd||fffd||fffd|)
                                                        Trow_ini rows, id$: If o_id$ = "" Then GoTo noOldL '(|fffd|.|fffd|. NEW)
                                                                    GoTo POSTprocessingL: End If  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (id |fffd||fffd||fffd||fffd||fffd||fffd||fffd| T2)
For i = 0 To 5: CR& = row(i) 'BM
If CR& > 0 Then 'indexed
  With Sheets(Index(i)): On Error Resume Next: Workbooks("MAIN.XLSB").Names(FnGetPrefix(i) & .Cells(CR&, 1)).Delete: On Error GoTo 0:
      .Cells(CR&, 1) = id: If i <> 4 Then Set_BookMark_on .Index, row(i), FnGetPrefix(i) & id '|fffd||fffd||fffd||fffd||fffd| ABC
      'Hyper (ID)
      If i = 0 Or i = 4 Then 'Gen & Abc
          M% = IIf(i = 4, 2, 1): For j = 1 To 3: On Error Resume Next: .Cells(CR&, 1 + M * j).Hyperlinks(1).Delete: On Error GoTo 0
          .Hyperlinks.Add Anchor:=.Cells(CR&, 1 + M * j), Address:="", SubAddress:= _
                             FnGetPrefix(j) & id$ ', TextToDisplay:=.Cells(cr&, 1 + M * j)
                            .Cells(CR&, 1 + M * j).Font.Underline = xlUnderlineStyleNone: Next j
      ElseIf FnIsTrinity(.name) Then On Error Resume Next: .Cells(CR&, 1).Hyperlinks(1).Delete: On Error GoTo 0
          .Hyperlinks.Add Anchor:=.Cells(CR&, 1), Address:="", SubAddress:="_" & IIf(row("G") > 0, 0, nvl2(i = 3, i + 1, 1)) & "_" + id$
          .Cells(CR&, 1).Font.Underline = xlUnderlineStyleNone: If row("G") = 0 Then .Cells(CR&, 1).Font.ColorIndex = inv(48) 'gray
      With .Cells(CR&, 1): .WrapText = False: .Interior.ColorIndex = inv(15): .ShrinkToFit = True: End With  'beckground patameters
End If: End With: End If: Next i
      'Hyper (Def) in-out
Dim d_rows As Trows:
      If Sheets(wsEn).Cells(row(1), 3).id <> "" Then 'id |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |id1|id2|...
        id_set$ = Sheets(wsEn).Cells(row(1), 3).id
        For k% = 1 To prsCount("|", id_set) - 1: Trow_ini d_rows, prsBetween|fffd|(k, "|", "|", id_set), True
          For l = wsEn To wsUa: dr& = Trow&(d_rows, eru(l)): Sheets(l).Cells(dr&, defcol).Hyperlinks(1).SubAddress = FnGetPrefix(eru(l)) & id$
      Next l: Next k: End If
      If Sheets(wsEn).Cells(row(1), 4).Hyperlinks.Count Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| id_set)
                                                Trow_ini d_rows, prsAfter|fffd|(2, "_", Sheets(wsEn).Cells(row(1), 4).Hyperlinks(1).SubAddress), True
          For l = wsEn To wsUa: dr& = Trow&(d_rows, eru(l)): With Sheets(l).Cells(dr&, termcol): .id = Replace(.id, "|" & o_id & "|", "|" & id & "|")
      End With: Next l: End If
POSTprocessingL: If Not exists("_1_" & nRoot$) Then nRoot$ = "": 'db_ "NO nRoot$"  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
                 If Not exists("_1_" & oRoot$) Then oRoot$ = "": 'db_ "NO oRoot$"
      'PDB - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
        myOldFolderName = ThisWorkbook.path & "\PDB\" & o_id$
        If dir(myOldFolderName, 16) <> "" Then Name myOldFolderName As Replace(myOldFolderName, "\" & o_id$, "\" & id$)
justShadowsL:
      'Shadow (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      If oRoot <> nRoot Then If nRoot$ <> "" Then If Not nRoot_WasBefore Then srvApplayShadows4 nRoot$ '-> |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      For l = wsEn To wsUa: Sheets(l).Cells(row(eru(l)), shadcol).value = GetValidShadow(eru(l), id$): Next l
      'SUBTerms - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Dim cs As New CServ
      M% = 1: While exists("_1_" & o_id$ & "_" & M%)
                cs.Initialize o_id$ & "_" & M%
                cs.reID2 id$ & "_" & M%, , True 'noPress!
      inc M%: Wend: Set cs = Nothing
      
      If justShadowsFlg Then ReCat2: GoTo IndentLevelL '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| oRoot |fffd||fffd| o_id$
      If o_id$ <> id$ And nRoot$ <> "" And Not noPress Then
                                          Me.pressID '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| nRoot$ |fffd| id$
                                          If Not exists("_1_" & nRoot$) Then id$ = Sheets(wsEn).Cells(row(1), idcol): _
                                                                nRoot$ = Sheets(wsEn).Cells(Trow&(d_rows, 1), idcol): _
                                              If FnFormIsLoaded("EditForm") Then If FnAutoMode Then reID2 = nRoot$ '|fffd||fffd||fffd||fffd||fffd| T2.Gid
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      If oRoot <> nRoot Then
         If oRoot <> "" Then
           If exists("_1_" & oRoot) Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SUBTerms - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If Not FnIsRoot(oRoot) Then '-> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| FullDelete !
                  UpdateRowFormatting oRoot: Trow_ini d_rows, oRoot, True
                       If hasIt("_", oRoot) Then 'r_flg = "G" - const
                        For l = wsEn To wsUa: 'If r_flg = "G" Then shad = Sheets(l).Cells(Trow&(d_rows, eru(l)), termcol) Else
                        '           shad = FnGetRootShadow(eru(l), oRoot) '|fffd| General |fffd||fffd||fffd||fffd||fffd| "" |fffd|.|fffd|. shad = term
                        '        If shad = "" Then shad = Sheets(l).Cells(Trow&(d_rows, eru(l)), termcol) Else shad = shad & "."
                        '        Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol).value = FnClearFromSpec$(shad): Next l: End If
                                Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol).value = GetValidShadow(eru(l), oRoot): Next l: End If
                                
         End If: End If: End If '<-oRoot                                 '! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| FullDelete !
noOldL:  If nRoot <> "" Then
            Trow_ini d_rows, nRoot, True
            If Not nRoot_WasBefore Then '-> |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                  UpdateRowFormatting nRoot: 'End If
                     If hasIt("_", nRoot) Then 'r_flg = "G" - const
                      For l = wsEn To wsUa: 'If r_flg = "G" Then shad = Sheets(l).Cells(Trow&(d_rows, eru(l)), termcol) Else
                              '                             shad = Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol): _
                              '                             term = Sheets(l).Cells(Trow&(d_rows, eru(l)), termcol): _
                              '                             shad = Left(shad, Len(shad) - 1) & "_" & term '|fffd||fffd||fffd| "." + "_term"
                              'Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol).value = FnClearFromSpec$(shad): Next l: End If: End If
                              Sheets(l).Cells(Trow&(d_rows, eru(l)), shadcol).value = GetValidShadow(eru(l), nRoot): Next l: End If: End If
'            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| nRoot (|fffd||fffd||fffd||fffd| |fffd| SwitchKey, |fffd||fffd||fffd||fffd| |fffd| ReCat2)
'            old_cat$ = Sheets(wsEn).Cells(Trow&(d_rows, eru(wsEn)), catcol)
'            new_cat$ = FnZoneMerging(old_cat, Sheets(wsEn).Cells(row&(eru(wsEn)), catcol))
'            If old_cat <> new_cat Then
'              For l = wsGen To wsABC: CR& = Trow&(d_rows, eru(l)):
'              If CR& > 0 Then Sheets(l).Cells(CR&, catcol).value = new_cat
'            Next l: End If
         End If '<-nRoot
      End If: If Not noPress Then ReCat2 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      'Log_
      LogChangeState id$, "serv"
IndentLevelL: For l = wsEn To wsUa: With Sheets(l): .Cells(row(eru(l)), termcol).IndentLevel = prsCount("_", Replace(.Cells(row(eru(l)), shadcol) & "#", ".#", "_")):
              'db_ l & ": " & row(eru(l)) & ": " & .Cells(row(eru(l)), shadcol) & " = " & prsCount("_", Replace(.Cells(row(eru(l)), shadcol) & "#", ".#", "_"))
              End With: Next l
Exit Function
noIdL: MsgBox "There is no ID there!", vbExclamation
Exit Function
nL: MsgBox "CServ isn't initialized!", vbExclamation
End Function
'***************************************************************
Attribute VB_Name = "CTerm"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit 'force explicit declaration of all variables in that module.

'Variables to store the various selections/options

Private pid, pIDg, pIDs 'As String
Private pCat, pLink As String
Private pTerm1, pTerm2, pTerm3 As String
Private pDef1, pDef2, pDef3 As String
Private pABC1, pABC2, pABC3 As String
Private pShad1, pShad2, pShad3 As String

'Set the class's initial properties to be those of a default object
Private Sub Class_Initialize()
  'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
End Sub

Private Sub Class_Terminate()
  'MsgBox "|fffd||fffd||fffd|"
End Sub

'***************************************************************
'* Property procedures to get and set the term's prameters
'***************************************************************
'Property Get procedure - gets the value of a property.
'Property Let procedure - assigns a value to a property.
'Property Set procedure - sets a reference to an object.
Public Property Get id() As String: id = pid: End Property
Public Property Let id(T As String): pid = T: End Property
Public Property Get cat() As String: cat = pCat: End Property
Public Property Let cat(T As String): pCat = T: End Property
Public Property Get link() As String: link = pLink: End Property
Public Property Let link(T As String): pLink = T: End Property
Public Property Get Gid() As String: Gid = pIDg: End Property
Public Property Let Gid(T As String): pIDg = T: End Property
Public Property Get sid() As String: sid = pIDs: End Property
Public Property Let sid(T As String): pIDs = T: End Property

'TERMS
Public Property Get term(i As Integer) As String: Select Case i: Case 1: term = pTerm1: Case 2: term = pTerm2: Case 3: term = pTerm3: End Select: End Property
Public Property Let term(i As Integer, T As String): Select Case i: Case 1: pTerm1 = T: Case 2: pTerm2 = T: Case 3: pTerm3 = T: End Select: End Property

'DEFINITIONS
Public Property Get def(i As Integer) As String: Select Case i: Case 1: def = pDef1: Case 2: def = pDef2: Case 3: def = pDef3: End Select: End Property
Public Property Let def(i As Integer, T As String): Select Case i: Case 1: pDef1 = T: Case 2: pDef2 = T: Case 3: pDef3 = T: End Select: End Property

'ABBREVIATIONS
Public Property Get ABC(i As Integer) As String: Select Case i: Case 1: ABC = pABC1: Case 2: ABC = pABC2: Case 3: ABC = pABC3: End Select: End Property
Public Property Let ABC(i As Integer, T As String): Select Case i: Case 1: pABC1 = T: Case 2: pABC2 = T: Case 3: pABC3 = T: End Select: End Property

'SHADOWS
Public Property Get shad(i As Integer) As String: Select Case i: Case 1: shad = pShad1: Case 2: shad = pShad2: Case 3: shad = pShad3: End Select: End Property
Public Property Let shad(i As Integer, T As String): Select Case i: Case 1: pShad1 = T: Case 2: pShad2 = T: Case 3: pShad3 = T: End Select: End Property

'***************************************************************
'* Private procedures to perform the updates
'***************************************************************
' applied in Properties
'***************************************************************
'* Public procedures (Methods)
'***************************************************************

Public Sub Initialize(id As String)
Dim i As Integer
Dim r As Integer
'----------------------------------------------
pid = id
pIDg = FnGetRootID(id)
'sID----------------------------------------------
i = 1: While (Not exists("_1_" & id & "_" & i)) And i <> 10: i = i + 1: Wend
If i <> 10 Then pIDs = id & "_" & i Else pIDs = ""
'----------------------------------------------
For i = 1 To 3: r = FnGetRowFromID(id, i)
term(i) = Sheets(Index(i)).Cells(r, termcol) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Chr(13), |fffd||fffd||fffd||fffd||fffd| - Chr(10)
def(i) = Trim(Replace(FnGetText(Sheets(Index(i)).Cells(r, defcol)), Chr(13), "")): While Left(def(i), 1) = Chr(10): def(i) = Trim(Right(def(i), Len(def(i)) - 1)): Wend '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'def(i) = Trim(Replace(FnGetText(Sheets(index(i)).Cells(r, defcol)), Chr(10), Chr(13))): While Left(def(i), 1) = Chr(13): def(i) = Trim(Right(def(i), Len(def(i)) - 1)): Wend '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
shad(i) = Sheets(Index(i)).Cells(r, shadcol)
Next i
'Cat|Link----------------------------------------------
pCat = Sheets(wsUa).Cells(r, catCol): 'das id = "65"
If Sheets(wsUa).Cells(r, defcol).Hyperlinks.Count Then _
    pLink = Right(Sheets(wsUa).Cells(r, defcol).Hyperlinks(1).SubAddress, _
            Len(Sheets(wsUa).Cells(r, defcol).Hyperlinks(1).SubAddress) - 3) Else pLink = ""
'ABC----------------------------------------------
r = FnGetRowFromID(Me.id, eru(wsABC))
For i = 1 To 3: If CBool(r) Then ABC(i) = Sheets(wsABC).Cells(r, i * 2) Else ABC(i) = ""
        Next i
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ABC |fffd||fffd| Term
If CBool(r) Then For i = 1 To 3: term(i) = FnDelAbbrev(term(i), ABC(i)): Next i
End Sub


Public Function toXML$(): Dim s$: If id = "" Then MsgBox "no Term": Exit Function
s = s & "<_t_> " & Chr(13)
  s = s & " <_id_> " & id & " </_id_>" & IIf(Gid = "", "", "<_GId_> " & Gid & " </_GId_>") _
                                       & IIf(sid = "", "", "<_sID_> " & sid & " </_sID_>") _
                                       & " <_cat_> " & cat & " </_cat_>" & IIf(link = "", "", "<_link_> " & link & " </_link_>") & Chr(13)
  s = s & " <_term1_> " & term(1) & " </_term1_>" & IIf(shad(1) = term(1), "", "<_shad1_> " & shad(1) & " </_shad1_>") & IIf(ABC(1) = "", "", "<_ABC1_>" & ABC(1) & "</_ABC1_>") & Chr(13)
  If def(1) <> "" Then s = s & "  <_def1_> " & Trim(def(1)) & " </_def1_>" & Chr(13)
  s = s & " <_term2_> " & term(2) & " </_term2_>" & IIf(shad(2) = term(2), "", "<_shad2_> " & shad(2) & " </_shad2_>") & IIf(ABC(2) = "", "", "<_ABC2_>" & ABC(2) & "</_ABC2_>") & Chr(13)
  If def(2) <> "" Then s = s & "  <_def2_> " & Trim(def(2)) & " </_def2_>" & Chr(13)
  s = s & " <_term3_> " & term(3) & " </_term3_>" & IIf(shad(3) = term(3), "", "<_shad3_> " & shad(3) & " </_shad3_>") & IIf(ABC(3) = "", "", "<_ABC3_>" & ABC(3) & "</_ABC3_>") & Chr(13)
  If def(3) <> "" Then s = s & "  <_def3_> " & Trim(def(3)) & " </_def3_>" & Chr(13)
s = s & "<_t_/>": toXML$ = s: End Function

Function prsRowsHaving$(it$, ByVal src$, Optional ByVal EoL$): If src$ = "" Then Exit Function 'src$ = Replace(src$, Chr(13), Chr(10)):
                                                               If EoL$ = "" Then EoL$ = Chr(10)
                                             Dim r_cnt%: r_cnt% = prsCount(EoL$, src$): If r_cnt = 0 Then prsRowsHaving$ = src$: Exit Function
Dim i%, s$, s_pos%, f_pos&, nxt_it$, hasFlg As Boolean:
            For i% = 1 To r_cnt + 2: s$ = prsBetween|fffd|(i, EoL$, EoL$, src$): f_pos& = 0 'ini
                Do: s_pos% = f_pos& + 1: nxt_it$ = CT_FnGetNextWord$(s_pos%, it$, f_pos&, , True)
                  If hasIt(nxt_it$, s$) Then prsRowsHaving$ = prsRowsHaving$ & iif_$(i% > 1, iif_(prsRowsHaving$ <> "", EoL$) & "...") & s$: GoTo skipL
                Loop Until nxt_it$ = ""
skipL:      Next i%: End Function

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 'short'
Public Function toHTML$(Optional part$, Optional result$, Optional resnum%, Optional tabF As Boolean, Optional short As Boolean)
                                                                                                If id = "" Then MsgBox "no Term": Exit Function
'Dim lT1 As Label, lT2 As Label, lT3 As Label, lD1 As Label, lD2 As Label, lD3 As Label
'tabF = False
Dim s$, cdef$, id_after_Term$, nopartF As Boolean, fF As Boolean: fF = result$ <> "" 'FindFlag
              Select Case part$: Case "": nopartF = True
                     Case "t1": GoTo lT1: Case "t2": GoTo lT2: Case "t3": GoTo lT3
                     Case "d1": GoTo lD1: Case "d2": GoTo lD2: Case "d3": GoTo lD3: End Select
'http://www.helpful-stuff.ru/2010/10/html-html-entities.html        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim EoL$, HR$: HR$ = iif_$(Not fF, "<HR>"): EoL$ = iif_$(Not fF, Chr(13)) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| id?)
               sadd s, "<font size=-1>" & iif_$(tabF, "<a name=#" & resnum% & "></a><table CELLSPACING = 1>") '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| <table> -- |fffd| p{text-indent:-15px;} CELLSPACING = 1 -> CELLPADDING=10px>
Dim TRon$, TRoff$: TRon$ = iif_$(tabF, "<TR>"): TRoff$ = iif_$(tabF, "</TR>")                      '<-----------FONT SIZE |fffd||fffd| |fffd||fffd||fffd|. |fffd| <TD>
Dim TDon1$, TDon2$, TDoff$: TDon1$ = iif_$(tabF, "<TD VALIGN=TOP width=150><font size=2>")         '<-----------FONT SIZE <TD>
                            TDon2$ = iif_$(tabF, "<TD VALIGN=TOP><font size=2>"): TDoff$ = iif_$(tabF, "</font></TD>")
Dim BLOCKQUOTE$: BLOCKQUOTE$ = iif_$(Not tabF, "</BLOCKQUOTE><BLOCKQUOTE>") '"<BLOCKQUOTE>" '"<TD>"
's = s & "<B>" & id & "</B><BR><BR>" & Chr(13)
s = s & TRon$: If resnum% > 0 Then s = s & "<TD VALIGN=TOP width=10><a href=#><font size=2 color=GRAY>#" & resnum% & ": </font></a></TD>": _
                                   If tabF Then TRon$ = TRon$ & "<TD width=10></TD>"
                                   If Not tabF Then id_after_Term$ = "<font color=WHITE>#" & id & "/</font>"
                                   Dim abc_1$, abc_2$, abc_3$: If ABC(1) <> "" Then abc_1$ = " (" & ABC(1) & ")"
                                                               If ABC(2) <> "" Then abc_2$ = " (" & ABC(2) & ")"
                                                               If ABC(3) <> "" Then abc_3$ = " (" & ABC(3) & ")"
Dim term1_link$: term1_link$ = |fffd||fffd||fffd||fffd|HTML$(term(1) & abc_1$)
If short Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    If dir(ThisWorkbook.path & "\html\" & id & ".html") <> "" Then
      'term1_link$ = db_( "<A HREF=""" & ThisWorkbook.path & "\html\" & ID & ".html"">" & term1_link$ & "</A>")
      term1_link$ = term1_link$ & "</A><A HREF=<CONST>""" & ThisWorkbook.path & "\html\" & id & ".html""</CONST>>" & _
        "<BLOCKQUOTE><<CONST>SPAN STYLE=BACKGROUND-COLOR:#DDF7FA;color:LIGHTGRAY</CONST>><I>[|fffd||fffd||fffd|]</I></SPAN></A>"
'      term1_link$ = "<A HREF=<CONST>""" & ThisWorkbook.path & "\html\" & ID & ".html""</CONST>>" & _
'      term1_link$ & "</A><A HREF=<CONST>""" & ThisWorkbook.path & "\html\" & ID & ".html""</CONST>>" & _
'        "<BLOCKQUOTE><<CONST>SPAN STYLE=BACKGROUND-COLOR:#DDF7FA;color:LIGHTGRAY</CONST>><I>[|fffd||fffd||fffd|]</I></SPAN></A>"
      'term1_link$ & "<BLOCKQUOTE><<CONST>SPAN STYLE=BACKGROUND-COLOR:#DDF7FA;color:LIGHTGRAY</CONST>><I>[|fffd||fffd||fffd|]</I></SPAN>"
      'term1_link$ & "</A><BLOCKQUOTE><font size=1 color=GRAY><I>[|fffd||fffd||fffd|]</I></font>")
      'term1_link$ = db_( "<A HREF=" & ThisWorkbook.path & "\html\" & ID & ".html>" & term1_link$ & "</A>")
End If: End If
lT1: s = s & TDon1$ & "<B>" & |fffd||fffd||fffd||fffd|HTML$(term1_link$, , result$) & "</B>" & id_after_Term$ & IIf(short, "<BR>", "<HR>") & IIf(short, "", TDoff$) & EoL$: If Not nopartF Then GoTo exitL
     If short Then GoTo lT2
lD1: db_ "lD1", id = "65": If short Then cdef$ = prsRowsHaving$(result$, def(1)) Else cdef$ = def(1)
     s = s & BLOCKQUOTE$ & iif_$(Not short, TDon2$) & |fffd||fffd||fffd||fffd|HTML$(|fffd||fffd||fffd||fffd|HTML$(cdef$), , result$) & _
                iif_$(fF And def(1) <> "" And def(2) <> "", IIf(short, "<BR>", "<HR>")) & iif_$(Not short, TDoff$) & iif_$(True, "</BLOCKQUOTE>" & BLOCKQUOTE$) & EoL$: If Not nopartF Then GoTo exitL
     If short Then GoTo lD2
lT2: da_ id <> "65": If Not short Then s = s & TRoff$ & TRon$ & TDon1$ 'short - |fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     If nopartF Then If term(2) = term(1) Then If Trim(def(2)) = "" Or pLink <> "" Then GoTo lT3 Else s = s & HR$: If short Then GoTo lT3 Else GoTo lD2 '------------
     s = s & IIf(short, "<I>", "<B>") & |fffd||fffd||fffd||fffd|HTML$(|fffd||fffd||fffd||fffd|HTML$(term(2) & abc_2$), , result$) & IIf(short, "</I>", "</B>") & IIf(short, "", TDoff$) & IIf(short, "<BR>", HR$) & EoL$: If Not nopartF Then GoTo exitL
     If short Then GoTo lT3
lD2: db_ "lD2", id = "65": If short Then cdef$ = prsRowsHaving$(result$, def(2)) Else cdef$ = def(2)
     s = s & BLOCKQUOTE$ & iif_$(Not short, TDon2$) & Replace(|fffd||fffd||fffd||fffd|HTML$(|fffd||fffd||fffd||fffd|HTML$(cdef$), , result$), HR$, "</P><P>") & _
                iif_$(fF And def(3) <> "", IIf(short, "<BR>", "<HR>")) & iif_$(Not short, TDoff$) & iif_$(True, "</BLOCKQUOTE>" & BLOCKQUOTE$) & EoL$: If Not nopartF Then GoTo exitL
     If short Then GoTo lD3 Else db_ s, id = "65"
lT3: If Not short Then s = s & TRoff$ & TRon$ & TDon1$
        If nopartF Then If term(3) = term(2) Then If short Then s = s & TDoff$ & TDon2: GoTo lD1 _
                                                           Else If Trim(def(3)) = "" Or pLink <> "" Then s = s & TDon2$: GoTo alL _
                                                                          Else If fF Then s = s & TDoff$: GoTo lD3 _
                                                                                     Else s = s & HR$: GoTo lD3 '------------ & "<B><font color=GRAY><div align=right>====</div></font></B>"
s = s & IIf(short, "<I>", "<B>") & |fffd||fffd||fffd||fffd|HTML$(|fffd||fffd||fffd||fffd|HTML$(term(3) & abc_3$), , result$) & IIf(short, "</I>", "</B>") & IIf(short, "", TDoff$) & HR$ & EoL$: If Not nopartF Then GoTo exitL
     If short Then s = s & TDoff$ & TDon2: GoTo lD1
lD3: If short Then cdef$ = prsRowsHaving$(result$, def(3)) Else cdef$ = def(3)
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {}: {tab=?}- ?*4 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                           ' {table 50} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| {TD} - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (<TD WIDTH=50>), |fffd| {TD} - |fffd||fffd||fffd||fffd||fffd||fffd| (<TD>) + {table/} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     cdef$ = |fffd||fffd||fffd||fffd|HTML$(cdef$): 'db_ cdef$
     If hasIt("{{v", cdef$) Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| injectionHTM$()
        cdef$ = Replace(Replace(cdef$, "{{v", "<table><td width=10px></td><td> {{v"), "{{/v", "</td></table>{{/v") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
     End If
     If hasIt("{tab", cdef$) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       Dim r_cdef$, r$, i%, fpos&, prm$, col1%, new_tab$, tab_cnt# 'Tab |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Int(*4)=space_cnt)
       Dim replic$, BR$: BR = "<BR>": cdef$ = Replace(cdef$, "}{tab", "}" & BR & "{tab") '"<BR>" / Chr(10)
               Do: r$ = prsBetween|fffd|(inc(i), BR, BR, BR & cdef$ & BR, , fpos&)
                   If sag(new_tab$, Replace(Replace(prsBetween("{tab", "}", r$), "&nbsp;", ""), "=", "")) <> "" Or hasIt("{tab}", r$) Then
retryL:               If Left(new_tab$, 2) = "le" Then   '{table 50} - !!!|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!
                         prm$ = Trim(Replace(new_tab$, "le", ""))
                         If IsNumeric(prm$) Then r$ = "<table>": col1% = prm$ _
                                            Else r$ = "</table>": col1% = 0 '|fffd|.|fffd|. "/" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| = 0)
                      Else: tab_cnt# = blank(Trim(new_tab$), 0): r$ = ""
                            replic$ = replicate("", IIf(BR = "<BR>", "&nbsp;", " "), Int(tab_cnt# * IIf(BR = "<BR>", 6 * 4, 4))): End If
                   ElseIf col1% Then If hasIt(vbTab, r$) Then r$ = "<TR><TD WIDTH=" & col1% + tab_cnt# * 4 * 3 & ">" & replic$ & prsBefore(vbTab, r$) & "</TD><TD>" & prsAfter(vbTab, r$) & "</TD></TR>" _
                                                          Else r$ = "<TR><TD COLSPAN=2>" & replic$ & r$ & "</TD></TR>" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1/2 |fffd||fffd||fffd||fffd||fffd||fffd|
                   Else: sadd r_cdef$, BR & replic$: End If
                         sadd r_cdef$, r$ '& IIf(col1%, "</TD></TR>", "")
        Loop Until fpos& = Len(BR & cdef$ & BR): cdef$ = Replace(Replace(">tmp>" & r_cdef$, ">tmp>" & BR, ""), ">tmp>", "") _
                                                            & IIf(col1%, "</table>", "") '"-" |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     End If: dbg_ "TEST", cdef$
     s = s & BLOCKQUOTE$ & iif_$(Not short, TDon2$) & |fffd||fffd||fffd||fffd|HTML$(cdef$, , result$) '& |fffd||fffd||fffd||fffd|HTML$(|fffd||fffd||fffd||fffd|HTML$(cdef$), , result$)
     If Not nopartF Then GoTo exitL '& TDoff & "</BLOCKQUOTE>" & EoL$
alL: If short Then s = s & TDoff$: GoTo exitL 'shortView
     'Table1 (Addons Left|Right)
     s = s & "<table CELLSPACING = 10>": '"<TD VALIGN=TOP width=50></TD>"
     Dim Lbl$: Lbl$ = "<IMG vspace=1 border=0 width=9 height=8 SRC=""" & ThisWorkbook.path & "\icons\htm\item32l.dib"">"
     Dim crd$: crd$ = FnGetTxtFromID$(id$, 5, 2): crd$ = nvl2(crd$ = "01.01.2000", Lbl$ & "&nbsp;<Created : >" & crd$, "") 'crd$ = "01.01.2000" - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
               Lbl$ = "<IMG vspace=1 border=0 width=8 height=8 SRC=""" & ThisWorkbook.path & "\icons\htm\item42l.dib"">"
     Dim lud$: lud$ = FnGetTxtFromID$(id$, 5, 3): lud$ = nvl2(lud$ = "", Lbl$ & "&nbsp;<Changed : >" & lud$, "")
     If lud$ <> "" Then 'update (flag)
     Dim udf$: udf$ = FnGetTxtFromID$(id$, 5, 4): lud$ = nvl2(udf$ = "", lud$ & " (" & udf$ & ")", lud$)
            If udf$ <> "" Then If crd$ <> "" Then crd$ = replicate(crd$, "&nbsp;", 7 + Len(crd$) + (Len(lud$) - Len(crd$)) * 6, True): 'MsgBox crd$
     End If
     Dim s1font$: s1font$ = "<font size=1 color=GRAY>"
     Dim s1$: s1$ = "<TD ALIGN=Center VALIGN=TOP width=300>" & s1font$
              s1$ = s1$ & nblank(crd, "" & crd & "<br>") & lud
     'Table11 (Tags + Notes)
     Dim s11$: s11$ = "<table CELLSPACING = 10><TR><TD ALIGN=Right VALIGN=TOP width=20>" & s1font$  '|fffd||fffd| :
     Rem Tags
     Dim tag$: tag$ = FnGetTxtFromID$(id$, 5, 5): tag$ = nvl2(tag$ = "", s11$ & "<Tags :></TD><TD>" & s1font$ & tag$ & "</TR>", "") '& "</table>"
            If tag$ <> "" Then s1$ = s1$ & Replace(Replace(tag$, "[", "[<SPAN STYLE=BACKGROUND-COLOR:#DDF7FA;color:#000000>"), "]", "</SPAN>]")
     's = s & "</TD>"
     Dim s2$: s2$ = s2$ & "<TD VALIGN=TOP NOWRAP>" ' NOWRAP
     Rem Files (no .ico)
     Dim FolderPath$: FolderPath$ = ThisWorkbook.path & "\PDB\" & id
                      If dir(FolderPath, vbDirectory) = "" Then s1$ = s1$ & nvl2(tag$ = "", "</table>", ""): GoTo noDirL
     Dim img$: img$ = " vspace=1 border=0 width=12 height=12 "
     s2 = s2 & "<A target=blank HREF=""" & FolderPath$ & """><IMG" & img$ & "SRC=""" & ThisWorkbook.path & "\icons\f_ext\fs1.dib"">..</A><br>&nbsp;&nbsp;"
     Dim refFont$: refFont$ = "<font size=2 color=1GRAY><TT> "
     Dim fnm$, f_name$, pos&, f_cnt%: 'truly Name (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "."
        Dim fi%, fs As New FileSearch '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (Set fs = New FileSearch)
     Rem: SubFolders
           Dim fso  As Object, curfold As Object, sfol As Object, sfol_name$
           Set fso = CreateObject("Scripting.FileSystemObject"): Set curfold = fso.getFolder(FolderPath$)
           For Each sfol In curfold.SubFolders    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
                sfol_name$ = prsAfterLast("\", CStr(sfol.path))
                s2 = s2 & "<A target=blank HREF=""" & sfol.path & """><IMG" & img$ & "SRC=""" & ThisWorkbook.path & "\icons\f_ext\fs1.dib"">&nbsp;<font size=1>" & _
                           |fffd||fffd||fffd||fffd|HTML(sfol_name$, , result$) & "</font></A><br>&nbsp;&nbsp;"
'        Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.)
'        With fs: .NewSearch: .FileName = "*": .LookIn = sfol.path '& "\" '\\ - !
'        If .Execute > 0 Then
'          For fi = 1 To .FoundFiles.Count: fnm$ = .FoundFiles(fi)
'                s2 = s2 & "&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=""" & fnm$ & """><IMG" & img$ & "SRC=""" & GetFileIcoFromName$(fnm$) & """>" & refFont$ & _
'                        |fffd||fffd||fffd||fffd|HTML(prsBeforeLastUp(".", Db_(sag(f_name$, prsFileName$(fnm$))), pos&), , result$) & Mid0(f_name$, pos&) & "</A><br>"
'        Next: End If: End With:
          Next: Set sfol = Nothing: f_cnt% = curfold.SubFolders.Count: Set curfold = Nothing: Set fso = Nothing
     Rem: SubFolders <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        With fs: .NewSearch: .FileName = "*": .LookIn = FolderPath$ '& "\" '\\ - !
        If .Execute > 0 Then
          Dim updFlg As Boolean, file_list$: f_cnt% = f_cnt% + .FoundFiles.Count
          If f_cnt% <> Str2Int(prsBefore("|", sag(file_list$, FnGetTxtFromID$(id, eru(wsLog), 6)))) Then updFlg = True _
                                                                                                    Else updFlg = file_list$ <> Get_PDB_file_list$(fs)
          If updFlg Then srv_PDB_file_list_Update '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     Rem: Files |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
          For fi = 1 To .FoundFiles.Count: fnm$ = .FoundFiles(fi): 'fnm$ = "file:///" & fnm$ 'Replace(fnm$, "\", "/")
            If prsFileName$(fnm$) <> "notes.nt" Then 'NOTES
              's2 = s2 & "&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=""" & fnm$ & """><IMG" & img$ & "SRC=""" & GetFileIcoFromName$(fnm$) & """>" & refFont$ & _
                        fnm$ & "</A><br>"  '+|fffd||fffd||fffd||fffd||fffd||fffd||fffd|+ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| result$ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):
              s2 = s2 & "&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=""" & fnm$ & """><IMG" & img$ & "SRC=""" & GetFileIcoFromName$(fnm$) & """>" & refFont$ & _
                        |fffd||fffd||fffd||fffd|HTML(prsBeforeLastUp(".", db_(sag(f_name$, prsFileName$(fnm$))), pos&), , result$) & Mid0(f_name$, pos&) & "</A><br>"
            's = s & "&nbsp;&nbsp;<A HREF=""cmd:exec(http://ib.ru/)""><IMG" & IMG$ & "SRC=""" & GetFileIcoFromName$(fnm$) & """>" & refFont$ & prsFileName$(fnm$) & "</A><br>"
            Else: Dim Notes$, nfnm$: 'Notes$ = Replace(loadFromFile$(fnm$), Chr(13), "<BR>" & REPLICATE("", "&nbsp;", 6 * 8)): End If
                                      Notes$ = Replace(loadFromFile$(fnm$), Chr(13), "<BR>"): nfnm$ = fnm$: End If
        Next fi: End If: End With: Set fs = Nothing: Dim NoteLbl$: img$ = " vspace=1 border=0 width=17 height=17 " 'NoteLbl$ = "Notes :"
                 NoteLbl$ = "<A target=blank HREF=""" & nfnm$ & """><IMG" & img$ & "SRC=""" & ThisWorkbook.path & "\icons\htm\HTMLwl.dib""></A>"
        Notes$ = nvl2(Notes$ = "", nvl2(tag$ = "", "</TR><TR><TD ALIGN=Right VALIGN=TOP>", s11$) & _
                      refFont$ & NoteLbl$ & "</TD><TD>" & refFont$ & Notes$ & "</TD></TR></table>", "")  '& "</table>"
noDirL: Rem files End
     s = s & s1$ & Notes$ & "</TD>" & s2$ '& "</TR></table></TD>"
     s = s & "</TD></table>" & TDoff & "</BLOCKQUOTE>" & EoL$ 'next
exitL: toHTML$ = s & TRoff$ & iif_$(tabF, "</table>") & "</font>"
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If sag(pos&, posFirst("{nodub}", toHTML$)) > 0 Then _
   toHTML$ = Mid(toHTML$, 1, pos& - 1) & Replace(Mid(toHTML$, pos& + 7), "&nbsp; ", "&nbsp;") ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?)
If BR = "<BR>" Then toHTML$ = Replace(toHTML$, "<table>", "<table style='font-size:13px;'>")
End Function ' - |fffd||fffd||fffd| <table> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <TR>/<TD> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (!|fffd||fffd||fffd||fffd||fffd||fffd||fffd| <table> |fffd||fffd||fffd| |fffd| TreeHTML)

Public Sub Update(): End Sub
Attribute VB_Name = "CategoryForm"
Attribute VB_Base = "0{AE2D64D7-93CC-4F2A-BC8E-588A3E48E35E}{71833F46-5155-4625-BA83-6134783246D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'Sub ListBox2_Click() '-
'Sub ListBox2_Change() '+ selection, content
'Sub ListBox2_DblClick(ByVal Cancel As MSForms.ReturnBoolean) '+

Private Sub KeyDown_analiser(KeyCode)
'MsgBox CStr(KeyCode)
 If KeyCode = 27 Then CategoryForm.Hide
 KeyCode = 0
End Sub

Private Sub CommandButton3_Click()
With ListBox3: i = 0
  Do While i < .ListCount
    If .Selected(i) Then .RemoveItem i _
                    Else: i = i + 1
  Loop
End With
End Sub

Private Sub CommandButton4_Click()
If ListBox3.ListCount > 0 Then Call ReCat("*" & ListBox3.List(0, 1) & "*") _
Else MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
Unload Me
End Sub

Private Sub Frame2_Click()

End Sub

Private Sub ListBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call KeyDown_analiser(KeyCode)
End Sub
Private Sub ListBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call KeyDown_analiser(KeyCode)
End Sub
Private Sub ListBox3_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call KeyDown_analiser(KeyCode)
End Sub
Private Sub CommandButton1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call KeyDown_analiser(KeyCode)
End Sub
Private Sub CommandButton2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call KeyDown_analiser(KeyCode)
End Sub

Private Sub CommandButton1_Click()
root_col = 2
With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_")
  For i = 2 To .UsedRange.rows.Count
    If .Cells(i, root_col).value = "[-]" Or _
        .Cells(i, root_col).value = "+" Then _
        .Cells(i, root_col).value = CommandButton1.Caption
  Next i
End With
Select Case CommandButton1.Caption
   Case "+": CommandButton1.Caption = "[-]"
   Case "[-]": CommandButton1.Caption = "+"
End Select
ListBox2.Clear
Call UserForm_Activate
End Sub

Private Sub CommandButton2_Click()
    Dim SQLstr As String
    Dim objRS As Object

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| SheetsNames
    'On Error GoTo BCErrorHandler
    With ListBox2
        'Selected
        sel_items = ""
        For i = 0 To .ListCount - 1
          If .Selected(i) Then sel_items = sel_items + ",'" + .List(i, 0) + "'"  '- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. ID
          '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "1" |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
          'If .Selected(i) Then sel_items = sel_items + "," + .List(i, 0)
        Next i
        If sel_items <> "" Then sel_items = Right(sel_items, Len(sel_items) - 1)
        'MsgBox sel_items
    'ListBox2.List. (.ListCount - 1, 1).
        SQLstr = "SELECT category FROM [" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_" & "$] WHERE id in (" & sel_items & ")"
        MsgBox SQLstr
        Set objRS = CreateObject("ADODB.Recordset")
        objRS.Open Join$(Array(SQLstr), vbNullString), _
                   Join$(Array("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=", _
                               Workbooks("MAIN.XLSB").FullName, ";Extended Properties=""Excel 8.0;"""), vbNullString)
        'MsgBox sel_items
        objRS.MoveFirst
    End With
With objRS
    .MoveFirst
    Do While Not .EOF
        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For i = 0 To ListBox3.ListCount - 1
          If ListBox3.List(i, 1) = objRS!category Then GoTo pass
        Next i
        ListBox3.AddItem ListBox2.Column(1, ListBox2.ListIndex)
        ListBox3.List(ListBox3.ListCount - 1, 1) = objRS!category 'ListBox2.Column(1, ListBox2.ListIndex)
pass:
        .MoveNext
    Loop
End With

Set objRS = Nothing
Exit Sub
BCErrorHandler:
MsgBox "err"
End Sub


Sub ListBox3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
ListBox3.ControlTipText = ListBox3.Column(1, ListBox3.ListIndex)
End Sub

Sub ListBox2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
'MsgBox CStr(ListBox2.Column(1, ListBox2.ListIndex))
With ListBox2
Rem: In a multicolumn ListBox or ComboBox, however, the List and Column properties
Rem: To assign values to an item beyond the first column, use the List or Column property and specify the row and column of the item.
Rem: If the control is bound to data, the AddItem method fails.
Rem: Note You can add more than one row at a time to a ComboBox or ListBox by using List.

 Dim target_range As Range
 Set target_range = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Columns("A:A")
' MsgBox CStr(.Column(1, .ListIndex))
 Select Case .Column(2, .ListIndex)
    Case "[-]": FnFindCell(target_range, .Column(0, .ListIndex), xlWhole, True).Offset(0, 1).value = "+"
    Case "+": FnFindCell(target_range, .Column(0, .ListIndex), xlWhole, True).Offset(0, 1).value = "[-]"
 End Select

 '.RowSource = ""
 .Clear

Call UserForm_Activate
   '.BoundColumn
   '   .AddItem Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(ListBox1.ListIndex + 2, 4).Value
  ' .List() = Array("Mon")("2")
 ' .List(.ListIndex, 1) = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(ListBox1.ListIndex + 2, 5).Value
  ' .List(1, 0) = "31"
 '  .List(1, 1) = "32"
   
   ' For i = 0 To 9
   '     If ListBox1.Selected(i) = True Then
   '         ListBox2.AddItem ListBox1.List(i)
   '     End If
   ' Next i



 ' .RemoveItem (ListBox1.ListIndex)
'  .Selected
  
         ' If .Selected(.ListIndex) = True Then
      '      .AddItem "test"
    '  MsgBox CStr(.List(.ListIndex))
  
  'MsgBox CStr(.Column(1, .ListIndex))
  'Call UserForm_Activate
  '.RemoveItem (1) -
  
 ' Dim EntryCount As Single
  '  EntryCount = EntryCount + 1
  '  ListBox1.AddItem (EntryCount & " - Selection")

  'CategoryForm.Repaint
  
  
    'Ensure ListBox contains list items
 '   If ListBox1.ListCount >= 1 Then
 '       'If no selection, choose last list item.
  '      If ListBox1.ListIndex = -1 Then
  '          ListBox1.ListIndex = _
  '                  ListBox1.ListCount - 1
  '      End If
   '     ListBox1.RemoveItem (ListBox1.ListIndex)
   ' End If
'.ZOrder (1)
End With
'CategoryForm.Repaint
CommandButton1.ZOrder (0)
End Sub
'*************************************
'*************************************
'*************************************
'*************************************
'*************************************
'*************************************
Private Sub UserForm_Activate()
'CommandButton1.SetFocus
'MsgBox "set"
CommandButton1.ZOrder (0)
'CommandButton1.Enabled = True
'CommandButton1.SetFocus
'CategoryForm.Repaint
Dim id_col, root_col, list_col As Byte
id_col = 1
root_col = 2
list_col = 3
Shift = "  "

'MsgBox "ini"
ListBox1.RowSource = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_" + "!B2:C" + CStr(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").UsedRange.rows.Count)

c_level = 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim levels(10), Roots(10) As String

With ListBox2
   For i = 2 To Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").UsedRange.rows.Count
    .AddItem Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, id_col).value
    .List(.ListCount - 1, 2) = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, root_col).value
    .List(.ListCount - 1, 1) = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, list_col).value
    Select Case .List(.ListCount - 1, 2)
       Case "+":
                'MsgBox ("+" & roots(c_level))
               ' MsgBox ("+" & levels(c_level))

                    c_root = .List(.ListCount - 1, 1) '& "_" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. sub|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| java\javascript
                    Do Until InStr(1, Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(inc(i), list_col).value, c_root, vbBinaryCompare) <> 1: Loop
       Case "[-]":
                c_root = .List(.ListCount - 1, 1)
NextLevel:      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 10)
                Roots(c_level) = c_root
                levels(inc(c_level)) = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, list_col).value
                
PreviousLevel:  c_root = levels(c_level)
                'MsgBox ("-" & roots(c_level))
                'MsgBox ("-" & levels(c_level))
                Do Until Not CBool(c_level) Or InStr(1, Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(inc(i), list_col).value, c_root, vbBinaryCompare) <> 1
                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    .AddItem Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, id_col).value
                    .List(.ListCount - 1, 2) = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, root_col).value
                    c_item = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, list_col).value
                    .ControlTipText = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, list_col).value
                    'space_str = "": For space_n = 1 To Len(c_root): space_str = space_str + " ": Next
                    space_str = "": For space_n = 1 To c_level: space_str = space_str & Shift: Next
                    If Mid(c_item, Len(c_root) + 1, 1) = "_" _
                    Then .List(.ListCount - 1, 1) = space_str & Right(c_item, Len(c_item) - Len(c_root) - 1) _
                    Else .List(.ListCount - 1, 1) = space_str & Right(c_item, Len(c_item) - Len(c_root))
                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Select Case .List(.ListCount - 1, 2)
                       Case "+":
                                    'MsgBox ("++" & roots(c_level))
                                    'MsgBox ("++" & levels(c_level))
                                    c_root = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, list_col).value
                                    'MsgBox ("++" & c_root)
                                    Do Until InStr(1, Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(inc(i), list_col).value, c_root, vbBinaryCompare) <> 1: Loop
                                    'MsgBox Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, 3).Value
                       Case "[-]": GoTo NextLevel
                       'Case Else:
                   End Select
                   c_root = levels(c_level)
                Loop
                If dec(c_level) > 0 Then GoTo PreviousLevel
    End Select
    
    
 '   If .List(.ListCount - 1, 0) = "+" Then
  '    c_root = .List(.ListCount - 1, 1)
  '    Do Until InStr(1, Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(i, 3).Value, c_root, vbBinaryCompare) <> 1
 '       i = i + 1
 '     Loop
 '     i = i - 1
  '  End If
    
   '.MultiSelect = fmMultiSelectSingle
   '.Selected(.ListCount)
   Next i
End With
'CommandButton1.ZOrder (0)
'CategoryForm.Repaint
End Sub

Private Sub UserForm_Initialize(): Me.Zoom = 80: Me.Width = Me.Width * Me.Zoom / 100: Me.Height = 3 + Me.Height * Me.Zoom / 100
End Sub

Private Sub UserForm_Terminate()
'MsgBox "all"
ListBox1.RowSource = ""
End Sub
Attribute VB_Name = "Category_manage"
'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd|:
'General - root|sngl - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 area
'          |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| sub-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| area |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| root_area (|fffd||fffd||fffd||fffd||fffd||fffd|: (null) global_view)
'subRoot - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| areas (uid |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
'subTerm - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| areas (uid |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
'          |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| root_area (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) => root_area
'
'****************************************************
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/"|fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub testCats(): Call WSim: Sheets(WS1).Activate: With Sheets(WS1)
                For i = 2 To .UsedRange.rows.Count: cat = .Cells(i, catCol).Text
                     With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_"): For j = 2 To .UsedRange.rows.Count
                                                cat = Replace(cat, ":" & .Cells(j, 1).Text & ":", ":"): Next j: End With
                    If cat <> ":" And cat <> "" Then '.Cells(i, catcol).Rows.Hidden = False
                      AppActivate Application.Caption: .Cells(i, catCol).Select:
                      Application.vbe.MainWindow.WindowState = vbext_ws_Minimize: Exit Sub: End If: Next i: End With: End Sub
'****************************************************
'* TOOLS *
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub CleanCats_tool(): unLockWBfor: For i = wsGen To wsUa
With Sheets(i).Columns("E:E"): .Replace What:=";", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByColumns, MatchCase:=True
                               .Replace What:="::", Replacement:=":", LookAt:=xlPart, SearchOrder:=xlByColumns, MatchCase:=True
End With: Next i: LockWB: End Sub

'|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| FnZoneMerging(source_zone, target_zone)
Sub ReSetCats_tool(): unLockWBfor: With Sheets(WS1): For i = 2 To .UsedRange.rows.Count
                      id$ = .Cells(i, 1).Text: new_cat = FnZoneMerging("", .Cells(i, 5)): setCat id, new_cat '<<
                                                     Next i: End With: LockWB: End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "|fffd||fffd||fffd||fffd||fffd|;", ":1:" (old->new): ":1:", ":1_1:" (new->new_1)
Sub CatRename_tool(was_cat, will_be): For i = wsGen To wsABC 'Replace |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| UserInterfaceOnly protection
With Sheets(i): .Unprotect: .Columns(IIf(i = wsABC, "H:H", "E:E")).Replace What:=was_cat, Replacement:=will_be, LookAt:=xlPart, _
     SearchOrder:=xlByColumns, MatchCase:=True: .Protect UserInterfaceOnly:=True, DrawingObjects:=False: End With: Next i: End Sub

Sub CatRename_Banch()
    'CatRename_tool ":3_4_1:", ":3_4_1_1:"
    'CatRename_tool ":3_4:", ":3_4_1:"
End Sub







Attribute VB_Name = "Category_view"
'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (CATForm)
'****************************************************
'Tests
Sub tst_activerowCat(): cat_id$ = Cells(ActiveCell.row, catCol): MsgBox cat_id & " = " & getCatLong$("", cat_id): End Sub
Sub tst_noCat(): WSim: ReCat: MsgBox prsBefore("_", ""): End Sub

'PF.Image16.tag = catC$ = "Script"; catT$ - "CheckBox7|1_5_1" -
Sub reCatWithPF(catT$): If Not hasIt("_", catT$) Then ReCat (prsAfter("|", catT$)), False _
                                                 Else ReCat ("*:" & prsAfter("|", catT$) & "*") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| usepart |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| mainRoot
End Sub

Sub ReCat(Optional cat_name As String, Optional usepart As Boolean = True): Dim crit1 As String: ls ">", "ReCat", cat_name
If Not usepart Then cat_name = Replace(Replace(cat_name, "*", ""), ":", "")
AppActivate Application.Caption
Call NoSup: Call unlockWB: 'LM "unLockWB" 'for
ws = ActiveSheet.name
g2r = ActiveCell.row
If cat_name <> "" Then If crit1 <> "*" Then crit1 = IIf(hasIt("*", cat_name), cat_name, "*:" & cat_name & ":*")
    For i = 0 To 4: unLockWs Index(i)
      If i = 4 Then field_num = 7 Else field_num = 4: Call UnGroupRows(i)
      'If crit1 = "*" Then Sheets(FnWSCase(i)).Range("A1").AutoFilter Else
      Sheets(FnWSCase(i)).Range("A1").AutoFilter field:=field_num, Criteria1:=crit1, _
                                                   Operator:=xlOr, Criteria2:="*:" & IIf(usepart, prsBefore("_", cat_name) & ":*", cat_name & "_*") '&  ' , _
                                                   Operator:=xlOr, Criteria3:=prsbefore("_", cat_name) '|fffd||fffd||fffd| mainRoot  _|fffd||fffd||fffd||fffd||fffd||fffd|_2_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd|_|fffd||fffd||fffd|._
                                                  'Operator:=xlOr, Criteria2:="*:_:*" 'r06+ '"*:_:*" - |fffd||fffd||fffd||fffd||fffd|? '"_*:*" - ???
LM crit1 & " + " & cat_name
      If settingsForm.obAuto And i <> 4 And CBool(i) Then Call GroupRows(i)
    Next i
Call LockWBif: 'LM "LockWBif"
Sheets(ws).Activate
Call SUp: ActiveWindow.ScrollRow = 2
If ws <> "Dispetcher_" And Cells(g2r, 1) <> "" Then Cells(g2r, 3).Select
ls "<", "ReCat": End Sub

Sub NoCat(): Call WSim
Call MakeCATForm '- |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
On Error Resume Next: AppActivate Application.Caption 'err |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Call unLockWBfor: NoSup: ws = ActiveSheet.name: g2r = ActiveCell.row
    For i = 0 To 4: If i = 4 Then Sheets(FnWSCase(i)).Range("A1").AutoFilter field:=7 _
                             Else Sheets(FnWSCase(i)).Range("A1").AutoFilter field:=4: Call UnGroupRows(i)
    Next i: LockWBif: Sheets(ws).Activate: SUp: ActiveWindow.ScrollRow = 2
If ws <> "Dispetcher_" And Cells(g2r, 1) <> "" Then Cells(g2r, 3).Select
End Sub


'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| CommandBar:GCoding)
'****************************************************
Sub Cat_Abbrev(): Call remind: Select Case ActiveSheet.name
    Case WSI: ImportAnalyzer
    Case WSD: Sheets(WS0).Activate: leavingDisp
    Case Else: Sheets(IIf(ActiveSheet.name = WSA, WS0, WSA)).Activate: End Select
    'Application.GoTo Reference:=Cells(Application.ActiveCell.Row, 1), scroll:=False
End Sub
Sub leavingDisp(Optional E$): remind: On Error Resume Next: PF.setMode "Ws" & E$: End Sub


Attribute VB_Name = "ChessCaller"
Attribute VB_Base = "0{7402C388-EC9A-41A2-8BCD-633E6A782B57}{9B69D40E-EF0D-4F5C-9E74-17FEEC3BEAE9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public me_hwnd&, t_hwnd&, showedFlg As Boolean, menuFlg As Boolean, leftsided As Boolean, back_hwnd&, clonFlg As Boolean, rePosed As Boolean

Private Sub UserForm_Activate(): SetTopMostWindow& t_hwnd&, True: End Sub 'antiForeground

Private Sub UserForm_Click(): reDraw , Not menuFlg: dbg_ menuFlg, GetForegroundWindow&: End Sub
Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean): Unload Me: If Not useJot_prm Then Exit Sub
                                                                                 JOTCaller.rightsided = False: JOTCaller.reDraw: End Sub

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                                  If Button <> fmButtonRight Then Exit Sub
        If back_hwnd& = 0 Then
           scaffold.reDraw t_hwnd&: back_hwnd& = scaffold.me_hwnd: If back_hwnd& > 0 Then reDraw: SCSForm.setWindowVisible back_hwnd&: scaffold.Repaint
        Else: back_hwnd& = 0: Unload scaffold: End If: SetTopMostWindow& t_hwnd&, True: SetForegroundWindow& t_hwnd&: End Sub
Private Sub UserForm_Initialize(): me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False
  leftsided = True: SetTransparent me_hwnd&, SCSForm.get_freezind_deep% - 100: SetTopMostWindow& me_hwnd&, True: If useJot_prm Then JOTCaller.rightsided = True
  Me.Picture = IIf(SDGoldenTheme, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\ChessCaller.jpg"), Nothing): If useJot_prm Then JOTCaller.reDraw
  End Sub

'chessCaller.redraw chessCaller.t_hwnd&
Public Sub reDraw(Optional ByVal t_h&, Optional menu = False, Optional clon = False, Optional justPos = False): backed = back_hwnd& > 0 ', Optional backed = False)
                                                                    If clon Then clonFlg = True '|fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If leftsided Then
          Me.Top = ScBm * x75 - Me.Height + 4: Me.Left = ScLt * x75 - 3: If justPos Then rePosed = True: Exit Sub Else Me.show vbModeless
            rgn& = CreateRectRgn(3, Me.Height / x75 / 2 - 5, Me.Width / x75 - 3, Me.Height / x75 - 5)
            rgn2 = CreateEllipticRgn(3, -10, 220, 35): CombineRgn rgn&, rgn&, rgn2, 4 '-1(X), 5(Y), 120(W), 220(H)
    Else: Me.Top = ScBm * x75 - Me.Height + 4: Me.Left = (ScRt * x75) - Me.Width + 3: If justPos Then rePosed = True: Exit Sub Else Me.show vbModeless
            rgn& = CreateRectRgn(3, Me.Height / x75 / 2 - 5, Me.Width / x75 - 3, Me.Height / x75 - 5)
            rgn2 = CreateEllipticRgn(Me.Width / x75 - 220, -10, Me.Width / x75 - 3, 35): CombineRgn rgn&, rgn&, rgn2, 4 '-1(X), 5(Y), 120(W), 220(H)
    End If: SetWindowRgn me_hwnd&, rgn&, True
   '|fffd||fffd||fffd||fffd||fffd||fffd| App
    If t_hwnd& = 0 Then t_hwnd& = t_h&: With SCSForm: setNoHeadersH t_hwnd&: .s_freez = .get_freezind_deep% - 100: SetTransparent t_hwnd&, .s_freez: End With
                            Dim rt As rect: GetWindowRect Me.t_hwnd, rt: bord_sz = 6:               '|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                           With rt: If clonFlg Then rt_height = 240: rt_width = 260: u_shift = -30: l_shift = l_shift - 10 _
                                               Else rt_height = .Bottom - .Top: rt_width = .Right - .Left
                  If leftsided Then .Left = ScLt - 12 + l_shift: .Right = .Left + rt_width + 12 - 12 _
                               Else .Left = ScRt - rt_width + bord_sz + 12 + l_shift: .Right = .Left + rt_width + 12
                                     .Top = ScBm - rt_height + bord_sz + 5 + 10 + u_shift * 3: .Bottom = .Top + rt_height + 5 + 10 - u_shift: End With
            SetWindowRect t_hwnd&, rt: 'SetWindowRgn t_hwnd&, 0, True                  + 0.4 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            rgn& = CreateRectRgn(16 + 0.9 * l_shift, 36 - 0.5 * u_shift, rt_width - 20 - 1.4 * l_shift, rt_height - 45 - 4 * u_shift): 's_rgn& = rgn&
            If Not clonFlg Then
                If menu Then rgn2 = CreateRectRgn(0, 0, 100, 20): CombineRgn rgn&, rgn&, rgn2, 2
                rgn2 = CreateRectRgn(27, rt_height - 40, 135, rt_height - 30): CombineRgn rgn&, rgn&, rgn2, 2
            End If
   If backed Then
      rt.Bottom = rt.Bottom - 56 - 1.1 * u_shift: rt.Left = rt.Left + 12 - 1.5 * l_shift: rt.Right = rt.Right - 28 + IIf(leftsided, 12, 0) + 0.7 * l_shift: rt.Top = rt.Top + 32 - u_shift * 0.72
      SetWindowRect back_hwnd&, rt: SetTopMostWindow& back_hwnd&, True 'SetWindowRgn back_hwnd&, s_rgn&, True
   End If:               menuFlg = menu: SetWindowRgn t_hwnd&, rgn&, True: SetTopMostWindow& t_hwnd&, True
   End Sub

Private Sub UserForm_MouseMove(ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single): If showedFlg Then GoTo exitL
        If IsWindow(t_hwnd&) = 0 Then Unload Me: Exit Sub Else If rePosed Then Me.reDraw '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If back_hwnd& > 0 Then SCSForm.setWindowVisible back_hwnd&: scaffold.Repaint: 'SetForegroundWindow& back_hwnd&
exitL:                         SCSForm.setWindowVisible t_hwnd&: showedFlg = True: SetForegroundWindow& t_hwnd&: End Sub

Private Sub UserForm_Terminate(): If FnFormIsLoaded("scafFold") Then Unload scaffold
                                  If IsWindow(t_hwnd&) = 0 Then Exit Sub
                            dispDestroyWindow t_hwnd&: End Sub
Attribute VB_Name = "DDBar"
Attribute VB_Base = "0{4F6CCFCA-3D06-40F4-B7FB-0B504713107D}{2C34B559-BE57-40B1-A21D-67EF4913D1EB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Const cLTab = 15, h_splt = -6, svw = 3 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| split |fffd||fffd||fffd| LFixed, splitter_visible_width
Public me_hwnd&, DDMsvdTop%, DDMsvdBtm%, DDMatrixFrom%, myRt$, Splitter_lft@, max_Bar_lft%, Splitter$ '|fffd||fffd||fffd| DDBarMatrixMode |fffd| Splitter
Private WithEvents Images As clsImages, tMost_flg As Boolean, MD As POINTAPI, MUCancel As Boolean 'MouseDown position, MouseUp IgnoreFlag
Attribute Images.VB_VarHelpID = -1
Private preMatrixOrder$, appMatrix$, docMatrix$, expMatrix$, splitE%, splitD%, touchBar%, frameBtm%, TTab, AFrame%, svd_http&, svd_http_d&, svd_bl&, svd_br&

'Private Sub Images_Click(ByVal ControlName As String, ByVal Index As Integer): 'MsgBox ControlName & " " & Index: End Sub
'Private Sub Images_DblClick(ByVal ControlName As String, ByVal Index As Integer): msg "DblClick": End Sub
Sub MatrixOff():  Me.reDraw DDMatrixFrom% + 1, True: End Sub '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| MatrixMode
Function getControl(c_name$) As Control: On Error Resume Next: Set getControl = Me.Controls(c_name$): End Function
Function getSplitter(Optional ByVal newLeft%, Optional ctrl_name$) As Control: On Error Resume Next '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
     Set getSplitter = getControl("Splitter"): On Error GoTo 0
  If Not getSplitter Is Nothing Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                  If ctrl_name$ = "" Then getSplitter.Left = sag(Splitter_lft@, newLeft - svw): Exit Function '2 TEST (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    With Me.Controls(ctrl_name$)        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
        getSplitter.Left = sag(Splitter_lft@, Splitter_lft@ - (.Width + 2)): .Left = Splitter_lft@ + svw: sadd Splitter$, "|" & ctrl_name$, True
    End With '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If ctrl_name$ <> "" Then _
    With Me.Controls(ctrl_name$): .Left = max_Bar_lft%: Splitter$ = "|" & ctrl_name$ & "|": End With  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SPLITTED
     Set getSplitter = Me.Controls.Add("forms.Image.1", "Splitter", True) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Splitter
    With getSplitter: .Height = Me.Height: .Width = 3: .Top = 0: .Left = sag(Splitter_lft@, max_Bar_lft% - svw) '.Left + .Width - iNew.Width * 2 - 2:
                      .PictureSizeMode = fmPictureSizeModeStretch 'fmPictureSizeModeZoom
                      .BorderStyle = fmBorderStyleNone: .BackStyle = fmBackStyleTransparent: 'Images.AddItem iNew, CStr("b_" & hWnd&)
                  Set .Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\bars - R.gif")
  End With: End If: End Function
'ddbar.getSplitter 666
'ddbar.Controls.Remove "Splitter"
Function actSplitter%(): For i% = 1 To prsCount("|", Splitter$) - 1:  'Actualization (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) + |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| DDBar
      If IsWindow(sag(itm$, prsBetween|fffd|(i, "|", "|", Splitter$))) = 0 Then srep$ Splitter$, "|" & itm$ & "|", "|": delItem CLng(itm$), True _
                                                                      Else If Images.Contains(itm$) Then inc actSplitter
                  Next i%: 'forecast |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| svd |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| DD |fffd| reDraw (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                  'If SCSForm.http_hwnd = 0 Then DecOn actSplitter, -Images.Contains(svd_http&) - Images.Contains(svd_http_d&) 'True = -1
             End Function '>> |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (forecast - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Up, Down

                  
Sub reSplitter(): If Splitter$ = "" Then Exit Sub
With Me.Controls("Splitter"): wdt@ = (Me.Height + 5) * 4 / 3: .Visible = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Matrix
    current_cnt% = Int((Me.Width - Splitter_lft@ - cLTab) / (wdt + 2)): .Left = sag(Splitter_lft@, _
                                                                        .Left + (current_cnt% - actSplitter) * (wdt + 2)): End With '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Splitter
Dim j%: For i% = 1 To prsCount("|", Splitter$) - 1: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Splitter$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| reBuild (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| preMatrixOrder$)
    If Not Images.Contains(sag(itm$, prsBetween|fffd|(i, "|", "|", Splitter$))) Then GoTo nextL
    With Me.Controls(itm$): .Top = -4: .Height = Me.Height + 5: .Width = wdt@ 'sag(wdt@, .Height * 4 / 3)
                            .Left = sag(lft@, Splitter_lft@ + svw + (inc(j%) - 1) * (.Width + 2)): .Visible = True: End With
                  On Error Resume Next: With Me.Controls("i" & itm$): .Top = -4 + 10: .Left = lft@:  .Visible = True: End With
                                        With Me.Controls("b_" & itm$): .Top = -4 + 10: .Left = lft@ + wdt@ - .Width * 2 - 2: .Visible = True: End With
                                        With Me.Controls("bx" & itm$): .Top = -4 + 10: .Left = lft@ + wdt@ - .Width: .Visible = True: End With: On Error GoTo 0
nextL: Next i%: End Sub
Sub noSplitter(Optional no_reDraw As Boolean):  If Splitter_lft@ = 0 Then Exit Sub
    On Error GoTo errL: Me.Controls.Remove "Splitter": Splitter_lft@ = 0: Splitter$ = ""
                     If Not no_reDraw Then reDraw , True: Exit Sub Else Exit Sub
errL:                                                                                                                   End Sub

Rem: |fffd||fffd||fffd||fffd| (ButtonRight, ButtonMiddle)
Private Sub Images_MouseDown(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
             'db_ "MouseDown: " & Button% & " " & Shift% & " " & X & ":" & Y
    If Left(ControlName$, 1) = "i" Then
              PutOn CLng(Replace(ControlName$, "i", "")), sag(to_pos%, decode(CInt(Me.Controls(ControlName$).tag), 0, 1))
              If isMatrix Then If to_pos% = 1 Or to_pos% = 5 Then svd_http& = 0: svd_http_d& = 0: MatrixOff '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| MatrixMode
    Exit Sub: End If
    If Left(ControlName$, 2) = "b_" Then Button% = fmButtonRight: Shift% = 1 Else _
    If Left(ControlName$, 2) = "bx" Then dispDestroyWindow CLng(prsNumeric(ControlName$)): Exit Sub
    GetCursorPos MD: 'If singleDM Then If Button% = 1 Then Button% = 2 _
                                  Else If Button% = 2 Then Button% = 4 'DD |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!)
    dbg_ CursorAtImgNum%(MD)
    Select Case Button%:        '1 -> Images_MouseUp
    Case 1: MUCancel = False
    Case 2: Select Case Shift%  '2 - fmButtonRight
                   Case 1, 2: If Me.Controls(ControlName$).ControlTipText Like "PL/SQL Developer *" Then MUCancel = True _
                                                      Else delItem CLng(prsNumeric(ControlName$)) 'Ctrl / Shift + fmButtonRight
                   Case 3: dispDestroyWindow CLng(ControlName$)                                   'Ctrl + Shift + fmButtonRight
                   Case Else    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| isMatrix
                            If isMatrix Then
                                MUCancel = True: If DDM.num = 1 Then PutOn CLng(ControlName$), 2 _
                                                                Else PutOn CLng(ControlName$), IIf(SCSForm.LFixed, 1, 5) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Matrix -> CollectW
                            Else
                                PutOn CLng(ControlName$), IIf(DDM.num = 1, 2, IIf(SCSForm.LFixed, 4, IIf(DDM.forceSM = 1, 0, 3))): End If '0->3'fmButtonRight -> _lb (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
            End Select          '4 - fmButtonMiddle
    Case 4: If getWndCaption$(CLng(ControlName$)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows Media" Then PutOn CLng(ControlName$), -1: Exit Sub 'Doppel
            delItem CLng(ControlName$): SCSForm.ShowWindow4 CLng(ControlName$), IIf(SCSForm.LFixed, "2", IIf(DDM.num = 1, "5", "")) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| collect
             If Not (DDM.On Or DDM.num = 1) Then SCSForm.Scratch2Fit CLng(ControlName$) ', Not SCSForm.LFixed 'ShowWindow& CLng(ControlName$), SW_MAXIMIZE&
    End Select: SetActiveWindow& me_hwnd&: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Button% |fffd||fffd||fffd||fffd||fffd| Click (1-Left;2-Right;4-Middle), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Button%=0
    
'Private Sub Images_MouseMove(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal X As Single, ByVal Y As Single)
'    'db_ "MouseMove: " & Button% & " " & Shift% & " " & X & ":" & Y:
'    End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|. |fffd||fffd||fffd| Tip'|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?)
Public Function isMatrix() As Boolean: isMatrix = DDMatrixFrom%: End Function
Public Function singleDM() As Boolean: singleDM = DDM.num = 1 And Not DDM.On: End Function

Rem: |fffd||fffd||fffd||fffd| (LClick)
Private Sub Images_MouseUp(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
  If MUCancel Then MUCancel = False: Exit Sub 'db_ "MouseUp: " & Button% & " " & Shift% & " " & X & ":" & Y
Dim MU As POINTAPI: GetCursorPos MU: crsAt% = CursorAt%(MU)
                    If crsAt% = IIf(DDM.forceSM = 1, IIf(IsWindow(SCSForm.br_hwnd) = 0, 3, 4), 0) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar  'msg CursorAtImgNum%(MD) & " -> " & CursorAtImgNum%(MU), True: Exit Sub
                      If sag(to_pos%, CursorAtImgNum%(MU)) > 0 And to_pos% <> _
                         sag(from_pos, CursorAtImgNum%(MD)) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|   -- |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|? to_pos% |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + 1
                       lft = Me.Controls(ControlName$).Left: wdt = Me.Controls(ControlName$).Width  '(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                       tp = Me.Controls(ControlName$).Top: hgth = Me.Controls(ControlName$).Height  ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|q |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Matrix/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/add
                       Dim new_lft%, max_lft%:
                       If Yby Then
                           new_lft = IIf(Yby, 12, cLTab) + (hgth + h_splt) * (to_pos% - 1)
                           For Each ctrl In Me.Controls: With ctrl
                            If IsNumeric(.name) Then
                             If .name <> ControlName$ Then
                              Select Case .Top
                                     Case Is < Min(tp, new_lft%) - 10: 'const
                                     Case Is > Max(tp, new_lft%) + 10: 'const  '>= new_lft% - 2:
                                     Case Is >= new_lft% - 5: .Top = .Top + (hgth + h_splt) * IIf(new_lft% > tp, -1, 1): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                     Case Is >= tp: ctrl.Top = .Top - (hgth + h_splt): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  '>= tp + 10:
                              End Select: If max_lft% < .Top + 10 Then max_lft% = .Top
                            On Error Resume Next: Me.Controls("i" & .name).Top = .Top: 'Me.Controls("i" & .name).Left = .Left
                                                  Me.Controls("b_" & .name).Top = .Top: 'Me.Controls("b_" & .name).Visible = True
                                                  'Me.Controls("b_" & .name).Left = .Left + .Width - Me.Controls("b_" & .name).Width * 2 - 2
                                                  Me.Controls("bx" & .name).Top = .Top
                                                  'Me.Controls("bx" & .name).Left = .Left + .Width - Me.Controls("bx" & .name).Width
                            End If: End If: End With: Next
                            With Me.Controls(ControlName$): .Top = Min(new_lft%, max_lft% + (hgth + h_splt)): 'db_ ctrl.Width & "}" & ctrl.Left
                            On Error Resume Next: Me.Controls("i" & ControlName$).Top = .Top: 'Me.Controls("i" & ControlName$).Left = .Left
                                                  Me.Controls("b_" & ControlName$).Top = .Top: 'Me.Controls("b_" & ControlName$).Visible = True
                                                  'Me.Controls("b_" & ControlName$).Left = .Left + .Width - Me.Controls("b_" & ControlName$).Width * 2 - 2
                                                  Me.Controls("bx" & ControlName$).Top = .Top
                                                  'Me.Controls("bx" & ControlName$).Left = .Left + .Width - Me.Controls("bx" & ControlName$).Width
                            End With: On Error GoTo 0
 'Splitter$ - |fffd||fffd||fffd||fffd||fffd||fffd| hwnd|hwnd|hwnd                                     DDbar.noSplitter
 'Splitter_lft@ = imgLeft - 1 = DDbar.Controls("Splitter").Left |fffd||fffd||fffd||fffd||fffd||fffd|: DDbar.Controls("Splitter").Left = sag(DDbar.Splitter_lft@, 993)
 'max_Bar_lft% - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| imgLeft (993) 775?                dbg_ DDbar.Splitter$,DDbar.max_Bar_lft%,DDbar.Splitter_lft@
                       Else: new_lft = cLTab + (wdt + 2) * (to_pos% - 1)  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Splitter'a:
                             If lft = cLTab Then If zero(Splitter_lft, cLTab + (wdt + 2)) < cLTab + (wdt + 2) Then Exit Sub
                             max_Bar_lft% = cLTab + (Int((Me.Width - cLTab) / (wdt + 2)) - 1) * (wdt + 2)
                            For Each ctrl In Me.Controls:                'NEW |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (190423)
                               If prsNumeric$(ctrl.name) <> ControlName$ And ctrl.name <> "Splitter" Then
                                 If IsNumeric(ctrl.name) Then _
                                        If between(dbg_(ctrl.Left), max_lft%, zero(Splitter_lft, max_Bar_lft% + 1) - 1) _
                                                               Then max_lft% = ctrl.Left  '|fffd||fffd||fffd| Srlitter-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                 Select Case ctrl.Left
                                    '     Case Is >= zero(Splitter_lft@, ctrl.Left + 1) 'NEW const
                                       Case Is >= zero(IIf(Controls(ControlName$).Left >= Splitter_lft@, max_Bar_lft% + 1, _
                                                                                           Splitter_lft@), ctrl.Left + 1) 'NEW const
                                        Case Is < Min(lft, new_lft%) - 10: 'const -
                                        Case Is > Max(lft, new_lft%) + 10: 'const +
                                        Case Is >= new_lft% - 1: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ( |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| )
                                                    ctrl.Left = ctrl.Left + (wdt + 2) * IIf(new_lft% > lft, -1, 1)
                                                   'If new_lft% < lft Then if lft > Splitter_lft@ Then 'Split-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        Case Is >= lft: '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Splitted
                                                    ctrl.Left = ctrl.Left - (wdt + 2): '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| +)
                                 End Select:
                            dbg_ ctrl.Left: End If: Next
                            With Me.Controls(ControlName$): '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Target
                                            If new_lft% > max_lft% And .Left < zero(Splitter_lft, .Left + 2) - 1 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Splitter
                                                  getSplitter new_lft%, ControlName$ '|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| Splitter |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                                            ElseIf .Left >= zero(Splitter_lft, .Left + 1) Then  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Splitter
                                                If new_lft% < Splitter_lft Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|
                                                    .Left = IIf(new_lft% <= max_lft%, new_lft%, max_lft% + (wdt + 2)): Splitter$ = Replace(Splitter$, "|" & ControlName$ & "|", "|")
                                                    If Splitter$ = "|" Then noSplitter True Else Controls("Splitter").Left = sag(Splitter_lft@, Controls("Splitter").Left + (wdt + 2))
                                                Else '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Splitter
                                                 .Left = Min(new_lft%, max_Bar_lft%): tmp$ = "|" & ControlName$ & "|"
                                                 For i% = 1 To prsCount("|", Splitter$) - 1: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Splitter$ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                    If Me.Controls(sag(it$, prsBetween|fffd|(i, "|", "|", Splitter$))).Left < .Left Then tmp$ = Replace(tmp$, "|" & ControlName$ & "|", "|" & it$ & "|" & ControlName$ & "|") _
                                                                                                   Else If it$ <> ControlName$ Then tmp$ = tmp$ & it$ & "|"
                                                 Next i: Splitter$ = dbg_(tmp$)
                                                End If
                                                
'                                                Select Case new_lft%
'                                                      Case Is <= max_lft%:  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                                         .Left = new_lft%: Splitter$ = Replace(Splitter$, "|" & ControlName$ & "|", "|")
'                                                         If Splitter$ = "|" Then noSplitter True Else Controls("Splitter").Left = sag(Splitter_lft@, Controls("Splitter").Left + (wdt + 0))
'                                                      Case Is <= Splitter_lft: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
'                                                     'If between(new_lft%, max_lft% + 1, Splitter_lft) Then
'                                                        .Left = max_lft% + (wdt + 2): Splitter$ = Replace(Splitter$, "|" & ControlName$ & "|", "|")
'                                                        If Splitter$ = "|" Then noSplitter True Else Controls("Splitter").Left = sag(Splitter_lft@, Controls("Splitter").Left + (wdt + 0))
'                                                      Case Else: GoTo mixSL '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Splitter
'                                                End Select
                                            Else: .Left = Min(new_lft%, max_Bar_lft%) '+ 2 ' + (wdt + 2)): 'db_ ctrl.Width & "}" & ctrl.Left
                                            End If
                            On Error Resume Next: Me.Controls("i" & ControlName$).Left = .Left
                                                  Me.Controls("b_" & ControlName$).Left = .Left + .Width - Me.Controls("b_" & ControlName$).Width * 2 - 2
                                                  Me.Controls("bx" & ControlName$).Left = .Left + .Width - Me.Controls("bx" & ControlName$).Width
                            End With:
                       End If: Me.Repaint: Exit Sub: End If: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   On Error Resume Next: 'If crsAt% = 1 And DDM.num = 1 Then delItem CLng(ControlName$): SCSForm.ShowWindow4 CLng(ControlName$), "5": Exit Sub
                        If crsAt% = IIf(DDM.forceSM = 1 And Not isMatrix, 3, 0) Then
                        Rem: saved - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            If hasIt("|" & ControlName$ & "|", Splitter$) Then crsAt% = zero(CInt(Me.Controls("i" & ControlName$).tag), crsAt%) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| saved |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Splitted
                            If Not isMatrix And DDM.num <> 1 Then If CInt(Me.Controls("i" & ControlName$).tag) = 2 Then crsAt% = 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| saved |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| r_hwnd
                            If FindForm.ImageW3.SpecialEffect = 6 Then If FindForm.ImageW4.SpecialEffect <> 6 Then crsAt% = 4 'bl locked -> br
                        End If
        On Error GoTo 0: PutOn CLng(ControlName$), IIf(crsAt% = 5 And IsWindow(SCSForm.http_hwnd) = 0, 1, Abs(crsAt%)) 'IIf(DDM.num = 1, IIf(crsAt% = 0, 3, crsAt%), crsAt%)) '|fffd||fffd||fffd||fffd| = d&d (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| http_hwnd)
   SetActiveWindow& me_hwnd&
'If ca = 0 Then
'If Button = fmButtonRight Then delItem CLng(ControlName$)
    End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Click |fffd| Drug&Drop (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| D&D |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Down |fffd| Up |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Private Sub svd_Cleaning(Optional svd&) '|fffd||fffd||fffd||fffd||fffd| svd, 0=|fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| PutOn |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                                                                                            On Error Resume Next '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Me.Controls(svd_http&)
        If nvl2(zero(svd&, svd_http&) = svd_http&, 0, svd_http&) <> 0 Then If svd& = 0 Then Me.Controls(CStr(svd_http&)).BorderStyle = 0: svd_http& = 0 Else svd_http& = 0: Exit Sub
        If nvl2(zero(svd&, svd_http_d&) = svd_http_d&, 0, svd_http_d&) <> 0 Then If svd& = 0 Then Me.Controls(CStr(svd_http_d&)).BorderStyle = 0: svd_http_d& = 0 Else svd_http_d& = 0: Exit Sub
        If nvl2(zero(svd&, svd_bl&) = svd_bl&, 0, svd_bl&) <> 0 Then If svd& = 0 Then Me.Controls(CStr(svd_bl&)).BorderStyle = 0: svd_bl& = 0 Else svd_bl& = 0: Exit Sub
        If nvl2(zero(svd&, svd_br&) = svd_br&, 0, svd_br&) <> 0 Then If svd& = 0 Then Me.Controls(CStr(svd_br&)).BorderStyle = 0: svd_br& = 0 Else svd_br& = 0: Exit Sub
End Sub

Public Sub PutOn(ByVal hWnd&, to_pos%, Optional ByRef d0 = True, Optional ignoreInit = False): If hWnd& = 0 Or Not d0 Then Exit Sub
    If to_pos% = 0 Then svd_Cleaning Else svd_Cleaning hWnd& '(|fffd||fffd||fffd||fffd||fffd| svd)
    With SCSForm: init_pos_1 = to_pos% = 1 '|fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If to_pos% = 0 Then '>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|> replaceL |fffd||fffd||fffd| 1 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If isMatrix Then
                            MatrixOff  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| MatrixMode |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        If .LFixed Or DDM.num = 1 Then to_hwnd& = .bl_hwnd: to_pos% = 3 Else to_hwnd& = .http_hwnd: to_pos% = 1
            ElseIf hWnd& = .vb_hwnd And Not isMatrix Then to_pos% = 3: GoTo replaceL
            ElseIf Left(getWndCaption$(hWnd&), 1) = "^" Or _
                    hWnd& = FindWindow(vbNullString, "|fffd| - Debugger") Then to_pos% = 2: GoTo replaceL
            ElseIf .LFixed Or DDM.num = 1 Then to_hwnd& = .bl_hwnd: to_pos% = 3
            Else: to_hwnd& = .http_hwnd: to_pos% = 1  'Images.Item(Index).Image.BackColor = &H8000000D
            End If
        ElseIf to_pos% = -1 Then
            Dim rt As rect           '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| TARGET (Doppel)                                   'TEST: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
            If SCSForm.isDoppel Then AddItem .t_hwnd, False _
                                Else Application.Visible = False: For Each ctrl In PF.FrameT.Controls: ctrl.Visible = False: Next: PF.reSize: smart_freezing_start
            GetWindowRect .t_hwnd, rt: On Error Resume Next: delItem hWnd&: .restoreW hWnd&: .t_hwnd = hWnd& '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            SetWindowRect .t_hwnd, rt: .UserForm_Layout: setFocusOnForm Me.name: GoTo exitL
        Else: to_hwnd& = .GetTBhwnd(to_pos%): End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Not ignoreInit Then If init_pos_1 And .d_http_hwnd Then AddItem .d_http_hwnd, False '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" a |fffd||fffd| Click - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DD |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If getWndCaption$(to_hwnd&) Like "^*|*" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Tree |fffd||fffd||fffd| single |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| single
               If getWndCaption$(hWnd&) Like "^*:*" Then dispDestroyWindow (to_hwnd&): .CollectW hWnd&, to_pos% _
             Else AddItem to_hwnd&, False, , to_pos%: .reCollectW hWnd&, to_pos%:
            Else: AddItem to_hwnd&, False, , to_pos%: .reCollectW hWnd&, to_pos%: End If 'If satellite.t_hwnd = to_hwnd& Then _
                                                                                    satellite.t_hwnd = hWnd& '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| satellite.reSize
            'If smart_freezing_by_mouse Then Do_smart_freezing hwnd& '+ |fffd||fffd||fffd||fffd||fffd| "smart_freezing" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                         On Error Resume Next: setFocusOnForm Me.name: GoTo exitL
replaceL:  TBsavedName$ = "TBsavedhwnd" & PF.c_Set & to_pos%: replaced& = .GetTBhwnd(to_pos%): AddItem replaced&, False, , to_pos%
If LoadParam(TBsavedName$) = "0" Then SaveParam TBsavedName$, replaced&, to_pos%: .CollectW hWnd&, to_pos% _
                                 Else .reCollectW hWnd&, to_pos%: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (SaveParam |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
exitL: 'If to_pos% = 1 Then If isMatrix Then MatrixOff '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| MatrixMode
End With: End Sub

Private Function CursorAtImgNum%(cp As POINTAPI) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar)
   If Me.Width > Me.Height Then
         shft% = cp.x - DDM.Left: If shft% < cLTab / x75 Then CursorAtImgNum% = 0 Else CursorAtImgNum% = 1 + Int((shft% - cLTab) / ((Me.Height + 5) / x75 * 4 / 3 + 2 / x75))
   Else: shft% = cp.Y - DDM.Top: If shft% < cLTab / x75 Then CursorAtImgNum% = 0 Else CursorAtImgNum% = 1 + Int((shft% - cLTab) / ((Me.Width) / x75 * 3 / 4 + h_splt / x75))
   End If: End Function
Private Function CursorAt%(cp As POINTAPI) '0-DDbar,1-5~, -1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" t_hwnd
    If between(cp.x * x75, DDBar.Left, DDBar.Left + DDBar.Width) And _
           between(cp.Y * x75, DDBar.Top, DDBar.Top + DDBar.Height) Then CursorAt% = IIf(DDM.forceSM = 1 And _
                                                                Not isMatrix, IIf(IsWindow(SCSForm.br_hwnd) = 0, 3, 4), 0): Exit Function '0->3
    If SCSForm.LFixed Then
        If between(cp.x, DDM.Left, DDM.Right) Then 'DD
           If cp.Y > SCSForm.get_my_Y + bord_sz% + IIf(DDM.On, settingsForm.dDispShift, 0) Then CursorAt% = 3 Else CursorAt% = 1
        Else: If cp.Y < SCSForm.get_my_Y Then CursorAt% = 2 Else CursorAt% = 4
        End If
    Else: Dim rt As rect: GetWindowRect SCSForm.me_hwnd, rt
        If DDM.num = 1 Then
            If Not between(cp.x, ScLt, ScRt) Then CursorAt% = 1 Else _
            If cp.Y < rt.Bottom Then CursorAt% = IIf(cp.x > rt.Right, 2, -1) _
                                Else If cp.x > rt.Right And Not FindForm.ImageW4.SpecialEffect = 6 Then CursorAt% = 4 Else CursorAt% = -3 '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else
            If between(cp.x, DDM.Left, DDM.Right) Then 'DD
                  If cp.Y > DDM.Heigth / 2 Then CursorAt% = 5 Else CursorAt% = 1
            Else: If cp.Y < rt.Bottom Then CursorAt% = IIf(cp.x > rt.Right, 2, -1) _
                                      Else If cp.x > rt.Right And Not FindForm.ImageW4.SpecialEffect = 6 Then CursorAt% = 4 Else CursorAt% = -3 '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
        End If
End If: End Function

Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean): db_ "DBL": stopAH = True: End Sub '-> UserForm_MouseUp

Private Sub UserForm_Initialize(): Set Images = New clsImages: DDMsvdTop% = DDM.Top: DDMsvdBtm% = DDM.Bottom
me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False
           SetTransparent me_hwnd&, SCSForm.get_freezind_deep% - 60: SetTopMostWindow& me_hwnd&, True:: End Sub 'SetTopMostWindow& me_hwnd&, True:
'Public Sub topMost(Optional tm As Boolean = True): If tMost_flg = tm Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| TopMost |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| App
'                      SetTopMostWindow& me_hwnd&, tm: tMost_flg = tm: End Sub

Function isUpper() As Boolean: isUpper = Me.Top - DDMsvdTop% * x75 < 25 And Not isMatrix And Me.Width > Me.Height: End Function

Private Sub UserForm_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Select Case Button
           Case fmButtonLeft: 'If Me.Top <= DDMsvdTop * x75 + 25 And Me.Top + Me.Height >= DDMsvdBtm * x75 - 25 '|fffd||fffd||fffd| |fffd||fffd||fffd|
                If isMatrix Then If splitE% + splitD% = 0 Then MatrixOff: Exit Sub  '"DDBarMatrix" OFF
               ' If Splitter_lft <> 0 Then noSplitter: Exit Sub  'TEMP!190517
                GetCursorPos MD
                        If isMatrix Then
                                 'If splitE% + splitD% = 0 Then MatrixOff: Exit Sub  '"DDBarMatrix" OFF
                                 If between(MD.x, DDM.Right - touchBar% / x75 - 30, DDM.Right) Then 'between(MD.Y, Min(TTab, 30), frameBtm%)
                                   'dbg_ MD.Y * x75, frameBtm%, between(MD.Y, 30, frameBtm% - 30)   ' Me.Top + 50 ' MD.Y - Me.Top / x75
                                   scaleH = Me.Height / (DDMsvdBtm% - DDMsvdTop%) / x75 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
                                   If between(MD.Y * x75, Me.Top + 50 * scaleH, Me.Top + Me.Height - 80 * scaleH) Then _
                                      reBuild True, MD.Y - Me.Top / x75: Set Me.Picture = IIf(SDGoldenTheme And AFrame% <> 0, _
                                      LoadPicture(ThisWorkbook.path & "\icons\hot\fones\friz_mramor2B.jpg"), Nothing): Me.Repaint: Exit Sub
                                 End If:                       MatrixOff: Exit Sub  '"DDBarMatrix" OFF
                        Else: If Abs(CursorAt%(MD) - 3) = 2 Then stopAH = True: Shell "cmd /K " & ThisWorkbook.path & """\Kill MfeFfCore.bat""", vbHide: waitF 80, 2 Else _
                              If SCSForm.http_hwnd = 0 And SCSForm.d_http_hwnd <> 0 Then reDraw 3, True, True, , "1m2": Exit Sub Else reDraw 3: Exit Sub  '"DDBarMatrix" ON
                End If
           Case fmButtonRight: If DDM.num = 1 Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Hide |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If SCSForm.LFixed Then If Me.Top = -Me.Height + cLTab Then reDraw 4, False: Exit Sub 'LFixed - UnHide
                If isMatrix Then MatrixOff: satellite.reSize True _
                            Else GetCursorPos MD: If Abs(CursorAt%(MD) - 3) = 2 Then If Not on_timess_flg Then Exit Sub _
                                Else reDraw IIf(isUpper, 0, 2), True: Exit Sub '= fmButtonMiddle |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                If Not isHidden Then _
                                     DDM.TBhwnd = 0: HideBar: stopAH = False: satellite.reSize True: noSplitter True: _
                                     If SCSForm.LFixed Then SCSForm.UserForm_Layout             'simple patch |fffd||fffd||fffd| " explorer"
           Case fmButtonMiddle: 'If Not isUpper Then Me.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\fones\DDBar(Top).jpg"): Me.Repaint _
                                               Else Me.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\fones\DDBar(Bottom).jpg"): Me.Repaint
                                 If on_timess_flg Then reDraw IIf(isUpper, 0, 2), False ': SCSForm.reParkW (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    End Select: SetActiveWindow& me_hwnd&: End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single) 'WinTBswitcher > TrySat > reDraw IIf(isUpper, 2, 0)
            If isHidden Then maxFlg = getWindowState(SCSForm.http_hwnd) = SW_MAXIMIZE&: trySat True: satellite.reSize True: _
                      If Not maxFlg Then DDBarAutoHide True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'WinTBswitcher
' SetActiveWindow& SCSForm.t_hwnd 'SCSForm.focusMe      'BringWindowToTop SCSForm.t_hwnd: SetForegroundWindow& SCSForm.t_hwnd
End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| Me.AlwaysOnTop

Private Sub UserForm_Terminate(): If AC_flg Then Exit Sub Else If Not FnFormIsLoaded("SCSForm") Then Exit Sub
          DDBarUsed = False: DDM.Top = DDMsvdTop%: DDM.Bottom = DDMsvdBtm%: DDM.Heigth = DDM.Bottom - DDM.Top: SCSForm.reParkW: End Sub
Public Sub HideBar(Optional noRepark = False): WinTBswitcher False, noRepark: reDraw -1, , True, noRepark: End Sub 'Me.Hide: UserForm_Terminate
Function isHidden() As Boolean: isHidden = Me.Top < DDMsvdTop% * x75 - 25 Or Me.Top > DDMsvdBtm% * x75 - 10: End Function '- 25

 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Recovery(): If Me.Controls.Count Then If FnFormIsVisible("DDBar") Then db_ "not recovered!": Exit Sub _
                                                                             Else reDraw , , , True: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                       FolderPath$ = ThisWorkbook.path & "\temporal\"
Dim fnm$, fi%, fs As New FileSearch: With fs: .NewSearch: .FileName = "*": .LookIn = FolderPath$
        If .Execute > 0 Then
          For fi = 1 To .FoundFiles.Count: fnm$ = .FoundFiles(fi)
            hWnd& = CLng(Replace(prsAfter(FolderPath$ & "\", fnm$), ".dib", ""))
            If IsWindow(hWnd&) = 0 Then fileDelete fnm$: fileDelete FolderPath$ & "Preview\" & hWnd& & ".dib" _
                                   Else If AddItem(hWnd&, Not DDBarUsed, _
                                 IIf(settingsForm.CheckBox20.value, FolderPath$ & "Preview\" & hWnd& & ".dib", fnm$)) Then DDBarUsed = True _
                                   Else fileDelete fnm$: fileDelete FolderPath$ & "Preview\" & hWnd& & ".dib" '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| False
                Next fi: End If: End With: If DDBarUsed Then Me.Repaint
End Sub

'SetWindowRgn DDBar.me_hwnd&, 0, True
'SetWindowRgn DDBar.me_hwnd&, CreateRectRgn(DDBar.Left/x75  + 3, 4, _
             (DDBar.Width + DDBar.Left)/x75 - 3, (DDBar.Height)/x75 - 5), True
Public Sub reDraw(Optional mode%, Optional reImg As Boolean, Optional noCheck = False, Optional noRepark = False, Optional rt$): myRt$ = rt$: With Me: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDM! -1-|fffd||fffd||fffd||fffd||fffd||fffd|;0-|fffd||fffd||fffd||fffd|;2-|fffd||fffd||fffd||fffd||fffd|;3-Matrix
                       If Not noCheck Then DDMatrixFrom% = 0: .Left = DDM.Left * x75 - 2: .Height = 75: _
                         .Width = Abs(DDM.Width) * x75 + 2: If Not .Visible Then .show vbModeless 'constants (noCheck |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Matrix)
'>> |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| preMatrixOrder$ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c reBuild)
If Abs(mode% - 1) = 1 And svd_http& + svd_http_d& <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| DDBar |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                If SCSForm.http_hwnd = 0 Then delItem svd_http&, True: _
                                              delItem svd_http_d&, True
ElseIf mode% = 1 And svd_http& + svd_bl& <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| DD |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                If SCSForm.bl_hwnd = 0 Then delItem svd_http&, True: _
                                            delItem svd_bl&, True
ElseIf mode% = -4 And svd_bl& + svd_br& <> 0 Then
                If SCSForm.bl_hwnd = 0 Then delItem svd_br&, True: _
                                            delItem svd_bl&, True   '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| reSplitter *2TEST!*
End If
Select Case mode%
        Case -1: 'Hide
          If SCSForm.LFixed Then
                .Top = -.Height + cLTab: ScLt% = 0
          Else
             If isUpper Then DDM.Top = DDMsvdTop: DDM.Heigth = DDM.Bottom - DDM.Top: .Top = DDMsvdTop * x75 - .Height + 4.5 _
                        Else DDM.Bottom = DDMsvdBtm%: DDM.Heigth = DDM.Bottom - DDM.Top: .Top = DDM.Bottom * x75 - 5: 'DDBarUsed = False
             SCSForm.reParkW , Not noRepark: For Each ctrl In Me.Controls: ctrl.Visible = False: Next
          End If
    'Down
        Case 0:
            If isHidden Or reImg Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .Hide: If reImg Then .Picture = IIf(True, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\DDBar(Bottom).jpg"), Nothing): .Repaint
                Call reSplitter: reBuild Not reImg: .show vbModeless: 'For Each ctrl In Me.Controls: ctrl.Visible = True: Next -> reBuild
            End If:     rgn& = CreateRectRgn(3, 7, .Width / x75 - 3, .Height / x75 - 8) '7,,-8
                DDM.Top = DDMsvdTop%: DDM.Bottom = DDM.Top + (DDMsvdBtm% - DDMsvdTop%) - DDBar.Height / x75 + 10: DDM.Heigth = DDM.Bottom - DDM.Top:  .Top = DDM.Bottom * x75 - 3 'compact(thin)
                SCSForm.reParkW , Not noRepark:
'        Case 0: DDM.Top = DDMsvdTop%: DDM.Bottom = DDM.Top + DDM.Heigth - DDBar.Height / x75 + 3 + 5: .Top = DDM.Bottom * x75 - 5  'normal... |fffd||fffd||fffd||fffd| wild
'                SCSForm.reParkW , Not noRepark: reBuild: 'For Each ctrl In Me.Controls: ctrl.Visible = True: Next -> reBuild
Rem: ScLeft (Yby)
        Case 1, 4: .Hide: noSplitter: mode% = 1: AddItem SCSForm.d_http_hwnd '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| View
                If reImg Then .Picture = IIf(True, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\friz_mramor2B_Y.jpg"), Nothing): .Repaint
                DDM.Top = DDMsvdTop%: DDM.Bottom = DDM.Top + DDM.Heigth: DDM.Heigth = DDM.Bottom - DDM.Top: .Width = 80  '106.65 = Down
                .Left = -2: .Top = ScTp * x75 - 2: .Height = ScBm * x75 + 5: ScLt% = .Width / x75 + 0
                rgn& = CreateRectRgn(3, 3, .Width / x75 - 3, .Height / x75 - 3) '7,,-8
                SCSForm.reParkW , Not noRepark: reBuild Not reImg: SCSForm.UserForm_Layout: .show vbModeless 'For Each ctrl In Me.Controls: ctrl.Visible = True: Next -> reBuild
Rem: ScRight (Yby)
        Case -4: .Hide: noSplitter: If reImg Then .Picture = IIf(True, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\friz_mramor2B_Y.jpg"), Nothing): .Repaint
                DDM.Top = DDMsvdTop%: DDM.Bottom = DDM.Top + DDM.Heigth: DDM.Heigth = DDM.Bottom - DDM.Top: .Width = 80  '106.65 = Down
                .Left = 2 - .Width: .Top = ScTp * x75 - 2: .Height = ScBm * x75 + 5: ScRt% = .Left / x75 + 0
                rgn& = CreateRectRgn(3, 3, .Width / x75 - 3, .Height / x75 - 3) '7,,-8
                SCSForm.reParkW , Not noRepark: reBuild Not reImg: SCSForm.UserForm_Layout: .show vbModeless 'For Each ctrl In Me.Controls: ctrl.Visible = True: Next -> reBuild
    'Up
        Case 2:
              If isHidden Or reImg Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .Hide: If reImg Then .Picture = IIf(SDGoldenTheme, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\DDBar(Top).jpg"), Nothing): .Repaint
                Call reSplitter: reBuild Not reImg: .show vbModeless: 'For Each ctrl In Me.Controls: ctrl.Visible = True: Next
              End If:   rgn& = CreateRectRgn(3, 11, .Width / x75 - 3, .Height / x75 - 11) 'UpperPlaced (extraThin)
                .Top = DDMsvdTop% * x75 - 8: DDM.Top = DDMsvdTop% + DDBar.Height / x75 - 17: DDM.Bottom = DDMsvdBtm%: DDM.Heigth = DDM.Bottom - DDM.Top
                SCSForm.reParkW , Not noRepark:
                'If Not DDM.useTB Then SetTopMostWindow FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|"), True
Rem: Matrix                                                                        '|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -1(btm)|0(|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)|1(top)|+3(ScLeft), |fffd||fffd||fffd||fffd| +3(ScRight) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
        Case 3: If Not noCheck Or DDMatrixFrom% = 0 Then DDMatrixFrom% = IIf(DDM.num = 1, -5, IIf(SCSForm.LFixed, 3, IIf(isUpper, 2, 0) - 1))
                If DDMatrixFrom% = 3 Then ScLt% = 0: SCSForm.UserForm_Layout: SCSForm.set_my_X 0: svd_bl& = AddItem(SCSForm.bl_hwnd) '|fffd| "~" - |fffd||fffd||fffd||fffd||fffd||fffd|
                If DDMatrixFrom% = -5 Then '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| DDM.num = 1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                           svd_bl& = AddItem(SCSForm.bl_hwnd): svd_br& = AddItem(SCSForm.br_hwnd)
                  Else:: svd_http& = AddItem(SCSForm.http_hwnd) '.Hide '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" 'Wild (DDBarMatrix)
                        If rt$ <> "1m2" Then svd_http_d& = AddItem(SCSForm.d_http_hwnd) 'half-Matrix
                End If
                Set .Picture = IIf(SDGoldenTheme And AFrame% <> 0, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\friz_mramor2B.jpg"), Nothing)
                If rt$ <> "" Then
                                    SCSForm.SetRT rt$, me_hwnd
                ElseIf DDM.num = 1 Then                                                             'Me.Top / x75 + 30 <= ScBm% * 4 / 5 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    If SCSForm.Top / x75 + 30 > ScBm% * 4 / 5 Then SCSForm.Top = sag(my_rt_Bottom, ScBm% * 4 / 5 - 30) * x75: SCSForm.set_my_Y Int(my_rt_Bottom + 20)
                                    ScRt% = DDM.Left - 3: SCSForm.SetRT "4", me_hwnd: SCSForm.reParkW
                                    If FnFormIsVisible("EditForm") Then SetTopMostWindow FindWindow(vbNullString, EditForm.Caption), True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Else: .Top = DDMsvdTop% * x75 - 3: .Height = (DDMsvdBtm% - DDMsvdTop%) * x75 + 6: End If 'fullHeight!

                reBuild noCheck: .show vbModeless
                'If Not DDM.useTB Then SetTopMostWindow FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|"), True
End Select: If rgn& = 0 Then rgn& = CreateRectRgn(3, 6, .Width / x75 - 3, .Height / x75 - 5) 'normal  '4,,-5
            If Not isMatrix Then preMatrixOrder$ = ""
            SetWindowRgn me_hwnd&, rgn&, True: .Repaint: End With: If on_timess_flg Then satellite.reSize True '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
'>> |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Matrix)
If Abs(mode% - 1) = 1 And svd_http& + svd_http_d& <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| DD |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                If SCSForm.http_hwnd = 0 Then PutOn svd_http&, 1, SCSForm.inCollection(svd_http&) = 0: _
                                              PutOn svd_http_d&, 5, SCSForm.inCollection(svd_http_d&) = 0 Else svd_Cleaning
ElseIf mode% = 1 And svd_http& + svd_bl& <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| DD |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                If SCSForm.bl_hwnd = 0 Then PutOn svd_http&, 1, SCSForm.inCollection(svd_http&) = 0: _
                                            PutOn svd_bl&, 3, SCSForm.inCollection(svd_bl&) = 0 Else svd_Cleaning
ElseIf mode% = -4 And svd_bl& + svd_br& <> 0 Then
                If SCSForm.bl_hwnd = 0 Then PutOn svd_br&, 4, SCSForm.inCollection(svd_br&) = 0: _
                                            PutOn svd_bl&, 3, SCSForm.inCollection(svd_bl&) = 0 Else svd_Cleaning
ElseIf DDMatrixFrom% = 0 Then svd_http& = 0: svd_http_d& = 0: svd_bl& = 0: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Function Yby() As Boolean: Yby = (SCSForm.LFixed Or DDM.num = 1) And Not isMatrix: End Function
Function fullHeight() As Boolean: fullHeight = Me.Height = (DDMsvdBtm% - DDMsvdTop%) * x75 + 6: End Function 'Flag |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Rem: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| reDraw                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
Sub reBuild(Optional noCheck = False, Optional touchY&): If Me.Controls.Count = 0 Then Exit Sub 'DDBar |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Recovery
                If isMatrix Then                                'Yby - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Y
                                  WildFlg = True: If Not noCheck Then If Me.Controls(0).Height >= 100 Then Exit Sub 'Wild -> Wild
                            Else: normFlg = True: If Not noCheck Then If between(Me.Controls(0).Left, 1, 19) And Not Yby Then Exit Sub 'norm -> norm (< min LTab)
                End If: fullsuzedImages = settingsForm.CheckBox20.value:
Dim img_cnt%, i%: If preMatrixOrder$ = "" Then GoSub getOrderSTR _
                                            Else img_cnt% = prsCount("|", preMatrixOrder$) - 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Matrix |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If WildFlg Then
    If Splitter$ = "" Then useOrder$ = preMatrixOrder$ Else On Error Resume Next: _
        useOrder$ = preMatrixOrder$: For i% = 1 To prsCount("|", Splitter$) - 1: sadd useOrder$, Me.Controls(prsBetween|fffd|(i, "|", "|", Splitter$)).name & "|": Next i%: _
    On Error GoTo 0: img_cnt% = prsCount("|", useOrder$) - 1: Me.Controls("Splitter").Visible = False    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| reSplitter
    For i = 1 To img_cnt%: On Error GoTo nxtL2: Set ctrl = Me.Controls(sag(s, prsBetween|fffd|(i, "|", "|", useOrder$))) 'preMatrixOrder$ + Splitter$
       If ctrl.ControlTipText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows Media" Then typeApp$ = typeApp$ & "|" & s: GoTo nxtL2 'custom'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'On Error Resume Next: If Me.Controls("i" & S).tag = "" Then GoTo expL '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       If Me.Controls(s).tag = "" Then GoTo expL '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "*")
          ctt = ctrl.ControlTipText
       If ctt Like "^*" Then typeDocHelp$ = typeDocHelp$ & "|" & s: GoTo nxtL2
       If ctt Like "*Notepad++*" Then typeDocNpp$ = typeDocNpp$ & "|" & s: GoTo nxtL2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| typeDoc$
       If ctt Like "*Excel*" Then typeDocExcel$ = typeDocExcel$ & "|" & s: GoTo nxtL2
       If ctt Like "*Word*" Then typeDocWord$ = typeDocWord$ & "|" & s: GoTo nxtL2
       If ctt Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*" Then typeDocMsg$ = typeDocMsg$ & "|" & s: GoTo nxtL2
                                                                   typeApp$ = typeApp$ & "|" & s: GoTo nxtL2
expL:     typeExp$ = typeExp$ & "|" & s
nxtL2: Next i: typeDoc$ = typeDocMsg$ & typeDocExcel$ & typeDocNpp$ & typeDocWord$ & typeDocHelp$ '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      useOrder$ = typeExp$ & typeDoc$ & typeApp$ & "|" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Else: useOrder$ = dbg_(preMatrixOrder$, img_cnt%): End If: touchBar% = 0 'touchBar (|fffd||fffd|)|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For Each ctrl In Me.Controls: If ctrl.name Like "s*" Or ctrl.name Like "L*" Then Me.Controls.Remove (ctrl.name) 'stick & Labels
Next: Rem: normFlg
    If normFlg Then maxY = 1: maxX = 99: xSplit = 2: TTab = -4: LTab = IIf(Yby, 12, cLTab): iTShift = 10: AFrame% = 0: _
                    H = IIf(Yby, (Me.Width - 5) * 3 / 4, Me.Height + 5): W = IIf(Yby, Me.Width, H * 4 / 3): preMatrixOrder$ = "": GoTo doL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Matrix (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| AddItem)
'Dim img_cnt%, i%: For i = 1 To Images.Count&: img_cnt = img_cnt + IIf(Left(Images.Item(i), 1) = "i", 0, 1): Next '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Rem: WildFlg
If sag(byType, settingsForm.CheckBox18.value) Then
   If typeExp$ <> "" Then tMode$ = "E"
   If typeDoc$ <> "" Then sadd tMode$, "D"
   If typeApp$ <> "" Then sadd tMode$, "A"
   byType = byType And sag(frameCnt, Len(tMode$)) > 1
Else: frameCnt = 1: End If: frameWidth% = (dbg_(Me.Height, " - Me.Height") - 30) / frameCnt 'Me.Height - 30 '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
W = 0: H = 0: img_cnt% = prsCount("|", useOrder$) - 1 'parameters
              compact = byType And Me.Height / x75 < DDM.Bottom - DDM.Top - 10 Or _
                        decode(Triple2(settingsForm.CheckBox19.value), -1, True, 0, False, 1, DDMatrixFrom% = 1)  'Null = True 4 Top
LabHeihgt% = 10 '!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| byType
If byType Then                                        'Typed Matrix
   touchBar% = 30: 'LabHeihgt% = 10 'touchBar |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Frame
   If touchY& Then 'Matrix^2
        For Each ctrl In Me.Controls: ctrl.Visible = False: Next: 'dbg_ touchY& * x75, splitE, splitD, AFrame%
        Select Case touchY& * x75
            Case 1 To splitE: If AFrame% <> 1 Then useOrder$ = typeExp$ & "|": img_cnt% = prsCount("|", useOrder$) - 1: AFrame% = 1: GoTo noTypesL
            Case 1 To splitD: If AFrame% <> 2 Then useOrder$ = typeDoc$ & "|": img_cnt% = prsCount("|", useOrder$) - 1: AFrame% = 2: GoTo noTypesL
            Case Else: If AFrame% <> 3 Then useOrder$ = typeApp$ & "|": img_cnt% = prsCount("|", useOrder$) - 1: AFrame% = 3: GoTo noTypesL
        End Select: End If: splitD = 0: splitE = 0: AFrame% = 0
    
   ySplit = 10: frameBtm% = IIf(DDMatrixFrom% = 1, IIf(fullHeight, 55, 10), 10): TTab = 0 'frameBtm% |fffd||fffd||fffd||fffd||fffd||fffd| TTab, ySplit - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   Dim NewImg As MSForms.Image: defMaxColCnt = 6
   If tMode$ Like "*E*" Then
        useOrder$ = typeExp$ & "|": img_cnt% = prsCount("|", useOrder$) - 1
        frameTop% = zero(frameBtm%, Me.Top): frameBtm% = frameTop% + dbg_(frameWidth%, " - frameWidth% (E)"): GoSub getMxL
        'On Error Resume Next: Set NewImg = Me.Controls("sE"): On Error GoTo 0: If NewImg Is Nothing Then
        If Not tMode$ Like "*E" Then
             Set NewImg = Me.Controls.Add("forms.Image.1", hWnd&, True): _
                 NewImg.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\fones\sticks\stick8.jpg"): NewImg.PictureSizeMode = fmPictureSizeModeStretch: NewImg.BorderStyle = fmBorderStyleNone
            With NewImg: .name = "sE": .Height = 7: .Left = LTab: .Width = Me.Width - LTab - touchBar%
                         .Top = IIf(fullHeight And DDMatrixFrom% <> 3, DDMatrixFrom% * LabHeihgt%, 0) + _
                                zero(frameBtm%, Me.Top) - IIf(Not compact Or H = 0, 0, frameWidth% - H * IIf(img_cnt% > defMaxColCnt, 2.1, 1)): splitE = .Top '+ ySplit
            End With: Set NewImg = Nothing: End If
        'incOn frameBtm%, .Height:
        'Else: On Error Resume Next: Me.Controls.Remove ("sE"): On Error GoTo 0:
   End If
   If tMode$ Like "*D*" Then
        useOrder$ = typeDoc$ & "|": img_cnt% = prsCount("|", useOrder$) - 1
        frameTop% = zero(frameBtm%, Me.Top) + IIf(compact And splitE > 0, -ySplit, ySplit): frameBtm% = frameTop% + dbg_(frameWidth%, " - frameWidth% (D)"): GoSub getMxL:
       'frameTop% = zero(frameBtm%, Me.Top) + ySplit
        'On Error Resume Next: Set NewImg = Me.Controls("sD"): If NewImg Is Nothing Then
        If Not tMode$ Like "*D" Then
             Set NewImg = Me.Controls.Add("forms.Image.1", hWnd&, True): _
                 NewImg.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\fones\sticks\stick8.jpg"): NewImg.PictureSizeMode = fmPictureSizeModeStretch: NewImg.BorderStyle = fmBorderStyleNone
            With NewImg: .name = "sD": .Height = 7: .Left = LTab: .Width = Me.Width - LTab - touchBar%
                         .Top = IIf(fullHeight And DDMatrixFrom% <> 3, DDMatrixFrom% * LabHeihgt%, 0) + _
                                zero(frameBtm%, Me.Top) - IIf(Not compact Or H = 0, 0, frameWidth% - H * IIf(img_cnt% > defMaxColCnt, 2.1, 1)): splitD = .Top '+ ySplit
            End With: Set NewImg = Nothing: End If
        'incOn frameBtm%, .Height:
        'Else: On Error Resume Next: Me.Controls.Remove ("sD"): On Error GoTo 0:
   End If
   If tMode$ Like "*A*" Then
      useOrder$ = typeApp$ & "|": img_cnt% = prsCount("|", useOrder$) - 1: mApp = DDMatrixFrom% = -1    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| App |fffd||fffd||fffd| Case |fffd||fffd||fffd| Bottom-|fffd||fffd||fffd||fffd||fffd||fffd|
      frameTop% = zero(splitD, splitE) + ySplit: frameBtm% = frameTop% + dbg_(frameWidth%, " - frameWidth% (A)"): GoSub getMxL: End If
   Exit Sub
Else                                                'Simple Matrix OR normal(Top/Bottom) DDBar
noTypesL: frameTop% = LabHeihgt%: frameBtm% = Me.Height 'DDMsvdBtm% * x75
Select Case img_cnt%: Case 1: If touchY& Or Not fullHeight Then maxY = 1: maxX = 1: TTab = 0.5 Else Exit Sub  'Me.Controls.Count / 2 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| img |fffd||fffd| |fffd||fffd||fffd||fffd|)
       Case 2 To 2: maxY = 1: maxX = 2: TTab = 0.5: LTab = 35 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?)
       Case 3 To 4: maxY = 2: maxX = 2: TTab = IIf(DDMatrixFrom% < 0, 10, 75 - 20): LTab = 20
       Case 5 To 6: maxY = 2: maxX = 3: TTab = IIf(DDMatrixFrom% < 0, 10, 75 - 20): LTab = 35
       Case 7 To 9: maxY = 3: maxX = 3: TTab = IIf(DDMatrixFrom% < 0, 10, 75 - 20): LTab = 35
       Case 10 To 16: maxY = 4: maxX = 4: TTab = IIf(DDMatrixFrom% < 0, 10, 75 - 20): LTab = 35
         Case Else: maxY = 5: maxX = 4: TTab = IIf(DDMatrixFrom% < 0, 10, 75 - 20): LTab = 35: ySplit = 10
End Select: GoSub frameL: End If: Exit Sub
Rem: Common
getMxL: If defMaxColCnt = 8 Then mApp = True '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 6-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| App
        Select Case img_cnt%
        Case 1 To IIf(mApp, 8, 6): maxY = 1: maxX = img_cnt%: LTab = 20 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?)
        Case IIf(mApp, 9, 7) To IIf(mApp, 16, 12): maxY = 2: maxX = IIf(mApp, 8, 6): LTab = 20
        Case Else: maxY = 3: maxX = 8: LTab = 35
        End Select: mApp = False: GoSub frameL: Return
frameL: xSplit = 10: W = (Me.Width - LTab - touchBar%) / maxX - xSplit: iTShift = 0: frameLin = True   'Return - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not fullHeight And splitE = 0 And maxY > 1 Then maxY = 2: tmpHShift = 12.9 Else tmpHShift = 0 '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| 1-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Matrix
        ySplit = zero(ySplit, 10): H = tmpHShift + Min((frameBtm% - frameTop%) * 0.9 / maxY - ySplit * maxY, W * 0.56)  ': W = |fffd| / 0.56 '250x137
        If TTab = 0.5 Then TTab = (frameBtm% - frameTop% - H) / 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2 To 2
            'useOrder$ = preMatrixOrder$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Matrix |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
doL: Dim r%, c%, iCtrl As Control, NewLab As MSForms.Label 'For Each ctrl In Me.Controls
                 For i = 1 To img_cnt%: On Error GoTo nxtL:
                        Set ctrl = Me.Controls(db_(prsBetween|fffd|(i, "|", "|", useOrder$))) '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
                    If Yby Then
                        ctrl.Left = IIf(DDM.num = 1, 2, 0): ctrl.Height = H: ctrl.Top = LTab + (dbg_(H) + h_splt) * c%: ctrl.Width = W - 5
                        ctrl.Visible = WildFlg Or ctrl.Top + Controls(0).Height < Me.Height - LTab  'was 10 items (fixed)
                    Else
                        'If Not ctrl.name Like "i*" Then
                        ctrl.Top = frameTop% + TTab + (ySplit + H + IIf(compact, 0, 8)) * r%: ctrl.Height = H:
                        'dbg_ ctrl.Top & " = ", "frameTop%= " & frameTop%, " + TTab= " & TTab, " + ySplit= " & ySplit, H & " * " & r%
                        ctrl.Left = LTab + (xSplit + W) * c%: ctrl.Width = W: ctrl.Visible = WildFlg Or ctrl.Left + ctrl.Width < zero(Splitter_lft@, Me.Width - cLTab) + svw 'was 10 items (fixed)
                    End If
                    If ctrl.name = svd_http& Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                                                                       ctrl.BorderStyle = 1: ctrl.BorderColor = IIf(SCSForm.LFixed, &HC000&, &HFF&)
                    ElseIf ctrl.name = svd_bl& Then If SCSForm.LFixed Or DDM.num = 1 Then ctrl.BorderStyle = 1: ctrl.BorderColor = &HFF&
                    ElseIf ctrl.name = svd_http_d& And Not SCSForm.LFixed Then ctrl.BorderStyle = 1: ctrl.BorderColor = &HC000&
                    End If
  If LabHeihgt% > 0 Then Set NewLab = Me.Controls.Add("forms.Label.1", "L" & hWnd&, True): _
                    With NewLab: .Left = ctrl.Left: .Top = ctrl.Top + ctrl.Height - IIf(compact, 2, 0): .Width = ctrl.Width: .Height = LabHeihgt%: .Caption = ctrl.ControlTipText: _
                        .Font.Bold = AFrame% > 0: .TextAlign = fmTextAlignCenter: .BackStyle = fmBackStyleTransparent: .ForeColor = vbWhite: _
                    End With: Set NewLab = Nothing
'If ctrl.Visible Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
  On Error Resume Next: Set iCtrl = Me.Controls("i" & ctrl.name): On Error GoTo 0
                        If Not iCtrl Is Nothing Then With iCtrl: .Top = ctrl.Top + iTShift: .Left = ctrl.Left: .Visible = ctrl.Visible: End With
                        Set iCtrl = Me.Controls("b_" & ctrl.name):
                        If Not iCtrl Is Nothing Then With iCtrl: .Top = ctrl.Top + iTShift: .Left = ctrl.Left + ctrl.Width - .Width * 2 - 2: .Visible = ctrl.Visible: End With
                        Set iCtrl = Me.Controls("bx" & ctrl.name):
                        If Not iCtrl Is Nothing Then With iCtrl: .Top = ctrl.Top + iTShift: .Left = ctrl.Left + ctrl.Width - .Width: .Visible = ctrl.Visible: End With
Set iCtrl = Nothing ': End If
If Not fullsuzedImages Then Set ctrl.Picture = LoadPicture(ThisWorkbook.path & "\temporal\" & IIf(WildFlg, "Preview\", "") & ctrl.name & ".dib")
                        If inc(c%) >= maxX Then c% = 0: If inc(r%) >= maxY Then _
                         r% = 0: c% = 0: Set iCtrl = Nothing: If frameLin Then incon frameBtm%, IIf(fullHeight, 0, LabHeihgt% + 5): Return Else Exit Sub 'just fullfilled
                    'End If
nxtL:            Next i: r% = 0: c% = 0: Set iCtrl = Nothing: If frameLin Then incon frameBtm%, IIf(fullHeight, 0, LabHeihgt% + 5): Return
             Exit Sub                     'If Not ctrl.name Like "i*" And Not ctrl.name Like "s*" And Not ctrl.name Like "L*"
getOrderSTR: For Each ctrl In Me.Controls: If IsNumeric(ctrl.name) Then If Not hasIt("|" & ctrl.name & "|", Splitter$) Then _
                                              inc img_cnt%: sadd preMatrixOrder$, "|{" & replicate(Int(ctrl.Left), "0", 4) & "}" & ctrl.name
                 Next: preMatrixOrder$ = clearFromTags$("{", "}", db_(sortSetABC$("|", preMatrixOrder$ & "|"))): Return '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |hwnd1|hwnd2..|
'reImg: For Each ctrl In Me.Controls: If Not ctrl.name Like "i*" Then _
'        Set ctrl.Picture = LoadPicture(ThisWorkbook.path & "\temporal\" & IIf(WildFlg, "Preview\", "") & ctrl.name & ".dib")
'       Return
End Sub
Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| clsImages.Contains(Key) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Me.Controls
Public Function HasItem(hWnd&) As Boolean: For Each ctrl In Me.Controls: If ctrl.name = CStr(hWnd&) Then HasItem = True: Exit For
                                               Next ctrl: End Function
Public Function AddItem&(hWnd&, Optional upd = True, Optional use_img$, Optional from_place%): If hWnd& = 0 Then Exit Function
                                                    If Not (dispValidCaption(hWnd&) Or hWnd& = SCSForm.t_hwnd) Then Exit Function
                                                    If Not DDBarUsed Then DDBarUsed = True: reDraw IIf(DDM.On, 1, IIf(DDM.num = 1, -4, 0)), IIf(DDM.On Or DDM.num = 1, True, False) _
                                                                     Else If Not FnFormIsLoaded(Me.name) Then Msg "Not Loaded!": reDraw IIf(DDM.On, 1, IIf(DDM.num = 1, -4, 0))
    If Images.Contains(hWnd&) Then delItem hWnd& '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'If Images.Index(CStr(hwnd&)) > 0 Then delItem hwnd& - |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Image1 - Hot Rebuild
    Dim rt As rect, NewImg As MSForms.Image, SplitFlg As Boolean
    Set NewImg = Me.Controls.Add("forms.Image.1", hWnd&, True) 'msg DDBar.Controls("334530").name
    With NewImg                                         '.Left = cLTab + (Me.Controls.Count - 1) * (.Width + 2) '.name = hwnd& - |fffd| |fffd||fffd||fffd||fffd||fffd|
        If Yby Then .Width = Me.Width - 5: .Height = .Width * 3 / 4: .Left = IIf(DDM.num = 1, 2, 0): .Top = 12 _
               Else .Height = Me.Height + 5: .Width = .Height * 4 / 3: .Top = -4: _
                    If Not sag(SplitFlg, InStr(1, Splitter$, "|" & hWnd& & "|") > 0) Then .Left = cLTab Else GoSub restoreInSplitter
                    '.Left = Splitter_lft@ + svw + (.Width + 2) * prsCount("|", prsbefore("|" & hWnd& & "|", Splitter$)) '|fffd||fffd| <booked place> |fffd| Splitter
          .PictureSizeMode = fmPictureSizeModeZoom: .PictureAlignment = fmPictureAlignmentCenter:  '.AutoSize = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          .BackStyle = fmBackStyleTransparent: .BorderStyle = fmBorderStyleNone
          .ControlTipText = getWndCaption$(hWnd&)
        '  pic_f$ = ThisWorkbook.path & "\icons\settings.ico" 'MsgBox GetPictureSize(pic_f$)
        If use_img$ <> "" Then
                                Set .Picture = LoadPicture(use_img$)
        Else: GetWindowRect hWnd&, rt: On Error Resume Next:
            If isMatrix Or settingsForm.CheckBox20 Then 'fullsizedImages
                        Set .Picture = CaptureWindow(hWnd&, True, 0, 0, rt.Right - rt.Left, rt.Bottom - rt.Top) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        SavePicture .Picture, ThisWorkbook.path & "\temporal\Preview\" & hWnd& & ".dib"
                        SavePicture FitToSizeBitmap(.Picture, 250), ThisWorkbook.path & "\temporal\" & hWnd& & ".dib"
            Else: Dim tmpPict As IPictureDisp: Set tmpPict = CaptureWindow(hWnd&, True, 0, 0, rt.Right - rt.Left, rt.Bottom - rt.Top) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                   Set .Picture = FitToSizeBitmap(tmpPict, 250): SavePicture .Picture, ThisWorkbook.path & "\temporal\" & hWnd& & ".dib"
                                                                 SavePicture tmpPict, ThisWorkbook.path & "\temporal\Preview\" & hWnd& & ".dib": Set tmpPict = Nothing
            End If: On Error GoTo 0                                   'Set .Picture = CaptureWindow(hwnd&, True, 0, 0, rt.Right - rt.Left, rt.Bottom - rt.Top) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                                     'FitToSizeBitmap(CaptureWindow(hwnd&, True, 0, 0, rt.Right - rt.Left, rt.Bottom - rt.Top), 1200) '800 - |fffd||fffd||fffd||fffd||fffd||fffd| Preview (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), 1200+ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             'On Error Resume Next: SavePicture .Picture, ThisWorkbook.path & "\temporal\" & hwnd& & ".dib": On Error GoTo 0                   '100 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 250 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (500 - |fffd||fffd||fffd||fffd||fffd||fffd|)
        End If 'On Error Resume Next: .Picture = FitToSizeBitmap(LoadPicture(ThisWorkbook.path & "\icons\settings.ico"), 22, 22): On Error GoTo 0
       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _Click
           Images.AddItem NewImg, CStr(hWnd&): AddItem = hWnd&
          'ThisWorkbook.VBProject.VBComponents(Me.name).CodeModule.InsertLines 100, "Private Sub Image" & hwnd& & "_Click(): msgbox 1: End Sub" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| Hot
       'iCon
        Dim hIconData() As Byte, iNew As MSForms.Image
        If sag(cptn$, getSavedIco$(ThisWorkbook.path & "\icons\disp\", hWnd&, cptn_$)) = "" Then _
                If Not SaveHICONtoArray(GetWindowsICO(hWnd&), hIconData()) Then _
                If from_place% = 0 And Not Left(cptn_$, 1) = "^" Then GoTo noimgL _
                                   Else If Left(cptn_$, 1) = "^" Then cptn$ = ThisWorkbook.path & "\icons\|2e5|V" _
                                                                 Else cptn$ = ThisWorkbook.path & "\icons\disp\vitrages\" & _
                                                                 decode(from_place%, 1, "R234", 2, "1G34", 3, "12B4", 4, "123Y")
        Set iNew = Me.Controls.Add("forms.Image.1", "i" & hWnd&, True)
            iNew.Height = 11: iNew.Width = 12: iNew.Top = .Top + 10: iNew.Left = .Left: iNew.PictureSizeMode = fmPictureSizeModeZoom
            iNew.BorderStyle = fmBorderStyleNone: iNew.BackStyle = fmBackStyleTransparent
            'If from_place% > 0 Then
            iNew.tag = decode(from_place%, 0, 1): Images.AddItem iNew, CStr("i" & hWnd&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If cptn$ = "" Then Set iNew.Picture = ArrayToStdPicture(hIconData) _
                      Else Set iNew.Picture = LoadPicture(cptn$ & ".ico")
        If Not (iNew.Picture Is Nothing Or cptn$ Like "*\icons\disp\vitrages\*") Then NewImg.tag = "*"  'iNew.tag = "*" '/ "" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| reBuild
noimgL:      Erase hIconData 'Free memory used by
        'buttons
        Set iNew = Me.Controls.Add("forms.Image.1", "b_" & hWnd&, True): db_ "b_" & hWnd&
            iNew.Height = 5: iNew.Width = 7: iNew.Top = .Top + 10: iNew.Left = .Left + .Width - iNew.Width * 2 - 2: iNew.PictureSizeMode = fmPictureSizeModeZoom
            iNew.BorderStyle = fmBorderStyleNone: iNew.BackStyle = fmBackStyleTransparent: Images.AddItem iNew, CStr("b_" & hWnd&)
            Set iNew.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\bars - B.gif")
        'X
        Set iNew = Me.Controls.Add("forms.Image.1", "bx" & hWnd&, True)
            iNew.Height = 5: iNew.Width = 7: iNew.Top = .Top + 10: iNew.Left = .Left + .Width - iNew.Width: iNew.PictureSizeMode = fmPictureSizeModeZoom
            iNew.BorderStyle = fmBorderStyleNone: iNew.BackStyle = fmBackStyleTransparent: Images.AddItem iNew, CStr("bx" & hWnd&)
            Set iNew.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\bars - R.gif")
        Set iNew = Nothing  'Free memory used by
     If isMatrix Then
           If preMatrixOrder$ <> "" And Not hasIt("|" & hWnd& & "|", Splitter$) Then preMatrixOrder$ = "|" & hWnd& & preMatrixOrder$: reBuild True  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ElseIf Not SplitFlg Then
            If Not Yby Then
                For Each ctrl In Me.Controls: If IsNumeric(ctrl.name) Then inc ccount%
                    Next: dbg_ ccount%: End If
         For Each ctrl In Me.Controls:
            If prsNumeric$(ctrl.name) <> CStr(hWnd&) Then
                If Yby Then
                      If IsNumeric(ctrl.name) Then ctrl.Left = IIf(DDM.num = 1, 2, 0)
                      ctrl.Top = ctrl.Top + (dbg_(.Height, "Added") + h_splt): ctrl.Visible = ctrl.Top + .Height < Me.Height - IIf(Yby, 0, cLTab)
'                      If Left(ctrl.name, 2) = "b_" Then ctrl.Left = .Left + .Width - ctrl.Width * 2 - 2 _
'                 Else If Left(ctrl.name, 2) = "bx" Then ctrl.Left = .Left + .Width - ctrl.Width
                'ElseIf ctrl.Left < zero(Splitter_lft, 10 + (ccount% + 1) * (.Width + 2)) - (.Width + 2) Then ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (190423)
                 Else: If Splitter_lft@ > 0 Then If ctrl.name = "Splitter" Or InStr(Splitter$, "|" & prsNumeric$(ctrl.name) & "|") > 0 Then GoTo passL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      ctrl.Left = ctrl.Left + (.Width + 2) '- |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                      ctrl.Visible = ctrl.Left + IIf(Left(ctrl.name, 1) = "b", 0, .Width) < zero(Splitter_lft@, Me.Width - cLTab) + svw: 'If ctrl.Visible Then If Left(ctrl.name, 1) <> "i" Then _
                                                                   On Error Resume Next: Me.Controls("i" & ctrl.name).Visible = True: On Error GoTo 0
passL:        End If: End If: Next ctrl: End If: GoTo passSubL 'max 10 ctrls
restoreInSplitter: '.Left =
                    tmp$ = prsBefore("|" & hWnd& & "|", Splitter$):
On Error Resume Next: While sag(itm$, prsAfterLast("|", tmp$)) <> "": tmp$ = Replace(tmp$, "|" & itm$, "")
                        If .Left = 0 Then .Left = Me.Controls(itm$).Left
                                                  Me.Controls(itm$).Left = Me.Controls(itm$).Left - (.Width + 2): _
                                                  Me.Controls("i" & itm$).Left = Me.Controls(itm$).Left: _
                                                  Me.Controls("b_" & itm$).Left = Me.Controls("b_" & itm$).Left - (.Width + 2): _
                                                  Me.Controls("bx" & itm$).Left = Me.Controls("bx" & itm$).Left - (.Width + 2)
                      Wend: On Error GoTo 0: Me.Controls("Splitter").Left = sag(Splitter_lft@, Splitter_lft@ - (.Width + 2))
                                                  If .Left = 0 Then .Left = Splitter_lft@ + svw '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
            Return
passSubL: End With: Set NewImg = Nothing: SCSForm.ReleaseW hWnd&, pos%: SCSForm.setWindowVisible hWnd&, False: If upd Then _
                If Left(getWndCaption$(hWnd&), 1) = "^" And pos% = 2 Or hWnd& = SCSForm.vb_hwnd And pos% = 3 And DDMatrixFrom% = 0 _
                Or hWnd& = FindWindow(vbNullString, "|fffd| - Debugger") And pos% = 2 Then load_temporal_replaced_hwnd pos% '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                If upd Then Me.Repaint: SCSForm.reParkW
                                         End Function 'SCSForm.reParkW:
Public Sub dellALLItems(): On Error GoTo errL: While Images.Count > 0: delItem CLng(db_(Me.Controls(0).name)): Wend:
errL:  End Sub
Public Sub delItem(hWnd&, Optional NOreBuild As Boolean): If hWnd& = 0 Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                                 If Not Images.RemoveItem(CStr(hWnd&)) Then Exit Sub '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   Images.RemoveItem CStr("i" & hWnd&): Images.RemoveItem CStr("b_" & hWnd&): Images.RemoveItem CStr("bx" & hWnd&)
   lft = Me.Controls(CStr(hWnd&)).Left: tp = Me.Controls(CStr(hWnd&)).Top: Me.Controls.Remove CStr(hWnd&) 'For Each ctrl In Me.Controls: If ctrl.Caption = hwnd& Then ctrl.Remove 'Next:
   On Error Resume Next: Me.Controls.Remove CStr("i" & hWnd&): Me.Controls.Remove CStr("b_" & hWnd&): Me.Controls.Remove CStr("bx" & hWnd&): On Error GoTo 0 'iCon
   SCSForm.setWindowVisible hWnd&, True: fileDelete ThisWorkbook.path & "\temporal\" & hWnd& & ".dib"
                                         fileDelete ThisWorkbook.path & "\temporal\Preview\" & hWnd& & ".dib"
   If Images.Count = 0 Then Unload Me: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| SetTBhwnd
   If isMatrix Or NOreBuild Then srep preMatrixOrder$, "|" & hWnd& & "|", "|": af% = AFrame%: AFrame% = 0: If NOreBuild Then Exit Sub Else _
                    reBuild True, decode(af%, 1, splitE - 1, 2, splitD - 1, 3, splitD + 1) / x75: Exit Sub '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (af% |fffd||fffd||fffd| Matrix^2)
    If Not Yby Then
     For Each ctrl In Me.Controls: If IsNumeric(ctrl.name) Then inc ccount%
         Next: dbg_ ccount%: End If
If InStr(1, Splitter$, "|" & hWnd& & "|") > 0 Then 'Me.Repaint: Exit Sub '<booked place>
  On Error Resume Next: For i% = 1 To prsCount("|", Splitter$) - 1: If Me.Controls(sag(cn$, prsBetween|fffd|(i, "|", "|", Splitter$))).Left < lft Then _
                                                                       Me.Controls(cn$).Left = Me.Controls(cn$).Left + (Controls(0).Width + 2): _
                                                                       Me.Controls("i" & cn$).Left = Me.Controls(cn$).Left: _
                                                                       Me.Controls("b_" & cn$).Left = Me.Controls("b_" & cn$).Left + (Controls(0).Width + 2): _
                                                                       Me.Controls("bx" & cn$).Left = Me.Controls("bx" & cn$).Left + (Controls(0).Width + 2)
  Next i: On Error GoTo 0: With Me.Controls("Splitter"): .Left = sag(Splitter_lft@, .Left + (Controls(0).Width + 2)): End With '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <no booked>
End If
   For Each ctrl In Me.Controls:
       If Yby Then
             If ctrl.Top > tp Then
                If IsNumeric(ctrl.name) Then ctrl.Left = IIf(DDM.num = 1, 2, 0)
                ctrl.Top = ctrl.Top - (Controls(0).Width * 3 / 4 + h_splt) '- 15
'              If Left(ctrl.name, 2) = "b_" Then ctrl.Left = .Left + .Width - ctrl.Width * 2 - 2 _
'                 Else If Left(ctrl.name, 2) = "bx" Then ctrl.Left = .Left + .Width - ctrl.Width '
             End If: ctrl.Visible = ctrl.Top + Controls(0).Height < Me.Height - IIf(Yby, 0, cLTab) 'was 10 items (fixed)
       'ElseIf ctrl.Left < zero(Splitter_lft, 10 + (ccount% + 1) * (Controls(0).Width + 2)) Then  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (190423)
       Else: If Splitter_lft@ > 0 Then If ctrl.name = "Splitter" Or InStr(Splitter$, "|" & prsNumeric$(ctrl.name) & "|") > 0 Then GoTo passL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             If ctrl.Left > lft Then ctrl.Left = dbg_(ctrl.Left) - (Controls(0).Width + 2) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      ctrl.Visible = ctrl.Left + ctrl.Width < Me.Width - cLTab 'was 10 items (fixed) 'If ctrl.Visible Then If Left(ctrl.name, 1) <> "i" Then _
                                                        On Error Resume Next: Me.Controls("i" & ctrl.name).Visible = True: On Error GoTo 0
passL: End If: Next ctrl: Me.Repaint: End Sub

Public Function Contains(ByVal Key) As Boolean: Contains = Images.Contains(Key): End Function '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| CStr)
Attribute VB_Name = "DragDrop"
'DragDrop

Private Declare Function apiCallWindowProc& Lib "user32" Alias "CallWindowProcA" (ByVal lpPrevWndFunc&, ByVal hWnd&, ByVal Msg&, ByVal wParam&, ByVal lParam&)
Private Declare Sub sapiDragAcceptFiles Lib "shell32.dll" Alias "DragAcceptFiles" (ByVal hWnd&, ByVal fAccept&)
Private Declare Function apiDragQueryFile& Lib "shell32.dll" Alias "DragQueryFileA" (ByVal hDrop&, ByVal iFile&, ByVal lpszFile$, ByVal cch&)
Private Declare Sub apiDragFinish Lib "shell32.dll" Alias "DragFinish" (ByVal hDrop&)

Rem: |fffd||fffd||fffd| sEnableDrop
Private lpPrevWndProc&
Private Const GWL_WNDPROC& = (-4)
'Private Const GWL_EXSTYLE = (-20)
Private Const WM_DROPFILES = &H233
Private Const WS_EX_ACCEPTFILES = &H10&
'Private hWnd_Frm As Long  - unused
'Private clickcnt%  - unused

'Memory
Private lastStr$

Rem: 'https://stackoverrun.com/ru/q/12357711
Sub sEnableDrop(frm As UserForm, hWnd&): Dim lngStyle&, lngRet&
        lngStyle = GetWindowLong(hWnd, GWL_EXSTYLE) 'apiLyb
        lngStyle = lngStyle Or WS_EX_ACCEPTFILES
        lngRet = SetWindowLong(hWnd, GWL_EXSTYLE, lngStyle) 'apiLyb
        Call sapiDragAcceptFiles(hWnd, True)
        'hWnd_Frm = hWnd - unused
End Sub

Sub sHook(hWnd&): lpPrevWndProc = SetWindowLong(hWnd, GWL_WNDPROC, AddressOf sDragDrop): End Sub

Sub sDragDrop(ByVal hWnd&, ByVal Msg&, ByVal wParam&, ByVal lParam&)

        Dim lngRet&, strTmp$, intLen%, lngCount&, i&, strOut$
        Const cMAX_SIZE = 1000 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ;)
        On Error Resume Next
        If Msg = WM_DROPFILES Then
                strTmp = String$(255, 0)
                lngCount = apiDragQueryFile(wParam, &HFFFFFFFF, strTmp, Len(strTmp))
                For i = 0 To lngCount - 1
                 strTmp = String$(cMAX_SIZE, 0)
                 intLen = apiDragQueryFile(wParam, i, strTmp, cMAX_SIZE)
                 strOut = strOut & Left$(strTmp, intLen) & ";"
                Next i
                strOut = Left$(strOut, Len(strOut) - 1)
                Call apiDragFinish(wParam)
Rem: ACRION
                'db_ strOut
                If prsCount(";", strOut) = 0 Then If db_(lastStr$) = "" Then lastStr$ = strOut: Exit Sub _
                                                                        Else one2lotFlg = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                If one2lotFlg Then
                   If hasIt(";" & strOut & ";", ";" & lastStr$ & ";") Then lastStr$ = strOut: Exit Sub '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd|
             Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                   For j% = 1 To prsCount(";", lastStr$) + 1: fnm2$ = prsBetween|fffd|(j%, ";", ";", lastStr$)
                      If fnm2$ <> strOut Then Shell "cmd /K " & ThisWorkbook.path & "\cmd\compare.bat " & """" & strOut & """ " & """" & fnm2$ & """", vbNormalFocus
                Next j%: lastStr$ = lastStr$ & ";" & strOut: Exit Sub: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             Rem: cross-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                lastStr$ = db_(strOut): cnt% = prsCount(";", strOut): strOut = ";" & strOut & ";" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| 1)
                For j% = 1 To cnt%
                    If sag(fnm1$, prsBetween|fffd|(1, ";", ";", strOut)) = "" Then Exit Sub 'Else db_ "1 - " & fnm1$
                    strOut = Replace(strOut, ";" & fnm1$ & ";", ";")
                    For k% = 1 To cnt% + 1 - j%: 'dbg_ k%, cnt%, j%, strOut
                      If sag(fnm2$, prsBetween|fffd|(k%, ";", ";", strOut)) = "" Then Exit Sub 'Else db_ "2 - " & fnm2$
                      If fnm2$ <> fnm1$ Then Shell "cmd /K " & ThisWorkbook.path & "\cmd\compare.bat " & """" & fnm1$ & """ " & """" & fnm2$ & """", vbNormalFocus
                      'Shell "cmd /K FC /LB1 " & """" & fnm1$ & """ " & """" & fnm2$ & """", vbNormalFocus
                      'Shell ThisWorkbook.path & "\cmd\compare.bat " & """" & fnm1$ & """ " & """" & fnm2$ & """", vbNormalFocus ', vbHide
                Next k%: Next j%
        Else
                lngRet = apiCallWindowProc(ByVal lpPrevWndProc, ByVal hWnd, ByVal Msg, ByVal wParam, ByVal lParam)
        End If
End Sub




Attribute VB_Name = "EditForm"
Attribute VB_Base = "0{7B0070F8-34C0-4F76-932B-56ACF9AF333F}{8A000AAB-2B03-4971-A95D-BB874E509989}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public actDef%

Private Const USE_MOUSE_MOVE = True

'****************************************************
Rem: FLAGS
Function FnAutoMode() As Boolean: FnAutoMode = (Left(EditForm.CommandButton1.ControlTipText, 4) = "Auto"): End Function

Rem: GET
Function GetGId$(): GetGId = EditForm.TextBoxEnGId.value: End Function
Function GetTerm(lang): term = EditForm.Controls("TextBox" & FnERUs$(lang) & "Term")
         GetTerm = Trim(Replace(Replace(term, "" & Chr(10) & "", ""), "" & Chr(13) & "", "")): End Function
Function GetDef(lang): def = Trim(Replace(EditForm.Controls("TextBox" & FnERUs$(lang) & "Def"), Chr(13), ""))
        While Left$(def, 1) = Chr(10): def = LTrim(Right$(def, Len(def) - 1)): Wend '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        While Right$(def, 1) = Chr(10): def = RTrim(Left$(def, Len(def) - 1)): Wend
        pos = InStr(1, def, "  "): While CBool(pos)                           '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                                        If pos <> InStr(pos, def, "   ") Then def = Left$(def, pos - 1) + Replace(def, "  ", " ", pos, 1) _
                                                                         Else: While Mid$(def, pos, 1) = " ": pos = pos + 1: Wend
                                        pos = InStr(pos, def, "  "): Wend
        def = Replace(def, "---", "|fffd| ")                                       '|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "---"
        GetDef = Replace(def, "|fffd|", ""): End Function                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetAbb(lang): GetAbb = EditForm.Controls("TextBox" & FnERUs$(lang) & "Abb"): End Function
Function GetGroup(lang, Optional long_name As Boolean): If Not EditForm.ComboBoxEnG.Visible Then Exit Function
With EditForm:  GetGroup = IIf(long_name, .Controls("TextBox" & FnERUs$(lang) & "GId").ControlTipText, _
                                          .Controls("ComboBox" & FnERUs$(lang) & "G")): End With: End Function
Function GetGIdText(lang): GetGIdText = EditForm.Controls("TextBox" & FnERUs$(lang) & "GId").ControlTipText: End Function
Function GetComboText(lang): GetComboText = EditForm.Controls("ComboBox" & FnERUs$(lang) & "G").ControlTipText: End Function
Function GetImageText(lang): GetImageText = EditForm.Controls("Image" & lang).ControlTipText: End Function
Function GetNotedTermKey(lang): GetNotedTermKey = decode(lang, 1, "#term:", 2, "#|fffd||fffd||fffd||fffd||fffd||fffd|:", 3, "#|fffd||fffd||fffd||fffd||fffd|:"): End Function
Function GetNotedDefKey(lang): GetNotedDefKey = decode(lang, 1, "#determination:", 2, "#|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", 3, "#|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"): End Function
         
Rem: SET
Sub SetGId(Gid): LM "SetGId: " & Gid: For i = 1 To 3: EditForm.Controls("TextBox" & FnERUs$(i) & "GId").value = Gid: Next: End Sub
Sub SetTerm(lang, t_text): If Left(t_text, 1) = "'" Then t_text = "'" + t_text
       EditForm.Controls("TextBox" & FnERUs$(lang) & "Term").value = t_text: End Sub
Sub SetDef(lang, t_text): EditForm.Controls("TextBox" & FnERUs$(lang) & "Def").value = t_text: End Sub
Sub SetAbb(lang, t_text): EditForm.Controls("TextBox" & FnERUs$(lang) & "Abb").value = t_text: End Sub
Sub SetGroup(lang, t_text): LM "SetGroup: " & lang & ", " & t_text '+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RowSource - sorted
    With EditForm.Controls("ComboBox" & FnERUs(lang) & "G"): .Style = fmStyleDropDownCombo: .value = t_text: End With: End Sub
Sub SetGIdText(lang, t_text): EditForm.Controls("TextBox" & FnERUs$(lang) & "GId").ControlTipText = t_text: End Sub
Sub SetComboText(lang, t_text): EditForm.Controls("ComboBox" & FnERUs$(lang) & "G").ControlTipText = t_text: End Sub
Sub SetImageText(lang, t_text): EditForm.Controls("Image" & lang).ControlTipText = t_text: End Sub
Sub SetImageTextFromClass(T As CTerm): Dim id As String: id = T.Gid: If id = "" Then id = T.id
                                For i = 1 To 3: SetImageText i, FnGetShadowFrom(i, id): Next: End Sub

Rem: Other
Sub Clear_GId(): ls ">", "Clear_GId": If Not EditForm.OptionButtonG.value Then SetGId ""
             For i = 1 To 3: EditForm.Controls("ComboBox" & FnERUs$(i) & "G").value = "": Next '("Image" & i).ControlTipText = ""
                             EditForm.ToggleButton1.Caption = "": ls "<", "Clear_GId": End Sub
Sub ComboBoxG_View(i, v_mode): If logging Then LogString ("in   ComboBoxG_View (" & i & ", " & v_mode & ")")
If i = 0 Then For lang = 1 To 3: EditForm.Controls("ComboBox" & FnERUs$(lang) & "G").Visible = v_mode: Next lang _
                            Else: EditForm.Controls("ComboBox" & FnERUs$(i) & "G").Visible = v_mode
                               ls "<", "ComboBoxG_View": End Sub
Sub TextBoxGId_Enab(i, e_mode): If logging Then LogString ("in   TextBoxGId_Enab (" & i & ", " & e_mode & ")")
If i = 0 Then For lang = 1 To 3: EditForm.Controls("TextBox" & FnERUs$(lang) & "GId").Enabled = e_mode: Next lang _
                            Else: EditForm.Controls("TextBox" & FnERUs$(i) & "GId").Enabled = e_mode
                               ls "<", "TextBoxGId_Enab": End Sub
Rem: PseudoMode
Sub SetPseudoMode(lang): If logging Then LogString ("in   SetPseudoMode (" & lang & ")")
               EditForm.Controls("ComboBox" & FnERUs$(lang) & "G").RowSource = FnWSCase$(lang) + "!C2:C" + CStr(FnGetLastRow(lang))
               EditForm.Controls("Image" & lang).SpecialEffect = fmSpecialEffectSunken: ls "<", "SetPseudoMode": End Sub
Function FnPseudoMode() As Boolean: If logging Then LogString ("in   FnPseudoMode")
        flg = EditForm.Image1.SpecialEffect = fmSpecialEffectSunken Or _
              EditForm.Image2.SpecialEffect = fmSpecialEffectSunken Or _
              EditForm.Image3.SpecialEffect = fmSpecialEffectSunken: ls "<", "FnPseudoMode", CStr(flg): FnPseudoMode = flg: End Function
Sub PseudoModeOff(): If logging Then LogString ("in   PseudoModeOff")
                     For lang = 1 To 3: EditForm.Controls("Image" & lang).SpecialEffect = fmSpecialEffectFlat: Next lang: ls "<", "PseudoModeOff": End Sub

'#############################################################################################
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'#############################################################################################
Private Sub ComboBoxEnG_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): ComboBox_KeyUp_eru 1: End Sub
Private Sub ComboBoxRuG_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): ComboBox_KeyUp_eru 2: End Sub
Private Sub ComboBoxUaG_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): ComboBox_KeyUp_eru 3: End Sub
Private Sub ComboBox_KeyUp_eru(lang%): With Me.Controls("ComboBox" & FnERUs(lang) & "G"): .Width = Len(.value) * 4.8 + 25: End With: End Sub

Rem: Click
'*********************************************************************************************
Private Sub Image_resize_1_Click(): Call Image_resize_Click(1): End Sub
Private Sub Image_resize_2_Click(): Call Image_resize_Click(2): End Sub
Private Sub Image_resize_3_Click(): Call Image_resize_Click(3): End Sub

Private Sub Image_resize_Click(n%): If TreeComButton.Caption = "<" Then Call TreeComButton_Click
If Me.Controls("Frame" & n%).Width <> Width Then Do_Frame_resize n%, IIf(Frame1.Top = 0, 0, Frame4.Height + Frame4.Top): _
     For i% = 1 To 3: Me.Controls("Frame" & i%).Visible = False: Next: Me.Controls("Frame" & n%).Visible = True: Frame_resize n%: EditForm.Repaint _
Else For i% = 1 To 3: Me.Controls("Frame" & i%).Visible = True: Next: Call View_Ini(10)
End Sub
                                                                                                                                                'hShift% +
Public Sub Do_Frame_resize(n%, vShift%, Optional hShift%): With Me.Controls("Frame" & n%): .Top = vShift%: .Left = 0: .Width = Width: .Height = 78 * IIf(IIf(n% = 3, Frame2.Top, Frame3.Top) = vShift%, 1, 3): End With: End Sub
Public Function Try_Frame_resize%(): For i% = 1 To 3: If Me.Controls("Frame" & i%).Visible Then incon Try_Frame_resize%, i%
                                     Next: End Function ' = 6 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public Sub TreeComButton_Click()
If TreeComButton.Caption = "<" Then
  BrowserListBox.Visible = False: TreeComButton.Caption = ">"
  Call View_Ini(TreeComButton.Left + TreeComButton.Width): 'TreeComButton.Left = -5
Else
  Call View_Ini(BrowserListBox.Width + TreeComButton.Left + TreeComButton.Width)
  BrowserListBox.Visible = True: TreeComButton.Caption = "<": 'TreeComButton.Left = 160
End If
End Sub

Private Sub CB_fastnamesfilling_Click()                                         'r03+
ev = TextBoxEnTerm.value: rv = TextBoxRuTerm.value: uv = TextBoxUaTerm.value
If ev = "" Or rv = "" Or uv = "" Then                    'logical filling mode
        If ev = "" Then If rv <> "" Then TextBoxEnTerm.value = rv Else TextBoxEnTerm.value = uv
        If rv = "" Then If ev <> "" Then TextBoxRuTerm.value = ev Else TextBoxRuTerm.value = uv
        If uv = "" Then If rv <> "" Then TextBoxUaTerm.value = rv Else TextBoxUaTerm.value = ev
Else: TextBoxRuTerm.value = ev: TextBoxUaTerm.value = ev 'shared changes mode
End If: End Sub

Private Sub Image1_Click(): Call setRootSource(1): End Sub
Private Sub Image2_Click(): Call setRootSource(2): End Sub
Private Sub Image3_Click(): Call setRootSource(3): End Sub

'ViewNote Toolbar (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?)
Private Sub ImageCL_Click(): For i = 1 To 3: Call SetTerm(i, ""): Call SetDef(i, ""): Next i: End Sub

Private Sub ImageCT_Click() '#term:#|fffd||fffd||fffd||fffd||fffd||fffd|:#|fffd||fffd||fffd||fffd||fffd|:
next_key = GetNotedTermKey(1): pos = InStr(1, NoteBox.Text, next_key)
If pos = 0 Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To 3: If pos = 0 Then Exit For Else prev_pos = pos + Len(next_key)
                next_key = GetNotedDefKey(i): pos = InStr(prev_pos, NoteBox.Text, next_key)
                If pos = 0 Then Exit For '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Call SetTerm(i, Mid(NoteBox.Text, prev_pos, pos - prev_pos - 1))
                next_key = GetNotedTermKey(i + 1): pos = InStr(prev_pos, NoteBox.Text, next_key): Next i: End Sub
                
Private Sub ImageCD_Click() '#determination:#|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:#|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
next_key = GetNotedDefKey(1): pos = InStr(1, NoteBox.Text, next_key)
If pos = 0 Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To 3: If pos = 0 Then Exit For Else prev_pos = pos + Len(next_key)
                next_key = GetNotedTermKey(i + 1): pos = InStr(prev_pos, NoteBox.Text, next_key)
                If pos = 0 Then Exit For '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Call SetDef(i, Mid(NoteBox.Text, prev_pos, pos - prev_pos - 1))
                next_key = GetNotedDefKey(i + 1): pos = InStr(prev_pos, NoteBox.Text, next_key): Next i: End Sub
                
'*********************************************************************************************
Rem: DblClick
'*********************************************************************************************
Private Sub TextBoxCat_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call View_Category_Selector: End Sub 'TextBoxEnTerm.SetFocus:

Private Sub TextBoxEnTerm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToID(1, CommandButton1.Caption, 3): End Sub
Private Sub TextBoxRuTerm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToID(2, CommandButton1.Caption, 3): End Sub
Private Sub TextBoxUaTerm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToID(3, CommandButton1.Caption, 3): End Sub

Private Sub TextBoxEnGId_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(1, TextBoxEnGId.Text, 3): End Sub
Private Sub TextBoxRuGId_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(2, TextBoxRuGId.Text, 3): End Sub
Private Sub TextBoxUaGId_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(3, TextBoxUaGId.Text, 3): End Sub

Private Sub ComboBoxEnG_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(1, TextBoxEnGId.Text, 3): End Sub
Private Sub ComboBoxRuG_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(2, TextBoxRuGId.Text, 3): End Sub
Private Sub ComboBoxUaG_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(3, TextBoxUaGId.Text, 3): End Sub

Private Sub TextBoxEnAbb_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(4, CommandButton1.Caption, 5): End Sub
Private Sub TextBoxRuAbb_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(4, CommandButton1.Caption, 5): End Sub
Private Sub TextBoxUaAbb_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call MoveToIDadv(4, CommandButton1.Caption, 5): End Sub

Private Sub TextBoxEnDef_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call Image_resize_Click(1): If Not Frame3.Visible Then TBDef_MM 3, USE_MOUSE_MOVE
    End Sub
Private Sub TextBoxRuDef_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call Image_resize_Click(2): If Not Frame1.Visible Then TBDef_MM 1, USE_MOUSE_MOVE
    End Sub 'Call MoveToIDadv(2, CommandButton1.caption, 4):
Private Sub TextBoxUaDef_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call Image_resize_Click(3): If Not Frame2.Visible Then TBDef_MM 2, USE_MOUSE_MOVE
    Call setFocusOnForm(Me.name): End Sub

Private Sub MoveToIDadv(wsnum, id, fld): Call MoveToID(wsnum, id, fld): End Sub 'customSCS_Layout

Private Sub BrowserListBox_DblClick(ByVal Cancel As MSForms.ReturnBoolean): On Error Resume Next
With BrowserListBox: Call FnFarCell(FnWSNum(ActiveSheet.name), .List(.ListIndex, 0), far_row, far_WS)
                     Sheets(far_WS).Cells(far_row, 3).Activate: End With: End Sub
'*********************************************************************************************
Rem: MouseMove '#TEMP#
'*********************************************************************************************
Private Sub TextBoxEnDef_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
TBDef_MM 1, USE_MOUSE_MOVE: End Sub
Private Sub TextBoxRuDef_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
TBDef_MM 2, USE_MOUSE_MOVE: End Sub
Private Sub TextBoxUaDef_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
TBDef_MM 3, USE_MOUSE_MOVE: End Sub

Private Sub TBDef_MM(lan, USE_MOUSE_MOVE): If Not USE_MOUSE_MOVE Then Exit Sub
                           On Error GoTo errL: If actDef% = lan Then Application.EnableCancelKey = 0: WaitMessage: DoEvents: Application.EnableCancelKey = 1: Exit Sub  'edit-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (+|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                           Dim ctrl As MSForms.Control: Set ctrl = Me.Controls("TextBox" & FnERUs(lan) & "Def")
                           If Not (mCtl Is Nothing) Then If mCtl = ctrl Then Set ctrl = Nothing: Exit Sub 'ctrl.Parent.Repaint:
                           HookListBoxScroll Me, ctrl: actDef% = lan: Set ctrl = Nothing: Exit Sub
errL:                      UnhookListBoxScroll: Set ctrl = Nothing: End Sub

'Private Sub TextBoxEnTerm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'Call MoveAround(2, 3): End Sub
'Private Sub TextBoxRuTerm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'Call MoveAround(3, 3): End Sub
'Private Sub TextBoxUaTerm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'Call MoveAround(4, 3): End Sub

'*********************************************************************************************
Rem: KeyDown
'*********************************************************************************************
Private Sub CommandButton1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(0, KeyCode): End Sub

Private Sub TextBoxEnGId_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(1, KeyCode): End Sub

Private Sub NoteBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): On Error Resume Next
'LM "NoteBox_KeyDown": If KeyCode = 9 Then Call ViewNote: If TextBoxEnTerm.Visible Then TextBoxEnTerm.SetFocus
Call PastKeyBox(-1, KeyCode, Shift): End Sub

Private Sub TextBoxCat_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then KeyCode = 0: Call View_Category_Selector: Exit Sub 'Enter
If KeyCode = 27 Then KeyCode = 0: If FnFormIsLoaded("CATForm") Then Unload CATForm _
                                  Else Unload Me: AppActivate Application.Caption: 'Escape
End Sub

'ComboBox[lng]G
Private Sub ComboBoxEnG_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call ComboBoxGKey(1, Shift, KeyCode): End Sub
Private Sub ComboBoxRuG_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call ComboBoxGKey(2, Shift, KeyCode): End Sub
Private Sub ComboBoxUaG_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call ComboBoxGKey(3, Shift, KeyCode): End Sub

Private Sub ComboBoxEnG_DropButtonClick(): Call ComboBoxG_SortRowSource(1): End Sub
Private Sub ComboBoxRuG_DropButtonClick(): Call ComboBoxG_SortRowSource(2): End Sub
Private Sub ComboBoxUaG_DropButtonClick(): Call ComboBoxG_SortRowSource(3): End Sub

Private Sub ComboBoxEnG_Change(): Call ComboBoxG_Changes(1): End Sub
Private Sub ComboBoxRuG_Change(): Call ComboBoxG_Changes(2): End Sub 'LM "|fffd||fffd||fffd||fffd||fffd|1": wM "|fffd||fffd||fffd||fffd||fffd|2", 2:
Private Sub ComboBoxUaG_Change(): Call ComboBoxG_Changes(3): End Sub

'TextBox[lng]Term
Private Sub TextBoxEnTerm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  If Shift = 2 Then 'Ctrl
    Select Case KeyCode
           Case 37: KeyCode = 0: CtrlMoveLeft
           Case 39: KeyCode = 0: CtrlMoveRight
           Case 38: KeyCode = 0: CtrlMoveUp
           Case 40: KeyCode = 0: CtrlMoveDown
    End Select
  ElseIf KeyCode = 13 Then: KeyCode = 0 'Enter
     If EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then CommandButton1_Click _
     Else: Cells(ActiveCell.row, 4).Activate: Call View_Looking
  ElseIf KeyCode = 38 Then Call MoveUp: KeyCode = 0 'Up Arrow
  ElseIf KeyCode = 40 Then Call MoveDown: KeyCode = 0 'Down Arrow
  ElseIf KeyCode = 39 Then Call MoveRight: KeyCode = 0 'Right Arrow
  ElseIf KeyCode = 37 Then Call MoveLeft: KeyCode = 0 'Left Arrow
  Else: Call PastKeyBox(0, KeyCode): End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| InitializeApp() |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
End Sub
Private Sub TextBoxRuTerm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(0, KeyCode): End Sub
Private Sub TextBoxUaTerm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(0, KeyCode): End Sub

'TextBox[lng]Def
Private Sub TextBoxEnDef_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(1, KeyCode, Shift): End Sub
Private Sub TextBoxRuDef_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(2, KeyCode, Shift): End Sub
Private Sub TextBoxUaDef_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call PastKeyBox(3, KeyCode, Shift): End Sub

'*********************************************************************************************
Rem: Enter
'*********************************************************************************************
Private Sub ComboBoxEnG_Enter(): Call ComboBoxG_Enter(1): End Sub
Private Sub ComboBoxRuG_Enter(): Call ComboBoxG_Enter(2): End Sub
Private Sub ComboBoxUaG_Enter(): Call ComboBoxG_Enter(3): End Sub

Private Sub TextBoxCat_Enter(): Call View_Category_Selector: End Sub

'TextBox[lng]GId - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub TextBoxEnGId_Enter(): TextBoxEnGId.AutoWordSelect = True: End Sub
Private Sub TextBoxRuGId_Enter(): TextBoxRuGId.AutoWordSelect = True: End Sub
Private Sub TextBoxUaGId_Enter(): TextBoxUaGId.AutoWordSelect = True: End Sub

'*********************************************************************************************
Rem: Exit
'*********************************************************************************************
Private Sub Frame1_Exit(ByVal Cancel As MSForms.ReturnBoolean): Call CheckUpdates(1): End Sub
Private Sub Frame2_Exit(ByVal Cancel As MSForms.ReturnBoolean): Call CheckUpdates(2): End Sub
Private Sub Frame3_Exit(ByVal Cancel As MSForms.ReturnBoolean): Call CheckUpdates(3): End Sub

Private Sub ComboBoxEnG_Exit(ByVal Cancel As MSForms.ReturnBoolean): CheckUpdates (1): End Sub
Private Sub ComboBoxRuG_Exit(ByVal Cancel As MSForms.ReturnBoolean): CheckUpdates (2): End Sub
Private Sub ComboBoxUaG_Exit(ByVal Cancel As MSForms.ReturnBoolean): CheckUpdates (3): End Sub
                  
Private Sub TextBoxEnGId_Exit(ByVal Cancel As MSForms.ReturnBoolean): CheckUpdates (1): End Sub
Private Sub TextBoxRuGId_Exit(ByVal Cancel As MSForms.ReturnBoolean): CheckUpdates (2): End Sub
Private Sub TextBoxUaGId_Exit(ByVal Cancel As MSForms.ReturnBoolean): CheckUpdates (3): End Sub

'*********************************************************************************************
Rem: AfterUpdate
'*************** OptionButtons ***************************************************************
Private Sub OptionButtonG_AfterUpdate() '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  If OptionButtonG.value Then For i = 1 To 3: Me.Controls("ComboBox" & FnERUs(i) & "G").Visible = False: _
                                              Me.Controls("TextBox" & FnERUs(i) & "GId").Enabled = False: Next i: _
        Call PseudoModeOff: ToggleButton1.Caption = ""
        If IsNumeric(CommandButton1.Caption) Then SetGId CommandButton1.Caption Else SetGId FnGetFreeId
End Sub
Private Sub OptionButtonS_AfterUpdate()
  If OptionButtonS.value Then For i = 1 To 3: Me.Controls("ComboBox" & FnERUs(i) & "G").Visible = True: _
                                              Me.Controls("TextBox" & FnERUs(i) & "GId").Enabled = True: Next i: _
        Call Clear_GId
End Sub
'#############################################################################################
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| *************************************************************************
'*********************************************************************************************

Sub ComboBoxG_Changes(lang)
With Me.Controls("ComboBox" & FnERUs(lang) & "G")
If .value = "" Then Exit Sub
If .Style = fmStyleDropDownList Then
  Set c = FnFindCell(Sheets(WS0).Columns(lang + 1), .value, xlWhole)
  If c.row = 1 Then Call SetGId(""): Exit Sub Else Dim id As String: id = Sheets(WS0).Cells(c.row, 1)
  Call SetGId(id): Sheets(Index(lang)).Activate: Application.Goto Reference:=Cells(FnGetRowFromID(id, lang), 1), Scroll:=True
  Set c = Nothing: End If: End With: End Sub
'********************************************************

Private Sub CheckUpdates(lang)
With Me.Controls("TextBox" & FnERUs(lang) & "GId")
  If .AutoWordSelect Then Call TextBoxGIdExit(lang): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End With
With Me.Controls("ComboBox" & FnERUs(lang) & "G")
  If .AutoWordSelect Then Call ComboBoxGExit(lang):  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If .AutoSize Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| OFF (|fffd||fffd||fffd||fffd|. |fffd| ComboBoxG_Enter)
              .AutoSize = False: .Width = .tag
  Else: Me.Controls("ComboBox" & FnERUs(lang) & "G").Width = Me.Controls("ComboBox" & FnERUs(IIf(lang = 1, 2, 1)) & "G").Width: End If
End With
End Sub
'********************************************************

Private Sub MoveAround(sheetNum As Integer, field As Integer)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If ActiveSheet.Index <> sheetNum Then
    If ActiveSheet.Cells(ActiveCell.row, 1).Hyperlinks.Count Then
        Do Until ActiveSheet.Index = sheetNum: ActiveSheet.Cells(ActiveCell.row, 1).Hyperlinks(1).Follow
          If ActiveSheet.Index = 1 Then ActiveSheet.Cells(ActiveCell.row, sheetNum).Hyperlinks(1).Follow
        Loop
    Else: Sheets(sheetNum).Activate: End If: End If
ActiveSheet.Cells(ActiveCell.row, field).Activate
End Sub

'********************************************************
Public Sub hideNoteBox(): With EditForm: If Not .MultiPageN.Visible Then Exit Sub 'Save&Hide
       If .CommandButton1.Caption <> "" Then fldnm$ = ThisWorkbook.path & "\PDB\" & .CommandButton1.Caption: _
                  If .NoteBox.Text = "" Then fileDelete fldnm$ & "\notes.nt" Else If blank(.NoteBox.tag, 0) <> Len(.NoteBox.Text) _
                                        Then create_folder_if_not_exists fldnm$: save2file .NoteBox.Text, fldnm$ & "\notes.nt": .NoteBox.tag = Len(.NoteBox.Text) 'changeFlg
       .Width = .Width - .MultiPageN.Width: .MultiPageN.Visible = False: End With: End Sub
Public Sub showNoteBox(): With EditForm: .MultiPageN.Height = .Height - 5: .NoteBox.Height = .Height - 22: .MultiPageN.Left = .Width - 2
                                         .MultiPageN.value = 0: .TagBox.Height = .Height - 22: .LabelStat.Height = .Height - 22
                                                  .ImageCT.Left = .MultiPageN.Left + 3: .ImageCD.Left = .MultiPageN.Left + 27
                                                  .MultiPageN.Visible = True: .Width = .Width + .MultiPageN.Width
                                                  .ImageCL.Left = .Width - 37: End With: End Sub
Public Sub ViewNote()
If logging Then LogString ("in   ViewNote")
With EditForm
    If .MultiPageN.Visible Then
       hideNoteBox    '+ save to notes.nt (tags |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| CommandButton1)
    Else: showNoteBox '+ load from notes.nt + tags
       '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
       If .CommandButton1.Caption <> "" Then
          If .NoteBox.Text = "" Then _
             .NoteBox.Text = loadFromFile$(ThisWorkbook.path & "\PDB\" & .CommandButton1.Caption & "\notes.nt")
          If .TagBox.Text = "" Then .TagBox.Text = Replace(Replace( _
                                                   Replace(FnGetTxtFromID$(.CommandButton1.Caption, 5, 5), "][", Chr(10)), "[", ""), "]", "")
    End If: End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    flag = CBool(InStr(1, .NoteBox.Text, "(c|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)") <> 0)
    .ImageCT.Visible = flag: .ImageCD.Visible = flag: .ImageCL.Visible = flag
End With
If logging Then LogString ("out ViewNote")
End Sub

'********************************************************
Private Sub setRootSource(lang As Integer)
LM "Image_Click"
  If OptionButtonG.value Then
Rem {c9r} Call ComboBoxG_View(0, Not ComboBoxEnG.Visible)
  ElseIf Me.Controls("Image" & lang).SpecialEffect = fmSpecialEffectFlat Then
    Me.Controls("Image" & lang).SpecialEffect = fmSpecialEffectSunken
    Me.Controls("ComboBox" & FnERUs(lang) & "G").RowSource = FnWSCase(lang) + "!C2:C" + CStr(FnGetLastRow(lang))
  ElseIf Me.Controls("Image" & lang).SpecialEffect = fmSpecialEffectSunken Then
    Me.Controls("Image" & lang).SpecialEffect = fmSpecialEffectFlat
    Select Case lang: Case 1: g_col = "!B2:B": Case 2: g_col = "!C2:C": Case 3: g_col = "!D2:D": End Select
    Me.Controls("ComboBox" & FnERUs(lang) & "G").RowSource = WS0 + g_col + CStr(FnGetLastRow(0))
  End If
  If Me.Controls("ComboBox" & FnERUs(lang) & "G").Visible Then Me.Controls("ComboBox" & FnERUs(lang) & "G").SetFocus
  Call Clear_GId
End Sub

'********************************************************
Private Sub ComboBoxG_Enter(lang As Integer)
If logging Then LogString ("in   ComboBoxG_Enter (" & lang & ")")
With Me.Controls("ComboBox" & FnERUs(lang) & "G")
    If Me.Controls("TextBox" & FnERUs(lang) & "GId").AutoWordSelect Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
       Me.Controls("TextBox" & FnERUs(lang) & "GId").AutoWordSelect = False: Call ComboBoxGExit(lang)
    Else: Call FnFarCell(lang, Me.Controls("TextBox" & FnERUs(lang) & "GId"), far_row, far_WS)
      If .RowSource = "" Then
        If Me.Controls("Image" & lang).SpecialEffect <> fmSpecialEffectSunken Then
          Select Case lang: Case 1: g_col = "!B2:B": Case 2: g_col = "!C2:C": Case 3: g_col = "!D2:D": End Select
          .RowSource = WS0 + g_col + CStr(FnGetLastRow(0)): End If: End If
      .AutoWordSelect = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      'MsgBox 1
      On Error GoTo BCErrorHandler: .value = Sheets(far_WS).Cells(far_row, 3): End If
      'If TextBoxEnGId.Text <> "" Then ComboBoxEnG.Text = FnGetRootFromID(1, TextBoxEnGId.Text, mainRoot)
    .tag = .Width: If .Text <> "" Then .AutoSize = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End With: If logging Then LogString ("out ComboBoxG_Enter (" & lang & ")")
Exit Sub
BCErrorHandler: LM "Error": Resume Next
End Sub

'********************************************************
Private Sub TextBoxGIdExit(lang, Optional noAct As Boolean)
With Me.Controls("TextBox" & FnERUs(lang) & "GId")
  If .Text = "" Then .AutoWordSelect = False: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If FnFarCell(lang, .value, far_row, far_WS) Then
    Call SetGId(Trim(.value)): If Not noAct Then Sheets(far_WS).Activate: Cells(far_row, 3).Select
    Call SetGroup(lang, Sheets(far_WS).Cells(far_row, 3))
  Else: Call Clear_GId: End If
  If Visible Then Select Case lang: _
    Case 1: Call ComboBoxEnG_Enter: Case 2: Call ComboBoxRuG_Enter: Case 3: Call ComboBoxUaG_Enter: End Select
End With: End Sub

'********************************************************
Private Sub ComboBoxGExit(lang)
If logging Then LogString ("in   ComboBoxGExit (" & lang & ")")
t_text = Trim(Me.Controls("ComboBox" & FnERUs(lang) & "G"))
Select Case lang: Case 1: t_range = "B:B": Case 2: t_range = "C:C": Case 3: t_range = "D:D": End Select
Me.Controls("ComboBox" & FnERUs(lang) & "G").AutoWordSelect = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem: except
  If t_text = "" Then
    If OptionButtonG.value Then Call ComboBoxG_View(0, False) Else Call PseudoModeOff
    LM "t_text = """"": GoTo quitL
  ElseIf t_text = ".." Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    For lang = 1 To 3: Call SetGroup(lang, ""): Next lang
    LM "t_text = ""..""": GoTo quitL
  End If
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| GId.
  Dim Gid As String
  Gid = TextBoxEnGId.value
  If FnFarCell(lang, Gid, far_row, far_WS) Then
    '[off]|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    'Sheets(far_WS).Activate: Sheets(far_WS).Cells(far_row, 1).Select
    If LCase(Sheets(far_WS).Cells(far_row, 3)) = LCase(t_text) Or _
       FnGetAbbrev(Sheets(far_WS).Cells(far_row, 3), term) = t_text Then
      If Not FnIsGeneral(Gid) Then _
            Call ComboBoxGExitCommonPS(far_row, lang) _
      Else: Call FnFarCell(0, Gid, far_row, far_WS): _
            Call ComboBoxGExitCommon(far_row, lang)
      LM "GId: " & Gid & "": GoTo quitL
  End If: End If
'|fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| not hidden) - |fffd||fffd||fffd| all |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| RowSource |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ID, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|?
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Links |fffd||fffd||fffd| all |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| CatAll
  Set c = FnFindCell(Sheets(WS0).Columns(t_range), t_text, xlWhole)
  If c.row <> 1 Then 'General
    Call PseudoModeOff: Call ComboBoxGExitCommon(c.row, lang)
  ElseIf OptionButtonG.value Then Call ComboBoxG_View(0, False)
  Else: Set c = FnFindCell(Sheets(FnWSCase(lang)).Columns("C:C"), t_text, xlWhole)
    If c.row <> 1 Then Call ComboBoxGExitCommonPS(c.row, lang) _
                  Else Call Clear_GId 'New! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Auto
  End If: Set c = Nothing

quitL: If logging Then LogString ("out ComboBoxGExit (" & lang & ")")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| StatForm
    If FnFormIsLoaded("StatForm") Then _
      If StatForm.MultiPage1.SelectedItem.Caption = "Item" Then _
        If StatForm.obCFTerm Then StatForm.tbxID = CommandButton1.Caption: _
          If StatForm.TBStore Then Call StatForm.TBStore_Click Else StatForm.TBStore = True
End Sub

'********************************************************
Private Sub ComboBoxGKey(lang, Shift, KeyCode)
  'LM Shift & ":" & KeyCode: KeyCode = 0: Exit Sub
  If KeyCode = 13 Then '<Enter>
    KeyCode = 0: Me.Controls("TextBox" & FnERUs(lang) & "Def").SetFocus
  ElseIf KeyCode = 27 Then KeyCode = 0: If FnFormIsLoaded("CATForm") Then Unload CATForm _
                                        Else Unload Me: AppActivate Application.Caption: '<Escape>
  ElseIf Shift = 2 Then 'Ctrl + F
    If KeyCode = 128 Or KeyCode = 160 Or _
       KeyCode = 70 Or KeyCode = 102 Then
            KeyCode = 0: 'h = Height: t = Top: l = Left
                         '   Height = 0: Top = 0: Left = 0
            Call DoFind(1) ': Height = h: Top = t: Left = l:
    End If:
  End If: End Sub
            
'********************************************************
Private Sub PastKeyBox(lang, KeyCode, Optional Shift%)
                  If between(KeyCode, 16, 18) Then Exit Sub 'Else dbgl Shift, KeyCode 'Alt, Ctrl |fffd||fffd||fffd| Ctrl+Shift |fffd||fffd||fffd| +
Dim sLength&, tag_1$, tag_2$ ' sLength& > 0 - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| selectionIniSUB
If Shift% > 1 Then  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| lang |fffd| Shift%)
  If Shift = 4 And invals(KeyCode, 55, 191) Then Shift = 2 '<?> - 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "?" |fffd||fffd||fffd||fffd||fffd| Alt |fffd||fffd||fffd| Ctrl
  With Me.Controls("TextBox" & FnERUs(lang) & "Def") '############################## Def - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Shift = 2 Then   'Ctrl
        Select Case KeyCode
        'If KeyCode <> 17 Then MsgBox KeyCode
                Case 83: fs_flg = True: CommandButton1_Action True: fs_flg = False: 'Ctrl + S (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) 'Me.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":
                Case 55, 191: Open_Browser_W id:=GetIDwithTerm$("Help (Ctrl+?)"), freeW:=True '<?>
                Case 13: '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) Enter = |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, Ctrl+Enter = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (~ Ctrl + S, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Add)
                    Call CommandButton1_Click: If lang Then Me.Controls(IIf(lang = -1, "NoteBox", "TextBox" & FnERUs(lang) & "Def")).SetFocus
                    KeyCode = 0: '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl+Shift
                Case 50: '<"> - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (adv |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                         KeyCode = 0: GoSub selectionIniSUB: tag_1$ = """": tag_2$ = """"
                Case 222: '<'> - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <">)
                         KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "'": tag_2$ = "'"
                Case 106: '<*> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|!) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (2x!) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                         KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "/*": tag_2$ = "*/"
        Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {}-|fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                Case 66: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{{b}}": tag_2$ = "{{/b}}" 'Ctrl + B
                Case 73: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{{i}}": tag_2$ = "{{/i}}" 'Ctrl + I
                Case 85: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{{u}}": tag_2$ = "{{/u}}" 'Ctrl + U
                Case 77: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{m:150 ": tag_2$ = "}" 'Ctrl + <m> - <marquee> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Case 80: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{p}": mode$ = "on_Line_Begining"   'Ctrl + <p> = |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Case 46: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{{": tag_2$ = "}}": mode$ = "Ctrl + <Del>" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| {{}}
                Case 221: KeyCode = 0: GoSub selectionIniSUB: tag_1$ = "{{": tag_2$ = "}}" 'Ctrl + <}> - '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| {{}}
        End Select: GoSub selectionProcessSUB
    ElseIf Shift = 4 Then 'Alt
        GoSub selectionIniSUB
        Select Case KeyCode
               Case 83:  '<S> - {{s}} = 'superior - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)  Alt+<s> (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!) - |fffd||fffd||fffd| HOT-Keys
                    tag_1$ = "{{s}}": tag_2$ = "{{/s}}": GoSub selectionProcessSUB
               Case 82: tag_1$ = "{{b:#fd9}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB '<R>
               Case 71: tag_1$ = "{{b:#dfd}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB '<G>
               Case 66: tag_1$ = "{{b:#cdf}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB '<B>
               Case 86: tag_1$ = "{{b:#ddd}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB '<V>
               Case 89: tag_1$ = "{{b:#ffc}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB '<Y>
               Case 67: tag_1$ = "{{c:RED}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB '<C> - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
               Case 65: tag_1$ = "{a:+": tag_2$ = "| URL}": GoSub selectionProcessSUB '<A>
               Case 87: tag_1$ = "{w:": tag_2$ = "}": GoSub selectionProcessSUB '<W>
               Case 72: tag_1$ = "{{h:": tag_2$ = "| HELP}}": GoSub selectionProcessSUB '<H> - class .hover CSS
        End Select
    ElseIf Shift = 6 Then 'Ctrl+Alt
        GoSub selectionIniSUB
        Select Case KeyCode
               Case 83:  '<S> - {{sub}} = 'substring - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) Ctrl+Alt+<s>
                    tag_1$ = "{{sub}}": tag_2$ = "{{/sub}}": GoSub selectionProcessSUB
               Case 82: tag_1$ = "{{vr}}": tag_2$ = "{{/vr}}": GoSub selectionProcessSUB '<R>
               Case 71: tag_1$ = "{{vg}}": tag_2$ = "{{/vg}}": GoSub selectionProcessSUB '<G>
               Case 66: tag_1$ = "{{vb}}": tag_2$ = "{{/vb}}": GoSub selectionProcessSUB '<B>
               Case 86: tag_1$ = "{{vv}}": tag_2$ = "{{/vv}}": GoSub selectionProcessSUB '<V>
               Case 89: tag_1$ = "{{vy}}": tag_2$ = "{{/vy}}": GoSub selectionProcessSUB '<Y>
        End Select
    ElseIf Shift = 7 Then 'Ctrl+Alt+Shift
        GoSub selectionIniSUB
        Select Case KeyCode
               Case 83:  '<S> - {{st}} = 'STRONG - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl+Alt+Shift+<s>
                    tag_1$ = "{{strong}}": tag_2$ = "{{/strong}}": GoSub selectionProcessSUB
        End Select
    ElseIf Shift = 3 Then 'Ctrl+Shift
        GoSub selectionIniSUB
        Select Case KeyCode
        Case 66:  '<B> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {{b:#FFFFaa}} TEXT {{/c}} - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            tag_1$ = "{{b:#FFFFaa}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB
        Case 67:  '<C> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {{b:#FFFFaa;c:RED}} TEXT {{/c}} - |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
            tag_1$ = "{{b:#FFFFaa;c:RED}}": tag_2$ = "{{/c}}": GoSub selectionProcessSUB
        Case 83:  '<S> - {{sup}} = 'superior - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)  Alt+<s> (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
            tag_1$ = "{{sup}}": tag_2$ = "{{/sup}}": GoSub selectionProcessSUB
        Case 50:  '<"> - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (adv |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            adv_txt$ = Right(Left(.value, nullif(.SelStart, 1, 2) + chr13shift), 1) & .SelText & Left(Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select), 1)
            If prsCount("""", db_(adv_txt)) >= 2 Then
                  .value = Left(.value, nullif(.SelStart, 1, 2) + chr13shift - 1) & Replace(adv_txt, """", "") & Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select + 1)
            Else: .value = Left(.value, .SelStart + chr13shift) & """" & .SelText & """" & Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select): End If
        Case 222:  '<'> - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <">)
            adv_txt$ = Right(Left(.value, nullif(.SelStart, 1, 2) + chr13shift), 1) & .SelText & Left(Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select), 1)
            If prsCount("'", db_(adv_txt)) >= 2 Then
                  .value = Left(.value, nullif(.SelStart, 1, 2) + chr13shift - 1) & Replace(adv_txt, "'", "") & Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select + 1)
            Else: .value = Left(.value, .SelStart + chr13shift) & "'" & .SelText & "'" & Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select): End If
        Case 106:  '<*> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|!) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (2x!) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    tag_1$ = "/*": tag_2$ = "*/": GoSub selectionProcessSUB '+ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case 109:  '<-> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "--"
            .value = Left(.value, .SelStart + chr13shift) & "-- " & _
                    Replace(.SelText, Chr(13), Chr(13) & "-- ") & Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select)
        Case 107:  '<+> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "--" (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            .value = Left(.value, .SelStart + chr13shift) & Replace(prsBeforeUp(Chr(13), .SelText), "-- ", "") & _
                    Replace(blank(Chr(13) & prsAfter(Chr(13), .SelText), "", Chr(13)), Chr(13) & "-- ", Chr(13)) & Mid(.value, .SelStart + .SelLength + 1 + chr13shift + chr13select):
        .SelStart = sSelStart: .SelLength = sSelLength + (Len(.value) - sLength) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End Select: Exit Sub '-------------------------------------------------------------------------------- SUB'|fffd|
selectionIniSUB: 'If .SelLength = 0 Then Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -> |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                If Right(.SelText, 1) = Chr(13) Then .SelLength = .SelLength - 1: 'dbg "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| EoL"
                       sSelStart = .SelStart: sSelLength = .SelLength: sLength = Len(.value) 'Saves
                Rem: |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| 6-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. .SelStart |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #13
                chr13shift = prsCount(Chr(13), Left(.value, .SelStart))
'                chr13select = prsCount(Chr(13), .SelText)
'                If .SelStart > 1 Then _
'                  If Mid(.Value, .SelStart + chr13shift, 1) = Chr(13) Then dbg (inc(chr13shift)): 'dbg "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
'                'If chr13select > 0 Then incon chr13shift, chr13select: dbg "multiline?"
'                'If Mid(.Value, sSelStart + sSelLength + 1, 1) = Chr(13) Then dec chr13shift: dbg "EoL"
'                'If sSelStart + sSelLength + chr13shift + chr13select - 1 = sLength Then inc chr13shift: dbg "EoF"
            Return
selectionProcessSUB:   If sLength& = 0 Then Exit Sub
      Select Case mode$
             Case "on_Line_Begining": l_b = 1 + posLast(Chr(13), Left(.value, .SelStart + chr13shift)): If l_b = 1 Then l_b = 0
                    If Mid(.value, l_b + 1, Len(tag_1$)) = tag_1$ Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                          .value = Left(.value, l_b) & Mid(.value, l_b + Len(tag_1$) + 1): incon sSelLength, Len(tag_1$): decon sSelStart, Len(tag_1$)
                    Else: .value = Left(.value, l_b) & tag_1$ & Mid(.value, l_b + 1): decon sSelLength, Len(tag_1$): incon sSelStart, Len(tag_1$)
                    End If
             Case Else: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (cnt1 + cnt2 = -1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                    If tag_1$ = "{{" Then If tag_2$ = "}}" Then simpleShellAdd = Left(dbg(.SelText), 2) <> "{{" Or Right(.SelText, 2) <> "}}"
                    If Not simpleShellAdd And sag(cnt1, zero(prsCount(tag_1$, .SelText), -1)) = sag(cnt2, prsCount(tag_2$, .SelText)) Then
                       If mode$ = "Ctrl + <Del>" And tag_1$ = "{{" And tag_2$ = "}}" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| {{}}-|fffd||fffd||fffd||fffd|
                          If Not hasIt(":", Replace(.SelText, "|", ":")) Then .SelText = clearFromTags("{{", "}}", .SelText)
                       ElseIf tag_1$ = "{{" And tag_2$ = "}}" Then '|fffd||fffd||fffd||fffd||fffd||fffd| Select-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                              If Left(dbg(.SelText), 2) = "{{" And Right(.SelText, 2) = "}}" Then .SelText = Mid(.SelText, 3, sSelLength - 4)
                       Else: .SelText = Replace(Replace(.SelText, tag_1$, ""), tag_2$, "") '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                       End If  ' = Left(.Value, .SelStart + chr13shift) & Replace(Replace(.SelText, tag_1$, ""), tag_2$, "") & Mid(.Value, .SelStart + .SelLength + 1 + chr13shift + chr13select)
                    ElseIf simpleShellAdd Or cnt1 + cnt2 = -1 Or tag_1$ = tag_2$ Then .SelText = tag_1$ & .SelText & tag_2$
                               ' = Left(.Value, .SelStart + chr13shift) & tag_1$ & .SelText & tag_2$ & Mid(.Value, .SelStart + .SelLength + 1 + chr13shift + chr13select)
                    End If
             End Select: .SelStart = Abs(sSelStart): .SelLength = sSelLength + (Len(.value) - sLength) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Return '-----------------------------------------------------------------------------------------
End If: End With: Exit Sub: End If '################################################ |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If KeyCode = 13 Then     'Enter
         KeyCode = 0 '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         With Me.Controls(IIf(lang = -1, "NoteBox", "TextBox" & FnERUs(lang) & "Def")): .SelText = Chr(13)
             'sSelStart = .SelStart: sNew = "test" & .SelText & "test": .SelText = sNew  'Chr(13)
             '.SelStart = sSelStart: .SelLength = Len(sNew)
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| 6-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. .SelStart |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #13
            ' sSelStart = .SelStart: chr13shift = prsCount(Chr(10), Left(.Value, .SelStart + 1))
''             EoL = chr13shift + dbgl(IIf(Mid(.Value, .SelStart + chr13shift + 1, 1) = Chr(13), 2, 0), .SelStart)
'             bop = Left(.Value, sSelStart + chr13shift): eop = Mid(.Value, sSelStart + chr13shift + 1) ' + chr13shift
'             '.SelStart = Len(bop): .SelLength = Len(eop): Exit Sub 'test
'             .Value = bop & Chr(13) & eop: .SelStart = sSelStart + 1
         End With
'        If lang And Shift = 4 Then 'c Alt - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'            Set MyData = New DataObject: On Error GoTo CBErrorHandler: With MyData
'                .GetFromClipboard: If .GetFormat(1) Then OldText = .GetText Else OldText = Null
'                .SetText "" & Chr(13) & "": .PutInClipboard: Me.Controls(IIf(lang = -1, "NoteBox", "TextBox" & FnERUs(lang) & "Def")).Paste
'                If Not IsNull(OldText) Then .SetText OldText: .PutInClipboard
'                                                                       End With
'        Else: Call CommandButton1_Click: If lang Then Me.Controls(IIf(lang = -1, "NoteBox", "TextBox" & FnERUs(lang) & "Def")).SetFocus:
'        End If:
  ElseIf KeyCode = 9 Then KeyCode = 0: Call ViewNote 'Tab
  ElseIf KeyCode = 27 Then KeyCode = 0: If IsWindow(SCSForm.help_hwnd) Then dispDestroyWindow SCSForm.help_hwnd: Exit Sub  '^22_17|Help (Ctrl+?)
                                        If FnFormIsLoaded("CATForm") Then Unload CATForm _
                                        Else: If checkTermChanges(True, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ", True, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?") Then Exit Sub Else Me.Hide: SCSForm.reParkW True: On Error GoTo CBErrorHandler _
                                             : AppActivate Application.Caption 'Escape    'Unload Me
  'CommandButton1.ControlTipText = "break" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If: Exit Sub
CBErrorHandler: db_ Err.Description:: Resume Next  'Set MyData = Nothing: Resume Next
End Sub

'********************************************************
Sub ComboBoxGExitCommon(general_row, wsnum)
If logging Then LogString ("in   ComboBoxGExitCommon (" & general_row & ", " & wsnum & ")")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| main-|fffd||fffd||fffd||fffd||fffd||fffd|
Dim id As String: id = Sheets(WS0).Cells(general_row, 1)
If CommandButton1.Caption = id Then _
    Call Clear_GId: MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"): GoTo quitL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not OptionButtonG.value Then Call SetGId(id)

    ToggleButton1.Caption = id '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|-|fffd| Shadow_forming(ID,rootID,en_sh,ru_sh,ua_sh) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    For i = 1 To 3
      t_group = FnGetMainGroup(i, id, g_term, root_is_group, g_abbrev)
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
      If g_abbrev = "" Then save_root = g_term _
                       Else save_root = g_term + " (" + g_abbrev + ")"
      Call SetComboText(i, save_root)
      If t_group <> "" Then root_shadow = t_group Else root_shadow = save_root '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd|

      If Right$(root_shadow, 1) <> "." Then 'root_is_group |fffd||fffd||fffd| Main record
        shadow_beginning = root_shadow
        If Not root_is_group Then Call SetGIdText(i, Shadow) _
                             Else Call SetGIdText(i, "") '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
      Else                                  'root_is_group = FALSE
        If g_abbrev = "" Then middle_part = g_term _
                         Else middle_part = g_abbrev
        shadow_beginning = Left$(root_shadow, Len(root_shadow) - 1) + "_" + middle_part
        Call SetGIdText(i, shadow_beginning) '(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
      End If
      If GetImageText(1) <> "" Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
        shadow_ending = GetAbb(i)
        If shadow_ending = "" Then shadow_ending = "_" + GetTerm(i) _
                              Else shadow_ending = "_" + shadow_ending
      Else: shadow_ending = "."
      End If
      Call SetGroup(i, shadow_beginning + shadow_ending): SetGIdText i, shadow_beginning + shadow_ending
      '___________________________________
    Next i: If Not Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Application.Goto Reference:="_" + _
                CStr(wsnum) + "_" + id, Scroll:=True 'ShowModal - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| false |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
quitL: If logging Then LogString ("out ComboBoxGExitCommon (" & general_row & ", " & wsnum & ")")
End Sub

'********************************************************
Sub ComboBoxGExitCommonPS(lang_row, wsnum)
If logging Then LogString ("in   ComboBoxGExitCommonPS (" & lang_row & ", " & wsnum & ")")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim id As String: id = Sheets(FnWSCase(wsnum)).Cells(lang_row, 1)
If CommandButton1.Caption = id Then _
    Call Clear_GId: MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"): GoTo quitL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If id Like CommandButton1.Caption & "_*" Then _
    Call Clear_GId: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.": GoTo quitL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If OptionButtonG.value Then OptionButtonS.value = True
    'Call Clear_GId: MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Links |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."): GoTo QuitL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| main |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    Call SetGId(id) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd|
    ToggleButton1.Caption = id '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    For i = 1 To 3
      t_group = FnGetMainGroup(i, id, g_term, root_is_group, g_abbrev)
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
      If g_abbrev = "" Then save_root = g_term _
                       Else save_root = g_term + " (" + g_abbrev + ")"
      Call SetComboText(i, save_root)
          Shadow = "": long_Shadow = "": pos = 0
          Do
            pos = InStr(pos + 1, id, "_")
            If pos = 0 Then pos = Len(id) + 1
            Call FnFarCell(i, Left$(id, pos - 1), far_row, far_WS)
            next1 = FnGetAbbrev(Sheets(FnWSCase(i)).Cells(far_row, 3), term) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If next1 = "" Then next1 = term Else sadd term, " (" + next1 + ")" '|fffd||fffd||fffd| long_Shadow
            Shadow = Shadow + next1: sadd long_Shadow, term '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If pos < Len(id) Then sadd Shadow, "_": sadd long_Shadow, "_"
          Loop Until pos >= Len(id)
          
          If Not root_is_group Then Call SetGIdText(i, Shadow) _
                               Else Call SetGIdText(i, "") '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)

          If GetImageText(i) <> "" And Shadow <> "" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If GetAbb(i) <> "" Then Call SetGroup(i, Shadow + "_" + GetAbb(i)): SetGIdText i, long_Shadow + "_" + GetAbb(i) _
                                   Else Call SetGroup(i, Shadow + "_" + GetTerm(i)): SetGIdText i, long_Shadow + "_" + GetTerm(i)
          ElseIf Shadow <> "" Then Call SetGroup(i, Shadow + "."): SetGIdText i, long_Shadow + ".": End If '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
          
      '___________________________________
    Next i: If Not Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Application.Goto Reference:="_" + _
                CStr(wsnum) + "_" + id, Scroll:=True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
quitL: If logging Then LogString ("out ComboBoxGExitCommonPS (" & lang_row & ", " & wsnum & ")")
End Sub

'********************************************************
Private Sub ComboBoxG_SortRowSource(lang)
With Me.Controls("ComboBox" & FnERUs(lang) & "G"): If .Style = fmStyleDropDownList Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd||fffd| RowSource |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Links)
If Me.Controls("Image" & lang).SpecialEffect = fmSpecialEffectFlat Then
    Select Case lang: Case 1: g_col = "!B2:B": Case 2: g_col = "!C2:C": Case 3: g_col = "!D2:D": End Select
    For i = 1 To 3: Me.Controls("ComboBox" & FnERUs(i) & "G").Style = fmStyleDropDownCombo: Next i   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call Uni_Sort_WS(Right(g_col, 1), 1): .Style = fmStyleDropDownList
    '.RowSource = WS0 + g_col + CStr(FnGetLastRow(0)):
End If: End With: End Sub

'*********************************************************************************************
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| *************************************************************************
'#############################################################################################
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Private Sub CommandButton1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then Unload Me: If SCSForm.isDoppel Then Application.Visible = False 'Doppel (Show |fffd||fffd||fffd| drag&drop ID |fffd| FindForm)
End Sub '|fffd||fffd||fffd| MouseDown |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| background-|fffd||fffd||fffd||fffd|

Private Sub CommandButton1_Click(): CommandButton1_Action: End Sub 'LM "EditForm_CommandButton1_Click"
                                    '********************************************************
                                    '*********************  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ************************
                                    '********************************************************
Private Sub CommandButton1_Action(Optional noHide As Boolean)

If logging Then LogString ("in   CommandButton1_Click")
If Not FnIsTrinity(ActiveSheet.name) Then Call MoveToID(2, CommandButton1.Caption, 3)

If FnFormIsLoaded("CATForm") Then Call CATForm.CatKeyDown(13) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Call unlockWB: 'flg_InWork = True - |fffd||fffd||fffd||fffd||fffd||fffd| smartfreezing
Call NoSup
Dim i As Integer '4 local iterations

With EditForm: LP 0
Rem /*|fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|*/---------------------------->
 Rem <|fffd||fffd||fffd||fffd||fffd||fffd|>
    .TextBoxEnTerm = noDblSpace(Trim(.TextBoxEnTerm)): .TextBoxRuTerm = noDblSpace(Trim(.TextBoxRuTerm)): .TextBoxUaTerm = noDblSpace(Trim(.TextBoxUaTerm))
    If .TextBoxEnTerm.value = "" Or .TextBoxRuTerm.value = "" Or .TextBoxUaTerm.value = "" Then Call CB_fastnamesfilling_Click
    If .TextBoxEnTerm.value = "" Then Exit Sub
 Rem <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>
    If .TextBoxCat.value = "" And _
         Not (ActiveSheet.name = WSI Or .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
         Call View_Category_Selector '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|1
         If .TextBoxCat.value = "" Then Exit Sub
    End If
 Rem <|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (SUB)>
    If .OptionButtonS.value And _
      (.TextBoxEnGId.Text = "" Or .ComboBoxEnG.Text = "") Then ' |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GId(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?)
      Exit Sub
      '.OptionButtonG.Value = True '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd| "General" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      'Call OptionButtonG_AfterUpdate
    End If: LP 1
 Rem <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|>                                      'Ctrl+Enter |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Chr(13)+Chr(10)
    If TagBox.Text <> "" Then
                      tags$ = Trim(Replace(TagBox.Text, Chr(13), ""))
                      While Left$(tags$, 1) = Chr(10): tags$ = LTrim(Right(tags$, Len(tags$) - 1)): Wend
                      While Right$(tags$, 1) = Chr(10): tags$ = RTrim(Left$(tags$, Len(tags$) - 1)): Wend
                      While hasIt("  ", tags$): tags$ = Replace(tags$, "  ", " "): Wend
                      While hasIt(Chr(10) & Chr(10), tags$): tags$ = Replace(tags$, Chr(10) & Chr(10), Chr(10)): Wend
                      tags$ = Replace(Replace(tags$, " " & Chr(10), Chr(10)), Chr(10) & " ", Chr(10))
                      'MsgBox tags$ & " " & Asc(Left$(tags$, 1)) & " " & Asc(Chr(10)): Exit Sub
    End If
    If tags$ <> "" Then
      new_tags$ = "[" & Replace(tags$, Chr(10), "][") & "]": add_tags$ = new_tags$
      old_tags$ = FnGetTxtFromID$(CommandButton1.Caption, 5, 5)
      For i = 1 To prsCount("[", old_tags$): add_tags$ = Replace(add_tags$, "[" & prsBetween|fffd|(i, "[", "]", old_tags$) & "]", "", , , vbTextCompare): Next i
      If add_tags$ <> "" Then
        Dim tRange As Range: Set tRange = Sheets(wsLog).Range("E:E")
        For i = 1 To prsCount("[", add_tags$): find_text = prsBetween|fffd|(i, "[", "]", add_tags$)
          Set c = tRange.find(What:="[" & find_text & "]", LookIn:=xlValues, LookAt:=xlPart, MatchCase:=False)
          If Not c Is Nothing Then MsgBox "|fffd||fffd||fffd| <" & find_text & "> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": _
            Application.Goto Reference:="_2_" & Sheets(wsLog).Cells(c.row, idcol), Scroll:=True: Set c = Nothing: Set tRange = Nothing: Exit Sub
      Next i: Set c = Nothing: Set tRange = Nothing
      Else: tags$ = "": End If '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
'      Set tRange = Sheets(wsLog).Range("E:E")
'        Set c = tRange.Find(What:="[" & find_text & "]", LookIn:=xlValues, LookAt:=xl, MatchCase:=False)
'      If Not c Is Nothing Then FrameP.Visible = True: FrameP.Image9.Visible = True: reSize: _
'        Application.Goto Reference:="_2_" & Sheets(wsLog).Cells(c.row, idcol), Scroll:=True: GoTo extL
'=============================================================================
flg_InWork = True
'<__________________________________________________________
Rem |fffd||fffd||fffd||fffd||fffd|
 Rem' /* |fffd||fffd||fffd||fffd| Logic */
    Dim logic As Boolean: logic = .ToggleButton1.value
 Rem'/* |fffd||fffd||fffd||fffd| Coding */
    Dim Coding As Boolean: Coding = FnIsCoding(.TextBoxCat.Text)
'_________________________________________________________
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim T2 As CFTerm: Set T2 = New CFTerm: Call T2.InitializeByForm
Dim cs As New CServ: If T2.oldID <> "" Then cs.Initialize T2.oldID
'<|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_____________________________________
LP 2: If Not T2.fUpdated And .Caption <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then GoTo quitL
'_________________________________________________________

Rem /* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| */
'---------------------------------------------------------
  If .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    Rem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If T2.bound_str <> "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & T2.bound_str: .HideMe: GoTo exitL
                                                                                          cs.FullDelete: .HideMe: GoTo exitL: End If '+CServ+
'      '|fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"---------------------------> 'MsgBox "/* |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| */" ': GoTo quitL
'      For i = wsGen To wsABC:
'          If CBool(T2.row(eru(i))) Then
'              If i <> wsABC Then Workbooks("MAIN.XLSB").Names("_" + CStr(eru(i)) + "_" + T2.oldID).Delete
'              Sheets(i).rows(T2.row(eru(i))).Delete '<--
'          End If: Next i
'      'Call FnChangeTermID(T2.oldID, "") 'old
'      LogIDDelete T2.oldID: servCompactRootIDs T2.oldID: 'reID 1 |fffd||fffd||fffd|
'      '<-----------------------------------------------
'    On Error Resume Next '4 mainRoots
'    Cells(FnGetRowFromID(T2.GId, FnWSNum(ActiveSheet.name)), termcol).Activate: On Error GoTo 0: .Hide: GoTo exitL: End If
    
End With '<-------------------------------- |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd|

'TransferRecordTry FLG (Or FnAutoMode |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
     If T2.oldID = T2.id Then Transfer_flg = 0 _
   Else If T2.oldID = "" Then Transfer_flg = 1 Else Transfer_flg = 2 '0-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|; 1-insert new; 2-transfer
    
If Transfer_flg > 0 Then
    '_________________________________________________________
    Rem '/* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| */
    '---------------------------------------------------------
    Dim old_rows&(3): For i = 1 To 3:
      If T2.Gid = "" Then T2.row(i) = FnGetLastRow(i) + 1 Else T2.row(i) = FnGetRowFromID(T2.Gid, i) + 1
      With Sheets(Index(i)): .rows(T2.row(i)).Hidden = False: .rows(T2.row(i)).Insert  '|fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If Transfer_flg = 2 Then cv = .Columns(2).Hidden: old_rows&(i) = sag(old_row&, FnGetRowFromID(T2.oldID, i)): _
                                        .Columns(2).Hidden = False: .rows(old_row).Cut Destination:=.rows(T2.row(i)): _
                                        .Columns(2).Hidden = cv: .rows(old_row).Delete: _
                                          If T2.row(i) > old_row Then T2.row(i) = T2.row(i) - 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| row (FnGetRowFromID(T2.oldID, i))
                                        'Set_BookMark_on(.index, ActiveCell.row, FnGetPrefix(Null) & id)
      End With
    Next i: If Transfer_flg = 1 Then T2.inserted = True: If T2.isGen Then T2.rowG = FnGetLastRow(0) + 1
End If
'|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| Update)
   If CBool(T2.rowG) And (Not T2.isGen) Then
      Workbooks("MAIN.XLSB").Names("_0_" + Sheets(wsGen).Cells(T2.rowG, 1)).Delete
      Sheets(wsGen).rows(T2.rowG).Delete: T2.rowG = 0: End If  '<--
   If CBool(T2.rowA) And (T2.ABC(1) = "" And T2.ABC(2) = "" And T2.ABC(3) = "") Then
      Sheets(wsABC).rows(T2.rowA).Delete: T2.rowA = 0: End If  '<--

T2.rowA = FnGetRowFromID(T2.oldID, eru(wsABC))
If Not CBool(T2.rowG) And T2.isGen Then T2.row(0) = FnGetLastRow(0) + 1
If Not CBool(T2.rowA) And (T2.ABC(1) <> "" Or T2.ABC(2) <> "" Or T2.ABC(3) <> "") Then T2.row(4) = FnGetLastRow(4) + 1
If Not CBool(T2.row(1)) Then MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| " & T2.id & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": GoTo quitL
LP 3 '_________________________________________________________
Rem /* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| */
                        T2.UpdateRecord                 'Font COLORS (not isGen)
'_________________________________________________________
quitL: If Not logic Then LP 51: GoTo passLogicL Else LP 52
'_________________________________________________________
Rem |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim postFlg As Boolean: UpdateRowFormatting T2.id: postFlg = True
'-------------------
Rem '|fffd||fffd||fffd||fffd||fffd||fffd| (LOGIC)/--------------------------------------
'-----------------
                        UpdateTermFormatting T2, Coding 'NO COLORS!
'-----------------------
Rem 'Definition (LOGIC)/--------------------------------------
'---------------------                                  'Font COLOR Def ONLY
        For i = 1 To 3: UpdateDefinitionFormatting Sheets(Index(i)).Cells(T2.row(i), defcol), i, Coding: Next i:
'_________________________________________________________
passLogicL: 'If caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then GoTo passRootL 'todo: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cat |fffd||fffd||fffd||fffd||fffd|
'---------------------------------------------------------
Rem '/* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ROOTS, PDB, SUBTerms */
    If Caption <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      If T2.id = T2.oldID Then If T2.Gid <> "" Then freeID$ = FnGenerateID(Null, T2.Gid): _
                               If FnGetSIDnumber%(T2.id) > FnGetSIDnumber%(freeID) Then T2.id = freeID: postFlg = False '2press
      If T2.id <> T2.oldID Then      '+cServ+ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| oldId
        '180402 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| reSortByGroup
        If Transfer_flg = 2 And FnIsRoot(T2.oldID) Then 'MoveRecordRow  T2.row(i) - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, old_rows(i) - |fffd||fffd||fffd||fffd||fffd||fffd|, T2.oldID |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          For i = 1 To 3: With Sheets(Index(i)): sub_num% = 0: old_row& = old_rows(i) '+ 1 'const |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
            If i = 2 Then dbg_ T2.row(i), sub_num%, old_row&, T2.oldID & "->" & T2.id, .Cells(old_row&, idcol)
            While FnIsRoot_Of(T2.oldID, sag(sid, .Cells(old_row&, idcol))): MoveRecordRow i, T2.oldID, T2.id, , old_row&, T2.row(i) + inc(sub_num%)
                                                                            If old_row& > T2.row(i) + sub_num% Then inc old_row& Else dec sub_num% 'const
            add2file "!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! " & sid & " -> " & T2.id: Wend: End With: Next i: End If
        was_cat$ = FnGetCurrentCat(): Call NoCat: On Error GoTo XerrL: Dim try_cnt%
retryL: If try_cnt% < 10 Then cs.reID2 T2.id, postFlg 'POSTprocessing = UpdateRoot + SwitchKey + UpdateGroupShadows etc.
        On Error GoTo 0                          '!!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| cs.reID2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| <F5> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| On error resume next?)
                                                 'h8g - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'      If T2.GId <> "" And T2.GId <> T2.oldGId Then Call UpdateRoot(T2.GId, FnIsRoot(T2.GId), T2.cat) '|fffd||fffd||fffd||fffd||fffd| 'todo: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cat |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| UpdateRoot
'      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'      '(|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)
'      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
'      If T2.oldGId <> "" And T2.GId <> T2.oldGId Then Call SwitchKey(T2.oldGId, _
'                CBool(FnGroupIsNotEmpty(1, T2.oldGId, True, False, 0)), True, "") '|fffd||fffd||fffd||fffd||fffd||fffd|
'      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'      If T2.sID <> "" And T2.fUpdatedPart("s") Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (AfterChangeIDOnThis(oldID, newID))
'
'            Call UpdateGroupShadows(T2.id, T2.oldID, T2.oldshad(1), FnClearFromSpec$(T2.shad(1)), _
'                                                     T2.oldshad(2), FnClearFromSpec$(T2.shad(2)), _
'                                                     T2.oldshad(3), FnClearFromSpec$(T2.shad(3)))
        Call svrFilterFix: ReCat was_cat
      ElseIf T2.fUpdatedPart("t") Then cs.reID2 T2.id, postFlg '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| justShadowsFlg
                                      'TextBoxGIdExit 1, True  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      End If
    End If: LP 9
'_________________________________________________________
Rem '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
passRootL: If Me.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or TextBoxCat.ControlTipText = "import" Then
'____/__________/
Rem /* Import */
      TextBoxCat.ControlTipText = ""
      Sheets(WSI).Activate: Sheets(WSI).Cells(2, 1).EntireRow.Delete
      Unload EditForm: Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Call View_Term
    'ElseIf Me.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Unload Me '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else: If Me.Caption <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And Not noHide Then HideMe _
                                      Else: CommandButton1.Caption = Cells(ActiveCell.row, 1) 'new ID
          If CommandButton1.Caption Like ("ID_*") Then
            '<CP> TEMP 'And CommandButton1.ControlTipText <> "Auto"
            Set c = FnFindCell(ActiveSheet.Columns("A:A"), "ID_*", xlWhole)
            If c.row <> 1 Then Cells(c.row, 3).Activate: Set c = Nothing
    End If: End If: LP 10
'_________________________________________________________
Rem '|fffd||fffd||fffd||fffd||fffd||fffd|
Call SUp
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim r&: On Error Resume Next '~ID |fffd||fffd||fffd| GId |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If T2.Gid <> "" And FnIsTrinity(ActiveSheet.name) Then _
   If sag(r&, FnGetRowFromID(T2.Gid, eru(ActiveSheet.Index))) > 0 Then ActiveSheet.Cells(r&, termcol).Activate 'Caption <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And
If FnIsTrinity(ActiveSheet.name) Then _
   If sag(r&, FnGetRowFromID(T2.id, eru(ActiveSheet.Index))) > 0 Then ActiveSheet.Cvells(r&, termcol).Activate
On Error GoTo 0
Call LockWB: If logging Then LogString ("out CommandButton1_Click")
If Me.Visible Then On Error Resume Next: Me.TextBoxEnTerm.SetFocus '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?

Me.CommandButton1.Caption = T2.id '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
'save Notes & Tags
If MultiPageN.Visible Then If NoteBox.Text = "" Then fileDelete ThisWorkbook.path & "\PDB\" & CommandButton1.Caption & "\notes.nt" _
                                                Else save2file NoteBox.Text, ThisWorkbook.path & "\PDB\" & CommandButton1.Caption & "\notes.nt"
If tags$ <> "" Or MultiPageN.Visible And MultiPageN.value = 1 Then FnSetTxtWithID CommandButton1.Caption, 5, 5, new_tags$
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| StatForm
    If FnFormIsLoaded("StatForm") Then _
      If StatForm.MultiPage1.SelectedItem.Caption = "Item" Then _
        If StatForm.obCFTerm Then StatForm.tbxID = CommandButton1.Caption: _
          If StatForm.TBStore Then Call StatForm.TBStore_Click Else StatForm.TBStore = True
'Auto|id1|idN| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| View_Term)
If FnAutoMode Then
Dim new_rows&(3): If Transfer_flg = 2 Then For i = 1 To 3: new_rows&(i) = T2.row(i): Next i '|fffd||fffd||fffd| MoveRecordRow
    'MsgBox T2.GId & "^" & FnGenerateID$(1, T2.GId): GoTo exitL
    id_cnt% = prsCount("|", Mid(CommandButton1.ControlTipText, 5)) - 1
    'Dim cs As New CServ:
                         For ides% = 1 To id_cnt%: id_str$ = Mid(CommandButton1.ControlTipText, 5) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| reID2
                                                   next_id$ = prsBetween|fffd|(ides%, "|", "|", id_str$): 'db_ id_str$
                            If exists("_1_" & next_id$) Then
                              '180402 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| reSortByGroup (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                                If Transfer_flg = 2 Then 'MoveRecordRow  T2.row(i) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, new_rows&(i) - |fffd||fffd||fffd||fffd||fffd|, T2.oldID |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                  For i = 1 To 3: With Sheets(Index(i)): new_rows&(i) = new_rows&(i) + 1: old_row& = FnGetRowFromID(next_id$, i) 'reID?
                                    MoveRecordRow i, next_id$, T2.id, , old_row&, new_rows&(i): If old_row& < new_rows&(i) Then new_rows&(i) = new_rows&(i) - 1 'const
                                End With: Next i: End If
                              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| id |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                              new_id$ = FnGenerateID$(1, T2.Gid): new_rootID = FnGetRootID(new_id$): next_rootID = FnGetRootID(next_id$)
                              If new_rootID = next_rootID Then _
                                If CInt(Replace(new_id$, new_rootID & "_", "")) > _
                                   CInt(Replace(next_id$, next_rootID & "_", "")) Then new_id$ = ""  'pass-|fffd||fffd||fffd||fffd| (justShadows)
                              'If new_id$ <> "" Then cs.Initialize next_id$: cs.reID2 new_id$: '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| justShadows
                              cs.Initialize next_id$: T2.Gid = blank(cs.reID2(blank(new_id$, next_id$)), T2.Gid) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                              If getCat$(blank(new_id$, next_id$)) = "" Then setCat next_id$, T2.cat '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                              add2file "!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! " & next_id$ & " -> " & new_id$
                            End If
                         Next ides%: Set cs = Nothing: EditForm.CommandButton1.ControlTipText = ""   'Auto OFF
                         'If new_id$ <> "" Then If Not exists("_1_" & T2.id) Then T2.id = new_id$ -- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| j9o |fffd|.|fffd|. |fffd||fffd| FnAutoMode
End If
'_________________________________________________________
exitL: |fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sag(id$, T2.id)  '|fffd||fffd||fffd| j9o: T2.id |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. 33_10_10 -> 33_10_11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 33_10_10_1 (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
       Set T2 = Nothing '  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
       Set cs = Nothing '- |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
With SCSForm: Open_Browser_W Me.CommandButton1.Caption 'http |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
             'If .r_hwnd > 0 Then If prsBefore("|", getwndcaption$(.r_hwnd&)) = "^" & Me.CommandButton1.Caption _
                             Then Open_Browser_W Me.CommandButton1.Caption 'http |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
             'If twoWindows Then If Windows("_").ActiveSheet.name = "import_" Then _
                                SetActiveWindow& FindWindow(vbNullString, Application.Caption)
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For lang = 1 To 3: If GetValidShadow(lang, id$) <> FnGetTxtFromID$(id$, lang, shadcol%) Then Msg 1
    Next '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - 190924
         '|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)?
End With: flg_InWork = False: Exit Sub
XerrL: inc try_cnt%: GoTo retryL: End Sub
                                      '********************************************************
                                      '*********************  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ************************
                                      '********************************************************

Sub focusMe(): setFocusOnForm Me.name, True: On Error Resume Next: TextBoxRuTerm.SetFocus: TextBoxEnTerm.SetFocus: End Sub
Sub HideMe(): Hide: SCSForm.reParkW True: AppActivate Application.Caption: End Sub

'#############################################################################################
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ***********************************************************
'*********************************************************************************************

Private Sub UserFormEvent_1() 'Refill
If logging Then LogString ("in   UserFormEvent_1")

If TextBoxEnTerm.Enabled And TextBoxEnTerm.Visible Then _
  On Error GoTo BCErrorHandler: TextBoxEnTerm.SetFocus ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| gID |fffd||fffd||fffd| "Add"
 
If ActiveSheet.name = WSI Then
'-------------------------------------------------------------
  Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. CloneHunter)
  Do Until Cells(2, 1).Interior.ColorIndex = xlNone '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Sheets(WSI).Cells(2, 1).EntireRow.Delete
  Loop
  If Sheets(WSI).Cells(2, 1) <> "" And _
     Sheets(WSI).Cells(2, 2) <> "" And _
     Sheets(WSI).Cells(2, 3) <> "" Then
   '|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ID |fffd| |fffd||fffd||fffd||fffd| "dest(ination)" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   Dim id As String: id = Trim(Sheets(WSI).Cells(2, 7))
   If id <> "" And id <> "#" And GetAllRows(ge_row, en_row, ru_row, ua_row, ab_row, id, False) Then
     Unload EditForm
     needForm = True
     If FnIsRoot(id) Then
       If Sheets(WS1).Cells(en_row, 3) = Sheets(WSI).Cells(2, 1) And _
          Sheets(WS2).Cells(ru_row, 3) = Sheets(WSI).Cells(2, 2) And _
          Sheets(WS3).Cells(ua_row, 3) = Sheets(WSI).Cells(2, 3) Then _
         needForm = False '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
     ElseIf FnGetAbbrev(Sheets(WS1).Cells(en_row, 3), term) = _
            FnGetAbbrev(Sheets(WSI).Cells(2, 1), term) And _
            FnGetAbbrev(Sheets(WS2).Cells(ru_row, 3), term) = _
            FnGetAbbrev(Sheets(WSI).Cells(2, 2), term) And _
            FnGetAbbrev(Sheets(WS3).Cells(ua_row, 3), term) = _
            FnGetAbbrev(Sheets(WSI).Cells(2, 3), term) Then _
       needForm = False
     End If
     If needForm Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm
       Sheets(WS1).Activate
       Cells(en_row, 3).Activate
       TextBoxCat.ControlTipText = "import" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. |fffd||fffd||fffd||fffd|)
       Call View_Edit
     Else: Sheets(WS1).Cells(en_row, 3).value = Sheets(WSI).Cells(2, 1)
           Sheets(WS2).Cells(ru_row, 3).value = Sheets(WSI).Cells(2, 2)
           Sheets(WS3).Cells(ua_row, 3).value = Sheets(WSI).Cells(2, 3)
           Sheets(WS1).Cells(en_row, 4).value = Sheets(WSI).Cells(2, 4)
           Sheets(WS2).Cells(ru_row, 4).value = Sheets(WSI).Cells(2, 5)
           Sheets(WS3).Cells(ua_row, 4).value = Sheets(WSI).Cells(2, 6)
     End If
   Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call SetGId("ID")
    If id <> "#" Then TextBoxCat.value = Sheets(WSI).Cells(2, 7)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'cat_id = Trim(Sheets(WSI).Cells(2, 7))
    'If cat_id <> "" And Len(cat_id) >= 3 Then _
      TextBoxCat.Value = FnGetCatStr(cat_id)
    For j = 1 To 3
      abbr = FnGetAbbrev(Sheets(WSI).Cells(2, j), term)
      Call SetTerm(j, term)
      Call SetAbb(j, abbr)
      Call SetDef(j, FnGetText(Sheets(WSI).Cells(2, 3 + j)))
      Call SetGroup(j, "...")
    Next j
    Repaint
    Call CommandButton1_Click
   End If
  Else:
    If Sheets(WSI).Cells(2, 1) <> "" Or _
       Sheets(WSI).Cells(2, 2) <> "" Or _
       Sheets(WSI).Cells(2, 3) <> "" Then
      MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.")
    Else: 'MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        If ActiveCell.row > 102 Then Cells(ActiveCell.row - 100, 1).Activate
        If Sheets(WSI).Cells(2, 4) = "" And _
           Sheets(WSI).Cells(2, 5) = "" And _
           Sheets(WSI).Cells(2, 6) = "" Then _
          Sheets(WSI).Cells(2, 1).EntireRow.Delete
        If Sheets(WSI).Cells(102, 1) <> "" Then _
          Sheets(WSI).Cells(102, 1).EntireRow.Insert '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| 100 |fffd||fffd||fffd||fffd|.
    End If
    Unload EditForm
    last_used_ID = 0
  End If
'-------------------------------------------------------------
ElseIf Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then                                 'r03+
      'CB_fastnamesfilling.Visible = True
ElseIf Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then 'And ShowModal Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If GetGroup(FnWSNum(ActiveSheet.name)) <> "" Then _
        Call ComboBoxGExit(FnWSNum(ActiveSheet.name)) '<--|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Else: CB_fastnamesfilling.Visible = False: End If '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-------------------------------------------------------------
If TextBoxCat.ControlTipText = "import" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For j = 1 To 3
    abbr = FnGetAbbrev(Sheets(WSI).Cells(2, j), term)
    Call SetTerm(j, term)
    Call SetAbb(j, abbr)
    Call SetDef(j, FnGetText(Sheets(WSI).Cells(2, 3 + j)))
  Next j
  Repaint
  Call CommandButton1_Click
End If
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| cServ (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
'If FnAutoMode Then 'Auto|id1|idN| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    MsgBox "Auto": Exit Sub
'    Me.Repaint: Call CommandButton1_Click
'End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| NoteBox.Text
'Set MyData = New DataObject
'    MyData.GetFromClipboard
'    If MyData.GetFormat(1) = True Then _
'      NoteBox.Text = Replace(MyData.GetText, vbTab, " ")
'Set MyData = Nothing
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

If logging Then LogString ("out UserFormEvent_1")
Exit Sub
BCErrorHandler: Frame1.Visible = True: Frame2.Visible = True: Frame3.Visible = True: Call View_Ini(10): Resume Next
End Sub

'#############################################################################################
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'#############################################################################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| Activate), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| Visible
Private Sub UserForm_Layout()
LM "Form_Layout"
End Sub

'(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Private Sub UserForm_Deactivate()
LM "Form_Deactivate"
End Sub

'(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Activate |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| Visible)
Private Sub UserForm_Initialize(): LM "EditForm_Ini" '|fffd||fffd||fffd||fffd||fffd||fffd| Ribbon?
'If Not Visible Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Application.CommandBars(Me.name).Delete
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TextBox
    With Application.CommandBars.Add(name:=Me.name, Position:=msoBarPopup)
         .Controls.Add(id:=21).OnAction = "EditFormTextCut"
         .Controls.Add(id:=19).OnAction = "EditFormTextCopy"
         .Controls.Add(id:=22).OnAction = "EditFormTextPaste"
    End With
End Sub
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TextBox
Private Sub TextBox_KeyButton(Button As Integer): If Button = vbKeyRButton Then Application.CommandBars(Me.name).ShowPopup
End Sub

Private Sub TextBoxEnDef_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): TextBox_KeyButton Button: End Sub
Private Sub TextBoxRuDef_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): TextBox_KeyButton Button: End Sub
Private Sub TextBoxUaDef_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): TextBox_KeyButton Button: End Sub

' |fffd||fffd||fffd||fffd||fffd| Initialize(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
Private Sub UserForm_Activate()
LM "Form_Activate"
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
LM "Form_QueryClose"
If EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Exit Sub 'Or EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Cancel = checkTermChanges(True, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ", False, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?")
'Cancel = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ?", vbYesNo, "") = vbNo
End Sub

Private Sub UserForm_RemoveControl(ByVal Control As MSForms.Control)
LM "Form_RemoveControl"
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Top, .Left |fffd| |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| _Layout)
Private Sub UserForm_Resize()
LM "Form_Resize"
End Sub

'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| object.Scroll <> 0 (|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| 2-x |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| CommandButton
Private Sub UserForm_Scroll(ByVal ActionX As MSForms.fmScrollAction, ByVal ActionY As MSForms.fmScrollAction, ByVal RequestDx As Single, ByVal RequestDy As Single, ByVal ActualDx As MSForms.ReturnSingle, ByVal ActualDy As MSForms.ReturnSingle)
LM "Form_Scroll"
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_Terminate(): On Error Resume Next: Application.CommandBars(Me.name).Delete: On Error GoTo 0
                                                        LM "Form_Terminate": Call SUp: LockWB: SCSForm.reParkW True: End Sub

'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| object.Zoom, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|. |fffd| View_Ini
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm |fffd| View_Term
Private Sub UserForm_Zoom(Percent As Integer) ': Exit Sub    'Err: "Out of stack space"
LM "Form_Zoom": If Not Visible Then wcaption = Me.Caption: set_Transparent
'LM "Form_Zoom": If Visible Then Exit Sub Else wCaption = Me.Caption: set_Transparent 'Transparent on frstTime
'aStyle = GetWindowLong(hwnd&, GWL_EXSTYLE): If aStyle = (aStyle Or WS_EX_LAYERED) Then Exit Sub
If ToggleButton1.Caption <> TextBoxRuGId Then Call UserFormEvent_1 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If Visible Then ** Else Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Private Sub UserForm_AddControl(ByVal Control As MSForms.Control)
LM "Form_AddControl"
End Sub

Private Sub UserForm_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal State As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
LM "Form_BeforeDragOver"
End Sub

Private Sub UserForm_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
LM "Form_BeforeDropOrPaste"
End Sub

Private Sub UserForm_Click()
LM "Form_Click"
End Sub

Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
LM "Form_DblClick"
End Sub

Private Sub UserForm_Error(ByVal Number As Integer, ByVal Description As MSForms.ReturnString, ByVal SCode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, ByVal CancelDisplay As MSForms.ReturnBoolean)
LM "Form_Error"
End Sub

'1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|         |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|    NoteTab(on|off) close
'-                  Form_Resize     Form_Resize     Form_QueryClose
'-                  Form_Resize     Form_Layout?    Form_Terminate
'Form_Initialize    -
'Form_Resize        +
'Form_Zoom          +
'Form_Resize        +
'Form_Resize        -
'Form_Layout        +
'Form_Activate      -
Attribute VB_Name = "EventClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''''''''''''''''''''''''''''
'Declare the Object Variable

'Before you can write procedures for the events of the Application object, you must create _
a new class module and declare an object of type Application with events. For example, assume that _
a new class module is created and called EventClass. The new class module contains the following code.

Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1
Private WithEvents App1 As Application
Attribute App1.VB_VarHelpID = -1
''''''''''''''''''''''''''''
'Write the Event Procedures'

'After the new object has been declared with events, it appears in the Object list in the class module, _
and you can write event procedures for the new object. (When you select the new object in the Object list, _
the valid events for that object are listed in the Procedure list.) Select an event from the Procedure list; _
an empty procedure is added to the class module.

Private Sub App_WindowActivate(ByVal wb As Workbook, ByVal Wn As Window)
'MsgBox "App_WindowActivate" - |fffd||fffd||fffd| App_WorkbookOpen - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

'Minimized |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub App_WorkbookBeforeSave(ByVal wb As Workbook, ByVal SaveAsUI As Boolean, Cancel As Boolean)
'Application.VBE.MainWindow.WindowState = vbext_ws_Minimize: App.WindowState = xlMinimized:
End Sub
'Private Sub App_WorkbookAfterSave(ByVal wb As Workbook, ByVal Success As Boolean) '- |fffd| [P] |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| App |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub App_WorkbookOpen(ByVal wb As Workbook): If isFullPartOf(UCase(wb.name), "MAC.XLA|MAIN.XLSB", "|") Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If wb.Sheets(1).name = "Links" Then Exit Sub Else f_name = wb.FullName: wb.Close SaveChanges:=False
                                                  If FnFormIsLoaded("SCSForm") Then SCSForm.freeze 'antiUnFreeze fix
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
On Error GoTo exitL: Set App1 = New Excel.Application: App1.Workbooks.Open f_name: 'App1.ActivateMicrosoftApp
                                                       App1.Visible = True:        'App1.DisplayFullScreen = True
On Error Resume Next: If SCSForm.matrix Then SCSForm.Manager FindWindow(vbNullString, App1.Caption), True, Shift = 3 _
                                        Else SCSForm.SetRT "5", FindWindow(vbNullString, App1.Caption): _
                                             BringWindowToTop& FindWindow(vbNullString, App1.Caption)
exitL: If SCSForm.isDoppel Or SCSForm.LFixed Then Application.Visible = False 'Doppel
       Set App1 = Nothing: SCSForm.focusMe: End Sub
Attribute VB_Name = "FileSearch"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim pLookIn As String
Dim pSearchSubFolders As Boolean
Dim pFileName As String
Public FoundFiles As New Collection
        
Public Property Get LookIn() As String
    LookIn = pLookIn
End Property
Public Property Let LookIn(value As String)
    pLookIn = value
End Property
Public Property Get SearchSubFolders() As Boolean
    SearchSubFolders = pSearchSubFolders
End Property
Public Property Let SearchSubFolders(value As Boolean)
    pSearchSubFolders = value
End Property
Public Property Get FileName() As String
    FileName = pFileName
End Property
Public Property Let FileName(value As String)
    pFileName = value
End Property
Public Function Execute() As Long
        
        Dim sLookIn As String
        Dim sDirName As String
        Dim sSubDir As String
        Dim sFileName As String
        Dim sFullPath As String
        Dim sAllPaths() As String
        Dim x As Integer
        Dim fF As FilesFound
        Dim sf As SubFolder
        
            On Error Resume Next
            
            Set fF = New FilesFound
            sLookIn = LookIn
            sDirName = dir(sLookIn, vbDirectory)
            sFileName = dir(sLookIn & "\", vbNormal)
            Do Until Len(sFileName) = 0
                If sFileName Like FileName Then
                    fF.AddFile sLookIn, sFileName
                    FoundFiles.Add (fF.FoundFileFullName)
                End If
                sFileName = dir
            Loop
            
            If SearchSubFolders Then
                Set sf = New SubFolder
                With sf
                    .ParentPath = sLookIn
                    If .GetList > 0 Then
                        For i = 1 To .FolderList.Count
                            sSubDir = .FolderList(i)
                            sFileName = dir(sSubDir & "\", vbNormal)
                            Do Until Len(sFileName) = 0
                                If sFileName Like FileName Then
                                    fF.AddFile sSubDir, sFileName
                                    FoundFiles.Add (fF.FoundFileFullName)
                                End If
                                sFileName = dir
                            Loop
                        Next
                    End If
                End With
            End If
    
    Execute = FoundFiles.Count
    
End Function
Public Sub NewSearch()
    FileName = ""
    SearchSubFolders = False
    LookIn = ""
    Set FoundFiles = Nothing
    
End Sub
Attribute VB_Name = "FilesFound"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public FoundFileFullName As String
Public Function AddFile(path As String, FileName As String)
    FoundFileFullName = path & "\" & FileName
End Function
Attribute VB_Name = "FindForm"
Attribute VB_Base = "0{762B41CE-1639-4830-8B05-34FD66C93592}{0E218A93-BE36-4609-8DFC-48BABDD6AEB8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'****************************************************
'* FindForm
'****************************************************
Option Explicit 'force explicit declaration of all variables in that module.

Private Const bord_sz = 3, to_float = 4, white_cl = &H80000003  '&H80000013 - |fffd||fffd||fffd| XP
Public hWnd&, aimed As Boolean, me_hwnd&, nxt_pos% '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
Public def_color&, sensor_fs_Flg As Boolean, cMode$ '|fffd||fffd|. setMode
Private psdCtrlFlg, last_dir As Boolean, clrs$(6, 2) '|fffd||fffd||fffd| HTMsearch

Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Const
Private Sub iniClrs() '#E5ECEB |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| lightGRAY, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http://olocoder.ru/generator.html
                            clrs(1, 1) = "#FFFFaa": clrs(1, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                            clrs(2, 1) = "#C8FB62": clrs(2, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            clrs(3, 1) = "#BCFEF9": clrs(3, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            clrs(4, 1) = "#EAE7CC": clrs(4, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                            clrs(5, 1) = "#FEBcEc": clrs(5, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) "#FEBCEC" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "#FEB|fffd|E|fffd|")
                            clrs(6, 1) = "#E5EcEB": clrs(6, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| (test)
End Sub
Public Function getClrs(i, j): getClrs = clrs(i, j): End Function
Sub stopSensor(): set_bk_color: Set mCtl = Nothing: SCSForm.minimizeW SCSForm.cwnd&: End Sub
Public Sub set_bk_color(): Me.BackColor = get_bk_color&: Sensor.BackColor = IIf(bk_color_is_black, &H80000006, BackColor):  End Sub
Public Function bk_color_is_black() As Boolean: bk_color_is_black = _
                Workbooks("MAIN.XLSB").Sheets("Dispetcher_").Cells(1, 3).Interior.ColorIndex = 1: End Function
Public Function get_bk_color&(): get_bk_color& = IIf(bk_color_is_black, &H80000008, white_cl): End Function
'===========================================================================================

Private Sub HistoryCB_Change(): TextBox1 = IIf(HistoryCB = "", TextBox1, HistoryCB):  End Sub

Private Sub ImageM_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then Ctrl_F
End Sub

Private Sub TBPlus_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
'If Button <> fmButtonRight Or Trim(TextBox1) = "" Then Exit Sub Else If Not FrameP.Image1.Visible Then add_History: _
'       Call FindResultCleaning: showBRICK 1: _
'       Call Image11_Click: Image12_Click: Image13_Click: Image14_Click: Image15_Click: Image16_Click: Image10_Click '3*wiki
End Sub 'TMP |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Image10_Click(): Shell "cmd /C explorer ""https://ru.wikipedia.org/wiki/" & TextBox1 & """", vbHide: _
                             Shell "cmd /C explorer ""https://uk.wikipedia.org/wiki/" & TextBox1 & """", vbHide: _
                             Shell "cmd /C explorer ""https://en.wikipedia.org/wiki/" & TextBox1 & """", vbHide: _
                             Shell "cmd /C explorer ""https://ru.wiktionary.org/wiki/" & TextBox1 & """", vbHide: _
                             Shell "cmd /C explorer ""http://wikireality.ru/wiki/" & TextBox1 & """", vbHide: End Sub
Private Sub Image11_Click(): Shell "cmd /C explorer ""https://www.google.com.ua/search?q=" _
                                        & TextBox1 & """", vbHide: End Sub
Private Sub Image12_Click(): Shell "cmd /C explorer ""https://www.bing.com/search?q=" _
                                        & TextBox1 & """", vbHide: End Sub
Private Sub Image13_Click(): Exit Sub: Shell "cmd /C explorer ""https://yandex.ua/search/?text=" _
                                        & TextBox1 & """", vbHide: End Sub
Private Sub Image14_Click(): Shell "cmd /C explorer ""https://search.yahoo.com/search?p=" _
                                        & TextBox1 & """", vbHide: End Sub
Private Sub Image15_Click(): Shell "cmd /C explorer ""https://nova.rambler.ru/search?query=" _
                                        & TextBox1 & """", vbHide: End Sub
Private Sub Image16_Click(): Shell "cmd /C explorer ""https://social.msdn.microsoft.com/search/ru-RU?query=" _
                                        & TextBox1 & """", vbHide: End Sub
                                                   '& "&emptyWatermark=true&ac=4""", vbHide: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub add_History(): Dim i%, whole_text$: whole_text = Trim$(TextBox1.Text)
            'add 2 History8
            Dim hiStr$: hiStr$ = LoadSetting(8, 1)
                        hiStr$ = "|" & whole_text & prsBefore|fffd|Up(9, "|", Replace(hiStr$, "|" & whole_text & "|", "|"))
                                 SaveSetting 8, 1, hiStr$ & IIf(Right(hiStr$, 1) = "|", "", "|")
            'upd HistoryList
            Me.HistoryCB.Clear: For i = 1 To prsCount("|", hiStr$) - 1
            Me.HistoryCB.AddItem prsBetween|fffd|(i, "|", "|", hiStr$): Next i: End Sub
'satellite |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|)
Private Sub Image8_Click(): If on_timess_flg Then OnTimess_stop: UpdateCellMenu: SCSForm.noDoppel: Exit Sub 'smart_freezing_start -> OnTimess_start
                                             Call smart_freezing_start: UpdateCellMenu: End Sub 'DDBarUsed = False: - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?
Private Sub Image8_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button <> fmButtonRight Then Exit Sub
If ActiveSheet.name = "Dispetcher_" And Not SCSForm.isDoppel Then dispInvertColors
    'If SCSForm.isDoppel Then                                                                                      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| SetTimer
                             Schedule 2, "smart_freezing_start": OnTimess_stop: c_useTimer = Not c_useTimer: Image8.SpecialEffect = IIf(c_useTimer, 0, 6): _
                             Image8.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\Dispetcher.ico"): Repaint: Exit Sub 'RESET
    'If ActiveSheet.name = "Dispetcher_" Then dispInvertColors
End Sub                       'If ActiveSheet.Index <= wsABC Then invAllColors Else dispInvertColors

Rem: |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (Drag&Drop)
' http:\\vbzero.narod.ru\chapter1\page_18.htm  -- |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Drag&Drop (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Private Sub Image8_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal DragState As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
'If DragState = 1 Then db_ 1
'Cancel = True
End Sub

Private Sub ImageM_Click(): If ActiveSheet.name <> "Dispetcher_" Then View_Dispetcher Else _
                            If SCSForm.matrix Then SCSForm.Matrix_trn False: SCSForm.focusMe
End Sub
Rem: -> UserForm_DblClick
'Private Sub ImageM_DblClick(ByVal Cancel As MSForms.ReturnBoolean): SCSForm.Matrix_collect_all_free: End Sub 'With SCSForm: .Matrix_trn Not .matrix: End With

Sub focusMe(): setFocusOnForm Me.name, True: TextBox1.SetFocus: Sensor.SetFocus: End Sub
Sub focusT1(): setFocusOnForm Me.name, True: CommandButton1.SetFocus: With TextBox1: .SetFocus: .SelStart = 0: .SelLength = Len(TextBox1): End With: End Sub

'Private Sub Sensor_DblClick(ByVal Cancel As MSForms.ReturnBoolean): SCSForm.Matrix_collect_all_free: End Sub

Private Sub Sensor_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Select Case KeyCode: Case 33: SCSForm.listHistoryW_byScroll 1, True:    'PGUP
                     Case 34: SCSForm.listHistoryW_byScroll -1, True:   'PGDOWN
                     Case 46, 109, 68:
                            If SCSForm.matrix Then KillCWindow: SCSForm.listHistoryW_byScroll -1, True   '<D><Delete>|Num <->
                     Case 27: With SCSForm: If Sensor.BackColor = def_color Then If .Matrix_has(.cwnd&) Then _
                                                                .Matrix_del .cwnd&: .minimizeW .cwnd&: .cwnd& = 0: .reParkW True: .cwnd& = 0
                                                      End With: SCSForm.listHistoryW_byScroll -1, True   '<Esc>
                     Case 96: If SCSForm.matrix Then FreeCWindow: SCSForm.listHistoryW_byScroll -1, True '<0> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Num"-" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                     Case Else: SCSForm.processSCSFormKeyDown KeyCode, Shift
End Select: KeyCode = 0: End Sub

Private Sub Sensor_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): With SCSForm
   If .matrix Then '<D>or<Delete>or<Num-> + <Esc>or<Num0>
      If Button = fmButtonLeft Then KillCWindow _
                               Else If .Matrix_has(.cwnd&) Then .Matrix_del .cwnd&: .minimizeW .cwnd&: .reParkW True: .cwnd& = 0
   .listHistoryW_byScroll -1, True: Exit Sub: End If: .reCollectW .cwnd&, 1: .cwnd& = 0: resetParker: .focusMe: End With: End Sub

Private Sub Sensor_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If FnFormIsLoaded("ChessCaller") Then
      With ChessCaller: If .showedFlg And Not .menuFlg Then .showedFlg = False: SCSForm.setWindowVisible .t_hwnd&, False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Chess
                        If .back_hwnd& > 0 And Not .menuFlg Then SCSForm.setWindowVisible .back_hwnd&, False
    End With: End If
    If FnFormIsLoaded("JOTCaller") Then _
      If JOTCaller.showedFlg Then JOTCaller.showedFlg = False: SCSForm.setWindowVisible JOTCaller.t_hwnd&, False: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| JOT
    If aimed Or sensor_fs_Flg Then Exit Sub ' passive
    If Not (mCtl Is Nothing) Then If mCtl = Me.Sensor Then WaitMessage: DoEvents: SCForm.checkVisible: SCForm.stop_freelance smart_freezing: _
                                                           focusMe: SensorFullSize True: Exit Sub 'edit-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If DDM.num = 1 Then If DDBarUsed Then If DDBar.DDMatrixFrom% = -5 Then If FnFormIsVisible("EditForm") _
                                     Then BringWindowToTop& FindWindow(vbNullString, EditForm.Caption)
    HookListBoxScroll Me, Me.Sensor: focusMe: End Sub
      
Public Sub SensorFullSize(fs As Boolean): If sensor_fs_Flg = fs Then Exit Sub
                                  reSize fs: sensor_fs_Flg = fs: End Sub

Private Sub TextBox1_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Dim s$: If Data.GetFormat(1) Then s$ = Data.GetText: If prsCount("#", s$) = 1 Then If hasIt("/", s$) Then _
               StartSearching True, , Replace(s$, Chr(13) & Chr(10), ""): Application.Visible = True: View_Term "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Cancel = True: Exit Sub
       If prsCount("  ", s$) > 3 Then '|fffd||fffd||fffd||fffd||fffd||fffd| COPY html (c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            Dim dob As Object: Set dob = New DataObject: dob.SetText Replace(s$, "  ", " "): dob.PutInClipboard: Set dob = Nothing: Cancel = True: Exit Sub
    End If: If Action = fmActionDragDrop Then TextBox1 = "" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|                 'db_ Replace(s$, Chr(13) & Chr(10), ""):
    End Sub

Private Sub TextBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean): setMode IIf(cMode$ = "Gs", "GsE", "Gs"): End Sub

Private Sub TextBox1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then If cMode = "Gs" Then FindResultCleaning: toClipboard |fffd||fffd||fffd||fffd||fffd||fffd|$(Now) Else FindForm.focusT1: FindForm.setMode "DS": setFocusOnForm "SCSForm"  'SCSForm.focusMe '
'db_ 2 ' |fffd||fffd||fffd||fffd||fffd||fffd| Right 2 |fffd||fffd||fffd||fffd|?
End Sub                           '|fffd||fffd||fffd| .focusT1 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| RClick

Public Sub UserForm_Click(): If ActiveSheet.name <> "Dispetcher_" Then _
                                 HideFormIfLoaded "EditForm", twoWindowsWild: setMode "DS": View_Dispetcher: Exit Sub
With SCSForm: Dim cwnd&: cwnd& = .get_cwnd
  If IsWindowVisible(cwnd&) Then If Not .inCollection(cwnd&) Then .minimizeW cwnd&: .unFreeze
    If .ToggleButton2.Enabled Then .meUnHook: Unload SCSForm _
                              Else: If .hooking Then .updHook: Me.BackColor = IIf(Me.BackColor = &H80000008, white_cl, &H80000008): .focusMe      'w7_f4r
    End With: If aimed Then set_bk_color: aimed = False                    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SC |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Hooking (Catch, Minimise)
ShowWindow& DDM.TBhwnd, SW_SHOW&: End Sub
Public Function Inverted() As Boolean: On Error Resume Next
                Inverted = Me.BackColor = IIf(Sheets("Dispetcher_").Cells(1, 3).Interior.ColorIndex = 1, white_cl, &H80000008): End Function
Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean): If Inverted Then set_bk_color
                     Call dispGetTaskListIf 'With SCSForm: .meUnHook: .Manager .t_hwnd, False, Shift = 3: End With:
                     SCSForm.Matrix_collect_all_free 'If Not SCSForm.matrix Then SCSForm.Matrix_trn True: SCSForm.focusMe
                     End Sub '<Ctrl>

Private Sub UserForm_Deactivate(): Dim tPT As POINTAPI, t_h&: GetCursorPos tPT: t_h& = WindowFromPoint(tPT.x, tPT.Y)
                                   If getWndCaption$(GetParent(t_h&)) <> Me.Caption Then SensorFullSize False
LM "FindForm_Deactivate out": End Sub

Private Sub UserForm_Initialize(): '|fffd||fffd||fffd||fffd||fffd| Activate (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'das startUpFlg 'bag: 2 |fffd||fffd||fffd||fffd||fffd| FindForm
me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False
'https://stackoverflow.com/questions/20569959/vba-drag-and-drop-file-to-user-form-to-get-filename-and-path
'TreeView1.OLEDropMode = ccOLEDropManual '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TreeView) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
If c_useDnD Then sEnableDrop Me, me_hwnd&: sHook me_hwnd& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Api !!!|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!!!
SCSForm.freeze me_hwnd&, , 185: set_bk_color: If FnFormIsLoaded("PF") Then set_def_color (PF.c_Set) Else def_color& = &HC000&
setMode ("DS"): LM "FindForm_Initialize out": SetForegroundWindow& me_hwnd&: iniClrs:
Me.Picture = IIf(SDGoldenTheme, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\FindForm.jpg"), Nothing): End Sub

Rem: You will also need to add a reference to Microsoft Windows Common Controls 6.0 (C:\Windows\System32\MSCOMCTL.OCX)
'Private Sub TreeView1_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)
'    StrPath = Data.Files(1)
'End Sub
Rem: http://vbzero.narod.ru/chapter1/page_18.htm  -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public Sub setDefLock(): If ImageW4.SpecialEffect <> 6 Then If SCSForm.GetTBhwnd(4) = 0 Then ImageW4.SpecialEffect = 6 'by def
End Sub

Public Sub setMode(c_mode$, Optional noclean As Boolean): If cMode$ = c_mode$ Then Exit Sub
                             With Me: cMode$ = c_mode$: ls ">", "setMode", , c_mode$, noclean
Rem MODS:DS   - Dispetcher's posDefiner only
        'Gs   - General Serching (by all WS)
        'GsE  - General Serching + Parameters (Extended)
        'Ls   - Local Serching (active WS only, no def)
        'LsE  - GLocal Serching + Parameters (Extended)
If cMode$ = "DS" Then
                       Call setDefLock: resetParker 'Image8.Visible = True 'on_timess_flg 'On|Off
        If CommandButton3.Visible And Not noclean Then Call FindForm_Terminate 'just cleaning
Else: If TextBox1 = "" Then TextBox1 = prsBetween("|", "|", LoadSetting(8, 1)) 'Image8.Visible = False
    If Not CommandButton3.Visible And TextBox1.Left <> 0 Then View_Find
End If
'If Mid$(c_mode$, 1, 2) = "p" Then
Dim vShift%, down_in%: vShift% = IIf(cMode$ = "GsE", 0, IIf(cMode$ = "LsE", 10, 38)) - CommandButton2.Top
                                        'down_in = -1.5: .Height = 76.1                                      '|Fat line (76.5 - too fat)
.FrameP.Top = 68.25 - to_float - vShift%: down_in = 2: .Height = 76.1 - vShift% + 12 'IIf(cMode$ = "DS", 12, 0) '|Thin line (76 - too thin)
                             End With: reDraw: reSize: End Sub
                             
Private Sub TBPlus_Click(): Dim i%, hiStr$: hiStr$ = LoadSetting(8, 1): With Me.HistoryCB: 'upd HistoryList - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If .ListCount = 0 Then For i = 1 To prsCount("|", hiStr$) - 2: .AddItem prsBetween|fffd|(i, "|", "|", hiStr$): Next i
End With: TextBox1.SetFocus: TBPlus.Caption = IIf(TBPlus, "-", "+"): FindResultCleaning True: reTriple: End Sub 'reSize

Private Sub reTriple(): CheckBox3.TripleState = TBPlus: 'CheckBox3 = Triple(CheckBox3): End Sub 'db_ CheckBox3
         If TBPlus Then CheckBox3.tag = Triple(CheckBox3): CheckBox3 = Null Else CheckBox3 = CheckBox3.tag 'c TBPlus |fffd||fffd||fffd||fffd||fffd||fffd| TS (html-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
End Sub
                                             'Null = True
Private Function Triple(val) As Boolean: If IsNull(val) Then Triple = True Else Triple = val
    End Function
    
Public Sub reSize(Optional sensor_fs As Boolean): ls ">", "reSize", , sensor_fs: With CommandButton1: 'If Not .Visible Then Exit Sub
  Dim vShift%, n%: vShift% = CommandButton2.Top + 11 '|fffd|?
  Dim hrgn1&: hrgn1 = CreateRectRgn(bord_sz, vShift% + bord_sz + IIf(os10, 23, 0), 1 + (.Left + .Width) / x75, to_float + Me.FrameP.Top / x75) 'full size after TB+
  Dim hrgn2&: With TBPlus: hrgn2 = CreateRectRgn(.Left / x75 - 0, (Frame2.Top + .Top) / x75 + 3, _
                                       (.Width + .Left) / x75 - 4, (Frame2.Top + .Height) / x75 - 1): 'Call CombineRgn(hrgn1, hrgn2, hrgn1, 2) 'TB
  Dim hrgn3&:              hrgn3 = CreateEllipticRgn(7 + .Left / x75 - 0, 8 + (Frame2.Top + .Top) / x75 + 3, _
                                           7 + (.Width + .Left) / x75 - 4, 8 + (Frame2.Top + .Height) / x75 - 1): Call CombineRgn(hrgn2, hrgn3, hrgn2, 1) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Call CombineRgn(hrgn1, hrgn2, hrgn1, 2): End With: If TBPlus Then _
    For n = 0 To 6: With Me.Controls("Image1" & n%): _
              hrgn2 = CreateRectRgn(1 + .Left / x75 - 0, 1 + Frame2.Top / x75 + 3, _
                                    1 + (.Left + .Width) / x75, 7.1 + (Frame2.Top + .Height) / x75 - 1): Call CombineRgn(hrgn1, hrgn2, hrgn1, 2): _
  End With: Next n: _
                    With Me.HistoryCB: _
              hrgn2 = CreateRectRgn((.Left + .Width) / x75 - 15.8 + IIf(os10, -10, 0), 1 + .Top / x75 + 9, _
                                    (.Left + .Width) / x75, 2 + (.Top + .Height) / x75 - 1): Call CombineRgn(hrgn1, hrgn2, hrgn1, 2): End With '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              'hrgn2 = CreateRectRgn(4 + .Left / x75 - 0, 1 + .Top / x75 + 3, -c |fffd||fffd||fffd||fffd||fffd|
      If Mid(cMode$, Len(cMode$), 1) <> "E" Then
                                                 Dim x1&, y1&, x2&, y2&, r&, sh%, st%, M%, i%, j%
                                                 x1 = 2 * bord_sz + (.Left + .Width) / x75
                                                 y1 = vShift% + 3 * bord_sz + 0.5  '+ 1
                                                 x2 = Me.Width / x75 - 2 * bord_sz + 1
                                                 y2 = 4 + (Sensor.Top) / x75 - 2 * bord_sz + 3: r& = 5: sh% = 1: st% = 5.5: M% = 1
          hrgn2 = CreateRectRgn(x1, y1 + IIf(os10, 23, 0), x2, y2): Call CombineRgn(hrgn1, hrgn2, hrgn1, IIf(cMode$ = "DS", 5, 2)) '|fffd||fffd||fffd||fffd||fffd||fffd|
        If sensor_fs Then
          hrgn2 = CreateRectRgn(sh% + x1, y1 + 33 + IIf(os10, 23, 0), x2 - 1, y1 + 54 + IIf(os10, 50, 0)): Call CombineRgn(hrgn1, hrgn2, hrgn1, 2)
        Else 'sensor logo
          For i% = 0 To 3: For j% = 0 To 4: hrgn2 = CreateRectRgn(sh% + x1 + j% * st% * M%, _
                                                                   y1 + 33 + i% * st% + IIf(j% > 2, j% - 2, 0) + IIf(os10, 43, 0), _
                                                                   sh% + x1 + j% * st% * M% + Min(r& - j%, r& - i%), _
                                                                   y1 + 33 + i% * st% + IIf(j% > 2, j% - 2, 0) + Max(1, Min(r& - j%, r& - i%)) + IIf(os10, 43, 0)): _
          Call CombineRgn(hrgn1, hrgn2, hrgn1, 2): Next j%: Next i%
        End If 'OnTimess icon
        If Image8.Visible Then With Image8: _
          hrgn2 = CreateRectRgn(bord_sz + 2 + (.Parent.Left + .Left) / x75 + IIf(os10, 1, 0), bord_sz + 2 + (.Parent.Top + .Top + IIf(FrameP.Visible, FrameP.Height - 4.3, 0)) / x75, _
                                bord_sz + 2 + (.Parent.Left + .Left + .Width) / x75 + IIf(os10, 1, 0), bord_sz + 2 + (.Parent.Top + .Top + .Height) / x75): End With: Call CombineRgn(hrgn1, hrgn2, hrgn1, 2)
      End If
      'For i% = 0 To 3: For j% = 0 To 3: hrgn2 = CreateEllipticRgn(sh% * 2 + x1 + j% * (r& + 0.2), sh% + y1 + 33 + i% * r&, sh% * 2 + x1 + j% * (r& + 0.2) + r& - Max(j%, i%), y1 + 33 + i% * r& + r& - Max(j%, i%)): _
      'Call CombineRgn(hrgn1, hrgn2, hrgn1, 2): Next j%: Next i% 'hrgn2 = CreateRectRgn(x1, y1 + 33, x2 - 1.5, y2 + 25): Call CombineRgn(hrgn1, hrgn2, hrgn1, 2)  'XOR|AND Parker
End With: If cMode$ = "DS" Then GoTo doL
          If CommandButton3.Visible And Not CommandButton4.Visible Then With CommandButton4: _
              hrgn2 = CreateRectRgn(bord_sz, -1 + vShift% + 3 + IIf(CommandButton3.Visible, CommandButton3.Height, 0) / x75, 3 + CommandButton3.Width / x75, _
                                    bord_sz + (.Top + .Height) / x75): Call CombineRgn(hrgn1, hrgn1, hrgn2, 4): End With 'slitted1 ('|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
          If Mid(cMode$, Len(cMode$), 1) <> "E" Then GoTo doL '|fffd||fffd||fffd| Extended
              hrgn2 = CreateRectRgn(bord_sz, 2 + bord_sz + TextBox1.Height / x75, bord_sz + Frame1.Left / x75, _
                                    to_float + FrameP.Top / x75): Call CombineRgn(hrgn1, hrgn1, hrgn2, 4) 'slitted1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                           hrgn2 = CreateRectRgn(bord_sz - 1 + (Frame1.Left + Frame1.Width) / x75, 2 + bord_sz + TextBox1.Height / x75, bord_sz + (Frame1.Left + Frame1.Width) / x75, _
                                    to_float + FrameP.Top / x75): Call CombineRgn(hrgn1, hrgn1, hrgn2, 4) 'slitted2 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
              hrgn2 = CreateRectRgn(bord_sz, -3 + vShift% + 3 + bord_sz + TextBox1.Height / x75, bord_sz + (CommandButton1.Left) / x75, _
                                    1 + bord_sz + Frame1.Top / x75): Call CombineRgn(hrgn1, hrgn1, hrgn2, 4) 'slitted3 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TextBox1)
doL: If FrameP.Visible Then _
With FrameP: hrgn2 = CreateRectRgn(bord_sz + 2 + .Left / x75, 4 + to_float * x75 + .Top / x75 - 1, (.Left + .Width) / x75, _
                                   bord_sz - 4 + to_float * 0.5 + (.Top + .Height) / x75 - 2): Call CombineRgn(hrgn1, hrgn1, hrgn2, IIf(cMode$ = "DS", 5, 2)): End With  '+floating progress
Dim hWnd&: hWnd& = FindWindow(vbNullString, Me.Caption$): SetWindowRgn hWnd&, hrgn1, True: Repaint: LM "FindForm_reSize out": End Sub

Public Sub reDraw(): With Me:
If Not .Visible Then .show vbModeless: reSize '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| App
' .Top = 1 + IIf(SCSForm.fivEl, SCSForm.Top + 2, Application.Top + Application.Height - 24 - to_float) - .FrameP.Top
'.Left = -1 + IIf(SCSForm.fivEl, SCSForm.Left + 10.5, Application.Left + Application.Width - IIf(Mid(cMode$, Len(cMode$), 1) = "E", -25, 1)) - .Width
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SCSForm
 .Top = 1 + IIf(SCSForm.fivEl, SCSForm.Top + 2, SCSForm.Top - 7.5 - to_float) - .FrameP.Top
If SCSForm.Left < PF.Left + 55 Then .Left = PF.Left - .Width Else _
.Left = -1 + IIf(SCSForm.fivEl, SCSForm.Left + 10.5, SCSForm.Left + 24 - IIf(Mid(cMode$, Len(cMode$), 1) = "E", -25, 1)) - .Width
End With: L0M "FindForm_reDraw out": End Sub

Public Sub clearParker(Optional full As Boolean): Dim i%: For i% = 1 To 4: With Controls("ImageW" & i%): .SpecialEffect = IIf(.SpecialEffect = 6 And Not full, 6, 0): .BorderStyle = 0: .BorderColor = def_color&: _
                                          .BorderStyle = IIf(IsWindow(SCSForm.GetTBhwnd(i%)) > 0, 1, 0): End With: Next i%: End Sub
Public Sub resetParker(): clearParker: Dim HOT%, mrr As Boolean: mrr = DDM.On And SCSForm.LParked: HOT% = IIf(mrr, 3, 4) ' IIf(DDM.forceSM, 2, 4)) 'mirror flg
Dim i%, i2%: For i% = IIf(mrr, 1, 4) To IIf(mrr, 4, 1) Step IIf(mrr, 1, -1) 'To IIf(mrr, 5, IIf(DDM.On, 1, 2) - 1)
If Controls("ImageW" & i%).SpecialEffect <> 6 Then If SCSForm.GetTBhwnd(i%) = 0 Then Exit For Else i2% = i%                  'not locked -> free or last_full
                                                                                                   'If i2% = 0 Then i2% = i% 'not locked -> free or first_full
Next:
If SCSForm.matrix Then nxt_pos% = 1 Else nxt_pos% = IIf(SCSForm.GetTBhwnd(HOT%) = 0 And _
      Controls("ImageW" & HOT%).SpecialEffect <> 6, HOT%, IIf(between(i%, 1, 4), i%, IIf(between(i2%, 1, 4), i2%, HOT%)))
      Controls("ImageW" & nxt_pos%).SpecialEffect = IIf(nxt_pos% = i2%, 1, 2): ImageM.Visible = SCSForm.matrix: Me.Repaint: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Private Sub ImageW1_Click(): ImageWClicks 1: End Sub
Private Sub ImageW1_DblClick(ByVal Cancel As MSForms.ReturnBoolean): 'If SCSForm.ReleaseW(SCSForm.http_hwnd&, 1) Then resetParker: Exit Sub
If SCSForm.http_hwnd& <> 0 Then If DDBarUsed Then DDBar.AddItem SCSForm.http_hwnd& _
                                             Else SCSForm.ReleaseW SCSForm.http_hwnd&, 1
                                                  ImageW1.SpecialEffect = 6: resetParker: End Sub 'locked for use
Private Sub ImageW2_Click(): ImageWClicks 2: End Sub
Private Sub ImageW2_DblClick(ByVal Cancel As MSForms.ReturnBoolean): 'If SCSForm.ReleaseW(SCSForm.r_hwnd&, 2) Then resetParker: Exit Sub
If SCSForm.r_hwnd& <> 0 Then If DDBarUsed Then DDBar.AddItem SCSForm.r_hwnd& _
                                             Else SCSForm.ReleaseW SCSForm.r_hwnd&, 2
                                                  ImageW2.SpecialEffect = 6: resetParker: End Sub 'locked for use
Private Sub ImageW3_Click(): ImageWClicks 3: End Sub
Private Sub ImageW3_DblClick(ByVal Cancel As MSForms.ReturnBoolean): 'If SCSForm.ReleaseW(SCSForm.bl_hwnd&, 3) Then resetParker: Exit Sub
If SCSForm.bl_hwnd& <> 0 Then If DDBarUsed Then DDBar.AddItem SCSForm.bl_hwnd& _
                                             Else SCSForm.ReleaseW SCSForm.bl_hwnd&, 3
                                                  ImageW3.SpecialEffect = 6: resetParker: SCSForm.reParkW: End Sub 'locked for use
Private Sub ImageW4_Click(): ImageWClicks 4: End Sub
Private Sub ImageW4_DblClick(ByVal Cancel As MSForms.ReturnBoolean): 'If SCSForm.ReleaseW(SCSForm.br_hwnd&, 4) Then resetParker: Exit Sub
If SCSForm.br_hwnd& <> 0 Then If DDBarUsed Then DDBar.AddItem SCSForm.br_hwnd& _
                                             Else SCSForm.ReleaseW SCSForm.br_hwnd&, 4
                                                  ImageW4.SpecialEffect = 6: resetParker: SCSForm.reParkW: End Sub 'locked for use

Private Sub ImageWClicks(i%, Optional dbl As Boolean): SCSForm.updHook: clearParker
If Sensor.BackColor = def_color Then
                                SCSForm.reCollectW SCSForm.cwnd&, i%: SCSForm.cwnd& = 0: resetParker
                                If SCSForm.matrix Then If i% = 1 Then SCSForm.Matrix_trn False
                                SCSForm.focusMe: Exit Sub: End If
With Controls("ImageW" & i%): Select Case .BorderStyle
                                Case 0: .SpecialEffect = 2 'free
                                Case 1: .SpecialEffect = 1 'full 'IIf(i% = 4, 2, 1)
                              End Select: End With: nxt_pos% = i%: aimMe: SCSForm.focusMe: End Sub
Private Sub aimMe(): If SCSForm.hooked Then Me.BackColor = def_color&: 'aimed = True
                     aimed = True: SensorFullSize False: End Sub
Public Sub set_def_color(i%): def_color& = IIf(i = 1, &HFF&, IIf(i = 2, &HC000&, IIf(i = 3, &H80000002, &H80C0FF))): End Sub

Private Sub showBRICK(num%) 'Colors: 1-Blue, 2-Green, 3-Gray, 4-Yellow, 5-Red
   With Me.Controls("Image" & num%): .Left = 0: .Width = 107: .Visible = True: reFrameP: reSize: End With: End Sub
Public Sub FindResultCleaning(Optional frc_Res = False): If Not FrameP.Visible Then If frc_Res Then reSize: Exit Sub Else Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| reFrameP
                                 Dim i%: For i% = 1 To 5: With Me.Controls("Image" & i%): .Visible = False
                                     .Width = 21: .Left = 21 * (i% - 1): End With: Next: reFrameP: reSize '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
                                     ToggleButton1.Visible = Sheets(WS0).AutoFilter.Filters.Item(4).On And PF.Image16.tag <> "_*": End Sub
Private Sub reFrameP(): Dim i%, visF As Boolean: For i% = 1 To 5: If Me.Controls("Image" & i%).Visible Then visF = True: Exit For
                                                 Next: FrameP.Visible = visF: End Sub 'RGB

Private Sub KillCWindow(): If Not SCSForm.matrix Then Exit Sub
If Sensor.BackColor = def_color Then dispDestroyWindow SCSForm.cwnd&: SCSForm.cwnd& = 0
End Sub
Private Sub FreeCWindow(): If Not SCSForm.matrix Then Exit Sub Else hWnd& = SCSForm.cwnd&
With SCSForm: .Matrix_del hWnd&: .minimizeW hWnd&: .reParkW True: End With: SCSForm.cwnd& = 0
End Sub

Private Sub CheckBox1_Click(): If Not CheckBox1.value Then Call FindResultCleaning
                                TextBox1.SetFocus: End Sub
Private Sub CheckBox2_Click(): If Not CheckBox2.value Then Call FindResultCleaning
                                TextBox1.SetFocus: End Sub
Private Sub CheckBox3_Change(): FindResultCleaning: TextBox1.SetFocus: End Sub

Private Sub CommandButton3_Click()
 Dim a_record$: a_record = CommandButton3.Caption
             If a_record = "" Then Exit Sub
 Sheets(FnWSCase(FnGetCellAddress(a_record, 1))).Activate
 Cells(FnGetCellAddress(a_record, 2), IIf(ActiveSheet.name = "Dispetcher_", 1, FnGetCellAddress(a_record, 3))).Activate
 ActiveWindow.SmallScroll ToLeft:=3: TextBox1.SetFocus
End Sub

Private Sub CommandButton4_Click()
 Dim a_record$: a_record = CommandButton4.Caption
             If a_record = "" Then Exit Sub
 Sheets(FnWSCase(FnGetCellAddress(a_record, 1))).Activate
 Cells(FnGetCellAddress(a_record, 2), FnGetCellAddress(a_record, 3)).Activate
 ActiveWindow.SmallScroll ToLeft:=3: TextBox1.SetFocus
End Sub

Private Sub CommandButton1_Click(): If FrameP.Visible Then If Not last_dir Then FindResultCleaning 'TEST
If CBool(Image7.BorderStyle) Then Image7.BorderStyle = CInt(ToggleButton1.value) + 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Call StartSearching(True)
End Sub

Private Sub CommandButton2_Click(): If FrameP.Visible Then If last_dir Then FindResultCleaning 'TEST
If CBool(Image7.BorderStyle) Then Image7.BorderStyle = CInt(ToggleButton1.value) + 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Call StartSearching(False)
End Sub

Private Sub ToggleButton1_Click(): If ToggleButton1.value Then _
                                      FindResultCleaning: Image7.BorderStyle = fmBorderStyleNone: FindForm_Terminate True
                                   TextBox1.SetFocus: StartSearching last_dir: End Sub

Private Sub Image7_Click()
If CBool(Image7.BorderStyle) Then Image7.BorderStyle = CInt(ToggleButton1.value) + 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
If CBool(Image7.BorderStyle) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| BorderStyle)
            Image7.SpecialEffect = fmSpecialEffectEtched:  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      Else: Image7.SpecialEffect = fmSpecialEffectSunken: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'Call testfind
Call StartSearching(True)
'|fffd||fffd||fffd||fffd||fffd||fffd|
Image7.SpecialEffect = fmSpecialEffectFlat
Image7.BorderStyle = 1: ToggleButton1.value = False
'Call CommandButton1_Click 'first
End Sub

Private Sub CommandButton3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then With ActiveCell: CommandButton3.Caption = FnWSNum(ActiveSheet.name) & ":" & .row & ":" & .Column: End With
End Sub '|fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|>

Private Sub CommandButton4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then CommandButton4.Visible = False: reSize
End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|> (|fffd||fffd||fffd| ifblnk)

Sub Anchor(Optional ifblnk = True): If TextBox1.Left <> 14 Then TextBox1.Width = TextBox1.Width - 14: TextBox1.Left = 14
                 If Not CommandButton3.Visible Then CommandButton3.Visible = True                       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|>
          If ifblnk And CommandButton4.Visible Then Exit Sub Else CommandButton4.Visible = True: reSize '   |fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>
                        CommandButton4.Caption = FnWSNum(ActiveSheet.name) & ":" & ActiveCell.row & ":" & ActiveCell.Column: End Sub
                        

'|fffd||fffd||fffd||fffd||fffd||fffd| ****************************
'Image7.BorderStyle = 0  (def)
'         = 1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Image7.SpecialEffect = 0 (def)
'         = 2 - HideAll -> |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd|. UnHideRoots, |fffd| |fffd||fffd||fffd||fffd||fffd| = 0
'            ToggleButton1.Value = False
'            Image7.BorderStyle = 1
'
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd| |fffd||fffd| Image7
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'1) ToggleButton1 (False)
'   |fffd||fffd||fffd| ShowLevel 3 (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'2) ToggleButton1 (True)
'   ShowLevel 3
'   Image7.BorderStyle = 0  (def) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'************************************
'
Private Sub StartSearching(def_dir, Optional runner%, Optional find_what$): Dim s$: last_dir = def_dir: ls ">", "StartSearching", def_dir
' Go To |ID| =================================================================
If hasIt("#", find_what$) Or hasIt("goto", blank(find_what$, TextBox1)) Then
If IsNumeric(Replace(sag(s$, prsBetween("#", "/", find_what$)), "_", "")) Then On Error Resume Next: MoveToID 2, s$, 3: Anchor: GoTo extL Else _
If IsNumeric(Replace(sag(s$, Trim(Replace(TextBox1.Text, "goto", ""))), "_", "")) Then On Error Resume Next: MoveToID 2, s$, 2: openAsW False: GoTo extL _
                                                                                  Else: If FrameP.Visible Then GoTo AntiCrashL
End If '=============================================================================
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| idxxx_xxx - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML
Dim id$: If LCase(Left(TextBox1, 2)) = "id" Then If IsNumeric(Replace(sag(id$, Mid(TextBox1, 3)), "_", "")) Then _
                                                 If exists("_1_" & id$) Then Open_Browser_W$ id$: Exit Sub
       '=============================================================================
Call add_History

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Application.EnableCancelKey = xlErrorHandler: On Error GoTo BCErrorHandler 'antiESC |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim prev_c&, prev_r&, all_right As Boolean, found As Boolean, tRange As Range '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim whole_text$, find_text$:  'If inc(clickcnt%) > 150 Then GoTo AntiCrashL 'fixed |fffd| SCSForm.Layout
Rem: <*!*> |fffd||fffd||fffd||fffd||fffd| [TAGS] <*!*>
'=============================================================================
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Set tRange = Sheets(wsLog).Range("E:E"): Dim tc As Object
Set tc = tRange.find(What:="[" & Trim(TextBox1) & "]", LookIn:=xlValues, LookAt:=xlPart, MatchCase:=False)
If Not tc Is Nothing Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    showBRICK 2:
    Application.Goto Reference:="_2_" & sag(id$, Sheets(wsLog).Cells(tc.row, idcol)), Scroll:=True: |fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Open_Browser_W$ Sheets(wsLog).Cells(tc.row, idcol): GoTo extL
End If: Set tc = Nothing: Set tRange = Nothing
'=============================================================================
Dim f_pos&, s_pos%, next_pos%, ss$
'If Left(Trim$(TextBox1.Text), 1) = """" Then find_what$ = Trim$(TextBox1.Text) '|fffd||fffd||fffd||fffd||fffd||fffd| const |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. CT_FnGetNextWord.smartSplit)
If find_what$ = "" Then
    With TextBox1: .value = Replace(.value, Chr(13) + Chr(10), " ")                  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
    If Trim$(.value) = "" Then .SetFocus: GoTo AntiCrashL 'Or Image6.Visible        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Right(.value, 1) = "@" Then .Text = Left(.value, Len(.value) - 1) & """"
    s_pos = 1: whole_text = Trim$(.value)
    If Right(whole_text, 1) <> """" Then ' text + " - |fffd||fffd||fffd||fffd||fffd||fffd| const |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        While db_(sag(ss$, CT_FnGetNextWord(s_pos, whole_text, f_pos, , True))) <> "": s_pos = f_pos + 1
          'If MsgBox("|fffd||fffd||fffd|?", vbYesNo) = vbYes Then whole_text = ""
          If Len(ss$) > 4 Then sadd find_text$, Trim(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(ss$ & " ", "|fffd| ", "? "), "|fffd| ", "? "), "|fffd| ", "? "), "|fffd| ", "? "), "|fffd| ", "? "), "|fffd| ", "? ") _
                            , "s ", "? "), "? ", " ")) & " " Else sadd find_text$, blankif(Not TBPlus, "{<" & Len(ss$) & ">}") & ss$ & " " '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Wend: .value = Trim$(find_text$): f_pos& = 0: s_pos% = 0:
    Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
        If TBPlus Then .Text = clearFromTags("{<", ">}", sortSetABC$(" ", .value, True))
    End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    whole_text = Replace(Replace(.Text & "<-", """<-", ""), "<-", "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| const |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    find_text$ = Replace(whole_text, " ", "*"): End With '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Else: 'find_what$ = Replace("->" & find_what$, "->""", "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| const |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      whole_text = find_what$: find_text = find_what$: End If '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|., Go To |ID|)
dbg_ find_what$, whole_text, find_text: 'Exit Sub
            'state_string
Dim i%, s2$, c As Object: unLockWBfor '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, i%=WS
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Dim s_method$ '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If TBPlus Then
  s_method = "|fffd||fffd||fffd||fffd||fffd| HTML": Dim sID_Result$, sID_no_Result$, cid$, sID_cnt%: sID_Result = "|"
Else
  Select Case Image7.SpecialEffect
         Case fmSpecialEffectSunken: s_method = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
         Case fmSpecialEffectEtched: s_method = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         ' |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd|)
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
         Case Else: If CBool(Image7.BorderStyle) Then s_method = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" _
                                                 Else: s_method = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" 'fmSpecialEffectFlat
  End Select
End If
Rem: |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If s_method <> "|fffd||fffd||fffd||fffd||fffd| HTML" Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| FROM, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd|
    If CommandButton4.Caption <> "" Then
      Dim last_sheet%, last_row&, last_col%
      With CommandButton4 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        last_sheet% = FnGetCellAddress(.Caption, 1)
        last_row = FnGetCellAddress(.Caption, 2)
        last_col = FnGetCellAddress(.Caption, 3)
        Set c = Sheets(FnWSCase(last_sheet)).Cells(last_row, last_col)
        termActivationOff c: unLockWs Index(last_sheet) 'NEW
        If c.rows(1).RowHeight > 53 Then c.rows(1).RowHeight = 53
        If c.Hyperlinks.Count Then c.Font.ColorIndex = inv(5) _
          Else If Cells(c.row, shadcol) = Cells(c.row, termcol) And _
                  Cells(c.row, shadcol).Font.ColorIndex <> inv(15) And c.Column = termcol Then c.Font.ColorIndex = inv(2) _
                                                                                          Else: c.Font.ColorIndex = inv(xlAutomatic)
      End With: '.Caption = "" (|fffd||fffd||fffd| Anchor): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If InStr(1, s_method, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 Then i = last_sheet
    ElseIf FnIsTrinity(ActiveSheet.name) Then Set c = ActiveCell: End If
End If: If i = 0 Then If Not between(sag(i, FnWSNum(ActiveSheet.name)), 1, 3) Then i = IIf(def_dir, 1, 3) 'i=0
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Dim active_filter As Boolean: active_filter = Sheets(WS0).AutoFilter.Filters.Item(4).On And PF.Image16.tag <> "_*" 'On |fffd||fffd||fffd||fffd||fffd||fffd|
Dim cCat$: If active_filter And (Not ToggleButton1.value) Then cCat$ = Replace(FnGetCurrentCat(), "*", ""): db_ cCat$ 'Else MsgBox CBool(active_filter And (Not ToggleButton1.Value)) & " = " & active_filter & " + " & (Not ToggleButton1.Value)
                                       'range_missed - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Dim loop_counter%, new_jump As Boolean, range_missed As Boolean, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_flg As Boolean  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|                                         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (whole_word <> "1-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|))
Dim whole_word As Boolean: whole_word = CheckBox1.value 'Or (Not hasIt(" ", whole_text)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "v$parameter" (|fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|" <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
Dim m_case As Boolean:      m_case = CheckBox2.value                   'Replace(whole_text, "-", " ")))
Dim look_in_def As Boolean: look_in_def = Triple(CheckBox3.value) '4TripleState
Dim look_at_ALL As Boolean: look_at_ALL = (s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" And IsNull(CheckBox3.value)): If look_at_ALL Then Set c = Nothing 'TEST
Dim full_TEXT_S As Boolean: full_TEXT_S = (s_method = "|fffd||fffd||fffd||fffd||fffd| HTML") And Not whole_word '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HTML, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Dim relevance As Boolean, rate%, newRate%: If look_in_def Then relevance = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '|fffd||fffd||fffd|1: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|                    'eru(ActiveSheet.index)
    If Not c Is Nothing Then If between(i, 1, 3) Then If ActiveCell.row <> c.row Or c.Column <> IIf(look_in_def, 4, 3) Then i = eru(c.Worksheet.Index): _
       Set c = ActiveSheet.Cells(ActiveCell.row, IIf(look_in_def, 4, 3)) 'IIf(between(i, 1, 3), IIf(look_in_def, 4, 3), IIf(def_dir, 2, IIf(i = 0, 4, 7)))) '|fffd||fffd||fffd||fffd||fffd||fffd| 1-3
    '|fffd||fffd||fffd|2: If Not look_in_def Then If Not c Is Nothing Then _
    If c.Column = defcol Then Set c = Sheets(FnWSCase(last_sheet)).Cells(last_row, termcol) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim new_search As Boolean, startedT&, TimeOut%: new_search = True: startedT& = Timer: TimeOut% = IIf(look_in_def, 5, 3) '<<<tmp TEST
Dim rowSearchF As Boolean: rowSearchF = look_at_ALL Or (active_filter And (ToggleButton1.value Or Not FnIsTrinity(FnWSCase(i)))) Or InStr(1, s_method, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
Dim strtWS%, strtrow&, strtcol&: If rowSearchF Then If Not c Is Nothing Then strtWS% = i: strtrow& = c.row: strtcol& = c.Column '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
'look_at_ALL Or ToggleButton1.value -- |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| TimeOut |fffd| multicol  ' MsgBox " (" & strtrow& & ":" & strtcol& & ")"
Dim lr%, lc%, ws_eru%, col%, ctext$, next_word$, chkMsg$, pos%, tmp$: NoSup 'TEST
'*****************************************************************************************
Rem: <*!*> |fffd||fffd||fffd||fffd||fffd| ERU <*!*> **************************************************************
Dim While_: While_ = "Wend": LM "While_" '==============================================
Rem: |fffd||fffd||fffd||fffd| 1(WHILE) >>>>>>>>
While (Not found Or (s_method = "|fffd||fffd||fffd||fffd||fffd| HTML") Or InStr(1, s_method, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")) _
  And between(i, 1, 3) And loop_counter < IIf(s_method = "|fffd||fffd||fffd||fffd||fffd| HTML", 3, 4) '!!! |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'    L0M ">>>>>>>>>>>>": If c Is Nothing Then tmp$ = "(|fffd||fffd||fffd||fffd||fffd|)" Else tmp$ = c.Text        '<<<tmp TEST
'    L0M ">>>>>>>>>>>>": db_ "new:" & found & " " & i & " " & loop_counter & " " & tmp$  '<<<tmp TEST
    If new_search Then
       new_search = False: If InStr(1, s_method, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then Set c = Nothing: GoTo njL '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If fnWSisGrouped(i) Then _
       If (Not found) Then setOutlineShowLevel (3) Else UnGroupRows (i) '|fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| manual
    If c Is Nothing Then If InStr(1, s_method, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then _
                         Sheets(FnWSCase(i)).Range("A1").AutoFilter _
                         field:=1, Criteria1:="-": Sheets(Index(i)).Activate '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _
                                                                              |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd| Activate |fffd||fffd| 3-|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|)
Rem: MODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMOD
      If rowSearchF Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!look_at_ALL!!!)
Rem: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rem: <*!*> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd|.|fffd|. inHiddenMode) <*!*> - "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
       LM "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", i, s_method, look_at_ALL
        'If s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then prev_r = 1: prev_c = IIf(look_in_def, 4, 3) Else '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| def_dir
        If c Is Nothing Or s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then prev_r = IIf(def_dir, 1, FnGetLastRow(i) + 1): _
                                                        prev_c = IIf(look_in_def, 4, 3) _
                                                   Else: i = eru(c.Worksheet.Index): prev_r = c.row: prev_c = c.Column: Set c = Nothing
        Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| prev_c - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim row_step%, fin_row&: row_step% = IIf(def_dir, 1, -1): fin_row = IIf(def_dir, FnGetLastRow(i), 2): LM "prev_r", prev_r, "fin_row", fin_row
M3: Dim j&: 'OLD |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS(Links, Abbrev) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|(i)
Rem: |fffd||fffd||fffd||fffd| 1.2(FOR) >>>>>>>
LogOff:
    For j = prev_r + row_step To fin_row Step row_step: all_right = False: found = False
'      L0M ">>>>>>>>>>>>": If c Is Nothing Then tmp$ = "(|fffd||fffd||fffd||fffd||fffd|)" Else tmp$ = c.row    '<<<tmp TEST
'      L0M ">>>>>>>>>>>>": db_ "Row:" & j & " " & i & " " & loop_counter & " " & tmp$ '<<<tmp TEST
      cid = Sheets(FnWSCase(i)).Cells(j, idcol)
        If s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then If Replace(sID_Result$ & sID_no_Result$, "}", "_|") Like "*|" & cid & "|*" _
                                                                                            Then L0M cid & " |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": GoTo nextJ '|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If loop_counter > 1 Then _
             If strtWS% = i Then If j = strtrow& + row_step Then L0M "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit For '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <<<< |fffd||fffd||fffd||fffd||fffd||fffd|
        With Sheets(FnWSCase(i))
          If ToggleButton1.value Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                          all_right = True
          ElseIf Not .rows(j).Hidden Then all_right = True
          ElseIf cCat$ <> "" Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            'all_right = CBool(InStr(1, .Cells(j, IIf(i = 4, 8, catcol)), cCat$)): 'Msg .Cells(j, IIf(i = 4, 8, catcol)) & ":" & i
            all_right = .Cells(j, IIf(i = 4, 8, catCol)) Like ("*" + cCat$ + "*"): 'Msg .Cells(j, IIf(i = 4, 8, catcol)) & ":" & i
          Else: Msg s_method$: GoTo TimeOutL: End If '|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd|?
'das .Cells(j, prev_c) = "grep result" '####
          If all_right Then
            If Not m_case Then 'NO m_caseNO m_caseNO m_caseNO m_caseNO m_caseNO m_caseNO m_caseNO m_caseNO m_c
              If whole_text = find_text Then '----------------------------------------------------------------
                  If look_at_ALL Or Not look_in_def Then If sag(found, CBool(InStr(1, .Cells(j, 3), whole_text, vbTextCompare))) Then prev_c = 3
                   If found Then L0M "found!", "unCASED", .Cells(j, 3) Else If look_in_def Then If sag(found, CBool(InStr(1, .Cells(j, 4), whole_text, vbTextCompare))) Then prev_c = 4
              Else '------------------------------------------------------------------------------------------
Rem 1: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Like)
                If look_at_ALL Then
                  f_pos& = 0: s_pos = 1: next_pos = 1   'ctext$ = term1+def1
                  If InStr(1, sag(ctext$, .Cells(j, termcol) & " " & .Cells(j, defcol)), _
                          db_(CT_FnGetNextWord(s_pos, whole_text, f_pos, , True)), vbTextCompare) Then
                    found = True: s_pos = f_pos + 1
                    For ws_eru = 1 To 3: If ws_eru = i Then GoTo Next_ws_eruL
                        For col% = termcol To defcol: sadd ctext$, " " & FnGetTxtFromID$(cid, ws_eru, col%): Next
Next_ws_eruL:       Next 'ctext$ = term1+def1+term2+...
                    While dbg_(sag(next_word, CT_FnGetNextWord(s_pos, whole_text, f_pos, , True)), cid) <> "" And found: 'dbg_ i, next_word
                       found = LCase(ctext$) Like "*" & LCase(next_word) & "*": s_pos = f_pos + 1: dbg_ found, next_word:  Wend:
                    'If found Then dbg_ .Cells(j, termcol), i, found
                    If found Then Set c = .Cells(j, prev_c): L0M "passChecks -> foundL": GoTo foundL Else L0M "nextJ: " & cid & " Not mach": sadd sID_no_Result$, cid & "|": GoTo nextJ
                  Else: GoTo nextJ: End If
                End If '--------------------------------------------------
                For prev_c = IIf(look_at_ALL Or Not look_in_def, 3, 4) To IIf(look_in_def, 4, 3)
                    f_pos& = 0: s_pos = 1: next_pos = 1
                    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    While CBool(next_pos) And Not found
                      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      Dim next_target$: next_target = db_(CT_FnGetNextWord(s_pos, whole_text, f_pos, , True))
                      s_pos = f_pos + 1
                      If next_target <> "" Then '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        next_pos = InStr(next_pos, .Cells(j, prev_c), next_target, vbTextCompare) 'FnGetText
                        If CBool(next_pos) Then If Not full_TEXT_S Then inc next_pos _
                                                                   Else: next_pos = 1 '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      Else: found = True: Exit For: End If: Wend: Next prev_c
              End If '----------------------------------------------------------------------------------------
'If j = 447 Then L0M 3
            Else: 'm_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_case_
                  If look_at_ALL Or Not look_in_def Then If sag(found, .Cells(j, 3) Like ("*" + find_text + "*")) Then prev_c = 3
                   If found Then L0M "found!", "CASED", .Cells(j, 3) Else If look_in_def Then If sag(found, .Cells(j, 4) Like ("*" + find_text + "*")) Then prev_c = 4
            End If 'm_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_casem_case
'If j = 447 Then L0M 4
            If found Then
Rem |fffd||fffd||fffd||fffd||fffd| by ROWS
              Set c = .Cells(j, prev_c) ': da_ c = "grep result" '####
              If s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then GoSub update_sID_Result Else GoTo passChecks
'chkMsg$ = "|fffd||fffd||fffd||fffd||fffd| by ROWS": GoSub checkInsID_Result '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| j-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'              If c Is Nothing Then found = False Else Exit For '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| checkInsID_Result
            End If
          End If
'If j = 447 Then L0M 5
Rem: |fffd||fffd||fffd||fffd| 1.2(FOR) <<<<<<<
nextJ: End With: Next j: If look_at_ALL Then new_jump = True
LogOn:
'     LM ">>>>>>>>>>>>": db_ "ExitJ: " & found & " = " & sID_Result 'GoSub checkTimeOutRtn - 180712 |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
' |fffd||fffd| ERU If Not found Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
' |fffd||fffd| ERU      If look_at_ALL Then If prev_c = 4 Then da_ False: prev_c = 3: prev_r = IIf(def_dir, 1, FnGetLastRow(i) + 1): GoTo M3
' |fffd||fffd| ERU
' |fffd||fffd| ERU     If Not look_in_def Then If Not between(i, 1, 3) Then prev_c = prev_c + row_step: _
' |fffd||fffd| ERU             If between(prev_c, 2, IIf(i = 0, 4, 6)) Then prev_r = IIf(def_dir, 1, FnGetLastRow(i) + 1): GoTo M3
' |fffd||fffd| ERU End If
      Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| OFF |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rem: <<< |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Rem: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rem: <*!*> |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Visible) <*!*> - the fastest ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      'LM "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        If tRange Is Nothing Or c Is Nothing Then 'first lap OR was_jump
            Dim from_r&, to_r&, to_c
            ss$ = "3": GoSub printFoundState
reRangeL:   With Sheets(FnWSCase(i)): from_r = IIf(def_dir, 1, 2): to_r = .UsedRange.rows.Count + IIf(def_dir, 0, 1)
            '!!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| look_at_ALL
            '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|),
            '|fffd| HTML |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'                If look_at_ALL Then '|fffd||fffd||fffd||fffd||fffd|
'                                               Set tRange = .Range("C" & from_r & ":" & "D" & to_r)
'                          If c Is Nothing Then If def_dir Then Set c = .Cells(from_r, 3) Else Set c = .Cells(to_r, 4)
'                Else:
                          to_c = IIf(look_in_def, "D", "C"): Set tRange = .Range(to_c & from_r & ":" & to_c & to_r)
                          If c Is Nothing Then to_c = IIf(look_in_def, 4, 3): Set c = .Cells(IIf(def_dir, from_r, to_r), to_c) _
                                          Else: Set c = .Cells(c.row + IIf(def_dir, 1, -1), c.Column) '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                End If
            prev_c = c.Column: prev_r = c.row: s_pos = 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ss$ = "4": GoSub printFoundState              '|fffd||fffd||fffd| CT_FnGetNextWord - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            On Error Resume Next: If Not full_TEXT_S Then s$ = find_text _
                                                     Else: s$ = db_(CT_FnGetNextWord(s_pos, find_text, f_pos, , True))
            'If strtcol& = 0 Then strtWS% = i: strtrow& = C.row: strtcol& = C.Column '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
retryL:     If (Not c Is Nothing) Then '#### |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                db_ c.Worksheet.name & c.Address
                'if C.row = prev_r Then prev_r if def_dir
            End If: End With
Rem |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|1
            Set c = tRange.find(What:=s$, after:=c, LookIn:=xlValues, LookAt:=xlPart, SearchOrder:= _
                                xlByColumns, SearchDirection:=IIf(def_dir, xlNext, xlPrevious), MatchCase:=m_case)
            If (Not c Is Nothing) Then
chkMsg$ = LM("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|1"): GoSub checkInsID_Result
                'das C = "grep result" '####
                GoSub checkTimeOutRtn '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TimeOut
                'ss$ = "1": GoSub printFoundState
                'das Sheets(FnWSCase(i)).Cells(C.row, 1) = "80_2_1"
                GoSub checkRngRoutine: If range_missed Then GoTo njL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                GoSub checkCatRoutine: If Not all_right Then GoSub cutRange: GoTo retryL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cCat$
                GoSub checkTXTRoutine: If Not all_right Then GoSub cutRange: GoTo retryL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| full_TEXT_S
            End If
            On Error GoTo 0: Dim svdR&, svdC%: If (Not c Is Nothing) Then svdR& = c.row: svdC% = c.Column  'LM C.row & "ws" & i & " " & j & " " & new_jump
Rem |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|2
        Else: If def_dir Then Set c = tRange.FindNext(after:=c) _
                         Else: Set c = tRange.FindPrevious(after:=c) 'das Sheets(FnWSCase(i)).Cells(C.row, 1) = "80_2_1"     'TEST
              If (Not c Is Nothing) Then
chkMsg$ = LM("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|2"): GoSub checkInsID_Result
                    'das C = "grep result" '####
                    GoSub checkTimeOutRtn '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TimeOut
                    'ss$ = "2": GoSub printFoundState: db_ savedC$
                    If svdR& = c.row And IIf(active_filter, True, svdC% = c.Column) Then 'was savedC$ = C.Address - TimeOut
                       db_ i & ": " & c.Address & " vs " & svdC% & ":" & svdR&: GoTo njL 'wraparound occurs"
                    Else: GoSub checkRngRoutine: If range_missed Then GoTo njL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                          GoSub checkCatRoutine: If Not all_right Then GoTo retryL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cCat$
                          GoSub checkTXTRoutine: If Not all_right Then GoTo retryL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| full_TEXT_S
        End If: End If: End If
      End If: 'If Not C Is Nothing Then das C = "grep result"
      '___________________________________________________________________________________
Rem: MODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMODEMOD
GoTo passChecks                 ':1:
checkInsID_Result: If s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then If dbg_(sID_Result, " vs ", cid) Like "*}" & cid & "|*" Then Set c = Nothing: _
           If chkMsg$ <> "|fffd||fffd||fffd||fffd||fffd| by ROWS" Then GoTo passChecks '|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|.), "|fffd||fffd||fffd||fffd||fffd| by ROWS" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c = Nothing
          db_ chkMsg$: Return
cutRange: Set tRange = Sheets(FnWSCase(i)).Range(ConvertColNumToLetter$(tRange.Column) & tRange.row + IIf(def_dir, 1, 0) & ":" & _
                                                 ConvertColNumToLetter$(tRange.Column + tRange.Columns.Count - 1) & tRange.row + tRange.rows.Count - IIf(def_dir, 1, 2))
          Return
checkCatRoutine: all_right = True: If cCat$ <> "" Then _
                 all_right = CBool(InStr(1, Sheets(Index(i)).Cells(c.row, IIf(i = 4, 8, catCol)), cCat$)) _
                          Or CBool(InStr(1, Sheets(Index(i)).Cells(c.row, IIf(i = 4, 8, catCol)), Left(cCat$, Len(cCat$) - 1) & "_")) '|fffd||fffd||fffd||fffd||fffd|
                 If Not all_right Then db_ "noCat: """ & cCat$ & """ vs " & Sheets(Index(i)).Cells(c.row, IIf(i = 4, 8, catCol))
                 Return
checkTXTRoutine: all_right = True: f_pos = 0
                 If full_TEXT_S Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|...)
                    While sag(s2$, CT_FnGetNextWord(f_pos + 1, find_text, f_pos, , True)) <> ""
                          If Not hasIt(s2$, c.Text) Then all_right = False ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !!!
                    Wend: End If:
                 If Not all_right Then db_ "noTXT: " & i & " " & c.Column & "(" & prev_c & ") " & c.row & "(" & prev_r & ")"
                 Return
checkRngRoutine: range_missed = False
                 If Not rowSearchF Then
                     If strtWS% = i And loop_counter > 1 Then
                                If def_dir Then range_missed = Not (c.Column > strtcol& Or (c.Column = strtcol& And c.row >= strtrow&)) _
                                           Else: range_missed = Not (c.Column > strtcol& Or (c.Column = strtcol& And c.row <= strtrow&)) '>?
                            Else 'If s_method <> "|fffd||fffd||fffd||fffd||fffd| HTML" Then
                                If def_dir Then range_missed = Not (c.Column > prev_c Or (c.Column = prev_c And c.row >= prev_r)) _
                                           Else: range_missed = Not (c.Column < prev_c Or (c.Column = prev_c And c.row <= prev_r))
                 End If: End If: If range_missed Then ss$ = "missed": GoSub printFoundState
                 prev_c = c.Column: prev_r = c.row: Return
checkTimeOutRtn: 'Return '-- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TimeOut-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                 If Timer - startedT& >= TimeOut% Then waitF_long "TimeOut (" & TimeOut% & "s)": GoTo TimeOutL
                 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| TimeOut
                 If Not rowSearchF Then If strtWS% = 0 Then _
                 If (Not c Is Nothing) Then strtWS% = i: strtrow& = c.row: strtcol& = c.Column '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                 Return
printFoundState: Dim c_text, c_row, c_col: If (Not c Is Nothing) Then c_row = c.row: c_col = c.Column: c_text = Left(c.Text, 20)
                 db_ ss$ & ": eru" & i & " col " & c_col & "(p" & prev_c & IIf(strtWS% = i And loop_counter > 1, "|s" & strtcol&, "") & ") row " & _
                                           c_row & "(p" & prev_r & IIf(strtWS% = i And loop_counter > 1, "|s" & strtrow&, "") & ")" & _
                                           IIf(LCase(c_text) Like "*" & Replace(LCase(find_text), " ", "*") & "*", " - " & c_text, "") & " [" & loop_counter & "]"
                 Return
update_sID_Result: 'cid = Sheets(FnWSCase(i)).Cells(c.row, 1): da_ cid <> "80_2_1"      '!TEST
              'dbg "found |fffd||fffd| " & i & ": " & cid
              'If cid = "24_7" Then db_ i & ":(" & C.row & "," & C.Column & ")"
              If relevance Then '|{5}id|{4}id|...
                LM i & " : " & IIf(lc% = 0, "", c.Column & "_" & IIf(c.Column > lc%, "R", IIf(c.Column = lc%, "~", "L"))) & _
                       " : " & IIf(lr% = 0, "", IIf(c.row > lr%, "D", IIf(c.row = lr%, "~", "U"))) & " - " & c.row & _
                               IIf(strtWS% = i, " (" & strtrow& & ":" & strtcol& & ")", "") & " = " & Sheets(FnWSCase(i)).Cells(c.row, 1)
                newRate = 0: lr% = c.row: lc% = c.Column: f_pos = 0: pos% = 0 'reini
                Dim trm_wght: trm_wght = 10 '|fffd||fffd||fffd||fffd| term
                Dim pos_wght: pos_wght = 1 '|fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                'Dim def_wght: def_wght = 1 '|fffd||fffd||fffd||fffd| def
                                                                                Dim pos_val%, part_cnt%: part_cnt% = prsCount(" ", whole_text) + 1
                While sag(s2$, CT_FnGetNextWord(f_pos + 1, whole_text, f_pos, , True)) <> "": pos_val% = part_cnt% + 1 - inc(pos%)   '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (pos% = part|fffd|)
                                                                                              pos_val% = pos_val% * Len(s2$) '190923 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
                  Dim res_cnt%: res_cnt% = prsCount(LCase(s2$), LCase(Sheets(FnWSCase(i)).Cells(c.row, 4)))    'cnt in Def
                  'If cid = "33_31" Then db_ res_cnt%
        'TO DO : |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" ( sID_Result + sID_no_Result )
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. Next_ws_eruL) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Rate'a
            Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                  If hasIt("}" & cid & "|", sID_Result) Then
                    rate% = prsBetween("{", "}" & cid & "|", sID_Result, , , True): 'das cid <> "24_7" 'v1 newRate = rate + IIf(C.Column = 3, IIf(rate < 10, 10, 0), prsCount(LCase(find_text), LCase(C.Text))) '+ prsCount(find_text, Sheets(FnWSCase(i)).Cells(C.row, 3))
                    If hasIt(s2$, Sheets(FnWSCase(i)).Cells(c.row, 3)) Then newRate = rate + pos_val% * trm_wght 'IIf(rate < pos% * trm_wght, pos% * trm_wght, 0) 'in Term
                    If res_cnt% > 0 Then If pos = 1 Then newRate = rate% + IIf(c.Column = 4, res_cnt%, 0) _
                                                    Else newRate = rate% + IIf(c.Column = 4, res_cnt%, 0) + pos_val% * pos_wght 'IIf(rate < pos% * pos_wght, _
                                                                                                                       pos% * pos_wght, 0) 'in Def - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|++
                    'das cid <> "44_2" 'db_ "{" & rate% & "}" & cid & "|"
                    sID_Result = Replace(sID_Result, "{" & rate% & "}" & cid & "|", "{" & newRate & "}" & cid & "|"): db_ cid & "|1|" & find_text, cid = "80_2_1"
                    'db_ "{" & rate% + 1 & "}" & cid & "|": db_ "{" & inc(rate%) & "}" & cid & "|"  'Replace - ???
                  Else: 'v1 newRate = IIf(C.Column = 3, 10, prsCount(LCase(find_text), LCase(C.Text)))
                        If hasIt(LCase(s2$), Sheets(FnWSCase(i)).Cells(c.row, 3)) Then newRate = rate + IIf(rate < pos% * 10, pos% * 10, 0) 'in Term
                        'das cid <> "33_31"
                        If c.Column = 4 Then If pos = 1 Then newRate = newRate + res_cnt% _
                                   Else: If res_cnt% > 0 Then newRate = newRate + IIf(rate < pos% * pos_wght, pos% * pos_wght, res_cnt%) 'in Def - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|++
                        sadd sID_Result, "{" & newRate & "}" & cid & "|": db_ cid & "|3|" & find_text, cid = "80_2_1"
    inc sID_cnt%: End If '"{1}"
                Wend
              Else: 'IIf2 sID_Result, Not hasIt("|" & cid & "|", sID_Result), sID_Result & cid & "|": db_ cid & "|2|" & find_text, cid = "80_2_1":
                  If Not hasIt("|" & cid & "|", sID_Result) Then sadd sID_Result, cid & "|": inc sID_cnt%
              End If: If sID_cnt% > 200 Then GoTo TimeOutL 'NEW 190104 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!!! c WaitMessage |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         Call WaitMessage: DoEvents: GoSub checkTimeOutRtn: Return 'NEW 190104 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TimeOut
passChecks: '_____________________________________________________________________________
Rem: <*?*> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <*?*> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'?????????????????????????????????????????????????????
'?????????????????????????????????????????????????????????????????????????????????????????
      If (Not c Is Nothing) Then
Rem:    TEMP checks:     's_method = "|fffd||fffd||fffd||fffd||fffd| HTML"
        If Not look_at_ALL Then ctext = FnGetText(c)
        '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| MS Excel)
        GoSub checkRngRoutine: found = Not range_missed '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If found Then
          If c.row = 1 Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|1": range_missed = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!

          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If Not (range_missed Or new_jump) And (whole_word) Then
            If find_text = whole_text Then
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If m_case Then pos = InStr(1, FnGetText(c), whole_text, vbBinaryCompare) - 1 _
                        Else: pos = InStr(1, FnGetText(c), whole_text, vbTextCompare) - 1
              If pos > 0 Then range_missed = FnIsLetter(Mid$(FnGetText(c), pos, 1))
              If Not range_missed Then pos = pos + Len(whole_text) + 1: _
                 If pos <= Len(FnGetText(c)) Then range_missed = FnIsLetter(Mid$(FnGetText(c), pos, 1))
            Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
              Dim check_result As Boolean
Rem 2: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Like)
              If look_at_ALL Then
                ctext$ = "": For ws_eru = 1 To 3: For col% = termcol To defcol: ctext$ = ctext$ & " " & _
                    FnGetTxtFromID$(Sheets(FnWSCase(i)).Cells(c.row, idcol), ws_eru, col%): Next: Next 'term1+def1+term2+...
                s_pos = 1: While sag(next_word, CT_FnGetNextWord(s_pos, whole_text, f_pos, , True)) <> "" And Not check_result: dbg_ i, next_word
                             check_result = Not ctext$ Like "*" & next_word & "*": s_pos = f_pos + 1: Wend: check_result = Not check_result: db_ ctext$
              GoTo M2: End If
Rem: Classic Searching
              next_pos = 1
              '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
              While next_pos < Len(FnGetText(c)) And Not check_result
                s_pos = 1
                '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                next_word = CT_FnGetNextWord(s_pos, find_text, f_pos, , True)
                s_pos = f_pos + 1
                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                If m_case Then pos = InStr(next_pos, FnGetText(c), next_word, vbBinaryCompare) _
                          Else: pos = InStr(next_pos, FnGetText(c), next_word, vbTextCompare)
                If pos <> 0 Then next_pos = pos + Len(next_word) Else GoTo M2
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd|
                Dim f_target_pos%, s_target_pos%, next_target_word$:
                    next_target_word = CT_FnGetNextWord(pos, FnGetText(c), f_target_pos, , True)
                    s_target_pos = f_target_pos + 1
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                While next_word <> "" And next_target_word <> "" And pos <> 0
                  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                  If m_case Then pos = InStr(1, next_target_word, next_word, vbBinaryCompare) _
                            Else: pos = InStr(1, next_target_word, next_word, vbTextCompare)
                  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                  next_word = CT_FnGetNextWord(s_pos, find_text, f_pos, , True)
                  s_pos = f_pos + 1
                  next_target_word = CT_FnGetNextWord(s_target_pos, FnGetText(c), f_target_pos, , True)
                  s_target_pos = f_target_pos + 1
                  If next_word = "" And pos <> 0 Then check_result = True
                Wend
              Wend
M2:           If Not check_result Then range_missed = True
            End If
          End If
          If Not (range_missed Or new_jump) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (new)
foundL:     found = True
            If s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then
              GoSub update_sID_Result
            Else
Rem: <"|fffd||fffd||fffd||fffd||fffd||fffd||fffd|">
              If InStr(1, s_method, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If ActiveSheet.name <> FnWSCase(i) Then Sheets(FnWSCase(i)).Activate
                Call UnHideRoots(i, Cells(c.row, 1)): c.Select: |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_flg = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                If c.row = fin_row Then new_jump = True
            End If: End If
          Else: found = False 'new_jump = True
          End If
        Else: new_jump = True
        End If
Rem: <*!*> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <*!*>
      Else: new_jump = True
      End If '______________________________________________________________________
Rem: <*?*> |fffd||fffd||fffd||fffd||fffd| WS <*?*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      If new_jump Then '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
njL:    If def_dir Then inc i Else dec i
        i = decode(i, 0, 3, 4, 1): inc loop_counter: 'db_ i & " " & loop_counter
        If Mid(PF.cMode, 1, 1) <> "p" Then PF.setMode "p5"
        ShowProgressBar i, True: new_jump = False: found = False
      Set c = Nothing: End If
Rem: TimeOut-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Return |fffd| checkTimeOutRtn |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
     GoSub checkTimeOutRtn '*********************************************************
Wend: LM While_ '*********************************************************************
Rem: |fffd||fffd||fffd||fffd| 1(WHILE) <<<<<<<<<
'MsgBox loop_counter '=================================================================
'_____________________________________________________________________________
Rem: html Result ----------------------------------------------------------
If s_method = "|fffd||fffd||fffd||fffd||fffd| HTML" Then GoTo ResultHTML 'ResultHTMLlbl
If found Or |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_flg Then
Rem: <*!*> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! <*!*> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  LM "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":
  Call FindResultCleaning
  If Not |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_flg Then
LM 1: Sheets(FnWSCase(i)).Activate: LM 2: unLockWs: LM 3:
    Call UnHideRoots(i, Cells(c.row, 1)): c.rows.Hidden = False
    'Call LockWs '- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (W_mode)
    SUp True: c.Activate: ActiveWindow.SmallScroll ToLeft:=3
    If c.Column = defcol Then c.rows.UseStandardHeight = True 'termActivationOn 'NEW
  Else: Set c = ActiveCell: End If ' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Call unLockWs
  If find_text = whole_text Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If m_case Then pos = InStr(1, ctext, whole_text, vbBinaryCompare) _
              Else: pos = InStr(1, ctext, whole_text, vbTextCompare)
    If ActiveCell.Font.ColorIndex = inv(2) Then ActiveCell.Font.ColorIndex = inv(xlAutomatic)
    If pos <> 0 Then ActiveCell.Characters(start:=pos, _
      Length:=Len(whole_text)).Font.ColorIndex = inv(3)
  Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If whole_word Then
      '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
      check_result = False
      next_pos = 1
      Dim ci%: On Error Resume Next: ci = c.Font.ColorIndex: On Error GoTo 0 'Null
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      While next_pos < Len(ctext) And Not check_result
        If ci > 0 Then c.Font.ColorIndex = ci
        s_pos = 1
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        next_word = CT_FnGetNextWord(s_pos, find_text, f_pos, , True)
        s_pos = f_pos + 1
        '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If m_case Then pos = InStr(next_pos, ctext, next_word, vbBinaryCompare) _
                  Else: pos = InStr(next_pos, ctext, next_word, vbTextCompare)
        If pos <> 0 Then next_pos = pos + Len(next_word)
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd|
        next_target_word = CT_FnGetNextWord(pos, ctext, f_target_pos, , True)
        s_target_pos = f_target_pos + 1
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        While next_word <> "" And next_target_word <> "" And pos <> 0
        '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          If m_case Then pos = InStr(1, next_target_word, next_word, vbBinaryCompare) _
                    Else: pos = InStr(1, next_target_word, next_word, vbTextCompare)
          If ActiveCell.Font.ColorIndex = inv(2) Then ActiveCell.Font.ColorIndex = inv(xlAutomatic)
          If pos <> 0 Then ActiveCell.Characters(start:=f_target_pos - _
                                                        Len(next_target_word) + pos, _
                                                 Length:=Len(next_word)).Font.ColorIndex = inv(3)
          '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          next_word = CT_FnGetNextWord(s_pos, find_text, f_pos, , True)
          s_pos = f_pos + 1
          next_target_word = CT_FnGetNextWord(s_target_pos, ctext, f_target_pos, , True)
          s_target_pos = f_target_pos + 1
          If next_word = "" And pos <> 0 Then check_result = True
        Wend
      Wend
    Else
      s_pos = 1
      next_pos = 1
      next_word = CT_FnGetNextWord(s_pos, find_text, f_pos, , True)
      While next_word <> ""
        s_pos = f_pos + 1: 'If full_TEXT_S Then next_pos = 1 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| HTML" |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If m_case Then pos = InStr(next_pos, ctext, next_word, vbBinaryCompare) _
                  Else: pos = InStr(next_pos, ctext, next_word, vbTextCompare)
        If ActiveCell.Font.ColorIndex = inv(2) Then ActiveCell.Font.ColorIndex = inv(xlAutomatic)
        If pos <> 0 Then ActiveCell.Characters(start:=pos, _
          Length:=Len(next_word)).Font.ColorIndex = inv(3)
        next_pos = pos + Len(next_word)
        next_word = CT_FnGetNextWord(s_pos, find_text, f_pos, , True)
      Wend
    End If
  End If
  LM "|fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Rem: <*!*> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! <*!*> |fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Anchor False
  If runner = 13 Then setMode "DS", True: SetActiveWindow& SCSForm.t_hwnd Else Repaint
  Application.Visible = True
Else '<*X*> |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| <*X*>
  CommandButton4.Visible = False
  showBRICK 5: FindForm_Terminate True
End If: GoTo extL
Rem: TimeOut processing
TimeOutL: showBRICK 4: FindForm_Terminate True: If s_method <> "|fffd||fffd||fffd||fffd||fffd| HTML" Then GoTo extL
ResultHTML:
If def_dir And Not isFullPartOf(whole_text, "./_/|", "/") Then
   '|fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PDB                /* |fffd||fffd||fffd||fffd||fffd| |fffd| PBD */
   find_text = CT_FnGetNextWord(1, whole_text, f_pos) 'First Word
   If find_text = "" Then find_text = whole_text '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!
   With Sheets(wsLog): Set tRange = .Range("F:F"): Dim try_cnt% 'tc As Object
   f_pos = 0:
newFindL:              Set tc = tRange.find(What:=find_text, LookIn:=xlValues, LookAt:=xlPart, MatchCase:=False, _
                                         SearchOrder:=xlByColumns, SearchDirection:=xlNext): inc try_cnt%
    If Not tc Is Nothing Then    '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
Dim fcnt%, s_str$: found = True: If find_text <> whole_text Then _
     While found And sag(next_word, CT_FnGetNextWord(f_pos + 1, whole_text, f_pos)) <> "": inc fcnt%: found = tc.Text Like "*" & next_word & "*": Wend
         If found Then If sag(s_str, prsBefore("}" & .Cells(tc.row, 1) & "|", sID_Result)) <> "" Then sID_Result = prsBefore("{", s_str) & "{" _
            & prsAfter("{", s_str) & prsCount(find_text, tc.Text) * fcnt% & Mid(sID_Result, Len(s_str)) _
         Else sadd sID_Result, "{" & prsCount(find_text, tc.Text) * fcnt% & "}" & .Cells(tc.row, 1) & "|" '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If tc.row < .UsedRange.rows.Count And try_cnt% < 50 Then Set tRange = .Range("F" & tc.row + 1 & ":F" & .UsedRange.rows.Count): GoTo newFindL 'to Next ID
       End If
  End With: Set tc = Nothing: Set tRange = Nothing
End If: If sID_Result <> "|" Then ResultHTML sID_Result, whole_text$, Not def_dir: db_ sID_Result _
                             Else: CommandButton4.Visible = False: showBRICK 5: FindForm_Terminate True '<*X*> |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| <*X*>
GoTo extL
'=============================================================================
BCErrorHandler: If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbOKCancel, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Resume Next
extL: PF.setModeActual: 'TextBox1.SetFocus
AntiCrashL: Set c = Nothing: Set tRange = Nothing: Set tc = Nothing: Application.EnableCancelKey = xlInterrupt:
   ls "<", "StartSearching": End Sub


Private Sub TextBox1_onChange() 'bag - |fffd||fffd||fffd||fffd||fffd| TimeOut |fffd| html |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Change |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| KeyDown)
        If InStr(1, Trim$(TextBox1.Text), " ") = 0 Then CheckBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Else CheckBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Call FindResultCleaning: End Sub

Private Sub TextBox1_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): db_ psdCtrlFlg & "+" & KeyCode
        If KeyCode = 17 And psdCtrlFlg Then TBPlus = Not TBPlus: psdCtrlFlg = False '<Ctrl>
        End Sub

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): Dim s$: 'MsgBox KeyCode
  If Shift = 3 Then 'Ctrl+Shift+:
  ElseIf Shift = 2 Then   '<Ctrl> +
    psdCtrlFlg = False
    Select Case KeyCode
           Case 13, 39: KeyCode = 0: ToggleButton1.value = True: Call Image7_Click
           Case 70, 102, 128, 160: Call DoFind(1)      '+ F
                                   KeyCode = 0
           'Case 65, 97, 148, 228:  Call View_Add
           '                        Call DoFind(1)
           Case 69, 101, 147, 227: Call View_Edit
                                   Call DoFind(1)
           Case 68, 100, 130, 162: Call View_Delete
                                   Call DoFind(1)
           Case 17: psdCtrlFlg = True 'TBPlus = Not TBPlus '<Ctrl> - |fffd| Ctrl+V?
           Case 186: '<Ctrl> + <:>
                        KeyCode = 0: s$ = prsBefore|fffd|(2, ":", CStr(Now)) '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| 03.10.2016 9:26 - > 03.10.2016 09:26
                        TextBox1 = prsBefore(" ", s$) & " " & replicate(prsBetween(" ", ":", s$), "0", 2) & ":" & prsAfter(":", s$): GoTo n35L
           Case 55: Open_Browser_W id:=GetIDwithTerm$("User Actions") ', freeW:=True '<?>
    End Select
    
  ElseIf KeyCode = 13 Then 'Enter (+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Ctrl+Shift+:)
n35L: If IsDate(TextBox1) Then 're|de-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Len(TextBox1) = 16 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Clr+C |fffd||fffd||fffd||fffd| " - 181009_0946", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "181009 - " (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| YYddd) - ddd in 1..366
                                 TextBox1 = "_" & TextBox1 & Chr(13) & n35$(|fffd||fffd||fffd||fffd||fffd||fffd|$(TextBox1)) & " - " & |fffd||fffd||fffd||fffd||fffd||fffd|$(TextBox1, True)
                                 TextBox1.SelStart = 21: TextBox1.SelLength = 14: s$ = TextBox1.SelText 'n35$("10111012") 'abac
              toClipboard Mid(s$, 4, 6) & " - ": End If
    ElseIf Left(TextBox1, 1) = "!" And Right(TextBox1, 1) = "!" Then '30->"AD" or toNum: "AD"->30
        s$ = Replace(TextBox1, "!", ""): TextBox1 = TextBox1 & " = " & ConvertColNumToLetter$(s$, Not IsNumeric(s$)): Exit Sub
    Else: StartSearching True, 13 'Call CommandButton1_Click
    End If: KeyCode = 0
    'CommandButton1.SetFocus
    
  ElseIf KeyCode = 27 Then 'ESC key - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. (Forced FRC or Exit)
    KeyCode = 0: If Image4.Visible Or Image5.Visible Then FindResultCleaning _
                                   Else setMode "DS": SetActiveWindow& SCSForm.t_hwnd '~Unload Me
  ElseIf KeyCode = 38 Then 'Up Arrow
    KeyCode = 0: Call CommandButton2_Click
  ElseIf KeyCode = 40 Then 'Down Arrow
    KeyCode = 0: Call CommandButton1_Click
'  ElseIf KeyCode = 39 Then 'Right Arrow
'    KeyCode = 0: Dim baseWS%, ID$: baseWS = FnWSNum(ActiveSheet.name): ID = Cells(ActiveCell.row, 1) ': MsgBox baseWS & " " & id
'    If baseWS = 3 Then baseWS = 0
'    Call MoveToID(baseWS + 1, ID, ActiveCell.Column): Call setFocusOnForm(Me.name)
'  ElseIf KeyCode = 37 Then 'Left Arrow
'    KeyCode = 0: baseWS = FnWSNum(ActiveSheet.name): ID = Cells(ActiveCell.row, 1)
'    If baseWS <= 1 Then baseWS = 4
'    Call MoveToID(baseWS - 1, ID, ActiveCell.Column): Call setFocusOnForm(Me.name)
  ElseIf KeyCode = 9 Then KeyCode = 0: TBPlus.value = Not TBPlus.value '<Tab> - FindResultHTML Switcher
  'Else: db_ KeyCode
  Else: TextBox1_onChange
  End If
End Sub


Private Sub UserForm_Activate()
        If logging Then LogString ("in   FindForm_Activate")
        'TEMP - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm_Activate |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
        On Error GoTo BCErrorHandler
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Dim lang%: lang = FnCalledFrom()
          If lang > 0 Then
            Select Case lang
                   Case 1: TextBox1.Text = EditForm.ComboBoxEnG.value
                   Case 2: TextBox1.Text = EditForm.ComboBoxRuG.value
                   Case 3: TextBox1.Text = EditForm.ComboBoxUaG.value
            End Select
          End If
          TextBox1.SetFocus
          'If ComboBox1.RowSource = "" Then '''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          '  lastRow = CStr(FnGetLastRow(1))
          '  lastRowABC = CStr(FnGetLastRow(4))
          '  ComboBox1.RowSource = WS1 + "!C2:C" + lastRow '+ ";" + _
                                  'WS2 + "!C2:C" + lastRow + ";" + _
                                  'WS3 + "!C2:C" + lastRow + ";" + _
                                  'WSA + "!B2:B" + lastRowABC + ";" + _
                                  'WSA + "!D2:D" + lastRowABC + ";" + _
                                  'WSA + "!F2:F" + lastRowABC
          '  MsgBox CStr(ComboBox1.RowSource)
          'End If
        If Not on_timess_flg Then SCForm.start_freelance '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If logging Then LogString ("out FindForm_Activate")
        Exit Sub
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| EditForm
BCErrorHandler:
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          Unload FindForm
End Sub

Private Sub UserForm_Layout() '|fffd||fffd||fffd||fffd||fffd| Activate (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Visible Then Exit Sub
        If logging Then LogString ("in   FindForm_Layout")
        If logging Then LogString ("out FindForm_Layout")
        End Sub

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
        If Button = fmButtonRight Then Ctrl_F
        If Button = fmButtonMiddle Then SCSForm.processSCSFormKeyDown 109
        End Sub


Private Sub UserForm_Terminate(): Call FindForm_Terminate: End Sub

'DataObject stores one piece of text of a specified format and keeps the text from the most recent operation.
'Private Sub UserForm_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal State As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
'If Data.GetFormat(1) = True Then MsgBox MyData.GetText: Cancel = True
'End Sub

'Private Sub UserForm_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
'MsgBox "UserForm_BeforeDropOrPaste" 'For a MultiPage or TabStrip (not Forms)
'End Sub
Attribute VB_Name = "Form_Callers"
Rem: CALLERS
'****************************************************
'* EditForm
'****************************************************

Sub View_Add(): EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Call View_Term: End Sub
'****************************************************
Sub View_Edit(): If Trim(Cells(ActiveCell.row, 1).Text) = "" Or ActiveCell.row = 1 Then Exit Sub
                EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Call View_Term: End Sub
'****************************************************
Sub View_Delete(): If Trim(Cells(ActiveCell.row, 1).Text) = "" Or ActiveCell.row = 1 Then Exit Sub
                EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Call View_Term: End Sub

'****************************************************
'* FindForm
'****************************************************
Sub testf(): Call Ctrl_F: End Sub


Sub DoFind(caller)
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:
'0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [Find]
'1 - |fffd||fffd||fffd||fffd||fffd| FindForm
'2 - |fffd||fffd||fffd||fffd||fffd| CFF
If logging Then LogString ("in   DoFind(" & caller & ")")
Select Case caller: Case 0, 1: ws = FnWSNum(ActiveSheet.name)
                        If FnFormIsLoaded("SCSForm") Then SCSForm.show 0: SCSForm.reParkW:   'reanimator
                        If Not (between(ws, 0, 4) Or ActiveSheet.name = "Dispetcher_") Then CF_DoFind: Exit Sub
                        If FnFormIsLoaded("FindForm") Then 'If Not .Visible Then Call FindForm_DoFind Else:
                          'If Between(ws, 0, 4) Or ActiveSheet.name = "Dispetcher_" Then
                           FindForm.setMode _
                           IIf(FindForm.cMode = "DS", "Gs", "DS"): SCSForm.focusMe 'Else FindForm.setMode "Ls" 'without Unload
                           If FnFormIsLoaded("SCSForm") Then If SCSForm.isDoppel Then Application.Visible = False '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Doppel
                        Else: remind: On Error Resume Next: FindForm.setMode "Ls": On Error GoTo 0: End If
                    Case 2: FindForm.setMode "Ls": End Select ': Call CF_DoFind
If logging Then LogString ("out DoFind")
'TEMP - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm_Activate |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
'MsgBox CBool(FindForm.Visible)
End Sub


'****************************************************
'* HyperForm
'****************************************************
Sub HyperTestorAuto(): HyperTestor QuickTest:=True: End Sub
Sub HyperTestorNoA(): HyperTestor QuickTest:=False: End Sub
Sub HyperTestor(Optional QuickTest As Boolean): If logging Then LogString ("in   HyperTestor")
                                                If IsMissing(QuickTest) Then QuickTest = settingsForm.cbxQuickTest
'Case |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Call remind  '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If ActiveSheet.name = WSI Then
  If ActiveCell.row = 1 Then
    Call CloneHunter
  Else
    With Sheets("Import").Columns("A:G")
        .Font.name = "Tahoma"
        .Font.Size = 10
        .WrapText = True
        .VerticalAlignment = xlTop  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        .HorizontalAlignment = xlLeft
    End With
  End If
ElseIf ActiveSheet.name = WS0 And _
       ActiveCell.row = 1 And ActiveCell.Column = 1 Then
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 4-|fffd| WS)
       Call unlockWB: UpdateContentFormatting: LockWB '!!|fffd||fffd||fffd| Call |fffd||fffd||fffd| label)
ElseIf ActiveSheet.name = WSA And _
       ActiveCell.row = 1 And ActiveCell.Column = 1 Then
  'WSA |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Call UpdateAbbrevFormatting
Else: StatForm.show: If QuickTest Then StatForm.focusMe: SendKeys "{ENTER}", True
End If: If logging Then LogString ("out HyperTestor")
End Sub


Sub View_CategoryForm()
CategoryForm.show ac_Modalless
End Sub
'****************************************************

Sub View_Category_Selector(): LM "View_Category_Selector"
If FnFormIsVisible("EditForm") Then currentCat = EditForm.TextBoxCat.tag _
                               Else currentCat = Cells(ActiveCell.row, catCol)
On Error GoTo makeL: CATForm.show (Modalless): Exit Sub
makeL: Call MakeCATForm: Call waitF: CATForm.show (Modalless) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Auto
End Sub


'####################################################
'# OTHER
'####################################################

'* WebForm
'****************************************************
Sub Open_Browser()
  Dim addrStr As String: addrStr = Trim(Replace(Cells(ActiveCell.row, 4).Text, "localhost", "127.0.0.1"))
  If posFirst(Chr(10), addrStr) Then addrStr = prsBefore(Chr(10), addrStr)
  If posFirst(Chr(13), addrStr) Then addrStr = prsBefore(Chr(13), addrStr)
  If posFirst(" --", addrStr) Then addrStr = prsBefore(" --", addrStr) 'comments
  Call SCSForm.OpenHTTP(addrStr, Cells(ActiveCell.row, 3).Text, True)
End Sub

'freeW(indow) = |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, treeHtml$ |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "<TABLE> <font size=2> <TD>"
Function Open_Browser_W$(Optional ByVal id$, Optional justsave As Boolean, Optional treeHtml$, Optional test1$, Optional test2$, _
                         Optional noShield As Boolean, Optional freeW As Boolean, Optional maxLinkLen%, Optional chref%, Optional RootCaption$)
noTest = True '!|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (\html\*.*)               '2*V - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| html |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd|. "MAIN.XLSB!W_mode")
  If ActiveSheet.Index > wsLog Then Exit Function
  'If ID$ = "" Then ID$ = Cells(ActiveCell.row, 1): fn$ = "current" Else fn$ = ID$
  If id$ = "" Then id$ = Cells(ActiveCell.row, 1): fn$ = id$ Else fn$ = id$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| SearchResult(short))
  If exists("_1_" & id$) Then pathStr$ = ThisWorkbook.path & "\html\" & fn$ & IIf(treeHtml$ <> "" And Not useFRAMES, "_t", "") & ".html" Else Exit Function
'+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| html |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| FRAMES
If Not (Not noTest And Not justsave) Then If treeHtml$ <> "" Then If useFRAMES Then If dir(pathStr$) <> "" Then GoTo passFileL
'!|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"), |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|(html\)
'+|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| noTest = False (|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  Dim T As CTerm: Set T = New CTerm: Call T.Initialize(id$): LM T.id & " : " & T.term(2)
  'If Not justsave Then -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cat |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        AllCats$ = "<font size=2 color='#ff8855'><EM>" & Trim(getCatLong("", T.cat, True, True)) & "</EM></font>"
        For i% = 1 To prsCount(":", T.cat) - 1: cid$ = prsBetween|fffd|(i, ":", ":", T.cat): cistr = cid & ":" & GetCatByID(cid)
                    treeHtml$ = Replace(treeHtml$, cistr, "<font color=#4499FF>" & cistr & "</font>"): Next i%
  'End If
        'useFRAMES = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If useFRAMES Then HTML$ = T.toHTML _
                     Else HTML$ = IIf(treeHtml$ = "", "", "<BODY alink=#ff0000 bgcolor=#FFFFee>") & _
                                      clearFromTags("<cats>", "</cats>", treeHtml$) & Chr(13) & T.toHTML & IIf(treeHtml$ = "", "", "</TD></TABLE></BODY>")
      'TESTS
      '      test2$ = T.toHTML("d3"): test1$ = Replace(T.toHTML("d3"), "&nbsp;", "") 'TEMP
      If Not noTest Then
                                 If test1$ <> "" Then HTML$ = HTML$ & "<HR><font size=1>" & Replace(|fffd||fffd||fffd||fffd|HTML$(test1$, noShield), "&lt;BR&gt;", "<BR>") & "</font>"
                                 If test2$ <> "" Then HTML$ = HTML$ & "<HR><font size=1>" & Replace(|fffd||fffd||fffd||fffd|HTML$(test2$, noShield), "&lt;BR&gt;", "<BR>") & "</font>"
      End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID: Parent
  If treeHtml$ = "" Then
       Dim lngCatF As Boolean: RootID$ = FnGetRootID(T.id): On Error Resume Next: Roots$ = FnGetShadowFrom(2, RootID$): lngCatF = Len(AllCats$) > 100 Or prsCount("_", Roots$) > 2
                            If RootID$ <> "" Then sadd$ AllCats$, iif_$(lngCatF, "<br>") & "<font size=2 color='gray'>" & iif_$(Not lngCatF, " : ") & Roots$ & "</font>" _
                                             Else sadd$ AllCats$, iif_$(lngCatF, "<br>") & "<font size=2 color='gray'>" & iif_$(Not lngCatF, " : ") & "GEN" & "</font>" 'rootID$ & ": "
       On Error GoTo 0: sadd$ AllCats$, "<br>"   'sAdd$ AllCats$, "<br><EM><font size=2 color='gray'>" & T.id & ": " & "</EM></font>"
  Else: End If:         sadd$ AllCats$, "<br>"
'"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| <Ctrl+Shift+:>)
  HTML$ = injectionHTM$(HTML$, T.id, True)    'injection |fffd||fffd| markUpResult |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML {++}
'  If FnFormIsVisible("FindForm") Then If FindForm.TextBox1.Visible Then If FindForm.TextBox1 <> "" Then _
'        If Not FindForm.TextBox1 Like "_*.*.* *:* - *_*" Then _
'       HTML$ = markUpResult$(FindForm.TextBox1, prsBeforeUp("<TT>", HTML$, pos&)) & Mid0(HTML$, pos&) '!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd|! '{--}
    '|fffd||fffd||fffd|?|fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $
            'HTML1$ = HTML$: _
            HTML$ = markUpResult$(FindForm.TextBox1, prsBeforeUp("<TT>", HTML$, pos&)): _
       sadd HTML$, db_(Mid(HTML1$, zero(pos&, 10000)))
 ' End If: End If: End If
                      'injectionHTM$(HTML$, T.ID) 'injection |fffd||fffd||fffd||fffd||fffd| markUpResult |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML {--}
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| AdditionalMarkUpHTML
'   ' |fffd||fffd||fffd||fffd||fffd||fffd| id1|id2|... |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| presave-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'   i% = 0: IDs$ = "|": While sag(id$, prsBetween|fffd|(inc(i%), "html/", ".html", treeHtml$, , , True, True)) <> "": sadd IDs$, id$ & "|": Wend
'       If IDs$ <> "|" Then HTML$ = AdditionalMarkUpHTML(HTML$, IDs$): 'TEST: inDef = True  'dbg_ treeHtml$
Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  save2file AllCats$ & HTML$, pathStr$: w_caption$ = T.id & "|" & T.term(2) & IIf(treeHtml$ = "", "", "|tree"): Set T = Nothing
passFileL: missingEntry = False
  addrStr$ = "file:///" & Replace(pathStr$, "\", "/"): If justsave Then Open_Browser_W$ = addrStr$: Exit Function

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  If useFRAMES And treeHtml$ <> "" Then    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cats |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Tree-Frame
        Dim catStr$: short_catStr$ = db_(clearFromTags("<", ">", sag(catStr$, prsBefore("<BODY vlink=alink>", treeHtml$))))
        If sag(catCnt, (prsCount(":", short_catStr$) - 1) / 2) > 1 Then      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "cats"-Frame
            cIdStr$ = db_(|fffd||fffd||fffd||fffd||fffd|(":", short_catStr$)): 'rooted_catStr$ =
            catStr$ = "<BODY vlink=alink><div style=""font-size: 12px;""><font color=#ff8855><EM>" '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| catStr$
                    sadd catStr$, "<A HREF=""" & ThisWorkbook.path & "\html\tree.html"" target =""main""><font color=Gray size=2><i><TT>" _
                                                                                                      & "Cats:" & "</TT></i></font></A> "
'            For i% = 1 To (prsCount(":", short_catStr$) - 1) / 2: cname = prsBetween|fffd|(2 * i, ":", ":", short_catStr$) '|fffd||fffd||fffd||fffd||fffd||fffd| catStr$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                                                cid = prsBetween|fffd|(2 * i - 1, ":", ":", short_catStr$)
'                    sadd catStr$, "<A HREF=""" & ThisWorkbook.path & "\html\tree_" & cid & ".html"" target =""main"">" & cname & "</A>; ": Next i
                     sadd catStr$, sag(rooted_catStr$, getCatLong("", cIdStr$, True, True, True) & ";*") 'NEW (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| RootCat)
            For i% = 1 To (prsCount("}", rooted_catStr$)): '|fffd||fffd||fffd||fffd||fffd||fffd| catStr$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| NEW (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| RootCat)
                    cid = prsBetween|fffd|(i, "{", "}", rooted_catStr$, , fpos&)
                    cname = db_(prsBetween|fffd|(i, "}", ";", rooted_catStr$))
                    catStr$ = Replace(catStr$, "}" & cname & ";", _
                                    "}<A HREF=""" & ThisWorkbook.path & "\html\tree_" & cid & ".html"" target =""main"">" & cname & "</A>;")
            Next i: catStr$ = clearFromTags("{", "}", Replace(catStr$, ";*", ""))
                    sadd catStr$, "</EM></font></div>": save2file catStr, sag(CatPath$, ThisWorkbook.path & "\html\cats.html") '"cats"-Frame |fffd||fffd||fffd||fffd||fffd||fffd|
            catFrame = "<FRAMESET rows=""29,*""><frame src=""" & CatPath$ & """ name=""cats"">" '</FRAMESET>
            If Len(clearFromTags("<", ">", catStr)) < maxLinkLen% + 5 Then hFrame1 = catFrame Else hFrame2 = catFrame '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If: treeHtml$ = "<BODY vlink=alink>" & prsAfter("<BODY vlink=alink>", treeHtml$) '|fffd||fffd||fffd| catStr
        treeWidth% = Min(30 + maxLinkLen% * 9, 250) * sag(mulrez, (DDM.TBwidth + ScRt - ScLt) / 1280)
        If useMultiTree Then srep treeHtml$, "/multi-tree.css'>", "/multi-tree.css'>" & _
                                             "<style>#multi-derevo {width: " & treeWidth% & "px;}</style>"
        save2file clearFromTags("<cats>", "</cats>", treeHtml$), sag(treePath$, ThisWorkbook.path & "\html\tree.html") '"tree"-Frame
                                       Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| os10)
        Frame$ = "<FRAMESET cols=""" & treeWidth% + IIf(useMultiTree, Int(33 * mulrez * IIf(os10, 1, 0.7)), 0) & ",*"">" & hFrame1 & "<frame src=""" & treePath$ & "#" & chref% & """ name=""main"">" & IIf(hFrame1 <> "", "</FRAMESET>", "") & _
                                                              hFrame2 & "<frame src=""" & addrStr & """ name=""slave"">" & IIf(hFrame2 <> "", "</FRAMESET>", "") & "</FRAMESET>"
        save2file Frame$, sag(addrStr, ThisWorkbook.path & "\html\index.html"): End If '"|fffd||fffd||fffd| Frams |fffd||fffd||fffd||fffd||fffd||fffd|
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  SCSForm.OpenHTTP addrStr, blank(w_caption$, RootCaption$), True, freeW: setFocusOnForm "SCSForm"
Rem: |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| trees-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If useFRAMES And treeHtml$ <> "" Then
        If catCnt > 1 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| branch of trees |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "cats"-Frame
            For i% = 1 To (prsCount(":", short_catStr$) - 1) / 2: cname = prsBetween|fffd|(2 * i, ":", ":", short_catStr$)
                                                                cid = prsBetween|fffd|(2 * i - 1, ":", ":", short_catStr$)
              c_treeHtml$ = "<font color=Gray size=2><i><TT>" & cname & "</TT></i></font>" & prsBefore("<A HREF", treeHtml$)  '  "<BR>" &
              For j% = 1 To prsCount("<A HREF", treeHtml$)
                If db_(prsAfter("<cats>", sag(c_tree_part$, prsBetween|fffd|(j, "<A HREF", "</cats>", treeHtml$)))) Like "*:" & db_(cid) & ":*" _
                   Then sadd c_treeHtml$, "<A HREF" & c_tree_part$ & "</cats><BR>"
              Next j%: sadd c_treeHtml$, prsAfterLast("</cats>", treeHtml$)
              save2file clearFromTags("<cats>", "</cats>", c_treeHtml$), ThisWorkbook.path & "\html\tree_" & cid & ".html"
            Next i%
  End If: End If
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Private Function AdditionalMarkUpHTML(ByVal tabHTML$, ByVal IDs$, Optional inDef As Boolean): ls ">", "AdditionalMarkUpHTML"
                 'AdditionalMarkUpHTML = tabHTML$: Exit Function '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "(|fffd||fffd|./|fffd||fffd||fffd|./see |fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd|)" |fffd| UpdateDefinitionFormatting?
        If Replace(IDs$, "|", "") = "" Then AdditionalMarkUpHTML = tabHTML$: Exit Function
    IDs$ = Replace(Replace(Replace("*" & IDs$ & "*", "*|", ""), "|*", ""), "*", ""): 'dbg_ IDs$ '|id1|id2|...| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| id1|id2|...
Dim terms$, k%: terms$ = "|": For i% = 1 To sag(rescnt%, prsCount("|", IDs$) + 1): id$ = prsBetween|fffd|(i, "|", "|", IDs$): 'dbg_ IDs$ & Chr(10) & tabHTML$
    If dir(ThisWorkbook.path & "\html\" & id$ & ".html") = "" Then sadd terms$, "||" Else If inc(k%) > 255 Then rescnt% = prsCount("||", terms$): Exit For _
        Else For j% = 1 To 3: sadd terms$, IIf(isFullPartOf(sag(tmp$, FnGetTermFromID(j, id$)), terms$, "|"), "", "|" & tmp$): Next j: sadd terms$, "|"
Next i%: sadd terms$, "|" ':dbg_ terms$ '"||ru|ua||en|ru||||..."                              '|fffd||fffd||fffd||fffd||fffd| > 30, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
For i% = 1 To rescnt%: term$ = prsBetween|fffd|(i, "||", "||", terms$)
   If term <> "" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ERU?
   'dbg term
     If inDef Then
        Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| def/|fffd||fffd||fffd||fffd||fffd||fffd|).1
'        k% = 0: While dbg_(sag(def$, prsBetween|fffd|(inc(k%), "<TD VALIGN=TOP><font size=2>", "</TD>", tabHTML$, , , , True))) <> "" '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                          GoSub subRepProcess: Wend ' - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
         def$ = tabHTML$: GoSub subRepProcess '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| inDef-|fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| k%
   Else: def$ = tabHTML$: GoSub subRepProcess: End If: End If: Next i%: AdditionalMarkUpHTML = tabHTML$: Exit Function
subRepProcess: For j = 1 To prsCount("|", term) + 1: If sag(trm$, |fffd||fffd||fffd||fffd|HTML(prsBetween|fffd|(j, "|", "|", term))) = "" Then GoTo nextL: 'sRep$ tabHTML$, dbg_(trm$), "<u>" & trm$ & "</u>" - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If trm$ = "TD" Then GoTo nextL ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| html |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FaQ)   TEST |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PDB (to think...)
        'If hasIt(trm$, def$) Then dbg trm$
    If inDef Then def$ = Replace(def$, "<TD VALIGN=TOP width=150><font size=2><B>" & trm$ & "</B>", Left(trm$, 1) & "###" & Mid(trm$, 2)) '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd| <term> (|fffd||fffd||fffd||fffd|)
    Rem: + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| trm$ ("<A ... </A>" |fffd| "< ... >" (|fffd||fffd||fffd||fffd|.<FONT>) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If True Then 'Switcher
        pos = 1 'InStr(1, def$, "<table>")
            While sag(pos, InStr(pos + 1, def$, trm$, vbTextCompare)) > 0 'next
              If posLast("<A ", Left(def$, pos - 1)) < posLast("</A>", Left(def$, pos - 1)) _
             And posLast("<", Left(def$, pos - 1)) < posLast(">", Left(def$, pos - 1)) Then def$ = Left(def$, pos - 1) _
                                     & sag(t_str$, "<A target='_blank' HREF=" & ThisWorkbook.path & "\html\" & prsBetween|fffd|(i, "|", "|", IDs$) & ".html>" & Mid(def$, pos, Len(trm$)) & "</A>") & Mid(def$, pos + Len(trm$)): _
                           pos = pos + Len(t_str$)
            Wend: r_def = def$
        Else: r_def = Replace(def$, trm$, "<A target='_blank' HREF=" & ThisWorkbook.path & "\html\" & prsBetween|fffd|(i, "|", "|", IDs$) & ".html>" & trm$ & "</A>") 'replaced_def '!CASE-sensitive
        End If
    If inDef Then srep$ r_def, Left(trm$, 1) & "###" & Mid(trm$, 2), "<TD VALIGN=TOP width=150><font size=2><B>" & trm$ & "</B>" '<HR></font></TD>" - 100% |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| En
          ' If Not inDef Then
              def$ = r_def: GoTo nextL ' |fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| def/|fffd||fffd||fffd||fffd||fffd||fffd|).2
    '       sRep$ def$, "<TD VALIGN=TOP><font size=2>" & def$ & "</TD>", _
    '                   "<TD VALIGN=TOP><font size=2>" & r_def & "</TD>" ' - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
nextL:     Next j: tabHTML$ = def$: Return
ls "<", "AdditionalMarkUpHTML": End Function

Function clearFromTags$(spliter1$, spliter2$, ByVal s$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
While prsBetween(spliter1$, spliter2$, s$, spos&, fpos&, True) <> "": s$ = Left(s$, spos& - 1) & Mid(s$, fpos& + Len(spliter2$)): Wend: clearFromTags$ = s$: End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|{1}id|{4}id|..." -> "|{4}id|{3}id|..."
Private Function relevanceSort$(ByVal result$, ByVal rescnt%): 'relevanceSort$ = clearFromTags$("{", "}", result$): Exit Function
Dim srt_result$: For i% = 1 To rescnt%: cid$ = prsBetween|fffd|(i, "|", "|", result$, , l_fpos&): 'l_fpos%!
                                      crate% = prsBetween("{", "}", cid) '|fffd||fffd||fffd||fffd||fffd|!
    If srt_result$ = "" Then
       srt_result$ = "|" & cid '1st
    ElseIf prsBetween("{", "}", srt_result$) < crate% Then srt_result$ = "|" & cid & srt_result$
    Else: str_cnt% = prsCount("{", srt_result$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| by rate%
          For j% = 1 To str_cnt%: c_cid$ = prsBetween|fffd|(j, "|", "|", srt_result$ & "|", , fpos&): c_rate% = prsBetween("{", "}", c_cid$)
                       If c_rate < crate% Then Exit For Else l_fpos& = fpos&
          Next j: srt_result$ = Left(srt_result$, l_fpos& - 1) & "|" & cid & Mid(srt_result$, l_fpos&)
End If: Next i: relevanceSort$ = srt_result$ & "|": End Function 'msgbox relevanceSort$("|{1}id1|{2}id2|{3}id3|{4}id4|{2}id2|{3}id3|{5}id5|{1}id1|", 8)

Private Function addCustomColors(s$): addCustomColors = s$
            srep addCustomColors, "light-green", "#99FF99": srep addCustomColors, "light-gray", "#999999": '"lightgray" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            srep addCustomColors, "dark-gray", "#666666"
End Function

Private Function injectionHTM$(htm$, Optional id$, Optional pRedLine As Boolean): ls ">", "injectionHTM$", id$ 'injectionHTM$ = htm$: Exit Function
Dim result$, g_dir$: result$ = htm$: hm_dir$ = ThisWorkbook.path: g_dir$ = hm_dir$ & "\icons\htm\GIF\" 'home_dir
                     img_b$ = "<IMG vspace=1 border=0 width=12 height=12 SRC=""": img_e$ = """>&nbsp;"
  Dim gif$(20, 2): gif$(1, 1) = "{!}":      gif$(1, 2) = "warning.gif":         gif$(2, 1) = "{tu}":  gif$(2, 2) = "thumbs_up.gif"
                   gif$(3, 1) = "{^}":      gif$(3, 2) = "check.gif":           gif$(4, 1) = "{td}":  gif$(4, 2) = "thumbs_down.gif"
                   gif$(5, 1) = "{+}":      gif$(5, 2) = "add.gif":             gif$(6, 1) = "{sg}":  gif$(6, 2) = "star_green.gif"
                   gif$(7, 1) = "{-}":      gif$(7, 2) = "forbidden.gif":       gif$(8, 1) = "{sy}":  gif$(8, 2) = "star_yellow.gif"
                   gif$(9, 1) = "{?}":      gif$(9, 2) = "help_16.gif":         gif$(10, 1) = "{sr}": gif$(10, 2) = "star_red.gif"
                   gif$(11, 1) = "{x}":     gif$(11, 2) = "error.gif":          gif$(12, 1) = "{sb}": gif$(12, 2) = "star_blue.gif"
                   gif$(13, 1) = "{i}":     gif$(13, 2) = "information.gif":    gif$(14, 1) = "{:)}": gif$(14, 2) = "smile.gif"
                   gif$(15, 1) = "{lon}":   gif$(15, 2) = "lightbulb_on.gif":   gif$(16, 1) = "{:D}": gif$(16, 2) = "biggrin.gif"
                   gif$(17, 1) = "{loff}":  gif$(17, 2) = "lightbulb.gif":      gif$(18, 1) = "{:P}": gif$(18, 2) = "tongue.gif"
                   gif$(19, 1) = "{:(}":    gif$(19, 2) = "sad.gif":            gif$(20, 1) = "{:J}": gif$(20, 2) = "wink.gif"
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|                           '"-"-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "+" (<table CELLPADDING=10px> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  result$ = "<style>p{text-indent:" & IIf(pRedLine, "-", "+") & _
                                  "15px;margin:5px;}</style>" & result$ 'css |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| text-indent |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd|
'  result$ = Replace(Replace(result$, "{{p}}", "<p>"), "{{/p}}", "</p>") '             p(margin:5px 0px 0px 0px); - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'  result$ = Replace(Replace(result$, "{p}", "<p>"), "{/p}", "</p>")     '!|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {p} |fffd| gif$-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)!
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'  result$ = Replace(Replace(result$, "{{sup}}", "<sup>"), "{{/sup}}", "</sup>")   'superior - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) Ctrl+Shift+<s>
   result$ = Replace(Replace(result$, "{{s}}", "{{b<B>:</B>LightGray}}<sup>"), "{{/s}}", "</sup>{{/c}}") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd|) Alt+<s>
'  result$ = Replace(Replace(result$, "{{sub}}", "<sub>"), "{{/sub}}", "</sub>") 'substring - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) Ctrl+Alt+<s>
'  result$ = Replace(Replace(result$, "{{strong}}", "<strong>"), "{{/strong}}", "</strong>") 'STRONG - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl+Alt+Shift+<s>
  result$ = Replace(Replace(result$, "{{biu}}", "{{ubi}}"), "{{/biu}}", "{{/ubi}}") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  result$ = Replace(Replace(result$, "{{bui}}", "{{ubi}}"), "{{/bui}}", "{{/ubi}}")
  result$ = Replace(Replace(result$, "{{ibu}}", "{{ubi}}"), "{{/ibu}}", "{{/ubi}}")
  result$ = Replace(Replace(result$, "{{iub}}", "{{ubi}}"), "{{/iub}}", "{{/ubi}}")
  result$ = Replace(Replace(result$, "{{uib}}", "{{ubi}}"), "{{/uib}}", "{{/ubi}}")
  result$ = Replace(Replace(result$, "{{ubi}}", "{{u}}{{b}}{{i}}"), "{{/ubi}}", "{{/i}}{{/b}}{{/u}}")
  result$ = Replace(Replace(result$, "{{iu}}", "{{ui}}"), "{{/iu}}", "{{/ui}}")
  result$ = Replace(Replace(result$, "{{ui}}", "{{u}}{{i}}"), "{{/ui}}", "{{/i}}{{/u}}")
  result$ = Replace(Replace(result$, "{{ib}}", "{{bi}}"), "{{/ib}}", "{{/bi}}")
  result$ = Replace(Replace(result$, "{{bi}}", "{{b}}{{i}}"), "{{/bi}}", "{{/i}}{{/b}}")
  result$ = Replace(Replace(result$, "{{bu}}", "{{ub}}"), "{{/bu}}", "{{/ub}}")
  result$ = Replace(Replace(result$, "{{ub}}", "{{u}}{{b}}"), "{{/ub}}", "{{/b}}{{/u}}")
'  result$ = Replace(Replace(result$, "{{b}}", "<b>"), "{{/b}}", "</b>") 'bold
'  result$ = Replace(Replace(result$, "{{i}}", "<i>"), "{{/i}}", "</i>") 'italic
'  result$ = Replace(Replace(result$, "{{u}}", "<u>"), "{{/u}}", "</u>") 'underlined
  Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ?EoF? - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {{}} |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| <> (|fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  
 srep result$, "<B>:#</B>", "<B>:</B>#"
   
     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   If hasIt("{{v", result$) Then
      If hasIt("{{vr}}", result$) Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| toHTML()
    '            sadd result$, "<style>.vr {border-left: 3px solid GRAY}</style>" '3px OR thin OR thick - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    '  result$ = Replace(Replace(result$, "{{vr}}", "<div class='vr'>"), "{{/vr}}", "</div>"): End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      result$ = Replace(Replace(result$, "{{vr}}", "<div  style='border-left:3px  solid  #e03;  background-color:#fd9; text-align: Left; padding-left:10px; font-size:12px'>"), _
                                        "{{/vr}}", "</div>"): End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If hasIt("{{vv}}", result$) Then result$ = Replace(Replace(result$, "{{vv}}", _
                                                    "<div  style='border-left:3px  solid  Gray;  background-color:#ddd; text-align: Left; padding-left:10px; font-size:12px'>"), "{{/vv}}", "</div>")
      If hasIt("{{vg}}", result$) Then result$ = Replace(Replace(result$, "{{vg}}", _
                                                    "<div  style='border-left:3px  solid  Green;  background-color:#dfd; text-align: Left; padding-left:10px; font-size:12px'>"), "{{/vg}}", "</div>")
      If hasIt("{{vy}}", result$) Then result$ = Replace(Replace(result$, "{{vy}}", _
                                                    "<div  style='border-left:3px  solid  Orange;  background-color:#ffc; text-align: Left; padding-left:10px; font-size:12px'>"), "{{/vy}}", "</div>")
      If hasIt("{{vb}}", result$) Then result$ = Replace(Replace(result$, "{{vb}}", _
                                                    "<div  style='border-left:3px  solid; text-align: Left; padding-left:10px; font-size:12px'>"), "{{/vb}}", "</div>")
  End If
 
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   'While sag(span$, prsBetween("{{h<B>:</B>", "}}", result$)) <> "" ' class .hover CSS {{h:TERM||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}}
   While sag(span$, prsAfter("{{h<B>:</B>", result$)) <> "": span_$ = prsBefore|fffd|(prsBracketOut|fffd|("{{", span$), "}}", span$) 'TEST |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     begs$ = "": ends$ = "": span$ = span_$ 'Replace(clearFromTags("<", ">", (Replace(span_$, "<br>", Chr(10))), Chr(10), "<br>") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     If hasIt("|", span$) Then
        If sag(href$, prsAfter("||", span$)) <> "" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|+|fffd||fffd||fffd||fffd||fffd||fffd|
               href$ = clearFromTags("<", ">", href$)
               href$ = Replace(UCase(Replace(Replace(Trim(Replace(href$, "&nbsp; ", " ")), " ", "%20"), "\", "/")), "FS:", "file:///" & ThisWorkbook.path & "/PDB/_FileStorage_/")
               begs$ = "<A target='_blank' HREF='" & href$ & "'>"
               ends$ = "</A><IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\" & IIf(Right(prsBeforeUp("#", href$), 4) = ".PDF", "f_ext/pdf.dib", "settings5.dib") & "'>"
        span$ = clearFromTags("<", ">", prsBefore("||", span$)): End If
        result$ = Replace(result$, "{{h<B>:</B>" & span_$ & "}}", begs$ & "<SPAN class='block'><SPAN class='hover'>{{b<B>:</B>#3aaeda;c<B>:</B>white<B>|</B>&nbsp;" _
                        & noDblSpace(Trim(Replace(prsBefore("|", span$), "&nbsp; ", " "))) & "&nbsp;}}{{sup}}" & _
                          blank(ends$, "<a title='" & clearFromTags("<", ">", Trim(Replace(prsAfter("|", span$), "&nbsp; ", " "))) & _
                                "' href='#' target='_blank'>{{b<B>:</B>white;c<B>:</B>#3aaeda<B>|</B><B>?</B>}}</a>") & "{{/sup}}</SPAN> <SPAN class='hidden'>" _
                                         & Trim(Replace(prsAfter("|", span$), "&nbsp; ", " ")) & "</SPAN></SPAN>")
    Else: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSS: term=definition
        If sag(href$, prsAfter("=", span$)) <> "" Then begs$ = "<a title='" & clearFromTags("<", ">", Trim(Replace(prsAfter("=", span$), "&nbsp; ", " "))) & _
                                "' href='#' target='_blank'>": ends$ = "</a>"
            result$ = Replace(result$, "{{h<B>:</B>" & span_$ & "}}", begs$ & "{{b<B>:</B>white;c<B>:</B>#3aaeda<B>|</B>" & _
                      Trim(Replace(prsBeforeUp("=", span$), "&nbsp; ", " ")) & "}}" & ends$) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "=" |fffd||fffd||fffd||fffd||fffd||fffd| blue/white |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
   Wend
 
     '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  While sag(span$, prsBetween("{{b<B>:</B>", "}}", result$)) <> "" '{{b:#FFFFaa;c:RED}} |fffd||fffd||fffd| {{b:#FFFFaa}} |fffd||fffd||fffd| {{b:#FFFFaa | TEXT }} -short
        If hasIt("|", span$) Then 'short - {{b:#FFFFaa;c:RED | TEXT}} !!!|fffd||fffd||fffd||fffd| short - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              result$ = Replace(result$, "{{b<B>:</B>" & span$ & "}}", "<SPAN STYLE=BACKGROUND-COLOR:" & addCustomColors(prsBeforeUp(";", prsBefore("<B>|</B>", span$))) & _
                                                                    blank(";color:" & addCustomColors(prsBetween(";c<B>:</B>", "<B>|</B>", span$)), "", ";color:") & ">" & _
                                            prsAfter("<B>|</B>", span$) & "</SPAN>")  '<SPAN STYLE=BACKGROUND-COLOR:GREEN;color:RED> Text </SPAN>)
        Else: result$ = Replace(result$, "{{b<B>:</B>" & span$ & "}}", "<SPAN STYLE=BACKGROUND-COLOR:" & addCustomColors(prsBeforeUp(";", span$)) & _
                                                                    blank(";color:" & addCustomColors(prsAfter(";c<B>:</B>", span$)), "", ";color:") & ">")
        End If: Wend: While sag(span$, prsBetween("{{c<B>:</B>", "}}", result$)) <> "" '{{c:RED}} |fffd||fffd||fffd| {{c:#FFFFaa | TEXT }} -short
            If hasIt("|", span$) Then 'short
                      result$ = Replace(result$, "{{c<B>:</B>" & span$ & "}}", "<SPAN STYLE=color:" & addCustomColors(prsBefore("<B>|</B>", span$)) & ">" & _
                                            prsAfter("<B>|</B>", span$) & "</SPAN>")  '<SPAN STYLE=color:RED> Text </SPAN>
                Else: result$ = Replace(result$, "{{c<B>:</B>" & span$ & "}}", "<SPAN STYLE=color:" & addCustomColors(span$) & ">") '<SPAN STYLE=color:RED>
        End If: Wend: result$ = Replace(result$, "{{/c}}", "</SPAN>")
  '<wiki>
  While sag(W$, prsBetween("{w<B>:</B>", "}", result$)) <> "" '{{w:OLAP}}
        If hasIt("||", W$) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Alias
                      cW$ = db_(clearFromTags("<", ">", W$)) '{{w:+|fffd||fffd||fffd||fffd||fffd| || Alias}}  '+ |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
                      result$ = Replace(result$, "{w<B>:</B>" & W$ & "}", "<A HREF='https://ru.wikipedia.org/wiki/" & prsAfter("||", cW$) & "'>" _
                              & prsBefore("|", cW$) & "</A>" & "<IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\htm\wikipedia.jpg'>")
        ElseIf hasIt("|", W$) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL
                      cW$ = db_(clearFromTags("<", ">", W$)) '{{w:+|fffd||fffd||fffd||fffd||fffd| | URL}}  '+ |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
                      result$ = Replace(result$, "{w<B>:</B>" & W$ & "}", "<A HREF='" & Replace(Replace(prsAfter("|", cW$), "&nbsp; ", ""), "&" & Chr(1), "&") & "'>" _
                              & prsBefore("|", cW$) & "</A>" & "<IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\htm\wikipedia.jpg'>")
        Else:         result$ = Replace(result$, "{w<B>:</B>" & W$ & "}", "<A HREF='https://ru.wikipedia.org/wiki/" & W$ & "'>" & W$ & "</A>" & _
                                    "<IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\htm\wikipedia.jpg'>")
        End If: Wend: While sag(W$, prsBetween("{wu<B>:</B>", "}", result$)) <> "" '{{wu:OLAP}}
                      result$ = Replace(result$, "{wu<B>:</B>" & W$ & "}", "<A HREF='https://uk.wikipedia.org/wiki/" & W$ & "'>" & W$ & "</A>" & _
                                    "<IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\htm\wikipedia.jpg'>")
                Wend: While sag(W$, prsBetween("{we<B>:</B>", "}", result$)) <> "" '{{we:OLAP}}
                      result$ = Replace(result$, "{we<B>:</B>" & W$ & "}", "<A HREF='https://en.wikipedia.org/wiki/" & W$ & "'>" & W$ & "</A>" & _
                                    "<IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\htm\wikipedia.jpg'>")
                Wend
 'links - {{a:+|fffd||fffd||fffd||fffd||fffd| | URL}}  '+ |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
  While sag(W$, prsBetween("{a<B>:</B>", "}", db_(result$))) <> "": ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {{h}} |fffd| links, |fffd||fffd| clearFromTags |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
 'While sag(W$, prsAfter("{a<B>:</B>", db_(result$))) <> "": W$ = prsBefore|fffd|(prsBracketOut|fffd|("{", W$), "}", W$) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {}
       cW$ = db_(clearFromTags("<", ">", W$)): href$ = Replace(UCase(Replace(Replace(Trim(Replace(prsAfter("|", cW$), "&nbsp; ", " ")), " ", "%20"), "\", "/")), "FS:", "file:///" & ThisWorkbook.path & "/PDB/_FileStorage_/")
       'cW$ = W$: href$ = Replace(UCase(Replace(Replace(Trim(Replace(clearFromTags("<", ">", prsAfter("|", cW$)), "&nbsp; ", " ")), " ", "%20"), "\", "/")), "FS:", "file:///" & ThisWorkbook.path & "/PDB/_FileStorage_/")
       result$ = Replace(result$, "{a<B>:</B>" & W$ & "}", "<A" & IIf(sag(plusFlg, Left(cW$, 1) = "+"), "", " target='_blank'") & " HREF='" & Replace(LCase(href$), "&" & Chr(1), "&") & "'>" & _
                 Replace(prsBetweenDown$("->+", "|", "->" & cW$), "->", "") & IIf(plusFlg, "&nbsp; ", "") & "</A>" & _
        "<IMG vspace=1 border=0 width=10 height=10 SRC='" & hm_dir$ & "\icons\" & IIf(Right(prsBeforeUp("#", href$), 4) = ".PDF", "f_ext/pdf.dib", IIf(plusFlg, "MSN.ico", "settings5.dib")) & "'>")
                Wend                                                               '! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| images |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ICO |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| .dib
'<marquee> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
While sag(W$, prsBetween("{m<B>:</B>", "}", result$)) <> "" '{m:150(|fffd||fffd||fffd|.) |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}
      result$ = Replace(result$, "{m<B>:</B>" & W$ & "}", "<marquee Scrolldelay=150 width=" & blank(prsNumeric(W$, True, after$), 122) & "><i>" & _
                            "<font size=2 color=GRAY>" & after$ & "</font></marquee>")
                Wend
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  result$ = Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(prsBefore("<table CELLSPACING = 10>", result$, spos&), "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|{loff}"), _
    "|fffd||fffd||fffd||fffd||fffd|{loff}|fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|{loff}"), "|fffd||fffd||fffd||fffd||fffd|{loff}|fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|{loff}"), "|fffd||fffd||fffd||fffd||fffd|{loff}|fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|{loff}"), "|fffd||fffd||fffd||fffd||fffd|{loff}|fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|{loff}"), "|fffd||fffd||fffd||fffd||fffd|{loff}|fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|{loff}"), "|fffd||fffd||fffd||fffd||fffd|{loff}|fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|"), _
        "{loff}&nbsp;", "{loff}") & Mid(result$, Max(1, spos&)), "|fffd||fffd||fffd||fffd|<B>.", "|fffd||fffd||fffd||fffd|.{loff}"), "|fffd||fffd||fffd||fffd|<B>.", "|fffd||fffd||fffd||fffd|.{loff}"), "|fffd||fffd||fffd||fffd|<B>.", "|fffd||fffd||fffd||fffd|.{loff}"), "|fffd||fffd||fffd||fffd|<B>.", "|fffd||fffd||fffd||fffd|.{loff}"), _
            "Sample", "<font size=1 color=GRAY><u>Sample</u>{loff}</font>"), "sample", "<font size=1 color=GRAY><u>sample</u>{loff}</font>") '|fffd|/|fffd||fffd||fffd||fffd||fffd||fffd|(|fffd|){loff} |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  result$ = Replace(result$, "|fffd||fffd||fffd||fffd||fffd||fffd|<B>:", "|fffd||fffd||fffd||fffd||fffd||fffd|{lon}<B>:")
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| {{}}
result$ = Replace(Replace(result$, "{{i}}", "<i>"), "{{/i}}", "</i>") 'italic
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| gif$ ({i} |fffd||fffd||fffd||fffd|.)
For i% = 1 To 20: result$ = Replace(result$, Replace(Replace(gif$(i%, 1), ":", "<B>:</B>"), "^", "<B>^</B>"), img_b$ & g_dir$ & gif$(i%, 2) & img_e$): Next i%
If id$ = "" Then GoTo passL Else i% = 0 'PDB code.htm injection
                            PDB_path$ = hm_dir$ & "\PDB\" & id$ & "\"
    While sag(fnm$, Replace(clearFromTags$("<", ">", prsBetween|fffd|(inc(i), "{{", "}}", result$, spos&, fpos&)), "&nbsp;", "")) <> "": On Error GoTo passL 'fnm$ c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. (?:* etc.)
       If sag(Comment$, prsBefore(":", fnm$)) <> "" Then fnm$ = prsAfter(":", fnm$): Comment$ = "<font size=1 color=GRAY><u>" & _
              Comment$ & IIf(isFullPartOf(LCase(Comment$), "result|sample", "|"), img_b$ & g_dir$ & gif$(17, 2) & """></u>", "</u>") & ":&nbsp; </font>" _
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 5 |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If Len(fnm$) >= 5 Then dbg fnm$: If dir(PDB_path$ & LTrim(fnm$)) <> "" Then dec i: result$ = Replace(result$, Mid(result$, spos&, fpos& - spos& + 1), Comment$ & replicate("", "&nbsp; ", 7 * (Len(fnm$) - Len(LTrim(fnm$)))) & loadFromFile$(PDB_path$ & LTrim(fnm$))) Else dbgl fnm$ '180116 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Wend ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd|                                                                            '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|           '(|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| dir |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| JScript)
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {{}} |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| <> (|fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
             result$ = Replace(Replace(result$, "{{", "<"), "}}", ">")
passL: injectionHTM$ = Replace(result$, "<br>", "<br>" & Chr(10) & Chr(13)):
Rem: {++} markUpResult$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML$ {++}
If FnFormIsVisible("FindForm") Then If FindForm.TextBox1.Visible Then If FindForm.TextBox1 <> "" Then _
        If Not FindForm.TextBox1 Like "_*.*.* *:* - *_*" Then _
                injectionHTM$ = markUpResult$(FindForm.TextBox1, injectionHTM$)
ls "<", "injectionHTM$": End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| FindForm
Sub ResultHTML(result$, find$, Optional short As Boolean): If result$ = "" Then Exit Sub Else rescnt% = prsCount("|", result$) - 1
                                     ls ">", "ResultHTML": If Left(result$, 2) = "|{" Then rate_result$ = relevanceSort$(result$, rescnt%): _
                                                              result$ = clearFromTags$("{", "}", db_(rate_result$)) '|{5}id5|{4}id4|... -> '|id5|id4|...
Dim T As CTerm: Set T = New CTerm: pathStr$ = ThisWorkbook.path & "\html\SearchResult.html"
Dim HTML$: HTML$ = "<font size=2><B>" & rescnt% & " Search Results</B> for </font>&#39;<font size=2 color=RED>" & markUpResult$(find$, |fffd||fffd||fffd||fffd|HTML$(|fffd||fffd||fffd||fffd|HTML(noDspace$(find$)))) & "</font>&#39;"
If False Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Id
  resultStr$ = "<font size=2>" 'main font
  For i% = 1 To rescnt%: id$ = prsBetween|fffd|(i, "|", "|", result$)
             sadd resultStr$, "<font size=1 color=GRAY>" & i% & "# </font>" & "<a href=##" & i% & ">" & id$ & "</a>" & "/" 'to Show
  Next i:    sadd resultStr$, "</font>"
             sadd HTML$, " with " & resultStr$ 'TEST rate_result$/resultStr$
'Else: sadd HTML$, " with " & "<HR>"
End If
Dim tabHTML$, catColl As New Collection, CatsDistinct$, prevCatsDistinct$, _
              AllRoots$, manyCatsFlg As Boolean: 'tabHTML$ = "<table>" - |fffd| manyCats |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  For i% = 1 To rescnt%: id$ = prsBetween|fffd|(i, "|", "|", result$): Call T.Initialize(id$)
    AllCats$ = "<font size=2 color='#ff8855'><EM>" & Trim(getCatLong("", T.cat, True, True)) & "</EM></font>"
    CatsDistinct$ = noDouble$(":", CatsDistinct$ & T.cat): 'db_ CatsDistinct$ & " = " & T.cat
    RootID$ = FnGetRootID(T.id): If RootID$ <> "" Then sadd$ AllCats$, "  <font size=2 color='gray'>: " & |fffd||fffd||fffd||fffd|HTML(FnGetShadowFrom(2, RootID$)) & "</font>"
    'If rootID$ <> "" Then sadd$ AllCats$, "  <font size=2 color='gray'>" & rootID$ & ": " & FnGetTermFromID(2, rootID$) & "</font>" _
                      Else sadd$ AllCats$, "  <font size=2 color='gray'>" & "GEN" & "</font>"
    rateS$ = prsBetween|fffd|(i%, "{", "}", rate_result$): lid% = Len(id$) + Len(rateS$) + 1: lidS1$ = Left(id$, 10 - Len(rateS$) - 1) & "<BR>"
                                                      If lid > 10 Then lidS2$ = Mid(id$, 10 - Len(rateS$)) & "<BR>" Else lidS2$ = "":
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    If Not manyCatsFlg Then If prsCount(":", CatsDistinct$) > 2 Then manyCatsFlg = True: If prevCatsDistinct$ <> "" Then _
       cat$ = GetCatByID(Replace(prevCatsDistinct$, ":", "")): catColl.Add tabHTML$, cat$: _
       dbg_ 11, prsAfter("<font size=2><B>", prsBefore("</B></B><HR>", tabHTML$)), cat$: _
       If sag(Root$, prsBefore("_", cat$)) <> "" Then catColl.Add tabHTML$, Root$: sadd AllRoots$, "|" & Root$: _
       'dbg_ 12, prsafter("<font size=2><B>", prsbefore("</B></B><HR>", tabHTML$)), Root$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| toHTML
    itemHTML$ = injectionHTM$("<TR><TD VALIGN=TOP WIDTH=10><font size=1 color=GRAY>" & rateS$ & "<font color=WHITE># " & lidS1$ & lidS2$ & _
                                                        "/</font></TD><TD>" & AllCats$ & T.toHTML(, find$, i%, True, short) & "</TD></TR>", T.id) '& "<BR>"
Rem: |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd|. <EM><B>Coding</B>: Basic; SQL; <B>Soft</B>: MS Office_Excel_PivoT</EM>
    If manyCatsFlg Then
        scat$ = "": cats$ = "<EM>" & prsBetween("<EM>", "</EM>", itemHTML$) & "</EM>" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not hasIt(": ", cats$) Then catsnew$ = cats$ Else _
        catsnew$ = Replace(Replace(Replace(Replace(cats$, ": ", ": ["), "; ", "]; ["), "; [<B>", "; <B>"), "</EM>", "]</EM>")
          For c% = 1 To prsCount(":", T.cat) - 1: cat$ = GetCatByID(prsBetween|fffd|(c%, ":", ":", T.cat)): 'db_ cat$
                           If sag(Root$, prsBefore("_", cat$)) <> "" Then scat$ = prsAfter("_", cat$): 'db_ scat$
            If scat$ = "" Then 'truly ROOT
                             Root$ = cat$
            Else: catsnew$ = Replace(catsnew$, "[" & scat$ & "]", "<A HREF=" & Replace(Replace(pathStr$, ".html", "_" & cat$ & ".html"), " ", "%") & ">" _
                                           & "{{{" & scat$ & "}}}" & "</A>"): End If
'If hasIt("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", itemHTML$) Then db_ itemHTML$: das 'TEST
                  catsnew$ = Replace(catsnew$, "<B>" & Root$ & "</B>", "<A HREF=" & Replace(Replace(pathStr$, ".html", "_" & Root$ & ".html"), " ", "%") & ">" _
                                          & "<B>{{{" & Root$ & "}}}</B>" & "</A>") '||| - temporal (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        Next c%: itemHTML$ = Replace(itemHTML$, cats$, catsnew$): End If
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If manyCatsFlg Then
      For |fffd|% = 1 To prsCount(":", T.cat) - 1: cat$ = GetCatByID(prsBetween|fffd|(|fffd|%, ":", ":", T.cat)): db_ cat$
        If sag(Root$, prsBefore("_", cat$)) <> "" And Root$ <> lstRoot$ Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Roots, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Col |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                'dbg_ 20, collection_Get(catColl, Root$) = ""
                If sag(catItem, collection_Get(catColl, Root$)) = "" Then catColl.Add itemHTML$, Root$: sadd AllRoots$, "|" & Root$ _
                                                                    Else catColl.Remove Root$: catColl.Add catItem & itemHTML$, Root$: 'dbg_ 22, T.term(1), Root$
           lstRoot$ = Root$
        End If: 'dbg_ 30, collection_Get(catColl, cat$) = ""
                If sag(catItem, collection_Get(catColl, cat$)) = "" Then catColl.Add itemHTML$, cat$ _
                                                                   Else catColl.Remove cat$: catColl.Add catItem & itemHTML$, cat$: 'dbg_ 32, T.term(1), cat$, T.cat
'If hasIt("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", collection_Get(catColl, "|fffd||fffd||fffd||fffd||fffd||fffd|")) Then db_ collection_Get(catColl, "|fffd||fffd||fffd||fffd||fffd||fffd|"): das 'TEST
      Next |fffd|%: lstRoot$ = "": End If
    sadd tabHTML$, itemHTML$: prevCatsDistinct$ = CatsDistinct$
  Next i%: sadd tabHTML$, "</table>"
Dim catHTML$
Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If manyCatsFlg Then
    Dim spos&, fpos&, catHTMLact$, catHTMLact_item$, catHTMLact_Result$
    catHTML$ = "<font size=2 color='#ff8855'>" & |fffd||fffd||fffd||fffd|HTML$(db_(getCatLong("", db_(sortSetABC$(":", db_(CatsDistinct$))), False, True)), , True) & "<BR>" & "</font>"
    catHTMLact$ = Replace(Replace(Replace(Replace(catHTML$, ": ", ": ["), "; ", "]; ["), "<BR>", "]<BR>"), ">]<", "><") & "<B>#": db_ catHTML$ & Chr(10) & "catHTMLact$: " & catHTMLact$
    catHTMLact_Result$ = prsBefore("<B>", catHTMLact$)
    For r% = 1 To prsCount("</B>", catHTML$): Root$ = prsBetween|fffd|(r%, "<B>", "</B>", catHTML$)  '"</B>: " - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                                              cats$ = "; " & prsBetween|fffd|(r%, "</B>", "<B>", Replace(Replace(catHTML$, "<BR>", "<B>"), ": ", "")) & "; "
      catHTMLact_item$ = prsBetween("<B>" & Root$ & "</B>", "<B>", catHTMLact$, spos&, fpos&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
     'catHTMLact$ = Replace(Left(catHTMLact$, spos%), "<B>" & Root$ & "</B>", "<B><A HREF=" & Replace(Replace(pathStr$, ".html", "_" & Root$ & ".html"), " ", "%") & ">" & Root$ & "</A></B>")
      If Replace(cats$, "; ", "") <> "" Then _
        For c% = 1 To prsCount("; ", cats$) - 1: cat$ = prsBetween|fffd|(c%, "; ", "; ", cats$): _
          catHTMLact_item$ = Replace(catHTMLact_item$, "[" & cat$ & "]", "<A HREF=" & Replace(Replace(pathStr$, ".html", "_" & Root$ & "_" & cat$ & ".html"), " ", "%") & ">" & _
                                                       "[" & cat$ & "]" & "<font size=1 color=GRAY>(" & prsCount("<TR>", catColl(Root$ & "_" & cat$)) / IIf(short, 2, 4) & ")</font>" & "</A>"): Next c%
      sadd catHTMLact_Result$, "<B><A HREF=" & Replace(Replace(pathStr$, ".html", "_" & Root$ & ".html"), " ", "%") & ">" & Root$ & "</A></B>"
      sadd catHTMLact_Result$, catHTMLact_item$ '|fffd||fffd||fffd||fffd||fffd||fffd|
    Next r%: catHTML$ = Replace(catHTMLact_Result$, "<B>#", "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| term-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Cat-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim termResStr$
    For i% = 1 To prsCount("|", rate_result$) - 1
       If Int(prsBetween("{", "}", sag(i_s$, prsBetween|fffd|(i%, "|", "|", rate_result$)))) < 10 Then Exit For
       id = prsAfter("}", i_s$): sadd termResStr$, "{" & db_(getCatRoots$(FnGetTxtFromID$(id$, 1, catCol%))) & id$ & "}"
    Next: catHTML$ = Replace(catHTML$, "<BR>", "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size=1> << &nbsp; <BR></font>")         '|fffd||fffd||fffd||fffd|
    For i% = 1 To prsCount("}", termResStr$): i_s$ = prsBetween|fffd|(i%, "{", "}", termResStr$) '"|OE|86_11"
       For j% = 1 To prsCount("|", i_s$) - 1: c_name$ = prsBetween|fffd|(j%, "|", "|", i_s$): id$ = prsAfterLast("|", i_s$)
          catHTML$ = prsBefore(">" & c_name$ & "<", catHTML$) & ">" & c_name$ & "<" & _
                      prsBetween(">" & c_name$ & "<", "<BR>", catHTML$) & "<a href=" & pathStr$ & "##" & 1 + prsCount("|", prsBefore("|" & id$ & "|", result$)) & "><font color=GRAY>" & _
                                                                            markUpResult$(find$, FnGetTermFromID(1, id$)) & "</font></a>;&nbsp;<BR>" & _
                     prsAfter("<BR>", prsAfter(">" & c_name$ & "<", catHTML$))
                 ' Replace(catHTML$, "<BR>", "catHTML$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; << &nbsp; <BR>")
    Next: Next: catHTML$ = Replace(catHTML$, "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size=1> << &nbsp; <BR></font>", "<BR>")   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If: 'db_ catHTML$
  If manyCatsFlg Then HTML$ = Replace(HTML$, "Search Results", "<A HREF=" & pathStr$ & ">Search Results</A>") '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| All
  'markUpResult |fffd||fffd||fffd||fffd||fffd| Injection (|fffd||fffd| |fffd||fffd||fffd|.)
'  If FnFormIsVisible("FindForm") Then If FindForm.TextBox1.Visible Then If FindForm.TextBox1 <> "" Then _
'        If Not FindForm.TextBox1 Like "_*.*.* *:* - *_*" Then _
'       HTML$ = markUpResult$(FindForm.TextBox1, HTML$) 'prsBeforeUp("<TT>", HTML$, pos&)) & Mid0(HTML$, pos&) '{++}
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  tabHTML$ = AdditionalMarkUpHTML(tabHTML$, result$, True) '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| SearchResult
  save2file Replace(HTML$ & "<HR>", ">Search Results<", ">" & "<font color='#ff8855'>Search Results</font>" & "<") & catHTML$ & "<BR><table>" & _
            Replace(Replace(tabHTML$, "{{{", "<font size=2 color='#ff8855'>"), "}}}", "</font>"), pathStr$: addrStr$ = "file:///" & Replace(pathStr$, "\", "/")
  SCSForm.OpenHTTP addrStr, find$, True: setFocusOnForm "SCSForm" '
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cat-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If manyCatsFlg Then ' +|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Roots (|fffd||fffd||fffd| subCat)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (cnt)?
    HTML$ = prsBeforeUp(" with", HTML$) & "<HR>" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    For |fffd|% = 1 To prsCount(":", CatsDistinct$) - 1: cat$ = GetCatByID(prsBetween|fffd|(|fffd|%, ":", ":", CatsDistinct$)): 'db_ cat$
                                                    Root$ = prsBefore("_", cat$): scat$ = prsAfter("_", cat$): 'db_ scat$
         Call WaitMessage: DoEvents '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                catHTML_item$ = prsbetweenUp(">" & Root$ & "<", "<BR>", catHTML$, spos&, fpos&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| catHTML
                Dim catColl_Result$: catColl_HTML$ = catColl(cat$) '|fffd||fffd||fffd||fffd||fffd||fffd| scat$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Root$)
                    catColl_Result$ = catColl_HTML$
                If scat$ <> "" Then
'                'db_ catColl_Result$
'                    catColl_line$ = db_( prsBetween|fffd|(1, "<B>{{{" & Root$ & "}}}</B>", "<BR>", catColl_HTML$, , fpos_s&))
'                    catColl_item$ = db_( prsBeforeUp("<B>{{{", catColl_line$)) '|fffd||fffd| |fffd||fffd||fffd||fffd|. Root |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'                  catColl_Result$ = prsBefore|fffd|(1, "<B>{{{" & Root$ & "}}}</B>", catColl_Result$) & "<B>{{{" & Root$ & "}}}</B>"
'                                     'prsAfter("<B>{{{" & Root$ & "}}}</B>", catColl_HTML$) 'Ok
'                  sadd catColl_Result$, Replace(catColl_item$, "html>{{{" & scat$ & "}}}</A>", "html><font size=2 color='#ff8855'>" & scat$ & "</font></A>")
'                  sadd catColl_Result$, Mid(catColl_line$, Len(catColl_item$) + 1) & Mid(catColl_HTML$, fpos_s&)  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'                'db_ catColl_Result$
                 'TESTS
                  For i = 1 To prsCount("<B>{{{" & Root$ & "}}}</B>", catColl_HTML$)
                    catColl_line$ = prsBetween|fffd|(i, "<B>{{{" & Root$ & "}}}</B>", "</EM>", catColl_HTML$, , fpos_s&) '"|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" - |fffd||fffd||fffd| "</EM>"
                    catColl_item$ = prsBeforeUp("<B>{{{", catColl_line$) '|fffd||fffd| |fffd||fffd||fffd||fffd|. Root |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    catColl_Result$ = prsBefore|fffd|(i, "<B>{{{" & Root$ & "}}}</B>", catColl_Result$) & "<B>{{{" & Root$ & "}}}</B>" & _
                                     Replace(catColl_item$, ".html>{{{" & scat$ & "}}}</A>", ".html><font size=2 color='#ff8855'>" & scat$ & "</font></A>") & _
                                     Mid(catColl_line$, Len(catColl_item$) + 1) & Mid(catColl_HTML$, fpos_s& + 1) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (+1 |fffd||fffd||fffd| |fffd||fffd||fffd|. "</EM>")
                  Next i:
                  End If
      save2file HTML$ & Left(catHTML$, spos& - 1) & ">" & Root$ & "<" & _
                        Replace(catHTML_item$, "[" & scat$ & "]", "<font color='#ff8855'>" & "[" & scat$ & "]" & "</font>") & _
                        "<BR>" & Mid(catHTML$, fpos& + 1) & "<BR>" & _
                        Replace(Replace(catColl_Result$, _
                        "{{{", ""), "}}}", "") & "</table>", Replace(Replace(pathStr$, ".html", "_" & cat$ & ".html"), " ", "%")
    Next |fffd|%: For r% = 1 To prsCount("|", AllRoots$): Root$ = prsBetween|fffd|(r%, "|", "|", AllRoots$ & "|")
      save2file HTML$ & Replace(catHTML$, ">" & Root$ & "<", ">" & "<font color='#ff8855'>" & Root$ & "</font>" & "<") & "<BR>" & _
                Replace(Replace(Replace(catColl(Root$), "<B>{{{" & Root$ & "}}}</B>", "<B><font size=2 color='#ff8855'>" & Root$ & "</font></B>"), _
                        "{{{", ""), "}}}", "") & "</table>", Replace(Replace(pathStr$, ".html", "_" & Root$ & ".html"), " ", "%")
             Next r%
'db_ CatsDistinct$
'db_ catHTML$
'db_ AllCats$
'db_ AllRoots$

End If: Set T = Nothing: Set catColl = Nothing: ls "<", "ResultHTML": End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| HTML (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Open_Browser_W$)
Sub Open_Browser_W_tree(Optional showHidden As Boolean): If ActiveSheet.Index > wsLog Then Exit Sub
noTest = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                           tid$ = Cells(ActiveCell.row, 1): If tid$ = "" Then Exit Sub Else ttxt$ = Cells(ActiveCell.row, 3)
                           pathStr$ = "file:///" & Replace(ThisWorkbook.path & "\html\", "\", "/"): tr_fl = FnIsRoot(tid$)
'                  headStr$ = "<div align=right><form action=http://www.google.com.ua/search method=get>"
'            sAdd$ headStr$, "<input name=q size=20 maxlength=30 /></FORM></div>"
tlvl% = prsCount("_", tid$):  If hasIt("_", tid$) Then ctid$ = prsBefore|fffd|(tlvl, "_", tid$) Else ctid$ = tid$
Dim href%: useMultiTree = useMultiTree And useFRAMES '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         If useMultiTree Then If hasIt("_", ctid$) Then ctid$ = prsBefore|fffd|(tlvl - 1, "_", ctid$) '|fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
CRow% = FnFarRow&(2, ctid$): treeHtml$ = "<BODY vlink=alink>" ' & "<TABLE CELLSPACING = 10> <TD VALIGN=TOP width=250> <font size=2>" 'width=250
Dim AllCats$, maxLinkLen%: With Worksheets(wsRu)
If useMultiTree Then        'href& - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    'If Not useFRAMES Then sadd treeHtml$, "<TABLE CELLSPACING = 10> <TD VALIGN=TOP width=" & _
                        Int(250 * ((DDM.TBwidth + ScRt - ScLt) / 1280)) & "> <font size=1>"
                    sadd treeHtml$, "<link type='text/css' media='screen' rel='stylesheet' href='../css/multi-tree.css'>"
                    sadd treeHtml$, "<script src='../js/jquery.min.js' type='text/javascript'></script>"
                    'sadd treeHtml$, "<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js' type='text/javascript'></script>"
                    sadd treeHtml$, "<script src='../js/multi-tree.js' type='text/javascript'></script>" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CSS
                    sadd treeHtml$, "<div id='multi-derevo'><h4><A HREF='" & pathStr$ & ctid$ & ".html#' target ='slave'>" & _
                                    "<B>" & sag(rtxt$, .Cells(CRow%, termcol)) & "</B></A></h4>": ctlvl% = sag(last_lvl%, prsCount("_", ctid$))
                    If Not .Cells(inc(CRow%), idcol) Like ctid$ & "_*" Then GoTo passL '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Else: sadd treeHtml$, "<TABLE CELLSPACING = 10> <TD VALIGN=TOP " & IIf(useFRAMES, "", "width=" & _
                        Int(250 * ((DDM.TBwidth + ScRt - ScLt) / 1280))) & "> <font size=2>": End If   'width=250
Do: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| | |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not .rows(CRow%).Hidden Or showHidden Then  'showHidden - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
      sadd$ AllCats$, sag(cat$, .Cells(CRow%, catCol))
      cid$ = .Cells(CRow%, idcol): ctxt$ = .Cells(CRow%, termcol): clvl% = prsCount("_", cid$): r_fl = FnIsRoot(cid$) 'And cid$ <> tid$ 'MsgBox cid$ & ":" & ctxt$
      If Len(ctxt) + clvl% > maxLinkLen% Then maxLinkLen% = Len(ctxt) + clvl%   'If prsCount("_", cid$) <= tlvl + IIf(cid$ Like tid$ & "_*", 1, 0) Then
         sadd$ listHtml$, "|fffd|" & cid$ & ":" & |fffd||fffd||fffd||fffd|HTML$(ctxt$) & "|fffd|"
      If useMultiTree Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CSS
                     If last_lvl% < clvl% Then
                                               treeHtml$ = Replace(Replace(treeHtml$, "{root?}", ""), "{/root?}", "")
                                               sadd$ treeHtml$, Chr(13) & "<ul><!-- " & clvl% - ctlvl% + 1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| -->" & Chr(13)
                 ElseIf last_lvl% = clvl% Then sadd$ treeHtml$, "</li>" & Chr(13)
                 Else: sadd$ treeHtml$, replicate("", Chr(13) & "</ul></li>" & Chr(13), 10 * (last_lvl% - clvl%), True): End If
                                               'treeHtml$ = clearFromTags("{root?}", "{/root?}", treeHtml$)
                        last_lvl% = clvl%: If cid$ = tid$ Then chref% = href% + 1 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         sadd$ treeHtml$, "<li><span><A HREF='" & pathStr$ & cid$ & ".html#" & inc(href%) & "' target ='slave'>" & IIf(r_fl, "", "{root?}" & replicate("", "&nbsp;", 6 * 3) & "{/root?}") & |fffd||fffd||fffd||fffd|HTML$(ctxt) & "</A></span>"
      Else:
         sadd$ treeHtml$, "<A HREF=""" & pathStr$ & cid$ & IIf(useFRAMES, "", "_t") & ".html" & IIf(useFRAMES, """ target =""slave""", """") & ">" & IIf(r_fl, "<B>", "<font color='#ffffff'>") & _
                          replicate("", IIf(r_fl, "+_", "__"), 2 * (clvl% - tlvl% + IIf(ctid$ = tid$, 0, 1))) & IIf(r_fl, "", "</font>") & |fffd||fffd||fffd||fffd|HTML$(ctxt$) & IIf(r_fl, "</B>", "") & "</A><cats>" & cat$ & "</cats> <BR>"
End If: End If: Loop While .Cells(inc(CRow%), 1) Like ctid$ & "_*"
        If useMultiTree Then treeHtml$ = Replace(Replace(treeHtml$, "{root?}", ""), "{/root?}", ""): _
                             sadd$ treeHtml$, Chr(13) & replicate("", "</li></ul>" & Chr(13), 10 * (last_lvl% - ctlvl%), True) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
passL:  If useMultiTree Then sadd$ treeHtml$, "</div><!-- /multi-derevo -->" _
                        Else sadd$ treeHtml$, "</font> </TD><TD VALIGN=TOP>" 'style=""text-wrap:normal;word-wrap:break-word""
End With
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
ttxt_html$ = "<font color='#ff8855'><EM>" & |fffd||fffd||fffd||fffd|HTML$(ttxt$) & "</EM></font>"
treeHtml$ = Replace(srep(treeHtml$, |fffd||fffd||fffd||fffd|HTML$(ttxt$), ttxt_html$), "+_", "+&nbsp;")
rollup = prsCount("|fffd||fffd|", listHtml$) > 20 '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| subroots |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
AllCats$ = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat$(AllCats$): catCnt = prsCount(":", AllCats$) - 1
'headStr$ ------------------------------------------------------------------------------------------:4_4:OE_XEMISDB:
headStr$ = ":": For i% = 1 To catCnt: catId$ = prsBetween|fffd|(i%, ":", ":", AllCats$): sadd$ headStr$, catId & ":" & GetCatByID(catId) & ":": Next i%
headStr$ = "<font color=#ff8855><EM>" & headStr$ & "</EM></font>" '#ff8855 (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #4499FF)
'headStr$ = repalace
                
'treeHtml$ -----------------------------------------------------------------------------------------
If headStr$ <> "" Then treeHtml$ = "<div style=""font-size: 12px;"">" & headStr$ & "</div>" & Chr(13) & dbg_(treeHtml$)
If useMultiTree Then
                            Open_Browser_W tid$, False, treeHtml$, , , , , maxLinkLen%, chref%, rtxt$ & ": " & ttxt$ 'TESTs
                        For i% = 2 To prsCount("|fffd|", listHtml$) Step 2: split2 prsBetween|fffd|(i% - 1, "|fffd|", "|fffd|", listHtml$), ":", cid$, ctxt$: r_fl = FnIsRoot(cid$)
                                If cid$ <> tid$ Then Open_Browser_W cid$, True, treeHtml$
                        Next i
ElseIf rollup Then        'active           c void |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                            Open_Browser_W tid$, False, _
                                            Replace(IIf(tr_fl, _
                                                        Replace(treeHtml$, "+ " & ttxt_html$, "  " & ttxt_html$), treeHtml$), |fffd||fffd||fffd||fffd|HTML$(ttxt$), _
                                                        void("<B>") & |fffd||fffd||fffd||fffd|HTML$(ttxt$) & void("</B>")), _
                                            IIf(noTest, "", treeHtml$), IIf(noTest, "", listHtml$), , , _
                                            maxLinkLen%, chref%, rtxt$ & ": " & ttxt$ 'TESTs
    'Call Open_Browser_W(tid$, False, Replace(treeHtml$, "|fffd|" & tid$ & ":", "|fffd|" & "<B>" & tid$ & "</B>" & ":")) 'active
    For i% = 2 To prsCount("|fffd|", listHtml$) Step 2: split2 prsBetween|fffd|(i% - 1, "|fffd|", "|fffd|", listHtml$), ":", cid$, ctxt$: r_fl = FnIsRoot(cid$)
      'Coding: Java; JavaScript; Pascal; SQL
      If cid$ <> tid$ Then Open_Browser_W cid$, True, Replace(IIf(r_fl, Replace(treeHtml$, "+ " & ctxt$, "<font color='#ffffff'>" & "__" & "</font>" & ctxt$), treeHtml$), _
                                                              ctxt$, "<B>" & ctxt$ & "</B>") 'next
    Next i
Else: srep treeHtml$, "+&nbsp;", "<font color='#ffffff'>" & "__" & "</font>"
                            Open_Browser_W tid$, False, _
                                            Replace(treeHtml$, ttxt_html$, _
                                                    void("<B>") & ttxt_html$ & void("</B>")), _
                                            IIf(noTest, "", treeHtml$), IIf(noTest, "", listHtml$), , , _
                                            maxLinkLen%, chref%, rtxt$ & ": " & ttxt$ 'active
                                          
    'Call Open_Browser_W(tid$, False, Replace(treeHtml$, "|fffd|" & tid$ & ":", "|fffd|" & "<B>" & tid$ & "</B>" & ":")) 'active
    For i% = 2 To prsCount("|fffd|", listHtml$) Step 2: split2 prsBetween|fffd|(i% - 1, "|fffd|", "|fffd|", listHtml$), ":", cid$, ctxt$: r_fl = FnIsRoot(cid$)
      If cid$ <> tid$ Then Open_Browser_W cid$, True, Replace(treeHtml$, ctxt$, "<B>" & ctxt$ & "</B>") ', nblank(crd, crd & Chr(13)) & lud 'next
                            'crd$ = FnGetTxtFromID$(cid$, 5, 2): crd$ = nvl2(crd$ = "01.01.2000", "Created  : " & crd$, "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            'lud$ = FnGetTxtFromID$(cid$, 5, 3): lud$ = nvl2(lud$ = "", "Changed : " & lud$, "")            '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Next i
End If
setFocusOnForm "SCSForm": End Sub

'* WaitingForm
'****************************************************
Sub testWaiting(): waitF_long "Test Msg": End Sub

Sub waitF(Optional mUl = 200, Optional dd%): LM "waitF"
      With WaitingForm: If dd% Then If dd% = 2 Then _
                .Left = 100: .Top = 100 ' (DDM.Left + (DDM.Right - DDM.Left) / 2) * x75: .Top = (DDM.Top + (DDM.Bottom - DDM.Top) / 2) * x75
      SetTopMostWindow FindWindow(vbNullString, .Caption), True: setNoHeadersC .Caption: 'TransStartM 200, 220
On Error GoTo exitL: .show vbModeless: .Repaint: TransM 0.05 / mUl, 60, .Caption, 0
     '.Repaint: TransExitM 0.05 / mUl, 100 'Application.wait (Now + TimeValue("0:00:01"))
      End With: Unload WaitingForm
exitL: End Sub

Sub waitF_long(Optional Msg$): LM "waitF_long"
      wcaption = WaitingForm.Caption: Call TransStartM(200, 220): Call setNoHeadersC(wcaption):
On Error GoTo exitL: WaitingForm.show vbModeless: Call TransStartM(0.01, 100): WaitingForm.Repaint:
      If Msg$ <> "" Then With WaitingForm.Label1: .Caption = Msg$: .Visible = True: dodelay 2: .Visible = False: End With
      Call TransExitM(0.05, 100): Application.Wait (Now + TimeValue("0:00:01")): Unload WaitingForm
exitL: End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! (|fffd| Train |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..?)
Sub waitF_inwork(): wcaption = WaitingForm.Caption: Call setNoHeadersC(wcaption) 'Call TransStartM(220, 220):
On Error GoTo exitL: WaitingForm.show vbModeless: Call TransStartM(0.01, 100) 'WaitingForm.Repaint:
      Call TransExitM(0.05, 100): Application.Wait (Now + TimeValue("0:00:01")): Unload WaitingForm
exitL: End Sub

'****************************************************
Rem: debugger (see Module "debugger")
'****************************************************

'####################################################
'# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'####################################################

'* HyperForm
'****************************************************
Sub View_Hyper(ws) '<#>
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS=WSNum |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| WS, |fffd||fffd||fffd| Null
  '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not IsNull(ws) Then
    HyperForm.TextBox1.Text = ws
    HyperForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    If Cells(ActiveCell.row, 2).Font.ColorIndex = inv(15) Then
      g_shadow = Trim(Cells(ActiveCell.row, 2))
      pos = InStr(1, g_shadow, "_")
      If pos <> 0 Then
        If Right$(g_shadow, 1) <> "." Then g_shadow = Left$(g_shadow, pos - 1) _
                                      Else g_shadow = Right$(g_shadow, Len(g_shadow) - pos)
      End If
      If Right$(g_shadow, 1) = "." Then g_shadow = Left$(g_shadow, Len(g_shadow) - 1)
      HyperForm.ComboBox1.Text = g_shadow
    End If
  End If
  HyperForm.show
End Sub


'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'****************************************************
'* Subrutines
'****************************************************
'****************************************************

Sub View_Find()
If logging Then LogString ("in   View_Find")
FindForm.Height = FindForm.Height - 7
FindForm.TextBox1.Left = 0
FindForm.TextBox1.Width = FindForm.TextBox1.Width + 14
FindForm.CommandButton3.Caption = str(FnWSNum(ActiveSheet.name)) + ":" + _
  str(ActiveCell.row) + ":" + str(ActiveCell.Column)
  
Rem: Settings
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Clipboard
If settingsForm.CBactTerm2.value Then
    'n = FnWSNum(ActiveSheet.name)
    Select Case FnWSNum(ActiveSheet.name)
           Case 0:
                   If ActiveCell.Column > 1 And _
                      ActiveCell.Column < 5 Then term_txt = ActiveCell.Text _
                                            Else term_txt = ""
           Case 1, 2, 3: term_txt = Cells(ActiveCell.row, 3)
           Case 4:
                   If ActiveCell.Column > 1 And _
                      ActiveCell.Column < 8 Then term_txt = ActiveCell.Text _
                                            Else term_txt = ""
           Case Else: term_txt = ""
    End Select
    If term_txt <> "" Then
      Set MyData = New DataObject
      MyData.SetText term_txt
      MyData.PutInClipboard
      Set MyData = Nothing
    End If
End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If settingsForm.obUseBuffer.value Then
    Set MyData = New DataObject
    MyData.GetFromClipboard
    If MyData.GetFormat(1) = True And Trim(MyData.GetText) <> "" Then
      FindForm.TextBox1 = MyData.GetText
    Else '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      autofilling = False
      Select Case FnWSNum(ActiveSheet.name)
             Case 0: If (ActiveCell.Column > 1 And ActiveCell.Column < 5) Or _
                         ActiveSheet.name = WSI Then autofilling = True
             Case 4: If (ActiveCell.Column > 1 And ActiveCell.Column < 8) Then autofilling = True
             Case Else: If ActiveCell.Column = 3 Then autofilling = True
      End Select
      If autofilling Then FindForm.TextBox1 = Trim(ActiveCell.Text)
    End If
Set MyData = Nothing
End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If settingsForm.obUseLast.value Then If last_search <> "" Then FindForm.TextBox1.Text = last_search
Rem: <-Settings

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
FindForm.TextBox1.SelStart = 0
FindForm.TextBox1.SelLength = FindForm.TextBox1.TextLength

'MsgBox CBool(EditForm.Visible And EditForm.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
'==================
'wCaption = FindForm.Caption: Call setNoHeadersC(wCaption)
'                             Call set_Transparent
'==================
If FnFormIsLoaded("EditForm") Then
    If EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then FindForm.show vbModall Else FindForm.show vbModeless: LogString ("out View_Find")
Else: FindForm.show vbModeless
End If: LogString ("out View_Find"): End Sub


Function checkTermChanges(shadIgnor As Boolean, Optional msg1$, Optional details As Boolean, Optional Msg2$) As Boolean: If Not FnFormIsLoaded("EditForm") Then Exit Function
Dim T As CFTerm: Set T = New CFTerm: Call T.InitializeByForm
    If T.fUpdated(shadIgnor) Then
                        If msg1$ <> "" Then
                            If details Then Msg2$ = T.up_str_long & Chr(10) & Msg2$ Else Msg2$ = T.up_str & Chr(10) & Msg2$
                Msg2$ = Chr(10) & Chr(10) & Msg2$: checkTermChanges = MsgBox(msg1$ & Msg2$, vbYesNo + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbNo
                                       Else: checkTermChanges = True: End If: End If: Set T = Nothing: End Function
'********************************************************************************************************
Sub View_Term(Optional set_mode$)
'********************************************************************************************************
If logging Then LogString ("in   View_Term")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'If EditForm.Visible Then 'MsgBox EditForm.Caption
If checkTermChanges(True, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ", True, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?") Then EditForm.show vbModeless: Exit Sub
If set_mode$ <> "" Then EditForm.Caption = set_mode$ 'NEW - 190913
'==================
'for noHeaders
    wcaption = EditForm.Caption: Call setNoHeadersC(wcaption)
'==================
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
operation = EditForm.Caption: was_cat = FnGetCurrentCat: HomeSheet = ActiveSheet.name
'If was_cat <> "" And operation <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Call Cat_All(True)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If FnFormIsLoaded("EditForm") Then Call EditForm_ini  '|fffd||fffd||fffd||fffd||fffd||fffd| Unload, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Select Case operation
       Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": With EditForm: .SetGId Cells(ActiveCell.row, 1) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                    .OptionButtonS.value = True
                                    .TextBoxEnGId.value = Cells(ActiveCell.row, idcol): c_cat$ = prsAfter("|", PF.Image16.tag)
                                    If c_cat$ <> "" Then Cat2Form "", ":" & c_cat$ & ":" _
                                                    Else r_cat$ = Cells(ActiveCell.row, catCol): _
                                                      If Not FnIsRoot(.GetGId$) Or prsCount(":", r_cat$) = 2 Then _
                                                          Cat2Form "", r_cat$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| root_cat(antimix)
                                    '.TextBoxCat.Tag = Cells(ActiveCell.row, catcol)
                                    '.TextBoxCat.value = GetCatByID(prsBetween(":", ":", .TextBoxCat.Tag))
                                    '.TextBoxCat.value = getCatLong("", .TextBoxCat.Tag)
                                    Call View_Ini(10, 0): On Error Resume Next: .TextBoxEnGId.SetFocus: On Error GoTo 0
                                    If Not .Visible Then .show vbModeless: SCSForm.reParkW
                                    If .TreeComButton.Caption = "<" Then Call .TreeComButton_Click
                                    On Error Resume Next: .TextBoxEnTerm.SetFocus: On Error GoTo 0: End With: GoTo qExit
       Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":                 If Cells(ActiveCell.row, idcol) = "" Then GoTo qExit Else rangBit = 0
       Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|":   If Cells(ActiveCell.row, idcol) = "" Then GoTo qExit Else rangBit = 1
       Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|":         If Cells(ActiveCell.row, idcol) = "" Then GoTo qExit Else rangBit = 1
       Case Else: MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"): GoTo qExit
End Select

'If FindForm.Visible Then Call FindHider '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RootID |fffd||fffd||fffd||fffd||fffd||fffd|, Cat |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| )
Dim svdRange As Range: If Not CBool(rangBit) Then Set svdRange = Selection: _
                           Cells(ActiveCell.row, idcol).Select '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Dim r, i%, ides%, first_id$, next_id$: Set rangeToUse = Selection                                    '^^^^^^
                        If Not svdRange Is Nothing Then If svdRange.row = Selection.row Then svdRange.Select
For Each singleArea In rangeToUse.Areas
  For r = 0 To singleArea.rows.Count - 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Text |fffd||fffd||fffd||fffd| "#" |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! (|fffd||fffd||fffd||fffd||fffd| .Value |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    next_id = Sheets(HomeSheet).Cells(singleArea.row + r, idcol): IIf2 first_id, first_id = "", next_id
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| >> (|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If Not Sheets(HomeSheet).rows(singleArea.row + r).Hidden Then _
        If next_id <> "" And next_id <> "ID" Then id_str$ = id_str$ & "|" & next_id
  Next r: Next singleArea: id_cnt = prsCount("|", id_str$)
Set rangeToUse = Nothing
For ides% = 1 To id_cnt: next_id = prsBetween("|", "|", id_str$ & "|") 'prsBetween|fffd|(ides, "|", "|", id_str$ & "|") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| EditForm.CommandButton1.ControlTipText
' << |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
With EditForm
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "Auto" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    'If operation = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then ''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PressID |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ReID2 |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                                  ''|fffd||fffd|. If operation = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then ... id_str$ = prsAfter("Auto", EditForm.CommandButton1.ControlTipText)
    If id_cnt > 1 Then EditForm.CommandButton1.ControlTipText = "Auto" & Replace(id_str$, "|" & next_id & "|", "|") & "|"
'--------------------------------------------------------------                                 r07+
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set T1 = New CTerm: Call T1.Initialize(next_id)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    '--|fffd||fffd||fffd||fffd||fffd|?>  Call Clear_EditForm
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      EditForm.CommandButton1.Caption = T1.id
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      EditForm.ToggleButton1.ControlTipText = T1.link
      'category - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| View_Ini
'      If EditForm.CommandButton1.ControlTipText = "Auto" Then ' "Auto" - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'        If EditForm.TextBoxCat.ControlTipText = "" Then _
'           EditForm.TextBoxCat.ControlTipText = EditForm.TextBoxCat.value  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| "Auto"
'        If T1.cat <> "" Then Call Cat2Form("", T1.cat) _
'                        Else: Call Cat2Form("", EditForm.TextBoxCat.ControlTipText)
'      Else:
        Call Cat2Form("", T1.cat)
'      End If
      'group markup checking
      If FnIsRoot_marked(T1.id) And T1.sid = "" Then Call SwitchKey(T1.id, False, True)
      '--------------------------------------------------------------
      For i = 1 To 3: Call .SetTerm(i, T1.term(i)): Call .SetAbb(i, T1.ABC(i)): Call .SetDef(i, T1.def(i)): Next i
      'groups (mainroot T1.GId = "")
        Call .ComboBoxG_View(0, Not T1.Gid = ""): Call .TextBoxGId_Enab(0, Not T1.Gid = "")
        If T1.Gid = "" Then .OptionButtonG.value = True _
                       Else .OptionButtonS.value = True
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'      Select Case .FnAutoMode()
'        Case True:  Call .SetGId(EditForm.TextBoxEnGId.value) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "Auto"
'                    For j = 1 To 3: Call .SetGroup(j, .GetComboText(j)): Next j
'        Case False:
                    If T1.Gid = "" Then Call .SetGId(T1.id) Else Call .SetGId(T1.Gid)
                    For j = 1 To 3: Call .SetGroup(j, FnGetTermFromID(j, .GetGId)): Next j
'      End Select
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ("" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
      If T1.sid <> "" Then Call .SetImageTextFromClass(T1)
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: SetImageText(1, T1.shad1): Call SetImageText(2, T1.shad2): Call SetImageText(3, T1.shad3): End If
End With
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '--------------------------------------------------------------------------------
    'ViewNote
    If dir(ThisWorkbook.path & "\PDB\" & T1.id & "\notes.nt") <> "" Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                                                    EditForm.ViewNote: End If
    If operation = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      If T1.sid <> "" Then MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."): GoTo next_r  ': End If
      Call Disable_EditForm(True)
      EditForm.CommandButton1.SetFocus
    Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     With EditForm.BrowserListBox
      pos = 0: i = 0
      Do
        pos = InStr(pos + 1, EditForm.CommandButton1.Caption, "_")
        If Not CBool(pos) Then pos = Len(EditForm.CommandButton1.Caption) + 1
        If FnFarCell(2, Left$(EditForm.CommandButton1.Caption, pos - 1), far_row, far_WS) Then
            .AddItem Sheets(far_WS).Cells(far_row, 1).value
            For j = 1 To i
                If pos <> Len(EditForm.CommandButton1.Caption) + 1 Then .List(.ListCount - 1, 1) = .List(.ListCount - 1, 1) & "  "
            Next j
            .List(.ListCount - 1, 1) = .List(.ListCount - 1, 1) & Sheets(far_WS).Cells(far_row, 3).value
            inc i
        End If
      Loop Until pos = Len(EditForm.CommandButton1.Caption) + 1
      .List(.ListCount - 1, 1) = ">> " & .List(.ListCount - 1, 1)
     End With
    End If
    '|fffd||fffd||fffd||fffd||fffd|
    '--------------------------------------------------------------------------------
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    'On Error GoTo BCErrorHandler
  '    Call View_Ini(10, 0, True) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If operation = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then EditForm.Hide: EditForm.show: _
                                             id_str$ = prsAfter("Auto", EditForm.CommandButton1.ControlTipText) _
                                        Else EditForm.show vbModeless: GoTo qExit ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      'SCSForm.freeze FindWindow(vbNullString, EditForm.Caption) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| visible-invisible

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| >>
next_r: Next ides%
' << |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'--------------------------------------------------------------
'(|fffd||fffd||fffd||fffd|)|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Unload EditForm
qExit:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If HomeSheet <> "" Then Sheets(HomeSheet).Activate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'Call ReCat(was_cat) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If DDM.num = 1 Then If DDBarUsed Then If DDBar.DDMatrixFrom% = -5 Then SetTopMostWindow FindWindow(vbNullString, EditForm.Caption), True
SCSForm.reParkW: ls "<", "View_Term": End Sub

'********************************************************************************************************
'********************************************************************************************************
Function isBLACK(clr) As Boolean: clr = inv(nvl(clr, xlAutomatic)): isBLACK = clr = 1 Or clr = xlAutomatic: End Function

Sub View_Looking(): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Worksheet_BeforeDoubleClick
                    '1) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    '2) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

If Not FnIsTrinity(ActiveSheet.name) Then Exit Sub
Rem '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Call MakeCATForm: WSim
'r = ActiveCell.Row
'|fffd| = ActiveCell.Column
id$ = Cells(ActiveCell.row, 1): If id$ = "" Or ActiveCell.row = 1 Then Exit Sub

Call NoSup '1) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If FnIsGeneral(id$) Then                                                         'isGen
  If ActiveCell.Column = 2 Then Call setOutlineShowLevel(1) _
                           Else Call setOutlineShowLevel(2)
ElseIf isBLACK(Cells(ActiveCell.row, 3).Font.ColorIndex) Then                    'isNOTGen?
    If Cells(ActiveCell.row, 3).Interior.ColorIndex > 0 And _
       Cells(ActiveCell.row, 3).Font.Bold And ActiveCell.Column <> 2 Then        'subRoot-> Term
       setOutlineShowLevel (3): ActiveSheet.rows.RowHeight = 13                  ' compact - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| autosize |fffd||fffd| termcol
    ElseIf Cells(ActiveCell.row, 3).Font.Bold And ActiveCell.Column = 2 Then ActiveSheet.UsedRange.WrapText = False: _
      Columns("C:C").WrapText = True: setOutlineShowLevel 2: 'srv|fffd||fffd||fffd||fffd||fffd||fffd|InTerm 'subRoot-> Def 'ActiveSheet.UsedRange.WrapText = False: Columns("C:C").WrapText = True: - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| .IndentLevel
    ElseIf ActiveCell.Column = 2 Then ActiveSheet.rows.RowHeight = 13 ' compact
    'ElseIf ActiveCell.Column = 3 Then openAsW: Exit Sub 'added |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
ElseIf ActiveCell.Column = 2 Then setOutlineShowLevel (2)                        'other subs
End If
Call NoSup

'EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm_Layout - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If FnFormIsLoaded("EditForm") Then If EditForm.Caption <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" _
                              Then EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|      '!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd| noHeader !!

g2c = ActiveCell.Column: If g2c = 3 Then View_Term Else If g2c = 4 Then openAsW 'g2c = 4 Or _
                            g2c = 3 And Cells(ActiveCell.row, 3).Interior.ColorIndex = xlNone Then Call View_Term '|fffd||fffd||fffd|.2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| openAsW
'Range("D" & CStr(ActiveCell.Row) & ":" & "C" & CStr(ActiveCell.Row)).Select
g2r = ActiveCell.row
Call NoSup
If Cells(ActiveCell.row, 2).Font.ColorIndex <> inv(xlAutomatic) Then
    Dim RootID As String: RootID = FnGetMainRootID(Cells(g2r, 1))
    On Error GoTo BCErrorHandler
      If RootID <> "" Then ActiveWindow.ScrollRow = FnGetRowFromID(RootID, FnWSNum(ActiveSheet.name))
    'Resume Next
    'MsgBox FnGetRowFromID(FnGetRootID(Cells(g2r, 1)), FnWSNum(ActiveSheet.name))
Else: ActiveWindow.ScrollRow = 2
End If
Call SUp: Cells(g2r, g2c).Select
'If g2c = 3 Then
'  Range("D" & g2r & ":C" & g2r).Select
'Else: Cells(g2r, g2c).Select: End If
Call LockWB: Exit Sub
BCErrorHandler: MsgBox "rootID " & RootID & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub


'****************************************************
Attribute VB_Name = "Form_subroutines"
Private tbCatH%

Sub ShowTargetW(): SCSForm.ShowTargetW: End Sub '4 onTime

'____________________________
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Find_Form:
'CommandButton3.Caption - |fffd||fffd||fffd||fffd||fffd|("ws:r:c") |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'CommandButton4.Caption - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

'____________________________
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm:
Sub EditForm_ini(): With EditForm '~unused~
Call Clear_EditForm: Call .TextBoxGId_Enab(0, True): Call .ComboBoxG_View(0, True)
'Image[].ControlTipText - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|   : |fffd||fffd||fffd||fffd||fffd||fffd|
'                         |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|)
'                         |fffd||fffd||fffd||fffd||fffd|                         : ""
.Image1.ControlTipText = "": .Image2.ControlTipText = "": .Image3.ControlTipText = ""
'Image[].SpecialEffect = fmSpecialEffectSunken - PseudoMode |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
.Image1.SpecialEffect = 0: .Image2.SpecialEffect = 0: .Image3.SpecialEffect = 0:
.ToggleButton1.Caption = "" '   - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ""

.ToggleButton1.ControlTipText = "" ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                   |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. "" |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.
.ToggleButton1.tag = "" '       - ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |ID1|ID2|..
'                               - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS1.Cells(i,3).ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
.hideNoteBox: .NoteBox.Text = "": .NoteBox.tag = "" 'QuickNotes Saving (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CommandButton1.Caption)
              .TagBox.Text = "" '170323_1219
'-----------------------------------------------------
.CommandButton1.Caption = "" '  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
.CommandButton1.ControlTipText = "" ' "Auto" - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| _
                                      (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) _
                                      |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "Auto|1_1|2_12|94|..."
'TextBox[]GId.AutoWordSelect = True - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
.TextBoxEnGId.AutoWordSelect = False: .TextBoxRuGId.AutoWordSelect = False: .TextBoxUaGId.AutoWordSelect = False
'TextBox[]GId.ControlTipText - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
'                              |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
.TextBoxEnGId.ControlTipText = "": .TextBoxRuGId.ControlTipText = "": .TextBoxUaGId.ControlTipText = ""
'ComboBox[]G.AutoWordSelect = True - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
.ComboBoxEnG.AutoWordSelect = False: .ComboBoxRuG.AutoWordSelect = False: .ComboBoxUaG.AutoWordSelect = False
'ComboBox[]G.ControlTipText - c|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
.ComboBoxEnG.ControlTipText = "": .ComboBoxRuG.ControlTipText = "": .ComboBoxUaG.ControlTipText = "":
.TextBoxCat.ControlTipText = "" ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
'                                   |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'                        "import" - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _
                                    |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. EditForm:UserForm_Activate)
.TextBoxCat.tag = "" ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (":9:5:4:")
.TextBoxCat.Text = "" '- |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 170126_1222
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBoxCat
    .Height = .Height - Dif(.TextBoxCat.Height, 15.5)
    .Frame4.Height = .Frame4.Height - Dif(.TextBoxCat.Height, 15.5)
    .TextBoxCat.Height = .TextBoxCat.Height - Dif(.TextBoxCat.Height, 15.5)
    .CommandButton1.Height = .Frame4.Height
End With: End Sub


'****************************************************
'****************************************************
'PF
'****************************************************
'****************************************************
Sub ShowProgressBar(ByVal num, Optional WSaround As Boolean) '5||10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If WSaround Then 'last_img = PF.FrameP.Tag
      If num = PF.FrameP.tag Then Exit Sub Else For i% = 0 To 4: _
        PF.Controls("ImageWS" & i%).Visible = i% = num: Next: PF.FrameP.tag = num
    Else: num = Int(num * 10): If num <= PF.FrameP.tag Then Exit Sub Else
        PF.Controls("Image" & num).Visible = True: PF.FrameP.tag = num: End If: PF.reSize: End Sub

'****************************************************
'****************************************************
'FindForm
'****************************************************
'****************************************************
'Sub SCSForm_startWaiting(valid As Boolean): With SCSForm: If Not valid Then Exit Sub Else If .isWaiting Then Exit Sub
'.isWaiting = True: .next_act = Timer + 300: 'Application.EnableCancelKey = 0: '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                          Do While .isWaiting
'                                              If Timer > .next_act Then .Freeze
'                                              WaitMessage ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                              DoEvents    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                              If Not .freezing Then Exit Do
'                                          Loop: 'Application.EnableCancelKey = 1:
'                                          End With: End Sub


Sub FindForm_DoFind()
With FindForm: If logging Then LogString ("in   FindForm_DoFind")
      If .Visible Then
            If .TextBox1.Text = "" Or FnFormIsLoaded("EditForm") Then Unload FindForm Else Call FindHider
      Else: Call View_Find: End If
If logging Then LogString ("out FindForm_DoFind")
End With
End Sub

Public Sub FindForm_Terminate(Optional noHide As Boolean): If AC_flg Then Exit Sub
  Call unlockWB: If ActiveCell.row > 1 Then cid = Cells(ActiveCell.row, 1)
  For i = 0 To 4: unLockWs Index(i): Sheets(FnWSCase(i)).Range("A1").AutoFilter field:=1: Call UnGroupRows(i): Next i
  If Not noHide Then Call FindHider
  If cid <> "" Then Call MoveToID(FnWSNum(ActiveSheet.name), cid, 3): LockWB 'if
End Sub

Sub FindHider(): If Not FnFormIsLoaded("FindForm") Then Exit Sub
With FindForm: If logging Then LogString ("in   FindHider")
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If .CommandButton4.Caption <> "" Then
Call unlockWB
  last_sheet = CInt(FnGetCellAddress(.CommandButton4.Caption, 1))
  last_row = CInt(FnGetCellAddress(.CommandButton4.Caption, 2))
  last_col = CInt(FnGetCellAddress(.CommandButton4.Caption, 3))
  Set c = Sheets(FnWSCase(last_sheet)).Cells(last_row, last_col)
  If c.rows(1).RowHeight > 53 Then c.rows(1).RowHeight = 53 'New
  If c.Hyperlinks.Count Then
     c.Font.ColorIndex = inv(5)
  Else: unLockWs Index(last_sheet)
    If Sheets(FnWSCase(last_sheet)).Cells(c.row, 2) = _
       Sheets(FnWSCase(last_sheet)).Cells(c.row, 3) And _
       Sheets(FnWSCase(last_sheet)).Cells(c.row, 2).Font.ColorIndex <> inv(15) _
       And c.Column = 3 Then
        c.Font.ColorIndex = inv(2)
        Rem~ MsgBox last_sheet & " " & last_row & " " & last_col
    Else: c.Font.ColorIndex = inv(xlAutomatic)
    End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  lang = FnCalledFrom()
  If lang > 0 Then 'EditForm is Loaded
    Dim id As String
    id = Trim(Cells(c.row, 1))
    If FnFarCell(lang, id, far_row, far_WS) Then
      target_term = Sheets(far_WS).Cells(far_row, 3)
      EditForm.Controls("ComboBox" & FnERUs(lang) & "G").value = target_term
    Else: MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
    End If
  Else: .Hide
  End If
  'FindForm.CommandButton4.Caption = ""
  Set c = Nothing
Call LockWBif
Else:   .StartUpPosition = 0
        .Hide
End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
last_search = .TextBox1.Text: End With
If logging Then LogString ("out FindHider")
End Sub

Function FnCalledFrom()
If logging Then LogString ("in   FnCalledFrom")
If FnFormIsLoaded("EditForm") Then
    If EditForm.Visible Then
      If EditForm.ComboBoxEnG.AutoWordSelect Then
          FnCalledFrom = 1
      ElseIf EditForm.ComboBoxRuG.AutoWordSelect Then
          FnCalledFrom = 2
      ElseIf EditForm.ComboBoxUaG.AutoWordSelect Then
          FnCalledFrom = 3
      ElseIf EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
          FnCalledFrom = 0
      Else: Msg "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|! Caption = " & EditForm.Caption, c_quietMode
          FnCalledFrom = -1
    End If: End If
Else: FnCalledFrom = 0
End If
If logging Then LogString ("out FnCalledFrom")
End Function

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'CatSelForm
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sub Clear_CatSelForm()
i = 1: While Not IsNull(FnCBCase(i, 0, 0))
  If FnCBCase(i, 0, 0).Enabled Then
  j = 1: While Not IsNull(FnCBCase(i, j, 0))
      FnCBCase(i, j, 0).value = False
  j = j + 1: Wend: End If
i = i + 1: Wend
End Sub

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CheckBox |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function FnCBCase(field, numb, form_id) 'ID 0 - CatSelForm; 1 - StatForm
Select Case form_id
       Case 0: form_name = "CatSelForm"
       Case 1: form_name = "StatForm"
End Select
If numb = 0 Then cbid = CStr(field) Else cbid = CStr(field) & "_" & CStr(numb)
On Error GoTo errHandler
    Set FnCBCase = UserForms(getFormIndex(form_name)).Controls("CheckBox" & cbid)
Exit Function
errHandler:
FnCBCase = Null: Resume Next
End Function


'****************************************************
'****************************************************
'EditForm
'****************************************************
'****************************************************
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TextBox
Private Sub EditFormTextCut(): EditForm.ActiveControl.ActiveControl.Cut: End Sub 'msgbox EditForm.TextBoxRuDef.SelText
Private Sub EditFormTextCopy(): EditForm.ActiveControl.ActiveControl.Copy: End Sub
Private Sub EditFormTextPaste(): EditForm.ActiveControl.ActiveControl.Paste: End Sub

Sub TrinitiSelectionChange(): On Error GoTo exitL
  If FnFormIsLoaded("EditForm") Then If EditForm.Visible Then _
  If EditForm.ActiveControl.ActiveControl.name Like "TextBox??GId" _
  Or EditForm.ActiveControl.ActiveControl.name Like "ComboBox??G" Then xx = FnERUs$(eru(ActiveSheet.Index)): _
     EditForm.Controls("TextBox" & xx & "GId").SetFocus: _
     EditForm.Controls("TextBox" & xx & "GId").value = Cells(ActiveCell.row, 1): _
     EditForm.Controls("TextBox" & xx & "Def").SetFocus
exitL: End Sub
Sub Clear_EditForm(): With EditForm: For lang = 1 To 3: .SetTerm lang, "": .SetAbb lang, "": .SetDef lang, "": .SetImageText lang, "": Next lang
                                                       '.SetGId "": .SetGroup lang, "" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
                      With .ToggleButton1:  .Caption = "": .ControlTipText = "": End With: End With: End Sub
                                                          '.ControlTipText '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "Auto"
Sub Disable_EditForm(bit As Boolean): For Each ctrl In EditForm.Controls: If ctrl.Parent.name <> "EditForm" Then ctrl.Enabled = False
                                                                    Next: EditForm.CommandButton1.Enabled = True: End Sub


'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm
'**************************************************** |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm, |fffd||fffd||fffd||fffd||fffd||fffd| EditForm |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, resizing
Sub View_Ini(widthBefore%, Optional widthAfter%, Optional frs = False) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                   If Not frs Then If Not FnFormIsVisible("EditForm") Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Zoom
'|fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
LogString ("in   View_Ini"): Call WSim: Dim i%, Vl As Boolean: asu = True: Call NoSup
With EditForm: If .MultiPageN.Visible Then widthAfter = widthAfter + .MultiPageN.Width
               If .TreeComButton.Caption = "<" Then .TreeComButton_Click '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If sag(TFR%, .Try_Frame_resize) < 6 Then '1-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    .Left = Application.Left - 1: .Width = Application.Width + widthAfter: .Top = Application.Top + Application.Height
    .Do_Frame_resize TFR%, IIf(.Frame1.Top = 0, 0, .Frame4.Height + .Frame4.Top), tbCatH% - .TextBoxCat.Height: Frame_resize TFR%: GoSub Frame4_resize: GoTo reF4L: End If
.Frame1.Visible = True: .Frame2.Visible = True: .Frame3.Visible = True
Dim F4 As Boolean, vShift%: FH% = 78: F4 = True: 'Frame4 on Top
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| _
    .Top = Application.Top + Application.Height - .Height '* .Zoom / 100 _
    .Width = Application.Width '.UsableWidth _
    .Left = Application.Left
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)
'EditForm
Rem Base: With EditForm: .Zoom = 90: .Left = 1: .Width = 500.25 * .Zoom / 100: .Height = 279.75 * .Zoom / 100: End With
retryL: inc i%: .Zoom = 100: .Left = Application.Left - 1: .Width = Application.Width + widthAfter: _
                            '.Height = FH * IIf(Vl, 3, 1) + .Frame4.Height + 5 ' + Dif(tbCatH%, 15.5) '23
                            .Top = Application.Top + Application.Height ' - 18 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' - .Height '* .Zoom / 100
                            '.Width = Application.Width '.UsableWidth
'FRAMES
If F4 Then GoSub Frame4_resize
                      EditForm.Height = FH * IIf(Vl, 3, 1) + .Frame4.Height + 5 ' + Dif(tbCatH%, 15.5) '23
With .Frame1: .Caption = Sheets(2).name: .Top = vShift: On Error GoTo noTreeL: .Left = widthBefore: _
              .Width = (EditForm.Width - widthBefore - widthAfter) / IIf(Vl, 1, 3): .Height = FH: End With
If Not Frame_resize(1) Then
   If Vl Then If i% < 4 Then Application.Width = Application.Width + 50: Call SCSForm.reDraw: GoTo retryL _
                        Else: Msg "Frame1_Resize_Err": Exit Sub
   Vl = True: GoTo retryL: End If
With .Frame2: .Caption = Sheets(3).name: .Top = vShift + IIf(Vl, 1 * EditForm.Frame1.Height, 0): .Left = widthBefore + IIf(Vl, 0, (EditForm.Width - widthBefore - widthAfter) / 3 - 1): _
              .Width = (EditForm.Width - widthBefore - widthAfter) / IIf(Vl, 1, 3): .Height = FH: End With
Call Frame_resize(2)
With .Frame3: .Caption = Sheets(4).name: .Top = vShift + IIf(Vl, 2 * EditForm.Frame1.Height, 0): .Left = widthBefore + IIf(Vl, 0, 2 * (EditForm.Width - widthBefore - widthAfter) / 3 - 1): _
              .Width = (EditForm.Width - widthBefore - widthAfter) / IIf(Vl, 1, 3): .Height = FH: End With
Call Frame_resize(3)
'OTHER
With .TreeComButton: .Top = vShift: .Height = EditForm.Frame3.Top + EditForm.Frame3.Height - vShift: End With
With .BrowserListBox: .Top = vShift: .Height = EditForm.TreeComButton.Height + 3: End With
If Not F4 Then With .Frame4: .Top = EditForm.Frame3.Top + EditForm.Frame3.Height: _
                             .Left = 1: .Width = EditForm.Width - 2: .Height = 20: End With
.OptionButtonG.Caption = "General": .OptionButtonS.Caption = "Sub": On Error GoTo packF4L
reF4L:
With .TextBoxCat: 'cat_rows% = prsCount(Chr(10), .Value): .Height = IncOn(.Height, cat_rows% * 10 - Dif(.Height, 15.5))
                                              tbCatH% = .Height: End With '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        With .OptionButtonG: .Top = 0: .Left = 0: .Width = IIf(.Caption = "G", 20, 48): .Height = 17.25: End With
        With .OptionButtonS:  .Top = 0: .Left = EditForm.OptionButtonG.Width: .Width = IIf(.Caption = "S", 20, 33.75): .Height = 17.25: End With
        With .ToggleButton1:  .Top = 0: .Left = EditForm.OptionButtonG.Width + EditForm.OptionButtonS.Width - 0.25: .Width = 22: .Height = 16: End With
        With .CommandButton1:  .Top = 0: .Width = 24: .Left = EditForm.Frame4.Width - .Width - 6: .Height = 18 + Dif(tbCatH%, 15.5): End With
    On Error Resume Next '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
        With .TextBoxCat: .Top = 1: .Left = EditForm.ToggleButton1.Left + 22: .Width = EditForm.CommandButton1.Left - .Left - 1: End With
             'cat_rows% = prsCount(Chr(10), .Value): .Height = IncOn(.Height, cat_rows% * 10 - Dif(.Height, 15.5)): End With '.Height = 15.5
    On Error GoTo 0
'MsgBox Frame1.Width & Chr(10) & _
        Frame1.InsideWidth
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If .MultiPageN.Visible Then .MultiPageN.Height = .Height - 5: .MultiPageN.Left = .Width - .MultiPageN.Width - 2: _
                            .NoteBox.Height = .Height - 22: .TagBox.Height = .Height - 22: .LabelStat.Height = .Height - 22
If twoWindowsWild Then .Top = .Top - .Height
.Repaint: LogString ("out View_Ini"): Exit Sub
Frame4_resize: With .Frame4: .Top = -3: .Left = 1: .Width = EditForm.Width - 2 - widthAfter:
                    .Height = 20 + Dif(tbCatH%, 15.5): vShift = .Height + .Top: End With: Return
noTreeL: widthBefore = 0: GoTo retryL: Exit Sub
packF4L: .OptionButtonG.Caption = "G": _
         .OptionButtonS.Caption = "S": GoTo reF4L: End With: End Sub


Function Frame_resize(n%) As Boolean: LogString ("in   Frame_Resize (" & n% & ")"): Dim Vl As Boolean:
With EditForm: Hl = .Controls("Frame" & n%).Height = .Frame1.Height  '---------------------------------------
               VF = .Controls("Frame" & n%).Height > 150 'Full view mode
On Error GoTo errHnd: vShift% = IIf(Hl, 0, (n% - 1) * .Frame1.Height)
                      hWidth% = IIf(.Controls("Frame" & n%).Left = 0, 10, 0)
Dim hW%: If VF Then hW% = EditForm.Controls("Frame" & n%).Width / 2
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
With .Controls("Image" & n%): .Top = IIf(VF, 6, vShift + 40): .Left = 1: .Width = 24: .Height = 15: End With
With .Controls("TextBox" & FnERUs(n%) & "Term"): .Top = IIf(VF, 0, vShift + 6): .Height = 36: _
                                                .Left = IIf(VF, hW% - 5, 0): End With 'EditForm.Frame1.Width / 2 > 102, 102,
With .Controls("Image" & n%): EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Width = _
     IIf(VF, hW% - 4, hWidth% + switch(EditForm.Controls("Frame" & n%).Width / 2 > .Width * 3, .Width * 3, _
                                   EditForm.Controls("Frame" & n%).Width / 2 > .Width * 2, .Width * 2)): End With

'With .Image_resize_1: .Top = 40: .Left = 1: .Width = 24: .Height = 15: End With
With .Controls("TextBox" & FnERUs(n%) & "Abb"): .Top = EditForm.Controls("Image" & n%).Top - 0.25: .Height = 15.5: _
                                               .Left = EditForm.Controls("Image" & n%).Left + EditForm.Controls("Image" & n%).Width - 1:
     .Width = IIf(VF, -1, hWidth%) + EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Width - EditForm.Controls("Image" & n%).Width: End With
With .Controls("TextBox" & FnERUs(n%) & "GId"): .Top = EditForm.Controls("Image" & n%).Top + 14.5: .Left = 0: .Width = 26: .Height = 15.5: End With
With .Controls("ComboBox" & FnERUs(n%) & "G"): .Top = EditForm.Controls("Image" & n%).Top + 14.5: .Left = EditForm.Controls("Image" & n%).Width: .Height = 15.5: _
     .Width = IIf(VF, 4, 5) + EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Width - EditForm.Controls("TextBox" & FnERUs(n%) & "GId").Width: End With
With .Controls("TextBox" & FnERUs(n%) & "Def"): .Left = IIf(VF, 0, EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Width): _
     .Top = IIf(VF, EditForm.Controls("TextBox" & FnERUs(n%) & "GId").Top + EditForm.Controls("TextBox" & FnERUs(n%) & "GId").Height, 0): _
     .Width = EditForm.Controls("Frame" & n%).Width - .Left - 4: .Height = EditForm.Controls("Frame" & n%).Height - .Top - 7: End With
'Frame_Resize = True: Exit Function
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If n% = 1 Then With .CB_fastnamesfilling: .Top = -1: .Left = EditForm.Controls("TextBox" & FnERUs(n%) & "Def").Left - 13: .Width = 12: .Height = 8: End With
With .Controls("Image_resize_" & n%): .Top = IIf(VF, -6, vShift) + EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Height - 6: _
                                      .Left = EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Left + _
                                              EditForm.Controls("TextBox" & FnERUs(n%) & "Term").Width - 10: End With
End With: Frame_resize = True '------------------------------------------------------------------------------
errHnd: LogString ("out Frame_Resize (<" & Frame_resize & ">: " & n% & ")"): End Function


'****************************************************
'****************************************************
'StatForm
'****************************************************
'****************************************************
Sub StatFormUpdate(Optional pass As Boolean): If pass Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| StatForm
    If FnFormIsLoaded("StatForm") Then _
      If StatForm.MultiPage1.SelectedItem.Caption = "Item" Then _
        If StatForm.obActive And StatForm.obCTerm Then StatForm.tbxID = _
          ActiveSheet.Cells(ActiveCell.row, 1): _
            If StatForm.TBStore Then Call StatForm.TBStore_Click Else StatForm.TBStore = True
End Sub


Sub ShowProgress(num)
With StatForm:  If num > 20 Or Int(num) - num <> 0 Then Exit Sub
                If Not .FrameP.Visible Then .FrameP.Visible = True
                If Not .Controls("Image" & num).Visible Then WaitMessage: DoEvents: _
                       .Controls("Image" & num).Visible = True: .FrameP.Repaint
End With: End Sub

Sub HideProgress()
With StatForm:  For i = 1 To 20: .Controls("Image" & i).Visible = False: Next i
                .FrameP.Visible = False: StatForm.FrameP.Repaint: End With
End Sub

Sub SetLabel(lbl_text)
With StatForm: .Label1.Caption = lbl_text: .Repaint: End With
End Sub

Sub SetHeader(head_txt)
head_length = Len(head_txt) - 1
pre_srting = ""
If (head_length / 2) <> Int(head_length / 2) Then nxt_string = "--"
For i = 1 To head_length
  pre_srting = pre_srting + "_"
  If i / 2 = Int(i / 2) Then nxt_string = nxt_string + "---"
Next i
With StatForm.FrameR: If .TextBox1.value <> "" Then .TextBox1.value = .TextBox1.value + Chr(10) + pre_srting + Chr(10)
.TextBox1.value = .TextBox1.value + head_txt + Chr(10) + nxt_string: .Repaint: End With
End Sub

Sub PutLine(solid As Boolean)
With StatForm.FrameR:
If solid Then .TextBox1.value = .TextBox1.value + Chr(10) + "___________________________" _
         Else .TextBox1.value = .TextBox1.value + Chr(10) + "---------------------"
.Repaint: End With
End Sub

Sub report(rep_str)
post_tab = ""
If Len(rep_str) <= 17 Then post_tab = post_tab + vbTab
If Len(rep_str) <= 9 Then post_tab = post_tab + vbTab
With StatForm.FrameR: .TextBox1.value = .TextBox1.value + Chr(10) + rep_str + post_tab: .Repaint: End With
End Sub

Sub s_report(rep_str, Optional nr As Boolean) 'short
With StatForm.FrameR:
If nr Then .TextBox1.value = .TextBox1.value + Chr(10) + rep_str _
      Else .TextBox1.value = .TextBox1.value + " | " + rep_str
.Repaint: End With
End Sub

Sub ReportValue(rep_val, Optional rep_prsnt)
With StatForm.FrameR: .TextBox1.value = .TextBox1.value + vbTab + ":  " + CStr(rep_val)
    If Not IsMissing(rep_prsnt) Then If rep_prsnt <> 0 Then .TextBox1.value = .TextBox1.value + vbTab + "(" + CStr(rep_prsnt) + "%)"
    .Repaint: End With
End Sub

Sub s_ReportValue(rep_val, rep_prsnt, new_row As Boolean)
With StatForm.FrameR:
    If new_row Then .TextBox1.value = .TextBox1.value + " : " + Chr(10) + CStr(rep_val) _
               Else .TextBox1.value = .TextBox1.value + " : " + CStr(rep_val)
    If rep_prsnt <> 0 Then .TextBox1.value = .TextBox1.value + " (" + CStr(rep_prsnt) + "%)"
    .Repaint: End With
End Sub

Sub ErrorReport(err_msg, Optional err_ws, Optional err_row, Optional err_col): inc last_used_ID '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
report_text = "***Error*** "
If Not IsMissing(err_ws) Then report_text = report_text & "on " + FnWSCase(err_ws) + _
                                           "(" + CStr(err_row) + "," + CStr(err_col) + ") : "
report_text = report_text & err_msg
If StatForm.Visible Then
  With StatForm.FrameR: .TextBox1.value = .TextBox1.value + Chr(10) + report_text: .Repaint: End With
Else: LM report_text: End If
End Sub

'****************************************************
'****************************************************
'DDBar
'****************************************************
'****************************************************
Sub HideDDBarIf(): If Not DDBarUsed Then Exit Sub
                   If Not DDBar.isHidden Then DDBar.HideBar
                                          End Sub
'****************************************************
'****************************************************
'satellite
'****************************************************
'****************************************************
Function isCusTranS(hWnd&): isCusTranS = satellite.custran$ Like "*|" & hWnd& & "|*": End Function '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub AddCusTranS(hWnd&): If Not FnFormIsLoaded("satellite") Then Exit Sub Else If isCusTranS(hWnd&) Then Exit Sub
                        If SCSForm.inCollection(hWnd&) Or hWnd& = SCSForm.t_hwnd Then satellite.custran$ = satellite.custran$ & "|" & hWnd& & "|"
End Sub
Sub DelCusTranS(hWnd&): If Not FnFormIsLoaded("satellite") Then Exit Sub Else If Not isCusTranS(hWnd&) Then Exit Sub
                                                            satellite.custran$ = Replace(satellite.custran$, "|" & hWnd& & "|", ""): End Sub
Attribute VB_Name = "Formatting"
'.Columns("B").Left - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ActiveWindow.Width (Application.Width)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - ActiveWindow.Width + ActiveWindow.Zoom

Rem Tags: Sheet resize, resize Sheets
Public Sub SheetResize(): ls "~", "SheetResize"           'DisplayGridlines = Ctrl+Shift+M
LP 1: If Not settingsForm.CheckBox14 Or Application.ActiveWindow.DisplayGridlines Then Exit Sub 'flg_InWork Or
LP 2: If Right(ActiveSheet.name, 1) = "_" Or Not ActiveSheet.ProtectContents Then Exit Sub
LP 3: svd = Workbooks("MAC.XLA").Saved: ActiveWindow.DisplayVerticalScrollBar = True: Workbooks("MAC.XLA").Saved = svd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
LP 4: Call unlockWB: On Error Resume Next: Call NoSup
'Application.DisplayFullScreen = False
'ActiveWindow.Width = 150   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1440x900
'Application.Width = 200 'Z=100 29.57*7.09(212px) AWW=198   210 AWW=208.5
                        'Z=85  35.43     (253px)           'Z=85  37.71 (269px)
                        'Z=70  43.71     (311px)
                        'Z=55  57.14     (405px)
'Columns("A").ColumnWidth    = 31.43     (225px) = 257(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.PointsToScreenPixelsX(Columns("A").ColumnWidth) = 63 (257) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'For Each WS In Workbooks("MAIN.XLSB").Sheets
LP 14: With ActiveSheet: Select Case .Index
  Case 1:
LP 16:      .Columns("A").ColumnWidth = 2.6
LP 17:      .Columns("E").ColumnWidth = 13.14
      .Columns("B:D").ColumnWidth = (Windows(.Index).Width * (100 / ActiveWindow.Zoom) _
                                / 15.25 _
                                + (Windows(.Index).Width / 8) * (100 / ActiveWindow.Zoom) _
                                - 7.5 * (100 / Windows(.Index).Zoom) _
                                - .Columns("A").ColumnWidth) / 3 + 0.3 ' - .Columns("E").ColumnWidth
  Case 2 To 4: r_sroll_width = get_r_sroll_width
LP 24:               newWrapText = .Columns("D").ColumnWidth + r_sroll_width > 2 * .Columns("C").ColumnWidth 'NEW
'        If Cells(1, 4).WrapText And .Columns("D").ColumnWidth < 2 * .Columns("C").ColumnWidth Then
'            .Columns("B").WrapText = False: 'Columns("B").Hidden = True:
'            .Columns("D").WrapText = False:  .Columns("D").UseStandardHeight = True
'        ElseIf Not Cells(1, 4).WrapText And .Columns("D").ColumnWidth > 2 * .Columns("C").ColumnWidth Then
'            .Columns("D").WrapText = True:  'Msg 2
'        Else:
LP 31:            .Columns("A").ColumnWidth = 2.6
LP 32:            .Columns("E").ColumnWidth = 13.14
LP 33:            .Columns("C").ColumnWidth = 25
LP 34:            preBstate = .Columns("B").Hidden '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| calcol
LP 35:            .Columns("B").ColumnWidth = IIf(newWrapText, (ActiveWindow.Width * (100 / ActiveWindow.Zoom) _
                                    / 15.25 _
                                    + (ActiveWindow.Width / 8) * (100 / ActiveWindow.Zoom) _
                                    - 7.5 * (100 / ActiveWindow.Zoom) _
                                    - .Columns("A").ColumnWidth - .Columns("C").ColumnWidth) _
                                    / 5, 0) ' - .Columns("E").ColumnWidth
LP 41:            .Columns("D").ColumnWidth = (ActiveWindow.Width * (100 / ActiveWindow.Zoom) _
                                    / 15.25 _
                                    + (ActiveWindow.Width / 8) * (100 / ActiveWindow.Zoom) _
                                    - 7.5 * (100 / ActiveWindow.Zoom) _
                                    - .Columns("A").ColumnWidth - .Columns("C").ColumnWidth) _
                                    * IIf(Cells(1, 4).WrapText, 4, 5) / 5 + 3 ' - .Columns("E").ColumnWidth
                                    '- IIf(.Columns("A").Hidden, 0, r_sroll_width%)) _
            If Cells(1, 4).WrapText Then If Between(ActiveWindow.Width, 300, 310) _
                                         Or Between(ActiveWindow.Width, 400, 410) _
                                         Or Between(ActiveWindow.Width, 500, 510) _
                                         Or Between(ActiveWindow.Width, 600, 610) _
                                         Or Between(ActiveWindow.Width, 700, 710) _
                                         Or Between(ActiveWindow.Width, 800, 810) _
                                         Or Between(ActiveWindow.Width, 900, 910) _
                                         Or Between(ActiveWindow.Width, 1000, 1010) _
                                         Then .Columns("D").UseStandardHeight = True 'hard
LP 57:            If preBstate <> .Columns("B").Hidden Then r_sroll_width = get_r_sroll_width '|fffd||fffd||fffd||fffd||fffd||fffd| B_resize
LP 58:            .Columns("D").ColumnWidth = .Columns("D").ColumnWidth - r_sroll_width + 2 '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        'End If
  Case 5:
LP 61:        .Columns("A").ColumnWidth = 2.6
LP 62:        .Columns("H").ColumnWidth = 13.14
LP 63:        .Columns("B").ColumnWidth = 7.14
LP 64:        .Columns("C").ColumnWidth = (ActiveWindow.Width * (100 / ActiveWindow.Zoom) _
                                / 15.25 _
                                + (ActiveWindow.Width / 8) * (100 / ActiveWindow.Zoom) _
                                - 7.5 * (100 / ActiveWindow.Zoom) _
                                - .Columns("A").ColumnWidth _
                                - .Columns("B").ColumnWidth * 3) / 3 - 0.5 ' - .Columns("H").ColumnWidth
LP 70:        .Columns("D").ColumnWidth = .Columns("B").ColumnWidth
LP 71:        .Columns("E").ColumnWidth = .Columns("C").ColumnWidth
LP 72:        .Columns("F").ColumnWidth = .Columns("B").ColumnWidth
LP 73:        .Columns("G").ColumnWidth = .Columns("C").ColumnWidth
  Case 6:
LP 75:        .Columns("G").ColumnWidth = 4.43
        .Columns("A:C").ColumnWidth = (ActiveWindow.Width * (100 / ActiveWindow.Zoom) _
                                / 15.25 _
                                + (ActiveWindow.Width / 8) * (100 / ActiveWindow.Zoom) _
                                - 7.5 * (100 / ActiveWindow.Zoom) _
                                - .Columns("G").ColumnWidth * 2) / 3 / 3
        .Columns("D:F").ColumnWidth = (ActiveWindow.Width * (100 / ActiveWindow.Zoom) _
                                / 15.25 _
                                + (ActiveWindow.Width / 8) * (100 / ActiveWindow.Zoom) _
                                - 7.5 * (100 / ActiveWindow.Zoom) _
                                - .Columns("G").ColumnWidth * 2 _
                                - .Columns("A").ColumnWidth * 3) / 3
LP 87: End Select: End With: LockWBif: SUp: End Sub

Private Function get_r_sroll_width(): 'If ActiveWindow.Zoom <> 70 Then Exit Sub 'SheetResize
  With ActiveSheet: 'MsgBox .Columns("D").ColumnWidth & "*" & ActiveWindow.Zoom
If .Columns("B").Hidden Then get_r_sroll_width = 1 _
                        Else get_r_sroll_width = -6 + 5 * (ActiveWindow.Width / 91) * (70 / ActiveWindow.Zoom)
End With: End Function                                '5-91:7:130:9-160

Sub DelColorDesign() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
unlockWB
  For i = 1 To 3
    With Sheets(FnWSCase(i)).Range("B2:D" + CStr(FnGetLastRow(i)))
      If invF Then .Interior.Color = RGB(0, 0, 0) _
              Else .Interior.ColorIndex = xlNone
      .Borders(xlEdgeTop).LineStyle = xlNone
      .Borders(xlEdgeBottom).LineStyle = xlNone
      .Borders(xlInsideVertical).LineStyle = xlNone
      .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
  Next i
LockWBif
End Sub

Sub SetColorDesign(): ls "~", "SetColorDesign"  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'hdn = Columns("B").Hidden: If hdn Then Columns("B").Hidden = False
unlockWB: PF.setMode "p10" 'PF.show vbModeless: |fffd||fffd||fffd||fffd||fffd||fffd| 'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":
  rnum = FnGetLastRow(1): For i = 2 To rnum
    Call ShowProgressBar(i / rnum, False)
    Call SetRowDesign(FnWSCase(1), i, FnIsRoot(Sheets(FnWSCase(1)).Cells(i, 1)), True)
                          Next i:      'Columns("B").Hidden = hdn
                                    PF.setModeActual: LockWBif: End Sub

Sub DelRowDesign(tWS, Trow)
    With Sheets(tWS).Range("B" + CStr(Trow) + ":D" + CStr(Trow))
      .Interior.ColorIndex = xlNone
      .Borders(xlInsideVertical).LineStyle = xlNone
      If Sheets(tWS).Cells(Trow - 1, 3).Interior.ColorIndex = xlNone Then _
        .Borders(xlEdgeTop).LineStyle = xlNone
      If Sheets(tWS).Cells(Trow + 1, 3).Interior.ColorIndex = xlNone Then _
        .Borders(xlEdgeBottom).LineStyle = xlNone
    End With
    Sheets(tWS).Cells(Trow, 1).Font.Bold = False
End Sub

Sub SetRowDesign(tWS, Trow, des_style, cycle, Optional noInv As Boolean) 'des_style - |fffd||fffd||fffd||fffd||fffd|; cycle - 3 WS
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. UpdateRowFormatting; )
If logging Then LogString ("in   SetRowDesign (" & tWS & " ," & Trow & " ," & des_style & " ," & cycle & ")")
    If CBool(des_style) Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|
          pos = 0: cnt = 0
          While InStr(pos + 1, Sheets(tWS).Cells(Trow, 1), "_") <> 0
            pos = InStr(pos + 1, Sheets(tWS).Cells(Trow, 1), "_"): cnt = cnt + 1
          Wend
          Select Case cnt
            Case 0: bg_color = 37: bld = True: ital = False: start_column = "B"
            Case 1: bg_color = 34: bld = True: ital = False: start_column = "C"
            Case 2: bg_color = 35: bld = True: ital = False: start_column = "C"
            Case 3: bg_color = 36: bld = True: ital = False: start_column = "C"
            Case 4: bg_color = 40: bld = True: ital = False: start_column = "C"
            Case 5: bg_color = 38: bld = True: ital = False: start_column = "C"
            Case 6: bg_color = 37: bld = False: ital = True: start_column = "C"
            Case 7: bg_color = 34: bld = False: ital = True: start_column = "C"
            Case 8: bg_color = 35: bld = False: ital = True: start_column = "C"
            Case 9: bg_color = 36: bld = False: ital = True: start_column = "C"
            Case 10: bg_color = 40: bld = False: ital = True: start_column = "C"
            Case 11: bg_color = 38: bld = False: ital = True: start_column = "C"
            Case Else: bg_color = 15: bld = False: ital = True: start_column = "C"
          End Select
      unLockWBfor
      If cycle Then
        Dim id As String
        id = Sheets(tWS).Cells(Trow, 1)
        For j% = 1 To 3:
          Call FnFarCell(j, id, far_row, far_WS)
          If start_column <> "B" Then Sheets(far_WS).Cells(far_row, shadcol).Font.Bold = True 'fix
          With Sheets(far_WS).Range(start_column + CStr(far_row) + ":D" + CStr(far_row))
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Interior.ColorIndex = inv(bg_color, noInv)
          End With
          With Sheets(far_WS).Range(start_column + CStr(far_row) + ":C" + CStr(far_row))
            If Not ital Then abb_restore = Len(FnGetAbbrev(Sheets(far_WS).Cells(far_row, 3), term))
            .Font.Bold = bld: .Font.Italic = ital
            If Not ital And CBool(abb_restore) Then Sheets(far_WS).Cells(far_row, 3).Characters(Len(Sheets(far_WS).Cells(far_row, 3)) - abb_restore, _
            abb_restore).Font.Italic = True
          End With
        Next j
      Else
          With Sheets(tWS).Range(start_column + CStr(Trow) + ":D" + CStr(Trow))
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Interior.ColorIndex = inv(bg_color, noInv)
          End With
          With Sheets(tWS).Range(start_column + CStr(Trow) + ":C" + CStr(Trow))
            If Not ital Then abb_restore = Len(FnGetAbbrev(Sheets(tWS).Cells(Trow, 3), term))
            .Font.Bold = bld: .Font.Italic = ital
            If Not ital And CBool(abb_restore) Then Sheets(tWS).Cells(Trow, 3).Characters(Len(Sheets(tWS).Cells(Trow, 3)) - abb_restore, _
            abb_restore).Font.Italic = True
          End With
      End If: LockWB
    End If
If logging Then LogString ("out SetRowDesign")
End Sub

Sub NoSpaces(): Call unlockWB
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  PF.setMode "p5" 'PF.show vbModeless: |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 0 To 3 '4 (+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + FnWSCase(i)
      Call ShowProgressBar(i, True)
      rnum = FnGetLastRow(i)
      col_num = 1
      If i = 0 Then col_num = 3
      If i = 4 Then col_num = 6
      For j = 2 To rnum
        For k = 2 To 1 + col_num
          If FnGetAbbrev(Sheets(FnWSCase(i)).Cells(j, k), term) = "" Then
            Sheets(FnWSCase(i)).Cells(j, k).value = _
              Trim(Sheets(FnWSCase(i)).Cells(j, k))
            If col_num = 1 And Sheets(FnWSCase(i)).Cells(j, 3).Font.ColorIndex = inv(2) Then _
              Sheets(FnWSCase(i)).Cells(j, 3).value = _
                Trim(Sheets(FnWSCase(i)).Cells(j, 3))
          End If
          If col_num = 1 Then
            If Len(Sheets(FnWSCase(i)).Cells(j, 2)) <= 18 Then
              Sheets(FnWSCase(i)).Cells(j, 2).Font.name = "Verdana"
            Else 'If Sheets(FnWSCase(i)).Cells(j, 2).Font.ColorIndex = inv(15) Then
              Sheets(FnWSCase(i)).Cells(j, 2).Font.name = "Tahoma"
              If Sheets(FnWSCase(i)).Cells(j, 3).Font.ColorIndex = inv(2) Then _
                Sheets(FnWSCase(i)).Cells(j, 3).Font.name = "Tahoma"
            End If
          End If
        Next k
      Next j
    Next i: PF.setModeActual: End Sub '|fffd||fffd||fffd| Unload PF


Sub UpdateContentFormatting()
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 4-|fffd| WS)
    PF.setMode "p5" 'PF.show vbModeless: |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 0 To 3
      Call ShowProgressBar(i, True) 'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + FnWSCase(i):
      Sheets(FnWSCase(i)).Columns("B:D").WrapText = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If FnWSCase(i) = WS0 Then '**** |fffd||fffd||fffd||fffd||fffd||fffd| ****
        With Sheets(FnWSCase(i)).Columns("A:E").Font
          .name = "Tahoma"
          .Size = 10
        End With
        Sheets(FnWSCase(i)).Columns("B:D").Font.ColorIndex = inv(5)
        Sheets(FnWSCase(i)).Range("B1:D1").Font.ColorIndex = inv(xlAutomatic)
      Else
        Sheets(FnWSCase(i)).Columns("B:B").WrapText = False
        With Sheets(FnWSCase(i)).Columns("A:A").Font
          .name = "Tahoma"
          .Size = 10
        End With
        With Sheets(FnWSCase(i)): .Range("C1:C" & .UsedRange.rows.Count).Font.ColorIndex = inv(xlAutomatic): End With 'NEW
        With Sheets(FnWSCase(i)).Columns("C:D").Font
          .name = "Verdana"
          .Size = 10
        End With
        With Sheets(FnWSCase(i)).Columns("E:E").Font
          .name = "Tahoma"
          .Size = 10
        End With
      End If
                                    '**** |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ****
      With Sheets(FnWSCase(i)).Columns("A:E")
        .VerticalAlignment = xlTop  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        .HorizontalAlignment = xlLeft
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
      End With
      Sheets(FnWSCase(i)).Range("B1:D1").HorizontalAlignment = xlCenter
      With Sheets(FnWSCase(i)).Columns("A:A")
        .WrapText = False
        .Interior.ColorIndex = inv(15)   'beckground patameters
        If Not invF Then
          .Borders(xlEdgeRight).LineStyle = xlContinuous  'cells right border
          .Borders(xlEdgeRight).Weight = xlThin
          .Borders(xlEdgeRight).ColorIndex = inv(xlAutomatic)
        End If
        .ShrinkToFit = True
      End With
      With Sheets(FnWSCase(i)).Columns("E:E")
        .WrapText = False
        .Font.ColorIndex = inv(xlAutomatic)
        .Interior.ColorIndex = inv(15)   'beckground patameters
        If Not invF Then
          .Borders(xlEdgeLeft).LineStyle = xlContinuous  'cells left border
          .Borders(xlEdgeLeft).Weight = xlThin
          .Borders(xlEdgeLeft).ColorIndex = inv(xlAutomatic)
        End If
      End With
    Next i 'Unload PF
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WrapText |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    rnum = FnGetLastRow(0)
    PF.setMode "p10" 'PF.show vbModeless: |fffd||fffd||fffd||fffd||fffd||fffd|
    Call ShowProgressBar(0, False) 'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WrapText":
    For i = 2 To rnum
      Call ShowProgressBar(i / rnum, False)
      Dim id As String: id = Sheets(WS0).Cells(i, 1)
      For j = 1 To 3
        If FnFarCell(j, id, far_row, far_WS) And _
           Sheets(far_WS).Cells(far_row, 2).Font.ColorIndex = inv(xlAutomatic) Then _
          Sheets(far_WS).Cells(far_row, 2).WrapText = True
      Next j: Next i:
      PF.setModeActual: End Sub 'Unload PF

Sub UpdateRowFormattingManual(): r = ActiveCell.row: If r < 2 Or Cells(r, 1) = "" Or FnWSNum(ActiveSheet.name) > 4 Then Exit Sub
                                 Call UpdateRowFormatting(Cells(r, 1)): End Sub

Sub testew(): UpdateRowFormatting ("86_3_1"): End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Font.ColorIndex
Sub srvFormatting(): With Sheets(wsEn): i& = 1: Do: id$ = .Cells(inc(i&), idcol): If id = "" Then Exit Sub
                              If FnIsGeneral(id) Then For j% = 1 To 3: FnFarCell j, id, far_row, far_WS: _
                                 Sheets(far_WS).Cells(far_row, shadcol).Font.ColorIndex = inv(xlAutomatic): Next: UpdateRowFormatting id$
                                                Loop Until id = "": End With: End Sub

Sub UpdateRowFormatting(rowID As String)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 4-|fffd| WS)
If logging Then LogString ("in   UpdateRowFormatting (" & rowID & ")")
unlockWB ': Call noSUp
  For j = 0 To 4: trinF = Not (j = 0 Or j = 4)
    With Sheets(Index(j))
        cv = .Columns(2).Hidden
             .Columns(2).Hidden = False  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Rem Global
        If FnFarCell(j, rowID, far_row, far_WS) Then
          With .Range("A" + CStr(far_row) + ":D" + CStr(far_row))
            .VerticalAlignment = xlTop  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            .HorizontalAlignment = xlLeft
            .Font.Size = 10
            .Font.name = "Tahoma"
            .WrapText = True
          End With
        End If
    Dim isRoot As Boolean: isRoot = FnIsRoot(rowID)
    Rem Links & ABC
        If (Not trinF) And CBool(far_row) Then
          If .Cells(far_row, 1).Font.ColorIndex <> inv(3) Then _
             .Cells(far_row, 1).Font.ColorIndex = inv(IIf(j = 0, 48, 15)) 'Red (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?)
             .Cells(far_row, 1).Interior.Color = Sheets(1).Cells(1, 1).Interior.Color 'Gray-40%
             .Range("B" + CStr(far_row) + IIf(j = 0, ":D", ":G") + CStr(far_row)).Font.Underline = xlUnderlineStyleNone
             .Range("B" + CStr(far_row) + IIf(j = 0, ":D", ":G") + CStr(far_row)).Font.Bold = isRoot
    Rem ERU
        ElseIf CBool(far_row) Then
          With .Range("C" + CStr(far_row) + ":D" + CStr(far_row))
            .Font.name = "Verdana"
          End With
          With Union(.Cells(far_row, 5), .Cells(far_row, 1))
            .WrapText = False
          End With
          .Cells(far_row, shadcol).Font.Bold = isRoot: .Cells(far_row, termcol).Font.Bold = isRoot
    Rem UPDATE RowDesign
          DelRowDesign far_WS, far_row                                        '*invF*
          SetRowDesign far_WS, far_row, isRoot, False, True
    Rem Color '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?
          unlockWB
          'If Not invF Then                                                    '*invF*
            If FnIsGeneral(rowID) Then .Cells(far_row, 2).Font.ColorIndex = inv(IIf(isRoot, 2, xlAutomatic))
                                       .Cells(far_row, 3).Font.ColorIndex = inv(xlAutomatic) 'White/black |fffd||fffd||fffd||fffd||fffd||fffd|
            If .Cells(far_row, defcol).Hyperlinks.Count _
                                  Then Sheets(far_WS).Cells(far_row, defcol).Font.ColorIndex = inv(5) _
                                  Else .Cells(far_row, defcol).Font.ColorIndex = inv(xlAutomatic) '|fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         'End If
        '|fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WrapText |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
          If .Cells(far_row, 2).Font.ColorIndex <> inv(xlAutomatic) Then _
             .Cells(far_row, 2).WrapText = False
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If .rows(far_row).RowHeight > 53 Then _
             .rows(far_row).RowHeight = 53
        'Else: MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| " + rowID + " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        End If: On Error Resume Next: .Columns(2).Hidden = cv: On Error GoTo 0 '190102 - |fffd||fffd||fffd||fffd||fffd| |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd||fffd||fffd||fffd||fffd|?)
    Rem Global(inv)                                                           '*invF*
    If CBool(far_row) And invF Then
      'If Not invF(.Cells(far_row, 1)) Then  ' Not invF(.Cells(far_row, 1)) '|fffd||fffd||fffd||fffd||fffd| .Cells(far_row, 2).Interior.ColorIndex = xlNone - X
        'MsgBox .Cells(far_row, 2)
        'NinvF = Not invF(.Cells(far_row, 1))
        NinvF = .Cells(far_row, 2).Interior.ColorIndex = xlNone Or _
                .Cells(far_row, 2).Interior.ColorIndex = 2 Or _
                .Cells(far_row, 1).Font.ColorIndex = inv(5) 'isGen
        If NinvF Then
            For i = 2 To .UsedRange.Columns.Count - 1: With .Cells(far_row, i) 'Count - 1 = cat
               If (Not trinF) Then .Font.Color = RGBm - .Font.Color
                                   .Interior.Color = RGBm - .Interior.Color: End With: Next i: End If
    End If: End With: Next j
LockWBif: If logging Then LogString ("out UpdateRowFormatting")
End Sub


Sub UpdateAbbrevFormatting()
    '#WSA |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With Union(Sheets(WSA).Columns("B:B"), _
          Sheets(WSA).Columns("D:D"), _
          Sheets(WSA).Columns("F:F"))
        .Font.ColorIndex = inv(xlAutomatic)
    End With
    With Sheets(WSA).Columns("A:H")
        .Font.name = "Tahoma"
        .Font.Size = 10
        .WrapText = True
        .VerticalAlignment = xlTop  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        .HorizontalAlignment = xlLeft
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    With Sheets(WSA).Columns("A:A")
        .WrapText = False
        .Font.ColorIndex = inv(15)
        .Interior.ColorIndex = inv(15)   'beckground patameters
        .Borders(xlEdgeRight).LineStyle = xlContinuous  'cells right border
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlEdgeRight).ColorIndex = inv(xlAutomatic)
        .ShrinkToFit = False
    End With
    With Sheets(WSA).Columns("H:H")
        .WrapText = False
        .Font.ColorIndex = inv(xlAutomatic)
        .Interior.ColorIndex = inv(15)   'beckground patameters
        .Borders(xlEdgeLeft).LineStyle = xlContinuous  'cells left border
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeLeft).ColorIndex = inv(xlAutomatic)
    End With
    With Sheets(WSA)
        .Columns("D:D").Borders(xlEdgeLeft).LineStyle = xlContinuous  'cells right border
        .Columns("D:D").Borders(xlEdgeLeft).Weight = xlThin
        .Columns("D:D").Borders(xlEdgeLeft).ColorIndex = inv(xlAutomatic)
        .Columns("F:F").Borders(xlEdgeLeft).LineStyle = xlContinuous  'cells right border
        .Columns("F:F").Borders(xlEdgeLeft).Weight = xlThin
        .Columns("F:F").Borders(xlEdgeLeft).ColorIndex = inv(xlAutomatic)
    End With
    For j = 1 To 3
        Sheets(WSA).Cells(1, 1 + j * 2).HorizontalAlignment = xlCenter
    Next j
End Sub


Attribute VB_Name = "Formatting_LOGIC"
'Option Explicit

Rem:=================
Rem: Formatting LOGIC
Rem:====================================================
Public missingEntry As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'-------------------
Rem '|fffd||fffd||fffd||fffd||fffd||fffd| (LOGIC)/--------------------------------------
'-----------------
Sub UpdateTermFormatting(T2 As Object, Optional Coding As Boolean): Dim i% '= eru
If Not Coding Then '(~) ther's NO COLORS!
  t_word = "_": s_pos = 1: For i = 1 To 3
  While t_word <> "": t_word = CT_FnGetNextWord(s_pos, T2.term(i), f_pos, False, False)
    If t_word <> "" Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      With Sheets(WSA): Select Case i
             Case 1: Set t_range = .Columns("B:B")
             Case 2: Set t_range = Union(.Columns("B:B"), .Columns("D:D"))
             Case 3: Set t_range = Union(.Columns("B:B"), .Columns("F:F"))
      End Select: End With
      With Sheets(Index(i)).Cells(T2.row(i), termcol): Set c = FnFindCell(t_range, t_word, xlWhole, True)
          If c.row <> 1 Then
            .Characters(start:=s_pos, Length:=Len(t_word)).Font.Italic = True
            .Characters(start:=s_pos, Length:=Len(t_word)).Font.Underline = xlUnderlineStyleSingle
          End If: Set c = Nothing
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If T2.sid <> "" Then
            t_word = LCase(t_word): gs_pos = 1: g_term = LCase(CT_FnGetNextWord(gs_pos, T2.shad(i), gf_pos))
            't_word = Replace(Replace(Replace(t_word, "[", "[[}"), "]", "[]]"), "[[}", "[[]")  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|.: |fffd||fffd||fffd||fffd| (?), |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (#) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (*)
            g_term = dbg_(Replace(Replace(Replace(g_term, "[", "[[}"), "]", "[]]"), "[[}", "[[]"))
            gs_pos = gf_pos + 1
            Do While g_term <> ""
              If (Left$(t_word, Len(t_word) - 1) + "*") Like (Left$(g_term, Len(g_term) - 1) + "*") Then
                .Characters(start:=s_pos, Length:=Len(t_word)).Font.Italic = True
                If T2.isGen Then Exit Do
              End If
              g_term = dbg_(Replace(Replace(Replace(LCase(CT_FnGetNextWord(gs_pos, T2.shad(i), gf_pos)), _
                                "[", "[[}"), "]", "[]]"), "[[}", "[[]")): gs_pos = gf_pos + 1: Loop: End If
      End With: End If: s_pos = f_pos + 1: Wend: Next i: End If: LP 6
End Sub


Function HTML_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$(HTML$)
                    'html$ = Replace(html$, ";", "<B>;</B>"): html$ = Replace(html$, "&", "<B>&</B>") '&nbsp;
                    'html$ = Replace(html$, "*", "<B>*</B>") '/* */
                    HTML$ = Replace(HTML$, ",", "<B>,</B>"): HTML$ = Replace(HTML$, ":", "<B>:</B>") 'http: '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    HTML$ = Replace(HTML$, "^", "<B>^</B>"): HTML$ = Replace(HTML$, ".", "<B>.</B>") '.html '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    HTML$ = Replace(HTML$, "@", "<B>@</B>"): HTML$ = Replace(HTML$, "#", "<B>#</B>")
                    HTML$ = Replace(HTML$, "$", "<B>$</B>"): HTML$ = Replace(HTML$, "%", "<B>%</B>"): HTML$ = Replace(HTML$, "|", "<B>|</B>")
         HTML_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = HTML$: End Function
'-----------------------
Rem 'Definition (LOGIC)/--------------------------------------
'---------------------
Rem: |fffd||fffd||fffd| html$ <> "" |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. UpdateDefinitionFormattingHTML$) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|HTML$ + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| search$ |fffd||fffd||fffd| html|fffd||fffd||fffd||fffd||fffd||fffd|
Function UpdateDefinitionFormatting$(Optional t_cell As Object, Optional ByVal i%, Optional Coding As Boolean, Optional ByVal HTML$, Optional ByVal search$)
'On Error GoTo |fffd||fffd||fffd||fffd||fffd|L '|fffd||fffd||fffd||fffd||fffd|L: UpdateDefinitionFormatting$ = HTML$ - |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| UpdateDefinitionFormattingHTML$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim htmlF As Boolean: htmlF = Not HTML$ = "": If htmlF Then HTML$ = Replace(|fffd||fffd||fffd||fffd|HTML$(HTML$), "</TR>", "</TR>" & Chr(13) & Chr(10)): Coding = True: GoTo L1 _
        Else If IsMissing(t_cell) Then Exit Function Else If t_cell Is Nothing Then Exit Function Else If t_cell.Column <> defcol Then Exit Function '|fffd||fffd||fffd||fffd||fffd|
'If i = 0 Then i = ActiveSheet.Index - 1: unLockWs: If Coding = False Then Coding = True '|fffd||fffd||fffd||fffd||fffd||fffd|? TEST (i% = eru)
With t_cell: With .Font: .Bold = False: .ColorIndex = inv(xlAutomatic): End With
L1: Dim t_word$, def_text$, s_pos&, f_pos&: If htmlF Then def_text = HTML$: HTML$ = "" Else def_text = FnGetText(t_cell) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| html$ '------|fffd||fffd||fffd||fffd|HTML$------
        t_word = "_": s_pos = 1: f_pos = 0
          'MsgBox Len(def_text) & ":" & def_text
'If htmlF Then UpdateDefinitionFormatting$ = def_text: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
Rem TEMP 'If htmlF And search$ <> "" Then def_text = markUpResult$(search$, def_text) '<--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'TEST {--}
'If htmlF Then UpdateDefinitionFormatting$ = def_text: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
If htmlF Then def_text = db_(Replace(def_text, "<BR>", " <BR>" & Chr(13) & Chr(10))) '" " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <B> |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Chr(13)Chr(10) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'____/__________/
Rem /* CODING */
    While t_word <> "": lf_pos = f_pos: t_word = CT_FnGetNextWord(s_pos, def_text, f_pos)
      If htmlF Then If s_pos > lf_pos + 1 Then HTML$ = HTML$ & Mid(def_text, lf_pos + 1, s_pos - lf_pos - 1) '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|& '------|fffd||fffd||fffd||fffd|HTML$------
      If t_word <> "" Then
        If Not Coding Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Gen-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'          If Len(t_word) > 2 Then
'            Select Case i:  Case 1: Set t_range = Sheets(WS0).Columns("B:B")
'                            Case 2: Set t_range = Sheets(WS0).Columns("C:C")
'                            Case 3: Set t_range = Sheets(WS0).Columns("D:D"): End Select
'            Set c = FnFindCell(t_range, t_word, xlWhole)
'            If c.row = 1 Then Set c = FnFindCell(t_range, Left$(t_word, Len(t_word) - 1), xlWhole)
'            If c.row = 1 Then Set c = FnFindCell(t_range, Left$(t_word, Len(t_word) - 1) + "?", xlWhole)
'            If c.row = 1 Then Set c = FnFindCell(t_range, t_word + "?", xlWhole)
'            If c.row <> 1 Then .Characters(start:=s_pos, Length:=Len(t_word)).Font.Italic = True
'            Set c = Nothing: End If
        '|* CODING *|
        ElseIf i <> 3 Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'Pascal|Delphy ==============================
          If LCase(t_word) = "var" Or LCase(t_word) = "string" Or _
             LCase(t_word) = "file" Or LCase(t_word) = "word" Or _
             LCase(t_word) = "integer" Or LCase(t_word) = "boolean" Or _
             LCase(t_word) = "longint" Or LCase(t_word) = "pointer" Or _
             LCase(t_word) = "shortint" Or LCase(t_word) = "byte" Or _
             LCase(t_word) = "registers" Or LCase(t_word) = "real" Or _
             LCase(t_word) = "char" Or LCase(t_word) = "text" Or _
             LCase(t_word) = "singl" Or LCase(t_word) = "double" Or _
             LCase(t_word) = "extended" Or LCase(t_word) = "int" Or _
             LCase(t_word) = "float" Or LCase(t_word) = "short" Or _
             LCase(t_word) = "long" Or LCase(t_word) = "unsigned" Or _
             LCase(t_word) = "void" Or LCase(t_word) = "far" Or _
             LCase(t_word) = "new" Or LCase(t_word) = "delete" Or _
             FnIsComplexWord(t_word) Then
               If htmlF Then           '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {})
                  If Left(t_word, 4) = "http" Or hasIt("<", Replace(t_word, ">", "<")) _
                                              Or hasIt("{", Replace(t_word, "}", "{")) Then HTML$ = HTML$ & t_word _
                                              Else HTML$ = HTML$ & "<B>" & t_word & "</B>" '------|fffd||fffd||fffd||fffd|HTML$------
               Else: .Characters(start:=s_pos, Length:=Len(t_word)).Font.Bold = True: End If
'GoTo pas1 '------|fffd||fffd||fffd||fffd|HTML$------TEST
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| --------------------------------------------
          ElseIf LCase(t_word) = "max" Or LCase(t_word) = "min" Or _
                 LCase(t_word) = "sum" Or LCase(t_word) = "trunc" Then
               If htmlF Then _
                  HTML$ = HTML$ & "<font color=BLUE><B>" & t_word & "</B></font>" '------|fffd||fffd||fffd||fffd|HTML$------
              ' Else: .Characters(start:=s_pos, Length:=Len(t_word)).Font.Bold = True: End If
          '------------------------------------------------------------------
          Else: If htmlF Then HTML$ = HTML$ & t_word   '------|fffd||fffd||fffd||fffd|HTML$------
          End If
        End If '=============================================================
If htmlF Then GoTo pas1 Else ts_pos = 1 '--
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Coding And LCase(t_word) = LCase(CT_FnGetNextWord(ts_pos, .Offset(0, -1), tf_pos)) Then _
          .Characters(start:=s_pos, Length:=Len(t_word)).Font.Bold = True
'        If Not (Coding And i <> 2) Then
'          'ABC----------------------------------------------
'          With Sheets(WSA): Select Case i
'                 Case 1: Set t_range = .Columns("B:B")
'                 Case 2: Set t_range = Union(.Columns("B:B"), .Columns("D:D"))
'                 Case 3: Set t_range = Union(.Columns("B:B"), .Columns("F:F")): End Select: End With
'          Set c = FnFindCell(t_range, t_word, xlWhole, True)
'          If c.row <> 1 Or t_word = GetAbb(i) Or t_word = GetAbb(1) Then
'            .Characters(start:=s_pos, Length:=Len(t_word)).Font.Italic = True
'            .Characters(start:=s_pos, Length:=Len(t_word)).Font.Underline = xlUnderlineStyleSingle: End If
'          Set c = Nothing: End If:
pas1: End If: s_pos = f_pos + 1
    Wend: LP_ 7                                        '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ------|fffd||fffd||fffd||fffd|HTML$------ |fffd||fffd||fffd|
    If htmlF Then If HTML$ = "" Then HTML$ = def_text _
                                Else HTML$ = HTML$ & Mid(def_text, f_pos + 1)          '|fffd||fffd||fffd||fffd||fffd|
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'____/__________/
Rem /* CODING */
    Dim source_text$
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If htmlF Then
            source_text = HTML_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(HTML$)
      Else: source_text = .value
        If Coding Then
          LP_ 81
          If i = 1 Then
            For j = 1 To Len(source_text): t_ch = Mid(source_text, j, 1)
              If t_ch = ";" Or t_ch = ":" Or t_ch = "," Or t_ch = "." Or t_ch = "*" Or t_ch = "^" Or _
                 t_ch = "@" Or t_ch = "&" Or t_ch = "#" Or t_ch = "$" Or t_ch = "%" Or t_ch = "|" Or _
                 t_ch = "!" Or t_ch = "=" Then .Characters(start:=j, Length:=1).Font.Bold = True
            Next j
          ElseIf i = 3 Then .Font.ColorIndex = inv(11): End If 'Dark Blue - code
      End If: End If
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'____/__________/
Rem /* <----> */
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /* */ (+ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: (* *), { },<!-- -->)
    comm$ = "/*:*/|(*:*)|<!--:-->": If htmlF Then comm$ = Replace(Replace(comm$, "<", "&lt;"), ">", "&gt;")
    For i = 1 To prsCount("|", comm$) + 1
        comm_IN$ = prsBefore(":", sag(comm_pair$, prsBetween|fffd|(i, "|", "|", comm$))): comm_OUT$ = prsAfter(":", comm_pair$)
          pos1 = InStr(1, source_text, comm_IN$): Dim t_cnt%: If htmlF Then s_pos& = 1: f_pos& = 0: HTML$ = "" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| source_text '------|fffd||fffd||fffd||fffd|HTML$------
                                                         'If htmlF Then def_text = Replace(Replace(source_text, "(*", "/*"), "*)", "*/")
          If pos1 > 0 Then If comm_IN$ = "(*" Then If pos1 = InStr(1, source_text, "(*)") Then pos1 = 0 ' "(*)" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          While pos1 <> 0: pos2 = InStr(pos1 + 1, source_text, comm_OUT$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If pos2 > 0 Then
              If htmlF Then '------|fffd||fffd||fffd||fffd|HTML$------
                If posLast&("}}", Left(source_text, pos1)) > posLast&("{{", Left(source_text, pos1)) - 1 Then
                    lf_pos = f_pos: t_block = prsBetween|fffd|(inc(t_cnt%), comm_IN$, comm_OUT$, source_text, s_pos&, f_pos&)
                    If s_pos > lf_pos + 1 Then HTML$ = HTML$ & Mid(source_text, lf_pos + 1, s_pos - lf_pos - 1)  '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|& '------|fffd||fffd||fffd||fffd|HTML$------
                    HTML$ = HTML$ & "<font color=CIAN>" & comm_IN$ & t_block & comm_OUT$ & "</font>" '------|fffd||fffd||fffd||fffd|HTML$------
                End If '--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| {{ }}
              Else: With .Characters(start:=pos1, Length:=pos2 - pos1 + Len(comm_OUT$))
                         .Font.Italic = True
                         .Font.ColorIndex = inv(10): End With: End If 'Green - COMMENT
              pos1 = InStr(pos2 + 1, source_text, comm_IN$) 'NEXT
            Else: f_pos = pos1 - 1: pos1 = 0: End If '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          Wend:                                   '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ------|fffd||fffd||fffd||fffd|HTML$------ |fffd||fffd||fffd|
          If htmlF Then If HTML$ = "" Then HTML$ = source_text _
                                      Else HTML$ = HTML$ & Mid(source_text, f_pos + 1): 'source_text = HTML$ '|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    source_text = HTML$: Next i: 'db_ HTML$
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BOLD |fffd||fffd||fffd||fffd||fffd| <...>,</...> (|fffd||fffd| |fffd||fffd| -->)
If htmlF Then
    t_cnt% = 0: While sag(t_block, prsBetween|fffd|(inc(t_cnt%), "&lt;", "&", HTML$, s_pos&, f_pos&)) <> ""
        If Left(t_block, 3) <> "!--" Then HTML$ = Left(HTML$, s_pos& - 1) & "&lt;" & "<B><SPAN STYLE=BACKGROUND-COLOR:#EEEEEE>" & t_block & "</SPAN></B>" & Mid(HTML$, f_pos&)
                Wend: End If
Dim EoL$, t_pos%: EoL$ = Chr(10)
'____/__________/
Rem   ' <----> '    |fffd||fffd||fffd||fffd||fffd||fffd|: "OnAction"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "'" (|fffd||fffd||fffd| |fffd||fffd| '""' - |fffd||fffd||fffd||fffd||fffd||fffd|)
    '(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:  "Hello  World"  '  Write  data  to  files  named  "TEST1"..."TEST5")
          'EoL$ = IIf(htmlF, "<BR>", Chr(10)):
                                              If htmlF Then source_text = HTML$: HTML$ = "" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| source_text '------|fffd||fffd||fffd||fffd|HTML$------
                                              If htmlF Then def_text = Replace(Replace(Replace(source_text, """'", "' "), "'""", " '"), """", "'")
          Dim f_pos1%: t_pos% = InStr(1, def_text, "'"): f_pos& = 0 'reini
          While t_pos: lf_pos = Min(f_pos&, f_pos1)
            If htmlF Then _
                  If t_pos - 1 > lf_pos Then HTML$ = HTML$ & Mid(source_text, lf_pos + 1, t_pos - lf_pos - 1)  '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|& '------|fffd||fffd||fffd||fffd|HTML$------
                     f_pos& = zero(InStr(t_pos + 1, def_text, EoL$), 100000) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|)
                     f_pos1 = InStr(t_pos + 1, def_text, "'")  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd|'
            If htmlF Then t_len% = Min(zero(f_pos&, 100000) - 1, zero(f_pos1, 10000)) - t_pos + 1: t_block = Mid(source_text, t_pos, t_len%)
            If f_pos1 > 0 And f_pos1 < zero(f_pos, f_pos1 + 1) Then '|fffd||fffd||fffd||fffd||fffd||fffd| 2|fffd| "'" - '|fffd||fffd||fffd||fffd||fffd||fffd|', neither - 'comment
                If htmlF Then '------|fffd||fffd||fffd||fffd|HTML$------
                  HTML$ = HTML$ & "{inblock}<font color=GRAY>" & t_block & "</font>{outblock}" '------|fffd||fffd||fffd||fffd|HTML$------
'GoTo exitL
                Else: With .Characters(start:=t_pos, Length:=f_pos1 - t_pos + 1)
                           .Font.ColorIndex = inv(16): End With: End If       'Gray-50% - '|fffd||fffd||fffd||fffd||fffd||fffd|'
            ElseIf htmlF Then '------|fffd||fffd||fffd||fffd|HTML$------
                If Mid0(source_text, t_pos - 1, 1) = " " Or Mid0(source_text, t_pos - Len(EoL$), Len(EoL$)) = EoL$ Then _
                  HTML$ = HTML$ & "<font color=GREEN>" & t_block & "</font>" Else sadd HTML$, t_block '------|fffd||fffd||fffd||fffd|HTML$------
                If f_pos1 > 0 Then dec f_pos& 'c EoL$ (f_pos1 = 0 = <|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|>)
            Else: With .Characters(start:=t_pos, Length:=f_pos - t_pos)
                  .Font.Italic = True: .Font.ColorIndex = inv(10): End With
            End If 'Green - 'comment
            If f_pos = 0 Then t_pos = 0 _
                         Else t_pos = InStr(Min(f_pos&, zero(f_pos1, 10000)) + 1, def_text, "'")
          Wend:                                                '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|------|fffd||fffd||fffd||fffd|HTML$------
          If htmlF Then If HTML$ = "" Then HTML$ = source_text _
                                      Else HTML$ = HTML$ & Mid(source_text, Min(zero(f_pos&, 100000), zero(f_pos1, 10000) + 1))  '|fffd||fffd||fffd||fffd||fffd|
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'____/__________/
Rem // ----> EOL    |fffd||fffd||fffd||fffd||fffd||fffd|: "OnAction"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| //,--,REM_
      If Not htmlF Then def_text = Replace(Replace(source_text, "<!--", "<!++"), "-->", "++>") _
                   Else source_text = HTML$: HTML$ = "": _
                        def_text = Replace(Replace(source_text, "&lt;!--", "&lt;!++"), "--&gt;", "++&gt;") '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| source_text '------|fffd||fffd||fffd||fffd|HTML$------
      f_pos = 0: 'EoL$ = IIf(htmlF, "<BR>", Chr(10)):
                        def_text = Replace(Replace(Replace(db_(def_text), "://", ":||"), "<B>:</B>//", "<B>:</B>||"), "--", "//")
      If pos|fffd|(1, "//", def_text, t_pos) > 0 Then
       'If Mid(def_text, IIf(t_pos - 1 > 0, t_pos - 1, 1), 1) <> ":" Then    !!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML !!!
          While t_pos > 0: If posLast&("{inblock}", Left(source_text, t_pos)) > posLast&("{outblock}", Left(source_text, t_pos)) _
                                   Then lf_pos = f_pos: f_pos = zero(InStr(t_pos, source_text, "{outblock}"), 100000): _
                                        HTML$ = HTML$ & Mid(source_text, lf_pos + 1, f_pos - lf_pos): GoTo passBlockL    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            lf_pos = f_pos: f_pos = zero(InStr(t_pos + 1, def_text, EoL$), 100000) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|)
            If htmlF Then '------|fffd||fffd||fffd||fffd|HTML$------
              If t_pos > lf_pos + 1 Then HTML$ = HTML$ & Mid(source_text, lf_pos + 1, t_pos - lf_pos - 1) '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|&
              t_block = Mid(source_text, t_pos, zero(f_pos& - 1, 10000) - t_pos + 1): t_block = clean|fffd||fffd||fffd|$(t_block)
              HTML$ = HTML$ & "<font color=GREEN>" & t_block & "</font>": dec f_pos& 'c EoL$
            Else
              With .Characters(start:=t_pos, Length:=f_pos - t_pos)
                .Font.Italic = True
                .Font.ColorIndex = inv(10): End With 'Green - COMMENT
passBlockL: End If: t_pos = InStr(f_pos, def_text, "//")
          Wend: If htmlF Then If f_pos < Len(source_text) Then If f_pos > 0 Then HTML$ = HTML$ & Mid(source_text, f_pos + 1)  '|fffd||fffd||fffd||fffd||fffd|
      ElseIf htmlF Then If HTML$ = "" Then HTML$ = source_text '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|------|fffd||fffd||fffd||fffd|HTML$------
      End If: 'If Not htmlF Then def_text = Replace(Replace(source_text, "<!++", "<!--"), "++>", "-->") _
                           Else def_text = Replace(Replace(source_text, "&lt;!++", "&lt;!--"), "++&gt;", "--&gt;") ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| <!-- -->
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'If htmlF And search$ <> "" Then HTML$ = markUpResult$(HTML_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$(search$), HTML$) -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    '<<--|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'____/__________/
Rem        |fffd||fffd||fffd||fffd|     |fffd||fffd||fffd||fffd||fffd||fffd|: "alert.log" 'C:\MY_PIB 'http(s)://www.garshin.ru/it
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| html)
    If hasIt("http", HTML$) Then '|fffd||fffd||fffd||fffd||fffd||fffd| HTML
        Dim http$: 'EoL$ = IIf(htmlF, "<BR>", Chr(10)):
                                                       t_pos = 0: source_text = HTML$: def_text = "": 'db_ HTML$ "&nbsp;" -- f_pos& = Min(f_pos&, f_pos1) '
        source_text = Replace(Replace(db_(source_text), "<B>|</B>http", "|_ttp"), "<B>|</B>&nbsp; http", "|__ttp")
        While pos|fffd|(1, "http", source_text, t_pos) > 0: f_pos& = zero(InStr(t_pos + 1, source_text, EoL$), Len(source_text) + 1) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 'db_ f_pos& & " - " & InStr(t_pos + 1, source_text, "&nbsp;")
                                                If sag(f_pos1, InStr(t_pos + 1, source_text, "&")) > 0 Then _
                                                       f_pos& = Min(Min(f_pos&, f_pos1), zero(InStr(t_pos + 1, _
                        Replace(Replace(Replace(Replace(source_text, "{", "'"), ",", "'"), ";", "'"), """", "'"), "'"), 100000)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         'db_ IIf(f_pos& = 0, Empty, f_pos& - t_pos)
         http$ = Mid(source_text, t_pos, IIf(f_pos& = 0, 10000, f_pos& - t_pos))
'         While Not FnIsLetterOrNumber(Right(http$, 1)) Or Right(http$, 1) = "/" Or Len(http$) < 2
'          http$ = Left(http$, Len(http$) - 1): If f_pos& > 0 Then dec f_pos& ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'         Wend
         If f_pos& > 0 Then def_text = Mid(source_text, f_pos&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         db_ ">>" & clearFromTags$("<", ">", http$) & "<<" '& Chr(10) & def_text 'Else db_ http$ & Chr(10) & def_text
         source_text = Left(source_text, t_pos - 1) & "<A HREF=" & clearFromTags$("<", ">", http$) & ">" & http$ & "</A>" & IIf(f_pos& = 0, "", def_text)
                                                                  'clearFromTags$("&lt;", "&gt;", http$) & ">" & http$ & "</A>" & IIf(f_pos& = 0, "", def_text)
         t_pos = posLast("</A>", source_text): 'db_ t_pos
        Wend: HTML$ = Replace(Replace(source_text, "|_ttp", "|http"), "|__ttp", "|http")  '|fffd||fffd|. "{{"-|fffd||fffd||fffd||fffd| (injectionHTM$)
    End If
Rem:   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| related links - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "(|fffd||fffd|. term_eru)" |fffd| "|fffd||fffd|./|fffd||fffd||fffd|./see term_eru" - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If htmlF Then
If sag(pos&, posFirst&("see&nbsp; ", HTML$)) > 0 Then it$ = Mid(HTML$, pos&, Len("see&nbsp; ")): GoSub mark_related
If sag(pos&, posFirst&("|fffd||fffd|<B>.</B>&nbsp; |fffd||fffd||fffd|&nbsp; |fffd||fffd|&nbsp; ", HTML$)) > 0 Then it$ = _
  Mid(HTML$, pos&, Len("|fffd||fffd|<B>.</B>&nbsp; |fffd||fffd||fffd|&nbsp; |fffd||fffd|&nbsp; ")): GoSub mark_related
If sag(pos&, posFirst&("|fffd||fffd|<B>.</B>&nbsp; ", HTML$)) > 0 Then
    it$ = Mid(HTML$, pos&, Len("|fffd||fffd|<B>.</B>&nbsp; ")): GoSub mark_related
End If
If sag(pos&, posFirst&("|fffd||fffd||fffd|<B>.</B>&nbsp; ", HTML$)) > 0 Then
    it$ = Mid(HTML$, pos&, Len("|fffd||fffd||fffd|<B>.</B>&nbsp; ")): GoSub mark_related
End If: End If
If False Then 'Sub
mark_related:
        If Left(HTML$, Len(it$)) = it$ Then
            If Not hasIt("<BR>", HTML$) Then  '|fffd||fffd|./|fffd||fffd||fffd|./see term_eru
           lnk$ = Mid(HTML$, Len(it$) + 1): id$ = GetIDwithTerm(Replace(Replace(Replace(lnk$ & "#?", "<B>.</B>#?", ""), "#?", ""), "&nbsp;", ""))
           If id$ = "" Then id$ = GetIDwithTerm(clearFromTags("<", ">", Replace(Replace(Replace(lnk$ & "#?", "<B>.</B>#?", ""), "#?", ""), "&nbsp;", "")))
           If id$ <> "" Then HTML$ = it$ + "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & lnk$ & "</A>": _
                                                     If dir(path$) = "" Then Open_Browser_W$ id$, True: Return Else Return '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If: End If
 i = 0: While sag(pos&, pos|fffd|(inc(i), "{{" & it$, HTML$)) <> 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "{{|fffd||fffd|. + USE_HASH[|||fffd||fffd||fffd||fffd|._|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd|]}}" -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "+ USE_HASH[, |fffd||fffd||fffd||fffd||fffd||fffd| 2][, |fffd||fffd||fffd||fffd||fffd||fffd| 3]" - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           lnks$ = sag(lnks_new$, prsBefore("}}", Mid(HTML$, pos& + Len("{{" & it$)))): k% = 0: While sag(lnk$, prsBetween|fffd|(inc(k%), ",", ",", "," & lnks$ & ",")) <> ""
           If sag(id$, GetIDwithTerm(Trim(clearFromTags("{", "}", clearFromTags("{{", "}}", Trim(prsafterdown("||", clearFromTags("<", ">", sag(lnk_new$, Replace(lnk$, "&nbsp;", "")))))))))) <> "" Then
             lnks_new$ = Replace(lnks_new$, lnk$, replicate("", "&nbsp; ", Len(lnk_new$) - Len(LTrim(lnk_new$))) & "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & Trim(prsBeforeUp("<B>|</B><B>|</B>", lnk_new$)) & "</A>")
            '    HTML$ = Replace(HTML$, "(" & it$ & lnk$, "(" & it$ & _
             "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & clearFromTags("<", ">", lnk$) & "</A>")
                                   If dir(path$) = "" Then Open_Browser_W$ id$, True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           dec i: End If: Wend: If lnks_new$ <> "" Then HTML$ = Replace(Replace(HTML$, "{{" & it$ & lnks$, lnks_new$ & "<-"), "<-}}", "")
           Wend
 i = 0: While sag(pos&, pos|fffd|(inc(i), "(" & it$, HTML$)) <> 0 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "(|fffd||fffd|. term_eru)"
           lnks$ = sag(lnks_new$, prsBefore|fffd|(prsBracketOut|fffd|%(")", HTML$), ")", Mid(HTML$, pos& + Len("(" & it$)))): k% = 0: While sag(lnk$, prsBetween|fffd|(inc(k%), ",", ",", "," & lnks$ & ",")) <> ""
           If sag(id$, GetIDwithTerm(Trim(clearFromTags("{", "}", clearFromTags("{{", "}}", Trim(prsafterdown("||", clearFromTags("<", ">", sag(lnk_new$, Replace(lnk$, "&nbsp;", "")))))))))) <> "" Then
             lnks_new$ = Replace(lnks_new$, lnk$, replicate("", "&nbsp; ", Len(lnk_new$) - Len(LTrim(lnk_new$))) & "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & Trim(prsBeforeUp("<B>|</B><B>|</B>", lnk_new$)) & "</A>")
            '    HTML$ = Replace(HTML$, "(" & it$ & lnk$, "(" & it$ & _
             "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & clearFromTags("<", ">", lnk$) & "</A>")
                                   If dir(path$) = "" Then Open_Browser_W$ id$, True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           End If: Wend: If lnks_new$ <> "" Then HTML$ = Replace(HTML$, "(" & it$ & lnks$, "(" & it$ & lnks_new$)
           Wend
Return: End If
'|1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a|
HTML$ = Replace(Replace(HTML$, "</B><B>", ""), "<BR></TR>", "</TR>") '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (</TR> = |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
'#E5ECEB |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| lightGRAY, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http://olocoder.ru/generator.html
''  Dim clrs(4, 2) As String: clrs(1, 1) = "#FFFFaa": clrs(1, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''                            clrs(2, 1) = "#C8FB62": clrs(2, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''                            clrs(3, 1) = "#BCFEF9": clrs(3, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''                            clrs(4, 1) = "#EAE7CC": clrs(4, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'  s_cnt = prsCount(" ", search$): db_ "in " & search$ & " s_cnt: " & s_cnt
'  For i = 1 To s_cnt + 1 'search$ = Replace(search$, " ", "&nbsp; ") - |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|"
'    i_search$ = prsBetween|fffd|(i, " ", " ", " " & search$ & " "): If hasit(i_search$, HTML$) Then c_len = Len(i_search$): _
'         sTag = "<SPAN STYLE=BACKGROUND-COLOR:" & FindForm.getClrs(i, 1) & ";color:" & FindForm.getClrs(i, 2) & ">": sLen = Len(sTag): _
'         db_ i_search$ & " sTag: " & sTag: GoSub searchSub: db_ i_search$
'Next i: End If
'|1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a|
    End With: Set t_range = Nothing
Rem: + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| markUpResult$-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
exitL: If htmlF Then HTML$ = Replace(HTML$, "<SPAN STYLE=BACKGROUND-COLOR<B>:#", "<SPAN STYLE=BACKGROUND-COLOR:#"): _
                     HTML$ = Replace(HTML$, "</B>;color<B>:</B>RED>", ";color:RED>"): _
                     HTML$ = Replace(Replace(HTML$, "{inblock}", ""), "{outblock}", ""): _
                     UpdateDefinitionFormatting$ = HTML$ '------|fffd||fffd||fffd||fffd|HTML$------         ^|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'If htmlF Then If html$ <> "" Then MsgBox html$
'Exit Function
''=============================================================
'searchSub: Dim pos%: Do: pos = InStr(pos + 1, HTML$, i_search$, vbTextCompare): If pos = 0 Then Exit Do
'                     HTML$ = Left(HTML$, pos - 1) & sTag & Mid(HTML$, pos, c_len) & "</SPAN>" & Mid(HTML$, pos + c_len): IncOn pos, sLen
'                     Loop While pos > 0 '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| instead HTML$ = Replace(HTML$, search$, "<font color=RED>" & search$ & "</font>", , , vbTextCompare)
'Return:
Exit Function
|fffd||fffd||fffd||fffd||fffd|L: UpdateDefinitionFormatting$ = HTML$
End Function

'-----------------------
Rem 'Definition (LOGIC)/--------------------------------------
'---------------------
Rem: |fffd||fffd||fffd| html$ <> "" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|HTML$ + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| search$ |fffd||fffd||fffd| html|fffd||fffd||fffd||fffd||fffd||fffd|
Function UpdateDefinitionFormattingHTML$(ByVal HTML$, Optional ByVal search$)
If HTML$ = "" Then Exit Function Else HTML$ = Replace(|fffd||fffd||fffd||fffd|HTML$(HTML$), "</TR>", "</TR>" & Chr(13) & Chr(10)): Coding = True
Dim i%, t_word$, def_text$, s_pos&, f_pos&: def_text = HTML$: HTML$ = "" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| html$ '------|fffd||fffd||fffd||fffd|HTML$------
        t_word = "_": s_pos = 1: f_pos = 0
          'MsgBox Len(def_text) & ":" & def_text
'If htmlF Then UpdateDefinitionFormatting$ = def_text: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
Rem TEMP 'If search$ <> "" Then def_text = markUpResult$(search$, def_text) '<--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'TEST {--}
'If htmlF Then UpdateDefinitionFormatting$ = def_text: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
def_text = db_(Replace(def_text, "<BR>", " <BR>" & Chr(13) & Chr(10))) '" " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <B> |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Chr(13)Chr(10) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'____/__________/
Rem /* CODING */
    While t_word <> "": lf_pos = f_pos: t_word = CT_FnGetNextWord(s_pos, def_text, f_pos)
      If s_pos > lf_pos + 1 Then HTML$ = HTML$ & Mid(def_text, lf_pos + 1, s_pos - lf_pos - 1) '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|& '------|fffd||fffd||fffd||fffd|HTML$------
      If t_word <> "" Then
        If Not Coding Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Gen-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'          If Len(t_word) > 2 Then
'            Select Case i:  Case 1: Set t_range = Sheets(WS0).Columns("B:B")
'                            Case 2: Set t_range = Sheets(WS0).Columns("C:C")
'                            Case 3: Set t_range = Sheets(WS0).Columns("D:D"): End Select
'            Set c = FnFindCell(t_range, t_word, xlWhole)
'            If c.row = 1 Then Set c = FnFindCell(t_range, Left$(t_word, Len(t_word) - 1), xlWhole)
'            If c.row = 1 Then Set c = FnFindCell(t_range, Left$(t_word, Len(t_word) - 1) + "?", xlWhole)
'            If c.row = 1 Then Set c = FnFindCell(t_range, t_word + "?", xlWhole)
'            If c.row <> 1 Then .Characters(start:=s_pos, Length:=Len(t_word)).Font.Italic = True
'            Set c = Nothing: End If
        '|* CODING *|
        ElseIf i <> 3 Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'Pascal|Delphy ==============================
          If LCase(t_word) = "var" Or LCase(t_word) = "string" Or _
             LCase(t_word) = "file" Or LCase(t_word) = "word" Or _
             LCase(t_word) = "integer" Or LCase(t_word) = "boolean" Or _
             LCase(t_word) = "longint" Or LCase(t_word) = "pointer" Or _
             LCase(t_word) = "shortint" Or LCase(t_word) = "byte" Or _
             LCase(t_word) = "registers" Or LCase(t_word) = "real" Or _
             LCase(t_word) = "char" Or LCase(t_word) = "text" Or _
             LCase(t_word) = "singl" Or LCase(t_word) = "double" Or _
             LCase(t_word) = "extended" Or LCase(t_word) = "int" Or _
             LCase(t_word) = "float" Or LCase(t_word) = "short" Or _
             LCase(t_word) = "long" Or LCase(t_word) = "unsigned" Or _
             LCase(t_word) = "void" Or LCase(t_word) = "far" Or _
             LCase(t_word) = "new" Or LCase(t_word) = "delete" Or _
             FnIsComplexWord(t_word) Then
             '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {})
                  If Left(t_word, 4) = "http" Or hasIt("<", Replace(t_word, ">", "<")) _
                                              Or hasIt("{", Replace(t_word, "}", "{")) Then HTML$ = HTML$ & t_word _
                                              Else HTML$ = HTML$ & "<B>" & t_word & "</B>" '------|fffd||fffd||fffd||fffd|HTML$------
'GoTo pas1 '------|fffd||fffd||fffd||fffd|HTML$------TEST
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| --------------------------------------------
          ElseIf LCase(t_word) = "max" Or LCase(t_word) = "min" Or _
                 LCase(t_word) = "sum" Or LCase(t_word) = "trunc" Then
                HTML$ = HTML$ & "<font color=BLUE><B>" & t_word & "</B></font>" '------|fffd||fffd||fffd||fffd|HTML$------
          '------------------------------------------------------------------
          Else: HTML$ = HTML$ & t_word: End If
      End If: End If
'=============================================================
        s_pos = f_pos + 1
    Wend: LP_ 7                                        '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ------|fffd||fffd||fffd||fffd|HTML$------ |fffd||fffd||fffd|
    If HTML$ = "" Then HTML$ = def_text _
                       Else HTML$ = HTML$ & Mid(def_text, f_pos + 1)          '|fffd||fffd||fffd||fffd||fffd|
'UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'____/__________/
Rem /* CODING */
    Dim source_text$
   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    source_text = HTML_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(HTML$)
    'UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'____/__________/
Rem /* <----> */
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /* */ (+ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: (* *), { },<!-- -->)
    comm$ = "/*:*/|(*:*)|<!--:-->": comm$ = Replace(Replace(comm$, "<", "&lt;"), ">", "&gt;")
    For i = 1 To prsCount("|", comm$) + 1
        comm_IN$ = prsBefore(":", sag(comm_pair$, prsBetween|fffd|(i, "|", "|", comm$))): comm_OUT$ = prsAfter(":", comm_pair$)
          pos1 = InStr(1, source_text, comm_IN$): Dim t_cnt%: s_pos& = 1: f_pos& = 0: HTML$ = "" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| source_text '------|fffd||fffd||fffd||fffd|HTML$------
                                                         'def_text = Replace(Replace(source_text, "(*", "/*"), "*)", "*/")
          If pos1 > 0 Then If comm_IN$ = "(*" Then If pos1 = InStr(1, source_text, "(*)") Then pos1 = 0 ' "(*)" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          While pos1 <> 0: pos2 = InStr(pos1 + 1, source_text, comm_OUT$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If pos2 > 0 Then
                If posLast&("}}", Left(source_text, pos1)) > posLast&("{{", Left(source_text, pos1)) - 1 Then
                    lf_pos = f_pos: t_block = prsBetween|fffd|(inc(t_cnt%), comm_IN$, comm_OUT$, source_text, s_pos&, f_pos&)
                    If s_pos > lf_pos + 1 Then HTML$ = HTML$ & Mid(source_text, lf_pos + 1, s_pos - lf_pos - 1)  '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|& '------|fffd||fffd||fffd||fffd|HTML$------
                    HTML$ = HTML$ & "<font color=CIAN>" & comm_IN$ & t_block & comm_OUT$ & "</font>" '------|fffd||fffd||fffd||fffd|HTML$------
                End If '--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| {{ }}
              pos1 = InStr(pos2 + 1, source_text, comm_IN$) 'NEXT
            Else: f_pos = pos1 - 1: pos1 = 0: End If '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          Wend:                                   '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ------|fffd||fffd||fffd||fffd|HTML$------ |fffd||fffd||fffd|
          If HTML$ = "" Then HTML$ = source_text _
                        Else HTML$ = HTML$ & Mid(source_text, f_pos + 1): 'source_text = HTML$ '|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    source_text = HTML$: Next i: 'db_ HTML$
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BOLD |fffd||fffd||fffd||fffd||fffd| <...>,</...> (|fffd||fffd| |fffd||fffd| -->)
    t_cnt% = 0: While sag(t_block, prsBetween|fffd|(inc(t_cnt%), "&lt;", "&", HTML$, s_pos&, f_pos&)) <> ""
        If Left(t_block, 3) <> "!--" Then HTML$ = Left(HTML$, s_pos& - 1) & "&lt;" & "<B><SPAN STYLE=BACKGROUND-COLOR:#EEEEEE>" & t_block & "</SPAN></B>" & Mid(HTML$, f_pos&)
                Wend
Dim EoL$, t_pos%: EoL$ = Chr(10)
'____/__________/
Rem   ' <----> '    |fffd||fffd||fffd||fffd||fffd||fffd|: "OnAction"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "'" (|fffd||fffd||fffd| |fffd||fffd| '""' - |fffd||fffd||fffd||fffd||fffd||fffd|)
    '(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:  "Hello  World"  '  Write  data  to  files  named  "TEST1"..."TEST5")
          'EoL$ = IIf(htmlF, "<BR>", Chr(10)):
                                              source_text = HTML$: HTML$ = "" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| source_text '------|fffd||fffd||fffd||fffd|HTML$------
                                              def_text = Replace(Replace(Replace(source_text, """'", "' "), "'""", " '"), """", "'")
          Dim f_pos1%: t_pos% = InStr(1, def_text, "'"): f_pos& = 0 'reini
          While t_pos: lf_pos = Min(f_pos&, f_pos1)
                  If t_pos - 1 > lf_pos Then HTML$ = HTML$ & Mid(source_text, lf_pos + 1, t_pos - lf_pos - 1)  '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|& '------|fffd||fffd||fffd||fffd|HTML$------
                     f_pos& = zero(InStr(t_pos + 1, def_text, EoL$), 100000) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|)
                     f_pos1 = InStr(t_pos + 1, def_text, "'")  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd|'
            t_len% = Min(zero(f_pos&, 100000) - 1, zero(f_pos1, 10000)) - t_pos + 1: t_block = Mid(source_text, t_pos, t_len%)
            If f_pos1 > 0 And f_pos1 < zero(f_pos, f_pos1 + 1) Then '|fffd||fffd||fffd||fffd||fffd||fffd| 2|fffd| "'" - '|fffd||fffd||fffd||fffd||fffd||fffd|', neither - 'comment
                HTML$ = HTML$ & "{inblock}<font color=GRAY>" & t_block & "</font>{outblock}" '------|fffd||fffd||fffd||fffd|HTML$------
            Else:
                If Mid0(source_text, t_pos - 1, 1) = " " Or Mid0(source_text, t_pos - Len(EoL$), Len(EoL$)) = EoL$ Then _
                  HTML$ = HTML$ & "<font color=GREEN>" & t_block & "</font>" Else sadd HTML$, t_block '------|fffd||fffd||fffd||fffd|HTML$------
                If f_pos1 > 0 Then dec f_pos& 'c EoL$ (f_pos1 = 0 = <|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|>)
            End If 'Green - 'comment
            If f_pos = 0 Then t_pos = 0 _
                         Else t_pos = InStr(Min(f_pos&, zero(f_pos1, 10000)) + 1, def_text, "'")
          Wend:                                                '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|------|fffd||fffd||fffd||fffd|HTML$------
          If HTML$ = "" Then HTML$ = source_text _
                        Else HTML$ = HTML$ & Mid(source_text, Min(zero(f_pos&, 100000), zero(f_pos1, 10000) + 1))  '|fffd||fffd||fffd||fffd||fffd|
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'____/__________/
Rem // ----> EOL    |fffd||fffd||fffd||fffd||fffd||fffd|: "OnAction"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| //,--,REM_
      source_text = HTML$: HTML$ = "": _
      def_text = Replace(Replace(source_text, "&lt;!--", "&lt;!++"), "--&gt;", "++&gt;") '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| source_text '------|fffd||fffd||fffd||fffd|HTML$------
      f_pos = 0: 'EoL$ = IIf(htmlF, "<BR>", Chr(10)):
                        def_text = Replace(Replace(Replace(db_(def_text), "://", ":||"), "<B>:</B>//", "<B>:</B>||"), "--", "//")
      If pos|fffd|(1, "//", def_text, t_pos) > 0 Then
       'If Mid(def_text, IIf(t_pos - 1 > 0, t_pos - 1, 1), 1) <> ":" Then    !!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML !!!
          While t_pos > 0: If posLast&("{inblock}", Left(source_text, t_pos)) > posLast&("{outblock}", Left(source_text, t_pos)) _
                                   Then lf_pos = f_pos: f_pos = zero(InStr(t_pos, source_text, "{outblock}"), 100000): _
                                        HTML$ = HTML$ & Mid(source_text, lf_pos + 1, f_pos - lf_pos): GoTo passBlockL    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            lf_pos = f_pos: f_pos = zero(InStr(t_pos + 1, def_text, EoL$), 100000) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|)
            If t_pos > lf_pos + 1 Then HTML$ = HTML$ & Mid(source_text, lf_pos + 1, t_pos - lf_pos - 1) '&|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|&
            t_block = Mid(source_text, t_pos, zero(f_pos& - 1, 10000) - t_pos + 1): t_block = clean|fffd||fffd||fffd|$(t_block)
            HTML$ = HTML$ & "<font color=GREEN>" & t_block & "</font>": dec f_pos& 'c EoL$
passBlockL: t_pos = InStr(f_pos, def_text, "//")
          Wend: If f_pos < Len(source_text) Then If f_pos > 0 Then HTML$ = HTML$ & Mid(source_text, f_pos + 1)  '|fffd||fffd||fffd||fffd||fffd|
      ElseIf HTML$ = "" Then HTML$ = source_text '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|------|fffd||fffd||fffd||fffd|HTML$------
      End If: 'If Not htmlF Then def_text = Replace(Replace(source_text, "<!++", "<!--"), "++>", "-->") _
                           Else def_text = Replace(Replace(source_text, "&lt;!++", "&lt;!--"), "++&gt;", "--&gt;") ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| <!-- -->
'If htmlF Then UpdateDefinitionFormatting$ = html$: Exit Function '------|fffd||fffd||fffd||fffd|HTML$------TEST
'If htmlF And search$ <> "" Then HTML$ = markUpResult$(HTML_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$(search$), HTML$) -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    '<<--|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'____/__________/
Rem        |fffd||fffd||fffd||fffd|     |fffd||fffd||fffd||fffd||fffd||fffd|: "alert.log" 'C:\MY_PIB 'http(s)://www.garshin.ru/it
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| html)
    If hasIt("http", HTML$) Then '|fffd||fffd||fffd||fffd||fffd||fffd| HTML
        Dim http$: 'EoL$ = IIf(htmlF, "<BR>", Chr(10)):
                                                       t_pos = 0: source_text = HTML$: def_text = "": 'db_ HTML$ "&nbsp;" -- f_pos& = Min(f_pos&, f_pos1) '
        source_text = Replace(Replace(db_(source_text), "<B>|</B>http", "|_ttp"), "<B>|</B>&nbsp; http", "|__ttp")
        While pos|fffd|(1, "http", source_text, t_pos) > 0: f_pos& = zero(InStr(t_pos + 1, source_text, EoL$), Len(source_text) + 1) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 'db_ f_pos& & " - " & InStr(t_pos + 1, source_text, "&nbsp;")
                                                If sag(f_pos1, InStr(t_pos + 1, source_text, "&")) > 0 Then _
                                                       f_pos& = Min(Min(f_pos&, f_pos1), zero(InStr(t_pos + 1, _
                        Replace(Replace(Replace(Replace(source_text, "{", "'"), ",", "'"), ";", "'"), """", "'"), "'"), 100000)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         'db_ IIf(f_pos& = 0, Empty, f_pos& - t_pos)
         http$ = Mid(source_text, t_pos, IIf(f_pos& = 0, 10000, f_pos& - t_pos))
'         While Not FnIsLetterOrNumber(Right(http$, 1)) Or Right(http$, 1) = "/" Or Len(http$) < 2
'          http$ = Left(http$, Len(http$) - 1): If f_pos& > 0 Then dec f_pos& ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'         Wend
         If f_pos& > 0 Then def_text = Mid(source_text, f_pos&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         db_ ">>" & clearFromTags$("<", ">", http$) & "<<" '& Chr(10) & def_text 'Else db_ http$ & Chr(10) & def_text
         source_text = Left(source_text, t_pos - 1) & "<A HREF=" & clearFromTags$("<", ">", http$) & ">" & http$ & "</A>" & IIf(f_pos& = 0, "", def_text)
                                                                  'clearFromTags$("&lt;", "&gt;", http$) & ">" & http$ & "</A>" & IIf(f_pos& = 0, "", def_text)
         t_pos = posLast("</A>", source_text): 'db_ t_pos
        Wend: HTML$ = Replace(Replace(source_text, "|_ttp", "|http"), "|__ttp", "|http")  '|fffd||fffd|. "{{"-|fffd||fffd||fffd||fffd| (injectionHTM$)
    End If
Rem:   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| related links - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "(|fffd||fffd|. term_eru)" |fffd| "|fffd||fffd|./|fffd||fffd||fffd|./see term_eru" - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If Not missingEntry Then
If sag(pos&, posFirst&("see&nbsp; ", HTML$)) > 0 Then it$ = Mid(HTML$, pos&, Len("see&nbsp; ")): GoSub mark_related
If sag(pos&, posFirst&("|fffd||fffd|<B>.</B>&nbsp; |fffd||fffd||fffd|&nbsp; |fffd||fffd|&nbsp; ", HTML$)) > 0 Then it$ = _
  Mid(HTML$, pos&, Len("|fffd||fffd|<B>.</B>&nbsp; |fffd||fffd||fffd|&nbsp; |fffd||fffd|&nbsp; ")): GoSub mark_related
If sag(pos&, posFirst&("|fffd||fffd|<B>.</B>&nbsp; ", HTML$)) > 0 Then
    it$ = Mid(HTML$, pos&, Len("|fffd||fffd|<B>.</B>&nbsp; ")): GoSub mark_related
If sag(pos&, posFirst&("|fffd||fffd||fffd|<B>.</B>&nbsp; ", HTML$)) > 0 Then
    it$ = Mid(HTML$, pos&, Len("|fffd||fffd||fffd|<B>.</B>&nbsp; ")): GoSub mark_related
End If: End If: End If
If False Then 'Sub
mark_related: missingEntry = True
        If Left(HTML$, Len(it$)) = it$ Then
            If Not hasIt("<BR>", HTML$) Then  '|fffd||fffd|./|fffd||fffd||fffd|./see term_eru
           lnk$ = Mid(HTML$, Len(it$) + 1): id$ = GetIDwithTerm(Replace(Replace(Replace(lnk$ & "#?", "<B>.</B>#?", ""), "#?", ""), "&nbsp;", ""))
           If id$ = "" Then id$ = GetIDwithTerm(clearFromTags("<", ">", Replace(Replace(Replace(lnk$ & "#?", "<B>.</B>#?", ""), "#?", ""), "&nbsp;", "")))
           If id$ <> "" Then HTML$ = it$ + "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & lnk$ & "</A>": _
                                                     If dir(path$) = "" Then Open_Browser_W$ id$, True: Return Else Return '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If: End If
 i = 0: While sag(pos&, pos|fffd|(inc(i), "{{" & it$, HTML$)) <> 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "{{|fffd||fffd|. + USE_HASH[|||fffd||fffd||fffd||fffd|._|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd|]}}" -- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "+ USE_HASH[, |fffd||fffd||fffd||fffd||fffd||fffd| 2][, |fffd||fffd||fffd||fffd||fffd||fffd| 3]" - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           lnks$ = sag(lnks_new$, prsBefore("}}", Mid(HTML$, pos& + Len("{{" & it$)))): k% = 0: While sag(lnk$, prsBetween|fffd|(inc(k%), ",", ",", "," & lnks$ & ",")) <> ""
           If sag(id$, GetIDwithTerm(Trim(clearFromTags("{", "}", clearFromTags("{{", "}}", Trim(prsafterdown("||", clearFromTags("<", ">", sag(lnk_new$, Replace(lnk$, "&nbsp;", "")))))))))) <> "" Then
             lnks_new$ = Replace(lnks_new$, lnk$, replicate("", "&nbsp; ", Len(lnk_new$) - Len(LTrim(lnk_new$))) & "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & Trim(prsBeforeUp("<B>|</B><B>|</B>", lnk_new$)) & "</A>")
            '    HTML$ = Replace(HTML$, "(" & it$ & lnk$, "(" & it$ & _
             "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & clearFromTags("<", ">", lnk$) & "</A>")
                                   If dir(path$) = "" Then Open_Browser_W$ id$, True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           dec i: End If: Wend: If lnks_new$ <> "" Then HTML$ = Replace(Replace(HTML$, "{{" & it$ & lnks$, lnks_new$ & "<-"), "<-}}", "")
           Wend
 i = 0: While sag(pos&, pos|fffd|(inc(i), "(" & it$, HTML$)) <> 0 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "(|fffd||fffd|. term_eru)"
           lnks$ = Mid(HTML$, pos& + Len("(" & it$)) '|fffd||fffd||fffd||fffd||fffd| it
           lnks$ = sag(lnks_new$, prsBefore|fffd|(prsBracketOut|fffd|("(", lnks$), ")", lnks$)): k% = 0: While sag(lnk$, prsBetween|fffd|(inc(k%), ",", ",", "," & lnks$ & ",")) <> ""
           If sag(id$, GetIDwithTerm(Trim(clearFromTags("{", "}", clearFromTags("{{", "}}", Trim(prsafterdown("||", clearFromTags("<", ">", sag(lnk_new$, Replace(lnk$, "&nbsp;", "")))))))))) <> "" Then
             lnks_new$ = Replace(lnks_new$, lnk$, replicate("", "&nbsp; ", Len(lnk_new$) - Len(LTrim(lnk_new$))) & "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & Trim(prsBeforeUp("<B>|</B><B>|</B>", lnk_new$)) & "</A>")
            '    HTML$ = Replace(HTML$, "(" & it$ & lnk$, "(" & it$ & _
             "<A HREF=" & sag(path$, ThisWorkbook.path & "\html\" & id$ & ".html") & ">" & clearFromTags("<", ">", lnk$) & "</A>")
                                   If dir(path$) = "" Then Open_Browser_W$ id$, True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           End If: Wend: If lnks_new$ <> "" Then HTML$ = Replace(HTML$, "(" & it$ & lnks$, "(" & it$ & lnks_new$)
           Wend
Return: End If
'|1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a|
HTML$ = Replace(Replace(HTML$, "</B><B>", ""), "<BR></TR>", "</TR>") '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (</TR> = |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
'#E5ECEB |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| lightGRAY, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http://olocoder.ru/generator.html
''  Dim clrs(4, 2) As String: clrs(1, 1) = "#FFFFaa": clrs(1, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''                            clrs(2, 1) = "#C8FB62": clrs(2, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''                            clrs(3, 1) = "#BCFEF9": clrs(3, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''                            clrs(4, 1) = "#EAE7CC": clrs(4, 2) = "RED" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'  s_cnt = prsCount(" ", search$): db_ "in " & search$ & " s_cnt: " & s_cnt
'  For i = 1 To s_cnt + 1 'search$ = Replace(search$, " ", "&nbsp; ") - |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|"
'    i_search$ = prsBetween|fffd|(i, " ", " ", " " & search$ & " "): If hasit(i_search$, HTML$) Then c_len = Len(i_search$): _
'         sTag = "<SPAN STYLE=BACKGROUND-COLOR:" & FindForm.getClrs(i, 1) & ";color:" & FindForm.getClrs(i, 2) & ">": sLen = Len(sTag): _
'         db_ i_search$ & " sTag: " & sTag: GoSub searchSub: db_ i_search$
'Next i: End If
'|1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a||1a|
Rem: + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| markUpResult$-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
exitL: HTML$ = Replace(HTML$, "<SPAN STYLE=BACKGROUND-COLOR<B>:#", "<SPAN STYLE=BACKGROUND-COLOR:#"): _
       HTML$ = Replace(HTML$, "</B>;color<B>:</B>RED>", ";color:RED>"): _
       HTML$ = Replace(Replace(HTML$, "{inblock}", ""), "{outblock}", ""): _
       UpdateDefinitionFormattingHTML$ = HTML$ '------|fffd||fffd||fffd||fffd|HTML$------         ^|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'If html$ <> "" Then MsgBox html$
'Exit Function
''=============================================================
'searchSub: Dim pos%: Do: pos = InStr(pos + 1, HTML$, i_search$, vbTextCompare): If pos = 0 Then Exit Do
'                     HTML$ = Left(HTML$, pos - 1) & sTag & Mid(HTML$, pos, c_len) & "</SPAN>" & Mid(HTML$, pos + c_len): IncOn pos, sLen
'                     Loop While pos > 0 '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| instead HTML$ = Replace(HTML$, search$, "<font color=RED>" & search$ & "</font>", , , vbTextCompare)
'Return:
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| HTML
Function markUpResult$(ByVal search$, ByVal HTML$)
         'markUpResult$ = HTML$: Exit Function '4TEST
search$ = Replace(Replace(noDspace$(search$) & "<-", """<-", ""), "<-", ""): If search$ = "" Then markUpResult$ = HTML$: Exit Function
    s_cnt = prsCount(" ", search$): 'db_ HTML$ 'db_ "in " & search$ & " s_cnt: " & s_cnt
  For i% = 1 To s_cnt + 1: If i > 6 Then Exit For 'search$ = Replace(search$, " ", "&nbsp; ") - |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|"  'If i > 6
    i_search$ = prsBetween|fffd|(i, " ", " ", " " & search$ & " "): i_search$ = Replace(i_search$, "<", "") '"&lt;" 'TEST - |fffd||fffd||fffd||fffd|killer |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         If hasIt(i_search$, HTML$) Then
            c_len = Len(i_search$): _
             sTag = "<SPAN STYLE=BACKGROUND-COLOR:" & FindForm.getClrs(i, 1) & ";color:" & FindForm.getClrs(i, 2) & ">": sLen = Len(sTag)
            'db_ i_search$ & " sTag: " & sTag:
            GoSub searchSub: 'db_ i_search$
         End If
Next i: markUpResult$ = HTML$: Exit Function
'=============================================================
searchSub: Dim pos&: Do: pos = InStr(pos + 1, HTML$, i_search$, vbTextCompare): If pos = 0 Then Exit Do Else fTag = "</SPAN>": 'db_ HTML$
                     If posLast("<", Left(Replace(HTML$, "{", "<"), pos - 1)) > posLast(">", Left(Replace(HTML$, "}", ">"), pos - 1)) Then
                         startTag = "": fTag = "": 'db_ Left(HTML$, pos - 1) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|! (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML)
                     Else: startTag = sTag: End If
                     HTML$ = Left(HTML$, pos - 1) & startTag & Mid(HTML$, pos, c_len) & fTag & Mid(HTML$, pos + c_len): incon pos, sLen ' "</SPAN>" & Chr(10) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                     Loop While pos > 0 And dbgNif(inc(j) < 1000, "|fffd||fffd||fffd||fffd||fffd||fffd| 1000") '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| instead HTML$ = Replace(HTML$, search$, "<font color=RED>" & search$ & "</font>", , , vbTextCompare)
Return: End Function

'-------------------------
Rem 'Abbreviation (LOGIC)/--------------------------------------
'-----------------------

'|fffd||fffd||fffd| Prima-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function clean|fffd||fffd||fffd|$(s_): s$ = s_
s$ = Replace(s$, "<font color=GRAY>", ""): If s$ <> s_ Then s$ = Replace(s$, "</font>", "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| VS '|fffd||fffd||fffd||fffd||fffd||fffd|'
s$ = Replace(s$, "<font color=BLUE>", ""): If s$ <> s_ Then s$ = Replace(s$, "</font>", "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
s$ = Replace(s$, "<font color=CIAN>", ""): If s$ <> s_ Then s$ = Replace(s$, "</font>", "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
clean|fffd||fffd||fffd|$ = s$: End Function

Attribute VB_Name = "Forms_Virtual"

Public Function subcat(cid As String) As String: Dim lvl As Integer
lvl = prsCount("_", cid): If lvl = 0 Then subcat = GetCatByID(cid): Exit Function
subcat = Replace(GetCatByID(cid), GetCatByID(prsBefore|fffd|(lvl, "_", cid)), "") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
subcat = Replace(subcat, "_", "") '|fffd||fffd||fffd| |fffd||fffd||fffd|_ (|fffd||fffd||fffd||fffd|. JavaScript)
End Function

Public Function GetCatByID(cid As String)
With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_"): For r = 2 To .UsedRange.rows.Count:
 If .Cells(r, 1) = cid Then GetCatByID = .Cells(r, 3): Exit Function
Next r: End With: End Function

Sub UpdateCATForm(): DestroyCATForm: MakeCATForm: End Sub

Sub DestroyCATForm(): On Error Resume Next '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ThisWorkbook.VBProject.VBComponents.Remove ThisWorkbook.VBProject.VBComponents("CATForm")
End Sub

Sub MakeCATForm() ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If fnObjExists("CATForm") Then Exit Sub
    Dim TempForm As Object  'VBComponent
    Dim NewCB As MSForms.CheckBox
    Dim NewF As MSForms.Frame
    Dim l As Integer, col As Integer, row As Integer, max_row
    'Application.VBE.MainWindow.Visible = False
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| UserForm
    Set TempForm = ThisWorkbook.VBProject.VBComponents.Add(3)
    With TempForm: .Properties("Caption") = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": .Properties("Width") = 200: End With
    'L = TempForm.CodeModule.CountOfLines
'***********************
With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_"): last_lvl = -1
For r = 2 To .UsedRange.rows.Count
    Dim cid As String: cid = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(r, 1)
    'CATForm
    lvl = prsCount("_", cid)
    If lvl = 0 Then
       inc col: If row > max_row Then max_row = row
       row = 0: Set NewF = TempForm.Designer.Controls.Add("forms.Frame.1")
       With NewF: .Width = 2: .Top = 15.5: .Left = (col - 1) * 80 + 10: .Caption = ""
         .SpecialEffect = fmSpecialEffectSunken: .Height = 1000: End With
    Else: inc row
    End If
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CheckBox
    Set NewCB = TempForm.Designer.Controls.Add("forms.CheckBox.1")
    With NewCB
      .Top = row * 12 + 2: .Left = (col - 1) * 80 + lvl * 12.5: .Caption = " " & subcat(cid)
      .PicturePosition = fmPicturePositionLeftCenter: .AutoSize = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      '.Picture = LoadPicture(ThisWorkbook.path & "\icons\Coding") 'default
      On Error Resume Next
      .Picture = FitToSizeBitmap(LoadPicture(ThisWorkbook.path & "\icons\" & subcat(cid) & ".ICO"), 16, 16)
      On Error GoTo 0
      .BackStyle = fmBackStyleTransparent
      .tag = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(r, 4) & "|" & cid
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| currentCat |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      '.value = CBool(InStr(1, currentCat, ":" & Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(r, 4) & ":"))
    End With
    With TempForm.CodeModule 'CheckBox
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _KeyDown
        .InsertLines inc(l), "Private Sub CheckBox" & r - 1 & "_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)"
        .InsertLines inc(l), "Call CatKeyDown(KeyCode): End Sub"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _Change
        .InsertLines inc(l), "Private Sub CheckBox" & r - 1 & "_Change(): Call CatChange(""CheckBox" & r - 1 & """): End Sub"
    End With
'    '*********************** -> reFillMenuCategory() |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    If lvl <> last_lvl Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|
'      If lvl = 0 Then Set myMenu = CommandBars("GCoding").Controls("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") _
'                 Else: Set myMenu = GetMenuByCID(cid) '|fffd|-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| CommandBarControl
'    End If
'    Dim newMenu As CommandBarControl
'    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    If Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_").Cells(r, 2) <> "" _
'       Then Set newMenu = myMenu.Controls.Add(Type:=msoControlPopup, Temporary:=True): newMenu.BeginGroup = True _
'       Else Set newMenu = myMenu.Controls.Add(Type:=msoControlButton, Temporary:=True)
'    With newMenu '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'        .Tag = cid
'        .Caption = subcat(cid)
'        .OnAction = "ReCatWithCB"
'        On Error Resume Next
'        If .Type = msoControlButton Then .Picture = LoadPicture(ThisWorkbook.path & "\icons\" & .Caption & ".ico") '.FaceId = 300
'        On Error GoTo 0
'    End With
    last_lvl = lvl
Next r
TempForm.Properties("Height") = (max_row + 2) * 12
TempForm.Properties("Width") = col * 80
End With ': On Error Resume Next
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Image1 - Hot Rebuild
Set NewImg = TempForm.Designer.Controls.Add("forms.Image.1")
With NewImg
      .Top = TempForm.Properties("Height") - 26: .Left = TempForm.Properties("Width") - 26 ': .Caption = " " & subcat(cid)
      .Width = 24: .Height = 24: .PictureAlignment = fmPictureAlignmentCenter: '.AutoSize = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      pic_f$ = ThisWorkbook.path & "\icons\settings.ico" 'MsgBox GetPictureSize(pic_f$)
      If GetPictureSize(pic_f$) > 24 * 24 Then |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| pic_f$, pic_f$, 24
      On Error Resume Next: .Picture = FitToSizeBitmap(LoadPicture(ThisWorkbook.path & "\icons\settings.ico"), 22, 22): On Error GoTo 0
      .BackStyle = fmBackStyleTransparent
      .BorderStyle = fmBorderStyleNone
   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _Click
      TempForm.CodeModule.InsertLines inc(l), "Private Sub Image1_Click(): UpdateCATForm: End Sub" '  With Sheets(""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_""): .Visible = xlSheetVisible: .Activate: End With: Unload Me: End Sub"
End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Image2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.)
Set NewImg = TempForm.Designer.Controls.Add("forms.Image.1")
With NewImg
      .Top = TempForm.Properties("Height") - 26: .Left = (col - 1) * 80 + lvl * 12.5 - 6 ': .Caption = " " & subcat(cid)
      .Width = 24: .Height = 24: .PictureAlignment = fmPictureAlignmentCenter: '.AutoSize = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      pic_f$ = ThisWorkbook.path & "\icons\settings.ico" 'MsgBox GetPictureSize(pic_f$)
      If GetPictureSize(pic_f$) > 24 * 24 Then |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| pic_f$, pic_f$, 24
      On Error Resume Next: .Picture = FitToSizeBitmap(LoadPicture(ThisWorkbook.path & "\icons\settings1.ico"), 22, 22): On Error GoTo 0
      .BackStyle = fmBackStyleTransparent
      .BorderStyle = fmBorderStyleNone
   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _Click
      TempForm.CodeModule.InsertLines inc(l), "Private Sub Image2_Click(): PF.setCurrentCat """", """": End Sub" '  With Sheets(""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_""): .Visible = xlSheetVisible: .Activate: End With: Unload Me: End Sub"
End With
    With TempForm.CodeModule 'UserForm
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _Initialize
        .InsertLines inc(l), "Private Sub UserForm_Initialize(): LM ""CATForm_Ini"""
        .InsertLines inc(l), "wCaption = Me.Caption: Call setNoHeadersC(wCaption): Call set_Transparent"
        .InsertLines inc(l), "If Me.Left = 0 Then Me.Left = ScLt% * x75  'db_ Me.Left & "" vs "" & ScLt% * x75"
        .InsertLines inc(l), "Call CatLoader: Me.BorderStyle = 1: CheckBox1.SetFocus: End Sub"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _DblClick
        .InsertLines inc(l), "Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)"
        .InsertLines inc(l), "If PF.Ready4Cat Then PF.setCurrentCat """", ""_*"": Exit Sub 'CurrentCat <<"
        .InsertLines inc(l), "Call CatKeyDown(13): End Sub"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| _MouseDown
        .InsertLines inc(l), "Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)"
        .InsertLines inc(l), "If Button = fmButtonRight Then CatKeyDown 27" 'Esc
        .InsertLines inc(l), "End Sub"
    End With: l = TempForm.CodeModule.CountOfLines
    '========== 4 Copying = CatKeyDown
    With Application.vbe.VBProjects("MACProject").VBComponents.Item("Forms_Virtual").CodeModule
        s_line = .ProcBodyLine("CatKeyDown", vbext_pk_Proc)
        n_lines = .ProcCountLines("CatKeyDown", vbext_pk_Proc)
        TempForm.CodeModule.InsertLines inc(l), .Lines(s_line - 1, n_lines)
    End With: l = TempForm.CodeModule.CountOfLines
    '========== 4 Copying = CatChange
    With Application.vbe.VBProjects("MACProject").VBComponents.Item("Forms_Virtual").CodeModule
        s_line = .ProcBodyLine("CatChange", vbext_pk_Proc)
        n_lines = .ProcCountLines("CatChange", vbext_pk_Proc)
        TempForm.CodeModule.InsertLines inc(l), .Lines(s_line - 1, n_lines)
        l = TempForm.CodeModule.CountOfLines
    End With: l = TempForm.CodeModule.CountOfLines
    '========== 4 Copying = CatLoader
    With Application.vbe.VBProjects("MACProject").VBComponents.Item("Forms_Virtual").CodeModule
        s_line = .ProcBodyLine("CatLoader", vbext_pk_Proc)
        n_lines = .ProcCountLines("CatLoader", vbext_pk_Proc)
        TempForm.CodeModule.InsertLines inc(l), .Lines(s_line - 1, n_lines)
        l = TempForm.CodeModule.CountOfLines
    End With: l = TempForm.CodeModule.CountOfLines
    '=================================
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.Workbooks("MAC.XLA").Save
    TempForm.Properties("Name") = "CATForm"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| UserForm
    'VBA.UserForms.Add(TempForm.name).Show ' vbModeless
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| UserForm
    'ThisWorkbook.VBProject.VBComponents.Remove TempForm
    'On Error GoTo 0
    Set TempForm = Nothing
    Set NewCB = Nothing
    Set NewF = Nothing
    'Application.VBE.MainWindow.Visible = True
    Set myMenu = Nothing
    Set newMenu = Nothing
    Call WSim
End Sub

'========== 4 Copying =================================================
Public Sub CatKeyDown(KeyCode)
If KeyCode = 13 Then 'Enter (str - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, catstr - :1:2:15:)
  KeyCode = 0: Dim str As String, catStr As String, topcat As String, ncat As Boolean
  For Each cat In CATForm.Controls:
  If Left(cat.name, 5) <> "Image" Then
   If cat.Caption <> "" Then
    If cat.Top < 12 Then 'new HeadingCat
      If str = "" Then topcat = "" 'no blank strings
      If InStr(Len(str), str, ";") Or _
         InStr(Len(RTrim(str)), str, ":") Then str = Mid(str, 1, Len(RTrim(str)) - 1)
      If topcat <> "" Then topcat = Chr(10) & LTrim(cat.Caption) _
                      Else: topcat = LTrim(cat.Caption)
      If cat.TabIndex + 1 <> CATForm.Controls.Count Then topcat = topcat & ": " '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ncat = True: End If
    If cat.value Then
      If cat.Top < 12 Then
        str = str & topcat: ncat = False
      Else
         If ncat Then str = str & topcat: ncat = False
         str = str & LTrim(cat.Caption) & ";"
      End If
      catStr = catStr & ":" & prsAfter("|", cat.tag)
    End If
  End If: End If: Next cat: If InStr(Len(str), str, ";") Or _
                       InStr(Len(RTrim(str)), str, ":") Then str = Mid(str, 1, Len(RTrim(str)) - 1)
  If catStr <> "" Then catStr = catStr & ":"
  'Me.Tag = catstr & "|" & str 'Output
  If FnFormIsVisible("EditForm") Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Call Cat2Form(str, catStr): Unload CATForm
  ElseIf FnIsTrinity(ActiveSheet.name) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)
    Set rangeToUse = Selection: Dim next_id As String:
    For Each singleArea In rangeToUse.Areas
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| rangeToUse)
        next_id = ActiveSheet.Cells(singleArea.row, 1)
        For r = 1 To singleArea.rows.Count '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Next
          If next_id <> "" And next_id <> "ID" Then
            Application.Goto Reference:=FnGetPrefix(Null) + next_id
            If Not ActiveCell.rows.Hidden Then Call setCat(next_id, catStr, True)
            next_id = Cells(ActiveCell.row + 1, 1)
          Else: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Sub
          End If
        Next r
    Next: Unload CATForm
  End If
  'MsgBox Me.Tag: Unload Me:
ElseIf KeyCode = 27 Or KeyCode = 67 Then KeyCode = 0: Unload CATForm: PF.Image16.SpecialEffect = 0 'Escape or <C>
End If: End Sub
'=====================================================================
Private Sub CatChange(it): If Not CATForm.Controls(it) Then Exit Sub Else If PF.Ready4Cat Then T$ = CATForm.Controls(it).tag: _
  PF.setCurrentCat Trim(CATForm.Controls(it).Caption), CATForm.Controls(it).name & "|" & prsAfter("|", T$): Exit Sub  'CurrentCat <<
Dim topcat As String: topcat = prsbetweenUp("|", "_", CATForm.Controls(it).tag)
If prsCount("_", CATForm.Controls(it).tag) = 0 Then 'topcat
  For Each cat In CATForm.Controls ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| subcats
   If Left(cat.name, 5) <> "Image" Then If cat.Caption <> "" Then _
                   If prsBetween("|", "_", cat.tag) = topcat Then cat.value = False
  Next cat
Else ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| topcat
  allchckdflg = True
  For Each cat In CATForm.Controls
    If prsBetween("|", "_", cat.tag) = topcat Then _
      If Not cat.value Then allchckdflg = False: Exit For
  Next cat
  For Each cat In CATForm.Controls
    If prsbetweenUp("|", "_", cat.tag) = topcat Then
      If allchckdflg Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| subcats, |fffd||fffd||fffd||fffd||fffd||fffd| topcat
        cat.value = CBool(prsAfter("|", cat.tag) = topcat)
      Else ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| topcat
        If CBool(prsAfter("|", cat.tag) = topcat) Then cat.value = False
      End If
    End If
  Next cat
End If: End Sub
'=====================================================================
Private Sub CatLoader(): On Error Resume Next: For Each cat In CATForm.Controls
If cat.Caption <> "" Then cat.value = CBool(InStr(1, currentCat, ":" & prsAfter("|", cat.tag) & ":"))
                                                   Next cat: End Sub
Attribute VB_Name = "Forms_customization"

Sub customSC_Initialize()
SCForm.Left = SCForm.TargetForm.Left + SCForm.TargetForm.Width - 100:
End Sub

Sub customSC_Restore(Optional hddn = False): If AC_flg Then GoTo exitL 'Else customSCS_Restore: Exit Sub 'Phenix-Tec. (SCS -> SC)
'das startUpFlg 'bag: 2 |fffd||fffd||fffd||fffd||fffd| FindForm
                            If SCForm.t_hwnd <> 0 Then If SCForm.checkVisible Then GoTo exitL Else GoTo exitL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?
    If Not FnFormIsLoaded("SCForm") Then sul "SCForm.show", False: SCForm.show vbModeless 'TEST - 180904_1112
                On Error Resume Next:  sul "SCForm.Attach", False: SCForm.Attach Application.Caption, 1 'argument err (on startup)
'TEST |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 190219:
    If FnFormIsLoaded("SCSForm") Then SCForm.tag = SCSForm.s_tag: customSCS_Show Else customSCS_Restore: If hddn Then SCForm.Hide
exitL: End Sub 'flg_Ready = True 'L0M "2": SCSForm.focusMe: L0M "3" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                                 'On Error Resume Next: If SCForm.TargetForm.Top = 0 Then SCForm.Hide

Sub customSCS_Show(): l% = 1: LogString "in   customSCS_Show", l
If Not FnFormIsLoaded("SCSForm") Then MsgBox "customSCS_Show with unloaded Form!": Exit Sub
'das startUpFlg 'bag: 2 |fffd||fffd||fffd||fffd||fffd| FindForm
If Not SCSForm.Visible Then Call SCSForm.Attach: '!!is possible throws "Automation error"
LogString "out customSCS_Show", l: End Sub 'Unload SCSForm
'SCSForm.Show vbModeless: SCSForm.focusMe: End Sub
'With SCSForm.ToggleButton1: SetWindowRgn SCSForm.me_hwnd&, CreateRectRgn(3, 29 + .Top / x75, 3 + _
2 * .Width / x75, 29 + 2 * .Height / x75), True: End With: SCSForm.focusMe: End Sub '.Manager

Sub customSCS_Restore(): l% = 1: LogString "in   customSCS_Restore", l: If AC_flg Then Exit Sub
If Not FnFormIsLoaded("SCSForm") Then Call SCSForm.Attach Else customSCS_Show
LogString "out customSCS_Restore", l: End Sub

'Used in other Projects
Sub customSC_Activate(): End Sub
Sub customSC_Terminate(): End Sub 'If Not FnFormIsLoaded("SCSForm") Then Exit Sub 'Else SCSForm.parkedUp True
                                      'CFormS.s_tag$ = SCForm.Tag: End Sub
Sub customSC_KeyDown(): End Sub
Sub customSC_Layout(): End Sub
Sub customSC_LL(): End Sub
Sub customSC_RL(): End Sub

Sub customSCS_KeyDown(): Dim tPT As POINTAPI, hWnd&: GetCursorPos tPT: hWnd& = WindowFromPoint(tPT.x, tPT.Y)
                   hWnd& = GetTopParentH&(hWnd&): If Mid(getWndCaption$(hWnd&), 1, 1) = "^" Then setFocusOnForm ("SCForm")
End Sub '|fffd||fffd||fffd| new_one |fffd||fffd||fffd||fffd|
Sub customSCS_Activate(): End Sub
Sub customSCS_Deactivate(): End Sub
Sub customSCS_Layout(Optional d0 = True): ls ">", "customSCS_Layout": If Not d0 Then Exit Sub: asu = False:
LP 1:         If Not twoWindows Or SCSForm.LParked Then SheetResize: GoTo exitL
LP 2: Call twoWindows_reSize: If Windows("_").ActiveSheet.Index <> Windows("1").ActiveSheet.Index Then _
                           Windows(2).Activate: SheetResize: Windows(2).Activate: SheetResize: GoTo exitL
LP 4:                    cpt = ActiveWindow.Caption: Windows("1").Activate: SheetResize: Windows(cpt).Activate
exitL: asu = True: End Sub
Sub customSCS_loadTargetPos_no_rePark(): With SCSForm: .loadTargetPos: .reDraw: '+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
      SetTransparent IIf(TransEnabH(.t_hwnd&), .t_hwnd&, 0), wdeep%(.t_hwnd&): End With: End Sub '|fffd||fffd||fffd| Application.OnTime Action
Sub customSCS_loadTargetPos(): On Error Resume Next '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Virtual Form
      With SCSForm: customSCS_loadTargetPos_no_rePark: .reParkW True: .focusMe: End With: End Sub '|fffd||fffd||fffd| Application.OnTime Action
'Sub customSCS_UserForm_Layout(): SCSForm.UserForm_Layout: SCSForm.focusMe: End Sub '|fffd||fffd||fffd| Application.OnTime Action

Public Function SCSFormMouseScroll&(ByVal nCode&, ByVal wParam&, ByRef lParam As MOUSEHOOKSTRUCT)
SCSFormMouseScroll = SCSForm.MouseScrollF(nCode&, wParam&, lParam): End Function

Sub PF_SetSpecialEffect(onBtn%): On Error Resume Next: PF.ImageWSsetSpecialEffect (onBtn% - 1): End Sub


Attribute VB_Name = "HyperForm"
Attribute VB_Base = "0{09BA0046-1DE6-47AA-BA10-68F0AEF65EDB}{33D4E2C6-C07F-4696-BD9F-16BEDB8E8C5E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub UserForm_Activate()
  If Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
    Sheets(FnWSCase(TextBox1.Text)).Activate
    Select Case TextBox1.Text
           Case 0: ComboBox1.RowSource = ActiveSheet.name + _
                                                   "!B2:D" + CStr(FnGetLastRow(0))
                   ComboBox1.BoundColumn = 0
                   ComboBox1.ColumnCount = 3
                   ComboBox1.ColumnHeads = True
           Case Else: ComboBox1.RowSource = ActiveSheet.name + _
                      "!C2:C" + CStr(FnGetLastRow(FnWSNum(ActiveSheet.name)))
    End Select
    TextBox1.Text = ""
  Else
    ComboBox1.RowSource = ActiveSheet.name + _
    "!C2:C" + CStr(FnGetLastRow(FnWSNum(ActiveSheet.name)))
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  CommandButton1.Caption = ActiveCell.row
End Sub


Private Sub TextBox1_Exit(ByVal Cancel As MSForms.ReturnBoolean)
TextBox1.Text = Trim(TextBox1.Text)
If TextBox1.Text <> "" Then
  If FnFarCell(FnWSNum(ActiveSheet.name), TextBox1.Text, far_row, far_WS) Then
    ComboBox1.Text = Sheets(far_WS).Cells(far_row, 3)
    Application.Goto Reference:="_" + CStr(FnWSNum(far_WS)) + "_" + TextBox1.Text, Scroll:=True
  Else
    TextBox1.Text = ""
    ComboBox1.Text = ""
  End If
Else: ComboBox1.Text = ""
End If
End Sub


Private Sub ComboBox1_Exit(ByVal Cancel As MSForms.ReturnBoolean)
ComboBox1.Text = Trim(ComboBox1.Text)
If ComboBox1.Text <> "" Then
  Set c = FnFindCell(Sheets(ActiveSheet.name).Columns("C:C"), ComboBox1.Text, xlWhole)
  If c.row <> 1 Then
    TextBox1.Text = Sheets(ActiveSheet.name).Cells(c.row, 1)
    Application.Goto Reference:="_" + CStr(FnWSNum(ActiveSheet.name)) + "_" + TextBox1.Text, Scroll:=True
  Else
    TextBox1.Text = ""
    ComboBox1.Text = ""
  End If
Else: TextBox1.Text = ""
End If
Set c = Nothing
End Sub


Private Sub CommandButton1_Click()

If Not exists(FnGetPrefix(Null) + TextBox1.Text) Then
  MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  Exit Sub
End If

If Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
  Unload HyperForm
  Exit Sub
End If

target_row = CommandButton1.Caption
Cells(target_row, 1).Activate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call SetDefHyper(ActiveCell.Text, TextBox1.Text, True)

Unload HyperForm
End Sub

Attribute VB_Name = "JOTCaller"
Attribute VB_Base = "0{7E35DF9D-F9C7-40D5-A10D-7670DC587810}{2CD42736-0C10-4E69-AD01-BFB858264822}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public me_hwnd&, t_hwnd&, showedFlg As Boolean, rightsided As Boolean

Private Sub UserForm_Click(): SCSForm.cornerIt t_hwnd&, True: End Sub
Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean): Unload Me: End Sub
Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                                  If Button = fmButtonRight Then rightsided = Not rightsided: reDraw: showedFlg = False: _
                                                                 SCSForm.setWindowVisible t_hwnd&, False
                                  If FnFormIsLoaded("ChessCaller") Then ChessCaller.leftsided = rightsided: ChessCaller.reDraw
End Sub

Private Sub UserForm_Initialize(): me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False: rightsided = _
    FnFormIsLoaded("ChessCaller"): SetTransparent me_hwnd&, SCSForm.get_freezind_deep% - 60: SetTopMostWindow& me_hwnd&, True
    Me.Picture = IIf(SDGoldenTheme, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\JotCaller.jpg"), Nothing): End Sub
'JOTCaller.reDraw
Public Sub reDraw(Optional justPos = False)
    If rightsided Then
          Me.Top = ScBm * x75 - Me.Height + 4: Me.Left = (ScRt * x75) - Me.Width + 3: If justPos Then Exit Sub Else Me.show vbModeless
            rgn& = CreateRectRgn(3 + IIf(os10, 90, 0), Me.Height / x75 / 2 - 5, Me.Width / x75 - 3, Me.Height / x75 - 5)
            rgn2 = CreateEllipticRgn(Me.Width / x75 - 220, -10, Me.Width / x75 - 3, 35 + IIf(os10, 15, 0)): CombineRgn rgn&, rgn&, rgn2, 4
    Else: Me.Top = ScBm * x75 - Me.Height + 4: Me.Left = ScLt * x75 - 3: If justPos Then Exit Sub Else Me.show vbModeless
            rgn& = CreateRectRgn(3, Me.Height / x75 / 2 - 5, Me.Width / x75 - 3 + IIf(os10, -90, 0), Me.Height / x75 - 5)
            rgn2 = CreateEllipticRgn(3, -10, 220, 35 + IIf(os10, 15, 0)): CombineRgn rgn&, rgn&, rgn2, 4 '-1(X), 5(Y), 120(W), 220(H)
    End If: SetWindowRgn me_hwnd&, rgn&, True: End Sub

Private Sub UserForm_MouseMove(ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single): If showedFlg And IsWindow(t_hwnd&) Then GoTo exitL
With SCSForm: If IsWindow(t_hwnd&) = 0 Then t_hwnd& = .getJot_hwnd&: If t_hwnd& = 0 Then Exit Sub
                                  SetTransparent t_hwnd&, .get_freezind_deep%: showedFlg = True
                                  .SetRT IIf(.LFixed And rightsided, "4x", "3x"), t_hwnd&
Dim rt As rect: GetWindowRect Me.t_hwnd&, rt: rt_width = (rt.Right - rt.Left) / IIf(.LFixed, 2, 1): rt_height = rt.Bottom - rt.Top
If rightsided Then rt.Right = ScRt + 2: rt.Left = rt.Right - rt_width + 2: bord_sz = 7 Else If .LFixed Then rt.Left = rt.Right - rt_width + 2 'rt.Right = rt.Left + rt_width
                SetWindowRect Me.t_hwnd&, rt: .restoreW t_hwnd&: End With
rgn& = CreateRectRgn(bord_sz, bord_sz, -bord_sz + rt_width, -bord_sz + rt_height - 23 - IIf(rightsided, 0, 5) + IIf(os10, -285, 0))
rgn2 = CreateRectRgn(110 + IIf(os10, -7, 3), rt_height - 30 + 3 + IIf(os10, -285, 0), _
                    -bord_sz + rt_width - 3 - IIf(rightsided, IIf(os10, 190, 66), 0), _
                    -bord_sz + rt_height - 3 - IIf(rightsided, 0, 7) + IIf(os10, -280, 0))
          CombineRgn rgn&, rgn&, rgn2, 2: SetWindowRgn t_hwnd&, rgn&, True
exitL: SetForegroundWindow& t_hwnd&: End Sub 'SetForegroundWindow&: - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub UserForm_Terminate(): If IsWindow(t_hwnd&) = 0 Then Exit Sub
                            dispDestroyWindow t_hwnd&: End Sub
Attribute VB_Name = "OBJECTS"

Function fnObjExists(n As String) As Boolean
For Each comp In ThisWorkbook.VBProject.VBComponents
  If comp.name = n Then fnObjExists = True: Exit Function
Next comp: fnObjExist = False: End Function

'****************************************************
Attribute VB_Name = "PDB_Trigger_actions"

Sub tmp_works_pdb()
'On Error Resume Next: MsgBox Cells(ActiveCell.row, 1).Comment.Text
unLockWs
'DelComment ActiveCell, 1
'SetComment ActiveCell, pid2n35$("15.12.1409_1"), 1
'unLockWs ActiveSheet.index: SetComment ActiveCell, pid2n35$("15.12.1409_1"), 1: lockws ActiveSheet.index
LockWs
End Sub

Sub srv_PDB_file_list_Update(): With Sheets("log_") '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd| toHTML)
Dim FolderPath$, f_names$, f_cnt%: Set fso = CreateObject("Scripting.FileSystemObject") '|fffd||fffd||fffd| SubFolders.Count
For r = 2 To .UsedRange.rows.Count
  FolderPath$ = ThisWorkbook.path & "\PDB\" & .Cells(r, 1) 'ID
  If dir(FolderPath, vbDirectory) = "" Then 'FnGetTxtFromID$
     .Cells(r, 6) = ""
  Else Rem Files
     For Each sfol In fso.getFolder(FolderPath$).SubFolders
       inc f_cnt%: f_names$ = f_names$ & ";" & prsAfterLast("\", CStr(sfol.path)): Next '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
     Dim fnm$, fs As New FileSearch '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
     With fs: .NewSearch: .FileName = "*": .LookIn = FolderPath$ '& "\" '\\ - !
        If .Execute > 0 Then f_names$ = Get_PDB_file_list$(fs)
     End With: .Cells(r, 6) = f_names$: Set fs = Nothing: f_names$ = "": f_cnt% = 0
End If: Next: End With: End Sub

Function Get_PDB_file_list$(fs As FileSearch): With fs: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim fnm$, fi%: For fi = 1 To .FoundFiles.Count: fnm$ = Replace(Replace(.FoundFiles(fi), " - |fffd||fffd||fffd||fffd||fffd|.lnk", ""), ".lnk", "")
                   'If prsFileName$(fnm$) = "notes.nt" Then Goto pasL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                   inc f_cnt%: f_names$ = f_names$ & ";" & prsBeforeLastUp(".", prsFileName$(fnm$)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
pasL:          Next fi: If f_cnt% > 0 Then f_names$ = Replace(f_cnt% & "|" & f_names$, "|;", "|") '5|fnm1;fnm2;fnm3;fnm4;fnm5
End With: Get_PDB_file_list$ = f_names$: End Function
'-----------
Rem: PDB  /
'--------

Sub PDB_activation(): If ActiveCell.row > 1 Then termActivationOn:
End Sub

Sub PDB_deactivation(c As Object): If Not c Is Nothing Then termActivationOff c
End Sub

Sub OpenPDBSession(): Dim wait_time: wait_time = 0.1: If sag(id$, Cells(ActiveCell.row, idcol)) = "" Then Exit Sub
                      ' |fffd||fffd||fffd||fffd||fffd||fffd| 0.2 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| 0.4 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?S
With Sheets("Dispetcher_"): Set c = FindCell(.Columns("C:C"), "(" & id$ & ")", xlPart) '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If Not c Is Nothing Then rgby$ = Replace(Replace(Replace(Replace(.Cells(c.row, 1), "1", ""), "2", ""), "3", ""), "4", "")
   If rgby$ <> "" Then i% = decode(rgby$, "R", 1, "|fffd|", 1, "G", 2, "|fffd|", 2, "B", 3, "|fffd|", 3, "Y", 4, "|fffd|", 4): _
                       SCSForm.processSCSFormKeyDown (95 + i%): Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (HTML |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Set c = Nothing: End With: PDBFolderPath$ = ThisWorkbook.path & "\PDB\" & id$: If dir(PDBFolderPath$, 16) = "" Then Exit Sub
flg_InWork = True '|fffd||fffd||fffd| OnTimess
If getWndCaption$(SCSForm.r_hwnd&) Like "^*" Then DestroyWindow SCSForm.r_hwnd '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDB |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Dim title_begining$, fi%, fs As New FileSearch: ClearImmediate True: openAsW 'PDB > |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
With fs: .NewSearch: .LookIn = PDBFolderPath$: .FileName = "*"
If .Execute > 0 Then
'|fffd||fffd||fffd||fffd||fffd| n++
    For fi = 1 To .FoundFiles.Count: fnm$ = .FoundFiles(fi): t_ext$ = prsAfterLast(".", fnm$) 'fnm$ = prsAfter|fffd|(prscount("\", fnm$), "\", fnm$)
      Select Case t_ext$
        Case "lnk": If work_lnk$ = "" Then If LCase(Replace(Replace(fnm$, "-", ""), " ", "")) Like "*workdir*.lnk" Then work_lnk$ = fnm$
                    If ftp_lnk$ = "" Then If LCase(fnm$) Like "*ftp*.lnk" Or LCase(fnm$) Like "*net*.lnk" Or _
                                             LCase(fnm$) Like "*|fffd||fffd||fffd||fffd|*.lnk" Or LCase(fnm$) Like "*lan*.lnk" Then ftp_lnk$ = fnm$
        'Case "txt", "sql", "nt": '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      End Select: If work_lnk$ <> "" And ftp_lnk$ <> "" Then GoTo nextL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Next fi
nextL: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    dispGetTaskListIf 'If work_lnk$ & ftp_lnk$ <> "" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|
    With Workbooks("MAIN.XLSB").Sheets("Dispetcher_"): While sag(hWnd&, .Cells(inc(i%), 2)) > 0
                            If Left(.Cells(i%, 3), 2) = PF.c_Set & "#" Then dispDestroyWindow hWnd&
    Wend: End With: 'End If
    '.ReleaseW .GetTBhwnd&(4): .ReleaseW .GetTBhwnd&(3)
'ftp_lnk
    If ftp_lnk$ <> "" Then '3
        t_ext$ = prsAfterLast(".", ftp_lnk$)
        t_shell$ = LoadParam(t_ext$, ThisWorkbook.path & "\Logs\" & "fileshells.xml")
        'db_ t_shell$ & " """ & ftp_lnk$ & """": db_ "cmd /C """ & ftp_lnk$ & """"
        If t_shell$ <> "" Then l& = Shell(t_shell$ & " """ & ftp_lnk$ & """", vbNormalFocus) _
                          Else: Shell "cmd /C """ & ftp_lnk$ & """", vbMinimizedFocus: GoTo next2L '|fffd||fffd| |fffd||fffd||fffd||fffd| appID
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        i% = 3: title_begining = "ssn_": GoSub Collector
    End If: SCSForm.ReleaseW SCSForm.GetTBhwnd&(4)
'work_lnk
next2L: If work_lnk$ <> "" Then '3 |fffd||fffd||fffd| 4
            t_ext$ = prsAfter|fffd|(prsCount(".", work_lnk$), ".", work_lnk$)
            t_shell$ = LoadParam(t_ext$, ThisWorkbook.path & "\Logs\" & "fileshells.xml")
            'db_ t_shell$ & " """ & work_lnk$ & """": db_ "cmd /C """ & work_lnk$ & """"
            'l& = Shell(t_shell$ & " """ & PDBFolderPath$ & "\" & work_lnk$ & """", vbNormalFocus)
            If t_shell$ <> "" Then l& = Shell(t_shell$ & " """ & work_lnk$ & """", vbNormalFocus) _
                              Else: Shell "cmd /C """ & work_lnk$ & """", vbMinimizedFocus: db_ "nppL": GoTo nppL     '|fffd||fffd| |fffd||fffd||fffd||fffd| appID
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            i% = 4: dodelay 1: GoSub Collector: End If 'i% = IIf(ftp_lnk$ <> "", 4, 3):
nppL: End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| n++
    For fi = 1 To .FoundFiles.Count: fnm$ = .FoundFiles(fi): 'fnm$ = prsAfter|fffd|(prscount("\", fnm$), "\", fnm$)
                                     t_ext$ = prsAfterLast(".", Replace(Replace(fnm$, " - |fffd||fffd||fffd||fffd||fffd|", ""), ".lnk", "_lnk")) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VS ssn
      Select Case t_ext$
        Case "txt", "sql", "nt", "ssn": 'n++69_1: [src_title] - |fffd||fffd||fffd||fffd| n++ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If lT& = 0 Then t_shell$ = LoadParam(t_ext$, ThisWorkbook.path & "\Logs\" & "fileshells.xml"): _
                          lT& = Shell(t_shell$ & " """ & fnm$ & """", vbNormalFocus): t_shell$ = Replace(t_shell$, " -multiInst", "") _
                     Else: Shell t_shell$ & " """ & fnm$ & """", vbMinimizedFocus        '|fffd||fffd||fffd| -multiInst |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Notepad++
          'lT& = Shell(t_shell$ & " """ & fnm$ & """", vbNormalFocus): 'db_ GetWinHandle(lT&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
          'If hasIt(" -multiInst", t_shell$) Then i% = 1: title_begining = "n++": GoSub Collector '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "txt_lnk", "sql_lnk": Shell "C:\Windows\Explorer.EXE" & " """ & fnm$ & """", vbNormalFocus: lT& = -1
      End Select
    Next fi
    If lT& <> 0 Then i% = 1: title_begining = "n++": l& = lT&: GoSub Collector '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| n++
End With: FindForm.resetParker: dispGetTaskListIf: db_ "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & hWnd& & "(" & GetForegroundWindow& & ")"
Call SCSForm.HideAllFree: GoTo exitL
Collector: With SCSForm: hWnd& = 0: .ReleaseW .GetTBhwnd&(i%): If title_begining = "" Then title_begining = "ssn_" 'Default
'da_ title_begining = "n++"
          If isFullPartOf(title_begining, "ssn_|n++", "|") Then l& = 0: 'db_ title_begining & i% & ":" & hwnd& & ":" & getWndCaption$(hwnd&)
          If l& > 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: n++, explorer
            started = Timer: Do: dodelay 0.1: If Timer - started >= wait_time Then Exit Do '|fffd||fffd||fffd||fffd| |fffd||fffd| 5-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.
                                       hWnd& = GetWinHandle(l&): wcaption$ = getWndCaption$(hWnd&): 'db_ l& & ":" & hwnd& & ":" & wCaption$
            Loop While hWnd& = 0 Or (wcaption$ = "GDI+ Window" Or wcaption$ = "DDE Server Window" Or _
                        Trim(Replace(wcaption$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "")) = "") '= "|fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd| |fffd| "" - |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Shell)
            db_ "l& > 0(" & hWnd& = 0 & "):" & (wcaption$ = "GDI+ Window" & ":" & wcaption$ = "DDE Server Window" & ":" & _
                        Trim(Replace(wcaption$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "")) = "")
          End If
          Rem INWORK .pdf - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) 'GetForegroundWindow - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'GetActiveWindow |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If l& = 0 Or Timer - started >= wait_time Then
                                                         Do: 'If Timer - started > 10 Then Exit Do
                                                         dodelay 0.1: hWnd& = GetTopParentH(GetForegroundWindow&())
                                                         Loop While (hWnd& = .t_hwnd Or .inCollection(hWnd&) <> 0 _
                                                                 Or getWndCaption$(hWnd&) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"): db_ Timer - started & "s": _
                                                                 started = Timer: db_ hWnd& & "(vs" & .t_hwnd & "):" & getWndCaption$(hWnd&) & "(col" & .inCollection(hWnd&) & ")"
                                                    Else: db_ "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": End If 'And Timer - started < 10:
          If hWnd& = SCSForm.t_hwnd Then hWnd& = 0 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
          db_ title_begining & i% & ":" & hWnd& & ":" & getWndCaption$(hWnd&)
          If hWnd& <> 0 Then 'ssn_69_1: [src_title] (4) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| --|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-> 4#[src_title]
            If .inCollection(hWnd&) = 0 Then
                'setWndCaption& hwnd&, title_begining & ID$ & ": " & getWndCaption(hwnd&) & " (" & PF.c_Set & ")": 'db_ hwnd& & ": " & getWndCaption(hwnd&)
                .CollectW hWnd&, i%, True: .focusMe: db_ hWnd& & "->(" & i% & ")" 'And Timer - started < wait_time
            Else: db_ "!|fffd||fffd||fffd||fffd||fffd||fffd|: " & hWnd& & "(" & GetForegroundWindow& & ")": End If: dodelay 0.3 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WndCaption
          Else: db_ "hwnd& = 0 " & "(" & GetForegroundWindow& & ")"
End If: End With: title_begining = "": Return:
exitL: For Each H In vitrage: hWnd& = H: cap$ = getWndCaption(hWnd&): If Mid(cap$, 2, 1) <> "#" Then _
        If Left(cap$, 1) <> "^" Then setWndCaption& hWnd&, PF.c_Set & "#" & getWndCaption(hWnd&) & "(" & id$ & ")" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
       Next: dispUpdateTL: db_ "------------------": flg_InWork = False: End Sub


Function create_folder_if_not_exists(fnm$) As Boolean:  Set fso = CreateObject("Scripting.FileSystemObject")
                                                        If Not fso.FolderExists(fnm$) Then fso.CreateFolder (fnm$) 'Create if not Exists
                                                           Set fso = Nothing: End Function

Sub pdb_open_folder(): s$ = Application.caller: fnm$ = ThisWorkbook.path & "\PDB\" & s$
                       Call create_folder_if_not_exists(fnm$): Shell "cmd /C explorer """ & fnm$ & """", vbHide: End Sub

'https://support.microsoft.com/en-us/kb/242308
Public Sub testmacro(): Dim l&, hWnd&, busyParkFlg As Boolean: s$ = Application.caller
                           'l& = Shell("C:\Windows\system32\mspaint.exe ""C:\Users\pavel.samusev\Documents\tmp.bmp""") ',vbNormalFocus
For Each Pic In ActiveSheet.Shapes: Pic.Visible = False: Next: 'MsgBox s$ 'Len(t_ext$) <> 3 Then
If Len(s$) = 30 Then cmt$ = Cells(ActiveCell.row, 1).Comment.Text: s$ = s$ & prsBeforeUp(Chr(10), prsAfter(s$, cmt$))
def_txt$ = FnGetTxtFromID$(ActiveSheet.Cells(ActiveCell.row, 1), 3, defcol): httpFlg = s$ Like "http*" Or s$ Like "file:*" 'hasIt("http", s$) Or hasIt("file:", s$)
If httpFlg Then
                SCSForm.OpenHTTP Trim(prsBeforeUp(" ", s$)), Cells(ActiveCell.row, 3), True
Else: t_ext$ = prsAfter|fffd|(prsCount(".", s$), ".", s$)
      hWnd& = FindWindow_like&(s$): If hWnd& > 0 Then SCSForm.restoreW hWnd&: SetForegroundWindow hWnd&: GoTo passL
      fnm$ = ThisWorkbook.path & "\PDB\" & Cells(ActiveCell.row, 1) & "\" & s$ 'n352pid$(prsBefore("\", s$)) & "\" & prsAfter("\", s$)
      t_shell$ = LoadParam(t_ext$, ThisWorkbook.path & "\Logs\" & "fileshells.xml")
      Dim started& 'MsgBox t_shell$: Exit Sub
      Rem: |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Notepad++ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Park-|fffd||fffd||fffd||fffd|
      If t_shell$ Like "*notepad++*" Then If getWndCaption(SCSForm.GetTBhwnd(FindForm.nxt_pos)) Like "*Notepad++*" _
                                     Then t_shell$ = Replace(t_shell$, " -multiInst", "") '|fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If t_shell$ <> "" Then l& = Shell(t_shell$ & " """ & fnm$ & """", vbNormalFocus) _
                        Else: Shell "cmd /C """ & fnm$ & """", vbHide: GoTo passL '|fffd||fffd| |fffd||fffd||fffd||fffd| appID
      Rem: preParking(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      If IsWindow(SCSForm.GetTBhwnd&(FindForm.nxt_pos)) = 1 Then ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                                              busyParkFlg = True '          (|fffd||fffd||fffd| Else - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      Else: started = Timer: Do: dodelay 0.1: '|fffd||fffd||fffd||fffd| |fffd||fffd| 5-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.
            hWnd& = GetWinHandle(l&): wcaption$ = getWndCaption$(hWnd&): 'LM hWnd& & " : " & wCaption$
        Loop While (wcaption$ = "GDI+ Window" Or Trim(wcaption$) = "" Or wcaption$ = "DDE Server Window") And Timer - started < 1 '5
        Rem INWORK .pdf - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Timer - started >= 1 Then Do: hWnd& = GetForegroundWindow&: _
                                     Loop While GetTopParentH(hWnd&) = SCSForm.t_hwnd: started = Timer ': LM hWnd&
End If: End If
passL: On Error Resume Next: For Each Pic In ActiveSheet.Shapes: Pic.Visible = True: Next Pic
                             For i = 1 To 3: Cells(ActiveCell.row, i).Comment.Visible = False: Next i
       With SCSForm: If hWnd& = 0 Then Exit Sub
           If Timer - started < 1 Then If Not busyParkFlg Then .CollectW4 hWnd& Else .ShowWindow4 hWnd& 'noCollect
                                                               .focusMe: End With: End Sub

Function GetFileIcoFromName$(fnm$): fnm2ext$ = Replace(Replace(fnm$, " - |fffd||fffd||fffd||fffd||fffd|", ""), ".lnk", "_lnk"): With Workbooks("MAIN.XLSB"):
    t_ext$ = Replace(prsAfterLast$(".", Replace(Replace(fnm2ext$, "\", "."), " - ", ".")), "bmp", "dib"): 'db_ fnm2ext$ & " = " & t_ext$ 'workdir = work dir = work-dir (|fffd||fffd| |fffd||fffd| _(lnk))
    If t_ext$ = "ico" Then ifnm$ = fnm$ Else ifnm$ = .path & "\icons\f_ext\" & Replace(Replace(t_ext$, "-", ""), " ", "") & ".dib"
   Set fso = CreateObject("Scripting.FileSystemObject"): If fso.FileExists(ifnm$) Then _
         GetFileIcoFromName$ = ifnm$ Else GetFileIcoFromName$ = .path & "\icons\MSN.ICO"
                                                                                                       End With: End Function
'http://www.mrexcel.com/forum/excel-questions/474657-copy-paste-edit-pictures-visual-basic-applications.html
Sub termActivationOn(): ls ">", "termActivationOn" 'On Error GoTo exitL: sID$ = Cells(ActiveCell.row, 1).Comment.Text: On Error GoTo 0: pid$ = n352pid$(sID$)
                        For Each Pic In ActiveSheet.Shapes: If Pic.Top = ActiveCell.Top Then Exit Sub '|fffd||fffd||fffd||fffd| deActivation
              Next Pic: pid$ = Cells(ActiveCell.row, 1): If pid$ = "" Then Exit Sub Else sid$ = pid$: Call unLockWs 'MsgBox ThisWorkbook.path & "\PDB\" & pid$ & "\": GoTo exitL:
def_txt$ = FnGetTxtFromID$(ActiveSheet.Cells(ActiveCell.row, 1), 3, defcol): httpFlg = hasIt("http", def_txt) Or hasIt("file:", def_txt)
Dim ph As Picture: Set fso = CreateObject("Scripting.FileSystemObject"): FolderPath = ThisWorkbook.path & "\PDB\" & pid$
If Not fso.FolderExists(FolderPath) Then ifnm = "\icons\hot\fs2.ico" Else ifnm = "\icons\hot\Dispetcher.ico"
With Cells(ActiveCell.row, 4): Set ph = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(.Item(1), ThisWorkbook.path & ifnm, True, True, True, 12, 12)
 db_ Cells(ActiveCell.row, 1): If Not ph Is Nothing Then ph.OnAction = "MAC.XLA!pdb_open_folder": ph.name = pid$
                               If ifnm = "\icons\hot\fs2.ico" Then If Not httpFlg Then Set fso = Nothing: .value = "    " & .value: _
                                                                                       UpdateDefinitionFormatting Cells(ActiveCell.row, 4): GoTo exitL _
                                                                                  Else: GoTo httpL
End With: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim fi%, fs As New FileSearch 'Set fs = New FileSearch
With fs
.NewSearch
.LookIn = FolderPath '& "\" '\\ - !
.FileName = "*"
If .Execute > 0 Then
  Dim c_list$, maxLen%
  For fi = 1 To .FoundFiles.Count
    fnm$ = .FoundFiles(fi)
    'MsgBox Round(fso.GetFile(fnm$).Size / 1000):
    ifnm = GetFileIcoFromName$(fnm$)
    'MsgBox .FoundFiles(fi): Exit Sub
    With ActiveSheet.Cells(ActiveCell.row, 4): empt_fl = Len(Trim(.value)) = 0
    Set ph = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(.Item(1), ifnm, True, True, True, 12, 12)
    If Not ph Is Nothing Then On Error Resume Next: fsz% = Round(fso.GetFile(fnm$).Size / 1000): On Error GoTo 0: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| GetFile
                              fnm$ = prsAfter|fffd|(prsCount("\", fnm$), "\", fnm$): c_itm = fnm$ & IIf(Len(fnm$) < 30, " - " & fsz% & "K", ""):
                              ph.OnAction = "MAC.XLA!testmacro": ph.name = fnm$: c_list = c_list & c_itm & Chr(10): maxLen% = Max(maxLen, Len(c_itm)): _
                              If fi = 1 Then If Not empt_fl Then .value = Chr(10) & .value: UpdateDefinitionFormatting Cells(ActiveCell.row, 4)
  End With: Next fi
Else: If fso.getFolder(FolderPath).SubFolders.Count = 0 Then _
         fso.DeleteFolder (FolderPath) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If:
httpL: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| http-file "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  If httpFlg Then
    For i% = 1 To prsCount("http", def_txt)
      addrStr$ = Replace("http" & prsAfter|fffd|(i, "http", def_txt), Chr(13), Chr(10))
      addrStr$ = prsBeforeUp(Chr(10), addrStr): 'addrStr$ = Trim(prsBeforeUp("--", addrStr)) 'comment |fffd||fffd||fffd| " " - |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      If addrStr$ <> "" Then
         addrStr$ = Trim(Replace(addrStr$, "localhost", "127.0.0.1"))
         With ActiveSheet.Cells(ActiveCell.row, 4): empt_fl = Len(Trim(.value)) = 0
         Set ph = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(.Item(1), ThisWorkbook.path & "\icons\new_one.ico", True, True, True, 12, 12)
         If Not ph Is Nothing Then
                              ph.OnAction = "MAC.XLA!testmacro": ph.name = Left(addrStr$, 100): c_list = c_list & addrStr$ & Chr(10): maxLen% = Max(maxLen, Len(addrStr$))
                If fi% = 0 And i = 1 Then If Not empt_fl Then .value = Chr(10) & .value: UpdateDefinitionFormatting Cells(ActiveCell.row, 4)
      End If: End With: End If
    Next i
    For i = 1 To prsCount("file:", def_txt)
    Next i
  End If
  Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  i% = 0: For Each Pic In ActiveSheet.Shapes: 'Selection.ShapeRange.Item(1)
        If Pic.Top = ActiveCell.Top Then Pic.Left = ActiveSheet.Cells(ActiveCell.row, 4).Left + 14 * (inc(i%) - 1)
             'ActiveSheet.Hyperlinks.Add Anchor:=pic, Address:="C:\Users\pavel.samusev\Documents\tmp.bmp"
         'ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:="C:\Users\pavel.samusev\Documents\tmp.bmp"
         'pic.OnAction = "MACtestmacro"
  Next Pic:  'pic.name - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 30 |fffd||fffd||fffd||fffd|.
If c_list <> "" Then 'MsgBox Columns(3).Width & " ^ " & maxLen% * 5
  SetComment ActiveCell, Left(c_list, Len(c_list) - 1), 1, maxLen%, False
End If 'Set pic = Nothing:
        Set ph = Nothing: Set fs = Nothing: Set fso = Nothing
exitL: End With: LockWs: ls "<", "termActivationOn": End Sub

Sub termActivationOff(c As Object): On Error GoTo errL: 'If c.Column <> defcol Then Exit Sub
With c.Worksheet: Call unLockWs(.Index): With .Cells(c.row, defcol):
If Left(.value, 1) = Chr(10) Then c_val$ = Right(.value, Len(.value) - 1) Else c_val$ = LTrim(.value)
                                 .value = iif_(Left(c_val, 1) = "=", "'") & c_val$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
retryL: For Each Pic In c.Worksheet.Pictures: Pic.Delete: GoTo retryL 'If pic.Top = .Top Then
Next: End With: DelComment c, 1: UpdateDefinitionFormatting c.Worksheet.Cells(c.row, defcol): Call LockWs(.Index): End With
errL: End Sub 'err |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|


Sub tempfds()
'MsgBox REPLICATE("1", "0", 5)
'MsgBox n35$("abac1", True)
pid$ = "15.12.1409_1" 'get_new_pid & "_1"
MsgBox pid & " = " & pid2n35$(pid) & " = " & n352pid$(pid2n35$(pid))
End Sub

Function pid2n35$(pid$): pid2n35$ = n35$(Replace(prsBefore("_", pid), ".", "")) & "" & prsAfter("_", pid): End Function
Function n352pid$(pid$): T$ = n35$(Left(pid$, 4), True): n352pid$ = Mid(T$, 1, 2) & "." & Mid(T$, 3, 2) & "." & Mid(T$, 5, 4) & "_" & Int(Mid(pid$, 5, 9)): End Function
Function get_new_pid$(): dt = Now: get_new_pid$ = Right(Year(dt), 2) & "." & replicate(Month(dt), "0", 2) & "." & Day(dt) & Hour(dt)
End Function



Attribute VB_Name = "PF"
Attribute VB_Base = "0{1AA7331A-4AF1-418E-AF8A-5DC7BB2DF8F8}{AF179F40-E0CA-48FA-8FF1-19D7CE9DCB53}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'common Progress Form
'is needed by some Common Forms & Common Tools/Modules/functions.
Public c_Set%, cMode$, me_hwnd&, transFlg As Boolean  '|fffd||fffd|. setMode


Private Sub ComboBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Select Case KeyCode: Case 13: Image13_Click: Case 27: Image14_Click: End Select: End Sub

Private Sub FrameT_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger) ' ActiveControl
db_ 1
End Sub

Private Sub FrameP_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger) ' ActiveControl
db_ 2
End Sub

Private Sub Image11_Click(): UA: setMode "DSsE": End Sub

Public Sub SetTextFieldVisible(vis As Boolean): ComboBox1.Visible = vis: Image13.Visible = vis: Image14.Visible = vis: reSize:
If ActiveSheet.name = "Dispetcher_" Then ComboBox1.Text = Replace(Cells(ActiveCell.row, 3), ">> ", "")
End Sub

Private Sub Image13_Click(): UA: If ActiveSheet.name <> "Dispetcher_" Then Exit Sub Else unLockWs: currWnd& = Cells(ActiveCell.row, 2)
Cells(ActiveCell.row, 3) = IIf(Trim(ComboBox1.Text) = "", "'" & getWndCaption$(currWnd&), ">> " & ComboBox1.Text)
                                                                                Call LockWs: SetTextFieldVisible False: End Sub
Private Sub Image14_Click(): UA: If ActiveSheet.name = "Dispetcher_" Then SetTextFieldVisible False
End Sub

'***********
' myToolbar
'***********
Rem: Find
Private Sub TImg1_Click(): UA: Ctrl_F: 'If FindForm.cMode = "DS" Then Sheets("Dispetcher_").Activate: setModeActual: Exit Sub
        LM "TImg1_Click out": End Sub
Private Sub TImg1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then Sheets(WS0).Activate: Cells(2, 1).Select
                                                                        End Sub

Rem: "|fffd| - Debugger"
Private Sub Image15_Click(): UA: hWnd& = FindWindow(vbNullString, "|fffd| - Debugger")
Select Case Image15.SpecialEffect
    Case 0: Image15.SpecialEffect = 3:
            If AppD Is Nothing Or hWnd& = 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  If hWnd& > 0 Then Set AppD = Nothing: Call SendMessage(hWnd&, WM_CLOSE, 0, 0) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  hWnd& = Debugger_Show: SaveParam "TBsavedhwnd" & PF.c_Set & "2", SCSForm.GetTBhwnd(2), 2: SCSForm.CollectW hWnd&, 2: AppD.Visible = True: logging = True
            Else: ShowWindow& hWnd&, SW_SHOW&: End If
 Case Else: 'Image15.SpecialEffect = 0: logging = False: Set AppD = Nothing: 'On Error Resume Next
'            TBhwnd2save$ = LoadParam("TBhwnd2save"): PF_cSet% = CInt(prsbefore("|", TBhwnd2save$)): TBhwnd2& = CLng(prsAfter("|", TBhwnd2save$))
'            If IsWindow(TBhwnd2&) Then If PF_cSet% = PF.c_Set Then SCSForm.CollectW TBhwnd2&, 2 Else With PF.Controls("ImageWS" & PF_cSet% - 1): _
'               SCSForm.reSetUncollected TBhwnd2&: .Tag = Replace(.Tag, "|" & hWnd& & "|", "|" & TBhwnd2& & "|"): SaveParam "PF_Set" & PF_cSet%, .Tag: End With '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            dispDestroyWindow hWnd&, True
End Select: End Sub

Rem: CurrentCat
Private Sub Image16_Click(): UA: If Not fnObjExists("CATForm") Then MakeCATForm Else vis = Image16.SpecialEffect = 3
                             On Error Resume Next: If vis Then Unload CATForm: GoTo exitL Else currentCat = ""
  With CATForm: .show (Modalless): .Controls(prsBefore("|", Image16.tag)).value = True: End With 'MsgBox prsBefore("|", Image16.Tag)
exitL: Image16.SpecialEffect = IIf(vis, 0, 3):  End Sub

Public Function Ready4Cat() As Boolean: Ready4Cat = Image16.SpecialEffect = 3: End Function
Public Sub setCatImage(catC$): On Error Resume Next
If catC$ = "" Then Set Image16.Picture = LoadPicture(ThisWorkbook.path & "\icons\" & "MSN" & ".ico") _
              Else If dir(ThisWorkbook.path & "\icons\" & catC$ & ".ico") <> "" _
                    Then Set Image16.Picture = FitToSizeBitmap(LoadPicture(ThisWorkbook.path & "\icons\" & catC$ & ".ico"), 16, 16) _
                    Else Set Image16.Picture = FitToSizeBitmap(LoadPicture(ThisWorkbook.path & "\icons\blank.ico"), 16, 16)  'Nothing  'IIf(FindForm.bk_color_is_black, "All_cats_b", "All_cats")
 End Sub
Public Sub setCurrentCat(catC$, catT$): Image16.SpecialEffect = 0: Unload CATForm: setCatImage catC$ 'catC$ - "Script"; catT$ - "CheckBox7|1_5_1"
                                        Image16.ControlTipText = catC$: Image16.tag = catT$: reCatWithPF catT$: Unload CATForm
                        SaveParam "catT$", IIf(catT$ = "", " ", catT$): If ActiveSheet.name = WSD Then Sheets(WS0).Activate: Cells(2, 1).Select:
                        If FnFormIsVisible("FindForm") Then If FindForm.cMode <> "DS" Then FindForm.FindResultCleaning 'visible |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

'Private Sub ImageWS0_Click(): ImageWSClicks 0: End Sub
Private Sub ImageWS0_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonLeft Then ImageWSClicks 0, , Shift% = 2 Else _
If Button = fmButtonRight Then If cMode$ = "DS" Then setMode "Ws": ImageWSClicks 0 Else SCSForm.processSCSFormKeyDown 96, Shift%
End Sub 'forsed "Ws#"|Vitrage#
'Private Sub ImageWS1_Click(): ImageWSClicks 1: End Sub
Private Sub ImageWS1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonLeft Then ImageWSClicks 1, , Shift% = 2 Else _
If Button = fmButtonRight Then If cMode$ = "DS" Then setMode "Ws": ImageWSClicks 1 Else SCSForm.processSCSFormKeyDown 97, Shift%
End Sub 'forsed "Ws#"|Vitrage#
'Private Sub ImageWS2_Click(): ImageWSClicks 2: End Sub
Private Sub ImageWS2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonLeft Then ImageWSClicks 2, , Shift% = 2 Else _
If Button = fmButtonRight Then If cMode$ = "DS" Then setMode "Ws": ImageWSClicks 2 Else SCSForm.processSCSFormKeyDown 98, Shift%
End Sub 'forsed "Ws#"|Vitrage#
'Private Sub ImageWS3_Click(): ImageWSClicks 3: End Sub
Private Sub ImageWS3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonLeft Then ImageWSClicks 3, , Shift% = 2 Else _
If Button = fmButtonRight Then If cMode$ = "DS" Then setMode "Ws": ImageWSClicks 3 Else SCSForm.processSCSFormKeyDown 99, Shift%
End Sub 'forsed "Ws#"|Vitrage#
Private Sub ImageWS4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
If Button = fmButtonRight Then setMode IIf(cMode$ = "Ws", "WsE", "Ws")
End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DblClick
Private Sub ImageWS4_Click(): ImageWSClicks 4: End Sub
Private Sub ImageWS5_Click(): ImageWSClicks 5: End Sub
Private Sub ImageWS6_Click(): ImageWSClicks 6: End Sub
Private Sub ImageWS7_Click(): ImageWSClicks 7: End Sub
Private Sub ImageWS8_Click(): ImageWSClicks 8: End Sub
Private Sub ImageWS9_Click(): ImageWSClicks 9: End Sub
Private Sub ImageWS0_DblClick(ByVal Cancel As MSForms.ReturnBoolean): ImageWSClicks 0, True: End Sub
Private Sub ImageWS1_DblClick(ByVal Cancel As MSForms.ReturnBoolean): ImageWSClicks 1, True: End Sub
Private Sub ImageWS2_DblClick(ByVal Cancel As MSForms.ReturnBoolean): ImageWSClicks 2, True: End Sub
Private Sub ImageWS3_DblClick(ByVal Cancel As MSForms.ReturnBoolean): ImageWSClicks 3, True: End Sub
Private Sub ImageWS4_DblClick(ByVal Cancel As MSForms.ReturnBoolean): ImageWSClicks 4, True: End Sub

Public Sub ImageWSClicks(i%, Optional dbl As Boolean, Optional noCleanF As Boolean): ls ">", "PF_ImageWSClicks", i%, dbl
If cMode$ = "DS" Then If i% + 1 = c_Set Then If Not dbl Then SCSForm.focusMe: Exit Sub
Call ImageWSsetSpecialEffect(i%): vitrage_Clear
Select Case cMode$:
       Case "DS": fNoSupfor: If dbl Then setMode "DSs": Exit Sub Else FindForm.set_def_color i% + 1: Dim l_Set%: l_Set = c_Set  'last|current|new
                  If l_Set > 0 Then
                  With Controls("ImageWS" & l_Set - 1): .tag = "|": .ControlTipText = "|": Dim n_Set%: n_Set = i% + 1: c_Set = n_Set
                                                    For j% = 1 To 5: hWnd& = SCSForm.GetTBhwnd(j%): If j% = 5 Then .tag = .tag & hWnd& & "|" Else _
                                                                      .tag = .tag & IIf(FindForm.Controls("ImageW" & j%).SpecialEffect = 6, "x", hWnd&) & "|"
                                                    'LM j% & " ^ " & FindForm.Controls("ImageW" & j%).SpecialEffect & " ^ " & .Tag 'x - locked
                                                      .ControlTipText = .ControlTipText & prsBeforeUp(" ", Replace(Replace(getWndCaption$(hWnd&), "\", " "), ".", " ")) & "|":
                                                      If Not (isFullPartOf(CStr(hWnd&), Controls("ImageWS" & n_Set - 1).tag, "|") Or SCSForm.matrix And hWnd& = SCSForm.http_hwnd) _
                                                         Then If Mid(getWndCaption(hWnd&), 2, 1) = "#" _
                                                                           Then SCSForm.setWindowVisible hWnd&, False Else _
                                                              If DDM.useTB Then SCSForm.minimizeW hWnd&: setNoHeadersH hWnd&, True: SCSForm.unFreeze hWnd&, Not isCusTranS(hWnd&) _
                                                                           Else SCSForm.cornerIt hWnd&, True, False 'SCSForm.matrix And hwnd& = SCSForm.http_hwnd
                                                      SCSForm.SetTBhwnd j%, 0: dispMarkUp_hWnd hWnd&: Next j% 'saving 'SaveSetting 6, 1, .Tag - |fffd| |fffd||fffd||fffd||fffd||fffd| (unrestoreable)
                                                    SaveParam "PF_lSet", l_Set: SaveParam "PF_Set" & l_Set, .tag & CInt(SCSForm.Y_split) & "|": End With: End If: FindForm.clearParker True 'for cool restoring
                  With Controls("ImageWS" & n_Set - 1): dispUpdateTL True, True '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                                                    If Replace(Replace(.tag, "x", ""), "0", "") = "||||||" Then '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                                                       For r& = 1 To Sheets("Dispetcher_").UsedRange.rows.Count: If Sheets("Dispetcher_").Cells(r&, 2) = "" Or Not hasIt("|0|", .tag) Then Exit For
                                                         If sag(captxt, Sheets("Dispetcher_").Cells(r&, 3)) <> "|fffd| - Debugger" And Not captxt Like "Visual Basic*" Then _
                                                           hWnd& = Sheets("Dispetcher_").Cells(r&, 2): If IsIconic(hWnd&) = 0 And IsWindowVisible(hWnd&) > 0 Then _
                                                                                    .tag = prsBefore("|0|", .tag) & "|" & hWnd& & "|" & prsAfter("|0|", .tag)
                                                       Next r: End If 'db_ .tag:
'                                                      Do: hwnd& = GetForegroundWindow&:  If hasIt("|" & hwnd& & "|", .tag) Then Exit Do Else If hwnd& = GetTopParentH(hwnd&) Then _
'                                                          If dispValidCaption(hwnd&) Then SCSForm.minimizeW hwnd&: .tag = prsBefore("|0|", .tag) & "|" & hwnd& & "|" & prsAfter("|0|", .tag)
'                                                      Loop While hasIt("|0|", .tag): End If 'db_ inc(cnt%):
                                                    If Not noCleanF Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                                                 With Sheets("Dispetcher_"): For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For
                                                    hWnd& = .Cells(r&, 2): With SCSForm:                                                  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Chess, Jot, DDBar)
                                                          If .inCollection%(hWnd&) = 0 Then If Mid(sag(cap$, getWndCaption(hWnd&)), 2, 1) <> "#" Then If IsWindowVisible(hWnd&) > 0 Then _
                                                          If Not cap$ Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*" Then If Not (Not settingsForm.CheckBox15 And isVb(hWnd&) Or _
                                                                                                             Not settingsForm.CheckBox16 And cap$ = "|fffd| - Debugger") Then .cornerIt hWnd&, True, False
                                                        End With: Next: End With: End If: vitrage_Clear
                                                    For j% = 1 To 5: s$ = prsBetween|fffd|(j%, "|", "|", .tag): If s$ = "x" Then FindForm.Controls("ImageW" & j%).SpecialEffect = 6: hWnd& = "0" _
                                                                                                                       Else hWnd& = IIf(SCSForm.matrix And j% = 1, 0, CLng(IIf(s$ = "", "0", s$)))
                                                    SCSForm.freeze hWnd&: SCSForm.setNoHeadersHif hWnd&, j% 'If DDM.useTB Then - |fffd||fffd||fffd||fffd||fffd| cornerIt - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                    SCSForm.restoreW hWnd&: SCSForm.SetTBhwnd j%, hWnd&: dispMarkUp_hWnd hWnd&: Next j%: End With 'loading
                                                    With SCSForm: If .d_http_hwnd > 0 Then SCSForm.Y_split = CBool(prsBetween|fffd|(6, "|", "|", LoadParam("PF_Set" & n_Set)))
                                                             'SaveSetting 6, 5, n_Set - "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" - |fffd| |fffd||fffd||fffd||fffd||fffd| (changed for cool restoring)
                                                    End With: SaveParam "PF_cSet", n_Set: SCSForm.saveTargetPos: SCSForm.Matrix_upd 'anti-cross
                  FindForm.setDefLock: FindForm.resetParker: SCSForm.UserForm_Layout 'SCSForm.reParkW True - X |fffd| isDoppel
                  If Not SCSForm.LParked Then dispSort: iMapSets l_Set, n_Set, False ': SCSForm.AllShowWindow SW_RESTORE
                  LockWs Sheets("Dispetcher_").Index: fSup
       Case "DSs", "DSsE": setMode "DS"
       Case "Ws", "WsE": If dbl Then If i% = 4 Then setMode IIf(cMode$ = "Ws", "WsE", "Ws"): L0M "PF_ImageWSClicks (Exit3)": Exit Sub
                         With Sheets(Index(i%)): LP 471: .Visible = True: LP 472: flg_InWork = True: .Activate: flg_InWork = False: End With 'SheetResize > MainWB.Sheets
End Select: If cMode$ = "DS" Then LP 481: SCSForm.focusMe Else LP 482: AppActivate Application.Caption 'setFocusOnForm Me.Caption:
ls "<", "PF_ImageWSClicks", i%, dbl: End Sub

Public Sub ImageWSsetSpecialEffect(onBtn%): For j% = 0 To 9:
            Controls("ImageWS" & j%).SpecialEffect = IIf(j% = onBtn%, IIf(j% < 5, 6, 1), 0): Next: End Sub

Private Sub UserForm_Initialize(): 'setNoHeadersC Me.caption$: iniMode: End Sub '!|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            l_Set = CInt(LoadParam("PF_lSet")): c_Set% = CInt(LoadParam("PF_cSet")): PF.iniMode: 'ImageWSClicks (c_Set% - 1) 'Loading (initial)
For i% = 1 To 4: cTag$ = LoadParam("PF_Set" & i%): If i% = c_Set% Then xn% = prsCount("|", prsBefore("x", cTag))
            If FnFormIsLoaded("FindForm") Then If xn% > 0 Then FindForm.Controls("ImageW" & xn%).SpecialEffect = 6
Rem InWork "|fffd||fffd||fffd||fffd||fffd| |fffd| " cTag |fffd||fffd||fffd||fffd||fffd||fffd| (Replace(cTag, "x", "0"))
            Image16.tag = LTrim(LoadParam("catT$")) 'CurrentCat << CheckBox3|1_2
            setCatImage subcat(prsAfter("|", Image16.tag)): reCatWithPF Image16.tag '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Rows().Insert (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| ReCat |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| id_col)
            PF.Controls("ImageWS" & i% - 1).tag = cTag 'LoadSetting(6, i%)
            PF.Controls("ImageWS" & i% - 1).ControlTipText = PF.Controls("ImageWS" & i% - 1).tag: Next:  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| restoring
me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False: freeze_me: transFlg = True: 'SetTopMostWindow& me_hwnd&, True:
End Sub

Private Sub freeze_me(Optional Undo As Boolean): If Undo Then SCSForm.unFreeze me_hwnd& Else SCSForm.freeze me_hwnd&, , 150:
End Sub

Private Sub UserForm_Terminate(): On Error Resume Next: With StatForm: If .Visible Then .FrameR.Repaint: .FrameR.TextBox1.SetFocus
                              End With: End Sub

Public Sub iniMode(): ls "~", "iniMode": setModeActual: c_Set = IIf(c_Set = 0, 2, c_Set)
        If cMode$ = "DS" Then ImageWSsetSpecialEffect c_Set - 1
        If FnFormIsLoaded("FindForm") Then FindForm.set_def_color c_Set: FindForm.resetParker
'c_Set = 2: For i% = 0 To 3:
'            Controls("ImageWS" & i%).Tag = LoadSetting(6, i% + 1): Next:  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End Sub

Public Sub setModeActual(): Image15.SpecialEffect = IIf(logging And Not AppD Is Nothing, 3, 0): _
                            setMode IIf(ActiveSheet.name = "Dispetcher_", "DS", IIf(ActiveSheet.Index < 6, "Ws", "WsE")): End Sub
Public Sub setMode(c_mode$): If c_mode$ = cMode$ Then Exit Sub Else l_mode$ = cMode$
With Me 'MODS:  "" - clear before p5,p10
        'DS   - Dispetcher's Sets (WS0-WS3)
        'DSs  - Dispetcher's Sets + Setup
        'DSsE - Dispetcher's Sets + Setup (Extended)
        'p5  - Progress bar for WS (WS0-WS4) - one actual show
        'p10 - Progress bar 10-th (Images 0-9) - 0-actual show
        'Ws  - WS browser (WS0-WS4)
        'WsE - WS browser (Extended)(WS0-WS9)
If Mid$(c_mode$, 1, 1) = "p" Then
                                   FrameP.tag = "": If cMode$ <> c_mode$ Then cMode$ = ""
                             ElseIf cMode$ = "p10" Then cMode$ = "" '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                             Else: cMode$ = c_mode$: End If
If cMode$ = "" Then For Each ctrl In Me.Controls: ctrl.Visible = (ctrl.name = "FrameP" Or ctrl.name = "FrameT" _
                                                                                Or ctrl.Parent.name = "FrameT" And Not SCSForm.isDoppel): _
                    Next: If c_mode$ = "" Then iniMode: Exit Sub Else cMode$ = c_mode$ 'all clean              ^ Doppel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Mid$(c_mode$, 1, 1) = "p" Then GoTo extL '-> ShowProgressBar
.ComboBox1.Visible = Mid$(cMode$, 1, 3) = "DSs"
.TextBox1.Visible = cMode$ = "DSsE"
'ImageWS
For i% = 0 To 9: With .Controls("ImageWS" & i%): .Visible = IIf(i% < 4, True, IIf(i% > 4, cMode$ = "WsE", _
                                                                              Mid$(cMode$, 1, 2) = "Ws")) '=4
If Mid$(c_mode$, 1, 2) = "Ws" Then If Mid$(l_mode$, 1, 2) <> "Ws" Then .ControlTipText = Sheets(i% + 1).name
End With: Next 'isFullPartOf(cMode$, "DS|DSs|DSsE|Ws|WsE", "|") = 'isFullPartOf(Mid$(cMode$, 1, 2), "DS|Ws", "|")
'Other Images
                   .Image11.Visible = cMode$ = "DSs"
For i% = 12 To 14: .Controls("Image" & i%).Visible = Mid$(cMode$, 1, 3) = "DSs": Next: End With
extL: ImageWSsetSpecialEffect IIf(c_mode$ = "DS", c_Set - 1, IIf(Mid$(cMode$, 1, 2) = "Ws", _
                                                               ActiveSheet.Index - 1, -1)): reSize: End Sub

Public Sub reSize(): If Not Visible Then Exit Sub Else Dim hrgn1&, hrgn2&:
    For Each ctrl In Me.Controls: With ctrl '|fffd||fffd||fffd||fffd||fffd|
    If .Visible Then If .name <> "FrameP" And .name <> "FrameT" Then _
      hrgn2& = CreateRectRgn(3 + (IIf(.Parent.name <> "PF", .Parent.Left + 1.5, 0) + .Left) / x75, _
                             3 + (IIf(.Parent.name <> "PF", .Parent.Top + 1.2, 0) + .Top) / x75, _
                             3 + (IIf(.Parent.name <> "PF", .Parent.Left + 1.5, 0) + .Left + .Width) / x75, _
                             3 + (IIf(.Parent.name <> "PF", .Parent.Top + 1.5, 0) + .Top + .Height) / x75): _
      If hrgn1& = 0 Then hrgn1& = hrgn2& Else Call CombineRgn(hrgn1&, hrgn1&, hrgn2&, 2)
    End With: Next
'    For Each ctrl In Me.FrameP.Controls: With ctrl '|fffd||fffd||fffd||fffd||fffd| P
'      If .Visible Then hrgn2& = CreateRectRgn(3 + (FrameP.Left + 1.5 + .Left) / x75, _
'                                              3 + (FrameP.Top + 1.2 + .Top) / x75, _
'                                              3 + (FrameP.Left + 1.5 + .Left + .Width) / x75, _
'                                              3 + (FrameP.Top + 1.5 + .Top + .Height) / x75): _
'      If hrgn1& = 0 Then hrgn1& = hrgn2& Else Call CombineRgn(hrgn1&, hrgn1&, hrgn2&, 2)
'    End With: Next:
'    For Each ctrl In Me.FrameT.Controls: With ctrl '|fffd||fffd||fffd||fffd||fffd| T
'      If .Visible Then hrgn2& = CreateRectRgn(3 + (FrameT.Left + 1.5 + .Left) / x75, _
'                                              3 + (FrameT.Top + 1.2 + .Top) / x75, _
'                                              3 + (FrameT.Left + 1.5 + .Left + .Width) / x75, _
'                                              3 + (FrameT.Top + 1.5 + .Top + .Height) / x75): _
'      If hrgn1& = 0 Then hrgn1& = hrgn2& Else Call CombineRgn(hrgn1&, hrgn1&, hrgn2&, 2)
'    End With: Next:
    If hrgn1& = 0 Then hrgn1& = CreateRectRgn(0, 0, 0, 0) '|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| rgn, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd|
    hWnd& = FindWindow(vbNullString, Me.Caption$): SetWindowRgn hWnd&, hrgn1&, True: FrameP.Repaint: End Sub
        
Public Sub reDraw(Optional justTop As Boolean): With Me: If Not .Visible Then Me.show vbModeless: reSize
                             .Top = SCSForm.Top - 58
                             '.Top = Application.Top + Application.Height - .FrameP.Top - _
                                     IIf(ActiveWindow.DisplayWorkbookTabs, 50, 38) 'to_float
                             .Left = IIf(justTop, .Left, Application.Left - 1): End With: End Sub
Public Sub reBackC(): With FindForm: TImg1.BackColor = IIf(.bk_color_is_black, &H80000006, .BackColor): End With: End Sub
Public Sub ShowTif(Optional rsn As Boolean): For Each ctrl In Me.FrameT.Controls: ctrl.Visible = rsn: Next: reSize: End Sub
Attribute VB_Name = "Parameters"
Public prmAutoLock As Boolean 'settingsForm.CheckBox10.value

Private fnm$
Sub ParamIni(): If fnm$ <> "" Or AC_flg Then Exit Sub 'Else On Error Resume Next
                   fnm$ = ThisWorkbook.path & "\Logs\" & "parameters.xml": prmAutoLock = settingsForm.CheckBox10.value
                   Jot_path$ = "D:\Program Files x86\SlickRun\sr.exe": useJot_prm = dir(Jot_path$) <> ""
            If Not useJot_prm Then Jot_path$ = "C:\Program Files\_PORTABLE\SlickRun\sr.exe": useJot_prm = dir(Jot_path$) <> ""
                   cmd_path$ = ThisWorkbook.path & "\cmd\": useCmd_prm = dir(cmd_path$, vbDirectory) <> ""
                   End Sub

Rem: Param
Function SaveParam(pname$, pValue As Variant, Optional from_place%, Optional upd = True) As Variant: Dim ss$, cs$
    If DDBarUsed Then If pname$ Like "TBsavedhwnd*" Then DDBar.AddItem CLng(pValue), upd, , from_place% '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Open fnm$ For Input As #1: 'If Trim(CStr(pValue)) = "" Then pValue = "|"
    While Not EOF(1): Line Input #1, cs$: ss$ = ss$ & IIf(ss$ = "", "", Chr(13)) & cs$: Wend: Close #1 'ss$ & IIf(ss$ = "", "", Chr(13)) & cs$
    ns$ = "<" & pname$ & "> " & pValue & " </" & pname$ & ">"
    If Not hasIt("<" & pname$ & "> ", ss$) Then ns$ = ss$ & Chr(13) & ns$ Else _
                                                cs$ = prsBetween("<" & pname$ & "> ", " </" & pname$ & ">", ss$): _
                                                cs$ = "<" & pname$ & "> " & cs$ & " </" & pname$ & ">": _
                                             If ns$ = cs$ Then GoTo exitL Else ns$ = Replace(ss$, cs$, ns$)
    Open fnm$ For Output As #2: Print #2, ns$: Close #2
exitL:                                          SaveParam = pValue: End Function

Function LoadParam(pname$, Optional fnm_$) As Variant: WSim: Dim cs$: Open blank(fnm_$, fnm$) For Input As #1
      Do While Not EOF(1): Line Input #1, cs$: If hasIt("<" & pname$ & "> ", cs$) Then Exit Do 'Else cs$ = ""
    Loop: LoadParam = prsBetween("<" & pname$ & "> ", " </" & pname$ & ">", cs$): Close #1: End Function

Sub testtt() 'service Replace
'Dim ss$, cs$: Open fnm$ For Input As #1
'  Do While Not EOF(1): Line Input #1, cs$: If hasit("<" & pname_from$ & "> ", cs$) Then Exit Do Else ss$ = ss$ & cs$: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Loop: Block_save$ = cs$                                                                        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'  Do While Not EOF(1): Line Input #1, cs$: Block_save$ = Block_save$ + cs$: If hasit(" </" & pname_to$ & ">", cs$) Then Exit Do
'Loop: ss$ = ss$ + Replace(Block_save$, Chr(10), Chr(13))                              '<<|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
''Do While Not EOF(1): Line Input #1, cs$: ss$ = ss$ + cs$: Loop                                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                                Close #1: Open fnm$ For Output As #2: Print #2, ss$: Close #2:

'MsgBox LoadParam("PF_Set1")
MsgBox LoadParamBlock$("PF_Set1", "PF_Set4", "PF_Set" & PF.c_Set%)
End Sub

Rem: Block
Function LoadParamBlock$(pname_from$, pname_to$, Optional except$): Dim ss$, cs$: Open fnm$ For Input As #1
  Do While Not EOF(1): Line Input #1, cs$: If hasIt("<" & pname_from$ & "> ", cs$) Then Exit Do 'Else MsgBox cs$
Loop: ss$ = cs$: 'MsgBox cs$
  Do While Not EOF(1): Line Input #1, cs$: ss$ = ss$ & cs$
                                           If hasIt(" </" & pname_to$ & ">", cs$) Then Exit Do
Loop: Close #1: If except$ <> "" Then ss$ = prsBefore("<" & except$ & ">", ss$) & prsAfter("</" & except$ & ">", ss$)
LoadParamBlock$ = ss$: End Function

Sub SaveParamBlock(pname_from$, pname_to$, Block_save$): Dim ss$, cs$: Open fnm$ For Input As #1
  Do While Not EOF(1): Line Input #1, cs$: If hasIt("<" & pname_from$ & "> ", cs$) Then Exit Do Else ss$ = ss$ & IIf(ss$ = "", "", Chr(13)) & cs$:
Loop: ss$ = ss$ + Chr(13) + Block_save$                                                        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Do While Not EOF(1): Line Input #1, cs$: If hasIt(" </" & pname_to$ & ">", cs$) Then Exit Do '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
Loop: Do While Not EOF(1): Line Input #1, cs$: ss$ = ss$ + Chr(13) + cs$: Loop                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                Close #1: Open fnm$ For Output As #2: Print #2, ss$: Close #2: End Sub
                                
Sub SaveParamBlockReplaceIn(pname_from$, pname_to$, old_value$, new_value$): Dim ss$, cs$: Open fnm$ For Input As #1
  Do While Not EOF(1): Line Input #1, cs$: If hasIt("<" & pname_from$ & "> ", cs$) Then Exit Do Else ss$ = ss$ & IIf(ss$ = "", "", Chr(13)) & cs$: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Loop: Block_save$ = cs$                                                                        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Do While Not EOF(1): Line Input #1, cs$: Block_save$ = Block_save$ + Chr(13) + cs$: If hasIt(" </" & pname_to$ & ">", cs$) Then Exit Do
Loop: ss$ = ss$ + Chr(13) + Replace(Block_save$, old_value$, new_value$)                       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Do While Not EOF(1): Line Input #1, cs$: ss$ = ss$ + Chr(13) + cs$: Loop                       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                Close #1: Open fnm$ For Output As #2: Print #2, ss$: Close #2: End Sub

Sub testParam():
'MsgBox LoadParam("testparam1")
SaveParam "testparam1", "test2"
's$ = "<testparam> test </testparam>"
'Open fnm$ For Output As #1: Print #1, s$: Close #1
End Sub

'*************************************************************
Rem: Settings (non-automatic configurations with settingsForm)
'*************************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function CheckSettings() As Boolean: With settingsForm:
         CheckSettings = .CBnavigator.value = CBool(LoadSetting(1, 1)) _
                      And .obAuto.value = CBool(LoadSetting(1, 2)) _
                      And .obManual.value = CBool(LoadSetting(1, 3)) _
                      And .CheckBox25.value = CBool(LoadSetting(1, 4)) _
                      And .CheckBox26.value = CBool(LoadSetting(1, 5)) _
                      And .CBactTerm2.value = CBool(LoadSetting(2, 1)) _
                      And .obUseLast.value = CBool(LoadSetting(2, 2)) _
                      And .obUseBuffer.value = CBool(LoadSetting(2, 3)) _
                      And .CheckBox21.value = CBool(LoadSetting(2, 4)) _
                      And .CheckBox22.value = CBool(LoadSetting(2, 5)) _
                      And .CheckBox23.value = CBool(LoadSetting(2, 6)) _
                      And .CheckBox24.value = CBool(LoadSetting(2, 7)) _
                      And .CheckBox10.value = CBool(LoadSetting(3, 1)) _
                      And .CheckBox14.value = CBool(LoadSetting(4, 1)) _
                      And .CheckBox15.value = CBool(LoadSetting(4, 2)) _
                      And .CheckBox16.value = CBool(LoadSetting(4, 3)) _
                      And .dDispShift = CInt(LoadSetting(4, 4)) _
                      And .cbUseDDisp = CBool(LoadSetting(4, 5)) _
                      And .CheckBox27.value = CBool(LoadSetting(6, 1)) _
                      And .cbxQuickTest.value = CBool(LoadSetting(7, 1)) _
                      And .CheckBox17.value = CBool(LoadSetting(9, 1)) _
                      And .CheckBox18.value = CBool(LoadSetting(9, 2)) _
                      And Triple2(.CheckBox19.value) = Triple2(decode(LoadSetting(9, 3), "True", True, "False", False, "", Null)) _
                      And .CheckBox20.value = CBool(LoadSetting(9, 4))
End With: End Function
Public Function Triple2(val) As Single: If IsNull(val) Then Triple2 = 1 Else Triple2 = CInt(val) 'True -1; False 0; Null 1 -> CBool(Null) = True
   End Function
Function LoadSetting(n%, l%): LoadSetting = ThisWorkbook.Sheets(1).Cells(n%, l%).value: End Function
     Sub SaveSetting(n%, l%, val):          ThisWorkbook.Sheets(1).Cells(n%, l%).value = val: End Sub
Sub LoadSettings(): With settingsForm:
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .CBnavigator.value = CBool(LoadSetting(1, 1))
            .obAuto.value = CBool(LoadSetting(1, 2))
            .obManual.value = CBool(LoadSetting(1, 3))
            .obAuto.Enabled = .CBnavigator.value
            .obManual.Enabled = .CBnavigator.value
            .CheckBox25.value = sag(c_useTimer, CBool(LoadSetting(1, 4))) 'c_useTimer
            .CheckBox26.value = sag(os10, CBool(LoadSetting(1, 5))) 'Win10
        '|fffd||fffd||fffd||fffd||fffd| - 2
            .CBactTerm2.value = CBool(LoadSetting(2, 1))
            .obUseLast.value = CBool(LoadSetting(2, 2))
            .obUseBuffer.value = CBool(LoadSetting(2, 3))
            .CheckBox21.value = sag(useFRAMES, CBool(LoadSetting(2, 4))) 'useFRAMES c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _Click
            .CheckBox22.value = sag(useDnD, CBool(LoadSetting(2, 5))) 'useDnD
            .CheckBox23.value = sag(useMETA, CBool(LoadSetting(2, 6))) 'useMETA
            .CheckBox24.value = sag(useMultiTree, CBool(LoadSetting(2, 7))) 'useMETA
        '|fffd||fffd||fffd||fffd||fffd||fffd| - 3
            .CheckBox10.value = CBool(LoadSetting(3, 1))
        'Resizing - 4
            .CheckBox14.value = CBool(LoadSetting(4, 1))
            .CheckBox15.value = CBool(LoadSetting(4, 2)) 'VBE      - (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            .CheckBox16.value = CBool(LoadSetting(4, 3)) 'Debugger - (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            .dDispShift = CInt(LoadSetting(4, 4)) 'DualDisplay Shift
            .cbUseDDisp = CBool(LoadSetting(4, 5)) 'UseDDisp
        Rem: 5 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| SCSForm (|fffd||fffd|. UserForm_Initialize)
            'SCSForm.hooking = CBool(LoadSetting(5, 1))
        Rem: 6 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1-4)
            .CheckBox27.value = sag(compRollUp, CBool(LoadSetting(6, 1))) 'compRollUp
        Rem: 7 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Status
            .cbxQuickTest.value = CBool(LoadSetting(7, 1))
        Rem: 8 - FindForm History - CBool(LoadSetting(8, 1))
        Rem: 9 - DDBar
            .CheckBox17.value = sag(SDGoldenTheme, CBool(LoadSetting(9, 1))) 'SDGoldenTheme
            .CheckBox18.value = CBool(LoadSetting(9, 2)) 'splitByType
            .CheckBox19.value = decode(LoadSetting(9, 3), "True", True, "False", False, "", Null) 'compactFrames
            .CheckBox20.value = CBool(LoadSetting(9, 4)) 'fullsizedImages
End With: End Sub

Sub SaveSettings(): With settingsForm:
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            SaveSetting 1, 1, .CBnavigator.value
            SaveSetting 1, 2, .obAuto.value
            SaveSetting 1, 3, .obManual.value
            SaveSetting 1, 4, .CheckBox25.value 'c_useTimer
            SaveSetting 1, 5, .CheckBox26.value 'Win10
        '|fffd||fffd||fffd||fffd||fffd|
            SaveSetting 2, 1, .CBactTerm2.value
            SaveSetting 2, 2, .obUseLast.value
            SaveSetting 2, 3, .obUseBuffer.value
            SaveSetting 2, 4, .CheckBox21.value 'useFRAMES
            SaveSetting 2, 5, .CheckBox22.value 'c_useDnD
            SaveSetting 2, 6, .CheckBox23.value 'useMETA
            SaveSetting 2, 7, .CheckBox24.value 'useMultiTree
        '|fffd||fffd||fffd||fffd||fffd||fffd|
            SaveSetting 3, 1, .CheckBox10.value
        'Resizing
            SaveSetting 4, 1, .CheckBox14.value
            SaveSetting 4, 2, .CheckBox15.value     'VBE      - (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            SaveSetting 4, 3, .CheckBox16.value     'Debugger - (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
            SaveSetting 4, 4, .dDispShift 'DualDisplay Shift
            SaveSetting 4, 5, .cbUseDDisp 'DualDisplay Shift
        'SCSForm
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1-4)
            SaveSetting 6, 1, .CheckBox27.value 'compRollUp
        'Status
            SaveSetting 7, 1, .cbxQuickTest.value
        'FindForm History
        'DDBar
            SaveSetting 9, 1, .CheckBox17.value 'SDGoldenTheme
            SaveSetting 9, 2, .CheckBox18.value 'DDsplitByType
            SaveSetting 9, 3, .CheckBox19.value 'DDsplitCompact
            SaveSetting 9, 4, .CheckBox20.value 'fullsizedImages
End With: End Sub


Rem: Other file operations
Function nothing2save() As Boolean: If AC_flg Then nothing2save = n2s: Exit Function '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Open ThisWorkbook.path & "\Logs\presave.xml" For Input As #1: Dim cs$: If Not EOF(1) Then Line Input #1, cs$
                                    nothing2save = cs$ = "": Close #1: End Function
Sub save2file(s$, Optional file$): If file$ = "" Then file$ = ThisWorkbook.path & "\Logs\export.xml" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| add2file
           If file$ Like "*\PDB\*" Then fld$ = pthRoot$(file$): If dir(fld$, vbDirectory) = "" Then create_folder_if_not_exists fld$ '|fffd||fffd||fffd| Notes
           If Right(file$, 5) = ".html" And Right(file$, 10) <> "index.html" Then
              s$ = "<body bgcolor=#FBFEE7>" & s$ & "</body>" '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| html |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| PDB.css)
                  If Not file$ Like "*tree*html" Then _
                     sadd s$, "<link type='text/css' media='screen' rel='stylesheet' href='../css/PDB.css'>" & Chr(13), True: _
                     If Right(file$, 9) <> "cats.html" Then _
                        sadd s$, "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>" & _
                    IIf(useMETA, "<meta http-equiv='X-UA-COMPATIBLE' content='IE=EmulateIE8'>", ""), True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| <HR> |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ( meta { content='IE=EmulateIE9' } -> PDB.css |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
           End If: Open file$ For Output As #2: Print #2, s$: Close #2: End Sub
                                   
Sub test_save2file(): Call save2file("    <ledcidscsdstings>"): End Sub

Sub add2file(s$, Optional file$): If file$ = "" Then file$ = ThisWorkbook.path & "\Logs\presave.xml"
                Open file$ For Input As #1: While Not EOF(1): Line Input #1, cs$: ss$ = ss$ & IIf(ss$ = "", "", Chr(13)) & cs$: Wend: Close #1
ss$ = ss$ & IIf(ss$ = "", "", Chr(13)) & s$: Open file$ For Output As #2: Print #2, ss$: Close #2: End Sub
Sub dropPresaveLog(): Dim errCnt%: On Error GoTo errL
retryL: Open Replace(fnm$, "parameters.xml", "presave.xml") For Output As #2: Print #2, "": Close #2: n2s = True: Exit Sub
errL: If errCnt% = 0 Then ParamIni: inc errCnt%: GoTo retryL Else MsgBox "Can't drop presave.xml!"
End Sub
Attribute VB_Name = "SCForm"
Attribute VB_Base = "0{218DBA8C-0366-4B10-B266-58784A18A7FD}{713C659A-AF28-42A9-98B5-4B25C0396131}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem: 3 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (Plans)
' 1 - =^^=  (RTop |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|. "|fffd||fffd||fffd||fffd||fffd||fffd|")
' 2 - /   (+ RButtom |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "3")
' 3 - |fffd||fffd||fffd||fffd||fffd||fffd| RButtom |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") - TopDocking || FullScreen

Rem: Uses - ScBm%, ScRt%
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TargetForm |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| .Tag (|fffd||fffd||fffd||fffd|. "TrainForm:1")

Public freezing As Boolean, scmode%, s_deep%, mLngMouseHook&, pivot_d As Boolean, TargetForm As Object
Public me_hwnd&, t_hwnd&, hooking As Boolean, Y_split As Boolean, r_hwnd&, bl_hwnd&, br_hwnd& 'SCSForm saved
Public matrix As Boolean, http_mtrx$, http_hwnd&, d_http_hwnd&, historyW$, vb_hwnd&, deep%    'SCSForm saved
Public frlncFlg As Boolean, dd_placed As Boolean
Private frlncX%, frlncY%, stop_in_work As Boolean 'TEST
'Private rt As RECT, w0r As RECT, w1r As RECT, w2r As RECT, w3r As RECT, w4r As RECT '4 release

Public Function checkVisible() As Boolean: If Not Me.Visible Then Me.show vbModeless: checkVisible = True: 'reDraw:
End Function
'msgbox SCSForm.r_hwnd& & " + " & SCSForm.bl_hwnd& & " + " & SCSForm.br_hwnd& & " + " & SCSForm.http_hwnd&
'msgbox getWndCaption(197534)
Public Sub start_freelance(): With SCSForm: If .r_hwnd& = 0 And .bl_hwnd& = 0 And .br_hwnd& = 0 And .http_hwnd& = 0 Then Exit Sub 'no collection
   ls "", "start_freelance": End With:                frlncFlg = True: SCForm.reDraw: frlnc_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: stop_in_work = False: End Sub
Public Sub stop_freelance(Optional d0 = True): If Not (frlncFlg And d0) Then Exit Sub
   ls "", "stop_freelance":                           frlncFlg = False: SCForm.reDraw: frlnc_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: End Sub
Public Sub pause_freelance(): Call stop_freelance: stop_in_work = True: Me.Hide: 'SCSForm.focusMe: 'Call doDelay(1, True)
   ls "", "pause_freelance": 'Call start_freelance: Me.Show vbModeless: reDraw:
'ls ">", "pause_freelance", frlncFlg, stop_in_work: 'TEST (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'If stop_in_work Or Not frlncFlg Then Exit Sub Else frlncFlg = False: stop_in_work = True
next_act = Timer + 1: Do: WaitMessage: DoEvents: 'SendKeys "{NUMLOCK}" 'If frlncFlg Then Exit Do
'                      ls ">", "stop_freelance", Timer
                      Loop Until Timer > next_act: Call start_freelance: reDraw: Me.show vbModeless: 'frlncFlg = True: stop_in_work = False:
End Sub

Private Function getTargetForm(f_name$) As Boolean:
If f_name = Application.Caption Then
                                   Set TargetForm = Application:
ElseIf FnFormIsLoaded(f_name) Then Set TargetForm = UserForms(getFormIndex(f_name))
Else: getTargetForm = False: Exit Function: End If
t_hwnd& = FindWindow(vbNullString, TargetForm.Caption): getTargetForm = True: End Function

Public Sub reDraw(Optional dd_place): If Not IsMissing(dd_place) Then dd_placed = dd_place
'hWnd = FindWindow(vbNullString, TargetForm.Caption)
'Dim rt As RECT: Call GetWindowRect(hWnd, rt) '1024x1280
If frlncFlg Then
  'Dim rt As RECT: Call GetWindowRect(SCSForm.bl_hwnd, rt): t_top% = my_rt.Top * x75 + 3: t_left% = my_rt.Right - 73
  If DDM.On And dd_placed Then t_top% = SCSForm.Top + 4 + settingsForm.dDispShift: t_left% = DDM.Right * x75 - 65 _
                          Else dd_placed = False: t_top% = SCSForm.Top + 12: t_left% = ScRt% * x75 - 65 '69 '64-edge
  frlncY% = t_top%: frlncX% = t_left%
ElseIf SCSForm.t_hwnd& = t_hwnd& Then 'SCSForm.TARGET = Application
  t_top% = TargetForm.Top: t_left% = TargetForm.Left + TargetForm.Width - 71
Else: t_top% = ScTp% * x75:  t_left% = SCSForm.Left - 50 'Doppel
End If
Me.Top = t_top% ' - 17 'my_rt.Bottom * x75 - 17 'x75 - const |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Me.Left = t_left%: End Sub

Public Sub Attach(tfName$, amode): ls "~", "SCForm_Attach": WSim
If Not getTargetForm(tfName) Then Msg "no TargetForm": scmode = 0: Exit Sub _
                             Else scmode = amode: 'Me.Tag = f_name$ & ":" & amode
If ScBm% = 0 Then ResetScDDM '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'maxResTop = ScBm% * 0.7 - 44 'Application.ActiveWindow.Height
'maxResLeft = ScRt% * x75 - TargetForm.Width 'Application.ActiveWindow.Width
reDraw
'Me.Top = IIf(TargetForm.Top > 17, IIf(TargetForm.Top > maxResTop, maxResTop - 17, TargetForm.Top - 17), 0)
Call customSC_Initialize 'Forms_customization - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
's_deep = TargetForm.Left + TargetForm.Width - Me.Left
wcaption = Me.Caption: TransStart: setRgn '|fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'SetWindowRgn hWnd, CreateRectRgn(22, 0, Me.Width, Me.Height), True
'SetWindowRgn hwnd, CreateEllipticRgn(0, 5, 120, 220), True
'SetWindowRgn hwnd, CreateRoundRectRgn(0, 5, 120, 220, 100, 100), True
deep = LoadParam("trans_deep"): s_deep = deep: Me.show vbModeless: Me.reDraw: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: frlncFlg = True: End Sub

Private Sub setRgn()
me_hwnd& = FindWindow(vbNullString, Me.Caption): Dim hrgn1&, hrgn2&
hrgn1 = CreateRectRgn(31 + IIf(os10, 44, 0), 5, 86 + IIf(os10, 44, 0), 26) '31, 0, 86, 26
hrgn2 = CreateEllipticRgn(-100 + IIf(os10, 40, 0), 3, 130 + IIf(os10, 40, 0), 200): Call CombineRgn(hrgn1, hrgn1, hrgn2, 4): '-1(X), 5(Y), 120(W), 220(H)
SetWindowRgn me_hwnd&, hrgn1, True: Call SetTopMostWindow(me_hwnd&, True) 'If Right$(Me.Caption, 9) <> ",,,^-^,,," Then Call SetTopMostWindow(me_hwnd&, True)
End Sub

'************************************************
Rem |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'************************************************

Private Sub UserForm_Activate(): l% = 1: LogString "in   SCForm_Activate", l: Call customSCS_Restore: Call customSC_Activate:
                                                                              If stop_in_work Then checkVisible: start_freelance
                                         LogString "out SCForm_Activate", l: Call SetTopMostWindow(me_hwnd&, True): End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TopMost(SetRgn)

Private Sub UserForm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Call customSC_KeyDown: SCSForm.processSCSFormKeyDown KeyCode, Shift: KeyCode = 0: Call customSCS_Restore:
End Sub

'Private Sub UserForm_Deactivate(): MsgBox "Deactivate": End Sub
'Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer): MsgBox "QueryClose": End Sub

Private Sub UserForm_Terminate(): If AC_flg Or scmode = 0 Then Exit Sub Else l% = 1: LogString "in   SCForm_Terminate", l
'If Not ThisWorkbook.Saved Then ThisWorkbook.Save 'Call showApp: Application.WindowState = xlNormal:
If FnFormIsLoaded("SCSForm") Then SCSForm.freeze 0, , SCSForm.get_freezind_deep%: _
                                  smart_freezing = False '|fffd||fffd||fffd||fffd||fffd||fffd| 2 - Call smart_refreezing: smart_freezing_start: 'smart_refreezing 'custom trans_level *unlock*
SaveParam "trans_deep", deep: Call customSC_Terminate: setFocusOnForm ("SCSForm"): LogString "out SCForm_Terminate", l: End Sub

Public Sub UserForm_Layout(): If scmode = 0 Then Exit Sub   '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                              Dim tPT As POINTAPI: GetCursorPos tPT: If me_hwnd& <> WindowFromPoint(tPT.x, tPT.Y) Then Exit Sub 'manual processing only
                              If stop_in_work Then Exit Sub Else If frlncFlg Then If Me.Top = frlncY% And Me.Left = frlncX% Then Exit Sub 'pass
l% = 1: LogString "in   SCForm_Layout", l
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If frlncFlg Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Me.Top >= frlncY% Then
    If SCSForm.bl_hwnd + SCSForm.br_hwnd = 0 Then '|fffd||fffd||fffd||fffd||fffd|
      hWnd& = GetTopParentH(WindowFromPoint(tPT.x - 15, tPT.Y + 15)): If SCSForm.inCollection(hWnd&) Then GoTo passL
      Dim rt As rect: If IsWindow(hWnd&) Then If getWndCaption$(hWnd&) <> "" Then _
                      If SCSForm.IsFullWindow(rt) = 0 Then Call SCSForm.Manager(hWnd&, True, Shift = 3): customSCS_Restore  'Me.Top = frlncY%: Me.Left = frlncX%: stop_in_work = True: stop_freelance: customSCS_Restore:
  Exit Sub: End If: End If
passL: If Me.Top > frlncY% + 2 Then Me.Hide: If dd_placed Then stop_freelance: SCSForm.Castling 1, 3: stop_in_work = True: Exit Sub _
                                                          Else SCSForm.Castling IIf(SCSForm.br_hwnd = 0, IIf(FindForm.ImageW4.SpecialEffect = 6, 3, 4), 4), 2: stop_freelance: stop_in_work = True: Exit Sub
       If Me.Top < frlncY% - 2 Then Me.Hide:  If dd_placed Then stop_freelance: SCSForm.Castling 3, 1: stop_in_work = True: Exit Sub _
                                                          Else SCSForm.Castling IIf(SCSForm.br_hwnd = 0, 3, 4), 2: stop_freelance: stop_in_work = True: Exit Sub 'pause_freelance: Me.Hide: Me.Show vbModeless: Exit Sub 'SCSForm.focusMe:
       If Me.Left > frlncX% + 2 Then Me.Hide: If dd_placed Then stop_freelance: SCSForm.Castling 3, 4: stop_in_work = True: Exit Sub _
                                                          Else SCSForm.Castling IIf(SCSForm.br_hwnd = 0, 3, 3), 1: stop_freelance: stop_in_work = True: Exit Sub  'Me.Top = frlncY%: Me.Left = frlncX%: Exit Sub
       If Me.Left < frlncX% - 2 Then Me.Hide: If dd_placed Then stop_freelance: SCSForm.Castling 4, 3: stop_in_work = True: Exit Sub _
                                                          Else SCSForm.Castling 3, 4: stop_freelance: stop_in_work = True: Exit Sub                              'Me.Top = frlncY%: Me.Left = frlncX%: Exit Sub
                                                                     Me.Top = frlncY%: Me.Left = frlncX%: Exit Sub  'TEST (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Else:    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Call UserForm_Activate: deep = TargetForm.Left + TargetForm.Width - Me.Left: s_deep = deep 'saved
  rL = 71: LL = IIf(TargetForm.Caption = Application.Caption, 153, 182.25): '66, 63.75 'Trans = 220 - x (37 - 156)
  'Me.Left = TrainForm.Left + TrainForm.Width - 120 - 62.25 '(57.75)
  If deep > LL Then Me.Left = TargetForm.Left + TargetForm.Width - LL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If deep < rL Then Me.Left = TargetForm.Left + TargetForm.Width - rL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Me.Top = TargetForm.Top: TransEnabH SCSForm.t_hwnd&: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  'Me.Repaint
                    SetTransparent DDM.TBhwnd, SCSForm.get_freezind_deep% 'WinTaskBar
  If DDBarUsed Then SetTransparent DDBar.me_hwnd, Max(50, SCSForm.get_freezind_deep% - 75)
  If smart_freezing Then smart_refreezing Else SCSForm.freeze 'MS TaskBar - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If: If Not SCSForm.LFixed Then SCSForm.reDraw
customSC_Layout: L0M "SCSForm.reParkW True": LogString "out SCForm_Layout", l: End Sub

Private Sub frlnc_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(): Call SetLayeredWindowAttributes(me_hwnd&, 0, Max(255 - IIf(frlncFlg, 50, Min(Abs(deep), 200) + 50), 50), LWA_ALPHA): End Sub
Public Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|():  If SCSForm.isDoppel Then If FnFormIsLoaded("satellite") Then If satellite.custran Like "*|" & SCSForm.t_hwnd& & "|*" Then Exit Sub
                            Call SetLayeredWindowAttributes(SCSForm.t_hwnd&, 0, 255 - Min(Max(Abs(deep), 50), 240) + 10, LWA_ALPHA)
If Not AppD Is Nothing Then Call SetLayeredWindowAttributes(FindWindow(vbNullString, "|fffd| - Debugger"), 0, 255 - Min(Max(Abs(deep), 75), 240) + 75, LWA_ALPHA)
                            Call SetLayeredWindowAttributes(me_hwnd&, 0, Max(255 - Min(Abs(deep), 200) - 50, 100), LWA_ALPHA): End Sub '<Min(me_hwnd&) |fffd||fffd||fffd||fffd||fffd|

'************************************************
Rem ADD-ONs
'************************************************
Public Sub MouseWheel(ByVal Rotation As Long)
'************************************************
' To respond from MouseWheel event
' Scroll accordingly to direction
'
' Made by:  Mathieu Plante
' Date:     July 2004
'************************************************
If Rotation > 0 Then
MsgBox "up"
    'Scroll up
    If ListBox1.TopIndex > 0 Then
        If ListBox1.TopIndex > 3 Then
            ListBox1.TopIndex = ListBox1.TopIndex - 3
        Else
            ListBox1.TopIndex = 0
        End If
    End If
Else
MsgBox "down"
    'Scroll down
    ListBox1.TopIndex = ListBox1.TopIndex + 3
End If
End Sub

Attribute VB_Name = "SCSForm"
Attribute VB_Base = "0{D691D23F-F487-4533-A66C-4A6DBEEAB6FF}{C5D7A3E9-E4D9-4A2F-B0D7-B6FA802FB581}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Rem: ShortCut for Sizing
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| SCForm (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Rem: Uses - SCForm (.TargetForm, .scmode), ScBm%, ScRt%
Rem: ?|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TargetForm |fffd| .Tag (|fffd||fffd||fffd||fffd|. "TrainForm")

Private scmode%, my_rt As rect, rtA As rect, CurPos As POINTAPI, tbc_flg As Boolean, ltp_flg As Boolean ' TB_Click inwork flag, LoadTargetPos flag
Public TargetForm As Object, me_hwnd&, t_hwnd&, r_hwnd&, bl_hwnd&, br_hwnd&, d_http_hwnd&, Y_split As Boolean 'd_orientation
Public matrix As Boolean, http_mtrx$, http_hwnd&, http_addr$, http_caption$, pivot_d As Boolean, vb_hwnd& ' exception
Public help_hwnd&, cwnd&, mLngMouseHook& '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| HHOOK) |fffd||fffd||fffd| UnhookWindowsHookEx
Public s_tag$, hooking As Boolean, fivEl As Boolean, historyW$, flash%, flash_hwnd& ' SCForm stored, fivEl=5th_wnd, flash = -1;0(Off);1
Public freezing As Boolean, frozenFlg As Boolean, s_freez As Byte  'mLngMouseHookC& '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| MouseClick
Public isWaiting As Boolean, motored As Boolean, inGame As Boolean, next_act As Single, numbOfRest%, resTry%, WildW&
Private ignCtrlFlg As Boolean, ignShftFlg As Boolean, psdCtrlFlg As Boolean, psdShftFlg As Boolean, kHwnd&, fHwnd& '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _KeyDown -> _KeyUp

'***********
'Web-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'***********
Private Declare Function AtlAxWinInit& Lib "atl.dll" ()
Private Declare Function CreateWindowExA& Lib "user32" (ByVal dwExStyle&, ByVal lpClassName$, ByVal lpWindowName$, ByVal dwStyle&, _
                     ByVal x&, ByVal Y&, ByVal nWidth&, ByVal nHeight&, ByVal hWndParent&, ByVal hMenu&, ByVal hInstance&, lpParam As Any)
Rem: dwStyle
Private Const WS_VISIBLE& = &H10000000
Private Const WS_CHILD& = &H40000000        '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const WS_VSCROLL& = &H200000
Private Const WS_HSCROLL& = &H100000
Private Const WS_DLGFRAME& = &H400000
Private Const SWP_NOZORDER& = &H4
Private Const SWP_NOREDRAW& = &H8
'GET & set
Public Function get_cwnd&(): get_cwnd = cwnd&: End Function
Public Function get_my_Y%(): get_my_Y% = my_rt.Bottom: End Function
Public Function get_my_X%(): get_my_X% = my_rt.Right: End Function '4Test
Public Sub set_my_X(x%): my_rt.Right = x%: End Sub
Public Sub set_my_Y(Y%): my_rt.Bottom = Y%: End Sub
'-------------------------------------------------------------------- Functions
Private Sub Flist()
         Me.GetTBhwnd 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0-1(http)-2(r)-3(bl)-4(br)-5(dbl), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| vitrage
         FORM_Events '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
End Sub
'-------------------------------------------------------------------- Functions
Public Function isDoppel(Optional hWnd) As Boolean: isDoppel = Me.t_hwnd <> SCForm.t_hwnd '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| hwnd
                                                                 'getWndCaption(Me.t_hwnd) <> "|2ea|V" - |fffd||fffd| |fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                   If Not IsMissing(hWnd) Then isDoppel = isDoppel And hWnd = Me.t_hwnd
End Function

Sub glowing(Optional short As Boolean, Optional fade As Boolean) 't_hwnd: r_hwnd: bl_hwnd&: br_hwnd&: http_hwnd: d_http_hwnd&
fi = 1: li = IIf(short, 100, 70): si = IIf(short, 2, 1) * 0.004: lli = li: nowait = True
deep = 255 - Min(Max(Abs(LoadParam("trans_deep")), 10), 240) + 10
redoL: For i = fi To li Step si: 'DoEvents
        If t_hwnd Then SetLayeredWindowAttributes t_hwnd, 0, Max(deep - i, 0), LWA_ALPHA
        If r_hwnd Then SetLayeredWindowAttributes r_hwnd, 0, 220 - i, LWA_ALPHA
        If bl_hwnd& Then SetLayeredWindowAttributes bl_hwnd&, 0, 220 - i, LWA_ALPHA
        If br_hwnd& Then SetLayeredWindowAttributes br_hwnd&, 0, 220 - i, LWA_ALPHA
        If http_hwnd Then SetLayeredWindowAttributes http_hwnd, 0, 220 - i, LWA_ALPHA
        If d_http_hwnd& Then SetLayeredWindowAttributes d_http_hwnd&, 0, 220 - i, LWA_ALPHA
        If nowait Then Else If lli = 220 And fi = lli Then doDelay2 0.00001
       Next i:
       If fi = 1 Then If lli = 220 And fade Then HideAll: fi = 0: li = 0: si = 1: GoTo redoL: Exit Sub _
                                            Else: fi = lli: li = 0: si = -IIf(lli = 220 And Not nowait, 1, si): GoTo redoL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       If short Then Exit Sub
       If lli < 220 Then fi = 1: li = decode(lli, 70, 140, 140, 220): lli = li: si = -si: GoTo redoL
       'For i = 220 To deep Step IIf(220 - deep < 0, -si, si) / 10: SetLayeredWindowAttributes t_hwnd, 0, i, LWA_ALPHA: Next i
End Sub

Public Function Collection2Str$(): Collection2Str$ = "|": For i% = 1 To 5: sadd Collection2Str$, GetTBhwnd&(i%) & "|": Next: End Function
Public Function inCollection%(hWnd&): If hWnd& = 0 Then Exit Function
                                      For i% = 1 To 5: If hWnd& = GetTBhwnd&(i%) Then inCollection% = i%: Exit Function 'Matrix_has(hwnd&) Or
                                                                                                    Next: End Function
Public Function inHistoryW%(hWnd&): If posFirst("|" & CStr(hWnd&) & "|", historyW$) = 0 Then Exit Function
                inHistoryW = prsCount("|", prsAfter("|" & CStr(hWnd&) & "|", historyW$)) + 1: End Function
                
'Matrix - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <M> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| http_hwnd&: CollectW ++ ReleaseW, inCollection --
'         |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| http_hwnd& |fffd||fffd||fffd||fffd||fffd|: inCollection AND NOT http_hwnd&
Function Matrix_cnt%(Optional no_check As Boolean): Matrix_cnt% = IIf(no_check Or matrix, prsCount("|", http_mtrx$) - 1, 0): End Function
Function Matrix_itm&(num%, Optional withCheck As Boolean): Matrix_itm& = CLng(blank(prsBetween|fffd|(num%, "|", "|", http_mtrx$), 0))
                                 If withCheck Then If IsWindow(Matrix_itm&) = 0 Then Matrix_del (Matrix_itm&): Matrix_itm& = 0
End Function
                        'If Matrix_itm& = 0 Then MsgBox "Matrix_itm&(" & num% & ") = 0" '|fffd| |fffd|.|fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function Matrix_has(hWnd&) As Boolean: Matrix_has = IIf(matrix, hasIt("|" & hWnd& & "|", http_mtrx$), False): End Function
Sub Matrix_upd(Optional repark As Boolean): If Not matrix Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + anti-cross
For i% = 1 To Matrix_cnt%: H& = Matrix_itm&(i%): If H& <> 0 Then _
           If IsWindow(H&) = 0 Or (inCollection%(H&) And H& <> http_hwnd&) Then Matrix_del H&: If repark Then reParkW (True)  '(inCollection%(h&) And h& <> http_hwnd&)
Next: SetTBhwnd 1, IIf(Matrix_cnt% = 1, Matrix_itm&(1), http_hwnd): End Sub
'logged
Sub Matrix_trn(on_ As Boolean): Matrix_2_hwnd: matrix = on_: SaveParam "matrix", matrix
                             If Matrix_cnt%(True) = 0 Then If dispValidCaption(http_hwnd&) Then http_mtrx$ = "|" & http_hwnd& & "|"
                           Call Matrix_upd: reParkW True: FindForm.resetParker: End Sub
Sub Matrix_2_hwnd(): For i% = 1 To Matrix_cnt(True): hWnd& = Matrix_itm&(i%):
                     If http_hwnd& = 0 Then SetTBhwnd 1, hWnd&: FindForm.resetParker Else minimizeW IIf(hWnd& = http_hwnd&, 0, hWnd&)
                     Next: End Sub ' |fffd||fffd||fffd||fffd| matrix |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| True
Sub Matrix_add(hWnd&): If hWnd& = 0 Or hWnd& = vb_hwnd& Or Not dispValidCaption(hWnd&) Then Exit Sub 'Except.
                                                        'or hWnd& = FindWindow(vbNullString, "SlickJot") _
                                                        'Or hWnd& = FindWindow(vbNullString, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|") Then Exit Sub 'Except.
                       If http_hwnd = 0 Then SetTBhwnd 1, hWnd&
                       http_mtrx$ = IIf(hasIt("|" & hWnd& & "|", http_mtrx$), http_mtrx$, http_mtrx$ & hWnd& & "|"): SaveParam "http_mtrx", http_mtrx$: End Sub
Sub Matrix_del(hWnd&, Optional nosave As Boolean): http_mtrx$ = Replace(http_mtrx$, "|" & hWnd& & "|", "|")
                                                   If Not Matrix_has(http_hwnd) Then SetTBhwnd 1, Matrix_itm&(Matrix_cnt%()) Else If nosave Then Exit Sub
                                                    SaveParam "http_mtrx", http_mtrx$: End Sub
Sub Matrix_full_clean(): For i% = 1 To Matrix_cnt%: hWnd& = Matrix_itm&(1): Matrix_del hWnd&, True: minimizeW hWnd&: _
                                                    SaveParam "http_mtrx", http_mtrx$: Next: dispUpdateTL: End Sub
Function Matrix_get$(used As Boolean): With Sheets("Dispetcher_"):
For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For Else hWnd& = .Cells(r&, 2)
      If iMaping Then Matrix_get$ = Matrix_get$ & IIf(used And .Cells(r&, 1) = "", "", hWnd& & "|") _
                 Else Matrix_get$ = Matrix_get$ & IIf(used And inCollection(hWnd&) = 0, "", hWnd& & "|")
Next: End With: If Matrix_get$ <> "" Then Matrix_get$ = "|" & Matrix_get$
End Function
Sub Matrix_full_destroy(): cnt% = Matrix_cnt(): c_matrix$ = http_mtrx$
For i% = 1 To cnt%: hWnd& = prsBetween|fffd|$(i%, "|", "|", c_matrix$): dispDestroyWindow hWnd&: reParkW True: Next: Matrix_trn False: End Sub

Rem: Blank places = 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. Excel)
Sub Matrix_collect_all_free(): Dim useDDBar As Boolean: useDDBar = True '=DDBarUsed 'If ActiveSheet.name <> "Dispetcher_" Then Exit Sub Else dispGetTaskList
    With Sheets("Dispetcher_"): If Not useDDBar Then Matrix_full_clean
    For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For
      If iMaping Then is_free = .Cells(r&, 1) = "" Else is_free = inCollection(.Cells(r&, 2)) = 0
If useDDBar Then
                    If is_free And Not DDBar.HasItem(sag(hWnd&, .Cells(r&, 2))) Then _
                        restoreW hWnd&, True, getWindowState%(hWnd&) = SW_MINIMIZE&: doDelay2 0.1: DDBar.AddItem hWnd&   '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             Else:  If is_free Or sag(hWnd&, .Cells(r&, 2)) = http_hwnd& Then If Not Matrix_has(hWnd&) Then Matrix_add hWnd& 'full collect 'Else Matrix_del hwnd&: minimizeW hwnd& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If: Next: If Not DDBarUsed Then Matrix_trn True Else If Not DDBar.isMatrix Then DDBar.reDraw 3
End With: End Sub
Sub Matrix_collect_all_used(): 'If ActiveSheet.name <> "Dispetcher_" Then Exit Sub Else dispGetTaskList
    With Sheets("Dispetcher_"): If Not DDBarUsed Then Matrix_full_clean
    For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For
      If .Cells(r&, 1) <> "" Then hWnd& = .Cells(r&, 2): If inCollection(hWnd&) = 0 Then Matrix_add hWnd& 'full recollect used in noactive Sets
    Next: Matrix_trn True: End With: End Sub
Sub Matrix_collect_new_ones(): old_mtrx$ = Matrix_get$(False): Matrix_full_clean: 'dispUpdateTL
                               new_mtrx$ = Matrix_get$(False): cnt = prsCount("|", new_mtrx$) - 1: If cnt = 0 Then Exit Sub
    For i% = 1 To cnt: hWnd& = prsBetween|fffd|$(i%, "|", "|", new_mtrx$)
      If Not hasIt("|" & hWnd& & "|", old_mtrx$) Then Matrix_add hWnd&
    Next: Matrix_trn http_mtrx$ <> "|": End Sub
                                                                          
'|fffd||fffd||fffd||fffd||fffd||fffd|
Sub mouseMovedProc(): If Not inGame Then Exit Sub Else W = my_rt.Right - my_rt.Left
                GetCursorPos CurPos: my_rt.Left = CurPos.x - bit_len / 2 - 4: my_rt.Right = my_rt.Left + W
                SetWindowRect my_rt.hWnd&, my_rt: End Sub
Public Sub theGame(): If inGame Then Exit Sub Else hWnd& = FindWindow(vbNullString, PF.Caption)
                  inGame = True: GetWindowRect hWnd&, my_rt: my_rt.hWnd& = hWnd&
                  With FindForm: .set_bk_color: .aimed = False: .reDraw: End With
 PF.setMode "WsE": PF.FrameP.tag = 9 '|fffd||fffd||fffd||fffd||fffd||fffd|
 H = my_rt.Bottom - my_rt.Top: my_rt.Bottom = ScBm%: my_rt.Top = my_rt.Bottom - H
               SetWindowRect my_rt.hWnd&, my_rt: GetWindowRect rtA.hWnd, rtA:
               Do: angle% = earth_Down(1, angle%): Loop While inGame: End Sub
'tan(A)=x/y => x = y*tan(A*pi/180)     +- 45
Private Function earth_Down%(stp%, Optional ByRef angle%)
                H% = rtA.Bottom - rtA.Top: W% = rtA.Right - rtA.Left
                Do: rtA.Bottom = rtA.Bottom + stp%: rtA.Top = rtA.Bottom - H
                    If rtA.Left < -30 Or rtA.Right > ScRt% + 30 Then angle% = -angle%
                    dX = dX + stp% * Tan(angle% * pi / 180)
                    rtA.Left = rtA.Left + dX: rtA.Right = rtA.Left + W%
                    dX = dX - Round(dX): SetWindowRect_delayed rtA, 100, 10, True
                Loop Until rtA.Bottom > 6 + my_rt.Top + PF.FrameP.Top / x75 Or Not inGame
                If inGame Then
                   centA = rtA.Left + (rtA.Right - rtA.Left) / 2
                   If Abs(centA - CurPos.x) > bit_len / 2 Then
                   With PF.FrameP: .tag = .tag - 1: If CInt(.tag) < 0 Then stpGame: Exit Function
                         PF.Controls("ImageWS" & CStr(CInt(.tag) + 1)).Visible = False: End With
                         rtA.Top = 0: rtA.Bottom = rtA.Top + H: PF.reSize 'angle% = 0:
                   Else: angle% = angle% + (centA - CurPos.x) / bit_len * 90
                         earth_Up stp%, H, W, angle%: End If
                earth_Down = angle%: End If: End Function
Private Sub earth_Up(stp%, H%, W%, Optional ByRef angle%): For i% = -30 To 30: rtA.Top = rtA.Top - Sgn(i%): SetWindowRect_delayed rtA, 100, 10, True: Next
Dim dX#: Do: rtA.Bottom = rtA.Bottom - stp%: rtA.Top = rtA.Bottom - H
                    If rtA.Left < -30 Or rtA.Right > ScRt% + 30 Then angle% = -angle%
                    dX = dX + stp% * Tan(angle% * pi / 180)
                    rtA.Left = rtA.Left + dX: rtA.Right = rtA.Left + W%
                    dX = dX - Round(dX): SetWindowRect_delayed rtA, 100, 10, True
                Loop Until rtA.Top < -18 Or Not inGame:
                If inGame Then: For i% = -30 To 30: rtA.Bottom = rtA.Bottom + Sgn(i%): SetWindowRect_delayed rtA, 100, 10, True: Next
                End Sub
Private Function bit_len%(): With PF.Controls("ImageWS" & CStr(CInt(PF.FrameP.tag)))
                 bit_len% = (PF.FrameP.Left + .Left + .Width) / x75: End With: End Function
Private Sub SetWindowRect_delayed(rt As rect, dms%, Optional cnt% = 1, Optional busy As Boolean)
                For i = 1 To cnt%: SetWindowRect rt.hWnd, rt: dodelay dms% / 1000, busy: Next: End Sub
Private Sub stpGame(): If inGame Then inGame = False: PF.setModeActual: PF.reDraw Else MsgBox "not in Game"
End Sub

Sub cornerIt(hWnd&, Optional to_point As Boolean = True, Optional NOsSens As Boolean = True): If hWnd& = 0 Or _
                                                                    (Not settingsForm.CheckBox15 And isVb(hWnd&)) Then Exit Sub
Dim rt As rect: ls IIf(hWnd& = bl_hwnd&, "~", ""), "cornerIt", hWnd&, to_point, NOsSens
If hWnd& = t_hwnd Then
   Shx = 30: Shy = 30: SetWindowRgn hWnd&, CreateEllipticRgn(-90 + Shx, -90 + Shy, Shx, Shy), True
ElseIf to_point Then  '|fffd| XP - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|) = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   If NOsSens Or osXP Or hWnd& = vb_hwnd Then SetWindowRgn hWnd&, CreateEllipticRgn(0, 0, 0, 0), True Else minimizeW hWnd& 'ShowWindow hwnd&, SW_HIDE - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| WTB
ElseIf hWnd& = r_hwnd Then Call GetWindowRect(hWnd&, rt): Shx = 50: Shy = 30: SetWindowRgn hWnd&, _
   CreateEllipticRgn(rt.Right - rt.Left - 90 + Shx, -90 + Shy, rt.Right - rt.Left + Shx, Shy), True
ElseIf hWnd& = bl_hwnd Then Call GetWindowRect(hWnd&, rt): Shx = 30: Shy = 60: SetWindowRgn hWnd&, _
   CreateEllipticRgn(1 + Shx, rt.Bottom - rt.Top + 1 + Shy, Shx, rt.Bottom - rt.Top + Shy), True
ElseIf hWnd& = br_hwnd Then Call GetWindowRect(hWnd&, rt): Shx = 55: Shy = 65: SetWindowRgn hWnd&, _
   CreateEllipticRgn(rt.Right - rt.Left + 1 + Shx, rt.Bottom - rt.Top + 1 + Shy, rt.Right - rt.Left + Shx, rt.Bottom - rt.Top + Shy), True
End If: End Sub
   
Sub setWindowVisible(hWnd&, Optional isV As Boolean = True): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If hWnd& = r_hwnd Then If Not isV Then cornerIt (hWnd&): Exit Sub Else Exit Sub
If hWnd& = t_hwnd Then If Not isV Then cornerIt (hWnd&): Exit Sub Else Exit Sub
'If hwnd& = http_hwnd Then If Not isV Then unFreeze hwnd&
Call ShowWindow(hWnd&, IIf(isV, SW_SHOW, SW_HIDE))
iWindowStyle& = IIf(isV, GetWindowLong(hWnd&, GWL_STYLE) Or WS_VISIBLE&, _
                         GetWindowLong(hWnd&, GWL_STYLE) And (Not WS_VISIBLE&))
SetWindowLong hWnd&, GWL_STYLE, iWindowStyle: DrawMenuBar hWnd&: End Sub

'* Hooking
'**********
Public Sub updHook(Optional valid As Boolean = True): If Not valid Then meUnHook: Exit Sub
            If Not hooked Then If hookFullCND Then meHook: Exit Sub Else Exit Sub
            If hooked Then If Not hookFullCND Then meUnHook: Exit Sub
End Sub
Public Sub meHook(): If hooked Or Not hooking Then Exit Sub 'UnhookWindowsHookEx mLngMouseHook: mLngMouseHook = 0
mListBoxHwnd& = SCForm.me_hwnd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|. Unhook |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
lngAppInst& = GetWindowLong(mListBoxHwnd, GWL_HINSTANCE) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
mLngMouseHook = SetWindowsHookEx(WH_MOUSE_LL, AddressOf SCSFormMouseScroll, lngAppInst&, 0): End Sub 'MsgBox "|fffd||fffd|":
Public Sub meUnHook(): If hooked Then UnhookWindowsHookEx mLngMouseHook: mLngMouseHook = 0: 'MsgBox "|fffd||fffd||fffd|"
End Sub 'Else MsgBox "Hook = 0"

Public Function hooked() As Boolean: hooked = mLngMouseHook& <> 0: End Function

Public Function hookFullCND() As Boolean: hookFullCND = hooking: End Function 'hookHttpCND Or historyWCND Or hookHwndCND: End Function
Private Function historyWCND() As Boolean: historyWCND = (Not LParked) And Len(historyW$) > 1: End Function 'And (br_hwnd& + bl_hwnd& <> 0)
Private Function hookHwndCND() As Boolean: hookHwndCND = LParked And _
                               IIf(r_hwnd& = 0, 0, 1) + IIf(bl_hwnd& = 0, 0, 1) + IIf(br_hwnd& = 0, 0, 1) > 1: End Function '|fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function hookHttpCND() As Boolean: hookHttpCND = False: End Function
                                             '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd| hwnd&
Public Function freeze(Optional ByVal hWnd&, Optional except&, Optional fdeep%) As Boolean: 'db_ "freeze" 'ShowWindow hwnd&, SW_HIDE / SW_SHOW
                                   If fdeep% = 0 Then If FnFormIsLoaded("SCForm") Then fdeep% = get_freezind_deep% Else fdeep% = 220
      dbg_ fdeep%, hWnd& = t_hwnd: If FnFormIsLoaded("satellite") Then dofreez = Not isCusTranS(hWnd&) Else dofreez = True
                                   If hWnd& > 0 Then: If hWnd& <> except& Then If dofreez Then freeze = SetTransparent(hWnd&, CByte(fdeep%)): Exit Function Else Exit Function
For i% = 1 To 5: If Not (i = except&) Then hWnd& = GetTBhwnd&(i%): If hWnd& > 0 Then _
                                                If Not FnFormIsLoaded("satellite") Then SetTransparent hWnd&, CByte(fdeep%) _
                                                                                   Else If isCusTranS(hWnd&) Then Exit Function _
                                                                                   Else SetTransparent hWnd&, CByte(fdeep%)
                 Next i%: frozenFlg = True: End Function 'isWaiting = False:
                                            'SetTransparent 65552, CByte(fdeep%): End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| desktop (wallpaper-sheders)
Public Function get_freezind_deep%(Optional hWnd&)
If hWnd& = t_hwnd Then get_freezind_deep% = 255 - Min(Max(Abs(SCForm.s_deep), 50), 240) + 10 _
                  Else get_freezind_deep% = 255 - Min(Max(Abs(SCForm.s_deep), 65), 200) + 65
   End Function

Public Sub FreezeIf(valid As Boolean, ByVal hWnd&): If valid Then freeze hWnd&
                                                                               End Sub
Public Sub unFreezeIfXP(Optional ByVal hWnd&, Optional valid As Boolean = True): unFreeze hWnd&, osXP: End Sub
Public Sub unFreezeIfUnused(ByVal hWnd&): unFreeze hWnd&, Not hasIt("|" & hWnd& & "|", LoadParamBlock$("PF_Set1", "PF_Set4")): End Sub
Public Sub unFreezeIf(val As Boolean, ByVal hWnd&): unFreeze hWnd&, val: End Sub
Public Sub unFreeze(Optional ByVal hWnd&, Optional valid As Boolean = True): If Not valid Then Exit Sub Else If hWnd& > 0 Then TransStopH hWnd&, valid: db_ "unFreeze": Exit Sub
For i% = 2 To 5: hWnd& = GetTBhwnd&(i%): If hWnd& > 0 Then Call TransStopH(hWnd&) '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Next i%: frozenFlg = False: End Sub 'If Not isWaiting Then startWaiting freezing - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd| |fffd| DoEvents |fffd| |fffd||fffd||fffd||fffd||fffd|

Private Sub FreezeInt(): If PF.transFlg Then Exit Sub Else freeze PF.me_hwnd: PF.transFlg = True '!|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                           freeze FindForm.me_hwnd: End Sub
Private Sub unFreezeInt(): If Not PF.transFlg Then Exit Sub
      unFreeze PF.me_hwnd: PF.transFlg = False: unFreeze FindForm.me_hwnd, Not FindForm.aimed: End Sub
                         
'Private Sub startWaiting(valid As Boolean): SCSForm_startWaiting valid: End Sub
Private Sub set_next_act(Optional delay%): next_act = Timer + IIf(delay% = 0, 30, delay%): End Sub
Private Sub startWaiting(Optional ign As Boolean): If Not osXP Or ign Then Exit Sub Else If isWaiting Then Exit Sub
isWaiting = True: set_next_act
Application.EnableCancelKey = xlErrorHandler 'antiESC |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
On Error GoTo BCErrorHandler: Do While freezing
                                    If Timer > next_act Then freeze: FreezeInt
                                    WaitMessage ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    DoEvents    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                              Loop: isWaiting = False: GoTo extL
BCErrorHandler: processSCSFormKeyDown 27: Resume Next '<Esc> = |fffd||fffd||fffd||fffd|c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
extL: Application.EnableCancelKey = xlInterrupt: End Sub
                                
Public Function MouseScrollF&(ByVal nCode&, ByVal wParam&, ByRef lParam As MOUSEHOOKSTRUCT)
If GetActiveWindow& <> me_hwnd Then If FindForm.BackColor = FindForm.get_bk_color& Then Exit Function: 'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|?":
Dim idx%: On Error GoTo errH
     If (nCode = HC_ACTION) Then 'Or wParam = WM_RBUTTONDOWN
       If wParam = WM_LBUTTONDOWN Or wParam = WM_MOUSEWHEEL _
                                  Then wp& = WindowFromPoint(lParam.pt.x, lParam.pt.Y)
       If wParam = WM_LBUTTONDOWN Then
         If FindForm.Inverted Then
            If Replace(getWndCaption$(wp&), "Agent", "") = "" Then GoTo exitL ': End If
            processSCSFormKeyDown 27: GoTo exitL: End If
         hWnd& = GetTopParentH(wp&)
         If FindForm.aimed Then
            If Not Castling(IIf(hWnd& = http_hwnd&, 1, inCollection(hWnd&)), FindForm.nxt_pos) Then _
                   processSCSFormKeyDown 17, 0, hWnd& = t_hwnd
            FindForm.set_bk_color: FindForm.aimed = False: GoTo exitL: End If
         If Left(getWndCaption$(hWnd&), 22) = "Visual Basic - MAC.XLA" Then GoTo errH
'         If Not freezing Then Exit Function
'         If frozenFlg Then
'               If inCollection(hwnd&) Then Freeze: Call TransStopH(hwnd&) 'local unFreeze
'         Else: If IsWindow(hwnd&) Then If Not inCollection(hwnd&) Then Freeze
'         End If
       ElseIf wParam = WM_RBUTTONDOWN Then
          If inGame Then stpGame
              'FindForm.set_bk_color: FindForm.aimed = False:
              'If Motor(wp&) Then MouseScrollF = 0: Exit Function  'GoTo exitL
       ElseIf wParam = WM_MOUSEWHEEL Then
         If inGame Then GoTo exitL Else If motored Then _
                        If getWndCaption$(wp&) = "Agent" Then theGame: GoTo exitL 'Else GoTo exitL
         If FindForm.Inverted Then If IsWindow(wp&) = 0 Then GoTo exitL Else If Motor(wp&) Then GoTo exitL
         'MouseScrollF = True
         'MsgBox GetTopParentH(WindowFromPoint(lParam.pt.X, lParam.pt.Y)) = http_hwnd&: Exit Function
         'MsgBox GetTopParentH(FindWindow(vbNullString, "HTTP")) & " " & GetTopParentH(WindowFromPoint(lParam.pt.X, lParam.pt.Y)): Exit Function
         If lParam.hWnd > 0 Then idx = -1 Else idx = 1 '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| http + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| SCSForm?
         If GetActiveWindow = me_hwnd And GetTopParentH(wp&) <> http_hwnd Then
                If historyWCND Then Call listHistoryW_byScroll(-idx%): Call focusMe: Exit Function Else _
                If hookHwndCND Then Call listFullScreenHwnd_byScroll(idx%): Exit Function
         End If 'MsgBox CStr(historyWCND) & " " & CStr(Not Lparked) & " " & CStr(Len(historyW$) > 1) & " " & CStr(br_hwnd& + bl_hwnd& <> 0)
       ElseIf wParam = WM_MOUSEMOVE Then
                                         mouseMovedProc
exitL: End If: End If: MouseScrollF = CallNextHookEx(mLngMouseHook, nCode, wParam, ByVal lParam): Exit Function
errH: Call meUnHook: freezing = False: FindForm.set_bk_color: End Function

Private Sub listFullScreenHwnd_byScroll(dir%): If cwnd& > 5 Then cwnd& = IIf(dir% > 0, 1, 5) 'hystoryW$ listed
For i% = 2 To 4: incon cwnd&, dir%: If cwnd& < 2 Then cwnd& = 5 Else If cwnd& > 4 Then cwnd& = 1
    Dim rt As rect: hWnd& = GetTBhwnd&(CInt(cwnd&)): If hWnd& <> 0 _
                    Then rt.Top = 0: rt.Bottom = ScBm%: rt.Left = 0: rt.Right = ScRt%: _
                         Call BringWindowToTop&(hWnd&): Call SetWindowRect(hWnd&, rt): Call focusMe: Exit Sub _
                    Else: If cwnd& < 2 Or cwnd& > 4 Then Call reParkW(True): Call focusMe: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Next: End Sub


Public Sub OpenHTTP(addrStr$, Caption$, Optional compact As Boolean, Optional freeW As Boolean): 'If IIf(compact, r_hwnd&, http_hwnd&) <> 0 Then Call Store2http_list(http_addr$, http_caption$, addrStr$, Caption$, compact) Else
  ls ">", "OpenHTTP"                                              'On Error Resume Next: CommandBars("GCoding").Controls("http_list").Delete: updHTTPbtn: _
                                                                  'Call AtlAxWinInit '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    'new_http_hwnd& = hwndFrom_http_list&(Caption$): If IsWindow(new_http_hwnd&) <> 0 Then GoTo exitL:
    Dim ihWnd&: ihWnd = 0 'SCSForm.t_hwnd 'PF.me_hwnd& 'SCForm |fffd||fffd||fffd| SCSForm |fffd||fffd||fffd| TopMost '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Dim chldWnd&: chldWnd = 0 'FindWindow(vbNullString, Application.Caption) '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|.)
    'ihChildWnd = FindWindow(vbNullString, "WebPage")
    '"http://ppm.forum.kiev.ua.alfabank:8080/secure/Dashboard.jspa"
    Dim rt As rect: Call GetWindowRect(Me.t_hwnd, rt): http_addr$ = addrStr$: http_caption$ = Caption$: Call AtlAxWinInit
    new_http_hwnd& = CreateWindowExA(0, "AtlAxWin", addrStr, SWP_NOREDRAW Or WS_HSCROLL Or WS_VSCROLL, _
                                     0, 0, ScRt%, ScBm%, ihWnd&, 0, chldWnd&, 0&) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Or WS_VISIBLE = CollectW, WS_DLGFRAME Or WS_MINIMIZEBOX Or - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Call setWndCaption&(new_http_hwnd&, "^" & Caption$): o_hwnd& = r_hwnd& 'If compact Then If Left(getWndCaption(r_hwnd&), 1) = "^" Then dispDestroyWindow r_hwnd&
    If Caption$ Like "*(Ctrl+?)*" Then DestroyWindow help_hwnd: help_hwnd = new_http_hwnd&
    If freeW Then ShowWindow4 new_http_hwnd&: Exit Sub ': db_ "done."
    'MsgBox addrStr
    'rt.Right, 0, ScRt% - rt.Right, rt.Bottom, me_hwnd&, 0, chldWnd, 0&)
    'WS_DLGFRAME Or WS_VISIBLE Or  - ?  'WS_CHILD - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)?
'exitL: 'If compact Then If o_hwnd& > 0 Then If Left(getWndCaption$(o_hwnd&), 1) = "^" Then dispDestroyWindow o_hwnd& _
       '                Else SaveParam "TBhwnd2save", PF.c_Set & "|" & o_hwnd& ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd|.'
       doDelay2 0.2
       If compact Then
        If Left(sag(wc$, getWndCaption(o_hwnd&)), 1) = "^" Then
                   'Trees, ( Not wc$ Like "*|*" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ) - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (ddBar)
                If DDBarUsed And wc$ Like "*:*" Then DDBar.AddItem o_hwnd& _
                   Else tbc "RemoveFrom_list o_hwnd&": dispDestroyWindow o_hwnd&, , , True
             Else: SaveParam "TBsavedhwnd" & PF.c_Set & "2", o_hwnd&, 2, False
                   ShowWindow& o_hwnd&, SW_MINIMIZE&  '|fffd||fffd||fffd||fffd||fffd||fffd| old_r_hwnd, doDelay - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       End If: End If: CollectW new_http_hwnd&, IIf(compact, 2, 0) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| dispAddTask
FindForm.resetParker: 'reParkW True '-- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| CollectW + br_hwnd g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
setFocusOnForm ("SCForm"): ls "<", "OpenHTTP": End Sub

Public Sub reDraw(): If t_hwnd& = 0 Then t_hwnd& = FindWindow(vbNullString, Application.Caption)
                     Dim rt As rect: Call GetWindowRect(t_hwnd&, rt) '1024x1280
'MsgBox rt.Bottom
If twoWindowsWild Then On Error Resume Next: Windows("MAIN.xls:1").Caption = "1": Windows("").Caption = "_": _
                                        With Windows("1"): rt.Bottom = (.Height + .Top + 18) / x75: End With
'With windows("_"): MsgBox rt.Bottom & "  " & .PointsToScreenPixelsY(.Top) - 100: End With
'MsgBox (Windows("1").Height + Windows("1").Top) / x75 - 6
  Me.Top = IIf(rt.Bottom * x75 > ScTp% * x75 + 17, rt.Bottom * x75 - 17, ScTp% * x75) 'x75 - const |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Me.Left = IIf(rt.Right * x75 > ScLt% * x75 + 23, rt.Right * x75 - 22.5, ScLt% * x75):
  End Sub '17<~ t_position

Public Sub Attach(): l% = 1: LogString "in   SCSForm_Attach", l
If scmode% = 0 Then UserForm_Initialize: 'remind: Unload Me: Exit Sub 'msg "no Target"
'If Not TargetForm.Visible Then Me.Left = ScLt%: TargetForm.Visible = True 'Lparked  'TEST |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 190219
wcaption = Me.Caption: TransStart '|fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|
me_hwnd& = FindWindow(vbNullString, Me.Caption): Dim hrgn1&, hrgn2&
hrgn1 = CreateRectRgn(0, 0, 30, 27 - IIf(osXP, 0, 5))
hrgn2 = CreateRoundRectRgn(-15 - IIf(osXP, 0, 5), 0, 110, 190 - IIf(osXP, 0, 17), 1000, 1000): Call CombineRgn(hrgn1, hrgn1, hrgn2, 1):
SetWindowRgn me_hwnd&, hrgn1, True
'SetWindowRgn hWnd, CreateRectRgn(22, 0, Me.Width, Me.Height), True
'SetWindowRgn hwnd, CreateEllipticRgn(0, 5, 120, 220), True
'SetWindowRgn hwnd, CreateRoundRectRgn(0, 5, 120, 220, 100, 100), True
Me.show vbModeless: Me.reDraw: 'If Not Lparked Then loadTargetPos: Me.reDraw
Call SetTopMostWindow(me_hwnd&, True): LogString "out SCSForm_Attach", l: focusMe: End Sub
 
Public Sub Manager(hWnd&, hdn As Boolean, Optional shifted As Boolean): If hdn Then ToggleButton1.tag = "hdn"
'If Left$(getWndCaption$(hwnd&), 7) <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then hwnd& = GetTopParentH(hwnd&) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'MsgBox getWndCaption$(WindowFromPoint(tPT.X, tPT.Y)) & " " & getWndCaption$(hwnd&)
'If hwnd& = http_hwnd& Then Exit Sub 'Temp
    'Call ReleaseW4(r_hwnd&, 2): r_hwnd& = http_hwnd&: Call CollectW(r_hwnd&, 2): GoTo exitL
Call collectionUpd: If hWnd = GetTopParentH(me_hwnd) Then hdn = False                       '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If ToggleButton2.Enabled Then
  hdn = False: If hWnd = GetTopParentH(me_hwnd) Then Unload Me: Exit Sub                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
ElseIf hWnd = t_hwnd& Or Not hdn Then With ToggleButton1: SetWindowRgn me_hwnd&, CreateRectRgn( _
       3, 29 + .Top / x75, 3 + 2 * .Width / x75, 29 + 2 * .Height / x75), True: _
       ToggleButton1.value = (TargetForm.Left = 1 And TargetForm.Top = 0): End With: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If matrix Then
        If Matrix_has(hWnd&) Then
                                 If FindForm.nxt_pos = 1 Then SetTBhwnd 1, hWnd&: Matrix_trn False: Exit Sub _
                                                         Else Matrix_del hWnd&, True: Matrix_add GetTBhwnd(FindForm.nxt_pos) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                             ElseIf FindForm.nxt_pos = 1 Then ReleaseW hWnd&: CollectW hWnd&, 1: Matrix_add hWnd&: Exit Sub
End If: End If
If inCollection(hWnd&) > 0 Then Call SpinCollection(1, hWnd&): Exit Sub 'old: Ctrl + Tab (-> 4)
If Not hdn Then CheckBox1 = hooking: For i% = 2 To 4: Call showTBCommon(i%): Next 'old: hWnd = IIf(GetTBhwnd&(i%) = hWnd, 0, hWnd): If hWnd = 0 Or
If getWndCaption$(hWnd&) = "" Or hWnd = t_hwnd& Then Me.tag = 0: Me.Caption = "    /": GoTo exitL
'New Window for park 2 Caption
Me.tag = hWnd: Me.Caption = getWndCaption$(hWnd&)
If hdn Then
  i% = IIf(shifted, 3, IIf(exceptionList3(hWnd&), 3, FindForm.nxt_pos)): FindForm.resetParker '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|", |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Call TB_Click(IIf(i% > 0, i%, IIf(r_hwnd& = 0, 2, IIf(bl_hwnd& = 0 Or shifted, 3, 4)))): Unload Me 'hidden add '4 <-> IIf(bl_hwnd& = 0, 3, 4)
End If
exitL: Call AllShowWindow(SW_RESTORE): Call reParkW(hWnd = 0): If hdn Then Call AllOnTop
       If Not (fullyFilled Or i% = 4) Then Call focusMe
End Sub

Public Function collectionUpd() As Boolean: Matrix_upd True: For i% = 2 To 4: H& = GetTBhwnd&(i%): If H& <> 0 Then If IsWindow(H&) = 0 Then Call SetTBhwnd&(i%, 0): collectionUpd = True: Call reParkW(True)
Next: End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Sub focusMe(): LM "SCS_focusMe": Call SetForegroundWindow&(me_hwnd): End Sub ' Call setFocusOnForm("SCSForm") - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| App |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.

Private Function NoHwnds() As Boolean: Dim s&: For i% = 2 To 4: Call incon(s&, GetTBhwnd&(i%)): Next: NoWindows = (s& = 0): End Function

Private Sub showTBCommon(i%): If NoHwnds And Me.Caption = "    /" Then Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
With Me.Controls("ToggleButton" & i%): .Enabled = True: On Error Resume Next
If IsWindow(GetTBhwnd&(i%)) <> 0 Then .Caption = getWndCaption$(GetTBhwnd&(i%)): .value = True: _
                Set .Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\" & GetTBhwnd(i%) & ".ico") _
                Else: Call SetTBhwnd(i%, 0): Set .Picture = Nothing
End With: End Sub
'------------------------------------------------
Rem PARKING Methods
'------------------------------------------------
' Collect (+)
'------------------------------------------------
Public Function Castling(i%, j%) As Boolean: ls ">", "Castling", i%, j%: If i% = 0 Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| CollectW
            hWnd& = GetTBhwnd&(j%): SetTBhwnd j%, GetTBhwnd&(i%): Castling = True: checkDDMatrix j%
            SetTBhwnd i%, hWnd&: setWindowVisible (hWnd&): If twoWindows Then UserForm_Layout Else reParkW
                                                           Call dispUpdateTL: End Function
                                                           
Sub reCollectW(hWnd&, i%): ReleaseW GetTBhwnd&(i%), i%: CollectW hWnd&, i%: End Sub ', Not Application.Visible: End Sub 'Doppel - |fffd||fffd||fffd||fffd||fffd| |fffd| >>Application.Visible = True (error '50290')
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Manager |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Me (|fffd||fffd||fffd||fffd||fffd| CollectW4)
Public Sub CollectW(hWnd&, i%, Optional noDisp As Boolean):
                                 SetTBhwnd i%, hWnd&: historyLeave hWnd&: setNoHeadersHif hWnd&, i% '~ Google Chrome |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                                 checkDDMatrix i%
                                 If matrix Then If i% = 1 Then Matrix_add hWnd& Else If Matrix_has(hWnd&) Then Matrix_upd True 'anti-cross
                                 cornerIt hWnd&: Call restoreW(hWnd&): unFreezeIfXP hWnd&: FreezeIf Not osXP, hWnd&: If twoWindows Then UserForm_Layout Else reParkW False
                                 customSCS_Layout twoWindowsWild: BringWindowToTop hWnd&: If Not noDisp Then dispAddTask hWnd&
                                                                                          FindForm.resetParker: End Sub 'iMapUpdH CStr(hwnd&), PF.c_Set:

Public Sub CollectW4(hWnd&): If IsWindow(hWnd&) = 0 Then Call dispCneanUp: Exit Sub 'Else Call ShowWindow(hwnd&, SW_RESTORE): 'collect window
        cap$ = getWndCaption(hWnd&): 'If InStr(1, cap$, ".xls") > 0 Then If InStr(1, "Excel - Visual Basic", Mid$(cap$, 1, 8)) > 0 Then GoTo exceptL '???
                                     If InStr(1, cap$, "Winamp") > 0 Or cap$ = "Advanced SystemCare Ultimate" Then GoTo exitL
        If exceptionList3(hWnd&) Then i% = 3 Else i% = FindForm.nxt_pos '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|"
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        from% = inCollection(hWnd&): If from% > 0 Then L0M "If IsWindow(GetTBhwnd&(i%)) = 1 Then": Castling from%, i%: GoTo exitL
        Select Case from%
                Case 0: 'pass*
                Case 2: '.r_hwnd& = IIf(hwnd& = .r_hwnd&, .br_hwnd, .r_hwnd&): .br_hwnd& = 0: '|fffd||fffd| DblClick
                        SetTBhwnd 2, br_hwnd: SetTBhwnd 4, 0: If http_Visible Then Call setWindowVisible(r_hwnd&, False)
                'Case 3: Call ReleaseW(hwnd&, 3): RecompainW: 'If GetTBhwnd&(4) = 0 Then GoTo exitL Else Call RecompainW '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3<>4
        '        Case 3: If i% = 4 Then Castling 3, 4: GoTo exitL Else Call ReleaseW(hwnd&, 3) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3<>4
        '        Case 4: If i% = 3 Then Castling 4, 3: GoTo exitL Else Call ReleaseW(hwnd&, 4)
                Case Else: 'Call ShowWindow(hWnd&, SW_RESTORE): Call reParkW(True): Call BringWindowToTop(hWnd&): GoTo exitL
                            Call ReleaseW(hWnd&, from%): Call reParkW(True): 'GoTo exitL
        End Select:
                    If i% = 0 Then        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      MsgBox "*" ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
                      For i% = 2 To 4: If IsWindow(GetTBhwnd&(i%)) = 0 Then Exit For 'IsWindow |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      Next: If i% = 5 Then i% = 4 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    End If 'Else: FindForm.resetParker:
        If Not ToggleButton2.Enabled Then 'Call ReleaseW(IIf((matrix And i% = 1), 0, GetTBhwnd&(i%)), i%): _
                                           Call CollectW(hwnd&, i%): FindForm.resetParker: GoTo exitL
              If DDBarUsed Then DDBar.AddItem (GetTBhwnd(i%)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| DDBar
                                           Call ReleaseW(IIf((matrix And i% = 1), 0, GetTBhwnd&(i%)), i%)
                                           Call CollectW(hWnd&, i%): FindForm.resetParker: GoTo exitL
        End If
              If Me.tag > 0 Then Call ReleaseW(Me.tag, i%)
                 Me.tag = hWnd&: Me.Caption = getWndCaption(hWnd&): Call ShowWindow4(hWnd&): Exit Sub
exitL:         If Mid(getWndCaption$(hWnd&), 1, 1) = "^" Then setFocusOnForm ("SCForm") _
                                                         Else: If Not (fullyFilled Or i% = 4) Then Call focusMe
        Exit Sub
exceptL:         Call restoreW(hWnd&): Call BringWindowToTop(hWnd&): GoTo exitL: End Sub
                    
' Release (-)
'------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|)
Public Function ReleaseW(ByVal hWnd&, Optional i%, Optional noMinimaze As Boolean) As Boolean
               If hWnd& = 0 Or hWnd& = DDM.TBhwnd Then Exit Function Else If i% > 0 Then If GetTBhwnd&(i%) <> hWnd& Then MsgBox "no Much": Exit Function
                                               If i% > 0 Then SetTBhwnd i%, 0 Else i% = IIf(hWnd& = http_hwnd&, 1, inCollection(hWnd&)): SetTBhwnd i%, 0
        Dim unfreezFlg As Boolean: If isUnusedExcept(hWnd&) Then Call setNoHeadersH(hWnd&, True)
                   If FnFormIsLoaded("satellite") Then unfreezFlg = Not satellite.custran Like "*|" & hWnd& & "|*" Else unfreezFlg = True
                   Dim rt As rect: If LParked And i% > 2 Then GetWindowRect hWnd&, rt: If rt.Left < -1 Then _
                                                  incon rt.Right, -rt.Left: rt.Left = 0: Call SetWindowRect(hWnd&, rt) 'if hidden
        'If i% = 1 Then If matrix Then Matrix_del hwnd& 'for 1 only (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        Call historySave(hWnd&): If Not ToggleButton2.Enabled Then unFreeze hWnd&, unfreezFlg: tbc "TEST": minimizeW hWnd&, , Not noMinimaze Else unFreezeIfXP hWnd& 'AllOnTop()
        SetWindowRgn hWnd&, 0, True: Call dispMarkUp_hWnd(hWnd&): Call dispSort: iMapUpdH hWnd&, PF.c_Set, "-": FullRelease i%: ReleaseW = True: End Function
'DeepCleaning
Sub FullRelease(i%): hWnd& = GetTBhwnd&(i%): With PF: tSet$ = .Controls("ImageWS" & (.c_Set - 1)).tag 'c_SetRelease
                    .Controls("ImageWS" & (.c_Set - 1)).tag = Replace(tSet$, "|" & hWnd& & "|", "|0|"): End With: End Sub
Public Sub ReleaseAllW(): Call meUnHook: For i% = 1 To 5: Call ReleaseW(GetTBhwnd&(i%), i%): Next: End Sub
Private Function RecompainW() As Boolean: If Not (IsWindow(bl_hwnd) = 0 And br_hwnd <> 0) Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        RecompainW = Castling(4, 3): End Function 'bl_hwnd = br_hwnd: br_hwnd = 0: Call BringWindowToTop(bl_hwnd): Call reParkW(True):

'------------------------------------------------
Rem Showing
'------------------------------------------------                       '1-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub checkDDMatrix(i%): If DDBarUsed Then If DDBar.isMatrix Then If DDM.num > 1 Then If i% = 1 Then DDBar.MatrixOff _
                                                                   Else If i% = 5 Then SCSForm.SetRT IIf(SCSForm.LFixed, "3x", "1m2"), DDBar.me_hwnd: DDBar.myRt$ = "1m2": DDBar.reBuild True
End Sub 'If inVals(i%, 1, 5)  -  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| DDBar.isMatrix
Rem: |fffd|.|fffd|. "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Collect
Public Sub ShowWindow4(hWnd&, Optional RtMode$, Optional d0 = True): If Not d0 Then Exit Sub
         If IsWindow(hWnd&) = 0 Then Call dispCneanUp: Exit Sub Else Call restoreW(hWnd&): setWindowVisible hWnd&, True 'show window
'        Call GetWindowRect(Me.t_hwnd, rt): rt.Top = rt.Bottom: rt.Bottom = ScBm%: rt.Left = rt.Right: rt.Right = ScRt%:
'        Call SetWindowRect(hwnd&, rt):
         If RtMode$ <> "" Then setNoHeadersH hWnd&, True
         SetRT blank(RtMode$, "4x"), hWnd&: Call BringWindowToTop(hWnd&): Call focusMe: End Sub
Public Sub ShowTargetW(): ShowWindow& t_hwnd, SW_SHOW&: End Sub         '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|         '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub HideAllFree(): dispGetTaskList: With Sheets("Dispetcher_"): For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For
               hWnd& = .Cells(r&, 2): L0M "das hwnd& = 264156":
               If SCSForm.inCollection%(hWnd&) = 0 Then
                 If Not DDBarUsed Then SCSForm.cornerIt hWnd&, True, False Else _
                 If DDBar.Contains(hWnd&) Then SCSForm.setWindowVisible hWnd&, False _
                                          Else SCSForm.cornerIt hWnd&, True, False  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| pl\sql |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
               End If: Next: End With: End Sub
Private Sub listScratched(cW%, rt As rect): If cW% = 0 Then Exit Sub Else cW% = IIf(between(cwnd&, 2, 4), cwnd&, cW%): nW% = cW%
                For i% = 1 To 2: nW% = IIf(nW% = 4, 2, nW% + 1): If GetTBhwnd(nW%) <> 0 Then cwnd& = nW%: _
                  hWnd& = GetTBhwnd(nW%): Call SetWindowRect(hWnd&, rt): Call BringWindowToTop(hWnd&): Call focusMe: Exit Sub
                Next i%: End Sub                                   'rt - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| IsFullWindow%
Sub reSetUncollected(hWnd&): setNoHeadersHif hWnd&, 2: FreezeIf Not osXP, hWnd&: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub SpinCollection(Shift%, hWnd&): If Shift = 1 Then i% = inCollection(hWnd&): j% = FindForm.nxt_pos: GoTo SpinL '(Parker on)
                           Dim rt As rect: If Shift% = 2 Then listScratched IsFullWindow%(rt), rt: Exit Sub 'Scratched mode only
                                           If Shift% = -1 Then i% = inCollection(hWnd&): j% = IIf(i% = 0, i%, IIf(i% = 1, 3, 4)) _
                        Else: i% = IIf(LParked Or GetTBhwnd(4) = 0 Or Shift% = 1, 2, 3): j% = IIf(GetTBhwnd(4) = 0 Or Shift% = 1, 3, 4)
            If Shift% = -1 Then
                                Select Case i%: Case 3: If r_hwnd& = 0 Then j% = 2 'custom logic (3->2)
                                                Case 1: If br_hwnd& = 0 Then j% = 4 'custom logic (4->2)
                                End Select: End If
            i% = IIf(i% = 4, 3, i%):
SpinL:             If i% = j% Then Call reParkW(True): Exit Sub
                   H& = GetTBhwnd(i%): Call SetTBhwnd(i%, GetTBhwnd(j%)): Call SetTBhwnd(j%, H&): If twoWindows Then UserForm_Layout
                   Call reParkW(False): dispUpdateTL
End Sub
'------------------------------------------------
Rem Additional Methods
'------------------------------------------------
Function isUnusedExcept(hWnd&) As Boolean: isUnusedExcept = Not hasIt("|" & hWnd& & "|", _
                                           LoadParamBlock$("PF_Set1", "PF_Set4", "PF_Set" & PF.c_Set%)): End Function
Private Function fullyFilled() As Boolean: fullyFilled = r_hwnd& > 0 And bl_hwnd > 0 And br_hwnd > 0: End Function
Public Function IsFullWindow%(rt As rect): For i% = 2 To 4: hWnd& = GetTBhwnd(i%): If hWnd& > 0 Then Call GetWindowRect(GetTBhwnd(i%), rt): _
                                                      If rt.Top = 0 Then If rt.Left = 0 Then If rt.Bottom = ScBm% Then IsFullWindow% = i%: Exit Function
                                                    Next: End Function
Function getJot_hwnd&(): If Not useJot_prm Then Exit Function
                        getJot_hwnd& = FindWindow(vbNullString, "SlickJot (JOT) {WinKey+J}"): If getJot_hwnd& > 0 Then Exit Function
                        Shell Jot_path$ & " jot", vbNormalFocus: started = Timer
                        Do: dodelay 0.1: getJot_hwnd& = FindWindow(vbNullString, "SlickJot (JOT) {WinKey+J}")
                        Loop While getJot_hwnd& = 0 And Timer - started < 5 '5
                         If getJot_hwnd& > 0 Then setNoHeadersH getJot_hwnd&, False: freeze getJot_hwnd&
                        End Function
                        
Private Function strToRECT(s$) As rect:                         strToRECT.Bottom = prsBefore("|", s$)
                 strToRECT.Left = prsBetween|fffd|(2, "|", "|", s$): strToRECT.Right = prsBetween|fffd|(3, "|", "|", s$)
                                                                strToRECT.Top = prsAfter|fffd|(3, "|", s$): End Function
Public Function rectToStr$(rt As rect): rectToStr$ = rt.Bottom & "|" & rt.Left & "|" & rt.Right & "|" & rt.Top: End Function
Public Function SetTBhwnd(i%, s&) As Boolean: If Not between(i%, 1, 5) Then Exit Function 'If s& = 0 Then Call ShowWindow(GetTBhwnd&(i%), SW_MINIMIZE)
                                            If t_hwnd > 0 Then If s& = SCForm.t_hwnd Then das: Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Target (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
            If between(i%, 1, 4) Then If FnFormIsLoaded("FindForm") Then FindForm.Controls("ImageW" & i%).ControlTipText = s& & ": " & getWndCaption$(s&)
                            vitrage_Remove i%, s& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If s& <> 0 Then vitrage.Add Item:=s&, Key:=CStr(i%): _
                            If DDBarUsed Then If DDBar.Contains(s&) Then DDBar.delItem s& '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar
            Select Case i%: Case 1: http_hwnd& = s: Case 2: r_hwnd& = s: Case 3: bl_hwnd& = s: Case 4: br_hwnd& = s: Case 5: d_http_hwnd& = s: End Select: SetTBhwnd = True: End Function
Public Function GetTBhwnd&(ByVal i%): Dim s&: Select Case i%: Case -1: s& = t_hwnd&: Case 0, 1: s& = http_hwnd&: Case 2: s& = r_hwnd&: Case 3: s& = bl_hwnd&:
                                                              Case 4: s& = br_hwnd&: Case 5: s& = d_http_hwnd&: End Select: GetTBhwnd& = s&: End Function

'************************************************
Rem |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (controls)
'************************************************
'Private Sub CheckBox1_Click() - |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd|.
'

Private Sub CheckBox1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
hooking = Not CheckBox1: ToggleButton1.SetFocus: SaveParam "hooking", hooking 'SaveSetting 5, 1, hooking - |fffd| |fffd||fffd||fffd||fffd||fffd| (unrestoreable)
If hooking Then Call updHook Else Call meUnHook
Unload Me: End Sub

Private Sub ToggleButton1_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| #2 (|fffd||fffd||fffd| MultiKey-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Dim brFl As Boolean: brFl = br_hwnd > 0: hWnd& = kHwnd&: 'MsgBox Shift & ":" & KeyCode '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (br_hwnd, bl_hwnd)
If DDBarUsed Then If fHwnd& = DDBar.me_hwnd Then Exit Sub '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl-Shift |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Select Case KeyCode
'Case 67: 'Ctrl + <C> (KeyCode = 67) - |fffd||fffd||fffd| Copy |fffd| HTTP
'          If psdCtrlFlg Then psdCtrlFlg = False: Exit Sub
Case 9: '<Tab> - FullScreen
          ignCtrlFlg = False: ignShftFlg = False
          If Shift = 3 Or (psdShftFlg And psdCtrlFlg) Then ignShftFlg = True: ignCtrlFlg = True: GoTo Ctrl_Shft_Tab_L  '<Ctrl>+<Shift>+<Tab>
          If Shift = 1 Or psdShftFlg Then ignShftFlg = True: GoTo Shft_Tab_L '<Shift>+<Tab>
          If Shift = 2 Or psdCtrlFlg Then ignCtrlFlg = True: GoTo Ctrl_Tab_L '<Ctrl>+<Tab>
          If Shift = 0 Then
              If hWnd& = t_hwnd Then tmp_hwnd& = zero(br_hwnd, bl_hwnd): FII2 bl_hwnd, br_hwnd, brFl, r_hwnd: SetTBhwnd 2, tmp_hwnd&: _
                                     tmp_hwnd& = http_hwnd: SetTBhwnd 1, d_http_hwnd: SetTBhwnd 5, tmp_hwnd&: reParkW: FindForm.resetParker: Exit Sub
              If dispValidCaption(hWnd&) And Shift = 0 Then Scratch2Fit hWnd&
          'Else: Call SpinCollection(Shift, hwnd&)
          End If
Case 16: '<Shift> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If hWnd& <> t_hwnd& Then Exit Sub '!veryHOTKey!
          If ignShftFlg Then ignShftFlg = False: psdShftFlg = True: Exit Sub
          If Shift = 2 Then ignCtrlFlg = True: GoTo Ctrl_Shft_L '<Ctrl>+<Shift>
          If hWnd& = t_hwnd Then tmp_hwnd& = zero(br_hwnd, bl_hwnd): FII2 bl_hwnd, br_hwnd, brFl, r_hwnd: SetTBhwnd 2, tmp_hwnd&: reParkW: FindForm.resetParker: Exit Sub
Case 17: '<Ctrl> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| OR Collect
          If hWnd& <> t_hwnd& Or Not psdCtrlFlg Then Exit Sub '!veryHOTKey!
          If ignCtrlFlg Then ignCtrlFlg = False: psdCtrlFlg = True: Exit Sub Else psdCtrlFlg = False '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          If Shift = 1 Then ignShftFlg = True: GoTo Ctrl_Shft_L '<Ctrl>+<Shift>
         'bl_hwnd <-> d_http_hwnd
         tmp_hwnd& = zero(br_hwnd, bl_hwnd): FII2 bl_hwnd, br_hwnd, brFl, d_http_hwnd: SetTBhwnd 5, tmp_hwnd&: reParkW: FindForm.resetParker
End Select: KeyCode = 0: Exit Sub
Ctrl_Shft_L: If hWnd& <> t_hwnd& Then Exit Sub '<Ctrl>+<Sift> = http_hwnd <-> d_http_hwnd - |fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| <Ctrl> |fffd||fffd| d_window
              If d_http_hwnd& > 0 Then temp_hWnd& = http_hwnd&: SetTBhwnd 1, d_http_hwnd&: SetTBhwnd 5, temp_hWnd&: reParkW
              psdCtrlFlg = False: Exit Sub
Ctrl_Tab_L: If hWnd& <> t_hwnd& Then Exit Sub '<Ctrl>+<Tab>
               tmp_hwnd& = r_hwnd: SetTBhwnd 2, http_hwnd: SetTBhwnd 1, tmp_hwnd&:             If http_hwnd = 0 Then reParkW: FindForm.resetParker: Exit Sub
               tmp_hwnd& = zero(br_hwnd, bl_hwnd): FII2 bl_hwnd, br_hwnd, brFl, d_http_hwnd: SetTBhwnd 5, tmp_hwnd&: reParkW: FindForm.resetParker
              psdCtrlFlg = False: Exit Sub
Shft_Tab_L: If hWnd& <> t_hwnd& Then Exit Sub '<Shift>+<Tab>
                  tmp_hwnd& = zero(br_hwnd, bl_hwnd): FII2 bl_hwnd, br_hwnd, brFl, http_hwnd: SetTBhwnd 1, tmp_hwnd&:   If http_hwnd = 0 Then reParkW: FindForm.resetParker: Exit Sub
                  tmp_hwnd& = r_hwnd: SetTBhwnd 2, d_http_hwnd: SetTBhwnd 5, tmp_hwnd&: reParkW: FindForm.resetParker
              psdShftFlg = False: Exit Sub
Ctrl_Shft_Tab_L: If hWnd& <> t_hwnd& Then Exit Sub '<Ctrl>+<Shift>+<Tab>
                  tmp_hwnd& = r_hwnd: SetTBhwnd 2, http_hwnd: SetTBhwnd 1, zero(br_hwnd, bl_hwnd): If http_hwnd = 0 Then reParkW: FindForm.resetParker: Exit Sub
                           FII2 bl_hwnd, br_hwnd, brFl, d_http_hwnd: SetTBhwnd 5, tmp_hwnd&:                        reParkW: FindForm.resetParker
              psdCtrlFlg = False: psdShftFlg = False: Exit Sub
End Sub
Private Sub ToggleButton1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer): ls "~", "SCSKeyDown"
db_ Shift & ":" & KeyCode
Select Case Shift '|fffd||fffd||fffd| t_hwnd
       Case 6: If KeyCode = 17 Then Exit Sub 'Alt+Ctrl+ - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Windows
       Case 4: 'Alt
                If KeyCode = 91 Then WinTBswitcher: stopAH = True: Exit Sub 'WinTBSwither <Win>
                If KeyCode = 192 Then KeyCode = 0: AltNumPressed_common 0: saveTargetPos: Exit Sub 'both <~>
                If KeyCode = 49 Then KeyCode = 0: AltNumPressed_common 1: saveTargetPos: Exit Sub  '#1   <1>
                If KeyCode = 50 Then KeyCode = 0: AltNumPressed_common 2: saveTargetPos: Exit Sub  '#2   <2>
       'Case 2: psdCtrlFlg = True: Exit Sub 'Ctrl + <C> (KeyCode = 67) - |fffd||fffd||fffd| Copy |fffd| HTTP
End Select
If isFullPartOf(CStr(KeyCode), "9_13_16_17_27_32_38_40_46_49_50_51_52_53_54_55_56_57_66_67_68_70_71_72_73_74_75_76_77_79_80_81_82_83_84_86_87_96_97_98_99_100_101_102_106_107_109_110_111_122_186_187_188_189_190_191_220", "_") Then '|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
      If processSCSFormKeyDown(KeyCode, Shift) Then KeyCode = 0: focusMe 'Else MsgBox 1
      Exit Sub '|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP?
Else: Call customSCS_KeyDown: L0M KeyCode: End If: End Sub '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| KeyCode

Public Function processSCSFormKeyDown(KeyCode, Optional Shift%, Optional ign As Boolean, Optional hWnd&) As Boolean
ls "~", "processSCSFormKeyDown": If ign Then Exit Function Else processSCSFormKeyDown = True
Select Case KeyCode
Case 32: HideAll: Application.Visible = True: Exit Function 'MsgBox GetActiveWindow&    '<SPACE> - Me.2corner
Case 70: Ctrl_F: processSCSFormKeyDown = False: Exit Function  '<F> - All freezing
f: freezing = Not frozenFlg: SaveParam "freezing", freezing 'SaveSetting 5, 2, freezing - |fffd| |fffd||fffd||fffd||fffd||fffd| (unrestoreable)
   If frozenFlg Then unFreeze: Exit Function Else Call freeze: startWaiting Not freezing: Exit Function
Case 71: glowing True: HideAllFree '<G> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 'dispUpdateTL True, True
Case 72: If Shift = 1 Then hooking = Not hooking: updHook hooking: Exit Function '<Shift> + <H> - trigger 4 tests
Case 74: KeyCode = 0: hWnd& = getJot_hwnd&() '<J> - show Jot
         If hWnd& = 0 Then Exit Function
         If bl_hwnd = hWnd& Then
                                          SetTBhwnd 3, br_hwnd: SetTBhwnd 2, 0: pushSlickRun: reParkW: Exit Function
                            ElseIf SetTBhwnd(inCollection(hWnd&), 0) Then pushSlickRun: reParkW: Exit Function: End If
         If br_hwnd = 0 And bl_hwnd > 0 Then SetTBhwnd 2, bl_hwnd: SetTBhwnd 3, hWnd&: reParkW _
                                        Else restoreW hWnd&: cornerIt hWnd, True: SetRT "3x", hWnd&: 'pushSlickRun True
Case 75: VBEprocedureSelect "processSCSFormKeyDown"
Case 77: Select Case Shift
                Case 2: Ctrl_M
                Case 3: Ctrl_Shft_M           '<M> - Matrix mode switcher
                Case Else: If IsWindowVisible(sag(p_hwnd&, GetParent(GetFolderViewHwnd&))) Then Matrix_trn Not matrix _
                                         Else HideDDBarIf: Application.Run "HLPS.xls!CaptureWallpapers", s_freez: ShowWindow& t_hwnd, SW_SHOW&: _
                                              Schedule 1, "ShowTargetW" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" :reParkW
         End Select
Case 38: Call listHistoryW_byScroll(1): Exit Function 'UP arrow
Case 40: Call listHistoryW_byScroll(-1): Exit Function 'DN arrow
'Case 33: SCSForm.listHistoryW_byScroll 1, True: FindForm.focusMe: Exit Sub  'PGUP
'Case 34: SCSForm.listHistoryW_byScroll -1, True: FindForm.focusMe: Exit Sub 'PGDOWN
Case 81: Call test_Window_underCurs: Exit Function '<Q> - hwnd& info
Case 83: Call twoWindowsSwitcher: Exit Function '<S> - Split 2 twoWindows
Case 86: If Shift = 0 Then openAsW Else openAsWtree '<V>
Case 122: '<F11>|<Enter> - fast VBA ', 13 'IsWindowVisible&(vb_hwnd&) = 0 Not Application.VBE.MainWindow.Visible
L13:   If IsWindowVisible&(vb_hwnd&) = 0 Then ShowEditor: Exit Function 'Else Application.VBE.MainWindow.Visible = False
       If KeyCode = 13 Then load_temporal_replaced_hwnd 3
          'If hwnd& > 0 Then If inCollection(hwnd&) = 0 Then SCSForm.CollectW hwnd&, 3
          SCSForm.ReleaseW vb_hwnd&: Application.vbe.MainWindow.Visible = False
       '   If inCollection(hwnd&) = 0 Then SCSForm.CollectW hwnd&, 3 _
       '                              Else SCSForm.ReleaseW vb_hwnd&: Application.VBE.MainWindow.Visible = False
       'If KeyCode = 13 Then dispDestroyWindow vb_hwnd&, True, 3 Else Application.VBE.MainWindow.Visible = False
          '_ Application.VBE.MainWindow.Visible = False: SCSForm.CollectW CLng(prsAfter("|", LoadParam("TBhwnd2save"))), 3
          '_ If KeyCode = 13 Then dispDestroyWindow vb_hwnd&, True, 3 Else Application.VBE.MainWindow.Visible = False: 'ReleaseW vb_hwnd&: FindForm.resetParker: vb_hwnd& = 0: Me.reDraw: reParkW 'Me.HideTargetW:
       FindForm.resetParker: dispGetTaskList: Exit Function
Case 106:
L106:     Matrix_collect_all_free: Exit Function '<*> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Set'|fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Case 111: Matrix_collect_all_used: Exit Function '</> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Set'|fffd||fffd| |fffd||fffd||fffd||fffd|
Rem: Matrix (d_http_hwnd) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <-><+/=><|>
Case 189: Y_split = False: reParkW: Exit Function
Case 187: If matrix Or d_http_hwnd > 0 Then pivot_d = Not pivot_d: reParkW: Exit Function
Case 220: Y_split = True: reParkW: Exit Function
End Select: LM "pre-hwnd"
Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| hwnd& ->
If hWnd& = 0 Then
    Dim tPT As POINTAPI, t_h&: GetCursorPos tPT: t_h& = WindowFromPoint(tPT.x, tPT.Y): If t_h& = 0 Then Exit Function
    'If KeyCode = 84 Then wC$ = getWndCaption$(hwnd&) 'If wC$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then 'Task Bar transparency
    LM "ph-1": hWnd& = GetTopParentH(t_h&): End If: kHwnd& = hWnd&: fHwnd& = GetParent(t_h&)
If isFullPartOf(CStr(KeyCode), "106", "_") Then GoTo processL _
    Else If getWndCaption$(hWnd&) = "" Then If Not isFullPartOf(CStr(KeyCode), "76_186_188_190_191", "_") Then Exit Function _
                                       Else If Not hWnd& = GetParent(GetParent(GetFolderViewHwnd&)) Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd|)
LM "HWND": Dim |fffd|flg As Boolean 'http-|fffd||fffd||fffd||fffd|
    If Left(getWndCaption$(hWnd&), 1) = "^" Then
            |fffd|flg = True: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: Esc, <Delete> = Num"-"
            If GetActiveWindow& <> me_hwnd And Not isFullPartOf(CStr(KeyCode), "27_46_67_68_109", "_") Then processSCSFormKeyDown = False: Exit Function 'http_window
'hwnd& = IIf(getWndCaption$(hwnd&) = "Program Manager", t_h&, hwnd&) ': MsgBox wC$ & " ^ " & getWndCaption$(hwnd&): Exit Sub
    End If: LM "KC-CASE"
If KeyCode = 13 Then GoTo L13 'If hwnd& = t_hwnd& Then GoTo L13 Else KeyCode = 107 '|fffd||fffd||fffd||fffd||fffd| Ctrl - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| DDbar/satellite
If KeyCode = 84 Then '<T> - freeze One / All parked on target (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Transparency)
   LM "<T> IN": If t_h& = SCForm.me_hwnd Then freeze: LM "<T> out1": Exit Function
   If hWnd& = t_hwnd& Then If t_h& = me_hwnd Then wcaption = Application.Caption: set_Transparent: LM "<T> out2": Exit Function Else GoTo f
                           If freeze(hWnd&) Then frozenFlg = inCollection(hWnd&) > 0: LM "<T> out3": Exit Function Else unFreeze hWnd&: LM "<T> out4": Exit Function
ElseIf isFullPartOf(CStr(KeyCode), "76_191_186_188_190", "_") Then
    p_hwnd& = GetParent(GetFolderViewHwnd&) 'hWnd& = t_hwnd& - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| TARGET (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Doppel)
    flash_hwnd& = GetParent(p_hwnd&): If t_h& = me_hwnd Then If FindForm.Image8.BorderStyle = 1 Then hWnd& = flash_hwnd& _
                                                                Else If isDoppel Then hWnd& = t_hwnd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If s_freez = 0 Then s_freez = get_freezind_deep '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case KeyCode '<?> '<<> '<>>
           Case 76: '<L> - LookUp (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd| WinTaskBar)
                    If hWnd& = flash_hwnd& Or hWnd& = t_hwnd& Then
                        hWnd = http_hwnd:    If getWndCaption$(hWnd) Like "PL/SQL Developer *" Then DDBar.AddItem hWnd, , , 1: setWindowVisible hWnd, False Else minimizeW hWnd
                        hWnd = d_http_hwnd&: If getWndCaption$(hWnd) Like "PL/SQL Developer *" Then DDBar.AddItem hWnd, , , 5: setWindowVisible hWnd, False Else minimizeW hWnd
                        If DDBarUsed Then If Not DDBar.isHidden Then DDBar.HideBar 'ShowWindow& DDM.TBhwnd, SW_HIDE&: If FnFormIsVisible("DDBar") Then DDBar.HideBar
                    End If
           Case 186: Application.Run "HLPS.xls!ShowFrmWallpapers" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Captire
           Case 191: '<?> Flash |fffd||fffd||fffd|. (> |fffd| < - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, <C>, "<<", ">>" - |fffd||fffd||fffd||fffd|.))
                     If hWnd& = flash_hwnd& Then
                       If IsWindowVisible(p_hwnd&) Then ShowWindow p_hwnd&, SW_HIDE& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <C> |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                       flash% = 1: With FindForm.Image8: .BorderStyle = 1: .BorderColor = &H80C0FF: End With
                     Else: AddCusTranS hWnd&: End If 'Common
                     s_freez = 50: SetTransparent hWnd&, s_freez: Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd|-freeze
' db_ flash% & ":" & s_freez: If flash% <> 0 Or s_freez = 0 Then flash% = 0: s_freez = 50: SetTransparent hwnd&, s_freez: Exit Function    '|fffd||fffd||fffd||fffd||fffd||fffd|-freeze
'                  If s_freez = 50 Then flash% = 1: db_ "Flash started" Else s_freez = 50: SetTransparent hwnd&, s_freez 'FlashWallpapper effect activation
            Case 188: If s_freez > 25 Then decon s_freez, 2: SetTransparent hWnd&, s_freez: _
                           If hWnd& <> flash_hwnd& Then AddCusTranS hWnd& _
                           Else If flash% = 1 Then flash% = -1: FindForm.Image8.BorderColor = &H80000002 _
                                              Else flash% = 0: FindForm.Image8.BorderStyle = 0                       '<<> - -1
            Case 190: If s_freez < 254 Then incon s_freez, 2: SetTransparent hWnd&, s_freez: _
                           If hWnd& <> flash_hwnd& Then AddCusTranS hWnd& _
                           Else If flash% = -1 Then flash% = 1: FindForm.Image8.BorderColor = &H80C0FF _
                                               Else flash% = 0: FindForm.Image8.BorderStyle = 0                      '<>> - +1
End Select: End If
If KeyCode = 72 Then
  If Shift = 4 Then '<Alt> + <H> - very Hidden
    If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| '" & getWndCaption$(hWnd&) & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNoCancel) = vbYes Then SCSForm.setWindowVisible ifequal(hWnd, t_hwnd, 0), False
  Else: If Not setNoHeadersH(hWnd&) Then setNoHeadersH hWnd&, True: Exit Function '<H> - Hidden
End If: Exit Function: End If                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| Doppel
If Not (dispValidCaption(hWnd&) Or hWnd& = SCForm.t_hwnd) Then If Not KeyCode = 27 Then Exit Function Else _
                                                               If getWndCaption$(hWnd&) <> "Program Manager" Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
processL: Select Case KeyCode
Case 9: '<Tab> - FullScreen
        ignCtrlFlg = True: ignShftFlg = True
Case 87: '<W> - Wild Screen
         If DDM.num = 1 Or (hWnd& = t_hwnd And Not (d_http_hwnd > 0 And http_hwnd > 0)) Or |fffd|flg Then
            If hWnd& = t_hwnd Then switchWmode
            Exit Function
         End If: Call HideTargetW: AllShowWindow SW_MINIMIZE
 Dim rt As rect: If hWnd& = t_hwnd Then restoreW d_http_hwnd&: SetRT "5", d_http_hwnd&: _
                                        restoreW http_hwnd&: Scratch2Fit http_hwnd: Exit Function 'double 5
                 rt.Top = Max(DDM.Top, ScTp%): rt.Bottom = Max(DDM.Bottom, ScBm%): restoreW hWnd&: WildW& = hWnd&
                 rt.Left = Min(DDM.Left, ScLt%): rt.Right = Max(DDM.Right, ScRt%): SetWindowRect hWnd&, rt
Case 82: If hWnd& = t_hwnd Then dispGetTaskList: Exit Function '<R> Refrash
'Case 85: '<U> - |fffd||fffd||fffd||fffd|c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|                   '<R> Release
      If inCollection(hWnd&) Then ReleaseW hWnd&, i%: FindForm.resetParker: restoreW hWnd&:
                                  setNoHeadersH hWnd&, True: unFreeze hWnd& '|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Case 27: '<Esc> - |fffd||fffd||fffd||fffd|c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If ToggleButton2.Enabled Then
            cwnd& = get_cwnd&: If IsWindowVisible(get_cwnd&) Then If Not inCollection(cwnd&) Then minimizeW cwnd&: unFreeze cwnd&
            Call meUnHook: Unload Me: Exit Function: End If: i% = inCollection(hWnd&)
      If matrix Then If hWnd& = t_hwnd Then GoTo L106 Else If Matrix_has(hWnd&) Then Matrix_del hWnd&: minimizeW hWnd&: reParkW True: Exit Function
      If i% > 0 Then                                                                                      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If hWnd& = vb_hwnd Then KeyCode = 13: GoTo L13 '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA
            Call ReleaseW(hWnd&, i%): If Not ToggleButton2.Enabled Then Call RecompainW: ' _
                 If i% = 2 Then Call SetTBhwnd(i%, GetTBhwnd(4)): Call SetTBhwnd(4, 0) 'RecompW ++
            Call minimizeW(hWnd&): Call historySave(hWnd&): Call reParkW(True)
            If i% = 2 Then If Left(getWndCaption$(hWnd&), 1) = "^" Then load_temporal_replaced_hwnd 2
      ElseIf hWnd& <> t_hwnd Then
            If getWndCaption$(hWnd&) = "Program Manager" Then minimizeW GetParent(t_h&): Exit Function
            Call minimizeW(hWnd&): Call historySave(hWnd&): Call dispAddTask(hWnd&)                       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ElseIf FindForm.Inverted Then Exit Function
      Else: If Not EscapedFn Then If hWnd& = t_hwnd& Then If Collection2Str$ <> "|0|0|0|0|0|" Then _
                If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbQuestion + vbOKCancel) = vbOK Then Call ReleaseAllW: iMapFullUpd: '|fffd||fffd||fffd||fffd|'
      End If
      FindForm.set_bk_color: Call updHook: Call focusMe: FindForm.resetParker
Case 16: '<Shift>
          If hWnd& <> t_hwnd& Then If inCollection(hWnd&) > 0 Then Call SpinCollection(-1, hWnd&): If br_hwnd = 0 Then FindForm.ImageW4.SpecialEffect = 6
Case 17, 107: '<Ctrl>/Num"+" - |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Parker on)
          If t_h& = SCForm.me_hwnd Then          'SCSForm.freeze GetTBhwnd&(3), , wdeep%:
             fdeep% = SCSForm.get_freezind_deep%: SCSForm.freeze last_active_hwnd&, , fdeep%: _
                                        If Not smart_freezing Then smart_freezing_start                           'custom trans_level *unlock*
                            '|fffd||fffd||fffd||fffd||fffd||fffd| 2 - freeze 0, , 255 - Min(Max(Abs(SCForm.deep), 10), 240) + 10: _
                                        smart_freezing = False:                                                   'custom trans_level *locked*
                              Exit Function: End If
          If KeyCode = 17 Then psdCtrlFlg = t_h& = me_hwnd _
                          Else If hWnd& = t_hwnd& Then Matrix_collect_new_ones: Exit Function 'Num"+" If matrix Then
          'If IsFullWindow% = 0 And hwnd& <> t_hwnd& Then Call Manager(hwnd&, True, Shift = 3): Exit Function 'IIf(r_hwnd& = 0, True, IIf(bl_hwnd& = 0, True, False)))
          If IsFullWindow%(rt) = 0 And hWnd& <> t_hwnd& And hWnd& <> SCForm.t_hwnd& Then CollectW4 (hWnd&): Exit Function
'#1#2#3#4#5 - helf pos |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| | |fffd||fffd||fffd||fffd||fffd||fffd| # (|fffd| |fffd||fffd| DS)
Case 49 To 53, 96 To 99: If KeyCode > 90 Then KeyCode = KeyCode - 47: adk = True '|fffd||fffd||fffd|. keyboard + NumLock
        If hWnd& <> t_hwnd And Not adk Then SetRT decode(KeyCode, 49, "1|", 50, "|2", 51, "3_", 52, "_4", 53, "5"), hWnd&: Exit Function
        If KeyCode <> 53 Then 'DS 1-4 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Num:0-3)
           'If matrix Then If KeyCode = 49 Then If Matrix_has(hwnd&) Then _
                             Matrix_del hwnd&: minimizeW hwnd&: reParkW True: Exit Function '<0> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Num"-" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -> FindForm
           With PF: s$ = .cMode$: .cMode$ = "DS": .ImageWSClicks decode(KeyCode, 49, 1, 50, 2, 51, 3, 52, 4) - 1, , Shift = 2: _
               If s$ <> "DS" Then .cMode$ = s$: PF_SetSpecialEffect ActiveSheet.Index                              'Ctrl+ = noCleanF
           End With: End If
'ERU - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Num:4,5,6)
Case 100 To 102: With PF: .setMode "Ws": .ImageWSClicks (KeyCode - 99): End With
'#6#7#8#9 - |fffd||fffd||fffd||fffd||fffd|. pos |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Case 54 To 57: If hWnd& <> t_hwnd Then SetRT decode(KeyCode, 54, "_|", 55, "|_", 56, "_^", 57, "^_"), hWnd&
Case 66: If Not dispValidCaption(hWnd&) Then Exit Function
         On Error Resume Next: DDBar.Recovery: DDBar.AddItem hWnd&, , , inCollection(hWnd&): 'HideMe:
                               reParkW True: FindForm.resetParker: '<B> - 2 DDBar = satellite.Image16_Click
'test
Case 67: Select Case Shift '<C>
                Case 4: If hWnd& <> t_hwnd Then cornerIt hWnd&
                Case 2: processSCSFormKeyDown = False: Exit Function '<Ctrl> + <C> - |fffd||fffd||fffd| Copy |fffd| HTTP
'                        If |fffd|flg Then                   'dob.PutInClipboard
'                            Set dob = New DataObject: dob.GetFromClipboard: If dob.GetFormat(1) Then db_ dob.GetText Else db_ "-"
'                            Set dob = Nothing
'                        End If
                Case Else: ShowWindow sag(p_hwnd&, GetParent(GetFolderViewHwnd&)), IIf(IsWindowVisible(p_hwnd&), SW_HIDE&, SW_SHOW&)
                                                                                If Not IsWindowVisible(p_hwnd&) Then flash% = 0: FindForm.Image8.BorderStyle = 0
         End Select
Case 68: If DDM.num = 1 Or matrix Or hWnd& = t_hwnd& Then Exit Function _
            Else ReleaseW hWnd&: ReleaseW d_http_hwnd&, 5: SetTBhwnd 5, hWnd&: '_ - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| d_http |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| http
                 If http_hwnd& = 0 Then SetTBhwnd 1, DDM.TBhwnd  'FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|") '"SlickJot (JOT) {WinKey+J}"
         Call reParkW: FindForm.resetParker '<D> = dual_http
Case 73: Call SetTopMostWindow(hWnd&, False) '<I> = Off TOP
Case 79: Call SetTopMostWindow(hWnd&, True) '<O> = On TOP (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Case 80: MsgBox hWnd& & "-x" & tPT.x & ":y" & tPT.Y '<P>
Case 109: If matrix Then If hWnd& = t_hwnd Then Matrix_full_clean: Exit Function 'Num <-> clean matrix|fatality
          If DDBarUsed Then DDBar.dellALLItems: Exit Function
          dispDestroyWindow hWnd&, Left(getWndCaption(hWnd&), 1) = "^"
Case 110: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| DS (~|fffd||fffd||fffd||fffd||fffd| ERU - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) '<Num .>
         If FnFormIsLoaded("FindForm") Then FindForm.UserForm_Click
Case 46: If matrix Then If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbWarning, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = vbNo _
                   Then Exit Function Else Matrix_full_destroy '<Delete>
End Select: End Function

Private Sub ToggleButton1_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal DragState As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| control (|fffd||fffd| |fffd||fffd||fffd||fffd|)
End Sub

'Private Sub ToggleButton2_Change(): Call TB_Change(2): End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Value (|fffd||fffd||fffd||fffd||fffd| Click)
'Private Sub ToggleButton3_Change(): Call TB_Change(3): End Sub
'Private Sub ToggleButton4_Change(): Call TB_Change(4): End Sub
Private Sub TB_Change(i%): With Me.Controls("ToggleButton" & i%): .value = Not (.Caption = i%): End With: End Sub

Private Sub ToggleButton1_Click(): If Me.tag = "" Then Exit Sub 'ini
If Me.tag > 0 Then Me.tag = "": Me.Caption = "    / ": Exit Sub '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If Not ToggleButton1 And SCForm.Tag = "" Then _
'With SCForm: Call GetWindowRect(.t_hwnd, rt): rt.Top = IIf(rt.Top > 0, rt.Top, 15): .Tag = rectToStr$(rt): End With 'iniTag +
'Call parkedUp(ToggleButton1):
End Sub


'Public Sub parkedUp(topMe As Boolean): Dim rt As RECT: With SCForm: 'full|window
'If topMe Then
'   Call GetWindowRect(.t_hwnd, rt): If rt.Top <> 0 Then .Tag = rectToStr$(rt): .Hide: rt.Top = 0: rt.Left = ScLt: Call SetWindowRect(.t_hwnd, rt)
'Else: rt = strToRECT(.Tag): .Show vbModeless: Call SetWindowRect(.t_hwnd, rt): .reDraw: End If: Call set_flowBar: Call reParkW(True): End With: End Sub

Private Sub ToggleButton2_Click(): Call TB_Click(2): End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Value

Private Sub ToggleButton3_Click(): Call TB_Click(3): End Sub
Private Sub ToggleButton4_Click(): Call TB_Click(4): End Sub

Private Sub TB_Click(i%): With Me.Controls("ToggleButton" & i%): If Me.tag = "" Or tbc_flg Then Exit Sub
    Dim tc$, th&: th& = GetTBhwnd&(i%): If th& <> 0 Then tc$ = .Caption: Call ReleaseW(th&, i%)     'release
    On Error GoTo errL '*TEMP*
    If Me.tag <> 0 Then minimizeW th&: Call CollectW(Me.tag, i%): .Caption = Me.Caption Else If GetTBhwnd&(i%) = 0 Then .Caption = i%
    tbc_flg = True: Call TB_Change(i%): Me.tag = th&: Me.Caption = IIf(th& = 0, "    / ", tc$)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If i% = 3 Then If RecompainW() Then .Caption = ToggleButton4.Caption: .value = True: _
                                                   ToggleButton4.Caption = 4: ToggleButton4.value = False: Set ToggleButton4.Picture = Nothing
    On Error Resume Next: _
      If GetTBhwnd&(i%) = 0 Then Set .Picture = Nothing Else Set .Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\" & CStr(GetTBhwnd&(i%)) & ".ico")
    'Call ShowWindow(th&, SW_RESTORE):Call BringWindowToTop(th&):
    tbc_flg = False: End With: ToggleButton1.SetFocus: Call UserForm_Layout: Exit Sub
errL:     Unload Me: End Sub
    
'* HistoryW
'**********
Private Sub historySave(hWnd&): If hWnd& = 0 Or hWnd& = vb_hwnd Then Exit Sub
                                If historyW$ = "" Then historyW$ = "|" Else historyW$ = Replace(historyW$, "|" & CStr(hWnd&) & "|", "|")
                                                       historyW$ = historyW$ & CStr(hWnd&) & "|": SaveParam "historyW", historyW$: End Sub
Public Sub historyLeave(hWnd&): If hWnd& = 0 Then Exit Sub Else If hWnd& = cwnd& Then cwnd& = 0
                                    historyW$ = Replace(historyW$, "|" & CStr(hWnd&) & "|", "|"): SaveParam "historyW", historyW$: End Sub
Public Sub listHistoryW_byScroll(dir%, Optional noForm As Boolean): 'If br_hwnd& + bl_hwnd& = 0 Then Exit Sub 'bottom |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|))
If matrix Then historyW_bk$ = historyW$: historyW$ = http_mtrx$
retryL: If Len(historyW$) > 1 Then
                                    LM historyW$ & " " & dir% & " " & cwnd& & " " & IsWindow(cwnd&):
                                    If IsWindow(cwnd&) = 0 Then
                                       Call historyLeave(cwnd&): cwnd& = 0: If Len(historyW$) < 2 Then Exit Sub '"|"
                                       s$ = prsBetween|fffd|(IIf(dir% = 1, 1, prsCount("|", historyW$) - 1), "|", "|", historyW$) 'listHwnd used || closed - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    Else: s$ = prsBetween|fffd|(prsCount("|", prsBefore("|" & CStr(cwnd&) & "|", historyW$)) + 1 + dir%, "|", "|", historyW$)
                                       FindForm.set_bk_color: If s$ = "" Then Call minimizeW(cwnd&): cwnd& = 0: If ToggleButton2.Enabled Then Unload Me _
                                                                                                                Else reParkW True: focusMe: Exit Sub '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                    End If
                              Else: LM "noHist": Exit Sub: End If '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim nwnd&: nwnd& = blank(s$, 0): LM historyW$ & " " & dir% & " " & CStr(nwnd&) & " " & CStr(cwnd&)
If IsWindow(nwnd&) = 0 Or inCollection(nwnd&) > 0 Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| history
                             historyW$ = Replace(historyW$, "|" & CStr(nwnd&) & "|", "|"): GoTo retryL
                       Else: 'Call ShowWindow(nwnd&, SW_RESTORE): 'next window
                             'Call GetWindowRect(Me.t_hwnd, rt): rt.Top = rt.Bottom: rt.Bottom = ScBm%:
                             '                                   rt.Left = rt.Right: rt.Right = ScRt%: Call SetWindowRect(nwnd&, rt)
                             'Call GetWindowRect(IIf(br_hwnd <> 0, br_hwnd&, bl_hwnd&), rt): Call SetWindowRect(nwnd&, rt)
                             Call ShowWindow4(nwnd&): Call minimizeW(cwnd&): cwnd& = nwnd&: BringWindowToTop nwnd&: 'Call focusMe
                             If Not noForm Then If Not ToggleButton2.Enabled Then Call Manager(t_hwnd, False, Shift = 3): Me.tag = cwnd&: Me.Caption = getWndCaption$(cwnd&) 'do Collect in one click
                             FindForm.Sensor.BackColor = FindForm.def_color&: If freezing Then If Not frozenFlg Then freeze 0, 4 'Else MsgBox frozenFlg
                       End If:
If matrix Then historyW$ = historyW_bk$:  'http_mtrx$ = historyW$: reParkW
End Sub

Public Function Fitted(hWnd&, Optional ddmFlg) As Boolean: If IsWindow(hWnd&) = 0 Then Exit Function
Dim rt As rect: GetWindowRect hWnd&, rt: 'If DDM.num = 2 Then ddmFlg = between(rt.Left + (rt.Right - rt.Left) / 2, DDM.Left, DDM.Right)
'If ddmFlg Then Fitted = rt.Top < DDM.Top And rt.Bottom > DDM.Bottom And rt.Left < DDM.Left And rt.Right > DDM.Right Else
                Fitted = rt.Top = ScTp% And rt.Bottom = ScBm% And rt.Left = ScLt% And rt.Right = ScRt% _
                      Or rt.Top = DDM.Top And rt.Bottom = DDM.Bottom And rt.Left = DDM.Left And rt.Right = DDM.Right
End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| FullScreen |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd| |fffd||fffd| dual: M|fffd|XIMASE |fffd||fffd||fffd| SetTBhwnd(1))
Public Sub Scratch2Fit(hWnd&, Optional hideWindows = True): If IsWindow(hWnd&) = 0 Then dispCneanUp: Exit Sub Else sf = Fitted(hWnd&, ddmFlg) 'S2FFlg
'Call GetWindowRect(hwnd&, rt): If rt.Top = 0 Then If rt.Left = 0 Then If rt.Bottom = ScBm% Then sf = False
'  SetWindowRgn hwnd&, 0, True: If sf Then rt.Top = ScTp%: rt.Bottom = ScBm%: rt.Left = ScLt%: rt.Right = ScRt%: GoTo exitL
If Not sf Then     'rt.Top = DDM.Top: rt.Bottom = DDM.Bottom: rt.Left = DDM.Left: rt.Right = DDM.Right
    'If ddmFlg Then SetRT "5", hwnd& Else
Dim rt As rect: rt.Top = ScTp%: rt.Bottom = ScBm%: rt.Left = ScLt%: rt.Right = ScRt%
                unFreezeIfXP hWnd&: BringWindowToTop& hWnd&: SetWindowRect hWnd&, rt
      If hideWindows Then HideTargetW: AllShowWindow SW_MINIMIZE, "|" & http_hwnd & "|" & d_http_hwnd & "|" & hWnd& & "|": focusMe '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 'restoreW hwnd& 'reSize True:
Else: If inCollection(hWnd&) = 0 Then SetRT "5", hWnd&: ReleaseW hWnd&
      Me.UserForm_Layout: focusMe
End If: End Sub

'hunting
Private Sub UserForm_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal State As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer): MsgBox "BeforeDragOver": End Sub
Private Sub UserForm_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer): MsgBox "BeforeDropOrPaste": End Sub

'************************************************
Rem |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (FORM)
'************************************************
Private Sub FORM_Events(): End Sub

Private Sub UserForm_Initialize(): With SCForm: If .scmode% = 0 Then remind: Exit Sub 'msg "no Target"
l% = 1: tag = "": LogString "in   SCSForm_Initialize", l: On Error Resume Next: dispGetTaskListIf: vitrage_Clear: On Error GoTo 0 '!customSCS_Show
            Set TargetForm = .TargetForm: SetTBhwnd 2, dispRest&(.r_hwnd, 2): SetTBhwnd 3, dispRest&(.bl_hwnd, 3): SetTBhwnd 4, dispRest&(.br_hwnd, 4):
            SetTBhwnd 1, dispRest&(.http_hwnd, 5): SetTBhwnd 5, dispRest&(.d_http_hwnd, 6): scmode% = .scmode: t_hwnd& = .t_hwnd&: historyW$ = .historyW$: _
            mLngMouseHook& = .mLngMouseHook&: vb_hwnd& = .vb_hwnd&: matrix = .matrix: http_mtrx$ = .http_mtrx$: Y_split = .Y_split: pivot_d = .pivot_d 'Restoring
    If numbOfRest% = resTry% Then
        cset$ = Replace(LoadParam("PF_Set" & LoadParam("PF_cSet")), "x", "0"): fvHwnd& = Str2Int(LoadParam("FolderViewHwnd")) 'GetFolderViewHwnd
        For i% = 1 To 5: hWnd& = prsBetween|fffd|(i%, "|", "|", cset$): If dispValidCaption(hWnd&) Then SetTBhwnd i%, hWnd&: restoreW hWnd&: setNoHeadersHif hWnd&, i%: freeze hWnd&
        Next:   matrix = CBool(LoadParam("matrix")): http_mtrx$ = LoadParam("http_mtrx"): vb_hwnd& = Get_vb_hwnd&(): '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                hooking = CBool(LoadParam("hooking")): freezing = CBool(LoadParam("freezing")): historyW$ = LoadParam("historyW")
                Y_split = CBool(prsBetween|fffd|(6, "|", "|", cset$)) ' New details
        'If Not Lparked Then loadTargetPos: Me.reDraw
    Else: freezing = .freezing: hooking = .hooking: reDraw: End If: End With: resTry% = 0: numbOfRest% = 0 'All saves restored
'Call reDraw: 'If Not Lparked Then loadTargetPos: Me.reDraw
    Call updHook: If FnFormIsLoaded("FindForm") Then FindForm.resetParker
    LogString "out SCSForm_Initialize", l: End Sub

Private Function dispRest&(hWnd&, n%): inc resTry% 'restoring hwnd's from "Dispetcher_" if 0
If dispValidCaption(hWnd&) Then dispRest& = hWnd&: Exit Function Else inc numbOfRest% '|fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd|."|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
For i = 1 To Sheets("Dispetcher_").UsedRange.rows.Count: With Sheets("Dispetcher_"):
    If .Cells(i, 4) = n% Then dispRest& = IIf(dispValidCaption(.Cells(i, 2)), .Cells(i, 2), 0): Exit Function
End With: Next i: End Function

Private Sub UserForm_Activate(): LogString ("in   SCSForm_Activate"): If ActiveWorkbook.name <> "MAIN.XLSB" Or AC_flg Then Exit Sub 'fix
                                 Call customSC_Restore: Call customSCS_Activate: SCForm.start_freelance  ': SCForm.reDraw ': FindForm.stopSensor
            If osXP Then unFreezeInt: If freezing And Not isWaiting Then startWaiting:
            If FnFormIsLoaded("FindForm") Then _
            If FindForm.Inverted Then FindForm.aimed = False _
                                 Else If inGame Then stpGame 'w7_f4r(up1-):: FindForm.set_bk_color:
            If Not DDM.useTB Then ShowWindow& DDM.TBhwnd, SW_HIDE& 'r_hwnd + br_hwnd > 0
                                 LogString ("out SCSForm_Activate"): End Sub
Private Sub UserForm_Deactivate(): If osXP Then FreezeInt
                                   Call customSCS_Deactivate: End Sub
'Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer): MsgBox "QueryClose": End Sub

Public Sub AllOnTop(): For i% = 4 To 2 Step -1: Call BringWindowToTop(GetTBhwnd&(i%)): Next
                       SetForegroundWindow& GetTBhwnd&(3): End Sub  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ': SetTopMostWindow me_hwnd&, True
                                  
Public Sub AllShowWindow(swmode&, Optional except_list$): unFreezeIfXP: For i% = 1 To 5: hWnd& = GetTBhwnd&(i%): If hWnd& <> 0 Then _
If Not (except_list$ Like "*|" & hWnd& & "|*" Or (Not settingsForm.CheckBox15 And isVb(hWnd&))) Then If Not IsWindowVisible(hWnd&) Then ShowWindow hWnd&, swmode&
                                                                        Next: End Sub         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Sub minimizeW(hWnd&, Optional header = False, Optional d0 = True): If Not d0 Then Exit Sub
                  If hWnd& <= 0 Or (Not settingsForm.CheckBox15 And isVb(hWnd&)) _
                                Or (Not settingsForm.CheckBox16 And getWndCaption$(hWnd&) = "|fffd| - Debugger") Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   unFreezeIfXP hWnd&: ShowWindow hWnd&, SW_MINIMIZE: If header Then setNoHeadersH hWnd&, True 'ShowWindow hwnd&, SW_HIDE&:
                                                                                             End Sub
Public Sub restoreW(hWnd&, Optional header = False, Optional d0 = True): If Not d0 Then Exit Sub Else If Not header Then setNoHeadersHif hWnd&, False
                                                                                             ShowWindow hWnd&, SW_RESTORE: End Sub 'unFreeze hwnd&:

Private Sub UserForm_Terminate(): 'If mLngMouseHook& <> 0 Then meUnHook '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| UserForm_Initialize
If AC_flg Then Exit Sub Else LogString "in   SCSForm_Terminate"
'If Not (ToggleButton1.Tag = "hdn" Or ToggleButton2.Enabled) Then saveTargetPos: Call HideTargetW: SCForm.reDraw: Call AllShowWindow(SW_MINIMIZE) _
'                                                            Else Call dispUpdateTL: If ToggleButton2.Enabled Then Call RecompainW  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not (ToggleButton1.tag = "hdn" Or ToggleButton2.Enabled) Then saveTargetPos: Call HideTargetW: On Error Resume Next: SCForm.reDraw: On Error GoTo 0 _
                                                            Else If ToggleButton2.Enabled Then Call RecompainW  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
With SCForm: .freezing = freezing: freezing = False: .r_hwnd = r_hwnd&: .bl_hwnd = bl_hwnd&: .br_hwnd = br_hwnd&: .Y_split = Y_split: .pivot_d = pivot_d: _
             .matrix = matrix: .http_mtrx$ = http_mtrx$: .http_hwnd = http_hwnd&: .d_http_hwnd = d_http_hwnd&: .vb_hwnd& = vb_hwnd&  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
.hooking = hooking: .historyW$ = historyW$: .mLngMouseHook& = mLngMouseHook&: .show vbModeless: End With
'If (ToggleButton1.tag = "hdn" Or ToggleButton2.Enabled) Then Call dispUpdateTL ': If ToggleButton2.Enabled Then Call RecompainW '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call setFocusOnForm("SCForm", True) 'new
LogString "out SCSForm_Terminate": End Sub

Public Sub saveTargetPos(): If TargetForm.Left + TargetForm.Width < ScLt% * x75 + 111 Then Exit Sub
                            Dim rt As rect: GetWindowRect t_hwnd, rt: SaveParam "target_pos", rectToStr(rt): End Sub
Public Sub loadTargetPos(): Dim rec As rect: rec = strToRECT(LoadParam("target_pos")): r_W = rec.Bottom - rec.Top: r_H = rec.Right - rec.Left
           rec.Top = ScTp: rec.Left = ScLt 'rec.Top = Max(rec.Top, ScTp + 0): rec.Left = Max(rec.Left, ScLt + 0)
           ltp_flg = False: rec.Bottom = Min(rec.Top + r_W, ScBm / 2): rec.Right = Min(rec.Left + r_H, zero(ScRt, ScLt) / 2): SetWindowRect Me.t_hwnd, rec: End Sub
     
Public Function LFixed() As Boolean: LFixed = DDM.On: End Function  '|fffd||fffd||fffd||fffd| LFixed -->  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Target |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <-|->
Public Function LParked() As Boolean: LParked = CBool(Me.Left < ScLt% * x75 + 111): End Function '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Me.Left = 0 (Me-oriented)
Public Function THidden() As Boolean: THidden = TargetForm.Left + TargetForm.Width < ScLt% * x75 + 111: End Function ' (Target-oriented)
Public Sub HideTargetW(Optional noCheck As Boolean): ls ">", "HideTargetW":  On Error Resume Next
                                                      If FnFormIsLoaded("PF") Then If noCheck Then PF.Hide _
                                                Else: If Sheets("Dispetcher_").Columns(1).Hidden Then PF.Hide Else PF.ShowTif 'Sets |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                     'If FnFormIsLoaded("FindForm") Then FindForm.Hide: '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| PF
Dim rt As rect: GetWindowRect t_hwnd, rt: rt.Top = ScTp% - 5: rt.Left = ScLt% - 200: rt.Right = ScLt%: Call SetWindowRect(t_hwnd, rt)
Call View_Ini(10, 0): ls "<", "HideTargetW": End Sub
Public Sub HideAll(Optional frst As Boolean): If Not frst Then If LParked Then ShowDesktopW False: customSCS_loadTargetPos_no_rePark: customSCS_Layout: Exit Sub Else saveTargetPos '|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| +++
                                             'If Lparked And Not frst Then loadTargetPos: Me.reDraw: Exit Sub Else saveTargetPos     '|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                             'If Lparked Then loadTargetPos: Me.reDraw: Exit Sub Else saveTargetPos                  '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                             'If Lparked Then loadTargetPos: Me.reDraw: Exit Sub Else If Not frst Then saveTargetPos '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Call Escaped: HideTargetW True: Me.Left = ScLt% * x75 + 1: Me.Top = ScTp% * x75 + 1: ShowDesktopW True: End Sub
'GetWindowRect t_hwnd, rt: rt.Left = ScLt% - 200: rt.Right = ScLt%: rt.Bottom = ScTp%: SetWindowRect t_hwnd, rt: End Sub

Public Sub noDoppel(): If Not isDoppel Then Exit Sub _
                                                        Else If FnFormIsLoaded("satellite") Then satellite.HideMe '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                       DDBar.AddItem t_hwnd, False:
                       t_hwnd = FindWindow(vbNullString, TargetForm.Caption)
                       For Each ctrl In PF.FrameT.Controls: ctrl.Visible = True: Next: PF.reSize: If DDBar.Yby Then Exit Sub 'App |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                         Call reset_my_rt: SetWindowRect t_hwnd, my_rt: Application.Visible = True: UserForm_Layout: End Sub

Public Sub UserForm_Layout(): If Not isReady Then Exit Sub Else If SCForm.scmode = 0 Then Exit Sub
Dim tPT As POINTAPI, hWnd As Long: l% = 0: LogString "in   SCSForm_Layout", l
GetCursorPos tPT: hWnd = WindowFromPoint(tPT.x, tPT.Y): If hWnd = SCForm.me_hwnd& Then Exit Sub
'NEW 191004 (TEST)                                                    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SCSForm.Top |fffd| DDBar.ReDraw
If DDM.num = 1 Then If DDBarUsed Then If DDBar.DDMatrixFrom% = -5 Then If Round(sag(me_lvl, Me.Top / x75 + 30), 1) <> Round(sag(max_lvl, ScBm% * 4 / 5), 1) Then _
                                                                       If me_lvl <= max_lvl Then SCSForm.SetRT "4", DDBar.me_hwnd: DDBar.reBuild True Else GoTo errL
''http://windowssecrets.com/forums/showthread.php/50403-Set-Focus-Of-Program-(-Not-MS-Based)-(VBA)
On Error GoTo errL: SUp False: With TargetForm 'w7 +errL(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
If isDoppel Then
    Call reset_my_rt: SetWindowRect Me.t_hwnd, my_rt: set_flowBar True 'SetWindowRgn c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  .Width = -.Left + (Me.Left + 24) + 4 - 4 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CSForm.Layout
                  If SCForm.Visible Then SCForm.stop_freelance: Call SCForm.reDraw 'trans. Ctrl
Else: 'If Not SCForm.Visible Then If .Top > 10 Then .Top = 0: MsgBox .Top 'TB |fffd||fffd||fffd||fffd||fffd||fffd|
    If LFixed Then GoTo pass_L
    If Not (LParked And .Left < ScLt% * x75 - 111) Then '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If LParked Then                      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|                                                       'TRIGGER (HideTargetW)
                            Call HideTargetW: Call updHook: If DDM.On Then FindForm.resetParker             '|fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        'ElseIf Me.Top < .Top Or Me.Left < .Left Then '|fffd||fffd||fffd||fffd||fffd||fffd|      'Test
        '          .Top = -.Height: .Left = -.Width: Me.reDraw
        'ElseIf Me.Top < 0 Or Me.Left < 0 Then .Top = 17: .Left = 0: Me.reDraw '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else: 'If ActiveSheet.name = "Dispetcher_" Then SUp True: 'fNoSup: fSup '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" ScreenUpdating
            If .Top < ScTp% * x75 - 5 Or .Left < ScLt% * x75 - 10 Then                                    'TRIGGER (UnHideTargetW)
               .Left = ScLt% * x75: Me.reDraw: Call updHook: PF.ShowTif True: If DDM.On Then FindForm.resetParker  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If: L0M 1:
            If FnFormIsVisible(Me.name) Then '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SCSForm |fffd||fffd||fffd| hot restart
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| twoWindowsWild
              If twoWindows And bl_hwnd = 0 Then .Height = (ScBm% - ScTp%) * x75 + 3 _
                                            Else .Height = -.Top + (Me.Top + 20) - 3       'If Not fiveL Then - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SC
                                                 .Width = -.Left + (Me.Left + 24) + 4 - 4 '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            End If: L0M 2
        End If: If SCForm.Visible Then SCForm.stop_freelance: Call SCForm.reDraw
    Else: If Not ltp_flg Then If Me.Top < ScTp% * x75 Or Me.Left < ScLt% * x75 Then PF.ShowTif True: ShowDesktopW False: _
                                 Schedule 0, "customSCS_loadTargetPos_no_rePark": Application.Visible = True: ltp_flg = True: Exit Sub ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" NEW
          If Not twoWindowsWild Then .Height = ScTp% * x75 - .Top + (Me.Top + 20) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If Me.Left < ScLt% * x75 And hWnd = me_hwnd& Then        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|                 'TRIGGER (AllOnTop)
            Call AllShowWindow(SW_RESTORE): L0M 41: AllOnTop        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Z-Order ('Lparked)                   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            On Error Resume Next: Call updHook
    End If: End If: L0M 43: If between((Me.Top + 20) / x75, IIf(osXP, ScBm% * 1 / 5, 0), ScBm% * 4 / 5) Then set_flowBar ' |fffd||fffd||fffd||fffd||fffd| SetWindowRgn
pass_L: If Not LFixed Then customSCS_Layout Else SCSForm.Left = ScLt% * x75: _
                           If SCForm.Visible Then SCForm.stop_freelance: SCForm.reDraw: BringWindowToTop SCForm.me_hwnd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| TargetW
End If: End With
          L0M 45: pushSlickRun
          If FnFormIsLoaded("EditForm") Then Call reParkW(Not EditForm.Visible) Else reParkW True '|fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
errL: If Me.Left < ScLt% * x75 Then 'customSCS_Layout=SheetResize
         Me.Left = ScLt% * x75 + 1  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If: If FnFormIsLoaded("FindForm") Then FindForm.aimed = False
SUp True: '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" ScreenUpdating
L0M 5: LogString "out SCSForm_Layout", l: End Sub

Public Sub reset_my_rt(): my_rt.Top = ScTp%: my_rt.Bottom = (Me.Top / x75 + 20) - 3         'If Not fiveL Then - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SC
                          my_rt.Left = ScLt%: my_rt.Right = (Me.Left / x75 + 24): End Sub  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Private Sub pushSlickRun(Optional show_jot As Boolean): hWnd& = FindWindow(vbNullString, "Run"): If hWnd& = 0 Then Exit Sub
GetWindowRect me_hwnd, my_rt: my_rt.Right = my_rt.Right - Me.Width / x75 + IIf(LFixed, 0, 28)
                           my_rt.Bottom = my_rt.Bottom - Me.Height / x75 + 25
                         sr_left = my_rt.Right: sr_top = my_rt.Bottom
Dim rt As rect: GetWindowRect hWnd&, rt: With rt:
                        sr_width = .Right - .Left: sr_height = .Bottom - .Top: .Left = sr_left: .Right = .Left + sr_width:
                                   .Top = sr_top: .Bottom = .Top + sr_height: SetWindowRect hWnd&, rt: End With
hWnd& = FindWindow(vbNullString, "Dynamic Input"): If hWnd& = 0 Then GoTo jotL 'Exit Sub
setNoHeadersH hWnd&, False: GetWindowRect hWnd&, rt: With rt:
                        di_width = .Right - .Left: .Left = sr_left: .Right = .Left + di_width: 'di_height = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| app
                        .Top = sr_height + sr_top: .Bottom = sr_height + .Top: SetWindowRect hWnd&, rt: End With ': End Sub
jotL: hWnd& = FindWindow(vbNullString, "SlickJot (JOT) {WinKey+J}"): If hWnd& = 0 Or inCollection(hWnd&) <> 0 Then Exit Sub
                                    If show_jot Then cornerIt hWnd&, True: SetRT "2", hWnd&: restoreW hWnd& Else If IsWindowVisible&(hWnd&) Then minimizeW hWnd&
setNoHeadersH hWnd&, False: GetWindowRect hWnd&, rt: With rt: 'MsgBox hwnd&
sr_width = .Right - .Left: sr_height = .Bottom - .Top: .Left = sr_left: .Right = .Left + sr_width:
           .Top = sr_top - sr_height: .Bottom = .Top + sr_height: SetWindowRect hWnd&, rt: If show_jot Then SetWindowRgn hWnd&, 0, True
End With: End Sub

Public Sub set_flowBar(Optional useHwnd As Boolean): If fivEl Then Exit Sub Else l_shift = 5 '2 |fffd||fffd||fffd| [P]
Dim W, H: If useHwnd Then W = my_rt.Right - my_rt.Left: H = my_rt.Bottom - my_rt.Top _
                     Else W = TargetForm.Width / x75: H = TargetForm.Height / x75 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  With TargetForm: bord_sz = IIf(useHwnd, 0, 7): btm_pan_heigth = 33: slit_sz = 3 '.5
  Dim hrgn1&, hrgn2&: hrgn1 = CreateRectRgn(bord_sz - l_shift + IIf(os10, 7.5, 0), bord_sz - 0 - 4, _
                                            -bord_sz + W + IIf(os10, -2.5, 0), -bord_sz + H) '|fffd||fffd||fffd||fffd||fffd||fffd|(Y2 |fffd||fffd||fffd| -bord_sz - 2, Y1 -4 |fffd||fffd||fffd| [P])
If Not useHwnd Then
  If twoWindowsWild Then hrgn2 = CreateRectRgn(bord_sz - l_shift, Me.Top / x75 - slit_sz, -bord_sz + W, _
                                                            Me.Top / x75 + slit_sz + 1) _
                    Else hrgn2 = CreateRectRgn(bord_sz - l_shift, H - btm_pan_heigth + IIf(os10, -19, 0), _
                                              -bord_sz + W, H - btm_pan_heigth + bord_sz - 2 + IIf(os10, -19, 0))
  Call CombineRgn(hrgn1, hrgn1, hrgn2, 4) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - 2 NEW
End If: SetWindowRgn t_hwnd&, hrgn1, True: End With: End Sub

Private Function http_Visible() As Boolean: http_Visible = IIf(http_hwnd& = 0, False, IsWindowVisible(http_hwnd&)): End Function

Private Function Motor(hWnd&) As Boolean: If getWndCaption$(hWnd&) <> "Agent" And Not (getWndCaption$(hWnd&) = "" _
And Replace(getWndCaption$(GetTopParentH(hWnd&)), "Program Manager", "") = "") Then Exit Function
hWnd& = IIf(getWndCaption$(GetTopParentH(hWnd&)) = "Program Manager", GetParent(hWnd&), hWnd&)
Dim r&, x%, Y%, rt1 As rect, rt2 As rect: GetWindowRect hWnd&, rt1:
                             rt1.hWnd = FindWindow(vbNullString, FindForm.Caption):
GetWindowRect rt1.hWnd, rt2: H = rt2.Bottom - rt2.Top: W = rt2.Right - rt2.Left
                        'rt2.Left = -w: rt2.Right = 0: SetWindowRect hwnd&, rt2 '|fffd| |fffd||fffd||fffd|
                        rt2 = rt1: rt2.Top = rt2.Top + 22: rt2.Left = rt2.Left - 107
                        rt2.Bottom = rt2.Top + H: rt2.Right = rt2.Left + W
SetWindowRect rt1.hWnd, rt2: rt2.hWnd = hWnd&: 'cornerIt rt2.hwnd, True '|fffd| |fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)
If getWndCaption$(hWnd&) = "Agent" Then rtA.hWnd = hWnd& 'Exit Function
motored = True: delay_ms% = 999: ds = 0.51 'not < 0.51
For r = 0 To 180 Step 10   'X^2+Y^2=R^2
For Y = -Abs(r) To 0 Step ds: wndCircle r, -1, Y, rt1, rt2, delay_ms: Next
For Y = 0 To Abs(r) Step ds: wndCircle r, -1, Y, rt1, rt2, delay_ms: Next
For Y = Abs(r) To 0 Step -ds: wndCircle r, 1, Y, rt1, rt2, delay_ms: Next
For Y = 0 To -Abs(r) Step -ds: wndCircle r, 1, Y, rt1, rt2, delay_ms: Next
If FindForm.BackColor = IIf(Sheets("Dispetcher_").Cells(1, 3).Interior.ColorIndex = 1, &H80000008, &H80000003) Then Exit For
Next r: Motor = True: FindForm.set_bk_color: FindForm.aimed = False: FindForm.reDraw
        SetWindowRect rt2.hWnd&, rt1: motored = False: End Function
Private Sub wndCircle(r&, x_sign%, Y%, rt1 As rect, rt2 As rect, dms%):
x% = 7 * x_sign * Sqr(r * r - Y * Y): rt2.Right = rt1.Right + x: rt2.Left = rt1.Left + x
                                      rt2.Bottom = rt1.Bottom + Y: rt2.Top = rt1.Top + Y
        If FindForm.Inverted Then SetWindowRect_delayed rt2, dms% / 20, 20, True
End Sub


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'DDM |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (1/3): 1) DDM.on (2D, Left); 2)DDM.off (1D, Left); 3)DDM.off (1D, Right)
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Left |fffd||fffd||fffd| Right (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| DDM)

Private Function GetRT(place$, bord_sz%) As rect 'DDM.on - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, rt As RECT (t_hwnd) - glob
ds% = DDM.Shift%: bord_gap% = 0 'ds% = 80: >|fffd||fffd||fffd||fffd||fffd|< bord_sz% = 6: 0 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 6, bord_gap% = 1
If Not LFixed Then If THidden Then my_rt.Right = (TargetForm.Left + TargetForm.Width) / x75
With GetRT: Select Case place$
       Case "1|", "_|":   .Top = IIf(DDM.forceSM > 0, DDM.Top, ScTp%) - bord_sz%                 '1| ('DDM -> inactive)
                  .Bottom = IIf(place$ = "1|", IIf(DDM.forceSM > 0, DDM.Bottom, ScBm%), _
                                               IIf(DDM.forceSM > 0, DDM.Heigth, ScBm% - ScTp%) / 2) + bord_sz% - 3 * bord_gap%
                    .Left = IIf(DDM.forceSM > 0, DDM.Left, ScLt%) '- bord_sz%                       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                   .Right = IIf(DDM.forceSM > 0, DDM.Width, ScRt% - ScLt%) / 2 '+ bord_sz%  '|
       Case "|2", "|_":   .Top = IIf(DDM.forceSM > 0, DDM.Top, ScTp%) - bord_sz%                 '|2 ('DDM -> inactive)
                  .Bottom = IIf(place$ = "|2", IIf(DDM.forceSM > 0, DDM.Bottom, ScBm%), _
                                               IIf(DDM.forceSM > 0, DDM.Heigth, ScBm% - ScTp%) / 2) + bord_sz% - 3 * bord_gap%
                    .Left = IIf(DDM.forceSM > 0, DDM.Width, ScRt% - ScLt%) / 2 '- bord_sz%  '|
                   .Right = IIf(DDM.forceSM > 0, DDM.Right, ScRt%) + 1 * bord_sz%  '2 * bord_sz%    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
       Case "3_", "_^":    .Top = IIf(place$ = "3_", IIf(DDM.forceSM > 0, DDM.Top, ScTp%) - bord_sz%, _
                                                     IIf(DDM.forceSM > 0, DDM.Heigth, ScBm% - ScTp%) / 2) '(-> inactive)
                  .Bottom = IIf(place$ = "3_", IIf(DDM.forceSM > 0, DDM.Heigth, ScBm% - ScTp%) / 2, _
                                               IIf(DDM.forceSM > 0, DDM.Bottom, ScBm%)) + bord_sz% - 3 * bord_gap%
                    .Left = IIf(DDM.forceSM > 0, DDM.Left, ScLt%) '- bord_sz%                       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                   .Right = IIf(place$ = "3_", IIf(DDM.forceSM > 0, DDM.Right, ScRt%), _
                                               IIf(DDM.forceSM > 0, DDM.Width, ScRt% - ScLt%) / 2) + bord_sz%
       Case "_4", "^_":    .Top = IIf(DDM.forceSM > 0, DDM.Heigth, ScBm% - ScTp%) / 2             '_4 ('DDM -> inactive)
                  .Bottom = IIf(DDM.forceSM > 0, DDM.Bottom, ScBm%) + bord_sz% - 3 * bord_gap%
                    .Left = IIf(place$ = "_4", IIf(DDM.forceSM > 0, DDM.Left, ScLt%), _
                                               IIf(DDM.forceSM > 0, DDM.Width, ScRt% - ScLt%) / 2) '- bord_sz%      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                   .Right = IIf(DDM.forceSM > 0, DDM.Right, ScRt%) + bord_sz%
                   '=========================================================
       Case "-1":     .Top = ScTp% - bord_sz%                                      '|fffd||fffd||fffd| DDM.num = 1 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                  .Bottom = ScBm% + bord_sz% - 3 * bord_gap%
                    .Left = ScLt% - bord_sz%
                   .Right = ScRt% + bord_sz%
                   '-----------------------------------------------------------
       Case "1":     .Top = IIf(DDM.On, DDM.Top + bord_gap%, ScTp%) - bord_sz%          '1|2~
                  .Bottom = IIf(DDM.On, DDM.Bottom, ScBm%) + bord_sz% - 3 * bord_gap%   '_
                    .Left = IIf(DDM.On, DDM.Left, ScLt%) - bord_sz%
                   .Right = IIf(DDM.On, DDM.Right + bord_sz%, my_rt.Right - bord_gap%) '~
       Case "2":     .Top = ScTp% - bord_sz%  'dr|fffd|gability?                         '1|2right~
                  .Bottom = ScBm% + bord_sz% - 3 * bord_gap%
                    .Left = IIf(DDM.On And LParked, ScLt%, my_rt.Right) - bord_sz%     '~
                   .Right = ScRt% + bord_sz%
       Case "3":     .Top = DDM.Top - bord_sz% 'my_rt.Top - dr|fffd|gability?               '3/4right       'DDM.off
                  .Bottom = my_rt.Bottom + bord_sz%                                    '_~
                    .Left = DDM.Left - bord_sz%
                   .Right = ScRt% + bord_sz%                                        '=2             '_-ddm
       Case "4":     .Top = my_rt.Bottom - bord_sz% + bord_gap%                        '3/4right       'DDM.off
                  .Bottom = ScBm% + bord_sz% - 3 * bord_gap%
                    .Left = ScLt% - bord_sz%                                        '=3  ?
                   .Right = ScRt% + bord_sz%                                        '=2
                   '=========================================================
       Case "5":     .Top = DDM.Top - bord_sz%                                      'DDM.off (inactive) 4 http_hwnd
                  .Bottom = DDM.Bottom + bord_sz% - 3 * bord_gap%
                    .Left = DDM.Left - bord_sz%
                   .Right = DDM.Right + bord_sz%
                   '-----------------------------------------------------------
       Case "1x":    .Top = IIf(DDM.On, DDM.Top + bord_gap%, ScTp%) - bord_sz%      '=1
                  .Bottom = my_rt.Bottom + bord_sz% + IIf(DDM.On, settingsForm.dDispShift, 0) '~3  '_~  '+|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    .Left = IIf(DDM.On, DDM.Left, ScLt%) - bord_sz%                 '=1
                   .Right = IIf(DDM.On, DDM.Right + bord_sz%, my_rt.Right - bord_gap%) '=1
       Case "2x":    .Top = ScTp% - bord_sz%  'dr|fffd|gability?                         '=2
                  .Bottom = my_rt.Bottom + bord_sz%                                    '~3         '_~
                    .Left = my_rt.Right - bord_sz%                                     '~3
                   .Right = ScRt% + bord_sz%                                        '=2
       Case "3x":    .Top = my_rt.Bottom - bord_sz% + bord_gap% + ds% + IIf(DDM.On, settingsForm.dDispShift, 0) '~4   '+|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  .Bottom = IIf(DDM.On, DDM.Bottom, ScBm%) + bord_sz% - 3 * bord_gap%               '_
                    .Left = IIf(DDM.On, DDM.Left, ScLt%) - bord_sz%                                 '=1x
                   .Right = IIf(DDM.On, DDM.Right + bord_sz%, my_rt.Right - bord_gap%) '=1x
       Case "4x":    .Top = my_rt.Bottom - bord_sz% + bord_gap%                        '~4
                  .Bottom = ScBm% + bord_sz% - 3 * bord_gap%                        '=2
                    .Left = my_rt.Right - bord_sz%                                     '=2x
                   .Right = ScRt% + bord_sz%                                        '=2x
       Case Else: i% = CInt(prsBefore("m", place$)): If i% = 0 Then Exit Function   '2 |fffd||fffd||fffd||fffd|, 1...n |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  n% = CInt(prsAfter("m", place$)): r& = IIf(i% > n% / 2, 2, 1): nc% = Int(n% / 2) 'ccnt1
                  nc% = IIf(r& = 1, nc%, n% - nc%): c% = IIf(r& = 1, i%, nc% - (n% - i%))  'row|ccount|column
                  If pivot_d Then r& = Abs(r& * r& - 3) 'matrix pivoting 'If matrix Then
                  If Y_split Then
                       .Top = DDM.Top + (c% - 1) * DDM.Heigth / nc% - bord_sz%
                    .Bottom = DDM.Bottom - (nc% - c%) * DDM.Heigth / nc% + bord_sz% - 3 * bord_gap%
                      .Left = IIf(r& = 1, DDM.Left, DDM.Left + Abs(DDM.Width) / 2) - bord_sz%
                     .Right = IIf(r& = 2, DDM.Right, DDM.Left + Abs(DDM.Width) / 2) + bord_sz%
                  Else
                       .Top = IIf(r& = 1, DDM.Top, DDM.Heigth / 2) - bord_sz%         'DDM.off (inactive) = "5" + matrix
                    .Bottom = IIf(r& = 2, DDM.Bottom, DDM.Heigth / 2) + bord_sz% - 3 * bord_gap%
                      .Left = DDM.Left + (c% - 1) * Abs(DDM.Width) / nc% - bord_sz%
                     .Right = DDM.Right - (nc% - c%) * Abs(DDM.Width) / nc% + bord_sz%
                  End If 'MsgBox place$ & ":" & r& & "-" & c% & "-" & nc%
End Select: End With: End Function

Public Sub SetRT(place$, hWnd&, Optional ByVal eff$, Optional anti_cross = True): 'ls IIf(hWnd& = bl_hwnd&, "~", ""), "SetRT", place$, hWnd&, eff$
                      If hWnd& = 0 Then Exit Sub Else If place$ = "0" Then cornerIt hWnd&: Exit Sub
                     'If place$ = "0" Then minimizeW hwnd&: Exit Sub Else restoreW hwnd&                 '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                     'If place$ = "0" Then
                     '   If osXP Or Lparked Then cornerIt hwnd&: Exit Sub Else minimizeW hwnd&: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                     'Else: restoreW hwnd&
                     'End If                  'ShowWindow& Matrix_itm(i%), SW_SHOW&: restoreW Matrix_itm(i%)
If place$ = "5" Then If hWnd& = http_hwnd& Then cnt% = Matrix_cnt: If cnt% > 1 Then _
         For i% = 1 To cnt%: restoreW Matrix_itm(i%, True): SetRT i% & "m" & cnt%, Matrix_itm(i%): Next: Exit Sub _
                     Else: If d_http_hwnd& > 0 Then restoreW d_http_hwnd&: SetRT 1 & "m" & 2, http_hwnd&: _
                                                    restoreW http_hwnd&: SetRT 2 & "m" & 2, d_http_hwnd&: Exit Sub _
                     Else: If Me.Left <> ScLt * x75 Then restoreW http_hwnd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim t_rt As rect, perfOn As Boolean: bord_sz% = 6: t_rt = GetRT(place$, bord_sz%): perfOn = True: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|.)
If FnFormIsLoaded("JOTCaller") Then Jot_hwnd& = JOTCaller.t_hwnd&    'getJot_hwnd& - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Jot (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
If anti_cross And DDM.num > 1 And hWnd& <> Jot_hwnd& Then  'anti-cross - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (191007 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    tgt_hwnd& = GetTopParentH(WindowFromPoint(t_rt.Left + (t_rt.Right - t_rt.Left) / 2, t_rt.Top + (t_rt.Bottom - t_rt.Top) / 2)) '|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?
    If tgt_hwnd& <> hWnd& Then If inCollection(tgt_hwnd&) = 0 Then If dispValidCaption(tgt_hwnd&) Then minimizeW tgt_hwnd& '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'NEW (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
End If: If os10 Then os10exp = getWndCaption(hWnd&) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| W10: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ribbon - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| r_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim hrgn1&, hrgn2&: 'SetWindowRect hWnd&, t_rt: 'If hwnd& = http_hwnd& Then eff$ = "p"
                     If os10exp Then t_rt.Top = t_rt.Top - 52
                     App_move hWnd&, t_rt '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (def) '(|fffd| w7 noaff)
If osXP Or os10 Then If bord_sz% > 0 Then _
   hrgn1& = CreateRectRgn(bord_sz, bord_sz + IIf(os10exp, 45, 0), _
                         -bord_sz + t_rt.Right - t_rt.Left, -bord_sz + t_rt.Bottom - t_rt.Top) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "p"
If perfOn Then
   If isFullPartOf(eff$, "pl|pr", "|") Then For Y = t_rt.Bottom - t_rt.Top - 30 To 10 Step -30: _
   hrgn2& = CreateRectRgn(IIf(eff$ = "pl", bord_sz% + 1, t_rt.Right - 12), Y, _
                          IIf(eff$ = "pr", t_rt.Right - bord_sz% - 1, 12), Y + 5): Call CombineRgn(hrgn1&, hrgn1&, hrgn2&, 4): Next Y
End If: SetWindowRgn hWnd&, hrgn1, True: If FnFormIsVisible("satellite") Then _
                                         If satellite.lrb_flg Then If satellite.t_hwnd = hWnd Then satellite.reSize hWnd
End Sub 'If t_rt.Right >= ScRt% Then Call BringWindowToTop&(hwnd&) - |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


'******************************************************************************************************
'                                               NEW
'******************************************************************************************************
Public Sub reParkW(Optional logic As Boolean, Optional d0 = True): If t_hwnd = 0 Or my_rt.Bottom = 0 Or Not d0 Then Exit Sub 'Else On Error Resume Next
                                               If FnFormIsLoaded("FindForm") Then FindForm.stopSensor 'brake
                       ' Dim ddBarL As Boolean: If DDBarUsed Then If LFixed Then If Not DDBar.isHidden Then ddBarL = True
Dim wildSD As Boolean: wildSD = Me.Left / x75 > (ScLt% + ScRt%) * 2 / 5: 'dbg_ Me.Left / x75, (ScLt% + ScRt%) * 2 / 5 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4x |fffd| SingleMode
Dim fivEl As Boolean: fivEl = DDM.num = 1 And Not DDM.On And (wildSD) ' Or http_Visible()) 'DoubleDisplMode DDM.On = DDM.Left < 0 AND ddm.forceSM = 0
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
If Not LParked Then 'upd > logic And
    If fivEl Then          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If PF.Visible Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             PF.Hide: If FnFormIsLoaded("EditForm") Then EditForm.Hide
             'FindForm.setMode "DS" 'If FnFormIsLoaded("FindForm") Then FindForm.Hide
    End If: 'If Not ddBarL Then FindForm.reDraw
            'Exit Sub: '*TEST*
            End If: If Not fs_flg Then View_Ini 10, 0: PF.reDraw
            'PF 'ShowProgressBar - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            'If FnFormIsLoaded("FindForm") Then If FindForm.Visible Then FindForm.reDraw
            'If FnFormIsLoaded("CFF") Then If CFF.Visible Then Call CFF.CF_Redraw '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                         Else: If PF.Visible Then PF.reDraw (True)
End If: If Not LFixed Then FindForm.reDraw 'end upd <--- ddBarL  'If Not LFixed And Not reminding TEST (|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Dim rt As rect: SWd% = ScRt%: SHt% = ScBm% '- 25 taskbar
If (Not twoWindowsWild Or LParked) And Not isDoppel Then
      GetWindowRect Me.t_hwnd, rt '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Doppel'|fffd||fffd|
Else: GetWindowRect Me.me_hwnd, rt
    If Not isDoppel Then decon rt.Bottom, Me.Height * x75 + 12 + 22: decon rt.Right, Me.Width + 10
End If
Dim minSHt As Boolean, maxSHt As Boolean: minSHt = db_(rt.Bottom) < SHt% / 5: maxSHt = rt.Bottom > SHt% * 4 / 5 '|fffd||fffd||fffd||fffd||fffd|

  If osXP Then unFreeze: If freezing Then set_next_act 30 '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| frozenFlg (unFreezeInt)
  If isWaiting Then asu = True: SUp           '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| isWaiting
 
Rem: <main behavior>
0: 'curtain (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  'If minSHt Or maxSHt Then cornerIt t_hwnd 'but NOT to_point
  If rt.Bottom < SHt% / 30 Then
                                For i% = 1 To 5: If LParked Then minimizeW GetTBhwnd(i%), True _
                                                            Else cornerIt GetTBhwnd(i%)         'OR
                           Next: GoTo 8: End If  '=> quit
  'If rt.Bottom < SHt% / 10 Then SetRT "0", http_hwnd,,0: SetRT "0", r_hwnd,,0: SetRT "0", bl_hwnd,,0: SetRT "0", br_hwnd,,0: GoTo 8    '=> quit
1: '|fffd||fffd||fffd||fffd||fffd||fffd| 1 - 4x (http_hwnd)
  If d_http_hwnd& > 0 Then If IsWindow(d_http_hwnd&) = 0 Then SetTBhwnd 5, 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'  If http_hwnd& = 0 Then If d_http_hwnd& > 0 Then http_hwnd& = d_http_hwnd&: d_http_hwnd& = 0 _
'                                             Else GoTo 3 '-> bl_hwnd
  If http_hwnd& = 0 Then SetRT "2m2", d_http_hwnd&, , 0: GoTo 3 '-> bl_hwnd
  If http_hwnd& = d_http_hwnd& Then SetTBhwnd 5, 0
  If Not DDM.On Then 'DDM.off ----------------------- fivEl logic included -
    If fivEl Then
                  If Not http_Visible() Then SetWindowRgn http_hwnd&, 0, True 'show & cont.
                  Call setWindowVisible(IIf(wildSD, t_hwnd&, r_hwnd&), False) '|fffd||fffd||fffd||fffd||fffd||fffd|
                                     If Not wildSD Then GoTo 3        'show & leave
             ElseIf DDM.num > 1 Or DDM.Bottom <> 0 Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                  If minSHt Then If Not Y_split Then If d_http_hwnd& > 0 Then _
                      cornerIt http_hwnd&: SetRT "5", d_http_hwnd&, , 0: GoTo 3
                                           SetRT "5", http_hwnd&, , 0: GoTo 3
             ElseIf http_Visible() Then cornerIt http_hwnd:         GoTo 3    'hide & leave
    End If
  'ElseIf DDM.forceSM > 0 Then SetRT "5", http_hwnd&,,0:    GoTo 3
  End If
  If minSHt Then '---------------------------------------------------------
    If bl_hwnd& > 0 Then cornerIt http_hwnd&: SetRT "1", bl_hwnd&, , 0: GoTo 2 _
                    Else SetRT "1", http_hwnd&, , 0: GoTo 2
  ElseIf maxSHt Then cornerIt bl_hwnd&: SetRT "1", http_hwnd&, , 0:   GoTo 2
  Else: SetRT "1x", http_hwnd&, IIf(DDM.On, "", IIf(wildSD, "pr", "pl")), 0 '~
  End If
3: '|fffd||fffd||fffd||fffd||fffd||fffd| 3 (bl_hwnd)
  If bl_hwnd& = 0 Then GoTo 2 Else restoreW bl_hwnd& '-> br_hwnd
  If minSHt Or maxSHt Then
     If br_hwnd& <> 0 Then SetRT IIf(LParked, "0", "3x"), bl_hwnd&, , 0: GoTo 2 'cornerIt t_hwnd:
     If maxSHt And r_hwnd& <> 0 Then SetRT IIf(LParked, "0", "3x"), bl_hwnd&, , 0: GoTo 2
     SetRT IIf(DDM.On, "1", IIf(LParked, "2", IIf(r_hwnd& <> 0, "3x", 4))), bl_hwnd&, , 0 'IIf(Lparked, "1" - bag
     'SetRT IIf(DDM.On, "1", IIf(Lparked, "1" IIf(r_hwnd& <> 0, "0", "2"), IIf(r_hwnd& <> 0, "3x", 4))), bl_hwnd&,,0
  Else: SetRT IIf(DDM.On, IIf(http_hwnd& = 0 And bl_hwnd& <> vb_hwnd&, "1", "3x") _
                        , IIf(br_hwnd& <> 0, IIf(LParked, "0", "3x"), "4")), bl_hwnd&, , 0 '~>
  End If
2: '|fffd||fffd||fffd||fffd||fffd||fffd| 2 (r_hwnd)
  hWnd& = IIf(fivEl And http_Visible(), http_hwnd&, r_hwnd&) 'fivEl logic included -
  If hWnd& = 0 Then GoTo 4 Else restoreW hWnd& '-> br_hwnd
  If minSHt Then
    If br_hwnd& > 0 Then cornerIt br_hwnd&: SetRT "2", hWnd&, , 0:                  GoTo 8 _
    Else SetRT IIf((Not DDM.On And bl_hwnd& > 0 And LParked), "0", "2"), hWnd&, , 0: GoTo 8 '=> quit          ~opt~
  ElseIf maxSHt Then If br_hwnd& > 0 Then cornerIt hWnd&:  SetRT "2", br_hwnd&, , 0: GoTo 8 '=> quit
                     SetRT "2", hWnd&, , 0 'Else: SetRT IIf(Not DDM.On And bl_hwnd& = 0 And br_hwnd& = 0, 2, "2x"), hwnd&,,0 '~ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Else: SetRT "2x", hWnd&, , 0 '~ |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
4: '|fffd||fffd||fffd||fffd||fffd||fffd| 4 (br_hwnd)
  If br_hwnd& = 0 Then GoTo 8 Else restoreW br_hwnd& '=> quit
  If minSHt Or maxSHt Or r_hwnd& = 0 Then SetRT "2", br_hwnd&, , 0 _
                      Else SetRT IIf(DDM.On, IIf(LParked And r_hwnd& = 0, 2, 4), _
                                 IIf(bl_hwnd& = 0 And logic And Not twoWindows And Not (FindForm.ImageW3.SpecialEffect = 6 Or FnFormIsVisible("EditForm")), 4, "4x")), br_hwnd&, , 0 '<~
8: '|fffd||fffd||fffd||fffd|Drawing - |fffd||fffd||fffd||fffd||fffd||fffd|
'If logic And Not Lparked Then 'upd >
'    If fivEl Then          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'        If PF.Visible Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'             PF.Hide: If FnFormIsLoaded("EditForm") Then EditForm.Hide
'             FindForm.setMode "DS" 'If FnFormIsLoaded("FindForm") Then FindForm.Hide
'    End If: FindForm.reDraw: Exit Sub: End If: Call View_Ini(10, 0): PF.reDraw
'            'PF 'ShowProgressBar - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'            'If FnFormIsLoaded("FindForm") Then If FindForm.Visible Then FindForm.reDraw
'            'If FnFormIsLoaded("CFF") Then If CFF.Visible Then Call CFF.CF_Redraw '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'                         Else: If PF.Visible Then PF.reDraw (True)
'End If: FindForm.reDraw: 'end upd <-
'Me.focusMe: '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| SCForm
If WildW& <> 0 Then WildW& = 0: UserForm_Layout '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Wild-|fffd||fffd||fffd||fffd|(<W>)
End Sub
  
  
'##########################
' Dispetcher_
'##########################

Public Sub setNoHeadersHif(hWnd&, i%): If DDM.num > 1 Then If DDM.forceSM > 0 Then If i% = 1 Then Exit Sub 'http_hwnd in fullscreen
                                                                       wndCap$ = getWndCaption(hWnd&)       '|fffd||fffd||fffd| "Microsoft "!
                                        If Not (hasIt("Google Chrome", wndCap$) Or _
                                                hasIt("Outlook", wndCap$)) Then setNoHeadersH hWnd&, False       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub
Attribute VB_Name = "SplitForm"
Attribute VB_Base = "0{D6C124A9-DE58-4A6D-8C09-38E3E2CFACD1}{5E033E0A-73A7-408C-8D2B-C7C01032DEBC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "StatForm"
Attribute VB_Base = "0{62D53B85-ECA3-4A6C-BA5C-24DE0DBD3BF4}{8EAB854D-A21B-4F9C-AE42-4A97E403DA37}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private allOk As Boolean, T As New CFTerm  '|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Private Sub CommandButton1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 27 Then Unload Me
End Sub

Private Sub MultiPage1_Change(): If MultiPage1.SelectedItem.name <> "Page2" Then Exit Sub
                                                     StatFormUpdate tbxID <> "": End Sub

Private Sub obActive_Click(): Me.tbxID.Locked = True: Call TBStore_Click: End Sub
Private Sub obManual_Click(): Me.tbxID.Locked = False: Call TBStore_Click: End Sub
'Private Sub obCTerm_Click(): Call TBStore_Click: End Sub
Private Sub obCFTerm_Click()
If FnFormIsLoaded("EditForm") Then Me.tbxID = EditForm.CommandButton1.Caption
If Me.TBStore Then Call TBStore_Click Else Me.TBStore = True
End Sub

Private Sub TBID_Click()
If Not TBID Then Exit Sub
Me.TBGid = False: Me.TBsId = False: Me.TBoldGid = False
If TBID And TBStore Then TBStore = False 'Else Call TBStore_Click '|fffd||fffd||fffd||fffd||fffd|
Application.Goto Reference:="_" & eru(ActiveSheet.Index) & "_" & T.id, Scroll:=True: End Sub

Private Sub TBGid_Click()
If Not TBGid Then If TBID.Visible Then Call TBStore_Click: Exit Sub Else Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Me.TBID = False: Me.TBoldGid = False: Me.TBsId = False
If TBGid And TBStore Then TBStore = False Else Call TBStore_Click '|fffd||fffd||fffd||fffd||fffd|
Application.Goto Reference:="_" & eru(ActiveSheet.Index) & "_" & T.Gid, Scroll:=True: End Sub

Private Sub TBoldGid_Click()
If Not TBoldGid Then If TBID.Visible Then Call TBStore_Click: Exit Sub Else Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Me.TBID = False: Me.TBGid = False: Me.TBsId = False
If TBoldGid And TBStore Then TBStore = False Else Call TBStore_Click '|fffd||fffd||fffd||fffd||fffd|
Application.Goto Reference:="_" & eru(ActiveSheet.Index) & "_" & T.oldGId, Scroll:=True: End Sub

Private Sub TBsId_Click()
If Not TBsId Then If TBID.Visible Then Call TBStore_Click: Exit Sub Else Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Me.TBID = False: Me.TBGid = False: Me.TBoldGid = False
If TBsId And TBStore Then TBStore = False Else Call TBStore_Click '|fffd||fffd||fffd||fffd||fffd|
Application.Goto Reference:="_" & eru(ActiveSheet.Index) & "_" & T.sid, Scroll:=True: End Sub

Public Sub TBStore_Click(): LM "TBStore_Click"
'MsgBox "TBStore"
'|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| (T) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If TBStore Or T.id = "" Then
  'Me.tbxID.Locked = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
  If T.id <> "" And Me.TBID Then
                        Me.TBID = False '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ElseIf T.id <> "" And Me.TBsId Then Me.tbxID = T.sid
  ElseIf T.id <> "" And Me.TBGid Then Me.tbxID = T.Gid
  ElseIf T.id <> "" And Me.TBoldGid Then Me.tbxID = T.oldGId
  Else 'extended |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
    If obCFTerm And Not FnFormIsLoaded("EditForm") Then
        'code 1 >---------------------------------
        If Me.tbxID <> "" Then
            Cells(FnGetRowFromID(Me.tbxID, eru(ActiveSheet.Index)), 3).Activate
        Else: MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub: End If 'obCTerm = True: EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":
        Call View_Term
        'code 1 <---------------------------------
    ElseIf Me.obActive And Me.tbxID = "" And FnIsTrinity(ActiveSheet.name) Then _
                           Me.tbxID = Cells(ActiveCell.row, 1) 'ID
    End If
  End If
  If Me.tbxID = "" Then Msg "no Me.tbxID", c_quietMode: TBStore = False: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Store (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| EditForm_Layout)
  If obCFTerm And EditForm.CommandButton1.Caption <> Me.tbxID Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       If FnIsTrinity(ActiveSheet.name) Then _
         Cells(FnGetRowFromID(Me.tbxID, eru(ActiveSheet.Index)), 3).Activate: 'EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|":
       Call View_Term: End If
  '|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set T = Nothing: Set T = New CFTerm
  If obCFTerm Then Call T.InitializeByForm Else Call T.Initialize(Me.tbxID)
  Me.TBID = False: Me.TBGid = False: Me.TBsId = False: Me.TBoldGid = False
'ElseIf T.id = Me.tbxID Then Exit Sub ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If
  'Me.TBID = True '|fffd||fffd||fffd||fffd||fffd| tbxID |fffd||fffd||fffd||fffd||fffd| T.ID
  With Me.TBID: .Visible = CBool(T.id <> ""): .value = (.Visible And .value): End With
  With Me.TBoldGid: .Visible = CBool(T.oldGId <> "" And T.oldGId <> T.Gid): .value = (.Visible And .value): End With
  With Me.TBGid: .Visible = CBool(T.Gid <> ""): .value = (.Visible And .value): End With
  With Me.TBsId: .Visible = CBool(T.sid <> ""): .value = (.Visible And .value): End With
  'MsgBox T.id
  Call CommandButton1_Click
End Sub


Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 27 Then Unload Me
End Sub

Private Sub UserForm_Activate()
wcaption = Me.Caption: Call TransStart: If IsModal(Me.name) Then CommandButton1_Click: _
                                                   If allOk Then SaveAndBackUp_2 (wcaption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
End Sub

Private Sub UserForm_Initialize(): LM "StatForm"
If ActiveSheet.Index > 4 Then MultiPage1.value = 0
Call WSim: FrameR.TextBox1.value = ""
    wcaption = Me.Caption: Call set_Transparent
    '"Item"-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If MultiPage1.SelectedItem.Caption = "Item" Then
        If FnFormIsLoaded("EditForm") Then Me.obCFTerm = True: Me.obManual = True Else Call TBStore_Click
        Me.tbxID.Locked = Me.obActive
    End If: If Me.Left = 0 Then Me.Left = ScLt% * x75
End Sub

Public Sub focusMe(): setFocusOnForm "StatForm":  TextBox1.SetFocus: CommandButton1.SetFocus: End Sub

Private Sub CommandButton1_Click()
'MsgBox "CommandButton1"
Dim i As Integer: allOk = False
Select Case MultiPage1.SelectedItem.Caption
Case "Item": '# Source #
    If T.id = "" Then Exit Sub '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim TT As New CFTerm '|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)
    
    If Me.TBID Then
                    Set TT = T: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else:           Set TT = New CFTerm
            If Me.TBsId Then
                             Call TT.Initialize(T.sid)
        ElseIf Me.TBGid Then Call TT.Initialize(T.Gid)
        ElseIf Me.TBoldGid Then Call TT.Initialize(T.oldGId)
        Else: Set TT = T: End If
    End If
        
    If obCTerm Then SetLabel ("|fffd||fffd||fffd||fffd||fffd||fffd|: " & TT.id) Else SetLabel ("|fffd||fffd||fffd||fffd||fffd|: " & TT.id)
        'If Me.tbxID <> T.id Then
        '  Cells(FnGetRowFromID(Me.tbxID, eru(ActiveSheet.index)), 3).Activate
        '  EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Call View_Term: Call T.InitializeByForm: End If
    FrameR.TextBox1.SetFocus: FrameR.TextBox1.value = ""
    Me.TBID.Visible = CBool(TT.id <> T.id)
    
'# Output #
    Me.TextBox1.Enabled = False
    With TT
    'MsgBox "Output"
    If .oldID = "" Or .oldID = .id Then Call SetHeader(Me.Label1.Caption) _
        Else Call SetHeader(Me.Label1.Caption & vbTab & " (old " & .oldID & ")") '"ID " & .id
    If .oldGId = "" Or .oldGId = .Gid Then Call s_report("gID", True): Call s_ReportValue(.Gid, 0, False) _
        Else: Call s_report("gID(old)", True): Call s_ReportValue(.Gid & " (" & .oldGId & ")", 0, False)
    If .sid <> "" Then Call s_report("sID", False): Call s_ReportValue(.sid, 0, False)
    If .oldGId <> "" And .fUpdated Then Call SetHeader("Updates:" & .up_str)
    If .oldGId <> "" And .fUpdatedPart("c") Then
       Call s_report("Cat(old)", True): Call s_ReportValue(getCatLong("", .cat) & " (" & getCatLong("", .oldcat) & ")", 0, False)
    Else: Call s_report("Cat", True): Call ReportValue(getCatLong("", .cat), 0)
    End If
    If .link <> "" Then Call s_report("Link", True): Call ReportValue(.link, 0)
    If .oldGId <> "" And .fUpdatedPart("a") Then
        Call s_report("ABC 1(old)", True): Call s_ReportValue(.ABC(1) & " (" & .oldABC(1) & ")", 0, False)
        Call s_report("ABC 2(old)", False): Call s_ReportValue(.ABC(2) & " (" & .oldABC(2) & ")", 0, False)
        Call s_report("ABC 3(old)", False): Call s_ReportValue(.ABC(3) & " (" & .oldABC(3) & ")", 0, False)
    Else:
        If .ABC(1) <> "" Then Call s_report("ABC 1", True): Call s_ReportValue(.ABC(1), 0, False)
        If .ABC(2) <> "" Then Call s_report("ABC 2", False): Call s_ReportValue(.ABC(2), 0, False)
        If .ABC(3) <> "" Then Call s_report("ABC 3", False): Call s_ReportValue(.ABC(3), 0, False)
    End If
    If .oldGId <> "" And .fUpdatedPart("s") Then
        Call s_report("Shad 1(old)", True): Call s_ReportValue(.shad(1) & " (" & .oldshad(1) & ")", 0, False)
        Call s_report("Shad 2(old)", False): Call s_ReportValue(.shad(2) & " (" & .oldshad(2) & ")", 0, False)
        Call s_report("Shad 3(old)", False): Call s_ReportValue(.shad(3) & " (" & .oldshad(3) & ")", 0, False)
    Else: Call s_report("Shad 1", True): Call ReportValue(.shad(1), 0)
          Call s_report("Shad 2", False): Call ReportValue(.shad(2), 0)
          Call s_report("Shad 3", False): Call ReportValue(.shad(3), 0): End If
    Call SetHeader("content")
    For i = 1 To 3: Call s_report("Term " & i & "     ", True): Call ReportValue(.term(i), 0)
    If .oldGId <> "" And .term(i) <> .oldterm(i) Then  '.fUpdatedPart("t")
       Call s_report("Term " & i & "(old)", True): Call ReportValue(.oldterm(i), 0): End If: Next i
    For i = 1 To 3
    If .def(i) <> "" Or .olddef(i) <> "" Then
       PutLine (True)
       If .def(i) <> "" Then Call s_report("Def " & i, True):
       Call s_ReportValue(Replace(Replace(Replace(.def(i), Chr(10), "$10"), Chr(13), "$13"), vbTab, "$TAB"), 0, True)
       If .oldGId <> "" And .def(i) <> .olddef(i) Then
            PutLine (False)
            Call s_report("Def " & i & "(old)", True): Call s_ReportValue( _
              Replace(Replace(Replace(.olddef(i), Chr(10), "$10"), Chr(13), "$13"), vbTab, "$TAB"), 0, True): End If
    End If: Next i
    End With: Set TT = Nothing '<-TT
    Me.TextBox1.SelStart = 0
    Me.TextBox1.SelLength = Len(Me.Label1.Caption)
    Me.TextBox1.Enabled = True
Case "Glossary":
    Call unlockWB: 'flg_InWork = True - |fffd||fffd||fffd||fffd||fffd||fffd| smartfreezing
    Call SetLabel("")
    stHour = Hour(Now())
    stMinute = Minute(Now())
    stSecond = Second(Now())
    If CheckBox1.value And CheckBox2.value Then InitForUse = True Else InitForUse = False
    If InitForUse Then Call NoCat '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Find(MSExcel)
    FrameR.TextBox1.SetFocus
    FrameR.TextBox1.value = "|fffd||fffd||fffd||fffd||fffd|"
    '##########
    '# |fffd||fffd||fffd||fffd||fffd||fffd| #
    '##########
    record_num = FnGetLastRow(1) - 1
    If record_num = 0 Then record_num = 1 'vs Overflow
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If CheckBox1_1.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(record_num, 0)
      Call report("  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| General")
        G_link_num = FnGetLastRow(0) - 1
        G_link_prsnt = Int(G_link_num / record_num * 100)
        Call ReportValue(G_link_num, G_link_prsnt)
      Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        abbr_num = FnGetLastRow(4) - 1
        If abbr_num = 0 Then abbr_num = 1 'vs Overflow
        Call ReportValue(abbr_num, 0)
      Call report("  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        linked_num = 0
        For i = 2 To FnGetLastRow(4)
          If Sheets(WSA).Cells(i, 1) <> "_" Then _
            linked_num = linked_num + 1
        Next i
        Call ReportValue(linked_num, Int(linked_num / abbr_num * 100))
      CheckBox1_1.value = False
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If CheckBox1_2.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      For i = 1 To 3
        blank_def = 0
        For j = 2 To FnGetLastRow(i)
          If Sheets(FnWSCase(i)).Cells(j, 4) = "" Then _
            blank_def = blank_def + 1
        Next j
        Select Case i
               Case 1: Call report("english determinations")
                       Call ReportValue(record_num - blank_def, _
                            Int((record_num - blank_def) / record_num * 100))
               Case 2: Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                       Call ReportValue(record_num - blank_def, _
                            Int((record_num - blank_def) / record_num * 100))
               
               Case 3: Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                       Call ReportValue(record_num - blank_def, _
                            Int((record_num - blank_def) / record_num * 100))
        End Select
      Next i
      CheckBox1_2.value = False
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If CheckBox1_3.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
      Call GroupAnalysis(N_roots, N_groups, N_sub, N_pseudo, N_free, N_depend, InitForUse)
      Call report("|fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(N_roots, 0)
      If N_roots = 0 Then N_roots = 1 '/ by zero
      Call report("  |fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(N_groups, Int(N_groups / N_roots * 100))
      Call report("  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(N_sub, Int(N_sub / N_roots * 100))
      Call report("  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(N_pseudo, Int(N_pseudo / N_roots * 100))
      Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(N_free, 0)
      Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(N_depend, 0)
      CheckBox1_3.value = False
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If CheckBox1_4.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      If CATForm.Visible Then CATForm.Hide
      themes_num = 0
      field_num = 0
      i = 1: While Not IsNull(FnCBCase(i, 0, 0))
        If FnCBCase(i, 0, 0).Enabled Then
        themes_num = themes_num + 1
        j = 1: While Not IsNull(FnCBCase(i, j, 0))
          field_num = field_num + 1
        j = j + 1: Wend: End If
      i = i + 1: Wend
      Call report("|fffd||fffd||fffd|")
        Call ReportValue(themes_num, 0)
      Call report("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue(field_num, 0)
      Call report("---------------------------")
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      pro_step = Int(field_num / 20)
      If Not pro_step Then pro_step = 1
      pro_num = 0
      i = 1: While Not IsNull(FnCBCase(i, 0, 0))
        If FnCBCase(i, 0, 0).Enabled Then
        j = 1: While Not IsNull(FnCBCase(i, j, 0))
          category = FnCBCase(i, 0, 0).Caption + "_" + FnCBCase(i, j, 0).Caption
          Call report(category)
            Call ReportValue(CStr(FnCategoryRecordsNum(category)) + " |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", 0)
          pro_num = pro_num + 1
          Call ShowProgress(pro_num / pro_step)
        j = j + 1: Wend: End If
      i = i + 1: Wend
      Call HideProgress
      CheckBox1_4.value = False
    End If
    '#############
    '# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #
    '#############
    last_used_ID = 0
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If CheckBox2_1.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Call BMValidate(bookmarks_count, CheckBox3.value)           'cServ
      Call report(CStr(bookmarks_count) + " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue("ok", 0): dec last_used_ID
      CheckBox2_1.value = False
    End If
    '|fffd||fffd||fffd||fffd| ID-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| General
    If CheckBox2_2.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
      Call HyperIDValidate(links_count)
      Call report(CStr(links_count) + " |fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue("ok", 0): dec last_used_ID
      CheckBox2_2.value = False
    End If
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If CheckBox2_3.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Call HyperDefValidate(links_count)
      Call report(CStr(links_count) + " |fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue("ok", 0): dec last_used_ID
      CheckBox2_3.value = False
    End If
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| WSA
    If CheckBox2_4.value Then
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call SetHeader("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Call HyperAbbrevValidate(links_count)
      Call report(CStr(links_count) + " |fffd||fffd||fffd||fffd||fffd||fffd|")
        Call ReportValue("ok", 0): dec last_used_ID
      CheckBox2_4.value = False
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If InitForUse Then
      Hide
      show vbModeless
      Call SetLabel("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:")
      Call NoSpaces
      Call UpdateContentFormatting
      Call UpdateAbbrevFormatting
      Call DelColorDesign
      PF.setMode "p5" 'PF.show vbModeless
      For i = 0 To 4 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| default
        'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + FnWSCase(i)
        Sheets(FnWSCase(i)).Activate: ShowProgressBar i, True
        If i = 4 Then Uni_Sort "F": Uni_Sort "D"
        If i > 0 And i < 4 Then Call Uni_Sort("C")
        Uni_Sort "B": Application.Goto Reference:=Cells(1, 1), Scroll:=True
      Next i: SetColorDesign: Sheets(WS0).Activate
      PF.setModeActual
    End If
    Call SetLabel(CStr(TimeSerial(Hour(Now()) - stHour, Minute(Now()) - stMinute, Second(Now()) - stSecond)))
    Call LockWBif: If last_used_ID = -3 Then allOk = True: Unload Me 'allOk (-4 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Case Else: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": End Select
Call LockWB: End Sub
'****************************************************
Private Sub CheckBox1_1_Click()
  If CheckBox1.value And Not CheckBox1_1.value _
    Then: CheckBox1.value = False
End Sub

Private Sub CheckBox1_2_Click()
  If CheckBox1.value And Not CheckBox1_2.value _
    Then: CheckBox1.value = False
End Sub

Private Sub CheckBox1_3_Click()
  If CheckBox1.value And Not CheckBox1_3.value _
    Then: CheckBox1.value = False
End Sub

Private Sub CheckBox1_4_Click()
  If CheckBox1.value And Not CheckBox1_4.value _
    Then: CheckBox1.value = False
End Sub

Private Sub CheckBox1_AfterUpdate()
  i = 1: While Not IsNull(FnCBCase(1, i, 1))
    FnCBCase(1, i, 1).value = CheckBox1.value
  i = i + 1: Wend
End Sub
'****************************************************

Private Sub CheckBox2_1_Click()
  If CheckBox2.value And Not CheckBox2_1.value _
    Then: CheckBox2.value = False
End Sub

Private Sub CheckBox2_2_Click()
  If CheckBox2.value And Not CheckBox2_2.value _
    Then: CheckBox2.value = False
End Sub

Private Sub CheckBox2_3_Click()
  If CheckBox2.value And Not CheckBox2_3.value _
    Then: CheckBox2.value = False
End Sub

Private Sub CheckBox2_4_Click()
  If CheckBox2.value And Not CheckBox2_4.value _
    Then: CheckBox2.value = False
End Sub

Private Sub CheckBox2_AfterUpdate()
  i = 1: While Not IsNull(FnCBCase(2, i, 1))
    FnCBCase(2, i, 1).value = CheckBox2.value
  i = i + 1: Wend
End Sub
'****************************************************

Private Sub UserForm_Terminate(): Set T = Nothing: WaitMessage: DoEvents: End Sub
Attribute VB_Name = "StatusForm"
Attribute VB_Base = "0{96389DC7-FF02-4E11-B8DA-9A981877159C}{0EF15684-D7E6-4391-9515-23FF41F15313}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'StatusForm.ShowProgress 0, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'StatusForm.ShowProgress (r - strt_r) / (end_r - strt_r), _
                         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & nwb.name, "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
'StatusForm.ShowProgress 1, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", "OK"

Private Sub UserForm_Initialize()
    Me.Frame1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Me.show vbModeless
    Me.CommandButton1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Public Sub ShowProgress(ByVal num, Optional Caption$, Optional Label$, Optional Button$, Optional Label_2)
    If Caption$ <> "" Then Me.Frame1.Caption = Caption$
    If Label$ <> "" Then Me.Frame1.Label1 = Label$
    If Not IsMissing(Label_2) Then Me.Frame1.Label2 = Label_2
    If Button$ <> "" Then
        Me.CommandButton1.Caption = Button$: Select Case Button$
                                                    Case "no": CommandButton1.Visible = False
                                                    Case "OK": Image10.Visible = True
                                         End Select: End If: If num > 0 Then FrameP.Visible = True: ShowProgressBar num
        Me.Repaint: If CommandButton1.Visible Then dodelay 0.1 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End Sub

Private Sub ShowProgressBar(ByVal num) '10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    num = Int(num * 10) - IIf(FrameP.tag = 9, 0, 1)
    If num <= CInt(FrameP.tag) Then Exit Sub Else WaitMessage: DoEvents
              Controls("Image" & num).Visible = True: FrameP.tag = num
    While Not Controls("Image" & IIf(dec(num) >= 0, num, num + 1)).Visible '<10
              Controls("Image" & num).Visible = True: Wend: End Sub
    
Private Sub CommandButton1_Click(): Unload Me: End: End Sub

Attribute VB_Name = "SubFolder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public FolderList As New Collection
Dim pParentPath As String
Dim NOF As Integer
Public Property Get ParentPath() As String
    ParentPath = pParentPath
End Property
Public Property Let ParentPath(value As String)
    pParentPath = value
End Property
Public Function GetList() As Integer
    'Dim fso As New FileSystemObject   'VB6
    'Dim fldr As Folder
    'Dim subFldr As Folder
    Set fso = CreateObject("Scripting.FileSystemObject") 'VB7
    Dim nextSub As Integer
    
    On Error Resume Next
    
    Set fldr = fso.getFolder(ParentPath)
    
    For Each subFldr In fldr.SubFolders
        FolderList.Add (subFldr.path)
        ParentPath = subFldr.path
        nextSub = Me.GetList
    Next
    
    GetList = FolderList.Count
    Set fso = Nothing
End Function
Attribute VB_Name = "Updates"
'MoveRecordRow 2, "ds","ds",,117,119
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub MoveRecordRow(ws_eru%, old_id$, new_id$, Optional resort As Boolean, Optional ByVal old_row&, Optional ByVal new_row&): dbg_ ws_eru%, old_id$, new_id$, old_row&, new_row&
                    If Not resort Then If old_id$ = new_id$ Then Exit Sub 'needn't
                    If Trim(old_id$) = "" Or Trim(new_id$) = "" Then Exit Sub
'MsgBox old_id$ & " " & new_id$
Dim i%: i% = ws_eru%: If new_row = 0 Then new_row = FnGetRowFromID(Left(new_id$, posLast("_", new_id$) - 1), i) + 1 ' + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
With Sheets(Index(i)): cv = .Columns(2).Hidden: .rows(new_row).Insert: If old_row& = 0 Then old_row = FnGetRowFromID(old_id$, i) _
                                                                                       Else If new_row < old_row Then inc old_row
                            .Columns(2).Hidden = False: .rows(old_row).Cut Destination:=.rows(new_row)
                            .Columns(2).Hidden = cv: .rows(old_row).Delete
End With: End Sub

Sub UpdateGroupShadows_new(old_root_ID$, new_root_ID$, Optional resort As Boolean): If Trim(old_root_ID$) = "" Then Exit Sub
If Not resort Then If old_root_ID$ = new_root_ID$ Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| AfterChangeIDOnThis, FnGroupIsNotEmpty
s_ID$ = old_root_ID$ & "_1": Dim done As Boolean                                '"3"_1
While Not done
      If exists(FnGetPrefix(1) & s_ID$) Then                          '3_3_1
             If Trim(new_root_ID$) = "" Then  '2Test
                                              MsgBox s_ID$
             Else '|fffd||fffd||fffd||fffd|
                For i% = 1 To 3: unLockWs Index(i%)
                MoveRecordRow i, s_ID$, Replace("#" & s_ID$, "#" & old_root_ID$, new_root_ID$), resort
                Next i: LockWB
             End If
             s_ID$ = s_ID$ & "_1" 'deeper                                       '3_3_1_1
      Else:  s_ID$ = Left(s_ID$, posLast("_", s_ID$) - 1)                       '3_3
             If s_ID$ = old_root_ID$ Then
                                          done = True   '--->                   '3 = "3"
             Else: ss_ID% = CInt(Mid(s_ID$, posLast("_", s_ID$) + 1, 10))                     '3
                   s_ID$ = Left(s_ID$, posLast("_", s_ID$) - 1) & "_" & inc(ss_ID%) 'shoaler 3_4
             End If
      End If
Wend
End Sub

Sub servUpdateGroupShadows(): WSim: just_test = True 'Optional root_ID$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| sID 33_1|33_3|33_5 -> 33_1,33_2,33_3
'If ActiveSheet.name = WSD Then Sheets(WS0).Activate: Cells(2, 1).Select
Dim i%: Do
Call unlockWB: op% = 0: For Each bm In Workbooks("MAIN.XLSB").Names
      If bm.name Like "_1_#*_*" Then '_ws_root_ + sID
         sid% = CInt(Mid(bm.name, posLast("_", bm.name) + 1, 10))
         If sid% > 1 Then 'if "_#_#..._(*-1)" |fffd||fffd| bm Then |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            rootBM$ = Left(bm.name, posLast("_", bm.name) - 1): lost_BM$ = rootBM$ & "_" & sid% - 1 'If lost_BM$ = "_1_33_2" Then
            If Not exists(lost_BM$) Then inc op%: If Not just_test Then servCompactRootIDs Mid(lost_BM$, 4, 99) _
                                                                         Else MsgBox lost_BM$           '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         End If
      'Else: MsgBox bm.name
      End If
Next: Call LockWB: If just_test Then MsgBox op%
Loop Until op% = 0 Or inc(i%) > 200 Or just_test: If i% > 200 Then MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!"
End Sub
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Sub servCompactRootIDs(ByVal lost_ID$): If Not hasIt("_", lost_ID$) Then Exit Sub _
                                        Else ss_ID% = CInt(Mid(lost_ID$, posLast("_", lost_ID$) + 1, 10)) '3_3_1 -> '1
lost_root_ID$ = Left(lost_ID$, posLast("_", lost_ID$) - 1): lost_root_BM$ = FnGetPrefix(1) & lost_root_ID$
next_id% = ss_ID%: While exists(lost_root_BM$ & "_" & inc(next_id%)): Wend '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
If dec(next_id%) > ss_ID% Then '3_3_2+(next) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
  tt_id$ = lost_root_ID$ & "_" & next_id%
  '|fffd||fffd|! |fffd| t_id$ |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:
  Dim t_isRoot As Boolean: t_isRoot = FnIsRoot(tt_id$)
  If Not t_isRoot Then t_id$ = tt_id$: t_lost_ID$ = lost_ID$: GoTo notRootL
  For Each bm In Workbooks("MAIN.XLSB").Names '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bm.name & "_" Like "_1_" & tt_id$ & "_*" Then
      t_id$ = Mid(bm.name, 4, 99): t_lost_ID$ = Replace("#" & t_id$, "#" & tt_id$, lost_ID$) 'next |fffd||fffd||fffd|
notRootL:   '|fffd||fffd||fffd||fffd|
      For ws = 1 To 3: next_ws = IIf(ws = 3, 1, ws + 1) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        TR = FnGetRowFromID(t_id$, ws) 'MoveRecordRow ws, t_id$, t_lost_ID$
        With Sheets(Index(ws)).Cells(TR, idcol): prfx$ = FnGetPrefix(ws): '.Activate
          'BM
          Workbooks("MAIN.XLSB").Names(prfx$ + t_id$).Delete
          Workbooks("MAIN.XLSB").Names.Add name:=prfx$ + t_lost_ID$, RefersTo:="=" + Sheets(Index(ws)).name + "!" + .Address
          'ID-|fffd||fffd||fffd||fffd||fffd|
          .Hyperlinks.Add Anchor:=Sheets(Index(ws)).Cells(TR, idcol), Address:="", SubAddress:=FnGetPrefix(next_ws) + t_lost_ID$, TextToDisplay:=t_lost_ID$
          .Font.Underline = xlUnderlineStyleNone: .Font.ColorIndex = inv(48) 'Gray(FontID)
          'def-|fffd||fffd||fffd||fffd||fffd|
           For Each hh In Sheets(Index(ws)).Columns(4).Hyperlinks
             If hh.SubAddress = prfx$ & t_id$ Then hh.SubAddress = prfx$ & t_lost_ID$
           Next hh
      End With: Next ws
      'wsABC
      If exists(FnGetPrefix(4) & t_id$) Then
          ws = 4: TR = FnGetRowFromID(t_id$, 4): Workbooks("MAIN.XLSB").Names("_4_" + t_id$).Delete
          With Sheets(Index(ws)).Cells(TR, idcol):
                  Workbooks("MAIN.XLSB").Names.Add name:="_4_" + t_lost_ID$, RefersTo:="=" + Sheets(Index(ws)).name + "!" + .Address: .value = t_lost_ID$
                  For i = 3 To 7 Step 2: Sheets(Index(ws)).Cells(TR, i).Hyperlinks(1).SubAddress = FnGetPrefix((i - 1) / 2) & t_lost_ID$: Next
          End With
      End If
      'PDB
          PDBFolderPath$ = ThisWorkbook.path & "\PDB\" & t_id$
          If dir(PDBFolderPath$, 16) <> "" Then Name PDBFolderPath$ As ThisWorkbook.path & "\PDB\" & t_lost_ID$
      If Not t_isRoot Then GoTo exitL
  End If: Next bm
exitL: End If: End Sub

Sub testDir(): 'http://www.excel-vba.ru/chto-umeet-excel/kak-sredstvami-vba-pereimenovatperemestitskopirovat-fajl/
        'FilePath = "C:\Users\|fffd||fffd||fffd||fffd||fffd|\Desktop\|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.doc"
        'iExtension = CreateObject("Scripting.FileSystemObject").GetExtensionName(FilePath) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        'FolderPath = CreateObject("Scripting.FileSystemObject").GetParentFolderName(FilePath) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        'FolderName = Replace(FolderPath, ThisWorkbook.path & "\" & "|fffd||fffd||fffd||fffd||fffd||fffd|" & "\", "") ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TextToDisplay |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        'Name FolderPath As ThisWorkbook.path & "\|fffd||fffd||fffd||fffd||fffd||fffd|\" & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 MsgBox dir(ThisWorkbook.path & "\PDB\" & "26_14", 16): Exit Sub
If dir(ThisWorkbook.path & "\PDB\" & "26_14", 16) = "" Then MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
   Name ThisWorkbook.path & "\PDB\" & "87_3_new" As ThisWorkbook.path & "\PDB\" & "87_3"
End Sub

Sub UpdateDefLinksLocal(term_ID As String, bound_string)
If logging Then LogString ("in  UpdateDefLinksLocal")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| terget-|fffd||fffd||fffd||fffd||fffd||fffd|)
  If bound_string = "" Then Exit Sub
  Dim boundID As String
  s_pos = 2: f_pos = InStr(s_pos, bound_string, "|")
  Do While (f_pos > 0 And f_pos <= Len(bound_string))
    boundID = Mid(bound_string, s_pos, f_pos - s_pos)
    Call SetDefHyper(boundID, term_ID, True)
    s_pos = f_pos + 1
    f_pos = InStr(s_pos, bound_string, "|")
  Loop
If logging Then LogString ("out UpdateDefLinksLocal")
End Sub
    
Sub UpdateDefLinksCascade()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _
 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| UpdateDefLinksBoundStringsCascade()
  entrySheet = WS1: Dim term_ID As String
  rnum = FnGetLastRow(FnWSNum(WS1))
  For i = 2 To rnum
    bound_string = Sheets(entrySheet).Cells(i, 3).id
    If bound_string <> "" Then
      term_ID = Sheets(entrySheet).Cells(i, 1)
      Call UpdateDefLinksLocal(term_ID, bound_string)
    End If
  Next i
End Sub

Sub UpdateDefLinksBoundStringLocal(targetID As String, AddEntryID, DelEntryID)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| hh)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  entrySheet = WS1
  If (Not FnFarCell(FnWSNum(entrySheet), targetID, far_row, far_WS)) Or _
     (AddEntryID = "" And DelEntryID = "") Then Exit Sub
     
  bound_string = Sheets(far_WS).Cells(far_row, 3).id
  If AddEntryID <> "" Then
    If InStr(1, bound_string, "|" + AddEntryID + "|") = 0 Then
      If bound_string = "" Then bound_string = "|"
      bound_string = bound_string + AddEntryID + "|"
    End If
  End If
  If DelEntryID <> "" Then
    pos = InStr(1, bound_string, "|" + DelEntryID + "|")
    If pos > 0 Then
      bound_string = Left(bound_string, pos) + _
                     Right(bound_string, Len(bound_string) - pos + 1 - _
                                         Len("|" + DelEntryID + "|"))
      If bound_string = "|" Then bound_string = ""
    End If
  End If
  Workbooks("MAIN.XLSB").Sheets(far_WS).Cells(far_row, 3).id = bound_string
End Sub

Sub test_DefLink()
  For i = 2 To 10000: With Sheets(2).Cells(i, 3)
    If .id <> "" Then Sheets(2).Activate: .Select: MsgBox .row & ":" & .id: Exit Sub
  End With: Next i
End Sub

Sub UpdateDefLinksBoundStringsCascade()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _
 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) _
 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| : UpdateDefLinksBoundStringLocal _
                     : UpdateDefLinksCascade _
                     : UpdateDefLinksLocal
  entrySheet = WS1: Dim targetID As String
  rnum = FnGetLastRow(FnWSNum(entrySheet))
  'cleaning
  For i = 2 To rnum
    If Sheets(entrySheet).Cells(i, 3).id <> "" Then _
      Sheets(entrySheet).Cells(i, 3).id = ""
  Next i
  'restoring
  For i = 2 To rnum
    If Sheets(entrySheet).Cells(i, 4).Hyperlinks.Count Then
      targetID = Right(Sheets(entrySheet).Cells(i, 4).Hyperlinks(1).SubAddress, _
        Len(Sheets(entrySheet).Cells(i, 4).Hyperlinks(1).SubAddress) - Len(FnGetPrefix(1)))
      AddEntryID = Sheets(entrySheet).Cells(i, 1)
      DelEntryID = ""
      Call UpdateDefLinksBoundStringLocal(targetID, AddEntryID, DelEntryID)
    End If
  Next i
End Sub

Function FnChangeTermID(oldTermID As String, newRootID As String)
If logging Then LogString ("in   FnChangeTermID (" & oldTermID & " ," & newRootID & ")")
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| newRootID = "")
  oldIdNumb = 0
  newIdNumb = 0
  Dim newTermID As String
  j = 0
  Do
    pos = j
    j = InStr(pos + 1, oldTermID, "_")
  Loop While j
  Dim oldIdBase As String
  If pos Then
    oldIdNumb = Right(oldTermID, Len(oldTermID) - pos)
    oldIdBase = Left(oldTermID, pos - 1)
  End If
If newRootID <> "" Then
  newTermID = FnGenerateID(1, newRootID)
  If pos Then
    If Left(oldTermID, pos) = Left(newTermID, pos) Then
      newIdNumb = Right(newTermID, Len(newTermID) - pos)
      If IsNumeric(newIdNumb) Then
        If CInt(oldIdNumb) < CInt(newIdNumb) Then
          LM oldTermID & ": |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID"
          FnChangeTermID = oldTermID
          If logging Then LogString ("out FnChangeTermID (" & oldTermID & " ," & newRootID & ")")
          Exit Function
        End If
      End If
    End If
  End If
  If newTermID = newRootID Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| " & newRootID & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Else
    For i = 4 To 1 Step -1
      Call FnFarCell(i, oldTermID, far_row, far_WS)
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If i <> 4 Then
        Workbooks("MAIN.XLSB").Names(FnGetPrefix(i) + oldTermID).Delete 'BM
        Workbooks("MAIN.XLSB").Names.Add name:=FnGetPrefix(i) + newTermID, _
                         RefersTo:="=" + far_WS + "!" + Cells(far_row, 1).Address
        'HL
        next_sheet = i + 1
        If next_sheet = 4 Then next_sheet = 1
        With Sheets(far_WS)
            .Hyperlinks.Add Anchor:=Sheets(far_WS).Cells(far_row, 1), _
              Address:="", SubAddress:=FnGetPrefix(next_sheet) + newTermID, TextToDisplay:=newTermID
            .Cells(far_row, 1).Font.Underline = xlUnderlineStyleNone
            .Cells(far_row, 1).Font.ColorIndex = inv(48) 'Gray(FontID)
        End With
      ElseIf far_row <> 1 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Sheets(far_WS).Cells(far_row, 1).value = newTermID
      End If
    Next i
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call UpdateDefLinksLocal(newTermID, Sheets(far_WS).Cells(far_row, 3).id)
    LM oldTermID & "->" & newTermID
End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
    lastIDNumb = oldIdNumb
    While exists(FnGetPrefix(i) + oldIdBase + "_" + lastIDNumb)
      inc lastIDNumb
    Wend
    If lastIDNumb <> oldIdNumb Then Call FnChangeTermID(oldIdBase + "_" + lastIDNumb, oldIdBase)
  End If
FnChangeTermID = newTermID
If logging Then LogString ("out FnChangeTermID (<" & FnChangeTermID & ">: " & oldTermID & ", " & newRootID & ")")
End Function

Sub AfterChangeIDOnThis(oldID As String, newID As String, cascade)
If logging Then LogString ("in   AfterChangeIDOnThis (" & oldID & ", " & newID & ")")
If oldID = newID Then
  If logging Then LogString ("out AfterChangeIDOnThis (oldID = newID)")
  Exit Sub
End If
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, [|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|] |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ID
sub_row = FnGroupIsNotEmpty(1, oldID, False, True, 0)
Do While CBool(sub_row)
  Dim subID As String: subID = Sheets(WS1).Cells(sub_row, 1)
  'If cascade Then
  Call AfterChangeIDOnThis(subID, FnChangeTermID(subID, newID), cascade)
  sub_row = FnGroupIsNotEmpty(1, oldID, False, True, 0)
Loop
If logging Then LogString ("out AfterChangeIDOnThis (" & oldID & ", " & newID & ")")
End Sub



Attribute VB_Name = "User_methods"

Sub DoAround(): Call NoSup: flg_InWork = True 'b6a
  If ActiveSheet.Cells(ActiveCell.row, 1).Hyperlinks.Count Then
    last_sheet = FnWSNum(ActiveSheet.name)
    If last_sheet = 3 Then last_sheet = 0
    ActiveSheet.Cells(ActiveCell.row, 1).Hyperlinks(1).Follow NewWindow:=False, _
                                                              AddHistory:=False
    If Not CBool(FnWSNum(ActiveSheet.name)) Then _
    ActiveSheet.Cells(ActiveCell.row, last_sheet + 2).Hyperlinks(1).Follow NewWindow:=False, _
                                                                           AddHistory:=False
  End If
flg_InWork = False: Call FocusOnActiveTerm: End Sub
'********************* Sort *************************
'****************************************************
Sub Sort_by_ID()
    Call Uni_Sort("A")
End Sub
'****************************************************
Sub Sort_by_En(Optional s_ord = xlAscending): stp = IIf(Application.ActiveSheet.name = WS0, 1, 2)
so = Range("B1").id: For i% = 2 To 6 Step stp: Cells(1, i).id = "": Next i%: If so <> "" Then s_ord = so
Call Uni_Sort("B", s_ord): Range("B1").id = IIf(s_ord = xlAscending, xlDescending, xlAscending)
Call Alloc_copies("B"): End Sub
'****************************************************
Sub Sort_by_Ru(Optional s_ord = xlAscending)
  If Application.ActiveSheet.name = WS0 Then
    so = Range("C1").id: For i% = 2 To 4: Cells(1, i).id = "": Next i%: If so <> "" Then s_ord = so
    Call Uni_Sort("C", s_ord): Range("C1").id = IIf(s_ord = xlAscending, xlDescending, xlAscending)
    Call Alloc_copies("C")
  Else
    so = Range("D1").id: For i% = 2 To 6 Step 2: Cells(1, i).id = "": Next i%: If so <> "" Then s_ord = so
    Call Uni_Sort("D", s_ord): Range("D1").id = IIf(s_ord = xlAscending, xlDescending, xlAscending)
    Call Alloc_copies("D")
  End If
End Sub
'****************************************************
Sub Sort_by_Ua(Optional s_ord = xlAscending)
  If Application.ActiveSheet.name = WS0 Then
    so = Range("D1").id: For i% = 2 To 4: Cells(1, i).id = "": Next i%: If so <> "" Then s_ord = so
    Call Uni_Sort("D", s_ord): Range("D1").id = IIf(s_ord = xlAscending, xlDescending, xlAscending)
    Call Alloc_copies("D")
  Else
    so = Range("F1").id: For i% = 2 To 6 Step 2: Cells(1, i).id = "": Next i%: If so <> "" Then s_ord = so
    Call Uni_Sort("F", s_ord): Range("F1").id = IIf(s_ord = xlAscending, xlDescending, xlAscending)
    Call Alloc_copies("F")
  End If
End Sub
'****************************************************
Sub Sort_by_Cat()
  If Application.ActiveSheet.name = WSA Then
    Call Uni_Sort("H")
  Else: Call Uni_Sort("E")
  End If
End Sub
'****************************************************
Sub Sort_by_ABC()
Dim was_cat As String: 'ws = ActiveSheet.name
was_cat = FnGetCurrentCat '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If was_cat <> "" Then Call NoCat 'Cat_All(True)
Call DelColorDesign
PF.setMode "p5": 'PF.show vbModeless
For i = 1 To 3
  'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + FnWSCase(i) '!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Header!
  ShowProgressBar i, True
  'Sheets(FnWSCase(i)).Activate
  'Call Uni_Sort("C")
  Uni_Sort_WS "C", Index(i)
Next i: ReCat was_cat: 'Sheets(ws).Activate
PF.setModeActual: End Sub 'Call SetColorDesign
'****************************************************
Sub test12()
For i = 1 To 3
 Sheets(FnWSCase(i)).Range("A1").AutoFilter field:=4
Next i
End Sub


Sub Sort_by_group()
ws = ActiveSheet.name: Dim was_cat As String
was_cat = FnGetCurrentCat '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If was_cat <> "" Then Call Cat_All(True)
NoSup: DelColorDesign: PF.setMode "p5": 'PF.show vbModeless
For i = 1 To 3
  UnGroupRows i
  'If was_cat <> "" Then Sheets(FnWSCase(i)).Range("A1").AutoFilter field:=4
  'PF.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + FnWSCase(i)
  Call ShowProgressBar(i, True)
  'Sheets(FnWSCase(i)).Activate '|fffd||fffd||fffd| Uni_Sort
  'Call Uni_Sort("B")
  Uni_Sort_WS "B", Index(i)
  'GroupRows (i) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ReCat
  Sheets(Index(i)).rows.UseStandardHeight = True
  'last_active.Rows(1).RowHeight = 53
  Sheets(Index(i)).rows.RowHeight = 13
Next i: SetColorDesign 'Sheets(ws).Activate:
ReCat was_cat: PF.setModeActual: SUp: End Sub
'****************************************************
'****************************************************
'****************************************************

Sub Uni_Sort(sort_column, Optional s_ord = xlAscending)
Call Uni_Sort_WS(sort_column, ActiveSheet.Index, s_ord)
End Sub
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sort_column - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. - "A")
Sub Uni_Sort_WS(sort_column, ws%, Optional s_ord = xlAscending) 'string
Call NoSup: unlockWB
was_cat$ = FnGetCurrentCat '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If was_cat <> "" Then Sheets(ws).Range("A1").AutoFilter field:=4 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| NoCat
If FnFormIsLoaded("FindForm") Then FindHider '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Unload)
Dim id As String: id = Cells(ActiveCell.row, 1)
range_used = Sheets(ws).name + "!A2:J" + Trim(str(FnGetLastRow(FnWSNum(ActiveSheet.name)))): unLockWs ws
Range(range_used).Sort Key1:=Range(Sheets(ws).name + "!" + sort_column + "2"), Order1:=s_ord, header:=xlNo, _
                       OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom 'header:=xlGuess - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Range - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------ReID()--------------------
If ws% <> wsABC Then reID (eru(ws))
'-------------------------------------------------
If ActiveSheet.Index = ws And FnFarCell(eru(ws), id, far_row, far_WS) Then _
  Application.Goto Reference:=Cells(far_row, 1), Scroll:=True
If was_cat <> "" Then ReCat was_cat '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Call SUp: LockWBif
End Sub
'****************************************************


Attribute VB_Name = "VBE_tools"
Sub VBEtest()
Call VBEprocedureSelect("LM")
End Sub


Function VBEFindText(str$, Optional inCM$) As Boolean
If str = "" Then VBEFindText = False: Exit Function Else str$ = Replace(str$, "#|fffd||fffd||fffd||fffd||fffd|#", "") '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
For Each Item In Application.vbe.VBProjects("MACProject").VBComponents
      With Item.CodeModule
        If .find(str, 1, 1, .CountOfLines, 1, False, False) And _
            IIf(inCM$ <> "", inCM$, Item.name) = Item.name Then
            '-> |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For Line = 1 To .CountOfLines: spos = posFirst(str, .Lines(Line, 1))
              If spos Then
                Application.vbe.MainWindow.Visible = True
                .codepane.show  '.Activate |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CP
                'item.CodeModule.CodePane.TopLine = Line
                Call .codepane.SetSelection(Line, spos, Line, spos + Len(str))
              VBEFindText = True: Exit Function: End If
            Next Line
        Exit For: End If
      End With
    Next Item
End Function

Function VBElog_branch(str As String)
Dim log_str As String
    If InStr(1, str, "|") Then
      log_str = "LP " & Mid(str, posLast("|", str) + 1, Len(str))
    End If
    If Not VBEFindText(log_str) Then Msg "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & log_str & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
End Function

Sub VBEfunc_Browser()
Dim log_str As String: log_str = ActiveCell.Text
Select Case ActiveCell.Column
Case 2: 'Object
    For Each ws In Sheets
      If ws.name = log_str Then
        For Each Item In Application.vbe.VBProjects("MAINProject").VBComponents
          If Item.name = log_str Then
            Application.vbe.MainWindow.Visible = True
            Item.CodeModule.codepane.show
            Item.CodeModule.codepane.TopLine = 1
            Range("A" & ActiveCell.row & ":D" & ActiveCell.row).Select
          Exit Sub: End If
        Next
      Exit Sub: End If
    Next
    'Module or Form
    For Each Item In Application.vbe.VBProjects("MACProject").VBComponents
      If Item.name = log_str Then
        Application.vbe.MainWindow.Visible = True
        Item.CodeModule.codepane.show
        Item.CodeModule.codepane.TopLine = 1
        Range("A" & ActiveCell.row & ":D" & ActiveCell.row).Select
      Exit Sub: End If
    Next: Exit Sub
Case 3: 'description (|fffd||fffd||fffd||fffd||fffd|)
    If VBEFindText(log_str, Cells(ActiveCell.row, 2)) Then Range("A" & ActiveCell.row & ":D" & ActiveCell.row).Select: Exit Sub
Case 4: 'Item (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If log_str <> "" Then Application.Run "MAC.XLA!VBEprocedureSelect", log_str
Case Else: Exit Sub
End Select
'If settingsForm.CheckBox10.Value Then
    Range("A" & ActiveCell.row & ":D" & ActiveCell.row).Select
End Sub

Sub vbe(procName$): VBEprocedureSelect procName$: End Sub '~|fffd||fffd||fffd||fffd|.
Sub VBEprocedureSelect(ByVal procName As String): ls "~", "VBEprocedureSelect", procName
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Rem: 1)|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2) |fffd||fffd||fffd||fffd||fffd| (text)
      If Left(procName, 2) = "> " Then GoTo lmL Else procName = Replace(procName, ".", "_"): procName0 = procName
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "Form_method", "UserForm_method", <FormName>_method |fffd| <FormName>.method
retL: s_line = 0: frm_n$ = Replace(prsBefore("Form_", procName), "> ", ""): If frm_n$ <> "" Then procName = "UserForm_" & prsafterdown("Form_", procName)
'Application.VBE.VBProjects("MACProject").Activate
'MsgBox Application.VBE.ActiveVBProject.name
'Application.VBE.VBProjects ("MAC.XLA").
On Error GoTo quitL
If Application.vbe.CodePanes(2).CodeModule.ProcBodyLine(procName, vbext_pk_Proc) Then
    For Each Item In Application.vbe.VBProjects("MACProject").VBComponents
      If True Then 'Item.Type = 1 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Modules
        'If Item.name = "FindForm" Then Msg "FindForm"
        If frm_n$ <> "" Then If Replace(Item.name, "Form", "") <> frm_n$ Then GoTo nxtL '|fffd||fffd||fffd||fffd|. FindForm_Activate
        s_line = Item.CodeModule.ProcBodyLine(procName, vbext_pk_Proc)
        If s_line = 0 Then s_line = Item.CodeModule.ProcBodyLine(Replace(procName, "UserForm_", ""), vbext_pk_Proc) _
                      Else i_name = Item.name: Exit For
        If s_line <> 0 Then procName = Replace(procName, "UserForm_", ""): i_name = Item.name: Exit For
nxtL: End If: Next Item: End If
lmL:  If s_line <> 0 Then
            With Item.CodeModule: Application.vbe.MainWindow.Visible = True
              .codepane.show: spos = InStr(1, .Lines(s_line, 1), procName)
              Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Item
              Call .codepane.SetSelection(s_line, spos, s_line, spos + Len(procName))
            End With
      ElseIf posFirst("> ", procName) = 1 Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| LM
          Dim LMstr As String: LMstr = "LM """ & prsAfter("> ", procName) & """"
          If posFirst(": ", LMstr) Then LMstr = prsBefore(": ", LMstr) + ": """ ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| LMName: <info>
          If Not VBEFindText(LMstr) Then _
            MsgBox "|fffd||fffd||fffd||fffd||fffd| """ & procName & """ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LM |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
      ElseIf procName0 = procName Then
          If hasIt("_", procName) And Not hasIt("Form_", procName) Then '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
             procName = prsBefore("_", procName) & "Form_" & prsAfter("_", procName): GoTo retL: End If
      Else: Msg procName & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LM, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
          '2 Clipboard
            Set MyData = New DataObject
            MyData.SetText procName
            MyData.PutInClipboard
      Set MyData = Nothing: End If: Exit Sub
quitL: Resume Next: End Sub


Rem: Unused
Sub SaveAllwithHiding(): With SCSForm: For i% = 1 To 4: hWnd& = .GetTBhwnd&(i%): If hWnd& > 0 Then _
        If prsBefore("[", getWndCaption$(hWnd&)) = "Visual Basic - MAC.XLA " Then Exit For
Next:  .HideTargetW: pos% = IIf(i% = 5, 0, i%): If pos% > 0 Then If pos% = 4 Then .Castling 4, 3 Else .ReleaseW hWnd&
.reParkW True: End With: With Application: If Not .Workbooks("MAC.XLA").Saved Then .Workbooks("MAC.XLA").Save: .Workbooks("MAC.XLA").Saved = True
                            If Not .Workbooks("MAIN.XLSB").Saved Then .Workbooks("MAIN.XLSB").Save: .Workbooks("MAIN.XLSB").Saved = True
End With: With SCSForm: If pos% = 0 Then .reParkW Else If pos% = 4 Then .Castling 3, 4 Else .CollectW hWnd&, pos%
                                    Call waitF_long: End With: End Sub

                                    
Attribute VB_Name = "WEB"
'Option Explicit

Rem:==================
Rem: XML, HTML
Rem:====================================================

Function FnGetXmlCode(term, Abbrev, determ, trans_term, lang_id)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd|
FnGetXmlCode = "<line><term>" + term + "</term><defn><abbr>" + _
               Abbrev + "</abbr><trns lang=""" + lang_id + """>" + trans_term + _
               "</trns>" + determ + "</defn></line>"
End Function
'****************************************************

Rem:==================
Rem: web-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| VBA
Rem:====================================================

Function |fffd||fffd||fffd||fffd|HTML$(s$, Optional pass As Boolean, Optional BRonly As Boolean): 'If pass Then |fffd||fffd||fffd||fffd|HTML$ = s$: Exit Function
If pass Then If Not hasIt("</script>", s$) Then |fffd||fffd||fffd||fffd|HTML$ = s$: Exit Function  'hide-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
If BRonly Then |fffd||fffd||fffd||fffd|HTML = s$: GoTo BRonlyL Else |fffd||fffd||fffd||fffd|HTML$ = Replace(Replace(Replace(s$, "&", "&" & Chr(1)), "<", "&lt;"), ">", "&gt;") ', vbTab, " ... ")
                                                |fffd||fffd||fffd||fffd|HTML$ = Replace(Replace(Replace(|fffd||fffd||fffd||fffd|HTML$, "'", "&#39;"), """", "&quot;"), " ", "&nbsp; ")
BRonlyL:                                        |fffd||fffd||fffd||fffd|HTML$ = Replace(Replace(|fffd||fffd||fffd||fffd|HTML$, Chr(10), Chr(13)), Chr(13), "<BR>"): End Function
Function |fffd||fffd||fffd||fffd|HTML$(s$, Optional pass As Boolean): If pass Then |fffd||fffd||fffd||fffd|HTML$ = s$: Exit Function '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|HTML$
         |fffd||fffd||fffd||fffd|HTML$ = Replace(Replace(s$, "&#39;", "'"), "&quot;", """"): End Function
'Function re|fffd||fffd|HTML$(s$, Optional pass As Boolean): If pass Then re|fffd||fffd|HTML$ = s$: Exit Function '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|HTML$
'         re|fffd||fffd|HTML$ = Replace(s$, """", "&quot;"): End Function
Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <- UpdateDefinitionFormatting
Function |fffd||fffd||fffd||fffd|HTML$(s$, Optional pass As Boolean, Optional result$): If pass Then |fffd||fffd||fffd||fffd|HTML$ = s$: Exit Function
         |fffd||fffd||fffd||fffd|HTML$ = UpdateDefinitionFormattingHTML$(s$, result$)
         If sag(cnt, prsCount("<CONST>", |fffd||fffd||fffd||fffd|HTML$)) = 0 Then Exit Function '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| <CONST></CONST>
         For i = 1 To cnt: |fffd||fffd||fffd||fffd|HTML$ = prsBefore("<CONST>", |fffd||fffd||fffd||fffd|HTML$) & _
                                       clearFromTags$("<", ">", prsBetween("<CONST>", "</CONST>", |fffd||fffd||fffd||fffd|HTML$, , fpos&)) & _
                                       Mid(|fffd||fffd||fffd||fffd|HTML$, fpos& + 1): Next: 'db_ |fffd||fffd||fffd||fffd|HTML$
End Function



Attribute VB_Name = "WaitingForm"
Attribute VB_Base = "0{2123C508-F49E-47D3-89B8-F6D23A715119}{4C8D7B50-EC93-4AE5-AB83-7AA3B6E90359}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "a____test"

Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|1()
'Call ShowAllForms
Rem: Debugging
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| <BRAKE>
'db_:            MsgBox "db_": Exit Sub
'Application.Top = 1: Application.Height = 200: Application.Width = 200: SCSForm.reDraw: 'Exit Sub
'FreezeIf Not osXP: tbc "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'Application.ScreenUpdating = True
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "A")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
svrFilterFix '- |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Sub qwick_test()
Call WIN_D:
dodelay 1
With SCSForm: SCSForm.restoreW .t_hwnd, True: .reParkW: End With
'SavePicture FindForm.Image16.Picture, "C:\Temp\new.dib"
End Sub

Sub inwork_now3(): Dim rt As rect: With SCSForm: Select Case "DDM" '*RUN*
Case "SCSFormTest": If Not FnFormIsLoaded("SCSForm") Then MsgBox "SCSForm |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Sub
           Dim ms$: ms = ".Visible = " & .Visible & Chr(10)
               sadd ms, "Target_corner: .Right = " & Application.Left + Application.Width & _
                                     "; .Bottom = " & Application.Top + Application.Height & Chr(10)
               sadd ms, "Form_position: .Left = " & .Left & "; .Top = " & .Top & Chr(10)
               Call GetWindowRect(.t_hwnd, rt): sadd ms, "target_pos: " & .rectToStr(rt) & "(Bottom|Left|Right|Top)"
           MsgBox ms$
Case "test|fffd||fffd||fffd||fffd||fffd||fffd|T1": Call test|fffd||fffd||fffd||fffd||fffd||fffd|T1id(Cells(ActiveCell.row, 1))
Case "test|fffd||fffd||fffd||fffd||fffd||fffd|T2": Call test|fffd||fffd||fffd||fffd||fffd||fffd|T2
Case "test|fffd||fffd||fffd||fffd||fffd|": Call test|fffd||fffd||fffd||fffd||fffd|
Case "testWindow": Application.Visible = True
                    'SetForegroundWindow& 203296
Case "DDM": 'With Application: .Left = 0: .Width = 20: .Top = 0: .Height = 20: End With
        MsgBox "on:" & DDM.On & " #:" & DDM.num & " forced:" & DDM.forceSM & " http:" & SCSForm.http_hwnd & Chr(10) & _
               "Sc%: " & ScLt% & "x" & ScRt% & "x" & ScTp% & "x" & ScBm% & "     w" & ScRt% - ScLt% & ":h" & ScBm% - ScTp% & Chr(10) & _
               "DDM: " & DDM.Left & "x" & DDM.Right & "x" & DDM.Top & "x" & DDM.Bottom & "     w" & DDM.Width & ":h" & DDM.Heigth
Case 26: SUp True 'SetTopMostWindow 464060, False
         'SetTopMostWindow 1772618, True
        '  Call ShowEditor:          Exit Sub
        'MsgBox RGB(255, 255, 255): Exit Sub
        'ActiveCell.Interior.ColorIndex = xlNone
        'ActiveCell.Interior.Color = RGB(255, 255, 255) - ActiveCell.Interior.Color: 'Exit Sub ' RGB(255, 255, 255): Exit Sub
        'ActiveCell.Font.Color = RGB(255, 255, 255) - ActiveCell.Font.Color ': Exit Sub
        'ActiveCell.Font.ColorIndex = inv(5)
        MsgBox "font: " & nvl(ActiveCell.Font.ColorIndex, "null") & " inv: " & inv(ActiveCell.Font.ColorIndex) & Chr(10) & _
               "Iter: " & nvl(ActiveCell.Interior.ColorIndex, "null") & " inv: " & inv(ActiveCell.Interior.ColorIndex) & Chr(10) & _
               "IterCol: " & ActiveCell.Interior.Color & " inv: " & RGBm - ActiveCell.Interior.Color & Chr(10) & _
               xlNone & " - " & nvl(ActiveCell.Font.ColorIndex, "null") & " - " & xlAutomatic
            Exit Sub            '15 - |fffd||fffd||fffd||fffd||fffd|; xlAutomatic = -4105 (|fffd||fffd||fffd||fffd||fffd||fffd|); 2 - |fffd||fffd||fffd||fffd||fffd|
        MsgBox PF.Controls("ImageWS1").tag: Exit Sub
        MsgBox DDM.On: Exit Sub
        MsgBox Sheets(2).Cells(768, 3): Exit Sub
        MsgBox ActiveSheet.name: Exit Sub
        MsgBox EditForm.Visible: EditForm.Left = 0: EditForm.Top = 0:
        SCSForm.freeze FindWindow(vbNullString, EditForm.Caption)
        Exit Sub
        WSim 'MsgBox ThisWorkbook.name: Exit Sub
        Dim cs As New CServ
        cs.Initialize "34_2"
        cs.ShowMe
        Set cs = Nothing: Exit Sub
         'On Error Resume Next
         'Dim MyDate: MyDate = "February 12, 1969"
         MsgBox smart_freezing & flg_InWork 'FnFormIsLoaded("FindForm")
         hWnd& = GetActiveWindow&(): MsgBox "Caption = " & getWndCaption(hWnd&): Exit Sub
         With Application.ActiveWindow: MsgBox "Caption = " & .Caption & vbNewLine & _
                                               "Top = " & .Top & vbNewLine & "Left = " & .Left & vbNewLine & _
                                               "Height = " & .Height & vbNewLine & "Width = " & .Width & vbNewLine: End With: Exit Sub
         MsgBox FindForm.Caption: Exit Sub
         hWnd& = GetActiveWindow&()
        If FnFormIsLoaded("SCSForm") Then MsgBox hWnd& & " " & GetTopParentH(hWnd&) & " " & SCSForm.inCollection(hWnd&)
         'If FnFormIsLoaded("SCSForm") Then SCSForm.Show 0
        'MsgBox Cells(2, 2)  'WSL 'CDate("2/12/1969") - 0.0006
        'CLng(Now) 'PF.ActiveControl.name
         ' MsgBox ActiveSheet.Shapes(1).Top & "%" & ActiveCell.Top 'Cells(ActiveCell.row, defcol).Shapes(1).Top '.Item(1).Top
         'SCSForm.glowing fade:=True: SCSForm.focusMe
        'setFocusOnForm "SCSForm" ':
        'MsgBox REPLICATE$(DatePart("h", Now) + 1, "0", 2) 'DatePart("h", TimeValue("08:01:01")) + 1
'MsgBox FnWSCase("3") 'SCSForm.glowing: 'MsgBox Asc("Y") 'FnIsRoot("35_5_5")
Case 25: For i = 1 To 100: s$ = s$ & i & " - " & Chr(i) & IIf(Int(i / 10) = i / 10, Chr(13), "     "): Next i: MsgBox s$
Case 24:  t_hwnd& = 1187516 '1968286 '1187516
Call GetWindowRect(t_hwnd, rt): rt.Left = rt.Left + 1: rt.Right = rt.Right + 1:
                                rt.Top = rt.Top - 22: rt.Bottom = rt.Bottom - 22:
                                MsgBox rt.Left & " " & rt.Top & " " & rt.Right & " " & rt.Bottom: Call SetWindowRect(t_hwnd, rt)
'MsgBox Cells(ActiveCell.row, 3).Interior.ColorIndex & " " & xlNone
          'SCSForm.Clear_http_list
          'Application.ScreenUpdating = True
         'MsgBox FnGetCurrentCat
         '         ReCat "*" 'IsDate(FindForm.TextBox1)
Case 23: MsgBox flg_InWork 'Not 2 'False Or True And False   'PF.Image16.Tag    ' Not |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, And |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Or
Case 22: ActiveSheet.DisplayPageBreaks = False '  MsgBox IsNumeric("1_1") ' EditForm.CommandButton1.Caption
Case 21: MsgBox ActiveCell.row & Chr(10) & _
                Cells(Cells(rows.Count, 1).End(xlUp).row + 1, 1).row & Chr(10) & _
                ActiveSheet.UsedRange.rows.Count & Chr(10) & _
                Cells(rows.Count, 1).End(xlUp).row & Chr(10) & _
                ActiveCell.End(xlUp).row & Chr(10) & Selection.End(xlUp).row '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UsedRange!
Case 21: MsgBox LoadParamBlock$("PF_Set1", "PF_Set4", "PF_Set" & PF.c_Set%) 'Sheets("Dispetcher_").UsedRange.Rows.Count
Case 19:  Application.EnableEvents = True: Exit Sub
          MsgBox SCSForm.d_http_hwnd: Exit Sub
       MsgBox FnFormIsLoaded("CATForm"): Exit Sub
       For Each hh In Sheets(2).Columns(4).Hyperlinks: MsgBox hh.SubAddress
         'If hh.SubAddress = prfx$ & lost_ID$ Then hh.SubAddress = prfx$ & t_id$
       Next hh
'MsgBox FnFarCell(0, "25_4", far_row, far_WS)
          'FnGetRowFromID("14_2", eru(ActiveSheet.index)) & ": " & ActiveCell.row
Case 18: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Case 17: MsgBox Sheets("Dispetcher_").Cells(1, 3).Interior.ColorIndex
Case 16: PF.SetTextFieldVisible True
Case 15:  .SetRT "1x", .bl_hwnd&
Case 14: If Cells(ActiveCell.row, 3) = "" Then rows(ActiveCell.row).ClearContents: dispSort
Case 17: MsgBox FindForm.ImageW3.SpecialEffect  'ActiveWindow.FreezePanes = False
Case 16: unLockWs: ActiveCell.Font.ColorIndex = inv(xlAutomatic) 'Application.CommandBars("Cell").Controls(1).Caption ' DDM.forceSM
Case 15: MsgBox Excel.Application  'Evaluate("[MAIN.xls]log_!B5").Text
Case 14: MsgBox Application.Left + Application.Width
Case 13: MsgBox SCSForm.http_hwnd 'mtrx$ 'PF.TImg1.BackColor
Case 12: SCSForm.CollectW DDM.TBhwnd, 1  'restoreW 6030774
Case 11: SCSForm.cornerIt 6030774 '   Call SetTransparent(6030774, 220)  'Call SCSForm.reParkW(False)
Case 10: With SCSForm: .reParkW: tbc "MsgBox .http_hwnd": End With
Case 9: With SCSForm: MsgBox .vb_hwnd&: End With '.http_hwnd&
Case 8: With PF: MsgBox .c_Set & Chr(10) & "Tag - 1: " & .Controls("ImageWS0").tag & " 2: " & .Controls("ImageWS1").tag & " 3: " & .Controls("ImageWS2").tag & Chr(10) & _
                        "CTT - 1: " & .Controls("ImageWS0").ControlTipText & " 2: " & .Controls("ImageWS1").ControlTipText & " 3: " & .Controls("ImageWS2").ControlTipText: End With
Case 7: MsgBox Sheets("Dispetcher_").Columns(1).Hidden 'SCSForm.http_hwnd&: ' SCSForm.Left = ScLt%
Case 6: With SCSForm: Call GetWindowRect(.t_hwnd, rt): rt.Left = ScLt%: rt.Right = ScLt + 200: Call SetWindowRect(.t_hwnd, rt): End With
Case 4: With Application: MsgBox ScLt% & "x" & ScRt% & "x" & ScTp% & "x" & ScBm% & Chr(10) & _
                                .Left & "x" & .Width & "x" & .Top & "x" & .Height: End With
Case 3: 'Call GetWindowRect(28841210, rt)
        'MsgBox DDM.useTB & ":" & DDM.TBpos & ":" & DDM.TBwidth & ":" & rt.Left & "x" & rt.Right & "x" & rt.Top & "x" & rt.Bottom
        'MsgBox getWndCaption$(28841210)
Case 2:
'UserForm13.Show
'On Error Resume Next:
'MsgBox Sheets(1).AutoFilter.Filters.Item(4).Criteria3
'MsgBox EditForm.TextBoxCat.Tag:
Case 1:
#If VBA6 Then
  a = 1
#Else
  a = 2
#End If
MsgBox a ' GetActiveWindow& 'SCSForm.earth_Down
End Select: End With: End Sub

Sub testfind(): With FindForm.Image7:
MsgBox "Image7.BorderStyle: " & .BorderStyle & Chr(10) & _
       "Image7.SpecialEffect: " & IIf(.SpecialEffect = fmSpecialEffectEtched, "Etched", _
                                  IIf(.SpecialEffect = fmSpecialEffectSunken, "Sunken", "Flat"))
End With: End Sub

Sub testssad(): '66026
'MsgBox WindowFromPoint(ScLt, 0): Exit Sub
'MsgBox GetDesktopWindow&: Exit Sub
MsgBox FindWindow(vbNullString, "FolderView"): Exit Sub
MsgBox FindWindowEx(FindWindow(vbNullString, "Progman"), 0, "ShellDll_DefView", "FolderView"): Exit Sub
'ShowDesktopW True: Exit Sub
ShowWindow& 66072, SW_SHOW&  'FindWindow(vbNullString, "FolderView") = 0?
Exit Sub

'customSC_Restore: Exit Sub
'Dim tPT As POINTAPI: GetCursorPos tPT: hwnd& = WindowFromPoint(tPT.X, tPT.Y)
'hwnd& = WindowFromPoint(Windows("win2xx").PointsToScreenPixelsX(Windows("win2xx").Left + 10), _
                        Windows("win2xx").PointsToScreenPixelsY(Windows("win2xx").Top - _
                                                                Windows("win2xx").Height) + 0): MsgBox hwnd&: Exit Sub
'MsgBox tPT.X & "=" & Windows("win2xx").Left & "=" & Windows("win2xx").PointsToScreenPixelsX(Windows("win2xx").Left) & " " & _
       tPT.Y & "=" & Windows("win2xx").Top & "=" & Windows("win2xx").PointsToScreenPixelsY(Windows("win2xx").Top - _
                                                                                           Windows("win2xx").Height): Exit Sub
'ActiveWindow.DisplayOutline = False: Exit Sub
If twoWindows Then Windows(2).Close: Exit Sub
MsgBox FnFormIsLoaded("StatForm"): Exit Sub
MsgBox Application.Height & " " & Windows("1").Height: Exit Sub
MsgBox FindWindow(vbNullString, "win2xx"): Exit Sub '|fffd||fffd||fffd||fffd|
setNoHeadersC "win2xx", False
Exit Sub
'Call dropPresaveLog: Exit Sub
'ThisWorkbook.ShowAllForms False: Exit Sub
MsgBox SCSForm.LParked 'ActiveCell.id 'getFreezePanesRow%:
Exit Sub
'MsgBox Cells(ActiveCell.row, catcol): Exit Sub
Application.Top = 0
'MsgBox Sheets(2).UsedRange.rows.Count
'xlNone & " - " & nvl(ActiveCell.Font.ColorIndex, "null") & " - " & xlAutomatic
'MsgBox FnIsRoot("37_2_1")
'MsgBox CInt(True) + 1
End Sub

Sub temsds()
Call LoadSettings
End Sub

Sub testst(): MsgBox rows(ActiveCell.row).OutlineLevel: Exit Sub   'fnWSisGrouped
For i = 1 To 3: Call UnGroupRows(i): Next i
setOutlineShowLevel (3)
End Sub

'=====================================================================
Sub |fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd|(): With ThisWorkbook:
.ShowAllForms False: waitF_long: .ShowAllForms True: SCSForm.UserForm_Layout: Exit Sub
'Call test|fffd||fffd||fffd||fffd||fffd|
'Call test|fffd||fffd||fffd||fffd||fffd||fffd|
MsgBox FnGetShadowFrom(1, "22_7_1") & "."
End With: End Sub
'=====================================================================
Sub test|fffd||fffd||fffd||fffd||fffd|(): With EditForm: MsgBox _
"Image[].ControlTipText (|fffd||fffd||fffd||fffd||fffd||fffd|) = " & .Image1.ControlTipText + Chr(10) + _
"Image[].SpecialEffect (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) = " & CStr(.Image1.SpecialEffect) + Chr(10) + _
"ToggleButton1.caption (ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) = " & .ToggleButton1.Caption + Chr(10) + _
"ToggleButton1.ControlTipText (|fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd|' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) = " & .ToggleButton1.ControlTipText + Chr(10) + _
"ToggleButton1.Tag (ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) = " & .ToggleButton1.tag + Chr(10) + _
"CommandButton1.caption (ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) = " & .CommandButton1.Caption + Chr(10) + _
"CommandButton1.ControlTipText (|fffd||fffd||fffd||fffd||fffd| 'Auto')  = " & .CommandButton1.ControlTipText + Chr(10) + _
"TextBox[]GId.AutoWordSelect (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd|) = " & CStr(.TextBoxEnGId.AutoWordSelect) + Chr(10) + _
"TextBox[]GId.ControlTipText (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) = " & .TextBoxEnGId.ControlTipText + Chr(10) + _
"ComboBox[]G.AutoWordSelect (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd|) = " & CStr(.ComboBoxEnG.AutoWordSelect) + Chr(10) + _
"ComboBox[]G.ControlTipText (root |fffd||fffd||fffd| 'Auto') = " & .ComboBoxEnG.ControlTipText + Chr(10) + _
"TextBoxCat.ControlTipText (category |fffd||fffd||fffd| 'Auto') = " & .TextBoxCat.ControlTipText + Chr(10): End With: End Sub
'=====================================================================
Sub test|fffd||fffd||fffd||fffd||fffd||fffd|T1id(id As String) '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: Public T1 As New CTerm - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                                                                'Private/Dim T1 As New CTerm - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                                                 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: Dim T1 As New CTerm - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Set T1 = New CTerm: Call T1.Initialize(id): MsgBox _
"ID  = " & T1.id + Chr(10) + _
"gID = " & T1.Gid + Chr(10) + _
"sID = " & T1.sid + Chr(10) + _
"Term1 = " & T1.term(1) + Chr(10) + _
"Term2 = " & T1.term(2) + Chr(10) + _
"Term3 = " & T1.term(3) + Chr(10) + _
"Def1  = " & T1.def(1) + Chr(10) + _
"Def2  = " & T1.def(2) + Chr(10) + _
"Def3  = " & T1.def(3) + Chr(10) + _
"Shad1 = " & T1.shad(1) + Chr(10) + _
"Shad2 = " & T1.shad(2) + Chr(10) + _
"Shad3 = " & T1.shad(3) + Chr(10) + _
"ABC1 = " & T1.ABC(1) + Chr(10) + _
"ABC2 = " & T1.ABC(2) + Chr(10) + _
"ABC3 = " & T1.ABC(3) + Chr(10) + _
"Cat = " & T1.cat + Chr(10) + _
"Link = " & T1.link + Chr(10)
Set T1 = Nothing
End Sub

Sub tesgdgsg()
MsgBox EditForm.ComboBoxRuG.Text ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
End Sub

Sub test|fffd||fffd||fffd||fffd||fffd||fffd|T2()
Dim T2 As CFTerm: Set T2 = New CFTerm
   Call T2.InitializeByForm
If Not FnFormIsLoaded("EditForm") Then Exit Sub
MsgBox _
"ID(old)  = " & T2.id & "(" & T2.oldID & ")" & Chr(10) + _
"gID(old) = " & T2.Gid & "(" & T2.oldGId & ")" & Chr(10) + _
"sID = " & T2.sid + Chr(10) + _
"Term1 = " & T2.term(1) + Chr(10) + _
"Term2 = " & T2.term(2) + Chr(10) + _
"Term3 = " & T2.term(3) + Chr(10) + _
"Shad1 = " & T2.shad(1) + Chr(10) + _
"Shad2 = " & T2.shad(2) + Chr(10) + _
"Shad3 = " & T2.shad(3) + Chr(10) + _
"old_Shad1 = " & T2.oldshad(1) + Chr(10) + _
"ABC1 = " & T2.ABC(1) + Chr(10) + _
"ABC2 = " & T2.ABC(2) + Chr(10) + _
"ABC3 = " & T2.ABC(3) + Chr(10) + _
"ABC1old = " & T2.oldABC(1) + Chr(10) + _
"ABC2old = " & T2.oldABC(2) + Chr(10) + _
"ABC3old = " & T2.oldABC(3) + Chr(10) + _
"Cat = " & T2.cat + Chr(10) + _
"old_Cat = " & T2.oldcat + Chr(10) + _
"Link = " & T2.link + Chr(10) + _
"isGen = " & CStr(T2.isGen)

'"Def1  = " & T2.def(1) + Chr(10) + _
'"old_Def1  = " & T2.olddef(1) + Chr(10) + _
'"Def2  = " & T2.def(2) + Chr(10) + _
'"old_Def2  = " & T2.olddef(2) + Chr(10) + _
'"Def3  = " & T2.def(3) + Chr(10) + _
'"old_Def3  = " & T2.olddef(3) + Chr(10) + _

Set T2 = Nothing
End Sub


Sub testaas(T As CTerm)
MsgBox CStr(T.term(1))
End Sub

Sub testq()

Exit Sub
'Application.Left = 2
'Application.Top = 235
Exit Sub
MsgBox Application.Top  '235
MsgBox Application.Left '2
MsgBox Application.Width '525
MsgBox Application.Height '350
End Sub

Sub Test123()
MsgBox xlGreen ' (ActiveCell.Interior.ColorIndex)
End Sub


Sub test2()
MsgBox ThisWorkbook.FullName
End Sub


Public Sub CellInfo()
'AddIndent ' &      ActiveCell.AddIndent
End Sub


Sub temp()
'If exists(FnGetPrefix(Null) + ActiveCell.Text) Then
'    MsgBox (CStr(Workbooks("MAIN.XLSB").Names(FnGetPrefix(1) + Cells(ActiveCell.Row, 1).Text).name) + Chr(10) + _
'            CStr(Workbooks("MAIN.XLSB").Names(FnGetPrefix(1) + Cells(ActiveCell.Row, 1).Text).RefersToR1C1) + Chr(10) + _
' CStr(Workbooks("MAIN.XLSB").Names(FnGetPrefix(1) + Cells(ActiveCell.Row, 1).Text).Value) + Chr(10) + _
'    "_")
'End If
'Call ActiveCell.Replace("|fffd|", "", xlPart)
'i = 0
'  For j = 2 To FnGetLastRow(i)
'    Call Sheets(FnWSCase(i)).Rows(j).Replace("|fffd|", "", xlPart)
'  Next j
'ActiveCell.ID = ""
'MsgBox ActiveCell.ID
'Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", 1, Null, Null)
'FnGetPrefix (Null)
For i = 2 To 9109
  abr = False
  term = RTrim$(Cells(i, 3).Text)
  If Right(term, 1) = ")" Then
    If Cells(i, 3).Characters(Len(term) - 1, _
          1).Font.Underline = xlUnderlineStyleSingle Then abr = True
  End If
  'Cells(i, 3).Value = Replace(term, "|fffd|", "")
  If abr Then
    t_pos = 0
    Do
      pos = t_pos
      t_pos = InStr(pos + 1, Cells(i, 2).Text, "(")
    Loop Until t_pos = 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If pos > 0 Then
      Cells(i, 2).Characters(pos, _
          Len(Cells(i, 2).Text) - pos + 1).Font.Underline = xlUnderlineStyleSingle
    End If
   End If
Next i
End Sub
























































Attribute VB_Name = "a__inwork"
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|Open VBA startpoint)#####################
Sub inwork_now(): inwork_now1: End Sub '<-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ini ##
'###################################################################
Private Sub HOT(): VBEprocedureSelect "processSCSFormKeyDown": End Sub
'<<<<<<<<<<<<<<
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
Sub LOGit(): unLPit "FindForm_StartSearching", "LP": End Sub 'LPit|unLPit -  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'<<<<<<<<<<<<<<
'TEMP (\_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_/)
' +++ |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Immediate |fffd||fffd||fffd||fffd|: ->> inwork_190913 'hot keys |fffd||fffd| {}-|fffd||fffd||fffd||fffd| <<- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd||fffd||fffd| |fffd| Delphy, |fffd||fffd| |fffd||fffd||fffd| |fffd| VBA)
' inwork_190913_now_1 'keys
' inwork_190913_now_2 'inplementation
Sub inwork_1909291(): VBEprocedureSelect "OnTimess": End Sub
Sub inwork_190929(): VBEprocedureSelect "satellite.reSize": End Sub
Sub inwork_190913_now_1(): VBEFindText "Case 83:  '<S> - {{s}} = 'superior": End Sub '<<<<<<<<<- <marquee>
Sub inwork_190913_now_2(): VBEFindText "  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": End Sub '"'<marquee> - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Sub inwork_190923(): VBEprocedureSelect "|fffd||fffd||fffd||fffd|HTML$": End Sub
Sub inwork_190913(): VBEprocedureSelect "EditForm_PastKeyBox": End Sub 'hot keys |fffd||fffd| {}-|fffd||fffd||fffd||fffd|
Sub inwork_190912(): VBEprocedureSelect "injectionHTM$": End Sub '{}-|fffd||fffd||fffd||fffd|
Sub inwork_190702(): VBEprocedureSelect "AdditionalMarkUpHTML": End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub inwork_190913_1(): VBEprocedureSelect "markUpResult$": End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| HTML
Sub inwork_190701(): VBEprocedureSelect "Open_Browser_W": End Sub
Sub inwork_190700(): VBEprocedureSelect "ResultHTML": End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub inwork_181213(): VBEprocedureSelect "Open_Browser_W_tree": End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub inwork_180907(): VBEprocedureSelect "DDBar.reBuild": End Sub
Sub inwork_180613(): VBEprocedureSelect "Disp_ShutDown": End Sub
Sub inwork_180411(): VBEprocedureSelect "App1Test": End Sub
Sub inwork_180405(): VBEprocedureSelect "EditForm_CommandButton1_Click": End Sub
Sub inwork_171011(): VBEprocedureSelect "FindForm_StartSearching": End Sub
Sub inwork_170802(): VBEprocedureSelect "OpenPDBSession": End Sub
Sub inwork_2(): VBEprocedureSelect "UpdateDefinitionFormattingHTML": End Sub
Sub inwork_1(): VBEFindText "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|#|fffd||fffd||fffd||fffd||fffd|# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| //,--,REM_": End Sub
Sub showByHwnd(hWnd&): Msg iif_$(IsWindow(hWnd&) = 1, "IsWindow") & "(" & IsWindowVisible(hWnd&) & "): " & getWndCaption(hWnd&): SCSForm.restoreW hWnd&, True: SCSForm.setWindowVisible hWnd&: SetForegroundWindow& hWnd&: SetActiveWindow& hWnd&: End Sub
Sub hideByHwnd(hWnd&): SCSForm.minimizeW hWnd&: End Sub
Sub inwork_dbgl(): VBEprocedureSelect "dbgl": End Sub
Sub inwork_dbg(): VBEprocedureSelect "dbg": End Sub
'TEMP

Sub inwork_now1(): Dim rt As rect: Select Case "termActivationOn"       '<-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'----------------------------------------------^
Case "UpdateDefinitionFormatting$": VBEprocedureSelect "UpdateDefinitionFormatting$"
Case "|fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_ABC": VBEprocedureSelect "reID2"
Case "dispFullCleaning": VBEprocedureSelect "dispFullCleaning"
Case "UpdateRowFormatting": VBEprocedureSelect "UpdateRowFormatting"
Case "test_cutted": VBEprocedureSelect "test_cutted"
Case "View_Term": VBEprocedureSelect "View_Term"
Case "srvPressID": VBEprocedureSelect "srvPressID"
Case "View_Looking": VBEprocedureSelect "View_Looking" '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Worksheet_BeforeDoubleClick
Case "LPit: cServ": VBEprocedureSelect "LPit"
Case "StatForm: cServ": VBEprocedureSelect "BMValidate"
Case "termActivationOn": VBEprocedureSelect "termActivationOn"  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| http "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Case "Open_Browser": VBEprocedureSelect "Open_Browser" '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Worksheet_BeforeDoubleClick |fffd||fffd||fffd| http "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Case "SCSForm_Hot_Keys":  VBEprocedureSelect "processSCSFormKeyDown"
Case "Open_Browser_W_tree": VBEprocedureSelect "Open_Browser_W_tree"  '|fffd||fffd||fffd||fffd||fffd||fffd| ID ~~~ 03.10.2016
Case "ShowEditor": VBEprocedureSelect "ShowEditor" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| bl_w |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Case "ToggleButton1_KeyUp": VBEprocedureSelect "ToggleButton1_KeyUp"  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Case "Open_Browser_W": VBEprocedureSelect "Open_Browser_W"
Case "EditForm": VBEprocedureSelect "EditForm_CommandButton1_Click"
Case "EditForm_g5r": FnZoneMerging "", "" '<-UpdateRoot<-.CommandButton1_Click
Case "Tools_g5q":    VBEprocedureSelect "servUpdateGroupShadows" ' <-servCompactRootIDs 0: 'ID - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Case "Tools_g5p":    srv|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat: cat$ = noRootVSsub$(sortSetABC$(":", noDouble$(":", Replace(cat$, ":;:", ":"))))
Case 17: MsgBox ActiveCell.row: Exit Sub '_1_33_2
        For Each hh In ActiveSheet.Columns(4).Hyperlinks
        MsgBox hh.SubAddress
        Next
Case 15: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (dinamics) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SC |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| wnd, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: 1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
         PDB_deactivation ActiveCell
Case 14: Sheets("log_").Activate
Case 13: dispInvertColors
Case 12: MsgBox getWndCaption(197080)
Case 11: With PF: MsgBox "Tag 1: " & .Controls(ImageWS1).tag & " 2: " & .Controls(ImageWS2).tag & " 3: " & .Controls(ImageWS3).tag & " 4: " & .Controls(ImageWS4).tag & Chr(10) & _
                         "CTT 1: " & .Controls(ImageWS1).ControlTipText & " 2: " & .Controls(ImageWS2).ControlTipText & " 3: " & .Controls(ImageWS3).ControlTipText & " 4: " & .Controls(ImageWS4).ControlTipText: End With
Case 10: MsgBox DDM.num & "=" & GetSystemMetrics(SM_CMONITORS)
MsgBox GetSystemMetrics(SM_YVIRTUALSCREEN)
'With SCSForm: MsgBox .vb_hwnd & ":" & IsWindowVisible&(.vb_hwnd&): End With
Case 9: 'DDM.TBhwnd = GetTopParentH(FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|")) '|fffd||fffd||fffd||fffd|/WinTaskBar
        'MsgBox GetSystemMetrics(SM_XVIRTUALSCREEN) & "x" & GetSystemMetrics(SM_YVIRTUALSCREEN) & "x" & GetSystemMetrics(SM_CYVIRTUALSCREEN) & "x" & GetSystemMetrics(SM_CXVIRTUALSCREEN)
        MsgBox DDM.On & ":" & DDM.forceSM & ":" & DDM.useTB & ":" & DDM.TBpos & ":" & DDM.TBwidth & ":" & DDM.Left & "x" & DDM.Right & "x" & DDM.Top & "x" & DDM.Bottom
Case 8: MsgBox FindForm.bk_color_is_black  '+
        '>> If hwnd& = 9112708 Then MsgBox cptn$
Case 7:  'ShowWindow& 196716, SW_HIDE& 'SetForegroundWindow& 24250432 tb 196716
         ShowWindow& DDM.TBhwnd, SW_SHOW& 'FindForm_Click
Case 6: Call FindForm.resetParker
Case 5: MsgBox FindWindowIn&("Microsoft Visual Basic - MAC.XLA [running] - [inwork (Code)]", _
                             "Microsoft Visual Basic for Applications - MAC.XLA [running] - [inwork (Code)]")
Case 1: '<<<<<<<<< start TCase|fffd|
    Call SCSForm.reParkW: Exit Sub
Case 2:
    Dim rt9 As rect: Call GetWindowRect(SCSForm.bl_hwnd, rt9)
    'Shx = 50: Shy = 30: SetWindowRgn SCSForm.r_hwnd, CreateEllipticRgn(rt9.Right - rt9.Left - 90 + Shx, -90 + Shy, rt9.Right - rt9.Left + Shx, Shy), True
    'Shx = 30: Shy = 30: SetWindowRgn SCSForm.r_hwnd, CreateEllipticRgn(-90 + Shx, -90 + Shy, Shx, Shy), True
    Shx = 30: Shy = 60: SetWindowRgn SCSForm.bl_hwnd, CreateEllipticRgn(-90 + Shx, rt9.Bottom - rt9.Top - 90 + Shy, Shx, rt9.Bottom - rt9.Top + Shy), True
    Call GetWindowRect(SCSForm.br_hwnd, rt9)
    Shx = 55: Shy = 65: SetWindowRgn SCSForm.br_hwnd, CreateEllipticRgn(rt9.Right - rt9.Left - 90 + Shx, rt9.Bottom - rt9.Top - 90 + Shy, rt9.Right - rt9.Left + Shx, rt9.Bottom - rt9.Top + Shy), True
    'MsgBox FnGetCurrentCat() '*:1_1:* or ""
    'MsgBox ActiveCell.Address
Case 3:
    Open_Browser
    'Call SCSForm.OpenHTTP(addrStr, Cells(ActiveCell.row, 3))
Case 0: macnamech
Case -1: Application.Quit
End Select
quitL: 'Set ctrl = Nothing
End Sub
'==========================================
















Attribute VB_Name = "a_bm"
'Option Explicit

Rem:==========
Rem: BookMarks
Rem:====================================================

Rem: ? (oldname FnBookMark_check), BMName$: "_1_57"! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "_1_" !
Function exists(BMName$, Optional scan10 As Boolean, Optional except$) As Boolean: On Error Resume Next '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         exists = BMName$ <> "_1_" & except$ And Not IsNull(Workbooks("MAIN.XLSB").Names(BMName$)): If exists Then Exit Function
                               If scan10 Then Root = FnGetRootID(BMName$): n = Int(Replace(BMName$, Root & "_", "")): bn = n: _
                                              Do: exists = exists(Root & "_" & inc(n)): Loop Until exists Or n - bn > 10 'scan10
                                                                                                   End Function
''dir(ThisWorkbook.path & "\PDB\" & T1.id & "\notes.nt") <> "" Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''dir(fld$, vbDirectory) <> "" Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************

Rem: +
Sub Set_BookMark_branch(): Call Set_BookMark(Cells(ActiveCell.row, 1).Text): End Sub
'---------------------------------------------
'srv - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| id
Sub Set_BookMark_on_Active(): new_id = "1_115"
  On Error Resume Next: WSim: Del_BookMark Cells(ActiveCell.row, 1).Text: Cells(ActiveCell.row, 1) = new_id: On Error GoTo 0
                              Set_BookMark_on ActiveSheet.Index, ActiveCell.row, FnGetPrefix(Null) & new_id: End Sub



Sub Set_BookMark(id) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (WS 1-4)
                     ' |fffd||fffd||fffd| IsNull(ID) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
    If IsNull(id) Then id = FnGenerateID(Null, Cells(ActiveCell.row, 1).Text)
    Cells(ActiveCell.row, 1).FormulaR1C1 = id
    Set_BookMark_on ActiveSheet.Index, ActiveCell.row, FnGetPrefix(Null) & id: End Sub
'---------------------------------------------
Sub Set_BookMark_on(ws_indx%, row&, name$): 'On Error Resume Next 'MsgBox Sheets(ws_indx%).Cells(row&, 1).Address 'Sheets(ws_indx%).name
    Workbooks("MAIN.XLSB").Names.Add name:=name$, RefersTo:="=" + Sheets(ws_indx%).name + "!" + Sheets(ws_indx%).Cells(row&, 1).Address: End Sub
'****************************************************

Rem: -
Sub Del_BookMark(id As String, Optional ws_index%): Call FnChangeTermID(id, "") '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If IsNull(id) Then                  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| IsNull(ID) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  Dim r&, rcount%, found As Boolean, nms As Object: Set nms = Workbooks("MAIN.XLSB").Names: rcount% = nms.Count
  While inc(r) <= rcount And Not found: found = (nms(r).RefersToRange.Address = Cells(ActiveCell.row, 1).Address): Wend
  If found Then nms(r - 1).Delete
Else: Workbooks("MAIN.XLSB").Names("_" & IIf(ws_index% = 0, FnWSNum(ActiveSheet.name), eru(ws_index%)) & "_" & id).Delete: End If: Set nms = Nothing: End Sub
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
Sub reID(ws) 'eru
For i = 2 To FnGetLastRow(ws): '-----------------Set_BookMarc(+)---------------
   Workbooks("MAIN.XLSB").Names.Add name:="_" + CStr(ws) + "_" + Sheets(Index(ws)).Cells(i, 1).Text, _
                           RefersTo:="=" + Sheets(Index(ws)).name + "!" + Cells(i, 1).Address
Next i: End Sub
'****************************************************

Attribute VB_Name = "a_groups"

Function FnGetRootFromID(lang, Shadow, mainRoot)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| "".
'|fffd| shadow - id |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| mainRoot - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| "".
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
If logging Then LogString ("in   FnGetRootFromID (" & lang & " ," & Shadow & " ," & mainRoot & ")")
FnGetRootFromID = ""
mainRoot = ""
On Error GoTo BCErrorHandler
        Dim id As String: id = Shadow
        'Call FnFarCell(lang, ID, far_row, far_WS)
        'shadow = Sheets(FnWSCase(far_WS)).Cells(far_row, 2)
        pos = InStr(1, id, "_")
        If pos = 0 Then
          Call FnFarCell(lang, id, far_row, far_WS)
          FnGetRootFromID = Sheets(far_WS).Cells(far_row, 3)
        Else
            Call FnFarCell(lang, Left$(id, pos - 1), far_row, far_WS)
            mainRoot = Sheets(far_WS).Cells(far_row, 3)
            While InStr(pos + 1, id, "_") <> 0
              pos = InStr(pos + 1, id, "_")
            Wend
            Call FnFarCell(lang, Left$(id, pos - 1), far_row, far_WS)
             FnGetRootFromID = Sheets(far_WS).Cells(far_row, 3)
        End If

If logging Then LogString ("out FnGetRootFromID (<" & FnGetRootFromID & _
                                                    ">: " & Shadow & " ," & mainRoot & ")")
Exit Function
BCErrorHandler:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  Resume Next
End Function

Function FnIsGeneral(id$) As Boolean: FnIsGeneral = exists("_0_" & id): End Function
Function FnHasShadow(id$) As Boolean: FnHasShadow = Not FnIsGeneral(id$): End Function

Function FnIsRoot(id$, Optional except$) As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| subID)
         FnIsRoot = exists("_1_" & id & "_1", True, except$): End Function          ' Root by ID
Function FnIsRoot_marked(id As String) As Boolean: If Not FnFarCell(0, id, far_row, far_WS) Then Exit Function
         FnIsRoot_marked = Sheets(far_WS).Cells(far_row, 3).Font.Bold: End Function ' Root by Markup
Function FnIsRoot_Of(Gid$, sid$) As Boolean: If Gid$ = "" Or sid$ = "" Then Exit Function
         FnIsRoot_Of = sid$ Like Gid$ & "_*": End Function '+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
Function FnIsSub_For(sid$, Gid$) As Boolean: FnIsSub_For = FnIsRoot_Of(Gid$, sid$): End Function

Function FnIsMAINGroup(id As String) As Boolean: FnIsMAINGroup = FnIsRoot(id) And FnIsGeneral(id): End Function
Function FnIsSubGroup(id As String) As Boolean: Call FnFarCell(1, id, far_row, far_WS)
         FnIsSubGroup = FnIsRoot(id) And FnIsGeneral(id) And Sheets(far_WS).Cells(far_row, 2).Font.ColorIndex = inv(15): End Function
Function FnIsPseudoGroup(id As String) As Boolean: Call FnFarCell(1, id, far_row, far_WS)
         FnIsPseudoGroup = FnIsRoot(id) And FnIsGeneral(id) And Sheets(far_WS).Cells(far_row, 2).Font.ColorIndex <> inv(15): End Function

Function FnGroupIsNotEmpty(wsnum, id, justCheck, groupsFirst, passGroupsN)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd||fffd||fffd| WSnum
'(|fffd||fffd||fffd| groups_first |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| passGroupsN |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| 0
If logging Then LogString ("in   FnGroupIsNotEmpty (" & _
                            wsnum & ", " & id & ", " & justCheck & ", " & groupsFirst & ", " & passGroupsN & ")")
FnGroupIsNotEmpty = 0
If Not exists(FnGetPrefix(wsnum) & id) Then GoTo errMsg:

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If justCheck Then '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  'If exists(FnGetPrefix(WSnum) & ID & "_" & 1) Then FnGroupIsNotEmpty = 1
  '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  i = 1
  While (Not exists(FnGetPrefix(wsnum) & id & "_" & i)) And i <> 10
    i = i + 1
  Wend
  If i <> 10 Then FnGroupIsNotEmpty = 1
Else '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ID)
  passed = 0
  i = 0
  Do While exists(FnGetPrefix(wsnum) & id & "_" & inc(i)) Or _
           exists(FnGetPrefix(wsnum) & id & "_" & i + 1) '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
  Loop
  last_in_group = i - 1
  If last_in_group Then
    If groupsFirst Then
      Do While CBool(dec(i))
        If FnGroupIsNotEmpty(wsnum, id & "_" & i, True, False, 0) Then
          If inc(passed) > passGroupsN Then
            Call FnFarCell(wsnum, id & "_" & i, far_row, far_WS)
            Exit Do
          End If
        End If
      Loop
      If (Not CBool(far_row)) And (Not CBool(passed)) Then _
        Call FnFarCell(wsnum, id & "_" & last_in_group, far_row, far_WS)
    Else
      Call FnFarCell(wsnum, id & "_" & last_in_group, far_row, far_WS)
    End If
    FnGroupIsNotEmpty = far_row
  End If
End If
If logging Then LogString ("out FnGroupIsNotEmpty (<" & FnGroupIsNotEmpty & ">: " & _
                            wsnum & ", " & id & ", " & justCheck & ", " & groupsFirst & ", " & passGroupsN & ")")
Exit Function
errMsg: LM "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
    
Function FnGetMainGroup(lang, id As String, g_term, is_group, g_abbrev) '<?>
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "",
'g_term |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|),
'is_group |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (.Font.Bold),
'g_abbrev |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ""
If logging Then LogString ("in   FnGetMainGroup (" & _
                            lang & ", " & id & ", " & g_term & ", " & is_group & ", " & g_abbrev & ")")
If FnFarCell(lang, id, far_row, far_WS) Then
  If Sheets(far_WS).Cells(far_row, 2).Font.ColorIndex = inv(15) Then _
    FnGetMainGroup = Trim(Sheets(far_WS).Cells(far_row, 2)) _
    Else FnGetMainGroup = ""
  g_abbrev = FnGetAbbrev(Sheets(far_WS).Cells(far_row, 3), g_term)
  is_group = Sheets(far_WS).Cells(far_row, 2).Font.Bold
Else
  FnGetMainGroup = ""
  g_term = ""
  g_abbrev = ""
  is_group = False
End If
If logging Then LogString ("out FnGetMainGroup (<" & FnGetMainGroup & ">: " & _
                            lang & ", " & id & ", " & g_term & ", " & is_group & ", " & g_abbrev & ")")
End Function



Attribute VB_Name = "a_hyper"
'Option Explicit

Rem:===========
Rem: HyperLinks
Rem:====================================================

Sub Set_HyperLink_branch()
  If FnIsTrinity Then
'    If ActiveCell.Column = 4 Then
      Call View_Hyper(Null)
'    ElseIf ActiveCell.Column = 1 Then Call Set_HyperLink
'    End If
  End If
End Sub
'****************************************************

Sub Set_HyperLink()
If ActiveSheet.name = WS0 Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| General_sheet term - [Language]_sheet ID
  If ActiveCell.Column = 2 Then
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", SubAddress:= _
    "_1_" + Cells(ActiveCell.row, 1), TextToDisplay:=Selection.Text
    ActiveCell.Font.Underline = xlUnderlineStyleNone
  ElseIf ActiveCell.Column = 3 Then
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", SubAddress:= _
    "_2_" + Cells(ActiveCell.row, 1), TextToDisplay:=Selection.Text
    ActiveCell.Font.Underline = xlUnderlineStyleNone
  ElseIf ActiveCell.Column = 4 Then
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", SubAddress:= _
    "_3_" + Cells(ActiveCell.row, 1), TextToDisplay:=Selection.Text
    ActiveCell.Font.Underline = xlUnderlineStyleNone
  End If
'------------------------------------------------------
ElseIf FnIsTrinity Then
  If Cells(ActiveCell.row, catCol).Font.ColorIndex <> inv(3) Then
                                     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| [Language]_sheet ID - General_sheet ID
    ActiveSheet.Hyperlinks.Add Anchor:=Cells(ActiveCell.row, 1), Address:="", SubAddress:= _
      "_0_" + Cells(ActiveCell.row, 1), TextToDisplay:=Cells(ActiveCell.row, 1)
    Cells(ActiveCell.row, 1).Font.Underline = xlUnderlineStyleNone
  Else                               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Prefix = "_" & decode(FnWSNum%(ActiveSheet.name) + 1, 4, 1) & "_" '1->2->3->1
    ActiveSheet.Hyperlinks.Add Anchor:=Cells(ActiveCell.row, 1), Address:="", SubAddress:= _
      Prefix + Cells(ActiveCell.row, 1), TextToDisplay:=Cells(ActiveCell.row, 1)
    Cells(ActiveCell.row, 1).Font.Underline = xlUnderlineStyleNone
    Cells(ActiveCell.row, 1).Font.ColorIndex = inv(48) 'Gray(FontID)
  End If
'------------------------------------------------------
End If
End Sub
'****************************************************

Sub Del_HiperLink()
If FnWSNum(ActiveSheet.name) > 0 And FnWSNum(ActiveSheet.name) < 4 And _
   ActiveCell.Column = 4 And ActiveCell.Hyperlinks.Count Then
  do_loop = True
  loop_numb = 3
  ss = ActiveSheet.name
  Call GetAllRows(g_r, e_r, r_r, u_r, a_r, Cells(ActiveCell.row, 1), True)
Else
  do_loop = False
  loop_numb = 1
End If

For i = 1 To loop_numb
  If do_loop Then
    Sheets(FnWSCase(i)).Activate
    Select Case i
           Case 1: Cells(e_r, 4).Activate
           Case 2: Cells(r_r, 4).Activate
           Case 3: Cells(u_r, 4).Activate
    End Select
  End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If ActiveCell.Hyperlinks.Count Then
    fn = Selection.Font.name
    IC = Selection.Interior.ColorIndex
    bl = Selection.Borders(xlEdgeRight).LineStyle
    bw = Selection.Borders(xlEdgeRight).Weight
    bc = Selection.Borders(xlEdgeRight).ColorIndex

      Selection.Hyperlinks(1).Delete
 
    Selection.Font.name = fn
    Selection.Interior.ColorIndex = IC
    Selection.Borders(xlEdgeRight).LineStyle = bl
    Selection.Borders(xlEdgeRight).Weight = bw
    Selection.Borders(xlEdgeRight).ColorIndex = bc
  End If
  key_text = Left(ActiveCell.Text, 3)
  If do_loop And key_text = "See" Or key_text = "|fffd||fffd|." Or key_text = "|fffd||fffd||fffd|" Then _
    ActiveCell.value = ""
Next i
If do_loop Then Sheets(ss).Activate
End Sub
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (set_hyper=True) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetDefHyper(carrier_id As String, target_id As String, set_hyper)
Call unLockWBfor
If logging Then LogString ("in   SetDefHyper")
    Call GetAllRows(g_rt, e_rt, r_rt, u_rt, a_rt, target_id, True)
    If e_rt = 0 Then 'StatForm report?
      If FnFormIsLoaded("StatForm") Then If StatForm.Visible Then If StatForm.MultiPage1.value = 0 Then _
        report "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & carrier_id & " -> " & target_id: Exit Sub
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & carrier_id & " -> " & target_id: Exit Sub
    End If
    show_text1 = "See " + Trim(Sheets(WS1).Cells(e_rt, 3)) + "."
    show_text2 = "|fffd||fffd|. " + Trim(Sheets(WS2).Cells(r_rt, 3)) + "."
    show_text3 = "|fffd||fffd||fffd|. " + Trim(Sheets(WS3).Cells(u_rt, 3)) + "."
    
    Call GetAllRows(g_rc, e_rc, r_rc, u_rc, a_rc, carrier_id, True)
    Call unProtectTrinity
    For i = 1 To 3
      Select Case i
             Case 1: t_rc = e_rc
                     show_text = show_text1
             Case 2: t_rc = r_rc
                     show_text = show_text2
             Case 3: t_rc = u_rc
                     show_text = show_text3
      End Select
      If set_hyper Then
          If Sheets(FnWSCase(i)).Cells(t_rc, 4).Hyperlinks.Count Then
            If i = 1 Then
              Dim oldID As String
              oldID = Right(Sheets(WS1).Cells(t_rc, 4).Hyperlinks(1).SubAddress, _
                Len(Sheets(WS1).Cells(t_rc, 4).Hyperlinks(1).SubAddress) - Len(FnGetPrefix(1)))
              If oldID <> target_id Then _
                Call UpdateDefLinksBoundStringLocal(oldID, "", carrier_id)
            End If
            Sheets(FnWSCase(i)).Cells(t_rc, 4).Hyperlinks(1).Delete
          End If
          Sheets(FnWSCase(i)).Hyperlinks.Add _
            Anchor:=Sheets(FnWSCase(i)).Cells(t_rc, 4), _
            Address:="", SubAddress:=FnGetPrefix(i) + target_id, TextToDisplay:=show_text
          With Sheets(FnWSCase(i)).Cells(t_rc, 4)
            .Font.Underline = xlUnderlineStyleNone
            .Font.name = "Verdana"
            .Font.Size = 10
          End With
        Call UpdateRowFormatting(carrier_id)
      Else: Sheets(FnWSCase(i)).Cells(t_rc, 4).value = show_text
      End If
      
      Select Case i
             Case 1: t_rt = e_rt
             Case 2: t_rt = r_rt
             Case 3: t_rt = u_rt
      End Select
      Sheets(FnWSCase(i)).Cells(t_rt, 5).value = _
      FnZoneMerging(Sheets(FnWSCase(i)).Cells(t_rc, 5), _
                    Sheets(FnWSCase(i)).Cells(t_rt, 5)) '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    Next i: ProtectTrinity
    Call UpdateDefLinksBoundStringLocal(target_id, carrier_id, "")
If logging Then LogString ("out SetDefHyper")
Call LockWBif
End Sub
'****************************************************

Attribute VB_Name = "a_id"
'Option Explicit

Rem:===============
Rem: Gid operations
Rem:====================================================

Function FnGetFreeId() ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
i = 1: While exists("_0_" + CStr(i)): inc i: Wend: FnGetFreeId = i: End Function
'****************************************************

Function FnGetPrefix$(lang) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not IsNull(lang) Then FnGetPrefix = "_" + CStr(lang) + "_" _
                      Else FnGetPrefix = decode(ActiveSheet.name, WS0, "_0_", WS1, "_1_", WS2, "_2_", WS3, "_3_", WSL, "_5_")
End Function
'****************************************************

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function FnGenerateID$(lang, id): ls ">", "FnGenerateID": If id = "" Then id = "ID" 'temporary linking
Prefix = FnGetPrefix(lang)          'input value is grope ID (without prefix and subID)
CheckResult = exists(Prefix + id)   'returns - ID-based value original for input grope (ID + subID)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c last_used_ID
If id = "ID" Then subID = last_used_ID Else subID = 0
While CheckResult: CheckResult = exists(Prefix + id + "_" + CStr(inc(subID))): Wend
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
IIf2 last_used_ID, id = "ID", subID: FnGenerateID = id + IIf(subID <> 0, "_" + CStr(subID), "")
                                 ls "<", "FnGenerateID": End Function
'****************************************************
Rem: Roots

Function FnGetRootID(subID$, Optional RootID$) As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RootID |fffd||fffd||fffd| "" |fffd||fffd| subID (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RootID$ |fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
On Error Resume Next: FnGetRootID = Left(subID, posLast("_", subID) - 1): End Function

Function FnGetMainRootID(subID$) As String       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MainRootID |fffd||fffd||fffd| "" |fffd||fffd| subID
On Error Resume Next: FnGetMainRootID = Left(subID, InStr(1, subID, "_") - 1): End Function

Function FnGetSIDnumber%(subID$): cnt% = prsCount("_", subID): If cnt = 0 Then Exit Function
         FnGetSIDnumber% = CInt(prsAfter|fffd|(cnt%, "_", subID$)): End Function

'****************************************************

Rem:===============
Rem: Get From ID - Methods
Rem:====================================================
Sub testsh(): MsgBox FnGetShadowFrom(1, "1_115") & Chr(10) & FnGetRootShadow(1, "1_115"): End Sub

Function FnGetTermFromID(lang, id$): On Error Resume Next: FnGetTermFromID = Sheets(Index(lang)).Cells(FnFarRow&(lang, id), termcol): End Function
Function FnGetShadowFrom(lang, id$): FnGetShadowFrom = Sheets(Index(lang)).Cells(FnFarRow&(lang, id), shadcol): End Function
Function FnGetRootShadow(lang, id$): root_ID$ = FnGetRootID(id$): If root_ID = "" Then Exit Function Else On Error GoTo errL
         FnGetRootShadow = Sheets(Index(lang)).Cells(FnFarRow&(lang, root_ID$), shadcol): Exit Function
errL:    FnGetRootShadow = "root_ID$ " & root_ID$ & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" '4 TESTS
         End Function
'****************************************************

Function FnGetRowFromID&(id$, ws_eru): If id$ = "" Then Exit Function '"57", 1 - eru
If FnFarCell(ws_eru, id, FR, fws) Then FnGetRowFromID = FR Else db_ "msg FnGetRowFromID&(""" & id$ & """, " & ws_eru & ")"
                                                        End Function

Function FnGetTxtFromID$(id$, ws_eru, col%): If id$ = "" Then Exit Function 'eru
If FnFarCell(ws_eru, id, FR, fws) Then FnGetTxtFromID = Sheets(fws).Cells(FR, col%)
                                                              End Function

Function FnSetTxtWithID(id$, ws_eru, col%, txt) As Boolean: If id$ = "" Then Exit Function 'eru
If FnFarCell(ws_eru, id, FR, fws) Then Sheets(fws).Cells(FR, col%) = txt: FnSetTxtWithID = True
                                                                             End Function
Function GetIDwithTerm$(s$): On Error Resume Next
    For i% = 1 To 3: With Sheets(Index%(i)):
        GetIDwithTerm$ = .Cells(FindCell(.Range("C:C"), s$, xlWhole).row, idcol): If GetIDwithTerm$ <> "" Then Exit Function 'Found!
    End With: Next i%: On Error GoTo 0
        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| .Range, |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '1004' - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For i% = 1 To 3: j% = 0: With Sheets(Index%(i)): Do: If .rows(inc(j%)).Hidden Then If .Cells(j%, termcol) = s$ Then GetIDwithTerm$ = .Cells(j%, idcol): Exit Function
                                                        Loop Until .Cells(j%, idcol) = "": End With: Next i%: End Function

'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Function GetAllRows(ge_row, en_row, ru_row, ua_row, ab_row, id As String, d0report) As Boolean
    ge_row = IIf(FnFarCell(0, id, far_row, far_WS), far_row, 0)
    en_row = IIf(FnFarCell(1, id, far_row, far_WS), far_row, 0)
    ru_row = IIf(FnFarCell(2, id, far_row, far_WS), far_row, 0)
    ua_row = IIf(FnFarCell(3, id, far_row, far_WS), far_row, 0)
    ab_row = IIf(FnFarCell(4, id, far_row, far_WS), far_row, 0)
If en_row * ru_row * ua_row <> 0 Then
                                      GetAllRows = True
ElseIf d0report Then 'StatForm report?
  If FnFormIsLoaded("StatForm") Then If StatForm.Visible Then If StatForm.MultiPage1.value = 0 Then _
   report ("|fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| " + id + " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"): Exit Function
   MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| " + id + " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
End If: End Function

'-----------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------
Function FnFarCell(lang, id As String, Optional far_row, Optional far_WS) As Boolean
'If logging Then LogString ("in   FnFarCell (" & lang & "," & id & "," & far_row & "," & far_WS & ")")
                                 FnFarCell = CBool(FnFarRow&(lang, id, far_row, far_WS)):
ls "", "FnFarCell", FnFarCell, lang, id, far_row, far_WS: End Function

Function FnFarRow&(lang, id As String, Optional far_row, Optional far_WS, Optional frsRowScan = False)
'out: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd| (lang = eru)
If id <> "" Then
    If (lang < 4 Or lang = 5) And Not frsRowScan Then 'eru or Log (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      If exists(FnGetPrefix(lang) + id) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| BM
        CR = Workbooks("MAIN.XLSB").Names(FnGetPrefix(lang) + id).value
        pos = InStr(1, CR, "!$")
        far_WS = Mid(CR, 2, pos - 2)
        far_row = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
        'FnFarCell = True
      Else: far_row = 0: End If 'FnFarCell = False: End If
    Else: On Error GoTo errL: far_row = FindCell(Sheets(Index(lang)).Range("A:A"), id, xlWhole).row: End If '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Else:   far_row = 0: End If
FnFarRow& = far_row: Exit Function 'CBool(0) = False, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True
errL:   far_row = 0: End Function

Sub testFindC()
'MsgBox FindCell(Sheets(5).Range("A:A"), "100_1", xlWhole)
MsgBox FnFarRow&(5, "100_1")
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|)!
'|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| FindCell, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Logging |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Cells(1,1) |fffd||fffd||fffd||fffd| NotFound
Function FnFindCell(target_range, target_value, look_at, Optional m_case As Boolean): ls ">", "FnFindCell", , target_value, look_at, m_case
     Set FnFindCell = FindCell(target_range, target_value, look_at, m_case)
      If FnFindCell Is Nothing Then Set FnFindCell = Cells(1, 1)
ls "<", "FnFindCell", FnFindCell.row, target_value, look_at, m_case: End Function

'-----------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------
Sub LogIDInsert(id$): If exists("_5_" & id$) Then MsgBox "ID " & id$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Log_": Exit Sub
With Sheets(WSL): r& = .UsedRange.rows.Count + 1: .Cells(r&, 1) = id$: .Cells(r&, 2) = Now: .Cells(r&, 4) = "new"
                                Set_BookMark_on wsLog, r&, "_5_" & id$: End With: End Sub
Sub LogIDChange(old_id$, new_id$): If Not exists("_5_" & old_id$) Then MsgBox "|fffd||fffd||fffd| ID " & old_id$ & " |fffd||fffd| Log_": Exit Sub
With Sheets(WSL): r& = FnFarRow&(5, old_id$): .Cells(r&, 1) = new_id$: .Cells(r&, 3) = Now: .Cells(r&, 4) = "serv" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| update
                     Del_BookMark old_id$, wsLog: Set_BookMark_on wsLog, r&, "_5_" & new_id$: End With: End Sub
Sub LogCRTdate(id$): FnSetTxtWithID id$, 5, 2, Now: End Sub
Sub LogLUPdate(id$): FnSetTxtWithID id$, 5, 3, Now: End Sub
Sub LogChangeState(id$, val):  FnSetTxtWithID id$, 5, 4, val    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| HLML (val <> "" - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd|""|fffd||fffd|)
If val <> "" Then FnSetTxtWithID FnGetRootID(id$), 5, 4, "sub"  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: serv(id, shadow, cat) item(term, def, abc),
                                                    End Sub     '                 pdb (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| +-), sub (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Sub LogIDDelete(id$): If Not exists("_5_" & id$) Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID " & id$ & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Log_"
    r& = FnFarRow&(5, id$): Del_BookMark id$, wsLog: Sheets(WSL).rows(r&).Delete: FnSetTxtWithID FnGetRootID(id$), 5, 4, "sub": End Sub

Attribute VB_Name = "a_ws"
'Option Explicit

Rem:===========
Rem: WorkSheets
Rem:====================================================
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ERU
Function FnIsTrinity(Optional WSname$) As Boolean: If WSname$ = "" Then WSname$ = ActiveSheet.name
         FnIsTrinity = WSname = WS1 Or WSname = WS2 Or WSname = WS3: End Function
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ERU |fffd| index
Public Function Index%(Optional eru) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| wsEn=2 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 1) |fffd| FnWSNum(WS1)=1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 0)
                                     '|fffd||fffd||fffd| |fffd||fffd||fffd|. WS0 - WSI |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Sheets(index), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ERU |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1:3)
If IsMissing(eru) Then Index = ActiveSheet.Index: Exit Function '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - ActiveSheet.index
                       Index% = eru + 1: End Function
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| index |fffd| ERU
Public Function eru%(Optional ByVal Index): If IsMissing(Index) Then Index = ActiveSheet.Index 'WS indexes validation
                                            If Not hasIt("|" & Index & "|", FnGetAllWSindexes$) Then MsgBox "Unknown WS"
                                            eru = Index - 1: End Function
Public Function actERU%(): actERU% = eru(ActiveSheet.Index): End Function
'1->"En"->1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| En|Ru|Ua |fffd| 1,2,3 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Function FnERUs$(i): FnERUs = IIf(i = 1, "En", IIf(i = 2, "Ru", IIf(i = 3, "Ua", ""))): End Function
Public Function FnERUn%(s): FnERUn = IIf(s = "En", 1, IIf(s = "Ru", 2, IIf(s = "Ua", 3, 0))): End Function
'****************************************************
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ERU (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Function FnWSCase$(numb): FnWSCase = decode(numb, -1, WSD, 0, WS0, 1, WS1, 2, WS2, 3, WS3, 4, WSA, 5, WSL, 6, WSI): End Function
'ERU |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Function FnWSNum%(name): FnWSNum_var = decode(name, WSD, -1, WS0, 0, WS1, 1, WS2, 2, WS3, 3, WSA, 4, WSL, 5, WSI, 6):
                         If Not IsNumeric(FnWSNum_var) Then FnWSNum% = eru(Sheets(name).Index) Else FnWSNum% = FnWSNum_var
                         End Function
'****************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| eru
Function FnGetLastRow&(eru): FnGetLastRow = Sheets(Index(eru)).UsedRange.rows.Count: End Function
Function FnGetFreeRow&(ws): While Sheets(ws).Cells(inc(r&), 2) <> "": Wend: FnGetFreeRow = r&: End Function 'Name or index
'****************************************************
'****************************************************
'****************************************************
Sub WSim(): asu = True: ParamIni: If WS0 = "" Then WS_ini Else Exit Sub 'WS_ini_manual
On Error Resume Next: Application.CommandBars("EditForm").Delete: End Sub
Sub WS_ini(): On Error GoTo exitL
Set MainWB = Workbooks("MAIN.XLSB")
With Workbooks("MAIN.XLSB"):
    WS0 = .Sheets(wsGen).name    '"General"|"Links"
    WS1 = .Sheets(wsEn).name     '"English"|"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    WS2 = .Sheets(wsRu).name     '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"|"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    WS3 = .Sheets(wsUa).name     '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"|"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    WSA = .Sheets(wsABC).name    '"Abbreviations"
    WSI = .Sheets(wsImp).name    '"import"
    WSD = "Dispetcher_"
    WSL = "Log_"
End With: flg_InWork = False: Exit Sub
exitL:      MsgBox "Private": End    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
'****************************************************
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (>1024 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Excel (Office XP)
Function FnGetText(source_cell): FnGetText = source_cell.Text: Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 10-|fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|? |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 2000
                                'If source_cell.row = 447 Then ls ">", "FnGetText", source_cell.row
temp_buf = source_cell.Text: If source_cell.Column <> defcol Then GoTo exitL
If Not IsNumeric(temp_buf) Then
  char_num = source_cell.Characters.Count
  If char_num > 1024 Then
    For i = 1025 To char_num Step 256
      If i + 255 <= char_num Then pack_len = 256 Else pack_len = char_num - i + 1
      temp_buf = temp_buf + source_cell.Characters(i, pack_len)
    Next i
  End If
End If
exitL: FnGetText = temp_buf:  'If source_cell.row = 447 Then ls "<", "FnGetText" ', FnGetText
End Function

'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd| WS
'****************************************************
'http://www.excel-vba.ru/chto-umeet-excel/kak-zashhitit-list-ot-polzovatelya-no-ne-ot-makrosa/
'http://www.msoffice-nm.ru/faq/macros/worksheets.htm#faq79
Sub Protect_for_User_Non_for_VBA(): For Each ws In Workbooks("MAIN.XLSB").Sheets
    'If Mid(ws.name, Len(ws.name)) <> "_" Then
       If ws.ProtectContents Then ws.Unprotect
          ws.Protect UserInterfaceOnly:=True, DrawingObjects:=False '+|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
                     'AllowFormattingCells:=True, AllowInsertingHyperlinks:=True
    'Sheets(2).Protect UserInterfaceOnly:=True ', Password:="1111"
    '|fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|1" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'Sheets("|fffd||fffd||fffd||fffd|1").Protect Password:="1111", AllowFiltering:=True, UserInterfaceOnly:=True
Next ws: End Sub
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ProtectTrinity(): For i = wsGen To wsABC: Sheets(i).Protect UserInterfaceOnly:=True, DrawingObjects:=False: Next: End Sub
Sub unProtectTrinity(): For i = wsGen To wsABC: Sheets(i).Unprotect: Next: End Sub
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Sub unLockWsManual(): ActiveSheet.Unprotect: DelALLComments: UpdateCellMenu: End Sub
Sub LockWsManual(): ActiveSheet.Protect UserInterfaceOnly:=True, DrawingObjects:=False: UpdateCellMenu: End Sub
'----------------------------------------------------
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'----------------------------------------------------
'Sub LockTest(): MsgBox flg_InWork: End Sub
Sub LockWBif(): Exit Sub: ls "", "LockWBif": If Not flg_InWork Then Call LockWB
End Sub
Sub unLockWBfor(): Exit Sub: ls "~", "unLockWBfor": Call unlockWB: flg_InWork = True: End Sub
Sub LockWB(): Exit Sub: ls "", "LockWB": If Not prmAutoLock Then Exit Sub 'Else ls "~", "LockWB" '#TEST#
                               If Workbooks("MAIN.XLSB").Sheets(1).Protection.AllowDeletingRows = True Then Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Call NoSup: For Each ws In Workbooks("MAIN.XLSB").Sheets: If Mid(ws.name, Len(ws.name)) <> "_" Then Call LockWs(ws.Index)
            Next ws: flg_InWork = False: End Sub
Sub unlockWB(): Exit Sub: If flg_InWork Then Exit Sub 'Else ls "~", "unLockWB"
Call NoSup: For Each ws In Workbooks("MAIN.XLSB").Sheets: If Mid(ws.name, Len(ws.name)) <> "_" Then ws.Unprotect ':
            Next ws: End Sub
            
Sub LockWs(Optional indx%): Exit Sub: ls "", "lockws": NoSup: Sheets(zero(indx, ActiveSheet.Index)).Protect UserInterfaceOnly:=True: SUp: End Sub ', DrawingObjects:=True, Contents:=True, Scenarios:=True:
Sub unLockWs(Optional indx%): Exit Sub: ls "", "unLockWs": NoSup: Sheets(zero(indx, ActiveSheet.Index)).Unprotect: SUp: End Sub


'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************
Function fnWSisGrouped(Optional ByVal wsnum) As Boolean: If IsMissing(wsnum) Then wsnum = eru(ActiveSheet.Index)
                                                         If Not between(wsnum, 0, 4) Then Exit Function
'1 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| null |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Sheets(FnWSCase(wsnum)).rows.OutlineLevel = 1 Then fnWSisGrouped = False Else fnWSisGrouped = True
'fnWSisGrouped = CBool(Sheets(FnWSCase(wsnum)).Rows.OutlineLevel = 1) - |fffd||fffd||fffd||fffd||fffd||fffd| Null
End Function

Sub setOutlineShowLevel(lvl): If Not between(FnWSNum(ActiveSheet.name), 0, 4) Then Exit Sub '! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !
If Not settingsForm.CBnavigator Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If logging Then LogString ("in   setOutlineShowLevel(" & CStr(lvl) & ")")

If settingsForm.obManual And Not fnWSisGrouped(FnWSNum(ActiveSheet.name)) Then Call GroupRows(FnWSNum(ActiveSheet.name))
  For i = 1 To 3: unLockWs Index(i)
     Sheets(FnWSCase(i)).Outline.ShowLevels RowLevels:=lvl
  Next i
  LockWBif
  
If logging Then LogString ("out setOutlineShowLevel(" & CStr(lvl) & ")")
End Sub

Rem TESTS
Sub tst_setOutlineShowLevel1(): WSim: setOutlineShowLevel 1: End Sub '!|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1,2 (|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
Sub tst_setOutlineShowLevel2(): WSim: setOutlineShowLevel 2: End Sub '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + sub 1-|fffd||fffd|
Sub tst_setOutlineShowLevel3(): WSim: setOutlineShowLevel 3: End Sub '|fffd||fffd||fffd|

Sub tst_GroupRows_ru(): GroupRows 2: End Sub
Sub tst_GroupSubRows_ru(): GroupSubRows 2: End Sub
Sub tst_UnGroupRows_ru(): Call UnGroupRows(2): End Sub


Sub GroupRows(wsnum): If Not between(wsnum, 0, 4) Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ls ">", "GroupRows", wsnum 'If logging Then LogString ("in   GroupRows(" & CStr(wsnum) & ")")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not settingsForm.CBnavigator Or fnWSisGrouped(wsnum) Then Exit Sub
Call unLockWBfor
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WS |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sheets(FnWSCase(wsnum)).Activate
With Sheets(FnWSCase(wsnum)): urc = .UsedRange.rows.Count
    Call GroupSubRows(wsnum)
    .Outline.ShowLevels RowLevels:=2
    need = False
    For i = 3 To urc
        If .Cells(i, 2).Interior.ColorIndex = inv(37) Then newGroup = .Cells(i, 2)
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| newGroup & ".")
        If .Cells(i, 2) = newGroup & "." Then
          need = False
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '.Cells(i, 2).Font.ColorIndex = inv(xlAutomatic) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ElseIf .rows(i).Hidden Or .Cells(i, 2).Font.Bold = True _
                Or i = urc Then
          If need Then .Range("C" & CStr(i - 1) & ":" & "C" & CStr(sr)).rows.Group
          need = False
        ElseIf Not need Then
          sr = i: need = True
        End If
    Next i
    .Outline.ShowLevels RowLevels:=1
End With
Call LockWBif
ls "<", "GroupRows", wsnum 'If logging Then LogString ("out GroupRows(" & CStr(wsnum) & ")")
End Sub


Sub GroupSubRows(wsnum): If Not between(wsnum, 0, 4) Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
need = False: unlockWB
'wasblue = False
With Sheets(FnWSCase(wsnum)): urc = .UsedRange.rows.Count
    For i = 3 To urc
      'If Not Rows(i).Hidden Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      '.Cells(i, 2).Font.ColorIndex = xlAutomatic And _
      .Cells(i, 3).Interior.ColorIndex = inv(34) And _
      .Cells(i, 3).Font.Bold = True
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|                                'Cells(i, 2).Font.ColorIndex = inv(xlAutomatic)
        If .rows(i).Hidden Or _
           Cells(i, 2).Font.ColorIndex <> inv(15) Or (decode(.Cells(i, 3).Interior.ColorIndex, 20, 34) = inv(34) And _
                                                             .Cells(i, 3).Font.Bold = True) _
                                                  Or i = urc Then
          If need Then .Range("C" & CStr(i - 1) & ":" & "C" & CStr(sr)).rows.Group
          need = False
          'wasblue = (.Cells(i, 2).Font.ColorIndex = inv(xlAutomatic))
        ElseIf Not need Then  'need = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'Or wasblue) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sr = i: need = True
        End If
      'End If
    Next i
    '.Outline.ShowLevels RowLevels:=1
End With: LockWBif
End Sub


Sub UnGroupRows(wsnum): If Not between(wsnum, 1, 4) Then Exit Sub
If logging Then LogString ("in   UnGroupRows(" & CStr(wsnum) & ")")
If Not fnWSisGrouped(wsnum) Then GoTo BCErrorHandler
On Error GoTo BCErrorHandler
    Sheets(FnWSCase(wsnum)).Outline.ShowLevels RowLevels:=3
    Sheets(FnWSCase(wsnum)).UsedRange.rows.Ungroup
    Sheets(FnWSCase(wsnum)).UsedRange.rows.Ungroup
BCErrorHandler: If logging Then LogString ("out UnGroupRows(" & CStr(wsnum) & ")")
'  Resume Next
End Sub


Attribute VB_Name = "a_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Option Explicit 'force explicit declaration of all variables in that module.

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public T1 As New CTerm  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public MainWB As Workbook
'Public T2 As New CFTerm '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Set = Nothing |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public DDM As DDMetrics             'dual display mode
Public ScTp%, ScBm%, ScLt%, ScRt%   'main screen works-around: ScreenHeight%, ScreenWidth%...
Public asu As Boolean               'Application.ScreenUpdating |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public last_search$                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public lastSizeMem%                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SCSForm.Left |fffd||fffd| btnWideSize

Public WS0, WS1, WS2, WS3, WSA, WSI, WSD, WSL As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public ghwnd&, last_used_ID As Integer '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (last_used_ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public flg_Ready, flg_InWork, commonSave As Boolean, logging, logmsg, stoplog As Boolean 'commonSave = NOT saveJustMain, Log_
Public AC_flg As Boolean, n2s As Boolean, fs_flg 'all close - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|... nothing2save, fastSaving (EditForm Ctrl+S)
Public currentCat As String '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CATForm
Public twoW_hwnd& '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c|fffd||fffd||fffd||fffd||fffd||fffd||fffd| twoWindows (~ |fffd||fffd| |fffd||fffd||fffd|. )
Public DDBarUsed, AH_flg As Boolean, stopAH As Boolean 'stopAutoHide
Public SDGoldenTheme As Boolean 'GUI parameters, DDsplitByType As Boolean
Public compRollUp As Boolean, fvHwnd& 'GetFolderViewHwnd - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Jot_path$, useJot_prm As Boolean, cmd_path$, useCmd_prm As Boolean '|fffd||fffd||fffd||fffd||fffd|
Public useFRAMES As Boolean, useMETA As Boolean, useMultiTree As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public useDnD As Boolean, c_useDnD As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Drag&Drop |fffd||fffd||fffd| FindForm (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Rem: Dispetcher (NEW)
'eff_freezing    enable   freezing
'eff_hoocking    (list)   hoocking
'eff_them_both            both of them
'eff_no_at_all            no effects
'
'manual_act_eff  (cbox)   manual starting <F>/<T>
'
'for XP                   'no effects + no manual_act_eff = 0 (disabled)
'ar_delay       (ddlist)  auto-restore delay: 1|3|5|10|15|20|30 s|m
'


Rem: Constants
Public Const smart_freezing_by_mouse = True '+ |fffd||fffd||fffd||fffd||fffd| "smart_freezing |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const pi = 3.14159265358979:
Public Const osXP = False   'use GetOSInfo and variable instead
Public os10 As Boolean
Public Const c_quietMode = True
Public c_useTimer As Boolean     'False - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| OnTime) |fffd||fffd||fffd||fffd||fffd| SetTimer (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|+)
                                 'True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| remind (+ |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|.RClick)
Public Const c_useOnTime = False 'TRUE (by def). False - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Public Const c_useDnD = False   'False - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)
                                 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| settingsForm + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'columns
Public Const idcol = 1
Public Const shadcol = 2
Public Const termcol = 3
Public Const defcol = 4
Public Const catCol = 5
'WS indexes
Public Const wsGen = 1  '0 - eru
Public Const wsEn = 2   '1 - eru
Public Const wsRu = 3   '2 - eru
Public Const wsUa = 4   '3 - eru
Public Const wsABC = 5  '4 - eru
Public Const wsLog = 6  'MsgBox Sheets("log_").index
Public Const wsImp = 9

Function FnGetAllWSindexes$() 'WS indexes Range
         FnGetAllWSindexes$ = "|" & wsGen & "|" & wsEn & "|" & wsRu & "|" & wsUa & "|" & wsABC & "|" & "|" & wsLog & "|" & "|" & wsImp & "|"
End Function
Function x75(): x75 = IIf(os10, 0.5, 0.75): End Function

Sub iwOn(): unlockWB: flg_InWork = True: End Sub
Sub iwOff(): flg_InWork = False: End Sub
Function isReady() As Boolean: isReady = flg_Ready And Not flg_InWork: End Function 'flg_Ready - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Attribute VB_Name = "c_services"
'Option Explicit

Rem:=======
Rem: Services (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Rem:====================================================
Rem: ID

Sub srvPressID(): WSim: Dim cs As New CServ: cs.Initialize "95_3": cs.pressID: Set cs = Nothing:
End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Rem:====================================================
Rem: |fffd||fffd||fffd||fffd| (root_shadow)
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub srvCheckShadowsVSid(): WSim: lang = 3: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = True '"FALSE/TRUE" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Shadow - ID |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  'MsgBox GeztValidShadow(1, "1_115") & Chr(10) & FnGetShadowFrom(1, "1_115")
  For r& = 2 To Sheets(wsEn).UsedRange.rows.Count: id$ = Sheets(wsEn).Cells(r&, idcol)
    If GetValidShadow(lang, id$) <> FnGetShadowFrom(lang, id$) Then If |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Then srvApplayShadows4 id$ _
               Else Application.Goto Reference:="_" & lang & "_" & id$, Scroll:=True: allRootsActivation: srvShowShadowVSidActive: Exit Sub
                                                                                                                Next r&: End Sub
'<<ACTIVE>> - TEST
Sub srvShowShadowVSidActive(): WSim: If Not FnIsTrinity(ActiveSheet.name) Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
lang = eru(ActiveSheet.Index): V = "valid: " & GetValidShadow(lang, Cells(ActiveCell.row, idcol))
                               f = "now: " & FnGetShadowFrom(lang, Cells(ActiveCell.row, idcol))
                        MsgBox V & Chr(10) & IIf(Replace(V, "valid: ", "") = Replace(f, "now: ", ""), "MATCH!", f): End Sub
                                      
Rem: <<ACTIVE>> |fffd||fffd||fffd||fffd||fffd||fffd||fffd| *Set v = f*********************************
Sub srvApplayShadows4ActiveLoudly(): srvApplayShadows4Active False: srv|fffd||fffd||fffd||fffd||fffd||fffd|InTermActive: End Sub
'==========================================================================
            Sub srvApplayShadows4ActiveQuietly(): srvApplayShadows4Active True: End Sub
            Sub srvApplayShadows4Active(Optional quietly As Boolean): WSim
                                                If Not FnIsTrinity(ActiveSheet.name) Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
                                     id$ = Cells(ActiveCell.row, idcol): unlockWB: srvApplayShadows4 id$: LockWB:
                                     If Not quietly Then srvShowShadowVSidActive
                                     End Sub

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ***************************************
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| FnClearFromSpec$
Sub srvUpdateShadows(): WSim: Exit Sub: NoSup: For ws% = wsEn To wsUa: unLockWs ws: For r& = 2 To FnGetLastRow(eru(ws))
    Sheets(ws).Cells(r&, shadcol).value = FnClearFromSpec$(Sheets(ws).Cells(r&, shadcol)): Next: Next: SUp: LockWB: End Sub
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| ID
Function GetValidShadow(lang, id$)
      If Not hasIt("_", id$) Then r_flg = "G" Else If exists("_1_" & id$ & "_" & 1, True) Then r_flg = "R" _
                                                                                          Else r_flg = "S" 'General_Root_SubTerm
                               If r_flg = "G" Then GetValidShadow = FnGetTermFromID(lang, id$) _
                                              Else GetValidShadow = FnGetRootShadow(lang, id$) _
                                                      & IIf(r_flg = "R", "_" & FnGetTermFromID(lang, id$), ".") 'S.
                                                   GetValidShadow = FnClearFromSpec(GetValidShadow): End Function
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| ID |fffd||fffd| Valid
Sub srvApplayShadows4(id$): For lang = eru(wsEn) To eru(wsUa): With Sheets(Index(lang)): .Columns(shadcol).Hidden = False:
                            .Cells(FnGetRowFromID(id$, lang), shadcol).value = GetValidShadow(lang, id$): End With: Next lang: End Sub

Rem:====================================================
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'|fffd||fffd|. Category_manage

Rem:====================================================

Sub srv|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat() '1:1_5:;:1_7:;:1_5:1_5_1:;:1_5:1_5_1:1_7: = :1_5:1_7:1_5_1:
For ws% = wsGen To wsABC: MsgBox Sheets(ws%).name
With Sheets(ws%): unLockWs ws%: cat_Col% = IIf(ws% = wsABC, 8, 5)
  For i% = 2 To .UsedRange.rows.Count
    cat$ = .Cells(i, cat_Col%): If cat$ <> "" Then cat$ = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat$(cat$): .Cells(i, cat_Col%) = cat$
Next i%: End With: LockWs ws%: Next ws%: End Sub

Rem:====================================================
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'|fffd||fffd|. Bookmark_manage

Rem:====================================================

Sub srv|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|() 'En=Ru=Ua
For Each nm In Workbooks("MAIN.XLSB").Names
          If Mid(nm.name, 4) = "ID" Then GoTo passL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
'          If InStr(1, nm.RefersTo, "#") <> 0 Then _
'            Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", -1, nm.name, nm.RefersTo): nm.Delete: dec nCount
             Select Case Left(nm.name, 3):
             Case "_0_":
             Case "_1_": If Not exists("_2_" & Mid(nm.name, 4)) Then Msg "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _2_" & Mid(nm.name, 4) & " [|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| _1_]": Exit Sub
                         If Not exists("_3_" & Mid(nm.name, 4)) Then Msg "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _3_" & Mid(nm.name, 4) & " [|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| _1_]": Exit Sub
             Case "_2_": If Not exists("_1_" & Mid(nm.name, 4)) Then Msg "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _1_" & Mid(nm.name, 4) & " [|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| _2_]": Exit Sub
                         If Not exists("_3_" & Mid(nm.name, 4)) Then Msg "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _3_" & Mid(nm.name, 4) & " [|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| _2_]": Exit Sub
             Case "_3_": If Not exists("_1_" & Mid(nm.name, 4)) Then Msg "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _1_" & Mid(nm.name, 4) & " [|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| _3_]": Exit Sub
                         If Not exists("_2_" & Mid(nm.name, 4)) Then Msg "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _2_" & Mid(nm.name, 4) & " [|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| _3_]": Exit Sub
             Case "_5_":
             Case Else:
                        'If prsCount("_", nm.name) > 1 Then s_other$ = s_other$ & " | " & nm.name
             End Select
passL: Next: Msg "All is Fine!": End Sub

Rem:====================================================
Rem: Log (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Rem:====================================================

Sub refillLog(): Dim i&: With Sheets("log_"): 'MsgBox .index: Exit Sub
'For Each bm In Workbooks("MAIN.XLSB").Names: If Left(bm.name, 3) = "_6_" Then bm.Delete
'    Next bm: 'Exit Sub
For i = 2 To Sheets(wsEn).UsedRange.rows.Count: 'MsgBox CDate("01/01/2000") + (i - 1) * 0.00002
    '.Cells(i, 1) = Sheets(wsEn).Cells(i, 1): .Cells(i, 2) = CDate("01/01/2000") + (i - 1) * 0.00002 '2000 + |fffd||fffd||fffd|. [UNIQUE]
     Set_BookMark_on wsLog, i, "_" & eru(wsLog) & "_" & .Cells(i, 1) ' _5_id
Next i: End With: End Sub
Attribute VB_Name = "c_subroutines"
'Option Explicit

Rem:==========
Rem: Category Subroutines & Flags
Rem:====================================================

'**********
'* |fffd||fffd||fffd||fffd||fffd| *
'**********

Function FnIsCoding(ByVal cat As String) As Boolean: FnIsCoding = False: cat = Replace(cat, "_", ":")
         FnIsCoding = CBool(InStr(1, cat, "Coding:")) Or CBool(InStr(1, cat, "OE:")): End Function
'old'pos = InStr(1, cat, "_"): If pos <> 0 Then If Left$(cat, pos - 1) = "Coding" Then FnIsCoding = True


'****************************************************
'* SubROUTINES *
'****************************************************

Sub FnCatOptimizer() 'inwork (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| root_zone
'(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (gen):
'(old) Coding_SQL;Coding_HTML;Coding_Delphy;Coding_Pascal;Coding_Java;Coding_JavaScript;
'(new) Coding
End Sub

Function getCat$(id$): r = FnGetRowFromID(id, 1): getCat = Sheets(wsEn).Cells(r, catCol): End Function
'l_lvl: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cat |fffd||fffd| id
Sub setCat(id As String, new_cat, Optional reCat2F As Boolean): unlockWB: For i = wsGen To wsABC
             r = FnGetRowFromID(id, eru(i)): If r <> 0 Then Sheets(i).Cells(r, catCol).value = new_cat
                                             Next i: If Not reCat2F Then Exit Sub 'service Class
              Dim cs As New CServ: cs.Initialize id: cs.ReCat2: LockWBif: End Sub

'****************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Sub tst_FnZoneMerging(): WSim: MsgBox FnZoneMerging(":1_2:3:", ":1:3:1_4:"): End Sub
Function FnZoneMerging$(source_zone$, Optional target_zone$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ":1_3:3:"
         FnZoneMerging$ = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat$(source_zone$ & target_zone$) 'NEW
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| [reCat2] reID2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'               SwitchKey - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| reID2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| View_Term
'               ReSetCats_tool - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| cats
'               SetDefHyper - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'               [commented] GroupAnalysis - (|fffd||fffd||fffd| InitForUse) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - !|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If Replace(source_zone & target_zone, ":", "") = "" Then Exit Function
'For i% = 1 To prscount(":", target_zone) - 1
'  t_cat = prsBetween|fffd|(i, ":", ":", target_zone)
'   If Not hasIt(":" & t_cat & ":", source_zone) Then FnZoneMerging = FnZoneMerging & t_cat & ":"
'Next: FnZoneMerging = noRootVSsub$(sortSetABC$(":", Replace(IIf(source_zone = "", ":", source_zone) & FnZoneMerging, "::", ":"))):
End Function

'****************************************************
Sub testcat()
MsgBox FnGetCurrentCat
End Sub

Function FnGetCurrentCat(): If WS0 = "" Then WS_ini ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'On Error GoTo errL '170123_1039 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| watch4$ "out of range"
  If Sheets(WS0).AutoFilter.Filters.Item(4).On Then _
    FnGetCurrentCat = Right$(Sheets(WS0).AutoFilter.Filters.Item(4).Criteria1, _
                      Len(Sheets(WS0).AutoFilter.Filters.Item(4).Criteria1) - 1) _
  Else FnGetCurrentCat = "*"
'errL: MsgBox "error":  Exit Function
End Function
'****************************************************
Sub testFnGetCatStr(): MsgBox FnGetCatStr("1.1"): End Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. "1.1") |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function FnGetCatStr(cat_id)
      FnGetCatStr = ""
      pos = InStr(1, cat_id, ".")
      If pos > 1 Then
        i = CStr(Left$(cat_id, pos - 1))
        j = CStr(Right$(cat_id, Len(cat_id) - pos))
        If Not IsNull(FnCBCase(i, j, 0)) Then FnGetCatStr = _
          FnCBCase(i, 0, 0).Caption + "_" + FnCBCase(i, j, 0).Caption + ";"
      End If
End Function

'=====================================================================
Sub test_getCatLong_noDouble(): Dim str$, outstr$: str_$ = "3:1_7:1:2"
str$ = getCatLong(outstr$, noRootVSsub$(sortSetABC$(":", noDouble$(":", Replace(str_$, ":;:", ":")))))
MsgBox noRootVSsub$(sortSetABC$(":", noDouble$(":", Replace(str_$, ":;:", ":")))) & Chr(10) & str$ & "<"
'MsgBox sortSetABC$(":", noDouble$(":", Replace(str_$, ":;:", ":"))) & "<"
'MsgBox noDouble$(":", Replace(str_$, ":;:", ":")) & "<"
End Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cat-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ":1_5:Coding_Java:1_5_1:Coding_JavaScript:1_6:Coding_Pascal:1_7:Coding_SQL:"
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat$(cat$): |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Cat$ = noRootVSsub$(sortSetABC$(":", noDouble$(":", Replace(cat$, ":;:", ":")))): End Function
Function noRootVSsub$(s$): noRootVSsub$ = ":": For i% = 1 To prsCount(":", s$) - 1 'Root |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  part$ = prsBetween|fffd|(i, ":", ":", s$): If hasIt("_", part$) Then noRootVSsub$ = noRootVSsub$ & part$ & ":" _
                                                             Else: If Not hasIt(":" & part$ & "_", s$) Then noRootVSsub$ = noRootVSsub$ & part$ & ":"
                                               Next i: End Function
Public Function getCatRoots$(catStr$, Optional ByVal spltr$): If catStr = "" Then Exit Function Else If spltr$ = "" Then spltr$ = "|"
For i% = 1 To prsCount(":", catStr) - 1 '"Coding: Basic; SQL; Soft: MS Excel; OE: XEMISDB" -> "|Coding|Soft|OE|"
    If Not isFullPartOf(sag(r, GetCatByID(prsBetween|fffd|(i%, ":", "_", catStr))), getCatRoots$, spltr$) Then sadd getCatRoots$, spltr$ & r
Next i: sadd getCatRoots$, spltr$: End Function

Public Function getCatLong$(outstr$, catStr$, Optional InLine As Boolean, Optional HTMboldRoots As Boolean, Optional tmpIDinsert As Boolean)
Dim i As Integer, Item As String, str As String: str = outstr 'OUTsmpl:    "Coding: Basic; SQL; Soft: MS Excel; OE: XEMISDB"
If str = "" And catStr <> "" Then 'cid |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To prsCount(":", catStr) - 1
    Item = prsBetween|fffd|(i, ":", ":", catStr): new_root = prsBeforeUp("_", Item): IDinsert = IIf(tmpIDinsert, "{" & Item & "}", "")
    new_root_flg = i <> 1 And last_root <> new_root: If new_root_flg Or i = 1 Then last_root = new_root
    chr10 = IIf(posLast(Chr(10), str) = Len(str), "", Chr(10))
    If prsCount("_", Item) = 0 Then  'stand-alone-root
      str = str & chr10 & GetCatByID(Item) & ": " '& Chr(10) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ": " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTMboldRoots
    ElseIf chr10 = "" Or new_root_flg Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:
      str = str & IIf(str = "", "", Chr(10)) & prsBefore("_", GetCatByID(Item)) & ": " & IDinsert & prsAfter("_", GetCatByID(Item)) 'subcat(Item)
    Else: str = str & "; " & IDinsert & prsAfter("_", GetCatByID(Item)) 'subcat(Item) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    End If
  Next i: str = Replace(str, ": ; ", ": ") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| stand-alone-root
  If posLast(Chr(10), str) = Len(str) Then str = Mid(str, 1, Len(str) - 1)
  If InLine Then str = Replace(str, Chr(10), ";")
  If HTMboldRoots And str <> "" Then 'HTML
       cnt = prsCount(":", str) '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?
    If cnt > 0 Then str = ";" & str: For i = 1 To cnt: Root = prsBetween|fffd|(i, ";", ":", Replace(str, Chr(10), ";"), spos&, fpos&, True): _
                                                        str = Replace(Left(str, spos&) & "<B>" & Root & "</B>" & Mid(str, fpos&, 1000), ";<B>", "; <B>"): _
                                     Next i: str = Mid(str, 2, 1000) _
               Else str = "<B>" & str & "</B>" '|fffd||fffd||fffd||fffd||fffd||fffd| Root
End If: End If: getCatLong = Trim(Replace(Replace(Replace(str, ": " & Chr(10), Chr(10)) & "#", ": #", ""), "#", "")): End Function

Public Sub Cat2Form(outstr As String, catStr As String) '([out]str - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, catstr - :1:2:15:)
'MsgBox outstr
Dim str As String: str = getCatLong(outstr, catStr): cat_rows% = prsCount(Chr(10), str)
With EditForm '|fffd||fffd||fffd||fffd||fffd| |fffd| EditForm_ini()
      .TextBoxCat.Text = str: .TextBoxCat.tag = catStr
      '.Height = IncOn(.Height, Max(cat_rows%, 0) * 10 - Dif(.TextBoxCat.Height, 15.5))
      '.Frame4.Height = IncOn(.Frame4.Height, cat_rows% * 10 - Dif(.TextBoxCat.Height, 15.5))
      .TextBoxCat.Height = incon(.TextBoxCat.Height, cat_rows% * 10 - Dif(.TextBoxCat.Height, 15.5))
      '.CommandButton1.Height = .Frame4.Height
      Call View_Ini(10, 0) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End With: End Sub


'****************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CServ.ReID2
'****************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
Sub SwitchKey(id As String, bold_style, shadow_forming) ', add_category$
If logging Then LogString ("in   SwitchKey (" & id & " ," & bold_style & " ," & shadow_forming & " ," & add_category & ")")
Call unlockWB
shadow_forming = (shadow_forming And FnHasShadow(id))
id = Trim(id)
If id = "" Or id = "_" Then Exit Sub
new_zone = ""
For i = 0 To 3
  If FnFarCell(i, id, far_row, far_WS) Then
    If i = 0 Then 'Links
      Sheets(FnWSCase(i)).Range("B" + CStr(far_row) + _
                                    ":D" + CStr(far_row)).Font.Bold = bold_style
    Else
      Sheets(FnWSCase(i)).Range("B" + CStr(far_row) _
                                  + ":C" + CStr(far_row)).Font.Bold = bold_style
      root_row = far_row
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
      If shadow_forming Then
        root_shadow = Sheets(FnWSCase(i)).Cells(root_row, 2)
        If bold_style Then
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| shadow
          'c14     |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          'ending = FnGetAbbrev(Sheets(FnWSCase(i)).Cells(far_row, 3), term)
          'If ending = "" Then ending = term
          ending = FnGetAbbrev(Sheets(FnWSCase(i)).Cells(far_row, 3), term)
          If ending = "" Then ending = term _
                         Else ending = Trim(Left(term, Len(term) - Len(ending) - 2))
          
          '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
          pos = 0
          While InStr(pos + 1, id, "_") <> 0
            pos = InStr(pos + 1, id, "_")
          Wend:
          If pos > 0 Then Call FnFarCell(i, Left$(id, pos - 1), far_row, far_WS): _
                          beginning$ = Sheets(FnWSCase(i)).Cells(far_row, 2) + "_"
          
          'beginning = ""
          'pos = 0
          'While InStr(pos + 1, ID, "_") <> 0
          '  pos = InStr(pos + 1, ID, "_")
          '  Call FnFarCell(i, Left$(ID, pos - 1), far_row, far_WS)
          '  next1 = FnGetAbbrev(Sheets(FnWSCase(i)).Cells(far_row, 3), term)
          '  If next1 = "" Then next1 = term
          '  beginning = begining + next1 + "_"
          'Wend
          
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          'pos = 0
          'While InStr(pos + 1, root_shadow, "_") <> 0
          '  pos = InStr(pos + 1, root_shadow, "_")
          'Wend
          'If pos <> 0 Then
          '  beginning = Left$(root_shadow, pos - 1)
          'Else
          
          'If Right$(root_shadow, 1) = "." Then
          '  beginning = Left$(root_shadow, Len(root_shadow) - 1)
          'Else: beginning = root_shadow
          'End If
          Sheets(FnWSCase(i)).Cells(root_row, 2).value = FnClearFromSpec$(beginning$ + ending)
          'MsgBox "fat" + "_" + beginning + "_" + ending
        Else
          'pos = InStr(1, root_shadow, "_", vbTextCompare)
          'If pos <> 0 Then
          '  beginning = Left$(root_shadow, pos - 1) + "."
          'Else
          Dim oldRoot As String
          oldRoot = FnGetRootID(id)
          If oldRoot <> "" Then
            Call FnFarCell(i, oldRoot, far_row, far_WS)
            On Error GoTo errorMsg
            Sheets(FnWSCase(i)).Cells(root_row, 2).value = _
                FnClearFromSpec$(Sheets(FnWSCase(i)).Cells(far_row, 2)) + "."
          End If
          'MsgBox "thin" + "_" + beginning + "_" + ending
        End If
      End If

      '==> '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      'Call DelRowDesign(far_WS, root_row)
      'Call SetRowDesign(far_WS, root_row, 0, False)
      
'      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'      If add_category <> "" Then _
'        Sheets(FnWSCase(i)).Cells(root_row, 5).value = FnZoneMerging(Sheets(FnWSCase(i)).Cells(far_row, 5), add_category) 'todo: add_category :4_3: |fffd| :4_3: |fffd||fffd||fffd||fffd| :4:;:4_1:;:4_2:;:4_3:
      'If add_category <> "" And _
      '    InStr(1, Sheets(FnWSCase(i)).Cells(root_row, 5), add_category) = 0 Then _
      '  Sheets(FnWSCase(i)).Cells(root_row, 5).Value = _
      '  Sheets(FnWSCase(i)).Cells(root_row, 5) + new_zone
    End If
  ElseIf i <> 0 Then Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", i, "_" + id, 1)
  End If
Next i
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call UpdateRowFormatting(id): Call LockWBif
If logging Then LogString ("out SwitchKey")
Exit Sub
errorMsg: LM "with Error": Resume Next
End Sub
'****************************************************

Attribute VB_Name = "clsImage"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents m_Image As MSForms.Image
Attribute m_Image.VB_VarHelpID = -1
Private m_LinkEvents As clsLinkEvents, m_Index%

' --- Properties ---
Public Property Set LinkEvents(ByRef LinkEvents As clsLinkEvents): Set m_LinkEvents = LinkEvents: End Property
'---
Public Property Get Index%(): Index = m_Index: End Property
Public Property Let Index(ByVal idx%): m_Index = idx: End Property
Public Property Get Image() As MSForms.Image: Set Image = m_Image: End Property
Public Property Set Image(ByVal img As MSForms.Image): Set m_Image = img: End Property

' --- Methods ---
'Private Sub m_Image_Click(): m_LinkEvents.FireClick m_Image.name, Index: End Sub
'Private Sub m_Image_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
'                             m_LinkEvents.FireDblClick m_Image.name, Index: End Sub
Private Sub m_Image_MouseDown(ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
                             m_LinkEvents.FireMouseDown m_Image.name, Index, Button, Shift, x, Y: End Sub
'Private Sub m_Image_MouseMove(ByVal Button%, ByVal Shift%, ByVal X As Single, ByVal Y As Single)
'                             m_LinkEvents.FireMouseMove m_Image.name, Index, Button, Shift, X, Y: End Sub
Private Sub m_Image_MouseUp(ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
                             m_LinkEvents.FireMouseUp m_Image.name, Index, Button, Shift, x, Y: End Sub
'--------------------


Attribute VB_Name = "clsImages"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Public Event Click(ByVal ControlName$, ByVal Index%)
'Public Event DblClick(ByVal ControlName$, ByVal Index%)
Public Event MouseDown(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
'Public Event MouseMove(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal X As Single, ByVal Y As Single)
Public Event MouseUp(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
Private WithEvents m_LinkEvents As clsLinkEvents
Attribute m_LinkEvents.VB_VarHelpID = -1
Private m_Collect As Collection
'----
Private Sub Class_Initialize(): Set m_Collect = New Collection
                                Set m_LinkEvents = New clsLinkEvents: End Sub
'Private Sub m_LinkEvents_Click(ByVal ControlName$, ByVal Index%)
'            RaiseEvent Click(ControlName, Index): End Sub
'Private Sub m_LinkEvents_DblClick(ByVal ControlName$, ByVal Index%)
'            RaiseEvent DblClick(ControlName, Index): End Sub
Private Sub m_LinkEvents_MouseDown(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
            RaiseEvent MouseDown(ControlName, Index, Button, Shift, x, Y): End Sub
'Private Sub m_LinkEvents_MouseMove(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal X As Single, ByVal Y As Single)
'            RaiseEvent MouseMove(ControlName, Index, Button, Shift, X, Y): End Sub
Private Sub m_LinkEvents_MouseUp(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
            RaiseEvent MouseUp(ControlName, Index, Button, Shift, x, Y): End Sub
'----
' --- Methods ---
Public Sub AddItem(ByRef img As MSForms.Image, Optional ByVal Key As Variant)
                    Dim xBtn As clsImage
                    
                    Set xBtn = New clsImage
                    Set xBtn.Image = img
                    Set xBtn.LinkEvents = m_LinkEvents
                    
                    If IsMissing(Key) Then m_Collect.Add xBtn _
                                      Else m_Collect.Add xBtn, Key
                    m_Collect(m_Collect.Count).Index = m_Collect.Count: End Sub
Public Function RemoveItem(ByVal Key) As Boolean: On Error GoTo errL: m_Collect.Remove Key: RemoveItem = True '+ |fffd||fffd||fffd||fffd||fffd||fffd|?
errL:                                                                                   End Function 'was Index, noError
Public Function Count&(): Count = m_Collect.Count: End Function
Public Function Contains(ByVal Key$) As Boolean: On Error GoTo errL: If Not m_Collect(Key$) Is Nothing Then Contains = True
errL:                                                                                   End Function '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| CStr)
'----
' --- Properties ---
Public Property Get Item(ByVal Key As Variant) As clsImage 'was Index
                Set Item = m_Collect(Key): End Property
'--------------------


Attribute VB_Name = "clsLinkEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit 'http://www.xtremevbtalk.com/excel/319562-creating-clickevent-dynamically-created-controls-vba-excel-2003-a.html
'You can have a generic click event handler for each control type (ie. one for label controls, one for image controls, etc...)
'like I showed you here, but you cannot have a single click event handler for all types of controls.
'Public Event Click(ByVal ControlName$, ByVal Index%) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MouseUp (Button = 1)
'Public Event DblClick(ByVal ControlName$, ByVal Index%) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MouseUp |fffd| Click
Public Event MouseDown(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)
'Public Event MouseMove(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal X As Single, ByVal Y As Single)
Public Event MouseUp(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single)

'Public Sub FireClick(ByVal ControlName$, ByVal Index%): RaiseEvent Click(ControlName, Index): End Sub
'Public Sub FireDblClick(ByVal ControlName$, ByVal Index%): RaiseEvent DblClick(ControlName, Index): End Sub
Public Sub FireMouseDown(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single): RaiseEvent MouseDown(ControlName, Index, Button, Shift, x, Y): End Sub
'Public Sub FireMouseMove(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal X As Single, ByVal Y As Single): RaiseEvent MouseMove(ControlName, Index, Button, Shift, X, Y): End Sub
Public Sub FireMouseUp(ByVal ControlName$, ByVal Index%, ByVal Button%, ByVal Shift%, ByVal x As Single, ByVal Y As Single): RaiseEvent MouseUp(ControlName, Index, Button, Shift, x, Y): End Sub
'------------------------
Attribute VB_Name = "log_"
Public DebugAssertFLG As Boolean '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Logging (external debugger) ***********
'****************************************************

Rem: TEMPLATES>>

'WatchMessage           wM(item_name, value)          satel       - |fffd||fffd||fffd|. 5 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'LogPoint               lp(pointNumber)                           - |fffd||fffd||fffd|. 4 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| LogString)
'LogMessage             lm txt$                  fullstring HYPER - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'LogString              lS in_out$, fname$, <retV$>, <param1>...  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| in=">"/out="<"/"~" - ""=|fffd||fffd||fffd||fffd||fffd|
'SHORT: If logging Then LogString ("in   SetRowDesign")
       'If logging Then LogString ("out SetRowDesign")
'LONG : If logging Then LogString ("in   FnGetRootFromID (" & lang & " ," & shadow & " ," & mainRoot & ")")
       'If logging Then LogString ("out FnGetRootFromID (<" & FnGetRootFromID & _
                                                    ">: " & shadow & " ," & mainRoot & ")")template
'Ini ************************************************
Sub UA(): flg_InWork = False: If doLog Then If Not AppD Is Nothing Then AppD.Run "debugger.xls!reStart"
End Sub 'User Action (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Function doLog() As Boolean: doLog = (logging Or logmsg) And Not stoplog: End Function
'Internal *******************************************
Sub LP(pointNumber) 'LogPoint (|fffd||fffd||fffd|.4) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If doLog Then If Not AppD Is Nothing Then AppD.Run "debugger.xls!LP", pointNumber, watch4$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
Sub LP_(pointNumber): End Sub '|fffd||fffd||fffd| Whole Word |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function LM(ByVal logMessage, Optional add1, Optional add2, Optional add3): LM = logMessage 'LogMessage (force call) - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not IsMissing(add1) Then sadd logMessage, "(" & add1 & ")": If Not IsMissing(add2) Then sadd logMessage, "(" & add2 & ")": If Not IsMissing(add3) Then sadd logMessage, "(" & add3 & ")"
If doLog Then If Not AppD Is Nothing Then AppD.Run "debugger.xls!LM", logMessage, watch4$ '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function
Function LM_(logMessage, Optional add1, Optional add2, Optional add3): LM_ = logMessage: End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub L0M(Optional ByVal nul, Optional add1, Optional add2, Optional add3): End Sub 'void f-n culd be used as "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'****************************************************
'Watching *******************************************
Sub wM(item_name, value) 'WatchMessage - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If doLog Then If Not AppD Is Nothing Then AppD.Run "debugger.xls!wM", item_name, value '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
Private Function watch4$(): Exit Function '= No Watch
                            On Error Resume Next: soc_flg = False 'True 'StopOnChange On|Off
Rem WATCHING (history)
Rem Hwnd ---------------------------------------------
    'watch4$ = flg_InWork '"AWCaption = " & getWndCaption(GetActiveWindow&())
Rem Application --------------------------------------
     watch4$ = DDM.Bottom & " x " & DDM.Right  'ThisWorkbook.Saved 'Application.ScreenUpdating
'    With Application.ActiveWindow: watch4$ = "Caption = " & .Caption & " " & _
'                                             "Top = " & .Top & " " & "Left = " & .Left & " " & _
'                                             "Height = " & .Height & " " & "Width = " & .Width & " ": End With
Rem Sheets -------------------------------------------
    'watch4$ = ActiveSheet.ProtectContents 'Sheets(FnWSCase(1)).ProtectContents
Rem Dispetcher ---------------------------------------
    'watch4$ = ScLt%
    'watch4$ = SCForm.stop_in_work 'DDM.heigth & " : " & CStr(Not Columns(2).Hidden) & _
                                                 " : " & CStr(Columns("B").ColumnWidth) & " wt: " & Cells(1, 4).WrapText
    'watch4$ = Sheets("Dispetcher_").Pictures.Count & " icons for " & FnGetFreeRow&("Dispetcher_") - 1                      'Icons
    'watch4$ = "iMaping: " & iMaping & "; dispIcons: " & dispIcons
Rem FORMS --------------------------------------------
    'If FnFormIsLoaded("PF") Then watch4$ = PF.c_Set
    'If FnFormIsLoaded("EditForm") Then watch4$ = EditForm.Visible
    'If FnFormIsLoaded("SCSForm") Then watch4$ = CStr(SCSForm.Left) 'CStr(SCSForm.Lparked) 'CStr(DDM.Right)  'CStr(SCSForm.Top)
Rem Other --------------------------------------------
    'Set MyData = New DataObject: On Error Resume Next: MyData.GetFromClipboard: On Error GoTo 0
    'If MyData.GetFormat(1) Then If Trim(MyData.GetText) <> "" Then watch4$ = MyData.GetText
    'Set MyData = Nothing
'-----------------------------------------------------
watch4$ = IIf(soc_flg, "SOC:", "") & watch4$: End Function


'**************************************************** StartUp Logging
Sub sul(Msg$, Optional forsed = True): Exit Sub: If flg_Ready And Not forsed Then Exit Sub
add2file Hour(Now()) & ":" & Minute(Now()) & ":" & Second(Now()) & ">>  '" & Msg$ & "'", ThisWorkbook.path & "\Logs\staptup.log": End Sub
'Short ******************************************* |fffd||fffd| 5-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ls(Optional in_out$, Optional fName$, Optional ByVal retV$, Optional ByVal par1$, Optional ByVal par2$, _
                         Optional ByVal par3$, Optional ByVal par4$, Optional ByVal par5$): If in_out = "" Or fName$ = "" Then Exit Sub
in_out = Trim(Replace(Replace(in_out, "in", ">"), "out", "<")): lstr = decode(in_out, ">", "in   ", "<", "out ") & fName$:
                                                    If CStr(par1) = "" Then GoTo exitL Else pstr = CStr(par1)
                                                    If CStr(par2) = "" Then GoTo exitL Else pstr = pstr & " ," & CStr(par2)
                                                    If CStr(par3) = "" Then GoTo exitL Else pstr = pstr & " ," & CStr(par3)
                                                    If CStr(par4) = "" Then GoTo exitL Else pstr = pstr & " ," & CStr(par4)
                                                    If CStr(par5) = "" Then GoTo exitL Else pstr = pstr & " ," & CStr(par5)
exitL: r = CStr(retV) <> "": p = pstr <> "": LogString lstr & IIf(r Or p, " (" & IIf(r, "<" & retV & ">: ", "") & pstr & ")", ""), 1: End Sub
'****************************************************
'MAIN ***********************************************
Sub LogString(funcName$, Optional d0% = 1): If stoplog Or (Not (logging)) Or d0% = 0 Then Exit Sub 'SetAppC + 5 ms
If AppD Is Nothing Then MsgBox "no AppD": logging = False _
Else AppD.Run "debugger.xls!SetAppC", Application.Application: _
     AppD.Run "debugger.xls!LogString", funcName$, watch4$: das DebugAssertFLG: DebugAssertFLG = False 'Stop '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| db_
End Sub
Sub DebugAssertOn(): DebugAssertFLG = True: End Sub

'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ***************************************
'****************************************************
Sub tMsg(): MsgBox "test": End Sub

Sub LPit(ByVal procName$, Optional LW$ = "LP"): Dim LogOff As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LP |fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| unLP), LW$ - LOG What? (LP/LM)
Dim pasFlg As Boolean: On Error GoTo quitL: If LW$ = "" Then LW$ = "LP" Else If LW$ <> "LP" And LW$ <> "LM" And LW$ <> "sul" Then Exit Sub
    frm_n$ = Replace(prsBefore("Form_", procName), "> ", ""): If frm_n$ <> "" Then procName = "UserForm_" & prsafterdown("Form_", procName) '#|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|#
If Application.vbe.CodePanes(2).CodeModule.ProcBodyLine(procName, vbext_pk_Proc) Then
    For Each Item In Application.vbe.VBProjects("MACProject").VBComponents
      If frm_n$ <> "" Then If Replace(Item.name, "Form", "") <> frm_n$ Then GoTo nxtL   '#|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|#
      s_line& = Item.CodeModule.ProcBodyLine(procName, vbext_pk_Proc) 'ProcStartLine - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Sub
      If s_line = 0 Then s_line = Item.CodeModule.ProcBodyLine(Replace(procName, "UserForm_", ""), vbext_pk_Proc): _
                      If s_line > 0 Then procName = Replace(procName, "UserForm_", "")  '#|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|#
      If s_line > 0 Then
        With Item.CodeModule: Application.vbe.MainWindow.Visible = True
          .codepane.show: spos = InStr(1, .Lines(s_line, 1), procName)
          Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Item
          Call .codepane.SetSelection(s_line, spos, s_line, spos + Len(procName))
          pasFlg = Right(.Lines(s_line, 1), 2) = " _"
        For i = 1 To .ProcCountLines(procName, vbext_pk_Proc) - 2 '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           c_line$ = .Lines(s_line + i, 1):                                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd|''|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| unLPit |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
        If c_line$ Like "*End Sub*" Or c_line$ Like "*End Function*" Then Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LogOff Then If Left(c_line$, 6) = "LogOn:" Then LogOff = False Else: GoTo nxtRow
            If Left(c_line$, 7) = "LogOff:" Then LogOff = True: GoTo nxtRow
            'If LW$ = "LM" Then If hasIt("L0M ", c_line$) Then c_line$ = Replace(c_line$, "L0M ", "LM "): _
                                Call .ReplaceLine(s_line + i, c_line$) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. L0M->LM (|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?) !|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
                            If pasFlg Or Trim(c_line$) = "" Then GoTo pasL
                            If Left(LTrim(c_line$), 1) = "'" Then GoTo pasL
                            If Right(RTrim(prsBeforeUp("'", c_line$)), 5) = " Then" Then GoTo pasL
                            If isFullPartOf(Left(LTrim(c_line$), 4), "Else|Case|Rem:", "|") Then GoTo pasL
                            If Left(LTrim(c_line$), 3) = "If " And Right(c_line$, 2) = " _" Then GoTo pasL
                            If hasIt(":", c_line$) Then If Not hasIt(" ", Trim(prsBefore(":", c_line$))) Then GoTo pasL 'Label:
          Call .ReplaceLine(s_line + i, LW$ & " " & i & ":" & c_line$)
pasL:     pasFlg = Right(c_line$, 1) = "_"
nxtRow: Next i: End With: Exit Sub
nxtL: End If: Next Item
Else: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & procName$ & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbExclamation: End If:
quitL: Resume Next: End Sub

Sub unLPit(ByVal procName$, Optional LW$ = "LP"): Dim LogOff As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd|, LW$ - LOG What? (LP/LM)
On Error GoTo quitL: If LW$ = "" Then LW$ = "LP" Else If LW$ <> "LP" And LW$ <> "LM" Then Exit Sub
    frm_n$ = Replace(prsBefore("Form_", procName), "> ", ""): If frm_n$ <> "" Then procName = "UserForm_" & prsafterdown("Form_", procName) '#|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|#
If Application.vbe.CodePanes(2).CodeModule.ProcBodyLine(procName, vbext_pk_Proc) Then
    For Each Item In Application.vbe.VBProjects("MACProject").VBComponents
      If frm_n$ <> "" Then If Replace(Item.name, "Form", "") <> frm_n$ Then GoTo nxtL   '#|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|#
      s_line& = Item.CodeModule.ProcBodyLine(procName, vbext_pk_Proc)
      If s_line = 0 Then s_line = Item.CodeModule.ProcBodyLine(Replace(procName, "UserForm_", ""), vbext_pk_Proc): _
                      If s_line > 0 Then procName = Replace(procName, "UserForm_", "")  '#|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|#
      If s_line > 0 Then
        With Item.CodeModule: Application.vbe.MainWindow.Visible = True
        For i = 1 To .ProcCountLines(procName, vbext_pk_Proc) - 2
          c_line$ = .Lines(s_line + i, 1): If c_line$ Like "*End Sub*" Or c_line$ Like "*End Function*" Then Exit Sub 'FINISH
          If LogOff Then If Left(c_line$, 6) = "LogOn:" Then LogOff = False Else: GoTo nxtRow
          If Left(c_line$, 7) = "LogOff:" Then LogOff = True: GoTo nxtRow
'          If LW$ = "LP" Then 'L0M - |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, !|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'                'If Left(c_line$, 3) = "LM " Then c_line$ = "L0M " & Mid(c_line$, 4)
'                   If hasIt(" LM ", c_line$) Then c_line$ = Replace(c_line$, " LM ", " L0M ")
'          Else: If Left(c_line$, 4) = "L0M " Then c_line$ = "LM " & Mid(c_line$, 5)
'          End If
          If Left(c_line$, 3) = LW$ & " " Then .ReplaceLine s_line + i, prsAfter(":" & IIf(Mid(c_line$, posFirst(":", c_line$) + 2, 1) = " ", "", " "), c_line$) ' _
                                          Else If hasIt("L0M ", c_line$) Then Call .ReplaceLine(s_line + i, c_line$)
nxtRow: Next i: End With: Exit Sub
nxtL: End If: Next Item: VBEprocedureSelect procName$ 'Success
Else: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & procName$ & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbExclamation: End If
quitL: Resume Next: End Sub

Sub testLPit(): LPit "unLPit": End Sub
Sub testunLP(): unLPit "unLPit": End Sub
Attribute VB_Name = "map_"
Sub start()
Rem: log_
'VBElog_branch
'VBEprocedureSelect
Rem: Func_
'VBEfunc_Browser
End Sub
Attribute VB_Name = "satellite"
Attribute VB_Base = "0{67A7C1E9-FFB6-49A1-B814-9F141C7A42A8}{EF52D22F-5489-4374-B0D2-EC91B095013F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public t_hwnd&, lrb_flg As Boolean, light_mode As Boolean
Private me_hwnd&, vitrageN%, maxiFlg As Boolean, lPT As POINTAPI, Icons As New Collection 'SW_MAXIMIZE& = 1
Public custran$ 'CustomTransparencyList = |hwnd1|hwnd2|..| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Do_smart_freezing)
Private last_PF_Set_saving

Private Sub UserForm_Initialize(): If t_hwnd& = 0 Then HideMe
me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False
           SCSForm.freeze me_hwnd&, , 150: SetTopMostWindow& me_hwnd&, True: reDraw
If DDM.On Then Image25.Left = 29: Image24.Left = 67.5 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Rem: reSize
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\pin.dib"), Key:="pin"   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd|,  |fffd||fffd||fffd||fffd||fffd||fffd|  (|fffd||fffd||fffd|.)
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\line2.dib"), Key:="line2"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\full_Oo.dib"), Key:="full_Oo"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\full_O.dib"), Key:="full_O"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\full_OX.dib"), Key:="full_OX"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\buttons\full_OX_inv.dib"), Key:="full_OX_inv"
Rem: reButton
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\secstant.jpg"), Key:="secstant"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\hot\bag.ico"), Key:="dron"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\parts\0000.dib"), Key:="0000"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\parts\----.dib"), Key:="----"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\white\R|fffd||fffd||fffd|.ico"), Key:="w_R|fffd||fffd||fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\white\|fffd|G|fffd||fffd|.ico"), Key:="w_|fffd|G|fffd||fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\white\|fffd||fffd|B|fffd|.ico"), Key:="w_|fffd||fffd|B|fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\white\|fffd||fffd||fffd|Y.ico"), Key:="w_|fffd||fffd||fffd|Y"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\white\|fffd||fffd||fffd||fffd|.ico"), Key:="w_|fffd||fffd||fffd||fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\R|fffd||fffd||fffd|.ico"), Key:="R|fffd||fffd||fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\|fffd|G|fffd||fffd|.ico"), Key:="|fffd|G|fffd||fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\|fffd||fffd|B|fffd|.ico"), Key:="|fffd||fffd|B|fffd|"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\|fffd||fffd||fffd|Y.ico"), Key:="|fffd||fffd||fffd|Y"
Icons.Add Item:=LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\|fffd||fffd||fffd||fffd|.ico"), Key:="|fffd||fffd||fffd||fffd|"
Rem: OnTimess_start - https://docs.microsoft.com/en-us/windows/desktop/winmsg/using-timers
'custran$ = "|332090|"
If c_useTimer Then If Not startUpFlg Then on_timess_flg = True: SetTimer me_hwnd&, me_hwnd&, 500, AddressOf OnTimess Else das
If SCSForm.LFixed Then Image16.Picture = Icons("secstant")
End Sub                                                                'nIDEvent = 9x9 - const for Kill |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| me_hwnd&
Private Function meHidden(): meHidden = Me.Top = -1000: End Function
Public Function HideMe() As Boolean: If meHidden Then Exit Function
                HideMe = True: Me.Top = -1000: lPT.Y = -1000: End Function

Rem: CONTROLS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Image16_Click(): On Error Resume Next: DDBar.Recovery: DDBar.AddItem t_hwnd&, , , sag(pos%, SCSForm.inCollection(t_hwnd&)): HideMe:
        If pos% = 1 Then If SCSForm.d_http_hwnd <> 0 Then DDBar.reDraw 3, True, True, , "1m2": Exit Sub 'half-Matrix
                                                   SCSForm.reParkW True: FindForm.resetParker: End Sub 'Me.Hide: Me.show vbModeless: End Sub
Private Sub Image16_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                                 'If Button = fmButtonRight Then Image20_Click: Exit Sub                          '|fffd||fffd||fffd||fffd||fffd||fffd| Minimize
                                 If Button = fmButtonRight Then SCSForm.processSCSFormKeyDown 71: App_reset: Exit Sub '<G>arbage
                                 If Button = fmButtonMiddle Then
                                    If SCSForm.LFixed Then 'lightAuto (On/Off)
                                          If light_mode Then
                                             light_mode = False: Image16.Picture = Icons("secstant")
                                          Else: light_mode = True: Image16.Picture = Icons("dron")
                                          End If: Me.Repaint
                                    Else: SCSForm.ReleaseW t_hwnd&: DDBar.PutOn t_hwnd&, -1: Exit Sub 'Doppel
                                 End If: End If
    End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Image18_Click(): If Not SCSForm.freeze(t_hwnd&, , wdeep%(t_hwnd&)) Then SCSForm.unFreeze t_hwnd&: DelCusTranS t_hwnd& '~
    End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub Image18_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
        If Button = fmButtonRight Then
            If Shift = 0 Then
               'If SCSForm.isDoppel(t_hwnd&) Then 'Case |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'SCSForm.freeze t_hwnd&
                  If isCusTranS(t_hwnd&) Then DelCusTranS t_hwnd&: smart_freezing_next t_hwnd&, 50 Else SCSForm.processSCSFormKeyDown 191, , , t_hwnd& '<?> - |fffd||fffd||fffd| |fffd| AddCusTranS
               'Else: If Not isCusTranS(t_hwnd&) Then SCSForm.processSCSFormKeyDown 191, , , t_hwnd& _
                                                 Else: DelCusTranS t_hwnd&: SCSForm.freeze t_hwnd& '|fffd||fffd||fffd| AddCusTranS
            End If: 'End If
        ElseIf Button = fmButtonMiddle Then 'Shift = 2 Then - why keyboard?
            SCSForm.processSCSFormKeyDown 76, , , SCSForm.t_hwnd&: Exit Sub  '<L> |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar |fffd| WinTaskBar)
    End If: End Sub
Private Sub Image17_Click(): setNoHeadersH t_hwnd&, Not hasHeader(t_hwnd&): reButton True
        End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub Image17_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
           If Button = fmButtonRight Then If IsTopMostWindow(t_hwnd&) Then SetTopMostWindow& t_hwnd&, False: Image17.Picture = Icons("line2"): Image17.tag = "": Me.Repaint _
                                     Else SetTopMostWindow& t_hwnd&, True: SetTopMostWindow& me_hwnd&, True: Image17.Picture = Icons("pin"): Image17.tag = "Top": Me.Repaint
        End Sub

Rem: |fffd||fffd||fffd||fffd||fffd||fffd| Parker'|fffd|

Private Sub Image24_Click(): ParkingImageClick 2: End Sub '[--- - |fffd||fffd||fffd||fffd||fffd||fffd| r
Private Sub Image24_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
        If Button = fmButtonRight Then ParkingImageClick 2, True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End Sub
Private Sub Image23_Click(): ParkingImageClick 3: End Sub '---] - |fffd||fffd||fffd||fffd||fffd||fffd| b_l
Private Sub Image23_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
        If Button = fmButtonRight Then ParkingImageClick 3, True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
    End Sub                                       'Image16_Click '|fffd||fffd||fffd||fffd||fffd||fffd| b_l |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Image22_Click(): ParkingImageClick 4: End Sub '-^^- - |fffd||fffd||fffd||fffd||fffd||fffd| b_r
Private Sub Image22_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
        If Button = fmButtonRight Then ParkingImageClick 4, True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End Sub
Private Sub Image25_Click(): ParkingImageClick 1: End Sub '-__- - |fffd||fffd||fffd||fffd||fffd||fffd| http (dual)
'Private Sub Image25_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'        If Button = fmButtonRight Then ParkingImageClick 1, True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    End Sub
Private Sub ParkingImageClick(n%, Optional tagInvert As Boolean, Optional t_hwnd&): With SCSForm 'Common
                                                                       If t_hwnd& = 0 Then t_hwnd& = Me.t_hwnd _
                                                                                      Else tagInvert = Not Image21.tag  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Image21.tag + Abs(tagInvert) Then .ReleaseW t_hwnd&, , True: FindForm.resetParker: _
                             .SetRT decode(n%, 2, "1|", 3, "|2", 4, "3_", 1, "_4"), t_hwnd&: Exit Sub ': reSize True
        If .Castling(sag(i%, .inCollection(t_hwnd&)), n%) Then t_hwnd& = zero(.GetTBhwnd(i%), t_hwnd&): Exit Sub '.reParkW:
          If DDBarUsed Then
            DDBar.PutOn t_hwnd&, n% 'DDBar.AddItem (.GetTBhwnd(n%)) '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| DD? 'If n% = 1 Then
          Else: .reCollectW t_hwnd&, n%: End If: End With: reButton True: If smart_freezing_by_mouse Then Do_smart_freezing t_hwnd& '+ |fffd||fffd||fffd||fffd||fffd| "smart_freezing |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Sub '''''''''''''''''''''''''''''''''''''Common
'|fffd||fffd||fffd||fffd||fffd||fffd| http (dual) - RightClick (|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| d_http)
Private Sub Image25_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): With SCSForm:
    If Button <> fmButtonRight And Button <> fmButtonMiddle Then Exit Sub 'If .Y_split - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'If not .Y_split - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Image21.tag Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        hWnd_rt& = GetTopParentH&(WindowFromPoint(DDM.Right - 50, DDM.Top + 50)): hWnd_lb& = GetTopParentH&(WindowFromPoint(DDM.Left + 50, DDM.Bottom - 50))
        hWnd_lt& = GetTopParentH&(WindowFromPoint(DDM.Left + 50, DDM.Top + 50)): hWnd_rb& = GetTopParentH&(WindowFromPoint(DDM.Right - 50, DDM.Bottom - 50))
        hWnd_l& = IIf(hWnd_lt& = hWnd_lb&, hWnd_lb&, 0): hWnd_r& = IIf(hWnd_rt& = hWnd_rb&, IIf(hWnd_l& = hWnd_rb&, 0, hWnd_rb&), 0)
        hWnd_t& = IIf(hWnd_rt& = hWnd_lt&, hWnd_lt&, 0): hWnd_b& = IIf(hWnd_lb& = hWnd_rb&, IIf(hWnd_t& = hWnd_rb&, 0, hWnd_rb&), 0)
        If hWnd_l& = hWnd_t& Then hWnd_t& = 0 'FullScreen |fffd||fffd||fffd||fffd|
        If dispValidCaption(hWnd_t&) And dispValidCaption(hWnd_b&) Then If .inCollection(hWnd_t&) = 0 Or .inCollection(hWnd_b&) = 0 Then h_pair = True
        If dispValidCaption(hWnd_l&) And dispValidCaption(hWnd_r&) Then If .inCollection(hWnd_l&) = 0 Or .inCollection(hWnd_r&) = 0 Then v_pair = True
        If Button = fmButtonRight Then
            If h_pair Then ParkingImageClick 3, , hWnd_t&: ParkingImageClick 2, , hWnd_b&: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| http*)
            If v_pair Then ParkingImageClick 4, , hWnd_l&: ParkingImageClick 1, , hWnd_r&: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| http*)
        'Matrix (d_http_hwnd) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <-><+/=><|>
            If Not .Y_split Then .Y_split = Not .Y_split _
                            Else .Y_split = Not .Y_split: .pivot_d = Not .pivot_d 'If matrix Or d_http_hwnd > 0 Then
            .reParkW: Exit Sub
        Else 'fmButtonMiddle (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If h_pair Or v_pair Then .Y_split = v_pair: .pivot_d = False: .CollectW IIf(v_pair, hWnd_r&, hWnd_b&), 5: _
                                                                      .CollectW IIf(v_pair, hWnd_l&, hWnd_t&), 1: Exit Sub
        End If
    End If '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ^^
    If Button = fmButtonMiddle Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DD
        If .http_hwnd <> 0 Then DDBar.AddItem .http_hwnd, .d_http_hwnd = 0, , 1
        If .d_http_hwnd <> 0 Then DDBar.AddItem .d_http_hwnd, True, , 5
    Exit Sub: End If
    'If .d_http_hwnd = t_hwnd Then .ReleaseW t_hwnd: .reParkW Else .processSCSFormKeyDown 68, , , t_hwnd  '<D> = dual_http
    If .d_http_hwnd <> t_hwnd Then ParkingImageClick 5
End With: End Sub

Rem: |fffd||fffd||fffd||fffd||fffd||fffd| Vitrages (|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|/FullScreen |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (SCSForm.<Tab>)/DDBar.AddItem(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|_Click)
Private Sub Image21_Click(): With SCSForm: If Image21.tag Then SCSForm.Scratch2Fit t_hwnd&: reSize True: reButton: Exit Sub
    'If Not SCSForm.LFixed Then If t_hwnd& = .http_hwnd Or t_hwnd& = .d_http_hwnd Then DDBar.AddItem t_hwnd&: HideMe: Exit Sub
    'Collection
    If .inCollection(t_hwnd&) Then .ReleaseW t_hwnd&, , True: FindForm.resetParker: .unFreeze t_hwnd& _
                              Else: SCSForm.CollectW4 t_hwnd& '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          reButton True: End With: End Sub                    '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| t_hwnd&

Rem: |fffd||fffd||fffd||fffd||fffd||fffd| Vitrages - RightClick (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Private Sub Image21_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    With SCSForm: If Button = fmButtonMiddle Then .pivot_d = Not .pivot_d: .reParkW: Exit Sub
                  If Button = fmButtonRight Then Image21.tag = Not Image21.tag Else Exit Sub
    If Image21.tag Then
      If Not (t_hwnd& = .http_hwnd Or t_hwnd& = .d_http_hwnd) Then _
        Image21.Picture = Icons(IIf(SCSForm.Fitted(t_hwnd), "0000", "----"))
        Image22.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\parts\-^^-|fffd|.dib"):
        Image23.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\parts\---]|fffd|.dib"):
        Image24.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\parts\[---|fffd|.dib"):
        Image25.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\parts\-_+_-.dib"):
    Else: If Not (t_hwnd& = .http_hwnd Or t_hwnd& = .d_http_hwnd) Then If sag(i%, SCSForm.inCollection(t_hwnd&)) > 0 _
                Then Image21.Picture = Icons(decode(i%, 1, "w_R|fffd||fffd||fffd|", 2, "w_|fffd|G|fffd||fffd|", 3, "w_|fffd||fffd|B|fffd|", 4, "w_|fffd||fffd||fffd|Y", 5, "w_|fffd||fffd||fffd||fffd|")) _
                Else Image21.Picture = Icons(decode(FindForm.nxt_pos, 1, "R|fffd||fffd||fffd|", 2, "|fffd|G|fffd||fffd|", 3, "|fffd||fffd|B|fffd|", 4, "|fffd||fffd||fffd|Y", 5, "|fffd||fffd||fffd||fffd|")) 'Image21.Picture = Icons("|fffd||fffd||fffd||fffd|")
        'Image21.Picture = Icons(IIf(t_hwnd& = .http_hwnd Or t_hwnd& = .d_http_hwnd, "secstant", "|fffd||fffd||fffd||fffd|"))
        Image22.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\123Y.ico"):
        Image23.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\12B4.ico"):
        Image24.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\1G34.ico"):
        Image25.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\vitrages\R234.ico"):
End If: End With: Me.Repaint: End Sub

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub Image20_Click(): With SCSForm: If t_hwnd = .t_hwnd Then .noDoppel Else _
                        If getWindowState(t_hwnd) = SW_MINIMIZE& Then ShowWindow& t_hwnd, SW_RESTORE&: reButton True _
                        Else: If getWndCaption$(t_hwnd) Like "PL/SQL Developer *" Then _
                             Image16_Click Else .ReleaseW t_hwnd: .reParkW True: FindForm.resetParker 'ShowWindow& t_hwnd, SW_MINIMIZE&
    End With: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| Minimize
Private Sub Image20_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): With SCSForm
    If Button = fmButtonRight Then If t_hwnd = .t_hwnd Then .noDoppel Else .processSCSFormKeyDown 82, , , t_hwnd:  '<R> Release - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| RClick
        End With: End Sub
Private Sub Image19_Click(): With SCSForm:
        If SCSForm.LFixed Then
          If maxiFlg Then
                .AllShowWindow SW_RESTORE&, "|" & .br_hwnd & "|" & .r_hwnd & "|" & t_hwnd & "|": .UserForm_Layout
                maxiFlg = False: Image19.Picture = Icons("full_" & IIf(t_hwnd = zero(.br_hwnd, .bl_hwnd), "OX", "O")): Me.Repaint: Exit Sub
          ElseIf t_hwnd = .http_hwnd Or t_hwnd = .bl_hwnd Then
                .AllShowWindow SW_MINIMIZE, "|" & .br_hwnd & "|" & .r_hwnd & "|" & t_hwnd & "|"
'                Dim rt As rect: rt.Top = DDM.Top: rt.Bottom = DDM.Bottom: rt.Left = DDM.Left: rt.Right = DDM.Right
'                .unFreezeIfXP t_hwnd: BringWindowToTop& t_hwnd: SetWindowRect t_hwnd, rt:
                ShowWindow& t_hwnd, SW_MAXIMIZE&: Me.reSize True
                                                maxiFlg = True: Image19.Picture = Icons("full_" & _
                                                                                IIf(maxiFlg, IIf(t_hwnd = zero(.br_hwnd, .bl_hwnd), "OX_inv", "Oo"), _
                                                                                             IIf(t_hwnd = zero(.br_hwnd, .bl_hwnd), "OX", "O")))
           Me.Repaint: Exit Sub: End If
        ElseIf t_hwnd = .r_hwnd Or t_hwnd = .br_hwnd Or t_hwnd = .bl_hwnd Then
                .Scratch2Fit t_hwnd:: Me.reSize True: maxiFlg = Not maxiFlg: Image19.Picture = Icons("full_" & _
                                                                                IIf(maxiFlg, IIf(t_hwnd = zero(.br_hwnd, .bl_hwnd), "OX_inv", "Oo"), _
                                                                                             IIf(t_hwnd = zero(.br_hwnd, .bl_hwnd), "OX", "O")))
             Me.Repaint: Exit Sub
        End If: End With '<Tab> - FullScreen + |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If getWindowState(t_hwnd) = SW_MAXIMIZE& Then _
         ShowWindow& t_hwnd, SW_RESTORE&: maxiFlg = False: Image19.Picture = Icons("full_O") _
    Else ShowWindow& t_hwnd, SW_MAXIMIZE&: maxiFlg = True: Image19.Picture = Icons("full_Oo")
Me.Repaint: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| FullScreen
Private Sub Image19_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If Button = fmButtonRight Then If Not Image15.Visible Then Image15_Click: '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| X |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If Button = fmButtonMiddle Then SCSForm.processSCSFormKeyDown 87, , , t_hwnd: If DDBarUsed Then DDBar.HideBar True '<W> - switchWmode
    End Sub
Private Sub Image15_Click(): HideMe: If t_hwnd = SCSForm.t_hwnd Then SCSForm.noDoppel Else dispDestroyWindow t_hwnd&, True, sag(pos%, vitrage_Key&(t_hwnd&)): t_hwnd& = 0 'If Not hasHeader(t_hwnd&) Then - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                   If DDBarUsed Then If DDM.num > 1 Then If pos% = IIf(DDM.On, 3, 1) Then If SCSForm.GetTBhwnd(IIf(DDM.On, 1, 0)) = 0 Then _
                   If SCSForm.LFixed Then DDBar.reDraw 3 Else DDBar.reDraw 3, True, True, , "1m2" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Matrix |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DD-main-|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?)
    End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| X
Private Sub Image15_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If Button = fmButtonRight Then Image15_Click: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End Sub

Rem: ACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'MAIN onTime
Sub reSize(Optional justPos&): Doppel = SCSForm.isDoppel: If justPos Then GoTo justPosL1 Else If Not stateOk Then Me.HideMe: 'db_ justPos - FORCED reSize '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim t_change_flg As Boolean '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'dbgl "+1": 'Exift Sub
    With SCSForm: Select Case .flash: Case -1: If .s_freez <= 50 Then .flash = 1: FindForm.Image8.BorderColor = &H80C0FF '&HFF&
                                      Case 1: If .s_freez >= 230 Then .flash = -1: FindForm.Image8.BorderColor = &H80000002
              End Select: If .flash <> 0 Then .s_freez = .s_freez + .flash: SetTransparent .flash_hwnd&, .s_freez
    End With '< |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim tPT As POINTAPI, t_h&: GetCursorPos tPT: t_h& = WindowFromPoint(tPT.x, tPT.Y): If t_h& = 0 Then Exit Sub
    If getWndCaption(GetParent(t_h&)) = "TrainForm" Then Exit Sub _
     Else: If GetTopParentC$(t_h&) = "Cropper" Then Exit Sub _
     Else: If getWndCaption(t_h&) Like "*,,,^-^,,,*" Then db_ "*,,,^-^,,,*": Exit Sub _
     Else: If getWndCaption(GetParent(GetParent(t_h&))) Like "*,,,^-^,,,*" Then Exit Sub '<< |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
c_hwnd& = GetTopParentH(t_h&): 'top_h&
'dbgl "+1.1": 'Exift Sub
If light_mode Then GoTo lightL1
If Not os10 Then
Rem "|fffd||fffd||fffd||fffd|" Btn (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If getWndCaption(t_h&) = "|fffd||fffd||fffd||fffd|" Then
              upBar = False: If DDBarUsed Then upBar = DDBar.isUpper '|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
       If Not upBar Then WinTBswitcher: If DDM.useTB And c_useOnTime Then Schedule 15, "WinTBswitcher_AH" 'c |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|.<ALT+WIN> |fffd||fffd| SCS)
    Exit Sub: End If: End If
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If FnFormIsLoaded("FindForm") Then FindForm.SensorFullSize False: 'db_ getwndcaption(t_h&)
    If SCForm.frlncFlg Then If DDM.On Then If SCForm.dd_placed <> between(tPT.x, DDM.Left, DDM.Right) Then SCForm.reDraw Not SCForm.dd_placed
    If getWndCaption(t_h&) = "Yea Chess v4.77" Or getWndCaption(c_hwnd&) Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*" Then
        If Not FnFormIsLoaded("ChessCaller") Then _
            If getWndCaption(t_h&) = "Yea Chess v4.77" Then ChessCaller.reDraw t_h& _
                                                       Else ChessCaller.reDraw c_hwnd&, , True '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (setWndCaption c_hwnd&, "Yea Chess(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
              'If Not FnFormIsLoaded("ChessCaller") Then ChessCaller.reDraw t_h& '+ |fffd||fffd||fffd||fffd||fffd||fffd| App
    Exit Sub: End If
lightL1:
'dbgl "+1.2": 'Exift Sub
    If c_hwnd& = me_hwnd Then Exit Sub 'inVals(c_hwnd&, SCSForm.t_hwnd, me_hwnd)
'dbgl "+1.21": 'Exift Sub
    If c_hwnd& = SCSForm.t_hwnd And Not Doppel Then If Workbooks("MAIN.XLSB").ActiveSheet.name = "Dispetcher_" Then Exit Sub _
                                               Else If c_hwnd& = last_active_hwnd& Then Exit Sub _
                                               Else Do_smart_freezing c_hwnd&: Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| PDB (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd| CustomTransparency
'dbgl "+1.22": 'Exift Sub
    If Doppel And c_hwnd& = last_active_hwnd& Then Exit Sub
'dbgl "+1.23": 'Exift Sub
    If Not (dispValidCaption(c_hwnd&) Or c_hwnd& = SCSForm.t_hwnd& And Doppel) Then Exit Sub
'dbgl "+1.24": 'Exift Sub
'STOP os10 ----------------------------------------------------------> |fffd||fffd||fffd||fffd||fffd|
    If c_hwnd& <> t_hwnd& Then t_change_flg = True: t_hwnd& = c_hwnd& _
                          Else If smart_freezing_by_mouse Then If c_hwnd& <> last_active_hwnd& Then Do_smart_freezing c_hwnd& '|fffd||fffd||fffd| PDB
'dbgl "+1.25": 'Exift Sub
If light_mode Then GoTo lightL
'dbgl "+1.3":  'Exift Sub
    Call srvProc100Fix '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| %CPU
'dbgl "+1.4":  'Exift Sub
    If Not c_useOnTime Then If DateDiff("n", last_PF_Set_saving, Now) > 1 Then PF_Set_saving: last_PF_Set_saving = Now: 'db_ "PF_Set_saving"
Rem: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim topFlg As Boolean: topFlg = IsTopMostWindow(t_hwnd&)
    If t_change_flg Then
        If topFlg Then
              If Image17.tag <> "Top" Then Image17.Picture = Icons("pin"): Image17.tag = "Top"
        Else: If Image17.tag = "Top" Then Image17.Picture = Icons("line2"): Image17.tag = ""
        End If: End If
    If topFlg Then SetForegroundWindow me_hwnd& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TopMost |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TM-|fffd||fffd||fffd||fffd| satellite |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| background)
    'If Not getWndCaption(c_hwnd&) Like "^*" Then SetForegroundWindow me_hwnd& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|V |fffd| taskbar)
    If t_hwnd& <> last_active_hwnd& Then 'feature: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If FnFormIsLoaded("JOTCaller") Then
            If JOTCaller.showedFlg Then JOTCaller.showedFlg = False: SCSForm.setWindowVisible JOTCaller.t_hwnd&, False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| JOT
        End If
        If FnFormIsLoaded("ChessCaller") Then
          With ChessCaller: If .showedFlg And Not .menuFlg Then .showedFlg = False: SCSForm.setWindowVisible .t_hwnd&, False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Chess
                            If .back_hwnd& > 0 And Not .menuFlg Then SCSForm.setWindowVisible .back_hwnd&, False
        End With: End If: End If
    Dim matrixFlg As Boolean '|fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If DDBarUsed Then matrixFlg = DDBar.isMatrix: If DDBar.HasItem(t_hwnd&) Then DDBar.delItem t_hwnd& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| n++ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|...
    If FnFormIsLoaded("FindForm") Then 'Not SCSForm.LFixed And 'And Not (DDM.num = 1 And Not DDM.On)
        If CBool(vitrage_Key(t_hwnd&)) Then GoTo lightL '(|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
        If IsWindow(SCSForm.r_hwnd) = 0 Then If getWndCaption(GetParent&(t_h&)) = "ShellView" Then ParkingImageClick 2: GoTo lightL '-> r (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If IsWindow(SCSForm.bl_hwnd) = 0 Then If (IsWindow(SCSForm.r_hwnd) <> 0 And IsWindow(SCSForm.http_hwnd) <> 0) Then ParkingImageClick 3: GoTo lightL '-> bl
        If DDM.num > 1 And (IsWindow(SCSForm.http_hwnd) = 0 Or IsWindow(SCSForm.r_hwnd) = 0) _
            And SCSForm.bl_hwnd <> 0 And SCSForm.br_hwnd = 0 Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -> r_hwnd/DD (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                exceptFlg = getWndCaption(t_hwnd&) = "TRAINER" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If IsWindow(SCSForm.r_hwnd) <> 0 And Not matrixFlg Then
                    If FindForm.ImageW1.SpecialEffect <> 6 Then _
                        If Not exceptFlg Then _
                                      If dispValidCaption(t_hwnd&) Then DDBar.PutOn t_hwnd&, 1, True, True 'ParkingImageClick 1 '-> http
'                ElseIf FindForm.ImageW2.SpecialEffect <> 6 Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DblClick
'                        If IsWindow(SCSForm.http_hwnd) <> 0 Then If Not exceptFlg Then _
'                                      If dispValidCaption(t_hwnd&) Then ParkingImageClick 2 '-> r  '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|...
        End If: End If: End If
lightL: Dim rt As rect: GetWindowRect t_hwnd, rt: PTchanged = rt.Top <> lPT.Y Or lPT.x <> rt.Right
        If light_mode Then GoTo justPosL1
    If FnFormIsVisible("DDBar") And Not matrixFlg And SCSForm.WildW& = 0 Then 'DDBar.topMost vitrage_Key&(t_hwnd&) <> 0
      If rt.Right > DDM.Left + 10 And rt.Left < DDM.Left - 10 Or _
         rt.Right > DDM.Right + 10 And rt.Left < DDM.Right - 10 Or _
         rt.Right < DDM.Right + 10 And rt.Left > DDM.Left - 10 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl+2)
        If vitrage_Key&(t_hwnd&) = 0 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 5-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           'dbg_ t_hwnd, GetTopParentH(GetActiveWindow), getWndCaption(GetTopParentH(GetActiveWindow)) & Chr(10), _
                        GetTopParentH(GetForegroundWindow&), getWndCaption(GetTopParentH(GetForegroundWindow&)) & Chr(10)
           'If t_hwnd = GetTopParentH(GetForegroundWindow&) Then
            If rt.Bottom > DDM.Bottom + 10 Or rt.Top + 10 < DDM.Top Or rt.Right > DDM.Right + 20 Then If Not DDBar.isMatrix Then SCSForm.SetRT "5", t_hwnd
        ElseIf getWindowState(t_hwnd) = SW_MAXIMIZE& And Not SCSForm.LFixed Then
              If Not DDBar.isHidden Then DDBar.HideBar '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar.RightClick (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        ElseIf rt.Bottom > DDM.Bottom + 10 Or rt.Top + 10 < DDM.Top Or rt.Right > DDM.Right + 20 Then If Not DDBar.isMatrix Then SCSForm.SetRT "5", t_hwnd '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If
      ElseIf SCSForm.LFixed Or DDM.num = 1 Then If Not DDBar.isHidden Then If DDBar.DDMatrixFrom = 0 Then _
        If between(rt.Left, -10, ScLt - 10) Or rt.Right > ScRt + 10 And rt.Left < ScRt - 10 Or _
                   rt.Left > -10 And rt.Bottom > ScBm + 10 Then SCSForm.SetRT IIf(DDM.num = 1, "-1", "2"), t_hwnd '|fffd| LFixed |fffd||fffd| 2-|fffd| |fffd||fffd||fffd||fffd||fffd|
      End If: ElseIf matrixFlg Then If DDBar.myRt$ = "1m2" Then _
                  If rt.Right > DDM.Left + 10 And rt.Top < DDM.Heigth / 2 - 20 Then SCSForm.SetRT "2m2", t_hwnd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| half-Matrix
      End If
justPosL1:      'das t_hwnd& = 987816 And Not DDBar.isHidden
'dbgl "+2": 'Exift Sub
    If Not stateOk Then Me.HideMe: Exit Sub
    'If justPos Then If PTchanged Then GoTo justPosL2 Else Exit Sub
    If justPos Then GetWindowRect t_hwnd, rt: GoTo justPosL2 Else If Not (PTchanged Or t_change_flg) Then Exit Sub
    If t_change_flg Or PTchanged Then           'something changed
        If getWindowState(t_hwnd) = SW_MAXIMIZE& Or SCSForm.Fitted(t_hwnd) Then
          If Not maxiFlg Then maxiFlg = True: Image19.Picture = Icons("full_Oo") ': Me.Repaint
              top_shift = 3.5: left_shift = -5
        Else: top_shift = -1:  left_shift = -2
          maxiFlg = False: Image19.Picture = Icons("full_" & _
                                IIf(t_hwnd = IIf(SCForm.dd_placed, SCSForm.bl_hwnd, zero(SCSForm.br_hwnd, SCSForm.bl_hwnd)), "OX", "O")) ': Me.Repaint
    End If: t_Doppel = Me.t_hwnd = SCSForm.t_hwnd
            Image16.Visible = Not t_Doppel: Image21.Visible = Not t_Doppel: Image22.Visible = Not t_Doppel: _
            Image23.Visible = Not t_Doppel: Image24.Visible = Not t_Doppel: Image25.Visible = Not t_Doppel '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
         If t_Doppel Then Image15.Visible = False: Image19.Visible = False '<FullScreen> |fffd| <X> |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DDBar
        ' Image15.Visible = Image15.Visible And Not Doppel: Image19.Visible = Not Doppel '<FullScreen> |fffd| <X> |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DDBar
    End If                              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If PTchanged Then
justPosL2:
'dbgl "+3": 'Exift Sub
If os10 Then If getWndCaption(hWnd&) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then top_shift = top_shift - 52 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| W10: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ribbon
Me.Left = rt.Right * x75 - Me.Width + left_shift: Me.Top = rt.Top * x75 + top_shift: _
  lPT.x = rt.Right: lPT.Y = rt.Top: End If 'Me.Repaint
'dbgl "+3.1": 'Exift Sub
    If justPos Then Exit Sub Else If Not SCForm.frlncFlg Then SCForm.start_freelance '( |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| )Image15.Visible = Not SCForm.frlncFlg
'dbgl "+3.2": 'Exift Sub
    If PTchanged Or t_change_flg Or (lrb_flg And Image15.Visible) Then reButton t_change_flg, Doppel: Me.Repaint
'dbgl "+3.3": 'Exift Sub
'STOP os10
    If smart_freezing_by_mouse Then If t_change_flg Then Do_smart_freezing t_hwnd& '+ |fffd||fffd||fffd||fffd||fffd| "smart_freezing |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'dbgl "+4": 'Exift Sub
End Sub
Private Function stateOk() As Boolean: i% = getWindowState%(t_hwnd)
                 stateOk = i% = SW_RESTORE& Or i% = SW_MAXIMIZE&: End Function

'---------------------------------------------------------------------------------------------
'SUBRoutines
Private Sub reDraw(): Dim hrgn1&, hrgn2&
    For Each ctrl In Me.Controls: With ctrl '|fffd||fffd||fffd||fffd||fffd|
    If .Visible Then
      hrgn2& = CreateRectRgn(3 + (IIf(.Parent.name <> "satellite", .Parent.Left + 1.5, 0) + .Left) / x75, _
                             3 + (IIf(.Parent.name <> "satellite", .Parent.Top + 1.2, 0) + .Top) / x75, _
                             3 + (IIf(.Parent.name <> "satellite", .Parent.Left + 1.5, 0) + .Left + .Width) / x75, _
                             3 + (IIf(.Parent.name <> "satellite", .Parent.Top + 1.5, 0) + .Top + .Height) / x75):
      If .name = "Image21" And SCSForm.d_http_hwnd <> 0 Then
        If t_hwnd = SCSForm.http_hwnd Or t_hwnd = SCSForm.d_http_hwnd Then Call CombineRgn(hrgn2&, hrgn2&, _
                    CreateEllipticRgn&(80, (.Top - Me.Height / 2) / x75 + 25, 220, IIf(t_hwnd = SCSForm.http_hwnd, 250, 220)), _
                                                                                    IIf(t_hwnd = SCSForm.http_hwnd, 4, 1)) ': SetWindowRgn t_hwnd, hrgn2&, True:
      End If                        '(.Left - Me.Width / 2) / x75,  (.Top - Me.Height / 2) / x75
      If hrgn1& = 0 Then hrgn1& = hrgn2& Else Call CombineRgn(hrgn1&, hrgn1&, hrgn2&, 2)
    End If: End With: Next
    If hrgn1& = 0 Then hrgn1& = CreateRectRgn(0, 0, 0, 0) '|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| rgn, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd|
    hWnd& = FindWindow(vbNullString, Me.Caption$): SetWindowRgn hWnd&, hrgn1&, True: 'FrameP.Repaint:
End Sub

Public Sub reButton(Optional t_change_flg As Boolean, Optional Doppel): If IsMissing(Doppel) Then Doppel = False
                                                   Dim need_reDraw As Boolean: If Not Doppel Then Image15.Visible = True
With SCSForm: lrb_flg = False '|fffd||fffd||fffd||fffd| .inColl - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| X - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Rem: |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Office 2013 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| X |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| X |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| x - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
lrb_flg = t_hwnd = IIf(SCForm.dd_placed, .bl_hwnd, zero(.br_hwnd, .bl_hwnd))
If getWndCaption(t_hwnd) Like "* - Excel" Then Image15.Visible = False: Image17.Visible = False: Image19.Visible = lrb_flg And Not Doppel: Image20.Visible = False: reDraw: GoTo psL Else _
                                            If Image17.Visible = False Then Image17.Visible = True: need_reDraw = True
If .inCollection(t_hwnd) Then Image19.Visible = True: Image20.Visible = True: Image15.Visible = Not lrb_flg: need_reDraw = True: 'GoTo psL '|fffd||fffd||fffd| _X_ (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SCForm.freelance)
If Image20.Visible <> sag(header, Not hasHeader(t_hwnd)) Then Image15.Visible = Image15.Visible And Not lrb_flg: Image19.Visible = header And Not Doppel: Image20.Visible = header: need_reDraw = True _
                                                         Else If t_change_flg Then Image15.Visible = Image15.Visible And Not lrb_flg: need_reDraw = True '[header And] Not lrb_flg - |fffd||fffd||fffd||fffd||fffd||fffd| X
psL: If Not SCSForm.LFixed Then If t_hwnd& = .http_hwnd Or t_hwnd& = .d_http_hwnd Then Image21.Picture = Icons("secstant"): GoTo exitL
If Image21.tag Then Image21.Picture = Icons(IIf(.Fitted(t_hwnd), "0000", "----")): GoTo exitL
If t_change_flg Then If sag(i%, SCSForm.inCollection(t_hwnd&)) > 0 _
                Then Image21.Picture = Icons(decode(i%, 1, "w_R|fffd||fffd||fffd|", 2, "w_|fffd|G|fffd||fffd|", 3, "w_|fffd||fffd|B|fffd|", 4, "w_|fffd||fffd||fffd|Y", 5, "w_|fffd||fffd||fffd||fffd|")) _
                Else Image21.Picture = Icons(decode(FindForm.nxt_pos, 1, "R|fffd||fffd||fffd|", 2, "|fffd|G|fffd||fffd|", 3, "|fffd||fffd|B|fffd|", 4, "|fffd||fffd||fffd|Y", 5, "|fffd||fffd||fffd||fffd|"))
exitL: If need_reDraw Then reDraw '1 |fffd||fffd||fffd|
End With: Me.Repaint: End Sub

Private Sub UserForm_Terminate(): If c_useTimer Then on_timess_flg = False: smart_freezing = False: KillTimer me_hwnd&, me_hwnd&: App_clean:
                                  Set Icons = Nothing: End Sub
Attribute VB_Name = "scaffold"
Attribute VB_Base = "0{617BA330-70B4-44C4-A0BD-114DA03C7DD1}{20E5A8EA-B0F2-4542-A844-0874552A3ADB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public me_hwnd&, t_hwnd&

Public Sub reDraw(Optional t_h&): If t_hwnd& = 0 Then If t_h& = 0 Then Msg "No Target!": Exit Sub
    t_hwnd& = t_h&: me_hwnd& = FindWindow(vbNullString, Me.Caption$): setNoHeadersH me_hwnd&, False
                    SetTransparent me_hwnd&, SCSForm.s_freez: 'SetTopMostWindow& me_hwnd&, True
   End Sub

Attribute VB_Name = "settingsForm"
Attribute VB_Base = "0{79B987D0-023D-40BC-BCBA-ED62ACCD88B9}{A0A518E9-E80B-4540-9CBE-4BCE9541FA79}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cbQuit_Click() 'Hide
  Me.Hide
End Sub

Private Sub CheckBox10_Click()
  If CheckBox10 Then LockWBif Else unlockWB
End Sub
Rem: GoldenTheme
Private Sub CheckBox17_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
setGoldenTheme CheckBox17.value: End Sub
Rem: DDsplitByType
Private Sub CheckBox18_Click(): If FnFormIsLoaded("DDBar") Then If DDBar.isMatrix Then DDBar.reBuild True
    End Sub
Rem: DDsplitCompact
Private Sub CheckBox19_Click(): If FnFormIsLoaded("DDBar") Then If DDBar.isMatrix Then DDBar.reBuild True
    End Sub
Rem: fullsizedImages - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Matrix
Private Sub CheckBox20_Click(): If Not FnFormIsLoaded("DDBar") Then Exit Sub
              With DDBar: If .isMatrix Or Not CheckBox20.value Then Exit Sub 'small->large, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        For Each ctrl In .Controls: If IsNumeric(ctrl.name) Then _
                        Set ctrl.Picture = LoadPicture(ThisWorkbook.path & "\temporal\Preview\" & ctrl.name & ".dib")
                            Next ctrl: End With: End Sub
Private Sub CheckBox21_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                    useFRAMES = Not CheckBox21.value: End Sub
Private Sub CheckBox22_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): If FnFormIsLoaded("FindForm") Then Unload FindForm
                    useDnD = Not CheckBox22.value: c_useDnD = useDnD And on_timess_flg: End Sub
Private Sub CheckBox23_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                    useMETA = Not CheckBox23.value: End Sub
Private Sub CheckBox24_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                    useMultiTree = Not Me.CheckBox24.value: End Sub
Private Sub CheckBox25_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                    c_useTimer = Not Me.CheckBox25.value: End Sub
Private Sub CheckBox26_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                    os10 = Not Me.CheckBox26.value: End Sub
Private Sub CheckBox27_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
                    compRollUp = Not Me.CheckBox27.value: End Sub

Private Sub cbUseDDisp_Click()
dDispShift.Enabled = cbUseDDisp: Label5.Enabled = cbUseDDisp: SpinButton2.Enabled = cbUseDDisp: DDM.num = IIf(cbUseDDisp, GetSystemMetrics(SM_CMONITORS), 1) 'DDMini DDM?
End Sub

Private Sub SpinButton2_SpinUp(): dDispShift = dDispShift + 1: End Sub
Private Sub SpinButton2_SpinDown(): dDispShift = dDispShift - 1: End Sub

Private Sub UserForm_Initialize():  LoadSettings: End Sub 'Loading
Private Sub CommandButton1_Click(): SaveSettings: End Sub 'Saving
Private Sub UserForm_Terminate(): If CheckSettings Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbYes Then Call CommandButton1_Click
End Sub

Private Sub CBnavigator_Click()
If CBnavigator.value Then
  If obAuto.value Then For i = 1 To 3: Call GroupRows(i): Next i
Else: For i = 1 To 3: Call UnGroupRows(i): Next i
End If
obAuto.Enabled = CBnavigator.value
obManual.Enabled = CBnavigator.value
End Sub

Private Sub obAuto_Click()
  For i = 1 To 3: Call GroupRows(i): Next i
End Sub

Private Sub SpinButton1_SpinUp(): tbXvalue = tbXvalue + 1: End Sub
Private Sub SpinButton1_SpinDown(): If tbXvalue Then tbXvalue = tbXvalue - 1
End Sub






Attribute VB_Name = "srv_API_common"
'***********
'Transparent
'***********
'Const TSM = 0.1, TSD = 150 'TRAIN
Const TSM = 1#, TSD = 220   'MAIN
Const App_trans_step = 0.7 * 20  'co mment * for not fast PC
Const Form_trans_step = 3.5 * 20 'comment * for not fast PC or 'TRAIN

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Sub ShowDesktopW(show As Boolean): If Not FnFormIsLoaded("SCSForm") Then Exit Sub 'ShowWindow& 66072, IIf(show, SW_SHOW&, SW_HIDE&): End Sub
'If show Then SetWindowRgn& WindowFromPoint(ScLt, 0), CreateEllipticRgn(0, 0, 0, 0), True _
'        Else SetWindowRgn& WindowFromPoint(ScLt, 0), CreateRectRgn&(ScLt - 1, -1, ScLt + 1, 1), True ' = |fffd||fffd||fffd||fffd||fffd||fffd| wallpapers-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
hWnd& = GetFolderViewHwnd&
'If show Then
'      hwnd& = blank(LoadParam("DeskTop2"), 0): If IsWindow(hwnd&) = 0 Then SaveParam "DeskTop2", 0: Exit Sub 'old
'Else: hwnd& = WindowFromPoint(ScLt + 1, 1): If hwnd& = GetDesktopWindow& Then Exit Sub _
'                                   Else: If GetTopParentH(hwnd&) = SCSForm.t_hwnd Then Exit Sub '(DeskTop2 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'      SaveParam "DeskTop2", hwnd&: End If
ShowWindow& hWnd&, IIf(show, SW_SHOW&, SW_HIDE&): End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd| API
'*******************************************************************************
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'*******************************************************************************
Sub showApp()
wcaption = Application.Caption
Application.Visible = True: TransStartM TSM, 200
'Application.DisplayFullScreen = True
'    Dim HWND_TOPMOST, SWP_SHOWWINDOW
'    SetWindowPos hwnd, HWND_TOPMOST, 100, 100, 0, 0, 0
End Sub

Sub TransStart(): Call TransStartM(TSM, TSD): End Sub
Sub TransStartM(M, deep, Optional wwCaption): TransM M, deep, wwCaption, 1: End Sub
Sub TransExit(): Call TransExitM(TSM, TSD): End Sub
Sub TransExitM(M, deep, Optional wwCaption): TransM M, deep, wwCaption, -1: End Sub
Sub TransM(M, deep, Optional wwCaption, Optional direction%): If IsMissing(wwCaption) Then wwCaption = wcaption 'global var.
                                              If direction% = -1 Then GoTo fadeL '1-showing; 0-blinking; -1-fading
    hWnd = FindWindow(vbNullString, wwCaption)
    aStyle = GetWindowLong(hWnd, GWL_EXSTYLE)
    aStyle = aStyle Or WS_EX_LAYERED
    Call SetWindowLong(hWnd, GWL_EXSTYLE, aStyle)
    'If hWnd <> 0 And wwCaption <> Application.caption Then
    '    For i = 0 To 6
    '        Call RemoveMenu(GetSystemMenu(hWnd, 0&), 0&, MF_BYPOSITION)
    '    Next
    'End If
    If wwCaption = Application.Caption Then s = App_trans_step Else s = Form_trans_step
Rem: Customization
    'If wCaption = SCForm.Caption Then M = M / 10
    For i = 0 To deep Step s * M
        Call SetLayeredWindowAttributes(hWnd, 0, i, LWA_ALPHA)
        f_ind = getFormIndex(wwCaption): If f_ind > 0 Then UserForms(f_ind).Repaint
    Next i: If direction% = 1 Then Exit Sub
fadeL: For i = deep To 0 Step -s * M
        Call SetLayeredWindowAttributes(hWnd, 0, i, LWA_ALPHA)
        f_ind = getFormIndex(wwCaption): If f_ind > 0 Then UserForms(f_ind).Repaint
    Next i
End Sub

Sub set_Transparent()
'|fffd||fffd||fffd||fffd|
' Call TransExit: Exit Sub
'|fffd||fffd||fffd|
    Call TransEnab
    If wcaption = Application.Caption Then Schedule 1, "TransStart" _
                                      Else Schedule 0, "TransStart"
End Sub
'<-test*******************************************************************************

Rem: abridgements
'*********************************************************************
Public Sub Msg(M, Optional c_quietMode As Boolean): If c_quietMode Then dbg M: Exit Sub
  SetFocus& FindWindow(vbNullString, Application.Caption): MsgBox M: End Sub
Attribute VB_Name = "srv_Advanced_parsing"
'Option Explicit

Rem:===============
Rem: Advanced parsing
Rem:====================================================

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (address_item = 1,2,3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) _
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "Sheet:Row:Column"
Function FnGetCellAddress&(address_string, address_item)
Dim pos1%: pos1 = InStr(1, address_string, ":")
Dim pos2%: pos2 = InStr(pos1 + 1, address_string, ":"): If pos2 = 0 Then pos2 = Len(address_string) + 1
Select Case address_item
       Case 1: FnGetCellAddress = CStr(Left$(address_string, pos1 - 1))
       Case 2: FnGetCellAddress = CStr(Mid$(address_string, pos1 + 1, pos2 - pos1 - 1))
       Case 3: FnGetCellAddress = CStr(Right$(address_string, Len(address_string) - pos2))
End Select: FnGetCellAddress = LTrim(FnGetCellAddress): End Function
'****************************************************

Attribute VB_Name = "srv_Analysis_services"
'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (HyperForm)
'****************************************************
'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'****************************************************
Sub GroupAnalysis(N_roots, N_groups, N_sub, N_pseudo, N_free, N_depend, InitForUse)
Call NoSup: N_roots = 0: N_groups = 0: N_sub = 0: N_pseudo = 0: N_free = 0: N_depend = 0
term_num = FnGetLastRow(1)
pro_num = 0
If InitForUse Then
  StatForm.Hide
  StatForm.show vbModeless
  StatForm.Repaint
  PF.setMode "p10" 'PF.show vbModeless
  'PF.caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  For i = 2 To term_num '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Call ShowProgressBar(i / term_num, False)
    If Right$(Sheets(WS1).Cells(i, 2), 1) <> "." Then
      If CBool(FnGroupIsNotEmpty(1, Sheets(WS1).Cells(i, 1), True, False, 0)) Then
        If Not FnIsRoot(Sheets(WS1).Cells(i, 1)) Then _
          Call SwitchKey(Sheets(WS1).Cells(i, 1), True, True)
        pro_num = pro_num + 1
      ElseIf FnIsRoot(Sheets(WS1).Cells(i, 1)) Then _
        Call SwitchKey(Sheets(WS1).Cells(i, 1), False, True)
      End If
    End If
  Next i: PF.setModeActual 'Unload PF
Else
  For i = 2 To term_num
    If FnIsRoot(Sheets(WS1).Cells(i, 1)) Then pro_num = pro_num + 1
  Next i
End If
pro_step = Int(pro_num / 20)
If pro_step = 0 Then pro_step = 1 '/ by zero
For i = 2 To term_num
  If FnIsRoot(Sheets(WS1).Cells(i, 1)) Then
    N_roots = N_roots + 1
    If FnIsMAINGroup(Sheets(WS1).Cells(i, 1)) Then _
        N_groups = N_groups + 1
    If FnIsSubGroup(Sheets(WS1).Cells(i, 1)) Then _
        N_sub = N_sub + 1
    If FnIsPseudoGroup(Sheets(WS1).Cells(i, 1)) Then _
        N_pseudo = N_pseudo + 1
    If InitForUse Then
'        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'        new_zone$ = ""
'        Call setOutlineShowLevel(3)
'        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'        Set C = Sheets(WS1).Cells(i, 2)
'        previous_row = C.row - 1
'        While (Not C Is Nothing)
'          If previous_row < C.row And C.Column = 2 Then
'            previous_row = C.row
'            Set C = Sheets(WS1).Cells.find(What:=Sheets(WS1).Cells(i, 2) _
'                               + ".", After:=Sheets(WS1).Cells(C.row, C.Column), _
'                               LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _
'                               SearchDirection:=xlNext, MatchCase:=False)
'            If (Not C Is Nothing) Then
'              If previous_row < C.row And C.Column = 2 Then _
'                new_zone = FnZoneMerging(new_zone, Sheets(WS1).Cells(C.row, 5))
'            End If
'          Else: Set C = Nothing
'          End If
'        Wend
'        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'        Set C = Sheets(WS1).Cells(i, 2)
'        previous_row = C.row - 1
'        While (Not C Is Nothing)
'          If previous_row < C.row And C.Column = 2 Then
'            previous_row = C.row
'            Set C = Sheets(WS1).Cells.find(What:=Sheets(WS1).Cells(i, 2) _
'                               + "_", After:=Sheets(WS1).Cells(C.row, C.Column), _
'                               LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByColumns, _
'                               SearchDirection:=xlNext, MatchCase:=False)
'Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'            If (Not C Is Nothing) Then
'              If previous_row < C.row And C.Column = 2 Then _
'                new_zone = FnZoneMerging(new_zone, Sheets(WS1).Cells(C.row, 5))
'            End If
'          Else: Set C = Nothing
'          End If
'        Wend
'        Call unlockWB: Sheets(WS1).Cells(i, 5).value = new_zone
'        For j = 0 To 3
'          If j <> 1 Then
'            If FnFarCell(j, Sheets(WS1).Cells(i, 1), far_row, far_WS) Then
'                  Sheets(far_WS).Cells(far_row, 5).value = new_zone
'              ElseIf j <> 0 Then Call ErrorReport("ID |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " + FnWSCase(j), 1, i, 1)
'            End If
'          End If
'        Next j
        Call setOutlineShowLevel(1)
    End If
    Call ShowProgress(N_roots / pro_step)
  ElseIf Sheets(WS1).Cells(i, 2).Font.ColorIndex = inv(15) Then _
        N_depend = N_depend + 1
  Else: N_free = N_free + 1
  End If
Next i
Call HideProgress
Set c = Nothing: Call SUp
End Sub

'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************
Function FnCategoryRecordsNum(category) As Integer
  i = 2
  found_terms = 0
  While Sheets(WS1).Cells(i, 1) <> ""
    If Sheets(WS1).Cells(i, 5) <> "" Then
      term_cat = Sheets(WS1).Cells(i, 5)
      If term_cat Like ("*" + category + "*") Then found_terms = found_terms + 1
    End If
    i = i + 1
  Wend
  FnCategoryRecordsNum = found_terms
End Function


'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'* |fffd||fffd||fffd||fffd| ID-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| General
'****************************************************
Sub HyperIDValidate(links_count)

  links_count = 0
  rnum = FnGetLastRow(1)
  pro_step = Int(rnum / 20)
  If pro_step = 0 Then pro_step = 1 '/ by zero
  general_type = False
  For i = 2 To rnum
    If Sheets(WS2).Cells(i, 1).Hyperlinks.Count Then
      general_type = (Sheets(WS1).Cells(i, 1).Font.ColorIndex = inv(5)) 'blue
      Dim target_id As String
      target_id = Right(Sheets(WS1).Cells(i, 1).Hyperlinks(1).SubAddress, _
                  Len(Sheets(WS1).Cells(i, 1).Hyperlinks(1).SubAddress) - 3)
      If general_type Then
        If Not FnFarCell(0, target_id, far_row, far_WS) Then
          Call ErrorReport("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| General.", 1, i, 1)
        Else
          For j = 1 To 3
           If Sheets(far_WS).Cells(far_row, j + 1).Hyperlinks(1).SubAddress <> "_" + CStr(j) _
              + "_" + target_id Then Call ErrorReport("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.", 0, far_row, j + 1)
          Next j
        End If
      End If
      For j = 1 To 3
        If Not FnFarCell(j, target_id, far_row, far_WS) Then
          Call ErrorReport("ID " & target_id & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " + FnWSCase(j), 1, i, 1)
        ElseIf Right(Sheets(far_WS).Cells(far_row, 1).Hyperlinks(1).SubAddress, _
               Len(Sheets(far_WS).Cells(far_row, 1).Hyperlinks(1).SubAddress) - 3) <> _
               target_id Then
          Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID.", j, far_row, 1)
        End If
      Next j
      links_count = links_count + 1
      Call ShowProgress(i / pro_step)
    Else: Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.", 1, i, 1)
    End If
  Next i
  Call HideProgress
End Sub

'+++++++++++++++++++++++++++++++++++++++++++++++
Sub HyperActivator()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID.", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'MsgBox Right(ActiveCell.Hyperlinks(1).SubAddress, Len(ActiveCell.Hyperlinks(1).SubAddress) - 3)
For ws = 2 To 4
Sheets(ws).Activate
For i = 2 To ActiveSheet.UsedRange.rows.Count
    Cells(i, 1).Hyperlinks(1).Follow NewWindow:=False, _
                                    AddHistory:=False
    Sheets(ws).Activate
Next i
Next ws
'Links'
Sheets("Links").Activate
For i = 2 To ActiveSheet.UsedRange.rows.Count
   For j = 2 To 4
    Cells(i, j).Hyperlinks(1).Follow NewWindow:=False, _
                                    AddHistory:=False
    Sheets("Links").Activate
   Next j
Next i
End Sub


'****************************************************
'* |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************
Sub HyperDefValidate(links_count)
  pro_num = 0
  rnum = FnGetLastRow(1)
  For i = 2 To rnum
    If Sheets(WS1).Cells(i, 4).Hyperlinks.Count Then pro_num = pro_num + 1
  Next i
  pro_step = Int(pro_num / 20)
  If pro_step = 0 Then pro_step = 1 '/ by zero
  links_count = pro_num
  pro_num = 0
  For i = 2 To rnum
    If Sheets(WS1).Cells(i, 4).Hyperlinks.Count Then
      Dim tested_id As String
      Dim target_id As String
      tested_id = Sheets(WS1).Cells(i, 1)
      target_id = Right(Sheets(WS1).Cells(i, 4).Hyperlinks(1).SubAddress, _
                        Len(Sheets(WS1).Cells(i, 4).Hyperlinks(1).SubAddress) - 3)
      Call SetDefHyper(tested_id, target_id, False)
      pro_num = pro_num + 1
      Call ShowProgress(pro_num / pro_step)
    End If
  Next i
  Call HideProgress
End Sub


'****************************************************
'* |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| WSA
'****************************************************
Sub HyperAbbrevValidate(links_count)
    rnum = FnGetLastRow(4)
    pro_num = 0
    For j = 2 To rnum
      If Sheets(WSA).Cells(j, 3).Hyperlinks.Count Then pro_num = pro_num + 1
    Next j
    pro_step = Int(pro_num / 20)
    If pro_step = 0 Then pro_step = 1 '/ by zero
    links_count = pro_num
    pro_num = 0
    For j = 2 To rnum
      If Sheets(WSA).Cells(j, 3).Hyperlinks.Count Then
        Dim target_id As String
        target_id = Right(Sheets(WSA).Cells(j, 3).Hyperlinks(1).SubAddress, _
                    Len(Sheets(WSA).Cells(j, 3).Hyperlinks(1).SubAddress) - 3)
        For i = 1 To 3
         If Not exists(FnGetPrefix(i) + target_id) Then _
           Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", 4, j, i + 1)
        Next i
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        'Call FnFarCell(1, target_id, far_row, far_WS)
        'Sheets(WSA).Cells(j, 8).Value = Sheets(far_WS).Cells(far_row, 5)
        pro_num = pro_num + 1
        Call ShowProgress(pro_num / pro_step)
      End If
    Next j
    Call HideProgress
End Sub

Sub testsub_tmp()

End Sub
'****************************************************
'* |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************
'* cServ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - Gcnt
'****************************************************
Private Sub FindRecordWithoutBM(): WSim: With Sheets(wsLog)
For r = 2 To .UsedRange.rows.Count: id$ = .Cells(r, idcol)
    If .Index <> wsLog Then If (Not exists("_5_" & id$)) _
                            Or FnFarRow&(5, id$, , , True) = 0 Then MsgBox "There is no LOG for " & id$
    If .Index = wsLog Then If Not exists("_1_" & id$) _
                            Or FnFarRow&(1, id$, , , True) = 0 Then MsgBox "There is no En for " & id$
    If Not exists("_" & eru(.Index) & "_" & id$) _
       Then MsgBox "No BM at ws(" & .name & ") row(" & r & "): " & "_" & eru(wsEn) & "_" & id$
Next: MsgBox .UsedRange.rows.Count: End With: End Sub

Sub BMValidate(bookmarks_count, Optional CServ As Boolean)
Dim c_0&, c_1&, c_2&, c_3&, c_5&, c_other%, s_other$
      nCount = Workbooks("MAIN.XLSB").Names.Count
      Dim i&: pro_step = Int(nCount / 20)
      If pro_step = 0 Then pro_step = 1 '/ by zero
        For Each nm In Workbooks("MAIN.XLSB").Names
          If Mid(nm.name, 4) = "ID" Then GoTo passL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID
          If InStr(1, nm.RefersTo, "#") <> 0 Then _
            Call ErrorReport("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", -1, nm.name, nm.RefersTo): nm.Delete: dec nCount
          Call ShowProgress(inc(i&) / pro_step)
          If CServ Then                   'cServ ***
             Select Case Left(nm.name, 3): Case "_0_": inc c_0&: Case "_1_": inc c_1&: Case "_2_": inc c_2&
                                           Case "_3_": inc c_3&: Case "_5_": inc c_5&
                                           Case Else: inc c_other%: If prsCount("_", nm.name) > 1 Then s_other$ = s_other$ & " | " & nm.name
             End Select
             If Left(nm.name, 3) = "_1_" Then
               id$ = Mid(nm.name, 4): cnt% = prsCount("_", id$)
               If cnt% Then 'Sub
                 Root$ = FnGetRootID(id$)
                 If Not exists("_1_" & Root$) Then ErrorReport ("There is " & "_1_" & id$ & "  but no " & Root$ & " (lost root)") & " - Run srvPressID!"
                 n = prsAfter|fffd|(cnt%, "_", id$): If n > 1 Then If Not exists("_1_" & Root$ & "_" & n - 1) Then _
                                                   ErrorReport ("There is " & "_1_" & id$ & "  but no " & Root$ & "_" & n - 1) & " - Run srvPressID!"
             End If: If Not exists("_5_" & id$) Then ErrorReport ("There is no Log for " & id$) 'Log_
             End If
passL:   End If: Next nm
        If CServ Then                   'cServ ***
           If c_1& <> c_2& Then Call ErrorReport("dif_cnt En - Ru = " & c_1& - c_2&)  'Drags: |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           If c_1& <> c_3& Then Call ErrorReport("dif_cnt En - Ua = " & c_1& - c_3&)  '>> srv|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           If c_2& <> c_3& Then Call ErrorReport("dif_cnt Ru - Ua = " & c_2& - c_3&)
           r_0& = Sheets(wsGen).UsedRange.rows.Count - 1
           If c_0& <> r_0& Then Call ErrorReport("dif_cnt Gen(bm - row) = " & c_0& & " - " & r_0& & " = " & c_0& - r_0&)
           r_1& = Sheets(wsEn).UsedRange.rows.Count - 1  '170914 |fffd||fffd| 4-|fffd| ws |fffd||fffd||fffd||fffd| -2 (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| 2-|fffd| BM))
           If c_1& <> r_1& Then Call ErrorReport("dif_cnt En(bm - row) = " & c_1& & " - " & r_1& & " = " & c_1& - r_1&)
           r_2& = Sheets(wsRu).UsedRange.rows.Count - 1
           If c_2& <> r_2& Then Call ErrorReport("dif_cnt Ru(bm - row) = " & c_2& & " - " & r_2& & " = " & c_2& - r_2&)
           r_3& = Sheets(wsUa).UsedRange.rows.Count - 1
           If c_3& <> r_3& Then Call ErrorReport("dif_cnt Ua(bm - row) = " & c_3& & " - " & r_3& & " = " & c_3& - r_3&)
           r_5& = Sheets(wsLog).UsedRange.rows.Count - 1
           If c_5& <> r_5& Then Call ErrorReport("dif_cnt Log(bm - row) = " & c_5& & " - " & r_5& & " = " & c_5& - r_5&)
           If r_1& <> r_5& Then Call ErrorReport("dif_cnt En - Lng = " & r_1& - r_5&)
           s_report "cServ *** |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True:   ReportValue c_other% & IIf(c_other% > 33, vbTab & "Running test_bm...", "")
                                                                              If c_other% > 33 Then bm_cleaning '_
                                                     'If Application.VBE.MainWindow.Visible Then VBEprocedureSelect "test_bm"
           If Not (s_other$ Like "*_FilterDatabase" And prsCount("|", s_other$) = 1) _
              And Replace(s_other$, " | _4_ID", "") <> "" Then s_report "***Warning***", True: ReportValue s_other$ '"wsName_!_FilterDatabase" - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
           'PDB
           Set fso = CreateObject("Scripting.FileSystemObject")
           Set curfold = fso.getFolder(ThisWorkbook.path & "\PDB\")
           If Not curfold Is Nothing Then
              For Each sfol In curfold.SubFolders    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
                id$ = prsAfter|fffd|(prsCount("\", CStr(sfol.path)), "\", CStr(sfol.path))
                If id$ <> "_FileStorage_" Then _
                If Not exists("_1_" & id$) Then ErrorReport ("There is no ID for " & ThisWorkbook.path & "\PDB\" & id$)
              Next: Set curfold = Nothing
           Else: ErrorReport ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & ThisWorkbook.path & "\PDB\")
           End If: Set fso = Nothing
        End If
      bookmarks_count = nCount
      Call HideProgress
Set nms = Nothing
End Sub


Attribute VB_Name = "srv_DDMetrics"
Private reDMMflg As Boolean, TBpos$

'***********
'DDMetrics
'***********
                                                            '|fffd||fffd||fffd||fffd||fffd||fffd| WinTskBar-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Sub DDMini(DDM As DDMetrics, Optional ByVal forcedS, Optional TBact = False): ls ">", "DDMini": If IsMissing(forcedS) Then forcedS = DDM.forceSM '_
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|                                                                'Else: If DDM.Bottom <> 0 Then If forcedS = DDM.forceSM Then Exit Sub
Dim rt As rect: forceSM% = forcedS: Call GetWindowRect(GetDesktopWindow(), rt) '1024x1280
If IsWindow(DDM.TBhwnd) = 0 Then DDM.TBhwnd = GetTopParentH(FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|")) 'WinTskBar
          If DDM.TBhwnd = 0 Then DDM.TBhwnd = GetTopParentH(FindWindow(vbNullString, "Start"))
          If DDM.TBhwnd = 0 Then DDM.TBhwnd = GetTopParentH(GetFolderViewHwnd&("|fffd||fffd||fffd||fffd|")) 'os10 |fffd|.|fffd|. Win10
          If DDM.TBhwnd = 0 Then DDM.TBhwnd = GetTopParentH(GetFolderViewHwnd&("Start"))
Dim TBpos$, tbrt As rect: useTBprev = DDM.useTB: DDM.useTB = IsWindowVisible&(DDM.TBhwnd) > 0
If DDM.useTB Then
                    Call GetWindowRect(DDM.TBhwnd, tbrt)
                    If tbrt.Left < 0 Then '1
                      If tbrt.Left = DDM.Left And tbrt.Top = DDM.Top Then 'l|t
                        If tbrt.Bottom = DDM.Top + DDM.Heigth Then TBpos$ = "1l" Else TBpos$ = "1t"
                      Else 'r|b
                        If tbrt.Top = DDM.Top Then TBpos$ = "1r" Else TBpos$ = "1b"
                      End If
                    Else '2
                      If tbrt.Left = rt.Left And tbrt.Top = rt.Top Then 'l|t
                        If tbrt.Bottom = rt.Bottom Then TBpos$ = "2l" Else TBpos$ = "2t"
                      Else 'r|b
                        If tbrt.Top = rt.Top Then TBpos$ = "2r" Else TBpos$ = "2b"
                      End If
End If: End If:
If DDM.Heigth <> 0 Then If forcedS = DDM.forceSM Then _
                        If useTBprev = DDM.useTB Then If DDM.TBpos = TBpos$ Then Exit Sub 'Nothing to do
ls "~", "DDMini", forceSM%: DDM.Left = GetSystemMetrics(SM_XVIRTUALSCREEN): forceSM% = IIf(DDM.Left = 0, 2, forceSM%)
                  If DDM.Bottom = 0 Then '(1-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = by default)
                     DDM.num = IIf(settingsForm.cbUseDDisp, GetSystemMetrics(SM_CMONITORS), 1): 'DDM.useTB = True
                     If DDM.Left = 0 Then forceSM% = 2 Else If startUpFlg Then forceSM% = 1 Else forceSM% = LoadParam("DDM.forceSM") '|fffd||fffd||fffd| remind()
                  Else
                     If DDM.forceSM <> forceSM% Then SaveParam "DDM.forceSM", forceSM%
                  End If
'                  DDM.Shift = 0: DDM.TBhwnd = GetTopParentH(FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|")) '|fffd||fffd||fffd||fffd|/WinTaskBar, Shift - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (manual)
'                                 DDM.useTB = IsWindowVisible&(DDM.TBhwnd) > 0
                  DDM.Shift = 0: DDM.Heigth = GetSystemMetrics(SM_CYVIRTUALSCREEN): DDM.forceSM = forceSM%: DDM.On = forceSM% = 0 '0=1+2
                  DDM.Top = GetSystemMetrics(SM_YVIRTUALSCREEN): DDM.Right = 0 ' |fffd||fffd||fffd||fffd||fffd|
                  If DDM.useTB Then
                    'Dim TBpos$, tbrt As RECT: Call GetWindowRect(DDM.TBhwnd, tbrt)
                    '1|2 (left|right), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| <~> |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -1280>0(l):-57>0(t):1024-const(h):2646-const(w)
                    If tbrt.Left < 0 Then '1
'                      If tbrt.Left = DDM.Left And tbrt.Top = DDM.Top Then 'l|t
'                        If tbrt.Bottom = DDM.Top + DDM.Heigth Then TBpos$ = "1l" Else TBpos$ = "1t"
'                      Else 'r|b
'                        If tbrt.Top = DDM.Top Then TBpos$ = "1r" Else TBpos$ = "1b"
'                      End If
                      Select Case TBpos$
                             Case "1l": DDM.TBwidth = tbrt.Right - tbrt.Left: tb1l% = DDM.TBwidth
                             Case "1r": DDM.TBwidth = tbrt.Right - tbrt.Left: tb1r% = DDM.TBwidth
                             Case "1t": DDM.TBwidth = tbrt.Bottom - tbrt.Top: tb1t% = DDM.TBwidth
                             Case "1b": DDM.TBwidth = tbrt.Bottom - tbrt.Top: tb1b% = DDM.TBwidth
                      End Select
                    Else '2
'                      If tbrt.Left = rt.Left And tbrt.Top = rt.Top Then 'l|t
'                        If tbrt.Bottom = rt.Bottom Then TBpos$ = "2l" Else TBpos$ = "2t"
'                      Else 'r|b
'                        If tbrt.Top = rt.Top Then TBpos$ = "2r" Else TBpos$ = "2b"
'                      End If
                      Select Case TBpos$
                             Case "2l": DDM.TBwidth = tbrt.Right - tbrt.Left: tb2l% = DDM.TBwidth
                             Case "2r": DDM.TBwidth = tbrt.Right - tbrt.Left: tb2r% = DDM.TBwidth
                             Case "2t": DDM.TBwidth = tbrt.Bottom - tbrt.Top: tb2t% = DDM.TBwidth
                             Case "2b": DDM.TBwidth = tbrt.Bottom - tbrt.Top: tb2b% = DDM.TBwidth
                      End Select
                    End If
                  DDM.TBpos = TBpos$: End If
                  '|fffd||fffd||fffd| forceSM% = 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDM -> GetDesktopWindow() (|fffd| ResetScDDM |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| scr2 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  If DDM.useTB Then DDM.Left = DDM.Left + tb1l%: DDM.Right = DDM.Right - tb1r%: _
              tbc "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| < 0": DDM.Width = DDM.Left - tb1r% - tb1l%: DDM.Top = DDM.Top + tb1t%: _
                                    DDM.Heigth = DDM.Heigth - tb1t% - tb1b%
             DDM.Bottom = DDM.Top + DDM.Heigth: reDMMflg = True: ResetScDDM
If DDBarUsed Then
    If Not FnFormIsVisible("DDBar") Then DDBar.reDraw '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If SCSForm.LFixed Then If Not (DDBar.isHidden Or DDBar.isMatrix) Then incon ScLt%, DDBar.Width / x75 'LFixed
End If
'Custom
If DDBarUsed Then If DDM.num = 1 Then ScRt% = DDBar.Left / x75
ls "<", "DDMini": End Sub

Public Sub ResetScDDM(): If reDMMflg Then reDMMflg = False: ls "~", "ResetScDDM" Else Exit Sub 'main screen reinitialization (|fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| DDMIni)
    Dim rt As rect: Call GetWindowRect(GetDesktopWindow(), rt) '1024x1280
    ScBm% = rt.Bottom: ScRt% = IIf(DDM.forceSM = 1, DDM.Right, rt.Right): ScLt% = IIf(DDM.forceSM = 1, DDM.Left, 0): ScTp% = 0:
    
      'With SCSForm.TargetForm '1-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| c remind()
        Select Case DDM.forceSM: 'DDM.off = SM 2 forsed
               Case 0, 2: If DDM.useTB Then Select Case DDM.TBpos:  Case "2l": ScLt% = ScLt% + DDM.TBwidth: _
                                                                    Case "2r": ScRt% = ScRt% - DDM.TBwidth: _
                                                                    Case "2t": ScTp% = ScTp% + DDM.TBwidth: _
                                                                    Case "2b": ScBm% = ScBm% - DDM.TBwidth: End Select
        If FnFormIsLoaded("SCSForm") Then
          If SCSForm.t_hwnd <> 0 Then '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           With SCSForm.TargetForm 'NEW - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           On Error Resume Next: If .Left < ScLt% * x75 - 111 - 10 Then .Left = ScLt% * x75: SCSForm.reDraw: SCSForm.focusMe: On Error GoTo 0
           End With: End If: End If
               Case 1:    'If rt.Bottom <> DDM.Bottom Then ScBm% = DDM.Bottom
                          ScBm% = DDM.Bottom: ScTp% = DDM.Top: ScRt% = 0 'SM 1 forsed (DDM.on->off, Sc% -> DDM)
                          '|fffd||fffd||fffd| forceSM% = 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDM -> GetDesktopWindow() + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| scr2 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                          DDM.Left = rt.Left: DDM.Right = rt.Right: DDM.Top = rt.Top: DDM.Bottom = rt.Bottom
                          If DDM.useTB Then Select Case DDM.TBpos:  Case "2l": DDM.Left = DDM.Left + DDM.TBwidth: _
                                                                    Case "2r": DDM.Right = DDM.Right - DDM.TBwidth: _
                                                                    Case "2t": DDM.Top = DDM.Top + DDM.TBwidth: _
                                                                    Case "2b": DDM.Bottom = DDM.Bottom - DDM.TBwidth: End Select
                          DDM.Width = DDM.Right - DDM.Left: DDM.Heigth = DDM.Bottom - DDM.Top
        If FnFormIsLoaded("SCSForm") Then
          If SCSForm.t_hwnd <> 0 Then
            With SCSForm.TargetForm 'NEW - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| TargetForm
            On Error Resume Next: If .Left > ScLt% * x75 + 10 Then .Left = ScLt% * x75 - 4: SCSForm.reDraw: SCSForm.focusMe: On Error GoTo 0
                                                                     .Top = ScTp% * x75 - 2: End With: End If: End If
   End Select: End Sub 'End With: End Sub

Attribute VB_Name = "srv_FORMS_common"
'****************************************************
Function getFormIndex(form_name) As Integer
'index |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UserForms
For i = 0 To (UserForms.Count - 1)
  If UserForms(i).name = form_name Then GoTo yes
Next i: getFormIndex = -1: Exit Function
yes: getFormIndex = i: End Function

'****************************************************
Function FnFormIsVisible(form_name$) As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
For i = 0 To (UserForms.Count - 1): If UserForms(i).name = form_name Then _
         FnFormIsVisible = UserForms(i).Visible: Exit Function
                                         Next i: End Function
                                         
Function FnFormIsLoaded(form_name$) As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
For i = 0 To (UserForms.Count - 1): If UserForms(i).name = form_name Then FnFormIsLoaded = True: Exit Function
                                                                                         Next i: End Function

'****************************************************
Sub HideFormIfLoaded(form_name$, Optional pass As Boolean): On Error Resume Next: If pass Or Not FnFormIsLoaded(form_name$) Then Exit Sub
For i = 0 To (UserForms.Count - 1): If UserForms(i).name = form_name Then UserForms(i).Hide: Exit Sub
Next i: End Sub
'****************************************************'vbModeless / vbModal(by def)
Sub ShowFormIfLoaded(form_name$, Optional vMode%): On Error Resume Next: If FnFormIsLoaded(form_name$) Then Exit Sub
For i = 0 To (UserForms.Count - 1): If UserForms(i).name = form_name Then UserForms(i).show vMode%: Exit Sub
Next i: End Sub

'****************************************************
Function IsModal(form_name$) As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
On Error GoTo errorL: For i = 0 To (UserForms.Count - 1): If UserForms(i).name = form_name Then UserForms(i).show vbModeless: Exit Function
Next i: Exit Function
errorL: IsModal = True: End Function


'**********
'Focus
'***********
Sub setFocusOnForm(fName, Optional activateWindow As Boolean): On Error GoTo noForm: ls ">", "setFocusOnForm", , fName, activateWindow
hWnd& = FindWindow(vbNullString, UserForms(getFormIndex(fName)).Caption)
        If activateWindow Then SetForegroundWindow& hWnd&: Putfocus hWnd& Else Putfocus hWnd&
noForm: ls "<", "setFocusOnForm", , fName, activateWindow: End Sub

'**********
'|fffd||fffd||fffd||fffd||fffd|
'***********
Sub svrFilterFix(): For i = wsGen To wsABC: For j = 1 To 2: Sheets(i).Range("B1:" & IIf(FnIsTrinity(FnWSCase$(eru(i))), "E1", "H1")).AutoFilter: Next: Next
End Sub '- |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| group levels |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EditForm)
Sub srvProc100Fix(): If ActiveCell.Column = termcol Then If FnIsTrinity(ActiveSheet.name) Then If top_h& <> SCSForm.t_hwnd Then Range("D" & ActiveCell.row & ":D" & ActiveCell.row).Select
End Sub '- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| %CPU (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Office2013 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| termActivate |fffd||fffd| Trinity |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Attribute VB_Name = "srv_Hot_Keys"
'<F4> -  Properties
'Ctrl+<R> - Project

'***********
'InividualApp
'***********
Public smart_freezing As Boolean, on_timess_flg As Boolean, last_active_hwnd&, fdeep%
Private x As New EventClass, lastTime, wrnTimerInWork As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| c_useTimer
'Initializing the Declared Object
'Before the procedure will run, you must connect the declared object _
in the class module (App in this example) with the Application object. _
You can do this with the following code from any module.

Sub InitializeApp(): Set x.App = Application: With x.App
                        .OnKey "{ESC}", "Escaped"
                        .OnKey "{ENTER}", "Entered"
                        .OnKey " ", "Spaced"
                        .OnKey "~", "View_Looking"
                        .OnKey "{LEFT}", "MoveLeft"
                        .OnKey "{RIGHT}", "MoveRight"
                        .OnKey "^{LEFT}", "CtrlMoveLeft"
                        .OnKey "^{RIGHT}", "CtrlMoveRight"
                        .OnKey "{UP}", "MoveUp"
                        .OnKey "{DOWN}", "MoveDown"
                        .OnKey "^{UP}", "CtrlMoveUp"
                        .OnKey "^{DOWN}", "CtrlMoveDown"
                        .OnKey "a", "Ctrl_Shift_A"
                        .OnKey "c", "Ctrl_Shift_C"
                        .OnKey "e", "Ctrl_E"
                        .OnKey "^e", "openAsW_Ctrl_E"
                        .OnKey "d", "Ctrl_Shift_D"
                        .OnKey "f", "Ctrl_F"
                        .OnKey "g", "pressedG"
                        .OnKey "h", "Set_HyperLink_branch"
                        .OnKey "j", "jotted"
                        .OnKey "^+m", "Ctrl_Shft_M"
                        .OnKey "^m", "Ctrl_M"
                        .OnKey "r", "remind"
                        .OnKey "s", "twoWindowsSwitcher"
                        .OnKey "w", "switchWmode"
                        .OnKey "v", "openAsW" '"openAsWtree" '"openAsW"'
                        .OnKey "^v", "openAsWtreeNoHidden" 'Ctrl+V (^%+ = Ctrl+Alt+Shift)
                        .OnKey "+v", "openAsWtreeAndHidden" 'Shift+V
                        .OnKey "z", "HyperTestorAuto" '"srvShowShadowVSidActive"
                        .OnKey "^z", "HyperTestorNoA"  'inwork_now 'View_CategoryForm
                        .OnKey "q", "test_cutted" '"srvApplayShadows4ActiveQuietly"
                        .OnKey "%{192}", "Alt0pressed" '{~} = Application error
                        .OnKey "%1", "Alt1pressed"
                        .OnKey "%2", "Alt2pressed"
                        .OnKey "{96}", "pressed0"
                        .OnKey "{97}", "pressed1" 'for numeric keypad {98}=2, {99}=3 etc.
                        .OnKey "{98}", "pressed2" '= KeyCode (events)
                        .OnKey "{99}", "pressed3"
                        .OnKey "{100}", "pressed4"
                        .OnKey "{101}", "pressed5"
                        .OnKey "{102}", "pressed6"
                        .OnKey "{110}", "Dotted" '<Num .>
                        '.OnKey "+{DELETE}", "" 'disables Shift+Delete
                        '.OnKey "+{DELETE}"     'returns to its normal meaning
                        '.OnKey "+{DELETE}", "Shift.Delete" 'test
                        'Schedule 1, "OnTimess"
                     On Error Resume Next: If Not Workbooks("MAIN.XLSB").OnTime_flg Then Exit Sub '|fffd||fffd||fffd||fffd|-multiple_run (err |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|[P])
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If c_useOnTime Then .OnTime TimeValue(replicate$(DatePart("h", Now) + 1, "0", 2) & ":00:00"), "OnTimeHH"  '|fffd||fffd||fffd| MyFunc(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                                                                                                  'OnTime1 True '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                     End With: Workbooks("MAIN.XLSB").OnTime_flg = False: End Sub
'***********
'Keys
'***********
Private Sub pressed0(): pressed_nk 0: End Sub
Private Sub pressed1(): pressed_nk 1: End Sub
Private Sub pressed2(): pressed_nk 2: End Sub
Private Sub pressed3(): pressed_nk 3: End Sub
Private Sub pressed4(): pressed_nk 4: End Sub
Private Sub pressed5(): pressed_nk 5: End Sub
Private Sub pressed6(): pressed_nk 6: End Sub
Private Sub pressed_nk(nk%): If Not FnFormIsLoaded("SCSForm") Then remind
            SCSForm.processSCSFormKeyDown 95 + nk%: End Sub
Private Sub Dotted(): If Not FnFormIsLoaded("FindForm") Then remind
            SCSForm.processSCSFormKeyDown 110: End Sub
Private Sub Jotted(): If Not FnFormIsLoaded("FindForm") Then remind
            SCSForm.processSCSFormKeyDown 74: End Sub
Private Sub pressedG(): SCSForm.processSCSFormKeyDown 71: End Sub
Private Sub Alt0pressed(): AltNumPressed_common 0: End Sub
Private Sub Alt1pressed(): AltNumPressed_common 1: End Sub
Private Sub Alt2pressed(): AltNumPressed_common 2: End Sub
Public Sub AltNumPressed_common(n%): If sag(svd_n%, DDM.forceSM) = n% Then Exit Sub Else DDMini DDM, n%: L0M "ResetScDDM"
With SCSForm:
'     If DDM.num = 1 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd|?
'                      If n% = 0 Then
'                                     If .br_hwnd <> 0 Then If .http_hwnd = 0 Then .http_hwnd = .br_hwnd: .br_hwnd = 0
'                      ElseIf svd_n% = 0 Then If .http_hwnd <> 0 Then If .br_hwnd = 0 Then .br_hwnd = .http_hwnd: .http_hwnd = 0
'     End If: End If
     If .isDoppel Then
       If n% = 0 Then .noDoppel Else .Left = ScLt * x75 + .TargetForm.Width - 26.05 '.Redraw - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Doppel
     Else: .TargetForm.Left = ScLt: If n% = 2 Then .reDraw '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Target
     End If                                                                                                              ' IIf(svd_n% = 0, .http_hwnd, 0))
     If DDBarUsed Then
                       DDBar.DDMsvdTop% = DDM.Top: DDBar.DDMsvdBtm% = DDM.Bottom
                        If n% = 0 Then hWnd& = .r_hwnd: .r_hwnd = .http_hwnd: .http_hwnd = hWnd&  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If svd_n% = 0 Then hWnd& = .http_hwnd: .http_hwnd = .r_hwnd: .r_hwnd = hWnd&
  If .d_http_hwnd <> 0 And n% = 0 Then If .br_hwnd <> 0 Then DDBar.AddItem .d_http_hwnd Else .br_hwnd = .d_http_hwnd: .d_http_hwnd = 0
                       DDBar.reDraw IIf(n% = 0, 1, IIf(DDM.num = 1, -4, IIf(DDBar.isUpper, 2, 0))), svd_n% * n% = 0, , True
                    If svd_n% = 0 Then If .bl_hwnd <> 0 And .br_hwnd <> 0 Then .d_http_hwnd = .br_hwnd: .br_hwnd = 0 'DDBar.AddItem(.br_hwnd)       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| DDBar etc.
      End If
      If Not DDBarUsed Or Abs(svd_n% - n%) = 2 Then .reParkW '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2<->0
      If FnFormIsLoaded("JOTCaller") Then JOTCaller.reDraw True  'justPos
      If FnFormIsLoaded("ChessCaller") Then ChessCaller.reDraw , , , True
                                          If svd_n% = 0 Then Application.Visible = True _
                                         Else If n% = 0 Then Application.Visible = False: .HideTargetW: FindForm.Hide: .Left = ScLt% * x75 + 1:
      If FnFormIsLoaded("satellite") Then If svd_n% = 0 Then satellite.Image25.Left = 67.5: satellite.Image24.Left = 29: _
                                                             satellite.Image16.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\bag.ico") _
                                        Else: If n% = 0 Then satellite.Image16.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\secstant.jpg"): _
                                                             satellite.Image25.Left = 29: satellite.Image24.Left = 67.5: satellite.Repaint   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
   .AllOnTop: .focusMe: End With: End Sub ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 'Alt+#

'***********
'Cursor
'***********
Sub MoveUp(): remind: i = ActiveCell.row: If ActiveSheet.Index > 3 Then Cells(IIf(i > 1, i - 1, i), ActiveCell.Column).Activate: Exit Sub
On Error GoTo exitL: While dec(i) > 1 And rows(i).Hidden: Wend 'i=0
If ActiveCell.Column < 2 Then col = 3 Else col = ActiveCell.Column
If i > 1 Then Cells(i, col).Activate:
exitL: End Sub

Sub CtrlMoveLeft(): remind: If ActiveSheet.Index > 3 Then Exit Sub
 i = ActiveCell.Column: If i > 1 Then dec i
Cells(ActiveCell.row, i).Activate: End Sub

Sub CtrlMoveRight(): remind: If ActiveSheet.Index > 3 Then Exit Sub
i = ActiveCell.Column: If i < 5 Then inc i
Cells(ActiveCell.row, i).Activate: End Sub

Sub MoveDown(): remind: i = ActiveCell.row: If ActiveSheet.Index > 3 Then Cells(i + 1, ActiveCell.Column).Activate: Exit Sub
On Error GoTo exitL: While inc(i) <= ActiveSheet.UsedRange.rows.Count And rows(i).Hidden: Wend 'i=0
If ActiveCell.Column < 2 Then col = 3 Else col = ActiveCell.Column
'If i <= ActiveSheet.UsedRange.rows.Count Then
Cells(i, col).Activate
exitL: End Sub

Sub CtrlMoveUp(): If Not FnIsTrinity(ActiveSheet.name) Then Exit Sub
remind: id = Cells(ActiveCell.row, 1): setOutlineShowLevel (1)
If ActiveCell.Column < 3 Then col = 3 Else col = ActiveCell.Column
Call MoveToID(FnWSNum(ActiveSheet.name), id, col)
End Sub

Sub CtrlMoveDown(): If Not FnIsTrinity(ActiveSheet.name) Then Exit Sub
remind: id = Cells(ActiveCell.row, 1): setOutlineShowLevel (3)
If ActiveCell.Column < 3 Then col = 3 Else col = ActiveCell.Column
Call MoveToID(FnWSNum(ActiveSheet.name), id, col)
End Sub

Sub MoveLeft(): remind: col = ActiveCell.Column: If ActiveSheet.Index > 6 Then Cells(ActiveCell.row, IIf(col > 1, col - 1, col)).Activate: Exit Sub
    baseWS = FnWSNum(ActiveSheet.name): id = Cells(ActiveCell.row, 1)
    If id = "" Or id = "ID" Then i = decode(dec(eru(ActiveSheet.Index)), 0, 3, 4, 1): Application.Goto Reference:="_" & i & "_" & Sheets(Index(i)).Cells(2, 1), Scroll:=True: Cells(1, 1).Select
    If ActiveSheet.name = "log_" Then Call MoveToID(wsRu, id, 3)
    If baseWS > 4 Or id = "" Then Exit Sub
    If baseWS <= 1 Then baseWS = 4
    If col < 3 Or col > 4 Then col = 3
    If baseWS <= 4 Then Call MoveToID(baseWS - 1, id, col) Else Call MoveToID(baseWS, id, col)
    Call allRootsActivation: PF_SetSpecialEffect ActiveSheet.Index
End Sub

Sub MoveRight(): remind: col = ActiveCell.Column: If ActiveSheet.Index > 5 Then Cells(ActiveCell.row, col + 1).Activate: Exit Sub
    baseWS = FnWSNum(ActiveSheet.name): id = Cells(ActiveCell.row, 1):
    If id = "" Or id = "ID" Then i = decode(inc(eru(ActiveSheet.Index)), 0, 3, 4, 1): Application.Goto Reference:="_" & i & "_" & Sheets(Index(i)).Cells(2, 1), Scroll:=True: Cells(1, 1).Select
    If ActiveSheet.name = "log_" Then Call MoveToID(baseWS, 0, 0)
    If baseWS > 4 Or id = "" Then Exit Sub
    If baseWS = 3 Then baseWS = 0
    If col < 3 Or col > 4 Then col = 3
    If baseWS <= 4 Then Call MoveToID(baseWS + 1, id, col) Else Call MoveToID(baseWS, id, col)
    Call allRootsActivation: PF_SetSpecialEffect ActiveSheet.Index
End Sub

'***********
Rem: Schedules
'***********
Rem: c_useTimer = |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SetTimer |fffd| satellite (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| smart_freezing_start)
Sub OnTimess_start(): If on_timess_flg Then Exit Sub
                      If useDnD Then c_useDnD = useDnD: Unload FindForm 'D&D On
                on_timess_flg = SaveParam("smart_freezing", sag(smart_freezing, True))
                satellite.show vbModeless: If Not c_useTimer Then OnTimess
                'If c_useTimer Then satellite.show vbModeless _
                              Else remind: satellite.show vbModeless: OnTimess
                FindForm.Image8.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\secstant.jpg"): FindForm.Repaint
End Sub
Sub OnTimess_stop(Optional frsUnload As Boolean): If Not on_timess_flg Then Exit Sub
                     If c_useDnD Or frsUnload Then c_useDnD = False: Unload FindForm 'D&D Off 'frsUnload=True |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|.RClick
            If DDBarUsed Then If DDBar.isMatrix Then DDBar.DDMatrixFrom% = -1 Else If DDBar.isUpper Then DDBar.reDraw 0, True '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                     'With FindForm.Image8: .Visible = False: End With: FindForm.reSize: End Sub '.BorderStyle = 0:
Unload satellite: FindForm.Image8.Picture = LoadPicture(ThisWorkbook.path & "\icons\hot\bag.ico"): FindForm.Repaint
                            on_timess_flg = SaveParam("smart_freezing", sag(smart_freezing, False)): End Sub
Sub OnTimess()
            If c_useTimer Then
                If wrnTimerInWork Then Exit Sub Else wrnTimerInWork = True
                If AC_flg Or Not on_timess_flg Then If Not FnFormIsLoaded("satellite") Then GoTo exitL Else If _
                   AC_flg Then Unload satellite: Exit Sub Else OnTimess_stop: GoTo exitL:  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| NEW
                   'satellite.reSize: |fffd||fffd||fffd||fffd||fffd||fffd| "Object or With variable is not set" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| App |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
                If Not flg_InWork Then On Error Resume Next: satellite.reSize: On Error GoTo 0: If smart_freezing Then Do_smart_freezing&
                GoTo exitL
            'Else: on_timess_flg = True 'TEST 190929
            End If 'NEW
                If AC_flg Or Not on_timess_flg Then GoTo stopL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-multipl killer (lastTime<s)
                If DateDiff("s", lastTime, Now) < 1 Then 'db_ DateDiff("s", Now, lastTime) & ":" & Now & " " & lastTime + TimeValue("00:00:01")
                                                         GoTo exitL
                                                    Else: db_ DateDiff("s", lastTime, Now): If flg_InWork Then GoTo passL
                End If:  On Error Resume Next: satellite.reSize: If smart_freezing Then Do_smart_freezing& Else GoTo stopL '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| !|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
passL:                                lastTime = Now: x.App.OnTime sag(preTime, lastTime + TimeValue("00:00:01")), "OnTimess"
        Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       'While DateDiff("s", preTime, Now) < 1: doDelay2 0.1: satellite.reSize: Wend  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
          'doDelay2 0.6: satellite.reSize: '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
                                           '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Images |fffd| |fffd||fffd||fffd||fffd||fffd|?) + doDelay2 |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Run-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| VBA)
exitL: wrnTimerInWork = False:            Exit Sub
stopL: das smart_freezing: OnTimess_stop: End Sub

'***********
Rem: smart_freezing
'***********
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub smart_freezing_start(): If smart_freezing Then Exit Sub Else remind
    LM "smart_freezing_start": If FnIsTrinity Then UpdateCellMenu '"Common: smart_freezing ON"
    If last_active_hwnd& = 0 Then
        For i = 1 To 5: If sag(last_active_hwnd&, SCSForm.GetTBhwnd(i)) > 0 Then Exit For
        Next: End If: OnTimess_start: End Sub
Sub smart_refreezing(): If Not FnFormIsLoaded("SCSForm") Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| active)
        If last_active_hwnd& = 0 Then
              For i = 1 To 5: If sag(last_active_hwnd&, SCSForm.GetTBhwnd(i)) > 0 Then Exit For
        Next: End If: With SCSForm: .freeze , .inCollection(last_active_hwnd&): LM "smart_refreezing" 't_hwnd |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| SCForm.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                           ' SCSForm.freeze last_active_hwnd&, .inCollection(.t_hwnd), wdeep%: 'last_active_hwnd& |fffd| |fffd||fffd||fffd| wdeep% (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Ctrl |fffd||fffd| SCForm)
                  End With: End Sub
Public Sub Do_smart_freezing(Optional hWnd&): If Not FnFormIsLoaded("SCSForm") Then Exit Sub
    If hWnd& = 0 Then If smart_freezing_by_mouse Then Exit Sub _
                            Else hWnd& = GetForegroundWindow&() '+ |fffd||fffd||fffd||fffd||fffd| "smart_freezing |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If invals(hWnd&, last_active_hwnd&, SCForm.me_hwnd&) Then GoTo passL 'else LM "Do_smart_freezing"
                 With SCSForm: 'dbgl hWnd&, .t_hwnd
                              If .inCollection(hWnd&) > 0 Or hWnd& = .t_hwnd Then smart_freezing_next hWnd&: _
                                  L0M "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! smart_freezing =": Call Fn_smart_freezing_last(last_active_hwnd&): last_active_hwnd& = hWnd& 'custom trans_level (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'dbgl "done": 'Exift Sub
passL:      End With: End Sub
Public Sub smart_freezing_next(hWnd&, Optional fromDeep%)
'dbgl "next", hWnd&, fdeep%, satellite.custran$ 'ls ">", "SetTransparentGlide", , hwnd&, SCSForm.get_freezind_deep%, wdeep%:
                                If FnFormIsLoaded("satellite") Then If isCusTranS(hWnd&) Then Exit Sub
                                   SetTransparentGlide hWnd&, zero(fromDeep%, SCSForm.get_freezind_deep%(hWnd&)), wdeep%(hWnd&), IIf(os10, 0.06, Null)
'dbgl "out next"
End Sub ', step = 0.0002
Function Fn_smart_freezing_last(lsthwnd&) As Boolean
'dbgl "last", lsthwnd&, satellite.custran$ 'SCSForm.get_freezind_deep%(lsthwnd&) 'stop-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| < 10
                                If FnFormIsLoaded("satellite") Then If satellite.custran$ Like "*|" & lsthwnd& & "|*" Then Exit Function
         Fn_smart_freezing_last = Not SetTransparentGlide(last_active_hwnd&, wdeep%(lsthwnd&), SCSForm.get_freezind_deep%(lsthwnd&), IIf(os10, 0.03, Null))
'dbgl "out last"
End Function
Function wdeep%(Optional hWnd&): wdeep% = zero(fdeep%, IIf(FindForm.bk_color_is_black, 235, 215)) - IIf(hWnd& = SCSForm.t_hwnd, 55, 0): End Function

Sub OnTimeHH(): If AC_flg Or Not c_useOnTime Then Exit Sub Else If Not FnFormIsLoaded("SCSForm") Then GoTo passL
                SCSForm.glowing fade:=isFullPartOf(CStr(DatePart("h", Now)), "13:18", ":")
                SCSForm.processSCSFormKeyDown 71: SCSForm.focusMe
passL:          On Error Resume Next: x.App.OnTime Now + TimeValue("01:00:00"), "OnTimeHH" ', Schedule:=False
                                      x.App.OnTime Now + TimeValue("00:30:00"), "OnTime30"
                End Sub
Sub OnTime30(): If AC_flg Or Not c_useOnTime Then Exit Sub Else If Not FnFormIsLoaded("SCSForm") Then GoTo passL
                SCSForm.processSCSFormKeyDown 71
passL:          On Error Resume Next: x.App.OnTime Now + TimeValue("00:15:00"), "OnTime15": End Sub
Sub OnTime15(): If AC_flg Then Exit Sub Else App_reset: If Not FnFormIsLoaded("SCSForm") Then Exit Sub  'App_reset - |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
                On Error Resume Next: SCSForm.glowing True: dispUpdateTL True, True: End Sub
'-------------------------------------------------------------------------------------------
Sub DDBarAutoHide(Optional fstRun = False): If AC_flg Or Not c_useOnTime Or AH_flg Or stopAH Or DDM.Bottom = DDM.Top + DDM.Heigth _
                                                    Then AH_flg = False: Exit Sub ': stopAH = False
                                            If Not FnFormIsLoaded("SCSForm") Or fstRun Or DDBar.isMatrix Then GoTo passL
                On Error Resume Next: If DDBarUsed Then DDBar.HideBar: Exit Sub 'DDBarAutoHide (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MouseMove)
passL:                                x.App.OnTime Now + TimeValue("00:00:30"), "DDBarAutoHide": AH_flg = True: End Sub
'-------------------------------------------------------------------------------------------
Sub OnTime1(Optional fstRun = False): If AC_flg Or Not c_useOnTime Then Exit Sub Else If Not FnFormIsLoaded("SCSForm") Then Exit Sub _
                                                                   Else If fstRun Then GoTo passL
Call PF_Set_saving
passL: On Error Resume Next: x.App.OnTime Now + TimeValue("00:01:00"), "OnTime1": End Sub
Sub PF_Set_saving(): With PF.Controls("ImageWS" & PF.c_Set - 1): .tag = "|" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        For j% = 1 To 5: hWnd& = SCSForm.GetTBhwnd(j%): If j% = 5 Then .tag = .tag & hWnd& & "|" Else _
                                                                                .tag = .tag & IIf(FindForm.Controls("ImageW" & j%).SpecialEffect = 6, "x", hWnd&) & "|"
                        Next: SaveParam "PF_Set" & PF.c_Set, .tag & CInt(SCSForm.Y_split) & "|": End With: End Sub
                
'***********
Rem: Open_Browser
'***********
Sub switchWmode(): Application.Run "MAIN.XLSB!ThisWorkbook.switchWmode": LockWB: End Sub
Sub openAsW_Ctrl_E(): openAsW: Ctrl_E: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Sub openAsW(Optional hideNshowFlg = True): WSim: If FnIsTrinity Then id$ = Cells(ActiveCell.row, 1): w_capt = getWndCaption$(SCSForm.r_hwnd&) Else Exit Sub
                     If Left(w_capt, Len(id$) + 2) = "^" & id$ & "|" Then If Right(w_capt, 5) <> "|tree" Then dispDestroyWindow SCSForm.r_hwnd&, True: AppActivate Application.Caption: If hideNshowFlg Then Exit Sub
                Call Open_Browser_W: FocusMAIN: End Sub
Sub openAsWtreeAndHidden(): openAsWtree True: End Sub
Sub openAsWtreeNoHidden(): openAsWtree False: End Sub
Sub openAsWtree(Optional showHidden As Boolean): WSim: If FnIsTrinity Then id$ = Cells(ActiveCell.row, 1): w_capt = getWndCaption$(SCSForm.r_hwnd&) Else Exit Sub
                   If Left(w_capt, Len(id$) + 2) = "^" & id$ & "|" Then If Right(w_capt, 5) = "|tree" And Not showHidden Then dispDestroyWindow SCSForm.r_hwnd&, True: AppActivate Application.Caption: Exit Sub
                   Call Open_Browser_W_tree(showHidden): FocusMAIN: End Sub

Sub Entered(): If ActiveSheet.name = "Dispetcher_" Then PF.SetTextFieldVisible Not PF.ComboBox1.Visible: Exit Sub
               Call View_Looking: End Sub

Sub Escaped(): EscapedFn: End Sub
Public Function EscapedFn() As Boolean: If Not FnFormIsLoaded("SCSForm") Then Exit Function
               If IsWindow(SCSForm.help_hwnd) Then dispDestroyWindow SCSForm.help_hwnd: Exit Function  '^22_17|Help (Ctrl+?)
               If FnFormIsLoaded("EditForm") Then Unload EditForm: SCSForm.reParkW True: inc i%
               If FnFormIsLoaded("CATForm") Then Unload CATForm: inc i%
               If FnFormIsLoaded("FindForm") Then If FindForm.Visible Then If FindForm.cMode$ <> "DS" Then FindForm.setMode "DS": inc i%
               If FnFormIsLoaded("PF") Then If PF.ComboBox1.Visible Then PF.SetTextFieldVisible False
If i% > 0 Then EscapedFn = True Else _
               If FnFormIsLoaded("SCSForm") Then If Left(getWndCaption$(SCSForm.r_hwnd&), 1) = "^" Then dispDestroyWindow SCSForm.r_hwnd&, True: EscapedFn = True
End Function
Sub Spaced(): If FnFormIsLoaded("SCSForm") Then SCSForm.HideAll Else remind
End Sub

'***********
'Macro_Hot_Keys
'***********
Sub Ctrl_U(): UpdateRowFormatting (Cells(ActiveCell.row, 1)): End Sub
Attribute Ctrl_U.VB_ProcData.VB_Invoke_Func = "u\n14"
Sub Ctrl_|fffd|(): Call Ctrl_U: End Sub
Attribute Ctrl_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"

Sub Ctrl_A(): LockWB: remind: Call DoAround: End Sub
Attribute Ctrl_A.VB_ProcData.VB_Invoke_Func = "a\n14"
Sub Ctrl_|fffd|(): Call Ctrl_A: End Sub
Attribute Ctrl_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"

Sub Ctrl_F(): LockWB: remind: Call DoFind(0):
Attribute Ctrl_F.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
              If Not FnFormIsLoaded("CFF") Then _
              If FindForm.cMode <> "DS" Then FindForm.focusT1 Else SCSForm.focusMe
                                              End Sub '"|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Ctrl_|fffd|(): Call Ctrl_F: End Sub

Sub Ctrl_Shift_A(): remind
Attribute Ctrl_Shift_A.VB_ProcData.VB_Invoke_Func = "A\n14"
  If ActiveSheet.name <> WSI Then
  'If ActiveSheet.name = WSI Then
  '  Do While Sheets(WSI).Cells(2, 1) <> "" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <= 100 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
      Call View_Add: SCSForm.focusMe: EditForm.focusMe '  setFocusOnForm "EditForm", True: EditForm.TextBoxEnTerm.SetFocus
  '  Loop
  '  MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  ElseIf Selection.EntireRow.Interior.ColorIndex = inv(35) Then
      Selection.EntireRow.Interior.ColorIndex = xlNone
  Else: Selection.EntireRow.Insert
      Selection.EntireRow.Interior.ColorIndex = inv(35) 'Light-Green
  End If: End Sub
Sub Ctrl_Shift_|fffd|(): Call Ctrl_Shift_A: End Sub
Attribute Ctrl_Shift_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"

Sub Ctrl_Shift_C(): If FnFormIsLoaded("CATForm") Then Unload CATForm
Attribute Ctrl_Shift_C.VB_ProcData.VB_Invoke_Func = "C\n14"
If Not FnIsTrinity Then Exit Sub Else remind: View_Category_Selector: 'PF.Image16.SpecialEffect = 3
End Sub

Sub Ctrl_Shift_D(): remind
Attribute Ctrl_Shift_D.VB_ProcData.VB_Invoke_Func = "D\n14"
  If ActiveSheet.name = WSI Then
    If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & CStr(Selection.row) & "?", vbOKCancel, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbOK _
    Then Selection.EntireRow.Delete
  ElseIf ActiveSheet.name = WSD Then dispDestroyWindow
  Else: View_Delete
  End If: End Sub
Sub Ctrl_Shift_|fffd|(): Call Ctrl_Shift_D: End Sub
Attribute Ctrl_Shift_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"

Sub Ctrl_Shift_E(): remind: If ActiveSheet.name = WSI Then Exit Sub
If FnFormIsLoaded("EditForm") Then If EditForm.Caption <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" _
                                 Then EditForm.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|
Call View_Term:    EditForm.focusMe:  EditForm.CommandButton1.SetFocus: End Sub 'View_Looking
Sub Ctrl_Shift_|fffd|(): Call Ctrl_Shift_E: End Sub
Attribute Ctrl_Shift_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
Sub Ctrl_E():       Call Ctrl_Shift_E: End Sub
Sub Ctrl_|fffd|():       Call Ctrl_Shift_E: End Sub
Attribute Ctrl_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"

Sub Ctrl_Shift_F(): remind: Call DoFind(2): End Sub
Attribute Ctrl_Shift_F.VB_ProcData.VB_Invoke_Func = "F\n14"
Sub Ctrl_Shift_|fffd|(): Call Ctrl_Shift_F: End Sub
Attribute Ctrl_Shift_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"

Sub Ctrl_|fffd|(): Call Ctrl_Q: End Sub
Attribute Ctrl_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
Sub Ctrl_Q(): remind: If settingsForm.Visible Then settingsForm.Hide Else settingsForm.show xlModalless
Attribute Ctrl_Q.VB_ProcData.VB_Invoke_Func = "q\n14"
End Sub

Sub Ctrl_|fffd|(): Ctrl_H: End Sub
Attribute Ctrl_|fffd|.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
Sub Ctrl_H(): Set_HyperLink_branch: End Sub
Attribute Ctrl_H.VB_ProcData.VB_Invoke_Func = "h\n14"





Attribute VB_Name = "srv_Windows"
Function twoWindows() As Boolean: twoWindows = Windows.Count = 2: End Function
Function twoWindowsWild() As Boolean: twoWindowsWild = twoWindows And Application.Height >= (ScBm% - ScTp%) * x75: End Function
Sub twoWindowsSwitcher(): Exit Sub: If twoWindows Then twoWindowsOff Else twoWindowsOn '[X]|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Office 2013
                                                                  End Sub

Sub twoWindowsOn(): If Windows.Count > 1 Then twoWindowsOff
With ActiveWindow: s_zoom = .Zoom: .WindowState = xlNormal: .Caption = "1": End With
     SUp False: Application.Visible = False
     ActiveWindow.NewWindow.Caption = "_" 'adding
With Windows("1"): .EnableResize = False
  '.Top = -22: .Left = -5: .Width = Application.UsableWidth + 13: .Height = Application.UsableHeight / 2 + 22:
End With
With Windows("_"): .EnableResize = False:
  .Activate  'FreezePanes
  For Each ws In Workbooks("MAIN.XLSB").Worksheets: ws.Activate: SUp False
    If ws.Visible = -1 And ws.name <> "Dispetcher_" Then
      If Not .FreezePanes Then
          .FreezePanes = False
          .SplitRow = 1: .SplitColumn = IIf(ws.Index < wsABC, 4, 7)
                                  'err: "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FreezePanes" |fffd| Office 2013
          .LargeScroll ToLeft:=1: On Error Resume Next: .FreezePanes = True: On Error GoTo 0: .Zoom = 70
          .DisplayHeadings = False: .DisplayVerticalScrollBar = True
          .DisplayOutline = False '|fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      End If
    End If: Next ws
  .Zoom = 85: twoWindows_reSize '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - "Dispetcher_" (const Zoom = 85)
'  .Top = Application.UsableHeight / 2 - 6: .Left = -5:
'  .Width = Application.UsableWidth + 13: .Height = Application.UsableHeight / 2 + 14
  .DisplayHeadings = False: .DisplayHorizontalScrollBar = False '.DisplayGridlines = False
  .DisplayWorkbookTabs = False: .DisplayVerticalScrollBar = False
'Dim tPT As POINTAPI: GetCursorPos tPT: hwnd& = WindowFromPoint(tPT.X, tPT.Y)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Header  (FindWindow(vbNullString, "win2xx") - |fffd||fffd||fffd||fffd|)
  If FnFormIsLoaded("SCForm") Then SetTransparent SCForm.t_hwnd&, 1
  Application.Visible = True: SUp True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  twoW_hwnd& = WindowFromPoint(.PointsToScreenPixelsX(.Left + 10), _
                               .PointsToScreenPixelsY(.Top - .Height) + 0): 'MsgBox hwnd&: Exit Sub
  setNoHeadersH twoW_hwnd&, False 'global
  If Not FnFormIsLoaded("SCSForm") Then .Height = .Height + 1: twoWindows_reSize _
                                   Else .Height = .Height + 1: SCSForm.UserForm_Layout '|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
End With: Sheets(WS0).Activate: If FnFormIsLoaded("SCForm") Then SCForm.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Sub twoWindowsOff(): If Windows.Count = 1 Then Exit Sub Else On Error Resume Next: Windows("MAIN.XLSB").Caption = ""
Windows("_").Close: With ActiveWindow: .EnableResize = True: .Caption = "": .WindowState = xlMaximized: End With:
                  If FnFormIsLoaded("SCSForm") Then SCSForm.UserForm_Layout
                                               End Sub
                                               
Sub twoWindows_reSize(): If Windows.Count = 1 Then Exit Sub Else On Error Resume Next: Windows("MAIN.XLSB").Caption = "1"
    twoWild_flg = twoWindowsWild And FnFormIsLoaded("SCSForm")
With Windows("1"):
  .Top = -22: .Left = -5: .Width = Application.UsableWidth + 13  '.Top = -22: .Top = -5:
  If twoWild_flg Then .Height = SCSForm.Top + 22 _
                 Else .Height = Application.UsableHeight / 2 - .Top
End With
With Windows("_"):
  .Top = Windows("1").Height + Windows("1").Top - 6: .Left = -5:
  .Width = Application.UsableWidth + 13: .Height = Application.UsableHeight - .Top + 7: End With  '/ 2 + 14: End With
End Sub

Sub twoWindowsTests()
With ActiveWindow:
MsgBox .Index & " " & .Caption: Exit Sub
End With
Windows("1").WindowState = xlNormal
With Windows(1):
.Top = -21: .Left = -4: .Width = Application.UsableWidth + 10: .Height = Application.UsableHeight / 2 + 21
End With
With Windows("_"):
.Top = Application.UsableHeight / 2: .Left = -4:
.Width = Application.UsableWidth + 10: .Height = Application.UsableHeight
End With
End Sub


Sub testAW(): With ActiveWindow: .Close:
'.WindowState = xlNormal
'.Top = -21: .Left = -4: .Width = Application.UsableWidth + 10: .Height = Application.UsableHeight / 2 + 21
''ActiveWindow.NewWindow.Caption = "COPY"
'With Windows.Item(2):
'.Top = Application.UsableHeight / 2: .Left = -4:
'.Width = Application.UsableWidth + 10: .Height = Application.UsableHeight
''.Close
'End With
'.WindowState = xlMaximized
Rem: Windows
'Set newW = ActiveWindow.NewWindow           '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| .Zoom |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'newW.Caption = "COPY"
'Windows.CompareSideBySideWith newW.Caption  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'Windows.SyncScrollingSideBySide = True      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Windows.ResetPositionsSideBySide            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Windows.BreakSideBySide '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  side-by-side mode
'MsgBox Windows.Arrange '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Windows.Item (1) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| .Count (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1)
'MsgBox Windows.Parent.name & " " & Application.name '=Application
'Set newW = Nothing

'MsgBox decode(ActiveWindow.WindowState, -4137, "xlMaximized", -4140, "xlMinimized", -4143, "xlNormal")
'MsgBox ActiveWindow.UsableHeight & " " & .Height '/UsableWidth - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'ActiveWindow.Visible = False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'ActiveWindow.WindowNumber 'a window named "Book1.xls:2" has 2 as its window number
'MsgBox ActiveWindow.Zoom '100 = normal size

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.EnableResize = Not ActiveWindow.EnableResize       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| res.)
'ActiveWindow.Height = 100: MsgBox .Height: .Left = 10: MsgBox .Left '.Top = 10: Width = 400

'MsgBox .PointsToScreenPixelsX(.Selection.Left + .Selection.Width) - _
'       .PointsToScreenPixelsX(.Selection.Left) & " |fffd||fffd||fffd||fffd||fffd||fffd| " & .Selection.Width '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.Panes '.Count/(index) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Split - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.RangeFromPoint '(x,y) Returns the Shape or Range object by screen coordinates.
'MsgBox ActiveWindow.SheetViews.Count '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
'ActiveWindow.VisibleRange '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Range |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Rem: |fffd||fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.LargeScroll '(Down, Up, ToRight, ToLeft) - |fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| <PageUp>,<PageDown> + |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'ActiveWindow.SmallScroll (1) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.OnWindow = "myWindowActivate" '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'ActiveWindow.ScrollWorkbookTabs Position:=xlFirst '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'ActiveWindow.TabRatio = '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'ActiveWindow.SelectedSheets ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| WorkbookTabs |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Rem: |fffd||fffd||fffd|
'ActiveWindow.DisplayRightToLeft = Not ActiveWindow.DisplayRightToLeft 'mirror
'ActiveWindow.FreezePanes = Not ActiveWindow.FreezePanes ' freezes split panes
'ActiveWindow.Split = False '|fffd||fffd||fffd| .SplitColumn = 2: .SplitRow = 2 _
                                (.SplitHorizontal/.SplitVertical - in points) - |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' .DisplayRightToLeft, .DisplayWorkbookTabs, .DisplayWorkbookTabs

'MsgBox ActiveWindow.Parent.name & " " & ActiveWorkbook.name ' = ActiveWorkbook
'ActiveWindow.RangeSelection 'When a graphic object is selected, .Selection returns this object (not a range of cells)
'ActiveWindow.ScrollColumn = 3 '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Panes.Item()) (~.ScrollRow)
'.ScrollIntoView Left:=1, Top:=20, Width:=100, Height:=500 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End With: End Sub

Sub |fffd||fffd||fffd||fffd||fffd||fffd|1()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|!)
'|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?) |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?
'
    'ActiveWindow.NewWindow.Caption
    Set newW = ActiveWindow.NewWindow
    Windows.CompareSideBySideWith newW.Caption
    Windows.ResetPositionsSideBySide
End Sub
Attribute VB_Name = "srv_debugger"
Public AppD As Application

Sub Debugger_Stop(): logging = False: Set AppD = Nothing: End Sub 'New

Function Debugger_Show&(): f_name = pthRoot(ThisWorkbook.path) & "\_common\debugger.xls"
Set AppD = New Excel.Application: AppD.Workbooks.Open f_name: 'App1.ActivateMicrosoftApp
                                  AppD.Visible = False:       'App1.DisplayFullScreen = True
AppD.Caption = "|fffd| - Debugger":  AppD.ActiveWindow.Caption = "" '"|2ea|V - Debugger"
Debugger_Show& = FindWindow(vbNullString, "|fffd| - Debugger"): AppD.Run "debugger.xls!SetAppC", Application.Application: End Function

Private Sub SetAppD(dApp As Application): If AppD Is Nothing Then remind: Set AppD = dApp: l% = 1: LogString "out SetAppD", l: 'remind:
                                     If FnFormIsLoaded("PF") Then logging = True: PF.setModeActual:
End Sub 'Debugger

Sub deb_test()
AppD.Run "debugger.xls!SetAppC", App
'App1.Sheets(2).Activate
'DebuggerLogString "debugger_test"
End Sub


Sub DebuggerLogString(funcName$)
AppD.Run "debugger.xls!LogString", funcName$
End Sub

Rem ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Rem: Debugger - Object '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| service_Items (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| d0_if |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'Tip: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "dbg1" -> "dbl_" (|fffd|-|fffd| |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Function dbg(debugMsg, Optional d0 As Boolean = True): On Error GoTo errL: dbg = debugMsg: If False Or Not d0 Then Exit Function  ' <<< |fffd||fffd||fffd||fffd||fffd||fffd| STOP-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Debug.Print Hour(Now()) & ":" & Minute(Now()) & ":" & Second(Now()) & ">>  '" & debugMsg & "'": Exit Function
errL: Debug.Print Hour(Now()) & ":" & Minute(Now()) & ":" & Second(Now()) & ">>  Bad value resived!": End Function
Function dbgif(debugCond As Boolean, debugMsg) As Boolean: dbgif = debugCond: dbg debugMsg, debugCond: End Function '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Until
Function dbgNif(dbgCond As Boolean, debugMsg) As Boolean: dbgNif = dbgCond: dbg debugMsg, Not dbgCond: End Function '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| While
Rem: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| API_lib.service_Items.dbgl |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function dbgl(debugMsg, Optional Msg2, Optional Msg3, Optional Msg4, Optional Msg5)
                       API_lib.service_Items.dbgl debugMsg, Msg2, Msg3, Msg4, Msg5: End Function
Attribute VB_Name = "srv_disp_iMap"
'?????????????????????????????????????????????????????
Rem: Dispetcher iMap (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'?????????????????????????????????????????????????????
'Public Const iMaping = True

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function iMaping() As Boolean: On Error Resume Next: iMaping = Not Sheets("Dispetcher_").Columns(1).Hidden: End Function

'################
'   Services
'################
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Sub iMapSets(l_Set%, n_Set%, Optional lcl As Boolean): ls ">", "iMapSets", l_Set%, n_Set%, lcl
        With Workbooks("MAIN.XLSB").Sheets("Dispetcher_"):
                             If checkSets4iMap(n_Set%) Then
                                 If Not iMaping Then On Error Resume Next: Sheets("Dispetcher_").Columns(1).Hidden = False: _
                                                          For Each Pic In .Pictures: Pic.Left = .Cells(1, 2).Left: Next Pic: On Error GoTo 0:
                                                     'If Not dispIcons Then dispUpdateTL '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                             ElseIf iMaping Then iMapHider: Exit Sub: End If: End With: If Not lcl Then unLockWs: iMapCleanIco: 'LockWs 'clean up
        For c_Set% = l_Set% To n_Set% Step n_Set% - l_Set%  '(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
         last_set$ = PF.Controls("ImageWS" & c_Set% - 1).tag 'SCSForm.Matrix_get(True)
NoSup:         asu = False: For i% = 1 To 4: s$ = prsBetween|fffd|(i%, "|", "|", last_set$)
                            If Replace(s$, "0", "") <> "" Then If exists("_" & s$) Then iMapUpdH CLng(s$), c_Set%, "+", Not lcl '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| iMap Icon
        Next i%: asu = True: SUp: Next c_Set%: iMapRestrIco lcl: ls "<", "iMapSets", l_Set%, n_Set%, lcl: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| iMapCleanIco

'iMap - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub iMapFullUpd(): Dim act_sets$, act_set As Boolean: ls "~", "iMapFullUpd"
      '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
LP 2:    For i% = 1 To 4: With PF.Controls("ImageWS" & i% - 1): c_tag$ = .tag: newTag$ = c_tag$: .ControlTipText = "|" '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WndCaptions
        '|fffd||fffd||fffd||fffd||fffd||fffd| hwnd |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
LP 4:       For j% = 1 To 5: s$ = prsBetween|fffd|(j%, "|", "|", c_tag$)
            If Replace(s$, "x", "0") <> "0" Then 'not blank/frozen
               If IsWindow(CLng(blank(s$, 0))) = 0 Then hWnd& = 0: newTag$ = Replace(c_tag$, "|" & s$ & "|", "|0|") _
                                                   Else hWnd& = CLng(s$): iMapUpdH hWnd&, i%: act_set = True '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
LP 8:             .ControlTipText = .ControlTipText & IIf(hWnd& = 0, "", Replace(Replace(getWndCaption$(hWnd&), "\", " "), ".", " ")) & "|"
            Else: .ControlTipText = .ControlTipText & "|": End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WndCaptions: "||||||" = |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (5-|fffd| - Dual)
LP 10:      Next j%: .tag = newTag$: End With: act_sets$ = act_sets$ & IIf(act_set, CStr(i%), ""): act_set = False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
LP 11:    Next i%: If between(Str2Int&(act_sets$), 1, 4) Then LM act_sets$: iMapHider: 'PF.c_Set = Str2Int&(act_sets$): PF.iniMode: iMapHider
    End Sub        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| set |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| ?|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|? |fffd| +|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|+
                   
                   
'################
'   Methods
'################

'clean up iMap Icons
Sub iMapCleanIco(): If Not iMaping Then Exit Sub Else ls "~", "iMapCleanIco": On Error Resume Next
NoSup: With Sheets("Dispetcher_"): For Each Pic In .Pictures: If BetweenShift(Pic.Left, .Cells(1, 1).Left, 2) Then Pic.Delete
Next: End With: End Sub 'SUp:

'iMap Icons restoring
Sub iMapRestrIco(Optional pass As Boolean): If pass Or Not iMaping Then Exit Sub Else ls "~", "iMapRestrIco"
        On Error Resume Next: NoSup: With Sheets("Dispetcher_"): For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For
        If .Cells(r&, 1) <> "" Then fnm$ = ThisWorkbook.path & "\icons\disp\vitrages\" & IIf(.Cells(r&, 3).Font.ColorIndex = 2, "", "white\") _
                         & .Cells(r&, 1) & ".ico": |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Cells(r&, 1), fnm$, True, True
        Next: End With: SUp: End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| iMap
Sub iMapHider(): With Sheets("Dispetcher_"): If .Columns(1).Hidden Then Exit Sub Else unLockWs .Index
        ls ">", "iMapHider": Call iMapCleanIco: .Columns(1).ClearContents: .Columns(1).Hidden = True: End With: End Sub
                 
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
Function checkSets4iMap(insteadSet%) As Boolean
        For i% = 1 To 4: If i% <> insteadSet% Then If Replace(Replace(PF.Controls("ImageWS" & i% - 1).tag, "|0", ""), "|x|", "|") <> "|" Then Exit For
        Next: checkSets4iMap = i% <> 5: ls "~", "checkSets4iMap", checkSets4iMap, insteadSet%: End Function


'################
'   Low LVL
'################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| iMap |fffd||fffd| hwnd
Sub iMapUpdH(ByVal hWnd&, ByVal c_Set%, Optional act$ = "+", Optional noIco As Boolean): NoSup: With Sheets("Dispetcher_"): If hWnd& = 0 Then Exit Sub Else If Not iMaping Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CollectW|ReleaseW |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "-"
On Error GoTo exitL:
CR = Workbooks("MAIN.XLSB").Names("_" & CStr(hWnd&)).value: pos = InStr(1, CR, "!$"): far_row = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
    far_WS = Mid(CR, 2, pos - 2): If far_WS <> "Dispetcher_" Then Msg "iMapSets: " & far_WS & " called!": Exit Sub Else last_map$ = .Cells(far_row, 1)
    If act$ = "+" Then
         .Cells(far_row, 1).value = Replace(IIf(last_map$ = "", "1234", last_map$), c_Set%, IIf(c_Set% = PF.c_Set, c_Set2rgbyU$(c_Set%), c_Set2rgbyL$(c_Set%))) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1-4)
         .Cells(far_row, 1).value = Replace(.Cells(far_row, 1), IIf(c_Set% = PF.c_Set, c_Set2rgbyL$(c_Set%), c_Set2rgbyU$(c_Set%)), IIf(c_Set% = PF.c_Set, c_Set2rgbyU$(c_Set%), c_Set2rgbyL$(c_Set%)))
    Else: With PF.Controls("ImageWS" & c_Set% - 1): .tag = Replace(.tag, CStr(hWnd&), "0"): End With
         .Cells(far_row, 1).value = Replace(.Cells(far_row, 1), c_Set2rgbyU$(c_Set%), c_Set%): End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "-" (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    If noIco Or last_map$ = .Cells(far_row, 1) Then Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "1G|fffd|4.ico" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each Pic In .Pictures: If BetweenShift(Pic.Top, .Cells(far_row, 1).Top, 2) And _
                                  BetweenShift(Pic.Left, .Cells(far_row, 1).Left, 2) Then Pic.Delete: Exit For:    'Icon
    Next: fnm$ = ThisWorkbook.path & "\icons\disp\vitrages\" & IIf(.Cells(far_row, 3).Font.ColorIndex = 2, "", "white\") & .Cells(far_row, 1) & ".ico"
          |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Cells(far_row, 1), fnm$, True, True: End With:
exitL: SUp: End Sub
Function c_Set2rgbyU$(i%): c_Set2rgbyU$ = IIf(i% = 1, "R", IIf(i% = 2, "G", IIf(i% = 3, "B", "Y"))): End Function
Function c_Set2rgbyL$(i%): c_Set2rgbyL$ = IIf(i% = 1, "|fffd|", IIf(i% = 2, "|fffd|", IIf(i% = 3, "|fffd|", "|fffd|"))): End Function

Attribute VB_Name = "srv_disp_test"
'?????????????????????????????????????????????????????
Rem: Dispetcher TESTS & Services
'?????????????????????????????????????????????????????

Sub test_Window_underCurs(): test_Window_by_hwnd (0): End Sub

Sub test_Window_by_hwnd(Optional ByVal hWnd&): Dim tPT As POINTAPI: ms$ = ""
    If hWnd& = 0 Then GetCursorPos tPT: hWnd& = WindowFromPoint(tPT.x, tPT.Y) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| pointed |fffd||fffd||fffd||fffd|
    If GetTopParentH(hWnd&) = SCSForm.t_hwnd Then ms$ = "[TARGET]" Else _
    ms$ = decode(SCSForm.inCollection(GetTopParentH(hWnd&)), 1, "[http_hwnd]", 2, "[r_hwnd]", 3, "[bl_hwnd]", 4, "[br_hwnd]", 5, "[d_http_hwnd]")
    ms$ = IIf(ms$ = "0", "", ms$ & Chr(10)) & IsWindow(hWnd&) & ": " & CStr(hWnd&) & ": " & getWndCaption$(hWnd&, False) & Chr(10):
    Dim rt As rect, H&: H& = hWnd&: While H& <> 0: hWnd& = H&: H& = GetParent(hWnd&): cap$ = getWndCaption$(H&, False) 'hwnd& & ": " &
    ms$ = ms$ & IsWindow(H&) & ": " & CStr(H&) & ": " & IIf(H& <> 0, cap$, "-") '& Chr(10)
    GetWindowRect H&, rt: ms$ = ms$ & "        Size: (" & rt.Left & ";" & rt.Top & "):(" & rt.Right & ";" & rt.Bottom & ")" & Chr(10)
    Wend: ms$ = iif_$(hWnd& = SCSForm.vb_hwnd, "[vb_hwnd]") & _
                iif_$(hWnd& = GetActiveWindow&, "[ACTIVE]") & _
                iif_$(hWnd& = GetDesktopWindow&, "[Desktop]") & _
                iif_$(hWnd& = GetForegroundWindow&, "[FOREGROUND]") & _
                                                                Chr(10) & ms$
    'If FnFormIsLoaded("SCSForm") Then MsgBox hwnd& & " " & GetTopParentH(hwnd&) & " " & SCSForm.inCollection(hwnd&)
    sadd ms$, Chr(10) & "IsIconic&: " & IsIconic&(hWnd&)
    sadd ms$, Chr(10) & "IsWindow&: " & IsWindow&(hWnd&)
    sadd ms$, Chr(10) & "IsWindowVisible&: " & IsWindowVisible&(hWnd&)
    sadd ms$, Chr(10) & "WindowState: " & decode(getWindowState%(hWnd), SW_RESTORE&, "SW_RESTORE&", SW_MINIMIZE&, "SW_MINIMIZE&", SW_MAXIMIZE&, "SW_MAXIMIZE&")
    sadd ms$, Chr(10) & "GetTopWindow&: " & GetTopWindow&(hWnd&) & " - " & getWndCaption$(GetTopWindow&(hWnd&))
    sadd ms$, Chr(10) & "vitrage_Key: " & vitrage_Key(hWnd&): Set MyData = New DataObject: MyData.SetText ms$: MyData.PutInClipboard: Set MyData = Nothing
    If Application.vbe.MainWindow.Visible Then dbg ms$ Else Msg ms$ ', on_timess_flg
End Sub

Sub test() '~
    test_Window_by_hwnd 65962: Exit Sub
    'jump left (_underCurs qwick test)
    'Dim tPT As POINTAPI, hwnd&: GetCursorPos tPT: hwnd& = (WindowFromPoint(tPT.X, tPT.Y)) 'GetTopParentH
    hWnd& = FindWindow(vbNullString, "Run") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
    Dim rt As rect: GetWindowRect hWnd&, rt: rt.Left = rt.Left - 20:
                                         rt.Right = rt.Right - 20: SetWindowRect hWnd&, rt
    Exit Sub
    'Dim tPT As POINTAPI, hwnd&: GetCursorPos tPT: hwnd& = GetTopParentH(WindowFromPoint(tPT.X, tPT.Y))
    'If IsWindow(hwnd&) Then SetLayeredWindowAttributes hwnd&, 0, 255, LWA_ALPHA
    'Exit Sub
    If Cells(1, 1).Hyperlinks.Count Then Cells(1, 1).Hyperlinks(1).Follow NewWindow:=False, AddHistory:=True
    Exit Sub

    fpath$ = ThisWorkbook.path & "\icons\disp\198296.ico"
    Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(fpath$) Then fso.DeleteFile fpath$
    Set fso = Nothing
    Exit Sub

NoSup:     unlockWB
    Sheets(3).Range("A1").AutoFilter field:=1, Criteria1:=""
LockWB:     SUp
    'MsgBox GetTopParentH(2491624) 'ActiveCell.Interior.ColorIndex
    'Set SCSForm.ToggleButton2.Picture = LoadPicture(ThisWorkbook.path & "\icons\disp\3147618.ico")
End Sub

Rem: Services
'=========================================================================================
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub test_bm(): Dim i%: On Error Resume Next: 'Call dispSort: Exit Sub
              For Each bm In Workbooks("MAIN.XLSB").Names
                If prsBefore("!", bm.RefersTo) = "=" & "Dispetcher_" Then inc i%: 'MsgBox bm.name & " : " & bm.RefersTo
                If bm.RefersTo = "=" & "Dispetcher_" & "!" & Cells(ActiveCell.row, 1).Address And _
                   bm.name <> "_" & Cells(ActiveCell.row, 2) Then MsgBox bm.name: bm.Delete
              Next bm: Do: inc r&: Loop Until Cells(r&, 2) = ""
              If MsgBox(i% & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Dispetcher_" & Chr(10) & IIf(r& - 1 = i%, "|fffd||fffd||fffd|", r& - 1) & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. " _
                & IIf(r& - 1 = i%, "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| bm_cleaning?"), IIf(r& - 1 = i%, vbInformation, vbYesNo + vbExclamation)) = vbYes Then bm_cleaning: test_bm
End Sub
              
Sub bm_cleaning(Optional dont As Boolean): If dont Then Exit Sub
With Sheets("Dispetcher_"): For Each bm In Workbooks("MAIN.XLSB").Names
  If prsBefore("!", bm.RefersTo) = "=" & "Dispetcher_" Then
    CR = bm.value: pos = InStr(1, CR, "!$"): far_row = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
    If bm.name <> "_" & .Cells(far_row, 2) Then bm.Delete
ElseIf bm.name Like "*_FilterDatabase" Or (bm.name Like "_4_*" And bm.name <> "_4_ID") Then bm.Delete: 'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & bm.name: 'Additional
End If: Next bm: End With: End Sub

Attribute VB_Name = "srv_dispetcher"
'Public App0 As Application '0ther
Public App1 As Application 'http_hwnd   servant
Public App2 As Application 'r_hwnd      servant
Public App3 As Application 'bl_hwnd     servant
Public App4 As Application 'br_hwnd     servant

'Private hWndCMW&, wRECTCMW As RECT
Private testTry As Boolean       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public vitrage As New Collection '|fffd||fffd||fffd||fffd||fffd||fffd| SCSForm.GetTBhwnd (New |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| SetTBhwnd
'vitrage.Add - |fffd||fffd||fffd|. CStr()!
'vitrage.Remove - i% |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, CStr() - Key
'vitrage[.Item](i%) = vitrage[.Item](CStr(Key))
'custom (|fffd||fffd||fffd||fffd| |fffd| Visual Studio 2008)
Sub vitrage_Clear(): For i = 1 To vitrage.Count: vitrage.Remove 1: Next: End Sub
Rem: Boolean (0=False |fffd||fffd|! Not 1(True?) = -2((x+1)*(-1)) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Contains c Not CBool()
Function vitrage_Get&(Key): vitrage_Get& = collection_Get(vitrage, Key): End Function 'Val |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function collection_Get(col As Collection, Key): On Error Resume Next: collection_Get = col(CStr(Key)): End Function 'common
Function vitrage_Key&(val): cval = CLng(val): If cval = 0 Then Exit Function
                   For i = 1 To 5: If vitrage_Get&(i) = cval Then vitrage_Key& = i: Exit For
                                                                              Next: End Function 'Key |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd|-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function vitrage_Add(): End Function
Function vitrage_Remove(arg1, Optional arg2): On Error Resume Next: If Not IsEmpty(arg2) Then _
        If CInt(arg2) > 5 Then vitrage.Remove CStr(vitrage_Key&(arg2)) Else If CInt(arg2) > 0 Then vitrage.Remove CStr(arg2)
        If CInt(arg1) > 5 Then vitrage.Remove CStr(vitrage_Key&(arg1)) Else If CInt(arg1) > 0 Then vitrage.Remove CStr(arg1)
        If FnFormIsLoaded("satellite") Then If satellite.Top <> -1000 Then satellite.HideMe '|fffd||fffd| target-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| hwnd |fffd| key(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1-5) |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

'?????????????????????????????????????????????????????
Rem: Dispetcher MAIN Methods
'?????????????????????????????????????????????????????
Sub App1Test(): f_name = ThisWorkbook.path & "\servants\serv1.xls"
Set App1 = New Excel.Application: App1.Workbooks.Open f_name: 'App1.ActivateMicrosoftApp
                                  App1.Visible = False 'True: 'App1.DisplayFullScreen = True
    App1.Run "serv1.xls!App1Msg": App_close App1: End Sub
'=========================================================================================
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Api SetWindowRect |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| "satellite")
Sub App_move(hWnd&, wRECT As rect): SetWindowRect hWnd&, wRECT: Exit Sub 'If Not FnFormIsVisible("satellite") Then SetWindowRect hWnd&, wRECT: Exit Sub 'CLASSIC
Dim i&: If FnFormIsLoaded("SCSForm") Then With SCSForm: i& = decode(hWnd, .http_hwnd, 1, .r_hwnd, 2, .bl_hwnd, 3, .br_hwnd, 4): End With: 'db_ i&
'If between(i&, 1, 4) Then wRECTCMW = wRECT: hWndCMW& = hWnd&:  Application.OnTime Now, "serv" & i& & "CMW" _
'                     Else SetWindowRect hWnd&, wRECT
'End Sub
Select Case i&: '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Case 1: If App1 Is Nothing Then Set App1 = New Excel.Application: App1.Workbooks.Open ThisWorkbook.path & "\servants\serv1.xla": App1.Caption = "App1servant": ' App1.Visible = True
             App1.Run "serv1.xla!CallMoveWindow", hWnd, wRECT.Left, wRECT.Top, wRECT.Right - wRECT.Left, wRECT.Bottom - wRECT.Top, 1
  Case 2: If App2 Is Nothing Then Set App2 = New Excel.Application: App2.Workbooks.Open ThisWorkbook.path & "\servants\serv2.xla": App2.Caption = "App2servant": ' App2.Visible = True
             App2.Run "serv2.xla!CallMoveWindow", hWnd, wRECT.Left, wRECT.Top, wRECT.Right - wRECT.Left, wRECT.Bottom - wRECT.Top, 1
  Case 3: If App3 Is Nothing Then Set App3 = New Excel.Application: App3.Workbooks.Open ThisWorkbook.path & "\servants\serv3.xla": App3.Caption = "App3servant"
             App3.Run "serv3.xla!CallMoveWindow", hWnd, wRECT.Left, wRECT.Top, wRECT.Right - wRECT.Left, wRECT.Bottom - wRECT.Top, 1
  Case 4: If App4 Is Nothing Then Set App4 = New Excel.Application: App4.Workbooks.Open ThisWorkbook.path & "\servants\serv4.xla": App4.Caption = "App4servant"
             App4.Run "serv4.xla!CallMoveWindow", hWnd, wRECT.Left, wRECT.Top, wRECT.Right - wRECT.Left, wRECT.Bottom - wRECT.Top, 1
  Case Else: SetWindowRect hWnd&, wRECT 'Set App0 = New Excel.Application: App0.Workbooks.Open ThisWorkbook.path & "\servants\serv0.xls": _
             App0.Run "serv0.xls!CallMoveWindow", hWnd, wRECT.Left, wRECT.Top, wRECT.Right - wRECT.Left, wRECT.Bottom - wRECT.Top, 1: App_close App0
End Select: End Sub
'Private Sub serv1CMW(): If App1 Is Nothing Then Set App1 = New Excel.Application: App1.Workbooks.Open ThisWorkbook.path & "\servants\serv1.xla": App1.Caption = "App1servant"
'                           App1.Run "serv1.xla!CallMoveWindow", hWndCMW&, wRECTCMW.Left, wRECTCMW.Top, wRECTCMW.Right - wRECTCMW.Left, wRECTCMW.Bottom - wRECTCMW.Top, 1: End Sub
'Private Sub serv2CMW(): If App2 Is Nothing Then Set App2 = New Excel.Application: App2.Workbooks.Open ThisWorkbook.path & "\servants\serv2.xla": App2.Caption = "App2servant"
'                           App2.Run "serv2.xla!CallMoveWindow", hWndCMW&, wRECTCMW.Left, wRECTCMW.Top, wRECTCMW.Right - wRECTCMW.Left, wRECTCMW.Bottom - wRECTCMW.Top, 1: End Sub
'Private Sub serv3CMW(): If App3 Is Nothing Then Set App3 = New Excel.Application: App3.Workbooks.Open ThisWorkbook.path & "\servants\serv3.xla": App3.Caption = "App3servant"
'                           App3.Run "serv3.xla!CallMoveWindow", hWndCMW&, wRECTCMW.Left, wRECTCMW.Top, wRECTCMW.Right - wRECTCMW.Left, wRECTCMW.Bottom - wRECTCMW.Top, 1: End Sub
'Private Sub serv4CMW(): If App4 Is Nothing Then Set App4 = New Excel.Application: App4.Workbooks.Open ThisWorkbook.path & "\servants\serv4.xla": App4.Caption = "App4servant"
'                           App4.Run "serv4.xla!CallMoveWindow", hWndCMW&, wRECTCMW.Left, wRECTCMW.Top, wRECTCMW.Right - wRECTCMW.Left, wRECTCMW.Bottom - wRECTCMW.Top, 1: End Sub
Sub App_close(App As Application): If App Is Nothing Then Exit Sub
              App.ActiveWorkbook.Close: Set App = Nothing: End Sub
Sub App_reset(): Exit Sub 'If Not FnFormIsVisible("satellite") Then Exit Sub '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| serv'|fffd| (Workbook_Open)
 Call App_clean: SCSForm.reParkW True: End Sub 'SCSForm.reParkW True: End Sub - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| MOD common serv
Sub App_clean(): Exit Sub 'Set App1 = Nothing: Set App2 = Nothing: Set App3 = Nothing: Set App4 = Nothing
For i = 1 To 4: j% = 0: While sag(hWnd, FindWindowLike("App" & i & "servant*")) > 0 And inc(j) < 5: SendMessage hWnd, WM_CLOSE, 0, 0: Wend: Next: End Sub
'=========================================================================================
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function dispIcons() As Boolean: With Workbooks("MAIN.XLSB").Sheets("Dispetcher_"): On Error Resume Next:
            For Each Pic In .Pictures: If BetweenShift(Pic.Left, .Cells(1, 2).Left, 2) Then dispIcons = True: Exit Function
            Next Pic: End With: End Function
'=========================================================================================

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| iMap |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub dispInvertColors(): ls ">", "dispInvertColors": Call fNoSupfor: With Sheets("Dispetcher_"): unLockWs .Index
            LM "Shape.Delete1": For Each Shape In ActiveSheet.Shapes: Shape.Delete: Next 'Icons
            'If iMaping Then
            '  For Each Pic In .Pictures: If Pic.Left = .Cells(1, 1).Left Then Pic.Delete   'Icons -
            'Next: End If:
            b_c = .Cells(1, 3).Font.ColorIndex: f_c = .Cells(1, 3).Interior.ColorIndex
                  .UsedRange.Font.ColorIndex = f_c: .UsedRange.Interior.ColorIndex = b_c
            .Range("A1:" & "B" & .UsedRange.rows.Count).Font.ColorIndex = b_c
            FindForm.set_bk_color: PF.reBackC
            If iMaping Then
               For i% = 1 To .UsedRange.rows.Count: If .Cells(i%, 2) = "" Then Exit For                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| iMap
                 If .Cells(i%, 1) <> "" Then _
                  fnm$ = ThisWorkbook.path & "\icons\disp\vitrages\" & IIf(f_c = 2, "", "white\") & _
                  .Cells(i%, 1) & ".ico": |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Cells(i%, 1), fnm$, True, True             '+
            Next: End If: For i% = 1 To .UsedRange.rows.Count: If .Cells(i%, 2) = "" Then Exit For     '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  Call dispSaveIcon(.Cells(i%, 2), ThisWorkbook.path & "\icons\disp\", .Cells(i%, 2), True)
            Next: LockWs .Index: End With: dispUpdateTL '-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| | dispGetTaskList
            If FnFormIsLoaded("SCSForm") Then
                                fdeep% = 0: smart_refreezing 'last_active_hwnd = SCSForm.GetTBhwnd&(3) 'custom trans_level
                                'If Not smart_freezing Then smart_freezing_start       'unlock (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?)
            End If: ls "<", "dispInvertColors": End Sub

'=========================================================================================
'################
'   Services    '=========================================================================================
'################
Function GetFolderViewHwnd&(Optional ByVal cpt$): If getWndCaption(fvHwnd&) = "FolderView" Then GetFolderViewHwnd& = fvHwnd&: Exit Function
        c& = 0: i& = GetDesktopWindow&: ls ">", "GetFolderViewHwnd&", i& 'FindWindow(vbNullString, "FolderView") |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If cpt$ = "" Then cpt$ = "FolderView" '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. "|fffd||fffd||fffd||fffd|" |fffd| Windows10)
        Do: If getWndCaption(inc(i&)) = cpt$ Then GetFolderViewHwnd& = sag(fvHwnd&, i&): Exit Do '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 4 000 000
        Loop Until inc(c&) > 5000000: If cpt$ = "FolderView" Then SaveParam "FolderViewHwnd", fvHwnd&
                                      ls "<", "GetFolderViewHwnd&", GetFolderViewHwnd&, i&, c&: End Function
Function FindWindowLike&(like_mask$)
Dim currWnd&: currWnd = GetWindow(GetActiveWindow&, GW_HWNDFIRST) 'GetDesktopWindow& - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     Do While currWnd <> 0 And currWnd_old <> currWnd: currWnd_old = currWnd '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If currWnd > 0 Then
              Length = GetWindowTextLength(currWnd) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| CurrW nd
              ListItem = Space(Length + 1)          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
              Length = GetWindowText(currWnd, ListItem, Length + 1) ': MsgBox Length .Cells(r&, 1).Tag = "_" & CStr(currWnd&):
              'IsWindowVisible(currWnd&) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd| Program Manager "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
              If Length > 0 Then If getWndCaption(sag(top_hwnd&, GetTopParentH&(currWnd&))) Like like_mask$ Then FindWindowLike& = top_hwnd&: Exit Do
            End If: currWnd = GetWindow(currWnd, GW_HWNDNEXT): DoEvents: Loop: End Function

Sub dispGetTaskListIf(): ls "~", "dispGetTaskListIf": If Not SCSForm.Visible Then Exit Sub 'ActiveSheet.name <> "Dispetcher_"
                         Dim r&: With Workbooks("MAIN.XLSB").Sheets("Dispetcher_"): Do Until .Cells(inc(r&), 2) = "":
                                                                If Left(.Cells(r&, 3), 2) = ">>" Then dispUpdateTL: Exit Sub
                                                                                      Loop: End With: dispGetTaskList: End Sub

Sub dispGetTaskList(): fNoSupfor: Dim s$, r&, wcaption$ '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| dispUpdateTL()
               ls ">", "dispGetTaskList": Dim l%: dispFullCleaning  '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| hWnd, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
fixL:         r& = 0: inc l%: Dim currWnd&: currWnd = GetWindow(SCSForm.t_hwnd, GW_HWNDFIRST): 'If l% > 1 Then MsgBox l% 'new Set
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| hWnd |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            Do While currWnd <> 0
              If currWnd > 0 Then
                Length = GetWindowTextLength(currWnd) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| CurrW nd
                ListItem = Space(Length + 1)          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Length = GetWindowText(currWnd, ListItem, Length + 1) ': MsgBox Length .Cells(r&, 1).Tag = "_" & CStr(currWnd&):
                'IsWindowVisible(currWnd&) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd| Program Manager "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
                If Length > 0 Then    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                      If GetTopParentH&(currWnd&) = currWnd& Then
                              If IsWindowVisible(currWnd&) Or (SCSForm.inHistoryW(currWnd&) + SCSForm.inCollection(currWnd&)) > 0 _
                                                           Or Left(getWndCaption(currWnd&), 4) = "ssn_" _
                                                           Or Left(getWndCaption(currWnd&), 3) = "n++" Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDB
                      If dispValidCaption(currWnd&, wcaption$) Then
                        If hasIt("MAC.XLA [running] - [", wcaption$) Then SCSForm.vb_hwnd = currWnd& 'FullScan |fffd||fffd||fffd| Get_vb_hwnd
                        With Sheets("Dispetcher_"): .Cells(inc(r&), 3) = "'" & wcaption$: .Cells(r&, 2) = currWnd&:
                             Call dispSaveIcon(.Cells(r&, 2), ThisWorkbook.path & "\icons\disp\", currWnd&): _
                             Call Set_BookMark_on(.Index, r&, "_" & CStr(currWnd&)): Call dispMarkUp_hWnd(currWnd&): End With
              End If: End If: End If: End If: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        currWnd = GetWindow(currWnd, GW_HWNDNEXT): DoEvents: Loop: If r& = 0 And l% < 10 Then GoTo fixL '|fffd||fffd||fffd||fffd||fffd||fffd| loop c |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Call iMapFullUpd: Call dispSort: Call LockWs(Sheets("Dispetcher_").Index): fSup: ls "<", "dispGetTaskList": End Sub


Sub dispUpdateTL_test(): dispUpdateTL: End Sub '***
Rem << |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| >>
Sub dispUpdateTL(Optional du As Boolean = True, Optional onlyNew As Boolean): If AC_flg Or Not du Then Exit Sub '(pass) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ls ">", "dispUpdateTL", du, onlyNew: unLockWs MainWB.Sheets("Dispetcher_").Index 'idiotic message 'Subscript out of range' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call dispCneanUp: Dim currWnd&: currWnd& = GetWindow(SCForm.t_hwnd, GW_HWNDFIRST)
    Call NoSup: Do While currWnd <> 0:
                If exists("_" & CStr(currWnd&)) Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If onlyNew Then GoTo passL
                    CR = Workbooks("MAIN.XLSB").Names("_" & CStr(currWnd&)).value: Call dispMarkUp_hWnd(currWnd&)
                    pos = InStr(1, CR, "!$"): far_WS = Mid(CR, 2, pos - 2): far_row = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
                    If far_WS <> "Dispetcher_" Then MsgBox "dispUpdateTL: " & far_WS & " called!": Exit Sub
                    With Sheets(far_WS):                        'MsgBox("dispUpdateTL: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| _" & CStr(currWnd&) & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| bm_cleaning?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo
                    If .Cells(far_row, 2) = "" Then bm_cleaning _
                                               Else If Left(.Cells(far_row, 3), 2) <> ">>" Then .Cells(far_row, 3) = "'" & getWndCaption$(currWnd&)
                    End With
                Else
                    Length = GetWindowTextLength(currWnd): ListItem = Space(Length + 1): Length = GetWindowText(currWnd, ListItem, Length + 1)
                    If Length > 0 Then If GetTopParentH&(currWnd&) = currWnd& Then If IsWindowVisible(currWnd&) Then _
                                       If dispValidCaption(currWnd&, wcaption$) Then Call dispAddTask(currWnd&)
passL:         End If: currWnd = GetWindow(currWnd, GW_HWNDNEXT): DoEvents: Loop: If onlyNew Then GoTo exitL  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
               Call dispSort: SUp: Call LockWs(Sheets("Dispetcher_").Index): FindForm.resetParker
exitL: ls "<", "dispUpdateTL": End Sub
           
'=========================================================================================
'################
'   Methods     '=========================================================================================
'################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub dispCneanUp(): On Error Resume Next: ls "~", "dispCneanUp": NoSup: With Sheets("Dispetcher_")
        For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For Else hWnd& = .Cells(r&, 2)
           If IsWindow(hWnd&) = 0 Then foundFlg = dispCneanH(hWnd&, r&) Else If .Cells(r&, 1) = "1234" Then .Cells(r&, 1) = ""
        Next: dispSort Not foundFlg: End With: SUp: End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub dispFullCleaning(): ls "~", "dispFullCleaning" 'If ActiveSheet.name <> "Dispetcher_" Then Exit Sub
            On Error Resume Next: Call unLockWs(Sheets("Dispetcher_").Index)
            With Sheets("Dispetcher_"): For r& = 1 To .UsedRange.rows.Count ': If .Cells(r&, 2) = "" Then Rows(100).ClearContents: Exit For
              If .Cells(r&, 2) = "" Then GoTo nxt Else Workbooks("MAIN.XLSB").Names("_" & .Cells(r&, 2)).Delete 'BM
nxt:         .rows(r&).ClearContents: Next 'On Error GoTo 0
        LM "Shape.Delete": For Each Shape In .Shapes: Shape.Delete: Next 'Icons
        End With: End Sub


Private Sub dispSort_test(): dispSort order:=2 + sag(testTry, Not testTry): End Sub '1 - xlAscending, 2 - xlDescending
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Sub dispSort(Optional nod As Boolean, Optional order = xlAscending): If nod Then Exit Sub Else db_ getLastCollectedRow
           i = asu: ls "~", "dispSort", nod: On Error Resume Next: NoSup: iMapCleanIco
        With Sheets("Dispetcher_"): '.UsedRange.Sort Key1:=Range("D" & .UsedRange.rows.Count), Order1:=order, Header:=xlNo, _
                                                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
                    If iMaping Then .UsedRange.Sort Key1:=.Range("A" & .UsedRange.rows.Count), Order1:=order, _
                                                    Key2:=.Range("D" & getLastCollectedRow), Order2:=order, header:=xlNo, _
                                                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom _
                               Else .UsedRange.Sort Key1:=.Range("D" & .UsedRange.rows.Count), Order1:=order, header:=xlNo, _
                                                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
                                    '.UsedRange.Sort Key1:=Range("D" & getLastCollectedRow), Order1:=order, Header:=xlNo, _
                                                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom:
                                    '.UsedRange.Sort Key1:=Range("D" & getLastCollectedRow), Order1:=order, _
                                                    Key2:=Range("D" & .UsedRange.rows.Count), Order2:=order, Header:=xlNo, _
                                                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom ', DataOption1:=xlSortNormal
        For r& = 1 To .UsedRange.rows.Count: If .Cells(r&, 2) = "" Then Exit For Else Call Set_BookMark_on(.Index, r&, "_" & .Cells(r&, 2))
        Next: End With: With ActiveWindow: If ActiveSheet.name = "Dispetcher_" Then _
                                                    If r& <= 9 Then Cells(1, 4).Select: .FreezePanes = False Else _
                                           If Not .FreezePanes Then Cells(9, 4).Select: .FreezePanes = True '15'11 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        End With: iMapRestrIco: SUp: End Sub 'iMap*Ico - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ico |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|---------------------------------------------------------------------------- cCaption$ - output parameter /* |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| */
Function dispValidCaption(currWnd&, Optional cCaption$) As Boolean: If currWnd& = 0 And cCaption$ = "" Then Exit Function 'nothing to check
                                             cCaption$ = getWndCaption$(currWnd&): On Error Resume Next '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cCaption$ :"UIRibbonDockLeft" - |fffd||fffd||fffd||fffd| Paint
       If (Replace(Replace(Replace(Replace(Replace(getWndCaption(GetTopWindow&(currWnd&)), "Standart", ""), "MsoDockLeft", ""), "Selected Tab", ""), "Frame Splitter", ""), "UIRibbonDockLeft", "") <> "" _
                 Or (cCaption$ Like "*@*.*" And Not hasIt(" ", cCaption$))) _
            And Not (cCaption$ Like "*Chrome*" Or cCaption$ Like "*Adobe Acrobat Reader*" Or cCaption$ Like "*.pdf*" Or _
                     cCaption$ Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows Media*") Then Exit Function  '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", MsoDockLeft |fffd| VBE, "Selected Tab" - N++
        dispValidCaption = cCaption$ <> "" And (posFirst("|2ea|V", cCaption$) + posFirst("MAIN.XLSB", cCaption$) + posFirst("Winamp Playlist", cCaption$) _
                                              + posFirst("Program Manager", cCaption$) + posFirst("SQL Assistant", cCaption$) = 0 Or Left(cCaption$, 1) = "^") _
       And Not cCaption$ = "SlickRun" And Not cCaption$ Like "*SlickRun (SETUP)" And Not cCaption$ Like "*SlickJot*" And Not cCaption$ Like "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| *" _
       And Not isFullPartOf(cCaption$, "Yea Chess||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd|""|HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||RISK_USER@XEMISDB|RETAIL_MIS@DWHUSERS_PROD" & _
                            "|collectsm@COLLECTSM|CPU Meter|Dynamic Input|Lotus Notes|SlickRun||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|||fffd||fffd||fffd||fffd||Default IME|Risk_user@XEMISDB|retail_mis@DWHUSERS_PROD|", _
                            "|") And currWnd& <> SCSForm.t_hwnd: End Function 'Excel| -|fffd||fffd||fffd||fffd|. (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) '|Risk_user@XEMISDB|retail_mis@DWHUSERS_PROD| = "PL/SQL Developer - "(2-|fffd| |fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    '+ posFirst("Excel - ", cCaption$) + posFirst("[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", cCaption$) +  posFirst("Lotus Notes", cCaption$) + posFirst("Winamp", cCaption$)

Function exceptionList3(currWnd&, Optional wcaption$) As Boolean: wcaption$ = getWndCaption$(currWnd&)
         exceptionList3 = wcaption$ = "SlickJot (JOT) {WinKey+J} -|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-": End Function
'-----------------------------------------------------------------------------------------

Sub dispHeaderSet(): fnm1$ = ThisWorkbook.path & "\icons\other\DeusEx.ico"
                     fnm2$ = ThisWorkbook.path & "\icons\disp\DeusEx.ico"
        With Sheets("Dispetcher_"): .Cells(1, 3) = "Processes": .Cells(1, 4) = "*"
        Call |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(fnm1$, fnm2$, 24): |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .Cells(1, 2), fnm2$, True, True: End With: End Sub

'=========================================================================================
'################
'   Low LVL     '=========================================================================================
'################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Dispetcher
Sub dispMarkUp_hWnd(hWnd&): If hWnd& = 0 Then Exit Sub Else ls "~", "dispMarkUp_hWnd", , hWnd&: unLockWs Sheets("Dispetcher_").Index
        If exists("_" & CStr(hWnd&)) Then
            CR = Workbooks("MAIN.XLSB").Names("_" & CStr(hWnd&)).value
            pos = InStr(1, CR, "!$"): far_WS = Mid(CR, 2, pos - 2): If far_WS <> "Dispetcher_" Then Msg "<" & far_WS & "> is used instead <Dispetcher_>!": Exit Sub
                                      far_row = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
        On Error Resume Next 'Disp nonactive?
            With Sheets(far_WS).Cells(far_row, 3): '.Font.ColorIndex = 2: .Interior.ColorIndex = 1:
                If hWnd& = SCSForm.http_hwnd Then .Font.Italic = True: .Font.Bold = False: .Font.Underline = False: Sheets(far_WS).Cells(far_row, 4) = 5: Exit Sub '5-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                i% = SCSForm.inCollection(hWnd&): If i% > 0 Then .Font.Italic = False: .Font.Bold = True: .Font.Underline = False: Sheets(far_WS).Cells(far_row, 4) = i%: Exit Sub
                i% = SCSForm.inHistoryW(hWnd&): If i% > 0 Then .Font.Italic = False: .Font.Bold = False: .Font.Underline = True: Sheets(far_WS).Cells(far_row, 4) = "history" & i%: Exit Sub
                .Font.Bold = False: .Font.Underline = False: .Font.Italic = False: End With: Sheets(far_WS).Cells(far_row, 4).value = "other"
        'Else: MsgBox CStr(hWnd&) & " not found":
        End If: End Sub

'ADD
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub dispAddTask(hWnd&): Dim r&: If hWnd& < 0 Then Exit Sub Else ls "~", "dispAddTask", hWnd&
        Call unLockWs(Sheets("Dispetcher_").Index) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
        If exists("_" & CStr(hWnd&)) Then dispMarkUp_hWnd (hWnd&): Call dispSort: GoTo extL Else r& = Sheets("Dispetcher_").UsedRange.rows.Count - 1: NoSup
               With Sheets("Dispetcher_"): .Cells(inc(r&), 3) = "'" & getWndCaption$(hWnd&): .Cells(r&, 2) = hWnd&
                                            Call dispSaveIcon(.Cells(r&, 2), ThisWorkbook.path & "\icons\disp\", hWnd&)
                                            Call Set_BookMark_on(.Index, r&, "_" & CStr(hWnd&)): Call dispMarkUp_hWnd(hWnd&)
               Call dispSort: Call SUp: LockWs .Index: End With ': Exit Sub
extL:         If ActiveSheet.name = "Dispetcher_" Then CR = Workbooks("MAIN.XLSB").Names("_" & CStr(hWnd&)).value: pos = InStr(1, CR, "!$"): _
                               r& = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$"))): Range("B" & r& & ":C" & r&).Select 'focus
        iMapUpdH hWnd&, PF.c_Set: End Sub '[dispSort: [Exit Sub]]
        
'DEL
Private Sub dispCneanH_test(): For Each Pic In ActiveSheet.Pictures: db_ Cells(5, 2).Top & " vs " & Pic.Top: Next: End Sub 'If pic.Top = Cells(5, 2).Top Then MsgBox 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function dispCneanH(hWnd&, Optional r&) As Boolean: With Sheets("Dispetcher_"): If Not exists("_" & CStr(hWnd&)) Then Exit Function Else ls "~", "dispCneanH", hWnd&
        If r& = 0 Then CR = Workbooks("MAIN.XLSB").Names("_" & CStr(hWnd&)).value: pos = InStr(1, CR, "!$"): _
                       r& = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
            fileDelete (ThisWorkbook.path & "\icons\disp\" & CStr(hWnd&) & ".ico")   'dispSavedIcon
            For Each Pic In .Pictures: If BetweenShift(Pic.Top, .Cells(r&, 2).Top, 2) _
                                                  Then Pic.Delete: 'Exit For 'ALL row Icons (+-2 pix)
            Next: Workbooks("MAIN.XLSB").Names("_" & hWnd&).Delete: .rows(r&).ClearContents 'text&BM
            End With: dispCneanH = True: End Function
       
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub dispSaveIcon(ByRef PicRange As Range, ByVal PicPath$, hWnd&, Optional reload As Boolean) '"\icons\disp\"
        Set fso = CreateObject("Scripting.FileSystemObject")
        fnm$ = PicPath & CStr(hWnd&) & ".ico": If Not reload Then If fso.FileExists(fnm$) Then GoTo oL '1181012'
        'reload (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If sag(fnNm$, getSavedIco$(PicPath$, hWnd&)) <> "" Then GoTo nL '(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If hWnd& <> SCSForm.http_hwnd Then '|fffd||fffd|. OpenHTTP |fffd||fffd||fffd| Matrix
            Dim outArray() As Byte: Call SaveHICONtoArray(GetWindowsICO(hWnd&), outArray)
            Dim nFile%: nFile = FreeFile: Open fnm$ For Binary Access Write As #nFile: Put #nFile, , outArray: Close #nFile
        Else: fnNm$ = PicPath & "saved\new_one" & IIf(FindForm.bk_color_is_black, "_b", "") & ".ico" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
retryL:             On Error Resume Next: Set mfl = fso.GetFile(fnNm$): mfl.Copy (fnm$): Set mfl = Nothing: On Error GoTo 0
                '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|c|fffd||fffd||fffd||fffd|                     '#22-24
        End If: If Not |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(fnm$, fnm$, 22) Then GoTo nL '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
oL:                 If |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(PicRange, fnm$, True, True) Is Nothing Then
                  'fnNm$ = PicPath & "saved\nemo" & IIf(FindForm.bk_color_is_black, "_b", "") & ".ico": GoTo retryL '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ico (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
nL:             If Not fso.FileExists(fnNm$ & ".ico") Then GoTo exitL
                        'If InStr(1, cptn$, "Lotus") > 0 Then 'Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        '                                         fnNm$ = PicPath & "saved\lotus.ico"
                        'ElseIf InStr(1, cptn$, "Skype") > 0 Then fnNm$ = PicPath & "saved\Skype.ico"
                        'ElseIf InStr(1, cptn$, "Visual Basic") > 0 Then fnNm$ = PicPath & "saved\Visual Basic.ico"
                        '                               Else: GoTo exitL: End If
                   'End If:
                   If FindForm.bk_color_is_black Then If fso.FileExists(fnNm$ & "_b.ico") Then fnNm$ = fnNm$ & "_b" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                   fnNm$ = fnNm$ & ".ico": GoTo retryL
                'ElseIf hwnd& <> SCSForm.http_hwnd Then '|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
                End If: Set fso = Nothing: Exit Sub
exitL:                      Set fso = Nothing: fileDelete (fnm$): End Sub
       
Function getSavedIco$(ByVal PicPath$, hWnd&, Optional cptn_$): cptn_$ = getWndCaption$(hWnd&): PicPath$ = PicPath$ & "saved\"
        Set fso = CreateObject("Scripting.FileSystemObject")
        If InStr(1, cptn_$, "Notepad++") > 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (FIRST try without!)
                                                   getSavedIco$ = PicPath$ & "Notepad++": Exit Function
    '    If InStr(1, cptn$, "Skype") > 0 Then cptn$ = "Skype": GoTo nL
    '    If InStr(1, cptn$, "SlickJot") > 0 Then cptn$ = "SlickJot": GoTo nL
        Else: cptn$ = Replace(prsBeforeUp(" ", cptn_$), "/", "_"): End If '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If fso.FileExists(PicPath & cptn$ & ".ico") Then getSavedIco$ = PicPath$ & cptn$: Exit Function
        '|fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|-" |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        cptn$ = prsAfter|fffd|(prsCount(" ", cptn_$), " ", cptn_$)
        If fso.FileExists(PicPath & cptn$ & ".ico") Then getSavedIco$ = PicPath$ & cptn$: Exit Function
Set fso = Nothing: End Function
       
Function getLastCollectedRow(): 'FOR dispSort 'If Not iMaping Then Exit Function
        With Sheets("Dispetcher_"): r% = 0: Do: Loop Until .Cells(inc(r), 1) = ""
        If dec(r) Then getLastCollectedRow = r Else getLastCollectedRow = .UsedRange.rows.Count
        End With: End Function

Sub load_temporal_replaced_hwnd(to_pos%): On Error Resume Next: TBsavedName$ = "TBsavedhwnd" & PF.c_Set & to_pos%
  If sag(TBhwnd2&, CLng(LoadParam(TBsavedName$))) = 0 Then Exit Sub Else SaveParam TBsavedName$, "0" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If IsWindow(TBhwnd2&) Then If SCSForm.inCollection(TBhwnd2&) = 0 Then SCSForm.CollectW TBhwnd2&, to_pos% 'Else With PF.Controls("ImageWS" & PF_cSet% - 1): _
  SCSForm.reSetUncollected TBhwnd2&: .tag = rePlace(.tag, "|" & hwnd& & "|", "|" & TBhwnd2& & "|"): SaveParam "PF_Set" & PF_cSet%, .tag & CInt(SCSForm.Y_split) & "|": End With
End Sub
        
'=========================================================================================
'################
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|     '=========================================================================================
'################

Public Sub dispDblClick(): WSim: Dim hWnd&: If Not FnFormIsLoaded("SCSForm") Then Call remind 'customSC_Restore
If FnFormIsLoaded("SCSForm") Then If ActiveSheet.name = "Dispetcher_" Then If Cells(ActiveCell.row, 2) <> "" _
  Then hWnd& = Cells(ActiveCell.row, 2) Else If Cells(ActiveCell.row, 3) <> "" Then _
    Call unLockWs(Sheets("Dispetcher_").Index): rows(ActiveCell.row).ClearContents: Call LockWs(Sheets("Dispetcher_").Index): GoTo exitL
If InStr(1, Cells(ActiveCell.row, 3), "Winamp") > 0 Or Cells(ActiveCell.row, 3) = "Cropper" Then
   Call ShowWindow(hWnd&, SW_RESTORE): Call SetForegroundWindow&(hWnd&)
   If InStr(1, Cells(ActiveCell.row, 3), "Winamp") > 0 Then SetTransparent hWnd&, 150: _
               SetTransparent FindWindow&(vbNullString, "Winamp Playlist Editor"), 150: SetTopMostWindow hWnd&, True
   GoTo exitL: End If
With SCSForm: '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 5-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If hWnd& <> 0 Then If IsWindow(hWnd&) = 0 Then Call dispUpdateTL _
   Else: If .inCollection%(hWnd&) = 4 Then .SetTBhwnd 4, .http_hwnd: .SetTBhwnd 1, hWnd&: _
                                            Call .setWindowVisible(.r_hwnd&, False): _
                                            Call .setWindowVisible(.br_hwnd, True): .reParkW: dispUpdateTL _
                                      Else If .Matrix_has(hWnd&) And FindForm.nxt_pos% = 1 Then .Matrix_del hWnd&, True: .minimizeW hWnd&: .reParkW _
                                      Else .SetTBhwnd 1, IIf(hWnd& = .http_hwnd, 0, .http_hwnd): .CollectW4 hWnd&: L0M "dispUpdateTL": .Matrix_upd True
                  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  'Then Call TransStopH(IIf(hwnd& = .http_hwnd, 0, .http_hwnd)): _
                                                .http_hwnd = IIf(hwnd& = .http_hwnd, 0, .http_hwnd): _
                                            Call dispUpdateTL(.collectionUpd): Call .CollectW4(hwnd&) _
                                       Else Call TransStopH(.http_hwnd&): .br_hwnd = .http_hwnd: .http_hwnd = hwnd&: _
                                            Call .setWindowVisible(.r_hwnd&, False): Call SetTransparent(.http_hwnd&, 235): _
                                            Call .setWindowVisible(.br_hwnd, True): .reParkW: dispUpdateTL
exitL: 'Range("B" & CStr(ActiveCell.row) & ":" & "A" & CStr(ActiveCell.row)).Select:
End With: End Sub

Sub dispDestroyWindow(Optional ByVal hWnd&, Optional hwnd2load As Boolean, Optional to_pos% = 2, Optional updateTL = True) '|fffd||fffd||fffd| |fffd||fffd| doParkW
                       If AC_flg Then Exit Sub Else If ActiveSheet.name <> "Dispetcher_" Then far_flg = True 'Exit Sub
    If hWnd& = 0 Then 'Dispetcher_
        If far_flg Then Exit Sub Else If ActiveCell.Column = 1 Then Exit Sub
        If Selection.rows.Count = 1 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            r& = ActiveCell.row: hWnd& = Str2Int(Cells(r&, 2))
        Else: For Each singleArea In Selection.Areas: For r = 0 To singleArea.rows.Count - 1
                sadd hwnd_list$, "|" & ActiveSheet.Cells(singleArea.row + r, 2): Next: Next: sadd hwnd_list, "|"
              For i% = 1 To prsCount("|", hwnd_list) - 1: dispDestroyWindow CLng(prsBetween|fffd|(i, "|", "|", hwnd_list)): Next: Exit Sub
        End If
    End If: If hWnd& = 0 Then Exit Sub
If Not far_flg Then
  With Sheets("Dispetcher_"):
    If r& = 0 Then On Error GoTo errL: CR = Workbooks("MAIN.XLSB").Names("_" & CStr(hWnd&)).value: pos = InStr(1, CR, "!$"): r& = CInt(Right(CR, Len(CR) - InStr(pos + 2, CR, "$")))
      .Range("A" & r& & ":C" & r&).Select 'show target
    If Left(.Cells(r&, 3), 3) = ">> " Then SCSForm.ShowWindow4 hWnd&: _
              If MsgBox("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
errL: unLockWs .Index: End With: End If 'DestroyWindow& hwnd& - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  'SW_HIDE&
    If hWnd& = FindWindow(vbNullString, "|fffd| - Debugger") Then Debugger_Stop: PF.Image15.SpecialEffect = 0
    If IsWindow(hWnd&) Then If hWnd& = SCSForm.vb_hwnd& Then ShowWindow& hWnd&, SW_MINIMIZE&: hwnd2load = True: to_pos% = 3 _
                       Else If getWndCaption$(hWnd&) Like "*Visual Basic for Applications*" Then ShowWindow& hWnd&, SW_HIDE& _
                       Else If DDBarUsed Then With SCSForm: .ShowWindow4 IIf(.inCollection(hWnd) = 0, hWnd, 0), , DDBar.isMatrix: End With: _
                                SetForegroundWindow hWnd&: SendMessage hWnd&, WM_CLOSE, 0, 0 _
                           Else SetForegroundWindow hWnd&: SendMessage hWnd&, WM_CLOSE, 0, 0: doDelay2 0.1: If _
                            dispValidCaption(hWnd&, cCaption$) And cCaption$ <> "Excel" And getWndCaption(GetTopWindow(hWnd&)) <> "MsoDockLeft" Then With _
                                SCSForm: .ShowWindow4 IIf(.inCollection(hWnd) = 0, hWnd, 0): End With: Exit Sub      '"MsoDockLeft" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Outlook
                            '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                       If DDBarUsed Then If DDBar.Contains(hWnd&) Then DDBar.delItem hWnd&
    With SCSForm: If .inCollection%(hWnd&) > 0 Then .SetTBhwnd .inCollection%(hWnd&), 0
                  If .Matrix_has(hWnd&) Then .Matrix_del hWnd& ': .reParkW True '.Matrix_upd.
    'pBlck$ = LoadParamBlock$("PF_Set1", "PF_Set4"): While hasIt("|" & hwnd& & "|", pBlck$): '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' tSet$ = prsBefore(">", prsBetween("<", "|" & hwnd& & "|", pBlck$)): SaveParam tSet$, 0: pBlck$ = prsAfter("</" & tSet$ & ">", pBlck$): Wend
    SaveParamBlockReplaceIn "PF_Set1", "PF_Set4", "|" & hWnd& & "|", "|0|": .historyLeave hWnd&                 'nonactive Sets updating (file)
    End With: With PF: For i% = 0 To 3: .Controls("ImageWS" & i%).tag = Replace(.Controls("ImageWS" & i%).tag, "|" & hWnd& & "|", "|") '(live)
                       Next
              If hwnd2load Then load_temporal_replaced_hwnd to_pos% '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r_hwnd
              End With: If updateTL Then dispCneanH hWnd&: dispSort: SCSForm.reParkW True
LockWs ActiveSheet.Index: FindForm.resetParker: End Sub


Attribute VB_Name = "srv_hWnd_addons"
'Option Explicit

Rem:===================
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem:====================================================

'1 |fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Function FindWindowIn&(s1$, Optional s2$, Optional s3$): FindWindowIn& = FindWindow(vbNullString, s1$)
             If FindWindowIn& = 0 Then If s2$ <> "" Then FindWindowIn& = FindWindow(vbNullString, s2$)
             If FindWindowIn& = 0 Then If s3$ <> "" Then FindWindowIn& = FindWindow(vbNullString, s3$) '...
End Function
'****************************************************

Function Get_vb_hwnd&(): If SCSForm.vb_hwnd& <> 0 Then Get_vb_hwnd& = SCSForm.vb_hwnd&: Exit Function
                         Get_vb_hwnd& = FindWindowIn&("Microsoft Visual Basic - MAC.XLA [running] - [a__inwork (Code)]", _
                                     "Microsoft Visual Basic for Applications - MAC.XLA [running] - [a__inwork (Code)]")
If Get_vb_hwnd& > 0 Then SCSForm.vb_hwnd = Get_vb_hwnd& Else dispGetTaskListIf: Get_vb_hwnd& = SCSForm.vb_hwnd  'FullScan, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SCForm (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|. SCSForm)
End Function 'w7o10

Function isVb(hWnd&) As Boolean: If SCSForm.vb_hwnd > 0 Then isVb = hWnd& = SCSForm.vb_hwnd
End Function

Attribute VB_Name = "z_Access_integration"
'****************************************************
'* Acces |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| *********************************
'****************************************************
Rem
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'uid = Term_en + Gid[Cat]
'=> if Gid isnull -> Cat(single)
'=> sId mast have Cat's compatible with main Gid Cat (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Gid
'=>
'****************************************************
Sub Export_content()
If WS0 = "" Then Call WSim

Dim objAccess As Object 'Access.Application
Set objAccess = CreateObject("Access.Application")

With objAccess
.Visible = False
.OpenCurrentDatabase ("C:\Programs\_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_\projects\MAIN.mdb")
.DoCmd.RunSQL " DELETE FROM tab1 "
Sheets(2).Activate
Set T1 = New CTerm
For i = 2 To 5
    Call T1.Initialize(Cells(i, 1))
    .DoCmd.RunSQL "insert into tab1 (GID) " & _
                " VALUES ('" & T1.id & "')"
            
    .DoCmd.RunSQL "update tab1 SET " & _
                    "enTerm = '" & T1.term(1) & "'," & _
                    "ruTerm = '" & T1.term(2) & "'," & _
                    "uaTerm = '" & T1.term(3) & "'," & _
                    "enDef = '" & T1.def(1) & "'," & _
                    "ruDef = '" & T1.def(2) & "'," & _
                    "uaDef = '" & T1.def(3) & "'," & _
                    "Hyper = '" & T1.link & "' " & _
                "where GID = '" & T1.id & "'"
                
  Set T1 = Nothing
Next i

    
End With

'objAccess.Quit

Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
objAccess.Visible = True
objAccess.DoCmd.OpenTable "tab1", acViewNormal '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| acViewPreview
MsgBox "ok"

Set objAccess = Nothing

End Sub

'****************************************************
Sub test_exportActive2XML()
Set T1 = New CTerm
    T1.Initialize Cells(ActiveCell.row, 1)
    save2file T1.toXML
Set T1 = Nothing
End Sub
Attribute VB_Name = "z_Access_samples"
'****************************************************
'* Acces |fffd||fffd||fffd||fffd||fffd||fffd||fffd| *********************************
'****************************************************
'****************************************************
Sub New_City()

    Dim objAccess As Object 'Access.Application
    Set objAccess = CreateObject("Access.Application")
    With objAccess
        .Visible = True
        .OpenCurrentDatabase ("C:\Programs\_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_\projects\MAIN.mdb")
       ' .DoCmd.RunSQL "Select * From TM"  ---------|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| DataSet
          
.DoCmd.RunSQL "DELETE FROM tab1 "
'EN
Sheets(2).Activate
For i = 2 To ActiveSheet.UsedRange.rows.Count
        .DoCmd.RunSQL "insert into tab1 " & _
                      " (GID, enTerm, enDef, Hyper) " & _
                " VALUES  ('" & _
                Replace(ActiveSheet.Cells(i, 1).Text, "'", "''") & "','" & _
                Replace(ActiveSheet.Cells(i, 3).Text, "'", "''") & "','" & _
                Replace(ActiveSheet.Cells(i, 4).Text, "'", "''") & "','" & _
                "')"
Next i
'RU
Sheets(3).Activate
For i = 2 To ActiveSheet.UsedRange.rows.Count
        .DoCmd.RunSQL "update tab1 " & _
                      " SET " & _
                "ruTerm = '" & Replace(ActiveSheet.Cells(i, 3).Text, "'", "''") & "'," & _
                "ruDef = '" & Replace(ActiveSheet.Cells(i, 4).Text, "'", "''") & "' " & _
                "where GID = '" & Replace(ActiveSheet.Cells(i, 1).Text, "'", "''") & "'"
Next i
'UA
Sheets(4).Activate
For i = 2 To ActiveSheet.UsedRange.rows.Count
        .DoCmd.RunSQL "update tab1 " & _
                      " SET " & _
                "uaTerm = '" & Replace(ActiveSheet.Cells(i, 3).Text, "'", "''") & "'," & _
                "uaDef = '" & Replace(ActiveSheet.Cells(i, 4).Text, "'", "''") & "' " & _
                "where GID = '" & Replace(ActiveSheet.Cells(i, 1).Text, "'", "''") & "'"
Next i

If False Then 'TEST
For i = 2 To ActiveSheet.UsedRange.rows.Count
        .DoCmd.RunSQL "insert into tblDir_City " & _
                      " (City, Region, Oblast, Country) " & _
                " VALUES  ('" & _
                Sheets("|fffd||fffd||fffd||fffd|1").Cells(i, 4).Text & "','" & _
                Sheets("|fffd||fffd||fffd||fffd|1").Cells(i, 1).Text & "','" & _
                Sheets("|fffd||fffd||fffd||fffd|1").Cells(i, 2).Text & "','" & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|')"
Next i
End If
     
    End With
    'objAccess.Quit
    objAccess.DoCmd.OpenTable "tab1", acViewNormal '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| acViewPreview
    Set objAccess = Nothing
End Sub


'##################################################################
Sub |fffd||fffd||fffd||fffd||fffd||fffd|()
    ' An instance of the Access application object
    ' is created using late binding.
    Dim objAccess As Object 'Access.Application - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set objAccess = CreateObject("Access.Application")
    With objAccess
        .Visible = True
        .OpenCurrentDatabase ("C:\Projects\|fffd||fffd|\A.mdb")
        .DoCmd.OpenTable "TM", acViewNormal
       ' .DoCmd.OpenTable "TM", acViewPreview
       ' .DoCmd.RunSQL "Select * From TM"  ---------|fffd||fffd||fffd||fffd||fffd||fffd|
       ' .DoCmd.RunSQL "update TM set id_TM = 22 where id_TM = 2"
    End With
    'objAccess.Quit
    Set objAccess = Nothing
End Sub

'****************************************************
'* |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Olimp)
'****************************************************

Sub test1()
Dim objRS, objConn, objCmd As Object
Set objRS = CreateObject("ADODB.Recordset")
Set objConn = CreateObject("ADODB.Connection")
Set objCmd = CreateObject("ADODB.Command")
'Dim cnnConn As ADODB.Connection
'Dim rstRecordset As ADODB.Recordset
'Dim cmdCommand As ADODB.Command

' Open the connection.
'Set cnnConn = New ADODB.Connection
With objConn
    .ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0"
    .Open "C:\Projects\|fffd||fffd|\A.mdb"
End With
' Set the command text.
Set objCmd.ActiveConnection = objConn
With objCmd
    .CommandText = "Select * From TM"
    '.CommandType = xlCmdSql 'adCmdText
    '.Execute
End With
' Open the recordset.
'objRS.Open Join$(Array(SQLstr), vbNullString), _
'           Join$(Array("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=", _
'                       .FullName, ";Extended Properties=""Excel 8.0;"""), vbNullString)
Set objRS.ActiveConnection = objConn
    objRS.Open objCmd
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
objRS.MoveFirst
r = 1: While Not objRS.EOF
    For Each x In objRS.Fields
      Sheets("Access").Cells(r, inc(c)).value = x.name 'X.Value
    Next x
inc r: objRS.MoveNext: Wend
' Close the connections and clean up.
objConn.Close
Set objCmd = Nothing
Set objRS = Nothing
Set objConn = Nothing
End Sub

Attribute VB_Name = "z_CFFCommonTools"
'******************************************************
'* CFF (CommonFindForm) - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|   **
'****************************************************

Sub CF_DoFind()
If CFF.Visible Then
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  last_search = CFF.TextBox1.Text
  If CFF.Visible Then
    If CFF.TextBox1.Text = "" Then
      Unload CFF
    Else: Call CF_RestoreFont(last_row, last_col)
      CFF.StartUpPosition = 0
      CFF.Hide
    End If
  End If
Else:
  If CFF.TextBox1.Text = "" Then Call CF_View_Find(0) _
                            Else CFF.show vbModeless
End If
End Sub


Sub CF_View_Find(col)
CFF.TextBox1.Left = 0
CFF.TextBox1.Width = CFF.TextBox1.Width + 14
If Not IsNull(ActiveCell.Font.ColorIndex) Then was_color = ActiveCell.Font.ColorIndex _
                                          Else was_color = 0
CFF.CommandButton3.Caption = Workbooks("MAIN.XLSB").name + ":" + ActiveSheet.name + ":" + _
                                  str(ActiveCell.row) + ":" + str(ActiveCell.Column) + _
                                                        ":" + str(was_color)
If CBool(col) Then Set c = Cells(2, col) _
              Else Set c = ActiveCell
If Not IsNull(c.Font.ColorIndex) Then was_color = c.Font.ColorIndex _
                                 Else was_color = 0
CFF.CommandButton4.Caption = Workbooks("MAIN.XLSB").name + ":" + ActiveSheet.name + ":" + _
                                  str(c.row) + ":" + str(c.Column) + ":" + str(was_color)
CFF.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Set c = Nothing
CFF.TextBox1.Text = last_search
CFF.TextBox1.SelStart = 0
CFF.TextBox1.SelLength = CFF.TextBox1.TextLength
CFF.show vbModeless
End Sub

'must by added to Private Sub Auto_Close() to not leave losted marks
Sub CF_RestoreFontAC(): AC_flg = True
Call CF_RestoreFont(last_row, last_col)
End Sub


Sub CF_RestoreFont(last_row, last_col): On Error GoTo exL
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| last_row, last_col
If CFF.CommandButton4.Caption = "" Then Exit Sub 'throws "ActiveX" in Portable
  docName = CT_FnGetCellAddress(CFF.CommandButton4.Caption, 0)
  WSname = CT_FnGetCellAddress(CFF.CommandButton4.Caption, 1)
  last_row = CInt(CT_FnGetCellAddress(CFF.CommandButton4.Caption, 2))
  last_col = CInt(CT_FnGetCellAddress(CFF.CommandButton4.Caption, 3))
  text_color = CInt(CT_FnGetCellAddress(CFF.CommandButton4.Caption, 4))
  With Application.Workbooks(docName).Sheets(WSname)
  If CBool(text_color) Then Call unLockWs(.Index): Set c = .Cells(last_row, last_col): _
    c.Font.ColorIndex = IIf(c.Hyperlinks.Count And text_color = inv(xlAutomatic), inv(5), text_color)
  'CFF.CommandButton4.Caption = ""
  Set c = Nothing: End With:
exL: End Sub


'****************************************************
'* |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (CFF CommonTools)
'****************************************************

Public Function CT_FnGetLastRow(WBname, WSname)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  CT_FnGetLastRow = Application.Workbooks(WBname).Sheets(WSname).UsedRange.rows.Count
End Function

'****************************************************
Function CT_FnGetCellAddress(address_string, address_item)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Name |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Fount.ColorIndex |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'(address_item = 0,1,2,3,4 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "Document:Sheet:Row:Column:Color"
Dim pos1%, pos2%, pos3%, pos4%
pos1 = InStr(1, address_string, ":")
pos2 = InStr(pos1 + 1, address_string, ":")
pos3 = InStr(pos2 + 1, address_string, ":")
pos4 = InStr(pos3 + 1, address_string, ":")
Select Case address_item
       Case 0: CT_FnGetCellAddress = CStr(Left$(address_string, pos1 - 1))
       Case 1: CT_FnGetCellAddress = CStr(Mid$(address_string, pos1 + 1, pos2 - pos1 - 1))
       Case 2: CT_FnGetCellAddress = CStr(Mid$(address_string, pos2 + 1, pos3 - pos2 - 1))
       Case 3: CT_FnGetCellAddress = CStr(Mid$(address_string, pos3 + 1, pos4 - pos3 - 1))
       Case 4: CT_FnGetCellAddress = CStr(Right$(address_string, Len(address_string) - pos4))
End Select
End Function

'**************************************************** s_pos, f_pos |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
Function CT_FnGetNextWord$(s_pos, source_text, f_pos, Optional useSpaces, Optional smartSplit = True)
                        If s_pos > sag(endof&, Len(source_text)) Then Exit Function                            'EOF
'smartSplit = True 'If source_text = "{p}" Then f_pos = endof&: CT_FnGetNextWord$ = source_text: Exit Function 'TEST
'If Left(source_text, 1) = """" Then f_pos = endof&: CT_FnGetNextWord$ = Right(source_text, endof& - 1): Exit Function 'const |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If IsMissing(useSpaces) Then If smartSplit Then _
                        If Not CT_FnIsLetterOrNumber(Left(source_text, 1)) Then useSpaces = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Find)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| s_pos |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
i = s_pos: If CBool(useSpaces) Then While Mid$(source_text, i, 1) = " " And i <= endof&: inc i: Wend _
                               Else While Not CT_FnIsLetterOrNumber(Mid$(source_text, i, 1)) And i <= endof&: inc i: Wend
If i > Len(source_text) Then Exit Function Else s_pos = i                                                      '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           If CBool(useSpaces) Then While Mid$(source_text, i, 1) <> " " And i <= endof&: inc i: Wend _
                               Else While CT_FnIsLetterOrNumber(Mid$(source_text, i, 1)) And i <= endof&: inc i: Wend '|fffd||fffd||fffd||fffd||fffd|
f_pos = i - 1 'If i > Len(source_text) Then f_pos = i Else f_pos = i - 1
CT_FnGetNextWord = Mid$(source_text, s_pos, f_pos - s_pos + 1): End Function

'****************************************************
'Boolean: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function CT_FnIsLetterOrNumber(t_char)
If t_char Like "[A-Z]" Or t_char Like "[|fffd|-|fffd|]" Or t_char Like "_" Or _
   t_char Like "[a-z]" Or t_char Like "[|fffd|-|fffd|]" Or t_char Like "#" Or _
   t_char = "|fffd|" Or t_char = "|fffd|" Or t_char = "|fffd|" Or t_char = "|fffd|" Or t_char = "|fffd|" Or _
   t_char = "|fffd|" Or t_char = "|fffd|" Or t_char = "|fffd|" Or t_char = "|fffd|" Then CT_FnIsLetterOrNumber = True _
                                                                Else CT_FnIsLetterOrNumber = False
End Function



Attribute VB_Name = "z_Import"
Rem:===============
Rem: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem:====================================================

Sub test_cutted(): MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Q |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Ctrl+Q - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)": Exit Sub
ws = wsEn: end_row = Sheets("import_").UsedRange.rows.Count: a = ConvertColNumToLetter$(eru(ws))
Dim c As Object: If twoWindows Then Windows("1").Activate
With Sheets(ws): .Activate: Set dob = New DataObject
      If FnFormIsLoaded("EditForm") Then EditForm.Hide
      For i = 2 To .UsedRange.rows.Count: term = .Cells(i, termcol)
        If twoWindows Then Windows("1").Activate
        Set new_range = Sheets("import_").Columns(a & ":" & a)
nextL:       Set c = FnFindCell(new_range, term, xlWhole, False)
        If c.row <> 1 Then
          my_def = .Cells(i, defcol): bk_def$ = Sheets("import_").Cells(c.row, 3 + eru(ws))
          my_def_cln = Replace(Replace(LCase(Replace(Replace(Replace(my_def, " ", ""), Chr(10), ""), Chr(13), "")), "[", "_"), "]", "_")
          bk_def_cln = Replace(Replace(LCase(Replace(Replace(Replace(bk_def, " ", ""), Chr(10), ""), Chr(13), "")), "[", "_"), "]", "_") 'Err 93
          If bk_def_cln <> "" And my_def_cln <> bk_def_cln Then
            MsgBox my_def_cln & Chr(10) & Chr(10) & bk_def_cln  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bk_def_cln Like my_def_cln & "*" Then                                  'True |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"...
             .Cells(i, termcol).Select: Open_Browser_W id:=.Cells(i, idcol), noShield:=True, _
                                                    test1:=Left(bk_def, Len(my_def)) & "<font color='red'>" & Mid(bk_def, Len(my_def) + 1) & "</font>":
                                                    dob.SetText LTrim(bk_def): dob.PutInClipboard    'buffer
             If twoWindows Then
                With Windows("_"): .Activate: Sheets("import_").Activate:  .DisplayHeadings = True: ActiveWindow.ScrollRow = c.row: c.Select
                End With: SUp True: Windows("1").Activate:
             Else: If MsgBox(term & Chr(10) & Chr(10) & decode(my_def_cln, "", "-") & Chr(10) & Chr(10) & "VS" & Chr(10) & Chr(10) & _
                           bk_def & Chr(10) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion) = _
                      vbYes Then Set new_range = Sheets("import_").Range(a & CStr(c.row + 1) & ":" & a & end_row): GoTo nextL
             End If: View_Edit
             If twoWindows Then ActiveWindow.ScrollRow = i: Windows("_").Activate: GoTo exitL Else GoTo exitL
            Else: Set new_range = Sheets("import_").Range(a & CStr(c.row + 1) & ":" & a & end_row): GoTo nextL
          End If:
        End If: End If
      Next i: End With: MsgBox "That's all!"
exitL: Set c = Nothing: Set dob = Nothing: End Sub

Rem:===============
Rem: Import, Export
Rem:====================================================

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub CloneHunter()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
was_cleaned = False
i = 1
While Trim(Cells(i, 1) + Cells(i, 2) + Cells(i, 3)) <> ""
  If Cells(i, 1).Interior.ColorIndex <> xlNone Then
    Cells(i, 1).EntireRow.Delete
    was_cleaned = True
  Else: inc i: End If
Wend
If was_cleaned Then Exit Sub
'*** |fffd||fffd||fffd||fffd||fffd| ***
Dim id As String
end_row = CStr(FnGetLastRow(1))
i = 2
While Trim(Cells(i, 1) + Cells(i, 2) + Cells(i, 3)) <> ""
t_rows = 0
If Cells(i, 7) <> "#" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  id_list = ";"                 '|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For lang = 1 To 3
    t_abr = FnGetAbbrev(Cells(i, lang), ini_term)
   If ini_term <> "" Then
    Set new_range = Sheets(FnWSCase(lang)).Columns("C:C")
    Do
     Set c = FnFindCell(new_range, ini_term, xlPart)
     If c.row <> 1 Then
      id = Sheets(FnWSCase(lang)).Cells(c.row, 1)
      Set new_range = Sheets(FnWSCase(lang)).Range("C" + CStr(c.row + 1) + ":C" + end_row)
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Not (id_list Like "*;" + id + ";*") Then
        id_list = id_list + id + ";"
        Cells(i + 1, 1).EntireRow.Insert
        Range("A" + CStr(i + 1) + ":G" + CStr(i + 1)).Interior.ColorIndex = 36
        Cells(i + 1, 7).value = id
        Cells(i + 1, lang).value = Sheets(FnWSCase(lang)).Cells(c.row, 3)
        Cells(i + 1, lang + 3).value = Sheets(FnWSCase(lang)).Cells(c.row, 4)
        Set new_range = Sheets(FnWSCase(lang)).Range("C" + CStr(c.row + 1) + ":C" + end_row)
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Cells(i + 1, lang).Activate
        ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", SubAddress:= _
        "_" + CStr(lang) + "_" + id, TextToDisplay:=Selection.Text
        ActiveCell.Font.Underline = xlUnderlineStyleNone
        '|fffd||fffd||fffd||fffd||fffd|
        For sink = 1 To 3
          t_abr = FnGetAbbrev(Cells(i, sink), term)
          If sink <> lang Then
            If FnFarCell(sink, id, far_row, far_WS) Then
              Cells(i + 1, sink).value = Sheets(far_WS).Cells(far_row, 3)
              Cells(i + 1, sink + 3).value = Sheets(far_WS).Cells(far_row, 4)
            End If
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          pos = InStr(1, Cells(i + 1, sink), term, vbTextCompare)
          If pos <> 0 Then Cells(i + 1, sink).Characters(start:=pos, _
                           Length:=Len(term)).Font.ColorIndex = 3
        Next sink
        inc t_rows
      End If
     Else: Exit Do
     End If
    Loop Until c.row = 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   End If
  Next lang
End If
  Cells(i, 7).value = "#" '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  i = inc(i) + t_rows
Wend
Set c = Nothing
Set new_range = Nothing
End Sub
'****************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "determination"
Sub ImportAnalyzer()
If ActiveSheet.name <> WSI Or _
  (Trim(Cells(2, 4)) = "" And Trim(Cells(3, 4)) = "") Then Exit Sub

i = 1: Do Until Cells(inc(i), 4) = "": Loop
If Cells(i + 1, 4) <> "" Then inc i Else i = 2

Dim pos1%, pos2%: source_string = Cells(i, 4)
While source_string <> ""
  term = ""
  abbr = ""
  trans = ""
  def = ""
  Range("A" + CStr(i) + ":F" + CStr(i)).Font.ColorIndex = xlAutomatic
  '____________________________________________
  pos = InStr(1, source_string, "#")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "#" |fffd||fffd||fffd| "##"
  If (pos <> 0) Then
    If (Mid$(source_string, pos + 1, 1) = "#") Then
      source_string = Replace(source_string, "##", "#", 1, 1)
      pos = InStr(pos + 1, source_string, "#")
    End If
  End If
  normal = (pos <> 0)
  If normal Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    def = Trim(Right$(source_string, Len(source_string) - pos))
    source_string = Left$(source_string, pos - 1)
  ElseIf InStr(1, source_string, " - ") <> 0 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd|(5))
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(10), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (default, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "-" |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "#" |fffd||fffd||fffd||fffd||fffd|)
    pos1 = InStr(1, source_string, " - ")
    pos2 = InStr(pos1 + 1, source_string, " - ")
    If pos2 = 0 Then
      dupl = False
      pos = InStr(1, source_string, "|fffd||fffd||fffd|.")
      If pos <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd|
        Cells(i, 1).value = Left$(source_string, pos1 - 1)
        def = Trim(Right$(source_string, Len(source_string) - pos1 - 2))
        Range("A" + CStr(i) + ":F" + CStr(i)).Font.ColorIndex = 5
        GoTo L_end
      Else: Range("A" + CStr(i) + ":F" + CStr(i)).Font.ColorIndex = 3 '|fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      End If
    Else: Range("A" + CStr(i) + ":F" + CStr(i)).Font.ColorIndex = 10
          dupl = True
    End If
  Else: Range("A" + CStr(i) + ":F" + CStr(i)).Font.ColorIndex = 3 '|fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  '____________________________________________
  pos = InStr(1, source_string, " - ")
  If pos <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    term = Trim(Left$(source_string, pos - 1))
    source_string = Right$(source_string, Len(source_string) - pos - 2)
  Else
    Cells(i, 1).value = source_string
    GoTo L_end
  End If
  '____________________________________________
  pos = InStr(1, source_string, " - ")
  If (normal Or dupl) And pos <> 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Cells(i, 1).value = Left$(source_string, pos - 1) + " (" + term + ")"
    trans = Trim(Right$(source_string, Len(source_string) - pos - 2))
  Else  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Cells(i, 1).value = term
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ()-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      pos1 = InStr(1, Cells(i, 1), "(")
      If pos1 <> 0 Then pos2 = InStr(1, Cells(i, 1), ")") Else pos2 = pos1
      If pos2 - pos1 > 0 Then
        '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        pos = InStr(1, Cells(i, 4), Cells(i, 1).Characters(pos1, pos2 - pos1))
        If Cells(i, 4).Characters(pos + 1, pos2 - pos1 - 1).Font.Underline = _
           xlUnderlineStyleSingle Then _
        Cells(i, 1).Characters(pos1 + 1, pos2 - pos1 - 1).Font.Underline = xlUnderlineStyleSingle
      End If
    trans = Trim(source_string)
  End If
  If Right(Trim(trans), 1) = "." Then trans = Left(Trim(trans), Len(Trim(trans)) - 1)
  '____________________________________________
L_end:
  If trans = "" Then
    abbr = FnGetAbbrev(Sheets(WSI).Cells(i, 1), trans)
    If abbr <> "" Then trans = abbr
  End If
  If trans <> "" Then Cells(i, 3).value = trans Else _
    Range("A" + CStr(i) + ":F" + CStr(i)).Font.ColorIndex = 3 '|fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ()-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      pos = 1
      Do
        pos1 = InStr(pos, Cells(i, 3), "(")
        If pos1 <> 0 Then pos2 = InStr(pos, Cells(i, 3), ")") Else pos2 = pos1
        If pos2 - pos1 > 0 Then
          '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          pos = InStr(1, Cells(i, 4), Cells(i, 3).Characters(pos1, pos2 - pos1))
          If Cells(i, 4).Characters(pos + 1, pos2 - pos1 - 1).Font.Underline = _
             xlUnderlineStyleSingle Then _
            Cells(i, 3).Characters(pos1 + 1, pos2 - pos1 - 1).Font.Underline = xlUnderlineStyleSingle
        End If
        pos = pos2 + 1
      Loop Until pos2 = 0 Or InStr(pos, Cells(i, 3), "(") = 0
  Cells(i, 6).value = def
  inc i: source_string = Cells(i, 4)
Wend
End Sub

'****************************************************
Sub SortImportedTerms(): JustImportedSorter True: End Sub
'****************************************************
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Sub JustImportedSorter(whole_only)
startFrom = 136 'CT_FnGetLastRow(Workbooks("MAIN.XLSB").name, WS0)
If logging Then LogString ("in   JustImportedSorter")
If Workbooks("MAIN.XLSB").Sheets(WS1).Cells(2, 2) <> "..." Then
  MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  If logging Then LogString ("out>1 JustImportedSorter")
  Exit Sub
Else
  lir = CT_FnGetLastRow(Workbooks("MAIN.XLSB").name, WS1)
  Set searchRange = Range(Workbooks("MAIN.XLSB").Sheets(WS1).Cells(2, 2), _
                          Workbooks("MAIN.XLSB").Sheets(WS1).Cells(lir, 2))
  Set c = searchRange.find(What:="...", after:=ActiveWorkbook.Sheets(WS1).Cells(lir, 2), _
                           LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _
                           SearchDirection:=xlPrevious)
  lir = c.row
End If
gen_row = startFrom
Do Until gen_row < 2 Or lir < 2
  gen = Sheets(WS0).Cells(gen_row, 2)
  LP (gen)
  Set searchRange = Range(Workbooks("MAIN.XLSB").Sheets(WS1).Cells(2, 3), _
                          Workbooks("MAIN.XLSB").Sheets(WS1).Cells(lir, 3))
  Set c = searchRange.find(What:=gen, after:=ActiveWorkbook.Sheets(WS1).Cells(2, 3), _
                           LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByColumns, _
                           SearchDirection:=xlNext, MatchCase:=False)
  If Not c Is Nothing Then
    firstAddress = c.Address
    Do
      found = True
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      i_term = Workbooks("MAIN.XLSB").Sheets(WS1).Cells(c.row, 3)
      pos = InStr(1, i_term, gen, vbTextCompare)
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      If pos <> 1 Then
        If CT_FnIsLetterOrNumber(Mid(i_term, pos - 1, 1)) Then found = False
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If whole_only Then
        If Len(i_term) <> pos + Len(gen) And _
          CT_FnIsLetterOrNumber(Mid(i_term, pos + Len(gen), 1)) Then found = False
      End If
      If found Then
        found_row = c.row
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| gen
        Sheets(WS1).Activate
        Cells(found_row, 3).Select
        EditForm.CommandButton1.ControlTipText = "Auto"
        EditForm.TextBoxCat.ControlTipText = _
          Workbooks("MAIN.XLSB").Sheets(WS0).Cells(gen_row, 5) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Call EditForm.SetComboText(1, gen)
        Call View_Edit
        dec lir
        LM (i_term + " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " + gen)
        Set searchRange = Range(Workbooks("MAIN.XLSB").Sheets(WS1).Cells(found_row, 3), _
                          Workbooks("MAIN.XLSB").Sheets(WS1).Cells(lir, 3))
        Set c = searchRange.find(What:=gen, _
                          after:=ActiveWorkbook.Sheets(WS1).Cells(found_row, 3), _
                          LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByColumns, _
                          SearchDirection:=xlNext, MatchCase:=False)
        If Not c Is Nothing Then firstAddress = c.Address '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Else: Set c = searchRange.FindNext(c)
      End If
      If c Is Nothing Then
        nothingElse = True
      ElseIf Not found And c.Address = firstAddress Then nothingElse = True
      Else: nothingElse = False
      End If
    Loop Until nothingElse
  End If
  dec gen_row
Loop
Set c = Nothing
Set searchRange = Nothing
If logging Then LogString ("out JustImportedSorter")
End Sub









Attribute VB_Name = "z_POSITIONING"
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If Not Application.DisplayFullScreen Then
'    EditForm.Top = Application.Top + Application.Height
'    EditForm.Width = Application.Width
'    EditForm.Left = Application.Left
'FRAMES


Rem: EditForm - Base configuration
'With EditForm: .Top = 252.75: .Left = 24.75: .Width = 500.25 * .Zoom / 100: .Height = 279.75 * .Zoom / 100: End With
 
'With Frame1: .Top = 0: .Left = 1: .Width = 494: .Height = 78: End With _
With CB_fastnamesfilling: .Top = -1: .Left = 89: .Width = 12: .Height = 8: End With _
With TextBoxEnTerm: .Top = 6: .Left = 0: .Width = 102: .Height = 36: End With _
With Image1: .Top = 40: .Left = 1: .Width = 24: .Height = 15: End With _
With TextBoxEnAbb: .Top = 39.75: .Left = 24: .Width = 78: .Height = 15.5: End With _
With TextBoxEnGId: .Top = 54.5: .Left = 0: .Width = 26: .Height = 15.5: End With _
With ComboBoxEnG: .Top = 54.5: .Left = 24: .Width = 78: .Height = 15.5: End With _
With TextBoxEnDef: .Top = 0: .Left = 102: .Width = 388: .Height = 71: End With
 
'With Frame2: .Top = 78: .Left = 1: .Width = 494: .Height = 78: End With _
With TextBoxRuTerm: .Top = 6: .Left = 0: .Width = 102: .Height = 36: End With _
With Image2: .Top = 40: .Left = 1: .Width = 24: .Height = 15: End With _
With TextBoxRuAbb: .Top = 39.75: .Left = 24: .Width = 78: .Height = 15.5: End With _
With TextBoxRuGId: .Top = 54.5: .Left = 0: .Width = 26: .Height = 15.5: End With _
With ComboBoxRuG: .Top = 54.5: .Left = 24: .Width = 78: .Height = 15.5: End With _
With TextBoxRuDef: .Top = 0: .Left = 102: .Width = 388: .Height = 71: End With
 
'With Frame3: .Top = 156: .Left = 1: .Width = 494: .Height = 78: End With _
With TextBoxUaTerm: .Top = 6: .Left = 0: .Width = 102: .Height = 36: End With _
With Image3: .Top = 40: .Left = 1: .Width = 24: .Height = 15: End With _
With TextBoxUaAbb: .Top = 39.75: .Left = 24: .Width = 78: .Height = 15.5: End With _
With TextBoxUaGId: .Top = 54.5: .Left = 0: .Width = 26: .Height = 15.5: End With _
With ComboBoxUaG: .Top = 54.5: .Left = 24: .Width = 78: .Height = 15.5: End With _
With TextBoxUaDef: .Top = 0: .Left = 102: .Width = 388: .Height = 71: End With _

'With Frame4: .Top = 233: .Left = 1: .Width = 494: .Height = 78: End With _
With OptionButtonG: .Top = 0: .Left = 0: .Width = 48: .Height = 17.25: End With _
With OptionButtonS:  .Top = 0: .Left = 48: .Width = 33.75: .Height = 17.25: End With _
With ToggleButton1:  .Top = 0: .Left = 82: .Width = 22: .Height = 16: End With _
With TextBoxCat:  .Top = 1: .Left = 104: .Width = 364: .Height = 15.5: End With _
With CommandButton1:  .Top = 0: .Left = 469: .Width = 24: .Height = 18: End With

Attribute VB_Name = "z_SQL_tests"
'----------------------------------------------------------
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetCatByID |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
Public Function GetCatByIDsql(cid As String)
Dim SQLstr As String
Dim objRS As Object: Set objRS = CreateObject("ADODB.Recordset")
    SQLstr = "SELECT category FROM [" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_" & "$] WHERE id in ('" & cid & "')"
    objRS.Open Join$(Array(SQLstr), vbNullString), _
               Join$(Array("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=", _
                           Workbooks("MAIN.XLSB").FullName, ";Extended Properties=""Excel 8.0;"""), vbNullString)
    objRS.MoveFirst
GetCatByIDsql = objRS!category
End Function
'----------------------------------------------------------

Sub replaceCats()
  Dim SQLstr As String
  Dim objRS As Object
  
    SQLstr = "UPDATE [" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & "$] SET category = replace(category,'Coding_|fffd||fffd||fffd||fffd||fffd||fffd|','Coding_|fffd||fffd||fffd||fffd||fffd||fffd|')" 'order by category desc
    Set objRS = CreateObject("ADODB.Recordset")
    objRS.Open Join$(Array(SQLstr), vbNullString), _
               Join$(Array("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=", _
                           Workbooks("MAIN.XLSB").FullName, ";Extended Properties=""Excel 8.0;"""), vbNullString)
    Set objRS = Nothing
End Sub
  
  Sub getUniqueCats()
    Dim SQLstr As String
    Dim objRS As Object

'With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")

    SQLstr = "SELECT distinct category FROM [" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & "$] " 'order by category desc
    Set objRS = CreateObject("ADODB.Recordset")
    objRS.Open Join$(Array(SQLstr), vbNullString), _
               Join$(Array("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=", _
                           Workbooks("MAIN.XLSB").FullName, ";Extended Properties=""Excel 8.0;"""), vbNullString)
    With objRS: .MoveFirst
        Do While Not .EOF
            'action
            Sheets("Access").Cells(inc(i), 1) = objRS!category: .MoveNext
        Loop
    End With
    Set objRS = Nothing
    
'End With
End Sub

Sub bookmarks_test()
MsgBox "|fffd||fffd||fffd||fffd||fffd|"
With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
For i = 2 To .UsedRange.rows.Count
    If Not FnFarCell(1, .Cells(i, 1).Text, f_row, f_ws) Then
      MsgBox "id |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
    Else: txt = Sheets(f_ws).Cells(f_row, 5).value
    'action
    End If
Next i
End With
MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|" ' < 1 sec - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) -> |fffd||fffd||fffd||fffd| 1 sec
End Sub


Sub sql_test()
    Dim SQLstr As String
    Dim objRS As Object
MsgBox "|fffd||fffd||fffd||fffd||fffd|"
With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
For i = 2 To .UsedRange.rows.Count

    SQLstr = "SELECT |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FROM [" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & "$] WHERE ID = " & .Cells(i, 1).Text 'in (" & sel_items & ")"
    Set objRS = CreateObject("ADODB.Recordset")
    objRS.Open Join$(Array(SQLstr), vbNullString), _
               Join$(Array("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=", _
                           Workbooks("MAIN.XLSB").FullName, ";Extended Properties=""Excel 8.0;"""), vbNullString)
    With objRS
        .MoveFirst
        Do While Not .EOF
            'action
            .MoveNext
        Loop
    End With
    Set objRS = Nothing
    
Next i
End With
MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|" '5 sec "Links"
End Sub

Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const RGBm = 16777215 'RGB(255, 255, 255)

Public Function getFreezedRow%(): getFreezedRow% = getFreezePanesRow%: End Function '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Rem:====================================================
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Term
Rem:====================================================
Sub srv|fffd||fffd||fffd||fffd||fffd||fffd|InTermActive(): With ActiveCell: Cells(.row, termcol).IndentLevel = prsCount("_", Replace(Cells(.row, shadcol) & "#", ".#", "_")): End With: End Sub
Rem: *** Global change ***
Sub srv|fffd||fffd||fffd||fffd||fffd||fffd|InTerm(): fNoSup: For ws% = wsEn To wsUa: i = 1: With Sheets(ws%):
While sag(trm, Trim(.Cells(inc(i), termcol))) <> "": .Cells(i, termcol).IndentLevel = prsCount("_", Replace(.Cells(i, shadcol) & "#", ".#", "_"))
'Cells(i, termcol) = REPLICATE(trm, " ", Len(trm) + prsCount("_", Replace(Cells(i, shadcol), ".", "_")))  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| EditForm
'da_ i <> 227: db_ trm & "' vs '" & Cells(i, termcol) & Cells(i, defcol) & prsCount("_", Replace(Cells(i, defcol), ".", "_")), i = 227
Wend: End With: Next: SUp: End Sub
Rem:====================================================

Sub ShowEditor(Optional noPark As Boolean): remind: VBEprocedureSelect "inwork_now": Get_vb_hwnd&: If noPark Then Exit Sub '.restoreW .vb_hwnd&:
With SCSForm: ls "~", "ShowEditor", , noPark, .vb_hwnd&, .br_hwnd, .bl_hwnd&
              If .vb_hwnd& <> .br_hwnd And .vb_hwnd& <> .bl_hwnd& Then
              If .bl_hwnd& > 0 Then SaveParam "TBsavedhwnd" & PF.c_Set & "3", .bl_hwnd&, 3: 'ShowWindow& .bl_hwnd&, SW_MINIMIZE&
                 .ReleaseW .bl_hwnd, 3: .CollectW .vb_hwnd&, 3 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
End If: End With: FindForm.resetParker: If FnFormIsLoaded("SCSForm") Then SCSForm.reParkW: SCSForm.focusMe
'If Not Application.VBE.MainWindow.Visible Then Call VBEprocedureSelect("inwork_now") _
'                                          Else Application.VBE.MainWindow.Visible = True
SetWindowRgn hWnd&, 0, True: End Sub ': VBEprocedureSelect "inwork_now":
'---- testing -------------
Sub sdf()
MsgBox FnFarCell(2, "1", far_row, far_WS)
MsgBox far_row & " " & far_WS
End Sub

Sub tempUnHideRoots(): MsgBox Cells(ActiveSheet.UsedRange.rows.Count, 1).Text: End Sub

Public Sub ShowAllForms(Optional do_ As Boolean = True): ls "~", "ShowAllForms", do_ '|fffd||fffd||fffd||fffd|Freeze
If FnFormIsLoaded("SCForm") Then If do_ Then SCForm.show vbModeless Else SCForm.Hide
If FnFormIsLoaded("SCSForm") Then
  With SCSForm: If SCSForm.Visible <> do_ Then If do_ Then SCSForm.show vbModeless Else SCSForm.Hide
  If FnFormIsLoaded("FindForm") Then If FindForm.Visible <> do_ Then If Not do_ Then FindForm.Hide Else If Not SCSForm.LParked Then FindForm.show vbModeless
  If FnFormIsLoaded("PF") Then If PF.Visible <> do_ Then If Not do_ Then PF.Hide Else If Not SCSForm.LParked Then PF.show vbModeless
  If FnFormIsLoaded("satellite") Then If satellite.Visible <> do_ Then If Not do_ Then satellite.Hide Else satellite.show vbModeless
End With: End If: End Sub
'===================================================================================================
Sub ShowMAIN(): Application.Visible = True: wcaption = Application.Caption: set_Transparent: End Sub
Sub FocusMAIN(): SetActiveWindow& FindWindow(vbNullString, Application.Caption): End Sub

Sub NoSup(): Application.ScreenUpdating = IIf(asu, False, Application.ScreenUpdating): End Sub     '|fffd||fffd||fffd||fffd|
Sub SUp(Optional val): If Not IsMissing(val) Then On Error Resume Next: Application.ScreenUpdating = val: Exit Sub 'err |fffd||fffd| |fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(h27)
             Application.ScreenUpdating = IIf(asu, True, Application.ScreenUpdating): End Sub  '|fffd||fffd||fffd||fffd|
Sub fNoSup(): asu = True: NoSup: End Sub 'forced
Sub fNoSupfor(): asu = True: NoSup: asu = False: End Sub 'forced + wait for fSup
Sub fSup(): asu = True: SUp: End Sub 'forced

Sub |fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(wsnum As Integer, id As String): UnHideRoots wsnum, id: End Sub
Sub UnHideRoots(wsnum As Integer, id As String)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| roots |fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|
Do: pos = InStr(pos + 1, id, "_"): If pos = 0 Then pos = Len(id) + 1
    Call FnFarCell(wsnum, Mid(id, 1, pos - 1), far_row, far_WS)
    If far_row <> 0 Then
      With Sheets(far_WS).rows(far_row)
         If .Hidden Then .Hidden = False
      End With: End If
Loop Until pos = Len(id) + 1
End Sub

Sub |fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(Optional id$): FocusOnActiveTerm id: End Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ActiveSheet.Cells(ActiveCell.row, 3).Select ?
                                                                  Rem: |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| roots
Sub FocusOnActiveTerm(Optional id$): Call MoveToID(FnWSNum(ActiveSheet.name), blank(id$, Cells(ActiveCell.row, 1).Text), 3): End Sub
'Sub FocusOnTerm():Call MoveToID(wsnum, ID, 3):End Sub

Sub |fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(Optional ByVal id$): allRootsActivation id$, True: End Sub
Sub allRootsActivation(Optional ByVal id$, Optional allShow As Boolean): If Not FnIsTrinity(ActiveSheet.name) Then Exit Sub
           If id$ = "" Then id$ = Cells(ActiveCell.row, 1).Text
Call iwOn: With ActiveSheet: On Error Resume Next:
           ActiveWindow.ScrollRow = FnGetRowFromID(prsBefore("_", id), eru(.Index))
                 For i% = 1 To prsCount("_", id) + 1: SUp True
                    .Cells(FnGetRowFromID(prsBefore|fffd|Up(i, "_", id), eru(.Index)), termcol).Activate
                    If allShow Then .rows(ActiveCell.row).Hidden = False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                 Next: End With 'MsgBox ActiveSheet.name
                'Call SUp: ActiveSheet.Cells(FnGetRowFromID(id, eru(ActiveSheet.index)), termcol).Activate
Call iwOff: End Sub
                                 
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub MoveToID(wsnum, ByVal id, fld): If wsnum <= 0 Then Exit Sub Else id = Trim(id)
If wsnum < 7 Then 'FnIsTrinity(FnWSCase(wsnum))
    SUp False:
    Sheets(Index(wsnum)).Activate: far_row = FnGetRowFromID(CStr(id), wsnum): If far_row = 0 Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Sheets(Index(wsnum)).rows(far_row).Hidden Then
        Call unlockWB: flg_InWork = True: Call SUp
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| roots |fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|
        Do: pos = InStr(pos + 1, id, "_"): If pos = 0 Then pos = Len(id) + 1
              far_row = FnGetRowFromID(Mid(id, 1, pos - 1), wsnum):
              If far_row = 0 Then MsgBox "ID """ & Mid(id, 1, pos - 1) & """ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Sub
              With Sheets(Index(wsnum)): .rows(far_row).Hidden = False: .Cells(far_row, fld).Activate: End With '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (.Activate)
             'With Sheets(index(wsnum)): .Rows(far_row).Hidden = False: ActiveWindow.ScrollRow = far_row: End With
        Loop Until pos = Len(id) + 1: LockWBif: Call NoSup
        AppActivate Application.Caption '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else: SUp True: Range("A" & far_row & ":" & ConvertColNumToLetter$(fld) & far_row).Select: Call NoSup: End If '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    'Cells(far_row, fld).Select: Call NoSup: End If 'Range("C" & far_row & ":C" & far_row).Select 'bk
    PF_SetSpecialEffect ActiveSheet.Index
End If: iwOff: End Sub

'****************************************************
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub View_Dispetcher(): PF.setMode "DS": If Cells(1, 1).Hyperlinks.Count Then Cells(1, 1).Hyperlinks(1).Follow _
                          NewWindow:=False, AddHistory:=True Else Sheets("Dispetcher_").Activate '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
ActiveWindow.DisplayWorkbookTabs = False: If Not FnFormIsLoaded("SCSForm") Then Call customSC_Restore
PF_SetSpecialEffect PF.c_Set: End Sub

'===================================================================================================
Rem: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'****************************************************

Sub ShowAllActiveRootCatsInComments(Optional ByVal row&): If Not FnIsTrinity Then Exit Sub _
                                  Else If row& > 0 Then rid$ = Cells(row&, 1) _
                                                   Else rid$ = FnGetRootID(Cells(ActiveCell.row, 1)): _
                                                     If rid$ = "" Then Exit Sub Else row& = FnGetRowFromID&(rid$, eru)
Call unLockWs: NoSup: DelALLComments: wsG = fnWSisGrouped: dec row& 'If wsG Then last_lvl = rows(row).OutlineLevel
                                      Do: id$ = Cells(inc(row&), 1):
                                          If id$ <> rid$ And Not id$ Like rid$ & "_*" Then GoTo exitL
                                          If Not rows(row&).Hidden Then
                                            If wsG Then lvl = rows(row).OutlineLevel: last_lvl = lvl: If lvl < last_lvl Then GoTo passL 'exitL Else last_lvl = lvl
                                                              'Else ok = FnGetRootID(id$) = rid$
                                                            'If Not ok Then GoTo exitL
                                            txt$ = Trim(getCatLong("", Cells(row&, catCol), True)): _
                                            DelComment Cells(row&, 1), 1: SetComment Cells(row&, 1), txt$, 1, Len(txt$), True
passL:                                    End If
                                      Loop Until False
exitL: LockWs: SUp: End Sub

Public Sub Cat2Comment(c As Object): SetComment c, getCatLong("", Cells(c.row, 5)), 3: End Sub
Public Sub Shadow2Comment(c As Object): SetComment c, Replace(Cells(c.row, 2), "_" & FnClearFromSpec$(Cells(c.row, 3)), ""), IIf(Columns(2).Hidden, 3, 2): End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Comment |fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| col_% |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SetComment(c As Object, txt$, Optional ByVal col_%, Optional ByVal cWidth%, Optional ByVal cShow As Boolean)
  On Error Resume Next: With Cells(c.row, zero(col_%, c.Column)): .AddComment txt$: If cWidth% = 0 Then cWidth% = Len(txt$)
With .Comment: .Shape.Width = 5 * zero(cWidth + 6, .Shape.Width) '+4-6 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| UPPERCASE        '|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| cShow = False
               If invF Then If Not cShow Then .Shape.Left = 0: If col_% = 3 And Not hasIt(Chr(10), txt$) Then .Shape.Top = 0 Else _
                                              .Shape.Top = ActiveWindow.VisibleRange.Top '('.Shape.Top = 0 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
               .Shape.Height = 14 * (1 + prsCount(Chr(10), txt$)) '.value
               .Shape.TextFrame.Characters.Font.Size = 10: '.Shape.Locked = True: '.Shape.Line.Visible = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?
               If invF Then                                                                'ActiveCell.Comment.Shape
                            Select Case col_% 'Behavior logic
                                   Case 2: .Visible = Not HasCommentVisible(Cells(c.row, 1), True)  '|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                   Case 3: .Visible = True 'Not HasCommentVisible(Cells(C.row, 2), True)
                                   Case Else: .Visible = cShow
                            End Select
               Else: .Visible = cShow And cWidth% * 5 + 5 < Columns(2).Width + Columns(3).Width: End If
End With: End With: End Sub
Public Sub DelComment(c As Object, Optional col_%): On Error Resume Next: c.Worksheet.Cells(c.row, zero(col_%, c.Column)).Comment.Delete: End Sub
Public Function HasComment(c As Object) As Boolean: On Error GoTo exitL: tmpFlg = c.Comment.Visible: HasComment = True
exitL: End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function HasCommentVisible(c As Object, Optional forceHide As Boolean) As Boolean: On Error GoTo exitL
If forceHide Then c.Comment.Visible = False Else HasCommentVisible = c.Comment.Visible
exitL: End Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, forceHide - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Sub DelALLComments(): If Not FnIsTrinity Then Exit Sub
For Each com In ActiveSheet.Comments: com.Delete: Next: End Sub

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| msg activesheet.UsedRange.columns.count - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 256 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub invAllColors(): ls ">", "invAllColors": WSim: SUp False: invFlg = Sheets(1).Cells(1, 1).Interior.ColorIndex = 56
  For ws = wsGen To wsABC: With Sheets(ws): triF = FnIsTrinity(.name)
  ' hdn = .Columns("B").Hidden: If hdn Then .Columns("B").Hidden = False       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| B |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For Each c In .UsedRange.Cells: c.Interior.Color = RGBm - c.Interior.Color 'RGB(255, 255, 255)
                                        c.Font.Color = RGBm - c.Font.Color
      If triF Then
                  If IsNull(c.Font.ColorIndex) Then c.Font.ColorIndex = IIf(invFlg, xlAutomatic, 2)
                  'If Not invFlg Then If c.row > 1 Then If c.Column = 2 Then If c.Font.ColorIndex = 2 Then c.Font.ColorIndex = xlAutomatic
      End If: 'LM C.Worksheet.name & ":" & C.row
    Next c
  ' .Columns("B").Hidden = hdn:
  End With: Next ws '+WSA |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Union(Sheets(WSA).Columns("D:D"), Sheets(WSA).Columns("F:F")).Borders(xlEdgeLeft).ColorIndex = inv(xlAutomatic)
SUp True: ls "<", "invAllColors": End Sub

Public Function trySat(Optional force = False) As Boolean: ls ">", "trySat"
    If DDM.forceSM = 2 Or DDM.On Then
      If FnFormIsLoaded("JOTCaller") Then If JOTCaller.rightsided Then JOTCaller.reDraw Else _
      If FnFormIsLoaded("ChessCaller") Then If Not ChessCaller.leftsided Then ChessCaller.reDraw
    ElseIf FnFormIsVisible("DDBar") Then
        If DDM.num = 1 Then Exit Function
        If force Or Not DDBar.isHidden Then
        With DDBar: If .isMatrix Then .reDraw 3, False, False, False: LM "DDBar.reDraw" _
                                 Else .reDraw IIf(.isUpper, 2, 0), False, False, False '.DDMatrixFrom% + 1
        End With: trySat = True: End If: End If: ls "<", "trySat": End Function
Public Sub WinTBswitcher(Optional force, Optional ByVal ignore As Boolean): stopAH = False: If ignore Then Exit Sub Else ls ">", "WinTBswitcher"
                     If IsMissing(force) Then useTB = Not DDM.useTB Else If DDM.useTB = force Then trySat force: Exit Sub Else useTB = force
        If Not FnFormIsLoaded("SCSForm") Then ShowWindow& GetTopParentH(FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|")), IIf(useTB, SW_SHOW&, SW_HIDE&) _
                     Else With SCSForm: ShowWindow& DDM.TBhwnd, IIf(useTB, SW_SHOW&, SW_HIDE&): DDMini DDM: L0M "ResetScDDM": .reParkW , Not trySat: .focusMe: End With  '.reParkW: trySat
        L0M "If Not useTB Then": hWnd& = GetActiveWindow: SetTopMostWindow& FindWindow(vbNullString, "|fffd||fffd||fffd||fffd|"), True: SetActiveWindow& hWnd& '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                                          ls "<", "WinTBswitcher": End Sub
Sub WinTBswitcher_AH(): WinTBswitcher False, ignore:=stopAH: End Sub '|fffd||fffd||fffd||fffd| ignore |fffd||fffd| ByVal, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| stopAH |fffd||fffd||fffd||fffd||fffd||fffd| ignore (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)

Sub setGoldenTheme(turnOn): SDGoldenTheme = turnOn
If DDBarUsed Then
    If DDBar.isMatrix Then Set DDBar.Picture = IIf(turnOn, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\friz_mramor2B.jpg"), Nothing): DDBar.Repaint _
Else If DDBar.isUpper Then Set DDBar.Picture = IIf(turnOn, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\DDBar(Top).jpg"), Nothing): DDBar.Repaint
End If: If FnFormIsVisible("FindForm") Then Set FindForm.Picture = IIf(turnOn, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\FindForm.jpg"), Nothing): FindForm.Repaint
        If FnFormIsVisible("JOTCaller") Then Set JOTCaller.Picture = IIf(turnOn, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\JotCaller.jpg"), Nothing): JOTCaller.Repaint
        If FnFormIsVisible("ChessCaller") Then Set ChessCaller.Picture = IIf(turnOn, LoadPicture(ThisWorkbook.path & "\icons\hot\fones\ChessCaller.jpg"), Nothing): ChessCaller.Repaint
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private notSavingInVBE As Boolean
Public force7z As Boolean '190917 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| _AfterSave |fffd||fffd||fffd||fffd||fffd| Cancel |fffd| _BeforeSave (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| "SaveAndBackUp")

Private Sub Workbook_AfterSave(ByVal Success As Boolean): '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| [P], |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?
If realySaved And useCmd_prm And force7z Then waitF_long: Shell cmd_path$ & "mac.cmd", vbNormalFocus Else waitF 200
End Sub          'useCmd_prm = True |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Public Sub AfterSave(): '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call das: LM "AfterSave": If AC_flg Then Exit Sub 'Else waitF_long 'TEST
If realySaved And useCmd_prm Then waitF_long: Shell cmd_path$ & "mac.cmd", vbNormalFocus Else waitF 300 '0.5
' On Error GoTo exitL: waitF_long 'Or Workbooks("MAIN.XLSB").ActiveSheet.name <> "Dispetcher_" Then
        LM "Workbook_AfterSave": If Not FnFormIsLoaded("SCSForm") Then waitF 100: Exit Sub
With SCSForm: If ghwnd& = .vb_hwnd Then .SetTBhwnd 3, .vb_hwnd 'Application.VBE.MainWindow.Visible = Not notSavingInVBE
Call ShowAllForms: 'customSCS_loadTargetPos: .reParkW True: .focusMe
                   Schedule 1, "customSCS_loadTargetPos"
                   '.reParkW True: .UserForm_Layout: .focusMe
                   'Schedule 1, "customSCS_UserForm_Layout":
'.loadTargetPos:  .reDraw: .UserForm_Layout: End With
exitL: End With: waitF 200: End Sub 'SCSForm.reParkW: Application.EnableEvents = True:

Private Function realySaved() As Boolean: realySaved = ThisWorkbook.Saved And VBProject.Saved: End Function
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean): LM "BeforeSave " & ThisWorkbook.name
If realySaved Then Cancel = True: waitF 200: Exit Sub Else: If AC_flg Then Exit Sub ' Or Workbooks("MAIN.XLSB").ActiveSheet.name <> "Dispetcher_" Then Exit Sub
'If realySaved Then dbg_ ThisWorkbook.Saved, ThisWorkbook.Saved
    Exit Sub 'TEMP (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
If Not FnFormIsVisible("PF") Or Not smart_freezing Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
Call srvProc100Fix 'Else If Not SCSForm.Visible Then Exit Sub Else notSavingInVBE = Not Application.VBE.MainWindow.Visible
stoplog = True: With SCSForm: If .TargetForm.Left > ScLt% * x75 - 111 Then .saveTargetPos
                              If Application.vbe.MainWindow.Visible Then
                                If .inCollection(Get_vb_hwnd&) Then
                                  If .bl_hwnd = .vb_hwnd Then ghwnd& = .vb_hwnd: .minimizeW .bl_hwnd: .SetTBhwnd 3, 0 'Get_vb_hwnd&
                                  .HideTargetW True: .reParkW True
                              End If: End If: End With: ShowAllForms False: ThisWorkbook.Save
                            If realySaved Then AfterSave ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| Workbook_AfterSave[P])
stoplog = False: End Sub 'SCForm.reDraw: .reDraw
                            '|fffd||fffd||fffd| ThisWorkbook.Save |fffd||fffd||fffd||fffd||fffd| ^ |fffd||fffd||fffd| AfterSave (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - If ThisWorkbook.Saved Then Cancel), |fffd||fffd| |fffd| [P] |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|...
'''End With:
'End Sub '4 test

Private Sub Workbook_Open(): flg_InWork = True: macnamech: flg_InWork = False: End Sub 'ThisWorkbook.Saved = True:

Sub testSave()
    MsgBox "MAC : " & ThisWorkbook.Saved & Chr(10) & _
           "MAIN: " & Workbooks("MAIN.XLSB").Saved
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Disp_ShutDown
'If ThisWorkbook.Saved And n2s Then If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbOKCancel + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|!") _
'                           = vbCancel Then Cancel = True: Exit Sub Else GoTo exitL
'Dim save_mode%: save_mode% = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNoCancel + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|...")
'             If save_mode% = vbCancel Then Cancel = True: AC_flg = False: Exit Sub Else AC_flg = True
'    On Error Resume Next: If FnFormIsLoaded("SCSForm") Then Call SCSForm.ReleaseAllW: Call SCSForm.HideTargetW: On Error GoTo 0
'                          For Each form In UserForms: Unload form: Next 'NEW
'    db__flg = True: 'TransExit
'    'Auto_Open, Auto_Close - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Workbook_Open
'    CF_RestoreFontAC '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CFF, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'    FindHider   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FindForm, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| docwaight |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (-timelost |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WB)
'    'DestroyCATForm '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    'On Error Resume Next
'    'MsgBox "done"
'    While active_bars <> ""
'      pos = InStr(1, active_bars, ";")
'      If pos > 1 Then
'        Application.CommandBars(Left$(active_bars, pos - 1)).Visible = True
'        active_bars = Right$(active_bars, Len(active_bars) - pos)
'      Else: active_bars = ""
'      End If
'    Wend
'With Application: .Visible = False: .DisplayFormulaBar = True: .CommandBars("Worksheet Menu Bar").Enabled = True
'        If (n2s Or Workbooks("MAIN.XLSB").Saved) And ThisWorkbook.Saved Then GoTo exitL _
'           Else If .vbe.MainWindow.Visible Then .vbe.MainWindow.Visible = False
'        'Saving >>                             '.VBE.MainWindow.WindowState = vbext_ws_Minimize
'        If Not ThisWorkbook.Saved Then If save_mode% = vbYes Then ThisWorkbook.Save _
'           Else If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes _
'           Then ThisWorkbook.Save: If (n2s Or Workbooks("MAIN.XLSB").Saved) Then GoTo exitL
'        If Not (n2s Or Workbooks("MAIN.XLSB").Saved) Then If save_mode% = vbYes Then Workbooks("MAIN.XLSB").Save _
'           Else If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...") = vbYes _
'           Then Workbooks("MAIN.XLSB").Save: '.Run "MAC.XLA!Delay", 3
'End With
'exitL:  waitF_long: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ShowDesktopW True: Application.DisplayAlerts = False: Application.Quit
End Sub

Private Sub Workbook_PivotTableCloseConnection(ByVal Target As PivotTable)

End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub

' InQuest injected base64 decoded content
' )^J)
' y+kz
' ~`ZrD
' hrD^
' j{)j
' rJ'^

INQUEST-PP=macro
