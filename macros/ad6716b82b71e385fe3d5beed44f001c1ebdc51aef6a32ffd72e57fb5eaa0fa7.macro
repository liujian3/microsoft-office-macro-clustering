Attribute VB_Name = "Eigenvalue"
Private Const Epsilon  As Double = 0.0000001

Dim A() As Double
Dim AA() As Double
Dim G() As Double
Dim GG() As Double

Dim N As Long
Dim J As Long
Dim K As Long
Dim M As Long
Dim Jmax  As Long
Dim Kmax  As Long
Dim Iter  As Long

Dim Amax As Double
Dim tau As Double
Dim T As Double
Dim C As Double 'cos(theta)
Dim S As Double 'sin(theta)

Public Sub EigenvalueMain()

N = Application.Count(Columns(2))

ReDim A(1 To N, 1 To N) As Double
ReDim AA(1 To N, 1 To N) As Double
ReDim G(1 To N, 1 To N) As Double
ReDim GG(1 To N, 1 To N) As Double

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| A
For J = 1 To N
    For K = 1 To N
        A(J, K) = Cells(J + 1, K + 1)
    Next K
Next J

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For J = 1 To N
For K = 1 To N
    If J = K Then
        G(J, K) = 1
    Else
        G(J, K) = 0
    End If
Next K
Next J

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
I = 0

Line1:

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Amax = Abs(A(1, 2)): Jmax = 1: Kmax = 2
        For J = 1 To N - 1
        For K = J + 1 To N
            If Abs(A(J, K)) > Amax Then
                Amax = Abs(A(J, K))
                Jmax = J
                Kmax = K
            End If
        Next K
        Next J
        
        If Amax > Epsilon Then
            I = I + 1
            JakobiRotation
            GoTo Line1
        End If
        
        For J = 1 To N
        For K = 1 To N
        Cells(J + N + 2, K + 1) = A(J, K)
        Next K
        Next J
        Cells(1, 1) = I

End Sub

Public Sub JakobiRotation()

        If A(Jmax, Jmax) = A(Kmax, Kmax) Then
            C = Cos(Pi / 4)
            S = Sin(Pi / 4)
            GoTo Line2
        End If
            tau = (A(Jmax, Jmax) - A(Kmax, Kmax)) / 2 / A(Jmax, Kmax)
            T = (tau / Abs(tau)) / (Abs(tau) + (1 + tau ^ 2) ^ 0.5)
            C = 1 / (1 + T ^ 2) ^ 0.5
            S = C * T
 
Line2:

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GG
For J = 1 To N
For K = 1 To N
    If J = Jmax And K = Kmax Then
        GG(J, J) = C: G(K, K) = C: G(K, J) = S: G(J, K) = -S
        ElseIf J = K Then
        GG(J, K) = 1
        Else
        GG(J, K) = 0
    End If
Next K
Next J

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| A

        AA(Jmax, Jmax) = C * C * A(Jmax, Jmax) + 2 * S * C * A(Jmax, Kmax) + S * S * A(Kmax, Kmax)
        AA(Kmax, Kmax) = S * S * A(Jmax, Jmax) - 2 * S * C * A(Jmax, Kmax) + C * C * A(Kmax, Kmax)
        AA(Jmax, Kmax) = (C * C - S * S) * A(Jmax, Kmax) + S * C * (A(Kmax, Kmax) - A(Jmax, Jmax))
        AA(Kmax, Jmax) = AA(Jmax, Kmax)
    
For M = 1 To N
    If M <> Jmax And M <> Kmax Then
        AA(Jmax, M) = C * A(Jmax, M) + S * A(Kmax, M): AA(M, Jmax) = AA(Jmax, M)
        AA(Kmax, M) = C * A(Kmax, M) - S * A(Jmax, M): AA(M, Kmax) = AA(Kmax, M)
    End If
Next M
    
For M = 1 To N
For L = 1 To N
    If M <> Jmax And M <> Kmax And L <> Jmax And L <> Kmax Then
        AA(M, L) = A(M, L)
    End If
Next L
Next M

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| G |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GG
For J = 1 To N
For I = 1 To N
R = 0
    For K = 1 To N
        R = R + G(I, K) * GG(K, J)
    Next K
GG(I, J) = R
Next I
Next J

For M = 1 To N
For L = 1 To N
    G(M, L) = GG(M, L)
Next L
Next M

For M = 1 To N
For L = 1 To N
    A(M, L) = AA(M, L)
Next L
Next M

End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



INQUEST-PP=macro
