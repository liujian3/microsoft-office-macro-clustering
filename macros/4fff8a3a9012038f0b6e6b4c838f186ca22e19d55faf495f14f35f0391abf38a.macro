Attribute VB_Name = "AllSheetsInThisWorkbook"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdGetListAllSheets, 1, 0, MSForms, CommandButton"
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| A |fffd| B
Private Sub cmdGetListAllSheets_Click()
  
  Dim intNumberWorkSheet As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intNumberTechSheet As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim ws As Worksheet
  Dim wb As Workbook
  Dim rng As Range, cl As Range, cl_list As Range
  Dim nColor As Integer

  Set wb = ThisWorkbook
  Set ws = Me

  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Me.Range("A2:B2").Select
  Set rng = Me.Range(Selection, Selection.End(xlDown))
  rng.Select
  Selection.Clear

  intNumberWorkSheet = 2
  intNumberTechSheet = 2
  For Each ws In wb.Sheets
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If ws.name <> gstrCheckSheetName Then
      If ws.Tab.ColorIndex <> colorLightBrown Then                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.Range("A" & intNumberWorkSheet).Value = ws.CodeName
        intNumberWorkSheet = intNumberWorkSheet + 1
      Else                                                         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.Range("B" & intNumberTechSheet).Value = ws.CodeName
        intNumberTechSheet = intNumberTechSheet + 1
      End If
    End If
  Next ws

  Me.Range("A1").Select

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' AddHyp - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function blnCheckIfSheet(wsCheckSheet As Worksheet)
  
  blnCheckIfSheet = True

  Dim wbBook As Workbook
  Dim intCounterRow As Integer      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Dim wsSheet As Worksheet          ' |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strTempNameSheet As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Set wbBook = wsCheckSheet.parent
  
'************************************|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|********************************************************************************
'  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'  If Not (modServiceModule.SheetExists("AllSheetsInThisWorkbook", wbBook)) Then
'    AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
'           "|fffd||fffd||fffd||fffd| 'AllSheetsInThisWorkbook' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
'    blnCheckIfSheet = False
'    Exit Function
'  End If
'***********************************************************************************************************************************************************

  Set wsSheet = wbBook.Sheets("AllSheetsInThisWorkbook")
  
  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| A |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 1).Value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 1).Value
    If Not (modServiceModule.CodeNameSheetExists(strTempNameSheet, wbBook)) Then
      modPROV.AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
             "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop
  
  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| B |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 2).Value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 2).Value
    If Not (modServiceModule.CodeNameSheetExists(strTempNameSheet, wbBook)) Then
      modPROV.AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
             "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop

End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strSheetName
Public Sub CreateCheckSheet(wbBook As Workbook, strSheetName As String)
    
    Dim wsSheet As Worksheet
    
    wbBook.Sheets.Add(After:=wbBook.Sheets(wbBook.Sheets.Count)).name = strSheetName
    Set wsSheet = wbBook.Sheets(strSheetName)

    wsSheet.Tab.ColorIndex = 24

    wsSheet.Activate
    wsSheet.Range("E12:G12").Select
    With Selection
        .Interior.ColorIndex = colorGrey
        .Interior.pattern = xlSolid
        
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
        
        .Font.Bold = True

         .Borders(xlDiagonalDown).LineStyle = xlNone
         .Borders(xlDiagonalUp).LineStyle = xlNone
         .Borders(xlEdgeLeft).LineStyle = xlContinuous
         .Borders(xlEdgeLeft).Weight = xlThin
         .Borders(xlEdgeLeft).ColorIndex = 56
    
         .Borders(xlEdgeTop).LineStyle = xlContinuous
         .Borders(xlEdgeTop).Weight = xlThin
         .Borders(xlEdgeTop).ColorIndex = 56

         .Borders(xlEdgeBottom).LineStyle = xlContinuous
         .Borders(xlEdgeBottom).Weight = xlMedium
         .Borders(xlEdgeBottom).ColorIndex = 56
    
         .Borders(xlEdgeRight).LineStyle = xlContinuous
         .Borders(xlEdgeRight).Weight = xlMedium
         .Borders(xlEdgeRight).ColorIndex = 56
    
         .Borders(xlInsideVertical).LineStyle = xlContinuous
         .Borders(xlInsideVertical).Weight = xlThin
         .Borders(xlInsideVertical).ColorIndex = 56
    End With
    
    wsSheet.Range("E12").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Range("F12").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Range("G12").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    
    wsSheet.Rows("12:12").RowHeight = 21.75
    
    wsSheet.Columns("D:D").ColumnWidth = 4
    wsSheet.Columns("E:E").ColumnWidth = 26.57
    wsSheet.Columns("F:F").ColumnWidth = 77.14
    wsSheet.Columns("G:G").ColumnWidth = 17
    
    wsSheet.Range("E13:G13").Select
    With Selection
        .Font.name = "Tahoma"
        .Font.FontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .Font.Size = 9
        .Font.Strikethrough = False
        .Font.Superscript = False
        .Font.Subscript = False
        .Font.OutlineFont = False
        .Font.Shadow = False
        .Font.Underline = xlUnderlineStyleNone
        .Font.ColorIndex = 48
        
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
       
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlMedium
        .Borders(xlEdgeTop).ColorIndex = 56
    
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).ColorIndex = 56
        
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
    End With
    
    wsSheet.Range("E13").Value = "1"
    wsSheet.Range("F13").Value = "2"
    wsSheet.Range("G13").Value = "3"
    
    wsSheet.Range("E10:G10").Select
    Selection.Merge
    With Selection
        .Font.Bold = True
        
        .Interior.ColorIndex = 24
        .Interior.pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
        
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
    
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeLeft).ColorIndex = 56
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).ColorIndex = 56
    
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlMedium
        .Borders(xlEdgeBottom).ColorIndex = 56
    
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlMedium
        .Borders(xlEdgeRight).ColorIndex = 56
        
        .Borders(xlInsideVertical).LineStyle = xlNone
    End With
    
    wsSheet.Range("E10").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Rows("10:10").RowHeight = 21.75
    
    wsSheet.Columns("A:C").Select
    Selection.EntireColumn.Hidden = True
    wsSheet.Rows("1:6").Select
    Selection.EntireRow.Hidden = True
    
    ActiveWindow.DisplayGridlines = False
    
    wsSheet.cells.Select
    With Selection.Font
        .name = "Tahoma"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
    End With

End Sub

Attribute VB_Name = "NamedRangeAppender"
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd|:     1.1 (22.02.2006)
' |fffd||fffd||fffd||fffd||fffd|:      |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd|>?<|fffd||fffd||fffd|>

Public Function GetNamePrefix(name As String) As String
    Dim i As Integer
    i = VBA.InStr(name, "?")

    If i = 0 Then
        GetNamePrefix = ""
    Else
        GetNamePrefix = VBA.Mid(name, 1, i - 1)
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function GetLocalName(name As String) As String
    Dim i As Integer
    i = VBA.InStr(name, "?")

    If i = 0 Then
        GetLocalName = "???"
    Else
        GetLocalName = VBA.Mid(name, i + 1)
    End If
End Function



' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public Function AppendNameToRange(R As Range, n As name) As Range
    On Error GoTo ErrHandler

    If R Is Nothing Then
        Set AppendNameToRange = Range(n.name)
    Else
        Set AppendNameToRange = Application.Union(R, Range(n.name))
    End If

    Exit Function
ErrHandler:
    Set AppendNameToRange = R
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function GetNameWorksheetName(n As name) As String
    On Error GoTo ErrHandler

    GetNameWorksheetName = Range(n.name).Worksheet.name

    Exit Function
ErrHandler:
    GetNameWorksheetName = ""
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function rangesEqual(R1 As Excel.Range, R2 As Excel.Range) As Boolean
    Dim R As Excel.Range

    If R1 Is Nothing Or R2 Is Nothing Then
        rangesEqual = False
    Else
        Set R = Intersect(R1, R2)
        If R Is Nothing Then
            rangesEqual = False
        ElseIf Union(R1, R2).Address = R.Address Then
            rangesEqual = True
        Else
            rangesEqual = False
        End If
    End If
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function SelectionRangeName() As String
    Dim nam As Excel.name
    Dim R As Excel.Range

    For Each nam In Names
        Set R = nvlRefersToRange(nam)

        If Not R Is Nothing Then
            If R.Worksheet.name = Selection.Worksheet.name Then
                If rangesEqual(Selection, R) Then
                    SelectionRangeName = nam.name
                    Exit Function
                End If
            End If
        End If
    Next nam
    
    SelectionRangeName = ""
End Function
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Nothing, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function nvlRefersToRange(n As Excel.name) As Excel.Range
    On Error GoTo ErrHandler

    Set nvlRefersToRange = Range(n.name)

    Exit Function
ErrHandler:
    Set nvlRefersToRange = Nothing
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|

Public Function nameExists(name As String, ws As Worksheet) As Boolean
    Dim n As Excel.name

    On Error GoTo ErrHandler

    Set n = ws.parent.Names(name)
    nameExists = True
    Exit Function
ErrHandler:
    nameExists = False
End Function


Public Function nameExists2(name As String) As Boolean
    Dim R As Range

    On Error GoTo ErrHandler

    Set R = Range(name)
    nameExists2 = True
    Exit Function
ErrHandler:
    nameExists2 = False
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| RefersTo), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public Sub addRangeToName(R As Excel.Range, n As Excel.name)
    Dim R1 As Excel.Range
    Dim R2 As Excel.Range
    Dim n1 As Excel.name
    Dim wb As Excel.Workbook



    '-------------------------------
    'Set r1 = n.RefersToRange  ' - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set R1 = Range(n.name)     ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '-------------------------------
    
    Set wb = R1.Worksheet.parent

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error GoTo errhandler
'    address$ = n.RefersTo
'    address2$ = "'" & r.Worksheet.name & "'!" & r.AddressLocal
'    If address$ = "=" Then
'        n.RefersTo = address$ & address2$
'        Exit Sub
'    ElseIf Len(address$) + 1 + Len(address2$) <= 255 Then
'        n.RefersTo = address$ & "," & address2$
'        Exit Sub
'    End If
'
'errhandler:
'    Err.Clear

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|,
    ' union |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Dim pattern$
    If Not R1 Is Nothing Then
        Set R2 = Union(R, R1)
        pattern$ = "*_" & Replace(n.name, "?", "[?]")
        For Each n1 In wb.Names
            If n1.name Like pattern$ Then
                n1.Delete
            End If
        Next n1
    Else
        Set R2 = R
    End If

    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim an#
    an# = R2.Areas.Count
    Dim ar() As String
    ReDim ar(2 * an#)
    Dim i#, j#, t#
    i# = LBound(ar)
    For Each R1 In R2.Areas
        ar(i#) = "'" & R1.Worksheet.name & "'!" & R1.AddressLocal
        i# = i# + 1
    Next R1

    j# = LBound(ar) + 1
    t# = 1
    Dim Address$
    Address$ = "=" & ar(LBound(ar))

    While j# < i#
        If Len(Address$) + 1 + Len(ar(j#)) > 150 Then
            wb.Names.Add name:="P" & t# & "_" & n.name, RefersTo:=Address$, Visible:=False
            ar(i#) = "P" & t# & "_" & n.name
            i# = i# + 1
            t# = t# + 1
            Address$ = "=" & ar(j#)
        Else
            Address$ = Address$ & "," & ar(j#)
        End If
        j# = j# + 1
    Wend
    
    n.RefersTo = Address$
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Sub AppendNames(copy_range As Range, dest_range As Range, prefix As String)
    Dim nam As Excel.name

    For Each nam In ActiveWorkbook.Names
        If GetNamePrefix(nam.name) = prefix Then
            CopyHasAreas copy_range, dest_range, nam
        End If
    Next nam
End Sub

Function CopyHasAreas(copy_range As Range, dest_range As Range, nam As name) As Boolean
    Dim a As Range

    Dim OffsetX#, OffsetY#
    OffsetX# = dest_range.Column - copy_range.Column
    OffsetY# = dest_range.Row - copy_range.Row

    For Each a In Range(nam.name).Areas
        If a.Worksheet.name = copy_range.Worksheet.name Then
            If rangesEqual(a, Intersect(a, copy_range)) Then
                addRangeToName a.Offset(OffsetY#, OffsetX#), nam
            End If
        End If
    Next a
End Function


Sub ClearNames(prefix As String)
    Dim nam As Excel.name

'    On Error GoTo errhandler

    For Each nam In Names
        If InStr(nam.name, prefix) Then
            nam.Delete
        End If
    Next nam

    Exit Sub
'errhandler:
'    MsgBox Err.Description, vbOKOnly + vbExclamation, Err.Source
End Sub


Public Function ISect(R1 As Range, R2 As Range) As Range
    Set ISect = Intersect(R1, R2)
End Function

Attribute VB_Name = "SHEET_UPDATE_INSTRUCTION"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdDownloadDataFromFile, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdGetUpdate, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "chkGetUpdates, 4, 2, MSForms, CheckBox"
Attribute VB_Control = "chkNoUpdates, 5, 3, MSForms, CheckBox"
Option Explicit

Private Sub chkGetUpdates_Click()
  If Me.chkGetUpdates.Value = True Then
    Me.chkNoUpdates.Value = False
  Else
    Me.chkNoUpdates.Value = True
  End If
End Sub

Private Sub chkNoUpdates_Click()
  If Me.chkNoUpdates.Value = True Then
    Me.chkGetUpdates.Value = False
  Else
    Me.chkGetUpdates.Value = True
  End If
End Sub

Private Sub cmdDownloadDataFromFile_Click()
  
  On Error GoTo ErrHandler

  If modUpd_Templ_Defines.gblnFeatureDataDownloadAvailable = False Then
    MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  Else
    OpenFileDialog
  End If
  
  GoTo Success
  
Success:
  GoTo cleanUp
ErrHandler:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
         vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo cleanUp
cleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Function OpenFileDialog() As String

  Dim lngCount As Long
  Dim fd As FileDialog
  Dim vrtSelectedItem As Variant
  Dim strExtensionsList As String
  
  OpenFileDialog = vbNullString
  
  Set fd = Application.FileDialog(msoFileDialogOpen)
  
  If val(Application.Version) < 12 Then
    ' You use Excel 97-2003
    strExtensionsList = modUpd_Templ_Defines.MS_EXCEL_2003_EXTENSIONS_LIST
  Else
    ' You use Excel 2007-2010
    strExtensionsList = modUpd_Templ_Defines.MS_EXCEL_2007_EXTENSIONS_LIST
  End If
  
  fd.AllowMultiSelect = False
  fd.Filters.Clear
  fd.Filters.Add "|fffd||fffd||fffd||fffd||fffd| MS Excel", strExtensionsList, 1
  fd.ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  fd.InitialView = msoFileDialogViewDetails
  fd.Title = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
        
  fd.FilterIndex = 1
                
  If fd.Show = -1 Then
  
    For Each vrtSelectedItem In fd.SelectedItems

      'vrtSelectedItem is a string that contains the path of each selected item.
      'You can use any file I/O functions that you want to work with this path.
      OpenFileDialog = CStr(vrtSelectedItem)
      
      If Mid(OpenFileDialog, Len(OpenFileDialog) - 3, 4) <> ".xls" Then
        OpenFileDialog = vbNullString
      End If
      
      If Application.Version > "11.0" Then ' |fffd||fffd||fffd| MS Office 2007 |fffd| |fffd||fffd||fffd||fffd|
        If Mid(OpenFileDialog, Len(OpenFileDialog) - 4, 5) <> ".xlsm" And _
           Mid(OpenFileDialog, Len(OpenFileDialog) - 4, 5) <> ".xlsx" Then
          OpenFileDialog = vbNullString
        End If
      End If
      
    Next vrtSelectedItem
    
  End If
  
  Set fd = Nothing

End Function

Private Sub cmdGetUpdate_Click()
  frmUpdate.Show vbModal
End Sub
Attribute VB_Name = "TEHSH_REESTR_FILTER"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_et_union"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_reestr_mo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_reestr_org"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_tehsheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Wrapper"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Function GetFilterRange(R As Range, v As Variant) As Range
    Dim cell As Range

    If R.Columns.Count > 1 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In R
            If cell.Value = v Then
                If GetFilterRange Is Nothing Then
                    Set GetFilterRange = cell.Worksheet.Columns(cell.Column)
                Else
                    Set GetFilterRange = Union(GetFilterRange, cell.Worksheet.Columns(cell.Column))
                End If
            End If
        Next cell
    Else                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In R
            If cell.Value = v Then
                If GetFilterRange Is Nothing Then
                    Set GetFilterRange = cell.Worksheet.Rows(cell.Row)
                Else
                    Set GetFilterRange = Union(GetFilterRange, cell.Worksheet.Rows(cell.Row))
                End If
            End If
        Next cell
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2

Public Function GetValueFilter1(R1 As Range, R2 As Range, v2 As Variant, Optional R3 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R3) Then
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2))
    ElseIf R3 Is Nothing Then
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2))
    Else
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2), R3)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter1 = Nothing
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2 and r3 = v3

Public Function GetValueFilter2(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, Optional R4 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R4) Then
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3))
    ElseIf R4 Is Nothing Then
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3))
    Else
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), R4)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter2 = Nothing
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2 and r3 = v3 and r4 = v4

Public Function GetValueFilter3(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, R4 As Range, v4 As Variant, Optional R5 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R5) Then
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4))
    ElseIf R5 Is Nothing Then
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4))
    Else
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4), R5)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter3 = Nothing
End Function


Public Function SumValueFilter1(R1 As Range, R2 As Range, v2 As Variant, Optional R3 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter1 = CDbl(0)
    Set cells = GetValueFilter1(R1, R2, v2, R3)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter1 = SumValueFilter1 + CDbl(cell.Value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter1 = CVErr(xlErrNum)
End Function


Public Function SumValueFilter2(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, Optional R4 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter2 = CDbl(0)
    Set cells = GetValueFilter2(R1, R2, v2, R3, v3, R4)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter2 = SumValueFilter2 + CDbl(cell.Value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter2 = CVErr(xlErrNum)
End Function


Public Function SumValueFilter3(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, R4 As Range, v4 As Variant, Optional R5 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter3 = CDbl(0)
    Set cells = GetValueFilter3(R1, R2, v2, R3, v3, R4, v4, R5)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter3 = SumValueFilter3 + CDbl(cell.Value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter3 = CVErr(xlErrNum)
End Function


Public Function ExcelIntersect(R1 As Range, R2 As Range) As Range
    On Error GoTo ErrHandler
    Set ExcelIntersect = Intersect(R1, R2)
    Exit Function
ErrHandler:
    Set ExcelIntersect = Nothing
End Function



Public Function ParseBook2() As Boolean
    Dim ctl As Variant
    Dim btn As CommandBarButton

    On Error GoTo ErrHandler

    Set ctl = LookupMenu(CommandBars("Worksheet Menu Bar"), "|fffd||fffd||fffd| |fffd||fffd||fffd|")
    Set ctl = LookupMenu(ctl, "XML")
    Set btn = LookupMenu(ctl, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If Not TryExecute(btn) Then
        ParseBook2 = TryRun(btn)
    Else
        ParseBook2 = True
    End If

    Exit Function
ErrHandler:
    ParseBook2 = False
End Function
Private Function TryExecute(btn As CommandBarButton) As Boolean
    On Error GoTo ErrHandler
    btn.Execute
    TryExecute = True
    Exit Function
ErrHandler:
    TryExecute = False
End Function
Private Function TryRun(btn As CommandBarButton) As Boolean
    On Error GoTo ErrHandler
    Application.Run btn.OnAction
    TryRun = True
    Exit Function
ErrHandler:
    TryRun = False
End Function


Public Function LookupMenu(ByRef parent As Variant, caption As String) As Variant
    Dim ctl As CommandBarControl

    For Each ctl In parent.Controls
        If ctl.caption = caption Then
            Set LookupMenu = ctl
            Exit Function
        End If
    Next ctl
    
    LookupMenu = Null
End Function


Public Function nErr(val As Variant, Optional val2 As Variant) As Variant
    If IsError(val) Then
        If IsMissing(val2) Then
            nErr = Empty
        Else
            nErr = val2
        End If
    Else
        nErr = val
    End If
End Function

Public Function SetVersion(strVersion As String) As Boolean
  
  On Error GoTo ErrHandler
  
  SetVersion = False
  
  If Len(strVersion) = 0 Then
    Exit Function
  End If
  
  ActiveWorkbook.CustomDocumentProperties("CurrentVersion").Value = strVersion
  
  Exit Function
  
ErrHandler:

  If Err.Number = 5 Then
    Err.Clear
        
    On Error GoTo ErrHandler2
    
    If VarType(strVersion) = vbString Then
      ActiveWorkbook.CustomDocumentProperties.Add name:="CurrentVersion", _
                                                  LinkToContent:=False, _
                                                  Type:=msoPropertyTypeString, _
                                                  Value:=strVersion
      SetVersion = True
    End If
  End If

ErrHandler2:
    
End Function

Public Function GetVersion() As Variant
  
  On Error GoTo NewProperty
  
  Dim strVersion As String
  
  strVersion = ActiveWorkbook.CustomDocumentProperties("CurrentVersion")
  
  GoTo ExitFunction
 
NewProperty:
  strVersion = "1.0"
  If SetVersion(strVersion) = False Then
    strVersion = ""
  End If
ExitFunction:
  GetVersion = strVersion
  Exit Function

End Function

Public Function ProcedureExists(name As String, module As Variant) As Boolean
    On Error Resume Next
    ProcedureExists = module.ProcStartLine(name, vbext_pk_Proc) <> 0
End Function


Public Function CanAutomate() As Boolean
    CanAutomate = ThisWorkbook.CustomDocumentProperties("ARMSEM").Value
End Function
Public Function RegisterARMSEM() As Boolean
    Dim a As AddIn

    RemoveReferenceToARMSEM

    On Error GoTo ErrHandler

    For Each a In AddIns
        If a.name = "ARMSEM.xla" Then
            ThisWorkbook.VBProject.References.AddFromfile a.FullName
            RegisterARMSEM = True
            ThisWorkbook.CustomDocumentProperties("ARMSEM").Value = True
            Exit Function
        End If
    Next a
    
ErrHandler:
    RegisterARMSEM = False
    ThisWorkbook.CustomDocumentProperties("ARMSEM").Value = False
End Function
Public Sub RemoveReferenceToARMSEM()
    On Error Resume Next

    ThisWorkbook.VBProject.References.Remove ThisWorkbook.VBProject.References("ARMSEM")
End Sub

Attribute VB_Name = "frmDateChoose"
Attribute VB_Base = "0{535FECA5-0040-47EC-B986-341340B34492}{DDF6F803-E60B-4D6D-AB89-77D803C19867}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cbMonth_Change()
  modfrmDateChoose.cbMonth_Change_Handler
End Sub

Private Sub lblMonthMinus_Click()
  modfrmDateChoose.lblMonthMinus_Click_Handler
End Sub

Private Sub lblMonthPlus_Click()
  modfrmDateChoose.lblMonthPlus_Click_Handler
End Sub

Private Sub spinYearChange_SpinDown()
  modfrmDateChoose.spinYearChange_SpinDown_Handler
End Sub

Private Sub spinYearChange_SpinUp()
  modfrmDateChoose.spinYearChange_SpinUp_Handler
End Sub

Private Sub txtYear_Change()
  modfrmDateChoose.txtYear_Change_Handler
End Sub

Private Sub UserForm_Activate()
  modfrmDateChoose.UserForm_Activate_Handler
End Sub

' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /LabelX_Y:
'                                   |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - X - |fffd||fffd||fffd||fffd||fffd||fffd|,
'                                   |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - Y - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label1_1_Click()
  modfrmDateChoose.LabelClick_Handler Label1_1
End Sub

Private Sub Label1_2_Click()
  modfrmDateChoose.LabelClick_Handler Label1_2
End Sub

Private Sub Label1_3_Click()
  modfrmDateChoose.LabelClick_Handler Label1_3
End Sub

Private Sub Label1_4_Click()
  modfrmDateChoose.LabelClick_Handler Label1_4
End Sub

Private Sub Label1_5_Click()
  modfrmDateChoose.LabelClick_Handler Label1_5
End Sub

Private Sub Label1_6_Click()
  modfrmDateChoose.LabelClick_Handler Label1_6
End Sub

Private Sub Label1_7_Click()
  modfrmDateChoose.LabelClick_Handler Label1_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label2_1_Click()
  modfrmDateChoose.LabelClick_Handler Label2_1
End Sub

Private Sub Label2_2_Click()
  modfrmDateChoose.LabelClick_Handler Label2_2
End Sub

Private Sub Label2_3_Click()
  modfrmDateChoose.LabelClick_Handler Label2_3
End Sub

Private Sub Label2_4_Click()
  modfrmDateChoose.LabelClick_Handler Label2_4
End Sub

Private Sub Label2_5_Click()
  modfrmDateChoose.LabelClick_Handler Label2_5
End Sub

Private Sub Label2_6_Click()
  modfrmDateChoose.LabelClick_Handler Label2_6
End Sub

Private Sub Label2_7_Click()
  modfrmDateChoose.LabelClick_Handler Label2_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label3_1_Click()
  modfrmDateChoose.LabelClick_Handler Label3_1
End Sub

Private Sub Label3_2_Click()
  modfrmDateChoose.LabelClick_Handler Label3_2
End Sub

Private Sub Label3_3_Click()
  modfrmDateChoose.LabelClick_Handler Label3_3
End Sub

Private Sub Label3_4_Click()
  modfrmDateChoose.LabelClick_Handler Label3_4
End Sub

Private Sub Label3_5_Click()
  modfrmDateChoose.LabelClick_Handler Label3_5
End Sub

Private Sub Label3_6_Click()
  modfrmDateChoose.LabelClick_Handler Label3_6
End Sub

Private Sub Label3_7_Click()
  modfrmDateChoose.LabelClick_Handler Label3_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label4_1_Click()
  modfrmDateChoose.LabelClick_Handler Label4_1
End Sub

Private Sub Label4_2_Click()
  modfrmDateChoose.LabelClick_Handler Label4_2
End Sub

Private Sub Label4_3_Click()
  modfrmDateChoose.LabelClick_Handler Label4_3
End Sub

Private Sub Label4_4_Click()
  modfrmDateChoose.LabelClick_Handler Label4_4
End Sub

Private Sub Label4_5_Click()
  modfrmDateChoose.LabelClick_Handler Label4_5
End Sub

Private Sub Label4_6_Click()
  modfrmDateChoose.LabelClick_Handler Label4_6
End Sub

Private Sub Label4_7_Click()
  modfrmDateChoose.LabelClick_Handler Label4_7
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label5_1_Click()
  modfrmDateChoose.LabelClick_Handler Label5_1
End Sub

Private Sub Label5_2_Click()
  modfrmDateChoose.LabelClick_Handler Label5_2
End Sub

Private Sub Label5_3_Click()
  modfrmDateChoose.LabelClick_Handler Label5_3
End Sub

Private Sub Label5_4_Click()
  modfrmDateChoose.LabelClick_Handler Label5_4
End Sub

Private Sub Label5_5_Click()
  modfrmDateChoose.LabelClick_Handler Label5_5
End Sub

Private Sub Label5_6_Click()
  modfrmDateChoose.LabelClick_Handler Label5_6
End Sub

Private Sub Label5_7_Click()
  modfrmDateChoose.LabelClick_Handler Label5_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label6_1_Click()
  modfrmDateChoose.LabelClick_Handler Label6_1
End Sub

Private Sub Label6_2_Click()
  modfrmDateChoose.LabelClick_Handler Label6_2
End Sub

Private Sub Label6_3_Click()
  modfrmDateChoose.LabelClick_Handler Label6_3
End Sub

Private Sub Label6_4_Click()
  modfrmDateChoose.LabelClick_Handler Label6_4
End Sub

Private Sub Label6_5_Click()
  modfrmDateChoose.LabelClick_Handler Label6_5
End Sub

Private Sub Label6_6_Click()
  modfrmDateChoose.LabelClick_Handler Label6_6
End Sub

Private Sub Label6_7_Click()
  modfrmDateChoose.LabelClick_Handler Label6_7
End Sub

' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /LabelX_Y:
'                                 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - X - |fffd||fffd||fffd||fffd||fffd||fffd|,
'                                 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - Y - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label1_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_1
End Sub

Private Sub Label1_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_2
End Sub

Private Sub Label1_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_3
End Sub

Private Sub Label1_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_4
End Sub

Private Sub Label1_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_5
End Sub

Private Sub Label1_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_6
End Sub

Private Sub Label1_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label2_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_1
End Sub

Private Sub Label2_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_2
End Sub

Private Sub Label2_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_3
End Sub

Private Sub Label2_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_4
End Sub

Private Sub Label2_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_5
End Sub

Private Sub Label2_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_6
End Sub

Private Sub Label2_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label3_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_1
End Sub

Private Sub Label3_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_2
End Sub

Private Sub Label3_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_3
End Sub

Private Sub Label3_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_4
End Sub

Private Sub Label3_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_5
End Sub

Private Sub Label3_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_6
End Sub

Private Sub Label3_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label4_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_1
End Sub

Private Sub Label4_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_2
End Sub

Private Sub Label4_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_3
End Sub

Private Sub Label4_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_4
End Sub

Private Sub Label4_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_5
End Sub

Private Sub Label4_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_6
End Sub

Private Sub Label4_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_7
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label5_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_1
End Sub

Private Sub Label5_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_2
End Sub

Private Sub Label5_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_3
End Sub

Private Sub Label5_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_4
End Sub

Private Sub Label5_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_5
End Sub

Private Sub Label5_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_6
End Sub

Private Sub Label5_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label6_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_1
End Sub

Private Sub Label6_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_2
End Sub

Private Sub Label6_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_3
End Sub

Private Sub Label6_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_4
End Sub

Private Sub Label6_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_5
End Sub

Private Sub Label6_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_6
End Sub

Private Sub Label6_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_7
End Sub
Attribute VB_Name = "frmReestr"
Attribute VB_Base = "0{072474E6-A581-4C4E-9851-D1D1ED492AD1}{99CA5C71-FF23-4EE6-A8F6-67BDB316988B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub chkFilterEnabled_Click()
  modfrmReestr.chkFilterEnabled_Click_Handler
End Sub

Private Sub CmdOK_Click()
  modfrmReestr.cmdOK_Click_Handler
End Sub

Private Sub ListReestr_Change()
  modfrmReestr.ListReestr_Change_Handler
End Sub

Private Sub txtMOFilter_Change()
  modfrmReestr.txtMOFilter_Change_Handler
End Sub

Private Sub txtMRFilter_Change()
  modfrmReestr.txtMRFilter_Change_Handler
End Sub

Private Sub txtOrgFilter_Change()
  modfrmReestr.txtOrgFilter_Change_Handler
End Sub

Private Sub cmdUpdateReestr_Click()
  modfrmReestr.cmdUpdateReestr_Click_Handler
End Sub

Private Sub ListReestr_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestr.ListReestr_DblClick_Handler Cancel
End Sub

Private Sub txtURL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestr.txtURL_DblClick_Handler Cancel
End Sub

Private Sub UserForm_Initialize()
  modfrmReestr.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_Terminate()
  modfrmReestr.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmUpdate"
Attribute VB_Base = "0{74543852-1B2C-49CE-9A35-E43FDCB1C93C}{0F38B925-857C-4F4D-83E9-157112C4C4F7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Private Sub chkUpdateIsAvailable_Change()
  If frmUpdate.chkUpdateIsAvailable.Value = True Then
    frmUpdate.cmdPerformUpdate.Enabled = True
  Else
    frmUpdate.cmdPerformUpdate.Enabled = False
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdCheckForUpdates_Click()
  modUpdTemplMain.cmdCheckForUpdates_Click_Handler
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Private Sub cmdPerformUpdate_Click()
  modUpdTemplMain.cmdPerformUpdate_Click_Handler
End Sub

Private Sub UserForm_Initialize()
  modUpdTemplMain.UserForm_Initialize_Handler
End Sub
Attribute VB_Name = "modChange"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WsInstrChange(Target As Range)
  If Target.Interior.ColorIndex = colorYellow Then
    modServiceModule.UNPROTECT_SHEET Target.parent
    Target.Font.Size = 9
    Target.Font.name = "Tahoma"
    Application.ThisWorkbook.Sheets(gstrInstructionSheetName).cmdApplyContactChanges.Enabled = True
    Application.ThisWorkbook.Sheets(gstrInstructionSheetName).cmdApplyContactChanges.Visible = True
    modServiceModule.PROTECT_SHEET Target.parent, True
  End If
End Sub

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WsGeneralChange(Target As Range)
  On Error GoTo ErrWsGeneralChange
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
    
  Dim intNRow As Integer
  Dim intNColumn As Integer
  Dim intRowHeight As Integer
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim ISect
    
  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wbBook = Me.parent
  Set wsSheet = Target.parent
    
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  intNRow = Target.cells(1, 1).Row
  intNColumn = Target.cells(1, 1).Column
  
  If Target.cells(1, 1).Row > 6 Then
    If Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 20 Then Target.cells(1, 1).RowHeight = 20
    End If
  End If
    
  modServiceModule.PROTECT_SHEET wsSheet, True
  GoTo cleanUp

ErrWsGeneralChange:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  
End Sub

Attribute VB_Name = "modClassifierValidate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Function blnValidate_Len_Number(strValue As String, _
                                        intMinLen As Integer, _
                                        intMaxLen As Integer) As Boolean
                                        
  Dim intCounter As Integer
  
  blnValidate_Len_Number = False
  If intMinLen <= 0 Or intMinLen <= 0 Then Exit Function
  
  If Len(strValue) = 0 Then ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    blnValidate_Len_Number = True ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Exit Function
  End If
  
  If Len(strValue) > intMaxLen Or Len(strValue) < intMinLen Then
    Exit Function
  End If
  
  For intCounter = 1 To Len(strValue)
    If Mid(strValue, intCounter, 1) < "0" Or Mid(strValue, intCounter, 1) > "9" Then
      Exit Function
    End If
  Next intCounter
  
  blnValidate_Len_Number = True

End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' ----------------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ---------------------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INN_OnForm(strINN As String, _
                                       Optional blnMsgBoxShow As Boolean = True) As Boolean
                                       
  blnValidate_INN_OnForm = False
  
  If blnValidate_Len_Number(strINN, 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_INN_OnForm = True
  GoTo cleanUp
ErrHandler:
  blnValidate_INN_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-12 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_KPP_OnForm(strKPP As String, _
                                       Optional blnMsgBoxShow As Boolean = True) As Boolean
                                       
  blnValidate_KPP_OnForm = False
  
  If LCase(Trim(strKPP)) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
     LCase(Trim(strKPP)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        GoTo Success
  ElseIf blnValidate_Len_Number(strKPP, 9, 9) = False Then
        GoTo ErrHandler
  Else
        GoTo Success
  End If
  
Success:
  blnValidate_KPP_OnForm = True
  GoTo cleanUp
ErrHandler:
  blnValidate_KPP_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKTMO_OnForm(strOKTMO As String, _
                                         Optional blnMsgBoxShow As Boolean = True) As Boolean
                                         
  blnValidate_OKTMO_OnForm = False
  
  If blnValidate_Len_Number(strOKTMO, 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKTMO_OnForm = True
  GoTo cleanUp
ErrHandler:
  blnValidate_OKTMO_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-8 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKATO_OnForm(strOKATO As String, _
                                         Optional blnMsgBoxShow As Boolean = True) As Boolean
                                         
  blnValidate_OKATO_OnForm = False
  
  If blnValidate_Len_Number(strOKATO, 7, 11) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKATO_OnForm = True
  GoTo cleanUp
ErrHandler:
  blnValidate_OKATO_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' ----------------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ---------------------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INN_OnSheet(rngValidatingRange As Range, _
                                Optional blnMsgBoxShow As Boolean = True) As Boolean
                                
  blnValidate_INN_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_INN_OnSheet = True
  GoTo cleanUp
ErrHandler:
  blnValidate_INN_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_KPP_OnSheet(rngValidatingRange As Range, _
                                        Optional blnMsgBoxShow As Boolean = True) As Boolean
                                        
  blnValidate_KPP_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If LCase(Trim(CStr(rngValidatingRange.cells(1, 1).Value))) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
     LCase(Trim(CStr(rngValidatingRange.cells(1, 1).Value))) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        GoTo Success
  ElseIf blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 9, 9) = False Then
        GoTo ErrHandler
  Else
        GoTo Success
  End If
  
Success:
  blnValidate_KPP_OnSheet = True
  GoTo cleanUp
ErrHandler:
  blnValidate_KPP_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           " |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKTMO_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
                                          
  blnValidate_OKTMO_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKTMO_OnSheet = True
  GoTo cleanUp
ErrHandler:
  blnValidate_OKTMO_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           " |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKATO_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
                                          
  blnValidate_OKATO_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 7, 11) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKATO_OnSheet = True
  GoTo cleanUp
ErrHandler:
  blnValidate_OKATO_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           " |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' -------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -----------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_INN_OnSheet(rngValidatingRange As Range) As String

  strValidate_INN_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  strValidate_INN_OnSheet = ""
  GoTo cleanUp
ErrHandler:
  strValidate_INN_OnSheet = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_KPP_OnSheet(rngValidatingRange As Range) As String

  strValidate_KPP_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If LCase(Trim(CStr(rngValidatingRange.cells(1, 1).Value))) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
     LCase(Trim(CStr(rngValidatingRange.cells(1, 1).Value))) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        GoTo Success
  ElseIf blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 9, 9) = False Then
        GoTo ErrHandler
  Else
        GoTo Success
  End If
  
Success:
  strValidate_KPP_OnSheet = ""
  GoTo cleanUp
ErrHandler:
  strValidate_KPP_OnSheet = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_OKTMO_OnSheet(rngValidatingRange As Range) As String

  strValidate_OKTMO_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  
  If rngValidatingRange Is Nothing Then
    GoTo cleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  strValidate_OKTMO_OnSheet = ""
  GoTo cleanUp
ErrHandler:
  strValidate_OKTMO_OnSheet = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo cleanUp
cleanUp:
  Exit Function
  
End Function

Attribute VB_Name = "modDblClick"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

Public Sub Worksheet_Before_Double_Click_Handler(ByVal Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISectWebsite
  
  Dim strGoToAddress As String
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If wsSheet.name = gstrMainSheetName Then
    If modServiceModule.IsNameExists(ThisWorkbook, "Date_approval_FST") = False Or _
       modServiceModule.IsNameExists(ThisWorkbook, "Date_approval_REG") = False Then
       GoTo ErrHandler
    Else
      Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("Date_approval_FST"), _
                                                          wsSheet.Range("Date_approval_REG")))
    End If
  Else
    If modServiceModule.IsNameExists(ThisWorkbook, "Date_of_posting_inf") = False Or _
       modServiceModule.IsNameExists(ThisWorkbook, "Date_of_publication") = False Then
       GoTo ErrHandler
    Else
      Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("Date_of_posting_inf"), _
                                                          wsSheet.Range("Date_of_publication")))
      Set ISectWebsite = Application.Intersect(Target, wsSheet.Range("Website_address_internet"))
    End If
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then                                            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).Value, ".")(0)
     intMonth = Split(Target.cells(1, 1).Value, ".")(1)
     intYear = Split(Target.cells(1, 1).Value, ".")(2)
    Else
     intDay = 0
    End If
     
    Cancel = True
    frmDateChoose.Show vbModal
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    Target.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  ElseIf (Target.cells(1, 1).Interior.ColorIndex = colorYellow Or _
          Target.cells(1, 1).Interior.ColorIndex = colorCyan) And _
         (Not ISectWebsite Is Nothing) And _
         Len(Trim(Target.cells(1, 1).Value)) <> 0 Then                           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    strGoToAddress = Target.cells(1, 1).Value
    If InStr(strGoToAddress, "www") <> 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "http://" & strGoToAddress
      If InStr(strGoToAddress, "http") <> 0 Or _
         InStr(strGoToAddress, "ftp") <> 0 Then
        If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd|"") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd|"")?", _
           vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
             On Error GoTo ErrGoToHypperlink
             wbBook.FollowHyperlink strGoToAddress
             On Error GoTo ErrHandler
             Cancel = True
        End If
    End If
      
    GoTo cleanUp
  
  End If
  
  GoTo cleanUp
  
ErrGoToHypperlink:
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modInternetConnectionState.blnIsOnLine = False Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
  Else
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
  End If
  
ErrHandler:
  GoTo cleanUp
  
cleanUp:
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  
End Sub

Attribute VB_Name = "modGlobals"
Option Explicit

Public Const STR_REESTR_ORG_SHEET_NAME As String = "REESTR_ORG"
Public Const STR_REESTR_FILTERED_SHEET_NAME As String = "REESTR_FILTERED"
Public Const STR_REESTR_MO_SHEET_NAME As String = "REESTR_MO"
Public Const STR_REGION_IMAGE_COORDINATES_SHEET_NAME As String = "Region_Image_Coordinates"

Public Const STR_RANGE_NAME As String = modHTTPServerCaller.STR_VS_RANGE_NAME
Public Const LNG_AS_ACTIVITY_SPHERE As Long = asVS
Public Const STR_REESTR_SHEET_NAME As String = STR_REESTR_ORG_SHEET_NAME

Public Const STR_CMD_BUTTON_UPDATE_IS_IN_PROGRESS_CAPTION As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."

Global glngLowImpactWarningsCounter As Long
Global glngCriticalImpactWarningsCounter As Long

Public Const STR_MSGBOX_INFORMATION_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_MSGBOX_WARNING_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Global STR_SELECT_DATE As String

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const gstrMainSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrInstructionSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrCommentsSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrCheckSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrEtUnionSheetName As String = "et_union"
Public Const gstrTechSheetName As String = "TEHSHEET"

Public Const gstrInvestmentSheetName As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrIndexSheetName_1 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexTwoSheetName_1 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (2)(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexSheetName_2 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexTwoSheetName_2 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (2)(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexSheetName_3 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexTwoSheetName_3 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (2)(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexSheetName_4 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrIndexTwoSheetName_4 As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (2)(|fffd||fffd||fffd||fffd||fffd||fffd|)"
Public Const gstrHyperlinkSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrListSheet As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const colorCyan As Integer = 34
Public Const colorYellow As Integer = 36
Public Const colorGreen As Integer = 35
Public Const colorWhite As Integer = 2
Public Const colorRed As Integer = 3
Public Const colorGrey As Integer = 15
Public Const colorLightBlue As Integer = 37
Public Const colorLightBrown As Integer = 40
Public Const colorPink As Integer = 38
Public Const colorPaleBlue As Integer = 24
Public Const colorGrey80 As Integer = 56  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 80%

Public Const gPASSWORD As String = "aq1sw2de3"

Public ws As Worksheet
Public wb As Workbook

Public blnPressedButtonInForm As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /true/
                                                ' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public intNumberRow As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public intNumberColumn As Integer               ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Const strExceptionsRegionOne As String = "|fffd|.|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"             ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionTwo As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionThree As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionFour As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionFive As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionSix As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
                                                                                ' |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Public Const strExceptionsRegionSeven As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public Const STR_KIND_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_KIND_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const gblnTestMode = False   ' True

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Global intDay As Integer                ' |fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intMonth As Integer              ' |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intYear As Integer               ' |fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intX As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/
Global intY As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/
Global blnCalendarChange As Boolean     ' True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EnableEvents |fffd| ScreenUpdating
Global blnValueEnableEvents As Boolean      ' EnableEvents
Global blnValueScreenUpdating As Boolean    ' ScreenUpdating

Type ProvTyp
    index As String
    R As Range
End Type
Attribute VB_Name = "modHTTPGlobals"
Option Explicit

Public Const STR_UPDATE_FAILED As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|', |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)!"
Public Const STR_UPDATE_SUCCESS As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_BASE_URL As String = "https://tariff.eias.ru/procwsxls/"

Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_NAME As String = "MO_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_2 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_NAME As String = "ORG_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_2 As String = "p_AS="
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_3 As String = "p_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_4 As String = "p_TC="

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_NAME As String = "GET_UPDATE_INFO?"
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_PARAM_1 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_NAME As String = "GET_UPDATE?"
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_1 As String = "p_TC="
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_2 As String = "p_V="

Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_NAME As String = "GET_SHEET_NAMES?"
Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_PARAM_1 As String = "p_TC="
Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_PARAM_2 As String = "p_V="

Attribute VB_Name = "modHTTPServerCaller"
Option Explicit
Option Base 1

Public Enum ActivitySphere
  asWARM = 0               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asVS = 1                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asVO = 2                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asTBO = 3                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  asWARMVS = 4             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|
  asWARMEE = 5             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|
  asEE = 6                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asALL = 7                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd| + |fffd||fffd||fffd| + |fffd||fffd|
  asWARMTR = 8             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  asWARMTRANSFER = 9       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
  asVSVO = 10              ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|
  asHOTVS = 11             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  asNone = 100
End Enum

Public Const STR_WARM_RANGE_NAME As String = "LIST_ORG_WARM"
Public Const STR_VS_RANGE_NAME As String = "LIST_ORG_VS"
Public Const STR_VO_RANGE_NAME As String = "LIST_ORG_VO"
Public Const STR_TBO_RANGE_NAME As String = "LIST_ORG_TBO"
Public Const STR_WARM_VS_RANGE_NAME As String = "LIST_ORG_WARM_VS"
Public Const STR_WARM_EE_RANGE_NAME As String = "LIST_ORG_WARM_EE"
Public Const STR_EE_RANGE_NAME As String = "LIST_ORG_EE"
Public Const STR_ALL_RANGE_NAME As String = "LIST_ORG_ALL"
Public Const STR_WARM_TR_RANGE_NAME As String = "LIST_ORG_WARM_TR"
Public Const STR_WARM_TRANSFER_RANGE_NAME As String = "LIST_ORG_WARM_TRANSFER"
Public Const STR_VS_VO_RANGE_NAME As String = "LIST_ORG_VS_VO"
Public Const STR_HOT_VS_RANGE_NAME As String = "LIST_ORG_HOT_VS"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Update_Organization_List(ByVal strSheetName As String, _
                                         ByVal strRegionName As String, _
                                         Optional ByVal asActivitySphere As ActivitySphere = asNone, _
                                         Optional ByVal wbBook As Workbook = Nothing, _
                                         Optional ByVal strRangeLocal As String = "A2") As String
  
  On Error GoTo ErrHandler
  
  If wbBook Is Nothing Then
    Set wbBook = ActiveWorkbook
  End If
  
  If Len(strRegionName) = 0 Or _
     Len(strRangeLocal) = 0 Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If
  
  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim strXML_DataTagNames() As String
  Dim lngICounter As Long
  Dim strActivitySphere As String
  Dim strRangeName As String
  
  Select Case asActivitySphere
    Case asWARM:
      strActivitySphere = "WARM"
      strRangeName = STR_WARM_RANGE_NAME
    Case asVS:
      strActivitySphere = "VS"
      strRangeName = STR_VS_RANGE_NAME
    Case asVO:
      strActivitySphere = "VO"
      strRangeName = STR_VO_RANGE_NAME
    Case asTBO:
      strActivitySphere = "TBO"
      strRangeName = STR_TBO_RANGE_NAME
    Case asWARMVS:
      strActivitySphere = "WARM_VS"
      strRangeName = STR_WARM_VS_RANGE_NAME
    Case asWARMEE:
      strActivitySphere = "WARM_EE"
      strRangeName = STR_WARM_EE_RANGE_NAME
    Case asEE:
      strActivitySphere = "EE"
      strRangeName = STR_EE_RANGE_NAME
    Case asALL:
      strActivitySphere = "ALL"
      strRangeName = STR_ALL_RANGE_NAME
    Case asWARMTR:
      strActivitySphere = "WARM_TR"
      strRangeName = STR_WARM_TR_RANGE_NAME
    Case asWARMTRANSFER:
      strActivitySphere = "WARM_TRANSFER"
      strRangeName = STR_WARM_TRANSFER_RANGE_NAME
    Case asVSVO:
      strActivitySphere = "VS_VO"
      strRangeName = STR_VS_VO_RANGE_NAME
    Case asHOTVS:
      strActivitySphere = "HOT_VS"
      strRangeName = STR_HOT_VS_RANGE_NAME
    Case Else:
      GoTo ErrHandler
  End Select
  
  If modServiceModule.IsNameExists(wbBook, "XML_ORG_LIST_TAG_NAMES") = False Then
    Update_Organization_List = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    GoTo cleanUp
  End If
  
  Set rngRange = wbBook.Names("XML_ORG_LIST_TAG_NAMES").RefersToRange
  ReDim strXML_DataTagNames(rngRange.cells.Count)
  For lngICounter = 1 To rngRange.cells.Count
    strXML_DataTagNames(lngICounter) = rngRange.cells(lngICounter, 1).Value
  Next lngICounter
  
  Set wsSheet = wbBook.Worksheets(strSheetName)
  Set rngRange = wsSheet.Range(strRangeLocal)
  
  Update_Organization_List = modInvokeHTTPServer.strQuery_Org_List(wsSheet, _
                                                                   rngRange, _
                                                                   strRegionName, _
                                                                   strActivitySphere, _
                                                                   "ALL", _
                                                                   strXML_DataTagNames, _
                                                                   strRangeName)
  GoTo cleanUp
  
ErrHandler:
  Update_Organization_List = STR_UPDATE_FAILED
  GoTo cleanUp
cleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|
Public Function Update_MRMO_List(ByVal strSheetName As String, _
                                 ByVal strRegionName As String, _
                                 Optional ByVal wbBook As Workbook = Nothing, _
                                 Optional ByVal strRangeLocal As String = "A2")
              
  On Error GoTo ErrHandler
  
  If wbBook Is Nothing Then
    Set wbBook = ActiveWorkbook
  End If
  
  If Len(strRegionName) = 0 Or _
     Len(strRangeLocal) = 0 Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If
  
  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim strXML_DataTagNames() As String
  Dim lngICounter As Long
  Dim strRangeName As String
  
  If modServiceModule.IsNameExists(wbBook, "XML_MR_MO_OKTMO_LIST_TAG_NAMES") = False Then
    Update_MRMO_List = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    GoTo cleanUp
  End If
  
  Set rngRange = wbBook.Names("XML_MR_MO_OKTMO_LIST_TAG_NAMES").RefersToRange
  ReDim strXML_DataTagNames(rngRange.cells.Count)
  For lngICounter = 1 To rngRange.cells.Count
    strXML_DataTagNames(lngICounter) = rngRange.cells(lngICounter, 1).Value
  Next lngICounter
  
  strRangeName = "LIST_MR_MO_OKTMO"
  
  Set wsSheet = wbBook.Worksheets(strSheetName)
  Set rngRange = wsSheet.Range(strRangeLocal)
  
  Update_MRMO_List = modInvokeHTTPServer.strQuery_MR_MO_OKTMO_List(wsSheet, _
                                                                   rngRange, _
                                                                   strRegionName, _
                                                                   strXML_DataTagNames, _
                                                                   strRangeName)
  GoTo cleanUp
  
ErrHandler:
  Update_MRMO_List = STR_UPDATE_FAILED
  GoTo cleanUp
cleanUp:

End Function

Attribute VB_Name = "modHyperlink"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| False, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function blnPrimary_HL_Handler(ByVal Target As Range, _
                                       ByVal wsSheet As Worksheet) As Boolean

  On Error GoTo ErrHandler
  
  blnPrimary_HL_Handler = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  If Target.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
    blnPrimary_HL_Handler = True
    GoTo cleanUp
  End If

  GoTo cleanUp
  
ErrHandler:
  GoTo cleanUp
cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub ShapeDeleteHyperlink(ByVal wsSheet As String, ByVal rngCell As Range, _
                                Optional ByVal strDeleteCaption As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  
  ActiveCell.FormulaR1C1 = strDeleteCaption
  With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
  End With
  ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", _
                             SubAddress:=Chr(39) & wsSheet & Chr(39) & "!" & _
                             rngCell.Address, TextToDisplay:=strDeleteCaption, _
                             ScreenTip:=strDeleteCaption
  With Selection.Font
        .name = "Tahoma"
        .Size = 9
        .Bold = True
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ColorIndex = 5
  End With

End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd||fffd|
' Target - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' wsSheet - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strRangeName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
Public Sub Worksheet_General_FollowHyperlink(ByVal Target As Hyperlink, _
                                             ByVal wsSheet As Worksheet, _
                                             ByVal strRangeName As String)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  If blnPrimary_HL_Handler(Target.Range, wsSheet) = True Then GoTo cleanUp
  
  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    intDeleteColumnNumber = 4
    strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Right(Target.Range.cells(1, 1).Value, Len(Target.Range.cells(1, 1).Value) - _
                      Len("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    intRenumberColumnOffset = -1
    GoTo ProcessHyp
  ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
    intDeleteColumnNumber = Target.Range.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  modHyperlink.ProcessHyperlink Target.Range.cells(1, 1), strRangeName, _
                                intDeleteColumnNumber, strDeleteString, _
                                intRenumberColumnOffset
  
 If InStr(1, wsSheet.CodeName, "sheetMain02_") <> 0 And _
    Len(Trim(strRangeName)) <> 0 Then
      If InStr(1, wsSheet.cells(intNumRow + 1, intNumColumn).Value, "|fffd||fffd||fffd||fffd||fffd||fffd|") Then
        wsSheet.cells(intNumRow, 7).Value = "%"
      End If
 End If
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo cleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  Application.CutCopyMode = True
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ProcessHyperlink(ByVal rngTarget As Range, _
                            ByVal strRangeName As String, _
                            ByVal intDeleteColumnNumber As Integer, _
                            ByVal strDeleteString As String, _
                            ByVal intRenumberColumnOffset As Integer)
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  Set wsRanges = wbThis.Sheets("et_union")
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsRanges.Activate
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.name, _
                                          wsActiveSheet.Range("A1"), _
                                          strDeleteString
      
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.Offset(-1, 0).Select
      
    modServiceModule.RENUMBER_ADD_CELLS Selection
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    modServiceModule.RENUMBER_REMOVE_CELLS rngTarget.Offset(0, intRenumberColumnOffset).Column, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).Row, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).cells(1, 1), _
                                           rngTarget.parent
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub
Attribute VB_Name = "modInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub InfInstr()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfGoToHyperlink()
   MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfStrPublication()
   MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfoForMRInTitle()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfoForMOInTitle()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfFilFlagInTitle()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfValueKindOfGoodsInTitle()
   MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd|"" - ""|fffd||fffd|"", |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd|""""!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfInputDate()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfClickCmdOrganizationChoiceInTitle()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"", |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfClickCmdUpdateReestrMOInTitle()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"", |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|.", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfSKIInTitle()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & _
          " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & _
          " |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbCrLf & _
          "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfSKINumberInTitle()
   MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""1"".", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfPointInIndex2()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20% |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & _
          "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfKindsOfGoods()
   MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Sub InfAddressInHyperlinks()
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|', |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
          " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/!", _
          vbInformation, _
          STR_MSGBOX_WARNING_TITLE
End Sub

Attribute VB_Name = "modInternetConnectionState"
Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Copyright |fffd|1996-2011 VBnet/Randy Birch, All Rights Reserved.
' Some pages may also contain other copyrights by the author.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Distribution: You can freely use this code in your own
'               applications, but you may not reproduce
'               or publish this code on any web site,
'               online service, or distribute as source
'               on any media without express permission.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#If VBA7 And Win64 Then
Private Declare PtrSafe Function InternetGetConnectedState Lib "wininet" _
  (ByRef dwflags As Long, _
   ByVal dwReserved As Long) As Long
#Else
Private Declare Function InternetGetConnectedState Lib "wininet" _
  (ByRef dwflags As Long, _
   ByVal dwReserved As Long) As Long
#End If
   

' Local system uses a modem to connect to the Internet.
Private Const INTERNET_CONNECTION_MODEM As Long = &H1

' Local system uses a LAN to connect to the Internet.
Private Const INTERNET_CONNECTION_LAN As Long = &H2

' Local system uses a proxy server to connect to the Internet.
Private Const INTERNET_CONNECTION_PROXY As Long = &H4

' No longer used.
Private Const INTERNET_CONNECTION_MODEM_BUSY As Long = &H8

Private Const INTERNET_RAS_INSTALLED As Long = &H10
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20
Private Const INTERNET_CONNECTION_CONFIGURED As Long = &H40


Public Function blnIsOnLine() As Boolean
  If strGetNetConnectString = "Not connected to the internet now." Then
    blnIsOnLine = False
  Else
    blnIsOnLine = True
  End If
End Function

Private Function blnIsNetConnectViaLAN() As Boolean

  Dim dwflags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwflags, 0&)

  ' return True if the flags indicate a LAN connection
  blnIsNetConnectViaLAN = dwflags And INTERNET_CONNECTION_LAN
     
End Function

Private Function blnIsNetConnectViaModem() As Boolean

  Dim dwflags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwflags, 0&)

  ' return True if the flags indicate a modem connection
  blnIsNetConnectViaModem = dwflags And INTERNET_CONNECTION_MODEM
     
End Function

Private Function blnIsNetConnectViaProxy() As Boolean

  Dim dwflags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwflags, 0&)

  ' return True if the flags indicate a proxy connection
  blnIsNetConnectViaProxy = dwflags And INTERNET_CONNECTION_PROXY
     
End Function

Private Function IsNetConnectOnline() As Boolean

  ' no flags needed here - the API returns True
  ' if there is a connection of any type
  IsNetConnectOnline = InternetGetConnectedState(0&, 0&)
     
End Function

Private Function blnIsNetRASInstalled() As Boolean

  Dim dwflags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwflags, 0&)

  ' return True if the flags include RAS installed
  blnIsNetRASInstalled = dwflags And INTERNET_RAS_INSTALLED
     
End Function

Private Function strGetNetConnectString() As String

   Dim dwflags As Long
   Dim strMsg As String

   ' Build a string for display
   If InternetGetConnectedState(dwflags, 0&) Then
     
      If dwflags And INTERNET_CONNECTION_CONFIGURED Then
         strMsg = strMsg & "You have a network connection configured." & vbCrLf
      End If

      If dwflags And INTERNET_CONNECTION_LAN Then
         strMsg = strMsg & "The local system connects to the Internet via a LAN"
      End If
      
      If dwflags And INTERNET_CONNECTION_PROXY Then
         strMsg = strMsg & ", and uses a proxy server. "
      Else
         strMsg = strMsg & "."
      End If
      
      If dwflags And INTERNET_CONNECTION_MODEM Then
         strMsg = strMsg & "The local system uses a modem to connect to the Internet. "
      End If
      
      If dwflags And INTERNET_CONNECTION_OFFLINE Then
         strMsg = strMsg & "The connection is currently offline. "
      End If
      
      If dwflags And INTERNET_CONNECTION_MODEM_BUSY Then
         strMsg = strMsg & "The local system's modem is busy with a non-Internet connection. "
      End If
      
      If dwflags And INTERNET_RAS_INSTALLED Then
         strMsg = strMsg & "Remote Access Services are installed on this system."
      End If
      
   Else
    
      strMsg = "Not connected to the internet now."
      
   End If
   
   strGetNetConnectString = strMsg

End Function
Attribute VB_Name = "modInvokeHTTPServer"
Option Explicit
Option Base 1

Public Function strQuery_Org_List(ByVal wsOutputSheet As Worksheet, _
                                  ByVal rngStartRange As Range, _
                                  ByVal strRegionName As String, _
                                  ByVal strSphereOfActivity As String, _
                                  ByVal strVDET As String, _
                                  ByRef strXMLTagNames() As String, _
                                  ByVal strNameOfRange As String) As String

  Dim strURL As String
  Dim strTemplateCode As String
  
  If Len(strRegionName) > 0 And _
     Len(strSphereOfActivity) > 0 And _
     Len(strVDET) > 0 Then
    strTemplateCode = modServiceModule.varGetDocumentProperty(wsOutputSheet.parent, "Version")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_BASE_URL & _
             STR_HTTP_REQUEST_PROC_ORG_NAME & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_1 & strRegionName & "&" & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_2 & strSphereOfActivity & "&" & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_3 & strVDET & "&" & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_4 & strTemplateCode
    
    strQuery_Org_List = strQuery_Data(wsOutputSheet, _
                                      rngStartRange, _
                                      strXMLTagNames, _
                                      strNameOfRange, _
                                      strURL)
  End If

End Function

Public Function strQuery_MR_MO_OKTMO_List(ByVal wsOutputSheet As Worksheet, _
                                          ByVal rngStartRange As Range, _
                                          ByVal strRegionName As String, _
                                          ByRef strXMLTagNames() As String, _
                                          ByVal strNameOfRange As String) As String

  Dim strURL As String
  Dim strTemplateCode As String
  
  If Len(strRegionName) > 0 Then
    strTemplateCode = modServiceModule.varGetDocumentProperty(wsOutputSheet.parent, "Version")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_BASE_URL & _
             STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_NAME & _
             STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_1 & strRegionName & "&" & _
             STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_2 & strTemplateCode
    
    strQuery_MR_MO_OKTMO_List = strQuery_Data(wsOutputSheet, _
                                              rngStartRange, _
                                              strXMLTagNames, _
                                              strNameOfRange, _
                                              strURL)
  End If

End Function

Private Function strQuery_Data(ByVal wsOutputSheet As Worksheet, _
                               ByVal rngStartRange As Range, _
                               ByRef strXMLTagNames() As String, _
                               ByVal strNameOfRange As String, _
                               ByVal strURL As String) As String
    
  Dim lngICounter As Long
  Dim lngJCounter As Long
  Dim lngRowOffset As Long
  Dim wbBook As Workbook
  Dim lngNumberOfQueryFields As Long
  Dim lngApplicationCalculationPreference As Long
  
  strQuery_Data = vbNullString
  
  On Error GoTo ErrHandler
  
  If wsOutputSheet Is Nothing Or _
     rngStartRange Is Nothing Or _
     UBound(strXMLTagNames) = 0 Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  
  For lngICounter = 1 To UBound(strXMLTagNames)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(strXMLTagNames(lngICounter)) = 0 Then
      GoTo ErrHandler
    End If
  Next lngICounter
  
  lngNumberOfQueryFields = UBound(strXMLTagNames)
  
  ' HTTP Request
  Dim objXMLHTTP As MSXML2.XMLHTTP
  Dim objXMLDOMDocument As MSXML2.DOMDocument
  
  Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
  objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
  objXMLHTTP.send
  Set objXMLDOMDocument = objXMLHTTP.responseXML
  
  If modGlobals.gblnTestMode = True Then
    Debug.Print objXMLDOMDocument.Text
  End If
  
  Set wbBook = wsOutputSheet.parent
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Application.Calculation
  lngApplicationCalculationPreference = wbBook.Application.Calculation
  wbBook.Application.Calculation = xlCalculationManual
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| wsOutputSheet
  wsOutputSheet.Activate
  
  modServiceModule.UNPROTECT_SHEET wsOutputSheet
  wsOutputSheet.Range(rngStartRange.cells(1, 1), _
                      wsOutputSheet.cells(wsOutputSheet.UsedRange.Row + _
                                            wsOutputSheet.UsedRange.Rows.Count - 1, _
                                          lngNumberOfQueryFields)).cells.ClearContents
                        
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  wsOutputSheet.cells.NumberFormat = "@"
   
  If objXMLDOMDocument.DocumentElement.ChildNodes.Length > 0 Then
    lngRowOffset = 0
    For lngICounter = 0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length - 1
      Dim rec As MSXML2.IXMLDOMElement
      Set rec = objXMLDOMDocument.DocumentElement.ChildNodes.Item(lngICounter)
      For lngJCounter = 1 To UBound(strXMLTagNames)
        rngStartRange.Offset(lngRowOffset, lngJCounter - 1).Value = rec.getElementsByTagName(strXMLTagNames(lngJCounter)).Item(0).Text
      Next lngJCounter
      lngRowOffset = lngRowOffset + 1
    Next lngICounter
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Delete_Existing_Name_In_Workbook wbBook, strNameOfRange
  If lngRowOffset > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    wsOutputSheet.Range(rngStartRange.cells(1, 1), _
                        wsOutputSheet.cells(lngRowOffset + 1, lngNumberOfQueryFields)).name = strNameOfRange
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For lngICounter = 1 To UBound(strXMLTagNames)
    wsOutputSheet.cells(1, lngICounter).Value = strXMLTagNames(lngICounter)
  Next lngICounter
               
  GoTo Success

Success:
  strQuery_Data = STR_UPDATE_SUCCESS
  GoTo cleanUp
ErrHandler:
  strQuery_Data = STR_UPDATE_FAILED
  GoTo cleanUp
cleanUp:
  wbBook.Application.Calculation = lngApplicationCalculationPreference
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Delete_Existing_Name_In_Workbook(wbBook As Workbook, _
                                            strNameOfRange As String)
  On Error GoTo ErrHandler
  If wbBook Is Nothing Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  wbBook.Names(strNameOfRange).Delete
ErrHandler:
End Sub

Private Sub SaveXML(ByVal wbBook As Workbook, _
                    ByVal strXML As String)
  
  Dim FileNo As Long
  FileNo = FreeFile
  
  Open wbBook.Path & "\" & "Save.txt" For Output As FileNo
  
  Print #FileNo, strXML
  
  Close FileNo

End Sub

Attribute VB_Name = "modPROV"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

Public flag_1 As Integer
Public NUM_ROW_PR As Integer

Private Const KIND_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const KIND_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public gintLowImpactWarningsCounter As Integer
Public gintCriticalImpactWarningsCounter As Integer

Private blnCheckHyperlinks As Boolean

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function WarningsBeforeSaving(wbBook As Workbook) As Integer

  Dim wsCheckSheet As Worksheet
  
  ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (modServiceModule.SheetExists(gstrCheckSheetName, wbBook)) Then
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|? |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ;)
    AllSheetsInThisWorkbook.CreateCheckSheet wbBook, gstrCheckSheetName
  End If
  
  Set wsCheckSheet = wbBook.Sheets(gstrCheckSheetName)
          
  Dim rngTempRange As Range
      
  modServiceModule.UNPROTECT_SHEET wsCheckSheet
  
  Set rngTempRange = wsCheckSheet.Range(wsCheckSheet.Rows(14), _
                                        wsCheckSheet.Rows(wsCheckSheet.UsedRange.Rows.Count + 14))
  rngTempRange.Delete
  
  modPROV.gintCriticalImpactWarningsCounter = 0
  modPROV.gintLowImpactWarningsCounter = 0
  
  NUM_ROW_PR = 14
  
  wbBook.Application.ScreenUpdating = False
  
  
  If blnCheckIfSheet(wsCheckSheet) Then
    If Len(Trim(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value)) = 0 Then
      blnCheckHyperlinks = False
    ElseIf MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ('|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrHyperlinkSheetName & "'?", _
         vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
           blnCheckHyperlinks = True
    Else
      blnCheckHyperlinks = False
    End If
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    modPROV.WarningsBeforeSavingForTitle wbBook.Sheets(gstrMainSheetName), wsCheckSheet
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    modPROV.WarningsBeforeSavingForEtcSheets wsCheckSheet
    
    If blnCheckHyperlinks = True Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modPROV.WarningsBeforeSavingForHyperlinks wbBook.Sheets(gstrHyperlinkSheetName), wsCheckSheet
    ElseIf Len(Trim(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value)) <> 0 Then
      AddHyp wsCheckSheet, wbBook.Sheets(gstrHyperlinkSheetName).Range("A1"), _
             "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ('|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|') |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrHyperlinkSheetName & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
    End If
  End If
  
  wbBook.Application.ScreenUpdating = True

end_:
  modServiceModule.PROTECT_SHEET wsCheckSheet, True
  wbBook.Application.ScreenUpdating = True
    
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForTitle(wsSheet As Worksheet, wsCheckSheet As Worksheet)
        
  Dim intCounter As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wsCheckSheet.parent, "region_name") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "strPublication") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "godStart") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "godEnd") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "fil_flag") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "org") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "fil") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "inn") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "kpp") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "activity") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "main_kinds_of_goods") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "etc_kind_of_goods") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "comment_kind_of_goods") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "NDS") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "flag_ipr") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "SKI_number") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "SKI_description") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "mr_check") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "mo_check") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "oktmo_check") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "details_of_org_address") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "details_of_org_main") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "details_of_org_buhg") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "details_of_org_etc") = False Then
     
     AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!"
    
    GoTo cleanUp
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = Union(wsSheet.Range("region_name"), wsSheet.Range("strPublication"), _
                       wsSheet.Range("godStart"), wsSheet.Range("godEnd"), _
                       wsSheet.Range("fil_flag"), wsSheet.Range("activity"), _
                       wsSheet.Range("main_kinds_of_goods"), wsSheet.Range("etc_kind_of_goods"))
  
  If InStr(1, LCase(wsSheet.Range("etc_kind_of_goods").Value), "|fffd||fffd|") <> 0 Then
    Set rngRange = Union(rngRange, _
                         wsSheet.Range("comment_kind_of_goods"))
  End If
  
  Set rngRange = Union(rngRange, _
                       wsSheet.Range("NDS"), wsSheet.Range("flag_ipr"), _
                       wsSheet.Range("SKI_number"), wsSheet.Range("SKI_description"), _
                       wsSheet.Range("mr_check"), wsSheet.Range("mo_check"), _
                       wsSheet.Range("oktmo_check"), wsSheet.Range("details_of_org_address"), _
                       wsSheet.Range("details_of_org_main"), wsSheet.Range("details_of_org_buhg"), _
                       wsSheet.Range("details_of_org_etc"))
  
  For Each rngCell In rngRange.cells
    If (Len(rngCell.cells(1, 1).Value) = 0) And _
        InStr(rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 And _
        InStr(rngCell.cells(1, 1).Offset(0, -1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 And _
        InStr(rngCell.cells(1, 1).Offset(0, -2).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 And _
        rngCell.cells(1, 1).Address = rngCell.cells(1, 1).MergeArea.cells(1, 1).Address Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd|/
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    End If
  Next rngCell
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("org")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    End If
  Next rngCell
    
    
  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("fil")
  For Each rngCell In rngRange.cells
    If (Len(rngCell.cells(1, 1).Value) = 0) And wsSheet.Range("fil_flag").cells(1, 1).Value = "|fffd||fffd|" Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      End If
  Next rngCell
  
  '|fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("inn")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    ElseIf Len(modClassifierValidate.strValidate_INN_OnSheet(rngCell.cells(1, 1))) > 0 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    End If
  Next rngCell

  '|fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("kpp")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    ElseIf Len(modClassifierValidate.strValidate_KPP_OnSheet(rngCell.cells(1, 1))) > 0 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      End If
  Next rngCell

cleanUp:

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForEtcSheets(wsCheckSheet As Worksheet)
        
  Dim intCounter As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim wbBook As Workbook
  Dim wsTempSheet As Worksheet
  
  Dim ISect
  Dim ISectDop
  
  Set wbBook = Application.ThisWorkbook
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (2) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd| 100%/
  For intCounter = 1 To 10
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "checkCell_" & intCounter) Then
      Set rngRange = wbBook.Names("checkCell_" & intCounter).RefersToRange
      Set wsTempSheet = rngRange.parent
      wsTempSheet.Activate
      If wsTempSheet.Visible = xlSheetVisible Then
        For Each rngCell In rngRange.cells
          If rngCell.cells(1, 1).Address = rngCell.MergeArea.cells(1, 1).Address And _
             Len(Trim(rngCell.cells(1, 1).Value)) = 0 Then                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
               If rngCell.cells(1, 1).Interior.ColorIndex = colorCyan Then
                   AddHyp wsCheckSheet, rngCell, _
                          "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!"
               ElseIf rngCell.cells(1, 1).Interior.ColorIndex = colorGreen Then
                 If rngCell.cells(1, 1).Offset(0, -1).Interior.ColorIndex = colorCyan Then
                   AddHyp wsCheckSheet, rngCell, _
                          "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!"
                 Else
                   If intCounter = 1 Then
                     Set ISect = Application.Intersect(rngCell.cells(1, 1), Union(wsTempSheet.Range("dateStartIPR"), wsTempSheet.Range("dateEndIPR")))
                     If Not ISect Is Nothing Then
                       AddHyp wsCheckSheet, rngCell, _
                              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!"
                     End If
                   Else
                     AddHyp wsCheckSheet, rngCell, _
                            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!", KIND_WARNING
                   End If
                 End If
               ElseIf rngCell.cells(1, 1).Interior.ColorIndex = colorYellow Then
                 AddHyp wsCheckSheet, rngCell, _
                        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!", KIND_WARNING
               End If
          End If
          
          If rngCell.cells(1, 1).Address = rngCell.MergeArea.cells(1, 1).Address And _
             rngCell.cells(1, 1).Value <> 0 And _
             rngCell.cells(1, 1).Interior.ColorIndex = colorGreen And _
             (intCounter = 3 Or intCounter = 5 Or intCounter = 7 Or intCounter = 9) Then
                Set ISect = Application.Intersect(rngCell.cells(1, 1), wsTempSheet.Range("share_of_costs_" & Right(wsTempSheet.CodeName, 1)))
                If (Not ISect Is Nothing) And rngCell.cells(1, 1).Value > 100 Then
                   AddHyp wsCheckSheet, rngCell, _
                          "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 100%!"
                End If
          End If
        Next rngCell
      End If
    End If
  Next intCounter
    
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForHyperlinks(wsSheet As Worksheet, wsCheckSheet As Worksheet)
        
  Dim intCounter As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim strCodeError As String
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modInternetConnectionState.blnIsOnLine = True Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wsCheckSheet.parent, "Website_address_internet") = False Then
     
       AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!"
    
      GoTo cleanUp
    End If
  
    Set rngRange = wsSheet.Range("Website_address_internet")
  
    For Each rngCell In rngRange.cells
      If (Len(Trim(rngCell.cells(1, 1).Value)) <> 0) And _
          rngCell.Value <> "x" Then
        strCodeError = modServiceModule.strHypperlinkExists(rngCell.Value)
        If strCodeError = "401" Then
          AddHyp wsCheckSheet, rngCell, _
                 "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
        ElseIf strCodeError <> "0" And _
                InStr(1, LCase(rngCell.Value), "ftp://") = 1 Then
          AddHyp wsCheckSheet, rngCell, _
                 "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", KIND_WARNING
        ElseIf strCodeError <> "200" And _
               InStr(1, LCase(rngCell.Value), "ftp://") = 0 Then
          AddHyp wsCheckSheet, rngCell, _
                 "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", KIND_WARNING
        End If
      End If
    Next rngCell
  Else
    AddHyp wsCheckSheet, wsSheet.Range("A1"), _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
  End If
    
cleanUp:

End Sub


' rngValidating - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub AddHyp(wsCheckSheet As Worksheet, rngValidating As Range, _
           strReason As String, Optional ByVal strKindOfError As String = KIND_ERROR)
  
  If strKindOfError = KIND_WARNING Then
    modPROV.gintLowImpactWarningsCounter = modPROV.gintLowImpactWarningsCounter + 1
  Else
    modPROV.gintCriticalImpactWarningsCounter = modPROV.gintCriticalImpactWarningsCounter + 1
  End If
  Dim rngCheckRange As Range
  Set rngCheckRange = wsCheckSheet.cells(NUM_ROW_PR, 5)
  wsCheckSheet.Activate
  rngCheckRange.Select
  rngCheckRange.Worksheet.Hyperlinks.Add Anchor:=Selection, _
                                         Address:="", _
                                         SubAddress:="'" & _
                                         rngValidating.Worksheet.name & _
                                         "'!" & _
                                         rngValidating.Address(RowAbsolute:=False, _
                                                               ColumnAbsolute:=False), _
                                         TextToDisplay:=rngValidating.Worksheet.name & _
                                         "!" & rngValidating.Address(RowAbsolute:=False, _
                                                                     ColumnAbsolute:=False)
  With rngCheckRange.Font
      .name = "Tahoma"
      .FontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      .Size = 10
      .Strikethrough = False
      .Superscript = False
      .Subscript = False
      .OutlineFont = False
      .Shadow = False
      .Underline = xlUnderlineStyleSingle
      .ColorIndex = 5
  End With
  With Selection
      .HorizontalAlignment = xlCenter
      .VerticalAlignment = xlCenter
      .WrapText = False
      .Orientation = 0
      .AddIndent = False
      .IndentLevel = 0
      .ShrinkToFit = False
      .ReadingOrder = xlContext
      .MergeCells = False
      '.Interior.ColorIndex = NextColor
      .Borders(xlEdgeTop).LineStyle = xlContinuous
  End With
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  rngCheckRange.Offset(0, 1).Value = strReason
  rngCheckRange.Offset(0, 1).Select
  With Selection
      .VerticalAlignment = xlCenter
      .WrapText = False
      .Orientation = 0
      .AddIndent = False
      .IndentLevel = 0
      .ShrinkToFit = False
      .ReadingOrder = xlContext
      .MergeCells = False
      '.Interior.ColorIndex = NextColor
      .Borders(xlEdgeTop).LineStyle = xlContinuous
  End With
  rngCheckRange.Offset(0, 1).WrapText = True
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  rngCheckRange.Offset(0, 2).Value = strKindOfError
  rngCheckRange.Offset(0, 2).Select
  With Selection
      .VerticalAlignment = xlCenter
      .WrapText = False
      .Orientation = 0
      .AddIndent = False
      .IndentLevel = 0
      .ShrinkToFit = False
      .ReadingOrder = xlContext
      .MergeCells = False
      '.Interior.ColorIndex = NextColor
      .Borders(xlEdgeTop).LineStyle = xlContinuous
  End With
  NUM_ROW_PR = NUM_ROW_PR + 1
  rngCheckRange.Worksheet.Rows(rngCheckRange.Row & ":" & rngCheckRange.Row).EntireRow.AutoFit
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| wsSheet
Function blnCheckIfSheet(wsCheckSheet As Worksheet)
  
  blnCheckIfSheet = True

  Dim wbBook As Workbook
  Dim intCounterRow As Integer      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Dim wsSheet As Worksheet          ' |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strTempNameSheet As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Set wbBook = wsCheckSheet.parent
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (modServiceModule.SheetExists("AllSheetsInThisWorkbook", wbBook)) Then
    AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
           "|fffd||fffd||fffd||fffd| 'AllSheetsInThisWorkbook' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    blnCheckIfSheet = False
    Exit Function
  End If
  
  Set wsSheet = wbBook.Sheets("AllSheetsInThisWorkbook")
  
  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| A |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 1).Value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 1).Value
    If Not (modServiceModule.CodeNameSheetExists(strTempNameSheet, wbBook)) Then
      AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
             "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop
  
  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| B |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 2).Value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 2).Value
    If Not (modServiceModule.CodeNameSheetExists(strTempNameSheet, wbBook)) Then
      AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
             "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop

End Function

Attribute VB_Name = "modReestrMO"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Function Shape_MR_MO_OKTMO_List(ws As Worksheet) As Long
  
  Dim lngICounter As Long, j As Long
  Dim strMRName As String
  Dim rngRange As Range
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lngMRMORegionStartRow As Long
  Dim lngMRMORegionEndRow As Long
  Dim lngMRMORegionRowCount As Long
  Dim lngMRMORowCount As Long
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|
  Dim lngCounter As Long
  Dim lngMOMRStartRow As Long
  Dim lngMOMREndRow As Long
  Dim lngMOMRRowCount As Long
  Dim lngMORowCount As Long
  
  ws.Activate
  
  lngMRMORegionRowCount = 0
  Do While Len(CStr(ws.cells(lngMRMORegionRowCount + 2, 1).Value)) > 0
    lngMRMORegionRowCount = lngMRMORegionRowCount + 1
  Loop
  
  If lngMRMORegionRowCount < 1 Then
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo cleanUp
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  ws.Application.DisplayAlerts = False
  ws.Columns(1).Delete
  ws.Application.DisplayAlerts = True
  
  lngICounter = 2
  j = 1
  strMRName = ws.cells(lngICounter, 1).Value
  ws.cells(j + 1, 5).Value = ws.cells(lngICounter, 1).Value 'MR
  ws.cells(j + 1, 6).Value = ws.cells(lngICounter, 2).Value 'MR_OKTMO
  j = j + 1
  
  For lngICounter = 3 To lngMRMORegionRowCount + 1
    If ws.cells(lngICounter, 1).Value <> strMRName Then
      strMRName = ws.cells(lngICounter, 1).Value
      ws.cells(j + 1, 5).Value = ws.cells(lngICounter, 1).Value 'MR
      ws.cells(j + 1, 6).Value = ws.cells(lngICounter, 2).Value 'MR_OKTMO
      j = j + 1
    End If
  Next lngICounter
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
  ws.Application.DisplayAlerts = False
  ws.Columns(2).Delete
  ws.Application.DisplayAlerts = True
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  modInvokeHTTPServer.Delete_Existing_Name_In_Workbook ws.parent, "MR_LIST"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  Set rngRange = ws.Range("D2:D" & j)
  rngRange.name = "MR_LIST"

  ' ---------------------------------------------
  ' ---------------------------------------------
  ' --- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ---
  ' ---------------------------------------------
  ' ---------------------------------------------
  For lngCounter = 2 To ws.Range("MR_LIST").Rows.Count + 1
  
    strMRName = ws.cells(lngCounter, 4).Value
    
    If Len(strMRName) = 0 Then Exit For
    
    lngMOMRStartRow = 0
    lngMOMREndRow = 0
    
    lngMORowCount = 0
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    Do While Len(CStr(ws.cells(lngMORowCount + 2, 2).Value)) > 0
      lngMORowCount = lngMORowCount + 1
    Loop
    lngMORowCount = lngMORowCount + 2
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    ' !!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|
    For lngICounter = 1 To lngMORowCount
      If LCase(ws.cells(lngICounter, 1).Value) = LCase(strMRName) Then
        If lngMOMRStartRow = 0 Then
          lngMOMRStartRow = lngICounter
          Exit For
        End If
      End If
    Next lngICounter
    
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lngMOMRStartRow = 0 Then
      GoTo ErrHandler
    End If
    
    For lngICounter = lngMOMRStartRow To lngMORowCount
      If LCase(ws.cells(lngICounter, 1).Value) <> LCase(strMRName) Or _
         Len(CStr(ws.cells(lngICounter, 1).Value)) = 0 Then
        If lngMOMREndRow = 0 Then
          lngMOMREndRow = lngICounter - 1
          Exit For
        End If
      End If
      If lngICounter = lngMORowCount Then
        If lngMOMREndRow = 0 Then
          lngMOMREndRow = lngICounter
          Exit For
        End If
      End If
    Next lngICounter
    
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lngMOMREndRow = 0 Then
      GoTo ErrHandler
    End If
    
    lngMOMRRowCount = lngMOMREndRow - lngMOMRStartRow + 1
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "MO_LIST_" & lngCounter
    modInvokeHTTPServer.Delete_Existing_Name_In_Workbook ws.parent, "MO_LIST_" & lngCounter
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    ws.Range(ws.cells(lngMOMRStartRow, 2), ws.cells(lngMOMREndRow, 2)).name = "MO_LIST_" & lngCounter
    ws.cells(lngCounter, 5).Value = "MO_LIST_" & lngCounter
  
  Next lngCounter
  
  ws.Range("A1").Value = "|fffd||fffd|"
  ws.Range("B1").Value = "|fffd||fffd|"
  ws.Range("C1").Value = "|fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|"
  ws.Range("D1").Value = "|fffd||fffd|"
  ws.Range("E1").Value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  

  ' ---------------------------------------
  ' ---------------------------------------
  ' ---------------------------------------

  Shape_MR_MO_OKTMO_List = lngCounter
  
  GoTo cleanUp
  
ErrHandler:
  If modGlobals.gblnTestMode = True Then
    Debug.Print Err.Description
  End If
  GoTo cleanUp
cleanUp:

End Function

Attribute VB_Name = "modRegionSelect"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdStartTemplate, 109, 0, MSForms, CommandButton"
Option Explicit
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'       |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ChangeMacros()!!!!
' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| REGION |fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| modServiceModule |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNPROTECT_SHEET |fffd| PROTECT_SHEET
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| StartTemplate
'
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 2011
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''Private Sub ChangeMacros()
''  Dim sh As Shape
''  On Error Resume Next
''  For Each sh In Me.Shapes
''    If sh.name <> "cmdStart" Then sh.OnAction = "modRegionSelect.RegionClick"
''  Next sh
''  Me.Range("F2").name = "SelectedRegion"
''  With Me.Range("F3:I3").Validation
''    .Delete
''    .Add Type:=xlValidateList, _
''         AlertStyle:=xlValidAlertStop, _
''         Operator:=xlBetween, _
''         Formula1:="=REGION"
''    .IgnoreBlank = False
''    .InCellDropdown = True
''    .ShowInput = True
''    .ShowError = True
''  End With
''End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdStartTemplate_Click()
  StartTemlate
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Sub Worksheet_Change(ByVal Target As Range)
  If Me.Range("valueSelectedRegion").cells(1, 1).Row = Target.cells(1, 1).Row And _
     Me.Range("valueSelectedRegion").cells(1, 1).Column = Target.cells(1, 1).Column Then
        Dim rngFind As Range
        Dim rngFound As Range
        Set rngFind = ThisWorkbook.Names("REGION").RefersToRange
        Set rngFound = rngFind.Find(Target.cells(1, 1).Value, LookAt:=xlWhole)
        If Not rngFound Is Nothing Then
          RePaintRegion (rngFound.Row - ThisWorkbook.Names("REGION").RefersToRange.cells(1, 1).Row + 1)
        Else
          RePaintRegion (0)
        End If
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub RegionClick()
  Dim i As Integer
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Application.Caller, "Groupp") <> 0 Then
    i = CInt(Mid(Application.Caller, 7, 2))
  Else
    i = CInt(Mid(Application.Caller, 10))
  End If
  If i > 84 Then Exit Sub
  Application.EnableEvents = False
  Me.Range("valueSelectedRegion").Value = ThisWorkbook.Names("REGION").RefersToRange.cells(i, 1).Value
  Application.EnableEvents = True
  RePaintRegion (i)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub RePaintRegion(intRegNumber As Integer)
  If intRegNumber = ThisWorkbook.Names("SelectedRegion").RefersToRange.Value Then Exit Sub
  modServiceModule.UNPROTECT_SHEET Me
  On Error GoTo end_info
  If intRegNumber <> 0 Then
    With Me.Shapes("ShapeReg_" & intRegNumber)
      .Fill.ForeColor.RGB = RGB(186, 255, 204)
      .Fill.Visible = msoTrue
      .Fill.Solid
    End With
  End If

  If ThisWorkbook.Names("SelectedRegion").RefersToRange.Value <> 0 Then
    With Me.Shapes("ShapeReg_" & ThisWorkbook.Names("SelectedRegion").RefersToRange.Value)
      .Fill.ForeColor.RGB = RGB(220, 220, 220)
      .Fill.Visible = msoTrue
      .Fill.Solid
    End With
  End If
end_info:
  ThisWorkbook.Names("SelectedRegion").RefersToRange.Value = intRegNumber
  modServiceModule.PROTECT_SHEET Me, True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub StartTemlate()
  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim wsTitleSheet As Worksheet
  Dim wsEtUnionSheet As Worksheet
  
  Dim rngRange As Range
  
  Dim strRegionName As String
  Dim strDelForHypSheet As String
  Dim strDelForEtUnionSheet As String

  Dim intCounter As Integer
  
  Set wbBook = ThisWorkbook

  If modServiceModule.IsNameExists(wbBook, "valueSelectedRegion") = False Or _
     modServiceModule.IsNameExists(wbBook, "region_name") = False Or _
     modServiceModule.IsNameExists(wbBook, "strPublication") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_1") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_2") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_3") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_4") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_5") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_6") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_7") = False Or _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_8") = False Or _
     modServiceModule.IsNameExists(wbBook, "indexPoint_3_10_1") = False Or _
     modServiceModule.IsNameExists(wbBook, "indexPoint_3_10_2") = False Or _
     modServiceModule.IsNameExists(wbBook, "indexPoint_3_10_3") = False Or _
     modServiceModule.IsNameExists(wbBook, "indexPoint_3_10_4") = False Then GoTo cleanUp
  
  Set wsSheet = wbBook.Names("valueSelectedRegion").RefersToRange.parent
  strRegionName = wsSheet.Range("valueSelectedRegion").cells(1, 1).Value
  If strRegionName = "" Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical
    wsSheet.Range("valueSelectedRegion").Select
  Else
    If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & strRegionName & "' ?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      modServiceModule.UNPROTECT_SHEET wsSheet
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      wsSheet.Range("valueSelectedRegion").cells(1, 1).MergeArea.Validation.Delete
      wsSheet.Range("valueSelectedRegion").cells(1, 1).MergeArea.Locked = True
      wsSheet.Range("valueSelectedRegion").cells(1, 1).Interior.ColorIndex = colorGreen
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      cmdStartTemplate.Enabled = False
      cmdStartTemplate.Visible = False
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      wsSheet.Visible = xlSheetVeryHidden
      modServiceModule.PROTECT_SHEET wsSheet, True

'****************************************************************************************************************************
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''****************************************************************************************************************************
      
      Set wsTitleSheet = wbBook.Names("region_name").RefersToRange.parent
      wsTitleSheet.Activate
      modServiceModule.UNPROTECT_SHEET wsTitleSheet
      wsTitleSheet.Range("region_name").cells(1, 1).Value = strRegionName
      modServiceModule.PROTECT_SHEET wsTitleSheet, True
      
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
             vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      
      Application.ScreenUpdating = False
      Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
      modSheetMain01.cmdUpdateOrgData_Click_Handler wsTitleSheet, Nothing, False
      Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
      modSheetMain01.cmdUpdateReestrMO_Click_Handler wsTitleSheet, Nothing, False
      Application.StatusBar = False
      
      Application.ScreenUpdating = False
      For Each wsTempSheet In wbBook.Worksheets
        If Not (wsTempSheet.Visible = True) Then
          If wsTempSheet.Tab.ColorIndex = colorPaleBlue Then
            wsTempSheet.Visible = xlSheetVisible
          End If
        End If
      Next wsTempSheet

      Application.EnableEvents = True
      wsTitleSheet.Range("strPublication").ClearContents
      wsTitleSheet.Range("main_kinds_of_goods").cells(1, 1).ClearContents
      wsTitleSheet.Range("etc_kind_of_goods").ClearContents
      wsTitleSheet.Range("flag_ipr").ClearContents
      If strRegionName <> strExceptionsRegionOne Then
        Application.EnableEvents = False
        Set wsTempSheet = wbBook.Sheets(gstrHyperlinkSheetName)
        wsTempSheet.Activate
        modServiceModule.UNPROTECT_SHEET wsTempSheet
        For intCounter = 1 To 8
          wsTempSheet.Range("nameSource_strPublication_" & intCounter).Offset(2, 0).Rows.EntireRow.Delete
        Next intCounter
        modServiceModule.PROTECT_SHEET wsTempSheet, True
        
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3.10.1-3.10.2
        If strRegionName = strExceptionsRegionSix Then
          For intCounter = 1 To 4
            Set rngRange = wbBook.Names("indexPoint_3_10_" & intCounter).RefersToRange
            Set wsTempSheet = rngRange.parent
            wsTempSheet.Activate
            modServiceModule.UNPROTECT_SHEET wsTempSheet
            If InStr(1, wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, -2).Value, ", |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:") <> 0 Then
              wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, -2).Value = _
                Left(wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, -2).Value, _
                     Len(wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, -2).Value) - _
                     Len(", |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:"))
            End If
            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, 0).Interior.ColorIndex = modGlobals.colorGreen Then
              wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, 0).Interior.ColorIndex = modGlobals.colorYellow
              wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, 0).Locked = False
              wsTempSheet.Range("indexPoint_3_10_" & intCounter).cells(1, 1).Offset(-1, 0).ClearContents
            End If
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            wsTempSheet.Range("indexPoint_3_10_" & intCounter).Rows.EntireRow.Delete
            wbBook.Names("indexPoint_3_10_" & intCounter).Delete
            modServiceModule.PROTECT_SHEET wsTempSheet, True
          Next intCounter
          Application.EnableEvents = True
        End If
        
        wsTitleSheet.Activate
      End If
      Application.EnableEvents = False
      
'****************************************************************************************************************************
'
'****************************************************************************************************************************
    
    End If

  End If
  
  GoTo cleanUp

ErrHandler:
  GoTo cleanUp
  
cleanUp:
  wsSheet.Activate
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  Application.StatusBar = False
End Sub

Attribute VB_Name = "modScrolling"
Option Explicit

#If VBA7 And Win64 Then
  Public Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                               ByVal lpWindowName As String) As Long

  Private Declare PtrSafe Function CallWindowProcA Lib "user32" (ByVal lpPrevWndFunc As Long, _
                                                                 ByVal hWnd As Long, _
                                                                 ByVal MSG As Long, _
                                                                 ByVal wParam As Long, _
                                                                 ByVal lParam As Long) As Long
  Private Declare PtrSafe Function SetWindowLongPtrA Lib "user32" (ByVal hWnd As Long, _
                                                                   ByVal nIndex As Long, _
                                                                   ByVal dwNewLong As LongPtr) As Long
  Public Declare PtrSafe Function GetFocus Lib "user32" () As Long
  
#Else
  Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                       ByVal lpWindowName As String) As Long

  Private Declare Function CallWindowProcA Lib "user32" (ByVal lpPrevWndFunc As Long, _
                                                         ByVal hWnd As Long, _
                                                         ByVal MSG As Long, _
                                                         ByVal wParam As Long, _
                                                         ByVal lParam As Long) As Long
  Private Declare Function SetWindowLongA Lib "user32" (ByVal hWnd As Long, _
                                                        ByVal nIndex As Long, _
                                                        ByVal dwNewLong As Long) As Long
  Public Declare Function GetFocus Lib "user32" () As Long
#End If

Public hW As Long ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
   
Private Const GWL_WNDPROC = -4
Private Const WM_MOUSEWHEEL = &H20A
Private lpPrevWndProc As Long, Wheel As Long
 
Sub Hook(hWnd As Long)
    #If VBA7 And Win64 Then
      lpPrevWndProc = SetWindowLongPtrA(hWnd, GWL_WNDPROC, AddressOf WindowProc)
    #Else
      lpPrevWndProc = SetWindowLongA(hWnd, GWL_WNDPROC, AddressOf WindowProc)
    #End If
End Sub

Sub UnHook(hWnd As Long)
    #If VBA7 And Win64 Then
      SetWindowLongPtrA hWnd, GWL_WNDPROC, lpPrevWndProc
    #Else
      SetWindowLongA hWnd, GWL_WNDPROC, lpPrevWndProc
    #End If
End Sub
 
' API |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ListBox
Function WindowProc(ByVal hWnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
  
  On Error GoTo xErr
  
  Dim bytScrollStep As Byte
  
  bytScrollStep = 2
  
  If uMsg = WM_MOUSEWHEEL Then
    If wParam = -7864320 Or wParam = -23592960 Or wParam = -15728640 Then
      If blnIs_UserForm_Loaded("frmReestr") = True Then
        If frmReestr.ListReestr.ListIndex >= 0 And _
           frmReestr.ListReestr.ListIndex < frmReestr.ListReestr.ListCount Then
          If (frmReestr.ListReestr.ListCount - frmReestr.ListReestr.ListIndex) <= bytScrollStep Then
            bytScrollStep = 1 ' slow down scroll step
          End If
          frmReestr.ListReestr.ListIndex = frmReestr.ListReestr.ListIndex + bytScrollStep ' scroll down
        End If
      End If
    ElseIf wParam = 7864320 Or wParam = 23592960 Or wParam = 15728640 Then
      If blnIs_UserForm_Loaded("frmReestr") = True Then
        If frmReestr.ListReestr.ListIndex > 0 And _
           frmReestr.ListReestr.ListIndex < frmReestr.ListReestr.ListCount Then
          If frmReestr.ListReestr.ListIndex < bytScrollStep Then
            bytScrollStep = 1 ' slow down scroll step
          End If
          frmReestr.ListReestr.ListIndex = frmReestr.ListReestr.ListIndex - bytScrollStep ' scroll up
        End If
      End If
    End If
  Else
    WindowProc = CallWindowProcA(lpPrevWndProc, hWnd, uMsg, wParam, lParam)
  End If
  
xErr:
End Function

Private Function blnIs_UserForm_Loaded(ByVal strFormName As String) As Boolean

  Dim lngICounter As Long

  blnIs_UserForm_Loaded = False
  For lngICounter = 0 To UserForms.Count - 1
    If UserForms(lngICounter).name = strFormName Then
      blnIs_UserForm_Loaded = True
      Exit Function
    End If
  Next lngICounter

End Function

Attribute VB_Name = "modServiceModule"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const MODE_UNDEFINED_PROTECTION_ENABLED As Long = 0
Private Const TEST_MODE_PROTECTION_ENABLED As Long = 1
Private Const TEST_MODE_PROTECTION_DISABLED As Long = 2
Private Const RELEASE_MODE = 3

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub UNPROTECT_SHEET(ByRef wsSheet As Worksheet, _
                           Optional ByVal strPassWord As String = gPASSWORD)
  wsSheet.Unprotect strPassWord
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub PROTECT_SHEET(ByRef wsSheet As Worksheet, _
                         ByVal blnDrawingObject As Boolean, _
                         Optional ByVal strPassWord As String = gPASSWORD, _
                         Optional ByVal blnEnableAutoFilter As Boolean = False)
  
  On Error GoTo ErrHandler
  
  If wsSheet Is Nothing Then GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim lngTemplateOperationMode As Long
  
  Set wbBook = wsSheet.parent
  
  lngTemplateOperationMode = CLng(varGetDocumentProperty(wbBook, "TemplateOperationMode"))
  If lngTemplateOperationMode = MODE_UNDEFINED_PROTECTION_ENABLED Or _
     lngTemplateOperationMode = RELEASE_MODE Or _
     lngTemplateOperationMode = TEST_MODE_PROTECTION_ENABLED Then
    wsSheet.Protect Password:=strPassWord, DrawingObjects:=blnDrawingObject, _
                    Contents:=True, Scenarios:=True, _
                    AllowFormattingColumns:=True, AllowFormattingRows:=True, _
                    AllowFiltering:=blnEnableAutoFilter
  End If
ErrHandler:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function varGetDocumentProperty(ByRef wbBook As Workbook, _
                                       ByVal strName As String) As Variant
  
  On Error GoTo ErrHandler
  
  If wbBook Is Nothing Then GoTo ErrHandler
  
  If strName = "Title" Or strName = "Subject" Or strName = "Company" Or strName = "Comments" Then
    varGetDocumentProperty = wbBook.BuiltinDocumentProperties(strName).Value
  Else
    varGetDocumentProperty = wbBook.CustomDocumentProperties(strName).Value
  End If

  GoTo cleanUp

ErrHandler:
  varGetDocumentProperty = ""
cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function blnIsDocumentProperty(ByVal wbBook As Workbook, _
                                      ByVal strPropertyName As String) As Boolean
  
  On Error GoTo ErrHandler
  
  Dim varValue As Variant
  
  blnIsDocumentProperty = False
  
  If wbBook Is Nothing Or _
     Len(strPropertyName) = 0 Then
    GoTo ErrHandler
  End If
  
  If strPropertyName = "Title" Or strPropertyName = "Subject" Or _
     strPropertyName = "Company" Or strPropertyName = "Comments" Then
    varValue = wbBook.BuiltinDocumentProperties(strPropertyName).Value
    blnIsDocumentProperty = True
  Else
    varValue = wbBook.CustomDocumentProperties(strPropertyName).Value
    blnIsDocumentProperty = True
  End If

  GoTo cleanUp

ErrHandler:
  blnIsDocumentProperty = False
cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function GetNamedRangeListFromSheet(wb As Workbook, sheet_name As String) As name()

  Dim NAMED_RANGES_ARRAY() As name
  Dim namName As name
    
  ReDim Preserve NAMED_RANGES_ARRAY(1)
  wb.Activate
    
  Dim pattern_sheet_name As String
  pattern_sheet_name = "*" + sheet_name + "!*"
    
  For Each namName In wb.Names
    If CStr(namName) Like pattern_sheet_name Then
      ReDim Preserve NAMED_RANGES_ARRAY(UBound(NAMED_RANGES_ARRAY) + 1)
      Set NAMED_RANGES_ARRAY(UBound(NAMED_RANGES_ARRAY)) = namName
    End If
  Next namName
    
  GetNamedRangeListFromSheet = NAMED_RANGES_ARRAY

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetWorksheetName(n As name, ws As Worksheet) As String
  On Error GoTo ErrHandler
  Dim rngRange As Range
  Set rngRange = ws.Range(n.name)
  GetWorksheetName = rngRange.parent.name
  Set rngRange = Nothing
  Exit Function
ErrHandler:
  GetWorksheetName = ""
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' NOTE: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "1.2.4.64.x", |fffd||fffd||fffd| x - |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function RENUMBER_ADD_CELLS(rngRangeToRenumerate As Range) As String
  Dim rngTemp As Range
  Dim strPreviousNumberValue As String, strPreviousNumberFormula As String
  Dim strPrefix As String, strSubString As String
  Dim intVal As Integer, i As Integer
  RENUMBER_ADD_CELLS = ""
  
  If rngRangeToRenumerate Is Nothing Then Exit Function
  
  rngRangeToRenumerate.Offset(-1, 0).Select
  Set rngTemp = Selection
  If Len(CStr(rngTemp.cells(1, 1).Value)) = 0 Or _
    rngRangeToRenumerate.Columns.Count <> rngTemp.Columns.Count Then
    Exit Function
  End If
  
  If rngTemp.cells(1, 1).HasFormula = True Then
    strPreviousNumberFormula = CStr(rngTemp.cells(1, 1).Formula) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    strPreviousNumberValue = CStr(rngTemp.cells(1, 1).Value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberFormula) = 0 Then Exit Function
    
    strSubString = "."
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, strSubString) = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then
        Exit Do
      End If
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, Len(strPreviousNumberValue) - i + 1))
    strPrefix = CStr(Mid(strPreviousNumberFormula, 1, Len(strPreviousNumberFormula) - i))
    
    rngRangeToRenumerate.Select
    Selection.NumberFormat = "General" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
    rngRangeToRenumerate.cells(1, 1).Value = strPrefix & CStr(intVal + 1)
    
    RENUMBER_ADD_CELLS = strPrefix & CStr(rngRangeToRenumerate.cells(1, 1).Value)
  Else
    strPreviousNumberValue = CStr(rngTemp.cells(1, 1).Value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberValue) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, ".") = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, i))
    strPrefix = CStr(Mid(strPreviousNumberValue, 1, Len(strPreviousNumberValue) - i))
    
    rngRangeToRenumerate.Select
    Selection.NumberFormat = "@" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
    rngRangeToRenumerate.cells(1, 1).Value = strPrefix & CStr(intVal + 1)
    
    RENUMBER_ADD_CELLS = strPrefix & CStr(rngRangeToRenumerate.cells(1, 1).Value)
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' NOTE: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "1.2.4.64.x", |fffd||fffd||fffd| x - |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function RENUMBER_REMOVE_CELLS(intNCol As Integer, _
                                      intNRow As Integer, _
                                      rngRemovedNum As Range, _
                                      wsWorkSheet As Worksheet) As String
  Dim rngCell As Range
  Dim strPreviousNumberValue As String, strPreviousNumberFormula As String
  Dim strPrefix As String, strSubString As String
  Dim intVal As Integer, i As Integer
  RENUMBER_REMOVE_CELLS = ""
  
  If intNCol <= 0 Or intNRow <= 0 Or rngRemovedNum Is Nothing Then Exit Function
  
  Set rngCell = wsWorkSheet.cells(intNRow, intNCol).Offset(1, 0)
  
  If rngRemovedNum.cells(1, 1).HasFormula = True Then
    strPreviousNumberFormula = CStr(rngRemovedNum.cells(1, 1).Formula) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    strPreviousNumberValue = CStr(rngRemovedNum.cells(1, 1).Value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberFormula) = 0 Then Exit Function
    
    strSubString = "."
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, strSubString) = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then
        Exit Do
      End If
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, Len(strPreviousNumberValue) - i + 1))
    strPrefix = CStr(Mid(strPreviousNumberFormula, 1, Len(strPreviousNumberFormula) - i))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Len(CStr(rngCell.cells(1, 1).Value)) > 0
      rngCell.Select
      Selection.NumberFormat = "General" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
      rngCell.cells(1, 1).Value = strPrefix & CStr(intVal)
      Set rngCell = rngCell.Offset(1, 0)
      intVal = intVal + 1
    Loop
    RENUMBER_REMOVE_CELLS = strPrefix & CStr(intVal - 1)
  Else
    strPreviousNumberValue = CStr(rngRemovedNum.cells(1, 1).Value)     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberValue) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, ".") = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, i))
    strPrefix = CStr(Mid(strPreviousNumberValue, 1, Len(strPreviousNumberValue) - i))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Len(CStr(rngCell.cells(1, 1).Value)) > 0
      rngCell.cells(1, 1).Value = strPrefix & CStr(intVal)
      rngCell.Select
      Selection.NumberFormat = "@" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
      Set rngCell = rngCell.Offset(1, 0)
      intVal = intVal + 1
    Loop
    RENUMBER_REMOVE_CELLS = strPrefix & CStr(intVal - 1)
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetName |fffd| |fffd||fffd||fffd||fffd||fffd| wb
Function SheetExists(SheetName As String, wb As Workbook) As Boolean
On Error GoTo ErrHandler

Dim ws As Worksheet
SheetExists = False
For Each ws In wb.Worksheets
  If CStr(ws.name) = SheetName Then
    SheetExists = True
    Exit Function
  End If
Next

ErrHandler:
  SheetExists = False
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook
Public Function IsNameExists(wbBook As Workbook, strName As String) As Boolean
  
  On Error GoTo ErrHandler1
  
  Dim namName As name
  
  IsNameExists = True
  
  Set namName = wbBook.Names(strName)
  
  GoTo ErrHandler2

ErrHandler1:
  IsNameExists = False
  GoTo cleanUp
ErrHandler2:
  GoTo ErrHandler3
ErrHandler3:
  If Len(CStr(namName.RefersTo)) = 0 Or _
     InStr(1, CStr(namName.RefersTo), "#") > 0 Then
    IsNameExists = False
  End If
  GoTo cleanUp
cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SetAllTahoma()
 
 Dim ws As Worksheet
 Dim wb As Workbook
 Set wb = ActiveWorkbook
 
 For Each ws In wb.Worksheets
   ws.Activate
   cells.Select
   Selection.Font.name = "Tahoma"
   Selection.Font.Size = 9
 Next ws
 
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FixAllHyperlinks()
  Dim wbThisBook As Workbook
  Dim wsSheet As Worksheet
  Dim hl As Hyperlink
  Dim rngRange As Range
  Set wbThisBook = ActiveWorkbook
  For Each wsSheet In wbThisBook.Worksheets
    wsSheet.Activate
    For Each hl In wsSheet.Hyperlinks
      hl.SubAddress = Chr(39) & wsSheet.name & Chr(39) & "!A1"
      Set rngRange = hl.parent
      rngRange.Font.name = "Tahoma"
    Next hl
  Next wsSheet
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FixAllHyperlinksInSheet()
  
  Dim wsSheet As Worksheet
  Dim hl As Hyperlink
  Dim rngRange As Range
  
  Set wsSheet = Application.ActiveSheet
  wsSheet.Activate
  For Each hl In wsSheet.Hyperlinks
    Set rngRange = hl.parent
    hl.SubAddress = Chr(39) & wsSheet.name & Chr(39) & "!A1"
    hl.ScreenTip = rngRange.cells(1, 1).Value
    rngRange.cells(1, 1).Font.name = "Tahoma"
  Next hl

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Real_Validation()
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
  
    If rngCell.Interior.ColorIndex = colorYellow Then
      rngCell.NumberFormat = "0.00"
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateDecimal, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="-999999999999999999999999", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0.00"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If
    
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 200 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Text_Validation()
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
  
    If rngCell.Interior.ColorIndex = colorYellow Then
      rngCell.NumberFormat = "@"
      
        With rngCell.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlLessEqual, Formula1:="950"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = STR_MSGBOX_WARNING_TITLE
            .InputMessage = ""
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 950 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
            .ShowInput = True
            .ShowError = True
        End With
      
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
         With rngCell.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlLessEqual, Formula1:="950"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrcorTitle = STR_MSGBOX_WARNING_TITLE
            .InputMessage = ""
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 950 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
            .ShowInput = True
            .ShowError = True
        End With
     rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If
    
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Positive_Validation()
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
  
    If rngCell.Interior.ColorIndex = colorYellow Then
      rngCell.NumberFormat = "0.00"
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateDecimal, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="0", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0.00"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If
    
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Whole_Positive_Validation()

  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
    rngCell.NumberFormat = "0"
    If rngCell.Interior.ColorIndex = colorYellow Then
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="0", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If

  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Whole_Validation()

  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
      rngCell.NumberFormat = "0"

    If rngCell.Interior.ColorIndex = colorYellow Then
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="-999999999999999999999999", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If

  Next rngCell

End Sub

Sub Hide_Grid_Lines_Caller()
  Hide_Grid_Lines ActiveWorkbook
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub Hide_Grid_Lines(ByVal wbBook As Workbook)
  
  On Error GoTo cleanUp
  
  Dim wsSheet As Worksheet
  Dim wsActiveSheet As Worksheet
  
  If wbBook Is Nothing Then GoTo cleanUp
  
  Set wsActiveSheet = wbBook.ActiveSheet
  
  Application.ScreenUpdating = True
  
  For Each wsSheet In wbBook.Worksheets
    If wsSheet.Tab.ColorIndex <> colorLightBrown Then
      wsSheet.Activate
      ActiveWindow.DisplayGridlines = False
    End If
  Next wsSheet
  
  wsActiveSheet.Activate
  
  GoTo cleanUp
  
cleanUp:
  Application.ScreenUpdating = True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub AutoFitMergedCellRowHeight(ByRef rngRange As Range, _
                               Optional ByRef intRowHeight As Integer = 20)
    Dim rngMergeRange As Range
    Dim rngOneRange As Range
    Dim intNewHeight As Integer
    
    If rngRange.MergeCells = False Then
      rngRange.EntireRow.AutoFit
    ElseIf rngRange.MergeArea.Rows.Count > 1 Then
      Set rngMergeRange = rngRange.MergeArea
      With rngMergeRange
          .UnMerge
          .EntireRow.AutoFit
          intNewHeight = .Rows(1).Height
          .Merge:
      End With
      intNewHeight = intNewHeight / rngMergeRange.Rows.Count + 2
      If intNewHeight < intRowHeight Then intNewHeight = intRowHeight
      For Each rngOneRange In rngMergeRange.Rows
        rngOneRange.RowHeight = intNewHeight
      Next rngOneRange
    End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetCodeName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Public Function GetWsByCodeName(SheetCodeName As String, Optional ByVal wbBook As Workbook) As Worksheet

  On Error GoTo ErrHandler
  Dim ws As Worksheet
  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If
  For Each ws In wbBook.Worksheets
    If ws.CodeName = SheetCodeName Then
      Set GetWsByCodeName = ws
      GoTo cleanUp
    End If
  Next
  
ErrHandler:
  GetWsByCodeName = xlNothing
  GoTo cleanUp

cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetCodeName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook
Public Function CodeNameSheetExists(SheetCodeName As String, Optional ByVal wbBook As Workbook) As Boolean

  On Error GoTo ErrHandler
  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If
  Dim ws As Worksheet
  CodeNameSheetExists = False
  For Each ws In wbBook.Worksheets
    If ws.CodeName = SheetCodeName Then
      CodeNameSheetExists = True
      GoTo cleanUp
    End If
  Next
  
ErrHandler:
  CodeNameSheetExists = False
  GoTo cleanUp

cleanUp:
End Function

Function strHypperlinkExists(strURL As String) As String
  
  Dim objXHTTP As Object
  Set objXHTTP = CreateObject("MSXML2.XMLHTTP")

  If InStr(1, LCase(strURL), "http") <> 1 And _
     InStr(1, LCase(strURL), "ftp") <> 1 Then
    strURL = "http://" & strURL
  End If

  On Error GoTo ErrHttpExists
  
  objXHTTP.Open "HEAD", strURL, False, " ", " "
  objXHTTP.send
  
  strHypperlinkExists = objXHTTP.status
  GoTo cleanUp

ErrHttpExists:
  Debug.Print Err.Number
  GoTo cleanUp

cleanUp:
End Function

Public Sub WorkbookAfterPrint()
  
  On Error GoTo cleanUp
  
  Dim wbBook As Workbook
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim strCenterFooter As String
  Dim strNameColumn As String
  Dim strNameRow As String
  
  Dim intCounter As Integer
  Dim intCounter2 As Integer
  Dim intCounterEndRow As Integer
   
  Set wbBook = Application.ThisWorkbook

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  strNameColumn = "hide_me_column_"
  strNameRow = "hide_me_row_"
  For intCounter = 1 To 11
    If intCounter = 1 Or intCounter = 3 Or _
       intCounter = 5 Or intCounter = 7 Or _
       intCounter = 9 Then
         intCounterEndRow = 2
    ElseIf intCounter = 4 Or intCounter = 6 Or _
       intCounter = 8 Or intCounter = 10 Or _
       intCounter = 11 Then
         intCounterEndRow = 1
    Else
         intCounterEndRow = 3
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For intCounter2 = 1 To 2
      If modServiceModule.IsNameExists(wbBook, strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
        wbBook.Names(strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireColumn.Hidden = False
      End If
    Next intCounter2
        
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    For intCounter2 = 1 To intCounterEndRow
      If (intCounter2 = 2 And intCounter = 1) Or _
         intCounter = 4 Or intCounter = 6 Or _
         intCounter = 8 Or intCounter = 10 Then
        If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
          For Each rngCell In wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.Columns(9).cells
            If InStr(1, rngCell.Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
               InStr(1, rngCell.Offset(0, -2).cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
               InStr(1, rngCell.Offset(0, -3).cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Then
              rngCell.EntireRow.Hidden = False
            End If
          Next rngCell
        End If
      Else
        If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
          wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireRow.Hidden = False
        End If
      End If
    Next intCounter2
  Next intCounter

cleanUp:

End Sub
Attribute VB_Name = "modSheetMain01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1
    
Public bflagExceptionRegion As Boolean   ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd| true - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/

Public Sub SheetMain01_Worksheet_Change(ByVal Target As Range)
  SheetMain01_Change_Handler Target
End Sub

Public Sub SheetMain01_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain01_Hyperlink_Handler Target, Target.Range.parent
End Sub

Public Sub SheetMain01_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain01_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain01_Worksheet_SelectionChange(ByVal Target As Range)

End Sub

' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISectWebsite
  
  Dim strGoToAddress As String

  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "godStart") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "godEnd") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("godStart"), _
                                                           wsSheet.Range("godend")))
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
     
    modServiceModule.UNPROTECT_SHEET wsSheet
    
inputNewDate:
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).Value, ".")(0)
     intMonth = Split(Target.cells(1, 1).Value, ".")(1)
     intYear = Split(Target.cells(1, 1).Value, ".")(2)
    Else
     intDay = 0
    End If
    
    Cancel = True
    frmDateChoose.Show vbModal
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Target.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(wbBook.Names("godStart").RefersToRange.Value)) <> 0 And _
       Len(Trim(wbBook.Names("godEnd").RefersToRange.Value)) <> 0 And _
       (CDate(wbBook.Names("godStart").RefersToRange.Value) > _
        CDate(wbBook.Names("godEnd").RefersToRange.Value)) Then
      MsgBox "|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|', |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, " & _
             " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'!", _
             vbCritical, _
             STR_MSGBOX_WARNING_TITLE
      GoTo inputNewDate
''      Target.cells(1, 1).ClearContents
    Else
      If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
        If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - " & modGlobals.STR_SELECT_DATE & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '" & _
                  Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Value & _
                  "', |fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") <> _
                  vbYes Then
          GoTo inputNewDate
        End If
      End If
    End If
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  End If
  
  GoTo cleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Change_Handler(Target As Range)
  
  On Error GoTo ErrChange
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
  Dim wsReestrMOSheet As Worksheet
  Dim wsUnionSheet As Worksheet
  Dim wsTempSheet As Worksheet
  
  Dim strExceptionRegion(6) As String
  Dim strCurrentRegion As String
  Dim strTempAddress As String
  Dim strAddress As String
  Dim strMOName As String
  Dim strMRName As String
  Dim strOKTMOValue As String
  Dim strString
   
  Dim intCounter As Integer
  Dim intColumnCounter As Integer
  Dim intRowCounter As Integer
  Dim intCounterEnd As Integer
  Dim intNumStartRowForCheck As Integer
  Dim intNumEndRowForCheck As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim rngRangeOne As Range
  Dim rngRangeTemp As Range
  Dim rngRangeToCopy As Range           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim rngRangeForCopy As Range          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  
  Dim ISect

  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  strExceptionRegion(1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  strExceptionRegion(2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  strExceptionRegion(3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  strExceptionRegion(4) = "|fffd|.|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  strExceptionRegion(5) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  strExceptionRegion(6) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  Set wsReestrMOSheet = wbBook.Sheets(STR_REESTR_MO_SHEET_NAME)
  Set wsUnionSheet = wbBook.Sheets(gstrEtUnionSheetName)

  strCurrentRegion = wbBook.Names("region_name").RefersToRange.Value
  bflagExceptionRegion = False
  For Each strString In strExceptionRegion()
    If strString = strCurrentRegion Then bflagExceptionRegion = True
  Next strString
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Dim intRowHeight As Integer
  If Target.cells(1, 1).Interior.ColorIndex = modGlobals.colorCyan Or _
     Target.cells(1, 1).Interior.ColorIndex = modGlobals.colorGreen Or _
     Target.cells(1, 1).Interior.ColorIndex = modGlobals.colorYellow Then
    If Not Target.MergeCells Then
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 25 Then Target.cells(1, 1).RowHeight = 25
    End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "strPublication") And _
     modServiceModule.IsNameExists(wbBook, "flag_ipr") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_1") And modServiceModule.IsNameExists(wbBook, "website_strPublication_1") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_2") And modServiceModule.IsNameExists(wbBook, "website_strPublication_2") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_3") And modServiceModule.IsNameExists(wbBook, "website_strPublication_3") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_4") And modServiceModule.IsNameExists(wbBook, "website_strPublication_4") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_5") And modServiceModule.IsNameExists(wbBook, "website_strPublication_5") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_6") And modServiceModule.IsNameExists(wbBook, "website_strPublication_6") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_7") And modServiceModule.IsNameExists(wbBook, "website_strPublication_7") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_8") And modServiceModule.IsNameExists(wbBook, "website_strPublication_8") Then
     
    Set ISect = Application.Intersect(Target, wsSheet.Range("strPublication"))
    If Not ISect Is Nothing Then

      If bflagExceptionRegion = True Then GoTo RepaintRange

      If InStr(1, LCase(Target.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
         InStr(1, LCase(Target.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Then
           wbBook.Sheets(gstrHyperlinkSheetName).Visible = xlSheetVisible
           If InStr(1, LCase(Target.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 And _
              InStr(1, LCase(wbBook.Names("flag_ipr").RefersToRange.cells(1, 1).Value), "|fffd||fffd|") <> 0 Then
             wbBook.Sheets(gstrInvestmentSheetName).Visible = xlSheetVisible
           Else
             wbBook.Sheets(gstrInvestmentSheetName).Visible = xlSheetVeryHidden
           End If
      Else
        wbBook.Sheets(gstrHyperlinkSheetName).Visible = xlSheetVeryHidden
        wbBook.Sheets(gstrInvestmentSheetName).Visible = xlSheetVeryHidden
      End If
      
      SheetMain01_Value_Kind_Of_Goods wbBook

RepaintRange:
      ' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| x.1.1) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set wsTempSheet = wbBook.Sheets(gstrHyperlinkSheetName)
      wsTempSheet.Activate
      modServiceModule.UNPROTECT_SHEET wsTempSheet
      If InStr(1, LCase(Target.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Then
        For intCounter = 1 To 8
          If Not (intCounter = 1 And _
                  InStr(1, LCase(wbBook.Names("flag_ipr").RefersToRange.cells(1, 1).Value), "|fffd||fffd|") = 0) Then
            wsTempSheet.Range("nameSource_strPublication_" & intCounter).cells(1, 1).Interior.ColorIndex = modGlobals.colorCyan
            wsTempSheet.Range("website_strPublication_" & intCounter).cells(1, 1).Interior.ColorIndex = modGlobals.colorCyan
          End If
        Next intCounter
      Else
        For intCounter = 1 To 8
          If Not (intCounter = 1 And _
                  InStr(1, LCase(wbBook.Names("flag_ipr").RefersToRange.cells(1, 1).Value), "|fffd||fffd|") = 0) Then
            wsTempSheet.Range("nameSource_strPublication_" & intCounter).cells(1, 1).Interior.ColorIndex = modGlobals.colorYellow
            wsTempSheet.Range("website_strPublication_" & intCounter).cells(1, 1).Interior.ColorIndex = modGlobals.colorYellow
          End If
        Next intCounter
      End If
      modServiceModule.PROTECT_SHEET wsTempSheet, True
      wsSheet.Activate
      GoTo cleanUp

    End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "flag_ipr") And _
     modServiceModule.IsNameExists(wbBook, "strPublication") And _
     modServiceModule.IsNameExists(wbBook, "ipr_pub") And _
     modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_1") And _
     modServiceModule.IsNameExists(wbBook, "website_strPublication_1") Then
     
    Set ISect = Application.Intersect(Target, wsSheet.Range("flag_ipr"))
    If Not ISect Is Nothing Then

      If InStr(1, LCase(Target.cells(1, 1).Value), "|fffd||fffd|") <> 0 Then
        If (InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
            bflagExceptionRegion = True) Then
          wbBook.Sheets(gstrInvestmentSheetName).Visible = xlSheetVisible
        Else
          wbBook.Sheets(gstrInvestmentSheetName).Visible = xlSheetVeryHidden
        End If
        SheetMain01_Work_With_Range False, "ipr_pub"
      Else
        wbBook.Sheets(gstrInvestmentSheetName).Visible = xlSheetVeryHidden
        SheetMain01_Work_With_Range True, "ipr_pub"
      End If
      
      modServiceModule.PROTECT_SHEET wsTempSheet, True
      
      ' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| 1.1.1) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If InStr(1, LCase(Target.cells(1, 1).Value), "|fffd||fffd|") <> 0 Then
        Set wsTempSheet = wbBook.Sheets(gstrHyperlinkSheetName)
        wsTempSheet.Activate
        modServiceModule.UNPROTECT_SHEET wsTempSheet
        If InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Then
          wsTempSheet.Range("nameSource_strPublication_1").cells(1, 1).Interior.ColorIndex = modGlobals.colorCyan
          wsTempSheet.Range("website_strPublication_1").cells(1, 1).Interior.ColorIndex = modGlobals.colorCyan
        Else
          wsTempSheet.Range("nameSource_strPublication_1").cells(1, 1).Interior.ColorIndex = modGlobals.colorYellow
          wsTempSheet.Range("website_strPublication_1").cells(1, 1).Interior.ColorIndex = modGlobals.colorYellow
        End If
        modServiceModule.PROTECT_SHEET wsTempSheet, True
      End If
      
      GoTo cleanUp

    End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "fil_flag") And _
     modServiceModule.IsNameExists(wbBook, "fil") Then
      Set ISect = Application.Intersect(Target, wsSheet.Range("fil_flag"))
      If Not ISect Is Nothing Then
    
        modServiceModule.UNPROTECT_SHEET wsSheet
    
        If Target.cells(1, 1).Value = "|fffd||fffd|" Then
          wsSheet.Range("fil").RowHeight = 25
          wsSheet.Range("fil").Select
          Selection.Interior.ColorIndex = colorCyan
          Selection.Locked = False
        Else
          wsSheet.Range("fil").RowHeight = 0
          wsSheet.Range("fil").Select
          Selection.ClearContents
          Selection.Interior.ColorIndex = colorWhite
          Selection.Locked = True
        End If
    
        Target.Select
        wsSheet.Range("org_zag").cells(1, 1).Value = modTitleSheetHeaders.fil_org(Target.cells(1, 1).Value)
        wsSheet.Range("inn_zag").cells(1, 1).Value = modTitleSheetHeaders.fil_inn(Target.cells(1, 1).Value)
        wsSheet.Range("kpp_zag").cells(1, 1).Value = modTitleSheetHeaders.fil_kpp(Target.cells(1, 1).Value)
    
        modServiceModule.PROTECT_SHEET wsSheet, True
    
        GoTo cleanUp
    
      End If
  End If
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "etc_kind_of_goods") And _
     modServiceModule.IsNameExists(wbBook, "comment_kind_of_goods") Then
      Set ISect = Application.Intersect(Target, wsSheet.Range("etc_kind_of_goods"))
      If Not ISect Is Nothing Then
    
        modServiceModule.UNPROTECT_SHEET wsSheet
    
        If LCase(Target.cells(1, 1).Value) = "|fffd||fffd|" Then
          wsSheet.Range("comment_kind_of_goods").RowHeight = 25
          wsSheet.Range("comment_kind_of_goods").Select
          Selection.Interior.ColorIndex = colorCyan
          Selection.Locked = False
          If (InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
            bflagExceptionRegion = True) Then
              wbBook.Sheets(gstrIndexSheetName_4).Visible = xlSheetVisible
              wbBook.Sheets(gstrIndexTwoSheetName_4).Visible = xlSheetVisible
          Else
              wbBook.Sheets(gstrIndexSheetName_4).Visible = xlSheetVeryHidden
              wbBook.Sheets(gstrIndexTwoSheetName_4).Visible = xlSheetVeryHidden
          End If
        Else
          wsSheet.Range("comment_kind_of_goods").RowHeight = 0
          wsSheet.Range("comment_kind_of_goods").Select
          Selection.ClearContents
          Selection.Interior.ColorIndex = colorWhite
          Selection.Locked = True
          wbBook.Sheets(gstrIndexSheetName_4).Visible = xlSheetVeryHidden
          wbBook.Sheets(gstrIndexTwoSheetName_4).Visible = xlSheetVeryHidden
        End If
    
        Target.Select
        
        modServiceModule.PROTECT_SHEET wsSheet, True
    
        GoTo cleanUp
    
      End If
  End If
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "main_kinds_of_goods") Then
      Set ISect = Application.Intersect(Target, wsSheet.Range("main_kinds_of_goods"))
      If Not ISect Is Nothing Then
    
        SheetMain01_Value_Kind_Of_Goods wbBook
        Target.Select
        GoTo cleanUp
    
      End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "mr_check") And _
     modServiceModule.IsNameExists(wbBook, "mo_check") And _
     modServiceModule.IsNameExists(wbBook, "oktmo_check") Then
    Set ISect = Application.Intersect(Target, wsSheet.Range("mr_check"))
    If Not ISect Is Nothing Then
      
      Set rngRange = wbBook.Names("MR_LIST").RefersToRange
      modServiceModule.UNPROTECT_SHEET wsSheet
      intCounter = 2
      strMOName = ""
      Do While intCounter <= rngRange.Rows.Count + 1
        If wsReestrMOSheet.cells(intCounter, 4).Value = Target.cells(1, 1).Value Then
          strMOName = wsReestrMOSheet.cells(intCounter, 5).Value
          Exit Do
        End If
        intCounter = intCounter + 1
      Loop
      
      ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strMRName = Target.cells(1, 1).Value
      If Len(Trim(strMRName)) <> 0 Then
        intNumStartRowForCheck = Target.cells(1, 1).Offset(0, -2).MergeArea.cells(1, 1).Row
        intNumEndRowForCheck = Target.cells(1, 1).Offset(0, -2).MergeArea.cells(Target.cells(1, 1).Offset(0, -2).MergeArea.Rows.Count, 1).Row
        
        For intCounter = intNumStartRowForCheck To intNumEndRowForCheck
          Set rngRangeTemp = wsSheet.cells(intCounter, wsSheet.Range("mr_check").Column).MergeArea.cells(1, 1)
          If rngRangeTemp.Value = strMRName And rngRangeTemp.Row = intCounter And _
             rngRangeTemp.Row <> Target.Row And Len(rngRangeTemp.Value) <> 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                   rngRangeTemp.Address & _
                   ")!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
            Target.MergeArea.ClearContents
            strMRName = ""
            strMOName = ""
          End If
        Next
      End If
      
      intCounter = Target.cells(1, 1).Row
      Do While InStr(wsSheet.cells(intCounter, wsSheet.Range("mo_check").Column).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0
          wsSheet.cells(intCounter, wsSheet.Range("oktmo_check").Column).Select
          Selection.ClearContents
          wsSheet.cells(intCounter, wsSheet.Range("mo_check").Column).Select
          Selection.ClearContents
          Selection.Validation.Delete
          If Len(strMOName) > 0 Then
            With Selection.Validation
                          .Add Type:=xlValidateList, _
                               AlertStyle:=xlValidAlertStop, _
                               Operator:=xlBetween, _
                               Formula1:="=" & strMOName
                          .IgnoreBlank = False
                          .InCellDropdown = True
                          .InputTitle = ""
                          .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                          .InputMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                          .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                          .ShowInput = True
                          .ShowError = True
            End With
            Target.cells(1, 1).Offset(0, 1).Select
          Else
            With Selection.Validation
                          .Add Type:=xlValidateTextLength, _
                               AlertStyle:=xlValidAlertStop, _
                               Operator:=xlEqual, Formula1:="0"
                          .IgnoreBlank = False
                          .InCellDropdown = True
                          .InputTitle = ""
                          .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                          .InputMessage = ""
                          .ErrorMessage = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!"
                          .ShowInput = True
                          .ShowError = True
            End With
            Target.cells(1, 1).Select
          End If
          intCounter = intCounter + 1
      Loop
      
      If Len(strMOName) > 0 Then
        modServiceModule.AutoFitMergedCellRowHeight Target
      End If
      
      modServiceModule.PROTECT_SHEET wsSheet, True
      
      GoTo cleanUp
      
    End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "mr_check") And _
     modServiceModule.IsNameExists(wbBook, "mo_check") And _
     modServiceModule.IsNameExists(wbBook, "oktmo_check") Then
    Set ISect = Application.Intersect(Target, wsSheet.Range("mo_check"))
    If Not ISect Is Nothing Then
      
      modServiceModule.UNPROTECT_SHEET wsSheet
      
      ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strMRName = Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Value
      strMOName = Target.cells(1, 1).Value
      If Len(Trim(strMOName)) <> 0 Then
        intNumStartRowForCheck = Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Row
        intNumEndRowForCheck = Target.cells(1, 1).Offset(0, -1).MergeArea.cells(Target.cells(1, 1).Offset(0, -1).MergeArea.Rows.Count, 1).Row
        
        For intCounter = intNumStartRowForCheck To intNumEndRowForCheck
          Set rngRangeTemp = wsSheet.cells(intCounter, wsSheet.Range("mo_check").Column).MergeArea.cells(1, 1)
          If rngRangeTemp.Value = strMOName And rngRangeTemp.Row = intCounter And _
             rngRangeTemp.Row <> Target.Row And Len(rngRangeTemp.Value) <> 0 Then
              MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                     rngRangeTemp.Address & _
                     ")!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
              Target.ClearContents
              strMOName = ""
              strOKTMOValue = ""
          End If
        Next
      End If
      
      intCounter = 2
      Do While intCounter <= wsReestrMOSheet.UsedRange.Rows.Count
        If wsReestrMOSheet.cells(intCounter, 2).Value = Target.cells(1, 1).Value And _
           strMRName = wsReestrMOSheet.cells(intCounter, 1).Value Then
          strOKTMOValue = wsReestrMOSheet.cells(intCounter, 3).Value
          Exit Do
        End If
        intCounter = intCounter + 1
      Loop
      
      Target.cells(1, 1).Offset(0, 1).Select
      Selection.ClearContents
      Selection.Value = strOKTMOValue
      Target.cells(1, 1).Select
      
      Target.EntireRow.AutoFit
      If Target.cells(1, 1).RowHeight < 19 Then Target.cells(1, 1).RowHeight = 19
     
      modServiceModule.PROTECT_SHEET wsSheet, True
      
      GoTo cleanUp
      
    End If
  End If
  
  GoTo cleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  wsSheet.Activate
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Value_Kind_Of_Goods(ByVal wbBook As Workbook)
  
  On Error GoTo cleanUp
        
  If modServiceModule.IsNameExists(wbBook, "main_kinds_of_goods") = False Or _
     modServiceModule.IsNameExists(wbBook, "etc_kind_of_goods") = False Or _
     modServiceModule.IsNameExists(wbBook, "strPublication") = False Then GoTo cleanUp
        
  If LCase(wbBook.Names("main_kinds_of_goods").RefersToRange.cells(1, 1).cells(1, 1).Value) = "|fffd||fffd|" And _
     InStr(1, LCase(wbBook.Names("main_kinds_of_goods").RefersToRange.cells(1, 1).Offset(0, -2).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 And _
     (InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
      bflagExceptionRegion = True) Then
    wbBook.Sheets(gstrIndexSheetName_1).Visible = xlSheetVisible
    wbBook.Sheets(gstrIndexTwoSheetName_1).Visible = xlSheetVisible
  Else
    wbBook.Sheets(gstrIndexSheetName_1).Visible = xlSheetVeryHidden
    wbBook.Sheets(gstrIndexTwoSheetName_1).Visible = xlSheetVeryHidden
  End If
    
  If LCase(wbBook.Names("main_kinds_of_goods").RefersToRange.cells(2, 1).cells(1, 1).Value) = "|fffd||fffd|" And _
     InStr(1, LCase(wbBook.Names("main_kinds_of_goods").RefersToRange.cells(2, 1).Offset(0, -2).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 And _
     (InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
      bflagExceptionRegion = True) Then
    wbBook.Sheets(gstrIndexSheetName_2).Visible = xlSheetVisible
    wbBook.Sheets(gstrIndexTwoSheetName_2).Visible = xlSheetVisible
  Else
    wbBook.Sheets(gstrIndexSheetName_2).Visible = xlSheetVeryHidden
    wbBook.Sheets(gstrIndexTwoSheetName_2).Visible = xlSheetVeryHidden
  End If
    
  If LCase(wbBook.Names("main_kinds_of_goods").RefersToRange.cells(3, 1).cells(1, 1).Value) = "|fffd||fffd|" And _
     InStr(1, LCase(wbBook.Names("main_kinds_of_goods").RefersToRange.cells(3, 1).Offset(0, -2).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 And _
     (InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
      bflagExceptionRegion = True) Then
    wbBook.Sheets(gstrIndexSheetName_3).Visible = xlSheetVisible
    wbBook.Sheets(gstrIndexTwoSheetName_3).Visible = xlSheetVisible
  Else
    wbBook.Sheets(gstrIndexSheetName_3).Visible = xlSheetVeryHidden
    wbBook.Sheets(gstrIndexTwoSheetName_3).Visible = xlSheetVeryHidden
  End If
    
  If LCase(wbBook.Names("etc_kind_of_goods").RefersToRange.cells(1, 1).cells(1, 1).Value) = "|fffd||fffd|" And _
     InStr(1, LCase(wbBook.Names("etc_kind_of_goods").RefersToRange.cells(1, 1).Offset(0, -2).Value), "|fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 And _
     (InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
      bflagExceptionRegion = True) Then
    wbBook.Sheets(gstrIndexSheetName_4).Visible = xlSheetVisible
    wbBook.Sheets(gstrIndexTwoSheetName_4).Visible = xlSheetVisible
  Else
    wbBook.Sheets(gstrIndexSheetName_4).Visible = xlSheetVeryHidden
    wbBook.Sheets(gstrIndexTwoSheetName_4).Visible = xlSheetVeryHidden
  End If

cleanUp:

End Sub

' blnRangeIsVisible - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, False - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strWorkRangeName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Work_With_Range(blnRangeIsVisible As Boolean, _
                                       strWorkRangeName As String)

  On Error GoTo ErrSelect
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
  Dim wsUnionSheet As Worksheet
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim rngTempRange As Range
  
  Dim prblnValueEnableEvents As Boolean
  Dim prblnValueScreenUpdating As Boolean

  prblnValueEnableEvents = Application.EnableEvents
  prblnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  Set wbBook = Application.ActiveWorkbook
  Set wsUnionSheet = wbBook.Sheets(gstrEtUnionSheetName)
  Set rngTempRange = wbBook.Names(strWorkRangeName).RefersToRange
  Set wsSheet = rngTempRange.parent
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  wsSheet.Activate
  
  If wbBook.Names("region_name").RefersToRange.cells(1, 1).Value = strExceptionsRegionOne Then strWorkRangeName = strWorkRangeName & "_SPb"
  
  
  If blnRangeIsVisible = False Then
     
    If Len(Trim(rngTempRange.cells(1, 1).Value)) = 0 Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|.
      wsUnionSheet.Activate
      Application.CutCopyMode = False
      wsUnionSheet.Range("edit_" & strWorkRangeName).Select
      Selection.Copy
      wsSheet.Activate
      rngTempRange.cells(1, 1).EntireRow.Select
      ActiveSheet.Paste
      Application.CutCopyMode = True
      rngTempRange.EntireRow.Hidden = blnRangeIsVisible
      rngTempRange.cells(1, 1).Select
    End If
    
  Else
    
    If Len(Trim(rngTempRange.cells(1, 1).Value)) <> 0 Then
      rngTempRange.Interior.ColorIndex = colorWhite
      rngTempRange.Locked = blnRangeIsVisible
      rngTempRange.EntireRow.Clear
      rngTempRange.EntireRow.Hidden = blnRangeIsVisible
    End If
    
  End If
  
  modServiceModule.PROTECT_SHEET wsSheet, False
  
  GoTo cleanUp
  
ErrSelect:
  Debug.Print Err.Description
  GoTo cleanUp

cleanUp:
  Application.EnableEvents = prblnValueEnableEvents
  Application.ScreenUpdating = prblnValueScreenUpdating

End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Hyperlink_Handler(ByVal Target As Hyperlink, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
 
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  If modHyperlink.blnPrimary_HL_Handler(Target.Range.cells(1, 1), wsSheet) = True Then Exit Sub
  
  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(1, Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") Then
    modSheetMain01.CreatePrintedForm wsSheet.parent
  ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    intDeleteColumnNumber = 4
    If Target.Range.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
      strRangeName = "add_MR_range"
      strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
    ElseIf Target.Range.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
      strRangeName = "add_MO_range"
      strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
      intDeleteColumnNumber = 8
    End If
    intRenumberColumnOffset = 1
   GoTo ProcessHyp
  ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    intDeleteColumnNumber = Target.Range.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  SheetMain01_ProcessHyperlink_Handler Target.Range.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo cleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer)

  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim intCounter As Integer
  Dim strMRName As String
  Dim strMOName As String
  Dim rngRange As Range
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Dim wsTechSheet As Worksheet
  
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  Set wsRanges = wbThis.Sheets("et_union")
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsRanges.Activate
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.name, _
                                          wsActiveSheet.Range("A1"), _
                                          strDeleteString
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    If rngTarget.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
      strMRName = rngTarget.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Value
      If Len(Trim(strMRName)) <> 0 Then
        Set rngRange = wbThis.Names("MR_LIST").RefersToRange
        Set wsTechSheet = rngRange.parent
        strMOName = ""
        intCounter = 2
        Do While intCounter <= rngRange.Rows.Count + 1
          If wsTechSheet.cells(intCounter, 4).Value = strMRName Then
            strMOName = wsTechSheet.cells(intCounter, 5).Value
            Exit Do
          End If
          intCounter = intCounter + 1
        Loop
    
        rngTarget.Offset(-1, 0).Select
        If Len(strMOName) > 0 Then
          Selection.Validation.Delete
          With Selection.Validation
                        .Add Type:=xlValidateList, _
                             AlertStyle:=xlValidAlertStop, _
                             Operator:=xlBetween, _
                             Formula1:="=" & strMOName
                        .IgnoreBlank = False
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        .InputMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        .ShowInput = True
                        .ShowError = True
          End With
        End If
      End If
    
    End If
    rngTarget.Offset(-1, 0).Select
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub

' --------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd|  --
' --------------
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdOrgChoice_Click_Handler()
  frmReestr.Show vbModal
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdUpdateOrgData_Click_Handler(ByVal wsOwnerSheet As Worksheet, _
                                          ByRef cmdUpdateOrgData As CommandButton, _
                                          Optional ByVal blnShowSuccessMessageBox As Boolean = True)

  On Error GoTo ErrHandler
  
  Dim strUpdateReestrResult As String
  Dim strCmdCaption As String
  Dim strResultUpdateInSheet As String
  Dim wbBook As Workbook
  
  Set wbBook = wsOwnerSheet.parent
  
  If Not (cmdUpdateOrgData Is Nothing) Then
    strCmdCaption = cmdUpdateOrgData.caption
  
    cmdUpdateOrgData.caption = STR_CMD_BUTTON_UPDATE_IS_IN_PROGRESS_CAPTION
    Application.Wait (Now + TimeValue("0:00:1")) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  
  Application.ScreenUpdating = False
    
  Dim strRegionName As String
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If wbBook.Names("region_name").RefersToRange.Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    strRegionName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  Else
    strRegionName = wbBook.Names("region_name").RefersToRange.Value
  End If
  
  strUpdateReestrResult = modHTTPServerCaller.Update_Organization_List(modGlobals.STR_REESTR_SHEET_NAME, _
                                                                       strRegionName, _
                                                                       modGlobals.LNG_AS_ACTIVITY_SPHERE, _
                                                                       wbBook)
  
  Application.ScreenUpdating = True
  
  If Not (cmdUpdateOrgData Is Nothing) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cmdUpdateOrgData.caption = strCmdCaption
    wsOwnerSheet.Activate
  End If
  
  If strUpdateReestrResult = modHTTPGlobals.STR_UPDATE_SUCCESS Then
  
    Application.ScreenUpdating = False
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    modfrmReestr.Define_Range modGlobals.STR_REESTR_ORG_SHEET_NAME, wbBook
    
    If modServiceModule.IsNameExists(wbBook, STR_RANGE_NAME) = True Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    Else
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    End If
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    End If
    
  Else
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
    End If
    
  End If
  
  wsOwnerSheet.Activate
  
  If modServiceModule.IsNameExists(wbBook, "LastUpdateDate_ReestrOrg") = True Then
    modServiceModule.UNPROTECT_SHEET wsOwnerSheet
    wbBook.Application.EnableEvents = False
    Application.Range("LastUpdateDate_ReestrOrg").Value = strResultUpdateInSheet
    wbBook.Application.EnableEvents = True
    modServiceModule.PROTECT_SHEET wsOwnerSheet, True
  End If
  
  Application.ScreenUpdating = True
    
  
  GoTo cleanUp

ErrHandler:
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  GoTo cleanUp
cleanUp:
  If Not (cmdUpdateOrgData Is Nothing) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cmdUpdateOrgData.caption = strCmdCaption
  End If
End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub cmdUpdateReestrMO_Click_Handler(ByVal wsOwnerSheet As Worksheet, _
                                           ByRef cmdUpdateReestrMO As CommandButton, _
                                           Optional ByVal blnShowSuccessMessageBox As Boolean = True)

  On Error GoTo ErrHandler
  
  Dim strUpdateReestrResult As String
  Dim strCmdCaption As String
  Dim strResultUpdateInSheet As String
  Dim wbBook As Workbook
  
  Set wbBook = wsOwnerSheet.parent
  
  If Not (cmdUpdateReestrMO Is Nothing) Then
    strCmdCaption = cmdUpdateReestrMO.caption
  
    cmdUpdateReestrMO.caption = STR_CMD_BUTTON_UPDATE_IS_IN_PROGRESS_CAPTION
    Application.Wait (Now + TimeValue("0:00:1")) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  
  Application.ScreenUpdating = False
    
  Dim strRegionName As String
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If wbBook.Names("region_name").RefersToRange.Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    strRegionName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  Else
    strRegionName = wbBook.Names("region_name").RefersToRange.Value
  End If
  
  strUpdateReestrResult = modHTTPServerCaller.Update_MRMO_List(modGlobals.STR_REESTR_MO_SHEET_NAME, _
                                                               strRegionName, _
                                                               wbBook)
  
  Application.ScreenUpdating = True
  
  If Not (cmdUpdateReestrMO Is Nothing) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cmdUpdateReestrMO.caption = strCmdCaption
    wsOwnerSheet.Activate
  End If
  
  If strUpdateReestrResult = modHTTPGlobals.STR_UPDATE_SUCCESS Then
  
    Application.ScreenUpdating = False
    
    modReestrMO.Shape_MR_MO_OKTMO_List wbBook.Worksheets(modGlobals.STR_REESTR_MO_SHEET_NAME)
    
    If modServiceModule.IsNameExists(wbBook, "LIST_MR_MO_OKTMO") = True Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|: " & CStr(Now)
    Else
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    End If
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    End If
    
  Else
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
    End If
    
  End If
  
  wsOwnerSheet.Activate
  If modServiceModule.IsNameExists(wbBook, "LastUpdateDate_MO") = True Then
    modServiceModule.UNPROTECT_SHEET wsOwnerSheet
    wbBook.Application.EnableEvents = False
    Application.Range("LastUpdateDate_MO").Value = strResultUpdateInSheet
    wbBook.Application.EnableEvents = True
    modServiceModule.PROTECT_SHEET wsOwnerSheet, True
  End If
    
    Application.ScreenUpdating = True
  
  GoTo cleanUp

ErrHandler:
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  GoTo cleanUp
cleanUp:
  If Not (cmdUpdateReestrMO Is Nothing) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cmdUpdateReestrMO.caption = strCmdCaption
  End If
End Sub

' ------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' ------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub CreatePrintedForm(ByVal wbBookTemplate As Workbook)
  
  Dim lngCounterRow As Integer
  Dim lngFirstColumnHead As Integer
  Dim lngEndColumnHead As Integer
  
  Dim strSavedFileName As String
  Dim strNameCopySheet As String
  Dim strStartCellPrintArea As String
  Dim strEndCellPrintArea As String
  Dim strCenterFooter As String
  Dim strOrientationPage As String
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim vbResult As VbMsgBoxResult
  
  Dim wbBookForPrint As Workbook
  
  Dim wsActiveSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim wsPrintSheet As Worksheet
  
  If wbBookTemplate Is Nothing Then
    GoTo cleanUp
  End If
   
  Set wsActiveSheet = wbBookTemplate.ActiveSheet
  
  If wsActiveSheet Is Nothing Then
    GoTo cleanUp
  End If
  
  On Error GoTo ErrHandler
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strSavedFileName = Left(wbBookTemplate.name, _
                          InStr(1, wbBookTemplate.name, ".xls") - 1) & _
                     "_ForPrint" & "(" & Format(Now, "dd_mm_yyyy HH_MM") & ")"
    
  Application.EnableEvents = False
  Application.DisplayAlerts = False
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  vbResult = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
  If vbResult = vbYes Then
    strCenterFooter = _
                     "&""Tahoma,|fffd||fffd||fffd||fffd||fffd||fffd||fffd|""&8" & Chr(10) & "" & _
                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & _
                     wbBookTemplate.CustomDocumentProperties("Version") & _
                     ", &D" & " |fffd|. "
                     
    If Len(Trim(wbBookTemplate.Names("responsible_post").RefersToRange.Value)) <> 0 Or _
       Len(Trim(wbBookTemplate.Names("responsible_FIO").RefersToRange.Value)) <> 0 Then
     strCenterFooter = strCenterFooter & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & _
                       wbBookTemplate.Names("responsible_post").RefersToRange.Value & " " & _
                       wbBookTemplate.Names("responsible_FIO").RefersToRange.Value  '& Chr(10)
    End If
  Else
    strCenterFooter = ""
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Not (modSheetMain01.CreateXlBook(strSavedFileName, wbBookTemplate.Path)) Then GoTo ErrHandler
  
  Workbooks.Open Filename:=wbBookTemplate.Path & "\" & strSavedFileName & ".xls"
                              
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set wbBookForPrint = Application.ActiveWorkbook
  
  wbBookTemplate.Activate
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  For Each wsTempSheet In wbBookTemplate.Sheets
    If wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.Tab.ColorIndex <> modGlobals.colorLightBrown And _
       wsTempSheet.Visible <> xlSheetVeryHidden And _
       wsTempSheet.Visible <> xlSheetHidden Then
         
         strNameCopySheet = wsTempSheet.name
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         wbBookForPrint.Activate
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
         If strNameCopySheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
           Set wsPrintSheet = wbBookForPrint.Sheets.Item(1)
         Else
           Set wsPrintSheet = wbBookForPrint.Sheets.Add(After:=Worksheets(Worksheets.Count))
         End If
         wsPrintSheet.Activate
         wsPrintSheet.name = strNameCopySheet
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/
         wbBookTemplate.Activate
         wsTempSheet.Activate
         wsTempSheet.cells.Select
         Application.CutCopyMode = False
         Selection.Copy
          
         ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| :)
         wbBookForPrint.Activate
         wsPrintSheet.Activate
         wsPrintSheet.cells.Select
         Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                SkipBlanks:=False, Transpose:=False
         Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
                                SkipBlanks:=False, Transpose:=False
         Application.CutCopyMode = True
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
         ' |fffd||fffd||fffd||fffd||fffd||fffd|
         For Each rngCell In rngRange
           
           If rngCell.cells(1, 1).Interior.ColorIndex = modGlobals.colorPaleBlue And rngCell.cells(1, 1).Address = rngCell.MergeArea.cells(1, 1).Address Then
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
             strStartCellPrintArea = rngCell.cells(1, 1).Offset(-3, -1).Address
             
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             lngFirstColumnHead = rngCell.cells(1, 1).Column
             lngEndColumnHead = rngCell.cells(1, rngCell.MergeArea.Columns.Count).Column
           ElseIf InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
             rngCell.cells(1, 1).Value = vbNullString
             rngCell.cells(1, 1).Offset(-1, 0).Value = vbNullString
             rngCell.cells(1, 1).Offset(-1, 0).EntireRow.Hidden = True
             rngCell.cells(1, 1).EntireRow.Hidden = True
           ElseIf (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 And _
                   rngCell.cells(1, 1).Value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
                  InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"/ |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             If InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
               rngCell.cells(1, 2).Offset(1, 0).Select
               Selection.EntireColumn.Hidden = True
             Else
               rngCell.cells(1, 1).Select
               Selection.EntireColumn.ColumnWidth = 5
             End If
             rngCell.cells(1, 1).Value = vbNullString
           ElseIf (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 And _
                   rngCell.cells(1, 1).Value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
                  InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
             rngCell.cells(1, 1).Value = vbNullString
             rngCell.cells(1, 1).EntireRow.Hidden = True
           ElseIf InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = 1 Then
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             rngCell.cells(1, 1).Value = vbNullString
           End If
            
         Next rngCell
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         For lngCounterRow = ActiveCell.SpecialCells(xlLastCell).Row To 1 Step -1
          If (wsPrintSheet.cells(lngCounterRow, lngFirstColumnHead).Borders(xlEdgeBottom).LineStyle = xlContinuous And _
             wsPrintSheet.cells(lngCounterRow, lngFirstColumnHead).Borders(xlEdgeBottom).Weight = xlMedium) Or _
             (wsPrintSheet.cells(lngCounterRow, lngFirstColumnHead).Borders(xlEdgeTop).LineStyle = xlContinuous And _
             wsPrintSheet.cells(lngCounterRow, lngFirstColumnHead).Borders(xlEdgeTop).Weight = xlMedium) Then
               strEndCellPrintArea = wsPrintSheet.cells(lngCounterRow + 2, lngEndColumnHead + 1).Address
               Exit For
          End If
         Next lngCounterRow
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         wsPrintSheet.cells.Select
         With Selection.Interior
             .pattern = xlNone
             .ColorIndex = modGlobals.colorWhite
         End With
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| > |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| < |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         If wsPrintSheet.Range(strStartCellPrintArea & ":" & strEndCellPrintArea).Width > _
            wsPrintSheet.Range(strStartCellPrintArea & ":" & strEndCellPrintArea).Height Then
           strOrientationPage = xlLandscape         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         Else
           strOrientationPage = xlPortrait          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         End If
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         wsPrintSheet.Range(strStartCellPrintArea & ":" & strEndCellPrintArea).Select
         With wsPrintSheet.PageSetup
             .PrintArea = strStartCellPrintArea & ":" & strEndCellPrintArea
             .CenterFooter = strCenterFooter
             .Orientation = strOrientationPage
             .Zoom = False
             .FitToPagesWide = 1
''             .FitToPagesTall = 1000
             .FitToPagesTall = False
         End With
''
''         wsPrintSheet.Range(strStartCellPrintArea & ":" & strEndCellPrintArea).Select
''         wsPrintSheet.PageSetup.PrintArea = strStartCellPrintArea & ":" & strEndCellPrintArea
         
         wsPrintSheet.Range("A1").Activate
         wsPrintSheet.Protect Password:=gPASSWORD, DrawingObjects:=True, _
                              Contents:=True, Scenarios:=True, _
                              AllowFormattingColumns:=True, AllowFormattingRows:=True
         
         wbBookTemplate.Activate
         wsTempSheet.Range("A1").Activate
     
     End If
     
  Next wsTempSheet
  
  
  wbBookForPrint.Activate
''
''  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''  modSheetMain01.RemoveNamesInActiveWorkbook wbBookForPrint
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  modSheetMain01.BreakLinksInActiveWorkbook wbBookForPrint
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Shapes, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| :)
  modSheetMain01.UpdateFlagForPrintShapes wbBookForPrint
  
''  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''  wbBookForPrint.Close True
  wbBookForPrint.Save
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, _
         modGlobals.STR_MSGBOX_INFORMATION_TITLE
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wbBookTemplate.Activate
  wsActiveSheet.Activate
  
  Application.EnableEvents = True
  Application.DisplayAlerts = True
  
  GoTo Success

Success:
  GoTo cleanUp
ErrHandler:
  wbBookTemplate.Activate
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, _
         modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo cleanUp
cleanUp:
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strWbBookName |fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strWbBookDirName. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - False.
'
Public Function CreateXlBook(ByVal strWbBookName As String, _
                             ByVal strWbBookDirName As String) As Boolean

  ' MS Excel hidden instance
  Dim objXLApp As Object
  Dim wbBookNew As Workbook
  
  If Len(Trim(strWbBookName)) = 0 Or _
     Len(Trim(strWbBookDirName)) = 0 Then
    GoTo cleanUp
  End If

  CreateXlBook = False

  Set objXLApp = CreateObject("Excel.Application")
  If objXLApp Is Nothing Then GoTo cleanUp

  ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  objXLApp.SheetsInNewWorkbook = 1

  Set wbBookNew = objXLApp.Workbooks.Add
  If wbBookNew Is Nothing Then GoTo cleanUp

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If vbNullString = Dir(strWbBookDirName, vbDirectory) Then GoTo cleanUp
  
  wbBookNew.SaveAs Filename:=strWbBookDirName & "\" & strWbBookName & ".xls", FileFormat:=ThisWorkbook.FileFormat
  
  CreateXlBook = True

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set wbBookNew = Nothing
  objXLApp.Quit
  Set objXLApp = Nothing
  CreateXlBook = True
  
cleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Shapes |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub UpdateFlagForPrintShapes(wbBook As Workbook)
  On Error Resume Next
  
  Dim wsSheet As Worksheet
  Dim shShape As Shape
  Dim strMsgSheets As String
  
  strMsgSheets = vbNullString
  
  For Each wsSheet In wbBook.Sheets
    
    If wsSheet.name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      wbBook.Sheets(wsSheet.name).cmdOrganizationChoice.Delete
      wbBook.Sheets(wsSheet.name).cmdUpdateReestrMO.Delete
    End If
    
    For Each shShape In wsSheet.Shapes
      If shShape.Type = msoPicture Then
       shShape.Delete
      End If
    Next shShape
    
  Next wsSheet

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub RemoveNamesInActiveWorkbook(wbBook As Workbook)

  Dim rngName As name

  For Each rngName In wbBook.Names
    rngName.Delete
  Next rngName
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub BreakLinksInActiveWorkbook(wbBook As Workbook)

  Dim astrLinks As Variant
  Dim lnk
  Dim intIndex As Integer
  
  astrLinks = wbBook.LinkSources(Type:=xlLinkTypeExcelLinks)
  
  If Not IsEmpty(astrLinks) Then
    For intIndex = 1 To UBound(astrLinks)
      wbBook.BreakLink name:=astrLinks(intIndex), Type:=xlLinkTypeExcelLinks
    Next intIndex
  End If
  
End Sub
Attribute VB_Name = "modSheetMain02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain02_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain02_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modHyperlink.Worksheet_General_FollowHyperlink Target, Target.Range.parent, "add_INDEX_range"
End Sub

Public Sub SheetMain02_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Public Sub SheetMain02_Worksheet_SelectionChange(ByVal Target As Range)

End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain02_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  
  Dim strGoToAddress As String

  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "datePrice") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "periodPrice") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("datePrice"), _
                                                           wsSheet.Range("periodPrice")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).Value, ".")(0)
     intMonth = Split(Target.cells(1, 1).Value, ".")(1)
     intYear = Split(Target.cells(1, 1).Value, ".")(2)
    Else
     intDay = 0
    End If
 
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  
  End If
  
  GoTo cleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating

End Sub
Attribute VB_Name = "modSheetMain03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain03_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain03_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain03_Hyperlink_Handler Target, Target.Range.parent
End Sub

Public Sub SheetMain03_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Public Sub SheetMain03_Worksheet_SelectionChange(ByVal Target As Range)

End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain03_Hyperlink_Handler(ByVal Target As Hyperlink, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strEndRangeName As String         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  If modHyperlink.blnPrimary_HL_Handler(Target.Range, wsSheet) = True Then GoTo cleanUp
  
  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    strEndRangeName = Right(wsSheet.CodeName, 2)
    intDeleteColumnNumber = 14
    strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Right(Target.Range.cells(1, 1).Value, Len(Target.Range.cells(1, 1).Value) - _
                      Len("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    intRenumberColumnOffset = 0
    strRangeName = "add_INDEX_2_RECORD_range"
    If InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = -1
      If Target.Range.cells(1, 1).Row < wsSheet.Range("pointTwo" & strEndRangeName).Row Then
        strRangeName = "add_INDEX_2_SUPPLIER_range" & strEndRangeName
      Else
        strRangeName = "add_INDEX_2_SUPPLIER_2_range" & strEndRangeName
      End If
      intDeleteColumnNumber = 4
    ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = 3
      If Target.Range.cells(1, 1).Row < wsSheet.Range("pointTwo" & strEndRangeName).Row Then
        strRangeName = "add_INDEX_2_ACQUISITION_range" & strEndRangeName
      Else
        strRangeName = "add_INDEX_2_ACQUISITION_2_range" & strEndRangeName
      End If
      intDeleteColumnNumber = 4
    End If
    GoTo ProcessHyp
  ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
    intDeleteColumnNumber = Target.Range.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 0
    If InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = 1
    ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = 3
    End If
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  SheetMain07_ProcessHyperlink_Handler Target.Range.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo cleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer)
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  Set wsRanges = wbThis.Sheets("et_union")
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsRanges.Activate
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.name, _
                                      wsActiveSheet.Range("A1"), _
                                      strDeleteString
      
    If Abs(intRenumberColumnOffset) = 1 Then
      rngTarget.Offset(0, intRenumberColumnOffset).Select
      Selection.Offset(-1, 0).Select
      
      modServiceModule.RENUMBER_ADD_CELLS Selection
    End If
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    If Abs(intRenumberColumnOffset) = 1 Then
      modServiceModule.RENUMBER_REMOVE_CELLS rngTarget.Offset(0, intRenumberColumnOffset).Column, _
                                             rngTarget.Offset(0, intRenumberColumnOffset).Row, _
                                             rngTarget.Offset(0, intRenumberColumnOffset).cells(1, 1), _
                                             rngTarget.parent
    End If
    
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain03_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  
  Dim strGoToAddress As String

  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "datePrice") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "periodPrice") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("datePriceTwo"), _
                                                           wsSheet.Range("periodPriceTwo")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).Value, ".")(0)
     intMonth = Split(Target.cells(1, 1).Value, ".")(1)
     intYear = Split(Target.cells(1, 1).Value, ".")(2)
    Else
     intDay = 0
    End If
 
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  
  End If
  
  GoTo cleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating

End Sub

Attribute VB_Name = "modSheetMain04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain04_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain04_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modHyperlink.Worksheet_General_FollowHyperlink Target, Target.Range.parent, "add_HYPERLINK_range"
End Sub

Public Sub SheetMain04_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain04_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain04_Worksheet_SelectionChange(ByVal Target As Range)

End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain04_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISectWebsite
  
  Dim strGoToAddress As String

  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "Date_of_publication") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "Website_address_internet") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, wsSheet.Range("Date_of_publication"))
       Set ISectWebsite = Application.Intersect(Target, wsSheet.Range("Website_address_internet"))
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
     
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).Value, ".")(0)
     intMonth = Split(Target.cells(1, 1).Value, ".")(1)
     intYear = Split(Target.cells(1, 1).Value, ".")(2)
    Else
     intDay = 0
    End If
    
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  ElseIf (Target.cells(1, 1).Interior.ColorIndex = colorYellow Or _
          Target.cells(1, 1).Interior.ColorIndex = colorCyan) And _
         (Not ISectWebsite Is Nothing) And _
         Len(Trim(Target.cells(1, 1).Value)) <> 0 Then                           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    modServiceModule.UNPROTECT_SHEET wsSheet
    strGoToAddress = Target.cells(1, 1).Value
    If InStr(strGoToAddress, "www") <> 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "http://" & strGoToAddress
      If InStr(strGoToAddress, "http") <> 0 Or _
         InStr(strGoToAddress, "ftp") <> 0 Then
        If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd|"") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd|"")?", _
           vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
             On Error GoTo ErrGoToHypperlink
             wbBook.FollowHyperlink strGoToAddress
             On Error GoTo ErrHandler
             Cancel = True
        End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  
  End If
  
  GoTo cleanUp
  
ErrGoToHypperlink:
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modInternetConnectionState.blnIsOnLine = False Then
    modServiceModule.PROTECT_SHEET wsSheet, True
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
  Else
    modServiceModule.PROTECT_SHEET wsSheet, True
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
  End If
  modServiceModule.PROTECT_SHEET wsSheet, True
  GoTo cleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating

End Sub
Attribute VB_Name = "modSheetMain05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain05_Worksheet_Change(ByVal Target As Range)

End Sub

Public Sub SheetMain05_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

End Sub

Public Sub SheetMain05_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Public Sub SheetMain05_Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "modSheetMain07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain07_Worksheet_Change(ByVal Target As Range)
  SheetMain07_Change_Handler Target
End Sub

Public Sub SheetMain07_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain07_Hyperlink_Handler Target, Target.Range.parent
End Sub

Public Sub SheetMain07_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain07_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain07_Worksheet_SelectionChange(ByVal Target As Range)

End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_Change_Handler(Target As Range)
  
  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
    
  Dim intNRow As Integer
  Dim intNColumn As Integer
  Dim intRowHeight As Integer
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim ISect
    
  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wbBook = Me.parent
  Set wsSheet = Target.parent
    
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  intNRow = Target.cells(1, 1).Row
  intNColumn = Target.cells(1, 1).Column
  
  If Target.cells(1, 1).Row > 6 Then
    If CStr(wsSheet.cells(Target.cells(1, 1).Row, 5).Value) = CStr(5) Or _
       CStr(wsSheet.cells(Target.cells(1, 1).Row, 5).Value) = CStr(6) Then
      Target.cells(1, 1).RowHeight = 30
    ElseIf Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 20 Then Target.cells(1, 1).RowHeight = 20
    End If
  End If
    
  modServiceModule.PROTECT_SHEET wsSheet, True
  GoTo cleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_Hyperlink_Handler(ByVal Target As Hyperlink, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  Dim rngRange As Range
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  Dim rngOne As Range
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  If modHyperlink.blnPrimary_HL_Handler(Target.Range.cells(1, 1), wsSheet) = True Then Exit Sub
  
  
  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  If Target.Range.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    wsSheet.Columns(intNumColumn).Insert
    wsSheet.Activate
    wsSheet.Range("add_event").Copy
    wsSheet.Select
    wsSheet.cells(wsSheet.Range("addHypEvent").Row, intNumColumn).Select
    wsSheet.Paste
    wsSheet.cells(3, intNumColumn).Interior.ColorIndex = modGlobals.colorYellow
    
    GoTo numberingHorizontal
    
  ElseIf Target.Range.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    wsSheet.Columns(intNumColumn).Delete
    
    GoTo numberingHorizontal
    
  ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
         InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
         
    intDeleteColumnNumber = 4
    strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Right(Target.Range.cells(1, 1).Value, _
                                        Len(Target.Range.cells(1, 1).Value) - _
                                        Len("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    intRenumberColumnOffset = -1
    If InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      strRangeName = "add_source_of_funding"
    ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      strRangeName = "add_index"
    End If
    GoTo ProcessHyp
    
  ElseIf InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
         InStr(Target.Range.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
  
    intDeleteColumnNumber = Target.Range.cells(1, 1).Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
    
  End If
    
numberingHorizontal:
  If intNumColumn <> wsSheet.Range("addHypEvent").cells(1, 1).Column Then
    If intNumColumn = wsSheet.Range("inv_ch5_6").cells(1, 1).Column + 1 Then
      wsSheet.cells(wsSheet.Range("addHypEvent").Row, intNumColumn) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
      wsSheet.cells(wsSheet.Range("addHypEvent").Row + 1, intNumColumn) = "4"
      intNumColumn = intNumColumn + 1
    End If
    If wsSheet.Range("addHypEvent").cells(1, 1).Column <> wsSheet.Range("inv_ch5_6").cells(1, 1).Column + 2 Then
      wsSheet.cells(wsSheet.Range("addHypEvent").Row, intNumColumn - 1).Select
      Selection.AutoFill Destination:=wsSheet.Range(wsSheet.cells(wsSheet.Range("addHypEvent").Row, _
                                                                  intNumColumn - 1), _
                                                    wsSheet.Range("addHypEvent").cells(1, 1).Offset(0, -1)), Type:=xlFillDefault
      wsSheet.cells(wsSheet.Range("addHypEvent").Row + 1, intNumColumn - 1).Select
      Selection.AutoFill Destination:=wsSheet.Range(wsSheet.cells(wsSheet.Range("addHypEvent").Row + 1, _
                                                                  intNumColumn - 1), _
                                                    wsSheet.Range("addHypEvent").cells(1, 1).Offset(1, -1)), Type:=xlFillDefault
    End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each rngOne In wsSheet.Range("inv_ch5_6").cells
    If wsSheet.Range("addHypEvent").cells(1, 1).Column > wsSheet.Range("inv_ch5_6").cells(1, 1).Column + 1 Then
      If rngOne.Interior.ColorIndex = colorCyan Then
        rngOne.FormulaR1C1 = "=SUM(RC[1]:RC[" & intNumColumn - 8 & "])"
        rngOne.Interior.ColorIndex = colorGreen
        rngOne.Locked = True
      End If
    Else
      If rngOne.Interior.ColorIndex = colorGreen Then
        rngOne.ClearContents
        rngOne.Interior.ColorIndex = colorCyan
        rngOne.Locked = False
      End If
    End If
  Next
  
  GoTo cleanUp
    
ProcessHyp:
  SheetMain07_ProcessHyperlink_Handler Target.Range.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset
  GoTo cleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  modServiceModule.PROTECT_SHEET wsSheet, False
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub


' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer)
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim wbThis As Workbook
  Dim wsActiveSheet As Worksheet
  
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    wsActiveSheet.Rows("1:6").Hidden = False
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsActiveSheet.Activate
    wsActiveSheet.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.name, _
                                          wsActiveSheet.Range("A1"), _
                                          strDeleteString
      
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.Offset(-1, 0).Select
      
    modServiceModule.RENUMBER_ADD_CELLS Selection
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    modServiceModule.RENUMBER_REMOVE_CELLS rngTarget.Offset(0, intRenumberColumnOffset).Column, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).Row, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).cells(1, 1), _
                                           rngTarget.parent
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
  wsActiveSheet.Rows("1:6").Hidden = True

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISect
  
  Dim strGoToAddress As String

  blnValueEnableEvents = Application.EnableEvents
  blnValueScreenUpdating = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "dateStartIPR") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "dateEndIPR") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("dateStartIPR"), _
                                                           wsSheet.Range("dateEndIPR")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
      
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).Value, ".")(0)
     intMonth = Split(Target.cells(1, 1).Value, ".")(1)
     intYear = Split(Target.cells(1, 1).Value, ".")(2)
    Else
     intDay = 0
    End If

    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ISect = Application.Intersect(Target, wsSheet.Range("dateStartIPR"))
    
    If Not ISect Is Nothing Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Len(Trim(Target.cells(1, 1).Offset(1, 0).Value)) <> 0 Then
        If CDate(Target.cells(1, 1).Value) > CDate(Target.cells(1, 1).Offset(1, 0).Value) Then
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                 vbCritical, _
                 STR_MSGBOX_WARNING_TITLE
          Target.cells(1, 1).ClearContents
        End If
      End If
    Else
      Set ISect = Application.Intersect(Target, wsSheet.Range("dateEndIPR"))
      If Not ISect Is Nothing Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(Target.cells(1, 1).Offset(-1, 0).Value)) <> 0 Then
          If CDate(Target.cells(1, 1).Value) < CDate(Target.cells(1, 1).Offset(-1, 0).Value) Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
                   vbCritical, _
                   STR_MSGBOX_WARNING_TITLE
            Target.cells(1, 1).ClearContents
          End If
        End If
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo cleanUp
  
  End If
  
  GoTo cleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo cleanUp
  
cleanUp:
  Application.EnableEvents = blnValueEnableEvents
  Application.ScreenUpdating = blnValueScreenUpdating

End Sub


Attribute VB_Name = "modTitleSheetHeaders"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Function fil_inn(pr As String)

If pr = "|fffd||fffd||fffd|" Then
    fil_inn = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd|" Then
    fil_inn = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_inn = "|fffd||fffd||fffd| ???"
End If

End Function

Function fil_kpp(pr As String)

If pr = "|fffd||fffd||fffd|" Then
    fil_kpp = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd|" Then
    fil_kpp = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_kpp = "|fffd||fffd||fffd| ???"
End If

End Function

Function fil_mo(pr As String)

If pr = "|fffd||fffd|" Then
    fil_mo = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd||fffd|" Then
    fil_mo = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_mo = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ???"
End If

End Function

Function fil_org(pr As String)

If pr = "|fffd||fffd|" Then
    fil_org = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd||fffd|" Then
    fil_org = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_org = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ??? |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End If

End Function

Function fil_mr(pr As String)

If pr = "|fffd||fffd|" Then
    fil_mr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd||fffd|" Then
    fil_mr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_mr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ???"
End If

End Function

Attribute VB_Name = "modUpdTemplLogger"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdClearLog, 1, 0, MSForms, CommandButton"
Option Explicit

Public Sub Logger_Init(ByVal wbBook As Workbook)
  Log_Clear wbBook
End Sub

Public Sub Add_String(ByVal strMessage As String, _
                      ByVal wbBook As Workbook, _
                      ByVal strExtendedStatus As String)
  If strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_ERROR Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_ERROR
  ElseIf strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_WARNING Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_WARNING
  ElseIf strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_INFO Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_INFO
  End If
  Add_Log_Message strMessage, strExtendedStatus, wbBook
End Sub

Private Sub Log_Clear(ByVal wbBook As Workbook)

  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim blnScreenUpdatingPreference As Boolean
  blnScreenUpdatingPreference = wbBook.Application.ScreenUpdating
  
  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, wbBook) = True Then
    Set wsSheet = wbBook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    If wsSheet.UsedRange.Rows.Count > 1 Then
      wbBook.Application.ScreenUpdating = False
      modServiceModule.UNPROTECT_SHEET wsSheet
      Set rngRange = wsSheet.Range(wsSheet.cells(2, 1), _
                                   wsSheet.cells(wsSheet.UsedRange.Rows.Count, _
                                                 wsSheet.UsedRange.Columns.Count))
      rngRange.EntireRow.Delete
      modServiceModule.PROTECT_SHEET wsSheet, True, , True
    End If
  End If

  GoTo cleanUp

ErrHandler:
  GoTo cleanUp
cleanUp:
  wbBook.Application.ScreenUpdating = blnScreenUpdatingPreference
End Sub

Private Sub Add_Log_Message(ByVal strMessage As String, _
                            ByVal strStatus As String, _
                            ByVal wbBook As Workbook)

  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim lngLastUsedRow As Long
  Dim blnScreenUpdatingPreference As Boolean
  blnScreenUpdatingPreference = wbBook.Application.ScreenUpdating
  
  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, wbBook) = True Then
    Set wsSheet = wbBook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    wbBook.Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    lngLastUsedRow = wsSheet.UsedRange.Rows.Count
    wsSheet.cells(lngLastUsedRow + 1, 1).Value = Now()
    wsSheet.cells(lngLastUsedRow + 1, 2).Value = strMessage
    wsSheet.cells(lngLastUsedRow + 1, 3).Value = strStatus
    modServiceModule.PROTECT_SHEET wsSheet, True, , True
    GoTo cleanUp
  End If

  GoTo cleanUp

ErrHandler:
  GoTo cleanUp
cleanUp:
  wbBook.Application.ScreenUpdating = blnScreenUpdatingPreference
End Sub

Private Sub cmdClearLog_Click()
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| STR_LOGGING_SHEET_NAME
  modUpdTemplLogger.Logger_Init ThisWorkbook
End Sub
Attribute VB_Name = "modUpdTemplMain"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Private gstrNewVersion As String
Private gstrTemplateCode As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Public Sub Check_Update_Execution(ByVal wbBook As Workbook)
  Check_Updates wbBook, False
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdCheckForUpdates_Click_Handler()
  Check_Updates ThisWorkbook, True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Check_Updates(ByVal wbBook As Workbook, _
                         Optional blnShowMessage As Boolean = True)
  
  On Error GoTo ErrHandler
  
  Dim strNewVersion As String
  Dim strTemplateCode As String

  Dim tviResultSet As TVersionInfo
  Dim vbResult As VbMsgBoxResult
  Dim strCurrentVersion As String
  
  If wbBook Is Nothing Then
    GoTo cleanUp
  End If
  
  strTemplateCode = modServiceModule.varGetDocumentProperty(ThisWorkbook, "Version")
  gstrTemplateCode = strTemplateCode
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  lbInfoVersion_Clear
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modInternetConnectionState.blnIsOnLine = False Then
  
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    GoTo cleanUp
    
  ElseIf Len(strTemplateCode) = 0 Then
  
    lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    GoTo cleanUp
    
  Else
  
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
    Application.Wait (Now + TimeValue("0:00:1"))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    tviResultSet = modUpd_Templ_Caller.Query_Last_Version_Info(strTemplateCode, _
                                                               blnShowMessage)
    
    strNewVersion = tviResultSet.strVersion
    gstrNewVersion = strNewVersion
    
    If Len(strNewVersion) = 0 Then
    
      lbInfo_AddInfo "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & _
                     strTemplateCode & "!", STR_FORM_STATUS_INFO
      GoTo cleanUp
      
    Else ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
      strCurrentVersion = CStr(frmUpdate.txtCurrentVersion.Text)
      
      If Len(strCurrentVersion) = 0 Then
        lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_ERROR
        GoTo cleanUp
      End If
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If blnIs_New_Version(strCurrentVersion, strNewVersion) = False Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & strCurrentVersion & _
                       " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_INFO
        GoTo cleanUp
      End If
      
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & tviResultSet.strVersion, STR_FORM_STATUS_INFO
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & tviResultSet.strDescription, STR_FORM_STATUS_INFO
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(tviResultSet.lngFileSize) & " |fffd||fffd||fffd||fffd|", STR_FORM_STATUS_INFO
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      frmUpdate.chkUpdateIsAvailable.Value = True
      
      vbResult = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & tviResultSet.strVersion & Chr(13) & Chr(13) & _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Chr(13) & _
                        CStr(tviResultSet.strDescription) & Chr(13) & Chr(13) & _
                        "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(tviResultSet.lngFileSize) & " |fffd||fffd||fffd||fffd|" & Chr(13) & _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE)

      If vbResult = vbYes Then
      
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
        
        Init_Update ThisWorkbook, strTemplateCode, strNewVersion
      
      Else
      
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_WARNING
        
      End If

    End If
  
  End If

  GoTo Success

ErrInternetConnect:


Success:
  GoTo cleanUp
ErrHandler:
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_ERROR
  GoTo cleanUp
cleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub cmdPerformUpdate_Click_Handler()
  
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
  
  Init_Update ThisWorkbook, gstrTemplateCode, gstrNewVersion
  
End Sub

Public Sub UserForm_Initialize_Handler()
  
  frmUpdate.txtCurrentVersion.Text = modServiceModule.varGetDocumentProperty(ActiveWorkbook, "CurrentVersion")
  lbInfoVersion_Clear
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| """ & _
                 frmUpdate.cmdCheckForUpdates.caption & _
                 """, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                 STR_FORM_STATUS_INFO, False
  ' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  frmUpdate.chkUpdateIsAvailable.Value = False
  
End Sub

Private Sub Init_Update(ByRef wbBook As Workbook, _
                        ByVal strTemplateCode As String, _
                        ByVal strNewVersion As String)
  
  On Error GoTo ErrHandler
  
  Dim strBackupFileName As String
  Dim strCurrentWBPath As String
  Dim strCurrentWBName As String
  
  Dim wbBackupWorkbook As Workbook
  Dim wbUpdatingWorkbook As Workbook
  
  Dim strWorkbookName As String
  Dim strFileExtension As String
  Dim lngFileFormatNum As Long
  
  If wbBook Is Nothing Or _
     Len(strTemplateCode) = 0 Or _
     Len(strNewVersion) = 0 Then
    GoTo cleanUp
  End If
  
  Set wbBackupWorkbook = wbBook
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strBackupFileName = Application.GetSaveAsFilename(wbBackupWorkbook.name, , , _
                                                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")

  If CStr(strBackupFileName) = "False" Then
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_WARNING
  Else
    
    strCurrentWBPath = wbBackupWorkbook.Path
    strCurrentWBName = wbBackupWorkbook.name
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Define_File_Name_Extension_Format wbBackupWorkbook, strWorkbookName, _
                                      strFileExtension, lngFileFormatNum
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Mid(strBackupFileName, _
           Len(strBackupFileName) - Len(strFileExtension) + 1, _
           Len(strFileExtension)) <> strFileExtension Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If InStr(Len(strBackupFileName) - 1, strBackupFileName, ".") > 0 Then ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "."
        strBackupFileName = strBackupFileName & ".BKP" & Mid(strFileExtension, 2, Len(strFileExtension) - 1)
      Else
        strBackupFileName = strBackupFileName & ".BKP" & strFileExtension
      End If
    Else
      strBackupFileName = Mid(strBackupFileName, 1, _
                              Len(strBackupFileName) - Len(strFileExtension)) & ".BKP" & strFileExtension
    End If
    
    If val(Application.Version) < 12 Then
      ' You use Excel 97-2003
    Else
      ' You use Excel 2007-2010
      wbBackupWorkbook.CheckCompatibility = False
    End If
    
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & strBackupFileName, STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wbBackupWorkbook.SaveAs Filename:=strBackupFileName, _
                            FileFormat:=wbBackupWorkbook.FileFormat
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strBackupFileName, STR_FORM_STATUS_INFO
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set wbUpdatingWorkbook = wbBackupWorkbook
    
    wbUpdatingWorkbook.SaveAs Filename:=strCurrentWBPath & "\" & strCurrentWBName, _
                              FileFormat:=wbUpdatingWorkbook.FileFormat
    
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    
    wbUpdatingWorkbook.Activate
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Download_Update wbUpdatingWorkbook, strTemplateCode, strNewVersion

  End If
  
  GoTo Success

Success:
  GoTo cleanUp
ErrHandler:
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_ERROR
  GoTo cleanUp
cleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Download_Update(ByRef wbBook As Workbook, _
                           ByVal strTemplateCode As String, _
                           ByVal strNewVersion As String)
                               
  On Error GoTo ErrHandler

  Dim strResult As String
  
  If Not wbBook Is Nothing And _
     Len(strTemplateCode) > 0 And _
     Len(strNewVersion) > 0 Then
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResult = strStart_Update(wbBook, strTemplateCode, strNewVersion)
  
    If InStr(1, strResult, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ") > 0 Then
      
      GoTo Success
   
    End If
    
  Else
    
    Application.ScreenUpdating = True
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
    lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    
  End If
  
  GoTo cleanUp
  
Success:
      
  lbInfo_AddInfo strResult, STR_FORM_STATUS_INFO
  lbInfo_AddInfo strResult, STR_FORM_STATUS_INFO
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wbBook.Application.EnableEvents = False
  
  If val(Application.Version) < 12 Then
    ' You use Excel 97-2003
  Else
    ' You use Excel 2007-2010
    wbBook.CheckCompatibility = False
  End If
  
  wbBook.Save
  
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  
  MsgBox strResult & Chr(13) & _
         "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
         "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. " & _
         "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
  
  wbBook.Close SaveChanges:=False
  
  GoTo cleanUp
ErrHandler:
  GoTo cleanUp
cleanUp:
  Application.DisplayAlerts = True
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function strStart_Update(ByRef wbBook As Workbook, _
                                 ByVal strTemplateCode As String, _
                                 ByVal strNewVersion As String) As String

  On Error GoTo ErrHandler

  Dim strTempFileName As String
  Dim strResultFileName As String
  Dim wsSheet As Worksheet
  
  Dim wbBookWithUpdates As Workbook
  
  strStart_Update = vbNullString
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| xls...
  strTempFileName = wbBook.Path & "\UPDATE." & _
                    strTemplateCode & ".TO." & _
                    strNewVersion & "." & _
                    CStr(CInt((90 * Rnd) + 1)) & ".xls"
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  strResultFileName = modUpd_Templ_Caller.Query_Update(strTempFileName, strTemplateCode, strNewVersion)
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
  If Len(Dir(strResultFileName)) = 0 Then
    GoTo ErrHandler
  End If
  
  Application.ScreenUpdating = False
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Set wbBookWithUpdates = Application.Workbooks.Open(Filename:=strTempFileName, _
                                                     UpdateLinks:=False, _
                                                     ReadOnly:=False)
                                             
  If wbBookWithUpdates Is Nothing Then
    strStart_Update = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    GoTo cleanUp
  End If
  
  wbBookWithUpdates.Activate
  
  ' |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|...
  wbBookWithUpdates.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("C5").cells(1, 1).Value = wbBook.Path
  wbBookWithUpdates.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("C8").cells(1, 1).Value = wbBook.FullName
  
  strStart_Update = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strTempFileName
  
  GoTo Success
  
Success:
  GoTo cleanUp
ErrHandler:
  Application.ScreenUpdating = True
  MsgBox strStart_Update, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  lbInfo_AddInfo strStart_Update, STR_FORM_STATUS_ERROR
  GoTo cleanUp
cleanUp:
End Function

Private Sub lbInfoVersion_Clear()
  
  If blnIs_UserForm_Loaded(frmUpdate.name) = True Then
    frmUpdate.lbInfo.Clear
  End If
  
End Sub

Private Sub lbInfo_AddInfo(ByVal strValue As String, _
                           ByVal strStatus As String, _
                           Optional blnAddLogToSheet As Boolean = True)
  
  If blnIs_UserForm_Loaded(frmUpdate.name) = True Then
    If frmUpdate.lbInfo.ListCount > 20 Then
      frmUpdate.lbInfo.RemoveItem (0)
    End If
    frmUpdate.lbInfo.AddItem (strStatus & ": " & strValue)
  End If
  
  If blnAddLogToSheet = True Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| STR_LOGGING_SHEET_NAME
    modUpdTemplLogger.Add_String strValue, ThisWorkbook, strStatus
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Function blnIs_UserForm_Loaded(ByVal strFormName As String) As Boolean

  Dim lngICounter As Long

  blnIs_UserForm_Loaded = False
  For lngICounter = 0 To UserForms.Count - 1
    If UserForms(lngICounter).name = strFormName Then
      blnIs_UserForm_Loaded = True
      Exit Function
    End If
  Next lngICounter

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Define_File_Name_Extension_Format(ByRef wbSourceBook As Workbook, _
                                              ByRef strWorkbookName As String, _
                                              ByRef strFileExtension As String, _
                                              ByRef lngFileFormatNum As Long)

  On Error GoTo ErrHandler
  
  Dim strOrigFileName As String
  Dim intExtPosition As Long
  
  If wbSourceBook Is Nothing Then
    GoTo cleanUp
  End If
  
  strOrigFileName = wbSourceBook.name
  
  intExtPosition = InStr(1, strOrigFileName, ".xls")
  strWorkbookName = Mid(strOrigFileName, 1, intExtPosition - 1) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  
  ' Determine the Excel version and file extension/format
  With wbSourceBook
    If val(Application.Version) < 12 Then
      ' You use Excel 97-2003
      strFileExtension = ".xls"
      lngFileFormatNum = -4143
    Else
      ' You use Excel 2007-2010
' 51 = xlOpenXMLWorkbook (without macro's in 2007-2010, xlsx)
' 52 = xlOpenXMLWorkbookMacroEnabled (with or without macro's in 2007-2010, xlsm)
' 50 = xlExcel12 (Excel Binary Workbook in 2007-2010 with or without macro's, xlsb)
' 56 = xlExcel8 (97-2003 format in Excel 2007-2010, xls)
      Select Case .FileFormat
        Case 51
          strFileExtension = ".xlsx"
          lngFileFormatNum = 51
        Case 52
          If .HasVBProject Then
            strFileExtension = ".xlsm"
            lngFileFormatNum = 52
          Else
            strFileExtension = ".xlsx"
            lngFileFormatNum = 51
          End If
        Case 56
          strFileExtension = ".xls"
          lngFileFormatNum = 56
        Case Else
          strFileExtension = ".xlsb"
          lngFileFormatNum = 50
      End Select
    End If
  End With

  GoTo Success

Success:
  GoTo cleanUp
ErrHandler:
  GoTo cleanUp
cleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
'  |fffd||fffd||fffd||fffd| strCurrentVersion < strNewVersion, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd||fffd| FALSE
Private Function blnIs_New_Version(ByVal strCurrentVersion As String, _
                                   ByVal strNewVersion As String) As Boolean
      
  On Error GoTo ErrHandler
  
  Dim lngPosition As Long
  Dim lngMasterVersionCurrent As Long
  Dim lngMasterVersionNew As Long
  Dim lngSubVersionCurrent As Long
  Dim lngSubVersionNew As Long
  
  ' 1.29 : 1 - |fffd||fffd||fffd| MasterVersion, 29 - |fffd||fffd||fffd| SubVersion
  
  blnIs_New_Version = False
  
  If Len(strCurrentVersion) = 0 Or _
     Len(strNewVersion) = 0 Then
    GoTo cleanUp
  End If
  
  lngPosition = InStr(1, strNewVersion, ".")  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
  lngSubVersionNew = CLng(Mid(strNewVersion, lngPosition + 1, Len(strNewVersion) - lngPosition))
  lngMasterVersionNew = CLng(Mid(strNewVersion, 1, lngPosition - 1))
  
  lngPosition = InStr(1, strCurrentVersion, ".") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
  lngSubVersionCurrent = CLng(Mid(strCurrentVersion, lngPosition + 1, Len(strCurrentVersion) - lngPosition))
  lngMasterVersionCurrent = CLng(Mid(strCurrentVersion, 1, lngPosition - 1))
  
  ' Downgrade |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If lngMasterVersionCurrent > lngMasterVersionNew Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    blnIs_New_Version = False
  ElseIf lngMasterVersionCurrent < lngMasterVersionNew Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    blnIs_New_Version = True
  Else ' |fffd||fffd||fffd||fffd| MasterVersion |fffd||fffd| |fffd||fffd|
    If lngSubVersionCurrent < lngSubVersionNew Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      blnIs_New_Version = True
    Else
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      blnIs_New_Version = False
    End If
  End If
  
  GoTo cleanUp
  
ErrHandler:
  GoTo cleanUp
cleanUp:
End Function

Private Sub ClearBrokenNamesInActiveWorkbook(ByVal wbBookToFix As Workbook)

  Dim nam As name
  
  For Each nam In wbBookToFix.Names
    If (InStr(1, nam.Value, "\") > 0) _
       Or (InStr(1, nam.Value, "REF") > 0) _
       Or (InStr(1, nam.Value, "#") > 0) _
       Or (InStr(1, nam.Value, "xls") > 0) _
       Or (InStr(1, nam.Value, "/") > 0) _
       Or (InStr(1, nam.name, "!") > 0) _
       Or (InStr(1, nam.name, "?") > 0) Then
      nam.Delete
    End If
  Next nam

End Sub

Attribute VB_Name = "modUpd_Templ_Caller"
Option Explicit
Option Base 1

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Query_Last_Version_Info(ByVal strTemplateCode As String, _
                                        Optional blnShowMessage As Boolean = True) As TVersionInfo
              
  On Error GoTo ErrHandler
  
  Dim strXMLTagNames(3) As String
  
  If Len(strTemplateCode) = 0 Then
    GoTo cleanUp
  End If
  
  strXMLTagNames(1) = "VERSION"
  strXMLTagNames(2) = "DESCRIPTION_UPDATE"
  strXMLTagNames(3) = "FILE_UPDATE_SIZE"
  
  Query_Last_Version_Info = modUpd_Templ_HTTP_Request.tviQuery_Update_Info(strXMLTagNames, strTemplateCode, blnShowMessage)
  
  GoTo cleanUp
  
ErrHandler:
  GoTo cleanUp
cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Query_Update(ByVal strTempFileName As String, _
                             ByVal strTemplateCode As String, _
                             ByVal strVersion As String) As String
              
  On Error GoTo ErrHandler
  
  If Len(strTemplateCode) = 0 Or _
     Len(strVersion) = 0 Then
    GoTo cleanUp
  End If
  
  Query_Update = modUpd_Templ_HTTP_Request.strQuery_Update(strTempFileName, strTemplateCode, strVersion)
  
  GoTo cleanUp
  
ErrHandler:
  GoTo cleanUp
cleanUp:
End Function
Attribute VB_Name = "modUpd_Templ_Defines"
Option Explicit

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Type TVersionInfo
  strVersion As String
  strDescription As String
  lngFileSize As Long
End Type

Public Const STR_UI_UPDATE_SHEET_NAME As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_LOGGING_SHEET_NAME As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const MS_EXCEL_2003_EXTENSIONS_LIST As String = "*.xls"
Public Const MS_EXCEL_2007_EXTENSIONS_LIST As String = "*.xls; *.xlsm; *.xlsx"

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|..." (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Const gblnFeatureDataDownloadAvailable As Boolean = False
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Const gblnFeatureUpdateTemplateAvailable As Boolean = True

Public Const STR_FORM_STATUS_ERROR As String = "ERR"
Public Const STR_FORM_STATUS_WARNING As String = "WARNING"
Public Const STR_FORM_STATUS_INFO As String = "INFO"

Public Const STR_SHEET_LOG_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_SHEET_LOG_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_SHEET_LOG_INFO As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Name = "modUpd_Templ_HTTP_Request"
Option Explicit
Option Base 1

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function tviQuery_Update_Info(ByRef strXMLTagNames() As String, _
                                     ByVal strTemplateCode As String, _
                                     Optional blnShowMessage As Boolean = True) As TVersionInfo

  On Error GoTo ErrHandler
  
  Dim strURL As String
  Dim lngICounter As Long
  Dim lngNumberOfQueryFields As Long
  
  If Len(strTemplateCode) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_BASE_URL & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_NAME & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_PARAM_1 & strTemplateCode
  Else
    GoTo ErrHandler
  End If

  Dim tviResult As TVersionInfo
  tviResult.lngFileSize = 0
  tviResult.strDescription = vbNullString
  tviResult.strVersion = vbNullString
      
  For lngICounter = 1 To UBound(strXMLTagNames)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(strXMLTagNames(lngICounter)) = 0 Then
      GoTo ErrHandler
    End If
  Next lngICounter
  
  lngNumberOfQueryFields = UBound(strXMLTagNames)
  
  ' HTTP Request
  Dim objXMLHTTP As MSXML2.XMLHTTP
  Dim objXMLDOMDocument As MSXML2.DOMDocument
  
  Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
  objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
  objXMLHTTP.send
  Set objXMLDOMDocument = objXMLHTTP.responseXML
  
  If modGlobals.gblnTestMode = True Then
    Debug.Print objXMLDOMDocument.Text
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strMaxVersion As String
  Dim strDescription As String
  Dim strFileSize As String
  Dim lngDotPosition As Long
  Dim lngMasterVersionCurrent As Long
  Dim lngMasterVersionNew As Long
  Dim lngSubVersionCurrent As Long
  Dim lngSubVersionNew As Long
  
  If objXMLDOMDocument.DocumentElement.ChildNodes.Length > 0 Then
  
    For lngICounter = 0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length - 1
    
      Dim rec As MSXML2.IXMLDOMElement
      Set rec = objXMLDOMDocument.DocumentElement.ChildNodes.Item(lngICounter)
      
      If Len(strMaxVersion) = 0 Then
      
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|"
        strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text            ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        
      Else
      
        ' 1.29 : 1 - |fffd||fffd||fffd| MasterVersion, 29 - |fffd||fffd||fffd| SubVersion
        
        lngDotPosition = InStr(1, strMaxVersion, ".")  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
        lngSubVersionCurrent = CLng(Mid(strMaxVersion, lngDotPosition + 1, Len(strMaxVersion) - lngDotPosition))
        lngMasterVersionCurrent = CLng(Mid(strMaxVersion, 1, lngDotPosition - 1))
        
        lngDotPosition = InStr(1, rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text, ".") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|
        lngSubVersionNew = CLng(Mid(rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text, _
                                    lngDotPosition + 1, _
                                    Len(rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text) - lngDotPosition))
        lngMasterVersionNew = CLng(Mid(rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text, 1, lngDotPosition - 1))
        
        ' Downgrade |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If lngMasterVersionCurrent > lngMasterVersionNew Then
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ElseIf lngMasterVersionCurrent < lngMasterVersionNew Then
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text       ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else ' |fffd||fffd||fffd||fffd| MasterVersion |fffd||fffd| |fffd||fffd|
          If lngSubVersionCurrent < lngSubVersionNew Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text       ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          Else
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          End If
        End If
        
      End If
      
    Next lngICounter
    
  End If
  
  If Len(strFileSize) = 0 Then
    tviResult.lngFileSize = 0
  Else
    tviResult.lngFileSize = CLng(strFileSize)
  End If
  tviResult.strDescription = strDescription
  tviResult.strVersion = strMaxVersion
  
  GoTo Success

Success:
  GoTo cleanUp
ErrHandler:
  If blnShowMessage = True Then
    MsgBox STR_UPDATE_FAILED, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If
  GoTo cleanUp
cleanUp:
  tviQuery_Update_Info = tviResult
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function strQuery_Update(ByVal strFullFileName As String, _
                                ByVal strTemplateCode As String, _
                                ByVal strVersion As String) As String

  On Error GoTo ErrHandler
  
  Dim strURL As String
  
  If Len(strFullFileName) > 0 And _
     Len(strTemplateCode) > 0 And _
     Len(strVersion) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_BASE_URL & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_NAME & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_1 & strTemplateCode & "&" & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_2 & strVersion
  Else
    GoTo ErrHandler
  End If

  Dim lngFileNum As Long
  Dim bytFileData() As Byte
  Dim strMyFile As String
  Dim objWHTTP As Object
    
  On Error Resume Next
  
  Set objWHTTP = CreateObject("WinHTTP.WinHTTPrequest.5")
  If Err.Number <> 0 Then
    Set objWHTTP = CreateObject("WinHTTP.WinHTTPrequest.5.1")
  End If
      
  On Error GoTo 0
  
  ' HTTP Request
  objWHTTP.Open "GET", strURL, False
  objWHTTP.send
  bytFileData = objWHTTP.responseBody
  Set objWHTTP = Nothing
  
  lngFileNum = FreeFile
  Open strFullFileName For Binary Access Write As lngFileNum
    Put lngFileNum, 1, bytFileData
  Close lngFileNum
  
  GoTo Success

Success:
  strQuery_Update = strFullFileName
  GoTo cleanUp
ErrHandler:
  MsgBox STR_UPDATE_FAILED, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo cleanUp
cleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Delete_Existing_Name_In_Workbook(wbBook As Workbook, _
                                            strNameOfRange As String)
  On Error GoTo ErrHandler
  If wbBook Is Nothing Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  wbBook.Names(strNameOfRange).Delete
ErrHandler:
End Sub

Private Sub SaveXML(ByVal wbBook As Workbook, _
                    ByVal strXML As String)
  
  Dim FileNo As Long
  FileNo = FreeFile
  
  Open wbBook.Path & "\" & "Save.txt" For Output As FileNo
  
  Print #FileNo, strXML
  
  Close FileNo

End Sub
Attribute VB_Name = "modWindowClipboard"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
 
Private Declare Function OpenClipboard Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function EmptyClipboard Lib "user32" () As Long
Private Declare Function CloseClipboard Lib "user32" () As Long

Public Sub ClearClipboard()
  OpenClipboard 0&
  EmptyClipboard
  CloseClipboard
End Sub

Public Sub PutOnClipboard(varObject As Variant)

  On Error GoTo cleanUp

  Dim doMyDataObject As New DataObject
  doMyDataObject.SetText Format(varObject)
  doMyDataObject.PutInClipboard
  
  GoTo cleanUp
  
cleanUp:
  Set doMyDataObject = Nothing    ' Release the object.
End Sub

Public Function GetClipboardContent() As Variant

  On Error GoTo cleanUp

  Dim doMyDataObject As New DataObject
  doMyDataObject.GetFromClipboard
  GetClipboardContent = doMyDataObject.GetText()
  
  GoTo cleanUp
  
cleanUp:
  Set doMyDataObject = Nothing    ' Release the object.
End Function

Public Sub ClearClipboardContent()

  On Error GoTo cleanUp

  Dim doMyDataObject As New DataObject
  doMyDataObject.SetText vbNullString
  doMyDataObject.PutInClipboard
  
  GoTo cleanUp
  
cleanUp:
  Set doMyDataObject = Nothing    ' Release the object.
End Sub

Public Sub CopyFormula()

  Dim x As New DataObject
  x.SetText ActiveCell.Formula
  x.PutInClipboard
  
  Set x = Nothing    ' Release the object.
End Sub

Public Sub PasteFormula()

  On Error Resume Next
  
  Dim x As New DataObject
  x.GetFromClipboard
  ActiveCell.Formula = x.GetText
  
  Set x = Nothing    ' Release the object.
End Sub

Attribute VB_Name = "modfrmDateChoose"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub UserForm_Activate_Handler()
  
  If intDay = 0 Then
    intDay = Day(Now)
    intMonth = Month(Now) - 1
    intYear = Year(Now)
    If intMonth = 0 Then
      intMonth = 12
      intYear = intYear - 1
    End If
  End If
  
  modGlobals.STR_SELECT_DATE = ""
  modfrmDateChoose.MakeCalendar
  
End Sub

Public Sub cbMonth_Change_Handler()
  If blnCalendarChange Then Exit Sub
  intMonth = frmDateChoose.cbMonth.ListIndex + 1
  modfrmDateChoose.MakeCalendar
End Sub

Public Sub txtYear_Change_Handler()
  If blnCalendarChange Then Exit Sub
  intYear = frmDateChoose.txtYear.Value
  modfrmDateChoose.MakeCalendar
End Sub

Public Sub lblMonthMinus_Click_Handler()
  If frmDateChoose.cbMonth.ListIndex = 0 Then
    frmDateChoose.cbMonth.ListIndex = 11
    modfrmDateChoose.spinYearChange_SpinDown_Handler
  Else
    frmDateChoose.cbMonth.ListIndex = frmDateChoose.cbMonth.ListIndex - 1
  End If
End Sub

Public Sub lblMonthPlus_Click_Handler()
  If frmDateChoose.cbMonth.ListIndex = 11 Then
    frmDateChoose.cbMonth.ListIndex = 0
    modfrmDateChoose.spinYearChange_SpinUp_Handler
  Else
    frmDateChoose.cbMonth.ListIndex = frmDateChoose.cbMonth.ListIndex + 1
  End If
End Sub

Public Sub spinYearChange_SpinDown_Handler()
  frmDateChoose.txtYear.Value = frmDateChoose.txtYear.Value - 1
End Sub

Public Sub spinYearChange_SpinUp_Handler()
  frmDateChoose.txtYear.Value = frmDateChoose.txtYear.Value + 1
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub MakeCalendar()
  Dim i As Integer
  Dim j As Integer
  Dim intWeekDay As Integer
  Dim intCountDaysPrevMonth As Integer
  Dim intCountDaysThisMonth As Integer
  
  blnCalendarChange = True
  frmDateChoose.txtYear.Value = intYear
  frmDateChoose.cbMonth.ListIndex = intMonth - 1
  
  intWeekDay = 2 - DatePart("w", DateSerial(intYear, intMonth, 1), vbMonday)
  intCountDaysThisMonth = Day(DateSerial(intYear, intMonth + 1, 0))
  intCountDaysPrevMonth = Day(DateSerial(intYear, intMonth, 0))
  
  For i = 1 To 6    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For j = 1 To 7  ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If intWeekDay < 1 Then
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intCountDaysPrevMonth + intWeekDay
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H8000000C
      ElseIf intWeekDay > intCountDaysThisMonth Then
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intWeekDay - intCountDaysThisMonth
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H8000000C
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intWeekDay
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H80000012
      End If
      
      If intWeekDay = intDay Then
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &H80000004
        frmDateChoose.Controls("Label" & i & "_" & j).SpecialEffect = fmSpecialEffectSunken
        intX = i
        intY = j
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &HFFFFFF
        frmDateChoose.Controls("Label" & i & "_" & j).SpecialEffect = fmSpecialEffectFlat
        frmDateChoose.Controls("Label" & i & "_" & j).BorderStyle = fmBorderStyleSingle
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If intWeekDay = Day(Now) And intYear = Year(Now) And intMonth = Month(Now) Then
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &HFFFFFF
        frmDateChoose.Controls("Label" & i & "_" & j).BorderColor = &HC0C000
        frmDateChoose.Controls("Label" & i & "_" & j).BorderStyle = fmBorderStyleSingle
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).BorderColor = &HFFFFFF
      End If
      
      intWeekDay = intWeekDay + 1
    Next j
  Next i
  blnCalendarChange = False

End Sub

Public Sub LabelClick_Handler(lblLabelClick As Control)
  
  intDay = lblLabelClick.caption
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
  If lblLabelClick.ForeColor = &H8000000C Then
    Dim dtCurrDate As Variant
    If intDay > 20 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dtCurrDate = DateSerial(intYear, intMonth - 1, intDay)
    Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dtCurrDate = DateSerial(intYear, intMonth + 1, intDay)
    End If
    intYear = Year(dtCurrDate)
    intMonth = Month(dtCurrDate)
    modfrmDateChoose.MakeCalendar
    Exit Sub
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (CInt(Trim(frmDateChoose.Controls("Label" & intX & "_" & intY).caption)) = Day(Now) And intYear = Year(Now) And intMonth = Month(Now)) Then
    frmDateChoose.Controls("Label" & intX & "_" & intY).BackColor = &HFFFFFF
    frmDateChoose.Controls("Label" & intX & "_" & intY).SpecialEffect = fmSpecialEffectFlat
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HFFFFFF
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderStyle = fmBorderStyleSingle
  Else
    frmDateChoose.Controls("Label" & intX & "_" & intY).BackColor = &HFFFFFF
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HC0C000
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderStyle = fmBorderStyleSingle
  End If
  
  intX = Mid(lblLabelClick.name, 6, 1)
  intY = Mid(lblLabelClick.name, 8, 1)
  If Not (CInt(Trim(lblLabelClick.caption)) = Day(Now) And intYear = Year(Now) And intMonth = Month(Now)) Then
    lblLabelClick.BackColor = &H80000004
    lblLabelClick.SpecialEffect = fmSpecialEffectSunken
  Else
    lblLabelClick.BackColor = &H80000004
    lblLabelClick.SpecialEffect = fmSpecialEffectSunken
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HC0C000
  End If
  
End Sub

Public Sub LabelDblClick_Handler(lblLabelClick As Control)
  modGlobals.STR_SELECT_DATE = DateValue(intDay & "." & intMonth & "." & intYear)
  Unload frmDateChoose
End Sub
Attribute VB_Name = "modfrmReestr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private glngMRCOLUMN As Long     ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
Private glngMOCOLUMN As Long     ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
Private glngORGCOLUMN As Long    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private glngCOLUMNSCOUNT As Long ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ListBox

Public Sub chkFilterEnabled_Click_Handler()

  frmReestr.txtMRFilter.Enabled = frmReestr.chkFilterEnabled.Value
  frmReestr.txtMOFilter.Enabled = frmReestr.chkFilterEnabled.Value
  frmReestr.txtOrgFilter.Enabled = frmReestr.chkFilterEnabled.Value
  frmReestr.txtMRFilter.Value = vbNullString
  frmReestr.txtMOFilter.Value = vbNullString
  frmReestr.txtOrgFilter.Value = vbNullString
  If frmReestr.txtOrgFilter.Enabled = False Then
    If modServiceModule.IsNameExists(ThisWorkbook, modGlobals.STR_RANGE_NAME) = True Then
      frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
    End If
    frmReestr.txtMRFilter.BackColor = &H80000000
    frmReestr.txtMOFilter.BackColor = &H80000000
    frmReestr.txtOrgFilter.BackColor = &H80000000
  Else
    frmReestr.txtMRFilter.BackColor = &H80000005
    frmReestr.txtMOFilter.BackColor = &H80000005
    frmReestr.txtOrgFilter.BackColor = &H80000005
  End If

End Sub

Public Sub cmdOK_Click_Handler()

  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  Dim lngNumber As Long
  
  lngNumber = frmReestr.ListReestr.ListIndex

  If lngNumber >= 0 Then
    
    Set wbBook = Application.ThisWorkbook
    Set wsSheet = wbBook.Sheets(gstrMainSheetName)

    wsSheet.Activate
    modServiceModule.UNPROTECT_SHEET wsSheet

    wsSheet.Range("org").cells(1, 1).Value = frmReestr.ListReestr.List(lngNumber, 4)
    wsSheet.Range("inn").Value = frmReestr.ListReestr.List(lngNumber, 5)
    wsSheet.Range("kpp").Value = frmReestr.ListReestr.List(lngNumber, 6)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim intRowHeight As Integer
    Dim rngCell As Range
    For Each rngCell In Union(wsSheet.Range("org"), _
                              wsSheet.Range("inn"), _
                              wsSheet.Range("kpp")).cells
      If rngCell.MergeCells Then
        modServiceModule.AutoFitMergedCellRowHeight rngCell, 25
      Else
        rngCell.cells(1, 1).EntireRow.AutoFit
        intRowHeight = rngCell.cells(1, 1).RowHeight
        If intRowHeight < 25 Then rngCell.cells(1, 1).RowHeight = 25
      End If
    Next rngCell
    
    modServiceModule.PROTECT_SHEET wsSheet, False

    Unload frmReestr

  Else

    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE

  End If

  GoTo cleanUp

ErrHandler:
  Application.EnableEvents = True
  GoTo cleanUp
  
cleanUp:
End Sub

Public Sub ListReestr_Change_Handler()
  If frmReestr.ListReestr.ListIndex > -1 Then
    frmReestr.lblMirror = frmReestr.ListReestr.List(frmReestr.ListReestr.ListIndex, 4)
  Else
    frmReestr.lblMirror = vbNullString
  End If
End Sub

Public Sub txtMOFilter_Change_Handler()
  Filter_Change_Handler frmReestr.txtMRFilter.Text, frmReestr.txtMOFilter.Text, frmReestr.txtOrgFilter.Text
End Sub

Public Sub txtMRFilter_Change_Handler()
  Filter_Change_Handler frmReestr.txtMRFilter.Text, frmReestr.txtMOFilter.Text, frmReestr.txtOrgFilter.Text
End Sub

Public Sub txtOrgFilter_Change_Handler()
  Filter_Change_Handler frmReestr.txtMRFilter.Text, frmReestr.txtMOFilter.Text, frmReestr.txtOrgFilter.Text
End Sub

Public Sub Filter_Change_Handler(ByVal strMRPattern As String, _
                                 ByVal strMOPattern As String, _
                                 ByVal strOrgPattern As String)

  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  Dim wsReestrOrg As Worksheet
  Dim wsReestrFiltered As Worksheet
  Dim rngBaseReestr As Range
  Dim rngTemp As Range

  Dim strRangeTempName As String
  Dim lngReestrColumns As Long
  Dim lngCurrentRow As Long      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lngCount As Long
  Dim lngRowReestrOrg As Long
  Dim lngColumnReestrOrg As Long

  If glngMOCOLUMN <= 0 Or _
     glngMRCOLUMN <= 0 Or _
     glngORGCOLUMN <= 0 Then
    GoTo ErrHandler
  End If

  Set wbBook = ThisWorkbook

  If modServiceModule.IsNameExists(wbBook, modGlobals.STR_RANGE_NAME) = False Then
    GoTo ErrHandler
  End If

  If Len(strMRPattern) = 0 And _
     Len(strMOPattern) = 0 And _
     Len(strOrgPattern) = 0 Then
    frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
  Else

    Application.EnableEvents = False

    strRangeTempName = "REESTR_FILTERED"

    lngCurrentRow = 2
    Set wsReestrOrg = wbBook.Worksheets(modGlobals.STR_REESTR_ORG_SHEET_NAME)
    Set wsReestrFiltered = wbBook.Worksheets(modGlobals.STR_REESTR_FILTERED_SHEET_NAME)
    Set rngBaseReestr = wsReestrOrg.Range(modGlobals.STR_RANGE_NAME)
    lngReestrColumns = rngBaseReestr.Columns.Count
    lngCount = rngBaseReestr.Rows.Count + 1

    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
    Application.Calculation = xlCalculationManual

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, strRangeTempName) = True Then
      wbBook.Names(strRangeTempName).Delete
      wsReestrFiltered.Range(wsReestrFiltered.cells(2, 1), _
                             wsReestrFiltered.cells(wsReestrFiltered.UsedRange.Rows.Count + 2, _
                                                    wsReestrFiltered.UsedRange.Columns.Count)).ClearContents
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For lngRowReestrOrg = rngBaseReestr.Row To lngCount + rngBaseReestr.Row - 2
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If (InStr(1, CStr(wsReestrOrg.cells(lngRowReestrOrg, glngMRCOLUMN).Value), _
                  strMRPattern, vbTextCompare) > 0 Or strMRPattern = "") And _
         (InStr(1, CStr(wsReestrOrg.cells(lngRowReestrOrg, glngMOCOLUMN).Value), _
                  strMOPattern, vbTextCompare) > 0 Or strMOPattern = "") And _
         (InStr(1, CStr(wsReestrOrg.cells(lngRowReestrOrg, glngORGCOLUMN).Value), _
                  strOrgPattern, vbTextCompare) > 0 Or strOrgPattern = "") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        For lngColumnReestrOrg = rngBaseReestr.Column + 1 To glngCOLUMNSCOUNT
          wsReestrFiltered.cells(lngCurrentRow, lngColumnReestrOrg - rngBaseReestr.Column + 1).Value = _
            wsReestrOrg.cells(lngRowReestrOrg, lngColumnReestrOrg).Value
        Next lngColumnReestrOrg
        ' |fffd||fffd||fffd||fffd||fffd|
        wsReestrFiltered.cells(lngCurrentRow, 1).Value = lngCurrentRow - 1
        lngCurrentRow = lngCurrentRow + 1
      End If
    Next lngRowReestrOrg

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(CStr(wsReestrFiltered.Range("A2").cells(1, 1).Value)) > 0 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      wbBook.Names.Add strRangeTempName, _
                       RefersToR1C1:="=" & modGlobals.STR_REESTR_FILTERED_SHEET_NAME & _
                       "!R2C1:R" & CStr(lngCurrentRow - 1) & _
                       "C" & CStr(lngReestrColumns)
    End If
    If modServiceModule.IsNameExists(wbBook, strRangeTempName) = True Then
      frmReestr.ListReestr.RowSource = strRangeTempName
    Else
      frmReestr.ListReestr.RowSource = vbNullString
    End If
    frmReestr.Repaint
  End If

  GoTo cleanUp

ErrHandler:
  GoTo cleanUp
cleanUp:
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
Public Sub Define_Range(strSheetName As String, _
                        wbBook As Workbook)

  On Error GoTo ErrHandler

  If wbBook Is Nothing Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim intOrgRegionRowCount As Long
  Set wsSheet = wbBook.Worksheets(strSheetName)

  modServiceModule.UNPROTECT_SHEET wsSheet
  wsSheet.Columns(3).Delete
  wsSheet.Columns(1).Delete

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wsSheet.Range("A1").Value = "|fffd||fffd|"
  wsSheet.Range("B1").Value = "|fffd||fffd|"
  wsSheet.Range("C1").Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Range("D1").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Range("E1").Value = "|fffd||fffd||fffd|"
  wsSheet.Range("F1").Value = "|fffd||fffd||fffd|"
  wsSheet.Range("G1").Value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

  wsSheet.Application.DisplayAlerts = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wsSheet.Activate
  wsSheet.Columns("A:A").Insert Shift:=xlToRight

  wsSheet.Application.DisplayAlerts = True

  intOrgRegionRowCount = 1
  Do While Len(CStr(wsSheet.cells(intOrgRegionRowCount + 1, 5).Value)) > 0
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wsSheet.cells(intOrgRegionRowCount + 1, 1).Value = intOrgRegionRowCount
    intOrgRegionRowCount = intOrgRegionRowCount + 1
  Loop

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wsSheet.Range("A1").Value = "|fffd|"

  If modServiceModule.IsNameExists(ActiveWorkbook, modGlobals.STR_RANGE_NAME) = True Then
    ActiveWorkbook.Names(modGlobals.STR_RANGE_NAME).Delete
  End If

  If intOrgRegionRowCount > 1 Then
    Set rngRange = wsSheet.Range(wsSheet.cells(2, 1), _
                                 wsSheet.cells(intOrgRegionRowCount, 8))

    If Len(modGlobals.STR_RANGE_NAME) > 0 Then
      rngRange.name = modGlobals.STR_RANGE_NAME
    End If
  End If

ErrHandler:
End Sub

Public Sub cmdUpdateReestr_Click_Handler()

  On Error GoTo ErrHandler

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  frmReestr.txtMRFilter.Text = vbNullString
  frmReestr.txtMOFilter.Text = vbNullString
  frmReestr.txtOrgFilter.Text = vbNullString

  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  frmReestr.ListReestr.RowSource = ""

  modSheetMain01.cmdUpdateOrgData_Click_Handler ActiveSheet, frmReestr.cmdUpdateReestr

  If modServiceModule.IsNameExists(ThisWorkbook, modGlobals.STR_RANGE_NAME) = True Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
     frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
  Else
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestr.ListReestr.RowSource = ""
  End If

  GoTo cleanUp

ErrHandler:
  GoTo cleanUp
cleanUp:
  Application.ScreenUpdating = True
End Sub

Public Sub ListReestr_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  cmdOK_Click_Handler
End Sub

Public Sub txtURL_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  'modWindowClipboard.PutOnClipboard txtURL
  Application.ThisWorkbook.FollowHyperlink frmReestr.txtURL.Text
End Sub

Public Sub UserForm_Initialize_Handler()

  Dim wbBook As Workbook
  Dim lngICounter As Long
  Dim wsOrgSheet As Worksheet
  Dim wsFilteredSheet As Worksheet

  Set wbBook = ThisWorkbook
  
  If modGlobals.gblnTestMode = False Then
    frmReestr.ListReestr.SetFocus
    hW = GetFocus
    frmReestr.cmdOK.SetFocus
    Hook hW ' for LB scrolling
  End If

  If modServiceModule.IsNameExists(wbBook, "region_name") = True Then
    frmReestr.Label1.caption = wbBook.Names("region_name").RefersToRange.Value
  End If

  If Len(modGlobals.STR_RANGE_NAME) > 0 Then

    If modServiceModule.IsNameExists(wbBook, modGlobals.STR_RANGE_NAME) = True Then
      frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
    End If

    Set wsOrgSheet = ThisWorkbook.Worksheets(modGlobals.STR_REESTR_ORG_SHEET_NAME)
    Set wsFilteredSheet = ThisWorkbook.Worksheets(modGlobals.STR_REESTR_FILTERED_SHEET_NAME)

    modServiceModule.UNPROTECT_SHEET wsOrgSheet
    modServiceModule.UNPROTECT_SHEET wsFilteredSheet

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''    If Len(wsOrgSheet.Range("A2").cells(1, 1).Value) > 0 Then
      For lngICounter = 1 To wsOrgSheet.UsedRange.Columns.Count
        wsFilteredSheet.cells(1, lngICounter).Value = wsOrgSheet.cells(1, lngICounter).Value
        If wsFilteredSheet.cells(1, lngICounter).Value = "|fffd||fffd|" Then
          glngMRCOLUMN = lngICounter ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
        End If
        If wsFilteredSheet.cells(1, lngICounter).Value = "|fffd||fffd|" Then
          glngMOCOLUMN = lngICounter ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
        End If
        If wsFilteredSheet.cells(1, lngICounter).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
          glngORGCOLUMN = lngICounter ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
      Next lngICounter
''    End If

    glngCOLUMNSCOUNT = frmReestr.ListReestr.ColumnCount

  End If

  frmReestr.lblLookupOrganization.Visible = False
  frmReestr.lblLookupOrganization = vbNullString

  frmReestr.lblMirror = vbNullString

  Application.ScreenUpdating = True

End Sub

Public Sub UserForm_Terminate_Handler()
  frmReestr.ListReestr.RowSource = vbNullString
  If modGlobals.gblnTestMode = False Then
    UnHook hW ' for LB scrolling
  End If
End Sub

Attribute VB_Name = "sheetMain00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdApplyContactChanges, 836, 0, MSForms, CommandButton"
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
  If Target.Interior.ColorIndex = colorYellow Then
    cmdApplyContactChanges.Enabled = True
    cmdApplyContactChanges.Visible = True
  End If
End Sub

Private Sub cmdApplyContactChanges_Click()
  Application.EnableEvents = False
  cmdApplyContactChanges.Enabled = False
  cmdApplyContactChanges.Visible = False
  Me.Range("A1").Activate
  ThisWorkbook.Save
  Application.EnableEvents = True
End Sub
Attribute VB_Name = "sheetMain01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdUpdateReestrMO, 256, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdOrganizationChoice, 2, 1, MSForms, CommandButton"
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdOrganizationChoice_Click()
  modSheetMain01.cmdOrgChoice_Click_Handler
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Private Sub cmdUpdateReestrMO_Click()
  modSheetMain01.cmdUpdateReestrMO_Click_Handler Me, cmdUpdateReestrMO
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain01.SheetMain01_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain01.SheetMain01_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain01.SheetMain01_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain01.SheetMain01_Worksheet_SelectionChange Target
End Sub

Attribute VB_Name = "sheetMain02_1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain02.SheetMain02_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain02.SheetMain02_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain02_2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain02.SheetMain02_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain02.SheetMain02_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain02_3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain02.SheetMain02_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain02.SheetMain02_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain02_4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain02.SheetMain02_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain02.SheetMain02_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain03_1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain03.SheetMain03_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain03.SheetMain03_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain03_2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain03.SheetMain03_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain03.SheetMain03_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain03_3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain03.SheetMain03_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain03.SheetMain03_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain03_4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain03.SheetMain03_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain03.SheetMain03_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain04.SheetMain04_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain04.SheetMain04_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain04.SheetMain04_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain04.SheetMain04_Worksheet_SelectionChange Target
End Sub

Attribute VB_Name = "sheetMain05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain05.SheetMain05_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain05.SheetMain05_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain05.SheetMain05_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain05.SheetMain05_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "sheetMain07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain07.SheetMain07_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain07.SheetMain07_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain07.SheetMain07_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain07.SheetMain07_Worksheet_SelectionChange Target
End Sub

Attribute VB_Name = "sheetOld00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    On Error GoTo ErrHandler
Me.Unprotect (gPASSWORD)
hyplink Target.Range
Me.Protect Password:=gPASSWORD, DrawingObjects:=False, AllowFormattingColumns:=True, AllowFormattingRows:=True
    Exit Sub
ErrHandler:
    MsgBox Err.Description, vbOKOnly, ActiveSheet.name
End Sub

Sub hyplink(rg As Range)

Dim k As Integer
Dim wb As Workbook
Dim ws As Worksheet
Set wb = Application.ActiveWorkbook
Set ws = wb.ActiveSheet

If rg.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
  'ws.Cells(k, 5).Select
  'Selection.Interior.ColorIndex = 34
  'Selection.Locked = False
  
  numcl (k)
  
End If

If rg.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
'  ws.Cells(k, 6).Value = "|fffd||fffd||fffd|. |fffd||fffd||fffd|."
'  ws.Cells(k, 5).Select
'  Selection.Interior.ColorIndex = 34
'  Selection.Locked = False
 
  numcl (k)
  
End If

If rg.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
'  ws.Cells(k, 6).Value = "|fffd||fffd||fffd|. |fffd||fffd||fffd|."
'  ws.Cells(k, 5).Select
'  Selection.Interior.ColorIndex = 34
'  Selection.Locked = False
  
  numcl (k)
  
End If

If rg.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
'  ws.Cells(k, 6).Value = "|fffd||fffd||fffd|. |fffd||fffd||fffd|."
'  ws.Cells(k, 5).Select
'  Selection.Interior.ColorIndex = 34
'  Selection.Locked = False
  
  numcl (k)
  
End If

If rg.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  L = k
  
  ws.Rows(k).Delete
  numcl (L)


End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub numcl(R As Integer)

Dim wb As Workbook
Dim ws As Worksheet
Set wb = Application.ActiveWorkbook
Set ws = wb.ActiveSheet
  
    While ws.cells(R, 3).Value <> "first"
          R = R - 1
    Wend
    
    
    If ws.cells(R, 4).Value = "3.1" Then
      L = 1
      While ws.cells(R, 3).Value <> "end"
          ws.cells(R, 4).Value = "3." & L
          ws.cells(R, 5).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & L
          L = L + 1
          R = R + 1
      Wend
    ElseIf ws.cells(R, 4).Value = "4.2.1" Then
      L = 1
      While ws.cells(R, 3).Value <> "end"
          ws.cells(R, 4).Value = "4.2." & L
          ws.cells(R, 5).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & L
          L = L + 1
          R = R + 1
      Wend
    ElseIf ws.cells(R, 4).Value = "5.1.1" Then
      L = 1
      While ws.cells(R, 3).Value <> "end"
          ws.cells(R, 4).Value = "5.1." & L
          L = L + 1
          R = R + 1
      Wend
    ElseIf ws.cells(R, 4).Value = "7.1" Then
      L = 1
      While ws.cells(R, 3).Value <> "end"
          ws.cells(R, 4).Value = "7." & L
          L = L + 1
          R = R + 1
      Wend
        
    End If
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub hyp_del(ws As String, cl As Range)

    ActiveCell.FormulaR1C1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", _
    SubAddress:=Chr(39) & ws & Chr(39) & "!" & cl.Address, TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With Selection.Font
        .name = "Tahoma"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ColorIndex = 5
    End With

End Sub


Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Dim SErr As Boolean

Private Const SAVE_STATUS_CRITICAL_IMPACT_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'!"
Private Const SAVE_STATUS_SUCCESS As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const SAVE_STATUS_LOW_IMPACT_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'"
Private Const SAVE_MESSAGE_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    Application.Calculate

    Dim wsSheet As Worksheet

    Set wb = Application.ThisWorkbook
    Set wsSheet = wb.ActiveSheet

    If Len(CStr(Me.Names("region_name").RefersToRange.Value)) > 0 Then
        modPROV.WarningsBeforeSaving Me

        If modPROV.gintCriticalImpactWarningsCounter > 0 Then
          Me.CustomDocumentProperties("Status") = 1 '|fffd||fffd||fffd||fffd||fffd|
          MsgBox SAVE_STATUS_CRITICAL_IMPACT_WARNING, vbCritical + vbOKOnly, SAVE_MESSAGE_TITLE
          Me.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate
        ElseIf modPROV.gintLowImpactWarningsCounter > 0 Then
          Me.CustomDocumentProperties("Status") = 1 '|fffd||fffd||fffd||fffd||fffd|
          MsgBox SAVE_STATUS_LOW_IMPACT_WARNING, vbExclamation + vbOKOnly, SAVE_MESSAGE_TITLE
          Me.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate
        Else '|fffd||fffd||fffd||fffd||fffd|
          Me.CustomDocumentProperties("Status") = 2 '|fffd||fffd||fffd||fffd||fffd|
          MsgBox SAVE_STATUS_SUCCESS, vbInformation, SAVE_MESSAGE_TITLE
          wsSheet.Activate
        End If

    End If

    On Error GoTo ErrHandler

    Dim status As Integer
    status = wb.CustomDocumentProperties("Status")
    If status > 2 Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation + vbOKOnly, ThisWorkbook.name
      Cancel = True
      GoTo cleanUp
    End If

    GoTo cleanUp

ErrHandler:
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: '" & Err.Description & "'!", _
           vbOKOnly + vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    GoTo cleanUp

cleanUp:
    Me.Application.ScreenUpdating = True
    If ActiveSheet.name = gstrCheckSheetName Then
      ActiveSheet.Range("C1").Select
    End If

End Sub

Private Sub Workbook_Open()

  On Error GoTo ErrHandler

  Application.Calculation = xlCalculationAutomatic ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ReferenceStyle = xlA1 ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - A1
  ThisWorkbook.CustomDocumentProperties("Status") = 1 '|fffd||fffd||fffd||fffd||fffd|

  Dim wsSheet As Worksheet
  Dim wsActiveSheet As Worksheet
  Dim wsTitleSheet As Worksheet
  Dim wbBook As Workbook

  Set wbBook = Application.ThisWorkbook
  Set wsActiveSheet = wbBook.ActiveSheet

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "region_name") = False Or _
       modServiceModule.IsNameExists(wbBook, "strPublication") = False Or _
       modServiceModule.IsNameExists(wbBook, "main_kinds_of_goods") = False Or _
       modServiceModule.IsNameExists(wbBook, "etc_kind_of_goods") = False Or _
       modServiceModule.IsNameExists(wbBook, "flag_ipr") = False Then

         MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "': '" & Err.Description & "'!", _
                vbOKOnly + vbCritical, _
                STR_MSGBOX_WARNING_TITLE
      GoTo cleanUp
    End If

  If Len(CStr(wbBook.Names("region_name").RefersToRange.cells(1, 1).Value)) = 0 Then

    For Each wsSheet In wbBook.Worksheets
      If wsSheet.Visible = True Then
        If wsSheet.Tab.ColorIndex = colorPaleBlue Then
          wsSheet.Visible = xlSheetVeryHidden
        End If
      End If
    Next wsSheet

  Else
    Set wsTitleSheet = wbBook.Names("region_name").RefersToRange.parent
    wsTitleSheet.Activate
    wsTitleSheet.Range("strPublication").Value = wsTitleSheet.Range("strPublication").Value
    wsTitleSheet.Range("main_kinds_of_goods").cells(1, 1).Value = wsTitleSheet.cells(1, 1).Range("main_kinds_of_goods").Value
    wsTitleSheet.Range("main_kinds_of_goods").cells(2, 1).Value = wsTitleSheet.cells(2, 1).Range("main_kinds_of_goods").Value
    wsTitleSheet.Range("main_kinds_of_goods").cells(3, 1).Value = wsTitleSheet.cells(3, 1).Range("main_kinds_of_goods").Value
    wsTitleSheet.Range("etc_kind_of_goods").cells(1, 1).Value = wsTitleSheet.Range("etc_kind_of_goods").cells(1, 1).Value
    wsTitleSheet.Range("flag_ipr").cells(1, 1).Value = wsTitleSheet.Range("flag_ipr").cells(1, 1).Value

    wsActiveSheet.Activate

  End If

  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each wsSheet In wbBook.Worksheets
    If wsSheet.CodeName = "SHEET_UPDATE_INSTRUCTION" Then
      If wbBook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").chkGetUpdates.Value = True Then
        modUpdTemplMain.Check_Update_Execution Me
      End If
    End If
  Next wsSheet
  GoTo cleanUp

ErrHandler:
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: '" & Err.Description & "'!", _
           vbOKOnly + vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    GoTo cleanUp

cleanUp:

End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  Dim vbResult As VbMsgBoxResult
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim strCenterFooter As String
  Dim strNameColumn As String
  Dim strNameRow As String
  
  Dim intCounter As Integer
  Dim intCounter2 As Integer
  Dim intCounterEndRow As Integer
   
  Set wbBook = Application.ThisWorkbook

  vbResult = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
  If vbResult = vbYes Then
    strCenterFooter = _
                     "&""Tahoma,|fffd||fffd||fffd||fffd||fffd||fffd||fffd|""&8" & Chr(10) & "" & _
                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & _
                     wbBook.CustomDocumentProperties("Version") & _
                     ", &D" & " |fffd|. "
                     
    If Len(Trim(wbBook.Names("responsible_post").RefersToRange.Value)) <> 0 Or _
       Len(Trim(wbBook.Names("responsible_FIO").RefersToRange.Value)) <> 0 Then
     strCenterFooter = strCenterFooter & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & _
                       wbBook.Names("responsible_post").RefersToRange.Value & " " & _
                       wbBook.Names("responsible_FIO").RefersToRange.Value  '& Chr(10)
    End If
  Else
    strCenterFooter = ""
  End If
    
  For Each wsSheet In wbBook.Sheets
    If wsSheet.Tab.ColorIndex <> modGlobals.colorLightBrown Then
      With wsSheet
             .PageSetup.CenterFooter = strCenterFooter
      End With
    End If
  Next wsSheet
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  strNameColumn = "hide_me_column_"
  strNameRow = "hide_me_row_"
  For intCounter = 1 To 11
    If intCounter = 1 Or intCounter = 3 Or _
       intCounter = 5 Or intCounter = 7 Or _
       intCounter = 9 Then
         intCounterEndRow = 2
    ElseIf intCounter = 4 Or intCounter = 6 Or _
       intCounter = 8 Or intCounter = 10 Or _
       intCounter = 11 Then
         intCounterEndRow = 1
    Else
         intCounterEndRow = 3
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For intCounter2 = 1 To 2
      If modServiceModule.IsNameExists(wbBook, strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
        wbBook.Names(strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireColumn.Hidden = True
      End If
    Next intCounter2
        
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    For intCounter2 = 1 To intCounterEndRow
      If (intCounter2 = 2 And intCounter = 1) Or _
         intCounter = 4 Or intCounter = 6 Or _
         intCounter = 8 Or intCounter = 10 Then
        If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
          For Each rngCell In wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.Columns(9).cells
            If InStr(1, rngCell.Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
               InStr(1, rngCell.Offset(0, -2).cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
               InStr(1, rngCell.Offset(0, -3).cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Then
              rngCell.EntireRow.Hidden = True
            End If
          Next rngCell
        End If
      Else
        If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
          wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireRow.Hidden = True
        End If
      End If
    Next intCounter2
  Next intCounter
    
cleanUp:
  Application.OnTime Now + TimeValue("00:00:01"), "modServiceModule.WorkbookAfterPrint"

End Sub



' InQuest injected base64 decoded content
' k"{-
' zu)u
' '"qh
' )^J)
' {Qz{
' zjej
' y,"t

INQUEST-PP=macro
