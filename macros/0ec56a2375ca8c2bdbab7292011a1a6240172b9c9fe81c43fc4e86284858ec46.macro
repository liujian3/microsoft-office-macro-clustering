Attribute VB_Name = "AutoOpen"
Public tempAI As AddIn
Public FHG_AI As AddIn

Sub Auto_Open()
    On Error Resume Next
    Set PPTapp.PPTEvent = Application
    
    Dim AI_new As Boolean
    Dim oldpath As String
    AI_new = False
    
    Dim AI As AddIn
    For Each AI In AddIns
        If InStr(1, AI.Name, "FHG_AddIn", vbTextCompare) > 0 Then
            If AI.Path = Environ("temp") Then
                AI_new = True
                oldpath = AI.FullName
                Set tempAI = AI
            End If
        End If
    Next AI
    
    If InStr(1, Application.Caption, "# Installiere AddIn #", vbTextCompare) Then
        MsgBox "Wenn diese Meldung erscheint, ist das Fraunhofer-AddIn installiert und die Makrofunktionen sind jetzt dauerhaft f|fffd|r alle kompatiblen Vorlagen auf diesem Computer verf|fffd|gbar. " + Chr(13) + Chr(13) + "Die Installation muss nur noch durch einen Neustart von PowerPoint abgeschlossen werden. Schlie|fffd|en Sie dazu alle momentan ge|fffd|ffneten Pr|fffd|sentationen." + Chr(13) + Chr(13) + "(Gegebenenfalls fordert PowerPoint Sie auf, Ihre aktuelle Arbeit vorher abzuspeichern. Dies hat nichts mit der Installation des AddIns zu tun und auch keine Auswirkungen darauf.)"
        Cleanup
        Application.Caption = ""
    Else
        If AI_new Then
            appdata = Environ("appdata") + "\Microsoft\AddIns\"
            newpath = appdata + "FHG_AddIn.ppam"
            Dim FSO As Object
            Set FSO = CreateObject("scripting.filesystemobject")
            
            Application.Caption = "# Installiere AddIn #"
            For Each AI In AddIns
                If InStr(1, AI.Name, "FHG_AddIn", vbTextCompare) > 0 Then
                    If AI.Path <> Environ("temp") Then
                        AI.AutoLoad = msoFalse
                        AI.Registered = msoFalse
                        AI.Loaded = msoFalse
                        AddIns.Remove AI.Name
                    End If
                End If
            Next AI
            
            FSO.DeleteFile newpath
            FSO.CopyFile oldpath, newpath, True
            
            Set FHG_AI = AddIns.Add(newpath)
            FHG_AI.AutoLoad = True
            FHG_AI.Registered = True
            FHG_AI.Loaded = True
        End If
    End If
End Sub

Sub Cleanup()
    Dim AI As AddIn
    For Each AI In AddIns
        If InStr(1, AI.Name, "FHG_AddIn", vbTextCompare) > 0 Then
            If AI.Path = Environ("temp") Then
                AI.Loaded = msoFalse
                AI.Registered = msoFalse
                AI.AutoLoad = msoFalse
                AddIns.Remove AI.Name
            End If
        End If
    Next AI
    
    Set FHG_AI = Nothing
End Sub

Attribute VB_Name = "FHG"
Public Rib As IRibbonUI
Public FHG_lng As String
Public cPPTObject As New cEventClass
Public layoutVersion As String

'Callback for Bold onAction
Sub FHGbold(control As IRibbonControl, pressed, ByRef cancelDefault)
    Dim Sel As Selection
    Dim shp As Shape
    Dim first As Shape
    Dim firstbold As Boolean
    Dim firstfont As String
    
    cancelDefault = False
    
    Set Sel = Application.ActiveWindow.Selection
    If Sel.Type = ppSelectionShapes Then
        For Each shp In Sel.ShapeRange
            If shp.HasTextFrame Then
                If TypeName(first) = "Nothing" Then
                    Set first = shp
                    firstbold = first.TextFrame.TextRange.Font.bold
                    firstfont = first.TextFrame.TextRange.Font.Name
                End If
            
                With shp.TextFrame.TextRange.Font
                    If .Name = "" Then
                        .Name = shp.TextFrame.TextRange.Characters(1, 1).Font.Name
                    End If
                    
                    If (InStr(1, .Name, "Frutiger LT Com 55", vbTextCompare) > 0) Or (InStr(1, .Name, "Frutiger LT Com 45", vbTextCompare) > 0) Then
                        cancelDefault = True
                        If firstbold = -1 Or (InStr(1, firstfont, "Frutiger LT Com 45", vbTextCompare) > 0) Then
                            .bold = msoFalse
                            .Name = "Frutiger LT Com 55 Roman"
                        Else
                            '.bold = msoFalse
                            '.Name = "Frutiger LT Com 65 Bold"
                            .bold = msoTrue
                            .Name = "Frutiger LT Com 45 Light"
                        End If
                    End If
                End With
            End If
            
        Next shp
    End If
    
    If Sel.Type = ppSelectionText Then
        With Sel.TextRange.Font
            If .Name = "" Then
                .Name = Sel.TextRange.Characters(1, 1).Font.Name
            End If
            
            If (InStr(1, .Name, "Frutiger LT Com 55", vbTextCompare) > 0) Or (InStr(1, .Name, "Frutiger LT Com 45", vbTextCompare) > 0) Then
                cancelDefault = True
                If .bold = -1 Or .Name = "Frutiger LT Com 45 Light" Then
                    .bold = msoFalse
                    .Name = "Frutiger LT Com 55 Roman"
                Else
                    .bold = msoTrue
                    .Name = "Frutiger LT Com 45 Light"
                End If
            End If
        End With
    End If
End Sub

Sub RibLoad(ribbon As IRibbonUI)
    Set Rib = ribbon
    Set cPPTObject.PPTEvent = Application
End Sub

Sub FHGvisible(control As IRibbonControl, ByRef returnedVal)
    Dim prop As DocumentProperty
    returnedVal = False
    If Application.Presentations.Count > 0 Then
        For Each prop In ActivePresentation.CustomDocumentProperties
            If prop.Name = "FHGvorlage" Then
                returnedVal = True
            End If
            If prop.Name = "FHGsprache" Then
                FHG_lng = prop.Value
            End If
        Next prop
        
        layoutVersion = "valid_FHG_layout_1"
    End If
End Sub
Attribute VB_Name = "Informationsklassifizierung"
Attribute VB_Base = "0{1828EE2B-F11B-4C87-A49B-3E131A1A5582}{D4DE9821-5921-44E9-B186-4B4C03F0DD8F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub TextBox1_Change()
    For i = 1 To Me.Liste.ListCount
        If Me.Liste.List(i - 1, 0) = Me.TextBox1.Value Then
            Me.Liste.Selected(i - 1) = True
        Else
            Me.Liste.Selected(i - 1) = False
        End If
    Next i
End Sub

Private Sub UserForm_Initialize()
    Me.Cancel.Enabled = True
    
    For Each prop In ActivePresentation.CustomDocumentProperties
        If prop.Name = "klassifizierung" Then
            Me.TextBox1.Value = prop.Value
        End If
        If prop.Name = "FHGsprache" Then
            FHG_lng = prop.Value
        End If
    Next prop
    
    Dim x As Integer
    Dim numOn As Integer
    For x = 1 To ActivePresentation.Slides.Count
        With ActivePresentation.Slides(x).HeadersFooters
            If .SlideNumber.Visible Then
                numOn = numOn + 1
            End If
        End With
    Next
    If (numOn / ActivePresentation.Slides.Count) >= 0.5 Then
        Me.pages.Value = True
    End If
    
    If (FHG_lng = "de") Then
        Me.Liste.Clear
        Me.Liste.AddItem (" ")
        Me.Liste.AddItem ("vertraulich")
        Me.Liste.AddItem ("intern")
        Me.Liste.AddItem ("offen")
    End If
    If (FHG_lng = "en") Then
        Me.Liste.Clear
        Me.Liste.AddItem (" ")
        Me.Liste.AddItem ("confidential")
        Me.Liste.AddItem ("internal")
        Me.Liste.AddItem ("public")
    End If
    
            
    For i = 1 To Me.Liste.ListCount
        If Me.Liste.List(i - 1, 0) = Me.TextBox1.Value Then
            Me.Liste.Selected(i - 1) = True
        Else
            Me.Liste.Selected(i - 1) = False
        End If
    Next i
End Sub

Private Sub Cancel_Click()
    Me.Cancel.Enabled = True
    Unload Me
End Sub

Private Sub Liste_Click()
    Me.TextBox1.Value = Me.Liste.Value
End Sub

Private Sub Senden_Click()
    On Error Resume Next
    If (Me.TextBox1.Value = "") Then
        Me.TextBox1.Value = " "
    End If
    
    If ActivePresentation.HasTitleMaster Then
        With ActivePresentation.TitleMaster.HeadersFooters
            With .Footer
                .Visible = msoTrue
                .Text = Me.TextBox1.Value
            End With
        End With
    End If
    
    warning = ""
    Dim sld As Slide
    Dim x As Integer
    'For x = 1 To ActivePresentation.Slides.Count
    For Each sld In ActivePresentation.Slides
        isok = False
        'Set sld = ActivePresentation.Slides(x)
        
        For Each shp In sld.CustomLayout.Shapes
            If shp.AlternativeText = layoutVersion Then
                isok = True
            End If
        Next shp
        
        If Not isok Then
            old = sld.CustomLayout.Index
            sld.CustomLayout = ActivePresentation.SlideMaster.CustomLayouts(4)
            ActivePresentation.SlideMaster.CustomLayouts(old).Delete
            warning = warning + Str(sld.SlideNumber) + ","
        End If
            
        With sld.HeadersFooters
            With .Footer
                .Visible = msoTrue
                .Text = Me.TextBox1.Value
            End With
            .SlideNumber.Visible = False
            .SlideNumber.Visible = pages.Value
        End With
    Next
    
    If warning = "" Then
        ' ok
    Else
        MsgBox "In den folgenden Folien wurden ung|fffd|ltige Folienlayouts festgestellt und durch das Standard-Folienlayout ersetzt. Bitte |fffd|berpr|fffd|fen Sie diese nochmal.:" + Chr(13) + Chr(13) + warning
    End If
    
    If (FHG_lng = "de") Then
        'Call SetFooterText("Seite")
    Else
        'Call SetFooterText("Page")
    End If
    
    ActivePresentation.CustomDocumentProperties("klassifizierung").Delete
    ActivePresentation.CustomDocumentProperties.Add Name:="klassifizierung", LinkToContent:=False, Type:=msoPropertyTypeString, Value:=Me.TextBox1.Value
    
    ActivePresentation.CustomDocumentProperties("pageCount").Delete
    ActivePresentation.CustomDocumentProperties.Add Name:="pageCount", LinkToContent:=False, Type:=msoPropertyTypeString, Value:=ActivePresentation.Slides.Count
    
    Me.Cancel.Enabled = False
    Unload Me
End Sub

Sub SetFooterText(txt)
    Dim view
    view = ActiveWindow.ViewType
    Dim oSld As Slide
    Dim oShp As Shape
    For Each oSld In ActivePresentation.Slides
        For Each oShp In oSld.Shapes
            If oShp.Type = msoPlaceholder Then
                If oShp.PlaceholderFormat.Type = ppPlaceholderSlideNumber Then
                    oShp.TextFrame.TextRange.Text = txt & " " & oSld.SlideIndex
                End If
            End If
        Next
    Next
    
    ActiveWindow.ViewType = view
End Sub


Attribute VB_Name = "Logoauswahl"
Attribute VB_Base = "0{9A2AE67F-27A9-43E2-A8CB-9DF194DF77D7}{9C1669CE-CE1A-41DC-8D3D-BB7085C840FB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub Cancel_Click()
    Me.Cancel.Enabled = True
    Me.Hide
End Sub

Private Sub Senden_Click()
    If Me.Logos.ListIndex < 0 Then
        MsgBox ("Bitte erst ein Logo aus der Liste w|fffd|hlen")
    Else
        If Me.Logos.Column(2, Me.Logos.ListIndex) = "" Then
            MsgBox ("Bitte erst ein Logo aus der Liste w|fffd|hlen")
        Else
            Me.Cancel.Enabled = False
            Me.Hide
        End If
    End If
End Sub

Attribute VB_Name = "Logotausch"
Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias _
  "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal _
    szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    
Function Stream_BinaryToString(Binary, CharSet)
  Const adTypeText = 2
  Const adTypeBinary = 1
  
  'Create Stream object
  Dim BinaryStream 'As New Stream
  Set BinaryStream = CreateObject("ADODB.Stream")
  
  'Specify stream type - we want To save text/string data.
  BinaryStream.Type = adTypeBinary
  
  'Open the stream And write text/string data To the object
  BinaryStream.Open
  BinaryStream.Write Binary
  
  
  'Change stream type To binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeText
  
  'Specify charset For the source text (unicode) data.
  If Len(CharSet) > 0 Then
    BinaryStream.CharSet = CharSet
  Else
    BinaryStream.CharSet = "us-ascii"
  End If
  
  'Open the stream And get binary data from the object
  Stream_BinaryToString = BinaryStream.ReadText
End Function

Function Logo_einstellen(pfad, eps)
    'Selection.SetRange 0, 0
                Dim view
                Dim des As Design
                view = ActiveWindow.ViewType
                
                Dim neu
                Dim datei As String
                If True Then
                    arr = Split(pfad, "/")
                    datei = arr(UBound(arr))
                    URL = pfad

                    Randomize
                    temp = CreateObject("WScript.Shell").ExpandEnvironmentStrings("%Temp%")
                    pfad = temp & "\" & Int(Math.Rnd() * 10000) & datei
                    ret = URLDownloadToFile(0, URL, pfad, 0, 0)
                End If
                
                
        For Each sld In ActivePresentation.Slides
            For Each shp In sld.Shapes
                If shp.AlternativeText = "Logo_ausgetauscht" Then
                    shp.AlternativeText = "Logo"
                End If
                If shp.AlternativeText = "Logo" Then
                        hoehe = shp.Height
                        breite = shp.Width
                        xx = shp.Left
                        yy = shp.Top
                        
                        shp.Delete

                        Set neu = sld.Shapes.AddPicture(pfad, msoFalse, msoTrue, xx, yy)
                        neu.LockAspectRatio = msoTrue
                        neu.Width = breite
                        neu.Left = xx
                        neu.Top = yy
                        neu.AlternativeText = "Logo_ausgetauscht"
                End If
            Next shp
        Next sld
                
                
                
        For Each des In ActivePresentation.Designs
        
                ActiveWindow.ViewType = ppViewSlideMaster
                For Each xxx In des.SlideMaster.CustomLayouts
                For Each shp In xxx.Shapes
                    If shp.AlternativeText = "Logo_ausgetauscht" Then
                        shp.AlternativeText = "Logo"
                    End If
                    If shp.AlternativeText = "Logo" Then
                        hoehe = shp.Height
                        breite = shp.Width
                        xx = shp.Left
                        yy = shp.Top

                        shp.Delete
                        
                        Set neu = xxx.Shapes.AddPicture(pfad, msoFalse, msoTrue, xx, yy)

                        neu.LockAspectRatio = msoTrue
                        neu.Width = breite
                        neu.Left = xx
                        neu.Top = yy
                        neu.AlternativeText = "Logo"
                    End If
                Next shp
                Next xxx
                
                
                
                ActiveWindow.ViewType = ppViewSlideMaster
                For Each shp In des.SlideMaster.Shapes
                    If shp.AlternativeText = "Logo_ausgetauscht" Then
                        shp.AlternativeText = "Logo"
                    End If
                    If shp.AlternativeText = "Logo" Then
                        'anker = shp.Anchor
                        hoehe = shp.Height
                        breite = shp.Width
                        xx = shp.Left
                        yy = shp.Top
                        
                        'shp.Select
                        shp.Delete

                        Set neu = des.SlideMaster.Shapes.AddPicture(pfad, msoFalse, msoTrue, xx, yy)

                        neu.LockAspectRatio = msoTrue
                        neu.Width = breite
                        'neu.ScaleHeight neu.ScaleWidth, True
                        neu.Left = xx
                        neu.Top = yy
                        neu.AlternativeText = "Logo_ausgetauscht"
                    End If
                Next shp
                

        Next des
        ActiveWindow.ViewType = view
End Function

Function logoliste(form, base)
    Dim xls, wbook
    Set xls = CreateObject("Excel.Application")
    Set wbook = xls.Workbooks.Open(base + "Logoliste_word2003.xls")
    'Set wbook = xls.Workbooks.Open("http://key-design-share.com/1_1_Logos/liste1.xls")
    i = 1
    form.Logos.Clear
    While (wbook.Sheets(1).Range("A" & i) <> "")
        form.Logos.AddItem (wbook.Sheets(1).Range("A" & i))
        form.Logos.Column(0, i - 1) = wbook.Sheets(1).Range("D" & i)
        form.Logos.Column(1, i - 1) = wbook.Sheets(1).Range("A" & i)
        form.Logos.Column(2, i - 1) = wbook.Sheets(1).Range("B" & i)
        form.Logos.Column(3, i - 1) = wbook.Sheets(1).Range("C" & i)
        i = i + 1
    Wend
    xls.Quit
End Function

Sub toggleLogo()
    Dim base As String
        base = "http://info-archiv.fraunhofer.de/cd-2009/Fraunhofer_Erscheinungsbild/01_Grundelemente/1_1_Logos/"
        'base = "http://key-design-share.com/FHG_Erscheinungsbild/01_Grundelemente/1_1_Logos/"

        Dim myFrm As Logoauswahl
        Set myFrm = New Logoauswahl
        
        Call logoliste(myFrm, base)
        
        myFrm.Show
        If myFrm.Cancel.Enabled = False Then
            ' Eingabe
            If myFrm.OptPrint Then
                Logo_einstellen (base + myFrm.Logos.Column(3, myFrm.Logos.ListIndex)), True
            Else
                Logo_einstellen (base + myFrm.Logos.Column(2, myFrm.Logos.ListIndex)), False
            End If
        Else
            ' keine Eingabe
        End If
        
        Unload myFrm
        Set myFrm = Nothing
End Sub
Attribute VB_Name = "Sprachwahl"
Attribute VB_Base = "0{5605A426-1B47-4E3F-9750-562FFF720EE2}{9AFE4D92-9A80-472F-82AC-07AF9AA14BF7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
    Me.Cancel.Enabled = True
    
    Me.Liste.Clear
    Me.Liste.AddItem ("de")
    Me.Liste.AddItem ("en")
    
    For i = 1 To Me.Liste.ListCount
        If (Me.Liste.List(i - 1, 0) = FHG_lng) Then
            Me.Liste.Selected(i - 1) = True
        Else
            Me.Liste.Selected(i - 1) = False
        End If
    Next i
End Sub

Private Sub Senden_Click()
    On Error Resume Next
    
    Dim sld As Slide
    Dim x As Integer
    Dim shp As Shape
    Dim view
    Dim des As Design
    Dim gi As GroupShapes
    Dim oSlide As Slide
    Dim oShape As Shape
    view = ActiveWindow.ViewType
    
    If (Me.Liste.Value = "en") Then
        lang = msoLanguageIDEnglishUS
    Else
        lang = msoLanguageIDGerman
    End If
        
    ActivePresentation.DefaultLanguageID = lang

    'Set language in each textbox in each slide
    For Each oSlide In ActivePresentation.Slides
        For Each oShape In oSlide.Shapes
            'Check first if it is a table
            If oShape.HasTable Then
                For r = 1 To oShape.Table.Rows.Count
                    For c = 1 To oShape.Table.Columns.Count
                    oShape.Table.Cell(r, c).Shape.TextFrame.TextRange.LanguageID = lang
                    Next
                Next
            Else
                Set gi = oShape.GroupItems
                'Check if it is a group of shapes
                If Not gi Is Nothing Then
                    If oShape.GroupItems.Count > 0 Then
                        For i = 0 To oShape.GroupItems.Count - 1
                            oShape.GroupItems(i).TextFrame.TextRange.LanguageID = lang
                        Next
                    End If
                'it's none of the above, it's just a simple shape, change the language ID
                Else
                    oShape.TextFrame.TextRange.LanguageID = lang
                End If
            End If
        Next
    Next
        
    For Each des In ActivePresentation.Designs
        ActiveWindow.ViewType = ppViewSlideMaster
        For Each xxx In des.SlideMaster.CustomLayouts
            For Each oShape In xxx.Shapes
                'Check first if it is a table
                If oShape.HasTable Then
                    For r = 1 To oShape.Table.Rows.Count
                        For c = 1 To oShape.Table.Columns.Count
                        oShape.Table.Cell(r, c).Shape.TextFrame.TextRange.LanguageID = lang
                        Next
                    Next
                Else
                    Set gi = oShape.GroupItems
                    'Check if it is a group of shapes
                    If Not gi Is Nothing Then
                        If oShape.GroupItems.Count > 0 Then
                            For i = 0 To oShape.GroupItems.Count - 1
                                oShape.GroupItems(i).TextFrame.TextRange.LanguageID = lang
                            Next
                        End If
                    'it's none of the above, it's just a simple shape, change the language ID
                    Else
                        oShape.TextFrame.TextRange.LanguageID = lang
                    End If
                End If
            Next
        Next xxx

        ActiveWindow.ViewType = ppViewSlideMaster
        For Each oShape In des.SlideMaster.Shapes
            'Check first if it is a table
            If oShape.HasTable Then
                For r = 1 To oShape.Table.Rows.Count
                    For c = 1 To oShape.Table.Columns.Count
                    oShape.Table.Cell(r, c).Shape.TextFrame.TextRange.LanguageID = lang
                    Next
                Next
            Else
                Set gi = oShape.GroupItems
                'Check if it is a group of shapes
                If Not gi Is Nothing Then
                    If oShape.GroupItems.Count > 0 Then
                        For i = 0 To oShape.GroupItems.Count - 1
                            oShape.GroupItems(i).TextFrame.TextRange.LanguageID = lang
                        Next
                    End If
                'it's none of the above, it's just a simple shape, change the language ID
                Else
                    oShape.TextFrame.TextRange.LanguageID = lang
                End If
            End If
        Next
    Next des
    ActiveWindow.ViewType = view

    FHG_lng = Me.Liste.Value
    ActivePresentation.CustomDocumentProperties("FHGsprache").Delete
    ActivePresentation.CustomDocumentProperties.Add Name:="FHGsprache", LinkToContent:=False, Type:=msoPropertyTypeString, Value:=FHG_lng
    
    Me.Cancel.Enabled = False
    Unload Me
End Sub

Private Sub Cancel_Click()
    Me.Cancel.Enabled = True
    Unload Me
End Sub
Attribute VB_Name = "cEventClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents PPTEvent As Application
Attribute PPTEvent.VB_VarHelpID = -1

Private Sub PPTEvent_PresentationClose(ByVal Pres As Presentation)
    On Error Resume Next
    If Pres Is Nothing Then
        Exit Sub
    End If
    
    If TypeName(Rib) <> "Nothing" Then
        Rib.Invalidate
    End If
End Sub



Private Sub PPTEvent_PresentationNewSlide(ByVal sld As Slide)
    On Error Resume Next
    
    Dim shp As Shape
    If PowerPoint.Application.Version >= 9 Then
        'window must be visible
        PowerPoint.Application.Visible = msoTrue
        Set Pres = ActivePresentation
    End If
    isFHG = False
    
    For Each prop In Pres.CustomDocumentProperties
        If prop.Name = "FHGvorlage" Then
            isFHG = prop.Value
        End If
    Next prop

    If isFHG Then
        entfernen = True
        For Each shp In sld.CustomLayout.Shapes
            If shp.AlternativeText = layoutVersion Then
                entfernen = False
            End If
        Next shp
        
        If entfernen Then
            old = sld.CustomLayout.Index
            sld.CustomLayout = ActivePresentation.SlideMaster.CustomLayouts(4)
            ActivePresentation.SlideMaster.CustomLayouts(old).Delete
        End If
    End If
End Sub

Private Sub PPTEvent_PresentationOpen(ByVal Pres As Presentation)
    On Error Resume Next
    If Pres Is Nothing Then
        Exit Sub
    End If
    
    isFHG = False
    isNew = True
    
    For Each prop In Pres.CustomDocumentProperties
        If prop.Name = "FHGvorlage" Then
            isFHG = prop.Value
        End If
    Next prop
End Sub

Private Sub PPTEvent_NewPresentation(ByVal Pres As Presentation)
    On Error Resume Next
    If Pres Is Nothing Then
        Exit Sub
    End If
    
    isFHG = False
    isNew = True
    For Each prop In Pres.CustomDocumentProperties
        If prop.Name = "FHGvorlage" Then
            isFHG = prop.Value
        End If
    Next prop
End Sub

Private Sub PPTEvent_WindowActivate(ByVal Pres As Presentation, ByVal Wn As DocumentWindow)
    On Error Resume Next
    If Pres Is Nothing Then
        Exit Sub
    End If
    
    If TypeName(Rib) <> "Nothing" Then
        Rib.Invalidate
    End If
End Sub

Private Sub PPTEvent_PresentationBeforeSave(ByVal Pres As Presentation, Cancel As Boolean)
    On Error Resume Next
    If Pres Is Nothing Then
        Exit Sub
    End If
    
    isFHG = False
    pcount = 0
    
    For Each prop In Pres.CustomDocumentProperties
        If prop.Name = "FHGvorlage" Then
            isFHG = prop.Value
        End If
        If prop.Name = "pageCount" Then
            pcount = prop.Value
        End If
    Next prop
    
    If isFHG Then
        ' Dim myFrm As Informationsklassifizierung
        ' Set myFrm = New Informationsklassifizierung
        ' myFrm.Cancel.Caption = "|fffd|berspringen"
        ' myFrm.Senden.Caption = "Best|fffd|tigen & Speichern"
        ' myFrm.info.Caption = "Es wurden sei dem letzten Speichern neue Folien hinzugef|fffd|gt, bitte |fffd|berpr|fffd|fen Sie die Informationsklassifizierung erneut."
        ' myFrm.Show
        '
        ' -----> code zum |fffd|berpr|fffd|fen automatisch ausf|fffd|hren, silent
        If ActivePresentation.Path = "" Then
            ' Klassifizierung, wenn neu erstellte Pr|fffd|si die noch nicht gespeichert wurde.
            Dim myFrm As Informationsklassifizierung
            Set myFrm = New Informationsklassifizierung
            myFrm.Show
        Else
            ' Regul|fffd|re |fffd|berpr|fffd|fung bei breits bestehenden Pr|fffd|sis
            Dim x As Integer
            Dim numOn As Integer
            Dim pages As Boolean
            Dim klassi As String
            
            For Each prop In ActivePresentation.CustomDocumentProperties
                If prop.Name = "klassifizierung" Then
                    klassi = prop.Value
                End If
            Next prop
        
            For x = 1 To ActivePresentation.Slides.Count
                With ActivePresentation.Slides(x).HeadersFooters
                    If .SlideNumber.Visible Then
                        numOn = numOn + 1
                    End If
                End With
            Next
            If (numOn / ActivePresentation.Slides.Count) >= 0.5 Then
                pages = True
            Else
                pages = False
            End If
            If ActivePresentation.HasTitleMaster Then
                With ActivePresentation.TitleMaster.HeadersFooters
                    With .Footer
                        .Visible = msoTrue
                        .Text = klassi
                    End With
                End With
            End If
            
            

            warning = ""
            'For x = 1 To ActivePresentation.Slides.Count
            For Each sld In ActivePresentation.Slides
                isok = False
                
                For Each shp In sld.CustomLayout.Shapes
                    If shp.AlternativeText = layoutVersion Then
                        isok = True
                    End If
                Next shp
                
                If Not isok Then
                    old = sld.CustomLayout.Index
                    sld.CustomLayout = ActivePresentation.SlideMaster.CustomLayouts(4)
                    ActivePresentation.SlideMaster.CustomLayouts(old).Delete
                    warning = warning + Str(sld.SlideNumber) + ","
                End If
                    
                With sld.HeadersFooters
                    With .Footer
                        .Visible = msoTrue
                        .Text = klassi
                    End With
                    .SlideNumber.Visible = False
                    .SlideNumber.Visible = pages
                End With
            Next

            
            If warning = "" Then
                ' ok
            Else
                MsgBox "In den folgenden Folien wurden ung|fffd|ltige Folienlayouts festgestellt und durch das Standard-Folienlayout ersetzt. Bitte |fffd|berpr|fffd|fen Sie diese nochmal.:" + Chr(13) + Chr(13) + warning
            End If
                    
            ActivePresentation.CustomDocumentProperties("klassifizierung").Delete
            ActivePresentation.CustomDocumentProperties.Add Name:="klassifizierung", LinkToContent:=False, Type:=msoPropertyTypeString, Value:=klassi
            
            ActivePresentation.CustomDocumentProperties("pageCount").Delete
            ActivePresentation.CustomDocumentProperties.Add Name:="pageCount", LinkToContent:=False, Type:=msoPropertyTypeString, Value:=ActivePresentation.Slides.Count
        End If
        ' <----
    End If
End Sub

Attribute VB_Name = "klassifizierung"
Sub changeTag()
    Dim myFrm As Informationsklassifizierung
    Set myFrm = New Informationsklassifizierung
    myFrm.Show
End Sub
Attribute VB_Name = "sprache"
Sub changeLng()
    Dim lngFrm As Sprachwahl
    Set lngFrm = New Sprachwahl
    lngFrm.Show
End Sub


' InQuest injected base64 decoded content
' jx.j

INQUEST-PP=macro
