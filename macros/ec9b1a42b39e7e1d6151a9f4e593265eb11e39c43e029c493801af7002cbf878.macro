Attribute VB_Name = "C1_AllergensList"
Attribute VB_Base = "0{FD82F539-24E3-4A2A-971B-A72D6F4E61EA}{A62C5D6C-BF06-4046-9B0A-907F4604F3A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Back_Click()
Unload C1_AllergensList
F1_Front.Show ''vbmodeless
End Sub

Private Sub CB_Next_Click()

Save_AA_Selected_small

'Show next form, and unload current
Unload C1_AllergensList
C2_VITALGrid_only.Show ''vbmodeless

End Sub


Private Sub CommandButton1_Click()

'returnPage = "C1_AllergensList"

''MsgBox "(Reconfigure Allergens and Action levels. Options will appear now, with warnings and change-log.)"
'MsgBox "WARNING! Reference Dose should only be changed on advice from the Allergen Bureau."

''!o! changelog

''!o! select allergens sheet, and change font to black (visible)
'Sheets("Allergens and Action Levels").Select

'C1_AllergensList.Hide
'---------------------------
returnPage = "C1_AllergensList"

'MsgBox "(Reconfigure Allergens and Action levels. Options will appear now, with warnings and change-log.)"
'MsgBox "WARNING! Reference Dose should only be changed on advice from the Allergen Bureau."
Dim strName As String
    strName = InputBox(Prompt:="WARNING! Reference Dose should only be changed on advice from the Allergen Bureau.", _
          Title:="Enter reason for reference dose change", Default:=" ")

'Cancel:
If strName = "" Then
    Exit Sub
End If

'No val entered:
While (strName = " ")
    strName = InputBox(Prompt:="A reason for change is required.", _
          Title:="Enter reason for reference dose change", Default:=" ")
          
        If strName = "" Then
            Exit Sub
        End If
Wend

'Changelog
Sheets("Allergens and Action Levels").Select
Dim rr As Long
rr = 4

While (Cells(rr, 9).Value <> "")
    'got to next row:
    rr = rr + 1
Wend

Cells(rr, 9).Value = Format(Date, "dd-mmm-yyyy")
Cells(rr, 10).Value = strName

'!o! select allergens sheet, and change font to black (visible)
'Sheets("Allergens and Action Levels").Select

C1_AllergensList.Hide
End Sub

Private Sub Image2_Click()
MsgBox "Determine the allergens that will be considered in this risk assessment. " & "" & _
"For example, for products sold in Australian/New Zealand markets, the Allergen Bureau " & "" & _
" recommends that only those allergens listed in Australia New Zealand Food Standard Code Standard " & "" & _
"1.2.3, Table to Clause 4 should be considered.  The onus is on the user to ensure the correct allergens are assessed.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image3_Click()
MsgBox "Reference Dose is the mg protein level (total protein from an allergic food) below which only the most sensitive individuals (between 1% and 5% depending on the quality of the data set available) in the allergic population are likely to experience an adverse reaction. The Reference Dose for each allergen is set by the Allergen Bureau based on the recommendations from the VITAL Scientific Expert Panel. It is the user's responsibility to ensure that the most up-to-date version of Reference Dose is being used.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image4_Click()
MsgBox "Reference Dose is the mg protein level (total protein from an allergic food) below which only the most sensitive individuals (between 1% and 5% depending on the quality of the data set available) in the allergic population are likely to experience an adverse reaction. The Reference Dose for each allergen is set by the Allergen Bureau based on the recommendations from the VITAL Scientific Expert Panel. It is the user's responsibility to ensure that the most up-to-date version of Reference Dose is being used.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub StIm1_Click()
goToSTL
End Sub

Private Sub UserForm_Activate()
ThisWorkbook.Activate
End Sub

Private Sub UserForm_Initialize()

'Add ScrollBar
With Me
    .ScrollBars = fmScrollBarsVertical
    .ScrollHeight = .InsideHeight * 2
End With

    Dim ColCnt As Integer
    Dim rng, rng2 As Range
    Dim ALsheet, currSheet As Worksheet
    Dim cw, itemString, spaces As String
    Dim c As Integer
    Dim aa As Long
    Dim charsLeft, charsRight, charsLeft2, charsRight2 As Long
    
    'Chars from LongName (left) and quantity (right) to include:
    charsLeft = 47
    charsRight = 7
    'Same fo LB2
    charsLeft2 = 33
    charsRight2 = 7
    '150 space chars for padding:
    spaces = "                                                                                                                                                      "

'Setup allergen array
pushAllergensToArrays

'Set listbox source to nothing
C1_AllergensList.LB_AllergenList.RowSource = ""

'Cols in listbox:
'C1_AllergensList.LB_AllergenList.ColumnCount = 2
'(!o! Just 1 col)

'Add LongNames to listbox
For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
If AA_Catagories(aa) = 1 Then
    'make LongName-Quantity string.
    'itemString = AA_LongNames(aa) & Right("               " & AA_Quantities(aa), 14)
    itemString = Left(AA_LongNames(aa) & spaces, charsLeft) & Right(spaces & AA_Quantities(aa), charsRight)
    'add itemString to LB
    C1_AllergensList.LB_AllergenList.AddItem itemString
    'C1_AllergensList.LB_AllergenList.AddItem AA_LongNames(aa)
    'set col widths
    'C1_AllergensList.LB_AllergenList.ColumnWidths = "400,50"
End If
'-----
If AA_Catagories(aa) = 2 Then
    'make LongName-Quantity string.
    'itemString = AA_LongNames(aa) & Right("               " & AA_Quantities(aa), 14)
    itemString = Left(AA_LongNames(aa) & spaces, charsLeft2) & Right(spaces & AA_Quantities(aa), charsRight2)
    'add itemString to LB
    C1_AllergensList.LB_AllergenList2.AddItem itemString
    'C1_AllergensList.LB_AllergenList2.AddItem AA_LongNames(aa)
    'set col widths
    'C1_AllergensList.LB_AllergenList2.ColumnWidths = "400,50"
End If
Next aa


For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
    'Add Quantity information
    'Me.LB_AllergenList.List(aa, 2) = AA_Quantities
    
    'Check isDefault value in table (2 cols over from AllergenName):
    '!o! requires modification (add And AA_Selected(aa) = 1 or something)
    If (AA_Defaults(aa) = 1) Then
    Me.LB_AllergenList.Selected(aa) = True
    'De-highlight selected row:
    LB_AllergenList.ListIndex = -1
    End If
Next aa

Sheets("Calculation in progress").Select
End Sub

Sub Clear_RM_Array()
ReDim RM_array(0)

Dim Rm As Variant
For Each Rm In F5_RM.LB_RMs
    'F5_RM.LB_RMs.RemoveItem (F5_RM.LB_RMs.ListCount - 1)
    Remove_RM
Next Rm
End Sub


Sub Save_AA_Selected_small()
'Same as Save_AA_Selected, except without sheet alterations

'Sets aa_selected in accordence with allergens selected by user in the listBoxes

Dim aa, nextItem, nextItem2 As Long
nextItem = 0
nextItem2 = 0

'Setup aa_selected dimension
ReDim AA_Selected(LBound(AA_LongNames) To UBound(AA_LongNames))


''Go through each longName, and check if it is selected in LB (cat=1) or LB2 (cat=2):
''Also contains data recording to sheet code (refGH42):
'Sheets("Internal Data1").Select
''Range("R3").Value = "YES"
For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
    If (AA_Catagories(aa) = 1) Then
        If C1_AllergensList.LB_AllergenList.Selected(nextItem) Then
            AA_Selected(aa) = 1
            'Cells(5 + nextItem, 17) = 1
        Else
            AA_Selected(aa) = 0
            'Cells(5 + nextItem, 17) = 0
        End If
        nextItem = nextItem + 1
    End If
    '-----
    If (AA_Catagories(aa) = 2) Then
        If C1_AllergensList.LB_AllergenList2.Selected(nextItem2) Then
            AA_Selected(aa) = 1
            'Cells(5 + nextItem2, 19) = 1
        Else
            AA_Selected(aa) = 0
            'Cells(5 + nextItem2, 19) = 0
        End If
        nextItem2 = nextItem2 + 1
    End If
Next aa

'Debug code:
'Dim ii As Long
'For ii = LBound(AA_Selected) To UBound(AA_Selected)
'MsgBox AA_ShortNames(ii) & " = " & AA_Selected(ii)
'Next ii

Sheets("Calculation in progress").Select

End Sub

Attribute VB_Name = "C2_VITALGrid_only"
Attribute VB_Base = "0{4FA02659-89BD-4F23-B506-9BB2B44CEFC1}{F62D3077-F6F1-40A9-9820-BE2D436D9392}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim my_ActionLevels As Variant
Dim mynTNs As Long
Dim mynGluts As Long
Dim mynALs As Long




Private Sub CB_Back_Click()
Unload C2_VITALGrid_only
C1_AllergensList.Show ''vbmodeless
End Sub

Private Sub CB_Next_Click()
'Show next form, and unload current
Unload C2_VITALGrid_only
'Go back to front page
F1_Front.Show ''vbmodeless
End Sub

Private Sub CB_Print_Click()

'Validation------------------------------------------------
If (TB_RQ = "" Or IsNumeric(TB_RQ.Value) = False Or TB_RQ = 0) Then
    MsgBox "Valid quantity required", vbOKOnly, "VITAL Calculator"
    Exit Sub
End If

'Update grid-----------------------------------------------
UpdateActionGrid_small

createAllergenSummary


'Print-----------------------------------------------------
'!o!

'Close form
Unload C2_VITALGrid_only

End Sub
Sub createAllergenSummary()

ReDim AA_MergedNames(LBound(AA_ShortNames) To UBound(AA_ShortNames))
Dim ii, aa As Long

For ii = LBound(AA_ShortNames) To UBound(AA_ShortNames)
    Select Case LCase(AA_ShortNames(ii))
        Case "almond", "brazil nut", "cashew", "hazelnuts", "macadamia nut", _
                "pecan", "pine nut", "pistachio nut", "walnut"
            AA_MergedNames(ii) = "Tree Nuts"
        Case "wheat", "rye", "barley", "oats", "spelt"
            AA_MergedNames(ii) = "Gluten"
    End Select
Next ii


nAls = UBound(AA_ShortNames) + 1
mynTNs = 0
mynGluts = 0
For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            mynTNs = mynTNs + 1
        Case "gluten"
            mynGluts = mynGluts + 1
    End Select

Next aa

'mynALs = nAls - mynTNs - myngluts + 2
mynALs = nAls + 2


   On Error Resume Next
    Application.DisplayAlerts = False
    Sheets("Action Levels").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0


    Sheets("Allergen Template").Select
    Sheets("Allergen Template").Copy Before:=Sheets("Allergens and Action Levels")
    Sheets("Allergen Template (2)").Select
    Sheets("Allergen Template (2)").Name = "Action Levels"
    ActiveWindow.ScrollWorkbookTabs Sheets:=-1





createNewTable1
createNewTable9

Sheets("Action Levels").Select
With ActiveSheet
    .ExportAsFixedFormat Type:=xlTypePDF, _
    filename:=("VITAL Action Levels- " & ProductName & "  " _
    & Format(Date, "dd-mmm-yy") & "  " & Format(Time, "hhmmss")), _
    Quality:=xlQualityStandard, IncludeDocProperties:=False, _
    IgnorePrintAreas:=False, OpenAfterPublish:=True
End With


End Sub
Sub createNewTable1()
'Creates table 1 for detailed summary
'Runs through each allergen, sums the ppm etc, and then pushes info
'to sheet: Detailed Summary New
Dim aa, rr, pp, ii As Long
Dim x As Double

Dim aa_Table1 As Variant

'---------------------------
'--------Setup arrays-------
'---------------------------

aa_Table1 = Array()
ReDim aa_Table1(0 To mynALs - 1, 0 To 3)
'This is the final table of condensed values for table 1, merging Tree Nuts and Glutens
'Values 0 to 3 will be the equivalents of the values in the table
'0 Name
'1 ref dose (ppm)
'2 ALvl 1
'3 Alvl 2


'---------------------------
'-----Set Defaults----------
'---------------------------


For aa = 0 To mynALs - 1
    aa_Table1(aa, 0) = ""
    aa_Table1(aa, 1) = 0
    aa_Table1(aa, 2) = 0
    aa_Table1(aa, 3) = 0

Next aa
aa_Table1(0, 0) = "Tree Nuts (Total)"
aa_Table1(0, 1) = my_ActionLevels(0, 0)
aa_Table1(0, 2) = my_ActionLevels(0, 1)
aa_Table1(0, 3) = my_ActionLevels(0, 2)

'aa_Table1(0, 1) = AA_Quantities(0)
'aa_Table1(0, 2) = ActionLevelsArray(0, 0)
'aa_Table1(0, 3) = ActionLevelsArray(0, 2)

aa_Table1(1 + mynTNs, 0) = "Gluten-containing cereals (total)"
aa_Table1(1 + mynTNs, 1) = my_ActionLevels(10, 0)
aa_Table1(1 + mynTNs, 2) = my_ActionLevels(10, 1)
aa_Table1(1 + mynTNs, 3) = my_ActionLevels(10, 2)

For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
        aa_Table1(aa + 1, 0) = "   " & AA_ShortNames(aa)
        'aa_Table1(aa + 1, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 1, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 1, 3) = ActionLevelsArray(aa, 2)
        
        aa_Table1(aa + 1, 1) = ""
        aa_Table1(aa + 1, 2) = ""
        aa_Table1(aa + 1, 3) = ""
        
        Case "gluten"
        aa_Table1(aa + 2, 0) = "   " & AA_ShortNames(aa)
        'aa_Table1(aa + 2, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 2, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 2, 3) = ActionLevelsArray(aa, 2)
        
        aa_Table1(aa + 2, 1) = ""
        aa_Table1(aa + 2, 2) = ""
        aa_Table1(aa + 2, 3) = ""
        
        Case Else
        aa_Table1(aa + 2, 0) = AA_ShortNames(aa)
        aa_Table1(aa + 2, 1) = my_ActionLevels(aa, 0)
        aa_Table1(aa + 2, 2) = my_ActionLevels(aa, 1)
        aa_Table1(aa + 2, 3) = my_ActionLevels(aa, 2)
    
    End Select
Next aa




'------------------------------
'------Deselected--------------
'------------------------------

'Note, Tree Nuts and Gluten are always selected.

For aa = 0 To nAls - 1
    If AA_Selected(aa) = 0 Then
        Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            'aa_Table1(0, 1) = "Not assessed"
            'aa_Table1(0, 2) = ""
            'aa_Table1(0, 3) = ""
            'aa_Table1(0, 4) = ""
            'aa_Table1(0, 5) = ""
            'aa_Table1(0, 6) = ""
            aa_Table1(aa + 1, 1) = "Not assessed"
            aa_Table1(aa + 1, 2) = ""
            aa_Table1(aa + 1, 3) = ""
        Case "gluten"
            aa_Table1(aa + 2, 1) = "Not assessed"
            aa_Table1(aa + 2, 2) = ""
            aa_Table1(aa + 2, 3) = ""
        Case Else
            aa_Table1(aa + 2, 1) = "Not assessed"
            aa_Table1(aa + 2, 2) = ""
            aa_Table1(aa + 2, 3) = ""
        End Select
    End If
Next aa



Sheets("Action Levels").Select

'------Fill Grid with values:
Cells(11, 3).Value = "Action Level (ppm) where Reference Amount/Serving Size is " & TB_RQ.Value & "g"
Dim my_Offset As Long

For aa = 0 To mynALs - 1
    Select Case aa
    'The cases are "Tree Nuts (total)" = 0, which will merge two rows, and enter into the top
    'Case for other tree nuts, offset by 1 row
    'Case for Glutens, total, merge two rows, which is offset by a single extra row,
    'Case for other glutens, single row, offset by 2 rows
    'Case for other allergens, single row, offset by 2 rows
    
    Case 0
        my_Offset = 0
        'Merge Cells
        For ii = 0 To 3
            Range(Cells(17 + aa, 1 + ii), Cells(17 + aa + 1, 1 + ii)).Merge
            Range(Cells(17 + aa, 1 + ii), Cells(17 + aa + 1, 1 + ii)).WrapText = True
            
        Next ii
        
        
        'Values:
        
        'name
        Cells(17 + aa, 1 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa, 1 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            Cells(17 + aa, 1 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            Cells(17 + aa, 1 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa, 1 + 3).Value = aa_Table1(aa, 3)
        
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa, 1 + 2).Value = ""
            Cells(17 + aa, 1 + 3).Value = ""
        
            Range(Cells(17 + aa, 1 + 1), Cells(17 + aa, 1 + 3)).Merge
            Cells(17 + aa, 1).Interior.Color = RGB(255, 255, 255)
            
            
        End If
        
    
    Case 1 To mynTNs
    my_Offset = 1
    
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 1 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 1 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            'Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            'Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 1 + 3).Value = aa_Table1(aa, 3)
        
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 1 + 2).Value = ""
            Cells(17 + aa + my_Offset, 1 + 3).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 1 + 1), Cells(17 + aa + my_Offset, 1 + 3)).Merge
            Cells(17 + aa + my_Offset, 1).Interior.Color = RGB(255, 255, 255)
            
            
        End If
        
    
    
    Case mynTNs + 1
        
        
    my_Offset = 1
    
    'Merge Cells
    For ii = 0 To 3
        Range(Cells(17 + aa + my_Offset, 1 + ii), Cells(17 + aa + my_Offset + 1, 1 + ii)).Merge
        Range(Cells(17 + aa + my_Offset, 1 + ii), Cells(17 + aa + my_Offset + 1, 1 + ii)).WrapText = True
            
    Next ii
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 1 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 1 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 1 + 3).Value = aa_Table1(aa, 3)
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 1 + 2).Value = ""
            Cells(17 + aa + my_Offset, 1 + 3).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 1 + 1), Cells(17 + aa + my_Offset, 1 + 3)).Merge
            Cells(17 + aa + my_Offset, 1).Interior.Color = RGB(255, 255, 255)
            
        End If
        
    
    
        
    Case mynTNs + 2 To mynTNs + mynGluts + 1
    my_Offset = 2
    
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 1 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 1 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            'Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            'Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 1 + 3).Value = aa_Table1(aa, 3)
        
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 1 + 2).Value = ""
            Cells(17 + aa + my_Offset, 1 + 3).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 1 + 1), Cells(17 + aa + my_Offset, 1 + 3)).Merge
            Cells(17 + aa + my_Offset, 1).Interior.Color = RGB(255, 255, 255)
            
            
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    

    
    Case mynTNs + mynGluts + 2 To mynALs
    my_Offset = 2
  
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 1 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 1 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            Cells(17 + aa + my_Offset, 1 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 1 + 3).Value = aa_Table1(aa, 3)
        
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 1 + 2).Value = ""
            Cells(17 + aa + my_Offset, 1 + 3).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 1 + 1), Cells(17 + aa + my_Offset, 1 + 3)).Merge
            Cells(17 + aa + my_Offset, 1).Interior.Color = RGB(255, 255, 255)
            
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    End Select
    

Next aa


'--------------------------------
'---------Make Pretty------------
'--------------------------------

Range(Cells(17, 1), Cells(17 - 1 + mynALs + 2, 1 + 3)).Select



With Selection
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlThin
End With

End Sub

Sub createNewTable9()
Dim aa_Table9 As Variant
Dim ii As Long

aa_Table9 = Array()
ReDim aa_Table9(0 To 4, 0 To 1)

With Sheets("Allergens and Action Levels")
    For ii = 0 To 4
        aa_Table9(ii, 0) = .Cells(5 + ii, 9)
        aa_Table9(ii, 1) = .Cells(5 + ii, 10)
    Next ii
End With

With Sheets("Action Levels")
    For ii = 0 To 4
        Cells(13 + 7 * ii, 6) = aa_Table9(ii, 0)
        Cells(13 + 7 * ii, 7) = aa_Table9(ii, 1)
    Next ii

End With
End Sub
Private Sub CB_Update_Click()
UpdateActionGrid_small
TB_RQ.SetFocus
End Sub

Private Sub Image3_Click()
MsgBox "The Reference Amount/Serving Size is the maximum amount of a food eaten in a typical eating occasion. This may be the same as the ""serving size"" on the nutrition information panel or it may be appropriate that the reference amount is considered to be the whole product as presented to the consumer." & _
vbCrLf & vbCrLf & "NB. Ingredient suppliers (for whom Action Levels are not relevant ) may add an arbitrary amount here - in the final version a separate summary will be created which will not display Action Levels.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image4_Click()
MsgBox "The VITAL Action Level Grid is an interactive tool composed of two Action Levels for each allergen of interest which relate to labelling recommendations. Enter the Reference Amount/Serving Size and click ""Update"" to display Action Levels.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub StIm1_Click()
goToSTL
End Sub

Private Sub TB_RQ_Enter()
'Maybe not:
'UpdateActionGrid_small
End Sub

Private Sub UserForm_Activate()

ThisWorkbook.Activate
'----------
Dim currSheet As Worksheet
Set currSheet = ActiveSheet

'Setup gr string, holding greaterThanEqualTo sign:
If currSheet.Name <> "Internal Data1" Then Sheets("Internal Data1").Select
gr = ">="
On Error Resume Next
gr = Range(greaterThanEqualTOAddress).Value
On Error GoTo 0
If gr = "" Then gr = ">="
currSheet.Select
'----------

ListBox2.BackColor = RGB(141, 198, 63)
ListBox3.BackColor = RGB(206, 36, 43)

'UpdateActionGrid_small

Sheets("Calculation in progress").Select

End Sub



Sub UpdateActionGrid_small()

'Validation
If (TB_RQ = "" Or IsNumeric(TB_RQ.Value) = False Or TB_RQ = 0) Then
    MsgBox "Valid quantity required", vbOKOnly, "VITAL Calculator"
    Exit Sub
End If

'Update arrays
pushAllergensToArrays

'Change colours
ListBox2.BackColor = RGB(141, 198, 63)
ListBox3.BackColor = RGB(206, 36, 43)

'setup AG_names and AG_TotalProtein
AG_names = Array()
AG_TotalProtein = Array()
ReDim AG_names(LBound(AA_ShortNames) To UBound(AA_ShortNames))
ReDim AG_TotalProtein(LBound(AA_ShortNames) To UBound(AA_ShortNames))
Dim ii As Long
For ii = LBound(AA_ShortNames) To UBound(AA_ShortNames)
    AG_names(ii) = AA_ShortNames(ii)
    AG_TotalProtein(ii) = AA_Quantities(ii)
Next ii

Dim item1, item2, item3 As String

'Clear listboxes
ListBox1.Clear
ListBox2.Clear
ListBox3.Clear
'-----
my_ActionLevels = Array()
ReDim my_ActionLevels(LBound(AG_names) To UBound(AG_names), 0 To 2)
'This will be the size of the number of allergens
'0 will be total protein required
'1 will be action level 1
'2 will be action level 2


'Put names and values into grid
For ii = LBound(AG_names) To UBound(AG_names)

    'default processing
    item1 = AG_names(ii)
    item2 = "<" & CStr(Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)) & " ppm"
    item3 = gr & CStr(Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)) & " ppm"
    
    
    
    'Extra processing
    'Sulphites
    If LCase(AG_names(ii)) = "sulphites" Then
        item2 = "<" & CStr(10) & " ppm"
        item3 = gr & CStr(10) & " ppm"
    End If
    'Cereals
    If (LCase(AG_names(ii)) = "wheat") Or (LCase(AG_names(ii)) = "rye") Or (LCase(AG_names(ii)) = "barley") Or (LCase(AG_names(ii)) = "oats") Or (LCase(AG_names(ii)) = "spelt") Then
        item2 = "<" & CStr(min(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2))) & " ppm"
        item3 = gr & CStr(min(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2))) & " ppm"
    End If


    ListBox1.AddItem item1
    ListBox2.AddItem item2
    ListBox3.AddItem item3
    
    my_ActionLevels(ii, 0) = AG_TotalProtein(ii)
    my_ActionLevels(ii, 1) = CStr(min(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)))
    my_ActionLevels(ii, 2) = item3

Next ii

End Sub
Function min(ByVal x As Long, ByVal Y As Long) As Long
If (x < Y) Then
    min = x
Else
    min = Y
End If
End Function
Attribute VB_Name = "C9_ActionGrid_controller"
Option Explicit
Option Base 0

'Called by both forms with an action grid (F7_1,C2_VITALGrid_only)
Sub UpdateActionGrid_tester_withform(myform As UserForm)

If myform.TB_RQ = "" Then
    MsgBox "Quantity required", vbOKOnly, "VITAL Calculator"
    Exit Sub
End If

'Update arrays
pushAllergensToArrays

'Change colours
ListBox2.BackColor = RGB(141, 198, 63)
ListBox3.BackColor = RGB(206, 36, 43)

'setup AG_names and AG_TotalProtein
AG_names = Array()
AG_TotalProtein = Array()
ReDim AG_names(LBound(AA_ShortNames) To UBound(AA_ShortNames))
ReDim AG_TotalProtein(LBound(AA_ShortNames) To UBound(AA_ShortNames))
Dim ii As Long
For ii = LBound(AA_ShortNames) To UBound(AA_ShortNames)
    AG_names(ii) = AA_ShortNames(ii)
    AG_TotalProtein(ii) = AA_Quantities(ii)
Next ii

Dim item1, item2, item3 As String

'Clear listboxes
ListBox1.Clear
ListBox2.Clear
ListBox3.Clear
'-----

'Put names and values into grid
For ii = LBound(AG_names) To UBound(AG_names)

    'default processing
    item1 = AG_names(ii)
    item2 = "<" & CStr(Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)) & " ppm"
    item3 = ">" & CStr(Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)) & " ppm"
    
    'Extra processing
    'Sulphites
    If LCase(AG_names(ii)) = "sulphites" Then
        item2 = "<" & CStr(10) & " ppm"
        item3 = ">" & CStr(10) & " ppm"
    End If
    'Cereals
    If (LCase(AG_names(ii)) = "wheat") Or (LCase(AG_names(ii)) = "rye") Or (LCase(AG_names(ii)) = "barley") Or (LCase(AG_names(ii)) = "oats") Or (LCase(AG_names(ii)) = "spelt") Then
        item2 = "<" & CStr(sf_minLong(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2))) & " ppm"
        item3 = ">" & CStr(sf_minLong(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2))) & " ppm"
    End If
    
    ListBox1.AddItem item1
    ListBox2.AddItem item2
    ListBox3.AddItem item3

Next ii

End Sub



Sub test11()
MsgBox Chr(100)
End Sub
Attribute VB_Name = "D1_Save_and_Fill_data"
Option Explicit

Sub F1_save()

End Sub
'-
Sub F1_load()

End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F2_save()
Sheets("Internal Data1").Select
Range("N3").Value = ProductName
Range("N4").Value = ProductReference
Range("N5").Value = ProductDate
Sheets("Calculation in progress").Select
End Sub
'-
Sub F2_load()
Sheets("Internal Data1").Select
ProductName = Range("N3").Value
ProductReference = Range("N4").Value
ProductDate = Range("N5").Value
Sheets("Calculation in progress").Select
End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F3_save()
    'This method not used- code in form module instead.
    '(See refGH42)
End Sub
'-
Sub F3_load()
    'This method not used- code in form module instead.
    '(See refQW21)
End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F4_save()
'NA
End Sub
'-
Sub F4_load()
'NA
End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F5_save()

End Sub
'-
Sub F5_load()

End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F6_save()

End Sub
'-
Sub F6_load()

End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F7_save()
Sheets("Internal Data1").Select
Range("AH3").Value = TB_Con.Value
Range("AH4").Value = TB_Dil.Value
Range("AH5").Value = TB_Ass.Value
End Sub
'-
Sub F7_load()
Sheets("Internal Data1").Select
TB_Con.Value = Range("AH3").Value
TB_Dil.Value = Range("AH4").Value
TB_Ass.Value = Range("AH5").Value
End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F7_1_save()
Sheets("Internal Data1").Select
Range("AH6").Value = TB_RQ.Value
End Sub
'-
Sub F7_1_load()
Sheets("Internal Data1").Select
TB_RQ.Value = Range("AH6").Value
End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Sub F8_save()

End Sub
'-
Sub F8_load()

End Sub
'((((((((((((((((((((((((((((((((((((((((((((((((((
Attribute VB_Name = "Data_Variables_mod"
Option Explicit
Option Base 0

'F2_Product
Public ProductName As String
Public ProductReference As String
Public ProductDate As String


'F5_1
Public ALRM_checkboxes As Variant
Public ALRM_quantities As Variant
Public RMinfoSource As Variant


'F6_1
Public ALPI_checkboxes As Variant
Public ALPI_quantities As Variant


'F7_
Public ProductConcentration As Variant
Public ProductDilution As Variant
Public ConcentrationAssumption As Variant


'F7_1
Public ProductReferenceQuantity As Variant
Public ActionLevelsArray As Variant


'F8_Summaries
Public makeDetailed As Boolean
Public makeShort As Boolean

Public RMppm As Variant
Public PIppm As Variant
Public Overallppm As Variant

Public AL_Particulates As Variant
Public AL_Intentionals As Variant
Public AL_ActionLevelIDs As Variant  'AL1,AL2,IntAdded,or blank
Public AL_ActionLevelColours As Variant

Attribute VB_Name = "Edit_Jump_Controller"
Option Explicit
Option Base 0
Sub Edit_Jump(FormNo As Long)
With Sheets("Internal Data1")
    .Range("F7").Value = "NO"
End With
ViewOnly = False
Update_Jump_Arrays (FormNo)
Jump_To_Form (FormNo)

End Sub
Sub Jump_To_Form(myFormNo As Long)
Select Case myFormNo
    Case 2
        Unload F1_Edit_Jump
        Unload F1_Front
        Load F2_Product
        F2_Product.Show '!o!: 'vbmodeless
    Case 3
        Unload F1_Edit_Jump
        Unload F1_Front
        Load F3_AllergensList
        F3_AllergensList.Show

    Case 5
        Unload F1_Edit_Jump
        Unload F1_Front
        Load F5_RM
        F5_RM.Show
    
    Case 6
        Unload F1_Edit_Jump
        Unload F1_Front
        Load F6_PI
        F6_PI.Show

    Case 7
        Unload F1_Edit_Jump
        Unload F1_Front
        Load F7_
        F7_.Show
End Select

End Sub

Sub Update_Jump_Arrays(myFormNo As Long)
'----This sub will update applicable arrays before permitting the jump
'to a position in the program. Fno is the Form number that will be jumped to
'and this will go through all of the arrays that are prepped before this

pushAllergensToArrays
'Pull F2 information

Select Case myFormNo
    Case 3
    pushAllergensToArraysF2
    
    Case 5
    pushAllergensToArraysF2
    pushAllergensToArraysF3
    pushAllergensToArraysF7
    
    Case 6
    
    pushAllergensToArraysF2
    pushAllergensToArraysF3
    pushAllergensToArraysF7
    pushAllergensToArraysF5
    

    Case 7
    pushAllergensToArraysF2
    pushAllergensToArraysF3
    'pushAllergensToArraysF5
    'pushAllergensToArraysF6
    
    Case 8
    pushAllergensToArraysF2
    pushAllergensToArraysF3
    pushAllergensToArraysF7
    pushAllergensToArraysF5
    pushAllergensToArraysF6

End Select

End Sub
Sub pushAllergensToArraysF2()
With Sheets("Internal Data1")
        ProductName = .Cells(3, 14)
        ProductReference = .Cells(4, 14)
        ProductDate = .Cells(5, 14)
    End With
End Sub
Sub pushAllergensToArraysF3()
'Fills arrays with info for allergens (longnames,shortnames,quantities)
'NB Requires add_to_array()

ThisWorkbook.Activate
Dim currSheet, ALsheet As Worksheet

'Record currentsheet as object- to go back to later
Set currSheet = ActiveSheet
Set ALsheet = Sheets("Allergens and Action Levels")
ALsheet.Select


'AA_LongNames = Array("Almond", "Brazil nut", "Cashew", "Hazelnuts", _
'"Macadamia nut", "Pecan", "Pine nut", "Pistachio nut", "Walnut", "Wheat", _
'"Rye", "Barley", "Oats", "Spelt", "Egg", "Crustacea", "Fish", "Milk", _
'"Peanut", "Sesame seed", "Soy", "Sulphites", "Lupin", "Mustard")

'Clear AA_LongNames
AA_LongNames = Array()
AA_ShortNames = Array()
AA_Quantities = Array()
AA_Defaults = Array()
AA_Catagories = Array()
AA_MergedNames = Array()

Dim currRow As Long
Dim colIndex, colNum As Variant
Dim cat As String

'Columns and catagories arrays
Dim columns() As Variant
Dim catagories() As Variant
columns = Array(1, 5)
catagories = Array(1, 2)   '(NZ/Au,Other). 1=First listbox, 2=Second listbox


'Fill arrays with values from sheet
'For Each colNum In Array(1, 5, 9)  'Columns of longNames
For colIndex = LBound(columns) To UBound(columns)
    'First row to check
    currRow = 6
    'Current column of longNames
    colNum = columns(colIndex)
    'Current Catagory of allergen
    cat = catagories(colIndex)
    While (Cells(currRow, colNum) <> "")
        'Fill AA_LongNames
        add_to_array Cells(currRow, colNum), AA_LongNames
        'Fill AA_ShortNames
        add_to_array Cells(currRow, colNum + 1), AA_ShortNames
        'Fill AA_Quantities (ref doses and conc)
        add_to_array Cells(currRow, colNum + 2), AA_Quantities
        'Fill AA_Catagories
        add_to_array cat, AA_Catagories
        '
        currRow = currRow + 1
    Wend
Next colIndex

'!o! this code may be placeholding- relies on two nondefault allergens at the end??
'Fill Defaults array (1=Selected)
ReDim Preserve AA_Defaults(LBound(AA_LongNames) To UBound(AA_LongNames))
Dim ii As Long
For ii = LBound(AA_LongNames) To UBound(AA_LongNames)
    'MsgBox AA_ShortNames(ii)
    'MsgBox AA_Quantities(ii)
    AA_Defaults(ii) = 1
Next ii

For ii = (UBound(AA_LongNames) - 1) To UBound(AA_LongNames)
    AA_Defaults(ii) = 0
Next ii


'Setup special cases for Glutens and Tree Nuts

ReDim AA_MergedNames(LBound(AA_ShortNames) To UBound(AA_ShortNames))

For ii = LBound(AA_ShortNames) To UBound(AA_ShortNames)
    Select Case LCase(AA_ShortNames(ii))
        Case "almond", "brazil nut", "cashew", "hazelnuts", "macadamia nut", _
                "pecan", "pine nut", "pistachio nut", "walnut"
            AA_MergedNames(ii) = "Tree Nuts"
        Case "wheat", "rye", "barley", "oats", "spelt"
            AA_MergedNames(ii) = "Gluten"
    End Select
Next ii




'-------------------------------------
'-------------------------------------

With Sheets("Internal Data1")
    nTBs = 10
    
    'Number of allergens
    nAls = CInt(.Cells(3, 20).Value)
    
    
End With

nPages = (nAls + nTBs - 1) \ nTBs
'blank_acceptable is an array that is a flag of whether we are
'checking for that allergen. It goes up to the number of TBs that
'will be seen overall for each RM, but one can check it just up
'to nALs to see whether or not we need to check for values etc.

ReDim blank_acceptable(0 To (nTBs * nPages - 1))

For ii = 0 To (nTBs * nPages - 1)
    blank_acceptable(ii) = 1
    On Error Resume Next
    blank_acceptable(ii) = (1 - AA_Selected(ii))
    On Error GoTo 0
Next ii


'-----------------------------------------
'-----------------------------------------





'Go through each longName, and check if it is selected in LB (cat=1) or LB2 (cat=2):
'Also contains data recording to sheet code (refGH42):

Sheets("Internal Data1").Select


Dim nextItem, nextItem2 As Long
Dim aa As Long

ReDim AA_Selected(0 To nAls - 1)
nextItem = 0
nextItem2 = 0

For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
    If (AA_Catagories(aa) = 1) Then
        If Cells(5 + nextItem, 17) = 1 Then 'F3_AllergensList.LB_AllergenList.Selected(nextItem) Then
            AA_Selected(aa) = 1
            'Cells(5 + nextItem, 17) = 1
        Else
            AA_Selected(aa) = 0
            'Cells(5 + nextItem, 17) = 0
        End If
        nextItem = nextItem + 1
    End If
    '-----
    If (AA_Catagories(aa) = 2) Then
        If Cells(5 + nextItem2, 19) = 1 Then 'F3_AllergensList.LB_AllergenList2.Selected(nextItem2) Then
            AA_Selected(aa) = 1
            'Cells(5 + nextItem2, 19) = 1
        Else
            AA_Selected(aa) = 0
            'Cells(5 + nextItem2, 19) = 0
        End If
        nextItem2 = nextItem2 + 1
    End If
Next aa

currSheet.Activate


End Sub
Sub add_to_array(ByVal x As Variant, ByRef tArray As Variant)

Dim LL, UU As Long
LL = LBound(tArray)
UU = UBound(tArray)

        ReDim Preserve tArray(LL To (UU + 1))
        tArray(UU + 1) = x

End Sub
Sub pushAllergensToArraysF5()
'-----------------------------------------
'--------From F5_RM-----------------------
'-----------------------------------------


Dim ii As Long
Dim Qsum As Double
Dim qq As Long


With Sheets("Internal Data1")
    nRMs = CInt(.Cells(3, 28).Value)
    'Add RMs to RM_array from sheet
    RM_array = Array()
    ReDim RM_array(0 To (nRMs - 1))
    
    For ii = 0 To nRMs - 1
          RM_array(ii) = .Cells(5 + ii, 25).Value
    Next ii
    
    '------------------------------------------------------
    
    'Add Qs to RM_Q_array (and sheet)
    RM_Q_array = Array()
    ReDim RM_Q_array(0 To (nRMs - 1))
    
    For ii = 0 To (nRMs - 1)
          RM_Q_array(ii) = .Cells(5 + ii, 26).Value
    Next ii
    '-----------------------------------------------------
    
    'Note, when saving, there is a check at this point for sum to 100. I am
    'assuming that the save has gone properly, and that only happens if it
    'sums to 100. Thus I have no check here.


'-----

'-----

    'Add Refs to Ref_array (and sheet)
    Ref_array = Array()
    ReDim Ref_array(0 To (nRMs - 1)) '

    For ii = 0 To nRMs - 1
          Ref_array(ii) = .Cells(5 + ii, 27).Value
    Next ii


    Sheets("Calculation in progress").Select

End With

'-----------------------------------------


'-----------------------------------------
'--------From F5_1------------------------
'-----------------------------------------


With Sheets("Internal Data1")
    nTBs = 10
    
    'Number of allergens
    nAls = CInt(.Cells(3, 20).Value)
    
    
    'Setup RMinfoSources:
    RMinfoSource = Array()
    ReDim RMinfoSource(0 To nRMs - 1)
    
    
    'Setup data arrays:
    ALRM_checkboxes = Array()
    ReDim ALRM_checkboxes(0 To nAls - 1, 0 To nRMs - 1)
    
    ALRM_quantities = Array()
    ReDim ALRM_quantities(0 To nAls - 1, 0 To nRMs - 1)

End With

nPages = (nAls + nTBs - 1) \ nTBs
'blank_acceptable is an array that is a flag of whether we are
'checking for that allergen. It goes up to the number of TBs that
'will be seen overall for each RM, but one can check it just up
'to nALs to see whether or not we need to check for values etc.

ReDim blank_acceptable(0 To (nTBs * nPages - 1))

For ii = 0 To (nTBs * nPages - 1)
    blank_acceptable(ii) = 1
    On Error Resume Next
    blank_acceptable(ii) = (1 - AA_Selected(ii))
    On Error GoTo 0
Next ii







'Dim ALi, RMi As Long
'With Sheets("Internal Data1")
'
'    For ALi = 0 To nAls - 1
'        For RMi = 0 To nRMs - 1
'            ALRM_quantities(ALi, RMi) = .Cells(10 + 6 * RMi, 4 + ALi)
'
'comments if I end up having to do this
'RMinfosource - from internal data2, 6+6*rmindex+5,3
'ALRM_checkboxes
'if intentional - [ali,rmi] =1 from  cells(7+rim*6,4+ali) = 1
'if particulate - ''   ''   = 2 from cells(8+........) = 1
'if readily -       ''  ''   = 3 from cells(9+......) = 1)
'ALRM_Quantities
'6+rmi*6 + 4, 4+ali
'this will only be needed if the summary sheets are not updated
'MsgBox "retrieveRMdata started"

Sheets("Internal Data2").Select
Dim aa, RMi As Long
For RMi = 0 To nRMs - 1
    For aa = 0 To nAls - 1
        If blank_acceptable(aa) = 0 Then 'if this is a checkable allergen, then check values
        
            'Intentionally added:
                
            ALRM_checkboxes(aa, RMi) = ""
            ALRM_quantities(aa, RMi) = ""
               
            If CStr(Cells(6 + 6 * (RMi) + 1, 4 + aa).Value) = "1" Then
                ALRM_checkboxes(aa, RMi) = 1
            End If
            
            'Particulate:
            If CStr(Cells(6 + 6 * (RMi) + 2, 4 + aa)) = "1" Then
                ALRM_checkboxes(aa, RMi) = 2
            End If
            
            'Readily disp:
            If CStr(Cells(6 + 6 * (RMi) + 3, 4 + aa)) = "1" Then
               ALRM_checkboxes(aa, RMi) = 3
               ALRM_quantities(aa, RMi) = Cells(6 + 6 * (RMi) + 4, 4 + aa)
            End If
            
        End If
    Next aa
Next RMi

Sheets(defaultSheet).Select
    
    


End Sub

Sub pushAllergensToArraysF6()
With Sheets("Internal Data1")
    If (IsNumeric(.Range("AF3")) = True) And (.Range("AF3") > 0) Then
        nPIs = .Range("AF3")
    Else
        nPIs = 0
    End If
    PI_array = Array()
    If nPIs > 0 Then
        ReDim PI_array(0 To nPIs - 1)
        Dim ii As Long
        For ii = 0 To nPIs - 1
            PI_array(ii) = .Cells(4 + ii, 30).Value
        Next ii
    End If
End With

End Sub
Sub pushAllergensToArraysF7()

Dim ii As Long
Dim item2, item3 As String


With Sheets("Internal Data1")
    nTBs = 10
    
    'Number of allergens
    nAls = CInt(.Cells(3, 20).Value)
    
    
End With


With Sheets("Internal Data1")
    ProductDilution = .Cells(4, 34).Value
    ProductConcentration = .Cells(3, 34).Value
    ProductReferenceQuantity = .Cells(6, 34).Value
    ConcentrationAssumption = .Cells(5, 34).Value
End With

With Sheets("Internal Data1")
    If LCase(.Range("AH7").Value) <> "false" Then 'reference amount required
        Reference_Required = True
    Else
        Reference_Required = False
    End If
End With
    ''Sheet data:
    'Sheets("Internal Data1").Select
    'Range("AH3").Value = TB_Con.Value
    'Range("AH4").Value = TB_Dil.Value
    
        'Save data:
   ' ProductReferenceQuantity = TB_RQ.Value
   ' 'Sheet data:
   ' Sheets("Internal Data1").Select
   ' Range("AH6").Value = TB_RQ.Value
ActionLevelsArray = Array()
ReDim ActionLevelsArray(0 To nAls - 1, 0 To 2)

For ii = 0 To nAls - 1

    'default processing
    If Reference_Required = True Then
        
        item2 = "<" & CStr(Round(AA_Quantities(ii) * 1000# / ProductReferenceQuantity, 2)) & " ppm"
        item3 = gr & CStr(Round(AA_Quantities(ii) * 1000# / ProductReferenceQuantity, 2)) & " ppm"
        ActionLevelsArray(ii, 0) = AA_Quantities(ii) * 1000# / ProductReferenceQuantity
        ActionLevelsArray(ii, 1) = item2
        ActionLevelsArray(ii, 2) = item3
    Else
    End If
Next ii
    
With Sheets("Internal Data1")
    ProductName = .Cells(3, 14)
    ProductReference = .Cells(4, 14)
    ProductDate = .Cells(5, 14)
End With


        
End Sub
Attribute VB_Name = "F0_Disclaimer"
Attribute VB_Base = "0{2530792B-62E1-42C2-ADF7-6ADE49F202F2}{DD1D8CB5-AC19-4B3F-846A-551B4346AF73}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 0

Private Sub CB_Back_Click()
'Exit to sheet
Unload F0_Disclaimer
Sheets("Calculator").Select
End Sub

Private Sub CB_Next_Click()

'Show next form, and unload current
Unload F0_Disclaimer
F1_Front.Show '''vbmodeless
End Sub



Private Sub StIm1_Click()

On Error Resume Next
ActiveWorkbook.FollowHyperlink Address:="http://stlnz.com", NewWindow:=True
On Error GoTo 0



End Sub
Sub goToSTL()
Const Hyper As String = "http://stlnz.com/"
MsgBox Hyper
'On Error Resume Next
Application.FollowHyperlink "http://stlnz.com/"  ' NewWindow:=True
'On Error GoTo 0
End Sub
Private Sub UserForm_Activate()
Application.ScreenUpdating = False



ThisWorkbook.Activate

TextBox1.SetFocus
TextBox1.CurLine = 1

Sheets("Calculation in progress").Select


Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "F1_Edit_Jump"
Attribute VB_Base = "0{459994C2-B7C0-4CC0-874B-61329C63C522}{285665AA-20D9-4D07-98C9-0C5B8D183F69}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_ALs_Click()
Edit_Jump (3)
End Sub

Private Sub CB_Cancel_Click()
Unload F1_Edit_Jump
End Sub

Private Sub CB_Hydra_Click()
Edit_Jump (7)
End Sub

Private Sub CB_PI_Click()
Edit_Jump (6)
End Sub

Private Sub CB_RM_Click()
Edit_Jump (5)
End Sub

Private Sub CB_Start_Click()
Edit_Jump (2)
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "F1_Front"
Attribute VB_Base = "0{AA218BE4-4FCE-47AE-A903-BFB3179946F5}{7CB0463D-70B7-44E1-98B4-F3E0A8EA428E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 0

Private Sub CB_Edit_Click()
ViewOnly = False
Dim ReturnSheet As String

'Delete report sheets if they exist:
    On Error Resume Next
    Application.DisplayAlerts = False
    Sheets("Short Summary").Delete
    Sheets("Detailed Summary").Delete
    Sheets("Detailed Summary2").Delete
    Sheets("Action Levels").Delete
    Sheets("Allergen Summary by PI").Delete
    Sheets("Allergen Summary by RM").Delete
    Sheets("Overall Summary").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    
ReturnSheet = ActiveSheet.Name
Sheets("Internal Data1").Select
Range("F4").Value = "NO"
Range("F5").Value = "NO"
Range("F6").Value = "NO"
Sheets(ReturnSheet).Select
    

'Unload F1_Front
'F2_Product.Show '!o!: 'vbmodeless

F1_Edit_Jump.Show '!o!: 'vbmodeless


End Sub

Private Sub CB_New_Click()
Dim ret As String

''Save as:
ret = SaveAsFile

If (LCase(ret) = "not saved") Then
    Exit Sub
    '(ie do nothing. user can select Edit or New once again.)
End If

'--------------------------


ViewOnly = False

'Clear any data from IntData sheets:
'!o!
ClearInternalData

'Delete report sheets if they exist:
    On Error Resume Next
    Application.DisplayAlerts = False
    Sheets("Short Summary").Delete
    Sheets("Detailed Summary").Delete
    Sheets("Detailed Summary2").Delete
    Sheets("Action Levels").Delete
    Sheets("Allergen Summary").Delete
    Sheets("Allergen Summary by PI").Delete
    Sheets("Allergen Summary by RM").Delete
    Sheets("Long Summary").Delete
    Sheets("Overall Summary").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    
ActiveWorkbook.Save

With Sheets("Internal Data1")
    .Range("F7").Value = "NO"
End With
    'Show next form, and unload current:
    Unload F1_Front
    F2_Product.Show '!o!: 'vbmodeless

End Sub


Function SaveAsFile() As String
Dim myfilename As String
If (Right(ThisWorkbook.FullName, 4) = "xlsm") Then
    'Save as an xlsm

    myfilename = Application.GetSaveAsFilename(fileFilter:="Excel Files (*.xlsm), *.xlsm", InitialFileName:="New Calculation " & Format(Date, "dd-mmm-yyyy") & ".xlsm")
    If (myfilename <> "False") Then
        ActiveWorkbook.SaveAs myfilename
        SaveAsFile = "saved"
        Exit Function
    Else
        SaveAsFile = "not saved"
        Exit Function
    End If

Else
    'Same as xls, 97-2003
        myfilename = Application.GetSaveAsFilename(fileFilter:="Excel Files (*.xls), *.xls", InitialFileName:="New Calculation " & Format(Date, "dd-mmm-yyyy") & ".xls")
    If (myfilename <> "False") Then
        ActiveWorkbook.SaveAs myfilename
        SaveAsFile = "saved"
        Exit Function
    Else
        SaveAsFile = "not saved"
        Exit Function
    End If
End If

End Function

Private Sub CB_Print_Click()
'---requires Function - DataInputComplete
Dim ReturnSheet As String
ViewOnly = False

'Dim shortfound, longfound As Boolean
'shortfound = False
'longfound = False

'Dim sh As Worksheet
'For Each sh In Worksheets
'    If sh.Name = "Short Summary" Then shortfound = True
'    If sh.Name = "Detailed Summary" Then longfound = True
'Next sh

'If (shortfound = False Or longfound = False) Then
'    MsgBox "Previous calculation not complete, please select ""New assessment"" or ""Edit assessment""."
'    Exit Function
'End If
'--- !o! Not working, due to non-setup arrays etc. Short Summary requires all the arrays to be setup.
'If (DataInputComplete = 1) Then
    'MsgBox ("Create Summary Sheets")
    'ReturnSheet = ActiveSheet.Name
    'Sheets("Internal Data1").Select
    'nAls = Range("T3").Value
    'nRMs = Range("AB3").Value
    'nPIs = Range("AF3").Value
    'Sheets(ReturnSheet).Select
    'Go to print options form
    'Unload F1_Front
    'Sheets("Short Summary").Select
    'MsgBox "Short and Long summaries shown in sheets"
    'F8_Summaries.Show '!o! 'vbmodeless
    'createShortPDF2
    'createDetailedPDF2


If UCase(Sheets("Internal Data1").Range("F7").Value) = "YES" Then

    ViewOnly = False
    Update_Jump_Arrays (8)
    Unload F1_Front
    'Load F8_Summaries
    F8_Summaries.Show
    
    
    
    
    
Else
    MsgBox "Data input is not complete, please select ""New Asessment"" or finish ""Edit Assessment"".", vbOKOnly, "VITAL Calculator"
End If

End Sub

Sub createDetailedPDF2()
Sheets(Array("Short Summary", "Detailed Summary2", "Allergen Summary by RM", "Allergen Summary by PI", "Overall Summary")).Select

With ActiveSheet
    .ExportAsFixedFormat Type:=xlTypePDF, _
    filename:=("VITAL Detailed Summary- " & ProductName & "  " _
    & Format(Date, "dd-mmm-yy") & "  " & Format(Time, "hhmmss")), _
    Quality:=xlQualityStandard, IncludeDocProperties:=False, _
    IgnorePrintAreas:=False, OpenAfterPublish:=True
End With
End Sub

Sub createShortPDF2()

Sheets("Short Summary").Select
Sheets("Short Summary").ExportAsFixedFormat Type:=xlTypePDF, filename:=("VITAL Short Summary- " & ProductName & "  " & Format(Date, "dd-mmm-yy") & "  " & Format(Time, "hhmmss")), Quality:=xlQualityStandard, IncludeDocProperties:=False, _
    IgnorePrintAreas:=False, OpenAfterPublish:=True

End Sub
Function DataInputComplete()
Dim ReturnSheet As String
ReturnSheet = ActiveSheet.Name
DataInputComplete = 0
Sheets("Internal Data1").Select
If UCase(Range("F4").Value) = "YES" Then
    DataInputComplete = 1
Else
    DataInputComplete = 0
End If
Sheets(ReturnSheet).Select
End Function
Function SummariesComplete()
Dim ReturnSheet As String
ReturnSheet = ActiveSheet.Name
SummariesComplete = 0
Sheets("Internal Data1").Select
If (UCase(Range("F5").Value) = "YES") And (UCase(Range("F6").Value) = "YES") Then
    SummariesComplete = 1
Else
    SummariesComplete = 0
End If
Sheets(ReturnSheet).Select
End Function


Private Sub CB_Reuse_Click()
MsgBox "Section in development."
End Sub

Private Sub CB_View_Click()
ViewOnly = True
'MsgBox "Section in development."

Unload F1_Front
F2_Product.Show '!o!: 'vbmodeless

End Sub

Private Sub CB_ViewVITALGrid_Click()
ViewOnly = False

'Clear old Action level sheet:
On Error Resume Next
Application.DisplayAlerts = False
    Sheets("Action Levels").Delete
Application.DisplayAlerts = True
On Error GoTo 0

Unload F1_Front
'C2_VITALGrid_only.Show 'vbmodeless
C1_AllergensList.Show '''vbmodeless
End Sub

Private Sub UserForm_Activate()
On Error GoTo 0
ThisWorkbook.Activate

Dim newC As String

Sheets("Calculator").Select
newC = Range("B2").Value
Sheets("Calculation in progress").Select

'If UCase(newC) = "   " Then
'    CB_Edit.Enabled = False
'    CB_View.Enabled = False
'    CB_Print.Enabled = False
'End If
'If UCase(newC) = "  " Then
'    CB_Edit.Enabled = True
'    CB_View.Enabled = True
'    CB_Print.Enabled = True
'End If

End Sub


Sub ClearInternalData()


'Delete report sheets if they exist:
    On Error Resume Next
    Application.DisplayAlerts = False
    Sheets("Short Summary").Delete
    Sheets("Detailed Summary").Delete
    Sheets("Detailed Summary2").Delete
    Sheets("Action Levels").Delete
    Sheets("Allergen Summary by PI").Delete
    Sheets("Allergen Summary by RM").Delete
    Sheets("Overall Summary").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0

'Clear Internal Data1

Sheets("Calculator").Select
Range("B2").Value = "   "

Sheets("Internal Data1").Select
    
Dim lastrow As Long
lastrow = ActiveSheet.UsedRange.Rows.Count
'min 99:
If (99 > lastrow) Then lastrow = 99
    
    Range("N3:N5").ClearContents
    Range("Q5:Q" & lastrow).ClearContents
    Range("S5:S" & lastrow).ClearContents
    Range("R3").Value = "NO"
    Range("Z3").Value = "NO"
    '---Data is incomplete
    Range("F4").Value = "NO"
    Range("F5").Value = "NO"
    Range("F6").Value = "NO"
    Range("U4:X" & lastrow).ClearContents
    Range("Y4:AB" & lastrow).ClearContents
    Range("AD3:AF" & lastrow).ClearContents
    Range("AH3:AH6").ClearContents
    Range("AL3:AL4").ClearContents
    Range("AD3:AD" & lastrow).ClearContents
    Cells(1, 1).Select


'Clear Internal Data2
Sheets("Internal Data2").Select
lastrow = ActiveSheet.UsedRange.Rows.Count
'min 200:
If (200 > lastrow) Then lastrow = 200
Range("C5:BA" & lastrow).ClearContents
Range("BE5:DC" & lastrow).ClearContents

Range("C3").Value = "No"
Range("BE3").Value = "No"

'Return to first sheet
Sheets("Calculation in progress").Select

End Sub
Attribute VB_Name = "F2_Product"
Attribute VB_Base = "0{CFC97822-ED29-4C61-8163-4C0BE6A21692}{115E0B26-935A-4572-BD14-60EBCF2F2C64}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Back_Click()
Unload F2_Product
F1_Front.Show '''vbmodeless
End Sub



Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        F2_save
        ThisWorkbook.Save
        Unload F2_Product
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()

If (TextBox1.Value = "") Then
    MsgBox "Product name is required.", vbOKOnly, "VITAL Calculator"
Else
    If (Not IsDate(TextBox3.Value)) Then
        MsgBox "Valid date is required (dd-mmm-yyyy)", vbOKOnly, "VITAL Calculator"
    Else
        'Record data
        ProductName = TextBox1.Value
        ProductReference = TextBox2.Value
        ProductDate = TextBox3.Value
        'Save data to sheet
        F2_save
        
        Unload F2_Product
        F3_AllergensList.Show '!o!'vbmodeless
    End If
End If

End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub StIm1_Click()

goToSTL

End Sub

Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont
End Sub

Private Sub Image3_Click()

End Sub

'
Private Sub UserForm_Activate()
Application.ScreenUpdating = False
On Error GoTo 0
ViewLock


F2_load

If ProductName <> "" Then TextBox1.Value = ProductName
If ProductReference <> "" Then TextBox2.Value = ProductReference
If ProductDate <> "" Then TextBox3.Value = ProductDate Else TextBox3.Value = Format(Date, "dd-mmm-yyyy")

Sheets("Calculation in progress").Select

Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "F3_AllergensList"
Attribute VB_Base = "0{372B4F8C-3E2B-4240-A622-EE855E71619E}{2C3E285B-15FD-44F4-BB89-F58ADD697745}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Back_Click()
Unload F3_AllergensList
F2_Product.Show '''vbmodeless
End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        Save_AA_Selected
        ThisWorkbook.Save
        Unload F3_AllergensList
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()

Save_AA_Selected

'Show next form, and unload current
Unload F3_AllergensList
'F4_ActionLevels.Show 'vbmodeless

'Load F5_RM


'!o! safe to comment out next line?:
'Clear_RM_Array
'F5_RM.Show ''vbmodeless '!o!
Load F7_
F7_.Show


End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub CommandButton1_Click()

'Unprotect sheet, so it can be edited
Sheets("Allergens and Action Levels").Unprotect Password:="abc"

returnPage = "F3_AllergensList"

'MsgBox "(Reconfigure Allergens and Action levels. Options will appear now, with warnings and change-log.)"
'MsgBox "WARNING! Reference Dose should only be changed on advice from the Allergen Bureau."
Dim strName As String
    MsgBox "Reference Doses have been set by an external scientific advisory panel and should only be changed on advice of the Allergen Bureau.", vbExclamation
    strName = InputBox(Prompt:="Enter reason for reference dose change, or cancel.", _
          Title:="Enter reason for reference dose change", Default:=" ")

'Cancel:
If strName = "" Then
    Exit Sub
End If

'No val entered:
While (strName = " ")
    strName = InputBox(Prompt:="A reason for change is required.", _
          Title:="Enter reason for reference dose change", Default:=" ")
          
        If strName = "" Then
            Exit Sub
        End If
Wend

'Changelog
Sheets("Allergens and Action Levels").Select
Dim rr As Long
rr = 4

While (Cells(rr, 9).Value <> "")
    'got to next row:
    rr = rr + 1
Wend

Cells(rr, 9).Value = Format(Date, "dd-mmm-yyyy")
Cells(rr, 10).Value = strName

'!o! select allergens sheet, and change font to black (visible)
'Sheets("Allergens and Action Levels").Select

F3_AllergensList.Hide

End Sub

Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont

'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub Image2_Click()
MsgBox "Determine the allergens that will be considered in this risk assessment. " & "" & _
"For example, for products sold in Australian/New Zealand markets, the Allergen Bureau " & "" & _
" recommends that only those allergens listed in Australia New Zealand Food Standard Code Standard " & "" & _
"1.2.3, Table to Clause 4 should be considered.  The onus is on the user to ensure the correct allergens are assessed.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image2_Click_old()
MsgBox "Determine the allergens that will be considered in this risk assessment. " & vbCrLf & _
"For example, for products sold in Australian/New Zealand markets, the Allergen Bureau " & vbCrLf & _
" recommends that only those allergens listed in Australia New Zealand Food Standard Code Standard " & vbCrLf & _
"1.2.3, Table to Clause 4 should be considered.  The onus is on the user to ensure the correct allergens are assessed.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image3_Click()
MsgBox "Reference Dose is the mg protein level (total protein from an allergic food) below which only the most sensitive individuals (between 1% and 5% depending on the quality of the data set available) in the allergic population are likely to experience an adverse reaction. The Reference Dose for each allergen is set by the Allergen Bureau based on the recommendations from the VITAL Scientific Expert Panel. It is the user's responsibility to ensure that the most up-to-date version of Reference Dose is being used.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image4_Click()
MsgBox "Reference Dose is the mg protein level (total protein from an allergic food) below which only the most sensitive individuals (between 1% and 5% depending on the quality of the data set available) in the allergic population are likely to experience an adverse reaction. The Reference Dose for each allergen is set by the Allergen Bureau based on the recommendations from the VITAL Scientific Expert Panel. It is the user's responsibility to ensure that the most up-to-date version of Reference Dose is being used.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Label2_Click()

End Sub

Private Sub StIm1_Click()
goToSTL
End Sub

'
Private Sub UserForm_Activate()
On Error GoTo 0
ThisWorkbook.Activate
ViewLock
End Sub

Private Sub UserForm_Initialize()

'Add ScrollBar
With Me
    .ScrollBars = fmScrollBarsVertical
    .ScrollHeight = .InsideHeight * 2
End With

    Dim ColCnt As Integer
    Dim rng, rng2 As Range
    Dim ALsheet, currSheet As Worksheet
    Dim cw, itemString, spaces As String
    Dim c As Integer
    Dim aa As Long
    Dim charsLeft, charsRight, charsLeft2, charsRight2 As Long
    
    'Chars from LongName (left) and quantity (right) to include:
    charsLeft = 47
    charsRight = 7
    'Same fo LB2
    charsLeft2 = 33
    charsRight2 = 7
    '150 space chars for padding:
    spaces = "                                                                                                                                                      "

'Setup allergen array
pushAllergensToArrays


'Set listbox source to nothing
F3_AllergensList.LB_AllergenList.RowSource = ""

'Cols in listbox:
'F3_AllergensList.LB_AllergenList.ColumnCount = 2
'(!o! Just 1 col)

'Add LongNames to listbox
For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
If AA_Catagories(aa) = 1 Then
    'make LongName-Quantity string.
    'itemString = AA_LongNames(aa) & Right("               " & AA_Quantities(aa), 14)
    itemString = Left(AA_LongNames(aa) & spaces, charsLeft) & Right(spaces & AA_Quantities(aa), charsRight)
    'add itemString to LB
    F3_AllergensList.LB_AllergenList.AddItem itemString
    'F3_AllergensList.LB_AllergenList.AddItem AA_LongNames(aa)
    'set col widths
    'F3_AllergensList.LB_AllergenList.ColumnWidths = "400,50"
End If
'-----
If AA_Catagories(aa) = 2 Then
    'make LongName-Quantity string.
    'itemString = AA_LongNames(aa) & Right("               " & AA_Quantities(aa), 14)
    itemString = Left(AA_LongNames(aa) & spaces, charsLeft2) & Right(spaces & AA_Quantities(aa), charsRight2)
    'add itemString to LB
    F3_AllergensList.LB_AllergenList2.AddItem itemString
    'F3_AllergensList.LB_AllergenList2.AddItem AA_LongNames(aa)
    'set col widths
    'F3_AllergensList.LB_AllergenList2.ColumnWidths = "400,50"
End If
Next aa

'--Check for previous data, else fill with defaults (refQW21):
Sheets("Internal Data1").Select
If UCase(Range("R3").Value) <> "YES" Then 'use defaults:
    For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
        'Check isDefault value in table (2 cols over from AllergenName):
        '!o! requires modification (add And AA_Selected(aa) = 1 or something)
        If (AA_Defaults(aa) = 1) Then
        Me.LB_AllergenList.Selected(aa) = True
        'De-highlight selected row:
        LB_AllergenList.ListIndex = -1
        End If
    Next aa
Else    'fill from sheet cols:
    'First col
    aa = 1
    While (Cells(4 + aa, 17).Value <> "")
        If Cells(4 + aa, 17) = 1 Then
            Me.LB_AllergenList.Selected(aa - 1) = True
            'De-highlight selected row:
            LB_AllergenList.ListIndex = -1
        End If
        'Next row:
        aa = aa + 1
    Wend
    'Second col
    aa = 1
    While (Cells(4 + aa, 19).Value <> "")
        If Cells(4 + aa, 19) = 1 Then
            Me.LB_AllergenList2.Selected(aa - 1) = True
            'De-highlight selected row:
            LB_AllergenList2.ListIndex = -1
        End If
        'Next row:
        aa = aa + 1
    Wend
End If

Sheets("Calculation in progress").Select

End Sub

Sub Clear_RM_Array()
ReDim RM_array(0)

Dim Rm As Variant
For Each Rm In F5_RM.LB_RMs
    'F5_RM.LB_RMs.RemoveItem (F5_RM.LB_RMs.ListCount - 1)
    '!o! check safe to comment out next line:
    'Remove_RM
Next Rm
End Sub
Attribute VB_Name = "F3_controller"
Option Explicit
Option Base 0

Sub pushAllergensToArrays()
'Fills arrays with info for allergens (longnames,shortnames,quantities)

ThisWorkbook.Activate
Dim currSheet, ALsheet As Worksheet

'Record currentsheet as object- to go back to later
Set currSheet = ActiveSheet
Set ALsheet = Sheets("Allergens and Action Levels")
ALsheet.Select


'AA_LongNames = Array("Almond", "Brazil nut", "Cashew", "Hazelnuts", _
'"Macadamia nut", "Pecan", "Pine nut", "Pistachio nut", "Walnut", "Wheat", _
'"Rye", "Barley", "Oats", "Spelt", "Egg", "Crustacea", "Fish", "Milk", _
'"Peanut", "Sesame seed", "Soy", "Sulphites", "Lupin", "Mustard")

'Clear AA_LongNames
AA_LongNames = Array()
AA_ShortNames = Array()
AA_Quantities = Array()
AA_Defaults = Array()
AA_Catagories = Array()
AA_MergedNames = Array()



Dim currRow As Long
Dim colIndex, colNum As Variant
Dim cat As String

'Columns and catagories arrays
Dim columns() As Variant
Dim catagories() As Variant
columns = Array(1, 5)
catagories = Array(1, 2)   '(NZ/Au,Other). 1=First listbox, 2=Second listbox


'Fill arrays with values from sheet
'For Each colNum In Array(1, 5, 9)  'Columns of longNames
For colIndex = LBound(columns) To UBound(columns)
    'First row to check
    currRow = 6
    'Current column of longNames
    colNum = columns(colIndex)
    'Current Catagory of allergen
    cat = catagories(colIndex)
    While (Cells(currRow, colNum) <> "")
        'Fill AA_LongNames
        add_to_array Cells(currRow, colNum), AA_LongNames
        'Fill AA_ShortNames
        add_to_array Cells(currRow, colNum + 1), AA_ShortNames
        'Fill AA_Quantities (ref doses and conc)
        add_to_array Cells(currRow, colNum + 2), AA_Quantities
        'Fill AA_Catagories
        add_to_array cat, AA_Catagories
        '
        currRow = currRow + 1
    Wend
Next colIndex

'!o! this code may be placeholding- relies on two nondefault allergens at the end??
'Fill Defaults array (1=Selected)
ReDim Preserve AA_Defaults(LBound(AA_LongNames) To UBound(AA_LongNames))
Dim ii As Long
For ii = LBound(AA_LongNames) To UBound(AA_LongNames)
    'MsgBox AA_ShortNames(ii)
    'MsgBox AA_Quantities(ii)
    AA_Defaults(ii) = 1
Next ii

For ii = (UBound(AA_LongNames) - 1) To UBound(AA_LongNames)
    AA_Defaults(ii) = 0
Next ii


ReDim AA_MergedNames(LBound(AA_ShortNames) To UBound(AA_ShortNames))

For ii = LBound(AA_ShortNames) To UBound(AA_ShortNames)
    Select Case LCase(AA_ShortNames(ii))
        Case "almond", "brazil nut", "cashew", "hazelnuts", "macadamia nut", _
                "pecan", "pine nut", "pistachio nut", "walnut"
            AA_MergedNames(ii) = "Tree Nuts"
        Case "wheat", "rye", "barley", "oats", "spelt"
            AA_MergedNames(ii) = "Gluten"
        Case Else
            AA_MergedNames(ii) = AA_ShortNames(ii)
    End Select
Next ii


currSheet.Activate
End Sub
'-Attached-
Sub add_to_array(ByVal x As Variant, ByRef tArray As Variant)

Dim LL, UU As Long
LL = LBound(tArray)
UU = UBound(tArray)

        ReDim Preserve tArray(LL To (UU + 1))
        tArray(UU + 1) = x

End Sub


Sub Save_AA_Selected()
'Sets aa_selected in accordence with allergens selected by user in the listBoxes

Dim aa, nextItem, nextItem2 As Long
nextItem = 0
nextItem2 = 0

'Setup aa_selected dimension
ReDim AA_Selected(LBound(AA_LongNames) To UBound(AA_LongNames))


'Go through each longName, and check if it is selected in LB (cat=1) or LB2 (cat=2):
'Also contains data recording to sheet code (refGH42):
Sheets("Internal Data1").Select
Range("R3").Value = "YES"
For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
If (AA_Catagories(aa) = 1) Then
    If F3_AllergensList.LB_AllergenList.Selected(nextItem) Then
    AA_Selected(aa) = 1
    Cells(5 + nextItem, 17) = 1
    Else
    AA_Selected(aa) = 0
    Cells(5 + nextItem, 17) = 0
    End If
    nextItem = nextItem + 1
End If
'-----
If (AA_Catagories(aa) = 2) Then
    If F3_AllergensList.LB_AllergenList2.Selected(nextItem2) Then
    AA_Selected(aa) = 1
    Cells(5 + nextItem2, 19) = 1
    Else
    AA_Selected(aa) = 0
    Cells(5 + nextItem2, 19) = 0
    End If
    nextItem2 = nextItem2 + 1
End If
Next aa


'Debug code:
'Dim ii As Long
'For ii = LBound(AA_Selected) To UBound(AA_Selected)
'MsgBox AA_ShortNames(ii) & " = " & AA_Selected(ii)
'Next ii

End Sub

Sub tester()
'MsgBox RGB(20, 125, 155)
MsgBox F6_1.BackColor

End Sub
Attribute VB_Name = "F5_1"
Attribute VB_Base = "0{7B8A3A08-2D47-4856-8CD8-68C696F1BD1B}{230F2F10-A90E-4851-90AF-7EFA1F7E85E2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Sub setup_vars()
Dim ReturnSheet As String

nTBs = 10

'Number of allergens
nAls = UBound(AA_LongNames) + (1 - LBound(AA_LongNames))

'---Save nALs
ReturnSheet = ActiveSheet.Name
Sheets("Internal Data1").Select
Range("T3").Value = nAls
Sheets(ReturnSheet).Select
'Current page
page = 0
'Number of pages for each RM (eg nAls=24 => nPages=3 of 10 allergens)
nPages = (nAls + nTBs - 1) \ nTBs

'Current RM
RMindex = 0
'Number of RMs
nRMs = UBound(RM_array) + (1 - LBound(RM_array))

'---Save nRMs
ReturnSheet = ActiveSheet.Name
Sheets("Internal Data1").Select
Range("AB3").Value = nRMs
Sheets(ReturnSheet).Select

'Setup RMinfoSources:
RMinfoSource = Array()
ReDim RMinfoSource(0 To nRMs - 1)

ReDim blank_acceptable(0 To (nTBs * nPages - 1))
Dim ii As Long
For ii = 0 To (nTBs * nPages - 1)
    blank_acceptable(ii) = 1
    On Error Resume Next
    blank_acceptable(ii) = (1 - AA_Selected(ii))
    On Error GoTo 0
Next ii

'Setup data arrays:
ALRM_checkboxes = Array()
ReDim ALRM_checkboxes(0 To nAls - 1, 0 To nRMs - 1)
ALRM_quantities = Array()
ReDim ALRM_quantities(0 To nAls - 1, 0 To nRMs - 1)




End Sub


Private Sub CB_Back_Click()
Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)


'Validation:
CanProceed = validateConcs
'(returns false if field needs filling or changing)


If (CanProceed = False) Then
    If ViewOnly <> True Then
        MsgBox "Valid concentration required for all allergens present in readily dispersible form.", vbOKOnly, "VITAL Calculator"
        On Error Resume Next
        Controls("TB_Q" & pad(tbNumForEntry)).SetFocus
        On Error GoTo 0
    Else
        MsgBox "Valid concentration required. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If

'--------------------------------

    'Save data to arrays:
    Save_RM_Data

    'If using Load_next_RM_Page_old, next page update must be removed:
    page = page - 1
    'And mod RMsource TB
    lastRmSource = TB_Source.Value
    'MsgBox page
    If page = 1 Then 'next page is 1 (note by now page takes value for newly loaded page, not current)
        'TB_Source = ""
        TB_Source.Enabled = True
        TB_Source.SetFocus
        
    Else
        'TB_Source = lastRmSource
        TB_Source.Enabled = False
    End If

'-------------------------------
    Load_back_RM_Page
    
If (page <> 0 Or RMindex <> 0) Then
    retrieveRMdata page, RMindex
End If

End Sub

Private Sub CB_JumpRM_Click()
Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)


'Validation:
CanProceed = validateConcs
'(returns false if field needs filling or changing)

If (CanProceed = False) Then
    If ViewOnly <> True Then
        MsgBox "Valid concentration required for all allergens present in readily dispersible form.", vbOKOnly, "VITAL Calculator"
        On Error Resume Next
        Controls("TB_Q" & pad(tbNumForEntry)).SetFocus
        On Error GoTo 0
    Else
        MsgBox "Valid concentration required. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If

If (TB_Source.Value = "") Then
    If ViewOnly <> True Then
        MsgBox "Source information required.", vbOKOnly, "VITAL Calculator"
        If (TB_Source.Enabled = False) Then TB_Source.Enabled = True
        TB_Source.SetFocus
    Else
        MsgBox "Source information missing. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If
'--------------------------------

    'Save data to arrays:
    Save_RM_Data

    F5_1_Jump.Show
    

End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        Save_RM_Data
        ThisWorkbook.Save
        Unload F5_1
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()

Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)


'Validation:
CanProceed = validateConcs
'(returns false if field needs filling or changing)

If (CanProceed = False) Then
    If ViewOnly <> True Then
        MsgBox "Valid concentration required for all allergens present in readily dispersible form.", vbOKOnly, "VITAL Calculator"
        On Error Resume Next
        Controls("TB_Q" & pad(tbNumForEntry)).SetFocus
        On Error GoTo 0
    Else
        MsgBox "Valid concentration required. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If

If (TB_Source.Value = "") Then
    If ViewOnly <> True Then
        MsgBox "Source information required.", vbOKOnly, "VITAL Calculator"
        If (TB_Source.Enabled = False) Then TB_Source.Enabled = True
        TB_Source.SetFocus
    Else
        MsgBox "Source information missing. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If
'--------------------------------

    'Save data to arrays:
    Save_RM_Data

    'If using Load_next_RM_Page_old, next page update must be removed:
    page = page + 1
    Load_next_RM_Page
    'And mod RMsource TB
    lastRmSource = TB_Source.Value
    '!o! :D The reason for TB_Source not working
    'MsgBox page
    If page = 1 Then 'next is a page1 (note by now page takes value for newly loaded page, not current)
    '    TB_Source = ""
        TB_Source.Enabled = True
        '!0! on error
        On Error Resume Next
            TB_Source.SetFocus
        On Error GoTo 0
    Else
    '    TB_Source = lastRmSource
        TB_Source.Enabled = False
    End If

End Sub
'
Function validateConcs() As Boolean
Dim ret As Boolean
ret = True

Dim ii As Long
'each control:
For ii = 1 To 10
    'If visible (ie al relevent):
    If Controls("CB" & ((3 * ii - 2) + 2)).Value = True Then
        If (Controls("TB_Q" & pad(ii)).Value = "" Or IsNumeric(Controls("TB_Q" & pad(ii)).Value) = False) Then
            ret = False
            tbNumForEntry = ii
            validateConcs = ret
            Exit Function
        End If
    End If
Next ii

validateConcs = ret

End Function

Sub Save_RM_Data()

Sheets("Internal Data2").Select

Dim adj As Long
adj = ((page - 1) * nTBs)


Dim oo As Long
'Go through Allergens, saving to appropriate slots in arrays:
For oo = 1 To 10
If ((oo - 1) + adj <= nAls - 1) Then 'control corresponds to an actual allergen (this is an index comparison; index <= ubound(ALRM_quantities))
    'If (Controls("CB" & ((3 * oo - 2) + 0)).Visible = False) Then
    If (Controls("TB_A" & pad(oo)).Enabled = False) Then
    'Control not enabled:
        ALRM_checkboxes((oo - 1) + adj, RMindex) = ""
        ALRM_quantities((oo - 1) + adj, RMindex) = ""
    'Range(Cells(7 + RMindex * 6, 3 + oo + adj), Cells(10 + RMindex * 6, 3 + oo + adj)).Select
    'MsgBox "D1 to fill with """" (disabled)"
        Cells(7 + RMindex * 6, 3 + oo + adj).Value = ""
        Cells(8 + RMindex * 6, 3 + oo + adj).Value = ""
        Cells(9 + RMindex * 6, 3 + oo + adj).Value = ""
        Cells(10 + RMindex * 6, 3 + oo + adj).Value = ""
        
    Else
    'Control enabled, so record values:
        ALRM_checkboxes((oo - 1) + adj, RMindex) = "blank"  'default (shouldn't occur)
        If (Controls("CB" & ((3 * oo - 2) + 0)).Value = True) Then
            ALRM_checkboxes((oo - 1) + adj, RMindex) = 1
            Cells(7 + RMindex * 6, 3 + oo + adj).Value = 1
            
        'Cells(7 + RMindex * 6, 3 + oo + adj).Select
        'MsgBox "D2 filled with 1"
            Else
            Cells(7 + RMindex * 6, 3 + oo + adj).Value = 0
        'Cells(7 + RMindex * 6, 3 + oo + adj).Select
        'MsgBox "D3 filled with 0"
        End If
        If (Controls("CB" & ((3 * oo - 2) + 1)).Value = True) Then 'Particulate
            ALRM_checkboxes((oo - 1) + adj, RMindex) = 2
            Cells(8 + RMindex * 6, 3 + oo + adj).Value = 1
            
            Else
            Cells(8 + RMindex * 6, 3 + oo + adj).Value = 0
        End If
        If (Controls("CB" & ((3 * oo - 2) + 2)).Value = True) Then ' Readily dispersible
            ALRM_checkboxes((oo - 1) + adj, RMindex) = 3
            Cells(9 + RMindex * 6, 3 + oo + adj).Value = 1
           
            Else
            Cells(9 + RMindex * 6, 3 + oo + adj).Value = 0
        End If
        ALRM_quantities((oo - 1) + adj, RMindex) = Controls("TB_Q" & pad(oo)).Value
        Cells(10 + RMindex * 6, 3 + oo + adj).Value = Controls("TB_Q" & pad(oo)).Value
    'Cells(10 + RMindex * 6, 3 + oo + adj).Select
    'MsgBox "D4 filled with quantity"
    End If
End If
Next oo

'Fill Tag, RMname and Source:
Range("C3").Value = "Yes"
Cells(6 + RMindex * 6, 3).Value = RM_array(RMindex)
Cells(11 + RMindex * 6, 3).Value = TB_Source


Sheets(defaultSheet).Select
End Sub

Private Sub CB_NextRM_Click()
Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)


'Validation:
CanProceed = validateConcs
'(returns false if field needs filling or changing)

If (CanProceed = False) Then
    If ViewOnly <> True Then
        MsgBox "Valid concentration required for all allergens present in readily dispersible form.", vbOKOnly, "VITAL Calculator"
        On Error Resume Next
        Controls("TB_Q" & pad(tbNumForEntry)).SetFocus
        On Error GoTo 0
    Else
        MsgBox "Valid concentration required. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If

If (TB_Source.Value = "") Then
    If ViewOnly <> True Then
        MsgBox "Source information required.", vbOKOnly, "VITAL Calculator"
        If (TB_Source.Enabled = False) Then TB_Source.Enabled = True
        TB_Source.SetFocus
    Else
        MsgBox "Source information missing. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If
'--------------------------------

    'Save data to arrays:
    Save_RM_Data

    'If using Load_next_RM_Page_old, next page update must be removed:
    page = page + 1
    Jump_next_RM
    'And mod RMsource TB
    lastRmSource = TB_Source.Value
    '!o! :D The reason for TB_Source not working
    'MsgBox page

End Sub

Private Sub CB_PrevRM_Click()
Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)


'Validation:
CanProceed = validateConcs
'(returns false if field needs filling or changing)


If (CanProceed = False) Then
    If ViewOnly <> True Then
        MsgBox "Valid concentration required for all allergens present in readily dispersible form.", vbOKOnly, "VITAL Calculator"
        On Error Resume Next
        Controls("TB_Q" & pad(tbNumForEntry)).SetFocus
        On Error GoTo 0
    Else
        MsgBox "Valid concentration required. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
    End If
    Exit Sub
End If


'--------------------------------

    'Save data to arrays:
    Save_RM_Data

    'If using Load_next_RM_Page_old, next page update must be removed:
    page = page - 1
    'And mod RMsource TB
    lastRmSource = TB_Source.Value
    'MsgBox page
    'TB_Source = ""
    TB_Source.Enabled = True
    TB_Source.SetFocus
    
'-------------------------------
    Jump_back_RM_Page
    
If (page <> 0 Or RMindex <> 0) Then
    retrieveRMdata page, RMindex
End If

End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub
'###CB Code################################################################################

Private Sub CB1_Click()
clickmethod 1
End Sub
Private Sub CB2_Click()
clickmethod 2
End Sub
Private Sub CB3_Click()
clickmethod 3
End Sub
Private Sub CB4_Click()
clickmethod 4
End Sub
Private Sub CB5_Click()
clickmethod 5
End Sub
Private Sub CB6_Click()
clickmethod 6
End Sub
Private Sub CB7_Click()
clickmethod 7
End Sub
Private Sub CB8_Click()
clickmethod 8
End Sub
Private Sub CB9_Click()
clickmethod 9
End Sub
Private Sub CB10_Click()
clickmethod 10
End Sub

Private Sub CB11_Click()
clickmethod 11
End Sub
Private Sub CB12_Click()
clickmethod 12
End Sub
Private Sub CB13_Click()
clickmethod 13
End Sub
Private Sub CB14_Click()
clickmethod 14
End Sub
Private Sub CB15_Click()
clickmethod 15
End Sub
Private Sub CB16_Click()
clickmethod 16
End Sub
Private Sub CB17_Click()
clickmethod 17
End Sub
Private Sub CB18_Click()
clickmethod 18
End Sub
Private Sub CB19_Click()
clickmethod 19
End Sub
Private Sub CB20_Click()
clickmethod 20
End Sub

Private Sub CB21_Click()
clickmethod 21
End Sub
Private Sub CB22_Click()
clickmethod 22
End Sub
Private Sub CB23_Click()
clickmethod 23
End Sub
Private Sub CB24_Click()
clickmethod 24
End Sub
Private Sub CB25_Click()
clickmethod 25
End Sub
Private Sub CB26_Click()
clickmethod 26
End Sub
Private Sub CB27_Click()
clickmethod 27
End Sub
Private Sub CB28_Click()
clickmethod 28
End Sub
Private Sub CB29_Click()
clickmethod 29
End Sub
Private Sub CB30_Click()
clickmethod 30
End Sub
'-------------------
Sub clickmethod(x As Long)
Dim m, a1, a2 As Long
m = x Mod 3
'--
If m = 1 Then 'Int
    a1 = 1
    a2 = 2
End If
If m = 2 Then 'Part
    a1 = -1
    a2 = 1
End If
If m = 0 Then 'Disp
    a1 = -2
    a2 = -1
End If
'CB changes:
If (Controls("CB" & x).Value = True) Then
    GreyOut ("CB" & x + a1)
    GreyOut ("CB" & x + a2)
Else
    UnGreyOut ("CB" & x + a1)
    UnGreyOut ("CB" & x + a2)
End If

'TB changes:
If (m = 0) Then 'Disp, so true => vis
    If (Controls("CB" & x).Value = True) Then
        Controls("TB_Q" & pad((x + 2) \ 3)).Visible = True
        
        '!o! Add in an error handler here due to the fact that during "View" it crashes due to not being
        'able to set focus to an
        'On Error Resume Next
        
        'Controls("TB_Q" & pad((x + 2) \ 3)).SetFocus        'Set focus on text box, ONLY IF it is visible
        'On Error GoTo 0
        If Controls("TB_Q" & pad((x + 2) \ 3)).Enabled = True Then
            Controls("TB_Q" & pad((x + 2) \ 3)).SetFocus        'Set focus on text box, ONLY IF it is visible and enabled
        End If                                                  'This is to fix issues in VIEW
                
        If Reference_Required = True Then
            Controls("TB_BP" & pad((x + 2) \ 3)).Visible = True 'Break Point
            Controls("TB_AL" & pad((x + 2) \ 3)).Visible = True 'Break Point
            UpdateBreakTest
        End If
        'Controls("TB_BP" & pad((x + 2) \ 3)).Value = Break_array(1) & "/" & ActionLevelsArray((10 * (page - 1)) + (x \ 3), 0)
    Else
        Controls("TB_Q" & pad((x + 2) \ 3)).Value = ""
        Controls("TB_Q" & pad((x + 2) \ 3)).Visible = False
        
        If Reference_Required = True Then
            Controls("TB_BP" & pad((x + 2) \ 3)).Visible = False 'Break Point
            Controls("TB_AL" & pad((x + 2) \ 3)).Visible = False 'Break Point
        End If
    End If
    
    'Controls("TB_Q" & pad((x + 2) \ 3)).SetFocus        'Set focus on text box
Else            'Not Disp, so false => vis
    If (Controls("CB" & x).Value = False) Then
        
    Else
        Controls("TB_Q" & pad((x + 2) \ 3)).Value = ""
        Controls("TB_Q" & pad((x + 2) \ 3)).Visible = False
    End If
End If

If Reference_Required = True Then
    UpdateBreakTest
    UpdateBreakTest
End If
End Sub
'--
Sub GreyOut(contName As String)
Controls(contName).Value = False
Controls(contName).Visible = False
End Sub
'-
Sub UnGreyOut(contName As String)
Controls(contName).Visible = True
End Sub
'###End of CB Code#########################################################################
Private Sub ViewLock()

If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs", _
            "CB_NextRM", "CB_PrevRM", "CB_JumpRM"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont


'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub Image10_Click()
MsgBox "The Cumulative Total column indicates the cumulative total for each cross contact allergen. The Action Level Transition Point indicates the concentration of cross contact where there is a transition from Action Level 1 (green) to Action Level 2 (red).  Also, this column shows where there is a previously identified cross contact allergen ('PAR') or a previously identified intentionally added allergen ('INT').", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image4_Click()
MsgBox "Cross contact is a residue or other trace amount of an allergenic food that is unintentionally incorporated into another food.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image5_Click()
MsgBox "An intentionally added allergen is an intrinsic part of the ingredient materials and includes all allergens which are required for mandatory declaration - may be highly refined.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image6_Click()
MsgBox "A cross contact allergen in particulate form is as a separate and distinct particle of material (eg sesame seeds, slithered nuts, grated cheese). For the purpose of VITAL, a particulate refers to an entity of food which either" & _
 vbCrLf & vbCrLf & "1.  Does not mix homogenously with other parts of the food; or" & _
 vbCrLf & vbCrLf & "2.  May consist of, or are likely to aggregate into an entity which contains equal to or greater than the relevant Reference Dose.", vbOKOnly, "VITAL Calculator"

End Sub



Private Sub Image7_Click()
MsgBox "A cross contact allergen in readily dispersible form is a powder or liquid in homogenous form. For example - milk powder, soy flour. A readily dispersible cross contact allergen is homogenously distributed in the final product.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image8_Click()
MsgBox "Record the concentration of the total protein content from an allergen source.  This information may be supplied by the supplier of the ingredient.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image9_Click()
MsgBox "Record the information source from which the allergen status of the raw material was sourced. Record any relevant assumptions which affect the allergen status of the raw material.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub TB_A05_Change()

End Sub

Private Sub TextBox4_Change()

End Sub


Private Sub TB_BP01_Change()

End Sub

Private Sub TB_Q01_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q02_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q03_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q04_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q05_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q06_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q07_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q08_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q09_Change()
UpdateBreakTest
UpdateBreakTest
End Sub
Private Sub TB_Q10_Change()
UpdateBreakTest
UpdateBreakTest
End Sub

Private Sub UserForm_Activate()
'MsgBox "F5_1 activated"

ViewLock
setup_vars


If Reference_Required = True Then
    setup_Break_array
    update_Break_Array_Sheets
End If




page = 1
RMindex = 0
'!o! rm index display:
TB_RM.Value = "Allergen status of " & RM_array(RMindex) & " (" & Ref_array(RMindex) & ")"
SetTBsForPage 1


''Disable TBs if dispersible CB not checked:
'Dim ii As Long
''ech control:
'For ii = 1 To 10
'    'If visible (ie al relevent):
'    If Controls("CB" & ((3 * ii - 2) + 2)).Visible = True Then
'        If Controls("CB" & ((3 * ii - 2) + 2)).Value = True Then
'            'enable:
'            Controls("TB_Q" & pad(ii)).Enabled = True
'        Else
'            'or disable:
'            Controls("TB_Q" & pad(ii)).Enabled = False
'            Controls("TB_Q" & pad(ii)).Value = ""
'        End If
'    End If
'Next ii

retrieveRMdata page, RMindex

If Reference_Required = True Then
    UpdateBreakTest
End If


If TB_Source.Enabled = True Then
    'Handler in case of VIEW
    TB_Source.SetFocus
End If

End Sub
'
Sub retrieveRMdata(ByVal myPage As Long, ByVal myRMindex As Long)
Sheets("Internal Data2").Select

If UCase(Range("C3")) <> "YES" Then
    Sheets("Calculation in progress").Select
    Exit Sub
End If

'MsgBox "retrieveRMdata started"

Dim adj As Long
adj = 10 * (myPage - 1)

Dim aa As Long
For aa = 1 To 10
    If (Controls("TB_A" & pad(aa)).Value <> "" And Controls("TB_A" & pad(aa)).Enabled = True) Then
    
        'Intentionally added:
            'Cells(6 + 6 * (myRMindex) + 1, 3 + aa + adj).Select
            'MsgBox "D1 Int added value = " & Cells(6 + 6 * (myRMindex) + 1, 3 + aa + adj)
            'MsgBox "D2 Int = " & CStr(Cells(6 + 6 * (myRMindex) + 1, 3 + aa + adj))
        If CStr(Cells(6 + 6 * (myRMindex) + 1, 3 + aa + adj).Value) = "1" Then
            Controls("CB" & (3 * aa - 2)).Value = True
            Controls("CB" & (3 * aa - 1)).Value = False
            Controls("CB" & (3 * aa - 0)).Value = False
            Controls("TB_Q" & pad(aa)).Value = ""
            
            Controls("CB" & (3 * aa - 2)).Visible = True
            Controls("CB" & (3 * aa - 1)).Visible = False
            Controls("CB" & (3 * aa - 0)).Visible = False
            Controls("TB_Q" & pad(aa)).Visible = False
            
            Controls("TB_BP" & pad(aa)).Visible = False 'break point
            Controls("TB_AL" & pad(aa)).Visible = False 'break point
            'Next aa
        End If
        
        'Particulate:
        If CStr(Cells(6 + 6 * (myRMindex) + 2, 3 + aa + adj)) = "1" Then
            Controls("CB" & (3 * aa - 2)).Value = False
            Controls("CB" & (3 * aa - 1)).Value = True
            Controls("CB" & (3 * aa - 0)).Value = False
            Controls("TB_Q" & pad(aa)).Value = ""
            
            Controls("CB" & (3 * aa - 2)).Visible = False
            Controls("CB" & (3 * aa - 1)).Visible = True
            Controls("CB" & (3 * aa - 0)).Visible = False
            Controls("TB_Q" & pad(aa)).Visible = False
            
            Controls("TB_BP" & pad(aa)).Visible = False 'break point
            Controls("TB_AL" & pad(aa)).Visible = False 'break point
            'Next aa
        End If
        
        'Readily disp:
        If CStr(Cells(6 + 6 * (myRMindex) + 3, 3 + aa + adj)) = "1" Then
            Controls("CB" & (3 * aa - 2)).Value = False
            Controls("CB" & (3 * aa - 1)).Value = False
            Controls("CB" & (3 * aa - 0)).Value = True
            Controls("TB_Q" & pad(aa)).Value = Cells(6 + 6 * (myRMindex) + 4, 3 + aa + adj).Value
            
            'Controls("TB_BP" & pad(aa)).Value = "XX/" & ActionLevelsArray(10 * (page - 1) + aa, 0) 'Break point
            
            Controls("CB" & (3 * aa - 2)).Visible = False
            Controls("CB" & (3 * aa - 1)).Visible = False
            Controls("CB" & (3 * aa - 0)).Visible = True
            Controls("TB_Q" & pad(aa)).Visible = True
            If Reference_Required = True Then
                Controls("TB_BP" & pad(aa)).Visible = True 'break point
                Controls("TB_AL" & pad(aa)).Visible = True 'break point
            End If
            'Next aa
        End If
    End If
Next aa

'!o! not retrieving source information after first page
Dim Holder As String

        'Source info:
        'If TB_Source.Value = "" Then
        'MsgBox ("myrmindex " & myRMindex & "TB value ")
        Holder = Cells(5 + 6 * (myRMindex + 1), 3).Value
        'MsgBox (Holder)
            'TB_Source.Value = "Test"
            Controls("TB_Source").Value = Holder 'Cells(5 + 6 * (myRMindex + 1), 3).Value
            'MsgBox (Controls("TB_Source").Value)
            'TB_Source.Value = Cells(6 + 6 * (myRMindex) + 5, 3).Value
            'Cells(6 + 6 * (myRMindex) + 4, 3).Select
            'MsgBox "D tb_source set to " & TB_Source.Value
        'Else
            'MsgBox "D no source (page = " & myPage & ")"
        'End If

'MsgBox "retrieveRMdata ended"
If Reference_Required = True Then
    update_Break_Array_Sheets
End If
Sheets(defaultSheet).Select
End Sub

Sub Load_next_RM_Page()

'CB_Next caption changes. Note by now "page" variable has been updated
If (page = nPages) And (RMindex < (nRMs - 1)) Then
    '!o! include?:
    CB_Next.Caption = "Next Raw Material"
    'CB_Next.Caption = "Next"
Else
    CB_Next.Caption = "Next"
End If


'Last Page
If ((page - 1) = nPages) Then
    'Move to 1st page of allergens, with next RM (or goto next form)
    RMindex = RMindex + 1
    If (RMindex < nRMs) Then
        'Goto next RM
        'TB_RM.Value = "Allergen status of " & RM_array(RMindex) '& " (" & RMindex & "/" & nRMs & ")"
        TB_RM.Value = "Allergen status of " & RM_array(RMindex) & " (" & Ref_array(RMindex) & ")"
        page = 1
        SetTBsForPage page
        retrieveRMdata page, RMindex
    Else
        'Goto next form
        Unload F5_1
        F6_PI.Show '!o! 'vbmodeless
    End If
Else
    'Not Last Page
    If ((page - 1) < nPages) Then
        'page = page + 1
        SetTBsForPage page
        retrieveRMdata page, RMindex
    End If
End If

End Sub
Sub Jump_next_RM()

'This is to jump to the next Raw Material - this will go through all the standard procedures, but will
'force the next RM, not check for correct pages.

CB_Next.Caption = "Next"



'Move to 1st page of allergens, with next RM (or goto next form)
RMindex = RMindex + 1
If (RMindex < nRMs) Then
    'Goto next RM
    'TB_RM.Value = "Allergen status of " & RM_array(RMindex) '& " (" & RMindex & "/" & nRMs & ")"
    TB_RM.Value = "Allergen status of " & RM_array(RMindex) & " (" & Ref_array(RMindex) & ")"
    page = 1
    SetTBsForPage page
    retrieveRMdata page, RMindex
    
    If page = 1 Then 'next is a page1 (note by now page takes value for newly loaded page, not current)
    '    TB_Source = ""
        TB_Source.Enabled = True
        TB_Source.SetFocus '!o! has issues
    Else
    '    TB_Source = lastRmSource
        TB_Source.Enabled = False
    End If
Else
    'Goto next form
    Unload F5_1
    F6_PI.Show '!o! 'vbmodeless
End If

End Sub

Sub Load_back_RM_Page()

'CB_Next caption changes. Note by now "page" variable has been updated
If (page = 0) Then
    '!o! include?:
    CB_Next.Caption = "Next Raw Material"
    'CB_Next.Caption = "Next"
Else
    CB_Next.Caption = "Next"
End If


'Last Page
If (page = 0) Then
    'Move to last RM (or goto last form)
    RMindex = RMindex - 1
    If (RMindex >= 0) Then
        'Goto last RM
        'TB_RM.Value = "Allergen status of " & RM_array(RMindex) '& " (" & RMindex & "/" & nRMs & ")"
        TB_RM.Value = "Allergen status of " & RM_array(RMindex) & " (" & Ref_array(RMindex) & ")"
        page = nPages
        SetTBsForPage nPages
    Else
        'Goto last form
        Unload F5_1
        F5_RM.Show '''vbmodeless
    End If
Else
    'Same RM, so just a page change:
        SetTBsForPage page
End If

End Sub
Sub Jump_back_RM_Page()
'Note, this is basicall the same as Load_back_RM_Page but does no checks for ends. It simply forces the previous
'RM to load, with the same conditions. IE, it forces the condition "page = 0" from Load_back_RM_Page


CB_Next.Caption = "Next"



'Move to last RM (or goto last form)
RMindex = RMindex - 1
If (RMindex >= 0) Then
    'Goto last RM
    'TB_RM.Value = "Allergen status of " & RM_array(RMindex) '& " (" & RMindex & "/" & nRMs & ")"
    TB_RM.Value = "Allergen status of " & RM_array(RMindex) & " (" & Ref_array(RMindex) & ")"
    page = 1
    If Reference_Required = True Then
        update_Break_Array_Sheets
    End If
    SetTBsForPage page
Else
    'Goto last form
    Unload F5_1
    F5_RM.Show '''vbmodeless
End If

End Sub
Sub Load_next_RM_Page_old()

'!o! Save values to datastructures
'--

'CB_Next caption changes. Note by now "page" variable has been updated
If (page = nPages) Then
    '!o! include?:
    'CB_Next.Caption = "Next Raw Material"
    CB_Next.Caption = "Next"
Else
    CB_Next.Caption = "Next"
End If


'Last Page
If (page = nPages) Then
    'Move to 1st page of allergens, with next RM (or goto next form)
    RMindex = RMindex + 1
    If (RMindex < nRMs) Then
        'Goto next RM
        'TB_RM.Value = "Allergen status of " & RM_array(RMindex) '& " (" & RMindex & "/" & nRMs & ")"
        TB_RM.Value = "Allergen status of " & RM_array(RMindex) & " (" & Ref_array(RMindex) & ")"
        page = 1
        SetTBsForPage 1
    Else
        'Goto next form
        Unload F5_1
        F6_PI.Show '!o! 'vbmodeless
    End If
Else
    'Not Last Page
    If (page < nPages) Then
        page = page + 1
        SetTBsForPage page
    End If
End If



End Sub
'--Attached
Sub SetTBsForPage(myPage As Long)

'Debug code:
'MsgBox "seting TBs for page=" & mypage

'Adjustment parameter
Dim adj As Long
adj = ((myPage - 1) * nTBs)
Dim LL As Long
LL = LBound(AA_LongNames)

'Got through Controls
Dim oo As Long
For oo = 1 To nTBs
    On Error Resume Next
    'Setup Al tbs, cbs, and q tbs:
    Controls("TB_A" & pad(oo)).Value = ""
    Controls("TB_A" & pad(oo)).ControlTipText = ""
    'Controls("TB_A" & pad(oo)).Value = AA_LongNames(oo + adj - (1 - LL))
    Controls("TB_A" & pad(oo)).Value = AA_ShortNames(oo + adj - (1 - LL))
    Controls("TB_A" & pad(oo)).ControlTipText = Replace(AA_LongNames(oo + adj - (1 - LL)), "&", "and")
    
    Controls("TB_Q" & pad(oo)).Value = ""
    Controls("CB" & ((3 * oo - 2) + 0)).Value = False
    Controls("CB" & ((3 * oo - 2) + 1)).Value = False
    Controls("CB" & ((3 * oo - 2) + 2)).Value = False
    On Error GoTo 0
    'Disable (grey-out) any tbs/cbs/qtbs with blank_acceptable = 0:
    If (blank_acceptable(oo + adj - (1 - LL)) = 1) Then
        Controls("TB_A" & pad(oo)).Enabled = False
        Controls("TB_Q" & pad(oo)).Visible = False
        Controls("CB" & ((3 * oo - 2) + 0)).Visible = False
        Controls("CB" & ((3 * oo - 2) + 1)).Visible = False
        Controls("CB" & ((3 * oo - 2) + 2)).Visible = False
    Else
        Controls("TB_A" & pad(oo)).Enabled = True
        'Controls("TB_Q" & pad(oo)).Visible = True
        Controls("CB" & ((3 * oo - 2) + 0)).Visible = True
        Controls("CB" & ((3 * oo - 2) + 1)).Visible = True
        Controls("CB" & ((3 * oo - 2) + 2)).Visible = True
    End If
Next oo

End Sub
'--Attached
Function pad(ByVal x As Long) As String
'1=>01, 9=>09, 10=>10
If (x >= 10) Then
    pad = "" & CStr(x)
Else
    pad = "0" & CStr(x)
End If
End Function

Sub SetTBsForPage_old(myPage As Long)

Dim cCont As Control
Dim LL As Long
LL = LBound(AA_Selected)
Dim arr_index As Integer
arr_index = LBound(AA_LongNames) - 1

'Adjustment scalar based on page number
Dim adj As Long
adj = ((myPage - 1) * nTBs)

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

For Each cCont In Me.Controls

On Error Resume Next
cCont.Visible = True
cCont.Locked = False
On Error GoTo 0

    'Initially make invisible:
    If (Left(cCont.Name, 4) = "TB_A") Or (TypeName(cCont) = "CheckBox") Then
    cCont.Visible = False
    cCont.Locked = True
    End If
    
    If (Len(cCont.Name) >= 7) Then
    If (Left(cCont.Name, 7) = "TextBox") Then
        'cCont.Visible = False
        'cCont.Locked = True
    End If
    End If
    
    
    'Al name TBs:
    If (sf_DropCharsFrom(cCont.Name, 2, "R") = "TB_A") Then
        'With an allergen:
        If CLng(Right(cCont.Name, 2)) + adj <= UBound(AA_LongNames) Then
            cCont.Value = AA_LongNames(CLng(Right(cCont.Name, 2)) + adj)
            cCont.Visible = True
            cCont.Locked = True  'Lock value
            'Selected:
            If AA_Selected(CLng(Right(cCont.Name, 2)) + adj) = 1 Then
                cCont.BackColor = &H80000004
            Else
                cCont.BackColor = &H80000003
            End If
        End If
    End If
    
    'Al quantity TBs:
    If (sf_DropCharsFrom(cCont.Name, 2, "R") = "TB_Q") Then
        'With an allergen:
        If CLng(Right(cCont.Name, 2)) + adj <= UBound(AA_LongNames) Then
            cCont.Value = ""
            'Selected:
            If AA_Selected(CLng(Right(cCont.Name, 2)) + adj) = 1 Then
                cCont.BackColor = &H80000004
                'cCont.Visible = True
                'cCont.Locked = False    'unLock
            Else
                cCont.BackColor = &H80000003
                'cCont.Visible = False   'hide
                'cCont.Locked = True
            End If
        End If
    End If
    
    'Make relevent checkboxes visible
    If (TypeName(cCont) = "CheckBox") Then
        If AA_Selected((CLng(Right(cCont.Name, Len(cCont.Name) - 8)) + 2) \ 10) = 1 Then
            cCont.Visible = True    'show
        End If
    End If
Next cCont

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

End Sub
Function IndexOfCB(CBname As String) As Long

Dim cbNum As Long

'Drop 8 chars ("CheckBox") from left, leaving CB number
cbNum = CLng(sf_DropCharsFrom(CBname, 8, "L"))

'Calculate index (\ is integer division)
IndexOfCB = (cbNum + 2) \ 3

End Function
Sub UpdateBreakTest()
Dim aa, ii As Long
Dim myaa As Long

If Reference_Required = False Then
    Exit Sub
End If


For ii = 1 To 10
    'BREAK POINT
    aa = 10 * (page - 1) - 1 + ii
    If aa <= nAls - 1 Then
        If LCase(AA_MergedNames(aa)) = "tree nuts" Then
            myaa = 0
        ElseIf LCase(AA_MergedNames(aa)) = "gluten" Then
            myaa = 1
        Else
            myaa = aa
        End If
    End If
    If (aa) <= UBound(ActionLevelsArray) Then
        
        Controls("TB_BP" & pad(ii)).BackColor = RGB(255, 255, 255)
        
        'reset to default
        update_Break_individual_RM RMindex, (aa), 0#
        
        
        
        If Controls("CB" & ((3 * ii) - 2)).Value = True Then 'Intentionally
            update_Break_individual_RM RMindex, (aa), -1#
        End If
        
        
        If Controls("CB" & ((3 * ii) - 1)).Value = True Then 'Particulate
            update_Break_individual_RM RMindex, (aa), -2#
        End If
        
        
        If Controls("CB" & 3 * ii).Value = True Then 'readily dispersible
            If IsNumeric(Controls("TB_Q" & pad(ii))) Then
                update_Break_individual_RM RMindex, (aa), Controls("TB_Q" & pad(ii))
            Else
                update_Break_individual_RM RMindex, (aa), 0#
                
            End If
            
            
            If IsNumeric(Break_array(myaa, 3)) Then
                
                Controls("TB_BP" & pad(ii)).Value = Round(Break_array(myaa, 3), 1) '& "/" & ActionLevelsArray(myaa, 0) 'Break point
                
                
                'colours
                If Break_array(myaa, 3) < ActionLevelsArray(aa, 0) Then
                    Controls("TB_BP" & pad(ii)).BackColor = RGB(141, 198, 63)   ' Action Level 1
                Else
                    Controls("TB_BP" & pad(ii)).BackColor = RGB(206, 36, 43)    ' Action Level 2
                End If
                    
                    
            Else
                
                Controls("TB_BP" & pad(ii)).Value = CStr(Break_array(myaa, 3)) '& "/" & ActionLevelsArray(myaa, 0) 'Break point
                
                
                'colours
                If LCase(CStr(Break_array(myaa, 3))) = "int" Then
                    Controls("TB_BP" & pad(ii)).BackColor = RGB(178, 178, 178)  ' Intentionally Added
                Else
                    Controls("TB_BP" & pad(ii)).BackColor = RGB(206, 36, 43)    ' Particulate
                End If
            End If
        End If
            
        Controls("TB_AL" & pad(ii)).Value = Round(ActionLevelsArray(aa, 0), 1) '!o! This hasn't been updated for glutens and treenuts grouping
        'Controls("TB_AL" & pad(ii)).BackColor = Controls("TB_BP" * pad(ii)).BackColor
        
        
            
    End If
Next ii

End Sub

Attribute VB_Name = "F5_1_Jump"
Attribute VB_Base = "0{AC1E2769-4BD8-4581-83DB-04F734DC82D9}{8DC88067-AC39-4BCB-B6AF-62C7D8478048}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_Jump_Click()

RMindex = Me.DDB_RMs.ListIndex - 1

    F5_1.Jump_next_RM
    'And mod RMsource TB
    lastRmSource = F5_1.TB_Source.Value
    '!o! :D The reason for TB_Source not working
    'MsgBox page
    If page = 1 Then 'next is a page1 (note by now page takes value for newly loaded page, not current)
    '    TB_Source = ""
        F5_1.TB_Source.Enabled = True
        F5_1.TB_Source.SetFocus
        
    Else
    '    TB_Source = lastRmSource
        F5_1.TB_Source.Enabled = False
    End If
Unload F5_1_Jump


End Sub

Private Sub UserForm_Activate()
Dim aa_RMNames_loc As Variant
Dim aa As Long

ReDim aa_RMNames_loc(0 To nRMs - 1)


For aa = 0 To (nRMs - 1)
    With Me.DDB_RMs
        .AddItem Sheets("Internal Data1").Cells(5 + aa, 25)
        .List(.ListCount - 1, 1) = aa
  End With
Next aa

Me.DDB_RMs.ListIndex = 0


End Sub
Attribute VB_Name = "F5_2_AddRM"
Attribute VB_Base = "0{E175C59A-74A1-432E-BB08-C4BF2E374DF5}{8C39C2AC-4086-484C-A90D-1388A68311A1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Cancel_Click()
    
Unload F5_2_AddRM

End Sub

Private Sub CB_OK_Click()
    'Drop % sign if present
    If (TextBox3.Value <> "") Then
        If Right(TextBox3.Value, 1) = "%" Then TextBox3.Value = Left(TextBox3.Value, Len(TextBox3.Value) - 1)
    End If

    Dim cw, itemString, spaces, spaces10 As String
    Dim charsLeft, charsRight, charsCentre As Long
    
    'Chars from LongName (left) and quantity (right) to include:
    charsLeft = 40
    charsRight = 45
    charsCentre = 7
    '150 space chars for padding:
    'spaces = "                                                  "
    spaces = "                                                                                                                                                      "
    spaces10 = "          "

Dim max As Long

If (TextBox1.Value = "" Or TextBox1.Value = "RM Name") Then
    TB_Warning.Value = "Name Required"
Else
If (TextBox3.Value = "" Or TextBox3.Value = "Amount in ingoing formulation (%)" Or (IsNumeric(TextBox3.Value) = False) Or (TextBox3.Value > 100#)) Then
    TB_Warning2.Value = "Numeric Quantity Required (max " & 100 - Running_Total & ")"
    'MsgBox CDbl(TextBox3.Value) > 100# - Running_Total
    'MsgBox "numeric" & IsNumeric(TextBox3.Value)
Else
    If (TextBox2.Value = "Internal Reference (optional)") Then TextBox2.Value = ""
    'Add to listbox
    F5_RM.LB_RMs.AddItem TextBox1.Value
    F5_RM.LB_Qs.AddItem TextBox3.Value
    F5_RM.LB_Refs.AddItem TextBox2.Value
    F5_RM.LB_All.AddItem (Left(TextBox1.Value & spaces, charsLeft) & Left(" " & TextBox3.Value & spaces, charsCentre) & Right(spaces & TextBox2.Value, charsRight))
    
    'Select new item
    F5_RM.LB_All.Selected(F5_RM.LB_All.ListCount - 1) = True
    
    'Update_Running_Total ' Running total being the total of percentages
    F5_RM.TB_LivePercent.Value = Running_Total
    
    
    Unload F5_2_AddRM
End If
End If

End Sub
Private Sub Update_Running_Total()
Dim ii As Variant
Dim Qsum As Integer
Qsum = 0

    For ii = 0 To (F5_RM.LB_Qs.ListCount - 1)
        Qsum = Qsum + CDbl(F5_RM.LB_Qs.List(ii))
    Next ii
    
F5_RM.TB_LivePercent.Value = Qsum


End Sub

Private Function Running_Total()
Dim ii As Variant
Dim Qsum As Double
Qsum = 0#

    For ii = 0 To (F5_RM.LB_Qs.ListCount - 1)
        Qsum = Qsum + CDbl(F5_RM.LB_Qs.List(ii))
    Next ii
    
Running_Total = CDbl(Qsum)

End Function

Private Sub CommandButton1_Click()
'MsgBox Running_Total

End Sub

Private Sub TextBox1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    'Clear text before user enters new name
    If (GL_AddRM_firstuse = True And TextBox1.Text = "RM Name") Then TextBox1.Text = ""
    GL_AddRM_firstuse = False
End Sub

Private Sub TextBox1_AfterUpdate()
    'Optional to include:
    'If (TextBox1.Text = "") Then TextBox1.Text = "RM Name"
End Sub


Private Sub TextBox1_Enter()
'Highlight all text in textbox1
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
End Sub



Private Sub TextBox1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
End Sub



Private Sub TextBox2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    '!!o!! Why are 4 variables be called for this function
    
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
End Sub

Private Sub TextBox3_Change()

End Sub

Private Sub TextBox3_Enter()
If F5_RM.TB_LivePercent <> "" And TextBox3.Text = "Amount in ingoing formulation (%)" Then

    With TextBox3
        '.Text = CStr(100# - CDbl(Left(F5_RM.TB_LivePercent.Text, Len(F5_RM.TB_LivePercent.Text) - 1)))
    End With
End If
End Sub

Private Sub TextBox3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
End Sub

Private Sub UserForm_Initialize()
On Error GoTo 0

'Highlight all text in textbox1
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With

'QQ_text = CStr(TextBox3.Value)
GL_AddRM_firstuse = True

End Sub
Attribute VB_Name = "F5_2_EditRM"
Attribute VB_Base = "0{BF78CBCF-8031-4D74-BB11-A3C8FE047881}{3036103E-0AE1-401A-A102-0BBCCA26AFF8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 0
Option Explicit


Private Sub CB_Cancel_Click()
    
Unload F5_2_EditRM

End Sub


Private Sub CB_OK_Click()
On Error GoTo 0

    'Drop % sign if present
    If (TextBox3.Value <> "") Then
        If Right(TextBox3.Value, 1) = "%" Then TextBox3.Value = Left(TextBox3.Value, Len(TextBox3.Value) - 1)
    End If

    Dim cw, itemString, spaces, spaces10 As String
    Dim charsLeft, charsRight, charsCentre As Long
    Dim ind, ii As Long
    ind = F5_RM.LB_All.ListIndex
    
    'Chars from LongName (left) and quantity (right) to include:
    charsLeft = 40
    charsRight = 45
    charsCentre = 7
    '150 space chars for padding:
    spaces = "                                                                                                                                                      "
    spaces10 = "          "

Dim max As Long

If (TextBox1.Value = "" Or TextBox1.Value = "RM Name") Then
    TB_Warning.Value = "Name Required"
Else
If (TextBox3.Value = "" Or TextBox3.Value = "Amount in ingoing formulation (%)" Or (IsNumeric(TextBox3.Value) = False) Or (TextBox3.Value > 100#)) Then
    TB_Warning2.Value = "Numeric Quantity Required (max 100)"
Else
    If (TextBox2.Value = "Internal Reference (optional)") Then TextBox2.Value = ""
    'Delete items:
    F5_RM.LB_RMs.RemoveItem (ind)
    F5_RM.LB_Qs.RemoveItem (ind)
    F5_RM.LB_Refs.RemoveItem (ind)
    F5_RM.LB_All.RemoveItem (ind)
    
    'Add items:
    F5_RM.LB_RMs.AddItem TextBox1.Value
    F5_RM.LB_Qs.AddItem TextBox3.Value
    F5_RM.LB_Refs.AddItem TextBox2.Value
    F5_RM.LB_All.AddItem (Left(TextBox1.Value & spaces, charsLeft) & Left(" " & TextBox3.Value & spaces, charsCentre) & Right(spaces & TextBox2.Value, charsRight))
  
    'Move items:
    If ((F5_RM.LB_All.ListCount >= 2) And (ind <> F5_RM.LB_All.ListCount - 1)) Then
            F5_RM.LB_RMs.Selected(F5_RM.LB_All.ListCount - 1) = True
            F5_RM.LB_Refs.Selected(F5_RM.LB_All.ListCount - 1) = True
            F5_RM.LB_Qs.Selected(F5_RM.LB_All.ListCount - 1) = True
            F5_RM.LB_All.Selected(F5_RM.LB_All.ListCount - 1) = True
        'Move up (F5_RM.LB_All.ListCount - ind-1) times:
        For ii = 1 To (F5_RM.LB_All.ListCount - ind - 1)
            moveUpSelected "LB_RMs"
            moveUpSelected "LB_Refs"
            moveUpSelected "LB_Qs"
            moveUpSelected "LB_All"
        Next ii
    End If
    
    'Select old item
    F5_RM.LB_RMs.Selected(ind) = True
    F5_RM.LB_Refs.Selected(ind) = True
    F5_RM.LB_Qs.Selected(ind) = True
    F5_RM.LB_All.Selected(ind) = True
    
    F5_RM.TB_LivePercent.Value = Running_Total
    
    Unload F5_2_EditRM
    'F5_RM.Show 'vbmodeless
End If
End If

End Sub

Private Function Running_Total()
Dim ii As Variant
Dim Qsum As Double
Qsum = 0

    For ii = 0 To (F5_RM.LB_Qs.ListCount - 1)
        Qsum = Qsum + CDbl(F5_RM.LB_Qs.List(ii))
    Next ii
    
Running_Total = CDbl(Qsum)

End Function

Private Sub UserForm_Activate()
    Dim ind As Long
    ind = F5_RM.LB_All.ListIndex

TextBox1.Value = F5_RM.LB_RMs.List(ind)
TextBox3.Value = F5_RM.LB_Qs.List(ind)
TextBox2.Value = F5_RM.LB_Refs.List(ind)
End Sub


Private Sub moveUpSelected(lbname As String)
    
    Dim NumItems, itemNum, i, TempItem As Variant

    If F5_RM.Controls(lbname).ListIndex <= 0 Then Exit Sub
    NumItems = F5_RM.Controls(lbname).ListCount
    Dim TempList()
    ReDim TempList(0 To NumItems - 1)
'   Fill array with list box items
    For i = 0 To NumItems - 1
        TempList(i) = F5_RM.Controls(lbname).List(i)
    Next i
'   Selected item
    itemNum = F5_RM.Controls(lbname).ListIndex
'   Exchange items
    TempItem = TempList(itemNum)
    TempList(itemNum) = TempList(itemNum - 1)
    TempList(itemNum - 1) = TempItem
    F5_RM.Controls(lbname).List = TempList
'   Change the list index
    F5_RM.Controls(lbname).ListIndex = itemNum - 1
End Sub

Sub editLBs()

Dim ind As Long
ind = F5_RM.LB_All.ListIndex

Dim lbs, x, tempArray As Variant
lbs = New Collection
tempArray = Array()

lbs.AddItem "LB_RMs"
lbs.AddItem "LB_Qs"
lbs.AddItem "LB_Refs"
lbs.AddItem "LB_All"

'---------------------------------------
For Each x In lbs
    'if empty, then do nothing:
    If x.ListCount = 0 Then
        'next x
    Else
        'Fill array with values:
        ReDim tempArray(0 To (x.ListCount - 1))
        For ii = 0 To (x.ListCount - 1)
            tempArray(ii) = x.List(ii)
        Next ii
        'Replace item
        tempArray(ind) = Controls()
    End If
Next x

End Sub
Attribute VB_Name = "F5_RM"
Attribute VB_Base = "0{3EA81480-E566-47D7-857F-5785EBB939F8}{AEEA6C72-87D6-4296-98A7-B488D0847D6B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Add_Click()
F5_2_AddRM.Show
End Sub

Private Sub CB_Back_Click()
Unload F5_RM
'F4_ActionLevels.Show
'F3_AllergensList.Show '''vbmodeless
F7_1.Show
End Sub

Private Sub CB_Edit_Click()

If LB_All.ListIndex >= 0 Then
    F5_2_EditRM.Show
Else
    MsgBox "Please select item to edit.", vbOKOnly, "VITAL Calculator"
End If

End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        '!o! This needs to be discussed!!!! Not sure what part to save and how to manage this section.
        MainMenuSaveF5
        ThisWorkbook.Save
        Unload F5_RM
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub
Sub MainMenuSaveF5()
Dim ii, qq As Long
Dim Qsum As Double
Qsum = 0
With Sheets("Internal Data1")
   RM_array = Array()
    ReDim RM_array(0 To (LB_RMs.ListCount - 1))

    For ii = 0 To LB_RMs.ListCount - 1
          RM_array(ii) = LB_RMs.List(ii)
          .Cells(5 + ii, 25).Value = RM_array(ii)
    Next ii

    '------------------------------------------------------
    
    'Add Qs to RM_Q_array (and sheet)
    RM_Q_array = Array()
    ReDim RM_Q_array(0 To (LB_Qs.ListCount - 1))

    For ii = 0 To LB_Qs.ListCount - 1
          RM_Q_array(ii) = LB_Qs.List(ii)
          .Cells(5 + ii, 26).Value = RM_Q_array(ii)
    Next ii
    '-----------------------------------------------------
End With
End Sub
Private Sub CB_Next_Click()



Dim ii As Long
Dim Qsum As Double
Dim qq As Long

Sheets("Internal Data1").Select
Range("Z3").Value = "Yes"

If (LB_RMs.ListCount = 0) Then
    MsgBox "At least one Raw Material is required.", vbOKOnly, "VITAL Calculator"
    '!o! is it neccasary to require one RM?
Else
    'Add RMs to RM_array (and sheet)
    RM_array = Array()
    ReDim RM_array(0 To (LB_RMs.ListCount - 1))

    For ii = 0 To LB_RMs.ListCount - 1
          RM_array(ii) = LB_RMs.List(ii)
          Cells(5 + ii, 25).Value = RM_array(ii)
    Next ii

    '------------------------------------------------------
    
    'Add Qs to RM_Q_array (and sheet)
    RM_Q_array = Array()
    ReDim RM_Q_array(0 To (LB_Qs.ListCount - 1))

    For ii = 0 To LB_Qs.ListCount - 1
          RM_Q_array(ii) = LB_Qs.List(ii)
          Cells(5 + ii, 26).Value = RM_Q_array(ii)
    Next ii
    '-----------------------------------------------------
    For qq = LBound(RM_Q_array) To UBound(RM_Q_array)
    Qsum = Qsum + CDbl(RM_Q_array(qq))
    Next qq

    If (Abs(Qsum - 100) > 0.1) Then
        Sheets("Calculation in progress").Select
        MsgBox "Substance amounts don't add to 100%. Please re-enter quantities.", vbOKOnly, "VITAL Calculator"
        Exit Sub
    End If
End If
'-----

'-----
If (LB_Refs.ListCount > 0) Then
    'Add Refs to Ref_array (and sheet)
    Ref_array = Array()
    ReDim Ref_array(0 To (LB_Refs.ListCount - 1)) '

    For ii = 0 To LB_Refs.ListCount - 1
          Ref_array(ii) = LB_Refs.List(ii)
          Cells(5 + ii, 27).Value = Ref_array(ii)
    Next ii


    'Go to next form
    Sheets("Calculation in progress").Select
    'MsgBox "Calculation sheet selected"
    
    
    
    Unload F5_RM
    'MsgBox "F5 Unloaded"
    F5_1.Show '''vbmodeless
    
Else
End If

End Sub


Private Sub CB_Remove_Click()

Dim ind As Long
ind = F5_RM.LB_RMs.ListCount
'Remove row from sheet:
If (LB_RMs.ListCount > 0) Then
    Sheets("Internal Data1").Select
    Range(Cells(4 + ind, 25), Cells(4 + ind, 27)).ClearContents
    Sheets("Calculation in progress").Select
End If

If (LB_RMs.ListCount > 0) Then
    'LB_RMs.List.Remove (LB_RMs.ListCount)
    F5_RM.LB_RMs.RemoveItem (F5_RM.LB_RMs.ListCount - 1)
End If
'---
If (LB_Qs.ListCount > 0) Then
    'LB_RMs.List.Remove (LB_RMs.ListCount)
    F5_RM.LB_Qs.RemoveItem (F5_RM.LB_Qs.ListCount - 1)
End If
'---
If (LB_Refs.ListCount > 0) Then
    'LB_RMs.List.Remove (LB_RMs.ListCount)
    F5_RM.LB_Refs.RemoveItem (F5_RM.LB_Refs.ListCount - 1)
End If
'---
If (LB_All.ListCount > 0) Then
    'LB_RMs.List.Remove (LB_RMs.ListCount)
    F5_RM.LB_All.RemoveItem (F5_RM.LB_All.ListCount - 1)
End If

'Clear corresponding block on data sheet:
Sheets("Internal Data2").Select
    Range(Cells(ind * 6, 3), Cells(ind * 6 + 5, 3 + 50)).ClearContents
    If (ind = 1) Then
        Range("C3").Value = "No"
    End If
Sheets("Calculation in progress").Select

F5_RM.TB_LivePercent.Value = Running_Total '!!o!!


End Sub

Private Function Running_Total()
Dim ii As Variant
Dim Qsum As Integer
Qsum = 0

    For ii = 0 To (F5_RM.LB_Qs.ListCount - 1)
        Qsum = Qsum + CDbl(F5_RM.LB_Qs.List(ii))
    Next ii
    
Running_Total = Round(CDbl(Qsum), 1)


End Function

Public Sub Remove_RM()
'!o! soon to be redundent

If (LB_RMs.ListCount > 0) Then
    'LB_RMs.List.Remove (LB_RMs.ListCount)
    F5_RM.LB_RMs.RemoveItem (F5_RM.LB_RMs.ListCount - 1)
End If

End Sub


Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub CommandButton1_Click()

End Sub

Private Sub Image3_Click()
MsgBox "Use ""Add"" button to enter raw materials. The quantity of raw materials must sum to 100%. Use ""Next"" button when complete to enter allergens.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub StIm1_Click()
goToSTL
End Sub
Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont

'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub LB_All_Change()
TB_LivePercent.Value = Running_Total
End Sub

Private Sub LB_All_Click()

End Sub

Private Sub TB_LivePercent_Change()

End Sub

'
Private Sub UserForm_Activate()
ViewLock

ThisWorkbook.Activate

RM_array = Array()

'Delegate method:
If (F5_RM.LB_RMs.ListCount < 1) Then  'only fill from sheet if this hasn't been done
    F5_RM_UserForm_Activate
End If
TB_LivePercent.Value = Running_Total


End Sub


'Moved from F5_controller mod
Sub F5_RM_UserForm_Activate()
On Error GoTo 0
Application.ScreenUpdating = True

'-Variable declaration---------------------------------
    Dim cw, itemString, spaces, spaces10 As String
    Dim charsLeft, charsRight, charsCentre As Long
    
    'Chars from LongName (left) and quantity (right) to include:
    charsLeft = 40
    charsRight = 45
    charsCentre = 7
    '150 space chars for padding:
    spaces = "                                                                                                                                                      "
    spaces10 = "          "

Dim max As Long
'------------------------------------------------------

On Error GoTo 0
    Dim rrNum As Long
    rrNum = 1
'F5_RM.LB_RMs.RowSource = ""

ThisWorkbook.Activate

RM_array = Array()

'Look for previous data to load:
Sheets("Internal Data1").Select
    'Cells(4 + rrNum, 25).Select
    'MsgBox "D0 selected cell"
If UCase(Range("Z3").Value) = "YES" Then
    'Add to listbox
    While (Cells(4 + rrNum, 25) <> "")
    'MsgBox "D1 add " & Cells(4 + rrNum, 25).Value
        F5_RM.LB_RMs.AddItem (Cells(4 + rrNum, 25).Value)
        F5_RM.LB_Qs.AddItem (Cells(4 + rrNum, 26).Value)
        F5_RM.LB_Refs.AddItem (Cells(4 + rrNum, 27).Value)
        F5_RM.LB_All.AddItem (Left(Cells(4 + rrNum, 25).Value & spaces, charsLeft) & Left(" " & Cells(4 + rrNum, 26).Value & spaces, charsCentre) & Right(spaces & Cells(4 + rrNum, 27).Value, charsRight))
        'MsgBox "D Add " & (Left(Cells(4 + rrNum, 25).Value & spaces, charsLeft) & Left(" " & Cells(4 + rrNum, 27).Value & spaces, charsCentre) & Right(spaces & Cells(4 + rrNum, 26).Value, charsRight))
        rrNum = rrNum + 1
    Wend
    'MsgBox "D2 done adding"
Else
    'MsgBox "D3 none found"
End If

Sheets("Calculation in progress").Select

'Make text visible:
'LB_RMs.ListIndex = -1

Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "F5_controller"
Option Explicit
Option Base 0

Sub SpSub()

Dim cCont As Control
Dim LL As Long
LL = LBound(AA_Selected)
Dim arr_index As Integer
arr_index = LBound(AA_LongNames) - 1

'Adjustment scalar based on page number
Dim adj As Long
adj = ((myPage - 1) * nTBs)

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

For Each cCont In Me.Controls

    'Initially make invisible:
    If (Left(cCont.Name, 4) = "TB_A") Or (Len(cCont.Name) >= 7) Or (TypeName(cCont) = "CheckBox") Then
    cCont.Visible = False
    cCont.Locked = True
    End If
    
    
    'Al name TBs:
    If (sf_DropCharsFrom(cCont.Name, 2, "R") = "TB_A") Then
        'With an allergen:
        If CLng(Right(cCont.Name, 2)) + adj <= UBound(AA_LongNames) Then
            cCont.Value = AA_LongNames(CLng(Right(cCont.Name, 2)) + adj)
            cCont.Visible = True
            cCont.Locked = True  'Lock value
            'Selected:
            If AA_Selected(CLng(Right(cCont.Name, 2)) + adj) = 1 Then
                cCont.BackColor = &H80000004
            Else
                cCont.BackColor = &H80000003
            End If
        End If
    End If
    
    'Al quantity TBs:
    If (sf_DropCharsFrom(cCont.Name, 2, "R") = "TB_Q") Then
        'With an allergen:
        If CLng(Right(cCont.Name, 2)) + adj <= UBound(AA_LongNames) Then
            cCont.Value = AA_LongNames(CLng(Right(cCont.Name, 2)) + adj)
            'Selected:
            If AA_Selected(CLng(Right(cCont.Name, 2)) + adj) = 1 Then
                cCont.BackColor = &H80000004
                cCont.Visible = True
                cCont.Locked = False    'unLock
            Else
                cCont.BackColor = &H80000003
                cCont.Visible = False   'hide
                cCont.Locked = True
            End If
        End If
    End If
    
    'Make relevent checkboxes visible
    If (TypeName(cCont) = "CheckBox") Then
        If AA_Selected((CLng(Right(cCont.Name, Len(cCont.Name) - 8)) + 2) \ 10) = 1 Then
            cCont.Visible = True    'show
        End If
    End If
Next cCont

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
End Sub









Attribute VB_Name = "F6_1"
Attribute VB_Base = "0{50816FE2-B5BB-4F6A-AB01-2D7B8247D3BF}{8718E273-EF51-4F09-ACB1-2DAA77059FFF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Sub updateVisibilities()
'some of the index calls of ii or jj may require "pad" function to be called, to turn single digit ii or jj numbers into 04,05 etc
Dim ii, jj As Long

For ii = 1 To 10
    
     If Controls("CB" & (2 * ii)).Value = True Then
        Controls("CB" & ((2 * ii) - 1)).Value = False
        Controls("CB" & ((2 * ii) - 1)).Visible = False
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = True
          Next jj

          Controls("K" & ii).Visible = True
          Controls("M" & ii).Visible = True
          If Reference_Required = True Then
            Controls("TB_BP" & ii).Visible = True 'break point
            Controls("TB_AL" & ii).Visible = True 'break point
          End If
          'If (10 * (page - 1) + ii) < nAls Then
          '  Controls("TB_BP" & ii).Value = "XX/" & ActionLevelsArray(10 * (page - 1) + ii, 0) 'Break point
          'End If
    ElseIf Controls("CB" & ((2 * ii) - 1)).Value = True Then
        Controls("CB" & (2 * ii)).Visible = False
        Controls("CB" & (2 * ii)).Value = False
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = False
              Controls("TextBox" & jj).Value = ""
          Next jj

          Controls("K" & ii).Visible = False
          Controls("M" & ii).Visible = False
          Controls("TB_BP" & ii).Visible = False 'break point
          Controls("TB_AL" & ii).Visible = False 'break point
          
    Else
        Controls("CB" & (2 * ii)).Visible = True
        Controls("CB" & ((2 * ii) - 1)).Visible = True
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = False
              Controls("TextBox" & jj).Value = ""
          Next jj

          Controls("K" & ii).Visible = False
          Controls("M" & ii).Visible = False
          Controls("TB_BP" & ii).Visible = False 'break point
          Controls("TB_AL" & ii).Visible = False 'break point
    
    End If
Next ii

End Sub

Sub oldupdateVisibilities()
'some of the index calls of ii or jj may require "pad" function to be called, to turn single digit ii or jj numbers into 04,05 etc
Dim ii, jj As Long

For ii = 1 To 10
     If Controls("CB" & (2 * ii)).Value = True Then
        Controls("CB" & ((2 * ii) - 1)).Value = False
        Controls("CB" & ((2 * ii) - 1)).Visible = False
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = True
          Next jj

          Controls("K" & ii).Visible = True
          Controls("M" & ii).Visible = True
          If Reference_Required = True Then
            Controls("TB_BP" & ii).Visible = True 'break point
            Controls("TB_AL" & ii).Visible = True 'break point
          End If
          'If (10 * (page - 1) + ii) < nAls Then
          '  Controls("TB_BP" & ii).Value = "XX/" & ActionLevelsArray(10 * (page - 1) + ii, 0) 'Break point
          'End If
    Else
        Controls("CB" & ((2 * ii) - 1)).Visible = True
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = False
              Controls("TextBox" & jj).Value = ""
          Next jj

          Controls("K" & ii).Visible = False
          Controls("M" & ii).Visible = False
          Controls("TB_BP" & ii).Visible = False 'break point
          Controls("TB_AL" & ii).Visible = False 'break point
    End If
    If Controls("CB" & ((2 * ii) - 1)).Value = True Then
        Controls("CB" & (2 * ii)).Visible = False
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = False
              Controls("TextBox" & jj).Value = ""
          Next jj

          Controls("K" & ii).Visible = False
          Controls("M" & ii).Visible = False
          Controls("TB_BP" & ii).Visible = False 'break point
          Controls("TB_AL" & ii).Visible = False 'break point
    Else
        Controls("CB" & (2 * ii)).Visible = False
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = False
              Controls("TextBox" & jj).Value = ""
          Next jj

          Controls("K" & ii).Visible = False
          Controls("M" & ii).Visible = False
          Controls("TB_BP" & ii).Visible = False 'break point
          Controls("TB_AL" & ii).Visible = False 'break point
    End If
Next ii

End Sub


Sub updateKM()

Dim temp As String
PIcomplete = True
Dim aa, myaa As Long

Dim ii As Long
For ii = 1 To 10
    'Default:
    Controls("K" & ii) = ""
    Controls("M" & ii) = ""
    

    
    
    '---------
    
    'if disp, then try to fill both:
    If Controls("CB" & (2 * ii - 0)).Value = True Then
    
    
    'MsgBox "D1  Disp box " & ii & " pressed"
        On Error Resume Next
        On Error GoTo 0
        If (IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 1)).Value) And IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 2)).Value) And IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 3)).Value)) Then
            'Fill values:
            Controls("K" & ii) = (Controls("TextBox" & (4 * (ii - 1) + 1)) * Controls("TextBox" & (4 * (ii - 1) + 2)) * Controls("TextBox" & (4 * (ii - 1) + 3))) * 1000 / (percentFactor ^ 2)
        End If
        '-
        If (IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 1)).Value) And IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 2)).Value) And IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 3)).Value) And IsNumeric(Controls("TextBox" & (4 * (ii - 1) + 4)).Value)) Then
            'Fill values:
            Controls("K" & ii) = (Controls("TextBox" & (4 * (ii - 1) + 1)) * Controls("TextBox" & (4 * (ii - 1) + 2)) * Controls("TextBox" & (4 * (ii - 1) + 3))) * 1000 / (percentFactor ^ 2) 'Altered by factor of 1000 - conversion from g to mg !!o!!
            If (Controls("TextBox" & (4 * (ii - 1) + 4))) <> 0 Then
                Controls("M" & ii) = (Controls("TextBox" & (4 * (ii - 1) + 1)) * Controls("TextBox" & (4 * (ii - 1) + 2)) * Controls("TextBox" & (4 * (ii - 1) + 3))) * 1000 / (Controls("TextBox" & (4 * (ii - 1) + 4)) * percentFactor ^ 2)
            Else
                Controls("M" & ii) = "ERR"
            End If
            
        Else
            PIcomplete = False
        End If
        On Error GoTo 0
    End If

    '!o! -------- To adjust
    'BREAK POINT
    aa = 10 * (page - 1) - 1 + ii
    
    

    
    If Reference_Required = True Then
        If aa <= UBound(ActionLevelsArray) Then
            
            If LCase(AA_MergedNames(aa)) = "tree nuts" Then
                myaa = 0
            ElseIf LCase(AA_MergedNames(aa)) = "gluten" Then
                myaa = 1
            Else
                myaa = aa
            End If
            
            If IsNumeric(Controls("M" & ii)) Then
                update_Break_individual_PI PIindex, aa, Controls("M" & ii)
            Else
                update_Break_individual_PI PIindex, aa, 0
            End If
            
            If IsNumeric(Break_array(myaa, 3)) Then
                Controls("TB_BP" & ii).Value = Round(Break_array(myaa, 3), 1)
                Controls("TB_AL" & ii).Value = Round(ActionLevelsArray(aa, 0), 1) 'Break point
                Select Case Break_array(myaa, 3)
                    Case Is < ActionLevelsArray(aa, 0)
                        Controls("TB_BP" & ii).BackColor = RGB(141, 198, 63)
                    Case Is >= ActionLevelsArray(aa, 0)
                        Controls("TB_BP" & ii).BackColor = RGB(206, 36, 43)
                End Select
                
                'Select Case Controls("TB_BP" & ii).Value
                '    Case Is < CDbl(Controls("TB_AL" & ii).Value) 'Level 1
                '        Controls("TB_BP" & ii).BackColor = RGB(141, 198, 63)
                '    Case Is >= CDbl(Controls("TB_AL" & ii).Value)
                '        Controls("TB_BP" & ii).BackColor = RGB(206, 36, 43)
                'End Select
            Else
                Controls("TB_BP" & ii).Value = CStr(Break_array(myaa, 3))
                Controls("TB_AL" & ii).Value = Round(ActionLevelsArray(aa, 0), 1) 'Break point
                '& "/" & ActionLevelsArray(10 * (page - 1) - 1 + ii, 0) 'Break point
                Select Case LCase(Controls("TB_BP" & ii).Value)
                    Case "int"
                        Controls("TB_BP" & ii).BackColor = RGB(178, 178, 178)
                    Case "par"
                        Controls("TB_BP" & ii).BackColor = RGB(206, 36, 43)
                End Select
            End If
        End If
    End If
Next ii

'Sheets(defaultSheet).Select
End Sub


Sub setup_vars()
Dim ReturnSheet As String

nTBs = 10

'Number of allergens
nAls = UBound(AA_LongNames) + (1 - LBound(AA_LongNames))

'Current page
page = 0
'Number of pages for each PI (eg nAls=24 => nPages=3 of 10 allergens)
nPages = (nAls + nTBs - 1) \ nTBs

'Current PI
PIindex = 0
'Number of PIs
nPIs = UBound(PI_array) + (1 - LBound(PI_array))

'---Save nPIs
ReturnSheet = ActiveSheet.Name
Sheets("Internal Data1").Select
Range("AF3").Value = nPIs
Sheets(ReturnSheet).Select

ReDim blank_acceptable(0 To (nTBs * nPages - 1))
Dim ii As Long
For ii = 0 To (nTBs * nPages - 1)
    blank_acceptable(ii) = 1
    On Error Resume Next
    blank_acceptable(ii) = (1 - AA_Selected(ii))
    On Error GoTo 0
Next ii

'Setup data arrays:
ALPI_checkboxes = Array()
ReDim ALPI_checkboxes(0 To nAls - 1, 0 To nPIs - 1, 0 To 1)
ALPI_quantities = Array()
ReDim ALPI_quantities(0 To nAls - 1, 0 To nPIs - 1, 0 To 3)

End Sub


Sub Load_back_PI_Page()

'!o! Save values to datastructures
'--

'CB_Next caption changes. Note by now "page" variable has been updated
'If (page = nPages) Then
'    CB_Next.Caption = "Next Processing Impact"
'Else
'    CB_Next.Caption = "Next"
'End If

'CB_Next caption changes. Note by now "page" variable has been updated
If (page = 0) Then
    '!o! include?:
    CB_Next.Caption = "Next Raw Material"
    'CB_Next.Caption = "Next"
Else
    CB_Next.Caption = "Next"
End If

'First Page
If (page = 0) Then
    'Move to 1st page of allergens, with next PI (or goto next form)
    PIindex = PIindex - 1
    If (PIindex >= 0) Then
        'Goto previous PI
        TB_PI.Value = "Impact of " & PI_array(PIindex) '& " (" & PIindex & "/" & nPIs & ")"
        page = nPages
        SetTBsForPage page
        retrievePIdata page, PIindex
        updateKM
        updateVisibilities
    Else
        'Goto last form
        Unload F6_1
        F6_PI.Show '''vbmodeless
        Exit Sub
    End If
Else
    'Not first Page
    If (page > 0) Then
        SetTBsForPage page
        retrievePIdata page, PIindex
        updateKM
        updateVisibilities
    End If
End If

End Sub
Sub Jump_back_PI_Page()

'!o! Save values to datastructures
'--
    
    
CB_Next.Caption = "Next"


'First Page
'If (page = 0) Then
    'Move to 1st page of allergens, with next PI (or goto next form)
    PIindex = PIindex - 1
    If (PIindex >= 0) Then
        'Goto previous PI
        TB_PI.Value = "Impact of " & PI_array(PIindex) '& " (" & PIindex & "/" & nPIs & ")"
        page = 1        'Changed from nPages to 1 so it goes to first page :)
        SetTBsForPage page
        retrievePIdata page, PIindex
        updateKM
        updateVisibilities
    Else
        'Goto last form
        Unload F6_1
        F6_PI.Show '''vbmodeless
        Exit Sub
    End If
'Else
'    'Not first Page
'    If (page > 0) Then
'        SetTBsForPage page
'        retrievePIdata page, PIindex
'        updateKM
'        updateVisibilities
'    End If
'End If

End Sub


Private Sub CB_Back_Click()
'---No idea what the TB_Source stuff is, but it hasn't affected the result. Should be able to be deleted

'Check info has been filled
'Dim adj As Long
'adj = ((page - 1) * nTBs)

If PIcomplete = False Then
MsgBox "Valid quantities required for all Readily Dispersible allergens", vbOKOnly, "VITAL Calculator"
Exit Sub
End If



'--------------------------------

    'Save data to arrays:
    Save_ALPI_Data

    'If using Load_next_PI_Page_old, next page update must be removed:
    page = page - 1
    'And mod PIsource TB
    'lastPISource = TB_Source.Value
    'MsgBox page
    'If page = 1 Then 'next page is 1 (note by now page takes value for newly loaded page, not current)
        'TB_Source = ""
        'TB_Source.Enabled = True
    'Else
        'TB_Source = lastPISource
        'TB_Source.Enabled = False
    'End If

'-------------------------------
    Load_back_PI_Page

End Sub

Private Sub CB_Jump_PI_Click()

updateKM

'from mouseover checker:
If PIcomplete = False Then
MsgBox "Valid quantities required for all Readily Dispersible allergens", vbOKOnly, "VITAL Calculator"
Exit Sub
End If

Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)

'Go through Controls
Dim oo As Long
For oo = 1 To nTBs
    If (blank_acceptable(oo - 1 + adj) = 0) Then
        'TB constraint (Quantity required):
        'If Controls("TextBox" & (oo)).Value = "" Then CanProceed = False
        'CB constraints:
        'If (Controls("CheckBox" & (oo + 0)).Value = False) And _
        '(Controls("CheckBox" & (oo + 1)).Value = False) And _
        '(Controls("CheckBox" & (oo + 2)).Value = False) Then CanProceed = False
        
        '-!o! temp blankout:
        'If (Controls("CheckBox" & (2 * oo - 1)).Value = False) And _
        '(Controls("CheckBox" & (2 * oo - 1)).Value = False) And _
        '(Controls("TextBox" & (oo)).Value = "" Or Controls("CheckBox" & (3 * oo - 0)).Value = False) Then CanProceed = False
    End If
Next oo
'---

If (CanProceed = False) Then
    MsgBox "One or more active allergens are missing information.", vbOKOnly, "VITAL Calculator"
    Exit Sub
End If

'----------

'Save data to arrays:
Save_ALPI_Data

F6_1_Jump.Show

'Jump_next_PI_Page
'
'retrievePIdata page, PIindex
'
'updateKM
'
'updateVisibilities

End Sub

Private Sub CB_Jump_PI1_Click()

End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        updateKM
        Save_ALPI_Data

        ThisWorkbook.Save
        Unload F6_1
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()

updateKM

'from mouseover checker:
If PIcomplete = False Then
MsgBox "Valid quantities required for all Readily Dispersible allergens", vbOKOnly, "VITAL Calculator"
Exit Sub
End If

Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)

'Go through Controls
Dim oo As Long
For oo = 1 To nTBs
    If (blank_acceptable(oo - 1 + adj) = 0) Then
        'TB constraint (Quantity required):
        'If Controls("TextBox" & (oo)).Value = "" Then CanProceed = False
        'CB constraints:
        'If (Controls("CheckBox" & (oo + 0)).Value = False) And _
        '(Controls("CheckBox" & (oo + 1)).Value = False) And _
        '(Controls("CheckBox" & (oo + 2)).Value = False) Then CanProceed = False
        
        '-!o! temp blankout:
        'If (Controls("CheckBox" & (2 * oo - 1)).Value = False) And _
        '(Controls("CheckBox" & (2 * oo - 1)).Value = False) And _
        '(Controls("TextBox" & (oo)).Value = "" Or Controls("CheckBox" & (3 * oo - 0)).Value = False) Then CanProceed = False
    End If
Next oo
'---

If (CanProceed = False) Then
    MsgBox "One or more active allergens are missing information.", vbOKOnly, "VITAL Calculator"
    Exit Sub
End If

'----------

'Save data to arrays:
Save_ALPI_Data

Load_next_PI_Page

retrievePIdata page, PIindex

updateKM

updateVisibilities


End Sub

Sub Save_ALPI_Data()

Sheets("Internal Data2").Select

Dim adj As Long
adj = ((page - 1) * nTBs)


Dim oo As Long
'Go through Allergens, saving to appropriate slots in arrays:
For oo = 1 To nTBs
If ((oo - 1) + adj <= nAls - 1) Then 'control corresponds to an actual allergen (this is an index comparison; index <= ubound(ALPI_quantities))
    'If 1 > 0 Then '(Controls("CB" & ((2 * oo - 1) + 0)).Visible = False) Then
    ''Control not enabled:
    '    ALPI_checkboxes((oo - 1) + adj, PIindex, 0) = ""
    '    ALPI_checkboxes((oo - 1) + adj, PIindex, 1) = ""
    '
    '    ALPI_quantities((oo - 1) + adj, PIindex, 0) = ""
    '    ALPI_quantities((oo - 1) + adj, PIindex, 1) = ""
    '    ALPI_quantities((oo - 1) + adj, PIindex, 2) = ""
    '    ALPI_quantities((oo - 1) + adj, PIindex, 3) = ""
    'Else
    'Control enabled, so record values:
        ALPI_checkboxes((oo - 1) + adj, PIindex, 0) = "blank" 'default (shouldn't occur)
        ALPI_checkboxes((oo - 1) + adj, PIindex, 1) = "blank" 'default (shouldn't occur)
        
        If (Controls("CB" & ((2 * oo - 1) + 0)).Value = True) Then
            ALPI_checkboxes((oo - 1) + adj, PIindex, 0) = 1
            Cells(7 + PIindex * 7, 57 + oo + adj) = 1
            
            Else
            ALPI_checkboxes((oo - 1) + adj, PIindex, 0) = 0
            Cells(7 + PIindex * 7, 57 + oo + adj).Value = 0
        End If
        
        If (Controls("CB" & ((2 * oo - 1) + 1)).Value = True) Then
            ALPI_checkboxes((oo - 1) + adj, PIindex, 1) = 1
            Cells(8 + PIindex * 7, 57 + oo + adj).Value = 1
            
            Else
            ALPI_checkboxes((oo - 1) + adj, PIindex, 1) = 0
            Cells(8 + PIindex * 7, 57 + oo + adj).Value = 0
        End If
        ALPI_quantities((oo - 1) + adj, PIindex, 0) = Controls("TextBox" & (4 * oo - 3 + 0)).Value
        ALPI_quantities((oo - 1) + adj, PIindex, 1) = Controls("TextBox" & (4 * oo - 3 + 1)).Value
        ALPI_quantities((oo - 1) + adj, PIindex, 2) = Controls("TextBox" & (4 * oo - 3 + 2)).Value
        ALPI_quantities((oo - 1) + adj, PIindex, 3) = Controls("TextBox" & (4 * oo - 3 + 3)).Value
        Cells(9 + PIindex * 7, 57 + oo + adj).Value = Controls("TextBox" & (4 * oo - 3 + 0)).Value
        Cells(10 + PIindex * 7, 57 + oo + adj).Value = Controls("TextBox" & (4 * oo - 3 + 1)).Value
        Cells(11 + PIindex * 7, 57 + oo + adj).Value = Controls("TextBox" & (4 * oo - 3 + 2)).Value
        Cells(12 + PIindex * 7, 57 + oo + adj).Value = Controls("TextBox" & (4 * oo - 3 + 3)).Value
    'End If
End If
Next oo

'---Save nRMs for PrintSheet
Range("AB3").Value = nRMs


Sheets(defaultSheet).Select
End Sub


Private Sub CommandButton1_Click()
updateKM
End Sub

Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs", _
            "CB_NextPI", "CB_PrevPI", "CB_Jump_PI"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont



'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub CB_NextPI_Click()

updateKM

'from mouseover checker:
If PIcomplete = False Then
MsgBox "Valid quantities required for all Readily Dispersible allergens", vbOKOnly, "VITAL Calculator"
Exit Sub
End If

Dim CanProceed As Boolean
CanProceed = True 'Default

'Check info has been filled
Dim adj As Long
adj = ((page - 1) * nTBs)

'Go through Controls
Dim oo As Long
For oo = 1 To nTBs
    If (blank_acceptable(oo - 1 + adj) = 0) Then
        'TB constraint (Quantity required):
        'If Controls("TextBox" & (oo)).Value = "" Then CanProceed = False
        'CB constraints:
        'If (Controls("CheckBox" & (oo + 0)).Value = False) And _
        '(Controls("CheckBox" & (oo + 1)).Value = False) And _
        '(Controls("CheckBox" & (oo + 2)).Value = False) Then CanProceed = False
        
        '-!o! temp blankout:
        'If (Controls("CheckBox" & (2 * oo - 1)).Value = False) And _
        '(Controls("CheckBox" & (2 * oo - 1)).Value = False) And _
        '(Controls("TextBox" & (oo)).Value = "" Or Controls("CheckBox" & (3 * oo - 0)).Value = False) Then CanProceed = False
    End If
Next oo
'---

If (CanProceed = False) Then
    MsgBox "One or more active allergens are missing information.", vbOKOnly, "VITAL Calculator"
    Exit Sub
End If

'----------

'Save data to arrays:
Save_ALPI_Data

Jump_next_PI_Page

retrievePIdata page, PIindex

updateKM

updateVisibilities
End Sub

Private Sub CB_PrevPI_Click()
If PIcomplete = False Then
MsgBox "Valid quantities required for all Readily Dispersible allergens", vbOKOnly, "VITAL Calculator"
Exit Sub
End If

    'Save data to arrays:
    Save_ALPI_Data

    'If using Load_next_PI_Page_old, next page update must be removed:
    page = page - 1

'-------------------------------
    Jump_back_PI_Page

End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub
Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub CB1_Click()
updateVisibilities
End Sub

Private Sub CB10_Click()
updateVisibilities

updateKM
If CB10.Value = True Then TextBox17.SetFocus

End Sub

Private Sub CB11_Click()
updateVisibilities
End Sub

Private Sub CB12_Click()
updateVisibilities
updateKM
If CB12.Value = True Then TextBox21.SetFocus


End Sub

Private Sub CB13_Click()
updateVisibilities
End Sub

Private Sub CB14_Click()
updateVisibilities
updateKM
If CB14.Value = True Then TextBox25.SetFocus

End Sub

Private Sub CB15_Click()
updateVisibilities
End Sub

Private Sub CB16_Click()
updateVisibilities
updateKM
If CB16.Value = True Then TextBox29.SetFocus

End Sub

Private Sub CB17_Click()
updateVisibilities
End Sub

Private Sub CB18_Click()
updateVisibilities
updateKM
If CB18.Value = True Then TextBox33.SetFocus

End Sub

Private Sub CB19_Click()
updateVisibilities
End Sub

Private Sub CB2_Click()
updateVisibilities
updateKM
If CB2.Value = True Then TextBox1.SetFocus

End Sub

Sub retrievePIdata(ByVal myPage As Long, ByVal myPIindex As Long)
'variables with different names used, so global variable "page" and "PIindex" are not used/affected
Sheets("Internal Data2").Select
Dim aa As Long
For aa = 1 To 10
    'Loops through each al, if that textbox .value<>"" and .enabled=true then load data
    'Particulate => CB(for particulate) = true, other CB and TBs = false and invisible
    '...
    If Controls("TB_A" & pad(aa)).Enabled = True And Controls("TB_A" & pad(aa)).Value <> "" Then
    '---Check if allergen is applicable
    Sheets("Internal Data2").Select
        If Cells(6 + (myPIindex * 7) + 1, 57 + aa + (myPage - 1) * 10).Value = 1 Then
        'Check for particulate
            Controls("CB" & ((2 * aa) - 1)).Value = True
            Controls("CB" & (2 * aa)).Visible = False
            Controls("TextBox" & ((4 * aa) - 3)).Visible = False
            Controls("TextBox" & ((4 * aa) - 2)).Visible = False
            Controls("TextBox" & ((4 * aa) - 1)).Visible = False
            Controls("TextBox" & ((4 * aa) - 0)).Visible = False
            
        ElseIf Cells(6 + (myPIindex) * 7 + 2, 57 + aa + (myPage - 1) * 10).Value = 1 Then
        'Check for homogenous
            Controls("CB" & ((2 * aa) - 1)).Value = False
            Controls("CB" & (2 * aa)).Visible = True
            Controls("CB" & (2 * aa)).Value = True
            Controls("TextBox" & ((4 * aa) - 3)).Visible = True
            Controls("TextBox" & ((4 * aa) - 2)).Visible = True
            Controls("TextBox" & ((4 * aa) - 1)).Visible = True
            Controls("TextBox" & ((4 * aa) - 0)).Visible = True
            
            Controls("TextBox" & ((4 * aa) - 3)).Value = Cells(6 + (myPIindex) * 7 + 3, 57 + aa + (myPage - 1) * 10).Value
            Controls("TextBox" & ((4 * aa) - 2)).Value = Cells(6 + (myPIindex) * 7 + 4, 57 + aa + (myPage - 1) * 10).Value
            Controls("TextBox" & ((4 * aa) - 1)).Value = Cells(6 + (myPIindex) * 7 + 5, 57 + aa + (myPage - 1) * 10).Value
            Controls("TextBox" & ((4 * aa) - 0)).Value = Cells(6 + (myPIindex) * 7 + 6, 57 + aa + (myPage - 1) * 10).Value
        ElseIf Cells(6 + (myPIindex) * 7 + 1, 57 + aa + (myPage - 1) * 10).Value <> 1 And _
            Cells(6 + (myPIindex) * 7 + 2, 57 + aa + (myPage - 1) * 10).Value <> 1 Then
        'Check for neither - could probably be adjusted as just an else...
                    
                Controls("CB" & ((2 * aa) - 1)).Value = False
                Controls("CB" & ((2 * aa) - 1)).Visible = True
                Controls("CB" & (2 * aa)).Value = False
                Controls("CB" & (2 * aa)).Visible = True
                
                Controls("TextBox" & ((4 * aa) - 3)).Visible = True
                Controls("TextBox" & ((4 * aa) - 2)).Visible = True
                Controls("TextBox" & ((4 * aa) - 1)).Visible = True
                Controls("TextBox" & ((4 * aa) - 0)).Visible = True
       
        End If
    End If
        
        
        
Next aa


updateKM
Sheets(defaultSheet).Select
End Sub




Private Sub CB20_Click()
updateVisibilities
updateKM
If CB20.Value = True Then TextBox37.SetFocus
End Sub

Private Sub CB3_Click()
updateVisibilities
End Sub

Private Sub CB4_Click()

updateVisibilities
updateKM
If CB4.Value = True Then TextBox5.SetFocus

End Sub

Private Sub CB5_Click()
updateVisibilities

End Sub

Private Sub CB6_Click()
updateVisibilities
updateKM
If CB6.Value = True Then TextBox9.SetFocus

End Sub

Private Sub CB7_Click()
updateVisibilities

End Sub

Private Sub CB8_Click()
updateVisibilities
updateKM
If CB8.Value = True Then TextBox13.SetFocus

End Sub

Private Sub TextBox43_Change()

End Sub

Private Sub TextBox47_Change()

End Sub

Private Sub CB9_Click()
updateVisibilities

End Sub

Private Sub K6_Change()

End Sub

Private Sub Label11_Click()

End Sub

Private Sub Label12_Click()

End Sub

Private Sub M9_Change()

End Sub

'
Private Sub UserForm_Activate()
ViewLock
setup_vars

If Reference_Required = True Then
    setup_Break_array
    update_Break_Array_Sheets
End If

'Load_next_PI_Page

page = 1
PIindex = 0
TB_PI.Value = "Impact of " & PI_array(PIindex) '& " (" & PIindex & "/" & nPIs & ")"
SetTBsForPage 1

retrievePIdata page, PIindex

updateVisibilities

updateKM


End Sub

'--Attached
Function pad(ByVal x As Long) As String
'1=>01, 9=>09, 10=>10
If (x >= 10) Then
    pad = "" & CStr(x)
Else
    pad = "0" & CStr(x)
End If
End Function

Sub Load_next_PI_Page()

'!o! Save values to datastructures
'--

'CB_Next caption changes. Note by now "page" variable has been updated
If ((page + 1) = nPages) And (PIindex < (nPIs - 1)) Then
    CB_Next.Caption = "Next Processing Impact"
Else
    CB_Next.Caption = "Next"
End If


'Last Page
If (page = nPages) Then
    'Move to 1st page of allergens, with next PI (or goto next form)
    PIindex = PIindex + 1
    If (PIindex < nPIs) Then
        'Goto next PI
        TB_PI.Value = "Impact of " & PI_array(PIindex) '& " (" & PIindex & "/" & nPIs & ")"
        page = 1
        SetTBsForPage page
        retrievePIdata page, PIindex
    Else
        With Sheets("Internal Data1")
            .Cells(7, 6).Value = "YES"
        End With
        
        'Goto next form
        Unload F6_1
        'F7_.Show '''vbmodeless
        F8_Summaries.Show
        Exit Sub
    End If
Else
    'Not Last Page
    If (page < nPages) Then
        page = page + 1
        SetTBsForPage page
        retrievePIdata page, PIindex
    End If
End If



End Sub
Sub Jump_next_PI_Page()

'!o! Save values to datastructures
'--

'Hacked from Load_next_PI_Page.... forces the same process as the final page

CB_Next.Caption = "Next"



''Last Page
'If (page = nPages) Then
    'Move to 1st page of allergens, with next PI (or goto next form)
    PIindex = PIindex + 1
    If (PIindex < nPIs) Then
        'Goto next PI
        TB_PI.Value = "Impact of " & PI_array(PIindex) '& " (" & PIindex & "/" & nPIs & ")"
        page = 1
        SetTBsForPage page
        retrievePIdata page, PIindex
    Else
        With Sheets("Internal Data1")
            .Cells(7, 6).Value = "YES"
        End With
        
        'Goto next form
        Unload F6_1
        'F7_.Show '''vbmodeless
        F8_Summaries.Show
        Exit Sub
    End If
'Else
'    'Not Last Page
'    If (page < nPages) Then
'        page = page + 1
'        SetTBsForPage page
'        retrievePIdata page, PIindex
'    End If
'End If



End Sub
'--Attached
Sub SetTBsForPage(myPage As Long)

'Debug code:
'MsgBox "seting TBs for page=" & mypage

'Adjustment parameter
Dim adj As Long
adj = ((myPage - 1) * nTBs)
Dim LL As Long
LL = LBound(AA_LongNames)

'Got through Controls
Dim oo As Long
For oo = 1 To nTBs
    On Error Resume Next
    'Setup Al tbs, cbs, and q tbs:
    Controls("TB_A" & pad(oo)).Value = ""
    Controls("TB_A" & pad(oo)).ControlTipText = ""
    Controls("TB_A" & pad(oo)).Value = AA_ShortNames(oo + adj - (1 - LL))
    Controls("TB_A" & pad(oo)).ControlTipText = Replace(AA_LongNames(oo + adj - (1 - LL)), "&", "and")
    Controls("CB" & ((2 * oo - 1) + 0)).Value = False
    Controls("CB" & ((2 * oo - 1) + 1)).Value = False
    Controls("TextBox" & ((4 * oo - 3) + 0)).Value = ""
    Controls("TextBox" & ((4 * oo - 3) + 1)).Value = ""
    Controls("TextBox" & ((4 * oo - 3) + 2)).Value = ""
    Controls("TextBox" & ((4 * oo - 3) + 3)).Value = ""
    On Error GoTo 0
    'Disable (grey-out) any tbs/cbs/qtbs with blank_acceptable = 0:
    If (blank_acceptable(oo + adj - (1 - LL)) = 1) Then
        Controls("TB_A" & pad(oo)).Enabled = False
        Controls("CB" & ((2 * oo - 1) + 0)).Visible = False
        Controls("CB" & ((2 * oo - 1) + 1)).Visible = False
        Controls("TextBox" & ((4 * oo - 3) + 0)).Visible = False
        Controls("TextBox" & ((4 * oo - 3) + 1)).Visible = False
        Controls("TextBox" & ((4 * oo - 3) + 2)).Visible = False
        Controls("TextBox" & ((4 * oo - 3) + 3)).Visible = False
        Controls("K" & oo).Visible = False
        Controls("M" & oo).Visible = False
    Else
        Controls("TB_A" & pad(oo)).Enabled = True
        Controls("CB" & ((2 * oo - 1) + 0)).Visible = True
        Controls("CB" & ((2 * oo - 1) + 1)).Visible = True
        Controls("TextBox" & ((4 * oo - 3) + 0)).Visible = True
        Controls("TextBox" & ((4 * oo - 3) + 1)).Visible = True
        Controls("TextBox" & ((4 * oo - 3) + 2)).Visible = True
        Controls("TextBox" & ((4 * oo - 3) + 3)).Visible = True
        Controls("K" & oo).Visible = True
        Controls("M" & oo).Visible = True
    End If
Next oo

End Sub


Function IndexOfCB(CBname As String) As Long

Dim cbNum As Long

'Drop 8 chars ("CheckBox") from left, leaving CB number
cbNum = CLng(sf_DropCharsFrom(CBname, 8, "L"))

'Calculate index (\ is integer division)
IndexOfCB = (cbNum + 2) \ 3

End Function

Sub Broken_updateVisibilities()
'some of the index calls of ii or jj may require "pad" function to be called, to turn single digit ii or jj numbers into 04,05 etc
Dim ii, jj As Long

For ii = 1 To 10
     If Controls("CB" & (2 * ii)).Value = True Then
        
        Controls("CB" & ((2 * ii) - 1)).Visible = False
        
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = True
          Next jj

          Controls("K" & ii).Visible = True
          Controls("M" & ii).Visible = True
          Controls("TB_BP" & ii).Visible = True 'break point
          Controls("TB_AL" & ii).Visible = True 'break point
          'If (10 * (page - 1) + ii) < nAls Then
          '  Controls("TB_BP" & ii).Value = "XX/" & ActionLevelsArray(10 * (page - 1) + ii, 0) 'Break point
          'End If
    Else
        Controls("CB" & ((2 * ii) - 1)).Visible = True
          For jj = (4 * ii - 3) To (4 * ii - 0)
              Controls("TextBox" & jj).Visible = False
              Controls("TextBox" & jj).Value = ""
          Next jj

          Controls("K" & ii).Visible = False
          Controls("M" & ii).Visible = False
          Controls("TB_BP" & ii).Visible = False 'break point
          Controls("TB_AL" & ii).Visible = False 'break point
    End If
    
    If Controls("CB" & ((2 * ii) - 1)).Value = True Then
        Controls("CB" & (2 * ii)).Visible = False
    Else
        Controls("CB" & (2 * ii)).Visible = True
    End If
    
    
Next ii
updateKM
End Sub

''!o! mouseover event disabled:
'Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
''!o! check speed:
'updateKM
'End Sub



Private Sub TextBox1_Change()
updateKM
End Sub

Private Sub TextBox2_Change()
updateKM
End Sub

Private Sub TextBox3_Change()
updateKM
End Sub

Private Sub TextBox4_Change()
updateKM
End Sub

Private Sub TextBox5_Change()
updateKM
End Sub

Private Sub TextBox6_Change()
updateKM
End Sub

Private Sub TextBox7_Change()
updateKM
End Sub

Private Sub TextBox8_Change()
updateKM
End Sub

Private Sub TextBox9_Change()
updateKM
End Sub

Private Sub TextBox10_Change()
updateKM
End Sub

'---------------------------------

Private Sub TextBox11_Change()
updateKM
End Sub

Private Sub TextBox12_Change()
updateKM
End Sub

Private Sub TextBox13_Change()
updateKM
End Sub

Private Sub TextBox14_Change()
updateKM
End Sub

Private Sub TextBox15_Change()
updateKM
End Sub

Private Sub TextBox16_Change()
updateKM
End Sub

Private Sub TextBox17_Change()
updateKM
End Sub

Private Sub TextBox18_Change()
updateKM
End Sub

Private Sub TextBox19_Change()
updateKM
End Sub

Private Sub TextBox20_Change()
updateKM
End Sub

'---------------------------------

Private Sub TextBox21_Change()
updateKM
End Sub

Private Sub TextBox22_Change()
updateKM
End Sub

Private Sub TextBox23_Change()
updateKM
End Sub

Private Sub TextBox24_Change()
updateKM
End Sub

Private Sub TextBox25_Change()
updateKM
End Sub

Private Sub TextBox26_Change()
updateKM
End Sub

Private Sub TextBox27_Change()
updateKM
End Sub

Private Sub TextBox28_Change()
updateKM
End Sub

Private Sub TextBox29_Change()
updateKM
End Sub

Private Sub TextBox30_Change()
updateKM
End Sub

'---------------------------------

Private Sub TextBox31_Change()
updateKM
End Sub

Private Sub TextBox32_Change()
updateKM
End Sub

Private Sub TextBox33_Change()
updateKM
End Sub

Private Sub TextBox34_Change()
updateKM
End Sub

Private Sub TextBox35_Change()
updateKM
End Sub

Private Sub TextBox36_Change()
updateKM
End Sub

Private Sub TextBox37_Change()
updateKM
End Sub

Private Sub TextBox38_Change()
updateKM
End Sub

Private Sub TextBox39_Change()
updateKM
End Sub

Private Sub TextBox40_Change()
updateKM
End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox3_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox4_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox5_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox6_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox7_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox8_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox9_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox10_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

'---------------------------------

Private Sub TextBox11_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox12_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox13_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox14_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox15_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox16_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox17_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox18_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox19_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox20_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

'---------------------------------

Private Sub TextBox21_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox22_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox23_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox24_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox25_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox26_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox27_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox28_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox29_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox30_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

'---------------------------------

Private Sub TextBox31_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox32_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox33_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox34_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox35_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox36_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox37_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox38_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox39_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

Private Sub TextBox40_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
updateKM
End Sub

'---------------------------------
Attribute VB_Name = "F6_1_Jump"
Attribute VB_Base = "0{3D817585-9533-4456-A159-A88DFD4A77CD}{264289E9-1E26-4A74-A511-F94E4BD8DE07}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_Jump_Click()

PIindex = Me.DDB_PIs.ListIndex - 1


F6_1.Jump_next_PI_Page

F6_1.retrievePIdata page, PIindex

F6_1.updateKM

F6_1.updateVisibilities


Unload F6_1_Jump


End Sub

Private Sub UserForm_Activate()
Dim aa_PINames_loc As Variant
Dim aa As Long

ReDim aa_PINames_loc(0 To nPIs - 1)


For aa = 0 To (nPIs - 1)
    With Me.DDB_PIs
        .AddItem Sheets("Internal Data1").Cells(4 + aa, 30)
        .List(.ListCount - 1, 1) = aa
  End With
Next aa

Me.DDB_PIs.ListIndex = 0


End Sub

Attribute VB_Name = "F6_2_AddPI"
Attribute VB_Base = "0{F08E96A3-8A48-4532-88F9-4FA63F3E5EDE}{5FEC82BC-D949-4503-BF51-BE88FBA1C658}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Cancel_Click()
    
Unload F6_2_AddPI

End Sub

Private Sub CB_OK_Click()
Dim max As Long

If (TextBox1.Value = "" Or TextBox1.Value = "PI Name") Then
    TB_Warning.Value = "PI Name Required"
Else
    'Add to listbox
    F6_PI.LB_PIs.AddItem TextBox1.Value
    
    Unload F6_2_AddPI
End If

End Sub


Private Sub TextBox1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    'Clear text before user enters new name
    'If (GL_AddRM_firstuse = True And TextBox1.Text = "RM Name") Then TextBox1.Text = ""
    'GL_AddRM_firstuse = False
End Sub

Private Sub TextBox1_AfterUpdate()
    'Optional to include:
    'If (TextBox1.Text = "") Then TextBox1.Text = "RM Name"
End Sub


Private Sub TextBox1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
End Sub

Private Sub UserForm_Initialize()

'Highlight all text in textbox1
    With TextBox1
        .SelStart = 0
        .SelLength = Len(.Text)
    End With

'GL_AddRM_firstuse = True

End Sub
Attribute VB_Name = "F6_2_EditPI"
Attribute VB_Base = "0{C9F6D2C0-C10B-4D8C-B75C-6C2E94D80979}{6528A53D-B60B-49E8-AE0A-579E3B866B2F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim ind As Long
Option Explicit
Option Base 0
Private Sub CB_Cancel_Click()
Unload F6_2_AddPI
End Sub


Private Sub CB_OK_Click()
Dim ii As Long

If (TextBox1.Value = "" Or TextBox1.Value = "PI Name") Then
    TB_Warning.Value = "PI Name Required"
Else

    F6_PI.LB_PIs.RemoveItem (ind)
    
    
    'Add items:
    F6_PI.LB_PIs.AddItem TextBox1.Value
 
    'Move items:
    If ((F6_PI.LB_PIs.ListCount >= 2) And (ind <> F6_PI.LB_PIs.ListCount - 1)) Then
            F6_PI.LB_PIs.Selected(F6_PI.LB_PIs.ListCount - 1) = True
        'Move up (F6_PI.LB_All.ListCount - ind-1) times:
        For ii = 1 To (F6_PI.LB_PIs.ListCount - ind - 1)
            moveUpSelected "LB_PIs"
           
        Next ii
    End If
    
    'Select old item
    F6_PI.LB_PIs.Selected(ind) = True
 
    
    Unload F6_2_EditPI
    
End If



End Sub
Private Sub moveUpSelected(lbname As String)
    
    Dim NumItems, itemNum, i, TempItem As Variant

    If F6_PI.Controls(lbname).ListIndex <= 0 Then Exit Sub
    NumItems = F6_PI.Controls(lbname).ListCount
    Dim TempList()
    ReDim TempList(0 To NumItems - 1)
'   Fill array with list box items
    For i = 0 To NumItems - 1
        TempList(i) = F6_PI.Controls(lbname).List(i)
    Next i
'   Selected item
    itemNum = F6_PI.Controls(lbname).ListIndex
'   Exchange items
    TempItem = TempList(itemNum)
    TempList(itemNum) = TempList(itemNum - 1)
    TempList(itemNum - 1) = TempItem
    F6_PI.Controls(lbname).List = TempList
'   Change the list index
    F6_PI.Controls(lbname).ListIndex = itemNum - 1
End Sub

Private Sub UserForm_Activate()


ind = F6_PI.LB_PIs.ListIndex


TextBox1.Value = F6_PI.LB_PIs.List(ind)


End Sub


Attribute VB_Name = "F6_PI"
Attribute VB_Base = "0{FDED06C8-7334-4969-BC0B-81FE14A44B60}{DA90E66F-DCCE-49E0-B375-4E80E7FDB1DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Add_Click()

F6_2_AddPI.Show

End Sub

Private Sub CB_Back_Click()
'Unload F6_PI
'F5_RM.Show 'vbmodeless

Dim ans As Integer
'ans = MsgBox("Going back will clear all Raw Material information. Continue?", vbOKCancel)

'If ans = vbOK Then
If (True) Then
    Unload F6_PI
    F5_RM.Show '''vbmodeless
End If

End Sub

Private Sub CB_Edit_Click()
If LB_PIs.ListIndex <> "" Then
    F6_2_EditPI.Show
Else
    MsgBox "Please select an entry to edit", vbOKOnly, "VITAL Calculator"
End If
End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        '!o! This needs to be discussed, same as F5_RM
        ThisWorkbook.Save
        Unload F6_PI
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()
If TB_PIsource.Value = "" Then
    MsgBox "Processing information required", vbOKOnly, "VITAL Calculator"
    Controls("TB_PIsource").SetFocus
Else

Sheets("Internal Data1").Select

'Save to global PIsource variable:
PIsource = TB_PIsource
'and to sheet:
Range("AD3").Value = TB_PIsource.Value
Dim ii As Long

If (LB_PIs.ListCount > 0) Then
    'Add PIs to PI_array
    PI_array = Array()
    ReDim PI_array(0 To (LB_PIs.ListCount - 1))

    For ii = 0 To LB_PIs.ListCount - 1
          PI_array(ii) = LB_PIs.List(ii)
          'Add to sheet:
          Cells(4 + ii, 30).Value = PI_array(ii)
    Next ii

    
    'Go to next form
    Unload F6_PI
    F6_1.Show '''vbmodeless
Else
    'set PI_array to blank:
    PI_array = Array()
    
    'Put in null PI
    
    'ReDim PI_array(0 To 0)
    'PI_array(0) = "No Processing Impact Selected"
    
    
    
    'Cells(4, 30).Value = "No Processing Impact Selected"
    Cells(3, 32) = 0
    
    nPIs = 0
    '
    With Sheets("Internal Data1")
    'Allow loading of summary
        .Range("F7").Value = "YES"
    End With
    

    
    '0 PIs in table so just go straight to F7_
    'MsgBox "At least one PI is required."
    Unload F6_PI
    'F7_.Show '''vbmodeless
    F8_Summaries.Show
    
End If

Sheets("Calculation in progress").Select
End If
End Sub

Private Sub CB_Remove_Click()
Dim ind As Long
ind = F6_PI.LB_PIs.ListCount

If (LB_PIs.ListCount > 0) Then
    'Remove from listbox:
    F6_PI.LB_PIs.RemoveItem (F6_PI.LB_PIs.ListCount - 1)
    'Remove from sheet:
    Sheets("Internal Data1").Select
    Cells(3 + ind, 30).ClearContents
    Sheets("Calculation in progress").Select
    With Sheets("Internal Data2")
        
        .Range(.Cells(6 + (7 * (F6_PI.LB_PIs.ListCount)), 58), .Cells(6 + (7 * (F6_PI.LB_PIs.ListCount)) + 6, 58 + 50)).ClearContents
    End With
End If

End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub Image3_Click()
MsgBox "Cross contact due to Processing is the incorporation of allergens during production of the product to be assessed due to shared manufacturing lines, equipment, tools and/or people Use add button. If no processing cross contact, record evidence to support (Eg validation/verification activities).", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image4_Click()
MsgBox "Record information about cross contact that may occur due to shared equipment, processing lines etc. Where there is no cross contact due to processing, record information to support this assumption such as validation/verification data.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Label2_Click()

End Sub

Private Sub StIm1_Click()

goToSTL

End Sub
Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont


'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub


'
Private Sub UserForm_Activate()
ThisWorkbook.Activate
ViewLock

'!o! needed?:
ALPI_checkboxes = Array()
ALPI_quantities = Array()

'Delegate method:
If (F6_PI.LB_PIs.ListCount < 1) Then  'only fill from sheet if this hasn't been done
    F6_PI_UserForm_Activate
End If

End Sub


'Moved from F5_controller mod
Sub F6_PI_UserForm_Activate()
On Error GoTo 0
Application.ScreenUpdating = True

On Error GoTo 0
    Dim piNum As Long
    piNum = 1
'F5_RM.LB_RMs.RowSource = ""

ThisWorkbook.Activate

PI_array = Array()

'Look for previous data to load:
Sheets("Internal Data1").Select
If Cells(4, 30).Value <> "No Processing Impact Selected" Then
    If (UCase(Range("AD3").Value) <> "" Or Range("AD4").Value <> "") Then
        'Add to listbox
        While (Cells(3 + piNum, 30) <> "")
            'Add to listbox
            F6_PI.LB_PIs.AddItem (Cells(3 + piNum, 30).Value)
            piNum = piNum + 1
        Wend
        'MsgBox "D2 done adding"
    Else
        'MsgBox "D3 none found"
    End If
End If
'Get PI Source from sheet:
TB_PIsource.Value = Range("AD3").Value

Sheets("Calculation in progress").Select

Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "F7_"
Attribute VB_Base = "0{BCCA57BC-ACDC-48E2-BAE9-3D5726C49441}{88184663-EBA0-4994-A54B-A2BE5CAB5D1C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub CB_Back_Click()

Dim ans As Integer
'default:
ans = vbOK

'Commented out (so no warning):
'ans = MsgBox("Going back will clear all Processing Impact information. Continue?", vbOKCancel)

If ans = vbOK Then
    '!o! next code (and equiv in PI) needs replacing?:
    'MsgBox "Invoke clear PI values array"
    Unload F7_
    'F6_PI.Show '''vbmodeless
    F3_AllergensList.Show
End If

End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        '!o! Needs to be discussed, as F5_RM
        ThisWorkbook.Save
        Unload F7_
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()

'!o! requires logical test to check that dil,conc are numeric
'Mod by Will- require one and only one value to be numeric
If ((IsNumeric(TB_Con.Value) = True And TB_Dil.Value = "") Or (IsNumeric(TB_Dil.Value) = True And TB_Con.Value = "")) Then
    'Save data:
    ProductDilution = TB_Dil.Value
    ProductConcentration = TB_Con.Value
    'Sheet data:
    Sheets("Internal Data1").Select
    Range("AH3").Value = TB_Con.Value
    Range("AH4").Value = TB_Dil.Value
    Range("AH5").Value = TB_Ass.Value
    Sheets("Calculation in progress").Select
    'Show next form, and unload current:
    Unload F7_
    F7_1.Show '''vbmodeless
Else
'Or both blank
    If (TB_Dil.Value = "" And TB_Con.Value = "") Then
        '!o! if nothing entered, require a value or just continue??
        'MsgBox "Please enter valid quantities for each."
        
        'Save empty data:
        ProductDilution = ""
        ProductConcentration = ""
        ConcentrationAssumption = TB_Ass.Value
        
        
        Sheets("Internal Data1").Select
            Range("AH3").Value = ""
            Range("AH4").Value = ""
            Range("AH5").Value = TB_Ass.Value
        Sheets("Calculation in progress").Select
        'Show next form, and unload current
        Unload F7_
        F7_1.Show '''vbmodeless
    Else
        MsgBox "Valid quantities required. Leave blank if not applicable. (Only one value may be filled)", vbOKOnly, "VITAL Calculator"
    End If
End If

End Sub

Private Sub CommandButton1_Click()

End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub Image3_Click()
MsgBox "Dehydration is the process where the product loses water due to processing or cooking processes. Record as a percentage (%) of the weight of the final product divided by the original weight of the product. " & Chr(10) & "Eg. If a 100g product loses 10g of weight through baking, then Dehydration (%) = 90/100*100% = 90%", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Image4_Click()
MsgBox "Hydration is the process where a complementary liquid, such as water, is added to the product prior to consumption. Enter as % liquid added = (weight water added / weight original product) x 100%", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub StIm1_Click()

goToSTL

End Sub

Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont


'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub Image5_Click()
MsgBox "Record information to show the reasons why (or why not) a particular dehydration /hydration factor is applied", vbOKOnly, "VITAL Calculator"
End Sub

'
Private Sub UserForm_Activate()
ThisWorkbook.Activate
ViewLock

'Sheet data:
Sheets("Internal Data1").Select
TB_Con.Value = Range("AH3").Value
TB_Dil.Value = Range("AH4").Value
TB_Ass.Value = Range("AH5").Value
Sheets("Calculation in progress").Select

End Sub

Attribute VB_Name = "F7_1"
Attribute VB_Base = "0{1EF217AC-0CB5-450E-ADBD-2D3AD7C9FFE9}{3C3660D2-9FEC-4DD7-A23A-120262893AAB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CB_Applicable_Click()
If CB_Applicable.Value = True Then
    Controls("TB_RQ").Enabled = False
Else
    Controls("TB_RQ").Enabled = True
End If

End Sub

Private Sub CB_Back_Click()
Unload F7_1
F7_.Show ''vbmodeless
End Sub

Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        '!o! Needs to be discussed, as F5_RM
        ThisWorkbook.Save
        Unload F7_
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select

End Sub

Private Sub CB_Next_Click()

If CB_Applicable.Value = False Then

    If IsNumeric(TB_RQ) Then
        UpdateActionGrid_big
        'Save data:
        ProductReferenceQuantity = TB_RQ.Value
        'Sheet data:
        Sheets("Internal Data1").Select
        Range("AH6").Value = TB_RQ.Value
        
        Range("AH7").Value = "True" 'reference amount required
        Reference_Required = True
        
        
        '---Alerts that all data has been entered
        Range("F4").Value = "YES"
        
        Sheets("Calculation in progress").Select
        'Show next form, and unload current
        Unload F7_1
        'F8_Summaries.Show ''vbmodeless
        Load F5_RM
        F5_RM.Show ''vbmodeless
    Else
            If ViewOnly <> True Then
            MsgBox "Valid quantity required", vbOKOnly, "VITAL Calculator"
            TB_RQ.SetFocus
        Else
            MsgBox "Valid quantity required. Exit and return in Edit mode to proceed further.", vbOKOnly, "VITAL Calculator"
        End If
        With TB_RQ
            .SelStart = 0
            .SelLength = Len(.Text)
        End With
    End If

Else

        Sheets("Internal Data1").Select
        '---Alerts that all data has been entered
        Range("F4").Value = "YES"
        
        Range("AH7").Value = "False" 'reference amount required
        Reference_Required = False
        
        Sheets("Calculation in progress").Select
        'Show next form, and unload current
        Unload F7_1
        'F8_Summaries.Show ''vbmodeless
        Load F5_RM
        F5_RM.Show ''vbmodeless

End If



End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub CB_Update_Click()
UpdateActionGrid_big
TB_RQ.SetFocus
End Sub

Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont


'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub CommandButton1_Click()

End Sub

Private Sub Image3_Click()
'MsgBox "The Reference Amount/Serving Size is the maximum amount of a food eaten in a typical eating occasion. This may be the same as the ""serving size"" on the nutrition information panel or it may be appropriate that the reference amount is considered to be the whole product as presented to the consumer." & _
'vbCrLf & vbCrLf & "NB. Ingredient suppliers (for whom Action Levels are not relevant ) may add an arbitrary amount here - in the final version a separate summary will be created which will not display Action Levels."

MsgBox "Reference Amount/Serving Size is the maximum amount of a food eaten in " & Chr(10) & "a typical eating occasion. This may be the same as the 'serving size' " & Chr(10) & "on the nutrition information panel or it may be appropriate that the " & Chr(10) & "reference amount is considered to be the whole product as presented " & Chr(10) & "to the consumer. " & Chr(10) & Chr(10) & "The determination of the reference amount or serving size is a business " & Chr(10) & "decision. It is recommended that where serving size is used that the " & Chr(10) & "AFGC serving size principles should be applied.", vbOKOnly, "VITAL Calculator"

End Sub

Private Sub Image4_Click()
MsgBox "The VITAL Action Level Grid is an interactive tool composed of two Action Levels for each allergen of interest. Action Levels define labelling outcomes." & Chr(10) & "Enter the Reference Amount/Serving Size and click ""Update"" to display the Action Levels." & Chr(10) & "Where a Reference Amount/Serving Size is not relevant, refer to the advice at the bottom of this page.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub StIm1_Click()
goToSTL
End Sub

Private Sub Image5_Click()
MsgBox "If the product being assessed is an ingredient which is intended for further processing, a Reference Amount/Serving Size will not be relevant. Choose the option in this calculator that 'Reference Amount/Serving Size is not relevant:' " & Chr(10) & Chr(10) & " Supply your customer(s) with the following:" & Chr(10) & "The presence of any Particulate cross contact allergen and the concentration of any Readily Dispersible allergen. This information will be generated in the summary reports from this calculator. Please note: Action Levels are not relevant for ingredients which will be further processed prior to presenting to a consumer and they will not be calculated.", vbOKOnly, "VITAL Calculator"
End Sub

Private Sub Label2_Click()

End Sub

'
Private Sub UserForm_Activate()
ViewLock

ThisWorkbook.Activate
'----------
Dim currSheet As Worksheet
Set currSheet = ActiveSheet

With Sheets("Internal Data1")
    If LCase(.Cells(7, 34).Value) = "false" Then
        Reference_Required = False
        CB_Applicable.Value = True
        
    Else
        Reference_Required = True
        CB_Applicable.Value = False
        
    End If
End With


ActionLevelsArray = Array()

'Setup gr string, holding greaterThanEqualTo sign:
If currSheet.Name <> "Internal data" Then Sheets("Internal Data1").Select
gr = ">="
On Error Resume Next
gr = Range(greaterThanEqualTOAddress).Value
On Error GoTo 0
If gr = "" Then gr = ">="
currSheet.Select
'----------

ListBox2.BackColor = RGB(141, 198, 63)
ListBox3.BackColor = RGB(206, 36, 43)

'Sheet data:
Sheets("Internal Data1").Select
TB_RQ.Value = Range("AH6").Value
Sheets("Calculation in progress").Select

If Not (TB_RQ = "" Or IsNumeric(TB_RQ.Value) = False Or TB_RQ = 0) Then
    UpdateActionGrid_big
End If

End Sub



Sub UpdateActionGrid_big()

If (TB_RQ = "" Or IsNumeric(TB_RQ.Value) = False Or TB_RQ = 0) Then
    MsgBox "Valid quantity required", vbOKOnly, "VITAL Calculator"
    TB_RQ.SetFocus
    With TB_RQ
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
    Exit Sub
End If

'Update arrays
pushAllergensToArrays

'Change colours
ListBox2.BackColor = RGB(141, 198, 63)
ListBox3.BackColor = RGB(206, 36, 43)

'setup AG_names and AG_TotalProtein
AG_names = Array()
AG_TotalProtein = Array()
ReDim AG_names(LBound(AA_ShortNames) To UBound(AA_ShortNames))
ReDim AG_TotalProtein(LBound(AA_ShortNames) To UBound(AA_ShortNames))
Dim ii As Long
For ii = LBound(AA_ShortNames) To UBound(AA_ShortNames)
    AG_names(ii) = AA_ShortNames(ii)
    AG_TotalProtein(ii) = AA_Quantities(ii)
Next ii

Dim item1, item2, item3 As String

'Clear listboxes
ListBox1.Clear
ListBox2.Clear
ListBox3.Clear
'-----

ReDim ActionLevelsArray(LBound(AA_ShortNames) To UBound(AA_ShortNames), 0 To 2)

'Put names and values into grid
For ii = LBound(AG_names) To UBound(AG_names)

    'default processing
    item1 = AG_names(ii)
    item2 = "<" & CStr(Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)) & " ppm"
    item3 = gr & CStr(Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2)) & " ppm"
    ActionLevelsArray(ii, 0) = AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ)
    ActionLevelsArray(ii, 1) = item2
    ActionLevelsArray(ii, 2) = item3
        
    'Extra processing
    'Sulphites
    If LCase(AG_names(ii)) = "sulphites" Then
        item2 = "<" & CStr(10) & " ppm"
        item3 = gr & CStr(10) & " ppm"
        ActionLevelsArray(ii, 0) = 10
        ActionLevelsArray(ii, 1) = item2
        ActionLevelsArray(ii, 2) = item3
    End If
    'Cereals
    If (LCase(AG_names(ii)) = "wheat") Or (LCase(AG_names(ii)) = "rye") Or (LCase(AG_names(ii)) = "barley") Or (LCase(AG_names(ii)) = "oats") Or (LCase(AG_names(ii)) = "spelt") Then
        item2 = "<" & CStr(min(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2))) & " ppm"
        item3 = gr & CStr(min(20, Round(AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ), 2))) & " ppm"
        ActionLevelsArray(ii, 0) = min(20, (AG_TotalProtein(ii) * 1000# / CDbl(TB_RQ)))
        ActionLevelsArray(ii, 1) = item2
        ActionLevelsArray(ii, 2) = item3
    End If

    ListBox1.AddItem item1
    ListBox2.AddItem item2
    ListBox3.AddItem item3

Next ii

End Sub
Function min(ByVal x As Long, ByVal Y As Long) As Long
If (x < Y) Then
    min = x
Else
    min = Y
End If
End Function
Attribute VB_Name = "F8_Summaries"
Attribute VB_Base = "0{3A99B333-817D-4827-A459-0C8253D7407E}{4DC3E451-09ED-42A1-88C6-7E21671062F2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 0
Dim aa_Summ_PI As Variant
'Array will be AA_Summ_PI(0 to nals-1 reduced by number of merged allergens,0 to nPIs-1)
'with the refs referring to allergen by PI, and the value will be 0, 1 or 2
Dim aa_Summ_PI_Concs As Variant
'Array will be same structure as AA_Summ_PI, but with values being concentrations of of
'readily dispersible
Dim aa_Summ_RM As Variant
'Structure (0 to nals-1 - merged number, 0 to nrms-1, 0 to 5)
'the final grouping will refer via (x,y,0) = particulate, (x,y,1) = homogeneous
'(x,y,2-5) = concentrations etc of homogeneous
Dim aa_Groupings As Variant
'Structure (0 to nals-1) where each value is 0 for no grouping, 1 for nuts or 2 for gluten
Dim PPM_Grouped As Variant
Dim aa_RMs_int As Variant
Dim myAAPI As Variant
Dim aa_RMbyAL As Variant
Dim nTNs, nGluts, mynALs, inALref As Long
Dim myaa_Reference_Colors As Variant



Private Sub CB_Back_Click()
Unload F8_Summaries
F6_PI.Show
'F7_1.Show '''vbmodeless
End Sub


Private Sub CB_MainMenu_Click()
Select Case MsgBox("Do you want to save your changes and return to the Main Menu?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
        Unload F8_Summaries
        F1_Front.Show
    Case vbNo
    Exit Sub
End Select
End Sub

Private Sub CB_Next_Click()

'---Unprotect sheet (not strictly needed, but good practice)
Sheets("Allergens and Action Levels").Unprotect Password:="abc"
'---------------



'MsgBox "(Summaries one step off completion)."
prep_Aux_arrays
'createShortSummary

'createDetailedSummary
If (CheckBox2.Value = True) Then
    createNewShortSummary
    
End If
If (CheckBox1.Value = True) Then
    createNewDetailedSummary
    createDetailedPDF
End If
If (CheckBox2.Value = True) Then
    createShortPDF
End If



'---Re-enable sheet protection:
Sheets("Allergens and Action Levels").Protect Password:="abc", UserInterfaceOnly:=True
'-----------------

MsgBox "Assessment complete.  See Short and Detailed Summary sheets for reports.", vbOKOnly, "VITAL Calculator"
Unload F8_Summaries

Sheets("Calculator").Select

End Sub
Sub prep_Aux_arrays()
Dim aa, rr, pp, ii As Long
'is_ReadilyDispersible = Array()
ReDim is_ReadilyDispersible(0 To nAls - 1)

For aa = 0 To nAls - 1
    is_ReadilyDispersible(aa) = 0 'set default
    '-------RM's--------
    For rr = 0 To nRMs - 1
        With Sheets("Internal Data2")
            If .Cells(6 * (rr + 1) + 3, 4 + aa) = 1 Then
                is_ReadilyDispersible(aa) = 1
            End If
        End With
    Next rr
    
    '-------PI's--------
    For pp = 0 To nRMs - 1
        With Sheets("Internal Data2")
            If .Cells(6 + 7 * (pp) + 2, 58 + aa) = 1 Then
                is_ReadilyDispersible(aa) = 1
            End If
        End With
    Next pp
Next aa
    
    
End Sub

Private Sub CB_Save_Click()
Select Case MsgBox("Are you sure you want to save this document?", vbYesNo, "VITAL Calculator")
    Case vbYes
        ThisWorkbook.Save
    Case vbNo
    Exit Sub
End Select
End Sub
Private Sub CB_SaveAs_Click()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If
End Sub

Private Sub StIm1_Click()

goToSTL

End Sub

Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    Select Case cont.Name
        Case "CB_Next", "CB_Back", "CB_MainMenu", "CB_Save", "CB_SaveAs"
            On Error Resume Next
                cont.Enabled = True
            On Error GoTo 0
        Case Else
            On Error Resume Next
                cont.Enabled = False
            On Error GoTo 0
        
    End Select
Next cont

'If ViewOnly <> True Then Exit Sub
'Dim cont As Control
'For Each cont In Me.Controls
'    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
'        On Error Resume Next
'        cont.Enabled = False
'        On Error GoTo 0
'    End If
'Next cont
End Sub

Private Sub Label1_Click()

End Sub

Private Sub Label3_Click()

End Sub

'
Private Sub UserForm_Activate()
ThisWorkbook.Activate
ViewLock
End Sub
Function Ceiling(ByVal x As Double, Optional ByVal Factor As Double = 1) As Double
    ' X is the value you want to round
    ' is the multiple to which you want to round
    Ceiling = (Int(x / Factor) - (x / Factor - Int(x / Factor) > 0)) * Factor
End Function


Sub createDetailedPDF()
'Sheets(Array("Short Summary", "Detailed Summary2", "Allergen Summary by RM", "Allergen Summary by PI", "Overall Summary")).Select
Sheets("Long Summary").Select
With ActiveSheet
    .ExportAsFixedFormat Type:=xlTypePDF, _
    filename:=("VITAL Detailed Summary- " & ProductName & "  " _
    & Format(Date, "dd-mmm-yy") & "  " & Format(Time, "hhmmss")), _
    Quality:=xlQualityStandard, IncludeDocProperties:=False, _
    IgnorePrintAreas:=False, OpenAfterPublish:=True
End With
End Sub

Sub createShortPDF()

Sheets("Short Summary").Select
Sheets("Short Summary").ExportAsFixedFormat Type:=xlTypePDF, filename:=("VITAL Short Summary- " & ProductName & "  " & Format(Date, "dd-mmm-yy") & "  " & Format(Time, "hhmmss")), Quality:=xlQualityStandard, IncludeDocProperties:=False, _
    IgnorePrintAreas:=False, OpenAfterPublish:=True

End Sub
Sub createNewShortSummary()
Dim aa As Long

'This is the control sub for the creation of the new short summary
'This will prep the sheet, creating a copy from the template, rename it, then call
'individual sub routines to push the info to the tables,

'--Prepare sheet----------
'Active sheet for short summary is "Long Summary"
    'Delete sheet if it currently exists:
    On Error Resume Next
    Application.DisplayAlerts = False
    Sheets("Short Summary").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0


    If Reference_Required = True Then

        Sheets("Short Template").Select
        Sheets("Short Template").Copy Before:=Sheets("Allergens and Action Levels")
        Sheets("Short Template (2)").Select
        Sheets("Short Template (2)").Name = "Short Summary"
        ActiveWindow.ScrollWorkbookTabs Sheets:=-1

    Else
        Sheets("Short Template").Select
        Sheets("Alt Short Template").Copy Before:=Sheets("Allergens and Action Levels")
        Sheets("Alt Short Template (2)").Select
        Sheets("Alt Short Template (2)").Name = "Short Summary"
        ActiveWindow.ScrollWorkbookTabs Sheets:=-1

    End If

Dim myname As String
Dim myref As String
Dim mydate As String

With Sheets("Internal Data1")
    myname = .Cells(3, 14)
    myref = .Cells(4, 14)
    mydate = .Cells(5, 14)
End With

With Sheets("Short Summary")
    .Cells(9, 1) = "Short Summary Report from Voluntary Incidental Trace Allergen (VITAL) Calculator (Version " & VersionNo & ")"
    .Cells(11, 2) = myname
    .Cells(12, 2) = myref
    .Cells(13, 2) = mydate
End With

With Sheets("Short Summary").PageSetup
        .LeftFooter = myname
        .CenterFooter = myref
        .RightFooter = "Vital version no: " & VersionNo & Chr(10) & "Date: " & mydate
End With





nTNs = 0
nGluts = 0
For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            nTNs = nTNs + 1
        Case "gluten"
            nGluts = nGluts + 1
    End Select

Next aa

'mynALs = nAls - nTNs - nGluts + 2
mynALs = nAls + 2


'-------------------------------------------------------
If Reference_Required = True Then
    createNewTable1
Else
    createNewTable1NoServingSize
End If


End Sub

Sub createNewDetailedSummary()
Dim aa As Long

'This is the control sub for the creation of the updated detailed summary sheet
'This will prep the sheet, creating a copy from the template, rename it, then call
'individual sub routines to push the info to the tables,

'--Prepare sheet----------
'Active sheet for short summary is "Long Summary"
    'Delete sheet if it currently exists:
    On Error Resume Next
    Application.DisplayAlerts = False
    Sheets("Long Summary").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0


    If Reference_Required = True Then

        Sheets("Long Template").Select
        Sheets("Long Template").Copy Before:=Sheets("Allergens and Action Levels")
        Sheets("Long Template (2)").Select
        Sheets("Long Template (2)").Name = "Long Summary"
        ActiveWindow.ScrollWorkbookTabs Sheets:=-1

    Else
        Sheets("Long Template").Select
        Sheets("Alt Long Template").Copy Before:=Sheets("Allergens and Action Levels")
        Sheets("Alt Long Template (2)").Select
        Sheets("Alt Long Template (2)").Name = "Long Summary"
        ActiveWindow.ScrollWorkbookTabs Sheets:=-1

    End If

Dim myname As String
Dim myref As String
Dim mydate As String

With Sheets("Internal Data1")
    myname = .Cells(3, 14)
    myref = .Cells(4, 14)
    mydate = .Cells(5, 14)
End With

With Sheets("Long Summary")
    .Cells(9, 1) = "Detailed Summary Report from Voluntary Incidental Trace Allergen (VITAL) Calculator (Version " & VersionNo & ")"
    .Cells(11, 2) = myname
    .Cells(12, 2) = myref
    .Cells(13, 2) = mydate
End With

With Sheets("Long Summary").PageSetup
        .LeftFooter = myname
        .CenterFooter = myref
        .RightFooter = "Vital version no: " & VersionNo & Chr(10) & "Date: " & mydate
End With





nTNs = 0
nGluts = 0
For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            nTNs = nTNs + 1
        Case "gluten"
            nGluts = nGluts + 1
    End Select

Next aa

'mynALs = nAls - nTNs - nGluts + 2
mynALs = nAls + 2


'-------------------------------------------------------
If Reference_Required = True Then
    createNewTable1
Else
    createNewTable1NoServingSize
End If

createNewTable2
createNewTable3
createNewTable4
createNewTable5
createNewTable6
createNewTable7
createNewTable8
createNewTable9

'------------------------------------
'-------Clean Tables-----------------
'------------------------------------
Sheets("Long Summary").Select
Range(columns(65 + 7 * ((nPIs \ 5) + 1)), columns(92)).Delete

Dim ii As Long

For ii = ((nPIs \ 5) + 2) To 4
    Sheets("Long Summary").Shapes("Table6_Pic" & ii).Delete
Next ii






End Sub
Sub createSummaryArrays()
Dim aa, ii As Long

aa_Summ_RM = Array()
ReDim aa_Summ_PI(0 To nAls - 1 - 12, 0 To nRMs - 1, 0 To 5)

aa_Groupings = Array()
ReDim aa_Groupings(0 To nAls - 1) 'note, 1 means tree nut, 2 means gluten, 0 means no grouping

With Sheets("Internal Data1")
    For aa = 0 To nAls - 1
        aa_Groupings(aa) = .Cells(5 + aa, 21)
    Next aa
End With
    



End Sub
Sub createNewTable1()
'Creates table 1 for detailed summary
'Runs through each allergen, sums the ppm etc, and then pushes info
'to sheet: Detailed Summary New
Dim aa, rr, pp, ii As Long
Dim x As Double

Dim my_RM_array As Variant
Dim my_PI_array As Variant
Dim aa_Table1 As Variant

'---------------------------
'--------Setup arrays-------
'---------------------------

my_RM_array = Array()
my_PI_array = Array()
aa_Table1 = Array()

ReDim my_RM_array(0 To nRMs - 1, 0 To nAls - 1)

If nPIs > 0 Then
    
    ReDim my_PI_array(0 To nPIs - 1, 0 To nAls - 1)
ElseIf nPIs = 0 Then
    ReDim my_PI_array(0, 0 To nAls - 1)
End If


'Values in these arrays will be
'-2 for Particulate
'-1 for Intentionally added
'0 for nothing
'>0 for PPM concentration


ReDim aa_Table1(0 To mynALs - 1, 0 To 6)
'This is the final table of condensed values for table 1, merging Tree Nuts and Glutens
'Values 0 to 6 will be the equivalents of the values in the table
'0 Name
'1 ref dose (ppm)
'2 ALvl 1
'3 Alvl 2
'4 Particulate
'5 Readily Dispersible (ppm), unrounded
'6 Labelling outcome

'---------------------------
'-----Set Defaults----------
'---------------------------

For aa = 0 To nAls - 1
    For rr = 0 To nRMs - 1
        my_RM_array(rr, aa) = 0
    Next rr
    
    If nPIs > 0 Then
        For pp = 0 To nPIs - 1
            my_PI_array(pp, aa) = 0
        Next pp
    End If
Next aa


For aa = 0 To mynALs - 1
    aa_Table1(aa, 0) = ""
    aa_Table1(aa, 1) = 0
    aa_Table1(aa, 2) = 0
    aa_Table1(aa, 3) = 0
    aa_Table1(aa, 4) = ""
    aa_Table1(aa, 5) = 0
    aa_Table1(aa, 6) = ""
Next aa
aa_Table1(0, 0) = "Tree Nuts (Total)"
aa_Table1(0, 1) = AA_Quantities(0)
aa_Table1(0, 2) = ActionLevelsArray(0, 0)
aa_Table1(0, 3) = ActionLevelsArray(0, 2)

aa_Table1(1 + nTNs, 0) = "Gluten-containing cereals (total)"
aa_Table1(1 + nTNs, 1) = AA_Quantities(10)
aa_Table1(1 + nTNs, 2) = ActionLevelsArray(10, 0)
aa_Table1(1 + nTNs, 3) = ActionLevelsArray(10, 2)

For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
        aa_Table1(aa + 1, 0) = "   " & AA_ShortNames(aa)
        'aa_Table1(aa + 1, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 1, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 1, 3) = ActionLevelsArray(aa, 2)
        
        aa_Table1(aa + 1, 1) = ""
        aa_Table1(aa + 1, 2) = ""
        aa_Table1(aa + 1, 3) = ""
        
        Case "gluten"
        aa_Table1(aa + 2, 0) = "   " & AA_ShortNames(aa)
        'aa_Table1(aa + 2, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 2, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 2, 3) = ActionLevelsArray(aa, 2)
        
        aa_Table1(aa + 2, 1) = ""
        aa_Table1(aa + 2, 2) = ""
        aa_Table1(aa + 2, 3) = ""
        
        Case Else
        aa_Table1(aa + 2, 0) = AA_ShortNames(aa)
        aa_Table1(aa + 2, 1) = AA_Quantities(aa)
        aa_Table1(aa + 2, 2) = ActionLevelsArray(aa, 0)
        aa_Table1(aa + 2, 3) = ActionLevelsArray(aa, 2)
    
    End Select
Next aa





'----------------------------
'------Raw Materials---------
'----------------------------
With Sheets("Internal Data2")

    For aa = 0 To (nAls - 1)
        'Sum allergen ppms for each RM:
        For rr = 0 To (nRMs - 1)
            'PPM
            If .Cells(6 + 6 * rr + 3, 4 + aa) = 1 Then
                my_RM_array(rr, aa) = .Cells(6 + 6 * rr + 4, 4 + aa) * (RM_Q_array(rr) / percentFactor)
            End If
            
            'Particulate
            If .Cells(6 + 6 * rr + 2, 4 + aa) = 1 Then
                my_RM_array(rr, aa) = -2
            End If
            
            'Intentionally Added
            If .Cells(6 + 6 * rr + 1, 4 + aa) = 1 Then
                my_RM_array(rr, aa) = -1
            End If
        Next rr
    Next aa

End With




'--------------------------------
'-------Processing Impacts-------
'--------------------------------


'Summing parts per million from processing impacts, off the arrays rather than
'off the information documents. NB: Want to put in an array updater that will pull information
'each time you go into the next set of pages.
If nPIs > 0 Then
    With Sheets("Internal Data2")
    
        For aa = 0 To (nAls - 1)
            'Sum allergen ppms for each RM:
            For pp = 0 To (nPIs - 1)
                'PPM
                If .Cells(6 + 7 * pp + 2, 58 + aa) = 1 Then
                    my_PI_array(pp, aa) = ((.Cells(6 + (7 * pp) + 3, 58 + aa) * .Cells(6 + (7 * pp) + 4, 58 + aa) _
                        * .Cells(6 + (7 * pp) + 5, 58 + aa) * 1000 _
                        / (.Cells(6 + (7 * pp) + 6, 58 + aa) * percentFactor ^ 2)))
                End If
                
                'Particulate
                If .Cells(6 + 7 * pp + 1, 58 + aa) = 1 Then
                    my_PI_array(pp, aa) = -2
                End If
                
                'If neither of these are true, then the value stays at 0
                
            Next pp
        Next aa
    
    End With
End If


'----------------------------
'------Combine---------------
'----------------------------
For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            For rr = 0 To nRMs - 1
                Select Case my_RM_array(rr, aa)
                    
                    Case -1 'Intentional
                        aa_Table1(0, 5) = -1
                        
                        'individual
                        aa_Table1(aa + 1, 5) = -1
                    Case -2 'particulate
                        
                        If aa_Table1(0, 5) <> -1 Then
                            'aa_Table1(0, 5) = -2
                        End If
                        
                        aa_Table1(0, 4) = "YES"
                        
                        'individual
                        If aa_Table1(aa + 1, 5) <> -1 Then
                            'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                        End If
                        
                        aa_Table1(aa + 1, 4) = "YES"
                    
                    Case Is >= 0 'readily dispersible
                        
                        If aa_Table1(0, 5) >= 0 Then
                            aa_Table1(0, 5) = aa_Table1(0, 5) + my_RM_array(rr, aa)
                        End If
                        
                        'individual
                        If aa_Table1(aa + 1, 5) >= 0 Then
                            aa_Table1(aa + 1, 5) = aa_Table1(aa + 1, 5) + my_RM_array(rr, aa)
                        End If
                End Select
                
            Next rr
            If nPIs > 0 Then
                For pp = 0 To nPIs - 1
                    Select Case my_PI_array(pp, aa)
                        
                        Case -2 'particulate
                            
                            If aa_Table1(0, 5) <> -1 Then
                                'aa_Table1(0, 5) = -2
                            End If
                            
                            aa_Table1(0, 4) = "YES"
                            
                            'individual
                            If aa_Table1(aa + 1, 5) <> -1 Then
                                'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                            End If
                            aa_Table1(aa + 1, 4) = "YES"
                        Case Is >= 0 'readily dispersible
                            
                            If aa_Table1(0, 5) >= 0 Then
                                aa_Table1(0, 5) = aa_Table1(0, 5) + my_PI_array(pp, aa)
                                
                                
                            End If
                            
                            'individual
                            If aa_Table1(aa + 1, 5) >= 0 Then
                                aa_Table1(aa + 1, 5) = aa_Table1(aa + 1, 5) + my_PI_array(pp, aa)
                               
                            End If
                    
                    End Select
                Next pp
            End If
        
        Case "gluten"
            For rr = 0 To nRMs - 1
                Select Case my_RM_array(rr, aa)
                    Case -1 'Intentional
                        aa_Table1(1 + nTNs, 5) = -1
                        
                        'Individual
                        aa_Table1(aa + 2, 5) = -1
                    Case -2 'particulate
                        If aa_Table1(1 + nTNs, 5) <> -1 Then
                            'aa_Table1(1, 5) = -2
                        End If
                        
                        aa_Table1(1 + nTNs, 4) = "YES"
                        
                        'individual
                        If aa_Table1(aa + 2, 5) <> -1 Then
                            'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                        End If
                        
                        aa_Table1(aa + 2, 4) = "YES"
                        
                    Case Is >= 0 'readily dispersible
                        
                        If aa_Table1(1 + nTNs, 5) >= 0 Then
                            aa_Table1(1 + nTNs, 5) = aa_Table1(1 + nTNs, 5) + my_RM_array(rr, aa)
                            
                        End If
                        
                        If aa_Table1(aa + 2, 5) >= 0 Then
                            aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_RM_array(rr, aa)
                            
                        End If
                End Select
                
            Next rr
            If nPIs > 0 Then
                For pp = 0 To nPIs - 1
                    Select Case my_PI_array(pp, aa)
                        
                        Case -2 'particulate
                            If aa_Table1(1 + nTNs, 5) <> -1 Then
                                'aa_Table1(1, 5) = -2
                            End If
                            
                            aa_Table1(1 + nTNs, 4) = "YES"
                            
                            'individual
                            If aa_Table1(aa + 2, 5) <> -1 Then
                                'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                            End If
                            aa_Table1(aa + 2, 4) = "YES"
                        
                        Case Is >= 0 'readily dispersible
                            If aa_Table1(1 + nTNs, 5) >= 0 Then
                                aa_Table1(1 + nTNs, 5) = aa_Table1(1 + nTNs, 5) + my_PI_array(pp, aa)
                               
                            End If
                            
                            'individual
                            If aa_Table1(aa + 2, 5) >= 0 Then
                                aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_PI_array(pp, aa)
                                
                            End If
                    
                    End Select
                Next pp
            End If
        
        Case Else
            
            For rr = 0 To nRMs - 1
                Select Case my_RM_array(rr, aa)
                    
                    Case -1 'Intentional
                        aa_Table1(aa + 2, 5) = -1
                    
                    Case -2 'particulate
                        If aa_Table1(aa + 2, 5) <> -1 Then
                            'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                        End If
                        
                        aa_Table1(aa + 2, 4) = "YES"
                    
                    Case Is >= 0 'readily dispersible
                        If aa_Table1(aa + 2, 5) >= 0 Then
                            aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_RM_array(rr, aa)
                            
                        End If
                
                End Select
                
            Next rr
            
            If nPIs > 0 Then
                
                For pp = 0 To nPIs - 1
                    Select Case my_PI_array(pp, aa)
                        Case -2 'particulate
                            If aa_Table1(aa + 2, 5) <> -1 Then
                                'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                            End If
                            aa_Table1(aa + 2, 4) = "YES"
                        Case Is >= 0 'readily dispersible
                            If aa_Table1(aa + 2, 5) >= 0 Then
                                aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_PI_array(pp, aa)
                                 
                               
                            End If
                    End Select
                Next pp
            End If
            
    End Select
    
Next aa

For aa = 0 To mynALs - 1
    If aa_Table1(aa, 5) >= 0 Then
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    aa_Table1(aa, 5) = aa_Table1(aa, 5) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    aa_Table1(aa, 5) = aa_Table1(aa, 5) / (ProductConcentration / 100)
            End If
    End If
Next aa

            

'-----------------------------------
'---------Labelling outcomes--------
'-----------------------------------

'Note, this is the final labelling outcomes for the table
'The handlers for whether or not there is any particulate
'amounts of allergens is handled in the previous section
'As this obeys the priorities scale of outcomes.
'Nothing - Readily Dispersible - Particulate - Intentional

'Further note. Because of the desire to be able to ppm even
'if it is particulate, the handlers above have changed so
'that it doesn't overwrite ppm

For aa = 0 To mynALs - 1
    Select Case aa_Table1(aa, 5)
        Case 0 'nothing
            If aa_Table1(aa, 4) = "YES" Then
                aa_Table1(aa, 6) = "Action Level 2"
            Else
                aa_Table1(aa, 6) = ""
            End If
        Case Is > 0 'readily dispersible
            If aa_Table1(aa, 5) >= aa_Table1(aa, 2) Then
                aa_Table1(aa, 6) = "Action Level 2"
            
            ElseIf aa_Table1(aa, 4) = "YES" Then 'particulate
                aa_Table1(aa, 6) = "Action Level 2"
            
            Else
                aa_Table1(aa, 6) = "Action Level 1"
            End If
            
        Case -1 'intentionally added
            aa_Table1(aa, 6) = "Intentionally Added"
        'Case -2 'Particulate
        '    aa_Table1(aa, 6) = "Action Level 2"
    End Select
Next aa





Dim NzAusCount As Long
    Dim OtherCount As Long
    'Dim ii As Long
    
    For ii = LBound(AA_Catagories) To UBound(AA_Catagories)
        If (AA_Catagories(ii) = 1) Then NzAusCount = NzAusCount + 1
        If (AA_Catagories(ii) = 2) Then OtherCount = OtherCount + 1
    Next ii

Dim NzAusTopRow, OtherTopRow As Long
    NzAusTopRow = 17
    OtherTopRow = 39



'------------------------------
'------Deselected--------------
'------------------------------

'Note, Tree Nuts and Gluten are always selected.

For aa = 0 To nAls - 1
    If AA_Selected(aa) = 0 Then
        Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            'aa_Table1(0, 1) = "Not assessed"
            'aa_Table1(0, 2) = ""
            'aa_Table1(0, 3) = ""
            'aa_Table1(0, 4) = ""
            'aa_Table1(0, 5) = ""
            'aa_Table1(0, 6) = ""
            aa_Table1(aa + 1, 1) = "Not assessed"
            aa_Table1(aa + 1, 2) = ""
            aa_Table1(aa + 1, 3) = ""
            aa_Table1(aa + 1, 4) = ""
            aa_Table1(aa + 1, 5) = ""
            aa_Table1(aa + 1, 6) = ""
        Case "gluten"
            aa_Table1(aa + 2, 1) = "Not assessed"
            aa_Table1(aa + 2, 2) = ""
            aa_Table1(aa + 2, 3) = ""
            aa_Table1(aa + 2, 4) = ""
            aa_Table1(aa + 2, 5) = ""
            aa_Table1(aa + 2, 6) = ""
        Case Else
            aa_Table1(aa + 2, 1) = "Not assessed"
            aa_Table1(aa + 2, 2) = ""
            aa_Table1(aa + 2, 3) = ""
            aa_Table1(aa + 2, 4) = ""
            aa_Table1(aa + 2, 5) = ""
            aa_Table1(aa + 2, 6) = ""
        End Select
    End If
Next aa


ReDim myaa_Reference_Colors(0 To mynALs - 1, 0 To 1)



'-----------------------------------------------------
'------Fill Grid with values--------------------------
'-----------------------------------------------------


Cells(11, 13).Value = "Action Level (ppm) where Reference Amount / Serving Size is " & ProductReferenceQuantity & "g"
Dim my_Offset As Long

For aa = 0 To mynALs - 1
    Select Case aa
    'The cases are "Tree Nuts (total)" = 0, which will merge two rows, and enter into the top
    'Case for other tree nuts, offset by 1 row
    'Case for Glutens, total, merge two rows, which is offset by a single extra row,
    'Case for other glutens, single row, offset by 2 rows
    'Case for other allergens, single row, offset by 2 rows
    
    Case 0 'tree nuts total
        my_Offset = 0
        'Merge Cells
        For ii = 0 To 6
            Range(Cells(17 + aa, 11 + ii), Cells(17 + aa + 1, 11 + ii)).Merge
            Range(Cells(17 + aa, 11 + ii), Cells(17 + aa + 1, 11 + ii)).WrapText = True
            
        Next ii
        
        
        'Values:
        
        'name
        Cells(17 + aa, 11 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa, 11 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            Cells(17 + aa, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            Cells(17 + aa, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa, 11 + 3).Value = aa_Table1(aa, 3)
        
        'Particulate
        Cells(17 + aa, 11 + 4).Value = aa_Table1(aa, 4)
        
        'Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa, 11 + 5).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa, 11 + 5).Value = ""
            End If
        Else
            'Cells(17 + aa, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa, 11 + 5).Value = ""
        End If
        
        'Action Level
        Cells(17 + aa, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa, 11 + 6).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            Case "Action Level 2"
                Cells(17 + aa, 11 + 6).Interior.Color = RGB(206, 36, 43)
                myaa_Reference_Colors(aa, 0) = 2
            Case "Action Level 1"
                Cells(17 + aa, 11 + 6).Interior.Color = RGB(141, 198, 63)
                myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa, 11 + 2).Value = ""
            Cells(17 + aa, 11 + 3).Value = ""
            Cells(17 + aa, 11 + 4).Value = ""
            Cells(17 + aa, 11 + 5).Value = ""
            Cells(17 + aa, 11 + 6).Value = ""
        
            Range(Cells(17 + aa, 11 + 1), Cells(17 + aa, 11 + 6)).Merge
            Cells(17 + aa, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    
    
    '---------------------------------------------
    Case 1 To nTNs 'Tree nuts individual
    '----------------------------------------------
    my_Offset = 1
    
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            'Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            'Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 4).Value = aa_Table1(aa, 4)
        
        'Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 5).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
        End If
        
        'Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
                Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            Case "Action Level 2"
                'Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
                'myaa_Reference_Colors(aa, 0) = 2
            Case "Action Level 1"
                'Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
                'myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    
    
    '---------------------------------------------------
    Case nTNs + 1 'Glutens Total
    '---------------------------------------------------
        
        my_Offset = 1
        
        'Merge Cells
        For ii = 0 To 6
            Range(Cells(17 + aa + my_Offset, 11 + ii), Cells(17 + aa + my_Offset + 1, 11 + ii)).Merge
            Range(Cells(17 + aa + my_Offset, 11 + ii), Cells(17 + aa + my_Offset + 1, 11 + ii)).WrapText = True
                
        Next ii
            
            
            'Values:
            
            'name
            Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
            
            'Ref dose
            Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
            
            'AL1
            If IsNumeric(aa_Table1(aa, 2)) Then
                Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
            Else
                Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
            End If
            
            'Al2
            Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
            
            'Particulate
            Cells(17 + aa + my_Offset, 11 + 4).Value = aa_Table1(aa, 4)
            
            'Readily Dispersible
            If IsNumeric(aa_Table1(aa, 5)) Then
                If aa_Table1(aa, 5) > 0 Then
                    Cells(17 + aa + my_Offset, 11 + 5).Value = Round(aa_Table1(aa, 5), 1)
                Else
                    Cells(17 + aa + my_Offset, 11 + 5).Value = ""
                End If
            Else
                'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
                Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            End If
            
            'Action Level
            Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
            
            Select Case aa_Table1(aa, 6)
                Case "Intentionally Added"
                    'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(178, 178, 178)
                    myaa_Reference_Colors(aa, 0) = 3
                Case "Action Level 2"
                    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
                    myaa_Reference_Colors(aa, 0) = 2
                Case "Action Level 1"
                    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
                    myaa_Reference_Colors(aa, 0) = 1
                Case Else
            End Select
            If LCase(aa_Table1(aa, 1)) = "not assessed" Then
                
                Cells(17 + aa + my_Offset, 11 + 2).Value = ""
                Cells(17 + aa + my_Offset, 11 + 3).Value = ""
                Cells(17 + aa + my_Offset, 11 + 4).Value = ""
                Cells(17 + aa + my_Offset, 11 + 5).Value = ""
                Cells(17 + aa + my_Offset, 11 + 6).Value = ""
            
                Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
                Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
                
                myaa_Reference_Colors(aa, 1) = 1
            End If
            'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
        
        
    '---------------------------------------------
    Case nTNs + 2 To nTNs + nGluts + 1 'Individual glutens
    '---------------------------------------------
    my_Offset = 2
    
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            'Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            'Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 4).Value = aa_Table1(aa, 4)
        
        'Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 5).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
        End If
        
        'Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
                Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            Case "Action Level 2"
                'Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
                'myaa_Reference_Colors(aa, 0) = 2
            Case "Action Level 1"
                'Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
                'myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    

    '----------------------------------------------
    Case nTNs + nGluts + 2 To mynALs 'non grouped allergens
    '-----------------------------------------------
    my_Offset = 2
  
        
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        'Ref dose
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        
        'AL1
        If IsNumeric(aa_Table1(aa, 2)) Then
            Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 1) & " ppm"
        Else
            Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        End If
        
        'Al2
        Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 4).Value = aa_Table1(aa, 4)
        
        'Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 5).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
        End If
        
        'Action Level
        Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            Case "Action Level 2"
                Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
                myaa_Reference_Colors(aa, 0) = 2
            Case "Action Level 1"
                Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
                myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    End Select
    

Next aa


'--------------------------------
'---------Make Pretty------------
'--------------------------------

Range(Cells(17, 11), Cells(17 - 1 + mynALs + 2, 17)).Select



With Selection
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlThin
End With

End Sub
Sub createNewTable1NoServingSize()
'Creates table 1 for detailed summary
'Runs through each allergen, sums the ppm etc, and then pushes info
'to sheet: Detailed Summary New
Dim aa, rr, pp, ii As Long
Dim x As Double

Dim my_RM_array As Variant
Dim my_PI_array As Variant
Dim aa_Table1 As Variant

'---------------------------
'--------Setup arrays-------
'---------------------------

my_RM_array = Array()
my_PI_array = Array()
aa_Table1 = Array()

ReDim my_RM_array(0 To nRMs - 1, 0 To nAls - 1)
'ReDim my_PI_array(0 To nPIs - 1, 0 To nAls - 1)
If nPIs > 0 Then
    
    ReDim my_PI_array(0 To nPIs - 1, 0 To nAls - 1)
ElseIf nPIs = 0 Then
    ReDim my_PI_array(0, 0 To nAls - 1)
End If
'Values in these arrays will be
'-2 for Particulate
'-1 for Intentionally added
'0 for nothing
'>0 for PPM concentration


ReDim aa_Table1(0 To mynALs - 1, 0 To 6)
'This is the final table of condensed values for table 1, merging Tree Nuts and Glutens
'Values 0 to 6 will be the equivalents of the values in the table
'0 Name
'1 ref dose (ppm)
'2 ALvl 1
'3 Alvl 2
'4 Particulate
'5 Readily Dispersible (ppm), unrounded
'6 Labelling outcome

'---------------------------
'-----Set Defaults----------
'---------------------------

For aa = 0 To nAls - 1
    For rr = 0 To nRMs - 1
        my_RM_array(rr, aa) = 0
    Next rr
    If nPIs > 0 Then
        For pp = 0 To nPIs - 1
            my_PI_array(pp, aa) = 0
        Next pp
    End If
Next aa


For aa = 0 To mynALs - 1
    aa_Table1(aa, 0) = ""
    'aa_Table1(aa, 1) = 0
    'aa_Table1(aa, 2) = 0
    'aa_Table1(aa, 3) = 0
    aa_Table1(aa, 4) = ""
    aa_Table1(aa, 5) = 0
    'aa_Table1(aa, 6) = ""
Next aa
aa_Table1(0, 0) = "Tree Nuts (Total)"
'aa_Table1(0, 1) = AA_Quantities(0)
'aa_Table1(0, 2) = ActionLevelsArray(0, 0)
'aa_Table1(0, 3) = ActionLevelsArray(0, 2)

aa_Table1(1 + nTNs, 0) = "Gluten-containing cereals (total)"
'aa_Table1(1 + nTNs, 1) = AA_Quantities(10)
'aa_Table1(1 + nTNs, 2) = ActionLevelsArray(10, 0)
'aa_Table1(1 + nTNs, 3) = ActionLevelsArray(10, 2)

For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
        aa_Table1(aa + 1, 0) = "   " & AA_ShortNames(aa)
        'aa_Table1(aa + 1, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 1, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 1, 3) = ActionLevelsArray(aa, 2)
        
        Case "gluten"
        aa_Table1(aa + 2, 0) = "   " & AA_ShortNames(aa)
        'aa_Table1(aa + 2, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 2, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 2, 3) = ActionLevelsArray(aa, 2)
        
        
        Case Else
        aa_Table1(aa + 2, 0) = AA_ShortNames(aa)
        'aa_Table1(aa + 2, 1) = AA_Quantities(aa)
        'aa_Table1(aa + 2, 2) = ActionLevelsArray(aa, 0)
        'aa_Table1(aa + 2, 3) = ActionLevelsArray(aa, 2)
    
    End Select
Next aa





'----------------------------
'------Raw Materials---------
'----------------------------
With Sheets("Internal Data2")

    For aa = 0 To (nAls - 1)
        'Sum allergen ppms for each RM:
        For rr = 0 To (nRMs - 1)
            'PPM
            If .Cells(6 + 6 * rr + 3, 4 + aa) = 1 Then
                my_RM_array(rr, aa) = .Cells(6 + 6 * rr + 4, 4 + aa) * (RM_Q_array(rr) / percentFactor)
            End If
            
            'Particulate
            If .Cells(6 + 6 * rr + 2, 4 + aa) = 1 Then
                my_RM_array(rr, aa) = -2
            End If
            
            'Intentionally Added
            If .Cells(6 + 6 * rr + 1, 4 + aa) = 1 Then
                my_RM_array(rr, aa) = -1
            End If
        Next rr
    Next aa

End With




'--------------------------------
'-------Processing Impacts-------
'--------------------------------


'Summing parts per million from processing impacts, off the arrays rather than
'off the information documents. NB: Want to put in an array updater that will pull information
'each time you go into the next set of pages.
If nPIs > 0 Then
    With Sheets("Internal Data2")
    
        For aa = 0 To (nAls - 1)
            'Sum allergen ppms for each RM:
            For pp = 0 To (nPIs - 1)
                'PPM
                If .Cells(6 + 7 * pp + 2, 58 + aa) = 1 Then
                    my_PI_array(pp, aa) = ((.Cells(6 + (7 * pp) + 3, 58 + aa) * .Cells(6 + (7 * pp) + 4, 58 + aa) _
                        * .Cells(6 + (7 * pp) + 5, 58 + aa) * 1000 _
                        / (.Cells(6 + (7 * pp) + 6, 58 + aa) * percentFactor ^ 2)))
                End If
                
                'Particulate
                If .Cells(6 + 7 * pp + 1, 58 + aa) = 1 Then
                    my_PI_array(pp, aa) = -2
                End If
                
                'If neither of these are true, then the value stays at 0
                
            Next pp
        Next aa
    
    End With
End If


'----------------------------
'------Combine---------------
'----------------------------
For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            For rr = 0 To nRMs - 1
                Select Case my_RM_array(rr, aa)
                    
                    Case -1 'Intentional
                        aa_Table1(0, 5) = -1
                        
                        'individual
                        aa_Table1(aa + 1, 5) = -1
                    Case -2 'particulate
                        
                        If aa_Table1(0, 5) <> -1 Then
                            'aa_Table1(0, 5) = -2
                        End If
                        
                        aa_Table1(0, 4) = "YES"
                        
                        'individual
                        If aa_Table1(aa + 1, 5) <> -1 Then
                            'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                        End If
                        
                        aa_Table1(aa + 1, 4) = "YES"
                    
                    Case Is >= 0 'readily dispersible
                        
                        If aa_Table1(0, 5) >= 0 Then
                            aa_Table1(0, 5) = aa_Table1(0, 5) + my_RM_array(rr, aa)
                        End If
                        
                        'individual
                        If aa_Table1(aa + 1, 5) >= 0 Then
                            aa_Table1(aa + 1, 5) = aa_Table1(aa + 1, 5) + my_RM_array(rr, aa)
                        End If
                End Select
                
            Next rr
            
            If nPIs > 0 Then
                For pp = 0 To nPIs - 1
                    Select Case my_PI_array(pp, aa)
                        
                        Case -2 'particulate
                            
                            If aa_Table1(0, 5) <> -1 Then
                                'aa_Table1(0, 5) = -2
                            End If
                            
                            aa_Table1(0, 4) = "YES"
                            
                            'individual
                            If aa_Table1(aa + 1, 5) <> -1 Then
                                'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                            End If
                            aa_Table1(aa + 1, 4) = "YES"
                        Case Is >= 0 'readily dispersible
                            
                            If aa_Table1(0, 5) >= 0 Then
                                aa_Table1(0, 5) = aa_Table1(0, 5) + my_PI_array(pp, aa)
                            End If
                            
                            'individual
                            If aa_Table1(aa + 1, 5) >= 0 Then
                                aa_Table1(aa + 1, 5) = aa_Table1(aa + 1, 5) + my_PI_array(pp, aa)
                            End If
                    
                    End Select
                Next pp
            End If
        
        Case "gluten"
            For rr = 0 To nRMs - 1
                Select Case my_RM_array(rr, aa)
                    Case -1 'Intentional
                        aa_Table1(1 + nTNs, 5) = -1
                        
                        'Individual
                        aa_Table1(aa + 2, 5) = -1
                    Case -2 'particulate
                        If aa_Table1(1 + nTNs, 5) <> -1 Then
                            'aa_Table1(1, 5) = -2
                        End If
                        
                        aa_Table1(1 + nTNs, 4) = "YES"
                        
                        'individual
                        If aa_Table1(aa + 2, 5) <> -1 Then
                            'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                        End If
                        
                        aa_Table1(aa + 2, 4) = "YES"
                        
                    Case Is >= 0 'readily dispersible
                        If aa_Table1(1 + nTNs, 5) >= 0 Then
                            aa_Table1(1 + nTNs, 5) = aa_Table1(1 + nTNs, 5) + my_RM_array(rr, aa)
                        End If
                        
                        'individual
                        If aa_Table1(aa + 2, 5) >= 0 Then
                            aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_RM_array(rr, aa)
                        End If
                End Select
                
            Next rr
            
            If nPIs > 0 Then
                For pp = 0 To nPIs - 1
                    Select Case my_PI_array(pp, aa)
                        
                        Case -2 'particulate
                            If aa_Table1(1 + nTNs, 5) <> -1 Then
                                'aa_Table1(1, 5) = -2
                            End If
                            
                            aa_Table1(1 + nTNs, 4) = "YES"
                            
                            'individual
                            If aa_Table1(aa + 2, 5) <> -1 Then
                                'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                            End If
                            aa_Table1(aa + 2, 4) = "YES"
                        
                        Case Is >= 0 'readily dispersible
                            If aa_Table1(1 + nTNs, 5) >= 0 Then
                                aa_Table1(1 + nTNs, 5) = aa_Table1(1 + nTNs, 5) + my_PI_array(pp, aa)
                            End If
                            
                            'individual
                            If aa_Table1(aa + 2, 5) >= 0 Then
                                aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_PI_array(pp, aa)
                            End If
                    
                    End Select
                Next pp
            End If
        
        Case Else
            
            For rr = 0 To nRMs - 1
                Select Case my_RM_array(rr, aa)
                    
                    Case -1 'Intentional
                        aa_Table1(aa + 2, 5) = -1
                    
                    Case -2 'particulate
                        If aa_Table1(aa + 2, 5) <> -1 Then
                            'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                        End If
                        
                        aa_Table1(aa + 2, 4) = "YES"
                    
                    Case Is >= 0 'readily dispersible
                        If aa_Table1(aa + 2, 5) >= 0 Then
                            aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_RM_array(rr, aa)
                        End If
                
                End Select
                
            Next rr
            
            If nPIs > 0 Then
                For pp = 0 To nPIs - 1
                    Select Case my_PI_array(pp, aa)
                        Case -2 'particulate
                            If aa_Table1(aa + 2, 5) <> -1 Then
                                'aa_Table1(aa - nTNs - nGluts + 2, 5) = -2
                            End If
                            aa_Table1(aa + 2, 4) = "YES"
                        Case Is >= 0 'readily dispersible
                            If aa_Table1(aa + 2, 5) >= 0 Then
                                aa_Table1(aa + 2, 5) = aa_Table1(aa + 2, 5) + my_PI_array(pp, aa)
                            End If
                    End Select
                Next pp
            End If
            
    End Select
    
Next aa


'adjust for dilution and concentration

For aa = 0 To mynALs - 1
    If aa_Table1(aa, 5) >= 0 Then
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    aa_Table1(aa, 5) = aa_Table1(aa, 5) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    aa_Table1(aa, 5) = aa_Table1(aa, 5) / (ProductConcentration / 100)
            End If
    End If
Next aa



'-----------------------------------
'---------Labelling outcomes--------
'-----------------------------------

'Note, this is the final labelling outcomes for the table
'The handlers for whether or not there is any particulate
'amounts of allergens is handled in the previous section
'As this obeys the priorities scale of outcomes.
'Nothing - Readily Dispersible - Particulate - Intentional

'Further note. Because of the desire to be able to ppm even
'if it is particulate, the handlers above have changed so
'that it doesn't overwrite ppm

For aa = 0 To mynALs - 1
    Select Case aa_Table1(aa, 5)
        Case 0 'nothing
            If aa_Table1(aa, 4) = "YES" Then
                aa_Table1(aa, 6) = "Action Level 2"
            Else
                aa_Table1(aa, 6) = ""
            End If
        Case Is > 0 'readily dispersible
            If aa_Table1(aa, 5) > aa_Table1(aa, 2) Then
                aa_Table1(aa, 6) = "Action Level 2"
            
            ElseIf aa_Table1(aa, 4) = "YES" Then 'particulate
                aa_Table1(aa, 6) = "Action Level 2"
            
            Else
                aa_Table1(aa, 6) = "Action Level 1"
            End If
            
        Case -1 'intentionally added
            aa_Table1(aa, 6) = "Intentionally Added"
        'Case -2 'Particulate
        '    aa_Table1(aa, 6) = "Action Level 2"
    End Select
Next aa





Dim NzAusCount As Long
    Dim OtherCount As Long
    'Dim ii As Long
    
    For ii = LBound(AA_Catagories) To UBound(AA_Catagories)
        If (AA_Catagories(ii) = 1) Then NzAusCount = NzAusCount + 1
        If (AA_Catagories(ii) = 2) Then OtherCount = OtherCount + 1
    Next ii

Dim NzAusTopRow, OtherTopRow As Long
    NzAusTopRow = 17
    OtherTopRow = 39



'------------------------------
'------Deselected--------------
'------------------------------

'Note, Tree Nuts and Gluten are always selected.

For aa = 0 To nAls - 1
    If AA_Selected(aa) = 0 Then
        Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            'aa_Table1(0, 1) = "Not assessed"
            'aa_Table1(0, 2) = ""
            'aa_Table1(0, 3) = ""
            'aa_Table1(0, 4) = ""
            'aa_Table1(0, 5) = ""
            'aa_Table1(0, 6) = ""
            aa_Table1(aa + 1, 1) = "Not assessed"
            aa_Table1(aa + 1, 2) = ""
            aa_Table1(aa + 1, 3) = ""
            aa_Table1(aa + 1, 4) = ""
            aa_Table1(aa + 1, 5) = ""
            aa_Table1(aa + 1, 6) = ""
        Case "gluten"
            aa_Table1(aa + 2, 1) = "Not assessed"
            aa_Table1(aa + 2, 2) = ""
            aa_Table1(aa + 2, 3) = ""
            aa_Table1(aa + 2, 4) = ""
            aa_Table1(aa + 2, 5) = ""
            aa_Table1(aa + 2, 6) = ""
        Case Else
            aa_Table1(aa + 2, 1) = "Not assessed"
            aa_Table1(aa + 2, 2) = ""
            aa_Table1(aa + 2, 3) = ""
            aa_Table1(aa + 2, 4) = ""
            aa_Table1(aa + 2, 5) = ""
            aa_Table1(aa + 2, 6) = ""
        End Select
    End If
Next aa


ReDim myaa_Reference_Colors(0 To mynALs - 1, 0 To 1)

Dim my_Offset As Long


'--------------------------------------------
'------Fill Grid with values-----------------
'--------------------------------------------



For aa = 0 To mynALs - 1

    Select Case aa
    Case 0
    
    
        my_Offset = 0
        
        'Merge cells
        For ii = 0 To 6
            Range(Cells(17 + aa + my_Offset, 11 + ii), Cells(17 + aa + my_Offset + 1, 11 + ii)).Merge
            Range(Cells(17 + aa + my_Offset, 11 + ii), Cells(17 + aa + my_Offset + 1, 11 + ii)).WrapText = True
        Next ii
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        ''Ref dose
        'Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        '
        ''AL1
        'If IsNumeric(aa_Table1(aa, 2)) Then
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 0) & " ppm"
        'Else
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        'End If
        
        ''Al2
        'Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        '
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 4)
        
        ''Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 4).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
        End If
        
        ''Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 4).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            'Case "Action Level 2"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
            '    myaa_Reference_Colors(aa, 0) = 2
            'Case "Action Level 1"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
            '    myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 12).Value = "Not Assessed"
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
        
        
    
    
    
    Case 1 To nTNs
    
    
        my_Offset = 1
        

        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        ''Ref dose
        'Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        '
        ''AL1
        'If IsNumeric(aa_Table1(aa, 2)) Then
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 0) & " ppm"
        'Else
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        'End If
        
        ''Al2
        'Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        '
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 4)
        
        ''Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 4).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
        End If
        
        ''Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 4).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            'Case "Action Level 2"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
            '    myaa_Reference_Colors(aa, 0) = 2
            'Case "Action Level 1"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
            '    myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 12).Value = "Not Assessed"
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    
    
    Case nTNs + 1
    
    
        my_Offset = 1
        
        'Merge cells
        For ii = 0 To 6
            Range(Cells(17 + aa + my_Offset, 11 + ii), Cells(17 + aa + my_Offset + 1, 11 + ii)).Merge
            Range(Cells(17 + aa + my_Offset, 11 + ii), Cells(17 + aa + my_Offset + 1, 11 + ii)).WrapText = True
        Next ii
        
        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        ''Ref dose
        'Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        '
        ''AL1
        'If IsNumeric(aa_Table1(aa, 2)) Then
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 0) & " ppm"
        'Else
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        'End If
        
        ''Al2
        'Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        '
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 4)
        
        ''Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 4).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
        End If
        
        ''Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 4).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            'Case "Action Level 2"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
            '    myaa_Reference_Colors(aa, 0) = 2
            'Case "Action Level 1"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
            '    myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 12).Value = "Not Assessed"
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
        
        
    Case nTNs + 2 To nTNs + nGluts + 1
    
    
        my_Offset = 2

        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        ''Ref dose
        'Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        '
        ''AL1
        'If IsNumeric(aa_Table1(aa, 2)) Then
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 0) & " ppm"
        'Else
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        'End If
        
        ''Al2
        'Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        '
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 4)
        
        ''Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 4).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
        End If
        
        ''Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 4).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            'Case "Action Level 2"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
            '    myaa_Reference_Colors(aa, 0) = 2
            'Case "Action Level 1"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
            '    myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 12).Value = "Not Assessed"
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    
    Case nTNs + nGluts + 2 To mynALs
    
    
        my_Offset = 2

        'Values:
        
        'name
        Cells(17 + aa + my_Offset, 11 + 0).Value = aa_Table1(aa, 0)
        
        ''Ref dose
        'Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 1)
        '
        ''AL1
        'If IsNumeric(aa_Table1(aa, 2)) Then
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & Round(aa_Table1(aa, 2), 0) & " ppm"
        'Else
        '    Cells(17 + aa + my_Offset, 11 + 2).Value = "<" & aa_Table1(aa, 2) & " ppm"
        'End If
        
        ''Al2
        'Cells(17 + aa + my_Offset, 11 + 3).Value = aa_Table1(aa, 3)
        '
        'Particulate
        Cells(17 + aa + my_Offset, 11 + 1).Value = aa_Table1(aa, 4)
        
        ''Readily Dispersible
        If IsNumeric(aa_Table1(aa, 5)) Then
            If aa_Table1(aa, 5) > 0 Then
                Cells(17 + aa + my_Offset, 11 + 4).Value = Round(aa_Table1(aa, 5), 1)
            Else
                Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            End If
        Else
            'Cells(17 + aa + my_Offset, 11 + 5).Value = aa_Table1(aa, 5)
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
        End If
        
        ''Action Level
        'Cells(17 + aa + my_Offset, 11 + 6).Value = aa_Table1(aa, 6)
        
        Select Case aa_Table1(aa, 6)
            Case "Intentionally Added"
                'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
                Cells(17 + aa + my_Offset, 11 + 4).Interior.Color = RGB(178, 178, 178)
                myaa_Reference_Colors(aa, 0) = 3
            'Case "Action Level 2"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(206, 36, 43)
            '    myaa_Reference_Colors(aa, 0) = 2
            'Case "Action Level 1"
            '    Cells(17 + aa + my_Offset, 11 + 6).Interior.Color = RGB(141, 198, 63)
            '    myaa_Reference_Colors(aa, 0) = 1
            Case Else
        End Select
        If LCase(aa_Table1(aa, 1)) = "not assessed" Then
            
            Cells(17 + aa + my_Offset, 11 + 2).Value = ""
            Cells(17 + aa + my_Offset, 11 + 3).Value = ""
            Cells(17 + aa + my_Offset, 11 + 4).Value = ""
            Cells(17 + aa + my_Offset, 11 + 5).Value = ""
            Cells(17 + aa + my_Offset, 11 + 6).Value = ""
        
            Range(Cells(17 + aa + my_Offset, 11 + 1), Cells(17 + aa + my_Offset, 11 + 6)).Merge
            Cells(17 + aa + my_Offset, 12).Value = "Not Assessed"
            Cells(17 + aa + my_Offset, 11).Interior.Color = RGB(255, 255, 255)
            
            myaa_Reference_Colors(aa, 1) = 1
        End If
        'Cells(NzAusTopRow + aa, 10 + 7).Interior.Color = AL_ActionLevelColours(aa)
    
  

    End Select
Next aa


'--------------------------------
'---------Make Pretty------------
'--------------------------------

Range(Cells(17, 11), Cells(17 - 1 + mynALs + 2, 17)).Select



With Selection
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlThin
End With

End Sub

Sub createNewTable2()

'---Pull information into arrays

Dim RMi, ii As Long

ReDim aa_RMs_int(0 To (nRMs - 1), 0 To 2) 'int as in internal
Dim RM_Sum As Long
RM_Sum = 0

For RMi = 0 To (nRMs - 1)
    With Sheets("Internal Data1")
        aa_RMs_int(RMi, 0) = .Cells(5 + RMi, 25 + 0) 'name
        aa_RMs_int(RMi, 2) = .Cells(5 + RMi, 25 + 1) 'percent
        aa_RMs_int(RMi, 1) = .Cells(5 + RMi, 25 + 2) '2 and three must be swapped around so that the ordering after push remains as wanted
        
    End With
Next RMi

'------push information to table
With Sheets("Long Summary")
    For RMi = 0 To (nRMs - 1)
        For ii = 0 To 2
            .Cells(13 + RMi, 19 + ii) = aa_RMs_int(RMi, ii)
        Next ii
    Next RMi
End With
        
'--------------------------------
'---------Make Pretty------------
'--------------------------------

Range(Cells(13, 19), Cells(13 - 1 + nRMs, 21)).Select


With Selection
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlThin
End With



End Sub
Sub createNewTable3()

'---Pull information into arrays

Dim RMi, ii As Long
Dim aa_RMs_assumptions As Variant
ReDim aa_RMs_assumptions(0 To (nRMs - 1))

For RMi = 0 To (nRMs - 1)
    With Sheets("Internal Data2")
        aa_RMs_assumptions(RMi) = .Cells(6 * (RMi + 1) + 5, 3)
    End With
Next RMi

'------push information to table
With Sheets("Long Summary")
    For RMi = 0 To (nRMs - 1)
        
            .Cells(13 + RMi, 23) = aa_RMs_int(RMi, 0) 'names
            .Cells(13 + RMi, 24) = aa_RMs_assumptions(RMi) 'assumptions
        
    Next RMi
End With
        
'--------------------------------
'---------Make Pretty------------
'--------------------------------

Range(Cells(13, 23), Cells(13 - 1 + nRMs, 24)).Select



With Selection
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlThin
End With


End Sub
Sub createNewTable4()

'---Pull information into arrays
Dim aa, ii, rr As Long
Dim aa_Table4 As Variant
Dim aa_Table4_names As Variant


aa_RMbyAL = Array()
ReDim aa_RMbyAL(0 To (nRMs - 1), 0 To (nAls - 1))
'array values are
'-1 for Intentionally added
'-2 for Particulate
'0 for no allergen status
'any positive number for readily dispersible will equal the readily dispersible ppm

With Sheets("Internal Data2")
    For rr = 0 To nRMs - 1
        For aa = 0 To nAls - 1
            If .Cells(6 * (rr + 1) + 1, 4 + aa) = 1 Then 'intentionally added
                aa_RMbyAL(rr, aa) = -1
            ElseIf .Cells(6 * (rr + 1) + 2, 4 + aa) = 1 Then 'Particulate
                aa_RMbyAL(rr, aa) = -2
            ElseIf .Cells(6 * (rr + 1) + 3, 4 + aa) = 1 Then 'readily dispersible
                aa_RMbyAL(rr, aa) = .Cells(6 * (rr + 1) + 4, 4 + aa) * (RM_Q_array(rr) / percentFactor) 'concentration
            Else
                aa_RMbyAL(rr, aa) = 0
            End If
        Next aa
    Next rr

End With

aa_Table4 = Array()
ReDim aa_Table4(0 To nRMs - 1, 0 To mynALs - 1)

'set defaults
For rr = 0 To nRMs - 1
    For aa = 0 To mynALs - 1
        aa_Table4(rr, aa) = 0
    Next aa
Next rr

'Set values
For rr = 0 To nRMs - 1
    For aa = 0 To nAls - 1
        
        Select Case LCase(AA_MergedNames(aa))
            
            Case "tree nuts"
                Select Case aa_RMbyAL(rr, aa)
                    Case -1 'intentional
                        aa_Table4(rr, 0) = -1
                        
                        'individual
                        aa_Table4(rr, aa + 1) = -1
                    Case -2 'particulate
                        If aa_Table4(rr, 0) >= 0 Then
                            aa_Table4(rr, 0) = -2
                        End If
                        
                        'individual
                        If aa_Table4(rr, aa + 1) >= 0 Then
                            aa_Table4(rr, aa + 1) = -2
                        End If
                    
                    Case 0
                    
                    Case Is > 0
                        If aa_Table4(rr, 0) >= 0 Then
                            aa_Table4(rr, 0) = aa_Table4(rr, 0) + aa_RMbyAL(rr, aa)
                        End If
                        
                        'individual
                        If aa_Table4(rr, aa + 1) >= 0 Then
                            aa_Table4(rr, aa + 1) = aa_RMbyAL(rr, aa)
                        End If
                End Select
            
            Case "gluten"
                Select Case aa_RMbyAL(rr, aa)
                    Case -1 'intentional
                        aa_Table4(rr, 1 + nTNs) = -1
                        
                        aa_Table4(rr, aa + 2) = -1
                    Case -2 'particulate
                        If aa_Table4(rr, 1 + nTNs) >= 0 Then
                            aa_Table4(rr, 1 + nTNs) = -2
                        End If
                        
                        If aa_Table4(rr, aa + 2) >= 0 Then
                            aa_Table4(rr, aa + 2) = -2
                        End If
                    
                    Case 0
                    
                    Case Is > 0 'readily dispersible
                        If aa_Table4(rr, 1 + nTNs) >= 0 Then
                            aa_Table4(rr, 1 + nTNs) = aa_Table4(rr, 0) + aa_RMbyAL(rr, aa)
                        End If
                        
                        If aa_Table4(rr, aa + 2) >= 0 Then
                            aa_Table4(rr, aa + 2) = aa_RMbyAL(rr, aa)
                        End If
                End Select
                
            Case Else 'not grouped allergen
                
                Select Case aa_RMbyAL(rr, aa)
                    Case -1 'intentional
                        aa_Table4(rr, aa + 2) = -1
                    
                    Case -2 'particulate
                        If aa_Table4(rr, aa + 2) >= 0 Then
                            aa_Table4(rr, aa + 2) = -2
                        End If
                    
                    Case 0
                    
                    Case Is > 0
                        If aa_Table4(rr, aa + 2) >= 0 Then
                            aa_Table4(rr, aa + 2) = aa_RMbyAL(rr, aa)
                        End If
                End Select
        End Select
            
                        
        
    Next aa
Next rr

'For aa = 0 To mynALs - 1
'    For rr = 0 To nRMs - 1
'        MsgBox aa_Table4(rr, aa)
'    Next rr
'Next aa


'NAMES
ReDim aa_Table4_names(0 To mynALs - 1)

'set defaults

aa_Table4_names(0) = "Tree Nuts"
aa_Table4_names(1 + nTNs) = "Gluten"

For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
        aa_Table4_names(aa + 1) = AA_ShortNames(aa)

        
        Case "gluten"
        aa_Table4_names(aa + 2) = AA_ShortNames(aa)

        
        
        Case Else
        aa_Table4_names(aa + 2) = AA_ShortNames(aa)

    End Select
Next aa


'-------------------------------
'------push values to sheet-----
'-------------------------------

With Sheets("Long Summary")
    For aa = 0 To mynALs - 1
        .Cells(12, 27 + aa + 2 * (aa \ 7)) = aa_Table4_names(aa)
        
        'Select Case aa
        '             Case 0
        '        .Cells(12, 27 + 0) = "Tree Nuts"
        '    Case 1
        '        .Cells(12, 27 + 1 + nTNs) = "Gluten"
        '    Case Else
        '        .Cells(12, 27 + aa + 2 * (aa \ 7)) = AA_ShortNames(aa + nTNs + nGluts - 2)
        'End Select
    Next aa
    
    For rr = 0 To nRMs - 1
        
        For ii = 0 To mynALs \ 7
            .Cells(13 + rr, 26 + (9 * ii)) = aa_RMs_int(rr, 0) 'RM name
            

                
        Next ii
        For aa = 0 To mynALs - 1
            Select Case aa_Table4(rr, aa)
                Case -1
                    .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)) = "Intentionally Added"
                    If Reference_Required = True Then
                        .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)).Interior.Color = RGB(178, 178, 178)
                    End If
                Case -2
                    .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)) = "Particulate"
                    If Reference_Required = True Then
                        .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)).Interior.Color = RGB(206, 36, 43)
                    End If
                Case 0
                Case Is > 0
                    .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)) = Round(aa_Table4(rr, aa), 1) & "ppm"
                    '!o! Need to know how to handle colors for this table
                    'If Reference_Required = True Then
                    '    .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)).Interior.Color = RGB(178, 178, 178)
                    'End If
            End Select
        Next aa
    Next rr
End With



'--------------------------------
'---------Make Pretty------------
'--------------------------------
For ii = 0 To mynALs \ 7
    Range(Cells(13, 26 + (9 * ii)), Cells(13 - 1 + nRMs, 33 + (9 * ii))).Select

    With Selection
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeRight).LineStyle = xlContinuous
            .Borders(xlEdgeRight).Weight = xlThin
            .Borders(xlInsideVertical).LineStyle = xlContinuous
            .Borders(xlInsideVertical).Weight = xlThin
            .Borders(xlInsideHorizontal).LineStyle = xlContinuous
            .Borders(xlInsideHorizontal).Weight = xlThin
    End With

Next ii

End Sub

Sub createNewTable5()

'---Pull information into arrays
Dim myPIref As String

With Sheets("Internal Data1")
    myPIref = .Cells(3, 30)
End With

'------push information to table
With Sheets("Long Summary")
    .Cells(11, 62) = myPIref
End With
        



End Sub
Sub createNewTable6()

'---Pull information into arrays

Dim aa, pp, ii As Long
Dim aa_Table6 As Variant
Dim aa_Table6_names As Variant

myAAPI = Array()
If nPIs > 0 Then
    ReDim myAAPI(0 To nPIs - 1, 0 To nAls - 1)
    
    
    With Sheets("Internal Data2")
        For pp = 0 To nPIs - 1
            For aa = 0 To nAls - 1
                If .Cells(6 + (7 * pp) + 1, 58 + aa) = 1 Then 'Particulate
                    myAAPI(pp, aa) = -2
                ElseIf .Cells(6 + (7 * pp) + 2, 58 + aa) = 1 Then 'readily dispersible
                    myAAPI(pp, aa) = ((.Cells(6 + (7 * pp) + 3, 58 + aa) * .Cells(6 + (7 * pp) + 4, 58 + aa) * .Cells(6 + (7 * pp) + 5, 58 + aa) * 1000 _
                        / (.Cells(6 + (7 * pp) + 6, 58 + aa) * percentFactor ^ 2)))
                    
                    
                Else
                    myAAPI(pp, aa) = 0 'default
                End If
                'MsgBox "allergen " & aa & " pi " & pp & "    " & myAAPI(pp, aa)
            Next aa
        Next pp
    
    End With
Else
    ReDim myAAPI(0, 0 To nAls - 1)
    For aa = 0 To nAls - 1
        myAAPI(0, aa) = 0
    Next aa
End If
    

'------------------------------
'--------Combine---------------
'------------------------------

aa_Table6 = Array()
If nPIs > 0 Then
    ReDim aa_Table6(0 To nPIs - 1, 0 To mynALs - 1)
    
    
    'defaults
    For pp = 0 To nPIs - 1
        For aa = 0 To mynALs - 1
            aa_Table6(pp, aa) = 0
        Next aa
    Next pp
End If

'set values
If nPIs > 0 Then
    For pp = 0 To nPIs - 1
        For aa = 0 To nAls - 1
            Select Case LCase(AA_MergedNames(aa))
                Case "tree nuts"
                    Select Case myAAPI(pp, aa)
                        Case -2
                            aa_Table6(pp, 0) = -2
                            
                            aa_Table6(pp, aa + 1) = -2
                        Case Is >= 0
                            If aa_Table6(pp, 0) >= 0 Then
                                aa_Table6(pp, 0) = aa_Table6(pp, 0) + myAAPI(pp, aa)
                            End If
                            
                            If aa_Table6(pp, aa + 1) >= 0 Then
                                aa_Table6(pp, aa + 1) = aa_Table6(pp, aa + 1) + myAAPI(pp, aa)
                            End If
                    End Select
                    
                    
                Case "gluten"
                    
                    Select Case myAAPI(pp, aa)
                        Case -2
                            aa_Table6(pp, 1 + nTNs) = -2
                            
                            aa_Table6(pp, aa + 2) = -2
                        Case Is >= 0
                            If aa_Table6(pp, 1 + nTNs) >= 0 Then
                                aa_Table6(pp, 1 + nTNs) = aa_Table6(pp, 1 + nTNs) + myAAPI(pp, aa)
                            End If
                            
                            If aa_Table6(pp, aa + 2) >= 0 Then
                                aa_Table6(pp, aa + 2) = aa_Table6(pp, aa + 2) + myAAPI(pp, aa)
                            End If
                    End Select
                
                Case Else
                
                    Select Case myAAPI(pp, aa)
                        Case -2
                            aa_Table6(pp, aa + 2) = -2
                        Case Is >= 0
                            If aa_Table6(pp, aa + 2) >= 0 Then
                                aa_Table6(pp, aa + 2) = aa_Table6(pp, aa + 2) + myAAPI(pp, aa)
                            End If
                            
                    End Select
            End Select
        Next aa
    Next pp
End If

'NAMES
ReDim aa_Table6_names(0 To mynALs - 1)

'set defaults

aa_Table6_names(0) = "Tree Nuts"
aa_Table6_names(1 + nTNs) = "Gluten"

For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
        aa_Table6_names(aa + 1) = "   " & AA_ShortNames(aa)

        
        Case "gluten"
        aa_Table6_names(aa + 2) = "   " & AA_ShortNames(aa)

        
        
        Case Else
        aa_Table6_names(aa + 2) = AA_ShortNames(aa)

    End Select
Next aa


'------push information to table
If nPIs > 0 Then
    With Sheets("Long Summary")
        For pp = 0 To nPIs - 1
            
            .Cells(13, 66 + pp + 2 * (pp \ 5)) = PI_array(pp)
            
            For aa = 0 To mynALs - 1
                
                For ii = 0 To nPIs \ 5
                    
                    .Cells(15 + aa, 65 + 7 * ii) = aa_Table6_names(aa)
                    'Select Case aa
                    '    Case 0
                    '        .Cells(15 + aa, 65 + 7 * ii) = "Tree Nuts"
                    '    Case 1
                    '        .Cells(15 + aa, 65 + 7 * ii) = "Gluten"
                    '    Case Else
                    '        .Cells(15 + aa, 65 + 7 * ii) = AA_ShortNames(aa + nTNs + nGluts - 2)
                    'End Select
                Next ii
                
                Select Case aa_Table6(pp, aa)
                    Case -2
                        .Cells(15 + aa, 66 + pp + 2 * (pp \ 5)) = "Particulate"
                        If Reference_Required = True Then
                            .Cells(15 + aa, 66 + pp + 2 * (pp \ 5)).Interior.Color = RGB(206, 36, 43)
                        End If
                    Case 0
                    Case Is > 0
                        .Cells(15 + aa, 66 + pp + 2 * (pp \ 5)) = Round(aa_Table6(pp, aa), 1) & "ppm"
                        '!o! I need to know how to handle the colors on this table, whether it is
                        'action level by PI or by allergen.
                        'If Reference_Required = True Then
                        '    .Cells(13 + rr, 27 + aa + 2 * (aa \ 7)).Interior.Color = RGB(178, 178, 178)
                        'End If
                End Select
            Next aa
        Next pp
    End With
End If

'--------------------------------
'---------Make Pretty------------
'--------------------------------

If nPIs > 0 Then
    For ii = 0 To (nPIs / 5) ' - 1
        
        Range(Cells(15, 65 + 7 * ii), Cells(15 - 1 + mynALs, 65 + 5 + 7 * ii)).Select
        
        
        
        With Selection
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeLeft).Weight = xlThin
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeTop).Weight = xlThin
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).Weight = xlThin
                .Borders(xlEdgeRight).LineStyle = xlContinuous
                .Borders(xlEdgeRight).Weight = xlThin
                .Borders(xlInsideVertical).LineStyle = xlContinuous
                .Borders(xlInsideVertical).Weight = xlThin
                .Borders(xlInsideHorizontal).LineStyle = xlContinuous
                .Borders(xlInsideHorizontal).Weight = xlThin
        End With
    
    Next ii
End If

End Sub
Sub createNewTable7()
'Seriously changed in v5.12 - previous versions will work
'now allows for Gluten and Tree Nuts
'Dim myAAPI As Variant
'Dim aa_RMbyAL As Variant

Dim pp, rr, aa, ii As Long
'---Pull information into arrays
'Dim nTNs, nGluts, mynALs, inALref As Long

'nTNs = 0
'nGluts = 0
'For aa = 0 To nAls - 1
'    Select Case LCase(AA_MergedNames(aa))
'        Case "tree nuts"
'            nTNs = nTNs + 1
'        Case "gluten"
'            nGluts = nGluts + 1
'    End Select
'
'Next aa
'
'mynALs = nAls - nTNs - nGluts + 2

Dim myFinalArray As Variant
myFinalArray = Array()
ReDim myFinalArray(0 To mynALs, 0 To 5)

'Defaults
myFinalArray(0, 4) = "Tree Nuts"
myFinalArray(1 + nTNs, 4) = "Gluten"

For aa = 0 To nAls - 1
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
            myFinalArray(aa + 1, 4) = "   " & AA_ShortNames(aa)
        Case "gluten"
            myFinalArray(aa + 2, 4) = "   " & AA_ShortNames(aa)
        Case Else
            myFinalArray(aa + 2, 4) = AA_ShortNames(aa)
    End Select
    
Next aa

For aa = 0 To mynALs - 1
    For ii = 0 To 3
        myFinalArray(aa, ii) = 0
    Next ii
    myFinalArray(aa, 5) = 0
Next aa

'-------------------------------
'---------Raw Materials---------
'-------------------------------

For aa = 0 To nAls - 1
    
    'Select Case LCase(AA_MergedNames(aa))
    '    Case "tree nuts"
    '        inALref = 0
    '    Case "gluten"
    '        inALref = 1
    '    Case Else
    '        inALref = aa + 2
    'End Select
    
    Select Case LCase(AA_MergedNames(aa))
        Case "tree nuts"
        
            For rr = 0 To nRMs - 1
                Select Case aa_RMbyAL(rr, aa)
                Case -1
                    myFinalArray(0, 0) = -1 'intentionally added
                    
                    'individual
                    myFinalArray(aa + 1, 0) = -1
                    Exit For 'this takes priority over particulate and readily dispersible
                Case -2
                    If myFinalArray(0, 0) <> -1 Then
                        myFinalArray(0, 0) = -2 'particulate
                    End If
                    
                    'individual
                    If myFinalArray(aa + 1, 0) <> -1 Then
                        myFinalArray(aa + 1, 0) = -2 'particulate
                    End If
                Case Is >= 0 'readily dispersible
                    If (myFinalArray(0, 0) >= 0) Then
                        myFinalArray(0, 0) = myFinalArray(0, 0) + aa_RMbyAL(rr, aa)
                    End If
                    
                    'individual
                    If (myFinalArray(aa + 1, 0) >= 0) Then
                        myFinalArray(aa + 1, 0) = myFinalArray(aa + 1, 0) + aa_RMbyAL(rr, aa)
                    End If
                End Select
            Next rr
            
        
        Case "gluten"
                    
            For rr = 0 To nRMs - 1
                Select Case aa_RMbyAL(rr, aa)
                Case -1
                    myFinalArray(1 + nTNs, 0) = -1 'intentionally added
                    
                    'individual
                    myFinalArray(aa + 2, 0) = -1
                    Exit For 'this takes priority over particulate and readily dispersible
                Case -2
                    If myFinalArray(1 + nTNs, 0) <> -1 Then
                        myFinalArray(1 + nTNs, 0) = -2 'particulate
                    End If
                    
                    'individual
                    If myFinalArray(aa + 2, 0) <> -1 Then
                        myFinalArray(aa + 2, 0) = -2 'particulate
                    End If
                Case Is >= 0 'readily dispersible
                    If (myFinalArray(1 + nTNs, 0) >= 0) Then
                        myFinalArray(1 + nTNs, 0) = myFinalArray(1 + nTNs, 0) + aa_RMbyAL(rr, aa)
                    End If
                    
                    'individual
                    If (myFinalArray(aa + 2, 0) >= 0) Then
                        myFinalArray(aa + 2, 0) = myFinalArray(aa + 2, 0) + aa_RMbyAL(rr, aa)
                    End If
                End Select
            Next rr
                                
        
        
        Case Else
                        

            For rr = 0 To nRMs - 1
                Select Case aa_RMbyAL(rr, aa)
                Case -1

                    myFinalArray(aa + 2, 0) = -1
                    Exit For 'this takes priority over particulate and readily dispersible
                Case -2
                   

                    If myFinalArray(aa + 2, 0) <> -1 Then
                        myFinalArray(aa + 2, 0) = -2 'particulate
                    End If
                Case Is >= 0 'readily dispersible
                    If (myFinalArray(aa + 2, 0) >= 0) Then
                        myFinalArray(aa + 2, 0) = myFinalArray(aa + 2, 0) + aa_RMbyAL(rr, aa)
                    End If
                End Select
            Next rr
    End Select
Next aa


'----------------------------
'----Processing Impacts------
'----------------------------
If nPIs > 0 Then
    For aa = 0 To nAls - 1
        
    '    Select Case LCase(AA_MergedNames(aa))
    '        Case "tree nuts"
    '            inALref = 0
    '        Case "gluten"
    '            inALref = 1
    '        Case Else
    '            inALref = aa + 2
    '    End Select
        
        Select Case LCase(AA_MergedNames(aa))
            Case "tree nuts"
            
                For pp = 0 To nPIs - 1
                    Select Case myAAPI(pp, aa)
                    Case -2 'particulate
                    
                        myFinalArray(0, 1) = -2
                        
                        myFinalArray(aa + 1, 1) = -2
                        Exit For
                    Case Is >= 0 'readily dispersible
                        If myFinalArray(0, 1) >= 0 Then
                            myFinalArray(0, 1) = myFinalArray(0, 1) + myAAPI(pp, aa)
                            
                        End If
                        
                        If myFinalArray(aa + 1, 1) >= 0 Then
                            myFinalArray(aa + 1, 1) = myFinalArray(aa + 1, 1) + myAAPI(pp, aa)
                            
                        End If
                        
                    End Select
                Next pp
                
            Case "gluten"
                For pp = 0 To nPIs - 1
                    Select Case myAAPI(pp, aa)
                    Case -2 'particulate
                    
                        myFinalArray(1 + nTNs, 1) = -2
                        
                        myFinalArray(aa + 2, 1) = -2
                        Exit For
                    Case Is >= 0 'readily dispersible
                        If myFinalArray(1 + nTNs, 1) >= 0 Then
                            myFinalArray(1 + nTNs, 1) = myFinalArray(1 + nTNs, 1) + myAAPI(pp, aa)
                            
                        End If
                        
                        If myFinalArray(aa + 2, 1) >= 0 Then
                            myFinalArray(aa + 2, 1) = myFinalArray(aa + 2, 1) + myAAPI(pp, aa)
                            
                        End If
                        
                    End Select
                Next pp
            
            Case Else
                For pp = 0 To nPIs - 1
                    Select Case myAAPI(pp, aa)
                    Case -2 'particulate
                    
    
                        myFinalArray(aa + 2, 1) = -2
                        Exit For
                    Case Is >= 0 'readily dispersible
    
                        
                        If myFinalArray(aa + 2, 1) >= 0 Then
                            myFinalArray(aa + 2, 1) = myFinalArray(aa + 2, 1) + myAAPI(pp, aa)
                            
                        End If
                        
                    End Select
                Next pp
        End Select
    Next aa
End If

'handle the rest of the array

For aa = 0 To mynALs - 1
    Select Case myFinalArray(aa, 0)
    Case Is > 0
        If myFinalArray(aa, 1) >= 0 Then 'readily dispersible
            myFinalArray(aa, 2) = myFinalArray(aa, 0) + myFinalArray(aa, 1)
            
            
            myFinalArray(aa, 5) = 1 ' IS readily dispersible
                    
            myFinalArray(aa, 3) = myFinalArray(aa, 2)
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    myFinalArray(aa, 3) = myFinalArray(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    myFinalArray(aa, 3) = myFinalArray(aa, 3) / (ProductConcentration / 100)
            End If
            
            
            
        ElseIf myFinalArray(aa, 1) = -2 Then 'particulate
            myFinalArray(aa, 2) = -2 'particulate
            myFinalArray(aa, 5) = 1 ' IS readily dispersible in some way
        End If
        
    Case -1 'intentionally added
        myFinalArray(aa, 2) = -1
        myFinalArray(aa, 5) = 1 ' IS readily dispersible in some way
    
    Case -2 'particulate
        myFinalArray(aa, 2) = -2
        myFinalArray(aa, 5) = 1 ' IS readily dispersible in some way
    
    Case 0 'nothing
        If myFinalArray(aa, 1) > 0 Then 'readily dispersible
            myFinalArray(aa, 2) = myFinalArray(aa, 1)
            
            myFinalArray(aa, 5) = 1 ' IS readily dispersible in some way
                    
            
            myFinalArray(aa, 3) = myFinalArray(aa, 2)
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    myFinalArray(aa, 3) = myFinalArray(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    myFinalArray(aa, 3) = myFinalArray(aa, 3) / (ProductConcentration / 100)
            End If
        
                    
                    
        ElseIf myFinalArray(aa, 1) = 0 Then 'nothing
            myFinalArray(aa, 2) = 0
        
        ElseIf myFinalArray(aa, 1) = -2 Then 'particulate
            myFinalArray(aa, 2) = -2
            myFinalArray(aa, 5) = 1 ' IS readily dispersible in some way
        
        End If
    End Select
    'MsgBox "myfinalarray " & myFinalArray(aa, 0) & myFinalArray(aa, 1) & myFinalArray(aa, 2)
Next aa
            

'-------------------------------
'------push information to table
'--------------------------------

With Sheets("Long Summary")

For aa = 0 To mynALs - 1
    '.Cells(17 + aa, 36) = AA_ShortNames(aa)
    .Cells(17 + aa, 93) = myFinalArray(aa, 4)
    
    For ii = 0 To 3
        
        Select Case myFinalArray(aa, ii)
            Case -2 'particulate
                .Cells(17 + aa, 94 + ii) = "Particulate"
            Case -1 'intentionally added
                .Cells(17 + aa, 94 + ii) = "Intentionally added"
            Case 0
                .Cells(17 + aa, 94 + ii) = ""
            Case Is > 0
                .Cells(17 + aa, 94 + ii) = Round(myFinalArray(aa, ii), 1) & "ppm"
        End Select
        
        
        
        If ii = 3 Then
            'Cells(17 + aa, 40).Interior.Color = AL_ActionLevelColours(aa)
        End If
        
    
    Next ii
    
    '---------Colors-----------
    
    Select Case myaa_Reference_Colors(aa, 0)
        Case 3
            'RGB 141/198/63 for Action Level 1, 206/36/43 for AL 2
            'Intentionally added
            .Cells(17 + aa, 94 + 3).Interior.Color = RGB(178, 178, 178)
            
        Case 2
            'Action Level 2
            If Reference_Required = True Then
                .Cells(17 + aa, 94 + 3).Interior.Color = RGB(206, 36, 43)
            End If
            
        Case 1
            'Action Level 1
            If Reference_Required = True Then
                .Cells(17 + aa, 94 + 3).Interior.Color = RGB(141, 198, 63)
            End If
            
    End Select
    '.Cells(17 + aa, 94 + 3).Interior.Color = myaa_Reference_Colors(aa, 0)

Next aa
End With
        

'Deselected
'!o! I have changed the ranges of this so that Gluten and Tree Nuts are always assessed
For aa = 0 To mynALs - 1
    'If AA_Selected(aa) = 0 Then
    If myaa_Reference_Colors(aa, 1) = 1 Then
        Cells(17 + aa, 94 + 0).Value = "Not assessed"
        Cells(17 + aa, 94 + 1).Value = ""
        Cells(17 + aa, 94 + 2).Value = ""
        Cells(17 + aa, 94 + 3).Value = ""
        
        Range(Cells(17 + aa, 94), Cells(17 + aa, 94 + 3)).Merge
        
        
        'Cells(NzAusTopRow + aa, 6).Interior.Color = RGB(255, 255, 255)
        Cells(17 + aa, 94).Interior.Color = RGB(255, 255, 255)
    End If
Next aa


'Not Readily Dispersible
For aa = 0 To mynALs - 1
    If myFinalArray(aa, 5) = 0 Then
        Cells(17 + aa, 94 + 3).Value = ""
        '
        'Cells(NzAusTopRow + aa, 6).Interior.Color = RGB(255, 255, 255)
        Cells(17 + aa, 94 + 7).Interior.Color = RGB(255, 255, 255)
    End If
Next aa


'--------------------------------
'---------Make Pretty------------
'--------------------------------


Range(Cells(17, 93), Cells(17 - 1 + mynALs, 93 + 4)).Select



With Selection
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlThin
End With




End Sub
Sub createNewTable8()

'-Pull information from tables
With Sheets("Internal Data1")
    ProductConcentration = .Range("AH3")
    ProductDilution = .Range("AH4")
    ConcentrationAssumption = .Range("AH5")
End With

'--- push information to tables
With Sheets("Long Summary")
    .Cells(45, 94) = ProductConcentration
    .Cells(46, 94) = ProductDilution
    .Cells(47, 94) = ConcentrationAssumption
End With
End Sub
Sub createNewTable9()
Dim aa_Table9 As Variant
Dim ii As Long

aa_Table9 = Array()
ReDim aa_Table9(0 To 4, 0 To 1)

With Sheets("Allergens and Action Levels")
    For ii = 0 To 4
        aa_Table9(ii, 0) = .Cells(5 + ii, 9)
        aa_Table9(ii, 1) = .Cells(5 + ii, 10)
    Next ii
End With

With Sheets("Long Summary")
    For ii = 0 To 4
        Cells(13 + 7 * ii, 99) = aa_Table9(ii, 0)
        Cells(13 + 7 * ii, 100) = aa_Table9(ii, 1)
    Next ii

End With
End Sub
Sub varSetup()
'Pulls required information in case one comes immediately to page.
With Sheets("Internal Data1")

    nRMs = .Cells(3, 28)
    nAls = .Cells(3, 20)
    If (IsNumeric(.Cells(3, 32)) = True) And (.Cells(3, 32) > 0) Then
        nPIs = .Cells(3, 32)
    Else
        nPIs = 0
    End If
End With

End Sub
Attribute VB_Name = "F_BreakTest"
Option Explicit
Option Base 0

Sub setup_Break_array()
Dim aa, pp, rr, ii As Long


If Reference_Required = False Then
    Exit Sub
End If


'----------------------------
'----Break Test array--------
'----------------------------

'Notes for values
'Values >0 will be the PPM for the particular allergen or process
'Value = 0 will be no cross contact
'Value = -1 is intentionally added RM
'Value = -2 is Particulate cross contacts



Break_array = Array()
'ReDim Break_array(LBound(AA_LongNames) To UBound(AA_LongNames), 0 To 2)
ReDim Break_array(0 To nAls - 1, 0 To 3)




'Default all values to 0

For aa = LBound(AA_LongNames) To UBound(AA_LongNames)
    For ii = 0 To 3
        Break_array(aa, ii) = 0
    Next ii
Next aa


'---------------------------------------------------
'---------------------Raw Materials-----------------
'---------------------------------------------------


'This will look through the internal data sheets for details that exists.
'if no data exists, then this will leave the values at 0, the default
'otherwise, it will pull the applicable information
'IE. At ALL times, there will be values in the array, so that all the updates will work

Break_array_RM = Array()
ReDim Break_array_RM(0 To (nRMs - 1), 0 To (nAls - 1))
'array values are
'-1 for Intentionally added
'-2 for Particulate
'0 for no allergen status
'any positive number for readily dispersible will equal the readily dispersible ppm

With Sheets("Internal Data2")
    For rr = 0 To nRMs - 1
        For aa = 0 To nAls - 1
            If .Cells(6 * (rr + 1) + 1, 4 + aa) = 1 Then 'intentionally added
                Break_array_RM(rr, aa) = -1
            ElseIf .Cells(6 * (rr + 1) + 2, 4 + aa) = 1 Then 'Particulate
                Break_array_RM(rr, aa) = -2
            ElseIf .Cells(6 * (rr + 1) + 3, 4 + aa) = 1 Then 'readily dispersible
                Break_array_RM(rr, aa) = .Cells(6 * (rr + 1) + 4, 4 + aa) * (RM_Q_array(rr) / percentFactor) 'concentration
            Else
                Break_array_RM(rr, aa) = 0
            End If
        Next aa
    Next rr

End With




For aa = 0 To nAls - 1
    For rr = 0 To nRMs - 1
        Select Case Break_array_RM(rr, aa)
        Case -1
            Break_array(aa, 0) = -1 'intentionally added
            Exit For 'this takes priority over particulate and readily dispersible
        Case -2
            Break_array(aa, 0) = -2 'particulate
        Case 0
        Case Is > 0 'readily dispersible
            If (Break_array(aa, 0) <> -1) And (Break_array(aa, 0) <> -2) Then
                Break_array(aa, 0) = Break_array(aa, 0) + Break_array_RM(rr, aa)
            End If
        End Select
    Next rr
Next aa


'------------------------------------------------------
'----------Process Impact------------------------------
'------------------------------------------------------


Break_array_PI = Array()
Dim mynPIs As Long
mynPIs = 0

If nPIs > 0 Then
    mynPIs = nPIs
Else
    With Sheets("Internal Data1")
        If IsNumeric(.Cells(3, 32)) And (.Cells(3, 32) <> 0) Then
            mynPIs = .Cells(3, 32)
        End If
    End With
End If

If mynPIs <> 0 Then
    
    ReDim Break_array_PI(0 To mynPIs - 1, 0 To nAls - 1)
    
    
    With Sheets("Internal Data2")
        For pp = 0 To mynPIs - 1
            For aa = 0 To nAls - 1
                If .Cells(6 + (7 * pp) + 1, 58 + aa) = 1 Then 'Particulate
                    Break_array_PI(pp, aa) = -2
                ElseIf .Cells(6 + (7 * pp) + 2, 58 + aa) = 1 Then 'readily dispersible
                    Break_array_PI(pp, aa) = ((.Cells(6 + (7 * pp) + 3, 58 + aa) * .Cells(6 + (7 * pp) + 4, 58 + aa) * .Cells(6 + (7 * pp) + 5, 58 + aa) * 1000 _
                        / (.Cells(6 + (7 * pp) + 6, 58 + aa) * percentFactor ^ 2)))
                    
                    
                Else
                    Break_array_PI(pp, aa) = 0 'default
                End If
            Next aa
        Next pp
    
    End With
    
    
    For aa = 0 To nAls - 1
        For pp = 0 To mynPIs - 1
            Select Case Break_array_PI(pp, aa)
            Case -2 'particulate
                Break_array(aa, 1) = -2
                Exit For
            Case 0
                'Break_array(aa, 1) = 0
            Case Is > 0 'readily dispersible
                Break_array(aa, 1) = Break_array(aa, 1) + Break_array_PI(pp, aa)
            End Select
        Next pp
    Next aa
End If

'------------------------------------------------------------------
'------------------------------------------------------------------
'------------------------------------------------------------------

For aa = 0 To nAls - 1
    Select Case Break_array(aa, 0)
    Case Is > 0
        If Break_array(aa, 1) >= 0 Then 'readily dispersible
            Break_array(aa, 2) = Break_array(aa, 0) + Break_array(aa, 1)
            Break_array(aa, 3) = Break_array(aa, 2)
                    
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (ProductConcentration / 100)
            End If
            
            
            
        ElseIf Break_array(aa, 1) = -2 Then 'particulate
            Break_array(aa, 2) = -2 'particulate
        End If
        
    Case -1 'intentionally added
        Break_array(aa, 2) = -1
    
    Case -2 'particulate
        Break_array(aa, 2) = -2
    
    Case 0 'nothing
        If Break_array(aa, 1) > 0 Then 'readily dispersible
            Break_array(aa, 2) = Break_array(aa, 1)
            Break_array(aa, 3) = Break_array(aa, 2)
                    
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (ProductConcentration / 100)
            End If
        
                    
                    
        ElseIf Break_array(aa, 1) = 0 Then 'nothing
            Break_array(aa, 2) = 0
        
        ElseIf Break_array(aa, 1) = -2 Then 'particulate
            Break_array(aa, 2) = -2
        
        End If
    End Select
    'MsgBox "Break_array " & Break_array(aa, 0) & Break_array(aa, 1) & Break_array(aa, 2)
Next aa


End Sub
Sub update_Break_Array_Sheets()
Dim rr, aa, pp, ii As Long
Dim myaa As Long


If Reference_Required = False Then
    Exit Sub
End If


With Sheets("Internal Data2")
    For rr = 0 To nRMs - 1
        For aa = 0 To nAls - 1
            
            If .Cells(6 * (rr + 1) + 1, 4 + aa) = 1 Then 'intentionally added
                
                Break_array_RM(rr, aa) = -1
            
            ElseIf .Cells(6 * (rr + 1) + 2, 4 + aa) = 1 Then 'Particulate
                
                Break_array_RM(rr, aa) = -2
            
            ElseIf .Cells(6 * (rr + 1) + 3, 4 + aa) = 1 Then 'readily dispersible
                
                Break_array_RM(rr, aa) = .Cells(6 * (rr + 1) + 4, 4 + aa) * (RM_Q_array(rr) / percentFactor) 'concentration
            
            Else
                
                Break_array_RM(rr, aa) = 0
            
            End If
        Next aa
    Next rr

End With


For aa = 0 To nAls - 1
    Break_array(aa, 0) = 0 'reset default
Next aa

'Raw Materials
For aa = 0 To nAls - 1
    
    
    If LCase(AA_MergedNames(aa)) = "tree nuts" Then
        myaa = 0
    ElseIf LCase(AA_MergedNames(aa)) = "gluten" Then
        myaa = 1
    Else
        myaa = aa
    End If
    
    
    For rr = 0 To nRMs - 1
        Select Case Break_array_RM(rr, aa)
        Case -1
            Break_array(myaa, 0) = -1 'intentionally added
            Exit For 'this takes priority over particulate and readily dispersible
        Case -2
            If Break_array(myaa, 0) <> -1 Then
                Break_array(myaa, 0) = -2 'particulate
            End If
        Case 0
        Case Is > 0 'readily dispersible
            If Break_array(myaa, 0) >= 0 Then
                Break_array(myaa, 0) = Break_array(myaa, 0) + Break_array_RM(rr, aa)
            End If
        End Select
    Next rr
Next aa



'For aa = 0 To nAls - 1
'    For rr = 0 To nRMs - 1
'        Select Case Break_array_RM(rr, aa)
'        Case -1
'            Break_array(aa, 0) = -1 'intentionally added
'            Exit For 'this takes priority over particulate and readily dispersible
'        Case -2
'            Break_array(aa, 0) = -2 'particulate
'        Case 0
'        Case Is > 0 'readily dispersible
'            If (Break_array(aa, 0) <> -1) And (Break_array(aa, 0) <> -2) Then
'                Break_array(aa, 0) = Break_array(aa, 0) + Break_array_RM(rr, aa)
'            End If
'        End Select
'    Next rr
'Next aa


'------------------------------------------------------
'----------Process Impact------------------------------
'------------------------------------------------------


Break_array_PI = Array()
Dim mynPIs As Long
mynPIs = 0

If nPIs > 0 Then
    mynPIs = nPIs
Else
    With Sheets("Internal Data1")
        If IsNumeric(.Cells(3, 32)) And (.Cells(3, 32) <> 0) Then
            mynPIs = .Cells(3, 32)
        End If
    End With
End If

If mynPIs <> 0 Then
    
    ReDim Break_array_PI(0 To mynPIs - 1, 0 To nAls - 1)
    
    
    With Sheets("Internal Data2")
        For pp = 0 To mynPIs - 1
            For aa = 0 To nAls - 1
                If .Cells(6 + (7 * pp) + 1, 58 + aa) = 1 Then 'Particulate
                    Break_array_PI(pp, aa) = -2
                ElseIf .Cells(6 + (7 * pp) + 2, 58 + aa) = 1 Then 'readily dispersible
                    Break_array_PI(pp, aa) = ((.Cells(6 + (7 * pp) + 3, 58 + aa) * .Cells(6 + (7 * pp) + 4, 58 + aa) * .Cells(6 + (7 * pp) + 5, 58 + aa) * 1000 _
                        / (.Cells(6 + (7 * pp) + 6, 58 + aa) * percentFactor ^ 2)))
                    
                    
                Else
                    Break_array_PI(pp, aa) = 0 'default
                End If
            Next aa
        Next pp
    
    End With
    
    

        For aa = 0 To nAls - 1
            Break_array(aa, 1) = 0 'reset default
        Next aa
        
        For aa = 0 To nAls - 1
        
            
            If LCase(AA_MergedNames(aa)) = "tree nuts" Then
                myaa = 0
            ElseIf LCase(AA_MergedNames(aa)) = "gluten" Then
                myaa = 1
            Else
                myaa = aa
            End If
            
            
            For pp = 0 To nPIs - 1
                Select Case Break_array_PI(pp, aa)
                Case -2 'particulate
                    If Break_array(myaa, 1) > -2 Then
                        Break_array(myaa, 1) = -2
                    End If
                    Exit For
                Case 0
                    'Break_array(aa, 1) = 0
                Case Is > 0 'readily dispersible
                    If Break_array(myaa, 0) >= 0 Then
                        Break_array(myaa, 1) = Break_array(myaa, 1) + Break_array_PI(pp, aa)
                    End If
                End Select
            Next pp
        Next aa

    
'    For aa = 0 To nAls - 1
'        For pp = 0 To mynPIs - 1
'            Select Case Break_array_PI(pp, aa)
'            Case -2 'particulate
'                Break_array(aa, 1) = -2
'                Exit For
'            Case 0
'                'Break_array(aa, 1) = 0
'            Case Is > 0 'readily dispersible
'                Break_array(aa, 1) = Break_array(aa, 1) + Break_array_PI(pp, aa)
'            End Select
'        Next pp
'    Next aa
End If

'------------------------------------------------------------------
'------------------------------------------------------------------
'------------------------------------------------------------------

For aa = 0 To nAls - 1
    Select Case Break_array(aa, 0)
    Case Is > 0
        If Break_array(aa, 1) >= 0 Then 'readily dispersible
            Break_array(aa, 2) = Break_array(aa, 0) + Break_array(aa, 1)
            Break_array(aa, 3) = Break_array(aa, 2)
                    
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (ProductConcentration / 100)
            End If
            
            
            
        ElseIf Break_array(aa, 1) = -2 Then 'particulate
            Break_array(aa, 2) = -2 'particulate
        End If
        
    Case -1 'intentionally added
        Break_array(aa, 2) = -1
    
    Case -2 'particulate
        Break_array(aa, 2) = -2
    
    Case 0 'nothing
        If Break_array(aa, 1) > 0 Then 'readily dispersible
            Break_array(aa, 2) = Break_array(aa, 1)
            
            Break_array(aa, 3) = Break_array(aa, 2)
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (ProductConcentration / 100)
            End If
        
                    
                    
        ElseIf Break_array(aa, 1) = 0 Then 'nothing
            Break_array(aa, 2) = 0
        
        ElseIf Break_array(aa, 1) = -2 Then 'particulate
            Break_array(aa, 2) = -2
        
        End If
    End Select
    'MsgBox "Break_array " & Break_array(aa, 0) & Break_array(aa, 1) & Break_array(aa, 2)
Next aa

End Sub
Sub update_Break_RM()
Dim aa, rr As Long
Dim myaa As Long


If Reference_Required = False Then
    Exit Sub
End If


For aa = 0 To nAls - 1
    Break_array(aa, 0) = 0 'reset default
Next aa

'Raw Materials
For aa = 0 To nAls - 1
    
    
    If LCase(AA_MergedNames(aa)) = "tree nuts" Then
        myaa = 0
    ElseIf LCase(AA_MergedNames(aa)) = "gluten" Then
        myaa = 1
    Else
        myaa = aa
    End If
    
    
    For rr = 0 To nRMs - 1
        Select Case Break_array_RM(rr, aa)
        Case -1
            Break_array(myaa, 0) = -1 'intentionally added
            Exit For 'this takes priority over particulate and readily dispersible
        Case -2
            If Break_array(myaa, 0) <> -1 Then
                Break_array(myaa, 0) = -2 'particulate
            End If
        Case 0
        Case Is > 0 'readily dispersible
            If Break_array(myaa, 0) >= 0 Then
                Break_array(myaa, 0) = Break_array(myaa, 0) + Break_array_RM(rr, aa)
            End If
        End Select
    Next rr
Next aa

update_Break_Concs


End Sub

Sub update_Break_PI()
'Processing impacts
Dim aa, pp As Long
Dim myaa As Long

If Reference_Required = False Then
    Exit Sub
End If


For aa = 0 To nAls - 1
    Break_array(aa, 1) = 0 'reset default
Next aa

For aa = 0 To nAls - 1

    
    If LCase(AA_MergedNames(aa)) = "tree nuts" Then
        myaa = 0
    ElseIf LCase(AA_MergedNames(aa)) = "gluten" Then
        myaa = 1
    Else
        myaa = aa
    End If
    
    
    For pp = 0 To nPIs - 1
        Select Case Break_array_PI(pp, aa)
        Case -2 'particulate
            Break_array(myaa, 1) = -2
            Exit For
        Case 0
            'Break_array(aa, 1) = 0
        Case Is >= 0 'readily dispersible
            If Break_array(myaa, 1) >= 0 Then
                Break_array(myaa, 1) = Break_array(myaa, 1) + Break_array_PI(pp, aa)
            End If
        End Select
    Next pp
Next aa

update_Break_Concs


End Sub
Sub update_Break_Concs()
Dim aa As Long

If Reference_Required = False Then
    Exit Sub
End If



For aa = 0 To nAls - 1
    Break_array(aa, 2) = 0
    Break_array(aa, 3) = 0
    Select Case Break_array(aa, 0)
    Case Is > 0
        If Break_array(aa, 1) >= 0 Then 'readily dispersible
            Break_array(aa, 2) = Break_array(aa, 0) + Break_array(aa, 1)
            
            Break_array(aa, 3) = Break_array(aa, 2) 'set default for final value
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> "" And ProductConcentration <> 0) Then 'And ProductConcentration <> "") Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (ProductConcentration / 100)
            End If
            
            
            
        ElseIf Break_array(aa, 1) = -2 Then 'particulate
            Break_array(aa, 2) = -2 'particulate
            Break_array(aa, 3) = "PAR"
        End If
        
    Case -1 'intentionally added
        Break_array(aa, 2) = -1
        Break_array(aa, 3) = "INT"
    
    Case -2 'particulate
        Break_array(aa, 2) = -2
        Break_array(aa, 3) = "PAR"
    
    Case 0 'nothing
        If Break_array(aa, 1) > 0 Then 'readily dispersible
            Break_array(aa, 2) = Break_array(aa, 1)
            Break_array(aa, 3) = Break_array(aa, 2)
            'Adjust for Dilution:
            If (ProductDilution <> "" And ProductDilution <> 0#) Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (1 + (ProductDilution / 100))
            End If
            
            'Adjust for Concentration:
            If (ProductConcentration <> 0) And (ProductConcentration <> "") Then
                    Break_array(aa, 3) = Break_array(aa, 3) / (ProductConcentration / 100)
            End If
        
                    
                    
        ElseIf Break_array(aa, 1) = 0 Then 'nothing
            Break_array(aa, 2) = 0
        
        ElseIf Break_array(aa, 1) = -2 Then 'particulate
            Break_array(aa, 2) = -2
            Break_array(aa, 3) = "PAR"
        
        End If
    End Select
    'MsgBox "Break_array " & Break_array(aa, 0) & Break_array(aa, 1) & Break_array(aa, 2)
Next aa


End Sub
Sub update_Break_individual_RM(myRM As Long, ALi As Long, ByVal myupdate As Double)
'This will update an individual value in the array  Break_array_RM
'ALi is the allergen index
'CC = 0 is RM; CC = 1 is PI
If Reference_Required = False Then
    Exit Sub
End If

Select Case myupdate
    Case Is >= 0
        Break_array_RM(myRM, ALi) = myupdate * (RM_Q_array(myRM) / percentFactor)
    Case -1#
        Break_array_RM(myRM, ALi) = -1
    Case -2#
        Break_array_RM(myRM, ALi) = -2
End Select


update_Break_RM


End Sub
Sub update_Break_individual_PI(myPI As Long, ByVal ALi As Long, myupdate As Double)
'This will update an individual value in the array  Break_array_PI
'ALi is the allergen index
'CC = 0 is RM; CC = 1 is PI

If Reference_Required = False Then
    Exit Sub
End If

Select Case myupdate
    Case Is >= 0
        Break_array_PI(myPI, ALi) = myupdate
    Case -1#
        Break_array_PI(myPI, ALi) = -1
    Case -2#
        Break_array_PI(myPI, ALi) = -2
End Select

update_Break_PI


End Sub
Attribute VB_Name = "Global_Variables_mod"
Option Explicit
Option Base 0

Public Const percentFactor As Double = 100#
Public Const defaultSheet As String = "Calculation in progress"

Public Const VersionNo As String = "2.0.5"


Public Reference_Required As Boolean




Public ViewOnly As Boolean
Public SplashActive As Boolean

Public GL_RawMaterials As Variant

Public GL_AddRM_firstuse As Boolean

Public N_Als As Long
Public nAls As Long
Public N_RMs As Long
Public nPIs As Long

Public AlPage As Long
Public totalAlPages As Long

Public RM_types() As Variant
Public RM_array() As Variant
Public RMindex As Long
Public RM_Q_array() As Variant
Public Ref_array() As Variant


Public PI_types() As Variant
Public PI_array() As Variant
Public PIindex As Long


Public Break_array() As Variant
Public Break_array_RM As Variant
Public Break_array_PI As Variant

Public is_ReadilyDispersible As Variant

Public AA_MergedNames() As Variant



Public AA_LongNames() As Variant
Public AA_ShortNames() As Variant
Public AA_Quantities() As Variant
Public AA_Defaults() As Variant
Public AA_Catagories() As Variant
Public AA_Selected() As Variant



Public AG_names() As Variant
Public AG_TotalProtein() As Variant
Public AG_notes() As Variant

Public PIsource As String
Public PIcomplete As Boolean


'---

'Number of textboxes per page:
Public nTBs As Long

Public page As Long
Public nPages As Long

'Public RMindex As Long  'Already declared
Public nRMs As Long

Public blank_acceptable() As Variant


Public QQ_text As Style

Public lastRmSource As String
Public tbNumForEntry As Long

'---

Public Const greaterThanEqualTOAddress As String = "C3"
Public gr As String


Attribute VB_Name = "Internal_Data_consts"
Option Explicit
Option Base 0



'IntData1
'Number of cols for each form worth of data:
Public Const colsPerForm As Long = 4

'IntData2
'Start row,col:
Public Const startRow As Long = 5
Public Const startCol As Long = 3
'Number of Allergens (max) [This can be changed if #als increases beyond this.]:
Public Const numOfAllergenCols As Long = 50



Attribute VB_Name = "Module1"
Sub MergeCells()
Attribute MergeCells.VB_ProcData.VB_Invoke_Func = " \n14"
'
' MergeCells Macro
'

'
    Selection.Merge
    Range("A7:I8").Select
End Sub
Sub Merger2()
Attribute Merger2.VB_ProcData.VB_Invoke_Func = " \n14"
Dim aa, bb As Long
For bb = 1 To 3
    For aa = 1 To 2
        Range(Cells((bb - 1) * 8 + 2 + (2 * aa), 1), Cells((bb - 1) * 8 + 2 + (2 * aa), 9)).Select
        With Selection
            .Merge
            .RowHeight = 15 * (Ceiling(Len(Cells((bb - 1) * 8 + 2 + (2 * aa), 1)) / 112))
        End With
    Next aa
Next bb
End Sub
Function Ceiling(ByVal x As Double, Optional ByVal Factor As Double = 1) As Double
    ' X is the value you want to round
    ' is the multiple to which you want to round
    Ceiling = (Int(x / Factor) - (x / Factor - Int(x / Factor) > 0)) * Factor
End Function
Sub CallPITotal()
PITotal 20, 3
End Sub


Sub PITotal(ByVal myaa As Long, ByVal mycc As Long)
Dim ee As Long
Dim ppmCount As Double
ppmCount = 0#
ee = 2
'Dim wnrms As Long
'wnrms = 2
Sheets("Internal Data2").Select
'For ee = 1 To nPIs
 '   Sheets("Internal Data2").Select
 '   If Cells(6 + 6 * (ee - 1) + 1, 57 + myaa - 1) = 1 Then
 '       Sheets("Overall Summary").Select
 '       Cells(myaa, mycc).Select
 '       With Selection
 '           .Value = "Particulate"
 '           .Interior.Color = RGB(255, 0, 0)
 '       End With
 '       Exit Sub
 '   End If


    If Cells(6 + 7 * (ee - 1) + 2, 57 + myaa - 1) = 1 Then
        ppmCount = ppmCount + GetPIPPM(myaa - 1, ee - 1) '!p! Needs formula Cells(6 + 6 * (ee - 1) + 4, 3 + myaa)
        MsgBox ppmCount
        MsgBox ("aa ref " & (myaa - 1) & "piref " & (ee - 1) & "GetPIPPM " & GetPIPPM(myaa - 1, ee - 1))
    End If
'Next ee

'PITotal = ppmCount
'Sheets("Overall Summary").Select
'If ppmCount <> 0 Then
MsgBox (ppmCount)
'Cells(myaa, mycc).Select
'    With Selection
'        .Value = ppmCount
'        .Interior.Color = RGB(0, 0, 255)
'    End With
'Else
'Cells(myaa, mycc) = 0
'End If
'If ppmCount = 0# Then
'Cells(myaa, mycc) = 0
'Else
'Cells(myaa, mycc).Select
'    With Selection
'        .Value = ppmCount
'        .Interior.Color = RGB(0, 0, 255)
'    End With
'End If

End Sub
Function GetPIPPM(ByVal myALi As Long, ByVal myPIi As Long)
'---Called by myali = allergen reference 1to nals, mypii by pireference 0 to nopis-1
'---Adjusted for mg to g conversion
Dim ReturnSheet As String
ReturnSheet = ActiveSheet.Name

Sheets("Internal Data2").Select
'---Check for a divide by zero... a little bit more than needed...
'If ((Cells(6 + (7 * myPIi) + 2 + 1, 57 + myALi) = 0) Or (Cells(6 + (7 * myPIi) + 2 + 2, 57 + myALi) = 0) Or (Cells(6 + (7 * myPIi) + 2 + 3, 57 + myALi)) = 0) _
'    Or (Cells(6 + (7 * myPIi) + 2 + 4, 57 + myALi) = 0) Then
If (Cells(6 + (7 * myPIi) + 2 + 4, 57 + myALi) = 0) Then
    GetPIPPM = 0
Else
    GetPIPPM = ((Cells(6 + (7 * myPIi) + 2 + 1, 57 + myALi) * Cells(6 + (7 * myPIi) + 2 + 2, 57 + myALi) * Cells(6 + (7 * myPIi) + 2 + 3, 57 + myALi)) * 1000 _
        / (Cells(6 + (7 * myPIi) + 2 + 4, 57 + myALi) * percentFactor ^ 2))
End If
Sheets(ReturnSheet).Select

End Function
Attribute VB_Name = "Module2"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
End Sub
Attribute VB_Name = "Module3"
Sub Macro2()
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
'

'
    Range("K18:Q27").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
End Sub
Attribute VB_Name = "Module4"
Sub Macro3()
Attribute Macro3.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro3 Macro
'

'
    Range("AK27:AN27").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Selection.Merge
End Sub

Attribute VB_Name = "Module5"

Sub Macro6()
Attribute Macro6.VB_ProcData.VB_Invoke_Func = " \n14"

Sheets("Long summary").Shapes("Table6_Pic2").Select





End Sub

Attribute VB_Name = "P2_PrintOptions"
Attribute VB_Base = "0{0A3335A9-C67B-404B-AE2E-09F583F8E3BE}{996EF223-D5BF-43D5-8C41-ECC6883B23DE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub CB_Back_Click()
Unload P2_PrintOptions
F1_Front.Show '''vbmodeless
End Sub



Private Sub CB_Next_Click()

If CB_Short = True Then _
MsgBox "Print Short Summary will appear here"

If CB_Detailed = True Then _
MsgBox "Print Detailed Summary will appear here"

End Sub

Private Sub StIm1_Click()

goToSTL

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "Ref_StFns"
Option Explicit
Option Base 0


Sub sf_test()

End Sub


Function sf_DropCharsFrom(ByVal myString As String, ByVal num As Long, ByVal side As String) As String
'Td

If myString = "" Then sf_DropCharsFrom = ""

If UCase(Left(side, 1)) = "L" Then
    'Drop from left, so take right(S,Len-1)
    sf_DropCharsFrom = Right(myString, Len(myString) - num)
Else
    'if side = "R" or other then drop from right
    sf_DropCharsFrom = Left(myString, Len(myString) - num)
End If

End Function


Sub goToSTL()
Const Hyper As String = "stlnz.com"
On Error Resume Next
ThisWorkbook.FollowHyperlink Address:=Hyper ', NewWindow:=True
On Error GoTo 0
End Sub


Function sf_maxLong(x As Long, Y As Long) As Long

If (x > Y) Then     'x greater, so:
    sf_maxLong = x
Else                'Same or y greater, so:
    sf_maxLong = Y
End If


End Function

Function sf_minLong(x As Long, Y As Long) As Variant

Dim ans As Variant

If (x < Y) Then     'x less, so:
    ans = CLng(x)
Else                'Same or y less, so:
    ans = CLng(Y)
End If

sf_maxLong = ans


End Function

Attribute VB_Name = "Return_to_forms_mod"
Option Explicit
Option Base 0

Public returnPage As String

Sub return_to_forms_after_grid()

'Re-enable sheet protection:
Sheets("Allergens and Action Levels").Protect Password:="abc", UserInterfaceOnly:=True

If (returnPage = "" Or returnPage = "F3_AllergensList") Then
    Unload F3_AllergensList
    F3_AllergensList.Show ''vbmodeless
Else
    Unload C1_AllergensList
    C1_AllergensList.Show ''vbmodeless
End If

End Sub


Sub returnToCalcSheet()

Sheets("Calculation in progress").Select
Cells(1, 1).Select
Sheets("Calculator").Select
Cells(1, 1).Select

End Sub
Attribute VB_Name = "SaveAs"
Option Explicit
Option Base 0

Sub SaveAsFilename()
Dim fileSaveName As String

fileSaveName = Application.GetSaveAsFilename( _
fileFilter:="xlsm Files (*.xlsm), *.xlsm")
If fileSaveName = "False" Then
    Exit Sub
    Else
    ThisWorkbook.SaveAs fileSaveName
'    MsgBox "Save as " & fileSaveName
End If

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SplashForm"
Attribute VB_Base = "0{2D9EB515-ECD2-4B4B-9575-79ED0C5D7EE4}{B3BA80C1-BB7E-495C-8BC4-5AC46EC7A766}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CancelButton_Click()

End Sub

Private Sub UserForm_Activate()

    'Protect ref doses sheet. VBA code can edit this, but user can't directly.
    '(This gets done on sheet opening, but here is a second method in case user doesn't click "Return to forms" on ref dose sheet)
    On Error Resume Next
        Sheets("Allergens and Action Levels").Protect Password:="abc", UserInterfaceOnly:=True
    On Error GoTo 0

    ThisWorkbook.Activate
    Sheets(1).Cells(5, 1) = " "
    L_Version.Caption = "Version " & VersionNo
    Application.OnTime Now + TimeValue("00:00:3"), "KillTheForm"
End Sub


Attribute VB_Name = "Splash_Controller"
Option Explicit
Option Base 0
'Public alreadyClosed As Boolean


Sub TestSplashScreen()
    SplashForm.Show
End Sub

Public Sub KillTheForm()
ThisWorkbook.Activate
    'BlankForm.Show
    Sheets("Allergens and Action Levels").Activate
    Cells(1, 1).Activate
    SplashForm.Hide
    SplashActive = False
    'F1_Front.Show
    F0_Disclaimer.Show '''vbmodeless
End Sub



Sub KillTheForm_continue()
    
    Sheets("Allergens and Action Levels").Activate
    Cells(1, 1).Activate
    SplashForm.Hide
    'F1_Front.Show 'vbmodeless
    F0_Disclaimer.Show '''vbmodeless
End Sub





Sub debug_LaunchSplash()
'--Enforce screen maximisation--------------------
On Error Resume Next
    
'Sheets("Calculator").Activate
'If Application.WindowState <> xlMaximized Then
'    Application.WindowState = xlMaximized
'End If

On Error GoTo 0
'-------------------------------------------------
    
    
'--Activate splash screen
    'If (SpashActive = False) Then
    If (True) Then
        Application.OnTime Now + TimeValue("00:00:1"), "selectCalcSheet"
        SplashForm.Show
        SplashActive = True
        '!o!  Check the interaction of this variable with the "close" button actions
    End If
End Sub


Sub selectCalcSheet()

Sheets("Calculation in progress").Select

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    'Protect ref doses sheet. VBA code can edit this, but user can't directly.
    '(password not tricky- just there to stop users accidently changing ref values)
    Sheets("Allergens and Action Levels").Protect Password:="abc", UserInterfaceOnly:=True
End Sub


'Private Sub Workbook_BeforeClose(Cancel As Boolean)
'Sheets(1).Cells(5, 1) = ""
'End Sub

'Private Sub Workbook_Open()
'    'Show welcome (Splash) screen
    
    
''--Enforce screen maximisation--------------------
'On Error Resume Next
'
'    'Sheets("Calculator").Activate
'If Application.WindowState <> xlMaximized Then
'    Application.WindowState = xlMaximized
'End If
'
'On Error GoTo 0
''-------------------------------------------------
    
    
''--Activate splash screen
'    If (SpashActive = False) And (Sheets(1).Cells(5, 1) = "") Then
'        SplashForm.Show 'vbmodeless
'        Sheets(1).Cells(5, 1) = " "
'        SplashActive = True
'        '!o!  Check the interaction of this variable with the "close" button actions
'    End If

'End Sub
Attribute VB_Name = "ViewOnly_mod"
Private Sub ViewLock()
If ViewOnly <> True Then Exit Sub
Dim cont As Control
For Each cont In Me.Controls
    If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back") Then
    'If (cont.Name <> "CB_Next" And cont.Name <> "CB_Back" And cont.Name <> "TB_RM" And cont.Name <> "TB_PI") Then
        On Error Resume Next
        cont.Enabled = False
        On Error GoTo 0
    End If
Next cont
End Sub
Attribute VB_Name = "test_mod"
Option Explicit

Sub test1()

MsgBox Format(Date, "dd-mmm-yy") & "  " & Format(Time, "hhmmss")

End Sub

' InQuest injected base64 decoded content
' z{kj
' j)^u+

INQUEST-PP=macro
