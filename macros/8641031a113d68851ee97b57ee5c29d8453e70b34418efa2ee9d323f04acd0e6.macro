Attribute VB_Name = "Module1"
Sub Import()
    Dim dbSheet As Worksheet
    Dim impDBsheet As Worksheet
    Dim impInfosheet As Worksheet
    Dim impPapersheet As Worksheet
    Dim impCompsheet As Worksheet
    Dim impCCsheet As Worksheet
    Dim impAVsheet As Worksheet
    Dim impPPsheet As Worksheet
    Dim impItemsheet As Worksheet
    
    Dim openPricefile As Long
    Dim importfile As Variant
    Dim importwb As Workbook

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim m As Long
    Dim firstemptyDBrow As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim name As String
    Dim textline As String
    Dim version_3 As String
    Dim version_4 As Long
    Dim revision_4 As Long
    Dim style_4 As String
    Dim validversion As Long
    Dim version As Long
    Dim topcolor As String
    Dim bottomcolor As String
    Dim topcolor_short As String
    Dim bottomcolor_short As String
    

    Dim rngDB As Range
    Dim rngImpDB As Range
    Dim rngImpInfo As Range
    Dim rngPaper As Range
    Dim rngComp As Range
    Dim rngImpCC As Range
    Dim rngImpAV As Range
    Dim rngImpPP As Range
    Dim rngImpItem As Range
    
    Dim dbArr() As Variant
    Dim impDBArr() As Variant
    Dim impInfoArr() As Variant
    Dim impPaperArr() As Variant
    Dim impCompArr() As Variant
    Dim impCCArr() As Variant
    Dim impAVArr()
    Dim impPPArr() As Variant
    Dim impItemArr() As Variant
    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate



'    Dim n As Integer
'    n = FreeFile()
'    Open "\\ITSEELM-NT0004\PELJ$\Desktop\CBD NextGen\output.txt" For Output As #n


' Open pricefile
openPricefile = 0
importfile = Application.GetOpenFilename(FileFilter:="Excel Files (*.XL*), *.XL*", Title:="Select Price File")

If importfile = False Then
GoTo endXLupdate
Else
End If

Set importwb = Workbooks.Open(importfile)
openPricefile = 1

'Is it version 3.4A OR 4
Set impInfosheet = importwb.Sheets("Info")
Set rngImpInfo = impInfosheet.Range("A1:J400")
impInfoArr = rngImpInfo.value

version = 0
validversion = 0
version_3 = ""
version_4 = 0
revision_4 = 0
style_4 = ""
version_3 = Left(Right(impInfoArr(1, 1), 5), 4)
version_4 = impInfoArr(2, 5)
revision_4 = impInfoArr(2, 7)
style_4 = impInfoArr(2, 8)


If version_3 = "3.4A" Then
version = 3
validversion = 1
Else
End If

If version_4 = 4 And style_4 = "A" Then
version = 4
validversion = 1
Else
End If

If validversion = 1 Then
Else
    If openPricefile Then
        importwb.Close savechanges:=False
    End If

    MsgBox "This file will only import CBD versions:" & vbNewLine _
    & "3.4A" & vbNewLine & "4A", vbOKOnly + vbCritical, "Import Error"
    GoTo endXLupdate
End If


' Set Input Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set rngDB = dbSheet.Range("A1:BZ10000")
dbArr = rngDB.value


'
' Start of version 4
'
If version = 4 Then
Set impDBsheet = importwb.Sheets("DB")
Set rngImpDB = impDBsheet.Range("A1:BZ10000")
impDBArr = rngImpDB

'Add More article types like Multichannel
i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = List_Article_Group_Name Then
    impDBArr(i, 12) = "Paper Pallet Replacement Foot"
    impDBArr(i, 13) = "Multichannel Packaging"
    impDBArr(i, 14) = "Multichannel Foot"
    impDBArr(i, 15) = "Multichannel Pallet"
    impDBArr(i, 16) = "Multichannel Replacement Foot"
    Exit For
    Else
    End If
Next i

'Change IKEA Verified MSS to Non Exception
i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = CB_Composition And impDBArr(i, 10) = "IKEA verified MSS" Then
        impDBArr(i, 10) = "Non Certified"
    Else
    End If
Next i

i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = 35 Then
        impDBArr(i, 9) = "FSC CW "
        impDBArr(i, 10) = "Non Certified"
        impDBArr(i, 11) = "Exception"
        impDBArr(i, 12) = ""
    Exit For
    Else
    End If
Next i
'End Remove IKEA Verified MSS

'Change Paper Tradenames list
i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = List_Tradename Then
    impDBArr(i, 4) = "Kraftliner"
    impDBArr(i, 5) = "Kraft Top Liner"
    impDBArr(i, 6) = "Recycled Liner High"
    impDBArr(i, 7) = "Recycled Liner Mid"
    impDBArr(i, 8) = "Recycled Liner Low"
    impDBArr(i, 9) = "White Recycled Liner"
    impDBArr(i, 10) = "White Top Recycled Liner"
    impDBArr(i, 11) = "White Kraftliner"
    impDBArr(i, 12) = "Recycled Fluting High"
    impDBArr(i, 13) = "Recycled Fluting Mid"
    impDBArr(i, 14) = "Recycled Fluting Low"
    impDBArr(i, 15) = "Semichemical Fluting"
    impDBArr(i, 16) = "Starch"
    impDBArr(i, 17) = ""
    Exit For
    Else
    End If
Next i

'Translate Tradenames in Papers list
i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Testliner" Then
        impDBArr(i, 6) = "Recycled Liner High"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Fluting" Then
        impDBArr(i, 6) = "Recycled Fluting Mid"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "White Top Liner" Then
        impDBArr(i, 6) = "White Top Recycled Liner"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "LC White Top Kraftliner" Then
        impDBArr(i, 6) = "White Top Kraftliner"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Wellenstoff" Then
        impDBArr(i, 6) = "Recycled Fluting Mid"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Schrenz" Then
        impDBArr(i, 6) = "Recycled Fluting Low"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Testliner 2" Then
        impDBArr(i, 6) = "Recycled Liner Mid"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Testliner 3" Then
        impDBArr(i, 6) = "Recycled Liner Low"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "Semi-Chemical" Then
        impDBArr(i, 6) = "Semichemical Fluting"
    Else
    End If
    
    If impDBArr(i, 1) = Papers And impDBArr(i, 6) = "White Testliner" Then
        impDBArr(i, 6) = "White Recycled Liner"
    Else
    End If
    
Next i




rngDB = impDBArr




' IMPORT ARRAYS

' Close input file
If openPricefile Then
    importwb.Close savechanges:=False
End If

'
' End of version 4
'

Else

'
'Start of version 3
'
Set impPapersheet = importwb.Sheets("Papers")
Set impCompsheet = importwb.Sheets("Board Compositions")
Set impCCsheet = importwb.Sheets("Corrugated Cardboard")
Set impAVsheet = importwb.Sheets("AddedValue")
Set impPPsheet = importwb.Sheets("PP_Foot")
Set impItemsheet = importwb.Sheets("Items")

Set rngPaper = impPapersheet.Range("A1:S50")
Set rngComp = impCompsheet.Range("A1:L750")
Set rngImpCC = impCCsheet.Range("A1:U50")
Set rngImpAV = impAVsheet.Range("A1:AE500")
Set rngImpPP = impPPsheet.Range("A1:H68")
Set rngImpItem = impItemsheet.Range("A1:AZ10000")

'Import data to Arrays
impPaperArr = rngPaper.value
impCompArr = rngComp.value
impCCArr = rngImpCC.value
impAVArr = rngImpAV.value
impPPArr = rngImpPP.value
impItemArr = rngImpItem.value

' Close input file
If openPricefile Then
    importwb.Close savechanges:=False
End If

'Inform about cleaning


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyDBrow = i
        Exit For
    Else
    End If
Next i

'Write Supplier Info Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Supplier_Info Then
        dbArr(i, 4) = impInfoArr(4, 2)
        dbArr(i, 5) = impInfoArr(5, 2)
        dbArr(i, 6) = impInfoArr(6, 2)
        dbArr(i, 7) = impInfoArr(7, 2)
        dbArr(i, 8) = impInfoArr(8, 2)
        dbArr(i, 9) = impInfoArr(9, 2)
        dbArr(i, 10) = impInfoArr(10, 2)
        dbArr(i, 11) = impInfoArr(11, 2)
        dbArr(i, 12) = impInfoArr(12, 2)
        dbArr(i, 13) = impInfoArr(13, 2)
        dbArr(i, 14) = impInfoArr(14, 2)
        dbArr(i, 15) = impInfoArr(15, 2)
        dbArr(i, 16) = impInfoArr(16, 2)
        dbArr(i, 17) = impInfoArr(17, 2)
        Exit For
    Else
    End If
Next i

'Write IKEA Info Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = IKEA_Info Then
        dbArr(i, 4) = impInfoArr(20, 2)
        dbArr(i, 5) = impInfoArr(21, 2)
        dbArr(i, 6) = impInfoArr(22, 2)
        dbArr(i, 7) = impInfoArr(23, 2)
        dbArr(i, 8) = impInfoArr(24, 2)
        dbArr(i, 9) = impInfoArr(25, 2)
        dbArr(i, 10) = impInfoArr(26, 2)
        dbArr(i, 11) = impInfoArr(27, 2)
        Exit For
    Else
    End If
Next i

'Write Validity Info Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Validity Then
        dbArr(i, 4) = impInfoArr(30, 2)
        dbArr(i, 5) = impInfoArr(31, 2)
        Exit For
    Else
    End If
Next i

'Write Sales Currency Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Sales_Currency Then
        dbArr(i, 4) = impInfoArr(34, 2)
            If dbArr(i, 4) = "LEI" Then
                dbArr(i, 4) = "RON"
            Else
            End If
            
            If dbArr(i, 4) = "RMB" Then
                dbArr(i, 4) = "CNY"
            Else
            End If
        Exit For
    Else
    End If
Next i

'Write Comp Currency Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Comparision_Currency Then
        dbArr(i, 4) = impInfoArr(35, 2)
            If dbArr(i, 4) = "LEI" Then
                dbArr(i, 4) = "RON"
            Else
            End If
            
            If dbArr(i, 4) = "RMB" Then
                dbArr(i, 4) = "CNY"
            Else
            End If
        Exit For
    Else
    End If
Next i

'Update Exchange Rates
i = 39
For i = 39 To 62
    k = 1
    For k = LBound(dbArr) To UBound(dbArr)
        If dbArr(k, 1) = Exchange_Rate And dbArr(k, 5) = impInfoArr(i, 2) Then
            dbArr(k, 7) = impInfoArr(i, 4)
        Else
        End If
        
        If dbArr(k, 1) = Exchange_Rate And dbArr(k, 5) = "RON" And impInfoArr(i, 2) = "LEI" Then
            dbArr(k, 7) = impInfoArr(i, 4)
        Else
        End If
        
        If dbArr(k, 1) = Exchange_Rate And dbArr(k, 5) = "CNY" And impInfoArr(i, 2) = "RMB" Then
            dbArr(k, 7) = impInfoArr(i, 4)
        Else
        End If
    Next k
Next i

'Write Comp Currency Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Comparision_Currency Then
        dbArr(i, 4) = impInfoArr(35, 2)
            If dbArr(i, 4) = "LEI" Then
                dbArr(i, 4) = "RON"
            Else
            End If
            
            If dbArr(i, 4) = "RMB" Then
                dbArr(i, 4) = "CNY"
            Else
            End If
        Exit For
    Else
    End If
Next i

'Write Customer Objects
i = 66
For i = 66 To 250
    If impInfoArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 8
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Customers"
        dbArr(firstemptyDBrow, 4) = impInfoArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impInfoArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impInfoArr(i, 3)
        dbArr(firstemptyDBrow, 7) = impInfoArr(i, 4)
        dbArr(firstemptyDBrow, 8) = impInfoArr(i, 5)
        dbArr(firstemptyDBrow, 9) = impInfoArr(i, 6)
        dbArr(firstemptyDBrow, 10) = impInfoArr(i, 5)
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write Papers Objects
i = 4
For i = 4 To 40
    If impPaperArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 9
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Papers"
        dbArr(firstemptyDBrow, 4) = impPaperArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impPaperArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impPaperArr(i, 3)
        'dbArr(firstemptyDBrow, 7) = impPaperArr(i, 4) 'IKEA Paper Name not in old
        dbArr(firstemptyDBrow, 8) = impPaperArr(i, 4)
        dbArr(firstemptyDBrow, 9) = impPaperArr(i, 5)
            If dbArr(firstemptyDBrow, 9) = "LEI" Then
                dbArr(firstemptyDBrow, 9) = "RON"
            Else
            End If
            
            If dbArr(firstemptyDBrow, 9) = "RMB" Then
                dbArr(firstemptyDBrow, 9) = "CNY"
            Else
            End If
        'dbArr(firstemptyDBrow, 10) = impPaperArr(i, 6) 'Not in use
        dbArr(firstemptyDBrow, 11) = impPaperArr(i, 7)
        dbArr(firstemptyDBrow, 12) = impPaperArr(i, 8)
        dbArr(firstemptyDBrow, 13) = impPaperArr(i, 10)
        dbArr(firstemptyDBrow, 14) = impPaperArr(i, 11)
        dbArr(firstemptyDBrow, 15) = impPaperArr(i, 12)
        ' dbArr(firstemptyDBrow, 16) = impPaperArr(i, 6) 'FSC COC not in old
        'dbArr(firstemptyDBrow, 17) = impPaperArr(i, 6) ' FSC Status not in old
        dbArr(firstemptyDBrow, 18) = impPaperArr(i, 13)
        dbArr(firstemptyDBrow, 19) = impPaperArr(i, 14)
        dbArr(firstemptyDBrow, 20) = impPaperArr(i, 15)
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Create a starch object
dbArr(firstemptyDBrow, 1) = 9
dbArr(firstemptyDBrow, 2) = 1
dbArr(firstemptyDBrow, 3) = "Papers"
dbArr(firstemptyDBrow, 4) = "Starch"
dbArr(firstemptyDBrow, 6) = "Starch"
dbArr(firstemptyDBrow, 8) = impCompArr(5, 4)
dbArr(firstemptyDBrow, 9) = impCompArr(5, 5)

If impCompArr(5, 5) = "LEI" Then
dbArr(firstemptyDBrow, 9) = "RON"
Else
End If

If impCompArr(5, 5) = "RMB" Then
dbArr(firstemptyDBrow, 9) = "CNY"
Else
End If

dbArr(firstemptyDBrow, 11) = "Other"
firstemptyDBrow = firstemptyDBrow + 1

'Write Flute Table
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Flute_table Then
        dbArr(i, 4) = impCompArr(6, 2)
        dbArr(i, 5) = impCompArr(7, 2)
        dbArr(i, 6) = impCompArr(8, 2)
        dbArr(i, 7) = impCompArr(9, 2)
        dbArr(i, 8) = impCompArr(10, 2)
        dbArr(i, 9) = impCompArr(11, 2)
        dbArr(i, 10) = impCompArr(12, 2)
        dbArr(i, 11) = impCompArr(13, 2)
        Exit For
    Else
    End If
Next i

'Write Composition Objects
i = 17
For i = 17 To 605
    If impCompArr(i, 1) = "" Then
    i = i + 13
    Else
        bottomcolor = ""
        topcolor = ""
        bottomcolor_short = ""
        topcolor_short = ""
        dbArr(firstemptyDBrow, 1) = 12
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "CB_Composition"
        dbArr(firstemptyDBrow, 4) = impCompArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impCompArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impCompArr(i, 3)
        dbArr(firstemptyDBrow, 7) = impCompArr(i, 4)
        
        ' Set color combination
                k = 1
                For k = LBound(dbArr) To UBound(dbArr)
                If dbArr(k, 1) = Papers And dbArr(k, 4) = impCompArr(i + 2, 2) Then
                    topcolor = dbArr(k, 11)
                Else
                End If
                
                If dbArr(k, 1) = Papers And dbArr(k, 4) = impCompArr(i + 8, 2) Then
                    bottomcolor = dbArr(k, 11)
                Else
                End If
                Next k
                
                Select Case topcolor
                        Case Is = "Brown"
                            topcolor_short = "B"
                        Case Is = "White"
                            topcolor_short = "W"
                        Case Is = "Other"
                            topcolor_short = "O"
                        Case Else
                            topcolor_short = ""
                End Select
                
                Select Case bottomcolor
                        Case Is = "Brown"
                            bottomcolor_short = "B"
                        Case Is = "White"
                            bottomcolor_short = "W"
                        Case Is = "Other"
                            bottomcolor_short = "O"
                        Case Else
                            bottomcolor_short = ""
                End Select
        
        dbArr(firstemptyDBrow, 8) = topcolor_short & bottomcolor_short 'Inside color but actually it is color combo i.e BB
        'dbArr(firstemptyDBrow, 9) = impCompArr(i, 5) 'Outside color not used in old version
        'dbArr(firstemptyDBrow, 10) = impCompArr(i, 6) 'Default MSS Status not used in old version
        'dbArr(firstemptyDBrow, 11) = impCompArr(i, 7) ' MSS Code not in use in old version
        dbArr(firstemptyDBrow, 12) = impCompArr(i + 2, 2) ' Topliner
        dbArr(firstemptyDBrow, 13) = impCompArr(i + 2, 3)
        'dbArr(firstemptyDBrow, 14) = impCompArr(i + 2, 4) 'Waste Not in use
        dbArr(firstemptyDBrow, 15) = impCompArr(i + 3, 2) ' Flute1
        dbArr(firstemptyDBrow, 16) = impCompArr(i + 3, 3)
        dbArr(firstemptyDBrow, 17) = impCompArr(i + 3, 4)
        dbArr(firstemptyDBrow, 17) = UCase(dbArr(firstemptyDBrow, 17))
        'dbArr(firstemptyDBrow, 18) = impCompArr(i, 13) 'Waste not in use
        dbArr(firstemptyDBrow, 19) = impCompArr(i + 4, 2) ' Midliner 1
        dbArr(firstemptyDBrow, 20) = impCompArr(i + 4, 3)
        'dbArr(firstemptyDBrow, 21) = impCompArr(i, 15) ' Waste not in use
        dbArr(firstemptyDBrow, 22) = impCompArr(i + 5, 2) ' Flute 2
        dbArr(firstemptyDBrow, 23) = impCompArr(i + 5, 3)
        dbArr(firstemptyDBrow, 24) = impCompArr(i + 5, 4)
        dbArr(firstemptyDBrow, 24) = UCase(dbArr(firstemptyDBrow, 24))
        'dbArr(firstemptyDBrow, 25) = impCompArr(i, 15) ' Waste not in use
        dbArr(firstemptyDBrow, 26) = impCompArr(i + 6, 2) 'Midliner 2
        dbArr(firstemptyDBrow, 27) = impCompArr(i + 6, 3)
        'dbArr(firstemptyDBrow, 28) = impCompArr(i, 15) ' Waste not in use
        dbArr(firstemptyDBrow, 29) = impCompArr(i + 7, 2) 'Flute 3
        dbArr(firstemptyDBrow, 30) = impCompArr(i + 7, 3)
        dbArr(firstemptyDBrow, 31) = impCompArr(i + 7, 4)
        dbArr(firstemptyDBrow, 31) = UCase(dbArr(firstemptyDBrow, 31))
        'dbArr(firstemptyDBrow, 32) = impCompArr(i, 15)' Waste not in use
        dbArr(firstemptyDBrow, 33) = impCompArr(i + 8, 2) 'Bottomliner
        dbArr(firstemptyDBrow, 34) = impCompArr(i + 8, 3)
        'dbArr(firstemptyDBrow, 35) = impCompArr(i, 15)' Waste not in use
        dbArr(firstemptyDBrow, 36) = "Starch"           'Starch
        dbArr(firstemptyDBrow, 37) = impCompArr(i + 9, 3)
        'dbArr(firstemptyDBrow, 38) = impCompArr(i, 15) ' Waste not in use
        dbArr(firstemptyDBrow, 39) = impCompArr(i, 12)
        dbArr(firstemptyDBrow, 40) = impCompArr(i + 1, 12) ' Testreport info until end
        dbArr(firstemptyDBrow, 41) = impCompArr(i + 2, 12)
        dbArr(firstemptyDBrow, 42) = impCompArr(i + 3, 12)
        dbArr(firstemptyDBrow, 43) = impCompArr(i + 4, 12)
        dbArr(firstemptyDBrow, 44) = impCompArr(i + 5, 12)
        dbArr(firstemptyDBrow, 45) = impCompArr(i + 6, 12)
        i = i + 13
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write Corrugated Cardboard/Purchased Sheets Objects
i = 7
For i = 7 To 40
    If impCCArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 13
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Purchased_Sheets"
        dbArr(firstemptyDBrow, 4) = impCCArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impCCArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impCCArr(i, 3)
        'dbArr(firstemptyDBrow, 7) = impCCArr(i, 4)'Manufacturers Name only in new version
        'dbArr(firstemptyDBrow, 8) = impCCArr(i, 4) 'Manufacturers Code only in new version
        dbArr(firstemptyDBrow, 9) = impCCArr(i, 5)
        dbArr(firstemptyDBrow, 10) = impCCArr(i, 6)
            If dbArr(firstemptyDBrow, 10) = "LEI" Then
                dbArr(firstemptyDBrow, 10) = "RON"
            Else
            End If
            
            If dbArr(firstemptyDBrow, 10) = "RMB" Then
                dbArr(firstemptyDBrow, 10) = "CNY"
            Else
            End If
        
        dbArr(firstemptyDBrow, 11) = impCCArr(i, 10)
        dbArr(firstemptyDBrow, 12) = impCCArr(i, 11)
            If dbArr(firstemptyDBrow, 12) = "LEI" Then
                dbArr(firstemptyDBrow, 12) = "RON"
            Else
            End If
            
            If dbArr(firstemptyDBrow, 12) = "RMB" Then
                dbArr(firstemptyDBrow, 12) = "CNY"
            Else
            End If
        
        dbArr(firstemptyDBrow, 13) = impCCArr(i, 15)
        dbArr(firstemptyDBrow, 14) = impCCArr(i, 16)
            If dbArr(firstemptyDBrow, 14) = "LEI" Then
                dbArr(firstemptyDBrow, 14) = "RON"
            Else
            End If
            
            If dbArr(firstemptyDBrow, 14) = "RMB" Then
                dbArr(firstemptyDBrow, 14) = "CNY"
            Else
            End If
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write Corrugation Objects
i = 5
k = 1
found = 0
For i = 5 To 47
        k = 1
        found = 0
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = CB_Composition And dbArr(k, 4) = impAVArr(i, 1) Then
                found = 1
            Else
                found = 0
            End If
        Next k
        
        If found = 0 Then
            dbArr(firstemptyDBrow, 1) = 14
            dbArr(firstemptyDBrow, 2) = 1
            dbArr(firstemptyDBrow, 3) = "Corrugation_cost"
            dbArr(firstemptyDBrow, 4) = 1 'Identifier Not in use
            dbArr(firstemptyDBrow, 5) = "" 'Name not in use
            dbArr(firstemptyDBrow, 6) = impAVArr(i, 1) 'Composition
            dbArr(firstemptyDBrow, 7) = impAVArr(i, 2) 'Cost
            firstemptyDBrow = firstemptyDBrow + 1
        Else
        End If
Next i

'Write Conversion Objects
i = 56
For i = 56 To 85
    If impAVArr(i, 1) = "" Then
    Else
        'Outs cost
        dbArr(firstemptyDBrow, 1) = 15
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Converters_A"
        dbArr(firstemptyDBrow, 4) = impAVArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impAVArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impAVArr(i, 3)
        dbArr(firstemptyDBrow, 23) = impAVArr(i, 4) 'Start of Cost for outs - 1 Out
        dbArr(firstemptyDBrow, 24) = impAVArr(i, 6) '2
        dbArr(firstemptyDBrow, 25) = impAVArr(i, 8) '3
        dbArr(firstemptyDBrow, 26) = impAVArr(i, 10) '4
        dbArr(firstemptyDBrow, 27) = impAVArr(i, 12) '5
        dbArr(firstemptyDBrow, 28) = impAVArr(i, 14) '6
        dbArr(firstemptyDBrow, 29) = impAVArr(i, 16) '7
        dbArr(firstemptyDBrow, 30) = impAVArr(i, 18) '8
        dbArr(firstemptyDBrow, 31) = impAVArr(i, 20) '9
        dbArr(firstemptyDBrow, 32) = impAVArr(i, 22) '10
        dbArr(firstemptyDBrow, 33) = impAVArr(i, 24) '>10
        dbArr(firstemptyDBrow, 34) = impAVArr(i, 26) '>15
        dbArr(firstemptyDBrow, 35) = impAVArr(i, 28) '>20
        'Discounts
        dbArr(firstemptyDBrow, 36) = impAVArr(i + 37, 4)
        dbArr(firstemptyDBrow, 37) = impAVArr(i + 37, 5)
        dbArr(firstemptyDBrow, 38) = impAVArr(i + 37, 6)
        dbArr(firstemptyDBrow, 39) = impAVArr(i + 37, 7)
        dbArr(firstemptyDBrow, 40) = impAVArr(i + 37, 8)
        dbArr(firstemptyDBrow, 41) = impAVArr(i + 37, 9)
        dbArr(firstemptyDBrow, 42) = impAVArr(i + 37, 10)
        dbArr(firstemptyDBrow, 43) = impAVArr(i + 37, 11)
        dbArr(firstemptyDBrow, 44) = impAVArr(i + 37, 12)
        dbArr(firstemptyDBrow, 45) = impAVArr(i + 37, 13)
        dbArr(firstemptyDBrow, 46) = impAVArr(i + 37, 14)
        dbArr(firstemptyDBrow, 47) = impAVArr(i + 37, 15)
        dbArr(firstemptyDBrow, 48) = impAVArr(i + 37, 16)
        dbArr(firstemptyDBrow, 49) = impAVArr(i + 37, 17)
        dbArr(firstemptyDBrow, 50) = impAVArr(i + 37, 18)
        dbArr(firstemptyDBrow, 51) = impAVArr(i + 37, 19)
        dbArr(firstemptyDBrow, 52) = impAVArr(i + 37, 20)
        dbArr(firstemptyDBrow, 53) = impAVArr(i + 37, 21)
        dbArr(firstemptyDBrow, 54) = impAVArr(i + 37, 21) 'Set the same discount as the 45000-49999 As this is new
        dbArr(firstemptyDBrow, 55) = impAVArr(i + 37, 21) 'Set the same discount as the 45000-49999 As this is new
        dbArr(firstemptyDBrow, 56) = impAVArr(i + 37, 21) 'Set the same discount as the 45000-49999 As this is new
        dbArr(firstemptyDBrow, 57) = impAVArr(i + 37, 21) 'Set the same discount as the 45000-49999 As this is new
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write Packaging Costs Objects
i = 129
For i = 129 To 179
    If impAVArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 16
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Packaging_Cost"
        dbArr(firstemptyDBrow, 4) = impAVArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impAVArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impAVArr(i, 3)
        dbArr(firstemptyDBrow, 7) = impAVArr(i, 4)
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write to Other Cost Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Other_cost Then
        dbArr(i, 4) = impAVArr(182, 2)
        Exit For
    Else
    End If
Next i

'Write to Profit Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = profit Then
        dbArr(i, 4) = impAVArr(184, 2)
        Exit For
    Else
    End If
Next i

'Write to Volume Discount Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Volume_Discounts Then
        dbArr(i, 4) = impAVArr(189, 4)
        dbArr(i, 5) = impAVArr(190, 4)
        dbArr(i, 6) = impAVArr(191, 4)
        dbArr(i, 7) = impAVArr(192, 4)
        dbArr(i, 8) = impAVArr(193, 4)
        dbArr(i, 9) = impAVArr(194, 4)
        dbArr(i, 10) = impAVArr(195, 4)
        dbArr(i, 11) = impAVArr(196, 4)
        dbArr(i, 12) = impAVArr(197, 4)
        dbArr(i, 13) = impAVArr(198, 4)
        dbArr(i, 14) = impAVArr(199, 4)
        dbArr(i, 15) = impAVArr(200, 4)
        dbArr(i, 16) = impAVArr(201, 4)
        dbArr(i, 17) = impAVArr(202, 4)
        dbArr(i, 18) = impAVArr(203, 4)
        Exit For
    Else
    End If
Next i

'Write to Contractual Volume Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Contracted_Volume Then
        If impAVArr(207, 1) = "1 - 2" Then dbArr(i, 4) = 2
        If impAVArr(207, 1) = "2 - 4" Then dbArr(i, 4) = 4
        If impAVArr(207, 1) = "4 - 6" Then dbArr(i, 4) = 6
        If impAVArr(207, 1) = "6 - 8" Then dbArr(i, 4) = 8
        If impAVArr(207, 1) = "8 - 10" Then dbArr(i, 4) = 10
        If impAVArr(207, 1) = "10 - 15" Then dbArr(i, 4) = 15
        If impAVArr(207, 1) = "15 - 20" Then dbArr(i, 4) = 20
        If impAVArr(207, 1) = "20 - 25" Then dbArr(i, 4) = 25
        If impAVArr(207, 1) = "25 - 30" Then dbArr(i, 4) = 30
        If impAVArr(207, 1) = "30 - 35" Then dbArr(i, 4) = 35
        If impAVArr(207, 1) = "35 - 40" Then dbArr(i, 4) = 40
        If impAVArr(207, 1) = "40 - 50" Then dbArr(i, 4) = 50
        If impAVArr(207, 1) = "50 - 60" Then dbArr(i, 4) = 60
        If impAVArr(207, 1) = "60 - 80" Then dbArr(i, 4) = 80
        If impAVArr(207, 1) = "80 - 100" Then dbArr(i, 4) = 100
        Exit For
    Else
    End If
Next i

'Write Pallet Costs Objects
i = 214
For i = 214 To 264
    If impAVArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 21
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Pallet_Cost"
        dbArr(firstemptyDBrow, 4) = impAVArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impAVArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impAVArr(i, 3)
        dbArr(firstemptyDBrow, 7) = impAVArr(i, 4)
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write Tool Costs Objects
i = 269
For i = 269 To 292
    If impAVArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 22
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Tool_Cost"
        dbArr(firstemptyDBrow, 4) = impAVArr(i, 1)
        dbArr(firstemptyDBrow, 5) = impAVArr(i, 2)
        dbArr(firstemptyDBrow, 6) = impAVArr(i, 3)
        dbArr(firstemptyDBrow, 7) = impAVArr(i, 4)
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write Transport Costs Objects
i = 298
For i = 298 To 480
    If impAVArr(i, 1) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 23
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Transport_Cost"
        dbArr(firstemptyDBrow, 4) = impAVArr(i, 1)
        dbArr(firstemptyDBrow, 8) = impAVArr(i, 2)
        dbArr(firstemptyDBrow, 5) = impAVArr(i, 3)
        dbArr(firstemptyDBrow, 9) = impAVArr(i, 4)
        dbArr(firstemptyDBrow, 10) = "m2"
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i

'Write to Foot 180x90 Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_180x90 Then
        dbArr(i, 5) = impPPArr(2, 2)
            If dbArr(i, 5) = "LEI" Then
                dbArr(i, 5) = "RON"
            Else
            End If
            
            If dbArr(i, 5) = "RMB" Then
                dbArr(i, 5) = "CNY"
            Else
            End If
            
        dbArr(i, 30) = impPPArr(32, 2) 'Final Cost
        
            If Not dbArr(i, 30) = 0 Then
                dbArr(i, 28) = impPPArr(66, 2) / dbArr(i, 30) 'Production Cost %age
                Else
                dbArr(i, 28) = 0.3
                End If
            dbArr(i, 27) = 1 - dbArr(i, 28) ' Material Share

        dbArr(i, 31) = impPPArr(68, 3) 'Gluing Cost
        Exit For
    Else
    End If
Next i

'Write to Foot 140x90 Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_140x90 Then
        dbArr(i, 5) = impPPArr(2, 2)
            If dbArr(i, 5) = "LEI" Then
                dbArr(i, 5) = "RON"
            Else
            End If
            
            If dbArr(i, 5) = "RMB" Then
                dbArr(i, 5) = "CNY"
            Else
            End If
            
        dbArr(i, 30) = impPPArr(32, 5) 'Final Cost
            If Not dbArr(i, 30) = 0 Then
                dbArr(i, 28) = impPPArr(66, 5) / dbArr(i, 30) 'Production Cost %age
            Else
                dbArr(i, 28) = 0.3
            End If
            dbArr(i, 27) = 1 - dbArr(i, 28) ' Material Share
        dbArr(i, 31) = impPPArr(68, 3) 'Gluing Cost
        Exit For
    Else
    End If
Next i

'Write to Foot 90x90 Object
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_90x90 Then
        dbArr(i, 5) = impPPArr(2, 2)
            If dbArr(i, 5) = "LEI" Then
                dbArr(i, 5) = "RON"
            Else
            End If
            
            If dbArr(i, 5) = "RMB" Then
                dbArr(i, 5) = "CNY"
            Else
            End If
            
        dbArr(i, 30) = impPPArr(32, 8) 'Final Cost
        If Not dbArr(i, 30) = 0 Then
            dbArr(i, 28) = impPPArr(66, 8) / dbArr(i, 30) 'Production Cost %age
        Else
            dbArr(i, 28) = 0.3
        End If
        dbArr(i, 27) = 1 - dbArr(i, 28) ' Material Share
        dbArr(i, 31) = impPPArr(68, 3) 'Gluing Cost
        Exit For
    Else
    End If
Next i


'Write Item Objects
i = 5
For i = 5 To 4000
    If impItemArr(i, 2) = "" Then
    Else
        dbArr(firstemptyDBrow, 1) = 30
        dbArr(firstemptyDBrow, 2) = 1
        dbArr(firstemptyDBrow, 3) = "Item"
        dbArr(firstemptyDBrow, 4) = impInfoArr(5, 2) & "-" & impItemArr(i, 2) 'UID
        'dbArr(firstemptyDBrow, 5) = impItemArr(i, 2) 'Creation Date not in old
        'dbArr(firstemptyDBrow, 6) = impItemArr(i, 3) 'Change Date not in old
        dbArr(firstemptyDBrow, 7) = impItemArr(i, 1) 'IKEA C Art no
        dbArr(firstemptyDBrow, 8) = impItemArr(i, 3) 'Article Name
        dbArr(firstemptyDBrow, 9) = impItemArr(i, 4) 'Length
        'dbArr(firstemptyDBrow, 10) = impItemArr(i, 3) 'Width - Not in use
        'dbArr(firstemptyDBrow, 11) = impItemArr(i, 3) 'Height - Not in use
        dbArr(firstemptyDBrow, 12) = impItemArr(i, 5) 'Article Group Name
        dbArr(firstemptyDBrow, 13) = impItemArr(i, 6) 'Article Group Number
        dbArr(firstemptyDBrow, 14) = impItemArr(i, 7) 'IKEA Prod Art No
        dbArr(firstemptyDBrow, 15) = impItemArr(i, 8) 'IKEA Supplier Name
        dbArr(firstemptyDBrow, 16) = impItemArr(i, 9) 'IKEA Supplier Ref
        dbArr(firstemptyDBrow, 17) = impItemArr(i, 10) 'NPS Ref
        dbArr(firstemptyDBrow, 18) = impItemArr(i, 11) 'Description
        dbArr(firstemptyDBrow, 19) = impItemArr(i, 12) 'No of 180x90 foot
        dbArr(firstemptyDBrow, 20) = impItemArr(i, 13) 'No of 140x90 foot
        dbArr(firstemptyDBrow, 21) = impItemArr(i, 14) 'No of 90x90 foot
        dbArr(firstemptyDBrow, 22) = "Other" 'Inside Color
        If impItemArr(i, 15) = "Brown" And impItemArr(i, 16) = "Brown" Then dbArr(firstemptyDBrow, 22) = "BB"
        If impItemArr(i, 15) = "White" And impItemArr(i, 16) = "Brown" Then dbArr(firstemptyDBrow, 22) = "WB"
        If impItemArr(i, 15) = "Brown" And impItemArr(i, 16) = "White" Then dbArr(firstemptyDBrow, 22) = "BW"
        If impItemArr(i, 15) = "White" And impItemArr(i, 16) = "White" Then dbArr(firstemptyDBrow, 22) = "WW"
        'dbArr(firstemptyDBrow, 23) = impItemArr(i, 16) 'Outside Color - Not in use
        dbArr(firstemptyDBrow, 24) = impItemArr(i, 17) 'Printing
        dbArr(firstemptyDBrow, 25) = impItemArr(i, 18) 'Forecasted Yearly Qty
        dbArr(firstemptyDBrow, 26) = impItemArr(i, 19) 'AOQ
        dbArr(firstemptyDBrow, 27) = impItemArr(i, 21) 'Composition
        dbArr(firstemptyDBrow, 28) = impItemArr(i, 22) 'Construction
        dbArr(firstemptyDBrow, 29) = impItemArr(i, 23) 'MCP
        If dbArr(firstemptyDBrow, 29) = "NONE" Then dbArr(firstemptyDBrow, 29) = ""
        dbArr(firstemptyDBrow, 30) = impItemArr(i, 20) 'MCP Outs
        If dbArr(firstemptyDBrow, 29) = "" Then dbArr(firstemptyDBrow, 30) = ""
        dbArr(firstemptyDBrow, 31) = impItemArr(i, 25) '2nd conv
        If dbArr(firstemptyDBrow, 31) = "NONE" Then dbArr(firstemptyDBrow, 31) = ""
        dbArr(firstemptyDBrow, 32) = impItemArr(i, 20) '2nd outs
        If dbArr(firstemptyDBrow, 31) = "" Then dbArr(firstemptyDBrow, 32) = ""
        dbArr(firstemptyDBrow, 33) = impItemArr(i, 27) '3rd conv
        If dbArr(firstemptyDBrow, 33) = "NONE" Then dbArr(firstemptyDBrow, 33) = ""
        dbArr(firstemptyDBrow, 34) = impItemArr(i, 20) '3rd outs
        If dbArr(firstemptyDBrow, 33) = "" Then dbArr(firstemptyDBrow, 34) = ""
        'dbArr(firstemptyDBrow, 35) = impItemArr(i, 29) '4th conv - Not in old version
        'dbArr(firstemptyDBrow, 36) = impItemArr(i, 20) '4th outs - Not in old version
        'dbArr(firstemptyDBrow, 37) = impItemArr(i, 3) '5th conv - Not in old version
        'dbArr(firstemptyDBrow, 38) = impItemArr(i, 3) '5th outs -Not in old version
        dbArr(firstemptyDBrow, 39) = impItemArr(i, 29) 'Pkg type
        dbArr(firstemptyDBrow, 40) = impItemArr(i, 30) 'Art net size
        'dbArr(firstemptyDBrow, 41) = impItemArr(i, 3) 'Theoretical weight - NOT USED
        'dbArr(firstemptyDBrow, 42) = impItemArr(i, 3) 'Art weight - Not used in old version
        dbArr(firstemptyDBrow, 43) = impItemArr(i, 31) 'Corr and conv paper waste
        dbArr(firstemptyDBrow, 44) = impItemArr(i, 32) 'Corr and conv starch waste
        dbArr(firstemptyDBrow, 45) = impItemArr(i, 34) 'Conv waste
        dbArr(firstemptyDBrow, 46) = impItemArr(i, 35) 'Extra Cost
        dbArr(firstemptyDBrow, 47) = impItemArr(i, 36) 'Extra Info
        dbArr(firstemptyDBrow, 48) = impItemArr(i, 38) 'Pallet in FCA
        dbArr(firstemptyDBrow, 49) = impItemArr(i, 39) 'Pallet qty
        dbArr(firstemptyDBrow, 50) = impItemArr(i, 40) 'Pallet Type
        dbArr(firstemptyDBrow, 51) = impItemArr(i, 41) 'Transport option
        dbArr(firstemptyDBrow, 52) = impItemArr(i, 42) 'Tool type
        dbArr(firstemptyDBrow, 53) = impItemArr(i, 43) 'Tool cost
        'dbArr(firstemptyDBrow, 54) = impItemArr(i, 3) 'Board Type - Not used in old version
        If impItemArr(i, 33) = "NONE" Then
            dbArr(firstemptyDBrow, 55) = "1-" & impItemArr(i, 21) 'Board Selection - Not used in old version
        Else
            dbArr(firstemptyDBrow, 55) = "2-" & impItemArr(i, 33) 'Board Selection - Not used in old version
        End If
        
        
        j = 66
        For j = 66 To 250
            If impInfoArr(j, 1) = impItemArr(i, 8) Then
        dbArr(firstemptyDBrow, 56) = impInfoArr(j, 2) 'IKEA Supplier Number
        Else
        End If
        Next j
        
        'dbArr(firstemptyDBrow, 57) = impItemArr(i, 3) 'C_Unused
        'dbArr(firstemptyDBrow, 58) = impItemArr(i, 3) 'C_Blank Length
        'dbArr(firstemptyDBrow, 59) = impItemArr(i, 3) 'C_Blank Width
        'dbArr(firstemptyDBrow, 60) = impItemArr(i, 3) 'C_Printing
        'dbArr(firstemptyDBrow, 61) = impItemArr(i, 3) 'C_Slotting
        'dbArr(firstemptyDBrow, 62) = impItemArr(i, 3) 'C_Diecut
        'dbArr(firstemptyDBrow, 63) = impItemArr(i, 3) 'C_Glue
        'dbArr(firstemptyDBrow, 64) = impItemArr(i, 3) 'C_Waste removal
        'dbArr(firstemptyDBrow, 65) = impItemArr(i, 3) 'C_Packing
        'dbArr(firstemptyDBrow, 66) = impItemArr(i, 3) 'C_Special shape
        'dbArr(firstemptyDBrow, 67) = impItemArr(i, 3) 'C_Order less than MOQ
        'dbArr(firstemptyDBrow, 68) = impItemArr(i, 3) 'C_Optional 1
        'dbArr(firstemptyDBrow, 69) = impItemArr(i, 3) 'C_Optional 2
        'dbArr(firstemptyDBrow, 70) = impItemArr(i, 3) 'C_Optional 3
        'dbArr(firstemptyDBrow, 71) = impItemArr(i, 3) 'C_Management cost
        'dbArr(firstemptyDBrow, 72) = impItemArr(i, 3) 'C_Profit
        'dbArr(firstemptyDBrow, 73) = impItemArr(i, 3) 'C_Other cost
        'dbArr(firstemptyDBrow, 74) = impItemArr(i, 3) 'C_other cost info
        firstemptyDBrow = firstemptyDBrow + 1
    End If
Next i



rngDB = dbArr


'
' End of version 3
'

'
' End of both v3 or v4
'
End If
'
'
'

' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

Generate
Info_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Generate()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet
    Dim articlesSheet As Worksheet
    Dim m3Sheet As Worksheet
    Dim pricelistSheet As Worksheet
    Dim gapriceSheet As Worksheet
    Dim dapriceSheet As Worksheet
    Dim commissionSheet As Worksheet
    Dim infoSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Foot_180x90x100 As Long = 67
    Const Foot_140x90x100 As Long = 68
    Const Foot_90x90x100 As Long = 69
    Const Replacement_Foot_180x90x100 As Long = 70
    Const Replacement_Foot_140x90x100 As Long = 71
    Const Replacement_Foot_90x90x100 As Long = 72
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim m As Long
    Dim firstemptyDBrow As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim name As String
    Dim textline As String
    Dim boardtype As Long
    
    Dim salesCurrency As String
    Dim salesCurrencyVal As Double
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    Dim commission As Double
    Dim xrate As Double
    
    Dim comp_tlc As Double
    Dim comp_f1c As Double
    Dim comp_m1c As Double
    Dim comp_f2c As Double
    Dim comp_m2c As Double
    Dim comp_f3c As Double
    Dim comp_blc As Double
    Dim comp_stc As Double
    
    
    Dim ff_type As String
    Dim ff_val As Double
    Dim ff1 As Double
    Dim ff2 As Double
    Dim ff3 As Double
    Dim purchasecost As Double
    Dim palletcost As Double
    Dim distcost As Double
    Dim jb_gluingcost As Double
    Dim jb_b1cost As Double
    Dim jb_b2cost As Double
    Dim jb_b3cost As Double
    Dim jb_b1weight As Double
    Dim jb_b2weight As Double
    Dim jb_b3weight As Double
    Dim cost As Double
    Dim conv_discount As Double
    Dim conv1cost As Double
    Dim conv2cost As Double
    Dim conv3cost As Double
    Dim conv4cost As Double
    Dim conv1disc As Double
    Dim conv2disc As Double
    Dim conv3disc As Double
    Dim conv4disc As Double
    Dim discountColNo As Long
    Dim discountColNo1 As Long
    Dim discountColNo2 As Long
    Dim discountColNo3 As Long
    Dim discountColNo4 As Long
    Dim blankouts As Long
    Dim number_of_outs As Long
    Dim jb_used As Long
    Dim waste As Double
    Dim weight As Double
    Dim footweight As Double
    Dim no180 As Long
    Dim no140 As Long
    Dim no90 As Long
    Dim weight180 As Double
    Dim weight140 As Double
    Dim weight90 As Double
    Dim mtrl180 As Double
    Dim prod180 As Double
    Dim mtrl140 As Double
    Dim prod140 As Double
    Dim mtrl90 As Double
    Dim prod90 As Double
    'DRAFT2
    Dim no180x100 As Long
    Dim no140x100 As Long
    Dim no90x100 As Long
    Dim weight180x100 As Double
    Dim weight140x100 As Double
    Dim weight90x100 As Double
    Dim mtrl180x100 As Double
    Dim prod180x100 As Double
    Dim mtrl140x100 As Double
    Dim prod140x100 As Double
    Dim mtrl90x100 As Double
    Dim prod90x100 As Double
    'END DRAFT2
    'v43
    Dim R_no180x100 As Long
    Dim R_no140x100 As Long
    Dim R_no90x100 As Long
    Dim R_weight180x100 As Double
    Dim R_weight140x100 As Double
    Dim R_weight90x100 As Double
    Dim R_mtrl180x100 As Double
    Dim R_prod180x100 As Double
    Dim R_mtrl140x100 As Double
    Dim R_prod140x100 As Double
    Dim R_mtrl90x100 As Double
    Dim R_prod90x100 As Double
    'v43
    
    
    
    Dim rngDB As Range
    Dim rngArticles As Range
    Dim rngOutArr As Range
    Dim rngM3 As Range
    Dim rngGA As Range
    Dim rngDA As Range
    Dim rngCom1 As Range
    Dim rngCom2 As Range
    Dim rngCom3 As Range
    Dim rngCom4 As Range
    Dim rngCom5 As Range
    Dim rngCom6 As Range
    Dim rngCom7 As Range
    Dim rngCom8 As Range
    Dim rngCom9 As Range
    Dim rngCom10 As Range
    Dim rngCom11 As Range
    Dim rngCom12 As Range
    Dim rngCom13 As Range
    Dim rngCom14 As Range
    Dim rngCom15 As Range
    Dim rngCom16 As Range
    Dim rngCom17 As Range
    Dim rngCom18 As Range
    Dim rngCom19 As Range
    
    Dim dbArr() As Variant
    Dim outArr() As Variant
    Dim articlesArr() As Variant
    Dim custArr(300, 15) As Variant
    Dim currencyArr(300, 7) As Variant
    Dim papersArr(300, 25) As Variant
    Dim flutesArr(1, 11)
    Dim compArr(300, 75) As Variant
    Dim cbArr(300, 20) As Variant
    Dim obArr(300, 25) As Variant
    Dim jbArr(300, 25) As Variant
    Dim corrArr(300, 10) As Variant
    Dim convArr(300, 65) As Variant
    Dim packArr(300, 10) As Variant
    Dim pallArr(300, 10) As Variant
    Dim transportArr(5000, 15) As Variant
    Dim otherCost As Double
    Dim profit_level As Double
    Dim contractvolume As Long
    Dim discountArr(20, 1) As Variant
    Dim discount As Double
    Dim Foot_180x90Arr(1, 50) As Variant
    Dim Foot_140x90Arr(1, 50) As Variant
    Dim Foot_90x90Arr(1, 50) As Variant
    'DRAFT2
    Dim Foot_180x90x100Arr(1, 50) As Variant
    Dim Foot_140x90x100Arr(1, 50) As Variant
    Dim Foot_90x90x100Arr(1, 50) As Variant
    'END DRAFT2
    'v43
    Dim R_Foot_180x90Arr(1, 50) As Variant
    Dim R_Foot_140x90Arr(1, 50) As Variant
    Dim R_Foot_90x90Arr(1, 50) As Variant
    Dim R_Foot_180x90x100Arr(1, 50) As Variant
    Dim R_Foot_140x90x100Arr(1, 50) As Variant
    Dim R_Foot_90x90x100Arr(1, 50) As Variant
    'v43
    Dim starchCost As Double
    Dim starchArr(1, 6) As Variant
    'v4.1
    Dim toolArr(300, 10) As Variant
    
    Dim m3Arr As Variant
    Dim gaArr As Variant
    Dim daArr As Variant
    Dim com1Arr As Variant
    Dim com2Arr As Variant
    Dim com3Arr As Variant
    Dim com4Arr As Variant
    Dim com5Arr As Variant
    Dim com6Arr As Variant
    Dim com7Arr As Variant
    Dim com8Arr As Variant
    Dim com9Arr As Variant
    Dim com10Arr As Variant
    Dim com11Arr As Variant
    Dim com12Arr As Variant
    Dim com13Arr As Variant
    Dim com14Arr As Variant
    Dim com15Arr As Variant
    Dim com16Arr As Variant
    Dim com17Arr As Variant
    Dim com18Arr As Variant
    Dim com19Arr As Variant
    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")
Set articlesSheet = ThisWorkbook.Sheets("Articles")
Set m3Sheet = ThisWorkbook.Sheets("M3")
Set gapriceSheet = ThisWorkbook.Sheets("Pricelist_GA")
Set dapriceSheet = ThisWorkbook.Sheets("Pricelist_DA")
Set commissionSheet = ThisWorkbook.Sheets("Commissionreport")
Set infoSheet = ThisWorkbook.Sheets("Info")

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngArticles = articlesSheet.Range("A3:DT6000")
Set rngOutArr = articlesSheet.Range("A3:DT6000")
Set rngM3 = m3Sheet.Range("A5:R6002")

Set rngGA = gapriceSheet.Range("A5:N6002")
Set rngDA = dapriceSheet.Range("A5:Y6002")

Set rngCom1 = commissionSheet.Range("A17:K6014")
Set rngCom2 = commissionSheet.Range("M17:M6014")
Set rngCom3 = commissionSheet.Range("O17:O6014")
Set rngCom4 = commissionSheet.Range("Q17:R6014")
Set rngCom5 = commissionSheet.Range("X17:X6014")
Set rngCom6 = commissionSheet.Range("Z17:Z6014")
Set rngCom7 = commissionSheet.Range("AB17:AB6014")
Set rngCom8 = commissionSheet.Range("AD17:AD6014")
Set rngCom9 = commissionSheet.Range("AF17:AF6014")
Set rngCom10 = commissionSheet.Range("AH17:AH6014")
Set rngCom11 = commissionSheet.Range("AJ17:AJ6014")
Set rngCom12 = commissionSheet.Range("AL17:AL6014")
Set rngCom13 = commissionSheet.Range("AN17:AN6014")
Set rngCom14 = commissionSheet.Range("AP17:AP6014")
Set rngCom15 = commissionSheet.Range("AR17:AR6014")
Set rngCom16 = commissionSheet.Range("AT17:AT6014")
Set rngCom17 = commissionSheet.Range("AV17:AV6014")
Set rngCom18 = commissionSheet.Range("AX17:AX6014")
Set rngCom19 = commissionSheet.Range("AZ17:AZ6014")
'END DRAFT2


' Populate arrays
dbArr = rngDB.value
outArr = rngOutArr.value
articlesArr = outArr
m3Arr = rngM3.value
gaArr = rngGA.value
daArr = rngDA.value
com1Arr = rngCom1.value
com2Arr = rngCom2.value
com3Arr = rngCom3.value
com4Arr = rngCom4.value
com5Arr = rngCom5.value
com6Arr = rngCom6.value
com7Arr = rngCom7.value
com8Arr = rngCom8.value
com9Arr = rngCom9.value
com10Arr = rngCom10.value
com11Arr = rngCom11.value
com12Arr = rngCom12.value
com13Arr = rngCom13.value
com14Arr = rngCom14.value
com15Arr = rngCom15.value
com16Arr = rngCom16.value
com17Arr = rngCom17.value
com18Arr = rngCom18.value
com19Arr = rngCom19.value


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyDBrow = i
        Exit For
    Else
    End If
Next i

'Delete Arrays's by defined Subroutine
Generate_DeleteArr arr:=outArr
Generate_DeleteArr arr:=m3Arr
Generate_DeleteArr arr:=gaArr
Generate_DeleteArr arr:=daArr
Generate_DeleteArr arr:=com1Arr
Generate_DeleteArr arr:=com2Arr
Generate_DeleteArr arr:=com3Arr
Generate_DeleteArr arr:=com4Arr
Generate_DeleteArr arr:=com5Arr
Generate_DeleteArr arr:=com6Arr
Generate_DeleteArr arr:=com7Arr
Generate_DeleteArr arr:=com8Arr
Generate_DeleteArr arr:=com9Arr
Generate_DeleteArr arr:=com10Arr
Generate_DeleteArr arr:=com11Arr
Generate_DeleteArr arr:=com12Arr
Generate_DeleteArr arr:=com13Arr
Generate_DeleteArr arr:=com14Arr
Generate_DeleteArr arr:=com15Arr
Generate_DeleteArr arr:=com16Arr
Generate_DeleteArr arr:=com17Arr
Generate_DeleteArr arr:=com18Arr
Generate_DeleteArr arr:=com19Arr




'
' Load Arrays with Data
'

' Customer Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Customers Then
        k = 1
        For k = 1 To 15
            custArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Currency Array
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Exchange_Rate Then
        k = 1
        For k = 1 To 7
            currencyArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(currencyArr) To UBound(currencyArr)
        If currencyArr(i, 5) = compCurrency Then
        compCurrencyVal = currencyArr(i, 7)
        Exit For
        Else
        End If
Next i

' Papers Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Papers Then
        k = 1
        For k = 1 To 25
            papersArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

'Calculate Local Cost / Ton and insert in col 21 in Papers Arr
i = 1
For i = LBound(papersArr) To UBound(papersArr)
    j = 1
    For j = LBound(currencyArr) To UBound(currencyArr)
        If papersArr(i, 9) = currencyArr(j, 5) Then papersArr(i, 21) = papersArr(i, 8) * currencyArr(j, 7)
    Next j
Next i

' Flute Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Flute_table Then
        k = 1
        For k = 1 To 11
            flutesArr(1, k) = dbArr(i, k + 3)
        Next k
        Exit For
    Else
    End If
Next i


' Composition Array
i = 1
j = 1
l = 1
value = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = CB_Composition Then
        k = 1
        For k = 1 To 75
            compArr(j, k) = dbArr(i, k)
            
        Next k
        
        ' Topliner
        k = 1
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 12) Then
                        compArr(j, 49) = papersArr(k, 21) * compArr(j, 13) / 1000
                Exit For
            Else
            End If
        Next k
        
        ' Fluting 1
        k = 1
        value = 0
        ff1 = 0
        Select Case compArr(j, 17)
            Case Is = "A"
                value = flutesArr(1, 1)
            Case Is = "B"
                value = flutesArr(1, 2)
            Case Is = "C"
                value = flutesArr(1, 3)
            Case Is = "D"
                value = flutesArr(1, 4)
            Case Is = "E"
                value = flutesArr(1, 5)
            Case Is = "F"
                value = flutesArr(1, 6)
            Case Is = "Other 1"
                value = flutesArr(1, 7)
            Case Is = "Other 2"
                value = flutesArr(1, 8)
            Case Else
                value = 0
        End Select
        
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 15) Then
                compArr(j, 50) = papersArr(k, 21) * compArr(j, 16) / 1000 * value
                Exit For
            Else
            End If
        Next k
        ff1 = value
        
        ' Midliner 1
        k = 1
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 19) Then
                compArr(j, 51) = papersArr(k, 21) * compArr(j, 20) / 1000
                Exit For
            Else
            End If
        Next k

        ' Fluting 2
        k = 1
        value = 0
        ff2 = 0
        Select Case compArr(j, 24)
            Case Is = "A"
                value = flutesArr(1, 1)
            Case Is = "B"
                value = flutesArr(1, 2)
            Case Is = "C"
                value = flutesArr(1, 3)
            Case Is = "D"
                value = flutesArr(1, 4)
            Case Is = "E"
                value = flutesArr(1, 5)
            Case Is = "F"
                value = flutesArr(1, 6)
            Case Is = "Other 1"
                value = flutesArr(1, 7)
            Case Is = "Other 2"
                value = flutesArr(1, 8)
            Case Else
                value = 0
        End Select
        
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 22) Then
                compArr(j, 52) = papersArr(k, 21) * compArr(j, 23) / 1000 * value
                Exit For
            Else
            End If
        Next k
        ff2 = value
        
        ' Midliner 2
        k = 1
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 26) Then
                compArr(j, 53) = papersArr(k, 21) * compArr(j, 27) / 1000
                Exit For
            Else
            End If
        Next k
        
        ' Fluting 3
        k = 1
        value = 0
        ff3 = 0
        Select Case compArr(j, 31)
            Case Is = "A"
                value = flutesArr(1, 1)
            Case Is = "B"
                value = flutesArr(1, 2)
            Case Is = "C"
                value = flutesArr(1, 3)
            Case Is = "D"
                value = flutesArr(1, 4)
            Case Is = "E"
                value = flutesArr(1, 5)
            Case Is = "F"
                value = flutesArr(1, 6)
            Case Is = "Other 1"
                value = flutesArr(1, 7)
            Case Is = "Other 2"
                value = flutesArr(1, 8)
            Case Else
                value = 0
        End Select
        
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 29) Then
                compArr(j, 54) = papersArr(k, 21) * compArr(j, 30) / 1000 * value
                Exit For
            Else
            End If
        Next k
        ff3 = value
        
        ' Bottom Liner
        k = 1
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 33) Then
                compArr(j, 55) = papersArr(k, 21) * compArr(j, 34) / 1000
                Exit For
            Else
            End If
        Next k
        
        ' Starch
        k = 1
        For k = 1 To 300
            If papersArr(k, 4) = compArr(j, 36) Then
                compArr(j, 56) = papersArr(k, 21) * compArr(j, 37) / 1000
                Exit For
            Else
            End If
        Next k
               
        ' Total Cost excl Waste
        compArr(j, 57) = compArr(j, 49) + compArr(j, 50) + compArr(j, 51) + compArr(j, 52) + compArr(j, 53) + compArr(j, 54) _
                        + compArr(j, 55) + compArr(j, 56)

        ' Total Weight excl Waste
        compArr(j, 58) = compArr(j, 13) + (compArr(j, 16) * ff1) + compArr(j, 20) + (compArr(j, 23) * ff2) + compArr(j, 27) + _
                            (compArr(j, 30) * ff3) + compArr(j, 34) + compArr(j, 37)
                            
                            
        'v4.8
        ' Calculate weights per papertype and insert into array
        compArr(j, 59) = 0
        compArr(j, 60) = 0
        compArr(j, 61) = 0
        compArr(j, 62) = 0
        compArr(j, 63) = 0
        compArr(j, 64) = 0
        compArr(j, 65) = 0
        compArr(j, 66) = 0
        compArr(j, 67) = 0
        compArr(j, 68) = 0
        compArr(j, 69) = 0
        compArr(j, 70) = 0
        compArr(j, 71) = 0
    
        m = 1
        For m = 1 To 7

                    'Topliner
                    If m = 1 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + compArr(j, 13)
                                If papersArr(k, 4) = compArr(j, 12) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + compArr(j, 13)
                        Next k
                    Else
                    End If
                    
                    'Fluting 1
                    If m = 2 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + (compArr(j, 16) * ff1)
                                If papersArr(k, 4) = compArr(j, 15) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + (compArr(j, 16) * ff1)
                        Next k
                    Else
                    End If
                    
                    'MidLiner 1
                    If m = 3 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + compArr(j, 20)
                                If papersArr(k, 4) = compArr(j, 19) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + compArr(j, 20)
                        Next k
                    Else
                    End If
                    
                    'Fluting 2
                    If m = 4 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + (compArr(j, 23) * ff2)
                                If papersArr(k, 4) = compArr(j, 22) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + (compArr(j, 23) * ff2)
                        Next k
                    Else
                    End If
                    
                    'MidLiner 2
                    If m = 5 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + compArr(j, 27)
                                If papersArr(k, 4) = compArr(j, 26) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + compArr(j, 27)
                        Next k
                    Else
                    End If
                    
                    'Fluting 3
                    If m = 6 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + (compArr(j, 30) * ff3)
                                If papersArr(k, 4) = compArr(j, 29) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + (compArr(j, 30) * ff3)
                        Next k
                    Else
                    End If
                    
                    'BottomLiner
                    If m = 7 Then
                        k = 1
                        For k = 1 To 300
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Kraftliner" Then compArr(j, 59) = compArr(j, 59) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Kraft Top Liner" Then compArr(j, 60) = compArr(j, 60) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Recycled Liner High" Then compArr(j, 61) = compArr(j, 61) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Recycled Liner Mid" Then compArr(j, 62) = compArr(j, 62) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Recycled Liner Low" Then compArr(j, 63) = compArr(j, 63) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "White Recycled Liner" Then compArr(j, 64) = compArr(j, 64) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "White Top Recycled Liner" Then compArr(j, 65) = compArr(j, 65) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "White Kraftliner" Then compArr(j, 66) = compArr(j, 66) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Recycled Fluting High" Then compArr(j, 67) = compArr(j, 67) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Recycled Fluting Mid" Then compArr(j, 68) = compArr(j, 68) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Recycled Fluting Low" Then compArr(j, 69) = compArr(j, 69) + compArr(j, 34)
                                If papersArr(k, 4) = compArr(j, 33) And papersArr(k, 6) = "Semichemical Fluting" Then compArr(j, 70) = compArr(j, 70) + compArr(j, 37)
                        Next k
                    Else
                    End If
                       
        Next m
        j = j + 1
    Else
    End If
Next i

' Purchased Sheets Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Purchased_Sheets Then
        k = 1
        For k = 1 To 20
            cbArr(j, k) = dbArr(i, k)
        Next k
        
        k = 1
        purchasecost = 0
        palletcost = 0
        distcost = 0
        For k = 1 To 300
            If cbArr(j, 10) = currencyArr(k, 5) Then
                purchasecost = cbArr(j, 9) * currencyArr(k, 7)
            Else
            End If
            
            If cbArr(j, 12) = currencyArr(k, 5) Then
                palletcost = cbArr(j, 11) * currencyArr(k, 7)
            Else
            End If
            
            If cbArr(j, 14) = currencyArr(k, 5) Then
                distcost = cbArr(j, 13) * currencyArr(k, 7)
            Else
            End If
        Next k
        cbArr(j, 15) = purchasecost + palletcost + distcost 'Cost/1000m2
        
        l = 1
        cbArr(j, 16) = 0
        For l = LBound(compArr) To UBound(compArr)
            If cbArr(j, 6) = compArr(l, 4) Then
            cbArr(j, 16) = compArr(l, 58) 'Weight/1000m2
            Else
            End If
        Next l
        
        j = j + 1
    Else
    End If
Next i

' Other Boards Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Other_Boards Then
        k = 1
        For k = 1 To 25
            obArr(j, k) = dbArr(i, k)
        Next k
        
        k = 1
        purchasecost = 0
        palletcost = 0
        distcost = 0
        For k = 1 To 300
            If obArr(j, 11) = currencyArr(k, 5) Then
                purchasecost = obArr(j, 10) * currencyArr(k, 7)
            Else
            End If
            
            If obArr(j, 13) = currencyArr(k, 5) Then
                palletcost = obArr(j, 12) * currencyArr(k, 7)
            Else
            End If
            
            If obArr(j, 15) = currencyArr(k, 5) Then
                distcost = obArr(j, 14) * currencyArr(k, 7)
            Else
            End If
        Next k
        obArr(j, 18) = purchasecost + palletcost + distcost
        
        j = j + 1
    Else
    End If
Next i

' Joined Boards Array
i = 1
j = 1
jb_gluingcost = 0
jb_b1cost = 0
jb_b2cost = 0
jb_b3cost = 0
jb_b1weight = 0
jb_b2weight = 0
jb_b3weight = 0
For i = 1 To firstemptyDBrow
jb_gluingcost = 0
jb_b1cost = 0
jb_b2cost = 0
jb_b3cost = 0
jb_b1weight = 0
jb_b2weight = 0
jb_b3weight = 0
    If dbArr(i, 1) = Joined_Boards Then
        k = 1
        For k = 1 To 25
            jbArr(j, k) = dbArr(i, k)
        Next k
        
        'Board 1
        If jbArr(j, 9) = 1 Then
            k = 1
            For k = LBound(compArr) To UBound(compArr)
            If Right(jbArr(j, 8), Len(jbArr(j, 8)) - 2) = compArr(k, 4) Then
                jb_b1cost = compArr(k, 57)
                jb_b1weight = compArr(k, 58) ' Weight/1000m2
            Else
            End If
            Next k
        End If
        
        If jbArr(j, 9) = 2 Then
            k = 1
            For k = LBound(cbArr) To UBound(cbArr)
            If Right(jbArr(j, 8), Len(jbArr(j, 8)) - 2) = cbArr(k, 4) Then
                jb_b1cost = cbArr(k, 15)
                jb_b1weight = cbArr(k, 16)
            Else
            End If
            Next k
        End If
        
        If jbArr(j, 9) = 3 Then
            k = 1
            For k = LBound(obArr) To UBound(obArr)
            If Right(jbArr(j, 8), Len(jbArr(j, 8)) - 2) = obArr(k, 4) Then
                jb_b1cost = obArr(k, 18)
                jb_b1weight = obArr(k, 17)
            Else
            End If
            Next k
        End If
        
        'Board 2
        If jbArr(j, 11) = 1 Then
            k = 1
            For k = LBound(compArr) To UBound(compArr)
            If Right(jbArr(j, 10), Len(jbArr(j, 10)) - 2) = compArr(k, 4) Then
                jb_b2cost = compArr(k, 57)
                jb_b2weight = compArr(k, 58) ' Weight/1000m2
            Else
            End If
            Next k
        End If
        
        If jbArr(j, 11) = 2 Then
            k = 1
            For k = LBound(cbArr) To UBound(cbArr)
            If Right(jbArr(j, 10), Len(jbArr(j, 10)) - 2) = cbArr(k, 4) Then
                jb_b2cost = cbArr(k, 15)
                jb_b2weight = cbArr(k, 16)
            Else
            End If
            Next k
        End If
        
        If jbArr(j, 11) = 3 Then
            k = 1
            For k = LBound(obArr) To UBound(obArr)
            If Right(jbArr(j, 10), Len(jbArr(j, 10)) - 2) = obArr(k, 4) Then
                jb_b2cost = obArr(k, 18)
                jb_b2weight = obArr(k, 17)
            Else
            End If
            Next k
        End If
        
        'Board 3
        If jbArr(j, 13) = 1 Then
            k = 1
            For k = LBound(compArr) To UBound(compArr)
            If Right(jbArr(j, 12), Len(jbArr(j, 12)) - 2) = compArr(k, 4) Then
                jb_b3cost = compArr(k, 57)
                jb_b3weight = compArr(k, 58) ' Weight/1000m2
            Else
            End If
            Next k
        End If
        
        If jbArr(j, 13) = 2 Then
            k = 1
            For k = LBound(cbArr) To UBound(cbArr)
            If Right(jbArr(j, 12), Len(jbArr(j, 12)) - 2) = cbArr(k, 4) Then
                jb_b3cost = cbArr(k, 15)
                jb_b3weight = cbArr(k, 16)
            Else
            End If
            Next k
        End If
        
        If jbArr(j, 13) = 3 Then
            k = 1
            For k = LBound(obArr) To UBound(obArr)
            If Right(jbArr(j, 12), Len(jbArr(j, 12)) - 2) = obArr(k, 4) Then
                jb_b3cost = obArr(k, 18)
                jb_b3weight = obArr(k, 17)
            Else
            End If
            Next k
        End If
        
        ' Get number of gluings
        count = 0
        If jbArr(j, 8) = "" Then
        Else
            count = count + 1
        End If
        
        If jbArr(j, 10) = "" Then
        Else
            count = count + 1
        End If
        
        If jbArr(j, 12) = "" Then
        Else
            count = count + 1
        End If
        
        jb_gluingcost = jbArr(j, 14) * (count - 1)
        jbArr(j, 16) = jb_b1cost + jb_b2cost + jb_b3cost + jb_gluingcost 'Cost / 1000m2
        jbArr(j, 17) = jb_b1weight + jb_b2weight + jb_b3weight 'Weight / 1000m2
        j = j + 1
    Else
    End If
Next i

' Corrugation Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Corrugation_cost Then
        k = 1
        For k = 1 To 10
            corrArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Conversion Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Converters_A Then
        k = 1
        For k = 1 To 65
            convArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Packaging Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Packaging_Cost Then
        k = 1
        For k = 1 To 10
            packArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Pallet Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Pallet_cost Then
        k = 1
        For k = 1 To 10
            pallArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Transport Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Transport_cost Then
        k = 1
        For k = 1 To 15
            transportArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

'v4.1
' Tool Array
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Tool_cost Then
        k = 1
        For k = 1 To 10
            toolArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i

' Foot 180x90 Array
i = 1
j = 1
weight180 = 0
mtrl180 = 0
prod180 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Foot_180x90 Then
        k = 1
        For k = 1 To 50
            Foot_180x90Arr(j, k) = dbArr(i, k)
        Next k
        weight180 = Foot_180x90Arr(j, 33)
        mtrl180 = Foot_180x90Arr(j, 27)
        prod180 = Foot_180x90Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Foot 140x90 Array
i = 1
j = 1
weight140 = 0
mtrl140 = 0
prod140 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Foot_140x90 Then
        k = 1
        For k = 1 To 50
            Foot_140x90Arr(j, k) = dbArr(i, k)
        Next k
        weight140 = Foot_140x90Arr(j, 33)
        mtrl140 = Foot_140x90Arr(j, 27)
        prod140 = Foot_140x90Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Foot 90x90 Array
i = 1
j = 1
weight90 = 0
mtrl90 = 0
prod90 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Foot_90x90 Then
        k = 1
        For k = 1 To 50
            Foot_90x90Arr(j, k) = dbArr(i, k)
        Next k
        weight90 = Foot_90x90Arr(j, 33)
        mtrl90 = Foot_90x90Arr(j, 27)
        prod90 = Foot_90x90Arr(j, 28)
        Exit For
    Else
    End If
Next i


'DRAFT2
' Foot 180x90x100 Array
i = 1
j = 1
weight180x100 = 0
mtrl180x100 = 0
prod180x100 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Foot_180x90x100 Then
        k = 1
        For k = 1 To 50
            Foot_180x90x100Arr(j, k) = dbArr(i, k)
        Next k
        weight180x100 = Foot_180x90x100Arr(j, 33)
        mtrl180x100 = Foot_180x90x100Arr(j, 27)
        prod180x100 = Foot_180x90x100Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Foot 140x90100 Array
i = 1
j = 1
weight140x100 = 0
mtrl140x100 = 0
prod140x100 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Foot_140x90x100 Then
        k = 1
        For k = 1 To 50
            Foot_140x90x100Arr(j, k) = dbArr(i, k)
        Next k
        weight140x100 = Foot_140x90x100Arr(j, 33)
        mtrl140x100 = Foot_140x90x100Arr(j, 27)
        prod140x100 = Foot_140x90x100Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Foot 90x90 Array
i = 1
j = 1
weight90x100 = 0
mtrl90x100 = 0
prod90x100 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Foot_90x90x100 Then
        k = 1
        For k = 1 To 50
            Foot_90x90x100Arr(j, k) = dbArr(i, k)
        Next k
        weight90x100 = Foot_90x90x100Arr(j, 33)
        mtrl90x100 = Foot_90x90x100Arr(j, 27)
        prod90x100 = Foot_90x90x100Arr(j, 28)
        Exit For
    Else
    End If
Next i
'END DRAFT2




'v43
' Replacement Foot 180x90 Array
i = 1
j = 1
R_weight180 = 0
R_mtrl180 = 0
R_prod180 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Replacement_Foot_180x90 Then
        k = 1
        For k = 1 To 50
            R_Foot_180x90Arr(j, k) = dbArr(i, k)
        Next k
        R_weight180 = R_Foot_180x90Arr(j, 33)
        R_mtrl180 = R_Foot_180x90Arr(j, 27)
        R_prod180 = R_Foot_180x90Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Replacement Foot 140x90 Array
i = 1
j = 1
R_weight140 = 0
R_mtrl140 = 0
R_prod140 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Replacement_Foot_140x90 Then
        k = 1
        For k = 1 To 50
            R_Foot_140x90Arr(j, k) = dbArr(i, k)
        Next k
        R_weight140 = R_Foot_140x90Arr(j, 33)
        R_mtrl140 = R_Foot_140x90Arr(j, 27)
        R_prod140 = R_Foot_140x90Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Replacement Foot 90x90 Array
i = 1
j = 1
R_weight90 = 0
R_mtrl90 = 0
R_prod90 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Replacement_Foot_90x90 Then
        k = 1
        For k = 1 To 50
            R_Foot_90x90Arr(j, k) = dbArr(i, k)
        Next k
        R_weight90 = R_Foot_90x90Arr(j, 33)
        R_mtrl90 = R_Foot_90x90Arr(j, 27)
        R_prod90 = R_Foot_90x90Arr(j, 28)
        Exit For
    Else
    End If
Next i



' Replacement Foot 180x90x100 Array
i = 1
j = 1
R_weight180x100 = 0
R_mtrl180x100 = 0
R_prod180x100 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Replacement_Foot_180x90x100 Then
        k = 1
        For k = 1 To 50
            R_Foot_180x90x100Arr(j, k) = dbArr(i, k)
        Next k
        R_weight180x100 = R_Foot_180x90x100Arr(j, 33)
        R_mtrl180x100 = R_Foot_180x90x100Arr(j, 27)
        R_prod180x100 = R_Foot_180x90x100Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Replacement Foot 140x90100 Array
i = 1
j = 1
R_weight140x100 = 0
R_mtrl140x100 = 0
R_prod140x100 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Replacement_Foot_140x90x100 Then
        k = 1
        For k = 1 To 50
            R_Foot_140x90x100Arr(j, k) = dbArr(i, k)
        Next k
        R_weight140x100 = R_Foot_140x90x100Arr(j, 33)
        R_mtrl140x100 = R_Foot_140x90x100Arr(j, 27)
        R_prod140x100 = R_Foot_140x90x100Arr(j, 28)
        Exit For
    Else
    End If
Next i

' Replacement Foot 90x90 Array
i = 1
j = 1
R_weight90x100 = 0
R_mtrl90x100 = 0
R_prod90x100 = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Replacement_Foot_90x90x100 Then
        k = 1
        For k = 1 To 50
            R_Foot_90x90x100Arr(j, k) = dbArr(i, k)
        Next k
        R_weight90x100 = R_Foot_90x90x100Arr(j, 33)
        R_mtrl90x100 = R_Foot_90x90x100Arr(j, 27)
        R_prod90x100 = R_Foot_90x90x100Arr(j, 28)
        Exit For
    Else
    End If
Next i
'v43


' Profit
i = 1
j = 1
profit_level = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = profit Then
        profit_level = dbArr(i, 4)
        Exit For
    Else
    End If
Next i

' Other Cost
i = 1
j = 1
otherCost = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Other_cost Then
        otherCost = dbArr(i, 4)
        Exit For
    Else
    End If
Next i


' Contracted Volume
i = 1
j = 1
contractvolume = 0
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Contracted_Volume Then
        contractvolume = dbArr(i, 4)
        Exit For
    Else
    End If
Next i

' Discount
i = 1
j = 1
For i = 1 To firstemptyDBrow
    If dbArr(i, 1) = Volume_Discounts Then
        k = 1
        For k = 1 To 20
            discountArr(k, 1) = dbArr(i, k)
        Next k
        Exit For
    Else
    End If
Next i

discount = 0
Select Case contractvolume
        Case Is = 2
            discount = discountArr(4, 1)
        Case Is = 4
            discount = discountArr(5, 1)
        Case Is = 6
            discount = discountArr(6, 1)
        Case Is = 8
            discount = discountArr(7, 1)
        Case Is = 10
            discount = discountArr(8, 1)
        Case Is = 15
            discount = discountArr(9, 1)
        Case Is = 20
            discount = discountArr(10, 1)
        Case Is = 25
            discount = discountArr(11, 1)
        Case Is = 30
            discount = discountArr(12, 1)
        Case Is = 35
            discount = discountArr(13, 1)
        Case Is = 40
            discount = discountArr(14, 1)
        Case Is = 50
            discount = discountArr(15, 1)
        Case Is = 60
            discount = discountArr(16, 1)
        Case Is = 80
            discount = discountArr(17, 1)
        Case Else
            discount = discountArr(18, 1)
End Select

'
' Start Populating the Out Array and the Articles Sheet
'

i = 1
j = 1
For i = firstemptyDBrow To LBound(dbArr) Step -1
If dbArr(i, 1) = Item Then
'
'

' Article Info
outArr(j, 1) = dbArr(i, 4)  'UID
outArr(j, 2) = dbArr(i, 5)  'Creation Date
outArr(j, 3) = dbArr(i, 6)  'Changed Date
outArr(j, 4) = dbArr(i, 7)  'IKEA C Art No
outArr(j, 5) = dbArr(i, 8)  'Article Name
outArr(j, 6) = dbArr(i, 9)  'LWH
outArr(j, 7) = dbArr(i, 12) 'Article Group Name
outArr(j, 8) = dbArr(i, 14)  'IKEA Prod Art No
outArr(j, 9) = dbArr(i, 15) 'IKEA Sup Name
outArr(j, 10) = dbArr(i, 16)    'IKEA Sup Ref
outArr(j, 11) = dbArr(i, 17)    'NPS Ref
outArr(j, 12) = dbArr(i, 18)    'Description
outArr(j, 13) = dbArr(i, 24)    'Printing
outArr(j, 14) = dbArr(i, 22)    'Color
outArr(j, 15) = dbArr(i, 19)    'Number of 180x90
outArr(j, 16) = dbArr(i, 20)    'Number of 140x90
outArr(j, 17) = dbArr(i, 21)    'Number of 140x90
outArr(j, 18) = dbArr(i, 25)    'Yearly Qty
outArr(j, 19) = dbArr(i, 26)    'AOQ
outArr(j, 20) = dbArr(i, 55)    'Board Selection
outArr(j, 21) = ""    'Purchased Sheet
outArr(j, 22) = ""    'Other Board
outArr(j, 23) = ""    'Joined Board
outArr(j, 24) = dbArr(i, 28)    'Construction
outArr(j, 25) = dbArr(i, 40)    'Net size
outArr(j, 26) = dbArr(i, 42)    'Weight
outArr(j, 27) = ""    'MSS Status

' Composition
    outArr(j, 28) = 0
    outArr(j, 32) = 0
    outArr(j, 33) = 0
    outArr(j, 34) = 0
    outArr(j, 35) = 0
    outArr(j, 36) = 0
    outArr(j, 37) = 0
    outArr(j, 38) = 0
    outArr(j, 39) = 0
    outArr(j, 40) = 0
    outArr(j, 41) = 0
    outArr(j, 42) = 0
    outArr(j, 43) = 0
    outArr(j, 44) = 0
If Left(dbArr(i, 55), 1) = 1 Then
k = 1
For k = LBound(compArr) To UBound(compArr)
If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = compArr(k, 4) Then
    If dbArr(i, 42) = "" Then
            'Removed Waste 4.2
            outArr(j, 28) = compArr(k, 58) * dbArr(i, 40) 'Net Weight / 1000pcs
    Else
            outArr(j, 28) = dbArr(i, 42) 'Override if user input other weight manually
    End If
    outArr(j, 29) = compArr(k, 10)   'MSS Status
    outArr(j, 30) = compArr(k, 5)   'IKEA Quality
    outArr(j, 31) = compArr(k, 8)   'Color Combination
    outArr(j, 32) = compArr(k, 49) + (compArr(k, 49) * dbArr(i, 43))  'Topliner inc Waste
    outArr(j, 33) = compArr(k, 50) + (compArr(k, 50) * dbArr(i, 43))  'Flute 1 inc Waste
    outArr(j, 34) = compArr(k, 51) + (compArr(k, 51) * dbArr(i, 43)) 'Mid 1 Liner inc Waste
    outArr(j, 35) = compArr(k, 52) + (compArr(k, 52) * dbArr(i, 43))   'Flute 2 inc Waste
    outArr(j, 36) = compArr(k, 53) + (compArr(k, 53) * dbArr(i, 43))   'Mid 2 inc Waste
    outArr(j, 37) = compArr(k, 54) + (compArr(k, 54) * dbArr(i, 43))   'Flute 3 inc Waste
    outArr(j, 38) = compArr(k, 55) + (compArr(k, 55) * dbArr(i, 43))  'Bottom Liner inc Waste
    outArr(j, 39) = compArr(k, 56) + (compArr(k, 56) * dbArr(i, 44))  'Starch inc Waste
    outArr(j, 40) = outArr(j, 32) + outArr(j, 33) + outArr(j, 34) + outArr(j, 35) + outArr(j, 36) + outArr(j, 37) _
                    + outArr(j, 38) + outArr(j, 39) + outArr(j, 40) 'Material Cost inc Waste 1000m2 - Local Currency
    outArr(j, 41) = outArr(j, 40) / compCurrencyVal   'Comp Currency
    
    If dbArr(i, 40) = 0 Then
    outArr(j, 42) = 0
    Else
    outArr(j, 42) = outArr(j, 40) * dbArr(i, 40)    'Material Cost inc Waste 1000 PCS - Local Currency
    End If
    
    outArr(j, 43) = outArr(j, 42) / compCurrencyVal 'Material Cost inc Waste 1000 PCS - Comp Currency
    
    'Insert paper weights
    m = 59
    For m = 59 To 70
    ' outArr 110 to 121
    outArr(j, m + 51) = (compArr(k, m) * dbArr(i, 40)) + (compArr(k, m) * dbArr(i, 40) * dbArr(i, 43))
    Next m
    
Else
End If
Next k




Else
End If

' Purchased Sheet

outArr(j, 49) = 0
outArr(j, 50) = 0
outArr(j, 51) = 0
outArr(j, 52) = 0
If Left(dbArr(i, 55), 1) = 2 Then

k = 1
For k = LBound(cbArr) To UBound(cbArr)
If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = cbArr(k, 4) Then

    l = 1
    For l = LBound(compArr) To UBound(compArr)
        If compArr(l, 4) = cbArr(k, 6) Then
            If dbArr(i, 42) = "" Then
                'Removed waste 4.2
                outArr(j, 44) = compArr(l, 58) * dbArr(i, 40) 'Net Weight / 1000pcs
            Else
                outArr(j, 44) = dbArr(i, 42) 'Override if user input weight manually
            End If
            outArr(j, 45) = compArr(l, 10) 'MSS Status
            outArr(j, 46) = compArr(l, 4) 'Composition
            outArr(j, 47) = compArr(l, 8) 'Color
            Exit For
        Else
        End If
    Next l
    outArr(j, 48) = cbArr(k, 4) 'Board Name
    outArr(j, 49) = cbArr(k, 15) + (cbArr(k, 15) * dbArr(i, 45)) 'Material Cost inc Waste 1000m2 - Local Currency
    outArr(j, 50) = outArr(j, 49) / compCurrencyVal 'Comp Currency
    outArr(j, 51) = outArr(j, 49) * dbArr(i, 40) 'Material Cost inc Waste 1000 PCS - Local Currency
    outArr(j, 52) = outArr(j, 51) / compCurrencyVal 'Comp Currency
    
    'Insert paper weights
    m = 59
    For m = 59 To 70
    ' outArr 110 to 121
    outArr(j, m + 51) = (compArr(l, m) * dbArr(i, 40)) + (compArr(l, m) * dbArr(i, 40) * dbArr(i, 43))
    Next m
    
Else
End If
Next k

Else
End If

' OtherBoards
outArr(j, 53) = 0
outArr(j, 56) = 0
outArr(j, 57) = 0
outArr(j, 58) = 0
outArr(j, 59) = 0
If Left(dbArr(i, 55), 1) = 3 Then
k = 1
For k = LBound(obArr) To UBound(obArr)
If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = obArr(k, 4) Then
    If dbArr(i, 42) = "" Then
        'Removed waste v4.2
        outArr(j, 53) = obArr(k, 17) * dbArr(i, 40) 'Net Weight / 1000pcs
    Else
        outArr(j, 53) = dbArr(i, 42) 'Override if user input weight manually
    End If
    outArr(j, 54) = obArr(k, 16) 'MSS Status
    outArr(j, 55) = obArr(k, 4) 'Board Name
    outArr(j, 56) = obArr(k, 18) + (obArr(k, 18) * dbArr(i, 45)) 'Material Cost inc Waste 1000m2 - Local Currency
    outArr(j, 57) = outArr(j, 56) / compCurrencyVal 'Comp Currency
    outArr(j, 58) = outArr(j, 56) * dbArr(i, 40) 'Material Cost inc Waste 1000 PCS - Local Currency
    outArr(j, 59) = outArr(j, 58) / compCurrencyVal 'Comp Currency
    
Else
End If
Next k

Else
End If


' Joined Boards
outArr(j, 60) = 0
outArr(j, 63) = 0
outArr(j, 64) = 0
outArr(j, 65) = 0
outArr(j, 66) = 0

If Left(dbArr(i, 55), 1) = 4 Then
k = 1
For k = LBound(jbArr) To UBound(jbArr)
If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = jbArr(k, 4) Then
    
    If dbArr(i, 42) = "" Then
        'Removed waste v4.2
        outArr(j, 60) = jbArr(k, 17) * dbArr(i, 40) 'Net Weight / 1000pcs
    Else
        outArr(j, 60) = dbArr(i, 42) 'Override if user input weight manually
    End If
    outArr(j, 61) = jbArr(k, 7) 'MSS Status
    outArr(j, 62) = jbArr(k, 4) 'Board Name
    outArr(j, 63) = jbArr(k, 16) + (jbArr(k, 16) * dbArr(i, 45)) 'Material Cost inc Waste 1000m2 - Local Currency
    outArr(j, 64) = outArr(j, 63) / compCurrencyVal 'Comp Currency
    outArr(j, 65) = outArr(j, 63) * dbArr(i, 40) 'Material Cost inc Waste 1000 PCS - Local Currency
    outArr(j, 66) = outArr(j, 65) / compCurrencyVal 'Comp Currency
    
Else
End If
Next k

Else
End If

'Corrugation
'Add corrugation cost if Joined Sheets contins inhouse boards
outArr(j, 67) = 0
outArr(j, 68) = 0
'name = ""
cost = 0
'count = 0
If Left(dbArr(i, 55), 1) = 4 Then
    ' name = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2)
    
    'Board 1
    l = 1
    For l = LBound(jbArr) To UBound(jbArr)
        If jbArr(l, 4) = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) And Not jbArr(l, 9) = "" Then
            m = 1
            For m = LBound(compArr) To UBound(compArr)
                If jbArr(l, 9) = 1 And Right(jbArr(l, 8), Len(jbArr(l, 8)) - 2) = compArr(m, 4) Then
                    cost = cost + corrArr(m, 7)
                Else
                End If
            Next m
 
        Else
        End If
    Next l
    
    'Board 2
    l = 1
    For l = LBound(jbArr) To UBound(jbArr)
        If jbArr(l, 4) = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) And Not jbArr(l, 11) = "" Then
            m = 1
            For m = LBound(compArr) To UBound(compArr)
                If jbArr(l, 11) = 1 And Right(jbArr(l, 10), Len(jbArr(l, 10)) - 2) = compArr(m, 4) Then
                    cost = cost + corrArr(m, 7)
                Else
                End If
            Next m
 
        Else
        End If
    Next l
    
    'Board 3
    l = 1
    For l = LBound(jbArr) To UBound(jbArr)
        If jbArr(l, 4) = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) And Not jbArr(l, 13) = "" Then
            m = 1
            For m = LBound(compArr) To UBound(compArr)
                If jbArr(l, 13) = 1 And Right(jbArr(l, 12), Len(jbArr(l, 12)) - 2) = compArr(m, 4) Then
                    cost = cost + corrArr(m, 7)
                Else
                End If
            Next m
 
        Else
        End If
    Next l
     
    outArr(j, 67) = cost * dbArr(i, 40)    'Material Cost inc Waste 1000 PCS - Local Currency
    outArr(j, 68) = outArr(j, 67) / compCurrencyVal 'Material Cost inc Waste 1000 PCS - Comp Currency
Else
End If


' If Inhouse produced only
If Left(dbArr(i, 55), 1) = 1 Then
k = 1
For k = LBound(corrArr) To UBound(corrArr)
    If corrArr(k, 6) = dbArr(i, 27) Then
        outArr(j, 67) = corrArr(k, 7) * dbArr(i, 40)    'Material Cost inc Waste 1000 PCS - Local Currency
        outArr(j, 68) = outArr(j, 67) / compCurrencyVal 'Material Cost inc Waste 1000 PCS - Comp Currency
    Else
    End If
Next k
Else
End If

' Conversion
k = 1
cost = 0
conv_discount = 0
conv1cost = 0
conv2cost = 0
conv3cost = 0
conv4cost = 0
For k = LBound(convArr) To UBound(convArr)
    If dbArr(i, 29) = convArr(k, 4) Then
        Select Case dbArr(i, 30)
        Case Is = 1
            conv1cost = convArr(k, 23)
        Case Is = 2
            conv1cost = convArr(k, 24)
        Case Is = 3
            conv1cost = convArr(k, 25)
        Case Is = 4
            conv1cost = convArr(k, 26)
        Case Is = 5
            conv1cost = convArr(k, 27)
        Case Is = 6
            conv1cost = convArr(k, 28)
        Case Is = 7
            conv1cost = convArr(k, 29)
        Case Is = 8
            conv1cost = convArr(k, 30)
        Case Is = 9
            conv1cost = convArr(k, 31)
        Case Is = 10
            conv1cost = convArr(k, 32)
        Case Is = ">10"
            conv1cost = convArr(k, 33)
        Case Is = ">15"
            conv1cost = convArr(k, 34)
        Case Is = ">20"
            conv1cost = convArr(k, 35)
        Case Else
            
End Select
Else
End If
Next k

k = 1
For k = LBound(convArr) To UBound(convArr)
    If dbArr(i, 31) = convArr(k, 4) Then
        Select Case dbArr(i, 32)
        Case Is = 1
            conv2cost = convArr(k, 23)
        Case Is = 2
            conv2cost = convArr(k, 24)
        Case Is = 3
            conv2cost = convArr(k, 25)
        Case Is = 4
            conv2cost = convArr(k, 26)
        Case Is = 5
            conv2cost = convArr(k, 27)
        Case Is = 6
            conv2cost = convArr(k, 28)
        Case Is = 7
            conv2cost = convArr(k, 29)
        Case Is = 8
            conv2cost = convArr(k, 30)
        Case Is = 9
            conv2cost = convArr(k, 31)
        Case Is = 10
            conv2cost = convArr(k, 32)
        Case Is = ">10"
            conv2cost = convArr(k, 33)
        Case Is = ">15"
            conv2cost = convArr(k, 34)
        Case Is = ">20"
            conv2cost = convArr(k, 35)
        Case Else
End Select
Else
End If
Next k

k = 1
For k = LBound(convArr) To UBound(convArr)
    If dbArr(i, 33) = convArr(k, 4) Then
        Select Case dbArr(i, 34)
        Case Is = 1
            conv3cost = convArr(k, 23)
        Case Is = 2
            conv3cost = convArr(k, 24)
        Case Is = 3
            conv3cost = convArr(k, 25)
        Case Is = 4
            conv3cost = convArr(k, 26)
        Case Is = 5
            conv3cost = convArr(k, 27)
        Case Is = 6
            conv3cost = convArr(k, 28)
        Case Is = 7
            conv3cost = convArr(k, 29)
        Case Is = 8
            conv3cost = convArr(k, 30)
        Case Is = 9
            conv3cost = convArr(k, 31)
        Case Is = 10
            conv3cost = convArr(k, 32)
        Case Is = ">10"
            conv3cost = convArr(k, 33)
        Case Is = ">15"
            conv3cost = convArr(k, 34)
        Case Is = ">20"
            conv3cost = convArr(k, 35)
        Case Else
End Select
Else
End If
Next k

k = 1
For k = LBound(convArr) To UBound(convArr)
    If dbArr(i, 35) = convArr(k, 4) Then
        Select Case dbArr(i, 36)
        Case Is = 1
            conv4cost = convArr(k, 23)
        Case Is = 2
            conv4cost = convArr(k, 24)
        Case Is = 3
            conv4cost = convArr(k, 25)
        Case Is = 4
            conv4cost = convArr(k, 26)
        Case Is = 5
            conv4cost = convArr(k, 27)
        Case Is = 6
            conv4cost = convArr(k, 28)
        Case Is = 7
            conv4cost = convArr(k, 29)
        Case Is = 8
            conv4cost = convArr(k, 30)
        Case Is = 9
            conv4cost = convArr(k, 31)
        Case Is = 10
            conv4cost = convArr(k, 32)
        Case Is = ">10"
            conv4cost = convArr(k, 33)
        Case Is = ">15"
            conv4cost = convArr(k, 34)
        Case Is = ">20"
            conv4cost = convArr(k, 35)
        Case Else
End Select
Else
End If
Next k

discountColNo = 41
Select Case dbArr(i, 26)
        Case Is < 100
            discountColNo = 36
        Case Is < 500
             discountColNo = 37
        Case Is < 1000
             discountColNo = 38
        Case Is < 1500
             discountColNo = 39
        Case Is < 2500
             discountColNo = 40
        Case Is < 3500
             discountColNo = 41
        Case Is < 4500
             discountColNo = 42
        Case Is < 7000
             discountColNo = 43
        Case Is < 9500
             discountColNo = 44
        Case Is < 12500
             discountColNo = 45
        Case Is < 15000
             discountColNo = 46
        Case Is < 20000
             discountColNo = 47
        Case Is < 25000
             discountColNo = 48
        Case Is < 30000
             discountColNo = 49
        Case Is < 35000
             discountColNo = 50
        Case Is < 40000
             discountColNo = 51
        Case Is < 45000
             discountColNo = 52
        Case Is < 50000
             discountColNo = 53
        Case Is < 55000
             discountColNo = 54
        Case Is < 60000
             discountColNo = 55
        Case Is < 65000
             discountColNo = 56
        Case Is < 70000
             discountColNo = 57
        Case Else
             discountColNo = 57
End Select

k = 1
conv1disc = 0
conv2disc = 0
conv3disc = 0
conv4disc = 0
For k = LBound(convArr) To UBound(convArr)
    If dbArr(i, 29) = convArr(k, 4) Then
        conv1disc = convArr(k, discountColNo)
    Else
    End If
    
    If dbArr(i, 31) = convArr(k, 4) Then
        conv2disc = convArr(k, discountColNo)
    Else
    End If
    
    If dbArr(i, 33) = convArr(k, 4) Then
        conv3disc = convArr(k, discountColNo)
    Else
    End If
    
    If dbArr(i, 35) = convArr(k, 4) Then
        conv4disc = convArr(k, discountColNo)
    Else
    End If
Next k

outArr(j, 69) = 0
outArr(j, 70) = 0
outArr(j, 71) = 0
outArr(j, 72) = 0
outArr(j, 73) = 0
outArr(j, 74) = 0
outArr(j, 75) = 0

outArr(j, 69) = conv1cost + conv2cost + conv3cost + conv4cost 'Conversion cost 1000pcs
outArr(j, 70) = outArr(j, 69) / compCurrencyVal 'Comp Currency
outArr(j, 71) = (conv1cost * conv1disc) + (conv2cost * conv2disc) + _
                (conv3cost * conv3disc) + (conv4cost * conv4disc) 'Discount/Markup 1000pcs
outArr(j, 72) = outArr(j, 71) / compCurrencyVal 'Comp Currency
If outArr(j, 69) = 0 Or outArr(j, 69) = "" Then
outArr(j, 73) = 0
Else
outArr(j, 73) = outArr(j, 71) / outArr(j, 69) 'Discount %
End If
outArr(j, 74) = outArr(j, 69) + outArr(j, 71) 'Conv cost with discount
outArr(j, 75) = outArr(j, 74) / compCurrencyVal 'Comp Currency

'
' Packaging Cost
outArr(j, 76) = 0
outArr(j, 77) = 0
k = 1
For k = LBound(packArr) To UBound(packArr)
    If packArr(k, 4) = dbArr(i, 39) Then
        outArr(j, 76) = packArr(k, 7) * dbArr(i, 40)   'Packaging Cost 1000 PCS - Local Currency
        outArr(j, 77) = outArr(j, 76) / compCurrencyVal 'Material Cost inc Waste 1000 PCS - Comp Currency
    Else
    End If
Next k



' Production Cost
outArr(j, 78) = outArr(j, 67) + outArr(j, 74) + outArr(j, 76) 'Production cost
outArr(j, 79) = outArr(j, 78) / compCurrencyVal 'Comp Currency

' Other Costs
If dbArr(i, 48) = "Yes" Then
    k = 1
    cost = 0
    value = 0
    For k = LBound(pallArr) To UBound(pallArr)
        If pallArr(k, 4) = dbArr(i, 50) Then
         cost = pallArr(k, 7) 'Pallet cost
         value = dbArr(i, 49) 'Pallet Quantity
            If value = 0 Then
                outArr(j, 80) = (otherCost + dbArr(i, 46)) * dbArr(i, 40)
            Else
            outArr(j, 80) = (otherCost + dbArr(i, 46)) * dbArr(i, 40) _
                        + (cost / value * 1000) ' Other Costs incl Extra Cost
            End If
            
        Else
        End If
    Next k
Else
        outArr(j, 80) = (otherCost + dbArr(i, 46)) * dbArr(i, 40) ' Other Costs incl Extra Cost
End If
outArr(j, 81) = outArr(j, 80) / compCurrencyVal 'Comp Currency

'Profit
outArr(j, 82) = profit_level * (outArr(j, 42) + outArr(j, 51) + outArr(j, 58) _
                + outArr(j, 65) + outArr(j, 78) + outArr(j, 80)) ' Other Costs
outArr(j, 83) = outArr(j, 82) / compCurrencyVal 'Comp Currency

'Final Discount
outArr(j, 84) = discount
outArr(j, 85) = discount * (outArr(j, 42) + outArr(j, 51) + outArr(j, 58) _
                + outArr(j, 65) + outArr(j, 78) + outArr(j, 80) + outArr(j, 82)) ' Total Volume Discount
outArr(j, 86) = outArr(j, 85) / compCurrencyVal 'Comp Currency

'Total Other Costs
outArr(j, 87) = outArr(j, 80) + outArr(j, 82) + outArr(j, 85) ' Total Other Costs
outArr(j, 88) = outArr(j, 87) / compCurrencyVal 'Comp Currency

'v43
' Populate Final Price if readymade otherwise without foot
If dbArr(i, 12) = "Paper Pallet Ready Made" _
                    Or dbArr(i, 12) = "Paper Pallet Foot" _
                    Or dbArr(i, 12) = "Paper Pallet Replacement Foot" _
                    Or dbArr(i, 12) = "Multichannel Foot" _
                    Or dbArr(i, 12) = "Multichannel Replacement Foot" _
                    Or dbArr(i, 12) = "Multichannel Pallet" Then
                    
                    If dbArr(i, 12) = "Paper Pallet Ready Made" _
                    Or dbArr(i, 12) = "Paper Pallet Foot" _
                    Or dbArr(i, 12) = "Multichannel Foot" _
                    Or dbArr(i, 12) = "Multichannel Pallet" Then
outArr(j, 89) = ((outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65)) _
                + (Foot_180x90Arr(1, 30) * dbArr(i, 19) * Foot_180x90Arr(1, 27)) + (Foot_180x90Arr(1, 31) * dbArr(i, 19) * Foot_180x90Arr(1, 27)) _
                + (Foot_140x90Arr(1, 30) * dbArr(i, 20) * Foot_140x90Arr(1, 27)) + (Foot_140x90Arr(1, 31) * dbArr(i, 20) * Foot_140x90Arr(1, 27)) _
                + (Foot_90x90Arr(1, 30) * dbArr(i, 21) * Foot_90x90Arr(1, 27)) + (Foot_90x90Arr(1, 31) * dbArr(i, 21) * Foot_90x90Arr(1, 27)) _
                + (Foot_180x90x100Arr(1, 30) * dbArr(i, 75) * Foot_180x90x100Arr(1, 27)) + (Foot_180x90x100Arr(1, 31) * dbArr(i, 75) * Foot_180x90x100Arr(1, 27)) _
                + (Foot_140x90x100Arr(1, 30) * dbArr(i, 76) * Foot_140x90x100Arr(1, 27)) + (Foot_140x90x100Arr(1, 31) * dbArr(i, 76) * Foot_140x90x100Arr(1, 27)) _
                + (Foot_90x90x100Arr(1, 30) * dbArr(i, 77) * Foot_90x90x100Arr(1, 27)) + (Foot_90x90x100Arr(1, 31) * dbArr(i, 77) * Foot_90x90x100Arr(1, 27))) _
                / ((outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65) + outArr(j, 78) + outArr(j, 87)) _
                + (Foot_180x90Arr(1, 30) * dbArr(i, 19)) + (Foot_180x90Arr(1, 31) * dbArr(i, 19)) _
                + (Foot_140x90Arr(1, 30) * dbArr(i, 20)) + (Foot_140x90Arr(1, 31) * dbArr(i, 20)) _
                + (Foot_90x90Arr(1, 30) * dbArr(i, 21)) + (Foot_90x90Arr(1, 31) * dbArr(i, 21)) _
                + (Foot_180x90x100Arr(1, 30) * dbArr(i, 75)) + (Foot_180x90x100Arr(1, 31) * dbArr(i, 75)) _
                + (Foot_140x90x100Arr(1, 30) * dbArr(i, 76)) + (Foot_140x90x100Arr(1, 31) * dbArr(i, 76)) _
                + (Foot_90x90x100Arr(1, 30) * dbArr(i, 77)) + (Foot_90x90x100Arr(1, 31) * dbArr(i, 77))) ' RM Share
                Else
                outArr(j, 89) = ((outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65)) _
                + (R_Foot_180x90Arr(1, 30) * dbArr(i, 19) * R_Foot_180x90Arr(1, 27)) + (R_Foot_180x90Arr(1, 31) * dbArr(i, 19) * R_Foot_180x90Arr(1, 27)) _
                + (R_Foot_140x90Arr(1, 30) * dbArr(i, 20) * R_Foot_140x90Arr(1, 27)) + (R_Foot_140x90Arr(1, 31) * dbArr(i, 20) * R_Foot_140x90Arr(1, 27)) _
                + (R_Foot_90x90Arr(1, 30) * dbArr(i, 21) * R_Foot_90x90Arr(1, 27)) + (R_Foot_90x90Arr(1, 31) * dbArr(i, 21) * R_Foot_90x90Arr(1, 27)) _
                + (R_Foot_180x90x100Arr(1, 30) * dbArr(i, 75) * R_Foot_180x90x100Arr(1, 27)) + (R_Foot_180x90x100Arr(1, 31) * dbArr(i, 75) * R_Foot_180x90x100Arr(1, 27)) _
                + (R_Foot_140x90x100Arr(1, 30) * dbArr(i, 76) * R_Foot_140x90x100Arr(1, 27)) + (R_Foot_140x90x100Arr(1, 31) * dbArr(i, 76) * R_Foot_140x90x100Arr(1, 27)) _
                + (R_Foot_90x90x100Arr(1, 30) * dbArr(i, 77) * R_Foot_90x90x100Arr(1, 27)) + (R_Foot_90x90x100Arr(1, 31) * dbArr(i, 77) * R_Foot_90x90x100Arr(1, 27))) _
                / ((outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65) + outArr(j, 78) + outArr(j, 87)) _
                + (R_Foot_180x90Arr(1, 30) * dbArr(i, 19)) + (R_Foot_180x90Arr(1, 31) * dbArr(i, 19)) _
                + (R_Foot_140x90Arr(1, 30) * dbArr(i, 20)) + (R_Foot_140x90Arr(1, 31) * dbArr(i, 20)) _
                + (R_Foot_90x90Arr(1, 30) * dbArr(i, 21)) + (R_Foot_90x90Arr(1, 31) * dbArr(i, 21)) _
                + (R_Foot_180x90x100Arr(1, 30) * dbArr(i, 75)) + (R_Foot_180x90x100Arr(1, 31) * dbArr(i, 75)) _
                + (R_Foot_140x90x100Arr(1, 30) * dbArr(i, 76)) + (R_Foot_140x90x100Arr(1, 31) * dbArr(i, 76)) _
                + (R_Foot_90x90x100Arr(1, 30) * dbArr(i, 77)) + (R_Foot_90x90x100Arr(1, 31) * dbArr(i, 77))) ' RM Share
                End If
Else
outArr(j, 89) = ((outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65))) _
                / ((outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65) + outArr(j, 78) + outArr(j, 87))) ' RM Share
End If

outArr(j, 90) = 1 - outArr(j, 89) 'Av Share


'92 has to calculate before 91 to get m2 cost - 92 is final price excl commission in pcs
If dbArr(i, 12) = "Paper Pallet Foot" _
                Or dbArr(i, 12) = "Paper Pallet Replacement Foot" _
                Or dbArr(i, 12) = "Multichannel Foot" _
                Or dbArr(i, 12) = "Multichannel Replacement Foot" Then
                
                
                If dbArr(i, 12) = "Paper Pallet Foot" _
                Or dbArr(i, 12) = "Multichannel Foot" Then
outArr(j, 92) = outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65) + outArr(j, 78) + outArr(j, 87) _
                + (Foot_180x90Arr(1, 30) * dbArr(i, 19)) + _
                (Foot_140x90Arr(1, 30) * dbArr(i, 20)) + _
                (Foot_90x90Arr(1, 30) * dbArr(i, 21)) + _
                (Foot_180x90x100Arr(1, 30) * dbArr(i, 75)) + _
                (Foot_140x90x100Arr(1, 30) * dbArr(i, 76)) + _
                (Foot_90x90x100Arr(1, 30) * dbArr(i, 77))
                Else
                outArr(j, 92) = outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65) + outArr(j, 78) + outArr(j, 87) _
                + (R_Foot_180x90Arr(1, 30) * dbArr(i, 19)) + _
                (R_Foot_140x90Arr(1, 30) * dbArr(i, 20)) + _
                (R_Foot_90x90Arr(1, 30) * dbArr(i, 21)) + _
                (R_Foot_180x90x100Arr(1, 30) * dbArr(i, 75)) + _
                (R_Foot_140x90x100Arr(1, 30) * dbArr(i, 76)) + _
                (R_Foot_90x90x100Arr(1, 30) * dbArr(i, 77))
                End If
Else
outArr(j, 92) = outArr(j, 42) + outArr(j, 51) + outArr(j, 58) + outArr(j, 65) + outArr(j, 78) + outArr(j, 87) _
                + (Foot_180x90Arr(1, 30) * dbArr(i, 19)) + (Foot_180x90Arr(1, 31) * dbArr(i, 19)) _
                + (Foot_140x90Arr(1, 30) * dbArr(i, 20)) + (Foot_140x90Arr(1, 31) * dbArr(i, 20)) _
                + (Foot_90x90Arr(1, 30) * dbArr(i, 21)) + (Foot_90x90Arr(1, 31) * dbArr(i, 21)) _
                + (Foot_180x90x100Arr(1, 30) * dbArr(i, 75)) + (Foot_180x90x100Arr(1, 31) * dbArr(i, 75)) _
                + (Foot_140x90x100Arr(1, 30) * dbArr(i, 76)) + (Foot_140x90x100Arr(1, 31) * dbArr(i, 76)) _
                + (Foot_90x90x100Arr(1, 30) * dbArr(i, 77)) + (Foot_90x90x100Arr(1, 31) * dbArr(i, 77))
End If

'v43
                
If dbArr(i, 40) = 0 Then
outArr(j, 91) = 0
Else
outArr(j, 91) = outArr(j, 92) / dbArr(i, 40)
End If

outArr(j, 93) = outArr(j, 92) / compCurrencyVal 'Comp Currency

' Commission
count = 0
commission = 0
name = ""

If dbArr(i, 12) = "Cardboard Boxes" Then count = 7
If dbArr(i, 12) = "Cardboard Fillers" Then count = 7
If dbArr(i, 12) = "Cardboard Sheets" Then count = 7
If dbArr(i, 12) = "Cardboard Sheets Converted" Then count = 7
If dbArr(i, 12) = "Paper Pallet Sheet" Then count = 9
If dbArr(i, 12) = "Paper Pallet Sheet Converted" Then count = 9
If dbArr(i, 12) = "Paper Pallet Ready Made" Then count = 10
If dbArr(i, 12) = "Paper Pallet Foot" Then count = 8
If dbArr(i, 12) = "Paper Pallet Replacement Foot" Then count = 8
If dbArr(i, 12) = "Multichannel Packaging" Then count = 7 'Same as packaging
If dbArr(i, 12) = "Multichannel Foot" Then count = 8 'Same as RM Pallet
If dbArr(i, 12) = "Multichannel Replacement Foot" Then count = 8 'Same as foot
If dbArr(i, 12) = "Multichannel Pallet" Then count = 10 'Same as RM Pallet

    
k = 1
For k = LBound(custArr) To UBound(custArr)
    If custArr(k, 4) = dbArr(i, 15) Then
    commission = custArr(k, count)
    Else
    End If
Next k

outArr(j, 94) = commission
outArr(j, 95) = (commission * outArr(j, 92)) + outArr(j, 92) 'Price incl commission
outArr(j, 96) = outArr(j, 95) / compCurrencyVal 'Comp Currency

' DDU OPtions
'
' Pallet
outArr(j, 97) = 0
outArr(j, 98) = 0

If dbArr(i, 48) = "No" Then 'v4.1
k = 1
For k = LBound(pallArr) To UBound(pallArr)
    If pallArr(k, 4) = dbArr(i, 50) Then
        If dbArr(i, 49) = 0 Or dbArr(i, 49) = "" Then
        outArr(j, 97) = 0
        Else
        outArr(j, 97) = pallArr(k, 7) / dbArr(i, 49) * 1000 'Pallet Cost per 1000pcs
        End If
        Exit For 'v4.1
    Else
    End If
Next k
Else 'v4.1
End If 'v4.1
outArr(j, 98) = outArr(j, 97) / compCurrencyVal 'Comp Currency

' Transport
outArr(j, 99) = 0
outArr(j, 100) = 0
k = 1
For k = LBound(transportArr) To UBound(transportArr)
    If transportArr(k, 4) = dbArr(i, 51) Then
        If transportArr(k, 10) = "Pcs" Then
        outArr(j, 99) = transportArr(k, 9) 'Transport Cost per 1000pcs
        Else
        outArr(j, 99) = transportArr(k, 9) * dbArr(i, 40) 'Transport Cost per 1000pcs if transport option is in m2
        End If
    Else
    End If
Next k
outArr(j, 100) = outArr(j, 99) / compCurrencyVal 'Comp Currency

'DDP Final
outArr(j, 101) = outArr(j, 95) + outArr(j, 97) + outArr(j, 99) 'Final DDU Cost
outArr(j, 102) = outArr(j, 101) / compCurrencyVal 'Comp Currency


'Tool Cost
'outArr(j, 103) = dbArr(i, 53)
'v4.1
k = 1
For k = 1 To UBound(toolArr)
    If toolArr(k, 4) = dbArr(i, 52) Then
        outArr(j, 103) = toolArr(k, 7)
        Else
        End If
    
Next k




'v42
' MSS Info
' Foot

no180 = 0
no140 = 0
no90 = 0
no180x100 = 0
no140x100 = 0
no90x100 = 0
footweight = 0
If dbArr(i, 19) = "" Then
Else
    If dbArr(i, 12) = "Paper Pallet Replacement Foot" Then
        footweight = footweight + (dbArr(i, 19) * R_weight180) 'Add weight for 180 foot
    Else
        footweight = footweight + (dbArr(i, 19) * weight180) 'Add weight for 180 foot
    End If
no180 = dbArr(i, 19)
End If

If dbArr(i, 20) = "" Then
Else
    If dbArr(i, 12) = "Paper Pallet Replacement Foot" Then
        footweight = footweight + (dbArr(i, 20) * R_weight140) 'Add weight for 180 foot
    Else
        footweight = footweight + (dbArr(i, 20) * weight140) 'Add weight for 180 foot
    End If
no140 = dbArr(i, 20)
End If

If dbArr(i, 21) = "" Then
Else
    If dbArr(i, 12) = "Paper Pallet Replacement Foot" Then
        footweight = footweight + (dbArr(i, 21) * R_weight90) 'Add weight for 180 foot
    Else
        footweight = footweight + (dbArr(i, 21) * weight90) 'Add weight for 180 foot
    End If
no90 = dbArr(i, 21)
End If


If dbArr(i, 75) = "" Then
Else
        If dbArr(i, 12) = "Multichannel Replacement Foot" Then
            footweight = footweight + (dbArr(i, 75) * R_weight180x100) 'Add weight for 180x100 foot
        Else
            footweight = footweight + (dbArr(i, 75) * weight180x100) 'Add weight for 180x100 foot
        End If
no180x100 = dbArr(i, 75)
End If

If dbArr(i, 76) = "" Then
Else
        If dbArr(i, 12) = "Multichannel Replacement Foot" Then
            footweight = footweight + (dbArr(i, 76) * R_weight140x100) 'Add weight for 180x100 foot
        Else
            footweight = footweight + (dbArr(i, 76) * weight140x100) 'Add weight for 180x100 foot
        End If
no140x100 = dbArr(i, 76)
End If

If dbArr(i, 77) = "" Then
Else
        If dbArr(i, 12) = "Multichannel Replacement Foot" Then
            footweight = footweight + (dbArr(i, 77) * R_weight90x100) 'Add weight for 180x100 foot
        Else
            footweight = footweight + (dbArr(i, 77) * weight90x100) 'Add weight for 180x100 foot
        End If
no90x100 = dbArr(i, 77)
End If






' If Inhouse Corrugated
If Left(dbArr(i, 55), 1) = 1 Then
outArr(j, 104) = outArr(j, 29) 'MSS Status
outArr(j, 105) = outArr(j, 30) & " " & outArr(j, 31)  'IKEA Quality Code
outArr(j, 106) = outArr(j, 28) + footweight ' Weight
Else
End If

' If Purchased Sheet
If Left(dbArr(i, 55), 1) = 2 Then
' Get Color and IKEA Quality if it is a purchased sheet
k = 1
name = ""
textline = ""
weight = 0
For k = 1 To firstemptyDBrow
    If dbArr(k, 1) = Purchased_Sheets Then
        If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = dbArr(k, 4) Then
            m = 1
            For m = 1 To firstemptyDBrow
                If dbArr(k, 6) = compArr(m, 4) Then
                    name = compArr(m, 5) 'Get IKEA Quality Code
                    textline = compArr(m, 8) 'Get IKEA Color
                Exit For
                Else
                End If
            Next m
        Else
        End If
    Else
    End If
Next k


outArr(j, 104) = outArr(j, 45) 'MSS Status
outArr(j, 105) = name & " " & textline  'IKEA Quality Code
outArr(j, 106) = outArr(j, 44) + footweight  ' Weight
Else
End If


'
' If Other Sheet
name = ""
textline = ""
k = 1
If Left(dbArr(i, 55), 1) = 3 Then
    k = 1
    For k = LBound(obArr) To UBound(obArr)
        If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = obArr(k, 4) Then
            name = obArr(k, 7) 'Get IKEA Quality Code
            Exit For
        Else
        End If
    Next k
outArr(j, 104) = outArr(j, 54) 'MSS Status
'outArr(j, 105) = "OB XX" 'IKEA Quality Code
'outArr(j, 105) = "OB " & name 'IKEA Quality Code
outArr(j, 105) = name & " BB" 'IKEA Quality Code. From version 4.8 we don't need for MSS purpose to have JB and OB added. Defaulting to BB for compatibility
outArr(j, 106) = outArr(j, 53) + footweight  ' Weight
Else
End If

'If Joined Sheet
name = ""
textline = ""
k = 1
If Left(dbArr(i, 55), 1) = 4 Then
    k = 1
    For k = LBound(obArr) To UBound(obArr)
        If Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) = jbArr(k, 4) Then
            name = jbArr(k, 6) 'Get IKEA Quality Code
            Exit For
        Else
        End If
    Next k
outArr(j, 104) = outArr(j, 61) 'MSS Status
'outArr(j, 105) = "JB XX" 'IKEA Quality Code
'outArr(j, 105) = "JB " & name 'IKEA Quality Code
outArr(j, 105) = name & " BB" 'IKEA Quality Code. From version 4.8 we don't need for MSS purpose to have JB and OB added. Defaulting to BB for compatibility
outArr(j, 106) = outArr(j, 60) + footweight  ' Weight
Else
End If


'v42
If dbArr(i, 12) = "Paper Pallet Foot" _
                Or dbArr(i, 12) = "Multichannel Foot" Then
    
    '180x90x50
    If dbArr(i, 19) > 0 Then
     outArr(j, 104) = Foot_180x90Arr(1, 32) 'MSS Status
     outArr(j, 105) = "180x90x50" 'IKEA Quality Code
     outArr(j, 106) = Foot_180x90Arr(1, 33)  ' Weight
    Else
    End If

    '140x90x50
    If dbArr(i, 20) > 0 Then
     outArr(j, 104) = Foot_140x90Arr(1, 32) 'MSS Status
     outArr(j, 105) = "140x90x50" 'IKEA Quality Code
     outArr(j, 106) = Foot_140x90Arr(1, 33)  ' Weight
    Else
    End If
    
    '90x90x50
    If dbArr(i, 21) > 0 Then
     outArr(j, 104) = Foot_90x90Arr(1, 32) 'MSS Status
     outArr(j, 105) = "90x90x50" 'IKEA Quality Code
     outArr(j, 106) = Foot_90x90Arr(1, 33)  ' Weight
    Else
    End If
    
    '180x90x100
    If dbArr(i, 75) > 0 Then
     outArr(j, 104) = Foot_180x90x100Arr(1, 32) 'MSS Status
     outArr(j, 105) = "180x90x100" 'IKEA Quality Code
     outArr(j, 106) = Foot_180x90x100Arr(1, 33)  ' Weight
    Else
    End If

    '140x90x100
    If dbArr(i, 76) > 0 Then
     outArr(j, 104) = Foot_140x90x100Arr(1, 32) 'MSS Status
     outArr(j, 105) = "140x90x100" 'IKEA Quality Code
     outArr(j, 106) = Foot_140x90x100Arr(1, 33)  ' Weight
    Else
    End If
    
    '90x90x50
    If dbArr(i, 77) > 0 Then
     outArr(j, 104) = Foot_90x90x100Arr(1, 32) 'MSS Status
     outArr(j, 105) = "90x90x100" 'IKEA Quality Code
     outArr(j, 106) = Foot_90x90x100Arr(1, 33)  ' Weight
    Else
    End If

Else
End If

If dbArr(i, 12) = "Paper Pallet Replacement Foot" _
                Or dbArr(i, 12) = "Multichannel Replacement Foot" Then
    
    '180x90x50
    If dbArr(i, 19) > 0 Then
     outArr(j, 104) = R_Foot_180x90Arr(1, 32) 'MSS Status
     outArr(j, 105) = "180x90x50" 'IKEA Quality Code
     outArr(j, 106) = R_Foot_180x90Arr(1, 33)  ' Weight
    Else
    End If

    '140x90x50
    If dbArr(i, 20) > 0 Then
     outArr(j, 104) = R_Foot_140x90Arr(1, 32) 'MSS Status
     outArr(j, 105) = "140x90x50" 'IKEA Quality Code
     outArr(j, 106) = R_Foot_140x90Arr(1, 33)  ' Weight
    Else
    End If
    
    '90x90x50
    If dbArr(i, 21) > 0 Then
     outArr(j, 104) = R_Foot_90x90Arr(1, 32) 'MSS Status
     outArr(j, 105) = "90x90x50" 'IKEA Quality Code
     outArr(j, 106) = R_Foot_90x90Arr(1, 33)  ' Weight
    Else
    End If
    
    '180x90x100
    If dbArr(i, 75) > 0 Then
     outArr(j, 104) = R_Foot_180x90x100Arr(1, 32) 'MSS Status
     outArr(j, 105) = "180x90x100" 'IKEA Quality Code
     outArr(j, 106) = R_Foot_180x90x100Arr(1, 33)  ' Weight
    Else
    End If

    '140x90x100
    If dbArr(i, 76) > 0 Then
     outArr(j, 104) = R_Foot_140x90x100Arr(1, 32) 'MSS Status
     outArr(j, 105) = "140x90x100" 'IKEA Quality Code
     outArr(j, 106) = R_Foot_140x90x100Arr(1, 33)  ' Weight
    Else
    End If
    
    '90x90x50
    If dbArr(i, 77) > 0 Then
     outArr(j, 104) = R_Foot_90x90x100Arr(1, 32) 'MSS Status
     outArr(j, 105) = "90x90x100" 'IKEA Quality Code
     outArr(j, 106) = R_Foot_90x90x100Arr(1, 33)  ' Weight
    Else
    End If

Else
End If

'WASTE Info
If Left(dbArr(i, 55), 1) = 1 Then
    outArr(j, 107) = dbArr(i, 43)
    outArr(j, 108) = dbArr(i, 44)
    outArr(j, 109) = 0
Else
    outArr(j, 107) = 0
    outArr(j, 108) = 0
    outArr(j, 109) = dbArr(i, 45)
End If


'PAPER INFO
' Added earlier during identifying the Compositions
'

'EXTRACOST INFO
outArr(j, 122) = dbArr(i, 46)
outArr(j, 123) = dbArr(i, 46) * dbArr(i, 40)
outArr(j, 124) = dbArr(i, 47)


'
' End of Articles Sheet
'

'
'
' Start of writing sheets
'
Call Generate_M3sheet(m3Arr:=m3Arr, outArr:=outArr, j:=j)
Call Generate_GAsheet(gaArr:=gaArr, outArr:=outArr, dbArr:=dbArr, custArr:=custArr, j:=j, i:=i)
Call Generate_DAsheet(daArr:=daArr, outArr:=outArr, dbArr:=dbArr, custArr:=custArr, j:=j, i:=i)
Call Generate_Commissionsheet(com1Arr:=com1Arr, com2Arr:=com2Arr, com3Arr:=com3Arr, com4Arr:=com4Arr, com5Arr:=com5Arr, com6Arr:=com6Arr, _
com7Arr:=com7Arr, com8Arr:=com8Arr, com9Arr:=com9Arr, com10Arr:=com10Arr, com11Arr:=com11Arr, com12Arr:=com12Arr, com13Arr:=com13Arr, com14Arr:=com14Arr, _
com15Arr:=com15Arr, com16Arr:=com16Arr, com17Arr:=com17Arr, com18Arr:=com18Arr, com19Arr:=com19Arr, outArr:=outArr, dbArr:=dbArr, custArr:=custArr, i:=i, j:=j)


'
'
'
j = j + 1
Else
End If

Next i
rngArticles = outArr
rngM3 = m3Arr
rngGA = gaArr
rngDA = daArr
rngCom1 = com1Arr
rngCom2 = com2Arr
rngCom3 = com3Arr
rngCom4 = com4Arr
rngCom5 = com5Arr
rngCom6 = com6Arr
rngCom7 = com7Arr
rngCom8 = com8Arr
rngCom9 = com9Arr
rngCom10 = com10Arr
rngCom11 = com11Arr
rngCom12 = com12Arr
rngCom13 = com13Arr
rngCom14 = com14Arr
rngCom15 = com15Arr
rngCom16 = com16Arr
rngCom17 = com17Arr
rngCom18 = com18Arr
rngCom19 = com19Arr



' Set UI in Articles Sheet
Call Generate_SetUI(salesCurrency, compCurrency)











endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub





Sub Items_Delete()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
Set rngSelection = itemsSheet.Range("B3:B14")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")



' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
selectionArr = rngSelection.value


' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Item Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Items_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Items_DeleteFiltered()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    Dim cell As Range
    Dim uid As Variant
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
'Set rngSelection = itemsSheet.Range("B3:B14")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngSelection = itemsSheet.Range("A18:A6001").SpecialCells(xlCellTypeVisible)



' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value


' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Are you sure?
If MsgBox("This will delete ALL filtered items" & vbNewLine & vbNewLine & "Are you REALLY sure?", vbYesNo, "Delete All Filtered Items") = vbNo Then GoTo endXLupdate

For Each cell In rngSelection
uid = cell.value

'Copy all rows except the deleted one
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = Item And dbArr(i, 4) = uid Then
            Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
Next i
dbArr = dbArrOut
Next cell


rngDB = dbArrOut
Items_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Items_Copy()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    Dim generatedNo As Long
    Dim NPSno As Long
    Dim uid As String
    Dim unique As Long
    Dim found As Long
    

    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngTable = itemsSheet.Range("A18:N6000")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value


' Load Supplier Number NPSno
i = 1
NPSno = 0
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = Supplier_Info Then
            NPSno = dbArr(i, 5)
        Exit For
        Else
        End If
Next i

'
' ERROR CHECK
'
If NPSno = 0 Then
    MsgBox "NPS Number not specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty NPS Number"
    GoTo endXLupdate
    Else
End If

Dim testNo As Long
testNo = 5000000
i = 1
found = 0
unique = 0
Do While unique = 0
    Randomize
    generatedNo = Int((90000000 - 10000000 + 1) * Rnd + 10000000)
    uid = NPSno & "-" & generatedNo
        i = 1
        For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = 30 Then
                If dbArr(i, 4) = uid Then
                    found = 1
                Else
                End If
            Else
            End If
        Next i
        
        If found = 1 Then
        unique = 0
        Else
        unique = 1
        End If
Loop
        
    

'
' ERROR CHECK
'
i = 1
For i = LBound(dbArr) To UBound(dbArr)
If dbArr(i, 1) = 30 Then
    If dbArr(i, 4) = 0 Then
         MsgBox "NPS Number not specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty NPS Number"
    GoTo endXLupdate
    Else
    End If
Else
End If
Next i

itemsSheet.Cells(3, "B") = uid


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Items_UpdateFiltered()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    Dim cell As Range
    Dim uid As Variant
    
    Dim rngDB As Range
    Dim rngListFiltered As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngSelection4 As Range
    Dim rngSelection5 As Range
    Dim rngSelection6 As Range
    Dim rngSelection7 As Range
    Dim rngSelection8 As Range
    Dim rngSelection9 As Range
    Dim rngSelection10 As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim selectionArr4() As Variant
    Dim selectionArr5() As Variant
    Dim selectionArr6() As Variant
    Dim selectionArr7() As Variant
    Dim selectionArr8() As Variant
    Dim selectionArr9() As Variant
    Dim selectionArr10() As Variant
    Dim custArr(300, 15) As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
'Set rngSelection = itemsSheet.Range("B3:B14")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngListFiltered = itemsSheet.Range("A18:A6001").SpecialCells(xlCellTypeVisible)
Set rngSelection = itemsSheet.Range("B3:B15")
Set rngSelection2 = itemsSheet.Range("D4:D8")
Set rngSelection3 = itemsSheet.Range("D10:D14")
Set rngSelection4 = itemsSheet.Range("F3:F5")
Set rngSelection5 = itemsSheet.Range("F7:F8")
Set rngSelection6 = itemsSheet.Range("F10:F13")
Set rngSelection7 = itemsSheet.Range("H3:H5")
Set rngSelection8 = itemsSheet.Range("H7:H11")
Set rngSelection9 = itemsSheet.Range("H13:H14")
Set rngSelection10 = itemsSheet.Range("J3:J5")


' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
selectionArr4 = rngSelection4.value
selectionArr5 = rngSelection5.value
selectionArr6 = rngSelection6.value
selectionArr7 = rngSelection7.value
selectionArr8 = rngSelection8.value
selectionArr9 = rngSelection9.value
selectionArr10 = rngSelection10.value



'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

' Customer Array
i = 1
j = 1
For i = 1 To firstemptyrow
    If dbArr(i, 1) = Customers Then
        k = 1
        For k = 1 To 15
            custArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i


'
' ERROR CHECK
'

If Not IsNumeric(selectionArr(11, 1)) Then
    MsgBox "There is non numeric data for the Yearly Forecast" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


If Not IsNumeric(selectionArr(12, 1)) Then
    MsgBox "There is non numeric data for the Average Order Quantity" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


' Corr Mtrl Waste
If Not IsNumeric(selectionArr4(1, 1)) Then
    MsgBox "There is non numeric data for the Paper Waste" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Corr Starch Waste
If Not IsNumeric(selectionArr4(2, 1)) Then
    MsgBox "There is non numeric data for the Starch Waste" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Converting Waste
If Not IsNumeric(selectionArr4(3, 1)) Then
    MsgBox "There is non numeric data for the Conversion Waste" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Extra Cost
If Not IsNumeric(selectionArr5(1, 1)) Then
    MsgBox "There is non numeric data for the Extra Cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Extra Cost Info
If Not selectionArr5(1, 1) = "" And selectionArr5(2, 1) = "" Then
    MsgBox "Extra Cost cannot be empty if a cost is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Extra Cost information"
    GoTo endXLupdate
    Else
End If


' Outs Check for conversion
If selectionArr6(1, 1) = "" And Not selectionArr3(1, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If

If selectionArr6(2, 1) = "" And Not selectionArr3(2, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If

If selectionArr6(3, 1) = "" And Not selectionArr3(3, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If

If selectionArr6(4, 1) = "" And Not selectionArr3(4, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If










' Foot Number
If Not IsNumeric(selectionArr7(1, 1)) Then
    MsgBox "There is non numeric data for the 180x90 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr7(2, 1)) Then
    MsgBox "There is non numeric data for the 140x90 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr7(3, 1)) Then
    MsgBox "There is non numeric data for the 90x90 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

'DRAFT2
' Foot Number
If Not IsNumeric(selectionArr10(1, 1)) Then
    MsgBox "There is non numeric data for the 180x90x100 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr10(2, 1)) Then
    MsgBox "There is non numeric data for the 140x90x100 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr10(3, 1)) Then
    MsgBox "There is non numeric data for the 90x90x100 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If
'END DRAFT2


' Pallet Quantity
If Not IsNumeric(selectionArr8(3, 1)) Then
    MsgBox "There is non numeric data for the Pallet Quantity" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


If Not IsNumeric(selectionArr9(1, 1)) Then
    MsgBox "There is non numeric data for the Article Net Size" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Article Weight


If Not IsNumeric(selectionArr9(2, 1)) Then
    MsgBox "There is non numeric data for the Article Weight" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


'Are you sure?
If MsgBox("This will update ALL filtered items with data from the header on all fields where header info is not empty. Click 'New' first before changing the fields you want to mass update. UIDs is never updated!" _
& vbNewLine & vbNewLine & "Are you REALLY sure?", vbYesNo, "Update All Filtered Items") = vbNo _
 Then GoTo endXLupdate

For Each cell In rngListFiltered
uid = cell.value

'Update field data on item
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = Item And dbArr(i, 4) = uid Then
                dbArr(i, 6) = Date
                If Not selectionArr(2, 1) = "" Then dbArr(i, 7) = selectionArr(2, 1)
                If Not selectionArr(3, 1) = "" Then dbArr(i, 8) = selectionArr(3, 1)
                If Not selectionArr(4, 1) = "" Then dbArr(i, 9) = selectionArr(4, 1)
                If Not selectionArr(5, 1) = "" Then dbArr(i, 12) = selectionArr(5, 1)
                If Not selectionArr(6, 1) = "" Then dbArr(i, 14) = selectionArr(6, 1)
                If Not selectionArr(7, 1) = "" Then dbArr(i, 15) = selectionArr(7, 1)
                If Not selectionArr(8, 1) = "" Then dbArr(i, 16) = selectionArr(8, 1)
                If Not selectionArr(9, 1) = "" Then dbArr(i, 17) = selectionArr(9, 1)
                If Not selectionArr(10, 1) = "" Then dbArr(i, 18) = selectionArr(10, 1)
                If Not selectionArr(11, 1) = "" Then dbArr(i, 25) = selectionArr(11, 1)
                If Not selectionArr(12, 1) = "" Then dbArr(i, 26) = selectionArr(12, 1)
                
                If Not selectionArr2(1, 1) = "" Then dbArr(i, 55) = selectionArr2(1, 1)
                
                'dbArr(i, 27) = "" Removed otherwise it may clear the contents which makes the price change
                If Not selectionArr2(1, 1) = "" Or Left(selectionArr2(1, 1), 1) = 1 Then
                j = 1
                name = ""
                For j = LBound(dbArr) To UBound(dbArr)
                    If dbArr(j, 1) = CB_Composition Then
                        If dbArr(j, 4) = Right(selectionArr2(1, 1), Len(selectionArr2(1, 1)) - 2) Then
                            dbArr(i, 27) = dbArr(j, 4)
                        Else
                        End If
                    Else
                    End If
                Next j
                Else
                End If
                
                If Not selectionArr2(1, 1) = "" Or Left(selectionArr2(1, 1), 1) = 2 Then
                j = 1
                name = ""
                For j = LBound(dbArr) To UBound(dbArr)
                    If dbArr(j, 1) = Purchased_Sheets Then
                        If dbArr(j, 4) = Right(selectionArr2(1, 1), Len(selectionArr2(1, 1)) - 2) Then
                            dbArr(i, 27) = dbArr(j, 6)
                        Else
                        End If
                    Else
                    End If
                Next j
                Else
                End If
                'dbArr(i, 27) = selectionArr2(2, 1)
                If Not selectionArr2(3, 1) = "" Then dbArr(i, 28) = selectionArr2(3, 1)
                If Not selectionArr2(4, 1) = "" Then dbArr(i, 22) = selectionArr2(4, 1)
                If Not selectionArr2(5, 1) = "" Then dbArr(i, 24) = selectionArr2(5, 1)
                
                If Not selectionArr3(1, 1) = "" Then dbArr(i, 29) = selectionArr3(1, 1)
                If Not selectionArr3(2, 1) = "" Then dbArr(i, 31) = selectionArr3(2, 1)
                If Not selectionArr3(3, 1) = "" Then dbArr(i, 33) = selectionArr3(3, 1)
                If Not selectionArr3(4, 1) = "" Then dbArr(i, 35) = selectionArr3(4, 1)
                If Not selectionArr3(5, 1) = "" Then dbArr(i, 39) = selectionArr3(5, 1)
                
                If Not selectionArr4(1, 1) = "" Then dbArr(i, 43) = selectionArr4(1, 1)
                If Not selectionArr4(2, 1) = "" Then dbArr(i, 44) = selectionArr4(2, 1)
                If Not selectionArr4(3, 1) = "" Then dbArr(i, 45) = selectionArr4(3, 1)
                
                If Not selectionArr5(1, 1) = "" Then dbArr(i, 46) = selectionArr5(1, 1)
                If Not selectionArr5(2, 1) = "" Then dbArr(i, 47) = selectionArr5(2, 1)
                
                If Not selectionArr6(1, 1) = "" Then dbArr(i, 30) = selectionArr6(1, 1)
                If Not selectionArr6(2, 1) = "" Then dbArr(i, 32) = selectionArr6(2, 1)
                If Not selectionArr6(3, 1) = "" Then dbArr(i, 34) = selectionArr6(3, 1)
                If Not selectionArr6(4, 1) = "" Then dbArr(i, 36) = selectionArr6(4, 1)
                
                If Not selectionArr7(1, 1) = "" Then dbArr(i, 19) = selectionArr7(1, 1)
                If Not selectionArr7(2, 1) = "" Then dbArr(i, 20) = selectionArr7(2, 1)
                If Not selectionArr7(3, 1) = "" Then dbArr(i, 21) = selectionArr7(3, 1)
                
                If Not selectionArr8(1, 1) = "" Then dbArr(i, 48) = selectionArr8(1, 1)
                If Not selectionArr8(2, 1) = "" Then dbArr(i, 50) = selectionArr8(2, 1)
                If Not selectionArr8(3, 1) = "" Then dbArr(i, 49) = selectionArr8(3, 1)
                If Not selectionArr8(4, 1) = "" Then dbArr(i, 51) = selectionArr8(4, 1)
                'dbArr(i, 53) = selectionArr8(5, 1)
                'v4.1
                If Not selectionArr8(5, 1) = "" Then dbArr(i, 52) = selectionArr8(5, 1)
                
                If Not selectionArr9(1, 1) = "" Then dbArr(i, 40) = selectionArr9(1, 1)
                If Not selectionArr9(2, 1) = "" Then dbArr(i, 42) = selectionArr9(2, 1)
                
                'DRAFT2
                If Not selectionArr10(1, 1) = "" Then dbArr(i, 75) = selectionArr10(1, 1)
                If Not selectionArr10(2, 1) = "" Then dbArr(i, 76) = selectionArr10(2, 1)
                If Not selectionArr10(3, 1) = "" Then dbArr(i, 77) = selectionArr10(3, 1)
                'END DRAFT2
                
                If Not selectionArr(7, 1) = "" Then
                j = 1
                For j = LBound(custArr) To UBound(custArr)
                    If custArr(j, 4) = selectionArr(7, 1) Then
                        dbArr(i, 56) = custArr(j, 5)
                    Else
                    End If
                Next j
                Else
                End If
                
            Exit For
            
            Else
            End If
Next i
Next cell


rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Items_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Items_Save()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim firstemptyDBrow As Long
    Dim name As String
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngSelection4 As Range
    Dim rngSelection5 As Range
    Dim rngSelection6 As Range
    Dim rngSelection7 As Range
    Dim rngSelection8 As Range
    Dim rngSelection9 As Range
    'DRAFT2
    Dim rngSelection10 As Range
    'END DRAFT2
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim selectionArr4() As Variant
    Dim selectionArr5() As Variant
    Dim selectionArr6() As Variant
    Dim selectionArr7() As Variant
    Dim selectionArr8() As Variant
    Dim selectionArr9() As Variant
    'DRAFT2
    Dim selectionArr10() As Variant
    'END DRAFT2
    Dim custArr(300, 15) As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
'DRAFT2
Set rngSelection = itemsSheet.Range("B3:B15")
'END DRAFT2
Set rngSelection2 = itemsSheet.Range("D4:D8")
Set rngSelection3 = itemsSheet.Range("D10:D14")
Set rngSelection4 = itemsSheet.Range("F3:F5")
Set rngSelection5 = itemsSheet.Range("F7:F8")
Set rngSelection6 = itemsSheet.Range("F10:F13")
Set rngSelection7 = itemsSheet.Range("H3:H5")
Set rngSelection8 = itemsSheet.Range("H7:H11")
Set rngSelection9 = itemsSheet.Range("H13:H14")
'DRAFT2
Set rngSelection10 = itemsSheet.Range("J3:J5")
'END DRAFT2

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
selectionArr4 = rngSelection4.value
selectionArr5 = rngSelection5.value
selectionArr6 = rngSelection6.value
selectionArr7 = rngSelection7.value
selectionArr8 = rngSelection8.value
selectionArr9 = rngSelection9.value
'DRAFT2
selectionArr10 = rngSelection10.value
'END DRAFT2


'First empty DB Row
i = 1
firstemptyDBrow = 0
firstemptyrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


' Customer Array
i = 1
j = 1
For i = 1 To firstemptyrow
    If dbArr(i, 1) = Customers Then
        k = 1
        For k = 1 To 15
            custArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i


'
' ERROR CHECK
'

' Check if UID already exist
'i = 1
'For i = LBound(dbArr) To UBound(dbArr)
'If dbArr(i, 1) = Item Then
'        If dbArr(i, 4) = selectionArr(1, 1) Then
'            'MsgBox "UID already in use" & vbNewLine _
'            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Used UID"
'            MsgBox "UID already in use" & vbNewLine _
'            & "Must be fixed before saving data ", vbYesNo + vbCritical, "Used UID"
'        GoTo endXLupdate
'        Else
'        End If
'Else
'End If
'Next i

' Check if UID is empty
If selectionArr(1, 1) = "" Then
    MsgBox "UID cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty UID"
    GoTo endXLupdate
    Else
End If

' Check if Article Name is empty
If selectionArr(3, 1) = "" Then
    MsgBox "Article Name cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Article Name"
    GoTo endXLupdate
    Else
End If

' Check if Article Name is empty
If selectionArr(5, 1) = "" Then
    MsgBox "Article Group cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Article Group"
    GoTo endXLupdate
    Else
End If

' Check if Customer is empty
If selectionArr(7, 1) = "" Then
    MsgBox "Customer cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Customer"
    GoTo endXLupdate
    Else
End If

' Check if IKEA Sup Ref is empty
If selectionArr(8, 1) = "" Then
    MsgBox "Customer Reference cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Reference"
    GoTo endXLupdate
    Else
End If

' Check if NPS Ref is empty
If selectionArr(9, 1) = "" Then
    MsgBox "NPS Reference cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Reference"
    GoTo endXLupdate
    Else
End If

' Check if Yearly Forecast is empty
If selectionArr(11, 1) = "" Then
    MsgBox "Yeraly Forecast cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Yearly Forecast"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(11, 1)) Then
    MsgBox "There is non numeric data for the Yearly Forecast" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Check if AOQ is empty
If selectionArr(12, 1) = "" Then
    MsgBox "Average Order Quantity cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty AOQ"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(12, 1)) Then
    MsgBox "There is non numeric data for the Average Order Quantity" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

'DRAFT2
' Check if Item in PipeChain is empty
'If selectionArr(13, 1) = "" Then
'    MsgBox "Item in PipeChain cannot be empty" & vbNewLine _
'        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty PipeChain Info"
'    GoTo endXLupdate
'    Else
'End If
'END DRAFT2

' Check if Color is empty
If selectionArr2(4, 1) = "" Then
    MsgBox "Color cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Color"
    GoTo endXLupdate
    Else
End If

' Check if Printing is empty
If selectionArr2(5, 1) = "" Then
    MsgBox "Printing cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Printing"
    GoTo endXLupdate
    Else
End If

' Corr Mtrl Waste
If Not IsNumeric(selectionArr4(1, 1)) Then
    MsgBox "There is non numeric data for the Paper Waste" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Corr Starch Waste
If Not IsNumeric(selectionArr4(2, 1)) Then
    MsgBox "There is non numeric data for the Starch Waste" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Converting Waste
If Not IsNumeric(selectionArr4(3, 1)) Then
    MsgBox "There is non numeric data for the Conversion Waste" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Extra Cost
If Not IsNumeric(selectionArr5(1, 1)) Then
    MsgBox "There is non numeric data for the Extra Cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Extra Cost Info
If Not selectionArr5(1, 1) = "" And selectionArr5(2, 1) = "" Then
    MsgBox "Extra Cost cannot be empty if a cost is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Extra Cost information"
    GoTo endXLupdate
    Else
End If


' Outs Check for conversion
If selectionArr6(1, 1) = "" And Not selectionArr3(1, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If

If selectionArr6(2, 1) = "" And Not selectionArr3(2, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If

If selectionArr6(3, 1) = "" And Not selectionArr3(3, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If

If selectionArr6(4, 1) = "" And Not selectionArr3(4, 1) = "" Then
    MsgBox "Outs cannot be empty if a conversion process is specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Missing Outs information"
    GoTo endXLupdate
    Else
End If










' Foot Number
If Not IsNumeric(selectionArr7(1, 1)) Then
    MsgBox "There is non numeric data for the 180x90 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr7(2, 1)) Then
    MsgBox "There is non numeric data for the 140x90 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr7(3, 1)) Then
    MsgBox "There is non numeric data for the 90x90 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

'DRAFT2
' Foot Number
If Not IsNumeric(selectionArr10(1, 1)) Then
    MsgBox "There is non numeric data for the 180x90x100 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr10(2, 1)) Then
    MsgBox "There is non numeric data for the 140x90x100 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Foot Number
If Not IsNumeric(selectionArr10(3, 1)) Then
    MsgBox "There is non numeric data for the 90x90x100 Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If
'END DRAFT2

' Check if Pallet in FCA is empty
If selectionArr8(1, 1) = "" Then
    MsgBox "Pallet in FCA cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Pallet in FCA"
    GoTo endXLupdate
    Else
End If

' Pallet Quantity
If Not IsNumeric(selectionArr8(3, 1)) Then
    MsgBox "There is non numeric data for the Pallet Quantity" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Article Net Size
If selectionArr9(1, 1) = "" Then
    MsgBox "Article Net Size cannot be empty" & vbNewLine _
        & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Article Net Size"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr9(1, 1)) Then
    MsgBox "There is non numeric data for the Article Net Size" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Article Weight


If Not IsNumeric(selectionArr9(2, 1)) Then
    MsgBox "There is non numeric data for the Article Weight" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If



i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Item
                dbArr(firstemptyrow, 1) = Item
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Item"
                'dbArr(firstemptyrow, 4) = selectionArr(1, 1)

                ' v4.1
                Select Case selectionArr(5, 1)
                        Case Is = "Cardboard Boxes"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "00"
                        Case Is = "Cardboard Fillers"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "01"
                        Case Is = "Cardboard Sheets"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "02"
                        Case Is = "Cardboard Sheets Converted"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "03"
                        Case Is = "Paper Pallet Sheet"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "04"
                        Case Is = "Paper Pallet Sheet Converted"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "05"
                        Case Is = "Paper Pallet Ready Made"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "06"
                        Case Is = "Paper Pallet Foot"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "07"
                        Case Is = "Paper Pallet Replacement Foot"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "08"
                        Case Is = "Multichannel Packaging"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "09"
                        Case Is = "Multichannel Foot"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "10"
                        Case Is = "Multichannel Replacement Foot"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "11"
                        Case Is = "Multichannel Pallet"
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "12"
                        Case Else
                            dbArr(firstemptyrow, 4) = selectionArr(1, 1) & "13"
                End Select
                ' End v4.1
                dbArr(firstemptyrow, 5) = CLng(Date)
                dbArr(firstemptyrow, 6) = CLng(Date)
                dbArr(firstemptyrow, 7) = selectionArr(2, 1)
                dbArr(firstemptyrow, 8) = selectionArr(3, 1)
                dbArr(firstemptyrow, 9) = selectionArr(4, 1)
                dbArr(firstemptyrow, 12) = selectionArr(5, 1)
                dbArr(firstemptyrow, 14) = selectionArr(6, 1)
                dbArr(firstemptyrow, 15) = selectionArr(7, 1)
                dbArr(firstemptyrow, 16) = selectionArr(8, 1)
                dbArr(firstemptyrow, 17) = selectionArr(9, 1)
                dbArr(firstemptyrow, 18) = selectionArr(10, 1)
                dbArr(firstemptyrow, 25) = selectionArr(11, 1)
                dbArr(firstemptyrow, 26) = selectionArr(12, 1)
                'DRAFT2
                'dbArr(firstemptyrow, 78) = selectionArr(13, 1)
                'END DRAFT2
                
                dbArr(firstemptyrow, 55) = selectionArr2(1, 1)
                
                dbArr(firstemptyrow, 27) = ""
                If Left(selectionArr2(1, 1), 1) = 1 Then
                j = 1
                name = ""
                For j = LBound(dbArr) To UBound(dbArr)
                    If dbArr(j, 1) = CB_Composition Then
                        If dbArr(j, 4) = Right(selectionArr2(1, 1), Len(selectionArr2(1, 1)) - 2) Then
                            dbArr(firstemptyrow, 27) = dbArr(j, 4)
                        Else
                        End If
                    Else
                    End If
                Next j
                Else
                End If
                
                If Left(selectionArr2(1, 1), 1) = 2 Then
                j = 1
                name = ""
                For j = LBound(dbArr) To UBound(dbArr)
                    If dbArr(j, 1) = Purchased_Sheets Then
                        If dbArr(j, 4) = Right(selectionArr2(1, 1), Len(selectionArr2(1, 1)) - 2) Then
                            dbArr(firstemptyrow, 27) = dbArr(j, 6)
                        Else
                        End If
                    Else
                    End If
                Next j
                Else
                End If
                    
                'dbArr(firstemptyrow, 27) = selectionArr2(2, 1)
                dbArr(firstemptyrow, 28) = selectionArr2(3, 1)
                dbArr(firstemptyrow, 22) = selectionArr2(4, 1)
                dbArr(firstemptyrow, 24) = selectionArr2(5, 1)
                
                dbArr(firstemptyrow, 29) = selectionArr3(1, 1)
                dbArr(firstemptyrow, 31) = selectionArr3(2, 1)
                dbArr(firstemptyrow, 33) = selectionArr3(3, 1)
                dbArr(firstemptyrow, 35) = selectionArr3(4, 1)
                dbArr(firstemptyrow, 39) = selectionArr3(5, 1)
                
                dbArr(firstemptyrow, 43) = selectionArr4(1, 1)
                dbArr(firstemptyrow, 44) = selectionArr4(2, 1)
                dbArr(firstemptyrow, 45) = selectionArr4(3, 1)
                
                dbArr(firstemptyrow, 46) = selectionArr5(1, 1)
                dbArr(firstemptyrow, 47) = selectionArr5(2, 1)
                
                dbArr(firstemptyrow, 30) = selectionArr6(1, 1)
                dbArr(firstemptyrow, 32) = selectionArr6(2, 1)
                dbArr(firstemptyrow, 34) = selectionArr6(3, 1)
                dbArr(firstemptyrow, 36) = selectionArr6(4, 1)
                
                dbArr(firstemptyrow, 19) = selectionArr7(1, 1)
                dbArr(firstemptyrow, 20) = selectionArr7(2, 1)
                dbArr(firstemptyrow, 21) = selectionArr7(3, 1)
                
                dbArr(firstemptyrow, 48) = selectionArr8(1, 1)
                dbArr(firstemptyrow, 50) = selectionArr8(2, 1)
                dbArr(firstemptyrow, 49) = selectionArr8(3, 1)
                dbArr(firstemptyrow, 51) = selectionArr8(4, 1)
                'dbArr(firstemptyrow, 53) = selectionArr8(5, 1)
                'v4.1
                dbArr(firstemptyrow, 52) = selectionArr8(5, 1)
                
                dbArr(firstemptyrow, 40) = selectionArr9(1, 1)
                dbArr(firstemptyrow, 42) = selectionArr9(2, 1)
                
                'DRAFT2
                dbArr(firstemptyrow, 75) = selectionArr10(1, 1)
                dbArr(firstemptyrow, 76) = selectionArr10(2, 1)
                dbArr(firstemptyrow, 77) = selectionArr10(3, 1)
                'END DRAFT2
                
                j = 1
                For j = LBound(custArr) To UBound(custArr)
                    If custArr(j, 4) = selectionArr(7, 1) Then
                        dbArr(firstemptyrow, 56) = custArr(j, 5)
                    Else
                    End If
                Next j
                
                
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Item Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Item
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 6) = CLng(Date)
                dbArr(i, 7) = selectionArr(2, 1)
                dbArr(i, 8) = selectionArr(3, 1)
                dbArr(i, 9) = selectionArr(4, 1)
                dbArr(i, 12) = selectionArr(5, 1)
                dbArr(i, 14) = selectionArr(6, 1)
                dbArr(i, 15) = selectionArr(7, 1)
                dbArr(i, 16) = selectionArr(8, 1)
                dbArr(i, 17) = selectionArr(9, 1)
                dbArr(i, 18) = selectionArr(10, 1)
                dbArr(i, 25) = selectionArr(11, 1)
                dbArr(i, 26) = selectionArr(12, 1)
                'DRAFT2
                'dbArr(i, 78) = selectionArr(13, 1)
                'END DRAFT2
                
                dbArr(i, 55) = selectionArr2(1, 1)
                
                dbArr(i, 27) = ""
                If Left(selectionArr2(1, 1), 1) = 1 Then
                j = 1
                name = ""
                For j = LBound(dbArr) To UBound(dbArr)
                    If dbArr(j, 1) = CB_Composition Then
                        If dbArr(j, 4) = Right(selectionArr2(1, 1), Len(selectionArr2(1, 1)) - 2) Then
                            dbArr(i, 27) = dbArr(j, 4)
                        Else
                        End If
                    Else
                    End If
                Next j
                Else
                End If
                
                If Left(selectionArr2(1, 1), 1) = 2 Then
                j = 1
                name = ""
                For j = LBound(dbArr) To UBound(dbArr)
                    If dbArr(j, 1) = Purchased_Sheets Then
                        If dbArr(j, 4) = Right(selectionArr2(1, 1), Len(selectionArr2(1, 1)) - 2) Then
                            dbArr(i, 27) = dbArr(j, 6)
                        Else
                        End If
                    Else
                    End If
                Next j
                Else
                End If
                'dbArr(i, 27) = selectionArr2(2, 1)
                dbArr(i, 28) = selectionArr2(3, 1)
                dbArr(i, 22) = selectionArr2(4, 1)
                dbArr(i, 24) = selectionArr2(5, 1)
                
                dbArr(i, 29) = selectionArr3(1, 1)
                dbArr(i, 31) = selectionArr3(2, 1)
                dbArr(i, 33) = selectionArr3(3, 1)
                dbArr(i, 35) = selectionArr3(4, 1)
                dbArr(i, 39) = selectionArr3(5, 1)
                
                dbArr(i, 43) = selectionArr4(1, 1)
                dbArr(i, 44) = selectionArr4(2, 1)
                dbArr(i, 45) = selectionArr4(3, 1)
                
                dbArr(i, 46) = selectionArr5(1, 1)
                dbArr(i, 47) = selectionArr5(2, 1)
                
                dbArr(i, 30) = selectionArr6(1, 1)
                dbArr(i, 32) = selectionArr6(2, 1)
                dbArr(i, 34) = selectionArr6(3, 1)
                dbArr(i, 36) = selectionArr6(4, 1)
                
                dbArr(i, 19) = selectionArr7(1, 1)
                dbArr(i, 20) = selectionArr7(2, 1)
                dbArr(i, 21) = selectionArr7(3, 1)
                
                dbArr(i, 48) = selectionArr8(1, 1)
                dbArr(i, 50) = selectionArr8(2, 1)
                dbArr(i, 49) = selectionArr8(3, 1)
                dbArr(i, 51) = selectionArr8(4, 1)
                'dbArr(i, 53) = selectionArr8(5, 1)
                'v4.1
                dbArr(i, 52) = selectionArr8(5, 1)
                
                dbArr(i, 40) = selectionArr9(1, 1)
                dbArr(i, 42) = selectionArr9(2, 1)
                
                'DRAFT2
                dbArr(i, 75) = selectionArr10(1, 1)
                dbArr(i, 76) = selectionArr10(2, 1)
                dbArr(i, 77) = selectionArr10(3, 1)
                'END DRAFT2
                
                j = 1
                For j = LBound(custArr) To UBound(custArr)
                    If custArr(j, 4) = selectionArr(7, 1) Then
                        dbArr(i, 56) = custArr(j, 5)
                    Else
                    End If
                Next j
                 
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Items_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Items_NewArticle()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    Dim generatedNo As Long
    Dim NPSno As Long
    Dim uid As String
    Dim unique As Long
    Dim found As Long
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngSelection4 As Range
    Dim rngSelection5 As Range
    Dim rngSelection6 As Range
    Dim rngSelection7 As Range
    Dim rngSelection8 As Range
    Dim rngSelection9 As Range
    'DRAFT2
    Dim rngSelection10 As Range
    'END DRAFT2
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim selectionArr4() As Variant
    Dim selectionArr5() As Variant
    Dim selectionArr6() As Variant
    Dim selectionArr7() As Variant
    Dim selectionArr8() As Variant
    Dim selectionArr9() As Variant
    'DRAFT2
    Dim selectionArr10() As Variant
    'END DRAFT2
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
'DRAFT2
Set rngSelection = itemsSheet.Range("B3:B15")
'END DRAFT2
Set rngSelection2 = itemsSheet.Range("D4:D8")
Set rngSelection3 = itemsSheet.Range("D10:D14")
Set rngSelection4 = itemsSheet.Range("F3:F5")
Set rngSelection5 = itemsSheet.Range("F7:F8")
Set rngSelection6 = itemsSheet.Range("F10:F13")
Set rngSelection7 = itemsSheet.Range("H3:H5")
Set rngSelection8 = itemsSheet.Range("H7:H11")
Set rngSelection9 = itemsSheet.Range("H13:H14")
'DRAFT2
Set rngSelection10 = itemsSheet.Range("J3:J5")
'END DRAFT2
Set rngTable = itemsSheet.Range("A18:N6000")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
selectionArr4 = rngSelection4.value
selectionArr5 = rngSelection5.value
selectionArr6 = rngSelection6.value
selectionArr7 = rngSelection7.value
selectionArr8 = rngSelection8.value
selectionArr9 = rngSelection9.value
'DRAFT2
selectionArr10 = rngSelection10.value
'END DRAFT2
tableArr = rngTable.value

' Where is the dropdown located
'dropdown = papersSheet.Cells(2, "A")

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

' Empty Selection3 array
i = 1
j = 1
For i = LBound(selectionArr3) To UBound(selectionArr3)
        selectionArr3(i, 1) = ""
            For j = LBound(selectionArr3, 2) To UBound(selectionArr3, 2)
                selectionArr3(i, j) = ""
            Next j
Next i

' Empty Selection4 array
i = 1
j = 1
For i = LBound(selectionArr4) To UBound(selectionArr4)
        selectionArr4(i, 1) = ""
            For j = LBound(selectionArr4, 2) To UBound(selectionArr4, 2)
                selectionArr4(i, j) = ""
            Next j
Next i

' Empty Selection5 array
i = 1
j = 1
For i = LBound(selectionArr5) To UBound(selectionArr5)
        selectionArr5(i, 1) = ""
            For j = LBound(selectionArr5, 2) To UBound(selectionArr5, 2)
                selectionArr5(i, j) = ""
            Next j
Next i

' Empty Selection6 array
i = 1
j = 1
For i = LBound(selectionArr6) To UBound(selectionArr6)
        selectionArr6(i, 1) = ""
            For j = LBound(selectionArr6, 2) To UBound(selectionArr6, 2)
                selectionArr6(i, j) = ""
            Next j
Next i

' Empty Selection7 array
i = 1
j = 1
For i = LBound(selectionArr7) To UBound(selectionArr7)
        selectionArr7(i, 1) = ""
            For j = LBound(selectionArr7, 2) To UBound(selectionArr7, 2)
                selectionArr7(i, j) = ""
            Next j
Next i

' Empty Selection8 array
i = 1
j = 1
For i = LBound(selectionArr8) To UBound(selectionArr8)
        selectionArr8(i, 1) = ""
            For j = LBound(selectionArr8, 2) To UBound(selectionArr8, 2)
                selectionArr8(i, j) = ""
            Next j
Next i

' Empty Selection9 array
i = 1
j = 1
For i = LBound(selectionArr9) To UBound(selectionArr9)
        selectionArr9(i, 1) = ""
            For j = LBound(selectionArr9, 2) To UBound(selectionArr9, 2)
                selectionArr9(i, j) = ""
            Next j
Next i

'DRAFT2
' Empty Selection10 array
i = 1
j = 1
For i = LBound(selectionArr10) To UBound(selectionArr10)
        selectionArr10(i, 1) = ""
            For j = LBound(selectionArr10, 2) To UBound(selectionArr10, 2)
                selectionArr10(i, j) = ""
            Next j
Next i
'END DRAFT2

' Load Supplier Number NPSno
i = 1
NPSno = 0
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = Supplier_Info Then
            NPSno = dbArr(i, 5)
        Exit For
        Else
        End If
Next i

'
' ERROR CHECK
'
If NPSno = 0 Then
    MsgBox "NPS Number not specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty NPS Number"
    GoTo endXLupdate
    Else
End If

Dim testNo As Long
testNo = 5000000
i = 1
found = 0
unique = 0
Do While unique = 0
    Randomize
    generatedNo = Int((90000000 - 10000000 + 1) * Rnd + 10000000)
    uid = NPSno & "-" & generatedNo
        i = 1
        For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = 30 Then
                If dbArr(i, 4) = uid Then
                    found = 1
                Else
                End If
            Else
            End If
        Next i
        
        If found = 1 Then
        unique = 0
        Else
        unique = 1
        End If
Loop
        
    

'
' ERROR CHECK
'
i = 1
For i = LBound(dbArr) To UBound(dbArr)
If dbArr(i, 1) = 30 Then
    If dbArr(i, 4) = 0 Then
         MsgBox "NPS Number not specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty NPS Number"
    GoTo endXLupdate
    Else
    End If
Else
End If
Next i

selectionArr(1, 1) = uid
 


rngSelection = selectionArr
rngSelection2 = selectionArr2
rngSelection3 = selectionArr3
rngSelection4 = selectionArr4
rngSelection5 = selectionArr5
rngSelection6 = selectionArr6
rngSelection7 = selectionArr7
rngSelection8 = selectionArr8
rngSelection9 = selectionArr9
'DRAFT2
rngSelection10 = selectionArr10
'END DRAFT2

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Items_LoadSelection()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngSelection4 As Range
    Dim rngSelection5 As Range
    Dim rngSelection6 As Range
    Dim rngSelection7 As Range
    Dim rngSelection8 As Range
    Dim rngSelection9 As Range
    'DRAFT2
    Dim rngSelection10 As Range
    'END DRAFT2
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim selectionArr4() As Variant
    Dim selectionArr5() As Variant
    Dim selectionArr6() As Variant
    Dim selectionArr7() As Variant
    Dim selectionArr8() As Variant
    Dim selectionArr9() As Variant
    'DRAFT2
    Dim selectionArr10() As Variant
    'END DRAFT2
    'Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
'DRAFT2
Set rngSelection = itemsSheet.Range("B3:B15")
'END DRAFT2
Set rngSelection2 = itemsSheet.Range("D4:D8")
Set rngSelection3 = itemsSheet.Range("D10:D14")
Set rngSelection4 = itemsSheet.Range("F3:F5")
Set rngSelection5 = itemsSheet.Range("F7:F8")
Set rngSelection6 = itemsSheet.Range("F10:F13")
Set rngSelection7 = itemsSheet.Range("H3:H5")
Set rngSelection8 = itemsSheet.Range("H7:H11")
Set rngSelection9 = itemsSheet.Range("H13:H14")
'DRAFT2
Set rngSelection10 = itemsSheet.Range("J3:J5")
'END DRAFT2
'Set rngTable = itemsSheet.Range("A17:N6000")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
selectionArr4 = rngSelection4.value
selectionArr5 = rngSelection5.value
selectionArr6 = rngSelection6.value
selectionArr7 = rngSelection7.value
selectionArr8 = rngSelection8.value
selectionArr9 = rngSelection9.value
'DRAFT2
selectionArr10 = rngSelection10.value
'END DRAFT2
'tableArr = rngTable.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

' Empty Selection3 array
i = 1
j = 1
For i = LBound(selectionArr3) To UBound(selectionArr3)
        selectionArr3(i, 1) = ""
            For j = LBound(selectionArr3, 2) To UBound(selectionArr3, 2)
                selectionArr3(i, j) = ""
            Next j
Next i

' Empty Selection4 array
i = 1
j = 1
For i = LBound(selectionArr4) To UBound(selectionArr4)
        selectionArr4(i, 1) = ""
            For j = LBound(selectionArr4, 2) To UBound(selectionArr4, 2)
                selectionArr4(i, j) = ""
            Next j
Next i

' Empty Selection5 array
i = 1
j = 1
For i = LBound(selectionArr5) To UBound(selectionArr5)
        selectionArr5(i, 1) = ""
            For j = LBound(selectionArr5, 2) To UBound(selectionArr5, 2)
                selectionArr5(i, j) = ""
            Next j
Next i

' Empty Selection6 array
i = 1
j = 1
For i = LBound(selectionArr6) To UBound(selectionArr6)
        selectionArr6(i, 1) = ""
            For j = LBound(selectionArr6, 2) To UBound(selectionArr6, 2)
                selectionArr6(i, j) = ""
            Next j
Next i

' Empty Selection7 array
i = 1
j = 1
For i = LBound(selectionArr7) To UBound(selectionArr7)
        selectionArr7(i, 1) = ""
            For j = LBound(selectionArr7, 2) To UBound(selectionArr7, 2)
                selectionArr7(i, j) = ""
            Next j
Next i

' Empty Selection8 array
i = 1
j = 1
For i = LBound(selectionArr8) To UBound(selectionArr8)
        selectionArr8(i, 1) = ""
            For j = LBound(selectionArr8, 2) To UBound(selectionArr8, 2)
                selectionArr8(i, j) = ""
            Next j
Next i

' Empty Selection9 array
i = 1
j = 1
For i = LBound(selectionArr9) To UBound(selectionArr9)
        selectionArr9(i, 1) = ""
            For j = LBound(selectionArr9, 2) To UBound(selectionArr9, 2)
                selectionArr9(i, j) = ""
            Next j
Next i


'DRAFT2
' Empty Selection10 array
i = 1
j = 1
For i = LBound(selectionArr10) To UBound(selectionArr10)
        selectionArr10(i, 1) = ""
            For j = LBound(selectionArr10, 2) To UBound(selectionArr10, 2)
                selectionArr10(i, j) = ""
            Next j
Next i
'END DRAFT2

'DRAFT2
selectedRow = 18
selectedRow = Selection.row
If selectedRow < 18 Or selectedRow > 6000 Then
    selectedRow = 18
    Else
End If
'END DRAFT2

' Load Selection Tables 1 and 2
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 30 Then
        If dbArr(i, 4) = itemsSheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = dbArr(i, 4)
        selectionArr(2, 1) = dbArr(i, 7)
        selectionArr(3, 1) = dbArr(i, 8)
        selectionArr(4, 1) = dbArr(i, 9)
        selectionArr(5, 1) = dbArr(i, 12)
        selectionArr(6, 1) = dbArr(i, 14)
        selectionArr(7, 1) = dbArr(i, 15)
        selectionArr(8, 1) = dbArr(i, 16)
        selectionArr(9, 1) = dbArr(i, 17)
        selectionArr(10, 1) = dbArr(i, 18)
        selectionArr(11, 1) = dbArr(i, 25)
        selectionArr(12, 1) = dbArr(i, 26)
        'DRAFT2
        'selectionArr(13, 1) = dbArr(i, 78)
        'END DRAFT2
        
        selectionArr2(1, 1) = dbArr(i, 55)
        selectionArr2(2, 1) = dbArr(i, 27)
        selectionArr2(3, 1) = dbArr(i, 28)
        selectionArr2(4, 1) = dbArr(i, 22)
        selectionArr2(5, 1) = dbArr(i, 24)
        
        selectionArr3(1, 1) = dbArr(i, 29)
        selectionArr3(2, 1) = dbArr(i, 31)
        selectionArr3(3, 1) = dbArr(i, 33)
        selectionArr3(4, 1) = dbArr(i, 35)
        selectionArr3(5, 1) = dbArr(i, 39)
        
        selectionArr4(1, 1) = dbArr(i, 43)
        selectionArr4(2, 1) = dbArr(i, 44)
        selectionArr4(3, 1) = dbArr(i, 45)
        
        selectionArr5(1, 1) = dbArr(i, 46)
        selectionArr5(2, 1) = dbArr(i, 47)
        
        selectionArr6(1, 1) = dbArr(i, 30)
        selectionArr6(2, 1) = dbArr(i, 32)
        selectionArr6(3, 1) = dbArr(i, 34)
        selectionArr6(4, 1) = dbArr(i, 36)
        
        selectionArr7(1, 1) = dbArr(i, 19)
        selectionArr7(2, 1) = dbArr(i, 20)
        selectionArr7(3, 1) = dbArr(i, 21)
        
        selectionArr8(1, 1) = dbArr(i, 48)
        selectionArr8(2, 1) = dbArr(i, 50)
        selectionArr8(3, 1) = dbArr(i, 49)
        selectionArr8(4, 1) = dbArr(i, 51)
        'selectionArr8(5, 1) = dbArr(i, 53)
        'v4.1
        selectionArr8(5, 1) = dbArr(i, 52)
        
        selectionArr9(1, 1) = dbArr(i, 40)
        selectionArr9(2, 1) = dbArr(i, 42)
        
        selectionArr10(1, 1) = dbArr(i, 75)
        selectionArr10(2, 1) = dbArr(i, 76)
        selectionArr10(3, 1) = dbArr(i, 77)

        Exit For
        Else
        End If
    Else
    End If
Next i


rngSelection = selectionArr
rngSelection2 = selectionArr2
rngSelection3 = selectionArr3
rngSelection4 = selectionArr4
rngSelection5 = selectionArr5
rngSelection6 = selectionArr6
rngSelection7 = selectionArr7
rngSelection8 = selectionArr8
rngSelection9 = selectionArr9
'DRAFT2
rngSelection10 = selectionArr10
'END DRAFT2

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Items_Load()
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50

    
    Dim i As Long
    Dim j As Long
    Dim k As Long 'v4.1
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngDB As Range
    Dim rngItemstable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngSelection4 As Range
    Dim rngSelection5 As Range
    Dim rngSelection6 As Range
    Dim rngSelection7 As Range
    Dim rngSelection8 As Range
    Dim rngSelection9 As Range
    'DRAFT2
    Dim rngSelection10 As Range
    'END DRAFT2
    
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim itemsArr() As Variant
    Dim emptyArr(5983, 10) As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim selectionArr4() As Variant
    Dim selectionArr5() As Variant
    Dim selectionArr6() As Variant
    Dim selectionArr7() As Variant
    Dim selectionArr8() As Variant
    Dim selectionArr9() As Variant
    'DRAFT2
    Dim selectionArr10() As Variant
    'END DRAFT2
    Dim XrateArr() As Variant
    
    'Below to store validation lists on DB sheet to avoid 256 char limitation in validation delimited lists
    Dim lastcolumn As Long
    
    Dim rng_temp_composition As Range
    Dim rng_temp_boards As Range
    Dim rng_temp_customer As Range
    Dim rng_temp_conversion As Range
    Dim rng_temp_pallet As Range
    Dim rng_temp_transport As Range
    Dim rng_temp_paper As Range
    Dim rng_temp_packaging As Range
    'v4.1
    Dim rng_temp_tool As Range
    
    Dim temp_compositionArr() As Variant
    Dim temp_boardsArr() As Variant
    Dim temp_customerArr() As Variant
    Dim temp_conversionArr() As Variant
    Dim temp_palletArr() As Variant
    Dim temp_transportArr() As Variant
    Dim temp_paperArr() As Variant
    Dim temp_packagingArr() As Variant
    'v4.1
    Dim temp_toolArr() As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A17").Activate
itemsSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
'DRAFT2
Set rngItemstable = itemsSheet.Range("A18:Y6000")
'END DRAFT2
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngXrate = dbSheet.Range("A1:B50")
'DRAFT2
Set rngSelection = itemsSheet.Range("B3:B15")
'END DRAFT2
Set rngSelection2 = itemsSheet.Range("D4:D8")
Set rngSelection3 = itemsSheet.Range("D10:D14")
Set rngSelection4 = itemsSheet.Range("F3:F5")
Set rngSelection5 = itemsSheet.Range("F7:F8")
Set rngSelection6 = itemsSheet.Range("F10:F13")
Set rngSelection7 = itemsSheet.Range("H3:H5")
Set rngSelection8 = itemsSheet.Range("H7:H11")
Set rngSelection9 = itemsSheet.Range("H13:H14")
'DRAFT2
Set rngSelection10 = itemsSheet.Range("J3:J5")
'END DRAFT2

rngItemstable = emptyArr 'Clear the table before assigning later will not get overflow error - Workaround
' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
itemsArr = rngItemstable.value
XrateArr = rngXrate.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
selectionArr4 = rngSelection4.value
selectionArr5 = rngSelection5.value
selectionArr6 = rngSelection6.value
selectionArr7 = rngSelection7.value
selectionArr8 = rngSelection8.value
selectionArr9 = rngSelection9.value
'DRAFT2
selectionArr10 = rngSelection10.value
'END DRAFT2


'Rows with temp data  storage for long lists
Set rng_temp_composition = dbSheet.Range("D2:OJ2")
Set rng_temp_boards = dbSheet.Range("D3:OJ3")
Set rng_temp_customer = dbSheet.Range("D4:OJ4")
Set rng_temp_conversion = dbSheet.Range("D5:OJ5")
Set rng_temp_pallet = dbSheet.Range("D6:OJ6")
Set rng_temp_transport = dbSheet.Range("D7:GKA7")
Set rng_temp_paper = dbSheet.Range("D8:OJ8")
Set rng_temp_packaging = dbSheet.Range("D9:OJ9")
'v4.1
Set rng_temp_tool = dbSheet.Range("D10:OJ10")

rng_temp_composition.ClearContents
rng_temp_boards.ClearContents
rng_temp_customer.ClearContents
rng_temp_conversion.ClearContents
rng_temp_pallet.ClearContents
rng_temp_transport.ClearContents
rng_temp_paper.ClearContents
rng_temp_packaging.ClearContents
'v4.1
rng_temp_tool.ClearContents

temp_boardsArr = rng_temp_composition.value
temp_customerArr = rng_temp_customer.value
temp_conversionArr = rng_temp_conversion.value
temp_palletArr = rng_temp_pallet.value
temp_transportArr = rng_temp_transport.value
temp_paperArr = rng_temp_paper.value
temp_packagingArr = rng_temp_packaging.value
'v4.1
temp_toolArr = rng_temp_tool.value



'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Items array
i = 1
j = 1
For i = LBound(itemsArr) To UBound(itemsArr)
        itemsArr(i, 1) = ""
            For j = LBound(itemsArr, 2) To UBound(itemsArr, 2)
                itemsArr(i, j) = ""
            Next j
Next i

' Empty Selection 1 array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection 2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

' Empty Selection 3 array
i = 1
j = 1
For i = LBound(selectionArr3) To UBound(selectionArr3)
        selectionArr3(i, 1) = ""
            For j = LBound(selectionArr3, 2) To UBound(selectionArr3, 2)
                selectionArr3(i, j) = ""
            Next j
Next i
' Empty Selection 4 array
i = 1
j = 1
For i = LBound(selectionArr4) To UBound(selectionArr4)
        selectionArr4(i, 1) = ""
            For j = LBound(selectionArr4, 2) To UBound(selectionArr4, 2)
                selectionArr(i, j) = ""
            Next j
Next i
' Empty Selection 5 array
i = 1
j = 1
For i = LBound(selectionArr5) To UBound(selectionArr5)
        selectionArr5(i, 1) = ""
            For j = LBound(selectionArr5, 2) To UBound(selectionArr5, 2)
                selectionArr5(i, j) = ""
            Next j
Next i
' Empty Selection 6 array
i = 1
j = 1
For i = LBound(selectionArr6) To UBound(selectionArr6)
        selectionArr6(i, 1) = ""
            For j = LBound(selectionArr6, 2) To UBound(selectionArr6, 2)
                selectionArr6(i, j) = ""
            Next j
Next i
' Empty Selection 7 array
i = 1
j = 1
For i = LBound(selectionArr7) To UBound(selectionArr7)
        selectionArr7(i, 1) = ""
            For j = LBound(selectionArr7, 2) To UBound(selectionArr7, 2)
                selectionArr7(i, j) = ""
            Next j
Next i
' Empty Selection 8 array
i = 1
j = 1
For i = LBound(selectionArr8) To UBound(selectionArr8)
        selectionArr8(i, 1) = ""
            For j = LBound(selectionArr8, 2) To UBound(selectionArr8, 2)
                selectionArr8(i, j) = ""
            Next j
Next i
' Empty Selection 9 array
i = 1
j = 1
For i = LBound(selectionArr9) To UBound(selectionArr9)
        selectionArr9(i, 1) = ""
            For j = LBound(selectionArr9, 2) To UBound(selectionArr9, 2)
                selectionArr9(i, j) = ""
            Next j
Next i

'DRAFT2
' Empty Selection 10 array
i = 1
j = 1
For i = LBound(selectionArr10) To UBound(selectionArr10)
        selectionArr10(i, 1) = ""
            For j = LBound(selectionArr10, 2) To UBound(selectionArr10, 2)
                selectionArr10(i, j) = ""
            Next j
Next i
'END DRAFT2

rngSelection = selectionArr
rngSelection2 = selectionArr2
rngSelection3 = selectionArr3
rngSelection4 = selectionArr4
rngSelection5 = selectionArr5
rngSelection6 = selectionArr6
rngSelection7 = selectionArr7
rngSelection8 = selectionArr8
rngSelection9 = selectionArr9
'DRAFT2
rngSelection10 = selectionArr10
'END DRAFT2


' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

itemsSheet.Cells(7, "E") = "Extra Cost " & salesCurrency & "/1000m2"
'v4.1
'itemsSheet.Cells(11, "G") = "Tool Cost " & salesCurrency




' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Article Group List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_Article_Group_Name Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":P" & j

With itemsSheet.Range("B7").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Customers List
' Fill temporary storage with compositions
j = 1
i = 1
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Customers Then
        temp_customerArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_customerArr) To 395
If Not temp_customerArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_customer = temp_customerArr
rng_temp_customer.Sort Key1:=Range("DB!D4"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D4:" & Cells(4, lastcolumn).Address

If textline = "" Then
Else
With itemsSheet.Range("B9").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If


'
' Load Board Type Depending on Selection
'
'
' Make Board Selection List
' Load Customers List
' Fill temporary boards with compositions
j = 1
i = 1
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = CB_Composition Then
        temp_boardsArr(1, j) = "1-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Purchased_Sheets Then
        temp_boardsArr(1, j) = "2-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Other_Boards Then
        temp_boardsArr(1, j) = "3-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Joined_Boards Then
        temp_boardsArr(1, j) = "4-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_boardsArr) To 395
If Not temp_boardsArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_boards = temp_boardsArr
rng_temp_boards.Sort Key1:=Range("DB!D3"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D3:" & Cells(3, lastcolumn).Address

' Load Board Selection List
If textline = "" Then
Else
With itemsSheet.Range("D4").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If


' Load Color Combinations List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_Color_Combinations Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":H" & j

With itemsSheet.Range("D7").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Printing List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_Yes_No Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":E" & j

With itemsSheet.Range("D8").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Make Conversions Process List
' Fill temporary storage with compositions
j = 1
i = 1
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Converters_A Then
        temp_conversionArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_conversionArr) To 395
If Not temp_conversionArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_conversion = temp_conversionArr
rng_temp_conversion.Sort Key1:=Range("DB!D5"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D5:" & Cells(5, lastcolumn).Address

' Load Conversions List
If textline = "" Then
Else
With itemsSheet.Range("D10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Conversions List
If textline = "" Then
Else
With itemsSheet.Range("D11").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Conversions List
If textline = "" Then
Else
With itemsSheet.Range("D12").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Conversions List
If textline = "" Then
Else
With itemsSheet.Range("D13").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Make Packaging Process List
' Fill temporary storage with compositions
j = 1
i = 1
first = 0
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Packaging_Cost Then
        temp_packagingArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_packagingArr) To 395
If Not temp_packagingArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_packaging = temp_packagingArr
rng_temp_packaging.Sort Key1:=Range("DB!D9"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D9:" & Cells(9, lastcolumn).Address

' Load Packaging List
If textline = "" Then
Else
With itemsSheet.Range("D14").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Make Outs List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_Outs Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":P" & j

' Load Outs List
With itemsSheet.Range("F10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Outs List
With itemsSheet.Range("F11").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Outs List
With itemsSheet.Range("F12").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Outs List
With itemsSheet.Range("F13").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Pallet in FCA List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_Yes_No Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":E" & j

With itemsSheet.Range("H7").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Make Pallet Type
' Fill temporary storage with compositions
j = 1
i = 1
first = 0
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Pallet_cost Then
        temp_palletArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_palletArr) To 395
If Not temp_palletArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_pallet = temp_palletArr
rng_temp_pallet.Sort Key1:=Range("DB!D6"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D6:" & Cells(6, lastcolumn).Address

' Load Pallets List
If textline = "" Then
Else
With itemsSheet.Range("H8").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Make Transport Option
' Fill temporary storage with compositions
j = 1
i = 1
first = 0
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Transport_cost Then
        temp_transportArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_transportArr) To 5000
If Not temp_transportArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_transport = temp_transportArr
rng_temp_transport.Sort Key1:=Range("DB!D7"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D7:" & Cells(7, lastcolumn).Address

' Load Transport Options List
If textline = "" Then
Else
With itemsSheet.Range("H10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

'DRAFT2
' Load Item in PIpeChain
'j = 1
'i = 1
'For i = LBound(dbArr) To UBound(dbArr)
'    If dbArr(i, 1) = List_Yes_No Then
'    j = i
'    Exit For
'    Else
'    End If
'Next i
'
'textline = "=DB!D" & j & ":E" & j

'With itemsSheet.Range("B15").Validation
' .Delete
' .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
' Operator:=xlBetween, Formula1:=textline
' .IgnoreBlank = True
' .InCellDropdown = True
' .InputTitle = ""
' .ErrorTitle = ""
' .InputMessage = ""
' .ErrorMessage = ""
' .ShowInput = True
' .ShowError = True
'End With
'END DRAFT2

'v4.1
' Make Tool Type
' Fill temporary storage with compositions
j = 1
i = 1
first = 0
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Tool_cost Then
        temp_toolArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_toolArr) To 395
If Not temp_toolArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_tool = temp_toolArr
rng_temp_tool.Sort Key1:=Range("DB!D10"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D10:" & Cells(10, lastcolumn).Address

' Load Tool List
If textline = "" Then
Else
With itemsSheet.Range("H11").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If


' Load Items Table
i = 1
j = 1
For i = UBound(dbArr) To LBound(dbArr) Step -1
    If dbArr(i, 1) = Item Then
        'DRAFT2
        itemsArr(j, 1) = dbArr(i, 4)
        itemsArr(j, 2) = dbArr(i, 7)
        itemsArr(j, 3) = dbArr(i, 6)
        itemsArr(j, 4) = dbArr(i, 8)
        itemsArr(j, 5) = dbArr(i, 15)
        itemsArr(j, 6) = dbArr(i, 16)
        itemsArr(j, 7) = dbArr(i, 17)
        itemsArr(j, 8) = dbArr(i, 27)
        If dbArr(i, 55) = "" Then
        itemsArr(j, 8) = ""
        Else
        itemsArr(j, 8) = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) 'Board Secltion
        End If
        itemsArr(j, 9) = dbArr(i, 28)
        itemsArr(j, 10) = dbArr(i, 25)
        itemsArr(j, 11) = dbArr(i, 26)
        'END DRAFT2
        
        ' v4,2
        itemsArr(j, 12) = dbArr(i, 40)
        
        If Left(dbArr(i, 55), 1) = 1 Then
        itemsArr(j, 13) = dbArr(i, 43)
        Else
        itemsArr(j, 13) = dbArr(i, 45)
        End If
        
        
        itemsArr(j, 14) = dbArr(i, 29)
        itemsArr(j, 15) = dbArr(i, 30)
        itemsArr(j, 16) = dbArr(i, 31)
        itemsArr(j, 17) = dbArr(i, 32)
        itemsArr(j, 18) = dbArr(i, 33)
        itemsArr(j, 19) = dbArr(i, 34)
        itemsArr(j, 20) = dbArr(i, 35)
        itemsArr(j, 21) = dbArr(i, 36)
        itemsArr(j, 22) = dbArr(i, 37)
        itemsArr(j, 23) = dbArr(i, 38)
        itemsArr(j, 24) = dbArr(i, 39)
        itemsArr(j, 25) = dbArr(i, 51)
        j = j + 1
    Else
    End If
Next i
rngItemstable = itemsArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub JoinedBoards_Delete()
    Dim dbSheet As Worksheet
    Dim joinedboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set joinedboardSheet = ThisWorkbook.Sheets("Joined Boards")

' Set array ranges
Set rngSelection = joinedboardSheet.Range("B5:B12")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) Then
                If MsgBox("Joined Board exist in at least one Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Joined Board in use!") = vbNo Then Exit Sub
                    Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Joined_Boards Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
JoinedBoards_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub JoinedBoards_Save()
    Dim dbSheet As Worksheet
    Dim joinedboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngCompObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set joinedboardSheet = ThisWorkbook.Sheets("Joined Boards")

' Set array ranges
Set rngSelection = joinedboardSheet.Range("B5:B13")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'
If selectionArr(1, 1) = "" Then
    MsgBox "Name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  name"
    GoTo endXLupdate
    Else
End If

If selectionArr(3, 1) = "" Then
    MsgBox "Quality cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Composition name"
    GoTo endXLupdate
    Else
End If

If selectionArr(4, 1) = "" Then
    MsgBox "MSS cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  MSS Status"
    GoTo endXLupdate
    Else
End If

'If selectionArr(8, 1) = "" Then
'    MsgBox "Weight cannot be empty" & vbNewLine _
'            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Weight"
'    GoTo endXLupdate
'    Else
'End If

' v4.1
If selectionArr(9, 1) = "" Then
    MsgBox "Gluing cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Gluing Cost"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(8, 1)) Then
    MsgBox "There is non numeric data for weight" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Cost Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(9, 1)) Then
    MsgBox "There is non numeric data for costs" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Cost Number Error"
    GoTo endXLupdate
    Else
End If

i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Composition
                dbArr(firstemptyrow, 1) = Joined_Boards
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Joined_Boards"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                dbArr(firstemptyrow, 8) = selectionArr(5, 1) ' Board 1 Name
                'dbArr(firstemptyrow, 9) = Left(selectionArr(5, 1), Len(selectionArr(5, 1)) - 2) ' Board Number
                dbArr(firstemptyrow, 9) = Left(selectionArr(5, 1), 1) ' Board Number
                dbArr(firstemptyrow, 10) = selectionArr(6, 1) 'Board 2 name
                dbArr(firstemptyrow, 11) = Left(selectionArr(6, 1), 1) ' Board 2 Number
                dbArr(firstemptyrow, 12) = selectionArr(7, 1) ' Board 3 Name
                dbArr(firstemptyrow, 13) = Left(selectionArr(7, 1), 1) ' Board 3 Number
                dbArr(firstemptyrow, 15) = selectionArr(8, 1) '
                dbArr(firstemptyrow, 14) = selectionArr(9, 1) '
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Joined_Boards Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                dbArr(i, 8) = selectionArr(5, 1)
                dbArr(i, 9) = Left(selectionArr(5, 1), 1)
                dbArr(i, 10) = selectionArr(6, 1)
                dbArr(i, 11) = Left(selectionArr(6, 1), 1)
                dbArr(i, 12) = selectionArr(7, 1)
                dbArr(i, 13) = Left(selectionArr(7, 1), 1)
                dbArr(i, 15) = selectionArr(8, 1)
                dbArr(i, 14) = selectionArr(9, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
JoinedBoards_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub JoinedBoards_Clear()
    Dim dbSheet As Worksheet
    Dim joinedboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set joinedboardSheet = ThisWorkbook.Sheets("Joined Boards")


' Empty Composition selection area
joinedboardSheet.Cells(5, "B") = ""
joinedboardSheet.Cells(6, "B") = ""
joinedboardSheet.Cells(7, "B") = ""
joinedboardSheet.Cells(8, "B") = ""
joinedboardSheet.Cells(9, "B") = ""
joinedboardSheet.Cells(10, "B") = ""
joinedboardSheet.Cells(11, "B") = ""
joinedboardSheet.Cells(12, "B") = ""
joinedboardSheet.Cells(13, "B") = ""

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub JoinedBoards_LoadSelection()
    Dim dbSheet As Worksheet
    Dim joinedboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set joinedboardSheet = ThisWorkbook.Sheets("Joined Boards")

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = joinedboardSheet.Range("B5:B13")
Set rngTable = joinedboardSheet.Range("A17:H101")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
tableArr = rngTable.value

' Where is the dropdown located
dropdown = joinedboardSheet.Cells(2, "A")

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
' and UI
rngSelection = selectionArr

selectedRow = 17
selectedRow = Selection.row
If selectedRow < 17 Or selectedRow > 101 Then
    selectedRow = 17
    Else
End If
' Load Selection
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 48 Then
        If dbArr(i, 4) = joinedboardSheet.Cells(selectedRow, 1) Then
            selectionArr(1, 1) = dbArr(i, 4)
            selectionArr(2, 1) = dbArr(i, 5)
            selectionArr(3, 1) = dbArr(i, 6)
            selectionArr(4, 1) = dbArr(i, 7)
            selectionArr(5, 1) = dbArr(i, 8)
            selectionArr(6, 1) = dbArr(i, 10)
            selectionArr(7, 1) = dbArr(i, 12)
            selectionArr(8, 1) = dbArr(i, 15)
            selectionArr(9, 1) = dbArr(i, 14)
            Exit For
        Else
        End If
    Else
    End If
Next i
rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub JoinedBoards_Load()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim flutes As String
    Dim tlp As String
    Dim f1p As String
    Dim m1p As String
    Dim f2p As String
    Dim m2p As String
    Dim f3p As String
    Dim blp As String
    Dim starch As String
    Dim mss As String
    
    Dim tlw As Double
    Dim f1w As Double
    Dim m1w As Double
    Dim f2w As Double
    Dim m2w As Double
    Dim f3w As Double
    Dim blw As Double
    Dim stw As Double
    Dim starch_w As Double
    Dim totalweight As Double
    Dim gluingcost As Double
    
    Dim f1_factor As Double
    Dim f2_factor As Double
    Dim f3_factor As Double
    
    Dim f1_type As String
    Dim f2_type As String
    Dim f3_type As String
    
    Dim tlc As Double
    Dim f1c As Double
    Dim m1c As Double
    Dim f2c As Double
    Dim m2c As Double
    Dim f3c As Double
    Dim blc As Double
    Dim stc As Double
    Dim totalcost As Double
    Dim xrate As Double
    
    Dim purchasecost As Double
    Dim palletcost As Double
    Dim distributioncost As Double
    Dim cost As Double
    
    Dim rngDB As Range
    Dim rngCBtable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    Dim rngFlutes As Range
    
    Dim rngCBboard As Range
    Dim rngOTHboard As Range
    Dim rngINHboard As Range
    
    Dim dbArr() As Variant
    Dim cbArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant
    Dim fluteArr() As Variant
    
    Dim corrugatedboardArr() As Variant
    Dim otherboardArr() As Variant
    Dim inhouseboardArr() As Variant
    
    'Below to store validation lists on DB sheet to avoid 256 char limitation in validation delimited lists
    Dim lastcolumn As Long
    
    Dim rng_temp_composition As Range
    Dim rng_temp_boards As Range
    Dim rng_temp_customer As Range
    Dim rng_temp_conversion As Range
    Dim rng_temp_pallet As Range
    Dim rng_temp_transport As Range
    Dim rng_temp_paper As Range
    
    Dim temp_compositionArr() As Variant
    Dim temp_boardsArr() As Variant
    Dim temp_customerArr() As Variant
    Dim temp_conversionArr() As Variant
    Dim temp_palletArr() As Variant
    Dim temp_transportArr() As Variant
    Dim temp_paperArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")
Set joinedboardSheet = ThisWorkbook.Sheets("Joined Boards")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A16").Activate
joinedboardSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngCBtable = joinedboardSheet.Range("A17:J101")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = joinedboardSheet.Range("B5:B13")
Set rngXrate = dbSheet.Range("A1:B50")
Set rngFlute = cb_compositionsSheet.Range("G7:H15")

Set rngCBboard = dbSheet.Range("A1:B100")
Set rngOTHboard = dbSheet.Range("A1:B100")
Set rngINHboard = dbSheet.Range("A1:B100")

'Rows with temp data  storage for long lists
Set rng_temp_composition = dbSheet.Range("D2:OJ2")
Set rng_temp_boards = dbSheet.Range("D3:OJ3")
Set rng_temp_customer = dbSheet.Range("D4:OJ4")
Set rng_temp_conversion = dbSheet.Range("D5:OJ5")
Set rng_temp_pallet = dbSheet.Range("D6:OJ6")
Set rng_temp_transport = dbSheet.Range("D7:ALL7")
Set rng_temp_paper = dbSheet.Range("D8:OJ8")

rng_temp_composition.ClearContents
rng_temp_boards.ClearContents
rng_temp_customer.ClearContents
rng_temp_conversion.ClearContents
rng_temp_pallet.ClearContents
rng_temp_transport.ClearContents
rng_temp_paper.ClearContents
temp_boardsArr = rng_temp_composition.value
temp_customerArr = rng_temp_customer.value
temp_conversionArr = rng_temp_conversion.value
temp_palletArr = rng_temp_pallet.value
temp_transportArr = rng_temp_transport.value
temp_paperArr = rng_temp_paper.value

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
cbArr = rngCBtable.value
XrateArr = rngXrate.value
fluteArr = rngFlute.value

corrugatedboardArr = rngCBboard.value
otherboardArr = rngOTHboard.value
inhouseboardArr = rngINHboard.value


' Empty Corrugated Board array
i = 1
j = 1
For i = LBound(corrugatedboardArr) To UBound(corrugatedboardArr)
        corrugatedboardArr(i, 1) = ""
            For j = LBound(corrugatedboardArr, 2) To UBound(corrugatedboardArr, 2)
                corrugatedboardArr(i, j) = ""
            Next j
Next i

' Empty Other Board array
i = 1
j = 1
For i = LBound(otherboardArr) To UBound(otherboardArr)
        otherboardArr(i, 1) = ""
            For j = LBound(otherboardArr, 2) To UBound(otherboardArr, 2)
                otherboardArr(i, j) = ""
            Next j
Next i

' Empty Inhouse Board array
i = 1
j = 1
For i = LBound(inhouseboardArr) To UBound(inhouseboardArr)
        inhouseboardArr(i, 1) = ""
            For j = LBound(inhouseboardArr, 2) To UBound(inhouseboardArr, 2)
                inhouseboardArr(i, j) = ""
            Next j
Next i

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Other Board array
i = 1
j = 1
For i = LBound(cbArr) To UBound(cbArr)
        cbArr(i, 1) = ""
            For j = LBound(cbArr, 2) To UBound(cbArr, 2)
                cbArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Empty Flute array values only
fluteArr(1, 2) = ""
fluteArr(2, 2) = ""
fluteArr(3, 2) = ""
fluteArr(4, 2) = ""
fluteArr(5, 2) = ""
fluteArr(6, 2) = ""
fluteArr(7, 2) = ""
fluteArr(8, 2) = ""

' Load Flute Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Flute_table Then
        fluteArr(1, 2) = dbArr(i, 4)
        fluteArr(2, 2) = dbArr(i, 5)
        fluteArr(3, 2) = dbArr(i, 6)
        fluteArr(4, 2) = dbArr(i, 7)
        fluteArr(5, 2) = dbArr(i, 8)
        fluteArr(6, 2) = dbArr(i, 9)
        fluteArr(7, 2) = dbArr(i, 10)
        fluteArr(8, 2) = dbArr(i, 11)
        j = j + 1
        Exit For
    Else
    End If
Next i
rngFlute = fluteArr




' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i


' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i
joinedboardSheet.Cells(16, "I") = "Cost " & salesCurrency & "/1000m2"
joinedboardSheet.Cells(16, "J") = "Cost " & compCurrency & "/1000m2"

' Load MSS List
j = 1
i = 1
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 35 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":L" & j
With joinedboardSheet.Range("B8").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

'DRAFT2
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 33 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":AC" & j

With joinedboardSheet.Range("B7").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
'END DRAFT2

' Load Board List
' Fill temporary storage with boards
j = 1
i = 1
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 12 Then
        temp_boardsArr(1, j) = "1-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 13 Then
        temp_boardsArr(1, j) = "2-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 47 Then
        temp_boardsArr(1, j) = "3-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_boardsArr) To 395
If Not temp_boardsArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_boards = temp_boardsArr
rng_temp_boards.Sort Key1:=Range("DB!D3"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D3:" & Cells(3, lastcolumn).Address

If textline = "" Then
Else
With joinedboardSheet.Range("B9").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

If textline = "" Then
Else
With joinedboardSheet.Range("B10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

If textline = "" Then
Else
With joinedboardSheet.Range("B11").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Inhouse Costs
tlw = 0
f1w = 0
m1w = 0
f2w = 0
m2w = 0
f3w = 0
blw = 0
stw = 0
tlc = 0
f1c = 0
m1c = 0
f2c = 0
m2c = 0
f3c = 0
blc = 0
stc = 0
f1_factor = 0
f2_factor = 0
f3_factor = 0
f1_type = ""
f2_type = ""
f3_type = ""
starch_w = 0
totalweight = 0
' Load Compositions Table
i = 1
j = 1
l = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = CB_Composition Then
        tlw = 0
        f1w = 0
        m1w = 0
        f2w = 0
        m2w = 0
        f3w = 0
        blw = 0
        stw = 0
        tlc = 0
        f1c = 0
        m1c = 0
        f2c = 0
        m2c = 0
        f3c = 0
        blc = 0
        stc = 0
        f1_factor = 0
        f2_factor = 0
        f3_factor = 0
        f1_type = ""
        f2_type = ""
        f3_type = ""
        starch_w = 0
        totalweight = 0

        tlw = dbArr(i, 13)
        'f1w = dbArr(i, 16)
        m1w = dbArr(i, 20)
        'f2w = dbArr(i, 23)
        m2w = dbArr(i, 27)
        'f3w = dbArr(i, 30)
        blw = dbArr(i, 34)
        stw = dbArr(i, 37)
        
        f1_type = dbArr(i, 17)
        f2_type = dbArr(i, 24)
        f3_type = dbArr(i, 31)
        
        On Error Resume Next
        f1_factor = Application.WorksheetFunction.VLookup(f1_type, fluteArr, 2, False)
        f2_factor = Application.WorksheetFunction.VLookup(f2_type, fluteArr, 2, False)
        f3_factor = Application.WorksheetFunction.VLookup(f2_type, fluteArr, 2, False)
        On Error GoTo 0

        f1w = f1_factor * dbArr(i, 16)
        f2w = f2_factor * dbArr(i, 23)
        f3w = f3_factor * dbArr(i, 30)
        '
        ' Totalcost
        '
        
        ' Topliner Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 12) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    tlc = (dbArr(k, 8) * xrate) * tlw / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' F1 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 15) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    f1c = (dbArr(k, 8) * xrate) / 1000 * f1w
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' M1 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 19) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    m1c = (dbArr(k, 8) * xrate) * m1w / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' F2 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 22) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    f2c = (dbArr(k, 8) * xrate) / 1000 * f2w
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' M2 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 26) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    m2c = (dbArr(k, 8) * xrate) * m2w / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' F3 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 29) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    f3c = (dbArr(k, 8) * xrate) / 1000 * f3w
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' BL Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 33) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    blc = (dbArr(k, 8) * xrate) / 1000 * blw
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' Starch Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 36) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    stc = (dbArr(k, 8) * xrate) * stw / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        inhouseboardArr(j, 1) = dbArr(i, 4)
        inhouseboardArr(j, 2) = tlc + f1c + m1c + f2c + m2c + f3c + blc + stc
        j = j + 1
        l = l + 1
    Else
    End If
Next i

' Load Corrugated Board Table
purchasecost = 0
palletcost = 0
distributioncost = 0
i = 1
l = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Purchased_Sheets Then
        On Error Resume Next
        purchasecost = Application.WorksheetFunction.VLookup(dbArr(i, 10), XrateArr, 2, False) _
                        * dbArr(i, 9)
        palletcost = Application.WorksheetFunction.VLookup(dbArr(i, 12), XrateArr, 2, False) _
                        * dbArr(i, 11)
        distributioncost = Application.WorksheetFunction.VLookup(dbArr(i, 14), XrateArr, 2, False) _
                        * dbArr(i, 13)
        On Error GoTo 0
        corrugatedboardArr(l, 1) = dbArr(i, 4)
        corrugatedboardArr(l, 2) = purchasecost + palletcost + distributioncost
        l = l + 1
    Else
    End If
Next i

' Load Corrugated Board Table
purchasecost = 0
palletcost = 0
distributioncost = 0
i = 1
l = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Other_Boards Then
        On Error Resume Next
        purchasecost = Application.WorksheetFunction.VLookup(dbArr(i, 11), XrateArr, 2, False) _
                        * dbArr(i, 10)
        palletcost = Application.WorksheetFunction.VLookup(dbArr(i, 13), XrateArr, 2, False) _
                        * dbArr(i, 12)
        distributioncost = Application.WorksheetFunction.VLookup(dbArr(i, 15), XrateArr, 2, False) _
                        * dbArr(i, 14)
        On Error GoTo 0
        otherboardArr(l, 1) = dbArr(i, 4)
        otherboardArr(l, 2) = purchasecost + palletcost + distributioncost
        l = l + 1
    Else
    End If
Next i




' Load Joined Board Table
purchasecost = 0
palletcost = 0
distributioncost = 0
cost = 0
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    cost = 0
            
    If dbArr(i, 1) = Joined_Boards Then
        cbArr(j, 1) = dbArr(i, 4)
        cbArr(j, 2) = dbArr(i, 5)
        cbArr(j, 3) = dbArr(i, 6)
        cbArr(j, 4) = dbArr(i, 7)
        'V4.1
        'cbArr(j, 5) = dbArr(i, 15)
        cbArr(j, 6) = dbArr(i, 8)
        cbArr(j, 7) = dbArr(i, 10)
        cbArr(j, 8) = dbArr(i, 12)

        If dbArr(i, 9) = 1 Then
            k = 1
            For k = LBound(inhouseboardArr) To UBound(inhouseboardArr)
                If inhouseboardArr(k, 1) = Right(dbArr(i, 8), Len(dbArr(i, 8)) - 2) Then
                cost = cost + inhouseboardArr(k, 2)
                Else
                End If
                
            Next k
        Else
        End If
        
        If dbArr(i, 9) = 2 Then
            k = 1
            For k = LBound(corrugatedboardArr) To UBound(corrugatedboardArr)
                If corrugatedboardArr(k, 1) = Right(dbArr(i, 8), Len(dbArr(i, 8)) - 2) Then
                cost = cost + corrugatedboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 9) = 3 Then
            k = 1
            For k = LBound(otherboardArr) To UBound(otherboardArr)
                If otherboardArr(k, 1) = Right(dbArr(i, 8), Len(dbArr(i, 8)) - 2) Then
                cost = cost + otherboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 11) = 1 Then
            k = 1
            For k = LBound(inhouseboardArr) To UBound(inhouseboardArr)
                If inhouseboardArr(k, 1) = Right(dbArr(i, 10), Len(dbArr(i, 10)) - 2) Then
                cost = cost + inhouseboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 11) = 2 Then
            k = 1
            For k = LBound(corrugatedboardArr) To UBound(corrugatedboardArr)
                If corrugatedboardArr(k, 1) = Right(dbArr(i, 10), Len(dbArr(i, 10)) - 2) Then
                cost = cost + corrugatedboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 11) = 3 Then
            k = 1
            For k = LBound(otherboardArr) To UBound(otherboardArr)
                If otherboardArr(k, 1) = Right(dbArr(i, 10), Len(dbArr(i, 10)) - 2) Then
                cost = cost + otherboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 13) = 1 Then
            k = 1
            For k = LBound(inhouseboardArr) To UBound(inhouseboardArr)
                If inhouseboardArr(k, 1) = Right(dbArr(i, 12), Len(dbArr(i, 12)) - 2) Then
                cost = cost + inhouseboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 13) = 2 Then
            k = 1
            For k = LBound(corrugatedboardArr) To UBound(corrugatedboardArr)
                If corrugatedboardArr(k, 1) = Right(dbArr(i, 12), Len(dbArr(i, 12)) - 2) Then
                cost = cost + corrugatedboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        If dbArr(i, 13) = 3 Then
            k = 1
            For k = LBound(otherboardArr) To UBound(otherboardArr)
                If otherboardArr(k, 1) = Right(dbArr(i, 12), Len(dbArr(i, 12)) - 2) Then
                cost = cost + otherboardArr(k, 2)
                Else
                End If
            Next k
        Else
        End If
        
        ' Gluings
        ' Get number of gluings
        count = 0
        gluingcost = 0
        If dbArr(i, 8) = "" Then
        Else
            count = count + 1
        End If
        
        If dbArr(i, 10) = "" Then
        Else
            count = count + 1
        End If
        
        If dbArr(i, 12) = "" Then
        Else
            count = count + 1
        End If
        
        gluingcost = dbArr(i, 14) * (count - 1)
        
        cbArr(j, 9) = cost + gluingcost
        cbArr(j, 10) = cbArr(j, 9) / compCurrencyVal
        j = j + 1
    Else
    End If
Next i
rngCBtable = cbArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub OtherBoards_Delete()
    Dim dbSheet As Worksheet
    Dim otherboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set otherboardSheet = ThisWorkbook.Sheets("Other Boards")

' Set array ranges
Set rngSelection = otherboardSheet.Range("B5:D14")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) Then
                If MsgBox("Other Board exist in at least one Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Other Board in use!") = vbNo Then Exit Sub
                    Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Other_Boards Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
OtherBoards_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub OtherBoards_Save()
    Dim dbSheet As Worksheet
    Dim otherboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngCompObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set otherboardSheet = ThisWorkbook.Sheets("Other Boards")

' Set array ranges
Set rngSelection = otherboardSheet.Range("B5:D14")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'
If selectionArr(1, 1) = "" Then
    MsgBox "Name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  name"
    GoTo endXLupdate
    Else
End If

If selectionArr(3, 1) = "" Then
    MsgBox "Quality cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Composition name"
    GoTo endXLupdate
    Else
End If

If selectionArr(4, 1) = "" Then
    MsgBox "MSS Status cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  MSS name"
    GoTo endXLupdate
    Else
End If

If selectionArr(5, 1) = "" Then
    MsgBox "Weight cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Weight"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(5, 1)) Then
    MsgBox "There is non numeric data for weight" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Weight Number Error"
    GoTo endXLupdate
    Else
End If

If selectionArr(6, 1) = "" Then
    MsgBox "Manufacturers name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Manufacturer name"
    GoTo endXLupdate
    Else
End If

If selectionArr(8, 1) = "" Then
    MsgBox "Purchase Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Purchase Cost"
    GoTo endXLupdate
    Else
End If

If selectionArr(9, 1) = "" Then
    MsgBox "Pallet Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Pallet Cost"
    GoTo endXLupdate
    Else
End If

If selectionArr(10, 1) = "" Then
    MsgBox "Distribution Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Distribution Cost"
    GoTo endXLupdate
    Else
End If

i = 8
For i = 8 To 10
If Not IsNumeric(selectionArr(i, 1)) Then
    MsgBox "There is non numeric data for costs" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Cost Number Error"
    GoTo endXLupdate
    Else
End If
Next i

i = 8
For i = 8 To 10
If selectionArr(i, 3) = "" Then
    MsgBox "Purchase Currency cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Purchase Currency"
    GoTo endXLupdate
    Else
End If
Next i


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Composition
                dbArr(firstemptyrow, 1) = Other_Boards
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Other_Boards"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 7) = selectionArr(3, 1)
                dbArr(firstemptyrow, 16) = selectionArr(4, 1)
                dbArr(firstemptyrow, 17) = selectionArr(5, 1)
                dbArr(firstemptyrow, 8) = selectionArr(6, 1)
                dbArr(firstemptyrow, 9) = selectionArr(7, 1)
                dbArr(firstemptyrow, 10) = selectionArr(8, 1)
                dbArr(firstemptyrow, 11) = selectionArr(8, 3)
                dbArr(firstemptyrow, 12) = selectionArr(9, 1)
                dbArr(firstemptyrow, 13) = selectionArr(9, 3)
                dbArr(firstemptyrow, 14) = selectionArr(10, 1)
                dbArr(firstemptyrow, 15) = selectionArr(10, 3)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Other_Boards Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 7) = selectionArr(3, 1)
                dbArr(i, 16) = selectionArr(4, 1)
                dbArr(i, 17) = selectionArr(5, 1)
                dbArr(i, 8) = selectionArr(6, 1)
                dbArr(i, 9) = selectionArr(7, 1)
                dbArr(i, 10) = selectionArr(8, 1)
                dbArr(i, 11) = selectionArr(8, 3)
                dbArr(i, 12) = selectionArr(9, 1)
                dbArr(i, 13) = selectionArr(9, 3)
                dbArr(i, 14) = selectionArr(10, 1)
                dbArr(i, 15) = selectionArr(10, 3)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
OtherBoards_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub OtherBoards_Clear()
    Dim dbSheet As Worksheet
    Dim otherboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set otherboardSheet = ThisWorkbook.Sheets("Other Boards")

' Empty Composition selection area
otherboardSheet.Cells(5, "B") = ""
otherboardSheet.Cells(6, "B") = ""
otherboardSheet.Cells(7, "B") = ""
otherboardSheet.Cells(8, "B") = ""
otherboardSheet.Cells(9, "B") = ""
otherboardSheet.Cells(10, "B") = ""
otherboardSheet.Cells(11, "B") = ""
otherboardSheet.Cells(12, "B") = ""
otherboardSheet.Cells(13, "B") = ""
otherboardSheet.Cells(14, "B") = ""
otherboardSheet.Cells(12, "D") = ""
otherboardSheet.Cells(13, "D") = ""
otherboardSheet.Cells(14, "D") = ""

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub OtherBoards_LoadSelection()
    Dim dbSheet As Worksheet
    Dim otherboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set otherboardSheet = ThisWorkbook.Sheets("Other Boards")

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = otherboardSheet.Range("B5:D14")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
' and UI
otherboardSheet.Cells(5, "B") = ""
otherboardSheet.Cells(6, "B") = ""
otherboardSheet.Cells(7, "B") = ""
otherboardSheet.Cells(8, "B") = ""
otherboardSheet.Cells(9, "B") = ""
otherboardSheet.Cells(10, "B") = ""
otherboardSheet.Cells(11, "B") = ""
otherboardSheet.Cells(12, "B") = ""
otherboardSheet.Cells(13, "B") = ""
otherboardSheet.Cells(14, "B") = ""
otherboardSheet.Cells(12, "D") = ""
otherboardSheet.Cells(13, "D") = ""
otherboardSheet.Cells(14, "D") = ""

selectedRow = 18
selectedRow = Selection.row
If selectedRow < 18 Or selectedRow > 102 Then
    selectedRow = 18
    Else
End If
' Load Selection
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 47 Then
        If dbArr(i, 4) = otherboardSheet.Cells(selectedRow, 1) Then
            otherboardSheet.Cells(5, "B") = dbArr(i, 4)
            otherboardSheet.Cells(6, "B") = dbArr(i, 5)
            otherboardSheet.Cells(7, "B") = dbArr(i, 7)
            otherboardSheet.Cells(8, "B") = dbArr(i, 16)
            otherboardSheet.Cells(9, "B") = dbArr(i, 17)
            otherboardSheet.Cells(10, "B") = dbArr(i, 8)
            otherboardSheet.Cells(11, "B") = dbArr(i, 9)
            otherboardSheet.Cells(12, "B") = dbArr(i, 10)
            otherboardSheet.Cells(13, "B") = dbArr(i, 12)
            otherboardSheet.Cells(14, "B") = dbArr(i, 14)
            otherboardSheet.Cells(12, "D") = dbArr(i, 11)
            otherboardSheet.Cells(13, "D") = dbArr(i, 13)
            otherboardSheet.Cells(14, "D") = dbArr(i, 15)
            Exit For
        Else
        End If
    Else
    End If
Next i

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub OtherBoards_Load()
    Dim dbSheet As Worksheet
    Dim otherboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    Dim purchasecost As Double
    Dim palletcost As Double
    Dim transportcost As Double
    Dim landedcost As Double
    
    Dim rngDB As Range
    Dim rngCBtable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim cbArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set otherboardSheet = ThisWorkbook.Sheets("Other Boards")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A17").Activate
otherboardSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngCBtable = otherboardSheet.Range("A18:H102")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = otherboardSheet.Range("B5:B14")
Set rngXrate = dbSheet.Range("A1:B50")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
cbArr = rngCBtable.value
XrateArr = rngXrate.value


' Empty List in A2
otherboardSheet.Cells(2, "A") = ""

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Other Board array
i = 1
j = 1
For i = LBound(cbArr) To UBound(cbArr)
        cbArr(i, 1) = ""
            For j = LBound(cbArr, 2) To UBound(cbArr, 2)
                cbArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
' ...and in UI
otherboardSheet.Cells(5, "B") = ""
otherboardSheet.Cells(6, "B") = ""
otherboardSheet.Cells(7, "B") = ""
otherboardSheet.Cells(8, "B") = ""
otherboardSheet.Cells(9, "B") = ""
otherboardSheet.Cells(10, "B") = ""
otherboardSheet.Cells(11, "B") = ""
otherboardSheet.Cells(12, "B") = ""
otherboardSheet.Cells(13, "B") = ""
otherboardSheet.Cells(14, "B") = ""
otherboardSheet.Cells(12, "D") = ""
otherboardSheet.Cells(13, "D") = ""
otherboardSheet.Cells(14, "D") = ""


' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i


' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i

otherboardSheet.Cells(17, "G") = "Landed Cost " & salesCurrency & "/1000m2"
otherboardSheet.Cells(17, "H") = "Landed Cost " & compCurrency & "/1000m2"



' Load MSS List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 31 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":AO" & j

With otherboardSheet.Range("D12").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


With otherboardSheet.Range("D13").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


With otherboardSheet.Range("D14").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load MSS List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 35 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":L" & j

With otherboardSheet.Range("B8").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

'DRAFT2
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 33 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":AC" & j

With otherboardSheet.Range("B7").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
'END DRAFT2

' Load Corrugated Board Table
purchasecost = 0
palletcost = 0
distributioncost = 0
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Other_Boards Then
        cbArr(j, 1) = dbArr(i, 4)
        cbArr(j, 2) = dbArr(i, 5)
        cbArr(j, 3) = dbArr(i, 7)
        cbArr(j, 4) = dbArr(i, 8)
        cbArr(j, 5) = dbArr(i, 16)
        cbArr(j, 6) = dbArr(i, 17)
        On Error Resume Next
        purchasecost = Application.WorksheetFunction.VLookup(dbArr(i, 11), XrateArr, 2, False) _
                        * dbArr(i, 10)
        palletcost = Application.WorksheetFunction.VLookup(dbArr(i, 13), XrateArr, 2, False) _
                        * dbArr(i, 12)
        distributioncost = Application.WorksheetFunction.VLookup(dbArr(i, 15), XrateArr, 2, False) _
                        * dbArr(i, 14)
        On Error GoTo 0
        cbArr(j, 7) = purchasecost + palletcost + distributioncost
        cbArr(j, 8) = cbArr(j, 7) / compCurrencyVal
        
        j = j + 1
    Else
    End If
Next i
rngCBtable = cbArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub PPfoot_Save()
    Dim dbSheet As Worksheet
    Dim ppfootSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    'DRAFT2
    Const Foot_180x90x100 As Long = 67
    Const Foot_140x90x100 As Long = 68
    Const Foot_90x90x100 As Long = 69
    Const Replacement_Foot_180x90x100 As Long = 70
    Const Replacement_Foot_140x90x100 As Long = 71
    Const Replacement_Foot_90x90x100 As Long = 72
    'END DRAFT2

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long

    Dim rngDB As Range
    Dim rngPP As Range
    Dim rngOut As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim ppArr() As Variant
    Dim dbObjectArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set ppfootSheet = ThisWorkbook.Sheets("PP Foot")



' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
'DRAFT2
Set rngPP = ppfootSheet.Range("B4:I15")
'END DRAFT2
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
ppArr = rngPP.value
dbObjectArr = rngDBObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

'
' ERROR CHECK
'

i = 1
For i = 1 To 12
If Not IsNumeric(ppArr(i, 2)) Then
    MsgBox "There is non numeric data in the Item Cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(ppArr(i, 4)) Then
    MsgBox "There is non numeric data in the Material Cost percentage fields" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(ppArr(i, 6)) Then
    MsgBox "There is non numeric data in the Gluing cost fields" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(ppArr(i, 8)) Then
    MsgBox "There is non numeric data in the Weight fields" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' v4.1
If Not ppArr(i, 2) = "" And ppArr(i, 4) = "" Then
    MsgBox "Material share cannot be empty if foot have a price" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Material Share"
    GoTo endXLupdate
    Else
End If

If Not ppArr(i, 2) = "" And ppArr(i, 7) = "" Then
    MsgBox "MSS Status cannot be empty if foot have a price" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty MSS Status"
    GoTo endXLupdate
    Else
End If

If Not ppArr(i, 2) = "" And ppArr(i, 8) = "" Then
    MsgBox "Weight cannot be empty if foot have a price" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Weight"
    GoTo endXLupdate
    Else
End If

Next i

' Save 180x90
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Foot_180x90 Then
                dbArr(i, 4) = ppArr(1, 1)
                dbArr(i, 30) = ppArr(1, 2)
                dbArr(i, 27) = ppArr(1, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(1, 4)
                End If
                dbArr(i, 31) = ppArr(1, 6)
                dbArr(i, 32) = ppArr(1, 7)
                dbArr(i, 33) = ppArr(1, 8)
                Exit For
            Else
            End If
Next i

' Save 140x90
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Foot_140x90 Then
                dbArr(i, 4) = ppArr(2, 1)
                dbArr(i, 30) = ppArr(2, 2)
                dbArr(i, 27) = ppArr(2, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(2, 4)
                End If
                dbArr(i, 31) = ppArr(2, 6)
                dbArr(i, 32) = ppArr(2, 7)
                dbArr(i, 33) = ppArr(2, 8)
                Exit For
            Else
            End If
Next i

' Save 90x90
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Foot_90x90 Then
                dbArr(i, 4) = ppArr(3, 1)
                dbArr(i, 30) = ppArr(3, 2)
                dbArr(i, 27) = ppArr(3, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(3, 4)
                End If
                dbArr(i, 31) = ppArr(3, 6)
                dbArr(i, 32) = ppArr(3, 7)
                dbArr(i, 33) = ppArr(3, 8)
                Exit For
            Else
            End If
Next i

' Save Replacement 180x90
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Replacement_Foot_180x90 Then
                dbArr(i, 4) = ppArr(4, 1)
                dbArr(i, 30) = ppArr(4, 2)
                dbArr(i, 27) = ppArr(4, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(4, 4)
                End If
                dbArr(i, 31) = ppArr(4, 6)
                dbArr(i, 32) = ppArr(4, 7)
                dbArr(i, 33) = ppArr(4, 8)
                Exit For
            Else
            End If
Next i

' Save Replacement 140x90
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Replacement_Foot_140x90 Then
                dbArr(i, 4) = ppArr(5, 1)
                dbArr(i, 30) = ppArr(5, 2)
                dbArr(i, 27) = ppArr(5, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(5, 4)
                End If
                dbArr(i, 31) = ppArr(5, 6)
                dbArr(i, 32) = ppArr(5, 7)
                dbArr(i, 33) = ppArr(5, 8)
                Exit For
            Else
            End If
Next i

' Save Replacement 90x90
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Replacement_Foot_90x90 Then
                dbArr(i, 4) = ppArr(6, 1)
                dbArr(i, 30) = ppArr(6, 2)
                dbArr(i, 27) = ppArr(6, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(6, 4)
                End If
                dbArr(i, 31) = ppArr(6, 6)
                dbArr(i, 32) = ppArr(6, 7)
                dbArr(i, 33) = ppArr(6, 8)
                Exit For
            Else
            End If
Next i

' Save 180x90x100
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Foot_180x90x100 Then
                dbArr(i, 4) = ppArr(7, 1)
                dbArr(i, 30) = ppArr(7, 2)
                dbArr(i, 27) = ppArr(7, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(7, 4)
                End If
                dbArr(i, 31) = ppArr(7, 6)
                dbArr(i, 32) = ppArr(7, 7)
                dbArr(i, 33) = ppArr(7, 8)
                Exit For
            Else
            End If
Next i

' Save 140x90x100
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Foot_140x90x100 Then
                dbArr(i, 4) = ppArr(8, 1)
                dbArr(i, 30) = ppArr(8, 2)
                dbArr(i, 27) = ppArr(8, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(8, 4)
                End If
                dbArr(i, 31) = ppArr(8, 6)
                dbArr(i, 32) = ppArr(8, 7)
                dbArr(i, 33) = ppArr(8, 8)
                Exit For
            Else
            End If
Next i

' Save 90x90x100
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Foot_90x90x100 Then
                dbArr(i, 4) = ppArr(9, 1)
                dbArr(i, 30) = ppArr(9, 2)
                dbArr(i, 27) = ppArr(9, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(9, 4)
                End If
                dbArr(i, 31) = ppArr(9, 6)
                dbArr(i, 32) = ppArr(9, 7)
                dbArr(i, 33) = ppArr(9, 8)
                Exit For
            Else
            End If
Next i

' Save Replacement 180x90x100
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Replacement_Foot_180x90x100 Then
                dbArr(i, 4) = ppArr(10, 1)
                dbArr(i, 30) = ppArr(10, 2)
                dbArr(i, 27) = ppArr(10, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(10, 4)
                End If
                dbArr(i, 31) = ppArr(10, 6)
                dbArr(i, 32) = ppArr(10, 7)
                dbArr(i, 33) = ppArr(10, 8)
                Exit For
            Else
            End If
Next i

' Save Replacement 140x90x100
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Replacement_Foot_140x90x100 Then
                dbArr(i, 4) = ppArr(11, 1)
                dbArr(i, 30) = ppArr(11, 2)
                dbArr(i, 27) = ppArr(11, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(11, 4)
                End If
                dbArr(i, 31) = ppArr(11, 6)
                dbArr(i, 32) = ppArr(11, 7)
                dbArr(i, 33) = ppArr(11, 8)
                Exit For
            Else
            End If
Next i

' Save Replacement 90x90x100
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Replacement_Foot_90x90x100 Then
                dbArr(i, 4) = ppArr(12, 1)
                dbArr(i, 30) = ppArr(12, 2)
                dbArr(i, 27) = ppArr(12, 4)
                If dbArr(i, 27) = "" Then
                dbArr(i, 28) = ""
                Else
                dbArr(i, 28) = 1 - ppArr(12, 4)
                End If
                dbArr(i, 31) = ppArr(12, 6)
                dbArr(i, 32) = ppArr(12, 7)
                dbArr(i, 33) = ppArr(12, 8)
                Exit For
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
PPfoot_Load




endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub PPfoot_Load()
    Dim dbSheet As Worksheet
    Dim ppfootSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    'DRAFT2
    Const Foot_180x90x100 As Long = 67
    Const Foot_140x90x100 As Long = 68
    Const Foot_90x90x100 As Long = 69
    Const Replacement_Foot_180x90x100 As Long = 70
    Const Replacement_Foot_140x90x100 As Long = 71
    Const Replacement_Foot_90x90x100 As Long = 72
    'END DRAFT2

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim rngDB As Range
    Dim rngPP As Range
    Dim rngOut As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim ppArr() As Variant
    Dim XrateArr() As Variant
    
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set ppfootSheet = ThisWorkbook.Sheets("PP Foot")



' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
'DRAFT2
Set rngPP = ppfootSheet.Range("B4:I15")
'END DRAFT2
Set rngXrate = dbSheet.Range("A1:B50")


' Populate arrays
dbArr = rngDB.value
ppArr = rngPP.value
XrateArr = rngXrate.value


' Empty PP array
i = 1
j = 1
For i = LBound(ppArr) To UBound(ppArr)
        ppArr(i, 1) = ""
            For j = LBound(ppArr, 2) To UBound(ppArr, 2)
                ppArr(i, j) = ""
            Next j
Next i

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

ppfootSheet.Cells(3, "C") = "Item Cost " & salesCurrency & "/1000pcs"
ppfootSheet.Cells(3, "D") = "Item Cost " & compCurrency & "/1000pcs"
ppfootSheet.Cells(3, "G") = "Gluing Cost " & salesCurrency & "/1000pcs"


' Load 180x90
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_180x90 Then
        ppArr(1, 1) = dbArr(i, 4)
        ppArr(1, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(1, 3) = ""
        Else
        ppArr(1, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(1, 4) = dbArr(i, 27)
        ppArr(1, 5) = dbArr(i, 28)
        ppArr(1, 6) = dbArr(i, 31)
        ppArr(1, 7) = dbArr(i, 32)
        ppArr(1, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load 140x90
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_140x90 Then
        ppArr(2, 1) = dbArr(i, 4)
        ppArr(2, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(2, 3) = ""
        Else
        ppArr(2, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(2, 4) = dbArr(i, 27)
        ppArr(2, 5) = dbArr(i, 28)
        ppArr(2, 6) = dbArr(i, 31)
        ppArr(2, 7) = dbArr(i, 32)
        ppArr(2, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load 90x90
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_90x90 Then
        ppArr(3, 1) = dbArr(i, 4)
        ppArr(3, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(3, 3) = ""
        Else
        ppArr(3, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(3, 4) = dbArr(i, 27)
        ppArr(3, 5) = dbArr(i, 28)
        ppArr(3, 6) = dbArr(i, 31)
        ppArr(3, 7) = dbArr(i, 32)
        ppArr(3, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load Replacement 180x90
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Replacement_Foot_180x90 Then
        ppArr(4, 1) = dbArr(i, 4)
        ppArr(4, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(4, 3) = ""
        Else
        ppArr(4, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(4, 4) = dbArr(i, 27)
        ppArr(4, 5) = dbArr(i, 28)
        ppArr(4, 6) = dbArr(i, 31)
        ppArr(4, 7) = dbArr(i, 32)
        ppArr(4, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load Replacement 140x90
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Replacement_Foot_140x90 Then
        ppArr(5, 1) = dbArr(i, 4)
        ppArr(5, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(5, 3) = ""
        Else
        ppArr(5, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(5, 4) = dbArr(i, 27)
        ppArr(5, 5) = dbArr(i, 28)
        ppArr(5, 6) = dbArr(i, 31)
        ppArr(5, 7) = dbArr(i, 32)
        ppArr(5, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load Replacement 90x90
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Replacement_Foot_90x90 Then
        ppArr(6, 1) = dbArr(i, 4)
        ppArr(6, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(6, 3) = ""
        Else
        ppArr(6, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(6, 4) = dbArr(i, 27)
        ppArr(6, 5) = dbArr(i, 28)
        ppArr(6, 6) = dbArr(i, 31)
        ppArr(6, 7) = dbArr(i, 32)
        ppArr(6, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

'DRAFT2
' Load 180x90x100
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_180x90x100 Then
        ppArr(7, 1) = dbArr(i, 4)
        ppArr(7, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(7, 3) = ""
        Else
        ppArr(7, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(7, 4) = dbArr(i, 27)
        ppArr(7, 5) = dbArr(i, 28)
        ppArr(7, 6) = dbArr(i, 31)
        ppArr(7, 7) = dbArr(i, 32)
        ppArr(7, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load 140x90x100
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_140x90x100 Then
        ppArr(8, 1) = dbArr(i, 4)
        ppArr(8, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(8, 3) = ""
        Else
        ppArr(8, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(8, 4) = dbArr(i, 27)
        ppArr(8, 5) = dbArr(i, 28)
        ppArr(8, 6) = dbArr(i, 31)
        ppArr(8, 7) = dbArr(i, 32)
        ppArr(8, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load 90x90x100
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Foot_90x90x100 Then
        ppArr(9, 1) = dbArr(i, 4)
        ppArr(9, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(9, 3) = ""
        Else
        ppArr(9, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(9, 4) = dbArr(i, 27)
        ppArr(9, 5) = dbArr(i, 28)
        ppArr(9, 6) = dbArr(i, 31)
        ppArr(9, 7) = dbArr(i, 32)
        ppArr(9, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load Replacement 180x90x100
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Replacement_Foot_180x90x100 Then
        ppArr(10, 1) = dbArr(i, 4)
        ppArr(10, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(10, 3) = ""
        Else
        ppArr(10, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(10, 4) = dbArr(i, 27)
        ppArr(10, 5) = dbArr(i, 28)
        ppArr(10, 6) = dbArr(i, 31)
        ppArr(10, 7) = dbArr(i, 32)
        ppArr(10, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load Replacement 140x90x100
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Replacement_Foot_140x90x100 Then
        ppArr(11, 1) = dbArr(i, 4)
        ppArr(11, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(11, 3) = ""
        Else
        ppArr(11, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(11, 4) = dbArr(i, 27)
        ppArr(11, 5) = dbArr(i, 28)
        ppArr(11, 6) = dbArr(i, 31)
        ppArr(11, 7) = dbArr(i, 32)
        ppArr(11, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i

' Load Replacement 90x90x100
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Replacement_Foot_90x90x100 Then
        ppArr(12, 1) = dbArr(i, 4)
        ppArr(12, 2) = dbArr(i, 30)
        If compCurrencyVal = 0 Then
        ppArr(12, 3) = ""
        Else
        ppArr(12, 3) = dbArr(i, 30) / compCurrencyVal
        End If
        ppArr(12, 4) = dbArr(i, 27)
        ppArr(12, 5) = dbArr(i, 28)
        ppArr(12, 6) = dbArr(i, 31)
        ppArr(12, 7) = dbArr(i, 32)
        ppArr(12, 8) = dbArr(i, 33)
        Exit For
    Else
    End If
Next i
'END DRAFT2

rngPP = ppArr

' Load MSS List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_MSS_Status Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":L" & j

i = 4
'DRAFT2
For i = 4 To 15
'END DRAFT2
With ppfootSheet.Cells(i, 8).Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
Next i




endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub OtherCosts_Save()
    Dim dbSheet As Worksheet
    Dim othercostSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long

    Dim rngDB As Range
    Dim rngDiscount As Range
    Dim rngOut As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim discountArr() As Variant
    Dim dbObjectArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set othercostSheet = ThisWorkbook.Sheets("Other Costs")



' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDiscount = othercostSheet.Range("B12:B26")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
discountArr = rngDiscount.value
dbObjectArr = rngDBObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i
'
' ERROR CHECK
'
If Not IsNumeric(othercostSheet.Cells(3, "B")) Then
    MsgBox "There is non numeric data for the other cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(othercostSheet.Cells(6, "B")) Then
    MsgBox "There is non numeric data for the profit cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Save Other costs
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Other_cost Then
                dbArr(i, 4) = othercostSheet.Cells(3, "B")
                Exit For
            Else
            End If
Next i

' Save Profit
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = profit Then
                dbArr(i, 4) = othercostSheet.Cells(6, "B")
                Exit For
            Else
            End If
Next i

' Save Contractual Volume
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Contracted_Volume Then
                dbArr(i, 4) = othercostSheet.Cells(9, "B")
                Exit For
            Else
            End If
Next i

' Save Discount Table
i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Volume_Discounts Then
                dbArr(i, 4) = othercostSheet.Cells(12, "B")
                dbArr(i, 5) = othercostSheet.Cells(13, "B")
                dbArr(i, 6) = othercostSheet.Cells(14, "B")
                dbArr(i, 7) = othercostSheet.Cells(15, "B")
                dbArr(i, 8) = othercostSheet.Cells(16, "B")
                dbArr(i, 9) = othercostSheet.Cells(17, "B")
                dbArr(i, 10) = othercostSheet.Cells(18, "B")
                dbArr(i, 11) = othercostSheet.Cells(19, "B")
                dbArr(i, 12) = othercostSheet.Cells(20, "B")
                dbArr(i, 13) = othercostSheet.Cells(21, "B")
                dbArr(i, 14) = othercostSheet.Cells(22, "B")
                dbArr(i, 15) = othercostSheet.Cells(23, "B")
                dbArr(i, 16) = othercostSheet.Cells(24, "B")
                dbArr(i, 17) = othercostSheet.Cells(25, "B")
                dbArr(i, 18) = othercostSheet.Cells(26, "B")
                Exit For
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
OtherCosts_Load




endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub OtherCosts_Load()
    Dim dbSheet As Worksheet
    Dim othercostSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    
    Dim rngDB As Range
    Dim rngDiscount As Range
    Dim rngOut As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim discountArr() As Variant
    Dim XrateArr() As Variant
    
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set othercostSheet = ThisWorkbook.Sheets("Other Costs")



' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDiscount = othercostSheet.Range("B12:B26")
Set rngXrate = dbSheet.Range("A1:B50")


' Populate arrays
dbArr = rngDB.value
discountArr = rngDiscount.value
XrateArr = rngXrate.value


' Empty Discount array
i = 1
j = 1
For i = LBound(discountArr) To UBound(discountArr)
        discountArr(i, 1) = ""
            For j = LBound(discountArr, 2) To UBound(discountArr, 2)
                discountArr(i, j) = ""
            Next j
Next i

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Other costs
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Other_cost Then
            othercostSheet.Cells(3, "B") = dbArr(i, 4)
            If compCurrencyVal = 0 Then
            othercostSheet.Cells(4, "B") = ""
            Else
            othercostSheet.Cells(4, "B") = dbArr(i, 4) / compCurrencyVal
            End If
        Exit For
    Else
    End If
Next i

' Load Profit
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = profit Then
            othercostSheet.Cells(6, "B") = dbArr(i, 4)
        Exit For
    Else
    End If
Next i

' Load Contracted Volume
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Contracted_Volume Then
            othercostSheet.Cells(9, "B") = dbArr(i, 4)
        Exit For
    Else
    End If
Next i

'Set names in UI
othercostSheet.Cells(3, "A") = "Other Costs " & salesCurrency & "/1000m2"
othercostSheet.Cells(4, "A") = "Other Costs " & compCurrency & "/1000m2"

' Load Discount Array
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Volume_Discounts Then
        discountArr(1, 1) = dbArr(i, 4)
        discountArr(2, 1) = dbArr(i, 5)
        discountArr(3, 1) = dbArr(i, 6)
        discountArr(4, 1) = dbArr(i, 7)
        discountArr(5, 1) = dbArr(i, 8)
        discountArr(6, 1) = dbArr(i, 9)
        discountArr(7, 1) = dbArr(i, 10)
        discountArr(8, 1) = dbArr(i, 11)
        discountArr(9, 1) = dbArr(i, 12)
        discountArr(10, 1) = dbArr(i, 13)
        discountArr(11, 1) = dbArr(i, 14)
        discountArr(12, 1) = dbArr(i, 15)
        discountArr(13, 1) = dbArr(i, 16)
        discountArr(14, 1) = dbArr(i, 17)
        discountArr(15, 1) = dbArr(i, 18)
        Exit For
    Else
    End If
Next i
rngDiscount = discountArr



endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Transport_Delete()
    Dim dbSheet As Worksheet
    Dim transportSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngTransportObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim transportObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set transportSheet = ThisWorkbook.Sheets("Transport")


' Set array ranges
Set rngSelection = transportSheet.Range("B4:B10")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngTransportObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
transportObjArr = rngTransportObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any Item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = dbArr(i, 51) Then
                If MsgBox("Pallet type exist in an Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Pallet Type in use!") = vbNo Then Exit Sub
                Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Transport_cost Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Transport_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Transport_Clear()
    Dim dbSheet As Worksheet
    Dim transportSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set transportSheet = ThisWorkbook.Sheets("Transport")


' Set array ranges
Set rngSelection = transportSheet.Range("B4:B10")


' Populate arrays
selectionArr = rngSelection.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Transport_Save()
    Dim dbSheet As Worksheet
    Dim transportSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngTransportObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim transportObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set transportSheet = ThisWorkbook.Sheets("Transport")

' Set array ranges
Set rngSelection = transportSheet.Range("B4:B10")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngTransportObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
transportObjArr = rngTransportObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'

If selectionArr(1, 1) = "" Then
    MsgBox "Transport name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Transport name"
    GoTo endXLupdate
    Else
End If

If selectionArr(5, 1) = "" Then
    MsgBox "Filling rate unit cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Unit"
    GoTo endXLupdate
    Else
End If

If selectionArr(7, 1) = "" Then
    MsgBox "Cost per 1000m2 cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Cost"
    GoTo endXLupdate
    Else
End If


If Not IsNumeric(selectionArr(7, 1)) Then
    MsgBox "There is non numeric data for the cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Paper
                dbArr(firstemptyrow, 1) = Transport_cost
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Transport_cost"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                dbArr(firstemptyrow, 10) = selectionArr(5, 1)
                dbArr(firstemptyrow, 8) = selectionArr(6, 1)
                dbArr(firstemptyrow, 9) = selectionArr(7, 1)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Transport_cost Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Packaging type
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                dbArr(i, 10) = selectionArr(5, 1)
                dbArr(i, 8) = selectionArr(6, 1)
                dbArr(i, 9) = selectionArr(7, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Transport_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Transport_LoadSelection()
Dim dbSheet As Worksheet
    Dim customer As Worksheet
    Dim currencySheet As Worksheet
    Dim infoSheet As Worksheet
    Dim papersSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet
    Dim corrugatedboardSheet As Worksheet
    Dim convertersSheet As Worksheet
    Dim packagingSheet As Worksheet
    Dim palletsSheet As Worksheet
    Dim transportSheet As Worksheet
    Dim toolsSheet As Worksheet
    Dim othercostSheet As Worksheet
    Dim ppfootSheet As Worksheet
    Dim itemsSheet As Worksheet
    Dim articlesSheet As Worksheet
    Dim icompm3Sheet As Worksheet
    Dim pricelistSheet As Worksheet
    Dim gapriceSheet As Worksheet
    Dim dapriceSheet As Worksheet
    Dim commissionSheet As Worksheet
    Dim corrugatorSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim textline As String
    Dim selectedRow As Long
    
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set transportSheet = ThisWorkbook.Sheets("Transport")

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = transportSheet.Range("B4:B10")
Set rngTable = transportSheet.Range("A14:H5015")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
tableArr = rngTable.value
XrateArr = rngXrate.value

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i

' Where is the dropdown located
dropdown = transportSheet.Cells(2, "A")

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

selectedRow = 15
selectedRow = Selection.row
If selectedRow < 15 Or selectedRow > 5000 Then
    selectedRow = 15
    Else
End If
' Load Selection Tables
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Transport_cost Then
        If dbArr(i, 4) = transportSheet.Cells(selectedRow, 1) Then
            selectionArr(1, 1) = dbArr(i, 4)
            selectionArr(2, 1) = dbArr(i, 5)
            selectionArr(3, 1) = dbArr(i, 6)
            selectionArr(4, 1) = dbArr(i, 7)
            selectionArr(5, 1) = dbArr(i, 10)
            selectionArr(6, 1) = dbArr(i, 8)
            selectionArr(7, 1) = dbArr(i, 9)
        Exit For
        Else
        End If
    Else
    End If
Next i


rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Transport_Load()
    Dim dbSheet As Worksheet
    Dim transportSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const List_Fillingrate_Unit = 51

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngDB As Range
    Dim rngTransporttable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim transportArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set transportSheet = ThisWorkbook.Sheets("Transport")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A14").Activate
transportSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngTransporttable = transportSheet.Range("A15:H5015")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = transportSheet.Range("B4:B10")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
transportArr = rngTransporttable.value
XrateArr = rngXrate.value


' Empty List in A2
transportSheet.Cells(2, "A") = ""

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Tools array
i = 1
j = 1
For i = LBound(transportArr) To UBound(transportArr)
        transportArr(i, 1) = ""
            For j = LBound(transportArr, 2) To UBound(transportArr, 2)
                transportArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

transportSheet.Cells(6, "A") = "Route Cost " & salesCurrency
transportSheet.Cells(14, "C") = "Route Cost " & salesCurrency
transportSheet.Cells(10, "A") = "Cost " & salesCurrency & "/1000" & transportSheet.Cells(8, "A")
transportSheet.Cells(14, "G") = "Cost " & salesCurrency & "/1000"
transportSheet.Cells(14, "H") = "Cost " & compCurrency & "/1000"



' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Fillingrate List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = List_Fillingrate_Unit Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":E" & j
With transportSheet.Range("B8").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


' Load Tools Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Transport_cost Then
        transportArr(j, 1) = dbArr(i, 4)
        transportArr(j, 2) = dbArr(i, 5)
        transportArr(j, 3) = dbArr(i, 6)
        transportArr(j, 4) = dbArr(i, 7)
        transportArr(j, 5) = dbArr(i, 8)
        transportArr(j, 6) = dbArr(i, 10)
        transportArr(j, 7) = dbArr(i, 9)
        transportArr(j, 8) = dbArr(i, 9) / compCurrencyVal
        j = j + 1
    Else
    End If
Next i
rngTransporttable = transportArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Tools_Delete()
    Dim dbSheet As Worksheet
    Dim toolsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngToolsObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim toolsObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set toolsSheet = ThisWorkbook.Sheets("Tools")


' Set array ranges
Set rngSelection = toolsSheet.Range("B4:B7")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngToolsObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
toolsObjArr = rngToolsObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Tool_cost Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Tools_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Tools_Save()
    Dim dbSheet As Worksheet
    Dim toolsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngToolsObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim toolsObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set toolsSheet = ThisWorkbook.Sheets("Tools")


' Set array ranges
Set rngSelection = toolsSheet.Range("B4:B7")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngToolsObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
toolsObjArr = rngToolsObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'

If selectionArr(1, 1) = "" Then
    MsgBox "Tools name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Tool name"
    GoTo endXLupdate
    Else
End If

If selectionArr(2, 1) = "" Then
    MsgBox "Tool Type cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Tool Type"
    GoTo endXLupdate
    Else
End If

If selectionArr(4, 1) = "" Then
    MsgBox "Tool Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Tool Cost"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(4, 1)) Then
    MsgBox "There is non numeric data for the cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Paper
                dbArr(firstemptyrow, 1) = Tool_cost
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Tool_Cost"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Tool_cost Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Packaging type
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Tools_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Tools_Clear()
    Dim dbSheet As Worksheet
    Dim toolsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set toolsSheet = ThisWorkbook.Sheets("Tools")

' Set array ranges
Set rngSelection = toolsSheet.Range("B4:B7")


' Populate arrays
selectionArr = rngSelection.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Tools_LoadSelection()
    Dim dbSheet As Worksheet
    Dim toolsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRows As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set toolsSheet = ThisWorkbook.Sheets("Tools")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = toolsSheet.Range("B4:B7")
Set rngTable = toolsSheet.Range("A12:E256")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
tableArr = rngTable.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

selectedRow = 12
selectedRow = Selection.row
If selectedRow < 12 Or selectedRow > 256 Then
    selectedRow = 12
    Else
End If
' Load Selection Tables
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = toolsSheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = tableArr(i, 1)
        selectionArr(2, 1) = tableArr(i, 2)
        selectionArr(3, 1) = tableArr(i, 3)
        selectionArr(4, 1) = tableArr(i, 4)
        Exit For
    Else
    End If
Next i


rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Tools_Load()
    Dim dbSheet As Worksheet
    Dim toolsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngDB As Range
    Dim rngToolstable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim toolsArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set toolsSheet = ThisWorkbook.Sheets("Tools")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A11").Activate
toolsSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngToolstable = toolsSheet.Range("A12:E256")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = toolsSheet.Range("B4:B7")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
toolsArr = rngToolstable.value
XrateArr = rngXrate.value


' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Tools array
i = 1
j = 1
For i = LBound(toolsArr) To UBound(toolsArr)
        toolsArr(i, 1) = ""
            For j = LBound(toolsArr, 2) To UBound(toolsArr, 2)
                toolsArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

toolsSheet.Cells(7, "A") = "Cost " & salesCurrency & "/tool"
toolsSheet.Cells(11, "D") = "Cost " & salesCurrency & "/tool"
toolsSheet.Cells(11, "E") = "Cost " & compCurrency & "/tool"


' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Type List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 40 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":I" & j

With toolsSheet.Range("B5").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


' Load Tools Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Tool_cost Then
        toolsArr(j, 1) = dbArr(i, 4)
        toolsArr(j, 2) = dbArr(i, 5)
        toolsArr(j, 3) = dbArr(i, 6)
        toolsArr(j, 4) = dbArr(i, 7)
        toolsArr(j, 5) = dbArr(i, 7) / compCurrencyVal
        j = j + 1
    Else
    End If
Next i
rngToolstable = toolsArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Pallets_Delete()
    Dim dbSheet As Worksheet
    Dim palletsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngPalletsObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim palletsObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set palletsSheet = ThisWorkbook.Sheets("Pallets")


' Set array ranges
Set rngSelection = palletsSheet.Range("B4:B7")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPalletsObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
palletsObjArr = rngPalletsObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any Item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = dbArr(i, 50) Then
                If MsgBox("Pallet type exist in an Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Pallet Type in use!") = vbNo Then Exit Sub
                Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Pallet_cost Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Pallets_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Pallets_Save()
    Dim dbSheet As Worksheet
    Dim palletsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngPalletsObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim palletsObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set palletsSheet = ThisWorkbook.Sheets("Pallets")


' Set array ranges
Set rngSelection = palletsSheet.Range("B4:B7")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPalletsObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
palletsObjArr = rngPalletsObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'

If selectionArr(1, 1) = "" Then
    MsgBox "Pallets name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Pallet name"
    GoTo endXLupdate
    Else
End If

If selectionArr(2, 1) = "" Then
    MsgBox "Pallet Type cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Pallet Type"
    GoTo endXLupdate
    Else
End If

If selectionArr(4, 1) = "" Then
    MsgBox "Pallet Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Pallet Cost"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(4, 1)) Then
    MsgBox "There is non numeric data for the cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Paper
                dbArr(firstemptyrow, 1) = Pallet_cost
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Pallet_Cost"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Pallet_cost Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Packaging type
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Pallets_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Pallets_Clear()
    Dim dbSheet As Worksheet
    Dim palletsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set palletsSheet = ThisWorkbook.Sheets("Pallets")


' Set array ranges
Set rngSelection = palletsSheet.Range("B4:B7")


' Populate arrays
selectionArr = rngSelection.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Pallets_LoadSelection()
    Dim dbSheet As Worksheet
    Dim palletsSheet As Worksheet

    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set palletsSheet = ThisWorkbook.Sheets("Pallets")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = palletsSheet.Range("B4:B7")
Set rngTable = palletsSheet.Range("A12:E256")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
tableArr = rngTable.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

selectedRow = 12
selectedRow = Selection.row
If selectedRow < 12 Or selectedRow > 256 Then
    selectedRow = 12
    Else
End If
' Load Selection Tables
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = palletsSheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = tableArr(i, 1)
        selectionArr(2, 1) = tableArr(i, 2)
        selectionArr(3, 1) = tableArr(i, 3)
        selectionArr(4, 1) = tableArr(i, 4)
        Exit For
    Else
    End If
Next i


rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Pallets_Load()
    Dim dbSheet As Worksheet
    Dim palletsSheet As Worksheet

    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngDB As Range
    Dim rngPallettable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim palletsArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set palletsSheet = ThisWorkbook.Sheets("Pallets")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A11").Activate
palletsSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngPallettable = palletsSheet.Range("A12:E256")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = palletsSheet.Range("B4:B7")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
palletsArr = rngPallettable.value
XrateArr = rngXrate.value

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Packaging array
i = 1
j = 1
For i = LBound(palletsArr) To UBound(palletsArr)
        palletsArr(i, 1) = ""
            For j = LBound(palletsArr, 2) To UBound(palletsArr, 2)
                palletsArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

palletsSheet.Cells(7, "A") = "Cost " & salesCurrency & "/pallet"
palletsSheet.Cells(11, "D") = "Cost " & salesCurrency & "/pallet"
palletsSheet.Cells(11, "E") = "Cost " & compCurrency & "/pallet"


' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Type List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 39 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":J" & j

With palletsSheet.Range("B5").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


' Load Packaging Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Pallet_cost Then
        palletsArr(j, 1) = dbArr(i, 4)
        palletsArr(j, 2) = dbArr(i, 5)
        palletsArr(j, 3) = dbArr(i, 6)
        palletsArr(j, 4) = dbArr(i, 7)
        palletsArr(j, 5) = dbArr(i, 7) / compCurrencyVal
        j = j + 1
    Else
    End If
Next i
rngPallettable = palletsArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Packaging_Delete()
    Dim dbSheet As Worksheet
    Dim palletsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngPackagingObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim packagingObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set packagingSheet = ThisWorkbook.Sheets("Packaging")


' Set array ranges
Set rngSelection = packagingSheet.Range("B4:B7")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPackagingObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
packagingObjArr = rngPackagingObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any Item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = dbArr(i, 39) Then
                If MsgBox("Packaging type exist in an Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Packaging Type in use!") = vbNo Then Exit Sub
                Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Packaging_Cost Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Packaging_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Packaging_Save()
    Dim dbSheet As Worksheet
    Dim packagingSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngPackagingObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim packagingObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set packagingSheet = ThisWorkbook.Sheets("Packaging")


' Set array ranges
Set rngSelection = packagingSheet.Range("B4:B7")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPackagingObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
packagingObjArr = rngPackagingObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'

If selectionArr(1, 1) = "" Then
    MsgBox "Packaging name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Packaging name"
    GoTo endXLupdate
    Else
End If

If selectionArr(2, 1) = "" Then
    MsgBox "Packaging Type cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Packaging Type"
    GoTo endXLupdate
    Else
End If

If selectionArr(4, 1) = "" Then
    MsgBox "Packaging Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Packaging Cost"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(4, 1)) Then
    MsgBox "There is non numeric data for the cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Paper
                dbArr(firstemptyrow, 1) = Packaging_Cost
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Packaging_Cost"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Packaging_Cost Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Packaging type
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Packaging_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Packaging_Clear()
    Dim dbSheet As Worksheet
    Dim packagingSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set packagingSheet = ThisWorkbook.Sheets("Packaging")


' Set array ranges
Set rngSelection = packagingSheet.Range("B4:B7")


' Populate arrays
selectionArr = rngSelection.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Packaging_LoadSelection()
    Dim dbSheet As Worksheet
    Dim packagingSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set packagingSheet = ThisWorkbook.Sheets("Packaging")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = packagingSheet.Range("B4:B7")
Set rngTable = packagingSheet.Range("A12:E256")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
tableArr = rngTable.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i


selectedRow = 12
selectedRow = Selection.row
If selectedRow < 12 Or selectedRow > 256 Then
    selectedRow = 12
    Else
End If
' Load Selection Tables
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = packagingSheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = tableArr(i, 1)
        selectionArr(2, 1) = tableArr(i, 2)
        selectionArr(3, 1) = tableArr(i, 3)
        selectionArr(4, 1) = tableArr(i, 4)
        Exit For
    Else
    End If
Next i


rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Packaging_Load()
    Dim dbSheet As Worksheet
    Dim packagingSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngDB As Range
    Dim rngPackagingtable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim packagingArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set packagingSheet = ThisWorkbook.Sheets("Packaging")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A11").Activate
packagingSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngPackagingtable = packagingSheet.Range("A12:E256")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = packagingSheet.Range("B4:B7")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
packagingArr = rngPackagingtable.value
XrateArr = rngXrate.value


' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Packaging array
i = 1
j = 1
For i = LBound(packagingArr) To UBound(packagingArr)
        packagingArr(i, 1) = ""
            For j = LBound(packagingArr, 2) To UBound(packagingArr, 2)
                packagingArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comp Currency
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

packagingSheet.Cells(7, "A") = "Cost " & salesCurrency & "/1000m2"
packagingSheet.Cells(11, "D") = "Cost " & salesCurrency & "/1000m2"
packagingSheet.Cells(11, "E") = "Cost " & compCurrency & "/1000m2"


' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Type List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 37 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":H" & j

With packagingSheet.Range("B5").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


' Load Packaging Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Packaging_Cost Then
        packagingArr(j, 1) = dbArr(i, 4)
        packagingArr(j, 2) = dbArr(i, 5)
        packagingArr(j, 3) = dbArr(i, 6)
        packagingArr(j, 4) = dbArr(i, 7)
        packagingArr(j, 5) = dbArr(i, 7) / compCurrencyVal
        j = j + 1
    Else
    End If
Next i
rngPackagingtable = packagingArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Converters_Delete()
    Dim dbSheet As Worksheet
    Dim convertersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range

    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim dbObjectArr() As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set convertersSheet = ThisWorkbook.Sheets("Converters")


' Set array ranges
Set rngSelection = convertersSheet.Range("B4:B10")

Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")



' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
selectionArr = rngSelection.value


' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any Item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = dbArr(i, 29) Or deleteEntry = dbArr(i, 31) Or deleteEntry = dbArr(i, 33) _
            Or deleteEntry = dbArr(i, 35) Then
                If MsgBox("Converter exist in an Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Converter in use!") = vbNo Then Exit Sub
                Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Converters_A Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Converters_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Converters_Clear()
    Dim dbSheet As Worksheet
    Dim convertersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set convertersSheet = ThisWorkbook.Sheets("Converters")


' Set array ranges
Set rngSelection = convertersSheet.Range("B4:B10")
Set rngSelection2 = convertersSheet.Range("B13:B25")
Set rngSelection3 = convertersSheet.Range("F4:F25")


' Populate arrays
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection 2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

' Empty Selection 3 array
i = 1
j = 1
For i = LBound(selectionArr3) To UBound(selectionArr3)
        selectionArr3(i, 1) = ""
            For j = LBound(selectionArr3, 2) To UBound(selectionArr3, 2)
                selectionArr3(i, j) = ""
            Next j
Next i
rngSelection = selectionArr
rngSelection2 = selectionArr2
rngSelection3 = selectionArr3

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Converters_Save()
    Dim dbSheet As Worksheet
    Dim convertersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngDBObj As Range
    Dim rngConvertersObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim dbObjectArr() As Variant
    Dim convertersObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set convertersSheet = ThisWorkbook.Sheets("Converters")


' Set array ranges
Set rngSelection = convertersSheet.Range("B4:B10")
Set rngSelection2 = convertersSheet.Range("B13:C25")
Set rngSelection3 = convertersSheet.Range("F4:F25")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngConvertersObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
convertersObjArr = rngConvertersObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'


If selectionArr(1, 1) = "" Then
    MsgBox "Converters name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Converters name"
    GoTo endXLupdate
    Else
End If

If selectionArr(2, 1) = "" Then
    MsgBox "Converters type cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Type name"
    GoTo endXLupdate
    Else
End If

i = 1
For i = 1 To 13
    If Not IsNumeric(selectionArr2(i, 1)) Then
        MsgBox "There is non numeric data for the Cost for number of outs" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
    End If
Next i

i = 1
For i = 1 To 22
    If Not IsNumeric(selectionArr3(i, 1)) Then
        MsgBox "There is non numeric data for the Markup/Discount" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
    End If
Next i


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Converter
                dbArr(firstemptyrow, 1) = Converters_A
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Converters_A"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                dbArr(firstemptyrow, 8) = selectionArr(5, 1)
                dbArr(firstemptyrow, 9) = selectionArr(6, 1)
                dbArr(firstemptyrow, 22) = selectionArr(7, 1)

                j = 1
                k = 23
                For j = 1 To 13
                    dbArr(firstemptyrow, k) = selectionArr2(j, 1)
                    k = k + 1
                Next j
                
                j = 1
                k = 36
                For j = 1 To 22
                    dbArr(firstemptyrow, k) = selectionArr3(j, 1)
                    k = k + 1
                Next j
                
            Else
            End If
            
            If dbArr(i, 1) = Converters_A Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Paper
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                dbArr(i, 8) = selectionArr(5, 1)
                dbArr(i, 9) = selectionArr(6, 1)
                dbArr(i, 22) = selectionArr(7, 1)

                j = 1
                k = 23
                For j = 1 To 13
                    dbArr(i, k) = selectionArr2(j, 1)
                    k = k + 1
                Next j
                
                j = 1
                k = 36
                For j = 1 To 22
                    dbArr(i, k) = selectionArr3(j, 1)
                    k = k + 1
                Next j
                
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Converters_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Converters_LoadSelection()
    Dim dbSheet As Worksheet
    Dim convertersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngDBObj As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set convertersSheet = ThisWorkbook.Sheets("Converters")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = convertersSheet.Range("B4:B10")
Set rngSelection2 = convertersSheet.Range("B13:C25")
Set rngSelection3 = convertersSheet.Range("F4:F25")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value
XrateArr = rngXrate.value

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

' Empty Selection3 array
i = 1
j = 1
For i = LBound(selectionArr3) To UBound(selectionArr3)
        selectionArr3(i, 1) = ""
            For j = LBound(selectionArr3, 2) To UBound(selectionArr3, 2)
                selectionArr3(i, j) = ""
            Next j
Next i

selectedRow = 4
selectedRow = Selection.row
If selectedRow < 4 Or selectedRow > 100 Then
    selectedRow = 4
    Else
End If
' Load Selection Tables 1 and 2 and 3
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Converters_A Then
        If dbArr(i, 4) = convertersSheet.Cells(selectedRow, 8) Then
            selectionArr(1, 1) = dbArr(i, 4)
            selectionArr(2, 1) = dbArr(i, 5)
            selectionArr(3, 1) = dbArr(i, 6)
            selectionArr(4, 1) = dbArr(i, 7)
            selectionArr(5, 1) = dbArr(i, 8)
            selectionArr(6, 1) = dbArr(i, 9)
            selectionArr(7, 1) = dbArr(i, 22)
        
            k = 1
            l = 23
            For k = 1 To 13
                selectionArr2(k, 1) = dbArr(i, l)
                selectionArr2(k, 2) = dbArr(i, l) / compCurrencyVal
                l = l + 1
            Next k
            
            k = 1
            l = 36
            For k = 1 To 22
                selectionArr3(k, 1) = dbArr(i, l)
                l = l + 1
            Next k
        Exit For
        Else
        End If
    Else
    End If
Next i


rngSelection = selectionArr
rngSelection2 = selectionArr2
rngSelection3 = selectionArr3

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Papers_Load()
    Dim dbSheet As Worksheet
    Dim papersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    
    Dim rngDB As Range
    Dim rngPaperstable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim papersArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set papersSheet = ThisWorkbook.Sheets("Papers")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A15").Activate
papersSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngPaperstable = papersSheet.Range("A16:R100")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = papersSheet.Range("B4:B11")
Set rngSelection2 = papersSheet.Range("F4:F11")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
papersArr = rngPaperstable.value
XrateArr = rngXrate.value


' Empty List in A2
papersSheet.Cells(2, "A") = ""

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Papers array
i = 1
j = 1
For i = LBound(papersArr) To UBound(papersArr)
        papersArr(i, 1) = ""
            For j = LBound(papersArr, 2) To UBound(papersArr, 2)
                papersArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Empty Selection2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i
rngSelection2 = selectionArr2


' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i


' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i

papersSheet.Cells(15, "G") = "Unit Cost/1000Kg " & salesCurrency
papersSheet.Cells(15, "H") = "Unit Cost/1000Kg " & compCurrency

' Load Currency List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 31 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":AO" & j

With papersSheet.Range("B9").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Tradenames List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 32 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":P" & j

With papersSheet.Range("B6").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Colors List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 42 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":F" & j

With papersSheet.Range("B10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With


' Load Paper Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Papers Then
        papersArr(j, 1) = dbArr(i, 4)
        papersArr(j, 2) = dbArr(i, 5)
        papersArr(j, 3) = dbArr(i, 6)
        papersArr(j, 4) = dbArr(i, 7)
        papersArr(j, 5) = dbArr(i, 8)
        papersArr(j, 6) = dbArr(i, 9)

        On Error Resume Next
        papersArr(j, 7) = Application.WorksheetFunction.VLookup(dbArr(i, 9), XrateArr, 2, False) _
                        * dbArr(i, 8)
        On Error GoTo 0


        papersArr(j, 8) = papersArr(j, 7) / compCurrencyVal
        papersArr(j, 9) = dbArr(i, 11)
        papersArr(j, 10) = dbArr(i, 12)
        papersArr(j, 11) = dbArr(i, 13)
        papersArr(j, 12) = dbArr(i, 14)
        papersArr(j, 13) = dbArr(i, 15)
        papersArr(j, 14) = dbArr(i, 16)
        papersArr(j, 15) = dbArr(i, 17)
        papersArr(j, 16) = dbArr(i, 18)
        papersArr(j, 17) = dbArr(i, 19)
        papersArr(j, 18) = dbArr(i, 20)
        j = j + 1
    Else
    End If
Next i
rngPaperstable = papersArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Converters_Load()
    Dim dbSheet As Worksheet
    Dim convertersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim first As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngConvtable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngSelection3 As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim compArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim selectionArr3() As Variant
    Dim XrateArr() As Variant
    
    Dim convname As String
    Dim textline As String
    
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    Dim xrate As Double
    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set convertersSheet = ThisWorkbook.Sheets("Converters")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngConvtable = convertersSheet.Range("H4:N100")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngXrate = dbSheet.Range("A1:B50")
Set rngSelection = convertersSheet.Range("B4:C10")
Set rngSelection2 = convertersSheet.Range("B13:C25")
Set rngSelection3 = convertersSheet.Range("F4:F25")



' Populate arrays
dbArr = rngDB.value
convArr = rngConvtable.value
dbObjectArr = rngDBObj.value
XrateArr = rngXrate.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
selectionArr3 = rngSelection3.value

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i


' Empty Converters array
i = 1
j = 1
For i = LBound(convArr) To UBound(convArr)
        convArr(i, 1) = ""
            For j = LBound(convArr, 2) To UBound(convArr, 2)
                convArr(i, j) = ""
            Next j
Next i

' Empty Selection 1 array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

rngSelection = selectionArr

' Empty Selection 2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        convArr(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

rngSelection2 = selectionArr2

' Empty Selection 3 array
i = 1
j = 1
For i = LBound(selectionArr3) To UBound(selectionArr3)
        convArr(i, 1) = ""
            For j = LBound(selectionArr3, 2) To UBound(selectionArr3, 2)
                selectionArr3(i, j) = ""
            Next j
Next i

rngSelection3 = selectionArr3

' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

convertersSheet.Cells(3, "J") = "Cost " & salesCurrency & "/1000pcs for 1 out"
convertersSheet.Cells(12, "B") = "Cost " & salesCurrency & "/1000pcs"

' Load CompCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

convertersSheet.Cells(3, "K") = compCurrency
convertersSheet.Cells(12, "C") = compCurrency

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Find Comparision Currency
i = 1
compCurrencyVal = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        If XrateArr(i, 1) = compCurrency Then
        compCurrencyVal = XrateArr(i, 2)
        Exit For
        Else
        End If
Next i

' Load Conversion Process
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 36 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":I" & j

With convertersSheet.Range("B5").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load Colors List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 42 Then
    j = i
    Exit For
    Else
    End If
Next i

' Load Converters Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Converters_A Then
        convArr(j, 1) = dbArr(i, 4)
        convArr(j, 2) = dbArr(i, 5)
        convArr(j, 3) = dbArr(i, 23)
        convArr(j, 4) = dbArr(i, 23) / compCurrencyVal
        convArr(j, 5) = dbArr(i, 41)
        ' v4.1
        convArr(j, 6) = WorksheetFunction.Max(dbArr(i, 36), dbArr(i, 37), dbArr(i, 38), dbArr(i, 39), dbArr(i, 40), dbArr(i, 41), _
            dbArr(i, 42), dbArr(i, 43), dbArr(i, 44), dbArr(i, 45), dbArr(i, 46), dbArr(i, 47), dbArr(i, 48), dbArr(i, 49), dbArr(i, 50), _
            dbArr(i, 51), dbArr(i, 52), dbArr(i, 53), dbArr(i, 54), dbArr(i, 55), dbArr(i, 56), dbArr(i, 57))
        
        convArr(j, 7) = WorksheetFunction.Min(dbArr(i, 36), dbArr(i, 37), dbArr(i, 38), dbArr(i, 39), dbArr(i, 40), dbArr(i, 41), _
            dbArr(i, 42), dbArr(i, 43), dbArr(i, 44), dbArr(i, 45), dbArr(i, 46), dbArr(i, 47), dbArr(i, 48), dbArr(i, 49), dbArr(i, 50), _
            dbArr(i, 51), dbArr(i, 52), dbArr(i, 53), dbArr(i, 54), dbArr(i, 55), dbArr(i, 56), dbArr(i, 57))
        'convArr(j, 6) = dbArr(i, 36)
        'convArr(j, 7) = dbArr(i, 57)
        j = j + 1
    Else
    End If
Next i
rngConvtable = convArr



endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Corrugator_Save()
    Dim dbSheet As Worksheet
    Dim corrugatorSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngCorrugatorObj As Range
    
    Dim dbArr() As Variant
    Dim dbOutArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim corrugatorObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatorSheet = ThisWorkbook.Sheets("Corrugator")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = corrugatorSheet.Range("A8:C92")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCorrugatorObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value
dbOutArr = rngDB.value
dbObjectArr = rngDBObj.value
corrugatorObjArr = rngCorrugatorObj.value

' Empty DB Out array
i = 1
j = 1
For i = LBound(dbOutArr) To UBound(dbOutArr)
        dbOutArr(i, 1) = ""
            For j = LBound(dbOutArr, 2) To UBound(dbOutArr, 2)
                dbOutArr(i, j) = ""
            Next j
Next i

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'

' Check if Composition is selected
i = 1
For i = LBound(dbArr) To UBound(dbArr)
If corrugatorSheet.Cells(3, "B") = "" Then
            MsgBox "Composition selection cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Composition Selection"
        GoTo endXLupdate
Else
End If
Next i

If corrugatorSheet.Cells(4, "B") = "" Then
    MsgBox "There is empty data for the cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Data Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(corrugatorSheet.Cells(4, "B")) Then
    MsgBox "There is non numeric data for the cost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Cost Number Error"
    GoTo endXLupdate
    Else
End If

i = 1
For i = LBound(dbArr) To firstemptyrow
            
            If dbArr(i, 1) = Corrugation_cost Then
                If dbArr(i, 6) = corrugatorSheet.Cells(3, "B") Then
                dbArr(i, 4) = 1
                dbArr(i, 5) = ""
                dbArr(i, 6) = corrugatorSheet.Cells(3, "B")
                If corrugatorSheet.Cells(4, "B") = "" Then
                dbArr(i, 7) = 0
                Else
                dbArr(i, 7) = corrugatorSheet.Cells(4, "B")
                End If
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Corrugator_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Corrugator_LoadSelection()
    Dim dbSheet As Worksheet
    Dim corrugatorSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatorSheet = ThisWorkbook.Sheets("Corrugator")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = corrugatorSheet.Range("A4:B5")
Set rngTable = corrugatorSheet.Range("A8:C92")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
tableArr = rngTable.value

' Where is the dropdown located
dropdown = corrugatorSheet.Cells(2, "A")

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

selectedRow = 8
selectedRow = Selection.row
If selectedRow < 8 Or selectedRow > 92 Then
    selectedRow = 8
    Else
End If
' Load Selection Tables 1 and 2
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = corrugatorSheet.Cells(selectedRow, 1) Then
        corrugatorSheet.Cells(3, "B") = tableArr(i, 1)
        corrugatorSheet.Cells(4, "B") = tableArr(i, 2)
        Exit For
    Else
    End If
Next i


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Corrugator_Load()
    Dim dbSheet As Worksheet
    Dim corrugatorSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    Dim value As Double
    
    Dim rngDB As Range
    Dim rngCorrugatortable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim cbArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatorSheet = ThisWorkbook.Sheets("Corrugator")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A7").Activate
corrugatorSheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngCorrugatortable = corrugatorSheet.Range("A8:C92")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = corrugatorSheet.Range("B4:B5")
Set rngXrate = dbSheet.Range("A1:B50")

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
corrugatorArr = rngCorrugatortable.value
XrateArr = rngXrate.value



' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Empty Corrugator array
i = 1
j = 1
For i = LBound(corrugatorArr) To UBound(corrugatorArr)
        corrugatorArr(i, 1) = ""
            For j = LBound(corrugatorArr, 2) To UBound(corrugatorArr, 2)
                corrugatorArr(i, j) = ""
            Next j
Next i

' ...and in UI
corrugatorSheet.Cells(4, "B") = ""


' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i

corrugatorSheet.Cells(4, "A") = "Cost " & salesCurrency & "/1000m2"
corrugatorSheet.Cells(7, "B") = "Cost " & salesCurrency & "/1000m2"
corrugatorSheet.Cells(7, "C") = "Comparision Cost " & compCurrency & "/1000m2"

i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Corrugation_cost Then
        corrugatorArr(j, 1) = dbArr(i, 6)
        corrugatorArr(j, 2) = dbArr(i, 7)
        corrugatorArr(j, 2) = dbArr(i, 7)
        corrugatorArr(j, 3) = corrugatorArr(j, 2) / compCurrencyVal
        j = j + 1
    Else
    End If
        

Next i
rngCorrugatortable = corrugatorArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub CorrugatedSheets_Delete()
    Dim dbSheet As Worksheet
    Dim corrugatedboardSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatedboardSheet = ThisWorkbook.Sheets("Corrugated Board")


' Set array ranges
Set rngSelection = corrugatedboardSheet.Range("B5:D12")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub


' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Purchased_Sheets Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
CorrugatedSheets_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub CorrugatedSheets_Save()
    Dim dbSheet As Worksheet
    Dim corrugatedboardSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngCompObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatedboardSheet = ThisWorkbook.Sheets("Corrugated Board")


' Set array ranges
Set rngSelection = corrugatedboardSheet.Range("B5:D12")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'
If selectionArr(1, 1) = "" Then
    MsgBox "Name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  name"
    GoTo endXLupdate
    Else
End If

If selectionArr(3, 1) = "" Then
    MsgBox "Composition cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Composition name"
    GoTo endXLupdate
    Else
End If

If selectionArr(4, 1) = "" Then
    MsgBox "Manufacturers name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty  Manufacturer name"
    GoTo endXLupdate
    Else
End If

If selectionArr(6, 1) = "" Then
    MsgBox "Purchase Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Purchase Cost"
    GoTo endXLupdate
    Else
End If

If selectionArr(7, 1) = "" Then
    MsgBox "Pallet Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Pallet Cost"
    GoTo endXLupdate
    Else
End If

If selectionArr(8, 1) = "" Then
    MsgBox "Distribution Cost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Distribution Cost"
    GoTo endXLupdate
    Else
End If

i = 6
For i = 6 To 8
If Not IsNumeric(selectionArr(i, 1)) Then
    MsgBox "There is non numeric data for costs" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Cost Number Error"
    GoTo endXLupdate
    Else
End If
Next i

i = 6
For i = 6 To 8
If selectionArr(i, 3) = "" Then
    MsgBox "Purchase Currency cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Purchase Currency"
    GoTo endXLupdate
    Else
End If
Next i


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Composition
                dbArr(firstemptyrow, 1) = Purchased_Sheets
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Purchased_Sheets"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                dbArr(firstemptyrow, 8) = selectionArr(5, 1)
                dbArr(firstemptyrow, 9) = selectionArr(6, 1)
                dbArr(firstemptyrow, 10) = selectionArr(6, 3)
                dbArr(firstemptyrow, 11) = selectionArr(7, 1)
                dbArr(firstemptyrow, 12) = selectionArr(7, 3)
                dbArr(firstemptyrow, 13) = selectionArr(8, 1)
                dbArr(firstemptyrow, 14) = selectionArr(8, 3)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Purchased_Sheets Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                dbArr(i, 8) = selectionArr(5, 1)
                dbArr(i, 9) = selectionArr(6, 1)
                dbArr(i, 10) = selectionArr(6, 3)
                dbArr(i, 11) = selectionArr(7, 1)
                dbArr(i, 12) = selectionArr(7, 3)
                dbArr(i, 13) = selectionArr(8, 1)
                dbArr(i, 14) = selectionArr(8, 3)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
CorrugatedSheets_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub CorrugatedSheets_Clear()
    Dim dbSheet As Worksheet
    Dim corrugatedboardSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatedboardSheet = ThisWorkbook.Sheets("Corrugated Board")


' Empty Composition selection area
corrugatedboardSheet.Cells(5, "B") = ""
corrugatedboardSheet.Cells(6, "B") = ""
corrugatedboardSheet.Cells(7, "B") = ""
corrugatedboardSheet.Cells(8, "B") = ""
corrugatedboardSheet.Cells(9, "B") = ""
corrugatedboardSheet.Cells(10, "B") = ""
corrugatedboardSheet.Cells(11, "B") = ""
corrugatedboardSheet.Cells(12, "B") = ""
corrugatedboardSheet.Cells(10, "D") = ""
corrugatedboardSheet.Cells(11, "D") = ""
corrugatedboardSheet.Cells(12, "D") = ""

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub CorrugatedSheets_LoadSelection()
    Dim dbSheet As Worksheet
    Dim corrugatedboardSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    'Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    'Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatedboardSheet = ThisWorkbook.Sheets("Corrugated Board")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = corrugatedboardSheet.Range("B5:D12")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
' and UI
corrugatedboardSheet.Cells(5, "B") = ""
corrugatedboardSheet.Cells(6, "B") = ""
corrugatedboardSheet.Cells(7, "B") = ""
corrugatedboardSheet.Cells(8, "B") = ""
corrugatedboardSheet.Cells(9, "B") = ""
corrugatedboardSheet.Cells(10, "B") = ""
corrugatedboardSheet.Cells(11, "B") = ""
corrugatedboardSheet.Cells(12, "B") = ""
corrugatedboardSheet.Cells(10, "D") = ""
corrugatedboardSheet.Cells(11, "D") = ""
corrugatedboardSheet.Cells(12, "D") = ""

selectedRow = 16
selectedRow = Selection.row
If selectedRow < 16 Or selectedRow > 100 Then
    selectedRow = 16
    Else
End If
' Load Selection
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 13 Then
        If dbArr(i, 4) = corrugatedboardSheet.Cells(selectedRow, 1) Then
            corrugatedboardSheet.Cells(5, "B") = dbArr(i, 4)
            corrugatedboardSheet.Cells(6, "B") = dbArr(i, 5)
            corrugatedboardSheet.Cells(7, "B") = dbArr(i, 6)
            corrugatedboardSheet.Cells(8, "B") = dbArr(i, 7)
            corrugatedboardSheet.Cells(9, "B") = dbArr(i, 8)
            corrugatedboardSheet.Cells(10, "B") = dbArr(i, 9)
            corrugatedboardSheet.Cells(11, "B") = dbArr(i, 11)
            corrugatedboardSheet.Cells(12, "B") = dbArr(i, 13)
            corrugatedboardSheet.Cells(10, "D") = dbArr(i, 10)
            corrugatedboardSheet.Cells(11, "D") = dbArr(i, 12)
            corrugatedboardSheet.Cells(12, "D") = dbArr(i, 14)
            Exit For
        Else
        End If
    Else
    End If
Next i

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub CorrugatedSheets_Load()
    Dim dbSheet As Worksheet
    Dim corrugatedboardSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim salesCurrency As String
    Dim compCurrency As String
    Dim compCurrencyVal As Double
    Dim purchasecost As Double
    Dim palletcost As Double
    Dim transportcost As Double
    Dim landedcost As Double
    
    Dim rngDB As Range
    Dim rngCBtable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim cbArr() As Variant
    Dim selectionArr() As Variant
    Dim XrateArr() As Variant
    
    'Below to store validation lists on DB sheet to avoid 256 char limitation in validation delimited lists
    Dim lastcolumn As Long
    
    Dim rng_temp_composition As Range
    Dim rng_temp_boards As Range
    Dim rng_temp_customer As Range
    Dim rng_temp_conversion As Range
    Dim rng_temp_pallet As Range
    Dim rng_temp_transport As Range
    Dim rng_temp_paper As Range
    
    Dim temp_compositionArr() As Variant
    Dim temp_boardsArr() As Variant
    Dim temp_customerArr() As Variant
    Dim temp_conversionArr() As Variant
    Dim temp_palletArr() As Variant
    Dim temp_transportArr() As Variant
    Dim temp_paperArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set corrugatedboardSheet = ThisWorkbook.Sheets("Corrugated Board")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A15").Activate
corrugatedboardSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngCBtable = corrugatedboardSheet.Range("A16:F100")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = corrugatedboardSheet.Range("B5:B12")
Set rngXrate = dbSheet.Range("A1:B50")

'Rows with temp data  storage for long lists
Set rng_temp_composition = dbSheet.Range("D2:OJ2")
Set rng_temp_boards = dbSheet.Range("D3:OJ3")
Set rng_temp_customer = dbSheet.Range("D4:OJ4")
Set rng_temp_conversion = dbSheet.Range("D5:OJ5")
Set rng_temp_pallet = dbSheet.Range("D6:OJ6")
Set rng_temp_transport = dbSheet.Range("D7:ALL7")

rng_temp_composition.ClearContents
rng_temp_boards.ClearContents
rng_temp_customer.ClearContents
rng_temp_conversion.ClearContents
rng_temp_pallet.ClearContents
rng_temp_transport.ClearContents
temp_compositionArr = rng_temp_composition.value

' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
cbArr = rngCBtable.value
XrateArr = rngXrate.value

' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty Corrugated Board array
i = 1
j = 1
For i = LBound(cbArr) To UBound(cbArr)
        cbArr(i, 1) = ""
            For j = LBound(cbArr, 2) To UBound(cbArr, 2)
                cbArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
' ...and in UI
corrugatedboardSheet.Cells(5, "B") = ""
corrugatedboardSheet.Cells(6, "B") = ""
corrugatedboardSheet.Cells(7, "B") = ""
corrugatedboardSheet.Cells(8, "B") = ""
corrugatedboardSheet.Cells(9, "B") = ""
corrugatedboardSheet.Cells(10, "B") = ""
corrugatedboardSheet.Cells(11, "B") = ""
corrugatedboardSheet.Cells(12, "B") = ""
corrugatedboardSheet.Cells(10, "D") = ""
corrugatedboardSheet.Cells(11, "D") = ""
corrugatedboardSheet.Cells(12, "D") = ""



' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i


' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i


' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i

corrugatedboardSheet.Cells(15, "E") = "Landed Cost/1000m2 " & salesCurrency
corrugatedboardSheet.Cells(15, "F") = "Landed Cost/1000m2 " & compCurrency

' Load Currency List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 31 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":AO" & j

If textline = "" Then
Else
With corrugatedboardSheet.Range("D10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

If textline = "" Then
Else
With corrugatedboardSheet.Range("D11").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

If textline = "" Then
Else
With corrugatedboardSheet.Range("D12").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Fill temporary storage with compositions
j = 1
i = 1
first = 0
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 12 Then
        temp_compositionArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_compositionArr) To 395
If Not temp_compositionArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_composition = temp_compositionArr
rng_temp_composition.Sort Key1:=Range("DB!D2"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D2:" & Cells(2, lastcolumn).Address

' Load  List
If textline = "" Then
Else
With corrugatedboardSheet.Range("B7").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If


' Load Corrugated Board Table
purchasecost = 0
palletcost = 0
distributioncost = 0
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Purchased_Sheets Then
        cbArr(j, 1) = dbArr(i, 4)
        cbArr(j, 2) = dbArr(i, 5)
        cbArr(j, 3) = dbArr(i, 6)
        cbArr(j, 4) = dbArr(i, 7)
        On Error Resume Next
        purchasecost = Application.WorksheetFunction.VLookup(dbArr(i, 10), XrateArr, 2, False) _
                        * dbArr(i, 9)
        palletcost = Application.WorksheetFunction.VLookup(dbArr(i, 12), XrateArr, 2, False) _
                        * dbArr(i, 11)
        distributioncost = Application.WorksheetFunction.VLookup(dbArr(i, 14), XrateArr, 2, False) _
                        * dbArr(i, 13)
        On Error GoTo 0
        cbArr(j, 5) = purchasecost + palletcost + distributioncost
        cbArr(j, 6) = cbArr(j, 5) / compCurrencyVal
        
        j = j + 1
    Else
    End If
Next i
rngCBtable = cbArr


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Compositions_Delete()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")


' Set array ranges
Set rngSelection = cb_compositionsSheet.Range("A6:D16")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = dbArr(i, 27) Then
                If MsgBox("Composition exist in at least one Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Composition in use!") = vbNo Then Exit Sub
                    Exit For
        Else
        End If
        
    Else
    End If
Next i

'Test if it exists in any Corrugated Sheet
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Purchased_Sheets Then
        If deleteEntry = dbArr(i, 6) Then
                If MsgBox("Composition exist in at least one Corrugated Board(Purchased Sheets)!" _
                    & vbNewLine & vbNewLine & deleteEntry & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Composition in use!") = vbNo Then Exit Sub
                    Exit For
        Else
        End If
        
    Else
    End If
Next i


' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = CB_Composition Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i
dbArr = dbArrOut

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i

' Delete connected Corrugation Object
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Corrugation_cost Then
                If dbArr(i, 6) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Compositions_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Compositions_Save()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim firstemptyDBrow As Long
    Dim found As Long
    Dim topcolor As String
    Dim bottomcolor As String
    Dim topcolor_short As String
    Dim bottomcolor_short As String
    Dim colorcomb As String
    
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngCompObj As Range
    Dim rngPapers As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim dbObjectArr() As Variant
    Dim compObjectArr() As Variant
    Dim papersArr(300, 75) As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")


' Set array ranges
Set rngSelection = cb_compositionsSheet.Range("A6:D16")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCompObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
compObjArr = rngCompObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

'Load Papers Array
i = 1
j = 1
k = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Papers Then
        k = 1
        For k = 1 To 75
            papersArr(j, k) = dbArr(i, k)
        Next k
        j = j + 1
    Else
    End If
Next i
 

'
' ERROR CHECK
'

'i = 1
'found = 0
'For i = LBound(dbArr) To UBound(dbArr)
'    If dbArr(i, 1) = 12 Then
'        If dbArr(i, 4) = selectionArr(1, 1) Then
'            found = 1
'            Exit For
'        Else
'        End If
'    Else
'    End If
'Next i
'
'If found = 1 Then
'    MsgBox "Composition name already exists" & vbNewLine _
'            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Existing Composition name"
'    GoTo endXLupdate
'    Else
'End If

If selectionArr(1, 1) = "" Then
    MsgBox "Composition name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Composition name"
    GoTo endXLupdate
    Else
End If

If selectionArr(1, 2) = "" Then
    MsgBox "IKEA Quality cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty IKEA Quality"
    GoTo endXLupdate
    Else
End If

If selectionArr(1, 4) = "" Then
    MsgBox "Flutes cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Flutes Selection"
    GoTo endXLupdate
    Else
End If

If selectionArr(11, 2) = "" Then
    MsgBox "Default MSS Status cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Default MSS Status"
    GoTo endXLupdate
    Else
End If

i = 3
For i = 3 To 10
If Not IsNumeric(selectionArr(i, 3)) Then
    MsgBox "There is non numeric data for weight" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Weight Number Error"
    GoTo endXLupdate
    Else
End If
Next i


topcolor = ""
bottomcolor = ""
topcolor_short = ""
bottomcolor_short = ""

i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Composition
                dbArr(firstemptyrow, 1) = CB_Composition
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "CB_Composition"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(1, 2)
                dbArr(firstemptyrow, 6) = selectionArr(1, 3)
                dbArr(firstemptyrow, 7) = selectionArr(1, 4)
                
                ' Set color combination
                k = 1
                For k = LBound(papersArr) To UBound(papersArr)
                If papersArr(k, 4) = selectionArr(3, 2) Then
                    topcolor = papersArr(k, 11)
                Else
                End If
                
                If papersArr(k, 4) = selectionArr(9, 2) Then
                    bottomcolor = papersArr(k, 11)
                Else
                End If
                Next k
                
                Select Case topcolor
                        Case Is = "Brown"
                            topcolor_short = "B"
                        Case Is = "White"
                            topcolor_short = "W"
                        Case Is = "Other"
                            topcolor_short = "O"
                        Case Else
                            topcolor_short = ""
                End Select
                
                Select Case bottomcolor
                        Case Is = "Brown"
                            bottomcolor_short = "B"
                        Case Is = "White"
                            bottomcolor_short = "W"
                        Case Is = "Other"
                            bottomcolor_short = "O"
                        Case Else
                            bottomcolor_short = ""
                End Select
                dbArr(firstemptyrow, 8) = topcolor_short & bottomcolor_short
                dbArr(firstemptyrow, 12) = selectionArr(3, 2)
                dbArr(firstemptyrow, 13) = selectionArr(3, 3)
                dbArr(firstemptyrow, 15) = selectionArr(4, 2)
                dbArr(firstemptyrow, 16) = selectionArr(4, 3)
                dbArr(firstemptyrow, 17) = selectionArr(4, 4)
                dbArr(firstemptyrow, 19) = selectionArr(5, 2)
                dbArr(firstemptyrow, 20) = selectionArr(5, 3)
                dbArr(firstemptyrow, 22) = selectionArr(6, 2)
                dbArr(firstemptyrow, 23) = selectionArr(6, 3)
                dbArr(firstemptyrow, 24) = selectionArr(6, 4)
                dbArr(firstemptyrow, 26) = selectionArr(7, 2)
                dbArr(firstemptyrow, 27) = selectionArr(7, 3)
                dbArr(firstemptyrow, 29) = selectionArr(8, 2)
                dbArr(firstemptyrow, 30) = selectionArr(8, 3)
                dbArr(firstemptyrow, 31) = selectionArr(8, 4)
                dbArr(firstemptyrow, 33) = selectionArr(9, 2)
                dbArr(firstemptyrow, 34) = selectionArr(9, 3)
                dbArr(firstemptyrow, 36) = selectionArr(10, 2)
                dbArr(firstemptyrow, 37) = selectionArr(10, 3)
                dbArr(firstemptyrow, 10) = selectionArr(11, 2)
                
                ' Create a Corrugation Object
                dbArr(firstemptyrow + 1, 1) = Corrugation_cost
                dbArr(firstemptyrow + 1, 2) = 1
                dbArr(firstemptyrow + 1, 3) = "Corrugation_cost"
                dbArr(firstemptyrow + 1, 4) = 1
                dbArr(firstemptyrow + 1, 5) = ""
                dbArr(firstemptyrow + 1, 6) = selectionArr(1, 1)
                dbArr(firstemptyrow + 1, 7) = 0
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = CB_Composition Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(1, 2)
                dbArr(i, 6) = selectionArr(1, 3)
                dbArr(i, 7) = selectionArr(1, 4)
                
                ' Set color combination
                k = 1
                For k = LBound(papersArr) To UBound(papersArr)
                If papersArr(k, 4) = selectionArr(3, 2) Then
                    topcolor = papersArr(k, 11)
                Else
                End If
                
                If papersArr(k, 4) = selectionArr(9, 2) Then
                    bottomcolor = papersArr(k, 11)
                Else
                End If
                Next k
                
                Select Case topcolor
                        Case Is = "Brown"
                            topcolor_short = "B"
                        Case Is = "White"
                            topcolor_short = "W"
                        Case Is = "Other"
                            topcolor_short = "O"
                        Case Else
                            topcolor_short = ""
                End Select
                
                Select Case bottomcolor
                        Case Is = "Brown"
                            bottomcolor_short = "B"
                        Case Is = "White"
                            bottomcolor_short = "W"
                        Case Is = "Other"
                            bottomcolor_short = "O"
                        Case Else
                            bottomcolor_short = ""
                End Select
                dbArr(i, 8) = topcolor_short & bottomcolor_short
                dbArr(i, 12) = selectionArr(3, 2)
                dbArr(i, 13) = selectionArr(3, 3)
                dbArr(i, 15) = selectionArr(4, 2)
                dbArr(i, 16) = selectionArr(4, 3)
                dbArr(i, 17) = selectionArr(4, 4)
                dbArr(i, 19) = selectionArr(5, 2)
                dbArr(i, 20) = selectionArr(5, 3)
                dbArr(i, 22) = selectionArr(6, 2)
                dbArr(i, 23) = selectionArr(6, 3)
                dbArr(i, 24) = selectionArr(6, 4)
                dbArr(i, 26) = selectionArr(7, 2)
                dbArr(i, 27) = selectionArr(7, 3)
                dbArr(i, 29) = selectionArr(8, 2)
                dbArr(i, 30) = selectionArr(8, 3)
                dbArr(i, 31) = selectionArr(8, 4)
                dbArr(i, 33) = selectionArr(9, 2)
                dbArr(i, 34) = selectionArr(9, 3)
                dbArr(i, 36) = selectionArr(10, 2)
                dbArr(i, 37) = selectionArr(10, 3)
                dbArr(i, 10) = selectionArr(11, 2)
                Exit For
                Else
                End If
            Else
            End If
Next i

'DRAFT2
' Check if Composition and color exist in combination
'i = 1
'For i = LBound(dbArr) To firstemptyrow - 1
'If dbArr(i, 1) = CB_Composition Then
'        If dbArr(i, 5) = selectionArr(1, 2) And dbArr(i, 7) = topcolor_short & bottomcolor_short Then
'            MsgBox "Composition type and color combination already in use" & vbNewLine _
'            & "Must be fixed before saving ", vbYesNo + vbCritical, "Combination in use"
'        GoTo endXLupdate
'        Else
'        End If
'Else
'End If
'Next i
'END DRAFT2

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Compositions_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Compositions_Clear()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")

' Empty Composition selection area
cb_compositionsSheet.Cells(6, "A") = ""
cb_compositionsSheet.Cells(6, "B") = ""
cb_compositionsSheet.Cells(6, "C") = ""
cb_compositionsSheet.Cells(6, "D") = ""
cb_compositionsSheet.Cells(8, "B") = ""
cb_compositionsSheet.Cells(9, "B") = ""
cb_compositionsSheet.Cells(10, "B") = ""
cb_compositionsSheet.Cells(11, "B") = ""
cb_compositionsSheet.Cells(12, "B") = ""
cb_compositionsSheet.Cells(13, "B") = ""
cb_compositionsSheet.Cells(14, "B") = ""
cb_compositionsSheet.Cells(15, "B") = ""
cb_compositionsSheet.Cells(16, "B") = ""
cb_compositionsSheet.Cells(8, "C") = ""
cb_compositionsSheet.Cells(9, "C") = ""
cb_compositionsSheet.Cells(10, "C") = ""
cb_compositionsSheet.Cells(11, "C") = ""
cb_compositionsSheet.Cells(12, "C") = ""
cb_compositionsSheet.Cells(13, "C") = ""
cb_compositionsSheet.Cells(14, "C") = ""
cb_compositionsSheet.Cells(15, "C") = ""
cb_compositionsSheet.Cells(9, "D") = ""
cb_compositionsSheet.Cells(11, "D") = ""
cb_compositionsSheet.Cells(13, "D") = ""

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Compositions_LoadSelection()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim first As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value


' Empty Selection
cb_compositionsSheet.Cells(6, "A") = ""
cb_compositionsSheet.Cells(6, "B") = ""
cb_compositionsSheet.Cells(6, "C") = ""
cb_compositionsSheet.Cells(6, "D") = ""
cb_compositionsSheet.Cells(8, "B") = ""
cb_compositionsSheet.Cells(9, "B") = ""
cb_compositionsSheet.Cells(10, "B") = ""
cb_compositionsSheet.Cells(11, "B") = ""
cb_compositionsSheet.Cells(12, "B") = ""
cb_compositionsSheet.Cells(13, "B") = ""
cb_compositionsSheet.Cells(14, "B") = ""
cb_compositionsSheet.Cells(15, "B") = ""
cb_compositionsSheet.Cells(16, "B") = ""
cb_compositionsSheet.Cells(8, "C") = ""
cb_compositionsSheet.Cells(9, "C") = ""
cb_compositionsSheet.Cells(10, "C") = ""
cb_compositionsSheet.Cells(11, "C") = ""
cb_compositionsSheet.Cells(12, "C") = ""
cb_compositionsSheet.Cells(13, "C") = ""
cb_compositionsSheet.Cells(14, "C") = ""
cb_compositionsSheet.Cells(15, "C") = ""
cb_compositionsSheet.Cells(9, "D") = ""
cb_compositionsSheet.Cells(11, "D") = ""
cb_compositionsSheet.Cells(13, "D") = ""

selectedRow = 20
selectedRow = Selection.row
If selectedRow < 20 Or selectedRow > 100 Then
    selectedRow = 20
    Else
End If
' Load Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = CB_Composition Then
        If dbArr(i, 4) = cb_compositionsSheet.Cells(selectedRow, 1) Then
            cb_compositionsSheet.Cells(6, "A") = dbArr(i, 4)
            cb_compositionsSheet.Cells(6, "B") = dbArr(i, 5)
            cb_compositionsSheet.Cells(6, "C") = dbArr(i, 6)
            cb_compositionsSheet.Cells(6, "D") = dbArr(i, 7)
            cb_compositionsSheet.Cells(8, "B") = dbArr(i, 12)
            cb_compositionsSheet.Cells(9, "B") = dbArr(i, 15)
            cb_compositionsSheet.Cells(10, "B") = dbArr(i, 19)
            cb_compositionsSheet.Cells(11, "B") = dbArr(i, 22)
            cb_compositionsSheet.Cells(12, "B") = dbArr(i, 26)
            cb_compositionsSheet.Cells(13, "B") = dbArr(i, 29)
            cb_compositionsSheet.Cells(14, "B") = dbArr(i, 33)
            cb_compositionsSheet.Cells(15, "B") = dbArr(i, 36)
            cb_compositionsSheet.Cells(16, "B") = dbArr(i, 10)
            cb_compositionsSheet.Cells(8, "C") = dbArr(i, 13)
            cb_compositionsSheet.Cells(9, "C") = dbArr(i, 16)
            cb_compositionsSheet.Cells(10, "C") = dbArr(i, 20)
            cb_compositionsSheet.Cells(11, "C") = dbArr(i, 23)
            cb_compositionsSheet.Cells(12, "C") = dbArr(i, 27)
            cb_compositionsSheet.Cells(13, "C") = dbArr(i, 30)
            cb_compositionsSheet.Cells(14, "C") = dbArr(i, 34)
            cb_compositionsSheet.Cells(15, "C") = dbArr(i, 37)
            cb_compositionsSheet.Cells(9, "D") = dbArr(i, 17)
            cb_compositionsSheet.Cells(11, "D") = dbArr(i, 24)
            cb_compositionsSheet.Cells(13, "D") = dbArr(i, 31)
            Exit For
        Else
        End If
    Else
    End If
Next i





endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Compositions_SaveFlute()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim papersObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")


' Set array ranges
Set rngSelection = cb_compositionsSheet.Range("H7:H14")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPapersObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
papersObjArr = rngPapersObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

'
' Save Flutetable
'
i = 1
For i = LBound(dbArr) To UBound(dbArr)
                If dbArr(i, 1) = Flute_table Then
                    dbArr(i, 4) = selectionArr(1, 1)
                    dbArr(i, 5) = selectionArr(2, 1)
                    dbArr(i, 6) = selectionArr(3, 1)
                    dbArr(i, 7) = selectionArr(4, 1)
                    dbArr(i, 8) = selectionArr(5, 1)
                    dbArr(i, 9) = selectionArr(6, 1)
                    dbArr(i, 10) = selectionArr(7, 1)
                    dbArr(i, 11) = selectionArr(8, 1)
                Else
                End If

Next i

rngDB = dbArr
Compositions_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Compositions_Load()
    Dim dbSheet As Worksheet
    Dim cb_compositionsSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim first As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngComptable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngFlute As Range
    Dim rngXrate As Range
    
    Dim dbArr() As Variant
    Dim compArr() As Variant
    Dim selectionArr() As Variant
    Dim fluteArr() As Variant
    Dim XrateArr() As Variant
    
    Dim compname As String
    Dim ikeaquality As String
    Dim suppliercode As String
    Dim textline As String
    Dim flutes As String
    Dim tlp As String
    Dim f1p As String
    Dim m1p As String
    Dim f2p As String
    Dim m2p As String
    Dim f3p As String
    Dim blp As String
    Dim starch As String
    Dim mss As String
    
    Dim tlw As Double
    Dim f1w As Double
    Dim m1w As Double
    Dim f2w As Double
    Dim m2w As Double
    Dim f3w As Double
    Dim blw As Double
    Dim stw As Double
    Dim starch_w As Double
    Dim totalweight As Double
    
    Dim f1_factor As Double
    Dim f2_factor As Double
    Dim f3_factor As Double
    
    Dim f1_type As String
    Dim f2_type As String
    Dim f3_type As String
    
    Dim topcolor As String
    Dim bottomcolor As String
    Dim topcolor_short As String
    Dim bottomcolor_short As String
    
    Dim tlc As Double
    Dim f1c As Double
    Dim m1c As Double
    Dim f2c As Double
    Dim m2c As Double
    Dim f3c As Double
    Dim blc As Double
    Dim stc As Double
    Dim totalcost As Double
    
    Dim salesCurrency As String
    Dim xrate As Double
    Dim compCurrency As String
    Dim compCurrencyVal As Double

    'Below to store validation lists on DB sheet to avoid 256 char limitation in validation delimited lists
    Dim lastcolumn As Long
    
    Dim rng_temp_composition As Range
    Dim rng_temp_boards As Range
    Dim rng_temp_customer As Range
    Dim rng_temp_conversion As Range
    Dim rng_temp_pallet As Range
    Dim rng_temp_transport As Range
    Dim rng_temp_paper As Range
    
    Dim temp_compositionArr() As Variant
    Dim temp_boardsArr() As Variant
    Dim temp_customerArr() As Variant
    Dim temp_conversionArr() As Variant
    Dim temp_palletArr() As Variant
    Dim temp_transportArr() As Variant
    Dim temp_paperArr() As Variant


    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set cb_compositionsSheet = ThisWorkbook.Sheets("CB Compositions")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A19").Activate
cb_compositionsSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngComptable = cb_compositionsSheet.Range("A20:I100")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngFlute = cb_compositionsSheet.Range("G7:H15")
Set rngXrate = dbSheet.Range("A1:B50")

'Rows with temp data  storage for long lists
Set rng_temp_composition = dbSheet.Range("D2:OJ2")
Set rng_temp_boards = dbSheet.Range("D3:OJ3")
Set rng_temp_customer = dbSheet.Range("D4:OJ4")
Set rng_temp_conversion = dbSheet.Range("D5:OJ5")
Set rng_temp_pallet = dbSheet.Range("D6:OJ6")
Set rng_temp_transport = dbSheet.Range("D7:ALL7")
Set rng_temp_paper = dbSheet.Range("D8:OJ8")

rng_temp_composition.ClearContents
rng_temp_boards.ClearContents
rng_temp_customer.ClearContents
rng_temp_conversion.ClearContents
rng_temp_pallet.ClearContents
rng_temp_transport.ClearContents
rng_temp_paper.ClearContents
temp_boardsArr = rng_temp_composition.value
temp_customerArr = rng_temp_customer.value
temp_conversionArr = rng_temp_conversion.value
temp_palletArr = rng_temp_pallet.value
temp_transportArr = rng_temp_transport.value
temp_paperArr = rng_temp_paper.value




' Populate arrays
dbArr = rngDB.value
compArr = rngComptable.value
dbObjectArr = rngDBObj.value
fluteArr = rngFlute.value
XrateArr = rngXrate.value


' Empty Xrate array
i = 1
j = 1
For i = LBound(XrateArr) To UBound(XrateArr)
        XrateArr(i, 1) = ""
            For j = LBound(XrateArr, 2) To UBound(XrateArr, 2)
                XrateArr(i, j) = ""
            Next j
Next i

' Empty List in A2
cb_compositionsSheet.Cells(2, "A") = ""

' Empty Composition selection area
cb_compositionsSheet.Cells(6, "A") = ""
cb_compositionsSheet.Cells(6, "B") = ""
cb_compositionsSheet.Cells(6, "C") = ""
cb_compositionsSheet.Cells(6, "D") = ""
cb_compositionsSheet.Cells(8, "B") = ""
cb_compositionsSheet.Cells(9, "B") = ""
cb_compositionsSheet.Cells(10, "B") = ""
cb_compositionsSheet.Cells(11, "B") = ""
cb_compositionsSheet.Cells(12, "B") = ""
cb_compositionsSheet.Cells(13, "B") = ""
cb_compositionsSheet.Cells(14, "B") = ""
cb_compositionsSheet.Cells(15, "B") = ""
cb_compositionsSheet.Cells(16, "B") = ""
cb_compositionsSheet.Cells(8, "C") = ""
cb_compositionsSheet.Cells(9, "C") = ""
cb_compositionsSheet.Cells(10, "C") = ""
cb_compositionsSheet.Cells(11, "C") = ""
cb_compositionsSheet.Cells(12, "C") = ""
cb_compositionsSheet.Cells(13, "C") = ""
cb_compositionsSheet.Cells(14, "C") = ""
cb_compositionsSheet.Cells(15, "C") = ""
cb_compositionsSheet.Cells(9, "D") = ""
cb_compositionsSheet.Cells(11, "D") = ""
cb_compositionsSheet.Cells(13, "D") = ""


' Empty Compositions array
i = 1
j = 1
For i = LBound(compArr) To UBound(compArr)
        compArr(i, 1) = ""
            For j = LBound(compArr, 2) To UBound(compArr, 2)
                compArr(i, j) = ""
            Next j
Next i

' Empty Flute array values only
fluteArr(1, 2) = ""
fluteArr(2, 2) = ""
fluteArr(3, 2) = ""
fluteArr(4, 2) = ""
fluteArr(5, 2) = ""
fluteArr(6, 2) = ""
fluteArr(7, 2) = ""
fluteArr(8, 2) = ""

' Load Flute Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Flute_table Then
        fluteArr(1, 2) = dbArr(i, 4)
        fluteArr(2, 2) = dbArr(i, 5)
        fluteArr(3, 2) = dbArr(i, 6)
        fluteArr(4, 2) = dbArr(i, 7)
        fluteArr(5, 2) = dbArr(i, 8)
        fluteArr(6, 2) = dbArr(i, 9)
        fluteArr(7, 2) = dbArr(i, 10)
        fluteArr(8, 2) = dbArr(i, 11)
        j = j + 1
        Exit For
    Else
    End If
Next i
rngFlute = fluteArr


' Load SalesCurrency
i = 1
salesCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 4 Then
    salesCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i

' Set Sales Currency in the H19 cell
cb_compositionsSheet.Cells(19, "H") = "Material Cost " & salesCurrency & "/1000m2"

' Load Xrates Array
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = 6 Then
        XrateArr(j, 1) = dbArr(i, 5)
        XrateArr(j, 2) = dbArr(i, 7)
        j = j + 1
        Else
        End If
Next i

' Load Comparision Currency Name
i = 1
compCurrency = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 5 Then
    compCurrency = dbArr(i, 4)
    Exit For
    Else
    End If
Next i


' Load Comparision Value
i = 1
compCurrencyVal = 0
For i = LBound(XrateArr) To UBound(XrateArr)
    If XrateArr(i, 1) = compCurrency Then
    compCurrencyVal = XrateArr(i, 2)
    Exit For
    Else
    End If
Next i
cb_compositionsSheet.Cells(19, "I") = "Material Cost " & compCurrency & "/1000m2"


' Load IKEA Qualities List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 33 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":AC" & j

With cb_compositionsSheet.Range("B6").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Load IKEA Flutes List
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 34 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":F" & j

With cb_compositionsSheet.Range("D6").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With

' Make Papers List
' Fill temporary storage with compositions
j = 1
i = 1
first = 0
textline = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 9 Then
        temp_paperArr(1, j) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Find last column in range
i = 1
lastcolumn = 4
textline = ""
For i = LBound(temp_paperArr) To 395
If Not temp_paperArr(1, i) = "" Then lastcolumn = lastcolumn + 1
Next i
If Not lastcolumn = 4 Then lastcolumn = lastcolumn - 1

rng_temp_paper = temp_paperArr
rng_temp_paper.Sort Key1:=Range("DB!D8"), Order1:=xlAscending, Header:=xlNo, Orientation:=xlColumns
textline = "=DB!D8:" & Cells(8, lastcolumn).Address

' Load  List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B8").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Flute 1 List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B9").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Midliner 1 List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B10").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Flute 2 List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B11").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Mid 2 List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B12").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Flute 3 List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B13").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Bottom Liner List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B14").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Starch List
If textline = "" Then
Else
With cb_compositionsSheet.Range("B15").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With
End If

' Load Defaulut MSS Status
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 35 Then
    j = i
    Exit For
    Else
    End If
Next i

textline = "=DB!D" & j & ":N" & j

With cb_compositionsSheet.Range("B16").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:=textline
 .IgnoreBlank = True
 .InCellDropdown = True
 .InputTitle = ""
 .ErrorTitle = ""
 .InputMessage = ""
 .ErrorMessage = ""
 .ShowInput = True
 .ShowError = True
End With



tlw = 0
f1w = 0
m1w = 0
f2w = 0
m2w = 0
f3w = 0
blw = 0
f1_factor = 0
f2_factor = 0
f3_factor = 0
f1_type = ""
f2_type = ""
f3_type = ""
starch_w = 0
totalweight = 0
' Load Compositions Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
tlc = 0 'FIXED
f1c = 0 'FIXED
m1c = 0 'FIXED
f2c = 0 'FIXED
m2c = 0 'FIXED
f3c = 0 'FIXED
blc = 0 'FIXED
stc = 0 'FIXED
tlw = 0
f1w = 0
m1w = 0
f2w = 0
m2w = 0
f3w = 0
blw = 0
f1_factor = 0
f2_factor = 0
f3_factor = 0
f1_type = ""
f2_type = ""
f3_type = ""
starch_w = 0
totalweight = 0
    If dbArr(i, 1) = CB_Composition Then
        compArr(j, 1) = dbArr(i, 4)
        compArr(j, 2) = dbArr(i, 5)
        compArr(j, 3) = dbArr(i, 6)
        
        
        tlw = dbArr(i, 13)
        f1w = dbArr(i, 16)
        m1w = dbArr(i, 20)
        f2w = dbArr(i, 23)
        m2w = dbArr(i, 27)
        f3w = dbArr(i, 30)
        blw = dbArr(i, 34)
        stw = dbArr(i, 37)
        
        f1_type = dbArr(i, 17)
        f2_type = dbArr(i, 24)
        f3_type = dbArr(i, 31)
        
        On Error Resume Next
        f1_factor = Application.WorksheetFunction.VLookup(f1_type, fluteArr, 2, False)
        f2_factor = Application.WorksheetFunction.VLookup(f2_type, fluteArr, 2, False)
        f3_factor = Application.WorksheetFunction.VLookup(f3_type, fluteArr, 2, False)
        On Error GoTo 0
        
        'f1w = f1_factor * dbArr(i, 16)
        'f2w = f2_factor * dbArr(i, 23)
        'f3w = f3_factor * dbArr(i, 30)
        
        compArr(j, 4) = tlw + m1w + m2w + blw + (f1w * f1_factor) + (f2w * f2_factor) + _
                        (f3w * f3_factor) + stw
        compArr(j, 5) = f1_type & f2_type & f3_type

        ' Topcolor
        topcolor = "Brown"
        topcolor_short = "B"
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 12) Then
                    topcolor = dbArr(k, 11)
                    Select Case topcolor
                        Case Is = "Brown"
                            topcolor_short = "B"
                        Case Is = "White"
                            topcolor_short = "W"
                        Case Is = "Other"
                            topcolor_short = "O"
                        Case Else
                            topcolor_short = ""
                        End Select
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' Bottom Color
        bottomcolor = "Brown"
        bottomcolor_short = "B"
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 33) Then
                    bottomcolor = dbArr(k, 11)
                    Select Case bottomcolor
                        Case Is = "Brown"
                            bottomcolor_short = "B"
                        Case Is = "White"
                            bottomcolor_short = "W"
                        Case Is = "Other"
                            bottomcolor_short = "O"
                        Case Else
                            bottomcolor_short = ""
                        End Select
                    Exit For
                Else
                End If
            Else
            End If
        Next k
                '
        compArr(j, 6) = topcolor_short + bottomcolor_short
        compArr(j, 7) = dbArr(i, 10)

        '
        ' Totalcost
        '
        
        ' Topliner Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 12) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    tlc = (dbArr(k, 8) * xrate) * tlw / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' F1 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 15) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    f1c = (dbArr(k, 8) * xrate) * f1w * f1_factor / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' M1 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 19) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    m1c = (dbArr(k, 8) * xrate) * m1w / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' F2 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 22) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    f2c = (dbArr(k, 8) * xrate) * f2w * f2_factor / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' M2 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 26) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    m2c = (dbArr(k, 8) * xrate) * m2w / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' F3 Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 29) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    f3c = (dbArr(k, 8) * xrate) * f3w * f3_factor / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' BL Cost
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 33) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    blc = (dbArr(k, 8) * xrate) * blw / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        
        ' Starch
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Papers Then
                If dbArr(k, 4) = dbArr(i, 36) Then
                            On Error Resume Next
                                xrate = Application.WorksheetFunction.VLookup(dbArr(k, 9), XrateArr, 2, False)
                            On Error GoTo 0
                    stc = (dbArr(k, 8) * xrate) * stw / 1000
                    Exit For
                Else
                End If
            Else
            End If
        Next k
        compArr(j, 8) = tlc + f1c + m1c + f2c + m2c + f3c + blc + stc
        compArr(j, 9) = compArr(j, 8) / compCurrencyVal
        
        j = j + 1
    Else
    End If
Next i
rngComptable = compArr



endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Papers_Delete()
    Dim dbSheet As Worksheet
    Dim papersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim dbObjectArr() As Variant
    Dim papersObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set papersSheet = ThisWorkbook.Sheets("Papers")


' Set array ranges
Set rngSelection = papersSheet.Range("B4:B11")
Set rngSelection2 = papersSheet.Range("F4:F11")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPapersObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
papersObjArr = rngPapersObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any composition
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = CB_Composition Then
        If deleteEntry = dbArr(i, 12) Or deleteEntry = dbArr(i, 15) Or deleteEntry = dbArr(i, 19) _
            Or deleteEntry = dbArr(i, 22) Or deleteEntry = dbArr(i, 26) _
            Or deleteEntry = dbArr(i, 29) Or deleteEntry = dbArr(i, 33) Or deleteEntry = dbArr(i, 36) Then
                If MsgBox("Paper exist in a composition!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Paper in use!") = vbNo Then Exit Sub
                Exit For
        Else
        End If
        
    Else
    End If
Next i

' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Papers Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Papers_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Papers_Save()
    Dim dbSheet As Worksheet
    Dim papersSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngDBObj As Range
    Dim rngPapersObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim dbObjectArr() As Variant
    Dim papersObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set papersSheet = ThisWorkbook.Sheets("Papers")


' Set array ranges
Set rngSelection = papersSheet.Range("B4:B12")
Set rngSelection2 = papersSheet.Range("F4:F11")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngPapersObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
papersObjArr = rngPapersObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'

' Check if Paper already exist
'i = 1
'For i = LBound(dbArr) To UBound(dbArr)
'If dbArr(i, 1) = 9 Then
'        If dbArr(i, 4) = selectionArr(1, 1) Then
'            MsgBox "Paper name already in use" & vbNewLine _
'            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Used Paper name"
'        GoTo endXLupdate
'        Else
'        End If
'Else
'End If
'Next i

If selectionArr(1, 1) = "" Then
    MsgBox "Paper name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Paper name"
    GoTo endXLupdate
    Else
End If

If selectionArr(3, 1) = "" Then
    MsgBox "Tradename cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Tradename"
    GoTo endXLupdate
    Else
End If

If selectionArr(5, 1) = "" Then
    MsgBox "Unitcost cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Unitcost"
    GoTo endXLupdate
    Else
End If

If selectionArr(6, 1) = "" Then
    MsgBox "Trade currency cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Trade currency"
    GoTo endXLupdate
    Else
End If

If selectionArr(7, 1) = "" Then
    MsgBox "Color cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Color"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(5, 1)) Then
    MsgBox "There is non numeric data for the Unitcost" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Unitcost Number Error"
    GoTo endXLupdate
    Else
End If


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new Paper
                dbArr(firstemptyrow, 1) = Papers
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Papers"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                dbArr(firstemptyrow, 8) = selectionArr(5, 1)
                dbArr(firstemptyrow, 9) = selectionArr(6, 1)
                'dbArr(firstemptyrow, 10) = selectionArr(7, 1)
                dbArr(firstemptyrow, 11) = selectionArr(7, 1)
                dbArr(firstemptyrow, 12) = selectionArr(8, 1)
                
                dbArr(firstemptyrow, 13) = selectionArr2(1, 1)
                dbArr(firstemptyrow, 14) = selectionArr2(2, 1)
                dbArr(firstemptyrow, 15) = selectionArr2(3, 1)
                dbArr(firstemptyrow, 16) = selectionArr2(4, 1)
                dbArr(firstemptyrow, 17) = selectionArr2(5, 1)
                dbArr(firstemptyrow, 18) = selectionArr2(6, 1)
                dbArr(firstemptyrow, 19) = selectionArr2(7, 1)
                dbArr(firstemptyrow, 20) = selectionArr2(8, 1)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Papers Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing Paper
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                dbArr(i, 8) = selectionArr(5, 1)
                dbArr(i, 9) = selectionArr(6, 1)
                'dbArr(i, 10) = selectionArr(7, 1)
                dbArr(i, 11) = selectionArr(7, 1)
                dbArr(i, 12) = selectionArr(8, 1)
                
                dbArr(i, 13) = selectionArr2(1, 1)
                dbArr(i, 14) = selectionArr2(2, 1)
                dbArr(i, 15) = selectionArr2(3, 1)
                dbArr(i, 16) = selectionArr2(4, 1)
                dbArr(i, 17) = selectionArr2(5, 1)
                dbArr(i, 18) = selectionArr2(6, 1)
                dbArr(i, 19) = selectionArr2(7, 1)
                dbArr(i, 20) = selectionArr2(8, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Papers_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Papers_Clear()
    Dim dbSheet As Worksheet
    Dim papersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set papersSheet = ThisWorkbook.Sheets("Papers")


' Set array ranges
Set rngSelection = papersSheet.Range("B4:B11")
Set rngSelection2 = papersSheet.Range("F4:F11")


' Populate arrays
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection 2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i
rngSelection = selectionArr
rngSelection2 = selectionArr2

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Papers_LoadSelection()
    Dim dbSheet As Worksheet
    Dim papersSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As String
    
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim selectionArr2() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set papersSheet = ThisWorkbook.Sheets("Papers")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = papersSheet.Range("B4:B11")
Set rngSelection2 = papersSheet.Range("F4:F11")
Set rngTable = papersSheet.Range("A16:R100")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
selectionArr2 = rngSelection2.value
tableArr = rngTable.value


' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

' Empty Selection2 array
i = 1
j = 1
For i = LBound(selectionArr2) To UBound(selectionArr2)
        selectionArr2(i, 1) = ""
            For j = LBound(selectionArr2, 2) To UBound(selectionArr2, 2)
                selectionArr2(i, j) = ""
            Next j
Next i

selectedRow = 16
selectedRow = Selection.row
If selectedRow < 16 Or selectedRow > 100 Then
    selectedRow = 16
    Else
End If
' Load Selection Tables 1 and 2
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = papersSheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = tableArr(i, 1)
        selectionArr(2, 1) = tableArr(i, 2)
        selectionArr(3, 1) = tableArr(i, 3)
        selectionArr(4, 1) = tableArr(i, 4)
        selectionArr(5, 1) = tableArr(i, 5)
        selectionArr(6, 1) = tableArr(i, 6)
        selectionArr(7, 1) = tableArr(i, 9)
        selectionArr(8, 1) = tableArr(i, 10)
        
        selectionArr2(1, 1) = tableArr(i, 11)
        selectionArr2(2, 1) = tableArr(i, 12)
        selectionArr2(3, 1) = tableArr(i, 13)
        selectionArr2(4, 1) = tableArr(i, 14)
        selectionArr2(5, 1) = tableArr(i, 15)
        selectionArr2(6, 1) = tableArr(i, 16)
        selectionArr2(7, 1) = tableArr(i, 17)
        selectionArr2(8, 1) = tableArr(i, 18)
        Exit For
    Else
    End If
Next i



rngSelection = selectionArr
rngSelection2 = selectionArr2

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Currency_Save()
    Dim dbSheet As Worksheet
    Dim currencySheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngSelection As Range

    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set currencySheet = ThisWorkbook.Sheets("Currency")


' Set array ranges
Set rngSelection = currencySheet.Range("B7:B9")
Set rngDB = dbSheet.Range("A1:BZ10000")



' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'
' ERROR CHECK
'


If Not IsNumeric(selectionArr(3, 1)) Then
    MsgBox "There is non numeric data enterd for Exchange Rate" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Exchange Rate Number Error"
    currencySheet.Cells(9, "B") = ""
    GoTo endXLupdate
    Else
End If



i = 1
For i = LBound(dbArr) To firstemptyrow
            
            If dbArr(i, 1) = Exchange_Rate Then
                If dbArr(i, 5) = selectionArr(2, 1) Then
                ' Save to exchange rate
                dbArr(i, 7) = selectionArr(3, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Currency_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Currency_LoadSelection()
    Dim dbSheet As Worksheet
    Dim currencySheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set currencySheet = ThisWorkbook.Sheets("Currency")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = currencySheet.Range("B7:B9")
Set rngTable = currencySheet.Range("A14:C100")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
tableArr = rngTable.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

selectedRow = 14
selectedRow = Selection.row
If selectedRow < 14 Or selectedRow > 100 Then
    selectedRow = 14
    Else
End If
' Load Selection Table
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = currencySheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = tableArr(i, 1)
        selectionArr(2, 1) = tableArr(i, 2)
        selectionArr(3, 1) = tableArr(i, 3)
        Exit For
    Else
    End If
Next i
rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Currency_Save_Comparision_and_Sales_Currency()
    Dim dbSheet As Worksheet
    Dim currencySheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim salesCurrency As String
    Dim compCurrency  As String
    Dim headerCell As String
    
    Dim rngDB As Range
    
    Dim dbArr() As Variant



' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set currencySheet = ThisWorkbook.Sheets("Currency")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")

' Populate arrays
dbArr = rngDB.value


salesCurrency = currencySheet.Cells(2, "B")
compCurrency = currencySheet.Cells(3, "B")


' Update the Sales and Comparision Currencies
i = 1
For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = Sales_Currency Then
                dbArr(i, 4) = salesCurrency
            Else
            End If
            
            If dbArr(i, 1) = Comparision_Currency Then
                dbArr(i, 4) = compCurrency
            Else
            End If
            
                ' Save Exchange Rate 1 for Sales Currency
                If dbArr(i, 1) = Exchange_Rate Then
                    If dbArr(i, 5) = salesCurrency Then
                    dbArr(i, 7) = 1
                    Else
                    End If
                Else
                End If
Next i

currencySheet.Cells(13, "C") = "Exchange Rate against " & salesCurrency
rngDB = dbArr
Currency_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Currency_Load()
    Dim dbSheet As Worksheet
    Dim currencySheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngCurrencytable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    
    Dim dbArr() As Variant
    Dim currencyArr() As Variant
    Dim selectionArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set currencySheet = ThisWorkbook.Sheets("Currency")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A13").Activate
currencySheet.ShowAllData
On Error GoTo 0


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngCurrencytable = currencySheet.Range("A14:C100")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = currencySheet.Range("B7:B9")

' Populate arrays
dbArr = rngDB.value
currencyArr = rngCurrencytable.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value

' Empty List in A2
currencySheet.Cells(2, "B") = ""
currencySheet.Cells(2, "C") = ""

' Empty Currency array
i = 1
j = 1
For i = LBound(currencyArr) To UBound(currencyArr)
        currencyArr(i, 1) = ""
            For j = LBound(currencyArr, 2) To UBound(currencyArr, 2)
                currencyArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Load Sales and Comparision Currencies
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Sales_Currency Then
        currencySheet.Cells(2, "B") = dbArr(i, 4)
    Else
    End If
    
    If dbArr(i, 1) = Comparision_Currency Then
        currencySheet.Cells(3, "B") = dbArr(i, 4)
    Else
    End If
Next i

' Load Customer Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Exchange_Rate Then
        currencyArr(j, 1) = dbArr(i, 6)
        currencyArr(j, 2) = dbArr(i, 5)
        currencyArr(j, 3) = dbArr(i, 7)
        j = j + 1
    Else
    End If
Next i

currencySheet.Cells(13, "C") = "Exchange Rate against " & currencySheet.Cells(2, "B")
currencySheet.Cells(6, "A") = ""
rngCurrencytable = currencyArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Customers_Delete()
    Dim dbSheet As Worksheet
    Dim customer As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim found As Long
    Dim firstemptyDBrow As Long
    Dim deleteEntry As String
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngCustomerObj As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim customerObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set customerSheet = ThisWorkbook.Sheets("Customers")

' Set array ranges
Set rngSelection = customerSheet.Range("B4:B10")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCustomerObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
customerObjArr = rngCustomerObj.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Selected entry to delete
deleteEntry = selectionArr(1, 1)

'Are you sure?
If MsgBox("This will delete:" & vbNewLine & vbNewLine & deleteEntry, vbYesNo, "Delete Entry") = vbNo Then Exit Sub

'Test if it exists in any Item
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Item Then
        If deleteEntry = dbArr(i, 15) Then
                If MsgBox("Customer is connected to an Item!" & vbNewLine & vbNewLine & deleteEntry _
                    & vbNewLine & vbNewLine & "Continue?", _
                    vbYesNo + vbCritical, "Customer in use!") = vbNo Then Exit Sub
                Exit For
        Else
        End If
        
    Else
    End If
Next i



' Copy all rows except the deleted one
i = 1
j = 1
found = 0
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Customers Then
                If dbArr(i, 4) = deleteEntry Then
                found = 1
                Else
                End If
            Else
            End If
            
            If found = 1 Then
                Else
                    k = 1
                    For k = 1 To 78
                        dbArrOut(j, k) = dbArr(i, k)
                    Next k
                    j = j + 1
            End If
            found = 0
Next i

rngDB = dbArrOut
Customers_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub


Sub Customers_Save()
    Dim dbSheet As Worksheet
    Dim customer As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    
    Dim rngDB As Range
    Dim rngSelection As Range
    Dim rngDBObj As Range
    Dim rngCustomerObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim customerObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set customerSheet = ThisWorkbook.Sheets("Customers")


' Set array ranges
Set rngSelection = customerSheet.Range("B4:B10")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngCustomerObj = dbSheet.Range("D1:D10000")


' Populate arrays
dbArr = rngDB.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value
customerObjArr = rngCustomerObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i



If selectionArr(1, 1) = "" Then
    MsgBox "Customer name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Customer name"
    GoTo endXLupdate
    Else
End If

If selectionArr(2, 1) = "" Then
    MsgBox "IKEA Supplier Number cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty IKEA Supplier name"
    GoTo endXLupdate
    Else
End If

'DRAFT2
' Check if Customer number already exist
'i = 1
'For i = LBound(dbArr) To UBound(dbArr)
'If dbArr(i, 1) = Customers Then
'        If dbArr(i, 5) = selectionArr(2, 1) Then
'            MsgBox "Customer number already in use" & vbNewLine _
'            & "Must be fixed before saving ", vbOKOnly + vbCritical, "Used Customer Number"
'        GoTo endXLupdate
'        Else
'        End If
'Else
'End If
'Next i
'END DRAFT2

If selectionArr(4, 1) = "" Then
    MsgBox "Commission PM cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Commission PM"
    GoTo endXLupdate
    Else
End If

If selectionArr(5, 1) = "" Then
    MsgBox "Commission PP Foot cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Commission PP Foot"
    GoTo endXLupdate
    Else
End If

If selectionArr(6, 1) = "" Then
    MsgBox "Commission PP Sheet cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Commission PP Sheet"
    GoTo endXLupdate
    Else
End If

If selectionArr(7, 1) = "" Then
    MsgBox "Commission PP Readymade cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Commission PP Readymade"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(2, 1)) Then
    MsgBox "There is non numeric data for IKEA Supplier number" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "IKEA Supplier Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(4, 1)) Then
    MsgBox "There is non numeric data for Commision PM" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PM Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(5, 1)) Then
    MsgBox "There is non numeric data for Commision PP Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PP Foot Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(6, 1)) Then
    MsgBox "There is non numeric data for Commision PP Sheets" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PP Sheets Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(selectionArr(7, 1)) Then
    MsgBox "There is non numeric data for Commision PP Readymade" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PP Readymade Number Error"
    GoTo endXLupdate
    Else
End If


i = 1
For i = LBound(dbArr) To firstemptyrow
            If i = firstemptyrow Then
                'Save to new customer
                dbArr(firstemptyrow, 1) = Customers
                dbArr(firstemptyrow, 2) = 1
                dbArr(firstemptyrow, 3) = "Customers"
                dbArr(firstemptyrow, 4) = selectionArr(1, 1)
                dbArr(firstemptyrow, 5) = selectionArr(2, 1)
                dbArr(firstemptyrow, 6) = selectionArr(3, 1)
                dbArr(firstemptyrow, 7) = selectionArr(4, 1)
                dbArr(firstemptyrow, 8) = selectionArr(5, 1)
                dbArr(firstemptyrow, 9) = selectionArr(6, 1)
                dbArr(firstemptyrow, 10) = selectionArr(7, 1)
                Exit For
            Else
            End If
            
            If dbArr(i, 1) = Customers Then
                If dbArr(i, 4) = selectionArr(1, 1) Then
                ' Save to existing customer
                dbArr(i, 4) = selectionArr(1, 1)
                dbArr(i, 5) = selectionArr(2, 1)
                dbArr(i, 6) = selectionArr(3, 1)
                dbArr(i, 7) = selectionArr(4, 1)
                dbArr(i, 8) = selectionArr(5, 1)
                dbArr(i, 9) = selectionArr(6, 1)
                dbArr(i, 10) = selectionArr(7, 1)
                Exit For
                Else
                End If
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Customers_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub


Sub Customers_UpdateAll()
Dim dbSheet As Worksheet
    Dim customer As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim textline As String
    Dim comm_PM As Variant
    Dim comm_PP_Foot As Variant
    Dim comm_PP_Sheet As Variant
    Dim comm_PP_RM As Variant
    
    Dim rngDB As Range
    Dim rngSelection As Range

    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim dbObjectArr() As Variant
    Dim customerObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set customerSheet = ThisWorkbook.Sheets("Customers")


' Set array ranges
Set rngSelection = customerSheet.Range("G5:G8")
Set rngDB = dbSheet.Range("A1:BZ10000")

' Populate arrays
dbArr = rngDB.value
selectionArr = rngSelection.value


'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


If Not IsNumeric(customerSheet.Cells(5, "G")) Then
    MsgBox "There is non numeric data for Commision PM" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PM Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(customerSheet.Cells(6, "G")) Then
    MsgBox "There is non numeric data for Commision PP Foot" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PP Foot Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(customerSheet.Cells(7, "G")) Then
    MsgBox "There is non numeric data for Commision PP Sheets" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PP Sheets Number Error"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(customerSheet.Cells(8, "G")) Then
    MsgBox "There is non numeric data for Commision PP Readymade" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Commission PP Readymade Number Error"
    GoTo endXLupdate
    Else
End If

comm_PM = customerSheet.Cells(5, "G")
comm_PP_Foot = customerSheet.Cells(6, "G")
comm_PP_Sheet = customerSheet.Cells(7, "G")
comm_PP_RM = customerSheet.Cells(8, "G")

i = 1
For i = LBound(dbArr) To firstemptyrow
            If dbArr(i, 1) = Customers Then
                If Not comm_PM = "" Then dbArr(i, 7) = comm_PM
                If Not comm_PP_Foot = "" Then dbArr(i, 8) = comm_PP_Foot
                If Not comm_PP_Sheet = "" Then dbArr(i, 9) = comm_PP_Sheet
                If Not comm_PP_RM = "" Then dbArr(i, 10) = comm_PP_RM
            Else
            End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB
Customers_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub



Sub Customers_Clear()
    Dim dbSheet As Worksheet
    Dim customer As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set customerSheet = ThisWorkbook.Sheets("Customers")

' Set array ranges
Set rngSelection = customerSheet.Range("B4:B10")


' Populate arrays
selectionArr = rngSelection.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Customers_LoadSelection()
    Dim dbSheet As Worksheet
    Dim customer As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim selectedRow As Long
    
    Dim rngSelection As Range
    Dim rngTable As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim selectionArr() As Variant
    Dim tableArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set customerSheet = ThisWorkbook.Sheets("Customers")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = customerSheet.Range("B4:B10")
Set rngTable = customerSheet.Range("A17:G300")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
'dbArr = rngDB.Value
selectionArr = rngSelection.value
tableArr = rngTable.value

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i

selectedRow = 17
selectedRow = Selection.row
If selectedRow < 17 Or selectedRow > 300 Then
    selectedRow = 17
    Else
End If

' Load Selection Table
i = 1
j = 1
For i = LBound(tableArr) To UBound(tableArr)
    If tableArr(i, 1) = customerSheet.Cells(selectedRow, 1) Then
        selectionArr(1, 1) = tableArr(i, 1)
        selectionArr(2, 1) = tableArr(i, 2)
        selectionArr(3, 1) = tableArr(i, 3)
        selectionArr(4, 1) = tableArr(i, 4)
        selectionArr(5, 1) = tableArr(i, 5)
        selectionArr(6, 1) = tableArr(i, 6)
        selectionArr(7, 1) = tableArr(i, 7)
        Exit For
    Else
    End If
Next i
rngSelection = selectionArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Customers_Load()
    Dim dbSheet As Worksheet
    Dim customer As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim rngDB As Range
    Dim rngCustomertable As Range
    Dim rngDBObj As Range
    Dim rngSelection As Range
    Dim rngSelection2 As Range
    
    Dim dbArr() As Variant
    Dim customersArr() As Variant
    Dim selectionArr() As Variant

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set customerSheet = ThisWorkbook.Sheets("Customers")


'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A16").Activate
customerSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngCustomertable = customerSheet.Range("A17:G300")
Set rngDBObj = dbSheet.Range("A1:A10000")
Set rngSelection = customerSheet.Range("B4:B10")
Set rngSelection2 = customerSheet.Range("G5:G8")

'Delete Imtestable
rngSelection2.ClearContents

' Populate arrays
dbArr = rngDB.value
customersArr = rngCustomertable.value
dbObjectArr = rngDBObj.value
selectionArr = rngSelection.value




' Empty Customers array
i = 1
j = 1
For i = LBound(customersArr) To UBound(customersArr)
        customersArr(i, 1) = ""
            For j = LBound(customersArr, 2) To UBound(customersArr, 2)
                customersArr(i, j) = ""
            Next j
Next i

' Empty Selection array
i = 1
j = 1
For i = LBound(selectionArr) To UBound(selectionArr)
        selectionArr(i, 1) = ""
            For j = LBound(selectionArr, 2) To UBound(selectionArr, 2)
                selectionArr(i, j) = ""
            Next j
Next i
rngSelection = selectionArr

' Load Customer Table
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Customers Then
        customersArr(j, 1) = dbArr(i, 4)
        customersArr(j, 2) = dbArr(i, 5)
        customersArr(j, 3) = dbArr(i, 6)
        customersArr(j, 4) = dbArr(i, 7)
        customersArr(j, 5) = dbArr(i, 8)
        customersArr(j, 6) = dbArr(i, 9)
        customersArr(j, 7) = dbArr(i, 10)
        j = j + 1
    Else
    End If
Next i
rngCustomertable = customersArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Info_Save()
    Dim dbSheet As Worksheet
    Dim infoSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    Dim firstemptyDBrow As Long
    
    Dim majorRev As Long
    Dim minorRev As Long
    Dim rngDB As Range
    Dim rngSupinfo As Range
    Dim rngIKEAinfo As Range
    Dim rngValidity As Range
    Dim rngOut As Range
    Dim rngDBObj As Range
    
    Dim dbArr() As Variant
    Dim supinfoArr() As Variant
    Dim ikeainfoArr() As Variant
    Dim validityArr() As Variant
    Dim dbObjectArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set infoSheet = ThisWorkbook.Sheets("Info")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSupinfo = infoSheet.Range("B4:B17")
Set rngIKEAinfo = infoSheet.Range("B19:B30")
Set rngValidity = infoSheet.Range("B33:B34")
Set rngDBObj = dbSheet.Range("A1:A10000")

' Populate arrays
dbArr = rngDB.value
supinfoArr = rngSupinfo.value
ikeainfoArr = rngIKEAinfo.value
validityArr = rngValidity.value
dbObjectArr = rngDBObj.value

'First empty DB Row
i = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

'Error Check
If supinfoArr(1, 1) = "" Then
    MsgBox "NPS Supplier name cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Name"
    GoTo endXLupdate
    Else
End If

If supinfoArr(2, 1) = "" Then
    MsgBox "NPS Supplier number cannot be empty" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty Supplier Number"
    GoTo endXLupdate
    Else
End If

If Not IsNumeric(supinfoArr(2, 1)) Then
    MsgBox "There is non numeric data for NPS Supplier number" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Number Error"
    GoTo endXLupdate
    Else
End If

' Save Supplier Info
i = 0
On Error Resume Next
i = Application.WorksheetFunction.Match(Supplier_Info, dbObjectArr, 0)
On Error GoTo 0
If i = 0 Then
    dbArr(firstemptyrow, 1) = Supplier_Info
    dbArr(firstemptyrow, 2) = 1
    dbArr(firstemptyrow, 3) = "Supplier_Info"
    dbArr(firstemptyrow, 4) = supinfoArr(1, 1)
    dbArr(firstemptyrow, 5) = supinfoArr(2, 1)
    dbArr(firstemptyrow, 6) = supinfoArr(3, 1)
    dbArr(firstemptyrow, 7) = supinfoArr(4, 1)
    dbArr(firstemptyrow, 8) = supinfoArr(5, 1)
    dbArr(firstemptyrow, 9) = supinfoArr(6, 1)
    dbArr(firstemptyrow, 10) = supinfoArr(7, 1)
    dbArr(firstemptyrow, 11) = supinfoArr(8, 1)
    dbArr(firstemptyrow, 12) = supinfoArr(9, 1)
    dbArr(firstemptyrow, 13) = supinfoArr(10, 1)
    dbArr(firstemptyrow, 14) = supinfoArr(11, 1)
    dbArr(firstemptyrow, 15) = supinfoArr(12, 1)
    dbArr(firstemptyrow, 16) = supinfoArr(13, 1)
    dbArr(firstemptyrow, 17) = supinfoArr(14, 1)
    firstemptyrow = firstemptyrow + 1
Else
    dbArr(i, 4) = supinfoArr(1, 1)
    dbArr(i, 5) = supinfoArr(2, 1)
    dbArr(i, 6) = supinfoArr(3, 1)
    dbArr(i, 7) = supinfoArr(4, 1)
    dbArr(i, 8) = supinfoArr(5, 1)
    dbArr(i, 9) = supinfoArr(6, 1)
    dbArr(i, 10) = supinfoArr(7, 1)
    dbArr(i, 11) = supinfoArr(8, 1)
    dbArr(i, 12) = supinfoArr(9, 1)
    dbArr(i, 13) = supinfoArr(10, 1)
    dbArr(i, 14) = supinfoArr(11, 1)
    dbArr(i, 15) = supinfoArr(12, 1)
    dbArr(i, 16) = supinfoArr(13, 1)
    dbArr(i, 17) = supinfoArr(14, 1)
End If

' Save IKEA Info
i = 0
On Error Resume Next
i = Application.WorksheetFunction.Match(IKEA_Info, dbObjectArr, 0)
On Error GoTo 0
If i = 0 Then
    dbArr(firstemptyrow, 1) = IKEA_Info
    dbArr(firstemptyrow, 2) = 1
    dbArr(firstemptyrow, 3) = "IKEA_Info"
    dbArr(firstemptyrow, 4) = ikeainfoArr(1, 1)
    dbArr(firstemptyrow, 5) = ikeainfoArr(2, 1)
    dbArr(firstemptyrow, 6) = ikeainfoArr(3, 1)
    dbArr(firstemptyrow, 7) = ikeainfoArr(4, 1)
    dbArr(firstemptyrow, 8) = ikeainfoArr(5, 1)
    dbArr(firstemptyrow, 9) = ikeainfoArr(6, 1)
    dbArr(firstemptyrow, 10) = ikeainfoArr(7, 1)
    dbArr(firstemptyrow, 11) = ikeainfoArr(8, 1)
    dbArr(firstemptyrow, 12) = ikeainfoArr(9, 1)
    dbArr(firstemptyrow, 13) = ikeainfoArr(10, 1)
    dbArr(firstemptyrow, 14) = ikeainfoArr(11, 1)
    dbArr(firstemptyrow, 15) = ikeainfoArr(12, 1)
    firstemptyrow = firstemptyrow + 1
Else
    dbArr(i, 4) = ikeainfoArr(1, 1)
    dbArr(i, 5) = ikeainfoArr(2, 1)
    dbArr(i, 6) = ikeainfoArr(3, 1)
    dbArr(i, 7) = ikeainfoArr(4, 1)
    dbArr(i, 8) = ikeainfoArr(5, 1)
    dbArr(i, 9) = ikeainfoArr(6, 1)
    dbArr(i, 10) = ikeainfoArr(7, 1)
    dbArr(i, 11) = ikeainfoArr(8, 1)
    dbArr(i, 12) = ikeainfoArr(9, 1)
    dbArr(i, 13) = ikeainfoArr(10, 1)
    dbArr(i, 14) = ikeainfoArr(11, 1)
    dbArr(i, 15) = ikeainfoArr(12, 1)
End If

' Save Validity Info
i = 0
On Error Resume Next
i = Application.WorksheetFunction.Match(Validity, dbObjectArr, 0)
On Error GoTo 0
If i = 0 Then
    dbArr(firstemptyrow, 1) = Validity
    dbArr(firstemptyrow, 2) = 1
    dbArr(firstemptyrow, 3) = "Validity"
    dbArr(firstemptyrow, 4) = CLng(validityArr(1, 1))
    dbArr(firstemptyrow, 5) = CLng(validityArr(2, 1))
    firstemptyrow = firstemptyrow + 1
Else
    dbArr(i, 4) = CLng(validityArr(1, 1))
    dbArr(i, 5) = CLng(validityArr(2, 1))
End If

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB



endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub
Sub Info_Load()
    Dim dbSheet As Worksheet
    Dim infoSheet As Worksheet
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46

    
    Dim i As Long
    Dim j As Long
    
    Dim majorRev As Long
    Dim minorRev As Long
    Dim rngDB As Range
    Dim rngSupinfo As Range
    Dim rngIKEAinfo As Range
    Dim rngValidity As Range
    Dim rngOut As Range
    
    Dim dbArr() As Variant
    Dim supinfoArr() As Variant
    Dim ikeainfoArr() As Variant
    Dim validityArr() As Variant


' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set infoSheet = ThisWorkbook.Sheets("Info")


' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSupinfo = infoSheet.Range("B4:B17")
Set rngIKEAinfo = infoSheet.Range("B19:B30")
Set rngValidity = infoSheet.Range("B33:B34")


' Populate arrays
dbArr = rngDB.value
supinfoArr = rngSupinfo.value
ikeainfoArr = rngIKEAinfo.value
validityArr = rngValidity.value


' Empty Supplier Info array
i = 1
j = 1
For i = LBound(supinfoArr) To UBound(supinfoArr)
        supinfoArr(i, 1) = ""
            For j = LBound(supinfoArr, 2) To UBound(supinfoArr, 2)
                supinfoArr(i, j) = ""
            Next j
Next i
rngSupinfo = supinfoArr

' Empty IKEA Info array
i = 1
j = 1
For i = LBound(ikeainfoArr) To UBound(ikeainfoArr)
        ikeainfoArr(i, 1) = ""
            For j = LBound(ikeainfoArr, 2) To UBound(ikeainfoArr, 2)
                ikeainfoArr(i, j) = ""
            Next j
Next i
rngIKEAinfo = ikeainfoArr

' Empty Validity array
i = 1
j = 1
For i = LBound(validityArr) To UBound(validityArr)
        validityArr(i, 1) = ""
            For j = LBound(validityArr, 2) To UBound(validityArr, 2)
                validityArr(i, j) = ""
            Next j
Next i
rngValidity = validityArr


'Populate Revisions
'On Error Resume Next
'infoSheet.Cells(2, "E") = Application.WorksheetFunction.VLookup(7, dbArr, 4, False)
'infoSheet.Cells(2, "G") = Application.WorksheetFunction.VLookup(7, dbArr, 5, False)
'infoSheet.Cells(2, "H") = Application.WorksheetFunction.VLookup(7, dbArr, 6, False)
'On Error GoTo 0

' Load Supplier Info
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Supplier_Info Then
        supinfoArr(1, 1) = dbArr(i, 4)
        supinfoArr(2, 1) = dbArr(i, 5)
        supinfoArr(3, 1) = dbArr(i, 6)
        supinfoArr(4, 1) = dbArr(i, 7)
        supinfoArr(5, 1) = dbArr(i, 8)
        supinfoArr(6, 1) = dbArr(i, 9)
        supinfoArr(7, 1) = dbArr(i, 10)
        supinfoArr(8, 1) = dbArr(i, 11)
        supinfoArr(9, 1) = dbArr(i, 12)
        supinfoArr(10, 1) = dbArr(i, 13)
        supinfoArr(11, 1) = dbArr(i, 14)
        supinfoArr(12, 1) = dbArr(i, 15)
        supinfoArr(13, 1) = dbArr(i, 16)
        supinfoArr(14, 1) = dbArr(i, 17)
        Exit For
    Else
    End If
Next i
rngSupinfo = supinfoArr

' Load IKEA Info
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = IKEA_Info Then
        ikeainfoArr(1, 1) = dbArr(i, 4)
        ikeainfoArr(2, 1) = dbArr(i, 5)
        ikeainfoArr(3, 1) = dbArr(i, 6)
        ikeainfoArr(4, 1) = dbArr(i, 7)
        ikeainfoArr(5, 1) = dbArr(i, 8)
        ikeainfoArr(6, 1) = dbArr(i, 9)
        ikeainfoArr(7, 1) = dbArr(i, 10)
        ikeainfoArr(8, 1) = dbArr(i, 11)
        ikeainfoArr(9, 1) = dbArr(i, 12)
        ikeainfoArr(10, 1) = dbArr(i, 13)
        ikeainfoArr(11, 1) = dbArr(i, 14)
        ikeainfoArr(12, 1) = dbArr(i, 15)
        Exit For
    Else
    End If
Next i
rngIKEAinfo = ikeainfoArr

' Load Validity Info
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Validity Then
        validityArr(1, 1) = dbArr(i, 4)
        validityArr(2, 1) = dbArr(i, 5)
        Exit For
    Else
    End If
Next i
rngValidity = validityArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Import_Items_Load()

    Dim dbSheet As Worksheet
    Dim importitemsSheet As Worksheet
    Dim rngItemstable As Range
    
    Const temp_import_item As Long = 73
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim deleteEntry As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Import Items")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A2").Activate
importitemsSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:K6000")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")

'Delete Imtestable
rngImportitemstable.ClearContents


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i

'First empty DB Row
i = 1
firstemptyrow = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

'Delete temporary items
i = 1
k = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = temp_import_item Then
    Else
        j = 1
        For j = 1 To 78
            dbArrOut(k, j) = dbArr(i, j)
        Next j
        k = k + 1
    End If
Next i

rngDB = dbArrOut


' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic


End Sub

Sub Import_Items_LoadCBD()
    Dim dbSheet As Worksheet
    Dim impDBsheet As Worksheet
    Dim importItemsheet As Worksheet
    Dim impInfosheet As Worksheet
    
    Dim openPricefile As Long
    Dim importfile As Variant
    Dim importwb As Workbook
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51
    Const temp_import_item As Long = 73

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim m As Long
    Dim firstemptyDBrow As Long
    Dim firstemptyrow As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim number As Long
    Dim err As Long
    Dim name As String
    Dim textline As String
    Dim row As Long

    Dim rngDB As Range
    Dim rngImpDB As Range
    Dim rngImpItem As Range
    Dim rngImpInfo As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impDBArr() As Variant
    Dim impItemArr() As Variant
    Dim impInfoArr() As Variant
    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

' Set Sheet Names
Set importitemsSheet = ThisWorkbook.Sheets("Import Items")
Set rngImportitemstable = importitemsSheet.Range("A3:K6000")
rngImportitemstable.ClearContents
impItemArr = rngImportitemstable.value

' Open pricefile
openPricefile = 0
importfile = Application.GetOpenFilename(FileFilter:="Excel Files (*.XL*), *.XL*", Title:="Select CBD File")

If importfile = False Then
GoTo endXLupdate
Else
End If

Set importwb = Workbooks.Open(importfile)
openPricefile = 1

'Is it v4?
Set impInfosheet = importwb.Sheets("Info")
Set rngImpInfo = impInfosheet.Range("A1:J400")
impInfoArr = rngImpInfo.value

If impInfoArr(2, 5) = 4 Then
Else
    If openPricefile Then
        importwb.Close savechanges:=False
    End If

    MsgBox "This file will only import items from CBD version 4" & vbNewLine _
    , vbOKOnly + vbCritical, "Import Error"
    GoTo endXLupdate
End If


' Set Output Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set rngDB = dbSheet.Range("A1:BZ10000")
dbArr = rngDB.value


Set impDBsheet = importwb.Sheets("DB")
Set rngImpDB = impDBsheet.Range("A1:BZ10000")
impDBArr = rngImpDB

' Close input file
If openPricefile Then
    importwb.Close savechanges:=False
End If

'Is it same NPS?
i = 1
k = 1
number = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 1 Then
        number = dbArr(i, 5)
        Exit For
    Else
    End If
Next i

i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = 1 Then
        If impDBArr(i, 5) = number Then
        Else
            MsgBox "Not same NPS. Cancel import." & vbNewLine _
            , vbOKOnly + vbCritical, "Import Error"
            GoTo endXLupdate
        End If
    Else
    End If
Next i


'First empty DB Row
i = 1
firstemptyDBrow = 0
firstemptyrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

i = 1
For i = LBound(impDBArr) To UBound(impDBArr)
    If impDBArr(i, 1) = Item Then
        ' Test UID uniqueness
        err = 0
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Item Then
                If dbArr(k, 4) = impDBArr(i, 4) Then GoTo endTestSeq
            Else
            End If
        Next k

        ' Test Customer Name
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Customers Then
                If impDBArr(i, 15) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If err = 1 Then GoTo endTestSeq
        
        '
        'Test Board Selection
        '
        
        'Test BS if CB
        number = 0
        err = 1
        If Left(impDBArr(i, 55), 1) = 1 Then
            k = 1
            For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = CB_Composition Then
                If Right(impDBArr(i, 55), Len(impDBArr(i, 55)) - 2) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 55) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        Else
        End If
        
        'Test BS if Purchased Sheet
        number = 0
        err = 1
        If Left(impDBArr(i, 55), 1) = 2 Then
            k = 1
            For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Purchased_Sheets Then
                If Right(impDBArr(i, 55), Len(impDBArr(i, 55)) - 2) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 55) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        Else
        End If
        
        'Test BS if Other Board
        number = 0
        err = 1
        If Left(impDBArr(i, 55), 1) = 3 Then
            k = 1
            For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Other_Boards Then
                If Right(impDBArr(i, 55), Len(impDBArr(i, 55)) - 2) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 55) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        Else
        End If
        
        'Test BS if Joined Board
        number = 0
        err = 1
        If Left(impDBArr(i, 55), 1) = 3 Then
            k = 1
            For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Joined_Boards Then
                If Right(impDBArr(i, 55), Len(impDBArr(i, 55)) - 2) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 55) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        Else
        End If
        
        'Test 1st Conv process
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Converters_A Then
                If impDBArr(i, 29) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 29) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq

        'Test 2nd Conv process
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Converters_A Then
                If impDBArr(i, 31) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 31) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
    
        'Test 3rd Conv process
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Converters_A Then
                If impDBArr(i, 33) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 33) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Test 4th Conv process
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Converters_A Then
                If impDBArr(i, 35) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 35) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Test 5th Pkg process
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Converters_A Then
                If impDBArr(i, 37) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 37) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Test Packaging process
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Packaging_Cost Then
                If impDBArr(i, 39) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 39) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Test Transport option
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Transport_cost Then
                If impDBArr(i, 51) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 51) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Test Tool type
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Tool_cost Then
                If impDBArr(i, 52) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 52) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Test Pallet type
        err = 1
        k = 1
        For k = LBound(dbArr) To UBound(dbArr)
            If dbArr(k, 1) = Pallet_cost Then
                If impDBArr(i, 50) = dbArr(k, 4) Then
                    err = 0
                    Exit For
                Else
                    err = 1
                End If
            Else
            End If
        Next k
        If impDBArr(i, 50) = "" Then err = 0
        If err = 1 Then GoTo endTestSeq
        
        'Save item if no error into DB
        l = 1
        m = 1
        For l = 1 To 78
            dbArr(firstemptyrow, l) = impDBArr(i, l)
            If l = 1 Then dbArr(firstemptyrow, 1) = temp_import_item
        Next l
        firstemptyrow = firstemptyrow + 1
        
endTestSeq:
    Else
    End If
Next i

'Write the database to sheet
rngDB = dbArr

' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

'Load temp items to sheet
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
If dbArr(i, 1) = temp_import_item Then
        impItemArr(j, 1) = dbArr(i, 4)
        impItemArr(j, 2) = dbArr(i, 7)
        impItemArr(j, 3) = dbArr(i, 6)
        impItemArr(j, 4) = dbArr(i, 8)
        impItemArr(j, 5) = dbArr(i, 15)
        impItemArr(j, 6) = dbArr(i, 16)
        impItemArr(j, 7) = dbArr(i, 17)
        impItemArr(j, 8) = dbArr(i, 27)
        If dbArr(i, 55) = "" Then
        impItemArr(j, 8) = ""
        Else
        impItemArr(j, 8) = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) 'Board Secltion
        End If
        impItemArr(j, 9) = dbArr(i, 28)
        impItemArr(j, 10) = dbArr(i, 25)
        impItemArr(j, 11) = dbArr(i, 26)
        j = j + 1
Else
End If
Next i


rngImportitemstable = impItemArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub


Sub Import_Items_Selection()
    Dim dbSheet As Worksheet
    Dim importitemsSheet As Worksheet
    Dim rngItemstable As Range
    
    Const temp_import_item As Long = 73
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impItemArr() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim selectedRow As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long
    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Import Items")

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:K6000")
Set rngDB = dbSheet.Range("A1:BZ10000")

' Populate arrays
dbArr = rngDB.value

'First empty DB Row
i = 1
firstemptyrow = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

selectedRow = 3
selectedRow = Selection.row
If selectedRow < 3 Or selectedRow > 6000 Then
    selectedRow = 3
    Else
End If


' Save selected item
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = temp_import_item And importitemsSheet.Cells(selectedRow, 1) = dbArr(i, 4) Then
        'Are you sure?
        If MsgBox("This will import:" & vbNewLine & vbNewLine & dbArr(i, 4), vbYesNo, "Import Item") = vbNo Then GoTo endXLupdate
        dbArr(i, 1) = 30
    Else
    End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

'Load temp items to sheet
' Set Sheet Names
rngImportitemstable.ClearContents
impItemArr = rngImportitemstable.value


j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
If dbArr(i, 1) = temp_import_item Then
        impItemArr(j, 1) = dbArr(i, 4)
        impItemArr(j, 2) = dbArr(i, 7)
        impItemArr(j, 3) = dbArr(i, 6)
        impItemArr(j, 4) = dbArr(i, 8)
        impItemArr(j, 5) = dbArr(i, 15)
        impItemArr(j, 6) = dbArr(i, 16)
        impItemArr(j, 7) = dbArr(i, 17)
        impItemArr(j, 8) = dbArr(i, 27)
        If dbArr(i, 55) = "" Then
        impItemArr(j, 8) = ""
        Else
        impItemArr(j, 8) = Right(dbArr(i, 55), Len(dbArr(i, 55)) - 2) 'Board Secltion
        End If
        impItemArr(j, 9) = dbArr(i, 28)
        impItemArr(j, 10) = dbArr(i, 25)
        impItemArr(j, 11) = dbArr(i, 26)
        j = j + 1
Else
End If
Next i

rngImportitemstable = impItemArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub


Sub Import_Items_All()
    Dim dbSheet As Worksheet
    Dim importitemsSheet As Worksheet
    Dim rngItemstable As Range
    
    Const temp_import_item As Long = 73
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impItemArr() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim selectedRow As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long
    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Import Items")

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:K6000")
Set rngDB = dbSheet.Range("A1:BZ10000")

' Populate arrays
dbArr = rngDB.value
impItemArr = rngImportitemstable.value

'First empty DB Row
i = 1
firstemptyrow = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


' Save selected items
If MsgBox("This will import all items" & vbNewLine & vbNewLine & dbArr(i, 4), vbYesNo, "Import All Items") = vbNo Then GoTo endXLupdate
        

i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = temp_import_item Then
        dbArr(i, 1) = 30
    Else
    End If
Next i


rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

'Clear temp items to sheet
rngImportitemstable.ClearContents

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub

Sub Import_Items_Filtered()
    Dim dbSheet As Worksheet
    Dim importitemsSheet As Worksheet
    Dim rngItemstable As Range
    
    Const temp_import_item As Long = 73
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impItemArr() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim selectedRow As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long
    Dim cell As Range
    Dim uid As Variant
    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Import Items")

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:K6000")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = importitemsSheet.Range("A3:A6000").SpecialCells(xlCellTypeVisible)

' Populate arrays
dbArr = rngDB.value
impItemArr = rngImportitemstable.value


' Save selected items
If MsgBox("This will import all filtered items" & vbNewLine & vbNewLine, vbYesNo, "Import All Filtered Items") = vbNo Then GoTo endXLupdate
 
For Each cell In rngSelection
uid = cell.value

'Copy all rows except the deleted one
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = temp_import_item And dbArr(i, 4) = uid Then
            dbArr(i, 1) = 30
            Exit For
            Else
            End If
Next i
Next cell

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

'Clear temp items to sheet
rngImportitemstable.ClearContents

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub


Sub Create_Items_Load()
    
    Dim dbSheet As Worksheet
    Dim importitemsSheet As Worksheet
    Dim rngItemstable As Range
    
    Const temp_import_item As Long = 74
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngSelection As Range
    
    Dim dbArr() As Variant
    Dim dbArrOut() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim deleteEntry As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Create Items")

'Empty Filter selection
On Error Resume Next
ActiveCell.Range("A2").Activate
importitemsSheet.ShowAllData
On Error GoTo 0

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:BG5000")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngDBout = dbSheet.Range("A1:BZ10000")

'Delete Imtestable
rngImportitemstable.ClearContents


' Populate arrays
dbArr = rngDB.value
dbArrOut = rngDBout.value

' Empty DB Out Array
i = 1
j = 1
For i = LBound(dbArrOut) To UBound(dbArrOut)
        dbArrOut(i, 1) = ""
            For j = LBound(dbArrOut, 2) To UBound(dbArrOut, 2)
                dbArrOut(i, j) = ""
            Next j
Next i

'First empty DB Row
i = 1
firstemptyrow = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

'Delete temporary items
i = 1
k = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = temp_import_item Then
    Else
        j = 1
        For j = 1 To 78
            dbArrOut(k, j) = dbArr(i, j)
        Next j
        k = k + 1
    End If
Next i

rngDB = dbArrOut


' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub

Sub Create_Items_LoadTable()

    Create_Items_Load

    Dim dbSheet As Worksheet
    Dim impDBsheet As Worksheet
    Dim importItemsheet As Worksheet
    Dim impInfosheet As Worksheet
    
    Dim openPricefile As Long
    Dim importfile As Variant
    Dim importwb As Workbook
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51
    Const temp_import_item As Long = 74

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim m As Long
    Dim firstemptyDBrow As Long
    Dim firstemptyrow As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim version As String
    Dim number As Long
    Dim err As Long
    Dim name As String
    Dim textline As String
    Dim row As Long
    Dim exists As Boolean
    

    Dim rngDB As Range
    Dim rngImpDB As Range
    Dim rngImpItem As Range
    Dim rngImpInfo As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impDBArr() As Variant
    Dim impItemArr() As Variant
    Dim impInfoArr() As Variant
    
    Dim transportArr(500, 1) As Variant
    Dim palletArr(500, 1) As Variant
    Dim toolArr(500, 1) As Variant
    Dim packagingArr(500, 1) As Variant
    Dim conversionArr(500, 1) As Variant
    Dim compositionArr(500, 1) As Variant
    Dim boardArr(500, 1) As Variant
    Dim supplierArr(500, 1) As Variant
    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

' Set Sheet Names
Set importitemsSheet = ThisWorkbook.Sheets("Create Items")
Set rngImportitemstable = importitemsSheet.Range("A3:BZ6000")
rngImportitemstable.ClearContents
impItemArr = rngImportitemstable.value

' Open Import file
openPricefile = 0
importfile = Application.GetOpenFilename(FileFilter:="Excel Files (*.XL*), *.XL*", Title:="Select Importtable File")

If importfile = False Then
GoTo endXLupdate
Else
End If

Set importwb = Workbooks.Open(importfile)
openPricefile = 1

'Workaround to avoid error if sheet name Table doesnt exist
i = 1
For i = 1 To importwb.Worksheets.count
    If importwb.Worksheets(i).name = "Table" Then
        exists = True
    End If
Next i

If Not exists Then
    importwb.Worksheets.Add.name = "Table"
End If

'Is it v4?
Set impInfosheet = importwb.Sheets("Table")
Set rngImpInfo = impInfosheet.Range("A1:BF5000")
impInfoArr = rngImpInfo.value

If impInfoArr(1, 1) = "CBDv4_ImportTemplate" Then
Else
    If openPricefile Then
        importwb.Close savechanges:=False
    End If

    MsgBox "This function will only create items from tables coming from the specific Import Template for CBD version 4" & vbNewLine _
    , vbOKOnly + vbCritical, "Import Error"
    GoTo endXLupdate
End If





' Set Output Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set rngDB = dbSheet.Range("A1:BZ10000")
dbArr = rngDB.value


Set impDBsheet = importwb.Sheets("Table")
Set rngImpDB = impDBsheet.Range("A3:BZ5000")
impDBArr = rngImpDB

' Close input file
If openPricefile Then
    importwb.Close savechanges:=False
End If

'Populate Arrays

'Transport Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Transport_cost Then
        transportArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Pallet Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Pallet_cost Then
        palletArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i


'Tool Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Tool_cost Then
        toolArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Packaging Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Packaging_Cost Then
        packagingArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Conversion Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Converters_A Then
        conversionArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Composition Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = CB_Composition Then
        compositionArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'BoardArr
j = 1
i = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = CB_Composition Then
        boardArr(j, 1) = "1-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Purchased_Sheets Then
        boardArr(j, 1) = "2-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Other_Boards Then
        boardArr(j, 1) = "3-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Joined_Boards Then
        boardArr(j, 1) = "4-" & dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i

'Supplier Arr
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = Customers Then
        supplierArr(j, 1) = dbArr(i, 4)
        j = j + 1
    Else
    End If
Next i



'Version Style A-D?
i = 1
version = ""
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = 7 Then
        version = dbArr(i, 6)
        Exit For
    Else
    End If
Next i

'First empty DB Row
i = 1
firstemptyDBrow = 0
firstemptyrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

i = 1
j = 1
For i = LBound(impDBArr) To UBound(impDBArr)
        'Save item if no error into DB
        l = 1
        m = 0
        ' Test if whole row is empty then end the loop
        For l = 1 To 78
            If impDBArr(i, l) = "" Then
            Else
                Exit For
            End If
        Next l

        If l = 79 Then GoTo endTestSeq
        ' End Test
        
        'Write item to DB file
            dbArr(firstemptyrow, 1) = 74
            dbArr(firstemptyrow, 2) = 1
            dbArr(firstemptyrow, 3) = "Temp_Create_Item"
            dbArr(firstemptyrow, 4) = i 'UID
            dbArr(firstemptyrow, 5) = CLng(Date) 'Creation Date
            dbArr(firstemptyrow, 6) = CLng(Date) 'Change Date
            dbArr(firstemptyrow, 7) = impDBArr(i, 1) 'IKEA C Art No
            dbArr(firstemptyrow, 8) = impDBArr(i, 2) 'Article Name
            dbArr(firstemptyrow, 9) = impDBArr(i, 3) 'Length (LxWxH)
            dbArr(firstemptyrow, 10) = "" 'Width
            dbArr(firstemptyrow, 11) = "" 'Height
            dbArr(firstemptyrow, 12) = impDBArr(i, 4) 'Article Group Name
            dbArr(firstemptyrow, 13) = "" 'Article Group Number - Not really needed. New articles saved are without
            dbArr(firstemptyrow, 14) = impDBArr(i, 5) 'IKEA Product Article Number
            dbArr(firstemptyrow, 15) = impDBArr(i, 6) 'IKEA Supplier Name
            dbArr(firstemptyrow, 16) = impDBArr(i, 7) 'IKEA Supplier Reference
            dbArr(firstemptyrow, 17) = impDBArr(i, 8) 'NPS Reference
            dbArr(firstemptyrow, 18) = impDBArr(i, 9) 'Description
            dbArr(firstemptyrow, 19) = impDBArr(i, 29) 'No of 180x90x50 Foot
            dbArr(firstemptyrow, 20) = impDBArr(i, 30) 'No of 140x90x50 Foot
            dbArr(firstemptyrow, 21) = impDBArr(i, 31) 'No of 90x90x50 Foot
            dbArr(firstemptyrow, 22) = impDBArr(i, 15) 'Inside Color (Inside/Outside)
            dbArr(firstemptyrow, 23) = "" 'Outside Color
            dbArr(firstemptyrow, 24) = impDBArr(i, 16) 'Printing
            dbArr(firstemptyrow, 25) = impDBArr(i, 10) 'Forecasted Yearly Quantity
            dbArr(firstemptyrow, 26) = impDBArr(i, 11) 'Average Order Quantity
            dbArr(firstemptyrow, 27) = impDBArr(i, 12) 'Composition
            dbArr(firstemptyrow, 28) = impDBArr(i, 14) 'Construction
            dbArr(firstemptyrow, 29) = impDBArr(i, 17) '1st Conversion Process
            dbArr(firstemptyrow, 30) = impDBArr(i, 18) '1st Outs
            dbArr(firstemptyrow, 31) = impDBArr(i, 19) '2nd Conversion Process
            dbArr(firstemptyrow, 32) = impDBArr(i, 20) '2nd Outs
            dbArr(firstemptyrow, 33) = impDBArr(i, 21) '3rd Conversion Process
            dbArr(firstemptyrow, 34) = impDBArr(i, 22) '3rd Outs
            dbArr(firstemptyrow, 35) = impDBArr(i, 23) '4th Conversion Process
            dbArr(firstemptyrow, 36) = impDBArr(i, 24) '4th Outs
            dbArr(firstemptyrow, 37) = "" '5th Conversion Process
            dbArr(firstemptyrow, 38) = "" '5th Outs
            dbArr(firstemptyrow, 39) = impDBArr(i, 25) 'Packaging Type
            dbArr(firstemptyrow, 40) = impDBArr(i, 40) 'Article Net Size
            dbArr(firstemptyrow, 41) = "" 'Theoretical weight
            dbArr(firstemptyrow, 42) = impDBArr(i, 41) 'Article weight
            dbArr(firstemptyrow, 43) = impDBArr(i, 26) 'Paper Waste
            dbArr(firstemptyrow, 44) = impDBArr(i, 27) 'Starch Waste
            dbArr(firstemptyrow, 45) = impDBArr(i, 28) 'Conversion Waste
            dbArr(firstemptyrow, 46) = impDBArr(i, 60) 'Extra Cost
            dbArr(firstemptyrow, 47) = impDBArr(i, 61) 'Extra Cost info
            dbArr(firstemptyrow, 48) = impDBArr(i, 35) 'Pallet in FCA
            dbArr(firstemptyrow, 49) = impDBArr(i, 37) 'Pallet Quantity
            dbArr(firstemptyrow, 50) = impDBArr(i, 36) 'Pallet Type
            dbArr(firstemptyrow, 51) = impDBArr(i, 38) 'Transport Option
            dbArr(firstemptyrow, 52) = impDBArr(i, 39) 'Tool type
            dbArr(firstemptyrow, 53) = impDBArr(i, 62) 'Tool cost
            dbArr(firstemptyrow, 54) = "" 'Board Type
            dbArr(firstemptyrow, 55) = impDBArr(i, 13) 'Board Selection
            dbArr(firstemptyrow, 56) = impDBArr(i, 6) 'IKEA Supplier Number
            dbArr(firstemptyrow, 57) = impDBArr(i, 42) 'C_Unused
            dbArr(firstemptyrow, 58) = impDBArr(i, 43) 'C_Blank Length
            dbArr(firstemptyrow, 59) = impDBArr(i, 44) 'C_Blank Width
            dbArr(firstemptyrow, 60) = impDBArr(i, 45) 'C_Printing
            dbArr(firstemptyrow, 61) = impDBArr(i, 46) 'C_Slotting
            dbArr(firstemptyrow, 62) = impDBArr(i, 47) 'C_Diecut
            dbArr(firstemptyrow, 63) = impDBArr(i, 48) 'C_Glue
            dbArr(firstemptyrow, 64) = impDBArr(i, 49) 'C_Waste Removal
            dbArr(firstemptyrow, 65) = impDBArr(i, 50) 'C_Packing
            dbArr(firstemptyrow, 66) = impDBArr(i, 51) 'C_Special shape
            dbArr(firstemptyrow, 67) = impDBArr(i, 52) 'C_Order less than MOQ
            dbArr(firstemptyrow, 68) = impDBArr(i, 53) 'C_Optional 1
            dbArr(firstemptyrow, 69) = impDBArr(i, 54) 'C_Optional 2
            dbArr(firstemptyrow, 70) = impDBArr(i, 55) 'C_Optional 3
            dbArr(firstemptyrow, 71) = impDBArr(i, 56) 'C_Management cost
            dbArr(firstemptyrow, 72) = impDBArr(i, 57) 'C_Profit
            dbArr(firstemptyrow, 73) = impDBArr(i, 58) 'C_Other cost
            dbArr(firstemptyrow, 74) = impDBArr(i, 59) 'C_Other cost Info
            dbArr(firstemptyrow, 75) = impDBArr(i, 32) 'No of 180x90x100 Foot
            dbArr(firstemptyrow, 76) = impDBArr(i, 33) 'No of 140x90x100 Foot
            dbArr(firstemptyrow, 77) = impDBArr(i, 34) 'No of 90x90x100 Foot
            dbArr(firstemptyrow, 78) = "" 'Item in Pipechain Y/N
            
            'Load temp items to sheet
            impItemArr(j, 1) = i 'Set Sequence Number
            impItemArr(j, 3) = impDBArr(i, 1) ' IKEA Comp Art No
            impItemArr(j, 4) = impDBArr(i, 2) ' Article Name
            impItemArr(j, 5) = impDBArr(i, 3) ' LxWxH
            impItemArr(j, 6) = impDBArr(i, 4) ' Article Group Name
            impItemArr(j, 7) = impDBArr(i, 5) ' IKEA Product  Article Number
            impItemArr(j, 8) = impDBArr(i, 6) ' IKEA Supplier Name
            impItemArr(j, 9) = impDBArr(i, 7) ' IKEA Supplier Reference
            impItemArr(j, 10) = impDBArr(i, 8) ' NPS Reference
            impItemArr(j, 11) = impDBArr(i, 9) ' Description
            impItemArr(j, 12) = impDBArr(i, 10) ' Forecasted Yearly Volume
            impItemArr(j, 13) = impDBArr(i, 11) ' Average Order Quantity
            impItemArr(j, 14) = impDBArr(i, 12) ' Composition
            impItemArr(j, 15) = impDBArr(i, 13) ' Board Selection
            impItemArr(j, 16) = impDBArr(i, 14) ' Construction/Drawing
            impItemArr(j, 17) = impDBArr(i, 15) ' Color (Inside/Outside)
            impItemArr(j, 18) = impDBArr(i, 16) ' Printing
            impItemArr(j, 19) = impDBArr(i, 17) ' 1st Conversion Process
            impItemArr(j, 20) = impDBArr(i, 18) ' Outs
            impItemArr(j, 21) = impDBArr(i, 19) ' 2nd  Conversion Process
            impItemArr(j, 22) = impDBArr(i, 20) ' Outs2
            impItemArr(j, 23) = impDBArr(i, 21) ' 3rd Conversion Process
            impItemArr(j, 24) = impDBArr(i, 22) ' Outs3
            impItemArr(j, 25) = impDBArr(i, 23) ' 4th Conversion Process
            impItemArr(j, 26) = impDBArr(i, 24) ' Outs4
            impItemArr(j, 27) = impDBArr(i, 25) ' Packaging Type
            impItemArr(j, 28) = impDBArr(i, 26) ' Corrugator Paper Waste
            impItemArr(j, 29) = impDBArr(i, 27) ' Corrugator Starch Waste
            impItemArr(j, 30) = impDBArr(i, 28) ' Converting Waste
            impItemArr(j, 31) = impDBArr(i, 29) ' No of 180x90x50 foot
            impItemArr(j, 32) = impDBArr(i, 30) ' No of 140x90x50 foot
            impItemArr(j, 33) = impDBArr(i, 31) ' No of 90x90x50 foot
            impItemArr(j, 34) = impDBArr(i, 32) ' No of 180x90x100 foot
            impItemArr(j, 35) = impDBArr(i, 33) ' No of 140x90x100 foot
            impItemArr(j, 36) = impDBArr(i, 34) ' No of 90x90x100 foot
            impItemArr(j, 37) = impDBArr(i, 35) ' Pallet In FCA
            impItemArr(j, 38) = impDBArr(i, 36) ' Pallet Type
            impItemArr(j, 39) = impDBArr(i, 37) ' Pallet Quantity
            impItemArr(j, 40) = impDBArr(i, 38) ' Transport Option
            impItemArr(j, 41) = impDBArr(i, 39) ' Tool Type
            impItemArr(j, 42) = impDBArr(i, 40) ' Article Net Size
            impItemArr(j, 43) = impDBArr(i, 41) ' Article Weight (Kg/1000pcs)
            impItemArr(j, 44) = impDBArr(i, 42) ' C_Unused
            impItemArr(j, 45) = impDBArr(i, 43) ' C_Blank Length
            impItemArr(j, 46) = impDBArr(i, 44) ' C_Blank Width
            impItemArr(j, 47) = impDBArr(i, 45) ' C_Printing
            impItemArr(j, 48) = impDBArr(i, 46) ' C_Slotting
            impItemArr(j, 49) = impDBArr(i, 47) ' C_Diecut
            impItemArr(j, 50) = impDBArr(i, 48) ' C_Glue
            impItemArr(j, 51) = impDBArr(i, 49) ' C_Waste removal
            impItemArr(j, 52) = impDBArr(i, 50) ' C_Packing
            impItemArr(j, 53) = impDBArr(i, 51) ' C_Special shape
            impItemArr(j, 54) = impDBArr(i, 52) ' C_Order less than MOQ
            impItemArr(j, 55) = impDBArr(i, 53) ' C_Optional 1
            impItemArr(j, 56) = impDBArr(i, 54) ' C_Optional 2
            impItemArr(j, 57) = impDBArr(i, 55) ' C_Optional 3
            impItemArr(j, 58) = impDBArr(i, 56) ' C_Management cost
            impItemArr(j, 59) = impDBArr(i, 57) ' C_Profit
            impItemArr(j, 60) = impDBArr(i, 58) ' C_Other cost
            impItemArr(j, 61) = impDBArr(i, 59) ' C_Other cost info
            impItemArr(j, 62) = impDBArr(i, 60) ' Extra Cost
            impItemArr(j, 63) = impDBArr(i, 61) ' Extra Cost Info
            impItemArr(j, 64) = impDBArr(i, 62) ' Tool Cost
            
            ' START TEST
            err = 0
            textline = ""
            ' Test if article name is empty
            If impItemArr(j, 4) = "" Then
                err = 1
                textline = textline & "Empty Article Name" & vbNewLine
            Else
            End If
                
            ' Test if Article Group Name is empty
            If impItemArr(j, 6) = "Cardboard Boxes" Or _
            impItemArr(j, 6) = "Cardboard Fillers" Or _
            impItemArr(j, 6) = "Cardboard Sheets" Or _
            impItemArr(j, 6) = "Cardboard Sheets Converted" Or _
            impItemArr(j, 6) = "Paper Pallet Sheet" Or _
            impItemArr(j, 6) = "Paper Pallet Sheet Converted" Or _
            impItemArr(j, 6) = "Paper Pallet Ready Made" Or _
            impItemArr(j, 6) = "Paper Pallet Foot" Or _
            impItemArr(j, 6) = "Paper Pallet Replacement Foot" Or _
            impItemArr(j, 6) = "Multichannel Packaging" Or _
            impItemArr(j, 6) = "Multichannel Foot" Or _
            impItemArr(j, 6) = "Multichannel Pallet" Or _
            impItemArr(j, 6) = "Multichannel Replacement Foot" Then
            Else
                err = 1
                textline = textline & "Invalid Article Group Name" & vbNewLine
            End If
   
   
            ' Test IKEA Supplier Name
            If impItemArr(j, 8) = "" Then
                err = 1
                textline = textline & "Empty IKEA Supplier Name" & vbNewLine
            Else
            End If
            
            ' Test if IKEA Supplier Name exist in CBD????????
            k = 1
            found = 0
            For k = LBound(supplierArr) To UBound(supplierArr)
                            If impItemArr(j, 8) = supplierArr(k, 1) And Not impItemArr(j, 8) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "IKEA Supplier Name does not exist in CBD" & vbNewLine
            Else
            End If

            
            ' Test IKEA Supplier Reference
            If impItemArr(j, 9) = "" Then
                err = 1
                textline = textline & "Empty IKEA Supplier Reference" & vbNewLine
            Else
            End If
            
            ' Test NPS Reference
            If impItemArr(j, 10) = "" Then
                err = 1
                textline = textline & "Empty NPS Reference" & vbNewLine
            Else
            End If

            ' Test NPS Yearly Forecast if empty
            If impItemArr(j, 12) = "" Then
                err = 1
                textline = textline & "Empty Yearly Forecast" & vbNewLine
            Else
            End If
            
            ' Test NPS Yearly Forecast if it is a number
            If Not IsNumeric(impItemArr(j, 12)) Then
                err = 1
                textline = textline & "Yearly forecast must be a number" & vbNewLine
            Else
            End If
            
            ' Test Average Order Quantity if empty
            If impItemArr(j, 13) = "" Then
                err = 1
                textline = textline & "Empty Average Order Quantity" & vbNewLine
            Else
            End If
            
            ' Test NPS Average Order Quantity if it is a number
            If Not IsNumeric(impItemArr(j, 13)) Then
                err = 1
                textline = textline & "Average Order quantity must be a number" & vbNewLine
            Else
            End If

            ' Test if Composition exists
            k = 1
            found = 0
            For k = LBound(compositionArr) To UBound(compositionArr)
                            If impItemArr(j, 14) = compositionArr(k, 1) And Not impItemArr(j, 14) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Composition does not exist in CBD" & vbNewLine
            Else
            End If
            
            ' Test if Board Selection exists
            k = 1
            found = 0
            For k = LBound(boardArr) To UBound(boardArr)
                            If impItemArr(j, 15) = boardArr(k, 1) And Not impItemArr(j, 15) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Board does not exist in CBD" & vbNewLine
            Else
            End If
            
            ' Test Color Inside/Outise if correct
            If impItemArr(j, 17) = "BB" Or _
            impItemArr(j, 17) = "WB" Or _
            impItemArr(j, 17) = "WW" Or _
            impItemArr(j, 17) = "BW" Then
            Else
                err = 1
                textline = textline & "Invalid Color Inside/Outside Code" & vbNewLine
            End If
            
            ' Test Printing
            If impItemArr(j, 18) = "Yes" Or _
            impItemArr(j, 18) = "No" Then
            Else
                err = 1
                textline = textline & "Invalid Printing selection" & vbNewLine
            End If
            
            
            
            ' VERSION A
            If version = "A" Then
            'Test Conversion  1 process i version A
            If Not impItemArr(j, 19) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 19) = conversionArr(k, 1) And Not impItemArr(j, 19) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 1 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 20) = 1 Or _
                        impItemArr(j, 20) = 2 Or _
                        impItemArr(j, 20) = 3 Or _
                        impItemArr(j, 20) = 4 Or _
                        impItemArr(j, 20) = 5 Or _
                        impItemArr(j, 20) = 6 Or _
                        impItemArr(j, 20) = 7 Or _
                        impItemArr(j, 20) = 8 Or _
                        impItemArr(j, 20) = 9 Or _
                        impItemArr(j, 20) = 10 Or _
                        impItemArr(j, 20) = ">10" Or _
                        impItemArr(j, 20) = ">15" Or _
                        impItemArr(j, 20) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion 1 does not have valid number of outs" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            'Test Conversion  2 process i version A
            If Not impItemArr(j, 21) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 21) = conversionArr(k, 1) And Not impItemArr(j, 21) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 2 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 22) = 1 Or _
                        impItemArr(j, 22) = 2 Or _
                        impItemArr(j, 22) = 3 Or _
                        impItemArr(j, 22) = 4 Or _
                        impItemArr(j, 22) = 5 Or _
                        impItemArr(j, 22) = 6 Or _
                        impItemArr(j, 22) = 7 Or _
                        impItemArr(j, 22) = 8 Or _
                        impItemArr(j, 22) = 9 Or _
                        impItemArr(j, 22) = 10 Or _
                        impItemArr(j, 22) = ">10" Or _
                        impItemArr(j, 22) = ">15" Or _
                        impItemArr(j, 22) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion 2 does not have valid number of outs" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            'Test Conversion  3 process i version A
            If Not impItemArr(j, 23) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 23) = conversionArr(k, 1) And Not impItemArr(j, 23) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 3 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 24) = 1 Or _
                        impItemArr(j, 24) = 2 Or _
                        impItemArr(j, 24) = 3 Or _
                        impItemArr(j, 24) = 4 Or _
                        impItemArr(j, 24) = 5 Or _
                        impItemArr(j, 24) = 6 Or _
                        impItemArr(j, 24) = 7 Or _
                        impItemArr(j, 24) = 8 Or _
                        impItemArr(j, 24) = 9 Or _
                        impItemArr(j, 24) = 10 Or _
                        impItemArr(j, 24) = ">10" Or _
                        impItemArr(j, 24) = ">15" Or _
                        impItemArr(j, 24) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion 3 does not have valid number of outs" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            'Test Conversion  4 process i version A
            If Not impItemArr(j, 25) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 25) = conversionArr(k, 1) And Not impItemArr(j, 25) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 3 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 26) = 1 Or _
                        impItemArr(j, 26) = 2 Or _
                        impItemArr(j, 26) = 3 Or _
                        impItemArr(j, 26) = 4 Or _
                        impItemArr(j, 26) = 5 Or _
                        impItemArr(j, 26) = 6 Or _
                        impItemArr(j, 26) = 7 Or _
                        impItemArr(j, 26) = 8 Or _
                        impItemArr(j, 26) = 9 Or _
                        impItemArr(j, 26) = 10 Or _
                        impItemArr(j, 26) = ">10" Or _
                        impItemArr(j, 26) = ">15" Or _
                        impItemArr(j, 26) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion 4 does not have valid number of outs" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            Else
            End If
            
            ' END VERSION A

            ' VERSION B
            If version = "B" Then
            'Test Conversion  1 process i version B
            If Not impItemArr(j, 19) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 19) = conversionArr(k, 1) And Not impItemArr(j, 19) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 1 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 20) = 1 Or _
                        impItemArr(j, 20) = 2 Or _
                        impItemArr(j, 20) = 3 Or _
                        impItemArr(j, 20) = 4 Or _
                        impItemArr(j, 20) = 5 Or _
                        impItemArr(j, 20) = 6 Or _
                        impItemArr(j, 20) = 7 Or _
                        impItemArr(j, 20) = 8 Or _
                        impItemArr(j, 20) = 9 Or _
                        impItemArr(j, 20) = 10 Or _
                        impItemArr(j, 20) = ">10" Or _
                        impItemArr(j, 20) = ">15" Or _
                        impItemArr(j, 20) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion process specified but number of outs not valid" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            'Test Conversion  2 process i version B
            If Not impItemArr(j, 21) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 21) = conversionArr(k, 1) And Not impItemArr(j, 21) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 2 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 20) = 1 Or _
                        impItemArr(j, 20) = 2 Or _
                        impItemArr(j, 20) = 3 Or _
                        impItemArr(j, 20) = 4 Or _
                        impItemArr(j, 20) = 5 Or _
                        impItemArr(j, 20) = 6 Or _
                        impItemArr(j, 20) = 7 Or _
                        impItemArr(j, 20) = 8 Or _
                        impItemArr(j, 20) = 9 Or _
                        impItemArr(j, 20) = 10 Or _
                        impItemArr(j, 20) = ">10" Or _
                        impItemArr(j, 20) = ">15" Or _
                        impItemArr(j, 20) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion process specified but number of outs not valid" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            'Test Conversion  3 process i version B
            If Not impItemArr(j, 23) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 23) = conversionArr(k, 1) And Not impItemArr(j, 23) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 3 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 20) = 1 Or _
                        impItemArr(j, 20) = 2 Or _
                        impItemArr(j, 20) = 3 Or _
                        impItemArr(j, 20) = 4 Or _
                        impItemArr(j, 20) = 5 Or _
                        impItemArr(j, 20) = 6 Or _
                        impItemArr(j, 20) = 7 Or _
                        impItemArr(j, 20) = 8 Or _
                        impItemArr(j, 20) = 9 Or _
                        impItemArr(j, 20) = 10 Or _
                        impItemArr(j, 20) = ">10" Or _
                        impItemArr(j, 20) = ">15" Or _
                        impItemArr(j, 20) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion process specified but number of outs not valid" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            'Test Conversion  4 process i version B
            If Not impItemArr(j, 25) = "" Then
            k = 1
            found = 0
            For k = LBound(conversionArr) To UBound(conversionArr)
                            If impItemArr(j, 25) = conversionArr(k, 1) And Not impItemArr(j, 25) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Conversion 3 does not exist in CBD" & vbNewLine
            Else
                If err = 0 Then
                    If impItemArr(j, 20) = 1 Or _
                        impItemArr(j, 20) = 2 Or _
                        impItemArr(j, 20) = 3 Or _
                        impItemArr(j, 20) = 4 Or _
                        impItemArr(j, 20) = 5 Or _
                        impItemArr(j, 20) = 6 Or _
                        impItemArr(j, 20) = 7 Or _
                        impItemArr(j, 20) = 8 Or _
                        impItemArr(j, 20) = 9 Or _
                        impItemArr(j, 20) = 10 Or _
                        impItemArr(j, 20) = ">10" Or _
                        impItemArr(j, 20) = ">15" Or _
                        impItemArr(j, 20) = ">20" Then
                    Else
                        err = 1
                        textline = textline & "Conversion process specified but number of outs not valid" & vbNewLine
                    End If
                End If
            End If
            
            Else
            End If
            
            Else
            End If
            ' END VERSION B
            
            'Test Packaging type i version A-B
            If version = "A" Or version = "B" Then
            If Not impItemArr(j, 27) = "" Then
            k = 1
            found = 0
            For k = LBound(packagingArr) To UBound(packagingArr)
                            If impItemArr(j, 27) = packagingArr(k, 1) And Not impItemArr(j, 27) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Packaging Type does not exist in CBD" & vbNewLine
            Else
            End If
            
            Else
            End If
            
            Else
            End If

            
            ' Test Corrugator Paper Waste if number
            If Not IsNumeric(impItemArr(j, 28)) Then
                err = 1
                textline = textline & "Corrugator Paper waste must be a number" & vbNewLine
            Else
            End If
            
            ' Test Corrugator Starch Waste if number
            If Not IsNumeric(impItemArr(j, 29)) Then
                err = 1
                textline = textline & "Corrugator Paper waste must be a number" & vbNewLine
            Else
            End If
            
            ' Test Converting Waste if number
            If Not IsNumeric(impItemArr(j, 30)) Then
                err = 1
                textline = textline & "Converting waste must be a number" & vbNewLine
            Else
            End If
            
            ' Test 180x90x50 if number
            If Not IsNumeric(impItemArr(j, 31)) Then
                err = 1
                textline = textline & "No of 180x90x50 foot must be a number" & vbNewLine
            Else
            End If
            
            ' Test 140x90x50 if number
            If Not IsNumeric(impItemArr(j, 32)) Then
                err = 1
                textline = textline & "No of 140x90x50 foot must be a number" & vbNewLine
            Else
            End If

            ' Test 90x90x50 if number
            If Not IsNumeric(impItemArr(j, 33)) Then
                err = 1
                textline = textline & "No of 90x90x50 foot must be a number" & vbNewLine
            Else
            End If

            ' Test 180x90x100 if number
            If Not IsNumeric(impItemArr(j, 34)) Then
                err = 1
                textline = textline & "No of 180x90x100 foot must be a number" & vbNewLine
            Else
            End If

            ' Test 140x90x100 if number
            If Not IsNumeric(impItemArr(j, 35)) Then
                err = 1
                textline = textline & "No of 140x90x100 foot must be a number" & vbNewLine
            Else
            End If
            
            ' Test 90x90x100 if number
            If Not IsNumeric(impItemArr(j, 36)) Then
                err = 1
                textline = textline & "No of 90x90x100 foot must be a number" & vbNewLine
            Else
            End If
            
            ' Test Pallet in FCA
            If impItemArr(j, 37) = "Yes" Or _
            impItemArr(j, 37) = "No" Then
            Else
                err = 1
                textline = textline & "Invalid Pallet in FCA selection" & vbNewLine
            End If
            
            
            ' Test Pallet Type in v A-B
            If version = "A" Or version = "B" Then
            If Not impItemArr(j, 38) = "" Then
            k = 1
            found = 0
            For k = LBound(palletArr) To UBound(palletArr)
                            If impItemArr(j, 38) = palletArr(k, 1) And Not impItemArr(j, 38) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Pallet Type does not exist in CBD" & vbNewLine
            Else
            End If
            
            Else
            End If
            
            Else
            End If

            
            ' Test Pallet Quantity if number
            If Not IsNumeric(impItemArr(j, 39)) Then
                err = 1
                textline = textline & "Pallet Quantity must be a number" & vbNewLine
            Else
            End If

            ' Test Transport Option in v A-B if contents is there
            If version = "A" Or version = "B" Then
            If Not impItemArr(j, 40) = "" Then
            k = 1
            found = 0
            For k = LBound(transportArr) To UBound(transportArr)
                            If impItemArr(j, 40) = transportArr(k, 1) And Not impItemArr(j, 40) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Transport Option does not exist in CBD" & vbNewLine
            Else
            End If
            
            Else
            End If
            
            Else
            End If

            
            ' Test Tool Type in v A-B if contents is there
            If version = "A" Or version = "B" Then
            If Not impItemArr(j, 41) = "" Then
            k = 1
            found = 0
            For k = LBound(toolArr) To UBound(toolArr)
                            If impItemArr(j, 41) = toolArr(k, 1) And Not impItemArr(j, 41) = "" Then
                                found = 1
                                Exit For
                            Else
                            End If
            Next k
            If found = 0 Then
                err = 1
                textline = textline & "Tool Type does not exist in CBD" & vbNewLine
            Else
            End If
            
            Else
            End If
            
            Else
            End If
            
            
            ' Test Article Net Size if empty
            If impItemArr(j, 42) = "" Then
                err = 1
                textline = textline & "Empty Article Net Size" & vbNewLine
            Else
            End If
            
            ' Test Article Net Size is a number
            If Not IsNumeric(impItemArr(j, 42)) Then
                err = 1
                textline = textline & "Article Net size must be a number" & vbNewLine
            Else
            End If

            ' Test Article Weight is a number
            If Not IsNumeric(impItemArr(j, 43)) Then
                err = 1
                textline = textline & "Article weight must be a number" & vbNewLine
            Else
            End If

            ' Test if version C then make sure Added Value and size data is filled in for the mandatory fields
            If version = "C" Then
            
                        ' Test Blank Length if empty
                        If impItemArr(j, 45) = "" Then
                            err = 1
                            textline = textline & "Empty Blank Length" & vbNewLine
                        Else
                        End If
            
                        ' Test Blank Length is a number
                        If IsNumeric(impItemArr(j, 45)) Then
                            err = 1
                            textline = textline & "Blank Length must be a number" & vbNewLine
                        Else
                        End If
            
                        ' Test Blank Width if empty
                        If impItemArr(j, 46) = "" Then
                            err = 1
                            textline = textline & "Empty Width Length" & vbNewLine
                        Else
                        End If
            
                        ' Test Blank Width is a number
                        If IsNumeric(impItemArr(j, 46)) Then
                            err = 1
                            textline = textline & "Blank Width must be a number" & vbNewLine
                        Else
                        End If
                        
                        ' Test Printing option
                        If impItemArr(j, 47) = "Yes" Or _
                            impItemArr(j, 47) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Printing Option selection" & vbNewLine
                        End If
                        
                        ' Test Slotting option
                        If impItemArr(j, 48) = "Yes" Or _
                            impItemArr(j, 48) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Slotting Option selection" & vbNewLine
                        End If
                        
                        ' Test Diecut option
                        If impItemArr(j, 49) = "Yes" Or _
                            impItemArr(j, 49) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Diecut Option selection" & vbNewLine
                        End If
                        
                        ' Test Glue option
                        If impItemArr(j, 50) = "Yes" Or _
                            impItemArr(j, 50) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Glue Option selection" & vbNewLine
                        End If
                        
                        ' Test Waste Removal option
                        If impItemArr(j, 51) = "Yes" Or _
                            impItemArr(j, 51) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Waste Removal Option selection" & vbNewLine
                        End If
                    
                        ' Test Packing option
                        If impItemArr(j, 52) = "Yes" Or _
                            impItemArr(j, 52) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Packing Option selection" & vbNewLine
                        End If
                        
                        ' Test Special Shape
                        If impItemArr(j, 53) = "Yes" Or _
                            impItemArr(j, 53) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Special Shape Option selection" & vbNewLine
                        End If
                        
                        ' Test Order Less than MOQ
                        If impItemArr(j, 54) = "Yes" Or _
                            impItemArr(j, 54) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Order Less Than MOQ Option selection" & vbNewLine
                        End If
                        
                        ' Test Optional 1
                        If impItemArr(j, 55) = "Yes" Or _
                            impItemArr(j, 55) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Optional 1 Option selection" & vbNewLine
                        End If
                        
                        ' Test Optional 2
                        If impItemArr(j, 56) = "Yes" Or _
                            impItemArr(j, 56) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Optional 2 Option selection" & vbNewLine
                        End If
                        
                        ' Test Optional 3
                        If impItemArr(j, 57) = "Yes" Or _
                            impItemArr(j, 57) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Optional 3 Option selection" & vbNewLine
                        End If
                        
                        ' Test Management Cost
                        If impItemArr(j, 58) = "Yes" Or _
                            impItemArr(j, 58) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Management Cost Option selection" & vbNewLine
                        End If
                        
                        ' Test Profit Cost
                        If impItemArr(j, 59) = "Yes" Or _
                            impItemArr(j, 59) = "No" Then
                        Else
                            err = 1
                            textline = textline & "Invalid Profit Cost Option selection" & vbNewLine
                        End If
                        
                        ' Test Other Cost is a number
                        If IsNumeric(impItemArr(j, 60)) Then
                            err = 1
                            textline = textline & "Other Cost must be a number" & vbNewLine
                        Else
                        End If
            
                        ' Test Extra Cost info
                        If Not (impItemArr(j, 60) = "") And (impItemArr(j, 61) = "") Then
                            err = 1
                            textline = textline & "Other Cost Info must be specified" & vbNewLine
                        Else
                        End If
            
            Else
            End If
            ' End version C Added value and size

            
            ' Test Extra Cost is a number
            If Not IsNumeric(impItemArr(j, 62)) Then
                err = 1
                textline = textline & "Extra Cost must be a number" & vbNewLine
            Else
            End If
            
            ' Test Extra Cost info
            If Not (impItemArr(j, 62) = "") And (impItemArr(j, 63) = "") Then
                err = 1
                textline = textline & "Extra Cost Info must be specified" & vbNewLine
            Else
            End If
            
            ' Test Tool Cost is a number
            If Not IsNumeric(impItemArr(j, 64)) Then
                err = 1
                textline = textline & "Tool cost must be a number" & vbNewLine
            Else
            End If


            '
            ' END TEST
            '
            
            ' Write error text
            If err = 0 Then
            impItemArr(j, 2) = "OK"
            Else
            impItemArr(j, 2) = textline
            dbArr(firstemptyrow, 2) = "ERROR"
            End If
            
            firstemptyrow = firstemptyrow + 1
            j = j + 1
Next i

endTestSeq:




'Write the database to sheet
rngDB = dbArr




rngImportitemstable = impItemArr

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub

Sub Create_Items_Selection()
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51
    Const temp_import_item As Long = 74

    Dim dbSheet As Worksheet
    Dim importItemsheet As Worksheet
    Dim rngItemstable As Range
    
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impItemArr() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim selectedRow As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim generatedNo As Long
    Dim NPSno As Long
    Dim uid As String
    Dim unique As Long
    Dim found As Long
    Dim testNo As Long
    
    
    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Create Items")

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:BZ6000")
Set rngDB = dbSheet.Range("A1:BZ10000")

' Populate arrays
dbArr = rngDB.value

'First empty DB Row
i = 1
firstemptyrow = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i

selectedRow = 3
selectedRow = Selection.row
If selectedRow < 3 Or selectedRow > 6000 Then
    selectedRow = 3
    Else
End If


' Load Supplier Number NPSno
i = 1
NPSno = 0
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = Supplier_Info Then
            NPSno = dbArr(i, 5)
        Exit For
        Else
        End If
Next i

'
' ERROR CHECK
'
If NPSno = 0 Then
    MsgBox "NPS Number not specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty NPS Number"
    GoTo endXLupdate
    Else
End If




' Create uid
testNo = 5000000
i = 1
found = 0
unique = 0
Do While unique = 0
    Randomize
    generatedNo = Int((90000000 - 10000000 + 1) * Rnd + 10000000)
    uid = NPSno & "-" & generatedNo
        i = 1
        For i = LBound(dbArr) To UBound(dbArr)
            If dbArr(i, 1) = 30 Then
                If dbArr(i, 4) = uid Then
                    found = 1
                Else
                End If
            Else
            End If
        Next i
        
        If found = 1 Then
        unique = 0
        Else
        unique = 1
        End If
Loop
        


' Create selected item
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = temp_import_item And importitemsSheet.Cells(selectedRow, 1) = dbArr(i, 4) Then
        'Row with error?
        If importitemsSheet.Cells(selectedRow, 2) = "OK" Then
        Else
             MsgBox "Sequence number row contains errors. Cannot create item!" & vbNewLine _
            & "Must be fixed before creating item", vbOKOnly + vbCritical, "Row with error"
            GoTo endXLupdate
        End If

        'Are you sure?
        If MsgBox("This will create sequence item:" & vbNewLine & vbNewLine & dbArr(i, 4) & ": " & dbArr(i, 8), vbYesNo, "Create Item") = vbNo Then GoTo endXLupdate
        dbArr(i, 1) = 30
        dbArr(i, 3) = "Item"
        dbArr(i, 4) = uid
        
        Select Case dbArr(i, 12)
                        Case Is = "Cardboard Boxes"
                            dbArr(i, 4) = uid & "00"
                        Case Is = "Cardboard Fillers"
                            dbArr(i, 4) = uid & "01"
                        Case Is = "Cardboard Sheets"
                            dbArr(i, 4) = uid & "02"
                        Case Is = "Cardboard Sheets Converted"
                            dbArr(i, 4) = uid & "03"
                        Case Is = "Paper Pallet Sheet"
                            dbArr(i, 4) = uid & "04"
                        Case Is = "Paper Pallet Sheet Converted"
                            dbArr(i, 4) = uid & "05"
                        Case Is = "Paper Pallet Ready Made"
                            dbArr(i, 4) = uid & "06"
                        Case Is = "Paper Pallet Foot"
                            dbArr(i, 4) = uid & "07"
                        Case Is = "Paper Pallet Replacement Foot"
                            dbArr(i, 4) = uid & "08"
                        Case Is = "Multichannel Packaging"
                            dbArr(i, 4) = uid & "09"
                        Case Is = "Multichannel Foot"
                            dbArr(i, 4) = uid & "10"
                        Case Is = "Multichannel Replacement Foot"
                            dbArr(i, 4) = uid & "11"
                        Case Is = "Multichannel Pallet"
                            dbArr(i, 4) = uid & "12"
                        Case Else
                            dbArr(i, 4) = uid & "13"
                End Select
        
    Else
    End If
Next i

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub

Sub Create_Items_Filtered()
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51
    Const temp_import_item As Long = 74

    Dim dbSheet As Worksheet
    Dim importItemsheet As Worksheet
    Dim rngItemstable As Range
    Dim rngSelection As Range
    
    
    Dim rngDB As Range
    Dim rngDBout As Range
    Dim rngImportitemstable As Range
    
    Dim dbArr() As Variant
    Dim impItemArr() As Variant
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim selectedRow As String
    Dim firstemptyrow As Long
    Dim firstemptyDBrow As Long
    Dim dropdown As String
    Dim generatedNo As Long
    Dim NPSno As Long
    Dim uid As String
    Dim unique As Long
    Dim found As Long
    Dim testNo As Long
    
    Dim sequence As Variant
    Dim cell As Range
    
    
    

' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set importitemsSheet = ThisWorkbook.Sheets("Create Items")

' Set array ranges
Set rngImportitemstable = importitemsSheet.Range("A3:BZ6000")
Set rngDB = dbSheet.Range("A1:BZ10000")
Set rngSelection = importitemsSheet.Range("A3:A6000").SpecialCells(xlCellTypeVisible)

' Populate arrays
dbArr = rngDB.value

'First empty DB Row
i = 1
firstemptyrow = 1
firstemptyDBrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


' Load Supplier Number NPSno
i = 1
NPSno = 0
For i = LBound(dbArr) To UBound(dbArr)
        If dbArr(i, 1) = Supplier_Info Then
            NPSno = dbArr(i, 5)
        Exit For
        Else
        End If
Next i

'
' ERROR CHECK
'
If NPSno = 0 Then
    MsgBox "NPS Number not specified" & vbNewLine _
            & "Must be fixed before saving data ", vbOKOnly + vbCritical, "Empty NPS Number"
    GoTo endXLupdate
    Else
End If

'Are you sure?
If MsgBox("This will create new items on filterd selection" & vbNewLine & vbNewLine, vbYesNo, "Create Items") = vbNo Then GoTo endXLupdate
        

For Each cell In rngSelection
sequence = cell.value


' Create selected item
i = 1
j = 1
For i = LBound(dbArr) To UBound(dbArr)


    If dbArr(i, 1) = temp_import_item And sequence = dbArr(i, 4) Then
        'Row with error?
        If Not dbArr(i, 2) = "ERROR" Then
        Else
             MsgBox "Selection contains row with error. Will not create any items!" & vbNewLine _
            & "Must be fixed before creating item", vbOKOnly + vbCritical, "Row with errors"
            GoTo endXLupdate
        End If

        
        ' Create uid
        testNo = 5000000
        k = 1
        found = 0
        unique = 0
        Do While unique = 0
            Randomize
            generatedNo = Int((90000000 - 10000000 + 1) * Rnd + 10000000)
            uid = NPSno & "-" & generatedNo
                k = 1
                For k = LBound(dbArr) To UBound(dbArr)
                    If dbArr(k, 1) = 30 Then
                        If dbArr(k, 4) = uid Then
                            found = 1
                        Else
                        End If
                 Else
                End If
                Next k
        
                If found = 1 Then
                unique = 0
                Else
                unique = 1
                End If
        Loop
        
        dbArr(i, 1) = 30
        dbArr(i, 3) = "Item"
        dbArr(i, 4) = uid
        
        Select Case dbArr(i, 12)
                        Case Is = "Cardboard Boxes"
                            dbArr(i, 4) = uid & "00"
                        Case Is = "Cardboard Fillers"
                            dbArr(i, 4) = uid & "01"
                        Case Is = "Cardboard Sheets"
                            dbArr(i, 4) = uid & "02"
                        Case Is = "Cardboard Sheets Converted"
                            dbArr(i, 4) = uid & "03"
                        Case Is = "Paper Pallet Sheet"
                            dbArr(i, 4) = uid & "04"
                        Case Is = "Paper Pallet Sheet Converted"
                            dbArr(i, 4) = uid & "05"
                        Case Is = "Paper Pallet Ready Made"
                            dbArr(i, 4) = uid & "06"
                        Case Is = "Paper Pallet Foot"
                            dbArr(i, 4) = uid & "07"
                        Case Is = "Paper Pallet Replacement Foot"
                            dbArr(i, 4) = uid & "08"
                        Case Is = "Multichannel Packaging"
                            dbArr(i, 4) = uid & "09"
                        Case Is = "Multichannel Foot"
                            dbArr(i, 4) = uid & "10"
                        Case Is = "Multichannel Replacement Foot"
                            dbArr(i, 4) = uid & "11"
                        Case Is = "Multichannel Pallet"
                            dbArr(i, 4) = uid & "12"
                        Case Else
                            dbArr(i, 4) = uid & "13"
                End Select
        
    Else
    End If
Next i
Next cell

rngDB = dbArr
' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

Create_Items_Load



endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub



Sub Save_for_TM1()
    ' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

'
'
'

Dim wb1 As Workbook
    Dim wb2 As Workbook
    Dim s As Worksheet
    Set wb1 = ActiveWorkbook
    Set wb2 = Workbooks.Add
    Set s = wb1.Sheets("Commissionreport")

    
    'Empty Filter selection to avoid VBA error
    On Error Resume Next
    ActiveCell.Range("A17").Activate
    s.ShowAllData
    On Error GoTo 0
    
    s.Copy wb2.Sheets(1)
   
   
   Columns("H:H").Select
   
          Selection.Replace What:="" & Chr(9) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
          Selection.Replace What:="" & Chr(10) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        
  Selection.Replace What:="" & Chr(11) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        
        
  Selection.Replace What:="" & Chr(12) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        
        Selection.Replace What:="" & Chr(13) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        Selection.Replace What:="" & Chr(14) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        
        Selection.Replace What:="" & Chr(160) & "", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    
    ' The first row below in next version when we include info data into TM1
    'Columns("BB:BI").Delete
    Columns("X:BI").Delete
    
    ' The first section below in next version when we include info data into TM1
    'Range("BB17").Select
    'ActiveCell.FormulaR1C1 = "=R3C8"
    'Range("BC17").Select
    'ActiveCell.FormulaR1C1 = "=R2C17"
    'Range("BD17").Select
    'ActiveCell.FormulaR1C1 = "=R3C17"
    'Range("BE17").Select
    'ActiveCell.FormulaR1C1 = "=R2C4"
    'Range("BB17:BE17").Select
    ' Selection.NumberFormat = "@"
    'Selection.AutoFill Destination:=Range("BB17:BE6000"), Type:=xlFillDefault
    
    ' Below section in current version
    Range("X17").Select
    ActiveCell.FormulaR1C1 = "=R3C8"
    Range("Y17").Select
    ActiveCell.FormulaR1C1 = "=R2C17"
    Range("Z17").Select
    ActiveCell.FormulaR1C1 = "=R3C17"
    Range("X17:Z17").Select
    Selection.NumberFormat = "@"
    Selection.AutoFill Destination:=Range("X17:Z6000"), Type:=xlFillDefault

    Range(Selection, Selection.End(xlDown)).Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
       
    Rows("1:15").Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlUp
    Rows("1:1").Select
    ' Below seem to create errors sometimes - Removed
    'Range("Table1[[#Headers],[Article type]]").Activate
    'Range("A16:Z6000").Activate
  wb2.SaveAs Left(wb1.FullName, Len(wb1.FullName) - 4) & "csv", xlCSV
    wb2.Close False

MsgBox "CSV file are located in same folder as original file and are ready to be imported in TM1", vbOKOnly, "File Saved OK"

    
   




'
'
'


endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

End Sub

Sub Generate_SetUI(salesCurrency As String, compCurrency As String)
    Dim dbSheet As Worksheet
    Dim itemsSheet As Worksheet
    Dim articlesSheet As Worksheet
    Dim m3Sheet As Worksheet
    Dim pricelistSheet As Worksheet
    Dim gapriceSheet As Worksheet
    Dim dapriceSheet As Worksheet
    Dim commissionSheet As Worksheet
    Dim infoSheet As Worksheet

    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Foot_180x90x100 As Long = 67
    Const Foot_140x90x100 As Long = 68
    Const Foot_90x90x100 As Long = 69
    Const Replacement_Foot_180x90x100 As Long = 70
    Const Replacement_Foot_140x90x100 As Long = 71
    Const Replacement_Foot_90x90x100 As Long = 72
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51

    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim m As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim name As String
    Dim textline As String

  
    Dim rngDB As Range

    Dim dbArr() As Variant

    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

Application.Calculate

' Set Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set itemsSheet = ThisWorkbook.Sheets("Items")
Set articlesSheet = ThisWorkbook.Sheets("Articles")
Set m3Sheet = ThisWorkbook.Sheets("M3")
Set gapriceSheet = ThisWorkbook.Sheets("Pricelist_GA")
Set dapriceSheet = ThisWorkbook.Sheets("Pricelist_DA")
Set commissionSheet = ThisWorkbook.Sheets("Commissionreport")
Set infoSheet = ThisWorkbook.Sheets("Info")

' Set array ranges
Set rngDB = dbSheet.Range("A1:BZ10000")



' Populate arrays
dbArr = rngDB.value



' Set UI in Articles Sheet
articlesSheet.Cells(2, "AF") = "Topliner inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AG") = "Flute 1 inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AH") = "Midliner 1 inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AI") = "Flute 2 inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AJ") = "Midliner 2 inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AK") = "Flute 3 inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AL") = "Bottomliner inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AM") = "Starch inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AN") = "Material cost inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AO") = compCurrency
articlesSheet.Cells(2, "AP") = "Material cost inc waste " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "AQ") = compCurrency
articlesSheet.Cells(2, "AW") = "Sheet cost inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "AX") = compCurrency
articlesSheet.Cells(2, "AY") = "Sheet cost inc waste " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "AZ") = compCurrency
articlesSheet.Cells(2, "BD") = "Sheet cost inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "BE") = compCurrency
articlesSheet.Cells(2, "BF") = "Sheet cost inc waste " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BG") = compCurrency
articlesSheet.Cells(2, "BK") = "Sheet cost inc waste " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "BL") = compCurrency
articlesSheet.Cells(2, "BM") = "Sheet cost inc waste " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BN") = compCurrency
articlesSheet.Cells(2, "BO") = "Corrugation cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BP") = compCurrency
articlesSheet.Cells(2, "BQ") = "Conversion cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BR") = compCurrency
articlesSheet.Cells(2, "BS") = "Volume Discount/Markup " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BT") = compCurrency
articlesSheet.Cells(2, "BV") = "Conversion cost with volume discount " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BW") = compCurrency
articlesSheet.Cells(2, "BX") = "Packaging cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "BY") = compCurrency
articlesSheet.Cells(2, "BZ") = "Production cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CA") = compCurrency
articlesSheet.Cells(2, "CB") = "Other Cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CC") = compCurrency
articlesSheet.Cells(2, "CD") = "Profit " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CE") = compCurrency
articlesSheet.Cells(2, "CG") = "Total Volume Discount " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CH") = compCurrency
articlesSheet.Cells(2, "CI") = "Total Other Cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CJ") = compCurrency
articlesSheet.Cells(2, "CM") = "Price excl commission " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "CN") = "Price excl commission " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CO") = compCurrency
articlesSheet.Cells(2, "CQ") = "Price incl commission " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CR") = compCurrency
articlesSheet.Cells(2, "CS") = "Pallet Cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CT") = compCurrency
articlesSheet.Cells(2, "CU") = "Transport Cost " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CV") = compCurrency
articlesSheet.Cells(2, "CW") = "DDP " & salesCurrency & "/1000pcs"
articlesSheet.Cells(2, "CX") = compCurrency
articlesSheet.Cells(2, "CY") = "Tool Cost " & salesCurrency
articlesSheet.Cells(2, "DR") = "Extra Cost " & salesCurrency & "/1000m2"
articlesSheet.Cells(2, "DS") = "Extra Cost " & salesCurrency & "/1000pcs"

'
' Set GA UI
gapriceSheet.Cells(2, "A") = "General Agreement Pricelist" & vbNewLine & vbNewLine & "APPENDIX 1" & vbNewLine & "Agreement No:" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Nominated Packaging Supplier: " _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine

gapriceSheet.Cells(4, "I") = "Purchase price " & salesCurrency & "/1000 pcs"
gapriceSheet.Cells(4, "J") = "Sales price FCA " & salesCurrency & "/1000 pcs"
gapriceSheet.Cells(4, "K") = "Commission value " & salesCurrency & "/1000 pcs"
gapriceSheet.Cells(2, "L") = "NPS name" & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Printed name and date" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Signature" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Stamp"

k = 1
For k = LBound(dbArr) To UBound(dbArr)
    If dbArr(k, 1) = Supplier_Info Then
    gapriceSheet.Cells(2, "A") = "General Agreement Pricelist" & vbNewLine & vbNewLine & "APPENDIX 1" & vbNewLine & "Agreement No:" _
                            & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & "Nominated Packaging Supplier: " _
                            & dbArr(k, 4) & vbNewLine
        
         gapriceSheet.Cells(2, "L") = dbArr(k, 4) & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Printed name and date" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Signature" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Stamp"
        Exit For
    Else
    End If
Next k

k = 1
For k = LBound(dbArr) To UBound(dbArr)
    If dbArr(k, 1) = Validity Then
         gapriceSheet.Cells(1, "J") = dbArr(k, 4)
        Exit For
    Else
    End If
Next k


'
' Set DA UI
dapriceSheet.Cells(4, "K") = "Sales price FCA " & salesCurrency & "/1000 m2"
dapriceSheet.Cells(4, "L") = "Sales price FCA " & salesCurrency & "/1000 pcs"
dapriceSheet.Cells(4, "M") = "Sales price FCA " & compCurrency & "/1000 pcs"
dapriceSheet.Cells(4, "N") = "Sales price DDU " & salesCurrency & "/1000 pcs"
dapriceSheet.Cells(4, "O") = "Sales price DDU " & compCurrency & "/1000 pcs"
dapriceSheet.Cells(4, "R") = "Conversion markup or discount due to AOQ " & salesCurrency & "/1000 pcs"
dapriceSheet.Cells(4, "S") = "Tool cost " & salesCurrency & "/tool"

k = 1
For k = LBound(dbArr) To UBound(dbArr)
    If dbArr(k, 1) = Validity Then
         dapriceSheet.Cells(1, "L") = dbArr(k, 4)
        Exit For
    Else
    End If
Next k

k = 1
For k = LBound(dbArr) To UBound(dbArr)
    If dbArr(k, 1) = Supplier_Info Then
         dapriceSheet.Cells(2, "A") = "Delivery Agreement Price List" & vbNewLine & vbNewLine & "APPENDIX 1" _
                            & vbNewLine & vbNewLine & "Agreement No:" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine _
                            & "Nominated Packaging Supplier: " & dbArr(k, 4)
        
                
        dapriceSheet.Cells(2, "Q") = dbArr(k, 4) & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Printed name and date" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Signature" _
                            & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "Stamp"
        Exit For
    Else
    End If
Next k

'END DRAFT2

'
' Set Commissionreport UI
k = 1
For k = LBound(dbArr) To UBound(dbArr)
    If dbArr(k, 1) = Supplier_Info Then
        commissionSheet.Cells(2, "H") = dbArr(k, 4)
        commissionSheet.Cells(2, "Q") = dbArr(k, 5)
        Exit For
    Else
    End If
Next k
commissionSheet.Cells(3, "Q") = salesCurrency
commissionSheet.Cells(2, "D") = infoSheet.Cells(2, "E") & infoSheet.Cells(2, "F") & infoSheet.Cells(2, "G") & infoSheet.Cells(2, "H")









endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Generate_DeleteArr(arr As Variant)
Dim i, j As Long
i = 1
j = 1
For i = LBound(arr) To UBound(arr)
        arr(i, 1) = ""
            For j = LBound(arr, 2) To UBound(arr, 2)
                arr(i, j) = ""
            Next j
Next i
End Sub

Sub Generate_M3sheet(m3Arr As Variant, outArr As Variant, j As Long)
m3Arr(j, 1) = outArr(j, 1) 'UID
m3Arr(j, 2) = outArr(j, 4) 'ICOMP Art No
m3Arr(j, 3) = outArr(j, 5) 'Article Name
m3Arr(j, 4) = outArr(j, 10) 'Sup Ref
m3Arr(j, 5) = outArr(j, 11) 'NPS Ref
m3Arr(j, 6) = outArr(j, 20) 'Composition
m3Arr(j, 7) = outArr(j, 7) 'Art Type
m3Arr(j, 8) = outArr(j, 25) 'Art Net Size
'm3Arr(j, 9) = outArr(j, 25) 'Corrugated Cardboard
m3Arr(j, 10) = outArr(j, 92) * outArr(j, 89) 'RM
m3Arr(j, 11) = outArr(j, 92) - m3Arr(j, 10)  'Production
'm3Arr(j, 12) = outArr(j, 25) 'Others
m3Arr(j, 13) = m3Arr(j, 10) + m3Arr(j, 11) 'Checksum
m3Arr(j, 14) = outArr(j, 92) 'Pricelist
End Sub

Sub Generate_GAsheet(gaArr As Variant, outArr As Variant, dbArr As Variant, custArr As Variant, j As Long, i As Long)
Dim k As Long
'
'
' Start of GA Sheet
'
gaArr(j, 1) = outArr(j, 1)
gaArr(j, 2) = outArr(j, 4)
gaArr(j, 3) = outArr(j, 5)
gaArr(j, 4) = outArr(j, 11)
'DRAFT2
gaArr(j, 5) = outArr(j, 7)
gaArr(j, 6) = outArr(j, 10)

'v4.2
gaArr(j, 7) = 0
k = 1
For k = LBound(custArr) To UBound(custArr)
    If custArr(k, 4) = dbArr(i, 15) Then
    gaArr(j, 7) = custArr(k, 5)
    Exit For
    Else
    End If
Next k

gaArr(j, 8) = outArr(j, 9)
gaArr(j, 9) = outArr(j, 92)
gaArr(j, 10) = outArr(j, 95)
gaArr(j, 11) = gaArr(j, 10) - gaArr(j, 9)
gaArr(j, 12) = gaArr(j, 11) / gaArr(j, 9)
gaArr(j, 13) = outArr(j, 18)
gaArr(j, 14) = outArr(j, 19)
'END DRAFT2


End Sub

Sub Generate_DAsheet(daArr As Variant, outArr As Variant, dbArr As Variant, custArr As Variant, j As Long, i As Long)
Dim k As Long

'
' Start of DA Sheet
'
daArr(j, 1) = outArr(j, 1)
daArr(j, 2) = outArr(j, 4)
daArr(j, 3) = outArr(j, 5)
daArr(j, 4) = outArr(j, 11)
daArr(j, 5) = outArr(j, 7)

'v4.8
k = 1
daArr(j, 6) = ""
For k = LBound(dbArr) To UBound(dbArr)
    If dbArr(k, 4) = outArr(j, 1) Then
    daArr(j, 6) = dbArr(k, 27)
    Exit For
    Else
    End If
Next k



daArr(j, 7) = outArr(j, 6)
daArr(j, 8) = outArr(j, 10)

'v4.2
daArr(j, 9) = 0
k = 1
For k = LBound(custArr) To UBound(custArr)
    If custArr(k, 4) = dbArr(i, 15) Then
    daArr(j, 9) = custArr(k, 5)
    Exit For
    Else
    End If
Next k

daArr(j, 10) = outArr(j, 9)
'DRAFT 2
If outArr(j, 25) = 0 Then
daArr(j, 11) = 0
Else
daArr(j, 11) = outArr(j, 95) / outArr(j, 25)
End If
'END DRAFT2
daArr(j, 12) = outArr(j, 95)
daArr(j, 13) = outArr(j, 96)
daArr(j, 14) = outArr(j, 101)
daArr(j, 15) = outArr(j, 102)
daArr(j, 16) = outArr(j, 18)
daArr(j, 17) = outArr(j, 19)
daArr(j, 18) = outArr(j, 71)
daArr(j, 19) = outArr(j, 103)
daArr(j, 20) = dbArr(i, 49)
daArr(j, 21) = ""
daArr(j, 22) = ""
daArr(j, 23) = outArr(j, 25)
daArr(j, 24) = outArr(j, 104)
daArr(j, 25) = outArr(j, 106)
'END DRAFT2


End Sub

Sub Generate_Commissionsheet(com1Arr As Variant, com2Arr As Variant, com3Arr As Variant, com4Arr As Variant, com5Arr As Variant, com6Arr As Variant, _
com7Arr As Variant, com8Arr As Variant, com9Arr As Variant, com10Arr As Variant, com11Arr As Variant, com12Arr As Variant, com13Arr As Variant, com14Arr As Variant, _
com15Arr As Variant, com16Arr As Variant, com17Arr As Variant, com18Arr As Variant, com19Arr As Variant, outArr As Variant, dbArr As Variant, custArr As Variant, i As Long, j As Long)

Dim k As Long



'
' Start of Commission Sheet
'
'DRAFT2
com1Arr(j, 1) = outArr(j, 1)
com1Arr(j, 2) = outArr(j, 4)
com1Arr(j, 3) = outArr(j, 11) 'DRAFT2
com1Arr(j, 4) = outArr(j, 7)
com1Arr(j, 5) = outArr(j, 9)

'v4.2
com1Arr(j, 6) = 0
k = 1
For k = LBound(custArr) To UBound(custArr)
    If custArr(k, 4) = dbArr(i, 15) Then
    com1Arr(j, 6) = custArr(k, 5)
    Exit For
    Else
    End If
Next k

com1Arr(j, 7) = outArr(j, 94)
com1Arr(j, 8) = outArr(j, 5)
com1Arr(j, 9) = outArr(j, 105)
com1Arr(j, 10) = outArr(j, 104)
com1Arr(j, 11) = "NA"
'com1Arr(j, 11) = dbArr(i, 78) 'DRAFT2
'If dbArr(i, 78) = "" Then com1Arr(j, 11) = "No" 'DRAFT2
com2Arr(j, 1) = outArr(j, 25)
com3Arr(j, 1) = outArr(j, 106)
com4Arr(j, 1) = outArr(j, 92)
com4Arr(j, 2) = outArr(j, 95)
'END DRAFT2

'Feet Data
If dbArr(i, 12) = "Paper Pallet Ready Made" _
                    Or dbArr(i, 12) = "Multichannel Pallet" Then
                        com5Arr(j, 1) = outArr(j, 15)
                        com6Arr(j, 1) = outArr(j, 16)
                        com7Arr(j, 1) = outArr(j, 17)
                    Else
                    End If

If dbArr(i, 12) = "Paper Pallet Foot" _
                    Or dbArr(i, 12) = "Paper Pallet Replacement Foot" _
                    Or dbArr(i, 12) = "Multichannel Foot" _
                    Or dbArr(i, 12) = "Multichannel Replacement Foot" _
                    Or dbArr(i, 12) = "Multichannel Pallet" Then

                        If outArr(j, 15) > 0 Then com5Arr(j, 1) = 1
                        If outArr(j, 16) > 0 Then com6Arr(j, 1) = 1
                        If outArr(j, 17) > 0 Then com7Arr(j, 1) = 1

                    Else
                    End If
                    

'Paper Data
com8Arr(j, 1) = outArr(j, 110)
com9Arr(j, 1) = outArr(j, 111)
com10Arr(j, 1) = outArr(j, 112)
com11Arr(j, 1) = outArr(j, 113)
com12Arr(j, 1) = outArr(j, 114)
com13Arr(j, 1) = outArr(j, 115)
com14Arr(j, 1) = outArr(j, 116)
com15Arr(j, 1) = outArr(j, 117)
com16Arr(j, 1) = outArr(j, 118)
com17Arr(j, 1) = outArr(j, 119)
com18Arr(j, 1) = outArr(j, 120)
com19Arr(j, 1) = outArr(j, 121)



End Sub

Sub Massupdate_YearlyForecast()
    Dim dbSheet As Worksheet
    Dim impDBsheet As Worksheet

    Dim openPricefile As Long
    Dim importfile As Variant
    Dim importwb As Workbook
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51
    Const temp_import_item As Long = 73

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim m As Long
    Dim firstemptyDBrow As Long
    Dim firstemptyrow As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim number As Long
    Dim err As Long
    Dim name As String
    Dim textline As String
    Dim row As Long
    Dim numberofArticles As Long

    Dim rngDB As Range
    Dim rngImpDB As Range
    Dim rngImpItem As Range
    
    Dim dbArr() As Variant
    Dim impDBArr() As Variant
    Dim impItemArr() As Variant
    Dim impInfoArr() As Variant
    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

' Open pricefile
openPricefile = 0
importfile = Application.GetOpenFilename(FileFilter:="Excel Files (*.XL*), *.XL*", Title:="Select Yearly Forecast File")

If importfile = False Then
GoTo endXLupdate
Else
End If

Set importwb = Workbooks.Open(importfile)
openPricefile = 1

' Set Input Sheet Names
Set impDBsheet = importwb.Sheets("Forecast")
Set rngImpDB = impDBsheet.Range("A1:C300000")
impDBArr = rngImpDB.value

' Set Output Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set rngDB = dbSheet.Range("A1:BZ10000")
dbArr = rngDB.value


' Close input file
If openPricefile Then
    importwb.Close savechanges:=False
End If


'First empty DB Row
i = 1
firstemptyDBrow = 0
firstemptyrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Populate update array
i = 1
numberofArticles = 0
count = 0
found = 0
For i = 1 To firstemptyrow
    If dbArr(i, 1) = Item Then
        numberofArticles = numberofArticles + 1
        j = 1
        found = 0
        For j = 1 To 300000
            If dbArr(i, 4) = impDBArr(j, 1) Then
                
                'Forecast has to be a number and cannot be empty
                If IsNumeric(impDBArr(j, 2)) And impDBArr(j, 2) <> "" Then
                    dbArr(i, 25) = impDBArr(j, 2)
                    count = count + 1
                    found = 1
                Else
                End If
             Else
             End If
             If found = 1 Then Exit For
        Next j
    
    Else
    End If

Next i

If MsgBox("Forecast for " & count & " of " & numberofArticles & " items found" & vbNewLine _
            & "Do you want to massupdate ALL these forecasts?" & vbNewLine _
            & "Operation cannot be undone!", vbYesNo, "Yearly Forecast Update") = vbNo Then GoTo endXLupdate
    
'Write the database to sheet
rngDB = dbArr

' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

'Reload Items
Items_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub

Sub Massupdate_AOQ()
    Dim dbSheet As Worksheet
    Dim impDBsheet As Worksheet

    Dim openPricefile As Long
    Dim importfile As Variant
    Dim importwb As Workbook
    
    Const Supplier_Info As Long = 1
    Const IKEA_Info As Long = 2
    Const Validity As Long = 3
    Const Sales_Currency As Long = 4
    Const Comparision_Currency As Long = 5
    Const Exchange_Rate As Long = 6
    Const Version_Info As Long = 7
    Const Customers As Long = 8
    Const Papers As Long = 9
    Const Flute_table As Long = 10
    Const Starch_Cost As Long = 11
    Const CB_Composition As Long = 12
    Const Purchased_Sheets As Long = 13
    Const Corrugation_cost As Long = 14
    Const Converters_A As Long = 15
    Const Packaging_Cost As Long = 16
    Const Other_cost As Long = 17
    Const profit As Long = 18
    Const Volume_Discounts As Long = 19
    Const Contracted_Volume As Long = 20
    Const Pallet_cost As Long = 21
    Const Tool_cost As Long = 22
    Const Transport_cost As Long = 23
    Const Foot_180x90 As Long = 24
    Const Foot_140x90 As Long = 25
    Const Foot_90x90 As Long = 26
    Const Replacement_Foot_180x90 As Long = 27
    Const Replacement_Foot_140x90 As Long = 28
    Const Replacement_Foot_90x90 As Long = 29
    Const Item As Long = 30
    Const List_Currency As Long = 31
    Const List_Tradename As Long = 32
    Const List_IKEA_Quality As Long = 33
    Const List_Flutes As Long = 34
    Const List_MSS_Status As Long = 35
    Const List_Conversion_Process As Long = 36
    Const List_Packaging_Style As Long = 37
    Const List_Volume_Discounts As Long = 38
    Const List_Pallet_Styles As Long = 39
    Const List_Tool_Styles As Long = 40
    Const List_Article_Group_Name As Long = 41
    Const List_Colors As Long = 42
    Const List_Yes_No As Long = 43
    Const List_Outs As Long = 44
    Const DB_Version As Long = 45
    Const DB_Updated As Long = 46
    Const Other_Boards As Long = 47
    Const Joined_Boards As Long = 48
    Const List_Board_Type As Long = 49
    Const List_Color_Combinations As Long = 50
    Const List_Fillingrate_Unit As Long = 51
    Const temp_import_item As Long = 73

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim m As Long
    Dim firstemptyDBrow As Long
    Dim firstemptyrow As Long
    Dim found As Long
    Dim count As Long
    Dim value As Double
    Dim number As Long
    Dim err As Long
    Dim name As String
    Dim textline As String
    Dim row As Long
    Dim numberofArticles As Long

    Dim rngDB As Range
    Dim rngImpDB As Range
    Dim rngImpItem As Range
    
    Dim dbArr() As Variant
    Dim impDBArr() As Variant
    Dim impItemArr() As Variant
    Dim impInfoArr() As Variant
    
' Stop updating
Application.EnableCancelKey = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
Application.EnableEvents = False

' Open pricefile
openPricefile = 0
importfile = Application.GetOpenFilename(FileFilter:="Excel Files (*.XL*), *.XL*", Title:="Select Yearly Forecast File")

If importfile = False Then
GoTo endXLupdate
Else
End If

Set importwb = Workbooks.Open(importfile)
openPricefile = 1

' Set Input Sheet Names
Set impDBsheet = importwb.Sheets("Forecast")
Set rngImpDB = impDBsheet.Range("A1:C300000")
impDBArr = rngImpDB.value

' Set Output Sheet Names
Set dbSheet = ThisWorkbook.Sheets("DB")
Set rngDB = dbSheet.Range("A1:BZ10000")
dbArr = rngDB.value


' Close input file
If openPricefile Then
    importwb.Close savechanges:=False
End If


'First empty DB Row
i = 1
firstemptyDBrow = 0
firstemptyrow = 0
For i = LBound(dbArr) To UBound(dbArr)
    If dbArr(i, 1) = "" Then
        firstemptyrow = i
        Exit For
    Else
    End If
Next i


'Populate update array
i = 1
numberofArticles = 0
count = 0
found = 0
err = 0
For i = 1 To firstemptyrow
    If dbArr(i, 1) = Item Then
        numberofArticles = numberofArticles + 1
        j = 1
        found = 0
        For j = 1 To 300000
            If dbArr(i, 4) = impDBArr(j, 1) Then
                
                'Forecast has to be a number and cannot be empty
                If IsNumeric(impDBArr(j, 2)) And impDBArr(j, 2) <> "" Then
                    If impDBArr(j, 2) = 0 Then
                    err = err + 1
                    Else
                    dbArr(i, 26) = impDBArr(j, 3)
                    count = count + 1
                    found = 1
                    End If
                Else
                End If
             Else
             End If
             If found = 1 Then Exit For
        Next j
    
    Else
    End If

Next i

If err > 0 Then
MsgBox "There are " & err & " items with 0 in AOQ " & vbNewLine _
            & "For these items the current AOQ will be kept." & vbNewLine _
            & "Otherwise price calculation will not work or be wrong", vbOKOnly, "AOQ Update"
Else
End If

If MsgBox("AOQ for " & count & " of " & numberofArticles & " items found" & vbNewLine _
            & "Do you want to massupdate ALL these AOQ's?" & vbNewLine _
            & "Operation cannot be undone!", vbYesNo, "AOQ Update") = vbNo Then GoTo endXLupdate
    
'Write the database to sheet
rngDB = dbArr

' Clean DB: Set all cells to "General"
rngDB.NumberFormat = General
' End cleaning DB

'Reload Items
Items_Load

endXLupdate:
' Start updating
Application.EnableCancelKey = True
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic
End Sub









Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
JoinedBoards_Load
End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Items_Load
End Sub


Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Import_Items_Load
End Sub


Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Create_Items_Load
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub


Private Sub Worksheet_Activate()
Info_Load
End Sub

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Currency_Load
End Sub
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Packaging_Load
End Sub
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Pallets_Load
End Sub
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Tools_Load
End Sub
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Transport_Load
End Sub
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
OtherCosts_Load
End Sub
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
PPfoot_Load
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Customers_Load
End Sub
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
CorrugatedSheets_Load
End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Papers_Load
End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Compositions_Load
End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Corrugator_Load
End Sub
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Converters_Load
End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
OtherBoards_Load
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()


'Dim wSheet As Worksheet
'For Each wSheet In Worksheets
'    wSheet.Protect Password:="pekka", _
'        UserInterFaceOnly:=True, AllowSorting:=True, AllowFiltering:=True
'Next wSheet

Generate

End Sub


INQUEST-PP=macro
