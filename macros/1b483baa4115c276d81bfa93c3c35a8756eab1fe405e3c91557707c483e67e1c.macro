Attribute VB_Name = "ModUtily"
Option Explicit

Public Const gksSepDecimale = "D"
Public Const gksData_EstensioneFile = ".txt.xls"
Public Const gksSheet_runmacro = "runmacro"
Public Const gksRunMacroValue = "###{runmacro}###"



'#If Win64 Then
'    Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As LongPtr) As Long
'#Else
'    Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
'#End If

'Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#If Win64 Then
  Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByRef pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserve As Long, ByRef lpfnCB As LongPtr) As LongPtr
  Private Declare PtrSafe Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As LongPtr
#Else
    Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#End If



Public Function MettiBarra(percorso As String, nomefile As String) As String
  
  If Right(percorso, 1) = "\" Then
        If Left(nomefile, 1) = "\" Then
            MettiBarra = percorso & Mid(nomefile, 2)
        Else
            MettiBarra = percorso & nomefile
        End If
  Else
        If Left(nomefile, 1) = "\" Then
            MettiBarra = percorso & nomefile
        Else
            MettiBarra = percorso & "\" & nomefile
        End If
    End If
End Function


Public Function OpenFileXLS_Text(ByVal sFileNameWithPath As String) As Boolean
Dim Worbk As Workbook
    
    On Error Resume Next
    Set Worbk = Workbooks(sFileNameWithPath)
    On Error GoTo 0
    On Error GoTo Errore
    
    If Worbk Is Nothing Then
        'vedere se settare i separatori decimali e migliaia fissi...
        'al momento valcono quelli di sistema...
        If (GetRightExcelVersion < 110) Then
            'nelle verioni inferiori a Excel 2003 (11.0) non |fffd| supportato l'import degli UTF-8..
            Workbooks.OpenText sFileNameWithPath, , , xlDelimited, xlTextQualifierDoubleQuote, False, True
'        Else
'            '"65001" sta per UFT-8..
'            Workbooks.OpenText sFileNameWithPath, "65001", , xlDelimited, xlTextQualifierDoubleQuote, False, True
'        End If
        ElseIf (GetRightExcelVersion = 110) Then
            '"65001" sta per UFT-8..
            Workbooks.OpenText sFileNameWithPath, "65001", , xlDelimited, xlTextQualifierDoubleQuote, False, True
        Else
            'Excel 2007
            With ActiveSheet.QueryTables.Add(Connection:="TEXT;" & sFileNameWithPath, _
                Destination:=Range("$A$1"))
                .Name = ""
                .FieldNames = True
                .RowNumbers = False
                .FillAdjacentFormulas = False
                .PreserveFormatting = True
                .RefreshOnFileOpen = False
                .RefreshStyle = xlInsertDeleteCells
                .SavePassword = False
                .SaveData = True
                .AdjustColumnWidth = True
                .RefreshPeriod = 0
                .TextFilePromptOnRefresh = False
                .TextFilePlatform = 65001
                .TextFileStartRow = 1
                .TextFileParseType = xlDelimited
                .TextFileTextQualifier = xlTextQualifierDoubleQuote
                .TextFileConsecutiveDelimiter = False
                .TextFileTabDelimiter = True
                .TextFileSemicolonDelimiter = False
                .TextFileCommaDelimiter = False
                .TextFileSpaceDelimiter = False
                .TextFileColumnDataTypes = Array(1, 1, 1)
                .TextFileTrailingMinusNumbers = True
                .Refresh BackgroundQuery:=False
            End With
        End If
    Else
        Set Worbk = Nothing
    End If
    
    OpenFileXLS_Text = True
    
    Exit Function
Errore:
    If DownloadFile(sFileNameWithPath) Then
        OpenFileXLS_Text = True
    Else
        OpenFileXLS_Text = False
    End If
End Function

Public Function GetRightFormatNumber(ByVal sMyNum As String, ByRef sFormat As String) As Double
Dim lPos As Long
    
    On Error Resume Next
    
    sFormat = ""
    
    sMyNum = UCase$(sMyNum)
    If (Left$(Trim$(sMyNum), 1) = "'") Then
        sMyNum = Right$(sMyNum, Len(sMyNum) - 1)
    End If
    
    lPos = InStr(1, sMyNum, gksSepDecimale, vbTextCompare)
    If (lPos > 0) Then
        sFormat = "0." & String(Len(Mid$(sMyNum, lPos + 1)), "0")
        'GetRightFormatNumber = Format$(MyCdbl(sMyNum), sFormat)
        GetRightFormatNumber = MyCdbl(sMyNum)
    Else
        sFormat = ""
        GetRightFormatNumber = Val(sMyNum)
    End If
    
    'sMyNum = Replace(UCase$(sMyNum), gksSepDecimale, sVirgola, , , vbTextCompare)
    
End Function



Public Function MyCdbl(ByVal sValue As String) As Double
Dim i As Long
Dim sTmp As String
Dim sChar As String
    
    On Error GoTo Errore
    
    For i = 1 To Len(sValue)
        sChar = Mid$(sValue, i, 1)
        If (sChar = gksSepDecimale) Then
            sTmp = sTmp & "."
        Else
            sTmp = sTmp & sChar
        End If
    Next i
    
    MyCdbl = Val(sTmp)
    Exit Function
Errore:
    MyCdbl = 0
End Function



Public Function GetDateFromString(ByVal sTmpDate As String, ByVal sFormat As String) As String
Dim lLenFormat As Long
Dim i As Long
Dim sChar As String
Dim sDay As String
Dim sMonth As String
Dim sYear As String
Dim sValue As String
    
    On Error GoTo Errore
    
    sTmpDate = Replace(sTmpDate, "'", "", , , vbBinaryCompare)
    sFormat = UCase$(sFormat)
    lLenFormat = Len(sFormat)
    
    If (Len(Trim$(sTmpDate)) <= 0) Then
        GetDateFromString = ""
    Else
        If (Len(Trim$(sFormat)) <= 0) Then
            GetDateFromString = sTmpDate
        Else
            If (lLenFormat <> Len(sTmpDate)) Then
                GetDateFromString = sTmpDate
            Else
                For i = 1 To lLenFormat
                    sChar = Mid$(sFormat, i, 1)
                    sValue = Mid$(sTmpDate, i, 1)
                    Select Case sChar
                    Case "D"
                        sDay = sDay & sValue
                    Case "M"
                        sMonth = sMonth & sValue
                    Case "Y"
                        sYear = sYear & sValue
                    End Select
                Next i
                
                GetDateFromString = FormatDateTime(DateSerial(Val(sYear), Val(sMonth), Val(sDay)), vbShortDate)
            End If
        End If
    End If
    
    Exit Function
Errore:
    GetDateFromString = sTmpDate
End Function



Public Function GetDateFromString_Date(ByVal sTmpDate As String, ByVal sFormat As String) As Date
Dim lLenFormat As Long
Dim i As Long
Dim sChar As String
Dim sDay As String
Dim sMonth As String
Dim sYear As String
Dim sValue As String
Dim dtMyDate As Date
    
    On Error GoTo Errore
    
    dtMyDate = DateSerial(2001, 9, 11)
    
    sTmpDate = Replace(sTmpDate, "'", "", , , vbBinaryCompare)
    sFormat = UCase$(sFormat)
    lLenFormat = Len(sFormat)
    
    If (Len(Trim$(sTmpDate)) > 0) Then
        If (Len(Trim$(sFormat)) > 0) Then
            If (lLenFormat = Len(sTmpDate)) Then
                For i = 1 To lLenFormat
                    sChar = Mid$(sFormat, i, 1)
                    sValue = Mid$(sTmpDate, i, 1)
                    Select Case sChar
                    Case "D"
                        sDay = sDay & sValue
                    Case "M"
                        sMonth = sMonth & sValue
                    Case "Y"
                        sYear = sYear & sValue
                    End Select
                Next i
                
                dtMyDate = DateSerial(Val(sYear), Val(sMonth), Val(sDay))
            End If
        End If
    End If
    
    GetDateFromString_Date = dtMyDate
    
    Exit Function
Errore:
    GetDateFromString_Date = DateSerial(2001, 9, 11)
End Function



Public Function ExistsWorkSheet(ByRef MyWB As Workbook, ByVal sNameWS As String) As Boolean
Dim vValue As Variant
    On Error GoTo Errore
    vValue = MyWB.Worksheets(sNameWS).Cells(1, 1).Value
    ExistsWorkSheet = True
    Exit Function
Errore:
    ExistsWorkSheet = False
End Function



Public Function GetRightExcelVersion() As Long
Dim sTmp1 As String
    
    On Error Resume Next
    
    sTmp1 = Application.Version
    sTmp1 = Left$(Format$(Val(Trim$(Replace(sTmp1, ".", "", , , vbTextCompare))), "000"), 3)
    GetRightExcelVersion = Val(sTmp1)
    
End Function



Public Function GetLastRow(ByRef wks As Worksheet, ByVal lCol As Long) As Long
    On Error GoTo Errore
    GetLastRow = wks.Cells(65536, lCol).End(xlUp).Row
    Exit Function
Errore:
    GetLastRow = -1
End Function

Public Function GetLastCol(ByRef wks As Worksheet, ByVal lRow As Long) As Long
    On Error GoTo Errore
    GetLastCol = wks.Cells(lRow, 256).End(xlToLeft).Column
    Exit Function
Errore:
    GetLastCol = -1
End Function

Public Function IsMaxRowSheetReached(ByVal lRow As Long) As Boolean
    If (Val(Left$(Trim$(Application.Version), 2)) < gklMinExcelVersionWithNoRowsLimit) Then
        IsMaxRowSheetReached = (lRow > gklMaxSheetRows)
    End If
End Function

Public Function DownloadFile(pUrl As String) As Boolean
Dim returnValue
Dim vFileName As String
Dim i, vPos As Integer

'pUrl = "http://cscapppda001.it.emea.csc.com/st3kwebSVILRS/v_tmp_444690_3.txt.xls"
vPos = 0

For i = 1 To Len(pUrl)
    If Mid(pUrl, i, 1) = "/" Then
        vPos = i
    End If
Next i

vFileName = TempPath & Mid(pUrl, vPos + 1)
returnValue = URLDownloadToFile(0, pUrl, vFileName, 0, 0)
If returnValue = 0 Then
    DownloadFile = True
    Workbooks.Open vFileName
Else
    DownloadFile = False
End If
End Function

Private Function TempPath() As String
  Const MaxPathLen = 2048 ' Max length of the path, just as big as possible
 
  Dim FolderName As String ' Name of the folder
  Dim ReturnVar As Long ' Return Value
 
  FolderName = String(MaxPathLen, 0)
  ReturnVar = GetTempPath(MaxPathLen, FolderName)
 
  If ReturnVar <> 0 Then
    TempPath = Left(FolderName, InStr(FolderName, Chr(0)) - 1)
  Else
    TempPath = vbNullString
  End If
End Function
Attribute VB_Name = "Moddec"
Option Explicit

Public Const gklMaxSheetRows = 65536
Public Const gklMaxDataRows = 65536 - 3

Public Const gklMinExcelVersionWithNoRowsLimit = 12

Attribute VB_Name = "RunMacro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Workbook_Open()
    Call Go
End Sub



Public Sub Go()
Dim sNomeFileDati As String
Dim sPathWB As String
Dim sFileName As String
Dim lTotRows As Long
Dim lResMaxRows As Long

Dim lastDotPos, i As Integer
    On Error Resume Next
    
    If (ModUtily.ExistsWorkSheet(ThisWorkbook, gksSheet_runmacro) = False) Then
        Exit Sub
    End If
    
    If (ThisWorkbook.Worksheets(gksSheet_runmacro).Cells(2, 1).Value = gksRunMacroValue) Then
        frmWait.Show vbModeless
        
        frmWait.SetMsg "Initializing..."
        
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        
        sPathWB = ThisWorkbook.Path
        sFileName = ThisWorkbook.Name
        
        ' #######################################################
        ' Modifica di Roberto Rigliaco (nome file case sensitive)
        Windows(ThisWorkbook.Name).Visible = True
        lastDotPos = 0
        For i = 1 To Len(sFileName)
            If Mid(sFileName, i, 1) = "." Then
                lastDotPos = i
            End If
        Next i
        sFileName = Mid(sFileName, 1, lastDotPos) & LCase(Mid(sFileName, lastDotPos + 1))
        sNomeFileDati = Mid(sFileName, 1, lastDotPos - 1) & gksData_EstensioneFile
        
        If (GetRightExcelVersion < 120) And LCase(Mid(sFileName, lastDotPos + 1)) = "tmp" Then
            MsgBox "Excel version is not compatible with user choice, check the version installed on the client", vbExclamation
            'frmWait.Hide
            ThisWorkbook.Close False
            Exit Sub
        End If
        
        'apriamo il file dati prodotto da ricerca e sintesi...
        'sNomeFileDati = LCase$(Replace(UCase$(sFileName), UCase$(".XLS"), gksData_EstensioneFile, , , vbTextCompare))
        
        ' Fine modifica
        ' #######################################################
        'MsgBox sPathWB
        'MsgBox "Apro " + MettiBarra(sPathWB, sNomeFileDati)
        If (ModUtily.OpenFileXLS_Text(MettiBarra(sPathWB, sNomeFileDati)) = False) Then
            MsgBox "Data file not found: " & MettiBarra(sPathWB, sNomeFileDati), vbCritical + vbOKOnly, "Warning..."
            GoTo Errore
        End If
        
        
        lTotRows = Val(Workbooks(sNomeFileDati).Worksheets(1).Cells(1, 1).Value)
        
        lResMaxRows = vbYes
        If (IsMaxRowSheetReached(lTotRows + 4) = True) Then
            lResMaxRows = MsgBox("The number of data rows is greater than " & Trim$(Str(gklMaxDataRows)) & ". Some data will be lost. Are you sure you want to continue?", vbYesNo + vbQuestion, "Warning...")
        End If
        
        If (lResMaxRows = vbYes) Then
        
            'Workbooks(sNomeFileDati).Worksheets(1).Copy Before:=ThisWorkbook.Worksheets(1)
            Workbooks(sNomeFileDati).Activate
            'Windows(sNomeFileDati).Activate
            Cells.Select
            Selection.Copy
            'Windows(sFileName).Activate
            Workbooks(sFileName).Activate
            Cells.Select
            
            ThisWorkbook.Worksheets(1).Paste
            
            'eliminiamo il contenuto della clipboard...
            Application.CutCopyMode = False
            
            ThisWorkbook.Worksheets(1).Cells(1, 1).Select
            
            Application.DisplayAlerts = False
            Workbooks(sNomeFileDati).Close False
            Application.DisplayAlerts = True
            '-----------------------------------------
            
            Call FormatFile
            
            Application.DisplayAlerts = False
            ThisWorkbook.Worksheets(gksSheet_runmacro).Delete
            ThisWorkbook.Worksheets(1).Name = "Report"
            Application.DisplayAlerts = True
        Else
            Application.DisplayAlerts = False
            Workbooks(sNomeFileDati).Close False
            Application.DisplayAlerts = True
        End If
        
        
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        
        frmWait.Hide
    End If
    
    Exit Sub
Errore:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    frmWait.Hide
End Sub



Public Sub FormatFile()

Dim vCols As Long
Dim vRows As Long
Dim n As Long
Dim r As Long
Dim c As Long
Dim sFormat As String
Dim dTmpNum As Double
Dim sTmpDate As String
Dim sDateFormat As String
Dim sTmp1 As String
Dim lMemR As Long
Dim lTotRecords As Long
Dim lRealTotRecords As Long

' Note: di default la prima riga contiene i dati relativi alle colonne ed ai
' record estratti: A1 contiene il numero di record, B1 il numero di colonne
' La riga 2 contiene una stringa di riconoscimento utilizzata perch|fffd| la macro
' venga eseguita solo alla prima apertura del foglio (dopo che il file viene
' salvato la macro di formattazione non viene pi|fffd| eseguita in automatico).
' La riga 3 contiene il tipo dato in modo da differenziarne la formattazione
' a piacimento: 1 alfanumerico, 2 numerico e 3 data.
    
    On Error GoTo Errore
    
    lMemR = 0
    
    With ThisWorkbook.Worksheets(1)
        'queste righe qui sotto servono perch|fffd| Excel 2000/2002
        'non legge i file di testo codificati in UTF8
        'pertanto ci potrebbero essere 3 caratteri all'inizio del file di testo
        'e presenti nella prima cella che non c'entrano nulla e quindi sono da togliere..
        sTmp1 = .Cells(1, 1).Value
        sTmp1 = Trim$(sTmp1)
        If (Len(sTmp1) > 3) Then
            If (IsNumeric(Left$(sTmp1, 3)) = False) Then
                sTmp1 = Mid$(sTmp1, 4)
            End If
        End If
        '--------------------------------
        
        vRows = Val(sTmp1) 'A1
        vCols = .Cells(1, 2).Value 'B1
        sDateFormat = .Cells(1, 7).Value 'G1
        
        For n = 1 To vCols
            .Cells(3, n).Value = .Cells(3, n).Value
        Next n
        
        lTotRecords = vRows + 4
        lRealTotRecords = lTotRecords
        
        If (ModUtily.IsMaxRowSheetReached(lTotRecords) = True) Then
            lTotRecords = gklMaxSheetRows
        End If
        
        For r = 4 To lTotRecords
            For c = 1 To vCols
                If r = 4 Then
                    .Cells(r, c).Font.Bold = True
                Else
                    Select Case .Cells(3, c).Value
                    Case "2"
                        If (Len(Trim$(.Cells(r, c).Value)) > 0) Then
                            dTmpNum = GetRightFormatNumber(.Cells(r, c).Value, sFormat)
                            .Cells(r, c).NumberFormat = sFormat
                            .Cells(r, c).Value = dTmpNum
                        End If
                    Case "3"
                        'le date vanno formattate mantenendo le impostazioni di sistema...
                        sTmpDate = .Cells(r, c).Value
                        If (Len(Trim$(sTmpDate)) > 1) Then
                            '.Cells(r, c).Value = "'" & GetDateFromString(sTmpDate, sDateFormat)
                            .Cells(r, c).Value = GetDateFromString_Date(sTmpDate, sDateFormat)
                        Else
                            .Cells(r, c).Value = ""
                        End If
                        .Cells(r, c).HorizontalAlignment = xlRight
                    Case Else
                        .Cells(r, c).Value = .Cells(r, c).Value
                    End Select
                End If
            Next c
            
            If (lMemR >= 500) Then
                frmWait.SetMsg "Reading data... " & Str(r - 3) & " / " & Trim$(Str(lTotRecords - 3))
                lMemR = 0
            End If
            
            lMemR = lMemR + 1
        Next r
        
        frmWait.SetMsg "Reading data... " & Str(lTotRecords - 3) & " / " & Trim$(Str(lTotRecords - 3))
        
        .Cells(3, 1).EntireRow.Delete
        .Cells(2, 1).EntireRow.Delete
        .Cells(1, 1).EntireRow.Delete
        .Columns("A:IV").AutoFit
        .Cells(1, 1).Activate
        
        If (lRealTotRecords > lTotRecords) Then
            MsgBox "Too many records. Some records have been lost because the maximum records number supported by this Excel version is: " & Trim$(Str(gklMaxDataRows)), vbInformation + vbOKOnly, "Warning..."
        End If
    End With
    
    
    Exit Sub
Errore:
    MsgBox "Formatting data error. The file data format could be unreadable from this Excel version", vbCritical + vbOKOnly, "Warning..."
End Sub
Attribute VB_Name = "frmWait"
Attribute VB_Base = "0{5DDE4E2B-7F51-4529-8E49-987F8D2DC9EF}{DAEC3089-4216-4656-BC29-29C56667D27F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public Sub SetMsg(ByVal sMsg As String)
    lblMsg.Caption = sMsg
    Me.Repaint
End Sub


INQUEST-PP=macro
