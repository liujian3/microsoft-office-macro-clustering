Attribute VB_Name = "Module1"
Option Explicit
Public ExpDataFolder As String, ResultsFolder As String
Public WildType As Integer, NoCall As Integer, LowSignal As Integer, _
Heterozygote As Integer, Homozygote As Integer, HomHet As Integer, auxRow As Integer
Public FindExceptions As Boolean
Public RRC As Boolean
Dim SamplesAnalyzed As Integer
Dim Analyzed As Boolean
Sub GetFolder()
Dim shura As String
ExpDataFolder = "C:\"
ResultsFolder = "C:\"
If Dir("C:\Program Files\NanoGen\Utilities\NanoGen.ini") <> "" Then
Open "C:\Program Files\NanoGen\Utilities\NanoGen.ini" For Input As #1
Do
Line Input #1, shura
If InStr(1, shura, "Tay Sachs Exported data folder") > 0 Then
ExpDataFolder = Right(shura, Len(shura) - 32)
End If
If InStr(1, shura, "Tay Sachs Results folder") > 0 Then
ResultsFolder = Right(shura, Len(shura) - 32)
End If
If InStr(1, shura, "Find Exceptions") > 0 _
And InStr(1, shura, "TRUE") > 0 Then
FindExceptions = True
End If
If InStr(1, shura, "Special Features") > 0 Then
RRC = True
End If
Loop Until EOF(1)
Close #1
End If
End Sub
Sub GetRepText()

Dim shura As String

If Dir("C:\Program Files\NanoGen\Utilities\Softov.ini") <> "" Then
Open "C:\Program Files\NanoGen\Utilities\Softov.ini" For Input As #1
Do
Line Input #1, shura
If InStr(1, shura, "WildType") > 0 Then
WildType = Right(shura, Len(shura) - 18)
End If
If InStr(1, shura, "LowSignal") > 0 Then
LowSignal = Right(shura, Len(shura) - 18)
End If
If InStr(1, shura, "NoCall") > 0 Then
NoCall = Right(shura, Len(shura) - 18)
End If
If InStr(1, shura, "Heterozygote") > 0 Then
Heterozygote = Right(shura, Len(shura) - 18)
End If
If InStr(1, shura, "HOM/HET") > 0 Then
HomHet = Right(shura, Len(shura) - 18)
End If
If InStr(1, shura, "Homozygote") > 0 Then
Homozygote = Right(shura, Len(shura) - 18)
End If
Loop Until EOF(1)
Close #1
'Debug.Print WildType, LowSignal, NoCall, Heterozygote, Homozygote, HomHet
End If
End Sub
Public Function GenAsInt(SoftovCall As String)
If SoftovCall = "LS" Then
GenAsInt = LowSignal
Else
If SoftovCall = "-" Then
GenAsInt = WildType
Else
If SoftovCall = "HET" Then
GenAsInt = Heterozygote
Else
If SoftovCall = "HOM" Then
GenAsInt = Homozygote
Else
If SoftovCall = "HOM/HET" Then
GenAsInt = HomHet
Else
If SoftovCall = "NC" Then
GenAsInt = NoCall
End If
End If
End If
End If
End If
End If
End Function
Sub ImportData()
'Select exported file
Dim fn As Variant
Dim WbName As String, suggestion As String, AppName As String, LastCell As String
Dim FileName As Variant
Dim RowNumber As Integer, ARB As Integer, ColumnNumber As Integer, ContentColumn As Integer


If Application.Version > 11 Then
    ActiveWorkbook.CheckCompatibility = False
End If
Application.StatusBar = "NanoGen Tay Sachs"
Application.ScreenUpdating = False
AppName = ActiveWorkbook.Name
Sheets("RawData").Visible = True
Sheets("RawData").Select
Range("A1").Select
'Sheets(1).CommandButton1.Visible = False
If Dir("C:\Program Files\NanoGen\Utilities\NanoGen.ini") <> "" Then
ChDir ExpDataFolder
End If
'ChDir ("C:\Documents and Settings\martine\Desktop\Connexin Results")
    fn = Application.GetOpenFilename("Excel-files,*.xls", _
        1, "Select One File To Open", , False)
    If TypeName(fn) = "Boolean" Then Exit Sub
    ' the user didn't select a file
'Debug.Print "Selected file: " & fn
'code to isolate filename
WbName = fn
Do
WbName = Right(WbName, Len(WbName) - (InStr(1, WbName, "\")))
'Debug.Print WbName
Loop Until InStr(1, WbName, "\") = 0
'Get data from file selected
    Workbooks.Open FileName:=fn
For ColumnNumber = 1 To 32
    If Cells(1, ColumnNumber).Value <> "" Then
    LastCell = Cells(1, ColumnNumber).Value
    End If
    Next ColumnNumber
    If LastCell <> "(Mix 4 Scan) Image Array" Then
    MsgBox "This is NOT Tay Sachs exported data file.", vbCritical, "Invalid exported data file"
    Windows(AppName).Activate
    Sheets("RawData").Visible = False
    Windows(WbName).Close
    Exit Sub
    End If
    For ARB = 100 To 400 Step 100
    If Cells(ARB, 2).Value <> ARB - 2 Then
    MsgBox "This is NOT Tay Sachs exported data file or non-activated pads have not been exported", vbCritical, "Invalid exported data file"
    Windows(AppName).Activate
    Sheets("RawData").Visible = False
    Windows(WbName).Close
    Exit Sub
    End If
    Next ARB
    'File check until here
    Range("A1:Q409").Select
    Selection.Copy
    Windows(AppName).Activate
    Range("A1").Select
    ActiveSheet.Paste
    Windows(WbName).Activate
    Range("A1").Select 'trick to avoid clipboard alert
    Selection.Copy
    ActiveWindow.Close
'Get session information and raw data from RawData sheet
Sheets("Data Table").Visible = True
Sheets("Data Table").Activate
Cells(2, 6).Value = Sheets("RawData").Cells(407, 1).Value
Cells(2, 9).Value = Sheets("RawData").Cells(407, 2).Value
Cells(2, 12).Value = Sheets("RawData").Cells(407, 3).Value
Cells(2, 15).Value = Sheets("RawData").Cells(407, 6).Value
Cells(2, 18).Value = Sheets("RawData").Cells(408, 12).Value
If Cells(2, 18).Value = "" Then
    Cells(2, 18).Value = Sheets("RawData").Cells(409, 12).Value
End If

Sheets("RawData").Select
Range("A2:A402").Select
Selection.Copy
Sheets("Data Table").Select
Range("A4").Select
Selection.PasteSpecial Paste:=xlPasteValues
Sheets("RawData").Select
Range("B2:B402").Select
Selection.Copy
Sheets("Data Table").Select
Range("B4").Select
Selection.PasteSpecial Paste:=xlPasteValues
Sheets("RawData").Select
'Next lines to handle reuse. Never checked
If Cells(2, 3).Value = "Content" Then 'Continue on first use
Range("C1:C402").Select
Selection.Insert Shift:=xlToRight
End If
'until here
If Cells(2, 4).Value = "Content" Then 'Continue on first use
Range("C1:C402").Select
Selection.Insert Shift:=xlToRight
End If
If Cells(2, 5).Value = "Content" Then
Range("E2:E402").Select
Selection.Copy
Sheets("Data Table").Select
Range("D4").Select
Selection.PasteSpecial Paste:=xlPasteValues
End If
Sheets("RawData").Select
If Cells(1, 6).Value = "(Mix 1 Scan) Image Array" Then
Range("F2:F402").Select
Selection.Copy
Sheets("Data Table").Select
Range("G4").Select
Selection.PasteSpecial Paste:=xlPasteValues
Sheets("RawData").Select
Range("G2:G402").Select
Selection.Copy
Sheets("Data Table").Select
Range("F4").Select
Selection.PasteSpecial Paste:=xlPasteValues
End If
Sheets("RawData").Select
If Cells(1, 8).Value = "(Mix 2 Scan) Image Array" Then
Range("H2:H402").Select
Selection.Copy
Sheets("Data Table").Select
Range("L4").Select
Selection.PasteSpecial Paste:=xlPasteValues
Sheets("RawData").Select
Range("I2:I402").Select
Selection.Copy
Sheets("Data Table").Select
Range("K4").Select
Selection.PasteSpecial Paste:=xlPasteValues
End If
Sheets("RawData").Select
If Cells(1, 10).Value = "(Mix 3 Scan) Image Array" Then
Range("J2:J402").Select
Selection.Copy
Sheets("Data Table").Select
Range("Q4").Select
Selection.PasteSpecial Paste:=xlPasteValues
Sheets("RawData").Select
Range("K2:K402").Select
Selection.Copy
Sheets("Data Table").Select
Range("P4").Select
Selection.PasteSpecial Paste:=xlPasteValues
End If
Sheets("RawData").Select
If Cells(1, 12).Value = "(Mix 4 Scan) Image Array" Then
Range("L2:L402").Select
Selection.Copy
Sheets("Data Table").Select
Range("V4").Select
Selection.PasteSpecial Paste:=xlPasteValues
Sheets("RawData").Select
Range("M2:M402").Select
Selection.Copy
Sheets("Data Table").Select
Range("U4").Select
Selection.PasteSpecial Paste:=xlPasteValues
End If

Range("C5").Select
ActiveCell.FormulaR1C1 = "=""Capture Mix "" & VLOOKUP(RC[-1],Captures!R2C1:R385C2,2,FALSE)"
Range("C5").Select
Selection.Copy
Range("C6:C404").Select
ActiveSheet.Paste
Range("C5:C404").Select
Selection.Copy
Range("C5").Select
Selection.PasteSpecial Paste:=xlPasteValues
'Replace pad # with well
Application.StatusBar = "Replacing pad # with well"
Range("B4").Value = "Well"
Range("B5").Select
ActiveCell.FormulaR1C1 = _
        "=IF(LEN(TRIM(RIGHT(RC[-1],3)))=2,MID(RC[-1],20,1)&""0""&RIGHT(RC[-1],1),TRIM(RIGHT(RC[-1],3)))"
Range("B5").Select
Selection.Copy
Range("B6:B404").Select
ActiveSheet.Paste
'Sort by well
Application.StatusBar = "Sorting..."
Range("A4:X404").Select
Application.CutCopyMode = False
Selection.Sort Key1:=Range("B3"), Order1:=xlAscending, Key2:=Range("C3") _
, Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
False, Orientation:=xlTopToBottom
'Deleting extra rows
Application.StatusBar = "Deleting extra rows"
For RowNumber = 404 To 5 Step -1
If InStr(1, Cells(RowNumber, 1).Value, "Sample Plate") = 0 Then
Rows(RowNumber & ":" & RowNumber).Delete
End If
Next RowNumber
Sheets("RawData").Visible = False
For RowNumber = 5 To 404 Step 8
If Cells(RowNumber, 4).Value <> "" Then
 Range("A" & RowNumber & ":X" & RowNumber + 3).Select
    With Selection.Interior
        .ColorIndex = 34
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
End If
Next RowNumber
'Retreiving sample information
For RowNumber = 5 To 404 Step 4
If InStr(1, Range("A" & RowNumber).Value, "Sample Plate", vbTextCompare) = 1 Then
Range("D" & RowNumber).Select
Sheets(1).Cells(((RowNumber / 4) + 35 / 4), 3).Value = ActiveCell.Value
Sheets(1).Cells(((RowNumber / 4) + 35 / 4), 4).Value = "Tay Sachs"
End If
Next RowNumber
Sheets("Samples").Select
Cells(4, 7).Value = Sheets("Data Table").Cells(2, 6).Value
Cells(5, 7).Value = Sheets("Data Table").Cells(2, 9).Value
Cells(6, 7).Value = Sheets("Data Table").Cells(2, 12).Value
Cells(7, 7).Value = Sheets("Data Table").Cells(2, 15).Value
Sheets(1).CommandButton1.Caption = "Analyze"
Sheets(1).CommandButton1.Visible = True
Sheets("Data Table").Visible = False
Sheets(1).cboxNoDNA.Visible = True
Sheets(1).cboxNoDNA = True
'SaveAs logic
Application.StatusBar = "Saving"
If Dir("C:\Program Files\NanoGen\Utilities\NanoGen.ini") <> "" Then
ChDir ResultsFolder
End If
'ChDir ("C:\Documents and Settings\martine\Desktop\Connexin Results")
suggestion = "TSD " & Format(Now(), "DD-MMM-YYYY") & ".XLS"
FileName = Application.GetSaveAsFilename(suggestion, "Workbooks,*.xls", , "Save analysis as")
ActiveWorkbook.SaveAs FileName
WriteToDB
Application.StatusBar = "NanoGen Tay Sachs"
End Sub

Sub AnalyzeData()

Dim suggestion As String, AccessionNumber As String, Formula As String
Dim FileName As Variant, MsgBoxResult As Variant
Dim RowNumber As Integer, column As Integer, NumberOfSamples As Integer, SamplesForAnalysis As Integer, IntCounter As Integer
Dim NoDNACont(1 To 4) As Single



Application.StatusBar = "NanoGen Tay Sachs"
Application.ScreenUpdating = False
GetAnalyzedSamples
'Unhide raw data
Sheets("Data Table").Visible = True
Sheets("Data Table").Select
'Hide unused pads and mark control pads
Application.StatusBar = "Hiding unused pads and marking control pads"
For RowNumber = 5 To 404
Range("C" & RowNumber).Select
If InStr(1, ActiveCell.Value, "Capture Mix 1") > 0 Then
Range("F" & RowNumber & ":G" & RowNumber & ",K" & RowNumber & ":L" & RowNumber).Select
Selection.ClearContents
Cells(RowNumber, 15).Value = "R170Q G->A"
Cells(RowNumber, 20).Value = "1278insTATC"
Else
If InStr(1, ActiveCell.Value, "Capture Mix 2") > 0 Then
Range("F" & RowNumber & ":G" & RowNumber & ",P" & RowNumber & ":Q" & RowNumber).Select
Selection.ClearContents
Cells(RowNumber, 10).Value = "IVS5-2 A->G"
Cells(RowNumber, 20).Value = "Control"
NoDNACont(4) = Cells(RowNumber, 21)
Else
If InStr(1, ActiveCell.Value, "Capture Mix 3") > 0 Then
Cells(RowNumber, 5).Value = "Control"
NoDNACont(1) = Cells(RowNumber, 6)
Cells(RowNumber, 10).Value = "Control"
NoDNACont(2) = Cells(RowNumber, 11)
Cells(RowNumber, 15).Value = "Control"
NoDNACont(3) = Cells(RowNumber, 16)
Cells(RowNumber, 20).Value = "G269S"
Else
If InStr(1, ActiveCell.Value, "Capture Mix 4") > 0 Then
Range("K" & RowNumber & ":L" & RowNumber & ",P" & RowNumber & ":Q" & RowNumber).Select
Selection.ClearContents
Cells(RowNumber, 5).Value = "IVS12+1 G->C"
Cells(RowNumber, 20).Value = "DF 304/305"
Range("A" & RowNumber & ":X" & RowNumber).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
End If
End If
End If
End If
Next RowNumber
Application.StatusBar = "Calculating G/R Scaled ratio"
'Capture mix 1
For RowNumber = 5 To 401 Step 4
Range("R" & RowNumber).Select
If InStr(1, Cells(RowNumber, 15).Value, "R170Q G->A") > 0 Then
ActiveCell.FormulaR1C1 = "=ngCalcGR(RC[-2],RC[-1],R[2]C[-2],R[2]C[-1],1.5,0)"
Range("S" & RowNumber).Select
ActiveCell.FormulaR1C1 = "=ngCalcGen(RC[-1],0.2,0.33,3,5)"
End If
Range("W" & RowNumber).Select
If InStr(1, Cells(RowNumber, 20).Value, "1278insTATC") > 0 Then
ActiveCell.FormulaR1C1 = "=ngCalcGR(RC[-2],RC[-1],R[1]C[-2],R[1]C[-1],1,0)"
Range("X" & RowNumber).Select
ActiveCell.FormulaR1C1 = "=ngCalcGen(RC[-1],0.2,0.33,3,5)"
End If
Next RowNumber
'Capture mix 2
For RowNumber = 6 To 402 Step 4
Range("M" & RowNumber).Select
If InStr(1, Cells(RowNumber, 10).Value, "IVS5-2 A->G") > 0 Then
ActiveCell.FormulaR1C1 = "=ngCalcGR(RC[-2],RC[-1],R[1]C[-2],R[1]C[-1],0.9,0)"
Range("N" & RowNumber).Select
ActiveCell.FormulaR1C1 = "=ngCalcGen(RC[-1],0.2,0.33,3,5)"
End If
Next RowNumber
'Capture mix 3
For RowNumber = 7 To 403 Step 4
Range("W" & RowNumber).Select
If InStr(1, Cells(RowNumber, 20).Value, "G269S") > 0 Then
ActiveCell.FormulaR1C1 = "=ngCalcGR(RC[-2],RC[-1],R[-1]C[-2],R[-1]C[-1],1,0)"
Range("X" & RowNumber).Select
ActiveCell.FormulaR1C1 = "=ngCalcGen(RC[-1],0.2,0.33,3,5)"
End If
Next RowNumber
'Capture mix 4
For RowNumber = 8 To 404 Step 4
Range("H" & RowNumber).Select
If InStr(1, Cells(RowNumber, 5).Value, "IVS12+1 G->C") > 0 Then
ActiveCell.FormulaR1C1 = "=ngCalcGR(RC[-2],RC[-1],R[-1]C[-2],R[-1]C[-1],1,0)"
Range("I" & RowNumber).Select
ActiveCell.FormulaR1C1 = "=ngCalcGen(RC[-1],0.2,0.33,3,5)"
End If
Range("W" & RowNumber).Select
If InStr(1, Cells(RowNumber, 20).Value, "DF 304/305") > 0 Then
ActiveCell.FormulaR1C1 = "=ngCalcGR(RC[-2],RC[-1],R[-2]C[-2],R[-2]C[-1],1,0)"
Range("X" & RowNumber).Select
ActiveCell.FormulaR1C1 = "=ngCalcGen(RC[-1],0.2,0.33,3,5)"
End If
Next RowNumber
'NoDNA logic
If Sheets(1).cboxNoDNA = True Then
'Find seq number of last sample
For RowNumber = 1 To 96
    If Cells(4 * RowNumber + 5, 4).Value = "" And Cells(4 * RowNumber + 4, 4).Value <> "" Then
    NumberOfSamples = RowNumber
    End If
Next RowNumber
'Find whether NoDNA call is different from "LS"
For RowNumber = 4 * NumberOfSamples + 1 To 4 * NumberOfSamples + 4
    For column = 8 To 23 Step 5
        If Cells(RowNumber, column) <> "" And Cells(RowNumber, column) <> "LS" Then
            For auxRow = RowNumber - 4 To 5 Step -4
            Formula = Cells(auxRow, column).FormulaR1C1
            Formula = Replace(Formula, "0)", Cells(RowNumber, column - 2).Value - NoDNACont((column - 3) / 5) & Chr(41))
            Cells(auxRow, column).FormulaR1C1 = Formula
            Next auxRow
        End If
    Next column
Next RowNumber
End If
'NoDNA logic until here
Range("A1").Select
Columns("A:B").Select
Selection.EntireColumn.Hidden = True
'Merge cells with same sample #
Cells(4, 3).Value = "Position"
Cells(4, 4).Value = "Sample"
For RowNumber = 5 To 401 Step 4
If Cells(RowNumber, 4) <> "" Then
Range("D" & RowNumber + 1 & ":D" & RowNumber + 3).Select
Selection.ClearContents
Range("D" & RowNumber & ":D" & RowNumber + 3).Select
Selection.Merge
With Selection
  .HorizontalAlignment = xlCenter
  .VerticalAlignment = xlCenter
  End With
  With Selection.Borders(xlEdgeLeft)
 .LineStyle = xlContinuous
 .Weight = xlThin
  .ColorIndex = 1
    End With
    End If
  Next RowNumber
'Insert page breaks
For RowNumber = 53 To 365 Step 48
Range("C" & RowNumber).Select
ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=ActiveCell
Next RowNumber
ActiveSheet.DisplayPageBreaks = False
Sheets("Summary").Visible = True
Application.StatusBar = "Creating summary"
Sheets(1).Activate
Range("C3").Select
Sheets("Summary").Cells(3, 3).Value = ActiveCell.Value
Range("C4").Select
Sheets("Summary").Cells(4, 3).Value = ActiveCell.Value
Range("C5").Select
Sheets("Summary").Cells(5, 3).Value = ActiveCell.Value
Range("C6").Select
Sheets("Summary").Cells(6, 3).Value = ActiveCell.Value
'Get sample numbers R170Q G->A calls and 1278insTATC
For RowNumber = 5 To 402 Step 4
If InStr(1, Sheets("Data Table").Cells(RowNumber, 3).Value, "Capture Mix 1") > 0 Then
Sheets("Summary").Cells(((RowNumber / 4) + 35 / 4), 2) = Sheets("Data Table").Cells(RowNumber, 4).Value
Sheets("Summary").Cells(((RowNumber / 4) + 35 / 4), 9) = Sheets("Data Table").Cells(RowNumber, 19).Value
Sheets("Summary").Cells(((RowNumber / 4) + 35 / 4), 4) = Sheets("Data Table").Cells(RowNumber, 24).Value
End If
Next RowNumber
'Get IVS5-2 A->G calls
For RowNumber = 6 To 403 Step 4
If InStr(1, Sheets("Data Table").Cells(RowNumber, 3).Value, "Capture Mix 2") > 0 Then
Sheets("Summary").Cells(((RowNumber / 4) + 34 / 4), 7) = Sheets("Data Table").Cells(RowNumber, 14).Value
End If
Next RowNumber
'Get G269S calls
For RowNumber = 7 To 404 Step 4
If InStr(1, Sheets("Data Table").Cells(RowNumber, 3).Value, "Capture Mix 3") > 0 Then
Sheets("Summary").Cells(((RowNumber / 4) + 33 / 4), 6) = Sheets("Data Table").Cells(RowNumber, 24).Value
End If
Next RowNumber
'Get IVS12+1 G->C calls and DF 304/305 calls
For RowNumber = 8 To 405 Step 4
If InStr(1, Sheets("Data Table").Cells(RowNumber, 3).Value, "Capture Mix 4") > 0 Then
Sheets("Summary").Cells(((RowNumber / 4) + 8), 5) = Sheets("Data Table").Cells(RowNumber, 9).Value
Sheets("Summary").Cells(((RowNumber / 4) + 8), 8) = Sheets("Data Table").Cells(RowNumber, 24).Value
End If
Next RowNumber
'Replace capture # with sequence #
Sheets("Data Table").Activate
For RowNumber = 5 To 402 Step 4
If Cells(RowNumber, 3).Value <> "" Then
Range("C" & RowNumber & ":C" & RowNumber + 3).Select
Selection.ClearContents
Selection.Merge
ActiveCell.Value = (RowNumber / 4) - 1 / 4
End If
Next RowNumber
Sheets("Summary").Activate
'Removing extra rows and columns
Application.StatusBar = "Removing extra rows and columns"
For RowNumber = 105 To 10 Step -1
If Cells(RowNumber, 2).Value = "" Then
Rows(RowNumber & ":" & RowNumber).Delete
End If
Next RowNumber
'If two calls or more are LS mark all as LS
For RowNumber = 10 To 105
If Cells(RowNumber, 2).Value <> "" Then
 Range("J" & RowNumber).Select
 ActiveCell.FormulaR1C1 = "=COUNTIF(RC[-6]:RC[-1],""LS"")"
 If ActiveCell.Value >= 2 Then
 For IntCounter = 4 To 9
 If Cells(RowNumber, IntCounter).Value <> "LS" Then
 Cells(RowNumber, IntCounter).Font.ColorIndex = 2
 Cells(RowNumber, IntCounter).Interior.ColorIndex = 32
 Cells(RowNumber, IntCounter).Value = "LS"
 End If
 Next IntCounter
 End If
End If
Next RowNumber
Range("J10:J105").ClearContents

'Code for softov
 If Dir("C:\Program Files\NanoGen\Utilities\Softov.INI") <> "" Then
 'Move previous results file (if any) to backup directory
    If Dir("C:\Program Files\NanoGen\LIS Files\TSD Results.txt") <> "" Then
    Name "C:\Program Files\NanoGen\LIS Files\TSD Results.txt" As _
    "C:\Program Files\NanoGen\LIS Files\TSD Backup\" & "Cx Results" & _
    Format(FileDateTime("C:\Program Files\NanoGen\LIS Files\TSD Results.txt"), "yymmddhhmm") & ".txt"
    End If
    Open "C:\Program Files\NanoGen\LIS Files\TSD Results.txt" For Output As #1
    Print #1, "H|Nanogen"
    For RowNumber = 10 To 105
    If Cells(RowNumber, 2) <> "" And IsNumeric(Cells(RowNumber, 1).Value) = True Then 'Accession number exists
     AccessionNumber = Cells(RowNumber, 2).Value
     Print #1, "O|" & RowNumber - 9 & "|" & AccessionNumber
     For column = 4 To 9
      If Cells(9, column).Value <> "" Then
      Print #1, "R|" & column - 3 & "|" & _
      Cells(9, column).Value & "|" & GenAsInt(Cells(RowNumber, column).Value)
      End If
     Next column
     End If
    Next RowNumber
    Print #1, "L|1"
    Close #1
    End If
   'Code for RRC
 If Analyzed = False Then
    NumberOfSamples = 0
    For RowNumber = 10 To 105
    If Cells(RowNumber, 2).Value <> "" Then
    NumberOfSamples = NumberOfSamples + 1
    End If
    Next RowNumber
    'MsgBox "Number of samples = " & NumberOfSamples
    SamplesAnalyzed = SamplesAnalyzed + NumberOfSamples
    '1. Update number of analyzed samples.
    'MsgBox vbCrLf & "Update to " & SamplesAnalyzed
    UpdateAnalyzedSamples
    '2. mark session as analyzed
    UpdateSessionStatus
    'Warn if more then 192 samples analyzed
    If SamplesAnalyzed > 192 And RRC = True Then
    SamplesForAnalysis = NumberOfSamples + 192 - SamplesAnalyzed
        If SamplesForAnalysis <= 0 Then
        SamplesForAnalysis = 0
        End If
    MsgBoxResult = MsgBox("Chip use exceeded. Only " & SamplesForAnalysis & " Samples will be analyzed.", vbCritical, "Warning")
    'mark relevant samples as "0"
    Sheets("Summary").Activate
    For RowNumber = 10 + SamplesForAnalysis To 105
    If Cells(RowNumber, 2).Value <> "" Then
    For column = 4 To 9
    Cells(RowNumber, column).Value = "0"
    Next column
    'Capture 1
    Sheets("Data Table").Cells((4 * RowNumber) - 35, 16).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 35, 17).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 35, 21).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 35, 22).Value = 0
    'Capture 2
    Sheets("Data Table").Cells((4 * RowNumber) - 34, 11).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 34, 12).Value = 0
    'Capture 3
    Sheets("Data Table").Cells((4 * RowNumber) - 33, 21).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 33, 22).Value = 0
    'Capture 4
    Sheets("Data Table").Cells((4 * RowNumber) - 32, 6).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 32, 7).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 32, 21).Value = 0
    Sheets("Data Table").Cells((4 * RowNumber) - 32, 22).Value = 0
     End If
    Next RowNumber
    End If
End If
'Find exceptions
    If FindExceptions = True Then
    FndExcptns
    End If
'Protecting sheets
Sheets(1).Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
Sheets("Data Table").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
Sheets("Summary").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
Range("A1").Select
Application.StatusBar = "Saving..."
ActiveWorkbook.Save
Application.StatusBar = "NanoGen Tay Sachs"
End Sub
Sub WriteToDB()
' Create a connection object.
Dim cn As ADODB.Connection
Set cn = New ADODB.Connection
' Provide the connection string.
Dim strConn As String
'Connection string = Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=LC3;Data Source=SBXPAP77\sheba
'Use the SQL Server OLE DB Provider.
strConn = "Provider=SQLOLEDB.1;"
'Connect to the NGIC database on the local server.
strConn = strConn & "Data Source=" & ComputerName & "\NGIC;Initial Catalog=NGIC;"

'Use an integrated login.
strConn = strConn & "Integrated Security=SSPI"

'Now open the connection.
cn.Open strConn
'Query
cn.Execute ("IF NOT EXISTS (SELECT Barcode FROM dbo.gSession WHERE Barcode='" _
& Cells(4, 7).Value _
& "')" _
& "INSERT INTO gCartridgeUse VALUES ('" _
& Cells(4, 7).Value _
& "',0)")
cn.Execute ("IF NOT EXISTS (SELECT SessionName FROM gSession WHERE SessionName = '" _
& Cells(5, 7).Value _
& "') INSERT INTO gSession VALUES('" _
& Cells(4, 7).Value _
& "','" _
& Cells(5, 7).Value _
& "',0)")
cn.Close
Set cn = Nothing
End Sub
Sub GetAnalyzedSamples()
' Create a connection object.
Dim cn As ADODB.Connection
Set cn = New ADODB.Connection

' Provide the connection string.
Dim strConn As String
'Connection string = Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=LC3;Data Source=SBXPAP77\sheba
'Use the SQL Server OLE DB Provider.
strConn = "Provider=SQLOLEDB.1;"
'Connect to the NGIC database on the local server.
strConn = strConn & "Data Source=" & ComputerName & "\NGIC;Initial Catalog=NGIC;"

'Use an integrated login.
strConn = strConn & "Integrated Security=SSPI"

'Now open the connection.
cn.Open strConn
'Create a recordset object
Dim rs As ADODB.Recordset
Set rs = New ADODB.Recordset
With rs
.ActiveConnection = cn
.Open "SELECT SamplesAnalyzed FROM gCartridgeUse WHERE Barcode='" & Cells(4, 7).Value & "'"
SamplesAnalyzed = rs.Fields("SamplesAnalyzed").Value
.Close
'End With
'With rs
'.ActiveConnection = cn
.Open "SELECT Analyzed FROM gSession WHERE SessionName='" & Cells(5, 7).Value & "'"
Analyzed = rs.Fields("Analyzed").Value
.Close
End With
cn.Close
Set cn = Nothing
'MsgBox SamplesAnalyzed & " Samples Analyzed." & vbCrLf & "Analyzed=" & Analyzed
End Sub
Sub UpdateSessionStatus()
' Create a connection object.
Dim cn As ADODB.Connection
Set cn = New ADODB.Connection
' Provide the connection string.
Dim strConn As String
'Connection string = Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=LC3;Data Source=SBXPAP77\sheba
'Use the SQL Server OLE DB Provider.
strConn = "Provider=SQLOLEDB.1;"
'Connect to the NGIC database on the local server.
strConn = strConn & "Data Source=" & ComputerName & "\NGIC;Initial Catalog=NGIC;"

'Use an integrated login.
strConn = strConn & "Integrated Security=SSPI"

'Now open the connection.
cn.Open strConn
'Query
cn.Execute ("UPDATE gSession SET Analyzed =1 WHERE SessionName='" & Cells(5, 2).Value & "'")
cn.Close
Set cn = Nothing
End Sub
Sub UpdateAnalyzedSamples()
' Create a connection object.
Dim cn As ADODB.Connection
Set cn = New ADODB.Connection
' Provide the connection string.
Dim strConn As String
'Connection string = Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=LC3;Data Source=SBXPAP77\sheba
'Use the SQL Server OLE DB Provider.
strConn = "Provider=SQLOLEDB.1;"
'Connect to the NGIC database on the local server.
strConn = strConn & "Data Source=" & ComputerName & "\NGIC;Initial Catalog=NGIC;"

'Use an integrated login.
strConn = strConn & "Integrated Security=SSPI"

'Now open the connection.
cn.Open strConn
'Query
cn.Execute ("UPDATE gCartridgeUse SET SamplesAnalyzed=" & SamplesAnalyzed & " WHERE Barcode='" & Cells(4, 2).Value & "'")
cn.Close
Set cn = Nothing
End Sub


Attribute VB_Name = "Module2"
Private Const UHET As Single = 3
Private Const LHET As Single = 0.33
Private Const MinSig As Integer = 1500
Private Const MinCTRL As Integer = -2000
Private Const MinRatio As Single = 2
Private Declare Function GetComputerName Lib "kernel32" _
Alias "GetComputerNameA" (ByVal lpBuffer As String, nSize As _
Long) As Long


Public Function ngCalcGR(ngGREEN As Single, ngRED As Single, ngGREENCont As Single, ngREDCont As Single, ngGreenFactor As Single, ngNoDNA As Single)
Dim ngGreenAboveCont As Single, ngRedAboveCont As Single
'Reject mutation if signal is not significantly above NoDNA
If (ngGREEN - ngGREENCont - ngNoDNA < MinSig) And (ngRED - ngREDCont < MinSig) And ngNoDNA > 0 Then
ngCalcGR = "LS"
Else
'Reject mutation if one of the signals is lower then -500
If ngGREEN < 0 Or ngGREENCont < MinCTRL Or ngRED < MinCTRL Or ngREDCont < MinCTRL Then
ngCalcGR = "LS"
Else
'Reject mutation if both signals are lower then minimum signal
If (ngGREEN - ngGREENCont) < MinSig And (ngRED - ngREDCont) < MinSig Then
ngCalcGR = "LS"
Else
    'handle 0 in controls
    If ngGREENCont = 0 Then
    ngGREENCont = 0.001
    End If
    If ngREDCont = 0 Then
    ngREDCont = 0.001
    End If
'Reject mutation if both signals are not at least twice the control
If ngGREEN / ngGREENCont < MinRatio And ngGREEN / ngGREENCont > 0 _
And ngRED / ngREDCont < MinRatio And ngRED / ngREDCont > 0 Then
ngCalcGR = "LS"
Else
ngGreenAboveCont = ngGREEN - ngGREENCont
ngRedAboveCont = ngRED - ngREDCont
    If ngGreenAboveCont < 1 Then
    ngGreenAboveCont = 1
    End If
    If ngRedAboveCont < 1 Then
    ngRedAboveCont = 1
    End If
ngCalcGR = ngGreenAboveCont * ngGreenFactor / ngRedAboveCont
    'Reject mutation if ratio is adequate for HET but one of the signals is lower then minimum signal
    If ngCalcGR >= LHET And ngCalcGR < UHET And ((ngGREEN - ngGREENCont) < MinSig Or (ngRED - ngREDCont) < MinSig) Then
    ngCalcGR = "LS"
    End If
    'Reject mutation if ratio is adequate for HET but one of the signals is not at least twice the control
    If ngCalcGR >= LHET And ngCalcGR < UHET And ((ngGREEN / ngGREENCont < MinRatio And ngGREEN / ngGREENCont > 0) Or _
    (ngRED / ngREDCont < MinRatio And ngRED / ngREDCont > 0)) Then
    ngCalcGR = "LS"
    End If
End If
End If
End If
End If
'Formating
If ngCalcGR <> "LS" Then
    If ngCalcGR < 10 Then
    ngCalcGR = Format(ngCalcGR, "0.00")
    Else
     If ngCalcGR < 100 Then
    ngCalcGR = Format(ngCalcGR, "0.0")
    Else
    ngCalcGR = Format(ngCalcGR, "0")
    End If
    End If
End If
End Function


Public Function ngCalcGen(Ratio As String, MaxHOM As Single, MinHET As Single, MaxHET As Single, MinWT As Single) As String
If Ratio = "LS" Then
ngCalcGen = "LS"
End If
If IsNumeric(Ratio) Then
    If Ratio >= MinWT Then
    ngCalcGen = "-"
    Else
    If Ratio > MaxHET Then
    ngCalcGen = "NC"
    Else
    If Ratio >= MinHET Then
    ngCalcGen = "HET"
    Else
    If Ratio > MaxHOM Then
    ngCalcGen = "HOM/HET"
    Else
    ngCalcGen = "HOM"
    End If
    End If
    End If
    End If
End If
End Function
Public Function TRNC(arg As Double) As Double
If arg < 1 Then
TRNC = 1
Else
TRNC = arg
End If
End Function
Public Function ComputerName() As String
  Dim sBuffer As String
  
  Dim lAns As Long
 
  sBuffer = Space$(255)
  lAns = GetComputerName(sBuffer, 255)
  If lAns <> 0 Then
        'read from beginning of string to null-terminator
        ComputerName = Left$(sBuffer, InStr(sBuffer, Chr(0)) - 1)
   Else
        Err.Raise Err.LastDllError, , _
          "A system call returned an error code of " _
           & Err.LastDllError
   End If

End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cboxNoDNA, 5, 0, MSForms, CheckBox"
Attribute VB_Control = "CommandButton1, 4, 1, MSForms, CommandButton"
Private Sub CommandButton1_Click()
If Me.CommandButton1.Caption = "Import" Then
ImportData
Else
If Me.CommandButton1.Caption = "Analyze" Then
AnalyzeData
End If
End If
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
GetFolder
GetRepText
End Sub
Attribute VB_Name = "mFindExceptions"
Sub FndExcptns()
Dim RowNumber As Integer
'Capture 1
For RowNumber = 5 To 385 Step 4
If Sheets("Data Table").Cells(RowNumber, 19).Value = "-" Then
Sheets("Exceptions").Cells(RowNumber / 4 + 19 / 4, 1).Value = Sheets("Data Table").Cells(RowNumber, 16).Value
Sheets("Exceptions").Cells(RowNumber / 4 + 19 / 4, 2).Value = Sheets("Data Table").Cells(RowNumber, 17).Value
End If
If Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Exceptions").Cells(RowNumber / 4 + 19 / 4, 3).Value = Sheets("Data Table").Cells(RowNumber, 21).Value
Sheets("Exceptions").Cells(RowNumber / 4 + 19 / 4, 4).Value = Sheets("Data Table").Cells(RowNumber, 22).Value
End If
Next RowNumber
For RowNumber = 5 To 385 Step 4
'R170Q G->A
If IsNumeric(Sheets("Exceptions").Cells(5, 1).Value) Then
If Sheets("Data Table").Cells(RowNumber, 16).Value < Sheets("Exceptions").Cells(5, 1).Value _
And Sheets("Data Table").Cells(RowNumber, 19).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 16).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 16).Font.ColorIndex = 3
End If
End If
If IsNumeric(Sheets("Exceptions").Cells(5, 2).Value) Then
If Sheets("Data Table").Cells(RowNumber, 17).Value > Sheets("Exceptions").Cells(5, 2).Value _
And Sheets("Data Table").Cells(RowNumber, 19).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 17).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 17).Font.ColorIndex = 3
End If
End If
'1278insTATC
If IsNumeric(Sheets("Exceptions").Cells(5, 3).Value) Then
If Sheets("Data Table").Cells(RowNumber, 21).Value < Sheets("Exceptions").Cells(5, 3).Value _
And Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 21).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 21).Font.ColorIndex = 3
End If
End If
If IsNumeric(Sheets("Exceptions").Cells(5, 4).Value) Then
If Sheets("Data Table").Cells(RowNumber, 22).Value > Sheets("Exceptions").Cells(5, 4).Value _
And Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 22).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 22).Font.ColorIndex = 3
End If
End If
Next RowNumber
'Capture 2
For RowNumber = 6 To 386 Step 4
If Sheets("Data Table").Cells(RowNumber, 14).Value = "-" Then
Sheets("Exceptions").Cells(RowNumber / 4 + 18 / 4, 5).Value = Sheets("Data Table").Cells(RowNumber, 11).Value
Sheets("Exceptions").Cells(RowNumber / 4 + 18 / 4, 6).Value = Sheets("Data Table").Cells(RowNumber, 12).Value
End If
Next RowNumber
For RowNumber = 6 To 386 Step 4
'IVS5-2 A->G
If IsNumeric(Sheets("Exceptions").Cells(5, 5).Value) Then
If Sheets("Data Table").Cells(RowNumber, 11).Value < Sheets("Exceptions").Cells(5, 5).Value _
And Sheets("Data Table").Cells(RowNumber, 14).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 11).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 11).Font.ColorIndex = 3
End If
End If
If IsNumeric(Sheets("Exceptions").Cells(5, 6).Value) Then
If Sheets("Data Table").Cells(RowNumber, 12).Value > Sheets("Exceptions").Cells(5, 6).Value _
And Sheets("Data Table").Cells(RowNumber, 14).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 12).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 12).Font.ColorIndex = 3
End If
End If
Next RowNumber
'Capture 3
For RowNumber = 7 To 387 Step 4
If Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Exceptions").Cells(RowNumber / 4 + 17 / 4, 7).Value = Sheets("Data Table").Cells(RowNumber, 21).Value
Sheets("Exceptions").Cells(RowNumber / 4 + 17 / 4, 8).Value = Sheets("Data Table").Cells(RowNumber, 22).Value
End If
Next RowNumber
For RowNumber = 7 To 387 Step 4
'G269S
If IsNumeric(Sheets("Exceptions").Cells(5, 7).Value) Then
If Sheets("Data Table").Cells(RowNumber, 21).Value < Sheets("Exceptions").Cells(5, 7).Value _
And Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 21).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 21).Font.ColorIndex = 3
End If
End If
If IsNumeric(Sheets("Exceptions").Cells(5, 8).Value) Then
If Sheets("Data Table").Cells(RowNumber, 22).Value > Sheets("Exceptions").Cells(5, 8).Value _
And Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 22).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 22).Font.ColorIndex = 3
End If
End If
Next RowNumber
'Capture 4
For RowNumber = 8 To 388 Step 4
If Sheets("Data Table").Cells(RowNumber, 9).Value = "-" Then
Sheets("Exceptions").Cells(RowNumber / 4 + 16 / 4, 9).Value = Sheets("Data Table").Cells(RowNumber, 6).Value
Sheets("Exceptions").Cells(RowNumber / 4 + 16 / 4, 10).Value = Sheets("Data Table").Cells(RowNumber, 7).Value
End If
If Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Exceptions").Cells(RowNumber / 4 + 16 / 4, 11).Value = Sheets("Data Table").Cells(RowNumber, 21).Value
Sheets("Exceptions").Cells(RowNumber / 4 + 16 / 4, 12).Value = Sheets("Data Table").Cells(RowNumber, 22).Value
End If
Next RowNumber
For RowNumber = 8 To 388 Step 4
'IVS12+1 G->C
If IsNumeric(Sheets("Exceptions").Cells(5, 9).Value) Then
If Sheets("Data Table").Cells(RowNumber, 6).Value < Sheets("Exceptions").Cells(5, 9).Value _
And Sheets("Data Table").Cells(RowNumber, 9).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 6).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 6).Font.ColorIndex = 3
End If
End If
If IsNumeric(Sheets("Exceptions").Cells(5, 10).Value) Then
If Sheets("Data Table").Cells(RowNumber, 7).Value > Sheets("Exceptions").Cells(5, 10).Value _
And Sheets("Data Table").Cells(RowNumber, 9).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 7).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 7).Font.ColorIndex = 3
End If
End If
'DF 304/305
If IsNumeric(Sheets("Exceptions").Cells(5, 11).Value) Then
If Sheets("Data Table").Cells(RowNumber, 21).Value < Sheets("Exceptions").Cells(5, 11).Value _
And Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 21).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 21).Font.ColorIndex = 3
End If
End If
If IsNumeric(Sheets("Exceptions").Cells(5, 12).Value) Then
If Sheets("Data Table").Cells(RowNumber, 22).Value > Sheets("Exceptions").Cells(5, 12).Value _
And Sheets("Data Table").Cells(RowNumber, 24).Value = "-" Then
Sheets("Data Table").Cells(RowNumber, 22).Font.Bold = True
Sheets("Data Table").Cells(RowNumber, 22).Font.ColorIndex = 3
End If
End If
Next RowNumber
End Sub



INQUEST-PP=macro
