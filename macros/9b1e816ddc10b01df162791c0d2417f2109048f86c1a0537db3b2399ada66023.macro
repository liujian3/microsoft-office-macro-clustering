Attribute VB_Name = "FormAcertarRel"
Attribute VB_Base = "0{8BA6CC06-EB9D-48EC-B1C2-559BEEA1D3F5}{FD97FB1C-EA5F-4539-BAC8-4BA6581283B4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()
    GetDataHora
    If bModal Then Application.OnTime Now + TimeValue("00:00:01"), "Hopping"
    WhatsThis_Img.Top = -50: If bHtmlHelp Then WhatsThis_Img.Top = -1: WhatsThis_Img.Left = Width - 10
End Sub

Private Sub Acertar_Bt_Click()
    Shell "CONTROL.EXE" & IIf(Mid(Application.OperatingSystem, 9, 4) = "3.95" Or Mid(Application.OperatingSystem, 9, 4) = "(32-", " TIMEDATE.CPL", " data e hora")
End Sub

Private Sub OK_Bt_Click()
    Unload Me
End Sub

Public Sub GetDataHora()
    Data_Lb.Caption = Format(Date, "dd/mm/yy")
    DiaSemana_Lb.Caption = UCase(Left(Format(Date, "dddd"), 1)) & Mid(Format(Date, "dddd"), 2)
    Hora_Lb.Caption = Format(Now, "hh:mm:ss")
End Sub

'Usar MouseMove para on/off Interactive ao sair/clicar nos bot|fffd|es OK e Acertar
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Not bModal And Application.Interactive Then Application.Interactive = False
End Sub
Private Sub OK_Bt_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Not bModal And Not Application.Interactive Then Application.Interactive = True
End Sub
Private Sub Acertar_Bt_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Not bModal And Not Application.Interactive Then Application.Interactive = True
End Sub

Private Sub WhatsThis_Img_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Static cHHelpWhatsThis1 As Object
    If cHHelpWhatsThis1 Is Nothing Then Set cHHelpWhatsThis1 = Application.Run("CPAP_EX8.MAC!New_cHHelpWhatsThis")
    cHHelpWhatsThis1.WhatsThis_Img_MouseDown Button, Shift, x, y, Me
    If WhatsThis_Img.BackStyle = fmBackStyleOpaque Then Set cHHelpWhatsThis1 = Nothing
End Sub


Attribute VB_Name = "Mod4RegEdit"
Option Explicit

Private Const REG_SZ As Long = &H1
Public Const REG_DWORD As Long = &H4
Private Const REG_BINARY As Long = &H3

Public Const HKEY_CLASSES_ROOT As Long = &H80000000
Public Const HKEY_CURRENT_USER As Long = &H80000001
Public Const HKEY_LOCAL_MACHINE As Long = &H80000002
Public Const HKEY_USERS As Long = &H80000003

Public Const KEY_ALL_ACCESS As Long = &H3F
Private Const KEY_QUERY_VALUE As Long = &H1
Public Const REG_OPTION_NON_VOLATILE As Long = 0

Private Const ERROR_MORE_DATA As Long = 234

Public Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Long
End Type

Public Declare Function RegCloseKey Lib "advapi32.dll" _
        (ByVal hKey As Long) As Long

Public Declare Function RegCreateKeyEx Lib "advapi32.dll" _
        Alias "RegCreateKeyExA" (ByVal hKey As Long, _
        ByVal lpSubKey As String, _
        ByVal Reserved As Long, _
        ByVal lpClass As String, _
        ByVal dwOptions As Long, _
        ByVal samDesired As Long, _
        lpSecurityAttributes As SECURITY_ATTRIBUTES, _
        phkResult As Long, _
        lpdwDisposition As Long) As Long

Public Declare Function RegDeleteKey Lib "advapi32.dll" _
        Alias "RegDeleteKeyA" _
        (ByVal hKey As Long, _
        ByVal lpSubKey As String) As Long

Public Declare Function SHDeleteKey Lib "shlwapi.dll" Alias "SHDeleteKeyA" _
        (ByVal hKey As Long, ByVal pszSubKey As String) As Long

Private Declare Function RegQueryValueExStr Lib "advapi32.dll" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal lpReserved As Long, ByRef lpType As Long, _
        ByVal lpData As String, ByRef lpcbData As Long) As Long    'Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegQueryValueExLng Lib "advapi32.dll" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal lpReserved As Long, ByRef lpType As Long, _
        lpData As Long, ByRef lpcbData As Long) As Long    'Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegQueryValueExByt Lib "advapi32.dll" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal lpReserved As Long, ByRef lpType As Long, _
        lpData As Byte, ByRef lpcbData As Long) As Long    'Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegOpenKeyEx Lib "advapi32" _
        Alias "RegOpenKeyExA" _
        (ByVal hKey As Long, _
        ByVal lpSubKey As String, _
        ByVal ulOptions As Long, _
        ByVal samDesired As Long, _
        phkResult As Long) As Long

Private Declare Function RegSetValueExStr Lib "advapi32.dll" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        ByVal lpData As String, ByVal cbData As Long) As Long    ' Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegSetValueExLng Lib "advapi32.dll" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        lpData As Long, ByVal cbData As Long) As Long      ' Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegSetValueExByt Lib "advapi32.dll" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        lpData As Byte, ByVal cbData As Long) As Long      ' Note that if you declare the lpData parameter as String, you must pass it By Value.

Sub FileExtAssociation(sExt As String, sAppName As String, sAppFullNameFile As String)
    Dim OpenKeyHdl As Long
    Dim lRet As Long
    Dim SecurAttr As SECURITY_ATTRIBUTES

    'Create root extension subkey (.xxx)
    If GetRegValue(HKEY_CLASSES_ROOT, sExt, "", False) = "Error" Then
        RegCreateKeyEx HKEY_CLASSES_ROOT, sExt, _
                0&, vbNullString, REG_OPTION_NON_VOLATILE, _
                KEY_ALL_ACCESS, SecurAttr, OpenKeyHdl, lRet
        RegCloseKey OpenKeyHdl
    End If
    'Set default value at extension subkey to look for commands at AppNameFile subkey
    SetKeyValue HKEY_CLASSES_ROOT, sExt, "", REG_SZ, sAppName & "File"

    'Create root Application subkey about file extension (AppNameFile subkey)
    If GetRegValue(HKEY_CLASSES_ROOT, sAppName & "File\shell\open\command", "", False) = "Error" Then
        RegCreateKeyEx HKEY_CLASSES_ROOT, sAppName & "File\shell\open\command", _
                0&, vbNullString, REG_OPTION_NON_VOLATILE, _
                KEY_ALL_ACCESS, SecurAttr, OpenKeyHdl, lRet
        RegCloseKey OpenKeyHdl
    End If
    'Set open command value at AppNameFile subkey
    SetKeyValue HKEY_CLASSES_ROOT, sAppName & "File\shell\open\command", "", REG_SZ, """" & sAppFullNameFile & """" & " %1"
    'Define a description for the extension file as default value at AppNameFile subkey.
    SetKeyValue HKEY_CLASSES_ROOT, sAppName & "File", "", REG_SZ, sAppName & " File"


    'Create root Application subkey about Icon
    If GetRegValue(HKEY_CLASSES_ROOT, sAppName & "File\DefaultIcon", "", False) = "Error" Then
        RegCreateKeyEx HKEY_CLASSES_ROOT, sAppName & "File\DefaultIcon", _
                0&, vbNullString, REG_OPTION_NON_VOLATILE, _
                KEY_ALL_ACCESS, SecurAttr, OpenKeyHdl, lRet
        RegCloseKey OpenKeyHdl
    End If
    'Set ref to default icon at AppNameFile subkey
    SetKeyValue HKEY_CLASSES_ROOT, sAppName & "File\DefaultIcon", "", REG_SZ, sAppFullNameFile & ",0"
End Sub

Function SetValueEx(ByVal hKey As Long, _
      sValueName As String, _
      lType As Long, _
      vlpData As Variant) As Long

    Dim blpData() As Byte
    Dim llpData As Long
    Dim slpData As String

    Select Case lType
    Case REG_BINARY
        blpData = vlpData
        SetValueEx = RegSetValueExStr(hKey, _
                sValueName, _
                0&, _
                lType, _
                blpData(0), _
                UBound(blpData) - LBound(blpData) - 1)

    Case REG_SZ
        slpData = vlpData & Chr$(0)
        SetValueEx = RegSetValueExStr(hKey, _
                sValueName, _
                0&, _
                lType, _
                slpData, _
                Len(slpData))

    Case REG_DWORD
        llpData = vlpData
        SetValueEx = RegSetValueExLng(hKey, _
                sValueName, _
                0&, _
                lType, _
                llpData, _
                4)
    End Select
End Function

Sub SetKeyValue(lKey As Long, sSubKey As String, _
      sValueName As String, lType As Long, vValue As Variant)
    Dim OpenKeyHdl As Long

    'open the key
    RegOpenKeyEx lKey, sSubKey, 0, KEY_ALL_ACCESS, OpenKeyHdl

    'Set the value
    SetValueEx OpenKeyHdl, sValueName, lType, vValue

    'Close the key
    RegCloseKey OpenKeyHdl

End Sub

'Get Registry Value, Arguments:
'1 - Reg Key (Ex.: HKEY_LOCAL_MACHINE),
'2 - Reg SubKey (Ex.: "Software\Microsoft\Windows\CurrentVersion"),
'3 - Name of Value (Ex.:"ProgramFilesDir" or "" for default)
'4 - Convert to text like written in reg files (*.reg)
Function GetRegValue(lKey As Long, sSubKey As String, sValueName As String, ConvRegText)
    Dim sRet As String * 255                               'Fixed-length strings
    Dim lRet As Long
    Dim OpenKeyHdl As Long
    Dim lType As Long
    Dim lLen As Long
    Dim sDataRet As String
    Dim lDataRet As Long
    Dim abDataRet() As Byte
    Dim i As Integer
    Dim BrkLine As Long

    lRet = RegOpenKeyEx(lKey, sSubKey, 0, KEY_QUERY_VALUE, OpenKeyHdl)

    lRet = RegQueryValueExLng(OpenKeyHdl, sValueName, 0&, lType, 0&, lLen)
    If lRet And lRet <> ERROR_MORE_DATA Then
        RegCloseKey OpenKeyHdl
        GetRegValue = "Error"
        Exit Function
    End If

    Select Case lType
    Case REG_DWORD
        lRet = RegQueryValueExLng(OpenKeyHdl, sValueName, _
                0&, lType, lDataRet, lLen)
        GetRegValue = CLng(lDataRet)

        If ConvRegText Then GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=dword:" & Left("00000000", 8 - Len(Hex(GetRegValue))) & Hex(GetRegValue)

    Case REG_SZ
        sDataRet = String$(lLen - 1, 0)
        lRet = RegQueryValueExStr(OpenKeyHdl, sValueName, _
                0&, lType, sDataRet, lLen)
        GetRegValue = sDataRet

        If ConvRegText Then GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=" & GetRegValue

    Case Else                                              'REG_BINARY and others
        ReDim abDataRet(lLen)
        lRet = RegQueryValueExByt(OpenKeyHdl, sValueName, _
                0&, lType, abDataRet(0), lLen)
        GetRegValue = abDataRet

        If ConvRegText Then
            If lType = REG_BINARY Then
                GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=hex:"
                sDataRet = String$(lLen, 0)
                lRet = RegQueryValueExStr(OpenKeyHdl, sValueName, 0&, lType, sDataRet, lLen)
                BrkLine = Len(GetRegValue)
                For i = 1 To lLen
                    If BrkLine >= 77 Then
                        BrkLine = 2
                        GetRegValue = GetRegValue & "\" & Chr(10) & "  "
                    End If
                    GetRegValue = GetRegValue _
                            & IIf(Len(Hex(Asc(Mid(sDataRet, i, 1)))) = 1, "0", "") _
                            & Hex(Asc(Mid(sDataRet, i, 1))) & ","
                    BrkLine = BrkLine + 3
                Next
            Else
                If ConvRegText Then GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=" & GetRegValue
            End If
        End If
    End Select
    RegCloseKey OpenKeyHdl
End Function

Sub RegDeleteSubKeys(lKey As Long, sSubKeyToOpen As String, sSubKeyToDel As String)
'No XP e Vista RegDeleteKey n|fffd|o deleta keys ou subkeys contendo subkeys, assim ele s|fffd| serve
'para deletar Keys depois de deletados as subkeys com este procedimentos
    Dim OpenKeyHdl As Long

    'open the key
    RegOpenKeyEx lKey, sSubKeyToOpen, 0, KEY_ALL_ACCESS, OpenKeyHdl

    'Delete subkey and its all subkeys
    SHDeleteKey OpenKeyHdl, sSubKeyToDel

    'Close the key
    RegCloseKey OpenKeyHdl
End Sub







Attribute VB_Name = "Module1"
Option Explicit

' Macro assigned to EditHidden Edit box
Sub SenhaM|fffd|scara()
' Dimension variables
    Dim MaskString As String, i As Integer

    MaskString = ""

    ' Match mask string length to length of text entered
    For i = 1 To Len(Workbooks("cpap_rel.mac").DialogSheets(1).EditBoxes("EditHidden").Text)
        MaskString = MaskString & "*"
    Next i

    ' Enter mask string in EditShown Edit box
    Workbooks("cpap_rel.mac").DialogSheets(1).EditBoxes("EditShown").Text = MaskString

End Sub

Sub CxDeDialogo()
    With Workbooks("cpap_rel.mac")
        .DialogSheets(1).EditBoxes("EditNome").Text = .Sheets("cpap_rel").Range("Nome").Value: bHtmlHelp = Workbooks("cpap_pri.mac").Excel4MacroSheets(1).Range("bHtmlHelp").Value
        .DialogSheets(1).EditBoxes("EditShown").Text = .Sheets("cpap_rel").Range("Senha").Value
        .DialogSheets(1).EditBoxes("EditHidden").Text = .Sheets("cpap_rel").Range("Senha").Value
        If .Sheets("cpap_rel").Range("EditAtivo") = 7 Then AtivarEditNome Else AtivarEditSenha
        .DialogSheets(1).EditBoxes("EditShown").Enabled = False
        'Usando edit de m|fffd|scara padr|fffd|o a partir do 6.0
        If Val(Application.Version) > 5 Then
            .DialogSheets(1).EditBoxes("EditShown").Visible = False    '.Width = 1
            .DialogSheets(1).EditBoxes("EditHidden").Width = 99.75
            .DialogSheets(1).EditBoxes("EditHidden").PasswordEdit = True
        Else
            .DialogSheets(1).EditBoxes("EditShown").Width = 99.75
            .DialogSheets(1).EditBoxes("EditHidden").Width = 4
        End If
        ' Display the dialog box
        .DialogSheets(1).Show
        .Sheets("cpap_rel").Range("Nome").Value = .DialogSheets(1).EditBoxes("EditNome").Text
        .Sheets("cpap_rel").Range("Senha").Value = .DialogSheets(1).EditBoxes("EditHidden").Text
    End With
End Sub

Sub ButtonOK()
    Workbooks("cpap_rel.mac").Sheets("cpap_rel").Range("Bot|fffd|oPress").Value = 1
End Sub

Sub ButtonCancel()
    Workbooks("cpap_rel.mac").Sheets("cpap_rel").Range("Bot|fffd|oPress").Value = 0
End Sub

Sub ButtonAlterarSenha()
    Workbooks("cpap_rel.mac").Sheets("cpap_rel").Range("Bot|fffd|oPress").Value = 3
End Sub

Sub ButtonSupervisor()
    Workbooks("cpap_rel.mac").Sheets("cpap_rel").Range("Bot|fffd|oPress").Value = 4
End Sub

Sub ButtonAjuda()
    If bHtmlHelp Then Application.Run "CPAP_EX8.MAC!HelpVBA", ThisWorkbook.Path & "\CPAP.chm", 120, 2 Else Application.Help ThisWorkbook.Path & "\cpap.hlp", 120
End Sub


Sub AtivarEditNome()
    With Workbooks("cpap_rel.mac").DialogSheets(1)
        .DrawingObjects("Label 4").BringToFront
        .DrawingObjects("EditNome").BringToFront
        .DrawingObjects("Label 6").BringToFront
        .DrawingObjects("EditHidden").BringToFront
        .DrawingObjects("EditShown").BringToFront
        .DrawingObjects("Button 9").BringToFront
        .DrawingObjects("Button 10").BringToFront
        .DrawingObjects("Button 11").BringToFront
        .DrawingObjects("Button 12").BringToFront
        .DrawingObjects("Button 13").BringToFront
        .DrawingObjects("Drop Down 14").BringToFront
    End With
End Sub

Sub AtivarEditSenha()
    With Workbooks("cpap_rel.mac").DialogSheets(1)
        .DrawingObjects("Label 6").BringToFront
        .DrawingObjects("EditHidden").BringToFront
        .DrawingObjects("EditShown").BringToFront
        .DrawingObjects("Label 4").BringToFront
        .DrawingObjects("EditNome").BringToFront
        .DrawingObjects("Button 9").BringToFront
        .DrawingObjects("Button 10").BringToFront
        .DrawingObjects("Button 11").BringToFront
        .DrawingObjects("Button 12").BringToFront
        .DrawingObjects("Button 13").BringToFront
        .DrawingObjects("Drop Down 14").BringToFront
    End With
End Sub

Sub LimparCx()
    Workbooks("cpap_rel.mac").DialogSheets(1).EditBoxes("EditNome").Text = ""
    Workbooks("cpap_rel.mac").DialogSheets(1).EditBoxes("EditHidden").Text = ""
    Workbooks("cpap_rel.mac").DialogSheets(1).EditBoxes("EditShown").Text = ""
End Sub

Attribute VB_Name = "Module2"
Option Explicit

' Macro assigned to EditHidden Edit box
Sub SenhaM|fffd|scara2()
' Dimension variables
    Dim MaskString As String, i As Integer

    MaskString = ""

    ' Match mask string length to length of text entered
    For i = 1 To Len(Workbooks("cpap_rel.mac").DialogSheets(2).EditBoxes("EditHidden").Text)
        MaskString = MaskString & "*"
    Next i

    ' Enter mask string in EditShown Edit box
    Workbooks("cpap_rel.mac").DialogSheets(2).EditBoxes("EditShown").Text = MaskString

End Sub

Sub CxDeDialogo2()
    With Workbooks("cpap_rel.mac")
        .DialogSheets(2).Labels("Label 4").Characters.Text = .Sheets("cpap_rel").Range("MensNovaSenha").Value
        .DialogSheets(2).EditBoxes("EditShown").Text = ""
        .DialogSheets(2).EditBoxes("EditHidden").Text = ""
        .DialogSheets(2).EditBoxes("EditShown").Enabled = False
        'Usando edit de m|fffd|scara padr|fffd|o a partir do 6.0
        If Val(Application.Version) > 5 Then
            .DialogSheets(2).EditBoxes("EditShown").Visible = False    '.Width = 1
            .DialogSheets(2).EditBoxes("EditHidden").Width = 99.75
            .DialogSheets(2).EditBoxes("EditHidden").PasswordEdit = True
        Else
            .DialogSheets(2).EditBoxes("EditShown").Width = 99.75
            .DialogSheets(2).EditBoxes("EditHidden").Width = 4
        End If
        ' Display the dialog box
        .DialogSheets(2).Show
        .Sheets("cpap_rel").Range("Senha2").Value = .DialogSheets(2).EditBoxes("EditHidden").Text
    End With
End Sub

Sub ButtonCancel2()
    Workbooks("cpap_rel.mac").Sheets("cpap_rel").Range("Bot|fffd|oPress2").Value = 0
End Sub

Sub ButtonOK2()
    Workbooks("cpap_rel.mac").Sheets("cpap_rel").Range("Bot|fffd|oPress2").Value = 1
End Sub

Attribute VB_Name = "Module3"
Option Explicit
'   32-bit Windows API declarations
Private Declare Function GetWindowsDirectoryA Lib "kernel32" (ByVal P$, ByVal S%) As Integer
'   16-bit Windows API declarations
Private Declare Function GetWindowsDirectory Lib "KERNEL" (ByVal P$, ByVal S%) As Integer

Function DataArqSystVBA(WINDOWSDIR As String) As Single
Attribute DataArqSystVBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim DataWinIni As Single
    Dim DataSysIni As Single
    DataWinIni = FileDateTime(WINDOWSDIR & "\win.ini")
    DataSysIni = FileDateTime(WINDOWSDIR & "\system.ini")
    If DataWinIni > DataSysIni Then DataArqSystVBA = DataWinIni Else DataArqSystVBA = DataSysIni
End Function

' Est|fffd| fun|fffd||fffd|o falhou no Excel 5 ao chamar a API e resolvi passar o path como
' argumento diretamente da XLM.
Function WINDOWSDIR() As String
Attribute WINDOWSDIR.VB_ProcData.VB_Invoke_Func = " \n14"
'   Returns the Windows directory by calling a Windows API function
    Dim WinPath As String
    Dim Bit32 As Boolean
    If Application.OperatingSystem Like "*32*" Or Application.OperatingSystem Like "*95*" Then Bit32 = True Else Bit32 = False
    WinPath = String(145, Chr(0))
    If Bit32 Then WINDOWSDIR = Left(WinPath, GetWindowsDirectoryA(WinPath, Len(WinPath)))
    If Not Bit32 Then WINDOWSDIR = Left(WinPath, GetWindowsDirectory(WinPath, Len(WinPath)))
End Function

Sub test()
Attribute test.VB_ProcData.VB_Invoke_Func = " \n14"
    MsgBox "Microsoft Excel is using " & Application.OperatingSystem
End Sub
Attribute VB_Name = "Module4"
Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Public NextHop As Double
Public bModal As Boolean: Public bHtmlHelp As Boolean

Sub TestAcertarRelVBA()
    MsgBox AcertarRelVBA("s:\Cpap\cpap.hlp!131")
End Sub

Function AcertarRelVBA(sHelp As String, sFormCap As String) As Boolean
'Substitui o AcertarRel XLM que usava figura em dialog n|fffd|o suportado no 20007.
    Dim i As Long, sCurDir As String
    'Ajuda
    i = InStr(1, sHelp, "!"): sCurDir = CurDir(): bHtmlHelp = Workbooks("cpap_pri.mac").Excel4MacroSheets(1).Range("bHtmlHelp").Value
    'Com o proj. proteg. essa instru|fffd||fffd|o falha. A solu|fffd||fffd|o foi colocar ..\cpap.hlp nas propriedades e fazer o diret|fffd|rio do cpap ativo.
    'Application.VBE.VBProjects("VBAProjectCxIdent").HelpFile = Left(Identifi(2).Value, I - 1)
    If Mid(ThisWorkbook.Path, 2, 1) = ":" Then ChDrive ThisWorkbook.Path
    If Mid(ThisWorkbook.Path, 2, 1) = ":" Then ChDir ThisWorkbook.Path Else Application.Run "CPAP_EX8.MAC!DirectoryVBA", ThisWorkbook.Path, False
    If i > 0 Then FormAcertarRel.HelpContextID = Right(sHelp, Len(sHelp) - i)
    FormAcertarRel.Caption = sFormCap
    bScrUpd = Application.ScreenUpdating
    Application.ScreenUpdating = True

    If Val(Application.Version) > 8 Then
        'O n|fffd|o modal n|fffd|o precisa do OnTime, mas precisa usar Interactive para n|fffd|o deixar ativar o Excel
        bModal = False
        #If VBA6 Then
            FormAcertarRel.Show 0
        #End If
        Application.Interactive = False
        Do While FormAcertarRel.Visible
            MyWait 0.1
            FormAcertarRel.GetDataHora
        Loop
        Application.Interactive = True
    Else
        'O modal tem duas vantagem serve para qualquer Excel e |fffd| modal. Essa poderia ser a op|fffd||fffd|o
        '|fffd|nica, mas como j|fffd| havia desenvolvido o n|fffd|o modal vou deixar para qualquer eventualidade.
        bModal = True
        FormAcertarRel.Show
        If NextHop > 0 Then Application.OnTime NextHop, "Hopping", , False   'Kill last OnTime
    End If
    If Mid(sCurDir, 2, 1) = ":" Then ChDrive sCurDir
    If Mid(sCurDir, 2, 1) = ":" Then ChDir sCurDir Else Application.Run "CPAP_EX8.MAC!DirectoryVBA", sCurDir, False
    Application.ScreenUpdating = bScrUpd
    AcertarRelVBA = True
End Function

Public Sub Hopping(Optional HideDisableCommand As String)
    FormAcertarRel.GetDataHora
    NextHop = Now + TimeValue("00:00:01")
    Application.OnTime NextHop, "Hopping"
End Sub

Sub MyWait(PauseSeg As Single)
    Dim Start
    Start = Timer
    Do
        DoEvents
        Sleep 1    'Com isso o CPU Usage cai de 100% para seus 0 ou 2% normal
    Loop While Timer < Start + PauseSeg
End Sub
Attribute VB_Name = "Module5"
Option Explicit
Const sApplication As String = "Excel"
Public sAppObjVer As String

Function SetAllowOpenVBA() As Long
'Tenta liberar abertura de planilha do Excel 4 retornando resultado assim:
'0 - N|fffd|o foi neces. config; 1 - Foi necess. e com sucesso sinalizando para restaurar; 3 - Foi necess., mas
'sem sucesso. Essa rotina foi desenvolvida a partir de SetAllowAccessVBOM de VBADecompiler
    Dim lAccessVBOM
    sAppObjVer = Application.Version
    If Val(sAppObjVer) <= 11 + 1 Then Exit Function

    Dim OpenKeyHdl As Long
    Dim lRet As Long
    Dim SecurAttr As SECURITY_ATTRIBUTES

    lAccessVBOM = GetRegValue(HKEY_CURRENT_USER, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppObjVer, 2)) & ".0\" & sApplication & "\Security\FileBlock", "XL4Worksheets", False)
    If lAccessVBOM = "Error" Then                          'Uma segunda tentativa
        DoEvents
        lAccessVBOM = GetRegValue(HKEY_CURRENT_USER, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppObjVer, 2)) & ".0\" & sApplication & "\Security\FileBlock", "XL4Worksheets", False)
    End If
    If lAccessVBOM = 1 Then Exit Function

    'Configurar
    If GetRegValue(HKEY_CURRENT_USER, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppObjVer, 2)) & ".0\" & sApplication & "\Security\FileBlock", "", False) = "Error" Then     'Create subkey
        RegCreateKeyEx HKEY_CURRENT_USER, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppObjVer, 2)) & ".0\" & sApplication & "\Security\FileBlock", _
                0&, vbNullString, REG_OPTION_NON_VOLATILE, _
                KEY_ALL_ACCESS, SecurAttr, OpenKeyHdl, lRet
        RegCloseKey OpenKeyHdl
    End If
    
    SetKeyValue HKEY_CURRENT_USER, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppObjVer, 2)) & ".0\" & sApplication & "\Security\FileBlock", "XL4Worksheets", REG_DWORD, 1
    DoEvents
    lAccessVBOM = GetRegValue(HKEY_CURRENT_USER, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppObjVer, 2)) & ".0\" & sApplication & "\Security\FileBlock", "XL4Worksheets", False)
    If lAccessVBOM = 1 Then SetAllowOpenVBA = 1 Else SetAllowOpenVBA = 3
End Function

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



INQUEST-PP=macro
