Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' *                                                                    *
' *                                         Version RL561 / 23.07.2018 *
' **********************************************************************
'
'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.140  Roland Lieger     20.09.2015    Added Before/AfterPrint Code - Fixed Paper Format
'  1.0.0.254  Roland Lieger      6.11.2015    Added DataValid() Check
'  1.0.0.300  Roland Lieger     24.11.2015    Delayed Selection of Province
'  1.0.0.306  Roland Lieger     28. 1.2016    Added Support for Standardkosten
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

' **********************************************************************
' *                                                                    *
' *                       Workbook_BeforePrint()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Handle the Global Workbook's BeforePrint Event
' Note: This is a _Workbook_ Event - There is no _Worksheet_ Event that
' is triggered before printing. Thus we have to do a switch here.
' Note: There is no corresponding AfterPrint Event. Thus we have to
' set a timer that will time out after printing and do the AfterPrint
' actions there. Not very elegant, but seemingly can't be helped ;(
Sub Workbook_BeforePrint(ByRef Cancel As Boolean)
  Dim WSheet As Worksheet
  Dim ObjWSheet As Object
  
  Set WSheet = ActiveSheet
  Set ObjWSheet = WSheet
  
  ' It might seem queer that we cast our WSheet from the well defined
  ' type Worksheet to a general Object. However this is necessary for
  ' the VBA compiler. If the VBA compiler sees an expression of
  ' WSheet.Worksheet_BeforePrint(...) it will try to resolve the function
  ' call at compile time, however Worksheet_BeforePrint is not defined
  ' for general worksheets, so the resolution at compile time fails.
  ' However if we cast the WSheet to an object, the compiler can not
  ' discover that ObjWSheet will always be a worksheet and will delay
  ' the resolution of the function call to run time. At runtime the
  ' function will be available for the selected worksheet (or we will
  ' get an error).
  Cancel = False  ' Just to be on the safe side, in case the call to
                  ' Worksheet_BeforePrint is not defined for our worksheet
  
  On Error Resume Next
  ObjWSheet.Worksheet_BeforePrint WSheet:=WSheet, Cancel:=Cancel
  On Error GoTo 0

End Sub ' Workbook_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                           Workbook_Open()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Private Sub Workbook_Open()
  EnterSysCallback
  ' Debug.Print "Workbook_Open() - Executed" & Now
  
  ' After opening a workbook Excel tries to evaluate all user defined
  ' functions. At the same time its issues a Workbook.Open event and
  ' processes that in parallel. Strange things can happen as a result
  ' of the race conditions that can occur in this parallel processing.
  ' We shall therefore NOT call PaymAppl_SelectProvince() directly.
  ' Instead we shall wait a few seconds (hope that Excel is done with
  ' the UDFs by then) and then select the province. In most cases the
  ' province has previously been selected anyways and no visible action
  ' will take place, so the delay is unnoticed by the user.
  ' PaymAppl_SelectProvince  ' <-- Don't do this!
  gv_CopySheetCounter = 0
  gv_Summary_Dirty = True
  Application.OnTime Now() + TimeValue("0:00:02"), "PaymAppl_SelectProvince"
  
  ExitSysCallback
End Sub ' Workbook_Open()
'

' **********************************************************************
' *                                                                    *
' **********************************************************************

' Public Const gc_LabourCostWorkSheet As String = "Personalkosten"
' Public Const gc_LabourCostWorkSheetAbbr As String = "Personalk. - "
' Public Const gc_Labour_ApplicationSubject As String = "Labour_ApplicationSubject"

' Public Const gc_StdCost_UserSheet As String = "Standardkosten"
' Public Const gc_StdCost_UserSheetAbbr As String = "Std.Kosten - "
' Public Const gc_StdCost_ApplicationSubject As String = "StdCost_ApplicationSubject"

' **********************************************************************
' *                      Global Action Handlers                        *
' **********************************************************************



Attribute VB_Name = "FixShapes"
' **********************************************************************
' *                                                                    *
' *                            FixShapes.bas                           *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************

Option Explicit

' Excel 2010 does unfortunately have a bug, that causes all shapes
' (e.g. buttons, checkboxes, radio buttons) in a spreadsheet to become
' resized and relocated when several sheets are previewed or printed
' at the same time. Despite several attempts by Microsoft to resolve this
' issue by various hotfixes, the issue was never fixed, and since Excel
' 2010 is now (2016) no longer officially supported by Microsoft the
' bug will probably never get fixed.
' The issue is reasonably well documented in:
'    https://social.technet.microsoft.com/Forums/office/en-US/8d1beb40-4209-435f-bb36-8bf23a1b0e9b/2010-excel-print-preview-moves-checkboxes?forum=excel
'
' However Excel 2010 is still widely use in real life (e.g. in the BMLFWU),
' so we can not simply ignore the bug.
' We shall therefore add a tiny canary button, that is located at the lower
' right corner of each spreadsheet. When this button is no longer a the
' correct position, we know that the bug must have taken its toll, and
' we know that the buttons have moved. Since the bug always affects all
' buttons positions and sizes by the same factor and we know the correct
' position of the canary button, we can compute the correct factor and
' fix everything.
' This is definitely a dirty work-around for a bug that should actually
' have been fixed by Microsoft, but since Microsoft did not do its job,
' this is probably the best we can get ;(

' **********************************************************************
' *                                                                    *
' *                        MarkAllTemplateShapes()                     *
' *                                                                    *
' **********************************************************************
Sub MarkAllTemplateShapes(Optional WBook As Workbook = Nothing)
  Dim WSheet As Worksheet
  
  If WBook Is Nothing Then
    Set WBook = ActiveWorkbook
  End If
  
  For Each WSheet In WBook.Worksheets
    If (InStr(WSheet.Name, gc_TemplateCookie) > 0) Then
      MarkShapes WSheet:=WSheet, TemplateSheet:=WSheet
    End If
  Next WSheet
  
End Sub ' MarkAllTemplateShapes()

' **********************************************************************
' *                                                                    *
' *                             MarkShapes()                           *
' *                                                                    *
' **********************************************************************
Sub MarkShapes(Optional WSheet As Worksheet = Nothing, _
               Optional TemplateSheet As Worksheet = Nothing)
  Dim XShape As Shape
  Dim XProperty As CustomProperty
  Dim RangeName As String
  Dim XName As Name
  Dim I As Integer
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  If Not (TemplateSheet Is Nothing) Then
    For I = 1 To WSheet.CustomProperties.Count
       If (WSheet.CustomProperties(I).Name = "TemplateSheet") Then
         WSheet.CustomProperties(I).Delete
         Exit For
       End If
    Next I
    Set XProperty = WSheet.CustomProperties.Add(Name:="TemplateSheet", Value:=TemplateSheet.Name)
  End If
  
  For I = 1 To WSheet.Shapes.Count
    Set XShape = WSheet.Shapes(I)
    
    RangeName = ""
    If XShape.Type = msoFormControl Then
      If XShape.FormControlType = xlButtonControl Or _
         XShape.FormControlType = xlCheckBox Or _
         XShape.FormControlType = xlOptionButton Then
       RangeName = "Form_" & XShape.Name
      End If ' if (FormControlType = ...)
    ElseIf XShape.Type = msoPicture Then
      RangeName = "Pict_" & XShape.Name
    End If ' if (Shape.Type = ...)
       
    ' Debug.Print XShape.Name, MakeValidRangeName("Form_" & XShape.Name), XShape.TopLeftCell.Row, XShape.TopLeftCell.Column
    If (RangeName <> "") Then
      Set XName = WSheet.Names.Add(Name:=MakeValidRangeName(RangeName), _
                                   RefersTo:=XShape.TopLeftCell, Visible:=False)
    End If
  Next I

End Sub ' MarkShapes()

' **********************************************************************
' *                                                                    *
' *                            RepairShapes()                          *
' *                                                                    *
' **********************************************************************
Sub RepairShapes(Optional BrokenSheet As Worksheet = Nothing, _
                 Optional TemplateSheet As Worksheet = Nothing)
  Dim ApplVersion As Double
  Dim MasterName As String
  Dim BrokenShape As Shape
  Dim MasterShape As Shape
  Dim BrokenTargetRange As Range
  Dim MasterTargetRange As Range
  Dim RangeName As String
  Dim I As Integer
  Dim j As Integer
  Dim MatchLen As Integer
  Dim OptMatchLen As Integer
  Dim OptMatchIdx As Integer
  Dim Top As Double, Left As Double
  Dim Dirty As Boolean
  Dim LoopCnt As Integer
  
  ' Various Values for Application.Version
  '  Excel 95   : 7.0
  '  Excel 97   : 8.0
  '  Excel 2000 : 9.0
  '  Excel 2002 : 10.0
  '  Excel 2003 : 11.0
  '  Excel 2007 : 12.0
  '  Excel 2010 : 14.0
  '  Excel 2013 : 15.0
  '  Excel 2016 : 16.0
  ApplVersion = Val(Application.Version)
  If (ApplVersion <> 14#) Then
    ' Exit Sub
  End If
  
  If (BrokenSheet Is Nothing) Then
    Set BrokenSheet = ActiveSheet
  End If
  
  If (TemplateSheet Is Nothing) Then
    MasterName = ""
    For I = 1 To BrokenSheet.CustomProperties.Count
      If (BrokenSheet.CustomProperties(I).Name = "TemplateSheet") Then
        MasterName = BrokenSheet.CustomProperties(I).Value
        Exit For
      End If
    Next I
    
    On Error Resume Next
    Set TemplateSheet = BrokenSheet.Parent.Worksheets(MasterName)
    On Error GoTo 0
  End If
  
  PushProtection
  RemoveProtection
  
  Dirty = True
  LoopCnt = 0
  
  While Dirty And (LoopCnt < 3)
    LoopCnt = LoopCnt + 1
    Dirty = False
    
    For I = 1 To BrokenSheet.Shapes.Count
      Set BrokenShape = BrokenSheet.Shapes(I)
      
      RangeName = ""
      If (BrokenShape.Visible) Then
        If BrokenShape.Type = msoFormControl Then
          If BrokenShape.FormControlType = xlButtonControl Or _
             BrokenShape.FormControlType = xlCheckBox Or _
             BrokenShape.FormControlType = xlOptionButton Then
           RangeName = "Form_" & BrokenShape.Name
          End If ' if (FormControlType = ...)
        ElseIf BrokenShape.Type = msoPicture Then
          ' RangeName = "Pict_" & BrokenShape.Name
        End If ' if (Shape.Type = ...)
      End If
      ' Debug.Print BrokenShape.Name, RangeName
       
      If (RangeName <> "") Then
        Set BrokenTargetRange = Nothing
        On Error Resume Next
        Set BrokenTargetRange = BrokenSheet.Range(RangeName)
        On Error GoTo 0
      
        Set MasterShape = Nothing
        Set MasterTargetRange = Nothing
        
        If Not (TemplateSheet Is Nothing) Then
          OptMatchLen = 0
          OptMatchIdx = 0
          For j = 1 To TemplateSheet.Shapes.Count
            Set MasterShape = TemplateSheet.Shapes(j)
            If (MasterShape.Name = BrokenShape.Name) Then
              OptMatchIdx = j
              Exit For
            End If
          Next j
          
          If (OptMatchIdx = 0) Then
            For j = 1 To TemplateSheet.Shapes.Count
              Set MasterShape = TemplateSheet.Shapes(j)
              If (MasterShape.Type = BrokenShape.Type) Then
                MatchLen = f_MatchLen(MasterShape.Name, BrokenShape.Name)
                If (MatchLen > OptMatchLen) Then
                  OptMatchLen = MatchLen
                  OptMatchIdx = j
                  If (OptMatchLen > Len(BrokenShape.Name)) Then
                    Exit For
                  End If
                End If
              End If
            Next j
          End If
          
          Set MasterShape = Nothing
          Set MasterTargetRange = Nothing
          If (OptMatchIdx > 0) Then
            Set MasterShape = TemplateSheet.Shapes(OptMatchIdx)
            RangeName = ""
            If MasterShape.Type = msoFormControl Then
              If MasterShape.FormControlType = xlButtonControl Or _
                 MasterShape.FormControlType = xlCheckBox Or _
                 MasterShape.FormControlType = xlOptionButton Then
               RangeName = "Form_" & MasterShape.Name
              End If ' if (FormControlType = ...)
            ElseIf MasterShape.Type = msoPicture Then
              RangeName = "Pict_" & MasterShape.Name
            End If ' if (Shape.Type = ...)
          
            If (RangeName <> "") Then
              Set MasterTargetRange = Nothing
              On Error Resume Next
              Set MasterTargetRange = TemplateSheet.Range(RangeName)
              On Error GoTo 0
            End If
          End If
        End If
        
        If Not (MasterShape Is Nothing) Then
          If (Abs(BrokenShape.Width - MasterShape.Width) > 0.6) Then
            BrokenShape.Width = MasterShape.Width
            Dirty = True
          End If
          If (Abs(BrokenShape.Height - MasterShape.Height) > 0.6) Then
            BrokenShape.Height = MasterShape.Height
            Dirty = True
          End If
        End If
        
        If BrokenShape.Placement = xlFreeFloating Then
          If Not (MasterShape Is Nothing) Then
            If (Abs(BrokenShape.Top - MasterShape.Top) > 0.6) Then
              BrokenShape.Top = MasterShape.Top
              Dirty = True
            End If
            If (Abs(BrokenShape.Left - MasterShape.Left) > 0.6) Then
              BrokenShape.Left = MasterShape.Left
              Dirty = True
            End If
          End If
        ElseIf Not (BrokenTargetRange Is Nothing) Then
          If Not (MasterTargetRange Is Nothing) Then
            Top = BrokenTargetRange.Top + (MasterShape.Top - MasterTargetRange.Top)
            Left = BrokenTargetRange.Left + (MasterShape.Left - MasterTargetRange.Left)
            If (Abs(BrokenShape.Top - Top) > 0.6) Then
              BrokenShape.Top = Top
              Dirty = True
            End If
            If (Abs(BrokenShape.Left - Left) > 0.6) Then
              BrokenShape.Left = Left
              Dirty = True
            End If
          Else
            If (BrokenShape.Top < BrokenTargetRange.Top) Or _
               (BrokenShape.Top > BrokenTargetRange.Top + BrokenTargetRange.Height) Then
              BrokenShape.Top = BrokenTargetRange.Top + 4
              Dirty = True
          End If
            If (BrokenShape.Left < BrokenTargetRange.Left) Or _
               (BrokenShape.Left > BrokenTargetRange.Left + BrokenTargetRange.Width) Then
              BrokenShape.Left = BrokenTargetRange.Left + 4
              Dirty = True
            End If
          End If
        End If
      End If
    Next I
  Debug.Print "RepairShapes: " & BrokenSheet.Name & " - LoopCnt = " & LoopCnt & " - Dirty = " & Dirty; ""
  Wend ' While Dirty and (LoopCnt < 3)
  
  PopProtection
    
End Sub ' RepairShapes()
'

' **********************************************************************
' *                                                                    *
' *                             BreakShapes()                          *
' *                                                                    *
' **********************************************************************
Sub BreakShapes(Optional WSheet As Worksheet = Nothing)
  Dim XShape As Shape
  Dim I As Integer
  Dim ModifyShape As Boolean
  
  
  If WSheet Is Nothing Then
    Set WSheet = ActiveSheet
  End If
  
  I = Rnd(-1)
  Randomize
  
  For I = 1 To WSheet.Shapes.Count
    Set XShape = WSheet.Shapes(I)
    
    ModifyShape = False
    If XShape.Type = msoFormControl Then
      If XShape.FormControlType = xlButtonControl Or _
         XShape.FormControlType = xlCheckBox Or _
         XShape.FormControlType = xlOptionButton Then
       ModifyShape = True
      End If ' if (FormControlType = ...)
    ElseIf XShape.Type = msoPicture Then
      ModifyShape = True
    End If ' if (Shape.Type = ...)
    
    If (ModifyShape) Then
      XShape.Top = XShape.Top + (Rnd(1) * 200) - 100
      XShape.Left = XShape.Left + (Rnd(1) * 200) - 100
      XShape.Width = (Rnd(1) * 80) + 10
      XShape.Height = (Rnd(1) * 40) + 10
    End If
  Next I
End Sub ' BreakShapes()

' **********************************************************************
' *                                                                    *
' *                        MakeValidRangeName()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function MakeValidRangeName(FormName As String) As String
  Dim RangeName As String
  Dim I As Integer
  Dim C As String
  Dim PrevC As String
  Dim Pos As Integer
  Const AccChars = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|<>"
  Const RegChars = "SZszYAAAAAACEEEEIIIIDNOOOOOUUUUYaaaaaaceeeeiiiidnooooouuuuyy[]"
  ' Const AccChars = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ' Const RegChars = "aouAOUs"
  
  FormName = Trim(FormName)
  
  PrevC = "*"
  For I = 1 To Len(FormName)
    C = Mid(FormName, I, 1)
    If (C = vbCr) Or (C = vbLf) Or (C = vbTab) Then
      C = " "
    Else
      Pos = InStr(1, AccChars, C)
      If (Pos > 0) Then
        C = Mid(RegChars, Pos, 1)
      End If
    End If
    
    ' Slashes are separator characters - Replace by "."
    If (C = "/") Or (C = "\") Or (C = ":") Then
      C = "."
    End If
    
    If ((C >= "A") And (C <= "Z")) Or _
       ((C >= "a") And (C <= "z")) Or _
       ((C >= "0") And (C <= "9")) Or _
       (C = "_") Or (C = ".") Or (C = " ") Then
      ' C is a valid character for file/path names - No action required...
      ' Note: Do we really want to allow '.'? How about '|fffd|' or '''?
      ' Forbidden characters are: < > : " / \ | ? *
      '    (see: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx)
    Else
      C = "."
    End If
    
    ' Replace (multiple) spaces by a single '_'
    If (PrevC = " ") And (C <> " ") Then
      RangeName = RangeName & "_"
    End If
    
    If (C <> " ") Then
      RangeName = RangeName & C
    End If
    
    PrevC = C
  Next I
  
  MakeValidRangeName = RangeName
End Function ' MakeValidRangeName()

' **********************************************************************
' *                                                                    *
' *                            f_MatchLen()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function f_MatchLen(x As String, y As String) As Integer
  Dim LenX As Integer
  Dim LenY As Integer
  Dim CmpLen As Integer
  Dim I As Integer
  
  LenX = Len(x)
  LenY = Len(y)
  
  If (LenX < LenY) Then
    CmpLen = LenX
  Else
    CmpLen = LenY
  End If
  
  For I = 1 To CmpLen
    If (Mid(x, I, 1) <> Mid(y, I, 1)) Then
      f_MatchLen = I - 1
      Exit Function
    End If
  Next I
  
  ' Note: If the two strings are perfect matches, we shall
  ' add one to the matching length to emphasise that it is
  ' not just a header match!
  ' "Hello" is a better match to "Hello" than "Hello World" is
  If (LenX = LenY) Then
    f_MatchLen = CmpLen + 1
  Else
    f_MatchLen = CmpLen
  End If
  
End Function ' f_MatchLen()
'

' **********************************************************************
' *                                                                    *
' *                          FixWSheetNames()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function FixWSheetNames(Optional WBook As Workbook = Nothing) As Boolean
  Dim WSheet As Worksheet
  Dim WSheetObj As Object
  Dim WSheetCnt As Integer
  Dim WSheetIdx As Integer
  Dim SearchIdx As Integer
  Dim WSheetName As String
  Dim PreferredWSheetName As String
  Dim CoreWSheetName As String
  Dim UpperWSheetName As String
  Dim UniqueWSheetName As String
  Dim Found As Boolean
  Dim Dirty As Boolean
  Dim Cnt As Integer
  Dim SubstWSheetName As String
  
  If WBook Is Nothing Then
    Set WBook = ActiveWorkbook
  End If
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  Dirty = False
  
  WSheetCnt = WBook.Worksheets.Count
  For WSheetIdx = 1 To WSheetCnt
    Set WSheet = WBook.Worksheets(WSheetIdx)
    If (InStr(WSheet.Name, gc_TemplateCookie) <> 1) And _
       (InStr(WSheet.Name, gc_TableCookie) <> 1) Then
      WSheetName = WSheet.Name
      PreferredWSheetName = WSheetName
      Debug.Print "Processing WSheet(" & CStr(WSheetIdx) & ") (" & WSheetName & ")"
      ' Ask the worksheet, what name it would prefer.
      ' Note: Not all worksheets provide this functionality, so we must be
      ' prepared that this call causes an error...
      On Error Resume Next
      Set WSheetObj = WSheet
      PreferredWSheetName = WSheetObj.Worksheet_GetPreferredWSheetName(WSheet:=WSheet)
      On Error GoTo 0
      PreferredWSheetName = CleanWSheetName(PreferredWSheetName)
      
      ' If the current name is not the preferred name, that there might be
      ' a reason why this is so. We shall check if the preferred name is
      ' already taken by a previous worksheet. If not, we shall be happy.
      ' Otherwise the current worksheet can not get its preferred name and
      ' we shall create a new name by adding a counter at the end, and counting
      ' until we find an unused name...
      If (PreferredWSheetName <> WSheetName) Then
        UpperWSheetName = UCase(PreferredWSheetName)
        Found = False
        For SearchIdx = 1 To WSheetIdx - 1
          If (UCase(WBook.Worksheets(SearchIdx).Name) = UpperWSheetName) Then
            Found = True
            Exit For
          End If
        Next SearchIdx
        If Found Then
          CoreWSheetName = Left(PreferredWSheetName, 27)
          For Cnt = 2 To 200
            If (Cnt < 10) Then
              PreferredWSheetName = Left(CoreWSheetName, 27) & " (" & CStr(Cnt) & ")"
            ElseIf (Cnt < 100) Then
              PreferredWSheetName = Left(CoreWSheetName, 26) & " (" & CStr(Cnt) & ")"
            Else
              PreferredWSheetName = Left(CoreWSheetName, 25) & " (" & CStr(Cnt) & ")"
            End If
            
            UpperWSheetName = UCase(PreferredWSheetName)
            Found = False
            For SearchIdx = 1 To WSheetIdx - 1
              If (UCase(WBook.Worksheets(SearchIdx).Name) = UpperWSheetName) Then
                Found = True
                Exit For
              End If
            Next SearchIdx
            If Not Found Then
              Exit For
            End If
          Next Cnt
        End If ' If Found
        
        If Found Then
          Exit For  ' Unable to find useful name
        End If
      End If ' If (PreferredWSheetName <> WSheetName)
      
      ' We now know have a worksheet name and we know that it not taken by
      ' a previous worksheet. However it might be taken by a later worksheet.
      ' Thus we might to find a new name for the later worksheet now...
      If (PreferredWSheetName <> WSheetName) Then
        Found = False
        For SearchIdx = WSheetIdx + 1 To WSheetCnt
          If (UCase(WBook.Worksheets(SearchIdx).Name) = UpperWSheetName) Then
            Found = True
            Exit For
          End If
        Next SearchIdx
      
        ' Our desired name was already taken ;( - We shall create a new name
        ' for the worksheet that blocks our name. We could use a fancy algorithm
        ' here, but it really be a waste of effort, since the temporary name
        ' will be in effect for just a few milliseconds.
        ' Thus just using UniqueSheetName is sufficient...
        If (Found) Then
          SubstWSheetName = UniqueSheetName(PreferredWSheetName)
          WBook.Worksheets(SearchIdx).Name = SubstWSheetName
        End If
        
        WBook.Worksheets(WSheetIdx).Name = PreferredWSheetName
        Dirty = True
      End If ' If (PreferredWSheetName <> WSheetName)
    End If ' if (not Template)
  Next WSheetIdx
  
  PopProtection WBook:=WBook
  
  FixWSheetNames = Dirty
End Function ' FixWSheetNames()

' **********************************************************************
' *                            FixShapes.bas                           *
' **********************************************************************

Attribute VB_Name = "GeneralCode"
' **********************************************************************
' *                                                                    *
' *                           GeneralCode.bas                          *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' General functions that are useful in many situations...

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.122   Roland Lieger     3.07.2015    Added Lots of Comments / Getting Ready for Release
'  1.0.0.130   Roland Lieger     8.07.2015    Debugging / Secondary Unlock Applicant
'  1.0.0.140   Roland Lieger    20.09.2015    Better Printing
'  1.0.0.248   Roland Lieger     4.11.2015    Getting Ready for Release
'  1.0.0.268   Roland Lieger    11.11.2015    Getting Ready for Release
'                                             Added ThisWorkbook at lots of places
'  1.0.0.306   Roland Lieger    16.01.2016    Added ShowAllDocumentProperties()
'  1.0.0.325   Roland Lieger    13.02.2016    Added CopyUserSheet
'  1.0.0.356   Roland Lieger     2.03.2016    Added CopyUserShape
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************
'
' It seems that Excel sometimes gets confused about character encoding
' and switches between Latin-1 and some other encoding (???), which is
' no problem in the Visual Basic Code, since it is ASCII-only anyways,
' but some worksheets are named using accented characters, and these can
' then suddenly no longer be found after the accented characters in the
' Visual Basic code get corrupted (but not in the worksheets themselved),
' which causes the application to crash. ;(
' Excel (2002) stores the german Umlaut Characters using Latin1 encoding.
'
' To make this condition easier to detect, we shall show some accented
' characters here:
'    |fffd| (Ae) = Latin1(0xC4) = UniCode(U+00C4) = UTF8(0xC3 0x84)
'    |fffd| (ae) = Latin1(0xE4) = UniCode(U+00E4) = UTF8(0xC3 0xA4)
'    |fffd| (Oe) = Latin1(0xD6) = UniCode(U+00D6) = UTF8(0xC3 0x96)
'    |fffd| (oe) = Latin1(0xF6) = UniCode(U+00F6) = UTF8(0xC3 0xB6)
'    |fffd| (Ue) = Latin1(0xDC) = UniCode(U+00DC) = UTF8(0xC3 0x9C)
'    |fffd| (ue) = Latin1(0xFC) = UniCode(U+00FC) = UTF8(0xC3 0xBC)
'    |fffd| (ss) = Latin1(0xDF) = UniCode(U+00DF) = UTF8(0xC3 0x9F)
'    Byte Order Mark = UniCode(U+FEFF) = UTF8(0xEF 0xBB 0xBF)
'
' **********************************************************************
' **********************************************************************

Option Explicit

Public Const gc_Greeting As String = "RL & RF"
Public Const gc_TemplateCookie As String = "TEMPLATE "
Public Const gc_TableCookie As String = "TABLE "
Public Const gc_DeletedCookie As String = "DELETED "
' Public Const gc_StandAloneSheets As Boolean = False
' Public Const gc_StandAloneSheets As Boolean = True

Public Const gc_DebugMode As Boolean = False
Public Const gc_DebugApplicantName As String = "DebugMode"
Public Const gc_UnlockApplicantName As String = "LE1420"  ' vgl. Landwirtschaftl. Entwicklung 2014-20
Public Const gc_ResetConfigApplicantName As String = "ResetConfig"
Public Const gc_UnlockWBookApplicantName As String = "UnlockWBook"
Public Const gc_LockWBookApplicantName As String = "LockWBook"

Public Const gc_ReducedScreenFlicker As Boolean = True
Public Const gc_DisplayAreYouSureDialogs As Boolean = True

' Public gv_SplitWorkbookInProgress As Boolean
Public Const gv_SplitWorkbookInProgress As Boolean = False
' Public gv_DisableWSheetMacros As Boolean
Public Const gv_DisableWSheetMacros As Boolean = False

Public gv_CopySheetCounter As Integer
Dim gv_CallbackRecursionDepth As Integer

Type ProtectStack_t
  WBook As Workbook
  PrevWBookProtected As Boolean
  WSheet As Worksheet
  PrevWSheetProtected As Boolean
  PrevWSheetProtectUserInterfaceOnly As Boolean
  PrevWSheetProtectEnableAutoFilter As Boolean
  ' PrevWSheetProtectEnableOutlining As Boolean
  PrevWSheetProtectDrawingObjects As Boolean
  PrevWSheetProtectEnableFormattingRows As Boolean
  PrevWSheetProtectEnableFormattingColumns As Boolean
  PrevUpdating As Boolean
  PrevEnableEvents As Boolean
  PrevDisplayAlerts As Boolean
  PrevCalculation As Integer
End Type

Const c_ProtectStackDepth As Integer = 10 '
Dim v_ProtectStack(0 To c_ProtectStackDepth - 1) As ProtectStack_t
Dim v_ProtectStackPos As Integer
Dim v_ProtectStackPosMax As Integer

' **********************************************************************
' *                                                                    *
' *                         EnterSysCallback()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub EnterSysCallback()
  ' Debug.Print Format(Now) & " - EnterSysCallback"
  gv_CallbackRecursionDepth = gv_CallbackRecursionDepth + 1
  If (gv_CallbackRecursionDepth > 1) Then
    ' MsgBox Prompt:="RecursionLevel > 1", Title:="System Callback Recursion Level"
  End If
End Sub ' EnterSysCallback()
'

' **********************************************************************
' *                                                                    *
' *                         ExitSysCallback()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub ExitSysCallback()
  ' Debug.Print Format(Now) & " - ExitSysCallback"
  gv_CallbackRecursionDepth = gv_CallbackRecursionDepth - 1
  If (gv_CallbackRecursionDepth < 0) Then
    MsgBox Prompt:="RecursionLevel < 0", Title:="System Callback Recursion Level"
  End If
End Sub ' ExitSysCallback()
'

' **********************************************************************
' *                                                                    *
' *                          StandAloneSheet()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function StandAloneSheet() As Boolean
  StandAloneSheet = Not WorksheetExists(gc_Stm_CoreDataWorkSheet)
End Function ' StandAloneSheet()
'

' **********************************************************************
' *                                                                    *
' *                    CompletePaymentApplication()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function CompletePaymentApplication() As Boolean
  CompletePaymentApplication = WorksheetExists(gc_PaymAppl_WorkSheet)
End Function ' CompletePaymentApplication()
'

' **********************************************************************
' *                                                                    *
' *                         ColumnIdxToTitle()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Excel (like most other spreadsheets) uses integer number to label the
' rows of a spreadsheet and uppercase letters for the columns.
' Since there are just 26 uppercase letters in the english alphabet,
' additional columns beyond column 26 are labeled with groups of two
' letters. This makes room for (1+26) * 26 = 702 columns before labels
' run out (or 3-letter labels would be needed), since.
' Thus the mapping is:
' Column 1 --> A,   2 --> B,  ..., 26 --> Z,
'       27 --> AA, 28 --> AB, ..., 52 --> AZ,
'       53 --> BA, 54 --> BB, ..., 78 --> BZ,
'                          ...
'      677 --> ZA,678 --> ZB, ...,702 --> ZZ
' Note: This is not a normal number representation using base 26 and
' using the letters A-Z as digits, since there is no zero, just a
' leading blank that sort of fulfills this function, but that can not
' appear in the middle of a column title...
'
' The function ColumnIdxToTitle() converts a column label given as
' an integer (in the range 1..702) to a column title
Function ColumnIdxToTitle(ColumnIdx_In As Integer) As String
  Dim x As Integer
  If (ColumnIdx_In < 1) Or (ColumnIdx_In > 27 * 26) Then
    ColumnIdxToTitle = "?"
  ElseIf (ColumnIdx_In <= 26) Then
    ColumnIdxToTitle = Chr(64 + ColumnIdx_In) ' A ... Chr(65)
  Else
    x = ColumnIdx_In - 1
    ColumnIdxToTitle = Chr(64 + (x \ 26)) & Chr(65 + (x Mod 26))
  End If
End Function ' ColumnIdxToTitle()
'

' **********************************************************************
' *                                                                    *
' *                         ColumnTitleToIdx()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Excel (like most other spreadsheets) uses integer number to label the
' rows of a spreadsheet and uppercase letters for the columns.
' Since there are just 26 uppercase letters in the english alphabet,
' additional columns beyond column 26 are labeled with groups of two
' letters. This makes room for (1+26) * 26 = 702 columns before labels
' run out (or 3-letter labels would be needed), since.
' Thus the mapping is:
' Column 1 --> A,   2 --> B,  ..., 26 --> Z,
'       27 --> AA, 28 --> AB, ..., 52 --> AZ,
'       53 --> BA, 54 --> BB, ..., 78 --> BZ,
'                          ...
'      677 --> ZA,678 --> ZB, ...,702 --> ZZ
' Note: This is note a normal number representation using base 26 and
' using the letters A-Z as digits, since there is no zero, just a
' leading blank that sort of fulfills this function, but that can not
' appear in the middle of a column title...
'
' The function ColumnTitleToIdx() converts a column label given as
' a string (of 1 or 2 letters) to a column index.
Function ColumnTitleToIdx(ColumnTitle_In As String) As Integer
  Dim C As String
  Dim ColumnIdx As Integer
  Dim Pos As Integer
  Dim TLen As Integer
  
  ColumnIdx = 0
  TLen = Len(ColumnTitle_In)
  If (TLen = 1) Or (TLen = 2) Then
    For Pos = 1 To TLen
      C = Mid(ColumnTitle_In, Pos, 1)
      If (C >= "A") And (C <= "Z") Then
        ColumnIdx = 26 * ColumnIdx + Asc(C) - 64   ' A ... Chr(65)
      ElseIf (C >= "a") And (C <= "z") Then
        ColumnIdx = 26 * ColumnIdx + Asc(C) - 96   ' a ... Chr(97)
      Else
        ColumnIdx = 0
        Exit For
      End If
    Next
  End If
  
  ColumnTitleToIdx = ColumnIdx
End Function ' ColumnTitleToIdx()
'

' **********************************************************************
' *                                                                    *
' *                           IsEmptyString()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Check that a String is an empty string or consists entirely of spacing
' characters (i.e. is visually empty)
Function IsEmptyString(Text As String) As Boolean
  IsEmptyString = (Trim(Text) = "")
End Function ' IsEmptyString()
'

' **********************************************************************
' *                                                                    *
' *                            StripAccents()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function StripAccents(Text As String)
  Dim AccentedChar As String * 1
  Dim RegularChar  As String * 1
  Dim I As Integer

  '-- Add more chars to these 2 string as you want
  '-- You may have problem with unicode chars that has code > 255
  '-- such as some Vietnamese characters that are outside of ASCII code (0-255)
  ' Const AccChars = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ' Const RegChars = "SZszYAAAAAACEEEEIIIIDNOOOOOUUUUYaaaaaaceeeeiiiidnooooouuuuyy"
  Const AccChars = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Const RegChars = "aouAOUs"

  For I = 1 To Len(AccChars)
    AccentedChar = Mid(AccChars, I, 1)
    RegularChar = Mid(RegChars, I, 1)
    Text = Replace(Text, AccentedChar, RegularChar)
  Next
  
  StripAccents = Text
  
End Function ' StripAccents()
'

' **********************************************************************
' *                                                                    *
' *                          CleanWSheetName()                         *
' *                                                                    *
' **********************************************************************
Function CleanWSheetName(WorksheetName As String) As String
  WorksheetName = Trim(WorksheetName)
  If (WorksheetName = "") Then
    CleanWSheetName = "Unbenannt"
  Else
    WorksheetName = Replace(WorksheetName, ":", ".")
    WorksheetName = Replace(WorksheetName, "\", "-")
    WorksheetName = Replace(WorksheetName, "/", "-")
    WorksheetName = Replace(WorksheetName, "?", ".")
    WorksheetName = Replace(WorksheetName, "*", "+")
    WorksheetName = Replace(WorksheetName, "[", "(")
    WorksheetName = Replace(WorksheetName, "]", ")")
    WorksheetName = Replace(WorksheetName, "!", ".")
    WorksheetName = Replace(WorksheetName, Chr(34), "")
    WorksheetName = Replace(WorksheetName, Chr(39), "")
    WorksheetName = Replace(WorksheetName, Chr(96), "")
    If (WorksheetName = "") Then
      CleanWSheetName = "Unbenannt"
    Else
      CleanWSheetName = Left(WorksheetName, 31)
    End If
  End If
End Function ' CleanWSheetName()
'

' **********************************************************************
' *                                                                    *
' *                          WorksheetExists()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Each Excel worksheet must use a unique name. WorksheetExists()
' checks if a given name is already used by a worksheet...
Function WorksheetExists(WorksheetName As String, _
                         Optional WBook As Workbook = Nothing) As Boolean
  Dim WSheet As Worksheet
  
  If (WBook Is Nothing) Then
    Set WBook = ActiveWorkbook
  End If
  
  WorksheetExists = False
  WorksheetName = UCase(WorksheetName)
  For Each WSheet In WBook.Worksheets
    If UCase(WSheet.Name) = WorksheetName Then
      WorksheetExists = True
    End If
  Next WSheet
End Function ' WorksheetExists()
'

' **********************************************************************
' *                                                                    *
' *                         GetCallerRowIdx()                          *
' * 89012345678901234567890123456789++765432109876543210987654321098   *
' *                                                                    *
' **********************************************************************
' Sometimes we need to distinguish buttons that have the same function
' for different areas. While they all look alike, we need to determine
' where they are (in relation to cell coordinates)
Function GetCallerRowIdx() As Integer
  Dim CallerName As String
  Dim Caller As Shape
  
  On Error GoTo CallerInvalid
  CallerName = Application.Caller
  Set Caller = ActiveSheet.Shapes(CallerName)
  GetCallerRowIdx = GetShapeRowIdx(Caller)
  Exit Function
  
CallerInvalid:
  GetCallerRowIdx = -1
End Function ' GetCallerRowIdx()
'

' **********************************************************************
' *                                                                    *
' *                       GetCallerColumnIdx()                         *
' * 89012345678901234567890123456789++765432109876543210987654321098   *
' *                                                                    *
' **********************************************************************
' Sometimes we need to distinguish buttons that have the same function
' for different areas. While they all look alike, we need to determine
' where they are (in relation to cell coordinates)
Function GetCallerColumnIdx() As Integer
  Dim CallerName As String
  Dim Caller As Shape
  
  On Error GoTo CallerInvalid
  CallerName = Application.Caller
  Set Caller = ActiveSheet.Shapes(CallerName)
  GetCallerColumnIdx = GetShapeColumnIdx(Caller)
  Exit Function
  
CallerInvalid:
  GetCallerColumnIdx = -1
End Function ' GetCallerColumnIdx()
'

' **********************************************************************
' *                                                                    *
' *                         GetShapeRowIdx()                           *
' * 89012345678901234567890123456789++765432109876543210987654321098   *
' *                                                                    *
' **********************************************************************
' Sometimes we need to distinguish buttons that have the same function
' for different areas. While they all look alike, we need to determine
' where they are (in relation to cell coordinates)
Function GetShapeRowIdx(TargetShape As Shape) As Integer
  Dim TargetSheet As Worksheet
  Dim PosY As Integer
  
  On Error GoTo ShapeInvalid
  TargetSheet = TargetShape.Parent
  PosY = TargetShape.Top
  GetShapeRowIdx = PixelYPosToRowIdx(TargetSheet, PosY)
  Exit Function
  
ShapeInvalid:
  GetShapeRowIdx = -1
End Function ' GetShapeRowIdx()
'

' **********************************************************************
' *                                                                    *
' *                        GetShapeColumnIdx()                         *
' * 89012345678901234567890123456789++765432109876543210987654321098   *
' *                                                                    *
' **********************************************************************
' Sometimes we need to distinguish buttons that have the same function
' for different areas. While they all look alike, we need to determine
' where they are (in relation to cell coordinates)
Function GetShapeColumnIdx(TargetShape As Shape) As Integer
  Dim TargetSheet As Worksheet
  Dim PosX As Integer
  
  On Error GoTo ShapeInvalid
  TargetSheet = TargetShape.Parent
  PosX = TargetShape.Left
  GetShapeColumnIdx = PixelXPosToColumnIdx(TargetSheet, PosX)
  Exit Function
  
ShapeInvalid:
  GetShapeColumnIdx = -1
End Function ' GetShapeColumnIdx()
'

' **********************************************************************
' *                                                                    *
' *                      PixelXPosToColumnIdx()                        *
' * 89012345678901234567890123456789++765432109876543210987654321098   *
' *                                                                    *
' **********************************************************************
' Given the location of an object on the screen (e.g. a Shape) discover
' the column that it is located in.
' Note that different columns might be of different width, so a simple
' division is not possible, and the result depends on the current sheet
' (and the column widths in this sheet). We shall use binary search to
' discover the correct column quickly...
Function PixelXPosToColumnIdx(TargetSheet As Worksheet, PosX As Integer) As Integer
  Dim LowColumnIdx As Integer
  Dim HighColumnIdx As Integer
  Dim MidColumnIdx As Integer

  LowColumnIdx = 1
  HighColumnIdx = TargetSheet.UsedRange.Column + _
                  TargetSheet.UsedRange.Columns.Count
  
  If (PosX <= 0) Then
    PixelXPosToColumnIdx = 1
    Exit Function
  End If
  
  If (PosX > TargetSheet.Cells(1, HighColumnIdx).Left) Then
    PixelXPosToColumnIdx = HighColumnIdx
    Exit Function
  End If
  
  While (HighColumnIdx - LowColumnIdx > 1)
    MidColumnIdx = (HighColumnIdx + LowColumnIdx) \ 2
    If (TargetSheet.Cells(1, MidColumnIdx).Left <= PosX) Then
      LowColumnIdx = MidColumnIdx
    Else
      HighColumnIdx = MidColumnIdx
    End If
  Wend
  PixelXPosToColumnIdx = LowColumnIdx
End Function ' PixelXPosToColumnIdx
'

' **********************************************************************
' *                                                                    *
' *                        PixelYPosToRowIdx()                         *
' * 89012345678901234567890123456789++765432109876543210987654321098   *
' *                                                                    *
' **********************************************************************
' Given the location of an object on the screen (e.g. a Shape) discover
' the row that it is located in.
' Note that different lines might be of different height, so a simple
' division is not possible, and the result depends on the current sheet
' (and the line heights in this sheet). We shall use binary search to
' discover the correct row quickly...
Function PixelYPosToRowIdx(TargetSheet As Worksheet, PosY As Integer) As Integer
  Dim LowRowIdx As Integer
  Dim HighRowIdx As Integer
  Dim MidRowIdx As Integer

  LowRowIdx = 1
  HighRowIdx = TargetSheet.UsedRange.Row + _
               TargetSheet.UsedRange.Rows.Count
  
  If (PosY <= 0) Then
    PixelYPosToRowIdx = 1
    Exit Function
  End If
  
  If (PosY > TargetSheet.Cells(HighRowIdx, 1).Top) Then
    PixelYPosToRowIdx = HighRowIdx
    Exit Function
  End If
  
  While (HighRowIdx - LowRowIdx > 1)
    MidRowIdx = (HighRowIdx + LowRowIdx) \ 2
    If (TargetSheet.Cells(MidRowIdx, 1).Top <= PosY) Then
      LowRowIdx = MidRowIdx
    Else
      HighRowIdx = MidRowIdx
    End If
  Wend
  PixelYPosToRowIdx = LowRowIdx
End Function ' PixelYPosToRowIdx
'

' **********************************************************************
' *                                                                    *
' *                            EmptyTrash()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete all Worksheets whose names start with gc_DeletedCookie (= "DELETED ")
Sub EmptyTrash()
  Dim WSheet As Worksheet
  Dim PrevActiveWSheet As Worksheet
  
  Set PrevActiveWSheet = ActiveSheet
  
  PushProtection WBook:=ActiveWorkbook
  RemoveProtection WBook:=ActiveWorkbook
  
  For Each WSheet In ActiveWorkbook.Worksheets
    If (Left(WSheet.Name, Len(gc_DeletedCookie)) = gc_DeletedCookie) Then
      WSheet.Delete
    End If
  Next WSheet
  
  PopProtection WBook:=ActiveWorkbook
  
  PrevActiveWSheet.Select
End Sub ' EmptyTrash()
'

' **********************************************************************
' *                                                                    *
' *                           ColumnFilter()                           *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' For Debugging purposes it is convenient to be able to edit any feature
' without having to mess around with protection removal/restoration.
' Thus we have this function, which shows all that is around.
Sub ColumnFilter(FilterRow As String, Code As String, _
                 Optional UserSheet As Worksheet = Nothing)
  Dim FilterRowIdx As Integer
  Dim ColumnIdx As Integer
  Dim LeftColumn As Integer, RightColumn As Integer
  Dim CellData As String
  
  If (UserSheet Is Nothing) Then
    Set UserSheet = ActiveSheet
  End If
  
  FilterRowIdx = UserSheet.Range(FilterRow).Row
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  LeftColumn = UserSheet.UsedRange.Column
  RightColumn = LeftColumn + UserSheet.UsedRange.Columns.Count - 1
  For ColumnIdx = LeftColumn To RightColumn
    CellData = UserSheet.Cells(FilterRowIdx, ColumnIdx).Value
    If (CellData <> ":") Then
      If InStr(CellData, Code) Or (CellData = "*") Or (Code = "*") Then
        UserSheet.Columns(ColumnIdx).Hidden = False
      Else
        UserSheet.Columns(ColumnIdx).Hidden = True
      End If
    End If
  Next ColumnIdx
  
  PopProtection WSheet:=UserSheet

End Sub ' ColumnFilter()
'

' **********************************************************************
' *                                                                    *
' *                             RowFilter()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' For Debugging purposes it is convenient to be able to edit any feature
' without having to mess around with protection removal/restoration.
' Thus we have this function, which shows all that is around.
Sub RowFilter(FilterColumn As String, Code As String, _
                 Optional UserSheet As Worksheet = Nothing)
  Dim FilterColumnIdx As Integer
  Dim RowIdx As Integer
  Dim TopRow As Integer, BottomRow As Integer
  Dim CellData As String
  
  If (UserSheet Is Nothing) Then
    Set UserSheet = ActiveSheet
  End If
  
  FilterColumnIdx = UserSheet.Range(FilterColumn).Column
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  TopRow = UserSheet.UsedRange.Row
  BottomRow = TopRow + UserSheet.UsedRange.Rows.Count - 1
  For RowIdx = TopRow To BottomRow
    CellData = UserSheet.Cells(RowIdx, FilterColumnIdx).Value
    If (CellData <> ":") Then
      If InStr(CellData, Code) Or (CellData = "*") Or (Code = "*") Then
        UserSheet.Rows(RowIdx).Hidden = False
      Else
        UserSheet.Rows(RowIdx).Hidden = True
      End If
    End If
  Next RowIdx
  
  PopProtection WSheet:=UserSheet

End Sub ' RowFilter()
'

' **********************************************************************
' *                                                                    *
' *                           CopyUserSheet()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Note: Copying a Worksheet should theoretically be very easy. Just use
'    WSheet.Copy Before:=WSheet
' and you have a new active worksheet that is the requested copy.
' However in real life, things are not so easy. Excel has a bug that causes
' the copy to fail, when too many range-name definitions have been copied
' in previous copy operations.
' Microsoft has acknowledged this bug and has proposed two solutions in
'   https://support.microsoft.com/en-us/kb/210684
' However one of the solutions assumes that we can close the workbook
' and reopen it without interrupting the flow of execution of the VBA
' application (which would only be true if we were to copy worksheets in
' an other workbook, rather than the one containing the VBA code).
' The other solution attempts to import worksheets from template files
' rather than using sources contained in the application and requires
' strict discipline in file names that is not achievable in our user
' controlled environment.

Function CopyUserSheet(Optional WSheet As Worksheet = Nothing, Optional WSheetCopyName As String = "", _
                       Optional Before As Worksheet = Nothing, Optional After As Worksheet = Nothing) As Worksheet
  Dim WBook As Workbook
  Dim WBookName As String
  Dim WBookPath As String
  Dim WBookPathName As String
  Dim TempPath As String
  Dim TempPathName As String
  Dim WSheetName As String
  Dim WSheetCopy As Worksheet
  Dim Button As VbMsgBoxResult
  Dim PrevVisibility As Boolean
  Dim BeforeIndex As Integer
  Dim BeforeWSheet As Worksheet
  Dim PrevBeforeVisibility As Boolean
  
  gv_CopySheetCounter = gv_CopySheetCounter + 1
  If (gv_CopySheetCounter = 40) Then
    Button = MsgBox(Prompt:="Seit dem |fffd|ffnen der Arbeitsmappe wurden schon viele Arbeitsbl|fffd|tter angelegt." & vbCr & _
                            "Leider enth|fffd|lt Microsoft Excel einen internen Fehler, der sich darin zeigt, " & vbCr & _
                            "dass das Anlegen weiterer Arbeitsbl|fffd|tter scheitert und es zu einem instabilen " & vbCr & _
                            "Systemzustand kommt, wenn seit dem letzten |fffd|ffnen der Arbeitmappe bereits " & vbCr & _
                            "zu viele Arbeitsbl|fffd|tter angelegt wurden. Die genaue Anzahl bei der dies geschieht " & vbCr & _
                            "kann nicht exakt bestimmt werden. " & vbCr & vbCr & _
                            "Sie k|fffd|nnen zur Systemstabilit|fffd|t beitragen indem Sie die Arbeitsmappe jetzt " & vbCr & _
                            "pr|fffd|ventiv speichern, schlie|fffd|en und anschlie|fffd|end neu |fffd|ffnen. Danach hat Excel " & vbCr & _
                            "seine internen Strukturen neu geordnet und Sie k|fffd|nnen wieder viele Arbeitsbl|fffd|tter " & vbCr & _
                            "anlegen." & vbCr & vbCr & _
                            "Wir bitten Sie diesen befremdlichen Umweg zu entschuldigen..." & vbCr & _
                            "Techn. Referenz: https://support.microsoft.com/en-us/kb/210684", _
                            Buttons:=(vbOKOnly Or vbInformation), _
                            Title:=("Hinweis: Drohende Instabilit|fffd|t von Excel"))
  End If
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  Set WBook = WSheet.Parent
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  PrevVisibility = WSheet.Visible
  WSheet.Visible = True
  
  If (WSheetCopyName <> "") Then
    WSheetCopyName = UniqueSheetName(WSheetCopyName)
  End If
  
  ' Attempt to Create a working copy of the worksheet from the template sheet
  On Error GoTo WSheetCopyErr
    ' What shall happen if the used did not specify a specific position
    ' for the new worksheet?
    If (Before Is Nothing) And (After Is Nothing) Then
      ' Set Before = WBook.Worksheets(1)  ' Insert at front of Workbook
      ' Set Before = WSheet  ' Insert before Source Worksheet
      Set After = WSheet     ' Insert after Source Worksheet
      ' Set After = WBook.Worksheets(WBook.Worksheets.Count) ' Insert at and of Workbook
    End If
  
    If Not (Before Is Nothing) Then
      WSheet.Copy Before:=Before
    Else
      ' We now know that After is non-null!
      ' If we request that Excel shall insert a copy of the worksheet
      ' after a given worksheet, and there are already hidden worksheets
      ' after the given worksheet, Excel will not insert the new
      ' worksheet at the requested location, but instead after all
      ' the hidden worksheets. It we want the new worksheet inserted
      ' directly after the given worksheet, we need to make the
      ' following worksheet visible first.
      BeforeIndex = After.Index + 1
      If (BeforeIndex < WBook.Worksheets.Count) Then
        Set BeforeWSheet = WBook.Worksheets(BeforeIndex)
        PrevBeforeVisibility = BeforeWSheet.Visible
        BeforeWSheet.Visible = True
      Else
        Set BeforeWSheet = Nothing
      End If
      
      WSheet.Copy After:=After
      
      If Not (BeforeWSheet Is Nothing) Then
        BeforeWSheet.Visible = PrevBeforeVisibility
      End If
    End If
    
    Set WSheetCopy = ActiveSheet
    WSheetCopy.Visible = True
    UnprotectWSheet WSheet:=WSheetCopy
    If (WSheetCopyName <> "") Then
      WSheetCopy.Name = WSheetCopyName
    End If
    
  On Error GoTo 0
  
  WSheet.Visible = PrevVisibility
  
  PopProtection WBook:=WBook

  Set CopyUserSheet = WSheetCopy
  Exit Function

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

WSheetCopyErr:
  On Error GoTo 0
  
  WSheet.Visible = PrevVisibility
  PopProtection WBook:=WBook
  
  If (WSheetCopyName = "") Then
    WSheetCopyName = UniqueSheetName(WSheet.Name)
  End If
  
  Button = MsgBox(Prompt:="Wegen eines internen Fehlers von Microsoft Excel kann " & vbCr & _
                          "das Arbeitsblatt " & WSheetCopyName & " zur Zeit leider " & vbCr & _
                          "nicht angelegt werden." & vbCr & vbCr & _
                          "Sie k|fffd|nnen dieses Problem umgehen indem Sie die Excel Arbeitsmappe " & vbCr & _
                          "jetzt speichern, schlie|fffd|en und dann neu |fffd|ffnen. Danach hat Excel " & vbCr & _
                          "seine internen Strukturen neu geordnet und Sie k|fffd|nnen wieder " & vbCr & _
                          "viele Arbeitsbl|fffd|tter anlegen." & vbCr & vbCr & _
                          "Wir bitten Sie diesen befremdlichen Umweg zu entschuldigen..." & vbCr & _
                          "Techn. Referenz: https://support.microsoft.com/en-us/kb/210684", _
                          Buttons:=(vbOKOnly Or vbCritical), _
                          Title:=("Interner Fehler beim Erstellen eines Arbeitsblattes"))
  Set CopyUserSheet = Nothing
  Exit Function

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

MS_WSheetCopyErr:
  ' Solution suggested by Mircosoft - Does not work ;(
  ' See: https://support.microsoft.com/en-us/kb/210684
  WSheet.Visible = PrevVisibility
  PopProtection WBook:=WBook
  
  WBookName = WBook.Name
  WBookPath = WBook.Path
  WBookPathName = WBookPath & "\" & WBookName
  
  TempPath = Environ("Temp")
  TempPathName = TempPath & "\" & WBookName
  
  WSheetName = WSheet.Name
  
  ' The following three lines show the solution proposed by Microsoft.
  ' Unfortunatly closing the workbook also terminates this application
  ' and the code never gets to reopening the workbook ;(
  '   WBook.Close SaveChanges:=True
  '   Set WBook = Nothing
  '   Set WBook = Application.Workbooks.Open(WBookPathName)
  
  Set WSheet = WBook.Worksheets(WSheetName)
  Resume
End Function ' CopyUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                           CopyUserShape()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Note: Copying a Shape should theoretically be very easy. Just use
'    Shape.Copy
'    WSheet.Paste
' and you have a new copy of the shape in the target worksheet. However
' in real life, it seems that Excel sometimes stumbles during the paste
' operation and reports an error. Immediately retrying the paste operation
' in the debugger works fine. Thus we shall allow three retries here...
Function CopyUserShape(SrcShape As Shape, Optional TargetWSheet As Worksheet = Nothing) As Shape
  Dim RetryCnt As Integer
  
  If (TargetWSheet Is Nothing) Then
    Set TargetWSheet = ActiveSheet
  End If

  Set CopyUserShape = Nothing
  
  ' On Error GoTo Retry
  RetryCnt = 0
  Do While (RetryCnt < 3)
    RetryCnt = RetryCnt + 1
    ' SrcShape.Copy
    CopyUserShape = SrcShape.Duplicate
    SrcShape.Cut
    TargetWSheet.Paste
    Set CopyUserShape = TargetWSheet.Shapes(TargetWSheet.Shapes.Count)
    If (CopyUserShape.Name <> SrcShape.Name) Then
      Set CopyUserShape = TargetWSheet.Shapes(SrcShape.Name)
    End If
    Exit Do
  Loop
Retry:
  If (RetryCnt > 1) Then
    Debug.Print "CopyUserShape(" & SrcShape.Name & ") required " & CStr(RetryCnt) & " attempts."
  End If
  On Error GoTo 0

End Function ' CopyUserShape()
'

' **********************************************************************
' *                                                                    *
' *                          DeleteUserSheet()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Unused_DeleteUserSheet()
  If (InStr(ActiveSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(ActiveSheet.Name, gc_TableCookie) = 1) Then
    Exit Sub
  End If
  
  PushProtection WBook:=ActiveWorkbook
  RemoveProtection WBook:=ActiveWorkbook
  
  UnprotectWSheet WSheet:=ActiveSheet
  ' Beware: The following line will work fine in many installations
  ' however Excel 2013 will crash if this macro was called from a
  ' button that was part of the deleted sheet.
  ' Workaround: Mark the sheet as delete only and use EmptyTrash()
  ' to do the actual deleting...
  ActiveSheet.Delete
  
  PopProtection WBook:=ActiveWorkbook
End Sub ' Unused_DeleteUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                          UniqueSheetName()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Create a name for a worksheet that is not yet in use...
Function UniqueSheetName(CoreName As String) As String
  Dim SearchName As String
  Dim LowerSearchName As String
  Dim WSheet As Worksheet
  Dim Cnt As Integer
  Dim Found As Boolean
  
  CoreName = Replace(CoreName, ":", ".")
  CoreName = Replace(CoreName, "\", "-")
  CoreName = Replace(CoreName, "/", "-")
  CoreName = Replace(CoreName, "?", ".")
  CoreName = Replace(CoreName, "*", "+")
  CoreName = Replace(CoreName, "[", "(")
  CoreName = Replace(CoreName, "]", ")")
  CoreName = Replace(CoreName, "!", ".")
  CoreName = Replace(CoreName, Chr(34), "")
  CoreName = Replace(CoreName, Chr(39), "")
  CoreName = Replace(CoreName, Chr(96), "")
  CoreName = Left(CoreName, 31)
  
  For Cnt = 1 To 200
    If Cnt = 1 Then
      SearchName = CoreName
    ElseIf (Cnt < 10) Then
      SearchName = Left(CoreName, 27) & " (" & Cnt & ")"
    ElseIf (Cnt < 100) Then
      SearchName = Left(CoreName, 26) & " (" & Cnt & ")"
    Else
      SearchName = Left(CoreName, 25) & " (" & Cnt & ")"
    End If
    
    Found = False
    LowerSearchName = LCase(SearchName)
    For Each WSheet In Worksheets
      If (LCase(WSheet.Name) = LowerSearchName) Then
        Found = True
      End If
    Next WSheet
    
    If Not Found Then
      UniqueSheetName = SearchName
      Exit Function
    End If
  Next Cnt

  UniqueSheetName = CoreName
End Function ' UniqueSheetName()

' **********************************************************************
' *                           GeneralCode.bas                          *
' **********************************************************************

Attribute VB_Name = "InvestSachleistungen"
' **********************************************************************
' *                                                                    *
' *                      InvestSachleistungen.bas                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' Die Tabellenbl|fffd|tter f|fffd|r Sach- und Investionskosten sind praktisch
' identisch und unterscheiden sich nur in der Titelzeile bzw. im Namen
' des Tabellenblattes. Urspr|fffd|nglich war auch daran gedacht beide Kosten-
' arten auf einem einzigen Tabellenblatt zu verwalten, allerdings wurde
' dann erkannt, dass Investitionen (im Gegensatz zu Sachleistungen) mit
' einer Behaltefrist von 5 Jahren versehen sind und im Rahmen einer sp|fffd|teren
' Pr|fffd|fung festgestellt werden muss was alles als Investition gef|fffd|rdert
' wurde und bei einer Betriebsbegehung im Rahmen einer Pr|fffd|fung dann
' besichtigt werden k|fffd|nnen muss.
'
' Im Tabellenblatt k|fffd|nnen |fffd|ber Buttons Zeilen f|fffd|r jede beliebige Anzahl
' von Rechnungen angelegt werden ohne dass deswegen das gesamte Excel-Sheet
' ungesch|fffd|tzt ist (und leichtfertige Anwender beliebig die Struktur |fffd|ndern
' k|fffd|nnen).
' Weiters gibt es 5 verschiedene Ansichten auf die Spalten zwischen denen
' ebenfalls per Button umgeschaltet werden kann. Dadurch wird dem Anwender
' stets genau soviel Information angeboten wie im Moment erforderlich ist
' und der Endkunden nicht mit Feldern verwirrt die nur die Verwaltungs-
' kontrolle bzw. den techn. Pr|fffd|fdienst betreffen.

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.122   Roland Lieger     3.07.2015    Added Lots of Comments / Getting Ready for Release
'  1.0.0.130   Roland Lieger     8.07.2015    Debugging / Secondary Unlock Applicant
'  1.0.0.140   Roland Lieger    20.09.2015    Added Before/AfterPrint Code - Fixed Paper Format
'  1.0.0.148   Roland Lieger     4.11.2015    Last Subject can't be deleted any more
'  1.0.0.254   Roland Lieger     6.11.2015    Added DataValid() Check
'  1.0.0.268   Roland Lieger    11.11.2015    Getting Ready for Release
'  1.0.0.270   Roland Lieger    12.11.2015    Fixing Deletion of Sheet for Excel 2013
'  1.0.0.300   Roland Lieger    25.11.2015    Added 'Are you sure' dialogs
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

Public Const gc_InvMat_TemplateSheet As String = "TEMPLATE Invest & Sachkosten"
Public Const gc_InvMat_InvestUserSheet As String = "Investkosten"
Public Const gc_InvMat_MaterialUserSheet As String = "Sachkosten"
Public Const gc_InvMat_InvestUserSheetAbbr As String = "Investk. - "
Public Const gc_InvMat_MaterialUserSheetAbbr As String = "Sachk. - "
Public Const gc_InvMat_InvestMaterialUserSheet As String = "Invest & Sachkosten"

Public Const gc_InvMat_FormVersionCell As String = "InvMat_FormVersion"

Private Const c_ApplicantIDCell As String = "InvMat_ApplicantIDCell"
Private Const c_ApplicantNameCell As String = "InvMat_ApplicantNameCell"
Private Const c_ApplicationIDCell As String = "InvMat_ApplicationIDCell"
Public Const gc_InvMat_ApplicationSubject As String = "InvMat_ApplicationSubject"
Public Const gc_InvMat_ApplicationSubjectShadow As String = "InvMat_ApplicationSubjectShadow"

Public Const gc_InvMat_TotalCostExclTaxes As String = "InvMat_TotalCostExclTaxes"
Public Const gc_InvMat_TotalCostInclTaxes As String = "InvMat_TotalCostInclTaxes"
Public Const gc_InvMat_AppliedCost As String = "InvMat_AppliedCost"
Public Const gc_InvMat_ReducedCostVWK As String = "InvMat_ReducedCostVWK"
Public Const gc_InvMat_AcceptedCostVWK As String = "InvMat_AcceptedCostVWK"
Public Const gc_InvMat_ReducedCostVOK As String = "InvMat_ReducedCostVOK"
Public Const gc_InvMat_AcceptedCostVOK As String = "InvMat_AcceptedCostVOK"
' Public Const gc_InvMat_SanctionsVWK As String = "InvMat_SanctionsVWK"
Public Const gc_InvMat_SanctionsVOK As String = "InvMat_SanctionsVOK"

Private Const c_InvMat_SignatureRange As String = "InvMat_SignatureRange"

Private Const c_TaxDeductCell As String = "InvMat_TaxDeductCell"
Private Const c_SupportPeriodStartCell As String = "InvMat_SupportPeriodStartCell"
Private Const c_SupportPeriodEndCell As String = "InvMat_SupportPeriodEndCell"

Private Const c_Button_EraseAll As String = "Button_EraseAll"
Private Const c_Button_DuplicateSheet As String = "Button_DuplicateSheet"
Private Const c_Button_RemoveMacros As String = "Button_RemoveMacros"
Private Const c_Button_UnlockAll As String = "Button_UnlockAll"
Private Const c_Button_LockAll As String = "Button_LockAll"

' Private Const c_Checkbox_TaxDeductEnable As String = "Checkbox_TaxDeductEnable"
' Private Const c_Checkbox_TaxDeductDisable As String = "Checkbox_TaxDeductDisable"
Private Const c_RadioButton_TaxDeductEnable As String = "RadioButton_TaxDeductEnable"
Private Const c_RadioButton_TaxDeductDisable As String = "RadioButton_TaxDeductDisable"

Private Const c_Button_SelectModeUser As String = "Button_SelectModeUser"

Private Const c_Button_SelectModeVWKFull As String = "Button_SelectModeVWKFull"
Private Const c_Button_SelectModeVWKPrint As String = "Button_SelectModeVWKPrint"

Private Const c_Button_SelectModeVOKFull As String = "Button_SelectModeVOKFull"
Private Const c_Button_SelectModeVOKPrint As String = "Button_SelectModeVOKPrint"

Private Const c_SelectModeButtonRows As String = "InvMat_SelectModeButtonRows"

Private Const c_Button_AddReceipt As String = "Button_AddReceipt"
Private Const c_Button_AddMultiReceipts As String = "Button_AddMultipleReceipts"
Private Const c_Button_DelReceipt As String = "Button_DelReceipt"

Private Const c_PrintFilterRow As String = "InvMat_PrintFilterRow"
Private Const c_PrintFilterColumn As String = "InvMat_PrintFilterColumn"

Private Const c_TitleInvestRow As String = "InvMat_TitleInvestRow"
Private Const c_TitleMaterialRow As String = "InvMat_TitleMaterialRow"
Private Const c_TitleInvestMaterialRow As String = "InvMat_TitleInvestMaterialRow"

Private Const c_DefaultActiveCell As String = "InvMat_DefaultActiveCell"

Private Const c_ReceiptRangeHeadRow As String = "InvMat_ReceiptRangeHeadRow"
Private Const c_ReceiptPasteGuardRow As String = "InvMat_ReceiptPasteGuardRow"
Private Const c_ReceiptTemplateRow As String = "InvMat_ReceiptTemplateRow"
Private Const c_ReceiptRangeTailRow As String = "InvMat_ReceiptRangeTailRow"

Private Const c_ReceiptTypeColumn As String = "B"
Private Const c_SerialNrColumn As String = "C"
Private Const c_DateColumn As String = "D"
Private Const c_GrossAmountColumn As String = "J"
Private Const c_VATRateColumn As String = "K"
Private Const c_NetAmountColumn As String = "L"

Private Const c_FirstDataEntryColumnIdx As Integer = 4 ' = ColumnTitleToIdx("D")
Private Const c_LastDataEntryColumnIdx As Integer = 10 ' = ColumnTitleToIdx("J")
Private Const c_SubProjectColumnIdx As Integer = 8 ' = ColumnTitleToIdx("H")
Private Const c_TaskCodeColumnIdx As Integer = 17 ' = ColumnTitleToIdx("Q")

Public Const gc_InvMat_SumColumnMarker As String = "SumColumn"
Public Const gc_InvMat_TotalCostInclTaxColumn As String = "J"
Public Const gc_InvMat_TotalCostExclTaxColumn As String = "L"
Public Const gc_InvMat_AppliedCostColumn As String = "P"
Public Const gc_InvMat_ReducedCostVWKColumn As String = "T"
Public Const gc_InvMat_AcceptedCostVWKColumn As String = "W"
Public Const gc_InvMat_ReducedCostVOKColumn As String = "AB"
Public Const gc_InvMat_AcceptedCostVOKColumn As String = "AE"
' Public Const gc_InvMat_SanctionsVWKColumn As String = "A*"
Public Const gc_InvMat_SanctionsVOKColumn As String = "AI"

Private v_PrintWSheet As Worksheet
'
' **********************************************************************
' *                                                                    *
' *                        InvMat_EraseAllData()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_EraseAllData()
  Dim WSheet As Worksheet
  Dim Button As VbMsgBoxResult
  
  Set WSheet = ActiveSheet
  If WSheet.Name = gc_InvMat_TemplateSheet Then
    Exit Sub
  End If
    
  If gc_DisplayAreYouSureDialogs Then
    Button = MsgBox(Prompt:="Sie sind dabei die Belegaufstellung " & _
                   Chr(34) & WSheet.Name & Chr(34) & " mit allen Eingaben zu l|fffd|schen. " & vbCr & _
                   "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden. " & vbCr & _
                   "Sind Sie sicher, dass Sie das wollen?", _
                   Buttons:=(vbYesNo Or vbDefaultButton2 Or vbExclamation), _
                   Title:=(WSheet.Name & " l|fffd|schen - Sind Sie sicher?"))
    If (Button <> vbYes) Then
      Exit Sub
    End If
  End If
  
  InvMat_CoreEraseAllData TargetSheet:=WSheet
End Sub ' InvMat_EraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                      InvMat_CoreEraseAllData()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub InvMat_CoreEraseAllData(TargetSheet As Worksheet)
  Dim WBook As Workbook
  Dim WSheet As Worksheet
  Dim PrevVisibility As Boolean
  Dim DebugMode As Boolean
  Dim SheetName As String
  Dim TitleRow As String
  Dim ActiveInvMatSheetCnt As Integer

  If TargetSheet.Name = gc_InvMat_TemplateSheet Then
    Exit Sub
  End If
  Set WBook = TargetSheet.Parent
    
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook, WSheet:=TargetSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Check if we have a 'magic' Applicant Name
  DebugMode = gc_DebugMode
  If (TargetSheet.Range(c_ApplicantNameCell).Value = gc_DebugApplicantName) Or _
     (TargetSheet.Range(c_ApplicantNameCell).Value = gc_UnlockApplicantName) Then
    DebugMode = True
  End If
  
  ' Do we need to restore an Invest- or a Material-Worksheet
  If (TargetSheet.Range(c_TitleInvestRow).Rows.Hidden = False) Then
    SheetName = gc_InvMat_InvestUserSheet
    TitleRow = c_TitleInvestRow
  Else
    SheetName = gc_InvMat_MaterialUserSheet
    TitleRow = c_TitleMaterialRow
  End If
    
  ' There must always be at least on visible Worksheet in each Excel
  ' workbook. Thus since we are going to erase all non-template sheets
  ' we must make (at least one) template visible...
  PrevVisibility = WBook.Sheets(gc_InvMat_TemplateSheet).Visible
  WBook.Sheets(gc_InvMat_TemplateSheet).Visible = True
  WBook.Sheets(gc_InvMat_TemplateSheet).Select
  
  ' Delete the current user data sheet (if it exists)
  ' Note: It would be very tempting to simply delete the Worksheet now.
  ' This works fine for many Excel installations, however I found an
  ' Excel 2013 (32-bit) installation on Win7 (32-bit) that reproducably
  ' crashes completly when I simply delete the worksheet here. :(
  ' Workaround: We shall only mark the worksheet for deletion here and
  ' hide it (so it appears deleted to the end user) and then set up a
  ' timer that will time out in 5 seconds (when user interaction has
  ' hopefully settled down) and start a garbage collection that actually
  ' deletes the unwanted sheets.
  ' TargetSheet.Delete - DO NOT DO THIS - Excel 2013 will crash!!!
  TargetSheet.Name = UniqueSheetName(gc_DeletedCookie & TargetSheet.Name)
  TargetSheet.Visible = False
  
  If StandAloneSheet() Then
    ActiveInvMatSheetCnt = 0
    For Each WSheet In WBook.Worksheets
      If (Left(WSheet.Name, Len(gc_InvMat_InvestUserSheet)) = gc_InvMat_InvestUserSheet) Or _
         (Left(WSheet.Name, Len(gc_InvMat_MaterialUserSheet)) = gc_InvMat_MaterialUserSheet) Or _
         (Left(WSheet.Name, Len(gc_InvMat_InvestUserSheetAbbr)) = gc_InvMat_InvestUserSheetAbbr) Or _
         (Left(WSheet.Name, Len(gc_InvMat_MaterialUserSheetAbbr)) = gc_InvMat_MaterialUserSheetAbbr) Then
        ActiveInvMatSheetCnt = ActiveInvMatSheetCnt + 1
      End If
    Next WSheet
    If ActiveInvMatSheetCnt = 0 Then
      CreateInvestMaterialUserSheet WBook:=WBook, SheetName:=SheetName, TitleRow:=TitleRow
      Set TargetSheet = ActiveSheet
      TargetSheet.Shapes(c_Button_UnlockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_LockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_DuplicateSheet).Visible = True
    End If
  End If
  
  WBook.Sheets(gc_InvMat_TemplateSheet).Visible = PrevVisibility
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  ' Else
  '   TargetSheet.Delete
  End If
  Application.OnTime Now() + TimeValue("0:00:01"), "EmptyTrash"
  
End Sub ' InvMat_CoreEraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                   CreateInvestUserSheet_OnClick()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Sub CreateInvestUserSheet_OnClick()
'   CreateInvestUserSheet WBook:=ActiveWorkbook
' End Sub ' CreateInvestUserSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                       CreateInvestUserSheet()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CreateInvestUserSheet(WBook As Workbook)
  CreateInvestMaterialUserSheet WBook:=WBook, SheetName:=gc_InvMat_InvestUserSheet, _
                                              TitleRow:=c_TitleInvestRow
End Sub ' CreateInvestUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                  CreateMaterialUserSheet_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Sub CreateMaterialUserSheet_OnClick()
'   CreateMaterialUserSheet WBook:=ActiveWorkbook
' End Sub ' CreateMaterialUserSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                      CreateMaterialUserSheet()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CreateMaterialUserSheet(WBook As Workbook)
  CreateInvestMaterialUserSheet WBook:=WBook, SheetName:=gc_InvMat_MaterialUserSheet, _
                                              TitleRow:=c_TitleMaterialRow
End Sub ' CreateMaterialUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                   CreateInvestMaterialUserSheet()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing InvestMaterial Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub CreateInvestMaterialUserSheet(WBook As Workbook, SheetName As String, TitleRow As String)
  Dim UserSheet As Worksheet
  Dim StandAloneMode As Boolean
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  StandAloneMode = Not WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set UserSheet = CopyUserSheet(WSheet:=WBook.Worksheets(gc_InvMat_TemplateSheet), _
                                WSheetCopyName:=SheetName, Before:=WBook.Worksheets(gc_InvMat_TemplateSheet))
  
  If Not (UserSheet Is Nothing) Then
    MarkShapes WSheet:=UserSheet, TemplateSheet:=WBook.Worksheets(gc_InvMat_TemplateSheet)

    ' Select the correct Heading for the Sheet
    UserSheet.Range(c_TitleInvestRow).Rows.Hidden = (TitleRow <> c_TitleInvestRow)
    UserSheet.Range(c_TitleMaterialRow).Rows.Hidden = (TitleRow <> c_TitleMaterialRow)
    UserSheet.Range(c_TitleInvestMaterialRow).Rows.Hidden = (TitleRow <> c_TitleInvestMaterialRow)
    
    ' Make sure that the first important cell is selected an the
    ' sheet is neatly scrolled to home position
    If StandAloneMode Then
      UserSheet.Range(c_ApplicantIDCell).Select
    Else
      UserSheet.Range(gc_InvMat_ApplicationSubject).Select
    End If
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    If Not StandAloneMode Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' UserSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' UserSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
    End If
    
    ' On 2017-09-18 a User reported trouble with WinXP/Excel 2007:
    '     Laufzeitfehler '1004' - Die LeftFooter-Eigenschaft des
    '        PageSetup-Objekts kann nicht festgelegt werden.
    ' The reason for this problem is not known, however we shall
    ' simply skip PageSetup if we encounter this problem.
    ' Note: This is a dirty workaround not a solution! FIXME!
    On Error GoTo SkipPageSetup
    If (UserSheet.PageSetup.LeftFooter <> "") Then
      If (StandAloneMode) Then
        If (TitleRow = c_TitleInvestRow) Then
          UserSheet.PageSetup.LeftFooter = "Investitionen"
        ElseIf (TitleRow = c_TitleMaterialRow) Then
          UserSheet.PageSetup.LeftFooter = "Sachkosten"
        Else
          UserSheet.PageSetup.LeftFooter = "Investitions- und Sachkosten"
        End If
      Else
        If (TitleRow = c_TitleInvestRow) Then
          UserSheet.PageSetup.LeftFooter = "ZA/Investitionen"
        ElseIf (TitleRow = c_TitleMaterialRow) Then
          UserSheet.PageSetup.LeftFooter = "ZA/Sachkosten"
        Else
          UserSheet.PageSetup.LeftFooter = "ZA/Invest. und Sachkosten"
        End If
      End If
      ' UserSheet.PageSetup.CenterFooter = c_PublicVersionInfo & " / " & c_MonthName(Month(NowDateTime) - 1) & " " & Year(NowDateTime)
      ' UserSheet.PageSetup.RightFooter = "Seite &P von &N"
      UserSheet.DisplayAutomaticPageBreaks = False
    End If
SkipPageSetup:
    On Error GoTo 0
    
    UserSheet.Shapes(c_Button_RemoveMacros).Visible = StandAloneMode
    UserSheet.Shapes(c_Button_UnlockAll).Visible = False
    UserSheet.Shapes(c_Button_LockAll).Visible = False
    UserSheet.Shapes(c_Button_DuplicateSheet).Visible = True
    
    InvMat_SelectViewModeUser WSheet:=UserSheet
    
    ProtectWSheet WSheet:=UserSheet
    UserSheet.Select
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If Not StandAloneMode Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' CreateInvestMaterialUserSheet()
'

' **********************************************************************
' *                                                                    *
' *             DuplicateInvestMaterialUserSheet_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateInvestMaterialUserSheet_OnClick()
  DuplicateInvestMaterialUserSheet WSheet:=ActiveSheet
End Sub ' DuplicateInvestMaterialUserSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                 DuplicateInvestMaterialUserSheet()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateInvestMaterialUserSheet(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim UserSheet As Worksheet
  Dim DebugMode As Boolean
  
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  DebugMode = gc_DebugMode
  
  ' Create a working copy of the current investment/material cost sheet
  Set UserSheet = CopyUserSheet(WSheet:=WSheet, After:=WSheet) ' , WSheetCopyName="")
  
  If Not (UserSheet Is Nothing) Then
    If Not StandAloneSheet() Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' UserSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' UserSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
    End If
    
    ProtectWSheet WSheet:=UserSheet
  End If ' If Not(UserSheet Is Nothing)

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' DuplicateInvestMaterialUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                   InvMat_GetPreferredWSheetName()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function InvMat_GetPreferredWSheetName(WSheet As Worksheet) As String
  Dim Subject As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    InvMat_GetPreferredWSheetName = WSheet.Name
    Return
  End If
  
  Subject = Trim(WSheet.Range(gc_InvMat_ApplicationSubject).Value)
  If (WSheet.Range(gc_InvMat_ApplicationSubjectShadow).Value <> Subject) Then
    WSheet.Range(gc_InvMat_ApplicationSubjectShadow).Value = Subject
  End If
  
  If (InStr(WSheet.Name, gc_InvMat_InvestUserSheet) = 1) Or _
     (InStr(WSheet.Name, gc_InvMat_InvestUserSheetAbbr) = 1) Then
    If (Subject = "") Then
      InvMat_GetPreferredWSheetName = gc_InvMat_InvestUserSheet
    Else
      InvMat_GetPreferredWSheetName = gc_InvMat_InvestUserSheetAbbr & Subject
    End If
  ElseIf (InStr(WSheet.Name, gc_InvMat_MaterialUserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_MaterialUserSheetAbbr) = 1) Then
    If (Subject = "") Then
      InvMat_GetPreferredWSheetName = gc_InvMat_MaterialUserSheet
    Else
      InvMat_GetPreferredWSheetName = gc_InvMat_MaterialUserSheetAbbr & Subject
    End If
  End If

End Function ' InvMat_GetPreferredWSheetName()
'

' **********************************************************************
' *                                                                    *
' *                    InvMat_AdjustWorksheetName()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_AdjustWorksheetName(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim Subject As String
  Dim WSheetTitle As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    Exit Sub
  End If
  
  If WSheet.Range(gc_InvMat_ApplicationSubject).Value = WSheet.Range(gc_InvMat_ApplicationSubjectShadow).Value Then
    Exit Sub
  End If
    
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Subject = WSheet.Range(gc_InvMat_ApplicationSubject).Value
  WSheet.Range(gc_InvMat_ApplicationSubjectShadow).Value = Subject
  
  If (InStr(WSheet.Name, gc_InvMat_InvestUserSheet) = 1) Or _
     (InStr(WSheet.Name, gc_InvMat_InvestUserSheetAbbr) = 1) Then
    WSheetTitle = gc_InvMat_InvestUserSheetAbbr & Subject
  ElseIf (InStr(WSheet.Name, gc_InvMat_MaterialUserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_MaterialUserSheetAbbr) = 1) Then
    WSheetTitle = gc_InvMat_MaterialUserSheetAbbr & Subject
  Else
    Exit Sub
  End If

  WSheetTitle = UniqueSheetName(WSheetTitle)
  
  WSheet.Name = WSheetTitle
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' InvMat_AdjustWorksheetName()
'

' **********************************************************************
' *                                                                    *
' *                         InvMat_DataValid()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function InvMat_DataValid(WSheet As Worksheet) As Boolean
  Dim ErrorList As String
  Dim Button As Integer
  Dim SupportPeriodStart As Date
  Dim SupportPeriodEnd As Date
  
  ErrorList = ""
  If IsEmptyString(WSheet.Range(c_ApplicantIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Betriebs-/Klientennummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicantNameCell).Value) Then
    ErrorList = ErrorList & "    .) Der Name des/der F|fffd|rderungswerber/in fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicationIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Antragsnummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_InvMat_ApplicationSubject).Value) Then
    ErrorList = ErrorList & "    .) Die Bezeichnung des F|fffd|rdergegenstandes fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodStartCell).Value) Then
    ErrorList = ErrorList & "    .) Der Beginn des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodStart = WSheet.Range(c_SupportPeriodStartCell).Value
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodEndCell).Value) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodEnd = WSheet.Range(c_SupportPeriodEndCell).Value
  End If
  
  If (SupportPeriodStart > 0) And (SupportPeriodEnd > 0) And (SupportPeriodStart >= SupportPeriodEnd) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums liegt vor dem Anfang" & vbCr
  End If
  
  If (ErrorList <> "") Then
    Button = MsgBox(Prompt:="Der Zahlungsantrag ist nicht korrekt ausgef|fffd|llt:" & vbCr & _
           ErrorList & _
           vbCr & "Wollen Sie trotzdem drucken?", _
           Buttons:=vbYesNo Or vbDefaultButton2 Or vbExclamation, _
           Title:="Fehler im Zahlungsantrag")
    InvMat_DataValid = (Button = vbYes)
  Else
    InvMat_DataValid = True
  End If
  End Function ' InvMat_DataValid()
'

' **********************************************************************
' *                                                                    *
' *                    InvMat_RemoveMacros_OnClick()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_RemoveMacros_OnClick()
  Dim WSheet As Worksheet
  Set WSheet = ActiveSheet
  CreateNoMacroWBook WBook:=ThisWorkbook, _
                     ApplicantName:=WSheet.Range(c_ApplicantNameCell).Value, _
                     ApplicantID:=WSheet.Range(c_ApplicantIDCell).Value, _
                     ProjectTitle:=WSheet.Range(gc_InvMat_ApplicationSubject).Value, _
                     ProjectNumber:=WSheet.Range(c_ApplicationIDCell).Value
End Sub ' InvMat_RemoveMacros_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                        InvMat_BeforePrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_BeforePrint(Optional WSheet As Worksheet = Nothing)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set v_PrintWSheet = WSheet
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet

  WSheet.Shapes(c_Button_SelectModeUser).Visible = False
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = False
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = False
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = False
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = False
  WSheet.Range(c_SelectModeButtonRows).Rows.Hidden = True
  
  PopProtection WSheet:=WSheet
  
End Sub ' InvMat_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                         InvMat_AfterPrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_AfterPrint(Optional WSheet As Worksheet = Nothing)
  If (v_PrintWSheet Is Nothing) Then
    If (WSheet Is Nothing) Then
      Set WSheet = ActiveSheet
    End If
  Else
    Set WSheet = v_PrintWSheet
  End If
  Set v_PrintWSheet = Nothing
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet

  WSheet.Shapes(c_Button_SelectModeUser).Visible = True
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = True
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = True
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = True
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = True
  WSheet.Range(c_SelectModeButtonRows).Rows.Hidden = False
  
  PopProtection WSheet:=WSheet
 
End Sub ' InvMat_CoreAfterPrint()
'

' **********************************************************************
' *                                                                    *
' *               InvMat_RadioButton_TaxDeduct_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_RadioButton_TaxDeduct_OnClick()
  Dim WSheet As Worksheet
  
  Set WSheet = ActiveSheet
  
  UpdateInvestMaterialTaxDeductMode _
     TaxDeductActive:=(WSheet.Range(c_TaxDeductCell).Value = "Ja"), _
     UserSheet:=WSheet
  
End Sub ' InvMat_RadioButton_TaxDeduct_OnClick()
'

' **********************************************************************
' *                                                                    *
' *              InvMat_CheckBox_TaxDeductEnable_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are two checkboxes on the Master sheet that indicate if the
' supplicant is permit to perform VAT deduction (i.e. if costs are given
' with or without VAT). This is just a note to the users to take care what
' the are doing and is never included in the computation anywhere...
'
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_InvMat_CheckBox_TaxDeductEnable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOff
    ' WSheet.Range(c_TaxDeductCell).Value = "Ja"
  Else
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn
    ' WSheet.Range(c_TaxDeductCell).Value = "Nein"
  End If

  UpdateInvestMaterialTaxDeductMode _
     TaxDeductActive:=(CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn), _
     UserSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' InvMat_CheckBox_TaxDeductEnable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *             InvMat_CheckBox_TaxDeductDisable_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' See: InvMat_CheckBox_TaxDeductEnable_OnClick()
#If False Then
Sub Unused_InvMat_CheckBox_TaxDeductDisable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOff
    ' WSheet.Range(c_TaxDeductCell).Value = "Nein"
  Else
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn
    ' WSheet.Range(c_TaxDeductCell).Value = "Ja"
  End If
  
  UpdateInvestMaterialTaxDeductMode _
     TaxDeductActive:=(CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn), _
     UserSheet:=WSheet
  
  PopProtection WSheet:=WSheet
End Sub ' InvMat_CheckBox_TaxDeductDisable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                 UpdateInvestMaterialTaxDeductMode()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateInvestMaterialTaxDeductMode(TaxDeductActive As Boolean, UserSheet As Worksheet)
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' ColumnFilter FilterRow:=c_PrintFilterRow, Code:=Code, UserSheet:=UserSheet
  ' RowFilter FilterColumn:=c_PrintFilterColumn, Code:=Code, UserSheet:=UserSheet
  
  UserSheet.Range(c_ReceiptTemplateRow).Rows.Hidden = True
  ' UserSheet.Range(c_VATRateColumn & ":" & c_NetAmountColumn).Columns.Hidden = _
  '                           (UserSheet.Range(c_TaxDeductCell).Value = "Nein")
  UserSheet.Range(c_VATRateColumn & ":" & c_NetAmountColumn).Columns.Hidden = Not TaxDeductActive
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=UserSheet

  End Sub ' UpdateInvestMaterialTaxDeductMode()
'

' **********************************************************************
' *                                                                    *
' *                 InvMat_SelectViewModeUser_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeUser_OnClick()
  InvMat_SelectViewModeUser WSheet:=ActiveSheet
End Sub ' InvMat_SelectViewModeUser_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                InvMat_SelectViewModeVWKAll_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVWKAll_OnClick()
  InvMat_SelectViewModeVWKAll WSheet:=ActiveSheet
End Sub ' InvMat_SelectViewModeVWKAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               InvMat_SelectViewModeVWKPrint_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVWKPrint_OnClick()
  InvMat_SelectViewModeVWKPrint WSheet:=ActiveSheet
End Sub ' InvMat_SelectViewModeVWKPrint_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                InvMat_SelectViewModeVOKAll_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVOKAll_OnClick()
  InvMat_SelectViewModeVOKAll WSheet:=ActiveSheet
End Sub ' InvMat_SelectViewModeVOKAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               InvMat_SelectViewModeVOKPrint_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVOKPrint_OnClick()
  InvMat_SelectViewModeVOKPrint WSheet:=ActiveSheet
End Sub ' InvMat_SelectViewModeVOKPrint_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     InvMat_SelectViewModeUser()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeUser(Optional WSheet As Worksheet = Nothing)
  UpdateInvestMaterialViewMode VisibleCode:="U", _
                 ShowVWKButtons:=True, ShowVOKButtons:=False, _
                 WSheet:=WSheet
End Sub ' InvMat_SelectViewModeUser()
'

' **********************************************************************
' *                                                                    *
' *                    InvMat_SelectViewModeVWKAll()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVWKAll(Optional WSheet As Worksheet = Nothing)
  UpdateInvestMaterialViewMode VisibleCode:="B", _
                 ShowVWKButtons:=True, ShowVOKButtons:=True, _
                 WSheet:=WSheet
End Sub ' InvMat_SelectViewModeVWKAll()
'

' **********************************************************************
' *                                                                    *
' *                   InvMat_SelectViewModeVWKPrint()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVWKPrint(Optional WSheet As Worksheet = Nothing)
  UpdateInvestMaterialViewMode VisibleCode:="b", _
                 ShowVWKButtons:=True, ShowVOKButtons:=True, _
                 WSheet:=WSheet
End Sub ' InvMat_SelectViewModeVWKPrint()
'

' **********************************************************************
' *                                                                    *
' *                    InvMat_SelectViewModeVOKAll()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVOKAll(Optional WSheet As Worksheet = Nothing)
  UpdateInvestMaterialViewMode VisibleCode:="V", _
                 ShowVWKButtons:=True, ShowVOKButtons:=True, _
                 WSheet:=WSheet
End Sub ' InvMat_SelectViewModeVOKAll()
'

' **********************************************************************
' *                                                                    *
' *                   InvMat_SelectViewModeVOKPrint()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_SelectViewModeVOKPrint(Optional WSheet As Worksheet = Nothing)
  UpdateInvestMaterialViewMode VisibleCode:="v", _
                 ShowVWKButtons:=True, ShowVOKButtons:=True, _
                 WSheet:=WSheet
End Sub ' InvMat_SelectViewModeVOKPrint()
'

' **********************************************************************
' *                                                                    *
' *                   UpdateInvestMaterialViewMode()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateInvestMaterialViewMode(VisibleCode As String, _
                                 ShowVWKButtons As Boolean, ShowVOKButtons As Boolean, _
                                 WSheet As Worksheet)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ColumnFilter FilterRow:=c_PrintFilterRow, Code:=VisibleCode, UserSheet:=WSheet
  RowFilter FilterColumn:=c_PrintFilterColumn, Code:=VisibleCode, UserSheet:=WSheet
  
  WSheet.Range(c_ReceiptTemplateRow).Rows.Hidden = True
  WSheet.Range(c_VATRateColumn & ":" & c_NetAmountColumn).Columns.Hidden = _
                            (WSheet.Range(c_TaxDeductCell).Value = "Nein")
  
  WSheet.Range(c_InvMat_SignatureRange).Rows.Hidden = WorksheetExists(gc_SummaryWorkSheet)
  
  ShowVWKButtons = True  ' WARNING - This Overrides the Sub Parameters!!
  ShowVOKButtons = True
  
  ' WSheet.Shapes(c_Button_SelectModeVWK).Visible = ShowVWKButtons
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = ShowVWKButtons
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = ShowVWKButtons
  
  ' WSheet.Shapes(c_Button_SelectModeVOK).Visible = ShowVOKButtons
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = ShowVOKButtons
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = ShowVOKButtons

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' UpdateInvestMaterialViewMode()
'

' **********************************************************************
' *                                                                    *
' *                 InvMat_InsertReceiptLine_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub InvMat_InsertReceiptLine_OnClick()
  InvMat_InsertReceiptLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=-1
End Sub ' InvMat_InsertReceiptLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *             InvMat_InsertMultipleReceiptLines_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub InvMat_InsertMultipleReceiptLines_OnClick()
  Dim Reply As String
  Dim Count As Integer
  Dim MsgReply As VbMsgBoxResult
  
  Reply = InputBox(Prompt:="Wie viele Zeilen f|fffd|r Belege sollen eingef|fffd|gt werden?" & vbCr & _
                           "Bitte geben Sie eine ganze Zahl zwischen 1 und 1000 ein." & vbCr & _
                           "Eine leere Eingabe oder 0 bricht ab.", _
                     Title:="Mehrere Belegzeilen einf|fffd|gen")
  Reply = Trim(Reply)
  Count = -1
  If IsNumeric(Reply) Then
    On Error Resume Next  ' Handle potential Overflows in String Conversion
    Count = CInt(Reply)
    On Error GoTo 0
  End If
  
  If (Count <= 0) Then
    Exit Sub
  End If
  
  If (Count < 1) Or (Count > 1000) Then
    MsgReply = MsgBox(Prompt:="'" & Reply & "' ist keine g|fffd|ltige Eingabe." & vbCr & _
                   "Einf|fffd|geoperation abgebrochen.", _
           Buttons:=vbOKOnly Or vbExclamation, _
           Title:="Fehler - Mehrere Belegzeilen einf|fffd|gen")
    Exit Sub
  End If
  InvMat_InsertReceiptLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=Count
End Sub ' InvMat_InsertMultipleReceiptLines_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     InvMat_InsertReceiptLine()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add one or more lines for additional receipts to the list of receipts.
' If this function is used programmatically, we can specify the worksheet
' and the location where we want to add the lines. If used interactively
' we shall add the lines at the current selection (or at the bottom of
' the list, if the current selection is not within the list)
Sub InvMat_InsertReceiptLine(Optional WSheet As Worksheet = Nothing, _
                              Optional InsertRowIdx As Integer = -1, _
                              Optional InsertRowCnt As Integer = -1)
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim ReceiptTableHeadRowIdx As Integer
  Dim ReceiptTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set TemplateRow = WSheet.Range(c_ReceiptTemplateRow)
  
  ReceiptTableHeadRowIdx = WSheet.Range(c_ReceiptRangeHeadRow).Row
  ReceiptTableTailRowIdx = WSheet.Range(c_ReceiptPasteGuardRow).Row - 1
  
  If (Selection.Parent Is WSheet) And (Selection.Rows.Count >= 1) Then
    SelectTopRow = Selection.Row
    SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    
    If (SelectTopRow < ReceiptTableHeadRowIdx) Then
      SelectTopRow = ReceiptTableHeadRowIdx
    End If
    If (SelectBottomRow > ReceiptTableTailRowIdx) Then
      SelectBottomRow = ReceiptTableTailRowIdx
    End If
  Else
    SelectTopRow = ReceiptTableTailRowIdx
    SelectBottomRow = ReceiptTableTailRowIdx
  End If
  
  If (InsertRowCnt <= 0) Then
    If (SelectTopRow < SelectBottomRow) Then
      InsertRowCnt = (SelectBottomRow - SelectTopRow) + 1
    Else
      InsertRowCnt = 1
    End If
  End If
  
  If (InsertRowIdx < 0) Then
    ' Option A: Always Insert at the Top of the Table
    ' InsertRowIdx = 0
    
    ' Option B: Always Insert at the Bottom of the Table
    ' InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
    
    ' Option C: Insert Before the Current Selection (Excel Standard)
    ' InsertRowIdx = Selection.Row - ReceiptTableHeadRowIdx
    
    ' Option D: Insert Behind the Current Selection
    InsertRowIdx = Selection.Row + Selection.Rows.Count - ReceiptTableHeadRowIdx
    
    ' Special Case: If we insert in the first line, we shall insert before the first line
    ' If (InsertRowIdx = 1) Then InsertRowIdx = 0
    If (Selection.Row = ReceiptTableHeadRowIdx) Then InsertRowIdx = 0
  End If
  
  If (InsertRowIdx < 0) Then
    ' InsertRowIdx = 0
    InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
  End If
  If (InsertRowIdx > (ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1)) Then
    InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
  End If
  InsertRowIdx = InsertRowIdx + ReceiptTableHeadRowIdx
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TemplateRow.Rows.Hidden = False
  If (InsertRowIdx = ReceiptTableHeadRowIdx) Then
    WSheet.Range(CStr(InsertRowIdx + 1) & ":" & CStr(InsertRowIdx + InsertRowCnt)).Insert (xlShiftDown)
    RowIdx = InsertRowIdx + InsertRowCnt
    WSheet.Range(c_ReceiptRangeHeadRow).Copy (WSheet.Cells(RowIdx, 1))
  Else
    WSheet.Range(CStr(InsertRowIdx) & ":" & CStr(InsertRowIdx + InsertRowCnt - 1)).Insert (xlShiftDown)
  End If
  
  For RowIdx = InsertRowIdx To InsertRowIdx + InsertRowCnt - 1
    TemplateRow.Copy (WSheet.Cells(RowIdx, 1))
    Set IndexCell = WSheet.Cells(RowIdx, ColumnTitleToIdx(c_SerialNrColumn))
    If (RowIdx <> ReceiptTableHeadRowIdx) Then
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
    Else
      IndexCell.Formula = "=" & _
        WSheet.Cells(RowIdx + InsertRowCnt, ColumnTitleToIdx(c_SerialNrColumn)).Value
      IndexCell.Locked = False
      IndexCell.Interior.ColorIndex = -4142
    End If
  Next RowIdx
  
  If (RowIdx < WSheet.Range(c_ReceiptPasteGuardRow).Row) Then
    Set IndexCell = WSheet.Cells(RowIdx, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  If (RowIdx + 1 < WSheet.Range(c_ReceiptPasteGuardRow).Row) Then
    Set IndexCell = WSheet.Cells(RowIdx + 1, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  
  TemplateRow.Rows.Hidden = True
  
  WSheet.Cells(InsertRowIdx, 4).Select
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' InvMat_InsertReceiptLine()
'

' **********************************************************************
' *                                                                    *
' *                 InvMat_DeleteReceiptLine_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete the selected rows of receipts from the active worksheet.
Sub InvMat_DeleteReceiptLine_OnClick()
  InvMat_DeleteReceiptLine WSheet:=ActiveSheet, DeleteRowIdx:=-1, DeleteRowCnt:=-1
End Sub ' InvMat_DeleteReceiptLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     InvMat_DeleteReceiptLine()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete one or more lines from the list of receipts.
' Note: When using this function programmatically, we can pass the
' worksheet and rows that we want to delete. If this is used interactivly
' we shall delete the selected row(s) from the active worksheet.
Sub InvMat_DeleteReceiptLine(Optional WSheet As Worksheet = Nothing, _
                              Optional DeleteRowIdx As Integer = -1, _
                              Optional DeleteRowCnt As Integer = -1)
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim ReceiptTableHeadRowIdx As Integer
  Dim ReceiptTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  Dim RangeDef As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set TemplateRow = WSheet.Range(c_ReceiptTemplateRow)
  
  ReceiptTableHeadRowIdx = WSheet.Range(c_ReceiptRangeHeadRow).Row
  ReceiptTableTailRowIdx = WSheet.Range(c_ReceiptPasteGuardRow).Row - 1
  
  If (DeleteRowIdx = 0) Or (DeleteRowCnt = 0) Then
    Exit Sub
  End If
  
  If (DeleteRowIdx < 0) Then
    If Not (Selection.Parent Is WSheet) Or (Selection.Rows.Count < 1) Then
      Exit Sub
    End If
    
    SelectTopRow = Selection.Row
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  Else
    SelectTopRow = ReceiptTableHeadRowIdx + DeleteRowIdx - 1
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = ReceiptTableTailRowIdx
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  End If
  
  If (SelectTopRow < ReceiptTableHeadRowIdx) Or _
     (SelectTopRow > SelectBottomRow) Or _
     (SelectBottomRow > ReceiptTableTailRowIdx) Then
    Exit Sub
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ' Do we want to delete the top line?
  If (SelectTopRow = ReceiptTableHeadRowIdx) Then
    SelectTopRow = SelectTopRow + 1
    If SelectBottomRow = ReceiptTableTailRowIdx Then
      RowIdx = TemplateRow.Row
    Else
      RowIdx = SelectBottomRow + 1
      SelectBottomRow = SelectBottomRow + 1
    End If
    TemplateRow.Rows.Hidden = False
    RangeDef = ColumnIdxToTitle(c_FirstDataEntryColumnIdx) & CStr(RowIdx) & ":" & _
                 ColumnIdxToTitle(WSheet.UsedRange.Columns.Count) & CStr(RowIdx)
    WSheet.Range(RangeDef).Copy _
                 WSheet.Cells(ReceiptTableHeadRowIdx, c_FirstDataEntryColumnIdx)
    TemplateRow.Rows.Hidden = True
  End If
  
  If (SelectTopRow <= SelectBottomRow) Then
    WSheet.Range(CStr(SelectTopRow) & ":" & CStr(SelectBottomRow)).Delete (xlShiftUp)
  End If
  
  If SelectTopRow < WSheet.Range(c_ReceiptPasteGuardRow).Row Then
    Set IndexCell = WSheet.Cells(SelectTopRow, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (SelectTopRow - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  
  ' If the cursor was placed right above a hidden line, and we delete
  ' a line above the cursor, the cursor will move to the hidden line.
  ' We shall resolve this problem by moving the cursor.
  If (Selection.Parent Is WSheet) Then
    Do While Rows(Selection.Row).Hidden
      Cells(Selection.Row - 1, Selection.Column).Select
    Loop
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' InvMat_DeleteReceiptLine()
'

' **********************************************************************
' *                                                                    *
' *                     InvMat_CollectTopicsTest()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_CollectTopicsTest(WSheet As Worksheet)
  Dim Topic() As String
  Dim Formula() As String
  Dim TopicCnt As Integer
  Dim I As Integer
  
  InvMat_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=False
  
  Debug.Print "TopicCnt = " & CStr(TopicCnt)
  For I = 1 To TopicCnt
    Debug.Print "Topic[" & CStr(I) & "] = " & Topic(I) & " -> >>" & Formula(I) & "<<"
  Next I
End Sub ' InvMat_CollectTopicsTest()
'

' **********************************************************************
' *                                                                    *
' *                       InvMat_CollectTopics()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InvMat_CollectTopics(WSheet As Worksheet, GroupByTaskCode As Boolean, _
                         ByRef Topic() As String, ByRef Formula() As String, _
                         ByRef TopicCnt As Integer)
  Dim RowIdx As Integer
  Dim TopRow As Integer
  Dim BottomRow As Integer
  Dim RowUsed As Boolean
  Dim ColumnIdx As Integer
  Dim SubTopic As String
  Dim StdSubTopic As String
  Dim TopicIdx As Integer
  Dim TopicFound As Boolean
  Dim UseUserTopic As Boolean
  Dim TopicColumnIdx As Integer
  
  ReDim Topic(1 To 20)
  ReDim Formula(1 To 20)
  
  If (GroupByTaskCode) Then
    TopicColumnIdx = c_TaskCodeColumnIdx
    StdSubTopic = "<ohne Code>"
  Else
    TopicColumnIdx = c_SubProjectColumnIdx
    StdSubTopic = WSheet.Range(gc_InvMat_ApplicationSubject).Value
  End If
  StdSubTopic = Trim(StdSubTopic)
  TopicCnt = 0
  UseUserTopic = False
  
  ' TopRow = WSheet.UsedRange.Row
  ' BottomRow = TopRow + WSheet.UsedRange.Rows.Count - 1
  TopRow = WSheet.Range(c_ReceiptRangeHeadRow).Row
  BottomRow = WSheet.Range(c_ReceiptTemplateRow).Row - 2
  For RowIdx = TopRow To BottomRow
    RowUsed = False
    For ColumnIdx = c_FirstDataEntryColumnIdx To c_LastDataEntryColumnIdx
      If (Not IsEmptyString(WSheet.Cells(RowIdx, ColumnIdx).Value)) Then
        RowUsed = True
        Exit For
      End If
    Next ColumnIdx
    If (RowUsed) Then
      SubTopic = WSheet.Cells(RowIdx, TopicColumnIdx).Value
      SubTopic = Trim(SubTopic)
      If (SubTopic = "") Then
        SubTopic = StdSubTopic
      Else
        UseUserTopic = True
      End If
      
      TopicFound = False
      For TopicIdx = 1 To TopicCnt
        If LCase(Topic(TopicIdx)) = LCase(SubTopic) Then
          ' Debug.Print ("Reused Topic " & SubTopic)
          Formula(TopicIdx) = Formula(TopicIdx) & "+" & gc_InvMat_SumColumnMarker & CStr(RowIdx)
          TopicFound = True
          Exit For
        End If
      Next TopicIdx
      
      If (Not TopicFound) Then
        ' Debug.Print ("New Topic " & SubTopic)
        TopicCnt = TopicCnt + 1
        If (TopicCnt > UBound(Topic)) Then
          ReDim Preserve Topic(1 To UBound(Topic) + 20)
          ReDim Preserve Formula(1 To UBound(Topic))
        End If
        Topic(TopicCnt) = SubTopic
        Formula(TopicCnt) = "=" & gc_InvMat_SumColumnMarker & CStr(RowIdx)
      End If
    End If
  Next RowIdx
  
  If (TopicCnt = 1) Then
    Formula(1) = "=SUM(" & gc_InvMat_SumColumnMarker & CStr(TopRow) & ":" & _
                           gc_InvMat_SumColumnMarker & CStr(BottomRow) & ")"
  End If
  
  If (Not UseUserTopic) Then
    TopicCnt = 0
  End If
End Sub ' InvMat_CollectTopics()
'
' **********************************************************************
' *                      InvestSachleistungen.bas                      *
' **********************************************************************
Attribute VB_Name = "Notizen"
' **********************************************************************
' *                                                                    *
' *                             Notizen.bas                            *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.315   Roland Lieger    10. 2.2016    Created
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************
'
' It seems that Excel sometimes gets confused about character encoding
' and switches between Latin-1 and some other encoding (???), which is
' no problem in the Visual Basic Code, since it is ASCII-only anyways,
' but some worksheets are named using accented characters, and these can
' then suddenly no longer be found after the accented characters in the
' Visual Basic code get corrupted (but not in the worksheets themselved),
' which causes the application to crash. ;(
' Excel (2002) stores the german Umlaut Characters using Latin1 encoding.
'
' To make this condition easier to detect, we shall show some accented
' characters here:
'    |fffd| (Ae) = Latin1(0xC4) = UniCode(U+00C4) = UTF8(0xC3 0x84)
'    |fffd| (ae) = Latin1(0xE4) = UniCode(U+00E4) = UTF8(0xC3 0xA4)
'    |fffd| (Oe) = Latin1(0xD6) = UniCode(U+00D6) = UTF8(0xC3 0x96)
'    |fffd| (oe) = Latin1(0xF6) = UniCode(U+00F6) = UTF8(0xC3 0xB6)
'    |fffd| (Ue) = Latin1(0xDC) = UniCode(U+00DC) = UTF8(0xC3 0x9C)
'    |fffd| (ue) = Latin1(0xFC) = UniCode(U+00FC) = UTF8(0xC3 0xBC)
'    |fffd| (ss) = Latin1(0xDF) = UniCode(U+00DF) = UTF8(0xC3 0x9F)
'    Byte Order Mark = UniCode(U+FEFF) = UTF8(0xEF 0xBB 0xBF)
'
' **********************************************************************
' **********************************************************************

Option Explicit

Public Const gc_ScratchPad_TemplateSheet As String = "TEMPLATE Notizen"
Public Const gc_ScratchPad_WorkSheet As String = "Notizen"

Private Const c_ApplicantIDCell As String = "ScratchPad_ApplicantID"
Private Const c_ApplicantNameCell As String = "ScratchPad_ApplicantName"
Private Const c_ApplicationIDCell As String = "ScratchPad_ApplicationID"
Public Const gc_ScratchPad_ApplicationSubject As String = "ScratchPad_ApplicationSubject"
Private Const c_TaxDeductCell As String = "ScratchPad_TaxDeduct"
Private Const c_SupportPeriodStartCell As String = "ScratchPad_SupportPeriodStart"
Private Const c_SupportPeriodEndCell As String = "ScratchPad_SupportPeriodEnd"
Private Const c_DefaultActiveCell As String = "ScratchPad_DefaultCursorPos"

Public Const gc_ScratchPad_FormVersionCell As String = "ScratchPad_FormVersion"

Private Const c_Button_DeleteSheet As String = "Button_DeleteSheet"
Private Const c_Button_CreateSheet As String = "Button_CreateScratchPadSheet"
'

' **********************************************************************
' *                                                                    *
' *                       CreateScratchPadSheet()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CreateScratchPadSheet(WBook As Workbook)
  Dim UserSheet As Worksheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
   
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   
  Set UserSheet = CopyUserSheet(WSheet:=WBook.Worksheets(gc_ScratchPad_TemplateSheet), _
                                WSheetCopyName:=gc_ScratchPad_WorkSheet, _
                                Before:=WBook.Worksheets(gc_ScratchPad_TemplateSheet))
  
  If Not (UserSheet Is Nothing) Then
    MarkShapes WSheet:=UserSheet, TemplateSheet:=WBook.Worksheets(gc_ScratchPad_TemplateSheet)
    
    ' Make sure that the first important cell is selected an the
    ' sheet is neatly scrolled to home position
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    UserSheet.Range(c_DefaultActiveCell).Select
    
    If Not StandAloneSheet() Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
    End If
    
    ' On 2017-09-18 a User reported trouble with WinXP/Excel 2007:
    '     Laufzeitfehler '1004' - Die LeftFooter-Eigenschaft des
    '        PageSetup-Objekts kann nicht festgelegt werden.
    ' The reason for this problem is not known, however we shall
    ' simply skip PageSetup if we encounter this problem.
    ' Note: This is a dirty workaround not a solution! FIXME!
    On Error GoTo SkipPageSetup
    If (UserSheet.PageSetup.LeftFooter <> "") Then
      If (StandAloneSheet()) Then
        UserSheet.PageSetup.LeftFooter = "Notizen"
      Else
        UserSheet.PageSetup.LeftFooter = "ZA/Notizen"
      End If
      ' UserSheet.PageSetup.CenterFooter = c_PublicVersionInfo & " / " & c_MonthName(Month(NowDateTime) - 1) & " " & Year(NowDateTime)
      ' UserSheet.PageSetup.RightFooter = "Seite &P von &N"
      UserSheet.DisplayAutomaticPageBreaks = False
    End If
SkipPageSetup:
    On Error GoTo 0
    
    UserSheet.Shapes(c_Button_DeleteSheet).Visible = True
    UserSheet.Shapes(c_Button_CreateSheet).Visible = True
  
    ProtectWSheet WSheet:=UserSheet
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WBook:=WBook
End Sub ' CreateScratchPadSheet()
'

' **********************************************************************
' *                                                                    *
' *                      ScratchPad_DeleteSheet()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub ScratchPad_DeleteSheet()
  Dim WSheet As Worksheet
  Dim Button As VbMsgBoxResult
  
  Set WSheet = ActiveSheet
  If WSheet.Name = gc_ScratchPad_TemplateSheet Then
    Exit Sub
  End If
    
  If gc_DisplayAreYouSureDialogs Then
    Button = MsgBox(Prompt:="Sie sind dabei das Notizblatt " & _
                   Chr(34) & WSheet.Name & Chr(34) & " mit allen Eingaben zu l|fffd|schen. " & vbCr & _
                   "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden. " & vbCr & _
                   "Sind Sie sicher, dass Sie das wollen?", _
                   Buttons:=(vbYesNo Or vbDefaultButton2 Or vbExclamation), _
                   Title:=(WSheet.Name & " l|fffd|schen - Sind Sie sicher?"))
    If (Button <> vbYes) Then
      Exit Sub
    End If
  End If
  
  ScratchPad_CoreDeleteSheet WSheet:=WSheet
End Sub ' ScratchPad_DeleteSheet()
'

' **********************************************************************
' *                                                                    *
' *                    ScratchPad_CoreDeleteSheet()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete the active ScratchPad Sheet
Sub ScratchPad_CoreDeleteSheet(Optional WSheet As Worksheet = Nothing)
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  If WSheet.Name = gc_InKind_TemplateSheet Then
    Exit Sub
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=ActiveWorkbook
  RemoveProtection WBook:=ActiveWorkbook, WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Delete the current user data sheet (if it exists)
  ' Note: It would be very tempting to simply delete the Worksheet now.
  ' This works fine for many Excel installations, however I found an
  ' Excel 2013 (32-bit) installation on Win7 (32-bit) that reproducably
  ' crashes completly when I simply delete the worksheet here. :(
  ' Workaround: We shall only mark the worksheet for deletion here and
  ' hide it (so it appears deleted to the end user) and then set up a
  ' timer that will trigger in 5 seconds (when user interaction has
  ' hopefully settled down) and start a garbage collection that actually
  ' deletes the unwanted sheets.
  ' WSheet.Delete - DO NOT DO THIS - Excel 2013 will crash!!!
  WSheet.Name = UniqueSheetName(gc_DeletedCookie & WSheet.Name)
  WSheet.Visible = False
  
  Application.OnTime Now() + TimeValue("0:00:01"), "EmptyTrash"
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=ActiveWorkbook
End Sub ' ScratchPad_CoreDeleteSheet()
'

' **********************************************************************
' *                                                                    *
' *                 ScratchPad_GetPreferredWSheetName()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function ScratchPad_GetPreferredWSheetName(WSheet As Worksheet) As String
  Dim Subject As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    ScratchPad_GetPreferredWSheetName = WSheet.Name
    Return
  End If
  
  Subject = Trim(WSheet.Range(gc_ScratchPad_ApplicationSubject).Value)
  
  If (Subject = "") Then
    ScratchPad_GetPreferredWSheetName = gc_ScratchPad_WorkSheet
  Else
    ScratchPad_GetPreferredWSheetName = gc_ScratchPad_WorkSheet & " - " & Subject
  End If

End Function ' ScratchPad_GetPreferredWSheetName()

' **********************************************************************
' *                             Notizen.bas                            *
' **********************************************************************

Attribute VB_Name = "Personalkosten"
' **********************************************************************
' *                                                                    *
' *                    Abrechnung der Personalkosten                   *
' *                       f|fffd|r gef|fffd|rderte Ma|fffd|nahmen                     *
' *                                                                    *
' *  Weitere Informationen zu F|fffd|rderungen:                             *
' *      Bundesministerium f|fffd|r                                         *
' *          Land- und Forstwirtschaft, Umwelt und Wasserwirtschaft    *
' *      Stubenring 1 - 1010 Wien - |fffd|sterreich                         *
' *      http://www.bmlfuw.gv.at                                       *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt von:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' N|fffd|tzliche Links:
' Projektauswahlkriterien f|fffd|r die l|fffd|ndliche Entwicklung 2014 - 2020
'   http://www.bmlfuw.gv.at/land/laendl_entwicklung/auswahlkriterien.html
'   http://www.bmlfuw.gv.at/dms/lmat/land/laendl_entwicklung/auswahlkriterien/Beschreibung-der-Auswahlverfahren-und-Auswahlkriterien-f-r-Projektma-nahmen-LE-2014---2020/Beschreibung%20der%20Auswahlverfahren%20und%20Auswahlkriterien%20f%C3%BCr%20Projektma%C3%9Fnahmen%20LE%202014%20-%202020.pdf
'
'  Sonderrichtlinie f|fffd|r die l|fffd|ndliche Entwicklung 2014-2020
'   http://www.bmlfuw.gv.at/land/laendl_entwicklung/SRL.html
'   http://www.bmlfuw.gv.at/dms/lmat/land/laendl_entwicklung/SRL/SRL_Projektf-rderung_LE14-20_endg_16022015/SRL_Projektf%C3%B6rderung_LE14-20_endg_16022015.pdf
'
'  |fffd|sterreichisches Programm f|fffd|r l|fffd|ndliche Entwicklung 2014 - 2020 - Programmtext
'    http://www.bmlfuw.gv.at/land/laendl_entwicklung/leprogramm.html
'    http://www.bmlfuw.gv.at/dms/lmat/land/laendl_entwicklung/leprogramm/Programm-LE-14-20/Programm%20LE%2014-20.pdf
'
' Abk|fffd|rzungen:
'   FW .... F|fffd|rderungswerberA
'   BST ... Bewilligende Stelle / Bewilligungsstelle
'   VWK ... Verwaltungskontrolle
'   VOK ... Vor-Ort-Kontrolle
'
' vgl. AMA-Datenbank: Landwirtschaftl. Entwicklung & Wein (LEW)
'
'--*+Beschreibung:
' Personalaufwand kann auf f|fffd|r gef|fffd|dertere Projekte kann nach drei
' verschiedenen Methoden abgerechnet werden:
' .) Es wird genau dargestellt wie viel Geld ein Mitarbeiter seinen
'    Arbeitgeber gekostet hat und wie viele Stunden er daf|fffd|r gearbeitet
'    hat.
' .) Es wird genau dargestellt wie viel Geld ein Mitarbeiter seinen
'    Arbeitgeber gekostet hat, aber die geleisteten Stunden werden
'    |fffd|ber die im Arbeitsvertrag vereinbarten Wochenarbeitszeit pauschal
'    berechnet.
' .) Es wird ein pauschaler Stundenkostensatz definiert, der nicht
'    weiter erkl|fffd|rt wird.
'
' Bei jeder dieser Methoden ergibt sich letztlich ein Stundenkostensatz.
' Wenn man diesen Satz mit der Anzahl der f|fffd|r das gef|fffd|rderte Projekt
' geleisteten Stunden multipliziert hat man die zu f|fffd|rdernden Personalkosten.
'
' Das Excel Worksheet "Personalkosten" (welches sich vom "TEMPLATE Personalkosten"
' ableitet) erfasst die Kosten f|fffd|r _ein_ Projekt, dass ggf. viele Mitarbeiter
' hat, die alle neben der Arbeit f|fffd|r das gegebene Projekt auch noch anderen
' T|fffd|tigkeiten nachgehen.
' Beim Ausf|fffd|llen entscheidet sich der F|fffd|rderwerber (FW) zun|fffd|chst f|fffd|r eine
' der drei verf|fffd|gbaren Abrechnungsmethoden.
' Danach gibt er die f|fffd|r die gew|fffd|hlte Abrechnungsmethode relevanten Daten
' ein und, nachdem er alles kontrolliert hat, klickt er auf "Eingabe abschlie|fffd|en".
' Nun werden alle seine Eingaben in Schattenfelder kopiert, die nun f|fffd|r die
' Bewilligungsstelle bearbeitbar sind. Auf Wunsch von Rita Froschauer werden
' die Originalfelder der Benutzereingaben dabei ausgeblendet um die Tabelle
' nicht allzu breit werden zu lassen.
' Die Bewilligungsstelle kann nun im Rahmen der Verwaltungskontrolle die Eingaben
' des F|fffd|derwerbers pr|fffd|fen und ggf. korrigieren. Ver|fffd|nderte Werte werden dabei
' in roter Schrift dargestellt.

':Beschreibung+*--
'
' Excel Dictionary:
'   English      <-> German
'   Workbook     <-> Arbeitsmappe (= Mappe)
'   (Work-)Sheet <-> Arbeitsblatt (= Tabellenblatt = Blatt)
'   Row          <-> Zeile
'   Column       <-> Spalte
'   Cell         <-> Zelle
'
'--*+History:
'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.00    Roland Lieger    12.06.2015    Erstellt
'  1.0.0.01    Roland Lieger    13.06.2015    Erstellt
'  1.0.0.30    Roland Lieger    14.06.2015    Erster Pre-Release
'  1.0.0.31    Roland Lieger    14.06.2015    Kommentare
'  1.0.0.50    Roland Lieger    17.06.2015    Added Full Time Project Mode
'                                             Lots of Debugging & Formating
'  1.0.0.52    Roland Lieger    18.06.2015    Re-Added Buttons for Adding Employees
'                                             Debugging
'  1.0.0.122   Roland Lieger     3.07.2015    Added Lots of Comments / Getting Ready for Release
'  1.0.0.130   Roland Lieger     8.07.2015    Debugging / Secondary Unlock Applicant
'  1.0.0.148   Roland Lieger     4.11.2015    Last Project can't be deleted any more
'  1.0.0.254   Roland Lieger     6.11.2015    Added DataValid() Check
'  1.0.0.268   Roland Lieger    11.11.2015    Getting Ready for Release
'  1.0.0.284   Roland Lieger    20.11.2015    Added DeforePrint/AfterPrint
'  1.0.0.293   Roland Lieger    21.11.2015    Added Consistency Check to SubmitInputData()
'  1.0.0.300   Roland Lieger    25.11.2015    Added 'Are you sure' dialogs
'+-----------+-----------------+------------+------------------------------------------
':History+*--
' **********************************************************************
' **********************************************************************

Option Explicit
Public Const gc_TemplateLabourCostSheet As String = "TEMPLATE Personalkosten"
Public Const gc_LabourCostWorkSheet As String = "Personalkosten"
Public Const gc_LabourCostWorkSheetAbbr As String = "Personalk. - "
Public Const gc_TemplateLabourCostLimitSheet As String = "TABLE Gehaltsgrenzen"

' Private const c_Button_AddEmployee as String = "Button_AddEmployee"
' Private const c_Button_DeleteEmployee as String = "Button_DelEmployee"
' Private const c_Button_FinishInput as String = "Button_FinishInput"
Private Const c_MatchCellColIdx As Integer = 4  ' ColumnTitleToIdx("D")
  
Private Const c_ProjectNameCell As String = "Labour_ProjectNameCell"
Private Const c_ApplicantIDCell As String = "Labour_ApplicantIDCell"
Private Const c_ApplicantNameCell As String = "Labour_ApplicantNameCell"
Private Const c_ApplicationIDCell As String = "Labour_ApplicationIDCell"
' Private Const c_TaxDeductCell As String = "Labour_TaxDeductCell"
' Private Const c_SupportPeriodStartCell As String = "Labour_SupportPeriodStartCell"
' Private Const c_SupportPeriodEndCell As String = "Labour_SupportPeriodEndCell"
Public Const gc_Labour_ApplicationSubject As String = "Labour_ApplicationSubject"
Public Const gc_Labour_ApplicationSubjectShadow As String = "Labour_ApplicationSubjectShadow"

Public Const gc_Labour_FormVersionCell As String = "Labour_FormVersion"

Public Const gc_Labour_AppliedCost As String = "Labour_AppliedCost"
Public Const gc_Labour_ReducedCostVWK As String = "Labour_ReducedCostVWK"
Public Const gc_Labour_AcceptedCostVWK As String = "Labour_AcceptedCostVWK"
Public Const gc_Labour_ReducedCostVOK As String = "Labour_ReducedCostVOK"
Public Const gc_Labour_AcceptedCostVOK As String = "Labour_AcceptedCostVOK"

Public Const gc_Labour_AppliedCostInclOverhead As String = "Labour_AppliedCostInclOverhead"
Public Const gc_Labour_ReducedCostInclOverheadVWK As String = "Labour_ReducedCostInclOverheadVWK"
Public Const gc_Labour_AcceptedCostInclOverheadVWK As String = "Labour_AcceptedCostInclOverheadVWK"
Public Const gc_Labour_ReducedCostInclOverheadVOK As String = "Labour_ReducedCostInclOverheadVOK"
Public Const gc_Labour_AcceptedCostInclOverheadVOK As String = "Labour_AcceptedCostInclOverheadVOK"

Public Const gc_Labour_SumAppliedCost As String = "Labour_SumAppliedCost"
Public Const gc_Labour_SumApplicableCost As String = "Labour_SumApplicableCost"
Public Const gc_Labour_SumOverheads As String = "Labour_SumOverheads"
Public Const gc_Labour_SumTotalCostInclOverhead As String = "Labour_SumTotalCostInclOverhead"

Public Const gc_Labour_ApplSubjectMirrorRows As String = "Labour_ApplSubjectMirrorRows"

Public Const gc_LabourC_SumApplicableCost As String = "LabourC_SumApplicableCost"
Public Const gc_LabourC_SumApplicableCostVWK As String = "LabourC_SumApplicableCostVWK"
Public Const gc_LabourC_SumOverheads As String = "LabourC_SumOverheads"
Public Const gc_LabourC_SumTotalCostInclOverhead As String = "LabourC_SumTotalCostInclOverhead"
Public Const gc_LabourC_SumTotalCostInclOverheadVWK As String = "LabourC_SumTotalCostInclOverheadVWK"

Public Const gc_Labour_SumAppliedCostCheck As String = "Labour_SumAppliedCostCheck"
Public Const gc_Labour_SumApplicableCostCheck As String = "Labour_SumApplicableCostCheck"
Public Const gc_Labour_SumOverheadsCheck As String = "Labour_SumOverheadsCheck"
Public Const gc_Labour_SumTotalCostInclOverheadCheck As String = "Labour_SumTotalCostInclOverheadCheck"

Public Const gc_LabourC_SumApplicableCostCheck As String = "LabourC_SumApplicableCostCheck"
Public Const gc_LabourC_SumApplicableCostVWKCheck As String = "LabourC_SumApplicableCostVWKCheck"
Public Const gc_LabourC_SumOverheadsCheck As String = "LabourC_SumOverheadsCheck"
Public Const gc_LabourC_SumTotalCostInclOverheadCheck As String = "LabourC_SumTotalCostInclOverheadCheck"
Public Const gc_LabourC_SumTotalCostInclOverheadVWKCheck As String = "LabourC_SumTotalCostInclOverheadVWKCheck"

' Public Const gc_Labour_SumSanctionsVWK As String = "Labour_SumSanctionsVWK"
Public Const gc_Labour_SumSanctionsVOK As String = "Labour_SumSanctionsVOK"
' Public Const gc_Labour_SumSanctionsOverheadVWK As String = "Labour_SumSanctionsOverheadVWK"
Public Const gc_Labour_SumSanctionsOverheadVOK As String = "Labour_SumSanctionsOverheadVOK"

Private Const c_VisibleButtonMaskCell As String = "Labour_VisibleButtonMask"

Private Const c_Button_DetailedCostHours As String = "Button_DetailedCostHours"
Private Const c_Button_DetailedCostFlatHours As String = "Button_DetailedCost_FlatHours"
Private Const c_Button_FullTimeProjectWages As String = "Button_WageFullTime"
Private Const c_Button_FlatWages As String = "Button_FlatWages"

Private Const c_Button_EraseAll As String = "Button_EraseAllData"
Private Const c_Button_DuplicateSheet As String = "Button_DuplicateSheet"
Private Const c_Button_RemoveMacros As String = "Button_RemoveMacros"

Private Const c_Button_LockAll As String = "Button_LockAll"
Private Const c_Button_UnlockAll As String = "Button_UnlockAll"
Private Const c_Button_ShowAllFields As String = "Button_ShowAllFields"

Private Const c_Button_SubmitInputData As String = "Button_SubmitInputData"

Private Const c_Button_AddProj As String = "Button_AddProj"
Private Const c_Button_DelProj As String = "Button_DelProj"
Private Const c_Button_AddEmployee As String = "Button_AddEmployee"
Private Const c_Button_DelEmployee As String = "Button_DelEmployee"

Private Const c_SelectCalcModeRows As String = "Labour_SelectCalcModeRows"
Private Const c_CalcModeTitleRows As String = "Labour_CalcModeTitleRows"

Private Const c_EmployeeHeaderRows As String = "Labour_EmployeeHeaderRows"
Private Const c_FlatWageDataRows As String = "Labour_FlatWageDataRows"
Private Const c_WorkPeriodYearRows As String = "Labour_WorkPeriodYearRows"

Private Const c_DetailedCostDataRows As String = "Labour_DetailedWageDataRows"
Private Const c_OvertimePaymentRow As String = "Labour_OvertimePaymentRow"
Private Const c_ReferenceCostDataRows As String = "Labour_ReferenceCostDataRows"
Private Const c_ProjectHoursDataRows As String = "Labour_ProjectHoursDataRows"
Private Const c_EditTotalWorkHoursRow As String = "Labour_EditTotalWorkHoursRow"
Private Const c_CalcTotalWorkHoursRow As String = "Labour_CalcTotalWorkHoursRow"
Private Const c_WeeklyHoursRow As String = "Labour_WeeklyHoursRow"
Private Const c_ActualWeeklyHoursRow As String = "Labour_ActualWeeklyHoursRow"
Private Const c_VOKEntryRange As String = "Labour_VOKEntryRange"

Private Const c_ChargeDaysRow As String = "Labour_ChargeDaysRow"
Private Const c_WorkedDaysRow As String = "Labour_WorkedDaysRow"

Private Const c_ProjDataHeadRow As String = "Labour_ProjDataHeadRow"
Private Const c_ProjTemplateRow As String = "Labour_ProjTemplateRow"
Private Const c_ProjDataTailRow As String = "Labour_ProjDataTailRow"
Private Const c_ModelHoursRange As String = "Labour_ModelHoursRange"
Private Const c_DetailedHoursRange As String = "Labour_DetailedHoursRange"

Private Const c_SelectDataEntryDoneRows As String = "Labour_SelectDataEntryDoneRows"
Private Const c_DataEntryDoneTimestampRows As String = "Labour_DataEntryDoneTimestampRows"
Private Const c_ValidateCostRows As String = "Labour_ValidateCostRows"
Private Const c_ExtraTextRows As String = "Labour_ExtraTextRows"

Private Const c_PaymentHeaderCell As String = "Labour_PaymentHeaderCell"
Private Const c_DataEntryDoneDateCell As String = "Labour_DataEntryDoneDateCell"
Public Const gc_Labour_SelectedCalcTypeCell As String = "Labour_SelectedCalcTypeCell"
Private Const c_TotalSumRange As String = "Labour_TotalSumRange"

Public Const gc_Labor_SumRowMarker As String = "SumRow"

Private Const c_LineTypeColumn As String = "D"
Private Const c_EmployeeTemplateColumn As String = "E"
Private Const c_EmployeeShadowTemplateColumn As String = "F"
Private Const c_EmployeeDataColumn As String = "G"
Private Const c_EmployeeShadowDataColumn As String = "H"

Private Const c_TemplateColumns As String = "B:H"
Private Const c_DataColumns As String = "I:AZ"

Private v_PrintWSheet As Worksheet
'

' **********************************************************************
' *                                                                    *
' *                        Labour_EraseAllData()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Labour_EraseAllData()
  Dim WSheet As Worksheet
  Dim Button As VbMsgBoxResult
  
  Set WSheet = ActiveSheet
  If WSheet.Name = gc_TemplateLabourCostSheet Then
    Exit Sub
  End If
    
  If gc_DisplayAreYouSureDialogs Then
    Button = MsgBox(Prompt:="Sie sind dabei die Belegaufstellung " & _
                   Chr(34) & WSheet.Name & Chr(34) & " mit allen Eingaben zu l|fffd|schen. " & vbCr & _
                   "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden. " & vbCr & _
                   "Sind Sie sicher, dass Sie das wollen?", _
                   Buttons:=(vbYesNo Or vbDefaultButton2 Or vbExclamation), _
                   Title:=(WSheet.Name & " l|fffd|schen - Sind Sie sicher?"))
    If (Button <> vbYes) Then
      Exit Sub
    End If
  End If
  
  Labour_CoreEraseAllData TargetSheet:=WSheet
End Sub ' Labour_EraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                      Labour_CoreEraseAllData()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub Labour_CoreEraseAllData(TargetSheet As Worksheet)
  Dim WBook As Workbook
  Dim PrevVisibility As Boolean
  Dim DebugMode As Boolean
  Dim ActiveLabourSheetCnt As Integer
  Dim WSheet As Worksheet
 
  If TargetSheet.Name = gc_TemplateLabourCostSheet Then
    Exit Sub
  End If
  Set WBook = TargetSheet.Parent
  
 ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook, WSheet:=TargetSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  DebugMode = gc_DebugMode
  If (TargetSheet.Range(c_ApplicantNameCell).Value = gc_DebugApplicantName) Or _
     (TargetSheet.Range(c_ApplicantNameCell).Value = gc_UnlockApplicantName) Then
    DebugMode = True
  End If
  
  ' There must always be at least on visible Worksheet in each Excel
  ' workbook. Thus since we are going to erase all non-template sheets
  ' we must make (at least one) template visible...
  PrevVisibility = WBook.Sheets(gc_TemplateLabourCostSheet).Visible
  WBook.Sheets(gc_TemplateLabourCostSheet).Visible = True
  
  ' Delete the current user data sheet (if it exists)
  ' Note: It would be very tempting to simply delete the Worksheet now.
  ' This works fine for many Excel installations, however I found an
  ' Excel 2013 (32-bit) installation on Win7 (32-bit) that reproducably
  ' crashes completly when I simply delete the worksheet here. :(
  ' Workaround: We shall only mark the worksheet for deletion here and
  ' hide it (so it appears deleted to the end user) and then set up a
  ' timer that will trigger in 5 seconds (when user interaction has
  ' hopefully settled down) and start a garbage collection that actually
  ' deletes the unwanted sheets.
  ' TargetSheet.Delete - DO NOT DO THIS - Excel 2013 will crash!!!
  TargetSheet.Name = UniqueSheetName(gc_DeletedCookie & TargetSheet.Name)
  TargetSheet.Visible = False
  
  If StandAloneSheet() Then
    ActiveLabourSheetCnt = 0
    For Each WSheet In Worksheets
      If (Left(WSheet.Name, Len(gc_LabourCostWorkSheet)) = gc_LabourCostWorkSheet) Or _
         (Left(WSheet.Name, Len(gc_LabourCostWorkSheetAbbr)) = gc_LabourCostWorkSheetAbbr) Then
        ActiveLabourSheetCnt = ActiveLabourSheetCnt + 1
      End If
    Next WSheet
    If ActiveLabourSheetCnt = 0 Then
      CreateLabourUserSheet WBook:=WBook
      Set TargetSheet = ActiveSheet
      TargetSheet.Shapes(c_Button_UnlockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_LockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_DuplicateSheet).Visible = False
      TargetSheet.Shapes(c_Button_RemoveMacros).Visible = False
      TargetSheet.Shapes(c_Button_SubmitInputData).Visible = False
      TargetSheet.Shapes(c_Button_ShowAllFields).Visible = DebugMode
    End If
  End If
  
  WBook.Sheets(gc_TemplateLabourCostSheet).Visible = PrevVisibility
  
 ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
  PopProtection WBook:=WBook

 ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  ' Else
  '   TargetSheet.Delete
  End If
  Application.OnTime Now() + TimeValue("0:00:01"), "EmptyTrash"
  
End Sub ' Labour_EraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                       CreateLabourUserSheet()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub CreateLabourUserSheet(WBook As Workbook)
  Dim UserSheet As Worksheet
  Dim TopRow As Integer
  Dim BottomRow As Integer
  Dim Row As Integer
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set UserSheet = CopyUserSheet(WSheet:=WBook.Worksheets(gc_TemplateLabourCostSheet), _
                                WSheetCopyName:=gc_LabourCostWorkSheet, _
                                Before:=WBook.Worksheets(gc_TemplateLabourCostSheet))
  
  If Not (UserSheet Is Nothing) Then
    MarkShapes WSheet:=UserSheet, TemplateSheet:=WBook.Worksheets(gc_TemplateLabourCostSheet)
    
    ' Make sure that the first important cell is selected an the
    ' sheet is neatly scrolled to home position
    UserSheet.Range(c_ProjectNameCell).Select
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    If WorksheetExists(gc_PaymAppl_WorkSheet) Then
      UserSheet.Range(c_ProjectNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ProjectNameCell).Formula = _
            "=TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_IntentNameCell & ")"
      UserSheet.Range(c_ProjectNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ProjectNameCell).MergeArea.Locked = True ' Do we want this??
      UserSheet.Range(gc_Labour_ApplicationSubject).Select ' ProjectName is fixed - First cell is ApplSubject!
    End If
    
    If Not StandAloneSheet() Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      ' UserSheet.Range(gc_Labour_ApplicationSubject).Select
    End If
    
   ' On 2017-09-18 a User reported trouble with WinXP/Excel 2007:
    '     Laufzeitfehler '1004' - Die LeftFooter-Eigenschaft des
    '        PageSetup-Objekts kann nicht festgelegt werden.
    ' The reason for this problem is not known, however we shall
    ' simply skip PageSetup if we encounter this problem.
    ' Note: This is a dirty workaround not a solution! FIXME!
    On Error GoTo SkipPageSetup
    If (UserSheet.PageSetup.LeftFooter <> "") Then
      If (StandAloneSheet()) Then
        UserSheet.PageSetup.LeftFooter = "Personalkosten"
      Else
        UserSheet.PageSetup.LeftFooter = "ZA/Personalkosten"
      End If
      ' UserSheet.PageSetup.CenterFooter = c_PublicVersionInfo & " / " & c_MonthName(Month(NowDateTime) - 1) & " " & Year(NowDateTime)
      ' UserSheet.PageSetup.RightFooter = "Seite &P von &N"
      UserSheet.DisplayAutomaticPageBreaks = False
    End If
SkipPageSetup:
    On Error GoTo 0

    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ' At first the user has to choose the calculation mode for
    ' labor cost. Thus only the general header and the three buttons
    ' for this choice are visible. All other fields are hidden.
    
    UserSheet.Shapes(c_Button_LockAll).Visible = StandAloneSheet() And gc_DebugMode
    UserSheet.Shapes(c_Button_UnlockAll).Visible = StandAloneSheet() And gc_DebugMode
    UserSheet.Shapes(c_Button_ShowAllFields).Visible = False ' DebugMode
    
    ' Show the Buttons needed for Calc-Mode Selection
    UserSheet.Range(c_SelectCalcModeRows).Rows.Hidden = False
    
    UserSheet.Shapes(c_Button_DuplicateSheet).Visible = False
    UserSheet.Shapes(c_Button_RemoveMacros).Visible = False
    
    UserSheet.Shapes(c_Button_DetailedCostHours).Visible = True
    UserSheet.Shapes(c_Button_DetailedCostFlatHours).Visible = True
    UserSheet.Shapes(c_Button_FullTimeProjectWages).Visible = True
    UserSheet.Shapes(c_Button_FlatWages).Visible = True
    
    ' Hide all Items for actual Calculation
    UserSheet.Shapes(c_Button_AddEmployee).Visible = False
    UserSheet.Shapes(c_Button_DelEmployee).Visible = False
    
    UserSheet.Shapes(c_Button_AddProj).Visible = False
    UserSheet.Shapes(c_Button_DelProj).Visible = False
    UserSheet.Shapes(c_Button_SubmitInputData).Visible = False
    
    TopRow = UserSheet.Range(c_CalcModeTitleRows).Row
    BottomRow = UserSheet.Range(c_ExtraTextRows).Row + _
                UserSheet.Range(c_ExtraTextRows).Rows.Count
    For Row = TopRow To BottomRow
      UserSheet.Rows(Row).Hidden = True
    Next Row
    
    ' Template Columns are hidden...
    UserSheet.Range(c_TemplateColumns).Columns.Hidden = True
  
    ' The general project info fields (project name, applicants name etc.)
    ' stretch across several columns. These columns will later hold the
    ' user entered data and the shadow copy thereof. Only one of these
    ' columns will be visible at any time. To make sure that the header
    ' fields always have constant width, we will need to enforce the
    ' hide-every-other-column rule here...
    UserSheet.Columns(7).Hidden = False
    UserSheet.Columns(8).Hidden = True
    UserSheet.Columns(9).Hidden = False
    UserSheet.Columns(10).Hidden = True
    UserSheet.Columns(11).Hidden = False
    UserSheet.Columns(12).Hidden = True
  
    ' We know that the UserSheet is not protected and we always want to protect it now!
    ProtectLaborCostWorkSheet UserSheet
    UserSheet.Select
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' CreateLabourUserSheet()
'
' **********************************************************************
' *                                                                    *
' *                     DuplicateLabourUserSheet()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateLabourUserSheet_OnClick()
  DuplicateLabourUserSheet WSheet:=ActiveSheet
End Sub ' DuplicateLabourUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                     DuplicateLabourUserSheet()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub DuplicateLabourUserSheet(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim UserSheet As Worksheet
  
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set UserSheet = CopyUserSheet(WSheet:=WSheet, After:=WSheet) ' , WSheetCopyName:=gc_LabourCostWorkSheet)
  
  If Not (UserSheet Is Nothing) Then
    ' For unknown reasons, there is a problem copying the first formula of the
    ' sheet. Thus we shall copy it manually here...
    UserSheet.Range(c_ProjectNameCell).Formula = WSheet.Range(c_ProjectNameCell).Formula
    
    If Not StandAloneSheet() Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
    End If
  
  ' We know that the UserSheet is always unprotected and we always want to protect it now!
  ' If (PrevWSheetProtected) Then
    ProtectLaborCostWorkSheet UserSheet
  ' End If
  End If ' If Not(UserSheet Is Nothing)
  
  If Not (UserSheet Is Nothing) Then
    UnsubmitInputData
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If

End Sub ' DuplicateLabourUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                    Labour_AdjustWorksheetName()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Labour_AdjustWorksheetName(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim Subject As String
  Dim WSheetTitle As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    Exit Sub
  End If
  
  If WSheet.Range(gc_Labour_ApplicationSubject).Value = WSheet.Range(gc_Labour_ApplicationSubjectShadow).Value Then
    Exit Sub
  End If
    
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Subject = WSheet.Range(gc_Labour_ApplicationSubject).Value
  WSheet.Range(gc_Labour_ApplicationSubjectShadow).Value = Subject
  
  WSheetTitle = gc_LabourCostWorkSheetAbbr & Subject
  WSheetTitle = UniqueSheetName(WSheetTitle)
  
  WSheet.Name = WSheetTitle
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' Labour_AdjustWorksheetName()
'

' **********************************************************************
' *                                                                    *
' *                   Labour_GetPreferredWSheetName()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function Labour_GetPreferredWSheetName(WSheet As Worksheet) As String
  Dim Subject As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    Labour_GetPreferredWSheetName = WSheet.Name
    Return
  End If
  
  Subject = Trim(WSheet.Range(gc_Labour_ApplicationSubject).Value)
  If (WSheet.Range(gc_Labour_ApplicationSubjectShadow).Value <> Subject) Then
    WSheet.Range(gc_Labour_ApplicationSubjectShadow).Value = Subject
  End If
  
  If (Subject = "") Then
    Labour_GetPreferredWSheetName = gc_LabourCostWorkSheet
  Else
    Labour_GetPreferredWSheetName = gc_LabourCostWorkSheetAbbr & Subject
  End If

End Function ' Labour_GetPreferredWSheetName()
'

' **********************************************************************
' *                                                                    *
' *                         Labour_DataValid()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function Labour_DataValid(WSheet As Worksheet) As Boolean
  Dim ErrorList As String
  Dim Button As Integer
  
  ErrorList = ""
  If IsEmptyString(WSheet.Range(c_ApplicantIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Betriebs-/Klientennummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicantNameCell).Value) Then
    ErrorList = ErrorList & "    .) Der Name des/der F|fffd|rderungswerber/in fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicationIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Antragsnummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_Labour_ApplicationSubject).Value) Then
    ErrorList = ErrorList & "    .) Die Bezeichnung des F|fffd|rdergegenstandes fehlt" & vbCr
  End If
  
  If (ErrorList <> "") Then
    Button = MsgBox(Prompt:="Der Zahlungsantrag ist nicht korrekt ausgef|fffd|llt:" & vbCr & _
           ErrorList & _
           vbCr & "Wollen Sie trotzdem drucken?", _
           Buttons:=vbYesNo Or vbDefaultButton2 Or vbExclamation, _
           Title:="Fehler im Zahlungsantrag")
    Labour_DataValid = (Button = vbYes)
  Else
    Labour_DataValid = True
  End If
End Function ' Labour_DataValid()
'

' **********************************************************************
' *                                                                    *
' *                    Labour_RemoveMacros_OnClick()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Labour_RemoveMacros_OnClick()
  Dim WSheet As Worksheet
  
  Set WSheet = ActiveSheet
  If WSheet.Shapes(c_Button_SubmitInputData).Visible Then
    SubmitInputData
  End If
  
  CreateNoMacroWBook WBook:=WSheet.Parent, _
                     ApplicantName:=WSheet.Range(c_ApplicantNameCell).Value, _
                     ApplicantID:=WSheet.Range(c_ApplicantIDCell).Value, _
                     ProjectTitle:=WSheet.Range(gc_Labour_ApplicationSubject).Value, _
                     ProjectNumber:=WSheet.Range(c_ApplicationIDCell).Value
End Sub ' Labour_RemoveMacros_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                        Labour_BeforePrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Labour_BeforePrint(Optional WSheet As Worksheet = Nothing)
  Dim ButtonVisibleMask As Long
  Dim BitShiftMask As Long
  Dim I As Integer
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set v_PrintWSheet = WSheet
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ButtonVisibleMask = 0
  BitShiftMask = 1
  For I = 1 To WSheet.Shapes.Count
    BitShiftMask = BitShiftMask + BitShiftMask
    If (WSheet.Shapes(I).Visible) Then
      ButtonVisibleMask = ButtonVisibleMask Or BitShiftMask
    End If
    WSheet.Shapes(I).Visible = False
  Next I
  WSheet.Range(c_VisibleButtonMaskCell).Value = ButtonVisibleMask
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
  
End Sub ' Labour_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                         Labour_AfterPrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Labour_AfterPrint(Optional WSheet As Worksheet = Nothing)
  Dim ButtonVisibleMask As Long
  Dim BitShiftMask As Long
  Dim I As Integer
  
  If (v_PrintWSheet Is Nothing) Then
    If (WSheet Is Nothing) Then
      Set WSheet = ActiveSheet
    End If
  Else
    Set WSheet = v_PrintWSheet
  End If
  Set v_PrintWSheet = Nothing
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ButtonVisibleMask = WSheet.Range(c_VisibleButtonMaskCell).Value
  BitShiftMask = 1
  For I = 1 To WSheet.Shapes.Count
    BitShiftMask = BitShiftMask + BitShiftMask
    WSheet.Shapes(I).Visible = ((ButtonVisibleMask And BitShiftMask) = BitShiftMask)
  Next I
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' Labour_AfterPrint()
'

' **********************************************************************
' *                                                                    *
' *                        SelectModeShowTable()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are four modes for computing labor cost. Each mode requires specific
' rows to be enabled and others to be hidden...
Sub SelectModeShowTable(Mode As String)
  Dim UserSheet As Worksheet
  Dim TopRow As Integer
  Dim BottomRow As Integer
  Dim Row As Integer
  Dim CellData As String
    
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet

  ' Remember the chosen computation mode for later reference
  UserSheet.Range(gc_Labour_SelectedCalcTypeCell).Value = Mode
  
  ' The choice of computation mode is final - Hide the mode selection buttons
  UserSheet.Range(c_SelectCalcModeRows).Rows.Hidden = True
  
  UserSheet.Shapes(c_Button_DuplicateSheet).Visible = True
  UserSheet.Shapes(c_Button_RemoveMacros).Visible = Not WorksheetExists(gc_SummaryWorkSheet)
  
  UserSheet.Shapes(c_Button_DetailedCostHours).Visible = False
  UserSheet.Shapes(c_Button_DetailedCostFlatHours).Visible = False
  UserSheet.Shapes(c_Button_FullTimeProjectWages).Visible = False
  UserSheet.Shapes(c_Button_FlatWages).Visible = False

  ' Show the Mode Title for the chosen mode...
  TopRow = UserSheet.Range(c_CalcModeTitleRows).Row
  UserSheet.Rows(TopRow + Asc(Mode) - Asc("A")).Hidden = False
  UserSheet.Rows(TopRow + 4).Hidden = False
  
  ' Enable all the rows needed for data entry in DetailedCostHours mode
  TopRow = UserSheet.Range(c_EmployeeHeaderRows).Row
  BottomRow = UserSheet.Range(c_DataEntryDoneTimestampRows).Row - 1
  
  For Row = TopRow To BottomRow
    CellData = UserSheet.Cells(Row, c_MatchCellColIdx).Value
    If InStr(CellData, Mode) Then
      UserSheet.Rows(Row).Hidden = False
    Else
      UserSheet.Rows(Row).Hidden = True
    End If
    If InStr(CellData, "Proj") Then
      UserSheet.Cells(Row, c_MatchCellColIdx).Value = "Proj"
    End If
  Next Row
  
  UserSheet.Shapes(c_Button_AddEmployee).Visible = True
  UserSheet.Shapes(c_Button_DelEmployee).Visible = True
  
  ' If the selected mode uses project information, we need to enable these buttons too
  TopRow = UserSheet.Range(c_ProjectHoursDataRows).Row
  CellData = UserSheet.Cells(TopRow + 1, c_MatchCellColIdx).Value
  If InStr(CellData, Mode) Then
    UserSheet.Shapes(c_Button_AddProj).Visible = True
    UserSheet.Shapes(c_Button_DelProj).Visible = True
  End If
  UserSheet.Shapes(c_Button_SubmitInputData).Visible = True
  
  ' Each labor cost calculation requires at least one employee...
  InsertEmployee
  
  PopProtection WSheet:=UserSheet
End Sub ' SelectModeShowTable()
'
' **********************************************************************
' *                                                                    *
' *                   SelectMode_DetailedCostHours()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are four modes for computing labor cost.
' In DetailedCostHours mode we shall require detailed data about
' the amount of money spent for each employee and the number of hours
' that said employee worked for his/her money.
Sub SelectMode_DetailedCostHours()
  SelectModeShowTable ("A")
End Sub
'

' **********************************************************************
' *                                                                    *
' *                 SelectMode_DetailedCost_FlatHours()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are four modes for computing labor cost.
' In DetailedCost_FlatHours mode we shall require detailed data about
' the amount of money spent for each employee. The number of hours that
' the employee works for his/her money is computed using the standard
' number of hours/week statement
Sub SelectMode_DetailedCost_FlatHours()
  SelectModeShowTable ("B")
End Sub
'

' **********************************************************************
' *                                                                    *
' *                  SelectMode_FullProjectTimeWage()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are four modes for computing labor cost.
' In this FlatWage mode we shall not require any statements about the
' number of hours work or the total amount of money received for the
' work. Instead we shall simply use a (god-given) hourly labour cost
' rate (that we compute locally in the other modes)
'
Sub SelectMode_FullProjectTimeWage()
  SelectModeShowTable ("C")
End Sub
'

' **********************************************************************
' *                                                                    *
' *                        SelectMode_FlatWage()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are four modes for computing labor cost.
' In FlatWage mode we shall not require any statements about the
' number of hours work or the total amount of money received for the
' work. Instead we shall simply use a (god-given) hourly labour cost
' rate (that we compute locally in the other modes)
Sub SelectMode_FlatWage()
  SelectModeShowTable ("D")
End Sub
'

' **********************************************************************
' *                                                                    *
' *                          InsertEmployee()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another set of columns for the activities of yet another employee
Sub InsertEmployee()
  Dim UserSheet As Worksheet
  Dim SrcRange As String
  Dim DestRange As String
  Dim TopRow As Integer, BottomRow As Integer
  Dim LeftCol As Integer, RightCol As Integer
  Dim FullLeftCol As Integer, FullRightCol As Integer
  Dim Col As Integer
    
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  
  TopRow = UserSheet.Range(c_EmployeeHeaderRows).Row
  BottomRow = UserSheet.Range(c_ExtraTextRows).Row - 1
  
  ' Note: For some queer reason Excel refused to accept a template
  ' range definition using a named range. The well defined range
  ' kept moving around for no apparent reason, using Range.Row/Column
  ' produced queer results... The reason for this was never truely
  ' discovered.
  SrcRange = c_EmployeeTemplateColumn & TopRow & ":" & _
             c_EmployeeShadowTemplateColumn & BottomRow
  
  ' Discovering the used range of a row using the normal functions
  ' failed. We shall just walk the cells until we reach the end...
  ' Note: At the time when adding employees is still permitted, the
  ' shadow fields have not yet been filled. Thus the employee name
  ' in the shadow fields all contain the string "Shadow field" which
  ' is non-empty and easy to detect...
  FullLeftCol = ColumnTitleToIdx(c_EmployeeDataColumn)
  FullRightCol = FullLeftCol - 1
  
  While (UserSheet.Cells(TopRow, FullRightCol + 2).Value <> "")
    FullRightCol = FullRightCol + 2
  Wend
  
  ' If the cursor is within the range of employee data, we shall insert
  ' the new employee after the cursor. If the cursor is left of the
  ' range, we shall insert in the first column, otherwise the new employee
  ' will be added at the end of the table.
  If (ActiveCell.Row >= TopRow) And (ActiveCell.Row <= BottomRow) Then
    LeftCol = ActiveCell.Column + 1
  Else
    LeftCol = FullRightCol
  End If
    
  If (LeftCol < FullLeftCol) Then
    LeftCol = FullLeftCol
  End If
  If (LeftCol > FullRightCol) Then
    LeftCol = FullRightCol
  End If
  If (LeftCol Mod 2) = 0 Then
      LeftCol = LeftCol + 1
  End If
  
  RightCol = LeftCol + 1
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  DestRange = ColumnIdxToTitle(LeftCol) & TopRow & ":" & ColumnIdxToTitle(RightCol) & BottomRow

  UserSheet.Range(DestRange).Insert Shift:=xlShiftToRight
  ' Beware: Excel 2007 extends Conditial Formatting to Inserted Range! - We need to delete these!!
  UserSheet.Range(DestRange).Clear
  UserSheet.Range(SrcRange).Copy Destination:=UserSheet.Range(DestRange)
  
  ' Make sure that all fields are of appropriate width and that all the
  ' shadow fields are hidden.
  For Col = LeftCol To FullRightCol + 4
    UserSheet.Columns(Col).Hidden = False
    UserSheet.Columns(Col).ColumnWidth = 19.3
    If (Col Mod 2) = 0 Then
      UserSheet.Columns(Col).Hidden = True
    End If
  Next Col
  
  UserSheet.Cells(TopRow, LeftCol).Select

  AdjustEmployeeCostSumFields
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=UserSheet
End Sub ' InsertEmployee()
'

' **********************************************************************
' *                                                                    *
' *                          DeleteEmployee()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete the field for a given employee
Sub DeleteEmployee()
  Dim UserSheet As Worksheet
  Dim TargetEmployeeRange As String
  Dim TopRow As Integer, BottomRow As Integer
  Dim FullLeftCol As Integer, FullRightCol As Integer
  Dim DestLeftCol As Integer, DestRightCol As Integer
  
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  
  TopRow = UserSheet.Range(c_EmployeeHeaderRows).Row
  BottomRow = UserSheet.Range(c_ExtraTextRows).Row - 1
  
  ' Discovering the used range of a row using the normal functions
  ' failed. We shall just walk the cells until we reach the end...
  ' Note: At the time when deleting employees is still permitted, the
  ' shadow fields have not yet been filled. Thus the employee name
  ' in the shadow fields all contain the string "Shadow field" which
  ' is non-empty and easy to detect...
  FullLeftCol = ColumnTitleToIdx(c_EmployeeDataColumn)
  FullRightCol = FullLeftCol - 1
  While (UserSheet.Cells(TopRow, FullRightCol + 2).Value <> "")
    FullRightCol = FullRightCol + 2
  Wend

  ' Is the cursor inside the area of employee data, i.e. has a specific
  ' employee been selected for deletion. If none has been selected, then
  ' we don't know what to delete and will simply exit.
  If (ActiveCell.Column < FullLeftCol) Or (ActiveCell.Column > FullRightCol) Or _
     (ActiveCell.Row < TopRow) Or (ActiveCell.Row > BottomRow) Then
    Exit Sub
  End If
  
  ' Make sure that we delete a User Column together with its correct
  ' Shadow column.
  DestLeftCol = ActiveCell.Column
  If (ActiveCell.Column Mod 2) = 0 Then
    DestLeftCol = DestLeftCol - 1
  End If
  DestRightCol = DestLeftCol + 1
  
  TargetEmployeeRange = ColumnIdxToTitle(DestLeftCol) & TopRow & ":" & ColumnIdxToTitle(DestRightCol) & BottomRow

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  UserSheet.Range(TargetEmployeeRange).Delete Shift:=xlShiftToLeft
  
  If (FullLeftCol = DestLeftCol) And (FullRightCol = DestRightCol) Then
    InsertEmployee
  End If
  
  AdjustEmployeeCostSumFields

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=UserSheet
End Sub ' DeleteEmployee()
'

' **********************************************************************
' *                                                                    *
' *                    AdjustEmployeeCostSumFields()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub AdjustEmployeeCostSumFields()
  Dim UserSheet As Worksheet
  Dim TopRow As Integer
  Dim RowIdx As Integer
  Dim BottomRowIdx As Integer
  Dim ColIdx As Integer
  Dim DataSum As String
  Dim ShadowSum As String
  Dim I As Integer
  
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  DataSum = "=" & c_EmployeeDataColumn & gc_Labor_SumRowMarker
  ShadowSum = "=" & c_EmployeeShadowDataColumn & gc_Labor_SumRowMarker
  
  ' Discovering the used range of a row using the normal functions
  ' failed. We shall just walk the cells until we reach the end...
  ' Note: At the time when adding employees is still permitted, the
  ' shadow fields have not yet been filled. Thus the employee name
  ' in the shadow fields all contain the string "Shadow field" which
  ' is non-empty and easy to detect...
  RowIdx = UserSheet.Range(c_EmployeeHeaderRows).Row
  ColIdx = ColumnTitleToIdx(c_EmployeeShadowDataColumn) + 1
  While (UserSheet.Cells(RowIdx, ColIdx).Value <> "")
    DataSum = DataSum + "+" & ColumnIdxToTitle(ColIdx) & gc_Labor_SumRowMarker
    ShadowSum = ShadowSum + "+" & ColumnIdxToTitle(ColIdx + 1) & gc_Labor_SumRowMarker
    ColIdx = ColIdx + 2
  Wend
  
  BottomRowIdx = UserSheet.UsedRange.Top + UserSheet.UsedRange.Rows.Count
  While (RowIdx < BottomRowIdx)
    If (Left(Cells(RowIdx, ColIdx).Formula, 1) = "=") Then
      Cells(RowIdx, ColIdx).Formula = Replace(DataSum, gc_Labor_SumRowMarker, CStr(RowIdx))
      Cells(RowIdx, ColIdx + 1).Formula = Replace(ShadowSum, gc_Labor_SumRowMarker, CStr(RowIdx))
    End If
    RowIdx = RowIdx + 1
  Wend
  
  PopProtection WSheet:=UserSheet

End Sub ' AdjustEmployeeCostSumFields()
'

' **********************************************************************
' *                                                                    *
' *                         InsertProjectLine()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub InsertProjectLine()
  Dim UserSheet As Worksheet
  Dim TemplateRow As Range
  Dim ActiveRow As Integer
  Dim InsertRowCnt As Integer
  Dim LineTypeColIdx As Integer
  Dim LineTypeCookie As String
  Dim RowIdx As Integer
  
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  Set TemplateRow = UserSheet.Range(c_ProjTemplateRow)
  LineTypeColIdx = ColumnTitleToIdx(c_LineTypeColumn)
  LineTypeCookie = TemplateRow.Cells(1, LineTypeColIdx).Value
  
  InsertRowCnt = -1
  If (Selection.Parent Is UserSheet) And (Selection.Rows.Count > 1) Then
    ActiveRow = Selection.Row
    InsertRowCnt = Selection.Rows.Count
    For RowIdx = ActiveRow To ActiveRow + InsertRowCnt - 1
      If (Cells(RowIdx, LineTypeColIdx).Value <> LineTypeCookie) Or _
         (Rows(RowIdx).Hidden) Then
        InsertRowCnt = -1
        Exit For
      End If
    Next RowIdx
  End If
  
  ' If the cursor is already placed within the range that is
  ' used to store items of the requested category, the new line
  ' shall be added right below the current line (unless the cursor
  ' is in the top line, in which case we shall add the new line
  ' above the current line).
  ' If the cursor is not in the requested range, the new line shall
  ' be added at the bottom of the range.
  If (InsertRowCnt = -1) Then
    ActiveRow = ActiveCell.Row
    InsertRowCnt = 1
    If (Cells(ActiveRow, LineTypeColIdx).Value <> LineTypeCookie) Or _
         (Rows(ActiveRow).Hidden) Then
      ActiveRow = ActiveSheet.UsedRange.Rows.Count
      While (ActiveRow > 1) And _
        ((Cells(ActiveRow, LineTypeColIdx).Value <> LineTypeCookie) Or _
         (Rows(ActiveRow).Hidden))
        ActiveRow = ActiveRow - 1
      Wend
      If (ActiveRow <= 1) Then
        Exit Sub
      End If
    End If
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TemplateRow.Rows.Hidden = False
  If (Cells(ActiveRow - 1, LineTypeColIdx).Value = LineTypeCookie) Then
    ActiveRow = ActiveRow + InsertRowCnt
  End If
  
  UserSheet.Range(CStr(ActiveRow) & ":" & CStr(ActiveRow + InsertRowCnt - 1)).Insert (xlShiftDown)
  For RowIdx = ActiveRow To ActiveRow + InsertRowCnt - 1
    TemplateRow.Copy (Cells(RowIdx, 1))
  Next RowIdx
  
  ' The absolute position of the cursor does not change when a line
  ' is inserted. Thus if the cursor was located right below a hidden
  ' line and a line is inserted above, it will be located at the hidden
  ' line afterwards. We shall avoid this situation by moving the cursor.
  While (Rows(ActiveCell.Row).Hidden)
    Cells(ActiveCell.Row + 1, ActiveCell.Column).Select
  Wend
  
  TemplateRow.Rows.Hidden = True

  UserSheet.Cells(ActiveRow, 1).Select
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=UserSheet
End Sub ' InsertProjectLine()
'

' **********************************************************************
' *                                                                    *
' *                         DeleteProjectLine()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete a project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub DeleteProjectLine()
  Dim UserSheet As Worksheet
  Dim TemplateRow As Range
  Dim ActiveRow As Integer
  Dim DeleteRowCnt As Integer
  Dim LineTypeCookie As String
  Dim LineTypeColIdx As Integer
  Dim RowIdx As Integer
  
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  Set TemplateRow = UserSheet.Range(c_ProjTemplateRow)
  LineTypeColIdx = ColumnTitleToIdx(c_LineTypeColumn)
  LineTypeCookie = TemplateRow.Cells(1, LineTypeColIdx).Value
  
  ' Is the cursor currently located at a line that matches the type we
  ' want to delete? All other types of lines are ignored!
  ActiveRow = ActiveCell.Row
  DeleteRowCnt = 1
  If (Cells(ActiveRow, LineTypeColIdx).Value <> LineTypeCookie) Or _
      Rows(ActiveRow).Hidden Then
    Exit Sub
  End If
  
  If (Selection.Parent Is UserSheet) And (Selection.Rows.Count > 1) Then
    ActiveRow = Selection.Row
    DeleteRowCnt = Selection.Rows.Count
    For RowIdx = ActiveRow To ActiveRow + DeleteRowCnt - 1
      If (Cells(RowIdx, LineTypeColIdx).Value <> LineTypeCookie) Or _
         (Rows(RowIdx).Hidden) Then
        DeleteRowCnt = 1
        Exit For
      End If
    Next RowIdx
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Are we about to delete the last line of a given type? If there
  ' are at least two line around, we can simply delete the current
  ' line. If however we are about to delete the last line, we shall
  ' not actually delete the line, but replace it with an empty line.
  ' Thus there will always be at least one line available in each
  ' category
  For RowIdx = ActiveRow + DeleteRowCnt - 1 To ActiveRow Step -1
    If ((Cells(RowIdx - 1, LineTypeColIdx).Value = LineTypeCookie) And _
        (Cells(RowIdx - 1, LineTypeColIdx).EntireRow.Hidden = False)) Or _
       ((Cells(RowIdx + 1, LineTypeColIdx).Value = LineTypeCookie) And _
        (Cells(RowIdx + 1, LineTypeColIdx).EntireRow.Hidden = False)) Then
      Rows(RowIdx).Delete (xlShiftUp)
    Else
      TemplateRow.Rows.Hidden = False
      TemplateRow.Copy (Cells(RowIdx, 1))
      TemplateRow.Rows.Hidden = True
    End If
  Next RowIdx
  
  ' If the cursor was placed right above a hidden line, and we delete
  ' a line above the cursor, the cursor will move to the hidden line.
  ' We shall resolve this problem by moving the cursor.
  While Rows(ActiveCell.Row).Hidden
    Cells(ActiveCell.Row - 1, ActiveCell.Column).Select
  Wend
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=UserSheet
 End Sub ' DeleteProjectLine()
'

' **********************************************************************
' *                                                                    *
' *                          SubmitInputData()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Once the user has filled out all his data, he can click the "Eingaben
' abschlie|fffd|en" Button to submit his data. Doing so will copy all the user
' input to the shadow cells and make the original cell uneditable.
' Furthermore a timestamp is created.
' Now the applicants work is completed and the checking team can get started.
'
Sub SubmitInputData()
  Dim UserSheet As Worksheet
  Dim TopRow As Integer, BottomRow As Integer
  Dim LeftCol As Integer, RightCol As Integer
  Dim RowIdx As Integer, ColIdx As Integer
  Dim CellFormula As String
  Dim DateString As String
  Dim DateRange As Range
  Dim SumFormula As String
  Dim Idx As Integer
  Dim Row As Integer
  Dim Mode As String
  Dim CellData As String
  Dim VOKEntryRow As Integer
    
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  
  Mode = UserSheet.Range(gc_Labour_SelectedCalcTypeCell).Value
  If (Mode = "C") Then
    Dim WorkDayRow As Integer
    Dim ChargeDayRow As Integer
    Dim ErrorMsg As String
    Dim ErrorCnt As Integer
    Dim NewErrMsg As String
    
    WorkDayRow = UserSheet.Range(c_WorkedDaysRow).Row
    ChargeDayRow = UserSheet.Range(c_ChargeDaysRow).Row
    TopRow = UserSheet.Range(c_EmployeeHeaderRows).Row
    LeftCol = ColumnTitleToIdx(c_EmployeeDataColumn)
    RightCol = UserSheet.Cells(TopRow, UserSheet.Columns.Count).End(xlToLeft).Column
    
    ErrorCnt = 0
    ErrorMsg = ""
    For Idx = RightCol To LeftCol Step -2
      If (UserSheet.Cells(WorkDayRow, Idx).Value > UserSheet.Cells(ChargeDayRow, Idx).Value) Then
        NewErrMsg = UserSheet.Cells(TopRow, Idx).Value & " (Spalte " & ColumnIdxToTitle(Idx) & ")"
        ErrorCnt = ErrorCnt + 1
        If (ErrorCnt = 1) Then
          ErrorMsg = NewErrMsg
        ElseIf (ErrorCnt = 2) Then
          ErrorMsg = NewErrMsg & " und " & ErrorMsg
        Else
          ErrorMsg = NewErrMsg & ", " & ErrorMsg
        End If
      End If
    Next Idx
    
    If (ErrorCnt > 0) Then
      If (ErrorCnt = 1) Then
        ErrorMsg = "Der abgerechnete Zeitraum f|fffd|r Mitarbeiter " & ErrorMsg & " ist k|fffd|rzer als das T|fffd|tigkeitszeitraum."
      Else
        ErrorMsg = "Die abgerechneten Zeitr|fffd|ume der Mitarbeiter " & ErrorMsg & " sind k|fffd|rzer als die T|fffd|tigkeitszeitr|fffd|ume."
      End If
      ErrorMsg = ErrorMsg & vbCr & "Bitte beheben Sie diese Inkonsistenz bevor Sie die Eingabe abschlie|fffd|en."
      MsgBox Prompt:=ErrorMsg
      Exit Sub
    End If
  End If
  
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet

  ' No employees can be added/removed once the input is submitted
  UserSheet.Shapes(c_Button_AddEmployee).Visible = False
  UserSheet.Shapes(c_Button_DelEmployee).Visible = False

  ' Data can only be submitted once, so we don't need the Submit-Data button any more
  UserSheet.Range(c_SelectDataEntryDoneRows).Rows.Hidden = True
  UserSheet.Shapes(c_Button_SubmitInputData).Visible = False
  
  ' We shall make the timestamp visible
  UserSheet.Range(c_DataEntryDoneTimestampRows).Rows.Hidden = WorksheetExists(gc_SummaryWorkSheet)
  DateString = "Eingabe abgeschlossen am " & Format(Now(), "d.mmm.yyyy (h:nn)")
  UserSheet.Range(c_DataEntryDoneDateCell).Value = DateString
  
  Row = UserSheet.Range(c_DataEntryDoneTimestampRows).Row + _
        UserSheet.Range(c_DataEntryDoneTimestampRows).Rows.Count - 1
  Set DateRange = UserSheet.Range("G" & Row & ":J" & Row)
  DateRange.Merge
  DateRange.Value = "Datum, Ort"
  DateRange.HorizontalAlignment = xlHAlignCenter
  With DateRange.Borders(xlEdgeTop)
    .LineStyle = xlContinuous
    .Weight = xlThin
  End With
  
  Mode = UserSheet.Range(gc_Labour_SelectedCalcTypeCell).Value
  ' ... as well as the fields for the checking team
  ' Enable all the rows needed for data entry in DetailedCostHours mode
  TopRow = UserSheet.Range(c_ValidateCostRows).Row
  BottomRow = UserSheet.Range(c_ExtraTextRows).Row + _
              UserSheet.Range(c_ExtraTextRows).Rows.Count
  
  For Row = TopRow To BottomRow
    CellData = UserSheet.Cells(Row, c_MatchCellColIdx).Value
    If InStr(CellData, Mode) Then
      UserSheet.Rows(Row).Hidden = False
    Else
      UserSheet.Rows(Row).Hidden = True
    End If
  Next Row
  
  ' Copy all user input into the shadow cells and lock the original cells
  TopRow = UserSheet.Range(c_EmployeeHeaderRows).Row
  BottomRow = UserSheet.Range(c_ExtraTextRows).Row - 1
  
  LeftCol = ColumnTitleToIdx(c_EmployeeDataColumn)
  RightCol = UserSheet.Cells(TopRow, UserSheet.Columns.Count).End(xlToLeft).Column
  
  For ColIdx = LeftCol To RightCol Step 2
    For RowIdx = TopRow To BottomRow
      CellFormula = UserSheet.Cells(RowIdx, ColIdx + 1).Formula
      ' CellValue = UserSheet.Cells(RowIdx, ColIdx).Value
      If (Left(CellFormula, 1) <> "=") Then
        UserSheet.Cells(RowIdx, ColIdx + 1).Value = UserSheet.Cells(RowIdx, ColIdx).Value
      End If
    Next RowIdx
    UserSheet.Columns(ColIdx).Hidden = True
    UserSheet.Columns(ColIdx + 1).Hidden = False
  Next ColIdx

  ' Compute the Sums for the Check Area
  'If (UserSheet.Range(gc_Labour_SelectedCalcTypeCell).Value <> "C") Then
    TopRow = UserSheet.Range(c_TotalSumRange).Row
    BottomRow = UserSheet.Range(c_TotalSumRange).Row + _
                UserSheet.Range(c_TotalSumRange).Rows.Count - 1
    VOKEntryRow = UserSheet.Range(c_VOKEntryRange).Row
    LeftCol = ColumnTitleToIdx(c_EmployeeShadowDataColumn)
    RightCol = UserSheet.Range(c_TotalSumRange).Column - 1
    For RowIdx = TopRow To BottomRow
      If (UserSheet.Cells(RowIdx, 1).Value <> "") And _
         (InStr(UserSheet.Cells(RowIdx, 1), "%")) <= 0 Then
        SumFormula = ColumnIdxToTitle(LeftCol) & RowIdx
        For ColIdx = LeftCol + 2 To RightCol Step 2
          SumFormula = SumFormula & "+" & ColumnIdxToTitle(ColIdx) & RowIdx
        Next ColIdx
        
        If (InStr(UserSheet.Cells(RowIdx, 1), "VOK")) <= 0 Then
          SumFormula = "=" & SumFormula
        Else
          ' SumFormula = "=IF(OR((" & ColumnIdxToTitle(RightCol + 1) & (TopRow + 3) & "<>0)," & _
                                "(" & ColumnIdxToTitle(RightCol + 1) & (TopRow + 4) & "<>0))," & _
                                SumFormula & "," & Chr(34) & Chr(34) & ")"
          SumFormula = "=IF($A" & VOKEntryRow + 5 & ">0," & _
                                SumFormula & "," & Chr(34) & Chr(34) & ")"
                                
        End If
        UserSheet.Cells(RowIdx, RightCol + 1).Formula = SumFormula
        UserSheet.Cells(RowIdx, RightCol + 2).Formula = SumFormula
      End If
    Next RowIdx
    
    UserSheet.Columns(RightCol + 1).Hidden = False
    UserSheet.Columns(RightCol + 2).Hidden = False
    
    UserSheet.Cells(VOKEntryRow + 4, 1).Formula = "=COUNT(" & _
                       ColumnIdxToTitle(LeftCol) & (VOKEntryRow) & ":" & _
                       ColumnIdxToTitle(RightCol) & (VOKEntryRow + 1) & ")"
    UserSheet.Cells(VOKEntryRow + 5, 1).Formula = "=COUNT(" & _
                       ColumnIdxToTitle(LeftCol) & (VOKEntryRow) & ":" & _
                       ColumnIdxToTitle(RightCol) & (VOKEntryRow + 3) & ")"
    
    UserSheet.Columns(RightCol + 1).ColumnWidth = 19.22
    UserSheet.Columns(RightCol + 2).ColumnWidth = 19.22
    
    UserSheet.Columns(RightCol + 1).Hidden = True
    UserSheet.Columns(RightCol + 2).Hidden = False
  'End If
  
  ' No projects can be added/removed after data has been submitted.
  UserSheet.Shapes(c_Button_AddProj).Visible = False
  UserSheet.Shapes(c_Button_DelProj).Visible = False
  
  PopProtection WSheet:=UserSheet

End Sub ' SubmitInputData()
'

' **********************************************************************
' *                                                                    *
' *                         UnsubmitInputData()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Once the user has filled out all his data, he can click the "Eingaben
' abschlie|fffd|en" Button to submit his data. Doing so will copy all the user
' input to the shadow cells and make the original cell uneditable.
' Furthermore a timestamp is created.
' Now the applicants work is completed and the checking team can get started.
'
Sub UnsubmitInputData()
  Dim UserSheet As Worksheet
  Dim TopRow As Integer, BottomRow As Integer
  Dim LeftCol As Integer, RightCol As Integer
  Dim ColIdx As Integer
  Dim DateRange As Range
  Dim Row As Integer
  Dim Mode As String
  
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  PushProtection WSheet:=UserSheet
  RemoveProtection WSheet:=UserSheet
  
  ' No employees can be added/removed once the input is submitted
  UserSheet.Shapes(c_Button_AddEmployee).Visible = True
  UserSheet.Shapes(c_Button_DelEmployee).Visible = True

  ' Data can only be submitted once, so we don't need the Submit-Data button any more
  UserSheet.Range(c_SelectDataEntryDoneRows).Rows.Hidden = False
  UserSheet.Shapes(c_Button_SubmitInputData).Visible = True
  
  ' We shall make the timestamp invisible again
  UserSheet.Range(c_DataEntryDoneTimestampRows).Rows.Hidden = True
  
  Row = UserSheet.Range(c_DataEntryDoneTimestampRows).Row + _
        UserSheet.Range(c_DataEntryDoneTimestampRows).Rows.Count - 1
  Set DateRange = UserSheet.Range("G" & Row & ":J" & Row)
  DateRange.UnMerge
    
  Mode = UserSheet.Range(gc_Labour_SelectedCalcTypeCell).Value
  ' ... as well as the fields for the checking team
  ' Enable all the rows needed for data entry in DetailedCostHours mode
  TopRow = UserSheet.Range(c_ValidateCostRows).Row
  BottomRow = UserSheet.Range(c_ExtraTextRows).Row + _
              UserSheet.Range(c_ExtraTextRows).Rows.Count
  
  For Row = TopRow To BottomRow
    UserSheet.Rows(Row).Hidden = True
  Next Row
  
  ' Copy all user input into the shadow cells and lock the original cells
  TopRow = UserSheet.Range(c_EmployeeHeaderRows).Row
  BottomRow = UserSheet.Range(c_ExtraTextRows).Row - 1
  
  LeftCol = ColumnTitleToIdx(c_EmployeeDataColumn)
  RightCol = UserSheet.Cells(TopRow, UserSheet.Columns.Count).End(xlToLeft).Column
  
  For ColIdx = LeftCol To RightCol Step 2
    UserSheet.Columns(ColIdx).Hidden = False
    UserSheet.Columns(ColIdx + 1).Hidden = True
  Next ColIdx

  ' No projects can be added/removed after data has been submitted.
  If (UserSheet.Range(gc_Labour_SelectedCalcTypeCell).Value <> "C") Then
    UserSheet.Shapes(c_Button_AddProj).Visible = True
    UserSheet.Shapes(c_Button_DelProj).Visible = True
  End If
   
  PopProtection WSheet:=UserSheet

End Sub ' UnsubmitInputData()
'

' **********************************************************************
' *                                                                    *
' *                    ProtectLaborCostWorkSheet()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' The LaborCostWorkSheet is is modified at many locations and needs
' to be unprotected/protected frequently. To make sure that we always
' use the same options when protecting, we shall have an explicit
' function to do this.
' Note: We want to allow the user to add comments and therefore do not
'   protect DrawingObjects. However this means that the user can also
'   resize/insert/delete buttons etc... It is VERY questionable if this
'   is a wise choice...
Sub ProtectLaborCostWorkSheet(UserSheet As Worksheet)
  ' Note: Excel sometimes behaves strangely when locking worksheets that
  ' are already locked and unlocks them instead of keeping them locked ?!?
  If (Not UserSheet.ProtectContents) Then
   ' UserSheet.Protect Password:=gc_Password, _
                     AllowFormattingColumns:=True, _
                     AllowFormattingRows:=True, _
                     AllowInsertingRows:=True, _
                     DrawingObjects:=False
   
    UserSheet.Protect Password:=gc_Password, _
                     AllowFormattingRows:=True, _
                     DrawingObjects:=False
  End If
End Sub ' ProtectLaborCostWorkSheet()
'

' **********************************************************************
' *                                                                    *
' *                    UnprotectLaborCostWorkSheet()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' This is just a mirror function for ProtectLaborCostWorksheet() that
' is not really needed (and could easily been inlined) but it is nice
' to have it around...
Sub UnprotectLaborCostWorkSheet(UserSheet As Worksheet)
  UnprotectWSheet WSheet:=UserSheet
End Sub ' UnprotectLaborCostWorkSheet()
'

' **********************************************************************
' *                                                                    *
' *                         ShowAllDataFields()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' For Debugging purposes it is convenient to be able to edit any feature
' without having to mess around with protection removal/restoration.
' Thus we have this function, which shows all that is around.
Sub ShowAllDataFields()
  Dim UserSheet As Worksheet
  Dim DebugMode As Boolean
  
  DebugMode = True
  
  ' Set UserSheet = ThisWorkbook.Worksheets(gc_LabourCostWorkSheet)
  Set UserSheet = ActiveSheet
  
  PushProtection WBook:=ActiveWorkbook, WSheet:=UserSheet
  RemoveProtection WBook:=ActiveWorkbook, WSheet:=UserSheet

  UserSheet.Range(c_SelectCalcModeRows).Rows.Hidden = False
  
  UserSheet.Shapes(c_Button_EraseAll).Visible = True
  UserSheet.Shapes(c_Button_DuplicateSheet).Visible = True
  UserSheet.Shapes(c_Button_RemoveMacros).Visible = True
  
  UserSheet.Shapes(c_Button_LockAll).Visible = DebugMode
  UserSheet.Shapes(c_Button_UnlockAll).Visible = DebugMode
  UserSheet.Shapes(c_Button_ShowAllFields).Visible = DebugMode
  
  UserSheet.Shapes(c_Button_DetailedCostHours).Visible = True
  UserSheet.Shapes(c_Button_DetailedCostFlatHours).Visible = True
  UserSheet.Shapes(c_Button_FullTimeProjectWages).Visible = True
  UserSheet.Shapes(c_Button_FlatWages).Visible = True

  UserSheet.Range(c_CalcModeTitleRows).Rows.Hidden = False
  UserSheet.Range(c_EmployeeHeaderRows).Rows.Hidden = False
  UserSheet.Range(c_FlatWageDataRows).Rows.Hidden = False
  UserSheet.Range(c_DetailedCostDataRows).Rows.Hidden = False
  UserSheet.Range(c_ReferenceCostDataRows).Rows.Hidden = False
  UserSheet.Range(c_ProjectHoursDataRows).Rows.Hidden = False
  UserSheet.Range(c_EditTotalWorkHoursRow).Rows.Hidden = False
  UserSheet.Range(c_CalcTotalWorkHoursRow).Rows.Hidden = False
  UserSheet.Range(c_ProjDataHeadRow).Rows.Hidden = False
  UserSheet.Range(c_ProjTemplateRow).Rows.Hidden = False
  UserSheet.Range(c_ProjDataTailRow).Rows.Hidden = False
  UserSheet.Range(c_SelectDataEntryDoneRows).Rows.Hidden = False
  UserSheet.Range(c_ValidateCostRows).Rows.Hidden = False
  UserSheet.Range(c_ExtraTextRows).Rows.Hidden = False

  UserSheet.Shapes(c_Button_AddProj).Visible = True
  UserSheet.Shapes(c_Button_DelProj).Visible = True
  UserSheet.Shapes(c_Button_SubmitInputData).Visible = True
  
  UserSheet.Range(c_TemplateColumns).Columns.Hidden = False
  UserSheet.Range(c_DataColumns).Columns.Hidden = False

  PopProtection WBook:=ActiveWorkbook, WSheet:=UserSheet
  
End Sub ' ShowAllDataFields()
'



Attribute VB_Name = "ProtectionStack"
' **********************************************************************
' *                                                                    *
' *                    Abrechnung der Personalkosten                   *
' *                       f|fffd|r gef|fffd|rderte Ma|fffd|nahmen                     *
' *                                                                    *
' *  Weitere Informationen zu F|fffd|rderungen:                             *
' *      Bundesministerium f|fffd|r                                         *
' *          Land- und Forstwirtschaft, Umwelt und Wasserwirtschaft    *
' *      Stubenring 1 - 1010 Wien - |fffd|sterreich                         *
' *      http://www.bmlfuw.gv.at                                       *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt von:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************

' We shall require that all variables be explicitly defined
' (No automatic definition upon first use...)
Option Explicit

' **********************************************************************
' **********************************************************************

Type ProtectStack_t
  WBook As Workbook
  PrevWBookProtected As Boolean
  WSheet As Worksheet
  PrevWSheetProtected As Boolean
  PrevWSheetProtectUserInterfaceOnly As Boolean
  PrevWSheetProtectEnableAutoFilter As Boolean
  ' PrevWSheetProtectEnableOutlining As Boolean
  PrevWSheetProtectDrawingObjects As Boolean
  PrevWSheetProtectEnableFormattingRows As Boolean
  PrevWSheetProtectEnableFormattingColumns As Boolean
  PrevUpdating As Boolean
  PrevEnableEvents As Boolean
  PrevDisplayAlerts As Boolean
  PrevCalculation As Integer
End Type

Const c_ProtectStackDepth As Integer = 10 '
Dim v_ProtectStack(0 To c_ProtectStackDepth - 1) As ProtectStack_t
Dim v_ProtectStackPos As Integer
Dim v_ProtectStackPosMax As Integer

' **********************************************************************

Public Const gc_Password As String = "LE1420"
Private Const c_ReducedScreenFlicker As Boolean = True

' **********************************************************************
' *                                                                    *
' *                          PushProtection()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PushProtection(Optional WBook As Workbook = Nothing, _
                   Optional WSheet As Worksheet = Nothing)
' Debug.Print "PushProtection: " & v_ProtectStackPos
  If (v_ProtectStackPos < c_ProtectStackDepth) Then
    Set v_ProtectStack(v_ProtectStackPos).WBook = WBook
    If Not (WBook Is Nothing) Then
      v_ProtectStack(v_ProtectStackPos).PrevWBookProtected = WBook.ProtectStructure
    Else
      v_ProtectStack(v_ProtectStackPos).PrevWBookProtected = False
    End If
    
    Set v_ProtectStack(v_ProtectStackPos).WSheet = WSheet
    If Not (WSheet Is Nothing) Then
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtected = WSheet.ProtectContents
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectUserInterfaceOnly = WSheet.ProtectionMode
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableAutoFilter = WSheet.EnableAutoFilter
      ' v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableOutlining = WSheet.EnableOutlining
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectDrawingObjects = WSheet.ProtectDrawingObjects
      ' v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingRows = True
      ' v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingColumns = True
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingRows = WSheet.Protection.AllowFormattingRows
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingColumns = WSheet.Protection.AllowFormattingColumns
    Else
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtected = False
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectUserInterfaceOnly = False
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableAutoFilter = False
      ' v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableOutlining = False
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectDrawingObjects = False
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingRows = False
      v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingColumns = False
    End If
    
    v_ProtectStack(v_ProtectStackPos).PrevUpdating = Application.ScreenUpdating
    v_ProtectStack(v_ProtectStackPos).PrevEnableEvents = Application.EnableEvents
    v_ProtectStack(v_ProtectStackPos).PrevDisplayAlerts = Application.DisplayAlerts
    v_ProtectStack(v_ProtectStackPos).PrevCalculation = Application.Calculation
  Else
    Debug.Print "[ERROR] ProtectStack Overflow!!!"
  End If
  
  v_ProtectStackPos = v_ProtectStackPos + 1
  If (v_ProtectStackPos > v_ProtectStackPosMax) Then
    v_ProtectStackPosMax = v_ProtectStackPos
    Debug.Print "v_ProtectStackPosMax = " & CStr(v_ProtectStackPosMax)
  End If
End Sub ' PushProtection()
'

' **********************************************************************
' *                                                                    *
' *                          PopProtection()                           *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PopProtection(Optional WBook As Workbook = Nothing, _
                  Optional WSheet As Worksheet = Nothing)
  v_ProtectStackPos = v_ProtectStackPos - 1
  
  If (v_ProtectStackPos < 0) Then
    Debug.Print "[ERROR] ProtectStack Underflow!!!"
  ElseIf (v_ProtectStackPos < c_ProtectStackDepth) Then
  
    If (WBook Is v_ProtectStack(v_ProtectStackPos).WBook) Then
      If Not (WBook Is Nothing) Then
        If (v_ProtectStack(v_ProtectStackPos).PrevWBookProtected <> WBook.ProtectStructure) Then
          If (v_ProtectStack(v_ProtectStackPos).PrevWBookProtected) Then
            WBook.Protect (gc_Password)
          Else
            WBook.Unprotect (gc_Password)
          End If
        End If
      End If
    Else
      Debug.Print "[ERROR] - Mismatch in PushProtect/PopProtect calls (WBook)!"
    End If
    
    If (WSheet Is v_ProtectStack(v_ProtectStackPos).WSheet) Then
      If Not (WSheet Is Nothing) Then
        If (v_ProtectStack(v_ProtectStackPos).PrevWSheetProtected <> WSheet.ProtectContents) Then
          If (v_ProtectStack(v_ProtectStackPos).PrevWSheetProtected) Then
            WSheet.Protect Password:=gc_Password, _
                           DrawingObjects:=v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectDrawingObjects, _
                           UserInterfaceOnly:=v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectUserInterfaceOnly, _
                           AllowFormattingRows:=v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingRows, _
                           AllowFormattingColumns:=v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableFormattingColumns, _
                           AllowFiltering:=v_ProtectStack(v_ProtectStackPos).PrevWSheetProtectEnableAutoFilter
          Else
            WSheet.Unprotect (gc_Password)
          End If
        End If
      End If
    Else
      Debug.Print "[ERROR] - Mismatch in PushProtect/PopProtect calls (WSheet)!"
    End If
    
    Application.ScreenUpdating = v_ProtectStack(v_ProtectStackPos).PrevUpdating
    Application.EnableEvents = v_ProtectStack(v_ProtectStackPos).PrevEnableEvents
    Application.DisplayAlerts = v_ProtectStack(v_ProtectStackPos).PrevDisplayAlerts
    Application.Calculation = v_ProtectStack(v_ProtectStackPos).PrevCalculation
  End If
' Debug.Print "PopProtection: " & v_ProtectStackPos
End Sub ' PopProtection()
'

' **********************************************************************
' *                                                                    *
' *                         RemoveProtection()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub RemoveProtection(Optional WBook As Workbook = Nothing, _
                     Optional WSheet As Worksheet = Nothing)
  If Not (WBook Is Nothing) Then
    If (WBook.ProtectStructure) Then
      WBook.Unprotect (gc_Password)
    End If
  End If
  
  If Not (WSheet Is Nothing) Then
    If (WSheet.ProtectContents) Then
      WSheet.Unprotect (gc_Password)
    End If
  End If
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  Application.DisplayAlerts = False
  ' Application.Calculation = xlCalculationManual
  Application.Calculation = xlCalculationAutomatic
  
End Sub ' RemoveProtection()
'

' **********************************************************************
' *                                                                    *
' *                           FixProtection()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub FixProtection()
  v_ProtectStackPos = 0
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  Application.DisplayAlerts = True
  Application.Calculation = xlCalculationAutomatic
End Sub ' FixProtection()
'

' **********************************************************************
' *                                                                    *
' *                            ProtectWSheet()                         *
' *                                                                    *
' **********************************************************************
Sub ProtectWSheet(Optional WSheet As Worksheet = Nothing)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  If (Not WSheet.ProtectContents) Then
    WSheet.Protect (gc_Password)
  End If
End Sub ' ProtectWSheet()
'

' **********************************************************************
' *                                                                    *
' *                           ProtectAllSheets()                       *
' *                                                                    *
' **********************************************************************
' For Debugging purposes it is convenient to be able to edit any feature
' without having to mess around with protection removal/restoration.
' Thus we have this function, which shows all that is around.
Sub ProtectAllSheets()
  ProtectAllWBookSheets WBook:=ActiveWorkbook
End Sub ' ProtectAllSheets()
'

Sub ProtectAllWBookSheets(Optional WBook As Workbook = Nothing)
  Dim WSheet As Worksheet
  Dim SheetCnt As Integer
  Dim I As Integer
  Dim PrevActiveSheet As Worksheet
  Dim PrevScreenUpdating As Boolean
  Dim PrevEnableEvents As Boolean

  If (WBook Is Nothing) Then
    Set WBook = ActiveWorkbook
  End If
  
  PrevEnableEvents = Application.EnableEvents
  Application.EnableEvents = False
  
  PrevScreenUpdating = Application.ScreenUpdating
  Application.ScreenUpdating = Not c_ReducedScreenFlicker
  Set PrevActiveSheet = Application.ActiveSheet

  WBook.Unprotect (gc_Password)
  SheetCnt = WBook.Worksheets.Count
  For I = 1 To SheetCnt
    Set WSheet = WBook.Sheets(I)
    If (Left(WSheet.Name, Len(gc_TemplateCookie)) = gc_TemplateCookie) Or _
       (Left(WSheet.Name, Len(gc_TableCookie)) = gc_TableCookie) Then
      WSheet.Visible = True
      WSheet.Activate
      WBook.Windows(1).ScrollRow = 1
      WBook.Windows(1).ScrollColumn = 1
      WSheet.Visible = False
    End If

    WSheet.Protect (gc_Password)
  Next
  ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
  
  If (PrevActiveSheet.Visible) Then
    PrevActiveSheet.Activate
  End If
  
  WBook.Protect (gc_Password)
  
  Application.EnableEvents = True ' PrevEnableEvents
  Application.ScreenUpdating = PrevScreenUpdating
End Sub ' ProtectAllWBookSheets()
'

' **********************************************************************
' *                                                                    *
' *                           UnprotectWSheet()                        *
' *                                                                    *
' **********************************************************************
Sub UnprotectWSheet(Optional WSheet As Worksheet = Nothing)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  If (WSheet.ProtectContents) Then
    WSheet.Unprotect (gc_Password)
  End If
End Sub ' UnprotectWSheet()
'

' **********************************************************************
' *                                                                    *
' *                         UnprotectAllSheets()                       *
' *                                                                    *
' **********************************************************************
' For Debugging purposes it is convenient to be able to edit any feature
' without having to mess around with protection removal/restoration.
' Thus we have this function, which shows all that is around.
Sub UnprotectAllSheets()
  UnprotectAllWBookSheets WBook:=ActiveWorkbook
End Sub ' UnprotectAllSheets()
'

Sub UnprotectAllWBookSheets(Optional WBook As Workbook = Nothing)
  Dim WSheet As Worksheet
  Dim SheetCnt As Integer
  Dim PrevEnableEvents As Boolean
  Dim I As Integer

  If (WBook Is Nothing) Then
    Set WBook = ActiveWorkbook
  End If
  
  PrevEnableEvents = Application.EnableEvents
  Application.EnableEvents = False
  
  WBook.Unprotect (gc_Password)
  SheetCnt = WBook.Worksheets.Count
  For I = 1 To SheetCnt
    Set WSheet = WBook.Sheets(I)
    WSheet.Visible = True
    WSheet.Unprotect (gc_Password)
  Next
  
  Application.EnableEvents = PrevEnableEvents

End Sub ' UnprotectAllWBookSheets()
'
Attribute VB_Name = "SelectProvince"
Attribute VB_Base = "0{981D7F1E-55E3-4A89-ABC7-C007B1BFECEE}{AEC5A964-4330-4F73-B49D-C31CF7D32293}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const gc_Logo_Sheet As String = "TEMPLATE Logos"

Const gc_Logo_AMA As String = "Logo-AMA"
Const gc_Logo_BMLFWU As String = "Logo-BMLFUW"
Const gc_Logo_BMFWF As String = "Logo-BMWFW"
Const gc_Logo_LE1420 As String = "Logo-LE1420"
Const gc_Logo_EU As String = "Logo-EU"

Const gc_Logo_Burgenland As String = "Logo-Burgenland"
Const gc_Logo_Kaernten As String = "Logo-K|fffd|rnten"
Const gc_Logo_NOe As String = "Logo-NOe"
Const gc_Logo_OOe As String = "Logo-OOe"
Const gc_Logo_Salzburg As String = "Logo-Salzburg"
Const gc_Logo_Steiermark As String = "Logo-Steiermark"
Const gc_Logo_Tirol As String = "Logo-Tirol"
Const gc_Logo_Vorarlberg As String = "Logo-Vorarlberg"
Const gc_Logo_Wien As String = "Logo-Wien"
'

Private Sub CmdButton_Burgenland_Click()
  ProvinceSelected ProvinceIdx:=1, ProvinceLogo:=gc_Logo_Burgenland
End Sub
'

Private Sub CmdButton_Karnten_Click()
  ProvinceSelected ProvinceIdx:=2, ProvinceLogo:=gc_Logo_Kaernten
End Sub
'

Private Sub CmdButton_NOe_Click()
  ProvinceSelected ProvinceIdx:=3, ProvinceLogo:=gc_Logo_NOe
End Sub
'

Private Sub CmdButton_OOe_Click()
  ProvinceSelected ProvinceIdx:=4, ProvinceLogo:=gc_Logo_OOe
End Sub
'

Private Sub CmdButton_Salzburg_Click()
  ProvinceSelected ProvinceIdx:=5, ProvinceLogo:=gc_Logo_Salzburg
End Sub
'

Private Sub CmdButton_Steiermark_Click()
  ProvinceSelected ProvinceIdx:=6, ProvinceLogo:=gc_Logo_Steiermark
End Sub
'

Private Sub CmdButton_Tirol_Click()
  ProvinceSelected ProvinceIdx:=7, ProvinceLogo:=gc_Logo_Tirol
End Sub
'

Private Sub CmdButton_Vorarlberg_Click()
  ProvinceSelected ProvinceIdx:=8, ProvinceLogo:=gc_Logo_Vorarlberg
End Sub
'

Private Sub CmdButton_Wien_Click()
  ProvinceSelected ProvinceIdx:=9, ProvinceLogo:=gc_Logo_Wien
End Sub
'

Private Sub CmdButton_NoProvince_Click()
  ProvinceSelected ProvinceIdx:=10, ProvinceLogo:=""
End Sub
'

Private Sub ProvinceSelected(ProvinceIdx As Integer, ProvinceLogo As String)
  Dim WSheet As Worksheet
  Dim PrevProtected As Boolean
    
  Set WSheet = ThisWorkbook.Worksheets(gc_PaymAppl_TemplateSheet)
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet

  WSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value = ProvinceIdx
  WSheet.Range(gc_PaymAppl_ProvinceLogoCell).Value = ProvinceLogo
  
  PopProtection WSheet:=WSheet
  
  Unload SelectProvince
  Core_EraseAllSheets WBook:=WSheet.Parent
  ProtectAllSheets
End Sub ' ProvinceSelected()

Attribute VB_Name = "Stammdaten"
' **********************************************************************
' *                                                                    *
' *                           Stammdaten.bas                           *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' Im Rahmen der Excel-Programmierung f|fffd|r die Abrechnung von Sach- und
' Investkosten, unbaren Eigenleistungen und Personalkosten entstand ein
' in sich geschlossenes Excel Sheet mit sehr vielen, unterschiedlichen
' Funktionen.
' Jede dieser Funktionen wird f|fffd|r ein konkretes F|fffd|rderprojekt keinmal,
' einmal oder mehrmals ben|fffd|tigt, wobei die Stammdaten (F|fffd|rderwerber,
' Antragnummer etc.) |fffd|ber alle F|fffd|rderbl|fffd|tter stets gleichbleiben. Es
' liegt als nahe, diese Stammdaten in einem getrennten Excelsheet zu
' erfassen und von dort in die einzelnen Abrechnungsbl|fffd|tter zu verteilen.
' Ausserdem kann dieses zentrale Stammdatenblatt auch gleich dazu dienen
' die einzelnen Abrechnungsbl|fffd|tter zu verwalten/erzeugen.
'
'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.122   Roland Lieger     3.07.2015   Added Lots of Comments / Getting Ready for Release
'  1.0.0.130   Roland Lieger     8.07.2015   Debugging / Secondary Unlock Applicant
'  1.0.0.248   Roland Lieger     4.11.2015   Getting Ready for Release
'  1.0.0.268   Roland Lieger    11.11.2015   Getting Ready for Release
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

#Const WBookType = "Full"

#Const WBookSupportsPaymAppl = True
#Const WBookSupportsSummary = True
#Const WBookSupportsMaterial = True
#Const WBookSupportsInvest = True
#Const WBookSupportsInKind = True
#Const WBookSupportsStdCost = True
#Const WBookSupportsLabour = True
#Const WBookSupportsNotes = True

Public Const gc_Stm_CoreDataWorkSheet As String = "Auswahl Belegaufstellungen"
Public Const gc_Stm_CoreTemplateSheet As String = "TEMPLATE Auswahl Belegaufst."

Public Const gc_Stm_FormVersionCell As String = "Stm_FormVersion"

Public Const gc_Stm_ApplicantIDCell As String = "Stm_ApplicantID"
Public Const gc_Stm_ApplicantNameCell As String = "Stm_ApplicantName"
Public Const gc_Stm_ApplicationIDCell As String = "Stm_ApplicationID"
Public Const gc_Stm_TaxDeductCell As String = "Stm_TaxDeduct"
Public Const gc_Stm_SupportPeriodStartCell As String = "Stm_SupportPeriodStart"
Public Const gc_Stm_SupportPeriodEndCell As String = "Stm_SupportPeriodEnd"
Public Const gc_Stm_ViewMode As String = "Stm_ViewMode"

' Private Const c_Checkbox_TaxDeductEnable As String = "Checkbox_TaxDeductEnable"
' Private Const c_Checkbox_TaxDeductDisable As String = "Checkbox_TaxDeductDisable"
Private Const c_RadioButton_TaxDeductEnable As String = "RadioButton_TaxDeductEnable"
Private Const c_RadioButton_TaxDeductDisable As String = "RadioButton_TaxDeductDisable"

Private Const c_Button_EraseAll As String = "Button_EraseAll"
Private Const c_Button_CreateInvestSheet As String = "Button_CreateInvestSheet"
Private Const c_Button_CreateMaterialSheet As String = "Button_CreateMaterialSheet"
Private Const c_Button_CreateInKindContribSheet As String = "Button_CreateInKindContribSheet"
Private Const c_Button_CreateStdCostSheet As String = "Button_CreateStdCostSheet"
Private Const c_Button_CreateLabourSheet As String = "Button_CreateLabourSheet"

Private Const c_Stm_ViewModeSelectRange As String = "Stm_ViewModeSelectRange"
Private Const c_Button_SelectModeVWK As String = "Button_SelectModeVWK"
Private Const c_Button_SelectModeVOK As String = "Button_SelectModeVOK"
Private Const c_Button_SelectModeUser As String = "Button_SelectModeUser"
Private Const c_Checkbox_PrintMode As String = "Checkbox_PrintMode"

Private Const c_Button_UnlockAll As String = "Button_UnlockAll"
Private Const c_Button_LockAll As String = "Button_LockAll"

Private Const c_Image_Fun_for_Girls As String = "Image_Fun_for_Girls"
Private Const c_Image_Fun_for_Boys As String = "Image_Fun_for_Boys"
'

' **********************************************************************
' *                                                                    *
' *                   RadioButton_TaxDeduct_OnClick()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub RadioButton_TaxDeduct_OnClick()
  Dim WSheet As Worksheet
  Set WSheet = ActiveSheet
  UpdateTaxDeductMode (WSheet.Range(gc_Stm_TaxDeductCell).Value = "Ja")
End Sub ' RadioButton_TaxDeductEnable_OnClick()
'


' **********************************************************************
' *                                                                    *
' *                 CheckBox_TaxDeductEnable_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are two checkboxes on the Master sheet that indicate if the
' supplicant is permit to perform VAT deduction (i.e. if costs are given
' with or without VAT). This is just a note to the users to take care what
' the are doing and is never included in the computation anywhere...
'
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_CheckBox_TaxDeductEnable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOff
'    ActiveSheet.Range(gc_Stm_TaxDeductCell).Value = "Ja"
  Else
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn
'    ActiveSheet.Range(gc_Stm_TaxDeductCell).Value = "Nein"
  End If

  UpdateTaxDeductMode (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' CheckBox_TaxDeductEnable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                 CheckBox_TaxDeductDisable_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' See: CheckBox_TaxDeductEnable_OnClick()
#If False Then
Sub Unused_CheckBox_TaxDeductDisable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  ActiveSheet.Unprotect (gc_Password)
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOff
'    ActiveSheet.Range(gc_Stm_TaxDeductCell).Value = "Nein"
  Else
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn
'    ActiveSheet.Range(gc_Stm_TaxDeductCell).Value = "Ja"
  End If
  
  UpdateTaxDeductMode (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' CheckBox_TaxDeductDisable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                        UpdateTaxDeductMode()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Whenever the TaxDeduct Mode changes, all calculation sheets need to be
' informed about the change, so that they can add/remove columns that
' are needed in some modes but not in the other..
Sub UpdateTaxDeductMode(TaxDeductActive As Boolean)
  Dim WSheet As Worksheet
    
  PushProtection
  RemoveProtection
  
  For Each WSheet In ThisWorkbook.Worksheets
    If (WSheet.Name = gc_SummaryWorkSheet) Then
      Summary_MarkDirty SummarySheet:=WSheet
    End If
    If (InStr(WSheet.Name, gc_TemplateCookie) <> 1) And _
       (InStr(WSheet.Name, gc_TableCookie) <> 1) Then
#If WBookSupportsInvest Or WBookSupportsMaterial Then
      If (InStr(WSheet.Name, gc_InvMat_InvestUserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_MaterialUserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_InvestUserSheetAbbr) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_MaterialUserSheetAbbr) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_InvestMaterialUserSheet) = 1) Then
        UpdateInvestMaterialTaxDeductMode TaxDeductActive:=TaxDeductActive, _
                 UserSheet:=WSheet
      End If
#End If
#If WBookSupportsInKind Then
      If (InStr(WSheet.Name, gc_InKind_UserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InKind_UserSheetAbbr) = 1) Then
        UpdateInKindTaxDeductMode TaxDeductActive:=TaxDeductActive, _
                 UserSheet:=WSheet
      End If
#End If
#If WBookSupportsStdCost Then
      If (InStr(WSheet.Name, gc_StdCost_UserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_StdCost_UserSheetAbbr) = 1) Then
        UpdateStdCostTaxDeductMode TaxDeductActive:=TaxDeductActive, _
                 UserSheet:=WSheet
      End If
#End If
    End If
    
  Next WSheet
  
  PopProtection
End Sub ' UpdateTaxDeductMode()
'

' **********************************************************************
' *                                                                    *
' *                      Button_EraseAll_OnClick()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase all user sheets (but not the template sheets) and start over...
Sub Button_EraseAll_OnClick()
  Dim Button As VbMsgBoxResult
  
  If gc_DisplayAreYouSureDialogs Then
    Button = MsgBox(Prompt:="Sie sind dabei alle Eingaben im Zahlungsantrag " & _
                   "und alle Belegaufstellungen zu l|fffd|schen. " & vbCr & _
                   "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden. " & vbCr & _
                   "Sind Sie sicher, dass Sie das wollen?", _
                   Buttons:=(vbYesNo Or vbDefaultButton2 Or vbExclamation), _
                   Title:="Alle Eingaben l|fffd|schen - Sind Sie sicher?")
    If (Button <> vbYes) Then
      Exit Sub
    End If
  End If
  
  Core_EraseAllSheets WBook:=ActiveWorkbook
End Sub ' Button_EraseAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                        Core_EraseAllSheets()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase all user sheets (but not the template sheets) and start over...
Sub Core_EraseAllSheets(WBook As Workbook)
  Dim TemplateSheet As Worksheet
  Dim DataSheet As Worksheet
  Dim MasterSheet As Worksheet
  Dim WSheet As Worksheet
  Dim PrevVisibility As Boolean
  Dim DebugMode As Boolean
  Dim ResetConfig As Boolean
  Dim UnlockWBook As Boolean
  Dim LockWBook As Boolean
  Dim FunForBoys As Boolean
  Dim FunForGirls As Boolean
  
  ' If StandAloneSheet() Then
  '   MsgBox ("Warning: StandAloneSheets is set not False ?!?")
  ' End If
    
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  DebugMode = gc_DebugMode
  ResetConfig = False
  UnlockWBook = False
  LockWBook = False
  FunForBoys = False
  FunForGirls = False
  
  ' There must always be at least on visible Worksheet in each Excel
  ' workbook. Thus since we are going to erase all non-template sheets
  ' we must make (at least one) template visible...
  PrevVisibility = WBook.Sheets(gc_Stm_CoreTemplateSheet).Visible
  WBook.Sheets(gc_Stm_CoreTemplateSheet).Visible = True
  
  ' Delete all sheets but the template sheets
  For Each WSheet In WBook.Worksheets
    If (WSheet.Name = gc_PaymAppl_WorkSheet) Then
      If (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = gc_DebugApplicantName) Or _
         (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = gc_UnlockApplicantName) Then
        DebugMode = True
      End If
      If (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = gc_ResetConfigApplicantName) Then
        ResetConfig = True
      End If
      If (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = gc_UnlockWBookApplicantName) Then
        DebugMode = True
        UnlockWBook = True
      End If
      If (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = gc_LockWBookApplicantName) Then
        DebugMode = True ' Do we really want this??
        LockWBook = True
      End If
      ' Fun for Boys and Girls was introduced around RLv133 and discontinued soon afterwards...
      If (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = "FunForBoys") Then
        FunForBoys = True
      End If
      If (WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value = "FunForGirls") Then
        FunForGirls = True
      End If
    End If
    If (WSheet.Name = gc_Stm_CoreDataWorkSheet) Then
      If (WSheet.Range(gc_Stm_ApplicantNameCell).Value = gc_DebugApplicantName) Or _
         (WSheet.Range(gc_Stm_ApplicantNameCell).Value = gc_UnlockApplicantName) Then
        DebugMode = True
      End If
      If (WSheet.Range(gc_Stm_ApplicantNameCell).Value = gc_ResetConfigApplicantName) Then
        ResetConfig = True
      End If
      If (WSheet.Range(gc_Stm_ApplicantNameCell).Value = gc_UnlockWBookApplicantName) Then
        DebugMode = True
        UnlockWBook = True
      End If
      If (WSheet.Range(gc_Stm_ApplicantNameCell).Value = gc_LockWBookApplicantName) Then
        DebugMode = True ' Do we really want this??
        LockWBook = True
      End If
      If (WSheet.Range(gc_Stm_ApplicantNameCell).Value = "FunForBoys") Then
        FunForBoys = True
      End If
      If (WSheet.Range(gc_Stm_ApplicantNameCell).Value = "FunForGirls") Then
        FunForGirls = True
      End If
    End If
    If (InStr(WSheet.Name, gc_TemplateCookie) <> 1) And _
       (InStr(WSheet.Name, gc_TableCookie) <> 1) And _
       (WSheet.Name <> gc_SummaryWorkSheet) Then
      WSheet.Delete
    End If
  Next WSheet
  
  ' Create a working copy of the labor cost sheet from the
  ' labor cost template sheet
  If (WorksheetExists(gc_PaymAppl_TemplateSheet)) Then
    
    Set TemplateSheet = WBook.Worksheets(gc_PaymAppl_TemplateSheet)
    
    If ResetConfig Then
      PushProtection WSheet:=TemplateSheet
      RemoveProtection WSheet:=TemplateSheet
      
      TemplateSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value = 0
      TemplateSheet.Range(gc_PaymAppl_ProvinceLogoCell).Value = ""
      
      PopProtection WSheet:=TemplateSheet
    End If
    
    Set DataSheet = CopyUserSheet(WSheet:=TemplateSheet, _
                                  WSheetCopyName:=gc_PaymAppl_WorkSheet, _
                                  After:=TemplateSheet)
    
    If Not (DataSheet Is Nothing) Then
      MarkShapes WSheet:=DataSheet, TemplateSheet:=TemplateSheet
    End If
  End If

  ' Create a working copy of the labour cost sheet from the
  ' labour cost template sheet
  Set TemplateSheet = WBook.Worksheets(gc_Stm_CoreTemplateSheet)
  Set DataSheet = CopyUserSheet(WSheet:=TemplateSheet, _
                                WSheetCopyName:=gc_Stm_CoreDataWorkSheet, _
                                After:=TemplateSheet)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  If Not (DataSheet Is Nothing) Then
    MarkShapes WSheet:=DataSheet, TemplateSheet:=WBook.Worksheets(gc_PaymAppl_WorkSheet)
    
    If CompletePaymentApplication() Then
      Set MasterSheet = WBook.Worksheets(gc_PaymAppl_WorkSheet)
      DataSheet.Range(gc_Stm_ApplicantIDCell).MergeArea.NumberFormat = "General"
      DataSheet.Range(gc_Stm_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_ApplicantIDCell & ")"
      DataSheet.Range(gc_Stm_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      DataSheet.Range(gc_Stm_ApplicantIDCell).MergeArea.Locked = True
      
      DataSheet.Range(gc_Stm_ApplicantNameCell).MergeArea.NumberFormat = "General"
      DataSheet.Range(gc_Stm_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_ApplicantNameCell & ")"
      DataSheet.Range(gc_Stm_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      DataSheet.Range(gc_Stm_ApplicantNameCell).MergeArea.Locked = True
      
      DataSheet.Range(gc_Stm_ApplicationIDCell).MergeArea.NumberFormat = "General"
      ' DataSheet.Range(gc_Stm_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_ApplicationIDCell & ")"
      DataSheet.Range(gc_Stm_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_ApplicationIDCell & ") & " & _
            "'" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_PartialPaymTitle
      DataSheet.Range(gc_Stm_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      DataSheet.Range(gc_Stm_ApplicationIDCell).MergeArea.Locked = True
      
      ' Public Const gc_PaymAppl_PartialPaymentID As String = "PaymAppl_PartialPaymID"
      ' Public Const gc_PaymAppl_PartialPaymentSelect As String = "PaymAppl_PartialPaymSelect"
            
      DataSheet.Range(gc_Stm_TaxDeductCell).MergeArea.NumberFormat = "General"
      DataSheet.Range(gc_Stm_TaxDeductCell).Formula = _
            "=TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_TaxDeductCell & ")"
      DataSheet.Range(gc_Stm_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      DataSheet.Range(gc_Stm_TaxDeductCell).MergeArea.Locked = True
      
      ' DataSheet.Range(gc_Stm_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      DataSheet.Range(gc_Stm_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_SupportPeriodStartCell & ")"
      DataSheet.Range(gc_Stm_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      DataSheet.Range(gc_Stm_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' DataSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      DataSheet.Range(gc_Stm_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_PaymAppl_WorkSheet & "'!" & gc_PaymAppl_SupportPeriodEndCell & ")"
      DataSheet.Range(gc_Stm_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      DataSheet.Range(gc_Stm_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' DataSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' DataSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      DataSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      DataSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
    End If

    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ' There is an option to select the view mode from the central
    ' sheet. However it was later decided that this switching should
    ' be done on a per-sheet basis. Thus this option has been hidden
    ' on the central sheet...
    
    DataSheet.Shapes(c_Button_SelectModeVWK).Visible = False
    DataSheet.Shapes(c_Button_SelectModeVOK).Visible = False
    DataSheet.Shapes(c_Button_SelectModeUser).Visible = False
    DataSheet.Shapes(c_Checkbox_PrintMode).Visible = False
    
    DataSheet.Range(c_Stm_ViewModeSelectRange).Rows.Hidden = True

    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ' At first the user has to choose the calculation mode for
    ' labor cost. Thus only the general header and the three buttons
    ' for this choice are visible. All other fields are hidden.
    
    DataSheet.Shapes(c_Button_UnlockAll).Visible = DebugMode
    DataSheet.Shapes(c_Button_LockAll).Visible = DebugMode

    On Error GoTo NoImages
      TemplateSheet.Shapes(c_Image_Fun_for_Boys).Visible = True
      DataSheet.Shapes(c_Image_Fun_for_Boys).Visible = FunForBoys
      TemplateSheet.Shapes(c_Image_Fun_for_Girls).Visible = True
      DataSheet.Shapes(c_Image_Fun_for_Girls).Visible = FunForGirls
NoImages:
    On Error GoTo 0
  
    ' Make sure that the first important cell is selected an the
    ' sheet is neatly scrolled to home position
    ' LaborCostSheet.Range(gc_ProjectNameCell).Select
    DataSheet.Range(gc_Stm_ApplicantIDCell).Select
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
  End If ' If Not(DataSheet is Nothing)
  
  If (WorksheetExists(gc_SummaryWorkSheet)) Then
    gv_Summary_UpdateDisable = True
    
    Set DataSheet = WBook.Worksheets(gc_SummaryWorkSheet)
    DataSheet.Visible = True
    DataSheet.Activate
    
    ' Beware: DataSheet.Activate causes the Summary Sheet to be recreated!
    ' The old Summary Sheet is deleted and a new one is created!
    ' The old reference to the Summary Sheet as stored in DataSheet is now invalid
    Set DataSheet = WBook.Worksheets(gc_SummaryWorkSheet)
    DataSheet.Range(gc_Summary_ApplicantIDCell).Select
    ActiveWindow.ScrollRow = 1
    
    ActiveWindow.ScrollColumn = 1
    Summary_MarkDirty SummarySheet:=DataSheet
    Summary_AdjustTaxDeduct SummarySheet:=DataSheet, _
                            TaxDeductEnable:=(DataSheet.Range(gc_Summary_TaxDeductCell).Value = "Ja")
    If (DebugMode) Then
      Summary_AdjustButtons SummarySheet:=DataSheet, ButtonMask:=&H3FF
    Else
      Summary_AdjustButtons SummarySheet:=DataSheet, ButtonMask:=&HFF
    End If
    
    gv_Summary_UpdateDisable = False
  End If
  
  If (WorksheetExists(gc_PaymAppl_WorkSheet)) Then
    Set DataSheet = WBook.Worksheets(gc_PaymAppl_WorkSheet)
    DataSheet.Visible = True
    DataSheet.Activate
    PaymAppl_AdjustLogos WSheet:=DataSheet
    DataSheet.Range(gc_PaymAppl_ApplicationIDCell).Select
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    WBook.Worksheets(gc_Stm_CoreDataWorkSheet).Visible = False
  End If
  
  If (WorksheetExists(gc_ScratchPad_TemplateSheet)) Then
    CreateScratchPadSheet WBook:=WBook
    ' CreateScratchPadSheet
    ' CreateScratchPadSheet
    DataSheet.Activate
  End If
  
  WBook.Sheets(gc_Stm_CoreTemplateSheet).Visible = PrevVisibility
  ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
  
  PopProtection WBook:=WBook
  If (UnlockWBook) Then
    UnprotectAllSheets
  Else
    ProtectAllSheets
  End If
  
  If (WorksheetExists(gc_PaymAppl_WorkSheet)) Then
    Worksheets(gc_PaymAppl_WorkSheet).Select
  End If
  
End Sub ' Core_EraseAllSheets()
'

' **********************************************************************
' *                                                                    *
' *                 Button_CreateInvestSheet_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_CreateInvestSheet_OnClick()
#If WBookSupportsInvest Then
  CreateInvestUserSheet WBook:=ActiveWorkbook
#End If
End Sub ' Button_CreateInvestSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                Button_CreateMaterialSheet_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_CreateMaterialSheet_OnClick()
#If WBookSupportsMaterial Then
  CreateMaterialUserSheet WBook:=ActiveWorkbook
#End If
End Sub ' Button_CreateMaterialSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *              Button_CreateInKindContribSheet_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_CreateInKindContribSheet_OnClick()
#If WBookSupportsInKind Then
  CreateInKindUserSheet WBook:=ActiveWorkbook
#End If
End Sub ' Button_CreateInKindContribSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                 Button_CreateStdCostSheet_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_CreateStdCostSheet_OnClick()
#If WBookSupportsStdCost Then
  CreateStdCostUserSheet WBook:=ActiveWorkbook
#End If
End Sub ' Button_CreateStdCostSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                 Button_CreateLabourSheet_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_CreateLabourSheet_OnClick()
#If WBookSupportsLabour Then
  CreateLabourUserSheet WBook:=ActiveWorkbook
#End If
End Sub ' Button_CreateLabourSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               Button_CreateScratchPadSheet_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_CreateScratchPadSheet_OnClick()
#If WBookSupportsNotes Then
  CreateScratchPadSheet WBook:=ActiveWorkbook
#End If
End Sub ' Button_CreateScratchPadSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                   Button_SelectModeVWK_OnClick()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_SelectModeVWK_OnClick()
  Dim CheckBox_PrintMode As Shape
  
  ' Fetch Handle to Checkbox
  Set CheckBox_PrintMode = ActiveSheet.Shapes(c_Checkbox_PrintMode)
  
  ' Select new View Mode
  If (CheckBox_PrintMode.ControlFormat.Value = xlOff) Then
    UpdateViewMode ("B")
  Else
    UpdateViewMode ("b")
  End If
End Sub ' Button_SelectModeVWK_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                   Button_SelectModeVOK_OnClick()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_SelectModeVOK_OnClick()
  Dim CheckBox_PrintMode As Shape
  
  ' Fetch Handle to Checkbox
  Set CheckBox_PrintMode = ActiveSheet.Shapes(c_Checkbox_PrintMode)
  
  ' Select new View Mode
  If (CheckBox_PrintMode.ControlFormat.Value = xlOff) Then
    UpdateViewMode ("V")
  Else
    UpdateViewMode ("v")
  End If
End Sub ' Button_SelectModeVOK_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                    CheckBox_PrintMode_OnClick()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CheckBox_PrintMode_OnClick()
  Dim CheckBox_PrintMode As Shape
  Dim Code As String
  
  PushProtection WSheet:=ActiveSheet
  RemoveProtection WSheet:=ActiveSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Fetch Handles to the Checkbox
  Set CheckBox_PrintMode = ActiveSheet.Shapes(c_Checkbox_PrintMode)
  
  Code = ActiveSheet.Range(gc_Stm_ViewMode).Value
  Code = UCase(Code)
  If (CheckBox_PrintMode.ControlFormat.Value = xlOn) And Code <> "U" Then
    Code = LCase(Code)
  End If
  
  UpdateViewMode (Code)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=ActiveSheet

End Sub ' CheckBox_PrintMode_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                   Button_SelectModeUser_OnClick()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_SelectModeUser_OnClick()
  UpdateViewMode ("U")
End Sub ' Button_SelectModeUser_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                          UpdateViewMode()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateViewMode(Code As String)
  Dim ShowVWKButtons As Boolean
  Dim ShowVOKButtons As Boolean
  Dim WSheet As Worksheet
  
  ShowVWKButtons = True
  ShowVOKButtons = (Code <> "U")
  
  PushProtection WSheet:=ActiveSheet
  RemoveProtection WSheet:=ActiveSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ActiveSheet.Range(gc_Stm_ViewMode).Value = Code
  For Each WSheet In Worksheets
    If (InStr(WSheet.Name, gc_TemplateCookie) <> 1) And _
       (InStr(WSheet.Name, gc_TableCookie) <> 1) Then
#If WBookSupportsInvest Or WBookSupportsMaterial Then
      If (InStr(WSheet.Name, gc_InvMat_InvestUserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_MaterialUserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_InvestUserSheetAbbr) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_MaterialUserSheetAbbr) = 1) Or _
         (InStr(WSheet.Name, gc_InvMat_InvestMaterialUserSheet) = 1) Then
        UpdateInvestMaterialViewMode VisibleCode:=Code, _
                 ShowVWKButtons:=ShowVWKButtons, ShowVOKButtons:=ShowVOKButtons, _
                 WSheet:=WSheet
      End If
#End If
#If WBookSupportsInKind Then
      If (InStr(WSheet.Name, gc_InKind_UserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_InKind_UserSheetAbbr) = 1) Then
        UpdateInKindViewMode VisibleCode:=Code, _
                 ShowVWKButtons:=ShowVWKButtons, ShowVOKButtons:=ShowVOKButtons, _
                 WSheet:=WSheet
      End If
#End If
#If WBookSupportsStdCost Then
      If (InStr(WSheet.Name, gc_StdCost_UserSheet) = 1) Or _
         (InStr(WSheet.Name, gc_StdCost_UserSheetAbbr) = 1) Then
        UpdateStdCostViewMode VisibleCode:=Code, _
                 ShowVWKButtons:=ShowVWKButtons, ShowVOKButtons:=ShowVOKButtons, _
                 WSheet:=WSheet
      End If
#End If
    End If
  Next WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=ActiveSheet

End Sub ' UpdateViewMode()
'
' **********************************************************************
' *                           Stammdaten.bas                           *
' **********************************************************************

Attribute VB_Name = "Standardkosten"
' **********************************************************************
' *                                                                    *
' *                         Standardkosten.bas                         *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' FIXME FIXME
'
' Im Tabellenblatt k|fffd|nnen |fffd|ber Buttons Zeilen f|fffd|r jede beliebige Anzahl
' von Mitwirkenden und Leistungen angelegt werden ohne dass deswegen das
' gesamte Excel-Sheet ungesch|fffd|tzt ist (und leichtfertige Anwender beliebig
' die Struktur |fffd|ndern k|fffd|nnen).
'
' Weiters gibt es 5 verschiedene Ansichten auf die Spalten zwischen denen
' ebenfalls per Button umgeschaltet werden kann. Dadurch wird dem Anwender
' stets genau soviel Information angeboten wie im Moment erforderlich ist
' und der Endkunden nicht mit Feldern verwirrt die nur die Verwaltungs-
' kontrolle bzw. den techn. Pr|fffd|fdienst betreffen.

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.305   Roland Lieger    20. 1.2016    Created (derived from UnbareSachleistungen)
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

Public Const gc_StdCost_TemplateSheet As String = "TEMPLATE Standardkosten"
Public Const gc_StdCost_UserSheet As String = "Standardkosten"
Public Const gc_StdCost_UserSheetAbbr As String = "Std.Kosten - "
 
Private Const c_Button_EraseAll As String = "Button_EraseAll"
Private Const c_Button_DuplicateSheet As String = "Button_DuplicateSheet"
Private Const c_Button_RemoveMacros As String = "Button_RemoveMacros"
Private Const c_Button_UnlockAll As String = "Button_UnlockAll"
Private Const c_Button_LockAll As String = "Button_LockAll"
 
' Private Const c_Checkbox_TaxDeductEnable As String = "Checkbox_TaxDeductEnable"
' Private Const c_Checkbox_TaxDeductDisable As String = "Checkbox_TaxDeductDisable"
Private Const c_RadioButton_TaxDeductEnable As String = "RadioButton_TaxDeductEnable"
Private Const c_RadioButton_TaxDeductDisable As String = "RadioButton_TaxDeductDisable"

Private Const c_Button_SelectModeUser As String = "Button_SelectModeUser"

' Private Const c_Button_SelectModeVWK As String = "Button_SelectModeVWK"
Private Const c_Button_SelectModeVWKFull As String = "Button_SelectModeVWKFull"
Private Const c_Button_SelectModeVWKPrint As String = "Button_SelectModeVWKPrint"

' Private Const c_Button_SelectModeVOK As String = "Button_SelectModeVOK"
Private Const c_Button_SelectModeVOKFull As String = "Button_SelectModeVOKFull"
Private Const c_Button_SelectModeVOKPrint As String = "Button_SelectModeVOKPrint"

Private Const c_SelectModeButtonRows As String = "StdCost_SelectModeButtonRows"
  
Private Const c_ApplicantIDCell As String = "StdCost_ApplicantIDCell"
Private Const c_ApplicantNameCell As String = "StdCost_ApplicantNameCell"
Private Const c_ApplicationIDCell As String = "StdCost_ApplicationIDCell"
Public Const gc_StdCost_ApplicationSubject As String = "StdCost_ApplicationSubject"
Public Const gc_StdCost_ApplicationSubjectShadow As String = "StdCost_ApplicationSubjectShadow"

Public Const gc_StdCost_FormVersionCell As String = "StdCost_FormVersion"

Public Const gc_StdCost_TotalCost As String = "StdCost_TotalCost"
Public Const gc_StdCost_AppliedCost As String = "StdCost_AppliedCost"
Public Const gc_StdCost_ReducedCostVWK As String = "StdCost_ReducedCostVWK"
Public Const gc_StdCost_AcceptedCostVWK As String = "StdCost_AcceptedCostVWK"
Public Const gc_StdCost_ReducedCostVOK As String = "StdCost_ReducedCostVOK"
Public Const gc_StdCost_AcceptedCostVOK As String = "StdCost_AcceptedCostVOK"
' Public Const gc_StdCost_SanctionsVWK As String = "StdCost_SanctionsVWK"
Public Const gc_StdCost_SanctionsVOK As String = "StdCost_SanctionsVOK"

Private Const c_StdCost_SignatureRange As String = "StdCost_SignatureRange"

Private Const c_TaxDeductCell As String = "StdCost_TaxDeductCell"
Private Const c_SupportPeriodStartCell As String = "StdCost_SupportPeriodStartCell"
Private Const c_SupportPeriodEndCell As String = "StdCost_SupportPeriodEndCell"

Private Const c_DefaultActiveCell As String = "StdCost_DefaultActiveCell"

Private Const c_PrintFilterRow As String = "StdCost_PrintFilterRow"
Private Const c_PrintFilterColumn As String = "StdCost_PrintFilterColumn"

Private Const c_Button_AddReceipt As String = "Button_AddReceipt"
Private Const c_Button_AddMultiReceipts As String = "Button_AddMultipleReceipts"
Private Const c_Button_DelReceipt As String = "Button_DelReceipt"

Private Const c_ReceiptRangeHeadRow As String = "StdCost_ReceiptRangeHeadRow"
Private Const c_ReceiptPasteGuardRow As String = "StdCost_ReceiptPasteGuardRow"
Private Const c_ReceiptTemplateRow As String = "StdCost_ReceiptTemplateRow"
Private Const c_ReceiptRangeTailRow As String = "StdCost_ReceiptRangeTailRow"

Private Const c_EntryTypeColumn As String = "B"
Private Const c_SerialNrColumn As String = "C"
' Private Const c_SubProjectColumn As String = "H"

Private Const c_FirstDataEntryColumnIdx As Integer = 4 ' = ColumnTitleToIdx("D")
Private Const c_LastDataEntryColumnIdx As Integer = 11 ' = ColumnTitleToIdx("K")
Private Const c_SubProjectColumnIdx As Integer = 8 ' = ColumnTitleToIdx("H")
Private Const c_TaskCodeColumnIdx As Integer = 15 ' = ColumnTitleToIdx("O")

Public Const gc_StdCost_SumColumnMarker As String = "SumColumn"
Public Const gc_StdCost_TotalCostColumn As String = "L"
Public Const gc_StdCost_AppliedCostColumn As String = "N"
Public Const gc_StdCost_ReducedCostVWKColumn As String = "S"
Public Const gc_StdCost_AcceptedCostVWKColumn As String = "W"
Public Const gc_StdCost_ReducedCostVOKColumn As String = "AC"
Public Const gc_StdCost_AcceptedCostVOKColumn As String = "AG"
' Public Const gc_StdCost_SanctionsVWKColumn As String = "A*"
Public Const gc_StdCost_SanctionsVOKColumn As String = "AL"

Private v_PrintWSheet As Worksheet
'
' **********************************************************************
' *                                                                    *
' *                       StdCost_EraseAllData()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_EraseAllData()
  Dim WSheet As Worksheet
  Dim Button As VbMsgBoxResult
  
  Set WSheet = ActiveSheet
  If WSheet.Name = gc_StdCost_TemplateSheet Then
    Exit Sub
  End If
    
  If gc_DisplayAreYouSureDialogs Then
    Button = MsgBox(Prompt:="Sie sind dabei die Belegaufstellung " & _
                   Chr(34) & WSheet.Name & Chr(34) & " mit allen Eingaben zu l|fffd|schen. " & vbCr & _
                   "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden. " & vbCr & _
                   "Sind Sie sicher, dass Sie das wollen?", _
                   Buttons:=(vbYesNo Or vbDefaultButton2 Or vbExclamation), _
                   Title:=(WSheet.Name & " l|fffd|schen - Sind Sie sicher?"))
    If (Button <> vbYes) Then
      Exit Sub
    End If
  End If
  
  StdCost_CoreEraseAllData TargetSheet:=WSheet
End Sub ' StdCost_EraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                     StdCost_CoreEraseAllData()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub StdCost_CoreEraseAllData(TargetSheet As Worksheet)
  Dim WBook As Workbook
  Dim DebugMode As Boolean
  Dim ActiveStdCostSheetCnt As Integer
  Dim WSheet As Worksheet
  Dim PrevVisibility As Boolean
  
  If TargetSheet.Name = gc_StdCost_TemplateSheet Then
    Exit Sub
  End If
  Set WBook = TargetSheet.Parent
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook, WSheet:=TargetSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
  DebugMode = gc_DebugMode
  If (TargetSheet.Range(c_ApplicantNameCell).Value = gc_DebugApplicantName) Or _
     (TargetSheet.Range(c_ApplicantNameCell).Value = gc_UnlockApplicantName) Then
    DebugMode = True
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' There must always be at least on visible Worksheet in each Excel
  ' workbook. Thus since we are going to erase all non-template sheets
  ' we must make (at least one) template visible...
  PrevVisibility = WBook.Sheets(gc_StdCost_TemplateSheet).Visible
  WBook.Sheets(gc_StdCost_TemplateSheet).Visible = True

  ' Delete the current user data sheet (if it exists)
  ' Note: It would be very tempting to simply delete the Worksheet now.
  ' This works fine for many Excel installations, however I found an
  ' Excel 2013 (32-bit) installation on Win7 (32-bit) that reproducably
  ' crashes completly when I simply delete the worksheet here. :(
  ' Workaround: We shall only mark the worksheet for deletion here and
  ' hide it (so it appears deleted to the end user) and then set up a
  ' timer that will trigger in 5 seconds (when user interaction has
  ' hopefully settled down) and start a garbage collection that actually
  ' deletes the unwanted sheets.
  ' TargetSheet.Delete - DO NOT DO THIS - Excel 2013 will crash!!!
  TargetSheet.Name = UniqueSheetName(gc_DeletedCookie & TargetSheet.Name)
  TargetSheet.Visible = False
  
  If StandAloneSheet() Then
    ActiveStdCostSheetCnt = 0
    For Each WSheet In Worksheets
      If (Left(WSheet.Name, Len(gc_StdCost_UserSheet)) = gc_StdCost_UserSheet) Or _
         (Left(WSheet.Name, Len(gc_StdCost_UserSheetAbbr)) = gc_StdCost_UserSheetAbbr) Then
        ActiveStdCostSheetCnt = ActiveStdCostSheetCnt + 1
      End If
    Next WSheet
    If ActiveStdCostSheetCnt = 0 Then
      CreateStdCostUserSheet WBook:=WBook
      Set TargetSheet = ActiveSheet
      TargetSheet.Shapes(c_Button_UnlockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_LockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_DuplicateSheet).Visible = True
    End If
  End If
  
  WBook.Sheets(gc_StdCost_TemplateSheet).Visible = PrevVisibility
 
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  ' Else
  '   TargetSheet.Delete
  End If
  Application.OnTime Now() + TimeValue("0:00:01"), "EmptyTrash"

End Sub ' StdCost_CoreEraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                      CreateStdCostUserSheet()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Standardkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub CreateStdCostUserSheet(WBook As Workbook)
  Dim UserSheet As Worksheet
  Dim StandAloneMode As Boolean
  
 ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  StandAloneMode = Not WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set UserSheet = CopyUserSheet(WSheet:=WBook.Worksheets(gc_StdCost_TemplateSheet), _
                                WSheetCopyName:=gc_StdCost_UserSheet, _
                                Before:=WBook.Worksheets(gc_StdCost_TemplateSheet))
    
  If Not (UserSheet Is Nothing) Then
    MarkShapes WSheet:=UserSheet, TemplateSheet:=WBook.Worksheets(gc_StdCost_TemplateSheet)
    
    ' Make sure that the first important cell is selected an the
    ' sheet is neatly scrolled to home position
    ' UserSheet.Range(gc_ProjectNameCell).Select
    If StandAloneMode Then
      UserSheet.Range(c_ApplicantIDCell).Select
    Else
      UserSheet.Range(gc_StdCost_ApplicationSubject).Select
    End If
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    If Not StandAloneMode Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' UserSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' UserSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
    End If
    
   ' On 2017-09-18 a User reported trouble with WinXP/Excel 2007:
    '     Laufzeitfehler '1004' - Die LeftFooter-Eigenschaft des
    '        PageSetup-Objekts kann nicht festgelegt werden.
    ' The reason for this problem is not known, however we shall
    ' simply skip PageSetup if we encounter this problem.
    ' Note: This is a dirty workaround not a solution! FIXME!
    On Error GoTo SkipPageSetup
    If (UserSheet.PageSetup.LeftFooter <> "") Then
      If (StandAloneMode) Then
        UserSheet.PageSetup.LeftFooter = "Standardkosten"
      Else
        UserSheet.PageSetup.LeftFooter = "ZA/Standardkosten"
      End If
      ' UserSheet.PageSetup.CenterFooter = c_PublicVersionInfo & " / " & c_MonthName(Month(NowDateTime) - 1) & " " & Year(NowDateTime)
      ' UserSheet.PageSetup.RightFooter = "Seite &P von &N"
      UserSheet.DisplayAutomaticPageBreaks = False
    End If
SkipPageSetup:
    On Error GoTo 0
    
    UserSheet.Shapes(c_Button_RemoveMacros).Visible = StandAloneMode
    UserSheet.Shapes(c_Button_UnlockAll).Visible = False
    UserSheet.Shapes(c_Button_LockAll).Visible = False
      
    StdCost_SelectViewModeUser
    
    ProtectWSheet WSheet:=UserSheet
    UserSheet.Select
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  If Not StandAloneMode Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If

End Sub ' CreateStdCostUserSheet()
'
' **********************************************************************
' *                                                                    *
' *                 DuplicateStdCostUserSheet_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateStdCostUserSheet_OnClick()
  DuplicateStdCostUserSheet WSheet:=ActiveSheet
End Sub ' DuplicateStdCostUserSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     DuplicateStdCostUserSheet()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateStdCostUserSheet(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim UserSheet As Worksheet
  
  Set WBook = WSheet.Parent
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set UserSheet = CopyUserSheet(WSheet:=WSheet, After:=WSheet)
  ' UserSheet.Name = UniqueSheetName(gc_StdCost_UserSheet)
  
  If Not (UserSheet Is Nothing) Then
    If Not StandAloneSheet() Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
       
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' UserSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' UserSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
    End If
    ProtectWSheet WSheet:=UserSheet
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' DuplicateStdCostUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                    StdCost_AdjustWorksheetName()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_AdjustWorksheetName(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim Subject As String
  Dim WSheetTitle As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    Exit Sub
  End If
  
  If WSheet.Range(gc_StdCost_ApplicationSubject).Value = WSheet.Range(gc_StdCost_ApplicationSubjectShadow).Value Then
    Exit Sub
  End If
    
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
  Subject = WSheet.Range(gc_StdCost_ApplicationSubject).Value
  WSheet.Range(gc_StdCost_ApplicationSubjectShadow).Value = Subject
  
  WSheetTitle = gc_StdCost_UserSheetAbbr & Subject
  WSheetTitle = UniqueSheetName(WSheetTitle)
  
  WSheet.Name = WSheetTitle
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' StdCost_AdjustWorksheetName()
'

' **********************************************************************
' *                                                                    *
' *                  StdCost_GetPreferredWSheetName()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function StdCost_GetPreferredWSheetName(WSheet As Worksheet) As String
  Dim Subject As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    StdCost_GetPreferredWSheetName = WSheet.Name
    Return
  End If
  
  Subject = Trim(WSheet.Range(gc_StdCost_ApplicationSubject).Value)
  If (WSheet.Range(gc_StdCost_ApplicationSubjectShadow).Value <> Subject) Then
    WSheet.Range(gc_StdCost_ApplicationSubjectShadow).Value = Subject
  End If
  
  If (Subject = "") Then
    StdCost_GetPreferredWSheetName = gc_StdCost_UserSheet
  Else
    StdCost_GetPreferredWSheetName = gc_StdCost_UserSheetAbbr & Subject
  End If

End Function ' StdCost_GetPreferredWSheetName()
'

' **********************************************************************
' *                                                                    *
' *                 StdCost_InsertReceiptLine_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub StdCost_InsertReceiptLine_OnClick()
  StdCost_InsertReceiptLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=-1
End Sub ' StdCost_InsertReceiptLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *            StdCost_InsertMultipleReceiptLines_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub StdCost_InsertMultipleReceiptLines_OnClick()
  Dim Reply As String
  Dim Count As Integer
  Dim MsgReply As VbMsgBoxResult
  
  Reply = InputBox(Prompt:="Wie viele Zeilen f|fffd|r Belege sollen eingef|fffd|gt werden?" & vbCr & _
                           "Bitte geben Sie eine ganze Zahl zwischen 1 und 1000 ein." & vbCr & _
                           "Eine leere Eingabe oder 0 bricht ab.", _
                     Title:="Mehrere Belegzeilen einf|fffd|gen")
  Reply = Trim(Reply)
  Count = -1
  If IsNumeric(Reply) Then
    On Error Resume Next  ' Handle potential Overflows in String Conversion
    Count = CInt(Reply)
    On Error GoTo 0
  End If
  
  If (Count <= 0) Then
    Exit Sub
  End If
  
  If (Count < 1) Or (Count > 1000) Then
    MsgReply = MsgBox(Prompt:="'" & Reply & "' ist keine g|fffd|ltige Eingabe." & vbCr & _
                   "Einf|fffd|geoperation abgebrochen.", _
           Buttons:=vbOKOnly Or vbExclamation, _
           Title:="Fehler - Mehrere Belegzeilen einf|fffd|gen")
    Exit Sub
  End If
  StdCost_InsertReceiptLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=Count
End Sub ' StdCost_InsertMultipleReceiptLines_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     StdCost_InsertReceiptLine()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add one or more lines for additional receipts to the list of receipts.
' If this function is used programmatically, we can specify the worksheet
' and the location where we want to add the lines. If used interactively
' we shall add the lines at the current selection (or at the bottom of
' the list, if the current selection is not within the list)
Sub StdCost_InsertReceiptLine(Optional WSheet As Worksheet = Nothing, _
                              Optional InsertRowIdx As Integer = -1, _
                              Optional InsertRowCnt As Integer = -1)
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim ReceiptTableHeadRowIdx As Integer
  Dim ReceiptTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set TemplateRow = WSheet.Range(c_ReceiptTemplateRow)
  
  ReceiptTableHeadRowIdx = WSheet.Range(c_ReceiptRangeHeadRow).Row
  ReceiptTableTailRowIdx = WSheet.Range(c_ReceiptPasteGuardRow).Row - 1
  
  If (Selection.Parent Is WSheet) And (Selection.Rows.Count >= 1) Then
    SelectTopRow = Selection.Row
    SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    
    If (SelectTopRow < ReceiptTableHeadRowIdx) Then
      SelectTopRow = ReceiptTableHeadRowIdx
    End If
    If (SelectBottomRow > ReceiptTableTailRowIdx) Then
      SelectBottomRow = ReceiptTableTailRowIdx
    End If
  Else
    SelectTopRow = ReceiptTableTailRowIdx
    SelectBottomRow = ReceiptTableTailRowIdx
  End If
  
  If (InsertRowCnt <= 0) Then
    If (SelectTopRow < SelectBottomRow) Then
      InsertRowCnt = (SelectBottomRow - SelectTopRow) + 1
    Else
      InsertRowCnt = 1
    End If
  End If
  
  If (InsertRowIdx < 0) Then
    ' Option A: Always Insert at the Top of the Table
    ' InsertRowIdx = 0
    
    ' Option B: Always Insert at the Bottom of the Table
    ' InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
    
    ' Option C: Insert Before the Current Selection (Excel Standard)
    ' InsertRowIdx = Selection.Row - ReceiptTableHeadRowIdx
    
    ' Option D: Insert Behind the Current Selection
    InsertRowIdx = Selection.Row + Selection.Rows.Count - ReceiptTableHeadRowIdx
    
    ' Special Case: If we insert in the first line, we shall insert before the first line
    ' If (InsertRowIdx = 1) Then InsertRowIdx = 0
    If (Selection.Row = ReceiptTableHeadRowIdx) Then InsertRowIdx = 0
  End If
  
  If (InsertRowIdx < 0) Then
    ' InsertRowIdx = 0
    InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
  End If
  If (InsertRowIdx > (ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1)) Then
    InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
  End If
  InsertRowIdx = InsertRowIdx + ReceiptTableHeadRowIdx
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TemplateRow.Rows.Hidden = False
  If (InsertRowIdx = ReceiptTableHeadRowIdx) Then
    WSheet.Range(CStr(InsertRowIdx + 1) & ":" & CStr(InsertRowIdx + InsertRowCnt)).Insert (xlShiftDown)
    RowIdx = InsertRowIdx + InsertRowCnt
    WSheet.Range(c_ReceiptRangeHeadRow).Copy (WSheet.Cells(RowIdx, 1))
  Else
    WSheet.Range(CStr(InsertRowIdx) & ":" & CStr(InsertRowIdx + InsertRowCnt - 1)).Insert (xlShiftDown)
  End If
  
  For RowIdx = InsertRowIdx To InsertRowIdx + InsertRowCnt - 1
    TemplateRow.Copy (WSheet.Cells(RowIdx, 1))
    Set IndexCell = WSheet.Cells(RowIdx, ColumnTitleToIdx(c_SerialNrColumn))
    If (RowIdx <> ReceiptTableHeadRowIdx) Then
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
    Else
      IndexCell.Formula = "=" & _
        WSheet.Cells(RowIdx + InsertRowCnt, ColumnTitleToIdx(c_SerialNrColumn)).Value
      IndexCell.Locked = False
      IndexCell.Interior.ColorIndex = -4142
    End If
  Next RowIdx
  
  If (RowIdx < WSheet.Range(c_ReceiptPasteGuardRow).Row) Then
    Set IndexCell = WSheet.Cells(RowIdx, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  If (RowIdx + 1 < WSheet.Range(c_ReceiptPasteGuardRow).Row) Then
    Set IndexCell = WSheet.Cells(RowIdx + 1, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  
  TemplateRow.Rows.Hidden = True
  
  WSheet.Cells(InsertRowIdx, 4).Select
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' StdCost_InsertReceiptLine()
'

' **********************************************************************
' *                                                                    *
' *                 StdCost_DeleteReceiptLine_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete the selected rows of receipts from the active worksheet.
Sub StdCost_DeleteReceiptLine_OnClick()
  StdCost_DeleteReceiptLine WSheet:=ActiveSheet, DeleteRowIdx:=-1, DeleteRowCnt:=-1
End Sub ' StdCost_DeleteReceiptLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     StdCost_DeleteReceiptLine()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete one or more lines from the list of receipts.
' Note: When using this function programmatically, we can pass the
' worksheet and rows that we want to delete. If this is used interactivly
' we shall delete the selected row(s) from the active worksheet.
Sub StdCost_DeleteReceiptLine(Optional WSheet As Worksheet = Nothing, _
                              Optional DeleteRowIdx As Integer = -1, _
                              Optional DeleteRowCnt As Integer = -1)
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim ReceiptTableHeadRowIdx As Integer
  Dim ReceiptTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  Dim RangeDef As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set TemplateRow = WSheet.Range(c_ReceiptTemplateRow)
  
  ReceiptTableHeadRowIdx = WSheet.Range(c_ReceiptRangeHeadRow).Row
  ReceiptTableTailRowIdx = WSheet.Range(c_ReceiptPasteGuardRow).Row - 1
  
  If (DeleteRowIdx = 0) Or (DeleteRowCnt = 0) Then
    Exit Sub
  End If
  
  If (DeleteRowIdx < 0) Then
    If Not (Selection.Parent Is WSheet) Or (Selection.Rows.Count < 1) Then
      Exit Sub
    End If
    
    SelectTopRow = Selection.Row
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  Else
    SelectTopRow = ReceiptTableHeadRowIdx + DeleteRowIdx - 1
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = ReceiptTableTailRowIdx
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  End If
  
  If (SelectTopRow < ReceiptTableHeadRowIdx) Or _
     (SelectTopRow > SelectBottomRow) Or _
     (SelectBottomRow > ReceiptTableTailRowIdx) Then
    Exit Sub
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ' Do we want to delete the top line?
  If (SelectTopRow = ReceiptTableHeadRowIdx) Then
    SelectTopRow = SelectTopRow + 1
    If SelectBottomRow = ReceiptTableTailRowIdx Then
      RowIdx = TemplateRow.Row
    Else
      RowIdx = SelectBottomRow + 1
      SelectBottomRow = SelectBottomRow + 1
    End If
    TemplateRow.Rows.Hidden = False
    RangeDef = ColumnIdxToTitle(c_FirstDataEntryColumnIdx) & CStr(RowIdx) & ":" & _
                 ColumnIdxToTitle(WSheet.UsedRange.Columns.Count) & CStr(RowIdx)
    WSheet.Range(RangeDef).Copy _
                 WSheet.Cells(ReceiptTableHeadRowIdx, c_FirstDataEntryColumnIdx)
    TemplateRow.Rows.Hidden = True
  End If
  
  If (SelectTopRow <= SelectBottomRow) Then
    WSheet.Range(CStr(SelectTopRow) & ":" & CStr(SelectBottomRow)).Delete (xlShiftUp)
  End If
  
  If SelectTopRow < WSheet.Range(c_ReceiptPasteGuardRow).Row Then
    Set IndexCell = WSheet.Cells(SelectTopRow, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (SelectTopRow - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  
  ' If the cursor was placed right above a hidden line, and we delete
  ' a line above the cursor, the cursor will move to the hidden line.
  ' We shall resolve this problem by moving the cursor.
  If (Selection.Parent Is WSheet) Then
    Do While Rows(Selection.Row).Hidden
      Cells(Selection.Row - 1, Selection.Column).Select
    Loop
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' StdCost_DeleteReceiptLine()
'

' **********************************************************************
' *                                                                    *
' *                     StdCost_CollectTopicsTest()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_CollectTopicsTest(WSheet As Worksheet)
  Dim Topic() As String
  Dim Formula() As String
  Dim TopicCnt As Integer
  Dim I As Integer
  
  StdCost_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=False
  Debug.Print "TopicCnt = " & CStr(TopicCnt)
  For I = 1 To TopicCnt
    Debug.Print "Topic[" & CStr(I) & "] = " & Topic(I) & " -> >>" & Formula(I) & "<<"
  Next I
End Sub ' StdCost_CollectTopicsTest()
'

' **********************************************************************
' *                                                                    *
' *                       StdCost_CollectTopics()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_CollectTopics(WSheet As Worksheet, GroupByTaskCode As Boolean, _
                          ByRef Topic() As String, ByRef Formula() As String, _
                          ByRef TopicCnt As Integer)
  Dim RowIdx As Integer
  Dim TopRow As Integer
  Dim BottomRow As Integer
  Dim RowUsed As Boolean
  Dim ColumnIdx As Integer
  Dim SubTopic As String
  Dim StdSubTopic As String
  Dim TopicIdx As Integer
  Dim TopicFound As Boolean
  Dim UseUserTopic As Boolean
  Dim TopicColumnIdx As Integer
  
  ReDim Topic(1 To 20)
  ReDim Formula(1 To 20)
  
  If (GroupByTaskCode) Then
    TopicColumnIdx = c_TaskCodeColumnIdx
    StdSubTopic = "<ohne Code>"
  Else
    TopicColumnIdx = c_SubProjectColumnIdx
    StdSubTopic = WSheet.Range(gc_StdCost_ApplicationSubject).Value
  End If
  StdSubTopic = Trim(StdSubTopic)
  TopicCnt = 0
  UseUserTopic = False
  
  ' TopRow = WSheet.UsedRange.Row
  ' BottomRow = TopRow + WSheet.UsedRange.Rows.Count - 1
  TopRow = WSheet.Range(c_ReceiptRangeHeadRow).Row
  BottomRow = WSheet.Range(c_ReceiptTemplateRow).Row - 2
  For RowIdx = TopRow To BottomRow
    RowUsed = False
    For ColumnIdx = c_FirstDataEntryColumnIdx To c_LastDataEntryColumnIdx
      If (Not IsEmptyString(WSheet.Cells(RowIdx, ColumnIdx).Value)) Then
        RowUsed = True
        Exit For
      End If
    Next ColumnIdx
    If (RowUsed) Then
      SubTopic = WSheet.Cells(RowIdx, TopicColumnIdx).Value
      SubTopic = Trim(SubTopic)
      If (SubTopic = "") Then
        SubTopic = StdSubTopic
      Else
        UseUserTopic = True
      End If
      
      TopicFound = False
      For TopicIdx = 1 To TopicCnt
        If LCase(Topic(TopicIdx)) = LCase(SubTopic) Then
          ' Debug.Print ("Reused Topic " & SubTopic)
          Formula(TopicIdx) = Formula(TopicIdx) & "+" & gc_StdCost_SumColumnMarker & CStr(RowIdx)
          TopicFound = True
          Exit For
        End If
      Next TopicIdx
      
      If (Not TopicFound) Then
        ' Debug.Print ("New Topic " & SubTopic)
        TopicCnt = TopicCnt + 1
        If (TopicCnt > UBound(Topic)) Then
          ReDim Preserve Topic(1 To UBound(Topic) + 20)
          ReDim Preserve Formula(1 To UBound(Topic))
        End If
        Topic(TopicCnt) = SubTopic
        Formula(TopicCnt) = "=" & gc_StdCost_SumColumnMarker & CStr(RowIdx)
      End If
    End If
  Next RowIdx
  
  If (TopicCnt = 1) Then
    Formula(1) = "=SUM(" & gc_StdCost_SumColumnMarker & CStr(TopRow) & ":" & _
                           gc_StdCost_SumColumnMarker & CStr(BottomRow) & ")"
  End If
  
  If (Not UseUserTopic) Then
    TopicCnt = 0
  End If
End Sub ' StdCost_CollectTopics()
'

' **********************************************************************
' *                                                                    *
' *                StdCost_SelectViewModeUser_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeUser_OnClick()
  StdCost_SelectViewModeUser WSheet:=ActiveSheet
End Sub ' StdCost_SelectViewModeUser_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               StdCost_SelectViewModeVWKAll_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVWKAll_OnClick()
  StdCost_SelectViewModeVWKAll WSheet:=ActiveSheet
End Sub ' StdCost_SelectViewModeVWKAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *              StdCost_SelectViewModeVWKPrint_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVWKPrint_OnClick()
  StdCost_SelectViewModeVWKPrint WSheet:=ActiveSheet
End Sub ' StdCost_SelectViewModeVWKPrint_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               StdCost_SelectViewModeVOKAll_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVOKAll_OnClick()
  StdCost_SelectViewModeVOKAll WSheet:=ActiveSheet
End Sub ' StdCost_SelectViewModeVOKAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *              StdCost_SelectViewModeVOKPrint_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVOKPrint_OnClick()
  StdCost_SelectViewModeVOKPrint WSheet:=ActiveSheet
End Sub ' StdCost_SelectViewModeVOKPrint_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                    StdCost_SelectViewModeUser()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeUser(Optional WSheet As Worksheet = Nothing)
  UpdateStdCostViewMode VisibleCode:="U", _
          ShowVWKButtons:=True, ShowVOKButtons:=False, _
          WSheet:=WSheet
End Sub ' StdCost_SelectViewModeUser()
'

' **********************************************************************
' *                                                                    *
' *                   StdCost_SelectViewModeVWKAll()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVWKAll(Optional WSheet As Worksheet = Nothing)
  UpdateStdCostViewMode VisibleCode:="B", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' StdCost_SelectViewModeVWKAll()
'

' **********************************************************************
' *                                                                    *
' *                  StdCost_SelectViewModeVWKPrint()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVWKPrint(Optional WSheet As Worksheet = Nothing)
  UpdateStdCostViewMode VisibleCode:="b", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' StdCost_SelectViewModeVWKPrint()
'

' **********************************************************************
' *                                                                    *
' *                   StdCost_SelectViewModeVOKAll()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVOKAll(Optional WSheet As Worksheet = Nothing)
  UpdateStdCostViewMode VisibleCode:="V", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' StdCost_SelectViewModeVOKAll()
'

' **********************************************************************
' *                                                                    *
' *                  StdCost_SelectViewModeVOKPrint()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_SelectViewModeVOKPrint(Optional WSheet As Worksheet = Nothing)
  UpdateStdCostViewMode VisibleCode:="v", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' StdCost_SelectViewModeVOKPrint()
'

' **********************************************************************
' *                                                                    *
' *                       UpdateStdCostViewMode()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateStdCostViewMode(VisibleCode As String, _
                         ShowVWKButtons As Boolean, ShowVOKButtons As Boolean, _
                         WSheet As Worksheet)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ColumnFilter FilterRow:=c_PrintFilterRow, Code:=VisibleCode, UserSheet:=WSheet
  RowFilter FilterColumn:=c_PrintFilterColumn, Code:=VisibleCode, UserSheet:=WSheet
  
  WSheet.Range(c_ReceiptTemplateRow).Rows.Hidden = True
  
  WSheet.Range(c_StdCost_SignatureRange).Rows.Hidden = WorksheetExists(gc_SummaryWorkSheet)
  
  ShowVWKButtons = True  ' WARNING - This Overrides the Sub Parameters!!
  ShowVOKButtons = True
  
  ' WSheet.Shapes(c_Button_SelectModeVWK).Visible = ShowVWKButtons
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = ShowVWKButtons
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = ShowVWKButtons
  
  ' WSheet.Shapes(c_Button_SelectModeVOK).Visible = ShowVOKButtons
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = ShowVOKButtons
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = ShowVOKButtons
  
 ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WSheet:=WSheet

End Sub ' UpdateStdCostViewMode()
'

' **********************************************************************
' *                                                                    *
' *                   StdCost_RemoveMacros_OnClick()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_RemoveMacros_OnClick()
  Dim WSheet As Worksheet
  Set WSheet = ActiveSheet
  CreateNoMacroWBook WBook:=ThisWorkbook, _
                     ApplicantName:=WSheet.Range(c_ApplicantNameCell).Value, _
                     ApplicantID:=WSheet.Range(c_ApplicantIDCell).Value, _
                     ProjectTitle:=WSheet.Range(gc_StdCost_ApplicationSubject).Value, _
                     ProjectNumber:=WSheet.Range(c_ApplicationIDCell).Value
End Sub ' StdCost_RemoveMacros_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                        StdCost_BeforePrint()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_BeforePrint(Optional WSheet As Worksheet = Nothing)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set v_PrintWSheet = WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Shapes(c_Button_SelectModeUser).Visible = False
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = False
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = False
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = False
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = False
  WSheet.Range(c_SelectModeButtonRows).Rows.Hidden = True
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WSheet:=WSheet

End Sub ' StdCost_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                         StdCost_DataValid()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function StdCost_DataValid(WSheet As Worksheet) As Boolean
  Dim ErrorList As String
  Dim Button As Integer
  Dim SupportPeriodStart As Date
  Dim SupportPeriodEnd As Date
  
  ErrorList = ""
  If IsEmptyString(WSheet.Range(c_ApplicantIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Betriebs-/Klientennummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicantNameCell).Value) Then
    ErrorList = ErrorList & "    .) Der Name des/der F|fffd|rderungswerber/in fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicationIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Antragsnummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_StdCost_ApplicationSubject).Value) Then
    ErrorList = ErrorList & "    .) Die Bezeichnung des F|fffd|rdergegenstandes fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodStartCell).Value) Then
    ErrorList = ErrorList & "    .) Der Beginn des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodStart = WSheet.Range(c_SupportPeriodStartCell).Value
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodEndCell).Value) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodEnd = WSheet.Range(c_SupportPeriodEndCell).Value
  End If
  
  If (SupportPeriodStart > 0) And (SupportPeriodEnd > 0) And (SupportPeriodStart >= SupportPeriodEnd) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums liegt vor dem Anfang" & vbCr
  End If
  
  If (ErrorList <> "") Then
    Button = MsgBox(Prompt:="Der Zahlungsantrag ist nicht korrekt ausgef|fffd|llt:" & vbCr & _
           ErrorList & _
           vbCr & "Wollen Sie trotzdem drucken?", _
           Buttons:=vbYesNo Or vbDefaultButton2 Or vbExclamation, _
           Title:="Fehler im Zahlungsantrag")
    StdCost_DataValid = (Button = vbYes)
  Else
    StdCost_DataValid = True
  End If
End Function ' StdCost_DataValid()
'

' **********************************************************************
' *                                                                    *
' *                        StdCost_AfterPrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_AfterPrint(Optional WSheet As Worksheet = Nothing)
  
  If (v_PrintWSheet Is Nothing) Then
    If (WSheet Is Nothing) Then
      Set WSheet = ActiveSheet
    End If
  Else
    Set WSheet = v_PrintWSheet
  End If
  Set v_PrintWSheet = Nothing
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Shapes(c_Button_SelectModeUser).Visible = True
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = True
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = True
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = True
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = True
  WSheet.Range(c_SelectModeButtonRows).Rows.Hidden = False
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WSheet:=WSheet
End Sub ' StdCost_AfterPrint()
'

' **********************************************************************
' *                                                                    *
' *               StdCost_RadioButton_TaxDeduct_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub StdCost_RadioButton_TaxDeduct_OnClick()
  Dim WSheet As Worksheet
  
  Set WSheet = ActiveSheet
  UpdateStdCostTaxDeductMode _
     TaxDeductActive:=(WSheet.Range(c_TaxDeductCell).Value = "Ja"), _
     UserSheet:=WSheet
  
End Sub ' StdCost_RadioButton_TaxDeduct_OnClick()
'

' **********************************************************************
' *                                                                    *
' *             StdCost_CheckBox_TaxDeductEnable_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are two checkboxes on the Master sheet that indicate if the
' supplicant is permit to perform VAT deduction (i.e. if costs are given
' with or without VAT). This is just a note to the users to take care what
' the are doing and is never included in the computation anywhere...
'
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_StdCost_CheckBox_TaxDeductEnable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOff
    ' WSheet.Range(c_TaxDeductCell).Value = "Ja"
  Else
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn
    ' WSheet.Range(c_TaxDeductCell).Value = "Nein"
  End If

  PopProtection WSheet:=WSheet
  
  UpdateStdCostTaxDeductMode _
     TaxDeductActive:=(CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn), _
     UserSheet:=WSheet
End Sub ' StdCost_CheckBox_TaxDeductEnable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *             StdCost_CheckBox_TaxDeductDisable_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' See: StdCost_CheckBox_TaxDeductEnable_OnClick()
#If False Then
Sub Unused_StdCost_CheckBox_TaxDeductDisable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOff
    ' WSheet.Range(c_TaxDeductCell).Value = "Nein"
  Else
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn
    ' WSheet.Range(c_TaxDeductCell).Value = "Ja"
  End If
  
  PopProtection WSheet:=WSheet
  
  UpdateStdCostTaxDeductMode _
     TaxDeductActive:=(CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn), _
     UserSheet:=WSheet
End Sub ' StdCost_CheckBox_TaxDeductDisable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                    UpdateStdCostTaxDeductMode()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateStdCostTaxDeductMode(TaxDeductActive As Boolean, UserSheet As Worksheet)
  ' No Action Required!
End Sub ' UpdateStdCostTaxDeductMode()
'
' **********************************************************************
' *                         Standardkosten.bas                         *
' **********************************************************************


Attribute VB_Name = "SubmitNoMacro"
' **********************************************************************
' *                                                                    *
' *                         SubmitNoMacro.bas                          *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' Excel Macros k|fffd|nnen b|fffd|sartigen Code enthalten. Daher ist es unerw|fffd|nscht,
' dass Tabellenbl|fffd|tter, die beim F|fffd|rderwerber im Einsatz sind und bei
' denen die M|fffd|glichkeit besteht, dass der F|fffd|rderwerber den Schutz des
' VBA Projekts entfernt hat (Tools dazu gibt es im Internet in H|fffd|lle und
' F|fffd|lle) und danach die Macros b|fffd|sartig ver|fffd|ndert hat, wieder in die AMA
' gelangen und dort ggf. die PCs der AMA-Mitarbeiter verseuchen. Als
' L|fffd|sung dieses Problems wurde definiert, dass die F|fffd|rderwerber nur Excel-
' Sheets ohne jedes Macro (egal ob gut- oder b|fffd|sartig) an die AMA schicken
' d|fffd|rfen. Aus dem bestehenden Excel Sheet m|fffd|ssen daher automatisch alle
' Macros entfernt werden.
' Praktische Umsetzung: Es wird eine neue Arbeitsmappe erstellt, die alle
' Daten/Formeln aus der vollst|fffd|ndigen Arbeitsmappe enth|fffd|lt, bei der aber
' keine Macros kopiert werden. Um Verwirrungen |fffd|ber nicht funktionierende
' Buttons zu vermeiden werden auch alle Buttons entfernt

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.405   Roland Lieger    14. 4.2016    Created (derived from UnbareSachleistungen)
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

' The code from SubmitNoMacro uses conditional compiliation to work
' on different types of workbooks. The actual type of the current
' workbook is stored here (automatically generated during SplitWorkbook)
' We could set the type in the project settings too, but people might
' play around with it there, so it is safer here...
#Const WBookType = "Full"

#Const WBookSupportsPaymAppl = True
#Const WBookSupportsSummary = True
#Const WBookSupportsMaterial = True
#Const WBookSupportsInvest = True
#Const WBookSupportsInKind = True
#Const WBookSupportsStdCost = True
#Const WBookSupportsLabour = True
#Const WBookSupportsNotes = True

Const gc_PaymAppl_TemplateSheet As String = "TEMPLATE Zahlungsantrag"
Const gc_PaymAppl_WorkSheet As String = "Zahlungsantrag LEW14-20"

' **********************************************************************
' *                                                                    *
' *                       RemoveMacros_OnClick()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub RemoveMacros_OnClick()
  CreateNoMacroWBook WBook:=ThisWorkbook
End Sub ' RemoveMacros_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                        CreateNoMacroWBook()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CreateNoMacroWBook(Optional WBook As Workbook = Nothing, _
                       Optional ApplicantName As String = "", _
                       Optional ApplicantID As String = "", _
                       Optional ProjectTitle As String = "", _
                       Optional ProjectNumber As String = "")
  Dim NewWBook As Workbook
  Dim FNameBase As String
  Dim FNameExt As String
  Dim PaymApplicantID As String
  Dim PaymentID As String
  Dim OutFNameCore As String
  Dim OutFNameIdx As Integer
  Dim OutFName As String
  Dim PrevEnableEvents As Boolean
  Dim Out As Variant
  Dim ApplVersion As Double
  Dim FilterIdx As Integer
  Dim FileFormat As Integer
  Dim Property As DocumentProperty
  Dim I As Integer
  
  If (WBook Is Nothing) Then
    Set WBook = ActiveWorkbook
  End If
  
  ApplVersion = Val(Application.Version)
  
  FNameBase = WBook.Name
  FNameExt = FNameExtension(FNameBase)
  If FNameExt = "" Then
    FNameExt = ".xls"
  Else
    FNameExt = "." & FNameExt
    FNameBase = Left(FNameBase, Len(FNameBase) - Len(FNameExt))
  End If
  FNameBase = Left(FNameBase, 32)
  
  If (FNameExt = ".xlsm") Then
    FNameExt = ".xlsx"
  End If
  
  ' Note: Use XLSX Files whenever possible because they are
  ' a) smaller and b) automatically do not contain macros!
  If (ApplVersion >= 12#) Then
    FNameExt = ".xlsx"
  End If
  
  If (ApplVersion < 12#) Or (FNameExt <> ".xlsx") Then
    FNameExt = ".xls"
  End If
  
  If FNameExt = ".xlsx" Then
    FilterIdx = 2
  Else
    FilterIdx = 1
  End If
  
  OutFNameIdx = 0
  OutFNameCore = WBook.Path & "\" & FNameBase & " Abgabe " & Format(Now, "YYMMDD-hhmm")
  
#If WBookSupportsPaymAppl Then
  If (WorksheetExists(gc_PaymAppl_WorkSheet)) Then
    PaymApplicantID = WBook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_ApplicantIDCell).Value
    PaymApplicantID = MakeValidFName(PaymApplicantID)
    
    If (WBook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_PartialPaymentSelect).Value = 1) Then
      PaymentID = "TZ" & WBook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_PartialPaymentID).Value
    Else
      PaymentID = "Endz"
    End If
    PaymentID = MakeValidFName(PaymentID)
    
    If (PaymApplicantID <> "") Then
      OutFNameCore = WBook.Path & "\Abgabe_ZA_" & Left(PaymentID, 6) & "_" & Left(PaymApplicantID, 16)
    End If
  Else
#End If
  If (ApplicantID <> "") Then
    PaymApplicantID = MakeValidFName(ApplicantID)
    If (PaymApplicantID <> "") Then
      OutFNameCore = WBook.Path & "\Abgabe_" & Left(PaymApplicantID, 16)
    End If
  End If
#If WBookSupportsPaymAppl Then
  End If
#End If

  Do
    OutFNameIdx = OutFNameIdx + 1
    If (OutFNameIdx = 1) Then
      OutFName = OutFNameCore & FNameExt
    Else
      OutFName = OutFNameCore & " (" & CStr(OutFNameIdx) & ")" & FNameExt
    End If
    If (Dir(OutFName) = "") Or (OutFNameIdx = 100) Then Exit Do
  Loop
  
  ' Various Values for Application.Version
  '  Excel 95   : 7.0
  '  Excel 97   : 8.0
  '  Excel 2000 : 9.0
  '  Excel 2002 : 10.0
  '  Excel 2003 : 11.0
  '  Excel 2007 : 12.0 - First Version with native support for *.xlsx
  '  Excel 2010 : 14.0
  '  Excel 2013 : 15.0
  '  Excel 2016 : 16.0
  
  ' Out = Application.GetSaveAsFilename(InitialFileName:=OutFName, _
               FileFilter:="Excel 97-2003 Arbeitsmappe (*.xls), *.xls, " & _
                           "Excel Arbeitsmappe (*.xlsx), *.xlsx, " & _
                           "Excel Arbeitsmappe mit Makros (*.xlsm), *.xlsm", _
               FilterIndex:=1, _
               Title:="Datei f|fffd|r die Abgabe speichern unter")
  If (ApplVersion >= 12#) Then
    Out = Application.GetSaveAsFilename(InitialFileName:=OutFName, _
               FileFilter:="Excel 97-2003 Arbeitsmappe (*.xls), *.xls, " & _
                           "Excel Arbeitsmappe (*.xlsx), *.xlsx", _
               FilterIndex:=FilterIdx, _
               Title:="Datei f|fffd|r die Abgabe speichern unter")
  Else
    Out = Application.GetSaveAsFilename(InitialFileName:=OutFName, _
                 FileFilter:="Excel Arbeitsmappe (*.xls), *.xls", _
                 FilterIndex:=1, _
                 Title:="Datei f|fffd|r die Abgabe speichern unter")
  End If
  If (TypeName(Out) <> "String") Then
    Exit Sub
  End If
  OutFName = CStr(Out)
  
  PrevEnableEvents = Application.EnableEvents
  Application.EnableEvents = False

  WBook.Sheets.Copy ' Create a new workbook without macros
  ' The copy is now the active workbook
  Set NewWBook = ActiveWorkbook
  
  NewWBook.Colors = WBook.Colors

  ' On Error Resume Next
  ' For Each Property In WBook.BuiltinDocumentProperties
  '   Debug.Print "BuiltIn: " & Property.Name & " --> " & Property.Value
  ' Next Property
  ' On Error GoTo 0
  
  On Error Resume Next
  For I = 1 To WBook.BuiltinDocumentProperties.Count
    ' Debug.Print "BuiltIn: " & CStr(I) & ":" & _
            WBook.BuiltinDocumentProperties(I).Name & " --> " & _
            WBook.BuiltinDocumentProperties(I).Value
    NewWBook.BuiltinDocumentProperties(I).Value = WBook.BuiltinDocumentProperties(I).Value
  Next I
  On Error GoTo 0
  
  For Each Property In WBook.CustomDocumentProperties
    ' Debug.Print "Custom: " & Property.Name & " --> " & Property.Value
    NewWBook.CustomDocumentProperties.Add Name:=Property.Name, Type:=msoPropertyTypeString, _
            Value:=Property.Value, LinkToContent:=False
  Next Property
  
  CleanWBook WBook:=NewWBook, _
             ApplicantName:=ApplicantName, ApplicantID:=ApplicantID, _
             ProjectTitle:=ProjectTitle, ProjectNumber:=ProjectNumber, _
             DoDeleteDocModules:=(FNameExtension(OutFName) <> "xlsx")
  
  ProtectAllWBookSheets WBook:=NewWBook
  
  If FNameExtension(OutFName) = "xlsx" Then
    FileFormat = 51 ' xlWorkbookDefault = xlOpenXMLWorkbook
  Else
    ' FileFormat = WBook.FileFormat
    ' FileFormat = -4143 ' xlWorkbookNormal
    ' FileFormat = 39 ' xlExcel7
    FileFormat = 56 ' xlExcel8 --> Excel 97-2003
  End If
  
  If (ApplVersion >= 12#) Then
    Application.DisplayAlerts = False
    NewWBook.CheckCompatibility = False
    
    NewWBook.SaveAs Filename:=OutFName, FileFormat:=FileFormat
  
    NewWBook.CheckCompatibility = True
    Application.DisplayAlerts = True
  Else
    NewWBook.SaveAs Filename:=OutFName
  End If
  
  NewWBook.Close
  Application.EnableEvents = PrevEnableEvents

End Sub ' CreateNoMacroWBook()
'

' **********************************************************************
' *                                                                    *
' *                          MakeValidFName()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function MakeValidFName(FName As String) As String
  Dim OutFName As String
  Dim I As Integer
  Dim C As String
  Dim PrevC As String
  Dim Pos As Integer
  Const AccChars = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|<>"
  Const RegChars = "SZszYAAAAAACEEEEIIIIDNOOOOOUUUUYaaaaaaceeeeiiiidnooooouuuuyy[]"
  ' Const AccChars = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ' Const RegChars = "aouAOUs"
  
  FName = Trim(FName)
  
  PrevC = "*"
  For I = 1 To Len(FName)
    C = Mid(FName, I, 1)
    If (C = vbCr) Or (C = vbLf) Or (C = vbTab) Then
      C = " "
    Else
      Pos = InStr(1, AccChars, C)
      If (Pos > 0) Then
        C = Mid(RegChars, Pos, 1)
      End If
    End If
    
    ' Slashes are separator characters - Replace by "-"
    If (C = "/") Or (C = "\") Or (C = ":") Then
      C = "-"
    End If
    
    If ((C >= "A") And (C <= "Z")) Or _
       ((C >= "a") And (C <= "z")) Or _
       ((C >= "0") And (C <= "9")) Or _
       (InStr(1, " !#$%&()=,.-+[]{}@", C) > 0) Then
      ' C is a valid character for file/path names - No action required...
      ' Note: Do we really want to allow '.'? How about '|fffd|' or '''?
      ' Forbidden characters are: < > : " / \ | ? *
      '    (see: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx)
    Else
      C = " "
    End If
    
    If (PrevC = " ") And (C <> " ") Then
      OutFName = OutFName & "_"
    End If
    
    If (C <> " ") Then
      OutFName = OutFName & C
    End If
    
    PrevC = C
  Next I
  
  MakeValidFName = OutFName
End Function ' MakeValidFName()
'

' **********************************************************************
' *                                                                    *
' *                          FNameExtension()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function FNameExtension(FName As String)
  Dim Pos As Integer
  Dim PrevPos As Integer
  
  PrevPos = 0
  Pos = InStr(PrevPos + 1, FName, ".")
  Do While (Pos > 0)
    PrevPos = Pos
    Pos = InStr(PrevPos + 1, FName, ".")
  Loop
  If (PrevPos > 0) Then
    FNameExtension = LCase(Right(FName, Len(FName) - PrevPos))
  Else
    FNameExtension = ""
  End If
End Function ' FNameExtension()
'

' **********************************************************************
' *                                                                    *
' *                            CleanWBook()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CleanWBook(WBook As Workbook, ApplicantName As String, ApplicantID As String, _
                                  ProjectTitle As String, ProjectNumber As String, _
                                  Optional DoDeleteDocModules As Boolean = True)
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  DeleteTemplateWSheets WBook:=WBook
  DeleteUnusedPictures WBook:=WBook
  
  UnprotectAllWBookSheets WBook:=WBook
  
  SubmitSheets WBook:=WBook
  
  DeleteButtons WBook:=WBook
  LockCheckboxes WBook:=WBook
  LockRadioButtons WBook:=WBook
  DeleteDocModules WBook:=WBook, DoDeleteDocModules:=DoDeleteDocModules
  
  On Error Resume Next
  WBook.Worksheets(gc_Stm_CoreDataWorkSheet).Visible = False
  On Error GoTo 0
  
  ScrollHome WBook:=WBook
  InsertSubmitProperties WBook:=WBook, ApplicantName:=ApplicantName, ApplicantID:=ApplicantID, _
                                       ProjectTitle:=ProjectTitle, ProjectNumber:=ProjectNumber
  
  ProtectAllWBookSheets WBook:=WBook
  PopProtection WBook:=WBook
End Sub ' CleanWBook()
'

' **********************************************************************
' *                                                                    *
' *                           SubmitSheets()                           *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub SubmitSheets(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim WSheetObj As Object
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  For Each WSheet In WBook.Worksheets
#If False Then
    ' It would be tempting and nicely object-oriented to have each worksheet
    ' prepare itself for submission. However trying this causes excel to
    ' execute the code from the target workbook, that does no longer contain
    ' all the required macros and execution fails.
    ' We have to run the setup code using the code in the current workbook!
    Set WSheetObj = WSheet
    On Error Resume Next
    WSheetObj.Worksheet_PrepareNoMacro WSheet:=WSheetObj
    On Error GoTo 0
#Else
  #If WBookSupportsPaymAppl Then
    If (InStr(WSheet.Name, gc_SummaryWorkSheet) = 1) Then
      Summary_ModeSelect_VOK WSheet:=WSheet
      Summary_BeforePrint WSheet:=WSheet
    End If
  #End If
  
  #If WBookSupportsMaterial Or WBookSupportsInvest Then
    If (InStr(WSheet.Name, gc_InvMat_InvestUserSheet) = 1) Or _
       (InStr(WSheet.Name, gc_InvMat_MaterialUserSheet) = 1) Or _
       (InStr(WSheet.Name, gc_InvMat_InvestUserSheetAbbr) = 1) Or _
       (InStr(WSheet.Name, gc_InvMat_MaterialUserSheetAbbr) = 1) Then
      InvMat_SelectViewModeVOKAll WSheet:=WSheet
      InvMat_BeforePrint WSheet:=WSheet
    End If
  #End If
    
  #If WBookSupportsInKind Then
    If (InStr(WSheet.Name, gc_InKind_UserSheet) = 1) Or _
       (InStr(WSheet.Name, gc_InKind_UserSheetAbbr) = 1) Then
      InKind_SelectViewModeVOKAll WSheet:=WSheet
      InKind_BeforePrint WSheet:=WSheet
    End If
  #End If
    
  #If WBookSupportsStdCost Then
    If (InStr(WSheet.Name, gc_StdCost_UserSheet) = 1) Or _
       (InStr(WSheet.Name, gc_StdCost_UserSheetAbbr) = 1) Then
      StdCost_SelectViewModeVOKAll WSheet:=WSheet
      StdCost_BeforePrint WSheet:=WSheet
    End If
  #End If
    
  #If WBookSupportsLabour Then
    If (InStr(WSheet.Name, gc_LabourCostWorkSheet) = 1) Or _
       (InStr(WSheet.Name, gc_LabourCostWorkSheet) = 1) Then
     ' LabourCost_SelectViewModeVOKAll WSheet:=WSheet
     ' LabourCost_BeforePrint WSheet:=WSheet
    End If
  #End If
#End If

  Next WSheet
End Sub
'

' **********************************************************************
' *                                                                    *
' *                       DeleteTemplateWSheets()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DeleteTemplateWSheets(WBook As Workbook)
  Dim WSheet As Worksheet
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  For Each WSheet In WBook.Worksheets
    If InStr(WSheet.Name, "TEMPLATE ") = 1 Then
      ' Debug.Print "Deleting Worksheet: " & WSheet.Name
      WSheet.Delete
    ElseIf InStr(WSheet.Name, "TABLE ") = 1 Then
      ' Debug.Print "Hiding Worksheet: " & WSheet.Name
      WSheet.Visible = False
    End If
  Next WSheet
End Sub ' DeleteTemplateWSheets()
'

' **********************************************************************
' *                                                                    *
' *                       DeleteUnusedPictures()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DeleteUnusedPictures(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim XShape As Shape
  Dim WSheetUnlockDone As Boolean
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  For Each WSheet In WBook.Worksheets
    WSheetUnlockDone = False
    For Each XShape In WSheet.Shapes
      If ((XShape.Type = msoPicture) And Not XShape.Visible) Then
        If (Not WSheetUnlockDone) Then
          WSheet.Activate
          PushProtection WSheet:=WSheet
          RemoveProtection WSheet:=WSheet
          WSheetUnlockDone = True
        End If
        ' Debug.Print "Deleting Picture: " & WSheet.Name & "!" & XShape.Name
        XShape.Delete
      End If
    Next XShape
    If WSheetUnlockDone Then
      PopProtection WSheet:=WSheet
    End If
  Next WSheet
End Sub ' DeleteUnusedPictures()
'

' **********************************************************************
' *                                                                    *
' *                           DeleteButtons()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DeleteButtons(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim XShape As Shape
  Dim WSheetUnlockDone As Boolean
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  For Each WSheet In WBook.Worksheets
    WSheetUnlockDone = False
    For Each XShape In WSheet.Shapes
      If (XShape.Type = msoFormControl) Then
        If (XShape.FormControlType = xlButtonControl) Then
          If (Not WSheetUnlockDone) Then
            WSheet.Activate
            PushProtection WSheet:=WSheet
            RemoveProtection WSheet:=WSheet
            WSheetUnlockDone = True
          End If
          ' Debug.Print "Deleting Button: " & WSheet.Name & "!" & XShape.Name
          XShape.Delete
        End If
      End If
    Next XShape
    If WSheetUnlockDone Then
      PopProtection WSheet:=WSheet
    End If
  Next WSheet
End Sub ' DeleteButtons()
'

' **********************************************************************
' *                                                                    *
' *                          LockCheckboxes()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub LockCheckboxes(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim XShape As Shape
  Dim WSheetUnlockDone As Boolean
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  For Each WSheet In WBook.Worksheets
    WSheetUnlockDone = False
    For Each XShape In WSheet.Shapes
      If (XShape.Type = msoFormControl) Then
        If (XShape.FormControlType = xlCheckBox) Then
          If (Not WSheetUnlockDone) Then
            WSheet.Activate
            PushProtection WSheet:=WSheet
            RemoveProtection WSheet:=WSheet
            WSheetUnlockDone = True
          End If
          XShape.Locked = True
          XShape.OnAction = ""
          ' Debug.Print "Locking Checkbox: " & WSheet.Name & "!" & XShape.Name
        End If
      End If
    Next XShape
    If WSheetUnlockDone Then
      PopProtection WSheet:=WSheet
    End If
  Next WSheet
End Sub ' LockCheckboxes()
'

' **********************************************************************
' *                                                                    *
' *                         LockRadioButtons()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub LockRadioButtons(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim XShape As Shape
  Dim WSheetUnlockDone As Boolean
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  For Each WSheet In WBook.Worksheets
    WSheetUnlockDone = False
    For Each XShape In WSheet.Shapes
      If (XShape.Type = msoFormControl) Then
        If (XShape.FormControlType = xlOptionButton) Then
          If (Not WSheetUnlockDone) Then
            WSheet.Activate
            PushProtection WSheet:=WSheet
            RemoveProtection WSheet:=WSheet
            WSheetUnlockDone = True
          End If
          XShape.Locked = True
          XShape.OnAction = ""
          ' Debug.Print "Locking RadioButton: " & WSheet.Name & "!" & XShape.Name
        End If
      End If
    Next XShape
    If WSheetUnlockDone Then
      PopProtection WSheet:=WSheet
    End If
  Next WSheet
End Sub ' LockRadioButtons()
'

' **********************************************************************
' *                                                                    *
' *                         LockDropDownMenus()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub LockDropDownMenus(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim XShape As Shape
  Dim WSheetUnlockDone As Boolean
  
  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  WSheetUnlockDone = False
  For Each WSheet In WBook.Worksheets
    For Each XShape In WSheet.Shapes
      If (XShape.Type = msoFormControl) Then
        If (XShape.FormControlType = xlDropDown) Then
          If (Not WSheetUnlockDone) Then
            PushProtection WSheet:=WSheet
            RemoveProtection WSheet:=WSheet
            WSheetUnlockDone = True
          End If
          XShape.Locked = True
          ' Debug.Print "Locking DropDown: " & WSheet.Name & "!" & XShape.Name
        End If
      End If
    Next XShape
    If WSheetUnlockDone Then
      PopProtection WSheet:=WSheet
    End If
  Next WSheet
End Sub ' LockDropDownMenus()
'

' **********************************************************************
' *                                                                    *
' *                         DeleteDocModules()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DeleteDocModules(WBook As Workbook, Optional Protect As String = "", _
                             Optional DoDeleteDocModules As Boolean = True)
  Dim WSheet As Worksheet
  ' Advanced Types require that "Microsoft Visual Basic for Applications
  ' Extensibity 5.3" is selected for the project (see Extras/Verweise).
  ' This is not necessarily true for the partial workbooks, so we shall
  ' use 'simple' objects here...
  Dim VBProj As Object    ' VBProject
  Dim Component As Object ' VBComponent
  Dim ComponentType As Integer
  Dim DocModule As Object ' CodeModule

  If (WBook Is ThisWorkbook) Or (WBook Is Nothing) Then
    Exit Sub
  End If
  
  ' Note: It is quite possible that the Visual Basic application is not
  ' permitted to access/modify/delete the code of another workbook (even
  ' so it just created it itself. Actually the VBA application is not
  ' even permitted to access its own code (in standard Excel security
  ' configuration).
  ' This can 'easily' be changed by using chasing the user through just
  ' a few steps:
  ' .) In the spreadsheet window select the ribbon-tab "Datei" ("File")
  ' .) Select "Optionen" ("Options")
  ' .) In the new window "Optionen" select the tab "Sicherheitscenter"
  '    in the left hand panel ("Trust Center")
  ' .) In the right hand panel, look for the section "Microsoft Excel-
  '    Sicherheitscenter" and click on the button "Einstellungen f|fffd|r das
  '    Sicherheitscenter..." ("Trust Center Settings")
  ' .) In the new window "Sicherheitscenter" select the tab "Einstellungen
  '    f|fffd|r Makros" in the left hand panel ("Macro Settings")
  ' .) And voil|fffd|, in the right hand panel there will be a section "Entwickler-
  '    makroeinstellungen" that contains a checkbox "Zugriff auf das VBA-
  '    Projektobjektmodell vertrauen", ("Trust access to the VBA project
  '    object model") that we can simply check and with a few presses to
  '    "Ok" buttons we have successfully changed the option.
  ' Or if we are using Excel 2003 we shall use the following easy steps
  ' .) Select "Extra"/"Optionen" from the menubar of the Excel Spreadsheet
  '    window (NOT the VBA editor window).
  ' .) In the "Optionen" window, select the "Sicherheit" tab
  ' .) In the section "Makrosicherheit" click on the button "Makrosicherheit..."
  ' .) In the "Sicherheit" window, select the "Vertrauensw|fffd|rdige Quellen" tab
  ' .) Just check the checkbox "Zugriff auf Visual Basic Projekt vertrauen"
  '
  ' Since we consider these few, simple steps to be too difficult for the
  ' average user and they can unfortunatly not be automated by VBA code,
  ' we shall be prepared for the following code to fail.
  '
  ' The way to disable the security check is also described in:
  '   https://support.microsoft.com/en-us/kb/282830
  '
  ' An interesting but tiresome workaround for this problem is described in:
  '   https://blogs.msdn.microsoft.com/cristib/2012/02/29/vba-how-to-programmatically-enable-access-to-the-vba-object-model-using-macros/
  '
  ' If things work out, we shall manually delete all code and be done. If
  ' things fail, we can still try to safe our worksheet as *.xlsx", which
  ' automatically deletes all macros for us. If we are saving the file as
  ' "*.xls", this automatic macro removal will not work. In this situation
  ' the macros in the individual sheets will remain present in the saved
  ' file ;( - This will not lead to immediate trouble, but when the file
  ' is opened the next time, and the macros in the sheets try to call code
  ' that was stored in the code modules (that are no longer there), there
  ' will be an error!) - We might need to detect this situation an fix it
  ' be creating new copies of all worksheets.
  If (DoDeleteDocModules) Then
    On Error GoTo SkipDeleteDocModule
     ' The following line will fail if security restrictions are too strict
    Set VBProj = WBook.VBProject
    
    For Each Component In VBProj.VBComponents
      ComponentType = Component.Type
      ' Possible Component Types:
      '   1 .. Standard Module (vbext_ct_StdModule)
      '   2 .. Class Module (vbext_ct_ClassModule)
      '   3 .. Microsoft User Form (vbext_ct_MSForm)
      '  11 .. ActiveX Design?? (vbext_ct_ActiveXDesigner)
      ' 100 .. Document Module (vbext_ct_Document)
      If (ComponentType = 100) And (Component.Name <> Protect) Then
        ' set WSheet:=...
        ' PushProtection WSheet:=WSheet
        ' RemoveProtection WSheet:=WSheet
        Debug.Print "Deleting DocModule: " & Component.Name
        Set DocModule = Component.CodeModule
        DocModule.DeleteLines 1, DocModule.CountOfLines
        ' PopProtection WSheet:=WSheet
      End If
    Next Component
    On Error GoTo 0
  End If
  Exit Sub

SkipDeleteDocModule:
  On Error GoTo 0
  Debug.Print "Failed to Access/Delete DocModules..."
  
  ' Note: We could display an error message here, but why should we do so?
  ' What should it say? Explaining the method to disable the securiry check
  ' of Excel is too difficult for the average user, so we would just sow
  ' confusion. Thus we shall remain silent here...
  ' Instead we shall simply create a new worksheet for each existing
  ' worksheet and copy the contents of all cells, but not the VBA code
  ' to the new worksheets before deleting the old worksheets. Thus we
  ' have, with lots of extra effort, also 'deleted' the VBA code.
  CopyAllSheets WBook:=WBook
End Sub ' DeleteDocModules()
'

' **********************************************************************
' *                                                                    *
' *                            CleanNames()                            *
' *                                                                    *
' **********************************************************************
Sub CleanNames(Optional WBook As Workbook = Nothing)
  Dim XName As Name
  Dim NameName() As String
  Dim NameRefersTo() As String
  Dim NameCnt As Integer
  Dim NameIdx As Integer
  Dim InsertPos As Integer
  Dim NameWSheet As String
  Dim NameCoreName As String
  Dim XNameName As String
  Dim RefersToWSheet As String
  Dim RefersToCells As String
  Dim XNameRefersTo As String
  Dim SplitPos As Integer
  Dim Dirty As Boolean
  
  If WBook Is Nothing Then
    Set WBook = ActiveWorkbook
  End If
  
  For Each XName In WBook.Names
    If ((XName.RefersTo = "=#REF!#REF!") Or _
        (InStr(1, XName.RefersTo, "#REF!") > 0)) Then
      XName.Delete
    End If
  Next XName
  
  Dirty = False
  NameCnt = WBook.Names.Count
  ReDim NameName(0 To NameCnt)
  ReDim NameRefersTo(0 To NameCnt)
  
  For NameIdx = 1 To NameCnt
    Set XName = WBook.Names(NameIdx)
    XNameName = XName.Name
    XNameRefersTo = XName.RefersTo
    
    SplitPos = InStr(1, XNameName, "!")
    If (SplitPos = 0) Then
      SplitPos = InStr(1, XNameRefersTo, "!")
      If (SplitPos > 0) Then
        XNameName = Mid(XNameRefersTo, 2, SplitPos - 1) & XNameName
        Dirty = True
      End If
    End If
    
    InsertPos = NameIdx
    While (InsertPos > 1) And (XNameName < NameName(InsertPos - 1))
      NameName(InsertPos) = NameName(InsertPos - 1)
      NameRefersTo(InsertPos) = NameRefersTo(InsertPos - 1)
      InsertPos = InsertPos - 1
    Wend
    NameName(InsertPos) = XNameName
    NameRefersTo(InsertPos) = XNameRefersTo
  Next NameIdx
  
  If Dirty Then
    For Each XName In WBook.Names
      XName.Delete
    Next XName
  
    For NameIdx = 1 To NameCnt
      WBook.Names.Add Name:=NameName(NameIdx), RefersTo:=NameRefersTo(NameIdx)
    Next NameIdx
  End If
  
End Sub ' CleanNames()
'

' **********************************************************************
' *                                                                    *
' *                          CopyAllSheets()                           *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub CopyAllSheets(Optional WBook As Workbook = Nothing)
  Dim WSheetCnt As Integer
  Dim WSheetIdx As Integer
  Dim WSheetName As String
  Dim SrcWSheetName() As String
  Dim DestWSheetName() As String
  Dim UniqWSheetName As String
  Dim UniqWSheetNameIdx As Integer
  Dim WSheetNameIdx As Integer
  Dim UniqName As Boolean
  Dim SrcWSheet As Worksheet
  Dim DestWSheet As Worksheet
  Dim SrcRange As Range
  Dim DestRange As Range
  Dim XRange As Range
  Dim RowIdx As Integer
  Dim ColIdx As Integer
  Dim Hidden As Boolean
  Dim SrcFormula As String
  Dim DestFormula As String
  Dim ShapeCnt As Integer
  Dim SrcShapeIdx As Integer
  Dim DestShapeIdx As Integer
  Dim SrcShape As Shape
  Dim DestShape As Shape
  Dim NameCnt As Integer
  Dim NameIdx As Integer
  Dim RangeName() As String
  Dim RangeArea() As String
  Dim XNameName As String
  Dim XNameArea As String
  Dim TargetRangeArea As String
  
  Debug.Print "CopyAllSheets()"
  
  If WBook Is Nothing Then
    Set WBook = ActiveWorkbook
  End If
  
  WSheetCnt = WBook.Worksheets.Count
  WBook.Worksheets.Add After:=WBook.Worksheets(WSheetCnt), Count:=WSheetCnt
  
  ReDim SrcWSheetName(1 To WSheetCnt)
  ReDim DestWSheetName(1 To WSheetCnt)
  
  UniqWSheetNameIdx = 1
  
  For WSheetIdx = 1 To WSheetCnt
    Set SrcWSheet = WBook.Worksheets(WSheetIdx)
    Set DestWSheet = WBook.Worksheets(WSheetCnt + WSheetIdx)
    
    UniqName = False
    While Not UniqName
      UniqWSheetName = "Src" & UniqWSheetNameIdx
      UniqWSheetNameIdx = UniqWSheetNameIdx + 1
      
      UniqName = True
      For WSheetNameIdx = 1 To WSheetCnt
        If WBook.Worksheets(WSheetNameIdx).Name = UniqWSheetName Then
          UniqName = False
        End If
      Next WSheetNameIdx
    Wend
    
    WSheetName = SrcWSheet.Name
    SrcWSheet.Name = UniqWSheetName
    DestWSheet.Name = WSheetName
    
    SrcWSheetName(WSheetIdx) = SrcWSheet.Name & "!"
    DestWSheetName(WSheetIdx) = "'" & DestWSheet.Name & "'!"
    
    Set SrcRange = SrcWSheet.UsedRange
    
    For RowIdx = SrcRange.Row To SrcRange.Row + SrcRange.Rows.Count - 1
      Hidden = SrcWSheet.Rows(RowIdx).Hidden
      SrcWSheet.Rows(RowIdx).Hidden = False
      DestWSheet.Rows(RowIdx).RowHeight = SrcWSheet.Rows(RowIdx).RowHeight
      DestWSheet.Rows(RowIdx).Hidden = Hidden
      SrcWSheet.Rows(RowIdx).Hidden = Hidden
    Next RowIdx
    
    For ColIdx = SrcRange.Column To SrcRange.Column + SrcRange.Columns.Count - 1
      Hidden = SrcWSheet.Columns(ColIdx).Hidden
      SrcWSheet.Columns(ColIdx).Hidden = False
      DestWSheet.Columns(ColIdx).ColumnWidth = SrcWSheet.Columns(ColIdx).ColumnWidth
      DestWSheet.Columns(ColIdx).Hidden = Hidden
      SrcWSheet.Columns(ColIdx).Hidden = Hidden
    Next ColIdx

    SrcWSheet.UsedRange.Cells.Copy
    DestWSheet.Activate
    DestWSheet.Cells(1, 1).Select
    DestWSheet.Paste
  Next WSheetIdx
  
  CleanNames WBook:=WBook
  
  NameCnt = WBook.Names.Count
  ReDim RangeName(1 To NameCnt)
  ReDim RangeArea(1 To NameCnt)
  
  For NameIdx = 1 To NameCnt
    RangeName(NameIdx) = WBook.Names(NameIdx).Name
    RangeArea(NameIdx) = WBook.Names(NameIdx).RefersTo
    ' Debug.Print "Name[" & NameIdx & "]: " & RangeName(NameIdx) & " - " & RangeArea(NameIdx)
  Next NameIdx
  
  For NameIdx = 1 To NameCnt
    XNameName = RangeName(NameIdx)
    XNameArea = RangeArea(NameIdx)
    For WSheetIdx = 1 To WSheetCnt
      XNameName = Replace(XNameName, SrcWSheetName(WSheetIdx), DestWSheetName(WSheetIdx))
      XNameArea = Replace(XNameArea, SrcWSheetName(WSheetIdx), DestWSheetName(WSheetIdx))
    Next WSheetIdx
    WBook.Names.Add Name:=XNameName, RefersTo:=XNameArea
  Next NameIdx
  
  For WSheetIdx = 1 To WSheetCnt
    Set SrcWSheet = WBook.Worksheets(WSheetIdx)
    Set DestWSheet = WBook.Worksheets(WSheetCnt + WSheetIdx)
    
    Set DestRange = DestWSheet.UsedRange
    For RowIdx = DestRange.Row To DestRange.Row + DestRange.Rows.Count - 1
      For ColIdx = DestRange.Column To DestRange.Column + DestRange.Columns.Count - 1
        Set XRange = DestWSheet.Cells(RowIdx, ColIdx)
        If XRange.MergeArea.Row = RowIdx And _
           XRange.MergeArea.Column = ColIdx Then
          SrcFormula = XRange.Formula
          DestFormula = SrcFormula
          If (Left(SrcFormula, 1) = "=") Then
            For WSheetNameIdx = 1 To WSheetCnt
              DestFormula = Replace(DestFormula, SrcWSheetName(WSheetNameIdx), DestWSheetName(WSheetNameIdx))
            Next WSheetNameIdx
            If (SrcFormula <> DestFormula) Then
              XRange.Formula = DestFormula
            End If
          End If
        End If
      Next ColIdx
    Next RowIdx
  Next WSheetIdx

  For WSheetIdx = 1 To WSheetCnt
    WBook.Worksheets(1).Delete
  Next WSheetIdx
End Sub ' CopyAllSheets()
'


' **********************************************************************
' *                                                                    *
' *                            ScrollHome()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub ScrollHome(WBook As Workbook)
  Dim WSheet As Worksheet
  Dim Row As Integer
  Dim Column As Integer
  Dim Done As Boolean
  Dim XCell As Range
    
  For Each WSheet In WBook.Worksheets
    WSheet.Activate
    
    For Row = WSheet.UsedRange.Row To WSheet.UsedRange.Row + WSheet.UsedRange.Rows.Count - 1
      If Not (WSheet.Rows(Row).Hidden) Then
        ActiveWindow.ScrollRow = Row
        Exit For
      End If
    Next Row
    
    For Column = WSheet.UsedRange.Column To WSheet.UsedRange.Column + WSheet.UsedRange.Columns.Count - 1
      If Not (WSheet.Columns(Column).Hidden) Then
        ActiveWindow.ScrollColumn = Column
        Exit For
      End If
    Next Column
  
    Done = False
    For Row = WSheet.UsedRange.Row To WSheet.UsedRange.Row + WSheet.UsedRange.Rows.Count - 1
      If Not (WSheet.Rows(Row).Hidden) Then
        For Column = WSheet.UsedRange.Column To WSheet.UsedRange.Column + WSheet.UsedRange.Columns.Count - 1
          If Not (WSheet.Columns(Column).Hidden) Then
            Set XCell = WSheet.Cells(Row, Column)
            If Not XCell.Locked Then
              XCell.Select
              Done = True
            End If
            If Done Then Exit For
          End If
        Next Column
        If Done Then Exit For
      End If
    Next Row
  Next WSheet
  
  WBook.Worksheets(1).Activate
  ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
 
End Sub ' ScrollHome()
'

' **********************************************************************
' *                                                                    *
' *                      InsertSubmitProperties()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InsertSubmitProperties(WBook As Workbook, _
                           ApplicantName As String, ApplicantID As String, _
                           ProjectTitle As String, ProjectNumber As String)
  Dim NowDateTime As Date
  Dim SubmitDateMsg As String
  Dim SubmitTimeMsg As String
  Dim c_MonthName As Variant
  c_MonthName = Array("Jan.", "Feb.", "M|fffd|rz", "April", "Mai", "Juni", _
                      "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.")
  
  NowDateTime = DateTime.Now
  SubmitDateMsg = CStr(Day(NowDateTime)) & ". " & c_MonthName(Month(NowDateTime) - 1) & " " & CStr(Year(NowDateTime))
  SubmitTimeMsg = CStr(Hour(NowDateTime)) & ":" & CStr(Minute(NowDateTime))
  
  WBook.CustomDocumentProperties.Add Name:="Abgabe um", Type:=msoPropertyTypeString, _
          Value:=(SubmitDateMsg & " " & SubmitTimeMsg), LinkToContent:=False
  WBook.CustomDocumentProperties.Add Name:="Abgabedatum:", Type:=msoPropertyTypeDate, _
          Value:=NowDateTime, LinkToContent:=False
   
  If (Trim(ApplicantName) <> "") Then
    WBook.CustomDocumentProperties.Add Name:="Kunde", Type:=msoPropertyTypeString, _
            Value:=Trim(ApplicantName), LinkToContent:=False
  End If
  If (Trim(ApplicantID) <> "") Then
    WBook.CustomDocumentProperties.Add Name:="Betriebsnr.", Type:=msoPropertyTypeString, _
            Value:=Trim(ApplicantID), LinkToContent:=False
  End If
  If (Trim(ProjectTitle) <> "") Then
    WBook.CustomDocumentProperties.Add Name:="Vorhaben", Type:=msoPropertyTypeString, _
            Value:=Trim(ProjectTitle), LinkToContent:=False
  End If
  If (Trim(ProjectNumber) <> "") Then
  WBook.CustomDocumentProperties.Add Name:="Antragsnr.", Type:=msoPropertyTypeString, _
          Value:=Trim(ProjectNumber), LinkToContent:=False
  End If
End Sub ' InsertSubmitProperties()
'

Attribute VB_Name = "TAuswahl"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                Worksheet Auswahl Belegaufstellungen                *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = False
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()

' **********************************************************************
' *                Worksheet Auswahl Belegaufstellungen                *
' **********************************************************************
Attribute VB_Name = "TAuswahl1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                Worksheet Auswahl Belegaufstellungen                *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = False
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()

' **********************************************************************
' *                Worksheet Auswahl Belegaufstellungen                *
' **********************************************************************
Attribute VB_Name = "TF|fffd|rdergeber"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Attribute VB_Name = "TGehaltsgrenzen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Attribute VB_Name = "TInvestSachkosten"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                   Worksheet Invest- & Sachkosten                   *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_InvMat_ApplicationSubject)) Is Nothing) And _
       Target.Worksheet.Range(gc_InvMat_ApplicationSubject).Value <> Target.Worksheet.Range(gc_InvMat_ApplicationSubjectShadow).Value Then
      ' InvMat_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not InvMat_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    InvMat_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "InvMat_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  InvMat_SelectViewModeVOKAll WSheet:=WSheet
  InvMat_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = InvMat_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()

' **********************************************************************
' *                   Worksheet Invest- & Sachkosten                   *
' **********************************************************************

Attribute VB_Name = "TInvestSachkosten1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                   Worksheet Invest- & Sachkosten                   *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_InvMat_ApplicationSubject)) Is Nothing) And _
       Target.Worksheet.Range(gc_InvMat_ApplicationSubject).Value <> Target.Worksheet.Range(gc_InvMat_ApplicationSubjectShadow).Value Then
      ' InvMat_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not InvMat_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    InvMat_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "InvMat_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  InvMat_SelectViewModeVOKAll WSheet:=WSheet
  InvMat_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = InvMat_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()

' **********************************************************************
' *                   Worksheet Invest- & Sachkosten                   *
' **********************************************************************

Attribute VB_Name = "TNotizen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                          Worksheet Notizen                         *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_ScratchPad_ApplicationSubject)) Is Nothing) Then
      ' ScratchPad_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = False
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = ScratchPad_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()

' **********************************************************************
' *                          Worksheet Notizen                         *
' **********************************************************************
Attribute VB_Name = "TNotizen1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                          Worksheet Notizen                         *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_ScratchPad_ApplicationSubject)) Is Nothing) Then
      ' ScratchPad_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = False
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = ScratchPad_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()

' **********************************************************************
' *                          Worksheet Notizen                         *
' **********************************************************************
Attribute VB_Name = "TPersonalkosten"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                      Worksheet Personalkosten                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  Dim ApplSubjectMirrorRows As Range
  Dim RowIdx As Integer
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_Labour_ApplicationSubject)) Is Nothing) And _
      Target.Worksheet.Range(gc_Labour_ApplicationSubject).Value <> Target.Worksheet.Range(gc_Labour_ApplicationSubjectShadow).Value Then
      Set ApplSubjectMirrorRows = Target.Worksheet.Range(gc_Labour_ApplSubjectMirrorRows)
      For RowIdx = 1 To ApplSubjectMirrorRows.Rows.Count
        ApplSubjectMirrorRows.Rows(RowIdx).AutoFit
        If (ApplSubjectMirrorRows.Rows(RowIdx).RowHeight < 14.25) Then
          ApplSubjectMirrorRows.Rows(RowIdx).RowHeight = 14.25
        End If
      Next RowIdx
        
      ' Labour_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not Labour_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    Labour_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "Labour_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  ' Labour_SelectViewModeVOKAll WSheet:=WSheet
  ' Labour_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = Labour_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()
'
' **********************************************************************
' *                      Worksheet Personalkosten                      *
' **********************************************************************
Attribute VB_Name = "TPersonalkosten1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                      Worksheet Personalkosten                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  Dim ApplSubjectMirrorRows As Range
  Dim RowIdx As Integer
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_Labour_ApplicationSubject)) Is Nothing) And _
      Target.Worksheet.Range(gc_Labour_ApplicationSubject).Value <> Target.Worksheet.Range(gc_Labour_ApplicationSubjectShadow).Value Then
      Set ApplSubjectMirrorRows = Target.Worksheet.Range(gc_Labour_ApplSubjectMirrorRows)
      For RowIdx = 1 To ApplSubjectMirrorRows.Rows.Count
        ApplSubjectMirrorRows.Rows(RowIdx).AutoFit
        If (ApplSubjectMirrorRows.Rows(RowIdx).RowHeight < 14.25) Then
          ApplSubjectMirrorRows.Rows(RowIdx).RowHeight = 14.25
        End If
      Next RowIdx
        
      ' Labour_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not Labour_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    Labour_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "Labour_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  ' Labour_SelectViewModeVOKAll WSheet:=WSheet
  ' Labour_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = Labour_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()
'
' **********************************************************************
' *                      Worksheet Personalkosten                      *
' **********************************************************************
Attribute VB_Name = "TPersonalkosten2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                      Worksheet Personalkosten                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  Dim ApplSubjectMirrorRows As Range
  Dim RowIdx As Integer
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_Labour_ApplicationSubject)) Is Nothing) And _
      Target.Worksheet.Range(gc_Labour_ApplicationSubject).Value <> Target.Worksheet.Range(gc_Labour_ApplicationSubjectShadow).Value Then
      Set ApplSubjectMirrorRows = Target.Worksheet.Range(gc_Labour_ApplSubjectMirrorRows)
      For RowIdx = 1 To ApplSubjectMirrorRows.Rows.Count
        ApplSubjectMirrorRows.Rows(RowIdx).AutoFit
        If (ApplSubjectMirrorRows.Rows(RowIdx).RowHeight < 14.25) Then
          ApplSubjectMirrorRows.Rows(RowIdx).RowHeight = 14.25
        End If
      Next RowIdx
        
      ' Labour_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not Labour_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    Labour_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "Labour_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  ' Labour_SelectViewModeVOKAll WSheet:=WSheet
  ' Labour_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = Labour_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()
'
' **********************************************************************
' *                      Worksheet Personalkosten                      *
' **********************************************************************
Attribute VB_Name = "TStandardkosten"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                      Worksheet Standardkosten                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  EnterSysCallback

  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_StdCost_ApplicationSubject)) Is Nothing) And _
       Target.Worksheet.Range(gc_StdCost_ApplicationSubject).Value <> Target.Worksheet.Range(gc_StdCost_ApplicationSubjectShadow).Value Then
      ' StdCost_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If

  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not StdCost_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    StdCost_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "StdCost_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  StdCost_SelectViewModeVOKAll WSheet:=WSheet
  StdCost_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = StdCost_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()
'
' **********************************************************************
' *                      Worksheet Standardkosten                      *
' **********************************************************************



Attribute VB_Name = "TUnbareSachleistungen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                  Worksheet Unbare Sachleistungen                   *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim Dirty As Boolean
  
  EnterSysCallback
  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_InKind_ApplicationSubject)) Is Nothing) And _
       Target.Worksheet.Range(gc_InKind_ApplicationSubject).Value <> Target.Worksheet.Range(gc_InKind_ApplicationSubjectShadow).Value Then
      ' InKind_AdjustWorksheetName WSheet:=Target.Worksheet: Dirty = True
      Dirty = FixWSheetNames(WBook:=ThisWorkbook)
      If Dirty And WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=ThisWorkbook) Then
        Summary_MarkDirty SummarySheet:=ThisWorkbook.Worksheets(gc_SummaryWorkSheet)
      End If
    End If
  End If
  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not InKind_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    InKind_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "InKind_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                     Worksheet_PrepareNoMacro()                     *
' *                                                                    *
' **********************************************************************
Sub Worksheet_PrepareNoMacro(WSheet As Worksheet)
  InKind_SelectViewModeVOKAll WSheet:=WSheet
  InKind_BeforePrint WSheet:=WSheet
End Sub ' Worksheet_PrepareNoMacro()
'

' **********************************************************************
' *                                                                    *
' *                 Worksheet_GetPreferredWSheetName()                 *
' *                                                                    *
' **********************************************************************
Function Worksheet_GetPreferredWSheetName(WSheet As Worksheet) As String
  Worksheet_GetPreferredWSheetName = InKind_GetPreferredWSheetName(WSheet:=WSheet)
End Function ' Worksheet_GetPreferredWSheetName()

' **********************************************************************
' *                  Worksheet Unbare Sachleistungen                   *
' **********************************************************************





Attribute VB_Name = "TZahlungsantrag"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                      Worksheet Zahlungsantrag                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim TargetSponsorCell As Boolean
  Dim TargetIntentCode As Boolean
  Dim SponsorsChanged As Boolean
  
  If Not gv_DisableWSheetMacros Then
    TargetSponsorCell = (Not Intersect(Target, Target.Worksheet.Range(gc_PaymAppl_SponsorCell)) Is Nothing)
    TargetIntentCode = (Not Intersect(Target, Target.Worksheet.Range(gc_PaymAppl_IntentCodeCell)) Is Nothing)
    SponsorsChanged = (Target.Worksheet.Range(gc_PaymAppl_SponsorCell).Value <> Target.Worksheet.Range(gc_PaymAppl_PrevSponsorCell).Value)
    If (TargetSponsorCell Or TargetIntentCode) And SponsorsChanged Then
      PaymAppl_AdjustLogos WSheet:=Target.Worksheet
    End If
    
    If (Not Intersect(Target, Target.Worksheet.Range(gc_PaymAppl_IntentNameCell)) Is Nothing) Then
      PaymAppl_AdjustIntentName WSheet:=Target.Worksheet
    End If
  End If
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not PaymAppl_DataValid(WSheet:=WSheet)
  ' If (Not Cancel) Then
  '   PaymAppl_BeforePrint WSheet:=WSheet
  '   Application.OnTime Now() + TimeValue("0:00:02"), "PaymAppl_AfterPrint"
  ' End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
  
  If gv_Summary_Dirty And (Not gv_SplitWorkbookInProgress) And WorksheetExists(gc_SummaryWorkSheet) Then
    Summary_Update SummarySheet:=Worksheets(gc_SummaryWorkSheet)
    gv_Summary_Dirty = False
    Me.Activate
  End If
End Sub ' Worksheet_Activate()

' **********************************************************************
' *                      Worksheet Zahlungsantrag                      *
' **********************************************************************





Attribute VB_Name = "TZahlungsantrag1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                      Worksheet Zahlungsantrag                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  Dim TargetSponsorCell As Boolean
  Dim TargetIntentCode As Boolean
  Dim SponsorsChanged As Boolean
  
  If Not gv_DisableWSheetMacros Then
    TargetSponsorCell = (Not Intersect(Target, Target.Worksheet.Range(gc_PaymAppl_SponsorCell)) Is Nothing)
    TargetIntentCode = (Not Intersect(Target, Target.Worksheet.Range(gc_PaymAppl_IntentCodeCell)) Is Nothing)
    SponsorsChanged = (Target.Worksheet.Range(gc_PaymAppl_SponsorCell).Value <> Target.Worksheet.Range(gc_PaymAppl_PrevSponsorCell).Value)
    If (TargetSponsorCell Or TargetIntentCode) And SponsorsChanged Then
      PaymAppl_AdjustLogos WSheet:=Target.Worksheet
    End If
    
    If (Not Intersect(Target, Target.Worksheet.Range(gc_PaymAppl_IntentNameCell)) Is Nothing) Then
      PaymAppl_AdjustIntentName WSheet:=Target.Worksheet
    End If
  End If
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not PaymAppl_DataValid(WSheet:=WSheet)
  ' If (Not Cancel) Then
  '   PaymAppl_BeforePrint WSheet:=WSheet
  '   Application.OnTime Now() + TimeValue("0:00:02"), "PaymAppl_AfterPrint"
  ' End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Sub Worksheet_Activate()
  '  Excel 2010 <-> Application.Version: "14.0"
  If (Application.Version = "14.0") Then
    RepairShapes BrokenSheet:=Me
  End If
  
  If gv_Summary_Dirty And (Not gv_SplitWorkbookInProgress) And WorksheetExists(gc_SummaryWorkSheet) Then
    Summary_Update SummarySheet:=Worksheets(gc_SummaryWorkSheet)
    gv_Summary_Dirty = False
    Me.Activate
  End If
End Sub ' Worksheet_Activate()

' **********************************************************************
' *                      Worksheet Zahlungsantrag                      *
' **********************************************************************





Attribute VB_Name = "T|fffd|bersicht"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                     Worksheet |fffd|bersicht                            *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.5/Ref.17 LE-Sonstige                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  EnterSysCallback
  
  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_Summary_GroupBySelectCell)) Is Nothing) And _
      Target.Worksheet.Range(gc_Summary_GroupBySelectCell).Value <> Target.Worksheet.Range(gc_Summary_GroupBySelectShadowCell).Value Then
      Application.OnTime Now(), "Summary_GroupBySelectChanged"
    End If
  End If
  
  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not Summary_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    Summary_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "Summary_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Activate()
  EnterSysCallback
  ' Debug.Print "Worksheet_Activate(" & ActiveSheet.Name & ") - Executed"
  
  If gv_Summary_Dirty And (Not gv_SplitWorkbookInProgress) Then
    Summary_Update SummarySheet:=ActiveSheet
    gv_Summary_Dirty = False
  End If
  
  ExitSysCallback
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_Deactivate()                       *
' *                                                                    *
' **********************************************************************
Private Sub Disabled_Worksheet_Deactivate()
  EnterSysCallback
  ' Debug.Print "Worksheet_Deactivate(" & ThisWorkbook.ActiveSheet.Previous.Name & ") - Executed"
  
  ' Summary_Deactivate SummarySheet:=ThisWorkbook.ActiveSheet.Previous
  
  ExitSysCallback
End Sub ' Worksheet_Deactivate()
'
' **********************************************************************
' *                     Worksheet |fffd|bersicht                            *
' **********************************************************************



Attribute VB_Name = "T|fffd|bersicht2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' **********************************************************************
' *                                                                    *
' *                     Worksheet |fffd|bersicht                            *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.5/Ref.17 LE-Sonstige                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

Option Explicit
'

' **********************************************************************
' *                                                                    *
' *                         Worksheet_Change()                         *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Change(ByVal Target As Range)
  EnterSysCallback
  
  If Not gv_SplitWorkbookInProgress Then
    If (Not Intersect(Target, Target.Worksheet.Range(gc_Summary_GroupBySelectCell)) Is Nothing) And _
      Target.Worksheet.Range(gc_Summary_GroupBySelectCell).Value <> Target.Worksheet.Range(gc_Summary_GroupBySelectShadowCell).Value Then
      Application.OnTime Now(), "Summary_GroupBySelectChanged"
    End If
  End If
  
  ExitSysCallback
End Sub ' Worksheet_Change()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_BeforePrint()                      *
' *                                                                    *
' **********************************************************************
Sub Worksheet_BeforePrint(WSheet As Worksheet, ByRef Cancel As Boolean)
  Cancel = Not Summary_DataValid(WSheet:=WSheet)
  If (Not Cancel) Then
    Summary_BeforePrint WSheet:=WSheet
    Application.OnTime Now() + TimeValue("0:00:02"), "Summary_AfterPrint"
  End If
End Sub ' Worksheet_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Worksheet_Activate()                        *
' *                                                                    *
' **********************************************************************
Private Sub Worksheet_Activate()
  EnterSysCallback
  ' Debug.Print "Worksheet_Activate(" & ActiveSheet.Name & ") - Executed"
  
  If gv_Summary_Dirty And (Not gv_SplitWorkbookInProgress) Then
    Summary_Update SummarySheet:=ActiveSheet
    gv_Summary_Dirty = False
  End If
  
  ExitSysCallback
End Sub ' Worksheet_Activate()
'

' **********************************************************************
' *                                                                    *
' *                       Worksheet_Deactivate()                       *
' *                                                                    *
' **********************************************************************
Private Sub Disabled_Worksheet_Deactivate()
  EnterSysCallback
  ' Debug.Print "Worksheet_Deactivate(" & ThisWorkbook.ActiveSheet.Previous.Name & ") - Executed"
  
  ' Summary_Deactivate SummarySheet:=ThisWorkbook.ActiveSheet.Previous
  
  ExitSysCallback
End Sub ' Worksheet_Deactivate()
'
' **********************************************************************
' *                     Worksheet |fffd|bersicht                            *
' **********************************************************************



Attribute VB_Name = "UnbareSachleistungen"
' **********************************************************************
' *                                                                    *
' *                      UnbareSachleistungen.bas                      *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' Unbare Sach- bzw. Eigenleistungen sind f|fffd|rderbare Leistungen die nicht
' extern zugekauft werden, sondern vom F|fffd|rderwerber bzw. dessen Freunden,
' Bekannten und Familienangeh|fffd|rigen erbracht werden. Auch wenn extern kein
' (bzw. kaum) Geld flie|fffd|t wird das Ziel der Ma|fffd|nahme erreicht und es liegt
' F|fffd|rderw|fffd|rdigkeit vor.
'
' Im Tabellenblatt k|fffd|nnen |fffd|ber Buttons Zeilen f|fffd|r jede beliebige Anzahl
' von Mitwirkenden und Leistungen angelegt werden ohne dass deswegen das
' gesamte Excel-Sheet ungesch|fffd|tzt ist (und leichtfertige Anwender beliebig
' die Struktur |fffd|ndern k|fffd|nnen).
'
' Weiters gibt es 5 verschiedene Ansichten auf die Spalten zwischen denen
' ebenfalls per Button umgeschaltet werden kann. Dadurch wird dem Anwender
' stets genau soviel Information angeboten wie im Moment erforderlich ist
' und der Endkunden nicht mit Feldern verwirrt die nur die Verwaltungs-
' kontrolle bzw. den techn. Pr|fffd|fdienst betreffen.

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.122   Roland Lieger     3.07.2015    Added Lots of Comments / Getting Ready for Release
'  1.0.0.130   Roland Lieger     8.07.2015    Debugging / Secondary Unlock Applicant
'  1.0.0.140   Roland Lieger    20.09.2015    Added Before/AfterPrint Code - Fixed Paper Format
'  1.0.0.248   Roland Lieger     4.11.2015    Last Subject can't be deleted any more
'  1.0.0.254   Roland Lieger     6.11.2015    Added DataValid() Check
'  1.0.0.268   Roland Lieger    11.11.2015    Getting Ready for Release
'  1.0.0.300   Roland Lieger    25.11.2015    Added 'Are you sure' dialogs
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

Public Const gc_InKind_TemplateSheet As String = "TEMPLATE Unbare Sachleistungen"
Public Const gc_InKind_UserSheet As String = "Unbare Sachleistungen"
Public Const gc_InKind_UserSheetAbbr As String = "Unbare Sachl. - "
 
Private Const c_Button_EraseAll As String = "Button_EraseAll"
Private Const c_Button_DuplicateSheet As String = "Button_DuplicateSheet"
Private Const c_Button_RemoveMacros As String = "Button_RemoveMacros"
Private Const c_Button_UnlockAll As String = "Button_UnlockAll"
Private Const c_Button_LockAll As String = "Button_LockAll"
 
' Private Const c_Checkbox_TaxDeductEnable As String = "Checkbox_TaxDeductEnable"
' Private Const c_Checkbox_TaxDeductDisable As String = "Checkbox_TaxDeductDisable"
Private Const c_RadioButton_TaxDeductEnable As String = "RadioButton_TaxDeductEnable"
Private Const c_RadioButton_TaxDeductDisable As String = "RadioButton_TaxDeductDisable"

Private Const c_Button_SelectModeUser As String = "Button_SelectModeUser"

' Private Const c_Button_SelectModeVWK As String = "Button_SelectModeVWK"
Private Const c_Button_SelectModeVWKFull As String = "Button_SelectModeVWKFull"
Private Const c_Button_SelectModeVWKPrint As String = "Button_SelectModeVWKPrint"

' Private Const c_Button_SelectModeVOK As String = "Button_SelectModeVOK"
Private Const c_Button_SelectModeVOKFull As String = "Button_SelectModeVOKFull"
Private Const c_Button_SelectModeVOKPrint As String = "Button_SelectModeVOKPrint"

Private Const c_SelectModeButtonRows As String = "InKind_SelectModeButtonRows"
  
Private Const c_ApplicantIDCell As String = "InKind_ApplicantIDCell"
Private Const c_ApplicantNameCell As String = "InKind_ApplicantNameCell"
Private Const c_ApplicationIDCell As String = "InKind_ApplicationIDCell"
Public Const gc_InKind_ApplicationSubject As String = "InKind_ApplicationSubject"
Public Const gc_InKind_ApplicationSubjectShadow As String = "InKind_ApplicationSubjectShadow"

Public Const gc_InKind_FormVersionCell As String = "InKind_FormVersion"

Public Const gc_InKind_TotalCost As String = "InKind_TotalCost"
Public Const gc_InKind_AppliedCost As String = "InKind_AppliedCost"
Public Const gc_InKind_ReducedCostVWK As String = "InKind_ReducedCostVWK"
Public Const gc_InKind_AcceptedCostVWK As String = "InKind_AcceptedCostVWK"
Public Const gc_InKind_ReducedCostVOK As String = "InKind_ReducedCostVOK"
Public Const gc_InKind_AcceptedCostVOK As String = "InKind_AcceptedCostVOK"
' Public Const gc_InKind_SanctionsVWK As String = "InKind_SanctionsVWK"
Public Const gc_InKind_SanctionsVOK As String = "InKind_SanctionsVOK"

Private Const c_InKind_SignatureRange As String = "InKind_SignatureRange"

Private Const c_TaxDeductCell As String = "InKind_TaxDeductCell"
Private Const c_SupportPeriodStartCell As String = "InKind_SupportPeriodStartCell"
Private Const c_SupportPeriodEndCell As String = "InKind_SupportPeriodEndCell"

Private Const c_DefaultActiveCell As String = "InKind_DefaultActiveCell"

Private Const c_Button_AddWorker As String = "Button_AddWorker"
Private Const c_Button_DelWorker As String = "Button_DelWorker"

Private Const c_WorkerHeadRow As String = "InKind_WorkerHeadRow"
Private Const c_WorkerPasteGuardRow As String = "InKind_WorkerPasteGuardRow"
Private Const c_WorkerTemplateRow As String = "InKind_WorkerTemplateRow"
Private Const c_WorkerTailRow As String = "InKind_WorkerTailRow"
Private Const c_WorkerNameRange As String = "InKind_WorkerNameRange"
Private Const c_WorkerInfoRange As String = "InKind_WorkerInfoRange"

Private Const c_PrintFilterRow As String = "InKind_PrintFilterRow"
Private Const c_PrintFilterColumn As String = "InKind_PrintFilterColumn"

Private Const c_Button_AddReceipt As String = "Button_AddReceipt"
Private Const c_Button_AddMultiReceipts As String = "Button_AddMultipleReceipts"
Private Const c_Button_DelReceipt As String = "Button_DelReceipt"

Private Const c_ReceiptRangeHeadRow As String = "InKind_ReceiptRangeHeadRow"
Private Const c_ReceiptPasteGuardRow As String = "InKind_ReceiptPasteGuardRow"
Private Const c_ReceiptTemplateRow As String = "InKind_ReceiptTemplateRow"
Private Const c_ReceiptRangeTailRow As String = "InKind_ReceiptRangeTailRow"

Private Const c_EntryTypeColumn As String = "B"

Private Const c_FirstWorkerDataColumnIdx = 3 ' = ColumnTitleToIdx("C")
Private Const c_LastWorkerDataColumnIdx = 8 ' = ColumnTitleToIdx("H")

Private Const c_SerialNrColumn As String = "C"
Private Const c_FirstDataEntryColumnIdx As Integer = 4 ' = ColumnTitleToIdx("D")
Private Const c_LastDataEntryColumnIdx As Integer = 10 ' = ColumnTitleToIdx("J")
Private Const c_SubProjectColumnIdx As Integer = 7 ' = ColumnTitleToIdx("G")
Private Const c_TaskCodeColumnIdx As Integer = 14 ' = ColumnTitleToIdx("N")

Public Const gc_InKind_SumColumnMarker As String = "SumColumn"
Public Const gc_InKind_TotalCostColumn As String = "K"
Public Const gc_InKind_AppliedCostColumn As String = "M"
Public Const gc_InKind_ReducedCostVWKColumn As String = "R"
Public Const gc_InKind_AcceptedCostVWKColumn As String = "V"
Public Const gc_InKind_ReducedCostVOKColumn As String = "AB"
Public Const gc_InKind_AcceptedCostVOKColumn As String = "AF"
' Public Const gc_InKind_SanctionsVWKColumn As String = "A*"
Public Const gc_InKind_SanctionsVOKColumn As String = "AJ"

Private v_PrintWSheet As Worksheet
'
' **********************************************************************
' *                                                                    *
' *                        InKind_EraseAllData()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_EraseAllData()
  Dim WSheet As Worksheet
  Dim Button As VbMsgBoxResult
  
  Set WSheet = ActiveSheet
  If WSheet.Name = gc_InKind_TemplateSheet Then
    Exit Sub
  End If
    
  If gc_DisplayAreYouSureDialogs Then
    Button = MsgBox(Prompt:="Sie sind dabei die Belegaufstellung " & _
                   Chr(34) & WSheet.Name & Chr(34) & " mit allen Eingaben zu l|fffd|schen. " & vbCr & _
                   "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden. " & vbCr & _
                   "Sind Sie sicher, dass Sie das wollen?", _
                   Buttons:=(vbYesNo Or vbDefaultButton2 Or vbExclamation), _
                   Title:=(WSheet.Name & " l|fffd|schen - Sind Sie sicher?"))
    If (Button <> vbYes) Then
      Exit Sub
    End If
  End If
  
  InKind_CoreEraseAllData TargetSheet:=WSheet
End Sub ' InKind_EraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                      InKind_CoreEraseAllData()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub InKind_CoreEraseAllData(TargetSheet As Worksheet)
  Dim WBook As Workbook
  Dim PrevVisibility As Boolean
  Dim DebugMode As Boolean
  Dim ActiveInKindSheetCnt As Integer
  Dim WSheet As Worksheet
  
  If TargetSheet.Name = gc_InKind_TemplateSheet Then
    Exit Sub
  End If
  Set WBook = TargetSheet.Parent
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook, WSheet:=TargetSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' There must always be at least on visible Worksheet in each Excel
  ' workbook. Thus since we are going to erase all non-template sheets
  ' we must make (at least one) template visible...
  PrevVisibility = WBook.Sheets(gc_InKind_TemplateSheet).Visible
  WBook.Sheets(gc_InKind_TemplateSheet).Visible = True
  
  DebugMode = gc_DebugMode
  If (TargetSheet.Range(c_ApplicantNameCell).Value = gc_DebugApplicantName) Or _
     (TargetSheet.Range(c_ApplicantNameCell).Value = gc_UnlockApplicantName) Then
    DebugMode = True
  End If
  
  ' Delete the current user data sheet (if it exists)
  ' Note: It would be very tempting to simply delete the Worksheet now.
  ' This works fine for many Excel installations, however I found an
  ' Excel 2013 (32-bit) installation on Win7 (32-bit) that reproducably
  ' crashes completly when I simply delete the worksheet here. :(
  ' Workaround: We shall only mark the worksheet for deletion here and
  ' hide it (so it appears deleted to the end user) and then set up a
  ' timer that will trigger in 5 seconds (when user interaction has
  ' hopefully settled down) and start a garbage collection that actually
  ' deletes the unwanted sheets.
  ' TargetSheet.Delete - DO NOT DO THIS - Excel 2013 will crash!!!
  TargetSheet.Name = UniqueSheetName(gc_DeletedCookie & TargetSheet.Name)
  TargetSheet.Visible = False
  
  If StandAloneSheet() Then
    ActiveInKindSheetCnt = 0
    For Each WSheet In Worksheets
      If (Left(WSheet.Name, Len(gc_InKind_UserSheet)) = gc_InKind_UserSheet) Or _
         (Left(WSheet.Name, Len(gc_InKind_UserSheetAbbr)) = gc_InKind_UserSheetAbbr) Then
        ActiveInKindSheetCnt = ActiveInKindSheetCnt + 1
      End If
    Next WSheet
    If ActiveInKindSheetCnt = 0 Then
      CreateInKindUserSheet WBook:=WBook
      Set TargetSheet = ActiveSheet
      TargetSheet.Shapes(c_Button_UnlockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_LockAll).Visible = DebugMode
      TargetSheet.Shapes(c_Button_DuplicateSheet).Visible = True
    End If
  End If
  
  WBook.Sheets(gc_InKind_TemplateSheet).Visible = PrevVisibility
 
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  ' Else
  '   TargetSheet.Delete
  End If
  Application.OnTime Now() + TimeValue("0:00:01"), "EmptyTrash"
  
End Sub ' InKind_CoreEraseAllData()
'

' **********************************************************************
' *                                                                    *
' *                       CreateInKindUserSheet()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Erase the existing Personalkosten Sheet and recreate it using the
' template. Note that the template contains the fields for all stages
' of the data entry process. Since we need to guide the user through
' the data entry process, we shall first hide most of the fields to
' ensure orderly data entry.
Sub CreateInKindUserSheet(WBook As Workbook)
  Dim UserSheet As Worksheet
  Dim StandAloneMode As Boolean

  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  StandAloneMode = Not WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set UserSheet = CopyUserSheet(WSheet:=WBook.Worksheets(gc_InKind_TemplateSheet), _
                                WSheetCopyName:=gc_InKind_UserSheet, _
                                Before:=WBook.Worksheets(gc_InKind_TemplateSheet))
    
  If Not (UserSheet Is Nothing) Then
    MarkShapes WSheet:=UserSheet, TemplateSheet:=WBook.Worksheets(gc_InKind_TemplateSheet)
    
    ' Make sure that the first important cell is selected an the
    ' sheet is neatly scrolled to home position
    ' UserSheet.Range(gc_ProjectNameCell).Select
    If StandAloneMode Then
      UserSheet.Range(c_ApplicantIDCell).Select
    Else
      UserSheet.Range(gc_InKind_ApplicationSubject).Select
    End If
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    If Not StandAloneMode Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
         "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ") =" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
         "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ") =" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' UserSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' UserSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
      
    End If
    
    ' On 2017-09-18 a User reported trouble with WinXP/Excel 2007:
    '     Laufzeitfehler '1004' - Die LeftFooter-Eigenschaft des
    '        PageSetup-Objekts kann nicht festgelegt werden.
    ' The reason for this problem is not known, however we shall
    ' simply skip PageSetup if we encounter this problem.
    ' Note: This is a dirty workaround not a solution! FIXME!
    On Error GoTo SkipPageSetup
    If (UserSheet.PageSetup.LeftFooter <> "") Then
      If (StandAloneMode) Then
        UserSheet.PageSetup.LeftFooter = "Unbare Sachleistungen"
      Else
        UserSheet.PageSetup.LeftFooter = "ZA/Unbare Sachl."
      End If
      ' UserSheet.PageSetup.CenterFooter = c_PublicVersionInfo & " / " & c_MonthName(Month(NowDateTime) - 1) & " " & Year(NowDateTime)
      ' UserSheet.PageSetup.RightFooter = "Seite &P von &N"
      UserSheet.DisplayAutomaticPageBreaks = False
    End If
SkipPageSetup:
    On Error GoTo 0
    
    UserSheet.Shapes(c_Button_RemoveMacros).Visible = StandAloneMode
    UserSheet.Shapes(c_Button_UnlockAll).Visible = False
    UserSheet.Shapes(c_Button_LockAll).Visible = False
      
    InKind_SelectViewModeUser
    
    ProtectWSheet WSheet:=UserSheet
    UserSheet.Select
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If Not StandAloneMode Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' CreateInKindUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                 DuplicateInKindUserSheet_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateInKindUserSheet_OnClick()
  DuplicateInKindUserSheet WSheet:=ActiveSheet
End Sub ' DuplicateInKindUserSheet_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     DuplicateInKindUserSheet()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateInKindUserSheet(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim UserSheet As Worksheet
  
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Create a working copy of the in-kind sheet from the
  ' in-kind cost template sheet
  Set UserSheet = CopyUserSheet(WSheet:=WSheet, After:=WSheet) ' , WSheetCopyName:=gc_InKind_UserSheet)
  
  If Not (UserSheet Is Nothing) Then
    If Not StandAloneSheet() Then
      UserSheet.Range(c_ApplicantIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicantNameCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicantNameCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicantNameCell).MergeArea.Locked = True
      
      UserSheet.Range(c_ApplicationIDCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_ApplicationIDCell).Formula = _
            "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_ApplicationIDCell).MergeArea.Locked = True
      
      UserSheet.Range(c_TaxDeductCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_TaxDeductCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell & ")"
      UserSheet.Range(c_TaxDeductCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_TaxDeductCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodStartCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodStartCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodStartCell).MergeArea.Locked = True
      
      ' UserSheet.Range(c_SupportPeriodEndCell).MergeArea.NumberFormat = "General"
      UserSheet.Range(c_SupportPeriodEndCell).Formula = _
            "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
         Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Interior.ColorIndex = 19
      UserSheet.Range(c_SupportPeriodEndCell).MergeArea.Locked = True
      
      ' UserSheet.Shapes(c_Checkbox_TaxDeductEnable).Visible = False
      ' UserSheet.Shapes(c_Checkbox_TaxDeductDisable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductEnable).Visible = False
      UserSheet.Shapes(c_RadioButton_TaxDeductDisable).Visible = False
      End If
    ProtectWSheet WSheet:=UserSheet
  End If ' If Not(UserSheet Is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' DuplicateInKindUserSheet()
'

' **********************************************************************
' *                                                                    *
' *                    InKind_AdjustWorksheetName()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_AdjustWorksheetName(WSheet As Worksheet)
  Dim WBook As Workbook
  Dim Subject As String
  Dim WSheetTitle As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    Exit Sub
  End If
  
  If WSheet.Range(gc_InKind_ApplicationSubject).Value = WSheet.Range(gc_InKind_ApplicationSubjectShadow).Value Then
    Exit Sub
  End If
    
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set WBook = WSheet.Parent
  PushProtection WBook:=WBook
  RemoveProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Subject = WSheet.Range(gc_InKind_ApplicationSubject).Value
  WSheet.Range(gc_InKind_ApplicationSubjectShadow).Value = Subject
  
  WSheetTitle = gc_InKind_UserSheetAbbr & Subject
  WSheetTitle = UniqueSheetName(WSheetTitle)
  
  WSheet.Name = WSheetTitle
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WBook:=WBook
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If WorksheetExists(WorksheetName:=gc_SummaryWorkSheet, WBook:=WBook) Then
    Summary_MarkDirty SummarySheet:=WBook.Worksheets(gc_SummaryWorkSheet)
  End If
  
End Sub ' InKind_AdjustWorksheetName()
'

' **********************************************************************
' *                                                                    *
' *                   InKind_GetPreferredWSheetName()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function InKind_GetPreferredWSheetName(WSheet As Worksheet) As String
  Dim Subject As String
  
  If (InStr(WSheet.Name, gc_TemplateCookie) = 1) Or _
     (InStr(WSheet.Name, gc_TableCookie) = 1) Then
    InKind_GetPreferredWSheetName = WSheet.Name
    Return
  End If
  
  Subject = Trim(WSheet.Range(gc_InKind_ApplicationSubject).Value)
  If (WSheet.Range(gc_InKind_ApplicationSubjectShadow).Value <> Subject) Then
    WSheet.Range(gc_InKind_ApplicationSubjectShadow).Value = Subject
  End If
  
  If (Subject = "") Then
    InKind_GetPreferredWSheetName = gc_InKind_UserSheet
  Else
    InKind_GetPreferredWSheetName = gc_InKind_UserSheetAbbr & Subject
  End If

End Function ' InKind_GetPreferredWSheetName()
'

' **********************************************************************
' *                                                                    *
' *                  InKind_InsertWorkerLine_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub InKind_InsertWorkerLine_OnClick()
  InKind_InsertWorkerLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=-1
End Sub ' InKind_InsertWorkerLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                      InKind_InsertWorkerLine()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add one or more lines for additional receipts to the list of receipts.
' If this function is used programmatically, we can specify the worksheet
' and the location where we want to add the lines. If used interactively
' we shall add the lines at the current selection (or at the bottom of
' the list, if the current selection is not within the list)
Sub InKind_InsertWorkerLine(Optional WSheet As Worksheet = Nothing, _
                              Optional InsertRowIdx As Integer = -1, _
                              Optional InsertRowCnt As Integer = -1)
  Dim WBook As Workbook
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim WorkerTableHeadRowIdx As Integer
  Dim WorkerTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  Dim TopRow As Integer, BottomRow As Integer
  Dim LeftColumn As Integer, RightColumn As Integer
  Dim RangeMsg As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  Set WBook = WSheet.Parent
  
  Set TemplateRow = WSheet.Range(c_WorkerTemplateRow)
  
  WorkerTableHeadRowIdx = WSheet.Range(c_WorkerHeadRow).Row
  WorkerTableTailRowIdx = WSheet.Range(c_WorkerPasteGuardRow).Row - 1
  
  If (Selection.Parent Is WSheet) And (Selection.Rows.Count >= 1) Then
    SelectTopRow = Selection.Row
    SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    
    If (SelectTopRow < WorkerTableHeadRowIdx) Then
      SelectTopRow = WorkerTableHeadRowIdx
    End If
    If (SelectBottomRow > WorkerTableTailRowIdx) Then
      SelectBottomRow = WorkerTableTailRowIdx
    End If
  Else
    SelectTopRow = WorkerTableTailRowIdx
    SelectBottomRow = WorkerTableTailRowIdx
  End If
  
  If (InsertRowCnt <= 0) Then
    If (SelectTopRow < SelectBottomRow) Then
      InsertRowCnt = (SelectBottomRow - SelectTopRow) + 1
    Else
      InsertRowCnt = 1
    End If
  End If
  
  If (InsertRowIdx < 0) Then
    ' Option A: Always Insert at the Top of the Table
    ' InsertRowIdx = 0
    
    ' Option B: Always Insert at the Bottom of the Table
    ' InsertRowIdx = WorkerTableTailRowIdx - WorkerTableHeadRowIdx + 1
    
    ' Option C: Insert Before the Current Selection (Excel Standard)
    ' InsertRowIdx = Selection.Row - WorkerTableHeadRowIdx
    
    ' Option D: Insert Behind the Current Selection
    InsertRowIdx = Selection.Row + Selection.Rows.Count - WorkerTableHeadRowIdx
    
    ' Special Case: If we insert in the first line, we shall insert before the first line
    ' If (InsertRowIdx = 1) Then InsertRowIdx = 0
    If (Selection.Row = WorkerTableHeadRowIdx) Then InsertRowIdx = 0
  End If
  
  If (InsertRowIdx < 0) Then
    ' InsertRowIdx = 0
    InsertRowIdx = WorkerTableTailRowIdx - WorkerTableHeadRowIdx + 1
  End If
  If (InsertRowIdx > (WorkerTableTailRowIdx - WorkerTableHeadRowIdx + 1)) Then
    InsertRowIdx = WorkerTableTailRowIdx - WorkerTableHeadRowIdx + 1
  End If
  InsertRowIdx = InsertRowIdx + WorkerTableHeadRowIdx
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TemplateRow.Rows.Hidden = False
  
  If (InsertRowIdx = WorkerTableHeadRowIdx) Then
    WSheet.Range(CStr(InsertRowIdx + 1) & ":" & CStr(InsertRowIdx + InsertRowCnt)).Insert (xlShiftDown)
    RowIdx = InsertRowIdx + InsertRowCnt
    WSheet.Range(c_WorkerHeadRow).Copy (WSheet.Cells(RowIdx, 1))
  Else
    WSheet.Range(CStr(InsertRowIdx) & ":" & CStr(InsertRowIdx + InsertRowCnt - 1)).Insert (xlShiftDown)
  End If
  
  For RowIdx = InsertRowIdx To InsertRowIdx + InsertRowCnt - 1
    TemplateRow.Copy (WSheet.Cells(RowIdx, 1))
  Next RowIdx
  
  TemplateRow.Rows.Hidden = True
  
  WSheet.Cells(InsertRowIdx, c_FirstWorkerDataColumnIdx).Select

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TopRow = WSheet.Range(c_WorkerHeadRow).Row
  BottomRow = WSheet.Range(c_WorkerPasteGuardRow).Row - 1
  LeftColumn = WSheet.Range(c_WorkerNameRange).Column
  RightColumn = LeftColumn + WSheet.Range(c_WorkerNameRange).Columns.Count - 1
  RangeMsg = "='" & WSheet.Name & "'!$" & ColumnIdxToTitle(LeftColumn) & "$" & TopRow & _
             ":$" & ColumnIdxToTitle(RightColumn) & "$" & BottomRow
  WBook.Names.Add Name:=c_WorkerNameRange, RefersTo:=RangeMsg
  
  LeftColumn = WSheet.Range(c_WorkerInfoRange).Column
  RightColumn = LeftColumn + WSheet.Range(c_WorkerInfoRange).Columns.Count - 1
  RangeMsg = "='" & WSheet.Name & "'!$" & ColumnIdxToTitle(LeftColumn) & "$" & TopRow & _
             ":$" & ColumnIdxToTitle(RightColumn) & "$" & BottomRow
  WBook.Names.Add Name:=c_WorkerInfoRange, RefersTo:=RangeMsg

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' InKind_InsertWorkerLine()
'

' **********************************************************************
' *                                                                    *
' *                  InKind_DeleteWorkerLine_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete the selected rows of receipts from the active worksheet.
Sub InKind_DeleteWorkerLine_OnClick()
  InKind_DeleteWorkerLine WSheet:=ActiveSheet, DeleteRowIdx:=-1, DeleteRowCnt:=-1
End Sub ' InKind_DeleteWorkerLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                      InKind_DeleteWorkerLine()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete one or more lines from the list of receipts.
' Note: When using this function programmatically, we can pass the
' worksheet and rows that we want to delete. If this is used interactivly
' we shall delete the selected row(s) from the active worksheet.
Sub InKind_DeleteWorkerLine(Optional WSheet As Worksheet = Nothing, _
                              Optional DeleteRowIdx As Integer = -1, _
                              Optional DeleteRowCnt As Integer = -1)
  Dim WBook As Workbook
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim WorkerTableHeadRowIdx As Integer
  Dim WorkerTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  Dim RangeDef As String
  Dim TopRow As Integer, BottomRow As Integer
  Dim LeftColumn As Integer, RightColumn As Integer
  Dim RangeMsg As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  Set WBook = WSheet.Parent
  
  Set TemplateRow = WSheet.Range(c_WorkerTemplateRow)
  
  WorkerTableHeadRowIdx = WSheet.Range(c_WorkerHeadRow).Row
  WorkerTableTailRowIdx = WSheet.Range(c_WorkerPasteGuardRow).Row - 1
  
  If (DeleteRowIdx = 0) Or (DeleteRowCnt = 0) Then
    Exit Sub
  End If
  
  If (DeleteRowIdx < 0) Then
    If Not (Selection.Parent Is WSheet) Or (Selection.Rows.Count < 1) Then
      Exit Sub
    End If
    
    SelectTopRow = Selection.Row
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  Else
    SelectTopRow = WorkerTableHeadRowIdx + DeleteRowIdx - 1
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = WorkerTableTailRowIdx
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  End If
  
  If (SelectTopRow < WorkerTableHeadRowIdx) Or _
     (SelectTopRow > SelectBottomRow) Or _
     (SelectBottomRow > WorkerTableTailRowIdx) Then
    Exit Sub
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ' Do we want to delete the top line?
  If (SelectTopRow = WorkerTableHeadRowIdx) Then
    SelectTopRow = SelectTopRow + 1
    If SelectBottomRow = WorkerTableTailRowIdx Then
      RowIdx = TemplateRow.Row
    Else
      RowIdx = SelectBottomRow + 1
      SelectBottomRow = SelectBottomRow + 1
    End If
    TemplateRow.Rows.Hidden = False
    RangeDef = ColumnIdxToTitle(c_FirstWorkerDataColumnIdx) & CStr(RowIdx) & ":" & _
                 ColumnIdxToTitle(c_LastWorkerDataColumnIdx) & CStr(RowIdx)
    WSheet.Range(RangeDef).Copy _
                 WSheet.Cells(WorkerTableHeadRowIdx, c_FirstWorkerDataColumnIdx)
    TemplateRow.Rows.Hidden = True
  End If
  
  If (SelectTopRow <= SelectBottomRow) Then
    WSheet.Range(CStr(SelectTopRow) & ":" & CStr(SelectBottomRow)).Delete (xlShiftUp)
  End If
  
  ' If the cursor was placed right above a hidden line, and we delete
  ' a line above the cursor, the cursor will move to the hidden line.
  ' We shall resolve this problem by moving the cursor.
  If (Selection.Parent Is WSheet) Then
    Do While Rows(Selection.Row).Hidden
      Cells(Selection.Row - 1, Selection.Column).Select
    Loop
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TopRow = WSheet.Range(c_WorkerHeadRow).Row
  BottomRow = WSheet.Range(c_WorkerPasteGuardRow).Row - 1
  LeftColumn = WSheet.Range(c_WorkerNameRange).Column
  RightColumn = LeftColumn + WSheet.Range(c_WorkerNameRange).Columns.Count - 1
  RangeMsg = "='" & WSheet.Name & "'!$" & ColumnIdxToTitle(LeftColumn) & "$" & TopRow & _
             ":$" & ColumnIdxToTitle(RightColumn) & "$" & BottomRow
  WBook.Names.Add Name:=c_WorkerNameRange, RefersTo:=RangeMsg
  
  LeftColumn = WSheet.Range(c_WorkerInfoRange).Column
  RightColumn = LeftColumn + WSheet.Range(c_WorkerInfoRange).Columns.Count - 1
  RangeMsg = "='" & WSheet.Name & "'!$" & ColumnIdxToTitle(LeftColumn) & "$" & TopRow & _
             ":$" & ColumnIdxToTitle(RightColumn) & "$" & BottomRow
  WBook.Names.Add Name:=c_WorkerInfoRange, RefersTo:=RangeMsg

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' InKind_DeleteWorkerLine()
'

' **********************************************************************
' *                                                                    *
' *                 InKind_InsertReceiptLine_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub InKind_InsertReceiptLine_OnClick()
  InKind_InsertReceiptLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=-1
End Sub ' InKind_InsertReceiptLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *             InKind_InsertMultipleReceiptLines_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add another project in the list of other projects. These other projects
' are only used to check that employees don't work unrealistic amounts of
' hours.
Sub InKind_InsertMultipleReceiptLines_OnClick()
  Dim Reply As String
  Dim Count As Integer
  Dim MsgReply As VbMsgBoxResult
  
  Reply = InputBox(Prompt:="Wie viele Zeilen f|fffd|r Belege sollen eingef|fffd|gt werden?" & vbCr & _
                           "Bitte geben Sie eine ganze Zahl zwischen 1 und 1000 ein." & vbCr & _
                           "Eine leere Eingabe oder 0 bricht ab.", _
                     Title:="Mehrere Belegzeilen einf|fffd|gen")
  Reply = Trim(Reply)
  Count = -1
  If IsNumeric(Reply) Then
    On Error Resume Next  ' Handle potential Overflows in String Conversion
    Count = CInt(Reply)
    On Error GoTo 0
  End If
  
  If (Count <= 0) Then
    Exit Sub
  End If
  
  If (Count < 1) Or (Count > 1000) Then
    MsgReply = MsgBox(Prompt:="'" & Reply & "' ist keine g|fffd|ltige Eingabe." & vbCr & _
                   "Einf|fffd|geoperation abgebrochen.", _
           Buttons:=vbOKOnly Or vbExclamation, _
           Title:="Fehler - Mehrere Belegzeilen einf|fffd|gen")
    Exit Sub
  End If
  InKind_InsertReceiptLine WSheet:=ActiveSheet, InsertRowIdx:=-1, InsertRowCnt:=Count
End Sub ' InKind_InsertMultipleReceiptLines_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     InKind_InsertReceiptLine()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Add one or more lines for additional receipts to the list of receipts.
' If this function is used programmatically, we can specify the worksheet
' and the location where we want to add the lines. If used interactively
' we shall add the lines at the current selection (or at the bottom of
' the list, if the current selection is not within the list)
Sub InKind_InsertReceiptLine(Optional WSheet As Worksheet = Nothing, _
                              Optional InsertRowIdx As Integer = -1, _
                              Optional InsertRowCnt As Integer = -1)
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim ReceiptTableHeadRowIdx As Integer
  Dim ReceiptTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set TemplateRow = WSheet.Range(c_ReceiptTemplateRow)
  
  ReceiptTableHeadRowIdx = WSheet.Range(c_ReceiptRangeHeadRow).Row
  ReceiptTableTailRowIdx = WSheet.Range(c_ReceiptPasteGuardRow).Row - 1
  
  If (Selection.Parent Is WSheet) And (Selection.Rows.Count >= 1) Then
    SelectTopRow = Selection.Row
    SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    
    If (SelectTopRow < ReceiptTableHeadRowIdx) Then
      SelectTopRow = ReceiptTableHeadRowIdx
    End If
    If (SelectBottomRow > ReceiptTableTailRowIdx) Then
      SelectBottomRow = ReceiptTableTailRowIdx
    End If
  Else
    SelectTopRow = ReceiptTableTailRowIdx
    SelectBottomRow = ReceiptTableTailRowIdx
  End If
  
  If (InsertRowCnt <= 0) Then
    If (SelectTopRow < SelectBottomRow) Then
      InsertRowCnt = (SelectBottomRow - SelectTopRow) + 1
    Else
      InsertRowCnt = 1
    End If
  End If
  
  If (InsertRowIdx < 0) Then
    ' Option A: Always Insert at the Top of the Table
    ' InsertRowIdx = 0
    
    ' Option B: Always Insert at the Bottom of the Table
    ' InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
    
    ' Option C: Insert Before the Current Selection (Excel Standard)
    ' InsertRowIdx = Selection.Row - ReceiptTableHeadRowIdx
    
    ' Option D: Insert Behind the Current Selection
    InsertRowIdx = Selection.Row + Selection.Rows.Count - ReceiptTableHeadRowIdx
    
    ' Special Case: If we insert in the first line, we shall insert before the first line
    ' If (InsertRowIdx = 1) Then InsertRowIdx = 0
    If (Selection.Row = ReceiptTableHeadRowIdx) Then InsertRowIdx = 0
  End If
  
  If (InsertRowIdx < 0) Then
    ' InsertRowIdx = 0
    InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
  End If
  If (InsertRowIdx > (ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1)) Then
    InsertRowIdx = ReceiptTableTailRowIdx - ReceiptTableHeadRowIdx + 1
  End If
  InsertRowIdx = InsertRowIdx + ReceiptTableHeadRowIdx
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  TemplateRow.Rows.Hidden = False
  If (InsertRowIdx = ReceiptTableHeadRowIdx) Then
    WSheet.Range(CStr(InsertRowIdx + 1) & ":" & CStr(InsertRowIdx + InsertRowCnt)).Insert (xlShiftDown)
    RowIdx = InsertRowIdx + InsertRowCnt
    WSheet.Range(c_ReceiptRangeHeadRow).Copy (WSheet.Cells(RowIdx, 1))
  Else
    WSheet.Range(CStr(InsertRowIdx) & ":" & CStr(InsertRowIdx + InsertRowCnt - 1)).Insert (xlShiftDown)
  End If
  
  For RowIdx = InsertRowIdx To InsertRowIdx + InsertRowCnt - 1
    TemplateRow.Copy (WSheet.Cells(RowIdx, 1))
    Set IndexCell = WSheet.Cells(RowIdx, ColumnTitleToIdx(c_SerialNrColumn))
    If (RowIdx <> ReceiptTableHeadRowIdx) Then
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
    Else
      IndexCell.Formula = "=" & _
        WSheet.Cells(RowIdx + InsertRowCnt, ColumnTitleToIdx(c_SerialNrColumn)).Value
      IndexCell.Locked = False
      IndexCell.Interior.ColorIndex = -4142
    End If
  Next RowIdx
  
  If (RowIdx < WSheet.Range(c_ReceiptPasteGuardRow).Row) Then
    Set IndexCell = WSheet.Cells(RowIdx, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  If (RowIdx + 1 < WSheet.Range(c_ReceiptPasteGuardRow).Row) Then
    Set IndexCell = WSheet.Cells(RowIdx + 1, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (RowIdx) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  
  TemplateRow.Rows.Hidden = True
  
  WSheet.Cells(InsertRowIdx, 4).Select
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
End Sub ' InKind_InsertReceiptLine()
'

' **********************************************************************
' *                                                                    *
' *                 InKind_DeleteReceiptLine_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete the selected rows of receipts from the active worksheet.
Sub InKind_DeleteReceiptLine_OnClick()
  InKind_DeleteReceiptLine WSheet:=ActiveSheet, DeleteRowIdx:=-1, DeleteRowCnt:=-1
End Sub ' InKind_DeleteReceiptLine_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     InKind_DeleteReceiptLine()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Delete one or more lines from the list of receipts.
' Note: When using this function programmatically, we can pass the
' worksheet and rows that we want to delete. If this is used interactivly
' we shall delete the selected row(s) from the active worksheet.
Sub InKind_DeleteReceiptLine(Optional WSheet As Worksheet = Nothing, _
                              Optional DeleteRowIdx As Integer = -1, _
                              Optional DeleteRowCnt As Integer = -1)
  Dim TemplateRow As Range
  Dim RowIdx As Integer
  Dim ReceiptTableHeadRowIdx As Integer
  Dim ReceiptTableTailRowIdx As Integer
  Dim SelectTopRow As Integer
  Dim SelectBottomRow As Integer
  Dim IndexCell As Range
  Dim RangeDef As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set TemplateRow = WSheet.Range(c_ReceiptTemplateRow)
  
  ReceiptTableHeadRowIdx = WSheet.Range(c_ReceiptRangeHeadRow).Row
  ReceiptTableTailRowIdx = WSheet.Range(c_ReceiptPasteGuardRow).Row - 1
  
  If (DeleteRowIdx = 0) Or (DeleteRowCnt = 0) Then
    Exit Sub
  End If
  
  If (DeleteRowIdx < 0) Then
    If Not (Selection.Parent Is WSheet) Or (Selection.Rows.Count < 1) Then
      Exit Sub
    End If
    
    SelectTopRow = Selection.Row
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = SelectTopRow + Selection.Rows.Count - 1
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  Else
    SelectTopRow = ReceiptTableHeadRowIdx + DeleteRowIdx - 1
    If (DeleteRowCnt < 0) Then
      SelectBottomRow = ReceiptTableTailRowIdx
    Else
      SelectBottomRow = SelectTopRow + DeleteRowCnt - 1
    End If
  End If
  
  If (SelectTopRow < ReceiptTableHeadRowIdx) Or _
     (SelectTopRow > SelectBottomRow) Or _
     (SelectBottomRow > ReceiptTableTailRowIdx) Then
    Exit Sub
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ' Do we want to delete the top line?
  If (SelectTopRow = ReceiptTableHeadRowIdx) Then
    SelectTopRow = SelectTopRow + 1
    If SelectBottomRow = ReceiptTableTailRowIdx Then
      RowIdx = TemplateRow.Row
    Else
      RowIdx = SelectBottomRow + 1
      SelectBottomRow = SelectBottomRow + 1
    End If
    TemplateRow.Rows.Hidden = False
    RangeDef = ColumnIdxToTitle(c_FirstDataEntryColumnIdx) & CStr(RowIdx) & ":" & _
                 ColumnIdxToTitle(WSheet.UsedRange.Columns.Count) & CStr(RowIdx)
    WSheet.Range(RangeDef).Copy _
                 WSheet.Cells(ReceiptTableHeadRowIdx, c_FirstDataEntryColumnIdx)
    TemplateRow.Rows.Hidden = True
  End If
  
  If (SelectTopRow <= SelectBottomRow) Then
    WSheet.Range(CStr(SelectTopRow) & ":" & CStr(SelectBottomRow)).Delete (xlShiftUp)
  End If
  
  If SelectTopRow < WSheet.Range(c_ReceiptPasteGuardRow).Row Then
    Set IndexCell = WSheet.Cells(SelectTopRow, ColumnTitleToIdx(c_SerialNrColumn))
      IndexCell.Formula = "=" & c_SerialNrColumn & (SelectTopRow - 1) & "+1"
      IndexCell.Locked = True
      IndexCell.Interior.ColorIndex = 19
  End If
  
  ' If the cursor was placed right above a hidden line, and we delete
  ' a line above the cursor, the cursor will move to the hidden line.
  ' We shall resolve this problem by moving the cursor.
  If (Selection.Parent Is WSheet) Then
    Do While Rows(Selection.Row).Hidden
      Cells(Selection.Row - 1, Selection.Column).Select
    Loop
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' InKind_DeleteReceiptLine()
'

' **********************************************************************
' *                                                                    *
' *                     InKind_CollectTopicsTest()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_CollectTopicsTest(WSheet As Worksheet)
  Dim Topic() As String
  Dim Formula() As String
  Dim TopicCnt As Integer
  Dim I As Integer
  
  InKind_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=False
  Debug.Print "TopicCnt = " & CStr(TopicCnt)
  For I = 1 To TopicCnt
    Debug.Print "Topic[" & CStr(I) & "] = " & Topic(I) & " -> >>" & Formula(I) & "<<"
  Next I
End Sub ' InKind_CollectTopicsTest()
'

' **********************************************************************
' *                                                                    *
' *                       InKind_CollectTopics()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_CollectTopics(WSheet As Worksheet, GroupByTaskCode As Boolean, _
                         ByRef Topic() As String, ByRef Formula() As String, _
                         ByRef TopicCnt As Integer)
  Dim RowIdx As Integer
  Dim TopRow As Integer
  Dim BottomRow As Integer
  Dim RowUsed As Boolean
  Dim ColumnIdx As Integer
  Dim SubTopic As String
  Dim StdSubTopic As String
  Dim TopicIdx As Integer
  Dim TopicFound As Boolean
  Dim UseUserTopic As Boolean
  Dim TopicColumnIdx As Integer
  
  ReDim Topic(1 To 20)
  ReDim Formula(1 To 20)
  
  If (GroupByTaskCode) Then
    TopicColumnIdx = c_TaskCodeColumnIdx
    StdSubTopic = "<ohne Code>"
  Else
    TopicColumnIdx = c_SubProjectColumnIdx
    StdSubTopic = WSheet.Range(gc_InKind_ApplicationSubject).Value
  End If
  StdSubTopic = Trim(StdSubTopic)
  TopicCnt = 0
  UseUserTopic = False
  
  ' TopRow = WSheet.UsedRange.Row
  ' BottomRow = TopRow + WSheet.UsedRange.Rows.Count - 1
  TopRow = WSheet.Range(c_ReceiptRangeHeadRow).Row
  BottomRow = WSheet.Range(c_ReceiptTemplateRow).Row - 2
  For RowIdx = TopRow To BottomRow
    RowUsed = False
    For ColumnIdx = c_FirstDataEntryColumnIdx To c_LastDataEntryColumnIdx
      If (Not IsEmptyString(WSheet.Cells(RowIdx, ColumnIdx).Value)) Then
        RowUsed = True
        Exit For
      End If
    Next ColumnIdx
    If (RowUsed) Then
      SubTopic = WSheet.Cells(RowIdx, TopicColumnIdx).Value
      SubTopic = Trim(SubTopic)
      If (SubTopic = "") Then
        SubTopic = StdSubTopic
      Else
        UseUserTopic = True
      End If
      
      TopicFound = False
      For TopicIdx = 1 To TopicCnt
        If LCase(Topic(TopicIdx)) = LCase(SubTopic) Then
          ' Debug.Print ("Reused Topic " & SubTopic)
          Formula(TopicIdx) = Formula(TopicIdx) & "+" & gc_InKind_SumColumnMarker & CStr(RowIdx)
          TopicFound = True
          Exit For
        End If
      Next TopicIdx
      
      If (Not TopicFound) Then
        ' Debug.Print ("New Topic " & SubTopic)
        TopicCnt = TopicCnt + 1
        If (TopicCnt > UBound(Topic)) Then
          ReDim Preserve Topic(1 To UBound(Topic) + 20)
          ReDim Preserve Formula(1 To UBound(Topic))
        End If
        Topic(TopicCnt) = SubTopic
        Formula(TopicCnt) = "=" & gc_InKind_SumColumnMarker & CStr(RowIdx)
      End If
    End If
  Next RowIdx
  
  If (TopicCnt = 1) Then
    Formula(1) = "=SUM(" & gc_InKind_SumColumnMarker & CStr(TopRow) & ":" & _
                           gc_InKind_SumColumnMarker & CStr(BottomRow) & ")"
  End If
  
  If (Not UseUserTopic) Then
    TopicCnt = 0
  End If
End Sub ' InKind_CollectTopics()
'

' **********************************************************************
' *                                                                    *
' *                 InKind_SelectViewModeUser_OnClick()                *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeUser_OnClick()
  InKind_SelectViewModeUser WSheet:=ActiveSheet
End Sub ' InKind_SelectViewModeUser_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                InKind_SelectViewModeVWKAll_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVWKAll_OnClick()
  InKind_SelectViewModeVWKAll WSheet:=ActiveSheet
End Sub ' InKind_SelectViewModeVWKAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               InKind_SelectViewModeVWKPrint_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVWKPrint_OnClick()
  InKind_SelectViewModeVWKPrint WSheet:=ActiveSheet
End Sub ' InKind_SelectViewModeVWKPrint_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                InKind_SelectViewModeVOKAll_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVOKAll_OnClick()
  InKind_SelectViewModeVOKAll WSheet:=ActiveSheet
End Sub ' InKind_SelectViewModeVOKAll_OnClick()
'

' **********************************************************************
' *                                                                    *
' *               InKind_SelectViewModeVOKPrint_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVOKPrint_OnClick()
  InKind_SelectViewModeVOKPrint WSheet:=ActiveSheet
End Sub ' InKind_SelectViewModeVOKPrint_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                     InKind_SelectViewModeUser()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeUser(Optional WSheet As Worksheet = Nothing)
  UpdateInKindViewMode VisibleCode:="U", _
          ShowVWKButtons:=True, ShowVOKButtons:=False, _
          WSheet:=WSheet
End Sub ' InKind_SelectViewModeUser()
'

' **********************************************************************
' *                                                                    *
' *                    InKind_SelectViewModeVWKAll()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVWKAll(Optional WSheet As Worksheet = Nothing)
  UpdateInKindViewMode VisibleCode:="B", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' InKind_SelectViewModeVWKAll()
'

' **********************************************************************
' *                                                                    *
' *                   InKind_SelectViewModeVWKPrint()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVWKPrint(Optional WSheet As Worksheet = Nothing)
  UpdateInKindViewMode VisibleCode:="b", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' InKind_SelectViewModeVWKPrint()
'

' **********************************************************************
' *                                                                    *
' *                    InKind_SelectViewModeVOKAll()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVOKAll(Optional WSheet As Worksheet = Nothing)
  UpdateInKindViewMode VisibleCode:="V", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' InKind_SelectViewModeVOKAll()
'

' **********************************************************************
' *                                                                    *
' *                   InKind_SelectViewModeVOKPrint()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_SelectViewModeVOKPrint(Optional WSheet As Worksheet = Nothing)
  UpdateInKindViewMode VisibleCode:="v", _
          ShowVWKButtons:=True, ShowVOKButtons:=True, _
          WSheet:=WSheet
End Sub ' InKind_SelectViewModeVOKPrint()
'

' **********************************************************************
' *                                                                    *
' *                       UpdateInKindViewMode()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateInKindViewMode(VisibleCode As String, _
                         ShowVWKButtons As Boolean, ShowVOKButtons As Boolean, _
                         WSheet As Worksheet)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ColumnFilter FilterRow:=c_PrintFilterRow, Code:=VisibleCode, UserSheet:=WSheet
  RowFilter FilterColumn:=c_PrintFilterColumn, Code:=VisibleCode, UserSheet:=WSheet
  
  WSheet.Range(c_WorkerTemplateRow).Rows.Hidden = True
  WSheet.Range(c_ReceiptTemplateRow).Rows.Hidden = True
  
  WSheet.Range(c_InKind_SignatureRange).Rows.Hidden = WorksheetExists(gc_SummaryWorkSheet)
  
  ShowVWKButtons = True  ' WARNING - This Overrides the Sub Parameters!!
  ShowVOKButtons = True
  
  ' WSheet.Shapes(c_Button_SelectModeVWK).Visible = ShowVWKButtons
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = ShowVWKButtons
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = ShowVWKButtons
  
  ' WSheet.Shapes(c_Button_SelectModeVOK).Visible = ShowVOKButtons
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = ShowVOKButtons
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = ShowVOKButtons
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  PopProtection WSheet:=WSheet

End Sub ' UpdateInKindViewMode()
'

' **********************************************************************
' *                                                                    *
' *                    InKind_RemoveMacros_OnClick()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_RemoveMacros_OnClick()
  Dim WSheet As Worksheet
  Set WSheet = ActiveSheet
  CreateNoMacroWBook WBook:=ThisWorkbook, _
                     ApplicantName:=WSheet.Range(c_ApplicantNameCell).Value, _
                     ApplicantID:=WSheet.Range(c_ApplicantIDCell).Value, _
                     ProjectTitle:=WSheet.Range(gc_InKind_ApplicationSubject).Value, _
                     ProjectNumber:=WSheet.Range(c_ApplicationIDCell).Value
End Sub ' InKind_RemoveMacros_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                        InKind_BeforePrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_BeforePrint(Optional WSheet As Worksheet = Nothing)
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set v_PrintWSheet = WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Shapes(c_Button_SelectModeUser).Visible = False
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = False
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = False
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = False
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = False
  WSheet.Range(c_SelectModeButtonRows).Rows.Hidden = True
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
  
End Sub ' InKind_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                         InKind_DataValid()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function InKind_DataValid(WSheet As Worksheet) As Boolean
  Dim ErrorList As String
  Dim Button As Integer
  Dim SupportPeriodStart As Date
  Dim SupportPeriodEnd As Date
  
  ErrorList = ""
  If IsEmptyString(WSheet.Range(c_ApplicantIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Betriebs-/Klientennummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicantNameCell).Value) Then
    ErrorList = ErrorList & "    .) Der Name des/der F|fffd|rderungswerber/in fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicationIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Antragsnummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_InKind_ApplicationSubject).Value) Then
    ErrorList = ErrorList & "    .) Die Bezeichnung des F|fffd|rdergegenstandes fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodStartCell).Value) Then
    ErrorList = ErrorList & "    .) Der Beginn des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodStart = WSheet.Range(c_SupportPeriodStartCell).Value
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodEndCell).Value) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodEnd = WSheet.Range(c_SupportPeriodEndCell).Value
  End If
  
  If (SupportPeriodStart > 0) And (SupportPeriodEnd > 0) And (SupportPeriodStart >= SupportPeriodEnd) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums liegt vor dem Anfang" & vbCr
  End If
  
  If (ErrorList <> "") Then
    Button = MsgBox(Prompt:="Der Zahlungsantrag ist nicht korrekt ausgef|fffd|llt:" & vbCr & _
           ErrorList & _
           vbCr & "Wollen Sie trotzdem drucken?", _
           Buttons:=vbYesNo Or vbDefaultButton2 Or vbExclamation, _
           Title:="Fehler im Zahlungsantrag")
    InKind_DataValid = (Button = vbYes)
  Else
    InKind_DataValid = True
  End If
End Function ' InKind_DataValid()
'

' **********************************************************************
' *                                                                    *
' *                         InKind_AfterPrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_AfterPrint(Optional WSheet As Worksheet = Nothing)
 
  If (v_PrintWSheet Is Nothing) Then
    If (WSheet Is Nothing) Then
      Set WSheet = ActiveSheet
    End If
  Else
    Set WSheet = v_PrintWSheet
  End If
  Set v_PrintWSheet = Nothing
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Shapes(c_Button_SelectModeUser).Visible = True
  WSheet.Shapes(c_Button_SelectModeVWKFull).Visible = True
  WSheet.Shapes(c_Button_SelectModeVWKPrint).Visible = True
  WSheet.Shapes(c_Button_SelectModeVOKFull).Visible = True
  WSheet.Shapes(c_Button_SelectModeVOKPrint).Visible = True
  WSheet.Range(c_SelectModeButtonRows).Rows.Hidden = False
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' InKind_AfterPrint()
'
' **********************************************************************
' *                                                                    *
' *               InKind_RadioButton_TaxDeduct_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub InKind_RadioButton_TaxDeduct_OnClick()
  Dim WSheet As Worksheet
  
  Set WSheet = ActiveSheet
  
  UpdateInKindTaxDeductMode _
     TaxDeductActive:=(WSheet.Range(c_TaxDeductCell).Value = "Ja"), _
     UserSheet:=WSheet
  
End Sub ' InKind_RadioButton_TaxDeduct_OnClick()
'

' **********************************************************************
' *                                                                    *
' *              InKind_CheckBox_TaxDeductEnable_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are two checkboxes on the Master sheet that indicate if the
' supplicant is permit to perform VAT deduction (i.e. if costs are given
' with or without VAT). This is just a note to the users to take care what
' the are doing and is never included in the computation anywhere...
'
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_InKind_CheckBox_TaxDeductEnable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOff
    ' WSheet.Range(c_TaxDeductCell).Value = "Ja"
  Else
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn
    ' WSheet.Range(c_TaxDeductCell).Value = "Nein"
  End If

  UpdateInKindTaxDeductMode _
     TaxDeductActive:=(CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn), _
     UserSheet:=WSheet
  
  PopProtection WSheet:=WSheet
End Sub ' InKind_CheckBox_TaxDeductEnable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *             InKind_CheckBox_TaxDeductDisable_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' See: InKind_CheckBox_TaxDeductEnable_OnClick()
#If False Then
Sub Unused_InKind_CheckBox_TaxDeductDisable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOff
    ' WSheet.Range(c_TaxDeductCell).Value = "Nein"
  Else
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn
    ' WSheet.Range(c_TaxDeductCell).Value = "Ja"
  End If
  
  UpdateInKindTaxDeductMode _
     TaxDeductActive:=(CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn), _
     UserSheet:=WSheet
  
  PopProtection WSheet:=WSheet
End Sub ' InKind_CheckBox_TaxDeductDisable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                     UpdateInKindTaxDeductMode()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub UpdateInKindTaxDeductMode(TaxDeductActive As Boolean, UserSheet As Worksheet)
  ' No Action Required!
End Sub ' UpdateInKindTaxDeductMode()
'
' **********************************************************************
' *                      UnbareSachleistungen.bas                      *
' **********************************************************************
Attribute VB_Name = "Zahlungs|fffd|bersicht"
' **********************************************************************
' *                                                                    *
' *                       Zahlungs|fffd|bersicht.bas                        *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************
'
' Nachdem lange Zeit das Stammdatenblatt als zentrale Stelle f|fffd|r die
' Verwaltung aller Zahlungsstr|fffd|me gedient hat, wurde sp|fffd|ter beschlossen
' auch das Formular f|fffd|r den Zahlungsantrag in das Abrechnungstool zu
' integrieren und es als zentralen Punkt des Systems zu verwenden.
'
' Der F|fffd|rderungswerber gibt also hier seine Stammdaten ein und Excel
' verteilt sie auf alle anderen Tabellenbl|fffd|tter. Daneben gibt es eine
' |fffd|bersichtsblatt f|fffd|r alle Kostenarten. Dort kann der Benutzer einerseits
' sehen welche Abrechungsbl|fffd|tter er schon alles ausgef|fffd|llt hat bzw.
' welche Summen er beantragt hat. Die Gesamtsummen aus diesem |fffd|bersichts-
' blatt (summiert |fffd|ber alle Kostenarten) werden dann wieder in die
' Zahlungs|fffd|bersicht |fffd|bernommen.
'
' Insgesamt existiert also ein dreistufiges System:
'  .) Die Zahlungs|fffd|bersicht erfasst die Stammdaten und berichtet |fffd|ber
'     die beantragte Gesamtsumme
'  .) Das |fffd|bersichtsblatt berichtet |fffd|ber alle Abrechnungsbl|fffd|tter und
'     die Summen aus jedem Abrechnungsblatt
'  .) Die (mehreren) Abrechnungsbl|fffd|tter berichten stets |fffd|ber eine einzelne
'     Kostenart (Personal-, Sach- oder Investkosten bzw. Unbare
'     Sachleistungen) f|fffd|r einen bestimmten F|fffd|rdergegenstand.
'
'  Aus historischen Gr|fffd|nden existiert noch das Stammdatenblatt, welches
'  fr|fffd|her dazu diente die Stammdaten zu erfassen und die Erzeugung von
'  Abrechungsbl|fffd|ttern zu steuern. Dieses ist z.Z. noch als Schatten der
'  Zahlungs|fffd|bersicht vorhanden aber praktisch nicht mehr f|fffd|r den Benutzer
'  sichtbar.
'  Vermutlich wird irgendwann die Entscheidung fallen, dass das Abrechungs-
'  system niemals ohne die Zahlungs|fffd|bersicht betrieben werden wird. Dann
'  kann das Stammdatenblatt sterben.
'
' Das Formular f|fffd|r den Zahlungsantrag war urspr|fffd|nglich dazu gedacht auf
' Papier ausgedruckt und dann h|fffd|ndisch bef|fffd|llt zu werden. Daher wurde
' besonderes Augenmerk auf das sch|fffd|ne Design gelegt und der Benutzer mit
' einzelnen K|fffd|stchen f|fffd|r jede Stelle einer langen Zahl (z.B. Geburtsdatum,
' IBAN, BIC) dazu angeleitet sch|fffd|n zu schreiben (statt seiner 'Klaue'
' freien Lauf zu lassen.
' Um Benutzern die das Papierformular gew|fffd|hnt sind die Umstellung zu
' ersparen wurde entschieden das Formular nicht zu ver|fffd|ndern. Es besteht
' daher weiterhin aus einer wilden Ansammlung verbundener Zellen, mit all
' den damit im Betrieb am Computer verbundenen Nachteilen (z.B. bei der
' Verwendung von Copy&Paste.
' Es mag erstrebenswert sein, hier _sehr_ gr|fffd|ndlich aufzur|fffd|umen. Zumindest
' die vertikal verbundene Zellen k|fffd|nnen alle aufgel|fffd|st werden ohne das
' Layout zu zerst|fffd|ren...
'
'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.248   Roland Lieger     4.11.2015    Getting Ready for Release
'  1.0.0.254   Roland Lieger     6.11.2015    Added DataValid() Check
'                                             Added IsValidBIC/IBAN()
'  1.0.0.268   Roland Lieger    11.11.2015    Getting Ready for Release
'  1.0.0.300   Roland Lieger    24.11.2015    Added SelectProvince
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************

Option Explicit

Public Const gc_PaymAppl_TemplateSheet As String = "TEMPLATE Zahlungsantrag"
Public Const gc_PaymAppl_WorkSheet As String = "Zahlungsantrag LEW14-20"
 
Public Const gc_PaymAppl_AMALogoArea As String = "PaymAppl_AMALogoArea"
Public Const gc_PaymAppl_SponsorLogoArea As String = "PaymAppl_SponsorLogoArea"

Public Const gc_PaymAppl_SponsorCell As String = "PaymAppl_Sponsor"
Public Const gc_PaymAppl_PrevSponsorCell As String = "PaymAppl_PrevSponsor"
Public Const gc_PaymAppl_ProvinceIdxCell As String = "PaymAppl_ProvinceIdx"
Public Const gc_PaymAppl_ProvinceLogoCell As String = "PaymAppl_ProvinceLogo"

Public Const gc_PaymAppl_FormVersionCell As String = "PaymAppl_FormVersion"

Public Const gc_PaymAppl_IntentCodeCell As String = "PaymAppl_IntentCode"
Public Const gc_PaymAppl_IntentNameCell As String = "PaymAppl_IntentName"
Public Const gc_PaymAppl_ApplicantIDCell As String = "PaymAppl_ApplicantID"
Public Const gc_PaymAppl_ApplicantNameCell As String = "PaymAppl_ApplicantName"
Public Const gc_PaymAppl_ApplicationIDCell As String = "PaymAppl_ApplicationID"
Public Const gc_PaymAppl_TaxDeductCell As String = "PaymAppl_TaxDeduct"
Public Const gc_PaymAppl_SupportPeriodStartCell As String = "PaymAppl_SupportPeriodStart"
Public Const gc_PaymAppl_SupportPeriodEndCell As String = "PaymAppl_SupportPeriodEnd"

Public Const gc_PaymAppl_PartialPaymentID As String = "PaymAppl_PartialPaymID"
Public Const gc_PaymAppl_PartialPaymentSelect As String = "PaymAppl_PartialPaymSelect"
Public Const gc_PaymAppl_PartialPaymTitle As String = "PaymAppl_PartialPaymTitle"
Public Const gc_PaymAppl_AmountInclTaxCell As String = "PaymAppl_AmountInclTax"
Public Const gc_PaymAppl_AmountExclTaxCell As String = "PaymAppl_AmountExclTax"
Public Const gc_PaymAppl_AppliedAmountCell As String = "PaymAppl_AppliedAmount"
Public Const gc_PaymAppl_RevenueCell As String = "PaymAppl_Revenue"

Private Const c_Checkbox_PartialPaymAppl As String = "CheckBox_PartialPaymAppl"
Private Const c_Checkbox_FinalPaymAppl As String = "CheckBox_FinalPaymAppl"
' Private Const c_Checkbox_TaxDeductEnable As String = "Checkbox_TaxDeductEnable"
' Private Const c_Checkbox_TaxDeductDisable As String = "Checkbox_TaxDeductDisable"
Private Const c_RadioButton_TaxDeductEnable As String = "RadioButton_TaxDeductEnable"
Private Const c_RadioButton_TaxDeductDisable As String = "RadioButton_TaxDeductDisable"

Private Const c_PaymAppl_IndividualNameCell As String = "PaymAppl_IndividualName"
Private Const c_PaymAppl_CoupleNameACell As String = "PaymAppl_CoupleNameA"
Private Const c_PaymAppl_CoupleNameBCell As String = "PaymAppl_CoupleNameB"
Private Const c_PaymAppl_LegalEntityNameCell As String = "PaymAppl_LegalEntityName"
Private Const c_PaymAppl_PersonGroupNameCell As String = "PaymAppl_PersonGroupName"

' Private Const c_Checkbox_Individual As String = "Checkbox_Individual"
' Private Const c_Checkbox_Couple As String = "Checkbox_Couple"
' Private Const c_Checkbox_LegalEntity As String = "Checkbox_LegalEntity"
' Private Const c_Checkbox_PersonGroup As String = "Checkbox_PersonGroup"
Private Const c_RadioButton_Individual As String = "RadioButton_Individual"
Private Const c_RadioButton_Couple As String = "RadioButton_Couple"
Private Const c_RadioButton_LegalEntity As String = "RadioButton_LegalEntity"
Private Const c_RadioButton_PersonGroup As String = "RadioButton_PersonGroup"

Private Const c_AccountBICRange As String = "PaymAppl_BIC"
Private Const c_AccountIBANRange As String = "PaymAppl_IBAN"

Private Const c_Button_EraseAll As String = "Button_EraseAll"
Private Const c_Button_CreateInvestSheet As String = "Button_CreateInvestSheet"
Private Const c_Button_CreateMaterialSheet As String = "Button_CreateMaterialSheet"
Private Const c_Button_CreateInKindContribSheet As String = "Button_CreateInKindContribSheet"
Private Const c_Button_CreateStdCostSheet As String = "Button_CreateStdCostSheet"
Private Const c_Button_CreateLabourSheet As String = "Button_CreateLabourSheet"

' **********************************************************************

Const gc_Logo_Sheet As String = "TEMPLATE Logos"

Const gc_Logo_AMA As String = "Logo-AMA"
Const gc_Logo_BMLFUW As String = "Logo-BMLFUW"
' Const gc_Logo_BMNT As String = "Logo-BMNT-2018-2"
Const gc_Logo_BMNT As String = "Logo-BMNT-2018-3"
Const gc_Logo_BMWFW As String = "Logo-BMWFW"
Const gc_Logo_BMDW As String = "Logo-BMDW-2018"
' Const gc_Logo_BMVIT As String = "Logo-BMVIT"
Const gc_Logo_BMVIT As String = "Logo-BMVIT-2018"
Const gc_Logo_LE1420 As String = "Logo-LE1420"
Const gc_Logo_LEADER As String = "Logo-Leader"
Const gc_Logo_EU As String = "Logo-EU"

Const gc_Logo_Burgenland As String = "Logo-Burgenland"
Const gc_Logo_Kaernten As String = "Logo-K|fffd|rnten"
Const gc_Logo_NOe As String = "Logo-NOe"
Const gc_Logo_OOe As String = "Logo-OOe"
Const gc_Logo_Salzburg As String = "Logo-Salzburg"
Const gc_Logo_Steiermark As String = "Logo-Steiermark"
Const gc_Logo_Tirol As String = "Logo-Tirol"
Const gc_Logo_Vorarlberg As String = "Logo-Vorarlberg"
Const gc_Logo_Wien As String = "Logo-Wien"

' **********************************************************************
' *                                                                    *
' *                        PaymAppl_DataValid()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function PaymAppl_DataValid(WSheet As Worksheet) As Boolean
  Dim ErrorList As String
  Dim BIC As String
  Dim IBAN As String
  Dim Button As Integer
  Dim RowIdx As Integer
  Dim ColIdx As Integer
  Dim LeftColumnIdx As Integer
  Dim RightColumnIdx As Integer
  Dim SupportPeriodStart As Date
  Dim SupportPeriodEnd As Date
  
  ErrorList = ""
  If IsEmptyString(WSheet.Range(gc_PaymAppl_ApplicationIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Antragsnummer fehlt" & vbCr
  End If
  
  If (WSheet.Shapes(c_Checkbox_PartialPaymAppl).ControlFormat.Value = xlOn) And _
      IsEmptyString(WSheet.Range(gc_PaymAppl_PartialPaymentID).Value) Then
    ErrorList = ErrorList & "    .) Die Nummer der Teilabrechnung fehlt" & vbCr
  End If
  
  If (WSheet.Shapes(c_Checkbox_FinalPaymAppl).ControlFormat.Value = xlOn) And _
      Not IsEmptyString(WSheet.Range(gc_PaymAppl_PartialPaymentID).Value) Then
    ErrorList = ErrorList & "    .) Es wurde eine Nummer f|fffd|r eine Teilabrechnung angegeben, obwohl eine Enabrechnung vorliegt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_PaymAppl_IntentCodeCell).Value) Or _
     WSheet.Range(gc_PaymAppl_IntentCodeCell).Value = "Bitte ausw|fffd|hlen" Or _
     WSheet.Range(gc_PaymAppl_IntentCodeCell).Value = " - " Then
    ErrorList = ErrorList & "    .) Die Vorhabensart ist ung|fffd|ltig" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_PaymAppl_IntentNameCell).Value) Then
    ErrorList = ErrorList & "    .) Die Kurzbezeichnung des Vorhabens fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_PaymAppl_ApplicantIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Betriebs-/Klientennummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value) Then
    ErrorList = ErrorList & "    .) Der Name des/der F|fffd|rderungswerber/in fehlt" & vbCr
  End If
  
  RowIdx = WSheet.Range(c_AccountBICRange).Row
  LeftColumnIdx = WSheet.Range(c_AccountBICRange).Column
  RightColumnIdx = LeftColumnIdx + WSheet.Range(c_AccountBICRange).Columns.Count - 1
  BIC = ""
  For ColIdx = LeftColumnIdx To RightColumnIdx
    BIC = BIC & WSheet.Cells(RowIdx, ColIdx).Value
  Next ColIdx
  If IsEmptyString(BIC) Then
    ' Since Feb. 2016 the BIC is optional not only for payments
    ' within Austria but also within the entire EWR. This includes
    ' all neighbours of Austria except Switzerland.
    ' Thus we shall no longer consider a missing BIC an error!
    ' ErrorList = ErrorList & "    .) In der Bankverbindung fehlt der BIC" & vbCr
  ElseIf Not IsValidBIC(BIC) Then
    ErrorList = ErrorList & "    .) Die Bankverbindung verwendet einen ung|fffd|ltigen BIC" & vbCr
  End If
  
  RowIdx = WSheet.Range(c_AccountIBANRange).Row
  LeftColumnIdx = WSheet.Range(c_AccountIBANRange).Column
  RightColumnIdx = LeftColumnIdx + WSheet.Range(c_AccountIBANRange).Columns.Count - 1
  IBAN = ""
  For ColIdx = LeftColumnIdx To RightColumnIdx
    IBAN = IBAN & WSheet.Cells(RowIdx, ColIdx).Value
  Next ColIdx
  If IsEmptyString(IBAN) Then
    ErrorList = ErrorList & "    .) In der Bankverbindung fehlt der IBAN" & vbCr
  ElseIf Not IsValidIBAN(IBAN) Then
    ErrorList = ErrorList & "    .) Die Bankverbindung verwendet einen ung|fffd|ltigen IBAN" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(gc_PaymAppl_SupportPeriodStartCell).Value) Then
    ErrorList = ErrorList & "    .) Der Beginn des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodStart = WSheet.Range(gc_PaymAppl_SupportPeriodStartCell).Value
  End If
  
  If IsEmptyString(WSheet.Range(gc_PaymAppl_SupportPeriodEndCell).Value) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodEnd = WSheet.Range(gc_PaymAppl_SupportPeriodEndCell).Value
  End If
  
  If (SupportPeriodStart > 0) And (SupportPeriodEnd > 0) And (SupportPeriodStart >= SupportPeriodEnd) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums liegt vor dem Anfang" & vbCr
  End If
  
  If (ErrorList <> "") Then
    Button = MsgBox(Prompt:="Der Zahlungsantrag ist nicht korrekt ausgef|fffd|llt:" & vbCr & _
           ErrorList & _
           vbCr & "Wollen Sie trotzdem drucken?", _
           Buttons:=vbYesNo Or vbDefaultButton2 Or vbExclamation, _
           Title:="Fehler im Zahlungsantrag")
    PaymAppl_DataValid = (Button = vbYes)
  Else
    PaymAppl_DataValid = True
  End If
End Function ' PaymAppl_DataValid()
'

' **********************************************************************
' *                                                                    *
' *                   PaymAppl_RemoveMacros_OnClick()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_RemoveMacros_OnClick()
  Dim WSheet As Worksheet
  Set WSheet = ActiveSheet
  CreateNoMacroWBook WBook:=ThisWorkbook, _
                     ApplicantName:=WSheet.Range(gc_PaymAppl_ApplicantNameCell).Value, _
                     ApplicantID:=WSheet.Range(gc_PaymAppl_ApplicantIDCell).Value, _
                     ProjectTitle:=WSheet.Range(gc_PaymAppl_IntentNameCell).Value, _
                     ProjectNumber:=WSheet.Range(gc_PaymAppl_ApplicationIDCell).Value
End Sub ' PaymAppl_RemoveMacros_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                    Unused_PaymAppl_SetProvince()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
#If False Then
Sub Unused_PaymAppl_SetProvince()
  Dim WSheet As Worksheet
  Dim PrevProtected As Boolean
  Dim Province As Integer
 
  Set WSheet = Application.ActiveSheet
  
  Province = 0
  On Error GoTo InvalidProvince
  Province = WSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value
  If (Province < 1) Or (Province > 10) Then
    Province = 0
  End If
InvalidProvince:
  If (Province = 0) Then
  
    PrevProtected = WSheet.ProtectContents
    If PrevProtected Then
      WSheet.Unprotect (gc_Password)
    End If
    
    Province = 4 ' FIXME  - 4 .. Ober|fffd|sterreich - FIXME
    Range(gc_PaymAppl_ProvinceIdxCell).Value = Province
    
    If PrevProtected Then
      WSheet.Protect (gc_Password)
    End If
  End If
End Sub ' Unused_PaymAppl_SetProvince()
#End If
'

' **********************************************************************
' *                                                                    *
' *             PaymAppl_CheckBox_PartialPaymAppl_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_PaymAppl_CheckBox_PartialPaymAppl_OnClick()
  Dim Checkbox_PartialPaymAppl As Shape
  Dim Checkbox_FinalPaymAppl As Shape

  ' Fetch Handles to Checkboxes
  Set Checkbox_PartialPaymAppl = ActiveSheet.Shapes(c_Checkbox_PartialPaymAppl)
  Set Checkbox_FinalPaymAppl = ActiveSheet.Shapes(c_Checkbox_FinalPaymAppl)
  
  ActiveSheet.Unprotect (gc_Password)
  
  ' Perform RadioButton logic
  If (Checkbox_PartialPaymAppl.ControlFormat.Value = xlOn) Then
    Checkbox_FinalPaymAppl.ControlFormat.Value = xlOff
  Else
    Checkbox_FinalPaymAppl.ControlFormat.Value = xlOn
  End If

  ActiveSheet.Protect (gc_Password)
End Sub ' PaymAppl_CheckBox_PartialPaymAppl_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *              PaymAppl_CheckBox_FinalPaymAppl_OnClick()             *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_PaymAppl_CheckBox_FinalPaymAppl_OnClick()
  Dim Checkbox_PartialPaymAppl As Shape
  Dim Checkbox_FinalPaymAppl As Shape

  ' Fetch Handles to Checkboxes
  Set Checkbox_PartialPaymAppl = ActiveSheet.Shapes(c_Checkbox_PartialPaymAppl)
  Set Checkbox_FinalPaymAppl = ActiveSheet.Shapes(c_Checkbox_FinalPaymAppl)
  
  ActiveSheet.Unprotect (gc_Password)
  
  ' Perform RadioButton logic
  If (Checkbox_FinalPaymAppl.ControlFormat.Value = xlOn) Then
    Checkbox_PartialPaymAppl.ControlFormat.Value = xlOff
  Else
    Checkbox_PartialPaymAppl.ControlFormat.Value = xlOn
  End If

  ActiveSheet.Protect (gc_Password)
End Sub ' PaymAppl_CheckBox_FinalPaymAppl_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *              PaymAppl_RadioButton_TaxDeduct_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_RadioButton_TaxDeduct_OnClick()
  Dim WSheet As Worksheet
  Set WSheet = ActiveSheet
  UpdateTaxDeductMode (WSheet.Range(gc_PaymAppl_TaxDeductCell).Value = "Ja")
End Sub ' PaymAppl_RadioButton_TaxDeduct_OnClick()
'

' **********************************************************************
' *                                                                    *
' *             PaymAppl_CheckBox_TaxDeductEnable_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' There are two checkboxes on the Master sheet that indicate if the
' supplicant is permit to perform VAT deduction (i.e. if costs are given
' with or without VAT). This is just a note to the users to take care what
' the are doing and is never included in the computation anywhere...
'
' For historical reasons this is implemented using two checkboxes, rather
' than two radiobuttons. The origins of this behaviour are lost in the
' depths of time, but shall not be changed.... However this means that
' we need to implement the radio button behaviour ourselves...
#If False Then
Sub Unused_PaymAppl_CheckBox_TaxDeductEnable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOff
    ' WSheet.Range(gc_PaymAppl_TaxDeductCell).Value = "Ja"
    Summary_AdjustTaxDeduct SummarySheet:=WSheet.Parent.Worksheets(gc_SummaryWorkSheet), _
                            TaxDeductEnable:=True
  Else
    CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn
    ' WSheet.Range(gc_PaymAppl_TaxDeductCell).Value = "Nein"
    Summary_AdjustTaxDeduct SummarySheet:=WSheet.Parent.Worksheets(gc_SummaryWorkSheet), _
                            TaxDeductEnable:=False
  End If

  UpdateTaxDeductMode (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn)
  
  PopProtection WSheet:=WSheet
End Sub ' PaymAppl_CheckBox_TaxDeductEnable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *            PaymAppl_CheckBox_TaxDeductDisable_OnClick()            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' See: CheckBox_TaxDeductEnable_OnClick()
#If False Then
Sub Usused_PaymAppl_CheckBox_TaxDeductDisable_OnClick()
  Dim WSheet As Worksheet
  Dim CheckBox_TaxDeductEnable As Shape
  Dim CheckBox_TaxDeductDisable As Shape
  
  Set WSheet = ActiveSheet
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Fetch Handles to Checkboxes
  Set CheckBox_TaxDeductEnable = WSheet.Shapes(c_Checkbox_TaxDeductEnable)
  Set CheckBox_TaxDeductDisable = WSheet.Shapes(c_Checkbox_TaxDeductDisable)
  
  ' Perform RadioButton logic
  If (CheckBox_TaxDeductDisable.ControlFormat.Value = xlOn) Then
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOff
    ' WSheet.Range(gc_PaymAppl_TaxDeductCell).Value = "Nein"
    Summary_AdjustTaxDeduct SummarySheet:=WSheet.Parent.Worksheets(gc_SummaryWorkSheet), _
                            TaxDeductEnable:=False
  Else
    CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn
    ' WSheet.Range(gc_PaymAppl_TaxDeductCell).Value = "Ja"
    Summary_AdjustTaxDeduct SummarySheet:=WSheet.Parent.Worksheets(gc_SummaryWorkSheet), _
                            TaxDeductEnable:=True
  End If
  
  UpdateTaxDeductMode (CheckBox_TaxDeductEnable.ControlFormat.Value = xlOn)
  
  PopProtection WSheet:=WSheet
End Sub ' PaymAppl_CheckBox_TaxDeductDisable_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *               PaymAppl_Checkbox_Individual_OnClick()               *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
#If False Then
Sub PaymAppl_Checkbox_Individual_OnClick()
  Dim Checkbox_Individual As Shape
  Dim Checkbox_Couple As Shape
  Dim Checkbox_LegalEntity As Shape
  Dim Checkbox_PersonGroup As Shape
  Dim Checked As Integer
  
  ' Fetch Handles to Checkboxes
  Set Checkbox_Individual = ActiveSheet.Shapes(c_Checkbox_Individual)
  Set Checkbox_Couple = ActiveSheet.Shapes(c_Checkbox_Couple)
  Set Checkbox_LegalEntity = ActiveSheet.Shapes(c_Checkbox_LegalEntity)
  Set Checkbox_PersonGroup = ActiveSheet.Shapes(c_Checkbox_PersonGroup)
  
  PushProtection WSheet:=ActiveSheet
  RemoveProtection WSheet:=ActiveSheet
  
  ' Perform RadioButton logic
  ' Note that we shall not allow 'No Selection' - Thus clicking on a
  ' given radio button will _always_ activate this choice. It does
  ' _not_ perform a toggle operation, since we would otherwise not
  ' know which alternative to enable!
  Checkbox_Individual.ControlFormat.Value = xlOn
  Checkbox_Couple.ControlFormat.Value = xlOff
  Checkbox_LegalEntity.ControlFormat.Value = xlOff
  Checkbox_PersonGroup.ControlFormat.Value = xlOff
  
  ' ActiveSheet.Range(gc_PaymAppl_ApplicantNameCell).Formula = _
          "=TRIM(" & c_PaymAppl_IndividualNameCell & ")"
  
  PopProtection WSheet:=ActiveSheet
End Sub ' PaymAppl_Checkbox_Individual_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                 PaymAppl_Checkbox_Couple_OnClick()                 *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
#If False Then
Sub Unused_PaymAppl_Checkbox_Couple_OnClick()
  Dim Checkbox_Individual As Shape
  Dim Checkbox_Couple As Shape
  Dim Checkbox_LegalEntity As Shape
  Dim Checkbox_PersonGroup As Shape
  Dim Checked As Integer
  
  ' Fetch Handles to Checkboxes
  Set Checkbox_Individual = ActiveSheet.Shapes(c_Checkbox_Individual)
  Set Checkbox_Couple = ActiveSheet.Shapes(c_Checkbox_Couple)
  Set Checkbox_LegalEntity = ActiveSheet.Shapes(c_Checkbox_LegalEntity)
  Set Checkbox_PersonGroup = ActiveSheet.Shapes(c_Checkbox_PersonGroup)
  
  PushProtection WSheet:=ActiveSheet
  RemoveProtection WSheet:=ActiveSheet
  
  ' Perform RadioButton logic
  ' Note that we shall not allow 'No Selection' - Thus clicking on a
  ' given radio button will _always_ activate this choice. It does
  ' _not_ perform a toggle operation, since we would otherwise not
  ' know which alternative to enable!
  Checkbox_Individual.ControlFormat.Value = xlOff
  Checkbox_Couple.ControlFormat.Value = xlOn
  Checkbox_LegalEntity.ControlFormat.Value = xlOff
  Checkbox_PersonGroup.ControlFormat.Value = xlOff
  
  ' ActiveSheet.Range(gc_PaymAppl_ApplicantNameCell).Formula = _
          "=IF(TRIM(" & c_PaymAppl_CoupleNameACell & ") = " & Chr(34) & Chr(34) & "," & _
          Chr(34) & "???" & Chr(34) & "," & c_PaymAppl_CoupleNameACell & ")" & _
          " & " & Chr(34) & " / " & Chr(34) & " & " & _
          "IF(TRIM(" & c_PaymAppl_CoupleNameBCell & ") = " & Chr(34) & Chr(34) & "," & _
          Chr(34) & "???" & Chr(34) & "," & c_PaymAppl_CoupleNameBCell & ")"
  
  PopProtection WSheet:=ActiveSheet
End Sub ' PaymAppl_Checkbox_Couple_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *               PaymAppl_Checkbox_LegalEntity_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
#If False Then
Sub Unused_PaymAppl_Checkbox_LegalEntity_OnClick()
  Dim Checkbox_Individual As Shape
  Dim Checkbox_Couple As Shape
  Dim Checkbox_LegalEntity As Shape
  Dim Checkbox_PersonGroup As Shape
  Dim Checked As Integer
  
  ' Fetch Handles to Checkboxes
  Set Checkbox_Individual = ActiveSheet.Shapes(c_Checkbox_Individual)
  Set Checkbox_Couple = ActiveSheet.Shapes(c_Checkbox_Couple)
  Set Checkbox_LegalEntity = ActiveSheet.Shapes(c_Checkbox_LegalEntity)
  Set Checkbox_PersonGroup = ActiveSheet.Shapes(c_Checkbox_PersonGroup)
  
  PushProtection WSheet:=ActiveSheet
  RemoveProtection WSheet:=ActiveSheet
  
  ' Perform RadioButton logic
  ' Note that we shall not allow 'No Selection' - Thus clicking on a
  ' given radio button will _always_ activate this choice. It does
  ' _not_ perform a toggle operation, since we would otherwise not
  ' know which alternative to enable!
  Checkbox_Individual.ControlFormat.Value = xlOff
  Checkbox_Couple.ControlFormat.Value = xlOff
  Checkbox_LegalEntity.ControlFormat.Value = xlOn
  Checkbox_PersonGroup.ControlFormat.Value = xlOff
  
  ' ActiveSheet.Range(gc_PaymAppl_ApplicantNameCell).Formula = _
          "=TRIM(" & c_PaymAppl_LegalEntityNameCell & ")"
  
  PopProtection WSheet:=ActiveSheet
End Sub ' PaymAppl_Checkbox_LegalEntity_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *               PaymAppl_Checkbox_PersonGroup_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
#If False Then
Sub Unused_PaymAppl_Checkbox_PersonGroup_OnClick()
  Dim Checkbox_Individual As Shape
  Dim Checkbox_Couple As Shape
  Dim Checkbox_LegalEntity As Shape
  Dim Checkbox_PersonGroup As Shape
  Dim Checked As Integer
  
  ' Fetch Handles to Checkboxes
  Set Checkbox_Individual = ActiveSheet.Shapes(c_Checkbox_Individual)
  Set Checkbox_Couple = ActiveSheet.Shapes(c_Checkbox_Couple)
  Set Checkbox_LegalEntity = ActiveSheet.Shapes(c_Checkbox_LegalEntity)
  Set Checkbox_PersonGroup = ActiveSheet.Shapes(c_Checkbox_PersonGroup)
  
  PushProtection WSheet:=ActiveSheet
  RemoveProtection WSheet:=ActiveSheet
  
  ' Perform RadioButton logic
  ' Note that we shall not allow 'No Selection' - Thus clicking on a
  ' given radio button will _always_ activate this choice. It does
  ' _not_ perform a toggle operation, since we would otherwise not
  ' know which alternative to enable!
  Checkbox_Individual.ControlFormat.Value = xlOff
  Checkbox_Couple.ControlFormat.Value = xlOff
  Checkbox_LegalEntity.ControlFormat.Value = xlOff
  Checkbox_PersonGroup.ControlFormat.Value = xlOn
  
  ' ActiveSheet.Range(gc_PaymAppl_ApplicantNameCell).Formula = _
          "=TRIM(" & c_PaymAppl_PersonGroupNameCell & ")"
  
  PopProtection WSheet:=ActiveSheet
End Sub ' PaymAppl_Checkbox_PersonGroup_OnClick()
#End If
'

' **********************************************************************
' *                                                                    *
' *                     PaymAppl_AdjustIntentName()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_AdjustIntentName(WSheet As Worksheet)
  Dim IntentName As String
  Dim TemplateSheet As Worksheet
  Dim MagicIntentName As Boolean
  
  IntentName = WSheet.Range(gc_PaymAppl_IntentNameCell).Value
  MagicIntentName = False
  
  If (IntentName = gc_DebugApplicantName) Or _
     (IntentName = gc_UnlockApplicantName) Then
    MagicIntentName = True
  End If
  
  If (IntentName = gc_ResetConfigApplicantName) Then
    MagicIntentName = True
    If (WorksheetExists(gc_PaymAppl_TemplateSheet)) Then
      Set TemplateSheet = ThisWorkbook.Worksheets(gc_PaymAppl_TemplateSheet)
      
      PushProtection WSheet:=WSheet
      RemoveProtection WSheet:=WSheet
      
      WSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value = 0
      WSheet.Range(gc_PaymAppl_ProvinceLogoCell).Value = ""
      
      PopProtection WSheet:=WSheet
      
      PushProtection WSheet:=TemplateSheet
      RemoveProtection WSheet:=TemplateSheet
      
      TemplateSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value = 0
      TemplateSheet.Range(gc_PaymAppl_ProvinceLogoCell).Value = ""
      
      PopProtection WSheet:=TemplateSheet
    
      PaymAppl_AdjustLogos WSheet:=WSheet
    End If
  End If
  
  If (IntentName = gc_UnlockWBookApplicantName) Then
    MagicIntentName = True
    UnprotectAllSheets
  End If
  
  If (IntentName = gc_LockWBookApplicantName) Then
    MagicIntentName = True
    ProtectAllSheets
  End If
  
  If (MagicIntentName) Then
    PushProtection WSheet:=WSheet
    RemoveProtection WSheet:=WSheet
    WSheet.Range(gc_PaymAppl_IntentNameCell).Value = ""
    PopProtection WSheet:=WSheet
  End If
End Sub ' PaymAppl_AdjustIntentName()
'

' **********************************************************************
' *                                                                    *
' *                     PaymAppl_ProtectAllSheets()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_ProtectAllSheets()
  Dim CoreDataWSheet As Worksheet
  
  ProtectAllSheets
  If WorksheetExists(gc_Stm_CoreDataWorkSheet) Then
    Set CoreDataWSheet = ThisWorkbook.Worksheets(gc_Stm_CoreDataWorkSheet)
    PushProtection WBook:=ThisWorkbook, WSheet:=CoreDataWSheet
    RemoveProtection WBook:=ThisWorkbook, WSheet:=CoreDataWSheet
    CoreDataWSheet.Visible = False
    PopProtection WBook:=ThisWorkbook, WSheet:=CoreDataWSheet
  End If
End Sub ' PaymAppl_ProtectAllSheets()
'

' **********************************************************************
' *                                                                    *
' *                     PaymAppl_SelectProvince()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Private Sub PaymAppl_SelectProvince()
  Dim WSheet As Worksheet
  Dim Province As Integer
  
  Application.Calculation = xlCalculationAutomatic
  
  ' Debug.Print "PaymAppl_SelectProvince() - Executed" & Now()

  Set WSheet = ThisWorkbook.Worksheets(gc_PaymAppl_TemplateSheet)
  
  Province = 0
  On Error GoTo InvalidProvince
  Province = WSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value
  If (Province < 1) Or (Province > 10) Then
    Province = 0
  End If
InvalidProvince:

  If (Province = 0) Then
    SelectProvince.Show
  End If
  
End Sub ' PaymAppl_SelectProvince()

' **********************************************************************
' *                                                                    *
' *                       PaymAppl_ShowAllLogos()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_ShowAllLogos(WSheet As Worksheet)
  Dim XShape As Shape
  For Each XShape In WSheet.Shapes
    If (XShape.Type = msoPicture) Then
      XShape.Visible = True
    End If
  Next XShape
End Sub ' PaymAppl_ShowAllLogos()


' **********************************************************************
' *                                                                    *
' *                     PaymAppl_DebugAdjustLogos()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_DebugAdjustLogos()
  PaymAppl_AdjustLogos WSheet:=ThisWorkbook.Worksheets(gc_PaymAppl_TemplateSheet)
End Sub ' PaymAppl_DebugAdjustLogos()
'_

' **********************************************************************
' *                                                                    *
' *                       PaymAppl_AdjustLogos()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub PaymAppl_AdjustLogos(WSheet As Worksheet)
  Dim SponsorInfo As String
  Dim LogoRange As Range
  Dim Image As Shape
  
  Dim AMALogo As Shape
  
  Dim Sponsor() As String
  Dim SponsorName As String
  Dim SponsorLogo(0 To 31) As Shape
  Dim SponsorCnt As Integer
  
  Dim ZoomX As Double, ZoomY As Double
  Dim Zoom As Double
  
  Dim FrameTop As Integer, FrameLeft As Integer
  Dim FrameBottom As Integer, FrameRight As Integer
  Dim FrameWidth As Integer, FrameHeight As Integer
  Dim ImageWidth As Integer, ImageHeight As Integer
  Dim LogoWidth As Integer, LogoHeight As Integer
  Dim PosX As Double, StepX As Double
  Dim ImagePosX As Integer, ImagePosY As Integer
  Dim FrameBorder As Integer
  Dim FrameBorderExt As Double
  Dim I As Integer
  Dim Province As Integer
  
  Dim RetryCnt As Integer
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  SponsorInfo = WSheet.Range(gc_PaymAppl_SponsorCell).Value
  WSheet.Range(gc_PaymAppl_PrevSponsorCell).Value = SponsorInfo
  
  ImagePosX = WSheet.UsedRange.Columns.Count
  ImagePosX = WSheet.Columns(ImagePosX + 1).Left + 20
  ImagePosY = WSheet.Rows(7).Top
  For Each Image In WSheet.Shapes
    If (Image.Type = msoPicture) Then
      Image.Left = ImagePosX
      Image.Top = ImagePosY
      ImagePosY = ImagePosY + 100
      Image.LockAspectRatio = False
      Image.ScaleWidth 0.5, True
      Image.ScaleHeight 0.5, True
      Image.LockAspectRatio = True
      Image.Visible = False
      Image.ControlFormat.PrintObject = False
    End If
  Next Image

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ' Set AMALogo = CopyUserShape(SrcShape:=ThisWorkbook.Worksheets(gc_Logo_Sheet).Shapes(gc_Logo_AMA), _
                                TargetWSheet:=WSheet)
  
  Set AMALogo = WSheet.Shapes(gc_Logo_AMA) ' .Duplicate
  Set LogoRange = WSheet.Range(gc_PaymAppl_AMALogoArea)
  FrameTop = LogoRange.Top
  FrameLeft = LogoRange.Left
  FrameWidth = LogoRange.Width
  FrameHeight = LogoRange.Height
  FrameBottom = FrameTop + FrameHeight
  FrameRight = FrameLeft + FrameWidth
  FrameBorder = 2
  
  If Not (AMALogo Is Nothing) Then
    AMALogo.Visible = True
    AMALogo.ControlFormat.PrintObject = True
    ImageWidth = AMALogo.Width
    ImageHeight = AMALogo.Height
    
    ZoomX = (FrameWidth - FrameBorder) / ImageWidth
    ZoomY = (FrameHeight - FrameBorder) / ImageHeight
    If (ZoomX < ZoomY) Then
      Zoom = ZoomX
    Else
      Zoom = ZoomY
    End If
    
    LogoWidth = AMALogo.Width
    LogoHeight = AMALogo.Height
    AMALogo.Width = LogoWidth * Zoom
    AMALogo.Height = LogoHeight * Zoom
    AMALogo.Left = FrameLeft + (FrameWidth - AMALogo.Width) / 2
    ' AMALogo.Top = FrameTop + (FrameHeight - AMALogo.Height) / 2  ' Align Center
    AMALogo.Top = FrameBottom - AMALogo.Height ' Align Bottom
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  RetryCnt = 0
  Do
    Sponsor = Split(SponsorInfo, "/")
    SponsorCnt = 0
    For I = LBound(Sponsor) To UBound(Sponsor)
      If (Sponsor(I) = "EU") Then         ' Europ. Union
        SponsorName = gc_Logo_EU
      ElseIf (Sponsor(I) = "BD") Then     ' Bund => BMNT (nicht etwa Bundeswappen??)
        SponsorName = gc_Logo_BMNT
      ElseIf (Sponsor(I) = "BMLFUW") Then ' BundesMinisterium f. Land- und Forstwirts., Umwelt und Wasserwirts.
        SponsorName = gc_Logo_BMLFUW
      ElseIf (Sponsor(I) = "BMNT") Then   ' BundesMinisterium f. Nachhaltigkeit und Tourismus
        SponsorName = gc_Logo_BMNT
      ElseIf (Sponsor(I) = "BMWFW") Then  ' BundesMinisterium f. Wissenschaft, Forschung und Wirtschaft
        SponsorName = gc_Logo_BMWFW
      ElseIf (Sponsor(I) = "BMDW") Then   ' BundesMinisterium f. Digitalisierung und Wirtschaftsstandort
        SponsorName = gc_Logo_BMDW
      ElseIf (Sponsor(I) = "BMVIT") Then  ' BundesMinisterium f. Verkehr, Innovation und Technologie
        SponsorName = gc_Logo_BMVIT
      ElseIf (Sponsor(I) = "LE") Or _
             (Sponsor(I) = "LE1420") Then     ' Landwirts. Entwicklung 2014-2020
        SponsorName = gc_Logo_LE1420
      ElseIf (Sponsor(I) = "LEADER") Then     ' Liaison entre actions de d|fffd|veloppement de l'|fffd|conomie rurale
        SponsorName = gc_Logo_LEADER
      ElseIf (Sponsor(I) = "LD") Then    ' Land => Wappen lt. Bundesland
        ' SponsorName = WSheet.Range(gc_PaymAppl_ProvinceLogoCell).Value
        Province = WSheet.Range(gc_PaymAppl_ProvinceIdxCell).Value
        If (Province = 1) Then
          SponsorName = gc_Logo_Burgenland
        ElseIf (Province = 2) Then
          SponsorName = gc_Logo_Kaernten
        ElseIf (Province = 3) Then
          SponsorName = gc_Logo_NOe
        ElseIf (Province = 4) Then
          SponsorName = gc_Logo_OOe
        ElseIf (Province = 5) Then
          SponsorName = gc_Logo_Salzburg
        ElseIf (Province = 6) Then
          SponsorName = gc_Logo_Steiermark
        ElseIf (Province = 7) Then
          SponsorName = gc_Logo_Tirol
        ElseIf (Province = 8) Then
          SponsorName = gc_Logo_Vorarlberg
        ElseIf (Province = 9) Then
          SponsorName = gc_Logo_Wien
        Else
          SponsorName = ""
        End If
      ' Abk|fffd|rzungen der Bundesl|fffd|nder lt. |fffd|NORM A 1080
      ' vgl. http://www.i-dea.at/OENORM/Bundeslaender/
      ElseIf (Sponsor(I) = "Burgenland") Or _
             (Sponsor(I) = "Bgld") Or _
             (Sponsor(I) = "B") Then     ' Burgenland
        SponsorName = gc_Logo_Burgenland
      ElseIf (Sponsor(I) = "K|fffd|rnten") Or _
             (Sponsor(I) = "Ktn") Or _
             (Sponsor(I) = "K") Then     ' K|fffd|rnten
        SponsorName = gc_Logo_Kaernten
      ElseIf (Sponsor(I) = "Nieder|fffd|sterreich") Or _
             (Sponsor(I) = "NOe") Or _
             (Sponsor(I) = "N|fffd|") Then    ' Nieder|fffd|sterreich
        SponsorName = gc_Logo_NOe
      ElseIf (Sponsor(I) = "Ober|fffd|sterreich") Or _
             (Sponsor(I) = "OOe") Or _
             (Sponsor(I) = "O|fffd|") Then    ' Ober|fffd|sterreich
        SponsorName = gc_Logo_OOe
      ElseIf (Sponsor(I) = "Salzburg") Or _
             (Sponsor(I) = "Sbg") Or _
             (Sponsor(I) = "S") Then     ' Salzburg
        SponsorName = gc_Logo_Salzburg
      ElseIf (Sponsor(I) = "Steiermark") Or _
             (Sponsor(I) = "Stmk") Or _
             (Sponsor(I) = "St") Then    ' Steiermark
        SponsorName = gc_Logo_Tirol
      ElseIf (Sponsor(I) = "Tirol") Or _
             (Sponsor(I) = "T") Then     ' Tirol
        SponsorName = gc_Logo_Tirol
      ElseIf (Sponsor(I) = "Vorarlberg") Or _
             (Sponsor(I) = "Vbg") Or _
             (Sponsor(I) = "V") Then     ' Vorarlberg
        SponsorName = gc_Logo_Vorarlberg
      ElseIf (Sponsor(I) = "Wien") Or _
             (Sponsor(I) = "W") Then     ' Wien
        SponsorName = gc_Logo_Wien
      Else
        SponsorName = ""
      End If
      
      If (SponsorName <> "") Then
        SponsorCnt = SponsorCnt + 1
        ' Set SponsorLogo(SponsorCnt) = CopyUserShape(SrcShape:=ThisWorkbook.Worksheets(gc_Logo_Sheet).Shapes(SponsorName), _
                                        TargetWSheet:=WSheet)
        Set SponsorLogo(SponsorCnt) = WSheet.Shapes(SponsorName) ' .Duplicate
        If (SponsorLogo(SponsorCnt) Is Nothing) Then
          SponsorCnt = SponsorCnt - 1
        Else
          SponsorLogo(SponsorCnt).Visible = True
          SponsorLogo(SponsorCnt).ControlFormat.PrintObject = True
        End If
      End If
    Next I
    If (SponsorCnt = 0) Then
      SponsorInfo = "BMNT/LE/LD/EU"
    End If
    RetryCnt = RetryCnt + 1
  Loop While ((SponsorCnt = 0) And (RetryCnt < 3))
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
  If (SponsorCnt > 0) Then
    Set LogoRange = WSheet.Range(gc_PaymAppl_SponsorLogoArea)
    FrameTop = LogoRange.Top
    FrameLeft = LogoRange.Left
    FrameWidth = LogoRange.Width
    FrameHeight = LogoRange.Height
    FrameBottom = FrameTop + FrameHeight
    FrameRight = FrameLeft + FrameWidth
    FrameBorder = 9
    
    ImageWidth = 0
    ImageHeight = 0
    For I = 1 To SponsorCnt
      If (ImageHeight < SponsorLogo(I).Height) Then
        ImageHeight = SponsorLogo(I).Height
      End If
      ImageWidth = ImageWidth + SponsorLogo(I).Width + FrameBorder
    Next I
    ImageHeight = ImageHeight + FrameBorder
    
    ZoomX = FrameWidth / ImageWidth
    ZoomY = FrameHeight / ImageHeight
    If (ZoomX < ZoomY) Then
      Zoom = ZoomX
    Else
      Zoom = ZoomY
    End If
      
    ImageHeight = ImageHeight * Zoom
    ImageWidth = ImageWidth * Zoom
    
    If (ImageWidth < FrameWidth) Then
      FrameBorderExt = (FrameWidth - ImageWidth) / SponsorCnt
      If (FrameBorderExt > (FrameBorder * Zoom)) Then
        FrameBorderExt = FrameBorder * Zoom
      End If
      ImageWidth = ImageWidth + FrameBorderExt * SponsorCnt
      FrameBorderExt = (FrameBorder * Zoom) + FrameBorderExt
    Else
      FrameBorderExt = (FrameBorder * Zoom)
    End If
    
    ' Center the ImageFrame(!) Horizontally - Do we really want this?
    FrameLeft = FrameLeft + (FrameWidth - ImageWidth) / 2
    FrameRight = FrameLeft + ImageWidth
    
    ' Center the ImageFrame(!) Vertically - Do we really want this?
    FrameTop = FrameTop + (FrameHeight - ImageHeight) / 2
    FrameBottom = FrameTop + ImageHeight
    
    PosX = FrameLeft + FrameBorderExt
    For I = 1 To SponsorCnt
      LogoWidth = SponsorLogo(I).Width
      LogoHeight = SponsorLogo(I).Height
      StepX = (LogoWidth * Zoom) + FrameBorderExt
      SponsorLogo(I).Width = LogoWidth * Zoom
      SponsorLogo(I).Height = LogoHeight * Zoom
      SponsorLogo(I).Left = PosX
      PosX = PosX + StepX
      ' Vertical Alignment within ImageFrame: Top, Center or Bottom?
      ' SponsorLogo(i).Top = FrameTop ' VAlign Top
      SponsorLogo(I).Top = FrameTop + (FrameHeight - SponsorLogo(I).Height) / 2 ' VAlign Center
      ' SponsorLogo(I).Top = FrameBottom - SponsorLogo(I).Height ' VAlign Bottom
    Next I
  End If
  
  WSheet.Range(gc_PaymAppl_IntentCodeCell).Select
  
  PopProtection WSheet:=WSheet
End Sub ' PaymAppl_AdjustLogos()
'
Sub PaymAppl_AdjustControls()
  Dim WSheet As Worksheet
  Dim XShape As Shape

  Set WSheet = ActiveSheet
  For Each XShape In WSheet.Shapes
    ' If XShape.Type = msoGroup Then
    '   XShape.Visible = msoFalse
    ' End If
    Debug.Print XShape.Name
    If (XShape.Type = msoFormControl) Then
      If (XShape.FormControlType = xlGroupBox) Then
        XShape.Visible = False
      End If
      If (XShape.FormControlType = xlOptionButton) Then
        XShape.Visible = True
      End If
    End If
  Next XShape

End Sub
' **********************************************************************
' *                                                                    *
' *                            IsValidBIC()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function IsValidBIC(BIC As String) As Boolean
  Dim BICLen As Integer
  Dim BankCode As String
  Dim CountryCode As String
  Dim BranchCode As String
  Dim I As Integer
  Dim C As String
  
  BIC = UCase(Trim(BIC))
  BICLen = Len(BIC)
  ' A valid BIC has exactly 8 or 11 characters
  If (BICLen <> 8) And (BICLen <> 11) Then
    IsValidBIC = False
    Exit Function
  End If
  
  BankCode = Left(BIC, 4)
  CountryCode = Mid(BIC, 5, 2)
  BranchCode = Mid(BIC, 7)
  
  ' Bank Code consist of 4 Letters (no Digits!)
  For I = 1 To 4
    C = Mid(BankCode, I, 1)
    If (C < "A") Or (C > "Z") Then
      IsValidBIC = False
      Exit Function
    End If
  Next I
  
  ' Nur Konten aus |fffd|sterreich und seinen Nachbarl|fffd|ndern sind g|fffd|ltig!
  ' Prinzen aus Nigeria werden nicht gef|fffd|rdert!
  If (CountryCode <> "AT") And _
     (CountryCode <> "DE") And _
     (CountryCode <> "CZ") And _
     (CountryCode <> "SK") And _
     (CountryCode <> "HU") And _
     (CountryCode <> "SI") And _
     (CountryCode <> "IT") And _
     (CountryCode <> "CH") And _
     (CountryCode <> "LI") Then
    IsValidBIC = False
    Exit Function
  End If
  
  ' Branch Code consist of 2 or 5 Letters and/or Digits!
  For I = 1 To Len(BranchCode)
    C = Mid(BranchCode, I, 1)
    If ((C < "A") Or (C > "Z")) And ((C < "0") Or (C > "9")) Then
      IsValidBIC = False
      Exit Function
    End If
  Next I
  
  IsValidBIC = True
  
End Function ' IsValidBIC()
'

' **********************************************************************
' *                                                                    *
' *                            IsValidIBAN()                           *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function IsValidIBAN(IBAN As String) As Boolean
  Dim IBANLen As Integer
  Dim CountryCode As String
  Dim CheckDigits As String
  Dim BBAN As String
  Dim CheckMsg As String
  Dim Checksum As Integer
  Dim I As Integer
  Dim C As String
  
  IBAN = UCase(Trim(IBAN))
  IBANLen = Len(IBAN)
  If (IBANLen < 8) Or (IBANLen > 34) Then
    IsValidIBAN = False
    Exit Function
  End If
  
  CountryCode = Left(IBAN, 2)
  CheckDigits = Mid(IBAN, 3, 2)
  BBAN = Mid(IBAN, 5)
  
  ' IBAN-Struktur in verschiedenen L|fffd|ndern:
  '   |fffd|sterreich     20  ATpp bbbb bkkk kkkk kkkk
  '   Deutschland    22  DEpp bbbb bbbb kkkk kkkk kk
  '   Tschechien     24  CZpp bbbb kkkk kkkk kkkk kkkk
  '   Slowakei       24  SKpp bbbb ssss sskk kkkk kkkk
  '   Ungarn         28  HUpp bbbs sssK kkkk kkkk kkkk kkkK
  '   Slowenien      19  SIpp bbss skkk kkkk kKK
  '   Italien        27  ITpp Kbbb bbss sssk kkkk kkkk kkk
  '   Schweiz        21  CHpp bbbb bkkk kkkk kkkk k
  '   Liechtenstein  21  LIpp bbbb bkkk kkkk kkkk k
  ' Legende:
  '   AD, BE, ... L|fffd|nderkennzeichen
  '   pp zweistellige Pr|fffd|fsumme
  '   b   Stelle der Bankleitzahl
  '   d   Kontotyp
  '   k   Stelle der Kontonummer
  '   K  Kontrollziffer
  '   r   Regionalcode
  '   s   Stelle der Filialnummer (Branch Code / code guichet)
  '   X  sonstige Funktionen
  ' vgl. https://de.wikipedia.org/wiki/IBAN
  
  ' Nur Konten aus |fffd|sterreich und seinen Nachbarl|fffd|ndern sind g|fffd|ltig!
  ' Prinzen aus Nigeria werden nicht gef|fffd|rdert!
  If (CountryCode <> "AT") And _
     (CountryCode <> "DE") And _
     (CountryCode <> "CZ") And _
     (CountryCode <> "SK") And _
     (CountryCode <> "HU") And _
     (CountryCode <> "SI") And _
     (CountryCode <> "IT") And _
     (CountryCode <> "CH") And _
     (CountryCode <> "LI") Then
    IsValidIBAN = False
    Exit Function
  End If
  
  If (Left(CheckDigits, 1) < "0") Or Left(CheckDigits, 1) > "9" Or _
     (Right(CheckDigits, 1) < "0") Or Right(CheckDigits, 1) > "9" Then
    IsValidIBAN = False
    Exit Function
  End If
   
  CheckMsg = BBAN & CountryCode & CheckDigits
  Checksum = 0
  For I = 1 To IBANLen
    C = Mid(CheckMsg, I, 1)
    If (C >= "0") And (C <= "9") Then
      Checksum = (Checksum * 10 + (Asc(C) - Asc("0"))) Mod 97
    ElseIf (C >= "A") And (C <= "Z") Then
      Checksum = (Checksum * 100 + ((Asc(C) - Asc("A")) + 10)) Mod 97
    ElseIf (C >= "a") And (C <= "z") Then  ' This should never happen! - We used UCase() above!
      Checksum = (Checksum * 100 + ((Asc(C) - Asc("a")) + 10)) Mod 97
    Else
      IsValidIBAN = False
      Exit Function
    End If
  Next I
  IsValidIBAN = (Checksum = 1)

End Function ' IsValidIBAN()

' **********************************************************************
' *                       Zahlungs|fffd|bersicht.bas                        *
' **********************************************************************
Attribute VB_Name = "|fffd|bersicht"
' **********************************************************************
' *                                                                    *
' *                            |fffd|bersicht.bas                           *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt f|fffd|r:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                    Version RL469.4 / 30.01.2018 / Logos 31.07.2018 *
' **********************************************************************

'+-----------+-----------------+------------+------------------------------------------
'  VERSION     AUTOR             DATUM        BESCHREIBUNG
'+-----------+-----------------+------------+------------------------------------------
'  1.0.0.140   Roland Lieger    16.10.2015    Created
'  1.0.0.248   Roland Lieger     4.11.2015    Getting Ready for Release
'  1.0.0.257   Roland Lieger     8.11.2015    Added Summary_DataValid()
'  1.0.0.268   Roland Lieger    11.11.2015    Getting Ready for Release
'  1.0.0.300d  Roland Lieger    23.11.2015    Total Rewrite of Summary Sheet Generation
'  1.0.0.301   Roland Lieger     1.12.2015    Removed all References to StopWatch
'+-----------+-----------------+------------+------------------------------------------

' **********************************************************************
' **********************************************************************
'
' It seems that Excel sometimes gets confused about character encoding
' and switches between Latin-1 and some other encoding (???), which is
' no problem in the Visual Basic Code, since it is ASCII-only anyways,
' but some worksheets are named using accented characters, and these can
' then suddenly no longer be found after the accented characters in the
' Visual Basic code get corrupted (but not in the worksheets themselved),
' which causes the application to crash. ;(
' Excel (2002) stores the german Umlaut Characters using Latin1 encoding.
'
' To make this condition easier to detect, we shall show some accented
' characters here:
'    |fffd| (Ae) = Latin1(0xC4) = UniCode(U+00C4) = UTF8(0xC3 0x84)
'    |fffd| (ae) = Latin1(0xE4) = UniCode(U+00E4) = UTF8(0xC3 0xA4)
'    |fffd| (Oe) = Latin1(0xD6) = UniCode(U+00D6) = UTF8(0xC3 0x96)
'    |fffd| (oe) = Latin1(0xF6) = UniCode(U+00F6) = UTF8(0xC3 0xB6)
'    |fffd| (Ue) = Latin1(0xDC) = UniCode(U+00DC) = UTF8(0xC3 0x9C)
'    |fffd| (ue) = Latin1(0xFC) = UniCode(U+00FC) = UTF8(0xC3 0xBC)
'    |fffd| (ss) = Latin1(0xDF) = UniCode(U+00DF) = UTF8(0xC3 0x9F)
'    Byte Order Mark = UniCode(U+FEFF) = UTF8(0xEF 0xBB 0xBF)
'
' **********************************************************************
' **********************************************************************

Option Explicit

#Const WBookType = "Full"

#Const WBookSupportsPaymAppl = True
#Const WBookSupportsSummary = True
#Const WBookSupportsMaterial = True
#Const WBookSupportsInvest = True
#Const WBookSupportsInKind = True
#Const WBookSupportsStdCost = True
#Const WBookSupportsLabour = True
#Const WBookSupportsNotes = True

Public Const gc_TemplateSummaryWorkSheet As String = "TEMPLATE |fffd|bersicht"
Public Const gc_SummaryWorkSheet As String = "|fffd|bersicht"

Public Const gc_Summary_FormVersionCell As String = "Summary_FormVersion"

Public Const gc_Summary_ApplicantIDCell As String = "Summary_ApplicantID"
Private Const c_ApplicantNameCell As String = "Summary_ApplicantName"
Private Const c_ApplicationIDCell As String = "Summary_ApplicationID"
Public Const gc_Summary_TaxDeductCell As String = "Summary_TaxDeduct"
Private Const c_SupportPeriodStartCell As String = "Summary_SupportPeriodStart"
Private Const c_SupportPeriodEndCell As String = "Summary_SupportPeriodEnd"
Public Const gc_Summary_GroupBySelectCell As String = "Summary_GroupByCell"
Public Const gc_Summary_GroupBySelectShadowCell As String = "Summary_GroupByCellShadow"
Private Const c_GroupByIntent As String = "F|fffd|rdergegenstand"
Private Const c_GroupBySubProject As String = "Teilprojekt"
Private Const c_GroupByTaskCode As String = "Codierung / F|fffd|rdergegenstand"

Private Const c_ModeButtonRows As String = "Summary_ModeButtonRows"
Private Const c_Button_ModeApplication As String = "Button_ModeApplication"
Private Const c_Button_ModeVWK As String = "Button_ModeVWK"
Private Const c_Button_ModeVOK As String = "Button_ModeVOK"

Private Const c_Button_UpdateSummary As String = "Button_UpdateSummary"
Private Const c_Button_EraseAll As String = "Button_EraseAll"
Private Const c_Button_CreateInvestSheet As String = "Button_CreateInvestSheet"
Private Const c_Button_CreateMaterialSheet As String = "Button_CreateMaterialSheet"
Private Const c_Button_CreateInKindContribSheet As String = "Button_CreateInKindContribSheet"
Private Const c_Button_CreateStdCostSheet As String = "Button_CreateStdCostSheet"
Private Const c_Button_CreateLabourSheet As String = "Button_CreateLabourSheet"
Private Const c_Button_CreateScratchPadSheet As String = "Button_CreateScratchPadSheet"
Private Const c_Button_LockAll As String = "Button_LockAll"
Private Const c_Button_UnlockAll As String = "Button_UnlockAll"

Private Const c_ColIdx_WorksheetLink As Integer = 1      ' ColumnTitleToIdx("A")
Private Const c_ColIdx_WorksheetType As Integer = 2      ' ColumnTitleToIdx("B")
Private Const c_ColIdx_ApplSubject As Integer = 3        ' ColumnTitleToIdx("C")
Private Const c_ColIdx_TotalCostInclTaxes As Integer = 4 ' ColumnTitleToIdx("D")
Private Const c_ColIdx_TotalCostExclTaxes As Integer = 5 ' ColumnTitleToIdx("E")
Private Const c_ColIdx_AppliedCost As Integer = 6        ' ColumnTitleToIdx("F")
Private Const c_ColIdx_ReducedCostVWK As Integer = 7     ' ColumnTitleToIdx("G")
Private Const c_ColIdx_AcceptedCostVWK As Integer = 8    ' ColumnTitleToIdx("H")
Private Const c_ColIdx_ReducedCostVOK As Integer = 9     ' ColumnTitleToIdx("I")
Private Const c_ColIdx_AcceptedCostVOK As Integer = 10   ' ColumnTitleToIdx("J")
Private Const c_ColIdx_SanctionsVOK As Integer = 11      ' ColumnTitleToIdx("K")
Private Const c_ColIdx_Revenue As Integer = 12           ' ColumnTitleToIdx("L")
' Private Const c_ColIdx_SortLineIndex As Integer = 13     ' ColumnTitleToIdx("M")

Private Const c_FirstSumColIdx = c_ColIdx_TotalCostInclTaxes
Private Const c_LastSumColIdx = c_ColIdx_Revenue
Private Const c_LastSortString = "|fffd||fffd||fffd||fffd||fffd|" ' "zzzzz"
Private Const c_UntitledText As String = "Unbenannt"

Public Const gc_ButtonVisibilityRow As String = "Summary_ButtonVisibilityRow"
Private Const c_ButtonRows As String = "Summary_ButtonRows"
Private Const c_ButtonARows As String = "Summary_ButtonARows"
Private Const c_ButtonBRows As String = "Summary_ButtonBRows"
Private Const c_ButtonCRows As String = "Summary_ButtonCRows"
Private Const c_ButtonDRows As String = "Summary_ButtonDRows"
Private Const c_LockButtonRows As String = "Summary_LockButtonRows"

Private Const c_HeaderRange As String = "Summary_HeaderTemplateRange"
Private Const c_ItemTemplateRow As String = "Summary_ItemTemplateRow"
Private Const c_FooterRange As String = "Summary_FooterTemplateRange"
Private Const c_GlobalFooterTemplateRange As String = "Summary_GlobalFooterTemplateRange"
Private Const c_TemplateRange As String = "Summary_TemplateRange"
'
Public gv_Summary_UpdateDisable As Boolean
Public gv_Summary_Dirty As Boolean

Private v_PrintWSheet As Worksheet
'

' **********************************************************************
' *                                                                    *
' *              Summary_ModeSelect_Application_OnClick()              *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_ModeSelect_Application_OnClick()
  Summary_ModeSelect_Application WSheet:=ActiveSheet
End Sub ' Summary_ModeSelect_Application_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                  Summary_ModeSelect_VWK_OnClick()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_ModeSelect_VWK_OnClick()
  Summary_ModeSelect_VWK WSheet:=ActiveSheet
End Sub ' Summary_ModeSelect_VWK_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                  Summary_ModeSelect_VOK_OnClick()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_ModeSelect_VOK_OnClick()
  Summary_ModeSelect_VOK WSheet:=ActiveSheet
End Sub ' Summary_ModeSelect_VOK_OnClick()
'

' **********************************************************************
' *                                                                    *
' *                  Summary_ModeSelect_Application()                  *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_ModeSelect_Application(Optional WSheet As Worksheet = Nothing)
  Dim RangeText As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Range(gc_ButtonVisibilityRow).Cells(1, 3).Value = 1
  
  RangeText = ColumnIdxToTitle(c_ColIdx_ReducedCostVWK) & ":" & _
              ColumnIdxToTitle(c_ColIdx_SanctionsVOK)
  WSheet.Range(RangeText).EntireColumn.Hidden = True
    
  Summary_AdjustButtons SummarySheet:=WSheet, ButtonMask:=-1

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' Summary_ModeSelect_Application()
'

' **********************************************************************
' *                                                                    *
' *                      Summary_ModeSelect_VWK()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_ModeSelect_VWK(Optional WSheet As Worksheet = Nothing)
  Dim RangeText As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Range(gc_ButtonVisibilityRow).Cells(1, 3).Value = 2
  
  RangeText = ColumnIdxToTitle(c_ColIdx_ReducedCostVWK) & ":" & _
              ColumnIdxToTitle(c_ColIdx_AcceptedCostVWK)
  WSheet.Range(RangeText).EntireColumn.Hidden = False
  
  RangeText = ColumnIdxToTitle(c_ColIdx_ReducedCostVOK) & ":" & _
              ColumnIdxToTitle(c_ColIdx_AcceptedCostVOK)
  WSheet.Range(RangeText).EntireColumn.Hidden = True
  
  RangeText = ColumnIdxToTitle(c_ColIdx_SanctionsVOK) & ":" & _
              ColumnIdxToTitle(c_ColIdx_SanctionsVOK)
  WSheet.Range(RangeText).EntireColumn.Hidden = False
  
  Summary_AdjustButtons SummarySheet:=WSheet, ButtonMask:=-1
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet

End Sub ' Summary_ModeSelect_VWK()
'

' **********************************************************************
' *                                                                    *
' *                      Summary_ModeSelect_VOK()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_ModeSelect_VOK(Optional WSheet As Worksheet = Nothing)
  Dim RangeText As String
  
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  WSheet.Range(gc_ButtonVisibilityRow).Cells(1, 3).Value = 3
  
  RangeText = ColumnIdxToTitle(c_ColIdx_ReducedCostVWK) & ":" & _
              ColumnIdxToTitle(c_ColIdx_SanctionsVOK)
  WSheet.Range(RangeText).EntireColumn.Hidden = False
  
  Summary_AdjustButtons SummarySheet:=WSheet, ButtonMask:=-1
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=WSheet
  
End Sub ' Summary_ModeSelect_VOK()
'

' **********************************************************************
' *                                                                    *
' *                      Summary_AdjustTaxDeduct()                     *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_AdjustTaxDeduct(SummarySheet As Worksheet, TaxDeductEnable As Boolean)
  Dim RangeText As String
  
  PushProtection WSheet:=SummarySheet
  RemoveProtection WSheet:=SummarySheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  RangeText = ColumnIdxToTitle(c_ColIdx_TotalCostExclTaxes) & ":" & _
              ColumnIdxToTitle(c_ColIdx_TotalCostExclTaxes)
  SummarySheet.Range(RangeText).EntireColumn.Hidden = Not TaxDeductEnable
  
  Summary_AdjustButtons SummarySheet:=SummarySheet, ButtonMask:=-1
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=SummarySheet

End Sub ' Summary_AdjustTaxDeduct()
'

' **********************************************************************
' *                                                                    *
' *                             SpeedTest()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' The Summary Sheet has a serious problem with Excel2010, since Excel2010
' is fairly quite slow when it comes to showing/hiding or inserting/deleting
' rows and columns. This is indeed quite a nuisance, but it is unfortunatly
' not quite clear what can be done about this.
' Some Timeing Examples:
' WinXP - Office 2003 (Virtual Machine on Mac mini)
'   WSheet.HideRow    : 4ms (4ms)
'   WSheet.ShowRow    : 1ms (5ms)
'   WSheet.InsertRow  : 10ms (15ms)
'   WSheet.DeleteRow  : 3ms (18ms)
'   WSheet.HideColumn : 1ms (19ms)
'   WSheet.ShowColumn : 1ms (20ms)
'   WSheet.InsertColumn : 1ms (21ms)
'   WSheet.DeleteColumn : 1ms (22ms)
' ---------------------------------------
' WinXP - Office 2007 (Virtual Machine on Dell)
'   WSheet.HideRow    : 13ms (13ms)
'   WSheet.ShowRow    : 8ms (21ms)
'   WSheet.InsertRow  : 3ms (24ms)
'   WSheet.DeleteRow  : 5ms (29ms)
'   WSheet.HideColumn : 2ms (31ms)
'   WSheet.ShowColumn : 3ms (35ms)
'   WSheet.InsertColumn : 3ms (37ms)
'   WSheet.DeleteColumn : 5ms (43ms)
' ---------------------------------------
' Win7 - Office 2010 (AMA Laptop)
'   WSheet.HideRow    : 9ms (9ms)
'   WSheet.ShowRow    : 3ms (12ms)
'   WSheet.InsertRow  : 16ms (28ms)
'   WSheet.DeleteRow  : 12ms (40ms)
'   WSheet.HideColumn : 1ms (42ms)
'   WSheet.ShowColumn : 1ms (43ms)
'   WSheet.InsertColumn : 4ms (47ms)
'   WSheet.DeleteColumn : 4ms (52ms)
' ---------------------------------------
' Win7 - Office 2013 (Virtual Machine on Dell)
'   WSheet.HideRow    : 19ms (19ms)
'   WSheet.ShowRow    : 1ms (20ms)
'   WSheet.InsertRow  : 25ms (45ms)
'   WSheet.DeleteRow  : 3ms (48ms)
'   WSheet.HideColumn : 0ms (48ms)
'   WSheet.ShowColumn : 0ms (49ms)
'   WSheet.InsertColumn : 2ms (51ms)
'   WSheet.DeleteColumn : 2ms (53ms)

Sub SpeedTest()
Dim WSheet As Worksheet
' Dim ExecTimer As StopWatch

Application.ScreenUpdating = False

' Set ExecTimer = New StopWatch
Set WSheet = ActiveSheet
' ExecTimer.StartTimer
Debug.Print "SpeedTest Start : " & Now()
WSheet.Range("A10:A23").EntireRow.Hidden = True
' Debug.Print "'   WSheet.HideRow    : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("A10:A23").EntireRow.Hidden = False
' Debug.Print "'   WSheet.ShowRow    : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("A10:A23").EntireRow.Insert
' Debug.Print "'   WSheet.InsertRow  : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("A10:A23").EntireRow.Delete
' Debug.Print "'   WSheet.DeleteRow  : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("D1:G1").EntireRow.Hidden = True
' Debug.Print "'   WSheet.HideColumn : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("D1:G1").EntireRow.Hidden = False
' Debug.Print "'   WSheet.ShowColumn : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("D1:G1").EntireRow.Insert
' Debug.Print "'   WSheet.InsertColumn : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
WSheet.Range("D1:G1").EntireRow.Delete
' Debug.Print "'   WSheet.DeleteColumn : " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
Debug.Print "---------------------------------------"

Application.ScreenUpdating = True

End Sub ' SpeedTest()
'

' **********************************************************************
' *                                                                    *
' *                        Summary_Deactivate()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_Deactivate(SummarySheet As Worksheet)
  Dim ScrollRow As Integer
  Dim ScrollColumn As Integer
  
  PushProtection WSheet:=SummarySheet
  RemoveProtection WSheet:=SummarySheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ScrollRow = ActiveWindow.ScrollRow
  ScrollColumn = ActiveWindow.ScrollColumn

  ' SummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 10) = ScrollRow
  ' SummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 11) = ScrollColumn
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=SummarySheet

End Sub ' Summary_Deactivate()
'

' **********************************************************************
' *                                                                    *
' *                        Summary_MarkDirty()                         *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_MarkDirty(SummarySheet As Worksheet)
  gv_Summary_Dirty = True
  
  If (ActiveSheet Is SummarySheet) Then
    Summary_Update SummarySheet:=SummarySheet
  End If
End Sub ' Summary_MarkDirty()
'

' **********************************************************************
' *                                                                    *
' *                   Summary_GroupBySelectChanged()                   *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_GroupBySelectChanged()
  Dim WSheet As Worksheet
  Dim Button As Integer
  
  Set WSheet = Worksheets(gc_SummaryWorkSheet)
  If (WSheet.Range(gc_Summary_GroupBySelectCell).Value = _
      WSheet.Range(gc_Summary_GroupBySelectShadowCell).Value) Then
    Exit Sub
  End If
  
  If (Summary_HasRevenueEntries(WSheet:=WSheet)) Then
    Button = MsgBox(Prompt:="Wenn Sie die Gruppierung der Belegaufstellungen |fffd|ndern, " & _
                            "k|fffd|nnen einzelne oder alle Eingaben in der Spalte " & _
                            "'Einnahmen' gel|fffd|scht werden!" & vbCr & _
                            "Um ein vollst|fffd|ndiges |fffd|bersichtsblatt zu erhalten m|fffd|ssen Sie " & _
                            "die fehlenden Eingaben nachher wieder von Hand erg|fffd|nzen!" & vbCr & _
                            "Sind Sie sicher, dass Sie das wollen?", _
                            Buttons:=(vbOKCancel Or vbCritical), _
                            Title:=("Warnung: M|fffd|glicher Datenverlust"))
    If (Button = vbCancel) Then
      WSheet.Range(gc_Summary_GroupBySelectCell).Value = _
         WSheet.Range(gc_Summary_GroupBySelectShadowCell).Value
      Exit Sub
    End If
  End If
  
  Summary_Update SummarySheet:=Worksheets(gc_SummaryWorkSheet)
End Sub ' Summary_GroupBySelectChanged()
'

' **********************************************************************
' *                                                                    *
' *                       Button_SummaryUpdate()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Button_SummaryUpdate()
  Summary_Update SummarySheet:=Worksheets(gc_SummaryWorkSheet)
End Sub ' Button_SummaryUpdate()
'

' **********************************************************************
' *                                                                    *
' *                          Summary_Update()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_Update(SummarySheet As Worksheet)
  Dim PrevSummarySheet As Worksheet
  Dim WSheetCnt As Integer
  Dim ListWSheet As Boolean
  Dim WSheet As Worksheet
  Dim WSheetType As String
  Dim WSheetLinkTarget As String
  Dim ApplSubject As String
  Dim InsertPos As Integer
  Dim TemplateHeaderRange As Range
  Dim TemplateRow As Range
  Dim TemplateFooterRange As Range
  Dim TemplateGlobalFooterRange As Range
  Dim CellRangeMsg As String
  Dim LinkRange As Range
  Dim PrevUpdating As Boolean
  Dim PrevProtected As Boolean
  Dim PrevCalculation As Long
  Dim RowOffset As Integer
  Dim ItemPos As Integer
  Dim BlockHead As Integer
  Dim BlockTail As Integer
  Dim GlobalSum(c_LastSumColIdx) As String
  Dim RowIdx As Integer
  Dim ColIdx As Integer
  Dim PrevDataTopRow As Integer
  Dim PrevDataRowCount As Integer
  Dim CurrDataTopRow As Integer
  Dim CurrDataRowCount As Integer
  Dim WSheetCollectionTopRow As Integer
  ' Dim ExecTimer As StopWatch
  Dim SortRangeA As String, SortRangeB As String
  Dim ButtonMask As Integer
  Dim ViewMode As Integer
  Dim ScrollRow As Integer
  Dim ScrollColumn As Integer
  Dim Topic() As String
  Dim Formula() As String
  Dim ActiveFormulaLen As Integer
  Dim ActiveCoreFormula As String
  Dim TopicCnt As Integer
  Dim InsertCnt As Integer
  Dim I As Integer
  Dim GroupBySubProject As Boolean
  Dim GroupByTaskCode As Boolean
  
  If (Not SummarySheet Is Nothing) Then
    If (SummarySheet.Name = gc_TemplateSummaryWorkSheet) Then
      Exit Sub
    End If
  End If
  
  Debug.Print "Welcome to Summary_Update(): " & Format(Now)
  
  If gv_Summary_UpdateDisable Then
    Exit Sub
  End If
  gv_Summary_UpdateDisable = True
  
  ' Set ExecTimer = New StopWatch
  ' ExecTimer.StartTimer
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PrevCalculation = Application.Calculation
  ' Application.Calculation = xlCalculationManual
  
  PushProtection WBook:=ActiveWorkbook
  RemoveProtection WBook:=ActiveWorkbook
  
  ' Debug.Print "'   Simple SetUp: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  Set PrevSummarySheet = SummarySheet
  If (Not PrevSummarySheet Is Nothing) Then
    GroupByTaskCode = (PrevSummarySheet.Range(gc_Summary_GroupBySelectCell).Value = c_GroupByTaskCode)
    GroupBySubProject = (PrevSummarySheet.Range(gc_Summary_GroupBySelectCell).Value = c_GroupBySubProject)
    PrevSummarySheet.Name = UniqueSheetName(gc_DeletedCookie & PrevSummarySheet.Name)
    PrevProtected = PrevSummarySheet.ProtectContents
  Else
    GroupByTaskCode = False
    GroupBySubProject = False
    PrevProtected = True
  End If
  
  ' Create a working copy of the summary sheet from the summary template sheet
  Set SummarySheet = CopyUserSheet(WSheet:=Worksheets(gc_TemplateSummaryWorkSheet), _
                                   WSheetCopyName:=gc_SummaryWorkSheet, _
                                   Before:=Worksheets(gc_TemplateSummaryWorkSheet))
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  If Not (SummarySheet Is Nothing) Then
    ' Insert the Basic Application Information from the Payment Application Form
    ' into the applicable fields here...
    If (GroupByTaskCode) Then
      SummarySheet.Range(gc_Summary_GroupBySelectCell).Value = c_GroupByTaskCode
      SummarySheet.Range(gc_Summary_GroupBySelectShadowCell).Value = c_GroupByTaskCode
    ElseIf (GroupBySubProject) Then
      SummarySheet.Range(gc_Summary_GroupBySelectCell).Value = c_GroupBySubProject
      SummarySheet.Range(gc_Summary_GroupBySelectShadowCell).Value = c_GroupBySubProject
    Else
      SummarySheet.Range(gc_Summary_GroupBySelectCell).Value = c_GroupByIntent
      SummarySheet.Range(gc_Summary_GroupBySelectShadowCell).Value = c_GroupByIntent
    End If
    SummarySheet.Range(gc_Summary_GroupBySelectCell).Select
  
    SummarySheet.Range(gc_Summary_ApplicantIDCell).Formula = _
              "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantIDCell & ")"
    SummarySheet.Range(c_ApplicantNameCell).Formula = _
              "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicantNameCell & ")"
    SummarySheet.Range(c_ApplicationIDCell).Formula = _
              "=TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_ApplicationIDCell & ")"
    
    SummarySheet.Range(gc_Summary_TaxDeductCell).Formula = "='" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_TaxDeductCell
    
    SummarySheet.Range(c_SupportPeriodStartCell).Formula = _
              "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")=" & Chr(34) & Chr(34) & "," & _
              Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodStartCell & ")"
    SummarySheet.Range(c_SupportPeriodEndCell).Formula = _
              "=IF(TRIM('" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")=" & Chr(34) & Chr(34) & "," & _
              Chr(34) & Chr(34) & ",'" & gc_Stm_CoreDataWorkSheet & "'!" & gc_Stm_SupportPeriodEndCell & ")"
    ' Debug.Print "'   Set Header Fields: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' Beware: Setting the Page Footer here, takes many seconds (Excel 2002)
    ' and causes page boarder lines to be enabled ?!?
    ' If False And (SummarySheet.PageSetup.LeftFooter <> "") Then
    '   If (StandAloneMode) Then
    '     SummarySheet.PageSetup.LeftFooter = "|fffd|bersicht"
    '   Else
    '     SummarySheet.PageSetup.LeftFooter = "Zahlungsantrag/|fffd|bersicht"
    '   End If
    '   SummarySheet.PageSetup.CenterFooter = c_PublicVersionInfo & " / " & c_MonthName(Month(NowDateTime) - 1) & " " & Year(NowDateTime)
    '   SummarySheet.PageSetup.RightFooter = "Seite &P von &N"
    ' End If
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    SummarySheet.Columns(ColumnIdxToTitle(c_ColIdx_ApplSubject)).Hidden = True
    ' Debug.Print "'   Hide Subject Column: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    SummarySheet.Range(c_TemplateRange).EntireRow.Hidden = False
    ' Debug.Print "'   Hide Template Range: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
    WSheetCollectionTopRow = SummarySheet.Range(c_TemplateRange).Row + _
                             SummarySheet.Range(c_TemplateRange).Rows.Count + 1
    
    PrevDataTopRow = WSheetCollectionTopRow
    If (Not PrevSummarySheet Is Nothing) Then
      PrevDataRowCount = PrevSummarySheet.UsedRange.Row + PrevSummarySheet.UsedRange.Rows.Count - PrevDataTopRow
    Else
      PrevDataRowCount = -1
    End If
    CurrDataTopRow = SummarySheet.UsedRange.Row + SummarySheet.UsedRange.Rows.Count
    CurrDataRowCount = 0
    
    Set TemplateHeaderRange = SummarySheet.Range(c_HeaderRange)
    Set TemplateRow = SummarySheet.Range(c_ItemTemplateRow)
    Set TemplateFooterRange = SummarySheet.Range(c_FooterRange)
    Set TemplateGlobalFooterRange = SummarySheet.Range(c_GlobalFooterTemplateRange)
    ' Debug.Print "'   Define Range Variables: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ' Collect Information from all available Workbooks and compile
    ' a sorted list with the required informations
    
    WSheetCnt = 0
    InsertPos = CurrDataTopRow
    For Each WSheet In ActiveWorkbook.Worksheets
      ListWSheet = False
      TopicCnt = 0
      If (Left(WSheet.Name, Len(gc_TemplateCookie)) <> gc_TemplateCookie) And _
         (Left(WSheet.Name, Len(gc_TableCookie)) <> gc_TableCookie) Then
        WSheetType = "Unbekannt"
        ApplSubject = "Unbekannt"
        ListWSheet = False
#If WBookSupportsLabour Then
        If (Left(WSheet.Name, Len(gc_LabourCostWorkSheet)) = gc_LabourCostWorkSheet) Or _
           (Left(WSheet.Name, Len(gc_LabourCostWorkSheetAbbr)) = gc_LabourCostWorkSheetAbbr) Then
          WSheetType = gc_LabourCostWorkSheet
          ApplSubject = WSheet.Range(gc_Labour_ApplicationSubject).Value
          WSheetLinkTarget = gc_Labour_ApplicationSubject
          ListWSheet = True
        End If
#End If
#If WBookSupportsInKind Then
        If (Left(WSheet.Name, Len(gc_InKind_UserSheet)) = gc_InKind_UserSheet) Or _
               (Left(WSheet.Name, Len(gc_InKind_UserSheetAbbr)) = gc_InKind_UserSheetAbbr) Then
          WSheetType = gc_InKind_UserSheet
          ApplSubject = WSheet.Range(gc_InKind_ApplicationSubject).Value
          WSheetLinkTarget = gc_InKind_ApplicationSubject
          ListWSheet = True
          If (GroupBySubProject Or GroupByTaskCode) Then
            InKind_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=GroupByTaskCode
          End If
        End If
#End If
#If WBookSupportsStdCost Then
        If (Left(WSheet.Name, Len(gc_StdCost_UserSheet)) = gc_StdCost_UserSheet) Or _
               (Left(WSheet.Name, Len(gc_StdCost_UserSheetAbbr)) = gc_StdCost_UserSheetAbbr) Then
          WSheetType = gc_StdCost_UserSheet
          ApplSubject = WSheet.Range(gc_StdCost_ApplicationSubject).Value
          WSheetLinkTarget = gc_StdCost_ApplicationSubject
          ListWSheet = True
          If (GroupBySubProject Or GroupByTaskCode) Then
            StdCost_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=GroupByTaskCode
          End If
        End If
#End If
#If WBookSupportsInvest Then
        If (Left(WSheet.Name, Len(gc_InvMat_InvestUserSheet)) = gc_InvMat_InvestUserSheet) Or _
               (Left(WSheet.Name, Len(gc_InvMat_InvestUserSheetAbbr)) = gc_InvMat_InvestUserSheetAbbr) Then
          WSheetType = gc_InvMat_InvestUserSheet
          ApplSubject = WSheet.Range(gc_InvMat_ApplicationSubject).Value
          WSheetLinkTarget = gc_InvMat_ApplicationSubject
          ListWSheet = True
          If (GroupBySubProject Or GroupByTaskCode) Then
            InvMat_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=GroupByTaskCode
          End If
        End If
#End If
#If WBookSupportsMaterial Then
        If (Left(WSheet.Name, Len(gc_InvMat_MaterialUserSheet)) = gc_InvMat_MaterialUserSheet) Or _
               (Left(WSheet.Name, Len(gc_InvMat_MaterialUserSheetAbbr)) = gc_InvMat_MaterialUserSheetAbbr) Then
          WSheetType = gc_InvMat_MaterialUserSheet
          ApplSubject = WSheet.Range(gc_InvMat_ApplicationSubject).Value
          WSheetLinkTarget = gc_InvMat_ApplicationSubject
          ListWSheet = True
          If (GroupBySubProject Or GroupByTaskCode) Then
            InvMat_CollectTopics WSheet:=WSheet, Topic:=Topic, Formula:=Formula, TopicCnt:=TopicCnt, GroupByTaskCode:=GroupByTaskCode
          End If
        End If
#End If
        If (Left(WSheet.Name, Len(gc_SummaryWorkSheet)) = gc_SummaryWorkSheet) Then
          WSheetType = gc_SummaryWorkSheet
          ApplSubject = "Ung|fffd|ltig"
          ListWSheet = False
        End If
        
        If ApplSubject = "" Then
          ApplSubject = c_LastSortString
        End If
    
        If ListWSheet Then
          If (TopicCnt = 0) Then
            InsertCnt = 1
          Else
            InsertCnt = TopicCnt
          End If
          
          For I = 1 To InsertCnt
            TemplateRow.Copy (SummarySheet.Cells(InsertPos, 1))
      
            SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetLink).Value = WSheet.Name
            CellRangeMsg = ColumnIdxToTitle(c_ColIdx_WorksheetLink) & CStr(InsertPos)
            Set LinkRange = SummarySheet.Range(CellRangeMsg)
            LinkRange.Parent.Hyperlinks.Add Anchor:=LinkRange, Address:="", _
                         SubAddress:="'" & WSheet.Name & "'!" & WSheetLinkTarget, TextToDisplay:=WSheet.Name
            SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetLink).Value = WSheet.Name
            SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetType).Value = WSheetType
            SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value = ApplSubject
            InsertPos = InsertPos + 1
          Next I
          InsertPos = InsertPos - InsertCnt
          
#If WBookSupportsLabour Then
          If (WSheetType = gc_LabourCostWorkSheet) Then
            If (WSheet.Range(gc_Labour_SelectedCalcTypeCell).Value <> "C") Then
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_Labour_SumAppliedCost
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_Labour_SumAppliedCost
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_Labour_SumApplicableCost
            Else
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_LabourC_SumApplicableCost ' FIXME? - Applied Cost
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_LabourC_SumApplicableCost ' FIXME? - Applied Cost
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_LabourC_SumApplicableCost
            End If
            SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_ReducedCostVWK
            SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_AcceptedCostVWK
            SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_ReducedCostVOK
            SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_AcceptedCostVOK
            SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                        "='" & WSheet.Name & "'!" & gc_Labour_SumSanctionsVOK
            ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                   "=MIN('" & WSheet.Name & "'!" & gc_Labour_SumSanctionsVWK & ", " & _
                        "'" & WSheet.Name & "'!" & gc_Labour_SumSanctionsVOK & ")"
            ' SummarySheet.Cells(InsertPos, c_ColIdx_Revenue).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_Revenue
            WSheetCnt = WSheetCnt + 1
            
            ' Sheets f|fffd|r Personalkosten haben zwei Zeilen - Zusatzzeile f|fffd|r Gemeinkosten
            InsertPos = InsertPos + 1
            TemplateRow.Copy (SummarySheet.Cells(InsertPos, 1))
            
            SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetLink).Value = WSheet.Name
            CellRangeMsg = ColumnIdxToTitle(c_ColIdx_WorksheetLink) & CStr(InsertPos)
            Set LinkRange = SummarySheet.Range(CellRangeMsg)
            LinkRange.Parent.Hyperlinks.Add Anchor:=LinkRange, Address:="", _
                         SubAddress:="'" & WSheet.Name & "'!" & WSheetLinkTarget, TextToDisplay:=WSheet.Name
            
            SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetLink).Value = WSheet.Name
            SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetType).Value = "Personal Gemeinkosten"
            SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value = ApplSubject
            
            If (WSheet.Range(gc_Labour_SelectedCalcTypeCell).Value <> "C") Then
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_Labour_SumOverheads
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_Labour_SumOverheads
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_Labour_SumOverheads
            Else
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_LabourC_SumOverheads
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_LabourC_SumOverheads
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_LabourC_SumOverheads
            End If
            SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_ReducedCostInclOverheadVWK & _
                 "-'" & WSheet.Name & "'!" & gc_Labour_ReducedCostVWK
            SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_AcceptedCostInclOverheadVWK & _
                 "-'" & WSheet.Name & "'!" & gc_Labour_AcceptedCostVWK
            SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                 "=IF('" & WSheet.Name & "'!" & gc_Labour_ReducedCostInclOverheadVOK & " = " & Chr(34) & Chr(34) & "," & _
                 Chr(34) & Chr(34) & "," & _
                 "'" & WSheet.Name & "'!" & gc_Labour_ReducedCostInclOverheadVOK & _
                 "-'" & WSheet.Name & "'!" & gc_Labour_ReducedCostVOK & ")"
            SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                 "=IF('" & WSheet.Name & "'!" & gc_Labour_AcceptedCostInclOverheadVOK & " = " & Chr(34) & Chr(34) & "," & _
                 Chr(34) & Chr(34) & "," & _
                 "'" & WSheet.Name & "'!" & gc_Labour_AcceptedCostInclOverheadVOK & _
                 "-'" & WSheet.Name & "'!" & gc_Labour_AcceptedCostVOK & ")"
            SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                        "='" & WSheet.Name & "'!" & gc_Labour_SumSanctionsOverheadVOK
            ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                   "=MIN('" & WSheet.Name & "'!" & gc_Labour_SumSanctionsOverheadVWK & ", " & _
                        "'" & WSheet.Name & "'!" & gc_Labour_SumSanctionsOverheadVOK & ")"
            ' SummarySheet.Cells(InsertPos, c_ColIdx_Revenue).Formula = _
                 "='" & WSheet.Name & "'!" & gc_Labour_Revenue
          End If
#End If
#If WBookSupportsInKind Then
          If (WSheetType = gc_InKind_UserSheet) Then
            If (TopicCnt = 0) Then
              ' SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "=IF(" & gc_Summary_TaxDeductCell & "=" & Chr(34) & "Nein" & Chr(34) & "," & _
                   Chr(34) & "-" & Chr(34) & ",'" & WSheet.Name & "'!" & gc_InKind_TotalCost & ")"
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_TotalCost
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_TotalCost
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_AppliedCost
              SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_ReducedCostVWK
              SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_AcceptedCostVWK
              SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_ReducedCostVOK
              SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_AcceptedCostVOK
              SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                        "='" & WSheet.Name & "'!" & gc_InKind_SanctionsVOK
              ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                   "=MIN('" & WSheet.Name & "'!" & gc_InKind_SanctionsVWK & ", " & _
                        "'" & WSheet.Name & "'!" & gc_InKind_SanctionsVOK & ")"
              ' SummarySheet.Cells(InsertPos, c_ColIdx_Revenue).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InKind_Revenue
            Else
              For I = 1 To TopicCnt
                SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value = Topic(I)
                SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_TotalCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_TotalCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_AppliedCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_ReducedCostVWKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_AcceptedCostVWKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_ReducedCostVOKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                     Replace(Formula(I), gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_AcceptedCostVOKColumn))
                ActiveFormulaLen = Len(Formula(I))
                ActiveCoreFormula = Right(Formula(I), ActiveFormulaLen - 1)
                SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = "=" & _
                     Replace(ActiveCoreFormula, gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_SanctionsVOKColumn))
                ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = "=MIN(" & _
                     Replace(ActiveCoreFormula, gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_SanctionsVWKColumn)) & ", " & _
                     Replace(ActiveCoreFormula, gc_InKind_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InKind_SanctionsVOKColumn)) & ")"
                InsertPos = InsertPos + 1
              Next I
              InsertPos = InsertPos - TopicCnt
            End If
          End If
#End If
#If WBookSupportsStdCost Then
          If (WSheetType = gc_StdCost_UserSheet) Then
            If (TopicCnt = 0) Then
              ' SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "=IF(" & gc_Summary_TaxDeductCell & "=" & Chr(34) & "Nein" & Chr(34) & "," & _
                   Chr(34) & "-" & Chr(34) & ",'" & WSheet.Name & "'!" & gc_StdCost_TotalCost & ")"
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_TotalCost
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_TotalCost
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_AppliedCost
              SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_ReducedCostVWK
              SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_AcceptedCostVWK
              SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_ReducedCostVOK
              SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_AcceptedCostVOK
              SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                        "='" & WSheet.Name & "'!" & gc_StdCost_SanctionsVOK
              ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                   "=MIN('" & WSheet.Name & "'!" & gc_StdCost_SanctionsVWK & ", " & _
                        "'" & WSheet.Name & "'!" & gc_StdCost_SanctionsVOK & ")"
              ' SummarySheet.Cells(InsertPos, c_ColIdx_Revenue).Formula = _
                   "='" & WSheet.Name & "'!" & gc_StdCost_Revenue
            Else
              For I = 1 To TopicCnt
                SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value = Topic(I)
                SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_TotalCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_TotalCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_AppliedCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_ReducedCostVWKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_AcceptedCostVWKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_ReducedCostVOKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                     Replace(Formula(I), gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_AcceptedCostVOKColumn))
                ActiveFormulaLen = Len(Formula(I))
                ActiveCoreFormula = Right(Formula(I), ActiveFormulaLen - 1)
                SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = "=" & _
                     Replace(ActiveCoreFormula, gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_SanctionsVOKColumn))
                ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = "=MIN(" & _
                     Replace(ActiveCoreFormula, gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_SanctionsVWKColumn)) & ", " & _
                     Replace(ActiveCoreFormula, gc_StdCost_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_StdCost_SanctionsVOKColumn)) & ")"
                InsertPos = InsertPos + 1
              Next I
              InsertPos = InsertPos - TopicCnt
            End If
          End If
#End If
#If WBookSupportsInvest Or WBookSupportMaterial Then
          If (WSheetType = gc_InvMat_InvestUserSheet) Or (WSheetType = gc_InvMat_MaterialUserSheet) Then
            If (TopicCnt = 0) Then
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_TotalCostInclTaxes
              SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_TotalCostExclTaxes
              SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_AppliedCost
              SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_ReducedCostVWK
              SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_AcceptedCostVWK
              SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_ReducedCostVOK
              SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_AcceptedCostVOK
              SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_SanctionsVOK
              ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = _
                   "=MIN('" & WSheet.Name & "'!" & gc_InvMat_SanctionsVWK & ", " & _
                        "'" & WSheet.Name & "'!" & gc_InvMat_SanctionsVOK & ")"
              ' SummarySheet.Cells(InsertPos, c_ColIdx_Revenue).Formula = _
                   "='" & WSheet.Name & "'!" & gc_InvMat_Revenue
            Else
              For I = 1 To TopicCnt
                SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value = Topic(I)
                SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostInclTaxes).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_TotalCostInclTaxColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_TotalCostExclTaxes).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_TotalCostExclTaxColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AppliedCost).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_AppliedCostColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVWK).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_ReducedCostVWKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVWK).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_AcceptedCostVWKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_ReducedCostVOK).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_ReducedCostVOKColumn))
                SummarySheet.Cells(InsertPos, c_ColIdx_AcceptedCostVOK).Formula = _
                     Replace(Formula(I), gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_AcceptedCostVOKColumn))
                ActiveFormulaLen = Len(Formula(I))
                ActiveCoreFormula = Right(Formula(I), ActiveFormulaLen - 1)
                SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = "=" & _
                     Replace(ActiveCoreFormula, gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_SanctionsVOKColumn))
                ' SummarySheet.Cells(InsertPos, c_ColIdx_SanctionsVOK).Formula = "=MIN(" & _
                     Replace(ActiveCoreFormula, gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_SanctionsVWKColumn)) & ", " & _
                     Replace(ActiveCoreFormula, gc_InvMat_SumColumnMarker, _
                             ("'" & WSheet.Name & "'!" & gc_InvMat_SanctionsVOKColumn)) & ")"

                InsertPos = InsertPos + 1
              Next I
              InsertPos = InsertPos - TopicCnt
            End If
          End If
#End If
          WSheetCnt = WSheetCnt + InsertCnt
          InsertPos = InsertPos + InsertCnt
        End If
      End If  ' if (Worksheet not a Template)
    Next WSheet
    CurrDataRowCount = WSheetCnt
    ' Debug.Print "'   Collect Worksheet Data: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
    RowOffset = WSheetCollectionTopRow
    If (WSheetCnt = 0) Then
      TemplateHeaderRange.Copy (SummarySheet.Cells(InsertPos, 1))
      SummarySheet.Cells(InsertPos, 1).Value = "Keine Belegaufstellungen verf|fffd|gbar"
      InsertPos = InsertPos + 2
      
      TemplateFooterRange.Copy (SummarySheet.Cells(InsertPos, 1))
      InsertPos = InsertPos + 2
    Else
      CellRangeMsg = ColumnIdxToTitle(c_ColIdx_WorksheetLink) & CStr(CurrDataTopRow) & ":" & _
                     ColumnIdxToTitle(c_ColIdx_Revenue) & CStr(InsertPos - 1)
      SortRangeA = ColumnIdxToTitle(c_ColIdx_ApplSubject) & CStr(CurrDataTopRow) & ":" & _
                     ColumnIdxToTitle(c_ColIdx_ApplSubject) & CStr(InsertPos - 1)
      SortRangeB = ColumnIdxToTitle(c_ColIdx_WorksheetLink) & CStr(CurrDataTopRow) & ":" & _
                     ColumnIdxToTitle(c_ColIdx_WorksheetLink) & CStr(InsertPos - 1)
      SummarySheet.Range(CellRangeMsg).Sort Key1:=SummarySheet.Range(SortRangeA), Order1:=xlAscending, _
                                            Key2:=SummarySheet.Range(SortRangeB), Order2:=xlAscending, _
                                            MatchCase:=False, Header:=xlNo
      ' Debug.Print "'   Sort Worksheet Data: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
      
      ItemPos = 0
      InsertPos = CurrDataTopRow
      While (ItemPos < WSheetCnt)
        ApplSubject = SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value
        
        CellRangeMsg = CStr(InsertPos) & ":" & CStr(InsertPos + 1)
        SummarySheet.Range(CellRangeMsg).EntireRow.Insert
        TemplateHeaderRange.Copy (SummarySheet.Cells(InsertPos, 1))
        If ApplSubject = c_LastSortString Then
          SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetLink).Value = c_UntitledText
        Else
          SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetLink).Value = ApplSubject
        End If
        InsertPos = InsertPos + 2
      
        BlockHead = InsertPos
        BlockTail = BlockHead + 1
        
        While (LCase(SummarySheet.Cells(BlockTail, c_ColIdx_ApplSubject).Value) = LCase(ApplSubject))
          BlockTail = BlockTail + 1
        Wend
        ItemPos = ItemPos + (BlockTail - BlockHead)
             
        InsertPos = BlockTail
        CellRangeMsg = CStr(InsertPos) & ":" & CStr(InsertPos + 1)
        SummarySheet.Range(CellRangeMsg).EntireRow.Insert
        TemplateFooterRange.Copy (SummarySheet.Cells(InsertPos, 1))
        SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value = ApplSubject
        
        For ColIdx = c_FirstSumColIdx To c_LastSumColIdx
          If (ColIdx <> c_ColIdx_Revenue) Then
            SummarySheet.Cells(InsertPos, ColIdx).Formula = _
              "=SUM(" & ColumnIdxToTitle(ColIdx) & CStr(BlockHead) & ":" & _
                        ColumnIdxToTitle(ColIdx) & CStr(BlockTail - 1) & ")"
          End If
          If (GlobalSum(ColIdx) = "") Then
            GlobalSum(ColIdx) = "=" & ColumnIdxToTitle(ColIdx) & CStr(InsertPos)
          Else
            GlobalSum(ColIdx) = GlobalSum(ColIdx) & "+" & ColumnIdxToTitle(ColIdx) & CStr(InsertPos)
          End If
        Next ColIdx
          
        For RowIdx = PrevDataTopRow To PrevDataTopRow + PrevDataRowCount
          If (SummarySheet.Cells(InsertPos, c_ColIdx_WorksheetType).Value = _
              PrevSummarySheet.Cells(RowIdx, c_ColIdx_WorksheetType).Value) And _
             (LCase(SummarySheet.Cells(InsertPos, c_ColIdx_ApplSubject).Value) = _
              LCase(PrevSummarySheet.Cells(RowIdx, c_ColIdx_ApplSubject).Value)) Then
            SummarySheet.Cells(InsertPos, c_LastSumColIdx).Value = PrevSummarySheet.Cells(RowIdx, c_LastSumColIdx).Value
           End If
        Next RowIdx
        
        InsertPos = InsertPos + 2
      Wend
    End If
    ' Debug.Print "'   Insert Section Headers: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
    ' Add "Gesamtsumme" block to worksheet
    TemplateHeaderRange.Copy (SummarySheet.Cells(InsertPos, 1))
    SummarySheet.Cells(InsertPos, 1).Value = "Gesamtsumme"
    InsertPos = InsertPos + 2
    
    BlockHead = InsertPos
    TemplateGlobalFooterRange.Copy (SummarySheet.Cells(InsertPos, 1))
    For ColIdx = c_FirstSumColIdx To c_LastSumColIdx
      SummarySheet.Cells(InsertPos, ColIdx).Formula = GlobalSum(ColIdx)
    Next ColIdx
    ' Debug.Print "'   Insert GlobalSum Section: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    If (CompletePaymentApplication()) Then
      Dim PaymApplWSheet As Worksheet
      Set PaymApplWSheet = ThisWorkbook.Worksheets(gc_PaymAppl_WorkSheet)
      
      PushProtection WSheet:=PaymApplWSheet
      RemoveProtection WSheet:=PaymApplWSheet
      
      ThisWorkbook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_AmountInclTaxCell).Formula = _
              "='" & gc_SummaryWorkSheet & "'!" & ColumnIdxToTitle(c_ColIdx_TotalCostInclTaxes) & CStr(BlockHead)
      ThisWorkbook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_AmountExclTaxCell).Formula = _
              "=IF(" & gc_PaymAppl_TaxDeductCell & "= " & Chr(34) & "Nein" & Chr(34) & ", " & _
              Chr(34) & "---" & Chr(34) & ", " & _
              "'" & gc_SummaryWorkSheet & "'!" & ColumnIdxToTitle(c_ColIdx_TotalCostExclTaxes) & CStr(BlockHead) & ")"
      
      ThisWorkbook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_AppliedAmountCell).Formula = _
              "='" & gc_SummaryWorkSheet & "'!" & ColumnIdxToTitle(c_ColIdx_AppliedCost) & CStr(BlockHead)
      ThisWorkbook.Worksheets(gc_PaymAppl_WorkSheet).Range(gc_PaymAppl_RevenueCell).Formula = _
              "='" & gc_SummaryWorkSheet & "'!" & ColumnIdxToTitle(c_ColIdx_Revenue) & CStr(BlockHead)
      
      PopProtection WSheet:=PaymApplWSheet
    End If
    ' Debug.Print "'   Copy Final Results to Application Sheet: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ' Delete previous/backup contents of worksheet
    
    ' RowRange = CStr(PrevDataTopRow) & ":" & CStr(PrevDataTopRow + PrevDataRowCount - 1)
    ' PrevSummarySheet.Rows(RowRange).Delete
    ' Debug.Print "'   Delete Old Data: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
    
    ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ' We are done using the Template Rows - Hide them again...
    
    SummarySheet.Range(c_TemplateRange).EntireRow.Hidden = True
    ' Debug.Print "'   Hide Templates: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
     
     ' For Each XShape In SummarySheet.Shapes
     '   XShape.Delete
     ' Next XShape
  Else ' If Not(SummarySheet is Nothing)
    Set SummarySheet = PrevSummarySheet
    Set PrevSummarySheet = Nothing
    SummarySheet.Name = gc_SummaryWorkSheet
    PrevProtected = True
  End If ' If SummarySheet is Nothing)
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ' Restore original protection/visibility of the worksheet
  
  If (Not PrevSummarySheet Is Nothing) Then
    ButtonMask = PrevSummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 1).Value
    ViewMode = PrevSummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 3).Value
    PrevSummarySheet.Activate
    ' ScrollRow = PrevSummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 10).Value
    ' ScrollColumn = PrevSummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 11).Value
    ScrollRow = ActiveWindow.ScrollRow
    ScrollColumn = ActiveWindow.ScrollColumn
    SummarySheet.Activate
  
    ' Delete the previous summary sheet
    ' Note: It would be very tempting to simply delete the Worksheet now.
    ' This works fine for many Excel installations, however I found an
    ' Excel 2013 (32-bit) installation on Win7 (32-bit) that reproducably
    ' crashes completly when I simply delete the worksheet here. :(
    ' Workaround: We shall only mark the worksheet for deletion here and
    ' hide it (so it appears deleted to the end user) and then set up a
    ' timer that will time out in one second (when user interaction has
    ' hopefully settled down) and start a garbage collection that actually
    ' deletes the unwanted sheets.
    ' PrevSummarySheet.Delete - DO NOT DO THIS - Excel 2013 will crash!!!
    PrevSummarySheet.Visible = False
    Set PrevSummarySheet = Nothing
  Else
    ButtonMask = &H37F
    ViewMode = 1
    ScrollRow = 1
    ScrollColumn = 1
  End If
  
  ' SummarySheet.Shapes(c_Button_LockAll).Visible = False
  ' SummarySheet.Shapes(c_Button_LockAll).Visible = False
  ' SummarySheet.Range(c_LockButtonRows).EntireRow.Hidden = True
  
  ' Excel 2013 will crash if we do not enable Screen Updating here ;(
  ' Excel 2002 .. Version 10.0
  ' Excel 2003 .. Version 11.0
  ' Excel 2007 .. Version 12.0
  ' Excel 2010 .. Version 14.0
  ' Excel 2013 .. Version 15.0
  ' Checking the Application version is not quite so easy as it seems
  ' since Application.Version is a _string_ not an integer or float.
  ' Converting the string "15.0" to an integer using CInt() or a double
  ' using CDbl() yields 150 (on a german Excel, since the '.' is considered
  ' a (badly placed) thousand separator. (Note: CDbl(15,0) gives 15,0))
  ' Thus we shall use Val() that always works the american way.
  ' As an alternative, we could assume that we will always have two digits
  ' before the comma (and a unknown number behind the comma), we can compare
  ' the version strings alphabetically to obtain a sorting. This is definitly
  ' not elegant, but it works too...
  ' If Application.Version >= "15.0" Then
  If Val(Application.Version) >= 15# Then
    Application.ScreenUpdating = PrevUpdating
  End If
  
  If (ViewMode = 1) Then
    Summary_ModeSelect_Application
  ElseIf (ViewMode = 2) Then
    Summary_ModeSelect_VWK
  ElseIf (ViewMode = 3) Then
    Summary_ModeSelect_VOK
  Else
    Summary_ModeSelect_Application
  End If
  
  If (SummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 1).Value <> ButtonMask) Then
    Summary_AdjustButtons SummarySheet:=SummarySheet, ButtonMask:=ButtonMask
  End If
  Summary_AdjustTaxDeduct SummarySheet:=SummarySheet, _
                          TaxDeductEnable:=(SummarySheet.Range(gc_Summary_TaxDeductCell).Value = "Ja")
  
  ActiveWindow.ScrollRow = ScrollRow
  ActiveWindow.ScrollColumn = ScrollColumn
  
  Application.Calculation = PrevCalculation
  
  ' Debug.Print "Summary_Update() took " & ExecTimer.EndTimer & "Milliseconds"
  If PrevProtected Then
    ProtectWSheet WSheet:=SummarySheet
  End If
  
  PopProtection WBook:=ActiveWorkbook
  
  gv_Summary_UpdateDisable = False
  gv_Summary_Dirty = False
  ' Debug.Print "'   Final Cleanup: " & ExecTimer.GetDeltaTime & "ms (" & ExecTimer.GetTotalTime & "ms)"
  
  Debug.Print "Goodbye from Summary_Update(): " & Format(Now)
  
  ' Delete the old summary sheet outside of this macro to avoid crashes with Excel 2013!
  Application.OnTime Now() + TimeValue("0:00:01"), "EmptyTrash"
End Sub ' Summary_Update()
'
' **********************************************************************
' *                                                                    *
' *                     Summary_HasRevenueEntries()                    *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function Summary_HasRevenueEntries(WSheet As Worksheet)
  Dim DataTopRow As Integer
  Dim DataBottomRow As Integer
  Dim RowIdx As Integer
  Dim SumSubject As String
  
  DataTopRow = WSheet.Range(c_TemplateRange).Row
  SumSubject = WSheet.Cells(DataTopRow + 3, c_ColIdx_WorksheetType)
  
  DataTopRow = WSheet.Range(c_TemplateRange).Row + _
               WSheet.Range(c_TemplateRange).Rows.Count
  DataBottomRow = WSheet.UsedRange.Row + WSheet.UsedRange.Rows.Count - 4
  
  For RowIdx = DataTopRow To DataBottomRow
    If (WSheet.Cells(RowIdx, c_ColIdx_WorksheetType) = SumSubject) Then
      If Not IsEmpty(WSheet.Cells(RowIdx, c_ColIdx_Revenue)) Then
        Summary_HasRevenueEntries = True
        Exit Function
      End If
    End If
  Next RowIdx
  
  Summary_HasRevenueEntries = False

End Function ' Summary_HasRevenueEntries()
'

' **********************************************************************
' *                                                                    *
' *                       Summary_AdjustButtons()                      *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_AdjustButtons(SummarySheet As Worksheet, ButtonMask As Integer)
  Dim ButtonMaskExt As Integer
  ' Dim SummarySheet As Worksheet
  Dim LeftEdge As Integer
  Dim RightEdge As Integer
  Dim ButtonWidth As Integer
  Dim GapWidth As Integer
  Dim Button As Shape
  Dim PosX As Integer
  Dim PosY As Integer
  Dim UserButton(0 To 5) As Shape
  Dim UserButtonCnt As Integer
  Dim UserButtonPos As Integer
  Dim UserButtonIdx As Integer
  Dim UsedSpaceWidth As Integer
  Dim AvailSpaceWidth As Integer
  Dim UserButtonRowCnt As Integer
  Dim I As Integer
  
  ' Set SummarySheet = ActiveSheet
  
  If ButtonMask = -1 Then
    ButtonMask = SummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 1).Value
  End If
  
  ' ButtonMask
  '  Bit 0 (0x01): Button "Erase All" Visible
  '  Bit 1 (0x02): Button "Investitionskosten" Visible
  '  Bit 2 (0x04): Button "Sachkosten" Visible
  '  Bit 3 (0x08): Button "Unbare Sachleistungen" Visible
  '  Bit 4 (0x10): Button "Standardkosten" Visible
  '  Bit 5 (0x20): Button "Personalkosten" Visible
  '  Bit 6 (0x40): Button "Notizen" Visible
  '  Bit 7 (0x80): Button "|fffd|bersicht aktualisieren"
  '  Bit 8 (0x100): Button "Unlock All"
  '  Bit 9 (0x200): Button "Lock All"
  '  Bit 10- Reserved
  ButtonMaskExt = &H381
#If WBookSupportsInvest Then
  ButtonMaskExt = ButtonMaskExt Or 2
#End If
#If WBookSupportsMaterial Then
  ButtonMaskExt = ButtonMaskExt Or 4
#End If
#If WBookSupportsInKind Then
  ButtonMaskExt = ButtonMaskExt Or 8
#End If
#If WBookSupportsStdCost Then
  ButtonMaskExt = ButtonMaskExt Or &H10
#End If
#If WBookSupportsLabour Then
  ButtonMaskExt = ButtonMaskExt Or &H20
#End If
#If WBookSupportsNotes Then
  ButtonMaskExt = ButtonMaskExt Or &H40
#End If
  ' ButtonMaskExt = SummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 2).Value
  ' ButtonMaskExt = &H3CB    ' Only Invest & InKind & Notes
  ' ButtonMaskExt = &H3EF    ' Everything without StdCost
  ' ButtonMaskExt = &H3FF    ' Enable Everything
  ButtonMask = ButtonMask And ButtonMaskExt
  
  PushProtection WSheet:=SummarySheet
  RemoveProtection WSheet:=SummarySheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  LeftEdge = SummarySheet.UsedRange.Left
  ' RightEdge = SummarySheet.Cells(1, 8).Left
  RightEdge = SummarySheet.Cells(1, SummarySheet.UsedRange.Column + SummarySheet.UsedRange.Columns.Count).Left
    
  Set Button = SummarySheet.Shapes(c_Button_ModeApplication)
  ButtonWidth = ButtonWidth + Button.Width
  GapWidth = GapWidth + 40
  
  Set Button = SummarySheet.Shapes(c_Button_ModeVWK)
  ButtonWidth = ButtonWidth + Button.Width
  GapWidth = GapWidth + 40
  
  Set Button = SummarySheet.Shapes(c_Button_ModeVOK)
  ButtonWidth = ButtonWidth + Button.Width
  
  PosX = LeftEdge + (RightEdge - LeftEdge - ButtonWidth - GapWidth) / 2

  Set Button = SummarySheet.Shapes(c_Button_ModeApplication)
  Button.Left = PosX
  PosX = PosX + Button.Width + 40
  
  Set Button = SummarySheet.Shapes(c_Button_ModeVWK)
  Button.Left = PosX
  PosX = PosX + Button.Width + 40
  
  Set Button = SummarySheet.Shapes(c_Button_ModeVOK)
  Button.Left = PosX
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  LeftEdge = SummarySheet.UsedRange.Left
  RightEdge = SummarySheet.Cells(1, SummarySheet.UsedRange.Column + SummarySheet.UsedRange.Columns.Count).Left
    
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  SummarySheet.Range(c_ButtonARows).EntireRow.Hidden = ((ButtonMask And &H81) = 0)
  
  UsedSpaceWidth = 0
  UserButtonCnt = 0
  
  Set Button = SummarySheet.Shapes(c_Button_EraseAll)
  If (ButtonMask And 1) = 1 Then
    UsedSpaceWidth = UsedSpaceWidth + Button.Width
    UserButtonCnt = UserButtonCnt + 1
    Button.Visible = True
  Else
    Button.Visible = False
  End If
  
  Set Button = SummarySheet.Shapes(c_Button_UpdateSummary)
  If (ButtonMask And &H80) = &H80 Then
    UsedSpaceWidth = UsedSpaceWidth + Button.Width
    UserButtonCnt = UserButtonCnt + 1
    Button.Visible = True
  Else
    Button.Visible = False
  End If
  
  PosX = LeftEdge + (RightEdge - LeftEdge - UsedSpaceWidth - (UserButtonCnt - 1) * 20) / 2
  PosY = SummarySheet.Range(c_ButtonARows).Top
  If (ButtonMask And 1) = 1 Then
    Set Button = SummarySheet.Shapes(c_Button_EraseAll)
    Button.Left = PosX
    Button.Top = PosY
    PosX = PosX + Button.Width + 20
  End If
  
  If (ButtonMask And &H80) = &H80 Then
    Set Button = SummarySheet.Shapes(c_Button_UpdateSummary)
    Button.Left = PosX
    Button.Top = PosY
    PosX = PosX + Button.Width + 20
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  ButtonWidth = 0
  GapWidth = 0
  UserButtonCnt = 0
  
  Set UserButton(UserButtonCnt) = SummarySheet.Shapes(c_Button_CreateInvestSheet)
  If (ButtonMask And 2) = 2 Then
    UserButton(UserButtonCnt).Visible = True
    UserButtonCnt = UserButtonCnt + 1
  Else
    UserButton(UserButtonCnt).Visible = False
  End If
  
  Set UserButton(UserButtonCnt) = SummarySheet.Shapes(c_Button_CreateMaterialSheet)
  If (ButtonMask And 4) = 4 Then
    UserButton(UserButtonCnt).Visible = True
    UserButtonCnt = UserButtonCnt + 1
  Else
    UserButton(UserButtonCnt).Visible = False
  End If
  
  Set UserButton(UserButtonCnt) = SummarySheet.Shapes(c_Button_CreateInKindContribSheet)
  If (ButtonMask And 8) = 8 Then
    UserButton(UserButtonCnt).Visible = True
    UserButtonCnt = UserButtonCnt + 1
  Else
    UserButton(UserButtonCnt).Visible = False
  End If
  
  Set UserButton(UserButtonCnt) = SummarySheet.Shapes(c_Button_CreateStdCostSheet)
  If (ButtonMask And &H10) = &H10 Then
    UserButton(UserButtonCnt).Visible = True
    UserButtonCnt = UserButtonCnt + 1
  Else
    UserButton(UserButtonCnt).Visible = False
  End If
  
  Set UserButton(UserButtonCnt) = SummarySheet.Shapes(c_Button_CreateLabourSheet)
  If (ButtonMask And &H20) = &H20 Then
    UserButton(UserButtonCnt).Visible = True
    UserButtonCnt = UserButtonCnt + 1
  Else
    UserButton(UserButtonCnt).Visible = False
  End If
  
  Set UserButton(UserButtonCnt) = SummarySheet.Shapes(c_Button_CreateScratchPadSheet)
  If (ButtonMask And &H40) = &H40 Then
    UserButton(UserButtonCnt).Visible = True
    UserButtonCnt = UserButtonCnt + 1
  Else
    UserButton(UserButtonCnt).Visible = False
  End If
  
  AvailSpaceWidth = RightEdge - LeftEdge
  UserButtonPos = 0
  UserButtonRowCnt = 0
  While UserButtonPos < UserButtonCnt
    UserButtonRowCnt = UserButtonRowCnt + 1
    
    If (UserButtonRowCnt = 1) Then
      SummarySheet.Range(c_ButtonBRows).EntireRow.Hidden = False
      PosY = SummarySheet.Range(c_ButtonBRows).Top
    ElseIf (UserButtonRowCnt = 2) Then
      SummarySheet.Range(c_ButtonCRows).EntireRow.Hidden = False
      PosY = SummarySheet.Range(c_ButtonCRows).Top
    ElseIf (UserButtonRowCnt = 3) Then
      SummarySheet.Range(c_ButtonDRows).EntireRow.Hidden = False
      PosY = SummarySheet.Range(c_ButtonDRows).Top
    End If
    
    UsedSpaceWidth = 0
    UserButtonIdx = UserButtonPos
    ButtonWidth = UserButton(UserButtonIdx).Width
    While (UserButtonIdx < UserButtonCnt) And ((UsedSpaceWidth + ButtonWidth) < AvailSpaceWidth)
      UsedSpaceWidth = UsedSpaceWidth + ButtonWidth + 20
      UserButtonIdx = UserButtonIdx + 1
      If (UserButtonIdx < UserButtonCnt) Then
        ButtonWidth = UserButton(UserButtonIdx).Width
      Else
        ButtonWidth = 0
      End If
    Wend
    UsedSpaceWidth = UsedSpaceWidth - 20
    
    PosX = LeftEdge + (AvailSpaceWidth - UsedSpaceWidth) / 2
    For I = UserButtonPos To UserButtonIdx - 1
      ButtonWidth = UserButton(I).Width
      UserButton(I).Left = PosX
      UserButton(I).Top = PosY
      UserButton(I).Visible = True
      PosX = PosX + ButtonWidth + 20
    Next I
    UserButtonPos = UserButtonIdx
  Wend ' While UserButtonPos < UserButtonCnt
  
  If (UserButtonRowCnt < 2) Then
    SummarySheet.Range(c_ButtonCRows).EntireRow.Hidden = True
  End If
  If (UserButtonRowCnt < 3) Then
    SummarySheet.Range(c_ButtonDRows).EntireRow.Hidden = True
  End If
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  SummarySheet.Range(c_LockButtonRows).EntireRow.Hidden = ((ButtonMask And &H300) = 0)
  
  ButtonWidth = 0
  GapWidth = 0
  PosY = SummarySheet.Range(c_LockButtonRows).Top
  
  If (ButtonMask And &H100) = &H100 Then
    Set Button = SummarySheet.Shapes(c_Button_UnlockAll)
    ButtonWidth = ButtonWidth + Button.Width
    GapWidth = GapWidth + 20
  End If
  
  If (ButtonMask And &H200) = &H200 Then
    Set Button = SummarySheet.Shapes(c_Button_LockAll)
    ButtonWidth = ButtonWidth + Button.Width
    GapWidth = GapWidth + 20
  End If
  
  If (GapWidth > 0) Then
    GapWidth = GapWidth - 20
  End If
  
  PosX = LeftEdge + (RightEdge - LeftEdge - ButtonWidth - GapWidth) / 2

  Set Button = SummarySheet.Shapes(c_Button_UnlockAll)
  If (ButtonMask And &H100) = &H100 Then
    Button.Left = PosX
    Button.Top = PosY
    Button.Visible = True
    PosX = PosX + Button.Width + 20
  Else
    Button.Visible = False
  End If

  Set Button = SummarySheet.Shapes(c_Button_LockAll)
  If (ButtonMask And &H200) = &H200 Then
    Button.Left = PosX
    Button.Top = PosY
    Button.Visible = True
  Else
    Button.Visible = False
  End If

  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  SummarySheet.Range(gc_ButtonVisibilityRow).EntireRow.Hidden = True
  SummarySheet.Range(gc_ButtonVisibilityRow).Cells(1, 1).Value = ButtonMask
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PopProtection WSheet:=SummarySheet
  
End Sub ' Summary_AdjustButtons()
'

' **********************************************************************
' *                                                                    *
' *                         Summary_DataValid()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Function Summary_DataValid(WSheet As Worksheet) As Boolean
  Dim ErrorList As String
  Dim Button As Integer
  Dim SupportPeriodStart As Date
  Dim SupportPeriodEnd As Date
  
  ErrorList = ""
  If IsEmptyString(WSheet.Range(gc_Summary_ApplicantIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Betriebs-/Klientennummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicantNameCell).Value) Then
    ErrorList = ErrorList & "    .) Die Name des/der F|fffd|rderungswerber/in fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_ApplicationIDCell).Value) Then
    ErrorList = ErrorList & "    .) Die Antragsnummer fehlt" & vbCr
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodStartCell).Value) Then
    ErrorList = ErrorList & "    .) Die Beginn der F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodStart = WSheet.Range(c_SupportPeriodStartCell).Value
  End If
  
  If IsEmptyString(WSheet.Range(c_SupportPeriodEndCell).Value) Then
    ErrorList = ErrorList & "    .) Das Ende der F|fffd|rderzeitraums fehlt" & vbCr
  Else
    SupportPeriodEnd = WSheet.Range(c_SupportPeriodEndCell).Value
  End If
  
  If (SupportPeriodStart > 0) And (SupportPeriodEnd > 0) And (SupportPeriodStart >= SupportPeriodEnd) Then
    ErrorList = ErrorList & "    .) Das Ende des F|fffd|rderzeitraums liegt vor dem Anfang" & vbCr
  End If
  
  If (ErrorList <> "") Then
    Button = MsgBox(Prompt:="Der Zahlungsantrag ist nicht korrekt ausgef|fffd|llt:" & vbCr & _
           ErrorList & _
           vbCr & "Wollen Sie trotzdem drucken?", _
           Buttons:=vbYesNo Or vbDefaultButton2 Or vbExclamation, _
           Title:="Fehler im Zahlungsantrag")
    Summary_DataValid = (Button = vbYes)
  Else
    Summary_DataValid = True
  End If
End Function ' Summary_DataValid()
'

' **********************************************************************
' *                                                                    *
' *                        Summary_BeforePrint()                       *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_BeforePrint(Optional WSheet As Worksheet = Nothing)
  If (WSheet Is Nothing) Then
    Set WSheet = ActiveSheet
  End If
  
  Set v_PrintWSheet = WSheet
  
  ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  WSheet.Shapes(c_Button_ModeApplication).Visible = False
  WSheet.Shapes(c_Button_ModeVWK).Visible = False
  WSheet.Shapes(c_Button_ModeVOK).Visible = False
  WSheet.Range(c_ModeButtonRows).Rows.Hidden = True
  
  WSheet.Shapes(c_Button_EraseAll).Visible = False
  WSheet.Shapes(c_Button_CreateInvestSheet).Visible = False
  WSheet.Shapes(c_Button_CreateMaterialSheet).Visible = False
  WSheet.Shapes(c_Button_CreateInKindContribSheet).Visible = False
  WSheet.Shapes(c_Button_CreateStdCostSheet).Visible = False
  WSheet.Shapes(c_Button_CreateLabourSheet).Visible = False
  WSheet.Shapes(c_Button_CreateScratchPadSheet).Visible = False
  WSheet.Range(c_ButtonRows).Rows.Hidden = True
  
  WSheet.Shapes(c_Button_LockAll).Visible = False
  WSheet.Shapes(c_Button_UnlockAll).Visible = False
  WSheet.Range(c_LockButtonRows).Rows.Hidden = True

  PopProtection WSheet:=WSheet
End Sub ' Summary_BeforePrint()
'

' **********************************************************************
' *                                                                    *
' *                        Summary_AfterPrint()                        *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub Summary_AfterPrint(Optional WSheet As Worksheet = Nothing)
  
  If (v_PrintWSheet Is Nothing) Then
    If (WSheet Is Nothing) Then
      Set WSheet = ActiveSheet
    End If
  Else
    Set WSheet = v_PrintWSheet
  End If
  Set v_PrintWSheet = Nothing
  
  PushProtection WSheet:=WSheet
  RemoveProtection WSheet:=WSheet
  
  WSheet.Range(c_ModeButtonRows).Rows.Hidden = False
  WSheet.Shapes(c_Button_ModeApplication).Visible = True
  WSheet.Shapes(c_Button_ModeVWK).Visible = True
  WSheet.Shapes(c_Button_ModeVOK).Visible = True

  Summary_AdjustButtons SummarySheet:=WSheet, ButtonMask:=(Range(gc_ButtonVisibilityRow).Cells(1, 1).Value)
  
  ' WSheet.Range(c_ButtonRows).Rows.Hidden = False
  ' WSheet.Shapes(c_Button_EraseAll).Visible = True
  ' WSheet.Shapes(c_Button_CreateInvestSheet).Visible = True
  ' WSheet.Shapes(c_Button_CreateMaterialSheet).Visible = True
  ' WSheet.Shapes(c_Button_CreateInKindContribSheet).Visible = True
  ' WSheet.Shapes(c_Button_CreateStdCostSheet).Visible = True
  ' WSheet.Shapes(c_Button_CreateLabourSheet).Visible = True
  ' WSheet.Shapes(c_Button_CreateScratchPadSheet).Visible = True
  
  ' WSheet.Range(c_LockButtonRows).Rows.Hidden = False
  ' WSheet.Shapes(c_Button_LockAll).Visible = True
  ' WSheet.Shapes(c_Button_UnlockAll).Visible = True

  PopProtection WSheet:=WSheet
End Sub ' Summary_AfterPrint()

' **********************************************************************
' *                            |fffd|bersicht.bas                           *
' **********************************************************************


' InQuest injected base64 decoded content
' Y(^z
' *'~(
' RyhrE
' Y(^z
' Y(^z
' Y(^z
' Y(^z
' jU,z
' N+ex
' jU,z
' #zKZ
' -"w%:
' -"w%:
' -"w%:
' -"w%:
' -"w%:
' :'y8
' Y(^z

INQUEST-PP=macro
