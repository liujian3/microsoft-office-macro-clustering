Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "clsMenuEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'-------------------------------------------------------------------------
' Module    : clsMenuEvents
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : This class executes the events set for the controls
'             and holds some details about the control it is attached to
'-------------------------------------------------------------------------
Option Explicit

'Set which events we might want to listen to
Private WithEvents mTbx As MSForms.TextBox
Attribute mTbx.VB_VarHelpID = -1
Private WithEvents mLbl As MSForms.Label
Attribute mLbl.VB_VarHelpID = -1
Private WithEvents mCbb As MSForms.ComboBox
Attribute mCbb.VB_VarHelpID = -1
Private WithEvents mCbx As MSForms.CheckBox
Attribute mCbx.VB_VarHelpID = -1
Private WithEvents mCmb As MSForms.CommandButton
Attribute mCmb.VB_VarHelpID = -1
Private WithEvents mFrm As MSForms.Frame
Attribute mFrm.VB_VarHelpID = -1
Private WithEvents mLbx As MSForms.ListBox
Attribute mLbx.VB_VarHelpID = -1
Private WithEvents mObt As MSForms.OptionButton
Attribute mObt.VB_VarHelpID = -1

'The variable that will hold the control of this instance
Private mCtl As MSForms.Control
'Holds the form the control belong to?
Private moParentFormInstance As Object
'Caption of control
Private msCaption As String
'Name of routine to run on click
Private msOnAction As String
'If control is inside a frame, this is the one
Private moChildFrame As MSForms.Control
'Accelerator key (not implemented yet)
Private msAccelerator As String
'Control name
Private msName As String

Private Sub Class_Terminate()
    Set moParentFormInstance = Nothing
    Set moChildFrame = Nothing
End Sub

Public Property Set Ctl(oCtl As MSForms.Control)
'-------------------------------------------------------------------------
' Procedure : Ctl Created by Jan Karel Pieterse
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : This is where this class's instance is told what control it
'             is listening to
'-------------------------------------------------------------------------
    'Using one varaible to contain the control to get at properties
    Set mCtl = oCtl
    'Setting a dedicated variable so the events trigger
    Select Case TypeName(mCtl)
    Case "TextBox"
        Set mTbx = mCtl
    Case "Label"
        Set mLbl = mCtl
    Case "ComboBox"
        Set mCbb = mCtl
    Case "CheckBox"
        Set mCbx = mCtl
    Case "CommandButton"
        Set mCmb = mCtl
    Case "Frame"
        Set mFrm = mCtl
    Case "ListBox"
        Set mLbx = mCtl
    Case "OptionButton"
        Set mObt = mCtl
    End Select
End Property

Public Property Get Ctl() As MSForms.Control
    Set Ctl = mCtl
End Property


Private Sub mFrm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'-------------------------------------------------------------------------
' Procedure : mFrm_MouseMove Created by Jan Karel Pieterse
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : This event handles the highlighting of menu controls inside a frame
'-------------------------------------------------------------------------
    Dim icount As Integer
    For icount = 0 To mFrm.Controls.Count - 1
        mFrm.Controls(icount).BackColor = glMenuBack
    Next
End Sub

Private Sub mLbl_Click()
'-------------------------------------------------------------------------
' Procedure : mLbl_Click Created by Jan Karel Pieterse
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : Handles click event on menu lables
'-------------------------------------------------------------------------
    Dim oFrm As Control
    Dim bShows As Boolean
    For Each oFrm In mCtl.Parent.Controls
        'Only look at frames
        If TypeName(oFrm) = "Frame" Then
            'Only do menu lables!
            'Hide all menu frames
            If InStr(oFrm.Name, "frmMenu") > 0 Then
                oFrm.Visible = False
            End If
        End If
    Next
    'If the clicked menu control has a subframe, show it
    If Not ChildFrame Is Nothing Then
        bShows = ChildFrame.Visible
        ChildFrame.Visible = Not bShows
        ChildFrame.Height = ChildFrame.Controls.Count * 16
        'If there is an OnAction, do it
        If OnAction <> "" Then
            DoAction
        End If
    Else
        'If there is an OnAction, do it
        If OnAction <> "" Then
            DoAction
        End If
    End If
End Sub

Private Sub mLbl_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'-------------------------------------------------------------------------
' Procedure : mLbl_MouseMove Created by Jan Karel Pieterse
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : Takes care of the highlighting of the top level menu items.
'             Also ensures the proper frame is shown.
'-------------------------------------------------------------------------
    Dim oLbl As Control
    Dim oFrm As Control
    Dim bShows As Boolean
    Static sPrevx As Single
    Static sPrevy As Single
    'Somehow, this event starts looping endlessly, prevent this
    'when mouse is not moving
    If X = sPrevx Then Exit Sub
    If Y = sPrevy Then Exit Sub
    sPrevy = Y
    sPrevx = X
    'Loop all controls on form or inside frame
    For Each oLbl In mCtl.Parent.Controls
        'Just the labels are interesting
        If TypeName(oLbl) = "Label" Then
            'Just do the menu ones
            If InStr(oLbl.Name, "lblMenu") > 0 Then
                'If control has a childframe, it must be a top level menu
                If InStr(oLbl.Name, "lblMenu1") = 0 Then
                    oLbl.BackColor = glMenuBack
                Else
                    oLbl.BackColor = glMainMenuBack
                End If
            End If
        End If
    Next
    'If control has a childframe, it must be a top level menu
    If ChildFrame Is Nothing Then
        mLbl.BackColor = glMenuHighlight
    Else
        mLbl.BackColor = glMainMenuHighlight
    End If
    'Now check if we have to show a sublevel frame
    'First hide them all and note if any was visible
    If Not ChildFrame Is Nothing Then
        For Each oFrm In mCtl.Parent.Controls
            If TypeName(oFrm) = "Frame" Then
                If InStr(oFrm.Name, "frmMenu") > 0 Then
                    'If any menu frame is visble, bShows will be true
                    bShows = bShows Or oFrm.Visible
                    oFrm.Visible = False
                End If
            End If
        Next
        ChildFrame.Visible = bShows
        'Adapt height of frame to number of items in its menu
        ChildFrame.Height = ChildFrame.Controls.Count * 16
    End If
    mLbl.Parent.Repaint
End Sub

Public Property Get ParentFormInstance() As Object
    Set ParentFormInstance = moParentFormInstance
End Property

Public Property Set ParentFormInstance(objParentFormInstance As Object)
    Set moParentFormInstance = objParentFormInstance
End Property

Public Property Get Caption() As String
    Caption = msCaption
End Property

Public Property Let Caption(ByVal sCaption As String)
    Dim lPos As Long
    lPos = InStr(sCaption, "&")
    If lPos > 0 Then
        msCaption = Left(sCaption, lPos - 1) & Right(sCaption, Len(sCaption) - lPos)
        Accelerator = Mid(sCaption, lPos + 1, 1)
    Else
        msCaption = sCaption
        Caption = msCaption
    End If
    mCtl.Caption = msCaption
End Property

Public Property Get OnAction() As String
    OnAction = msOnAction
End Property

Public Property Let OnAction(ByVal sOnAction As String)
    msOnAction = sOnAction
End Property

Public Property Get Name() As String
    Name = msName
End Property

Public Property Let Name(ByVal sName As String)
    msName = sName
    mCtl.Name = msName
End Property

Public Property Get ChildFrame() As MSForms.Control
    Set ChildFrame = moChildFrame
End Property

Public Property Set ChildFrame(objChildFrame As MSForms.Control)
    Set moChildFrame = objChildFrame
End Property

Public Property Get Accelerator() As String
    Accelerator = msAccelerator
End Property

Public Property Let Accelerator(ByVal sAccelerator As String)
    msAccelerator = sAccelerator
    mCtl.Accelerator = msAccelerator
End Property

Private Sub DoAction()
    'If code runs in Excel 2000, use the callbyName function
    'to execute the OnAction event inside the proper instance of
    'the module of the userform.
    'If Excel 97, just call the OnAction sub in a normal module.
    #If VBA6 Then
        CallByName Me.ParentFormInstance, OnAction, VbMethod
    #Else
        Application.Run OnAction
    #End If
End Sub

Attribute VB_Name = "modMain"
'-------------------------------------------------------------------------
' Module    : modMain
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : Global variables and entrypoint for userform
'-------------------------------------------------------------------------
Option Explicit

'Colours of the menu
Public Const glMainMenuBack As Long = &H80000004 'Grey (should equal form background)
Public Const glMainMenuHighlight As Long = &HC0C0C0 'Dark grey
Public Const glMenuBack As Long = 16777215 'White
Public Const glMenuHighlight As Long = &H80000004 'Grey

'Global object variable that holds the userform's current instance (MANDATORY)
Public frmForm As ufForm

Sub ShowForm()
    'Look for existing instance of frmForm
    If frmForm Is Nothing Then
        'absent, create it
        Set frmForm = New ufForm
    End If
    With frmForm
        'Init the form and pass the name of the global variable
        'that contains the instance.
        'This variable is used by Excel 2000 and up to
        'find the proper click event code in the form's instance.
        .Initialise "frmForm"
        .Show
    End With
    Set frmForm = Nothing
End Sub
Attribute VB_Name = "modMenuSubs"
'-------------------------------------------------------------------------
' Module    : modMenuSubs
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : Module containing the click event subs for the userform menu
'             (Excel 97 ONLY)
'-------------------------------------------------------------------------
Option Explicit

Option Private Module

'Below are the subs that are called by clicking on the menu labels (Excel 97 only).
'These subs are NOT needed in case this is project does NOT run on 97
'If the project needs to work on both Excel 97 AND higher, each sub here needs
'a copy in the module behind the userform

Public Sub FileOpen()
    MsgBox "You clicked File, Open"
End Sub

Public Sub FileSave()
    MsgBox "You clicked File, Save"
End Sub

Public Sub FileSaveAs()
    MsgBox "You clicked File, Save As"
End Sub

Public Sub FileClose()
    MsgBox "You clicked File, Close"
End Sub

Public Sub FileExit()
    MsgBox "You clicked File, Exit"
    frmForm.Hide
End Sub

Public Sub ToolsOptions()
    MsgBox "You clicked Tools, Options"
End Sub

Public Sub ExtraAbout()
    MsgBox "You clicked Help, About"
End Sub

Attribute VB_Name = "ufForm"
Attribute VB_Base = "0{68A44A51-7C1F-4518-85EF-3C307971C90E}{5E506FDB-5272-4E19-B2EB-267C1C9A4DBD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'-------------------------------------------------------------------------
' Module    : ufForm
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : Code behind ufForm
'-------------------------------------------------------------------------
Option Explicit

'Collection to hold all controls that are hooked up
'to an instance of clsMenuEVents
'Needed to ensure the instances are kept "alive"
Dim mcolMenuControls As Collection
'Holds the "current" instance of a clsMenuEvents object which we are
'assigning a control to
Dim mcMenuEvents As clsMenuEvents

'Holds the name of the object variable in which the form instance is stored.
Private msFormInstanceName As String

Public Sub Initialise(sInstanceName As String)
    msFormInstanceName = sInstanceName
    BuildMenu
End Sub

Private Sub BuildMenu()
'-------------------------------------------------------------------------
' Procedure : BuildMenu Created by Jan Karel Pieterse
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : This is the routine that builds the entire menu structure
'-------------------------------------------------------------------------
    Dim oMenuSheet As Worksheet
    Dim oCell As Range
    Dim oCtl As MSForms.Control
    Dim oLastctl As clsMenuEvents
    Dim oLastctl1 As clsMenuEvents
    Dim oParent As Object
    Dim iLevel As Integer
    Dim iTopMenu As Integer
    Dim iVertPos As Integer
    Dim iLevel1Ct As Integer
    'initialise collection
    Set mcolMenuControls = New Collection
    'Where is my menu definition?
    Set oMenuSheet = ThisWorkbook.Worksheets("FormMenu")
    'Nesting level of menu (max is 2 at the moment)
    iLevel = 1
    iTopMenu = 0
    For Each oCell In oMenuSheet.UsedRange.Columns(1).Cells
        If iLevel = 1 Then
            'If we're at top level, the parent is the form itself
            Set oParent = Me
            iVertPos = 0
        End If
        'End of menu definition has been reached
        If UCase(oCell.Value) = "STOP" Then Exit For
        If oCell.Offset(, iLevel) <> "" Then
            Set oCtl = oParent.Controls.Add("Forms.Label.1")
            Set mcMenuEvents = New clsMenuEvents
            Set mcMenuEvents.Ctl = oCtl
            With mcMenuEvents
                Set .ParentFormInstance = Me
                .Caption = oCell.Offset(, iLevel)
                .Ctl.Name = "lblMenu" & iLevel & .Caption
                iVertPos = iVertPos + 16
                .OnAction = oCell.Offset(, iLevel + 1)
                'Position control, either at top, or inside a frame
                If iLevel = 1 Then
                    .Ctl.Left = iLevel1Ct * 30
                    .Ctl.Top = 0
                    .Ctl.BackColor = glMainMenuBack
                Else
                    .Ctl.Left = 5
                    .Ctl.Top = iVertPos
                    .Ctl.BackColor = glMenuBack
                End If
            End With
            'Now add to collection!
            mcolMenuControls.Add mcMenuEvents
            Set oLastctl = mcMenuEvents
        ElseIf oCell.Offset(, iLevel + 1) <> "" Then
            'Just got at a branch in the menu, add frame first
            'Increase level
            iLevel = iLevel + 1
            iTopMenu = iTopMenu + 1
            Set oCtl = oParent.Controls.Add("Forms.Frame.1")
            'Hook up frame to clsMenuEvents
            Set mcMenuEvents = New clsMenuEvents
            Set mcMenuEvents.Ctl = oCtl
            'Set Parent for subsequent controls
            Set oParent = oCtl
            With mcMenuEvents
                .Ctl.Top = 10
                .Ctl.Left = (iTopMenu - 1) * 30
                .Ctl.Width = 100
                Set .ParentFormInstance = Me
                If iLevel = 1 Then
                    .Ctl.BackColor = glMainMenuBack
                Else
                    .Ctl.BackColor = glMenuBack
                End If
                If Not oLastctl Is Nothing Then
                    Set oLastctl.ChildFrame = .Ctl
                End If
                If Not oLastctl1 Is Nothing Then
                    Set oLastctl1.ChildFrame = .Ctl
                End If
                .Ctl.Name = "frmMenu" & oLastctl.Ctl.Name
                .Ctl.Visible = False
            End With
            'Add frame's event handler instance to collection
            mcolMenuControls.Add mcMenuEvents
            'Now add this row's menu item to the new frame.
            Set oCtl = oParent.Controls.Add("Forms.Label.1")
            'Hook up to clsMenuEvents
            Set mcMenuEvents = New clsMenuEvents
            Set mcMenuEvents.Ctl = oCtl
            'Set some properties
            With mcMenuEvents
                .OnAction = oCell.Offset(, iLevel + 1)
                Set .ParentFormInstance = Me
                .Caption = oCell.Offset(, iLevel)
                .Name = "lblMenu" & iLevel & .Caption
                .Ctl.Left = 5
                .Ctl.Top = iVertPos
            End With
            'Add to collection
            mcolMenuControls.Add mcMenuEvents
        Else
            'We've reached the last item of a submenu, decrease level
            iLevel = iLevel - 1
            Set oCtl = Me.Controls.Add("Forms.Label.1")
            'Hook up clsMenuEvents
            Set mcMenuEvents = New clsMenuEvents
            Set mcMenuEvents.Ctl = oCtl
            'Set some properties
            With mcMenuEvents
                .Caption = oCell.Offset(, iLevel)
                .Name = "lblMenu" & iLevel & .Caption
                .OnAction = oCell.Offset(, iLevel + 1)
                Set .ParentFormInstance = Me
                Set oLastctl = mcMenuEvents
                If iLevel = 1 Then
                    iLevel1Ct = iLevel1Ct + 1
                    .Ctl.Left = iLevel1Ct * 30
                    .Ctl.Top = 0
                Else
                    .Ctl.Left = iLevel1Ct * 20
                    .Ctl.Top = iVertPos
                End If
            End With
            'And add to collection
            mcolMenuControls.Add mcMenuEvents
        End If
    Next
End Sub

Private Sub cmbClose_Click()
    Unload Me
End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'-------------------------------------------------------------------------
' Procedure : UserForm_MouseMove Created by Jan Karel Pieterse
' Company   : JKP Application Development Services (c) 2006
' Author    : Jan Karel Pieterse
' Created   : 10-3-2006
' Purpose   : Ensures menuframes are hidden when mouse moves outside of the menu
'-------------------------------------------------------------------------
    Dim oCtl As Control
    Static sPrevx As Single
    Static sPrevy As Single
    Static lct As Long
    'Somehow, this event starts looping endlessly, prevent this
    'when mouse is not moving
    If X = sPrevx Then Exit Sub
    If Y = sPrevy Then Exit Sub
    For Each oCtl In Me.Controls
        If TypeName(oCtl) = "Frame" Then
            If InStr(oCtl.Name, "frmMenu") > 0 Then
                oCtl.Visible = False
            End If
        ElseIf TypeName(oCtl) = "Label" Then
            If InStr(oCtl.Name, "lblMenu") > 0 Then
                'If control has a childframe, it must be a top level menu
                If InStr(oCtl.Name, "lblMenu1") = 0 Then
                    oCtl.BackColor = glMenuBack
                Else
                    oCtl.BackColor = glMainMenuBack
                End If
            End If
        End If
    Next
End Sub

'=====================================================================

'Below are the subs that are called by clicking on the menu
'labels (Excel 2000 and up).
'These subs are NOT needed in case this is an Excel 97 project ONLY
'If the project needs to work on both Excel 97 AND higher, each sub here needs
'a copy in a normal module

Public Sub FileOpen()
    MsgBox "You clicked File, Open"
End Sub

Public Sub FileSave()
    MsgBox "You clicked File, Save"
End Sub

Public Sub FileSaveAs()
    MsgBox "You clicked File, Save As"
End Sub

Public Sub FileClose()
    MsgBox "You clicked File, Close"
End Sub

Public Sub FileExit()
    MsgBox "You clicked File, Exit"
    frmForm.Hide
End Sub

Public Sub ToolsOptions()
    MsgBox "You clicked Tools, Options"
End Sub

Public Sub ExtraAbout()
    MsgBox "You clicked Help, About"
End Sub


INQUEST-PP=macro
