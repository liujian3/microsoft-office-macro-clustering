Attribute VB_Name = "ProjectCommon"
Option Explicit

Global gItemColorIndex() As Integer '|fffd|e|fffd||fffd||fffd||682||fffd|ColorIndex|fffd||fffd||6ce||fffd||fffd|iExcel2003|fffd||30e||fffd||fffd|g|fffd|p|fffd|j

Public Sub redrawLegend(cht As Chart)
'
'   |fffd|}|fffd||fffd||30d||115|`|fffd||fffd|
'   |fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd||255|\|fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||251||389||fffd|
'
    Dim leg As Legend
    Dim dummy As Variant
    Dim lastEdge, startEdge As Integer

    '|fffd|}|fffd||10aa||fffd||202||fffd||fffd|A1|fffd||fffd||fffd||682||fffd||fffd||fffd||fffd||202||fffd||fffd||202||727d||fffd||fffd||fffd||fffd||fffd||202||fffd|
    If cht.HasLegend = False Then Exit Sub
    
    Set leg = cht.Legend
    
    If leg.LegendEntries.Count = 1 Then Exit Sub
    
    '|fffd||292|u|fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||316|}|fffd||10aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||115|`|fffd||fffd|
    If Application.Version < 12 And cht.ChartType = xlColumnStacked Then
        lastEdge = 1
        startEdge = leg.LegendEntries.Count
    Else
        lastEdge = leg.LegendEntries.Count
        startEdge = 1
    End If
    On Error Resume Next
    dummy = leg.LegendEntries(lastEdge).Top
    If Not IsEmpty(dummy) Then
        If leg.LegendEntries(startEdge).Top < leg.LegendEntries(lastEdge).Top Then Exit Sub
    End If
    leg.Height = leg.Height * 1
    
    Do
        On Error Resume Next
        dummy = leg.LegendEntries(lastEdge).Top
        If Not IsEmpty(dummy) Then
            If leg.Top + leg.Height < leg.LegendEntries(lastEdge).Top + leg.LegendEntries(lastEdge).Height Then
                leg.Font.Size = leg.Font.Size - 1
                leg.Height = leg.Height * 1
            Else
                Exit Do
            End If
        Else
            leg.Font.Size = leg.Font.Size - 1
            leg.Height = leg.Height * 1
        End If
    Loop

End Sub

Public Function getExcelRGB(ByVal color As String) As Long
'
'   |fffd||fffd||fffd||fffd||fffd||fffd|"n,n,n"|fffd||14e||c2bce||fffd||fffd||fffd||fffd|RGB|fffd||10512|l|fffd||255||3ca||fffd||fffd||fffd||fffd||115||502||fffd|
'   |fffd||fffd|F"112, 48, 160" -> 10498160
'
    Dim oneRgb As Variant
    Dim i As Integer

    oneRgb = Split(color, ",")
    If UBound(oneRgb) <> 2 Then
        getExcelRGB = -1
    Else
        getExcelRGB = RGB(oneRgb(0), oneRgb(1), oneRgb(2))
    End If
    
End Function

' |fffd||209||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N|fffd||590||fffd||fffd|i|fffd||142||fffd||fffd||fffd||382||702||182||7c2||fffd||fffd||fffd||fffd||fffd||fffd|j
Public Function existSheets(target As String)
    ' |fffd||fffd||fffd|O|fffd||fffd|target|fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    
On Error GoTo no_sheet
    If IsObject(Worksheets(target)) Then
        existSheets = True
        Exit Function
    End If
    
no_sheet:
    existSheets = False
    Err.Clear
    
End Function

Public Function existShapes(target As String, sheet As Worksheet)
    ' sheet|fffd||fffd||fffd||256||fffd||fffd|O|fffd||fffd|target|fffd||310|}|fffd|`|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90a9||fffd|`|fffd|F|fffd|b|fffd|N
On Error GoTo no_shape
    If IsObject(sheet.Shapes(target)) Then
        existShapes = True
        Exit Function
    End If
    
no_shape:
    existShapes = False
    Err.Clear
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Translation"
Private trans As Object   '|fffd|||fffd||fffd|pDictionary
Private Const transStname = "TRANSLATION"

Sub readTrans(fname)
    ' |fffd|||fffd||fffd|p|fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||fffd||fffd||c42c||fffd||fffd||fffd||90bd||fffd||7c2||311|O|fffd||fffd||fffd||fffd|
    Dim TRSSheet As Worksheet
    If Not existSheets(transStname) Then
        ' |fffd|||fffd||fffd|p|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||202||fffd||fffd||fffd||fffd|fname|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||10d||fffd||fffd|
        'Debug.Print "notranssheet!!"
        Set TRSSheet = Worksheets.Add
        TRSSheet.Name = transStname
        Dim splitted
        Dim txt As Object
        Set txt = CreateObject("ADODB.stream")
        Dim i As Integer
        With txt
            .Type = 2
            .Charset = "UTF-8"
            .Open
            .LoadFromFile (ThisWorkbook.Path & "\" & fname)
        
            Do While Not .EOS
                ' |fffd|^|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd|split|fffd||fffd||fffd||fffd|
                splitted = Split(.readtext(-2), Chr(9))
                ' split|fffd||142||fffd||fffd||102||fffd||fffd||fffd||393|o|fffd|^
                If UBound(splitted) = 1 Then
                    With TRSSheet
                        .Cells(i + 1, 1) = splitted(0)
                        .Cells(i + 1, 2) = splitted(1)
                        i = i + 1
                    End With
                End If
            Loop
            .Close
        End With
        Set txt = Nothing
        'GoTo setTrans
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74d||fffd||fffd||782||fffd||fffd||7c2||314|z|fffd||fffd|
        'Dim splitted
        'Dim txt As Object
    Else
        Set TRSSheet = Worksheets(transStname)
    End If
    
setTrans:
    Set trans = CreateObject("Scripting.Dictionary")  '|fffd|||fffd||fffd|pDict|fffd||fffd||fffd||c42c|
    'Set txt = CreateObject("ADODB.Stream")
    'With txt
    '    .Type = 2
    '    .Charset = "UTF-8"
    '    .Open
    '    .LoadFromFile (ThisWorkbook.Path & "\" & fname)

    '    '|fffd||14f|I|fffd|s|fffd||702||143||fffd||fffd|[|fffd|v|fffd||fffd||fffd||fffd|
    '    Do While Not .EOS
    '        '|fffd||fffd||fffd||30d|s|fffd||fffd||1c2||74e||fffd||fffd|
    '        splitted = Split(.readtext(-2), Chr(9))
    '        If UBound(splitted) = 1 Then
    '            trans(splitted(0)) = splitted(1)
    '        End If
    '    Loop

        '|fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||fffd||82||fffd||fffd||fffd|
    '    .Close
    'End With
        
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd|
    'Set txt = Nothing
    
    'TRSSheet.Visible = True
    Dim c As Variant
    Set c = range(TRSSheet.Cells(1, 1), TRSSheet.Cells.SpecialCells(xlLastCell))
    'Dim i As Integer
    'Debug.Print "ROWS", c

    For i = 0 To TRSSheet.Cells.SpecialCells(xlLastCell).Row
        trans(CStr(c(i + 1, 1))) = CStr(c(i + 1, 2))
    Next i
    'Debug.Print "AAA", c(1, 1), trans(c(1, 1))
    
    ' |fffd|||fffd||fffd|V|fffd|[|fffd|g|fffd||34c||fffd||fffd||fffd||fffd||202||fffd||fffd||60a4||fffd||242||fffd||fffd||fffd|
    TRSSheet.Visible = False

End Sub

Function getTrans(k As String)
    'Debug.Print k, trans(k)
    If trans(k) = "" Then
        getTrans = k
    ElseIf trans(k) = " " Then
        getTrans = ""
    Else
        getTrans = trans(k)
    End If
End Function

Function setFinished()
    Dim kakushi As Worksheet, oldsheet As Variant

    Set oldsheet = ActiveSheet              ''|fffd||fffd||fffd||742||303|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|L|fffd||fffd||fffd||fffd||fffd||702||fffd|
    Application.ScreenUpdating = False      ''|fffd||fffd||282||30d|X|fffd|V|fffd||fffd|}|fffd|~|fffd||fffd||fffd||702||fffd|
    Set kakushi = Worksheets.Add                 ''|fffd|V|fffd|[|fffd|g|fffd||fffd|}|fffd||fffd||fffd||fffd||fffd|A|fffd||20c||fffd||3d0||fffd|ws|fffd||182||fffd||fffd||111||fffd||fffd||c0b5||fffd||702||fffd|
    kakushi.Visible = False                      ''|fffd|}|fffd||fffd||fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd|\|fffd||fffd||fffd||242||fffd||fffd||702||fffd|
    kakushi.Name = "FINISHED"
    oldsheet.Select                         ''|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||256||7c2||fffd||fffd||702||fffd|
    Application.ScreenUpdating = True       ''|fffd||fffd||282||30d|X|fffd|V|fffd||fffd||fffd||10a|J|fffd||fffd||fffd||702||fffd|
    setFinished = True
End Function

Function isFinished()
    For i = 1 To Sheets.Count Step 1
        If Sheets(i).Name = "FINISHED" Then
            isFinished = True
            Exit Function
        End If
    Next
    isFinished = False
End Function
Attribute VB_Name = "clsMakeMatixCmb"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'|fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd|`|fffd||302||fffd||fffd||fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||fffd||fffd|v|fffd||fffd||fffd|p|fffd|e|fffd|B|fffd||24e||fffd||fffd||83|N|fffd||fffd||fffd|X
'|fffd||fffd||fffd|I|fffd||252||1c9||fffd||fffd||fffd||fffd||fffd||fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||fffd||fffd|A|fffd||fffd||fffd||303|N|fffd||fffd||fffd|X|fffd||303|v|fffd||fffd||fffd|p|fffd|e|fffd|B|fffd||250||752||80b7||fffd||90b1||fffd||182||143|C|fffd|x|fffd||fffd||fffd|g|fffd||18a||598|A|fffd|t|fffd||fffd||fffd||fffd|B

Private WithEvents CmbBx As MSForms.ComboBox
Attribute CmbBx.VB_VarHelpID = -1

Public Property Get cb() As MSForms.ComboBox
    Set cb = CmbBx
End Property

Public Property Let cb(ByRef newCmbBx As MSForms.ComboBox)
    Set CmbBx = newCmbBx
End Property

Private Sub CmbBx_Change()
    mduMakeMatrix.setTopLayer (CmbBx.Value)
End Sub
Attribute VB_Name = "mduCompara"
Private Const BaseColorIndex = 56

Sub makeComparaBarChart(lineNum() As Long)
    Dim key1dup, key2dup, key3dup, key3misc     'bc_params.txt|fffd||fffd||fffd||64fe|
    Dim dup_list As Variant

    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    
    ' |fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||927a||fffd||fffd|
    'src_wb = ActiveWorkbook.Name
    'src_sh = ActiveSheet.Name
    'src_name = Left(src_wb, InStrRev(src_wb, ".") - 1)
    src_r_end = dataWT.Cells(dataWT.Rows.Count, 1).End(xlUp).Row '|fffd|c|fffd||312||fffd||fffd||fffd| |fffd|f|fffd|[|fffd|^|fffd||342|Q|fffd|s|fffd||682||fffd||fffd||fffd|
    src_c_end_orig = dataWT.Cells(3, dataWT.Columns.Count).End(xlToLeft).Column '|fffd||fffd||fffd||312||fffd||fffd||fffd||fffd|@-1|fffd||fffd||fffd||fffd|2|fffd||14a||fffd||fffd||fffd||393||fffd||fffd||fffd||310||fffd|

    ' |fffd||fffd||fffd|v|fffd||fffd||1c9||fffd|
    Columns((src_c_end_orig - 2) / 2 + 3).Select '|fffd||fffd||fffd||fffd||fffd||30d||fffd||fffd|v|fffd||fffd|
    Selection.Insert Shift:=xlToRight
    src_c_end = src_c_end_orig + 2 '|fffd|E|fffd||fffd||fffd||30d||fffd||fffd|v|fffd||fffd|i|fffd||fffd||fffd|v|fffd|Q|fffd||fffd||1c9||fffd||fffd||302||fffd||fffd||7c1|j

    Dim series_num As Long
    series_num = (src_c_end - 2) / 2

    ' |fffd|J|fffd|n|fffd|s|fffd||fffd||fffd||fffd|
    If getParams("nkeys") = 2 Then
        st_row = 2
    Else
        st_row = 1
    End If
    
    ' |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|
    If series_num <= 2 Then
        If getParams("nkeys") = 3 Then
            title_row = st_row + 1
        Else
            title_row = st_row
        End If
    Else
        title_row = st_row + 1
    End If
    
    Cells(title_row, series_num + 2) = getTrans("|fffd||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd|v")
    Cells(title_row, src_c_end) = getTrans("|fffd|E|fffd||fffd||fffd|F|fffd||fffd||fffd|v")

    For r = title_row + 1 To src_r_end
        Cells(r, series_num + 2) = WorksheetFunction.Sum(range(Cells(r, 3), Cells(r, series_num + 1)))
        Cells(r, src_c_end) = WorksheetFunction.Sum(range(Cells(r, series_num + 3), Cells(r, src_c_end - 1)))
    Next r

    'X|fffd||fffd||fffd||348||fffd|
    xrange = getParams("ext.xrange")
    Dim rngvals, rngval, xmode As String
    Dim xmin, xmax As Long
    xmode = "auto"
    For Each rngvals In Split(xrange, ",")
        rngval = Split(rngvals, ":")
        Select Case rngval(0)
            Case "mode": xmode = rngval(1)
            Case "max":
                xmax = rngval(1)
                If xmax >= 10 And xmax Mod 5 <> 0 Then     '|fffd||690||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||7d4||fffd||fffd||fffd||fffd||fffd|
                    xmax = ((xmax \ 5) + 1) * 5
                End If
                'xmin = xmax * (-1)
        End Select
    Next
    
    key1dup = getParams("chartkey1_dup")
    key2dup = getParams("chartkey2_dup")
    key3dup = getParams("chartkey3_dup")
    key3misc = getParams("chartkey3_misc")
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|i|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
    '|fffd||fffd||fffd||fffd||fffd|\|fffd|L|fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||95||fffd|,|fffd|X|fffd|R|fffd|A|fffd|W|fffd|v|fffd||30f||a347||fffd||34f||fffd||fffd||fffd||fffd|_1|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|
    If InStr(getParams("chartbase"), "score") > 0 Or InStr(key1dup, "divided") > 0 Or InStr(key2dup, "divided") > 0 Or InStr(key3dup, "divided") > 0 Then
        dataWT.range(dataWT.Cells(title_row + 1, 3), dataWT.Cells(src_r_end, src_c_end)).NumberFormat = "#,##0.##;;"
    Else
        dataWT.range(dataWT.Cells(title_row + 1, 3), dataWT.Cells(src_r_end, src_c_end)).NumberFormat = "#,###;;"
    End If
    '|fffd||fffd||fffd|v|fffd|l|fffd||30f||fffd||fffd||fffd||fffd|@|fffd||fffd||fffd||fffd||fffd|\|fffd|L|fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||95||fffd||fffd||30f||a347||fffd||fffd|100|fffd||fffd||fffd||fffd||fffd||30f||a347||fffd||34f||fffd||fffd||fffd||fffd|_|fffd|\|fffd|L
    dup_list = Array("divided", "divided_add", "divided_all")
    If InStr(getParams("chartbase"), "score") > 0 Or InStr(key1dup, "divided") > 0 Or InStr(key2dup, "divided") > 0 Or (UBound(Filter(dup_list, key3dup)) >= 0 And key3misc <> "misc") Then
        For i = title_row + 1 To src_r_end
            With dataWT.Cells(i, series_num + 2)
                .NumberFormat = IIf(Round(.Value, 0) >= 100 Or .Value = 0, "#,##0", "#,##0.##")
            End With
            With dataWT.Cells(i, src_c_end)
                .NumberFormat = IIf(Round(.Value, 0) >= 100 Or .Value = 0, "#,##0", "#,##0.##")
            End With
        Next
    Else
        dataWT.range(dataWT.Cells(title_row + 1, series_num + 2), dataWT.Cells(src_r_end, series_num + 2)).NumberFormat = "#,##0"
        dataWT.range(dataWT.Cells(title_row + 1, src_c_end), dataWT.Cells(src_r_end, src_c_end)).NumberFormat = "#,##0"
    End If

    dataWT.range("A1").Select   'Chart.Add|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
'*****
    ' |fffd|J|fffd|n|fffd||fffd||fffd||fffd|
    ' start_time = Now
    
    ' |fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||249||fffd||295|\|fffd||fffd||fffd||fffd||fffd|X|fffd|V|fffd||fffd||fffd||202||fffd|
    Application.ScreenUpdating = False
    
    ' |fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||253||fffd||fffd||fffd||30c|x|fffd||fffd||fffd||20c1||fffd|b|fffd|Z|fffd|[|fffd|W|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
    Application.DisplayAlerts = False

    Dim chart1 As Chart
    Set chart1 = Charts.Add
    
    Set target = dataWT.range(dataWT.Cells(title_row, 2), dataWT.Cells(src_r_end, src_c_end))
    
    With chart1
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
        .ChartType = xlBarStacked
        .SetSourceData Source:=target, PlotBy:=xlColumns
        .HasLegend = True
        .PlotArea.Interior.color = RGB(255, 255, 255)
    End With
    
    ' |fffd|_|fffd||30d||151||fffd|l|fffd||fffd||fffd||64fe|
    'Dim series_num As Long
    'series_num = (src_c_end - 2) / 2
    max_p = 0

    For r = title_row + 1 To src_r_end
        a = 0
        'For c = 3 To 1 + series_num
        '    a = a + dataWt.Cells(r, c)
        'Next
        a = dataWT.Cells(r, series_num + 2)
        If a > max_p Then
            max_p = a
        End If
        
        a = 0
        'For c = 3 + series_num To src_c_end - 1
        '    a = a + dataWt.Cells(r, c)
        'Next
        a = dataWT.Cells(r, src_c_end)
        If a > max_p Then
            max_p = a
        End If
    Next
    
    ' |fffd||690||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||7c2||24d||151||fffd|l|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||24a||6c2||7c2||fffd| |fffd||690||fffd||fffd||fffd||fffd|5|fffd||82||fffd|z|fffd||fffd|
    'keta = -WorksheetFunction.RoundUp(Log(max_p) / Log(10), 0)
    'max_value = WorksheetFunction.RoundUp(Val(max_p), keta + 1)
    'If keta = -1 Then
    '    max_value = max_value + 1
    'End If

    'max_value = WorksheetFunction.RoundUp(getMaxval(max_p), 0)
    ' |fffd||151||fffd|l|fffd||182||30c||fffd||fffd||502||fffd||fffd||697||fffd||fffd||82||60a4||fffd||202||73ed||fffd||fffd||fffd||fffd||fffd||fffd|
    'If max_value - max_p > max_value / 5 Then
    '    max_value = max_value * 3 / 4
    'End If
    
    If xmode = "auto" Then
        ' |fffd||690||fffd||fffd||30d||151||fffd|l|fffd||fffd||fffd||fffd||fffd||7c2||fffd|
        max_value = getMaxval(max_p)
        min_value = -1 * max_value
    Else
        max_value = xmax
        min_value = -1 * max_value
    End If
    
    ' |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||254||fffd|r|fffd||38f||6c2||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd||fffd||fffd||fffd|@|fffd||202||fffd||fffd||fffd||fffd||b0a4||fffd||fffd||fffd|j
    'If getParams("nkeys") = 2 Then
    '    st_row = 2
    'Else
    '    st_row = 1
    'End If
    ct1 = dataWT.Cells(st_row, 3)
    If getParams("nkeys") = 3 And series_num = 2 Then
        titlepos = series_num + 1
    Else
        titlepos = series_num
    End If
    ct2 = dataWT.Cells(st_row, 3 + titlepos)
    ' |fffd||fffd||fffd||fffd||fffd||60a4||fffd||202||73ed||fffd||fffd||fffd||217||fffd||fffd||fffd||fffd||fffd| #TODO |fffd||217||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||60a2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd|...
    If Len(ct1) > 15 Then
        ct1 = Left(ct1, 15) + "..."
    End If
    If Len(ct2) > 15 Then
        ct2 = Left(ct2, 15) + "..."
    End If
    
    addtitle = vbNewLine + getTrans("|fffd||fffd||fffd||fffd||fffd|F") + ct1 + getTrans("|fffd|@|fffd|E|fffd||fffd||fffd|F") + ct2
    ActiveChart.Location Where:=xlLocationAsNewSheet
    With ActiveChart
        .HasTitle = True
        If getParams("nkeys") = 2 Then
            .HasLegend = False
        End If
        .ChartTitle.Characters.Text = getParams("title") + addtitle
        .ChartTitle.Characters(Start:=Len(getParams("title")) + 1, Length:=Len(addtitle)).Font.Bold = False
        .ChartTitle.Characters(Start:=Len(getParams("title")) + 1, Length:=Len(addtitle)).Font.Size = 14
    End With
    ActiveChart.PlotArea.Select
    With Selection.Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    Selection.Interior.ColorIndex = xlNone
    Sheets(getTrans("|fffd|O|fffd||fffd||fffd|t")).Select
    ActiveChart.Axes(xlCategory).Select
    With ActiveChart.Axes(xlCategory)
        .TickLabelSpacing = 1
        .ReversePlotOrder = True
    End With
    ' |fffd||fffd||fffd||fffd||fffd||14d||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||4ec82||250||752||80b5||fffd||102||fffd||fffd||fffd||60a4||fffd||142||fffd|
    For i = 1 To series_num
        ActiveChart.SeriesCollection(i).Select
        ActiveChart.SeriesCollection(i).AxisGroup = 2
    Next

    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SeriesCollection(1).ChartType = xlBarStacked
    '|fffd|\|fffd|[|fffd|X|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||fffd|xlBarStacked|fffd||fffd|xlColumnStacked|fffd||242||fffd||fffd||fffd||18f|c|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd||242||202||fffd||702||fffd|

    ActiveChart.SeriesCollection(series_num + 1).Select
    ActiveChart.ChartGroups(1).SeriesCollection(1).PlotOrder = 1
    With ActiveChart.ChartGroups(1)
        .Overlap = 100
        .GapWidth = 50
        ' |fffd||fffd||fffd||fffd||fffd||14b||656a||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||357|l
        'If Application.Version < 12 Then
        '    .HasSeriesLines = True
        'End If
    End With
    ActiveChart.SeriesCollection(series_num * 2).Select
    With Selection.Border
        .LineStyle = xlNone
    End With
    Selection.Interior.ColorIndex = xlNone
    ActiveChart.SeriesCollection(series_num * 2).ApplyDataLabels AutoText:=True, showValue:=True
    ActiveChart.SeriesCollection(series_num * 2).DataLabels.Select
    With Selection
        .Position = xlLabelPositionInsideBase
        .Orientation = xlHorizontal
        .Font.Size = 8
    End With

    ActiveChart.SeriesCollection(1).Select
    ActiveChart.ChartGroups(2).SeriesCollection(1).PlotOrder = 1
    With ActiveChart.ChartGroups(2)
        .Overlap = 100
        .GapWidth = 50
        ' |fffd||fffd||fffd||fffd||fffd||14b||656a||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||302||148||fffd|U|fffd|O|fffd||fffd| #REMARK |fffd||fffd||fffd||fffd||fffd|onoff|fffd|o|fffd||fffd||fffd||fffd||fffd||642||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
        'If Application.Version < 12 Then
        '    .HasSeriesLines = True
        'End If
    End With
    ActiveChart.SeriesCollection(series_num).Select
    With Selection.Border
        .LineStyle = xlNone
    End With
    Selection.Interior.ColorIndex = xlNone
    ActiveChart.SeriesCollection(series_num).ApplyDataLabels AutoText:=True, showValue:=True
    ActiveChart.SeriesCollection(series_num).DataLabels.Select
    With Selection
        .Position = xlLabelPositionInsideBase
        .Orientation = xlHorizontal
        .Font.Size = 8
    End With
    
    ' |fffd||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd|v|fffd|u0|fffd|v|fffd||fffd||fffd||30f||fffd||fffd||fffd|
    If Application.Version >= 12 Then
        For r = title_row + 1 To src_r_end
            If dataWT.Cells(r, series_num + 2) = 0 Then
                ActiveChart.SeriesCollection(series_num).Points(r - title_row).DataLabel.Select
                With Selection
                    .Position = xlLabelPositionInsideEnd
                    .Orientation = xlHorizontal
                    .Font.Size = 8
                End With
            End If
        Next r
    End If
' |fffd|F|fffd||fffd|t|fffd||fffd||fffd||102||fffd||fffd||fffd||60a4||fffd||142||fffd||fffd||fffd|
    'For i = 1 To series_num - 1
    '    ActiveChart.SeriesCollection(i).Select
    '    With Selection.Interior
    '        .ColorIndex = baseColorIndex - i + 1
    '        .Pattern = xlSolid
    '    End With
    '    ActiveChart.SeriesCollection(i + series_num).Select
    '    With Selection.Interior
    '        .ColorIndex = baseColorIndex - i + 1
    '        .Pattern = xlSolid
    '    End With
    'Next
    
    ActiveChart.Axes(xlValue).Select
    Selection.TickLabels.NumberFormatLocal = "#,##0;#,##0"
    With ActiveChart.Axes(xlValue)
        .MinimumScale = min_value
        .MaximumScale = max_value
        If max_value >= 10 Then
            .MinorUnit = max_value / 5
            .MajorUnit = max_value / 5
        Else '|fffd||151||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||182||242||202||80aa||fffd||fffd||fffd||202||302||fffd|9|fffd||209||fffd||fffd||356||690||fffd||fffd||fffd||fffd|1
            .MinorUnit = 1
            .MajorUnit = 1
        End If
        .Crosses = xlCustom
        .CrossesAt = min_value
        .ReversePlotOrder = False
        .ScaleType = xlLinear
    End With
    
    ActiveChart.Axes(xlValue, xlSecondary).Select
    Selection.TickLabels.NumberFormatLocal = "#,##0;#,##0"
    With ActiveChart.Axes(xlValue, xlSecondary)
        .MinimumScale = min_value
        .MaximumScale = max_value
        If max_value >= 10 Then
            .MinorUnit = max_value / 5
            .MajorUnit = max_value / 5
        Else '|fffd||151||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||182||242||202||80aa||fffd||fffd||fffd||202||302||fffd|9|fffd||209||fffd||fffd||356||690||fffd||fffd||fffd||fffd|1
            .MinorUnit = 1
            .MajorUnit = 1
        End If
        .Crosses = xlAutomatic
        .ReversePlotOrder = True
        .ScaleType = xlLinear
    End With
    If Application.Version >= 12 Then
        Selection.TickLabelPosition = xlNone    '|fffd||202||fffd||fffd||fffd||fffd||fffd|2|fffd||fffd||fffd||fffd|Excel|fffd||fffd|Open|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
        ActiveChart.HasAxis(xlCategory, xlSecondary) = True
        ActiveChart.Axes(xlCategory).TickLabels.Offset = 500
        ActiveChart.Axes(xlCategory, xlSecondary).Select
        ActiveChart.Axes(xlCategory, xlSecondary).ReversePlotOrder = True
        Selection.Delete
    End If
    ' |fffd|}|fffd||fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(Excel2003|fffd||142||351|S|fffd||102||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||18f||fffd||fffd||fffd||fffd||202||fffd||fffd|j
    If getParams("nkeys") = 3 And Application.Version >= 12 Then
        'l = series_num '|fffd|}|fffd||fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For i = 1 To series_num + 1
            ActiveChart.Legend.Select
            ActiveChart.Legend.LegendEntries(series_num).Select
            Selection.Delete
        Next
    End If
    ActiveChart.Axes(xlValue).Select
    With Selection
        .TickLabelPosition = xlHigh     '|fffd||fffd|1|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||255|\|fffd||fffd|
    End With
    'ActiveChart.Axes(xlValue).MajorGridlines.Select
    'With Selection.Border
        '.LineStyle = xlDot
    'End With
    ActiveChart.PlotArea.Select
    With Selection.Border
        .ColorIndex = 57
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    
    '====================================
    '  |fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd||fffd||1c9||fffd|
    '====================================
    'button_left = ActiveChart.ChartArea.Width - 120
    'If Application.Version >= 12 Then ' Excel2007|fffd||20d|~
    '  button_left = button_left - 20
    'End If
    
    ' |fffd||fffd||fffd||d6cc2||fffd||fffd||30f||a347|(|fffd||fffd| or |fffd||fffd||fffd||cd016||682||fffd|1|fffd||82||30f||a347|)|fffd||752|u|fffd||fffd||fffd||202||fffd|(|fffd|m|fffd||fffd|c)
    If getParams("nkeys") > 2 And series_num > 2 Then
        ActiveSheet.Buttons.Add(10, 20, 100, 20).Select ' |fffd||fffd||fffd|v|fffd|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||fffd||fffd|X|fffd||316||fffd||fffd|(Excel|fffd||fffd|ver.|fffd||2d1||fffd|)|fffd||302||fffd||fffd||7c1|A|fffd||fffd||fffd||fffd||fffd||24c||152||fffd|
        Selection.OnAction = "datalabel_on_off"
        Selection.Characters.Text = getTrans("|fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
        Selection.AutoScaleFont = False
        Selection.Locked = True
        Selection.Name = getTrans("|fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
        With Selection.Font
            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
            .FontStyle = "|fffd|W|fffd||fffd|"
            .Size = 9
        End With
    End If
    
    ' |fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||315||3cd|X|fffd|{|fffd|^|fffd||fffd||fffd||1c9||fffd|
    'dataWS.Activate
    'Cells(1, 1).Select
    'Selection.EntireRow.Insert
    'Selection.EntireRow.Insert
    'With ActiveSheet.Buttons.Add(5, 5, 150, 15)
    '    .Name = "|fffd||151||fffd|l|fffd||3cd|X"
    '    .OnAction = "max_change"
    '    .Characters.Text = "|fffd|O|fffd||fffd||fffd|t(|fffd||fffd||fffd||fffd|)|fffd||30d||151||fffd|l|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd|"
    '    .Font.Size = 9
    'End With
    
    'Cells(1, 4) = "|fffd||151||fffd|l"
    'Cells(2, 4) = "|fffd||690||fffd||fffd||50a|u"
    'Cells(1, 5) = max_value
    'Cells(2, 5) = glid_value
    'Cells(1, 5).Select
    
    'out_name = "|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|}|fffd|b|fffd|v(" & src_name & ")"
    'If Application.Version < 12 Then
    '    Workbooks(src_wb).SaveAs Filename:=out_name, FileFormat:=43
    'Else
    '    Workbooks(src_wb).SaveAs Filename:=out_name, FileFormat:=51
    'End If
    
    ' ScreenUpdating|fffd||752||fffd||fffd||7c2||fffd|
    Application.ScreenUpdating = True
    
    ' DisplayAlerts|fffd||752||fffd||fffd||7c2||fffd|
    Application.DisplayAlerts = True
    
    ' |fffd||fffd||fffd||fffd||fffd||30f|I|fffd||fffd||fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd||18c|o|fffd||7ce||fffd||fffd||502||315|\|fffd||fffd|
    'Call |fffd|o|fffd||7ce||fffd||fffd||502||315|\|fffd||fffd|(start_time, Now)
    
    ' excel2007|fffd||20d|~|fffd||fffd||fffd||181|A|fffd||fffd||fffd|E|fffd||316|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||102||fffd||fffd||702||fffd||fffd||302||152||fffd||fffd|S|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Application.Version >= 12 Then
        Call drawCenterLine(chart1)
    End If
    Call setChartColorBySeriesCollectionCompara(chart1, series_num)
    
    '|fffd|}|fffd||fffd||30d||115|`|fffd||fffd|
    Call ProjectCommon.redrawLegend(chart1)
    ' |fffd|}|fffd||fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|iExcel2003|fffd|j
    If getParams("nkeys") = 3 And Application.Version < 12 Then
        'l = series_num '|fffd|}|fffd||fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For i = 1 To series_num + 1
            ActiveChart.Legend.Select
            ActiveChart.Legend.LegendEntries(series_num).Select
            Selection.Delete
        Next
        '|fffd||fffd||fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||fffd||fffd|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd||256||7c2||fffd||fffd||10d||115|`|fffd||fffd|
        ActiveChart.Legend.Font.Size = 11
        Call ProjectCommon.redrawLegend(chart1)
    End If

End Sub

Private Sub setChartColorBySeriesCollectionCompara(cht As Chart, lineNum As Long)
    Dim nkeys
    Dim strColors As Variant
    Dim i As Integer
    
    nkeys = getParams("nkeys")
    strColors = Split(getParams("colors"), ";")
    
    ' nkey2|fffd||302||182||fffd||fffd||34d||fffd||fffd|E|fffd||310|F|fffd||fffd||fffd||fffd||fffd||389||fffd|
    If nkeys = 2 Then
        For i = 0 To 1
            cht.SeriesCollection(i * 2 + 1).Select ' |fffd||fffd||fffd|v|fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7cf|C|fffd||fffd|(2014/06/06)
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlAutomatic
            End With
            Selection.Shadow = False
            Selection.InvertIfNegative = False
            With Selection.Interior
                If Application.Version >= 12 Then
                    .color = ProjectCommon.getExcelRGB(strColors(i))
                Else
                    If gItemColorIndex(i) > 0 Then   '|fffd|\|fffd||fffd||fffd|F|fffd||fffd|56|fffd|F|fffd||12d02||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
                        If i > 56 Then .ColorIndex = 0  '|fffd||202||fffd||fffd||fffd|56|fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||12d02||fffd||fffd||fffd||183|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||fffd||fffd||3c2||fffd||fffd||202||fffd||fffd|B2|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||195||3c2||fffd||fffd|i|fffd||742||fffd||fffd||fffd||fffd|j
                        .ColorIndex = gItemColorIndex(i)
                    End If
                End If
                .Pattern = xlSolid
            End With
        Next i
    Else
        '|fffd||fffd|
        For i = 0 To lineNum - 2
            cht.SeriesCollection(i + 1).Select
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlAutomatic
            End With
            Selection.Shadow = False
            Selection.InvertIfNegative = False
            With Selection.Interior
                If Application.Version >= 12 Then
                    .color = ProjectCommon.getExcelRGB(strColors(i))
                Else
                    If gItemColorIndex(i) > 0 Then   '|fffd|\|fffd||fffd||fffd|F|fffd||fffd|56|fffd|F|fffd||12d02||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
                        If i > 56 Then .ColorIndex = 0  '|fffd||202||fffd||fffd||fffd|56|fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||12d02||fffd||fffd||fffd||190|F|fffd||fffd||fffd||3c2||fffd||fffd||202||fffd||fffd|B2|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||195||3c2||fffd||fffd|i|fffd||742||fffd||fffd||fffd||fffd|j
                        .ColorIndex = gItemColorIndex(i)
                    End If
                End If
                .Pattern = xlSolid
            End With
        Next i
        '|fffd|E
        For i = lineNum To lineNum * 2 - 2 ' |fffd||fffd||fffd|v|fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7cf|C|fffd||fffd|(2014/06/06)
            cht.SeriesCollection(i + 1).Select
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlAutomatic
            End With
            Selection.Shadow = False
            Selection.InvertIfNegative = False
            With Selection.Interior
                If Application.Version >= 12 Then
                    .color = ProjectCommon.getExcelRGB(strColors(i - lineNum))
                Else
                    If gItemColorIndex(i - lineNum) > 0 Then '|fffd|\|fffd||fffd||fffd|F|fffd||fffd|56|fffd|F|fffd||12d02||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
                        .ColorIndex = 0 '|fffd||202||fffd||fffd||fffd|56|fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||12d02||fffd||fffd||fffd||190|F|fffd||fffd||fffd||3c2||fffd||fffd||202||fffd||fffd|B2|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||195||3c2||fffd||fffd|i|fffd||742||fffd||fffd||fffd||fffd|j
                        .ColorIndex = gItemColorIndex(i - lineNum)
                    End If
                End If
                .Pattern = xlSolid
            End With
        Next i
    End If
End Sub

Sub drawCenterLine(cht)
'
' |fffd||4ec96||682||30f|c(|fffd||fffd||fffd||fffd|)|fffd||fffd||fffd||17617|p|fffd||fffd||fffd||101|A|fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||312||fffd||fffd|S|fffd||250||fffd||fffd||fffd|`|fffd||fffd|
'
    cht.SetElement (msoElementSecondaryCategoryAxisShow)
    cht.Axes(xlCategory, xlSecondary).Select
    With Selection
        .ReversePlotOrder = True
        .MajorTickMark = xlNone
        .TickLabelPosition = xlNone
        .Format.Line.Weight = 1.5
    End With
    cht.Axes(xlValue, xlSecondary).Select
    With Selection
        .Crosses = xlAutomatic

    End With
End Sub


Function getMaxval(max_p)
'
' |fffd|O|fffd||fffd||fffd|t|fffd||312|l|fffd||30d||151||fffd|l|fffd||fffd||fffd||70a4||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||256||690||fffd||fffd||30d||151||fffd|l|fffd||fffd||752||80b7||fffd||fffd|
'
    max = max_p * 1.01
    If max < 3 Then
        max = 3
    End If
    div = 5 ' |fffd||690||fffd||fffd||8414||fffd||316||688||fffd|
    If max < div Then
        unit = 1
    Else
        u = max / div ' |fffd|T|fffd|Z|fffd||316||690||fffd||fffd||50a|u
        logd = Log(u) / Log(10)
        ilogd = WorksheetFunction.RoundDown(logd, 0) ' |fffd||fffd||fffd||fffd|
        fval = logd - ilogd ' int(10**fval) |fffd||141|A|fffd||14f||fffd||28c||fffd||fffd||312|l|fffd||242||202||fffd|B
        If fval > 0.85 Then
            udigit = ilogd + 1
            uscale = 1
        ElseIf fval > 0.55 Or (ilogd = 0 And fval > 0.5) Then
            udigit = ilogd
            uscale = 5
        ElseIf fval > 0.35 And ilogd > 0 Then
            udigit = ilogd - 1
            uscale = 25
        ElseIf fval > 0.15 Then
            udigit = ilogd
            uscale = 2
        Else
            udigit = ilogd
            uscale = 1
        End If
        unit = uscale
        For iu = 0 To udigit - 1
            unit = 10 * unit
        Next
    End If
    maxstop = max + unit
    getMaxval = 0
    For i = 0 To maxstop Step unit
        getMaxval = i
    Next
        
End Function


Sub datalabel_on_off()
    readTrans ("data\bc_trans.txt")
    '"|fffd|f|fffd|[|fffd|^"|fffd|p|fffd||303|}|fffd|N|fffd||fffd||fffd||202||302||141|A"|fffd|f|fffd|[|fffd|^"|fffd|V|fffd|[|fffd|g|fffd||311||fffd||fffd||742||fffd||fffd||90a9||fffd||fffd||fffd||fffd|
    Dim ws As Worksheet, flag As Boolean
    For Each ws In Worksheets
        If ws.Name = getTrans("|fffd|f|fffd|[|fffd|^") Then flag = True
    Next ws
    If Not flag Then
        MsgBox getTrans("|fffd||fffd||fffd||303|}|fffd|N|fffd||fffd||fffd||357||fffd||fffd|p|fffd||142||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||302||14e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"), vbCritical, getTrans("|fffd|x|fffd||fffd|")
        Exit Sub
    End If

'***
'     |fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd||fffd||611||fffd|
'***
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    src_r_end = dataWT.Cells(dataWT.Rows.Count, 1).End(xlUp).Row '|fffd|c|fffd||312||fffd||fffd||fffd| |fffd|f|fffd|[|fffd|^|fffd||342|Q|fffd|s|fffd||682||fffd||fffd||fffd|
    src_c_end = dataWT.Cells(4, dataWT.Columns.Count).End(xlToLeft).Column '|fffd||fffd||fffd||312||fffd||fffd||fffd||fffd|@-1|fffd||fffd||fffd||fffd|2|fffd||14a||fffd||fffd||fffd||393||fffd||fffd||fffd||310||fffd|
    series_num = (src_c_end - 2) / 2

    ' |fffd|J|fffd|n|fffd|s|fffd||fffd||fffd||fffd|
    If series_num <= 2 Then
        If InStr(dataWT.Cells(3, 5), getTrans("|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||781|F")) Or InStr(dataWT.Cells(3, 7), getTrans("|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||781|F")) Then
            title_row = 4
        Else
            title_row = 3
        End If
    Else
        title_row = 4
    End If
    
    ' |fffd||fffd||fffd||fffd|
    current = ActiveChart.SeriesCollection(1).HasDataLabels
    If current = True Then
        ' |fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||3c2||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For i = 1 To series_num - 1
            ActiveChart.SeriesCollection(i).HasDataLabels = False
        Next
        For i = series_num + 1 To series_num * 2 - 1
            ActiveChart.SeriesCollection(i).HasDataLabels = False
        Next
    Else
        '|fffd|f|fffd|[|fffd|^|fffd|V|fffd|[|fffd|g|fffd||30f||fffd||fffd||fffd||fffd||3cd|X|fffd||242||fffd||fffd||389||fffd|
        ' |fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||202||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|
        For ii = 1 To series_num - 1
            ActiveChart.SeriesCollection(ii).HasDataLabels = True
            ActiveChart.SeriesCollection(ii).DataLabels.Select
            With Selection
                .Font.Size = 8
                '.NumberFormatLocal = "0.##"
            End With
'            For i = title_row + 1 To src_r_end
'                ' |fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A|fffd||fffd||fffd||fffd||fffd||24f||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||90bd||fffd||7cd||d3dc||fffd||fffd||fffd||fffd|
'                chk_text = ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text
'                If Mid(chk_text, Len(chk_text), 1) = "." Then
'                    ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text = Mid(chk_text, 1, Len(chk_text) - 1)
'                End If
'
'                ' |fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||fffd||fffd|Q|fffd|l|fffd||242||fffd||fffd||702||fffd||fffd||fffd|
'                If ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text = "0" Then
'                    ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text = ""
'                End If
'                'If dataWT.Cells(i, ii + 2) = 0 Then
'                '    ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Select
'                '    Selection.Delete
'                'End If
'            Next
        Next
        For ii = series_num + 1 To series_num * 2 - 1
            ActiveChart.SeriesCollection(ii).HasDataLabels = True
            ActiveChart.SeriesCollection(ii).DataLabels.Select

            With Selection
                .Font.Size = 8
                '.NumberFormatLocal = "0.##"
            End With
'            For i = title_row + 1 To src_r_end
'                ' |fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A|fffd||fffd||fffd||fffd||fffd||24f||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||90bd||fffd||7cd||d3dc||fffd||fffd||fffd||fffd|
'                chk_text = ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text
'                If Mid(chk_text, Len(chk_text), 1) = "." Then
'                    ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text = Mid(chk_text, 1, Len(chk_text) - 1)
'                End If
'
'                If ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text = "0" Then
'                    ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Text = ""
'                End If
'                'If dataWT.Cells(i, ii + 2) = 0 Then
'                '    ActiveChart.SeriesCollection(ii).Points(i - title_row).DataLabel.Select
'                '    Selection.Delete
'                'End If
'            Next
        Next
    End If

End Sub


Attribute VB_Name = "mduHeatMatrix"
Sub makeHeatMatrix(lineNum() As Long)
    '|fffd|q|fffd|[|fffd|g|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||fffd||fffd||c42c||fffd||fffd||fffd||702||fffd||fffd|@|fffd||6d1||fffd||fffd||fffd||fffd||fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||fffd||fffd|Q|fffd|l|fffd||242||fffd||fffd||702||fffd|
    '|fffd||fffd||8347||fffd||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||182||1c2||7c2||fffd|
    Dim colorWT As Worksheet
    Set colorWT = Worksheets(getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"))
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    
    ' |fffd|z|fffd|F|fffd|f|fffd|[|fffd|^
    Set cdata = colorWT.range(colorWT.Cells(1, 1), colorWT.Cells(lineNum(0), lineNum(1)))
    
    ' |fffd||fffd||fffd|f|fffd|[|fffd|^ |fffd||fffd||fffd|x|fffd||fffd||fffd||c42c||fffd||fffd||fffd||202||1c2||24e|g|fffd|p
    Set pdata = dataWT.range(dataWT.Cells(1, 1), dataWT.Cells(lineNum(0), lineNum(1)))
    yokonum = lineNum(0) - 3
    tatenum = lineNum(1) - 3
    
    key1codes = Split(getParams("key1codes"), ",")
    key2codes = Split(getParams("key2codes"), ",")
    isdiag = getParams("ext.diag") = "True"
    
    'Range("a1").PasteSpecial Paste:=pdata, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    Set current = ThisWorkbook
    
    Set graphWS = Worksheets.Add()  '|fffd|V|fffd|[|fffd|g|fffd||c42c||fffd|I
    graphWS.Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
    graphWS.Activate
    
    Dim ci(11)
    
    ' |fffd|J|fffd||fffd||fffd|[|fffd|R|fffd|[|fffd|h
    ci(1) = RGB(0, 0, 204)  '#0000cc
    ci(2) = RGB(0, 102, 255) '#0066ff
    ci(3) = RGB(0, 153, 255) '#0099ff
    ci(4) = RGB(0, 204, 153) '#00cc99
    
    If Application.Version >= 12 Then
        ci(5) = RGB(102, 204, 0)
    Else
        ci(5) = RGB(51, 153, 102) '#339966    # Excel2003 |fffd||fffd||fffd||fffd| 66cc00 |fffd||fffd| #99ff33 |fffd||353||fffd||fffd||fffd||fffd|F|fffd||24c||fffd||fffd||fffd||fffd||fffd||302||141|A#339966 |fffd||242||fffd||fffd||702||fffd|
    End If
    ci(6) = RGB(153, 255, 51) '#99ff33
    ci(7) = RGB(255, 255, 0) '#ffff00
    ci(8) = RGB(255, 204, 0) '#ffcc00
    ci(9) = RGB(255, 153, 0) '#ff9900
    ci(10) = RGB(255, 102, 0) '#ff6600
    ci(11) = RGB(255, 0, 0) '#ff0000
    
    ' |fffd||fffd||fffd||fffd||fffd|F|fffd|J|fffd||fffd||fffd|[|fffd|R|fffd|[|fffd|h
    Dim stri(11)

    stri(1) = RGB(255, 255, 255)
    stri(2) = RGB(255, 255, 255)
    stri(3) = RGB(255, 255, 255)
    stri(4) = RGB(255, 255, 255)
    
    stri(5) = RGB(255, 255, 255)
    stri(6) = RGB(0, 0, 0)
    stri(7) = RGB(0, 0, 0)
    stri(8) = RGB(0, 0, 0)
    
    stri(9) = RGB(0, 0, 0)
    stri(10) = RGB(255, 255, 255)
    stri(11) = RGB(255, 255, 255)
    ' |fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||143|R|fffd|s|fffd|y|fffd||fffd||fffd||102||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||142||202||fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||14f||fffd||fffd||252|l|fffd||fffd||fffd||fffd||fffd|R|fffd|s|fffd|y|fffd||fffd||fffd||fffd|

    For i = 2 To lineNum(1)
        For j = 3 To lineNum(0) + 1
            With Cells(j, i)
                If (pdata(i, j) > 0 Or cdata(j - 2, i - 1) = -2) And (pdata(i, j) <> "UL" And pdata(i, j) <> "UR" And pdata(i, j) <> "DL") Then
                    .Value = pdata(i, j)
                End If
                    ' |fffd|z|fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||24d|s|fffd||fffd|
                If cdata(j - 2, i - 1) + 1 > 0 Then
                    .Interior.color = ci(cdata(j - 2, i - 1) + 2)
                    .Font.color = stri(cdata(j - 2, i - 1) + 2)
                ElseIf cdata(j - 2, i - 1) = -1 Then
                    .Interior.color = ci(1)
                    If isdiag And key1codes(i - 2) = key2codes(j - 3) Then
                        With .Borders(xlDiagonalDown)
                            .LineStyle = xlContinuous
                            .ThemeColor = 1
                            .TintAndShade = 0
                            .Weight = xlThin
                        End With
                    End If
                End If

                
            End With
        Next
    Next
    
    ' |fffd||fffd||fffd||243||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd|R|fffd|s|fffd||602||fffd||fffd||fffd|
    For xi = 3 To lineNum(1)
        Cells(2, xi).Value = pdata(xi, 1)
        Columns(xi).ColumnWidth = 8
    Next
    
    
    For yi = 3 To lineNum(0) + 1
        Cells(yi, 1).Value = pdata(1, yi)
        Rows(yi).RowHeight = 50
    Next

    '|fffd||fffd|2|fffd|s|fffd||30c||fffd||fffd||fffd|
    'Range(Cells(2, 1), Cells(linenum(0) - 1, 1)).Orientation = 90
    'Range(Cells(3, 3), Cells(3, linenum(1) - 1)).Orientation = 90
    ' |fffd|}|fffd|X|fffd||10cd5||fffd||fffd|`|fffd||fffd|
    Columns("A:A").ColumnWidth = 25
    'Columns("B:B").ColumnWidth = 25
    'xlabel = "=" & graphWS.Name & "!R2C" & (i * 3 - 1) & ":R" & linenum(1) & "C" & (i * 3 - 1)
    


    With range(Cells(2, 1), Cells(lineNum(0) + 1, lineNum(1)))
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
        With .Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlThin
        End With
        With .Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
        End With
    End With
    
    range(Cells(3, 2), Cells(lineNum(0) + 1, lineNum(1))).Font.Size = 16
    
    ' |fffd||fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd|
    '.Select
    With range("A2:B3") 'Selection
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlMedium
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
        End With
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    
    'Range(Cells(2, linenum(1)), Cells(3, linenum(1))).MergeCells = True
    'Range(Cells(r_end, 1), Cells(r_end, 2)).MergeCells = True
    'Range("A1").Select
    With Columns(1)
        .HorizontalAlignment = xlLeft
        .WrapText = False
        .ShrinkToFit = False
        .ReadingOrder = xlContext
    End With
    
    With Rows(2)
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    '|fffd||fffd||fffd||311||fffd||fffd||fffd||fffd||fffd||fffd||fffd||382||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd|
    'If getParams("hasmisc1") <> "[]" And Cells(3, lineNum(1)).Value = "" Then
    '    range(Cells(2, lineNum(1)), Cells(3, lineNum(1))).MergeCells = True
    'End If
    
    'If getParams("hasmisc2") <> "[]" And Cells(lineNum(0) + 1, 2).Value = "" Then
    '    range(Cells(lineNum(0) + 1, 1), Cells(lineNum(0) + 1, 2)).MergeCells = True
    'End If
    
    With Cells(1, 1)
        .Value = getParams("title")
        .Font.Bold = True
    End With
    
    
    With Cells(2, 2)
        .Value = getParams("key1title")
        .HorizontalAlignment = xlRight
        .Orientation = 90
        .VerticalAlignment = xlBottom
        .Font.Bold = True
    End With

    With Cells(3, 1)
        .Value = getParams("key2title")
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlBottom
        .Font.Bold = True
    End With
    
    ActiveWindow.Zoom = 50 '|fffd|S|fffd||311||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||60a4||fffd||24f|k|fffd||fffd||fffd||fffd||fffd||fffd|

End Sub


Attribute VB_Name = "mduMain"
Private Const BaseColorIndex = 56   'Excel2003|fffd|g|fffd|p|fffd||94|\|fffd|F|fffd||fffd|
Private Const BaseColorIndexExp = 8 '|fffd||3cd|X|fffd||fffd||fffd||202||fffd|ColorIndex|fffd|i1|fffd|`8:|fffd||fffd|,|fffd||fffd|,|fffd||fffd|,|fffd||fffd|,|fffd||fffd|,|fffd|C|fffd|G|fffd||fffd||fffd|[,|fffd|}|fffd|[|fffd||fffd||fffd|_,|fffd|V|fffd|A|fffd||fffd||fffd|j

Dim graphFlag
Dim cntColors As Integer
Dim hasallout, isRate
Dim exeMode As String
Dim chartbase As String


Sub Auto_Open(Optional arg As Variant)
    Dim FileExist, FilePath As String
    
    If isFinished() Then
        If Not IsError(arg) Then    '|fffd|O|fffd||fffd||fffd|t|fffd||115|`|fffd||fffd|
            Call reset
        Else
            Call setDynamicObject   '|fffd||fffd||fffd|I|fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||243|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd||1c9||fffd|
            Exit Sub
        End If
    End If

    If Application.Version >= 12 Then   '|fffd||74a||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||342||fffd||fffd||fffd|
        ActiveWorkbook.CheckCompatibility = False
    End If
    

    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    FilePath = "data\bc_trans.txt"
    FileExist = Dir(ThisWorkbook.Path & "\" & FilePath)
    If FileExist = "" Then
      MsgBox ("No translation file found." & Chr(13) & "Confirm you have unzipped this file." & Chr(13) & _
      "|fffd|||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||7cf||fffd||fffd||fffd||fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & Chr(13) & _
      "|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||101|A|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|W|fffd|J|fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||fffd||fffd||182||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B" + Chr(13) + "|fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Exit Sub
    End If
    
    readTrans ("data\bc_trans.txt")
    

    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    FilePath = "data\bc_source_data.xls"
    FileExist = Dir(ThisWorkbook.Path & "\" & FilePath)
    If FileExist = "" Then
      MsgBox (getTrans("|fffd|f|fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||7cf||fffd||fffd||fffd||fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B") & Chr(13) & _
      getTrans("|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||101|A|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|W|fffd|J|fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||fffd||fffd||182||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B") _
      + Chr(13) + getTrans("|fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"))
      Exit Sub
    End If
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    FilePath = "data\bc_params.txt"
    FileExist = Dir(ThisWorkbook.Path & "\" & FilePath)
    If FileExist = "" Then
      MsgBox (getTrans("|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||7cf||fffd||fffd||fffd||fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B") & Chr(13) _
      & getTrans("|fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"))
      Exit Sub
    End If
    readParams ("data\bc_params.txt")
        
    Dim chartkind
    chartkind = getParams("chartkind")
    chartbase = getParams("chartbase")
    
    Cells(1, 1) = getTrans("|fffd|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||242||82||fffd||fffd||fffd|")
    Cells(2, 2) = getTrans("|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||18b||fffd||fffd||243|}|fffd|N|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd|A|fffd|O|fffd||fffd||fffd|t|fffd||fffd|`|fffd||60b5||fffd||102||fffd||fffd||702||fffd||fffd|B")
    Cells(3, 2) = getTrans("|fffd|}|fffd|N|fffd||fffd||fffd||16ccc||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd||a347||fffd||357|L|fffd||fffd||fffd||242||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B")
    Cells(4, 2) = getTrans("|fffd||702||fffd||fffd|A|fffd||fffd||fffd|k|fffd||fffd||fffd||fffd||fffd||702||716|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||253||fffd||fffd||c0b5||fffd||702||fffd||fffd||fffd|B")
    Cells(5, 2) = getTrans("|fffd||fffd||fffd|O|fffd||241|A|fffd||fffd||fffd|k|fffd||fffd|W|fffd|J|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B")
    
    '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||30e||fffd||fffd|A|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|O|fffd||242||1c2||fffd||fffd||fffd||303||fffd||fffd|[|fffd|h|fffd||155|`|fffd||60b7||fffd||90a9||fffd||fffd||fffd|{|fffd|^|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||151|I|fffd||fffd|
    'If chartkind = "BubbleMatrix" And False Then
    '    If IsError(arg) Then
    '        'about|fffd|y|fffd|[|fffd|W|fffd||30d|X|fffd|V
    '        ActiveSheet.Buttons.Add(30, 119, 100, 33).Select
    '        Selection.OnAction = "'Auto_Open ""standard""'"
    '        If getTrans("|fffd||202||fffd|") = "|fffd||202||fffd|" Then
    '            Selection.Caption = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||c42c|") & vbCrLf & vbCrLf & getTrans("|fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||3cd|X|fffd||94|\")
    '            Selection.Font.Size = 9
    '            Selection.Characters(Start:=8, Length:=2).Font.Size = 1
    '            Selection.Characters(Start:=10, Length:=12).Font.Size = 8
    '        Else
    '            Selection.Caption = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||c42c|") & vbCrLf & getTrans("|fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||3cd|X|fffd||94|\")
    '            Selection.Font.Size = 9
    '        End If
    '
    '        ActiveSheet.Buttons.Add(30, 173, 100, 33).Select
    '        Selection.OnAction = "'Auto_Open ""lite""'"
    '        Selection.Caption = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||c42c|") & vbCrLf & getTrans("|fffd|i |fffd||fffd||fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd| |fffd|j")
    '        Selection.Font.Size = 9
    '
    '        range("B2").Value = getTrans("|fffd||209||fffd||fffd||302||fffd||fffd||fffd||fffd||a0a9||fffd||303|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||243|}|fffd|N|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd|A|fffd|O|fffd||fffd||fffd|t|fffd||fffd|`|fffd||60b5||fffd||702||fffd||fffd|B")
    '        range("B4").Value = getTrans("|fffd||702||fffd||fffd|A|fffd||fffd||fffd|k|fffd||fffd||fffd||fffd||fffd||702||703|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||253||fffd||fffd||c0b5||fffd||702||fffd||fffd||fffd|B")
    '        range("B8").Value = getTrans("|fffd||209||fffd||fffd||302||fffd||fffd||fffd||fffd||a0a9||fffd||303|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    '        range("D10").Value = getTrans("|fffd||fffd||fffd||fffd||312|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||6c1|A|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||fffd|7|fffd|`15|fffd||255||3cd|X|fffd||142||fffd||fffd||702||fffd||fffd|B")
    '        range("D11").Value = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||181|A|fffd|V|fffd|[|fffd|g|fffd||30d||115|\|fffd||fffd||fffd||fffd|g|fffd||fffd|E|fffd|k|fffd||fffd||fffd||fffd||fffd||255|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||202||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B")
    '        range("D14").Value = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|V|fffd|[|fffd|g|fffd||30d||115|\|fffd||fffd||fffd||fffd|g|fffd||fffd|E|fffd|k|fffd||fffd||fffd||fffd||fffd||255|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||202||fffd||a347||fffd||241|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    '        range("D15").Value = getTrans("|fffd||fffd||fffd||fffd||312|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||6c1|A|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||355||3cd|X|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B")
    '
    '        range("B8").Font.color = vbRed
    '        range("A1").Select
    '        Exit Sub
    '    Else
    '        exeMode = arg
    '    End If
    'End If
    
    Dim msgCell As range
    Set msgCell = range("B8")
    If chartkind = "BubbleMatrix" Then
        msgCell.Value = getTrans("|fffd||fffd||fffd||741|A|fffd|u|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd|v|fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B|fffd|f|fffd|[|fffd|^|fffd||282||189|^|fffd|p|fffd||8b||fffd||fffd||242||fffd||839e||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B")
    Else
        msgCell.Value = getTrans("|fffd||fffd||fffd||741|A|fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B|fffd||fffd||fffd|X|fffd||fffd||fffd||482||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    End If
    
    'Excel2003|fffd|p|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W
    Dim msgCell2003
    Set msgCell2003 = IIf(chartkind = "BubbleMatrix", range("B17"), range("B9"))
    If Application.Version < 12 Then
        msgCell2003.Value = getTrans("|fffd||fffd|Excel|fffd||30b|@|fffd|\|fffd||fffd||fffd||fffd||fffd||242||fffd||fffd|A|fffd|O|fffd||fffd||fffd|t|fffd|z|fffd|F|fffd||308||a554||fffd||fffd||fffd|u|fffd||fffd||fffd|E|fffd|U|fffd||315|\|fffd||fffd||fffd||188||642||202||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B")
        msgCell2003.Font.color = vbRed
    End If
    
    Call exec_all
    
    If graphFlag Then
        msgCell.Font.color = RGB(0, 0, 0)
        msgCell.FormulaR1C1 = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||30d||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B")
    Else
        msgCell.FormulaR1C1 = getTrans("|fffd|G|fffd|N|fffd|Z|fffd||fffd||fffd||30b|@|fffd|\|fffd||310||fffd||fffd||fffd||fffd||302||fffd||fffd||7c1|A|fffd|O|fffd||fffd||fffd|t|fffd||34d||c42c||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B")
        Worksheets("about").Activate
        DoEvents
    End If
    setFinished
    ActiveWorkbook.Save
    
    'Worksheets("about").Activate

End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||502||256||7c2||fffd||fffd||702||fffd|
Sub reset()
    Dim cht As Chart
    Dim sht As Worksheet
    
    On Error Resume Next
    Application.DisplayAlerts = False

    '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||30d||d3dc|
    For Each cht In ThisWorkbook.Charts
        cht.Delete
    Next cht
    '|fffd|f|fffd|[|fffd|^|fffd|V|fffd|[|fffd|g|fffd||30d||d3dc|
    For Each sht In Sheets
        If sht.Name <> "about" Then
            sht.Delete
        End If
    Next sht
    Application.DisplayAlerts = True
    On Error GoTo 0

    With Worksheets("about")
        .Select
        With range("B8")
            .Font.color = RGB(0, 0, 0)
            .FormulaR1C1 = ""
        End With
        With range("B9")
            .Font.color = RGB(0, 0, 0)
            .FormulaR1C1 = ""
        End With
        range("A1").Select
    End With
End Sub

Private Sub exec_all()
    DoEvents
    Application.ScreenUpdating = False

    Dim current As Workbook, srcBook As Workbook, csv As Workbook, cornerX As Integer, cornerY As Integer, _
    maxv As Integer, r As range, gap As Double, level As Integer, c As Integer
    
    Dim NewWS As Worksheet
    Dim dataWS As Worksheet
    Set current = ThisWorkbook
    Dim chartkind
    chartkind = getParams("chartkind")
    ' |fffd|f|fffd|[|fffd|^|fffd||313||1cd||fffd||fffd||fffd|
    Workbooks.Open Filename:=ThisWorkbook.Path & "\data\bc_source_data.xls"
    Set srcBook = Workbooks("bc_source_data.xls")
    If chartkind = "Timeline" Then
        Dim tl_num(0 To 1) As Long
        Call pasteCsv(getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"), srcBook, "fortimelinedata", 1, 1, tl_num)
    ElseIf chartkind = "HeatMatrix" Then
        Dim hoge(0 To 1) As Long
        Call pasteCsv(getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"), srcBook, "forColorIndex", 1, 1, hoge)
    End If
    Dim lineNum(0 To 1) As Long
    Call pasteCsv(getTrans("|fffd|f|fffd|[|fffd|^"), srcBook, "data", 1, 1, lineNum)
    
    
    'Excel2003|fffd||30e||fffd||fffd||fffd||fffd||fffd|Interior.ColorIndex|fffd||fffd||fffd|g|fffd|p|fffd|B2007|fffd||20d|~|fffd||fffd|.Color|fffd||12f02||255||3cd|X
    If Application.Version < 12 Then
        Call setCurrentColors(current, chartkind)
    End If
    
    If chartkind <> "BubbleMatrix" Then
      Call setAxisLabelFormat(lineNum)
    End If
    
    ' |fffd||246b||fffd||fffd||42a82||fffd||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||fffd|p|fffd||303|V|fffd|[|fffd|g|fffd||fffd|about|fffd||317||5c2||252||1c9||fffd|
    Worksheets("about").Select
    Dim SheetCount As Integer
    AddInformationSheet = False
    SheetCount = srcBook.Sheets.Count
    For i = 1 To SheetCount
      If Mid(srcBook.Sheets(i).Name, 1, 5) = "info_" Then
          Call makeExpandedInformationSheet(srcBook.Sheets(i).Name, srcBook)
      End If
    Next
    
    Worksheets(getTrans("|fffd|f|fffd|[|fffd|^")).Select
    srcBook.Close savechanges:=False
    
    '|fffd|W|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||310||752||fffd|m|fffd|F
    On Error Resume Next
        If Application.Version < 12 Then
            Charts.Add
        Else
            ActiveSheet.Shapes.AddChart
        End If
    If Err.Number = 1004 Then
        Dim msg As String
        Dim rsp As Integer
        msg = getTrans("|fffd|u|fffd|W|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||310||752||fffd|v|fffd||315||3cd|X|fffd||242||fffd||fffd|e|fffd||fffd||fffd||302||fffd||fffd||7c1|A|fffd|O|fffd||fffd||fffd|t|fffd||315|`|fffd||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B") & vbCrLf
        msg = msg + getTrans("|fffd|u|fffd|W|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||310||752||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd||256||7c2||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H")
        rsp = MsgBox(msg, vbOKCancel, getTrans("|fffd|W|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||310||752||fffd|"))
        If rsp = vbOK Then
            Application.SetDefaultChart XlChartType.xlColumnClustered
        Else
            chartkind = "none"
        End If
    End If
    On Error GoTo 0
    If Application.Version < 12 Then
        Application.DisplayAlerts = False
        For i = 1 To Charts.Count
            Charts(i).Delete
        Next
        Application.DisplayAlerts = True
    Else
        For i = 1 To ActiveSheet.Shapes.Count
            ActiveSheet.Shapes(i).Delete
        Next
    End If

    graphFlag = True
    Select Case chartkind
    Case "Pie"
      Call makePieChart(lineNum)
    Case "BarVertical", "BarHorizontal"
      Call makeBarChart(chartkind, lineNum)
    Case "BarRateVertical", "BarRateHorizontal"
        Call makeBarRateChart(chartkind, lineNum)
    Case "BarLines"
      Call makeBarLineChart(lineNum)
    Case "BubbleMatrix"
        Call makeBubbleMatrix(graphFlag, "standard")
    Case "ComparaBarChart"
        Call makeComparaBarChart(lineNum)
    Case "RadarChart"
        Call makeRadarChart(lineNum)
    Case "Timeline"
        Call makeTimeline(tl_num)

    Case "HeatMatrix"
        Call makeHeatMatrix(lineNum)
    Case Else
      graphFlag = False
    End Select




   '|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||78d|X|fffd|V|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd||315||48f|W
    userclass_update = getParams("userclass_update", "N")
       
    Dim notice_msg, t_sheet As String
    Dim t_x, t_y, t_width, t_height As Integer
    t_x = 550
    t_y = 25
    t_height = 20
    t_width = 320
    
    If userclass_update = "Y" Then
        notice_msg = notice_msg & getTrans("|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||782||fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd||10f|W|fffd|v|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    End If
    
    If notice_msg <> "" Then
       If graphFlag = False Then
          t_sheet = "|fffd|f|fffd|[|fffd|^"
       Else
          If chartkind = "BubbleMatrix" Then
             t_sheet = "|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"
             If getParams("nkeys") <> 2 Then
                 t_x = 700  ' |fffd|V|fffd|[|fffd|g|fffd||24d||c42c||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||a347| |fffd||fffd||fffd||292|u|fffd||fffd||fffd||fffd||fffd||70b7|
             End If
          Else
             t_sheet = "|fffd|O|fffd||fffd||fffd|t"
          End If
       End If
          
       With Sheets(t_sheet)
             With .Shapes.AddTextbox(msoTextOrientationHorizontal, t_x, t_y, t_width, t_height)
                   .Line.Visible = msoFalse
                   .TextFrame.Characters.Text = notice_msg
                   .TextFrame.Characters.Font.Name = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
                   .TextFrame.Characters.Font.Size = 9
                   .TextFrame.Characters.Font.color = RGB(255, 0, 0)
             End With
       End With

    End If


    If graphFlag = True And chartkind <> "BubbleMatrix" Then
      Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
      dataWT.Select
      dataWT.Columns("B:B").Select
      Selection.EntireColumn.Hidden = True
      If chartkind = "RadarChart" And isRate Then
         denomi = getParams("ext.denomi")
         If denomi = "series" Or denomi = "series_all" Then
            dataWT.Rows("2:2").Select
            Selection.EntireRow.Hidden = True
          End If
      End If
      
      dataWT.Cells(1, 1).Select
      Selection.EntireRow.Insert
      Selection.EntireRow.Insert
      
      With ActiveSheet.Buttons.Add(5, 5, 150, 15)
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|f|fffd|[|fffd|^|fffd|R|fffd|s|fffd|[")
        If chartkind = "Timeline" Then
            .OnAction = "copygraphdata_timeline"
        ElseIf chartkind = "HeatMatrix" Then
            .OnAction = "copydata_hm"
        Else
            .OnAction = "copyGraphData"
        End If
        .Characters.Text = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||30c||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||fffd||fffd||fffd|")
        .Font.Size = 9
      End With
      
      If chartkind = "BarLines" And isRate = True Then
          allbar_all = getParams("ext.allbar_all")
          rate_all = getParams("ext.rate_all")
          If hasallout = True Then
            msg1 = getTrans("|fffd|i|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j")
          Else
            msg1 = ""
          End If
          dataWT.Cells(1, 6) = getTrans("|fffd||fffd||fffd|e|fffd|f|fffd|[|fffd|^|fffd||34a||fffd||fffd||fffd||fffd||fffd||fffd|L|fffd||682||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B") + msg1
          If rate_all = "True" Then
             dataWT.Cells(2, 6) = getTrans("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||242||34f|W|fffd|v|fffd||348||34a|O|fffd||fffd||fffd||702||742||702||fffd||fffd|B")
          End If
      End If

      If chartkind = "RadarChart" And getParams("ext.rate") = True Then
         dataWT.Cells(1, 6) = getTrans("|fffd||fffd||fffd|e|fffd|f|fffd|[|fffd|^|fffd||34a||fffd||fffd||fffd||fffd||fffd||fffd|L|fffd||682||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd|i|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j")
         denomi = getParams("ext.denomi")
         If denomi = "series_all" Or denomi = "pop" Then
            dataWT.Cells(2, 6) = getTrans("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||242||34f|W|fffd|v|fffd||348||34a|O|fffd||fffd||fffd||702||742||702||fffd||fffd|B")
         End If
      End If
      
      Application.CutCopyMode = False
      current.Sheets(getTrans("|fffd|O|fffd||fffd||fffd|t")).Select
      If chartkind <> "HeatMatrix" Then
          With ActiveChart
            .PlotVisibleOnly = False
          End With
      End If
    End If
    
    
End Sub

Private Sub setCurrentColors(ByRef cur As Workbook, ByVal chartkind As String)
'
'   ColorIndex|fffd||fffd|`|fffd||fffd|F|fffd||255||3cd|X|fffd|iExcel2003|fffd||142||302||74e|g|fffd|p|fffd|j
'
    Dim strColors As String
    Dim aryColors As Variant
    Dim rgbColors As Variant
    Dim newColors As Collection
    Dim invalIdx, keepIdx As Collection
    Dim i, j As Integer
    Dim exFlg As Boolean
    
    Set newColors = New Collection
    Set invalIdx = New Collection
    Set keepIdx = New Collection
    
    strColors = getParams("colors")
    If chartkind = "BarLines" Then
        strColors = strColors + ";255,153,204"   '|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|v|fffd|_|fffd||318|g|fffd||fffd||fffd||310|F|fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||7c1|A|fffd||fffd||fffd||fffd||fffd||14c||152||fffd|F(#ff99cc)|fffd||fffd||1c9||fffd|
    End If
    aryColors = Split(strColors, ";")
    ReDim rgbColors(UBound(aryColors))
    ReDim gItemColorIndex(UBound(aryColors))
    
    'rgb|fffd||fffd||fffd|l|fffd||3ca||fffd|
    For i = 0 To UBound(aryColors)
        rgbColors(i) = getExcelRGB(aryColors(i))
    Next
    '|fffd|d|fffd||fffd||fffd|F|fffd||fffd|Array|fffd||fffd||fffd||fffd||d3dc|
    newColors.Add rgbColors(0)
    For Each c In rgbColors
        exFlg = False
        For Each newc In newColors
            If newc = c Then
                exFlg = True
                Exit For
            End If
        Next
        If exFlg = False Then newColors.Add c
    Next
    'ColorIndex|fffd||303||fffd||fffd|Z|fffd|b|fffd|g
    ActiveWorkbook.ResetColors
    'cur.Colors|fffd||251||fffd||fffd||742||fffd||fffd||fffd|F|fffd||fffd|Array|fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd|Acur.Colors|fffd||355||3cd|X|fffd||fffd||fffd||202||fffd|
    For i = 1 To newColors.Count
        For j = 1 To UBound(cur.Colors)
            If newColors(i) = cur.Colors(j) Then
                invalIdx.Add i
                keepIdx.Add j
                Exit For
            End If
        Next
    Next
    If invalIdx.Count > 0 Then
        For i = invalIdx.Count To 1 Step -1
            newColors.Remove invalIdx(i)
        Next
    End If
    '|fffd|J|fffd||fffd||fffd|[|fffd|p|fffd||fffd||fffd|b|fffd|g|fffd||fffd||3cd|X
    '|fffd|F|fffd||fffd||fffd||fffd|48|fffd||20f||30a0||fffd||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||30e||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
    j = 0
    For i = 0 To newColors.Count - 1
        If i > BaseColorIndex - BaseColorIndexExp - 2 Then Exit For
        For Each n In keepIdx
            If BaseColorIndex - i = n Then
                j = j + 1
                Exit For
            End If
        Next
        ActiveWorkbook.Colors(BaseColorIndex - (i + j)) = newColors(i + 1)
    Next

    '|fffd|e|fffd||fffd||fffd||682||251||382||fffd||fffd||fffd|ColorIndex|fffd||fffd||fffd||c42c|
    For i = 0 To UBound(rgbColors)
        exFlg = False
        For j = 1 To BaseColorIndex
            If rgbColors(i) = cur.Colors(j) Then
                gItemColorIndex(i) = j
                exFlg = True
                Exit For
            End If
        Next
        If exFlg = False Then rgbColors(i) = -1
    Next
    
End Sub

Private Sub setAxisLabelFormat(Nums() As Long)
    chartkind = getParams("chartkind")
    nkeys = CInt(getParams("nkeys"))
    If chartkind = "RadarChart" And nkeys = 2 Then
       If getParams("ext.rate") = True Then
          isRate = True
       Else
          isRate = False
       End If
    End If
    
    colnum = Nums(0)
    lineNum = Nums(1)
    'colNum = Int(getParams("datacolcount"))
    'lineNum = Int(getParams("datarowcount"))

    key1_dup = getParams("chartkey1_dup")
    str_len = 15
    data_unit = getTrans("|fffd||fffd|")
    If chartkind = "RadarChart" Then
        '|fffd||fffd||fffd||fffd||fffd||95||fffd||fffd||fffd||fffd||1c2||fffd||fffd||fffd|
        isDup = IIf(InStr(key1_dup, "divided") > 0, True, False)
        ' |fffd||fffd||fffd|[|fffd|_|fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd||356||fffd||fffd||fffd||fffd||24c||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||302||152|Z|fffd||fffd|
        str_len = 10
        '|fffd|X|fffd|R|fffd|A|fffd|W|fffd|v|fffd||fffd||fffd||352|P|fffd||282||202||fffd|
        If InStr(getParams("chartbase"), "score") Then data_unit = ""
    End If

    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
   
   '|fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd|s|fffd||c42c|
    dataWT.Columns("B:B").Select
    Selection.Insert Shift:=xlToRight
    dataWT.Cells(1, 1).Select
    Selection.Copy
    dataWT.Cells(1, 2).Select
    ActiveSheet.Paste
    
    R1C1_str = "=IF(LEN(RC[-1])>" & str_len & ",CONCATENATE(LEFT(RC[-1]," & str_len & "),""|fffd|c""),RC[-1])"
    If chartkind = "RadarChart" Then
        If isDup = True Then
            R1C1_str = R1C1_str & " & ""("" & " & "IF(ROUND(RC[+" & colnum - 1 & "],0)<100,TEXT(ROUND(RC[+" & colnum - 1 & "],1),""#,##0.00""),ROUND(RC[+" & colnum - 1 & "],0))" & " & """ & data_unit & ")"""
        Else
            R1C1_str = R1C1_str & " & ""("" & " & "RC[+" & colnum - 1 & "] & """ & data_unit & ")"""
        End If
    End If
    dataWT.Cells(2, 2).FormulaR1C1 = R1C1_str
    dataWT.Cells(2, 2).Select
    Selection.Copy
    dataWT.range(Cells(3, 2), Cells(lineNum, 2)).Select
    ActiveSheet.Paste

    '|fffd|V|fffd||fffd||fffd|[|fffd|Y|fffd||303||fffd||fffd|x|fffd||fffd||fffd|s|fffd||c42c|
    If chartkind = "RadarChart" And isRate Then
       denomi = getParams("ext.denomi")
       If denomi = "series" Or denomi = "series_all" Then
           '|fffd||fffd||fffd|x|fffd||fffd||fffd|p|fffd||30d|s|fffd||fffd|}|fffd||fffd|
           dataWT.Rows("2:2").Select
           Selection.Insert Shift:=xlDown
           '|fffd||fffd||fffd|x|fffd||fffd||fffd|p|fffd||30d|s|fffd||310||64ea||fffd||24e||fffd||fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd|R|fffd|s|fffd|[
           dataWT.Cells(1, 1).Select
           Selection.Copy
           dataWT.range(Cells(2, 1), Cells(2, 2)).Select
           ActiveSheet.Paste
           Application.CutCopyMode = False
           
           '|fffd||fffd||fffd|x|fffd||fffd||fffd|p|fffd||30d|s|fffd||241|u|fffd|V|fffd||fffd||fffd|[|fffd|Y|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|j|fffd|v|fffd||182||202||93ae||fffd||fffd||752||fffd|
                     ' |fffd||fffd||fffd||fffd||fffd||4c1||fffd|  |fffd||fffd||fffd||fffd| lineNum|fffd||242||343|V|fffd||fffd||fffd|[|fffd|Y|fffd||fffd||fffd|v|fffd|s|fffd||fffd||fffd|`|fffd||fffd||fffd||30d|s|fffd||fffd||fffd|u|fffd||702||702||202||fffd||fffd|v
           R1C1_str = "=IF(LEN(R[-1]C)>" & str_len & ",CONCATENATE(LEFT(R[-1]C," & str_len & "),""|fffd|c""),R[-1]C)" _
                       & " & ""("" & " & "R[+" & lineNum - 1 & "]C & """ & getTrans("|fffd||fffd|") & ")"""
           dataWT.Cells(2, 3).FormulaR1C1 = R1C1_str
           dataWT.Cells(2, 3).Select
           Selection.Copy
           dataWT.range(Cells(2, 4), Cells(2, colnum)).Select
           ActiveSheet.Paste
       End If
    End If
    range("A1").Select
    Application.CutCopyMode = False

End Sub

Private Sub copyGraphData()
    '|fffd||197||fffd||fffd||fffd||fffd||fffd|Event|fffd||590||fffd||fffd||202||302||141|ATransFile|fffd||fffd||fffd||fffd||fffd||fffd|x|fffd||1cd||fffd||fffd||fffd|
    readTrans ("data\bc_trans.txt")
    
    Application.ScreenUpdating = False
    Sheets(getTrans("|fffd|O|fffd||fffd||fffd|t")).Select
  
    fistseries = ActiveChart.SeriesCollection(1).Formula
    fistseries = Replace(Replace(Replace(Replace(Replace(Replace(fistseries, "=SERIES(", ""), ")", ""), "!", ""), "$", ""), getTrans("|fffd|f|fffd|[|fffd|^"), ""), ":", ",")
    fistseries = Split(fistseries, ",")
    fistcell = Replace(fistseries(0), "C", "A")
    
    lastseries = ActiveChart.SeriesCollection(ActiveChart.SeriesCollection.Count()).Formula
    lastseries = Replace(Replace(Replace(Replace(Replace(Replace(lastseries, "=SERIES(", ""), ")", ""), "!", ""), "$", ""), getTrans("|fffd|f|fffd|[|fffd|^"), ""), ":", ",")
    lastseries = Split(lastseries, ",")
    lastcell = lastseries(UBound(lastseries) - 1)
    
    Sheets(getTrans("|fffd|f|fffd|[|fffd|^")).Select
    
    ' |fffd||fffd||fffd|[|fffd|_|fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd||30f||a347||fffd|A|fffd|V|fffd||fffd||fffd|[|fffd|Y|fffd||303||fffd||fffd|x|fffd||fffd||fffd|s|fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd||302||fffd|
    ' fistcell|fffd||fffd|1|fffd|s|fffd||fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd||351|I|fffd||fffd||348||342||fffd|1|fffd|s|fffd||fffd||242||fffd||fffd||70b7|
    headdata = range(fistcell)
    chkdata = range(fistcell).Offset(-1, 0)
    If headdata = chkdata Then
       range(fistcell).Offset(-1, 0).Select
       fistcell = Replace(ActiveCell.Address, "$", "")
    End If
    
    range(fistcell, lastcell).Select
    Selection.SpecialCells(xlCellTypeVisible).Select
    Selection.Copy

    Application.ScreenUpdating = True
End Sub

Private Sub copygraphdata_timeline()
    '|fffd||197||fffd||fffd||fffd||fffd||fffd|Event|fffd||590||fffd||fffd||202||302||141|ATransFile|fffd||fffd||fffd||fffd||fffd||fffd|x|fffd||1cd||fffd||fffd||fffd|
    readTrans ("data\bc_trans.txt")
    ' |fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|p|fffd|f|fffd|[|fffd|^|fffd|R|fffd|s|fffd|[|fffd||590||fffd|
    Application.ScreenUpdating = False
    Sheets(getTrans("|fffd|O|fffd||fffd||fffd|t")).Select
    tatenum = 0
    With ActiveChart
        yokonum = .SeriesCollection(1).Points.Count
        For i = 1 To .SeriesCollection.Count
            sname = .SeriesCollection(i).Name
            If sname <> "XItem" And Strings.Left(sname, 9) <> "TermLine:" Then
                tatenum = tatenum + 1
            End If
        Next i
    End With
    
    Sheets(getTrans("|fffd|f|fffd|[|fffd|^")).Select
    'MsgBox tatenum & "," & yokonum
    With Selection
        rg = Application.ConvertFormula("r3c1:r" & (tatenum + 3) & "c1,r3c3:r" & (tatenum + 3) & "c" & (yokonum + 1), xlR1C1, xlA1)
        range(rg).Select
        Selection.SpecialCells(xlCellTypeVisible).Select
        Selection.Copy
    End With
    Application.ScreenUpdating = True
End Sub

Private Sub copydata_hm()
    '|fffd||197||fffd||fffd||fffd||fffd||fffd|Event|fffd||590||fffd||fffd||202||302||141|ATransFile|fffd||fffd||fffd||fffd||fffd||fffd|x|fffd||1cd||fffd||fffd||fffd|
    readTrans ("data\bc_trans.txt")
    ' |fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|p|fffd|f|fffd|[|fffd|^|fffd|R|fffd|s|fffd|[|fffd||590||fffd|
    Application.ScreenUpdating = False
    
    Sheets(getTrans("|fffd|f|fffd|[|fffd|^")).Select
    
    tatenum = Int(getParams("datakey1count"))
    yokonum = Int(getParams("datakey2count"))
    'MsgBox tatenum & "," & yokonum
    With Selection
        rg = Application.ConvertFormula("r3c1:r" & (tatenum + 3) & "c1,r3c3:r" & (tatenum + 3) & "c" & (yokonum + 2), xlR1C1, xlA1)
        range(rg).Select
        Selection.SpecialCells(xlCellTypeVisible).Select
        Selection.Copy
    End With
    Application.ScreenUpdating = True

End Sub

Private Sub setChartColor(cht As Chart, lineNum As Long)
'
'   |fffd|O|fffd||fffd||fffd|t|fffd||314|z|fffd|F|fffd||3cd|X|fffd|i|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|j
'
    Dim i As Integer
    
    Dim strColors As Variant
    strColors = Split(getParams("colors"), ";")
    
    For i = 0 To lineNum - 1
        cht.SeriesCollection(1).Points(i + 1).Select
        With Selection.Border
            .Weight = xlThin
            .LineStyle = xlAutomatic
        End With
        Selection.Shadow = False
        With Selection.Interior
            If Application.Version >= 12 Then   'Excel2007|fffd||20d|~|fffd||350|F|fffd||12f0e|w|fffd||fffd|
                .color = getExcelRGB(strColors(i))
            Else
                If gItemColorIndex(i) > 0 Then   '|fffd|\|fffd||fffd||fffd|F|fffd||fffd|56|fffd|F|fffd||12d02||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
                    If i > 55 Then .ColorIndex = 0
                    .ColorIndex = gItemColorIndex(i)
                End If
            End If
            .Pattern = xlSolid
        End With
  
    Next i

End Sub

Private Sub setChartColorBySeriesCollection(cht As Chart, lineNum As Long)
'
'   |fffd|O|fffd||fffd||fffd|t|fffd||314|z|fffd|F|fffd||3cd|X|fffd|i|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|j
'
    Dim i As Integer
    Dim strColors As Variant
    
    strColors = Split(getParams("colors"), ";")
    
    If lineNum = 1 Then
        For i = 0 To cht.SeriesCollection(1).Points.Count - 1
            cht.SeriesCollection(1).Points(i + 1).Select
            cidx = IIf(UBound(strColors) = 0, 0, i)
            With Selection.Interior
                If Application.Version >= 12 Then
                    .color = getExcelRGB(strColors(cidx))
                Else
                    If gItemColorIndex(cidx) > 0 Then   '|fffd|\|fffd||fffd||fffd|F|fffd||fffd|56|fffd|F|fffd||12d02||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
                        If i > 55 Then .ColorIndex = 0
                        .ColorIndex = gItemColorIndex(cidx)
                    End If
                End If
            End With
        Next i
    Else
        For i = 0 To lineNum - 1
            cht.SeriesCollection(i + 1).Select
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlAutomatic
            End With
            Selection.Shadow = False
            Selection.InvertIfNegative = False
            With Selection.Interior
                If Application.Version >= 12 Then   'Excel2007|fffd||20d|~|fffd||350|F|fffd||12f0e|w|fffd||fffd|
                    .color = getExcelRGB(strColors(i))
                Else
                    If gItemColorIndex(i) > 0 Then   '|fffd|\|fffd||fffd||fffd|F|fffd||fffd|56|fffd|F|fffd||12d02||fffd||fffd||fffd||fffd||a347||fffd||fffd|Excel|fffd||fffd||fffd||fffd||fffd|z|fffd|F|fffd||302||702||fffd|
                        If i > 55 Then .ColorIndex = 0
                        .ColorIndex = gItemColorIndex(i)
                    End If
                End If
                .Pattern = xlSolid
            End With
        Next i
    End If

End Sub

Private Sub makePieChart(ByRef lineNum() As Long)
'
'   |fffd|~|fffd|O|fffd||fffd||fffd|t
'
    Dim nrow As Long
    nrow = lineNum(1) - 1
    
    titlestr = getParams("title")
    
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    Dim chart1 As Chart
    Set chart1 = Charts.Add
    With chart1
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
        If title <= "" Then
          .HasTitle = True
          .ChartTitle.Characters.Text = titlestr
        End If
        .ChartType = xlPie
        .HasLegend = True
        .SetSourceData Source:=dataWT.range(dataWT.Cells(1, 2), dataWT.Cells(nrow + 1, 3)), PlotBy:=xlColumns
        .PlotArea.Interior.ColorIndex = xlNone
        .PlotArea.Border.LineStyle = xlNone
    End With
    Call setChartColor(chart1, nrow)
End Sub

Private Sub makeBarChart(chartkind As Variant, ByRef lineNum() As Long)
'
'   |fffd|_|fffd|O|fffd||fffd||fffd|t
'
    Dim SUMCOLUMN As String
    Dim titlestr, nkeys As Integer              '|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
    Dim key1dup, key2dup, key2misc As String    '|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
    Dim ncol As Long, nrow As Long
    Dim sum_idx As Integer
   
    SUMCOLUMN = getTrans("|fffd||fffd||fffd|v")   '|fffd||fffd||fffd|v|fffd||fffd||316||fffd||fffd|O
    
    ncol = lineNum(0) - 1
    nrow = lineNum(1) - 1

    titlestr = getParams("title")
    nkeys = CInt(getParams("nkeys"))
    key1dup = getParams("chartkey1_dup")
    key2dup = getParams("chartkey2_dup")
    key2misc = getParams("chartkey2_misc")
    ReverseFlag = getParams("chartkey1_reverse", "False")
    xrange = getParams("ext.xrange")
    yrange = getParams("ext.yrange")
    
    '|fffd||fffd||fffd||348||fffd|
    Dim range As Variant
    range = IIf(xrange <> "", xrange, yrange)
    Dim rngvals, rngval, mode As String
    Dim min, max As Long
    mode = "auto"
    For Each rngvals In Split(range, ",")
        rngval = Split(rngvals, ":")
        Select Case rngval(0)
            Case "mode": mode = rngval(1)
            Case "min": min = rngval(1)
            Case "max": max = rngval(1)
        End Select
    Next

    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    dataWT.range("A1").Copy
    dataWT.range(dataWT.Cells(1, ncol + 3), dataWT.Cells(nrow + 1, ncol + 3)).PasteSpecial Paste:=xlPasteFormats
    dataWT.Cells(1, ncol + 3).Value = SUMCOLUMN
    For i = 2 To nrow + 1
        dataWT.Cells(i, ncol + 3) = WorksheetFunction.Sum(dataWT.range(dataWT.Cells(i, 3), dataWT.Cells(i, ncol + 2)))
    Next
    '|fffd||fffd||fffd||fffd||fffd||3cd|X|fffd|@|fffd||fffd||fffd||fffd||fffd|\|fffd|L|fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||95||fffd||fffd||30f||a347||fffd||34f||fffd||fffd||fffd||fffd|_1|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|
    If InStr(chartbase, "score") > 0 Or InStr(key1dup, "divided") > 0 Or InStr(key2dup, "divided") > 0 Then
        dataWT.range(dataWT.Cells(2, 2), dataWT.Cells(nrow + 1, ncol + 2)).NumberFormat = "#,##0.00;;"
    Else
        dataWT.range(dataWT.Cells(2, 2), dataWT.Cells(nrow + 1, ncol + 2)).NumberFormat = "#,###;;"
    End If
    '|fffd||fffd||fffd|v|fffd|l|fffd||30f||fffd||fffd||fffd||fffd|@|fffd||fffd||fffd||fffd||fffd|\|fffd|L|fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||95||fffd||fffd||30f||a347||fffd||fffd|100|fffd||fffd||fffd||fffd||fffd||30f||a347||fffd||34f||fffd||fffd||fffd||fffd|_|fffd|\|fffd|L
    If InStr(chartbase, "score") > 0 Or InStr(key1dup, "divided") > 0 Or (key2dup = "divided" And key2misc <> "misc") Then
        For i = 2 To nrow + 1
            With dataWT.Cells(i, ncol + 3)
                .NumberFormat = IIf(Round(.Value, 0) >= 100, "#,##0", "#,##0.00")
            End With
        Next
    Else
        dataWT.range(dataWT.Cells(2, ncol + 3), dataWT.Cells(nrow + 1, ncol + 3)).NumberFormat = "#,##0"
    End If
    
    dataWT.range("A1").Select   'Charts.Add|fffd||fffd||fffd||24e||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|I|fffd||fffd|
    Dim chart1 As Chart
    Set chart1 = Charts.Add
    With chart1
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
        If title <= "" Then
          .HasTitle = True
          .ChartTitle.Characters.Text = titlestr
        End If
        Select Case chartkind
        Case "BarHorizontal"
          .ChartType = xlBarStacked
        Case "BarVertical"
          .ChartType = xlColumnStacked
        End Select
        If nkeys = 1 Then
          .HasLegend = False
        Else
          .HasLegend = True
          .Legend.Position = xlRight
        End If
                
        .SetSourceData Source:=dataWT.range(dataWT.Cells(1, 2), dataWT.Cells(nrow + 1, ncol + 3)), PlotBy:=xlColumns
        .PlotArea.Interior.ColorIndex = xlNone
        
        With .Axes(xlCategory)
          .HasTitle = True
          .AxisTitle.Text = dataWT.Cells(1, 1).Text
          
          If ReverseFlag = "True" Then
            .Crosses = xlMaximum
            .ReversePlotOrder = True
            .TickLabels.Orientation = xlHorizontal
          Else
            .Crosses = xlMaximum
            .CrossesAt = 1
            .ReversePlotOrder = False
          End If
          
          If datakey1count > 30 Then
            .TickLabelSpacing = 1
          End If
        End With
        With .Axes(xlValue)
          .HasTitle = True
          Select Case getParams("chartbase")
            Case "score"
                .AxisTitle.Text = getTrans("|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l")
            Case "epscore"
                .AxisTitle.Text = getTrans("EP|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l")
            Case "epaggregation"
                .AxisTitle.Text = getTrans("|fffd|o|fffd||830f||fffd||fffd||fffd|iEP|fffd|W|fffd||fffd|j")
            Case "family"
                .AxisTitle.Text = getTrans("|fffd|t|fffd|@|fffd|~|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|")
            Case Else
                .AxisTitle.Text = getTrans("|fffd|o|fffd||830f||fffd||fffd|")
          End Select
          .MinimumScale = 0
          .HasMajorGridlines = False
          .TickLabels.NumberFormatLocal = "#,###"
        End With
        '|fffd||fffd||fffd|v|fffd|l|fffd||fffd|index|fffd||fffd||fffd||64fe|
        For i = 1 To .SeriesCollection.Count
            If .SeriesCollection(i).Name = SUMCOLUMN Then sum_idx = i
        Next
        '|fffd||fffd||fffd|v|fffd|l|fffd||302||743||fffd||fffd|x|fffd||fffd||fffd|\|fffd||fffd|
        With .SeriesCollection(sum_idx)
            .HasDataLabels = True
            .DataLabels.showValue = True
            .DataLabels.Position = xlLabelPositionInsideBase
        End With
        '|fffd||fffd||fffd|v|fffd|l|fffd||303|O|fffd||fffd||fffd|t|fffd||139d6||fffd||fffd||242||fffd||fffd||fffd|
        If Application.Version < 12 Then    '2003|fffd|p
            With .SeriesCollection(sum_idx)
                .Border.Weight = xlThin
                .Border.LineStyle = xlNone
                .Interior.ColorIndex = xlNone
            End With
        Else    '2007|fffd||20d|~
            .SeriesCollection(sum_idx).Format.Fill.Visible = msoFalse
        End If
    End With
    
    '|fffd||fffd||fffd||314||348||352|l
    If mode = "auto" Then
        '|fffd||fffd||fffd|v|fffd|l|fffd||151||fffd|l|fffd||fffd||fffd||fffd|_|fffd||30d||151||fffd|l|fffd||fffd||752||fffd|
        chart1.Axes(xlValue).MaximumScale = getMaxval(WorksheetFunction.max(dataWT.range(dataWT.Cells(2, ncol + 3), dataWT.Cells(nrow + 1, ncol + 3))))
    Else
        chart1.Axes(xlValue).MinimumScale = min
        chart1.Axes(xlValue).MaximumScale = max
    End If
    
    '|fffd|O|fffd||fffd||fffd|t|fffd|z|fffd|F
    Call setChartColorBySeriesCollection(chart1, ncol)
    '|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd|^|fffd||fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    ActiveSheet.Buttons.Add(10, 10, 100, 20).Select ' |fffd||fffd||fffd|v|fffd|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||fffd||fffd|X|fffd||316||fffd||fffd|(Excel|fffd||fffd|ver.|fffd||2d1||fffd|)|fffd||302||fffd||fffd||7c1|A|fffd||fffd||fffd||fffd||fffd||24c||152||fffd|
    With Selection
        .OnAction = "switchLabel"
        .Characters.Text = getTrans("|fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
        .AutoScaleFont = False
        .Locked = True
        .Name = getTrans("|fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
        With .Font
            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
            .FontStyle = "|fffd|W|fffd||fffd|"
            .Size = 9
        End With
    End With
    
    '|fffd|}|fffd||fffd||30d||115|`|fffd||fffd|
    Call ProjectCommon.redrawLegend(chart1)
    '|fffd|}|fffd||10a9||fffd||fffd||d3dc||fffd|i|fffd|c|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||30e||fffd||fffd|A2007|fffd||fffd||fffd||fffd|collection|fffd||fffd|Legend|fffd||fffd|index|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd|j
    If chart1.HasLegend = True Then
        If Application.Version >= 12 And chart1.ChartType = xlColumnStacked Then
            chart1.Legend.LegendEntries(1).Delete
        Else
            chart1.Legend.LegendEntries(sum_idx).Delete
        End If
    End If
    
    ' |fffd||fffd||fffd||682||fffd||fffd||fffd||fffd||fffd||fffd||18f||fffd||fffd||fffd||24f||217||fffd||fffd||fffd||fffd||90bd||fffd||7c2||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With ActiveChart
        Select Case chartkind
        Case "BarHorizontal"
            '.Axes(xlCategory).CrossesAt = 1
            .Axes(xlCategory).TickMarkSpacing = 1
            .Axes(xlCategory).TickLabelSpacing = 1
        Case "BarVertical"
            '.Axes(xlCategory).CrossesAt = 1
            .Axes(xlCategory).TickMarkSpacing = 1
            .Axes(xlCategory).TickLabelSpacing = 1
        End Select

    End With
    ' |fffd||209||fffd||fffd|}|fffd||fffd||fffd|
    If ncol > 30 Then
        If Application.Version < 12 Then
            chart1.Legend.Font.Size = 6
        Else
            With chart1.Legend.Format.TextFrame2.TextRange.Font
                .BaselineOffset = 0
                .Size = 6
            End With
        End If
    End If
    ActiveChart.ChartArea.Select
    
End Sub

Private Sub switchLabel()
'
'   BarChart|fffd|F|fffd||fffd||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Action
'
    If ActiveChart.SeriesCollection(1).HasDataLabels = True Then
        For i = 1 To ActiveChart.SeriesCollection.Count - 1
            ActiveChart.SeriesCollection(i).HasDataLabels = False
        Next
    Else
        For i = 1 To ActiveChart.SeriesCollection.Count - 1
            ActiveChart.SeriesCollection(i).HasDataLabels = True
        Next
    End If
End Sub

Private Sub makeBarRateChart(chartkind As Variant, ByRef lineNum() As Long)
'
'  100|fffd||fffd||fffd||3c2||74f||30b0||fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|
'
    Dim ncol As Long, nrow As Long
    
    ncol = lineNum(0) / 2 - 1
    nrow = lineNum(1) - 2

    titlestr = getParams("title")
    Dim nkeys As Integer
    nkeys = CInt(getParams("nkeys"))
    
    
    ReverseFlag = getParams("chartkey1_reverse", "False")
    
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    '|fffd|f|fffd|[|fffd|^|fffd|V|fffd|[|fffd|g|fffd||309||fffd||fffd|H
    dataWT.range(dataWT.Cells(3, 3), dataWT.Cells(nrow + 2, ncol + 2)).NumberFormatLocal = "0.0%;;"
    dataWT.range(dataWT.Cells(1, ncol + 3), dataWT.Cells(nrow + 2, ncol + 3)).Insert Shift:=xlToRight
    
    Dim chart1 As Chart
    Set chart1 = Charts.Add
    
    With chart1
        .Location xlLocationAsNewSheet, getTrans("|fffd|O|fffd||fffd||fffd|t")
        If titlestr <> "" Then
          .HasTitle = True
          .ChartTitle.Characters.Text = titlestr
        End If
        Select Case chartkind
        Case "BarRateHorizontal"
          .ChartType = xlBarStacked100
        Case "BarRateVertical"
          .ChartType = xlColumnStacked100
        End Select
        If nkeys = 1 Then
          .HasLegend = False
        Else
          .HasLegend = True
          .Legend.Position = xlRight
        End If
                
        .SetSourceData Source:=dataWT.range(dataWT.Cells(2, 2), dataWT.Cells(nrow + 2, ncol + 2)), PlotBy:=xlColumns
        .PlotArea.Interior.ColorIndex = xlNone
        
        With .Axes(xlCategory)
          .HasTitle = True
          '.AxisTitle.Text = dataWT.Cells(1, ncol + 4).Text
          .AxisTitle.Text = dataWT.Cells(2, 1).Text
          
          If ReverseFlag = "True" Then
            .Crosses = xlMaximum
            .ReversePlotOrder = True
            .TickLabels.Orientation = xlHorizontal
          Else
            .Crosses = xlMaximum
            .CrossesAt = 1
            .ReversePlotOrder = False
          End If
          
        End With
        With .Axes(xlValue)
          .HasTitle = True
          
           If getParams("chartbase") = "score" Then
            .AxisTitle.Text = getTrans("|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l (%|fffd|\|fffd||fffd|)")
           ElseIf getParams("chartbase") = "epaggregation" Then
            .AxisTitle.Text = getTrans("|fffd|o|fffd||830f||fffd||fffd|(EP|fffd|W|fffd||fffd|) (%|fffd|\|fffd||fffd|)")
           ElseIf getParams("chartbase") = "family" Then
            .AxisTitle.Text = getTrans("|fffd|t|fffd|@|fffd|~|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd| (%|fffd|\|fffd||fffd|)")
           ElseIf getParams("chartbase") = "epscore" Then
            .AxisTitle.Text = getTrans("EP|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l (%|fffd|\|fffd||fffd|)")
           Else
            .AxisTitle.Text = getTrans("|fffd|o|fffd||830f||fffd||fffd| (%|fffd|\|fffd||fffd|)")
           End If
       '   .AxisTitle.Text = getTrans("|fffd||fffd||fffd||fffd|")
       '   .MinimumScale = 0
          .HasMajorGridlines = False
        End With
    End With
    
    Call setChartColorBySeriesCollection(chart1, ncol)
    
End Sub

Private Sub makeBarLineChart(lineNum() As Long)
'
'   |fffd||702||fffd||fffd||fffd|O|fffd||fffd||fffd|t
'
    Dim nkeys As Integer
    Dim series_count As Integer
    Dim titlestr, ReverseFlag, key1dup, key2dup, key2misc As String    'bc_params.txt|fffd||64fe||fffd|l
    Dim ncol, nrow As Long
    Dim dup_list As Variant
    Dim chart1 As Chart
    Dim strColors As Variant
    
    ncol = lineNum(0) - 1
    nrow = lineNum(1) - 1
    
    titlestr = getParams("title")
    nkeys = CInt(getParams("nkeys"))
    ReverseFlag = getParams("chartkey1_reverse", "False")
    key1dup = getParams("chartkey1_dup")
    key2dup = getParams("chartkey2_dup")
    key2misc = getParams("chartkey2_misc")
    strColors = Split(getParams("colors"), ";")
    yrange = getParams("ext.yrange")
    y2range = getParams("ext.y2range")

    '|fffd||fffd||fffd|v|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|L|fffd||fffd|
    If nkeys = 2 And getParams("ext.allbar") = True Then
       hasallout = True
    Else
       hasallout = False
    End If
    '|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|
    If nkeys = 2 And getParams("ext.rate") = True Then
       isRate = True
    Else
       isRate = False
    End If
    
    If Cells(1, lineNum(0)) = getTrans("|fffd||fffd||fffd|v|fffd|i|fffd||fffd|L|fffd||20a|O|fffd||fffd||fffd||702||781|j") And val(Application.Version) <= 11 Then
      Cells(1, lineNum(0)).Value = getTrans("|fffd||fffd||fffd|v|fffd|i|fffd||fffd||fffd|L|fffd||20a|O|fffd||fffd||fffd||702||781|j")
    End If
    Select Case getParams("chartbase")
        Case "score"
            y_axistitle = getTrans("|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l")
        Case "epscore"
            y_axistitle = getTrans("EP|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l")
        Case "epaggregation"
            y_axistitle = getTrans("|fffd|o|fffd||830f||fffd||fffd||fffd|iEP|fffd|W|fffd||fffd|j")
        Case "family"
            y_axistitle = getTrans("|fffd|t|fffd|@|fffd|~|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|")
        Case Else
            y_axistitle = getTrans("|fffd|o|fffd||830f||fffd||fffd|")
    End Select
    If isRate = True Then
       y_axistitle = y_axistitle + "|fffd|i|fffd||fffd||fffd|j"
    End If
    
    'y|fffd||fffd||fffd||348||fffd|
    Dim rngvals, rngval, ymode As String
    Dim ymin, ymax As Long
    ymode = "auto"
    For Each rngvals In Split(yrange, ",")
        rngval = Split(rngvals, ":")
        Select Case rngval(0)
            Case "mode": ymode = rngval(1)
            Case "min": ymin = rngval(1)
            Case "max": ymax = rngval(1)
        End Select
    Next
    Debug.Print ymin
    'y2|fffd||fffd||fffd||348||fffd|
    Dim y2mode As String
    Dim y2min, y2max As Long
    y2mode = "auto"
    If hasallout = True Then
        For Each rngvals In Split(y2range, ",")
            rngval = Split(rngvals, ":")
            Select Case rngval(0)
                Case "mode": y2mode = rngval(1)
                Case "min": y2min = rngval(1)
                Case "max": y2max = rngval(1)
            End Select
        Next
    End If
    
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|i|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd|j
    '|fffd||fffd||fffd||fffd||fffd||3cd|X|fffd|@|fffd||95||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||34a||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||34f||fffd||fffd||fffd||fffd|_1|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|
    With dataWT.range(dataWT.Cells(2, 2), dataWT.Cells(nrow + 1, ncol + IIf(hasallout, 1, 2)))
        If isRate = True Then
            .NumberFormat = "#,##0.0""%"";;"
        ElseIf InStr(chartbase, "score") > 0 Or InStr(key1dup, "divided") > 0 Or InStr(key2dup, "divided") > 0 Then
            .NumberFormat = "#,##0.00;;"
        Else
            .NumberFormat = "#,###;;"
        End If
    End With
    '|fffd||fffd||fffd|v|fffd|l|fffd||30f||fffd||fffd||fffd||fffd|@|fffd||fffd||fffd||fffd||fffd|\|fffd|L|fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||95||fffd||fffd||30f||a347||fffd||fffd|100|fffd||fffd||fffd||fffd||fffd||30f||a347||fffd||34f||fffd||fffd||fffd||fffd|_|fffd|\|fffd|L
    dup_list = Array("divided", "divided_add", "divided_all")
    If hasallout = True And (InStr(key1dup, "divided") > 0 Or (UBound(Filter(dup_list, key2dup)) >= 0 And key2misc <> "misc")) Then
        For i = 2 To nrow + 1
            With dataWT.Cells(i, ncol + 2)
                .NumberFormat = IIf(Round(.Value, 0) >= 100, "#,##0", "#,##0.00")
            End With
        Next
    End If

    '|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd||c42c|
    Set chart1 = Charts.Add
    With chart1
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
        If title <= "" Then
          .HasTitle = True
          .ChartTitle.Characters.Text = titlestr
        End If
        .ChartType = xlLineMarkers
        
        If nkeys = 1 Then
          .HasLegend = False
        Else
          .HasLegend = True
          .Legend.Position = xlRight
        End If
                
        .SetSourceData Source:=dataWT.range(dataWT.Cells(1, 2), dataWT.Cells(nrow + 1, ncol + 2)), PlotBy:=xlColumns
        .PlotArea.Interior.ColorIndex = xlNone
        
        With .Axes(xlCategory)
          .HasTitle = True
          .AxisTitle.Text = dataWT.Cells(1, 1).Text
          .Crosses = xlMaximum
          .CrossesAt = 1
          .ReversePlotOrder = False
        End With
        With .Axes(xlValue)
          .HasTitle = True
          .AxisTitle.Text = y_axistitle
          .MinimumScale = 0
          .HasMajorGridlines = False
        End With
        
        series_count = .ChartGroups(1).SeriesCollection.Count

        '|fffd||fffd||fffd|v|fffd|_
        If hasallout = True Then
            .SeriesCollection(series_count).Select
            .SeriesCollection(series_count).AxisGroup = 2
            .SeriesCollection(series_count).ChartType = xlColumnClustered
            With .SeriesCollection(series_count).Interior
                If Application.Version >= 12 Then
                    .color = getExcelRGB(strColors(series_count - 1))
                Else
                    If gItemColorIndex(series_count - 1) > 0 Then
                        .ColorIndex = 0     '2|fffd||fffd||752||80b5||fffd||202||fffd||fffd||190|F|fffd||fffd||fffd||3c2||fffd||fffd||202||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd|
                        .ColorIndex = gItemColorIndex(series_count - 1)
                    End If
                End If
                .Pattern = xlSolid
            End With
            '|fffd||fffd||fffd|v|fffd|_|fffd||314|z|fffd|F|fffd||342||fffd||fffd||fffd||fffd||14e|w|fffd||fffd|BstrColors|fffd||242||34a||702||702||fffd||102||202||fffd|
            With .SeriesCollection(series_count).Border
                If Application.Version >= 12 Then
                    .color = ProjectCommon.getExcelRGB("255,153,204")
                Else
                    If gItemColorIndex(series_count) > 0 Then
                        .ColorIndex = 0
                        .ColorIndex = gItemColorIndex(series_count)
                    End If
                End If
                .Weight = xlThin
                .LineStyle = xlContinuous
            End With
        End If

        If ReverseFlag = "True" Then
          .Axes(xlCategory).ReversePlotOrder = True
          If hasallout = True Then
            .SeriesCollection(series_count).AxisGroup = 1
            For Each i In .ChartGroups(2).SeriesCollection
              i.AxisGroup = 2
            Next
            .Axes(xlValue, xlPrimary).HasTitle = False
            .Axes(xlValue, xlSecondary).HasTitle = True
            .Axes(xlValue, xlSecondary).AxisTitle.Characters.Text = y_axistitle
          Else
            .Axes(xlCategory).ReversePlotOrder = True
            .Axes(xlCategory).Crosses = xlMaximum
          End If
        End If
    
    End With
    
    If nkeys = 1 Then
        With chart1.SeriesCollection(1)
            .MarkerStyle = xlCircle
            .Smooth = False
            .Shadow = False
            If Application.Version >= 14 Then
                .Format.Line.Visible = msoTrue
                .Format.Line.ForeColor.RGB = ProjectCommon.getExcelRGB(strColors(0))
                .Format.Line.Transparency = 0
                .Format.Fill.Solid
                .Format.Fill.Transparency = 0
                .Format.Fill.Visible = msoTrue
                .Format.Fill.ForeColor.RGB = ProjectCommon.getExcelRGB(strColors(0))
                .MarkerSize = 5
            ElseIf Application.Version = 12 Then    '2007|fffd|p
                .Border.color = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerBackgroundColor = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerForegroundColor = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerSize = 5
            Else    '2003|fffd|p
                .Border.Weight = xlThick
                .Border.LineStyle = xlContinuous
                .Border.ColorIndex = BaseColorIndex
                .MarkerBackgroundColorIndex = BaseColorIndex
                .MarkerForegroundColorIndex = BaseColorIndex
                .MarkerSize = 7
            End If
        End With
    Else
        Dim style_set_series_count As Integer
        If hasallout = True Then
          style_set_series_count = series_count - 2
        Else
          style_set_series_count = series_count - 1
        End If
        
        For i = 0 To style_set_series_count
            With chart1.SeriesCollection(i + 1)
                .MarkerStyle = xlCircle
                .Smooth = False
                .Shadow = False
                If Application.Version >= 14 Then
                    .Format.Line.Visible = msoTrue
                    .Format.Line.ForeColor.RGB = ProjectCommon.getExcelRGB(strColors(i))
                    .Format.Line.Transparency = 0
                    .Format.Fill.Solid
                    .Format.Fill.Transparency = 0
                    .Format.Fill.Visible = msoTrue
                    .Format.Fill.ForeColor.RGB = ProjectCommon.getExcelRGB(strColors(i))
                    .MarkerSize = 5
                ElseIf Application.Version = 12 Then    '2007|fffd|p
                    .Border.color = ProjectCommon.getExcelRGB(strColors(i))
                    .MarkerBackgroundColor = ProjectCommon.getExcelRGB(strColors(i))
                    .MarkerForegroundColor = ProjectCommon.getExcelRGB(strColors(i))
                    .MarkerSize = 6
                Else    '2003|fffd|p
                    .Border.Weight = xlThick
                    .Border.LineStyle = xlContinuous
                    .MarkerSize = 7
                    If gItemColorIndex(i) > 0 Then
                        .Border.ColorIndex = gItemColorIndex(i)
                        .MarkerBackgroundColorIndex = gItemColorIndex(i)
                        .MarkerForegroundColorIndex = gItemColorIndex(i)
                    End If
                End If
            End With
        Next i
        
        If isRate = True Then
            max_scale = chart1.Axes(xlValue).MaximumScale
            If max_scale > 100 Then
               chart1.Axes(xlValue).MaximumScale = 100
            End If
            chart1.Axes(xlValue).TickLabels.NumberFormatLocal = "0""%""" ' |fffd|\|fffd||fffd||fffd|`|fffd||fffd||fffd||315||3cd|X
        Else
            chart1.Axes(xlValue).TickLabels.NumberFormatLocal = "0"
        End If
       
    End If
    
    'y,y2|fffd||fffd||fffd|\|fffd||fffd||fffd||348||342||312||fffd||fffd||fffd|
    If ymode <> "auto" Then
        chart1.Axes(xlValue).MinimumScale = ymin
        chart1.Axes(xlValue).MaximumScale = ymax
    End If
    If y2mode <> "auto" Then
        chart1.Axes(xlValue, xlSecondary).MinimumScale = y2min
        chart1.Axes(xlValue, xlSecondary).MaximumScale = y2max
    End If

End Sub

Private Sub makeExpandedInformationSheet(SheetName As String, ByRef srcBook As Workbook)
    srcBook.Worksheets(SheetName).Activate
    DoEvents
    ' |fffd||246b||fffd||fffd||fffd||30e||fffd||796||fffd||fffd||24c||fffd||fffd||fffd||fffd||682||310||fffd||fffd|`|fffd||fffd||fffd|s|fffd||fffd|
    Select Case Cells(2, 1).Text
      Case "USPC", "IPC", "IPCR", "CPC"
        Call makeIpcInformation(srcBook)
      Case "PRTECH"
        Call makePRTecInformation(srcBook)
      Case Else
        'TODO:
    End Select
    Excel.Application.CutCopyMode = False  '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd||fffd|
End Sub

Private Sub makeIpcInformation(ByRef srcBook As Workbook)
    Dim toX As Integer
    Dim toY As Integer
    Dim title As String
    Dim suffix As String
    
    Set current = ThisWorkbook
    toX = Cells(2, 2).Text
    toY = Cells(2, 3).Text + 2
    title = Cells(2, 4).Text
    
    For i = 3 To toY
      If Cells(i, 1).Text <> "" Then
        range(Cells(i, 1), Cells(i, toX)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
      ElseIf Cells(i, 1).Text = "" Then
        range(Cells(i, 2), Cells(i, toX)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlDot
      End If
      If i = toY Then
        range(Cells(i, 1), Cells(i, toX)).Select
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
      End If
    Next
    
    Cells(2, 1).Value = "|fffd||fffd|" & title
    range(Cells(2, 2), Cells(2, 3)).Select
    Selection.Clear
    
    range(Cells(2, 1), Cells(toY, toX)).Select
'    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    Selection.Copy
    current.Activate
    DoEvents
    
    Set NewWS = Worksheets.Add()  '|fffd|V|fffd|[|fffd|g|fffd||c42c||fffd|I
    NewWS.Name = title
    ActiveSheet.Paste
    
    range(Cells(1, 1), Cells(1, 1)).Select
    Selection.EntireColumn.AutoFit
    
    range(Cells(2, 1), Cells(toY - 1, toX)).Select
    range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
    
    If toX > 2 Then
      range(Cells(1, 2), Cells(1, 2)).Select
      Selection.EntireColumn.AutoFit
    End If
    
    range(Cells(2, toX), Cells(2, toX)).Select
    Selection.ColumnWidth = 100
    
    range(Cells(1, 1), Cells(toY - 1, toX)).Select
    With Selection
      .Font.Name = "MS PGothic"
      .WrapText = True
      .VerticalAlignment = xlTop
    End With
    
    range(Cells(2, 1), Cells(toY - 1, toX)).Select
    With Selection
      .Borders(xlEdgeLeft).LineStyle = xlContinuous
      .Borders(xlEdgeRight).LineStyle = xlContinuous
    End With
    
    range(Cells(1, 1), Cells(1, 1)).Select
    ActiveWindow.DisplayGridlines = False
    ActiveSheet.Move after:=Sheets(2)
End Sub

Private Sub makePRTecInformation(ByRef srcBook As Workbook)
    Dim toX As Integer
    Dim toY As Integer
    Dim title As String
    Dim suffix As String
    
    Set current = ThisWorkbook
    toX = Int(Cells(2, 2).Text)
    toY = Int(Cells(2, 3).Text) + 2
    title = Cells(2, 4).Text
    
    For i = 3 To toY
      If Cells(i, 1).Text <> "" Then
        range(Cells(i, 1), Cells(i, toX)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
      ElseIf Cells(i, 1).Text = "" Then
        range(Cells(i, 2), Cells(i, toX)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlDot
      End If
      If i = toY Then
        range(Cells(i, 1), Cells(i, toX)).Select
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
      End If
    Next

    Cells(2, 1).Value = "|fffd||fffd|" & title
    range(Cells(2, 2), Cells(2, 3)).Select
    Selection.Clear
    
    range(Cells(2, 1), Cells(toY, toX)).Select
'    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
   
    Selection.Copy
    current.Activate
    DoEvents
    
    Set NewWS = Worksheets.Add()  '|fffd|V|fffd|[|fffd|g|fffd||c42c||fffd|I
    NewWS.Name = title
    ActiveSheet.Paste
    
    If Cells(1, 4).Text <> "" Then
      Cells(1, 4).Value = ""
    End If
    
    range(Cells(1, 1), Cells(1, 1)).Select
    
    Selection.EntireColumn.AutoFit
    
    range(Cells(2, 1), Cells(toY - 1, toX)).Select
    range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    If toX >= 2 Then
      Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
    End If
    Cells.Select
    Cells.EntireColumn.AutoFit
    
    range(Cells(1, 1), Cells(toY - 1, toX)).Select
    With Selection
      .Font.Name = "MS PGothic"
      .WrapText = True
      .VerticalAlignment = xlTop
    End With
    
    range(Cells(2, 1), Cells(toY - 1, toX)).Select
    With Selection
      .Borders(xlEdgeLeft).LineStyle = xlContinuous
      .Borders(xlEdgeRight).LineStyle = xlContinuous
    End With
    
    range(Cells(1, 1), Cells(1, 1)).Select
    ActiveWindow.DisplayGridlines = False
    ActiveSheet.Move after:=Sheets(2)
End Sub

Private Sub pasteCsv(SheetName As String, ByRef srcBook As Workbook, srcSheetName As String, _
    toX As Integer, toY As Integer, ByRef Answer() As Long)
    
    Set current = ThisWorkbook
    
    srcBook.Worksheets(srcSheetName).Activate
    DoEvents
    
    'CSV|fffd||30d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|
    j = 1
    Do
        j = j + 1
    Loop While Cells(j, 1).Text <> ""
    csvY = j - 1
    'CSV|fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|
    ' |fffd|R|fffd||fffd||fffd|p|fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||314|z|fffd|u|fffd||302||fffd||fffd||7c1|A|fffd|O|fffd|s|fffd||20f||30a0||fffd||fffd||202||fffd|O|fffd|s|fffd||682||fffd||fffd||fffd|T|fffd|[|fffd|`
    If csvY > 2 Then
        st = 3
    Else
        st = 1
    End If
    j = 1
    Do
        j = j + 1
    Loop While Cells(1, j).Text <> ""
    k = 1
    Do
        k = k + 1
    Loop While Cells(3, k).Text <> ""
    csvX = Application.WorksheetFunction.max(j, k) - 1
    
    Answer(0) = csvX
    Answer(1) = csvY
    'CSV|fffd||fffd||fffd|R|fffd|s|fffd|y
    range(Cells(1, 1), Cells(csvY, csvX)).Select
    Selection.Copy
    current.Activate
    DoEvents
    Set NewWS = Worksheets.Add()  '|fffd|V|fffd|[|fffd|g|fffd||c42c||fffd|I
    NewWS.Name = SheetName
    Cells(toY, toX).Select

    ActiveSheet.Paste
    Excel.Application.CutCopyMode = False  '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd||fffd|
End Sub

Private Sub setDynamicObject()
    readTrans ("data\bc_trans.txt")
'
'   |fffd||fffd||fffd|I|fffd||252||1c9||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||243|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd||1c9||fffd|
'
    For Each ws In Worksheets
        If ws.Name = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X") Then
            Call mduMakeMatrix.makeChartComboBox("addevent")
        End If
    Next
End Sub






Attribute VB_Name = "mduMakeMatrix"
Option Explicit
Private Const MAX_LEGEND_LENGTH = 50            '|fffd|}|fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||151||fffd|l
Private Const RADIUS_ALPHA = 2                  '|fffd|~|fffd||292|u|fffd||fffd||fffd||fffd||fffd||fffd|
Private Const RADIUS_ALPHA12 = 3                '|fffd|~|fffd||292|u|fffd||fffd||fffd||fffd||fffd||fffd|
Private Const COLOR_INDEX_BASE = 56             '|fffd||fffd||fffd||fffd||fffd|~|fffd||310|F|fffd||fffd||fffd||fffd||fffd||303|x|fffd|[|fffd|X|fffd|l(Excel|fffd||248||2d1||fffd|)
Private Const LEGEND_FIXED_WIDTH = 186          '|fffd|}|fffd||fffd||30c||152||855d||fffd||752||fffd|l
Private Const DUMMY_PIE = "DummyPieMustBeDel"   '|fffd|_|fffd|~|fffd|[|fffd|pPie
Private Const PREFIX_PIENAME = "piegraphic"     '|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||315||fffd||fffd||fffd||fffd|~|fffd||316||fffd||fffd|O|fffd||310||693||fffd||fffd||fffd|

'Private Const HYOUJI_STR_OK = "|fffd||fffd||fffd||fffd||312|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B"
'Private Const HYOUJI_STR_NG = "|fffd||fffd||fffd||fffd||312|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd||fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B"
'Private Const NO_FOCUS = "|fffd||202||fffd|"         '|fffd||1c2||303|O|fffd||fffd||fffd|t|fffd|i|fffd||fffd||fffd|C|fffd||fffd||fffd|[|fffd|j|fffd||242||fffd||fffd|t|fffd|H|fffd|[|fffd|J|fffd|X|fffd||13582||102||202||fffd||fffd||fffd|
Private Const DEFAULT_COLOR = 12956235  '|fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||303|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|F RGB(75, 178, 197)

Private Const pieWidth = 94             '|fffd|~|fffd||315||fffd|
Private Const pieHeight = 15            '|fffd|~|fffd||30d||fffd||fffd||fffd|

Private HYOUJI_STR_OK As String '= "|fffd||fffd||fffd||fffd||312|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B"
Private HYOUJI_STR_NG As String '= "|fffd||fffd||fffd||fffd||312|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd||fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B"
Private NO_FOCUS As String      '= "|fffd||202||fffd|"         '|fffd||1c2||303|O|fffd||fffd||fffd|t|fffd|i|fffd||fffd||fffd|C|fffd||fffd||fffd|[|fffd|j|fffd||242||fffd||fffd|t|fffd|H|fffd|[|fffd|J|fffd|X|fffd||13582||102||202||fffd||fffd||fffd|

Private graphKind As String              ' |fffd|O|fffd||fffd||fffd|t|fffd||30e||fffd||fffd|(|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X -> |fffd|p|fffd||fffd||30f||a347||fffd||342||fffd||fffd||fffd||fffd|gettrans|fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||fffd||fffd|ok?)
Private graphSheetname As String         ' |fffd|O|fffd||fffd||fffd|t|fffd||303|V|fffd|[|fffd|g|fffd||fffd|
Private srcRowMax As Integer             '|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||30d|s|fffd||151||fffd|l
Private srcColumnMax As Integer          '|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||317||fffd||151||fffd|l

Private xAxisNum As Integer              '|fffd||fffd||fffd||fffd||fffd||310||fffd|(|fffd||fffd||fffd||682||30f|d|fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||682||310||fffd|)
Private radiusList() As Double           '|fffd||fffd||fffd||fffd||fffd|~|fffd||314||fffd||fffd|a(|fffd||45e6|)|fffd|l|fffd||fffd||fffd|X|fffd|g
Private radiusMax As Double              '|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd||fffd||151||fffd|~|fffd||fffd||fffd|a|fffd|l(|fffd||45e6|)
Private rowStep As Integer               'Pie|fffd||303|s|fffd|[|fffd|X|fffd||fffd|=|fffd||fffd||fffd||fffd||fffd||310||fffd|
Private lengendSourceData As range       '|fffd|}|fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd|

Private yLabels() As String              '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||312|G|fffd||fffd||fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd|
Private xLabels() As String              '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd|

Private maxLengthLegend As Integer       '|fffd||fffd||512||fffd||fffd||fffd|Legend|fffd||fffd||fffd||fffd|

Private chartRadius As String            '|fffd|~|fffd||315|`|fffd||fffd||34b||3c8||a0a9|('const')|fffd||fffd||fffd|a('num')|fffd|t|fffd||fffd||fffd||fffd|
Private maxWidthLegendTitles As Integer  '|fffd|}|fffd||fffd||315|\|fffd||fffd||fffd||152||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private pieColors()                      '|fffd|~|fffd||30a|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310|F|fffd||fffd||fffd||fffd|
Private maxRadius As Double              '|fffd||fffd||fffd||fffd||fffd|~|fffd||30d||151||555d|(|fffd||18d||151||5342||fffd||fffd|)
Private matrixTitle As String            '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||303|^|fffd|C|fffd|g|fffd||fffd|
Private nkeys                            '|fffd||fffd||fffd|i|fffd||342|R|fffd|A|fffd|}|fffd||15b3||fffd||fffd||fffd||fffd||fffd||242|Q|fffd||242||202||fffd|

Private key1title                         'x|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd|P
Private key2title                         'y|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd|Q

Private showDigitalNowFlag               '|fffd||fffd||fffd||fffd|Pie|fffd||30f||fffd||250||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|A1=|fffd||fffd||fffd||fffd|

Private graphAreaHeight As Integer       '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||308||fffd||30d||fffd||fffd||fffd||fffd|i|fffd|P|fffd||281|F|fffd|||fffd|C|fffd||fffd||fffd|g|fffd|j
Private graphAreaWidth As Integer        '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||308||fffd||315||fffd||fffd|i|fffd|P|fffd||281|F|fffd|||fffd|C|fffd||fffd||fffd|g|fffd|j
Private graphArea As range               '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||308||fffd|i|fffd|Z|fffd||fffd||fffd||348||341|j
Private gChartComboBox As clsMakeMatixCmb '|fffd||1c9||fffd||fffd|R|fffd||fffd||fffd|{|fffd||303|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd|`|fffd|N|fffd||fffd||fffd|X

Private drawMode As String               '|fffd|`|fffd||60c2||fffd|[|fffd|h lite=|fffd||fffd||fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||152||fffd|Astandard=|fffd||fffd||fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||3cd|X|fffd||fffd|

' |fffd||209||fffd||fffd||341|A64bit|fffd|I|fffd|t|fffd|B|fffd|X|fffd||153||fffd||fffd||c0b5||fffd||702||fffd||fffd||fffd|B|fffd|iPtrSafe |fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd|j
' Public Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
' Public Declare Function CloseClipboard Lib "user32" () As Long
' Public Declare Function EmptyClipboard Lib "user32" () As Long

Sub switchPiesLabels()
    '----------------------------------------------------------
    ' |fffd||fffd||fffd|x|fffd||fffd||fffd|i|fffd||fffd||fffd|l|fffd|j|fffd|`|fffd||63c8||fffd||fffd|
    '----------------------------------------------------------
    Dim saveScreenUpdating
    Dim objChart, objButton
    Dim labelFontSize
    Dim confirmShow As Integer
    Dim oleCmb As Object
    
    Dim numPoints As Integer, p As Integer, cntNotZero As Integer, q As Integer, cntProcessing As Integer, cntRealProc
    Dim showValue As String
    
    readTrans ("data\bc_trans.txt")
    
    '"|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"|fffd|p|fffd||303|}|fffd|N|fffd||fffd||fffd||202||302||141|A"|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"|fffd|V|fffd|[|fffd|g|fffd||311||fffd||fffd||742||fffd||fffd||90a9||fffd||fffd||fffd||fffd|
    Dim ws As Worksheet, flag As Boolean
    For Each ws In Worksheets
        If ws.Name = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X") Then flag = True
    Next ws
    If Not flag Then
        MsgBox getTrans("|fffd||fffd||fffd||303|}|fffd|N|fffd||fffd||fffd||357||fffd||fffd|p|fffd||142||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||302||14e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"), vbCritical, getTrans("|fffd|x|fffd||fffd|")
        Exit Sub
    End If
    HYOUJI_STR_OK = getTrans("|fffd||fffd||fffd||fffd||312|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B")
    HYOUJI_STR_NG = getTrans("|fffd||fffd||fffd||fffd||312|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd||fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B")
    
    If IsEmpty(nkeys) Or nkeys = 3 Then
        labelFontSize = 12
    Else
        labelFontSize = 12
    End If

    '|fffd||fffd||fffd|x|fffd||fffd||fffd|`|fffd||fffd||fffd||502||303|`|fffd|F|fffd|b|fffd|N|fffd|i|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|Open|fffd||fffd||fffd|j
    If IsEmpty(showDigitalNowFlag) Then
        For Each objButton In Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).Buttons
            If objButton.Name = "bntShowDigital" Then Exit For
        Next
        If objButton Is Nothing Then
            showDigitalNowFlag = 1
        Else
            showDigitalNowFlag = IIf(objButton.Caption = getTrans("|fffd|\|fffd||fffd|"), 1, 0)
        End If
    End If
    
    '|fffd|`|fffd||60c2||fffd|[|fffd|h|fffd||303|`|fffd|F|fffd|b|fffd|N
    If ActiveSheet.OLEObjects.Count > 0 Then
        For Each oleCmb In ActiveSheet.OLEObjects
            If oleCmb.Name = "ChartComboBox" Then
                drawMode = "standard"
            Else
                drawMode = "lite"
            End If
        Next
    End If
    
    If showDigitalNowFlag = 1 Then
        If drawMode = "standard" Then
            labelFontSize = Application.InputBox( _
                Prompt:=getTrans("|fffd|o|fffd|u|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||fffd|n|fffd||42a91||fffd||fffd||fffd||fffd||a347||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||9396||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B") & vbCrLf & getTrans("|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H") & vbCrLf & vbCrLf & _
                        getTrans("|fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||303|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||a347||fffd||341|A|fffd||209||fffd||fffd||250||fffd||fffd|l|fffd|i7|fffd|`15|fffd|j|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"), _
                title:=getTrans("|fffd||fffd||fffd||fffd|l|fffd||315|\|fffd||fffd|"), Default:=labelFontSize, Type:=3)
            If labelFontSize = False Then
                Exit Sub
            End If
            If labelFontSize < 7 Or labelFontSize > 15 Or IsNumeric(labelFontSize) = False Then
                MsgBox getTrans("7|fffd|`15|fffd||310||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"), vbExclamation
                Exit Sub
            End If
            Application.ScreenUpdating = True
        Else
            confirmShow = MsgBox(getTrans("|fffd|o|fffd|u|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||fffd|n|fffd||42a91||fffd||fffd||fffd||fffd||a347||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||9396||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B") & vbCrLf & getTrans("|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H"), _
                                  vbOKCancel + vbExclamation)
            If confirmShow = vbCancel Then
                Exit Sub
            End If
        End If
    End If
    
    saveScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    cntProcessing = 0
    cntRealProc = 0
    For Each objChart In Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).ChartObjects
        DoEvents
        cntProcessing = cntProcessing + 1
        If InStr(objChart.Name, PREFIX_PIENAME) > 0 Then
            '|fffd|~Chart|fffd||316||fffd||fffd|O|fffd||250||693||fffd||fffd||fffd|PREFIX_PIENAME|fffd||fffd||fffd||702||fffd|
            cntRealProc = cntRealProc + 1
            ActiveSheet.ChartObjects(objChart.Name).Activate
            ActiveChart.SeriesCollection(1).Select
            If showDigitalNowFlag Then
                If cntRealProc Mod 100 = 0 Then
                    Application.StatusBar = (cntRealProc & "/" & Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).ChartObjects.Count - 1) & " " & _
                                         getTrans("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd||fffd|B")
'                   Application.StatusBar = (Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).ChartObjects.Count - 1) & getTrans("|fffd||92||fffd| ") & _
                                        cntRealProc & getTrans("|fffd||516||682||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd||fffd|B")
                End If
                ActiveChart.SeriesCollection(1).ApplyDataLabels AutoText:=True, showValue:=True
                
                With ActiveChart.SeriesCollection(1).DataLabels
                    .Position = xlLabelPositionCenter  'xlLabelPositionInsideEnd 'xlLabelPositionOutsideEnd
                    .Font.Size = labelFontSize
                    .NumberFormat = "#.##"
                End With
                
                numPoints = ActiveChart.SeriesCollection(1).Points.Count
                cntNotZero = 0
                For p = 1 To numPoints
                    With ActiveChart.SeriesCollection(1).Points(p).DataLabel
                        If .Text = "0" Or .Text = "." Then
                            '0|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||202||fffd|
                            .Text = ""
                        Else
                            '|fffd||fffd||fffd||fffd||fffd||fffd|2|fffd||fffd||fffd||602||fffd||302||10a||6c2||7d5|\|fffd||fffd|
                            'Dim showValue
                            showValue = .Text
                            If IsNumeric(showValue) Then
                                showValue = CDbl(showValue)
                                .Text = Application.RoundDown(showValue, 2)
                            End If
                            'ActiveChart.SeriesCollection(1).Points(p).DataLabel.NumberFormat = "##.##"
                            'ActiveChart.SeriesCollection(1).Points(p).DataLabel.Select
                            .Position = xlLabelPositionBestFit
                            With .Font
                                .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                                .FontStyle = "|fffd|W|fffd||fffd|"
                                .Size = labelFontSize
                                .Strikethrough = False
                                .Superscript = False
                                .Subscript = False
                                .OutlineFont = False
                                .Shadow = False
                                .Underline = xlUnderlineStyleNone
                                .ColorIndex = xlAutomatic
                                .Background = xlAutomatic
                            End With
                            cntNotZero = cntNotZero + 1
                        End If
                    End With
                Next p
                If cntNotZero = 1 Or cntNotZero = 2 Then
                    For q = 1 To numPoints
                        ActiveChart.SeriesCollection(1).Points(q).DataLabel.Position = xlLabelPositionInsideEnd
                    Next q
                End If
            Else
                Application.StatusBar = (cntRealProc & "/" & Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).ChartObjects.Count - 1) & " " & _
                                        getTrans("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd||fffd|B")
'                Application.StatusBar = (Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).ChartObjects.Count - 1) & getTrans("|fffd||92||fffd| ") & _
                                        cntRealProc & getTrans("|fffd||516||682||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd||fffd|B")
                ActiveChart.SeriesCollection(1).ApplyDataLabels AutoText:=False, showValue:=False
            End If
        End If
    Next

    Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).Activate
    If showDigitalNowFlag = 1 Then
        range("A1").Value = HYOUJI_STR_NG
        ActiveSheet.Buttons("bntShowDigital").Caption = getTrans("|fffd||fffd|\|fffd||fffd|")
    Else
        range("A1").Value = HYOUJI_STR_OK
        ActiveSheet.Buttons("bntShowDigital").Caption = getTrans("|fffd|\|fffd||fffd|")
    End If
    
    showDigitalNowFlag = IIf(showDigitalNowFlag = 0, 1, 0)
    Application.StatusBar = ""
    Application.ScreenUpdating = saveScreenUpdating
    ActiveSheet.range("A1").Select

End Sub

Sub removeDummyPie(destSheetName As String, d_Name As String)
    
On Error Resume Next
    'lengendSourceData.Clear
    Sheets(destSheetName).ChartObjects(d_Name).Delete

End Sub

Sub makeBubbleMatrix(graphFlag, mode As String)
    '----------------------------------------------------------
    '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||315|`|fffd||fffd||fffd||fffd|s|fffd||fffd|
    ' |fffd||fffd||fffd||fffd||317|L|fffd||fffd||fffd||155|`|fffd||fffd|`|fffd||fffd||fffd|[|fffd|g|fffd||fffd||3cd|X|fffd|B
    ' |fffd||fffd||fffd||fffd||202||fffd||fffd|F|fffd|o|fffd|u|fffd||fffd||fffd|`|fffd||fffd||fffd|[|fffd|g
    ' |fffd||fffd||fffd||c2802||fffd|F|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd||fffd|chartobject|fffd||fffd||fffd||fffd||82||fffd||fffd||92||1c9||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '----------------------------------------------------------
    
    ' |fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||249||fffd||295|\|fffd||fffd||fffd||fffd||fffd|X|fffd|V|fffd||fffd||fffd||202||fffd|
    Application.ScreenUpdating = False
    ' |fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||253||fffd||fffd||fffd||30c|x|fffd||fffd||fffd||20c1||fffd|b|fffd|Z|fffd|[|fffd|W|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
    Application.DisplayAlerts = False
    
    Dim dWB As Workbook
    
    drawMode = mode
    Set dWB = Workbooks(ActiveWorkbook.Name)
    graphKind = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")
    
    'Private|fffd||3d0||fffd||fffd||310||752||fffd|Bbc_params.txt|fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    chartRadius = getParams("chartradius")
    matrixTitle = getParams("title")
    nkeys = getParams("nkeys")
    xAxisNum = getParams("datakey1count")
    maxWidthLegendTitles = MAX_LEGEND_LENGTH
    
    key1title = getParams("key1title")
    key2title = getParams("key2title")
    
    If nkeys = 2 Then
        Call makeBubbleChart2(graphFlag, mode)
    Else    'nkeys = 3
        Call makeBubbleChart3(graphFlag, mode)
    End If

    Application.StatusBar = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||30d||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B")
    graphFlag = True
    
    ' ScreenUpdating|fffd||752||fffd||fffd||7c2||fffd|
    Application.ScreenUpdating = True
    ' DisplayAlerts|fffd||752||fffd||fffd||7c2||fffd|
    Application.DisplayAlerts = True

End Sub

Sub makeBubbleChart2(graphFlag, mode As String)
    
    ' |fffd||fffd||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|p|fffd||252||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    Dim dt_tbl As range
    Set dt_tbl = calcChartData
    ' |fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|
    Call drawBubble(dt_tbl)
    ' |fffd|{|fffd|^|fffd||fffd||fffd||1c9||fffd|
    Call addButtons
    
End Sub

Private Function calcChartData() As range
    Dim datasheet As Worksheet
    Set datasheet = Sheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    
    datasheet.Select
    Selection.Copy
    
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|c|fffd||fffd||fffd||fffd||fffd||fffd||582||fffd||fffd||fffd|
    Dim r_end, c_end As Integer
    r_end = ActiveCell.End(xlDown).Row
    c_end = ActiveCell.End(xlToRight).Column
    
    Cells(r_end + 1, 1).Select
    Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    Application.CutCopyMode = False
    Rows("1:" + CStr(r_end)).Delete Shift:=xlUp
    Columns(2).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    
    ' |fffd|_|fffd|~|fffd|[|fffd||fffd||c42c|
    range("B1").Value = getTrans("|fffd|_|fffd|~|fffd|[")
    range("B2").Value = 10
    If c_end > 2 Then
        range("B2").Copy
        range("B3:B" + CStr(c_end)).Select
        ActiveSheet.Paste
        Application.CutCopyMode = False
    End If
    range("A1").Select
    
    ' |fffd||fffd||fffd||fffd||fffd||682||30c||fffd|_|fffd||251||38a|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"|fffd|f|fffd|[|fffd|^"|fffd|V|fffd|[|fffd|g|fffd||312|l|fffd||fffd||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd|
    If getParams("ext.diag") = True Then
        Dim c, isSame
        For Each c In range(range("c1"), range("C1").End(xlToRight))
            Set isSame = range(range("A2"), range("A2").End(xlDown)).Find(c.Value, Lookat:=xlWhole)
            If Not isSame Is Nothing Then
                Cells(isSame.Row, c.Column).Value = ""
            End If
        Next
        datasheet.range("A1").CurrentRegion.Select
    End If
    
    'chartRadius|fffd||24a||fffd||c2||fffd||fffd|A|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|p|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c42c||fffd|B
    ActiveSheet.Copy Before:=ActiveSheet
    ActiveSheet.Name = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|p|fffd|f|fffd|[|fffd|^")
    '|fffd|f|fffd|[|fffd|^|fffd||151||fffd|l
    Dim dt As range
    Dim max_num As Integer
    Set dt = range("A1").CurrentRegion
    Set dt = dt.Offset(1, 2).Resize(dt.Rows.Count - 1, dt.Columns.Count - 2)
    max_num = Application.WorksheetFunction.max(dt)
    
    Dim r
    For Each r In dt
        If r.Text = "" Then '|fffd||fffd|_
            r.Value = -1
        ElseIf r.Value > 0 Then
            If chartRadius = "num_log" Then     '|fffd|l|fffd||fffd||390||fffd||fffd||255||3cd|X|fffd||fffd||fffd||fffd|
                r.Value = ((Log((r.Value + 1)) + 3) / (Log(max_num + 1) + 3)) * 10
            ElseIf chartRadius = "const" Then   '|fffd|l|fffd||13bd2|l|fffd||255||3cd|X|fffd||fffd||fffd||fffd|
                r.Value = 10
            End If
        End If
    Next
    ActiveSheet.Visible = False
    
    datasheet.range("A1").Select
    
    Set calcChartData = datasheet.range("A1").CurrentRegion
    
End Function

Sub drawBubble(tgt_jitu As range)

    Dim r_end, c_end As Integer
    r_end = tgt_jitu.Rows.Count
    c_end = tgt_jitu.Columns.Count
    
    Dim sc As Series
    Dim dl As DataLabel
    
    Dim tmcolors
    Dim title As String
    Dim titlestr As String
    Dim series_num As Integer
    Dim r, c, i, n, idx As Integer
    tmcolors = Split("189,198,255;88,186,255;0,204,153;102,204,0;153,255,51;255,255,0;255,204,0;255,153,0;255,102,0;255,0,0;204,204,204", ";")
    title = ""
    titlestr = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")
    series_num = c_end - 1
    
    Dim chart1 As Chart
    Set chart1 = Charts.Add
    With chart1
        ' |fffd||fffd||fffd||a0aa||fffd||202||fffd||fffd||fffd|2003|fffd||143|G|fffd||fffd||fffd|[
        .SetSourceData Source:=tgt_jitu
        With .PlotArea
            .Interior.ColorIndex = xlNone
            With .Border
                .color = vbBlack
                .Weight = xlHairline
                .LineStyle = xlContinuous
            End With
        End With
        .Name = titlestr
        If title <= "" Then
            .HasTitle = True
            .ChartTitle.Characters.Text = matrixTitle
        End If
        
        .ChartType = xlBubble
        .HasLegend = False
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Series|fffd||34d||d3dc||fffd||fffd||fffd||110|V|fffd||fffd||fffd||fffd||fffd||fffd||84bc||fffd||fffd|
        For Each sc In .SeriesCollection
            sc.Delete
        Next sc
        
        Dim NS As Series
        Dim xv(), yv(), bs() As String
        ReDim xv(c_end - 2), yv(c_end - 2), bs(c_end - 2)
        For r = 2 To r_end + 1
            Set NS = .SeriesCollection.NewSeries
            With NS
                If r <= r_end Then
                    .Name = tgt_jitu(r, 1)
                    For c = 2 To c_end
                        n = c - 2
                        xv(n) = n
                        yv(n) = r_end + 1 - r
                        bs(n) = Sheets(getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|p|fffd|f|fffd|[|fffd|^")).Cells(r, c)
                    Next
                Else
                    .Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    For c = 2 To c_end
                        n = c - 2
                        xv(n) = n
                        yv(n) = 0
                        bs(n) = 10
                    Next
                End If
                .XValues = "{" & Join(xv, ",") & "}"
                .Values = "{" & Join(yv, ",") & "}"
                .BubbleSizes = "{" & Join(bs, ",") & "}"
                ' |fffd||fffd||fffd||fffd|
                .ApplyDataLabels AutoText:=True, _
                    LegendKey:=False, ShowSeriesName:=False, _
                    ShowCategoryName:=False, showValue:=False, _
                    ShowPercentage:=False, ShowBubbleSize:=True
                '|fffd|o|fffd|u|fffd||fffd||fffd||310|F|fffd|@RGB(75, 178, 197)
                .Format.Fill.ForeColor.RGB = DEFAULT_COLOR
                With .DataLabels
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .ReadingOrder = xlContext
                    .Position = xlLabelPositionCenter
                    .Orientation = xlHorizontal
                End With
            End With
        Next

        '|fffd||fffd||fffd||303|o|fffd|u|fffd||fffd||fffd|\|fffd||fffd||fffd|i|fffd||fffd|_|fffd|\|fffd||fffd||fffd|p|fffd|j
        .ChartGroups(1).ShowNegativeBubbles = True
        '|fffd|\|fffd||fffd||fffd||e3c0||fffd|i|fffd||390||fffd||fffd||30e||fffd||fffd||355||fffd||fffd||fffd||fffd||e3c0||fffd||241|j
        .ChartGroups(1).SizeRepresents = xlSizeIsArea
        If chartRadius = "num_log" Then
            .ChartGroups(1).SizeRepresents = xlSizeIsWidth
        End If
        'Bubble|fffd|\|fffd||fffd||fffd|T|fffd|C|fffd|Y
        Dim rcmax As Integer
        rcmax = 250 / Application.WorksheetFunction.max(Array(r_end - 1, c_end - 2))
        .ChartGroups(1).BubbleScale = rcmax + 3

        
        ' |fffd||fffd||fffd||310||752||fffd|
        With .Axes(xlCategory)
            ' |fffd|l|fffd||fffd||fffd||64fe||fffd||fffd||fffd||113||fffd||fffd||a35e||fffd||fffd|
            .MinimumScale = 0 ' |fffd|_|fffd|~|fffd|[|fffd||142||402||182||8d|s|fffd||fffd||1c9||fffd||fffd||fffd||fffd||102||fffd||fffd||90bd||fffd||fffd|
            .MaximumScale = c_end - 1
            .MinorUnit = 1
            .MajorUnit = 1
            .HasMajorGridlines = True
            .ReversePlotOrder = False
            .ScaleType = xlLinear
            With .TickLabels
                .NumberFormatLocal = " "
            End With
            With .MajorGridlines.Border
                If Application.Version >= 12 Then
                    .color = getExcelRGB(tmcolors(10))
                Else
                    .ColorIndex = 10
                End If
            End With
            
            '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||1c9||fffd|
            If key1title <> "" Then
                .HasTitle = True
                .AxisTitle.Text = key1title
                .AxisTitle.Select  '|fffd||fffd||fffd||302||702||712||1c9||fffd||fffd||fffd||fffd||fffd||181|A|fffd||fffd||fffd||18f|d|fffd||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||302||148||693||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|
              Selection.Top = 480
            End If
            
        End With
        
        With .Axes(xlValue)
            .ReversePlotOrder = False
            .MinimumScale = 0
            .MajorUnit = 1
            .MinorUnit = 1
            .MajorTickMark = xlTickMarkNone
            .HasMajorGridlines = True
            .MaximumScale = r_end
            With .MajorGridlines.Border
                If Application.Version >= 12 Then
                    .color = getExcelRGB(tmcolors(10))
                Else
                    .ColorIndex = 10
                End If
            End With
            ' |fffd|c|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||302||fffd||fffd||7c2||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||93c8||fffd||fffd|
            With .TickLabels
                .Font.color = RGB(0, 204, 255)  '#00ccff
                .NumberFormatLocal = "   "
            End With
            
            '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||1c9||fffd|
            If key2title <> "" Then
                .HasTitle = True
                .AxisTitle.Text = key2title
                .AxisTitle.Select  '|fffd||fffd||fffd||302||702||712||1c9||fffd||fffd||fffd||fffd||fffd||181|A|fffd||fffd||fffd||18f|d|fffd||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||302||148||693||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|
                Selection.Left = 50
            End If
            
        End With
        ' 2003 |fffd||142||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||195|\|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||a0b8||fffd|A|fffd|G|fffd||fffd||fffd|[|fffd||242||202||fffd|
        .PlotVisibleOnly = False
        
        '|fffd|`|fffd||639e||fffd||303||fffd||fffd|x|fffd||fffd||fffd||30a|e|fffd||fffd|T|fffd|C|fffd|Y|fffd||fffd|\|fffd||7cc||fffd||fffd||7c2||102||fffd||fffd||fffd|
        '|fffd||fffd||fffd|A|fffd||fffd||fffd|x|fffd||fffd||fffd||303|t|fffd|H|fffd||fffd||fffd|g
        Dim label_fontsize As Integer
        label_fontsize = 8
        If r_end > 30 Then label_fontsize = 7
        If r_end > 40 Then label_fontsize = 6
        '|fffd||fffd|_|fffd||303|T|fffd|C|fffd|Y
        Dim lbl_h, lbl_w As Double
        lbl_h = 320 / r_end
        lbl_w = 500 / (c_end - 1)
        '2010|fffd||211|O|fffd||fffd|Excel|fffd||142||30c||fffd|_|fffd|`|fffd||fffd|p
        Dim hp_w As Double
        hp_w = 1.53
        If r_end > 30 Then hp_w = 1.225
        If r_end > 40 Then hp_w = 0.92
        Dim crlf_h As Double
        crlf_h = 9.105
        If r_end > 30 Then crlf_h = 7.885
        If r_end > 40 Then crlf_h = 6.66
        '|fffd||fffd|_|fffd||310||fffd||fffd||311||fffd||fffd||fffd||fffd|i|fffd|O|fffd||fffd||fffd|f|fffd||303|||fffd|C|fffd||fffd||fffd|g|fffd||292|u|fffd|j
        Dim gp1, gp2, adj As Double
        gp1 = 0.49
        gp2 = 0.51
        adj = 0
        If r_end > 10 Then adj = 0.01
        If r_end > 20 Then adj = 0.02
        If r_end > 30 Then adj = 0.03
        If r_end > 40 Then adj = 0.04
        gp1 = gp1 - adj
        gp2 = gp2 + adj
        
        For i = 1 To .SeriesCollection.Count
            Set sc = .SeriesCollection(i)
            If sc.Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
                sc.DataLabels.Orientation = xlVertical
                ' |fffd||fffd||509||fffd||fffd||303|V|fffd||fffd||fffd|[|fffd|Y|fffd||242||82||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||30d||fffd||fffd||696||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||90bd||fffd||7c2||250|F|fffd|X|fffd|s|fffd||fffd|
                For idx = 1 To sc.Points.Count
                    With sc.Points(idx)
                        With .DataLabel
                            .ShowSeriesName = True
                            .ShowBubbleSize = False
                            .HorizontalAlignment = xlCenter
                            .ReadingOrder = xlContext
                            .VerticalAlignment = xlTop
                            .Position = xlLabelPositionBelow
                            .Orientation = xlVertical
                            .Font.Size = label_fontsize
                            If Application.Version >= 15 Then
                                .Format.TextFrame2.Orientation = msoTextOrientationVerticalFarEast
                                .Format.TextFrame2.HorizontalAnchor = msoAnchorNone
                                .Format.TextFrame2.VerticalAnchor = msoAnchorTop
                            End If
                            If idx = 1 Then
                                .Text = ""
                            Else
                                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||696||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||242||342||74f|o|fffd||fffd||fffd||302||fffd|h|fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||4ea51||302||fffd|Z|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||202||fffd||fffd||18d||115|`|fffd||639e||fffd||fffd||fffd||fffd||fffd||202||fffd|
                                '|fffd|u|fffd|e|fffd|L|fffd|X|fffd|g|fffd||fffd|}|fffd|`|fffd||fffd||fffd||fffd||342||74f|o|fffd||fffd||fffd||115|\|fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|VBA|fffd||142||310||752||fffd||fffd||fffd|@|fffd||341|H
                                .Text = abbreviateString(tgt_jitu(1, idx + 1), 90, label_fontsize, "vertical")
                            End If
                        End With
                        .Interior.ColorIndex = xlNone
                        .Border.ColorIndex = xlNone
                    End With
                Next idx
            Else    '|fffd|O|fffd||fffd||fffd|t|fffd||30c|n|fffd||fffd|`|fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd|
                For idx = 1 To sc.Points.Count
                    If idx = 1 Then     '|fffd|c|fffd||fffd||fffd||fffd||fffd||696||fffd|
                        With sc.Points(idx)
                            With .DataLabel
                                .ShowSeriesName = True
                                .ShowBubbleSize = False
                                .HorizontalAlignment = xlRight
                                .ReadingOrder = xlContext
                                .Position = xlLabelPositionLeft
                                .Orientation = xlHorizontal
                                .Font.Size = label_fontsize
                                '''.Format.TextFrame2.WordWrap = msoFalse
                                .Text = abbreviateString(tgt_jitu(i + 1, idx), 120, label_fontsize)
                            End With
                            ' |fffd||fffd|\|fffd||fffd|
                            .Border.LineStyle = xlNone
                            .Interior.ColorIndex = xlNone
                        End With
                    Else
                        ' |fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||312||fffd||fffd||fffd||fffd||181|A|fffd||390||fffd||fffd|A|fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||155|`|fffd||60b5||fffd||fffd||fffd||fffd||fffd||355|\|fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||255||3cd|X
                        If val(tgt_jitu(i + 1, idx + 1)) > 0 Then
                            With sc.Points(idx).DataLabel
                                Dim num As Single
                                num = tgt_jitu(i + 1, idx + 1)
                                If num = Int(num) Then
                                    .Text = Format(num, "#,###")
                                ElseIf num >= 100 Then
                                    .Text = Format(Round(num), "#,###")
                                    
                                ElseIf num <= 1# Then
                                    .Text = Format(num, "#,##0.##")
                                    
                                Else
                                    Dim tmp As String
                                    tmp = Format(num, "#,##0.#")
                                    If Right(tmp, 1) = "." Then
                                        .Text = Left(tmp, Len(tmp) - 1)
                                    Else
                                        .Text = tmp
                                    End If
                                End If
                                .Format.TextFrame2.TextRange.Font.Size = label_fontsize
                            End With
                        ElseIf tgt_jitu(i + 1, idx + 1) = "" Then  ' |fffd||fffd|_
                            With sc.Points(idx)
                                '|fffd|o|fffd|u|fffd||fffd||fffd||139d6||fffd||fffd||fffd|
                                .Format.Fill.Transparency = 1
                                .Format.Line.Transparency = 1
                            End With
                            With sc.Points(idx).DataLabel
                                If Application.Version >= 15 Then
                                    .Text = "X"
                                    .Format.TextFrame2.TextRange.Font.Size = 1
                                    '|fffd||fffd||fffd|x|fffd||fffd||fffd||303|e|fffd|L|fffd|X|fffd|g|fffd|}|fffd|[|fffd|W|fffd||fffd||fffd|i|fffd||fffd|_|fffd||310||fffd||fffd|j
                                    .Height = lbl_h
                                    .Width = lbl_w
                                Else
                                    'Excel2010|fffd||211|O|fffd|@|fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||355||3cd|X|fffd||142||fffd||fffd||202||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||16102||7cd||fffd||fffd||fffd||151||389||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd||fffd||fffd||fffd|@|fffd||342||202||fffd||fffd||302||fffd||fffd|I|fffd|H|fffd|j
                                    .Font.Size = label_fontsize - 3
                                    .Text = String(Application.WorksheetFunction.RoundDown(((lbl_h - 3) / crlf_h), 2), vbCrLf) & _
                                            String(Application.WorksheetFunction.RoundDown(((lbl_w - 6) / hp_w), 2), "-")
                                End If
                                '|fffd||fffd||fffd|x|fffd||fffd||fffd||139d6||fffd||fffd||fffd|
                                .Format.TextFrame2.TextRange.Font.Fill.Transparency = 1
                                '|fffd|O|fffd||fffd||fffd|f|fffd||fffd||fffd|g|fffd||fffd||fffd||10e||390||fffd||fffd||fffd|`|fffd||fffd|
                                .Format.Fill.ForeColor.RGB = RGB(255, 255, 255)
                                .Format.Fill.BackColor.RGB = RGB(255, 255, 255)
                                .Format.Fill.TwoColorGradient msoGradientDiagonalDown, 1
                                .Format.Fill.GradientStops(1).Transparency = 1  'ForeColor|fffd||313||fffd||fffd||fffd||fffd|x
                                .Format.Fill.GradientStops(2).Transparency = 1  'BackColor|fffd||313||fffd||fffd||fffd||fffd|x
                                .Format.Fill.GradientStops.Insert RGB(255, 255, 255), gp1, 1
                                .Format.Fill.GradientStops.Insert RGB(0, 0, 0), 0.5, 0
                                .Format.Fill.GradientStops.Insert RGB(255, 255, 255), gp2, 1
                            End With
                        End If
                    End If
                Next idx
            End If
        Next i
    End With
    
    chart1.PlotArea.Select
    With Selection
        .Width = 500
        .Height = 320
        .Top = (ActiveChart.ChartArea.Height - Selection.Height) / 2 - 30 '|fffd|O|fffd||fffd||fffd|t|fffd||308||292|u|fffd||fffd||fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)
        .Left = (ActiveChart.ChartArea.Width - Selection.Width) / 2 + 70 '|fffd|O|fffd||fffd||fffd|t|fffd||308||292|u|fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)
    End With
    
    ' |fffd|f|fffd|[|fffd|^|fffd|V|fffd|[|fffd|g|fffd||30c||fffd||fffd|h|fffd||fffd||fffd||fffd||1c2||fffd|
    Dim out_sh
    Worksheets(getTrans("|fffd|f|fffd|[|fffd|^")).Activate
    Columns(2).Select
    Selection.EntireColumn.Hidden = True
    
    range("C2").Select
    ActiveWindow.FreezePanes = True
    
    range(Cells(1, 3), Cells(1, c_end)).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .Orientation = xlVertical
    End With
    
    Rows(1).RowHeight = 100
    Columns(1).ColumnWidth = 30
    range(Columns(3), Columns(c_end)).ColumnWidth = 4
    range("A1").Select
    
    Sheets(graphKind).Select
    
    
End Sub

Private Sub addButtons()
    '|fffd|p|fffd||a0c2||fffd|[|fffd|h|fffd||fffd||fffd||1c2||fffd||fffd||fffd|
    Dim tr As String
    Dim lang_en As Boolean
    tr = getTrans("|fffd|f|fffd|[|fffd|^")
    lang_en = True
    If tr = "|fffd|f|fffd|[|fffd|^" Then lang_en = False
    
    '|fffd|m|fffd||fffd||fffd|l|fffd||315|\|fffd||fffd||fffd|^|fffd||fffd|\|fffd||fffd||fffd|n|fffd||1c9||fffd|
    Dim btnDatalabel, btnColoring
    Set btnDatalabel = ActiveSheet.Buttons.Add(10, ActiveChart.PlotArea.Top - 15, 100, 15)
    With btnDatalabel
        .Characters.Text = getTrans("|fffd||fffd||fffd|l|fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
        .OnAction = "switchDatalabel"
        .AutoScaleFont = False
        .Locked = True
        '.Name = "btnDatalabel"
        .Font.Size = 9
    End With
    '|fffd|m|fffd|c|fffd||fffd||fffd||310|F|fffd||fffd||fffd||fffd||fffd|n|fffd||1c9||fffd|
    Dim btnlen As Integer
    btnlen = 100
    If lang_en = True Then btnlen = 140
    Set btnColoring = ActiveSheet.Buttons.Add(115, ActiveChart.PlotArea.Top - 15, btnlen, 15)
    With btnColoring
        .Characters.Text = getTrans("|fffd||fffd||fffd||fffd||fffd||310|F|fffd||fffd||fffd||fffd|")
        .OnAction = "switchColoring"
        .AutoScaleFont = False
        .Locked = True
        '.Name = "btnColoring"
        .Font.Size = 9
    End With
End Sub

Private Sub switchDatalabel()
    '|fffd||fffd||fffd|l|fffd||315|\|fffd||fffd||fffd|^|fffd||fffd|\|fffd||fffd|
    Dim r_cnt, c_cnt As Integer
    r_cnt = ActiveChart.SeriesCollection.Count
    c_cnt = ActiveChart.SeriesCollection(1).DataLabels.Count
    
    Dim r, c As Integer
    Dim disp As Boolean
    disp = False
    ' |fffd||fffd||fffd||742||315|\|fffd||fffd||fffd||fffd||502||fffd||fffd|m|fffd|F|fffd|B|fffd|S|fffd||115|\|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||254||fffd|\|fffd||fffd||fffd||242||fffd||fffd||fffd|B|fffd||20a|O|fffd||351|S|fffd|\|fffd||fffd|
    For r = 1 To r_cnt - 1
        For c = 2 To c_cnt
            With ActiveChart.SeriesCollection(r).DataLabels(c)
                If .Format.TextFrame2.TextRange.Font.Fill.Visible = msoFalse Then
                    disp = True
                    Exit For
                End If
            End With
        Next
        If disp = True Then Exit For
    Next
    '|fffd|c|fffd||fffd||fffd||fffd||fffd|A|fffd|_|fffd|~|fffd|[|fffd|s|fffd||fffd|A|fffd||fffd|_|fffd||20a|O|fffd||315|\|fffd||fffd||fffd|^|fffd||fffd|\|fffd||fffd|
    For r = 1 To r_cnt - 1
        For c = 2 To c_cnt
            With ActiveChart.SeriesCollection(r).DataLabels(c)
                If val(.Text) > 0 Then
                    .Format.TextFrame2.TextRange.Font.Fill.Visible = disp
                    If disp = True Then
                        .Format.TextFrame2.TextRange.Font.Fill.ForeColor.ObjectThemeColor = msoThemeColorText1
                    End If
                End If
            End With
        Next
    Next

End Sub

Private Sub switchColoring()
    ' |fffd||fffd||fffd||fffd||fffd||310|F|fffd||fffd||fffd||fffd|
    Dim r_cnt, c_cnt As Integer
    r_cnt = ActiveChart.SeriesCollection.Count
    c_cnt = ActiveChart.SeriesCollection(1).DataLabels.Count
    
    ' |fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||310|F
    If Len(Trim(Join(pieColors))) = 0 Then
        ReDim pieColors(9)
        pieColors(0) = RGB(211, 143, 144)
        pieColors(1) = RGB(220, 171, 128)
        pieColors(2) = RGB(187, 200, 128)
        pieColors(3) = RGB(126, 168, 203)
        pieColors(4) = RGB(149, 141, 180)
        pieColors(5) = RGB(205, 151, 177)
        pieColors(6) = RGB(242, 211, 121)
        pieColors(7) = RGB(167, 208, 210)
        pieColors(8) = RGB(133, 152, 195)
        pieColors(9) = RGB(161, 162, 206)
    End If
    
    Dim r, c As Integer
    Dim defcol As Boolean
    Dim val
    defcol = False
    ' |fffd||fffd||fffd||742||315|\|fffd||fffd||fffd||fffd||502||fffd||fffd|m|fffd|F|fffd|B|fffd|S|fffd||103|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|F|fffd||30e||fffd||fffd||24e||fffd||fffd||fffd||fffd|z|fffd|F|fffd||242||fffd||fffd||fffd|B
    For r = 1 To r_cnt - 1
        For c = 2 To c_cnt
            With ActiveChart.SeriesCollection(r).Points(c)
                val = .DataLabel.Text
                If IsNumeric(val) And val > 0 And .Format.Fill.ForeColor.RGB <> DEFAULT_COLOR Then
                    defcol = True
                    Exit For
                End If
            End With
        Next
        If defcol = True Then Exit For
    Next
    '|fffd|c|fffd||fffd||fffd||fffd||fffd|A|fffd|_|fffd|~|fffd|[|fffd|s|fffd||fffd||20a|O|fffd||310|F|fffd||3cd|X
    For r = 1 To r_cnt - 1
        For c = 2 To c_cnt
        With ActiveChart.SeriesCollection(r).Points(c)
            val = .DataLabel.Text
            If IsNumeric(val) And val > 0 Then
                If defcol = True Then
                    .Format.Fill.ForeColor.RGB = DEFAULT_COLOR
                Else
                    .Interior.color = CLng(pieColors(r Mod 10))
                End If
            End If
        End With
        Next
    Next
    
End Sub

Private Function abbreviateString(str As String, maxlen As Integer, fsize As Integer, Optional txtorientation As String = "horizontal") As String
    '----------------------------------------------------------
    '|fffd||fffd||fffd||696||fffd||fffd||30f||217||fffd|
    'msoAutoSizeTextToFitShape|fffd||fffd||fffd|g|fffd||fffd||fffd||181|A|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||113|x|fffd|J|fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd||fffd||fffd||90bd||fffd||7d5||fffd||fffd||fffd||fffd||4ea51||302||fffd|Z|fffd||7c2||243|J|fffd|b|fffd|g
    'Excel2007, 2010|fffd||fffd||fffd||183||fffd||fffd|x|fffd||fffd||fffd||fffd|TextFrame2|fffd||48f|W|fffd|s|fffd||81|B|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||fffd||fffd||fffd||fffd||242||202||fffd||302||14d|X|fffd||252|Z|fffd||fffd||fffd||fffd||fffd||fffd|B
    '----------------------------------------------------------
    Dim i, times, slen As Integer
    Dim abbr, c As String
    slen = 0
    abbr = ""
    abbreviateString = str
    For i = 1 To Len(str)
        times = 1
        c = Mid(str, i, 1)
        If Len(c) = LenB(StrConv(c, vbFromUnicode)) Then    '|fffd||fffd||fffd|p|fffd||302||182||fffd|
            times = 0.5
            If Application.Version < 15 And txtorientation = "vertical" Then    '2010|fffd||211|O|fffd||14f|c|fffd||fffd||fffd||fffd|
                times = 1.5
            End If
        End If
        slen = slen + (fsize * times)
        abbr = abbr + c
        If slen > maxlen Then
           abbreviateString = abbr + "|fffd|c"
           Exit Function
        End If
    Next
End Function

Sub makeBubbleChart3(graphFlag, mode As String)
    '|fffd||14f|I|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|p|fffd|V|fffd|[|fffd|g|fffd||1c9||fffd|
    Sheets.Add
    ActiveSheet.Name = graphKind
    ActiveWindow.Zoom = 100
    ActiveWindow.DisplayGridlines = False
    
    ' |fffd|~|fffd||30d||151||fffd|T|fffd|C|fffd|Y|fffd||fffd||752||fffd|
    maxRadius = 70
    If chartRadius = "num_log" Then
        maxRadius = 94
    End If
    ' |fffd|f|fffd|[|fffd|^|fffd||64fe| -> radiusMax , radiuslist |fffd||fffd||fffd||315||3d0||fffd||fffd||252|l|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|
    Call getInfoFromInputSheet(getTrans("|fffd|f|fffd|[|fffd|^"))
    ' |fffd|`|fffd||fffd||348||342||303|Z|fffd||fffd||fffd||10b82||fffd||fffd||fffd| -> pieWidth, pieHeight|fffd||343||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||64ea||fffd||150||933e||fffd||fffd||fffd||102||fffd||fffd||fffd|
    Call setCanvusSize(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), xAxisNum, srcColumnMax - IIf(nkeys = 3, 2, 1), 94, 15)
    ' |fffd|r|fffd||fffd|
    Call drawCenterLines(xAxisNum, srcColumnMax - IIf(nkeys = 3, 2, 1))
    
    Call writeLabels(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), getTrans("|fffd|f|fffd|[|fffd|^"))
    
'    If nkeys = 3 Then
        If Application.Version < 12 Then
            'Excel2003|fffd||30f||a347|
            Application.ScreenUpdating = True
            Call drawLegend(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), 3, xAxisNum + 4, "ShowLegendOnly", pieColors)
            Call drawDummyPie(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), 2, xAxisNum + 7, DUMMY_PIE, pieColors)
            Call drawMatrixPies(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), getTrans("|fffd|f|fffd|[|fffd|^"))
            Call removeDummyPie(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), DUMMY_PIE)
        Else
            'Excel2007|fffd||20d|~|fffd||30f||a347|
            Application.ScreenUpdating = False
            Call drawLegend12(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), 3, xAxisNum + 4, "ShowLegendOnly", pieColors)
            Call drawMatrixPies(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), getTrans("|fffd|f|fffd|[|fffd|^"))
        End If
        
'    ElseIf nkeys = 2 Then
'        If Application.Version < 12 Then
'            'Excel2003|fffd||30f||a347|
'            Application.ScreenUpdating = True
'            Call drawDummyPie(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), 2, xAxisNum + 7, DUMMY_PIE, pieColors)
'            Application.ScreenUpdating = True
'            Call drawMatrixPiesWithoutCut(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), getTrans("|fffd|f|fffd|[|fffd|^"))
'            Call removeDummyPie(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), DUMMY_PIE)
'        Else
'            'Excel2007|fffd||20d|~|fffd||30f||a347|
'            Application.ScreenUpdating = False
'            Call drawMatrixPiesWithoutCut(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X"), getTrans("|fffd|f|fffd|[|fffd|^"))
'            lengendSourceData.Clear
'        End If
'    End If
    
    showDigitalNowFlag = 1
    
    Call makeActionButtonLine
    If drawMode = "standard" Then
        Call makeChartComboBox
    End If
    
    '|fffd|r|fffd||fffd||fffd|A|fffd|O|fffd||fffd||fffd|t|fffd||303|v|fffd||fffd||fffd|p|fffd|e|fffd|B|fffd||fffd||fffd||693||fffd||fffd||302||742||255||3cd|X
    Dim obj As Shape
    For Each obj In ActiveSheet.Shapes
        If obj.Type = msoLine Or obj.Type = msoChart Then
            obj.Placement = xlMove
        End If
    Next
    
    'Application.StatusBar = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||30d||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B")
    ActiveSheet.range("A1").Select
    'graphFlag = True
    
End Sub

Private Sub makeActionButtonLine()
    readTrans ("data\bc_trans.txt")
    HYOUJI_STR_OK = getTrans("|fffd||fffd||fffd||fffd||312|l|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B")
    HYOUJI_STR_NG = getTrans("|fffd||fffd||fffd||fffd||312|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||349|E|fffd||fffd||fffd||301|u|fffd||fffd|\|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B")
    
    Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).Activate
    
    range("A1").EntireRow.Select
    Selection.Insert Shift:=xlDown
    Selection.RowHeight = 20.25
    range("A1:E1").Select
    With Selection
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    
    range("A1").Value = IIf(showDigitalNowFlag = 1, HYOUJI_STR_OK, HYOUJI_STR_NG)
    With ActiveSheet.Buttons.Add(range("F1").Left + 4, _
                                 range("F1").Top + 5, _
                                 40, 15)
        .OnAction = "switchPiesLabels"
        .Characters.Text = IIf(showDigitalNowFlag = 1, getTrans("|fffd|\|fffd||fffd|"), getTrans("|fffd||fffd|\|fffd||fffd|"))
        .Name = "bntShowDigital"
        .AutoSize = True
        With .Font
            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
            .FontStyle = "|fffd|W|fffd||fffd|"
            .Size = 8
        End With
    End With
   
End Sub

Private Sub drawDummyPie(destSheetName As String, _
                         d_insertX As Integer, _
                         d_insertY As Integer, _
                         d_Name As String, _
                         pieColors)
    '==========================================
    '  Call drawDummyPie("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X", 2, 4, "graph2", pieColors)
    'Input:
    '   destSheetName: |fffd||c42c||fffd|V|fffd|[|fffd|g|fffd||fffd|
    '   d_insertX,d_insertY: |fffd||c42c||fffd|_|fffd|~|fffd|[|fffd|~|fffd||fffd|Cell|fffd||292|u
    '   d_name: |fffd|_|fffd|~|fffd|[|fffd|~|fffd||256||fffd||fffd|O
    '   pieColors(): |fffd||fffd||fffd||fffd||fffd|~|fffd||310|F|fffd||fffd||fffd||fffd||fffd|p|fffd|J|fffd||fffd||fffd|[|fffd||fffd||fffd|X|fffd|g

    
    Sheets("|fffd|f|fffd|[|fffd|^").Select
    Dim dummyCircle As Chart
    Set dummyCircle = Charts.Add
    
    With dummyCircle
        .ChartType = xlPie
        .SetSourceData Source:=lengendSourceData, PlotBy:=xlColumns
        .HasLegend = True
        .PlotArea.Interior.color = RGB(255, 255, 255)
        If nkeys = 2 Then
            .ChartGroups(1).FirstSliceAngle = 180
        End If
    End With
    
    dummyCircle.Legend.Select
    Selection.Delete
    
    '|fffd|~|fffd||315||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
    Dim i As Integer
    
    For i = 1 To dummyCircle.SeriesCollection(1).Points.Count
        With dummyCircle.SeriesCollection(1)
            .Points(i).Select
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlNone 'xlAutomatic
            End With
            Selection.Shadow = True
            With Selection.Interior
                If gItemColorIndex(i - 1) > 0 Then
                    If i > 55 Then .ColorIndex = 0
                    .ColorIndex = gItemColorIndex(i - 1)
                End If
                .Pattern = xlSolid
            End With
        End With
    Next
    
    ActiveChart.Location Where:=xlLocationAsObject, Name:=destSheetName
    ActiveChart.Parent.Name = d_Name

    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SeriesCollection(1).ApplyDataLabels AutoText:=False, showValue:=False
    
    ActiveChart.ChartArea.Select
    With Selection.Border
        .LineStyle = xlNone
    End With
    Selection.Interior.ColorIndex = xlNone
    
    Selection.AutoScaleFont = False
    
    Sheets(destSheetName).Select
    
    Dim cellWidth As Double
    Dim cellHeight As Double
    Dim thisRange As range
    Set thisRange = range(Sheets(destSheetName).Cells(d_insertX, d_insertY), _
                          Sheets(destSheetName).Cells(d_insertX, d_insertY))
    thisRange.Select
    cellWidth = thisRange.Width
    cellHeight = thisRange.Height
    
    ActiveSheet.Shapes(d_Name).Top = thisRange.Top
    ActiveSheet.Shapes(d_Name).Left = thisRange.Left
    
    ActiveSheet.Shapes(d_Name).Width = cellWidth
    ActiveSheet.Shapes(d_Name).Height = cellHeight
    

End Sub

Sub drawPie(destSheetName As String, _
            d_range() As String, _
            d_Name As String, _
            d_DataSrcRange As range, _
            pieColors(), _
            d_radius As Double)
    '==========================================
    '  Call drawPie("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X", d_Range, "graph2", "B26:B31,D26:D31")
    'Input:
    '   destSheetName: |fffd||c42c||fffd|V|fffd|[|fffd|g|fffd||fffd|
    '   d_range: |fffd||c42c||fffd||fffd||fffd||fffd||fffd|~|fffd||fffd|Cell|fffd||292|u
    '   d_name: |fffd||fffd||fffd||fffd||fffd|~|fffd||256||fffd||fffd|O
    '   d_DataSrcRange: |fffd||fffd||fffd||fffd||fffd|~|fffd||303|f|fffd|[|fffd|^Source|fffd||292|u
    '   pieColors(): |fffd||fffd||fffd||fffd||fffd|~|fffd||310|F|fffd||fffd||fffd||fffd||fffd|p|fffd|J|fffd||fffd||fffd|[
    '   d_radius: |fffd||fffd||fffd||fffd||fffd|~|fffd||314||fffd||fffd|a(PlotArea.width and PlotArea.height)

    Dim baseRange As range
    
    Sheets(destSheetName).Select
    Set baseRange = ActiveSheet.range("B2")
    
    Dim thisRange As range
    Dim cellWidth As Double
    Dim cellHeight As Double
    
    Set thisRange = range(d_range(1) & "" & d_range(0))
    thisRange.Select
    cellWidth = thisRange.Width
    cellHeight = thisRange.Height
    
    ' |fffd|R|fffd|s|fffd|[|fffd|p|fffd||303|_|fffd|~|fffd|[|fffd||309|~|fffd||fffd|\|fffd||7cd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd|R|fffd|s|fffd|y|fffd||fffd||fffd||109|~|fffd||fffd||fffd||290||fffd||fffd|Y|fffd||fffd||fffd||102||fffd||fffd||fffd|
    'excel2003|fffd||30f||a347||fffd||fffd||fffd||a0aa||fffd||151||fffd||fffd||182||30e||fffd||fffd||142||fffd||fffd|B
    ActiveSheet.ChartObjects(DUMMY_PIE).Activate
    ActiveChart.ChartArea.Select
    ActiveChart.ChartArea.Copy
    
    Set thisRange = range(d_range(1) & "" & d_range(0))
    thisRange.Select
    cellWidth = thisRange.Width
    cellHeight = thisRange.Height
    ActiveSheet.Paste
    
    ' |fffd||fffd|x|fffd||fffd||502||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||60a4||fffd||20b|C|fffd||fffd||fffd||fffd||fffd||fffd|
    'ActiveChart.Location Where:=xlLocationAsObject, Name:=destSheetName
    ActiveChart.Parent.Name = d_Name
    ActiveChart.SetSourceData Source:=d_DataSrcRange, PlotBy:=xlColumns
    Dim graphTop As Double, graphLeft As Double
    
    graphTop = thisRange.Top - 45
    graphLeft = thisRange.Left - 45
    cellWidth = cellWidth + 90
    cellHeight = cellHeight + 90
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd||fffd|d|fffd||202||fffd||60a4||fffd||24d||5cd|H
    If chartRadius = "num_log" Then
        d_radius = d_radius + 8
    End If
    
    With ActiveSheet.Shapes(d_Name)
        'If drawMode = "_standard" Then
        '    .Top = baseRange.Top
        '    .Left = baseRange.Left
        '    .Width = graphAreaWidth
        '    .Height = graphAreaHeight
        'Else
            .Top = graphTop
            .Left = graphLeft
            .Width = cellWidth
            .Height = cellHeight
        'End If
    End With

    Dim circleTop As Integer
    Dim circleLeft As Integer

    circleTop = Application.RoundDown((cellWidth - d_radius) / 2, 0) - RADIUS_ALPHA
    circleLeft = Application.RoundDown((cellWidth - d_radius) / 2, 0) - RADIUS_ALPHA

    '|fffd|~|fffd||312|u|fffd||fffd||fffd||292|u|fffd||191||50ab||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ActiveChart.PlotArea.Select
    With ActiveChart.PlotArea
        .Border.LineStyle = xlNone
        .Interior.ColorIndex = xlNone
        .Width = 10
        .Height = 10
        'If drawMode = "_standard" Then
        '    .Top = thisRange.Top + circleTop - baseRange.Top
        '    .Left = thisRange.Left + circleLeft - baseRange.Left
        'Else
            .Top = circleTop
            .Left = circleLeft
        'End If
        .Width = d_radius
        .Height = d_radius
    End With
    
    ' Call ClearClipboard
    'ActiveChart.FullSeriesCollection(1).Format.Shadow.Type = msoShadow23
End Sub

Sub drawPie12(destSheetName As String, _
            d_range() As String, _
            d_Name As String, _
            d_DataSrcRange As range, _
            pieColors(), _
            d_radius As Double)
    '==========================================
    '  Call drawPie12("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X", d_Range, "graph2", "B26:B31,D26:D31")
    'Input:
    '   destSheetName: |fffd||c42c||fffd|V|fffd|[|fffd|g|fffd||fffd|
    '   d_range: |fffd||c42c||fffd||fffd||fffd||fffd||fffd|~|fffd||fffd|Cell|fffd||292|u
    '   d_name: |fffd||fffd||fffd||fffd||fffd|~|fffd||256||fffd||fffd|O
    '   d_DataSrcRange: |fffd||fffd||fffd||fffd||fffd|~|fffd||303|f|fffd|[|fffd|^Source|fffd||292|u
    '   pieColors(): |fffd||fffd||fffd||fffd||fffd|~|fffd||310|F|fffd||fffd||fffd||fffd||fffd|p|fffd|J|fffd||fffd||fffd|[
    '   d_radius: |fffd||fffd||fffd||fffd||fffd|~|fffd||314||fffd||fffd|a(PlotArea.width and PlotArea.height)

    Dim strColors As Variant
    strColors = Split(getParams("colors"), ";")
    
    Dim baseRange As range
    'Sheets(destSheetName).Select
    Set baseRange = Sheets(destSheetName).range("B2")
    
    Dim thisRange As range
    Dim cellWidth As Double
    Dim cellHeight As Double
    
    Set thisRange = range(d_range(1) & "" & d_range(0))
    cellWidth = thisRange.Width
    cellHeight = thisRange.Height
    
    Dim graphTop As Double, graphLeft As Double
    ' |fffd|~|fffd||311||50ab||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||103|O|fffd||fffd||fffd|t|fffd||fffd||fffd||327a||fffd||fffd||fffd|E|fffd||242||342||74f|o|fffd||fffd||fffd||fffd||fffd||90a9||fffd||fffd||fffd||fffd||fffd||7c2||fffd|
    'If chartRadius = "num" Then
        graphTop = thisRange.Top - 60
        graphLeft = thisRange.Left - 60
        cellWidth = cellWidth + 120
        cellHeight = cellHeight + 120
        If chartRadius = "num_log" Then
            d_radius = d_radius + 8
        End If
    'Else
    '    graphTop = thisRange.Top
    '    graphLeft = thisRange.Left
    'End If
    
    Sheets(destSheetName).Select
    'Charts.Add
    Dim piechart As Shape
    Set piechart = ActiveSheet.Shapes.AddChart(xlPie)
    'ActiveChart.ChartType = xlPie
    piechart.Select
    With ActiveChart
        .SetSourceData Source:=d_DataSrcRange, PlotBy:=xlColumns
        .Legend.Delete
    End With
    
    'ActiveChart.Location Where:=xlLocationAsObject, Name:=destSheetName
    ActiveChart.Parent.Name = d_Name
    '|fffd|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd|z|fffd|u
    With piechart
        ' |fffd||fffd||fffd||30f||a347||fffd||34e|g|fffd|p|fffd||fffd||fffd||fffd|c|fffd||fffd||fffd||fffd|cell|fffd|S|fffd||302||15882||fffd||fffd||60a4||fffd||211||50ab||fffd||fffd||fffd||143|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd|
        'If drawMode = "_standard" Then
        '    .Top = baseRange.Top
        '    .Left = baseRange.Left
        '    .Width = graphAreaWidth
        '    .Height = graphAreaHeight
        'Else
            .Top = graphTop
            .Left = graphLeft
            .Width = cellWidth
            .Height = cellHeight
        'End If
    End With
    
    'ActiveChart.ChartArea.Select
    With ActiveChart.ChartArea
        .Border.LineStyle = xlNone
        .Interior.ColorIndex = xlNone
    End With
    
    '|fffd|~|fffd||315||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
    Dim i As Integer

    For i = 1 To ActiveChart.SeriesCollection(1).Points.Count
        'ActiveChart.SeriesCollection(1).Points(i).Select
        With ActiveChart.SeriesCollection(1).Points(i)
            With .Border
                .Weight = xlThin
                .LineStyle = xlAutomatic
            End With
            .Shadow = False
            With .Interior
                .color = getExcelRGB(strColors(i - 1))
                .Pattern = xlSolid
            End With
        End With
    Next
    
    Dim circleTop As Integer
    Dim circleLeft As Integer
    
    circleTop = Application.RoundDown((cellWidth - d_radius) / 2, 0) - RADIUS_ALPHA12
    circleLeft = Application.RoundDown((cellWidth - d_radius) / 2, 0) - RADIUS_ALPHA12
    '|fffd|~|fffd||312|u|fffd||fffd||fffd||292|u|fffd||191||50ab||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With ActiveChart.PlotArea
        .Border.LineStyle = xlNone
        .Interior.ColorIndex = xlNone
        '
        .Width = 10
        .Height = 10
        
        If drawMode = "_standard" Then
            .Top = thisRange.Top + circleTop - baseRange.Top
            .Left = thisRange.Left + circleLeft - baseRange.Left
        Else
            .Top = circleTop
            .Left = circleLeft
        End If
        
        .Top = circleTop
        .Left = circleLeft
        .Width = d_radius
        .Height = d_radius

    End With
    ActiveChart.SeriesCollection(1).Format.Shadow.Type = msoShadow23
End Sub

#If VBA7 Then
#Else
Sub setCurrentColors(dWB As Workbook)
    Dim strColors As String
    Dim aryColors As Variant
    Dim i As Integer, cnt As Integer
    
    strColors = getParams("colors")
    aryColors = Split(strColors, ";")
    cnt = UBound(aryColors)
    ReDim pieColors(cnt)
    
    'ColorIndex1|fffd|`8|fffd|i|fffd||fffd|,|fffd||fffd|,|fffd||fffd|,|fffd||fffd|,|fffd||fffd|,|fffd|C|fffd|G|fffd||fffd||fffd|[,|fffd|}|fffd|[|fffd||fffd||fffd|_,|fffd|V|fffd|A|fffd||fffd||fffd|j|fffd||355||3cd|X|fffd||fffd||fffd||202||fffd|
    For i = 0 To IIf(cnt <= COLOR_INDEX_BASE - 8, cnt, COLORINDEX_BASE - 8)
        Dim oneRgb As Variant
        oneRgb = Split(aryColors(i), ",")
        dWB.Colors(COLOR_INDEX_BASE - i) = RGB(oneRgb(0), oneRgb(1), oneRgb(2))
        pieColors(i) = COLOR_INDEX_BASE - i
    Next i
    
End Sub
#End If

Sub drawMatrixPies(destSheetName As String, srcSheetName As String)
    Dim ratio As Double '|fffd|`|fffd||fffd|~|fffd||314||fffd||fffd|a
    Dim c, r, idxRowCol, tmp, i
    Dim srcDataRange As range
    Dim drawRow, drawCol As Integer
    Dim drawRange(3) As String
    Dim last_time As Single
    Dim now_time As Single
    
    Sheets(destSheetName).Select
    DoEvents
    last_time = Timer
    idxRowCol = 0
    drawCol = 3
    For r = 2 To srcRowMax Step rowStep
        drawCol = drawCol + 1
        drawRow = 2
        For c = 3 To srcColumnMax
            idxRowCol = idxRowCol + 1
            drawRow = drawRow + 1
            If radiusList(idxRowCol) > 0 Then
                If chartRadius = "num_log" Then
                    ratio = (Log((radiusList(idxRowCol) + 1)) + 3) / (Log(radiusMax + 1) + 3)
                ElseIf chartRadius = "num" Then
                    ' ratio = 0.3 + 0.7 * radiusList(idxRowCol) / radiusMax
                    ratio = Sqr(radiusList(idxRowCol) / radiusMax)
                Else
                    ratio = 1
                End If

                Set srcDataRange = Union(Sheets(srcSheetName).range( _
                                           Sheets(srcSheetName).Cells(r, 2), _
                                           Sheets(srcSheetName).Cells(r + rowStep - 1, 2)), _
                                     Sheets(srcSheetName).range( _
                                           Sheets(srcSheetName).Cells(r, c), _
                                           Sheets(srcSheetName).Cells(r + rowStep - 1, c)))

                tmp = Split(Sheets(destSheetName).Cells(drawRow, drawCol).Address(True, False), "$")
                
                drawRange(0) = tmp(1)
                drawRange(1) = tmp(0)
                If Application.Version >= 12 Then
                    Call drawPie12(destSheetName, drawRange, PREFIX_PIENAME & ConvertToLetter(drawCol) & drawRow + 1, srcDataRange, pieColors, ratio * maxRadius)
                Else
                    Call drawPie(destSheetName, drawRange, PREFIX_PIENAME & ConvertToLetter(drawCol) & drawRow + 1, srcDataRange, pieColors, ratio * maxRadius)
                End If
            End If
            now_time = Timer
            If now_time - last_time > 0.2 Then
                Application.StatusBar = idxRowCol & "/" & xAxisNum * (srcColumnMax - 2) & " " & getTrans("|fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B")
'                Application.StatusBar = xAxisNum * (srcColumnMax - 2) & getTrans("|fffd||89|~|fffd|O|fffd||fffd||fffd|t|fffd||fffd| ") & idxRowCol & getTrans("|fffd||516||682||fffd||fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B")
                DoEvents
                last_time = now_time
            End If
        Next c
    Next r
    '|fffd|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd||314|z|fffd|u
    For i = ActiveSheet.Shapes.Count To 1 Step -1
        If ActiveSheet.Shapes(i).Type = msoChart And InStr(ActiveSheet.Shapes(i).Name, PREFIX_PIENAME) > 0 Then
            ActiveSheet.Shapes(i).ZOrder msoBringToFront
        End If
    Next

    Application.StatusBar = getTrans("|fffd|O|fffd||fffd||fffd|t|fffd||30d||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B")
    DoEvents
End Sub

Sub drawMatrixPiesWithoutCut(destSheetName As String, srcSheetName As String)
    Dim ratio As Double '|fffd|`|fffd||fffd|~|fffd||314||fffd||fffd|a
    Dim c, r, idxRowCol, tmp
    Dim srcDataRange As range
    Dim drawRow, drawCol As Integer
    Dim drawRange(3) As String

    Sheets(destSheetName).Select
    idxRowCol = 0
    drawCol = 3
    For r = 2 To srcRowMax
        drawCol = drawCol + 1
        drawRow = 2
        For c = 2 To srcColumnMax
            DoEvents
            idxRowCol = idxRowCol + 1
            drawRow = drawRow + 1
            If Sheets(srcSheetName).Cells(r, c).Value > 0 Then
                If chartRadius = "num_log" Then
                    ratio = (Log((radiusList(idxRowCol) + 1)) + 3) / (Log(radiusMax + 1) + 3)
                ElseIf chartRadius = "num" Then
                ' ratio = 0.3 + 0.7 * Sheets(srcSheetName).Cells(r, c).Value / radiusMax
                    ratio = Sqr(Sheets(srcSheetName).Cells(r, c).Value / radiusMax)
                Else
                    ratio = 1
                End If
                Set srcDataRange = Sheets(srcSheetName).range( _
                                           Sheets(srcSheetName).Cells(r, c), _
                                           Sheets(srcSheetName).Cells(r, c))
                tmp = Split(Sheets(destSheetName).Cells(drawRow, drawCol).Address(True, False), "$")
                drawRange(0) = tmp(1)
                drawRange(1) = tmp(0)
                If Application.Version >= 12 Then
                    Call drawPie12(destSheetName, drawRange, PREFIX_PIENAME & ConvertToLetter(drawCol) & drawRow + 1, srcDataRange, pieColors, ratio * maxRadius)
                Else
                    Call drawPie(destSheetName, drawRange, PREFIX_PIENAME & ConvertToLetter(drawCol) & drawRow + 1, srcDataRange, pieColors, ratio * maxRadius)
                End If
            End If
            Application.StatusBar = idxRowCol & "/" & xAxisNum * (srcColumnMax - 1) & " " & getTrans("|fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B")
'            Application.StatusBar = xAxisNum * (srcColumnMax - 1) & getTrans("|fffd||89|~|fffd|O|fffd||fffd||fffd|t|fffd||fffd| ") & idxRowCol & getTrans("|fffd||516||682||fffd||fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B")
        Next c
    Next r
End Sub

Sub getInfoFromInputSheet(destSheetName As String)
    '----------------------------------------------------------
    ' |fffd||fffd||fffd||342||182||202||fffd|u|fffd|f|fffd|[|fffd|^|fffd|v|fffd|V|fffd|[|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||24a||582||fffd||fffd||fffd||fffd||fffd||30d||c42c|
    '----------------------------------------------------------
    
    Sheets(destSheetName).Select

    '|fffd||fffd||fffd|Y|fffd|f|fffd|[|fffd|^|fffd||fffd|bc_params.txt|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||24d||682||fffd||fffd||102||fffd||fffd||fffd||70b5||fffd||fffd|
    srcRowMax = Cells(ActiveSheet.Rows.Count, 1).End(xlUp).Row
    srcColumnMax = Cells(1, ActiveSheet.Columns.Count).End(xlToLeft).Column
    Dim i, j, idx
    If nkeys < 3 Then
        xAxisNum = srcRowMax - 1
        idx = 0
        ReDim radiusList(srcRowMax * srcColumnMax) As Double
        '|fffd|~|fffd||fffd||fffd|a|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd||5c1|A|fffd|f|fffd|[|fffd|^|fffd||30d||151||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd|
        'radiusMax = Application.WorksheetFunction.Max(Range(Cells(2, 2), Cells(7, 11)))
        For i = 2 To srcRowMax
           For j = 2 To srcColumnMax
               idx = idx + 1
               radiusList(idx) = Cells(i, j)
           Next
        Next
        
        radiusMax = Application.WorksheetFunction.max(range(Cells(2, 2), Cells(srcRowMax, srcColumnMax)))
        '|fffd|_|fffd|~|fffd|[|fffd|~|fffd||308||5c2||303|f|fffd|[|fffd|^|fffd||fffd||fffd||c42c|
        Cells(xAxisNum + 1, srcColumnMax + 2) = 100
        Set lengendSourceData = range(Cells(xAxisNum + 1, srcColumnMax + 2), Cells(xAxisNum + 1, srcColumnMax + 2))
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd|a|fffd||30c|v|fffd|Z|fffd||fffd||fffd||fffd|
    '=====================================================
    ' |fffd|~|fffd||314||fffd||fffd|a(|fffd||45e6|)|fffd|l|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd||5c2||308||a39e|Buffer|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c42c|
    '
    '|fffd|e|fffd||fffd||fffd||fffd||fffd|~|fffd||314||fffd||fffd|a(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||696||fffd||fffd||30f|c|fffd||fffd||fffd||fffd|Cell|fffd||30d||fffd||fffd|v)|fffd||fffd||fffd|v|fffd|Z|fffd||fffd|
    '|fffd||fffd||fffd|Y|fffd|V|fffd|[|fffd|g|fffd||313|K|fffd|x|fffd||308||292|u|fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd|
    ' Range(Cells(srcColumnMax + 2, 0),
    '       Cells(2*srcColumnMax, |fffd||fffd||fffd||fffd||fffd||310||fffd|+2))
    '|fffd||248||a39e||fffd||6d1||fffd|
    '=====================================================
'    Dim r, c, chk_r
'    Dim labelRow
'
'    xAxisNum = 0
'    For r = 2 To srcRowMax
'        labelRow = Cells(r, 1)
'        Columns(srcColumnMax + 2).Select
'        Set chk_r = Selection.Find(what:=labelRow, LookAt:=xlWhole)
'        If chk_r Is Nothing Then
'            xAxisNum = xAxisNum + 1
'            Cells(xAxisNum, srcColumnMax + 2) = labelRow
'            For c = 3 To srcColumnMax
'                Cells(xAxisNum, srcColumnMax + c) = Cells(xAxisNum, srcColumnMax + c) + Cells(r, c)
'            Next c
'        Else
'            For c = 3 To srcColumnMax
'                Cells(xAxisNum, srcColumnMax + c) = Cells(xAxisNum, srcColumnMax + c) + Cells(r, c)
'            Next c
'        End If
'    Next r
    
    '=====================================================
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||30a9||fffd||fffd|~|fffd||fffd||fffd||fffd||fffd||302||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd|For Loop |fffd||fffd|Step|fffd||fffd||fffd|m|fffd||80b7||fffd||fffd|
    '=====================================================
    
    rowStep = IIf(xAxisNum >= 1, (srcRowMax - 1) / xAxisNum, 1)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd|a|fffd||30c|v|fffd|Z|fffd||fffd||fffd||fffd|
    '=====================================================
    ' |fffd|~|fffd||314||fffd||fffd|a(|fffd||45e6|)|fffd|l|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd||5c2||308||a39e|Buffer|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c42c|
    '
    '|fffd|e|fffd||fffd||fffd||fffd||fffd|~|fffd||314||fffd||fffd|a(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||696||fffd||fffd||30f|c|fffd||fffd||fffd||fffd|Cell|fffd||30d||fffd||fffd|v)|fffd||fffd||fffd|v|fffd|Z|fffd||fffd|
    '|fffd||fffd||fffd|Y|fffd|V|fffd|[|fffd|g|fffd||313|K|fffd|x|fffd||308||292|u|fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd|
    ' Range(Cells(srcColumnMax + 2, 0),
    '       Cells(2*srcColumnMax, |fffd||fffd||fffd||fffd||fffd||310||fffd|+2))
    '|fffd||248||a39e||fffd||6d1||fffd|
    '=====================================================
    Dim r, c, s
    Dim labelRow

    For s = 0 To xAxisNum - 1
        labelRow = Cells(s * rowStep + 2, 1)
        Cells(s + 1, srcColumnMax + 2) = labelRow
        For r = 0 To rowStep - 1
            For c = 3 To srcColumnMax
                Cells(s + 1, srcColumnMax + c) = Cells(s + 1, srcColumnMax + c) + Cells((s * rowStep + 2) + r, c)
            Next c
        Next r
    Next s

    '=====================================================
    ' |fffd||151||fffd|~|fffd||314||fffd||fffd|a|fffd|l(|fffd||45e6|)|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd|
    '
    '|fffd||a39e||fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|e|fffd|~|fffd||314||fffd||fffd|a(|fffd||45e6|)|fffd|l|fffd||30d||151||fffd|l|fffd||fffd||fffd||64fe||fffd||fffd|
    '|fffd||fffd||fffd|a|fffd||fffd||fffd|X|fffd|gradiusList|fffd||fffd||fffd||c42c|
    '=====================================================
    ReDim radiusList(xAxisNum * (srcColumnMax - 2) + 1) As Double
    'Dim idx, i
    idx = 0
    radiusMax = 0
    For i = 1 To xAxisNum
        For c = 3 To srcColumnMax
            idx = idx + 1
            radiusList(idx) = Cells(i, srcColumnMax + c)
            If radiusMax <= Cells(i, srcColumnMax + c) Then
                radiusMax = Cells(i, srcColumnMax + c)
            End If
        Next
    Next
    
    '=====================================================
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||30a9||fffd||fffd|~|fffd||fffd||fffd||fffd||fffd||302||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd|For Loop |fffd||fffd|Step|fffd||fffd||fffd|m|fffd||80b7||fffd||fffd|
    '=====================================================
    
'    rowStep = IIf(xAxisNum >= 2, (srcRowMax - 1) / xAxisNum, 1)

    '=====================================================
    'Legend|fffd||30a|e|fffd||fffd||fffd||682||310|F|fffd||fffd|t|fffd||fffd||fffd||fffd||5c1|A
    '  Legend |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||183|_|fffd|~|fffd|[|fffd|f|fffd|[|fffd|^|fffd||c42c||fffd||fffd||fffd||fffd|
    '
    '  .PlotArea|fffd||303|T|fffd|C|fffd|Y|fffd||fffd||303|_|fffd|~|fffd|[|fffd||fffd||fffd||fffd||fffd|~|fffd||fffd||fffd||c42c||fffd||fffd||fffd|A
    '|fffd|@|fffd||fffd||fffd||fffd|Legend|fffd||302||757||fffd||fffd|p|fffd||fffd||fffd|A|fffd|F|fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||c42c||fffd||142||fffd||fffd||fffd|
    '
    '  Legend|fffd||315|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||8414||fffd||702||142||fffd|\|fffd||fffd||fffd||fffd||fffd|A
    '  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"..."|fffd||255||3cd|X|fffd||fffd||fffd||fffd|
    '=====================================================
    maxLengthLegend = 0
    For r = 1 To rowStep
        Dim strShow As String
        Dim lenShowStr As Integer
        strShow = StrConv(Cells(r + 1, 2).Value, vbWide)
        lenShowStr = LenB(strShow)
        If lenShowStr > maxWidthLegendTitles Then
            strShow = Left(strShow, maxWidthLegendTitles / 2 - 4) + "..."
            lenShowStr = maxWidthLegendTitles
        End If
        maxLengthLegend = IIf(maxLengthLegend < lenShowStr, lenShowStr, maxLengthLegend)
        
        Cells(xAxisNum + 1 + r, srcColumnMax + 2).NumberFormatLocal = "@"
        Cells(xAxisNum + 1 + r, srcColumnMax + 2) = strShow
        Cells(xAxisNum + 1 + r, srcColumnMax + 3) = LenB(Cells(r + 1, 2).Value)
    Next

    Set lengendSourceData = range(Cells(xAxisNum + 2, srcColumnMax + 2), Cells(xAxisNum + rowStep + 1, srcColumnMax + 3))

End Sub

Sub drawLegend(destSheetName As String, _
               d_insertX As Integer, _
               d_insertY As Integer, _
               d_Name As String, _
               pieColors)
    
    Sheets("|fffd|f|fffd|[|fffd|^").Select
    Dim chartLegend As Chart
    Set chartLegend = Charts.Add
    
    With chartLegend
        .ChartType = xlPie
        .SetSourceData Source:=lengendSourceData, PlotBy:=xlColumns
        .HasLegend = True
        .PlotArea.Interior.color = RGB(255, 255, 255)
    End With
    
    '|fffd|~|fffd||315||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
    Dim i As Integer
    
    For i = 1 To chartLegend.SeriesCollection(1).Points.Count
        chartLegend.SeriesCollection(1).Points(i).Select
        With Selection.Border
            .Weight = xlThin
            .LineStyle = xlAutomatic
        End With
        Selection.Shadow = False
        With Selection.Interior
            If gItemColorIndex(i - 1) > 0 Then
                If i > 55 Then .ColorIndex = 0
                .ColorIndex = gItemColorIndex(i - 1)
            End If
            .Pattern = xlSolid
        End With
    Next
    
    With chartLegend
        .PlotArea.Width = 0
        .PlotArea.Height = 0
        .PlotArea.Top = 12  '|fffd||645c||fffd||fffd||fffd|B|fffd||fffd||fffd||5c1|ALegend|fffd||314|w|fffd||fffd||250||752||80b7||fffd||fffd|
        .PlotArea.Left = 20 '|fffd||645c||fffd||fffd||fffd|B|fffd||fffd||fffd||5c1|ALegend|fffd||314|w|fffd||fffd||250||752||80b7||fffd||fffd|
    End With
    
    Dim legend_w As Double
    Dim legend_h As Double
    
    legend_w = LEGEND_FIXED_WIDTH
    legend_h = rowStep * 18
    
    '-----------------------------
    ' |fffd|}|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|
    '-----------------------------
    chartLegend.Select
    With chartLegend.Legend
        With .Font
            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
            .FontStyle = "|fffd|W|fffd||fffd|"
            .Size = 10
        End With
        .Border.LineStyle = xlNone
        .Interior.ColorIndex = xlAutomatic
        .Height = legend_h  '|fffd||fffd||fffd||30e||fffd||fffd||242||352|l|fffd||fffd|500|fffd||fffd||fffd||fffd||fffd||202||fffd|(Excel|fffd|H)
        .Width = legend_w
    End With
        

    ActiveChart.Location Where:=xlLocationAsObject, Name:=destSheetName
    ActiveChart.Parent.Name = d_Name

    Sheets(destSheetName).Select
    Dim thisRange As range
    Set thisRange = range(Sheets(destSheetName).Cells(d_insertX, d_insertY + 1), _
                          Sheets(destSheetName).Cells(d_insertX, d_insertY + 1))
    thisRange.Select
    ActiveSheet.Shapes(d_Name).Top = thisRange.Top
    ActiveSheet.Shapes(d_Name).Left = thisRange.Left
    ActiveSheet.Shapes(d_Name).Width = legend_w + 10
    ActiveSheet.Shapes(d_Name).Height = legend_h + 10
    
    '-----------------------------
    ' |fffd|}|fffd||fffd||292|u|fffd||183|T|fffd|C|fffd|Y|fffd||30d||112||fffd||fffd||fffd|
    '-----------------------------
    With ActiveSheet.ChartObjects(1).Chart.Legend
        .Left = 0
        .Top = 0
        .Height = legend_h
    End With
    
End Sub

Sub drawLegend12(destSheetName As String, _
                 d_insertX As Integer, _
                 d_insertY As Integer, _
                 d_Name As String, _
                 pieColors)

    Dim strColors As Variant
    strColors = Split(getParams("colors"), ";")

    Sheets(destSheetName).Select
    Dim thisRange As range
    Set thisRange = range(Sheets(destSheetName).Cells(d_insertX, d_insertY + 1), _
                          Sheets(destSheetName).Cells(d_insertX, d_insertY + 1))
    
    Sheets(getTrans("|fffd|f|fffd|[|fffd|^")).Select
    Dim chartLegend As Chart
    Set chartLegend = Charts.Add
    
    With chartLegend
        .ChartType = xlPie
        .SetSourceData Source:=lengendSourceData, PlotBy:=xlColumns
        .HasLegend = True
        .PlotArea.Interior.color = RGB(255, 255, 255)
    End With
    
    '|fffd|~|fffd||315||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
    Dim i As Integer
    
'    For i = 1 To UBound(pieColors) + 1
'        chartLegend.SeriesCollection(1).Points(i).Select
'        With Selection.Border
'            .Weight = xlThin
'            .LineStyle = xlAutomatic
'        End With
'        Selection.Shadow = False
'        With Selection.Interior
'            .ColorIndex = pieColors(i - 1)
'            .Pattern = xlSolid
'        End With
'    Next
    
    For i = 1 To chartLegend.SeriesCollection(1).Points.Count
        chartLegend.SeriesCollection(1).Points(i).Select
        With Selection.Border
            .Weight = xlThin
            .LineStyle = xlAutomatic
        End With
        Selection.Shadow = False
        With Selection.Interior
            .color = getExcelRGB(strColors(i - 1))
            .Pattern = xlSolid
        End With
    Next
    
    With chartLegend
        .PlotArea.Width = 0
        .PlotArea.Height = 0
        .PlotArea.Top = 12  '|fffd||645c||fffd||fffd||fffd|B|fffd||fffd||fffd||5c1|ALegend|fffd||314|w|fffd||fffd||250||752||80b7||fffd||fffd|
        .PlotArea.Left = 20 '|fffd||645c||fffd||fffd||fffd|B|fffd||fffd||fffd||5c1|ALegend|fffd||314|w|fffd||fffd||250||752||80b7||fffd||fffd|
    End With
    
    Dim legend_w As Double
    Dim legend_h As Double
    '-----------------------------
    ' |fffd|}|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|
    '-----------------------------
    legend_h = rowStep * 18
    Select Case maxLengthLegend
        Case Is > 40
            legend_w = 4 * maxLengthLegend
        Case Is > 30
            legend_w = 5 * maxLengthLegend
        Case Is > 20
            legend_w = 6 * maxLengthLegend
        Case Else
            legend_w = 7 * maxLengthLegend
    End Select
    
    ActiveChart.Location Where:=xlLocationAsObject, Name:=destSheetName
    
    '|fffd|}|fffd||fffd||151||5576||fffd||fffd||fffd||fffd||fffd||fffd|2|fffd||fffd||fffd||fffd||fffd||209||fffd||fffd||30f||a347||fffd||314||fffd||fffd||fffd||fffd||fffd|
    If ActiveSheet.ChartObjects(1).Chart.Legend.Width > legend_w Then
        legend_w = ActiveSheet.ChartObjects(1).Chart.Legend.Width
    End If

    With ActiveSheet.ChartObjects(1)
        .Top = thisRange.Top
        .Left = thisRange.Left
        .Width = legend_w + 4
        .Height = legend_h + 10
        With .Chart.Legend
            With .Font
                .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                .FontStyle = "|fffd|W|fffd||fffd|"
                .Size = 10
            End With
            .Left = 0
            .Top = 0
            .Border.LineStyle = xlNone
            .Interior.ColorIndex = xlAutomatic
            .Height = rowStep * 18
            .Width = legend_w
        End With
    End With
    
    
End Sub

Sub setCanvusSize(destSheetName As String, _
                  xNum As Integer, _
                  Ynum As Integer, _
                  cHeight As Double, _
                  cWidth As Double)
    Dim i As Integer
    
    Sheets(destSheetName).Select
    
    'Y|fffd||fffd||fffd||fffd||fffd||30a|e|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|
    Rows("3:" & (Ynum + 2)).RowHeight = cHeight '94
    
    'X|fffd||fffd||fffd||fffd||fffd||30a|eCell|fffd||315||fffd||fffd||fffd||752||80b7||fffd||fffd|
    Columns(2).ColumnWidth = 2
    ' |fffd||fffd||fffd||fffd||fffd||689||fffd||fffd|P|fffd||30d||6c2||24f||fffd||fffd||fffd||fffd||3cd|X
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||742||fffd||fffd||90b1||fffd||182||242||fffd||fffd||702||fffd||fffd||fffd|
    Columns(3).ColumnWidth = 2
    
    For i = 4 To xNum + 3
        Columns(i).ColumnWidth = cWidth '15
    Next i
    
    
End Sub

Sub drawCenterLines(xLines As Integer, yLines As Integer)
    Dim i As Integer, j As Integer
    Dim a As String, b As String
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|
    For i = 3 To yLines + 2
        Call drawCenterDashLine(ActiveSheet.Name, "lineX" & i, xlHorizontal, i, 3, i, xLines + 2 + 1)
    Next i
    
    '|fffd|c|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|
    For i = 4 To xLines + 3
        Call drawCenterDashLine(ActiveSheet.Name, "lineY" & i, xlVertical, 3, i, yLines + 2 + 1, i)
    Next i
    '|fffd||fffd||fffd||fffd||fffd||151||38a|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||402||fffd||fffd|B
    a = getParams("ext.diag")
    Dim key1codes() As String, key2codes() As String, t1 As String, t2 As String
    
    ' |fffd|L|fffd|[|fffd||fffd||fffd|[|fffd|h|fffd|n|fffd||143|R|fffd|[|fffd|h|fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7cd||fffd||fffd||683|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||1c9||fffd|
    If a = "True" And getParams("chartkey1") = getParams("chartkey2") Then
        key1codes = Split(getParams("key1codes"), ",")
        key2codes = Split(getParams("key2codes"), ",")
        For i = 3 To yLines + 2
            For j = 3 To xLines + 2
                If key1codes(j - 3) = key2codes(i - 3) Then
                    Call drawDiagNullLine(ActiveSheet.Name, "diagNull" & i & "_" & j + 1, i, j + 1)
                End If
            Next j
        Next i
    End If
End Sub

Sub drawDiagNullLine(destSheetName As String, lineName As String, sRow As Integer, sCol As Integer)
    '|fffd||fffd||fffd||fffd||fffd||682||30c||fffd|_
    Sheets(destSheetName).Select
    Dim bX, bY, wX, wY
    With Cells(sRow, sCol)
        bX = .Left
        bY = .Top
        wX = .Width
        wY = .Height
    End With
    Dim newLine As Shape
    Set newLine = ActiveSheet.Shapes.AddLine(bX, bY, bX + wX, bY + wY)
    newLine.Name = lineName
    With newLine
        With .Line
            .Weight = 1.5
            .Style = msoLineSingle
            .Transparency = 0#
            .Visible = msoTrue
            .ForeColor.RGB = RGB(0, 0, 0)
            '.ForeColor.SchemeColor = 64
            .BackColor.RGB = RGB(255, 255, 255)
            .BeginArrowheadLength = msoArrowheadLengthMedium
            .BeginArrowheadWidth = msoArrowheadWidthMedium
            .BeginArrowheadStyle = msoArrowheadNone
            .EndArrowheadLength = msoArrowheadLengthMedium
            .EndArrowheadWidth = msoArrowheadWidthMedium
            .EndArrowheadStyle = msoArrowheadNone
        End With
    End With
End Sub
Sub drawCenterDashLine(destSheetName As String, _
                       lineName As String, _
                       drawDirection As String, _
                       sRow As Integer, sCol As Integer, _
                       eRow As Integer, eCol As Integer)
    '---------------------------------------------------
    ' |fffd|J|fffd|n|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||702||142||312||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||c42c|
    ' Input parameters
    '     destSheetName: |fffd||c42c||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd|
    '        lineName: |fffd||c42c||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||316||fffd||fffd|O
    '   drawDirection: |fffd||fffd||fffd||fffd|(xlHorizontal)
    '                  |fffd|c|fffd||fffd|(xlVartical)
    '       sRow,sCol: |fffd|J|fffd|n|fffd||303|Z|fffd||fffd|(row,column)
    '       eRow,eCol: |fffd|I|fffd||fffd||fffd||303|Z|fffd||fffd|(row,column)
    
    Sheets(destSheetName).Select
    
    '|fffd|J|fffd|n|fffd|Z|fffd||fffd||fffd||248||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||292|u|fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    Dim bX, bY, eX, eY
    
    If drawDirection = xlVertical Then
        With Cells(sRow, sCol)
            bX = .Left + .Width / 2
            bY = .Top
        End With
        
        With Cells(eRow, eCol)
            eX = .Left + .Width / 2
            eY = .Top + .Height
        End With
    ElseIf drawDirection = xlHorizontal Then
        With Cells(sRow, sCol)
            bX = .Left
            bY = .Top + .Height / 2
        End With
        With Cells(eRow, eCol)
            eX = .Left + .Width
            eY = .Top + .Height / 2
        End With
    End If
    
    Dim newLine As Shape
    Set newLine = ActiveSheet.Shapes.AddLine(bX, bY, eX, eY)
    newLine.Name = lineName
    
    With newLine
        With .Line
            .Weight = 0.25
            .DashStyle = msoLineDash
            .Style = msoLineSingle
            .Transparency = 0#
            .Visible = msoTrue
            .ForeColor.RGB = RGB(171, 171, 171)
            '.ForeColor.SchemeColor = 64
            .BackColor.RGB = RGB(255, 255, 255)
            .BeginArrowheadLength = msoArrowheadLengthMedium
            .BeginArrowheadWidth = msoArrowheadWidthMedium
            .BeginArrowheadStyle = msoArrowheadNone
            .EndArrowheadLength = msoArrowheadLengthMedium
            .EndArrowheadWidth = msoArrowheadWidthMedium
            .EndArrowheadStyle = msoArrowheadNone
        End With
        .ZOrder msoSendToBack
    End With

End Sub


Sub writeLabels(destSheetName As String, srcSheetName As String)
    Dim c, r
    Dim tmpLabel As String
    
    Sheets(destSheetName).Select
    
    '|fffd||fffd|s|fffd||682||30d||fffd||fffd||fffd||fffd||fffd||752||fffd|
    Rows(1).RowHeight = 40
    
    '|fffd||fffd||fffd||682||315||fffd||fffd||fffd||752||fffd|
    Columns(1).ColumnWidth = 25
    
    '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||303|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||752||fffd|
    Cells(1, 2) = matrixTitle

    range(Cells(1, 2), Cells(1, 2)).Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
        With .Font
            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
            .FontStyle = "|fffd||fffd||fffd||fffd|"
            .Size = 11
        End With
    End With
    
    '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||310||752||fffd|
    If key2title <> "" Then
        Cells(2, 1) = getTrans("|fffd|c|fffd||fffd||fffd|F") + key2title
        range(Cells(2, 1), Cells(2, 1)).Select
        With Selection
            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlCenter
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            With .Font
                 .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                 .FontStyle = "|fffd||fffd||fffd||fffd|"
                 .Size = 11
            End With
        End With
    End If
    
    '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||30f|c|fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||fffd||752||fffd|
    If nkeys = 3 Then
        For c = 3 To srcColumnMax
            tmpLabel = Sheets(srcSheetName).Cells(1, c).Value
            Sheets(destSheetName).Cells(c, 1) = tmpLabel
        Next c
    ElseIf nkeys = 2 Then
        For c = 2 To srcColumnMax
            tmpLabel = Sheets(srcSheetName).Cells(1, c).Value
            Sheets(destSheetName).Cells(c + 1, 1) = tmpLabel
        Next c
    
    End If
    
    '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||30f|c|fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd||752||fffd|
    Sheets(destSheetName).Select
    range(Cells(3, 1), Cells(srcColumnMax - IIf(nkeys = 3, 0, -1) + 1, 1)).Select
    With Selection
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
        With .Font
            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
            .FontStyle = "|fffd||fffd||fffd||fffd|"
            .Size = 9
        End With
    End With
    
    range(Cells(3, 2), Cells(srcColumnMax - IIf(nkeys = 3, 0, -1) + 1, 2)).Select
    With Selection
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = xlAutomatic
        End With
    End With
    
    If nkeys = 3 Then
        '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||309||fffd||fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||fffd||752||fffd|
        Dim xLabelStartRow As Integer
        Dim xidx As Integer
        
        xLabelStartRow = srcColumnMax + 3
        xidx = 3
        For r = 2 To srcRowMax Step rowStep
            tmpLabel = Sheets(srcSheetName).Cells(r, 1).Value
            Sheets(destSheetName).Cells(xLabelStartRow, xidx + 1) = tmpLabel
            xidx = xidx + 1
        Next r
    
        '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||309||fffd||fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd||752||fffd|
        Sheets(destSheetName).Select
        range(Cells(xLabelStartRow, 3), Cells(xLabelStartRow, xidx + 1)).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlTop
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            With .Font
                .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                .FontStyle = "|fffd||fffd||fffd||fffd|"
                .Size = 9
            End With
        End With
            
        range(Cells(xLabelStartRow - 1, 3), Cells(xLabelStartRow - 1, xidx)).Select
        With Selection
            .Borders(xlDiagonalDown).LineStyle = xlNone
            .Borders(xlDiagonalUp).LineStyle = xlNone
            .Borders(xlEdgeLeft).LineStyle = xlNone
            With .Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .Weight = xlMedium
                .ColorIndex = xlAutomatic
            End With
            .Borders(xlEdgeBottom).LineStyle = xlNone
            .Borders(xlEdgeRight).LineStyle = xlNone
        End With
    
        '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||310||752||fffd|
        If key1title <> "" Then
            Cells(xLabelStartRow + 2, xidx) = getTrans("|fffd||fffd||fffd||fffd||fffd|F") + key1title
            range(Cells(xLabelStartRow + 2, xidx), Cells(xLabelStartRow + 2, xidx)).Select
            With Selection
                .HorizontalAlignment = xlLeft
                .VerticalAlignment = xlCenter
                .WrapText = False
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
                With .Font
                     .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                     .FontStyle = "|fffd||fffd||fffd||fffd|"
                     .Size = 11
                End With
            End With
        End If
    
        Sheets(destSheetName).Select
        
        'Legend|fffd||fffd|Matrix|fffd||30a||50a|u|fffd||fffd||315||fffd||fffd||fffd||752||fffd|
        Columns(xidx + 1).ColumnWidth = 2.5

    ElseIf nkeys = 2 Then
        For r = 2 To srcRowMax
            tmpLabel = Sheets(srcSheetName).Cells(r, 1).Value
            Sheets(destSheetName).Cells(srcColumnMax + 3, r + 2) = tmpLabel
        Next r
        
        '|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X|fffd||30f|c|fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd||752||fffd|
        Sheets(destSheetName).Select
        range(Cells(srcColumnMax + 3, 4), Cells(srcColumnMax + 3, srcRowMax + 2 + 1)).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlTop
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            With .Font
                .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                .FontStyle = "|fffd||fffd||fffd||fffd|"
                .Size = 9
            End With
        End With
            
        range(Cells(srcColumnMax + 3, 3), Cells(srcColumnMax + 3, srcRowMax + 2)).Select
        With Selection
            .Borders(xlDiagonalDown).LineStyle = xlNone
            .Borders(xlDiagonalUp).LineStyle = xlNone
            .Borders(xlEdgeLeft).LineStyle = xlNone
            With .Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .Weight = xlMedium
                .ColorIndex = xlAutomatic
            End With
            .Borders(xlEdgeBottom).LineStyle = xlNone
            .Borders(xlEdgeRight).LineStyle = xlNone
        End With
        'Legend|fffd||fffd|Matrix|fffd||30a||50a|u|fffd||fffd||315||fffd||fffd||fffd||752||fffd|
        Columns(srcRowMax + 3).ColumnWidth = 2.5
    End If
    
    '|fffd|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd||308||fffd||303|T|fffd|C|fffd|Y
    Dim i As Integer
    Dim toRow, toCol As Integer
    
    graphAreaHeight = 0
    graphAreaWidth = 0
   
    If nkeys = 3 Then
        toRow = xLabelStartRow - 1
        toCol = xidx
    ElseIf nkeys = 2 Then
        toRow = srcColumnMax + 2
        toCol = srcRowMax + 2
    End If
    
    For i = 2 To toRow
        graphAreaHeight = graphAreaHeight + Cells(i, 1).Height
    Next
    For i = 2 To toCol
        graphAreaWidth = graphAreaWidth + Cells(1, i).Width
    Next
End Sub

Public Sub makeChartComboBox(Optional act As String = "new")
'
'   |fffd||fffd||fffd|I|fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||312||1c9||fffd||fffd||183|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd|`
'   |fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|V|fffd|[|fffd|g|fffd||c42c||fffd||fffd||fffd||18d||c42c||fffd||fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd|s
'
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim actRange As String
    Dim oleCmb As Object
    Dim cmb As Object
    Dim chrtobj As ChartObject
    
    NO_FOCUS = getTrans("|fffd||202||fffd|")
    Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).Activate
    Application.StatusBar = getTrans("|fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||fffd||fffd||c42c||fffd||fffd||fffd||142||fffd||fffd|B")
    
    If ActiveSheet.OLEObjects.Count > 0 Then
        For Each oleCmb In ActiveSheet.OLEObjects
            If oleCmb.Name = "ChartComboBox" Then
                Exit For
            End If
        Next
    End If

    If oleCmb Is Nothing Then
        If act = "new" Then
            With range("F1")
                .VerticalAlignment = xlCenter
                .Value = getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|F|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@ |fffd||243|t|fffd|H|fffd|[|fffd|J|fffd|X|fffd||13582||102||fffd|")
                .IndentLevel = 4
            End With
            Set oleCmb = ActiveSheet.OLEObjects.Add(ClassType:="Forms.ComboBox.1", Link:=False, DisplayAsIcon:=False, _
                         Left:=ActiveSheet.Buttons("bntShowDigital").Left + 97, Top:=range("E1").Top + 4, Width:=52, Height:=15)
            oleCmb.Name = "ChartComboBox"
        Else
            Exit Sub
        End If
    End If
    
    Set cmb = oleCmb.Object
    With cmb
        .Style = fmStyleDropDownList
        .BorderStyle = fmBorderStyleSingle
        .BorderColor = &H808080
        .SpecialEffect = fmSpecialEffectFlat
        .ColumnCount = 2
        .ListWidth = 270
        .ColumnWidths = "40;230"
        '|fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||24f||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd|Z|fffd|b|fffd|g
        .AddItem NO_FOCUS
        k = 1
        'Dim a As Shape
        ' |fffd|Z|fffd||fffd||fffd||242||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|v|fffd||fffd||fffd|_|fffd|E|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||252||1c9||fffd||fffd||fffd||fffd||102||fffd|
        ' |fffd|R|fffd||fffd||fffd||fffd||fffd|g|fffd|A|fffd|E|fffd|g|fffd||fffd||fffd|O|fffd||fffd||fffd||18c||fffd||fffd||fffd||fffd||252||1c9||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||702||fffd||24e||fffd||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||80b7||fffd||fffd||fffd||fffd||302||143|R|fffd||fffd||fffd||fffd||fffd|g|fffd|A|fffd|E|fffd|g
        Dim endcol As Integer, endrow As Integer, rad As Double
        
        endcol = ActiveSheet.Cells.SpecialCells(xlLastCell).Column
        endrow = ActiveSheet.Cells.SpecialCells(xlLastCell).Row - 2
        
        For i = 4 To endcol
            For j = 4 To endrow
                actRange = ConvertToLetter(i) & j
                'Debug.Print PREFIX_PIENAME & actRange
                ' |fffd||fffd||fffd||309|~|fffd||314||fffd||fffd|a|fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
                ' |fffd||fffd||fffd||315||fffd||fffd|@|fffd||fffd||fffd||18d||113|x|fffd|J|fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
                'rad = radiusList((i - 4) * (endrow - 3) + (j - 3))
                'Debug.Print "radius", i - 3, j - 3, (i - 4) * (endrow - 3) + (j - 3), rad
                
                ' |fffd|w|fffd||fffd||316||fffd||fffd|O|fffd||310|}|fffd|`|fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N (existShape|fffd||fffd|ProjectCommon|fffd||242||fffd||fffd||fffd||702||fffd|)
                ' -> if|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|R|fffd||fffd||fffd||fffd||fffd|g|fffd|A|fffd|E|fffd|g|fffd||fffd||7c2||fffd||fffd||388||211|O|fffd||303|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd||fffd||256||7c2||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|x|fffd||fffd||fffd||202||fffd||702||fffd|
                If existShapes(PREFIX_PIENAME & actRange, ActiveSheet) Then
                'For Each chrtobj In ActiveSheet.ChartObjects
                '    If chrtobj.Name = PREFIX_PIENAME & actRange Then
                        .AddItem actRange
                        .List(k, 1) = Replace(range(actRange).End(xlToLeft).Value, vbLf, "") & "-" & Replace(range(actRange).End(xlDown).Value, vbLf, "")
                        k = k + 1
                '        Exit For
                '    End If
                End If
                'Next
            Next
        Next
        If .Value = "" Then
            .ListIndex = 0  '|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|
        End If
    End With
    '|fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||752||fffd|
    Application.OnTime Now, "setEvent"
    
    Application.StatusBar = ""

End Sub

Public Sub setEvent()
'
'   |fffd||fffd||fffd|I|fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||243|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd||1c9||fffd|
'
    Set gChartComboBox = New clsMakeMatixCmb
    gChartComboBox.cb = ActiveSheet.OLEObjects("ChartComboBox").Object

End Sub

Public Sub setTopLayer(ByVal rng As String)
    readTrans ("data\bc_trans.txt")
    NO_FOCUS = getTrans("|fffd||202||fffd|")

'
'   |fffd||fffd||fffd|I|fffd|R|fffd||fffd||fffd|{|fffd|{|fffd|b|fffd|N|fffd|X|fffd||fffd|change|fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd||fffd||fffd|
'
    Dim baseRow, baseCol As Integer
    Dim r, c As Integer
    Dim obj As Variant
    
    baseRow = 4 'range("D4")|fffd||fffd||fffd||e3c0||fffd||182||fffd||fffd||fffd|
    baseCol = 4
    If graphArea Is Nothing Then
        '|fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd||fffd|s|fffd||fffd||fffd||255|`|fffd||60b7||fffd||93b2||fffd||fffd||fffd||348||342||fffd||fffd||64fe|
        For Each obj In ActiveSheet.Shapes
            If obj.Type = msoLine And InStr(obj.Name, "lineX") > 0 Then r = r + 1
            If obj.Type = msoLine And InStr(obj.Name, "lineY") > 0 Then c = c + 1
        Next
        Set graphArea = range(Cells(baseRow, baseCol - 1), Cells(baseRow + r - 1 + 1, baseCol + c - 1))
    End If
    '|fffd||fffd||fffd||fffd||fffd||30d||115|`|fffd||fffd|
    With graphArea
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .color = vbBlack
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .color = vbBlack
        End With
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    
    '|fffd|t|fffd|H|fffd|[|fffd|J|fffd|X|fffd||202||fffd||fffd||202||70b1||fffd||fffd||fffd||14f|I|fffd||fffd|
    If rng = NO_FOCUS Then Exit Sub
    
    '|fffd|t|fffd|H|fffd|[|fffd|J|fffd|X|fffd||fffd||fffd||a0bd||fffd|O|fffd||fffd||fffd|t|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||258|g|fffd||fffd||fffd||fffd|`|fffd||fffd|
    With range(rng).Borders
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .color = vbRed
    End With
    ActiveSheet.Shapes(PREFIX_PIENAME & rng).ZOrder msoBringToFront

End Sub

Private Function ConvertToLetter(iCol As Integer) As String
'
'  |fffd||fffd||50d||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|
'
   Dim iAlpha As Integer
   Dim iRemainder As Integer
   iAlpha = Int((iCol - 1) / 26)
   iRemainder = iCol - (iAlpha * 26)
   If iAlpha > 0 Then
       ConvertToLetter = Chr(iAlpha + 64)
   End If
   If iRemainder > 0 Then
       ConvertToLetter = ConvertToLetter & Chr(iRemainder + 64)
   End If
End Function



'----------------------------following are dust-------------
'Sub switchPiesLabels_old(no_used_more)
'    Dim saveScreenUpdating
'    Dim objChart
'    Dim confirmShow
'
'    confirmShow = vbCancel
'    If showDigitalNowFlag = 1 Then
'        confirmShow = MsgBox(getTrans("|fffd|o|fffd|u|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||93c8||fffd||fffd||fffd||350||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||302||14e||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H"), vbOKCancel + vbExclamation)
'        If confirmShow = vbCancel Then
'            Exit Sub
'        End If
'    End If
'Dim startTm, stoptm
'startTm = Time
'    saveScreenUpdating = Application.ScreenUpdating
'    Application.ScreenUpdating = False
'    For Each objChart In Sheets(getTrans("|fffd|~|fffd|O|fffd||fffd||fffd|t|fffd|E|fffd|}|fffd|g|fffd||fffd||fffd|N|fffd|X")).ChartObjects
'
'        If InStr(objChart.Name, PREFIX_PIENAME) > 0 Then
'            '|fffd|~Chart|fffd||316||fffd||fffd|O|fffd||250||693||fffd||fffd||fffd|PREFIX_PIENAME|fffd||fffd||fffd||702||fffd|
'            ActiveSheet.ChartObjects(objChart.Name).Activate
'            ActiveChart.SeriesCollection(1).Select
'            If showDigitalNowFlag Then
'                ActiveChart.SeriesCollection(1).ApplyDataLabels AutoText:=True, showValue:=True
'                ActiveChart.SeriesCollection(1).DataLabels.Select
'                With Selection
'                    .Position = xlLabelPositionCenter  'xlLabelPositionInsideEnd 'xlLabelPositionOutsideEnd
'                    .Font.Size = 10
'                    .NumberFormat = "#.##"
'                End With
'
'                Dim numPoints, p, cntNotZero, q
'
'                numPoints = ActiveChart.SeriesCollection(1).Points.Count
'                cntNotZero = 0
'                For p = 1 To numPoints
'                    If ActiveChart.SeriesCollection(1).Points(p).DataLabel.Text = "0" Or _
'                       ActiveChart.SeriesCollection(1).Points(p).DataLabel.Text = "." Then
'                        '0|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||202||fffd|
'                        ActiveChart.SeriesCollection(1).Points(p).DataLabel.Text = ""
'                    Else
'                        '|fffd||fffd||fffd||fffd||fffd||fffd|2|fffd||fffd||fffd||602||fffd||302||10a||6c2||7d5|\|fffd||fffd|
'                        Dim showValue
'                        showValue = ActiveChart.SeriesCollection(1).Points(p).DataLabel.Text
'                        If IsNumeric(showValue) Then
'                            showValue = CDbl(showValue)
'                            ActiveChart.SeriesCollection(1).Points(p).DataLabel.Text = Application.RoundDown(showValue, 2)
'                        End If
'                        'ActiveChart.SeriesCollection(1).Points(p).DataLabel.NumberFormat = "##.##"
'                        ActiveChart.SeriesCollection(1).Points(p).DataLabel.Select
'                        Selection.Position = xlLabelPositionBestFit
'                        With Selection.Font
'                            .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
'                            .FontStyle = "|fffd|W|fffd||fffd|"
'                            .Size = IIf(nkeys = 3, 7, 8)
'                            .Strikethrough = False
'                            .Superscript = False
'                            .Subscript = False
'                            .OutlineFont = False
'                            .Shadow = False
'                            .Underline = xlUnderlineStyleNone
'                            .ColorIndex = xlAutomatic
'                            .Background = xlAutomatic
'                        End With
'                        With Selection
'                            .AutoScaleFont = True
'                        End With
'                        cntNotZero = cntNotZero + 1
'                    End If
'                Next p
'                If cntNotZero = 1 Or cntNotZero = 2 Then
'                    For q = 1 To numPoints
'                        ActiveChart.SeriesCollection(1).Points(q).DataLabel.Position = xlLabelPositionInsideEnd
'                    Next q
'                End If
'            Else
'                ActiveChart.SeriesCollection(1).ApplyDataLabels AutoText:=False, showValue:=False
'            End If
'        End If
'    Next
'    showDigitalNowFlag = IIf(showDigitalNowFlag = 0, 1, 0)
'
'    Application.ScreenUpdating = saveScreenUpdating
'    ActiveSheet.range("A1").Select
'stoptm = Time - startTm
'MsgBox getTrans("|fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||501|F") & Minute(stoptm) & ":" & Second(stoptm)
'
'End Sub








Attribute VB_Name = "mduRadar"
Private Const BaseColorIndex = 56
Sub makeRadarChart(lineNum() As Long)
'
'  |fffd||fffd||fffd|[|fffd|_|fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|`|fffd||fffd|
'
    Dim nkeys As Integer
    Dim series_count As Integer
    Dim titlestr, key1dup, key2dup, key2misc As String     'bc_params.txt|fffd||64fe||fffd|l
    Dim ncol, nrow As Long
    Dim chart1 As Chart
    Dim strColors As Variant
    
    ncol = lineNum(0) - 1
    nrow = lineNum(1) - 1
    'ncol = Int(getParams("datacolcount")) - 1
    'nrow = Int(getParams("datarowcount")) - 1

    titlestr = getParams("title")
    key1dup = getParams("chartkey1_dup")
    key2dup = getParams("chartkey2_dup")
    key2misc = getParams("chartkey2_misc")
    strColors = Split(getParams("colors"), ";")
    
    nkeys = CInt(getParams("nkeys"))
    If nkeys = 2 And getParams("ext.rate") = True Then
       isRate = True
    Else
       isRate = False
    End If
    denomi_series = False
    If isRate Then
       denomi = getParams("ext.denomi")
       If denomi = "series" Or denomi = "series_all" Then
          denomi_series = True
       End If
    End If
    
    
    ReverseFlag = getParams("chartkey1_reverse", "False")
    Select Case getParams("chartbase")
        Case "score"
            y_axistitle = getTrans("|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l")
        Case "epscore"
            y_axistitle = getTrans("EP|fffd|p|fffd|e|fffd||fffd||fffd|g|fffd|X|fffd|R|fffd|A|fffd|i50|fffd||20f||fffd|j|fffd||3ce|Z|fffd|l")
        Case Else
            y_axistitle = getTrans("|fffd||fffd||fffd||fffd|")
    End Select
    
    If isRate = True Then
       y_axistitle = y_axistitle + "|fffd|i|fffd||fffd||fffd|j"
    End If
    
    If denomi_series = True Then
       sta_row = 2   ' |fffd||590||fffd|setAxisLabelFormat|fffd||143||fffd||fffd|x|fffd||fffd||fffd|p|fffd||30d|s|fffd||fffd||fffd|}|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||90bd||fffd||fffd|datasource|fffd|J|fffd|n|fffd|s|fffd||fffd||fffd||fffd||fffd||70b7|
       end_row = nrow + 1
    Else
       sta_row = 1
       end_row = nrow + 1
    End If
    
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|i|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd|j
    '|fffd||fffd||fffd||fffd||fffd||3cd|X|fffd|@|fffd||95||fffd||fffd||30f||a347||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||34a||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||34f||fffd||fffd||fffd||fffd|_1|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|
    With dataWT.range(dataWT.Cells(sta_row, 3), dataWT.Cells(end_row, ncol + 1))
        If isRate = True Then
            .NumberFormat = "#,##0.0""%"";;"
        ElseIf InStr(getParams("chartbase"), "score") > 0 Or InStr(key1dup, "divided") > 0 Or InStr(key2dup, "divided") > 0 Then
            .NumberFormat = "#,##0.00;;"
        Else
            .NumberFormat = "#,###;;"
        End If
    End With
    '|fffd||fffd||fffd|v|fffd|l
'    If InStr(key1dup, "divided") > 0 Or (key2dup = "divided" And key2misc <> "misc") Then
'        For i = sta_row + 1 To end_row
'            With dataWT.Cells(i, ncol + 2)
'                .NumberFormat = IIf(Round(.Value, 0) >= 100, "#,##0", "#,##0.0")
'            End With
'        Next
'    Else
'        dataWT.Range(dataWT.Cells(sta_row + 1, ncol + 2), dataWT.Cells(end_row, ncol + 2)).NumberFormat = "#,##0"
'    End If
    
    dataWT.range("A1").Select   'Chart.Add|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||302||fffd||fffd||fffd|
    
    '|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd||c42c|
    Set chart1 = Charts.Add
    With chart1
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
        If title <= "" Then
          .HasTitle = True
          .ChartTitle.Characters.Text = titlestr
        End If
        .ChartType = xlRadarMarkers
        .HasLegend = True
        .Legend.Position = xlRight
                
        .SetSourceData Source:=dataWT.range(dataWT.Cells(sta_row, 2), dataWT.Cells(end_row, ncol + 1)), _
                       PlotBy:=xlColumns
        .PlotArea.Interior.ColorIndex = xlNone

        series_count = .ChartGroups(1).SeriesCollection.Count

        If ReverseFlag = "True" Then
          ' |fffd|G|fffd|N|fffd|Z|fffd||fffd||fffd|Q|fffd|O|fffd|O|fffd|V|fffd||20d|~|fffd||30f||a347||fffd|A|fffd||fffd|Q|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||90aa||fffd|A
          ' |fffd|}|fffd|N|fffd||fffd||fffd||142||fffd||fffd||182||202||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|B
          ' |fffd||fffd||fffd||fffd||341|A|fffd|T|fffd|[|fffd|o|fffd|[|fffd||fffd||fffd||143|f|fffd|[|fffd|^|fffd||14f53|]|fffd||fffd||fffd||111||389||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|B|fffd|B|fffd|B
          .Axes(xlCategory).ReversePlotOrder = True
'          If Val(Application.Version) > 11 Then
'            .HasAxis(xlCategory, xlSecondary) = True
'            .Axes(xlCategory, xlSecondary).ReversePlotOrder = True
'          End If
          .Axes(xlCategory).Crosses = xlMaximum
'            If Val(Application.Version) > 11 Then ' |fffd|G|fffd|N|fffd|Z|fffd||fffd||fffd|Q|fffd|O|fffd|O|fffd|V|fffd||20d|~|fffd||30f||a347||fffd|A|fffd||fffd|Q|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd|B
'              .Axes(xlCategory, xlSecondary).Crosses = xlMaximum
'              .Axes(xlCategory, xlSecondary).TickLabelPosition = xlNone
'              .Axes(xlCategory, xlSecondary).MajorTickMark = xlNone
'              .Axes(xlCategory, xlSecondary).Format.Line.Visible = msoTrue
'              .Axes(xlCategory, xlSecondary).Format.Line.ForeColor.ObjectThemeColor = msoThemeColorBackground1
'            End If
        End If
    
    End With
    
    Dim style_set_series_count As Integer
    If hasallout = True Then
      style_set_series_count = series_count - 2
    Else
      style_set_series_count = series_count - 1
    End If
    
    ' |fffd|O|fffd||fffd||fffd|t|fffd||310||fffd||fffd|A|fffd|}|fffd|[|fffd|J|fffd|[|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||3cd|X
    For i = 0 To style_set_series_count
        With chart1.SeriesCollection(i + 1)
            .MarkerStyle = xlCircle
            '.Smooth = False
            .Shadow = False
            If Application.Version >= 14 Then
                .Format.Line.Visible = msoTrue
                .Format.Line.ForeColor.RGB = ProjectCommon.getExcelRGB(strColors(i))
                .Format.Line.Transparency = 0
                .Format.Fill.Solid
                .Format.Fill.Transparency = 0
                .Format.Fill.Visible = msoTrue
                .Format.Fill.ForeColor.RGB = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerSize = 5
            ElseIf Application.Version = 12 Then    '2007|fffd|p
                .Border.color = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerBackgroundColor = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerForegroundColor = ProjectCommon.getExcelRGB(strColors(i))
                .MarkerSize = 5
            Else    '2003|fffd|p
                .Border.Weight = xlThick
                .Border.LineStyle = xlContinuous
                .MarkerSize = 7
                If gItemColorIndex(i) > 0 Then
                    .Border.ColorIndex = gItemColorIndex(i)
                    .MarkerBackgroundColorIndex = gItemColorIndex(i)
                    .MarkerForegroundColorIndex = gItemColorIndex(i)
                End If
            End If
        End With
    Next i
    
    ' |fffd||690||fffd||fffd||80c9||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd||fffd|`|fffd||fffd||fffd||3cd|X
    If isRate = True Then
        max_scale = chart1.Axes(xlValue).MaximumScale
        If max_scale > 100 Then
           chart1.Axes(xlValue).MaximumScale = 100
        End If
        chart1.Axes(xlValue).TickLabels.NumberFormatLocal = "0""%""" ' |fffd|\|fffd||fffd||fffd|`|fffd||fffd||fffd||315||3cd|X
    Else
        chart1.Axes(xlValue).TickLabels.NumberFormatLocal = "0"
    End If

    ActiveChart.ChartArea.Select

End Sub




Attribute VB_Name = "mduTimeline"
Private Const BaseColorIndex = 56
Private ERlineprefix As String

Sub makeTimeline(lineNum() As Long)

    ERlineprefix = "TermLine:"
    ' |fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd||fffd|`|fffd||60b7||fffd||fffd|(|fffd|o|fffd|u|fffd||fffd||fffd|`|fffd||fffd||fffd|[|fffd|g|fffd||17617|p|fffd||fffd||fffd||102||702||fffd|)
    titlestr = getParams("title")
    Dim gpdataWT As Worksheet
    Set gpdataWT = Worksheets(getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"))
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    ' |fffd|o|fffd||fffd||fffd||fffd||309||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
    extend_flag = Split(getParams("extend_flag"), ",")
    
    Dim series_num As Integer
    series_num = (lineNum(0) - 1) / 3
    
    valueranking = Split(getParams("valueranking"), ";")
    tmcolors = Split(getParams("colors"), ";")
    nondatefg = getParams("chartkey2_misc") ' |fffd||fffd||fffd|t|fffd||202||fffd||fffd|t|fffd||fffd||fffd|O
    fumeidatefg = getParams("chartkey2_fumei") ' |fffd||fffd||fffd|t|fffd|s|fffd||fffd||fffd|t|fffd||fffd||fffd|O|fffd|i|fffd||fffd||fffd||fffd||fffd|US|fffd||30c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||741|j
    ' |fffd|l|fffd|\|fffd||fffd||fffd|y|fffd||453|o|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||303|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd||fffd||fffd|
    uchiwake_on = getParams("show_tluchiwake")
    line_on = getParams("show_tlmapline")
    
    'gpdataWT.Activate
    
    Set tgt = gpdataWT.range(gpdataWT.Cells(1, 1), gpdataWT.Cells(lineNum(1), lineNum(0)))
    ' |fffd||fffd||fffd|f|fffd|[|fffd|^ |fffd||fffd||fffd|x|fffd||fffd||fffd||c42c||fffd||fffd||fffd||202||1c2||24e|g|fffd|p
    Set tgt_jitu = dataWT.range(dataWT.Cells(1, 1), dataWT.Cells(series_num + 1, lineNum(1)))
    
    Dim chart1 As Chart
    Set chart1 = Charts.Add
    With chart1
        ' |fffd||fffd||fffd||a0aa||fffd||202||fffd||fffd||fffd|2003|fffd||143|G|fffd||fffd||fffd|[
        .SetSourceData Source:=tgt
        With .PlotArea
            .Interior.ColorIndex = xlNone
            With .Border
'                .ColorIndex = 1
                .color = vbBlack
                .Weight = xlHairline
                .LineStyle = xlContinuous
            End With
        End With
        .Name = getTrans("|fffd|O|fffd||fffd||fffd|t")
        If title <= "" Then
            .HasTitle = True
            .ChartTitle.Characters.Text = titlestr
        End If
        
        .ChartType = xlBubble
        .HasLegend = False
        ' chartadd|fffd||fffd||fffd||fffd||193|K|fffd||fffd||fffd||243|V|fffd||fffd||fffd|[|fffd|Y|fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||60a4||fffd||202||302||148||fffd|U|fffd|S|fffd||fffd||fffd||fffd|
        Dim sc As Series
        For Each sc In .SeriesCollection
            sc.Delete
        Next sc
        
        For i = 1 To series_num
            Set NS = .SeriesCollection.NewSeries
            With NS
                If i = 1 Then
                    .Name = "XItem" '|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd||fffd||fffd||fffd||102||fffd||fffd||60a4|
                Else
                    .Name = tgt(1, i)
                End If
                .XValues = "='" & gpdataWT.Name & "'!R2C" & (i * 3 - 1) & ":R" & lineNum(1) & "C" & (i * 3 - 1)
                .Values = "='" & gpdataWT.Name & "'!R2C" & (i * 3) & ":R" & lineNum(1) & "C" & (i * 3)
                .BubbleSizes = "='" & gpdataWT.Name & "'!R2C" & (i * 3 + 1) & ":R" & lineNum(1) & "C" & (i * 3 + 1)
                
                ' |fffd||fffd||fffd||fffd|
                .ApplyDataLabels AutoText:=True, _
                         LegendKey:=False, ShowSeriesName:=False, _
                         ShowCategoryName:=False, showValue:=False, _
                         ShowPercentage:=False, ShowBubbleSize:=True
                With .DataLabels
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .ReadingOrder = xlContext
                    .Position = xlLabelPositionCenter
                    .Orientation = xlHorizontal
                End With
            End With
        Next i
        ' |fffd|o|fffd||fffd||fffd||fffd||510||fffd|p|fffd||303|_|fffd|~|fffd|[|fffd|V|fffd||fffd||fffd|[|fffd|Y
        '|fffd||fffd||fffd|E|fffd||fffd||fffd||fffd||fffd||257|v|fffd|f|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||7ce||fffd||fffd||210||fffd||fffd||14c||fffd||fffd||fffd| -> |fffd|{|fffd||fffd||fffd||251||fffd||fffd|v|fffd||fffd||fffd||b0a4||fffd||fffd|
        For i = 2 To series_num
            Set NS = .SeriesCollection.NewSeries
            With NS
                .Name = ERlineprefix & tgt(1, i)
                ent = 1
                ret = 1
                ef = Split(extend_flag(i - 2), ":")
                loopnum = lineNum(1)
                ' |fffd||fffd||fffd|t|fffd||202||fffd||fffd||fffd||fffd|A|fffd||702||fffd||fffd||355|s|fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)|fffd||fffd||fffd||fffd||60a4||fffd||202||70bb||fffd||fffd||fffd||34c||fffd||fffd||202||fffd|
                If nondatefg = "misc" Or fumeidatefg = "fumei" Then
                    loopnum = loopnum - 1
                End If
                For r = 2 + 1 To loopnum
                    If tgt(r, i * 3 + 1) <> 0 Then
                        If ent = 1 Then
                            ent = r
                        End If
                        ret = r
                    End If
                Next r
                If ef(0) = "True" Then
                    ent = 1
                End If
                If ef(1) = "True" Then
                    ret = series_num + 2
                End If
                
                If ent <> ret Then
                    .XValues = "={" & (ent - 2) & "," & (ret - 2) & "}"
                    .Values = "={" & (i - 1) & "," & (i - 1) & "}"
                    .BubbleSizes = "='" & gpdataWT.Name & "'!R" & ent & "C" & (i * 3 + 1) & ",'" & gpdataWT.Name & "'!R" & ret & "C" & (3 * i + 1)
                    
                    ' |fffd|o|fffd||fffd||fffd||fffd||510||fffd||fffd|}|fffd||fffd|(trendline|fffd|g|fffd|p) 'TODO |fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||fffd||282||24d||fffd||fffd||d0b9||fffd||fffd||fffd||fffd|
                    If line_on = "on" Then
                        .Trendlines.Add Type:=xlLinear, Name:="Trend" & i
                        With .Trendlines(1).Border
                            .color = RGB(0, 128, 0) '#008000
                            .Weight = xlHairline
                            .LineStyle = xlContinuous
                        End With
                    End If
                    ' |fffd|n|fffd||fffd||30a||6c2||354||fffd|\|fffd||fffd|
                    .Border.LineStyle = xlNone
                    .Interior.ColorIndex = xlNone
                End If
            End With
        
        Next i
        .ChartGroups(1).SizeRepresents = xlSizeIsWidth
        .ChartGroups(1).BubbleScale = 30
        ' |fffd|c|fffd||189||fffd||fffd||fffd||fffd|X|fffd|J|fffd|X|fffd|J|fffd||30f||a347|
        If series_num < 10 And lineNum(1) < 15 Then
            .ChartGroups(1).BubbleScale = 50
        ElseIf lineNum(1) > 30 Then
            .ChartGroups(1).BubbleScale = 23
            If lineNum(1) > 30 Then
                .ChartGroups(1).BubbleScale = 18
            End If
        Else
            .ChartGroups(1).BubbleScale = 30
        End If

        ' |fffd||fffd||fffd||310||752||fffd|
        With .Axes(xlCategory)
            ' |fffd|l|fffd||fffd||fffd||64fe||fffd||fffd||fffd||113||fffd||fffd||a35e||fffd||fffd|
            .MinimumScale = 0 ' |fffd|_|fffd|~|fffd|[|fffd||142||402||182||8d|s|fffd||fffd||1c9||fffd||fffd||fffd||fffd||102||fffd||fffd||90bd||fffd||fffd|
            .MaximumScale = lineNum(1) - 1
            If lineNum(1) > 15 Then
                .MinorUnit = 1
                .MajorUnit = 1
            Else
                .MinorUnit = 1
                .MajorUnit = 1
            End If
            .HasMajorGridlines = True
            .ReversePlotOrder = False
            .ScaleType = xlLinear
            With .TickLabels
            '    '.Font.ColorIndex = 2
            '    '.Interior.ColorIndex = 2
               .NumberFormatLocal = " "
            End With
            With .MajorGridlines.Border
                If Application.Version >= 12 Then
                    .color = ProjectCommon.getExcelRGB(tmcolors(10))
                Else
                    .ColorIndex = gItemColorIndex(10)
                End If
            End With
            '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||1c9||fffd|
            .HasTitle = True
            .AxisTitle.Text = gpdataWT.Cells(2, 1).Text
            .AxisTitle.Select  '|fffd||fffd||fffd||302||702||712||1c9||fffd||fffd||fffd||fffd||fffd||181|A|fffd||fffd||fffd||18f|d|fffd||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||302||148||693||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|
               Selection.Top = 30
        End With
        
        With .Axes(xlValue)
            .ReversePlotOrder = True
            .MinimumScale = 0
            .MajorUnit = 1
            .MinorUnit = 1
            .MajorTickMark = xlTickMarkNone
            .HasMajorGridlines = True
            .MaximumScale = series_num
            '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||1c9||fffd|
            .HasTitle = True
            .AxisTitle.Text = gpdataWT.Cells(1, 1).Text
            .AxisTitle.Select  '|fffd||fffd||fffd||302||702||712||1c9||fffd||fffd||fffd||fffd||fffd||181|A|fffd||fffd||fffd||18f|d|fffd||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||302||148||693||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|
               Selection.Left = 10
               
            With .MajorGridlines.Border
                If Application.Version >= 12 Then
                    .color = ProjectCommon.getExcelRGB(tmcolors(10))
                Else
                    .ColorIndex = gItemColorIndex(10)
                End If
            End With
            ' |fffd|c|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||302||fffd||fffd||7c2||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||93c8||fffd||fffd|
            With .TickLabels
                ' |fffd||fffd||fffd||30f||fffd||502||fffd||fffd||fffd|15|fffd||fffd||fffd||fffd|+...|fffd||702||151||389||fffd||fffd|o|fffd||fffd||fffd||fffd|
                '.Font.Size = 72 'TODO |fffd||142||fffd||fffd||fffd||38d||fffd||fffd||682||317|l|fffd|q|fffd||fffd||fffd||fffd||fffd||103|T|fffd|C|fffd|Y|fffd||12c90||7c2||fffd||fffd||fffd||60a4||fffd||242||fffd||fffd||fffd|
                '.Font.color = RGB(0, 204, 255) '#00ccff
                .NumberFormatLocal = "   "
            End With
        End With
        ' 2003 |fffd||142||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||195|\|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||a0b8||fffd|A|fffd|G|fffd||fffd||fffd|[|fffd||242||202||fffd|
        .PlotVisibleOnly = False
        For i = 1 To .SeriesCollection.Count
            nakami = 0
            Set sc = .SeriesCollection(i)
            If sc.Name = "XItem" Then
                ' |fffd||fffd||50f||fffd||303|V|fffd||fffd||fffd|[|fffd|Y|fffd||242||82||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||30d||fffd||fffd||696||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||90bd||fffd||7c2||250|F|fffd|X|fffd|s|fffd||fffd|
                For idx = 1 To sc.Points.Count
                    With sc.Points(idx)
                        With .DataLabel
                            .ShowSeriesName = True
                            .ShowBubbleSize = False
                            .HorizontalAlignment = xlLeft
                            '.VerticalAlignment = xlLeft
                            .ReadingOrder = xlContext
                            .Position = xlLabelPositionAbove
                            .Orientation = 45
                            .Font.Size = 9
                            If idx <> 1 Then
                                .Text = tgt(idx + 1, 1)
                            Else
                                .Text = ""
                            End If
                        End With
                        .Interior.ColorIndex = xlNone
                        .Border.ColorIndex = xlNone
                    End With
                Next idx
            ElseIf Strings.Left(sc.Name, Len(ERlineprefix)) <> ERlineprefix Then
                For idx = 1 To sc.Points.Count
                    If idx = 1 Then
                        With sc.Points(idx)
                            With .DataLabel
                                .ShowSeriesName = True
                                .ShowBubbleSize = False
                                .HorizontalAlignment = xlLeft
                                '.VerticalAlignment = xlLeft
                                .ReadingOrder = xlContext
                                .Position = xlLabelPositionLeft
                                .Orientation = xlHorizontal
                                .Font.Size = 9
                            End With
                    
                            ' |fffd||fffd|\|fffd||fffd|
                            .Border.LineStyle = xlNone
                            .Interior.ColorIndex = xlNone
                        End With
                    ElseIf tgt(idx + 1, i * 3 + 1) <> 0 Then
                        With sc.Points(idx)
                            ' |fffd||fffd||fffd|NN%|fffd||202||302||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|
                            Dim pt_rank As Double
                            If tgt_jitu(i, idx + 1) >= 100 Then
                                nakami = Application.WorksheetFunction.Round(tgt_jitu(i, idx + 1), 0)
                                
                            ElseIf tgt_jitu(i, idx + 1) <= 1 Then
                                nakami = Application.WorksheetFunction.Round(tgt_jitu(i, idx + 1), 2)
                            Else
                                nakami = Application.WorksheetFunction.Round(tgt_jitu(i, idx + 1), 1)
                            End If
                            If UBound(valueranking) >= 2 Then
                                For r = 0 To UBound(valueranking)

                                    If nakami = val(valueranking(r)) Then
                                        pt_rank = (r) / (UBound(valueranking)) * 100
                                        Exit For
                                    End If
                                Next r
                        
                                If pt_rank > 95 Then
                                    cidx = 9
                                ElseIf pt_rank > 85 Then
                                    cidx = 8
                                ElseIf pt_rank > 70 Then
                                    cidx = 7
                                ElseIf pt_rank > 55 Then
                                    cidx = 6
                                ElseIf pt_rank > 40 Then
                                    cidx = 5
                                ElseIf pt_rank > 25 Then
                                    cidx = 4
                                ElseIf pt_rank > 10 Then
                                    cidx = 3
                                ElseIf pt_rank > 6 Then
                                    cidx = 2
                                ElseIf pt_rank > 3 Then
                                    cidx = 1
                                Else
                                    cidx = 0
                                End If
                            Else
                                ' |fffd|v|fffd|f|fffd||fffd||fffd||fffd||88||209||fffd||fffd||30f||a347||fffd|A
                                If nakami <= val(valueranking(0)) Then
                                    cidx = 0
                                Else
                                    cidx = 9
                                End If
                               
                            End If
                           ' |fffd||6c2||309||fffd||fffd||fffd||fffd||fffd||752||fffd|
                            .Border.Weight = xlThin
                            If Application.Version >= 12 Then
                                .Border.color = ProjectCommon.getExcelRGB(tmcolors(10))
                                .Interior.color = ProjectCommon.getExcelRGB(tmcolors(cidx))
                            Else
                                .Border.ColorIndex = gItemColorIndex(10)
                                .Interior.ColorIndex = gItemColorIndex(cidx)
                            End If

                            With .DataLabel
                                If uchiwake_on = "on" And nakami > 0 Then
                                    .Text = nakami
                                    .Font.Size = 8
                                Else
                                    .Text = " "
                                End If
                            End With
                        End With
                    End If
                Next idx
            End If
        Next i
    End With
    
    chart1.PlotArea.Select
    With Selection
         .Width = 600
        .Left = 100
    End With
    'Worksheets(getTrans("|fffd|O|fffd||fffd||fffd|t")).Activate
    With ActiveSheet
        Set btn = .Buttons.Add(10, 20, 100, 20)
        With btn
            .OnAction = "switchERline"
            .Characters.Text = getTrans("|fffd|o|fffd||fffd||fffd||fffd||510||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
            .AutoScaleFont = False
            .Locked = True
            .Name = getTrans("|fffd|o|fffd||fffd||fffd||fffd||510||fffd||fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
            With .Font
                .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                .FontStyle = "|fffd|W|fffd||fffd|"
                .Size = 7
            End With
        End With
        
        Set btn2 = .Buttons.Add(10, 50, 100, 20)
        With btn2
            .OnAction = "'switchTLlabel'"
            .Characters.Text = getTrans("|fffd|l|fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
            .AutoScaleFont = False
            .Locked = True
            .Name = getTrans("|fffd|l|fffd||315|\|fffd||fffd|/|fffd||fffd|\|fffd||fffd|")
            With .Font
                .Name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
                .FontStyle = "|fffd|W|fffd||fffd|"
                .Size = 8
            End With
        End With
        
    End With
End Sub
  
Private Sub switchERline()
    Application.ScreenUpdating = False
    ' |fffd|o|fffd||fffd||fffd||fffd||510||fffd||fffd|\|fffd||fffd||fffd||310||602||fffd||582||fffd|
    Set sc = ActiveChart.SeriesCollection
    'pt_count = sc(1).Points.Count
    'Set gpdataWT = Worksheets(getTrans("|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"))
    'tgt = gpdataWT.Range(gpdataWT.Cells(1, 1), gpdataWT.Cells(xend, yend))
    For i = 2 To sc.Count
        With sc(i)
            If Strings.Left(.Name, Len(ERlineprefix)) = ERlineprefix Then
                If .Trendlines.Count <> 0 Then
                    'With .Trendlines(1)
                    .Trendlines(1).Delete
                    'End With
                Else
                    If .BubbleSizes <> "={0}" Then
                        .Trendlines.Add
                        With .Trendlines(1).Border
                            .color = RGB(0, 128, 0)   '#008000
                            .Weight = xlThin
                            .LineStyle = xlContinuous
                        End With
                    End If
                End If
            End If
        End With
    Next i
    Application.ScreenUpdating = True
End Sub

Private Sub switchTLlabel()
    readTrans ("data\bc_trans.txt")
    Application.ScreenUpdating = False
    ' |fffd|l|fffd|\|fffd||fffd||fffd||310||602||fffd||582||fffd|
    Set sc = ActiveChart.SeriesCollection
    Set dataWT = Worksheets(getTrans("|fffd|f|fffd|[|fffd|^"))
    yoko = sc(1).Points.Count
    Set tgt_jitu = dataWT.range(dataWT.Cells(1, 1), dataWT.Cells(sc.Count, yoko))
    
    For i = 2 To sc.Count
        With sc(i)
            If Strings.Left(.Name, Len(ERlineprefix)) <> ERlineprefix Then
                For p = 2 To .Points.Count
                    nakami = tgt_jitu(i + 2, p + 1)
                    If nakami >= 100 Then
                        nakami = Application.WorksheetFunction.Round(nakami, 0)
                    ElseIf nakami <= 1 Then
                        nakami = Application.WorksheetFunction.Round(nakami, 2)
                    Else
                        nakami = Application.WorksheetFunction.Round(nakami, 1)
                    End If
                    If nakami <> 0 Then
                        With .Points(p).DataLabel
                            ' 2003|fffd||143||fffd||fffd|x|fffd||fffd||fffd||24b||d5d8e||fffd||fffd||fffd|}|fffd||fffd||fffd||fffd||fffd||fffd||181|A|fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||302||143|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
                            If .Text = " " Then
                                .Text = nakami 'Application.WorksheetFunction.Round(nakami, 1)
                            Else
                                .Text = " "
                            End If
                            
                        End With
                    End If
                Next p
            End If
        End With
    Next i
    Application.ScreenUpdating = True
End Sub


Attribute VB_Name = "params"
Dim params As Object   '|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|i|fffd|[|fffd|pDictionary
Function readParams(fname)
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74d||fffd||fffd||782||fffd||fffd||7c2||314|z|fffd||fffd|
    Dim splitted
    Set params = CreateObject("Scripting.Dictionary")
    
    Dim file As Object
    Set file = CreateObject("ADODB.Stream")
    With file
        .Type = 2
        .Charset = "UTF-8"
        .LineSeparator = 10  ' |fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||fffd| LF |fffd||242||fffd||fffd||fffd|B
        .Open
        .LoadFromFile (ThisWorkbook.Path & "\" & fname)

        '|fffd||14f|I|fffd|s|fffd||702||143||fffd||fffd|[|fffd|v|fffd||fffd||fffd||fffd|
        Do While Not .EOS
            '|fffd||fffd||fffd||30d|s|fffd||fffd||1c2||74e||fffd||fffd|
            splitted = Split(.readtext(-2), Chr(9))
            If UBound(splitted) = 1 Then
                params(splitted(0)) = splitted(1)
            End If
        Loop

        '|fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||fffd||82||fffd||fffd||fffd|
        .Close
    End With
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd|
    Set file = Nothing
End Function

Function getParams(k As String, Optional defaultStr As String = "")
    If params(k) = "" Then
        getParams = defaultStr
    Else
        getParams = params(k)
    End If
End Function


' InQuest injected base64 decoded content
' ZrH+
' bz{C

INQUEST-PP=macro
