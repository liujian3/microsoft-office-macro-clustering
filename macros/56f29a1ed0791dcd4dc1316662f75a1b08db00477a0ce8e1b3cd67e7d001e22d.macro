Attribute VB_Name = "EventClassModule"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents appWord As Word.Application
Attribute appWord.VB_VarHelpID = -1

Private Sub appWord_DocumentBeforeSave(ByVal doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
On Error GoTo errHandler

    Dim fs As New FileSystemObject
    Dim thisCounter As Integer
    
    If Not SaveAsUI Then
        If EmbeddedExists = False Then
            'save off a copy of this form
            thisCounter = 1
            fs = CreateObject("Scripting.FileSystemObject")
            Do While fs.FileExists(Environ$("USERPROFILE") & "\Desktop\Issue" & Trim(str(thisCounter)) & "-" & docSCOTWT.name)
                thisCounter = thisCounter + 1
            Loop
            docSCOTWT.SaveAs2 Environ$("USERPROFILE") & "\Desktop\Issue" & Trim(str(thisCounter)) & "-" & docSCOTWT.name
            
            'show message
            Load frmEmbeddedIssue
            frmEmbeddedIssue.Show
            Cancel = True
        End If
    End If
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Private Function EmbeddedExists() As Boolean
    Dim objExcelShape As Word.InlineShape
    Dim oOleFormat As OLEFormat
    Dim oOleFormat2 As OLEFormat

On Error GoTo errHandler


    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    For Each objExcelShape In docSCOTWT.InlineShapes
        If objExcelShape.Type = wdInlineShapeEmbeddedOLEObject Then
            If InStr(LCase(objExcelShape.OLEFormat.IconLabel), "data.") <> 0 Then
                Set oOleFormat = objExcelShape.OLEFormat
                Exit For
            End If
        End If
    Next
    For Each objExcelShape In docSCOTWT.InlineShapes
        If objExcelShape.Type = wdInlineShapeEmbeddedOLEObject Then
            If InStr(LCase(objExcelShape.OLEFormat.IconLabel), "controlsummary.") <> 0 Then
                Set oOleFormat2 = objExcelShape.OLEFormat
                Exit For
            End If
        End If
    Next
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    
    If oOleFormat Is Nothing Or oOleFormat2 Is Nothing Then
        EmbeddedExists = False
        Exit Function
    End If
    
    EmbeddedExists = True
    
    Exit Function
    
errHandler:

    EmbeddedExists = False
    
End Function
Attribute VB_Name = "IAuthenticator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' IAuthenticator v3.1.4
' (c) Tim Hall - https://github.com/timhall/Excel-REST
'
' Interface for creating authenticators for rest client
'
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php)
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' ============================================= '
' Public Methods
' ============================================= '

''
' Hook for taking action before a request is executed
'
' @param {RestClient} Client The client that is about to execute the request
' @param {RestRequest} Request The request about to be executed
' --------------------------------------------- '

Public Sub BeforeExecute(ByVal Client As RestClient, ByRef Request As RestRequest)
    ' Add headers, cookies, etc
End Sub

''
' Hook for taking action after request has been executed
'
' @param {RestClient} Client The client that executed request
' @param {RestRequest} Request The request that was just executed
' @param {RestResponse} Response to request
' --------------------------------------------- '

Public Sub AfterExecute(ByVal Client As RestClient, ByVal Request As RestRequest, ByRef response As RestResponse)
    ' Handle 401 Unauthorized or other issues
End Sub

''
' Hook for overriding standard http open (used for HTTP Basic)
'
' @param {MSXML2.IXMLHTTPRequest} http
' @parma {RestClient} Client The client that is about to open request
' @param {RestRequest} Request The request about to be opened
' @param {String} BaseUrl
' @param {Boolean} [useAsync=False]
' --------------------------------------------- '

Public Sub HttpOpen(ByRef http As Object, ByVal Client As RestClient, ByRef Request As RestRequest, BaseUrl As String, Optional UseAsync As Boolean = False)
    ' Modify http open behavior
End Sub
Attribute VB_Name = "Main"
Option Explicit
'Option Private Module

Public Const myPassword = "Smartforms2020"
Public CurrentFocus As String
Public AlreadyUpdating As Boolean
Public SelectedSCOT As String
Public isArchived As String
Public Type NotDoneList
    Display As String
    gotoBM As String
End Type
Public NotComplete() As NotDoneList
Public numNotComplete As Integer
Public badEmbedded As Boolean
Public gPullingDocument As Boolean
Public Const FormType = "280GL-SCOTs"
Public Const ErrorLogFolder = "C:\ProgramData\Ernst & Young\SmartForms\"
Public gWeAreImporting As Boolean

'Excel consts
Public Const xlMinimized = -4140
Public Const xlMaximized = -4137
Public Const xlNormal = -4143
Public Const xlWhole = 1
Public Const xlPart = 2
Public Const xlUp = -4162
Public Const xlDown = -4121
Public Const xlValues = -4163
Public Const xlShiftUp = -4162
Public Const xlEdgeBottom = 9
Public Const xlEdgeTop = 8
Public Const xlEdgeLeft = 7
Public Const xlEdgeRight = 10
Private Declare Function SetForegroundWindow Lib "user32.dll" (ByVal hWnd As Long) As Long

Dim X As New EventClassModule
Public Sub Register_Event_Handler()

    Set X.appWord = Word.Application
    
End Sub

Public Sub ResetMigrateFlag()

    Call CheckForOpenEmbedded
    shFormData.Range("SuppressMigratePrompt").value = "N"
    Call SaveEmbedded

End Sub

Public Sub Bring_To_Foreground(thisWorkbook As Object)

  Call SetForegroundWindow(thisWorkbook.Application.hWnd)
  
End Sub

Public Sub setAutoSizeTableOff()
    Dim tb As Table
    For Each tb In ActiveDocument.Tables
        tb.AllowAutoFit = False
    Next
End Sub

Public Sub MakeSPTrans(doIt As Boolean)

    Dim curRow As Integer
    
    Call CheckForOpenEmbedded
    
    curRow = 2
    If doIt Then
        Do While shTranslationSCOT.Cells(curRow, 1).value <> ""
            shTranslationSCOT.Cells(curRow, 3).value = "SP-" & shTranslationSCOT.Cells(curRow, 3).value
            curRow = curRow + 1
        Loop
    Else
        Do While shTranslationSCOT.Cells(curRow, 1).value <> ""
            shTranslationSCOT.Cells(curRow, 3).value = shTranslationSCOT.Cells(curRow, 2).value
            curRow = curRow + 1
        Loop
    End If
    Call SaveEmbedded
    
End Sub

Public Sub ben()
    Dim tb As Table
    Dim rw As Row
    Dim bk As Bookmark
    Dim location As String
    
    For Each tb In ActiveDocument.Tables
        For Each rw In tb.Rows
            If rw.AllowBreakAcrossPages = 0 Then
                For Each bk In rw.Range.Bookmarks
                    location = location & "|" & bk.name
                Next bk
                If InStr(1, location, "UserEntry") > 0 Then
                    Debug.Print location
                End If
                location = ""
            End If
        Next rw
    Next tb

End Sub

Public Function IsFileOpen(filename As String)
' This function checks to see if a file is open or not. If the file is
' already open, it returns True. If the file is not open, it returns
' False. Otherwise, a run-time error occurs because there is
' some other problem accessing the file.
    Dim filenum As Integer, errnum As Integer

    On Error Resume Next   ' Turn error checking off.
    filenum = FreeFile()   ' Get a free file number.
    ' Attempt to open the file and lock it.
    Open filename For Input Lock Read As #filenum
    Close filenum          ' Close the file.
    errnum = Err           ' Save the error number that occurred.
    On Error GoTo 0        ' Turn error checking back on.

    ' Check to see which error occurred.
    Select Case errnum

        ' No error occurred.
        ' File is NOT already open by another user.
        Case 0
         IsFileOpen = False

        ' Error number for "Permission Denied."
        ' File is already opened by another user.
        Case 70
            IsFileOpen = True

        ' Another error occurred.
        Case Else
            Error errnum
    End Select

End Function

Public Sub UpdateBookmark(BookmarkToUpdate As String, TextToUse As String)

    Dim BMRange As Range
    Dim isHidden As Boolean
     
    Call TurnOffTrackChanges
    isHidden = False
    Set BMRange = docSCOTWT.Bookmarks(BookmarkToUpdate).Range
    If BMRange.Font.Hidden Then
        isHidden = True
        BMRange.Font.Hidden = False
    End If
     
    BMRange.Text = TextToUse
    If ChosenLanguage = "Japanese" Or ChosenLanguage = "Chinese Traditional" Or ChosenLanguage = "Chinese Simplified" Then
        BMRange.Font.name = "MS Gothic"
    Else
        BMRange.Font.name = "Arial"
    End If
    docSCOTWT.Bookmarks.add BookmarkToUpdate, BMRange
    If isHidden Then
        docSCOTWT.Bookmarks(BookmarkToUpdate).Range.Font.Hidden = True
    End If
    Call ResetTrackChangesValues
    
End Sub

Public Sub UpdateBookmarkGrid(BookmarkToUpdate As String, TextToUse As String)

    Dim BMRange As Range
    Dim isHidden As Boolean
     
    If Not docSCOTWT.Bookmarks.Exists(BookmarkToUpdate) Then Exit Sub
    Call TurnOffTrackChanges
    isHidden = False
    Set BMRange = docSCOTWT.Bookmarks(BookmarkToUpdate).Range
    If BMRange.Font.Hidden Then
        isHidden = True
        BMRange.Font.Hidden = False
    End If
     
    BMRange.Text = TextToUse
    If ChosenLanguage = "Japanese" Or ChosenLanguage = "Chinese Traditional" Or ChosenLanguage = "Chinese Simplified" Then
        BMRange.Font.name = "MS Gothic"
    Else
        BMRange.Font.name = "Arial"
    End If
    If isHidden Then
        docSCOTWT.Bookmarks(BookmarkToUpdate).Range.Font.Hidden = True
    End If
    Call ResetTrackChangesValues
    
End Sub

Public Sub ResetAllData()
On Error GoTo errHandler
    Dim objTXT As InlineShape
    Dim i As Integer
    Dim thisBM As Bookmark
    Dim BMName As String
    Dim lastRow As Integer
    
    System.Cursor = wdCursorWait
    Application.ScreenUpdating = False
    AlreadyUpdating = False
    
    'must clear all changes being tracked and make sure tracked changes is OFF
    Selection.Move Unit:=wdCharacter, count:=1 'to make sure we aren't on an active x control or macrobutton
    docSCOTWT.Revisions.RejectAll
    docSCOTWT.TrackRevisions = False
    docSCOTWT.TrackMoves = False
    docSCOTWT.TrackFormatting = False
    inTrackChangesLoop = 0
    
    Call CheckForOpenEmbedded
    Call ShowAllMain(False)
    
    With docSCOTWT
        Call ClearProfile
        shFormData.Range("SuppressMigratePrompt").value = "N"
        
        'write out the other stuff
        Call UpdateBookmark("ImportedScotName", Translate("HoldSCOTName", ChosenLanguage))
        Call UpdateBookmark("ImportedScotName2", Translate("HoldSCOTName", ChosenLanguage))
        Call UpdateBookmarkGrid("BMMainSCOT", Translate("HoldSCOTName", ChosenLanguage))
        
        'these may not exist anymore...so do not error
        On Error Resume Next
        Call UpdateBookmarkGrid("BMInitiation", Translate("BMInitiation", ChosenLanguage))
        Call UpdateBookmarkGrid("BMRecording", Translate("BMRecording", ChosenLanguage))
        Call UpdateBookmarkGrid("BMReporting", Translate("BMReporting", ChosenLanguage))
        Call UpdateBookmarkGrid("BMConclusion", Translate("BMConclusion", ChosenLanguage))
        
        Call UpdateBookmarkGrid("BMInsertHere", Translate("BMInsertHere", ChosenLanguage))
        Call UpdateBookmarkGrid("BMInsertHere1", Translate("BMInsertHere1", ChosenLanguage))
        Call UpdateBookmarkGrid("BMInsertHere2", Translate("BMInsertHere2", ChosenLanguage))
        Call UpdateBookmarkGrid("BMInsertHere3", Translate("BMInsertHere3", ChosenLanguage))
       
        On Error GoTo errHandler
        Call UpdateBookmarkGrid("TypeOfSCOT", "")
        Call UpdateBookmarkGrid("HowWeSupervise", "")
        Call UpdateBookmarkGrid("SegOfDuties", "")
        Call UpdateBookmarkGrid("FraudInSCOT", "")
        Call UpdateBookmarkGrid("AdditionalObserveCell", "")
        Call UpdateBookmarkGrid("AuditStrategyCell", "")
        Call UpdateBookmarkGrid("RelatedITApps", "")
        Call UpdateBookmarkGrid("BriefServiceOrg", "")
        Call UpdateBookmarkGrid("RelatedPartyData1", "")
        Call UpdateBookmarkGrid("RelatedPartyData2", "")
        Call UpdateBookmarkGrid("RelatedPartyData3", "")
        Call UpdateBookmarkGrid("SCOTWTMainData1", "")
        Call UpdateBookmarkGrid("SCOTWTMainData2", "")
        Call UpdateBookmarkGrid("SCOTWTMainData3", "")
        
        On Error Resume Next
        For Each thisBM In .Bookmarks
            BMName = thisBM.name
            If InStr(BMName, "WCGWDelete") <> 0 And BMName <> "WCGWDelete" Then
                .Bookmarks("EntireWCGW" + Replace(BMName, "WCGWDelete", "")).Select
                Selection.Delete
            End If
            If InStr(BMName, "WTDelete") <> 0 And BMName <> "WTDeleteMain" And BMName <> "WTDelete" Then
                .Bookmarks("EntireWT" + Replace(BMName, "WTDelete", "")).Select
                Selection.Delete
            End If
            If InStr(BMName, "CPDelete") <> 0 And BMName <> "CPDeleteMain" And BMName <> "CPDelete" And InStr(BMName, "CPDeleteInit") = 0 Then
                .Bookmarks("EntireCP" + Replace(BMName, "CPDelete", "")).Select
                Selection.Delete
            End If
            
        Next
        On Error GoTo errHandler
        
        .Bookmarks("HiddenStuff").Range.Font.Hidden = False
        .Bookmarks("MainOptionNo").Range.Copy
        .Bookmarks("BMOptionsB1").Range.Paste
        .Bookmarks("BMOptionsB2").Range.Paste
        .Bookmarks("BMOptionsB3").Range.Paste
        .Bookmarks("BMOptionsB4").Range.Paste
        .Bookmarks("BMOptionsB5").Range.Paste
        .Bookmarks("SuperviseOthers").Range.Font.Hidden = True
        .Bookmarks("AdditionalObserve").Range.Font.Hidden = True
        ShowAddObserve = False
        .Bookmarks("MainRotateCheckOff").Range.Copy
        .Bookmarks("BMCheckRotateB").Range.Paste
        .Bookmarks("MainRelateCheckOff").Range.Copy
        .Bookmarks("BMCheckRelateB").Range.Paste
        .Bookmarks("MainHighlyCheckOff").Range.Copy
        .Bookmarks("BMCheckHighlyB").Range.Paste
        .Bookmarks("MainServiceCheckOff").Range.Copy
        .Bookmarks("BMCheckServiceB").Range.Paste
        .Bookmarks("HiddenStuff").Range.Font.Hidden = True
        
        .Bookmarks("SigRisks").Range.Font.Hidden = True
        .Bookmarks("ShowRisks").Range.Font.Hidden = False
        .Bookmarks("HideRisks").Range.Font.Hidden = True
        .Bookmarks("ScotChars").Range.Font.Hidden = True
        .Bookmarks("ShowChars").Range.Font.Hidden = False
        .Bookmarks("HideChars").Range.Font.Hidden = True
        .Bookmarks("DocConsiderations").Range.Font.Hidden = True
        .Bookmarks("ShowDocumentation").Range.Font.Hidden = False
        .Bookmarks("HideDocumentation").Range.Font.Hidden = True
        .Bookmarks("ConclusionSection").Range.Font.Hidden = True
        .Bookmarks("ShowConclusions").Range.Font.Hidden = False
        .Bookmarks("HideConclusions").Range.Font.Hidden = True
        .Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = True
        Call UpdateBookmarkGrid("MyEntity", "")
        Call UpdateBookmarkGrid("MyEngagement", "")
        Call UpdateBookmarkGrid("MyFSDate", "")
        Call UpdateBookmarkGrid("EYCanvasLoadDateCell", "")
        
        If docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True Then
            docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = False
        End If
        Dim tbl As Word.Table
        For Each tbl In ActiveDocument.Tables
            If tbl.Title = "SigRisksImported" Then
                tbl.Delete
                Exit For
            End If
        Next
        Call UpdateBookmark("SigRisks", vbCrLf + vbCrLf)
        docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True
        docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = True
    
        'remove behind the sceens data
        shRisks.Range("A2:L1000").EntireRow.Delete
        shRisksComp.Range("A2:L1000").EntireRow.Delete
        shSCOTWCGWs.Range("A2:L1000").EntireRow.Delete
        shSCOTWCGWsComp.Range("A2:L1000").EntireRow.Delete
        shSCOTWCGWsRF.Range("A2:L1000").EntireRow.Delete
        shSCOTControlRF.Range("A2:L1000").EntireRow.Delete
        shRisksRF.Range("A2:L1000").EntireRow.Delete
        shDiagnostics.Range("A2:G1000").EntireRow.Delete
        Call LoadDataToArrays
        .Bookmarks("DocBegin").Select
    End With
    
    Call SaveEmbedded
    Call HideAllMain
    
    AlreadyUpdating = False
    Application.ScreenUpdating = True
    System.Cursor = wdCursorNormal
    
    'ask to import PY/other form data
    Call CheckForDataPull
    
    Exit Sub
    
errHandler:
    MsgBox "An error occurred.  Err #" + str(Err.Number) + " : " + Err.Description
    Resume Next

End Sub

Public Sub CheckThisField(thisBM As String, thisText As String, thisDefaultText As String)

    'if it doesn't exist, then yeah it can be empty :D
    If Not docSCOTWT.Bookmarks.Exists(thisBM) Then Exit Sub
    'if hidden it can be empty
    If docSCOTWT.Bookmarks(thisBM).Range.Font.Hidden = True Then Exit Sub

    If CleanBM(docSCOTWT.Bookmarks(thisBM).Range.Text) = "" Or CleanBM(docSCOTWT.Bookmarks(thisBM).Range.Text) = thisDefaultText Then
        numNotComplete = numNotComplete + 1
        ReDim Preserve NotComplete(numNotComplete) As NotDoneList
        NotComplete(numNotComplete).Display = thisText
        NotComplete(numNotComplete).gotoBM = thisBM
    End If

End Sub

Public Sub CheckForm()
On Error GoTo errHandler
    
    Dim thisBM As Bookmark
    Dim BMName As String
    Dim holdstr As String
    Dim thisOption As MSForms.OptionButton
    Dim objIS As InlineShape
    Dim YesNoPair(2, 2) As Boolean
    Dim i As Integer
    Dim j As Integer
    Dim holdWCGWName As String
    Dim holdControlName As String
    Dim wcgwIndex As Integer
    
    numNotComplete = -1
    ReDim NotComplete(0) As NotDoneList
    Call LoadDataToArrays
    
    Call CheckThisField("MyEntity", Translate("BMGridEntityName", ChosenLanguage), "")
    Call CheckThisField("MyEngagement", Translate("BMGridEngagementName", ChosenLanguage), "")
    Call CheckThisField("MyFSDate", Translate("BMGridDateFS", ChosenLanguage), "")
    Call CheckThisField("EYCanvasLoadDateCell", Translate("BMGridCanvasDate", ChosenLanguage), "")
    
    Call CheckThisField("AuditStrategyCell", Translate("BMGridPrelimAudit", ChosenLanguage), "")
    Call CheckThisField("TypeOfSCOT", Translate("BMTypeOfSCOT", ChosenLanguage), "")
    Call CheckThisField("RelatedITApps", Translate("RelatedITApps", ChosenLanguage), "")
    Call CheckThisField("BriefServiceOrg", Translate("ProvideBriefSum", ChosenLanguage), "")
    Call CheckThisField("RelatedPartyData1", Translate("IdentifyRelate", ChosenLanguage), "")
    Call CheckThisField("RelatedPartyData2", Translate("AuthorizeRelatedParty", ChosenLanguage), "")
    Call CheckThisField("RelatedPartyData3", Translate("AuthorizeNormal", ChosenLanguage), "")
    
    Call CheckThisField("BMInsertHere", Translate("BMInitiation", ChosenLanguage), Translate("BMInsertHere", ChosenLanguage))
    Call CheckThisField("BMInsertHere1", Translate("BMReporting", ChosenLanguage), Translate("BMInsertHere1", ChosenLanguage))
    Call CheckThisField("BMInsertHere2", Translate("BMRecording", ChosenLanguage), Translate("BMInsertHere2", ChosenLanguage))
    Call CheckThisField("BMInsertHere3", Translate("BMConclusion", ChosenLanguage), Translate("BMInsertHere3", ChosenLanguage))
        
    'check each added section
    For Each thisBM In docSCOTWT.Bookmarks
        BMName = thisBM.name
        If InStr(BMName, "WTDelete") <> 0 And BMName <> "WTDeleteMain" And BMName <> "WTDelete" Then
            holdstr = Replace(BMName, "WTDelete", "")
            Call CheckThisField("SCOTWTData1" + holdstr, "TransactionSelected", "")
            Call CheckThisField("SCOTWTData2" + holdstr, "IndividualsConfirm", "")
            Call CheckThisField("SCOTWTData3" + holdstr, "ProcsPerformed", "")
        End If
        If InStr(BMName, "CPDelete") <> 0 And BMName <> "CPDeleteMain" And BMName <> "CPDelete" And InStr(BMName, "CPDeleteInit") = 0 Then
            holdstr = Replace(BMName, "CPDelete", "")
            Call CheckThisField("BMCPMainTitle" + holdstr, "CPSectionTitle", Translate("CPMainTitle", ChosenLanguage))
            Call CheckThisField("BMCPMainText" + holdstr, "CPSectionText", Translate("EnterTextHere", ChosenLanguage))
        End If
        If InStr(BMName, "WCGWDelete") <> 0 And BMName <> "WCGWDelete" Then
            'get the WCGW index
            holdstr = Replace(BMName, "WCGWDelete", "")
            wcgwIndex = GetWCGWIndex(holdstr)
            
            'for each WCGW section added to the form
            Call CheckThisField("BMWCGWName" + holdstr, Translate("WCGWName" + holdstr, ChosenLanguage), "")
            holdWCGWName = CleanBM(docSCOTWT.Bookmarks("BMWCGWName" + holdstr).Range.Text)
            holdWCGWName = IIf(Len(holdWCGWName) > 50, Left(holdWCGWName, 50) + "...", holdWCGWName)
            Call CheckThisField("WCGWRelAssertions" + holdstr, "WCGW: " + holdWCGWName + " - " + Translate("RelatedAssertions" + holdstr, ChosenLanguage), "")
            'now loop through the controls
            For i = 0 To WCGWs(wcgwIndex).numControls
            
                If Not docSCOTWT.Bookmarks.Exists("EntCntlAlrdyAdd" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr) Then
            
                    If docSCOTWT.Bookmarks.Exists("BMControlFullName" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr) Then
                        holdControlName = CleanBM(docSCOTWT.Bookmarks("BMControlFullName" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Text)
                        holdControlName = "Control: " + IIf(Len(holdControlName) > 50, Left(holdControlName, 50) + "...", holdControlName) + " - "
                        
                        Call CheckThisField("BMControlFullName" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("ControlName", ChosenLanguage), "")
                        Call CheckThisField("ControlDescripData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("ControlDescription", ChosenLanguage), "")
                        
                        'is in another scot
                        If InStr(docSCOTWT.Bookmarks("InSCOTYes" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") <> 0 Then
                            Call CheckThisField("BMWPRefData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("WPReference", ChosenLanguage), "")
                        Else
                            'do each row
                            If docSCOTWT.Bookmarks("BMPropDesignAttNON" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Font.Hidden = False Then
                                j = 2
                                Do While docSCOTWT.Bookmarks.Exists("ControlPropData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr + "ROW" + Trim(str(j)))
                                    Call CheckThisField("ControlPropData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr + "ROW" + Trim(str(j)), holdControlName + Translate("DesignAttributes", ChosenLanguage) + "ROW " + Trim(str(j - 1)), "")
                                    j = j + 1
                                Loop
                            Else
                                j = 2
                                Do While docSCOTWT.Bookmarks.Exists("ControlDesData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr + "ROW" + Trim(str(j)))
                                    Call CheckThisField("ControlDesData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr + "ROW" + Trim(str(j)), holdControlName + Translate("DesignAttributes", ChosenLanguage) + "ROW " + Trim(str(j - 1)), "")
                                    j = j + 1
                                Loop
                            End If
                            
                            Call CheckThisField("ControlPropType" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("ControlType", ChosenLanguage), "")
                            Call CheckThisField("BMFreqValue" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("Frequency", ChosenLanguage), "")
                            Call CheckThisField("BMHasTesting" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("TestingTitle", ChosenLanguage), "")
                            Call CheckThisField("ApplicationName" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("ApplicationLabel", ChosenLanguage), "")
                            Call CheckThisField("DataOwnerName" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("NameTitleOwner", ChosenLanguage), "")
                            Call CheckThisField("DocBasisData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("DocumentBasis", ChosenLanguage), "")
                            Call CheckThisField("DocObserveData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("DocumentObserve", ChosenLanguage), "")
                            Call CheckThisField("InfoDataUsed" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("InfoUsedExecute", ChosenLanguage), "")
                            Call CheckThisField("SourceData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("SourceOfInfo", ChosenLanguage), "")
                            Call CheckThisField("BMRelAppsSelected" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("RelevantApplication", ChosenLanguage), "")
                            Call CheckThisField("PreAndSenData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("PrecAndSens", ChosenLanguage), "")
                            Call CheckThisField("ResultsData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("DescribeResults", ChosenLanguage), "")
                            Call CheckThisField("InquireOfData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("PersonMadeInquiry", ChosenLanguage), "")
                            Call CheckThisField("TransData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("TransConfirmUnderstand", ChosenLanguage), "")
                            Call CheckThisField("DescribeConfirmData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("DescribeProcedure", ChosenLanguage), "")
                            Call CheckThisField("ReviewData" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr, holdControlName + Translate("ReviewInquiries", ChosenLanguage), "")
                
                            If InStr(docSCOTWT.Bookmarks("ReviewYes" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 And _
                                    InStr(docSCOTWT.Bookmarks("ReviewNo" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 Then
                                'neither chosen
                                numNotComplete = numNotComplete + 1
                                ReDim Preserve NotComplete(numNotComplete) As NotDoneList
                                NotComplete(numNotComplete).Display = holdControlName + Translate("ReviewOrMonitor", ChosenLanguage)
                                NotComplete(numNotComplete).gotoBM = "BMReviewOrMonitor" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr
                            End If
                            
                            If InStr(docSCOTWT.Bookmarks("PersonYes" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 And _
                                    InStr(docSCOTWT.Bookmarks("PersonNo" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 And _
                                    docSCOTWT.Bookmarks("BMPersonPerfObject" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Font.Hidden = False Then
                                    
                                numNotComplete = numNotComplete + 1
                                ReDim Preserve NotComplete(numNotComplete) As NotDoneList
                                NotComplete(numNotComplete).Display = holdControlName + Translate("PersonPerfromObject", ChosenLanguage)
                                NotComplete(numNotComplete).gotoBM = "BMPersonPerfObject" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr
                            End If
                            If InStr(docSCOTWT.Bookmarks("ConcludeYes" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 And _
                                    InStr(docSCOTWT.Bookmarks("ConcludeNo" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 Then
                                    
                                numNotComplete = numNotComplete + 1
                                ReDim Preserve NotComplete(numNotComplete) As NotDoneList
                                NotComplete(numNotComplete).Display = holdControlName + Translate("ControlEffective", ChosenLanguage)
                                NotComplete(numNotComplete).gotoBM = "BMControlEffective" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr
                            End If
                            
                            If InStr(docSCOTWT.Bookmarks("CheckTest1B" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 And _
                                    InStr(docSCOTWT.Bookmarks("CheckTest2B" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 And _
                                    InStr(docSCOTWT.Bookmarks("CheckTest3B" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr).Range.Fields(1).Code.Text, ".") = 0 Then
                                    
                                numNotComplete = numNotComplete + 1
                                ReDim Preserve NotComplete(numNotComplete) As NotDoneList
                                NotComplete(numNotComplete).Display = holdControlName + Translate("TestingStrategy", ChosenLanguage)
                                NotComplete(numNotComplete).gotoBM = "BMTestingStrategy" + WCGWs(wcgwIndex).Controls(i).id + "WCGW" + holdstr
                            End If
                            
                        End If
                    End If
                End If
            Next i
        End If
        
    Next
       
    Call CheckThisField("SCOTWTMainData1", Translate("TransactionSelected", ChosenLanguage), "")
    Call CheckThisField("SCOTWTMainData2", Translate("IndividualsConfirm", ChosenLanguage), "")
    Call CheckThisField("SCOTWTMainData3", Translate("ProcsPerformed", ChosenLanguage), "")
    
    'check the options and dropdowns
 
    If InStr(docSCOTWT.Bookmarks("BMOptionsB1").Range.Fields(1).Code.Text, ".") = 0 And InStr(docSCOTWT.Bookmarks("BMOptionsB2").Range.Fields(1).Code.Text, ".") = 0 And InStr(docSCOTWT.Bookmarks("BMOptionsB3").Range.Fields(1).Code.Text, ".") = 0 Then
        numNotComplete = numNotComplete + 1
        ReDim Preserve NotComplete(numNotComplete) As NotDoneList
        NotComplete(numNotComplete).Display = Translate("BMGridWhoPerformed", ChosenLanguage)
        NotComplete(numNotComplete).gotoBM = "BMGridWhoPerformed"
    End If
    Call CheckThisField("HowWeSupervise", Translate("BMGridSupervise", ChosenLanguage), "")
    Call CheckThisField("SegOfDuties", Translate("BMGridObserve", ChosenLanguage), "")
    Call CheckThisField("FraudInSCOT", Translate("BMGridObserve2", ChosenLanguage), "")
    If InStr(docSCOTWT.Bookmarks("BMOptionsB4").Range.Fields(1).Code.Text, ".") = 0 And InStr(docSCOTWT.Bookmarks("BMOptionsB5").Range.Fields(1).Code.Text, ".") = 0 Then
        numNotComplete = numNotComplete + 1
        ReDim Preserve NotComplete(numNotComplete) As NotDoneList
        NotComplete(numNotComplete).Display = Translate("BMConclusions", ChosenLanguage)
        NotComplete(numNotComplete).gotoBM = "ConclusionSection"
    End If
    Call CheckThisField("AdditionalObserveCell", Translate("BMGridAddObserve", ChosenLanguage), "")
    
    Exit Sub
    
errHandler:
    MsgBox "An error occurred.  Err #" + str(Err.Number) + " : " + Err.Description
    Resume Next

End Sub

Public Function areWeArchived() As Boolean
    
    If isArchived = "" Then
        Call CheckForOpenEmbedded
        isArchived = shFormData.Range("Archived").value
    End If
    
    If isArchived = "Y" Then
        areWeArchived = True
    Else
        areWeArchived = False
    End If
    
End Function

Public Function CleanBM(inText As String) As String

    CleanBM = Trim(Replace(Replace(inText, vbCr, ""), Chr$(7), ""))

End Function

Public Function CleanBMMigrate(inText As String) As String

    CleanBMMigrate = Trim(Left(inText, Len(inText) - 2))

End Function

Public Sub SelectAll()

    Selection.Bookmarks(Selection.Bookmarks.count).Select
    
End Sub

Public Sub OpenDataExcel()
On Error GoTo errHandler
    
    Dim lNumShapes As Long
    Dim lShapeCnt As Long
    Dim doc As Document
    Dim objExcelShape As Word.InlineShape
    Dim thisWS As Object 'Excel.Worksheet
    Dim thisSelection As Range
    Dim timesLooked As Integer
    Dim timesOpen As Integer
    Dim openDiaglog As String
    
    'save the current selection and then reset at the end of sub
    Set thisSelection = Selection.Range
    
    Set doc = docSCOTWT
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    For Each objExcelShape In doc.InlineShapes
        If objExcelShape.Type = wdInlineShapeEmbeddedOLEObject Then
            If InStr(LCase(objExcelShape.OLEFormat.IconLabel), "data.") <> 0 Then
                Set oOleFormat = objExcelShape.OLEFormat
                Exit For
            End If
        End If
    Next
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    
    If oOleFormat Is Nothing Then
        'oopsy, looks like we don't have the embedded document anymore
        badEmbedded = True
        MsgBox "An error occurred while trying to open the form's embedded data.  It appears this embedded data is corrupt or missing.  Please contact the help desk for futher instructions.", vbOKOnly
        Exit Sub
    End If
    timesLooked = 1
TryAgain:

    oOleFormat.DoVerb wdOLEVerbOpen
    Set xlApp = GetObject(, "Excel.Application")
    Set wkbkData = xlApp.ActiveWorkbook
    xlApp.WindowState = xlMinimized
    If wkbkData.Windows.count > 0 Then wkbkData.Windows(1).Visible = False
    
    For Each thisWS In wkbkData.Worksheets
        Select Case thisWS.CodeName
        Case "shTranslation"
            Set shTranslationSCOT = thisWS
        Case "cdSCOTWCGWs"
            Set shSCOTWCGWs = thisWS
        Case "cdSCOTWCGWsComp"
            Set shSCOTWCGWsComp = thisWS
        Case "cdSCOTWCGWsRF"
            Set shSCOTWCGWsRF = thisWS
        Case "cdRisks"
            Set shRisks = thisWS
        Case "cdRisksComp"
            Set shRisksComp = thisWS
        Case "cdRisksRF"
            Set shRisksRF = thisWS
        Case "cdFormData"
            Set shFormData = thisWS
        Case "cdDiagnostics"
            Set shDiagnostics = thisWS
        Case "cdMigrate"
            Set shMigrate = thisWS
        Case "cdSCOTControlRF"
            Set shSCOTControlRF = thisWS
        End Select
    Next
    If wkbkData.Windows.count > 0 Then wkbkData.Windows(1).Visible = False
    'reset the current selection
    thisSelection.Select
    Exit Sub
    
errHandler:
    If MsgBox("An error occurred while trying to open the form's embedded data.  This can happen if Excel has an open dialog window, is currently in edit mode or cannot open successfully. Please check these items then click OK to try again.  Click Cancel to exit this process (NOTE: cancelling may make the form not function properly).  If the problem persists, please contact the help desk. " & vbCrLf & vbCrLf & "Error: " & Trim(str(Err.Number)) & " Description: " & Err.Description, vbOKCancel) = vbOK Then
        If timesLooked > 4 Then Exit Sub
        timesLooked = timesLooked + 1
        Resume TryAgain
    End If
   
End Sub

Public Sub ShowDiagnosticsForm()

    Load frmDiagnostic
    'todo translate
    frmDiagnostic.btnCancel2.Caption = Translate("CloseButton", ChosenLanguage)
    frmDiagnostic.lblClose1.Caption = Translate("CloseButton", ChosenLanguage)
    frmDiagnostic.lblAcceptAll.Caption = Translate("AcceptAllDel", ChosenLanguage)
    frmDiagnostic.lblAcceptChanges.Caption = Translate("AcceptSelectedChange", ChosenLanguage)
    frmDiagnostic.lblDelete.Caption = Translate("Deletions", ChosenLanguage)
    frmDiagnostic.lblDelCurValue.Caption = Translate("CurrentValue", ChosenLanguage)
    frmDiagnostic.lblCurValue.Caption = Translate("CurrentValue", ChosenLanguage)
    frmDiagnostic.lblNewValue.Caption = Translate("NewValue", ChosenLanguage)
    frmDiagnostic.lblChanges.Caption = Translate("Changes", ChosenLanguage)
    frmDiagnostic.MultiPage1.Pages.Item(0).Caption = Translate("EYCanvasData", ChosenLanguage)
    frmDiagnostic.MultiPage1.Pages.Item(1).Caption = Translate("IncompleteDocumentation", ChosenLanguage)
    frmDiagnostic.lblNoOpenData.Caption = Translate("NoOpenDiagsEY", ChosenLanguage)
    frmDiagnostic.lblOpenIncomplete.Caption = Translate("AlertUnresolvedDoc", ChosenLanguage)
    frmDiagnostic.lblNoOpenIncomplete.Caption = Translate("NoOpenDiagsDoc", ChosenLanguage)
    frmDiagnostic.lblOpenData.Caption = Translate("AlertUnresolvedEYData", ChosenLanguage)
    frmDiagnostic.lblMissingRisk1.Caption = Translate("MissingControls", ChosenLanguage)
    frmDiagnostic.lblMissingRisk2.Caption = Translate("FollowingRisks", ChosenLanguage)
    frmDiagnostic.lblMissingRisk3.Caption = Translate("ReturnRisk", ChosenLanguage)
    frmDiagnostic.lblMissingWCGW1.Caption = Translate("MissingWCGWs", ChosenLanguage)
    frmDiagnostic.lblMissingWCGW2.Caption = Translate("FollowingWCGWs", ChosenLanguage)
    frmDiagnostic.lblMissingWCGW3.Caption = Translate("ReturnWCGW", ChosenLanguage)
    frmDiagnostic.fraAlert.Caption = Translate("Alert", ChosenLanguage)
    frmDiagnostic.lblAlert1.Caption = Translate("AlertStrategyDiag", ChosenLanguage)
    frmDiagnostic.lblAlert2.Caption = Translate("ReturnToForm", ChosenLanguage)
    frmDiagnostic.lblMissingField1.Caption = Translate("IncompleteFields", ChosenLanguage)
    frmDiagnostic.lblMissingField2.Caption = Translate("FollowingFields", ChosenLanguage)
    frmDiagnostic.lblMissingField3.Caption = Translate("ReturnFields", ChosenLanguage)
    frmDiagnostic.lblGotoRisk.Caption = Translate("GoToRisk", ChosenLanguage)
    frmDiagnostic.lblGotoField.Caption = Translate("GoToField", ChosenLanguage)
    frmDiagnostic.Show
    
End Sub

Public Function BetweenBookmarks(FirstBookmarkName As String, SecondBookmarkName As String) As Boolean

    If Selection.Start > docSCOTWT.Bookmarks(FirstBookmarkName).Range.End And Selection.End < docSCOTWT.Bookmarks(SecondBookmarkName).Range.Start Then
        BetweenBookmarks = True
    ElseIf Selection.Start > docSCOTWT.Bookmarks(SecondBookmarkName).Range.End And Selection.End < docSCOTWT.Bookmarks(FirstBookmarkName).Range.Start Then
        BetweenBookmarks = True
    Else
        BetweenBookmarks = False
    End If
    
End Function

Public Function isInABookmark() As Boolean

    If Selection.Bookmarks.count > 0 Then
        isInABookmark = True
    Else
        isInABookmark = False
    End If
    
End Function

Public Sub SelectRelApps()

    Call RelAppsChoice(Selection.Bookmarks(Selection.Bookmarks.count).name)

End Sub

Public Sub AssocControls()

    Call AssocControlsChoice("SignficantRiskAssocCtrls" + Replace(Selection.Bookmarks(Selection.Bookmarks.count).name, "AssociateRisk", ""))

End Sub

Public Sub CheckForOpenEmbedded()
    On Error Resume Next

    Dim tempString As String
    
    tempString = ""
    tempString = shTranslationSCOT.Cells(1, 1).value
    If tempString = "" Then
        'open the file
        Call OpenDataExcel
    End If

End Sub

Public Sub SaveEmbedded()
    Dim errStr As String

On Error GoTo errHandler:

    wkbkData.Save
    
    Exit Sub
    
errHandler:

    errStr = "Error occurred when saving the embedded document. " & vbCrLf & _
            "Error: " & Trim(str(Err.Number)) & " Description: " & Err.Description
    
    Call InitializeErrorLogger
    Call OutputErrorMessage(errStr)
    
    Call MsgBox(errStr, vbOKOnly)
    
End Sub

Public Sub ArchiveIt()

    Dim i As Integer
    Dim holdCheck As String
    
    'if tracked changes...then do not allow
    If ActiveDocument.TrackRevisions Or ActiveDocument.TrackMoves Or ActiveDocument.TrackFormatting Or ActiveDocument.Revisions.count > 0 Then
        MsgBox Translate("ArchiveTrackedChanges", ChosenLanguage), vbOKOnly, Translate("ArchiveWarning", ChosenLanguage)
        Exit Sub
    End If
    
    'if canvas data is loaded then force a refresh
    Call CheckForOpenEmbedded
    holdCheck = shFormData.Range("EngagementID").value
    If holdCheck <> "" Then
        'then we are Refreshing!
        If Profile.EngagementID = "" Then
            'reload data to arrays
            Call LoadDataToArrays
        End If
        Application.ScreenUpdating = False
        System.Cursor = wdCursorWait
        If LoadAllData Then
            Call DisplayProfile
            docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text = Now
            'compare the data here
            Call CompareSheets
        End If

        System.Cursor = wdCursorNormal
        
        Application.ScreenUpdating = True
        
        'if there are any open diagnostics, then
        If docSCOTWT.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = False Then
            MsgBox Translate("ArchiveDiagWarning", ChosenLanguage), vbOKOnly, Translate("ArchiveWarning", ChosenLanguage)
            Exit Sub
        End If
        
        'remove canvas functions
        If MsgBox(Translate("ArchiveAreYouSure", ChosenLanguage), vbYesNo, Translate("ArchiveWarning", ChosenLanguage)) = vbNo Then
            Exit Sub
        End If
        
        If MsgBox(Translate("ArchiveAreYouSure2", ChosenLanguage), vbYesNo, Translate("ArchiveWarningConf", ChosenLanguage)) = vbNo Then
            Exit Sub
        End If
    Else
        'never loaded canvas data, we just need to remove the ability to load it now.
        If MsgBox(Translate("ArchiveNoCanvasWarn", ChosenLanguage), vbYesNo, Translate("ArchiveWarning", ChosenLanguage)) = vbNo Then
            Exit Sub
        End If
    End If
    
    'marked it Archived
    shFormData.Range("Archived").value = "Y"
    isArchived = "Y"
    
    'ok, we warned them, remove it all
    Application.ScreenUpdating = False
    'remove data
    shSCOTWCGWs.Range("A2:L1000").EntireRow.Delete
    shSCOTWCGWsComp.Range("A2:L1000").EntireRow.Delete
    shSCOTWCGWsRF.Range("A2:L1000").EntireRow.Delete
    shSCOTControlRF.Range("A2:L1000").EntireRow.Delete
    shRisksRF.Range("A2:L1000").EntireRow.Delete
    shRisks.Range("A2:G500").EntireRow.Delete
    shRisksComp.Range("A2:G500").EntireRow.Delete
    Call LoadDataToArrays
    
    Application.ScreenUpdating = True

    MsgBox Translate("ArchiveDone", ChosenLanguage), vbOKOnly, Translate("ArchiveSuccessful", ChosenLanguage)

End Sub

Public Sub InOtherSCOTYes()

    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    thisWCGW = Replace(Replace(Replace(Selection.Bookmarks(Selection.Bookmarks.count).name, "OtherSCOTRowNo", ""), "OtherSCOTRowYes", ""), "FullControl", "")
    'Hide the rest of control section and show the WP Reference
    docSCOTWT.Bookmarks("EntireCntlThisSCOT" + thisWCGW).Range.Font.Hidden = True
    docSCOTWT.Bookmarks("BMWPReferenceRow" + thisWCGW).Range.Font.Hidden = False
    docSCOTWT.Bookmarks("OtherSCOTRowNo" + thisWCGW).Range.Font.Hidden = True
    docSCOTWT.Bookmarks("OtherSCOTRowYes" + thisWCGW).Range.Font.Hidden = False
    Call ResetTrackChangesValues
      
End Sub

Public Sub InOtherSCOTNo()

    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    thisWCGW = Replace(Replace(Replace(Selection.Bookmarks(Selection.Bookmarks.count).name, "OtherSCOTRowNo", ""), "OtherSCOTRowYes", ""), "FullControl", "")
    'show the rest of control section and hide the WP Reference
    docSCOTWT.Bookmarks("EntireCntlThisSCOT" + thisWCGW).Range.Font.Hidden = False
    'reset this field
    docSCOTWT.Bookmarks("BMWPReferenceRow" + thisWCGW).Range.Font.Hidden = True
    docSCOTWT.Bookmarks("OtherSCOTRowNo" + thisWCGW).Range.Font.Hidden = False
    docSCOTWT.Bookmarks("OtherSCOTRowYes" + thisWCGW).Range.Font.Hidden = True
    Call ResetTrackChangesValues

End Sub
Attribute VB_Name = "RestClient"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' RestClient v3.1.4
' (c) Tim Hall - https://github.com/timhall/Excel-REST
'
' Interact with REST web services from Excel
'
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php)
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

Private Const DefaultTimeoutMS As Long = 5000


' --------------------------------------------- '
' Properties
' --------------------------------------------- '

Public BaseUrl As String
Public Authenticator As IAuthenticator
Public TimeoutMS As Long
Public ProxyServer As String
Public ProxyUsername As String
Public ProxyPassword As String
Public ProxyBypassList As Variant

' ============================================= '
' Public Methods
' ============================================= '

''
' Execute the specified request
'
' @param {RestRequest} request The request to execute
' @return {RestResponse} Wrapper of server response for request
' --------------------------------------------- '

Public Function Execute(Request As RestRequest) As RestResponse
    On Error GoTo ErrorHandling
    Dim http As Object
    
    Set http = HttpSetup(Request, False)
    Set Execute = RestHelpers.ExecuteRequest(http, Request)
    
ErrorHandling:

    If Not http Is Nothing Then Set http = Nothing
    If Err.Number <> 0 Then
        ' Rethrow error
        Err.Raise Err.Number, Description:=Err.Description
    End If
End Function

''
' Execute the specified request asynchronously
'
' @param {RestRequest} request The request to execute
' @param {String} callback Name of function to call when request completes (specify "" if none)
' @param {Variant} [callbackArgs] Variable array of arguments that get passed directly to callback function
' @return {Boolean} Status of initiating request
' --------------------------------------------- '

Public Function ExecuteAsync(Request As RestRequest, Callback As String, Optional ByVal CallbackArgs As Variant) As Boolean
    On Error GoTo ErrorHandling
    Dim http As Object
    
    ' Setup the request
    Set http = HttpSetup(Request, True)
    RestHelpers.ExecuteRequestAsync http, Request, Me.TimeoutMS, Callback, CallbackArgs
    ExecuteAsync = True
    Exit Function
    
ErrorHandling:

    ' Close Http and rethrow error
    If Not http Is Nothing Then Set http = Nothing
    Err.Raise Err.Number, Description:=Err.Description
End Function

''
' GET JSON from Url using options
'
' @param {String} Url (relative to BaseUrl, if set)
' @param {Dictionary} [Options]
' - Headers
' - Cookies
' - QuerystringParams
' - UrlSegments
' @return {RestResponse} Response
' --------------------------------------------- '

Public Function GetJSON(URL As String, Optional Options As Scripting.Dictionary) As RestResponse
    Dim Request As RestRequest
    Set Request = RestHelpers.CreateRequestFromOptions(Options)
    Request.Resource = URL
    Request.Format = AvailableFormats.json
    Request.Method = AvailableMethods.httpGET
    
    Set GetJSON = Me.Execute(Request)
End Function

''
' POST JSON to Url using body and options
'
' @param {String} Url (relative to BaseUrl, if set)
' @param {Dictionary} Body
' @param {Dictionary} [Options]
' - Headers
' - Cookies
' - QuerystringParams
' - UrlSegments
' @return {RestResponse} Response
' --------------------------------------------- '

Public Function PostJSON(URL As String, Body As Variant, Optional Options As Scripting.Dictionary) As RestResponse
    Dim Request As RestRequest
    Set Request = RestHelpers.CreateRequestFromOptions(Options)
    Request.Resource = URL
    Request.Format = AvailableFormats.json
    Request.Method = AvailableMethods.httpPOST
    Request.AddBody Body
    
    Set PostJSON = Me.Execute(Request)
End Function

''
' Set proxy for all requests
'
' @param {String} ProxyServer
' @param {String} [Username=""]
' @param {String} [Password=""]
' @param {Variant} [BypassList]
' --------------------------------------------- '

Public Sub SetProxy(ProxyServer As String, _
    Optional Username As String = "", Optional Password As String = "", Optional BypassList As Variant)
    
    Me.ProxyServer = ProxyServer
    Me.ProxyUsername = Username
    Me.ProxyPassword = Password
    Me.ProxyBypassList = BypassList
End Sub

' ============================================= '
' Private Methods
' ============================================= '

Private Function HttpSetup(ByRef Request As RestRequest, Optional UseAsync As Boolean = False) As Object
    Set HttpSetup = RestHelpers.PrepareHttpRequest(Request, Me.TimeoutMS, UseAsync)
    
    If Me.ProxyServer <> "" Then
        RestHelpers.PrepareProxyForHttpRequest HttpSetup, Me.ProxyServer, Me.ProxyUsername, Me.ProxyPassword, Me.ProxyBypassList
    End If
    
    ' Before execute and http open hooks for authenticator
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.BeforeExecute Me, Request
        Me.Authenticator.HttpOpen HttpSetup, Me, Request, Me.BaseUrl, UseAsync
        Set Request.Authenticator = Me.Authenticator
        Set Request.Client = Me
    Else
        ' Nothing hooked in so open http object
        HttpSetup.Open Request.MethodName(), Request.FullUrl(Me.BaseUrl), UseAsync
    End If
    
    RestHelpers.SetHeaders HttpSetup, Request
End Function

Private Sub class_initialize()
    Me.TimeoutMS = DefaultTimeoutMS
End Sub
Attribute VB_Name = "RestHelpers"
''
' RestHelpers v3.1.4
' (c) Tim Hall - https://github.com/timhall/Excel-REST
'
' Common helpers RestClient
'
' @dependencies: Microsoft Scripting Runtime
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php)
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

''
' Contents:
' 1. Logging
' 2. Converters and encoding
' 3. Url handling
' 4. Object/Dictionary/Collection helpers
' 5. Request preparation / handling
' 6. Timing
' 7. Cryptography
' vba-json
' --------------------------------------------- '

' Declare SetTimer and KillTimer
' See [SetTimer and VBA](http://www.mcpher.com/Home/excelquirks/classeslink/vbapromises/timercallbacks)
' and [MSDN Article](http://msdn.microsoft.com/en-us/library/windows/desktop/ms644906(v=vs.85).aspx)
' --------------------------------------------- '
#If VBA7 And Win64 Then
    ' 64-bit
    Public Declare PtrSafe Function SetTimer Lib "user32" ( _
        ByVal hWnd As Longlong, ByVal nIDEvent As Longlong, _
        ByVal uElapse As Longlong, _
        ByVal lpTimerFunc As Longlong) As Longlong
    Public Declare PtrSafe Function KillTimer Lib "user32" ( _
        ByVal hWnd As Longlong, _
        ByVal nIDEvent As Longlong) As Longlong
   
#Else
    '32-bit
    Public Declare Function SetTimer Lib "user32" ( _
        ByVal hWnd As Long, _
        ByVal nIDEvent As Long, _
        ByVal uElapse As Long, _
        ByVal lpTimerFunc As Long) As Long
    Public Declare Function KillTimer Lib "user32" ( _
        ByVal hWnd As Long, _
        ByVal nIDEvent As Long) As Long
  
#End If

Private Const UserAgent As String = "Excel Client v3.1.4 (https://github.com/timhall/Excel-REST)"
Private DocumentHelper As Object
Private ElHelper As Object

' Moved to top from JSONLib
Private Const INVALID_JSON      As Long = 1
Private Const INVALID_OBJECT    As Long = 2
Private Const INVALID_ARRAY     As Long = 3
Private Const INVALID_BOOLEAN   As Long = 4
Private Const INVALID_NULL      As Long = 5
Private Const INVALID_KEY       As Long = 6

Public Enum StatusCodes
    Ok = 200
    Created = 201
    NoContent = 204
    NotModified = 304
    BadRequest = 400
    Unauthorized = 401
    Forbidden = 403
    notFound = 404
    RequestTimeout = 408
    UnsupportedMediaType = 415
    InternalServerError = 500
    BadGateway = 502
    ServiceUnavailable = 503
    GatewayTimeout = 504
End Enum

Public EnableLogging As Boolean

' ============================================= '
' 1. Logging
' ============================================= '

''
' Log debug message with optional from description
'
' @param {String} Message
' @param {String} [From]
' --------------------------------------------- '
Public Sub LogDebug(message As String, Optional From As String = "")
    If EnableLogging Then
        If From = "" Then
            From = "Excel-REST"
        End If
        
        Debug.Print From & ": " & message
    End If
End Sub

''
' Log error message with optional from description and error number
'
' @param {String} Message
' @param {String} [From]
' @param {Long} [ErrNumber]
' --------------------------------------------- '
Public Sub LogError(message As String, Optional From As String = "", Optional ErrNumber As Long = -1)
    If From = "" Then
        From = "Excel-REST"
    End If
    If ErrNumber >= 0 Then
        From = From & ": " & ErrNumber
    End If
    
    Debug.Print "ERROR - " & From & ": " & message
End Sub

''
' Log request
'
' @param {RestRequest} Request
' --------------------------------------------- '
Public Sub LogRequest(Request As RestRequest)
    If EnableLogging Then
        Debug.Print "--> Request - " & Format(Now, "Long Time")
        Debug.Print Request.MethodName & " " & Request.FullUrl
        
        Dim HeaderKey As Variant
        For Each HeaderKey In Request.Headers.Keys()
            Debug.Print HeaderKey & ": " & Request.Headers(HeaderKey)
        Next HeaderKey
        
        Dim CookieKey As Variant
        For Each CookieKey In Request.Cookies.Keys()
            Debug.Print "Cookie: " & CookieKey & "=" & Request.Cookies(CookieKey)
        Next CookieKey
        
        If Request.Body <> "" Then
            Debug.Print vbNewLine & Request.Body
        End If
        
        Debug.Print
    End If
End Sub

''
' Log response
'
' @param {RestResponse} Response
' --------------------------------------------- '
Public Sub LogResponse(response As RestResponse, Request As RestRequest)
    If EnableLogging Then
        Debug.Print "<-- Response - " & Format(Now, "Long Time")
        Debug.Print response.statusCode & " " & response.StatusDescription
        
        Dim Header As Scripting.Dictionary
        For Each Header In response.Headers
            Debug.Print Header("key") & ": " & Header("value")
        Next Header
        
        Dim CookieKey As Variant
        For Each CookieKey In response.Cookies.Keys()
            Debug.Print "Cookie: " & CookieKey & "=" & response.Cookies(CookieKey)
        Next CookieKey
        
        Debug.Print vbNewLine & response.content & vbNewLine
    End If
End Sub

''
' Obfuscate message (for logging) by replacing with given character
'
' Example: ("Password", "#") -> ########
'
' @param {String} Secure
' @param {String} [Character = *]
' @return {String}
' --------------------------------------------- '
Public Function Obfuscate(Secure As String, Optional Character As String = "*") As String
    Obfuscate = String(Len(Secure), Character)
End Function

' ============================================= '
' 2. Converters and encoding
' ============================================= '

''
' Parse given JSON string into object (Dictionary or Collection)
'
' @param {String} JSON
' @return {Object}
' --------------------------------------------- '
Public Function ParseJSON(json As String) As Object
    Set ParseJSON = json_parse(json)
End Function

''
' Convert object to JSON string
'
' @param {Variant} Obj
' @return {String}
' --------------------------------------------- '
Public Function ConvertToJSON(Obj As Variant) As String
    ConvertToJSON = json_toString(Obj)
End Function

''
' Parse url-encoded string to Scripting.Dictionary
' TODO: Handle arrays and collections
'
' @param {String} UrlEncoded
' @return {Dictionary} Parsed
' --------------------------------------------- '
Public Function ParseUrlEncoded(Encoded As String) As Scripting.Dictionary
    Dim Items As Variant
    Dim i As Integer
    Dim Parts As Variant
    Dim Parsed As New Scripting.Dictionary
    Dim key As String
    Dim value As Variant
    
    Items = Split(Encoded, "&")
    For i = LBound(Items) To UBound(Items)
        Parts = Split(Items(i), "=")
        
        If UBound(Parts) - LBound(Parts) >= 1 Then
            ' TODO: Handle numbers, arrays, and object better here
            key = UrlDecode(CStr(Parts(LBound(Parts))))
            value = UrlDecode(CStr(Parts(LBound(Parts) + 1)))
            
            If Parsed.Exists(key) Then
                Parsed(key) = value
            Else
                Parsed.add key, value
            End If
        End If
    Next i
    
    Set ParseUrlEncoded = Parsed
End Function

''
' Convert Scripting.Dictionary to url encoded string
' TODO: Handle arrays and collections
'
' @param {Variant} Obj
' @return {String} UrlEncoded string (e.g. a=123&b=456&...)
' --------------------------------------------- '
Public Function ConvertToUrlEncoded(Obj As Variant) As String
    If IsArray(Obj) Then
        ' TODO Handle arrays and collections
        Err.Raise vbObjectError + 1, "RestHelpers.ConvertToUrlEncoded", "Arrays are not currently supported by ConvertToUrlEncoded"
    End If
    
    Dim Encoded As String
    Dim ParameterKey As Variant
    Dim value As Variant
    
    For Each ParameterKey In Obj.Keys()
        If Len(Encoded) > 0 Then: Encoded = Encoded & "&"
        value = Obj(ParameterKey)
        
        ' Convert boolean to lowercase
        If VarType(value) = vbBoolean Then
            If value Then
                value = CStr(True)
            Else
                value = CStr(False)
            End If
        End If
        
        Encoded = Encoded & URLEncode(ParameterKey, True) & "=" & URLEncode(value, True)
    Next ParameterKey
    
    ConvertToUrlEncoded = Encoded
End Function

''
' Parse XML string to XML
'
' @param {String} Encoded
' @return {Object} XML
' --------------------------------------------- '
Public Function ParseXML(Encoded As String) As Object
    Set ParseXML = CreateObject("MSXML2.DOMDocument")
    ParseXML.async = False
    ParseXML.LoadXML Encoded
End Function

''
' Convert MSXML2.DomDocument to string
'
' @param {Object: MSXML2.DomDocument} XML
' @return {String} XML string
' --------------------------------------------- '

Public Function ConvertToXML(Obj As Variant) As String
    On Error Resume Next
    ConvertToXML = Trim(Replace(Obj.xml, vbCrLf, ""))
End Function

''
' Parse given string into object (Dictionary or Collection) for given format
'
' @param {String} Value
' @param {AvailableFormats} Format
' @return {Object}
' --------------------------------------------- '
Public Function ParseByFormat(value As String, Format As AvailableFormats) As Object
    Select Case Format
    Case AvailableFormats.json
        Set ParseByFormat = ParseJSON(value)
    Case AvailableFormats.formurlencoded
        Set ParseByFormat = ParseUrlEncoded(value)
    Case AvailableFormats.xml
        Set ParseByFormat = ParseXML(value)
    End Select
End Function

''
' Convert object to given format
'
' @param {Variant} Obj
' @param {AvailableFormats} Format
' @return {String}
' --------------------------------------------- '
Public Function ConvertToFormat(Obj As Variant, Format As AvailableFormats) As String
    Select Case Format
    Case AvailableFormats.json
        ConvertToFormat = ConvertToJSON(Obj)
    Case AvailableFormats.formurlencoded
        ConvertToFormat = ConvertToUrlEncoded(Obj)
    Case AvailableFormats.xml
        ConvertToFormat = ConvertToXML(Obj)
    End Select
End Function

''
' Url encode the given string
'
' @param {Variant} Text The raw string to encode
' @param {Boolean} [SpaceAsPlus = False] Use plus sign for encoded spaces (otherwise %20)
' @return {String} Encoded string
' --------------------------------------------- '
Public Function URLEncode(Text As Variant, Optional SpaceAsPlus As Boolean = False) As String
    Dim UrlVal As String
    Dim StringLen As Long
    
    UrlVal = CStr(Text)
    StringLen = Len(UrlVal)
    
    If StringLen > 0 Then
        ReDim result(StringLen) As String
        Dim i As Long, CharCode As Integer
        Dim Char As String, Space As String
        
        ' Set space value
        If SpaceAsPlus Then
            Space = "+"
        Else
            Space = "%20"
        End If
        
        ' Loop through string characters
        For i = 1 To StringLen
            ' Get character and ascii code
            Char = Mid$(UrlVal, i, 1)
            CharCode = Asc(Char)
            Select Case CharCode
                Case 97 To 122, 65 To 90, 48 To 57, 45, 46, 95, 126
                    ' Use original for AZaz09-._~
                    result(i) = Char
                Case 32
                    ' Add space
                    result(i) = Space
                Case 0 To 15
                    ' Convert to hex w/ leading 0
                    result(i) = "%0" & Hex(CharCode)
                Case Else
                    ' Convert to hex
                    result(i) = "%" & Hex(CharCode)
            End Select
        Next i
        URLEncode = Join(result, "")
    End If
End Function

''
' Url decode the given encoded string
'
' @param {String} Encoded
' @return {String} Decoded string
' --------------------------------------------- '
Public Function UrlDecode(Encoded As String) As String
    Dim StringLen As Long
    StringLen = Len(Encoded)
    
    If StringLen > 0 Then
        Dim i As Long
        Dim result As String
        Dim Temp As String
        
        For i = 1 To StringLen
            Temp = Mid$(Encoded, i, 1)
            
            If Temp = "+" Then
                Temp = " "
            ElseIf Temp = "%" And StringLen >= i + 2 Then
                Temp = Mid$(Encoded, i + 1, 2)
                Temp = Chr(CDec("&H" & Temp))
                
                i = i + 2
            End If
                
            result = result & Temp
        Next i
        
        UrlDecode = result
    End If
End Function

''
' Url encode the given string
'
' @param {Variant} Text The raw string to encode
' @return {String} Encoded string
' --------------------------------------------- '
Public Function Base64Encode(Text As String) As String
    Base64Encode = Replace(BytesToBase64(StringToBytes(Text)), vbLf, "")
End Function

' ============================================= '
' 3. Url handling
' ============================================= '

''
' Join Url with /
'
' @param {String} LeftSide
' @param {String} RightSide
' @return {String} Joined url
' --------------------------------------------- '
Public Function JoinUrl(LeftSide As String, RightSide As String) As String
    If Left(RightSide, 1) = "/" Then
        RightSide = Right(RightSide, Len(RightSide) - 1)
    End If
    If Right(LeftSide, 1) = "/" Then
        LeftSide = Left(LeftSide, Len(LeftSide) - 1)
    End If
    
    If LeftSide <> "" And RightSide <> "" Then
        JoinUrl = LeftSide & "/" & RightSide
    Else
        JoinUrl = LeftSide & RightSide
    End If
End Function

''
' Check if protocol is included with url
'
' @param {String} Url
' @return {String} Found protocol
' --------------------------------------------- '
Public Function IncludesProtocol(URL As String) As String
    Dim Parts As New Scripting.Dictionary
    Set Parts = UrlParts(URL)
    
    If Parts("Protocol") <> "" Then
        IncludesProtocol = Parts("Protocol") & "//"
    End If
End Function

''
' Remove protocol from url (if present)
'
' @param {String} Url
' @return {String} Url without protocol
' --------------------------------------------- '
Public Function RemoveProtocol(URL As String) As String
    Dim Protocol As String
    
    RemoveProtocol = URL
    Protocol = IncludesProtocol(RemoveProtocol)
    If Protocol <> "" Then
        RemoveProtocol = Replace(RemoveProtocol, Protocol, "")
    End If
End Function

''
' Get Url parts
'
' Example:
' "https://www.google.com/a/b/c.html?a=1&b=2#hash" ->
' - Protocol = https:
' - Host = www.google.com:443
' - Hostname = www.google.com
' - Port = 443
' - Uri = /a/b/c.html
' - Querystring = ?a=1&b=2
' - Hash = #hash
'
' @param {String} Url
' @return {Dictionary} Parts of url
' Protocol, Host, Hostname, Port, Uri, Querystring, Hash
' --------------------------------------------- '
Public Function UrlParts(URL As String) As Scripting.Dictionary
    Dim Parts As New Scripting.Dictionary

    ' Create document/element is expensive, cache after creation
    If DocumentHelper Is Nothing Or ElHelper Is Nothing Then
        Set DocumentHelper = CreateObject("htmlfile")
        Set ElHelper = DocumentHelper.createElement("a")
    End If
    
    ElHelper.href = URL
    Parts.add "Protocol", ElHelper.Protocol
    Parts.add "Host", ElHelper.host
    Parts.add "Hostname", ElHelper.hostname
    Parts.add "Port", ElHelper.port
    Parts.add "Uri", "/" & ElHelper.PathName
    Parts.add "Querystring", ElHelper.Search
    Parts.add "Hash", ElHelper.Hash
    
    If Parts("Protocol") = ":" Or Parts("Protocol") = "localhost:" Then
        Parts("Protocol") = ""
    End If
    
    Set UrlParts = Parts
End Function

' ============================================= '
' 4. Object/Dictionary/Collection/Array helpers
' ============================================= '

''
' Combine two objects
'
' @param {Dictionary} OriginalObj Original object to add values to
' @param {Dictionary} NewObj New object containing values to add to original object
' @param {Boolean} [OverwriteOriginal=True] Overwrite any values that already exist in the original object
' @return {Dictionary} Combined object
' --------------------------------------------- '
Public Function CombineObjects(ByVal OriginalObj As Scripting.Dictionary, ByVal NewObj As Scripting.Dictionary, _
    Optional OverwriteOriginal As Boolean = True) As Scripting.Dictionary
    
    Dim Combined As New Scripting.Dictionary
    
    Dim OriginalKey As Variant
    Dim key As Variant
    
    If Not OriginalObj Is Nothing Then
        For Each key In OriginalObj.Keys()
            Combined.add key, OriginalObj(key)
        Next key
    End If
    If Not NewObj Is Nothing Then
        For Each key In NewObj.Keys()
            If Combined.Exists(key) And OverwriteOriginal Then
                Combined(key) = NewObj(key)
            ElseIf Not Combined.Exists(key) Then
                Combined.add key, NewObj(key)
            End If
        Next key
    End If
    
    Set CombineObjects = Combined
End Function

''
' Apply whitelist to given object to filter out unwanted key/values
'
' @param {Dictionary} Original model to filter
' @param {Variant} WhiteList Array of values to retain in the model
' @return {Dictionary} Filtered object
' --------------------------------------------- '
Public Function FilterObject(ByVal Original As Scripting.Dictionary, Whitelist As Variant) As Scripting.Dictionary
    Dim Filtered As New Scripting.Dictionary
    Dim i As Integer
    
    If IsArray(Whitelist) Then
        For i = LBound(Whitelist) To UBound(Whitelist)
            If Original.Exists(Whitelist(i)) Then
                Filtered.add Whitelist(i), Original(Whitelist(i))
            End If
        Next i
    ElseIf VarType(Whitelist) = vbString Then
        If Original.Exists(Whitelist) Then
            Filtered.add Whitelist, Original(Whitelist)
        End If
    End If
    
    Set FilterObject = Filtered
End Function

''
' Sort Scripting.Dictionary
' TODO
'
' Source: http://www.cpearson.com/excel/CollectionsAndDictionaries.htm
'         http://www.cpearson.com/excel/SortingArrays.aspx
' --------------------------------------------- '
Public Function SortDictionary(ByVal Dict As Scripting.Dictionary, SortByKey As Boolean, _
    Optional Descending As Boolean = False, Optional CompareMode As VbCompareMethod = vbTextCompare) As Scripting.Dictionary
    
    Set SortDictionary = Dict
End Function

''
' Check if given is an array
'
' @param {Object} Obj
' @return {Boolean}
' --------------------------------------------- '
Public Function IsArray(Obj As Variant) As Boolean
    If Not IsEmpty(Obj) Then
        If IsObject(Obj) Then
            If TypeOf Obj Is Collection Then
                IsArray = True
            End If
        ElseIf VarType(Obj) = vbArray Or VarType(Obj) = 8204 Then
            ' VarType = 8204 seems to arise from Array(...) constructor
            IsArray = True
        End If
    End If
End Function

''
' Add or update key/value in Scripting.Dictionary
'
' @param {Dictionary} Dict
' @param {String} Key
' @param {Variant} Value
' --------------------------------------------- '
Public Sub AddToDictionary(ByRef Dict As Scripting.Dictionary, key As String, value As Variant)
    If Not Dict.Exists(key) Then
        Dict.add key, value
    Else
        Dict(key) = value
    End If
End Sub

' ============================================= '
' 5. Request preparation / handling
' ============================================= '

''
' Prepare http request for execution
'
' @param {RestRequest} Request
' @param {Integer} TimeoutMS
' @param {Boolean} [UseAsync=False]
' @return {Object} Setup http object
' --------------------------------------------- '
Public Function PrepareHttpRequest(Request As RestRequest, TimeoutMS As Long, _
    Optional UseAsync As Boolean = False) As Object
    Dim http As Object
    Set http = CreateObject("MSXML2.XMLHTTP")
    
    ' Set timeouts
    'Http.setTimeouts TimeoutMS, TimeoutMS, TimeoutMS, TimeoutMS
    
    ' Pass http to request and setup onreadystatechange
    If UseAsync Then
        Set Request.HttpRequest = http
        http.onreadystatechange = Request
    End If
    
    Set PrepareHttpRequest = http
End Function

''
' Prepare proxy for http object
'
' @param {String} ProxyServer
' @param {String} [Username=""]
' @param {String} [Password=""]
' @param {Variant} [BypassList]
' --------------------------------------------- '
Public Sub PrepareProxyForHttpRequest(ByRef http As Object, ProxyServer As String, _
    Optional Username As String = "", Optional Password As String = "", Optional BypassList As Variant)
    
    If ProxyServer <> "" Then
        http.SetProxy 2, ProxyServer, BypassList
        LogDebug "SetProxy: " & ProxyServer, "RestHelpers.PrepareProxyForHttpRequest"
        
        If Username <> "" Then
            http.SetProxyCredentials Username, Password
            LogDebug "SetProxyCredentials: " & Username & ", " & Obfuscate(Password), "RestHelpers.PrepareProxyForHttpRequest"
        End If
    End If
End Sub

''
' Set headers to http object for given request
'
' @param {Object} Http request
' @param {RestRequest} Request
' --------------------------------------------- '
Public Sub SetHeaders(ByRef http As Object, Request As RestRequest)
    ' Add general headers to request
    Request.AddHeader "User-Agent", UserAgent
    Request.AddHeader "Content-Type", Request.ContentType
    Request.AddHeader "Accept", Request.Accept
    
    If Request.IncludeContentLength Then
        Request.AddHeader "Content-Length", Request.ContentLength
    Else
        If Request.Headers.Exists("Content-Length") Then
            Request.Headers.remove "Content-Length"
        End If
    End If

    Dim HeaderKey As Variant
    For Each HeaderKey In Request.Headers.Keys()
        http.setRequestHeader HeaderKey, Request.Headers(HeaderKey)
    Next HeaderKey
    
    Dim CookieKey As Variant
    For Each CookieKey In Request.Cookies.Keys()
        http.setRequestHeader "Cookie", CookieKey & "=" & Request.Cookies(CookieKey)
    Next CookieKey
End Sub

''
' Execute request synchronously
'
' @param {Object} Http
' @param {RestRequest} Request The request to execute
' @return {RestResponse} Wrapper of server response for request
' --------------------------------------------- '
Public Function ExecuteRequest(ByRef http As Object, ByRef Request As RestRequest) As RestResponse
    On Error GoTo ErrorHandling
    Dim response As RestResponse

    ' Send the request and handle response
    LogRequest Request
    http.Send Request.Body
    Set response = RestHelpers.CreateResponseFromHttp(http, Request.ResponseFormat)
    LogResponse response, Request
    
ErrorHandling:

    If Not http Is Nothing Then Set http = Nothing
    If Err.Number <> 0 Then
        If InStr(Err.Description, "The operation timed out") > 0 Then
            ' Return 408
            Set response = RestHelpers.CreateResponse(StatusCodes.RequestTimeout, "Request Timeout")
            LogDebug "Timeout: " & Request.FullUrl, "RestHelpers.ExecuteRequest"
            Err.clear
        Else
            ' Rethrow error
            LogError Err.Description, "RestHelpers.ExecuteRequest", Err.Number
            Err.Raise Err.Number, Description:=Err.Description
        End If
    End If
    
    Set ExecuteRequest = response
End Function

''
' Execute request asynchronously
'
' @param {Object} Http
' @param {RestRequest} Request The request to execute
' @param {String} Callback Name of function to call when request completes (specify "" if none)
' @param {Variant} [CallbackArgs] Variable array of arguments that get passed directly to callback function
' --------------------------------------------- '
Public Sub ExecuteRequestAsync(ByRef http As Object, ByRef Request As RestRequest, TimeoutMS As Long, Callback As String, Optional ByVal CallbackArgs As Variant)
    On Error GoTo ErrorHandling

    Request.Callback = Callback
    Request.CallbackArgs = CallbackArgs
    
    ' Send the request
    Request.StartTimeoutTimer TimeoutMS
    LogRequest Request
    http.Send Request.Body
    
    Exit Sub
    
ErrorHandling:

    ' Close http and rethrow error
    If Not http Is Nothing Then Set http = Nothing
    LogError Err.Description, "RestHelpers.ExecuteRequestAsync", Err.Number
    Err.Raise Err.Number, Description:=Err.Description
End Sub

''
' Create simple response
'
' @param {StatusCodes} StatusCode
' @param {String} StatusDescription
' @return {RestResponse}
' --------------------------------------------- '
Public Function CreateResponse(statusCode As StatusCodes, StatusDescription As String) As RestResponse
    Set CreateResponse = New RestResponse
    CreateResponse.statusCode = statusCode
    CreateResponse.StatusDescription = StatusDescription
End Function

''
' Create response for http
'
' @param {Object} Http
' @param {AvailableFormats} [Format=json]
' @return {RestResponse}
' --------------------------------------------- '
Public Function CreateResponseFromHttp(ByRef http As Object, Optional Format As AvailableFormats = AvailableFormats.json) As RestResponse
    Set CreateResponseFromHttp = New RestResponse
    
    CreateResponseFromHttp.statusCode = http.Status
    CreateResponseFromHttp.StatusDescription = http.StatusText
    CreateResponseFromHttp.Body = http.ResponseBody
    CreateResponseFromHttp.content = http.ResponseText
    
    ' Convert content to data by format
    If Format <> AvailableFormats.plaintext Then
        Set CreateResponseFromHttp.Data = RestHelpers.ParseByFormat(http.ResponseText, Format)
    End If
    
    ' Extract headers
    Set CreateResponseFromHttp.Headers = ExtractHeadersFromResponseHeaders(http.getAllResponseHeaders)
    
    ' Extract cookies
    Set CreateResponseFromHttp.Cookies = ExtractCookiesFromHeaders(CreateResponseFromHttp.Headers)
End Function

''
' Extract cookies from response headers
'
' @param {String} ResponseHeaders
' @return {Dictionary} Cookies
' --------------------------------------------- '
Public Function ExtractCookiesFromHeaders(Headers As Collection) As Scripting.Dictionary
    Dim Cookies As New Scripting.Dictionary
    Dim Cookie As String
    Dim key As String
    Dim value As String
    Dim Header As Scripting.Dictionary
    
    For Each Header In Headers
        If Header("key") = "Set-Cookie" Then
            Cookie = Header("value")
            key = Mid$(Cookie, 1, InStr(1, Cookie, "=") - 1)
            value = Mid$(Cookie, InStr(1, Cookie, "=") + 1, Len(Cookie))
            
            If InStr(1, value, ";") Then
                value = Mid$(value, 1, InStr(1, value, ";") - 1)
            End If
            
            If Cookies.Exists(key) Then
                Cookies(key) = UrlDecode(value)
            Else
                Cookies.add key, UrlDecode(value)
            End If
        End If
    Next Header
    
    Set ExtractCookiesFromHeaders = Cookies
End Function

''
' Extract headers from response headers
'
' @param {String} ResponseHeaders
' @return {Collection} Headers
' --------------------------------------------- '
Public Function ExtractHeadersFromResponseHeaders(ResponseHeaders As String) As Collection
    Dim Headers As New Collection
    Dim Header As Scripting.Dictionary
    Dim Multiline As Boolean
    Dim key As String
    Dim value As String
    
    Dim Lines As Variant
    Lines = Split(ResponseHeaders, vbCrLf)
    
    Dim i As Integer
    For i = LBound(Lines) To (UBound(Lines) + 1)
        If i > UBound(Lines) Then
            Headers.add Header
        ElseIf Lines(i) <> "" Then
            If InStr(1, Lines(i), ":") = 0 And Not Header Is Nothing Then
                ' Assume part of multi-line header
                Multiline = True
            ElseIf Multiline Then
                ' Close out multi-line string
                Multiline = False
                Headers.add Header
            ElseIf Not Header Is Nothing Then
                Headers.add Header
            End If
            
            If Not Multiline Then
                Set Header = New Scripting.Dictionary
                Header.add "key", Trim(Mid$(Lines(i), 1, InStr(1, Lines(i), ":") - 1))
                Header.add "value", Trim(Mid$(Lines(i), InStr(1, Lines(i), ":") + 1, Len(Lines(i))))
            Else
                Header("value") = Header("value") & vbCrLf & Lines(i)
            End If
        End If
    Next i
    
    Set ExtractHeadersFromResponseHeaders = Headers
End Function

''
' Create request from options
'
' @param {Dictionary} Options
' - Headers
' - Cookies
' - QuerystringParams
' - UrlSegments
' --------------------------------------------- '
Public Function CreateRequestFromOptions(Options As Scripting.Dictionary) As RestRequest
    Dim Request As New RestRequest
    
    If Not IsEmpty(Options) And Not Options Is Nothing Then
        If Options.Exists("Headers") Then
            Set Request.Headers = Options("Headers")
        End If
        If Options.Exists("Cookies") Then
            Set Request.Cookies = Options("Cookies")
        End If
        If Options.Exists("QuerystringParams") Then
            Set Request.QuerystringParams = Options("QuerystringParams")
        End If
        If Options.Exists("UrlSegments") Then
            Set Request.UrlSegments = Options("UrlSegments")
        End If
    End If
    
    Set CreateRequestFromOptions = Request
End Function

''
' Update response with another response
'
' @param {RestResponse) Original (Updated by reference)
' @param {RestResponse) Updated
' @return {RestResponse}
' --------------------------------------------- '
Public Function UpdateResponse(ByRef Original As RestResponse, Updated As RestResponse) As RestResponse
    Original.statusCode = Updated.statusCode
    Original.StatusDescription = Updated.StatusDescription
    Original.content = Updated.content
    Original.Body = Updated.Body
    Set Original.Headers = Updated.Headers
    Set Original.Cookies = Updated.Cookies
    
    If Not IsEmpty(Updated.Data) Then
        If IsObject(Updated.Data) Then
            Set Original.Data = Updated.Data
        Else
            Original.Data = Updated.Data
        End If
    End If
    
    Set UpdateResponse = Original
End Function

''
' Get name for format
'
' @param {AvailableFormats} Format
' @return {String}
' --------------------------------------------- '
Public Function FormatToName(Format As AvailableFormats) As String
    Select Case Format
    Case AvailableFormats.formurlencoded
        FormatToName = "form-urlencoded"
    Case AvailableFormats.json
        FormatToName = "json"
    Case AvailableFormats.xml
        FormatToName = "xml"
    Case AvailableFormats.plaintext
        FormatToName = "txt"
    End Select
End Function

''
' Get content-type for format
'
' @param {AvailableFormats} Format
' @return {String}
' --------------------------------------------- '
Public Function FormatToContentType(Format As AvailableFormats) As String
    Select Case Format
    Case AvailableFormats.formurlencoded
        FormatToContentType = "application/x-www-form-urlencoded;charset=UTF-8"
    Case AvailableFormats.json
        FormatToContentType = "application/json"
    Case AvailableFormats.xml
        FormatToContentType = "application/xml"
    Case AvailableFormats.plaintext
        FormatToContentType = "text/plain"
    End Select
End Function

' ============================================= '
' 6. Timing
' ============================================= '

''
' Start timeout timer for request
'
' @param {RestRequest} Request
' @param {Long} TimeoutMS
' --------------------------------------------- '
Public Sub StartTimeoutTimer(Request As RestRequest, TimeoutMS As Long)
    'SetTimer Application.hwnd, ObjPtr(Request), TimeoutMS, AddressOf RestHelpers.TimeoutTimerExpired
End Sub

''
' Stop timeout timer for request
'
' @param {RestRequest} Request
' --------------------------------------------- '
Public Sub StopTimeoutTimer(Request As RestRequest)
    'KillTimer Application.hwnd, ObjPtr(Request)
End Sub

''
' Handle timeout timers expiring
'
' See [MSDN Article](http://msdn.microsoft.com/en-us/library/windows/desktop/ms644907(v=vs.85).aspx)
' --------------------------------------------- '
#If VBA7 And Win64 Then
Public Sub TimeoutTimerExpired(ByVal hWnd As Long, ByVal Msg As Long, _
        ByVal Request As RestRequest, ByVal dwTimer As Long)
#Else
Sub TimeoutTimerExpired(ByVal hWnd As Long, ByVal uMsg As Long, _
        ByVal Request As RestRequest, ByVal dwTimer As Long)
#End If
    
    StopTimeoutTimer Request
    LogDebug "Async Timeout: " & Request.FullUrl, "RestHelpers.TimeoutTimerExpired"
    Request.TimedOut
End Sub

' ============================================= '
' 7. Cryptography
' ============================================= '

''
' Perform HMAC-SHA1 on string and return as Hex or Base64
' [Does VBA have a Hash_HMAC](http://stackoverflow.com/questions/8246340/does-vba-have-a-hash-hmac)
'
' @param {String} Text
' @param {String} Secret
' @param {String} [Format = Hex] Hex or Base64
' @return {String} HMAC-SHA1
' --------------------------------------------- '
Public Function HMACSHA1(Text As String, Secret As String, Optional Format As String = "Hex") As String
    HMACSHA1 = BytesToFormat(HMACSHA1AsBytes(Text, Secret), Format)
End Function

''
' Perform HMAC-SHA256 on string and return as Hex or Base64
'
' @param {String} Text
' @param {String} Secret
' @param {String} [Format = Hex] Hex or Base64
' @return {String} HMAC-SHA256
' --------------------------------------------- '
Public Function HMACSHA256(Text As String, Secret As String, Optional Format As String = "Hex") As String
    HMACSHA256 = BytesToFormat(HMACSHA256AsBytes(Text, Secret), Format)
End Function

''
' Perform MD5 Hash on string and return as Hex or Base64
' Source: http://www.di-mgt.com.au/src/basMD5.bas.html
'
' @param {String} Text
' @param {String} [Format = Hex] Hex or Base64
' @return {String} MD5 Hash
' --------------------------------------------- '
Public Function MD5(Text As String, Optional Format As String = "Hex") As String
    MD5 = BytesToFormat(MD5AsBytes(Text), Format)
End Function

Public Function HMACSHA1AsBytes(Text As String, Secret As String) As Byte()
    Dim Crypto As Object
    Set Crypto = CreateObject("System.Security.Cryptography.HMACSHA1")
    
    Crypto.key = StringToBytes(Secret)
    HMACSHA1AsBytes = Crypto.ComputeHash_2(StringToBytes(Text))
End Function

Public Function HMACSHA256AsBytes(Text As String, Secret As String) As Byte()
    Dim Crypto As Object
    Set Crypto = CreateObject("System.Security.Cryptography.HMACSHA256")
    
    Crypto.key = StringToBytes(Secret)
    HMACSHA256AsBytes = Crypto.ComputeHash_2(StringToBytes(Text))
End Function

Public Function MD5AsBytes(Text As String) As Byte()
    Dim Crypto As Object
    Set Crypto = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
    
    MD5AsBytes = Crypto.ComputeHash_2(StringToBytes(Text))
End Function

''
' Convert string to bytes
'
' @param {String} Text
' @return {Byte()}
' --------------------------------------------- '
Public Function StringToBytes(Text As String) As Byte()
    Dim Encoding As Object
    Set Encoding = CreateObject("System.Text.UTF8Encoding")
    
    StringToBytes = Encoding.Getbytes_4(Text)
End Function

Public Function BytesToHex(Bytes() As Byte) As String
    Dim i As Integer
    For i = LBound(Bytes) To UBound(Bytes)
        BytesToHex = BytesToHex & LCase(Right("0" & Hex$(Bytes(i)), 2))
    Next i
End Function

Public Function BytesToBase64(Bytes() As Byte) As String
    Dim xml As Object
    Dim Node As Object
    Set xml = CreateObject("MSXML2.DOMDocument")

    ' byte array to base64
    Set Node = xml.createElement("b64")
    Node.DataType = "bin.base64"
    Node.nodeTypedValue = Bytes
    BytesToBase64 = Node.Text

    Set Node = Nothing
    Set xml = Nothing
End Function

''
' Convert bytes to given format (Hex or Base64)
'
' @param {Byte()} Bytes
' @param {String} Format (Hex or Base64)
' @return {String}
' --------------------------------------------- '
Public Function BytesToFormat(Bytes() As Byte, Format As String) As String
    Select Case UCase(Format)
    Case "HEX"
        BytesToFormat = BytesToHex(Bytes)
    Case "BASE64"
        BytesToFormat = BytesToBase64(Bytes)
    End Select
End Function

''
' Create random alphanumeric nonce
'
' @param {Integer} [NonceLength=32]
' @return {String} Randomly generated nonce
' --------------------------------------------- '
Public Function CreateNonce(Optional NonceLength As Integer = 32) As String
    Dim str As String
    Dim count As Integer
    Dim result As String
    Dim random As Integer
    
    str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUIVWXYZ"
    result = ""
    
    For count = 1 To NonceLength
        random = Int(((Len(str) - 1) * Rnd) + 1)
        result = result + Mid$(str, random, 1)
    Next
    CreateNonce = result
End Function

' ======================================================================================== '
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'
' Changes for Excel-REST:
' - Updated json_parseNumber to reduce chance of overflow
' - Swapped Mid for Mid$
' - Handle colon in object key
' - Handle duplicate keys in object parsing
' - Change methods to Private and prefix with json_
'
' ======================================================================================== '

' (Moved to top of file)
'Private Const INVALID_JSON      As Long = 1
'Private Const INVALID_OBJECT    As Long = 2
'Private Const INVALID_ARRAY     As Long = 3
'Private Const INVALID_BOOLEAN   As Long = 4
'Private Const INVALID_NULL      As Long = 5
'Private Const INVALID_KEY       As Long = 6

'
'   parse string and create JSON object (Dictionary or Collection in VB)
'
Private Function json_parse(ByRef str As String) As Object

    Dim index As Long
    index = 1
    
    On Error Resume Next

    Call json_skipChar(str, index)
    Select Case Mid$(str, index, 1)
    Case "{"
        Set json_parse = json_parseObject(str, index)
    Case "["
        Set json_parse = json_parseArray(str, index)
    End Select

End Function

'
'   parse collection of key/value (Dictionary in VB)
'
Private Function json_parseObject(ByRef str As String, ByRef index As Long) As Scripting.Dictionary

    Set json_parseObject = New Scripting.Dictionary
    
    ' "{"
    Call json_skipChar(str, index)
    If Mid$(str, index, 1) <> "{" Then Err.Raise vbObjectError + INVALID_OBJECT, Description:="char " & index & " : " & Mid$(str, index)
    index = index + 1
    
    Dim key As String
    
    Do
        Call json_skipChar(str, index)
        If "}" = Mid$(str, index, 1) Then
            index = index + 1
            Exit Do
        ElseIf "," = Mid$(str, index, 1) Then
            index = index + 1
            Call json_skipChar(str, index)
        End If
        
        key = json_parseKey(str, index)
        If Not json_parseObject.Exists(key) Then
            json_parseObject.add key, json_parseValue(str, index)
        Else
            json_parseObject.Item(key) = json_parseValue(str, index)
        End If
    Loop

End Function

'
'   parse list (Collection in VB)
'
Private Function json_parseArray(ByRef str As String, ByRef index As Long) As Collection

    Set json_parseArray = New Collection
    
    ' "["
    Call json_skipChar(str, index)
    If Mid$(str, index, 1) <> "[" Then Err.Raise vbObjectError + INVALID_ARRAY, Description:="char " & index & " : " + Mid$(str, index)
    index = index + 1
    
    Do
        
        Call json_skipChar(str, index)
        If "]" = Mid$(str, index, 1) Then
            index = index + 1
            Exit Do
        ElseIf "," = Mid$(str, index, 1) Then
            index = index + 1
            Call json_skipChar(str, index)
        End If
        
        ' add value
        json_parseArray.add json_parseValue(str, index)
        
    Loop

End Function

'
'   parse string / number / object / array / true / false / null
'
Private Function json_parseValue(ByRef str As String, ByRef index As Long)

    Call json_skipChar(str, index)
    
    Select Case Mid$(str, index, 1)
    Case "{"
        Set json_parseValue = json_parseObject(str, index)
    Case "["
        Set json_parseValue = json_parseArray(str, index)
    Case """", "'"
        json_parseValue = json_parseString(str, index)
    Case "t", "f"
        json_parseValue = json_parseBoolean(str, index)
    Case "n"
        json_parseValue = json_parseNull(str, index)
    Case Else
        json_parseValue = json_parseNumber(str, index)
    End Select

End Function

'
'   parse string
'
Private Function json_parseString(ByRef str As String, ByRef index As Long) As String

    Dim quote   As String
    Dim Char    As String
    Dim Code    As String
    
    Call json_skipChar(str, index)
    quote = Mid$(str, index, 1)
    index = index + 1
    Do While index > 0 And index <= Len(str)
        Char = Mid$(str, index, 1)
        Select Case (Char)
        Case "\"
            index = index + 1
            Char = Mid$(str, index, 1)
            Select Case (Char)
            Case """", "\", "/" ' Before: Case """", "\\", "/"
                json_parseString = json_parseString & Char
                index = index + 1
            Case "b"
                json_parseString = json_parseString & vbBack
                index = index + 1
            Case "f"
                json_parseString = json_parseString & vbFormFeed
                index = index + 1
            Case "n"
                json_parseString = json_parseString & vbNewLine
                index = index + 1
            Case "r"
                json_parseString = json_parseString & vbCr
                index = index + 1
            Case "t"
                json_parseString = json_parseString & vbTab
                index = index + 1
            Case "u"
                index = index + 1
                Code = Mid$(str, index, 4)
                json_parseString = json_parseString & ChrW(Val("&h" + Code))
                index = index + 4
            End Select
        Case quote
            
            index = index + 1
            Exit Function
        Case Else
            json_parseString = json_parseString & Char
            index = index + 1
        End Select
    Loop

End Function

'
'   parse number
'
Private Function json_parseNumber(ByRef str As String, ByRef index As Long)

    Dim value   As String
    Dim Char    As String
    
    Call json_skipChar(str, index)
    Do While index > 0 And index <= Len(str)
        Char = Mid$(str, index, 1)
        If InStr("+-0123456789.eE", Char) Then
            value = value & Char
            index = index + 1
        Else
            json_parseNumber = Val(value)
            Exit Function
        End If
    Loop


End Function

'
'   parse true / false
'
Private Function json_parseBoolean(ByRef str As String, ByRef index As Long) As Boolean

    Call json_skipChar(str, index)
    If Mid$(str, index, 4) = "true" Then
        json_parseBoolean = True
        index = index + 4
    ElseIf Mid$(str, index, 5) = "false" Then
        json_parseBoolean = False
        index = index + 5
    Else
        Err.Raise vbObjectError + INVALID_BOOLEAN, Description:="char " & index & " : " & Mid$(str, index)
    End If

End Function

'
'   parse null
'
Private Function json_parseNull(ByRef str As String, ByRef index As Long)

    Call json_skipChar(str, index)
    If Mid$(str, index, 4) = "null" Then
        json_parseNull = Null
        index = index + 4
    Else
        Err.Raise vbObjectError + INVALID_NULL, Description:="char " & index & " : " & Mid$(str, index)
    End If

End Function

Private Function json_parseKey(ByRef str As String, ByRef index As Long) As String

    Dim dquote  As Boolean
    Dim squote  As Boolean
    Dim Char    As String
    
    Call json_skipChar(str, index)
    Do While index > 0 And index <= Len(str)
        Char = Mid$(str, index, 1)
        Select Case (Char)
        Case """"
            dquote = Not dquote
            index = index + 1
            If Not dquote Then
                Call json_skipChar(str, index)
                If Mid$(str, index, 1) <> ":" Then
                    Err.Raise vbObjectError + INVALID_KEY, Description:="char " & index & " : " & json_parseKey
                End If
            End If
        Case "'"
            squote = Not squote
            index = index + 1
            If Not squote Then
                Call json_skipChar(str, index)
                If Mid$(str, index, 1) <> ":" Then
                    Err.Raise vbObjectError + INVALID_KEY, Description:="char " & index & " : " & json_parseKey
                End If
            End If
        Case ":"
            If Not dquote And Not squote Then
                index = index + 1
                Exit Do
            Else
                ' Colon in key name
                json_parseKey = json_parseKey & Char
                index = index + 1
            End If
        Case Else
            If InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Char) Then
            Else
                json_parseKey = json_parseKey & Char
            End If
            index = index + 1
        End Select
    Loop

End Function

'
'   skip special character
'
Private Sub json_skipChar(ByRef str As String, ByRef index As Long)

    While index > 0 And index <= Len(str) And InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Mid$(str, index, 1))
        index = index + 1
    Wend

End Sub

Private Function json_toString(ByRef Obj As Variant) As String

    Select Case VarType(Obj)
        Case vbNull
            json_toString = "null"
        Case vbEmpty
            json_toString = "null"
        Case vbDate
            json_toString = """" & CStr(Obj) & """"
        Case vbString
            json_toString = """" & json_encode(Obj) & """"
        Case vbObject
            Dim bFI, i
            bFI = True
            If TypeName(Obj) = "Dictionary" Then
                json_toString = json_toString & "{"
                Dim Keys
                Keys = Obj.Keys
                For i = 0 To Obj.count - 1
                    If bFI Then bFI = False Else json_toString = json_toString & ","
                    Dim key
                    key = Keys(i)
                    json_toString = json_toString & """" & key & """:" & json_toString(Obj(key))
                Next i
                json_toString = json_toString & "}"
            ElseIf TypeName(Obj) = "Collection" Then
                json_toString = json_toString & "["
                Dim value
                For Each value In Obj
                    If bFI Then bFI = False Else json_toString = json_toString & ","
                    json_toString = json_toString & json_toString(value)
                Next value
                json_toString = json_toString & "]"
            End If
        Case vbBoolean
            If Obj Then json_toString = CStr(True) Else json_toString = CStr(False)
        Case vbVariant, vbArray, vbArray + vbVariant
            Dim sEB
            json_toString = json_multiArray(Obj, 1, "", sEB)
        Case Else
            json_toString = Replace(Obj, ",", ".")
    End Select

End Function

Private Function json_encode(str) As String
    
    Dim i, j, aL1, aL2, c, p

    aL1 = Array(&H22, &H5C, &H2F, &H8, &HC, &HA, &HD, &H9)
    aL2 = Array(&H22, &H5C, &H2F, &H62, &H66, &H6E, &H72, &H74)
    For i = 1 To Len(str)
        p = True
        c = Mid$(str, i, 1)
        For j = 0 To 7
            If c = Chr(aL1(j)) Then
                json_encode = json_encode & "\" & Chr(aL2(j))
                p = False
                Exit For
            End If
        Next

        If p Then
            Dim a
            a = AscW(c)
            If a > 31 And a < 127 Then
                json_encode = json_encode & c
            ElseIf a > -1 Or a < 65535 Then
                json_encode = json_encode & "\u" & String(4 - Len(Hex(a)), "0") & Hex(a)
            End If
        End If
    Next
End Function

Private Function json_multiArray(aBD, iBC, sPS, ByRef sPT)   ' Array BoDy, Integer BaseCount, String PoSition
    Dim iDU, iDL, i ' Integer DimensionUBound, Integer DimensionLBound
    On Error Resume Next
    iDL = LBound(aBD, iBC)
    iDU = UBound(aBD, iBC)
    
    Dim sPB1, sPB2  ' String PointBuffer1, String PointBuffer2
    If Err.Number = 9 Then
        sPB1 = sPT & sPS
        For i = 1 To Len(sPB1)
            If i <> 1 Then sPB2 = sPB2 & ","
            sPB2 = sPB2 & Mid$(sPB1, i, 1)
        Next
'        json_multiArray = json_multiArray & json_toString(Eval("aBD(" & sPB2 & ")"))
        json_multiArray = json_multiArray & json_toString(aBD(sPB2))
    Else
        sPT = sPT & sPS
        json_multiArray = json_multiArray & "["
        For i = iDL To iDU
            json_multiArray = json_multiArray & json_multiArray(aBD, iBC + 1, i, sPT)
            If i < iDU Then json_multiArray = json_multiArray & ","
        Next
        json_multiArray = json_multiArray & "]"
        sPT = Left(sPT, iBC - 2)
    End If
    Err.clear
End Function

Attribute VB_Name = "RestRequest"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' RestRequest v3.1.4
' (c) Tim Hall - https://github.com/timhall/Excel-REST
'
' Create a request for use with a rest client
'
' @dependencies: Microsoft Scripting Runtime
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

Private pHeaders As Scripting.Dictionary
Private pParameters As Scripting.Dictionary
Private pQuerystringParams As Scripting.Dictionary
Private pUrlSegments As Scripting.Dictionary
Private pCookies As Scripting.Dictionary
Private pBody As Variant
Private pBodyString As String
Private pContentType As String
Private pAccept
Private pContentLength As Long
Private pHttpRequest As Object

' --------------------------------------------- '
' Types
' --------------------------------------------- '

Public Enum AvailableMethods
    httpGET
    httpPOST
    httpPUT
    httpDELETE
    httpPATCH
End Enum
Public Enum AvailableFormats
    plaintext
    json
    formurlencoded
    xml
End Enum

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

Public Resource As String
Public Method As AvailableMethods
Public RequestFormat As AvailableFormats
Public ResponseFormat As AvailableFormats
Public RootElement As String
Public Callback As String
Public BaseUrl As String
Public RequireHTTPS As Boolean
Public CallbackArgs As Variant
Public IncludeContentLength As Boolean
Public Authenticator As IAuthenticator
Public Client As RestClient

Public Property Get Format() As AvailableFormats
    Format = RequestFormat
End Property
Public Property Let Format(value As AvailableFormats)
    Me.RequestFormat = value
    Me.ResponseFormat = value
End Property

Public Property Get Headers() As Scripting.Dictionary
    If pHeaders Is Nothing Then: Set pHeaders = New Scripting.Dictionary
    Set Headers = pHeaders
End Property
Public Property Set Headers(value As Scripting.Dictionary)
    Set pHeaders = value
End Property

Public Property Get Parameters() As Scripting.Dictionary
    If pParameters Is Nothing Then: Set pParameters = New Scripting.Dictionary
    Set Parameters = pParameters
End Property
Public Property Set Parameters(value As Scripting.Dictionary)
    Set pParameters = value
End Property

Public Property Get QuerystringParams() As Scripting.Dictionary
    If pQuerystringParams Is Nothing Then: Set pQuerystringParams = New Scripting.Dictionary
    Set QuerystringParams = pQuerystringParams
End Property
Public Property Set QuerystringParams(value As Scripting.Dictionary)
    Set pQuerystringParams = value
End Property

Public Property Get UrlSegments() As Scripting.Dictionary
    If pUrlSegments Is Nothing Then: Set pUrlSegments = New Scripting.Dictionary
    Set UrlSegments = pUrlSegments
End Property
Public Property Set UrlSegments(value As Scripting.Dictionary)
    Set pUrlSegments = value
End Property

Public Property Get Cookies() As Scripting.Dictionary
    If pCookies Is Nothing Then: Set pCookies = New Scripting.Dictionary
    Set Cookies = pCookies
End Property
Public Property Set Cookies(value As Scripting.Dictionary)
    Set pCookies = value
End Property

Public Property Let IncludeCacheBreaker(value As Boolean)
    Debug.Print "Excel-REST: DEPRECATED IncludeCacheBreaker has been deprecated since it is not required with ServerXMLHTTP. It will be removed in Excel-REST v4"
End Property

Public Property Get FormattedResource() As String
    Dim segment As Variant
    
    FormattedResource = Me.Resource
    
    ' Replace url segments
    For Each segment In Me.UrlSegments.Keys
        FormattedResource = Replace(FormattedResource, "{" & segment & "}", Me.UrlSegments(segment))
    Next segment
    FormattedResource = Replace(FormattedResource, "{format}", RestHelpers.FormatToName(Me.ResponseFormat))
    
    ' Add querystring
    If (Me.Method = httpGET And Not Me.Parameters Is Nothing) Or Not Me.QuerystringParams Is Nothing Then
        If (Me.Parameters.count > 0 And Me.Method = httpGET) Or Me.QuerystringParams.count > 0 Then
            If InStr(FormattedResource, "?") <= 0 Then
                FormattedResource = FormattedResource & "?"
            Else
                FormattedResource = FormattedResource & "&"
            End If
            
            ' Only load parameters to querystring if GET request (otherwise they are added to the body)
            If Me.Method = httpGET Then
                FormattedResource = FormattedResource & RestHelpers.ConvertToUrlEncoded(RestHelpers.CombineObjects(Me.Parameters, Me.QuerystringParams))
            Else
                FormattedResource = FormattedResource & RestHelpers.ConvertToUrlEncoded(Me.QuerystringParams)
            End If
        End If
    End If
End Property

Public Property Get Body() As String
    ' Add body if it's defined or parameters have been set and it is not a GET request
    If Not IsEmpty(pBody) Or pBodyString <> "" Or (Me.Parameters.count > 0 And Me.Method <> httpGET) Then
        If pBodyString <> "" Then
            If Me.Parameters.count > 0 And Me.Method <> httpGET Then
                Err.Raise vbObjectError + 1, "RestRequest.Body", "Unable to combine body string and parameters"
            Else
                Body = pBodyString
            End If
        Else
            Dim BodyValue As Variant
            If RestHelpers.IsArray(pBody) And Me.Parameters.count > 0 And Me.Method <> httpGET Then
                Err.Raise vbObjectError + 1, "RestRequest.Body", "Unable to combine body array and parameters"
            ElseIf Not RestHelpers.IsArray(pBody) And Me.Parameters.count > 0 And Me.Method <> httpGET Then
                If Me.Parameters.count > 0 And Not IsEmpty(pBody) Then
                    Set BodyValue = CombineObjects(Me.Parameters, pBody)
                ElseIf Me.Parameters.count > 0 Then
                    Set BodyValue = Me.Parameters
                Else
                    Set BodyValue = pBody
                End If
            ElseIf VarType(pBody) = vbObject Then
                Set BodyValue = pBody
            Else
                BodyValue = pBody
            End If
            
            If Me.RequestFormat <> AvailableFormats.plaintext Then
                Body = RestHelpers.ConvertToFormat(BodyValue, Me.RequestFormat)
            Else
                Body = BodyValue
            End If
        End If
    End If
End Property

Public Property Get FullUrl(Optional ClientBaseUrl As String = "") As String
    Dim Formatted As String
    Formatted = Me.FormattedResource
    If Me.BaseUrl = "" Then Me.BaseUrl = ClientBaseUrl
    
    ' If protocol is missing, add it based on RequireHTTPS property
    If RestHelpers.IncludesProtocol(Me.BaseUrl) = "" And RestHelpers.IncludesProtocol(Formatted) = "" Then
        If Me.RequireHTTPS Then
            Me.BaseUrl = "https://" & Me.BaseUrl
        Else
            Me.BaseUrl = "http://" & Me.BaseUrl
        End If
    End If
    
    ' If protocol is included on base and resource, use base
    ' If protocol is included on resource and base is not blank, move to base
    If RestHelpers.IncludesProtocol(Me.BaseUrl) <> "" And RestHelpers.IncludesProtocol(Formatted) <> "" Then
        Formatted = RestHelpers.RemoveProtocol(Formatted)
    ElseIf RestHelpers.IncludesProtocol(Formatted) <> "" And Me.BaseUrl <> "" Then
        Me.BaseUrl = RestHelpers.IncludesProtocol(Formatted) & Me.BaseUrl
        Formatted = RestHelpers.RemoveProtocol(Formatted)
    End If
    
    FullUrl = JoinUrl(Me.BaseUrl, Formatted)
End Property

Public Property Get MethodName() As String
    Select Case Me.Method
    Case httpDELETE
        MethodName = "DELETE"
    Case httpPUT
        MethodName = "PUT"
    Case httpPATCH
        MethodName = "PATCH"
    Case httpPOST
        MethodName = "POST"
    Case Else
        MethodName = "GET"
    End Select
End Property

Public Property Get FormatName() As String
    FormatName = RestHelpers.FormatToName(Me.RequestFormat)
End Property

Public Property Get ContentType() As String
    If pContentType <> "" Then
        ContentType = pContentType
    Else
        ContentType = RestHelpers.FormatToContentType(Me.RequestFormat)
    End If
End Property
Public Property Let ContentType(value As String)
    pContentType = value
End Property

Public Property Get Accept() As String
    If pAccept <> "" Then
        Accept = pAccept
    Else
        Accept = RestHelpers.FormatToContentType(Me.ResponseFormat)
    End If
End Property
Public Property Let Accept(value As String)
    pAccept = value
End Property

Public Property Get ContentLength() As Long
    If pContentLength > 0 Then
        ContentLength = pContentLength
    Else
        ContentLength = Len(Me.Body)
    End If
End Property
Public Property Let ContentLength(value As Long)
    pContentLength = value
End Property

Public Property Get HttpRequest() As Object
    Set HttpRequest = pHttpRequest
End Property
Public Property Set HttpRequest(ByVal value As Object)
    Set pHttpRequest = value
End Property


' ============================================= '
' Public Methods
' ============================================= '

''
' Add the specified key/value to the request header
'
' @param {String} key
' @param {String} value
' --------------------------------------------- '

Public Sub AddHeader(key As String, value As String)
    RestHelpers.AddToDictionary Me.Headers, key, value
End Sub

''
' Replace the defined segment in the url with the provided value
'
' @param {String} key
' @param {String} value
' --------------------------------------------- '

Public Sub AddUrlSegment(segment As String, value As String)
    RestHelpers.AddToDictionary Me.UrlSegments, segment, value
End Sub

''
' Add parameter to request (querystring for GET, body for POST)
'
' @param {String} key
' @param {Variant} value
' --------------------------------------------- '

Public Sub AddParameter(key As String, value As Variant)
    RestHelpers.AddToDictionary Me.Parameters, key, value
End Sub

''
' Add querystring parameter to request
'
' @param {String} key
' @param {Variant} value
' --------------------------------------------- '

Public Sub AddQuerystringParam(key As String, value As Variant)
    RestHelpers.AddToDictionary Me.QuerystringParams, key, value
End Sub

''
' Add cookie to request
'
' @param {String} key
' @param {Variant} value
' --------------------------------------------- '

Public Sub AddCookie(key As String, value As Variant)
    RestHelpers.AddToDictionary Me.Cookies, key, value
End Sub

''
' Add body to request
'
' @param {Variant} bodyVal Object/Collection/Array to add to body (will be converted to string)
' --------------------------------------------- '

Public Function AddBody(BodyVal As Variant)
    If IsObject(BodyVal) Then
        Set pBody = BodyVal
    ElseIf RestHelpers.IsArray(BodyVal) Then
        pBody = BodyVal
    Else
        pBodyString = BodyVal
    End If
End Function

''
' Add body as string
'
' @param {String} bodyVal
' --------------------------------------------- '

Public Function AddBodyString(BodyVal As String)
    pBodyString = BodyVal
End Function

''
' Process asynchronous requests
'
' --------------------------------------------- '

Public Sub ReadyStateChangeHandler()
Attribute ReadyStateChangeHandler.VB_UserMemId = 0
    ' During development, uncomment to watch changes in ready state
    ' Debug.Print "ReadyStageChangeHandler: " & Me.HttpRequest.readyState

    ' ReadyStates [The XMLHttpRequest Object](http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060405/):
    ' 0. Uninintialized
    ' 1. Open
    ' 2. Sent
    ' 3. Receiving
    ' 4. Loaded
    
    ' Once loaded, process result
    If Me.HttpRequest.readyState = 4 Then
        Me.StopTimeoutTimer
        
        ' Callback
        Dim response As RestResponse
        Set response = RestHelpers.CreateResponseFromHttp(Me.HttpRequest, Me.ResponseFormat)
        RestHelpers.LogResponse response, Me
        RunCallback response
    End If
End Sub

''
' Start timeout timer
'
' --------------------------------------------- '

Public Sub StartTimeoutTimer(TimeoutMS As Long)
    RestHelpers.StartTimeoutTimer Me, TimeoutMS
End Sub

''
' Stop timeout timer
'
' --------------------------------------------- '

Public Sub StopTimeoutTimer()
    RestHelpers.StopTimeoutTimer Me
End Sub

''
' Handle timeouts
'
' --------------------------------------------- '

Public Sub TimedOut()
    ' Callback
    RestHelpers.LogDebug "Timed out", "RestRequest.TimedOut"
    RunCallback RestHelpers.CreateResponse(StatusCodes.RequestTimeout, "Request Timeout")
End Sub

' ============================================= '
' Private Functions
' ============================================= '

Private Sub RunCallback(response As RestResponse)
    ' Run callback function (needs to be a public function),
    ' passing in response and any defined callback arguments
    '
    ' callback({RestResponse})
    ' OR callback({RestResponse}, {Variant})
    '
    ' Example:
    ' Public Function Callback(response As RestResponse, args As Variant)
    '     Debug.Print "Callback: " & response.StatusCode
    '     For i = LBound(args) To UBound(args)
    '         Debug.Print args(i) & " was passed into async execute"
    '     Next i
    ' End Function
    
    If Not Me.Authenticator Is Nothing Then
        ' Don't pass Authenticator and Client with Request to AfterExecute
        Dim Auth As IAuthenticator
        Dim Client As RestClient
        Set Auth = Me.Authenticator
        Set Client = Me.Client
        Set Me.Authenticator = Nothing
        Set Me.Client = Nothing
        
        Auth.AfterExecute Client, Me, response
    End If
    If Me.Callback <> "" Then
        RestHelpers.LogDebug Me.Callback, "RestRequest.RunCallback"
        If Not IsMissing(Me.CallbackArgs) Then
            Application.Run Me.Callback, response, Me.CallbackArgs
        Else
            Application.Run Me.Callback, response
        End If
    End If

    ' Request is finished, clean up
    Set Me.HttpRequest = Nothing
End Sub

Private Sub class_initialize()
    ' Set default values
    Me.IncludeContentLength = True
    Me.RequestFormat = json
    Me.ResponseFormat = json
End Sub

Private Sub Class_Terminate()
    ' Clean up
    If Not Me.HttpRequest Is Nothing Then: Set Me.HttpRequest = Nothing
    If Not Me.Authenticator Is Nothing Then: Set Me.Authenticator = Nothing
    If Not Me.Client Is Nothing Then: Set Me.Client = Nothing
End Sub
Attribute VB_Name = "RestResponse"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' RestResponse v3.1.4
' (c) Tim Hall - https://github.com/timhall/Excel-REST
'
' Wrapper for http responses
'
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php)
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

Public statusCode As StatusCodes
Public StatusDescription As String
Public content As String
Public Data As Variant
Public Body As Variant
Public Headers As Collection
Public Cookies As Scripting.Dictionary

Private Sub class_initialize()
    Body = Array()
    Set Headers = New Collection
    Set Cookies = New Scripting.Dictionary
End Sub
Attribute VB_Name = "cJobject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 5/3/2014 6:38:57 PM : from manifest:3414394 gist https://gist.github.com/brucemcpherson/3414365/raw
' this is used for object serliazation. Its just basic JSON with only string data types catered for
Option Explicit
' v2.18 3414365
'for more about this
' http://ramblings.mcpher.com/Home/excelquirks/classeslink/data-manipulation-classes
'to contact me
' http://groups.google.com/group/excel-ramblings
'reuse of code
' http://ramblings.mcpher.com/Home/excelquirks/codeuse
Private pParent As cJobject
Private pValue As Variant
Private pKey As String
Private pChildren As Collection
Private pValid As Boolean
Private pIndex As Long
Const cNull = "_null"
Const croot = "_deserialization"
Private pFake As Boolean            ' not a real key
Private pisArrayRoot                ' this is the root of an array
Private pPointer As Long            ' this one is used for deserializing string
Private pJstring As String          ' so is this
Private pWhatNext As String
Private pActive As Boolean
Private pJtype As eDeserializeType
Public Enum eDeserializeType
    eDeserializeNormal
    eDeserializeGoogleWire
End Enum
' this is for treeview - i couldnt find it anywhere
Public Enum tvw
    tvwFirst = 0
    tvwLast = 1
    tvwNext = 2
    tvwPrevious = 3
    tvwChild = 4
End Enum

Public Property Get self() As cJobject
    Set self = Me
End Property

Public Property Get isValid() As Boolean
    isValid = pValid
End Property

Public Property Let setValid(good As Boolean)
    pValid = good
End Property

Public Property Get jString() As String
    jString = pJstring
End Property

Public Property Get fake() As Boolean
    fake = pFake
    If Not pParent Is Nothing Then
        fake = fake And pParent.isArrayRoot
    End If
End Property

Public Property Get childIndex() As Long
    childIndex = pIndex
End Property

Public Property Let childIndex(p As Long)
    pIndex = p
End Property

Public Property Get isArrayRoot() As Boolean
    isArrayRoot = pisArrayRoot
End Property

Public Property Get isArrayMember() As Boolean
    If Not pParent Is Nothing Then
        isArrayMember = pParent.isArrayRoot
    Else
        isArrayMember = False
    End If
End Property

Public Property Let isArrayRoot(p As Boolean)
    pisArrayRoot = p
End Property

Public Property Get parent() As cJobject
    Set parent = pParent
End Property

Public Property Set parent(p As cJobject)
    Set pParent = p
End Property

Public Property Get isRoot() As Boolean
    isRoot = (root Is Me)
End Property

Public Sub clearParent()
    Set pParent = Nothing
End Sub

Public Property Get root() As cJobject
    Dim jo As cJobject
    ' the root is the object with no parent
    Set jo = Me
    While Not jo.parent Is Nothing
        Set jo = jo.parent
    Wend
    Set root = jo
End Property

Public Property Get key() As String
    key = pKey
End Property

Public Property Get value() As Variant
    value = pValue
End Property

Public Function cValue(Optional childName As String = "") As Variant
    If childName = "" Then
        cValue = value
    Else
        cValue = child(childName).value
    End If
End Function

Public Function toString(Optional childName As String = "") As String
   
    toString = CStr(cValue(childName))

End Function

Public Property Let value(p As Variant)
    pValue = p
End Property

Public Property Get children() As Collection
    Set children = pChildren
End Property

Public Property Set children(p As Collection)
    Set pChildren = p
End Property

Public Property Get hasChildren() As Boolean
    hasChildren = False
    If Not pChildren Is Nothing Then
        hasChildren = (pChildren.count > 0)
    End If
End Property

Public Function deleteChild(childName As String) As cJobject
    ' this deletes a child from the children collection
    Dim job As cJobject, target As cJobject
    Set target = childExists(childName)
    
    If (Not target Is Nothing) Then
        children.remove target.childIndex
        For Each job In children
            If job.childIndex > target.childIndex Then
                job.childIndex = job.childIndex - 1
            End If
        Next job
        target.tearDown
       
    End If
    Set deleteChild = Me
End Function

Public Function valueIndex(v As Variant) As Long
    ' check to see if h is in the cj array
    Dim cj As cJobject
    valueIndex = 0
    For Each cj In children
        If cj.value = v Then
            valueIndex = cj.childIndex
            Exit Function
        End If
    Next cj
    
End Function

Public Function toTreeView(tr As Object, Optional bEnableCheckBoxes As Boolean = False) As Object
    ' this populates a treeview with a cJobject
    tr.CheckBoxes = bEnableCheckBoxes
    Set toTreeView = treeViewPopulate(tr, Me)
    
End Function

Private Function treeViewPopulate(tr As Object, cj As cJobject, Optional parent As cJobject = Nothing)
    Dim c As cJobject, s As String
    s = ""
    If cj.hasChildren Then
        s = cj.key
    Else
        s = cj.key + " : " & cj.toString
    End If
    If (Not parent Is Nothing) Then
        tr.nodes.add parent.fullKey, tvwChild, cj.fullKey, s
    Else
        tr.nodes.add(, , cj.fullKey, cj.key).Expanded = True
    End If
    For Each c In cj.children
        treeViewPopulate tr, c, cj
    Next c
    Set treeViewPopulate = tr
    
End Function

Public Function init(p As cJobject, Optional k As String = cNull, Optional v As Variant = Empty) As cJobject
    Set pParent = p

    pFake = (k = cNull)
    If pFake Then
        pKey = CStr(pIndex)
    Else
        pKey = k
    End If

    If Not pParent Is Nothing Then
        If Not child(pKey) Is Nothing Then
            MsgBox ("Programming error " & pKey & " is a duplicate object")
            pValid = False
        Else
            pIndex = pParent.children.count + 1
            If pFake Then
                pKey = CStr(pIndex)
            End If
            pParent.children.add Me, pKey
        End If
    End If
    

    pValue = v

    Set init = Me

End Function

Public Function child(s As String) As cJobject
    Dim aString As Variant, n As Long, jo As cJobject, jc  As cJobject
    
    If Len(s) > 0 Then
        aString = Split(s, ".")
        Set jo = Me
        ' we take something x.y.z and find the child
        For n = LBound(aString) To UBound(aString)
            Set jc = jo.childExists(CStr(aString(n)))
            Set jo = jc
            If jo Is Nothing Then Exit For
        Next n
    End If
    Set child = jo

End Function

Public Function insert(Optional s As String = cNull, Optional v As Variant = Empty) As cJobject
    Dim joNew As cJobject, sk As String
    Set joNew = childExists(s)

    If joNew Is Nothing Then
        ' if its an array, use the child index as the name if there is no name given
        If pisArrayRoot And s = cNull Then
            sk = cNull

        Else
            sk = s
        End If
        
        Set joNew = New cJobject
        joNew.init Me, sk, v
    Else
        If Not IsEmpty(v) Then joNew.value = v
    End If
    Set insert = joNew
End Function

Public Function add(Optional k As String = cNull, Optional v As Variant = Empty) As cJobject
    Dim aString As Variant, n As Long, jo As cJobject, jc  As cJobject
    aString = Split(k, ".")
    Set jo = Me
    ' we take something x.y.z and add z with parent of y
    For n = LBound(aString) To UBound(aString)
        Set jc = jo.insert(CStr(aString(n)), v)
        Set jo = jc
    Next n
    Set add = jo
End Function

Public Function addArray() As cJobject
    pisArrayRoot = True
    Set addArray = Me
End Function

' check if this childExists in current children
Public Function childExists(s As String) As cJobject
    On Error GoTo handle
    Set childExists = pChildren(s)
    Exit Function
handle:
    Set childExists = Nothing
End Function

Private Function unSplitToString(a As Variant, delim As String, _
    Optional startAt As Long = -999, Optional howMany As Long = -999, _
    Optional startAtEnd As Boolean = False) As String
    Dim s As String, c As cStringChunker, i As Long

    ' sort out possible boundaries
    If startAt = -999 Then startAt = LBound(a)
    If howMany = -999 Then howMany = UBound(a) - startAt + 1
    If startAtEnd Then startAt = UBound(a) - howMany + 1
    ' will return nullstring on outside bounds
    If startAt < LBound(a) Or howMany + startAt - 1 > UBound(a) Then
        unSplitToString = ""
    Else
        Set c = New cStringChunker
        ' combine and convert to string
        For i = startAt To startAt + howMany - 1
            c.add(CStr(a(i))).add delim
        Next i
        unSplitToString = c.chopIf(delim).content
        Set c = Nothing
    End If
    End Function

Public Function find(s As String) As cJobject
    Dim jo As cJobject, f As cJobject, k As String, fk As String, possible As Boolean
    k = makeKey(s)
    fk = makeKey(fullKey(False))
    
    ' need to deal with find("x.y.z") as well as simple find("x")
    Dim kk As String, a As Variant, b As Variant
    b = Split(fk, ".")
    a = Split(k, ".")
    kk = unSplitToString(b, ".", , arrayLength(a), True)
    
    'now the fullkey is the same number of items as the key to compare it against
    If kk = k Then
        Set f = Me
    ElseIf hasChildren Then
        For Each jo In pChildren
            Set f = jo.find(s)
            If Not f Is Nothing Then Exit For
        Next jo
    End If
    Set find = f
End Function

Public Function convertToArray() As cJobject
    ' here's where have something like {x:{a:'x',b:'y'}} and we need to make {x:[{a:'x',b:'y'}]}
    Dim kids As Collection, newParent As cJobject, job As cJobject, newRoot As cJobject, i As Long
    
    ' if its got no kids but has a value then we need to assign that value
    
    If Not hasChildren Then
        addArray
        If Not IsEmpty(value) Then
            ' make a space for the value
            add , value
        Else
            ' do nothing
        End If
        Set convertToArray = Me
    Else
        ' we need to make a space for the object and for each child
        Set kids = children
        ' remove current item
        parent.children.remove (key)
        ' reset child indices
        i = 0
        For Each job In parent.children
            i = i + 1
            job.childIndex = i
        Next job
        
        ' add a new version of me
        Set newRoot = parent.add(key).addArray

        ' move over contents
        With newRoot.add
            For Each job In kids
                .add job.key, job.value
            Next job
        End With
        
        Set convertToArray = newRoot
    End If

    
End Function

Public Function fullKey(Optional includeRoot As Boolean = True) As String
    ' reconstruct full key to parent
    Dim s As String, jo As cJobject
    Set jo = Me
    While Not jo Is Nothing
        If (Not jo.isRoot) Or includeRoot Then s = jo.key & "." & s
        Set jo = jo.parent
    Wend
    If Len(s) > 0 Then s = Left(s, Len(s) - 1)
    fullKey = s
    
End Function

Public Function findByValue(X As Variant) As cJobject
    Dim job As cJobject, result As cJobject
    
    If value = X Then
        Set findByValue = Me
        Exit Function
    
    Else
        For Each job In children
            Set result = job.findByValue(X)
            If Not result Is Nothing Then
                Set findByValue = result
                Exit Function
            End If
        Next job
    End If
    
End Function

Public Function hasKey() As Boolean
    hasKey = pKey <> "" And _
        pKey <> cNull And _
        (hasChildren Or Not isArrayMember) And Not pFake
End Function

Public Function needsCurly() As Boolean
    needsCurly = hasKey
    If hasChildren Then
        needsCurly = pChildren(1).hasKey
    End If
    
End Function

Public Function needsSquare() As Boolean

    needsSquare = isArrayRoot

End Function

Public Function stringify(Optional blf As Boolean) As String
    stringify = serialize(blf)
End Function

Public Function serialize(Optional blf As Boolean = False) As String
' make a JSON string of this structure
  Dim T As cStringChunker
  
  Set T = New cStringChunker
  If Not fake Then T.add "{"
  recurseSerialize Me, T, blf
  If Not fake Then T.add "}"

  serialize = T.content
End Function

Public Property Get needsIndent() As Boolean
    needsIndent = needsCurly Or needsSquare
End Property

Public Function recurseSerialize(job As cJobject, Optional soFar As cStringChunker = Nothing, _
                Optional blf As Boolean = False) As cStringChunker
  Dim s As String, jo As cJobject, T As cStringChunker
  Static indent As Long
  If indent = 0 Then indent = 3
  If soFar Is Nothing Then
    Set T = New cStringChunker
  Else
    Set T = soFar
  End If

  If blf And (job.hasKey Or job.needsCurly) Then T.add Space(indent)
  
  If job.hasKey Then
    T.add(quote(job.key)).add (":")
  End If
  
  If Not (job.hasChildren Or job.isArrayRoot) Then
    If blf And Not job.hasKey Then s = s & Space(indent)
    If (VarType(job.value) <> vbLong And _
        VarType(job.value) <> vbBoolean And _
        VarType(job.value) <> vbInteger And _
        VarType(job.value) <> vbDouble And Not IsEmpty(job.value)) _
        Then
        T.add quote(CStr(escapeify(job.value)))
    Else
        If Not IsEmpty(job.value) Then
            T.add LCase(job.toString)
        Else
            T.add "null"
        End If
    End If
        
  Else
    ' arrays need squares
    
    If job.needsSquare Then T.add "["
    If job.needsCurly Then T.add "{"
    If blf And Not job.isArrayRoot Then T.add vbLf
    If job.needsIndent Then
        indent = indent + 3
    End If
    
    For Each jo In job.children
      recurseSerialize(jo, T, blf).add (",")
      If blf Then T.add (vbLf)
    Next jo
    
    ' get rid of trailing comma
    T.chopWhile(" ").chopIf(vbLf).chopIf (",")

    
    If job.needsIndent Then
        indent = indent - 3
        If blf Then T.add vbLf
    End If
    If blf Then T.add Space(indent)
    If job.needsCurly Then T.add "}"
    If job.needsSquare Then T.add " ]"
    
  End If
  Set recurseSerialize = T
End Function

Public Property Get longestFullKey() As Long
    longestFullKey = clongestFullKey(root)
End Property

Public Function clone() As cJobject
    Dim cj As cJobject
    Set cj = New cJobject
    Set cj = cj.init(Nothing).append(Me).children(1)
    cj.clearParent
    Set clone = cj
End Function

Public Function merge(mergeThisIntoMe As cJobject) As cJobject
    ' merge this cjobject with another
    ' items in merged with are replaced with items in Me
    Dim cj As cJobject, p As cJobject
    
    Set p = Me.find(mergeThisIntoMe.fullKey(False))
    
    If p Is Nothing Then
    ' i dont have it yet
        Set p = Me.append(mergeThisIntoMe)
    Else
    ' actually i do have it already
        If p.isArrayRoot Then
            ' but its an array - i need to get rid of it
            Set p = p.remove
            Set p = p.append(mergeThisIntoMe)
        Else
            p.value = mergeThisIntoMe.value
        End If
    End If
    ' now the other childreb tio merge in
    For Each cj In mergeThisIntoMe.children
       p.merge cj
    Next cj
    Set merge = Me

End Function

Public Function remove() As cJobject
    ' removes a branch
    Dim cj As cJobject, p As cJobject, i As Long
    
    Debug.Assert Not parent Is Nothing
    Debug.Assert parent.hasChildren
    
    parent.children.remove childIndex
    ' fix the childindices
    i = 0
    For Each cj In parent.children
        i = i + 1
        cj.childIndex = i
    Next cj
    Set remove = parent

End Function

Public Function append(appendThisToMe As cJobject) As cJobject
    ' append another object to me
    Dim cj As cJobject, p As cJobject

    If appendThisToMe.parent Is Nothing Then
        Set p = Me.add(appendThisToMe.key, appendThisToMe.value)
    
    ElseIf Not appendThisToMe.fake Then
        Set p = Me.add(appendThisToMe.key, appendThisToMe.value)
    
    Else
        Set p = Me.add(, appendThisToMe.value)
    End If
    
    If appendThisToMe.isArrayRoot Then p.addArray
    For Each cj In appendThisToMe.children
       p.append cj
    Next cj
    Set append = Me
End Function

Public Property Get depth(Optional l As Long = 0) As Long
    Dim jo As cJobject
    l = l + 1
    For Each jo In pChildren
        l = jo.depth(l)
    Next jo
    depth = l
End Property

Private Function clongestFullKey(job As cJobject, Optional soFar As Long = 0) As Long
    Dim jo As cJobject
    Dim l As Long
    l = Len(job.fullKey)
    If l < soFar Then l = soFar
    If Not job.children Is Nothing Then
        For Each jo In job.children
            l = clongestFullKey(jo, l)
        Next jo
    End If
    clongestFullKey = l
End Function

Public Property Get formatData(Optional bDebug As Boolean = False) As String
    formatData = cformatdata(root, , bDebug)
End Property

Private Function cformatdata(job As cJobject, Optional soFar As String = "", Optional bDebug As Boolean = False) As String
    Dim jo As cJobject, ji As cJobject
    Dim s As String
    s = soFar

        s = s & itemFormat(job, bDebug)
        If job.hasChildren Then
            For Each ji In job.children
                s = cformatdata(ji, s, bDebug)
            Next ji
        End If


    cformatdata = s
End Function

Private Function itemFormat(jo As cJobject, Optional bDebug As Boolean = False) As String
    Dim s As String
    s = jo.fullKey & Space(longestFullKey + 4 - Len(jo.fullKey)) _
            & CStr(jo.value)
    If bDebug Then
        s = s + "("
        s = s & "debug: Haskey :" & jo.hasKey & " NeedsCurly :" & jo.needsCurly & " NeedsSquare:" & jo.needsSquare
        s = s + " isArrayMember:" & jo.isArrayMember & " isArrayRoot:" & jo.isArrayRoot & " Fake:" & jo.fake
        s = s & ")"
    
    End If
    itemFormat = s + vbCrLf
End Function

Public Sub jdebug()
    Debug.Print formatData(True)
End Sub

Private Function quote(s As String) As String
    quote = q & s & q
End Function

Public Function parse(s As String, Optional jtype As eDeserializeType, Optional complain As Boolean = True) As cJobject
    Dim j As cJobject
    Set j = deSerialize(s, jtype, complain)
    If j.key = croot Then
        ' drop fake header
        j.sever
    End If
    Set parse = j
End Function

Public Function deSerialize(s As String, Optional jtype As eDeserializeType = eDeserializeNormal, Optional complain As Boolean = True) As cJobject
    ' this will take a simple JSON string and deserialize into a cJobject branch starting at ME
    ' prepare string for processing
    Dim jo As cJobject

    pPointer = 1
    pJstring = noisyTrim(s)
    Set jo = New cJobject
    jo.init Nothing, croot
    pJtype = jtype
    Set jo = dsLoop(jo, complain)
    ' already has its own root
    If jtype = eDeserializeGoogleWire Then
        Set jo = jo.children(1)
        jo.clearParent
    End If
    jo.setValid = pValid
    Set deSerialize = jo
End Function

Public Function sever() As cJobject
    pKey = cNull
    Set pParent = Nothing
    Set sever = Me
    pFake = True
End Function

Private Function noisyTrim(s As String) As String
    Dim ns As String
    ns = Trim(s)
    If Len(ns) > 0 Then
        While (isNoisy(Right(ns, 1)))
            ns = Left(ns, Len(ns) - 1)
        Wend
    End If
    noisyTrim = ns
End Function

Private Function nullItem(job As cJobject) As cJobject
    Set nullItem = Nothing
    
    If peek() = "," Then
    ' need an array element
    ' simulate a { 'x':'x}
        If pJtype = eDeserializeGoogleWire Then
            Set nullItem = job.add.add("v")
        Else
            Set nullItem = job.add
        End If
    End If

End Function

Private Function dsLoop(job As cJobject, Optional complain As Boolean = True) As cJobject
    Dim cj As cJobject, jo As cJobject, ws As String
    Set jo = job
    pActive = True
    pWhatNext = "{["
    While pPointer <= Len(pJstring) And pActive
        Set jo = dsProcess(jo, complain)
    Wend
    Set dsLoop = job
End Function

Private Function okWhat(what As String) As Boolean

    okWhat = (InStr(pWhatNext, nOk) <> 0 And _
                (what = "." Or what = "-" Or IsNumeric(what))) Or _
                (InStr(pWhatNext, what) <> 0)

End Function

Private Function peekNextToken() As String
    ' this is in case the next token is a special
    Dim k As Long
    peekNextToken = ""

    ignoreNoise
    k = pPointer
    While Not (isQuote(pointedAt(k)) Or isNoisy(pointedAt(k)) Or _
        IsNumeric(pointedAt(k)) Or 0 <> InStr("[]{},.:", pointedAt(k)))
        k = k + 1
    Wend
    If (k > pPointer) Then peekNextToken = LCase(pointedAt(, k - pPointer))
    
End Function

Private Function doNextToken() As String
    Dim nextToken As String
    ' poke around to fix exceptions like null, false, true
    nextToken = peekNextToken
    If nextToken = "null" Then
        pPointer = pPointer + Len(nextToken)
        ignoreNoise
        doNextToken = pointedAt
    ElseIf nextToken = "false" Then
        doNextToken = "0"
        pPointer = pPointer + Len(nextToken)
    ElseIf nextToken = "true" Then
        doNextToken = "1"
        pPointer = pPointer + Len(nextToken)
    End If
End Function

Private Function dsProcess(job As cJobject, Optional complain As Boolean = True) As cJobject
    Dim k As Long, jo As cJobject, s As String, what As String, jd As cJobject, v As Variant
    Dim nextToken As String, nt As String
    'are we done?
    Set dsProcess = job
    If pPointer > Len(pJstring) Then Exit Function

    Set jo = job
    ignoreNoise

    nextToken = doNextToken
    If nextToken <> "" Then
        what = nextToken
    Else
        what = pointedAt
    End If
    
    ' is it what was expected
    
    If Not okWhat(what) Then
        badJSON pWhatNext, , complain
        Exit Function
    End If
    ' process next token
    Select Case what
    ' start of key:value pair- do nothing except set up to get the key name
        Case "{"
            pPointer = pPointer + 1
            If jo.isArrayRoot Then Set jo = jo.add
            Set dsProcess = jo
            pWhatNext = anyQ & ",}"
            
    ' its the beginning of an array - need to kick off a new array
        Case "["
            pPointer = pPointer + 1
            If jo.isArrayRoot Then
                ' this is a double [[
                Set jo = jo.add
            End If
            If nullItem(jo.addArray) Is Nothing Then
                pWhatNext = nOk & anyQ & "{],["
            Else
                pWhatNext = ","
            End If
            Set dsProcess = jo

            
     ' could be a key or an array value
        Case q, qs, "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "."
            v = getvItem(, nextToken)
            If IsEmpty(v) Then
                badJSON pWhatNext, , complain
            Else
                ' start of key/value pair
                If peek() = ":" Then
                ' add as a new key, and set up for getting the value
                    Set jo = jo.add(CStr(v))
                    pWhatNext = ":"
                ElseIf jo.isArrayRoot Then
                ' an array value is allowed without a key
                    jo.add , v
                    pWhatNext = ",]"
                Else
                    badJSON pWhatNext, , complain
                End If
                Set dsProcess = jo

            End If

    ' its the value of a pair
        Case ":"
            pPointer = pPointer + 1
            nt = peekNextToken
            v = getvItem(, doNextToken)

            If IsEmpty(v) And nt <> "null" Then
                ' about to start an array rather than get a value
                pWhatNext = "{["
            Else
                ' store the value, come back for the next
                ' boolean hack
                If (v = 1 And nt = "true") Then
                    v = True
                ElseIf (v = 0 And nt = "false") Then
                    v = False
                End If
                jo.value = v
                Set jo = jo.parent
                pWhatNext = ",}"
            End If
            Set dsProcess = jo
            
        Case ","
    ' another value - same set
            pPointer = pPointer + 1
            If nullItem(jo) Is Nothing Then
                pWhatNext = nOk & anyQ & "{}],["
            Else
                pWhatNext = ","
            End If
            Set dsProcess = jo
            
        Case "}"
    ' backup a level
            pPointer = pPointer + 1
            pWhatNext = ",]}"
            Set dsProcess = jo.parent
               
        Case "]"
    ' backup a level
            pPointer = pPointer + 1
            pWhatNext = ",}]"
            Set dsProcess = jo.parent
            
        Case Else
    ' unexpected thing happened
            badJSON pWhatNext, , complain
    
    End Select

    
End Function

Private Function nOk() As String
    ' some character to say that a numeric is ok
    nOk = Chr(254)
End Function

Private Function getvItem(Optional whichQ As String = "", Optional nextToken = "") As Variant
    Dim s As String
    ' is it a string?
    getvItem = Empty
    ignoreNoise
    Select Case nextToken
        Case "1"
            getvItem = 1
        Case "0"
            getvItem = 0
        Case Else
            If isQuote(pointedAt) Then
                getvItem = getQuotedItem(whichQ)
            Else
    ' maybe its a number
                s = getNumericItem
                If Len(s) > 0 Then getvItem = toNumber(s)
            End If
    End Select
    
End Function

Private Function peek() As String
    Dim k As Long
    ' peek ahead to next non noisy character
    k = pPointer
    ignoreNoise
    peek = pointedAt
    pPointer = k
End Function

Private Function peekBehind() As String
    Dim k As Long
    k = pPointer - 1
    While k > 0 And isNoisy(pointedAt(k))
        k = k - 1
    Wend
    If k > 0 Then
        peekBehind = pointedAt(k)
    End If
End Function

Private Function toNumber(sIn As String) As Variant
    ' convert string to numeric , either double or long
    Dim ts As String, s As String, X As Date
 ' find out the '.' separator for this locale
    ts = Mid(CStr(1.1), 2, 1)
 ' and use it so that cdbl works properly
    s = Replace(sIn, ".", ts)
    On Error GoTo overflow
   

    If InStr(1, s, ts) Then
        toNumber = CDbl(s)
    Else
        toNumber = CLng(s)
    End If
    Exit Function
    
overflow:
    'perhaps this is a javascript date
    On Error GoTo overflowAgain
    If (Len(s) = 13) Then
        X = DateAdd("s", CDbl(Left(s, 10)), DateSerial(1970, 1, 1))
    End If
    toNumber = X
    Resume Next
    Exit Function
    
overflowAgain:
    'this wasnt a javascript date
    toNumber = 0
    Resume Next
    Exit Function
    
End Function

Private Function pointedAt(Optional pos As Long = 0, Optional sLen As Long = 1) As String
    ' return what ever the currently quoted character is
    Dim k As Long
    If pos = 0 Then
        k = pPointer
    Else
        k = pos
    End If
    pointedAt = Mid(pJstring, k, sLen)
End Function

Private Function getQuotedItem(Optional whichQ As String = "") As String
    Dim s As String, k As Long, wq As String
    ignoreNoise
    s = ""

    If isQuote(pointedAt, whichQ) Then
        wq = pointedAt
    ' extract until the next matching quote
        k = pPointer + 1

        While Not isQuote(pointedAt(k), wq)
          If isUnicode(pointedAt(k, 2)) Then
            s = s & ChrW(CLng("&H" & pointedAt(k + 2, 4)))
            'S = S & StrConv(Hex2Dec(pointedAt(k + 2, 4)), vbFromUnicode)
            k = k + 6
            
          ElseIf isEscape(pointedAt(k)) Then
            Select Case LCase(pointedAt(k + 1))
                Case "t"
                    s = s & vbTab
                Case "n"
                    s = s & vbLf
                Case "r"
                    s = s & vbCr
                Case Else
                    s = s & pointedAt(k + 1)
            End Select
            k = k + 2
          Else
            s = s & pointedAt(k)
            k = k + 1
          End If
        Wend
        pPointer = k + 1
    End If
    getQuotedItem = s

End Function

Private Function getNumericItem() As String
    Dim s As String, k As Long, eAllowed As Boolean
    ignoreNoise
    s = ""
    eAllowed = False
    k = pPointer
    While IsNumeric(pointedAt(k)) Or pointedAt(k) = "." Or pointedAt(k) = "-" Or (eAllowed And pointedAt(k) = "E")
        s = s & pointedAt(k)
        eAllowed = InStr(1, s, "E") < 1
        k = k + 1
    Wend
    pPointer = pPointer + Len(s)

    getNumericItem = s
    
End Function

Private Function isQuote(s As String, Optional whichQ As String = "") As Boolean
    If Len(whichQ) = 0 Then
        ' any quote
        isQuote = (s = q Or s = qs)
    Else
        isQuote = (s = whichQ)
    End If
End Function

Private Sub badJSON(pWhatNext As String, Optional add As String = "", Optional complain As Boolean = True)
    If (complain) Then
        MsgBox add & "got " & pointedAt & " expected --(" & pWhatNext & _
            ")-- Bad JSON at character " & CStr(pPointer) & " starting at " & _
            Mid(pJstring, pPointer)
    End If
    pValid = False
    pActive = False
    
End Sub

Private Sub ignoreNoise(Optional pos As Long = 0, Optional extraNoise As String = "")
    Dim k As Long, T As Long
    If pos = 0 Then
        T = pPointer
    Else
        T = pos
    End If
    For k = T To Len(pJstring)
        If Not isNoisy(Mid(pJstring, k, 1), extraNoise) Then Exit For
    Next k
    pPointer = k
End Sub

Private Function isNoisy(s As String, Optional extraNoise As String = "") As Boolean
    isNoisy = InStr(vbTab & " " & vbCrLf & vbCr & vbLf & extraNoise, s)
End Function

Private Function isEscape(s As String) As Boolean
    isEscape = (s = "\")
End Function

Private Function isUnicode(s As String) As Boolean
    isUnicode = LCase(s) = "\u"
End Function

Private Function q() As String
    q = Chr(34)
End Function

Private Function qs() As String
    qs = Chr(39)
End Function

Private Function anyQ() As String
    anyQ = q & qs
End Function

Private Function cleanDot(s As String) As String
    '. has special meaning for cJobject so if present in key, then remove
    cleanDot = makeKey(Replace(s, ".", "_ _"))
End Function

Public Function makeD3(cj As cJobject) As cJobject
    Dim cjc As cJobject

    If cj.hasChildren Then
        With add("children").addArray.add
            For Each cjc In cj.children
                .makeD3 cjc
            Next cjc
        End With
    Else
        add cj.key, cj.value
    End If
    
    Set makeD3 = Me
End Function

Public Sub tearDown()
    Dim cj As cJobject
    If Not pChildren Is Nothing Then
        For Each cj In pChildren
            cj.tearDown
        Next cj
    End If
    Set pParent = Nothing
    Set pChildren = Nothing
End Sub

Private Sub class_initialize()
    pisArrayRoot = False
    pValid = True
    pIndex = 1
    Set pChildren = New Collection
End Sub


Attribute VB_Name = "cStringChunker"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'gistThat@mcpher.com :do not modify this line - see ramblings.mcpher.com for details: updated on 5/3/2014 6:39:16 PM : from manifest:7471153 gist https://gist.github.com/brucemcpherson/5102369/raw/cStringChunker.cls
' stringChunker class for VBA because string concat takes ages
Option Explicit
' v1.06  5102369
Private pContent As String
Private pSize As Long
' minimum amount to increment by each time
Const defaultChunkSize = 64

Public Property Get size() As Long
    ' this is how much content is real
    size = pSize
End Property

Public Property Get content() As String
    ' return the real part of the content
    If pSize > 0 Then
        content = getLeft(size)
    Else
        content = ""
    End If
End Property

Public Property Get getLeft(howMany As Long) As String
    ' return the left part of the content
    ' c.getLeft(howmany) is equivalent to left(c.content,howmany), but avoids extra assignment
    getLeft = getMid(1, howMany)
End Property

Public Property Get getRight(howMany As Long) As String
    ' return the right part of the content
    ' c.getRight(howmany) is equivalent to right(c.content,howmany), but avoids extra assignment
    getRight = getMid(pSize - howMany + 1, howMany)
End Property

Public Property Get getMid(startPos As Long, Optional howMany As Long = -1) As String
    ' extract from content
    ' c.getMid(startPos,howmany) is equivalent to mid(c.content,startPos, howmany), but avoids extra assignment
    Dim n As Long
    Debug.Assert startPos > 0 And startPos <= pSize
    n = howMany
    If n = -1 Then
        n = pSize - startPos + 1
    End If
    n = minNumber(pSize - startPos + 1, n)
    If n > 0 Then
        getMid = Mid(pContent, startPos, n)
    Else
        getMid = ""
    End If
End Property

Public Property Get self() As cStringChunker
    ' convenience for with in with
    Set self = Me
End Property

Public Function clear() As cStringChunker
    ' easy to clear out.. may as well keep the same buffer going
    pSize = 0
    Set clear = Me
End Function

Public Function uri(addstring As String) As cStringChunker
    Set uri = add(URLEncode(addstring))
End Function

Public Function toString() As String
    toString = content()
End Function

Public Function add(addstring As String) As cStringChunker
    Dim k As Long
    ' add some content to end
    k = Len(addstring)
    If k > 0 Then
        adjustSize (k)
    
        Mid(pContent, size + 1, k) = addstring
        pSize = size + k
    End If
    Set add = Me
End Function

Public Function addLine(addstring As String) As cStringChunker
    Set addLine = add(addstring).add(vbCrLf)
End Function

Public Function insert(Optional insertString As String = " ", _
                    Optional insertBefore As Long = 1) As cStringChunker
    'default position is at beginning, insert a space
    'c.insert("x",c.size+1) is equivalent to c.add("x")
    
    If insertBefore = pSize + 1 Then
        Set insert = add(insertString)
        
    Else
        ' '.. how to handle programming errors?
        Debug.Assert insertBefore > 0 And insertBefore <= pSize
        
        ' regular string concatenation is better since there is overlap
        pContent = getLeft(insertBefore - 1) & insertString & getMid(insertBefore)
        pSize = Len(pContent)
        Set insert = Me
            
    End If
    Set insert = Me
End Function

Public Function overWrite(Optional overWriteString As String = " ", _
                    Optional overWriteAt As Long = 1) As cStringChunker
    'default position is at beginning, overwrite with a space
    Dim k As Long
    k = Len(overWriteString)
    If k > 0 Then
        ' '.. how to handle programming errors?
        Debug.Assert overWriteAt >= 0
        '' we'll allow overwrite to extend past end, be greedy
        adjustSize (k)
        pSize = maxNumber(pSize, k + overWriteAt - 1)
        
        Mid(pContent, overWriteAt, k) = overWriteString
        
    End If
    Set overWrite = Me
End Function
                        
Public Function shift(Optional startPos As Long = 1, _
                Optional howManyChars As Long = 0, _
                Optional replaceWith As String = "") As cStringChunker
    ' shift by howmany chars .. negative= left, positive = right
    ' how to deal with programming errors? message, raise error, assert?
    Dim howMany As Long
    
    howMany = howManyChars
    If howMany = 0 Then
        howMany = Len(replaceWith)
    End If
        
    Debug.Assert howMany + startPos > 0
    Debug.Assert startPos <= pSize And startPos > 0
    
    ' make space
    If howMany <> 0 Then

        If howMany > 0 Then
        ' its a right shift, use insert
            Set shift = insert(Space(howMany), startPos)
        Else
            ' a left shift
            If startPos > 1 Then
                ' we can do an overwrite
                overWrite getMid(startPos + howMany, pSize - startPos + 1), startPos
                pSize = pSize + howMany
            End If
        
        End If
    End If
    
    Set shift = Me
End Function

Public Function chop(Optional n As Long = 1) As cStringChunker
    ' chop n charaters from end of content
    pSize = maxNumber(0, pSize - n)
    Set chop = Me
End Function

Public Function chopIf(T As String) As cStringChunker
    ' chop if its t
    Dim k As Long
    k = Len(T)
    If k <= pSize Then
        If getRight(k) = T Then
            chop (k)
        End If
    End If
    Set chopIf = Me
End Function

Public Function chopWhile(T As String) As cStringChunker
    ' chop if its t
    Dim k As Long, X As Long
    
    Set chopWhile = Me
    X = pSize
    While chopIf(T).size <> X
        X = pSize
    Wend

End Function
Private Function maxNumber(a As Long, b As Long) As Long
    If a > b Then
        maxNumber = a
    Else
        maxNumber = b
    End If
End Function

Private Function minNumber(a As Long, b As Long) As Long
    If a < b Then
        minNumber = a
    Else
        minNumber = b
    End If
End Function

Private Function adjustSize(needMore As Long) As cStringChunker
    Dim need As Long
    need = pSize + needMore
    If Len(pContent) < need Then
        pContent = pContent & Space(needMore + maxNumber(defaultChunkSize, Len(pContent)))
    End If
    Set adjustSize = Me
End Function

Private Sub class_initialize()
    pSize = 0
    pContent = Space(defaultChunkSize)
End Sub






Attribute VB_Name = "docSCOTWT"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Option Explicit
'Version = 1.41
 
Public Sub GoToOtherControl()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "BMHere") <> 0 Then
            thisOne = Right(thisBM.name, Len(thisBM.name) - InStr(thisBM.name, "ZZ") - 1)
            thisOne = "BMControlFullName" & thisOne
            docSCOTWT.Bookmarks(thisOne).Select
            'Selection.Collapse wdCollapseStart
            Exit Sub
        End If
    Next
            
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckInqAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "BMCheckInqB") <> 0 Or InStr(thisBM.name, "BMCheckInq") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "BMCheckInqB", ""), "BMCheckInq", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckInqB" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheck1No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheck1Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("BMCheckInqB" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckServiceAll()
On Error GoTo errHandler
    
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckServiceB").Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainServiceCheckOff").Range.Copy
        docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = True
    Else
        docSCOTWT.Bookmarks("MainServiceCheckOn").Range.Copy
        docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = False
    End If
    docSCOTWT.Bookmarks("BMCheckServiceB").Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Sub MainOptionsAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "BMOptionsB") <> 0 Or InStr(thisBM.name, "BMOptions") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "BMOptionsB", ""), "BMOptions", "")
            Exit For
        End If
    Next
            
    Application.ScreenUpdating = False
    Call TurnOffTrackChanges
    If InStr(docSCOTWT.Bookmarks("BMOptionsB" + thisOne).Range.Fields(1).Code.Text, ".") = 0 Then
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        Select Case thisOne
            Case "1"
                docSCOTWT.Bookmarks("MainOptionYes").Range.Copy
                docSCOTWT.Bookmarks("BMOptionsB1").Range.Paste
                docSCOTWT.Bookmarks("MainOptionNo").Range.Copy
                docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
                docSCOTWT.Bookmarks("BMOptionsB2").Range.Paste
                docSCOTWT.Bookmarks("BMOptionsB3").Range.Paste
                docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = True
            Case "2"
                docSCOTWT.Bookmarks("MainOptionYes").Range.Copy
                docSCOTWT.Bookmarks("BMOptionsB2").Range.Paste
                docSCOTWT.Bookmarks("MainOptionNo").Range.Copy
                docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
                docSCOTWT.Bookmarks("BMOptionsB1").Range.Paste
                docSCOTWT.Bookmarks("BMOptionsB3").Range.Paste
                docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = False
            Case "3"
                docSCOTWT.Bookmarks("MainOptionYes").Range.Copy
                docSCOTWT.Bookmarks("BMOptionsB3").Range.Paste
                docSCOTWT.Bookmarks("MainOptionNo").Range.Copy
                docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
                docSCOTWT.Bookmarks("BMOptionsB2").Range.Paste
                docSCOTWT.Bookmarks("BMOptionsB1").Range.Paste
                docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = False
            Case "4"
                docSCOTWT.Bookmarks("MainOptionYes").Range.Copy
                docSCOTWT.Bookmarks("BMOptionsB4").Range.Paste
                docSCOTWT.Bookmarks("MainOptionNo").Range.Copy
                docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
                docSCOTWT.Bookmarks("BMOptionsB5").Range.Paste
                docSCOTWT.Bookmarks("AdditionalObserve").Range.Font.Hidden = True
                ShowAddObserve = False
            Case "5"
                docSCOTWT.Bookmarks("MainOptionYes").Range.Copy
                docSCOTWT.Bookmarks("BMOptionsB5").Range.Paste
                docSCOTWT.Bookmarks("MainOptionNo").Range.Copy
                docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
                docSCOTWT.Bookmarks("BMOptionsB4").Range.Paste
                docSCOTWT.Bookmarks("AdditionalObserve").Range.Font.Hidden = False
                ShowAddObserve = True
        End Select
    End If
    Application.ScreenUpdating = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckHighlyAll()
On Error GoTo errHandler
    
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckHighlyB").Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainHighlyCheckOff").Range.Copy
    Else
        If Profile.EngagementID = "" Then
            Call LoadProfile
        End If
        
        If Profile.PrelimAudit = 2 Then
            'show warning
            If Not isMigrating And Not gPullingDocument Then
                MsgBox Translate("HighlyAutoMessage", ChosenLanguage), vbOKOnly
            End If
        End If
        docSCOTWT.Bookmarks("MainHighlyCheckOn").Range.Copy
    End If
    docSCOTWT.Bookmarks("BMCheckHighlyB").Range.Paste
    If Not isMigrating Then docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Sub CheckRelateAll()
On Error GoTo errHandler
    
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckRelateB").Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainRelateCheckOff").Range.Copy
        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
    Else
        docSCOTWT.Bookmarks("MainRelateCheckOn").Range.Copy
        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = False
    End If
    docSCOTWT.Bookmarks("BMCheckRelateB").Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Sub CheckRotateAll()
On Error GoTo errHandler
    
    Call TurnOffTrackChanges
    Call CheckForOpenEmbedded
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckRotateB").Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainRotateCheckOff").Range.Copy
        shFormData.Range("ShowDesign").value = "Y"
        Profile.ShowDesign = True
    Else
        docSCOTWT.Bookmarks("MainRotateCheckOn").Range.Copy
        shFormData.Range("ShowDesign").value = "N"
        Profile.ShowDesign = False
    End If
    docSCOTWT.Bookmarks("BMCheckRotateB").Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    'Call SaveEmbedded
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Sub CheckInsAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "BMCheckInsB") <> 0 Or InStr(thisBM.name, "BMCheckIns") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "BMCheckInsB", ""), "BMCheckIns", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckInsB" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheck3No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheck3Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("BMCheckInsB" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckObsAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "BMCheckObsB") <> 0 Or InStr(thisBM.name, "BMCheckObs") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "BMCheckObsB", ""), "BMCheckObs", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckObsB" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheck2No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheck2Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("BMCheckObsB" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckRepAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "BMCheckRepB") <> 0 Or InStr(thisBM.name, "BMCheckRep") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "BMCheckRepB", ""), "BMCheckRep", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("BMCheckRepB" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheck4No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheck4Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("BMCheckRepB" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckTest1All()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "CheckTest1B") <> 0 Or InStr(thisBM.name, "CheckTest1") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "CheckTest1B", ""), "CheckTest1", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("CheckTest1B" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheckTest1No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheckTest1Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("CheckTest1B" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckTest2All()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "CheckTest2B") <> 0 Or InStr(thisBM.name, "CheckTest2") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "CheckTest2B", ""), "CheckTest2", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("CheckTest2B" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheckTest2No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheckTest2Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("CheckTest2B" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CheckTest3All()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisOne As String
    
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "CheckTest3B") <> 0 Or InStr(thisBM.name, "CheckTest3") <> 0 Then
            thisOne = Replace(Replace(thisBM.name, "CheckTest3B", ""), "CheckTest3", "")
            Exit For
        End If
    Next
            
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    If InStr(docSCOTWT.Bookmarks("CheckTest3B" + thisOne).Range.Fields(1).Code.Text, ".") <> 0 Then
        docSCOTWT.Bookmarks("MainCheckTest3No").Range.Copy
    Else
        docSCOTWT.Bookmarks("MainCheckTest3Yes").Range.Copy
    End If
    docSCOTWT.Bookmarks("CheckTest3B" + thisOne).Range.Paste
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Sub ShowMe()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim childBM As Bookmark
    Dim thisWCGWNum As String
    Dim thisFF As Field
    Dim tempStr As String
    Dim indexWCGW As Integer
    Dim thisControlIndex As Integer
    Dim reHide As Boolean
    Dim isTestOfControl As Boolean
    Dim isDirectTest As Boolean
    Dim i As Integer
    Dim j As Integer
    Dim thisWCGWID As Integer
    Dim thisControlID As Integer
    
    Call TurnOffTrackChanges
    Set thisFF = Selection.Fields(1)
    Set thisBM = Selection.Bookmarks(Selection.Bookmarks.count)
    Call LoadProfile
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
    With docSCOTWT
        Select Case thisBM.name
            Case "ShowRisks", "BMSigRisksTitle"
                .Bookmarks("SigRisks").Range.Font.Hidden = False
                .Bookmarks("ShowRisks").Range.Font.Hidden = True
                .Bookmarks("HideRisks").Range.Font.Hidden = False
            Case "ShowChars", "BMSCOTCharsTitle"
                .Bookmarks("ScotChars").Range.Font.Hidden = False
                .Bookmarks("ShowChars").Range.Font.Hidden = True
                .Bookmarks("HideChars").Range.Font.Hidden = False
                'show/hide questions pertinent to this profile
                If Profile.IntegratedAudit = False And (Profile.ChosenSCOTType = 1 Or Profile.ChosenSCOTType2 = 1) And Profile.PrelimAudit = 1 Then
                    'show rotation checkbox
                    docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = False
                Else
                    'hide rotation checkbox
                    docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = True
                End If
                If InStr(docSCOTWT.Bookmarks("BMCheckServiceB").Range.Fields(1).Code.Text, ".") <> 0 Then
                    docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = False
                Else
                    docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = True
                End If
                If Profile.PCAOB Or Profile.PCAOBIA Or Profile.PrelimAudit = 1 Then
                    docSCOTWT.Bookmarks("RelatedPartyRow").Range.Font.Hidden = True
                    docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
                Else
                    docSCOTWT.Bookmarks("RelatedPartyRow").Range.Font.Hidden = False
                    If InStr(docSCOTWT.Bookmarks("BMCheckRelateB").Range.Fields(1).Code.Text, ".") <> 0 Then
                        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = False
                    Else
                        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
                    End If
                End If
            
            Case "ShowDocumentation", "BMDocAndOther"
                .Bookmarks("DocConsiderations").Range.Font.Hidden = False
                .Bookmarks("ShowDocumentation").Range.Font.Hidden = True
                .Bookmarks("HideDocumentation").Range.Font.Hidden = False
                If (InStr(docSCOTWT.Bookmarks("BMOptionsB2").Range.Fields(1).Code.Text, ".") <> 0 Or InStr(docSCOTWT.Bookmarks("BMOptionsB3").Range.Fields(1).Code.Text, ".") <> 0) Then
                    docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = False
                Else
                    docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = True
                End If
            Case "ShowConclusions"
                .Bookmarks("ConclusionSection").Range.Font.Hidden = False
                If InStr(docSCOTWT.Bookmarks("BMOptionsB5").Range.Fields(1).Code.Text, ".") <> 0 And Not docSCOTWT.Bookmarks("ConclusionSection").Range.Font.Hidden = True Then
                    .Bookmarks("AdditionalObserve").Range.Font.Hidden = False
                Else
                    .Bookmarks("AdditionalObserve").Range.Font.Hidden = True
                End If
                .Bookmarks("ShowConclusions").Range.Font.Hidden = True
                .Bookmarks("HideConclusions").Range.Font.Hidden = False
            Case Else 'WCGWs & Controls
                If InStr(thisFF.Code.Text, "ShowMe") <> 0 Then
                    'show it
                    If InStr(thisBM.name, "EntireSection") <> 0 Then
                        tempStr = Replace(thisBM.name, "EntireSection", "")
                        .Bookmarks("FullControl" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("ControlsTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("ControlsTableShow" + tempStr).Range.Font.Hidden = True
                        
                        thisWCGWID = GetWCGWIndex(Right(tempStr, Len(tempStr) - (InStr(tempStr, "WCGW") + 3)))
                        thisControlID = GetControlIndex(thisWCGWID, Left(tempStr, InStr(tempStr, "WCGW") - 1))
                            
                        If WCGWs(thisWCGWID).Controls(thisControlID).isMainDoc Then
                        
                            If InStr(docSCOTWT.Bookmarks("InSCOTYes" + tempStr).Range.Fields(1).Code.Text, ".") = 0 Then
                                .Bookmarks("BMWPReferenceRow" + tempStr).Range.Font.Hidden = True
                                .Bookmarks("EntireCntlThisSCOT" + tempStr).Range.Font.Hidden = False
                            Else
                                .Bookmarks("EntireCntlThisSCOT" + tempStr).Range.Font.Hidden = True
                            End If
                            
                            If .Bookmarks("BMWPReferenceRow" + tempStr).Range.Font.Hidden = True Then
                               'Other wcgws section
                               If .Bookmarks("BMrelatedOnes" + tempStr).Range.Text = "" Then
                                   'hide whole section
                                   .Bookmarks("EntCntlOthersSec" + tempStr).Range.Font.Hidden = True
                               Else
                                   .Bookmarks("OthersSecTableShow" + tempStr).Range.Font.Hidden = True
                               End If
                               
                               .Bookmarks("ControlPropTableShow" + tempStr).Range.Font.Hidden = True
                               'Do we need the Nature of Testing column?
                               If Profile.IntegratedAudit = True And CleanBM(.Bookmarks("ControlPropType" + tempStr).Range.Text) <> Translate("Application", ChosenLanguage) Then
                                   'if is Integrated Audit and NOT type of Application then show Nature of testing column
                                   .Bookmarks("CntlPropNatTestGrid" + tempStr).Range.Font.Hidden = False
                                   .Bookmarks("CntlPropNONNatGrid" + tempStr).Range.Font.Hidden = True
                               Else
                                   .Bookmarks("CntlPropNatTestGrid" + tempStr).Range.Font.Hidden = True
                                   .Bookmarks("CntlPropNONNatGrid" + tempStr).Range.Font.Hidden = False
                               End If
                               
                               .Bookmarks("CntlOwnTableShow" + tempStr).Range.Font.Hidden = True
                               'In Owner Section - Show Application section or other
                               If CleanBM(.Bookmarks("ControlPropType" + tempStr).Range.Text) = Translate("Application", ChosenLanguage) Then
                                   'show application
                                   .Bookmarks("FullCntlOwnNonAppSec" + tempStr).Range.Font.Hidden = True
                                   'hide Data Used section
                                   .Bookmarks("EntireCntlDataUsed" + tempStr).Range.Font.Hidden = True
                               Else
                                   'show other
                                   .Bookmarks("FullCntlOwnAppSec" + tempStr).Range.Font.Hidden = True
                                   'show Data Used
                                   .Bookmarks("CntlDataUsdTableShow" + tempStr).Range.Font.Hidden = True
                               End If
    
                                If InStr(docSCOTWT.Bookmarks("ReviewYes" + tempStr).Range.Fields(1).Code.Text, ".") = 0 Then
                                    .Bookmarks("EntireControlReview" + tempStr).Range.Font.Hidden = True
                                    .Bookmarks("FullConfirmReviewSec" + tempStr).Range.Font.Hidden = True
                                Else
                                    If Profile.PCAOB Or Profile.PCAOBIA Then
                                        .Bookmarks("FullConfirmReviewGam" + tempStr).Range.Font.Hidden = True
                                    Else
                                        .Bookmarks("FullConfirmReviewPCA" + tempStr).Range.Font.Hidden = True
                                        .Bookmarks("FullConfirmReviewRef" + tempStr).Range.Font.Hidden = True
                                    End If
                                    .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = True
                                End If
                               
                               .Bookmarks("CntlConcTableShow" + tempStr).Range.Font.Hidden = True
                               
                               .Bookmarks("CntlConfirmTableShow" + tempStr).Range.Font.Hidden = True
                            End If
                        End If
                    ElseIf InStr(thisBM.name, "EntireCntlThisSCOT") <> 0 Then
                        tempStr = Replace(thisBM.name, "EntireCntlThisSCOT", "")
                        .Bookmarks("FullOthersSection" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("OthersSecTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("OthersSecTableShow" + tempStr).Range.Font.Hidden = True
                        
                    ElseIf InStr(thisBM.name, "FullControl") <> 0 Then
                        tempStr = Replace(thisBM.name, "FullControl", "")
                        .Bookmarks("FullOtherSCOT" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("OtherSCOTTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("OtherSCOTTableShow" + tempStr).Range.Font.Hidden = True
                        If InStr(docSCOTWT.Bookmarks("InSCOTYes" + tempStr).Range.Fields(1).Code.Text, ".") = 0 Then
                            .Bookmarks("BMWPReferenceRow" + tempStr).Range.Font.Hidden = True
                            .Bookmarks("EntireCntlThisSCOT" + tempStr).Range.Font.Hidden = False
                        Else
                            .Bookmarks("EntireCntlThisSCOT" + tempStr).Range.Font.Hidden = True
                        End If
                        
                    ElseIf InStr(thisBM.name, "ControlPropTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "ControlPropTableShow", ""), "ControlPropTableHide", "")
                        .Bookmarks("FullControlProp" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("ControlPropTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("ControlPropTableShow" + tempStr).Range.Font.Hidden = True
                        'Do we need the Nature of Testing column?
                        If Profile.IntegratedAudit = True And CleanBM(.Bookmarks("ControlPropType" + tempStr).Range.Text) <> Translate("Application", ChosenLanguage) Then
                            'if is Integrated Audit and NOT type of Application then show Nature of testing column
                            .Bookmarks("CntlPropNatTestGrid" + tempStr).Range.Font.Hidden = False
                            .Bookmarks("CntlPropNONNatGrid" + tempStr).Range.Font.Hidden = True
                        Else
                            .Bookmarks("CntlPropNatTestGrid" + tempStr).Range.Font.Hidden = True
                            .Bookmarks("CntlPropNONNatGrid" + tempStr).Range.Font.Hidden = False
                        End If
                    ElseIf InStr(thisBM.name, "CntlOwnTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlOwnTableShow", ""), "CntlOwnTableHide", "")
                        .Bookmarks("FullControlOwner" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlOwnTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlOwnTableShow" + tempStr).Range.Font.Hidden = True
                        
                        reHide = False
                        If docSCOTWT.Bookmarks("ControlPropType" + tempStr).Range.Font.Hidden = True Then
                            reHide = True
                            docSCOTWT.Bookmarks("ControlPropType" + tempStr).Range.Font.Hidden = False
                        End If
                        If CleanBM(docSCOTWT.Bookmarks("ControlPropType" + tempStr).Range.Text) = Translate("Application", ChosenLanguage) Then
                            'show application
                            docSCOTWT.Bookmarks("FullCntlOwnNonAppSec" + tempStr).Range.Font.Hidden = True
                        Else
                            'show other
                            docSCOTWT.Bookmarks("FullCntlOwnAppSec" + tempStr).Range.Font.Hidden = True
                        End If
                        If reHide Then
                            docSCOTWT.Bookmarks("ControlPropType" + tempStr).Range.Font.Hidden = True
                        End If
                    ElseIf InStr(thisBM.name, "EntireCntlDataUsed") <> 0 Then
                        tempStr = Replace(thisBM.name, "EntireCntlDataUsed", "")
                        .Bookmarks("FullControlDataUsed" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlDataUsdTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlDataUsdTableShow" + tempStr).Range.Font.Hidden = True
                    ElseIf InStr(thisBM.name, "CntlConcTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlConcTableShow", ""), "CntlConcTableHide", "")
                        .Bookmarks("FullCntlConc" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlConcTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlConcTableShow" + tempStr).Range.Font.Hidden = True
                    ElseIf InStr(thisBM.name, "CntlConfirmTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlConfirmTableShow", ""), "CntlConfirmTableHide", "")
                        .Bookmarks("FullControlConfirm" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlConfirmTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlConfirmTableShow" + tempStr).Range.Font.Hidden = True
                        If InStr(docSCOTWT.Bookmarks("ReviewYes" + tempStr).Range.Fields(1).Code.Text, ".") = 0 Then
                            .Bookmarks("EntireControlReview" + tempStr).Range.Font.Hidden = True
                            .Bookmarks("FullConfirmReviewSec" + tempStr).Range.Font.Hidden = True
                        Else
                            If Profile.PCAOB Or Profile.PCAOBIA Then
                                .Bookmarks("FullConfirmReviewGam" + tempStr).Range.Font.Hidden = True
                            Else
                                .Bookmarks("FullConfirmReviewPCA" + tempStr).Range.Font.Hidden = True
                                .Bookmarks("FullConfirmReviewRef" + tempStr).Range.Font.Hidden = True
                            End If
                            .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = True
                        End If
                    ElseIf InStr(thisBM.name, "EntireControlReview") <> 0 Then
                        tempStr = Replace(thisBM.name, "EntireControlReview", "")
                        .Bookmarks("FullControlReview" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlRevTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = True
                    Else
                        tempStr = Replace(Replace(Replace(Replace(thisBM.name, "WCGWTableShow", ""), "WCGWDelete", ""), "EntireWCGW", ""), "WCGWTableHide", "")
                        .Bookmarks("WCGWAsserts" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("WCGWTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("WCGWTableShow" + tempStr).Range.Font.Hidden = True
                    End If
                End If
        End Select
    End With
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub
     
Private Sub Document_Close()

    'Kill all the apps we opened
    On Error Resume Next
    If Not wkbkData Is Nothing Then
        wkbkData.Application.Visible = True
        wkbkData.Close (True)
        Set wkbkData = Nothing
    End If
    If Not wkbkConSum Is Nothing Then
        wkbkConSum.Application.Visible = True
        wkbkConSum.Close (False)
        Set wkbkConSum = Nothing
    End If
    If Not mfxlApp Is Nothing Then
        If mfxlApp.workbooks.count = 0 Then
            mfxlApp.Quit
        End If
        Set mfxlApp = Nothing
    End If
    If Not mfwdApp Is Nothing Then
        mfwdApp.Quit
        Set mfwdApp = Nothing
    End If
    If Not xlApp Is Nothing Then
        If xlApp.workbooks.count = 0 Then
            xlApp.Quit
        End If
        Set xlApp = Nothing
    End If

End Sub

Private Sub Document_Open()
On Error GoTo errHandler

    Dim i As Integer

    Call Register_Event_Handler

    Call InitializeErrorLogger
    ChosenLanguage = "English"
    docSCOTWT.Activate
   
    With docSCOTWT
        .ActiveWindow.View.ShowAll = False 'Hide all formatting marks
        .ActiveWindow.View.ShowHiddenText = False 'Do not display hidden text
        .Application.Options.PrintHiddenText = False 'Do not print hidden text
        .Application.Options.DisplayGridLines = False  'turn off gridlines
        .Application.Options.UpdateLinksAtOpen = False
    End With
    Application.Options.ButtonFieldClicks = 1
    inTrackChangesLoop = 0
    
    'open embedded data excel
    badEmbedded = False
    Call OpenDataExcel
    DoEvents
    docSCOTWT.Activate
    If badEmbedded Then
        'already showed message, exit
        Exit Sub
    End If

    Call TurnOffTrackChanges
    Call LoadProfile
    isArchived = shFormData.Range("Archived").value
    ChosenLanguage = shFormData.Range("ChosenLanguage").value

    'load variables
    If InStr(docSCOTWT.Bookmarks("BMOptionsB1").Range.Fields(1).Code.Text, ".") <> 0 Or (InStr(docSCOTWT.Bookmarks("BMOptionsB2").Range.Fields(1).Code.Text, ".") = 0 And InStr(docSCOTWT.Bookmarks("BMOptionsB3").Range.Fields(1).Code.Text, ".") = 0) Then
        docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = True
    ElseIf Not docSCOTWT.Bookmarks("DocConsiderations").Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = False
    End If
    If InStr(docSCOTWT.Bookmarks("BMOptionsB4").Range.Fields(1).Code.Text, ".") <> 0 And Not docSCOTWT.Bookmarks("ConclusionSection").Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("AdditionalObserve").Range.Font.Hidden = False
        ShowAddObserve = True
    Else
        docSCOTWT.Bookmarks("AdditionalObserve").Range.Font.Hidden = True
        ShowAddObserve = False
    End If
    If InStr(docSCOTWT.Bookmarks("BMCheckServiceB").Range.Fields(1).Code.Text, ".") <> 0 And Not docSCOTWT.Bookmarks("BMGridPrelimAudit").Range.Font.Hidden = True Then
        ShowServiceOrg = True
        docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = False
    Else
        ShowServiceOrg = False
        docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = True
    End If

    If InStr(docSCOTWT.Bookmarks("BMCheckRelateB").Range.Fields(1).Code.Text, ".") <> 0 Then
        ShowRelatedParty = True
        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = False
    Else
        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
        ShowRelatedParty = False
    End If
    
    If docSCOTWT.Bookmarks("BMGridPrelimAudit").Range.Font.Hidden = False Then
        If Profile.IntegratedAudit = False And (Profile.ChosenSCOTType = 1 Or Profile.ChosenSCOTType2 = 1) And Profile.PrelimAudit = 1 Then
            'show rotation checkbox
            docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = False
        Else
            'hide rotation checkbox
            docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = True
        End If
    Else
        'hide rotation checkbox
        docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = True
    End If
    
    Dim childBM As Bookmark
    For Each childBM In docSCOTWT.Bookmarks
        If InStr(childBM.name, "ControlsTableShow") <> 0 Then
            If childBM.Range.Font.Hidden = False Then
                If docSCOTWT.Bookmarks.Exists(Replace(childBM.name, "ControlsTableShow", "EntCntlAlrdyAdd")) Then
                    docSCOTWT.Bookmarks(Replace(childBM.name, "ControlsTableShow", "EntCntlAlrdyAdd")).Range.Font.Hidden = True
                End If
            End If
        End If
    Next
    Call ResetTrackChangesValues
    If docSCOTWT.Bookmarks.Exists("DocBegin") Then docSCOTWT.Bookmarks("DocBegin").Select
    
    'ask to import PY/other form data
    Call CheckForDataPull
    docSCOTWT.UndoClear
    Selection.HomeKey Unit:=wdStory
    Exit Sub
    
errHandler:

    Call LogErrorMessage("Form open - ", Err)
    MsgBox "An error occurred while opening the form.  Error: " & str(Err.Number) & " - " & Err.Description
    
End Sub

Public Sub InAnotherSCOTYesAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "InSCOTYes") <> 0 Then
            thisWCGW = Replace(Replace(thisBM.name, "InSCOTYesB", ""), "InSCOTYes", "")
            
            'Hide the rest of control section and show the WP Reference
            docSCOTWT.Bookmarks("EntireCntlThisSCOT" + thisWCGW).Range.Font.Hidden = True
            docSCOTWT.Bookmarks("BMWPReferenceRow" + thisWCGW).Range.Font.Hidden = False
                
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("InSCOTYesOptionSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("InSCOTYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("InSCOTNoOptionNotSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("InSCOTNo" + thisWCGW).Range.Paste
        End If
    Next
    Selection.Collapse (wdCollapseEnd)
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
        
End Sub

Public Sub InAnotherSCOTNoAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "InSCOTNo") <> 0 Then
            thisWCGW = Replace(Replace(Replace(Replace(thisBM.name, "InSCOTYesB", ""), "InSCOTYes", ""), "InSCOTNoB", ""), "InSCOTNo", "")
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("InSCOTYesOptionNotSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("InSCOTYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("InSCOTNoOptionSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("InSCOTNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
            
            'show the rest of control section and hide the WP Reference
            docSCOTWT.Bookmarks("EntireCntlThisSCOT" + thisWCGW).Range.Font.Hidden = False
            
            'Other wcgws section
            If docSCOTWT.Bookmarks("BMrelatedOnes" + thisWCGW).Range.Text = "" Then
                'hide whole section
                docSCOTWT.Bookmarks("EntCntlOthersSec" + thisWCGW).Range.Font.Hidden = True
            Else
                docSCOTWT.Bookmarks("OthersSecTableShow" + thisWCGW).Range.Font.Hidden = True
            End If
            
            docSCOTWT.Bookmarks("ControlPropTableShow" + thisWCGW).Range.Font.Hidden = True
            'Do we need the Nature of Testing column?
            If Profile.IntegratedAudit = True And CleanBM(docSCOTWT.Bookmarks("ControlPropType" + thisWCGW).Range.Text) <> Translate("Application", ChosenLanguage) Then
                'if is Integrated Audit and NOT type of Application then show Nature of testing column
                docSCOTWT.Bookmarks("CntlPropNatTestGrid" + thisWCGW).Range.Font.Hidden = False
                docSCOTWT.Bookmarks("CntlPropNONNatGrid" + thisWCGW).Range.Font.Hidden = True
            Else
                docSCOTWT.Bookmarks("CntlPropNatTestGrid" + thisWCGW).Range.Font.Hidden = True
                docSCOTWT.Bookmarks("CntlPropNONNatGrid" + thisWCGW).Range.Font.Hidden = False
            End If
            
            docSCOTWT.Bookmarks("CntlOwnTableShow" + thisWCGW).Range.Font.Hidden = True
            'In Owner Section - Show Application section or other
            If CleanBM(docSCOTWT.Bookmarks("ControlPropType" + thisWCGW).Range.Text) = Translate("Application", ChosenLanguage) Then
                'show application
                docSCOTWT.Bookmarks("FullCntlOwnNonAppSec" + thisWCGW).Range.Font.Hidden = True
                'hide Data Used section
                docSCOTWT.Bookmarks("EntireCntlDataUsed" + thisWCGW).Range.Font.Hidden = True
            Else
                'show other
                docSCOTWT.Bookmarks("FullCntlOwnAppSec" + thisWCGW).Range.Font.Hidden = True
                'show Data Used
                docSCOTWT.Bookmarks("CntlDataUsdTableShow" + thisWCGW).Range.Font.Hidden = True
            End If
        
            If InStr(docSCOTWT.Bookmarks("ReviewYes" + thisWCGW).Range.Fields(1).Code.Text, ".") = 0 Then
                docSCOTWT.Bookmarks("EntireControlReview" + thisWCGW).Range.Font.Hidden = True
                docSCOTWT.Bookmarks("FullConfirmReviewSec" + thisWCGW).Range.Font.Hidden = True
            Else
                If Profile.PCAOB Or Profile.PCAOBIA Then
                    docSCOTWT.Bookmarks("FullConfirmReviewGam" + thisWCGW).Range.Font.Hidden = True
                Else
                    docSCOTWT.Bookmarks("FullConfirmReviewPCA" + thisWCGW).Range.Font.Hidden = True
                    docSCOTWT.Bookmarks("FullConfirmReviewRef" + thisWCGW).Range.Font.Hidden = True
                End If
                docSCOTWT.Bookmarks("CntlRevTableShow" + thisWCGW).Range.Font.Hidden = True
            End If
            
            docSCOTWT.Bookmarks("CntlConcTableShow" + thisWCGW).Range.Font.Hidden = True
            
            docSCOTWT.Bookmarks("CntlConfirmTableShow" + thisWCGW).Range.Font.Hidden = True
            
            'reset this field
            docSCOTWT.Bookmarks("BMWPReferenceRow" + thisWCGW).Range.Font.Hidden = True
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub ControlPropertiesYesAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "ReviewYes") <> 0 Then
            thisWCGW = Replace(Replace(Replace(Replace(thisBM.name, "ReviewYesB", ""), "ReviewYes", ""), "ReviewNoB", ""), "ReviewNo", "")
            
            'Hide the rest of control section and show the WP Reference
            docSCOTWT.Bookmarks("EntireControlReview" + thisWCGW).Range.Font.Hidden = False
            docSCOTWT.Bookmarks("FullConfirmReviewSec" + thisWCGW).Range.Font.Hidden = False
            If Profile.PCAOB Or Profile.PCAOBIA Then
                docSCOTWT.Bookmarks("FullConfirmReviewGam" + thisWCGW).Range.Font.Hidden = True
            Else
                docSCOTWT.Bookmarks("FullConfirmReviewPCA" + thisWCGW).Range.Font.Hidden = True
                docSCOTWT.Bookmarks("FullConfirmReviewRef" + thisWCGW).Range.Font.Hidden = True
            End If
            docSCOTWT.Bookmarks("CntlRevTableShow" + thisWCGW).Range.Font.Hidden = True
                
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("ReviewYesOptionSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ReviewYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("ReviewNoOptionNotSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ReviewNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub ControlPropertiesNoAll()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "ReviewYes") <> 0 Then
            thisWCGW = Replace(Replace(Replace(Replace(thisBM.name, "ReviewYesB", ""), "ReviewYes", ""), "ReviewNoB", ""), "ReviewNo", "")
        
            'show the rest of control section and hide the WP Reference
            docSCOTWT.Bookmarks("EntireControlReview" + thisWCGW).Range.Font.Hidden = True
            docSCOTWT.Bookmarks("FullConfirmReviewSec" + thisWCGW).Range.Font.Hidden = True
                
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("ReviewYesOptionNotSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ReviewYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("ReviewNoOptionSelected").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ReviewNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub
Public Sub CntlPropPerYes()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "PersonYes") <> 0 Then
            thisWCGW = Replace(Replace(thisBM.name, "PersonYesB", ""), "PersonYes", "")
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainPerYesSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("PersonYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainPerNoUnSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("PersonNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CntlPropPerNo()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "PersonNo") <> 0 Then
            thisWCGW = Replace(Replace(thisBM.name, "PersonNoB", ""), "PersonNo", "")
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainPerYesUnSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("PersonYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainPerNoSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("PersonNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CntlPropConcYes()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "ConcludeYes") <> 0 Then
            thisWCGW = Replace(Replace(thisBM.name, "ConcludeYesB", ""), "ConcludeYes", "")
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainConcYesSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ConcludeYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainConcNoUnSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ConcludeNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CntlPropConcNo()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGW As String
    
    Call TurnOffTrackChanges
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "ConcludeNo") <> 0 Then
            thisWCGW = Replace(Replace(thisBM.name, "ConcludeNoB", ""), "ConcludeNo", "")
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainConcYesUnSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ConcludeYes" + thisWCGW).Range.Paste
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainConcNoSel").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            docSCOTWT.Bookmarks("ConcludeNo" + thisWCGW).Range.Paste
            
            Selection.Collapse (wdCollapseEnd)
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Attribute VB_Name = "frmAssocControl"
Attribute VB_Base = "0{0D9DCC25-B17D-48EB-811F-380639591699}{CFCC0B07-5012-4B5B-AD33-013F1AE0698B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgFinish_Click()

    Call btnFinish_Click

End Sub

Private Sub UserForm_Activate()
    
    DoEvents
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler

    Dim startRow As Integer
    Dim i As Integer
    Dim tempChoice As String
    Dim Continue As Boolean
    Dim thisCol As Integer
    Dim j As Variant
    Dim Selection() As String
    
    Me.Left = Application.Left + 2000
    Selection() = Split(Trim(Replace(docSCOTWT.Bookmarks(CurSelectionForm).Range.Text, Chr$(7), "")), vbCr)
    
    'Load the options
    lstChoices.ColumnCount = 2
    For i = 0 To UBound(arrChoicesAssoc)
        lstChoices.AddItem
        lstChoices.List(i, 0) = arrChoicesAssoc(i).name
        lstChoices.List(i, 1) = arrChoicesAssoc(i).id
        For Each j In Selection
            'If UCase(Trim(arrChoicesAssoc(i).name)) = UCase(Trim(Replace(j, Chr$(149) + " ", ""))) Then
            If UCase(Trim(arrChoicesAssoc(i).name)) = UCase(Trim(Replace(j, "--> ", ""))) Then
                lstChoices.Selected(i) = True
            End If
        Next
    Next i
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the choice form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Unload Me
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the choice form.  Error - " & Err.Number & ": " & Err.Description
    
End Sub

Private Sub btnFinish_Click()
On Error GoTo errHandler

    Dim i As Integer
    Dim j As Integer
    Dim tempChoice As String
    Dim OutputString As String
    Dim numSelected As Integer
    Dim tbl As Word.Table
    Dim intRow As Integer
    Dim thisRow As String
    Dim tempString As String
    Dim thisBullet As String
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    
    numSelected = -1
    OutputString = ""
    For i = 0 To lstChoices.ListCount - 1
        If lstChoices.Selected(i) = True Then
            numSelected = numSelected + 1
            ReDim Preserve ChosenRisk(numSelected) As String
            ChosenRisk(numSelected) = lstChoices.List(i, 1)
            tempChoice = lstChoices.List(i, 0)
            If OutputString <> "" Then
                OutputString = OutputString & vbCrLf
            End If
            OutputString = OutputString & thisBullet + tempChoice
        End If
    Next i
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks(CurSelectionForm).Range.Text = OutputString
    Call ResetTrackChangesValues
        
    Unload Me
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while saving.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Attribute VB_Name = "frmChoices"
Attribute VB_Base = "0{EA634A93-1292-4D77-9390-356A6C57C50E}{F3412C83-72A2-42F3-8C00-1B77B1828ACE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgFinish_Click()

    Call btnFinish_Click

End Sub

Private Sub UserForm_Activate()
    
    DoEvents
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler

    Dim startRow As Integer
    Dim i As Integer
    Dim tempChoice As String
    Dim Continue As Boolean
    Dim thisCol As Integer
    Dim j As Variant
    Dim Selection() As String
    
    Me.Left = Application.Left + 2000
    
    Selection() = Split(Trim(Replace(docSCOTWT.Bookmarks(CurSelectionForm).Range.Text, Chr$(7), "")), vbCr)
    
    'Load the options
    lstChoices.ColumnCount = 2
    For i = 0 To UBound(arrChoices)
        lstChoices.AddItem
        lstChoices.List(i, 0) = arrChoices(i)
        lstChoices.List(i, 1) = ""
        For Each j In Selection
            If UCase(Trim(arrChoices(i))) = UCase(Trim(j)) Then
                lstChoices.Selected(i) = True
            End If
        Next
    Next i
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the choice form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Unload Me
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the choice form.  Error - " & Err.Number & ": " & Err.Description
    
End Sub

Private Sub btnFinish_Click()
On Error GoTo errHandler

    Dim i As Integer
    Dim OutputString As String
    Dim tempChoice As String
    
    OutputString = ""
    For i = 0 To lstChoices.ListCount - 1
        If lstChoices.Selected(i) = True Then
            tempChoice = lstChoices.List(i, 0)
            If OutputString <> "" Then
                OutputString = OutputString & vbCrLf
            End If
            OutputString = OutputString & tempChoice
        End If
    Next i
    Call TurnOffTrackChanges
    docSCOTWT.Bookmarks(CurSelectionForm).Range.Text = OutputString
    Call ResetTrackChangesValues

    Unload Me
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while saving.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub
Attribute VB_Name = "frmChooseEngagement"
Attribute VB_Base = "0{A729BBB7-9B0A-4A92-8292-0F7E5D84D768}{AFC2A656-A5BB-4FEE-A18C-3F7D29328469}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' This form allow the user to choose which Enagagement they would like to load data for.

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgFinish_Click()

    Call btnFinish_Click

End Sub

Private Sub UserForm_Activate()
    
    If numEngagements < 0 Then
        'let the user know they don't have any engagements to see
        MsgBox Translate("NoEngagements", ChosenLanguage), vbOKOnly
        Unload Me
        Exit Sub
    End If
    DoEvents
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler

    Dim i As Integer
    
    Me.Left = Application.Left + 2000
    
    If numEngagements >= 0 Then
        'Load the engagements to the list box
        lstChoices.ColumnCount = 2
        For i = 0 To numEngagements
            lstChoices.AddItem
            If Trim(Engagements(i).ClientName) = "" Then
                lstChoices.List(i, 0) = Trim(Engagements(i).EngagementName) & " (" & Trim(Engagements(i).WorkSpaceName) & ")"
            Else
                lstChoices.List(i, 0) = Trim(Engagements(i).EngagementName) & " (" & Trim(Engagements(i).ClientName) & ")"
            End If
            lstChoices.List(i, 1) = Engagements(i).EngagementID
        Next i
    End If
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the select engagement form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Profile.EngagementID = ""
    Unload Me
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the select engagement form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnFinish_Click()
On Error GoTo errHandler

    Dim i As Integer
    
    For i = 0 To lstChoices.ListCount - 1
        If lstChoices.Selected(i) = True Then
            Profile.EngagementID = lstChoices.List(i, 1)
            Exit For
        End If
    Next i
    'find the engagement and start the chosen profile
    For i = 0 To numEngagements
        If Trim(Engagements(i).EngagementID) = Trim(Profile.EngagementID) Then
            Profile.ClientID = Engagements(i).ClientID
            Profile.ClientName = Engagements(i).ClientName
            Profile.WorkSpaceId = Engagements(i).WorkSpaceId
            Profile.WorkSpaceName = Engagements(i).WorkSpaceName
            Profile.EngagementName = Engagements(i).EngagementName
            Profile.Version = Engagements(i).Version
            Profile.SCOTID = ""
            Profile.NumWCGWs = 1
            Profile.NumWTs = 1
            Profile.NumCritPaths = 1
            Profile.ChosenSCOTType = 0
            Profile.ChosenSCOTType2 = 0
            Profile.PrelimAudit = 0
            
            'write out to excel
            Call CheckForOpenEmbedded
            
            shFormData.Range("EngagementID").value = Profile.EngagementID
            shFormData.Range("ClientID").value = Profile.ClientID
            shFormData.Range("GAAS").value = Profile.ApplGAAS
            shFormData.Range("PCAOB").value = IIf(Profile.PCAOB, "Y", "N")
            shFormData.Range("PCAOBIA").value = IIf(Profile.PCAOBIA, "Y", "N")
            shFormData.Range("EngageAPIVersion").value = Profile.Version
            shFormData.Range("WorkspaceID").value = Profile.WorkSpaceId
            shFormData.Range("SCOTID").value = Profile.SCOTID
            shFormData.Range("NumberOfWCGWs").value = Profile.NumWCGWs
            shFormData.Range("NumberOfWTs").value = Profile.NumWTs
            shFormData.Range("NumberCritPaths").value = Profile.NumCritPaths
            shFormData.Range("SCOTType").value = Profile.ChosenSCOTType
            shFormData.Range("SCOTType2").value = Profile.ChosenSCOTType2
            shFormData.Range("PrelimAudit").value = Profile.PrelimAudit
            Call SaveEmbedded
            
            Exit For
        End If
    Next i
    
    Unload Me
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while saving.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Attribute VB_Name = "frmChooseSCOT"
Attribute VB_Base = "0{B6912A49-771E-46A4-B5B8-8B42893BCB96}{EBDCB2AF-3CB6-4698-B891-808CD75248DA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
' This form allow the user to choose which SCOT they would like to load data for.

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgFinish_Click()

    Call btnFinish_Click

End Sub

Private Sub UserForm_Activate()
    
    DoEvents
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler

    Dim i As Integer
    Dim j As Integer
    Dim Temp As String
    Dim temp2 As String
    Dim arrChoicesSCOT() As String
    
    Me.Left = Application.Left + 2000
    
    If numSCOTs >= 0 Then
        ReDim arrChoicesSCOT(numSCOTs, 1) As String
         
        For i = 0 To numSCOTs
            'If no Client name available, then use the workspace name
            arrChoicesSCOT(i, 0) = Trim(SCOTs(i).name)
            arrChoicesSCOT(i, 1) = Trim(SCOTs(i).id)
        Next i
        
        For i = 0 To numSCOTs - 1
            For j = i + 1 To numSCOTs
                If arrChoicesSCOT(i, 0) > arrChoicesSCOT(j, 0) Then
                    Temp = arrChoicesSCOT(j, 0)
                    temp2 = arrChoicesSCOT(j, 1)
                    arrChoicesSCOT(j, 0) = arrChoicesSCOT(i, 0)
                    arrChoicesSCOT(j, 1) = arrChoicesSCOT(i, 1)
                    arrChoicesSCOT(i, 0) = Temp
                    arrChoicesSCOT(i, 1) = temp2
                End If
            Next j
        Next i
    
        'Load the engagements to the list box
        lstChoices.ColumnCount = 2
        For i = 0 To numSCOTs
            lstChoices.AddItem
            lstChoices.List(i, 0) = arrChoicesSCOT(i, 0)
            lstChoices.List(i, 1) = arrChoicesSCOT(i, 1)
        Next i
        
        'if pulling, then highlight the correct SCOT if we can.
        If gPullingDocument Then
            For i = 0 To lstChoices.ListCount - 1
                If LCase(Replace(lstChoices.List(i, 0), " ", "")) = LCase(Replace(gSelectedSCOT, " ", "")) Then
                    lstChoices.Selected(i) = True
                    Exit For
                End If
            Next i
        End If
        
    End If
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the select SCOT form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Unload Me
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the select SCOT form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnFinish_Click()
On Error GoTo errHandler

    Dim i As Integer
    Dim selectOne As String
    Dim objTXT As InlineShape
    Dim thisHidden As Boolean
    Dim holdstr As String
    Dim holdType1 As String
    Dim holdType2 As String
    
    For i = 0 To lstChoices.ListCount - 1
        If lstChoices.Selected(i) = True Then
            selectOne = lstChoices.List(i, 1)
            Exit For
        End If
    Next i
    'find the engagement and start the chosen profile
    Call TurnOffTrackChanges
    For i = 0 To numSCOTs
        If Trim(SCOTs(i).id) = Trim(selectOne) Then
            Call CheckForOpenEmbedded
            shFormData.Range("SCOTID").value = SCOTs(i).id
            shFormData.Range("SCOTType").value = SCOTs(i).TypeID
            shFormData.Range("SCOTType2").value = SCOTs(i).TypeID2
            shFormData.Range("PrelimAudit").value = SCOTs(i).StrategyID
            docSCOTWT.Bookmarks("RelatedITApps").Range.Text = SCOTs(i).Appls
            Call SaveEmbedded
            
            Profile.SCOTID = SCOTs(i).id
            Profile.ChosenSCOTType = SCOTs(i).TypeID
            Profile.ChosenSCOTType2 = SCOTs(i).TypeID2
            Profile.PrelimAudit = SCOTs(i).StrategyID
            
            'write out the other stuff
            If SCOTs(i).TypeID = 1 Then
                holdType1 = Translate("Routine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID = 2 Then
                holdType1 = Translate("NonRoutine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID = 3 Then
                holdType1 = Translate("Estimation", ChosenLanguage)
            End If
            If SCOTs(i).TypeID2 = 1 Then
                holdType2 = Translate("Routine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID2 = 2 Then
                holdType2 = Translate("NonRoutine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID2 = 3 Then
                holdType2 = Translate("Estimation", ChosenLanguage)
            End If
            Call UpdateBookmarkGrid("TypeOfSCOT", holdType1 + IIf(holdType2 <> "", ", " + holdType2, ""))
            Call UpdateBookmark("ImportedScotName", SCOTs(i).name)
            Call UpdateBookmark("ImportedScotName2", SCOTs(i).name)
            
            SelectedSCOT = SCOTs(i).name
            
            thisHidden = docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden
            If thisHidden = True Then
                docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden = False
            End If
            If SCOTs(i).StrategyID = 1 Then
                holdType1 = Translate("RibbonControls", ChosenLanguage)
            ElseIf SCOTs(i).StrategyID = 2 Then
                holdType1 = Translate("Substantive", ChosenLanguage)
            End If
            docSCOTWT.Bookmarks("AuditStrategyCell").Range.Text = holdType1
            Selection.Collapse wdCollapseStart
            If thisHidden = True Then
                docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden = True
            End If
            Exit For
        End If
    Next i
    Call ResetTrackChangesValues
    Unload Me
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while saving.  Error - " & Err.Number & ": " & Err.Description
    Resume Next 'Last
    
End Sub


Attribute VB_Name = "frmConfirmHelp"
Attribute VB_Base = "0{A4C23586-1506-4260-B67C-6F165DDC31FC}{1F0B5A75-3E8F-43A3-BC07-583A6B4D6BE5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdOk_Click()

    Unload Me
    
End Sub

Private Sub imgOk_Click()

    Unload Me

End Sub


Private Sub UserForm_Initialize()
    
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)
    txtHelp.SelStart = 1
    
End Sub


Attribute VB_Name = "frmDiagnostic"
Attribute VB_Base = "0{32A51E63-0B4C-4BE1-B7AC-E00A4CB8713C}{268DD9BD-A23C-4B8E-8861-1FB3145C932E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCancel2_Click()

    Call btnCancel_Click

End Sub

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgAcceptAll_Click()

    Call btnAcceptAll_Click

End Sub

Private Sub imgClose1_Click()

    Call btnCancel_Click

End Sub

Private Sub imgGotoField_Click()

    Call GotoField

End Sub

Private Sub imgGoToRisk_Click()

    Call GotoRisk

End Sub

Private Sub lblAcceptAll_Click()

    Call btnAcceptAll_Click
    
End Sub

Private Sub imgAcceptChanges_Click()

    Call btnAcceptChanges_Click

End Sub

Private Sub lblAcceptChanges_Click()

    Call btnAcceptChanges_Click
    
End Sub

Private Sub lblClose1_Click()

    Call btnCancel_Click

End Sub


Private Sub lblGotoField_Click()

    Call GotoField

End Sub

Private Sub lblGotoRisk_Click()

    Call GotoRisk

End Sub

Private Sub GotoField()
'goto the selected field on form

    Dim i As Integer
    
    For i = 0 To lstFields.ListCount - 1
        If lstFields.Selected(i) = True Then
            'goto form
            'check to make sure it exists
            If docSCOTWT.Bookmarks.Exists(lstFields.List(i, 1)) Then
                Selection.GoTo what:=wdGoToBookmark, name:=lstFields.List(i, 1)
                Selection.Collapse wdCollapseStart
            Else
                Selection.GoTo what:=wdGoToBookmark, name:="DocBegin"
                Selection.Collapse wdCollapseStart
            End If
            Unload Me
            Exit Sub
        End If
    Next i

End Sub

Private Sub GotoRisk()
'goto the risks section

    Dim i As Integer

    For i = 0 To lstRisks.ListCount - 1
        If lstRisks.Selected(i) = True Then
            'goto form
            Unload Me
            If docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True Then
                docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = False
                docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = True
                docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = False
            End If
            Selection.GoTo what:=wdGoToBookmark, name:="SigRisks"
            Selection.Collapse wdCollapseStart
            Exit Sub
        End If
    Next i

End Sub

Private Sub UserForm_Activate()
    
    DoEvents
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler

    Dim i As Integer
    Dim templog As String
    Dim thisRow As Row
    Dim intRow As Integer
    Dim tbl As Word.Table
    Dim j As Integer
    Dim curRow As Integer
    Dim found As Boolean
    
    'Me.Left = Application.Left
    
    Application.ScreenUpdating = False
    
    'load the EY Canvas data tab
    numToDelete = -1
    numToChange = -1
    Call CheckForOpenEmbedded
    Call LoadDataToArrays
    curRow = 2
    Do While shDiagnostics.Cells(curRow, 1).value <> ""
    
        If UCase(Trim(shDiagnostics.Cells(curRow, 1).value)) = "DELETE" Then
            numToDelete = numToDelete + 1
            ReDim Preserve ToDelete(numToDelete) As AddDelType
            ToDelete(numToDelete).DataType = shDiagnostics.Cells(curRow, 2).value
            ToDelete(numToDelete).id = shDiagnostics.Cells(curRow, 3).value
            ToDelete(numToDelete).name = shDiagnostics.Cells(curRow, 4).value
        
        Else 'must be a change
            numToChange = numToChange + 1
            ReDim Preserve ToChange(numToChange) As ChangeType
            ToChange(numToChange).DataType = shDiagnostics.Cells(curRow, 2).value
            ToChange(numToChange).id = shDiagnostics.Cells(curRow, 3).value
            ToChange(numToChange).FromName = shDiagnostics.Cells(curRow, 4).value
            ToChange(numToChange).ToName = shDiagnostics.Cells(curRow, 5).value
        
        End If
        curRow = curRow + 1
    Loop
    
    For i = 0 To numToDelete
        lstDeletions.AddItem
        lstDeletions.List(i, 0) = ToDelete(i).DataType
        lstDeletions.List(i, 1) = ToDelete(i).name
        lstDeletions.List(i, 2) = ToDelete(i).id
    Next i
    
    For i = 0 To numToChange
        lstChanges.AddItem
        lstChanges.List(i, 0) = ToChange(i).DataType
        lstChanges.List(i, 1) = ToChange(i).FromName
        lstChanges.List(i, 2) = ToChange(i).ToName
        lstChanges.List(i, 3) = ToChange(i).id
    Next i
    
    'load the Incomplete documentation tab
    
    'check risks
    For i = 0 To numRisks
        found = False
        For j = 0 To Risks(i).numControls
            If Risks(i).Controls(j).isAssoc Then
                found = True
                Exit For
            End If
        Next j
        If Not found Then
            'nothing is assoc, add to list
            lstRisks.AddItem
            lstRisks.List(lstRisks.ListCount - 1) = Risks(i).TypeID + " - " + Risks(i).name
        End If
    Next i
    
    'check wcgws
    For i = 0 To NumWCGWs
        If Not WCGWs(i).isPlaced Then
            'add to list
            lstWCGWs.AddItem
            lstWCGWs.List(lstWCGWs.ListCount - 1) = WCGWs(i).name
        End If
    Next i
    
    'check fields
    'check all fields to see what they haven't filled in
    'take a seat, this may take a while
    Call ShowAllMain(True)
    Call CheckForm
    
    'now use the array
     For i = 0 To numNotComplete
        'add to list
        lstFields.AddItem
        lstFields.List(lstFields.ListCount - 1, 0) = NotComplete(i).Display
        lstFields.List(lstFields.ListCount - 1, 1) = NotComplete(i).gotoBM
    Next i
    
    'show messages
    If lstChanges.ListCount = 0 And lstDeletions.ListCount = 0 Then
        lblOpenData.Visible = False
    Else
        lblNoOpenData.Visible = False
    End If
    
    If Profile.PrelimAudit = 2 And InStr(docSCOTWT.Bookmarks("BMCheckHighlyB").Range.Fields(1).Code.Text, ".") <> 0 Then
        lstWCGWs.Height = 62.95
        fraAlert.Visible = True
    Else
        lstWCGWs.Height = 122.9
        fraAlert.Visible = False
    End If
    
    If lstRisks.ListCount = 0 And lstWCGWs.ListCount = 0 And lstFields.ListCount = 0 And Not fraAlert.Visible Then
        lblOpenIncomplete.Visible = False
    Else
        lblNoOpenIncomplete.Visible = False
    End If
    
last:
    Application.ScreenUpdating = True
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the diagnostics form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Unload Me
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the diagnostics form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnAcceptChanges_Click()
On Error GoTo errHandler

    'delete or change the already selected risks on the form
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim thisUnique As String
    Dim c As Object 'Excel.Range
    Dim n As Object 'Excel.Range
    Dim hasSelected As Boolean
    Dim thisSheet As Object 'Excel.Worksheet
    Dim thisSheet2 As Object 'Excel.Worksheet
    Dim colCount As Integer
    Dim curRow As Integer
    Dim searchRange As String
    
    'check if anything selected
    hasSelected = False
    For i = 0 To lstChanges.ListCount - 1
        If lstChanges.Selected(i) = True Then
            hasSelected = True
            Exit For
        End If
    Next i
    If Not hasSelected Then
        MsgBox Translate("NoChanges", ChosenLanguage), vbOKOnly
        Exit Sub
    End If
    
    System.Cursor = wdCursorWait
    Application.ScreenUpdating = False
    Call TurnOffTrackChanges
    
    For i = 0 To lstChanges.ListCount - 1
        If lstChanges.Selected(i) = True Then
            'change this one
            Select Case lstChanges.List(i, 0)
                Case "Risk"
                    If InStr(lstChanges.List(i, 3), "|") Then
                        Set thisSheet = shRisks
                        Set thisSheet2 = shRisksComp
                        searchRange = "F:F"
                    Else
                        'if we get here we can assume that the Risk and control are on form and assoc
                        Set thisSheet = shRisks
                        Set thisSheet2 = shRisksComp
                        searchRange = "A:A"
                    End If
                Case "Risk Control"
                    'if we get here we can assume that the Risk and control are on form and assoc
                    Set thisSheet = shRisks
                    Set thisSheet2 = shRisksComp
                    searchRange = "F:F"
                Case "WCGW"
                    If InStr(lstChanges.List(i, 3), "|") Then
                        'need to check dif col
                        Set thisSheet = shSCOTWCGWs
                        Set thisSheet2 = shSCOTWCGWsComp
                        searchRange = "J:J"
                    Else
                        'if we get here we can assume that the WCGW/Control are on the form
                        Set thisSheet = shSCOTWCGWs
                        Set thisSheet2 = shSCOTWCGWsComp
                        searchRange = "A:A"
                    End If
                Case "WCGW Control"
                    'if we get here we can assume that the WCGW/Control are on the form
                    Set thisSheet = shSCOTWCGWs
                    Set thisSheet2 = shSCOTWCGWsComp
                    searchRange = "J:J"
            End Select
        
            'get id and change this row in Excel data
            thisUnique = lstChanges.List(i, 3)
            Set c = thisSheet.Range(searchRange).find(thisUnique, , xlValues, xlWhole)
            Set n = thisSheet2.Range(searchRange).find(thisUnique, , xlValues, xlWhole)
            If Not c Is Nothing And Not n Is Nothing Then
                'now fix the form if needed
                Select Case lstChanges.List(i, 0)
                    Case "Risk", "Risk Control"
                        Call ChangeSigRiskOnForm(thisUnique, c.Row, n.Row, lstChanges.List(i, 0))
                    Case "WCGW", "WCGW Control"
                        Call ChangeWCGWOnForm(thisUnique, c.Row, n.Row)
                End Select
            End If
            Set c = Nothing
            Set n = Nothing
         
         End If
    Next i
    
    'clear the changes listbox of accepted items
    Call CheckForOpenEmbedded
restart:
    For i = 0 To lstChanges.ListCount - 1
        If lstChanges.Selected(i) = True Then
            curRow = 2
            Do While shDiagnostics.Cells(curRow, 1).value <> ""
                If UCase(Trim(shDiagnostics.Cells(curRow, 1).value)) = "CHANGE" And Trim(shDiagnostics.Cells(curRow, 3).value) = lstChanges.List(i, 3) Then
                    'found it, so remove it
                    shDiagnostics.Cells(curRow, 1).EntireRow.Delete
                    Exit Do
                Else
                    curRow = curRow + 1
                End If
            Loop
            lstChanges.RemoveItem (i)
            GoTo restart
        End If
    Next i
    
    
    'if diagnostics, then show message
    If lstChanges.ListCount = 0 And lstDeletions.ListCount = 0 Then
        docSCOTWT.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = True
    End If
    
    Call LoadDataToArrays
    Call ResetTrackChangesValues
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True

last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while accepting selected changes.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnAcceptAll_Click()
On Error GoTo errHandler
'Accept all deletions

    'delete or change the already selected risks on the form
    Dim i As Integer
    Dim j As Integer
    Dim thisUnique As String
    Dim c As Object 'Excel.Range
    Dim thisSheet As Object 'Excel.Worksheet
    Dim curRow As Integer
    
    'check if anything selected
    If lstDeletions.ListCount = 0 Then
        MsgBox Translate("NoDeletions", ChosenLanguage), vbOKOnly
        Exit Sub
    End If
    
    System.Cursor = wdCursorWait
    Application.ScreenUpdating = False
    Call TurnOffTrackChanges
    Call CheckForOpenEmbedded
    
    For i = 0 To numToDelete
        Select Case ToDelete(i).DataType
            Case "Risk", "Risk Control"
                'if we get here we can assume that the Risk and control are on form and assoc
                Set thisSheet = shRisks
            Case "WCGW", "WCGW Control"
                Set thisSheet = shSCOTWCGWs
        End Select
    
        'now fix the form if needed
        Select Case ToDelete(i).DataType
            Case "Risk"
                Call DelSigRiskFromForm(ToDelete(i).id, False)
            Case "Risk Control"
                Call DelSigRiskFromForm(ToDelete(i).id, True)
            Case "WCGW"
                Call DelWCGWFromForm(ToDelete(i).id, False)
            Case "WCGW Control"
                Call DelWCGWFromForm(ToDelete(i).id, True)
        End Select
        
        'get id and delete this row from Excel data
        Select Case ToDelete(i).DataType
            Case "Risk", "WCGW"
                thisUnique = ToDelete(i).id
                Set c = thisSheet.Range("A1:A100000").find(thisUnique, , xlValues, xlWhole)
                Do While Not c Is Nothing
                    Call DeleteFromMaster(thisSheet, c.Row)
                    Set c = thisSheet.Range("A1:A100000").find(thisUnique, , xlValues, xlWhole)
                Loop
                Set c = Nothing
            Case Else
                thisUnique = ToDelete(i).id
                Set c = thisSheet.Range("A1:Z100000").find(thisUnique, , xlValues, xlWhole)
                If Not c Is Nothing Then
                    Call DeleteFromMaster(thisSheet, c.Row)
                End If
                Set c = Nothing
        End Select
    
    Next i
    
    'clear the deletions listbox
    lstDeletions.clear
    Call CheckForOpenEmbedded
    curRow = 2
    Do While shDiagnostics.Cells(curRow, 1).value <> ""
    
        If UCase(Trim(shDiagnostics.Cells(curRow, 1).value)) = "DELETE" Then
            'remove it
            shDiagnostics.Cells(curRow, 1).EntireRow.Delete
        Else
            curRow = curRow + 1
        End If
    Loop
    
    'if diagnostics, then show message
    If lstChanges.ListCount = 0 And lstDeletions.ListCount = 0 Then
        docSCOTWT.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = True
    End If
    
    Call LoadDataToArrays
    Call RefreshOtherSectionsSection
    Call ResetTrackChangesValues
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while accepting all deletions.  Error - " & Err.Number & ": " & Err.Description
    Resume Next 'Last
    
End Sub


Attribute VB_Name = "frmDisplayUserMessages"
Attribute VB_Base = "0{90ED12C6-8454-476A-9A0A-6FC5D184BFB6}{A66FFE24-E225-47CE-AB27-9F7A83C1EEF9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOk_Click()
    Unload Me
End Sub

Private Sub imgOk_Click()
    Unload Me
End Sub

Private Sub imgOpen_Click()
    
    Call lblOpen_Click
    
End Sub

Private Sub lblOpen_Click()

    Dim result
    
    result = Shell("Notepad.exe " & pUserMessageLogFile, vbNormalFocus)

End Sub

Attribute VB_Name = "frmEmbeddedIssue"
Attribute VB_Base = "0{64643887-8542-4EB0-A3BD-A413F037E32D}{2333F7AF-92CC-41B9-88E3-CE2F2B143409}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub lblOk_Click()

    Unload Me
    
End Sub

Private Sub imgOk_Click()

    Call lblOk_Click

End Sub

Private Sub UserForm_Initialize()

    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Attribute VB_Name = "frmSelectWCGW"
Attribute VB_Base = "0{ABF15264-5570-48B3-AE24-8CC0B6140A0D}{94626E26-254D-46EF-95E3-7E088E664C49}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgFinish_Click()

    Call btnFinish_Click

End Sub

Private Sub lstChoices_Click()

    'if this is already used then change button to move
    If (lstChoices.Selected(lstChoices.ListIndex)) Then
        If lstChoices.Column(0) = "X" Then
            btnFinish.Caption = Translate("MoveButton", ChosenLanguage)
        Else
            btnFinish.Caption = Translate("InsertButton", ChosenLanguage)
        End If
    Else
        btnFinish.Caption = Translate("InsertButton", ChosenLanguage)
    End If

End Sub

Private Sub UserForm_Activate()
    
    DoEvents
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler

    Dim i As Integer
    Dim j As Integer
    
    Me.Left = Application.Left + 2000
    
    For i = 0 To NumWCGWs
        lstChoices.AddItem
        lstChoices.List(i, 1) = WCGWs(i).name
        If WCGWs(i).isPlaced Then
            lstChoices.List(i, 0) = "X"
        Else
            lstChoices.List(i, 0) = ""
        End If
        lstChoices.List(i, 2) = WCGWs(i).id
    Next i
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the Select WCGWs form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Unload Me
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the Select WCGWs form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnFinish_Click()
On Error GoTo errHandler

    Dim i As Integer
    
    For i = 0 To lstChoices.ListCount - 1
        If lstChoices.Selected(i) = True Then
            If lstChoices.List(i, 0) = "X" Then
                'move it
                ChosenWCGW = lstChoices.List(i, 2)
                movingWCGW = True
            Else
                'add it
                movingWCGW = False
                ChosenWCGW = lstChoices.List(i, 2)
            End If
            Exit For
        End If
    Next i
    Unload Me
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the Select WCGWs form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub


Attribute VB_Name = "frmStatusWindow"
Attribute VB_Base = "0{A6A49741-95B6-4109-86DB-49739C3B85CB}{78F96656-FED4-42C9-A7CB-B15D8C2A57DF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Deactivate()

    Me.Show (False)

End Sub

Private Sub UserForm_Initialize()
          
    Me.Width = Application.Width - 60
    Me.Height = Application.Height - 60
    Me.lblMessage.Width = Me.Width - 60
    Me.lblMessage.Height = Me.Height - 60
    'Me.lblMessage.Top = (Me.Height / 2) - (Me.lblMessage.Height / 2)
    Me.lblMessage.Left = 10
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If

End Sub
Attribute VB_Name = "frmTranslate"
Attribute VB_Base = "0{75F6B5C3-8B7C-452C-852A-71FE93A886AF}{BE8F9D20-C2F2-4EBB-879F-2EB1EE6117FF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub imgCancel_Click()

    Call btnCancel_Click

End Sub

Private Sub imgFinish_Click()

    Call btnFinish_Click

End Sub

Private Sub UserForm_Initialize()
On Error GoTo errHandler
    
    Me.Top = Application.Top + (Application.Height / 2) - (Me.Height / 2)
    Me.Left = Application.Left + (Application.Width / 2) - (Me.Width / 2)

    lstLanguage.AddItem "English"
    lstLanguage.AddItem "Spanish"
    lstLanguage.AddItem "German"
    lstLanguage.AddItem "Japanese"
    lstLanguage.AddItem "Portuguese"
    lstLanguage.AddItem "Chinese Traditional"
    lstLanguage.AddItem "Chinese Simplified"
    lstLanguage.AddItem "French Canadian"
    lstLanguage.AddItem "Hebrew"
    lstLanguage.AddItem "Korean"
    lstLanguage.AddItem "Russian"
    
    If ChosenLanguage = "" Then ChosenLanguage = GetChosenLanguage
    lstLanguage.Text = ChosenLanguage
    priorLanguage = ChosenLanguage
    
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while opening the select engagement form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnCancel_Click()
On Error GoTo errHandler

    Unload Me
last:
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while closing the select language form.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Private Sub btnFinish_Click()
On Error GoTo errHandler

    ChosenLanguage = lstLanguage.SelText
    Call CheckForOpenEmbedded
    shFormData.Range("ChosenLanguage").value = ChosenLanguage
    Profile.ChosenLanguage = ChosenLanguage
    Call SaveEmbedded
    
    Unload Me
    
last:
    If docSCOTWT.Bookmarks.Exists("ChosenLanguage") Then Call UpdateBookmark("ChosenLanguage", ChosenLanguage)
    Exit Sub
   
errHandler:
    'Message
    MsgBox "An error occurred while saving language.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub


Attribute VB_Name = "modAssocChoices"
Option Explicit
Option Private Module

Public Type ChoiceArray
    name As String
    id As String
End Type

Public arrChoicesAssoc() As ChoiceArray
Public ChosenRisk() As String
Public ChosenRiskID As String

Public Sub AssocControlsChoice(CurSelection As String)
On Error GoTo errHandler

    Dim HoldName As String
    Dim indexRisk As Integer
    Dim thisControl As Integer
    Dim i As Integer
    Dim tempString As String
    Dim j As Integer
    Dim found As Boolean
    
    Application.ScreenUpdating = False
    'check for WCGWs
    If numRisks < 1 Then
        Call LoadRisksToArrays
    End If
   
    Call CheckForOpenEmbedded
   
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    Options.Pagination = False
    Call TurnOffTrackChanges
    
    HoldName = Replace(CurSelection, "SignficantRiskAssocCtrls", "")
    indexRisk = -1
    'find risk index
    For i = 0 To numRisks
        If Risks(i).TypeID + " - " + Risks(i).name = CleanBM(docSCOTWT.Bookmarks("SignficantRiskName" + HoldName).Range.Text) Then
            ChosenRiskID = Risks(i).id
            indexRisk = i
            Exit For
        End If
    Next i
    Dim arrCount As Integer
    arrCount = -1
    ReDim arrChoicesAssoc(0) As ChoiceArray
     
    'load and sort data in arrChoices
    If indexRisk >= 0 Then
        For i = 0 To Risks(indexRisk).numControls
            If Trim(Risks(indexRisk).Controls(i).name) <> "" Then
                arrCount = arrCount + 1
                ReDim Preserve arrChoicesAssoc(arrCount) As ChoiceArray
                arrChoicesAssoc(arrCount).name = Risks(indexRisk).Controls(i).name
                arrChoicesAssoc(arrCount).id = Risks(indexRisk).Controls(i).id
            End If
        Next i
    End If

    Call SortChoicesAssoc
    
    CurSelectionForm = CurSelection
    Application.ScreenRefresh

    ReDim ChosenRisk(0) As String
    Load frmAssocControl
    frmAssocControl.btnCancel.Caption = Translate("CancelButton", ChosenLanguage)
    frmAssocControl.btnFinish.Caption = Translate("AssociateButton", ChosenLanguage)
    frmAssocControl.lblTitle.Caption = Translate("SelectTitle", ChosenLanguage)
    frmAssocControl.Show
      
    Call CheckForOpenEmbedded
    
    'mark the data associated
    'clear out the assoc column for this Risk
    i = 2
    Do While shRisks.Cells(i, 1).value <> ""
        If shRisks.Cells(i, 1).value = ChosenRiskID Then
            shRisks.Cells(i, 7).value = ""
            For j = LBound(ChosenRisk) To UBound(ChosenRisk)
                If shRisks.Cells(i, 4).value = ChosenRisk(j) Then
                    shRisks.Cells(i, 7).value = "X"
                    Exit For
                End If
            Next j
        End If
        i = i + 1
    Loop
    Call SaveEmbedded
    Call LoadDataToArrays
    
    Dim thisSigRisks As String
    Dim thisBullet As String
    Dim indexWCGW As Integer
    Dim tempStr As String
    Dim thisControlIndex As Integer
    Dim thisBM As Bookmark
    
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    'we need to update any of the control sections that may have these assoc viewable.
    For Each thisBM In docSCOTWT.Bookmarks
        If InStr(thisBM.name, "BMSigRisksAddressed") <> 0 Then
            'loop through risks and see if this control has been associated
            tempStr = Replace(thisBM.name, "BMSigRisksAddressed", "")
            indexWCGW = GetWCGWIndex(Right(tempStr, Len(tempStr) - (InStr(tempStr, "WCGW") + 3)))
            thisControlIndex = GetControlIndex(indexWCGW, Left(tempStr, InStr(tempStr, "WCGW") - 1))
            thisSigRisks = ""
            For i = 0 To numRisks
                For j = 0 To Risks(i).numControls
                    If Risks(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id And Risks(i).Controls(j).isAssoc Then
                        If thisSigRisks <> "" Then
                            thisSigRisks = thisSigRisks + vbCrLf
                        End If
                        thisSigRisks = thisSigRisks + thisBullet + Risks(i).TypeID + " - " + Risks(i).name
                        Exit For
                    End If
                Next j
            Next i
            Call UpdateBookmarkGrid(thisBM.name, thisSigRisks)
        End If
    Next
    Call ResetTrackChangesValues
    
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Sub SortChoicesAssoc()
     
    Dim First As Integer
    Dim last As Integer
    Dim i As Integer
    Dim j As Integer
    Dim Temp As String
    Dim temp2 As String
    Dim List As String
     
    First = LBound(arrChoicesAssoc)
    last = UBound(arrChoicesAssoc)
    For i = First To last - 1
        For j = i + 1 To last
            If arrChoicesAssoc(i).name > arrChoicesAssoc(j).name Then
                Temp = arrChoicesAssoc(j).name
                temp2 = arrChoicesAssoc(j).id
                arrChoicesAssoc(j).name = arrChoicesAssoc(i).name
                arrChoicesAssoc(j).id = arrChoicesAssoc(i).id
                arrChoicesAssoc(i).name = Temp
                arrChoicesAssoc(i).id = temp2
            End If
        Next j
    Next i
     
End Sub

Attribute VB_Name = "modCanvasCompare"
Option Explicit
Option Private Module
'  worksheets & ranges
Dim ksWSOriginal As Object 'Worksheet
Dim ksWSUpdated As Object 'Worksheet
Dim ksOriginalKey As String
Dim ksUpdatedKey As String
Dim iColumnCount As Integer
Public AlreadyUpdating As Boolean

Public Type ChangeType
    DataType As String
    name As String
    FromName As String
    ToName As String
    id As String
    inUseBy As String
End Type
Public Type AddDelType
    DataType As String
    name As String
    id As String
    inUseBy As String
End Type
Public Type CompRisksType
    name As String
    id As String
    inUse As String
End Type
    
Public ToDelete() As AddDelType
Public ToChange() As ChangeType
Public ToAdd() As AddDelType
Public numToDelete As Integer
Public numToAdd As Integer
Public numToChange As Integer

Public Sub CompareSheets()
On Error GoTo errHandler
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    
    Call CheckForOpenEmbedded

    numToDelete = -1
    numToChange = -1
    numToAdd = -1
    docSCOTWT.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = True
    
    AlreadyUpdating = True

    'Risk
    '   original
    Set ksWSOriginal = shRisks
    ksOriginalKey = "F:F"
    iColumnCount = 6
    '   updated
    Set ksWSUpdated = shRisksComp
    ksUpdatedKey = "F:F"
    
    Call DoCompare("Risk")

    
    'WCGW
    '   original
    Set ksWSOriginal = shSCOTWCGWs
    ksOriginalKey = "J:J"
    iColumnCount = 10
    '   updated
    Set ksWSUpdated = shSCOTWCGWsComp
    ksUpdatedKey = "J:J"
    
    Call DoCompare("WCGW")
    AlreadyUpdating = False
    
    Call PushDiagsToSheet
    
last:
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True

    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next 'Last

End Sub

Public Sub DoCompare(strCompType As String)
On Error GoTo errHandler

    ' declarations
    Dim rngOK As Object 'Excel.Range,
    Dim rngUK As Object 'Excel.Range,
    Dim c As Object 'Excel.Range
    Dim colOrigKey As Integer
    Dim colUpKey As Integer
    Dim curRow As Integer
    Dim thisUniqueKey As String
    Dim HoldData As String
    Dim HoldUpdAcctAssert As String
    Dim i As Integer
    Dim j As Integer
    Dim found As Boolean
    Dim isOnForm As Boolean
    Dim thisWCGWIndex As Integer
    Dim thisInfo As String
    Dim thisInfo2 As String
    Dim strCompType2 As String
    Dim tempRow As Integer
    
    Dim lRow As Integer, bEqual As Boolean
    '  labels
    Const ksChange = "CHANGE"
    Const ksRemove = "REMOVE"
    Const ksAdd = "ADD"
    
    ' start
    colOrigKey = ksWSOriginal.Range(ksOriginalKey).Column
    Set rngOK = ksWSOriginal.Range(ksOriginalKey)
    colUpKey = ksWSUpdated.Range(ksUpdatedKey).Column
    Set rngUK = ksWSUpdated.Range(ksUpdatedKey)
    
    ' process
    curRow = ksWSOriginal.Cells(ksWSOriginal.Rows.count, "A").End(xlUp).Row
    '  1st pass: updates & deletions
    Do While curRow > 1
        thisUniqueKey = ksWSOriginal.Cells(curRow, colOrigKey).value
        Set c = rngUK.find(thisUniqueKey, , xlValues, xlWhole)
        If c Is Nothing Then
            ' deletion, in orig not in updated
            Select Case strCompType
                Case "Risk"
                    'All risks on in use
                    'does this risk have other controls or is it completely gone
                    j = ksWSUpdated.Cells(ksWSUpdated.Rows.count, "A").End(xlUp).Row
                    found = False
                    Do While j > 1
                        If ksWSUpdated.Cells(j, 1).value = ksWSOriginal.Cells(curRow, 1).value Then
                            found = True
                            Exit Do
                        End If
                        j = j - 1
                    Loop
                    If found Then
                        'we still have some controls on this Risk, just delete the control
                        strCompType2 = "Risk Control"
                        thisInfo = ksWSOriginal.Cells(curRow, 3).value + " - " + ksWSOriginal.Cells(curRow, 2).value + " - " + ksWSOriginal.Cells(curRow, 5).value
                    Else
                        'need to delete the whole Risk
                        strCompType2 = "Risk"
                        thisInfo = ksWSOriginal.Cells(curRow, 2).value
                        thisUniqueKey = ksWSOriginal.Cells(curRow, 1).value
                    End If
                    
                    Call AddDiagnostic(1, strCompType2, "", thisInfo, thisUniqueKey)
                Case "WCGW"
                    If ksWSOriginal.Cells(curRow, 11).value <> "" Then 'on form, show
                        'need to see if entire WCGW was deleted or just the control
                        j = ksWSUpdated.Cells(ksWSUpdated.Rows.count, "A").End(xlUp).Row
                        found = False
                        Do While j > 1
                            If ksWSUpdated.Cells(j, 1).value = ksWSOriginal.Cells(curRow, 1).value Then
                                found = True
                                tempRow = j
                                Exit Do
                            End If
                            j = j - 1
                        Loop
                        If found Then
                            'for the special case when a WCGW without controls is already added to the doc and then a control is added.
                            If InStr(thisUniqueKey, "|") = 0 Then
                                'update the main key now so that it is not caught again
                                ksWSOriginal.Cells(curRow, colOrigKey).value = ksWSUpdated.Cells(tempRow, 10).value
                                'We auto accept all additions, so put them into the master data
                                Call ChangeMaster(shSCOTWCGWs, shSCOTWCGWsComp, curRow, tempRow, iColumnCount)
                                'reload our arrays
                                Call LoadDataToArrays
                                thisWCGWIndex = GetWCGWIndex(thisUniqueKey)
                                'if the WCGW is on the form, then we need to add the control to the form, otherwise no change to form
                                Call AddControlToForm(thisWCGWIndex)
                                
                                Call RefreshOtherSectionsSection
                            Else
                                'we still have some controls on this WCGW, just delete the control
                                strCompType2 = "WCGW Control"
                                thisInfo = ksWSOriginal.Cells(curRow, 2).value + " - " + ksWSOriginal.Cells(curRow, 5).value
                                Call AddDiagnostic(1, strCompType2, "", thisInfo, thisUniqueKey)
                            End If
                        Else
                            'need to delete the whole wCGW
                            strCompType2 = "WCGW"
                            thisInfo = ksWSOriginal.Cells(curRow, 2).value
                            thisUniqueKey = ksWSOriginal.Cells(curRow, 1).value
                            Call AddDiagnostic(1, strCompType2, "", thisInfo, thisUniqueKey)
                       End If
                    
                    Else 'auto accept
                        Call DeleteFromMaster(shSCOTWCGWs, curRow)
                        Call LoadDataToArrays
                        Call RefreshOtherSectionsSection
                    End If
            End Select
        Else
            bEqual = True
            For j = 1 To iColumnCount
                If ksWSOriginal.Cells(curRow, j).value <> ksWSUpdated.Cells(c.Row, j).value Then
                    bEqual = False
                    Exit For
                End If
            Next j
            If Not bEqual Then
                ' change
                'only write out the diag once per row
                lRow = c.Row
                Select Case strCompType
                    Case "Risk"
                        'all risks are in use
                        'if only a control name change and that control has not been associated yet, then just change it
                        If ksWSOriginal.Cells(curRow, 3).value + " - " + ksWSOriginal.Cells(curRow, 2).value = ksWSUpdated.Cells(lRow, 3).value + " - " + ksWSUpdated.Cells(lRow, 2).value And ksWSUpdated.Cells(lRow, 5).value <> ksWSOriginal.Cells(curRow, 5).value And ksWSOriginal.Cells(curRow, 7).value = "" Then
                            Call ChangeMaster(shRisks, shRisksComp, curRow, lRow, iColumnCount)
                            Call LoadRisksToArrays
                        Else
                            'control has been associated.
                            If ksWSUpdated.Cells(lRow, 5).value <> ksWSOriginal.Cells(curRow, 5).value Then
                                'then control name changed
                                strCompType2 = "Risk Control"
                                thisInfo = ksWSOriginal.Cells(curRow, 5).value
                                thisInfo2 = ksWSUpdated.Cells(curRow, 5).value
                                Call AddDiagnostic(2, strCompType2, thisInfo, thisInfo2, thisUniqueKey)
                            Else
                                'Risk name changed only
                                If ksWSOriginal.Cells(curRow, 1).value = ksWSUpdated.Cells(curRow, 1).value Then
                                    strCompType2 = "Risk"
                                    thisInfo = ksWSOriginal.Cells(curRow, 3).value + " - " + ksWSOriginal.Cells(curRow, 2).value
                                    thisInfo2 = ksWSUpdated.Cells(curRow, 3).value + " - " + ksWSUpdated.Cells(curRow, 2).value
                                    thisUniqueKey = ksWSOriginal.Cells(curRow, 1).value
                                    Call AddDiagnostic(2, strCompType2, thisInfo, thisInfo2, thisUniqueKey)
                                End If
                            End If
                        End If
                    Case "WCGW"
                        'is this WCGW on the form already
                        If ksWSOriginal.Cells(curRow, 11).value <> "" Then 'on form, add to diags
                            Call AddDiagnostic(2, strCompType, ksWSOriginal.Cells(curRow, 2).value + " - " + ksWSOriginal.Cells(curRow, 5).value + "/" + Translate("RelatedAppDiag", ChosenLanguage), ksWSUpdated.Cells(curRow, 2).value + " - " + ksWSUpdated.Cells(curRow, 5).value + "/" + Translate("RelatedAppDiag", ChosenLanguage), thisUniqueKey)
                        Else 'Main WCGW section is not on form, but references maybe
                            'auto update the changes and update any reference sections on form
                            Call ChangeMaster(shSCOTWCGWs, shSCOTWCGWsComp, curRow, lRow, iColumnCount)
                            'now update the references to this WCGW
                            Call LoadDataToArrays
                            Call RefreshOtherSectionsSection
                        End If
                End Select
            End If
        End If
        curRow = curRow - 1
    Loop
    
    '  2nd pass: additions
    curRow = 2
    Do While ksWSUpdated.Cells(curRow, 1).value <> ""
        thisUniqueKey = ksWSUpdated.Cells(curRow, colUpKey).value
        Set c = rngOK.find(thisUniqueKey, , xlValues, xlWhole)
        If c Is Nothing Then
            ' addition
            Select Case strCompType
                Case "Risk"
                    j = ksWSOriginal.Cells(ksWSOriginal.Rows.count, "A").End(xlUp).Row
                    found = False
                    Do While j > 1
                        If ksWSOriginal.Cells(j, 1).value = ksWSUpdated.Cells(curRow, 1).value Then
                            found = True
                            Exit Do
                        End If
                        j = j - 1
                    Loop
                    If found Then
                        'we already have some controls on this Risk, just add the control
                        strCompType2 = "Risk Control"
                        thisInfo = ksWSUpdated.Cells(curRow, 3).value + " - " + ksWSUpdated.Cells(curRow, 2).value + " - " + ksWSUpdated.Cells(curRow, 5).value
                    Else
                        'need to add the whole Risk
                        strCompType2 = "Risk"
                        thisInfo = ksWSUpdated.Cells(curRow, 2).value
                        thisUniqueKey = ksWSUpdated.Cells(curRow, 1).value
                    End If
                    'We auto accept all additions, so put them into the master data
                    Call AddDiagnostic(3, strCompType2, "", thisInfo, thisUniqueKey)
                    
                    Call AddToMaster(shRisks, shRisksComp, curRow, iColumnCount, -1)
                    Call LoadRisksToArrays
                    If Not found Then
                        'we need to add the sig risk on the page, otherwise no data change to form
                        Call AddSigRiskToForm(shRisksComp, curRow)
                    End If
                Case "WCGW"
                    'need to see if entire WCGW was added or just the control
                    isOnForm = False
                    Call LoadDataToArrays
                    thisWCGWIndex = GetWCGWIndex(ksWSUpdated.Cells(curRow, 1).value)
                    'need to see if this WCGW is just a WCGW (all controls have been deleted)
                    If InStr(thisUniqueKey, "|") = 0 Then
                        'just a WCGW, did it have controls and now doesn't
                        If thisWCGWIndex > -1 Then
                            'already existed, so we add the new row but do not add to form
                            'we still want to set the OnForm flag though
                            'We auto accept all additions, so put them into the master data
                            Call AddToMaster(shSCOTWCGWs, shSCOTWCGWsComp, curRow, iColumnCount, thisWCGWIndex)
                            'mark it
                            Set c = rngOK.find(thisUniqueKey, , xlValues, xlWhole)
                            ksWSOriginal.Cells(c.Row, 11).value = "X"
                            'reload our arrays
                            Call LoadDataToArrays
                        Else
                            'brand new, add it
                            strCompType2 = "WCGW"
                            thisInfo = ksWSUpdated.Cells(curRow, 2).value
                            thisUniqueKey = ksWSUpdated.Cells(curRow, 1).value
                            Call AddDiagnostic(3, strCompType2, "", thisInfo, thisUniqueKey)
                            'We auto accept all additions, so put them into the master data
                            Call AddToMaster(shSCOTWCGWs, shSCOTWCGWsComp, curRow, iColumnCount, thisWCGWIndex)
                            'reload our arrays
                            Call LoadDataToArrays
                        End If
                    Else
                        If thisWCGWIndex > -1 Then
                            'see if it is also on the form
                            If WCGWs(thisWCGWIndex).isPlaced Then
                                isOnForm = True
                            End If
                            found = True
                            'we have this WCGW, just add the control
                            strCompType2 = "WCGW Control"
                            thisInfo = ksWSUpdated.Cells(curRow, 2).value + " - " + ksWSUpdated.Cells(curRow, 5).value
                        Else
                            'need to add the whole WCGW
                            strCompType2 = "WCGW"
                            thisInfo = ksWSUpdated.Cells(curRow, 2).value
                            thisUniqueKey = ksWSUpdated.Cells(curRow, 1).value
                        End If
                        Call AddDiagnostic(3, strCompType2, "", thisInfo, thisUniqueKey)
                        
                        'We auto accept all additions, so put them into the master data
                        Call AddToMaster(shSCOTWCGWs, shSCOTWCGWsComp, curRow, iColumnCount, thisWCGWIndex)
                        'reload our arrays
                        Call LoadDataToArrays
                        thisWCGWIndex = GetWCGWIndex(ksWSUpdated.Cells(curRow, 1).value)
                        If isOnForm Then
                            'if the WCGW is on the form, then we need to add the control to the form, otherwise no change to form
                            Call AddControlToForm(thisWCGWIndex)
                        End If
                        
                    End If
                    Call RefreshOtherSectionsSection
            End Select
        End If
        curRow = curRow + 1
    Loop
    Set rngUK = Nothing
    Set rngOK = Nothing

last:
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next 'Last

End Sub

Public Sub RefreshOtherSectionsSection()
On Error GoTo errHandler

    'update the Other WCGW for this Control section of each control that has been
    Dim relatedWCGWs As String
    Dim thisBullet As String
    Dim indexWCGW As Integer
    Dim tempStr As String
    Dim thisControlIndex As Integer
    Dim thisBM As Bookmark
    Dim i As Integer
    Dim j As Integer
    
    Call TurnOffTrackChanges
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
    
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    For Each thisBM In docSCOTWT.Bookmarks
        If InStr(thisBM.name, "BMrelatedOnes") <> 0 Then
            'loop through wcgws
            tempStr = Replace(thisBM.name, "BMrelatedOnes", "")
            indexWCGW = GetWCGWIndex(Right(tempStr, Len(tempStr) - (InStr(tempStr, "WCGW") + 3)))
            thisControlIndex = GetControlIndex(indexWCGW, Left(tempStr, InStr(tempStr, "WCGW") - 1))
       
            relatedWCGWs = ""
            For i = 0 To NumWCGWs
                'don't count this WCGW controls
                If i <> indexWCGW Then
                    'see if this control is in there
                    For j = 0 To WCGWs(i).numControls
                        If WCGWs(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id Then
                            If relatedWCGWs <> "" Then
                                relatedWCGWs = relatedWCGWs + vbCrLf
                            End If
                            relatedWCGWs = relatedWCGWs + thisBullet + WCGWs(i).name
                            Exit For
                        End If
                    Next j
                End If
            Next i
            Call UpdateBookmarkGrid(thisBM.name, relatedWCGWs)
        End If
    Next
    Call ResetTrackChangesValues

    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next 'Last

End Sub

'Public Sub AddToMaster(thisMasterSheet As Worksheet, thisNewSheet As Worksheet, copyRow As Integer, colCount As Integer, thisWCGWIndex As Integer)
Public Sub AddToMaster(thisMasterSheet As Object, thisNewSheet As Object, copyRow As Integer, colCount As Integer, thisWCGWIndex As Integer)
'add a new record to the master data sheet
On Error GoTo errHandler

    Dim newRow As Integer
    Dim j As Integer
    
    'find the end of the master data
    newRow = thisMasterSheet.Cells(thisMasterSheet.Rows.count, "A").End(xlUp).Row + 1
    
    For j = 1 To colCount
        thisMasterSheet.Cells(newRow, j).value = thisNewSheet.Cells(copyRow, j).value
    Next j
    
    If thisWCGWIndex <> -1 Then
        If WCGWs(thisWCGWIndex).isPlaced Then
            'mark this new one as placed too
            thisMasterSheet.Cells(newRow, 11).value = "X"
        End If
    End If
    
last:
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last

End Sub

'Public Sub AddSigRiskToForm(thisNewSheet As Worksheet, copyRow As Integer)
Public Sub AddSigRiskToForm(thisNewSheet As Object, copyRow As Integer)
'add a sig risk to form
On Error GoTo errHandler

    Dim nextNumber As Integer
    Dim curRow As Integer
    Dim tbl As Word.Table
    Dim sigTbl As Word.Table
    Dim saveBM As String
    
    Call TurnOffTrackChanges
    If docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = True
        docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = False
    End If
    For Each tbl In ActiveDocument.Tables
        If tbl.Title = "SigRisksImported" Then
            Set sigTbl = tbl
            Exit For
        End If
    Next
    
    If sigTbl Is Nothing Then
        'need to add the table
        Call ShowSigRisks
        Exit Sub
    End If
    
    'get last number used
    nextNumber = CInt(Replace(CleanBM(sigTbl.Cell(sigTbl.Rows.count - 3, 1).Range.Text), ".", "")) + 1
    'add the new risk
    With sigTbl
        curRow = .Rows.count + 1
        saveBM = "SignficantRiskAssocCtrls" + Trim(str(nextNumber - 1))
        .Rows.add
        .Rows.add
        .Rows.add
        .Rows.add
        docSCOTWT.Bookmarks(saveBM).Delete
        .Cell(curRow - 1, 2).Range.Bookmarks.add saveBM
        
        .Rows(curRow).Cells.Split 1, 3, True
        .Cell(curRow, 1).Range.Font.ColorIndex = wdBlack
        .Cell(curRow, 1).Range.Font.Bold = True
        .Cell(curRow, 2).Range.Font.ColorIndex = wdBlack
        .Cell(curRow, 2).Range.Font.Bold = True
        .Cell(curRow, 3).Range.Font.Bold = False
        .Cell(curRow, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(curRow, 2).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(curRow, 1).Width = "30"
        .Cell(curRow, 2).Width = "130"
        .Cell(curRow, 3).Width = "355"
        .Rows(curRow).Range.Cells.Shading.BackgroundPatternColor = RGB(230, 230, 230)
        .Cell(curRow, 1).Range.Text = Trim(str(nextNumber)) + "."
        .Cell(curRow, 2).Range.Text = Translate("SignificantRisks", ChosenLanguage)
        .Cell(curRow, 2).Range.Bookmarks.add "SignficantRiskTitle" + Trim(str(nextNumber))
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AssociateRiskMain").Range.Copy
        .Cell(curRow, 3).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(curRow, 3).Range.Bookmarks.add "AssociateRisk" + Trim(str(nextNumber))
    
        curRow = curRow + 1
        .Rows(curRow).Cells.Split 1, 2, True
        .Cell(curRow, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(curRow, 2).Range.Font.Bold = False
        .Cell(curRow, 1).Width = "30"
        .Cell(curRow, 2).Width = "485"
        .Rows(curRow).Range.Cells.Shading.BackgroundPatternColor = RGB(218, 238, 243)  'canvas blue
        .Cell(curRow, 2).Range.Text = thisNewSheet.Cells(copyRow, 3).value + " - " + thisNewSheet.Cells(copyRow, 2).value
        .Cell(curRow, 2).Range.Bookmarks.add "SignficantRiskName" + Trim(str(nextNumber))
            
        curRow = curRow + 1
        .Rows(curRow).Cells.Split 1, 2, True
        .Cell(curRow, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(curRow, 2).Range.Font.ColorIndex = wdBlack
        .Cell(curRow, 2).Range.Font.Bold = True
        .Cell(curRow, 1).Width = "60"
        .Cell(curRow, 2).Width = "455"
        .Rows(curRow).Range.Cells.Shading.BackgroundPatternColor = RGB(230, 230, 230)
        .Cell(curRow, 2).Range.Text = Translate("RelatedWCGWs", ChosenLanguage)
        .Cell(curRow, 2).Range.Bookmarks.add "SignficantRiskCtrlsTitle" + Trim(str(nextNumber))
        
        curRow = curRow + 1
        .Rows(curRow).Cells.Split 1, 2, True
        .Cell(curRow, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(curRow, 2).Range.Font.Bold = False
        .Cell(curRow, 1).Width = "60"
        .Cell(curRow, 2).Width = "455"
        .Cell(curRow, 2).Range.Bookmarks.add "SignficantRiskAssocCtrls" + Trim(str(nextNumber))
        .Rows(curRow).Range.Cells.Shading.BackgroundPatternColor = vbWhite
            
    End With
       
last:
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last

End Sub

Public Sub AddControlToForm(indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisControID As String
    Dim indexControl As Integer
    
    Call TurnOffTrackChanges
    indexControl = WCGWs(indexWCGW).numControls
    
    'expand all
    Call ShowAllMain(True)
    
    'goto the end of the other control sections
    docSCOTWT.Bookmarks("BMEndWCGWSection" + WCGWs(indexWCGW).id).Range.Select
    Selection.Collapse wdCollapseStart
    Selection.MoveLeft wdCharacter, 1
    Selection.MoveUp wdLine, 1
    Selection.Range.Text = vbCrLf + vbCrLf
    Selection.MoveDown wdLine, 1
    WCGWTableCountStr = WCGWs(indexWCGW).id
    Set LastSel = Selection.Range
    Call CreateControl(indexControl, indexWCGW)
    docSCOTWT.Bookmarks("FullControl" + WCGWs(indexWCGW).Controls(indexControl).id + "WCGW" + WCGWs(indexWCGW).id).Range.Select
    Selection.Collapse wdCollapseEnd
    Selection.Delete
    If Selection.Tables.count = 0 Then Selection.Delete
    Call HideAllMain
    
last:
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last

End Sub

'Public Sub DeleteFromMaster(thisMasterSheet As Worksheet, delRow As Integer)
Public Sub DeleteFromMaster(thisMasterSheet As Object, delRow As Integer)
'delete a record from the master data sheet
On Error GoTo errHandler

    thisMasterSheet.Range("A" + Trim(str(delRow)) + ":Z" + Trim(str(delRow))).EntireRow.Delete xlShiftUp
    
last:
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last
    
End Sub

Public Sub DelSigRiskFromForm(thisRiskIDs As String, isControlOnly As Boolean)
On Error GoTo errHandler

    Dim tbl As Word.Table
    Dim sigTbl As Word.Table
    Dim OutputString As String
    Dim thisIDs() As String
    Dim thisBullet As String
    Dim thisRisk As String
    Dim i As Integer
    Dim j As Integer
    Dim curNum As Integer
    Dim holdRiskCount As Integer
    
    Call TurnOffTrackChanges
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    
    If docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = True
        docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = False
    End If
    For Each tbl In ActiveDocument.Tables
        If tbl.Title = "SigRisksImported" Then
            Set sigTbl = tbl
            Exit For
        End If
    Next
    
    Call LoadDataToArrays
    
    If isControlOnly Then
        'only update the listing if this control was assoc
        thisIDs() = Split(thisRiskIDs, "|")
        OutputString = ""
        For i = 0 To numRisks
            If Risks(i).id = thisIDs(0) Then
                thisRisk = Risks(i).TypeID + " - " + Risks(i).name
                For j = 0 To Risks(i).numControls
                    If Risks(i).Controls(j).isAssoc Then
                        If OutputString <> "" Then
                            OutputString = OutputString & vbCrLf
                        End If
                        OutputString = OutputString & thisBullet + Risks(i).Controls(j).name
                    End If
                Next j
                Exit For
            End If
        Next i
    
        For i = 1 To sigTbl.Rows.count
            If LCase(Trim(CleanBM(sigTbl.Cell(i + 1, 2).Range.Text))) = LCase(Trim(thisRisk)) Then
                'found it, fix it
                sigTbl.Cell(i + 3, 2).Range.Text = OutputString
                Exit For
            End If
        Next i
        
    Else
        'remove the deleted Risk
        For i = 0 To numRisks
            If Risks(i).id = thisRiskIDs Then
                thisRisk = Risks(i).TypeID + " - " + Risks(i).name
                Exit For
            End If
        Next i
        
        holdRiskCount = sigTbl.Rows.count
        For i = 1 To sigTbl.Rows.count
            If LCase(Trim(CleanBM(sigTbl.Cell(i + 1, 2).Range.Text))) = LCase(Trim(thisRisk)) Then
                'found it, remove it
                sigTbl.Rows(i).Delete
                sigTbl.Rows(i).Delete
                sigTbl.Rows(i).Delete
                sigTbl.Rows(i).Delete
                holdRiskCount = holdRiskCount - 4
                Exit For
            End If
        Next i
        
        If holdRiskCount = 0 Then
            'we deleted the table
            docSCOTWT.Bookmarks("SigRisks").Range.Select
            Selection.Collapse wdCollapseStart
            Selection.Text = vbCrLf
            Selection.MoveDown wdLine, 1
            Selection.Range.Text = "      " & Translate("NoRisksFound", ChosenLanguage)
        Else
            'renumber and fix the bookmarks
            curNum = 1
            For i = 1 To sigTbl.Rows.count Step 4
                If CInt(Replace(CleanBM(sigTbl.Cell(i, 1).Range.Text), ".", "")) <> curNum Then
                    'fix it
                    sigTbl.Cell(i, 1).Range.Text = Trim(str(curNum)) + "."
                
                    'fix bookmarks
                    sigTbl.Cell(i, 2).Range.Bookmarks.add "SignficantRiskTitle" + Trim(str(curNum))
                    sigTbl.Cell(i, 3).Range.Bookmarks.add "AssociateRisk" + Trim(str(curNum))
                    sigTbl.Cell(i + 1, 2).Range.Bookmarks.add "SignficantRiskName" + Trim(str(curNum))
                    sigTbl.Cell(i + 2, 2).Range.Bookmarks.add "SignficantRiskCtrlsTitle" + Trim(str(curNum))
                    sigTbl.Cell(i + 3, 2).Range.Bookmarks.add "SignficantRiskAssocCtrls" + Trim(str(curNum))
                    
                End If
                curNum = curNum + 1
            Next i
        End If
    End If
    
    'remove the assoc risks from controls
    Dim thisSigRisks As String
    Dim indexWCGW As Integer
    Dim tempStr As String
    Dim thisControlIndex As Integer
    Dim thisBM As Bookmark
    
    'we need to update any of the control sections that may have these assoc viewable.
    For Each thisBM In docSCOTWT.Bookmarks
        If InStr(thisBM.name, "BMSigRisksAddressed") <> 0 Then
            'loop through risks and see if this control has been associated
            tempStr = Replace(thisBM.name, "BMSigRisksAddressed", "")
            indexWCGW = GetWCGWIndex(Right(tempStr, Len(tempStr) - (InStr(tempStr, "WCGW") + 3)))
            thisControlIndex = GetControlIndex(indexWCGW, Left(tempStr, InStr(tempStr, "WCGW") - 1))
            thisSigRisks = ""
            For i = 0 To numRisks
                For j = 0 To Risks(i).numControls
                    If Risks(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id And Risks(i).Controls(j).isAssoc Then
                        If thisSigRisks <> "" Then
                            thisSigRisks = thisSigRisks + vbCrLf
                        End If
                        thisSigRisks = thisSigRisks + thisBullet + Risks(i).TypeID + " - " + Risks(i).name
                        Exit For
                    End If
                Next j
            Next i
            Call UpdateBookmarkGrid(thisBM.name, thisSigRisks)
        End If
    Next
    
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next

End Sub

Public Sub ChangeWCGWOnForm(thisID As String, oldRow As Integer, newRow As Integer)
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim indexWCGW As Integer
    Dim thisWCGW As String
    Dim thisWCGWID As String
    Dim i As Integer
    Dim strTemp As String
    Dim j As Integer
    Dim holdValue As String
    
    Call TurnOffTrackChanges
    thisWCGW = shSCOTWCGWs.Cells(oldRow, 2).value
    thisWCGWID = shSCOTWCGWs.Cells(oldRow, 1).value
    
    'update the WCGW Section
     For Each thisBM In docSCOTWT.Bookmarks
        If InStr(thisBM.name, "BMWCGWName") <> 0 Then
            If CleanBM(docSCOTWT.Bookmarks(thisBM.name).Range.Text) = thisWCGW Then
                indexWCGW = GetWCGWIndex(Replace(thisBM.name, "BMWCGWName", ""))
                docSCOTWT.Bookmarks("WCGWTableShow" + WCGWs(indexWCGW).id).Select
                Call docSCOTWT.ShowMe
                'update WCGW Name
                Call UpdateBookmarkGrid(thisBM.name, shSCOTWCGWsComp.Cells(newRow, 2).value)
                'update WCGW Assertions
                Call UpdateBookmarkGrid(Replace(thisBM.name, "BMWCGWName", "WCGWRelAssertions"), shSCOTWCGWsComp.Cells(newRow, 3).value)
            End If
        End If
    Next
                
    'now find the control that changed for this wcgw
    For j = 0 To NumWCGWs
        If WCGWs(j).id = thisWCGWID Then
            For i = 0 To WCGWs(j).numControls
                If WCGWs(j).Controls(i).id = shSCOTWCGWsComp.Cells(newRow, 4).value Then
                    strTemp = WCGWs(j).Controls(i).id + "WCGW" + WCGWs(j).id
                    docSCOTWT.Bookmarks("ControlsTableShow" + strTemp).Select
                    Call docSCOTWT.ShowMe
                    'update control Name
                    Call UpdateBookmarkGrid("BMControlFullName" + strTemp, shSCOTWCGWsComp.Cells(newRow, 5).value)
                    'update control type
                    Select Case shSCOTWCGWsComp.Cells(newRow, 6).value
                        Case "1"
                            holdValue = Translate("Application", ChosenLanguage)
                        Case "2"
                            holdValue = Translate("ITDepAll", ChosenLanguage)
                        Case "3"
                            holdValue = Translate("ManualPrevent", ChosenLanguage)
                        Case "4"
                            holdValue = Translate("ManualDetect", ChosenLanguage)
                    End Select
                    Call UpdateBookmarkGrid("ControlPropType" + strTemp, holdValue)
        
                    Select Case shSCOTWCGWsComp.Cells(newRow, 7).value
                        Case "1"
                            holdValue = Translate("MoreThanDaily", ChosenLanguage)
                        Case "2"
                            holdValue = Translate("Daily", ChosenLanguage)
                        Case "3"
                            holdValue = Translate("Weekly", ChosenLanguage)
                        Case "4"
                            holdValue = Translate("Monthly", ChosenLanguage)
                        Case "5"
                            holdValue = Translate("Quarterly", ChosenLanguage)
                        Case "6"
                            holdValue = Translate("Annually", ChosenLanguage)
                        Case "8"
                            holdValue = Translate("Other", ChosenLanguage)
                    End Select
                    'update control frequency
                    Call UpdateBookmarkGrid("BMFreqValue" + strTemp, holdValue)
                    
                    'update control Testing
                    Call UpdateBookmarkGrid("BMHasTesting" + strTemp, IIf(shSCOTWCGWsComp.Cells(newRow, 9).value = "Y", Translate("Yes", ChosenLanguage), Translate("No", ChosenLanguage)))
                    
                    'update the Control applications
                    If docSCOTWT.Bookmarks.Exists("FullCntlOwnAppSec" + strTemp) Then
                        If docSCOTWT.Bookmarks("FullCntlOwnAppSec" + strTemp).Range.Font.Hidden = False Then
                            Call UpdateBookmarkGrid("ApplicationName" + strTemp, Replace(shSCOTWCGWsComp.Cells(newRow, 8).value, "|", ", "))
                        Else
                            docSCOTWT.Bookmarks("FullCntlOwnAppSec" + strTemp).Range.Font.Hidden = False
                            Call UpdateBookmarkGrid("ApplicationName" + strTemp, Replace(shSCOTWCGWsComp.Cells(newRow, 8).value, "|", ", "))
                            docSCOTWT.Bookmarks("FullCntlOwnAppSec" + strTemp).Range.Font.Hidden = True
                        End If
                    End If
                    
                    docSCOTWT.Bookmarks("ControlsTableHide" + strTemp).Select
                    Call HideMe
                    docSCOTWT.Bookmarks("ControlsTableShow" + strTemp).Select
                    Call docSCOTWT.ShowMe
                End If
            Next i
            Exit For
        End If
    Next j
    Call ChangeMaster(shSCOTWCGWs, shSCOTWCGWsComp, oldRow, newRow, 10)
    'now update the references to this WCGW
    Call LoadDataToArrays
    Call RefreshOtherSectionsSection
    Call ResetTrackChangesValues

    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next

End Sub

Public Sub ChangeSigRiskOnForm(thisID As String, oldRow As Integer, newRow As Integer, strType As String)
'Changes of risks will be the Risk Name or Type or the Control Name, need to simply update those names through document
On Error GoTo errHandler

    Dim tbl As Word.Table
    Dim sigTbl As Word.Table
    Dim thisRisk As String
    Dim thisNewRisk As String
    Dim thisRiskCtrl As String
    Dim thisNewRiskCtrl As String
    Dim i As Integer
    Dim j As Integer
    Dim thisBM As Bookmark
    Dim tempStr As String
    Dim indexWCGW As Integer
    Dim thisControlIndex As Integer
    Dim thisSigRisks As String
    Dim thisBullet As String
    Dim curRow As Integer
    
    Call TurnOffTrackChanges
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    
    If docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = True
        docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = False
    End If
    For Each tbl In ActiveDocument.Tables
        If tbl.Title = "SigRisksImported" Then
            Set sigTbl = tbl
            Exit For
        End If
    Next
    
    thisRisk = shRisks.Cells(oldRow, 3).value + " - " + shRisks.Cells(oldRow, 2).value
    thisNewRisk = shRisksComp.Cells(newRow, 3).value + " - " + shRisksComp.Cells(newRow, 2).value
    thisRiskCtrl = shRisks.Cells(oldRow, 5).value
    thisNewRiskCtrl = shRisksComp.Cells(newRow, 5).value
    
    If strType = "Risk" Then
        curRow = 2
        tempStr = shRisks.Cells(oldRow, 1).value
        Do While shRisks.Cells(curRow, 1).value <> ""
            If shRisks.Cells(curRow, 1).value = tempStr Then
                'only update Risk but get them all
                For j = 2 To 3
                    shRisks.Cells(curRow, j).value = shRisksComp.Cells(newRow, j).value
                Next j
            End If
            curRow = curRow + 1
        Loop
    Else
        Call ChangeMaster(shRisks, shRisksComp, oldRow, newRow, 6)
    End If
    Call LoadDataToArrays
    
    If thisRisk <> thisNewRisk Then
        For i = 1 To sigTbl.Rows.count
            If LCase(Trim(CleanBM(sigTbl.Cell(i + 1, 2).Range.Text))) = thisRisk Then
                'found it, remove it
                sigTbl.Cell(i + 1, 2).Range.Text = thisNewRisk
                Exit For
            End If
        Next i
    End If
        
    'update the WCGW sections for the Risk name
    For Each thisBM In docSCOTWT.Bookmarks
        If InStr(thisBM.name, "BMSigRisksAddressed") <> 0 Then
            'loop through risks and see if this control has been associated
            tempStr = Replace(thisBM.name, "BMSigRisksAddressed", "")
            indexWCGW = GetWCGWIndex(Right(tempStr, Len(tempStr) - (InStr(tempStr, "WCGW") + 3)))
            thisControlIndex = GetControlIndex(indexWCGW, Left(tempStr, InStr(tempStr, "WCGW") - 1))
            thisSigRisks = ""
            For i = 0 To numRisks
                For j = 0 To Risks(i).numControls
                    If Risks(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id And Risks(i).Controls(j).isAssoc Then
                        If thisSigRisks <> "" Then
                            thisSigRisks = thisSigRisks + vbCrLf
                        End If
                        thisSigRisks = thisSigRisks + thisBullet + Risks(i).TypeID + " - " + Risks(i).name
                        Exit For
                    End If
                Next j
            Next i
            Call UpdateBookmarkGrid(thisBM.name, thisSigRisks)
        ElseIf InStr(thisBM.name, "SignficantRiskAssocCtrls") <> 0 Then
            'get list of assoc controls
            indexWCGW = CInt(Replace(thisBM.name, "SignficantRiskAssocCtrls", "")) - 1
            thisSigRisks = ""
            For j = 0 To Risks(indexWCGW).numControls
                If Risks(indexWCGW).Controls(j).isAssoc Then
                    If thisSigRisks <> "" Then
                        thisSigRisks = thisSigRisks + vbCrLf
                    End If
                    thisSigRisks = thisSigRisks + thisBullet + Risks(indexWCGW).Controls(j).name
                End If
            Next j
            Call UpdateBookmarkGrid(thisBM.name, thisSigRisks)
        ElseIf InStr(thisBM.name, "SignficantRiskName") <> 0 Then
            'get list of assoc controls
            indexWCGW = CInt(Replace(thisBM.name, "SignficantRiskName", "")) - 1
            Call UpdateBookmarkGrid(thisBM.name, Risks(indexWCGW).TypeID + " - " + Risks(indexWCGW).name)
        
        End If
    Next
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next

End Sub

Public Sub DelWCGWFromForm(thisID As String, isControlOnly As Boolean)
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisBullet As String
    Dim thisIDs() As String
    Dim thisWCGWIndex As Integer
    Dim thisControlIndex As Integer
    Dim isMainControl As Boolean
    Dim OutputString As String
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim m As Integer
    Dim newMainOne As String
    Dim curRow As String
    Dim strFromlink As String
    Dim strTolink As String
    Dim hasBeenCopied As Boolean
    
    Call TurnOffTrackChanges
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    isMainControl = False
    thisWCGWIndex = -1
    thisControlIndex = -1
    Call LoadDataToArrays
    If isControlOnly Then
        thisIDs() = Split(thisID, "|")
        'only delete this control
        OutputString = ""
        For i = 0 To NumWCGWs
            If WCGWs(i).id = thisIDs(0) Then
                thisWCGWIndex = i
                For j = 0 To WCGWs(i).numControls
                    If WCGWs(i).Controls(j).id = thisIDs(1) Then
                        thisControlIndex = j
                        isMainControl = WCGWs(i).Controls(j).isMainDoc
                        Exit For
                    End If
                Next j
                Exit For
            End If
        Next i

        'find if any controls are Main ones and move them.
        strFromlink = WCGWs(thisWCGWIndex).Controls(thisControlIndex).id + "WCGW" + WCGWs(thisWCGWIndex).id
        hasBeenCopied = False
        If isMainControl Then
            'need to check if there are others out there
            For k = 0 To NumWCGWs
                If k <> thisWCGWIndex And WCGWs(k).isPlaced Then
                    For m = 0 To WCGWs(k).numControls
                        If WCGWs(k).Controls(m).id = WCGWs(thisWCGWIndex).Controls(thisControlIndex).id Then
                            'then this is on doc...need to move all the data over.
                            WCGWs(k).Controls(m).isMainDoc = True
                            newMainOne = WCGWs(k).id + "|" + WCGWs(k).Controls(m).id
                            curRow = 2
                            Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
                                If newMainOne = shSCOTWCGWs.Cells(curRow, 10).value Then
                                    shSCOTWCGWs.Cells(curRow, 12).value = "X"
                                End If
                                curRow = curRow + 1
                            Loop
                            
                            'move all data from deleting control to new main control
                            Call MoveControlData(WCGWs(thisWCGWIndex).id, WCGWs(thisWCGWIndex).Controls(thisControlIndex).id, WCGWs(k).id, WCGWs(k).Controls(m).id)

                            strFromlink = WCGWs(thisWCGWIndex).Controls(thisControlIndex).id + "WCGW" + WCGWs(thisWCGWIndex).id
                            strTolink = WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id
                            hasBeenCopied = True
                            GoTo DoneThis
                        End If
                    Next m
                End If
            Next k
        End If
DoneThis:
        docSCOTWT.Bookmarks("EntireSection" + strFromlink).Select
        Selection.Range.Delete
        If hasBeenCopied Then
            'rename copied controls
            Call RenameCopiedControl(strFromlink, strTolink)
        End If
        
        'make sure the WCGW is still marked as on the doc. (this is special case of now a wCGW with no controls
        curRow = 2
        Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
            If shSCOTWCGWs.Cells(curRow, 1).value = thisIDs(0) Then
                shSCOTWCGWs.Cells(curRow, 11).value = "X"
            End If
            curRow = curRow + 1
        Loop
    Else
        'remove the deleted WCGW
        i = GetWCGWIndex(thisID)
        docSCOTWT.Bookmarks("WCGWDelete" + WCGWs(i).id).Range.Select
        ForceDelete = True
        Call DeleteMe
        ForceDelete = False
    End If
    
    Call LoadDataToArrays
    Call RefreshOtherSectionsSection
    Call ResetTrackChangesValues
    
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume Next

End Sub

'Public Sub ChangeMaster(thisMasterSheet As Worksheet, thisNewSheet As Worksheet, copyToRow As Integer, copyFromRow As Integer, colCount As Integer)
Public Sub ChangeMaster(thisMasterSheet As Object, thisNewSheet As Object, copyToRow As Integer, copyFromRow As Integer, colCount As Integer)
'add a new record to the master data sheet
On Error GoTo errHandler

    Dim j As Integer
    
    For j = 1 To colCount
        thisMasterSheet.Cells(copyToRow, j).value = thisNewSheet.Cells(copyFromRow, j).value
    Next j
    
last:
    Exit Sub
    
errHandler:
    'Resume Next
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last

End Sub

Public Sub PushDiagsToSheet()
On Error GoTo errHandler

    Dim i As Integer
    Dim curRow As Integer

    Call TurnOffTrackChanges
    'need to write it out to the sheet
    Call CheckForOpenEmbedded
    'clear it
    shDiagnostics.Range("A2:E1000").clear
    
    curRow = 2
    For i = 0 To numToDelete
         shDiagnostics.Cells(curRow, 1).value = "DELETE"
         shDiagnostics.Cells(curRow, 2).value = ToDelete(i).DataType
         shDiagnostics.Cells(curRow, 3).value = ToDelete(i).id
         shDiagnostics.Cells(curRow, 4).value = ToDelete(i).name
         shDiagnostics.Cells(curRow, 5).value = ""
         curRow = curRow + 1
    Next i
    
    For i = 0 To numToChange
         shDiagnostics.Cells(curRow, 1).value = "CHANGE"
         shDiagnostics.Cells(curRow, 2).value = ToChange(i).DataType
         shDiagnostics.Cells(curRow, 3).value = ToChange(i).id
         shDiagnostics.Cells(curRow, 4).value = ToChange(i).FromName
         shDiagnostics.Cells(curRow, 5).value = ToChange(i).ToName
         curRow = curRow + 1
    Next i

last:
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    'Resume Next
    'Message
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last

End Sub

Public Sub AddDiagnostic(diagType As Integer, DiagTypeStr As String, OrigName As String, DiagName As String, strUnique As String)
On Error GoTo errHandler

    Dim SourceRangeName As String
    Dim startRow As Integer
    Dim found As Boolean
    Dim i As Integer
    
    Select Case diagType
        Case 1  'Deletion
            'see if this is already there
            found = False
            For i = 0 To numToDelete
                If ToDelete(i).id = strUnique And ToDelete(i).DataType = DiagTypeStr Then
                    found = True
                End If
            Next i
            If Not found Then
                numToDelete = numToDelete + 1
                ReDim Preserve ToDelete(numToDelete) As AddDelType
                ToDelete(numToDelete).id = strUnique
                ToDelete(numToDelete).name = DiagName
                ToDelete(numToDelete).DataType = DiagTypeStr
                
                'show alert if needed
                docSCOTWT.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = False
            End If
        Case 2  'Change
            'see if this is already there
            found = False
            For i = 0 To numToChange
                If ToChange(i).id = strUnique And ToChange(i).DataType = DiagTypeStr Then
                    found = True
                End If
            Next i
            If Not found Then
                numToChange = numToChange + 1
                ReDim Preserve ToChange(numToChange) As ChangeType
                ToChange(numToChange).id = strUnique
                ToChange(numToChange).FromName = OrigName
                ToChange(numToChange).ToName = DiagName
                ToChange(numToChange).name = OrigName + " TO " + DiagName
                ToChange(numToChange).DataType = DiagTypeStr
                
                'show alert if needed
                docSCOTWT.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = False
            End If
        Case Else   'Addition
            numToAdd = numToAdd + 1
            ReDim Preserve ToAdd(numToAdd) As AddDelType
            ToAdd(numToAdd).id = strUnique
            ToAdd(numToAdd).name = DiagName
            ToAdd(numToAdd).DataType = DiagTypeStr
    End Select
    
last:
    Exit Sub
    
errHandler:
    'Resume Next
    'Message
    MsgBox "An error occurred.  Error - " & Err.Number & ": " & Err.Description
    Resume last

End Sub

Attribute VB_Name = "modCanvasEngagements"
Option Explicit
Option Private Module
'this module is for pulling the Engagement information and profile information

Dim curRow As Integer
Dim curCol As Integer

Public Type Engage
    ClientID As String
    ClientName As String
    EngagementID As String
    EngagementName As String
    WorkSpaceId As String
    WorkSpaceName As String
    Version As String
    EngagementURI As String
End Type

Public Engagements() As Engage
Public numEngagements As Integer

Public Type ProfileInfo
    WorkSpaceId As String
    WorkSpaceName As String
    ClientID As String
    ClientName As String
    EngagementID As String
    EngagementName As String
    Version As String
    Period As String
    SCOTID As String
    NumWCGWs As Integer
    NumWTs As Integer
    NumCritPaths As Integer
    ApplGAAS As String
    IsListed As String
    Nature As String
    PCAOB As Boolean
    PCAOBIA As Boolean
    IntegratedAudit As Boolean
    ChosenSCOTType As Integer
    ChosenSCOTType2 As Integer
    PrelimAudit As Integer
    ChosenLanguage As String
    ShowDesign As Boolean
    EngagementURI As String
End Type

Public Profile As ProfileInfo

Public Function EngagementsRequest() As RestRequest
'sets up the API call to be made
'Pull list of engagements/Workspaces that the user has access to.

    Set EngagementsRequest = New RestRequest
    
    'set the specific API to call
    EngagementsRequest.Resource = UserWorkspacesURL
   
    EngagementsRequest.AddHeader "datasource", dataSource
   
    ' call the Get method
    EngagementsRequest.Method = httpGET

End Function

Public Function GetEngagements() As Boolean
'Pull list of engagements/Workspaces that the user has access to.
On Error GoTo errHandler

    Dim myResponse As RestResponse
    Set myResponse = UniversalClient.Execute(EngagementsRequest())
    GetEngagements = OutputEngagements(myResponse)
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  You may not be authorized in EY Canvas.  Error: " & str(Err.Number) & " - " & Err.Description
    GetEngagements = False
    
End Function

Public Function OutputEngagements(response As RestResponse) As Boolean
'parse the response for engagements and save out to hidden sheet
On Error GoTo errHandler

    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        Dim i As Integer
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        
        'for testing
        'Call ShowAllJSONData(job, 5, 1)
        'ActiveSheet.Cells(9, 1) = Response.content
        
        'Parse and find the client/engagement info
        If Not GetJSonClients(job) Then GoTo thisExit
        
        OutputEngagements = True
    Else
        'if this fails, most likely the user does not have authority to any engagements.
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas Engagements.  You may not be authorized in EY Canvas.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        OutputEngagements = False
    End If
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  You may not be authorized in EY Canvas.  Error: " & str(Err.Number) & " - " & Err.Description
    OutputEngagements = False

End Function

Public Function GetJSonEngagements(job As cJobject, sClientID As String, sClientName As String, sWorkspaceID As String, sWorkspaceName As String) As Boolean
'function to allow for pulling a specific values from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("engagements")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                'loop through them and save each to the Engagements array
                For Each jom In jo.children
                    If (GetJSonValue(jom, "engagementstatus") = "1" Or GetJSonValue(jom, "engagementstatus") = "6" Or GetJSonValue(jom, "engagementstatus") = "7") And (LCase(GetJSonValue(jom, "engagementisprofilecomplete")) = LCase(CStr(True)) Or LCase(GetJSonValue(jom, "engagementisprofilecomplete")) = "true") Then
                        numEngagements = numEngagements + 1
                        ReDim Preserve Engagements(numEngagements) As Engage
                        Engagements(numEngagements).ClientID = sClientID
                        Engagements(numEngagements).ClientName = sClientName
                        Engagements(numEngagements).WorkSpaceId = sWorkspaceID
                        Engagements(numEngagements).WorkSpaceName = sWorkspaceName
                        Engagements(numEngagements).EngagementID = GetJSonValue(jom, "id")
                        Engagements(numEngagements).EngagementName = GetJSonValue(jom, "engagementdesc")
                        If Len(GetJSonValue(jom, "engagementversion")) < 1 Then
                            Engagements(numEngagements).Version = "1"
                        Else
                            Engagements(numEngagements).Version = Left(GetJSonValue(jom, "engagementversion"), InStr(GetJSonValue(jom, "engagementversion"), ".") - 1)
                        End If
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonEngagements = True
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  Error: " & str(Err.Number) & " - " & Err.Description
    GetJSonEngagements = False

End Function

Public Function GetJSonClients(job As cJobject) As Boolean
'function to allow for pulling a specific values from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim FoundValue() As String
    Dim numFound As Integer
    
    'find info
    numEngagements = -1
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("clients")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                'loop through the clients
                For Each jom In jo.children
                    'get workspaces for each client
                    If Not GetJSonWorkSpaces(jom, GetJSonValue(jom, "id"), GetJSonValue(jom, "clientname")) Then GoTo thisExit
                Next jom
            End If
        End If
    End If
    GetJSonClients = True
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonClients = False
    
End Function

Public Function GetJSonWorkSpaces(job As cJobject, sClientID As String, sClientName As String) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim FoundValue() As String
    Dim numFound As Integer
    
    'find info
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("workspaces")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'get engagements for this client/workspace
                    If Not GetJSonEngagements(jom, sClientID, sClientName, GetJSonValue(jom, "id"), GetJSonValue(jom, "workspacedesc")) Then GoTo thisExit
                Next jom
            End If
        End If
    End If
    GetJSonWorkSpaces = True
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonWorkSpaces = False
    
End Function

Public Function LocationRequest() As RestRequest
'sets up the API call to be made
' Pull data for a specific Workspace - we are using this to pull the Period end date for the engagement
    
    Set LocationRequest = New RestRequest
    
    'set the specific API to call
    LocationRequest.Resource = LocationURL + Profile.EngagementID
   
    LocationRequest.AddHeader "datasource", dataSource
   
    ' call the Get method
    LocationRequest.Method = httpGET

End Function

Public Function ProfileRequest() As RestRequest
'sets up the API call to be made
' Pull data for a specific Workspace - we are using this to pull the Period end date for the engagement
    
    Set ProfileRequest = New RestRequest
    
    If Profile.WorkSpaceId = "" Then
        Call LoadDataToArrays
    End If
    
    ProfileRequest.Resource = MainWorkspaceURL + Profile.WorkSpaceId
    ProfileRequest.AddHeader "datasource", dataSource
    
    ' call the Get method
    ProfileRequest.Method = httpGET

End Function

Public Function Profile2Request() As RestRequest
'sets up the API call to be made
' Pull data for a specific enagagement - we are using this to pull whether the enagagement is Listed or not

    Set Profile2Request = New RestRequest
    
    'set the specific API to call
    Profile2Request.Resource = EngagementProfileURL
    
    ' Add parameters to the request header
    Profile2Request.AddHeader "engagementid", Profile.EngagementID
    Profile2Request.AddHeader "datasource", dataSource
   
    ' call the Get method
    Profile2Request.Method = httpGET

End Function

Public Function GetProfile() As Boolean
On Error GoTo errHandler

    Dim myResponse As RestResponse
    Dim returnSuccess As Boolean
    
    'This gets the Engagement period date
    Set myResponse = UniversalClient.Execute(LocationRequest())
    returnSuccess = ProcessLocation(myResponse)
    If Not returnSuccess Then GoTo thisExit
    
    'This gets the Engagement period date
    Set myResponse = UniversalClient.Execute(ProfileRequest())
    returnSuccess = ProcessProfile(myResponse)
    If Not returnSuccess Then GoTo thisExit
    
    'This gets the Appl GAAS and Listed, Nature of engagement (Audit f/s or Integrated)
    
    Set myResponse = EngagementClient.Execute(Profile2Request())
    returnSuccess = ProcessProfile2(myResponse)
    If Not returnSuccess Then GoTo thisExit
    
    'The PCAOB stands for the Public Company Accounting Oversight Board.
    'To determine whether it's a PCAOB audit you'll need to select "audit of  f/s"," listed" and then "US GAAS".
    'Selecting integrated audit, listed, US GAAS gets you the integrated audit content.
    Profile.PCAOB = False
    Profile.PCAOBIA = False
    'If Profile.Nature = "1" And Profile.IsListed = "Yes" And Profile.ApplGAAS = "United States" Then ** Remove the Listed part per BB
    If Profile.Nature = "2" And Profile.ApplGAAS = "United States" Then
        Profile.PCAOBIA = True
'    ElseIf Profile.Nature = "3" And Profile.ApplGAAS = "United States" Then
'        'need to ask
'        frmSelectType.Show
'        'profile setting is set in form, move along
    ElseIf Profile.ApplGAAS = "United States" Then
        Profile.PCAOB = True
    End If
    Call CheckForOpenEmbedded
    
    shFormData.Range("GAAS").value = Profile.ApplGAAS
    shFormData.Range("NatureOfEngage").value = Profile.Nature
    shFormData.Range("PCAOB").value = IIf(Profile.PCAOB, "Y", "N")
    shFormData.Range("PCAOBIA").value = IIf(Profile.PCAOBIA, "Y", "N")
    shFormData.Range("IntegratedAudit").value = IIf(Profile.Nature = "2", "Y", "N")
    Profile.IntegratedAudit = IIf(Profile.Nature = "2", True, False)
    shFormData.Range("EngagementURI").value = Profile.EngagementURI
    
    Call SaveEmbedded
    
    returnSuccess = True
    
thisExit:
    GetProfile = returnSuccess
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagement Profile.  Error: " & str(Err.Number) & " - " & Err.Description
    GetProfile = False

End Function

Public Function ProcessProfile(response As RestResponse) As Boolean
On Error GoTo errHandler
    
    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        Dim i As Integer
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        If Not GetJSonProfile(job) Then GoTo thisExit
        ProcessProfile = True
    Else
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas Engagement Profile.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        ProcessProfile = False
    End If
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagement Profile.  Error: " & str(Err.Number) & " - " & Err.Description
    ProcessProfile = False
    
End Function

Public Function ProcessLocation(response As RestResponse) As Boolean
On Error GoTo errHandler
    
    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        Dim i As Integer
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        If Not GetJSonLocation(job) Then GoTo thisExit
        ProcessLocation = True
    Else
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas Engagement Location.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        ProcessLocation = False
    End If
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagement Location.  Error: " & str(Err.Number) & " - " & Err.Description
    ProcessLocation = False
    
End Function

Public Function ProcessProfile2(response As RestResponse) As Boolean
On Error GoTo errHandler
    
    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        Dim i As Integer
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        
        'for testing
        'Call ShowAllJSONData(job, 5, 1)
        'ActiveSheet.Cells(9, 1) = Response.content
        
        If Not GetJSonProfile2(job) Then GoTo thisExit
        ProcessProfile2 = True
    Else
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas Engagement Profile.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        ProcessProfile2 = False
    End If
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagement Profile.  Error: " & str(Err.Number) & " - " & Err.Description
    ProcessProfile2 = False

End Function

Public Function GetJSonProfile(job As cJobject) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("engagements")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    If GetJSonValue(jom, "id") = Profile.EngagementID Then
                        Profile.Period = GetJSonValue(jom, "yearenddate")
                        Profile.Period = Left(Profile.Period, InStr(Profile.Period, "T") - 1)
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonProfile = True
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  Error: " & str(Err.Number) & " - " & Err.Description
    GetJSonProfile = False
    
End Function

Public Function GetJSonLocation(job As cJobject) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("dcuri")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    If GetJSonValue(jom, "locator_uritype") = "1" Then
                        Profile.EngagementURI = GetJSonValue(jom, "locator_uri")
                        Exit For
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonLocation = True
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Location.  Error: " & str(Err.Number) & " - " & Err.Description
    GetJSonLocation = False
    
End Function

Public Function GetJSonProfile2(job As cJobject) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    Dim CurrencyCodeRow As Integer
    Dim FoundCode As Range
    Dim thisSelectGaasID As String
    Dim thisValue As String
    
    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject, jom3 As cJobject
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("engagementprofilequestionanswers")
    
    ' if jo is nothing then key was not found in object
    Profile.IsListed = "No"
    Profile.Nature = "1"
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    If LCase(Trim(GetJSonValue(jom, "id"))) = "1" Then
                    'If LCase(Trim(GetJSonValue(jom, "profilequestionvalue"))) = "what is the nature of the engagement?" Then
                        Set jom2 = jom.find("profileansweroptions")
                        If Not jom2 Is Nothing Then
                            If jom2.isArrayRoot Then
                                If jom2.hasChildren Then
                                    For Each jom3 In jom2.children
                                        thisValue = LCase(GetJSonValue(jom3, "selectedvalue"))
                                        If GetJSonValue(jom3, "id") = "1" Then  'audit of financial statements
                                            If (thisValue = LCase(CStr(True)) Or thisValue = "true") Then
                                                Profile.Nature = "1"
                                            End If
                                        ElseIf GetJSonValue(jom3, "id") = "314" Then 'integrated audit of financial statements and internal control over financial reporting
                                            If (thisValue = LCase(CStr(True)) Or thisValue = "true") Then
                                                Profile.Nature = "2"
                                            End If
                                        ElseIf GetJSonValue(jom3, "id") = "313" Then  'review of interim financial information
                                            If (thisValue = LCase(CStr(True)) Or thisValue = "true") Then
                                                Profile.Nature = "3"
                                            End If
                                        End If
                                    Next jom3
                                End If
                            End If
                        End If
                    End If
                    If LCase(Trim(GetJSonValue(jom, "id"))) = "2" Then
                    'If LCase(Trim(GetJSonValue(jom, "profilequestionvalue"))) = "select the type of entity" Then
                        Set jom2 = jom.find("profileansweroptions")
                        If Not jom2 Is Nothing Then
                            If jom2.isArrayRoot Then
                                If jom2.hasChildren Then
                                    For Each jom3 In jom2.children
                                        If (LCase(GetJSonValue(jom3, "selectedvalue")) = LCase(CStr(True)) Or LCase(GetJSonValue(jom3, "selectedvalue")) = "true") And GetJSonValue(jom3, "id") = "2" Then  'listed entity
                                            Profile.IsListed = "Yes"
                                        End If
                                    Next jom3
                                End If
                            End If
                        End If
                    End If
                    If LCase(Trim(GetJSonValue(jom, "id"))) = "3" Then
                    'If LCase(Trim(GetJSonValue(jom, "profilequestionvalue"))) = "which country's standards apply to this engagement?" Then
                        thisSelectGaasID = GetJSonValue(jom, "selectedvalue")
                        Set jom2 = jom.find("country")
                        If Not jom2 Is Nothing Then
                            If jom2.isArrayRoot Then
                                If jom2.hasChildren Then
                                    For Each jom3 In jom2.children
                                        If GetJSonValue(jom3, "id") = thisSelectGaasID Then
                                            Profile.ApplGAAS = GetJSonValue(jom3, "profileansweroptionvalue")
                                            Exit For
                                        End If
                                    Next jom3
                                End If
                            End If
                        End If
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonProfile2 = True
    Exit Function
    
errHandler:
    MsgBox "An error occurred while getting EY Canvas Engagements.  Error: " & str(Err.Number) & " - " & Err.Description
    'Resume Next
    GetJSonProfile2 = False
    
End Function







Attribute VB_Name = "modCanvasMain"
Option Explicit
Option Private Module

'Global API URLs
'Public Const UniversalBaseURL = "https://eycanvasapp-trn.ey.net/api/" 'Training
'Public Const UniversalBaseURL = "https://atfdevint-uniapp-de.eydev.net/Universal/EY.ATF.Universal.Services.Facade/api/" 'dev
'Public Const UniversalBaseURL = "https://Integration1-atfapp.eyqa.net/api/" 'QA
'Public Const UniversalBaseURL = "https://atfapp.eyua.net/api/"  'UAT
'Public Const UniversalBaseURL = "https://staging-atfapp.eyua.net/api/"  'STAGE
Public Const UniversalBaseURL = "https://eycanvasapp.ey.net/api/"  'Prod

'Engagement URLs
Public Const UserWorkspacesURL = "v1/home.json?phase=MyWorkspaces"
Public Const MainWorkspaceURL = "v1/Workspaces.json/"
Public Const LocationURL = "v1/locations.json?filters=engagementid eq "
Public Const EngagementProfileURL = "engagementprofile.json"
'Risks & WCGWs URL
Public Const CRASummaryURL = "crasummary.json"
'SCOTs URL
Public Const SCOTsURL = "scotstrategybuildtask.json"
Public Const SCOTsWCGWsURL = "scotwcgwcontrols.json/"
Public Const SCOTsControlURL = "controldetail.json/"

'Canvas API Max Version
Public Const CANVAS_MAX_VERSION = 2  'this is the max version of an engagement this form is programmed to handle

'Canvas datasource
Public Const dataSource = "secondary"

'hidden sheets for data
Public shSCOTWCGWs As Object 'Excel.Worksheet
Public shSCOTWCGWsComp As Object 'Excel.Worksheet
Public shRisks As Object 'Excel.Worksheet
Public shRisksComp As Object 'Excel.Worksheet
Public shFormData As Object 'Excel.Worksheet
Public shDiagnostics As Object 'Excel.Worksheet
Public shMigrate As Object 'Excel.Worksheet
Public shSCOTWCGWsRF As Object 'Excel.Worksheet
Public shSCOTControlRF As Object 'Excel.Worksheet
Public shRisksRF As Object 'Excel.Worksheet

' There are two different Client APIs used by Canvas - the Universal API set and the Engagement API set.  They are defined here.
Public Function UniversalClient() As RestClient
    Set UniversalClient = New RestClient
    
    ' Set the base url for the service
    '
    ' All requests will be appended to the base url
    ' e.g.
    ' BaseUrl = https://api.service.com/
    ' RequestA -> https://api.service.com/RequestA
    ' RequestB -> https://api.service.com/RequestB
    '
    UniversalClient.BaseUrl = UniversalBaseURL
    
End Function

Public Function EngagementClient() As RestClient
    Set EngagementClient = New RestClient
    
    ' Set the base url for the service
    '
    ' All requests will be appended to the base url
    ' e.g.
    ' BaseUrl = https://api.service.com/
    ' RequestA -> https://api.service.com/RequestA
    ' RequestB -> https://api.service.com/RequestB
    '
    'EngagementClient.BaseUrl = EngagementBaseURL + "v" + Profile.Version + "/"
    EngagementClient.BaseUrl = Profile.EngagementURI
    
End Function

Public Function MakePrettyError(statusCode As Integer) As String

    Select Case statusCode
        Case 400, 401, 403 'Not authorized
            MakePrettyError = "EY Canvas has returned that you are not authorized to access or cannot access their services.  Please call the help desk if you continue to have trouble accessing EY Canvas data."
        Case 404, 408, 500, 502, 503, 504 'No response
            MakePrettyError = "EY Canvas is not responding to our request for data.  This can mean their services are down or unreachable due to a network problem.  Check your connections and try again.  If the problem persists, please call the help desk."
        Case Else
            MakePrettyError = ""
    End Select
        
End Function

Public Sub ImportCanvas(isRefresh As Boolean)
'This procedure will Load Canvas data or refresh the data already loaded
On Error GoTo errHandler

    Dim i As Integer
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    Call TurnOffTrackChanges
    If isRefresh Then
        frmStatusWindow.lblMessage.Caption = Translate("WaitRefreshMessage", ChosenLanguage)
        frmStatusWindow.Show (False)
        DoEvents
        
        'then we are Refreshing!
        'Make sure they want to
        Call LoadProfile
        If GetEngagements Then
            For i = 0 To numEngagements
                If Profile.EngagementID = Engagements(i).EngagementID Then
                    Profile.ClientID = Engagements(i).ClientID
                    Profile.ClientName = Engagements(i).ClientName
                    Profile.EngagementName = Engagements(i).EngagementName
                    Exit For
                End If
            Next i
        End If
        If Not GetProfile Then GoTo last
        If Not GetSCOTs Then GoTo last
        Call RefreshSCOT
        If LoadAllData Then
            Call DisplayProfile
            docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text = FormatDateTime(Now)
            'compare the data here
            Call CompareSheets
            System.Cursor = wdCursorNormal
            Application.ScreenUpdating = True
            frmStatusWindow.Hide
            Call ShowDiagnosticsForm
        End If
    Else
        'new load
        frmStatusWindow.lblMessage.Caption = Translate("WaitImportMessage", ChosenLanguage)
        frmStatusWindow.Show (False)
        DoEvents
        If GetEngagements Then
            frmStatusWindow.Hide
            System.Cursor = wdCursorNormal
            Load frmChooseEngagement
            frmChooseEngagement.btnCancel.Caption = Translate("CancelButton", ChosenLanguage)
            frmChooseEngagement.btnFinish.Caption = Translate("SelectButton", ChosenLanguage)
            If gPullingDocument Then
                frmChooseEngagement.lblTitle.Caption = Translate("SelectEngagementPull", ChosenLanguage)
            Else
                frmChooseEngagement.lblTitle.Caption = Translate("SelectEngagement", ChosenLanguage)
            End If
            frmChooseEngagement.Show
            If Profile.EngagementID = "" Then GoTo last 'They cancelled, stop loading
            
            'for pullin data form another form only
            If gPullingDocument And Not gFileArchiveFlag Then
                'need to check if we ask for SCOT or not
                If Profile.EngagementID = gPullEngagementID Then
                    'then this is a simple migrate...don't need to ask about the a SCOT we will pull from the previous form
                    GoTo last
                End If
            End If
            
            Application.ScreenUpdating = False
            System.Cursor = wdCursorWait
            frmStatusWindow.lblMessage.Caption = Translate("WaitImportMessage", ChosenLanguage)
            frmStatusWindow.Show (False)
            DoEvents
            If Not GetProfile Then GoTo last
            If GetSCOTs Then
                frmStatusWindow.Hide
                SelectedSCOT = ""
                Load frmChooseSCOT
                frmChooseSCOT.btnCancel.Caption = Translate("CancelButton", ChosenLanguage)
                frmChooseSCOT.btnFinish.Caption = Translate("SelectButton", ChosenLanguage)
                If gPullingDocument Then
                    frmChooseSCOT.lblTitle.Caption = Translate("SelectSCOTPull", ChosenLanguage)
                Else
                    frmChooseSCOT.lblTitle.Caption = Translate("SelectSCOT", ChosenLanguage)
                End If
                frmChooseSCOT.lblHelp.Caption = Translate("SCOTHelpText", ChosenLanguage)
                frmChooseSCOT.Show
                If SelectedSCOT = "" Then
                    If gPullingDocument Then
                        Profile.EngagementID = "" 'this is to stop the pull because they cancelled
                    End If
                    GoTo last  'They cancelled, stop loading
                End If
                frmStatusWindow.lblMessage.Caption = Translate("WaitImportMessage", ChosenLanguage)
                frmStatusWindow.Show (False)
                DoEvents
                If LoadAllData Then
                    Call DisplayProfile
                End If
                docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text = FormatDateTime(Now)
            End If
        End If
    
        Unload frmStatusWindow
    
    End If
last:
    If isRefresh Then Unload frmStatusWindow
    Call ResetTrackChangesValues
    
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Exit Sub

errHandler:
    Resume Next
    
End Sub

Public Sub LoadProfile()
On Error GoTo errHandler:

    Call CheckForOpenEmbedded
    
    Profile.WorkSpaceId = shFormData.Range("WorkspaceId").value
    Profile.EngagementID = shFormData.Range("EngagementID").value
    Profile.ClientID = shFormData.Range("ClientID").value
    Profile.Version = shFormData.Range("EngageAPIVersion").value
    Profile.SCOTID = shFormData.Range("SCOTID").value
    Profile.NumWCGWs = shFormData.Range("NumberOfWCGWs").value
    Profile.NumWTs = shFormData.Range("NumberOfWTs").value
    Profile.NumCritPaths = shFormData.Range("NumberCritPaths").value
    Profile.ApplGAAS = shFormData.Range("GAAS").value
    Profile.PCAOB = IIf(LCase(shFormData.Range("PCAOB").value) = "y", True, False)
    Profile.PCAOBIA = IIf(LCase(shFormData.Range("PCAOBIA").value) = "y", True, False)
    Profile.ChosenLanguage = shFormData.Range("ChosenLanguage").value
    Profile.ShowDesign = IIf(LCase(shFormData.Range("ShowDesign").value) = "y", True, False)
    Profile.IntegratedAudit = IIf(LCase(shFormData.Range("IntegratedAudit").value) = "y", True, False)
    Profile.ChosenSCOTType = shFormData.Range("SCOTType").value
    Profile.ChosenSCOTType2 = shFormData.Range("SCOTType2").value
    Profile.PrelimAudit = shFormData.Range("PrelimAudit").value
    Profile.EngagementURI = shFormData.Range("EngagementURI").value
    Profile.Nature = shFormData.Range("NatureOfEngage").value

    Exit Sub

errHandler:
    Resume Next

End Sub

Public Sub ClearProfile()
On Error GoTo errHandler:

    Call CheckForOpenEmbedded
    
    shFormData.Range("WorkspaceId").value = ""
    shFormData.Range("EngagementID").value = ""
    shFormData.Range("EngageAPIVersion").value = ""
    shFormData.Range("SCOTID").value = ""
    shFormData.Range("NumberOfWCGWs").value = "1"
    shFormData.Range("NumberOfWTs").value = "1"
    shFormData.Range("NumberCritPaths").value = "1"
    shFormData.Range("GAAS").value = ""
    shFormData.Range("PCAOB").value = "N"
    shFormData.Range("PCAOBIA").value = "N"
    shFormData.Range("ShowDesign").value = "N"
    shFormData.Range("IntegratedAudit").value = "N"
    shFormData.Range("SCOTType").value = ""
    shFormData.Range("SCOTType2").value = ""
    shFormData.Range("PrelimAudit").value = ""
    shFormData.Range("EngagementURI").value = ""
    shFormData.Range("ClientId").value = ""

    Profile.WorkSpaceId = shFormData.Range("WorkspaceId").value
    Profile.ClientID = shFormData.Range("ClientId").value
    Profile.EngagementID = shFormData.Range("EngagementID").value
    Profile.Version = shFormData.Range("EngageAPIVersion").value
    Profile.SCOTID = shFormData.Range("SCOTID").value
    Profile.NumWCGWs = shFormData.Range("NumberOfWCGWs").value
    Profile.NumWTs = shFormData.Range("NumberOfWTs").value
    Profile.NumCritPaths = shFormData.Range("NumberCritPaths").value
    Profile.ApplGAAS = shFormData.Range("GAAS").value
    Profile.PCAOB = IIf(LCase(shFormData.Range("PCAOB").value) = "y", True, False)
    Profile.PCAOBIA = IIf(LCase(shFormData.Range("PCAOBIA").value) = "y", True, False)
    Profile.ChosenLanguage = shFormData.Range("ChosenLanguage").value
    Profile.ShowDesign = IIf(LCase(shFormData.Range("ShowDesign").value) = "y", True, False)
    Profile.IntegratedAudit = IIf(LCase(shFormData.Range("IntegratedAudit").value) = "y", True, False)
    Profile.ChosenSCOTType = shFormData.Range("SCOTType").value
    Profile.ChosenSCOTType2 = shFormData.Range("SCOTType2").value
    Profile.PrelimAudit = shFormData.Range("PrelimAudit").value
    Profile.EngagementURI = shFormData.Range("EngagementURI").value

    Exit Sub

errHandler:
    Resume Next

End Sub

Public Sub LoadDataToArrays()
'When we load the Canvas data from the APIs, we store them in the document for future use.
'This will load all currently pulled Canvas data from prior load into Arrays for use in Document functions
On Error GoTo errHandler:
    
    Dim tempString As String
    Dim curRow As Integer
    Dim curWCGWIndex As Integer
    Dim i As Integer
    Dim j As Integer
    Dim found As Boolean
    
    'load the WCGWs
    Call CheckForOpenEmbedded
    
    'loop through and write out
    curRow = 2
    NumWCGWs = -1
    ReDim WCGWs(0) As WCGWInfo
    Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
        'see if this WCGW is already in there
        found = False
        curWCGWIndex = -1
        For i = 0 To NumWCGWs
            If WCGWs(i).id = shSCOTWCGWs.Cells(curRow, 1).value Then
                found = True
                curWCGWIndex = i
                Exit For
            End If
        Next i
        If Not found Then
            NumWCGWs = NumWCGWs + 1
            ReDim Preserve WCGWs(NumWCGWs) As WCGWInfo
            WCGWs(NumWCGWs).id = shSCOTWCGWs.Cells(curRow, 1).value
            WCGWs(NumWCGWs).name = shSCOTWCGWs.Cells(curRow, 2).value
            WCGWs(NumWCGWs).RelatedAsserts = shSCOTWCGWs.Cells(curRow, 3).value
            WCGWs(NumWCGWs).numControls = -1
            If LCase(shSCOTWCGWs.Cells(curRow, 11).value) = "x" Then
                WCGWs(NumWCGWs).isPlaced = True
            Else
                WCGWs(NumWCGWs).isPlaced = False
            End If
            curWCGWIndex = NumWCGWs
        End If
        
        If shSCOTWCGWs.Cells(curRow, 4).value <> "" Then
            'add control
            WCGWs(curWCGWIndex).numControls = WCGWs(curWCGWIndex).numControls + 1
            ReDim Preserve WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls) As ControlType
            WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).id = shSCOTWCGWs.Cells(curRow, 4).value
            WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).name = shSCOTWCGWs.Cells(curRow, 5).value
            WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).TypeID = shSCOTWCGWs.Cells(curRow, 6).value
            WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).FreqID = shSCOTWCGWs.Cells(curRow, 7).value
            WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).Appls() = Split(shSCOTWCGWs.Cells(curRow, 8).value, "|")
            WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).numAppl = UBound(WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).Appls)
            If LCase(shSCOTWCGWs.Cells(curRow, 9).value) = "y" Then
                WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).HasTesting = True
            Else
                WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).HasTesting = False
            End If
            If LCase(shSCOTWCGWs.Cells(curRow, 12).value) = "x" Then
                WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).isMainDoc = True
            Else
                WCGWs(curWCGWIndex).Controls(WCGWs(curWCGWIndex).numControls).isMainDoc = False
            End If
        End If
        curRow = curRow + 1
    Loop
                    
    'Risks
    Call LoadRisksToArrays
    
    Exit Sub
    
errHandler:
    MsgBox "An error occurred while loading previous EY Canvas data.  Error: " & str(Err.Number) & " - " & Err.Description
    'Resume Next
    
End Sub

Public Sub LoadRisksToArrays()
'When we load the Canvas data from the APIs, we store them in the document for future use.
'This will load all currently pulled Canvas data from prior load into Arrays for use in Document functions
On Error GoTo errHandler:
    
    Dim tempString As String
    Dim curRow As Integer
    Dim curRiskIndex As Integer
    Dim i As Integer
    Dim j As Integer
    Dim found As Boolean
    
    'load the Risks
    Call CheckForOpenEmbedded
    
    'loop through and write out
    curRow = 2
    numRisks = -1
    ReDim Risks(0) As RisksInfo
    Do While shRisks.Cells(curRow, 1).value <> ""
        
        found = False
        curRiskIndex = -1
        For i = 0 To numRisks
            If Risks(i).id = shRisks.Cells(curRow, 1).value Then
                found = True
                curRiskIndex = i
                Exit For
            End If
        Next i
        If Not found Then
            numRisks = numRisks + 1
            ReDim Preserve Risks(numRisks) As RisksInfo
            Risks(numRisks).id = shRisks.Cells(curRow, 1).value
            Risks(numRisks).name = shRisks.Cells(curRow, 2).value
            Risks(numRisks).TypeID = shRisks.Cells(curRow, 3).value
            Risks(numRisks).numControls = -1
            curRiskIndex = numRisks
        End If
        
        Risks(curRiskIndex).numControls = Risks(curRiskIndex).numControls + 1
        ReDim Preserve Risks(curRiskIndex).Controls(Risks(curRiskIndex).numControls) As ControlRiskType
        Risks(curRiskIndex).Controls(Risks(curRiskIndex).numControls).id = shRisks.Cells(curRow, 4).value
        Risks(curRiskIndex).Controls(Risks(curRiskIndex).numControls).name = shRisks.Cells(curRow, 5).value
        If LCase(shRisks.Cells(curRow, 7).value) = "x" Then
            Risks(curRiskIndex).Controls(Risks(curRiskIndex).numControls).isAssoc = True
        Else
            Risks(curRiskIndex).Controls(Risks(curRiskIndex).numControls).isAssoc = False
        End If
       curRow = curRow + 1
    Loop
                    
    Exit Sub
    
errHandler:
    MsgBox "An error occurred while loading previous EY Canvas data.  Error: " & str(Err.Number) & " - " & Err.Description
    'Resume Next
    
End Sub

Public Sub DisplayProfile()
'Shows the Profile data on the Main Scoping sheet
On Error GoTo errHandler

    'get the data from canvas
    If Profile.ClientName <> "" Then
        docSCOTWT.Bookmarks("MyEntity").Range.Text = Profile.ClientName
    End If
    If Profile.EngagementName <> "" Then
        docSCOTWT.Bookmarks("MyEngagement").Range.Text = Profile.EngagementName
    End If
    If Profile.Period <> "" Then
        docSCOTWT.Bookmarks("MyFSDate").Range.Text = Format(Profile.Period, "Short Date")
    End If
    
    'show/hide questions pertinent to this profile
    If Profile.IntegratedAudit = False And ((Profile.ChosenSCOTType = 1 Or Profile.ChosenSCOTType2 = 1) And Profile.PrelimAudit = 1) Then
        'show rotation checkbox
        If docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden = False Then
            docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = False
        End If
    Else
        'hide rotation checkbox
        docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = True
    End If
    
    If Profile.PCAOB Or Profile.PCAOBIA Then
        docSCOTWT.Bookmarks("RelatedPartyRow").Range.Font.Hidden = True
    Else
        If docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden = False Then
            docSCOTWT.Bookmarks("RelatedPartyRow").Range.Font.Hidden = False
        End If
    End If
    
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Function LoadAllData() As Boolean
'This is where all the specific Canvas data is loaded
On Error GoTo errHandler

    'Pull all other data
    If Not GetWCGWs Then GoTo thisExit
    'If Not GetRisks Then GoTo thisExit
    LoadAllData = True
    Exit Function
    
thisExit:
    LoadAllData = False
    Exit Function
    
errHandler:
    LoadAllData = False

End Function

Public Sub ShowSigRisks()

    Dim tbl As Word.Table
    Dim curRow As Integer
    Dim i As Integer
    Dim allRisks As String
    Dim allWCGWs As String

    Call TurnOffTrackChanges
    'fill in the objects
    'OK, now loop through all risks and write out to form.
    If docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("SigRisks").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ShowRisks").Range.Font.Hidden = True
        docSCOTWT.Bookmarks("HideRisks").Range.Font.Hidden = False
    End If
    
    docSCOTWT.Bookmarks("SigRisks").Range.Select
    Selection.Collapse wdCollapseStart
    Call UpdateBookmark("SigRisks", vbCrLf + vbCrLf)
    docSCOTWT.Bookmarks("SigRisks").Select
    Selection.Collapse wdCollapseStart
    Selection.MoveDown wdLine, 1
    
    If numRisks < 0 Then
        'no risks
        Selection.Range.Text = "      " & Translate("NoRisksFound", ChosenLanguage)
    Else
        Set tbl = docSCOTWT.Tables.add(Selection.Range, (numRisks + 1) * 4, 3)
        
        'format table
        With tbl.Range.ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .RightIndent = InchesToPoints(0)
            .SpaceBefore = 0
            .SpaceBeforeAuto = False
            .SpaceAfter = 0
            .SpaceAfterAuto = False
            .LineSpacingRule = wdLineSpaceSingle
            .Alignment = wdAlignParagraphLeft
            .WidowControl = True
            .KeepWithNext = False
            .KeepTogether = False
            .PageBreakBefore = False
            .NoLineNumber = False
            .Hyphenation = True
            .FirstLineIndent = InchesToPoints(0)
            .OutlineLevel = wdOutlineLevelBodyText
            .CharacterUnitLeftIndent = 0.1
            .CharacterUnitRightIndent = 0.1
            .CharacterUnitFirstLineIndent = 0
            .LineUnitBefore = 0.1
            .LineUnitAfter = 0.1
            .MirrorIndents = False
            .TextboxTightWrap = wdTightNone
        End With
        With tbl
            .AllowAutoFit = False
            .Rows.SetLeftIndent LeftIndent:=32, RulerStyle:=wdAdjustFirstColumn
            .Title = "SigRisksImported"
            .Borders.OutsideLineStyle = wdLineStyleSingle
            .Borders.InsideLineStyle = wdLineStyleSingle
            .Rows.AllowBreakAcrossPages = True
        End With
        
        curRow = 1
        allRisks = ""
        allWCGWs = ""
        Dim myRange As Range
        For i = 0 To numRisks
            'for each risk
            With tbl
                docSCOTWT.Range(.Cell(curRow + 1, 2).Range.Start, .Cell(curRow + 1, 3).Range.End).Select
                Selection.Cells.merge
                docSCOTWT.Range(.Cell(curRow + 2, 2).Range.Start, .Cell(curRow + 2, 3).Range.End).Select
                Selection.Cells.merge
                docSCOTWT.Range(.Cell(curRow + 3, 2).Range.Start, .Cell(curRow + 3, 3).Range.End).Select
                Selection.Cells.merge
                .Cell(curRow, 1).Range.Font.ColorIndex = wdBlack
                .Cell(curRow, 1).Range.Font.Bold = True
                .Cell(curRow, 2).Range.Font.ColorIndex = wdBlack
                .Cell(curRow, 2).Range.Font.Bold = True
                .Cell(curRow, 3).Range.Font.Bold = False
                .Cell(curRow, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
                .Cell(curRow, 2).Borders(wdBorderRight).LineStyle = wdLineStyleNone
                
                .Cell(curRow + 1, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
                .Cell(curRow + 1, 2).Range.Font.Bold = False
                
                .Cell(curRow + 2, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
                .Cell(curRow + 2, 2).Range.Font.ColorIndex = wdBlack
                .Cell(curRow + 2, 2).Range.Font.Bold = True
                
                .Cell(curRow + 3, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
                .Cell(curRow + 3, 2).Range.Font.Bold = False
                
                .Cell(curRow, 1).Width = "30"
                .Cell(curRow, 2).Width = "130"
                .Cell(curRow, 3).Width = "355"
                
                .Cell(curRow + 1, 1).Width = "30"
                .Cell(curRow + 1, 2).Width = "485"
                
                .Cell(curRow + 2, 1).Width = "60"
                .Cell(curRow + 2, 2).Width = "455"
                
                .Cell(curRow + 3, 1).Width = "60"
                .Cell(curRow + 3, 2).Width = "455"
                
                .Rows(curRow).Range.Cells.Shading.BackgroundPatternColor = RGB(230, 230, 230)
                .Rows(curRow + 1).Range.Cells.Shading.BackgroundPatternColor = RGB(218, 238, 243) 'canvas blue
                .Rows(curRow + 2).Range.Cells.Shading.BackgroundPatternColor = RGB(230, 230, 230)
            End With
            tbl.Cell(curRow, 1).Range.Text = Trim(str(i + 1)) + "."
            tbl.Cell(curRow, 2).Range.Text = Translate("SignificantRisks", ChosenLanguage)
            tbl.Cell(curRow, 2).Range.Bookmarks.add "SignficantRiskTitle" + Trim(str(i + 1))
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("AssociateRiskMain").Range.Copy
            tbl.Cell(curRow, 3).Range.Paste
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            tbl.Cell(curRow, 3).Range.Bookmarks.add "AssociateRisk" + Trim(str(i + 1))
            
            tbl.Cell(curRow + 1, 2).Range.Text = Risks(i).TypeID + " - " + Risks(i).name
            tbl.Cell(curRow + 1, 2).Range.Bookmarks.add "SignficantRiskName" + Trim(str(i + 1))
            
            tbl.Cell(curRow + 2, 2).Range.Text = Translate("RelatedWCGWs", ChosenLanguage)
            tbl.Cell(curRow + 2, 2).Range.Bookmarks.add "SignficantRiskCtrlsTitle" + Trim(str(i + 1))
            
            tbl.Cell(curRow + 3, 2).Range.Bookmarks.add "SignficantRiskAssocCtrls" + Trim(str(i + 1))
            curRow = curRow + 4
        Next i
    End If
    Call ResetTrackChangesValues

End Sub

Public Sub RefreshSCOT()
On Error GoTo errHandler

    Dim i As Integer
    Dim thisHidden As Boolean
    Dim holdType1 As String
    Dim holdType2 As String
    
    Call CheckForOpenEmbedded
    Call TurnOffTrackChanges
    If Profile.EngagementID = "" Then
        Call LoadProfile
    End If
    
    For i = 0 To numSCOTs
        If Trim(SCOTs(i).id) = Trim(Profile.SCOTID) Then
            shFormData.Range("SCOTID").value = SCOTs(i).id
            shFormData.Range("SCOTType").value = SCOTs(i).TypeID
            shFormData.Range("SCOTType2").value = SCOTs(i).TypeID2
            shFormData.Range("PrelimAudit").value = SCOTs(i).StrategyID
            thisHidden = docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden
            If thisHidden = True Then
                docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden = False
            End If
            docSCOTWT.Bookmarks("RelatedITApps").Range.Text = SCOTs(i).Appls
            Call SaveEmbedded
            
            Profile.SCOTID = SCOTs(i).id
            Profile.ChosenSCOTType = SCOTs(i).TypeID
            Profile.ChosenSCOTType2 = SCOTs(i).TypeID2
            Profile.PrelimAudit = SCOTs(i).StrategyID
            
            'write out the other stuff
            If SCOTs(i).TypeID = 1 Then
                holdType1 = Translate("Routine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID = 2 Then
                holdType1 = Translate("NonRoutine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID = 3 Then
                holdType1 = Translate("Estimation", ChosenLanguage)
            End If
            If SCOTs(i).TypeID2 = 1 Then
                holdType2 = Translate("Routine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID2 = 2 Then
                holdType2 = Translate("NonRoutine", ChosenLanguage)
            ElseIf SCOTs(i).TypeID2 = 3 Then
                holdType2 = Translate("Estimation", ChosenLanguage)
            End If
            Call UpdateBookmarkGrid("TypeOfSCOT", holdType1 + IIf(holdType2 <> "", ", " + holdType2, ""))
            Call UpdateBookmark("ImportedScotName", SCOTs(i).name)
            Call UpdateBookmark("ImportedScotName2", SCOTs(i).name)
            
            SelectedSCOT = SCOTs(i).name
            
            If SCOTs(i).StrategyID = 1 Then
                holdType1 = Translate("RibbonControls", ChosenLanguage)
            ElseIf SCOTs(i).StrategyID = 2 Then
                holdType1 = Translate("Substantive", ChosenLanguage)
            End If
            docSCOTWT.Bookmarks("AuditStrategyCell").Range.Text = holdType1
            Selection.Collapse wdCollapseStart
            If thisHidden = True Then
                docSCOTWT.Bookmarks("ScotChars").Range.Font.Hidden = True
            End If
            Exit For
        End If
    Next i
    Call ResetTrackChangesValues
    Exit Sub

errHandler:
    Resume Next

End Sub
Attribute VB_Name = "modCanvasResource"
Option Explicit
Option Private Module

Public Sub Test()
  Const URL$ = "https://atfdevv1-us.eydev.net/v2/Common/JS/Resources/en-us.js"
  Dim txt As String, i As Long
  
  With CreateObject("MSXML2.XMLHTTP")
    .Open "GET", URL, False
    .Send
    txt = .ResponseText
  End With

End Sub
Attribute VB_Name = "modCanvasSCOTWCGWs"
Option Explicit
Option Private Module
'this module is for pulling the SCOTs WCGWs and their Assertions and Risks information

'WCGW details
Public Type ControlType
    id As String
    name As String
    TypeID As Integer
    FreqID As Integer
    HasTesting As Boolean
    IsEffective As Boolean
    isApplication As Boolean
    Appls() As String
    numAppl As Integer
    isAssoc As Boolean
    isMainDoc As Boolean
End Type

Public Type ControlRiskType
    id As String
    name As String
    isAssoc As Boolean
End Type

'Assertion Details
Public Type AssertionInfo
    id As String
    name As String
    Abbrev As String
End Type

Public Type AccountInfo
    id As String
    name As String
    Assertions() As AssertionInfo
    numAssertions As Integer
End Type

Public Type RiskWCGWInfo
    id As String
    name As String
End Type

Public Type WCGWInfo
    id As String
    name As String
    RelatedAsserts As String
    Controls() As ControlType
    numControls As Integer
    Accts() As AccountInfo
    numAccts As Integer
    isPlaced As Boolean
End Type

'Risks details
Public Type RisksInfo
    id As String
    name As String
    TypeID As String
    Controls() As ControlRiskType
    numControls As Integer
End Type

Public Type AssertWCGWPairType
    AccountID As String
    AccountName As String
    AssertID As String
    Assertion As String
    Abbrev As String
    wcgwID As String
    WCGW As String
End Type

Public Type AssertRiskPairType
    AccountID As String
    AccountName As String
    AssertID As String
    Assertion As String
    Abbrev As String
    RiskID As String
    RiskName As String
    RiskTypeID As String
End Type

Public Risks() As RisksInfo
Public numRisks As Integer
Public WCGWs() As WCGWInfo
Public NumWCGWs As Integer

Public Pairs() As AssertWCGWPairType
Public numPairs As Integer
Public Pairs2() As AssertRiskPairType
Public numPairs2 As Integer

Public Type RiskType
    id As String
    name As String
End Type

'Canvas constants
Public Const CanvasRiskTypeSR = 1  'Significant Risk
Public Const CanvasRiskTypeFR = 2  'Fraud Risk
Public Const CanvasRiskTypeIR = 3  'Inherent Risk

Public Function WCGWsRequest() As RestRequest
'sets up the API call to be made

    Set WCGWsRequest = New RestRequest
    
    If Profile.EngagementID = "" Then
        Call LoadProfile
    End If
    'set the specific API to call
    WCGWsRequest.Resource = SCOTsWCGWsURL + Profile.SCOTID
    
    ' Add parameters to the request header
    WCGWsRequest.AddHeader "engagementid", Profile.EngagementID
    WCGWsRequest.AddHeader "datasource", dataSource
   
    ' call the Get method
    WCGWsRequest.Method = httpGET

End Function

Public Function GetWCGWs() As Boolean
'This pulls a list of Accounts and Assertions for a chosen Enagagement
On Error GoTo errHandler

    Dim myResponse As RestResponse
    Set myResponse = EngagementClient.Execute(WCGWsRequest())
    GetWCGWs = OutputWCGWs(myResponse)
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas WCGWs.  Error: " & str(Err.Number) & " - " & Err.Description
    GetWCGWs = False

End Function

Public Function OutputWCGWs(response As RestResponse) As Boolean
On Error GoTo errHandler
    
    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        Dim i As Integer
        Dim j As Integer
        Dim curRow As Integer
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        
        'for testing, writes out the full JSON response
        'Call ShowAllJSONData(job, 5, 1)
        
        If Not GetJSonWCGWs(job) Then GoTo thisExit
        
        If Not GetRisks Then GoTo thisExit
        
        
        'clear out current accounts
'        If shScoping.Range("CanvasLoadedDate").value = "" Then
'            'intial load
'            Set thisSheet = cdSCOTWCGWs
'        Else
'            'refresh
'            Set thisSheet = cdSCOTWCGWsComp
'        End If
'
'        thisSheet.Range("A2:F50000").ClearContents
'        'Load new data
'        curRow = 2
'        For i = 0 To UBound(Accounts)
'            For j = 0 To Accounts(i).numAssertions
'                thisSheet.Cells(curRow, 1) = Accounts(i).AcctID
'                thisSheet.Cells(curRow, 2) = Accounts(i).AcctName
'                thisSheet.Cells(curRow, 3) = Accounts(i).Assertions(j).Id
'                thisSheet.Cells(curRow, 4) = Accounts(i).Assertions(j).Name
'                thisSheet.Cells(curRow, 5) = Accounts(i).Assertions(j).Abbrev
'                thisSheet.Cells(curRow, 6) = Accounts(i).Assertions(j).CRAValue
'                thisSheet.Cells(curRow, 7) = Accounts(i).AcctID + "|" + Accounts(i).Assertions(j).Id
'                curRow = curRow + 1
'            Next j
'        Next i
        OutputWCGWs = True
    Else
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas Accounts.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        OutputWCGWs = False
    End If
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas WCGWs.  Error: " & str(Err.Number) & " - " & Err.Description
    OutputWCGWs = False
End Function

Public Function GetJSonWCGWs(job As cJobject) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim FoundValue() As String
    Dim numFound As Integer
    
    'find info
    NumWCGWs = -1
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("scotwcgw")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'get engagements for this client
                    NumWCGWs = NumWCGWs + 1
                    ReDim Preserve WCGWs(NumWCGWs) As WCGWInfo
                    WCGWs(NumWCGWs).id = GetJSonValue(jom, "wcgwid")
                    WCGWs(NumWCGWs).name = GetJSonValue(jom, "wcgwname")
                    WCGWs(NumWCGWs).RelatedAsserts = ""
                    WCGWs(NumWCGWs).numControls = -1
                    WCGWs(NumWCGWs).numAccts = -1
                    WCGWs(NumWCGWs).isPlaced = False
                    If Not GetJSonWCGWControls(jom, NumWCGWs) Then GoTo thisExit
                Next jom
            End If
        End If
    End If
    GetJSonWCGWs = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas WCGWs.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonWCGWs = False

End Function

Public Function GetJSonWCGWControls(job As cJobject, thisWCGWIndex As Integer) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempValue As String
    Dim tempValue2 As String
    Dim i As Integer
    Dim joCtl As cJobject
    Dim jobCtl As cJobject
    Dim myResponse As RestResponse
    Dim sWireCtl As String
    Dim holdID As String
    Dim HoldName As String
    
    'find info
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("controls")
   
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    holdID = GetJSonValue(jom, "id")
                    HoldName = GetJSonValue(jom, "controlname")
                
                    Set myResponse = EngagementClient.Execute(WCGWControlsRequest(holdID))
                    If myResponse.statusCode = Ok Then
                        Set joCtl = New cJobject
                        sWireCtl = myResponse.content
                        
                        Set jobCtl = joCtl.deSerialize(sWireCtl) 'parse it into a jSON object
                        
                        If Not GetJSonWCGWControlDetails(jobCtl, thisWCGWIndex, holdID, HoldName) Then GoTo thisExit
                    End If
                
                Next jom
            End If
        End If
    End If
    GetJSonWCGWControls = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas risks data.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonWCGWControls = False
    
End Function

Public Function WCGWControlsRequest(thisControlID As String) As RestRequest
'sets up the API call to be made

    Set WCGWControlsRequest = New RestRequest
    
    'set the specific API to call
    WCGWControlsRequest.Resource = SCOTsControlURL + thisControlID
    
    ' Add parameters to the request header
    WCGWControlsRequest.AddHeader "engagementid", Profile.EngagementID
    WCGWControlsRequest.AddHeader "datasource", dataSource
    
    ' call the Get method
    WCGWControlsRequest.Method = httpGET

End Function

Public Function GetJSonWCGWControlDetails(job As cJobject, thisWCGWIndex As Integer, thisControlID As String, thisControlName As String) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempValue As String
    Dim tempValue2 As String
    Dim i As Integer
    
    'find info
    'The find method searches all nodes in the jSON object for the passed in key value
    'only add controls that are tested
    'If LCase(GetJSonValue(job, "hascontroltesting")) = "true" Then
        WCGWs(thisWCGWIndex).numControls = WCGWs(thisWCGWIndex).numControls + 1
        ReDim Preserve WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls) As ControlType
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).id = thisControlID
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).name = thisControlName
        Select Case GetJSonValue(job, "controltypeid")
            Case "0"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).TypeID = 0
            Case "1"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).TypeID = 1
            Case "2"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).TypeID = 2
            Case "3"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).TypeID = 3
            Case "4"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).TypeID = 4
            Case Else
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).TypeID = 0
        End Select
        Select Case GetJSonValue(job, "frequencytypeid")
            Case "0", "7"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 0
            Case "1"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 1
            Case "2"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 2
            Case "3"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 3
            Case "4"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 4
            Case "5"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 5
            Case "6"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 6
            Case "8"
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 8
            Case Else
                WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).FreqID = 0
        End Select
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).HasTesting = IIf(LCase(GetJSonValue(job, "hascontroltesting")) = LCase(CStr(True)), True, False)
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).IsEffective = IIf(LCase(GetJSonValue(job, "iseffective")) = LCase(CStr(True)), True, False)
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).isApplication = IIf(GetJSonValue(job, "controltypeid") = "1", True, False)
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).isMainDoc = False
        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).numAppl = -1
         
        Set jo = job.find("controlitapplications")
        i = -1
        ' if jo is nothing then key was not found in object
        If Not jo Is Nothing Then
            If jo.isArrayRoot Then
                If jo.hasChildren Then
                    For Each jom In jo.children
                        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).numAppl = WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).numAppl + 1
                        i = WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).numAppl
                        ReDim Preserve WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).Appls(i) As String
                        WCGWs(thisWCGWIndex).Controls(WCGWs(thisWCGWIndex).numControls).Appls(i) = GetJSonValue(jom, "itapplicationname")
                    Next jom
                End If
            End If
        End If
    'End If
    GetJSonWCGWControlDetails = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas risks data.  Error: " & str(Err.Number) & " - " & Err.Description
    GetJSonWCGWControlDetails = False
    
End Function

'#################
'Risks and WCGWs

Public Function RisksRequest() As RestRequest
'sets up the API call to be made

    Set RisksRequest = New RestRequest
    
    'set the specific API to call
    RisksRequest.Resource = CRASummaryURL
    
    ' Add parameters to the request header
    RisksRequest.AddHeader "engagementid", Profile.EngagementID
    RisksRequest.AddHeader "datasource", dataSource
   
    ' call the Get method
    RisksRequest.Method = httpGET

End Function

Public Function GetRisks() As Boolean
'This pulls a list of Risks for a chosen Enagagement
On Error GoTo errHandler

    Dim myResponse As RestResponse
    Dim i As Integer
    
    Set myResponse = EngagementClient.Execute(RisksRequest)
    GetRisks = OutputRisks(myResponse)
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas Risks.  Error: " & str(Err.Number) & " - " & Err.Description
    GetRisks = False
    
End Function

Public Function OutputRisks(response As RestResponse) As Boolean
On Error GoTo errHandler
    
    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim curRow As Integer
        Dim curRowWCGW As Integer
        Dim m As Integer
        Dim n As Integer
        Dim p As Integer
        Dim q As Integer
        Dim foundAcct As Boolean
        Dim FoundIt As Boolean
        Dim FoundIt2 As Boolean
        Dim tempValue As String
        Dim tempValue2 As String
        Dim tempValue3 As String
        Dim tempString As String
        Dim thisAcct As Integer
        Dim thisSheet As Object 'Worksheet
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        
        'for testing, writes out the full JSON response
        'Call ShowAllJSONData(job, 5, 1)
        
        'get the pairs
        If Not GetJSonRisks(job) Then GoTo thisExit
        
        'link WCGWs with accounts & assertions
        For i = 0 To NumWCGWs
            For j = 0 To numPairs
                If Pairs(j).wcgwID = WCGWs(i).id Then
                    'add account
                    foundAcct = False
                    thisAcct = -1
                    For k = 0 To WCGWs(i).numAccts
                        If WCGWs(i).Accts(k).id = Pairs(j).AccountID Then
                            thisAcct = k
                            foundAcct = True
                            Exit For
                        End If
                    Next k
                    If Not foundAcct Then
                        WCGWs(i).numAccts = WCGWs(i).numAccts + 1
                        ReDim Preserve WCGWs(i).Accts(WCGWs(i).numAccts)
                        WCGWs(i).Accts(WCGWs(i).numAccts).id = Pairs(j).AccountID
                        WCGWs(i).Accts(WCGWs(i).numAccts).name = Pairs(j).AccountName
                        WCGWs(i).Accts(WCGWs(i).numAccts).numAssertions = -1
                        thisAcct = WCGWs(i).numAccts
                    End If
                    'add this assert
                    WCGWs(i).Accts(thisAcct).numAssertions = WCGWs(i).Accts(thisAcct).numAssertions + 1
                    ReDim Preserve WCGWs(i).Accts(thisAcct).Assertions(WCGWs(i).Accts(thisAcct).numAssertions)
                    WCGWs(i).Accts(thisAcct).Assertions(WCGWs(i).Accts(thisAcct).numAssertions).id = Pairs(j).AssertID
                    WCGWs(i).Accts(thisAcct).Assertions(WCGWs(i).Accts(thisAcct).numAssertions).Abbrev = Pairs(j).Abbrev
                End If
            Next j
        Next i
        For i = 0 To NumWCGWs
            For j = 0 To WCGWs(i).numAccts
                tempValue = ""
                For k = 0 To WCGWs(i).Accts(j).numAssertions
                    If tempValue <> "" Then
                        tempValue = tempValue + ", "
                    End If
                    tempValue = tempValue + WCGWs(i).Accts(j).Assertions(k).Abbrev
                Next k
                tempValue = WCGWs(i).Accts(j).name + " (" + tempValue + ")"
                If WCGWs(i).RelatedAsserts <> "" Then
                    WCGWs(i).RelatedAsserts = WCGWs(i).RelatedAsserts + ", "
                End If
                WCGWs(i).RelatedAsserts = WCGWs(i).RelatedAsserts + tempValue
            Next j
        Next i
        tempValue = ""
        
        'Reloop through to arrange by Risk to get WCGWs controls
        numRisks = -1
        For i = 0 To NumWCGWs
            'for each WCGW, look through its assertions and see if there are any related risks
            For j = 0 To WCGWs(i).numAccts
                tempValue3 = WCGWs(i).Accts(j).id
                For p = 0 To WCGWs(i).Accts(j).numAssertions
                    tempValue = WCGWs(i).Accts(j).Assertions(p).id
                    For k = 0 To numPairs2
                        If Pairs2(k).AssertID = tempValue And Pairs2(k).AccountID = tempValue3 Then
                            'we have found a risk, add it if needed
                            FoundIt = False
                            tempValue2 = Pairs2(k).RiskID
                            For m = 0 To numRisks
                                If Risks(m).id = tempValue2 Then
                                    FoundIt = True
                                    'found risk, see if this WCGW is there, if not add it
                                    'now loop through the WCGW controls and add any not already in there
                                    For q = 0 To WCGWs(i).numControls
                                        FoundIt2 = False
                                        For n = 0 To Risks(m).numControls
                                            If Risks(m).Controls(n).id = WCGWs(i).Controls(q).id Then
                                                FoundIt2 = True
                                                Exit For
                                            End If
                                        Next n
                                        If Not FoundIt2 Then
                                            'need to add this WCGW control to this risk
                                            Risks(m).numControls = Risks(m).numControls + 1
                                            ReDim Preserve Risks(m).Controls(Risks(m).numControls) As ControlRiskType
                                            Risks(m).Controls(Risks(m).numControls).id = WCGWs(i).Controls(q).id
                                            Risks(m).Controls(Risks(m).numControls).name = WCGWs(i).Controls(q).name
                                            Risks(m).Controls(Risks(m).numControls).isAssoc = False
                                        End If
                                    Next q
                                End If
                            Next m
                            'add risk and WCGW
                            If Not FoundIt Then
                                numRisks = numRisks + 1
                                ReDim Preserve Risks(numRisks) As RisksInfo
                                Risks(numRisks).id = tempValue2
                                Risks(numRisks).name = Pairs2(k).RiskName
                                Risks(numRisks).TypeID = Pairs2(k).RiskTypeID
                                Risks(numRisks).numControls = -1
                                'now loop through the WCGW controls and add any not already in there
                                For q = 0 To WCGWs(i).numControls
                                    FoundIt2 = False
                                    For n = 0 To Risks(numRisks).numControls
                                        If Risks(numRisks).Controls(n).id = WCGWs(i).Controls(q).id Then
                                            FoundIt2 = True
                                            Exit For
                                        End If
                                    Next n
                                    If Not FoundIt2 Then
                                        'need to add this WCGW control to this risk
                                        Risks(numRisks).numControls = Risks(numRisks).numControls + 1
                                        ReDim Preserve Risks(numRisks).Controls(Risks(numRisks).numControls) As ControlRiskType
                                        Risks(numRisks).Controls(Risks(numRisks).numControls).id = WCGWs(i).Controls(q).id
                                        Risks(numRisks).Controls(Risks(numRisks).numControls).name = WCGWs(i).Controls(q).name
                                        Risks(numRisks).Controls(Risks(numRisks).numControls).isAssoc = False
                                    End If
                                Next q
                            End If
                        End If
                    Next k
                Next p
            Next j
        Next i
        
        'Show the Sig Risks on the form
        If CleanBM(docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text) = "" Then
            Call ShowSigRisks
        End If
        
        'write out WCGWs to hidden sheet to save the downloaded data for later
        Call CheckForOpenEmbedded
        
        If CleanBM(docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text) = "" Then
            Set thisSheet = shSCOTWCGWs
        Else
            Set thisSheet = shSCOTWCGWsComp
        End If

        'clear out old data if it exists to be sure
        thisSheet.Range("A2:J100000").clear
        
        'loop through and write out
        curRow = 2
        For i = 0 To NumWCGWs
            If WCGWs(i).numControls = -1 Then
                thisSheet.Cells(curRow, 1).value = WCGWs(i).id
                thisSheet.Cells(curRow, 2).value = WCGWs(i).name
                thisSheet.Cells(curRow, 3).value = WCGWs(i).RelatedAsserts
                thisSheet.Cells(curRow, 10).value = WCGWs(i).id
                curRow = curRow + 1
            Else
                For j = 0 To WCGWs(i).numControls
                    thisSheet.Cells(curRow, 1).value = WCGWs(i).id
                    thisSheet.Cells(curRow, 2).value = WCGWs(i).name
                    thisSheet.Cells(curRow, 3).value = WCGWs(i).RelatedAsserts
                    thisSheet.Cells(curRow, 4).value = WCGWs(i).Controls(j).id
                    thisSheet.Cells(curRow, 5).value = WCGWs(i).Controls(j).name
                    thisSheet.Cells(curRow, 6).value = WCGWs(i).Controls(j).TypeID
                    thisSheet.Cells(curRow, 7).value = WCGWs(i).Controls(j).FreqID
                    thisSheet.Cells(curRow, 8).value = Join(WCGWs(i).Controls(j).Appls, "|")
                    thisSheet.Cells(curRow, 9).value = IIf(WCGWs(i).Controls(j).HasTesting, "Y", "N")
                    thisSheet.Cells(curRow, 10).value = WCGWs(i).id + "|" + WCGWs(i).Controls(j).id
                    curRow = curRow + 1
                Next j
            End If
        Next i
        'clear out old data if it exists to be sure
        If CleanBM(docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text) = "" Then
            Set thisSheet = shRisks
        Else
            Set thisSheet = shRisksComp
        End If

        thisSheet.Range("A2:F100000").clear
        
        'loop through and write out
        curRow = 2
        For i = 0 To numRisks
            For j = 0 To Risks(i).numControls
                thisSheet.Cells(curRow, 1).value = Risks(i).id
                thisSheet.Cells(curRow, 2).value = Risks(i).name
                thisSheet.Cells(curRow, 3).value = Risks(i).TypeID
                thisSheet.Cells(curRow, 4).value = Risks(i).Controls(j).id
                thisSheet.Cells(curRow, 5).value = Risks(i).Controls(j).name
                thisSheet.Cells(curRow, 6).value = Risks(i).id + "|" + Risks(i).Controls(j).id
                curRow = curRow + 1
            Next j
        Next i
        Call SaveEmbedded
        
        OutputRisks = True
    Else
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas risk data.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        OutputRisks = False
    End If
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas risk data.  Error: " & str(Err.Number) & " - " & Err.Description
    Resume Next
    OutputRisks = False
    
End Function

Public Function GetJSonRisks(job As cJobject) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempValue As String
    Dim tempValue2 As String
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("accounts")
    numPairs = -1
    numPairs2 = -1
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'find this risks on all accounts
                    tempValue = GetJSonValue(jom, "id")
                    tempValue2 = GetJSonValue(jom, "accountname")
                    'loop through the asssertions for this account to pull those risks & wcgws
                    If Not GetJSonAssertRisks(jom, tempValue, tempValue2) Then GoTo thisExit
                Next jom
            End If
        End If
    End If
    GetJSonRisks = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas Risks data.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonRisks = False
    
End Function


Public Function GetJSonAssertRisks(job As cJobject, thisAcctID As String, thisAcctName As String) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempValue As String
    Dim tempValue2 As String
    Dim tempValue3 As String
    Dim i As Integer
    
    'find info
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("assertions")
   
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'find this risks on all assettions
                    tempValue = GetJSonValue(jom, "id")
                    tempValue2 = GetJSonValue(jom, "assertionname")
                    tempValue3 = GetJSonValue(jom, "abbreviation")
                    If Not GetJSonAssertWCGWsEach(jom, tempValue, tempValue2, tempValue3, thisAcctID, thisAcctName) Then GoTo thisExit
                    'Pull the Risks for this account
                    If Not GetJSonAssertRisksEach(jom, tempValue, tempValue2, tempValue3, thisAcctID, thisAcctName) Then GoTo thisExit
                Next jom
            End If
        End If
    End If
    GetJSonAssertRisks = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas risks data.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonAssertRisks = False
    
End Function

Public Function GetJSonAssertRisksEach(job As cJobject, thisAssertID As String, thisAssertName As String, thisAbbrev As String, thisAcctID As String, thisAcctName As String) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempValue As String
    Dim tempValue2 As String
    Dim tempValue3 As String
    Dim FoundIt As Boolean
    Dim i As Integer
    
    'find info
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("assertionrisks")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'see if we already have this risk
                    FoundIt = False
                    tempValue = GetJSonValue(jom, "id")
                    tempValue2 = GetJSonValue(jom, "riskname")
                    tempValue3 = GetJSonValue(jom, "risktypeabbreviation")
                    'only get SR and FR
                    If tempValue3 <> "IR" Then
                        For i = 0 To numPairs2
                            If Pairs2(i).AccountID = thisAcctID And Pairs2(i).AssertID = thisAssertID And Pairs2(i).RiskID = tempValue Then
                                FoundIt = True
                                Exit For
                            End If
                        Next i
                        'Only add unique ones
                        If Not FoundIt Then
                            numPairs2 = numPairs2 + 1
                            ReDim Preserve Pairs2(numPairs2) As AssertRiskPairType
                            Pairs2(numPairs2).AccountID = thisAcctID
                            Pairs2(numPairs2).AccountName = thisAcctName
                            Pairs2(numPairs2).AssertID = thisAssertID
                            Pairs2(numPairs2).Assertion = thisAssertName
                            Pairs2(numPairs2).Abbrev = thisAbbrev
                            Pairs2(numPairs2).RiskID = tempValue
                            Pairs2(numPairs2).RiskName = tempValue2
                            Pairs2(numPairs2).RiskTypeID = tempValue3
                        End If
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonAssertRisksEach = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas risks data.  Error: " & str(Err.Number) & " - " & Err.Description
    GetJSonAssertRisksEach = False
    'Resume Next

End Function

Public Function GetJSonAssertWCGWsEach(job As cJobject, thisAssertID As String, thisAssertName As String, thisAbbrev As String, thisAcctID As String, thisAcctName As String) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempValue As String
    Dim tempValue2 As String
    Dim FoundIt As Boolean
    Dim i As Integer
    Dim thisRange As Range
    
    'find info
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("assertionwcgws")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'see if we already have this risk
                    FoundIt = False
                    tempValue = GetJSonValue(jom, "id")
                    For i = 0 To numPairs
                        If Pairs(i).AccountID = thisAcctID And Pairs(i).AssertID = thisAssertID And Pairs(i).wcgwID = tempValue Then
                            FoundIt = True
                            Exit For
                        End If
                    Next i
                    'Only add unique ones
                    If Not FoundIt Then
                        numPairs = numPairs + 1
                        ReDim Preserve Pairs(numPairs) As AssertWCGWPairType
                        Pairs(numPairs).AccountID = thisAcctID
                        Pairs(numPairs).AccountName = thisAcctName
                        Pairs(numPairs).AssertID = thisAssertID
                        Pairs(numPairs).Assertion = thisAssertName
                        Pairs(numPairs).Abbrev = thisAbbrev
                        Pairs(numPairs).wcgwID = tempValue
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonAssertWCGWsEach = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas WCGW data.  Error: " & str(Err.Number) & " - " & Err.Description
    GetJSonAssertWCGWsEach = False
    'Resume Next

End Function



Attribute VB_Name = "modCanvasSCOTs"
Option Explicit
Option Private Module
'this module is for pulling the Chsoen enagagement SCOTs

Public Type SCOTType
    id As String
    name As String
    TypeID As Integer
    TypeID2 As Integer
    StrategyID As Integer
    Appls As String
End Type

Public SCOTs() As SCOTType
Public numSCOTs As Integer

'Canvas constants
Public Const CanvasSCOTTypeRO = "1"  'Routine
Public Const CanvasSCOTTypeNR = "2"  'Non-Routine
Public Const CanvasSCOTTypeES = "3"  'Estimation
Public Const CanvasSCOTStrategyTypeCN = "1"  'Controls  -RibbonControls
Public Const CanvasSCOTStrategyTypeSU = "2"  'Substantive

Public Function SCOTsRequest() As RestRequest
'sets up the API call to be made

    Set SCOTsRequest = New RestRequest
    
    'set the specific API to call
    SCOTsRequest.Resource = SCOTsURL
    
    If Profile.EngagementID = "" Then
        Call LoadProfile
    End If
    
    ' Add parameters to the request header
    SCOTsRequest.AddHeader "engagementid", Profile.EngagementID
    SCOTsRequest.AddHeader "datasource", dataSource
   
    ' call the Get method
    SCOTsRequest.Method = httpGET

End Function

Public Function GetSCOTs() As Boolean
'This pulls a list of Risks for a chosen Enagagement
On Error GoTo errHandler

    Dim myResponse As RestResponse
    Dim i As Integer
    
    numSCOTs = -1
    Set myResponse = EngagementClient.Execute(SCOTsRequest)
    GetSCOTs = OutputSCOTs(myResponse)
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas SCOTs.  Error: " & str(Err.Number) & " - " & Err.Description
    GetSCOTs = False
    
End Function

Public Function OutputSCOTs(response As RestResponse) As Boolean
On Error GoTo errHandler
    
    If response.statusCode = Ok Then
        Dim jo As cJobject
        Dim job As cJobject
        Dim sWire As String
        
        Set jo = New cJobject
        sWire = response.content
        
        Set job = jo.deSerialize(sWire) 'parse it into a jSON object
        
        If Not GetJSonSCOTs(job) Then GoTo thisExit
        
        OutputSCOTs = True
    Else
        Dim thisErrorMessage As String
        thisErrorMessage = MakePrettyError(response.statusCode)
        If thisErrorMessage = "" Then
            MsgBox "An error occurred while getting EY Canvas SCOT data.  Error: " & str(response.statusCode)
        Else
            MsgBox thisErrorMessage + "  Error: " & str(response.statusCode)
        End If
thisExit:
        OutputSCOTs = False
    End If
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas SCOT data.  Error: " & str(Err.Number) & " - " & Err.Description
    Resume Next
    OutputSCOTs = False
    
End Function

Public Function GetJSonSCOTs(job As cJobject) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("scotcollections")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'Pull the SCOTs
                    numSCOTs = numSCOTs + 1
                    ReDim Preserve SCOTs(numSCOTs) As SCOTType
                    SCOTs(numSCOTs).id = GetJSonValue(jom, "id")
                    SCOTs(numSCOTs).name = GetJSonValue(jom, "scot_scotname")
                    If GetJSonValue(jom, "scot_stratergytypeid") = "1" Then
                        SCOTs(numSCOTs).StrategyID = 1
                    ElseIf GetJSonValue(jom, "scot_stratergytypeid") = "2" Then
                        SCOTs(numSCOTs).StrategyID = 2
                    End If
                    Call GetJSonSCOTTypes(jom, numSCOTs)
                    If (SCOTs(numSCOTs).TypeID = 3 And (SCOTs(numSCOTs).TypeID2 <> 1 And SCOTs(numSCOTs).TypeID2 <> 2)) _
                            Or (SCOTs(numSCOTs).TypeID2 = 3 And (SCOTs(numSCOTs).TypeID <> 1 And SCOTs(numSCOTs).TypeID <> 2)) Then
                        'estimation only, remove it
                        numSCOTs = numSCOTs - 1
                        If numSCOTs = -1 Then
                            ReDim SCOTs(0) As SCOTType
                        Else
                            ReDim Preserve SCOTs(numSCOTs) As SCOTType
                        End If
                    Else
                        Call GetJSonSCOTAppls(jom, numSCOTs)
                    End If
                Next jom
            End If
        End If
    End If
    GetJSonSCOTs = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas SCOTs data.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    Resume Next 'GetJSonSCOTs = False
    
End Function

Public Function GetJSonSCOTAppls(job As cJobject, numSCOTs As Integer) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempString As String
    
    tempString = ""
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("scotitapplication")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'Pull the SCOT appls
                    If tempString <> "" Then
                        tempString = tempString + ", "
                    End If
                    tempString = tempString + GetJSonValue(jom, "itapplication_name")
                Next jom
            End If
        End If
    End If
    SCOTs(numSCOTs).Appls = tempString
    GetJSonSCOTAppls = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas SCOTs data.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonSCOTAppls = False
    
End Function


Public Function GetJSonSCOTTypes(job As cJobject, numSCOTs As Integer) As Boolean
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
On Error GoTo errHandler

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim jom2 As cJobject
    Dim tempString As String
    
    tempString = ""
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find("scottypelink")
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        If jo.isArrayRoot Then
            If jo.hasChildren Then
                For Each jom In jo.children
                    'ignore Estimation SCOTs
                    If SCOTs(numSCOTs).TypeID = 0 Then
                        SCOTs(numSCOTs).TypeID = GetJSonValue(jom, "id")
                    Else
                        SCOTs(numSCOTs).TypeID2 = GetJSonValue(jom, "id")
                    End If
                Next jom
            End If
        End If
    End If
    SCOTs(numSCOTs).Appls = tempString
    GetJSonSCOTTypes = True
    Exit Function

errHandler:
    MsgBox "An error occurred while getting EY Canvas SCOTs data.  Error: " & str(Err.Number) & " - " & Err.Description
thisExit:
    GetJSonSCOTTypes = False
    
End Function

Attribute VB_Name = "modChoices"
Option Explicit
Option Private Module

Public arrChoices() As String
Public CurSelectionForm As String

Public Sub RelAppsChoice(CurSelection As String)
On Error GoTo errHandler

    Dim HoldName As String
    Dim thisWCGW As String
    Dim indexWCGW As Integer
    Dim thisControl As Integer
    Dim i As Integer
    Dim found As Boolean
    Dim j As Integer
    Dim k As Integer
    
    Application.ScreenUpdating = False
    'check for WCGWs
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
   
    HoldName = Replace(Replace(CurSelection, "BMRelAppSelect", ""), "BMSourceOfInfo", "")
    indexWCGW = GetWCGWIndex(Right(HoldName, Len(HoldName) - (InStr(HoldName, "WCGW") + 3)))
    thisControl = GetControlIndex(indexWCGW, Left(HoldName, InStr(HoldName, "WCGW") - 1))
    Dim arrCount As Integer
    arrCount = -1
    ReDim arrChoices(1) As String
     
    'load and sort data in arrChoices
    If indexWCGW >= 0 Then
        For i = 0 To WCGWs(indexWCGW).numControls
            For j = 0 To WCGWs(indexWCGW).Controls(i).numAppl
                If WCGWs(indexWCGW).Controls(i).Appls(j) <> "" Then
                    'check to see if its already in there
                    found = False
                    For k = 0 To arrCount
                        If arrChoices(k) = WCGWs(indexWCGW).Controls(i).Appls(j) Then
                            found = True
                            Exit For
                        End If
                    Next k
                    If Not found Then
                        arrCount = arrCount + 1
                        ReDim Preserve arrChoices(arrCount) As String
                        arrChoices(arrCount) = WCGWs(indexWCGW).Controls(i).Appls(j)
                    End If
                End If
            Next j
        Next i
    End If

    If arrCount = -1 Then
        'we don't have any apps to choose from
        MsgBox Translate("NoRelAppsToChoose", ChosenLanguage), vbOKOnly
        CurSelectionForm = CurSelection
        Application.ScreenRefresh
        Exit Sub
    End If

    Call SortChoices
    
    CurSelectionForm = "BMRelAppsSelected" + HoldName
    Application.ScreenRefresh

    Load frmChoices
    frmChoices.btnCancel.Caption = Translate("CancelButton", ChosenLanguage)
    frmChoices.btnFinish.Caption = Translate("SelectButton", ChosenLanguage)
    frmChoices.lblTitle.Caption = Translate("SelectTitle", ChosenLanguage)
    frmChoices.Show
    Exit Sub
    
errHandler:
    Resume Next

End Sub
      
Public Sub SortChoices()
     
    Dim First As Integer
    Dim last As Integer
    Dim i As Integer
    Dim j As Integer
    Dim Temp As String
     
    First = LBound(arrChoices)
    last = UBound(arrChoices)
    For i = First To last - 1
        For j = i + 1 To last
            If arrChoices(i) > arrChoices(j) Then
                Temp = arrChoices(j)
                arrChoices(j) = arrChoices(i)
                arrChoices(i) = Temp
            End If
        Next j
    Next i
     
End Sub

Attribute VB_Name = "modControlSummary"
Option Explicit
Option Private Module

Public shControlSum As Object 'Excel.Worksheet
Public wkbkConSum As Object 'Excel.Workbook
Public oOleFormat2 As OLEFormat
Public fileControlSummary As String
Public xlApp As Object 'Excel.Application
 
Type AllAppsType
    AppName As String
    AppCount As Integer
    ITDMCount As Integer
End Type

Public Sub CreateControlSummary()
On Error GoTo errHandler

    Dim thisRow As Integer
    Dim thisCol As Integer
    Dim lastRow As Integer
    Dim startRow As Integer
    Dim thisWCGW As String
    Dim holdRef As String
    Dim holdString As String
    Dim holdNature As String
    Dim holdNature2 As String
    Dim thisBM As Bookmark
    Dim objDD As InlineShape
    Dim tbl As Table
    Dim allApps() As AllAppsType
    Dim numApps As Integer
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim m As Integer
    Dim found As Boolean
    Dim relatedWCGWs As Integer
    Dim numWCGWsOnSCOT As Integer
    Dim saveRange As Word.Range
    Dim isInquiry As Boolean
    Dim isObserve As Boolean
    Dim isInspect As Boolean
    Dim isReper As Boolean
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    
    frmStatusWindow.lblMessage.Caption = Translate("WaitSumMessage", ChosenLanguage)
    frmStatusWindow.Show (False)
    
    Set saveRange = Selection.Range
    
    Call CheckForOpenConSum
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
    Call LoadProfile
    
    'must do a show all so we can get the values
    Call ShowAllMain(False)
    
    'load the data into the Control Summary
    shControlSum.Unprotect myPassword
    shControlSum.Range("CurrentLanguageDD").value = ChosenLanguage
    shControlSum.Calculate
    DoEvents
    shControlSum.Range("EntityName").value = CleanBM(docSCOTWT.Bookmarks("MyEntity").Range.Text)
    shControlSum.Range("DateFS").value = CleanBM(docSCOTWT.Bookmarks("MyFSDate").Range.Text)
    shControlSum.Range("SCOTName").value = CleanBM(docSCOTWT.Bookmarks("ImportedScotName").Range.Text)
    shControlSum.Range("GAASValue").value = IIf(InStr(Profile.ApplGAAS, "United States") <> 0, Translate("UnitedStates", ChosenLanguage), Translate("AllOthers", ChosenLanguage))
    shControlSum.Range("IntegratedAuditValue").value = Profile.Nature

    numWCGWsOnSCOT = 0
    For i = 0 To NumWCGWs
        If WCGWs(i).isPlaced Then
            numWCGWsOnSCOT = numWCGWsOnSCOT + 1
        End If
    Next i
    shControlSum.Range("NumOFWCGWs").value = numWCGWsOnSCOT

    'loop through controls (only placed ones get outputted)
    'since they may have already opened the Control Summary sheet, delete out any controls in there.
    startRow = shControlSum.Range("STARTCONTROLROW").Row
    lastRow = shControlSum.Range("LASTROWCONTROL").Row
    If startRow + 1 < lastRow - 1 Then
        'we have some controls, remove them
        shControlSum.Range("A" + Trim(str(startRow + 2)) + ":A" + Trim(str(lastRow - 1))).EntireRow.Delete
    End If
    'clear first row
    shControlSum.Range(shControlSum.Cells(startRow + 1, 2), shControlSum.Cells(startRow + 1, 23)).ClearContents
    shControlSum.Range(shControlSum.Cells(startRow + 1, 2), shControlSum.Cells(startRow + 1, 15)).WrapText = True
    shControlSum.Range(shControlSum.Cells(startRow + 1, 2), shControlSum.Cells(startRow + 1, 15)).Interior.Color = xlWhite
    shControlSum.Range(shControlSum.Cells(startRow + 1, 2), shControlSum.Cells(startRow + 1, 15)).Borders.LineStyle = xlSolid
    
    'reset the statistics to hidden
    shControlSum.Range("StatisticsSection").EntireRow.Hidden = True

    'links should be on columns: ControlName to Control, SigRisksYES to MainRisks, ReviewYES to Review Question, ControlOwner to Owner section,
    
    
    numApps = -1
    'get the LASTROW for controls
    thisRow = startRow + 1
    For i = 0 To NumWCGWs
        For j = 0 To WCGWs(i).numControls
            If WCGWs(i).Controls(j).isMainDoc Then
                'found one, copy it over
                thisWCGW = WCGWs(i).Controls(j).id + "WCGW" + WCGWs(i).id
                If thisRow = shControlSum.Range("LASTROWCONTROL").Row Then
                    shControlSum.Cells(shControlSum.Range("LASTROWCONTROL").Row - 1, 1).EntireRow.Copy
                    shControlSum.Rows(thisRow).insert shift:=xlDown
                    shControlSum.Range(shControlSum.Cells(thisRow, 2), shControlSum.Cells(thisRow, 23)).ClearContents
                    shControlSum.Range(shControlSum.Cells(thisRow, 2), shControlSum.Cells(thisRow, 15)).WrapText = True
                    shControlSum.Range(shControlSum.Cells(thisRow, 2), shControlSum.Cells(thisRow, 15)).Interior.Color = xlWhite
                    shControlSum.Range(shControlSum.Cells(thisRow, 2), shControlSum.Cells(thisRow, 15)).Borders.LineStyle = xlSolid
                End If
                shControlSum.Cells(thisRow, shControlSum.Range("ControlName").Column).value = CleanBM(docSCOTWT.Bookmarks("BMControlFullName" + thisWCGW).Range.Text)
                shControlSum.Hyperlinks.add Anchor:=shControlSum.Cells(thisRow, shControlSum.Range("ControlName").Column), Address:=docSCOTWT.name, SubAddress:="BMControlFullName" + thisWCGW, TextToDisplay:=shControlSum.Cells(thisRow, shControlSum.Range("ControlName").Column).value
                
                'Is this control in another scot
                If InStr(docSCOTWT.Bookmarks("InSCOTYes" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                'If docSCOTWT.Bookmarks("BMWPReferenceRow" + thisWCGW).Range.Font.Hidden = False Then
                    'somewhere else
                    holdRef = CleanBM(docSCOTWT.Bookmarks("BMWPRefData" + thisWCGW).Range.Text)
                    shControlSum.Cells(thisRow, shControlSum.Range("OtherSCOTStart").Column).value = holdRef
                    shControlSum.Range(shControlSum.Cells(thisRow, 3), shControlSum.Cells(thisRow, 15)).WrapText = False
                '    shControlSum.Cells(startRow, Putcolumn).EntireRow.AutoFit
                    shControlSum.Range(shControlSum.Cells(thisRow, 2), shControlSum.Cells(thisRow, 15)).Interior.Color = xlGray75
                    shControlSum.Range(shControlSum.Cells(thisRow, 3), shControlSum.Cells(thisRow, 15)).Borders.LineStyle = xlLineStyleNone
                    shControlSum.Range(shControlSum.Cells(thisRow, 3), shControlSum.Cells(thisRow, 15)).Borders(xlEdgeBottom).LineStyle = xlSolid
                    shControlSum.Range(shControlSum.Cells(thisRow, 3), shControlSum.Cells(thisRow, 15)).Borders(xlEdgeTop).LineStyle = xlSolid
                    shControlSum.Range(shControlSum.Cells(thisRow, 3), shControlSum.Cells(thisRow, 15)).Borders(xlEdgeLeft).LineStyle = xlSolid
                    shControlSum.Range(shControlSum.Cells(thisRow, 3), shControlSum.Cells(thisRow, 15)).Borders(xlEdgeRight).LineStyle = xlSolid
                    shControlSum.Cells(thisRow, 3).value = "This Control is part of another SCOT and documented here: " + holdRef
                    shControlSum.Cells(thisRow, 3).Characters(59, Len(holdRef)).Font.Color = xlRed
                Else
                    'only here
                    shControlSum.Cells(thisRow, shControlSum.Range("Tested").Column).value = IIf(LCase(CleanBM(docSCOTWT.Bookmarks("BMHasTesting" + thisWCGW).Range.Text)) = LCase(Translate("Yes", ChosenLanguage)), Translate("Yes", ChosenLanguage), Translate("No", ChosenLanguage))
                    If CleanBM(docSCOTWT.Bookmarks("BMSigRisksAddressed" + thisWCGW).Range.Text) <> "" Then
                        shControlSum.Cells(thisRow, shControlSum.Range("SigRisk").Column).value = Translate("Yes", ChosenLanguage)
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("SigRisk").Column).value = Translate("No", ChosenLanguage)
                    End If
                    shControlSum.Hyperlinks.add Anchor:=shControlSum.Cells(thisRow, shControlSum.Range("SigRisk").Column), Address:=docSCOTWT.name, SubAddress:="BMSigRisksTitle", TextToDisplay:=shControlSum.Cells(thisRow, shControlSum.Range("SigRisk").Column).value
                    
                    shControlSum.Cells(thisRow, shControlSum.Range("ControlDescription").Column).value = CleanBM(docSCOTWT.Bookmarks("ControlDescripData" + thisWCGW).Range.Text)
                    shControlSum.Cells(thisRow, shControlSum.Range("ControlType").Column).value = CleanBM(docSCOTWT.Bookmarks("ControlPropType" + thisWCGW).Range.Text)
                    shControlSum.Cells(thisRow, shControlSum.Range("ControlFreq").Column).value = CleanBM(docSCOTWT.Bookmarks("BMFreqValue" + thisWCGW).Range.Text)
                                        
                    If docSCOTWT.Bookmarks("ApplicationName" + thisWCGW).Range.Font.Hidden = True Then
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlOwner").Column).value = CleanBM(docSCOTWT.Bookmarks("DataOwnerName" + thisWCGW).Range.Text)
                        shControlSum.Hyperlinks.add Anchor:=shControlSum.Cells(thisRow, shControlSum.Range("ControlOwner").Column), Address:=docSCOTWT.name, SubAddress:="DataOwnerName" + thisWCGW, TextToDisplay:=shControlSum.Cells(thisRow, shControlSum.Range("ControlOwner").Column).value
                        shControlSum.Cells(thisRow, shControlSum.Range("DataUsed").Column).value = CleanBM(docSCOTWT.Bookmarks("SourceData" + thisWCGW).Range.Text)
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlOwner").Column).value = "N/A"
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlOwner").Column).Font.Underline = False
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlOwner").Column).Font.Color = vbBlack
                        shControlSum.Cells(thisRow, shControlSum.Range("DataUsed").Column).value = "N/A"
                    End If
                    
                    'design attrib
                    'see which design attrib grid is visible
                    If docSCOTWT.Bookmarks("BMNatureOfTesting" + thisWCGW).Range.Font.Hidden = False Then
                        'Nature is there
                        'loop through the Design Stuff
                        holdString = ""
                        holdNature = ""
                        docSCOTWT.Bookmarks("CntlPropNatTestGrid" + thisWCGW).Range.Select

                        Set tbl = Selection.Tables(1)
                        For k = 2 To tbl.Rows.count
                            holdNature2 = ""
                            'get the design attrib
                            If holdString <> "" Then
                                holdString = holdString + vbCrLf
                            End If
                            If holdNature <> "" Then
                                holdNature = holdNature + vbCrLf
                            End If
                            holdString = holdString + CleanBM(docSCOTWT.Bookmarks("ControlDesData" + thisWCGW + "ROW" + Trim(str(k))).Range.Text)
                            tbl.Cell(k, 4).Select
                            'for each control, keep track of the Natures
                            isInquiry = False
                            isObserve = False
                            isInspect = False
                            isReper = False
                            
                            If InStr(docSCOTWT.Bookmarks("BMCheckInqB" + thisWCGW + "ROW" + Trim(str(k))).Range.Fields(1).Code.Text, ".") <> 0 Then
                                If holdNature2 <> "" Then
                                    holdNature2 = holdNature2 + ", "
                                End If
                                isInquiry = True
                                holdNature2 = holdNature2 + Translate("Inquiry", ChosenLanguage)
                            End If
                            If InStr(docSCOTWT.Bookmarks("BMCheckObsB" + thisWCGW + "ROW" + Trim(str(k))).Range.Fields(1).Code.Text, ".") <> 0 Then
                                If holdNature2 <> "" Then
                                    holdNature2 = holdNature2 + ", "
                                End If
                                isObserve = True
                                holdNature2 = holdNature2 + Translate("Observation", ChosenLanguage)
                            End If
                            If InStr(docSCOTWT.Bookmarks("BMCheckInsB" + thisWCGW + "ROW" + Trim(str(k))).Range.Fields(1).Code.Text, ".") <> 0 Then
                                If holdNature2 <> "" Then
                                    holdNature2 = holdNature2 + ", "
                                End If
                                holdNature2 = holdNature2 + Translate("Inspection", ChosenLanguage)
                                isInspect = True
                            End If
                            If InStr(docSCOTWT.Bookmarks("BMCheckRepB" + thisWCGW + "ROW" + Trim(str(k))).Range.Fields(1).Code.Text, ".") <> 0 Then
                                If holdNature2 <> "" Then
                                    holdNature2 = holdNature2 + ", "
                                End If
                                holdNature2 = holdNature2 + Translate("Reperformance", ChosenLanguage)
                                isReper = True
                            End If
                                        
                            holdNature = holdNature + holdNature2
                        Next k
                        If isInquiry = True Then
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureInquiry").Column).value = "X"
                        Else
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureInquiry").Column).value = ""
                        End If
                        If isObserve = True Then
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureObserve").Column).value = "X"
                        Else
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureObserve").Column).value = ""
                        End If
                        If isInspect = True Then
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureInspect").Column).value = "X"
                        Else
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureInspect").Column).value = ""
                        End If
                        If isReper = True Then
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureReperform").Column).value = "X"
                        Else
                            shControlSum.Cells(thisRow, shControlSum.Range("NatureReperform").Column).value = ""
                        End If
                        shControlSum.Cells(thisRow, shControlSum.Range("DesignAttrib").Column).value = holdString
                        shControlSum.Cells(thisRow, shControlSum.Range("NatureOfTest").Column).value = holdNature
                    Else
                        'loop through the Design Stuff
                        holdString = ""
                        docSCOTWT.Bookmarks("CntlPropNONNatGrid" + thisWCGW).Range.Select

                        Set tbl = Selection.Tables(1)
                        For k = 2 To tbl.Rows.count
                            'get the design attrib
                            If holdString <> "" Then
                                holdString = holdString + vbCrLf
                            End If
                            holdString = holdString + CleanBM(docSCOTWT.Bookmarks("ControlPropData" + thisWCGW + "ROW" + Trim(str(k))).Range.Text)
                        Next k
                        shControlSum.Cells(thisRow, shControlSum.Range("DesignAttrib").Column).value = holdString
                        shControlSum.Cells(thisRow, shControlSum.Range("NatureOfTest").Column).value = "N/A"
                        shControlSum.Cells(thisRow, shControlSum.Range("NatureInquiry").Column).value = ""
                        shControlSum.Cells(thisRow, shControlSum.Range("NatureObserve").Column).value = ""
                        shControlSum.Cells(thisRow, shControlSum.Range("NatureInspect").Column).value = ""
                        shControlSum.Cells(thisRow, shControlSum.Range("NatureReperform").Column).value = ""
                    End If
                  
                    holdString = ""
                    docSCOTWT.Bookmarks("FullControl" + thisWCGW).Range.Select
                    
                    If InStr(docSCOTWT.Bookmarks("CheckTest1B" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        If holdString <> "" Then
                            holdString = holdString + vbCrLf
                        End If
                        holdString = holdString + Translate("IndepByEY", ChosenLanguage)
                        shControlSum.Cells(thisRow, shControlSum.Range("TestEY").Column).value = Translate("Yes", ChosenLanguage)
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("TestEY").Column).value = ""
                    End If
                    If InStr(docSCOTWT.Bookmarks("CheckTest2B" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        If holdString <> "" Then
                            holdString = holdString + vbCrLf
                        End If
                        holdString = holdString + Translate("ReperformByIA", ChosenLanguage)
                        shControlSum.Cells(thisRow, shControlSum.Range("TestReperform").Column).value = Translate("Yes", ChosenLanguage)
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("TestReperform").Column).value = ""
                    End If
                    If InStr(docSCOTWT.Bookmarks("CheckTest3B" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        If holdString <> "" Then
                            holdString = holdString + vbCrLf
                        End If
                        holdString = holdString + Translate("ReviewOfIA", ChosenLanguage)
                        shControlSum.Cells(thisRow, shControlSum.Range("TestReview").Column).value = Translate("Yes", ChosenLanguage)
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("TestReview").Column).value = ""
                    End If
                    If InStr(docSCOTWT.Bookmarks("ConcludeYes" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlEffective").Column).value = Translate("Yes", ChosenLanguage)
                    ElseIf InStr(docSCOTWT.Bookmarks("ConcludeNo" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlEffective").Column).value = Translate("No", ChosenLanguage)
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("ControlEffective").Column).value = ""
                    End If
                    
                    If InStr(docSCOTWT.Bookmarks("ReviewYes" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column).value = Translate("Yes", ChosenLanguage)
                        shControlSum.Hyperlinks.add Anchor:=shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column), Address:=docSCOTWT.name, SubAddress:="BMReviewOrMonitor" + thisWCGW, TextToDisplay:=shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column).value
                    ElseIf InStr(docSCOTWT.Bookmarks("ReviewNo" + thisWCGW).Range.Fields(1).Code.Text, ".") <> 0 Then
                        shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column).value = Translate("No", ChosenLanguage)
                        shControlSum.Hyperlinks.add Anchor:=shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column), Address:=docSCOTWT.name, SubAddress:="BMReviewOrMonitor" + thisWCGW, TextToDisplay:=shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column).value
                    Else
                        shControlSum.Cells(thisRow, shControlSum.Range("ReviewControl").Column).value = ""
                    End If
                    
                    shControlSum.Cells(thisRow, shControlSum.Range("TestStrategy").Column).value = holdString
                   
                    'WCGW count
                    relatedWCGWs = 1
                    For k = 0 To NumWCGWs
                        'don't count this WCGW controls
                        If k <> i Then
                            'see if this control is in there
                            For m = 0 To WCGWs(k).numControls
                                If WCGWs(k).Controls(m).id = WCGWs(i).Controls(j).id Then
                                    relatedWCGWs = relatedWCGWs + 1
                                    Exit For
                                End If
                            Next m
                        End If
                    Next k
                    shControlSum.Cells(thisRow, shControlSum.Range("WCGWCountStart").Column).value = relatedWCGWs
                    
                    'applications
                        'for controls that are Application controls, we pull the Application field value
                        'for controls that are IT Dependent controls, we pull ALL the related Appls
                    If docSCOTWT.Bookmarks("ApplicationName" + thisWCGW).Range.Font.Hidden = True Then
                        'pull in the related apps
                        holdString = ""
                        For m = 0 To WCGWs(i).Controls(j).numAppl
                            If WCGWs(i).Controls(j).Appls(m) <> "" Then
                                If holdString <> "" Then
                                    holdString = holdString + vbCrLf
                                End If
                                holdString = holdString + WCGWs(i).Controls(j).Appls(m)
                                'check to see if its already in there
                                found = False
                                For k = 0 To numApps
                                    If LCase(Trim(allApps(k).AppName)) = LCase(Trim(WCGWs(i).Controls(j).Appls(m))) Then
                                        found = True
                                        allApps(k).ITDMCount = allApps(k).ITDMCount + 1
                                        Exit For
                                    End If
                                Next k
                                If Not found Then
                                    numApps = numApps + 1
                                    ReDim Preserve allApps(numApps) As AllAppsType
                                    allApps(numApps).AppName = WCGWs(i).Controls(j).Appls(m)
                                    allApps(numApps).AppCount = 0
                                    allApps(numApps).ITDMCount = 1
                                End If
                            End If
                        Next m

                        If holdString = "" Then
                            shControlSum.Cells(thisRow, shControlSum.Range("RelatedApps").Column).value = "N/A"
                        Else
                            shControlSum.Cells(thisRow, shControlSum.Range("RelatedApps").Column).value = holdString
                        End If
                    Else
                        holdString = CleanBM(docSCOTWT.Bookmarks("ApplicationName" + thisWCGW).Range.Text)
                        shControlSum.Cells(thisRow, shControlSum.Range("RelatedApps").Column).value = holdString
                        'see if this application is in the list
                        found = False
                        For k = 0 To numApps
                            If LCase(Trim(allApps(k).AppName)) = LCase(Trim(holdString)) Then
                                found = True
                                allApps(k).AppCount = allApps(k).AppCount + 1
                                Exit For
                            End If
                        Next k
                        If Not found Then
                            numApps = numApps + 1
                            ReDim Preserve allApps(numApps) As AllAppsType
                            allApps(numApps).AppName = holdString
                            allApps(numApps).AppCount = 1
                            allApps(numApps).ITDMCount = 0
                        End If
                    End If
                End If
                thisRow = thisRow + 1
            End If
        Next j
    Next i
    
    'loop through applications
    startRow = shControlSum.Range("ApplicationName").Row
    lastRow = shControlSum.Range("LASTROWAPPLICATION").Row
    If startRow + 1 < lastRow - 1 Then
        'we have some applications, remove them
        shControlSum.Range("A" + Trim(str(startRow + 2)) + ":A" + Trim(str(lastRow - 1))).EntireRow.Delete
    End If
    'clear first row
    shControlSum.Range(shControlSum.Cells(startRow + 1, 1), shControlSum.Cells(startRow + 1, 5)).EntireRow.ClearContents
    
    thisRow = startRow + 1
    For i = 0 To numApps
        If allApps(i).AppName <> "" Then
            shControlSum.Cells(shControlSum.Range("LASTROWAPPLICATION").Row - 1, 1).EntireRow.Copy
            shControlSum.Rows(thisRow).EntireRow.insert shift:=xlDown
                    
            shControlSum.Cells(thisRow, shControlSum.Range("ApplicationName").Column).value = allApps(i).AppName
            shControlSum.Cells(thisRow, shControlSum.Range("ApplicationCount").Column).value = allApps(i).AppCount
            shControlSum.Cells(thisRow, shControlSum.Range("ITDMCount").Column).value = allApps(i).ITDMCount
            thisRow = thisRow + 1
        End If
    Next i
    
    saveRange.Select
    
    'Rehide unneeded rows in Control Summary
    shControlSum.Range(shControlSum.Cells(shControlSum.Range("LASTROWAPPLICATION").Row + 2, 1), shControlSum.Cells(shControlSum.Cells(shControlSum.Rows.count, 1).End(xlDown).Row, 1)).EntireRow.Hidden = True
    Call SaveConSum
    shControlSum.Range("CurrentLanguageDD").value = shControlSum.Range("CurrentLanguageDD").value
    Unload frmStatusWindow
    
    wkbkConSum.Windows(1).Visible = True
    If Application.Version = "14.0" Then
        wkbkConSum.Windows(1).WindowState = xlMaximized
        wkbkConSum.Application.WindowState = xlNormal
    End If
    Call Bring_To_Foreground(wkbkConSum)
    wkbkData.Windows(1).Visible = False
    Exit Sub

errHandler:
    Resume Next
    
End Sub

Public Sub CheckForOpenConSum()
    On Error Resume Next

    Dim tempString As String
    
    tempString = ""
    tempString = shControlSum.Cells(1, 1).value
    If tempString = "" Then
        'open the file
        Call OpenConSumExcel
    End If

End Sub

Public Sub SaveConSum()
    On Error Resume Next

    'wkbkConSum.Save
    
End Sub

Public Sub OpenConSumExcel()
On Error GoTo errHandler

    Dim lNumShapes As Long
    Dim lShapeCnt As Long
    Dim doc As Document
    Dim objExcelShape As Word.InlineShape
    Dim thisWS As Object 'Excel.Worksheet
    Dim thisSelection As Range
    Dim timesLooked As Integer
    Dim timesOpen As Integer
    Dim openDiaglog As String

    'save the current selection and then reset at the end of sub
    Set thisSelection = Selection.Range
    
    Set doc = docSCOTWT
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    For Each objExcelShape In doc.InlineShapes
        If objExcelShape.Type = wdInlineShapeEmbeddedOLEObject Then
            If LCase(objExcelShape.OLEFormat.IconLabel) = "controlsummary.xlsm" Then
                Set oOleFormat2 = objExcelShape.OLEFormat
                Exit For
            End If
        End If
    Next
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    
    If oOleFormat2 Is Nothing Then
        'oopsy, looks like we don't have the embedded document anymore
        MsgBox "An error occurred while trying to open the form's embedded control summary data.  It appears this embedded data is corrupt or missing.  Please contact the help desk for futher instructions.", vbOKOnly
        Exit Sub
    End If
    timesLooked = 1
TryAgain:
'    If xlApp Is Nothing Then
'        Set xlApp = CreateObject("Excel.Application")
'    End If
'
'    'Wait - Word can't open the object until Excel is visible
'    While Not xlApp.Visible
'       DoEvents
'    Wend
    
    oOleFormat2.DoVerb wdOLEVerbOpen
    Set xlApp = GetObject(, "Excel.Application")
    Set wkbkConSum = xlApp.ActiveWorkbook
    frmStatusWindow.Show (False)
    
    For Each thisWS In wkbkConSum.Worksheets
        Select Case thisWS.CodeName
        Case "shSummary"
            Set shControlSum = thisWS
        End Select
    Next
    
    'reset the current selection
    thisSelection.Select
    
    Exit Sub

errHandler:
    If MsgBox("An error occurred while trying to open the form's control summary embedded data.  This can happen if Excel has an open dialog window, is currently in edit mode or cannot open successfully. Please check these items then click OK to try again.  Click Cancel to exit this process (NOTE: cancelling may make the form not function properly).  If the problem persists, please contact the help desk.", vbOKCancel) = vbOK Then
        If timesLooked > 4 Then Exit Sub
        timesLooked = timesLooked + 1
        Resume TryAgain
    End If
    
End Sub
Attribute VB_Name = "modCreateCPath"
Option Explicit
Option Private Module
Public CPTableCount As Integer
Public CPTableCountStr As String

Public Sub AddCPathSection()
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim childBM As Bookmark
    Dim indexWCGW As Integer
    Dim i As Integer
    Dim tempString As String
    Dim curRow As Integer
    
    'check to make sure the cursor is in the correct area to insert.
    'if not, warn them!
    Call TurnOffTrackChanges
    If Selection.BookmarkID = 0 Then
        Selection.Bookmarks.add "TestPosition", Selection.Range
    End If
    If Selection.BookmarkID < docSCOTWT.Bookmarks("StartAllowWCGWs").Range.BookmarkID Or Selection.BookmarkID > docSCOTWT.Bookmarks("StopAllowWCGWs").Range.BookmarkID Then
        MsgBox Translate("AddCriticalPathError", ChosenLanguage), vbOKOnly
        If docSCOTWT.Bookmarks.Exists("TestPosition") Then
            docSCOTWT.Bookmarks("TestPosition").Delete
        End If
        Call ResetTrackChangesValues
        Exit Sub
    End If
    If docSCOTWT.Bookmarks.Exists("TestPosition") Then
        docSCOTWT.Bookmarks("TestPosition").Delete
    End If
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    Options.Pagination = False
    
    'get the currect count
    Call CheckForOpenEmbedded
    CPTableCountStr = shFormData.Range("NumberCritPaths").value
    CPTableCount = CInt(CPTableCountStr) + 1
    CPTableCountStr = Trim(str(CPTableCount))
    
    'Need to make sure this ID isn't already used...just to be sure.
    Do While docSCOTWT.Bookmarks.Exists("EntireCP" + CPTableCountStr)
        'try another one
        CPTableCount = CPTableCount + 1
        CPTableCountStr = Trim(str(CPTableCount))
    Loop
    shFormData.Range("NumberCritPaths").value = CPTableCountStr
    Call SaveEmbedded
    Profile.NumCritPaths = CPTableCount
    
    'make sure we don't add on to the last table, so move out of them
    Do While Selection.Tables.count > 0 Or isInABookmark
        Selection.MoveDown Unit:=wdLine, count:=1
    Loop
    With Selection
        .Range.Text = vbCrLf + vbCrLf
        .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    End With
    
    'add in the WT table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 2, 2)
    'fill it and format it
    With tbl.Range.ParagraphFormat
        .LeftIndent = InchesToPoints(0)
        .RightIndent = InchesToPoints(0)
        .SpaceBefore = 0
        .SpaceBeforeAuto = False
        .SpaceAfter = 0
        .SpaceAfterAuto = False
        .LineSpacingRule = wdLineSpaceSingle
        .Alignment = wdAlignParagraphLeft
        .WidowControl = True
        .KeepWithNext = False
        .KeepTogether = False
        .PageBreakBefore = False
        .NoLineNumber = False
        .Hyphenation = True
        .FirstLineIndent = InchesToPoints(0)
        .OutlineLevel = wdOutlineLevelBodyText
        .CharacterUnitLeftIndent = 0.1
        .CharacterUnitRightIndent = 0.1
        .CharacterUnitFirstLineIndent = 0
        .LineUnitBefore = 0.1
        .LineUnitAfter = 0.1
        .MirrorIndents = False
        .TextboxTightWrap = wdTightNone
    End With
    With tbl
        .AllowAutoFit = False
        .Borders.OutsideLineStyle = wdLineStyleSingle
        .Borders.InsideLineStyle = wdLineStyleSingle
        .Borders.InsideLineWidth = wdLineWidth025pt
        .Borders.OutsideLineWidth = wdLineWidth025pt
        .Borders.OutsideColorIndex = wdBlack
        .Borders.InsideColorIndex = wdBlack
        .Rows.AllowBreakAcrossPages = True
        .Rows(1).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(2).Cells.merge
        .Cell(1, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphRight
        .Rows(2).Height = 25
        .Title = "CPTable" + CPTableCountStr
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = RGB(89, 89, 89)
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColor = RGB(89, 89, 89)
        .Cell(1, 1).Range.Font.ColorIndex = wdWhite
        .Cell(1, 1).Range.Font.size = 12
        .Cell(1, 1).Range.Font.Bold = True
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("CPDelete").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Paste
        .Cell(1, 2).Range.Bookmarks.add "CPDelete" + CPTableCountStr
        .Cell(1, 1).Borders(wdBorderRight).Visible = False
        
        .Cell(1, 1).Width = "510"
        .Cell(1, 2).Width = "40"
        .Cell(2, 1).Width = "550"
        
        .Cell(1, 1).Range.Text = Translate("CPMainTitle", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMCPMainTitle" + CPTableCountStr
        .Cell(2, 1).Range.Text = Translate("EnterTextHere", ChosenLanguage)
        .Cell(2, 1).Range.Bookmarks.add "BMCPMainText" + CPTableCountStr
        
        .Cell(5, 1).Select
    End With
    
    'need to add the final bookmarks
    tbl.Select
    Selection.Range.Bookmarks.add "EntireCP" + CPTableCountStr
    Selection.Collapse direction:=wdCollapseStart
    
    Options.Pagination = True
    Call ResetTrackChangesValues
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Attribute VB_Name = "modCreateWCGW"
Option Explicit
'Option Private Module
Public oPath As String
Public WCGWTableCount As Integer
Public WCGWTableCountStr As String
Public ShowAddObserve As Boolean
Public ShowServiceOrg As Boolean
Public ShowRelatedParty As Boolean
Public ChosenWCGW As String
Public movingWCGW As Boolean
Public ForceDelete As Boolean
Public LastSel As Range
Public mySelectRange As Range

Type RenamePair
    FromStr As String
    ToStr As String
End Type

Public Const CanvasBlue = 15986394 'RGB(218, 238, 243) 'Canvas blue
Public Const MessageYellow = 13434879 'RGB(255, 255, 204) 'warning yellow
Public Const HeaderBackColor = 15132390 'RGB(230, 230, 230) 'light gray
Public Const GridOddRowGray = 15921906  'RGB(242, 242, 242) 'dark gray

Public Sub OpenWCGWSelect()

    ChosenWCGW = ""
    Load frmSelectWCGW
    'todo translate
    frmSelectWCGW.btnCancel.Caption = Translate("CancelButton", ChosenLanguage)
    frmSelectWCGW.btnFinish.Caption = Translate("InsertButton", ChosenLanguage)
    frmSelectWCGW.lblHelp.Caption = Translate("SelectWCGWHelp", ChosenLanguage)
    frmSelectWCGW.lblTitle.Caption = Translate("WCGWs", ChosenLanguage)
    frmSelectWCGW.lblPlaced.Caption = Translate("AlreadyPlaced", ChosenLanguage)
    frmSelectWCGW.Show

End Sub

Public Sub AddWCGWSection()
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim childBM As Bookmark
    Dim indexWCGW As Integer
    Dim i As Integer
    Dim tempString As String
    Dim curRow As Integer
    Dim wcgwID As String
    Dim thisBM As Bookmark
    Dim foundBM As Boolean
    
    'Set mySelectRange = Selection.Range
    
    If Not isMigrating Then
        'check to see if canvas data was loaded
        If CleanBM(docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text) = "" Then
            'not loaded yet
            MsgBox Translate("LoadCanvasFirst", ChosenLanguage), vbOKOnly
            Exit Sub
        End If
        
        'check to make sure the cursor is in the correct area to insert.
        'if not, warn them!
        Call TurnOffTrackChanges
        
        'make sure we don't add on to the last table, so move out of them
        Do While isInABookmark
            foundBM = False
            For Each thisBM In Selection.Bookmarks
                If InStr(thisBM.name, "EntireWCGW") <> 0 Then
                    Selection.Bookmarks(thisBM).Select
                    Selection.Collapse wdCollapseEnd
                    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                    Selection.HomeKey wdLine
                    foundBM = True
                    Exit For
                End If
            Next
            If Not foundBM Then
                Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                Selection.HomeKey wdLine
            End If
        Loop
    End If
    
    Do While Selection.Tables.count > 0 Or isInABookmark
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Selection.HomeKey wdLine
    Loop
    
    If Not isMigrating Then
        If Selection.BookmarkID = 0 Then
            Selection.Bookmarks.add "TestPosition", Selection.Range
        End If
        If Selection.BookmarkID < docSCOTWT.Bookmarks("StartAllowWCGWs").Range.BookmarkID Or Selection.BookmarkID > docSCOTWT.Bookmarks("StopAllowWCGWs").Range.BookmarkID Then
            MsgBox Translate("AddWCGWError", ChosenLanguage), vbOKOnly
            If docSCOTWT.Bookmarks.Exists("TestPosition") Then
                docSCOTWT.Bookmarks("TestPosition").Delete
            End If
            Call ResetTrackChangesValues
            Exit Sub
        End If
        If docSCOTWT.Bookmarks.Exists("TestPosition") Then
            docSCOTWT.Bookmarks("TestPosition").Delete
        End If
    
        'check to make sure the WCGW array is loaded and if not, load it
        If NumWCGWs < 1 Then
            Call LoadDataToArrays
        ElseIf numRisks < 1 Then
            Call LoadRisksToArrays
        End If
        
        If Profile.EngagementID = "" Then
            Call LoadProfile
        End If
        
        movingWCGW = False
    
        Call OpenWCGWSelect
        If ChosenWCGW = "" Then
            'they cancelled, exit sub
            Call ResetTrackChangesValues
            Exit Sub
        End If
        
        If movingWCGW Then
            'call the move function instead
            Call MoveWCGW
            Call ResetTrackChangesValues
            Exit Sub
        End If
    
        'Find the index to the correct WCGW
        indexWCGW = GetWCGWIndex(ChosenWCGW)
        If WCGWs(indexWCGW).numControls > 4 Then 'Actually > 5 but zero based
            If MsgBox(Replace(Translate("TooManyControls", ChosenLanguage), "[#]", Trim(str(WCGWs(indexWCGW).numControls + 1))), vbYesNo, Translate("SCOTWTHelpTitle", ChosenLanguage)) = vbNo Then
                Call ResetTrackChangesValues
                Exit Sub
            End If
        End If
        frmStatusWindow.lblMessage.Caption = Translate("WaitMessage", ChosenLanguage)
        frmStatusWindow.Show (False)
        
        Options.Pagination = False
        Application.ScreenUpdating = False
        Application.Visible = False
        System.Cursor = wdCursorWait
    Else
        ChosenWCGW = wcgwToMigrate
        indexWCGW = GetWCGWIndex(ChosenWCGW)
    End If
    
    frmStatusWindow.Show (False)
    
    WCGWs(indexWCGW).isPlaced = True
     
    Call CheckForOpenEmbedded
    
    curRow = 2
    Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
        If WCGWs(indexWCGW).id = shSCOTWCGWs.Cells(curRow, 1).value Then
            shSCOTWCGWs.Cells(curRow, 11).value = "X"
        End If
        curRow = curRow + 1
    Loop
    'Call SaveEmbedded
    
    Call LoadDataToArrays

    WCGWTableCountStr = Trim(str(ChosenWCGW)) ' indexWCGW
     
    With Selection
        .Range.Text = vbCrLf + vbCrLf + vbCrLf + vbCrLf + vbCrLf + vbCrLf
        .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        .Range.Bookmarks.add "EntireBeginWCGW" + WCGWTableCountStr
    End With
    
    'add in the WCGW table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 2, 5)
    'fill it and format it
    Call SetTableFormat(tbl, False, 0)
    
    With tbl
        .Title = "WCGWTable" + WCGWTableCountStr
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ToCopyShow").Range.Copy
        .Cell(1, 1).Range.Paste
        docSCOTWT.Bookmarks("ToCopyHide").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Paste
        .Cell(1, 1).Borders(wdBorderTop).Visible = False
        .Cell(1, 1).Borders(wdBorderBottom).Visible = False
        .Cell(1, 1).Borders(wdBorderLeft).Visible = False
        .Cell(1, 1).Borders(wdBorderRight).Visible = False
        .Cell(1, 2).Borders(wdBorderTop).Visible = False
        .Cell(1, 2).Borders(wdBorderBottom).Visible = False
        .Cell(1, 2).Borders(wdBorderLeft).Visible = False
        .Cell(2, 1).Borders(wdBorderRight).Visible = False
        .Cell(2, 1).Borders(wdBorderTop).Visible = False
        .Cell(2, 1).Borders(wdBorderBottom).Visible = False
        .Cell(2, 1).Borders(wdBorderLeft).Visible = False
        .Cell(2, 2).Borders(wdBorderTop).Visible = False
        .Cell(2, 2).Borders(wdBorderBottom).Visible = False
        .Cell(2, 2).Borders(wdBorderLeft).Visible = False
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray50
        .Cell(1, 4).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue
        .Cell(2, 4).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue
        .Cell(2, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray50
        .Cell(1, 3).Range.Font.ColorIndex = wdWhite
        .Cell(2, 3).Range.Font.ColorIndex = wdWhite
        .Cell(1, 3).Range.Font.Bold = True
        .Cell(2, 3).Range.Font.Bold = True
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("WCGWDelete").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 5).Range.Paste
        .Cell(1, 5).Borders(wdBorderTop).Visible = False
        .Cell(1, 5).Borders(wdBorderBottom).Visible = False
        .Cell(1, 5).Borders(wdBorderRight).Visible = False
        .Cell(2, 5).Borders(wdBorderTop).Visible = False
        .Cell(2, 5).Borders(wdBorderBottom).Visible = False
        .Cell(2, 5).Borders(wdBorderRight).Visible = False
        
        .Cell(1, 1).Width = "20"
        .Cell(1, 2).Width = "20"
        .Cell(2, 1).Width = "20"
        .Cell(2, 2).Width = "20"
        .Cell(1, 3).Width = "125"
        .Cell(2, 3).Width = "125"
        .Cell(1, 4).Width = "350"
        .Cell(2, 4).Width = "350"
        .Cell(1, 5).Width = "25"
        .Cell(2, 5).Width = "25"
        .Cell(1, 3).Range.Text = Translate("WCGWName", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMWCGWTitle" + WCGWTableCountStr
        .Cell(1, 4).Range.Text = WCGWs(indexWCGW).name
        .Cell(1, 4).Range.Bookmarks.add "BMWCGWName" + WCGWTableCountStr
        .Cell(2, 3).Range.Text = Translate("RelatedAssertions", ChosenLanguage)
        .Cell(2, 3).Range.Bookmarks.add "BMRelatedAssertions" + WCGWTableCountStr
        .Cell(2, 4).Range.Text = WCGWs(indexWCGW).RelatedAsserts
        .Cell(2, 4).Range.Bookmarks.add "WCGWRelAssertions" + WCGWTableCountStr
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "WCGWTableShow" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "WCGWTableHide" + WCGWTableCountStr
        .Cell(1, 5).Range.Bookmarks.add "WCGWDelete" + WCGWTableCountStr
        .Rows(2).Range.Bookmarks.add "WCGWAsserts" + WCGWTableCountStr
        .Cell(1, 5).Select
    End With
    Set LastSel = Selection.Range
    
    'loop through controls here
    If WCGWs(indexWCGW).numControls = -1 Then
        Do While Selection.Tables.count > 0
            Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        Selection.Range.Text = vbCrLf
    Else
        For i = 0 To WCGWs(indexWCGW).numControls
            frmStatusWindow.Show (False)
            DoEvents
            Call CreateControl(i, indexWCGW)
            'need to add the final bookmarks
            Do While Selection.Tables.count > 0
                Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
            Loop
            Selection.Range.Text = vbCrLf & vbCrLf
            Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
            Set LastSel = Selection.Range
        Next i
    End If
    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Selection.Range.Text = vbCrLf
    
    'add in the end WCGW table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    'fill it and format it
    Call SetTableFormat(tbl, False, 0)
    
    With tbl
        .Title = "WCGWTableEnd" + WCGWTableCountStr
        .Cell(1, 1).Borders(wdBorderTop).Visible = False
        .Cell(1, 1).Borders(wdBorderBottom).Visible = False
        .Cell(1, 1).Borders(wdBorderLeft).Visible = False
        .Cell(1, 1).Borders(wdBorderRight).Visible = False
        .Cell(1, 2).Borders(wdBorderTop).Visible = False
        .Cell(1, 2).Borders(wdBorderBottom).Visible = False
        .Cell(1, 2).Borders(wdBorderLeft).Visible = False
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray50
        .Cell(1, 3).Range.Font.ColorIndex = wdWhite
        .Cell(1, 3).Range.Font.Bold = True
        
        .Cell(1, 1).Width = "20"
        .Cell(1, 2).Width = "20"
        .Cell(1, 3).Width = "500"
        .Cell(1, 3).Range.Text = Translate("EndWCGWSection", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMEndWCGWSection" + WCGWTableCountStr
    End With

    tbl.Select
    
    Set rngStart = docSCOTWT.Bookmarks("EntireBeginWCGW" + WCGWTableCountStr).Range
    Set rngEnd = Selection.Range

    docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
    Selection.Range.Bookmarks.add "EntireWCGW" + WCGWTableCountStr
    Selection.Collapse direction:=wdCollapseEnd
    Selection.MoveRight wdCharacter, 1
    
    Selection.HomeKey Unit:=wdLine
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    
    Do While Selection.Range.Text = vbCr And Not isInABookmark
        Selection.Range.Delete
        Selection.HomeKey Unit:=wdLine
        Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Loop
    Selection.Collapse wdCollapseStart
    Selection.MoveLeft 1
    Selection.insertBefore vbCrLf + vbCrLf
    
    docSCOTWT.Bookmarks("EntireBeginWCGW" + WCGWTableCountStr).Select
    
    If Not isMigrating Then
        'hide all the controls sections under the WCGW
        For Each childBM In docSCOTWT.Bookmarks
            If InStr(childBM.name, "ControlsTableHide") <> 0 And InStr(childBM.name, "WCGW" + WCGWTableCountStr) <> 0 Then
               'hide it
                docSCOTWT.Bookmarks("FullControl" + Replace(childBM.name, "ControlsTableHide", "")).Range.Font.Hidden = True
                docSCOTWT.Bookmarks(childBM.name).Range.Font.Hidden = True
            ElseIf InStr(childBM.name, "EntCntlAlrdyAdd") <> 0 Then
                docSCOTWT.Bookmarks(childBM.name).Range.Font.Hidden = True
            End If
        Next
    End If
    
    docSCOTWT.Bookmarks("WCGWTableShow" + WCGWTableCountStr).Range.Font.Hidden = True
    docSCOTWT.Bookmarks("EntireBeginWCGW" + WCGWTableCountStr).Delete
    'have to do this here again because in 2013, it wouldn't paint the last table until the next command was run.
    tbl.Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray50

    If Not isMigrating Then
        Call ResetTrackChangesValues
        Options.Pagination = True
        System.Cursor = wdCursorNormal
        Application.Visible = True
        Application.ScreenUpdating = True
        Unload frmStatusWindow
    End If
    
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Public Sub CreateControl(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    Dim relatedWCGWs As String
    Dim thisBullet As String
    Dim tempString As String
    Dim curRow As Integer
    Dim alreadyUsed As Boolean
    Dim i As Integer
    Dim j As Integer
    
    'thisBullet = Chr$(149) + " "
    thisBullet = "--> "
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id

    LastSel.Select

    'add in the Control tables and fill it
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.HomeKey wdLine
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.Range.Text = vbCrLf
    Selection.Range.Bookmarks.add "EntireSectionStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 4)
    'fill it and format it
    
    'format table
    Call SetTableFormat(tbl, False, 15)
        
    With tbl
        .Title = "ControlsTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(1, 3).Range.Font.ColorIndex = wdBlack
        .Cell(1, 3).Range.Font.Bold = True
        .Cell(1, 4).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue
        .Rows.SetLeftIndent LeftIndent:=15, RulerStyle:=wdAdjustFirstColumn
        .Cell(1, 1).Width = "20"
        .Cell(1, 2).Width = "20"
        .Cell(1, 3).Width = "125"
        .Cell(1, 4).Width = "360"
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ToCopyShow").Range.Copy
        .Cell(1, 1).Range.Paste
        docSCOTWT.Bookmarks("ToCopyHide").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Paste
        .Cell(1, 1).Borders(wdBorderTop).Visible = False
        .Cell(1, 1).Borders(wdBorderBottom).Visible = False
        .Cell(1, 1).Borders(wdBorderLeft).Visible = False
        .Cell(1, 1).Borders(wdBorderRight).Visible = False
        .Cell(1, 2).Borders(wdBorderTop).Visible = False
        .Cell(1, 2).Borders(wdBorderBottom).Visible = False
        .Cell(1, 2).Borders(wdBorderLeft).Visible = False
        .Cell(1, 3).Range.Text = Replace(Translate("ControlName", ChosenLanguage), " # ", " ")
        .Cell(1, 3).Range.Bookmarks.add "BMControlName" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 4).Range.Text = WCGWs(indexWCGW).Controls(thisControlIndex).name
        .Cell(1, 4).Range.Bookmarks.add "BMControlFullName" + thisControl + "WCGW" + WCGWTableCountStr
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "ControlsTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "ControlsTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    'add in the Control tables and fill it
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.HomeKey wdLine
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.Range.Text = vbCrLf
    Selection.Range.Bookmarks.add "ControlStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    alreadyUsed = False
    If Not isMigrating Then
        'check to see if this control has already been placed in the document
        For i = 0 To NumWCGWs
            'don't count this WCGW's controls
            If i <> indexWCGW Then
                If WCGWs(i).isPlaced Then
                    'see if this control is in there
                    For j = 0 To WCGWs(i).numControls
                        If WCGWs(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id Then
                            alreadyUsed = True
                            Exit For
                        End If
                    Next j
                    If alreadyUsed Then
                        Exit For
                    End If
                End If
            End If
        Next i
    Else
        alreadyUsed = False
        If WCGWs(indexWCGW).Controls(thisControlIndex).isMainDoc = False Then
            alreadyUsed = True
        End If
    End If
    
    If Not alreadyUsed Then
        Call CheckForOpenEmbedded
        WCGWs(indexWCGW).Controls(thisControlIndex).isMainDoc = True
        tempString = ""
        
        curRow = 2
        Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
            If WCGWs(indexWCGW).id + "|" + WCGWs(indexWCGW).Controls(thisControlIndex).id = shSCOTWCGWs.Cells(curRow, 10).value Then
                shSCOTWCGWs.Cells(curRow, 12).value = "X"
                Exit Do
            End If
            curRow = curRow + 1
        Loop
    End If
    'Call SaveEmbedded
    
    frmStatusWindow.Show (False)
    
    If alreadyUsed Then
        Call CreateAlreadyAdded(thisControlIndex, indexWCGW)
    Else
        'show all control stuff
        relatedWCGWs = ""
        For i = 0 To NumWCGWs
            'don't count this WCGW controls
            If i <> indexWCGW Then
                'see if this control is in there
                For j = 0 To WCGWs(i).numControls
                    If WCGWs(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id Then
                        If relatedWCGWs <> "" Then
                            relatedWCGWs = relatedWCGWs + vbCrLf
                        End If
                        relatedWCGWs = relatedWCGWs + thisBullet + WCGWs(i).name
                        Exit For
                    End If
                Next j
            End If
        Next i
        Call CreateSCOTSection(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
        Call CreateOthersSection(thisControlIndex, indexWCGW, relatedWCGWs)
        frmStatusWindow.Show (False)
        Call CreateProperties(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
        Call CreateOwnerInfo(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
        Call CreateDataUsed(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
        Call CreateReview(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
        Call CreateConfirm(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
        Call CreateConclusion(thisControlIndex, indexWCGW)
        frmStatusWindow.Show (False)
    End If
    
    Selection.Range.Bookmarks.add "ControlEND" + thisControl + "WCGW" + WCGWTableCountStr
    
    Set rngStart = docSCOTWT.Bookmarks("ControlStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
    Set rngEnd = docSCOTWT.Bookmarks("ControlEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
    docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
    Selection.Range.Bookmarks.add "FullControl" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Collapse direction:=wdCollapseEnd
    docSCOTWT.Bookmarks("ControlStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
    Set rngStart = docSCOTWT.Bookmarks("EntireSectionStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
    Set rngEnd = docSCOTWT.Bookmarks("ControlEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
    docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
    Selection.Range.Bookmarks.add "EntireSection" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Collapse direction:=wdCollapseEnd
    docSCOTWT.Bookmarks("EntireSectionStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    docSCOTWT.Bookmarks("ControlEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Public Sub CreateProperties(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    Dim objDD As InlineShape
    Dim i As Integer
    Dim j As Integer
    Dim tbl2 As Table
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "ControlPropertiesTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Text = Translate("ControlProperties", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMControlProperties" + thisControl + "WCGW" + WCGWTableCountStr
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "ControlPropTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "ControlPropTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlPropStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    'properties stuff here
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 4, 2)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlPropTop" + thisControl + "WCGW" + WCGWTableCountStr
        .Columns(1).Width = "440"
        .Columns(2).Width = "30"
        .Rows(2).Cells.merge
        .Rows(3).Cells.merge
        .Rows(4).Cells.merge
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(1, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 1).Range.Font.ColorIndex = wdBlack
        .Cell(4, 1).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue
        .Cell(4, 1).Range.Font.ColorIndex = wdBlack
        
        .Cell(3, 1).Range.Text = Translate("SigRisksAddressedTitle", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMSigRisksAddTitle" + thisControl + "WCGW" + WCGWTableCountStr
        
        'loop through risks and see if this control has been associated
        Dim thisSigRisks As String
        Dim thisBullet As String
        'thisBullet = Chr$(149) + " "
        thisBullet = "--> "
        thisSigRisks = ""
        For i = 0 To numRisks
            For j = 0 To Risks(i).numControls
                If Risks(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id And Risks(i).Controls(j).isAssoc Then
                    If thisSigRisks <> "" Then
                        thisSigRisks = thisSigRisks + vbCrLf
                    End If
                    thisSigRisks = thisSigRisks + thisBullet + Risks(i).TypeID + " - " + Risks(i).name
                    Exit For
                End If
            Next j
        Next i
        .Cell(4, 1).Range.Text = thisSigRisks
        .Cell(4, 1).Range.Bookmarks.add "BMSigRisksAddressed" + thisControl + "WCGW" + WCGWTableCountStr
        
        .Cell(1, 1).Range.Text = Translate("ControlDescription", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMControlDescription" + thisControl + "WCGW" + WCGWTableCountStr
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Paste
        .Cell(1, 2).Range.Bookmarks.add "BMControlDescHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Bookmarks.add "ControlDescripData" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    'need to add the final bookmarks
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.HomeKey wdLine
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.Range.Text = vbCrLf
    
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 4, 4)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlPropMid" + thisControl
        .Columns(1).Width = "40"
        .Columns(2).Width = "20"
        .Columns(3).Width = "180"
        .Columns(4).Width = "230"
        
        .Cell(1, 1).Width = "210"
        .Cell(1, 2).Width = "30"
        .Cell(1, 3).Width = "200"
        .Cell(1, 4).Width = "30"
        .Cell(1, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(1, 3).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 2).Range.Font.ColorIndex = wdBlack
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 3).Range.Font.ColorIndex = wdBlack
        .Cell(1, 4).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 4).Range.Font.ColorIndex = wdBlack
        .Cell(2, 1).Range.Font.Underline = wdUnderlineSingle
        .Cell(2, 1).Range.Font.ColorIndex = wdBlue
        .Cell(3, 1).Range.Font.Underline = wdUnderlineSingle
        .Cell(3, 1).Range.Font.ColorIndex = wdBlue
        .Cell(4, 1).Range.Font.Underline = wdUnderlineSingle
        .Cell(4, 1).Range.Font.ColorIndex = wdBlue
        .Cell(3, 2).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
        .Cell(3, 3).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
        .Cell(2, 2).Range.Font.Bold = True
        .Cell(2, 2).Range.Font.ColorIndex = wdBlack
        .Cell(3, 2).Range.Font.Bold = True
        .Cell(3, 2).Range.Font.ColorIndex = wdBlack
        .Cell(4, 2).Range.Font.Bold = True
        .Cell(4, 2).Range.Font.ColorIndex = wdBlack
        
        .Cell(1, 1).Range.Text = Translate("DesignAttributes", ChosenLanguage)
        .Cell(1, 3).Range.Text = Translate("NatureOfTesting", ChosenLanguage)
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        .Cell(1, 2).Range.Paste
        .Cell(1, 4).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 1).Range.Bookmarks.add "BMPropDesignAtt" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "BMDesAttHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Bookmarks.add "BMNatureOfTesting" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 4).Range.Bookmarks.add "BMNatureTestHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("DeleteRowLink").Range.Copy
        .Cell(2, 1).Range.Paste
        .Cell(3, 1).Range.Paste
        docSCOTWT.Bookmarks("AddRowLink").Range.Copy
        .Cell(4, 1).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(2, 2).Range.Text = "A"
        .Cell(3, 2).Range.Text = "B"
        .Cell(4, 2).Range.Text = "C"
        .Cell(2, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Cell(3, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Cell(4, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Cell(2, 1).Range.Bookmarks.add "ControlDesDel" + thisControl + "WCGW" + WCGWTableCountStr + "ROW2"
        .Cell(3, 1).Range.Bookmarks.add "ControlDesDel" + thisControl + "WCGW" + WCGWTableCountStr + "ROW3"
        .Cell(4, 1).Range.Bookmarks.add "ControlDesAdd" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 3).Range.Bookmarks.add "ControlDesData" + thisControl + "WCGW" + WCGWTableCountStr + "ROW2"
        .Cell(3, 3).Range.Bookmarks.add "ControlDesData" + thisControl + "WCGW" + WCGWTableCountStr + "ROW3"
        .Cell(4, 3).Range.Bookmarks.add "ControlDesData" + thisControl + "WCGW" + WCGWTableCountStr + "ROW4"
    End With
    
    Dim objOB As InlineShape
    For i = 2 To 4
        tbl.Cell(i, 4).Range.Select
        Selection.Collapse wdCollapseStart
        Set tbl2 = docSCOTWT.Tables.add(Selection.Range, 2, 4)
        
        'format table
        With tbl2.Range.ParagraphFormat
            .CharacterUnitLeftIndent = 0.1
            .CharacterUnitRightIndent = 0.1
            .LineUnitBefore = 0.1
            .LineUnitAfter = 0.1
        End With
        
        With tbl2
            .AllowAutoFit = False
            .Columns(1).Width = "35"
            .Columns(2).Width = "68"
            .Columns(3).Width = "35"
            .Columns(4).Width = "92"
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("MainCheck1No").Range.Copy
            .Cell(1, 1).Range.Paste
            .Cell(1, 2).Range.Text = Translate("Inquiry", ChosenLanguage)
            docSCOTWT.Bookmarks("MainCheck2No").Range.Copy
            .Cell(1, 3).Range.Paste
            .Cell(1, 4).Range.Text = Translate("Observation", ChosenLanguage)
            docSCOTWT.Bookmarks("MainCheck3No").Range.Copy
            .Cell(2, 1).Range.Paste
            .Cell(2, 2).Range.Text = Translate("Inspection", ChosenLanguage)
            docSCOTWT.Bookmarks("MainCheck4No").Range.Copy
            .Cell(2, 3).Range.Paste
            .Cell(2, 4).Range.Text = Translate("Reperformance", ChosenLanguage)
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            .Cell(1, 1).Range.Bookmarks.add "BMCheckInqB" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(1, 2).Range.Bookmarks.add "BMCheckInq" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(1, 3).Range.Bookmarks.add "BMCheckObsB" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(1, 4).Range.Bookmarks.add "BMCheckObs" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(2, 1).Range.Bookmarks.add "BMCheckInsB" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(2, 2).Range.Bookmarks.add "BMCheckIns" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(2, 3).Range.Bookmarks.add "BMCheckRepB" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            .Cell(2, 4).Range.Bookmarks.add "BMCheckRep" + thisControl + "WCGW" + WCGWTableCountStr + "ROW" + Trim(str(i))
            
        End With
    Next i
    
    tbl.Select
    Selection.Range.Bookmarks.add "CntlPropNatTestGrid" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Collapse wdCollapseEnd
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.Range.Text = vbCrLf
    
    'no nature of testing column
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 4, 3)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlPropMidNon" + thisControl
        .Columns(1).Width = "40"
        .Columns(2).Width = "20"
        .Columns(3).Width = "410"
        Set rngStart = .Cell(1, 1).Range
        Set rngEnd = .Cell(1, 2).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        .Cell(1, 1).Width = "440"
        .Cell(1, 2).Width = "30"
        .Cell(1, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 2).Range.Font.ColorIndex = wdBlack
        .Cell(2, 1).Range.Font.Underline = wdUnderlineSingle
        .Cell(2, 1).Range.Font.ColorIndex = wdBlue
        .Cell(3, 1).Range.Font.Underline = wdUnderlineSingle
        .Cell(3, 1).Range.Font.ColorIndex = wdBlue
        .Cell(4, 1).Range.Font.Underline = wdUnderlineSingle
        .Cell(4, 1).Range.Font.ColorIndex = wdBlue
        .Cell(3, 2).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
        .Cell(3, 3).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
        .Cell(2, 2).Range.Font.Bold = True
        .Cell(2, 2).Range.Font.ColorIndex = wdBlack
        .Cell(3, 2).Range.Font.Bold = True
        .Cell(3, 2).Range.Font.ColorIndex = wdBlack
        .Cell(4, 2).Range.Font.Bold = True
        .Cell(4, 2).Range.Font.ColorIndex = wdBlack
        
        .Cell(1, 1).Range.Text = Translate("DesignAttributes", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMPropDesignAttNON" + thisControl + "WCGW" + WCGWTableCountStr
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("DeleteRowLink").Range.Copy
        .Cell(2, 1).Range.Paste
        .Cell(3, 1).Range.Paste
        docSCOTWT.Bookmarks("AddRowLink").Range.Copy
        .Cell(4, 1).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(2, 2).Range.Text = "A"
        .Cell(3, 2).Range.Text = "B"
        .Cell(4, 2).Range.Text = "C"
        .Cell(2, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Cell(3, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Cell(4, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Cell(2, 1).Range.Bookmarks.add "ControlPropDel" + thisControl + "WCGW" + WCGWTableCountStr + "ROW2"
        .Cell(3, 1).Range.Bookmarks.add "ControlPropDel" + thisControl + "WCGW" + WCGWTableCountStr + "ROW3"
        .Cell(4, 1).Range.Bookmarks.add "ControlPropAdd" + thisControl + "WCGW" + WCGWTableCountStr
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        .Cell(1, 2).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Bookmarks.add "BMDesAttHelpCellNON" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 3).Range.Bookmarks.add "ControlPropData" + thisControl + "WCGW" + WCGWTableCountStr + "ROW2"
        .Cell(3, 3).Range.Bookmarks.add "ControlPropData" + thisControl + "WCGW" + WCGWTableCountStr + "ROW3"
        .Cell(4, 3).Range.Bookmarks.add "ControlPropData" + thisControl + "WCGW" + WCGWTableCountStr + "ROW4"
    End With
    
    tbl.Select
    Selection.Range.Bookmarks.add "CntlPropNONNatGrid" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Collapse wdCollapseEnd
    'need to add the final bookmarks
    Do While Selection.Tables.count > 0
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    Loop
    Selection.Range.Text = vbCrLf
    
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 6, 8)
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlPropLast" + thisControl + "WCGW" + WCGWTableCountStr
        .Columns(1).Width = "90"
        .Columns(2).Width = "55"
        .Columns(3).Width = "150"
        .Columns(4).Width = "35"
        .Columns(5).Width = "30"
        .Columns(6).Width = "40"
        .Columns(7).Width = "30"
        .Columns(8).Width = "40"
        
        Set rngStart = .Cell(1, 4).Range
        Set rngEnd = .Cell(1, 8).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        .Cell(1, 1).Width = "90"
        .Cell(1, 2).Width = "145"
        .Cell(1, 3).Width = "90"
        .Cell(1, 4).Width = "145"
        .Rows(3).Cells.merge
        .Rows(4).Cells.merge
        .Rows(5).Cells.merge
        .Rows(6).Cells.merge
        
        .Cell(4, 1).Split 1, 2
        .Cell(5, 1).Split 1, 2
        .Cell(6, 1).Split 1, 2
        .Cell(4, 1).Width = "35"
        .Cell(4, 2).Width = "435"
        .Cell(5, 1).Width = "35"
        .Cell(5, 2).Width = "435"
        .Cell(6, 1).Width = "35"
        .Cell(6, 2).Width = "435"
        
        .Cell(2, 3).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(2, 5).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(2, 6).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(2, 7).Borders(wdBorderRight).LineStyle = wdLineStyleNone
    
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue 'Canvas blue
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 3).Range.Font.ColorIndex = wdBlack
        .Cell(1, 4).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue 'Canvas blue
        .Cell(2, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(2, 1).Range.Font.ColorIndex = wdBlack
        .Cell(2, 2).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue 'Canvas blue
        .Cell(2, 3).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(2, 3).Range.Font.ColorIndex = wdBlack
        .Cell(2, 4).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(2, 4).Range.Font.ColorIndex = wdBlack
        .Cell(1, 1).Range.Text = Translate("ControlType", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMControlType" + thisControl + "WCGW" + WCGWTableCountStr
        Select Case WCGWs(indexWCGW).Controls(thisControlIndex).TypeID
            Case 1
                .Cell(1, 2).Range.Text = Translate("Application", ChosenLanguage)
            Case 2
                .Cell(1, 2).Range.Text = Translate("ITDepAll", ChosenLanguage)
            Case 3
                .Cell(1, 2).Range.Text = Translate("ManualPrevent", ChosenLanguage)
            Case 4
                .Cell(1, 2).Range.Text = Translate("ManualDetect", ChosenLanguage)
        End Select
        .Cell(1, 3).Range.Text = Translate("Frequency", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMFrequency" + thisControl + "WCGW" + WCGWTableCountStr
        
        Select Case WCGWs(indexWCGW).Controls(thisControlIndex).FreqID
            Case 1
                .Cell(1, 4).Range.Text = Translate("MoreThanDaily", ChosenLanguage)
            Case 2
                .Cell(1, 4).Range.Text = Translate("Daily", ChosenLanguage)
            Case 3
                .Cell(1, 4).Range.Text = Translate("Weekly", ChosenLanguage)
            Case 4
                .Cell(1, 4).Range.Text = Translate("Monthly", ChosenLanguage)
            Case 5
                .Cell(1, 4).Range.Text = Translate("Quarterly", ChosenLanguage)
            Case 6
                .Cell(1, 4).Range.Text = Translate("Annually", ChosenLanguage)
            Case 8
                .Cell(1, 4).Range.Text = Translate("Other", ChosenLanguage)
        End Select
        .Cell(1, 4).Range.Bookmarks.add "BMFreqValue" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Text = Translate("TestingTitle", ChosenLanguage)
        .Cell(2, 1).Range.Bookmarks.add "BMTestingTitle" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 2).Range.Text = IIf(WCGWs(indexWCGW).Controls(thisControlIndex).HasTesting, Translate("Yes", ChosenLanguage), Translate("No", ChosenLanguage))
        .Cell(2, 2).Range.Bookmarks.add "BMHasTesting" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 3).Range.Text = Translate("ReviewOrMonitor", ChosenLanguage)
        .Cell(2, 3).Range.Bookmarks.add "BMReviewOrMonitor" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(4, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(4, 1).Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .Cell(4, 2).Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .Cell(5, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(5, 1).Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .Cell(5, 2).Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .Cell(5, 2).Borders(wdBorderTop).LineStyle = wdLineStyleNone
        .Cell(6, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        .Cell(2, 4).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(2, 4).Range.Bookmarks.add "BMCntlRevHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
     
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 1).Range.Font.ColorIndex = wdBlack
        .Cell(3, 1).Range.Text = Translate("TestingStrategy", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMTestingStrategy" + thisControl + "WCGW" + WCGWTableCountStr
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Cell(1, 2).Range.Bookmarks.add "ControlPropType" + thisControl + "WCGW" + WCGWTableCountStr
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("ReviewYesOptionNotSelected").Range.Copy
        .Cell(2, 5).Range.Paste
        .Cell(2, 6).Range.Text = Translate("Yes", ChosenLanguage)
        docSCOTWT.Bookmarks("ReviewNoOptionNotSelected").Range.Copy
        .Cell(2, 7).Range.Paste
        .Cell(2, 8).Range.Text = Translate("No", ChosenLanguage)
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(2, 5).Range.Bookmarks.add "ReviewYes" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 6).Range.Bookmarks.add "ReviewYesB" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 7).Range.Bookmarks.add "ReviewNo" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 8).Range.Bookmarks.add "ReviewNoB" + thisControl + "WCGW" + WCGWTableCountStr
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("MainCheckTest1No").Range.Copy
        .Cell(4, 1).Range.Paste
        .Cell(4, 2).Range.Text = Translate("IndepByEY", ChosenLanguage)
        docSCOTWT.Bookmarks("MainCheckTest2No").Range.Copy
        .Cell(5, 1).Range.Paste
        .Cell(5, 2).Range.Text = Translate("ReperformByIA", ChosenLanguage)
        docSCOTWT.Bookmarks("MainCheckTest3No").Range.Copy
        .Cell(6, 1).Range.Paste
        .Cell(6, 2).Range.Text = Translate("ReviewOfIA", ChosenLanguage)
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(4, 1).Range.Bookmarks.add "CheckTest1B" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(4, 2).Range.Bookmarks.add "CheckTest1" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(5, 1).Range.Bookmarks.add "CheckTest2B" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(5, 2).Range.Bookmarks.add "CheckTest2" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(6, 1).Range.Bookmarks.add "CheckTest3B" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(6, 2).Range.Bookmarks.add "CheckTest3" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    Set rngStart = tbl.Rows(3).Range
    Set rngEnd = tbl.Rows(6).Range
    docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
    Selection.Range.Bookmarks.add "ControlPropTestRow" + thisControl + "WCGW" + WCGWTableCountStr
        
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlPropEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("ControlPropStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("ControlPropEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullControlProp" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("ControlPropStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("ControlPropEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Public Sub CreateOwnerInfo(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    Dim strTemp As String
    Dim i As Integer
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    'Control owner info
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "ControlOwnerTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Text = Translate("ControlOwnerInfo", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMControlOwnerInfo" + thisControl + "WCGW" + WCGWTableCountStr
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "CntlOwnTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "CntlOwnTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    'add in the Control tables and fill it
    tbl.Select
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlOwnStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    'if is application then show appliation only
    Selection.Range.Bookmarks.add "CntlOwnAppSecStart" + thisControl + "WCGW" + WCGWTableCountStr
    'create the application table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 2)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlOwnerAppl" + thisControl + "WCGW" + WCGWTableCountStr
        .Columns(1).Width = "100"
        .Columns(2).Width = "370"
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        
        .Cell(1, 1).Range.Text = Translate("ApplicationLabel", ChosenLanguage)
        For i = 0 To WCGWs(indexWCGW).Controls(thisControlIndex).numAppl
            If strTemp <> "" Then
                strTemp = strTemp + ", "
            End If
            strTemp = strTemp + WCGWs(indexWCGW).Controls(thisControlIndex).Appls(i)
        Next i
        .Cell(1, 2).Range.Text = strTemp
        .Cell(1, 1).Range.Bookmarks.add "BMApplicationLabel" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Select
        .Cell(1, 2).Range.Bookmarks.add "ApplicationName" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlOwnAppSecEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlOwnAppSecStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlOwnAppSecEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullCntlOwnAppSec" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlOwnAppSecStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlOwnAppSecEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        
        .Range.Bookmarks.add "CntlOwnNonAppSecStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
     
    'Control Owner stuff here
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 6, 3)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlOwner" + thisControl + "WCGW" + WCGWTableCountStr
        .Columns(1).Width = "185"
        .Columns(2).Width = "185"
        .Columns(3).Width = "100"
        .Rows(2).Cells.merge
        .Rows(3).Cells.merge
        .Rows(4).Cells.merge
        .Rows(5).Cells.merge
        .Rows(6).Cells.merge
        Set rngStart = .Cell(1, 2).Range
        Set rngEnd = .Cell(1, 3).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        
        .Cell(2, 1).Split 1, 5
        .Cell(2, 1).Width = "310"
        .Cell(2, 2).Width = "30"
        .Cell(2, 3).Width = "50"
        .Cell(2, 4).Width = "30"
        .Cell(2, 5).Width = "50"
        .Cell(2, 2).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(2, 3).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(2, 4).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(2, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(2, 1).Range.Font.ColorIndex = wdBlack
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 1).Range.Font.ColorIndex = wdBlack
        .Cell(5, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(5, 1).Range.Font.ColorIndex = wdBlack
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("MainPerYesUnSel").Range.Copy
        .Cell(2, 2).Range.Paste
        .Cell(2, 3).Range.Text = Translate("Yes", ChosenLanguage)
        docSCOTWT.Bookmarks("MainPerNoUnSel").Range.Copy
        .Cell(2, 4).Range.Paste
        .Cell(2, 5).Range.Text = Translate("No", ChosenLanguage)
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(2, 2).Range.Bookmarks.add "PersonYes" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 3).Range.Bookmarks.add "PersonYesB" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 4).Range.Bookmarks.add "PersonNo" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 5).Range.Bookmarks.add "PersonNoB" + thisControl + "WCGW" + WCGWTableCountStr
        
        .Cell(1, 1).Range.Text = Translate("NameTitleOwner", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMNameTitleOwner" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "DataOwnerName" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Text = Translate("PersonPerfromObject", ChosenLanguage)
        .Cell(2, 1).Range.Bookmarks.add "BMPersonPerfObject" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(3, 1).Range.Text = Translate("DocumentBasis", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMDocumentBasis" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(4, 1).Range.Bookmarks.add "DocBasisData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(5, 1).Range.Text = Translate("DocumentObserve", ChosenLanguage)
        .Cell(5, 1).Range.Bookmarks.add "BMDocumentObserve" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(6, 1).Range.Bookmarks.add "DocObserveData" + thisControl + "WCGW" + WCGWTableCountStr
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(5).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(6).Cells.VerticalAlignment = wdAlignVerticalCenter
        
        .Cell(2, 2).Range.Select
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlOwnNonAppSecEND" + thisControl + "WCGW" + WCGWTableCountStr
        Set rngStart = docSCOTWT.Bookmarks("CntlOwnNonAppSecStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlOwnNonAppSecEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullCntlOwnNonAppSec" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlOwnNonAppSecStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlOwnNonAppSecEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        
        .Range.Bookmarks.add "ControlOwnerEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlOwnStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("ControlOwnerEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullControlOwner" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlOwnStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("ControlOwnerEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
      
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Public Sub CreateDataUsed(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    Dim i As Integer
    Dim objDD As InlineShape
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    Selection.Range.Bookmarks.add "CntlEntDataUsedStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "ControlDataUsedTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Text = Translate("DataUsed", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMDataUsed" + thisControl + "WCGW" + WCGWTableCountStr
        .Rows(1).Cells.VerticalAlignment = wdAlignVerticalCenter
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "CntlDataUsdTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "CntlDataUsdTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlDataUsdStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    'properties stuff here
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 4, 3)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlDataUsed" + thisControl
        .Columns(1).Width = "205"
        .Columns(2).Width = "145"
        .Columns(3).Width = "120"
        
        Set rngStart = .Cell(1, 1).Range
        Set rngEnd = .Cell(1, 2).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        .Cell(1, 1).Width = "430"
        .Cell(1, 2).Width = "40"
        
        .Rows(2).Cells.merge
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 2).Range.Font.ColorIndex = wdBlack
        .Cell(1, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        .Cell(1, 2).Range.Paste
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Bookmarks.add "BMControlIPEHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
        
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 1).Range.Font.ColorIndex = wdBlack
        .Cell(3, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 2).Range.Font.ColorIndex = wdBlack
        .Cell(1, 1).Range.Text = Translate("InfoUsedExecute", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMInfoUsedExecute" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Bookmarks.add "InfoDataUsed" + thisControl + "WCGW" + WCGWTableCountStr
        
        .Cell(3, 1).Range.Text = Translate("SourceOfInfo", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMSourceOfInfo" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(3, 2).Range.Text = Translate("RelevantApplication", ChosenLanguage)
        .Cell(3, 2).Range.Bookmarks.add "BMRelApp" + thisControl + "WCGW" + WCGWTableCountStr
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("SelectRelApp").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(3, 3).Range.Paste
        .Cell(3, 3).Range.Bookmarks.add "BMRelAppSelect" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = tbl.Cell(4, 2).Range
        Set rngEnd = tbl.Cell(4, 3).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Cells.merge
        
        .Cell(4, 1).Range.Bookmarks.add "SourceData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(4, 2).Range.Bookmarks.add "BMRelAppsSelected" + thisControl + "WCGW" + WCGWTableCountStr
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlDataUsedEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlDataUsdStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("ControlDataUsedEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullControlDataUsed" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlDataUsdStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("ControlDataUsedEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        
        .Range.Bookmarks.add "CntlEntDataUsedEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlEntDataUsedStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlEntDataUsedEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "EntireCntlDataUsed" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlEntDataUsedStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlEntDataUsedEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub

Public Sub CreateConclusion(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "ControlConclusionTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Text = Translate("ControlConclusion", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMControlConclusion" + thisControl + "WCGW" + WCGWTableCountStr
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "CntlConcTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "CntlConcTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlConcStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    'Control Conclusion stuff here
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 5)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlConclusion" + thisControl
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Columns(1).Width = "310"
        .Columns(2).Width = "30"
        .Columns(3).Width = "50"
        .Columns(4).Width = "30"
        .Columns(5).Width = "50"
        .Cell(1, 1).Range.Text = Translate("ControlEffective", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMControlEffective" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(1, 3).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(1, 4).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("MainConcYesUnSel").Range.Copy
        .Cell(2, 2).Range.Paste
        .Cell(2, 3).Range.Text = Translate("Yes", ChosenLanguage)
        docSCOTWT.Bookmarks("MainConcNoUnSel").Range.Copy
        .Cell(2, 4).Range.Paste
        .Cell(2, 5).Range.Text = Translate("No", ChosenLanguage)
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(2, 2).Range.Bookmarks.add "ConcludeYes" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 3).Range.Bookmarks.add "ConcludeYesB" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 4).Range.Bookmarks.add "ConcludeNo" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 5).Range.Bookmarks.add "ConcludeNoB" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlConcEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlConcStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlConcEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullCntlConc" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlConcStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlConcEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        
         .Range.Bookmarks.add "CntlEntThisSCOTEND" + thisControl + "WCGW" + WCGWTableCountStr
        Set rngStart = docSCOTWT.Bookmarks("CntlEntThisSCOTStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlEntThisSCOTEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "EntireCntlThisSCOT" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlEntThisSCOTStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlEntThisSCOTEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
       
        .Range.Bookmarks.add "CntlEntNewAddEND" + thisControl + "WCGW" + WCGWTableCountStr
        Set rngStart = docSCOTWT.Bookmarks("CntlEntNewAddStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlEntNewAddEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "EntCntlNewAdd" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlEntNewAddStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlEntNewAddEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CreateConfirm(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id

    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "ControlConfirmTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Text = Translate("ConfirmOurUnderstanding", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMConfirmOurUnder" + thisControl + "WCGW" + WCGWTableCountStr
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "CntlConfirmTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "CntlConfirmTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlConfirmStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    'review stuff here
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 11, 2)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlReviewData" + thisControl
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 1).Range.Font.ColorIndex = wdBlack
        .Cell(5, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(5, 1).Range.Font.ColorIndex = wdBlack
        .Cell(5, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(5, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(5, 2).Range.Font.ColorIndex = wdBlack
        .Cell(7, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(7, 1).Range.Font.ColorIndex = wdBlack
        .Cell(8, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(8, 1).Range.Font.ColorIndex = wdBlack
        .Cell(10, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(10, 1).Range.Font.ColorIndex = wdBlack
        .Cell(10, 2).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(10, 1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(10, 2).Range.Font.ColorIndex = wdBlack
        .Columns(1).Width = "440"
        .Columns(2).Width = "30"
        .Rows(1).Cells.merge
        .Rows(2).Cells.merge
        .Rows(3).Cells.merge
        .Rows(4).Cells.merge
        .Rows(6).Cells.merge
        .Rows(7).Cells.merge
        .Rows(8).Cells.merge
        .Rows(9).Cells.merge
        .Rows(11).Cells.merge
        
        .Cell(1, 1).Range.Text = Translate("PersonMadeInquiry", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMPersonMadeInquiry" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Bookmarks.add "InquireOfData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(3, 1).Range.Text = Translate("TransConfirmUnderstand", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMTransConfirmUnder" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(4, 1).Range.Bookmarks.add "TransData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(5, 1).Range.Text = Translate("DescribeProcedure", ChosenLanguage)
        .Cell(5, 1).Range.Bookmarks.add "BMDescribeProcedure" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(6, 1).Range.Bookmarks.add "DescribeConfirmData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(7, 1).Range.Text = Translate("ReviewInquiries", ChosenLanguage)
        .Cell(7, 1).Range.Bookmarks.add "BMReviewInquiries" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(8, 1).Range.Text = Translate("PCAOBReview", ChosenLanguage)
        .Cell(8, 1).Range.Bookmarks.add "BMReviewPCAOB" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(9, 1).Range.Bookmarks.add "ReviewData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(10, 1).Range.Text = Translate("ReviewRef", ChosenLanguage)
        .Cell(10, 1).Range.Bookmarks.add "BMReviewRef" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(11, 1).Range.Bookmarks.add "ReviewRefData" + thisControl + "WCGW" + WCGWTableCountStr
        
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(5).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(6).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(7).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(8).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(9).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(10).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(11).Cells.VerticalAlignment = wdAlignVerticalCenter
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(5, 2).Select
    End With
    
    Selection.Collapse wdCollapseStart
    Selection.Paste
    tbl.Cell(5, 2).Range.Bookmarks.add "BMCntConfHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
    tbl.Cell(10, 2).Select
    Selection.Collapse wdCollapseStart
    Selection.Paste
    tbl.Cell(10, 2).Range.Bookmarks.add "BMCntConfHelpRef" + thisControl + "WCGW" + WCGWTableCountStr
    
    Set rngStart = tbl.Rows(7).Range
    Set rngEnd = tbl.Rows(11).Range
    docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
    Selection.Range.Bookmarks.add "FullConfirmReviewSec" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Collapse direction:=wdCollapseEnd
    
    tbl.Rows(7).Range.Bookmarks.add "FullConfirmReviewGam" + thisControl + "WCGW" + WCGWTableCountStr
    tbl.Rows(8).Range.Bookmarks.add "FullConfirmReviewPCA" + thisControl + "WCGW" + WCGWTableCountStr
    
    Set rngStart = tbl.Rows(10).Range
    Set rngEnd = tbl.Rows(11).Range
    docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
    Selection.Range.Bookmarks.add "FullConfirmReviewRef" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Collapse direction:=wdCollapseEnd
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlConfirmEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("ControlConfirmStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("ControlConfirmEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullControlConfirm" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("ControlConfirmStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("ControlConfirmEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    Exit Sub
    
errHandler:
    Resume Next
       
End Sub

Public Sub CreateOthersSection(thisControlIndex As Integer, indexWCGW As Integer, relatedWCGWs As String)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    Selection.Range.Bookmarks.add "CntlEntThisSCOTStart" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Range.Bookmarks.add "CntlEntOthersSecStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 4)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "OthersSectionTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Columns(1).Width = "20"
        .Columns(2).Width = "20"
        .Columns(3).Width = "440"
        .Columns(4).Width = "30"
        .Cell(1, 3).Range.Text = Translate("OthersSection", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMOthersSection" + thisControl + "WCGW" + WCGWTableCountStr
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 4).Range.Paste
        .Cell(1, 4).Range.Bookmarks.add "BMOtherSCOTHelpCell" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 4).Range.Cells.Shading.BackgroundPatternColor = RGB(191, 191, 191)  'wdGray25
        .Cell(1, 3).Borders(wdBorderRight).Visible = False
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "OthersSecTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "OthersSecTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "OthersSectionStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    
    'Others Section stuff here
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 1)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "OthersSection" + thisControl
        .Columns(1).Width = "470"
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = CanvasBlue
                
        .Cell(1, 1).Range.Text = relatedWCGWs
        .Cell(1, 1).Range.Bookmarks.add "BMrelatedOnes" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "OthersSectionEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("OthersSectionStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("OthersSectionEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullOthersSection" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("OthersSectionStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("OthersSectionEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        .Range.Bookmarks.add "CntlEntOthersSecEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlEntOthersSecStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlEntOthersSecEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "EntCntlOthersSec" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlEntOthersSecStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlEntOthersSecEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CreateSCOTSection(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    Selection.Range.Bookmarks.add "CntlEntNewAddStart" + thisControl + "WCGW" + WCGWTableCountStr
    Selection.Range.Bookmarks.add "OtherSCOTStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 2, 5)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "OtherSCOT" + thisControl
        .Columns(1).Width = "330"
        .Columns(2).Width = "30"
        .Columns(3).Width = "40"
        .Columns(4).Width = "30"
        .Columns(5).Width = "40"
        Set rngStart = .Cell(2, 2).Range
        Set rngEnd = .Cell(2, 5).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        .Cell(1, 2).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(1, 3).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Cell(1, 4).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(2, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(2, 1).Range.Font.ColorIndex = wdBlack
                
        .Cell(1, 1).Range.Text = Translate("InAnotherSCOT", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMInAnotherSCOT" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Text = Translate("WPReference", ChosenLanguage)
        .Cell(2, 1).Range.Bookmarks.add "BMWPReference" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 2).Range.Bookmarks.add "BMWPRefData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphRight
        .Cell(1, 4).Range.ParagraphFormat.Alignment = wdAlignParagraphRight
        
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("InSCOTYesOptionNotSelected").Range.Copy
        .Cell(1, 2).Range.Paste
        .Cell(1, 3).Range.Text = Translate("Yes", ChosenLanguage)
        docSCOTWT.Bookmarks("InSCOTNoOptionSelected").Range.Copy
        .Cell(1, 4).Range.Paste
        .Cell(1, 5).Range.Text = Translate("No", ChosenLanguage)
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 2).Range.Bookmarks.add "InSCOTYes" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Bookmarks.add "InSCOTYesB" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 4).Range.Bookmarks.add "InSCOTNo" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 5).Range.Bookmarks.add "InSCOTNoB" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    
    tbl.Rows(2).Range.Bookmarks.add "BMWPReferenceRow" + thisControl + "WCGW" + WCGWTableCountStr

    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "OtherSCOTEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("OtherSCOTStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("OtherSCOTEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullOtherSCOT" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("OtherSCOTStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("OtherSCOTEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CreateAlreadyAdded(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim thisControl As String
    Dim relatedWCGWs As String
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    Selection.Range.Bookmarks.add "CntlEntAlrdyAddStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 2, 3)
    
    'format table
    Call SetTableFormat(tbl, False, 30)
    
    With tbl
        .Title = "AlreadyAddedTable" + thisControl + "WCGW" + WCGWTableCountStr
        '.Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColor = MessageYellow
        .Cell(1, 3).Range.Font.ColorIndex = wdBlack
        .Cell(1, 3).Range.Font.Bold = True
        .Cell(2, 3).Range.Cells.Shading.BackgroundPatternColor = MessageYellow
        .Cell(2, 3).Range.Font.ColorIndex = wdBlack
        .Cell(2, 3).Range.Font.Bold = False
        .Cell(1, 1).Width = "20"
        .Cell(1, 2).Width = "20"
        .Cell(1, 3).Width = "470"
        .Cell(2, 1).Width = "20"
        .Cell(2, 2).Width = "20"
        .Cell(2, 3).Width = "470"
        .Cell(1, 1).Borders(wdBorderTop).Visible = False
        .Cell(1, 1).Borders(wdBorderBottom).Visible = False
        .Cell(1, 1).Borders(wdBorderLeft).Visible = False
        .Cell(1, 1).Borders(wdBorderRight).Visible = False
        .Cell(1, 2).Borders(wdBorderTop).Visible = False
        .Cell(1, 2).Borders(wdBorderBottom).Visible = False
        .Cell(1, 2).Borders(wdBorderLeft).Visible = False
        .Cell(1, 3).Borders(wdBorderBottom).Visible = False
        .Cell(2, 3).Borders(wdBorderTop).Visible = False
        
        .Cell(2, 1).Borders(wdBorderTop).Visible = False
        .Cell(2, 1).Borders(wdBorderBottom).Visible = False
        .Cell(2, 1).Borders(wdBorderLeft).Visible = False
        .Cell(2, 1).Borders(wdBorderRight).Visible = False
        .Cell(2, 2).Borders(wdBorderTop).Visible = False
        .Cell(2, 2).Borders(wdBorderBottom).Visible = False
        .Cell(2, 2).Borders(wdBorderLeft).Visible = False
        .Cell(1, 3).Range.Text = Translate("AlreadyAdded", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMAlreadyAdded" + thisControl + "WCGW" + WCGWTableCountStr
        
    End With
        
    Dim i As Integer
    Dim j As Integer
    Dim MainWCGWName As String
    Dim MainControlId As String
    Dim MainWCGWNbr As String
    Dim thisBM As Bookmark
    Dim linkRange As Range
    
    For i = 0 To NumWCGWs
        'don't count this WCGW's controls
        If i <> indexWCGW Then
            If WCGWs(i).isPlaced Then
                'see if this control is in there
                For j = 0 To WCGWs(i).numControls
                    If WCGWs(i).Controls(j).id = WCGWs(indexWCGW).Controls(thisControlIndex).id And WCGWs(i).Controls(j).isMainDoc Then
                        MainWCGWName = WCGWs(i).name
                        MainControlId = WCGWs(i).Controls(j).id
                        Exit For
                    End If
                Next j
            End If
        End If
    Next i
    
    'find the place for this WCGW
    For Each thisBM In docSCOTWT.Bookmarks
        If InStr(thisBM.name, "BMWCGWName") <> 0 Then
            If LCase(CleanBM(thisBM.Range.Text)) = LCase(MainWCGWName) Then
                 MainWCGWNbr = Replace(thisBM.name, "BMWCGWName", "")
            End If
        End If
    Next
    
    Set linkRange = tbl.Cell(2, 3).Range
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
    docSCOTWT.Bookmarks("MainHere").Range.Copy
    'then paste here
    linkRange.Paste
    linkRange.Bookmarks.add "BMHere" & WCGWTableCountStr & "ZZ" & MainControlId & "WCGW" & MainWCGWNbr
    
    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "CntlEntAlrdyAddEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlEntAlrdyAddStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlEntAlrdyAddEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "EntCntlAlrdyAdd" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlEntAlrdyAddStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlEntAlrdyAddEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub CreateReview(thisControlIndex As Integer, indexWCGW As Integer)
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim i As Integer
    Dim thisControl As String
    
    thisControl = WCGWs(indexWCGW).Controls(thisControlIndex).id
    
    Selection.Range.Bookmarks.add "CntlEntReviewStart" + thisControl + "WCGW" + WCGWTableCountStr
    
    'Control properties
    'add in the control table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 1, 3)
    
    'format table
    Call SetTableFormat(tbl, True, 30)
    
    With tbl
        .Title = "ControlReviewTable" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 3).Range.Text = Translate("ReviewControls", ChosenLanguage)
        .Cell(1, 3).Range.Bookmarks.add "BMReviewControls" + thisControl + "WCGW" + WCGWTableCountStr
        
        'set bookmarks
        .Cell(1, 1).Range.Bookmarks.add "CntlRevTableShow" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(1, 2).Range.Bookmarks.add "CntlRevTableHide" + thisControl + "WCGW" + WCGWTableCountStr
    End With
    
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlReviewStart" + thisControl + "WCGW" + WCGWTableCountStr
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
   
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 4, 1)
    
    'format table
    Call SetTableFormat(tbl, False, 70)
    
    With tbl
        .Title = "ControlReviewQues" + thisControl + "WCGW" + WCGWTableCountStr
        .Columns(1).Width = "470"
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(1, 1).Range.Font.ColorIndex = wdBlack
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColor = HeaderBackColor
        .Cell(3, 1).Range.Font.ColorIndex = wdBlack
        
        .Cell(1, 1).Range.Text = Translate("PrecAndSens", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMPrecAndSens" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(2, 1).Range.Bookmarks.add "PreAndSenData" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(3, 1).Range.Text = Translate("DescribeResults", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMDescribeResults" + thisControl + "WCGW" + WCGWTableCountStr
        .Cell(4, 1).Range.Bookmarks.add "ResultsData" + thisControl + "WCGW" + WCGWTableCountStr
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
    End With
        
    tbl.Select
    'need to add the final bookmarks
    With Selection
        .Collapse wdCollapseEnd
        .Range.Bookmarks.add "ControlReviewEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("ControlReviewStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("ControlReviewEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "FullControlReview" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("ControlReviewStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("ControlReviewEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        
        .Range.Bookmarks.add "CntlEntReviewEND" + thisControl + "WCGW" + WCGWTableCountStr
        
        Set rngStart = docSCOTWT.Bookmarks("CntlEntReviewStart" + thisControl + "WCGW" + WCGWTableCountStr).Range
        Set rngEnd = docSCOTWT.Bookmarks("CntlEntReviewEND" + thisControl + "WCGW" + WCGWTableCountStr).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        .Range.Bookmarks.add "EntireControlReview" + thisControl + "WCGW" + WCGWTableCountStr
        .Collapse direction:=wdCollapseEnd
        docSCOTWT.Bookmarks("CntlEntReviewStart" + thisControl + "WCGW" + WCGWTableCountStr).Delete
        docSCOTWT.Bookmarks("CntlEntReviewEND" + thisControl + "WCGW" + WCGWTableCountStr).Delete
    
        Do While .Tables.count > 0
            .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Loop
        .Range.Text = vbCrLf
    End With
    Exit Sub
    
errHandler:
    Resume Next
       
End Sub

Public Sub HideMe()
    Dim thisBM As Bookmark
    Dim thisWCGWNum As String
    Dim thisFF As Field
    Dim tempStr As String
    
    Call TurnOffTrackChanges
    Set thisFF = Selection.Fields(1)
    Set thisBM = Selection.Bookmarks(Selection.Bookmarks.count)
    
    With docSCOTWT
        Select Case thisBM.name
            Case "HideRisks"
                .Bookmarks("SigRisks").Range.Font.Hidden = True
                .Bookmarks("ShowRisks").Range.Font.Hidden = False
                .Bookmarks("HideRisks").Range.Font.Hidden = True
            Case "HideChars"
                .Bookmarks("ScotChars").Range.Font.Hidden = True
                .Bookmarks("ShowChars").Range.Font.Hidden = False
                .Bookmarks("HideChars").Range.Font.Hidden = True
            Case "HideDocumentation"
                .Bookmarks("DocConsiderations").Range.Font.Hidden = True
                .Bookmarks("ShowDocumentation").Range.Font.Hidden = False
                .Bookmarks("HideDocumentation").Range.Font.Hidden = True
            Case "HideConclusions"
                .Bookmarks("ConclusionSection").Range.Font.Hidden = True
                .Bookmarks("ShowConclusions").Range.Font.Hidden = False
                .Bookmarks("HideConclusions").Range.Font.Hidden = True
            Case Else 'WCGWs
                If InStr(thisFF.Code.Text, "HideMe") <> 0 Then
                    If InStr(thisBM.name, "EntireSection") <> 0 Or InStr(thisBM.name, "ControlsTableHide") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "EntireSection", ""), "ControlsTableHide", "")
                        .Bookmarks("FullControl" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlsTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlsTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "ControlPropTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "ControlPropTableShow", ""), "ControlPropTableHide", "")
                        .Bookmarks("FullControlProp" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlPropTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlPropTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlOwnTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlOwnTableShow", ""), "CntlOwnTableHide", "")
                        .Bookmarks("FullControlOwner" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlOwnTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlOwnTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlDataUsdTable") <> 0 Or InStr(thisBM.name, "EntireCntlDataUsed") <> 0 Then
                        tempStr = Replace(Replace(Replace(thisBM.name, "CntlDataUsdTableShow", ""), "CntlDataUsdTableHide", ""), "EntireCntlDataUsed", "")
                        .Bookmarks("FullControlDataUsed" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlDataUsdTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlDataUsdTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlConcTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlConcTableShow", ""), "CntlConcTableHide", "")
                        .Bookmarks("FullCntlConc" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConcTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConcTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlConfirmTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlConfirmTableShow", ""), "CntlConfirmTableHide", "")
                        .Bookmarks("FullControlConfirm" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConfirmTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConfirmTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlRevTable") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "CntlRevTableShow", ""), "CntlRevTableHide", "")
                        .Bookmarks("FullControlReview" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlRevTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "EntireControlReview") <> 0 Then
                        tempStr = Replace(thisBM.name, "EntireControlReview", "")
                        .Bookmarks("FullControlReview" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlRevTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "EntCntlOthersSec") <> 0 Or InStr(thisBM.name, "EntireCntlThisSCOT") <> 0 Then
                        tempStr = Replace(Replace(thisBM.name, "EntCntlOthersSec", ""), "EntireCntlThisSCOT", "")
                        .Bookmarks("FullOthersSection" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("OthersSecTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("OthersSecTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "FullControl") <> 0 Then
                        tempStr = Replace(thisBM.name, "FullControl", "")
                        .Bookmarks("FullOtherSCOT" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("OtherSCOTTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("OtherSCOTTableShow" + tempStr).Range.Font.Hidden = False
                    Else
                        'show it
                        tempStr = Replace(Replace(Replace(Replace(thisBM.name, "WCGWTableHide", ""), "WCGWDelete", ""), "EntireWCGW", ""), "WCGWTableShow", "")
                        .Bookmarks("WCGWAsserts" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("WCGWTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("WCGWTableShow" + tempStr).Range.Font.Hidden = False
                    End If
                End If
        End Select
    End With
    Call ResetTrackChangesValues
    
End Sub

Public Sub DeleteRow()
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisTbl As Word.Table
    Dim i As Integer
    Dim curAlpha As String
    Dim thisRow As Integer
    Dim thisBM2 As Bookmark
    Dim thisControl As String
    Dim myBMs As Bookmarks
    Dim thisGrid As String
    Dim objDD As InlineShape
    Dim objDD1 As MSForms.CheckBox
    Dim objDD2 As MSForms.CheckBox
    Dim objDD3 As MSForms.CheckBox
    Dim objDD4 As MSForms.CheckBox
    Dim tempHold As String
    Dim holdShapes As InlineShapes
    Dim thisData As String
    
    If Not gPullingDocument Then
        If MsgBox(Translate("SureDeleteRow", ChosenLanguage), vbYesNo) = vbNo Then
            Exit Sub
        End If
    End If
    
    Call TurnOffTrackChanges
    Application.ScreenUpdating = False
    
    thisGrid = ""
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "ControlPropDel") <> 0 Then
            thisGrid = "ControlPropDel"
            thisData = "ControlPropData"
        ElseIf InStr(thisBM.name, "ControlDesDel") <> 0 Then
            thisGrid = "ControlDesDel"
            thisData = "ControlDesData"
        End If
        If thisGrid <> "" Then
            thisControl = Left(Replace(thisBM.name, thisGrid, ""), InStr(Replace(thisBM.name, thisGrid, ""), "ROW") - 1)
            thisRow = CInt(Replace(thisBM.name, thisGrid + thisControl + "ROW", ""))
            
            Set thisTbl = Selection.Tables(1)
            thisTbl.Rows(thisRow).Delete
            
            'rebookmark the deletes
            Set myBMs = docSCOTWT.Bookmarks
            For Each thisBM2 In myBMs
                If InStr("" & thisBM2.name, thisGrid + thisControl) > 0 Or InStr("" & thisBM2.name, thisData + thisControl) > 0 Then
                    docSCOTWT.Bookmarks(thisBM2.name).Delete
                End If
            Next
            
            If thisGrid = "ControlDesDel" Then
                For i = thisRow To thisTbl.Rows.count
                    docSCOTWT.Bookmarks("BMCheckInqB" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckInq" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckObsB" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckObs" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckInsB" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckIns" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckRepB" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    docSCOTWT.Bookmarks("BMCheckRep" + thisControl + "ROW" + Trim(str(i + 1))).Delete
                    thisTbl.Cell(i, 4).Tables(1).Cell(1, 1).Range.Bookmarks.add "BMCheckInqB" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(1, 2).Range.Bookmarks.add "BMCheckInq" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(1, 3).Range.Bookmarks.add "BMCheckObsB" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(1, 4).Range.Bookmarks.add "BMCheckObs" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(2, 1).Range.Bookmarks.add "BMCheckInsB" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(2, 2).Range.Bookmarks.add "BMCheckIns" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(2, 3).Range.Bookmarks.add "BMCheckRepB" + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 4).Tables(1).Cell(2, 4).Range.Bookmarks.add "BMCheckRep" + thisControl + "ROW" + Trim(str(i))
                Next i
            End If
            
            'realpha the table & add odd row coloring & rename the checkboxes
            curAlpha = "A"
            For i = 2 To thisTbl.Rows.count
                thisTbl.Cell(i, 2).Range.Text = curAlpha
                curAlpha = GetNextAlpha(curAlpha)
                If i < thisTbl.Rows.count Then
                    thisTbl.Cell(i, 1).Range.Bookmarks.add thisGrid + thisControl + "ROW" + Trim(str(i))
                    thisTbl.Cell(i, 3).Range.Bookmarks.add thisData + thisControl + "ROW" + Trim(str(i))
                Else
                    thisTbl.Cell(i, 3).Range.Bookmarks.add thisData + thisControl + "ROW" + Trim(str(i))
                End If
                'color it
                If (i Mod 2) <> 0 Then
                    'odd row
                    thisTbl.Cell(i, 2).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
                    thisTbl.Cell(i, 3).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
                Else
                    'even row
                    thisTbl.Cell(i, 2).Range.Cells.Shading.BackgroundPatternColor = vbWhite
                    thisTbl.Cell(i, 3).Range.Cells.Shading.BackgroundPatternColor = vbWhite
                End If
            Next i
            
            Exit For
        End If
    Next
    Application.ScreenUpdating = True
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    MsgBox "error:" + Trim(str(Err.Number)) + ": " + Err.Description
    Resume Next 'last
    
End Sub

Public Sub AddRow()
    
    Dim thisBM As Bookmark
    Dim thisTbl As Word.Table
    Dim curAlpha As String
    Dim nextAlpha As String
    Dim thisControl As String
    Dim thisGrid As String
    Dim thisGridDel As String
    Dim objDD As InlineShape
    Dim objOB As InlineShape
    Dim objOB1 As InlineShape
    Dim objOB2 As InlineShape
    Dim objOB3 As InlineShape
    Dim objOB4 As InlineShape
    Dim newRow As Integer
    Dim thisChkRow As String
    Dim thisData As String
    Dim tbl2 As Table
    
    Call TurnOffTrackChanges
    Application.ScreenUpdating = False
    For Each thisBM In Selection.Bookmarks
        If InStr(thisBM.name, "ControlPropAdd") <> 0 Then
            thisGrid = "ControlPropAdd"
            thisGridDel = "ControlPropDel"
            thisData = "ControlPropData"
        ElseIf InStr(thisBM.name, "ControlDesAdd") <> 0 Then
            thisGrid = "ControlDesAdd"
            thisGridDel = "ControlDesDel"
            thisData = "ControlDesData"
        End If
        If thisGrid <> "" Then
            thisControl = Replace(thisBM.name, thisGrid, "")
            
            Set thisTbl = Selection.Tables(1)
            curAlpha = Left(Trim(thisTbl.Cell(thisTbl.Rows.count, 2).Range.Text), 1)
            thisTbl.Rows.add
            nextAlpha = GetNextAlpha(curAlpha)
            thisTbl.Cell(thisTbl.Rows.count, 2).Range.Text = nextAlpha
            newRow = thisTbl.Rows.count
            
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("DeleteRowLink").Range.Copy
            thisTbl.Cell(newRow - 1, 1).Range.Paste
            docSCOTWT.Bookmarks("AddRowLink").Range.Copy
            thisTbl.Cell(newRow, 1).Range.Paste
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    
            If thisGrid = "ControlDesAdd" Then
                thisTbl.Cell(newRow, 4).Range.Select
                
                Selection.Collapse wdCollapseStart
                Set tbl2 = docSCOTWT.Tables.add(Selection.Range, 2, 4)
                
                'format table
                With tbl2.Range.ParagraphFormat
                    .CharacterUnitLeftIndent = 0.1
                    .CharacterUnitRightIndent = 0.1
                    .LineUnitBefore = 0.1
                    .LineUnitAfter = 0.1
                End With
                
                With tbl2
                    .AllowAutoFit = False
                    .Columns(1).Width = "35"
                    .Columns(2).Width = "68"
                    .Columns(3).Width = "35"
                    .Columns(4).Width = "92"
                    
                    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
                    docSCOTWT.Bookmarks("MainCheck1No").Range.Copy
                    .Cell(1, 1).Range.Paste
                    .Cell(1, 2).Range.Text = Translate("Inquiry", ChosenLanguage)
                    docSCOTWT.Bookmarks("MainCheck2No").Range.Copy
                    .Cell(1, 3).Range.Paste
                    .Cell(1, 4).Range.Text = Translate("Observation", ChosenLanguage)
                    docSCOTWT.Bookmarks("MainCheck3No").Range.Copy
                    .Cell(2, 1).Range.Paste
                    .Cell(2, 2).Range.Text = Translate("Inspection", ChosenLanguage)
                    docSCOTWT.Bookmarks("MainCheck4No").Range.Copy
                    .Cell(2, 3).Range.Paste
                    .Cell(2, 4).Range.Text = Translate("Reperformance", ChosenLanguage)
                    docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
                    .Cell(1, 1).Range.Bookmarks.add "BMCheckInqB" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(1, 2).Range.Bookmarks.add "BMCheckInq" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(1, 3).Range.Bookmarks.add "BMCheckObsB" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(1, 4).Range.Bookmarks.add "BMCheckObs" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(2, 1).Range.Bookmarks.add "BMCheckInsB" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(2, 2).Range.Bookmarks.add "BMCheckIns" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(2, 3).Range.Bookmarks.add "BMCheckRepB" + thisControl + "ROW" + Trim(str(newRow))
                    .Cell(2, 4).Range.Bookmarks.add "BMCheckRep" + thisControl + "ROW" + Trim(str(newRow))
                    
                End With
            End If
    
            docSCOTWT.Bookmarks(thisGrid + thisControl).Delete
            thisTbl.Cell(newRow - 1, 1).Range.Bookmarks.add thisGridDel + thisControl + "ROW" + Trim(str(newRow - 1))
            thisTbl.Cell(newRow, 1).Range.Bookmarks.add thisGrid + thisControl
            If docSCOTWT.Bookmarks.Exists(thisData + thisControl + "ROW" + Trim(str(newRow - 1))) Then
                docSCOTWT.Bookmarks(thisData + thisControl + "ROW" + Trim(str(newRow - 1))).Delete
                thisTbl.Cell(newRow - 1, 3).Range.Bookmarks.add thisData + thisControl + "ROW" + Trim(str(newRow - 1))
                thisTbl.Cell(newRow, 3).Range.Bookmarks.add thisData + thisControl + "ROW" + Trim(str(newRow))
            End If
            Application.ScreenUpdating = False
            
            'color it
            If (newRow Mod 2) <> 0 Then
                'odd row
                thisTbl.Cell(newRow, 2).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
                thisTbl.Cell(newRow, 3).Range.Cells.Shading.BackgroundPatternColor = GridOddRowGray
            Else
                'even row
                thisTbl.Cell(newRow, 2).Range.Cells.Shading.BackgroundPatternColor = vbWhite
                thisTbl.Cell(newRow, 3).Range.Cells.Shading.BackgroundPatternColor = vbWhite
            End If
            
            Exit For
        End If
    Next
    Application.ScreenUpdating = True
    Call ResetTrackChangesValues
    
End Sub

Public Function GetNextAlpha(thisAlpha As String) As String
'thisAlpha can be a letter or number, then send back the letter or number that is the next letter in the alphabet

    Select Case UCase(Trim(thisAlpha))
        Case "A"
            GetNextAlpha = "B"
        Case "B"
            GetNextAlpha = "C"
        Case "C"
            GetNextAlpha = "D"
        Case "D"
            GetNextAlpha = "E"
        Case "E"
            GetNextAlpha = "F"
        Case "F"
            GetNextAlpha = "G"
        Case "G"
            GetNextAlpha = "H"
        Case "H"
            GetNextAlpha = "I"
        Case "I"
            GetNextAlpha = "J"
        Case "J"
            GetNextAlpha = "K"
        Case "K"
            GetNextAlpha = "L"
        Case "L"
            GetNextAlpha = "M"
        Case "M"
            GetNextAlpha = "N"
        Case "N"
            GetNextAlpha = "O"
        Case "O"
            GetNextAlpha = "P"
        Case "P"
            GetNextAlpha = "Q"
        Case "Q"
            GetNextAlpha = "R"
        Case "R"
            GetNextAlpha = "S"
        Case "S"
            GetNextAlpha = "T"
        Case "T"
            GetNextAlpha = "U"
        Case "U"
            GetNextAlpha = "V"
        Case "V"
            GetNextAlpha = "W"
        Case "W"
            GetNextAlpha = "X"
        Case "X"
            GetNextAlpha = "Y"
        Case "Y"
            GetNextAlpha = "Z"
        Case "Z"
            GetNextAlpha = "A"
        Case "1"
            GetNextAlpha = "B"
        Case "2"
            GetNextAlpha = "C"
        Case "3"
            GetNextAlpha = "D"
        Case "4"
            GetNextAlpha = "E"
        Case "5"
            GetNextAlpha = "F"
        Case "6"
            GetNextAlpha = "G"
        Case "7"
            GetNextAlpha = "H"
        Case "8"
            GetNextAlpha = "I"
        Case "9"
            GetNextAlpha = "J"
        Case "10"
            GetNextAlpha = "K"
        Case "11"
            GetNextAlpha = "L"
        Case "12"
            GetNextAlpha = "M"
        Case "13"
            GetNextAlpha = "N"
        Case "14"
            GetNextAlpha = "O"
        Case "15"
            GetNextAlpha = "P"
        Case "16"
            GetNextAlpha = "Q"
        Case "17"
            GetNextAlpha = "R"
        Case "18"
            GetNextAlpha = "S"
        Case "19"
            GetNextAlpha = "T"
        Case "20"
            GetNextAlpha = "U"
        Case "21"
            GetNextAlpha = "V"
        Case "22"
            GetNextAlpha = "W"
        Case "23"
            GetNextAlpha = "X"
        Case "24"
            GetNextAlpha = "Y"
        Case "25"
            GetNextAlpha = "Z"
        Case "26"
            GetNextAlpha = "A"
        Case Else
            GetNextAlpha = thisAlpha
    End Select

End Function

Public Sub DeleteMe()
On Error GoTo errHandler
    
    Dim thisBM As Bookmark
    Dim BMName As String
    Dim thisSelection As Word.Range
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim m As Integer
    Dim tempString As String
    Dim curRow As Integer
    Dim newMainOne As String
    Dim oldMainOne As String
    Dim thisWCGWID As Integer
    Dim thisControlID As Integer
    Dim numRename As Integer
    Dim toRename() As RenamePair
    Dim strFromlink As String
    Dim strTolink As String
    Dim thisControl As String
    Dim thisWCGW As String
    Dim unHide As Boolean
    
    Call CheckForOpenEmbedded
    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    End If
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    numRename = -1
    Set thisSelection = Selection.Range
    
    For Each thisBM In thisSelection.Bookmarks
        BMName = thisBM.name
        Select Case BMName
            Case "HideOtherObserve"
                Call TurnOffTrackChanges
                docSCOTWT.Bookmarks("OtherConsiderations").Range.Font.Hidden = True
                Call ResetTrackChangesValues
            Case Else 'WCGWs
                If InStr(BMName, "WCGWDelete") <> 0 Then
                    If Not ForceDelete Then
                        If MsgBox(Translate("AreYouSureDeleteWCGW", ChosenLanguage), vbYesNo) = vbNo Then
                            Exit Sub
                        End If
                        frmStatusWindow.lblMessage.Caption = Translate("WaitDeleteMessage", ChosenLanguage)
                        frmStatusWindow.Show (False)
                    End If
                    
                    Call TurnOffTrackChanges
                    'Find the index to the correct WCGW
                    thisWCGWID = GetWCGWIndex(Replace(BMName, "WCGWDelete", ""))
                    
                    'If NumWCGWs < 1 Then
                        Call LoadDataToArrays
                    'End If
                    WCGWs(thisWCGWID).isPlaced = False
                     
                    Call CheckForOpenEmbedded
                    tempString = ""
                    
                    'now to make sure the user didn't delete something from the form, lets make sure our arrays are up to date
                    For i = 0 To NumWCGWs
                        If WCGWs(i).isPlaced Then
                            'check to make sure it exists
                            If Not docSCOTWT.Bookmarks.Exists("WCGWDelete" + WCGWs(i).id) Then
                                'then we need to fix array and data
                                WCGWs(i).isPlaced = False
                                For j = 0 To WCGWs(i).numControls
                                   If WCGWs(i).Controls(j).isMainDoc Then
                                        WCGWs(i).Controls(j).isMainDoc = False
                                    End If
                                Next j
                                curRow = 2
                                Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
                                    If WCGWs(i).id = shSCOTWCGWs.Cells(curRow, 1).value Then
                                        shSCOTWCGWs.Cells(curRow, 11).value = ""
                                        shSCOTWCGWs.Cells(curRow, 12).value = ""
                                        Exit Do
                                    End If
                                    curRow = curRow + 1
                                Loop
                            End If
                        End If
                    Next i
                    
                    'find if any controls are Main ones and move them.
                    For j = 0 To WCGWs(thisWCGWID).numControls
                        If WCGWs(thisWCGWID).Controls(j).isMainDoc Then
                            'need to check if there are others out there
                            For k = 0 To NumWCGWs
                                If k <> thisWCGWID And WCGWs(k).isPlaced Then
                                    For m = 0 To WCGWs(k).numControls
                                        If WCGWs(k).Controls(m).id = WCGWs(thisWCGWID).Controls(j).id Then
                                            'then this is on doc...need to move all the data over.
                                            WCGWs(k).Controls(m).isMainDoc = True
                                            oldMainOne = WCGWs(thisWCGWID).id + "|" + WCGWs(thisWCGWID).Controls(j).id
                                            newMainOne = WCGWs(k).id + "|" + WCGWs(k).Controls(m).id
                                            curRow = 2
                                            Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
                                                If oldMainOne = shSCOTWCGWs.Cells(curRow, 10).value Then
                                                    shSCOTWCGWs.Cells(curRow, 11).value = ""
                                                    shSCOTWCGWs.Cells(curRow, 12).value = ""
                                                ElseIf newMainOne = shSCOTWCGWs.Cells(curRow, 10).value Then
                                                    shSCOTWCGWs.Cells(curRow, 12).value = "X"
                                                End If
                                                curRow = curRow + 1
                                            Loop
                                            'Call SaveEmbedded
                                            
                                            'move all data from deleting control to new main control
                                            Call MoveControlData(WCGWs(thisWCGWID).id, WCGWs(thisWCGWID).Controls(j).id, WCGWs(k).id, WCGWs(k).Controls(m).id)
    
                                            strFromlink = WCGWs(thisWCGWID).Controls(j).id + "WCGW" + WCGWs(thisWCGWID).id
                                            strTolink = WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id
                                            numRename = numRename + 1
                                            ReDim Preserve toRename(numRename) As RenamePair
                                            toRename(numRename).FromStr = strFromlink
                                            toRename(numRename).ToStr = strTolink
                                            
                                            GoTo nextControl
                                        End If
                                    Next m
                                End If
                            Next k
nextControl:
                            WCGWs(thisWCGWID).Controls(j).isMainDoc = False
                        End If
                    Next j
                    
                    'make sure this one is reset
                    curRow = 2
                    Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
                        If WCGWs(thisWCGWID).id = shSCOTWCGWs.Cells(curRow, 1).value Then
                            shSCOTWCGWs.Cells(curRow, 11).value = ""
                            shSCOTWCGWs.Cells(curRow, 12).value = ""
                        End If
                        curRow = curRow + 1
                    Loop
                        
                    docSCOTWT.Bookmarks("EntireWCGW" + Replace(BMName, "WCGWDelete", "")).Range.Delete
                    
                    'rename copied controls
                    For i = 0 To numRename
                        Call RenameCopiedControl(toRename(i).FromStr, toRename(i).ToStr)
                    Next i
                    
                    'go back through and redo links to controls
                    For i = 0 To NumWCGWs
                        If WCGWs(i).isPlaced Then
                            thisWCGW = WCGWs(i).id
                            For j = 0 To WCGWs(i).numControls
                                If WCGWs(i).Controls(j).isMainDoc Then
                                    'need to check if there are others out there
                                    thisControl = WCGWs(i).Controls(j).id
                                    For k = 0 To NumWCGWs
                                        If k <> i And WCGWs(k).isPlaced Then
                                            For m = 0 To WCGWs(k).numControls
                                                If WCGWs(k).Controls(m).id = WCGWs(i).Controls(j).id Then
                                                    'this link needs to be updated
                                                    
                                                    If docSCOTWT.Bookmarks("BMAlreadyAdded" + WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id).Range.Font.Hidden Then
                                                        docSCOTWT.Bookmarks("BMAlreadyAdded" + WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id).Range.Font.Hidden = False
                                                        unHide = True
                                                    End If
                                                    
                                                    docSCOTWT.Bookmarks("BMAlreadyAdded" + WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id).Range.Text = Translate("AlreadyAdded", ChosenLanguage)
                                               
                                                    docSCOTWT.Bookmarks("BMAlreadyAdded" + WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id).Range.Select
                                                    With Selection.find
                                                        .Forward = True
                                                        .Wrap = wdFindStop
                                                        .Text = "here"
                                                        .Execute
                                                    End With
                                                    
                                                    docSCOTWT.Hyperlinks.add Anchor:=Selection.Range, SubAddress:="BMControlName" + thisControl + "WCGW" + thisWCGW
                                                    If unHide Then
                                                        docSCOTWT.Bookmarks("BMAlreadyAdded" + WCGWs(k).Controls(m).id + "WCGW" + WCGWs(k).id).Range.Font.Hidden = True
                                                    End If
                                                End If
                                            Next m
                                        End If
                                    Next k
                                End If
                            Next j
                        End If
                    Next i
                    Call ResetTrackChangesValues
                    
                    If Not ForceDelete Then
                        Unload frmStatusWindow
                    End If

                ElseIf InStr(BMName, "WTDelete") <> 0 Then
                    If InStr(BMName, "WTDeleteMain") <> 0 Then
                        If MsgBox(Translate("MainWTDeleteMsg", ChosenLanguage), vbYesNo, Translate("ConfirmDeleteTitle", ChosenLanguage)) = vbNo Then
                            Exit Sub
                        End If
                    Else
                        If MsgBox(Translate("AreYouSureDeleteWT", ChosenLanguage), vbYesNo, Translate("ConfirmDeleteTitle", ChosenLanguage)) = vbNo Then
                            Exit Sub
                        End If
                    End If
                    Call TurnOffTrackChanges
                    docSCOTWT.Bookmarks("EntireWT" + Replace(BMName, "WTDelete", "")).Range.Rows.Delete
                    Call ResetTrackChangesValues
                ElseIf InStr(BMName, "CPDelete") <> 0 Then
                    If MsgBox(Translate("AreYouSureDeleteCP", ChosenLanguage), vbYesNo) = vbNo Then
                        Exit Sub
                    End If
                    Call TurnOffTrackChanges
                    docSCOTWT.Bookmarks("EntireCP" + Replace(BMName, "CPDelete", "")).Range.Rows.Delete
                    Call ResetTrackChangesValues
                End If
        End Select
    Next
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Exit Sub
    
errHandler:
    Resume Next
    
End Sub

Public Sub ShowConfirmHelp()

    Load frmConfirmHelp
    frmConfirmHelp.txtHelp.Text = Translate("ConfirmHelpText", ChosenLanguage)
    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
    frmConfirmHelp.Show

End Sub

Public Sub ShowHelp()

    Dim thisBM As Bookmark
    
    Set thisBM = Selection.Bookmarks(Selection.Bookmarks.count)
    Load frmConfirmHelp
    With docSCOTWT
        Select Case thisBM.name
            Case "BMSigRisksTitle"
                frmConfirmHelp.Caption = Translate("SigRisksHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("SigRisksHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "RotateControlsRow", "BMCheckRotateB"
                frmConfirmHelp.Caption = Translate("CntlRotateHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("CntlRotateHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "BMProvideBriefSumHelp", "BMServiceOrgSection"
                frmConfirmHelp.Caption = Translate("ServiceOrgHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("ServiceOrgHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "EYCanvasLoadDateHelp"
                frmConfirmHelp.Caption = Translate("CanvasLoaddateHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("CanvasLoaddateHelp", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "ScotChars", "BMCheckRelate"
                frmConfirmHelp.Caption = Translate("RelatedPartyHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("RelatedPartyHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "WTDeleteMain", "EntireWTMain"
                frmConfirmHelp.Caption = Translate("SCOTWTHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("SCOTWTHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "BMConsiderTitleHelpCell", "DocConsiderations", "BMConsiderTitle"
                frmConfirmHelp.Caption = Translate("IAHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("IAHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "BMGridObserveHelpCell"
                frmConfirmHelp.Caption = Translate("IssueAuthHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("IssueAuthHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
            Case "BMGridObserve2HelpCell"
                frmConfirmHelp.Caption = Translate("ManageOverrideHelpTitle", "English")
                frmConfirmHelp.txtHelp.Text = Translate("ManageOverrideHelpText", ChosenLanguage)
                frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
               
            Case Else
                If InStr(thisBM.name, "BMSCOTWalkthoughMainTitle") <> 0 Or InStr(thisBM.name, "EntireWT") <> 0 Then
                    'for added help
                    frmConfirmHelp.Caption = Translate("SCOTWTHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("SCOTWTHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                ElseIf InStr(thisBM.name, "FullControlProp") <> 0 Or InStr(thisBM.name, "BMControlDescHelpCell") <> 0 Or InStr(thisBM.name, "BMControlDescription") <> 0 Then
                    frmConfirmHelp.Caption = Translate("ControlDescrHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("ControlDescrHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                ElseIf InStr(thisBM.name, "CntlPropNatTestGrid") <> 0 Then
                    Selection.Collapse wdCollapseStart
                    Selection.MoveLeft wdCell, 1
                    If Selection.Range.Text = Translate("DesignAttributes", ChosenLanguage) Then
                        frmConfirmHelp.Caption = Translate("DesAttribHelpTitle", "English")
                        frmConfirmHelp.txtHelp.Text = Translate("DesAttribHelpText", ChosenLanguage)
                        frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                    Else
                        frmConfirmHelp.Caption = Translate("NatureTestHelpTitle", "English")
                        frmConfirmHelp.txtHelp.Text = Translate("NatureTestHelpText", ChosenLanguage)
                        frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                    End If
                    Selection.Collapse wdCollapseStart
                ElseIf InStr(thisBM.name, "BMDesAttHelpCell") <> 0 Or InStr(thisBM.name, "CntlPropNONNatGrid") <> 0 Then
                    frmConfirmHelp.Caption = Translate("DesAttribHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("DesAttribHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                ElseIf InStr(thisBM.name, "BMNatureTestHelpCell") <> 0 Then
                    frmConfirmHelp.Caption = Translate("NatureTestHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("NatureTestHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                
                ElseIf InStr(thisBM.name, "BMCntConfHelpCell") <> 0 Or InStr(thisBM.name, "BMDescribeProcedure") <> 0 Then
                    frmConfirmHelp.Caption = Translate("ControlConfirmHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("ControlConfirmHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                
                ElseIf InStr(thisBM.name, "FullConfirmReviewRef") <> 0 Or InStr(thisBM.name, "BMCntConfHelpRef") <> 0 Then
                    frmConfirmHelp.Caption = Translate("ControlConfirmHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("ReviewRefHelp", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                
                ElseIf InStr(thisBM.name, "EntireCntlThisSCOT") <> 0 Then
                    frmConfirmHelp.Caption = Translate("OtherWCGWHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("OtherWCGWHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                
                ElseIf InStr(thisBM.name, "BMCntlRevHelpCell") <> 0 Or InStr(thisBM.name, "ReviewNoB") <> 0 Then
                    frmConfirmHelp.Caption = Translate("ControlReviewHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("ControlReviewHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                
                ElseIf InStr(thisBM.name, "BMControlIPEHelpCell") <> 0 Or InStr(thisBM.name, "BMInfoUsedExecute") <> 0 Then
                    frmConfirmHelp.Caption = Translate("ControlIPEHelpTitle", "English")
                    frmConfirmHelp.txtHelp.Text = Translate("ControlIPEHelpText", ChosenLanguage)
                    frmConfirmHelp.cmdOk.Caption = Translate("Ok", ChosenLanguage)
                
                End If
        End Select
    End With
    frmConfirmHelp.txtHelp.SelStart = 0
    frmConfirmHelp.Show

End Sub

Public Sub SetTableFormat(tbl As Word.Table, isCollapsible As Boolean, LeftOffset As Integer)
On Error Resume Next

    With tbl.Range.ParagraphFormat
        .CharacterUnitLeftIndent = 0.1
        .CharacterUnitRightIndent = 0.1
        .LineUnitBefore = 0.1
        .LineUnitAfter = 0.1
    End With
    With tbl
        .AllowAutoFit = False
        .Borders.OutsideLineStyle = wdLineStyleSingle
        .Borders.InsideLineStyle = wdLineStyleSingle
        .Borders.InsideLineWidth = wdLineWidth025pt
        .Borders.OutsideLineWidth = wdLineWidth025pt
        .Borders.OutsideColorIndex = wdGray50
        .Borders.InsideColorIndex = wdGray50
        .Rows.AllowBreakAcrossPages = True
        
        .Rows.SetLeftIndent LeftIndent:=LeftOffset, RulerStyle:=wdAdjustFirstColumn
        If isCollapsible Then
            .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
            .Cell(1, 3).Range.Font.ColorIndex = wdBlack
            .Cell(1, 3).Range.Font.Bold = True
            .Cell(1, 1).Width = "20"
            .Cell(1, 2).Width = "20"
            .Cell(1, 3).Width = "470"
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
            docSCOTWT.Bookmarks("ToCopyShow").Range.Copy
            .Cell(1, 1).Range.Paste
            docSCOTWT.Bookmarks("ToCopyHide").Range.Copy
            docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
            .Cell(1, 2).Range.Paste
            .Cell(1, 1).Borders(wdBorderTop).Visible = False
            .Cell(1, 1).Borders(wdBorderBottom).Visible = False
            .Cell(1, 1).Borders(wdBorderLeft).Visible = False
            .Cell(1, 1).Borders(wdBorderRight).Visible = False
            .Cell(1, 2).Borders(wdBorderTop).Visible = False
            .Cell(1, 2).Borders(wdBorderBottom).Visible = False
            .Cell(1, 2).Borders(wdBorderLeft).Visible = False
        End If
        .Rows(1).Cells.VerticalAlignment = wdAlignVerticalCenter
    End With

End Sub

Public Sub MoveWCGW()

    Dim hereRange As Range
    Dim holdHiddenField As Range
    Dim thisBM As Bookmark
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    Call TurnOffTrackChanges
    
     'in case they delete everything except for the hidden range, we need to add in some unhidden stuff
    If Selection.Range.Font.Hidden = True Then
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        Set holdHiddenField = docSCOTWT.Bookmarks("HiddenStuff").Range
        docSCOTWT.Bookmarks("HiddenStuff").Delete
        docSCOTWT.Range(1, 1).Text = vbCrLf + vbCrLf + vbCrLf
        holdHiddenField.MoveStart wdCharacter, 3
        holdHiddenField.Bookmarks.add "HiddenStuff"
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        docSCOTWT.Range(1, 1).Select
    End If
    
    'make sure we don't add on to the last table, so move out of them
    Do While Selection.Tables.count > 0 Or isInABookmark
        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
        Selection.MoveStart wdLine
    Loop
    With Selection
        .Range.Text = vbCrLf + vbCrLf
        .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    End With
   
    'save the move to location
    Set hereRange = Selection.Range
    
    'find which WCGW section is moving
'    For Each thisBM In docSCOTWT.Bookmarks
'        If InStr(thisBM.Name, "BMWCGWName") <> 0 Then
'            If CleanBM(thisBM.Range.Text) = ChosenWCGW Then
'                ChosenWCGW = Replace(thisBM.Name, "BMWCGWName", "")
'                Exit For
'            End If
'        End If
'    Next
    
    docSCOTWT.Bookmarks("EntireWCGW" + ChosenWCGW).Range.Cut
    hereRange.Paste
    Call ResetTrackChangesValues
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
End Sub

Public Sub MoveControlData(fromWCGIid As String, fromControlId As String, toWCGWId As String, toControlId As String)
On Error GoTo errHandler

    Dim strFromlink As String
    Dim strTolink As String
    Dim fromRange As Range
    Dim toRange As Range
    Dim cutFlag As Boolean
    
    Call TurnOffTrackChanges
    strFromlink = fromControlId + "WCGW" + fromWCGIid
    strTolink = toControlId + "WCGW" + toWCGWId

    'unhide both
    docSCOTWT.Bookmarks("FullControl" + strFromlink).Range.Font.Hidden = False
    docSCOTWT.Bookmarks("FullControl" + strTolink).Range.Font.Hidden = False
    
    'cut and paste
    docSCOTWT.Bookmarks("EntCntlNewAdd" + strFromlink).Range.Select
    Set fromRange = Selection.Range
    docSCOTWT.Bookmarks("EntCntlAlrdyAdd" + strTolink).Range.Select
    Selection.Range.Delete
    Selection.Tables(1).Delete
    DoEvents
    
    docSCOTWT.Bookmarks("FullControl" + strTolink).Range.Select
    Selection.Collapse wdCollapseStart
    Selection.Range.Text = vbCrLf
    Set toRange = Selection.Range
    fromRange.Copy
    cutFlag = True
    DoEvents
    docSCOTWT.Bookmarks("FullControl" + strFromlink).Range.Delete
    DoEvents
    toRange.Paste
    DoEvents
    cutFlag = False
    'hide new control
    docSCOTWT.Bookmarks("FullControl" + strTolink).Range.Font.Hidden = True
    docSCOTWT.Bookmarks("ControlsTableHide" + strTolink).Range.Font.Hidden = True
    docSCOTWT.Bookmarks("ControlsTableShow" + strTolink).Range.Font.Hidden = False
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    MsgBox str(Err.Number) + " - " + Err.Description
    If cutFlag Then
        docSCOTWT.Undo
        cutFlag = False
    End If
    Resume Next


End Sub

Public Sub RenameCopiedControl(strFromlink As String, strTolink As String)
On Error GoTo errHandler

    'rename bookmarks
    Dim thisBM As Bookmark
    Dim thisBMGroup As Bookmarks
    Dim thisCtrlGroup As InlineShapes
    Dim thisCtrl As InlineShape
    Dim BMRange As Range
    Dim HoldName As String
    
    Call TurnOffTrackChanges
    'hide new control
    docSCOTWT.Bookmarks("FullControl" + strTolink).Range.Font.Hidden = False
    
    Set thisBMGroup = docSCOTWT.Bookmarks
    Set thisCtrlGroup = docSCOTWT.InlineShapes

     For Each thisBM In thisBMGroup
        If InStr(thisBM.name, strFromlink) <> 0 Then
            Set BMRange = thisBM.Range
            HoldName = thisBM.name
            thisBM.Delete
            docSCOTWT.Bookmarks.add Replace(HoldName, strFromlink, strTolink), BMRange
        End If
     Next

    'need to rename all controls
    For Each thisCtrl In thisCtrlGroup
        If thisCtrl.Type = wdInlineShapeOLEControlObject Then
            If InStr(thisCtrl.OLEFormat.Object.name, strFromlink) <> 0 Then
                thisCtrl.OLEFormat.Object.name = Replace(thisCtrl.OLEFormat.Object.name, strFromlink, strTolink)
            End If
        End If
    Next
    
    'hide new control
    docSCOTWT.Bookmarks("FullControl" + strTolink).Range.Font.Hidden = True
    Call ResetTrackChangesValues
    Exit Sub

errHandler:
    MsgBox Err.Description
    Resume Next
    
End Sub

Public Function GetWCGWIndex(wcgwID As String) As Integer

    Dim i As Integer
    
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
    
    GetWCGWIndex = -1
    For i = 0 To NumWCGWs
        If WCGWs(i).id = wcgwID Then
            GetWCGWIndex = i
            Exit For
        End If
    Next i
    
End Function

Public Function GetControlIndex(wcgwIndex As Integer, ctrlID As String) As Integer

    Dim i As Integer
    
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
    
    GetControlIndex = -1
    For i = 0 To WCGWs(wcgwIndex).numControls
        If WCGWs(wcgwIndex).Controls(i).id = ctrlID Then
            GetControlIndex = i
            Exit For
        End If
    Next i
    
End Function



Attribute VB_Name = "modCreateWT"
Option Explicit
Option Private Module
Public WTTableCount As Integer
Public WTTableCountStr As String

Public Sub AddWTSection()
On Error GoTo errHandler

    Dim thisTableIndex As Integer
    Dim tbl As Table
    Dim myRange As Range
    Dim thisField As Field
    Dim holdHiddenField As Range
    Dim rngStart As Range
    Dim rngEnd As Range
    Dim childBM As Bookmark
    Dim indexWCGW As Integer
    Dim i As Integer
    Dim tempString As String
    Dim curRow As Integer
    
    'check to make sure the cursor is in the correct area to insert.
    'if not, warn them!
    Call TurnOffTrackChanges
    If Selection.BookmarkID = 0 Then
        Selection.Bookmarks.add "TestPosition", Selection.Range
    End If
    If Selection.BookmarkID < docSCOTWT.Bookmarks("StartAllowWCGWs").Range.BookmarkID Or Selection.BookmarkID > docSCOTWT.Bookmarks("StopAllowWTs").Range.BookmarkID Then
        MsgBox Translate("AddWTError", ChosenLanguage), vbOKOnly
        If docSCOTWT.Bookmarks.Exists("TestPosition") Then
            docSCOTWT.Bookmarks("TestPosition").Delete
        End If
        Call ResetTrackChangesValues
        Exit Sub
    End If
    If docSCOTWT.Bookmarks.Exists("TestPosition") Then
        docSCOTWT.Bookmarks("TestPosition").Delete
    End If
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    Options.Pagination = False
    
    'get the currect count
    Call CheckForOpenEmbedded
    WTTableCountStr = shFormData.Range("NumberOfWTs").value
    WTTableCount = CInt(WTTableCountStr) + 1
    WTTableCountStr = Trim(str(WTTableCount))
    
    'Need to make sure this ID isn't already used...just to be sure.
    Do While docSCOTWT.Bookmarks.Exists("EntireWT" + WTTableCountStr)
        'try another one
        WTTableCount = WTTableCount + 1
        WTTableCountStr = Trim(str(WTTableCount))
    Loop
    shFormData.Range("NumberOfWTs").value = WTTableCountStr
    Call SaveEmbedded
    Profile.NumWTs = WTTableCount
    
    'make sure we don't add on to the last table, so move out of them
    Do While Selection.Tables.count > 0 Or isInABookmark
        Selection.MoveDown Unit:=wdLine, count:=1
    Loop
    With Selection
        .Range.Text = vbCrLf + vbCrLf
        .GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
    End With
    
    'add in the WT table
    Set tbl = docSCOTWT.Tables.add(Selection.Range, 5, 3)
    'fill it and format it
    With tbl.Range.ParagraphFormat
        .LeftIndent = InchesToPoints(0)
        .RightIndent = InchesToPoints(0)
        .SpaceBefore = 0
        .SpaceBeforeAuto = False
        .SpaceAfter = 0
        .SpaceAfterAuto = False
        .LineSpacingRule = wdLineSpaceSingle
        .Alignment = wdAlignParagraphLeft
        .WidowControl = True
        .KeepWithNext = False
        .KeepTogether = False
        .PageBreakBefore = False
        .NoLineNumber = False
        .Hyphenation = True
        .FirstLineIndent = InchesToPoints(0)
        .OutlineLevel = wdOutlineLevelBodyText
        .CharacterUnitLeftIndent = 0.1
        .CharacterUnitRightIndent = 0.1
        .CharacterUnitFirstLineIndent = 0
        .LineUnitBefore = 0.1
        .LineUnitAfter = 0.1
        .MirrorIndents = False
        .TextboxTightWrap = wdTightNone
    End With
    
    With tbl
        .AllowAutoFit = False
        .Rows.SetLeftIndent LeftIndent:=15, RulerStyle:=wdAdjustFirstColumn
        .Borders.OutsideLineStyle = wdLineStyleSingle
        .Borders.InsideLineStyle = wdLineStyleSingle
        .Borders.InsideLineWidth = wdLineWidth025pt
        .Borders.OutsideLineWidth = wdLineWidth025pt
        .Borders.OutsideColorIndex = wdGray50
        .Borders.InsideColorIndex = wdGray50
        .Rows(1).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(2).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(3).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(5).Cells.VerticalAlignment = wdAlignVerticalCenter
        .Rows(4).Cells.merge
        .Rows(5).Cells.merge
        Set rngStart = .Cell(2, 1).Range
        Set rngEnd = .Cell(2, 2).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        Set rngStart = .Cell(3, 1).Range
        Set rngEnd = .Cell(3, 2).Range
        docSCOTWT.Range(rngStart.Start, rngEnd.End).Select
        Selection.Cells.merge
        
        .Cell(1, 3).Range.ParagraphFormat.Alignment = wdAlignParagraphRight

        .Title = "WTTable" + WTTableCountStr
        
        .Cell(1, 1).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(1, 2).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(1, 3).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(2, 1).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(3, 1).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(4, 1).Range.Cells.Shading.BackgroundPatternColorIndex = wdGray25
        .Cell(1, 1).Range.Font.Bold = True
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("AllHelp").Range.Copy
        .Cell(1, 2).Range.Paste
        .Cell(1, 2).Range.Bookmarks.add "BMSCOTWalkthoughHelp" + WTTableCountStr
        docSCOTWT.Bookmarks("WTDelete").Range.Copy
        docSCOTWT.Bookmarks("HiddenStuff").Range.Font.Hidden = True
        .Cell(1, 3).Range.Paste
        .Cell(1, 3).Range.Bookmarks.add "WTDelete" + WTTableCountStr
        .Cell(1, 1).Borders(wdBorderRight).Visible = False
        .Cell(1, 2).Borders(wdBorderRight).Visible = False
        
        .Cell(1, 1).Width = "465"
        .Cell(1, 2).Width = "30"
        .Cell(1, 3).Width = "30"
        .Cell(2, 1).Width = "170"
        .Cell(2, 2).Width = "355"
        .Cell(3, 1).Width = "170"
        .Cell(3, 2).Width = "355"
        .Cell(4, 1).Width = "525"
        .Cell(5, 1).Width = "525"
        
        .Cell(1, 1).Range.Text = Translate("SCOTWalkthough", ChosenLanguage)
        .Cell(1, 1).Range.Bookmarks.add "BMSCOTWalkthough" + WTTableCountStr
        .Cell(2, 1).Range.Text = Translate("TransactionSelected", ChosenLanguage)
        .Cell(2, 1).Range.Bookmarks.add "BMTransactionSelected" + WTTableCountStr
        .Cell(3, 1).Range.Text = Translate("IndividualsConfirm", ChosenLanguage)
        .Cell(3, 1).Range.Bookmarks.add "BMWhomWeConfirmed" + WTTableCountStr
        .Cell(4, 1).Range.Text = Translate("ProcsPerformed", ChosenLanguage)
        .Cell(4, 1).Range.Bookmarks.add "BMProcsUsedConfirmed" + WTTableCountStr
        .Cell(2, 2).Range.Bookmarks.add "SCOTWTData1" + WTTableCountStr
        .Cell(3, 2).Range.Bookmarks.add "SCOTWTData2" + WTTableCountStr
        .Cell(5, 1).Range.Bookmarks.add "SCOTWTData3" + WTTableCountStr
        
        .Cell(5, 1).Select
    End With
    
    'need to add the final bookmarks
    tbl.Select
    Selection.Range.Bookmarks.add "EntireWT" + WTTableCountStr
    
    Selection.Collapse direction:=wdCollapseStart
    
    Call ResetTrackChangesValues
    Options.Pagination = True
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Exit Sub
    
errHandler:
    Resume Next
   
End Sub
Attribute VB_Name = "modErrorLogger"
Option Explicit
Option Private Module
Public gUserMessageFileName As String
Public gUserMessages As Boolean
Public pUserMessageLogFile As String
Private pErrorMessageLogFile As String
Private pUserMessageTableIndex As Integer
Private pTargetDocument As Document
Public pUserMessagesForDisplay As String

Public Sub InitializeUserLogger(targetDocument As Document)
On Error Resume Next
    Dim i As Integer
    
    pUserMessagesForDisplay = ""
    
    Set pTargetDocument = targetDocument
    
    pUserMessageLogFile = ErrorLogFolder & FormType & "\UserLogs\Form - " & FormType & " - MessageLog - " & Format(Now(), "mm-dd-yyyy hhMMss") & ".txt"

    If Len(Dir(ErrorLogFolder & FormType & "\UserLogs", vbDirectory)) = 0 Then
        Call CreateSubDirectories(ErrorLogFolder & FormType & "\UserLogs")
    End If
    
    If Dir(pUserMessageLogFile) <> "" Then
        ' delete the file
        Call Kill(pUserMessageLogFile)
    End If
    
    ' now create the new file
    For i = 1 To targetDocument.Tables.count
        If targetDocument.Tables(i).Title = "UserErrorMessages" Then
            pUserMessageTableIndex = i
        End If
    Next i
    
End Sub

Public Sub InitializeErrorLogger()
On Error Resume Next
    Dim i As Integer
    
   pErrorMessageLogFile = ErrorLogFolder & FormType & "\ErrorLogs\ErrorLog - " & Format(Now(), "mm-dd-yyyy hhMMss") & ".txt"

    ' Delete existing file if it exists. We do this so that when Notepad displays it, the file contains only the
    ' last attempt to migrate the form
    If Len(Dir(ErrorLogFolder & FormType & "\ErrorLogs", vbDirectory)) = 0 Then
        Call CreateSubDirectories(ErrorLogFolder & FormType & "\ErrorLogs")
    End If
    
End Sub

Public Sub OutputUserLogHeader(isMigrate As Boolean)
On Error Resume Next
    Dim strPCName As String
    Dim strUserName As String
    Dim strUserDomain As String
    Dim message As String
    Dim versionNum As String
    
    If isMigrate Then
        versionNum = gFormVersionToRF
    Else
        versionNum = gFormVersionToPull
    End If
    
    strPCName = Environ$("computername")
    strUserName = Environ$("username")
    strUserDomain = Environ$("userdomain")
    message = "Identifying informaton - " & strPCName & "|" & strUserDomain & "\" & strUserName
    Call OutputUserMessage(message)
    message = "Source File - " & pDocumentToPull
    Call OutputUserMessage(message)
    message = "Source Form - " & FormType & " Version " & versionNum
    Call OutputUserMessage(message)
    message = "Target Form - " & FormType & " Version " & FormVersion
    Call OutputUserMessage(message)
    If isMigrate Then
        message = Translate("MigrateComplete", ChosenLanguage)
        Call OutputUserMessage(message)
        message = Translate("MessageWindowIntro", ChosenLanguage)
        Call OutputUserMessage(message)
    Else
        message = Translate("PullComplete", ChosenLanguage)
        Call OutputUserMessage(message)
        message = Translate("MessageWindowIntroRF", ChosenLanguage)
        Call OutputUserMessage(message)
    End If
    
    'do the error log header as well
    If isMigrate Then
        message = "Migration Started - " & Format(Now)
    Else
        message = "Roll Forward Started - " & Format(Now)
    End If
    Call OutputErrorMessage(message)
    message = "Identifying informaton - " & strPCName & "|" & strUserDomain & "\" & strUserName
    Call OutputErrorMessage(message)
    message = "Source File - " & pDocumentToPull
    Call OutputErrorMessage(message)
    message = "Source Form - " & FormType & " Version " & versionNum
    Call OutputErrorMessage(message)
    message = "Target Form - " & FormType & " Version " & FormVersion
    Call OutputErrorMessage(message)

End Sub

Public Sub LogUserMessage(action As String, token As String, Optional customMessage As String)
On Error Resume Next
' logs user messages for invalid bookmarks or other custom messages
    Dim message As String
    
    gUserMessages = True
    If customMessage = "" Then
        message = action & " " & FormatUserMessage(token)
        Call OutputUserMessage(message)
    Else
        Call OutputUserMessage(FormatCustomMessage(customMessage))
    End If
    
End Sub

Private Function FormatCustomMessage(token As String) As String
On Error Resume Next
    
    FormatCustomMessage = token
    pUserMessagesForDisplay = pUserMessagesForDisplay & token & vbCrLf
    
End Function

Private Function FormatUserMessage(token As String) As String
On Error Resume Next
    Dim tStr As String
    
    tStr = GetUserFriendlyMessage(token)
    FormatUserMessage = Translate("ErrorMigratingField", ChosenLanguage) & " " & tStr
    pUserMessagesForDisplay = pUserMessagesForDisplay & FormatUserMessage & vbCrLf
    
End Function

Public Sub OutputUserMessage(message As String)
On Error Resume Next
    Dim iFileNum As Long
    
    iFileNum = FreeFile()
    Open pUserMessageLogFile For Append As #iFileNum
    Print #iFileNum, message
    Close #iFileNum

End Sub

Public Function GetUserFriendlyMessage(token As String) As String
On Error Resume Next
' look up the token in the table stored on the form
    Dim i As Integer
    Dim tableToken As String
    Dim thisRow As Integer
    Dim thisCol As Integer
    
    Call CheckForOpenEmbedded
    thisRow = 0
    On Error Resume Next
    thisRow = shMigrate.Columns("A:A").find(token, LookAt:=xlWhole).Row
    If thisRow = 0 Then
        GetUserFriendlyMessage = Translate("TokenNotFound", ChosenLanguage) & " " & token
        Exit Function
    End If
    thisCol = 2
    
    GetUserFriendlyMessage = Translate(shMigrate.Cells(thisRow, thisCol).value, ChosenLanguage)
         
End Function

Public Sub DisplayUserMessages(isMigrate As Boolean)
On Error Resume Next
    Dim result As Integer
    Dim frmShowLog As frmDisplayUserMessages
    
    Call CheckForOpenEmbedded
    
    If pUserMessagesForDisplay <> "" Then
        'result = Shell("Notepad.exe " & pUserMessageLogFile, vbNormalFocus)
        Set frmShowLog = New frmDisplayUserMessages
        If isMigrate Then
            frmShowLog.Caption = Translate("MessageWindowTitle", ChosenLanguage)
            frmShowLog.lblTitle.Caption = Translate("MigrateComplete", ChosenLanguage) & vbCrLf & Translate("MessageWindowIntro", ChosenLanguage)
        Else
            frmShowLog.Caption = Translate("MessageWindowTitleRF", ChosenLanguage)
            frmShowLog.lblTitle.Caption = Translate("PullComplete", ChosenLanguage) & vbCrLf & Translate("MessageWindowIntroRF", ChosenLanguage)
        End If
        frmShowLog.cmdOk.Caption = Translate("OK", ChosenLanguage)
        frmShowLog.txtResults.Text = pUserMessagesForDisplay
        frmShowLog.Show
    Else
        If isMigrate Then
            MsgBox Translate("MigrateComplete", ChosenLanguage), vbOKOnly
        Else
            MsgBox Translate("PullComplete", ChosenLanguage), vbOKOnly
        End If
    End If
    
End Sub

Public Sub LogErrorMessage(action As String, error As ErrObject)
On Error Resume Next
' logs system error messages
    Dim message As String
    
    message = FormatErrorMessage(action, error)
    Call OutputErrorMessage(message)
    
End Sub

Private Function FormatErrorMessage(action As String, error As ErrObject) As String
On Error Resume Next

    FormatErrorMessage = action & " " & Translate("MigrateErrorNum", ChosenLanguage) & " " & _
                            error.Number & " " & Translate("MigrateErrorDesc", ChosenLanguage) & " " & error.Description
    
End Function

Public Sub OutputErrorMessage(message As String)
On Error Resume Next
    Dim iFileNum As Long
    
    iFileNum = FreeFile()
    
    Open pErrorMessageLogFile For Append As #iFileNum
    Print #iFileNum, Format(Now) & " - " & message
    Close #iFileNum

End Sub

Public Sub LogUserStatistics(message As String)

End Sub

Private Sub OutputUserStatistics(message As String)
' logs any type of statistics we want to try and gather on form usage

End Sub

Private Sub CreateSubDirectories(fullPath As String)
 
Dim str As String
Dim strArray As Variant
Dim i As Long
Dim basePath As String
Dim newPath As String
 
    str = fullPath
     
    ' add trailing slash
    If Right$(str, 1) <> "\" Then
        str = str & "\"
    End If
     
    ' split string into array
    strArray = Split(str, "\")
     
    basePath = strArray(0) & "\"
     
    ' loop through array and create progressively
    ' lower level folders
    For i = 1 To UBound(strArray) - 1
         If Len(newPath) = 0 Then
            newPath = basePath & newPath & strArray(i) & "\"
         Else
            newPath = newPath & strArray(i) & "\"
         End If
        
         If Not FolderExists(newPath) Then
            MkDir newPath
         End If
    Next i
 
End Sub
 
Private Function FolderExists(ByVal strPath As String) As Boolean
' from http://allenbrowne.com
On Error Resume Next

    FolderExists = ((GetAttr(strPath) And vbDirectory) = vbDirectory)
    
End Function






Attribute VB_Name = "modFormMigration"
Option Explicit
Option Private Module
Public pDocumentToMigrate As String
Public gFormVersionToRF As String
Public sourceoOleFormat As OLEFormat
Public wkbkSourceData As Object 'Excel.Workbook
Public shSourceSCOTWCGWs As Object 'Excel.Worksheet
Public shSourceRisks As Object 'Excel.Worksheet
Public shSourceFormData As Object 'Excel.Worksheet
Public isMigrating As Boolean
Public wcgwToMigrate As String
Public mfxlApp As Object 'Excel.Application
Public mfwdApp As Word.Application
Public Type BookMarkType
    id As Long
    name As String
End Type
Public sourceBMs() As BookMarkType
Public numSourceBMs As Integer
Public Const FormVersion = "1.4"
Private totalWCGWs As Integer
Public CancelMigration As Boolean
Private thisErr As ErrObject

Public Sub MigrateForm(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler

    pDocumentToMigrate = pDocumentToPull
    gFormVersionToRF = gFormVersionToPull
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    frmStatusWindow.lblMessage.Caption = Translate("MainMigrateData", ChosenLanguage)
    frmStatusWindow.Show (False)
    DoEvents

    gPullingDocument = True
    Call OutputUserLogHeader(True)
    ' if we get here, unhide all
    sourceDocument.content.Font.Hidden = False
    targetDocument.content.Font.Hidden = False
    
    'and since 2013 is really SLOW at copy paste, let's make the applications invisible to speed it up
    Application.Visible = False
    frmStatusWindow.Show (False)
    
    'migrate the forms based on versions, since they are different
    
    'as of 1.1, the embedded data file is the same...so we can call it first for all of them
    Call MigrateData
    Call LoadProfile
       
    'Need to copy the whole source doc to a temp doc in this process
    Dim tempDoc As Document
    Set tempDoc = docSCOTWT.Application.Documents.add
    tempDoc.Range.InsertXML sourceDocument.Range.WordOpenXML

    DoEvents
    sourceDocument.Close False
    If Not mfxlApp Is Nothing Then
        If mfxlApp.workbooks.count = 0 Then
            mfxlApp.Quit
        End If
        Set mfxlApp = Nothing
    End If
    If Not mfwdApp Is Nothing Then
        mfwdApp.Quit
        Set mfwdApp = Nothing
    End If

    Set sourceDocument = tempDoc
    
    'just in case the importing file is in a different language, we need to translate this form.
    ChosenLanguage = Profile.ChosenLanguage
    If ChosenLanguage = "" Then Call FindLanguage(sourceDocument)
    targetDocument.content.Font.Hidden = False
    isMigrating = True
    If ChosenLanguage <> "English" Then Call TranslateObjects
    isMigrating = False
    frmStatusWindow.lblMessage.Caption = Translate("MainMigrateSec", ChosenLanguage)
    frmStatusWindow.Show (False)
    Call LoadDataToArrays 'get the imported data into our arrays to process with, this will allow us to use the functions already in the form.
    'as of 1.1, the main document bookmarks are the same...so we can call it first for all of them
    Call MigrateBookmarksV11(sourceDocument, targetDocument)
    
    frmStatusWindow.lblMessage.Caption = Translate("MainMigrateObjects", ChosenLanguage)
    frmStatusWindow.Show (False)
    Select Case gFormVersionToRF
        Case "1.4", "1.3", "1.2", "1.1"
            '1.1 has no activex controls on document
            Call MigrateObjectsV11(sourceDocument, targetDocument)
        Case "1.04"
            '1.04, 1.05 has no activex controls in the WCGW sections, but the main document still has them
            Call MigrateObjectsV104(sourceDocument, targetDocument)
        Case "1.03"
            Call MigrateObjectsV104(sourceDocument, targetDocument)
            '1.03 and previous still has activex controls in the WCGWs...so need to handle these diff than newer versions inside this function
        Case "1.02" 'this one handles v1.02 and all previous ones
            Call MigrateObjectsV104(sourceDocument, targetDocument)
            '1.02 and previous still has activex controls in the WCGWs...so need to handle these diff but also may have bookmark issues we need to fix
    End Select
    
    frmStatusWindow.lblMessage.Caption = Translate("MainMigrateWCGWs", ChosenLanguage)
    frmStatusWindow.Show (False)
    'this is called for all versions, different versions are handled inside this function
    Call MigrateWCGWs(sourceDocument, targetDocument)
    
    'Need to ensure we have moved all the comments over
    'Commented out because it don't work :(
    'Call MoveExtraComments(sourceDocument, targetDocument)
    'Instead we will list them for the user to move them selves
    Call ListRemainingComments(sourceDocument, targetDocument)
    'Any text that is in the source document but outside any bookmarks will not be moved and is the users responsibililty to move over
    
    'Look to see if we have more Word Objects then we should
    Dim thisOB As InlineShape
    Dim sourceCount As Integer
    Dim targetCount As Integer
    
    sourceCount = 0
    For Each thisOB In sourceDocument.InlineShapes
        If thisOB.Type = wdInlineShapeEmbeddedOLEObject Then
            'We don't count the data one in case the source data embedded is corrupt or missing
            If Left(LCase(thisOB.OLEFormat.IconLabel), 4) <> "data" Then
                sourceCount = sourceCount + 1
            End If
        End If
    Next
    targetCount = 0
    For Each thisOB In docSCOTWT.InlineShapes
        If thisOB.Type = wdInlineShapeEmbeddedOLEObject Then
            'We don't count the data one in case the source data embedded is corrupt or missing
            If Left(LCase(thisOB.OLEFormat.IconLabel), 4) <> "data" Then
                targetCount = targetCount + 1
            End If
        End If
    Next
    
    If targetCount > sourceCount Then
        Call LogUserMessage("", "", Translate("WordObjectMessage", ChosenLanguage))
        Call OutputErrorMessage(Translate("WordObjectMessage", ChosenLanguage))
    End If
    
    ' don't prompt user to  import again next time they open the file
    shFormData.Range("SuppressMigratePrompt").value = "Y"
    'Call SaveEmbedded
    
    ' Need to rehide stuff if needed in new document!!!
    targetDocument.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    targetDocument.Bookmarks("StartAllowWCGWs").Range.Font.Hidden = True
    targetDocument.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = True
    
    Call HideAllMain

    gPullingDocument = False
    Application.Visible = True
    Unload frmStatusWindow

    Application.ScreenUpdating = True

    'close the original docuemnt without saving any changes
    sourceDocument.Close SaveChanges:=wdDoNotSaveChanges
    System.Cursor = wdCursorNormal
        
    Call DisplayUserMessages(True)
    Exit Sub

errHandler:
    Resume Next
    
End Sub

Private Sub ListRemainingComments(sourceDocument As Document, targetDocument As Document)
On Error Resume Next

    Dim srcComment As Comment
    Dim tgtComment As Comment
    Dim FoundIt As Boolean
    Dim thisBM As Bookmark
    Dim thisComment As String
    
    If sourceDocument.Comments.count <> targetDocument.Comments.count Then
        'Need to move the others
        For Each srcComment In sourceDocument.Comments
            FoundIt = False
            For Each tgtComment In targetDocument.Comments
                If srcComment.Scope = tgtComment.Scope And srcComment.Range = tgtComment.Range Then
                    'we already got one of these, move on
                    FoundIt = True
                    Exit For
                End If
            Next
            If Not FoundIt Then
                'Lets list it for the users to migrate manually
                If Application.Version = "14.0" Then
                    thisComment = srcComment.Author & "(" & srcComment.Date & ") " & srcComment.Range
                Else
                    thisComment = "(" & srcComment.Date & ") " & srcComment.Range
                End If
                Call LogUserMessage("", "", Translate("UserMigrateComment", ChosenLanguage) & thisComment)
                Call OutputErrorMessage(Translate("ErrorMigrateComment", ChosenLanguage) & thisComment)
            End If
        Next
    End If

End Sub

Private Sub MoveExtraComments(sourceDocument As Document, targetDocument As Document)
On Error Resume Next

    Dim srcComment As Comment
    Dim tgtComment As Comment
    Dim tempComment As Comment
    Dim tempReply As Comment
    Dim FoundIt As Boolean
    Dim thisBM As Bookmark
    Dim srcBookmark As String
    Dim myRange As Range
    
    If sourceDocument.Comments.count <> targetDocument.Comments.count Then
        'Need to move the others
        For Each srcComment In sourceDocument.Comments
            FoundIt = False
            For Each tgtComment In targetDocument.Comments
                If srcComment.Scope = tgtComment.Scope And srcComment.Range = tgtComment.Range Then
                    'we already got one of these, move on
                    FoundIt = True
                    Exit For
                End If
            Next
            If Not FoundIt Then
                If srcComment.Scope.Bookmarks.count = 0 And srcComment.Scope.Text <> "" Then
                    'find where this comment is and paste it
                    srcComment.Scope.Copy
                    Set myRange = targetDocument.content
                    myRange.find.Execute FindText:=srcComment.Scope.Text, Forward:=True
                    If myRange.find.found = True Then
                        'then paste here
                        myRange.Paste
                    Else
                        'not found...put at the end
                        GoTo LastChanceBM
                    End If
                ElseIf srcComment.Scope.Bookmarks.count > 0 Then
                    srcBookmark = srcComment.Scope.Bookmarks(srcComment.Scope.Bookmarks.count).name
                    'lets see if this Bookmark exists in the target doc
                    FoundIt = False
                    For Each thisBM In targetDocument.Bookmarks
                        If thisBM.name = srcBookmark Then
                            'yep, we got one
                            FoundIt = True
                            
                            'we can copy the range of the comment
                            srcComment.Scope.Copy
                            Set myRange = thisBM
                            myRange.find.Execute FindText:=srcComment.Scope.Text, Forward:=True
                            If myRange.find.found = True Then
                                'then paste here
                                myRange.Paste
                            End If
                            'if we lost this bookmark, readd it
                            If Not targetDocument.Bookmarks.Exists(srcBookmark) Then
                                targetDocument.Bookmarks.add srcBookmark, myRange
                            End If
                            Exit For
                        End If
                    Next
                    If Not FoundIt Then
                        'what do we do if this bookmark isn't in the new doc
                        'if there is text in the comment then we can find it
                        If srcComment.Scope.Text <> "" Then
                            srcComment.Scope.Copy
                            Set myRange = targetDocument.content
                            myRange.find.Execute FindText:=srcComment.Scope.Text, Forward:=True
                            If myRange.find.found = True Then
                                'then paste here
                                myRange.Paste
                            Else
                                'not found...put at the end
                                GoTo LastChanceBM
                            End If
                        Else
                            'not found...put at the end
                            GoTo LastChanceBM
                        End If
                    End If
                Else 'no text or bookmark...we can copy to the bottom or top of doc
LastChanceBM:
                    'only thing left is to copy it to the end of the document...at least they have it
                    srcComment.Scope.Copy
                    targetDocument.Bookmarks("MovedComments").Select
                    Selection.Collapse wdCollapseEnd
                    Selection.Paste
                End If
            End If
        Next
    End If

End Sub

Private Sub MigrateObjectsV104(sourceDocument As Document, targetDocument As Document)
'v1.04 and previous version had all the main document controls as ActiveX, move them from that to our new macrobuttons
On Error GoTo errHandler
    
    Dim sBookmark As String
    Dim thisOB As InlineShape
    
    'need to loop through activex controls
    docSCOTWT.UndoClear
    DoEvents
    For Each thisOB In sourceDocument.InlineShapes
        If thisOB.Type = wdInlineShapeOLEControlObject Then
            If thisOB.OLEFormat.ClassType = "Forms.CheckBox.1" Then
                If thisOB.OLEFormat.Object.value Then
                    If InStr(thisOB.OLEFormat.Object.name, "chkNotTested") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckRotateB"
                        Call targetDocument.CheckRotateAll
                    End If
                    If InStr(thisOB.OLEFormat.Object.name, "chkIncludeRelated") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckRelateB"
                        Call targetDocument.CheckRelateAll
                    End If
                    If InStr(thisOB.OLEFormat.Object.name, "chkHighlyAutomated") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckHighlyB"
                        isMigrating = True
                        Call targetDocument.CheckHighlyAll
                    End If
                    If InStr(thisOB.OLEFormat.Object.name, "chkUsesServiceOrg") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckServiceB"
                        Call targetDocument.CheckServiceAll
                    End If
                End If
            End If
            If thisOB.OLEFormat.ClassType = "Forms.OptionButton.1" Then
                If thisOB.OLEFormat.Object.value Then
                    If thisOB.OLEFormat.Object.name = "ConclusionOption1" Then
                        If thisOB.OLEFormat.Object.value Then
                            sBookmark = "BMOptionsB4"
                            targetDocument.Bookmarks(sBookmark).Select
                            Call targetDocument.MainOptionsAll
                        End If
                    ElseIf thisOB.OLEFormat.Object.name = "ConclusionOption2" Then
                        If thisOB.OLEFormat.Object.value Then
                            sBookmark = "BMOptionsB5"
                            'it's checked, check the new one
                            targetDocument.Bookmarks(sBookmark).Select
                            Call targetDocument.MainOptionsAll
                        End If
                    End If
                End If
            End If
            If thisOB.OLEFormat.ClassType = "Forms.ComboBox.1" Then
                If thisOB.OLEFormat.Object.name = "WHOPerformedDD" Then
                    If thisOB.OLEFormat.Object.SelText = Translate("EY", ChosenLanguage) Then
                        sBookmark = "BMOptionsB1"
                        targetDocument.Bookmarks(sBookmark).Select
                        Call targetDocument.MainOptionsAll
                    ElseIf thisOB.OLEFormat.Object.SelText = Translate("InternalAuditors", ChosenLanguage) Then
                        sBookmark = "BMOptionsB2"
                        targetDocument.Bookmarks(sBookmark).Select
                        Call targetDocument.MainOptionsAll
                    ElseIf thisOB.OLEFormat.Object.SelText = Translate("Others", ChosenLanguage) Then
                        sBookmark = "BMOptionsB3"
                        targetDocument.Bookmarks(sBookmark).Select
                        Call targetDocument.MainOptionsAll
                    End If
                End If
            End If
        End If
    Next
    docSCOTWT.UndoClear
    DoEvents

    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingObjects", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingObjects", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MigrateObjectsV11(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler
    Dim sBookmark As String
    
    'do the fake check boxes
    docSCOTWT.UndoClear
    DoEvents
    sBookmark = "BMCheckRotateB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call docSCOTWT.CheckRotateAll
    End If
    sBookmark = "BMCheckRelateB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call docSCOTWT.CheckRelateAll
    End If
    sBookmark = "BMCheckHighlyB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        isMigrating = True
        Call docSCOTWT.CheckHighlyAll
    End If
    sBookmark = "BMCheckServiceB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call docSCOTWT.CheckServiceAll
    End If
    sBookmark = "BMOptionsB1"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        docSCOTWT.Bookmarks(sBookmark).Select
        Call docSCOTWT.MainOptionsAll
    End If
    sBookmark = "BMOptionsB2"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        docSCOTWT.Bookmarks(sBookmark).Select
        Call docSCOTWT.MainOptionsAll
    End If
    sBookmark = "BMOptionsB3"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        docSCOTWT.Bookmarks(sBookmark).Select
        Call docSCOTWT.MainOptionsAll
    End If
    sBookmark = "BMOptionsB4"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        docSCOTWT.Bookmarks(sBookmark).Select
        Call docSCOTWT.MainOptionsAll
    End If
    sBookmark = "BMOptionsB5"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        docSCOTWT.Bookmarks(sBookmark).Select
        Call docSCOTWT.MainOptionsAll
    End If
    docSCOTWT.UndoClear
    DoEvents
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingObjects", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingObjects", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MoveBookmark(sourceDocument As Document, targetDocument As Document, sBookmark As String, Optional sLogBookmark As String)
On Error GoTo errHandler

    Dim thisLogBookmark As String
    Dim numTries As Integer
    Dim tbl As Table
    Dim tbl2 As Table
    
    numTries = 1
    If sLogBookmark = "" Then
        thisLogBookmark = sBookmark
    Else
        thisLogBookmark = sLogBookmark
    End If
    
    If sourceDocument.Bookmarks.Exists(sBookmark) Then
TryAgain:
        If InStr(sBookmark, "ApplicationName") <> 0 Then
            sourceDocument.Bookmarks(sBookmark).Select
            Set tbl = Selection.Range.Tables(1)
            targetDocument.Bookmarks(sBookmark).Select
            Set tbl2 = Selection.Range.Tables(1)
            tbl.Cell(1, 2).Range.Copy
            tbl2.Cell(1, 2).Range.Paste
            On Error Resume Next
            tbl2.Cell(1, 3).Delete
            On Error GoTo errHandler
        Else
            sourceDocument.Bookmarks(sBookmark).Range.Copy
            targetDocument.Bookmarks(sBookmark).Range.Paste
        End If
    Else
        Call LogUserMessage(Translate("MigratingBMs", ChosenLanguage), thisLogBookmark)
        Call OutputErrorMessage(Translate("MigratingBMs", ChosenLanguage) & " " & sBookmark)
        Exit Sub
    End If
    
    'check if word object
    If sourceDocument.Bookmarks(sBookmark).Range.InlineShapes.count <> targetDocument.Bookmarks(sBookmark).Range.InlineShapes.count Then
        If numTries < 11 Then
            numTries = numTries + 1
            DoEvents
            Call OutputErrorMessage("Word Object created...retrying " & sBookmark)
            GoTo TryAgain
        End If
    End If
    Exit Sub
    
errHandler:
    If Err.Number = 4605 And numTries < 11 Then
        'clipboard issue, try again
        numTries = numTries + 1
        DoEvents
        Call OutputErrorMessage("4605 Clipboard error occured " & sBookmark)
        Resume TryAgain
    End If
    Call LogUserMessage(Translate("MigratingBMs", ChosenLanguage) & " ", thisLogBookmark)
    Call OutputErrorMessage(Translate("MigratingBMs", ChosenLanguage) & " " & sBookmark)
    Exit Sub
    
End Sub

Private Sub MigrateBookmarksV11(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler

    Dim i As Integer
    Dim j As Integer
    Dim sBookmark As String
    Dim thisBM As Bookmark
    Dim tempIndx As Integer
    Dim priorBM As String
    Dim BMRange As Range
    Dim found As Boolean
    Dim curBM As Integer
    Dim Temp As Integer
    Dim temp2 As String
    Dim thisBullet As String
    Dim oldBullet As String
    
    oldBullet = Chr$(149) + " "
    thisBullet = "--> "
    docSCOTWT.UndoClear
    DoEvents
    
    'load up all the source bookmarks so we have positioning on form
    numSourceBMs = -1
    ReDim sourceBMs(0) As BookMarkType
    For Each thisBM In sourceDocument.Bookmarks
        If InStr(thisBM.name, "WCGW") = 0 Or InStr(thisBM.name, "EntireWCGW") <> 0 Then
            numSourceBMs = numSourceBMs + 1
            ReDim Preserve sourceBMs(numSourceBMs) As BookMarkType
            sourceBMs(numSourceBMs).id = thisBM.Range.BookmarkID
            sourceBMs(numSourceBMs).name = thisBM.name
            If InStr(thisBM.name, "EntireWCGW") <> 0 Then
                totalWCGWs = totalWCGWs + 1
            End If
        End If
    Next
    'order the BMs by ID
    For i = 0 To numSourceBMs
        For j = i + 1 To numSourceBMs
            If sourceBMs(i).id > sourceBMs(j).id Then
                Temp = sourceBMs(j).id
                temp2 = sourceBMs(j).name
                sourceBMs(j).id = sourceBMs(i).id
                sourceBMs(j).name = sourceBMs(i).name
                sourceBMs(i).id = Temp
                sourceBMs(i).name = temp2
            End If
        Next j
    Next i
 
    'Engagement Info
    sBookmark = "MyEntity"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    'targetDocument.Bookmarks(sBookmark).Range.Text = CleanBMMigrate(sourceDocument.Bookmarks(sBookmark).Range.Text)
    sBookmark = "MyFSDate"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "MyEngagement"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "EYCanvasLoadDateCell"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "ImportedScotName"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "ImportedScotName2"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    docSCOTWT.UndoClear
    DoEvents
    
    'Significant risks
    'need to move the risks over and the associated controls.
    'we moved the data first and loaded arrays se we load from them, then move the associated data
    
    'write out the risks
    Call ShowSigRisks
    'now fill in anything that was associated
    For i = 1 To numRisks + 1
        sBookmark = "SignficantRiskAssocCtrls" & Trim(str(i))
        
        If sourceDocument.Bookmarks.Exists(sBookmark) Then
            Call UpdateBookmarkGrid(sBookmark, Replace(CleanBMMigrate(sourceDocument.Bookmarks(sBookmark).Range.Text), oldBullet, thisBullet))
        Else
            'this should be there, put out a message
            Call LogUserMessage(Translate("MigratingSec", ChosenLanguage), "SignficantRiskAssocCtrls")
            Call OutputErrorMessage(Translate("MigratingSec", ChosenLanguage) & " " & "SignficantRiskAssocCtrls")
        End If
    Next i
    docSCOTWT.UndoClear
    DoEvents
    
    'SCOT Chars
    sBookmark = "AuditStrategyCell"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "TypeOfSCOT"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "RelatedITApps"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BriefServiceOrg"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'Related Party
    sBookmark = "RelatedPartyData1"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "RelatedPartyData2"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "RelatedPartyData3"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'Critical Paths
    sBookmark = "BMInitiation"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMReporting"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere1"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMRecording"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere2"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMConclusion"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere3"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'loop through any added critial paths -ignore the 4 original ones
    sBookmark = "ExtraCPs"
    For Each thisBM In sourceDocument.Bookmarks
        docSCOTWT.UndoClear
        DoEvents
        If InStr(thisBM.name, "EntireCP") <> 0 And InStr(thisBM.name, "EntireCPInit") = 0 Then
            'found one
            'Find the approximate same place in the target document
            'see if the prior BM exists in new doc
            tempIndx = thisBM.Range.BookmarkID
            For j = 0 To numSourceBMs
                If sourceBMs(j).id = tempIndx Then
                    tempIndx = j - 1
                    priorBM = sourceBMs(tempIndx).name
                    Do While Not targetDocument.Bookmarks.Exists(priorBM) And tempIndx > 0
                        tempIndx = tempIndx - 1
                        priorBM = sourceBMs(tempIndx).name
                    Loop
                    Exit For
                End If
            Next j
            If tempIndx > 0 Then
                'put it in the new one
                targetDocument.Bookmarks(priorBM).Select
                Selection.Collapse wdCollapseEnd
                Do While Selection.Tables.count > 0 Or isInABookmark
                    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                    Selection.HomeKey wdLine
                Loop
                Selection.Text = vbCrLf & vbCrLf & vbCrLf
                Selection.Collapse wdCollapseStart
                Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                
                Set BMRange = Selection.Range
                sourceDocument.Bookmarks(thisBM).Range.Copy
                BMRange.Paste
            End If
        End If
    Next
    
    'WTs
    sBookmark = "SCOTWTMainData1"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "SCOTWTMainData2"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "SCOTWTMainData3"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'loop through any added walkthroughs
    sBookmark = "ExtraWTs"
    For Each thisBM In sourceDocument.Bookmarks
        docSCOTWT.UndoClear
        DoEvents
        If InStr(thisBM, "EntireWT") <> 0 And InStr(thisBM, "EntireWTMain") = 0 Then
            'found one
            'Find the approximate same place in the target document
            'see if the prior BM exists in new doc
            tempIndx = thisBM.Range.BookmarkID
            For j = 0 To numSourceBMs
                If sourceBMs(j).id = tempIndx Then
                    tempIndx = j - 1
                    priorBM = sourceBMs(tempIndx).name
                    Do While Not targetDocument.Bookmarks.Exists(priorBM) And tempIndx > 0
                        tempIndx = tempIndx - 1
                        priorBM = sourceBMs(tempIndx).name
                    Loop
                    Exit For
                End If
            Next j
            If tempIndx > 0 Then
                'put it in the new one
                targetDocument.Bookmarks(priorBM).Select
                Selection.Collapse wdCollapseEnd
                Do While Selection.Tables.count > 0 Or isInABookmark
                    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                    Selection.HomeKey wdLine
                Loop
                Selection.Text = vbCrLf & vbCrLf & vbCrLf
                Selection.Collapse wdCollapseStart
                Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                
                Set BMRange = Selection.Range
                sourceDocument.Bookmarks(thisBM).Range.Copy
                BMRange.Paste
            End If
        End If
    Next
    
    'Other Considerations 1
    sBookmark = "HowWeSupervise"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)

    'Other Considerations 2
    sBookmark = "SegOfDuties"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "FraudInSCOT"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
 
    'Conclusions
    sBookmark = "AdditionalObserveCell"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    docSCOTWT.UndoClear
    DoEvents
    
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingSec", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingSec", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MigrateWCGWs(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler

    Dim sBookmark As String
    Dim i As Integer
    Dim j As Integer
    Dim thisBM As Bookmark
    Dim tempIndx As Integer
    Dim priorBM As String
    Dim BMRange As Range
    Dim found As Boolean
    Dim curRow As Integer
    
    sBookmark = "WCGWs"  'EntireWCGW325444
    isMigrating = True
    
    i = 1
    sBookmark = "WCGWs"
    For Each thisBM In sourceDocument.Bookmarks
        docSCOTWT.UndoClear
        DoEvents
        If InStr(thisBM, "EntireWCGW") <> 0 Then
            'found one
            wcgwToMigrate = Replace(thisBM, "EntireWCGW", "")
            'using Bookmark IDs we can find the relative position and hopfully find the same one in the target doc
            'see if the prior BM exists in new doc
            tempIndx = thisBM.Range.BookmarkID
            For j = 0 To numSourceBMs
                If sourceBMs(j).id = tempIndx Then
                    tempIndx = j - 1
                    priorBM = sourceBMs(tempIndx).name
                    Do While Not targetDocument.Bookmarks.Exists(priorBM) And tempIndx > 0
                        tempIndx = tempIndx - 1
                        priorBM = sourceBMs(tempIndx).name
                    Loop
                    Exit For
                End If
            Next j
            If tempIndx > 0 Then
                frmStatusWindow.lblMessage.Caption = Translate("MainMigrateWCGWs", ChosenLanguage) & vbCrLf & "(" & Trim(str(i)) & " of " & Trim(str(totalWCGWs)) & ")"
                frmStatusWindow.Show (False)
                i = i + 1
                targetDocument.Bookmarks(priorBM).Select
                Selection.Collapse wdCollapseEnd
                Do While Selection.Tables.count > 0 Or isInABookmark
                    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                    Selection.HomeKey Unit:=wdLine
                Loop
                Call AddWCGWSection
                docSCOTWT.UndoClear
                DoEvents
                'move over the user data by version
                Select Case gFormVersionToRF
                    Case "1.03"
                        Call MoveOverWCGWDataV103(sourceDocument, targetDocument)
                    Case "1.02" 'handles all older version before 1.02 as well
                        Call MoveOverWCGWDataV102(sourceDocument, targetDocument)
                    Case Else 'newest 1.1 - handles v1.04 & v1.05 as well
                        Call MoveOverWCGWDataV11(sourceDocument, targetDocument)
                End Select
            End If
        End If
    Next
    
    'need to "turn off" the on docuemnt flag if it isn't really out there
    For i = 0 To NumWCGWs
        docSCOTWT.UndoClear
        DoEvents
        If WCGWs(i).isPlaced Then
            'look for it on the new document, if not there, remove the mark
            found = False
            For Each thisBM In targetDocument.Bookmarks
                If thisBM.name = "EntireWCGW" & WCGWs(i).id Then
                    found = True
                    Exit For
                End If
            Next
            If Not found Then
                'unmark it
                curRow = 2
                Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
                    If WCGWs(i).id = shSCOTWCGWs.Cells(curRow, 1).value Then
                        shSCOTWCGWs.Cells(curRow, 11).value = ""
                        shSCOTWCGWs.Cells(curRow, 12).value = ""
                        Exit Do
                    End If
                    curRow = curRow + 1
                Loop
            End If
        End If
    Next i
    Call LoadDataToArrays
    'Call SaveEmbedded
    
    isMigrating = False
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next
    
End Sub

Private Sub MoveOverWCGWDataV11(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler
    Dim sBookmark As String
    Dim indexWCGW As Integer
    Dim i As Integer
    Dim j As Integer
    Dim thisControl As String
    Dim sourceTbl As Word.Table
    Dim targetTbl As Word.Table
    Dim thisRow As String
    
    docSCOTWT.UndoClear
    DoEvents
    'Main WCGW EY Canvas data has already been written out...just get the user entered stuff
    indexWCGW = GetWCGWIndex(wcgwToMigrate)

    'loop through the controls to move data
    For i = 0 To WCGWs(indexWCGW).numControls
        docSCOTWT.UndoClear
        DoEvents
        thisControl = WCGWs(indexWCGW).Controls(i).id
        
        'is this an already added section?
        If Not WCGWs(indexWCGW).Controls(i).isMainDoc Then
            'move the link only
            sBookmark = "BMAlreadyAdded"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        Else
            'move the whole thing
            sBookmark = "InSCOTYes"
            If sourceDocument.Bookmarks.Exists(sBookmark & thisControl & "WCGW" & wcgwToMigrate) Then
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call targetDocument.InAnotherSCOTYesAll
                End If
            Else
                'this should exist
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            
            sBookmark = "BMWPRefData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ControlDescripData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            docSCOTWT.UndoClear
            DoEvents
            'design attribs - need to add or remove lines if needed
            Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAtt" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Set targetTbl = targetDocument.Bookmarks("BMPropDesignAtt" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Do While sourceTbl.Rows.count <> targetTbl.Rows.count
                If sourceTbl.Rows.count > targetTbl.Rows.count Then
                    'need to add some
                    sBookmark = "ControlDesAdd"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call AddRow
                ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
                    'need to delete some
                    sBookmark = "ControlDesDel"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW2").Select
                    Call DeleteRow
                End If
            Loop
            For j = 2 To sourceTbl.Rows.count
                docSCOTWT.UndoClear
                DoEvents
                sBookmark = "ControlDesData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j)), sBookmark)
                
                sBookmark = "BMCheckInqB"
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Select
                    Call targetDocument.CheckInqAll
                End If
                sBookmark = "BMCheckObsB"
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Select
                    Call targetDocument.CheckObsAll
                End If
                sBookmark = "BMCheckInsB"
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Select
                    Call targetDocument.CheckInsAll
                End If
                sBookmark = "BMCheckRepB"
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j))).Select
                    Call targetDocument.CheckRepAll
                End If
               
            Next j
            
            Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAttNON" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Set targetTbl = targetDocument.Bookmarks("BMPropDesignAttNON" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Do While sourceTbl.Rows.count <> targetTbl.Rows.count
                If sourceTbl.Rows.count > targetTbl.Rows.count Then
                    'need to add some
                    sBookmark = "ControlPropAdd"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call AddRow
                ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
                    'need to delete some
                    sBookmark = "ControlPropDel"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW2").Select
                    Call DeleteRow
                End If
            Loop
            docSCOTWT.UndoClear
            DoEvents
            For j = 2 To sourceTbl.Rows.count
                sBookmark = "ControlPropData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j)), sBookmark)
            Next j
            
            sBookmark = "ReviewYes"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.ControlPropertiesYesAll
            End If
            sBookmark = "ReviewNo"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.ControlPropertiesNoAll
            End If
            sBookmark = "CheckTest1B"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CheckTest1All
            End If
            sBookmark = "CheckTest2B"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CheckTest2All
            End If
            sBookmark = "CheckTest3B"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CheckTest3All
            End If
            
            sBookmark = "ApplicationName"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DataOwnerName"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            sBookmark = "PersonYes"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CntlPropPerYes
            End If
            sBookmark = "PersonNo"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CntlPropPerNo
            End If
            
            docSCOTWT.UndoClear
            DoEvents
            sBookmark = "DocBasisData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DocObserveData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            sBookmark = "InfoDataUsed"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "SourceData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "BMRelAppsSelected"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            sBookmark = "PreAndSenData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ResultsData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            sBookmark = "InquireOfData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "TransData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DescribeConfirmData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ReviewData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            If gFormVersionToPull = "1.2" Or gFormVersionToPull = "1.3" Or gFormVersionToPull = "1.4" Then
                sBookmark = "ReviewRefData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            End If
            
            sBookmark = "ConcludeYes"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CntlPropConcYes
            End If
            sBookmark = "ConcludeNo"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.CntlPropConcNo
            End If
        End If
    Next i
    docSCOTWT.UndoClear
    DoEvents
    
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MigrateData()
    Dim i As Integer
    Dim curRow As Integer
    Dim targetIdx As Integer

On Error GoTo errHandler
    
    'make sure the target data file is open
    Call CheckForOpenEmbedded
    
    curRow = 2
    Do While shSourceRisks.Cells(curRow, 1).value <> ""
        shSourceRisks.Rows(curRow).Copy Destination:=shRisks.Rows(curRow)
        curRow = curRow + 1
    Loop
    curRow = 2
    Do While shSourceSCOTWCGWs.Cells(curRow, 1).value <> ""
        shSourceSCOTWCGWs.Rows(curRow).Copy Destination:=shSCOTWCGWs.Rows(curRow)
        curRow = curRow + 1
    Loop
         
    'need to convert the Type/Freq from text to id
    curRow = 2
    Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
        If Not IsNumeric(shSCOTWCGWs.Cells(curRow, 6).value) Then
            Select Case LCase(shSCOTWCGWs.Cells(curRow, 6).value)
                Case LCase(Translate("Application", "English"))
                    shSCOTWCGWs.Cells(curRow, 6).value = 1
                Case LCase(Translate("ITDepAll", "English"))
                    shSCOTWCGWs.Cells(curRow, 6).value = 2
                Case LCase(Translate("ManualPrevent", "English"))
                    shSCOTWCGWs.Cells(curRow, 6).value = 3
                Case LCase(Translate("ManualDetect", "English"))
                    shSCOTWCGWs.Cells(curRow, 6).value = 4
                Case Else
                    shSCOTWCGWs.Cells(curRow, 6).value = ""
            End Select
        End If
        If Not IsNumeric(shSCOTWCGWs.Cells(curRow, 7).value) Then
            Select Case LCase(shSCOTWCGWs.Cells(curRow, 7).value)
                Case LCase(Translate("MoreThanDaily", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 1
                Case LCase(Translate("Daily", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 2
                Case LCase(Translate("Weekly", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 3
                Case LCase(Translate("Monthly", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 4
                Case LCase(Translate("Quarterly", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 5
                Case LCase(Translate("Annually", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 6
                Case LCase(Translate("Other", "English"))
                    shSCOTWCGWs.Cells(curRow, 7).value = 8
                Case Else
                    shSCOTWCGWs.Cells(curRow, 7).value = ""
            End Select
        End If
        curRow = curRow + 1
    Loop
        
    shSourceFormData.Range("WorkspaceID").Copy Destination:=shFormData.Range("WorkspaceID")
    shSourceFormData.Range("EngagementID").Copy Destination:=shFormData.Range("EngagementID")
    shSourceFormData.Range("EngageAPIVersion").Copy Destination:=shFormData.Range("EngageAPIVersion")
    shSourceFormData.Range("SCOTID").Copy Destination:=shFormData.Range("SCOTID")
    shSourceFormData.Range("NumberOfWCGWs").Copy Destination:=shFormData.Range("NumberOfWCGWs")
    shSourceFormData.Range("NumberOfWTs").Copy Destination:=shFormData.Range("NumberOfWTs")
    shSourceFormData.Range("NumberCritPaths").Copy Destination:=shFormData.Range("NumberCritPaths")
    shSourceFormData.Range("GAAS").Copy Destination:=shFormData.Range("GAAS")
    shSourceFormData.Range("ChosenLanguage").Copy Destination:=shFormData.Range("ChosenLanguage")
    Call UpdateBookmark("ChosenLanguage", shFormData.Range("ChosenLanguage").value)

    shSourceFormData.Range("NatureOfEngage").Copy Destination:=shFormData.Range("NatureOfEngage")
    
    If LCase(shSourceFormData.Range("SCOTType").value) = "routine" Then
        shFormData.Range("SCOTType").value = 1
    ElseIf LCase(shSourceFormData.Range("SCOTType").value) = "nonroutine" Then
        shFormData.Range("SCOTType").value = 2
    ElseIf LCase(shSourceFormData.Range("SCOTType").value) = "estimation" Then
        shFormData.Range("SCOTType").value = 3
    End If
    If LCase(shSourceFormData.Range("SCOTType2").value) = "routine" Then
        shFormData.Range("SCOTType2").value = 1
    ElseIf LCase(shSourceFormData.Range("SCOTType2").value) = "nonroutine" Then
        shFormData.Range("SCOTType2").value = 2
    ElseIf LCase(shSourceFormData.Range("SCOTType2").value) = "estimation" Then
        shFormData.Range("SCOTType2").value = 3
    End If
    If LCase(shSourceFormData.Range("PrelimAudit").value) = "controls" Then
        shFormData.Range("PrelimAudit").value = 1
    ElseIf LCase(shSourceFormData.Range("PrelimAudit").value) = "substantive" Then
        shFormData.Range("PrelimAudit").value = 2
    End If
    shSourceFormData.Range("EngagementURI").Copy Destination:=shFormData.Range("EngagementURI")
    shFormData.Range("PCAOB").value = IIf(LCase(shSourceFormData.Range("PCAOB").value) = "true" Or LCase(shSourceFormData.Range("PCAOB").value) = "y", "Y", "N")
    shFormData.Range("PCAOBIA").value = IIf(LCase(shSourceFormData.Range("PCAOBIA").value) = "true" Or LCase(shSourceFormData.Range("PCAOBIA").value) = "y", "Y", "N")
    shFormData.Range("IntegratedAudit").value = IIf(LCase(shSourceFormData.Range("IntegratedAudit").value) = "true" Or LCase(shSourceFormData.Range("IntegratedAudit").value) = "y", "Y", "N")
    shFormData.Range("ShowDesign").value = IIf(LCase(shSourceFormData.Range("ShowDesign").value) = "true" Or LCase(shSourceFormData.Range("ShowDesign").value) = "y", "Y", "N")
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingData", ChosenLanguage), "ImportedDataFile")
    Call LogErrorMessage(Translate("MigratingData", ChosenLanguage) & " ImportedDataFile", thisErr)
    Resume Next
    
End Sub

Private Sub MoveOverWCGWDataV103(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler
    Dim sBookmark As String
    Dim indexWCGW As Integer
    Dim i As Integer
    Dim j As Integer
    Dim thisControl As String
    Dim sourceTbl As Word.Table
    Dim targetTbl As Word.Table
    Dim thisOB As InlineShape
    Dim thisRow As String
    Dim foundBMCheckInqB As Boolean
    Dim foundBMCheckObsB As Boolean
    Dim foundBMCheckInsB As Boolean
    Dim foundBMCheckRepB As Boolean
    Dim foundTestStrEY As Boolean
    Dim foundTestStrRep As Boolean
    Dim foundTestStrRev As Boolean
    Dim foundPersonY As Boolean
    Dim foundPersonN As Boolean
    Dim foundConcY As Boolean
    Dim foundConcN As Boolean
        
    docSCOTWT.UndoClear
    DoEvents
    'Main WCGW EY Canvas data has already been written out...just get the user entered stuff
    indexWCGW = GetWCGWIndex(wcgwToMigrate)

    'loop through the controls to move data
    For i = 0 To WCGWs(indexWCGW).numControls
        docSCOTWT.UndoClear
        DoEvents
        thisControl = WCGWs(indexWCGW).Controls(i).id
        
        'is this an already added section?
        If Not WCGWs(indexWCGW).Controls(i).isMainDoc Then
            'move the link only
            sBookmark = "BMAlreadyAdded"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        Else
            'move the whole thing
            sBookmark = "InSCOTYes"
            If sourceDocument.Bookmarks.Exists(sBookmark & thisControl & "WCGW" & wcgwToMigrate) Then
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call targetDocument.InAnotherSCOTYesAll
                End If
            Else
                'this should exist
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            
            sBookmark = "BMWPRefData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ControlDescripData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            'design attribs - need to add or remove lines if needed
            Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAtt" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Set targetTbl = targetDocument.Bookmarks("BMPropDesignAtt" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Do While sourceTbl.Rows.count <> targetTbl.Rows.count
                If sourceTbl.Rows.count > targetTbl.Rows.count Then
                    'need to add some
                    sBookmark = "ControlDesAdd"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call AddRow
                ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
                    'need to delete some
                    sBookmark = "ControlDesDel"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW2").Select
                    Call DeleteRow
                End If
            Loop
            docSCOTWT.UndoClear
            DoEvents
            For j = 2 To sourceTbl.Rows.count
                sBookmark = "ControlDesData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j)), sBookmark)
            Next j
            
            Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAttNON" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Set targetTbl = targetDocument.Bookmarks("BMPropDesignAttNON" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Do While sourceTbl.Rows.count <> targetTbl.Rows.count
                If sourceTbl.Rows.count > targetTbl.Rows.count Then
                    'need to add some
                    sBookmark = "ControlPropAdd"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call AddRow
                ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
                    'need to delete some
                    sBookmark = "ControlPropDel"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW2").Select
                    Call DeleteRow
                End If
            Loop
            For j = 2 To sourceTbl.Rows.count
                sBookmark = "ControlPropData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j)), sBookmark)
            Next j
            
            docSCOTWT.UndoClear
            DoEvents
            sBookmark = "ReviewYes"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.ControlPropertiesYesAll
            End If
            sBookmark = "ReviewNo"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.ControlPropertiesNoAll
            End If
            
            sBookmark = "ApplicationName"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DataOwnerName"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            sBookmark = "DocBasisData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DocObserveData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            sBookmark = "InfoDataUsed"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "SourceData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "BMRelAppsSelected"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            sBookmark = "PreAndSenData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ResultsData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            sBookmark = "InquireOfData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "TransData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DescribeConfirmData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ReviewData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            docSCOTWT.UndoClear
            DoEvents
            foundBMCheckInqB = False
            foundBMCheckObsB = False
            foundBMCheckInsB = False
            foundBMCheckRepB = False
            foundTestStrEY = False
            foundTestStrRep = False
            foundTestStrRev = False
            foundPersonY = False
            foundPersonN = False
            foundConcY = False
            foundConcN = False
            For Each thisOB In sourceDocument.InlineShapes
                docSCOTWT.UndoClear
                DoEvents
                If thisOB.Type = wdInlineShapeOLEControlObject Then
                    If thisOB.OLEFormat.ClassType = "Forms.CheckBox.1" Then
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckInqB"
                                'since these are still controls in the old doc...see if they are broken with a 1 at the end
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckInqAll
                            End If
                            foundBMCheckInqB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckObsB"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckObsAll
                            End If
                            foundBMCheckObsB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckInsB"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckInsAll
                            End If
                            foundBMCheckInsB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureReper" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureReper" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckRepB"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckRepAll
                            End If
                            foundBMCheckRepB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CTestStratEY" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratEY" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "CheckTest1B"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CheckTest1All
                            End If
                            foundTestStrEY = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CTestStratReperf" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReperf" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "CheckTest2B"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CheckTest2All
                            End If
                            foundTestStrRep = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CTestStratReview" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReview" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "CheckTest3B"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CheckTest3All
                            End If
                            foundTestStrRev = True
                        End If
                    End If
                    If thisOB.OLEFormat.ClassType = "Forms.OptionButton.1" Then
                        If thisOB.OLEFormat.Object.name = "ControlOwnerPersonYes" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "PersonYes"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropPerYes
                            End If
                            foundPersonY = True
                        ElseIf thisOB.OLEFormat.Object.name = "ControlOwnerPersonNo" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "PersonNo"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropPerNo
                            End If
                            foundPersonN = True
                        ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionYes" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "ConcludeYes"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropConcYes
                            End If
                            foundConcY = True
                        ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionNo" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "ConcludeNo"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropConcNo
                            End If
                            foundConcN = True
                        End If
                    End If
                End If
            Next
            docSCOTWT.UndoClear
            DoEvents
            If Not foundBMCheckInqB Then
                sBookmark = "BMCheckInqB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundBMCheckObsB Then
                sBookmark = "BMCheckObsB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundBMCheckInsB Then
                sBookmark = "BMCheckInsB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundBMCheckRepB Then
                sBookmark = "BMCheckRepB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundTestStrEY Then
                sBookmark = "CheckTest1B"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundTestStrRep Then
                sBookmark = "CheckTest2B"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundTestStrRev Then
                sBookmark = "CheckTest3B"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundPersonY Then
                sBookmark = "PersonYes"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundPersonN Then
                sBookmark = "PersonNo"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundConcY Then
                sBookmark = "ConcludeYes"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundConcN Then
                sBookmark = "ConcludeNo"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
        End If
    Next i
    docSCOTWT.UndoClear
    DoEvents
    
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MoveOverWCGWDataV102(sourceDocument As Document, targetDocument As Document)
'some bookmarks were renamed to make shorter in newer version, so need to change those and also may need to find bookmark issues to move them
On Error GoTo errHandler
    Dim sBookmark As String
    Dim sBookmark2 As String
    Dim sBookmark3 As String 'this will hold the first 40 chars of the bookmark to handle the bookmark issue
    Dim indexWCGW As Integer
    Dim i As Integer
    Dim j As Integer
    Dim thisControl As String
    Dim sourceTbl As Word.Table
    Dim targetTbl As Word.Table
    Dim thisOB As InlineShape
    Dim thisRow As String
    Dim foundBMCheckInqB As Boolean
    Dim foundBMCheckObsB As Boolean
    Dim foundBMCheckInsB As Boolean
    Dim foundBMCheckRepB As Boolean
    Dim foundTestStrEY As Boolean
    Dim foundTestStrRep As Boolean
    Dim foundTestStrRev As Boolean
    Dim foundPersonY As Boolean
    Dim foundPersonN As Boolean
    Dim foundConcY As Boolean
    Dim foundConcN As Boolean
    
    'Main WCGW EY Canvas data has already been written out...just get the user entered stuff
    docSCOTWT.UndoClear
    DoEvents
    indexWCGW = GetWCGWIndex(wcgwToMigrate)

    'loop through the controls to move data
    For i = 0 To WCGWs(indexWCGW).numControls
        docSCOTWT.UndoClear
        DoEvents
        thisControl = WCGWs(indexWCGW).Controls(i).id
        
        'is this an already added section?
        If Not WCGWs(indexWCGW).Controls(i).isMainDoc Then
            'move the link only
            sBookmark = "BMAlreadyAdded"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        Else
            'move the whole thing
        
            sBookmark = "InSCOTYes"
            If sourceDocument.Bookmarks.Exists(sBookmark & thisControl & "WCGW" & wcgwToMigrate) Then
                If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                    'it's checked, check the new one
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call targetDocument.InAnotherSCOTYesAll
                End If
            Else
                'this should exist
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            
            docSCOTWT.UndoClear
            DoEvents
            sBookmark = "BMWPRefData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ControlDescripData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            'design attribs - need to add or remove lines if needed
            Set sourceTbl = sourceDocument.Bookmarks(Left("BMPropDesignAttributes" & thisControl & "WCGW" & wcgwToMigrate, 40)).Range.Tables(1)
            Set targetTbl = targetDocument.Bookmarks("BMPropDesignAtt" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Do While sourceTbl.Rows.count <> targetTbl.Rows.count
                If sourceTbl.Rows.count > targetTbl.Rows.count Then
                    'need to add some
                    sBookmark = "ControlDesAdd"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call AddRow
                ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
                    'need to delete some
                    sBookmark = "ControlDesDel"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW2").Select
                    Call DeleteRow
                End If
            Loop
            docSCOTWT.UndoClear
            DoEvents
            For j = 2 To sourceTbl.Rows.count
                sBookmark = "ControlDesData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j)), sBookmark)
            Next j
            
            Set sourceTbl = sourceDocument.Bookmarks(Left("BMPropDesignAttributesNON" & thisControl & "WCGW" & wcgwToMigrate, 40)).Range.Tables(1)
            Set targetTbl = targetDocument.Bookmarks("BMPropDesignAttNON" & thisControl & "WCGW" & wcgwToMigrate).Range.Tables(1)
            Do While sourceTbl.Rows.count <> targetTbl.Rows.count
                If sourceTbl.Rows.count > targetTbl.Rows.count Then
                    'need to add some
                    sBookmark = "ControlPropAdd"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                    Call AddRow
                ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
                    'need to delete some
                    sBookmark = "ControlPropDel"
                    targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW2").Select
                    Call DeleteRow
                End If
            Loop
            For j = 2 To sourceTbl.Rows.count
                sBookmark = "ControlPropData"
                Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate & "ROW" & Trim(str(j)), sBookmark)
            Next j
            
            docSCOTWT.UndoClear
            DoEvents
            sBookmark = "ReviewYes"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.ControlPropertiesYesAll
            End If
            sBookmark = "ReviewNo"
            If InStr(sourceDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Range.Fields(1).Code.Text, ".") <> 0 Then
                'it's checked, check the new one
                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                Call targetDocument.ControlPropertiesNoAll
            End If
            
            sBookmark = "ApplicationName"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DataOwnerName"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            sBookmark = "DocBasisData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DocObserveData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            sBookmark = "InfoDataUsed"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "SourceData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "BMRelAppsSelected"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            sBookmark = "PreAndSenData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ResultsData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
        
            sBookmark = "InquireOfData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "TransData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "DescribeConfirmData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            sBookmark = "ReviewData"
            Call MoveBookmark(sourceDocument, targetDocument, sBookmark & thisControl & "WCGW" & wcgwToMigrate, sBookmark)
            
            docSCOTWT.UndoClear
            DoEvents
            foundBMCheckInqB = False
            foundBMCheckObsB = False
            foundBMCheckInsB = False
            foundBMCheckRepB = False
            foundTestStrEY = False
            foundTestStrRep = False
            foundTestStrRev = False
            foundPersonY = False
            foundPersonN = False
            foundConcY = False
            foundConcN = False
            For Each thisOB In sourceDocument.InlineShapes
                docSCOTWT.UndoClear
                DoEvents
                If thisOB.Type = wdInlineShapeOLEControlObject Then
                    If thisOB.OLEFormat.ClassType = "Forms.CheckBox.1" Then
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckInqB"
                                'since these are still controls in the old doc...see if they are broken with a 1 at the end
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckInqAll
                            End If
                            foundBMCheckInqB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckObsB"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckObsAll
                            End If
                            foundBMCheckObsB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckInsB"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckInsAll
                            End If
                            foundBMCheckInsB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CDesNatureReper" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureReper" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "BMCheckRepB"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate & thisRow).Select
                                Call targetDocument.CheckRepAll
                            End If
                            foundBMCheckRepB = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CTestStratEY" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratEY" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "CheckTest1B"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CheckTest1All
                            End If
                            foundTestStrEY = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CTestStratReperf" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReperf" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "CheckTest2B"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CheckTest2All
                            End If
                            foundTestStrRep = True
                        End If
                        If InStr(thisOB.OLEFormat.Object.name, "CTestStratReview" & thisControl & "WCGW" & wcgwToMigrate) <> 0 Then
                            If thisOB.OLEFormat.Object.value Then
                                'it's checked, check the new one
                                thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReview" & thisControl & "WCGW" & wcgwToMigrate, "")
                                sBookmark = "CheckTest3B"
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CheckTest3All
                            End If
                            foundTestStrRev = True
                        End If
                    End If
                    If thisOB.OLEFormat.ClassType = "Forms.OptionButton.1" Then
                        If thisOB.OLEFormat.Object.name = "ControlOwnerPersonYes" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "PersonYes"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropPerYes
                            End If
                            foundPersonY = True
                        ElseIf thisOB.OLEFormat.Object.name = "ControlOwnerPersonNo" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "PersonNo"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropPerNo
                            End If
                            foundPersonN = True
                        ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionYes" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "ConcludeYes"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropConcYes
                            End If
                            foundConcY = True
                        ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionNo" & thisControl & "WCGW" & wcgwToMigrate Then
                            If thisOB.OLEFormat.Object.value Then
                                sBookmark = "ConcludeNo"
                                'it's checked, check the new one
                                targetDocument.Bookmarks(sBookmark & thisControl & "WCGW" & wcgwToMigrate).Select
                                Call targetDocument.CntlPropConcNo
                            End If
                            foundConcN = True
                        End If
                    End If
                End If
            Next
            docSCOTWT.UndoClear
            DoEvents
            If Not foundBMCheckInqB Then
                sBookmark = "BMCheckInqB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundBMCheckObsB Then
                sBookmark = "BMCheckObsB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundBMCheckInsB Then
                sBookmark = "BMCheckInsB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundBMCheckRepB Then
                sBookmark = "BMCheckRepB"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundTestStrEY Then
                sBookmark = "CheckTest1B"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundTestStrRep Then
                sBookmark = "CheckTest2B"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundTestStrRev Then
                sBookmark = "CheckTest3B"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundPersonY Then
                sBookmark = "PersonYes"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundPersonN Then
                sBookmark = "PersonNo"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundConcY Then
                sBookmark = "ConcludeYes"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
            If Not foundConcN Then
                sBookmark = "ConcludeNo"
                Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
                Call OutputErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark)
            End If
        End If
    Next i
    docSCOTWT.UndoClear
    DoEvents
    
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("MigratingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("MigratingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub







Attribute VB_Name = "modJObjectHelpers"
Option Explicit
Option Private Module

Public Function escapeify(s As String) As String
    escapeify = _
                    Replace( _
                        Replace( _
                            Replace( _
                                Replace(s _
                                    , q, "\" & q), _
                                "%", "\" & "%"), _
                            ">", "\>"), _
                        "<", "\<")
    
End Function

Public Function q() As String
    q = Chr(34)
End Function

Public Function makeKey(v As Variant) As String
    makeKey = LCase(Trim(CStr(v)))
End Function

Public Function arrayLength(a) As Long
    arrayLength = UBound(a) - LBound(a) + 1
End Function

Public Function GetJSonValue(job As cJobject, findThis As String) As String
'function to allow for pulling a specific value from a jSON object
'  job - the jSON object to search
'  findThis - the key to find to pull out the value
On Error GoTo catch_err

    'define variables
    Dim jo As cJobject, jom As cJobject
    Dim FoundValue As String
    
    'find info
    FoundValue = ""
    
    'The find method searches all nodes in the jSON object for the passed in key value
    Set jo = job.find(findThis)
    
    ' if jo is nothing then key was not found in object
    If Not jo Is Nothing Then
        ' check if multiple values exist and then include the array separated by commas
        If jo.isArrayRoot Then
            'multiple values found, concat them together
            FoundValue = ""
            If jo.hasChildren Then
                For Each jom In jo.children
                    If FoundValue <> "" Then
                        FoundValue = FoundValue & ","
                    End If
                    FoundValue = FoundValue & jom.toString
                Next jom
            End If
        Else
            'just one found, send it back
            FoundValue = jo.value
        End If
    End If
    
    'return the found data
    GetJSonValue = FoundValue
    
    Exit Function
    
catch_err:
    MsgBox Err.Number & ": " & Err.Description

End Function
Attribute VB_Name = "modPullData"
Option Explicit
Option Private Module
Public pDocumentToPull As String
Public gFormVersionToPull As String
Private totalWCGWs As Integer
Public CancelPull As Boolean
Private thisErr As ErrObject
Private noEmbedded As Boolean
Public gPullEngagementID As String
Public gSelectedSCOT As String
Public Type BookMarkTypeRF
    id As Long
    name As String
    convertedName As String
End Type
Public sourceRFBMs() As BookMarkTypeRF
Public numSourceRFBMs As Integer
Public gFileArchiveFlag As Boolean

Public Function FilePreviouslyOpenedForPull() As Boolean
    
    Call CheckForOpenEmbedded
    
    If shFormData.Range("SuppressMigratePrompt").Text = "Y" Then
        FilePreviouslyOpenedForPull = True
        Exit Function
    End If
    
    FilePreviouslyOpenedForPull = False

End Function

Public Sub CheckForDataPull()
'this is to ask for loading any data from a different form (includes for migration, roll forward, copy or to just fix a broken form
On Error GoTo errHandler

    Dim sourceDocument As Document
    Dim targetDocument As Document
    Dim fileToPull As String
    Dim choosingFile As Boolean

    ' check suppress migrate prompt flag (file was previously opened)
    If FilePreviouslyOpenedForPull Then Exit Sub
    
    Set targetDocument = docSCOTWT

    gUserMessages = False
    
    Call InitializeUserLogger(targetDocument)
    
StartOver:
    choosingFile = True
    While choosingFile
        fileToPull = GetFileToPull(targetDocument)
        If fileToPull = "" Then Exit Sub
        
        frmStatusWindow.lblMessage.Caption = Translate("MainPullMessage", ChosenLanguage)
        frmStatusWindow.Show (False)
        Set sourceDocument = Nothing
        Set sourceDocument = ValidFileToPull(fileToPull)  'this will also catch if the source document is missing it's embedded data
        If Not sourceDocument Is Nothing And Not CancelPull Then
            choosingFile = False
        End If
        Unload frmStatusWindow
    Wend

    pDocumentToPull = fileToPull
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    frmStatusWindow.lblMessage.Caption = Translate("MainPullData", ChosenLanguage)
    frmStatusWindow.Show (False)
    DoEvents
    gPullingDocument = True
    
    'now we need to determine what we are dealing with
    '   is this a migration of same enagagement, or a roll forward/copy, a fix, etc
    ' Let the user choose an enagagement and this will help.
    gPullEngagementID = ""
    If Not noEmbedded Then
        gPullEngagementID = shSourceFormData.Range("EngagementID")
    End If
    gSelectedSCOT = sourceDocument.Bookmarks("ImportedScotName").Range.Text
    Call ImportCanvas(False) 'False mean an import and not a refresh
    If Profile.EngagementID = "" Then 'they cancelled, so we will too!
        'need to clean up the open forms
        If Not wkbkSourceData Is Nothing Then
            wkbkSourceData.Close (False)
            Set wkbkSourceData = Nothing
        End If
        sourceDocument.Close (False)
        Set sourceDocument = Nothing
        gPullingDocument = False
        GoTo StartOver
    End If
    'is this a simple migrate where the old form has the correct IDs and we are just momving it
    If Profile.EngagementID = gPullEngagementID And Not gFileArchiveFlag Then
        'then continue as a migrate
        gPullingDocument = False
        Call MigrateForm(sourceDocument, targetDocument)  'hand off to the Migrate process
        Exit Sub
    End If
    Call OutputUserLogHeader(False)
    
    ' if we get here, unhide all
    sourceDocument.content.Font.Hidden = False
    targetDocument.content.Font.Hidden = False
    
    'and since 2013 is really SLOW at copy paste, let's make the applications invisible to speed it up
    Application.Visible = False
    frmStatusWindow.lblMessage.Caption = Translate("MainPullData", ChosenLanguage)
    frmStatusWindow.Show (False)
    
    'roll forward the forms based on versions, since they are different
    
    'as of 1.2, the embedded data file is mostly the same...so we can call it first for all of them
    'we will pull into the RF sheet to be able to text match and map the data
    If Not noEmbedded Then Call RFData
    Call LoadProfile
    
    'Need to copy the whole source doc to a temp doc in this process
    Dim tempDoc As Document
    Set tempDoc = docSCOTWT.Application.Documents.add
    tempDoc.Range.InsertXML sourceDocument.Range.WordOpenXML

    DoEvents
    sourceDocument.Close False
    If Not mfxlApp Is Nothing Then
        If mfxlApp.workbooks.count = 0 Then
            mfxlApp.Quit
        End If
        Set mfxlApp = Nothing
    End If
    If Not mfwdApp Is Nothing Then
        mfwdApp.Quit
        Set mfwdApp = Nothing
    End If

    Set sourceDocument = tempDoc
    ChosenLanguage = Profile.ChosenLanguage
    If ChosenLanguage = "" Then Call FindLanguage(sourceDocument)
        
    'just in case the importing file is in a different language, we need to translate this form.
    If ChosenLanguage <> "English" Then Call TranslateObjects
    frmStatusWindow.lblMessage.Caption = Translate("MainPullSec", ChosenLanguage)
    frmStatusWindow.Show (False)
    Call LoadDataToArrays 'get the imported data into our arrays to process with, this will allow us to use the functions already in the form.
    
    'as of 1.2, the main document bookmarks are the same...so we can call it first for all of them, WCGWs are handled later
    Call RFBookmarksV12(sourceDocument, targetDocument)
    
    frmStatusWindow.lblMessage.Caption = Translate("MainPullObjects", ChosenLanguage)
    frmStatusWindow.Show (False)
    Select Case gFormVersionToPull
        Case "1.4", "1.3", "1.2", "1.1"
            '1.4, 1.3, 1.2 and 1.1 have no activex controls on document
            Call RFObjectsV11(sourceDocument, targetDocument)
        Case "1.04"
            '1.04, 1.05 has no activex controls in the WCGW sections, but the main document still has them
            Call RFObjectsV104(sourceDocument, targetDocument)
        Case "1.03"
            '1.03 and previous still has activex controls in the WCGWs...so need to handle these diff than newer versions inside this function
            Call RFObjectsV104(sourceDocument, targetDocument)
        Case "1.02" 'this one handles v1.02 and all previous ones
            '1.02 and previous still has activex controls in the WCGWs...so need to handle these diff but also may have bookmark issues we need to fix
            Call RFObjectsV104(sourceDocument, targetDocument)
    End Select
    
    frmStatusWindow.lblMessage.Caption = Translate("MainPullWCGWs", ChosenLanguage)
    frmStatusWindow.Show (False)
    'this is called for all versions, different versions are handled inside this function
    Call RFWCGWs(sourceDocument, targetDocument)
    
    'Need to ensure we have moved all the comments over
    'Commented out because it don't work :(
    'Call MoveExtraComments(sourceDocument, targetDocument)
    'Instead we will list them for the user to move them selves
    Call ListRemainingComments(sourceDocument, targetDocument)
    'Any text that is in the source document but outside any bookmarks will not be moved and is the users responsibililty to move over
    
    'Look to see if we have more Word Objects then we should
    Dim thisOB As InlineShape
    Dim sourceCount As Integer
    Dim targetCount As Integer
    
    sourceCount = 0
    For Each thisOB In sourceDocument.InlineShapes
        If thisOB.Type = wdInlineShapeEmbeddedOLEObject Then
            'We don't count the data one in case the source data embedded is corrupt or missing
            If Left(LCase(thisOB.OLEFormat.IconLabel), 4) <> "data" Then
                sourceCount = sourceCount + 1
            End If
        End If
    Next
    targetCount = 0
    For Each thisOB In docSCOTWT.InlineShapes
        If thisOB.Type = wdInlineShapeEmbeddedOLEObject Then
            'We don't count the data one in case the source data embedded is corrupt or missing
            If Left(LCase(thisOB.OLEFormat.IconLabel), 4) <> "data" Then
                targetCount = targetCount + 1
            End If
        End If
    Next
    
    If targetCount > sourceCount Then
        Call LogUserMessage("", "", Translate("WordObjectMessage", ChosenLanguage))
        Call OutputErrorMessage(Translate("WordObjectMessage", ChosenLanguage))
    End If
    
    ' Need to rehide stuff if needed in new document!!!
    targetDocument.Bookmarks("HiddenStuff").Range.Font.Hidden = True
    targetDocument.Bookmarks("StartAllowWCGWs").Range.Font.Hidden = True
    targetDocument.Bookmarks("AlertDiagnosticMsg").Range.Font.Hidden = True
    
    shFormData.Range("SuppressMigratePrompt").value = "Y"
    'Call SaveEmbedded
    
    Call HideAllMain

    gPullingDocument = False
    Application.Visible = True
    Unload frmStatusWindow

    Application.ScreenUpdating = True

    'close the original docuemnt without saving any changes
    sourceDocument.Close SaveChanges:=wdDoNotSaveChanges
    System.Cursor = wdCursorNormal
    
    Call DisplayUserMessages(False)
    Exit Sub

errHandler:
    Resume Next
    
End Sub

Private Sub ListRemainingComments(sourceDocument As Document, targetDocument As Document)
On Error Resume Next

    Dim srcComment As Comment
    Dim tgtComment As Comment
    Dim FoundIt As Boolean
    Dim thisBM As Bookmark
    Dim thisComment As String
    
    If sourceDocument.Comments.count <> targetDocument.Comments.count Then
        'Need to move the others
        For Each srcComment In sourceDocument.Comments
            FoundIt = False
            For Each tgtComment In targetDocument.Comments
                If srcComment.Scope = tgtComment.Scope And srcComment.Range = tgtComment.Range Then
                    'we already got one of these, move on
                    FoundIt = True
                    Exit For
                End If
            Next
            If Not FoundIt Then
                'Lets list it for the users to migrate manually
                If Application.Version = "14.0" Then
                    thisComment = srcComment.Author & "(" & srcComment.Date & ") " & srcComment.Range
                Else
                    thisComment = "(" & srcComment.Date & ") " & srcComment.Range
                End If
                Call LogUserMessage("", "", Translate("UserRFComment", ChosenLanguage) & thisComment)
                Call OutputErrorMessage(Translate("ErrorRFComment", ChosenLanguage) & thisComment)
            End If
        Next
    End If

End Sub

Private Sub MoveExtraComments(sourceDocument As Document, targetDocument As Document)
On Error Resume Next

    Dim srcComment As Comment
    Dim tgtComment As Comment
    Dim tempComment As Comment
    Dim tempReply As Comment
    Dim FoundIt As Boolean
    Dim thisBM As Bookmark
    Dim srcBookmark As String
    Dim myRange As Range
    
    If sourceDocument.Comments.count <> targetDocument.Comments.count Then
        'Need to move the others
        For Each srcComment In sourceDocument.Comments
            FoundIt = False
            For Each tgtComment In targetDocument.Comments
                If srcComment.Scope = tgtComment.Scope And srcComment.Range = tgtComment.Range Then
                    'we already got one of these, move on
                    FoundIt = True
                    Exit For
                End If
            Next
            If Not FoundIt Then
                If srcComment.Scope.Bookmarks.count = 0 And srcComment.Scope.Text <> "" Then
                    'find where this comment is and paste it
                    srcComment.Scope.Copy
                    Set myRange = targetDocument.content
                    myRange.find.Execute FindText:=srcComment.Scope.Text, Forward:=True
                    If myRange.find.found = True Then
                        'then paste here
                        myRange.Paste
                    Else
                        'not found...put at the end
                        GoTo LastChanceBM
                    End If
                ElseIf srcComment.Scope.Bookmarks.count > 0 Then
                    srcBookmark = srcComment.Scope.Bookmarks(srcComment.Scope.Bookmarks.count).name
                    'lets see if this Bookmark exists in the target doc
                    FoundIt = False
                    For Each thisBM In targetDocument.Bookmarks
                        If thisBM.name = srcBookmark Then
                            'yep, we got one
                            FoundIt = True
                            
                            'we can copy the range of the comment
                            srcComment.Scope.Copy
                            Set myRange = thisBM
                            myRange.find.Execute FindText:=srcComment.Scope.Text, Forward:=True
                            If myRange.find.found = True Then
                                'then paste here
                                myRange.Paste
                            End If
                            'if we lost this bookmark, readd it
                            If Not targetDocument.Bookmarks.Exists(srcBookmark) Then
                                targetDocument.Bookmarks.add srcBookmark, myRange
                            End If
                            Exit For
                        End If
                    Next
                    If Not FoundIt Then
                        'what do we do if this bookmark isn't in the new doc
                        'if there is text in the comment then we can find it
                        If srcComment.Scope.Text <> "" Then
                            srcComment.Scope.Copy
                            Set myRange = targetDocument.content
                            myRange.find.Execute FindText:=srcComment.Scope.Text, Forward:=True
                            If myRange.find.found = True Then
                                'then paste here
                                myRange.Paste
                            Else
                                'not found...put at the end
                                GoTo LastChanceBM
                            End If
                        Else
                            'not found...put at the end
                            GoTo LastChanceBM
                        End If
                    End If
                Else 'no text or bookmark...we can copy to the bottom or top of doc
LastChanceBM:
                    'only thing left is to copy it to the end of the document...at least they have it
                    srcComment.Scope.Copy
                    targetDocument.Bookmarks("MovedComments").Select
                    Selection.Collapse wdCollapseEnd
                    Selection.Paste
                End If
            End If
        Next
    End If

End Sub

Private Function GetFileToPull(targetDocument As Document) As String
    Dim fd As FileDialog
    Dim openingWorkbook As Boolean
    Dim FileChosen As Integer
    Dim response As VbMsgBoxResult
    
    openingWorkbook = True
    Call CheckForOpenEmbedded
    
    While openingWorkbook
        response = MsgBox(Translate("FilePull", ChosenLanguage), vbYesNoCancel)
        ' if response is no then update hidden field suppress migrate prompt. User will save the flag
        If response = vbNo Then
            shFormData.Range("SuppressMigratePrompt").value = "Y"
            'Call SaveEmbedded
            GetFileToPull = ""
            Exit Function
        End If
        
        If response = vbCancel Then
            ' user can reopen file and get prompted again for data pull
            targetDocument.Close SaveChanges:=wdDoNotSaveChanges
            GetFileToPull = ""
            Exit Function
        End If
        
        Set fd = Application.FileDialog(msoFileDialogFilePicker)
        fd.Filters.clear
        fd.Filters.add "280GL-SCOTs Documents", "*.docm, *.docx"
        fd.InitialFileName = Environ$("USERPROFILE") & "\Desktop"
        FileChosen = fd.Show
        If FileChosen = -1 Then
            GetFileToPull = fd.SelectedItems(1)
            Exit Function
        Else
            GetFileToPull = ""
        End If
    Wend
    
End Function

Private Function ValidFileToPull(filename As String) As Document
On Error GoTo errHandler

    Dim sourceDocument As Document
    Dim selectedFileFormType As String
    Dim fullPath As String
    Dim i As Integer
    Dim objExcelShape As Word.InlineShape
    Dim thisWS As Object 'Excel.Worksheet
    Dim secAutomation As Integer
    Dim rRangeCheck As Object
    Dim thisVersionBad As Boolean
    
    CancelPull = False
    
    'Need to check if this file is already opened
    If IsFileOpen(filename) Then
        ' Display a message stating the file in use.
        MsgBox Translate("FileAlreadyOpen", ChosenLanguage), vbOKOnly
        CancelPull = True
        Exit Function
    End If
    
    If mfwdApp Is Nothing Then
        Set mfwdApp = New Word.Application
    End If
    On Error Resume Next
    mfwdApp.DisplayAlerts = wdAlertsNone
    If Err <> 0 Then
        Set mfwdApp = New Word.Application
    End If
    On Error GoTo errHandler
    'Turn off message boxes such as save as or overwrite
    secAutomation = mfwdApp.Application.AutomationSecurity

    'set Word to disable macros when a document is opened via this
    mfwdApp.Application.AutomationSecurity = msoAutomationSecurityForceDisable
    mfwdApp.Application.Options.UpdateLinksAtOpen = False
    mfwdApp.Visible = False
    Set sourceDocument = mfwdApp.Documents.Open(filename)

    'check to see if tracked changes is turned on, exist or comments exist
    If sourceDocument.TrackRevisions Or sourceDocument.Revisions.count > 0 Or sourceDocument.Comments.count Then
        'show mesasge
        If MsgBox(Translate("ContinuePull", ChosenLanguage), vbYesNo) = vbNo Then
            mfwdApp.Application.AutomationSecurity = secAutomation
            GoTo InvalidForm
        End If
    End If
    
    'turn off spell checking in the source document
    sourceDocument.content.NoProofing = True

    'for the import, we need to turn off tracked changes in the source doc to be able to move them with the text to the new doc
    sourceDocument.TrackRevisions = False

    'restore original setting before closing
    mfwdApp.Application.AutomationSecurity = secAutomation

    noEmbedded = False
    
    'Need to open SourceDoc's embedded data file to validate if possible
    If Not sourceDocument.Bookmarks.Exists("HiddenStuff") Then
        'if no emebedded, that's ok, just more work for us
        noEmbedded = True
        GoTo CheckForOriginal
    Else
        sourceDocument.Bookmarks("HiddenStuff").Range.Font.Hidden = False
        For Each objExcelShape In sourceDocument.InlineShapes
            If objExcelShape.Type = wdInlineShapeEmbeddedOLEObject Then
                If InStr(LCase(objExcelShape.OLEFormat.IconLabel), "data.") <> 0 Then
                    Set sourceoOleFormat = objExcelShape.OLEFormat
                End If
            End If
        Next
    End If
    
    If sourceoOleFormat Is Nothing Then
        'oopsy, looks like we don't have the embedded document anymore :D
        noEmbedded = True
        GoTo CheckForOriginal
    End If
    
    If mfxlApp Is Nothing Then
        Set mfxlApp = CreateObject("Excel.Application")
    End If
    
    'Turn off message boxes such as save as or overwrite
    mfxlApp.DisplayAlerts = False
    mfxlApp.EnableEvents = False
    mfxlApp.Visible = True
    
    sourceoOleFormat.DoVerb wdOLEVerbOpen
    Set wkbkSourceData = sourceoOleFormat.Object 'mfxlApp.ActiveWorkbook
    
    'hide the workbook
    wkbkSourceData.Windows(1).Visible = False
    mfxlApp.WindowState = xlMinimized
    For Each thisWS In wkbkSourceData.Worksheets
        Select Case thisWS.CodeName
        Case "cdSCOTWCGWs"
            Set shSourceSCOTWCGWs = thisWS
        Case "cdRisks"
            Set shSourceRisks = thisWS
        Case "cdFormData"
            Set shSourceFormData = thisWS
        End Select
    Next

    ' is this a SCOTs form ? I hate this sloppy logic because of VB
    gFileArchiveFlag = IIf(LCase(shSourceFormData.Range("Archived").value) = "y" Or LCase(shSourceFormData.Range("Archived").value) = "true", True, False)
    
    On Error Resume Next
    ' previous versions of form did not have these next bookmarks
    selectedFileFormType = ""
    Set rRangeCheck = shSourceFormData.Range("FormType")
    On Error GoTo errHandler
    If rRangeCheck Is Nothing Then
        GoTo CheckForOriginal
    End If
    ' a newer version
    selectedFileFormType = shSourceFormData.Range("FormType").Text
    GoTo IsSCOTForm
    
CheckForOriginal:
    '  lets check for a bookmark we know is on the SCOTs form and not any other to determine if it is a SCOTs form file
    If sourceDocument.Bookmarks.Exists("ImportedScotName") Then
        'it's a SCOTs form
        selectedFileFormType = FormType
    Else
        GoTo InvalidForm
    End If
    
IsSCOTForm:
    thisVersionBad = CheckDocumentVersion(sourceDocument)

    If selectedFileFormType <> FormType Or thisVersionBad Then
        ' is the version less than or equal to the current one ?
        GoTo InvalidForm
    End If
    
    Set ValidFileToPull = sourceDocument
    Exit Function

InvalidForm:
    On Error Resume Next
    MsgBox Translate("FileRFError2", ChosenLanguage), vbOKOnly
    If Not wkbkSourceData Is Nothing Then
        wkbkSourceData.Close (False)
        Set wkbkSourceData = Nothing
    End If
    sourceDocument.Close (False)
    Set sourceDocument = Nothing
    CancelMigration = True
    Set ValidFileToPull = Nothing
    Exit Function
    
errHandler:
    Resume InvalidForm
    
End Function

Function WhichVersionAmI(sourceDocument As Document) As String
'Current version out there, 1.05(this one), 1.04, 1.03, 1.02, 1.01, 1.0
'Main difference in versions:
'   1.0, 1.01, 1.02: Minor differnces that should not affect the migration, can be handled as one.  These may contain bookmark name issues.
'   1.03: This version has fixed bookmark names but still have ActiveX controls in the WCGW sections.
'   1.04, 1.05: No ActiveX controls in WCGW sections
'   1.1: No ActiveX anywhere on document - Current version
'   1.2: Added functionality for Roll Forward and Copy (pull from other forms)
On Error GoTo errHandler

    'check for version
    If sourceDocument.Bookmarks.Exists("FormVersion") Then
        sourceDocument.Bookmarks("FormVersion").Range.Font.Hidden = False
        If sourceDocument.Bookmarks("FormVersion").Range.Text <> "" Then
            WhichVersionAmI = sourceDocument.Bookmarks("FormVersion").Range.Text
        Else
            'if this bookmark exists, but has no data then we will assume the most recent version.
            WhichVersionAmI = "1.4"
        End If
        sourceDocument.Bookmarks("FormVersion").Range.Font.Hidden = True
    Else
        With sourceDocument.content.find
            'Control Summary v1.05 = version 1.04 or 1.05
            .Text = "Control Summary v1.05"
            .Forward = True
            .Execute
            If .found = True Then
                WhichVersionAmI = "1.04" 'this version we removed activex controls in WCGW sections
            Else
                'Control Summary v1.04 = 1.03
                .Text = "Control Summary v1.04"
                .Forward = True
                .Execute
                If .found = True Then
                    WhichVersionAmI = "1.03" 'no bookmark issues
                Else
                    .Text = "Control Summary v0.13"
                    .Forward = True
                    .Execute
                    If .found = True Then
                        'All of these can be handled together - may have bookmark name problem
                        'Control Summary v0.13 = 1.02 or 1.01 or 1.0
                        WhichVersionAmI = "1.02"
                    Else
                        'We'll need more info to determine version
                        WhichVersionAmI = "0"
                    End If
                End If
            End If
        End With
    End If
    
    Exit Function

errHandler:
    Resume Next

End Function

Private Function CheckDocumentVersion(sourceDocument As Document) As String
On Error GoTo Version1
    
    gFormVersionToPull = WhichVersionAmI(sourceDocument)
    GoTo VersionCheck
    
Version1:
    gFormVersionToPull = "0"
    
VersionCheck:
    'Need to stop migrating of the current version - maybe next time
    Select Case gFormVersionToPull
        Case "1.4", "1.3", "1.2", "1.1", "1.05", "1.04", "1.03", "1.02"
            'these are version we can handle in migrate
            CheckDocumentVersion = False
        Case Else
            'newer version or version could not be determined.
            CheckDocumentVersion = True
    End Select
    
End Function

Private Sub RFObjectsV104(sourceDocument As Document, targetDocument As Document)
'v1.04 and previous version had all the main document controls as ActiveX, move them from that to our new macrobuttons
On Error GoTo errHandler
    
    Dim sBookmark As String
    Dim thisOB As InlineShape
    
    docSCOTWT.UndoClear
    DoEvents
    'need to loop through activex controls
    For Each thisOB In sourceDocument.InlineShapes
        If thisOB.Type = wdInlineShapeOLEControlObject Then
            If thisOB.OLEFormat.ClassType = "Forms.CheckBox.1" Then
                If thisOB.OLEFormat.Object.value Then
                    If InStr(thisOB.OLEFormat.Object.name, "chkNotTested") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckRotateB"
                        Call targetDocument.CheckRotateAll
                    End If
                    If InStr(thisOB.OLEFormat.Object.name, "chkIncludeRelated") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckRelateB"
                        Call targetDocument.CheckRelateAll
                    End If
                    If InStr(thisOB.OLEFormat.Object.name, "chkHighlyAutomated") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckHighlyB"
                        Call targetDocument.CheckHighlyAll
                    End If
                    If InStr(thisOB.OLEFormat.Object.name, "chkUsesServiceOrg") <> 0 Then
                        'it's checked, check the new one
                        sBookmark = "BMCheckServiceB"
                        Call targetDocument.CheckServiceAll
                    End If
                End If
            End If
            If thisOB.OLEFormat.ClassType = "Forms.OptionButton.1" Then
                If thisOB.OLEFormat.Object.value Then
                    If thisOB.OLEFormat.Object.name = "ConclusionOption1" Then
                        If thisOB.OLEFormat.Object.value Then
                            sBookmark = "BMOptionsB4"
                            targetDocument.Bookmarks(sBookmark).Select
                            Call targetDocument.MainOptionsAll
                        End If
                    ElseIf thisOB.OLEFormat.Object.name = "ConclusionOption2" Then
                        If thisOB.OLEFormat.Object.value Then
                            sBookmark = "BMOptionsB5"
                            'it's checked, check the new one
                            targetDocument.Bookmarks(sBookmark).Select
                            Call targetDocument.MainOptionsAll
                        End If
                    End If
                End If
            End If
            If thisOB.OLEFormat.ClassType = "Forms.ComboBox.1" Then
                If thisOB.OLEFormat.Object.name = "WHOPerformedDD" Then
                    If thisOB.OLEFormat.Object.SelText = Translate("EY", ChosenLanguage) Then
                        sBookmark = "BMOptionsB1"
                        targetDocument.Bookmarks(sBookmark).Select
                        Call targetDocument.MainOptionsAll
                    ElseIf thisOB.OLEFormat.Object.SelText = Translate("InternalAuditors", ChosenLanguage) Then
                        sBookmark = "BMOptionsB2"
                        targetDocument.Bookmarks(sBookmark).Select
                        Call targetDocument.MainOptionsAll
                    ElseIf thisOB.OLEFormat.Object.SelText = Translate("Others", ChosenLanguage) Then
                        sBookmark = "BMOptionsB3"
                        targetDocument.Bookmarks(sBookmark).Select
                        Call targetDocument.MainOptionsAll
                    End If
                End If
            End If
        End If
    Next
    docSCOTWT.UndoClear
    DoEvents

    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingObjects", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingObjects", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub RFObjectsV11(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler
    Dim sBookmark As String
    
    docSCOTWT.UndoClear
    DoEvents
    'do the fake check boxes
    sBookmark = "BMCheckRotateB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call targetDocument.CheckRotateAll
    End If
    sBookmark = "BMCheckRelateB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call targetDocument.CheckRelateAll
    End If
    sBookmark = "BMCheckHighlyB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call targetDocument.CheckHighlyAll
    End If
    sBookmark = "BMCheckServiceB"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        Call targetDocument.CheckServiceAll
    End If
    sBookmark = "BMOptionsB1"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark).Select
        Call targetDocument.MainOptionsAll
    End If
    sBookmark = "BMOptionsB2"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark).Select
        Call targetDocument.MainOptionsAll
    End If
    sBookmark = "BMOptionsB3"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark).Select
        Call targetDocument.MainOptionsAll
    End If
    sBookmark = "BMOptionsB4"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark).Select
        Call targetDocument.MainOptionsAll
    End If
    sBookmark = "BMOptionsB5"
    If InStr(sourceDocument.Bookmarks(sBookmark).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark).Select
        Call targetDocument.MainOptionsAll
    End If
    docSCOTWT.UndoClear
    DoEvents
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingObjects", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingObjects", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MoveBookmark(sourceDocument As Document, targetDocument As Document, sBookmark As String, Optional sLogBookmark As String)
On Error GoTo errHandler
    
    Dim thisLogBookmark As String
    Dim numTries As Integer
    Dim tbl As Table
    Dim tbl2 As Table
    
    numTries = 1
    If sLogBookmark = "" Then
        thisLogBookmark = sBookmark
    Else
        thisLogBookmark = sLogBookmark
    End If
    
    If sourceDocument.Bookmarks.Exists(sBookmark) Then
TryAgain:
        If InStr(sBookmark, "ApplicationName") <> 0 Then
            sourceDocument.Bookmarks(sBookmark).Select
            Set tbl = Selection.Range.Tables(1)
            targetDocument.Bookmarks(sBookmark).Select
            Set tbl2 = Selection.Range.Tables(1)
            tbl.Cell(1, 2).Range.Copy
            tbl2.Cell(1, 2).Range.Paste
            On Error Resume Next
            tbl2.Cell(1, 3).Delete
            On Error GoTo errHandler
        Else
            sourceDocument.Bookmarks(sBookmark).Range.Copy
            targetDocument.Bookmarks(sBookmark).Range.Paste
        End If
    Else
        Call LogUserMessage(Translate("RFingBMs", ChosenLanguage), thisLogBookmark)
        Call OutputErrorMessage(Translate("RFingBMs", ChosenLanguage) & " " & sBookmark)
        Exit Sub
    End If
    
    'check if word object
    If sourceDocument.Bookmarks(sBookmark).Range.InlineShapes.count <> targetDocument.Bookmarks(sBookmark).Range.InlineShapes.count Then
        If numTries < 11 Then
            numTries = numTries + 1
            DoEvents
            Call OutputErrorMessage("Word Object created...retrying " & sBookmark)
            GoTo TryAgain
        End If
    End If
    Exit Sub
    
errHandler:
    If Err.Number = 4605 And numTries < 11 Then
        'clipboard issue, try again
        numTries = numTries + 1
        DoEvents
        Call OutputErrorMessage("4605 Clipboard error occured " & sBookmark)
        Resume TryAgain
    End If
    Call LogUserMessage(Translate("MigratingBookmarks", ChosenLanguage) & " ", thisLogBookmark)
    Call OutputErrorMessage(Translate("MigratingBookmarks", ChosenLanguage) & " " & sBookmark)
    Exit Sub

End Sub

Private Sub MoveBookmarkRF(sourceDocument As Document, targetDocument As Document, pyBookmark As String, cyBookmark As String, Optional sLogBookmark As String)
On Error GoTo errHandler
    
    Dim thisLogBookmark As String
    Dim numTries As Integer
    Dim tbl As Table
    Dim tbl2 As Table
    
    numTries = 1
    If sLogBookmark = "" Then
        thisLogBookmark = cyBookmark
    Else
        thisLogBookmark = sLogBookmark
    End If
    
    If sourceDocument.Bookmarks.Exists(pyBookmark) Then
TryAgain:
        If InStr(cyBookmark, "ApplicationName") <> 0 Then
            sourceDocument.Bookmarks(pyBookmark).Select
            Set tbl = Selection.Range.Tables(1)
            targetDocument.Bookmarks(cyBookmark).Select
            Set tbl2 = Selection.Range.Tables(1)
            tbl.Cell(1, 2).Range.Copy
            tbl2.Cell(1, 2).Range.Paste
            On Error Resume Next
            tbl2.Cell(1, 3).Delete
            On Error GoTo errHandler
        Else
            sourceDocument.Bookmarks(pyBookmark).Range.Copy
            targetDocument.Bookmarks(cyBookmark).Range.Paste
        End If
    Else
        Call LogUserMessage(Translate("RFingBMs", ChosenLanguage), thisLogBookmark)
        Call OutputErrorMessage(Translate("RFingBMs", ChosenLanguage) & " " & cyBookmark)
        Exit Sub
    End If
    
    'check if word object
    If sourceDocument.Bookmarks(pyBookmark).Range.InlineShapes.count <> targetDocument.Bookmarks(cyBookmark).Range.InlineShapes.count Then
        If numTries < 11 Then
            numTries = numTries + 1
            DoEvents
            Call OutputErrorMessage("Word Object created...retrying " & cyBookmark)
            GoTo TryAgain
        End If
    End If
    Exit Sub
    
errHandler:
    If Err.Number = 4605 And numTries < 11 Then
        'clipboard issue, try again
        numTries = numTries + 1
        DoEvents
        Call OutputErrorMessage("4605 Clipboard error occured " & cyBookmark)
        Resume TryAgain
    End If
    Call LogUserMessage(Translate("MigratingBookmarks", ChosenLanguage) & " ", thisLogBookmark)
    Call OutputErrorMessage(Translate("MigratingBookmarks", ChosenLanguage) & " " & cyBookmark)
    Exit Sub

End Sub

Private Sub RFBookmarksV12(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler

    Dim i As Integer
    Dim j As Integer
    Dim sBookmark As String
    Dim thisBM As Bookmark
    Dim tempIndx As Integer
    Dim priorBM As String
    Dim BMRange As Range
    Dim found As Boolean
    Dim curBM As Integer
    Dim Temp As Integer
    Dim temp2 As String
    Dim thisBullet As String
    Dim oldBullet As String
    
    oldBullet = Chr$(149) + " "
    thisBullet = "--> "
    docSCOTWT.UndoClear
    DoEvents
    
    'load up all the source bookmarks so we have positioning on form
    numSourceRFBMs = -1
    ReDim sourceRFBMs(0) As BookMarkTypeRF
    For Each thisBM In sourceDocument.Bookmarks
        'We only care about the EntireWCGW others can be ignored with WCGW
        If InStr(thisBM.name, "WCGW") = 0 Or InStr(thisBM.name, "EntireWCGW") <> 0 Then
            numSourceRFBMs = numSourceRFBMs + 1
            ReDim Preserve sourceRFBMs(numSourceRFBMs) As BookMarkTypeRF
            sourceRFBMs(numSourceRFBMs).id = thisBM.Range.BookmarkID
            sourceRFBMs(numSourceRFBMs).name = thisBM.name
            If InStr(thisBM.name, "EntireWCGW") <> 0 Then
                totalWCGWs = totalWCGWs + 1
            End If
        End If
    Next
    'order the BMs by ID
    For i = 0 To numSourceRFBMs
        For j = i + 1 To numSourceRFBMs
            If sourceRFBMs(i).id > sourceRFBMs(j).id Then
                Temp = sourceRFBMs(j).id
                temp2 = sourceRFBMs(j).name
                sourceRFBMs(j).id = sourceRFBMs(i).id
                sourceRFBMs(j).name = sourceRFBMs(i).name
                sourceRFBMs(i).id = Temp
                sourceRFBMs(i).name = temp2
            End If
        Next j
    Next i
 
    'now fill in anything that was associated
    docSCOTWT.UndoClear
    DoEvents
    For i = 1 To numRisks + 1
        sBookmark = "SignficantRiskAssocCtrls" & Trim(str(i))
        
        If sourceDocument.Bookmarks.Exists(sBookmark) Then
            Call UpdateBookmarkGrid(sBookmark, Replace(CleanBMMigrate(sourceDocument.Bookmarks(sBookmark).Range.Text), oldBullet, thisBullet))
        Else
            'this should be there, put out a message
            Call LogUserMessage(Translate("RFingSec", ChosenLanguage), "SignficantRiskAssocCtrls")
            Call OutputErrorMessage(Translate("RFingSec", ChosenLanguage) & " " & "SignficantRiskAssocCtrls")
        End If
    Next i
 
    'SCOT Chars
    sBookmark = "BriefServiceOrg"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'Related Party
    sBookmark = "RelatedPartyData1"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "RelatedPartyData2"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "RelatedPartyData3"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'Critical Paths
    sBookmark = "BMInsertHere"
    Call MoveBookmark(sourceDocument, targetDocument, "BMInitiation")
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere1"
    Call MoveBookmark(sourceDocument, targetDocument, "BMReporting")
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere2"
    Call MoveBookmark(sourceDocument, targetDocument, "BMRecording")
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "BMInsertHere3"
    Call MoveBookmark(sourceDocument, targetDocument, "BMConclusion")
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    docSCOTWT.UndoClear
    DoEvents
    'loop through any added critial paths -ignore the 4 original ones
    sBookmark = "ExtraCPs"
    For Each thisBM In sourceDocument.Bookmarks
        If InStr(thisBM.name, "EntireCP") <> 0 And InStr(thisBM.name, "EntireCPInit") = 0 Then
            'found one
            'Find the approximate same place in the target document
            'see if the prior BM exists in new doc
            tempIndx = thisBM.Range.BookmarkID
            For j = 0 To numSourceRFBMs
                If sourceRFBMs(j).id = tempIndx Then
                    tempIndx = j - 1
                    priorBM = sourceRFBMs(tempIndx).name
                    Do While Not targetDocument.Bookmarks.Exists(priorBM) And tempIndx > 0
                        tempIndx = tempIndx - 1
                        priorBM = sourceRFBMs(tempIndx).name
                    Loop
                    Exit For
                End If
            Next j
            If tempIndx > 0 Then
                'put it in the new one
                targetDocument.Bookmarks(priorBM).Select
                Selection.Collapse wdCollapseEnd
                Do While Selection.Tables.count > 0 Or isInABookmark
                    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                    Selection.HomeKey wdLine
                Loop
                Selection.Text = vbCrLf & vbCrLf & vbCrLf
                Selection.Collapse wdCollapseStart
                Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                
                Set BMRange = Selection.Range
                sourceDocument.Bookmarks(thisBM).Range.Copy
                BMRange.Paste
            End If
        End If
    Next
    
    docSCOTWT.UndoClear
    DoEvents
    'WTs
    sBookmark = "SCOTWTMainData1"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "SCOTWTMainData2"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "SCOTWTMainData3"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    'loop through any added walkthroughs
    sBookmark = "ExtraWTs"
    For Each thisBM In sourceDocument.Bookmarks
        If InStr(thisBM, "EntireWT") <> 0 And InStr(thisBM, "EntireWTMain") = 0 Then
            'found one
            'Find the approximate same place in the target document
            'see if the prior BM exists in new doc
            tempIndx = thisBM.Range.BookmarkID
            For j = 0 To numSourceRFBMs
                If sourceRFBMs(j).id = tempIndx Then
                    tempIndx = j - 1
                    priorBM = sourceRFBMs(tempIndx).name
                    Do While Not targetDocument.Bookmarks.Exists(priorBM) And tempIndx > 0
                        tempIndx = tempIndx - 1
                        priorBM = sourceRFBMs(tempIndx).name
                    Loop
                    Exit For
                End If
            Next j
            If tempIndx > 0 Then
                'put it in the new one
                targetDocument.Bookmarks(priorBM).Select
                Selection.Collapse wdCollapseEnd
                Do While Selection.Tables.count > 0 Or isInABookmark
                    Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                    Selection.HomeKey wdLine
                Loop
                Selection.Text = vbCrLf & vbCrLf & vbCrLf
                Selection.Collapse wdCollapseStart
                Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                
                Set BMRange = Selection.Range
                sourceDocument.Bookmarks(thisBM).Range.Copy
                BMRange.Paste
            End If
        End If
    Next
    
    docSCOTWT.UndoClear
    DoEvents
    'Other Considerations 1
    sBookmark = "HowWeSupervise"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)

    'Other Considerations 2
    sBookmark = "SegOfDuties"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    sBookmark = "FraudInSCOT"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
 
    'Conclusions
    sBookmark = "AdditionalObserveCell"
    Call MoveBookmark(sourceDocument, targetDocument, sBookmark)
    
    docSCOTWT.UndoClear
    DoEvents
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingSec", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingSec", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub RFWCGWs(sourceDocument As Document, targetDocument As Document)
On Error GoTo errHandler

    Dim sBookmark As String
    Dim i As Integer
    Dim j As Integer
    Dim thisBM As Bookmark
    Dim tempIndx As Integer
    Dim priorBM As String
    Dim BMRange As Range
    Dim found As Boolean
    Dim curRow As Integer
    Dim curRowW As Integer
    Dim curRowR As Integer
    Dim curRowM As Integer
    Dim thisWCGWControl As String
    Dim controlToMigrate As String
    Dim thisRisk As String
    Dim thisAssocs() As String
    Dim thisBullet As String
    Dim oldBullet As String
    Dim firstAddress As String
    Dim c As Object
    Dim n As Object
    Dim thisRiskName As String
    Dim thisWCGWName As String
    Dim thisCntlName As String
    Dim OutputString As String
    Dim firstAddress2 As String
    Dim thisCntlID As String
    Dim thisWCGWID As String
    Dim thisRiskType As String
    Dim thisRiskHold As String
    Dim thisIndx As Integer
    
    docSCOTWT.UndoClear
    DoEvents
    oldBullet = Chr$(149) + " "
    thisBullet = "--> "
    ReDim thisAssocs(0)
    thisAssocs(0) = ""
    
    'first check to see if we have the PY data
    If shSCOTWCGWsRF.Cells(2, 1).value = "" Then
        'ok, prior form had been archived/broken...no embedded data available, we need to build it
        
        docSCOTWT.UndoClear
        DoEvents
        curRow = 2
        curRowW = 2
        curRowR = 2
        For Each thisBM In sourceDocument.Bookmarks
            If InStr(thisBM.name, "EntireWCGW") <> 0 Then 'EntireWCGW325442
                'build WCGWs - we will use the existing WCGWs on the form's bookmark to get the ids
                wcgwToMigrate = Replace(thisBM, "EntireWCGW", "")
                shSCOTWCGWsRF.Cells(curRowW, 1).value = wcgwToMigrate 'WCGW ID
                shSCOTWCGWsRF.Cells(curRowW, 2).value = CleanBM(sourceDocument.Bookmarks("BMWCGWName" & wcgwToMigrate).Range.Text) 'WCGW Name
                curRowW = curRowW + 1
            ElseIf InStr(thisBM.name, "EntireSection") <> 0 Then  'EntireSection230712WCGW325442
                'build Controls - we will use the existing Controls on the form's bookmark to get the ids
                thisWCGWControl = Replace(thisBM.name, "EntireSection", "")
                controlToMigrate = Left(thisWCGWControl, InStr(thisWCGWControl, "WCGW") - 1)
                wcgwToMigrate = Replace(thisWCGWControl, controlToMigrate & "WCGW", "")
                'we only care about the controls that actually have data on them
                If Not sourceDocument.Bookmarks.Exists("EntCntlAlrdyAdd" & thisWCGWControl) Then
                    'save off all pairs on form
                    shSCOTControlRF.Cells(curRow, 1).value = wcgwToMigrate
                    shSCOTControlRF.Cells(curRow, 3).value = controlToMigrate 'Control ID
                    shSCOTControlRF.Cells(curRow, 5).value = CleanBM(sourceDocument.Bookmarks("BMControlFullName" & thisWCGWControl).Range.Text) 'Control Name
                    curRow = curRow + 1
                End If
            ElseIf InStr(thisBM.name, "SignficantRiskName") <> 0 Then  'SignficantRiskName1   SignficantRiskAssocCtrls3
                'build risks for association, no IDs available
                thisRisk = Replace(thisBM, "SignficantRiskName", "")
                thisRiskHold = CleanBM(thisBM.Range.Text) 'Risk Type
                thisRiskType = Left(thisRiskHold, 2)
                thisRiskName = Replace(thisRiskHold, thisRiskType & " - ", "")
                'find all the assoc controls
                If CleanBM(sourceDocument.Bookmarks("SignficantRiskAssocCtrls" & thisRisk).Range.Text) <> "" Then
                    ReDim thisAssocs(0)
                    thisAssocs(0) = ""
                    thisAssocs = Split(Replace(Replace(Replace(sourceDocument.Bookmarks("SignficantRiskAssocCtrls" & thisRisk).Range.Text, thisBullet, ""), oldBullet, ""), Chr$(7), ""), vbCr)
                    If thisAssocs(0) <> "" Then
                        For i = 0 To UBound(thisAssocs)
                            If thisAssocs(i) <> "" Then
                                shRisksRF.Cells(curRowR, 1).value = thisRisk
                                shRisksRF.Cells(curRowR, 2).value = thisRiskName 'Risk Name
                                shRisksRF.Cells(curRowR, 5).value = Replace(Replace(thisAssocs(i), thisBullet, ""), oldBullet, "") 'control Name
                                shRisksRF.Cells(curRowR, 7).value = "X" 'in use/assoc
                                curRowR = curRowR + 1
                            End If
                        Next i
                    End If
                End If
            End If
        Next
    End If
    
    docSCOTWT.UndoClear
    DoEvents
    'Match PY to CY
    'Risks, since the only ones we will have are the ones that ARE associated, we can just set them as associated in the new sheet if we find them.
    curRow = 2
    Do While shRisksRF.Cells(curRow, 1).value <> ""
        'look for this Risk
        thisRiskName = LCase(Replace(shRisksRF.Cells(curRow, 2).value, " ", ""))
        
        curRowR = 2
        Do While shRisks.Cells(curRowR, 1).value <> ""
            If LCase(Replace(shRisks.Cells(curRowR, 2).value, " ", "")) = thisRiskName Then
                If LCase(Replace(shRisks.Cells(curRowR, 5).value, " ", "")) = LCase(Replace(shRisksRF.Cells(curRow, 5).value, " ", "")) Then
                    'found the match
                    shRisks.Cells(curRowR, 7).value = shRisksRF.Cells(curRow, 7).value
                    shRisksRF.Cells(curRow, 8).value = shRisks.Cells(curRowR, 6).value
                    Exit Do
                End If
            End If
            curRowR = curRowR + 1
        Loop
        curRow = curRow + 1
    Loop
    
    'WCGWs
    docSCOTWT.UndoClear
    DoEvents
    curRow = 2
    'we start with the wcgws to see if we can find them
    Do While shSCOTWCGWsRF.Cells(curRow, 1).value <> ""
        thisWCGWName = LCase(Replace(shSCOTWCGWsRF.Cells(curRow, 2).value, " ", ""))
        'find the first wcgw with this name
        curRowW = 2
        Do While shSCOTWCGWs.Cells(curRowW, 1).value <> ""
            If LCase(Replace(shSCOTWCGWs.Cells(curRowW, 2).value, " ", "")) = thisWCGWName Then
                wcgwToMigrate = shSCOTWCGWs.Cells(curRowW, 1).value
                shSCOTWCGWsRF.Cells(curRow, 3).value = wcgwToMigrate
                
                'update all lines in the controls sheet
                curRowR = 2
                Do While shSCOTControlRF.Cells(curRowR, 1).value <> ""
                    If shSCOTControlRF.Cells(curRowR, 1).value = shSCOTWCGWsRF.Cells(curRow, 1).value Then
                        shSCOTControlRF.Cells(curRowR, 2).value = wcgwToMigrate
                    End If
                    curRowR = curRowR + 1
                Loop
                
                'update all lines in the main sheet as put on form
                curRowR = 2
                Do While shSCOTWCGWs.Cells(curRowR, 1).value <> ""
                    If shSCOTWCGWs.Cells(curRowR, 1).value = wcgwToMigrate Then
                        shSCOTWCGWs.Cells(curRowR, 11).value = "X"
                    End If
                    curRowR = curRowR + 1
                Loop
                
                'also update the SourceBM array for the new ID
                For i = 0 To numSourceRFBMs
                    If sourceRFBMs(i).name = "EntireWCGW" & shSCOTWCGWsRF.Cells(curRow, 1).value Then
                        sourceRFBMs(i).convertedName = "EntireWCGW" & wcgwToMigrate
                        Exit For
                    End If
                Next i
                
                Exit Do
            End If
            curRowW = curRowW + 1
        Loop
        curRow = curRow + 1
    Loop
    
    docSCOTWT.UndoClear
    DoEvents
    'Controls
    curRow = 2
    'we start with the controls to see if we can find them
    Do While shSCOTControlRF.Cells(curRow, 1).value <> ""
        thisCntlName = LCase(Replace(shSCOTControlRF.Cells(curRow, 5).value, " ", ""))
        'find the first control with this name
        curRowR = 2
        Do While shSCOTWCGWs.Cells(curRowR, 1).value <> ""
            If LCase(Replace(shSCOTWCGWs.Cells(curRowR, 5).value, " ", "")) = thisCntlName Then
                shSCOTControlRF.Cells(curRow, 4).value = shSCOTWCGWs.Cells(curRowR, 4).value
                
                thisWCGWID = shSCOTControlRF.Cells(curRow, 2).value
                thisCntlID = shSCOTControlRF.Cells(curRow, 4).value
                'if we found both new see if it is valid
                If thisCntlID <> "" And thisWCGWID <> "" Then
                    'is it valid combo
                    Set c = shSCOTWCGWs.Columns(10).find(thisWCGWID & "|" & thisCntlID, , xlValues, xlWhole)
                    If Not c Is Nothing Then
                        'found it, it's a good one
                        shSCOTControlRF.Cells(curRow, 6).value = "X"
                    End If
                End If
                Exit Do
            End If
            curRowR = curRowR + 1
        Loop
        curRow = curRow + 1
    Loop

    'convert the ids
    '1: Converted WCGW and Control and Valid combo - move directly
    '2: Converted WCGW and Control and NOT valid combo - these are not linked anymore, insert this wcgw on form still and move control to another wcgw on form if possible
    '3: No WCGW and converted control, NOT valid combo - control is linked to other wcgws, see if any are on form
    '4: Converted WCGW and NO Control, NOT Valid Combo - we will still insert this wcgw on form, but control will not move

    docSCOTWT.UndoClear
    DoEvents
    'option 1
    curRow = 2
    Do While shSCOTControlRF.Cells(curRow, 1).value <> ""
        If shSCOTControlRF.Cells(curRow, 6).value <> "" Then
            'valid combo
            wcgwToMigrate = shSCOTControlRF.Cells(curRow, 2).value
            controlToMigrate = shSCOTControlRF.Cells(curRow, 4).value
            'find it and mark it as main
            curRowW = 2
            Do While shSCOTWCGWs.Cells(curRowW, 1).value <> ""
                If shSCOTWCGWs.Cells(curRowW, 1).value = wcgwToMigrate And shSCOTWCGWs.Cells(curRowW, 4).value = controlToMigrate Then
                    shSCOTWCGWs.Cells(curRowW, 12).value = "X"
                    'save moveto
                    shSCOTControlRF.Cells(curRow, 7).value = controlToMigrate & "WCGW" & wcgwToMigrate
                    Exit Do
                End If
                curRowW = curRowW + 1
            Loop
        End If
        curRow = curRow + 1
    Loop
       
    docSCOTWT.UndoClear
    DoEvents
    'option 2 or 3
    curRow = 2
    Do While shSCOTControlRF.Cells(curRow, 1).value <> ""
        If shSCOTControlRF.Cells(curRow, 4).value <> "" And shSCOTControlRF.Cells(curRow, 6).value = "" Then
            controlToMigrate = shSCOTControlRF.Cells(curRow, 4).value
            curRowW = 2
            Do While shSCOTWCGWs.Cells(curRowW, 1).value <> ""
                If shSCOTWCGWs.Cells(curRowW, 11).value <> "" And shSCOTWCGWs.Cells(curRowW, 4).value = controlToMigrate Then
                    'found a wcgw on form with this control
                    shSCOTWCGWs.Cells(curRowW, 12).value = "X"
                    'save moveto
                    shSCOTControlRF.Cells(curRow, 7).value = controlToMigrate & "WCGW" & shSCOTWCGWs.Cells(curRowW, 1).value
                    Exit Do
                End If
                curRowW = curRowW + 1
            Loop
        End If
        curRow = curRow + 1
    Loop
            
    docSCOTWT.UndoClear
    DoEvents
    'need to mark any new controls as main if needed
    curRowW = 2
    Do While shSCOTWCGWs.Cells(curRowW, 1).value <> ""
        If shSCOTWCGWs.Cells(curRowW, 11).value <> "" And shSCOTWCGWs.Cells(curRowW, 12).value = "" Then
            'if this control is not main anywhere else, then make it main.
            controlToMigrate = shSCOTWCGWs.Cells(curRowW, 4).value
            curRow = 2
            found = False
            Do While shSCOTWCGWs.Cells(curRow, 1).value <> ""
                If shSCOTWCGWs.Cells(curRow, 4).value = controlToMigrate And shSCOTWCGWs.Cells(curRow, 12).value <> "" Then
                    'ok found where it is main, move on
                    found = True
                    Exit Do
                End If
                curRow = curRow + 1
            Loop
            If Not found Then
                'mark this one as main
                shSCOTWCGWs.Cells(curRowW, 12).value = "X"
            End If
        End If
        curRowW = curRowW + 1
    Loop
    'Call SaveEmbedded
    
    'reload the risks data
    Call LoadDataToArrays
    docSCOTWT.UndoClear
    DoEvents
   
    'Significant risks
    'need to update the associated controls if we can. Risks have already been loaded.
    For Each thisBM In targetDocument.Bookmarks
        If InStr(thisBM, "SignficantRiskName") <> 0 Then  'SignficantRiskName1   SignficantRiskAssocCtrls3
            thisRisk = Replace(thisBM, "SignficantRiskName", "")
            thisRiskName = LCase(Replace(CleanBM(targetDocument.Bookmarks(thisBM).Range.Text), " ", "")) 'Risk Name
            For i = 0 To numRisks
                If LCase(Replace(Risks(i).TypeID + " - " + Risks(i).name, " ", "")) = thisRiskName Then
                    OutputString = ""
                    For j = 0 To Risks(i).numControls
                        If Risks(i).Controls(j).isAssoc Then
                            If OutputString <> "" Then
                                OutputString = OutputString & vbCrLf
                            End If
                            OutputString = OutputString & thisBullet + Risks(i).Controls(j).name
                        End If
                    Next j
                    targetDocument.Bookmarks("SignficantRiskAssocCtrls" & thisRisk).Range.Text = OutputString
                    Exit For
                End If
            Next i
        End If
    Next
            
    'do the WCGWs now
    sBookmark = "WCGWs"
    isMigrating = True
    docSCOTWT.UndoClear
    DoEvents
    
    'build off the wcgw array and move data when needed
    For i = 0 To NumWCGWs
        If WCGWs(i).isPlaced Then
            wcgwToMigrate = WCGWs(i).id
            thisIndx = -1
            'are there controls to move for this wcgw
            Set n = shSCOTWCGWsRF.Columns(3).find(wcgwToMigrate, , xlValues, xlWhole) 'look in new id
            If Not n Is Nothing Then
                tempIndx = sourceDocument.Bookmarks("EntireWCGW" & shSCOTWCGWsRF.Cells(n.Row, 1).value).Range.BookmarkID
                For j = 0 To numSourceRFBMs
                    If sourceRFBMs(j).id = tempIndx Then
                        thisIndx = j - 1
                        priorBM = sourceRFBMs(thisIndx).name
                        If InStr(sourceRFBMs(thisIndx).name, "EntireWCGW") <> 0 And sourceRFBMs(thisIndx).convertedName <> "" Then
                            'need to convert
                            priorBM = sourceRFBMs(thisIndx).convertedName
                        End If
                        Do While Not targetDocument.Bookmarks.Exists(priorBM) And thisIndx > -1
                            thisIndx = thisIndx - 1
                            priorBM = sourceRFBMs(thisIndx).name
                            If InStr(priorBM, "EntireWCGW") <> 0 And sourceRFBMs(thisIndx).convertedName <> "" Then
                                'need to convert
                                priorBM = sourceRFBMs(thisIndx).convertedName
                            End If
                        Loop
                        Exit For
                    End If
                Next j
                If thisIndx > -1 Then
                        
                    targetDocument.Bookmarks(priorBM).Select
                    Selection.Collapse wdCollapseEnd
                    Do While Selection.Tables.count > 0 Or isInABookmark
                        Selection.GoTo what:=wdGoToLine, Which:=wdGoToRelative, count:=1
                        Selection.HomeKey Unit:=wdLine
                    Loop
                    Call AddWCGWSection
                    
                    'loop through the controls to move data
                    For j = 0 To WCGWs(i).numControls
                        'is this an already added section?
                        If WCGWs(i).Controls(j).isMainDoc Then
                            thisCntlID = WCGWs(i).Controls(j).id
                        
                            'check to see if this control has stuff to move
                            Set n = shSCOTControlRF.Columns(7).find(thisCntlID & "WCGW" & wcgwToMigrate, , xlValues, xlWhole) 'look in new id
                            If Not n Is Nothing Then
                                'move over the user data by version for this wcgw
                                Select Case gFormVersionToPull
                                    Case "1.03"
                                        Call MoveOverWCGWDataRFV103(sourceDocument, targetDocument, shSCOTControlRF.Cells(n.Row, 3).value & "WCGW" & shSCOTControlRF.Cells(n.Row, 1).value, thisCntlID & "WCGW" & wcgwToMigrate)
                                    Case "1.02" 'handles all older version before 1.02 as well
                                        Call MoveOverWCGWDataRFV102(sourceDocument, targetDocument, shSCOTControlRF.Cells(n.Row, 3).value & "WCGW" & shSCOTControlRF.Cells(n.Row, 1).value, thisCntlID & "WCGW" & wcgwToMigrate)
                                    Case Else 'newest 1.4 - handles 1.3, 1.2, v1.1 & v1.04 & v1.05 as well
                                        Call MoveOverWCGWDataRFV11(sourceDocument, targetDocument, shSCOTControlRF.Cells(n.Row, 3).value & "WCGW" & shSCOTControlRF.Cells(n.Row, 1).value, thisCntlID & "WCGW" & wcgwToMigrate)
                                End Select
                            End If
                        End If
                    Next j
                End If
             End If
        End If
    Next i
                      
    docSCOTWT.UndoClear
    DoEvents
    Call LoadDataToArrays
    'Call SaveEmbedded
    
    'write out the ones we couldn't move
    curRow = 2
    Do While shRisksRF.Cells(curRow, 1).value <> ""
        If shRisksRF.Cells(curRow, 7).value <> "" And shRisksRF.Cells(curRow, 8).value = "" Then
            'couldn't move risk control
            Call OutputErrorMessage(Translate("zmfRiskControlMatch", ChosenLanguage) & " '" & shRisksRF.Cells(curRow, 2).value & ":" & shRisksRF.Cells(curRow, 5).value & "'")
            Call LogUserMessage("", "", Translate("zmfRiskControlMatch", ChosenLanguage) & " '" & shRisksRF.Cells(curRow, 2).value & ":" & shRisksRF.Cells(curRow, 5).value & "'")
        End If
        curRow = curRow + 1
    Loop
    
    curRow = 2
    Do While shSCOTWCGWsRF.Cells(curRow, 1).value <> ""
        If shSCOTWCGWsRF.Cells(curRow, 3).value = "" Then
            'couldn't find wcgw
            Call OutputErrorMessage(Translate("zmfWCGWMacth", ChosenLanguage) & " '" & shSCOTWCGWsRF.Cells(curRow, 2).value & "'")
            Call LogUserMessage("", "", Translate("zmfWCGWMacth", ChosenLanguage) & " '" & shSCOTWCGWsRF.Cells(curRow, 2).value & "'")
        End If
        curRow = curRow + 1
    Loop
    
    curRow = 2
    Do While shSCOTControlRF.Cells(curRow, 1).value <> ""
        If shSCOTControlRF.Cells(curRow, 7).value = "" Then
            'couldn't move control
            Call OutputErrorMessage(Translate("zmfControlMatch", ChosenLanguage) & " '" & shSCOTControlRF.Cells(curRow, 5).value & "'")
            Call LogUserMessage("", "", Translate("zmfControlMatch", ChosenLanguage) & " '" & shSCOTControlRF.Cells(curRow, 5).value & "'")
        End If
        curRow = curRow + 1
    Loop
    
    isMigrating = False
    docSCOTWT.UndoClear
    DoEvents
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next
    
End Sub

Private Sub MoveOverWCGWDataRFV11(sourceDocument As Document, targetDocument As Document, pyID As String, cyID As String)
On Error GoTo errHandler
    Dim sBookmark As String
    Dim i As Integer
    Dim j As Integer
    Dim thisControl As String
    Dim sourceTbl As Word.Table
    Dim targetTbl As Word.Table
    Dim thisRow As String
    
    docSCOTWT.UndoClear
    DoEvents
    'move the whole thing
    sBookmark = "InSCOTYes"
    If sourceDocument.Bookmarks.Exists(sBookmark & pyID) Then
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call targetDocument.InAnotherSCOTYesAll
        End If
    Else
        'this should exist
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    
    sBookmark = "BMWPRefData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ControlDescripData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    'design attribs - need to add or remove lines if needed
    Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAtt" & pyID).Range.Tables(1)
    Set targetTbl = targetDocument.Bookmarks("BMPropDesignAtt" & cyID).Range.Tables(1)
    Do While sourceTbl.Rows.count <> targetTbl.Rows.count
        If sourceTbl.Rows.count > targetTbl.Rows.count Then
            'need to add some
            sBookmark = "ControlDesAdd"
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call AddRow
        ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
            'need to delete some
            sBookmark = "ControlDesDel"
            targetDocument.Bookmarks(sBookmark & cyID & "ROW2").Select
            Call DeleteRow
        End If
    Loop
    For j = 2 To sourceTbl.Rows.count
        docSCOTWT.UndoClear
        DoEvents
        sBookmark = "ControlDesData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID & "ROW" & Trim(str(j)), sBookmark & cyID & "ROW" & Trim(str(j)), sBookmark)
        
        sBookmark = "BMCheckInqB"
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID & "ROW" & Trim(str(j))).Select
            Call targetDocument.CheckInqAll
        End If
        sBookmark = "BMCheckObsB"
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID & "ROW" & Trim(str(j))).Select
            Call targetDocument.CheckObsAll
        End If
        sBookmark = "BMCheckInsB"
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID & "ROW" & Trim(str(j))).Select
            Call targetDocument.CheckInsAll
        End If
        sBookmark = "BMCheckRepB"
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID & "ROW" & Trim(str(j))).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID & "ROW" & Trim(str(j))).Select
            Call targetDocument.CheckRepAll
        End If
       
    Next j
    
    Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAttNON" & pyID).Range.Tables(1)
    Set targetTbl = targetDocument.Bookmarks("BMPropDesignAttNON" & cyID).Range.Tables(1)
    Do While sourceTbl.Rows.count <> targetTbl.Rows.count
        If sourceTbl.Rows.count > targetTbl.Rows.count Then
            'need to add some
            sBookmark = "ControlPropAdd"
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call AddRow
        ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
            'need to delete some
            sBookmark = "ControlPropDel"
            targetDocument.Bookmarks(sBookmark & cyID & "ROW2").Select
            Call DeleteRow
        End If
    Loop
    docSCOTWT.UndoClear
    DoEvents
    For j = 2 To sourceTbl.Rows.count
        sBookmark = "ControlPropData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID & "ROW" & Trim(str(j)), sBookmark & cyID & "ROW" & Trim(str(j)), sBookmark)
    Next j
    
    sBookmark = "ReviewYes"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.ControlPropertiesYesAll
    End If
    sBookmark = "ReviewNo"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.ControlPropertiesNoAll
    End If
    sBookmark = "CheckTest1B"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CheckTest1All
    End If
    sBookmark = "CheckTest2B"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CheckTest2All
    End If
    sBookmark = "CheckTest3B"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CheckTest3All
    End If
    
    sourceDocument.content.Font.Hidden = False
    targetDocument.content.Font.Hidden = False
    
    sBookmark = "ApplicationName"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DataOwnerName"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    sBookmark = "PersonYes"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CntlPropPerYes
    End If
    sBookmark = "PersonNo"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CntlPropPerNo
    End If
    
    docSCOTWT.UndoClear
    DoEvents
    sBookmark = "DocBasisData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DocObserveData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    sBookmark = "InfoDataUsed"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "SourceData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "BMRelAppsSelected"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)

    sBookmark = "PreAndSenData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ResultsData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)

    sBookmark = "InquireOfData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "TransData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DescribeConfirmData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ReviewData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
        
    If gFormVersionToPull = "1.2" Or gFormVersionToPull = "1.3" Or gFormVersionToPull = "1.4" Then
        sBookmark = "ReviewRefData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    End If

    sBookmark = "ConcludeYes"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CntlPropConcYes
    End If
    sBookmark = "ConcludeNo"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.CntlPropConcNo
    End If
    
    docSCOTWT.UndoClear
    DoEvents
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub RFData()
On Error GoTo errHandler
'Main CY Engagement data should be loaded at this time...we move PY to the RF tabs
'If the PY form has been archived...no data will exist here, we will recreate later if needed

    Dim i As Integer
    Dim curRow As Integer
    Dim curRowC As Integer
    Dim curRowW As Integer
    Dim targetIdx As Integer
    Dim currentWCGW As String
    
    'make sure the target data file is open
    Call CheckForOpenEmbedded
    
    shSourceFormData.Range("ChosenLanguage").Copy Destination:=shFormData.Range("ChosenLanguage")
    Call UpdateBookmark("ChosenLanguage", shSourceFormData.Range("ChosenLanguage").value)
    curRow = 2
    Do While shSourceRisks.Cells(curRow, 1).value <> ""
        shSourceRisks.Rows(curRow).Copy Destination:=shRisksRF.Rows(curRow)
        curRow = curRow + 1
    Loop
    curRow = 2
    curRowW = 2
    curRowC = 2
    currentWCGW = ""
    Do While shSourceSCOTWCGWs.Cells(curRow, 1).value <> ""
        If shSourceSCOTWCGWs.Cells(curRow, 11).value <> "" Then 'is on form
            If currentWCGW <> shSourceSCOTWCGWs.Cells(curRow, 1).value Then
                currentWCGW = shSourceSCOTWCGWs.Cells(curRow, 1).value
                shSCOTWCGWsRF.Cells(curRowW, 1).value = currentWCGW
                shSCOTWCGWsRF.Cells(curRowW, 2).value = shSourceSCOTWCGWs.Cells(curRow, 2).value
                curRowW = curRowW + 1
            End If
            If shSourceSCOTWCGWs.Cells(curRow, 12).value <> "" Then   'and control is main control (this should get us only unique controls)
                shSCOTControlRF.Cells(curRowC, 1).value = shSourceSCOTWCGWs.Cells(curRow, 1).value
                shSCOTControlRF.Cells(curRowC, 3).value = shSourceSCOTWCGWs.Cells(curRow, 4).value
                shSCOTControlRF.Cells(curRowC, 5).value = shSourceSCOTWCGWs.Cells(curRow, 5).value
                curRowC = curRowC + 1
            End If
        End If
        curRow = curRow + 1
    Loop
        
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingData", ChosenLanguage), "ImportedDataFile")
    Call LogErrorMessage(Translate("RFingData", ChosenLanguage) & " ImportedDataFile", thisErr)
    Resume Next
    
End Sub

Private Sub MoveOverWCGWDataRFV103(sourceDocument As Document, targetDocument As Document, pyID As String, cyID As String)
On Error GoTo errHandler
    Dim sBookmark As String
    Dim i As Integer
    Dim j As Integer
    Dim thisControl As String
    Dim sourceTbl As Word.Table
    Dim targetTbl As Word.Table
    Dim thisOB As InlineShape
    Dim thisRow As String
    Dim foundBMCheckInqB As Boolean
    Dim foundBMCheckObsB As Boolean
    Dim foundBMCheckInsB As Boolean
    Dim foundBMCheckRepB As Boolean
    Dim foundTestStrEY As Boolean
    Dim foundTestStrRep As Boolean
    Dim foundTestStrRev As Boolean
    Dim foundPersonY As Boolean
    Dim foundPersonN As Boolean
    Dim foundConcY As Boolean
    Dim foundConcN As Boolean
        
    docSCOTWT.UndoClear
    DoEvents
    'move the whole thing
    sBookmark = "InSCOTYes"
    If sourceDocument.Bookmarks.Exists(sBookmark & pyID) Then
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call targetDocument.InAnotherSCOTYesAll
        End If
    Else
        'this should exist
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    
    sBookmark = "BMWPRefData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ControlDescripData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    docSCOTWT.UndoClear
    DoEvents
    'design attribs - need to add or remove lines if needed
    Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAtt" & pyID).Range.Tables(1)
    Set targetTbl = targetDocument.Bookmarks("BMPropDesignAtt" & cyID).Range.Tables(1)
    Do While sourceTbl.Rows.count <> targetTbl.Rows.count
        If sourceTbl.Rows.count > targetTbl.Rows.count Then
            'need to add some
            sBookmark = "ControlDesAdd"
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call AddRow
        ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
            'need to delete some
            sBookmark = "ControlDesDel"
            targetDocument.Bookmarks(sBookmark & cyID & "ROW2").Select
            Call DeleteRow
        End If
    Loop
    For j = 2 To sourceTbl.Rows.count
        sBookmark = "ControlDesData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID & "ROW" & Trim(str(j)), sBookmark & cyID & "ROW" & Trim(str(j)), sBookmark)
    Next j
    
    Set sourceTbl = sourceDocument.Bookmarks("BMPropDesignAttNON" & pyID).Range.Tables(1)
    Set targetTbl = targetDocument.Bookmarks("BMPropDesignAttNON" & cyID).Range.Tables(1)
    Do While sourceTbl.Rows.count <> targetTbl.Rows.count
        If sourceTbl.Rows.count > targetTbl.Rows.count Then
            'need to add some
            sBookmark = "ControlPropAdd"
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call AddRow
        ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
            'need to delete some
            sBookmark = "ControlPropDel"
            targetDocument.Bookmarks(sBookmark & cyID & "ROW2").Select
            Call DeleteRow
        End If
    Loop
    docSCOTWT.UndoClear
    DoEvents
    For j = 2 To sourceTbl.Rows.count
        sBookmark = "ControlPropData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID & "ROW" & Trim(str(j)), sBookmark & cyID & "ROW" & Trim(str(j)), sBookmark)
    Next j
    
    sBookmark = "ReviewYes"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.ControlPropertiesYesAll
    End If
    sBookmark = "ReviewNo"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.ControlPropertiesNoAll
    End If
    
    sBookmark = "ApplicationName"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DataOwnerName"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    sBookmark = "DocBasisData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DocObserveData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    sBookmark = "InfoDataUsed"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "SourceData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "BMRelAppsSelected"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)

    sBookmark = "PreAndSenData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ResultsData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)

    sBookmark = "InquireOfData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "TransData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DescribeConfirmData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ReviewData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    docSCOTWT.UndoClear
    DoEvents
    foundBMCheckInqB = False
    foundBMCheckObsB = False
    foundBMCheckInsB = False
    foundBMCheckRepB = False
    foundTestStrEY = False
    foundTestStrRep = False
    foundTestStrRev = False
    foundPersonY = False
    foundPersonN = False
    foundConcY = False
    foundConcN = False
    For Each thisOB In sourceDocument.InlineShapes
        docSCOTWT.UndoClear
        DoEvents
        If thisOB.Type = wdInlineShapeOLEControlObject Then
            If thisOB.OLEFormat.ClassType = "Forms.CheckBox.1" Then
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & pyID, "")
                        sBookmark = "BMCheckInqB"
                        'since these are still controls in the old doc...see if they are broken with a 1 at the end
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckInqAll
                    End If
                    foundBMCheckInqB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & pyID, "")
                        sBookmark = "BMCheckObsB"
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckObsAll
                    End If
                    foundBMCheckObsB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & pyID, "")
                        sBookmark = "BMCheckInsB"
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckInsAll
                    End If
                    foundBMCheckInsB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureReper" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureReper" & pyID, "")
                        sBookmark = "BMCheckRepB"
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckRepAll
                    End If
                    foundBMCheckRepB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CTestStratEY" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratEY" & pyID, "")
                        sBookmark = "CheckTest1B"
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CheckTest1All
                    End If
                    foundTestStrEY = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CTestStratReperf" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReperf" & pyID, "")
                        sBookmark = "CheckTest2B"
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CheckTest2All
                    End If
                    foundTestStrRep = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CTestStratReview" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReview" & pyID, "")
                        sBookmark = "CheckTest3B"
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CheckTest3All
                    End If
                    foundTestStrRev = True
                End If
            End If
            If thisOB.OLEFormat.ClassType = "Forms.OptionButton.1" Then
                If thisOB.OLEFormat.Object.name = "ControlOwnerPersonYes" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "PersonYes"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropPerYes
                    End If
                    foundPersonY = True
                ElseIf thisOB.OLEFormat.Object.name = "ControlOwnerPersonNo" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "PersonNo"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropPerNo
                    End If
                    foundPersonN = True
                ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionYes" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "ConcludeYes"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropConcYes
                    End If
                    foundConcY = True
                ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionNo" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "ConcludeNo"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropConcNo
                    End If
                    foundConcN = True
                End If
            End If
        End If
    Next
    docSCOTWT.UndoClear
    DoEvents
    If Not foundBMCheckInqB Then
        sBookmark = "BMCheckInqB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundBMCheckObsB Then
        sBookmark = "BMCheckObsB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundBMCheckInsB Then
        sBookmark = "BMCheckInsB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundBMCheckRepB Then
        sBookmark = "BMCheckRepB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundTestStrEY Then
        sBookmark = "CheckTest1B"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundTestStrRep Then
        sBookmark = "CheckTest2B"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundTestStrRev Then
        sBookmark = "CheckTest3B"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundPersonY Then
        sBookmark = "PersonYes"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundPersonN Then
        sBookmark = "PersonNo"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundConcY Then
        sBookmark = "ConcludeYes"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundConcN Then
        sBookmark = "ConcludeNo"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    docSCOTWT.UndoClear
    DoEvents
    
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub

Private Sub MoveOverWCGWDataRFV102(sourceDocument As Document, targetDocument As Document, pyID As String, cyID As String)
'some bookmarks were renamed to make shorter in newer version, so need to change those and also may need to find bookmark issues to move them
On Error GoTo errHandler
    Dim sBookmark As String
    Dim sBookmark2 As String
    Dim sBookmark3 As String 'this will hold the first 40 chars of the bookmark to handle the bookmark issue
    Dim i As Integer
    Dim j As Integer
    Dim thisControl As String
    Dim sourceTbl As Word.Table
    Dim targetTbl As Word.Table
    Dim thisOB As InlineShape
    Dim thisRow As String
    Dim foundBMCheckInqB As Boolean
    Dim foundBMCheckObsB As Boolean
    Dim foundBMCheckInsB As Boolean
    Dim foundBMCheckRepB As Boolean
    Dim foundTestStrEY As Boolean
    Dim foundTestStrRep As Boolean
    Dim foundTestStrRev As Boolean
    Dim foundPersonY As Boolean
    Dim foundPersonN As Boolean
    Dim foundConcY As Boolean
    Dim foundConcN As Boolean
            
    docSCOTWT.UndoClear
    DoEvents
    sBookmark = "InSCOTYes"
    If sourceDocument.Bookmarks.Exists(sBookmark & pyID) Then
        If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
            'it's checked, check the new one
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call targetDocument.InAnotherSCOTYesAll
        End If
    Else
        'this should exist
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    
    sBookmark = "BMWPRefData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ControlDescripData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    'design attribs - need to add or remove lines if needed
    docSCOTWT.UndoClear
    DoEvents
    Set sourceTbl = sourceDocument.Bookmarks(Left("BMPropDesignAttributes" & pyID, 40)).Range.Tables(1)
    Set targetTbl = targetDocument.Bookmarks("BMPropDesignAtt" & cyID).Range.Tables(1)
    Do While sourceTbl.Rows.count <> targetTbl.Rows.count
        If sourceTbl.Rows.count > targetTbl.Rows.count Then
            'need to add some
            sBookmark = "ControlDesAdd"
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call AddRow
        ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
            'need to delete some
            sBookmark = "ControlDesDel"
            targetDocument.Bookmarks(sBookmark & cyID & "ROW2").Select
            Call DeleteRow
        End If
    Loop
    For j = 2 To sourceTbl.Rows.count
        sBookmark = "ControlDesData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID & "ROW" & Trim(str(j)), sBookmark & cyID & "ROW" & Trim(str(j)), sBookmark)
    Next j
    docSCOTWT.UndoClear
    DoEvents
    
    Set sourceTbl = sourceDocument.Bookmarks(Left("BMPropDesignAttributesNON" & pyID, 40)).Range.Tables(1)
    Set targetTbl = targetDocument.Bookmarks("BMPropDesignAttNON" & cyID).Range.Tables(1)
    Do While sourceTbl.Rows.count <> targetTbl.Rows.count
        If sourceTbl.Rows.count > targetTbl.Rows.count Then
            'need to add some
            sBookmark = "ControlPropAdd"
            targetDocument.Bookmarks(sBookmark & cyID).Select
            Call AddRow
        ElseIf sourceTbl.Rows.count < targetTbl.Rows.count Then
            'need to delete some
            sBookmark = "ControlPropDel"
            targetDocument.Bookmarks(sBookmark & cyID & "ROW2").Select
            Call DeleteRow
        End If
    Loop
    For j = 2 To sourceTbl.Rows.count
        sBookmark = "ControlPropData"
        Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID & "ROW" & Trim(str(j)), sBookmark & cyID & "ROW" & Trim(str(j)), sBookmark)
    Next j
    docSCOTWT.UndoClear
    DoEvents
    
    sBookmark = "ReviewYes"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.ControlPropertiesYesAll
    End If
    sBookmark = "ReviewNo"
    If InStr(sourceDocument.Bookmarks(sBookmark & pyID).Range.Fields(1).Code.Text, ".") <> 0 Then
        'it's checked, check the new one
        targetDocument.Bookmarks(sBookmark & cyID).Select
        Call targetDocument.ControlPropertiesNoAll
    End If
    
    sBookmark = "ApplicationName"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DataOwnerName"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    sBookmark = "DocBasisData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DocObserveData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    sBookmark = "InfoDataUsed"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "SourceData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "BMRelAppsSelected"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)

    sBookmark = "PreAndSenData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ResultsData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)

    sBookmark = "InquireOfData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "TransData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "DescribeConfirmData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    sBookmark = "ReviewData"
    Call MoveBookmarkRF(sourceDocument, targetDocument, sBookmark & pyID, sBookmark & cyID, sBookmark)
    
    docSCOTWT.UndoClear
    DoEvents
    foundBMCheckInqB = False
    foundBMCheckObsB = False
    foundBMCheckInsB = False
    foundBMCheckRepB = False
    foundTestStrEY = False
    foundTestStrRep = False
    foundTestStrRev = False
    foundPersonY = False
    foundPersonN = False
    foundConcY = False
    foundConcN = False
    For Each thisOB In sourceDocument.InlineShapes
        docSCOTWT.UndoClear
        DoEvents
        If thisOB.Type = wdInlineShapeOLEControlObject Then
            If thisOB.OLEFormat.ClassType = "Forms.CheckBox.1" Then
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInquiry" & pyID, "")
                        sBookmark = "BMCheckInqB"
                        'since these are still controls in the old doc...see if they are broken with a 1 at the end
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckInqAll
                    End If
                    foundBMCheckInqB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureObserve" & pyID, "")
                        sBookmark = "BMCheckObsB"
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckObsAll
                    End If
                    foundBMCheckObsB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureInspect" & pyID, "")
                        sBookmark = "BMCheckInsB"
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckInsAll
                    End If
                    foundBMCheckInsB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CDesNatureReper" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CDesNatureReper" & pyID, "")
                        sBookmark = "BMCheckRepB"
                        targetDocument.Bookmarks(sBookmark & cyID & thisRow).Select
                        Call targetDocument.CheckRepAll
                    End If
                    foundBMCheckRepB = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CTestStratEY" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratEY" & pyID, "")
                        sBookmark = "CheckTest1B"
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CheckTest1All
                    End If
                    foundTestStrEY = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CTestStratReperf" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReperf" & pyID, "")
                        sBookmark = "CheckTest2B"
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CheckTest2All
                    End If
                    foundTestStrRep = True
                End If
                If InStr(thisOB.OLEFormat.Object.name, "CTestStratReview" & pyID) <> 0 Then
                    If thisOB.OLEFormat.Object.value Then
                        'it's checked, check the new one
                        thisRow = Replace(thisOB.OLEFormat.Object.name, "CTestStratReview" & pyID, "")
                        sBookmark = "CheckTest3B"
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CheckTest3All
                    End If
                    foundTestStrRev = True
                End If
            End If
            If thisOB.OLEFormat.ClassType = "Forms.OptionButton.1" Then
                If thisOB.OLEFormat.Object.name = "ControlOwnerPersonYes" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "PersonYes"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropPerYes
                    End If
                    foundPersonY = True
                ElseIf thisOB.OLEFormat.Object.name = "ControlOwnerPersonNo" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "PersonNo"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropPerNo
                    End If
                    foundPersonN = True
                ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionYes" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "ConcludeYes"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropConcYes
                    End If
                    foundConcY = True
                ElseIf thisOB.OLEFormat.Object.name = "ControlConclusionNo" & pyID Then
                    If thisOB.OLEFormat.Object.value Then
                        sBookmark = "ConcludeNo"
                        'it's checked, check the new one
                        targetDocument.Bookmarks(sBookmark & cyID).Select
                        Call targetDocument.CntlPropConcNo
                    End If
                    foundConcN = True
                End If
            End If
        End If
    Next
    docSCOTWT.UndoClear
    DoEvents
    If Not foundBMCheckInqB Then
        sBookmark = "BMCheckInqB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundBMCheckObsB Then
        sBookmark = "BMCheckObsB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundBMCheckInsB Then
        sBookmark = "BMCheckInsB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundBMCheckRepB Then
        sBookmark = "BMCheckRepB"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundTestStrEY Then
        sBookmark = "CheckTest1B"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundTestStrRep Then
        sBookmark = "CheckTest2B"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundTestStrRev Then
        sBookmark = "CheckTest3B"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundPersonY Then
        sBookmark = "PersonYes"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundPersonN Then
        sBookmark = "PersonNo"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundConcY Then
        sBookmark = "ConcludeYes"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    If Not foundConcN Then
        sBookmark = "ConcludeNo"
        Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
        Call OutputErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark)
    End If
    
    docSCOTWT.UndoClear
    DoEvents
    Exit Sub
    
errHandler:
    Set thisErr = Err
    Call LogUserMessage(Translate("RFingWCGW", ChosenLanguage), sBookmark)
    Call LogErrorMessage(Translate("RFingWCGW", ChosenLanguage) & " " & sBookmark, thisErr)
    Resume Next

End Sub








Attribute VB_Name = "modRibbonMenu"
Option Explicit
Option Private Module
Public myRibbon As IRibbonUI

Public Sub RibbonLoaded(ribbon As IRibbonUI)

    Set myRibbon = ribbon
    myRibbon.ActivateTab ("customTab")
    DoEvents
    
End Sub
'
'Sub getLabel(control As IRibbonControl, ByRef myLabel)
'
'    Select Case control.Id
'        Case "Add"
'            myLabel = Translate("RibbonAdd", ChosenLanguage)
'        Case "customTab"
'            myLabel = Translate("RibbonTab", ChosenLanguage)
'        Case "AddWCGW"
'            myLabel = Translate("RibbonAddWCGW", ChosenLanguage)
'        Case "AddWT"
'            myLabel = Translate("RibbonAddWT", ChosenLanguage)
'        Case "AddCPath"
'            myLabel = Translate("RibbonAddCPath", ChosenLanguage)
'        Case "Controls"
'            myLabel = Translate("RibbonControls", ChosenLanguage)
'        Case "ControlSummary"
'            myLabel = Translate("RibbonControlSummary", ChosenLanguage)
'        Case "Canvas"
'            myLabel = Translate("RibbonCanvas", ChosenLanguage)
'        Case "ImportCanvas"
'            myLabel = Translate("RibbonImportCanvas", ChosenLanguage)
'        Case "RefreshCanvas"
'            myLabel = Translate("RibbonRefreshCanvas", ChosenLanguage)
'        Case "Admin"
'            myLabel = Translate("RibbonAdmin", ChosenLanguage)
'        Case "Diagnostics"
'            myLabel = Translate("RibbonDiagnostics", ChosenLanguage)
'        Case "Reset"
'            myLabel = Translate("RibbonReset", ChosenLanguage)
'        Case "Print"
'            myLabel = Translate("RibbonPrint", ChosenLanguage)
'        Case "Translate"
'            myLabel = Translate("RibbonTranslate", ChosenLanguage)
'        Case "ShowAll"
'            myLabel = Translate("RibbonShowAll", ChosenLanguage)
'        Case "HideAll"
'            myLabel = Translate("RibbonHideAll", ChosenLanguage)
'        Case "RollForward"
'            myLabel = Translate("RibbonRollForward", ChosenLanguage)
'        Case "PurgeCanvas"
'            myLabel = Translate("RibbonPurgeCanvas", ChosenLanguage)
'    End Select
'
'End Sub
'
'Public Sub RefreshRibbon()
'On Error Resume Next
'
'    myRibbon.Invalidate
'
'End Sub

Public Sub Importdata(ByVal control As IRibbonControl)
    Dim holdCheck As String
    
    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        Call CheckForOpenEmbedded
        holdCheck = shFormData.Range("SCOTID").value
        If holdCheck <> "" Then
            If MsgBox(Translate("CanvasAlreadyLoaded", ChosenLanguage), vbYesNo) = vbYes Then
                Call ImportCanvas(True)
            End If
            Exit Sub
        End If
        
        Call TurnOffTrackChanges
        Call ImportCanvas(False)
        Call ResetTrackChangesValues
    End If
    
End Sub

Public Sub RefreshData(ByVal control As IRibbonControl)
    Dim holdCheck As String
    
    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        Call CheckForOpenEmbedded
        holdCheck = shFormData.Range("SCOTID").value
        If holdCheck = "" Then
            If MsgBox(Translate("CanvasNotLoaded", ChosenLanguage), vbYesNo) = vbYes Then
                Call ImportCanvas(False)
            End If
            Exit Sub
        End If
    
        Call TurnOffTrackChanges
        Call ImportCanvas(True)
        Call ResetTrackChangesValues
    End If
    
End Sub

Public Sub PurgeData(ByVal control As IRibbonControl)
    
    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        'archive it
        Call TurnOffTrackChanges
        Call ArchiveIt
        Call ResetTrackChangesValues
    End If
    
End Sub

Public Sub AddWCGW(ByVal control As IRibbonControl)

    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        Call AddWCGWSection
    End If
    
End Sub

Public Sub AddWT(ByVal control As IRibbonControl)

    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        Call AddWTSection
    End If
    
End Sub

Public Sub ControlSum(ByVal control As IRibbonControl)

    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        If MsgBox(Translate("ConSumMessage", ChosenLanguage), vbYesNo) = vbYes Then
            Call TurnOffTrackChanges
            Call CreateControlSummary
            Call ResetTrackChangesValues
        End If
    End If
    
End Sub

Public Sub Reset(ByVal control As IRibbonControl)
    
    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        If MsgBox(Translate("AreYouSureRemove", ChosenLanguage), vbYesNo) = vbYes Then
            Call ResetAllData
        End If
    End If
    
End Sub

Public Sub PrintThis(ByVal control As IRibbonControl)
'This function will hide the How to Use This form section and the Guidance sections, show all others and then print the form.

    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    Call ShowAllMain(True)
    
    Dialogs(wdDialogFilePrint).Show
    'docSCOTWT.PrintOut
    
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True

End Sub

Public Sub ShowDiagnostics(ByVal control As IRibbonControl)

    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        Call ShowDiagnosticsForm
    End If
    
End Sub

Public Sub TranslateForm(ByVal control As IRibbonControl)
    Dim holdLanguage As String
    
    Call TurnOffTrackChanges
    holdLanguage = ChosenLanguage
    Load frmTranslate
    'TODO-translate here
    frmTranslate.btnCancel.Caption = Translate("CancelButton", ChosenLanguage)
    frmTranslate.btnFinish.Caption = Translate("SelectButton", ChosenLanguage)
    frmTranslate.Show
    If holdLanguage <> ChosenLanguage Then
        Call TranslateObjects
    End If
    Call ResetTrackChangesValues

End Sub

Public Sub ShowAllSections(ByVal control As IRibbonControl)
    
    Call ShowAllMain(False)
    
End Sub

Public Sub ShowAllMain(forPrint As Boolean)
On Error GoTo errHandler

    Dim thisBM As Bookmark
    Dim thisWCGWNum As String
    Dim tempStr As String
    Dim thisWCGWID As Integer
    Dim thisControlID As Integer
    Dim thisYes As Boolean
    Dim thisYes1 As Boolean
    Dim thisYes2 As Boolean
    
    Call TurnOffTrackChanges
    Call LoadProfile
    If NumWCGWs < 1 Then
        Call LoadDataToArrays
    End If
    
    For Each thisBM In docSCOTWT.Bookmarks
        With docSCOTWT
            Select Case thisBM.name
                Case "ShowRisks"
                    .Bookmarks("SigRisks").Range.Font.Hidden = False
                    .Bookmarks("ShowRisks").Range.Font.Hidden = True
                    .Bookmarks("HideRisks").Range.Font.Hidden = False
                Case "ShowChars"
                    .Bookmarks("ScotChars").Range.Font.Hidden = False
                    .Bookmarks("ShowChars").Range.Font.Hidden = True
                    .Bookmarks("HideChars").Range.Font.Hidden = False
                    'show/hide questions pertinent to this profile
                    If Profile.IntegratedAudit = False And (Profile.ChosenSCOTType = 1 Or Profile.ChosenSCOTType2 = 1) And Profile.PrelimAudit = 1 Then
                        'show rotation checkbox
                        docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = False
                    Else
                        'hide rotation checkbox
                        docSCOTWT.Bookmarks("RotateControlsRow").Range.Font.Hidden = True
                    End If
                    If Profile.PCAOB Or Profile.PCAOBIA Or Profile.PrelimAudit = 1 Then
                        docSCOTWT.Bookmarks("RelatedPartyRow").Range.Font.Hidden = True
                        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
                    Else
                        docSCOTWT.Bookmarks("RelatedPartyRow").Range.Font.Hidden = False
                        If InStr(docSCOTWT.Bookmarks("BMCheckRelateB").Range.Fields(1).Code.Text, ".") <> 0 Then
                            docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = False
                        Else
                            docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
                        End If
                    End If
                Case "ShowDocumentation"
                    .Bookmarks("DocConsiderations").Range.Font.Hidden = False
                    .Bookmarks("ShowDocumentation").Range.Font.Hidden = True
                    .Bookmarks("HideDocumentation").Range.Font.Hidden = False
                    If InStr(docSCOTWT.Bookmarks("BMOptionsB1").Range.Fields(1).Code.Text, ".") <> 0 Or (InStr(docSCOTWT.Bookmarks("BMOptionsB2").Range.Fields(1).Code.Text, ".") = 0 And InStr(docSCOTWT.Bookmarks("BMOptionsB3").Range.Fields(1).Code.Text, ".") = 0) Then
                        docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = True
                    End If
                Case "ShowConclusions"
                    .Bookmarks("ConclusionSection").Range.Font.Hidden = False
                    .Bookmarks("ShowConclusions").Range.Font.Hidden = True
                    .Bookmarks("HideConclusions").Range.Font.Hidden = False
                Case Else 'WCGWs & Controls
                    'show it
                    'do WCGW
                    If InStr(thisBM.name, "WCGWTableShow") <> 0 Then
                        tempStr = Replace(thisBM.name, "WCGWTableShow", "")
                        .Bookmarks("WCGWAsserts" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("WCGWTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("WCGWTableShow" + tempStr).Range.Font.Hidden = True
                    ElseIf InStr(thisBM.name, "ControlsTableShow") <> 0 Then
                        tempStr = Replace(thisBM.name, "ControlsTableShow", "")
                        .Bookmarks("FullControl" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("ControlsTableHide" + tempStr).Range.Font.Hidden = False
                        .Bookmarks("ControlsTableShow" + tempStr).Range.Font.Hidden = True
                        
                        thisWCGWID = GetWCGWIndex(Right(tempStr, Len(tempStr) - (InStr(tempStr, "WCGW") + 3)))
                        thisControlID = GetControlIndex(thisWCGWID, Left(tempStr, InStr(tempStr, "WCGW") - 1))
                            
                        If WCGWs(thisWCGWID).Controls(thisControlID).isMainDoc Then
                        
                            If InStr(docSCOTWT.Bookmarks("InSCOTYes" + tempStr).Range.Fields(1).Code.Text, ".") = 0 Then
                                .Bookmarks("BMWPReferenceRow" + tempStr).Range.Font.Hidden = True
                            Else
                                .Bookmarks("EntireCntlThisSCOT" + tempStr).Range.Font.Hidden = True
                            End If
                            
                            If .Bookmarks("BMWPReferenceRow" + tempStr).Range.Font.Hidden = True Then
                               'Other wcgws section
                               If .Bookmarks("BMrelatedOnes" + tempStr).Range.Text = "" Then
                                   'hide whole section
                                   .Bookmarks("EntCntlOthersSec" + tempStr).Range.Font.Hidden = True
                               Else
                                   .Bookmarks("OthersSecTableShow" + tempStr).Range.Font.Hidden = True
                               End If
                               
                               .Bookmarks("ControlPropTableShow" + tempStr).Range.Font.Hidden = True
                               'Do we need the Nature of Testing column?
                               If Profile.IntegratedAudit = True And CleanBM(.Bookmarks("ControlPropType" + tempStr).Range.Text) <> Translate("Application", ChosenLanguage) Then
                                   'if is Integrated Audit and NOT type of Application then show Nature of testing column
                                   .Bookmarks("CntlPropNatTestGrid" + tempStr).Range.Font.Hidden = False
                                   .Bookmarks("CntlPropNONNatGrid" + tempStr).Range.Font.Hidden = True
                               Else
                                   .Bookmarks("CntlPropNatTestGrid" + tempStr).Range.Font.Hidden = True
                                   .Bookmarks("CntlPropNONNatGrid" + tempStr).Range.Font.Hidden = False
                               End If
                               
                               .Bookmarks("CntlOwnTableShow" + tempStr).Range.Font.Hidden = True
                               'In Owner Section - Show Application section or other
                               If CleanBM(.Bookmarks("ControlPropType" + tempStr).Range.Text) = Translate("Application", ChosenLanguage) Then
                                   'show application
                                   .Bookmarks("FullCntlOwnNonAppSec" + tempStr).Range.Font.Hidden = True
                                   'hide Data Used section
                                   .Bookmarks("EntireCntlDataUsed" + tempStr).Range.Font.Hidden = True
                               Else
                                   'show other
                                   .Bookmarks("FullCntlOwnAppSec" + tempStr).Range.Font.Hidden = True
                                   'show Data Used
                                   .Bookmarks("CntlDataUsdTableShow" + tempStr).Range.Font.Hidden = True
                               End If
    
                               'If WCGWs(indexWCGW).Controls(thisControlIndex).isApplication Then
                               'if not review and monitoring control then hide this whole section
                               .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = True
                                If InStr(docSCOTWT.Bookmarks("ReviewYes" + tempStr).Range.Fields(1).Code.Text, ".") = 0 Then
                                    .Bookmarks("EntireControlReview" + tempStr).Range.Font.Hidden = True
                                    .Bookmarks("FullConfirmReviewSec" + tempStr).Range.Font.Hidden = True
                                Else
                                    If Profile.PCAOB Or Profile.PCAOBIA Then
                                        .Bookmarks("FullConfirmReviewGam" + tempStr).Range.Font.Hidden = True
                                    Else
                                        .Bookmarks("FullConfirmReviewPCA" + tempStr).Range.Font.Hidden = True
                                        .Bookmarks("FullConfirmReviewRef" + tempStr).Range.Font.Hidden = True
                                    End If
                                    .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = True
                                End If
                               
                               .Bookmarks("CntlConcTableShow" + tempStr).Range.Font.Hidden = True
                               
                               .Bookmarks("CntlConfirmTableShow" + tempStr).Range.Font.Hidden = True
                            End If
                        End If
                    End If
            End Select
        End With
    Next
    If InStr(docSCOTWT.Bookmarks("BMCheckServiceB").Range.Fields(1).Code.Text, ".") = 0 Then
        docSCOTWT.Bookmarks("BMServiceOrgSection").Range.Font.Hidden = True
    End If
    If Not (InStr(docSCOTWT.Bookmarks("BMCheckRelateB").Range.Fields(1).Code.Text, ".") <> 0 And Profile.PrelimAudit = 2 And Not Profile.PCAOB) Then
        docSCOTWT.Bookmarks("BMRelatedPartySection").Range.Font.Hidden = True
    End If
    If InStr(docSCOTWT.Bookmarks("BMOptionsB1").Range.Fields(1).Code.Text, ".") <> 0 Or (InStr(docSCOTWT.Bookmarks("BMOptionsB2").Range.Fields(1).Code.Text, ".") = 0 And InStr(docSCOTWT.Bookmarks("BMOptionsB3").Range.Fields(1).Code.Text, ".") = 0) Then
        docSCOTWT.Bookmarks("SuperviseOthers").Range.Font.Hidden = True
    End If
    If Not (InStr(docSCOTWT.Bookmarks("BMOptionsB2").Range.Fields(1).Code.Text, ".") <> 0 And Not docSCOTWT.Bookmarks("ConclusionSection").Range.Font.Hidden = True) Then
        docSCOTWT.Bookmarks("AdditionalObserve").Range.Font.Hidden = True
    End If
    
    If LCase(Profile.ApplGAAS) = "united states" Then
        If thisYes = False And thisYes1 = False And thisYes2 = False Then
            docSCOTWT.Bookmarks("AlertBox").Range.Font.Hidden = True
        End If
        If thisYes = False Then
            docSCOTWT.Bookmarks("BMIfYesRow").Range.Font.Hidden = True
        End If
        If thisYes1 = False Then
            docSCOTWT.Bookmarks("BMIfYes1Row").Range.Font.Hidden = True
        End If
        If thisYes2 = False Then
            docSCOTWT.Bookmarks("BMIfYes2Row").Range.Font.Hidden = True
        End If
    End If
    
    If forPrint Then
        'when printing dont show this section
        docSCOTWT.Bookmarks("ShowMeHow").Range.Font.Hidden = False
        docSCOTWT.Bookmarks("HideMeHow").Range.Font.Hidden = True
    End If
    Call ResetTrackChangesValues
    Exit Sub
    
errHandler:
    Resume Next

End Sub

Public Sub HideAllSections(ByVal control As IRibbonControl)

    Call HideAllMain
    
End Sub

Public Sub HideAllMain()

    Dim thisBM As Bookmark
    Dim tempStr As String
    
    Call TurnOffTrackChanges
    Application.ScreenUpdating = False
    For Each thisBM In docSCOTWT.Bookmarks
        With docSCOTWT
            Select Case thisBM.name
                Case "HideRisks"
                    .Bookmarks("SigRisks").Range.Font.Hidden = True
                    .Bookmarks("ShowRisks").Range.Font.Hidden = False
                    .Bookmarks("HideRisks").Range.Font.Hidden = True
                Case "HideChars"
                    .Bookmarks("ScotChars").Range.Font.Hidden = True
                    .Bookmarks("ShowChars").Range.Font.Hidden = False
                    .Bookmarks("HideChars").Range.Font.Hidden = True
                Case "HideDocumentation"
                    .Bookmarks("DocConsiderations").Range.Font.Hidden = True
                    .Bookmarks("ShowDocumentation").Range.Font.Hidden = False
                    .Bookmarks("HideDocumentation").Range.Font.Hidden = True
                Case "HideConclusions"
                    .Bookmarks("ConclusionSection").Range.Font.Hidden = True
                    .Bookmarks("ShowConclusions").Range.Font.Hidden = False
                    .Bookmarks("HideConclusions").Range.Font.Hidden = True
                Case Else 'WCGWs
                    If InStr(thisBM.name, "ControlsTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "ControlsTableHide", "")
                        .Bookmarks("FullControl" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlsTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlsTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "ControlPropTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "ControlPropTableHide", "")
                        .Bookmarks("FullControlProp" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlPropTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("ControlPropTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlOwnTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "CntlOwnTableHide", "")
                        .Bookmarks("FullControlOwner" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlOwnTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlOwnTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlDataUsdTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "CntlDataUsdTableHide", "")
                        .Bookmarks("FullControlDataUsed" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlDataUsdTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlDataUsdTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlConcTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "CntlConcTableHide", "")
                        .Bookmarks("FullCntlConc" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConcTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConcTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlConfirmTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "CntlConfirmTableHide", "")
                        .Bookmarks("FullControlConfirm" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConfirmTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlConfirmTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "CntlRevTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "CntlRevTableHide", "")
                        .Bookmarks("FullControlReview" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlRevTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("CntlRevTableShow" + tempStr).Range.Font.Hidden = False
                    ElseIf InStr(thisBM.name, "WCGWTableHide") <> 0 Then
                        tempStr = Replace(thisBM.name, "WCGWTableHide", "")
                        .Bookmarks("WCGWAsserts" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("WCGWTableHide" + tempStr).Range.Font.Hidden = True
                        .Bookmarks("WCGWTableShow" + tempStr).Range.Font.Hidden = False
                    End If
            End Select
        End With
    Next
    Application.ScreenUpdating = True
    Call ResetTrackChangesValues
    docSCOTWT.Bookmarks("DocBegin").Select
    
End Sub

Public Sub AddCPath(ByVal control As IRibbonControl)
    
    If areWeArchived Then
        MsgBox Translate("AlreadyArchived", ChosenLanguage), vbOKOnly
        Exit Sub
    Else
        Call TurnOffTrackChanges
        Call AddCPathSection
        Call ResetTrackChangesValues
    End If
    
End Sub

Attribute VB_Name = "modTrackChanges"
Option Explicit
Option Private Module
Public trackRevisionsValue As Boolean
Public trackMovesValue As Boolean
Public trackFormattingValue As Boolean
Public inTrackChangesLoop As Integer

Public Sub SaveTrackChangesValues()

    trackRevisionsValue = docSCOTWT.TrackRevisions
    trackMovesValue = docSCOTWT.TrackMoves
    trackFormattingValue = docSCOTWT.TrackFormatting

End Sub

Public Sub ResetTrackChangesValues()

    'only reset if we turned them off, helps with recursive calls
    If inTrackChangesLoop = 0 Then
        Exit Sub
    ElseIf inTrackChangesLoop = 1 Then
        inTrackChangesLoop = 0
        docSCOTWT.TrackRevisions = trackRevisionsValue
        docSCOTWT.TrackMoves = trackMovesValue
        docSCOTWT.TrackFormatting = trackFormattingValue
    Else
        inTrackChangesLoop = inTrackChangesLoop - 1
    End If
    
End Sub

Public Sub TurnOffTrackChanges()

    'only save the values if we haven't already turned them off, helps with recursive calls
    If inTrackChangesLoop < 1 Then
        inTrackChangesLoop = 1
        Call SaveTrackChangesValues
        docSCOTWT.TrackRevisions = False
        docSCOTWT.TrackMoves = False
        docSCOTWT.TrackFormatting = False
    Else
        inTrackChangesLoop = inTrackChangesLoop + 1
    End If
    
End Sub

Attribute VB_Name = "modTranslation"
Option Explicit
Option Private Module
Public ChosenLanguage As String
Public priorLanguage As String
Public shTranslationSCOT As Object 'Excel.Worksheet
Public wkbkData As Object 'Excel.Workbook
Public oOleFormat As OLEFormat

Public Function GetChosenLanguage() As String

    If ChosenLanguage = "" Then
        Call CheckForOpenEmbedded
        ChosenLanguage = shFormData.Range("ChosenLanguage").value
        Profile.ChosenLanguage = ChosenLanguage
        If ChosenLanguage = "" And docSCOTWT.Bookmarks.Exists("ChosenLanguage") Then ChosenLanguage = docSCOTWT.Bookmarks("ChosenLanguage").Range.Text
        If ChosenLanguage = "" Then ChosenLanguage = "English"
        GetChosenLanguage = ChosenLanguage
    Else
        GetChosenLanguage = ChosenLanguage
    End If

End Function

Public Function Translate(toTranslate As String, ChosenLanguage As String) As String
On Error GoTo errHandler

    Dim tempString As String
    Dim thisRow As Integer
    Dim thisCol As Integer
    
    Call CheckForOpenEmbedded
    If ChosenLanguage = "" Then ChosenLanguage = GetChosenLanguage
    thisRow = shTranslationSCOT.Columns("A:A").find(toTranslate, LookAt:=xlWhole).Row
    thisCol = shTranslationSCOT.Rows("1:1").find(ChosenLanguage, LookAt:=xlWhole).Column
    
    tempString = shTranslationSCOT.Cells(thisRow, thisCol).value
    Translate = tempString
    Exit Function

errHandler:
'    Resume Next
     Translate = "Translation string not found for - '" & toTranslate & "'"
End Function

Public Function ReTranslate(toTranslate As String, ChosenLanguage As String) As String
'This function is used to take a value that has already been translated once and retranslate it to the current language
'   used for values that have already been selected in dropdowns
On Error GoTo errHandler

    Dim tempString As String
    Dim thisCol As Integer
    Dim thisCol1 As Integer
    Dim ColLtr As String
    Dim thisRow As Integer
    
    Call CheckForOpenEmbedded
    
    tempString = ""
    If ChosenLanguage = "" Then ChosenLanguage = GetChosenLanguage
    If priorLanguage = "" Then priorLanguage = "English"
    thisCol = shTranslationSCOT.Rows("1:1").find(ChosenLanguage, LookAt:=xlWhole).Column
    thisCol1 = shTranslationSCOT.Rows("1:1").find(priorLanguage, LookAt:=xlWhole).Column
    ColLtr = Replace(Replace(shTranslationSCOT.Cells(1, thisCol1).Address, "$1", ""), "$", "")
    'find the prior row - so as to get the chosen language equiv
    thisRow = shTranslationSCOT.Columns(ColLtr & ":" & ColLtr).find(toTranslate, LookAt:=xlWhole).Row
    
    tempString = shTranslationSCOT.Cells(thisRow, thisCol).value
    ReTranslate = tempString
    Exit Function

errHandler:
    Resume Next
    
End Function

Public Sub TranslateMacroButton(thisBM As String, fromLink As String, toLink As String)

    Dim strText As String

    ' Replace the field code values in the first field to change the label
    'docSCOTWT.Bookmarks(thisBM).Range.Select
    strText = docSCOTWT.Bookmarks(thisBM).Range.Fields(1).Code.Text
    docSCOTWT.Bookmarks(thisBM).Range.Fields(1).Code.Text = Replace(strText, fromLink, toLink)
    docSCOTWT.Bookmarks(thisBM).Range.Font.ColorIndex = wdBlue
    docSCOTWT.Bookmarks(thisBM).Range.Font.Underline = True

End Sub

Public Sub TranslateObjects()
'This procedure is to set the translated text for all objects not able to use an Excel formula such as shapes, data validation and textboxes
On Error GoTo errHandler

    Dim opt As OptionButton
    Dim rng As Range
    Dim currentLanguage As String
    Dim Temp As String
    Dim tempString As String
    Dim thisBM As Bookmark
    Dim holdType1 As String
    Dim holdType2 As String
    
    Call CheckForOpenEmbedded
    Call LoadProfile
    tempString = ""
    
    frmStatusWindow.lblMessage.Caption = Translate("WaitTranslateMessage", ChosenLanguage)
    frmStatusWindow.Show (False)
    
    If Not isMigrating And Not gPullingDocument Then
        currentLanguage = GetChosenLanguage
    Else
        currentLanguage = ChosenLanguage
        priorLanguage = "English"
    End If
    
    Application.ScreenUpdating = False
    Options.Pagination = False
    System.Cursor = wdCursorWait
    Call ShowAllMain(False)
    
    Call UpdateBookmarkGrid("BMGridAddObserve", Translate("BMGridAddObserve", currentLanguage))
    Call UpdateBookmarkGrid("BMGridAlertMessage", Translate("BMGridAlertMessage", currentLanguage))
    Call UpdateBookmarkGrid("BMGridCanvasDate", Translate("BMGridCanvasDate", currentLanguage))
    Call UpdateBookmarkGrid("BMGridDateFS", Translate("BMGridDateFS", currentLanguage))
    Call UpdateBookmarkGrid("BMGridEngagementName", Translate("BMGridEngagementName", currentLanguage))
    Call UpdateBookmarkGrid("BMGridEntityName", Translate("BMGridEntityName", currentLanguage))
    Call UpdateBookmarkGrid("BMGridObserve", Translate("BMGridObserve", currentLanguage))
    Call UpdateBookmarkGrid("BMGridObserve2", Translate("BMGridObserve2", currentLanguage))
    Call UpdateBookmarkGrid("BMGridPrelimAudit", Translate("BMGridPrelimAudit", currentLanguage))
    Call UpdateBookmarkGrid("BMGridSupervise", Translate("BMGridSupervise", currentLanguage))
    Call UpdateBookmarkGrid("BMGridWhoPerformed", Translate("BMGridWhoPerformed", currentLanguage))
    Call UpdateBookmarkGrid("EngagementInfoTitle", Translate("EngagementInformation", currentLanguage))
    Call UpdateBookmarkGrid("BMTypeOfSCOT", Translate("BMTypeOfSCOT", currentLanguage))
    Call UpdateBookmarkGrid("BMRelatedITApps", Translate("RelatedITApps", currentLanguage))
    Call UpdateBookmarkGrid("BMRelatedPartyTitle", Translate("RelatedPartyTitle", currentLanguage))
    Call UpdateBookmarkGrid("BMDocHighLevelUnder", Translate("DocHighLevelUnder", currentLanguage))
    Call UpdateBookmarkGrid("BMIdentifyRelate", Translate("IdentifyRelate", currentLanguage))
    Call UpdateBookmarkGrid("BMAuthorizeRelatedParty", Translate("AuthorizeRelatedParty", currentLanguage))
    Call UpdateBookmarkGrid("BMAuthorizeNormal", Translate("AuthorizeNormal", currentLanguage))
    If docSCOTWT.Bookmarks.Exists("BMSCOTWalkthoughMainTitle") Then
        Call UpdateBookmarkGrid("BMSCOTWalkthoughMainTitle", Translate("SCOTWalkthough", currentLanguage))
        Call UpdateBookmarkGrid("BMTransactionSelectedMain", Translate("TransactionSelected", currentLanguage))
        Call UpdateBookmarkGrid("BMWhomWeConfirmedMain", Translate("IndividualsConfirm", currentLanguage))
        Call UpdateBookmarkGrid("BMProcsUsedConfirmedMain", Translate("ProcsPerformed", currentLanguage))
    End If
    If Profile.ChosenSCOTType = 1 Then
        holdType1 = Translate("Routine", ChosenLanguage)
    ElseIf Profile.ChosenSCOTType = 2 Then
        holdType1 = Translate("NonRoutine", ChosenLanguage)
    ElseIf Profile.ChosenSCOTType = 3 Then
        holdType1 = Translate("Estimation", ChosenLanguage)
    End If
    If Profile.ChosenSCOTType2 = 1 Then
        holdType2 = Translate("Routine", ChosenLanguage)
    ElseIf Profile.ChosenSCOTType2 = 2 Then
        holdType2 = Translate("NonRoutine", ChosenLanguage)
    ElseIf Profile.ChosenSCOTType2 = 3 Then
        holdType2 = Translate("Estimation", ChosenLanguage)
    End If
    Call UpdateBookmarkGrid("TypeOfSCOT", holdType1 + IIf(holdType2 <> "", ", " + holdType2, ""))
    If Profile.PrelimAudit = 1 Then
        holdType1 = Translate("RibbonControls", ChosenLanguage)
    ElseIf Profile.PrelimAudit = 2 Then
        holdType1 = Translate("Substantive", ChosenLanguage)
    End If
    docSCOTWT.Bookmarks("AuditStrategyCell").Range.Text = holdType1

    Call UpdateBookmark("BMProvideBriefSumText", Translate("ProvideBriefSum", currentLanguage))
    Call UpdateBookmark("BMConclusions", Translate("BMConclusions", currentLanguage))
    Call UpdateBookmark("BMConsiderTitle", Translate("BMConsiderTitle", currentLanguage))
    Call UpdateBookmark("BMDocAndOther", Translate("BMDocAndOther", currentLanguage))
    If docSCOTWT.Bookmarks.Exists("BMInitiation") Then
        Call UpdateBookmark("BMInitiation", Translate("BMInitiation", currentLanguage))
        If CleanBM(docSCOTWT.Bookmarks("BMInsertHere").Range.Text) = Translate("BMInsertHere", priorLanguage) Then
            Call UpdateBookmark("BMInsertHere", Translate("BMInsertHere", currentLanguage))
        End If
    End If
    If docSCOTWT.Bookmarks.Exists("BMReporting") Then
        Call UpdateBookmark("BMReporting", Translate("BMReporting", currentLanguage))
        If CleanBM(docSCOTWT.Bookmarks("BMInsertHere1").Range.Text) = Translate("BMInsertHere1", priorLanguage) Then
            Call UpdateBookmark("BMInsertHere1", Translate("BMInsertHere1", currentLanguage))
        End If
    End If
    If docSCOTWT.Bookmarks.Exists("BMRecording") Then
        Call UpdateBookmark("BMRecording", Translate("BMRecording", currentLanguage))
        If CleanBM(docSCOTWT.Bookmarks("BMInsertHere2").Range.Text) = Translate("BMInsertHere2", priorLanguage) Then
            Call UpdateBookmark("BMInsertHere2", Translate("BMInsertHere2", currentLanguage))
        End If
    End If
    If docSCOTWT.Bookmarks.Exists("BMConclusion") Then
        Call UpdateBookmark("BMConclusion", Translate("BMConclusion", currentLanguage))
        If CleanBM(docSCOTWT.Bookmarks("BMInsertHere3").Range.Text) = Translate("BMInsertHere3", priorLanguage) Then
            Call UpdateBookmark("BMInsertHere3", Translate("BMInsertHere3", currentLanguage))
        End If
    End If
    
    Call UpdateBookmark("BMOtherConsider", Translate("BMOtherConsider", currentLanguage))
    Call UpdateBookmark("BMSCOTCharsTitle", Translate("BMSCOTCharsTitle", currentLanguage))
    Call UpdateBookmark("BMSelectChars", Translate("BMSelectChars", currentLanguage))
    Call UpdateBookmark("BMSigRisksTitle", Translate("BMSigRisksTitle", currentLanguage))
    Call UpdateBookmark("BMUnderstandOfThe", Translate("BMUnderstandOfThe", currentLanguage))
    Call UpdateBookmark("DocumentWarning", Translate("DocumentWarning", currentLanguage))
    Call UpdateBookmark("UnderstandSCOTTitle", Translate("UnderstandSCOT", currentLanguage))
    Call UpdateBookmark("DocumentTitle", Translate("BMMainTitle", currentLanguage))
   
    If CleanBM(docSCOTWT.Bookmarks("EYCanvasLoadDateCell").Range.Text) = "" Then
        'if we have not yet imported then update these fields
        Call UpdateBookmark("ImportedScotName", Translate("HoldSCOTName", currentLanguage))
        Call UpdateBookmark("ImportedScotName2", Translate("HoldSCOTName", currentLanguage))
    End If
    
    Dim tempControlNo As String
    Dim thisText As String
    
    'loop through any added sections and translate them
    For Each thisBM In docSCOTWT.Bookmarks
        thisText = ""
        If InStr(thisBM.name, "BMRelatedAssertions") <> 0 Then
            thisText = Translate("RelatedAssertions", currentLanguage)
        ElseIf InStr(thisBM.name, "BMControlName") <> 0 Then
            thisText = Replace(Translate("ControlName", ChosenLanguage), " # ", " ")
        ElseIf InStr(thisBM.name, "BMControlProperties") <> 0 Then
            thisText = Translate("ControlProperties", currentLanguage)
        ElseIf InStr(thisBM.name, "BMSigRisksAddTitle") <> 0 Then
            thisText = Translate("SigRisksAddressedTitle", currentLanguage)
        ElseIf InStr(thisBM.name, "BMControlDescription") <> 0 Then
            thisText = Translate("ControlDescription", currentLanguage)
        ElseIf InStr(thisBM.name, "BMPropDesignAtt") <> 0 Then
            thisText = Translate("DesignAttributes", currentLanguage)
        ElseIf InStr(thisBM.name, "BMControlType") <> 0 Then
            thisText = Translate("ControlType", currentLanguage)
        ElseIf InStr(thisBM.name, "BMReviewOrMonitor") <> 0 Then
            thisText = Translate("ReviewOrMonitor", currentLanguage)
        ElseIf InStr(thisBM.name, "BMFrequency") <> 0 Then
            thisText = Translate("Frequency", currentLanguage)
        ElseIf InStr(thisBM.name, "BMLowerRiskControl") <> 0 Then
            thisText = Translate("LowerRiskControl", currentLanguage)
        ElseIf InStr(thisBM.name, "BMControlOwnerInfo") <> 0 Then
            thisText = Translate("ControlOwnerInfo", currentLanguage)
        ElseIf InStr(thisBM.name, "BMNameTitleOwner") <> 0 Then
            thisText = Translate("NameTitleOwner", currentLanguage)
        ElseIf InStr(thisBM.name, "BMPersonPerfObject") <> 0 Then
            thisText = Translate("PersonPerfromObject", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDocumentBasis") <> 0 Then
            thisText = Translate("DocumentBasis", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDocumentObserve") <> 0 Then
            thisText = Translate("DocumentObserve", currentLanguage)
        ElseIf InStr(thisBM.name, "BMApplicationLabel") <> 0 Then
            thisText = Translate("ApplicationLabel", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDataUsed") <> 0 Then
            thisText = Translate("DataUsed", currentLanguage)
        ElseIf InStr(thisBM.name, "BMInfoUsedExecute") <> 0 Then
            thisText = Translate("InfoUsedExecute", currentLanguage)
        ElseIf InStr(thisBM.name, "BMSourceOfInfo") <> 0 Then
            thisText = Translate("SourceOfInfo", currentLanguage)
        ElseIf InStr(thisBM.name, "BMPlanToObtain") <> 0 Then
            thisText = Translate("PlanToObtain", currentLanguage)
        ElseIf InStr(thisBM.name, "BMReferenceControl") <> 0 Then
            thisText = Translate("ReferenceControl", currentLanguage)
        ElseIf InStr(thisBM.name, "BMForIntegrated") <> 0 Then
            thisText = Translate("ForIntegrated", currentLanguage)
        ElseIf InStr(thisBM.name, "BMNonIntegrated") <> 0 Then
            thisText = Translate("NonIntegrated", currentLanguage)
        ElseIf InStr(thisBM.name, "BMControlConclusion") <> 0 Then
            thisText = Translate("ControlConclusion", currentLanguage)
        ElseIf InStr(thisBM.name, "BMControlEffective") <> 0 Then
            thisText = Translate("ControlEffective", currentLanguage)
        ElseIf InStr(thisBM.name, "BMPremlimEval") <> 0 Then
            thisText = Translate("PremlimEval", currentLanguage)
        ElseIf InStr(thisBM.name, "BMConfirmOurUnder") <> 0 Then
            thisText = Translate("ConfirmOurUnderstanding", currentLanguage)
        ElseIf InStr(thisBM.name, "BMPersonMadeInquiry") <> 0 Then
            thisText = Translate("PersonMadeInquiry", currentLanguage)
        ElseIf InStr(thisBM.name, "BMTransConfirmUnder") <> 0 Then
            thisText = Translate("TransConfirmUnderstand", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDescribeProcedure") <> 0 Then
            thisText = Translate("DescribeProcedure", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDesignTOCs") <> 0 Then
            thisText = Translate("DesignTOCs", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDesignAttributes") <> 0 Then
            thisText = Translate("DesignAttributes", currentLanguage)
        ElseIf InStr(thisBM.name, "BMNatureOfTesting") <> 0 Then
            thisText = Translate("NatureOfTesting", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCharsOfExceptions") <> 0 Then
            thisText = Translate("CharsOfExceptions", currentLanguage)
        ElseIf InStr(thisBM.name, "BMTestingStrategy") <> 0 Then
            thisText = Translate("TestingStrategy", currentLanguage)
        ElseIf InStr(thisBM.name, "SignficantRiskRow") <> 0 Then
            thisText = Translate("SignficantRisks", currentLanguage)
        ElseIf InStr(thisBM.name, "RelatedWCGWsRow") <> 0 Then
            thisText = Translate("RelatedWCGWs", currentLanguage)
        ElseIf InStr(thisBM.name, "BMSCOTWalkthough") <> 0 And InStr(thisBM.name, "BMSCOTWalkthoughMain") = 0 And InStr(thisBM.name, "BMSCOTWalkthoughHelp") = 0 Then
            thisText = Translate("SCOTWalkthough", currentLanguage)
        ElseIf InStr(thisBM.name, "BMTransactionSelected") <> 0 Then
            thisText = Translate("TransactionSelected", currentLanguage)
        ElseIf InStr(thisBM.name, "BMWhomWeConfirmed") <> 0 Then
            thisText = Translate("IndividualsConfirm", currentLanguage)
        ElseIf InStr(thisBM.name, "BMProcsUsedConfirmed") <> 0 Then
            thisText = Translate("ProcsPerformed", currentLanguage)
        ElseIf InStr(thisBM.name, "AssociateRisk") <> 0 Then
            Call TranslateMacroButton(thisBM.name, Translate("AssociateLink", priorLanguage), Translate("AssociateLink", currentLanguage))
            thisText = ""
        ElseIf InStr(thisBM.name, "BMHasTesting") <> 0 Then
            If CleanBM(thisBM.Range.Text) = Translate("Yes", priorLanguage) Then
                thisText = Translate("Yes", currentLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("No", priorLanguage) Then
                thisText = Translate("No", currentLanguage)
            End If
        ElseIf InStr(thisBM.name, "SignficantRiskTitle") <> 0 Then
            thisText = Translate("SignificantRisks", currentLanguage)
        ElseIf InStr(thisBM.name, "SignficantRiskCtrlsTitle") <> 0 Then
            thisText = Translate("RelatedWCGWs", currentLanguage)
        ElseIf InStr(thisBM.name, "BMWCGWTitle") <> 0 Then
            thisText = Translate("WCGWName", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCPMainTitle") <> 0 Then
            If CleanBM(thisBM.Range.Text) = Translate("CPMainTitle", priorLanguage) Then
                thisText = Translate("CPMainTitle", currentLanguage)
            Else
                thisText = ""
            End If
        ElseIf InStr(thisBM.name, "BMCPMainText") <> 0 Then
            If CleanBM(thisBM.Range.Text) = Translate("EnterTextHere", priorLanguage) Then
                thisText = Translate("EnterTextHere", currentLanguage)
            Else
                thisText = ""
            End If
        ElseIf InStr(thisBM.name, "BMInAnotherSCOT") <> 0 Then
            thisText = Translate("InAnotherSCOT", currentLanguage)
        ElseIf InStr(thisBM.name, "BMWPReference") <> 0 And InStr(thisBM.name, "BMWPReferenceRow") = 0 Then
            thisText = Translate("WPReference", currentLanguage)
        ElseIf InStr(thisBM.name, "BMOthersSection") <> 0 Then
            thisText = Translate("OthersSection", currentLanguage)
        ElseIf InStr(thisBM.name, "BMSigRisksAddressedTitle") <> 0 Then
            thisText = Translate("SigRisksAddressedTitle", currentLanguage)
        ElseIf InStr(thisBM.name, "BMTestingTitle") <> 0 Then
            thisText = Translate("TestingTitle", currentLanguage)
        ElseIf InStr(thisBM.name, "BMRelApp") <> 0 And InStr(thisBM.name, "BMRelAppSelect") = 0 And InStr(thisBM.name, "BMRelAppsSelected") = 0 Then
            thisText = Translate("RelevantApplication", currentLanguage)
        ElseIf InStr(thisBM.name, "SelectRelApp") <> 0 Or InStr(thisBM.name, "BMRelAppSelect") <> 0 Then
            Call TranslateMacroButton(thisBM.name, Translate("SelectLink", priorLanguage), Translate("SelectLink", currentLanguage))
            thisText = ""
        ElseIf InStr(thisBM.name, "BMReviewControls") <> 0 Then
            thisText = Translate("ReviewControls", currentLanguage)
        ElseIf InStr(thisBM.name, "BMPrecAndSens") <> 0 Then
            thisText = Translate("PrecAndSens", currentLanguage)
        ElseIf InStr(thisBM.name, "BMDescribeResults") <> 0 Then
            thisText = Translate("DescribeResults", currentLanguage)
        ElseIf InStr(thisBM.name, "BMReviewInquiries") <> 0 Then
            thisText = Translate("ReviewInquiries", currentLanguage)
        ElseIf InStr(thisBM.name, "BMReviewPCAOB") <> 0 Then
            thisText = Translate("PCAOBReview", currentLanguage)
        ElseIf InStr(thisBM.name, "BMReviewRef") <> 0 Then
            thisText = Translate("ReviewRef", currentLanguage)
        ElseIf InStr(thisBM.name, "BMEndWCGWSection") <> 0 Then
            thisText = Translate("EndWCGWSection", currentLanguage)
        ElseIf InStr(thisBM.name, "BMAlreadyAdded") <> 0 Then
            thisText = Translate("AlreadyAdded", currentLanguage)
        ElseIf InStr(thisBM.name, "BMHere") <> 0 Or InStr(thisBM.name, "MainHere") <> 0 Then
            Call TranslateMacroButton(thisBM.name, Translate("HereLink", priorLanguage), Translate("HereLink", currentLanguage))
            thisText = ""
        ElseIf InStr(thisBM.name, "InSCOTYesB") <> 0 Or InStr(thisBM.name, "ReviewYesB") <> 0 _
                 Or InStr(thisBM.name, "PersonYesB") <> 0 Or InStr(thisBM.name, "ConcludeYesB") <> 0 Then
            thisText = Translate("Yes", currentLanguage)
        ElseIf InStr(thisBM.name, "InSCOTNoB") <> 0 Or InStr(thisBM.name, "ReviewNoB") <> 0 _
                 Or InStr(thisBM.name, "PersonNoB") <> 0 Or InStr(thisBM.name, "ConcludeNoB") <> 0 Then
            thisText = Translate("No", currentLanguage)
        ElseIf InStr(thisBM.name, "CheckTest1") <> 0 And InStr(thisBM.name, "CheckTest1B") = 0 And InStr(thisBM.name, "MainCheckTest1") = 0 Then
            thisText = Translate("IndepByEY", currentLanguage)
        ElseIf InStr(thisBM.name, "CheckTest2") <> 0 And InStr(thisBM.name, "CheckTest2B") = 0 And InStr(thisBM.name, "MainCheckTest2") = 0 Then
            thisText = Translate("ReperformByIA", currentLanguage)
        ElseIf InStr(thisBM.name, "CheckTest3") <> 0 And InStr(thisBM.name, "CheckTest3B") = 0 And InStr(thisBM.name, "MainCheckTest3") = 0 Then
            thisText = Translate("ReviewOfIA", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckInq") <> 0 And InStr(thisBM.name, "BMCheckInqB") = 0 Then
            thisText = Translate("Inquiry", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckIns") <> 0 And InStr(thisBM.name, "BMCheckInsB") = 0 Then
            thisText = Translate("Inspection", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckObs") <> 0 And InStr(thisBM.name, "BMCheckObsB") = 0 Then
            thisText = Translate("Observation", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckRep") <> 0 And InStr(thisBM.name, "BMCheckRepB") = 0 Then
            thisText = Translate("Reperformance", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckRotate") <> 0 And InStr(thisBM.name, "BMCheckRotateB") = 0 Then
            thisText = Translate("ControlsOverSCOT", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckRelate") <> 0 And InStr(thisBM.name, "BMCheckRelateB") = 0 Then
            thisText = Translate("IncludeRelated", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckHighly") <> 0 And InStr(thisBM.name, "BMCheckHighlyB") = 0 Then
            thisText = Translate("HighlyAutomated", currentLanguage)
        ElseIf InStr(thisBM.name, "BMCheckService") <> 0 And InStr(thisBM.name, "BMCheckServiceB") = 0 Then
            thisText = Translate("UsesServiceOrg", currentLanguage)
        ElseIf InStr(thisBM.name, "BMOptions1") <> 0 And InStr(thisBM.name, "BMOptionsB1") = 0 Then
            thisText = Translate("EY", currentLanguage)
        ElseIf InStr(thisBM.name, "BMOptions2") <> 0 And InStr(thisBM.name, "BMOptionsB2") = 0 Then
            thisText = Translate("InternalAuditors", currentLanguage)
        ElseIf InStr(thisBM.name, "BMOptions3") <> 0 And InStr(thisBM.name, "BMOptionsB3") = 0 Then
            thisText = Translate("Others", currentLanguage)
        ElseIf InStr(thisBM.name, "BMOptions4") <> 0 And InStr(thisBM.name, "BMOptionsB4") = 0 Then
            thisText = Translate("DocAccurately", currentLanguage)
        ElseIf InStr(thisBM.name, "BMOptions5") <> 0 And InStr(thisBM.name, "BMOptionsB5") = 0 Then
            thisText = Translate("OtherDoc", currentLanguage)
        ElseIf InStr(thisBM.name, "ControlPropType") <> 0 Then
            If CleanBM(thisBM.Range.Text) = Translate("Application", priorLanguage) Then
                thisText = Translate("Application", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("ITDepAll", priorLanguage) Then
                thisText = Translate("ITDepAll", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("ManualPrevent", priorLanguage) Then
                thisText = Translate("ManualPrevent", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("ManualDetect", priorLanguage) Then
                thisText = Translate("ManualDetect", ChosenLanguage)
            End If
        ElseIf InStr(thisBM.name, "BMFreqValue") <> 0 Then
            If CleanBM(thisBM.Range.Text) = Translate("MoreThanDaily", priorLanguage) Then
                thisText = Translate("MoreThanDaily", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("Daily", priorLanguage) Then
                thisText = Translate("Daily", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("Weekly", priorLanguage) Then
                thisText = Translate("Weekly", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("Monthly", priorLanguage) Then
                thisText = Translate("Monthly", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("Quarterly", priorLanguage) Then
                thisText = Translate("Quarterly", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("Annually", priorLanguage) Then
                thisText = Translate("Annually", ChosenLanguage)
            ElseIf CleanBM(thisBM.Range.Text) = Translate("Other", priorLanguage) Then
                thisText = Translate("Other", ChosenLanguage)
            End If
        End If
        
        If thisText <> "" Then
            Call UpdateBookmarkGrid(thisBM.name, thisText)
        End If
    Next thisBM
    
    Call HideAllMain
    
    'move cursor to beginning of form
    docSCOTWT.Bookmarks("DocBegin").Range.Select
    
    Options.Pagination = True
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Unload frmStatusWindow
    Exit Sub
    
errHandler:
    MsgBox "An error has occurred. " + Err.Description
    Resume Next
     
End Sub

Public Sub FindLanguage(thisDoc As Document)
On Error GoTo errHandler

    If thisDoc.Bookmarks.Exists("ChosenLanguage") Then ChosenLanguage = thisDoc.Bookmarks("ChosenLanguage").Range.Text
    If ChosenLanguage = "" Then ChosenLanguage = "English"
    Profile.ChosenLanguage = ChosenLanguage

    Exit Sub
    
errHandler:
    MsgBox "An error has occurred. " + Err.Description
    Resume Next
     
End Sub

' InQuest injected base64 decoded content
' *'~*
' J('~'
' 93h:
' ek%,z
' J('~'
' zPhw$
' zZBzY
' ZDUu

INQUEST-PP=macro
