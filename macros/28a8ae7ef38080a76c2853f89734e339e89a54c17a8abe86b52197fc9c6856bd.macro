Attribute VB_Name = "Code"

Option Explicit
Public Const SP0_VIEW As String = "SP0_VIEW"
Public Const SP1_VIEW As String = "SP1_VIEW"
Public Const SP2_VIEW As String = "SP2_VIEW"
Public Const SP3_PRICES_VIEW As String = "SP3_VIEW"
Public Const SP4_VIEW As String = "SP4_VIEW"
Public Const SPG_VIEW As String = "SPG_VIEW"
Public Const SP7_VIEW As String = "SP7_VIEW"
Public Const MSG_PROMPT As String = "View must be chosen."
Public Const MSG_TITLE As String = "Spectra"

Public Sub SecurityDistribution(Optional NoMessage As String)
Attribute SecurityDistribution.VB_ProcData.VB_Invoke_Func = " \n14"
Dim c As Object
Dim rq As Object
Dim row As Long
Dim col As Integer
Dim sName As String
Dim bMesgValu As Boolean
Dim strErrMsg As String
Dim dtFrom As Date
Dim dtTo As Date
Dim bDispMsg As Boolean
Dim vTabID As String
Dim vSpectraPrefix As String

'14.3 Code ld90 Dec 15 - New spectra.xls Tabs
Dim length As Integer
Dim spacesNeeded As Integer
Dim spaces As String
Dim count As Integer

'//Variable to hold the account number for audit logging - Rate2Association doesn't have an account
Dim strAccount As String
            


    On Error GoTo ErrHandler
    
    ''Optional NoMessage As Boolean and If IsMissing(NoMessage) Then do not work!!!! - replace with String
    If NoMessage = "" Then 'If IsMissing(NoMessage) Then
        bDispMsg = True
    Else
        bDispMsg = CBool(NoMessage)
    End If

    'MM12625 (BI) 03/14/2008 - Added to clarify meaning and usage of Range("A6")
    ' Cell(A6) should be a unique identifier for each tab;
    ' First 3-chars represent the "SpectraPrefix" (e.g. SP0, SP1, SP2, Sp3, etc...);
    ' References to Range("A6") are changed to use these variables.

    'MM15234 - relocated catch for error handling to this location
    On Error GoTo ErrHandler

    vTabID = Range("A6")
    vSpectraPrefix = Left(vTabID, 3)
    
    '// MP85 retrieve the values from the users drop down list selection
    '// First we check that the user has made a selection
    If (Range(SG_SHEET_DNS) = "" Or _
        Range(SG_SHEET_PORT) = "" Or _
        Range(SG_SHEET_OPID) = "") Then
            '// There is no selection made
            MsgBox "You must choose a region and user bank from the drop down list"
        Exit Sub
    End If
    
    '// MP85 verify that no one has altered the op id to access a region they are
    '// not set  up for in Enterprise
    If ConfirmIdentity(Range(SG_SHEET_OPID)) = False Then
        MsgBox "The OP ID does not match your LAN ID.   Processing stopped."
        Exit Sub
    End If
    
    Set c = CreateObject("SunGard.IOConnection")
    c.CommType = "IP"
    c.HostIP = Range(SG_SHEET_DNS)
    c.PORT = Range(SG_SHEET_PORT)
    c.Operator = UCase(Range(SG_SHEET_OPID))     '// This is the user's enterprise opid eg. mp85ir
    c.UserID = OLE_USER_ID
    c.Password = OLE_USER_PW
    
    Select Case vTabID
        Case "SP0"
        
            '//PTASK0000022179 - Prevent security dist - account 0
            If Range("SP0_ACCOUNT").Value = 0 _
            Or IsEmpty(Range("SP0_ACCOUNT").Value) _
            Or IsNull(Range("SP0_ACCOUNT").Value) Then
                MsgBox "Account 0 is not allowed for Security Distribution calls due to the performance impact on the mainframe"
                Exit Sub
            End If
            
        'MM14608
            If Range(SP0_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
            
            Set rq = c.CreateDistRequest
            rq.account = Range("SP0_ACCOUNT")
            strAccount = Range("SP0_ACCOUNT")
            rq.RequestDate = Range("SP0_REQDATE")
            If UCase$(Left$(Range("SP0_SCTYONLY"), 1)) = "N" Then
                rq.SecuritiesOnly = False
            End If
            If UCase$(Left$(Range("SP0_AGGREGATE"), 1)) = "Y" Then
                rq.Aggregate = "Y"
        '14.3 code ld90 Dec 15
        'MM17738 - Aggregate option 'A' and 'S' addition
            ElseIf UCase$(Left$(Range("SP0_AGGREGATE"), 1)) = "A" Then
                rq.Aggregate = "A"
            ElseIf UCase$(Left$(Range("SP0_AGGREGATE"), 1)) = "S" Then
                rq.Aggregate = "S"
            Else
                rq.Aggregate = "N"
            End If
            
        'MM14608 View not supported with 9.1 dll, commenting out for testing
            rq.view = GetView(Range(SP0_VIEW))
            
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.RequestDate)
            dtTo = CDate(rq.RequestDate)
            
        Case "SP1"
        
        'MM14608
            If Range(SP1_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
            
            Set rq = c.CreateTranRequest
            rq.account = Range("SP1_ACCOUNT")
            strAccount = Range("SP1_ACCOUNT")
            rq.fromDate = Range("SP1_FROMDATE")
            rq.toDate = Range("SP1_TODATE")
            Select Case Range("SP1_DATETYPE")
                Case 1: rq.DateType = "E"
                Case 2: rq.DateType = "T"
                Case 3: rq.DateType = "C"
                Case 4: rq.DateType = "S"
                Case 5: rq.DateType = "G"
                Case 6: rq.DateType = "N"
                Case 7: rq.DateType = "U"
                Case 8: rq.DateType = "I"
                Case 9: rq.DateType = "X"
            End Select
        Select Case Range("SP1_POSITIONS")
            Case 1: rq.Positions = "N"
            Case 2: rq.Positions = "A"
            Case 3: rq.Positions = "O"
            Case 4: rq.Positions = "P"
            Case 5: rq.Positions = "Z"
        End Select
        
        'MM14608 View not supported with 9.1 dll, commenting out for testing
            rq.view = GetView(Range(SP1_VIEW))
            
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.fromDate)
            dtTo = CDate(rq.toDate)
            
        Case "SP2"
        
        'MM14608
            If Range(SP2_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
            End If
        
            Set rq = c.CreateFundRequest
            rq.account = Range("SP2_ACCOUNT")
            strAccount = Range("SP2_ACCOUNT")
            rq.ClassOfShares = Range("SP2_CLASSOFSHARES")
            rq.RequestDate = Range("SP2_REQDATE")
            rq.Periods = Range("SP2_PERIODS")
            Select Case Range("SP2_PERIODTYPE")
                Case 1: rq.PeriodType = "P"
                Case 2: rq.PeriodType = "D"
                Case 3: rq.PeriodType = "W"
                Case 4: rq.PeriodType = "M"
                Case 5: rq.PeriodType = "Q"
                Case 6: rq.PeriodType = "Y"
                Case 7: rq.PeriodType = "A"
            End Select
            
        'MM14608 View not supported with 9.1 dll, commenting out for testing
            rq.view = GetView(Range(SP2_VIEW))
            
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.RequestDate)
            dtTo = CDate(rq.RequestDate)
            
        Case "SP3"
        
        'MM14608
            If Range(SP3_PRICES_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
            End If
        
            Set rq = c.CreateFXRateRequest
            rq.RequestDate = Range("SP3_REQDATE")
            rq.SctyCusip = Range("SP3_REQCURRCODE")
            rq.BaseCurrency = Range("SP3_REQBASECURR")
            rq.PricingSource = Range("SP3_REQSOURCE")
            rq.PricingTime = Range("SP3_REQTIME")
            rq.PricingType = Range("SP3_REQTYPE")
            rq.Periods = Range("SP3_PERIODS")
            Select Case Range("SP3_PERIODTYPE")
              Case 1: rq.PeriodType = "D"
              Case 2: rq.PeriodType = "W"
              Case 3: rq.PeriodType = "M"
              Case 4: rq.PeriodType = "Q"
              Case 5: rq.PeriodType = "Y"
            End Select
        
            rq.ProcessAll = " "
            Select Case Range("SP3_PROCESSALL")
            '// ld90 known bug fix required, in the Request All drop down choosing x ran p and choosing f ran x - incorrectly.
            '//The code needs to be changed to collate with the drop down.
              Case 1: rq.ProcessAll = "A"
              Case 2: rq.ProcessAll = "X"
              Case 3: rq.ProcessAll = "F"
            End Select
            '// MP85 21Apr2011
            '// Business have asked for a filter to be ahrd coded to reproduce the behaviour
            '// of the previous version of the spreadhseet where fx rates of zero were not returned
            row = 1
            rq.AddFilter Item:="fx", Operand:="!", Value:="0"
            
            '// cp103 - adding filters for Rate Source, Rate time, Rate type. Code added by ld90.
            If Range("SP3_REQSOURCE") <> "" Then
                rq.AddFilter Item:="P1", Operand:="=", Value:=Range("SP3_REQSOURCE")
            End If
                
            If Range("SP3_REQTIME") <> "" Then
                rq.AddFilter Item:="P2", Operand:="=", Value:=Range("SP3_REQTIME")
            End If
            
            If Range("SP3_REQTYPE") <> "" Then
                rq.AddFilter Item:="P3", Operand:="=", Value:=Range("SP3_REQTYPE")
            End If
            
        'MM14608 View not supported with 9.1 dll, commenting out for testing
            rq.view = GetView(Range(SP3_PRICES_VIEW))
            
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.RequestDate)
            dtTo = CDate(rq.RequestDate)
            strAccount = "0"
        Case "SP3_Prices"
        
        'MM14608
            If Range(SP3_PRICES_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
        
                Set rq = c.CreateFXRateRequest
                rq.RequestDate = Range("SP3_REQDATE")
                rq.SctyCusip = Range("SP3_SECURITYNUMBER")
                rq.SctyDate = Range("SP3_SECURITYDATE")
                rq.SctyQual = Range("SP3_SECURITYQUAL")
                rq.BaseCurrency = Range("SP3_REQBASECURR")
                rq.PricingSource = Range("SP3_REQSOURCE")
                rq.PricingTime = Range("SP3_REQTIME")
                rq.PricingType = Range("SP3_REQTYPE")
                rq.Periods = Range("SP3_PERIODS")
                Select Case Range("SP3_PERIODTYPE")
                  Case 1: rq.PeriodType = "D"
                  Case 2: rq.PeriodType = "W"
                  Case 3: rq.PeriodType = "M"
                  Case 4: rq.PeriodType = "Q"
                  Case 5: rq.PeriodType = "Y"
                End Select
                rq.ProcessAll = " "
                Select Case Range("SP3_PROCESSALL")
                  Case 1: rq.ProcessAll = "A"
                  Case 2: rq.ProcessAll = "P"
                  Case 3: rq.ProcessAll = "F"
                End Select
                
            '// MP85 16-03-2011 Commented out as the cell doesn't exist
            '// 14.3 code change
            If Range("SP3_Account").Value <> Empty Then
                rq.account = Format(Range("SP3_ACCOUNT"), "###############")
                strAccount = Range("SP3_ACCOUNT")
            Else
                strAccount = "0"
            End If
            'MM14608 View not supported with 9.1 dll, commenting out for testing
             rq.view = GetView(Range(SP3_PRICES_VIEW))
             
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.RequestDate)
            dtTo = CDate(rq.RequestDate)
            
        Case "SP4"
        
        'MM14608
            If Range(SP4_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
        
            Set rq = c.CreateGLRequest
            rq.account = Range("SP4_ACCOUNT")
            strAccount = Range("SP4_ACCOUNT")
            rq.fromDate = Range("SP4_FROMDATE")
            rq.toDate = Range("SP4_TODATE")
                        
            Select Case Range("SP4_RECORDTYPE")
                Case 1: rq.RecordType = "S"
                Case 2: rq.RecordType = "D"
                Case 3: rq.RecordType = "B"
            End Select
            
        'MM14608 View not supported with 9.1 dll, commenting out for testing
            rq.view = GetView(Range(SP4_VIEW))
            
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.fromDate)
            dtTo = CDate(rq.toDate)
            
        Case "SPG"
         'MM14608
            If Range(SPG_VIEW) = vbNullString Then
                 MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
        
            Set rq = c.CreateGermanEqualRequest
            rq.account = Range("SPG_ACCOUNT")
            strAccount = Range("SPG_ACCOUNT")
            rq.RequestDate = Range("SPG_REQDATE")
            rq.Periods = Range("SPG_PERIODS")
            Select Case Range("SPG_PRIORVAL")
                Case 1: rq.PriorVal = "Y"
                Case 2: rq.PriorVal = " "
            End Select
            bMesgValu = False
            Do While bMesgValu <> True
                If rq.PriorVal = "Y" And rq.Periods > 1 Then
                    MsgBox ("Only 1 period allowed if requesting Prior Valuation")
                    Exit Sub
                Else
                    bMesgValu = True
                End If
            Loop
            
         'MM14608
            If Range(SPG_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
            
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.RequestDate)
            dtTo = CDate(rq.RequestDate)
            
        Case "SP7"
         'MM14608
            If Range(SP7_VIEW) = vbNullString Then
                MsgBox MSG_PROMPT, vbOKOnly, MSG_TITLE
                Exit Sub
            End If
            
            Set rq = c.CreateFundRequest
            rq.account = Range("SP7_ACCOUNT")
            strAccount = Range("SP7_ACCOUNT")
            rq.ClassOfShares = Range("SP7_CLASSOFSHARES")
            rq.RequestDate = Range("SP7_REQDATE")
            rq.Periods = Range("SP7_PERIODS")
            Select Case Range("SP7_PERIODTYPE")
                Case 1: rq.PeriodType = "P"
                Case 2: rq.PeriodType = "D"
                Case 3: rq.PeriodType = "W"
                Case 4: rq.PeriodType = "M"
                Case 5: rq.PeriodType = "Q"
                Case 6: rq.PeriodType = "Y"
                Case 7: rq.PeriodType = "A"
            End Select
            '// mp85 19 Jan 2011 This check appears to be case sensitive
            'If Range("SP7_ADVATT") = 1 Then
            If Range("SP7_AdvAtt") = 1 Then
                   rq.AdvAtt = "D"
            Else
                   rq.AdvAtt = "A"
            End If
            
            'MM14608 View not supported with 9.1 dll, commenting out for testing
            rq.view = GetView(Range(SP7_VIEW))
                        
            '//mp85 - track dates for logging
            dtFrom = CDate(rq.RequestDate)
            dtTo = CDate(rq.RequestDate)
        
        '14.3 Code ld90 Dec 15 - New spectra.xls Tabs
        Case "SP8"
            Set rq = c.CreateRate2ARequest
            rq.EffectiveDate = Range("SP8_EFFECTIVE_DATE")
            
            strAccount = "0"
            dtFrom = CDate(Range("SP8_EFFECTIVE_DATE"))
            dtTo = CDate(Range("SP8_EFFECTIVE_DATE"))
            length = Len(Range("SP8_ACCT_COUNTRY"))
            If length > 4 Then
                MsgBox "Account Base Country cannot be more than 4 characters."
                Exit Sub
            Else
                spacesNeeded = 4 - length
                spaces = ""
                For count = 1 To spacesNeeded
                        spaces = spaces & " "
                Next
            End If
            rq.AcctCountry = Range("SP8_ACCT_COUNTRY") & spaces
            
            length = Len(Range("SP8_ACCT_TAX_GROUP"))
            If length > 1 Then
                MsgBox "Account Tax Group cannot be more than 1 character."
                Exit Sub
            Else
                spacesNeeded = 1 - length
                spaces = ""
                For count = 1 To spacesNeeded
                        spaces = spaces & " "
                Next
            End If
            rq.AcctTaxGroup = Range("SP8_ACCT_TAX_GROUP") & spaces
           
            length = Len(Range("SP8_SECURITY_COUNTRY"))
            If length > 4 Then
                MsgBox "Security Country of Taxation cannot be more than 4 characters."
                Exit Sub
            Else
                spacesNeeded = 4 - length
                spaces = ""
                For count = 1 To spacesNeeded
                        spaces = spaces & " "
                Next
            End If
            rq.SecurityCountry = Range("SP8_SECURITY_COUNTRY") & spaces
            
            length = Len(Range("SP8_SECURITY_TAX_GROUP"))
            If length > 1 Then
                MsgBox "Security Tax Group cannot be more than 1 character."
                Exit Sub
            Else
                spacesNeeded = 1 - length
                spaces = ""
                For count = 1 To spacesNeeded
                        spaces = spaces & " "
                Next
            End If
            rq.SecurityTaxGroup = Range("SP8_SECURITY_TAX_GROUP") & spaces
        
        
        '14.3 Code ld90 Dec 15 - New spectra.xls Corporate Actions Tabs
        Case "SPC"
            
            'MM14608
            'If Range("SPC_View") = "" Then
            '    MsgBox "View must be chosen.", vbOKOnly, "Spectra"
            '    Exit Sub
            'End If
            
            Set rq = c.CreateCorpActionRequest
            
            rq.account = Range("SPC_Account")
            strAccount = Range("SPC_ACCOUNT")
            rq.fromDate = Range("SPC_ReqFromDate")
            rq.toDate = Range("SPC_ReqToDate")
            Select Case Range("SPC_DateType")
                Case 1: rq.DateType = "X"
                Case 2: rq.DateType = "E"
                Case 3: rq.DateType = "P"
                Case 4: rq.DateType = "R"
            End Select
            
            Select Case Range("SPC_RecordType")
                Case 1: rq.RecordType = "S"
                Case 2: rq.RecordType = "C"
                Case 3: rq.RecordType = "A"
            End Select
            
            rq.view = " "
'**
        Case "SP9"
            ' This is the first tab with double digits, so the default setting for vSpectraPrefix will
            ' not.  Override the setting, so the name for the filters work correctly.
            vSpectraPrefix = "SP9"
            
            '109850
            'Verify Effective Date is Entered
            If Range("SP9_EFFECTIVE_DATE") = "" Then
                MsgBox "Effective Date must be entered and in format CCYYMMDD.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            'Verify Inflation Index is entered
            If Range("SP9_INFLATION_INDEX") = "" Then
                MsgBox "Inflation Index must be entered.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            'Verify Number Of Entries is entered
            If Range("SP9_NUMBER_ENTRIES") = "" Then
                MsgBox "Number of Entries must be entered.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            'Create request from dll call
            Set rq = c.CreateSpectraInflationIndex
            rq.EffectiveDate = Range("SP9_EFFECTIVE_DATE")
            rq.InflationIndex = Range("SP9_INFLATION_INDEX")
            rq.NumberOfEntries = Range("SP9_NUMBER_ENTRIES")
 '**
        Case Else
            MsgBox "Unable to interpret the spread sheet"
    End Select
        
    'If vTabID = "SP3" Then
    ''No Filters for FX Rate Tab
    'Else
     For row = 1 To 5
         If Range(vSpectraPrefix & "_F" & row & "ITEM") > "" Then
            rq.AddFilter Item:=Range(vSpectraPrefix & "_F" & row & "ITEM"), _
                         Operand:=Range(vSpectraPrefix & "_F" & row & "OPER"), _
                         Value:=IIf(UCase(Trim(Range(vSpectraPrefix & "_F" & row & "ITEM"))) = "AN", Format(Range(vSpectraPrefix & "_F" & row & "VALUE"), "#000000000000000"), Range(vSpectraPrefix & "_F" & row & "VALUE"))
         End If
     Next row
    'End If
    
    col = 1
    Do Until Trim$(Cells(8, col)) = ""
        rq.AddItem Cells(8, col)
        Cells(10, col).Value = rq.items(UCase(Cells(8, col).Value)).Title
        col = col + 1
    Loop
    
  ''MM12625 (BI) 02/27/2008 - Debugging
  'If vTabID = "SP3" _
  'Or vTabID = "SP3_Prices" Then
  '   Range("E1") = Replace(rq.RequestString(), " ", "~")
  'End If
    
    rq.Start
    rq.MoveNext
    
    
    '//FIS Code that improves performance - LD90 Oct 2017. OLE 15.6.07
    
    row = 11
    Dim strSheetname As String
    strSheetname = ActiveSheet.Name
    
    With ActiveSheet
        row = .Cells(.rows.count, "A").End(xlUp).row + 1
    End With
        
    'Do Until Trim$(Cells(row, 1)) = ""
    '    row = row + 1
    'Loop
    
    Dim rows As Long, totalRows As Long
    
    '//Get the local date format from regional settings - default to mm/dd/yyyy if all selse fails
    Dim strDateFormat As String
    Dim strDateSeparator As String
    Dim lDateOrder As Long
    lDateOrder = 0
    '// Tom Dillenburg request to show dates as mm/dd/yyyy (not dd/mm/yyyy in EMEA)
    strDateFormat = "mm/dd/yyyy"
    '//With Application
        '//strDateSeparator = .International(xlDateSeparator)
        '//lDateOrder = .International(xlDateOrder)
        '//Select Case .International(xlDateOrder)
            '//Case 0
            '//    strDateFormat = "mm" & strDateSeparator & "dd" & strDateSeparator & "yyyy"
            '//Case 1
            '//    strDateFormat = "dd" & strDateSeparator & "mm" & strDateSeparator & "yyyy"
            '//Case 2
            '//    strDateFormat = "yyyy" & strDateSeparator & "mm" & strDateSeparator & "dd"
            '//Case Else
            '//    strDateFormat = "mm" & strDateSeparator & "dd" & strDateSeparator & "yyyy"
        '//End Select
    '//End With
    
    col = 1
    Do Until Trim$(Cells(8, col)) = ""
        If UCase(Cells(8, col).Value) = "DT" Then
            If Cells(10, col).Value = "Constant DTM" Then
                Cells(10, col).Value = Cells(10, col).Value & " " & strDateFormat
                Exit Do
            End If
        End If
    
        col = col + 1
    Loop
    
    Dim coldata As Variant, rng As Range, nbrLoops As Long, loopNdx As Long
    
    totalRows = rq.RowCount
    
    nbrLoops = totalRows \ 5000
    If (totalRows Mod 5000 > 0) Then
        nbrLoops = nbrLoops + 1
    End If
    
    Set rng = Range(Cells(row, 1), Cells(totalRows + row, col))
    '//rng.NumberFormat = "@"
    
    col = 1
    Do Until Trim$(Cells(8, col)) = ""
            
        For loopNdx = 0 To nbrLoops - 1
            Dim loopStart As Long, loopEnd As Long
            loopStart = (5000 * loopNdx) + 1
            loopEnd = 5000 * (loopNdx + 1)
            If loopEnd > totalRows Then
                loopEnd = totalRows
            End If
                    
            coldata = rq.getColumnData(Trim(Cells(8, col).Value), loopStart - 1, loopEnd - loopStart + 1)
            
            rows = UBound(coldata)
            Set rng = Range(Cells(row + loopStart - 1, col), Cells(row + loopEnd - 1, col))
            If InStrB(1, "CU,SU,PN,3E,4E,5E,W9,TK,XF", UCase(Cells(8, col).Value), vbBinaryCompare) > 0 Then
                rng.NumberFormat = "@"
            'ElseIf rq.items(UCase(Cells(8, col).Value)).display = "General Date" Then
            '    rng.NumberFormat = "mm/dd/yyyy"
            Else
                If rq.items(UCase(Cells(8, col).Value)).display = "General Date" Then
                    rng.NumberFormat = "General"
                Else
                    rng.NumberFormat = rq.items(UCase(Cells(8, col).Value)).display
                End If
            End If
            rng.Value2 = Application.Transpose(coldata)
            
            If rq.items(UCase(Cells(8, col).Value)).display = "General Date" Then
                Dim val As Variant, ndx As Long
                If UCase(Cells(8, col).Value) = "DT" Then
                    rng.NumberFormat = strDateFormat
                Else
               
                    ' loop over all rows and set date format
                    For ndx = row + loopStart - 1 To row + loopEnd - 1
                        val = Cells(ndx, col)
                        If val = vbNullString Then
                            Cells(ndx, col) = ""
                        ElseIf CDbl(val) = 0 Then
                            Cells(ndx, col) = ""
                        Else
                            On Error Resume Next
                            Cells(ndx, col) = Mid(val, 5, 2) & "/" & Right(val, 2) & "/" & Left(val, 4) '//Format$(DateSerial(Mid(val, 1, 4), Mid(val, 5, 2), Mid(val, 7, 2)), strDateFormat)
                            Cells(ndx, col).NumberFormat = "mm/dd/yyyy"
                            On Error GoTo 0
                        End If
                    Next ndx
                    'rng.NumberFormat = strDateFormat
                End If
            End If
        
        Next loopNdx

        'Set rng = Range(Cells(row, col), Cells(row + totalRows - 1, col))
        'If rq.items(UCase(Cells(8, col).Value)).display = "General Date" Then
        '    If UCase(Cells(8, col).Value) = "DT" Then
        '        rng.NumberFormat = strDateFormat
        '    Else
        '        If vSpectraPrefix <> "SP2" Then
        '            Dim val As Variant, ndx As Long
        '            ' loop over all rows and set date format
        '            For ndx = row To row + totalRows
        '                val = Cells(ndx, col)
        '                If IsDate(val) Then
        '                    If rq.items(UCase(Cells(8, col).Value)).display = "@" Then
        '                        val = Left(val, 4) & Right(val, 2) & Mid(val, 5, 2)
        '                    Else
        '                        val = Format(val, "yyyymmdd")
        '                    End If
        '                End If
        '                If val = vbNullString Then
        '                    Cells(ndx, col) = ""
        '                ElseIf CDbl(val) = 0 Then
        '                    Cells(ndx, col) = ""
        '                Else
        '                    On Error Resume Next
        '                    Cells(ndx, col) = Format$(DateSerial(Mid(val, 1, 4), Mid(val, 5, 2), Mid(val, 7, 2)), strDateFormat)
        '                    On Error GoTo 0
        '                End If
        '            Next
        '            rng.NumberFormat = strDateFormat
        '        End If
        '    End If
        'Else
        '    If InStrB(1, "CU,SU,PN,3E,4E,5E,W9,TK,XF", UCase(Cells(8, col).Value), vbBinaryCompare) > 0 Then
        '        rng.NumberFormat = "@"
        '    Else
        '        If UCase(Cells(8, col).Value) <> "DT" Then
        '            rng.NumberFormat = "General"
        '            rng.NumberFormat = rq.items(UCase(Cells(8, col).Value)).display
        '        Else
        '            rng.NumberFormat = strDateFormat
        '        End If
        '    End If
        'End If
        col = col + 1
    Loop
    
    '//Autofit column widths
    Dim strCol As String
    Select Case col
        Case Is < (26 + 1)
            col = col - 1
            strCol = Chr(Asc("A") + col)
        Case Is < (26 + 1) + 26
            col = col - (26 + 1)
            strCol = "A" & Chr(Asc("A") + col)
        Case Is < (26 + 26 + 1) + 26
            col = col - (26 + 26 + 1)
            strCol = "B" & Chr(Asc("A") + col)
        Case Is < (26 + 26 + 26 + 1) + 26
            col = col - (26 + 26 + 26 + 1)
            strCol = "C" & Chr(Asc("A") + col)
    End Select
    Range("A9:" & strCol & row + totalRows).Columns.AutoFit
    
    '------------------------- Replaced code started here ------------
    
    'Do Until rq.EOF
    '    col = 1
    '    Do Until Trim$(Cells(8, col)) = ""
    '        Cells(row, col) = rq.ItemValue(Cells(8, col))
    '        If rq.items(Cells(8, col)).display = "General Date" Then
    '            If vSpectraPrefix <> "SP2" Then
    '                If CDbl(Cells(row, col)) = 0 Then
    '                    Cells(row, col) = ""
    '                Else
    '                    Cells(row, col).NumberFormat = "mm/dd/yyyy"
    '                    On Error Resume Next
    '                    Cells(row, col) = Format$(DateSerial(Mid(rq.ItemValue(Cells(8, col)), 1, 4), Mid(rq.ItemValue(Cells(8, col)), 5, 2), Mid(rq.ItemValue(Cells(8, col)), 7, 2)), Cells(row, col).NumberFormat)
    '                    On Error GoTo 0
    '                End If
    '            End If
    '        Else
    '            Cells(row, col).NumberFormat = rq.items(Cells(8, col)).display
    '            Cells(row, col) = rq.ItemValue(Cells(8, col))
    '        End If
    '        col = col + 1
    '    Loop
    '    row = row + 1
    '    rq.MoveNext
    'Loop
    
    '------------------------- End of Replaced code ------------
    
    Set c = Nothing
    
    '//MP85 9.1 project - log results
    TNT_LogToAudit strAccount, dtFrom, dtTo, totalRows & " rows loaded"
    
    If bDispMsg = True Then
        MsgBox totalRows & " rows loaded!"
    End If
Exit Sub

ErrHandler:
    strErrMsg = Err.Description
    '// MP85 9.1 project - log errors
    If (dtFrom = Null Or dtTo = Null Or dtFrom = "00:00:00" Or dtFrom = "00:00:00") Then
        TNT_LogToAudit strAccount, Now(), Now(), strErrMsg
    Else
        TNT_LogToAudit strAccount, dtFrom, dtTo, strErrMsg
    End If
    
    MsgBox strErrMsg, vbCritical, "Error"

    Err.Clear
End Sub

Private Function GetView(view As Integer) As String
'******************************************************************************
'* Description: A new view has been added in Enterprise 11.0 to the
'* header of this OLE spreadsheet.
'* This procedure is called once an option from the drop down is selected.
'*
'* Written By:  SunGard(added by ld90)
'*
'* Date:        04-July-2013
'*
'* Arguments:   Inputs
'*
'* Dependencies: Named Range - ViewSelectionValues
'*
'* Returns:     Option 1, 2 or 3 from the drop down View. Fund Account View,
'* Investment Account View or Alternative GAAP View.
'* Options are now list driven, increased from 3 to 10. 14.3 change. Ld90 Nov 2015
'*******************************************************************************
On Error GoTo ErrHandler

    Dim viewCodeArray As Variant

        viewCodeArray = Range("ViewCodes").Value
        GetView = viewCodeArray(view, 1)
        
Exit Function
ErrHandler:
    MsgBox Err.Description, vbCritical, "GetView"
    Err.Clear
End Function

Attribute VB_Name = "Module1"
Option Explicit
Dim spList As Object
Sub Clear()
Attribute Clear.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("A10").CurrentRegion.Select
    Selection.Delete
    Range("A10").CurrentRegion.Select
End Sub

Sub DoSort()
Attribute DoSort.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("A10").CurrentRegion.Select
    'SendKeys ("%DS")
    '//ld90 removed send key code as it was bringing up the Pivot Table dialog and not Sort
    Application.Dialogs(xlDialogSort).Show
End Sub
Sub DoAutoFilter()
Attribute DoAutoFilter.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("A10").CurrentRegion.AutoFilter
End Sub
Sub GetDistItem()
Attribute GetDistItem.VB_ProcData.VB_Invoke_Func = " \n14"
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.DistItem(ActiveCell.Value)
    End If
End Sub
Sub GetTranItem()
Attribute GetTranItem.VB_ProcData.VB_Invoke_Func = " \n14"
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.TranItem(ActiveCell.Value)
    End If
End Sub
Sub GetValuItem()
Attribute GetValuItem.VB_ProcData.VB_Invoke_Func = " \n14"
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.ValuItem(ActiveCell.Value)
    End If
End Sub
Sub GetGmeqItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.GmeqItem(ActiveCell.Value)
    End If
End Sub
Sub GetFxrtItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.FxrtItem(ActiveCell.Value)
    End If
End Sub
Sub GetGenLedgerItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.GeneralLedgerItem(ActiveCell.Value)
    End If
End Sub
Sub GetRate2AItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.Rate2AItem(ActiveCell.Value)
    End If
End Sub
Sub GetCorpActionItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.CorpActionItem(ActiveCell.Value)
    End If
End Sub
Sub GetInflationIndexItem()
Dim o As Object
    Auto_Open ''109850
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.InflationIndexItem(ActiveCell.Value)
    End If
End Sub

'// MP85 09 Mar 2011
'// Added this
'// Looks like the Spectra codes are shared with the fx rates
Sub GetPricesItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.FxrtItem(ActiveCell.Value)
    End If
End Sub

Sub Auto_Open()
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    Set spList = CreateObject("SunGard.IOSpectraItemList")
    If Err Then
        MsgBox "Unable to start spectra list server"
        Exit Sub
    End If
    
    '// Retrieve the available regions/user banks for this user
    TNT_BuildOptions

    Worksheets("Security Distribution").OnDoubleClick = "GetDistItem"
    Worksheets("Transaction Analysis").OnDoubleClick = "GetTranItem"
    Worksheets("Fund Trend").OnDoubleClick = "GetValuItem"
    Worksheets("Equalization").OnDoubleClick = "GetGmeqItem"
    Worksheets("Exchange Rates").OnDoubleClick = "GetFxrtItem"
    Worksheets("Prices").OnDoubleClick = "GetPricesItem"
    Worksheets("General Ledger").OnDoubleClick = "GetGenLedgerItem"
    Worksheets("Rate2Association").OnDoubleClick = "GetRate2AItem"
    Worksheets("Corporate Action").OnDoubleClick = "GetCorpActionItem"
    Worksheets("AdvisorAttribution").OnDoubleClick = "GetValuItem"
    Worksheets("Inflation Index").OnDoubleClick = "GetInflationIndexItem"
End Sub

Sub Multi_Date_Holdings(Optional bSuppressMsg As Boolean)
'//Docket 5244 - supression of a msg box - ld90
'// mp85 07.030 certification
'// Additional functionality
'//
'// Historic holdings button handler
'//
Dim nDays As Integer
Dim nLast As Integer
Dim dtStart As Date
Dim bDispMsg As Boolean

    '// Get the number of days to run for
    nLast = Range("F6").Value
    
    If nLast > 0 Then
        '// Get the first date in the run
        dtStart = Range("F3").Value
        
        For nDays = (nLast - 1) To 0 Step -1
        
            '// We only suppress messages if the passed bSuppressMsg is True
            If Not bSuppressMsg Then

            '// We only display the number of rows updated on the last pass
            If nDays = 0 Then
                bDispMsg = True
            End If
        End If
        
            '// increment the date
            Range("F3").Value = dtStart - nDays
            
            '// Run the report for the current date
            SecurityDistribution CStr(bDispMsg)
            
        Next nDays
    
        '// Restore the original start date
        Range("F3").Value = dtStart
    Else
        MsgBox "Please enter the number of days to run for.", vbOKOnly, "Data Error"
    End If
    
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 21, 1, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
'Dim strResult As String
'strResult = EncryptDecryptString("Michael")
'strResult = EncryptDecryptString(strResult)
'Range("G1") = strResult

    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 16, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
'Dim strResult As String
'strResult = EncryptDecryptString("Michael")
'strResult = EncryptDecryptString(strResult)
'Range("G1") = strResult

    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub


Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 11, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
'Dim strResult As String
'strResult = EncryptDecryptString("Michael")
'strResult = EncryptDecryptString(strResult)
'Range("G1") = strResult

    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub


Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 10, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
'Dim strResult As String
'strResult = EncryptDecryptString("Michael")
'strResult = EncryptDecryptString(strResult)
'Range("G1") = strResult

    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub



Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 10, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 19, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 12, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub


'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 8, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 11, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 9, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbCICSRegions, 9, 0, MSForms, ComboBox"
'//
'// Combo Box onChange event handler
'//
'// MP85 25 Nov 2010
'//
Private Sub cbCICSRegions_Change()
Dim arrValues() As String

    '//Figure out what the selection was and update the display
    '// We know the string is in the format IP - port - opid - db conn string index
    
    If cbCICSRegions.ListIndex >= 0 Then
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 1), "-")
        
        arrPARMValues(PARM_DNS_INDEX) = arrValues(0)
        arrPARMValues(PARM_PORT_INDEX) = arrValues(1)
        arrPARMValues(PARM_OPID_INDEX) = arrValues(2)
        arrPARMValues(PARM_DB_CONN_INDEX) = arrValues(3)
        
        '// Update the display fields with the selected values
        InitialiseUserFields (True)
        
        '// Get the display values for use when writing to the audit table
        arrValues = Split(cbCICSRegions.List(cbCICSRegions.ListIndex, 0), "-")
        arrPARMValues(PARM_REGION_INDEX) = arrValues(0)
        arrPARMValues(PARM_USERBANK_INDEX) = arrValues(1)
        
        '// Debug message box
        '//MsgBox cbCICSRegions.List(cbCICSRegions.ListIndex, 1)
        '//ld90 - change added to address user entitlements issue - the bug was that the entitlements
        '//were being picked up from UAT and not PROD.
        glURLIndex = arrPARMValues(PARM_DB_CONN_INDEX)
    End If

End Sub

'//
'// Worksheet activate event handler
'// This is only required in the Spectra spreadsheet because
'// of the multiple worksheets
'//
'// MP85 18 Jan 2011
'//
Private Sub Worksheet_Activate()
    cbCICSRegions_Change
End Sub

Attribute VB_Name = "SolveForAmount"
Option Explicit
Sub SolveForAmount()
Attribute SolveForAmount.VB_Description = "\n\nS\n\n!0\n|fffd|\n"
Dim cFirst As Integer
Dim cLast As Integer
Dim rFirst As Integer
Dim rLast As Integer
Dim dTarget As Double
Dim d As Double
Dim r As Integer
Dim c As Integer
Dim r2 As Integer
Dim c2 As Integer
Dim s As String
    
    cFirst = Selection.Column
    cLast = cFirst + Selection.Columns.count - 1
    rFirst = Selection.row
    rLast = rFirst + Selection.rows.count - 1

    If rFirst < 11 Then
        rFirst = 11
    End If
    r = Range("A10").CurrentRegion.row + (Range("A10").CurrentRegion.rows.count - 1)
    If r < rLast Then
        rLast = r
    End If
    
    If cFirst = cLast And rFirst = rLast Then
        MsgBox "Please select a range first"
        End
    End If
    
    dTarget = Application.InputBox(prompt:="Target value", Type:=1)
    If dTarget = 0 Then
        Exit Sub
    End If
    
    For r = rFirst To rLast
        For c = cFirst To cLast
            If IsNumeric(Cells(r, c)) Then
                d = Cells(r, c).Value
                If d <> 0 Then
                    If d = dTarget Then
                        If vbNo = MsgBox(prompt:=Cells(r, c).Address(False, False) & " = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                            End
                        End If
                    End If
                    If d < 0 And dTarget > 0 And Abs(d) = dTarget Then
                        If vbNo = MsgBox(prompt:="Abs(" & Cells(r, c).Address(False, False) & ") = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                            End
                        End If
                    End If
                End If
            End If
        Next c
    Next r
    
    For r = rFirst To rLast
        For c = cFirst To cLast
            Application.StatusBar = "Analyzing " & Cells(r, c).Address(False, False)
            If IsNumeric(Cells(r, c)) Then
                d = Cells(r, c).Value
                If d <> 0 Then
                    For r2 = rFirst To rLast
                        For c2 = cFirst To cLast
                            If IsNumeric(Cells(r2, c2)) Then
                                If Cells(r2, c2) <> 0 Then
                                    d = Cells(r, c).Value + Cells(r2, c2).Value
                                    If CStr(d) = CStr(dTarget) Then
                                        If vbNo = MsgBox(prompt:=Cells(r, c).Address(False, False) & " + " & Cells(r2, c2).Address(False, False) & " = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                            End
                                        End If
                                    End If
                                    If d < 0 And dTarget > 0 Then
                                        If CStr(Abs(d)) = CStr(dTarget) Then
                                            If vbNo = MsgBox(prompt:="Abs(" & Cells(r, c).Address(False, False) & " + " & Cells(r2, c2).Address(False, False) & ") = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                                End
                                            End If
                                        End If
                                    End If
                                    d = Cells(r, c).Value - Cells(r2, c2).Value
                                    If CStr(d) = CStr(dTarget) Then
                                        If vbNo = MsgBox(prompt:=Cells(r, c).Address(False, False) & " - " & Cells(r2, c2).Address(False, False) & " = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                            End
                                        End If
                                    End If
                                    If d < 0 And dTarget > 0 Then
                                        If CStr(Abs(d)) = CStr(dTarget) Then
                                            If vbNo = MsgBox(prompt:="Abs(" & Cells(r, c).Address(False, False) & " - " & Cells(r2, c2).Address(False, False) & ") = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                                End
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next c2
                    Next r2
                End If
            End If
        Next c
    Next r
    Application.StatusBar = ""
    MsgBox "Search complete"
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mdTNTUtilities"
Option Explicit
Option Base 1
'******************************************************************************
'* This module contains all of the functions required to control and log
'* user access to the Invest One OLE spreadsheets.
'*
'* The list of available databases is held in a .ini file that must exist in
'* the same folder as the spreadsheet being run.
'*
'*
'*
'*
'* Michael Parks 31 Oct 2010
'*
'*  th110 8th Aug 2013 Enterprise 12 Entitlements
'*
'*******************************************************************************

'Public gStrDBConn()                 As String
Public gbBeenHereBefore             As Boolean
Public arrPARMValues(1 To 6)        As String

Public Const PARM_DNS_INDEX         As Long = 1
Public Const PARM_PORT_INDEX        As Long = 2
Public Const PARM_OPID_INDEX        As Long = 3
Public Const PARM_REGION_INDEX      As Long = 4
Public Const PARM_USERBANK_INDEX    As Long = 5
Public Const PARM_DB_CONN_INDEX     As Long = 6

Public Const SG_SHEET_IDENT         As String = "SP"
Public Const SG_SHEET_DNS           As String = "B2"
Public Const SG_SHEET_PORT          As String = "B3"
Public Const SG_SHEET_OPID          As String = "D3"
Public Const SG_SHEET_MSG           As String = "G1"

Public Const OLE_USER_ID            As String = "APOLLO"
Public Const OLE_USER_PW            As String = "0070928"

Public Const SECURITY_KEY           As String = "richard"
Private Const INBOUND_ERROR         As String = "You do not have a role that is permitted to run this Inbound OLE "



'---------------------------------
' constants for XML file import
'---------------------------------
'//Private Const XML_FILE_PATH                  As String = "C:\\Program Files\\NorthernTrust\\NTOLE"

'*  th110 8th Aug 2013 Enterprise 12 Entitlements
'*  global variables needed because theenvironment is selected in the spreadsheets
'*  we need to capture the environment so that we know which websetvice to call
Public gstrURL()                                As String
Public glURLIndex                               As Integer
Private Const URL_UAT                           As String = "http://web-ian45-fcf:9012/UtilityService/WebApi/WebApiHandler.ashx?"
Private Const URL_PROD                          As String = "http://web-ipn45-fcf:9012/UtilityService/WebApi/WebApiHandler.ashx?"

'//Constants for methods
Private Const METHOD_NAME                       As String = "MethodName="
Private Const GETUSERINFOBYUSERID               As String = "GetUserInfoByUserId"
Private Const CHECKSPREADSHEETACCESSBYUSERID    As String = "CheckSpreadsheetAccessByUserId"
Private Const GETROLESBYSPREADSHEETNAME         As String = "GetRolesBySpreadsheetName"
Private Const INSERTINTOAUDITTABLE              As String = "InsertIntoAuditTable"
Private Const HTTP_GET                          As String = "GET"

'//Constant for xml keywords
Private Const ERROR_KEYWORD                     As String = "exceptionDetails"
Private Const ERRORMESSAGE_KEYWORD              As String = "errorMessage"
Private Const GETUSERINFO_KEYWORD               As String = "OLE_GetUserInfo"
Private Const RESULTS_KEYWORD                   As String = "results"
Private Const LOGIN_NAME_KEYWORD                As String = "LOGIN_NAME"
Private Const NAME_KEYWORD                      As String = "NAME"
Private Const IP_ADDR_KEYWORD                   As String = "IP_ADDR"
Private Const PORT_KEYWORD                      As String = "PORT"
Private Const OPID_KEYWORD                      As String = "OPID"
Private Const USERBANK_KEYWORD                  As String = "USERBANK"
Private Const NON_QUERY_SUCCESS                 As String = "Non-Query Success"


'//Constants for parameter labels
Private Const USERID_LABEL                      As String = "&UserId="
Private Const SPREADSHEETNAME_LABEL             As String = "&SpreadsheetName="
Private Const PORT_LABEL                        As String = "&port="
Private Const USERBANK_LABEL                    As String = "&userbank="
Private Const ACCOUNT_LABEL                     As String = "&account="
Private Const FROMDATE_LABEL                    As String = "&fromDate="
Private Const TODATE_LABEL                      As String = "&toDate="
Private Const LANID_LABEL                       As String = "&lanId="
Private Const OPID_LABEL                        As String = "&opId="
Private Const REGION_LABEL                      As String = "&region="
Private Const DNS_LABEL                         As String = "&dns="
Private Const REPORTNAME_LABEL                  As String = "&reportName="
Private Const SHEETNAME_LABEL                   As String = "&sheetName="
Private Const REPORTPATH_LABEL                  As String = "&reportPath="
Private Const REPORTRESULT_LABEL                As String = "&reportResult="
Private Const IDENT_COL                         As String = "A6"
Private Const LITERAL_HYPHEN                    As String = "-"
Private Const LITERAL_FORWARDSLASH              As String = "/"
Private Const USERNAME_LABEL                    As String = "USERNAME"

'//Windows 10
Private Const MSXML_DOC                         As String = "MSXML2.DOMDocument60"
Private Const INIFILE_ERROR_TITLE               As String = "Userbank Lookup"
Private Const LAN_ID_LABEL                      As String = "LAN Id "
Private Const ERROR_USER_AUTHORISATION          As String = " is not set up to use this function, please submit an IDM for for InvestOne Enterprise"
Private Const ERROR_MISSING_CONFIG_FILE         As String = "Cannot config file: file is "
Private Const ERROR_MISSING_NODE                As String = "Cannot find node in config file: node is "
Private Const ERROR_CONFIG_PATH                 As String = ", path is "
Private Const RNG_ERROR_MESSAGE                 As String = "ERROR_MESSAGE"
Private Const RNG_A10                           As String = "A10"



Sub TNT_BuildOptions()
'******************************************************************************
'* Description: Reads the registry to get a list of all of the available
'*              databases and their connectiion strings.  Connects to each
'*              one to get a list of CICS regions and user banks available
'*              to the user and uses this information to populate the user
'*              interface.
'*
'* Written By:  Michael Parks   31 Oct 2010
'*
'*  th110 8th Aug 2013 Enterprise 12 Entitlements
'*  Replace the database connection and stored procedure call with a
'*  webservices call - this procedure is pretty much rewritten
'*
'* Arguments:   none
'*
'* Dependencies: Named range for displaying errors
'*
'* Returns:     nothing
'*
'*******************************************************************************
Dim strUserID
Dim i As Long
Dim j As Long
Dim lIndex As Long

Dim objXMLDoc_INI As Object
'Dim bBeenHereBefore As Boolean

'//Entitlements
Dim strKeyword As String
Dim strParameterList As String
Dim strHttpResponse As String
Dim strErrorMessage As String
Dim objNode As IXMLDOMNode
Dim objNodeList As IXMLDOMNodeList

'//Windows 10
Dim objXMLDoc As MSXML2.DOMDocument60
Dim strLoginName As String
Dim strName As String
Dim strIpAddr As String
Dim strPort As String
Dim strOpId As String
Dim strUserBank As String
Dim bIsAuthorisedUser As Boolean

    '// MP85 09 Sep 2011
    '// We discovered an issue during seed testing of the spreadsheets that is impacting the
    '// load time of the Spectra code lookup.   The auto_load function is called every time you
    '// double click on row 8.  As a result this module is also executed and it is slow because
    '// of the two database calls.   This check was added to ensure that we only execute the module once
    '// It's a little tricky cause there is no simple way to test if the array is populated without
    '// throwing an error.   We're testing the arrray as it's the only global constant available to us that
    '// will indicate that the routine has been run.
    
    On Error Resume Next
    '//ld90 12 Feb 2014
    '//Removing this code, as the gStrDBConn variable is no longer being used due to the fact that we are
    '//now calling a webservice.This code was causing the userbank drop down to be cleared/initialised each
    '//time the user double clicked to add a data item. Added global variable gbBeenHereBefore.
    
    'i = UBound(gStrDBConn, 1)
    'If Err.Number = 0 Then
    '    bBeenHereBefore = True
    'Else
    '    bBeenHereBefore = False
    'End If

   
    '// Restore error handling
    On Error GoTo Error_Handler
    
  '// first thing to do is ensure we don't rerun the initialisation
    
    If gbBeenHereBefore = False Then

        '// Use this block for the Inbound spreadsheets
        '// This block is only needed in the Spectra spreadsheet because there are
        '// multiple sheets that can be used to submit request
        '// NOTE that without doing the check for the spectra prefix there is a risk of
        '// clearing sheets added by the business using Spectra as a template.
        '// This approach isn't foolproof but is better than nothing
        For i = 1 To ThisWorkbook.Worksheets.count
            If Left(ThisWorkbook.Worksheets.Item(i).Range(IDENT_COL), 2) = SG_SHEET_IDENT Then
    
                '// Clear the connection details displayed under the header
                ThisWorkbook.Worksheets.Item(i).Cells.Range(SG_SHEET_DNS) = ""
                ThisWorkbook.Worksheets.Item(i).Cells.Range(SG_SHEET_PORT) = ""
                ThisWorkbook.Worksheets.Item(i).Cells.Range(SG_SHEET_OPID) = ""
            End If
        Next i

        '// Get the users lan id
        strUserID = LCase(Environ(USERNAME_LABEL))
  
            ReDim Preserve gstrURL(2)
            gstrURL(1) = URL_PROD
            
            gstrURL(2) = URL_UAT
            
        bIsAuthorisedUser = False
        
        
        '//call the GetUserInfoByUserId for each environment to get the
        '//host, IP, opId, port, etc.  Load the details into the
        '//cbCICSRegions so that partner can selevt the userbank/opID
        '//from the template
        lIndex = 0
        For i = 1 To UBound(gstrURL)
            glURLIndex = i
            strParameterList = USERID_LABEL & strUserID
            strHttpResponse = CallWebservice(GETUSERINFOBYUSERID, strParameterList)
            
            '// Windows 10
            Dim xml As DOMDocument60
            Set xml = New DOMDocument60
            xml.async = False
            xml.loadXML (strHttpResponse)

            '//get the user info details & populate the dropdown lists
            strKeyword = GETUSERINFO_KEYWORD
                
            '//Windows 10
            Set objNodeList = xml.getElementsByTagName(strKeyword)
            
            For Each objNode In objNodeList
                strLoginName = objNode.selectSingleNode("LOGIN_NAME").Text
                If LCase(strLoginName) = strUserID Then
                    bIsAuthorisedUser = True
                    strName = objNode.selectSingleNode(NAME_KEYWORD).Text
                    strIpAddr = objNode.selectSingleNode(IP_ADDR_KEYWORD).Text
                    strPort = objNode.selectSingleNode(PORT_KEYWORD).Text
                    strOpId = objNode.selectSingleNode(OPID_KEYWORD).Text
                    strUserBank = objNode.selectSingleNode(USERBANK_KEYWORD).Text
                    
                    '//populate the dropdown lists
                    For j = 1 To ThisWorkbook.Worksheets.count
                        If Left(ThisWorkbook.Worksheets.Item(j).Range(IDENT_COL), 2) = SG_SHEET_IDENT Then
                            '// If this is the first record we clear the combo box so that
                            '// we're making a fresh start
                            If lIndex = 0 Then
                                ThisWorkbook.Worksheets.Item(j).cbCICSRegions.Clear
                            End If
    
                            '// loop through data items and populate the two list boxes
                            '// NOTE: Sungard have not named the sheet objects to match the display name
                            '// Each column contains a '-' seperated list of values
                            ThisWorkbook.Worksheets.Item(j).cbCICSRegions.AddItem strName & LITERAL_HYPHEN & strUserBank
                            ThisWorkbook.Worksheets.Item(j).cbCICSRegions.Column(1, lIndex) = strIpAddr & LITERAL_HYPHEN & _
                                strPort & LITERAL_HYPHEN & strOpId & LITERAL_HYPHEN & CStr(i)
                        End If
                    Next j
                End If
                lIndex = lIndex + 1
            Next objNode
        Next i
        If bIsAuthorisedUser = False Then
            strErrorMessage = LAN_ID_LABEL & strUserID & ERROR_USER_AUTHORISATION
            ReportEntitlementsError strErrorMessage
        Else
            gbBeenHereBefore = True
        End If
        For j = 1 To ThisWorkbook.Worksheets.count
            '// Make sure there is no active selection on entry
            If Left(ThisWorkbook.Worksheets.Item(j).Range(IDENT_COL), 2) = SG_SHEET_IDENT Then
                ThisWorkbook.Worksheets.Item(j).cbCICSRegions.ListIndex = -1
            End If
        Next j
        
        '// Clean up after ourselves
        Set xml = Nothing
    
    '// End of the check to see if we've already initialised
    End If
    
   Exit Sub


Error_Handler:
    Set xml = Nothing

    Err.Raise Err.Number, "TNT_BuildOptions", Err.Description
    
End Sub


Private Function CallWebservice(strMethodName As String, strParameterList As String) As String
'******************************************************************************
'* Description: CallWebservice
'*      Generic function to call the entitlements service.  The procedure will check for an
'*      error returned from the call.  The calling procedure needs to check for results
'*
'* Developer:   th110
'*
'* Date         08/08/2013
'*
'* Arguments:   Inputs:-
'*                  strMethodName   - The method to call
'*                  strParameterList- Parameter values to pass to the method
'*
'*              Outputs:-
'*                  The http response
'*
'* Returns:     N/A
'*
'* Dependencies:
'*
'*******************************************************************************

'//Windows 10 const
Const HTTPREQUEST_SETCREDENTIALS_FOR_SERVER = 0

Dim strKeyword As String
Dim objNode As IXMLDOMNode
Dim strURL As String
Dim strErrorMessage As String

'// Error Handler
On Error GoTo CallWebservice_Err

'//Windows 10 - new webservice call format
    strURL = gstrURL(glURLIndex) & _
                METHOD_NAME & _
                strMethodName & _
                strParameterList

    Dim MyRequest As Object
    Set MyRequest = CreateObject("WinHttp.WinHttpRequest.5.1")
 
    MyRequest.Open "GET", strURL
 
    'Set credentials
    MyRequest.SetCredentials _
        GetSetting("TNT_OLE", "\", "genericu", ""), _
        GetSetting("TNT_OLE", "\", "genericp", ""), _
        HTTPREQUEST_SETCREDENTIALS_FOR_SERVER
 
    ' Send Request.
    MyRequest.send
    If MyRequest.responseText <> "" Then
    
        Dim xml As MSXML2.DOMDocument60
        Set xml = New MSXML2.DOMDocument60
        xml.async = False
        xml.Load (MyRequest.responseText)
    
        '//Look for error returned from the service: <exception><exeptionDetails><errorMessage>
        strKeyword = ERROR_KEYWORD
        Set objNode = xml.selectSingleNode(strKeyword)
        If Not (objNode Is Nothing) Then
            strErrorMessage = objNode.selectSingleNode(ERRORMESSAGE_KEYWORD).Text
            ReportEntitlementsError strErrorMessage
        End If
    End If
    CallWebservice = MyRequest.responseText
    
LabelEnd:
'// Tidyup
    On Error GoTo 0
    If Not (xml Is Nothing) Then
        Set xml = Nothing
    End If
    
    Exit Function


CallWebservice_Err:
'// Don't raise an error because in the event of a timeout in one environment we
    '// don't want to prevent access to the other
    '//Err.Raise Err.Number, "CallWebservice", Err.Description
    strErrorMessage = "CallWebservice at " + strURL + " - " + Err.Description
    ReportEntitlementsError strErrorMessage
Resume LabelEnd


End Function

Private Sub ReportEntitlementsError(strErrorMsg As String)
'******************************************************************************
'* Description: ReportEntitlementsError
'*  th110 8th Aug 2013 Enterprise 12 Entitlements
'*  Reports errors to the ERROR_MESSAGE named range or to cell A10 of the
'*  acriveworksheet
'*
'* Developer:   th110
'*
'* Date         07/08/2013
'*
'* Arguments:   Inputs:-
'*                  strErrorMsg - the error to report
'*
'*              Outputs:-
'*                  n/a
'*
'* Returns:     N/A
'*
'* Dependencies:
'*
'*******************************************************************************

Dim rngErrorMessage As Range

'// Error Handler
On Error GoTo ReportEntitlementsError_Err

    Set rngErrorMessage = Range(RNG_ERROR_MESSAGE)
    If glURLIndex = 1 _
    Or rngErrorMessage Is Nothing Then
        '//No error_message range or Production - put the error into cell A10 of the activesheet
        ActiveSheet.Range(RNG_A10).Value = strErrorMsg
        ActiveSheet.Range(RNG_A10).ColumnWidth = 30
        ActiveSheet.Range(RNG_A10).RowHeight = 120
    Else
        Range(RNG_ERROR_MESSAGE).Value = strErrorMsg
    End If


LabelEnd:
'// Tidyup
On Error GoTo 0
Exit Sub


ReportEntitlementsError_Err:
    If Err.Number <> 1004 Then
        Err.Raise Err.Number, "ReportEntitlementsError", Err.Description
    End If
    Resume Next


End Sub

Sub TNT_LogToAudit(account As String, fromDate As Date, toDate As Date, status As String)
'******************************************************************************
'* Description: Logs the specified parameters to the audit table
'*
'* Written By:  Michael Parks   30 Nov 2010
'*
'* th110 8th Aug 2013 Enterprise 12 Entitlements
'* replace database connection & stored procedure with web services call
'* Also, some error messages returned from the engine have embedded single quotes
'* which is messing up the SQL string.  Replace any single quotes in the error
'* message with ":"
'*
'* Arguments:   none
'*
'* Dependencies: Named range for displaying errors
'*
'* Returns:     nothing
'*
'*******************************************************************************
    
    '//Entitlements
    Dim strKeyword As String
    'Dim HttpReq As New MSXML2.XMLHTTP40
    Dim strErrorMessage As String
    Dim objNode As IXMLDOMNode
    
    '//Windows 10
    Dim objXMLDoc As MSXML2.DOMDocument60
    Dim strHttpResponse As String
    Dim strParameterList As String

    On Error GoTo Error_Handler
    
    '//th110 8th Aug 2013:Replace any single quotes in the error message with ":"
    strErrorMessage = Replace(status, "'", ":")
    
    '//Call the webservice method and pass the parameters
    strParameterList = PORT_LABEL & arrPARMValues(PARM_PORT_INDEX) & _
        USERBANK_LABEL & arrPARMValues(PARM_USERBANK_INDEX) & _
        ACCOUNT_LABEL & account & _
        FROMDATE_LABEL & Format(fromDate, "yyyymmdd") & _
        TODATE_LABEL & Format(toDate, "yyyymmdd") & _
        LANID_LABEL & LCase(Environ("USERNAME")) & _
        OPID_LABEL & arrPARMValues(PARM_OPID_INDEX) & _
        USERID_LABEL & OLE_USER_ID & _
        REGION_LABEL & arrPARMValues(PARM_REGION_INDEX) & _
        DNS_LABEL & arrPARMValues(PARM_DNS_INDEX) & _
        REPORTNAME_LABEL & ActiveWorkbook.Name & _
        SHEETNAME_LABEL & ActiveWorkbook.ActiveSheet.Name & _
        REPORTPATH_LABEL & ActiveWorkbook.Path & _
        REPORTRESULT_LABEL & strErrorMessage
    
    strHttpResponse = CallWebservice(INSERTINTOAUDITTABLE, strParameterList)
    
    '// Windows 10
    Dim xml As DOMDocument60
    Set xml = New DOMDocument60

    xml.async = False
    xml.loadXML (strHttpResponse)

    '//Errors are trapped in Call_Webservice, look for success
    strKeyword = RESULTS_KEYWORD
    ''Set objNodeList = xml.getElementsByTagName(strKeyword)
    
    '//Windows 10
    Set objNode = xml.selectSingleNode(strKeyword)
    If objNode Is Nothing Then
        strErrorMessage = ERROR_MISSING_NODE _
            & strKeyword
        ReportEntitlementsError strErrorMessage
        Exit Sub
    Else
        strHttpResponse = objNode.Text
        If strHttpResponse <> NON_QUERY_SUCCESS Then
    '//ld90 bug fix related to displaying error messages.
            strErrorMessage = INBOUND_ERROR
            ReportEntitlementsError strErrorMessage
        End If
    End If
    
    Exit Sub
    
Error_Handler:
    Err.Raise Err.Number, "TNT_LogToAudit", Err.Description
    
End Sub

Function EncryptDecryptString(strPhrase As String) As String

'******************************************************************************
'* Description:  Takes an encrypted string and decrypts it or takes a plain
'*               text string and encrypts
'*
'* Written By:   Michael Parks
'*
'* Arguments:    string to be transformed
'*
'* Dependencies: None
'*
'* Returns:     Unencrypted string
'*
'*******************************************************************************
Const KEY As Long = 85 '// This is a capital U
Dim i As Long
Dim bytReturnVal() As Byte

    On Error GoTo Error_Handler
    
    '// Copy the source phrase to a byte array
    bytReturnVal = strPhrase
    '// Traverse the array, xoring the key with each character in the source phrase
    For i = LBound(bytReturnVal) To UBound(bytReturnVal)
        bytReturnVal(i) = bytReturnVal(i) Xor KEY
    Next i
    
    '// Load the return result
    EncryptDecryptString = bytReturnVal

    Exit Function

Error_Handler:
    '//tidy up
    EncryptDecryptString = "**encryption error**"

    Err.Raise Err.Number, "EncryptDecryptString", Err.Description
    
End Function



Public Function InitialiseUserFields(Optional bValues As Boolean)
'******************************************************************************
'* Description: Updates the header fields
'*
'* Written By:  Michael Parks
'*
'* Arguments:   bValue = true indicates to retrieve values from the control
'*                     = false indicates to blank out the fields
'*
'* Dependencies:
'*
'* Returns:      none
'*******************************************************************************
   
    'set the CELL values
    If (bValues = True) Then
         '// Update the display fields with the selected values
        Range(SG_SHEET_DNS) = arrPARMValues(PARM_DNS_INDEX)
        Range(SG_SHEET_PORT) = arrPARMValues(PARM_PORT_INDEX)
        Range(SG_SHEET_OPID) = arrPARMValues(PARM_OPID_INDEX)
        Range(SG_SHEET_MSG) = ""
    Else
        Range(SG_SHEET_DNS) = ""
        Range(SG_SHEET_PORT) = ""
        Range(SG_SHEET_OPID) = ""
        Range(SG_SHEET_MSG) = ""
    End If
    
End Function

Public Function ConfirmIdentity(strOpId As String) As Boolean
'******************************************************************************
'* Description: Confirms that the string passed in begins with the users LAN ID
'*
'* Written By:  Michael Parks
'*
'* Arguments:   bValue = true indicates the identity is valid
'*                     = false indicates there is a mismatch in the id provided
'*
'* Dependencies:
'*
'* Returns:      none
'*******************************************************************************

Dim strUserID As String

 '// lower case both strings to eliinate any case based mismatches
    strUserID = LCase(Environ("USERNAME"))

 '//If it's a bloomberg user id then don't have to compare with op id. Ld90 08/17
    If strUserID Like LCase("*BLOOM*") Then
        ConfirmIdentity = True
    ElseIf InStr(1, LCase(strOpId), strUserID, vbTextCompare) > 0 Then
        ConfirmIdentity = True
    Else
        ConfirmIdentity = False
    End If

End Function



Public Sub ForceSelection(Region As String, UserBank As String)
'******************************************************************************
'* Description: Attempts to force the specified regions and user bank
'*              selection in the drop down list of available options.
'*              If the option is not available a message will be displayed
'*              to the user in a popup dialog.    This may be because an invalid
'*              combination was passed in the function call (coding error) or the
'*              more likely case is that the user does not have the required
'*              access in Invest One Enterprise.
'*              There is no validation performed on the values passed in.   They
'*              are case insensitive.
'*
'* Written By:  FND Systems
'* Version:     1.0
'* Date         23 Aug 2013
'*
'* Arguments:   Region is a string value representing the required CICS region
'*                      e.g. CICSP00, CICSTUJ etc.
'*              UserBank is a string value representing the required user bank
'*                        e.g.IR , AU02, NT, etc.
'*
'* Dependencies: None
'*
'* Returns:      none
'*******************************************************************************
Dim strUserID As String
Dim lWorksheetIndex As Long
Dim lRegionIndex As Long
Dim strChoice As String
Dim bFound As Boolean

    On Error GoTo err_Handler

    '// Create the choice we are looking for in the drop down list in
    '// lower case to eliminate any case based mismatches
    strChoice = LCase(Region + "-" + UserBank)
    
    '// Default to combination not found
    bFound = False

    '// Traverse each worksheet in the workbook looking for the dropdown list control
    For lWorksheetIndex = 1 To ThisWorkbook.Worksheets.count
        '// Is there a dropdown list on this worksheet
        If CheckControlExists("cbCICSRegions", lWorksheetIndex) = True Then
            '// Traverse the values in the drop down list looking for a match
            For lRegionIndex = LBound(ThisWorkbook.Worksheets.Item(lWorksheetIndex).cbCICSRegions.List) To UBound(ThisWorkbook.Worksheets.Item(lWorksheetIndex).cbCICSRegions.List)
                '// Values in the drop down list are held in two columns
                '// column 0 is the region and user bank seperated by a hyphen
                ''// column 1 holds the connection parameters
                If StrComp(strChoice, LCase(ThisWorkbook.Worksheets.Item(lWorksheetIndex).cbCICSRegions.List(lRegionIndex, 0))) = 0 Then
                    '// Force the selection so as to trigger the event handler
                    ThisWorkbook.Worksheets.Item(lWorksheetIndex).cbCICSRegions.ListIndex = lRegionIndex
                    bFound = True
                    '// Found what we're looking for so stop looping
                    Exit For
                End If
            Next lRegionIndex
        End If
    Next lWorksheetIndex

    '// Warn
    If bFound = False Then
        MsgBox "No match found for the combination of " + Region + " and " + UserBank
    End If

    Exit Sub

err_Handler:
    MsgBox "ForceSelection:- " + Err.Description
    
End Sub


Public Function CheckControlExists(ControlName As String, SheetIndex As Long) As Boolean
'******************************************************************************
'* Description: Traverses the specified worksheet looking for the specified
'*              control name.
'*
'* Written By:  FND Systems
'* Version:     1.0
'* Date         23 Aug 2013
'*
'* Arguments:   ControlName is a string value representing the control we're
'*              looking for on the specified worksheet.
'*              SheetIndex is the index into the array of worksheets on the
'*              active workbook
'*
'* Dependencies: None
'*
'* Returns:     true if the control is found
'*              false if the control is not found
'*******************************************************************************

Dim obj As Object

    '// Default to not found
    CheckControlExists = False

    '// Cycle through all the controls on the worksheet looking for the one we need
    For Each obj In ThisWorkbook.Worksheets.Item(SheetIndex).Shapes
        If UCase(obj.Name) = UCase(ControlName) Then
            CheckControlExists = True
            Exit Function
        End If
    Next obj

End Function




' InQuest injected base64 decoded content
' I XQ!
' +ezg

INQUEST-PP=macro
