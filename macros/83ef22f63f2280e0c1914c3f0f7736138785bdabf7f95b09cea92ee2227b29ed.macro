Attribute VB_Name = "Module_CheckRolling"
Function fCheck_Value(sType As String, r As Long, cEnd As Integer)
Dim cStart As Integer, r0 As Integer
'*** sType is obsolete

'Exit if current value is blank
    If Sheets("Supplier input").Cells(r, cEnd) = "" Then Exit Function
    
        
    r0 = r - 1 'Assumption: Rolling figures are always 1 row below the monthly figures
    
'Determine start month of visible range
    If cEnd - 11 < 4 Then cStart = 4 Else cStart = cEnd - 11 'Column 4 is 2017.01, start month of the sheet


'Only check for months in the visible range
    If Cells(r, cEnd) < WorksheetFunction.SumProduct(Range(Cells(9, cStart), Cells(9, cEnd)), Range(Cells(r0, cStart), Cells(r0, cEnd))) Then
        If Sheets("Supplier input").Cells(2, 3) <> "English" Then
            MsgBox Cells(r, 2) & Chr(13) & Chr(13) & _
                    "   n|fffd|o pode ser inferior |fffd| soma de " & Chr(13) & Chr(13) & "      " & _
                    Cells(r0, 2) & Chr(13) & Chr(13) & _
                    "   dos |fffd|ltimos 12 meses. Por favor ajustar."
            Cells(r, cEnd).Select
        Else
            MsgBox Cells(r, 2) & Chr(13) & Chr(13) & _
                    "   cannot be lower than the sum of " & Chr(13) & Chr(13) & "      " & _
                    Cells(r0, 2) & Chr(13) & Chr(13) & _
                    "   of the past 12 months. Please adjust."
            Cells(r, cEnd).Select
        End If
    
    End If
    
    
End Function





Attribute VB_Name = "Module_INIT"
Function fInit_ufLTI()
Dim i As Integer
    If Sheets("Supplier input").Cells(2, 3) <> "English" Then
    
        ufLTI.Caption = "Editar informa|fffd||fffd|es sobre o acidente"
    
        ufLTI.labelReportYM.Visible = False
        ufLTI.labelReportYM_P.Visible = True
        ufLTI.labelReportYM_P.Top = ufLTI.labelReportYM.Top
        ufLTI.labelYM.Left = ufLTI.labelReportYM_P.Left + 5 + ufLTI.labelReportYM_P.Width
        
        For i = 1 To 20
            ufLTI.Controls("commandDelete_" & Format(i, "00")).Caption = "deletar"
        Next i
        
            
        ufLTI.commandTRI0.Caption = "N|fffd|mero de acidentes = 0"
        ufLTI.commandSave.Caption = "Salvar"
        ufLTI.commandCancel.Caption = "Cancelar"
            
    End If
End Function

'***** OBSOLETE *****
Function fInit()
Dim c As Long

    fProtect (False)

'Unlock editable cells
    Range("D13:II15").Locked = False
    Range("D17:II21").Locked = False
'    Range("D23:II24").Locked = False
    Range("D53:II54").Locked = False
'    Range("D28:II28").Locked = False
    Range("D58:II58").Locked = False
    
'Format Year separation
    For c = 5 To 243
        If Cells(11, c) = 1 Then
        'month=1=January
            Range(Cells(13, c), Cells(15, c)).Borders(xlEdgeLeft).LineStyle = xlContinuous
            Range(Cells(13, c), Cells(15, c)).Borders(xlEdgeLeft).Color = RGB(128, 128, 128)
            Range(Cells(13, c), Cells(15, c)).Borders(xlEdgeLeft).TintAndShade = 0
            Range(Cells(13, c), Cells(15, c)).Borders(xlEdgeLeft).Weight = xlMedium
            
            Range(Cells(17, c), Cells(21, c)).Borders(xlEdgeLeft).LineStyle = xlContinuous
            Range(Cells(17, c), Cells(21, c)).Borders(xlEdgeLeft).Color = RGB(128, 128, 128)
            Range(Cells(17, c), Cells(21, c)).Borders(xlEdgeLeft).TintAndShade = 0
            Range(Cells(17, c), Cells(21, c)).Borders(xlEdgeLeft).Weight = xlMedium
        
'            Range(Cells(23, c), Cells(25, c)).Borders(xlEdgeLeft).LineStyle = xlContinuous
'            Range(Cells(23, c), Cells(25, c)).Borders(xlEdgeLeft).Color = RGB(128, 128, 128)
'            Range(Cells(23, c), Cells(25, c)).Borders(xlEdgeLeft).TintAndShade = 0
'            Range(Cells(23, c), Cells(25, c)).Borders(xlEdgeLeft).Weight = xlMedium
            Range(Cells(53, c), Cells(55, c)).Borders(xlEdgeLeft).LineStyle = xlContinuous
            Range(Cells(53, c), Cells(55, c)).Borders(xlEdgeLeft).Color = RGB(128, 128, 128)
            Range(Cells(53, c), Cells(55, c)).Borders(xlEdgeLeft).TintAndShade = 0
            Range(Cells(53, c), Cells(55, c)).Borders(xlEdgeLeft).Weight = xlMedium
        
'            Range(Cells(27, c), Cells(29, c)).Borders(xlEdgeLeft).LineStyle = xlContinuous
'            Range(Cells(27, c), Cells(29, c)).Borders(xlEdgeLeft).Color = RGB(128, 128, 128)
'            Range(Cells(27, c), Cells(29, c)).Borders(xlEdgeLeft).TintAndShade = 0
'            Range(Cells(27, c), Cells(29, c)).Borders(xlEdgeLeft).Weight = xlMedium
            Range(Cells(57, c), Cells(59, c)).Borders(xlEdgeLeft).LineStyle = xlContinuous
            Range(Cells(57, c), Cells(59, c)).Borders(xlEdgeLeft).Color = RGB(128, 128, 128)
            Range(Cells(57, c), Cells(59, c)).Borders(xlEdgeLeft).TintAndShade = 0
            Range(Cells(57, c), Cells(59, c)).Borders(xlEdgeLeft).Weight = xlMedium
        
        End If
    Next c
    
    
    fProtect (True)

End Function
Attribute VB_Name = "Module_Language"
Function fLanguage()
Dim c As Integer, r As Integer, sText As String, sContacts As String
    
    Unload ufContacts
    Unload ufInfo
    Unload ufInfoP
    Unload ufLTI
    
    c = 7
    Select Case Sheets("Supplier input").Range("C2")
        Case "English":   c = 6: sContacts = "Contacts"
        Case "Portugu|fffd|s": c = 7: sContacts = "Contatos"
    End Select
    
Application.ScreenUpdating = False
    fProtect (False)

'Sheet "Supplier input"
'Header
    Sheets("Supplier input").Cells(3, 2) = Sheets("LISTS").Cells(3, c)
    Sheets("Supplier input").Cells(4, 2) = Sheets("LISTS").Cells(4, c)
    Sheets("Supplier input").Cells(5, 2) = Sheets("LISTS").Cells(5, c)
    Sheets("Supplier input").Cells(6, 2) = Sheets("LISTS").Cells(6, c)
    Sheets("Supplier input").Cells(7, 2) = Sheets("LISTS").Cells(7, c)
    
'Data
    Sheets("Supplier input").Cells(13, 2) = Sheets("LISTS").Cells(13, c)
    Sheets("Supplier input").Cells(14, 2) = Sheets("LISTS").Cells(14, c)
    Sheets("Supplier input").Cells(15, 2) = Sheets("LISTS").Cells(15, c)
    
    Sheets("Supplier input").Cells(17, 2) = Sheets("LISTS").Cells(17, c)
    Sheets("Supplier input").Cells(18, 2) = Sheets("LISTS").Cells(18, c)
    Sheets("Supplier input").Cells(19, 2) = Sheets("LISTS").Cells(19, c)
    Sheets("Supplier input").Cells(20, 2) = Sheets("LISTS").Cells(20, c)
    Sheets("Supplier input").Cells(21, 2) = Sheets("LISTS").Cells(21, c)
    
    Sheets("Supplier input").Cells(23, 2) = Sheets("LISTS").Cells(23, c)
    Sheets("Supplier input").Cells(24, 2) = Sheets("LISTS").Cells(24, c)
    Sheets("Supplier input").Cells(25, 2) = Sheets("LISTS").Cells(25, c)
    
    Sheets("Supplier input").Cells(53, 2) = Sheets("LISTS").Cells(53, c)
    Sheets("Supplier input").Cells(54, 2) = Sheets("LISTS").Cells(54, c)
    Sheets("Supplier input").Cells(55, 2) = Sheets("LISTS").Cells(55, c)

    Sheets("Supplier input").Cells(57, 2) = Sheets("LISTS").Cells(57, c)
    Sheets("Supplier input").Cells(58, 2) = Sheets("LISTS").Cells(58, c)
    Sheets("Supplier input").Cells(59, 2) = Sheets("LISTS").Cells(59, c)

'Months
    For r = 1 To 12
        Sheets("Supplier input").Cells(12, 3 + r) = Sheets("LISTS").Cells(61 + r, c)
    Next r
    
    
'HSSE Contacts
    If Sheets("Supplier input").Cells(2, 3) <> "English" Then
        sText = _
            Cells(3, 5) & "                  " & Cells(3, 6) & Chr(10) & _
            Cells(4, 5) & "    " & Cells(4, 6) & Chr(10) & _
            Cells(5, 5) & "                " & Cells(5, 6) & Chr(10) & _
            Cells(6, 5) & "                     " & Cells(6, 6)
    Else
        sText = _
            Cells(3, 4) & "            " & Cells(3, 6) & Chr(10) & _
            Cells(4, 4) & "   " & Cells(4, 6) & Chr(10) & _
            Cells(5, 4) & "                " & Cells(5, 6) & Chr(10) & _
            Cells(6, 4) & "       " & Cells(6, 6)
    End If
    Sheets("Supplier input").Shapes("rectangleContacts").TextFrame2.TextRange.Characters.Text = sText
    Sheets("Supplier input").Shapes("roundedrectangleContacts").TextFrame2.TextRange.Characters.Text = sContacts
'roundedrectangleContacts 'Contatos
    
    fProtect (True)
Application.ScreenUpdating = True


End Function
Attribute VB_Name = "Module_Register_LTITRI_Info"


Function fSetUserForm(sType As String, sYM As String, n As Integer, cCol As Integer)
Dim r As Long, c As Control, i As Integer
Dim vS As Variant, vC As Variant, vA As Variant, vAKSO As Variant
'Added 30 rows
Const rStart = 61


    ufLTI.Height = 111 + 18 * n '- 1

    ufLTI.labelYM = sYM
    ufLTI.commandAdd.Top = ufLTI.Height - 50
    ufLTI.commandTRI0.Top = ufLTI.Height - 50
    ufLTI.commandSave.Top = ufLTI.Height - 50
    ufLTI.commandCancel.Top = ufLTI.Height - 50
    ufLTI.labelCOLUMN = cCol
    ufLTI.labelENTRIES = n
    
    ufLTI.labelSCAheaders.Visible = True
    If n = 0 Then
        ufLTI.labelSCAheaders.Visible = False
    End If
    
    For i = 1 To n
        ufLTI.Controls("label_" & Format(i, "00")).Visible = True
        ufLTI.Controls("combo_S" & Format(i, "00")).Visible = True
        ufLTI.Controls("combo_C" & Format(i, "00")).Visible = True
        ufLTI.Controls("combo_A" & Format(i, "00")).Visible = True
        ufLTI.Controls("check_AKSO_" & Format(i, "00")).Visible = True
        ufLTI.Controls("commandDelete_" & Format(i, "00")).Visible = True
        
        vS = Sheets("Supplier input").Cells(rStart + 1 + 4 * (i - 1), cCol)
        vC = Sheets("Supplier input").Cells(rStart + 2 + 4 * (i - 1), cCol)
        vA = Sheets("Supplier input").Cells(rStart + 3 + 4 * (i - 1), cCol)
        vAKSO = Sheets("Supplier input").Cells(rStart + 4 + 4 * (i - 1), cCol)
        
'        ufLTI.Controls("combo_S" & Format(i, "00")) = Sheets("Supplier input").Cells(31 + 1 + 4 * (i - 1), cCol)
        ufLTI.Controls("combo_S" & Format(i, "00")) = vS 'Sheets("Supplier input").Cells(rStart + 1 + 4 * (i - 1), cCol)
        ufLTI.Controls("combo_C" & Format(i, "00")) = vC 'Sheets("Supplier input").Cells(rStart + 2 + 4 * (i - 1), cCol)
        ufLTI.Controls("combo_A" & Format(i, "00")) = vA 'Sheets("Supplier input").Cells(rStart + 3 + 4 * (i - 1), cCol)
        ufLTI.Controls("check_AKSO_" & Format(i, "00")) = vAKSO 'Sheets("Supplier input").Cells(rStart + 4 + 4 * (i - 1), cCol)
    Next i


End Function
Attribute VB_Name = "Module_Tools"
Function fStartEndColumn() As Variant
Dim aA() As Variant, c As Integer
'Determine visible 12 months, based on selecte Reporting YM
'See formulas row 9 in sheet Supplier Input, if in 12 months then cell value =1, 0 otherwise
    ReDim aA(2)
    For c = 4 To 243
        If Cells(9, c) = 1 And Cells(9, c - 1) = 0 Then aA(1) = c
        If Cells(9, c) = 1 And Cells(9, c + 1) = 0 Then
            aA(2) = c
            Exit For
        End If
    Next c
    fStartEndColumn = aA
End Function

Function fProtect(bProtect As Boolean)

    Sheets("Supplier input").Select
    
    If bProtect Then
        ActiveSheet.Protect _
            DrawingObjects:=True, _
            Contents:=True, _
            Scenarios:=True, _
            AllowFormattingCells:=True
    Else
        ActiveSheet.Unprotect
    End If
End Function


Function fSetTabIndexes_ufLTI()
Dim i As Integer
    
    
    For i = 1 To 20
        ufLTI.Controls("combo_S" & Format(i, "00")).TabIndex = i * 4 - 3
        ufLTI.Controls("combo_C" & Format(i, "00")).TabIndex = i * 4 - 2
        ufLTI.Controls("combo_A" & Format(i, "00")).TabIndex = i * 4 - 1
        ufLTI.Controls("check_AKSO_" & Format(i, "00")).TabIndex = i * 4 - 0
    Next i
    'if uflti.Controls(i).name="combo_S" & format(i,"00")
End Function






'***** OBSOLETE *****
Sub ShowInfo()

    If Sheets("Supplier input").Range("C2") = "English" Then
        ufInfo.Show
        ufInfo.Left = Application.Left + 200
        ufInfo.Repaint
    Else
        ufInfoP.Show
        ufInfoP.Left = Application.Left + 200
        ufInfoP.Repaint
    End If
    
    
End Sub

Attribute VB_Name = "Module_Z_DEL_Contacts"
Sub ShowufContacts()

    If Sheets("Supplier input").Cells(2, 3) <> "English" Then
        ufContacts.Label1.Caption = "Respons|fffd|vel pelo HSSE"
        ufContacts.Label2.Caption = "E-mail do responsavel de HSSE"
        ufContacts.Label3.Caption = "Relat|fffd|rio elaborado por"
        ufContacts.Label4.Caption = "E-mail do elaborador"
    
        ufContacts.commandSave.Caption = "Salvar"
        ufContacts.commandCancel.Caption = "Cancelar"
    Else
        ufContacts.Label1.Caption = "HSSE Responsible"
        ufContacts.Label2.Caption = "E-mail"
        ufContacts.Label3.Caption = "HSSE Reporting"
        ufContacts.Label4.Caption = "E-mail"
    End If
    

    ufContacts.Left = Application.Left + 500
    ufContacts.Show
    ufContacts.Left = Application.Left + 500
    

    ufContacts.Repaint
    

End Sub
Attribute VB_Name = "Module_Z_DEL_Erase_LTITRI_Info"
Function fErase_Info(sLTIorTRI As String, nStartRow As Long, cCol1 As Integer, cCol2 As Integer)
    Select Case sLTIorTRI
        Case "LTI"
            Range(Cells(nStartRow, cCol1), Cells(75, cCol2)).ClearContents
            Range(Cells(nStartRow, cCol1), Cells(75, cCol2)).Interior.Color = RGB(235, 235, 235)
            'Range(Cells(nStartRow, cCol1), Cells(75, cCol2)).Interior.Borders = xlNone
        Case "TRI"
            Range(Cells(nStartRow, cCol1), Cells(137, cCol2)).ClearContents
            Range(Cells(nStartRow, cCol1), Cells(137, cCol2)).Interior.Color = RGB(235, 235, 235)
'            Range(Cells(nStartRow, cCol1), Cells(137, cCol2)).Interior.Borders = xlNone
    End Select
End Function
Attribute VB_Name = "Module_Z_DEL_FormatInputSheet"
Function fFormatVisibleMonths()
    
    
End Function
Attribute VB_Name = "Module_Z_DEL_Format_LTITRI_info"
Function fHideUnhide_LTI_Info()
'Only for LTI as these occur before TRI
Dim nMaxLTI As Integer
    
'    nMaxLTI = Sheets("Supplier input").Range("A30")
    nMaxLTI = Sheets("Supplier input").Range("A60")
    
    If nMaxLTI = 15 Then
    'Do nothing
    Else
'        Rows("31:75").Hidden = False
        Rows("61:75").Hidden = False
'        Rows(30 + nMaxLTI * 3 + 1 & ":75").Hidden = True
        Rows(60 + nMaxLTI * 3 + 1 & ":105").Hidden = True
    End If
    
End Function
Function fFormat_LTITRI_Info()
    fFormat_LTITRI_Area ("LTI")
    fFormat_LTITRI_Area ("TRI")
    fHideUnhide_LTI_Info
End Function
Function fFormat_LTITRI_Area(sType)
Dim rStart As Long, rEnd As Long, rValue As Long, r As Long, c As Integer
    
    Select Case sType
'        Case "LTI": rValue = 22: rStart = 31: rEnd = 75
        Case "LTI": rValue = 22: rStart = 61: rEnd = 105
'        Case "TRI": rValue = 26: rStart = 78: rEnd = 137
        Case "TRI": rValue = 56: rStart = 108: rEnd = 167
    End Select
    
'Reset
    Range(Cells(rStart, 1), Cells(rEnd, 14)).Interior.Color = RGB(235, 235, 235)
    Range(Cells(rStart, 1), Cells(rEnd, 14)).Borders(xlInsideHorizontal).LineStyle = xlNone
'Set
    For c = 3 To 14
        If Cells(rValue, c) = 0 Then
        'do nothing
        Else
            Range(Cells(rStart, c), Cells(rStart + Cells(rValue, c) * 3 - 1, c)).Interior.Color = RGB(245, 245, 245)
        End If
    Next c
    For r = rStart To rEnd
        If Cells(r, 1) = "-" Then
        'do nothing
        Else
            If Cells(r, 1) <> Cells(r + 1, 1) Then
                Range(Cells(r, 1), Cells(r, 2 + Month(Range("C5")))).Borders(xlEdgeBottom).LineStyle = xlContinuous
                Range(Cells(r, 1), Cells(r, 2 + Month(Range("C5")))).Borders(xlEdgeBottom).Color = RGB(165, 165, 165)
                Range(Cells(r, 1), Cells(r, 2 + Month(Range("C5")))).Borders(xlEdgeBottom).Weight = xlThin
            Else
                Range(Cells(r, 1), Cells(r, 2 + Month(Range("C5")))).Borders(xlEdgeBottom).LineStyle = xlContinuous
                Range(Cells(r, 1), Cells(r, 2 + Month(Range("C5")))).Borders(xlEdgeBottom).Color = RGB(220, 220, 220)
                Range(Cells(r, 1), Cells(r, 2 + Month(Range("C5")))).Borders(xlEdgeBottom).Weight = xlThin
            End If
        End If

    Next r
    
End Function
Attribute VB_Name = "Module_ufLTI_results"
Function fTRILTI_results() As Variant
Dim nTRICount As Integer, i As Integer
Dim aTRI() As Variant, sIndex As String


    ReDim aTRI(7, 21)
'1=index
'2=Severity
'3=Cause
'4=Area
'5=LTI T/F
'6=***OBSOLETE*** Delete T/F
'7=2+3+4 filled in T/F T=all three filled in, F=at least one not filled in
'Entry number x,21 is for stats
'1,21 count of incidents

'    nTRICount = 0
    aTRI(1, 21) = 0
    For i = 1 To 20 'ufLTI.Controls.Count - 1
        If Left(ufLTI.Controls(i).Name, 6) = "label_" Then
            
            sIndex = Right(ufLTI.Controls(i).Name, 2)

            aTRI(1, i) = Val(Right(ufLTI.Controls(i).Name, 2))
            aTRI(2, i) = ufLTI.Controls("combo_S" & sIndex)
            aTRI(3, i) = ufLTI.Controls("combo_C" & sIndex)
            aTRI(4, i) = ufLTI.Controls("combo_A" & sIndex)
            aTRI(5, i) = aTRI(2, i) = "Lost Time Incident"
            aTRI(6, i) = ""
            aTRI(7, i) = aTRI(2, nTRICount) <> "" And aTRI(3, nTRICount) <> "" And aTRI(4, nTRICount) <> ""
            aTRI(1, 21) = ufLTI.labelENTRIES
        End If
    Next i
    
    
    
    sText = ""
    For i = 1 To 20 'UBound(aTRI, 2)
        sText = sText & Chr(13) & _
        aTRI(1, i) & "   ---   " & _
        aTRI(2, i) & "   ---   " & _
        aTRI(3, i) & "   ---   " & _
        aTRI(4, i) & "   ---   " & _
        aTRI(5, i) & "   ---   " & _
        aTRI(6, i) & "   ---   " & _
        aTRI(7, i)
    Next i

'    MsgBox sText

    fTRILTI_results = aTRI
    
End Function
Function fTRILTI_Enable_SaveCancel() As Boolean
Dim nCount As Integer, i As Integer
Dim aTRI() As Variant, sIndex As String

    aTRI = fTRILTI_results
    nCount = 0
    fTRILTI_Enable_SaveCancel = True
    
    ufLTI.commandSave.Enabled = True
    ufLTI.commandCancel.Enabled = True
    
    
    If aTRI(1, 21) = 0 Then
        fTRILTI_Enable_SaveCancel = False
        ufLTI.commandSave.Enabled = False
        ufLTI.commandCancel.Enabled = False
    Else
        For i = 1 To aTRI(1, 21)
            If Not aTRI(7, i) Then
                fTRILTI_Enable_SaveCancel = False
                ufLTI.commandSave.Enabled = False
                ufLTI.commandCancel.Enabled = False
            End If
        Next i
    End If
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
Dim c As Integer, cMax As Integer, m As Integer
Dim w As Integer

'*** ENABLE FOR TESTS
For w = 1 To Workbooks.Count
    If Left(Workbooks(w).Name, 22) = "HSSE-VERSION-CONVERTOR" Then Exit Sub
Next w
'Exit Sub
'*** DISABLE FOR PRODUCTION!



'01. Change language
    If Target.Row = 2 And Target.Column = 3 Then
        fLanguage 'this takes care of protect/unprotect
        Exit Sub
    End If

Application.ScreenUpdating = False

'01. Change reporting Year Month
    If Target.Address = "$C$5" Then
        'c + m is column number of selected report month
        c = 12 * (Year(Cells(5, 3)) - Cells(10, 5)) + 3
        m = Month(Cells(5, 3))
        
        'Format selected report YM, which is in cell row 12 column c+m
        Range(Cells(12, 4), Cells(12, 243)).Interior.Color = RGB(0, 49, 69)
        Cells(12, c + m).Interior.Color = RGB(255, 128, 0)
        
    
        'Hide columns before and after selected YM
        'reset
fProtect (False)
        Range(Columns(4), Columns(243)).EntireColumn.Hidden = False
        Range(Columns(c + m + 1), Columns(243)).EntireColumn.Hidden = True 'Hide after
        If c + m - 12 <= 3 Then
        'do nothing
        Else
            Range(Columns(4), Columns(c + m - 12)).EntireColumn.Hidden = True 'Hide before
        End If
fProtect (True)

    

    End If

'02. Change Man hours Month; if report month, then set Rolling 12M
    If Target.Row = 14 Then
        If Cells(10, Target.Column) = Year(Cells(5, 3)) And _
            Cells(11, Target.Column) = Month(Cells(5, 3)) Then
        
            Cells(15, Target.Column) = "=sum(" & Cells(14, Target.Column - 11).Address & ":" & Cells(14, Target.Column).Address & ")"
        Else
            fCheck_Value ("Rolling MHR"), (Target.Row), (Target.Column)
        End If
    End If
'02A. Change Rolling 12M MHR; check if value is not lower than monthly figure/s
    If Target.Row = 15 Then fCheck_Value ("Rolling MHR"), (Target.Row), (Target.Column)


'03. Change Rolling 12M TRI; check if value is not lower than monthly figure/s
'    If Target.Row = 24 Then fCheck_Value ("Rolling TRI"), (Target.Row), (Target.Column)
    If Target.Row = 54 Then fCheck_Value ("Rolling TRI"), (Target.Row), (Target.Column)
'04. Change Rolling 12M TRI; check if value is not lower than monthly figure/s
'    If Target.Row = 28 Then fCheck_Value ("Rolling LTI"), (Target.Row), (Target.Column)
    If Target.Row = 58 Then fCheck_Value ("Rolling LTI"), (Target.Row), (Target.Column)
    
Application.ScreenUpdating = True


End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
Dim cStart As Integer, cEnd As Integer, c As Integer, r As Integer
Dim aC() As Variant
Dim w As Integer

'*** ENABLE FOR TESTS
For w = 1 To Workbooks.Count
    If Left(Workbooks(w).Name, 22) = "HSSE-VERSION-CONVERTOR" Then Exit Sub
Next w
'Exit Sub
'*** DISABLE FOR PRODUCTION!

    
    If Target.Cells.Count <> 1 Then
'        If Target.Row = 23 Or Target.Row = 27 Then
        If Target.Row = 53 Or Target.Row = 57 Then
'            Cells(23, Target.Column).Select 'Redirect from LTI enter to TRI enter
            Cells(53, Target.Column).Select 'Redirect from LTI enter to TRI enter
            Exit Sub 'Exit sub is needed here, otherwise rebranche occurs to target.cells.count>1!!!, leading to errormessages
        Else
            If Target.Row = 14 Then 'Manhours month
            
                'Trap the case the user dragfills the manhours month up to the reporting month
                'If so, set Rolling 12M Manhours
            
                If Cells(14, Target.Column + Target.Columns.Count - 1) <> 0 And _
                    Cells(10, Target.Column + Target.Columns.Count - 1) = Year(Cells(5, 3)) And _
                    Cells(11, Target.Column + Target.Columns.Count - 1) = Month(Cells(5, 3)) Then
                    
                    Cells(15, Target.Column + Target.Columns.Count - 1) = "=sum(" & Cells(14, Target.Column + Target.Columns.Count - 1 - 11).Address & ":" & Cells(14, Target.Column + Target.Columns.Count - 1).Address & ")"
                    
                End If
                'Cells(14, Target.Column).Select
                Exit Sub
            Else
                Exit Sub
            End If
            Exit Sub
        End If
    End If
    
    
'Start/End of visible 12 months range
    aC = fStartEndColumn
    

'*** TRI edit
'Exit logic
'    If Target.Row = 27 Then Cells(23, Target.Column).Select 'Redirect from LTI enter to TRI enter
    If Target.Row = 57 Then Cells(53, Target.Column).Select 'Redirect from LTI enter to TRI enter
'    If Target.Row <> 23 Then Exit Sub
    If Target.Row <> 53 Then Exit Sub
    If Target.Column < aC(1) Or Target.Column > aC(2) Then Exit Sub
   
    If Target.Value = "" Then
        ufLTI.labelENTRIES = 0
    Else
        ufLTI.labelENTRIES = Target.Value
    End If
    
    If ufLTI.labelENTRIES = 0 Then
    End If
    
    fSetUserForm ("TRI"), (Cells(10, Target.Column) & "." & Format(Cells(11, Target.Column), "00")), (Target.Value), (Target.Column)
    fInit_ufLTI
    ufLTI.Show
    
    fInit_ufLTI
    ufLTI.Repaint
    'ufLTI.Repaint
'    Cells(24, Target.Column).Select
    Cells(54, Target.Column).Select
    
End Sub


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

    Sheets("Supplier input").Shapes("rectangleContacts").Placement = xlFreeFloating
    Sheets("Supplier input").Shapes("rectangleContactsHeader").Placement = xlFreeFloating
    Sheets("Supplier input").Shapes("logoAKSO").Placement = xlFreeFloating
    Sheets("Supplier input").Shapes("ovalInfo").Placement = xlFreeFloating
    Sheets("Supplier input").Shapes("roundedrectangleContacts").Placement = xlFreeFloating

    fProtect (True)
    
    Sheets("Supplier input").Cells(5, 3).Select
    
End Sub
Attribute VB_Name = "ufContacts"
Attribute VB_Base = "0{C8E45E9F-8F6B-4D97-872E-CC27F940A7ED}{A1FB148B-6272-46DC-B5DA-B6C314F4BDAC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub commandCancel_Click()
    Unload Me
End Sub

Private Sub commandSave_Click()
Dim sText As String



    Sheets("Supplier input").Cells(3, 6) = Me.textHSSEResp
    Sheets("Supplier input").Cells(4, 6) = Me.textHSSERespMail
    Sheets("Supplier input").Cells(5, 6) = Me.textHSSERepResp
    Sheets("Supplier input").Cells(6, 6) = Me.textHSSERepRespMail

    If Sheets("Supplier input").Cells(2, 3) <> "English" Then
        sText = _
            Cells(3, 5) & "                  " & Cells(3, 6) & Chr(10) & _
            Cells(4, 5) & "    " & Cells(4, 6) & Chr(10) & _
            Cells(5, 5) & "                " & Cells(5, 6) & Chr(10) & _
            Cells(6, 5) & "                     " & Cells(6, 6)
    Else
        sText = _
            Cells(3, 4) & "            " & Cells(3, 6) & Chr(10) & _
            Cells(4, 4) & "   " & Cells(4, 6) & Chr(10) & _
            Cells(5, 4) & "                " & Cells(5, 6) & Chr(10) & _
            Cells(6, 4) & "       " & Cells(6, 6)
    End If
    
'Application.ScreenUpdating = False
fProtect (False)
    Sheets("Supplier input").Shapes("rectangleContacts").TextFrame2.TextRange.Characters.Text = sText
fProtect (True)
Application.ScreenUpdating = True
    Unload Me
End Sub



Private Sub UserForm_Initialize()
    
    Me.textHSSEResp = Sheets("Supplier input").Cells(3, 6)
    Me.textHSSERespMail = Sheets("Supplier input").Cells(4, 6)
    Me.textHSSERepResp = Sheets("Supplier input").Cells(5, 6)
    Me.textHSSERepRespMail = Sheets("Supplier input").Cells(6, 6)
    Me.Left = Application.Left + 200



End Sub
Attribute VB_Name = "ufInfo"
Attribute VB_Base = "0{DCA5C923-82C9-4A21-88B4-66CB494D0CCB}{0215A1FE-8FAC-4DCA-81F5-1F66FD2ACBD5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "ufInfoP"
Attribute VB_Base = "0{4361B25B-1506-480C-98E7-BCE48D385A70}{3BAC35F4-EF08-45D8-9110-1B598186AF27}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "ufLTI"
Attribute VB_Base = "0{F141A3F0-0DEF-4715-82E0-9F380779F0B4}{1C839BB2-A53F-4AC6-BBDA-76548D8177E8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'***FORM
Private Sub UserForm_Initialize()
Dim i As Integer
'    Me.labelSCAheaders.Visible = True
'    If Me.labelENTRIES = 0 Then
'        ufLTI.labelSCAheaders.Visible = False
'    End If
    Me.Left = Application.Left + 150
    fSetTabIndexes_ufLTI
    
    If Sheets("Supplier input").Cells(2, 3) <> "English" Then
        For i = 1 To 20
            Me.Controls("combo_S" & Format(i, "00")).RowSource = "LISTS!P_Severity"
            Me.Controls("combo_C" & Format(i, "00")).RowSource = "LISTS!P_Cause"
            Me.Controls("combo_A" & Format(i, "00")).RowSource = "LISTS!P_AffectedArea"
        Next i
        

    End If
    
    
    Me.Repaint
    
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'User clicked Close button: white X on red button, top right
    If CloseMode = vbFormControlMenu Then
'        MsgBox "Click Save or Cancel"
        Cancel = True
    End If
End Sub

'*** BUTTONS
Private Sub commandAdd_Click()
'Make controls visible for additional incident
Dim nTRICount As Integer, i As Integer, c As Integer
Dim aTRI() As Variant, sIndex As String
    
    If Sheets("Supplier input").Cells(2, 3) = "English" Then
        Me.labelSCAheaders.Visible = True
    Else
        Me.labelSCAheaders_P.Visible = True
        Me.labelSCAheaders_P.Top = Me.labelSCAheaders.Top
    End If
    
    If Me.labelENTRIES = 20 Then
        MsgBox "You reached the maximum number of TRIs (20) that can be registered"
        Exit Sub
    Else
    
        Me.labelENTRIES = Me.labelENTRIES + 1
        
        Me.Height = 111 + 18 * Me.labelENTRIES + 18
        Me.commandAdd.Top = Me.Height - 50
        Me.commandTRI0.Top = Me.Height - 50
        Me.commandSave.Top = Me.Height - 50
        Me.commandCancel.Top = Me.Height - 50
    
        For c = 1 To Me.labelENTRIES
            Me.Controls("label_" & Format(c, "00")).Visible = True
            Me.Controls("combo_S" & Format(c, "00")).Visible = True
            Me.Controls("combo_C" & Format(c, "00")).Visible = True
            Me.Controls("combo_A" & Format(c, "00")).Visible = True
            Me.Controls("check_AKSO_" & Format(c, "00")).Visible = True
            Me.Controls("commandDelete_" & Format(c, "00")).Visible = True
        Next c
        
        fCheckForSaveCancel
        Me.Repaint
        
    End If
    
End Sub
Private Sub commandTRI0_Click()
'Delete all entries, set TRI to 0
Dim nCount As Variant, i As Integer, vAns As Variant, sText As String

    sText = ""
    nCount = 0
    
    For i = 1 To Me.labelENTRIES
        If Me.Controls("combo_S" & Format(i, "00")) <> "" Or _
            Me.Controls("combo_C" & Format(i, "00")) <> "" Or _
            Me.Controls("combo_A" & Format(i, "00")) <> "" Then
            nCount = nCount + 1
        End If
    Next i
    
    If nCount <> 0 Then
        If Sheets("Supplier input").Cells(2, 3) <> "English" Then
            sText = "Registro de incidentes" & Chr(13) & Chr(13) & _
                        "Clique em OK para excluir todos os registros e defina TRI como 0" & Chr(13) & _
                        "Clique em Cancelar para retornar |fffd| tela de Editar informa|fffd||fffd|o de incidente"
        Else
            sText = "Entries for incidents found" & Chr(13) & Chr(13) & _
                        "Click OK to delete all entries and set TRI to 0" & Chr(13) & _
                        "Click Cancel to return to the Edit incident information screen"
        End If
        vAns = MsgBox(sText, vbExclamation + vbOKCancel)
        If vAns = vbCancel Then
            Exit Sub
        End If
    End If
    
    Me.labelENTRIES = 0
    commandSave_Click
    
    
End Sub

Private Sub commandCancel_Click()
Dim vbAns As Variant, nCheck As Integer
            
'    fHideUnhide_LTI_Info
'    Cells(23 + 1, Me.labelCOLUMN).Select
    Cells(53 + 1, Me.labelCOLUMN).Select
    Unload Me
        
End Sub

Private Sub commandSave_Click()
'NOTE: commandTRI0_Click calls this routine to remove the entries
Dim r As Integer, nLTI As Integer, c As Integer
Dim nRollingColumnStart As Integer

'Added 30 rows for possible changes
'Const rStart = 31
Const rStart = 61
Const rLast = 141


Application.ScreenUpdating = False

    c = Me.labelCOLUMN

'Reset
    'Format
    Range(Cells(rStart + 1, c), Cells(rLast, c)).Interior.Color = RGB(235, 235, 235)
    'Remove all entries in TRI info area (from row 32 down)
    Range(Cells(rStart + 1, c), Cells(rLast, c)).ClearContents

'Store number of TRI
'    Cells(23, Me.labelCOLUMN) = Val(Me.labelENTRIES)
    Cells(53, Me.labelCOLUMN) = Val(Me.labelENTRIES)
    
    nLTI = 0
    For r = 1 To Me.labelENTRIES
        Cells(rStart + 1 + 4 * (r - 1), Me.labelCOLUMN) = Me.Controls("combo_S" & Format(r, "00"))
        Cells(rStart + 2 + 4 * (r - 1), Me.labelCOLUMN) = Me.Controls("combo_C" & Format(r, "00"))
        Cells(rStart + 3 + 4 * (r - 1), Me.labelCOLUMN) = Me.Controls("combo_A" & Format(r, "00"))
        Cells(rStart + 4 + 4 * (r - 1), Me.labelCOLUMN) = Me.Controls("check_AKSO_" & Format(r, "00"))
        
'Because of need for language choice, the entries now consists of two columns
'Hence need to validate on .ListIndex
'        If Me.Controls("combo_S" & Format(r, "00")) = "Lost Time Incident" Then
        If Me.Controls("combo_S" & Format(r, "00")).ListIndex = 1 Then
            nLTI = nLTI + 1
            Cells(rStart + 1 + 4 * (r - 1), Me.labelCOLUMN).Interior.Color = RGB(255, 200, 200)
        Else
            Cells(rStart + 1 + 4 * (r - 1), Me.labelCOLUMN).Interior.Color = RGB(240, 240, 240)
        End If
        
        Cells(rStart + 2 + 4 * (r - 1), Me.labelCOLUMN).Interior.Color = RGB(240, 240, 240)
        Cells(rStart + 3 + 4 * (r - 1), Me.labelCOLUMN).Interior.Color = RGB(240, 240, 240)
        Cells(rStart + 4 + 4 * (r - 1), Me.labelCOLUMN).Interior.Color = RGB(240, 240, 240)
    Next r
    
'Store number of LTI
'    Cells(27, Me.labelCOLUMN) = nLTI
    Cells(57, Me.labelCOLUMN) = nLTI

'Store formula for rolling 12 months TRI/LTI
'OBSOLETE ***ONLY FOR SELECTED REPORT MONTH!!!***
'As of V2019 for any month
'    If Year(Cells(5, 3)) = Cells(10, Me.labelCOLUMN) And Month(Cells(5, 3)) = Cells(11, Me.labelCOLUMN) Then
    
    nRollingColumnStart = Me.labelCOLUMN - 11
    If nColumn < 4 Then nColumn = 4
    'Rolling TRI
    Cells(54, Me.labelCOLUMN) = "=sum(" & Range(Cells(53, nRollingColumnStart), Cells(53, Me.labelCOLUMN)).Address & ")"
    'Rolling LTI
    Cells(58, Me.labelCOLUMN) = "=sum(" & Range(Cells(57, nRollingColumnStart), Cells(57, Me.labelCOLUMN)).Address & ")"
    
    fIgnoreError (Cells(54, Me.labelCOLUMN).Address)
    fIgnoreError (Cells(58, Me.labelCOLUMN).Address)

'    End If

'Hide TRIs out of range (not in 12 months range)
'*** We decided to hide ALL TRIs, always
'    Rows("32:91").Hidden = True 'if restored, add 30!
    'Rows("32:" & 32 + 3 * Cells(31, 1) - 1).Hidden = False
    'Cells(23 + 1, c).Select
    
    fCheck_Value ("Rolling TRI"), (54), c '(24), (c)
    fCheck_Value ("Rolling LTI"), (58), c '(28), (c)
    
Application.ScreenUpdating = True
    
    Unload Me

End Sub
Function fIgnoreError(sR As String)
'adding formulas might lead to incell errors (the green triangle)
'this function ignores errors of type 6 and 7
On Error Resume Next

    If Range(sR).Errors(6).Value Then Range(sR).Errors(6).Ignore = True
    If Range(sR).Errors(7).Value Then Range(sR).Errors(7).Ignore = True

End Function



Function fCheckForSaveCancel()
Dim i As Integer
    Me.commandCancel.Enabled = True
    Me.commandSave.Enabled = True
    
    

    If Me.labelENTRIES = 0 Then
'        Me.commandCancel.Enabled = False
        Me.commandSave.Enabled = False
    Else
        For i = 1 To Me.labelENTRIES
        
'Because of need for language choice, the entries now consists of two columns
'Hence need to validate on .ListIndex
'            If Me.Controls("combo_S" & Format(i, "00")) = "" Or _
'                Me.Controls("combo_C" & Format(i, "00")) = "" Or _
'                Me.Controls("combo_A" & Format(i, "00")) = "" Then
            If Me.Controls("combo_S" & Format(i, "00")).ListIndex = -1 Or _
                Me.Controls("combo_C" & Format(i, "00")).ListIndex = -1 Or _
                Me.Controls("combo_A" & Format(i, "00")).ListIndex = -1 Then
                
'                Me.commandCancel.Enabled = False
                Me.commandSave.Enabled = False
'                fColorLTI (i)
                
            End If
        Next i
    End If
    fRepainting_LTIs
    Me.Repaint
End Function
Function fColorLTI(i As Integer)
    Me.Controls("combo_S" & Format(i, "00")).BackColor = RGB(255, 255, 255)
    If Me.Controls("combo_S" & Format(i, "00")) = "Lost Time Incident" Then
        Me.Controls("combo_S" & Format(i, "00")).BackColor = RGB(255, 228, 228)
    End If
End Function
Private Sub combo_S01_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C01_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A01_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S02_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C02_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A02_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S03_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C03_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A03_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S04_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C04_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A04_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S05_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C05_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A05_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S06_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C06_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A06_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S07_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C07_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A07_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S08_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C08_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A08_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S09_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C09_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A09_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S10_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C10_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A10_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S11_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C11_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A11_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S12_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C12_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A12_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S13_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C13_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A13_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S14_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C14_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A14_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S15_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C15_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A15_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S16_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C16_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A16_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S17_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C17_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A17_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S18_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C18_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A18_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S19_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C19_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A19_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_S20_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_C20_Change()
    fCheckForSaveCancel
End Sub
Private Sub combo_A20_Change()
    fCheckForSaveCancel
End Sub





Function fDeleteInfo(i As Integer)
Dim n As Integer, vS As Variant, vC As Variant, vA As Variant, vAKSO As Variant

'On Error GoTo LABEL_ERROR

'This must be set here for triggering enabling SaveCancel
    Me.labelENTRIES = Val(Me.labelENTRIES) - 1
    
    If Me.labelENTRIES = 0 Then Me.labelSCAheaders.Visible = False
    
    For n = i To Me.labelENTRIES + 1
        If n = Me.labelENTRIES + 1 Then
            Me.Controls("combo_S" & Format(n, "00")) = ""
            Me.Controls("combo_C" & Format(n, "00")) = ""
            Me.Controls("combo_A" & Format(n, "00")) = ""
            Me.Controls("check_AKSO_" & Format(n, "00")) = False
                
            Me.Controls("label_" & Format(n, "00")).Visible = False
            Me.Controls("combo_S" & Format(n, "00")).Visible = False
            Me.Controls("combo_C" & Format(n, "00")).Visible = False
            Me.Controls("combo_A" & Format(n, "00")).Visible = False
            Me.Controls("check_AKSO_" & Format(n, "00")).Visible = False
            Me.Controls("commandDelete_" & Format(n, "00")).Visible = False
        Else
'*** THIS GENREATES AN ERROR
'            Me.Controls("combo_S" & Format(n, "00")) = Me.Controls("combo_S" & Format(n + 1, "00"))
'*** Solved as below, assign vakue to variable, assigne variable to combobox
            vS = Me.Controls("combo_S" & Format(n + 1, "00"))
            Me.Controls("combo_S" & Format(n, "00")) = vS
            vC = Me.Controls("combo_C" & Format(n + 1, "00"))
            Me.Controls("combo_C" & Format(n, "00")) = vC
            vA = Me.Controls("combo_A" & Format(n + 1, "00"))
            Me.Controls("combo_A" & Format(n, "00")) = vA
            vAKSO = Me.Controls("check_AKSO_" & Format(n + 1, "00"))
            Me.Controls("check_AKSO_" & Format(n, "00")) = vAKSO
        End If
    Next n
    
    ufLTI.Height = 111 + 18 * Me.labelENTRIES
    ufLTI.commandAdd.Top = ufLTI.Height - 50
    ufLTI.commandTRI0.Top = ufLTI.Height - 50
    ufLTI.commandSave.Top = ufLTI.Height - 50
    ufLTI.commandCancel.Top = ufLTI.Height - 50
    fRepainting_LTIs
    Me.Repaint
    
    
Exit Function
LABEL_ERROR:
    MsgBox Err & "-" & Error(Err) & Chr(13) & sSource
            MsgBox Me.Controls("combo_S" & Format(n, "00")) = Me.Controls("combo_S" & Format(n + 1, "00"))
            MsgBox Me.Controls("combo_C" & Format(n, "00")) = Me.Controls("combo_C" & Format(n + 1, "00"))
            MsgBox Me.Controls("combo_A" & Format(n, "00")) = Me.Controls("combo_A" & Format(n + 1, "00"))
    
    MsgBox n
    MsgBox Me.labelENTRIES
    
    
End Function
Private Sub commandDelete_01_Click()
    fDeleteInfo Val(Right((Me.commandDelete_01.Name), 2))
End Sub
Private Sub commandDelete_02_Click()
    fDeleteInfo Val(Right((Me.commandDelete_02.Name), 2))
End Sub
Private Sub commandDelete_03_Click()
    fDeleteInfo Val(Right((Me.commandDelete_03.Name), 2))
End Sub
Private Sub commandDelete_04_Click()
    fDeleteInfo Val(Right((Me.commandDelete_04.Name), 2))
End Sub
Private Sub commandDelete_05_Click()
    fDeleteInfo Val(Right((Me.commandDelete_05.Name), 2))
End Sub
Private Sub commandDelete_06_Click()
    fDeleteInfo Val(Right((Me.commandDelete_06.Name), 2))
End Sub
Private Sub commandDelete_07_Click()
    fDeleteInfo Val(Right((Me.commandDelete_07.Name), 2))
End Sub
Private Sub commandDelete_08_Click()
    fDeleteInfo Val(Right((Me.commandDelete_08.Name), 2))
End Sub
Private Sub commandDelete_09_Click()
    fDeleteInfo Val(Right((Me.commandDelete_09.Name), 2))
End Sub
Private Sub commandDelete_10_Click()
    fDeleteInfo Val(Right((Me.commandDelete_10.Name), 2))
End Sub
Private Sub commandDelete_11_Click()
    fDeleteInfo Val(Right((Me.commandDelete_11.Name), 2))
End Sub
Private Sub commandDelete_12_Click()
    fDeleteInfo Val(Right((Me.commandDelete_12.Name), 2))
End Sub
Private Sub commandDelete_13_Click()
    fDeleteInfo Val(Right((Me.commandDelete_13.Name), 2))
End Sub
Private Sub commandDelete_14_Click()
    fDeleteInfo Val(Right((Me.commandDelete_14.Name), 2))
End Sub
Private Sub commandDelete_15_Click()
    fDeleteInfo Val(Right((Me.commandDelete_15.Name), 2))
End Sub
Private Sub commandDelete_16_Click()
    fDeleteInfo Val(Right((Me.commandDelete_16.Name), 2))
End Sub
Private Sub commandDelete_17_Click()
    fDeleteInfo Val(Right((Me.commandDelete_17.Name), 2))
End Sub
Private Sub commandDelete_18_Click()
    fDeleteInfo Val(Right((Me.commandDelete_18.Name), 2))
End Sub
Private Sub commandDelete_19_Click()
    fDeleteInfo Val(Right((Me.commandDelete_19.Name), 2))
End Sub
Private Sub commandDelete_20_Click()
    fDeleteInfo Val(Right((Me.commandDelete_20.Name), 2))
End Sub

Function fRepainting_LTIs()
Dim i As Integer
    For i = 1 To 20
        Me.Controls("combo_S" & Format(i, "00")).BackColor = RGB(255, 255, 255)
        If Me.Controls("combo_S" & Format(i, "00")) = "Lost Time Incident" Then Me.Controls("combo_S" & Format(i, "00")).BackColor = RGB(255, 200, 200)
    Next i
End Function
Attribute VB_Name = "ufMessage"
Attribute VB_Base = "0{12B1BF63-AC0E-42A3-A21E-18F93DC6F431}{391ACDAD-318B-413F-B9F8-610093D7FA15}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' InQuest injected base64 decoded content
' -jx%x*'

INQUEST-PP=macro
