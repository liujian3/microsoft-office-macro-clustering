Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforePrint(Cancel As Boolean)

    Dim ws As Worksheet

    For Each ws In ThisWorkbook.Sheets

        If ws.Visible = xlSheetVisible Then

            Call setPA_CONFIG_FOR_SHEET(ws)

        End If


    Next ws
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Dim ws As Worksheet
    If skipBeforeSaveCheck Then GoTo ex
    Call cmdHideConfig

    For Each ws In ThisWorkbook.Sheets

        If ws.Visible = xlSheetVisible Then

            Call setPA_CONFIG_FOR_SHEET(ws)

        End If


    Next ws
ex:
End Sub
Private Sub Workbook_Open()
'Call SaveMeAsOwnCopy

    Call cmdHideConfig
End Sub
'Private Sub Workbook_BeforePrint(Cancel As Boolean)
'     Dim i As Integer
'     Dim z As Integer
'     Dim v As Integer
'     Dim c As Range
'     Dim ws As Worksheet
'     Dim str As String
'
'     z = 0
'
'     Set ws = ActiveWorkbook.Worksheets(2)
'
'     If ActiveSheet.Name = ws.Name Then
'        For i = 1 To 15
'           v = ws.Cells(Rows.Count, i).End(xlUp).Row
'           If v > z Then
'               z = v
'           End If
'        Next i
'
'        str = "$A$1:$O$" & z
'
'        ws.PageSetup.PrintArea = str
'     End If
'End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
'
'    If Target.Row < 8 Then Exit Sub
'
'    If Target.Column <> 3 Then Exit Sub
'
'    Dim lr&
'On Error Resume Next
'    lr = Range("C" & Cells.Rows.Count).End(xlUp).Row
'
'    SET_PRINT_AREA ActiveSheet, lastCol:="R", lastrow:=lr
'
    Call setPA_CONFIG_FOR_SHEET



End Sub

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "langCB, 33, 2, MSForms, ComboBox"
Attribute VB_Control = "statusCB, 50, 3, MSForms, ComboBox"
Option Explicit
'
'Public Sub Worksheet_Change(ByVal Target As Range)
'
'Dim cRow As Integer
'Dim myRange As Range
'Dim z As Integer
'
'Dim OptionButton1 As Variant
'Dim OptionButton2 As Variant
'Dim OptionButton3 As Variant
'
'If Target.Row > 8 And (Target.Column = 1 Or Target.Column = 3) And OptionButton3.Value = True Then
'    If Target.Columns.Count = 1 Then
'        If Target.Count = 1 Then
'            If Target.Value > "" Then
'               Cells(Target.Row, 2) = "B"
'            End If
'        Else
'            For z = 1 To Target.Count
'                Cells(Target.Row + z - 1, 2) = "B"
'            Next z
'        End If
'    End If
'End If
'
'If Target.Row > 8 And (Target.Column = 1 Or Target.Column = 3) And (OptionButton2.Value = True Or OptionButton1.Value = True) Then
'    If Target.Columns.Count = 1 Then
'        If Target.Count = 1 Then
'            If Target.Value > "" Then
'                Cells(Target.Row, 2) = "K"
'            End If
'        Else
'            For z = 1 To Target.Count
'                Cells(Target.Row + z - 1, 2) = "K"
'            Next z
'        End If
'    End If
'End If
'
'End Sub

'Public Sub Insert_Row()
'    Range("A34:L34").Select
'    Selection.EntireRow.Insert Shift:=xlUp
'End Sub

Public Sub Delete_Row()
    On Error Resume Next

    Dim ws As Worksheet
    Dim str As String
    Dim zC As Integer



    Set ws = ActiveSheet

    ws.Unprotect "helloworld"

    zC = ActiveSheet.Cells(Rows.Count, 1).End(xlUp).Row - 1

    If zC > 34 Then
        str = "A" & zC & ":Q" & zC
        Range(str).Select
        Selection.EntireRow.Delete

        zC = zC - 1
        str = "A" & zC & ":Q" & zC
        Range(str).Select
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = xlAutomatic
        End With
    Else
        MsgBox "Row not deleted."
        ws.Protect "helloworld", , , , , , , , True, , , True
        Exit Sub
    End If
    Call setPA_CONFIG_FOR_SHEET(ws)
    ws.Protect "helloworld", , , , , , , , True, , , True

End Sub

Public Sub ShowDialog()
    UserForm1.Show
End Sub


Private Sub langCB_Change()
'Call Sub LangSwitch mit dem Listenindex als Parameter
    Call mdllang.langswitch(langCB.ListIndex + 1)
End Sub



Private Sub statusCB_Change()

End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{27636772-F3E8-4F79-A262-BF35B7C3782E}{6861AA45-F47E-4200-B541-2AACB2A9DACB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    Dim str As String
    Dim i As Integer

    On Error GoTo MyError

    str = TextBox1.Text

    If str > 0 And str < 100 Then
        While i < str
            Insert_Row
            i = i + 1
        Wend

        UserForm1.Hide
    End If

    Exit Sub

MyError:
    MsgBox "Please enter a value between 1 and 100!"
End Sub

Private Sub CommandButton2_Click()
    UserForm1.Hide
End Sub

Public Sub Insert_Row()

    On Error GoTo MyError
    Dim ws As Worksheet
    Dim zC As Integer
    Dim str As String

    Set ws = ActiveSheet

    ws.Unprotect "helloworld"

    zC = ActiveSheet.Cells(Rows.Count, 1).End(xlUp).Row - 1
    str = "A" & zC & ":Q" & zC

    Range(str).Select

    'Kopiere altes Excel Objekt
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlNone
    End With

    Selection.EntireRow.Copy
    Selection.EntireRow.Insert

    zC = ActiveSheet.Cells(Rows.Count, 1).End(xlUp).Row - 1

    str = "A" & zC & ":Q" & zC

    Range(str).Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
    End With

    'Column A
    str = "A" & zC & ":A" & zC
    Range(str).Select
    Selection.ClearContents
    'Column B
    str = "A" & zC & ":A" & zC
    Range(str).Select
    Selection.ClearContents
    'Column C - L
    str = "M" & zC & ":Q" & zC
    Range(str).Select
    Selection.ClearContents
    On Error Resume Next

    Call setPA_CONFIG_FOR_SHEET(ws)
    ws.Protect "helloworld", , , , , , , , True, , , True


    Exit Sub

MyError:
    MsgBox Err.Description
End Sub

Attribute VB_Name = "mdl_Excel_SetPrintArea"


Public Sub SET_PRINT_AREA(sheet_x As Worksheet, _
                          Optional ByVal firstCol As String = "A", _
                          Optional ByVal firstRow As Long = 1, _
                          Optional ByVal lastCol As String = "", _
                          Optional ByVal lastrow As Long = 0, _
                          Optional ByVal HeaderRowsStart As Long = 0, _
                          Optional ByVal HeaderRowsEnd As Long = 0, _
                          Optional ByVal ProjectInfoStart As Long = 0, _
                          Optional ByVal ProjectInfoEnd As Long = 0)


    Dim ur As String
    Dim urx As Variant

    If HeaderRowsStart = 0 Then
        HeaderRowsStart = firstRow - IIf(firstRow >= 1, 1, 0)

    End If
    If HeaderRowsEnd = 0 Then
        HeaderRowsEnd = HeaderRowsStart
    End If

    Dim myprinttitlerows$
    myprinttitlerows = "$<start>:$<end>"

    myprinttitlerows = Replace(myprinttitlerows, "<start>", HeaderRowsStart)
    myprinttitlerows = Replace(myprinttitlerows, "<end>", HeaderRowsEnd)

    If ProjectInfoStart > 0 Then
        firstRow = ProjectInfoStart
    End If



    'Wenn letzte Spalte und letzte Zeile NICHT vorgegeben wurde

    If lastCol = "" And lastrow = 0 Then
        With sheet_x

            .PageSetup.PrintArea = "" & .UsedRange.Address
            .PageSetup.printtitlerows = myprinttitlerows

        End With

    End If

    'Wenn nur die letzte Zeile vorgegeben wurde
    If lastCol = "" And lastrow <> 0 Then
        ur = sheet_x.UsedRange.Address
        urx = Split(ur, ":")
        firstCol = Left(urx(0), 1)

        lastCol = Split(Mid(urx(1), 2), "$")(0)
        ur = "$" & firstCol & "$" & firstRow & ":$" & lastCol & "$" & lastrow
        With sheet_x

            .PageSetup.PrintArea = "" & ur
            .PageSetup.printtitlerows = myprinttitlerows

        End With

    End If


    'Wenn nur die letzte Spalte vorgegeben wurde
    If lastCol <> "" And lastrow = 0 Then
        ur = sheet_x.UsedRange.Address
        urx = Split(ur, ":")

        lastrow = Split(Mid(urx(1), 2), "$")(1)
        ur = "$" & firstCol & "$" & firstRow & ":$" & lastCol & "$" & lastrow
        With sheet_x

            .PageSetup.PrintArea = "" & ur
            .PageSetup.printtitlerows = myprinttitlerows

        End With

    End If



    'Wenn letzte Spalte und letzte Zeile vorgegeben wurde
    If lastCol <> "" And lastrow <> 0 Then


        ur = "$" & firstCol & "$" & firstRow & ":$" & lastCol & "$" & lastrow
        With sheet_x

            .PageSetup.PrintArea = "" & ur
            .PageSetup.printtitlerows = myprinttitlerows

        End With

    End If


End Sub
Attribute VB_Name = "mdl_MPL_DPL_PRINTAREA"
Option Explicit

Public skipBeforeSaveCheck As Boolean
Public saved_as As Boolean
Public Declare Function MakeSureDirectoryPathExists Lib "imagehlp.dll" ( _
                                                    ByVal lpPath As String) As Long

Private Const prot_PW As String = "helloworld"


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ******************************************************** '
' * Section: Public Functions                            * '
' ******************************************************** '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub CmdShowConfig()
    Call checkConfigurationDisplay(True)

End Sub
Public Sub SaveMeAsOwnCopy()

    If saved_as Then Exit Sub

    Dim fn As String, _
        fn_n As String

    Dim dirx As String

    dirx = "C:\TEMP\myMPL_DPL_COPIES\" & Format(Date, "YYYY-MM-DD") & "\"
    fn = ThisWorkbook.Name

    fn_n = Replace(fn, ".xlsm", "_" & Format(Now, "YYYY-MM-DD hh-nn-ss") & ".xlsm")
    If MakeSureDirectoryPathExists(dirx) Then
        skipBeforeSaveCheck = True
        ThisWorkbook.SaveAs dirx & fn_n
        If ThisWorkbook.Saved Then GoTo succ

    Else
        skipBeforeSaveCheck = False
        Exit Sub
    End If
succ:
    skipBeforeSaveCheck = False
    saved_as = True

End Sub
Public Sub cmdHideConfig()
    Dim cs As Worksheet
    Dim myPaConfig As New Dictionary
    Dim sht As Worksheet
    Dim shtnm As String

    Set cs = Sheets("CONFIG.SYS")

    If ThisWorkbook.ProtectStructure Then
        ThisWorkbook.Unprotect prot_PW
    End If

    Set myPaConfig = getPA_CONFIG_SHORT()("MPL")

    shtnm = myPaConfig("SHEET_NAME")
    Set sht = ThisWorkbook.Sheets(shtnm)
    sht.Activate

    cs.Visible = xlSheetVeryHidden

    ThisWorkbook.Protect prot_PW, True

    ThisWorkbook.Save
End Sub
Public Function checkConfigurationDisplay(Optional ByVal ShowAlert As Boolean = False)
    On Error Resume Next
    Dim cs As Worksheet

    Set cs = Sheets("CONFIG.SYS")

    If ThisWorkbook.ProtectStructure Then
        ThisWorkbook.Unprotect prot_PW
    End If
    If checkCONFIG_AUTH() Then
        cs.Visible = xlSheetVisible
        cs.Activate
    Else
        cs.Visible = xlSheetVeryHidden
        If ShowAlert Then
            MsgBox "You are not allowed to configure this application!", vbCritical + vbOKOnly + vbSystemModal, "No Authorization"

        End If
    End If



    ThisWorkbook.Protect prot_PW, True

End Function
Public Sub setPA_FOR_SHORT_NAME(ByVal shortname As String)
    Dim myPaConfig As New Dictionary
    Dim sht As Worksheet
    Dim shtnm As String

    Set myPaConfig = getPA_CONFIG_SHORT()(shortname)

    shtnm = myPaConfig("SHEET_NAME")
    Set sht = ThisWorkbook.Sheets(shtnm)

    Call setPA_CONFIG_FOR_SHEET(sht)


End Sub
Public Function setPA_CONFIG_FOR_SHEET(Optional cur_sheet As Worksheet)
    Dim myPaConfig As Dictionary

    Dim curSheetNm As String
    Dim lastrow As Long
    If cur_sheet Is Nothing Then
        Set cur_sheet = ActiveSheet
    End If

    curSheetNm = cur_sheet.Name

    Set myPaConfig = getPA_CONFIG()
    If Not myPaConfig.Exists(curSheetNm) Then Exit Function

    Set myPaConfig = myPaConfig(curSheetNm)

    lastrow = getLastRowInSheet( _
              cur_sheet, _
              myPaConfig("DATA_START_ROW"), _
              myPaConfig("INDEX_FIELD"), _
              CBool(myPaConfig("LINE_OF_SUM")) = False, _
              CLng(myPaConfig("LINE_OF_SUM")))


    If IsNumeric(myPaConfig("LINE_OF_SUM")) And myPaConfig("LINE_OF_SUM") > 0 Then
        ' Wenn LINE OF SUM existiert also nicht false ist soll _
          gepr|fffd|ft werden ob dieser Wert h|fffd|her ist als die _
          ermittelte letzte Zeile
        If myPaConfig("LINE_OF_SUM") > lastrow Then
            lastrow = myPaConfig("LINE_OF_SUM")

        End If


    End If
    Call mdl_Excel_SetPrintArea.SET_PRINT_AREA( _
         cur_sheet, _
         myPaConfig("FIRST_COLUMN"), _
         myPaConfig("DATA_START_ROW"), _
         myPaConfig("LAST_COLUMN"), _
         lastrow, _
         myPaConfig("HEADER_ROWS_START"), _
         myPaConfig("HEADER_ROWS_END"), _
         myPaConfig("PROJECT_INFO_START"), _
         myPaConfig("PROJECT_INFO_END") _
       )

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ******************************************************** '
' * Section: Private Functions                           * '
' ******************************************************** '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private Function getLastRowInSheet( _
        ByRef refsheet As Worksheet, _
        ByVal start_row As Long, _
        ByVal index_col As String, _
        ByVal reverseSearch As Boolean, _
        ByVal sumrow As Long) As Long

    Dim i As Long

    If reverseSearch Then
        i = refsheet.Range(index_col & refsheet.Rows.Count).End(xlUp).Row

    Else
        i = refsheet.Range(index_col & sumrow).End(xlUp).Row
        '
        '        i = start_row
        '
        '        Do Until refsheet.Range(index_col & i).Value = ""
        '            DoEvents
        '
        '            i = i + 1
        '        Loop
        '
        '        If refsheet.Range(index_col & i).Value = "" Then
        '            i = i - 1
        '        End If


    End If
    getLastRowInSheet = i
End Function

Private Function checkCONFIG_AUTH() As Boolean

    Dim UID As String
    Dim check_auth As Boolean
    UID = LCase(Environ$("username"))
    check_auth = getAUTH_CONFIG.Exists(UID)



    checkCONFIG_AUTH = check_auth


End Function

Private Function getAUTH_CONFIG() As Dictionary
    Dim myPaConfig As New Dictionary
    Const pa_config As String = "CONFIG_USERS"

    Dim r As Range
    Dim c As Range
    Dim UID As String
    Dim cs As Worksheet
    Set cs = Sheets("CONFIG.SYS")
    Dim row_idx As Range
    Dim headerRow As Long

    Set r = cs.Range(pa_config)
    headerRow = r.Row - 1

    For Each row_idx In r.Rows
        UID = LCase(row_idx.Cells(1, 1).Value)

        myPaConfig.Add UID, New Dictionary

        For Each c In row_idx.Columns


            myPaConfig(UID).Add _
                    cs.Cells(headerRow, c.Column).Value, _
                    c.Value




        Next c

    Next row_idx




    Set getAUTH_CONFIG = myPaConfig

End Function


Private Function getPA_CONFIG_SHORT() As Dictionary
    Dim myPaConfig As New Dictionary
    Const pa_config As String = "CONFIG_PA_SHORT"
    '     Stop
    Dim r As Range
    Dim c As Range
    Dim SHEETX As String
    Dim cs As Worksheet
    Set cs = Sheets("CONFIG.SYS")
    Dim row_idx As Range
    Dim headerRow As Long

    Set r = cs.Range(pa_config)
    headerRow = r.Row - 1

    For Each row_idx In r.Rows
        SHEETX = row_idx.Cells(1, 1).Value

        myPaConfig.Add SHEETX, New Dictionary

        For Each c In row_idx.Columns



            If c.Column < 3 Then

                myPaConfig(SHEETX).Add formColumnHeader(cs.Cells(headerRow, c.Column).Value), c.Value


            End If

        Next c

    Next row_idx




    Set getPA_CONFIG_SHORT = myPaConfig

End Function
Private Function getPA_CONFIG() As Dictionary
    Dim myPaConfig As New Dictionary
    Const pa_config As String = "CONFIG_PRINTAREA"
    '     Stop
    Dim r As Range
    Dim c As Range
    Dim SHEETX As String
    Dim cs As Worksheet
    Set cs = Sheets("CONFIG.SYS")
    Dim row_idx As Range
    Dim headerRow As Long

    Set r = cs.Range(pa_config)
    headerRow = r.Row - 1

    For Each row_idx In r.Rows
        SHEETX = row_idx.Cells(1, 1).Value

        myPaConfig.Add SHEETX, New Dictionary

        For Each c In row_idx.Columns



            If c.Column > 1 Then

                myPaConfig(SHEETX).Add formColumnHeader(cs.Cells(headerRow, c.Column).Value), c.Value


            End If

        Next c

    Next row_idx




    Set getPA_CONFIG = myPaConfig

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ******************************************************** '
' * Section: Helper Functions                            * '
' ******************************************************** '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private Function formColumnHeader(ByVal BasicHeader As String) As String

    formColumnHeader = UCase(Replace(Trim(BasicHeader), " ", "_"))

End Function
Attribute VB_Name = "mdllang"

Public Sub langswitch(ByVal lng As Integer)
    On Error GoTo fx

    'Kennwort aufheben
    Dim ws_mpl As Worksheet, ws_dpl As Worksheet
    Dim str As String
    Dim lb As ComboBox

    Set ws_mpl = ActiveWorkbook.Sheets("MASTER PACKING LIST (MPL)")
    Set ws_dpl = ActiveWorkbook.Sheets("DETAILED PACKING LIST (DPL)")

    ws_mpl.Unprotect "helloworld"
    ws_dpl.Unprotect "helloworld"
    'Sprache |fffd|ndern
    Dim i As Long
    Dim r As Range
    Dim rl As Range
    Dim Tabx As String

    i = 2

    'ListBox |fffd|ndern
    Set lb = ActiveWorkbook.Sheets("MASTER PACKING LIST (MPL)").statusCB
    lb.Clear
    str = "SPRACHE!" & Cells(8, lng + 2).Address & ":" & Cells(12, lng + 2).Address

    lb.ListFillRange = str

    Do Until Range("SPRACHE!B" & i).Value = ""
        Select Case Range("SPRACHE!A" & i).Value
        Case "MPL"
            Tabx = "MASTER PACKING LIST (MPL)"
        Case "DPL"
            Tabx = "DETAILED PACKING LIST (DPL)"
        End Select

        Set r = Sheets("" & Tabx & "").Range(Range("SPRACHE!B" & i).Value)
        Set rl = Range("SPRACHE!" & Cells(i, lng + 2).Address)
        r.Value = rl.Value

        i = i + 1
    Loop

    'Kennwort setzen
    ws_mpl.Protect "helloworld", , , , , , , , True, , , True
    ws_dpl.Protect "helloworld", , , , , , , , True, , , True
    Exit Sub
fx:
    Debug.Print Err.Number, Err.Description
    Resume Next

End Sub



INQUEST-PP=macro
