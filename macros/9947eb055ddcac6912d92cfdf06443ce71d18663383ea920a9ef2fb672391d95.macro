Attribute VB_Name = "Language"
Option Explicit

Public text(130) As String
Public Enum IdLanguage
    IdGerman = 0
    IdEnglish = 1
    IdFrench = 2
    IdItalian = 3
    IdSpanish = 4
End Enum

Public Sub init_language(lang As IdLanguage)
    Select Case lang
        Case IdGerman
            text(0) = "Kontinuierlich"
            text(1) = "Datens|fffd|tze"
            text(2) = "Samplenummer"
            text(3) = "Abtastrate"
            text(4) = "Trigger"
            text(5) = "Ein"
            text(6) = "Aus"
            text(7) = "Start"
            text(8) = "Stopp"
            text(9) = "Kopfdaten"
            text(10) = "Grafik"
            text(11) = "Grenzwert|fffd|berwachung"
            text(12) = "Eingabe"
            text(13) = "Oberer Grenzwert"
            text(14) = "Unterer Grenzwert"
            text(15) = "Ergebnis"
            text(16) = "Einzelwerte"
            text(17) = "Aktuelle Daten"
            text(18) = "Peak Werte"
            text(19) = "Zelle"
            text(20) = "Unten"
            text(21) = "Rechts"
            text(22) = "Speicher"
            text(23) = "Speichermodus"
            text(24) = "Aufzeichnung"
            text(25) = "Eingabe"
            text(26) = "Gespeicherte Werte"
            text(27) = "Importieren"
            text(28) = "L|fffd|schen"
            text(29) = "Anzahl Datens|fffd|tze"
            text(30) = "Messung"
            text(31) = "Memory starten"
            text(32) = "Zur|fffd|cksetzen"
            text(33) = "Tarieren"
            text(34) = "Abbrechen"
            text(35) = "Start Zelle"
            text(36) = "Status"
            text(37) = "Kein Kraftmesger|fffd|t"
            text(38) = "Bereit"
            text(39) = "Kraftmessger|fffd|t nicht erkannt."
            text(40) = "Bitte |fffd|berpr|fffd|fen Sie das Anschlusskabel und die Spannungsversorgung!"
            text(41) = "Warten"
            text(42) = "Kommunikationsfehler."
            text(43) = "Zur|fffd|ck zur vorherigen Seite"
            text(44) = "|fffd|ffnen Sie ein neues Arbeitsblatt."
            text(45) = "Zugfestigkeit"
            text(46) = "Kraft"
            text(47) = "Mittelwert"
            text(48) = "Varianz"
            text(49) = "Excelbereich ist ausgesch|fffd|pft."
            text(50) = "Wollen Sie sicher l|fffd|schen?"
            text(51) = "Keine gespeicherten Werte"
            text(52) = "Einheit"
            text(53) = "Grenzwerte"
            text(54) = "Gew|fffd|hlte Zelle kann nicht angezeigt werden."
            text(55) = "Eingabebereich ist falsch."
            text(56) = "Zul|fffd|ssiger Bereich ist |fffd|berschritten"
            text(57) = "Der obere oder untere Grenzwert ist au|fffd|erhalb des zul|fffd|ssigen Bereiches"
            text(58) = "Unterer Grenzwert ist gr|fffd||fffd|er als der obere Grenzwert. Trotzdem weiter?"
            text(59) = "Norm"
            text(60) = "Kabel"
            text(61) = "Pr|fffd|fungsdefinition"
            text(62) = "Lizenzschl|fffd|ssel"
            text(63) = "Lizenzdatei"
            text(64) = "Bezeichnung"
            text(65) = "Seriennummer"
            text(66) = "Lizenzdatei generieren"
            text(67) = "Die Datei existiert bereits. |fffd|berschreiben?"
            text(68) = "fehlerhaft"
            text(69) = "Option Kraftmessger|fffd|t"
            text(70) = "Kraftmessger|fffd|t"
            text(71) = "Hersteller"
            text(72) = "Kalibrierdatum"
            text(73) = "Maximalkraft"
            text(74) = "Aufl|fffd|sung"
            text(75) = "Schlie|fffd|en"
            text(76) = "|fffd|bernehmen"
            text(77) = "Pr|fffd|fangaben"
            text(78) = "Pr|fffd|fer"
            text(79) = "Pr|fffd|fdatum"
            text(80) = "wird verwendet! Bitte zuerst schlie|fffd|en."
            text(81) = "Datei nicht gespeichert."
            text(82) = "Fehler in der Lizenzierung"
            text(83) = "fehlerhaft oder nicht vorhanden."
            text(84) = "Kabelpr|fffd|fung"
            text(85) = "Beenden"
            text(86) = "mit"
            text(87) = "Protokoll"
            text(88) = "Speichern"
            text(89) = "N|fffd|chste Anzeige"
            text(90) = "Istwert"
            text(91) = "Positiver Peak"
            text(92) = "Negativer Peak"
            text(93) = "Positives Maximum"
            text(94) = "Positives Minimum"
            text(95) = "Negatives Maximum"
            text(96) = "Negatives Minimum"
            text(97) = "Memory l|fffd|schen"
            text(98) = "Pr|fffd|fungen"
            text(99) = "Gesamtmenge"
            text(100) = "Pr|fffd|flos"
            text(101) = "Gravitation"
            text(102) = "Ung|fffd|ltiger Ger|fffd|tetyp"
            text(103) = "Kraftmessger|fffd|t wird nun abgeschaltet!"
            text(104) = "Ger|fffd|tetyp"
            text(105) = "unkompatibel"
            text(106) = "eingeben oder anklicken"
            text(107) = "Pr|fffd|fparameter"
            text(108) = "Fahrprofil"
            text(109) = "Geschwindigkeit"
            text(110) = "Wartezeit"
            text(111) = "Abriss"
            text(112) = "gespeichert"
            text(113) = "Automatik"
            text(114) = "bei Erreichen der Grenzkraft"
            text(115) = "am Ende der"
            text(116) = "bei Abriss"
            text(117) = "Programm wird nun geschlossen!"
            text(118) = "Formular"
            text(119) = "Korrekte Datei unter 'Option' ausw|fffd|hlen."
            text(120) = "Die Firmware vom Kraftmessger|fffd|t ist zu alt."
            text(121) = "wird nicht ordnungsgem|fffd||fffd| funktionieren."
            text(122) = "Messmodus"
            text(123) = "|fffd|nderungen |fffd|bernehmen?"
            text(124) = "Ziehen bis"
            text(125) = "Grenzwert"
            text(126) = "Speicheroption"
            text(127) = "Brucherkennung"
            text(128) = "Werkseinstellung"
            text(129) = "Motor deaktivieren"
        Case IdEnglish
            text(0) = "Continuous"
            text(1) = "Number of data"
            text(2) = "Sample number"
            text(3) = "Sampling rate"
            text(4) = "Trigger"
            text(5) = "On"
            text(6) = "Off"
            text(7) = "Start"
            text(8) = "Stop"
            text(9) = "Header"
            text(10) = "Graphic"
            text(11) = "Limit control"
            text(12) = "Change"
            text(13) = "Upper limit"
            text(14) = "Lower limit"
            text(15) = "Result"
            text(16) = "Single values"
            text(17) = "Current data"
            text(18) = "Peak data"
            text(19) = "Cell"
            text(20) = "Down"
            text(21) = "Right"
            text(22) = "Memory"
            text(23) = "Memory mode"
            text(24) = "Recording"
            text(25) = "Enter"
            text(26) = "Saved values"
            text(27) = "Import"
            text(28) = "Clear"
            text(29) = "Number of stored readings"
            text(30) = "Measure"
            text(31) = "Memory start"
            text(32) = "Reset"
            text(33) = "Tare"
            text(34) = "Cancel"
            text(35) = "Start cell"
            text(36) = "State"
            text(37) = "No force gauge"
            text(38) = "Ready"
            text(39) = "Force gauge not recognized."
            text(40) = "Please check communication cable and power supply!"
            text(41) = "Waiting"
            text(42) = "Communication failed."
            text(43) = "Back to previous page"
            text(44) = "Open a new sheet."
            text(45) = "Tensile strenght"
            text(46) = "Force"
            text(47) = "Average"
            text(48) = "Deviation"
            text(49) = "MS-Excel range overflow."
            text(50) = "Are you sure to clear?"
            text(51) = "No values saved"
            text(52) = "Units"
            text(53) = "Limits"
            text(54) = "Selected cell cannot be displayed."
            text(55) = "Input value is wrong."
            text(56) = "Input range is over"
            text(57) = "Upper or lower limit is out of the measuring range."
            text(58) = "Lower limit is higher than upper limit. Continue?"
            text(59) = "Standard"
            text(60) = "Wire"
            text(61) = "Definition of test"
            text(62) = "License key"
            text(63) = "License file"
            text(64) = "Description"
            text(65) = "Serial Number"
            text(66) = "Generate license file"
            text(67) = "The file already exists. Overwrite?"
            text(68) = "incorrectly"
            text(69) = "Option force gauge"
            text(70) = "Force gauge"
            text(71) = "Manufacturer"
            text(72) = "Date of calibration"
            text(73) = "Maximum Force"
            text(74) = "Resolution"
            text(75) = "Close"
            text(76) = "Apply"
            text(77) = "Information about the test"
            text(78) = "Name"
            text(79) = "Date of test"
            text(80) = "in use! Please close."
            text(81) = "File not saved."
            text(82) = "Error in Licensing"
            text(83) = "corrupt or not present."
            text(84) = "Wire test"
            text(85) = "Exit"
            text(86) = "with"
            text(87) = "Print Results"
            text(88) = "Store readings"
            text(89) = "Next Display"
            text(90) = "Current data"
            text(91) = "Positive peak"
            text(92) = "Negative peak"
            text(93) = "Positive maximum"
            text(94) = "Positive minimum"
            text(95) = "Negative maximum"
            text(96) = "Negative minimum"
            text(97) = "Delete memory"
            text(98) = "Tests"
            text(99) = "total quantity"
            text(100) = "Series of test"
            text(101) = "Gravitation"
            text(102) = "Invalid device type"
            text(103) = "Force gauge will now be switched off!"
            text(104) = "Device type"
            text(105) = "not compatible"
            text(106) = "enter or click"
            text(107) = "Test parameters"
            text(108) = "Operation mode"
            text(109) = "Speed"
            text(110) = "dwell time"
            text(111) = "break"
            text(112) = "saved"
            text(113) = "Automatic"
            text(114) = "at reaching the force limit"
            text(115) = "at the end of"
            text(116) = "at the break"
            text(117) = "Program will be closed!"
            text(118) = "Template"
            text(119) = "Select the correct file under 'Option'."
            text(120) = "The firmware of the force gauge is too old."
            text(121) = "The program will not work properly."
            text(122) = "Operation mode"
            text(123) = "Apply changes?"
            text(124) = "Pull until"
            text(125) = "limit"
            text(126) = "Memory option"
            text(127) = "Break detection"
            text(128) = "Factory settings"
            text(129) = "Motor disable"
        Case IdFrench
            text(0) = "Continue"
            text(1) = "Nombre de donn|fffd|es"
            text(2) = "Nombre de donn|fffd|e"
            text(3) = "Fr|fffd|quenzce de test"
            text(4) = "Trigger"
            text(5) = "Allum|fffd|"
            text(6) = "Hors"
            text(7) = "Lancer"
            text(8) = "Stop"
            text(9) = "En-t|fffd|te"
            text(10) = "Graphic"
            text(11) = "Contr|fffd|le des valeurs limites"
            text(12) = "Changer"
            text(13) = "Limite sup|fffd|rieure"
            text(14) = "Limite inf|fffd|rieure"
            text(15) = "R|fffd|sultat"
            text(16) = "Valeurs individuelles"
            text(17) = "Donn|fffd|es actuelles"
            text(18) = "Donn|fffd|es maximales"
            text(19) = "Cellule"
            text(20) = "Vers le bas"
            text(21) = "Droite"
            text(22) = "M|fffd|moire"
            text(23) = "Mode de m|fffd|moire"
            text(24) = "Enregistrement"
            text(25) = "Entr|fffd|e"
            text(26) = "Valeurs enregistr|fffd|es"
            text(27) = "Importer"
            text(28) = "Effacer"
            text(29) = "Quantit|fffd| de donn|fffd|es sauv|fffd|es"
            text(30) = "Mesure"
            text(31) = "M|fffd|moire start"
            text(32) = "Rajuster"
            text(33) = "Tarer"
            text(34) = "Annuler"
            text(35) = "Cellule start"
            text(36) = "Statut"
            text(37) = "No Dynamom|fffd|tre"
            text(38) = "Pr|fffd|t"
            text(39) = "Dynamom|fffd|tre non identifi|fffd|"
            text(40) = "Veuillez v|fffd|rifier le c|fffd|ble de communication et l'alimentation d'|fffd|nergie!"
            text(41) = "Attendre"
            text(42) = "Communication |fffd|choue."
            text(43) = "De nouveau |fffd| la page pr|fffd|c|fffd|dente"
            text(44) = "Ouvrez une feuille de travail."
            text(45) = "R|fffd|sistance |fffd| la traction"
            text(46) = "Force"
            text(47) = "Valeur moyenne"
            text(48) = "Variance"
            text(49) = "Range d|fffd|Excel |fffd|puis|fffd|s."
            text(50) = "|fffd|tes-vous s|fffd|r |fffd| l'espace libre ?"
            text(51) = "Pas des valeurs enregeistr|fffd|es"
            text(52) = "Unit|fffd|"
            text(53) = "Valeurs limites"
            text(54) = "La cellule choisie ne peut pas |fffd|tre montr|fffd|e."
            text(55) = "Le choix de donn|fffd|es est faux."
            text(56) = "La gamme permise est exc|fffd|d|fffd|e"
            text(57) = "La valeur limite sup|fffd|rieure ou inf|fffd|rieure est en dehors du gange. "
            text(58) = "Limite plus haut que sup|fffd|rieure inf|fffd|rieure de limite. Continuez toujours?"
            text(59) = "Norme"
            text(60) = "C|fffd|ble"
            text(61) = "D|fffd|finition d|fffd|essai"
            text(62) = "La cl|fffd| de licence"
            text(63) = "Fichier de licence"
            text(64) = "Descripci|fffd|n"
            text(65) = "Num|fffd|ro de s|fffd|rie"
            text(66) = "G|fffd|n|fffd|rer un fichie de licence"
            text(67) = "Le fichier existe d|fffd|j|fffd|. |fffd|craser?"
            text(68) = "mal"
            text(69) = "Option dynamom|fffd|tre"
            text(70) = "Dynamom|fffd|tre"
            text(71) = "Fabricant"
            text(72) = "Date de calibrage"
            text(73) = "Force maximale"
            text(74) = "R|fffd|solution"
            text(75) = "Fermer"
            text(76) = "Appliquer"
            text(77) = "Informations sur l|fffd|essai"
            text(78) = "Testeur"
            text(79) = "Date du essai"
            text(80) = "Fichier en cours d|fffd|utilisation! S|fffd|il vous pla|fffd|t proches."
            text(81) = "Fichier non enregistr|fffd|s."
            text(82) = "Erreur dans la licence"
            text(83) = "corrompu ou pas pr|fffd|sent."
            text(84) = "Esssai de c|fffd|ble"
            text(85) = "Fin"
            text(86) = "avec"
            text(87) = "Protocole"
            text(88) = "Enregistrer"
            text(89) = "Suivant l|fffd|affichage"
            text(90) = "Donn|fffd|es actuelles"
            text(91) = "Pic positif"
            text(92) = "Pic n|fffd|gatif"
            text(93) = "Maximum positif"
            text(94) = "Minimum positif"
            text(95) = "Maximum n|fffd|gatif"
            text(96) = "Minimum n|fffd|gatif"
            text(97) = "Effacer m|fffd|moire"
            text(98) = "Essais"
            text(99) = "quantit|fffd| totale"
            text(100) = "S|fffd|rie d|fffd|essais"
            text(101) = "Gravitation"
            text(102) = "Type d|fffd|appareil est invalide"
            text(103) = "Dynamom|fffd|tre est maintenant |fffd|teint!"
            text(104) = "Type d|fffd|appareil"
            text(105) = "incompatible"
            text(106) = "|fffd|ntrez ou cliquez"
            text(107) = "Param|fffd|tres de la test"
            text(108) = "Profil de marche "
            text(109) = "Vitesse"
            text(110) = "temps d|fffd|attente"
            text(111) = "rupture"
            text(112) = "enregistr|fffd|s"
            text(113) = "Automatique"
            text(114) = "|fffd| l|fffd|atteinte de la force limite "
            text(115) = "|fffd| la fin du"
            text(116) = "|fffd| la rupture"
            text(117) = "Programme est ferm|fffd|e!"
            text(118) = "Mod|fffd|le de formulaire"
            text(119) = "S|fffd|lectionner le bon fichier dans 'Option'."
            text(120) = "Le firmware de Dynamom|fffd|tre est trop vieux."
            text(121) = "Le programme ne fonctionnera pas correctement."
            text(122) = "mode mesure"
            text(123) = "Appliquer les modifications?"
            text(124) = "Aller jusqu|fffd||fffd|"
            text(125) = "valeur limite"
            text(126) = "Option enregistrement"
            text(127) = "Reconnaissance de la rupture"
            text(128) = "Configuration par d|fffd|faut"
            text(129) = "D|fffd|sactiver le moteur"
        Case IdItalian
            text(0) = "Continuo"
            text(1) = "Numero di dati"
            text(2) = "Numero di dato"
            text(3) = "Frequenza di campionamento"
            text(4) = "Trigger"
            text(5) = "On"
            text(6) = "Off"
            text(7) = "Avvio"
            text(8) = "Stop"
            text(9) = "Dati d'intestazione"
            text(10) = "Grafico"
            text(11) = "Monitoraggio dei valori limite"
            text(12) = "Input"
            text(13) = "Limite superiore"
            text(14) = "Limite inferiore"
            text(15) = "Risultato"
            text(16) = "Valori singoli"
            text(17) = "Dati attuali"
            text(18) = "Dati massimi"
            text(19) = "Cella"
            text(20) = "Gi|fffd|"
            text(21) = "Destra"
            text(22) = "Memoria"
            text(23) = "Modus di memoria"
            text(24) = "Registrazione"
            text(25) = "Immissione"
            text(26) = "Valori memorizzati"
            text(27) = "Importare"
            text(28) = "Cancellare"
            text(29) = "Quantit|fffd| dei dati salvati"
            text(30) = "Misurazioni"
            text(31) = "Memoria start"
            text(32) = "Resettare"
            text(33) = "Tarare"
            text(34) = "Abortiere"
            text(35) = "Cella iniziale"
            text(36) = "Stato"
            text(37) = "No Dinamometro"
            text(38) = "Pronto"
            text(39) = "Dinamometro non |fffd| stato riconosciuto."
            text(40) = "Controlli per favore il cavo d'allaciamento e l'alimentazione di tensione!"
            text(41) = "Aspettare"
            text(42) = "Errore comunicazione."
            text(43) = "Tornare alla pagina precedente"
            text(44) = "Apra un foglio di calcolo."
            text(45) = "Resistenza a trazione"
            text(46) = "Forza"
            text(47) = "Valore medio"
            text(48) = "Varianza"
            text(49) = "Gamma di Excel esaurito."
            text(50) = "|fffd| sicuro di voler cancellare?"
            text(51) = "Nessuni valori memorizzati"
            text(52) = "Unit|fffd|"
            text(53) = "Valori limite"
            text(54) = "La cellula selezionata non pu|fffd| essere visualizzata"
            text(55) = "L'area dell'input |fffd| errata."
            text(56) = "L'area consentita |fffd| oltrepassata"
            text(57) = "O il valore limite superiore o quello inferior |fffd| fuori l'area consentita. "
            text(58) = "Il valore limite inferiore |fffd| pi|fffd| alte del valore limite superiore. Proseguire ugualmente?"
            text(59) = "Norma"
            text(60) = "Cavo"
            text(61) = "Definizione di prova"
            text(62) = "Chiave di licenza"
            text(63) = "File di licenza"
            text(64) = "Descrizione"
            text(65) = "Numeror di serie"
            text(66) = "Genera file di licenza"
            text(67) = "Il file esiste gi|fffd|. Sovrascrivere?"
            text(68) = "errato"
            text(69) = "Opzioni Dinamometro"
            text(70) = "Dinamometro"
            text(71) = "Fabbricante"
            text(72) = "Data di calibratura"
            text(73) = "Massima forza"
            text(74) = "Risoluzione"
            text(75) = "Chiudere"
            text(76) = "Applica"
            text(77) = "Informazioni sul prova"
            text(78) = "Estaminatore"
            text(79) = "Data della prova"
            text(80) = "File in uso! Si prega di chiudere."
            text(81) = "Il file non salvato."
            text(82) = "Errore nella concessione di licenze"
            text(83) = "danneggiato o non presente."
            text(84) = "Prova di cavo"
            text(85) = "Fine"
            text(86) = "con"
            text(87) = "Protocollo"
            text(88) = "Memorizzazione"
            text(89) = "Indicazione successivo"
            text(90) = "Dati attuali"
            text(91) = "Picco positivo"
            text(92) = "Picco negativo"
            text(93) = "Massimo positivo"
            text(94) = "Minimo positivo"
            text(95) = "Massimo negativo"
            text(96) = "Minimo negativo"
            text(97) = "Cancella memoria"
            text(98) = "Proves"
            text(99) = "Quantit|fffd| totale"
            text(100) = "Partita di prova"
            text(101) = "Gravitazione"
            text(102) = "Tipo di dispositivo non |fffd| valido"
            text(103) = "Dinamometrao |fffd| ora off!"
            text(104) = "Tipo di dispositivo"
            text(105) = "incompatibile"
            text(106) = "immettere o cliccare"
            text(107) = "Parametri di prova"
            text(108) = "Profilo di corsa "
            text(109) = "Velocit|fffd|"
            text(110) = "tempo di attesa"
            text(111) = "lo strappo"
            text(112) = "memorizzato"
            text(113) = "Automatico"
            text(114) = "al raggiungimento della forza limite"
            text(115) = "alla fine del"
            text(116) = "al strappo"
            text(117) = "Chiusura del programma!"
            text(118) = "Modello di forma"
            text(119) = "Selezionare il file corretto in 'Opzione'."
            text(120) = "Il firmware del Dinamometro |fffd| troppo vecchio."
            text(121) = "Il programma non funzioner|fffd| correttamente."
            text(122) = "Modalit|fffd| di misura"
            text(123) = "Applica le modifiche?"
            text(124) = "Traslare fino a"
            text(125) = "valori limite"
            text(126) = "Opzioni memoria"
            text(127) = "Detecci|fffd|n de rotura"
            text(128) = "Impostazione di fabbrica"
            text(129) = "Serrare el motore"
        Case IdSpanish
            text(0) = "Continuado"
            text(1) = "N|fffd|mero de datos"
            text(2) = "N|fffd|mero de dato"
            text(3) = "Frequencia de muestreo"
            text(4) = "Trigger"
            text(5) = "On"
            text(6) = "Off"
            text(7) = "Inicio"
            text(8) = "Stop"
            text(9) = "Datos de cabecera"
            text(10) = "Gr|fffd|fico"
            text(11) = "Supervisi|fffd|n de valor l|fffd|mite"
            text(12) = "Entrada"
            text(13) = "L|fffd|mite superior"
            text(14) = "L|fffd|mite inferior"
            text(15) = "Resultado"
            text(16) = "Valores individuales"
            text(17) = "Datos actuales"
            text(18) = "Datos m|fffd|ximos"
            text(19) = "Celda"
            text(20) = "Abajo"
            text(21) = "Derecha"
            text(22) = "Memoria"
            text(23) = "Modo de la memoria"
            text(24) = "Registro"
            text(25) = "Introducci|fffd|n"
            text(26) = "Valores guardados"
            text(27) = "Importar"
            text(28) = "Borrar"
            text(29) = "Cantidad de datos memorizados"
            text(30) = "Medici|fffd|n"
            text(31) = "Memoria start"
            text(32) = "Reajustar"
            text(33) = "Tarar"
            text(34) = "Abortar"
            text(35) = "Celda de inicio"
            text(36) = "Estado"
            text(37) = "No dinamom|fffd|trico"
            text(38) = "Listo"
            text(39) = "Dispositivo dinamom|fffd|trico no reconocido."
            text(40) = "|fffd|Compruebe por favor el cable de la comunicaci|fffd|n y la fuente de alimentaci|fffd|n!"""
            text(41) = "Aguarde"
            text(42) = "Comunicaci|fffd|n fall|fffd|"
            text(43) = "Atr|fffd|s a la p|fffd|gina anterior"
            text(44) = "Abra una hoja del trabajo."
            text(45) = "Resistencia a la traccion"
            text(46) = "Fuerza"
            text(47) = "Valor promedio"
            text(48) = "Varianza"
            text(49) = "Rango de Escel agotado."
            text(50) = "|fffd|Desea realmente borrar?"
            text(51) = "Sin valores guardados"
            text(52) = "Unidad"
            text(53) = "Valores l|fffd|mite"
            text(54) = "La c|fffd|lula seleccionada no puede ser visualizada."
            text(55) = "El valor de la entrada es incorrecto."
            text(56) = "Se ha excedido la gama permitida"
            text(57) = "O el valor l|fffd|mite superior o inferior est|fffd| fuera del rango admisible."
            text(58) = "El l|fffd|mite inferior es mayor que el l|fffd|mite superior. |fffd|Desea seguir asimismo?"
            text(59) = "Norma"
            text(60) = "Cable"
            text(61) = "Definici|fffd|n del ensayo"
            text(62) = "Clave de licencia"
            text(63) = "Archivo de licencia"
            text(64) = "Description"
            text(65) = "N|fffd|mero de serie"
            text(66) = "Generar archivo de licencia"
            text(67) = "El archivo ya existe. |fffd|Sobrescribir?"
            text(68) = "incorrectamente"
            text(69) = "Opci|fffd|n Dispositivo dinamom|fffd|trico"
            text(70) = "Dinamom|fffd|trico"
            text(71) = "Fabricante"
            text(72) = "Fecha de calibraci|fffd|n"
            text(73) = "Fuerza M|fffd|xima"
            text(74) = "Resoluci|fffd|n"
            text(75) = "Cerca"
            text(76) = "Aplicar"
            text(77) = "Informaci|fffd|n sobre el ensayo"
            text(78) = "Examinador"
            text(79) = "Fecha del ensayo"
            text(80) = "|fffd|Archivo en uso! Cierre por favor."
            text(81) = "Archivo no se guarda."
            text(82) = "Error en la concesi|fffd|n de licencias"
            text(83) = "da|fffd|ado o no presente."
            text(84) = "Ensayo del cable"
            text(85) = "Finalizar"
            text(86) = "con"
            text(87) = "Protocolo"
            text(88) = "Guardar"
            text(89) = "Siguiente indicai|fffd|n"
            text(90) = "Datos actuales"
            text(91) = "Pico positivo"
            text(92) = "Pico negativo"
            text(93) = "M|fffd|ximo positivo"
            text(94) = "M|fffd|nimo positivo"
            text(95) = "M|fffd|ximo negativo"
            text(96) = "M|fffd|nimo negativo"
            text(97) = "Borrar memoria"
            text(98) = "Ensayos"
            text(99) = "Cantidad total"
            text(100) = "Lote de ensayo"
            text(101) = "Gravitaci|fffd|n"
            text(102) = "Tipo de dispositivo non es v|fffd|lido"
            text(103) = "|fffd|Dinamom|fffd|trico ahora est|fffd| apagado!"
            text(104) = "Tipo de dispositivo"
            text(105) = "incompatible"
            text(106) = "introduzca o haga clic"
            text(107) = "Par|fffd|metros del ensayo"
            text(108) = "Perfil de marcha "
            text(109) = "Velocidad"
            text(110) = "tiempo de espera"
            text(111) = "rotura"
            text(112) = "se guarda"
            text(113) = "Autom|fffd|tico"
            text(114) = "al alcanzar de la fuerza l|fffd|mite"
            text(115) = "al final del"
            text(116) = "a la rotura"
            text(117) = "|fffd|El programa se cierra!"
            text(118) = "Modelo de formulario"
            text(119) = "Seleccione el archivo correcto en 'Opc|fffd|on'."
            text(120) = "El firmware del Dinamom|fffd|trico es demasiado viejo."
            text(121) = "El programa no funcionar|fffd| correctamente."
            text(122) = "Modo de medici|fffd|n"
            text(123) = "|fffd|Aplicar cambios?"
            text(124) = "Desplazar hasta"
            text(125) = "valor l|fffd|mite"
            text(126) = "Opci|fffd|n de memor|fffd|a"
            text(127) = "Riconoscimento della rottura"
            text(128) = "Ajuste de f|fffd|brica"
            text(129) = "Desactivar el motor"
    End Select
End Sub


Attribute VB_Name = "MCHPUSB"
Option Explicit

Public Declare Function MPUSBGetDLLVersion Lib "_mpusbapi.dll" () As Long
Public Declare Function MPUSBGetDeviceCount Lib "_mpusbapi.dll" (ByVal pVID_PID As String) As Long
Public Declare Function MPUSBOpen Lib "_mpusbapi.dll" (ByVal instance As Long, ByVal pVID_PID As String, ByVal pEP As String, ByVal dwDir As Long, ByVal dwReserved As Long) As Long
Public Declare Function MPUSBClose Lib "_mpusbapi.dll" (ByVal handle As Long) As Long
Public Declare Function MPUSBWrite Lib "_mpusbapi.dll" (ByVal handle As Long, ByVal pData As Long, ByVal dwLen As Long, ByRef pLength As Long, ByVal dwMilliseconds As Long) As Long
Public Declare Function MPUSBRead Lib "_mpusbapi.dll" (ByVal handle As Long, ByVal pData As Long, ByVal dwLen As Long, ByRef pLength As Long, ByVal dwMilliseconds As Long) As Long
Public Declare Function MPUSBReadInt Lib "_mpusbapi.dll" (ByVal handle As Long, ByVal pData As Long, ByVal dwLen As Long, ByRef pLength As Long, ByVal dwMilliseconds As Long) As Long

Public Declare Sub Sleep Lib "KERNEL32" (ByVal dwMilliseconds As Long)
Public Declare Function GetLastError Lib "KERNEL32" () As Long
Public Declare Function CancelIo Lib "KERNEL32" (ByVal handle As Long) As Boolean
Private Declare Sub CopyMemory Lib "KERNEL32" Alias "RtlMoveMemory" (ByVal Dest As Long, ByVal Source As Long, ByVal Bytes As Long)

'Functions and Data required from WIN32 API
Public Const INVALID_HANDLE_VALUE = -1
Public Const ERROR_INVALID_HANDLE = 6&


'Constants for connecting to Microchip FS Demo board
Public Const MPUSB_FAIL = 0
Public Const MPUSB_SUCCESS = 1

Public Const MP_WRITE = 0
Public Const MP_READ = 1

'Declare the IN PIPE and OUT PIPE Public variables
Public USB_InPipe As Long, USB_OutPipe As Long
Public vid_pid As String
Public out_pipe As String
Public in_pipe As String
Public boCyclic As Boolean

Public Sub USB_Init()
    vid_pid = "vid_04d8&pid_fc30"
    out_pipe = "\MCHP_EP1" 'We don't want two \\ in VB... \\ is for C
    in_pipe = "\MCHP_EP1"
    USB_InPipe = INVALID_HANDLE_VALUE
    USB_OutPipe = INVALID_HANDLE_VALUE
    boOnline = False
End Sub

Public Function OpenMPUSBDevice() As Boolean
    Dim count As Long
    Dim instance As Long
    Dim reserved As Long
    Dim direction As Long
    
    count = MPUSBGetDeviceCount(vid_pid)
    
    If count > 0 Then
        direction = MP_WRITE
        instance = 0
        reserved = 0
        USB_OutPipe = MPUSBOpen(instance, vid_pid, out_pipe, direction, reserved)
        direction = MP_READ
        instance = 0
        reserved = 0
        USB_InPipe = MPUSBOpen(instance, vid_pid, in_pipe, direction, reserved)
    
        If USB_OutPipe = INVALID_HANDLE_VALUE Or USB_InPipe = INVALID_HANDLE_VALUE Then
            MsgBox "Failed to open data pipes. (" + CStr(USB_OutPipe) + CStr(USB_InPipe) + ")"
            USB_OutPipe = USB_InPipe = INVALID_HANDLE_VALUE
            OpenMPUSBDevice = False
        Else
            OpenMPUSBDevice = True
        End If
    Else
        MsgBox text(39), , XLANAME_K + ".USB_Init()"
        If (boFMIrunning) Then
            frmMain_B.State.Caption = text(37)
            frmMain_B.State.BackColor = COLOR_RED
        End If
        OpenMPUSBDevice = False
    End If
End Function

Public Sub CloseMPUSBDevice()
    If USB_OutPipe <> INVALID_HANDLE_VALUE Then
        MPUSBClose (USB_OutPipe)
        USB_OutPipe = INVALID_HANDLE_VALUE
    End If
    If USB_InPipe <> INVALID_HANDLE_VALUE Then
        MPUSBClose (USB_InPipe)
        USB_InPipe = INVALID_HANDLE_VALUE
    End If
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const MenuType = "Worksheet Menu Bar"   ' |fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd|^|fffd|C|fffd|v
Dim MainMenu As CommandBarControl       ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[
Dim SubMenu As CommandBarControl        ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[

'*************************
'   |fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||1c9||fffd||fffd||fffd|
'*************************
Private Sub Workbook_Open()
    boFMIrunning = False
    Set MainMenu = Application.CommandBars(MenuType) _
                .Controls.Add(msoControlPopup, , , , True)
    MainMenu.Caption = XLANAME_K
    ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||1c9||fffd|
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = "START"
    SubMenu.OnAction = "frmMain_B_show"
    
    ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||1c9||fffd|
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = "Version"
    SubMenu.OnAction = "ver_proc_k_fmi_b"
    
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = "Language"
    SubMenu.OnAction = "frmLanguage_B_show"
End Sub

'*************************
'   |fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'*************************
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd|
    For Each MainMenu In Application.CommandBars(MenuType).Controls
        If MainMenu.Caption = XLANAME_K Then
            MainMenu.Delete
        End If
    Next MainMenu
End Sub



Attribute VB_Name = "Timer"
' F|fffd|gen Sie nachfolgenden Code in ein |fffd|ffengtliches Modul ein
Private Declare Sub GetLocalTime Lib "kernel32.dll" (lpSystemTime As SYSTEMTIME)
Private Declare Function SetTimer Lib "user32.dll" (ByVal hwnd As Long, ByVal nIDEvent As Long, ByVal uElapse As Long, ByVal lpTimerFunc As Long) As Long
Private Declare Function KillTimer Lib "user32.dll" (ByVal hwnd As Long, ByVal nIDEvent As Long) As Long
 
Const WM_TIMER = &H113 ' Timer-Ereignis trifft ein
 
Public Const TIMER_MS = 100
Public blinktakt As Boolean
Public watchdog As Long

Private Type SYSTEMTIME
  wYear As Integer
  wMonth As Integer
  wDayOfWeek As Integer
  wDay As Integer
  wHour As Integer
  wMinute As Integer
  wSecond As Integer
  wMilliseconds As Integer
End Type
 
Private hEvent As Long

Public TimerIsOn As Boolean
Public boWatchdog As Boolean

' Timer-Prozedur, welche im Abstand der festgelegten
' Millisekunden ein Ereignis sendet
Public Sub TimerProc(ByVal hwnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long)
    Dim semaphore As Boolean    ' Verriegeln, dass ein Ablauf durch Timer unterbrochen wird
    Dim ret As Long
    
    mm = 0
    DoEvents
    semaphore = False
    If uMsg = WM_TIMER Then
        ret = 0
        If TimerIsOn And boWatchdog Then
            watchdog = watchdog + 1
        Else
            watchdog = 0
        End If
        If (watchdog > 50) Then 'Bei 100 ms sind das 5 Sekunden
            DisableTimer
            MsgBox text(42) + vbCrLf + text(39) + vbCrLf + text(117), vbExclamation, XLANAME_K
            Application.Cursor = xlDefault
            boFMIrunning = False
            USB_End
            End
        End If
        If (semaphore = False) Then
            semaphore = True
            If (send_len > 0) Then
                If (SendPacket(send_buf, send_len, 100)) Then
                    send_len = 0
                End If
            End If
            receive_len = 64
            ret = ReceivePacket(receive_buf, receive_len, 100)
            If (ret) Then
                watchdog = 0    ' Sobald irgendwas empfangen wird, den WD zur|fffd|cksetzen
                USB_Input
            End If
            semaphore = False
        End If
    Else
    End If
End Sub

' Startet den Timer
Public Function EnableTimer(ByVal msInterval As Long)
  If hEvent <> 0 Then Exit Function
  
  hEvent = SetTimer(0&, 0&, msInterval, AddressOf TimerProc)
  TimerIsOn = True
End Function

' Beendet den Timer
Public Function DisableTimer()
  If hEvent = 0 Then Exit Function
  KillTimer 0&, hEvent
  hEvent = 0
  TimerIsOn = False
End Function

' WARTE mindestens "second" Sekunden lang.
Public Sub wait(sec As Integer)
  Dim start As Variant
  Dim mess As Variant
  Dim diff As Long
  
  start = Now
  Do
    mess = Now
    diff = DateDiff("s", start, mess)
  Loop Until diff >= sec
End Sub

Attribute VB_Name = "calc_mdl"
Option Explicit
Dim n As Long

Public Sub weight_average() '|fffd||fffd||fffd||3cc|v|fffd|Z
    weight_avg = cyclic_val(1)
    
    If (data_count > 1) Then
        For n = 2 To data_count - 1 Step 1
            weight_avg = weight_avg + cyclic_val(n)
        Next n
        
        weight_avg = weight_avg / (data_count - 1) '|fffd||fffd||fffd||311||fffd||fffd||fffd||153||fffd||fffd||fffd||a0bd||fffd||5cf|d|fffd|l|fffd|f|fffd|[|fffd|^|fffd||315||fffd||fffd||fffd|
    Else
        weight_avg = cyclic_val(1)
    End If
End Sub

Public Sub Max_weight()

    max_gf = cyclic_val(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For n = 2 To data_count - 1 Step 1
        If cyclic_val(n) >= max_gf Then
            max_gf = cyclic_val(n)
        End If
    Next n
    
    If max_gf > max_limit Then
        limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd||fffd||fffd|
    End If
    
End Sub

Public Sub P_Max_weight()
    max_p_gf = 0         '|fffd||5cf|d|fffd|v|fffd||fffd||fffd|X|fffd||151||fffd|l
    
    For n = 1 To data_count - 1 Step 1
        If cyclic_val(n) >= 0 Then
            If cyclic_val(n) >= max_p_gf Then
                max_p_gf = cyclic_val(n)
            End If
        End If
    Next n

End Sub
Public Sub M_Max_weight()
    max_m_gf = 0          '|fffd||5cf|d|fffd|}|fffd|C|fffd|i|fffd|X|fffd||151||fffd|l
    
    For n = 1 To data_count - 1 Step 1
        If cyclic_val(n) <= 0 Then
            If Abs(cyclic_val(n)) >= Abs(max_m_gf) Then
                max_m_gf = cyclic_val(n)
            End If
        End If
    Next n

End Sub
Public Sub Min_weight()               '|fffd||5cf|d|fffd||14f||fffd||fffd|l
    
    min_gf = cyclic_val(1)
    
    For n = 2 To n - 1 Step 1
        If cyclic_val(n) <= min_gf Then
            min_gf = cyclic_val(n)
        End If
    Next n
    
    If min_gf < min_limit Then
        limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd||fffd||fffd|
    End If

End Sub

Public Sub P_Min_weight()               '|fffd||5cf|d|fffd|v|fffd||fffd||fffd|X|fffd||14f||fffd||fffd|l
    If cyclic_val(1) > 0 Then
        min_p_gf = cyclic_val(1)
    Else
        min_p_gf = 0
        Exit Sub
    End If
   
    For n = 1 To data_count - 1 Step 1
        If cyclic_val(n) >= 0 Then
            If cyclic_val(n) <= min_p_gf Then
                min_p_gf = cyclic_val(n)
            End If
        Else
            min_p_gf = 0
        End If
    Next n
End Sub

Public Sub M_Min_weight()               '|fffd||5cf|d|fffd|}|fffd|C|fffd|i|fffd|X|fffd||14f||fffd||fffd|l
    If cyclic_val(1) < 0 Then
        min_m_gf = Abs(cyclic_val(1))
    Else
        min_m_gf = 0
        Exit Sub
    End If
    For n = 1 To data_count - 1 Step 1
        If cyclic_val(n) <= 0 Then
            If Abs(cyclic_val(n)) <= Abs(min_m_gf) Then
                min_m_gf = cyclic_val(n)
            End If
        Else
             min_m_gf = 0
        End If
    Next n
End Sub

Public Sub Weight_varp()               '|fffd||5cf|d|fffd||315||fffd||fffd|U
    w_varp = (cyclic_val(1) - weight_avg) ^ 2
    If (data_count > 2) Then
        For n = 2 To data_count - 1 Step 1
                w_varp = w_varp + (cyclic_val(n) - weight_avg) ^ 2
        Next n
        'w_varp = Sqr(w_varp / (data_count - 1))  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c1|A|fffd|W|fffd||fffd||fffd||38d||fffd||fffd||155|\|fffd||fffd|
        w_varp = w_varp / (data_count - 2)
    Else
        w_varp = 0
    End If
End Sub

Attribute VB_Name = "frmGrenzwert_B"
Attribute VB_Base = "0{835FA573-089D-44A6-AE5E-C96FE0C6ECFD}{A8506BBD-A7CB-4E26-A24A-F36ECAFE17EF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub CommandButton1_Click()
    'frmGrenzwert_B.Hide
    With frmMain_B.jdg_lbl
        .BackColor = &H808080
        .Caption = ""
        .ForeColor = &HC0C0C0
    End With
    Unload Me
End Sub

Public Sub UserForm_Initialize()
        init_form
        
        With frmGrenzwert_B.jdg_lbl
            If limit_jdg = 1 Then
                .BackColor = &HF96309
                .Caption = "OK"
                .ForeColor = &HFFFF80
            ElseIf limit_jdg = 0 Then
                .BackColor = COLOR_RED
                .Caption = "ERR"
                .ForeColor = &HC0C0FF
            End If
        End With
End Sub

Private Sub init_form()
    Me.Caption = CORP_SHORT + " " + XLANAME_K
    jdg_frame.Caption = text(53)    'Grenzwerte
    Label1.Caption = text(13)       'Oberer Grenzwert
    Label2.Caption = text(14)       'Unterer Grenzwert
    Label3.Caption = text(15)       'Ergebnis
    CommandButton1.Caption = text(43) 'Zur|fffd|ck zur vorherigen Seite
    Max_limit_lbl = FormatValue(max_limit, FMI_Status.komma_pos)
    Min_limit_lbl = FormatValue(min_limit, FMI_Status.komma_pos)
End Sub

Attribute VB_Name = "frmLanguage_B"
Attribute VB_Base = "0{40B7A6DE-1F15-4B57-9D0C-32D4A0478274}{99C00471-8D78-42F4-81E5-C0DAA6BF1087}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Function GetSelectLanguage() As Integer
    If (LanguageBtn1.value) Then
        GetSelectLanguage = IdGerman
    ElseIf (LanguageBtn2.value) Then
        GetSelectLanguage = IdEnglish
    ElseIf (LanguageBtn3.value) Then
        GetSelectLanguage = IdFrench
    ElseIf (LanguageBtn4.value) Then
        GetSelectLanguage = IdItalian
    ElseIf (LanguageBtn5.value) Then
        GetSelectLanguage = IdSpanish
    End If
End Function

Private Sub SetInitialLanguage(num As Integer)
    
    Select Case (num)
    Case IdGerman:
        LanguageBtn1.value = True
    Case IdEnglish:
        LanguageBtn2.value = True
    Case IdFrench:
        LanguageBtn3.value = True
    Case IdItalian:
        LanguageBtn4.value = True
    Case IdSpanish:
        LanguageBtn5.value = True
    Case Else:
        LanguageBtn1.value = True
    End Select
End Sub

Private Sub cmdOK_Click()
    SaveSetting XLANAME_K, "Settings", "Language", CStr(GetSelectLanguage())
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = CORP_SHORT + " " + XLANAME_K
    boFMIrunning = True
    SetInitialLanguage CInt(GetSetting(XLANAME_K, "Settings", "Language", "0"))
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If (CloseMode = vbFormControlMenu) Then
        cmdOK_Click
    End If
    boFMIrunning = False
End Sub
Attribute VB_Name = "frmLimit_B"
Attribute VB_Base = "0{06B14704-721C-41F9-B2F6-9AC78B297515}{B01BE774-90B6-4694-85AB-2F5896D20F25}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim damy_max As Double
Dim damy_min As Double
Dim send_limit As String

Private Sub Max_limit_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo MAX_ERROR
    
    If val(Max_limit_lbl.text) > 9999 Or val(Max_limit_lbl.text) < -9999 Then
        MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".Max_limit_lbl_Exit()"
        Max_limit_lbl.text = 0
        Exit Sub
    End If                          '|fffd||635e||fffd||fffd|
    
    
    If Mid(Max_limit_lbl.text, 1, 1) = "-" Then
        Max_limit_lbl.text = Mid(Max_limit_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(Max_limit_lbl.text) <> 1 And Mid(Max_limit_lbl.text, 1, 1) = "0" And Mid(Max_limit_lbl.text, 2, 1) <> ".")
        Max_limit_lbl.text = Mid(Max_limit_lbl.text, 2)
    Loop
    If m_flg = True Then
         Max_limit_lbl.text = "-" & Max_limit_lbl.text
         m_flg = False
    End If
    
    damy_max = Max_limit_lbl.text
    Exit Sub

MAX_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Max_limit_lbl_Exit()"
    Max_limit_lbl.text = 0

End Sub

Private Sub Min_limit_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    
    On Error GoTo MIN_ERROR
    If val(Min_limit_lbl.text) > 9999 Or val(Min_limit_lbl.text) < -9999 Then
        MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".Min_limit_lbl_Exit()"
        Min_limit_lbl.text = 0
        Exit Sub
    End If '|fffd||635e||fffd||fffd|
    
    If Mid(Min_limit_lbl.text, 1, 1) = "-" Then
        Min_limit_lbl.text = Mid(Min_limit_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(Min_limit_lbl.text) <> 1 And Mid(Min_limit_lbl.text, 1, 1) = "0" And Mid(Min_limit_lbl.text, 2, 1) <> ".")
        Min_limit_lbl.text = Mid(Min_limit_lbl.text, 2)
    Loop
    If m_flg = True Then
         Min_limit_lbl.text = "-" & Min_limit_lbl.text
         m_flg = False
    End If
    
    damy_min = Min_limit_lbl.text

Exit Sub

MIN_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Min_limit_lbl_Exit()"
    Min_limit_lbl.text = 0

End Sub

Private Sub Ok_btn_Click()
    Dim intRet As Integer
    Dim strMin As String
    Dim strMax As String
    
    If Not device_check Then Exit Sub
    
    If val(Max_limit_lbl.text) < val(Min_limit_lbl.text) Then
        intRet = MsgBox(text(58), vbYesNo + vbQuestion, XLANAME_K + ".Ok_btn_Click()")
        If intRet = vbNo Then
            Exit Sub
        End If
    End If


    'max_limit = Max_limit_lbl.text
    'min_limit = Min_limit_lbl.text
    strMax = FormatValue(Max_limit_lbl.text, FMI_Status.komma_pos)
    strMin = FormatValue(Min_limit_lbl.text, FMI_Status.komma_pos)
    max_limit = strMax
    min_limit = strMin
    max_limit_roh = double_to_long(max_limit, FMI_Status.komma_pos)
    min_limit_roh = double_to_long(min_limit, FMI_Status.komma_pos)
    USBWordCmd ID_SET_GRENZWERT, ID_MAX, max_limit_roh
    USBWordCmd ID_SET_GRENZWERT, ID_MIN, min_limit_roh
    SetGrenzwert ID_MAX
    SetGrenzwert ID_MIN
    Unload Me
End Sub

Private Sub Cancel_btn_Click()
    'frmLimit_B.Hide
    Unload Me
End Sub

Public Sub UserForm_Initialize()
    init_form
End Sub

Public Function zero_padding(para As String, after_len As Integer)
    para = Trim(para)
    zero_padding = para
    Do While Not Len(zero_padding) = after_len
        zero_padding = Mid(zero_padding, 1, 1) & "0" & Mid(zero_padding, 2, Len(zero_padding))
    Loop
End Function

Public Function send_limit_jdg() As Boolean

    If Not InStr(send_limit, ".") = 0 Then       '1000|fffd|{|fffd||fffd||fffd||fffd||fffd||302||fffd|0|fffd||209||fffd||fffd||302||182||fffd|
        MsgBox text(57), vbExclamation, XLANAME_K + ".send_limit_jdg()"
        send_limit_jdg = False
        Exit Function
    ElseIf Len(send_limit) > 5 Then              '1000|fffd|{|fffd||fffd||fffd||fffd||fffd||fffd|9999|fffd||20f||fffd||242||202||fffd||fffd||fffd||fffd||a347|
        MsgBox text(57), vbExclamation, XLANAME_K + ".send_limit_jdg()"
        send_limit_jdg = False
        Exit Function
    End If
    
    send_limit = zero_padding(send_limit, 5)
    send_limit_jdg = True
            
End Function

Private Sub init_form()
    Me.Caption = CORP_SHORT + " " + XLANAME_K
    Label1.Caption = text(13)       'Oberer Grenzwert
    Label2.Caption = text(14)       'Unterer Grenzwert
    Max_limit_lbl.text = FormatValue(max_limit, FMI_Status.komma_pos)
    Min_limit_lbl.text = FormatValue(min_limit, FMI_Status.komma_pos)
End Sub
Attribute VB_Name = "frmMain_B"
Attribute VB_Base = "0{DB200075-4125-48DC-9522-00D7F8A4675B}{EF5201B2-8B7C-4520-B197-16E1DD46B595}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim time_klick As Variant

Private Sub change_btn_Click()
    frmLimit_B.UserForm_Initialize
    frmLimit_B.Show
End Sub

Private Sub change_btn_2_Click()
    frmLimit_B.UserForm_Initialize
    frmLimit_B.Show
End Sub

Private Sub change_btn_3_Click()
    frmLimit_B.UserForm_Initialize
    frmLimit_B.Show
End Sub

Private Sub cmd_S1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If (CheckMouseUp(x, y, cmd_S1) = False) Then Exit Sub
    If Not device_check Then Exit Sub
    If cmd_S1.Caption = text(7) Then   'Falls mit "Start" beschriftet Einheit nochmal aktualisieren. Info wird sonst nirgends automatisch |fffd|bergeben.
        If (boOnline And geraet.PIC_Version > 309030) Then 'Bug bei V3.09.030, daher dort nicht einlesen!
            USBByteCmd ID_PS081_RAM_RD, RAM_MIRROR_P1, True  ' Info |fffd|ber Einheit holen
        End If
    End If
    USBByteCmd ID_TASTENDRUCK, 1
End Sub

'Private Sub cmd_S1_Click()
'    If Not device_check Then Exit Sub
'    USBByteCmd ID_TASTENDRUCK, 1, True
'End Sub



'Private Sub cmd_S2_Click()
'
'    If Not device_check Then Exit Sub
'
'    If (boOnline) Then
'        If geraet.memory_mode = 0 Then
'            Exit Sub
'        ElseIf (mem_data_count >= 1000) Then
'            MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".cmd_S2_Click()"
'            Exit Sub
'        End If
'    End If
'    USBByteCmd ID_TASTENDRUCK, 2, True
'End Sub
Private Sub cmd_S2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If (CheckMouseUp(x, y, cmd_S2) = False) Then Exit Sub
    If Not device_check Then Exit Sub
    If (boOnline) Then
        If FMI_Status.memory_mode = 0 Then
            Exit Sub
        ElseIf (FMI_Status.MemCount >= 1000) Then
            MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".cmd_S2_MousUp()"
            Exit Sub
        End If
    End If
    USBByteCmd ID_TASTENDRUCK, 2
End Sub

'Private Sub cmd_S3_Click()
'    If Not device_check Then Exit Sub
'    USBByteCmd ID_TASTENDRUCK, 4, True
'    If Not boOnline Then
'        USBByteCmd ID_PS081_RAM_RD, RAM_MIRROR_P1, True  ' Info |fffd|ber Komma und Memory-Mode holen
'    End If
'End Sub

Private Sub cmd_S3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    time_klick = Time
End Sub

Private Sub cmd_S3_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Dim dt_s As Variant
    Dim dauer_s As Variant
    If (CheckMouseUp(x, y, cmd_S3) = False) Then Exit Sub
    dt_s = (Time - time_klick) * 100000
    If (dt_s > 1) Then  'Lange gedr|fffd|ckt?
        USBByteCmd ID_TASTENDRUCK, &HC
    Else
        If Not device_check Then Exit Sub
        USBByteCmd ID_TASTENDRUCK, 4
        'Ab Version 3.11.004 werden Einheit und Kommaposition |fffd|ber ID_STATUS |fffd|bermittelt.
        'Ansonsten nur manuell abrufbar.
        If (cmd_S3.Caption = text(52) And geraet.PIC_Version < 311004) Then   'Falls mit "Einheit" beschriftet, diese intern weiterschalten. Info wird sonst nirgends automatisch |fffd|bergeben.
            USBByteCmd ID_PS081_RAM_RD, RAM_MIRROR_TYP, True  ' Info |fffd|ber Komma holen
            USBByteCmd ID_PS081_RAM_RD, RAM_MIRROR_P1, True  ' Info |fffd|ber Einheit holen
        End If
    End If
End Sub

Private Sub cmdRefEdit_Click()
    Dim myRng As Range
    Set myRng = Nothing
    On Error Resume Next
    Set myRng = Application.InputBox(Title:=XLANAME_K, prompt:=text(35) + " " + text(106), Type:=8)
    'Set myRng = Application.InputBox(Type:=8)
    On Error GoTo 0
    
    If myRng Is Nothing Then
    'user hit cancel
    Else
    'you have a range
        RefEdit = myRng.Address
        'ActiveSheet.Cell(RefEdit).Select
        ActiveSheet.Range(RefEdit).Select
    End If
End Sub

Private Sub Fugou_btn_1_Click()
    If Fugou_btn_1.value = True Then
        Fugou_btn_2.value = False
        P_load_2 = False
        M_load_2 = True
    Else
        Fugou_btn_2.value = True
        P_load_2 = True
        M_load_2 = False
    End If
End Sub

Private Sub Fugou_btn_2_Click()
    If Fugou_btn_2.value = True Then
        Fugou_btn_2.BackColor = &H8080FF
        Fugou_btn_1.value = False
        Fugou_btn_1.BackColor = &H8000000F
        P_load_2 = True
        M_load_2 = False
    Else
        Fugou_btn_2.BackColor = &H8000000F
        Fugou_btn_1.value = True
        Fugou_btn_1.BackColor = &H8080FF
        P_load_2 = False
        M_load_2 = True
    End If
End Sub

Private Sub Fugou_off_btn_1_Click()
    If Fugou_off_btn_1.value = True Then
        Fugou_off_btn_2.value = False
        P_off_load = False
        M_off_load = True
    Else
        Fugou_off_btn_2.value = True
        P_off_load = True
        M_off_load = False
    End If
End Sub

Private Sub Fugou_off_btn_2_Click()
    If Fugou_off_btn_2.value = True Then
        Fugou_off_btn_2.BackColor = &H8080FF
        Fugou_off_btn_1.value = False
        Fugou_off_btn_1.BackColor = &H8000000F
        P_off_load = True
        M_off_load = False
    Else
        Fugou_off_btn_2.BackColor = &H8000000F
        Fugou_off_btn_1.value = True
        Fugou_off_btn_1.BackColor = &H8080FF
        P_off_load = False
        M_off_load = True
    End If
End Sub

Private Sub Ite_lbl_Change()
    Ite_lbl.text = val(Ite_lbl.text)
End Sub
Private Sub Ite_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim pnt As Integer
    On Error GoTo ITE_ERROR
    
    If val(Ite_lbl.text) > 65000 Then
        Ite_lbl.text = 65000
    ElseIf val(Ite_lbl.text) < 0 Then
        Ite_lbl.text = 0
    End If
   
    Do While Mid(Ite_lbl.text, 1, 1) = "-" Or (Len(Ite_lbl.text) <> 1 And Mid(Ite_lbl.text, 1, 1) = "0")
        Ite_lbl.text = Mid(Ite_lbl.text, 2)
    Loop
    
    pnt = InStr(1, Ite_lbl.text, ".")
    If pnt <> 0 Then
        Ite_lbl.text = Mid(Ite_lbl.text, 1, pnt - 1)
    End If
    
    ite_num = Ite_lbl.text
    
    Exit Sub

ITE_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Ite_lbl_Exit()"
    Ite_lbl.text = 0
End Sub

Private Sub MultiPage_Change()
    If boInit Then Exit Sub
    'If Not device_check Then Exit Sub
    
    With frmMain_B
        .jdg_lbl.BackColor = &H808080
        .jdg_lbl.Caption = ""
        .jdg_lbl.ForeColor = &HC0C0C0
        .jdg_lbl_2.BackColor = &H808080
        .jdg_lbl_2.Caption = ""
        .jdg_lbl_2.ForeColor = &HC0C0C0
    End With
    
    'USBByteCmd ID_PS081_RAM_RD, RAM_STATE_MACHINE, True
    'USBByteCmd ID_GET_GRENZWERT, ID_MAX, True
    'USBByteCmd ID_GET_GRENZWERT, ID_MIN, True

    If MultiPage.value = 2 Then
        'USBByteCmd ID_PS081_RAM_RD, RAM_MIRROR_P1, True  ' Info |fffd|ber Komma und Memory-Mode holen
        'USBByteCmd ID_INFO, 5, True  ' Anzahl Werte im Memory anfordern
    ElseIf MultiPage.value = 3 Then
        get_info
    End If
    
End Sub

Private Sub RefEdit1_AfterUpdate()
    RefEditEnde
End Sub

Private Sub RefEdit1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    RefEditEnde
End Sub

Private Sub RefEdit1_Change()
    RefEditEnde
End Sub

Private Sub RefEdit1_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    RefEditEnde
End Sub

Private Sub RefEdit1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER)
    DisableTimer
End Sub

Private Sub RefEditEnde()
    wait 1
    EnableTimer TIMER_MS
End Sub

Private Sub S_trg_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo TRG_ERROR
    
    If val(S_trg_lbl.text) > 99999 Then
        S_trg_lbl.text = "99999"
    ElseIf val(S_trg_lbl.text) < -99999 Then
        S_trg_lbl.text = "-99999"
    End If
    
    If Mid(S_trg_lbl.text, 1, 1) = "-" Then
        S_trg_lbl.text = Mid(S_trg_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(S_trg_lbl.text) <> 1 And Mid(S_trg_lbl.text, 1, 1) = "0" And Mid(S_trg_lbl.text, 2, 1) <> ".")
        S_trg_lbl.text = Mid(S_trg_lbl.text, 2)
    Loop
    If m_flg = True Then
         S_trg_lbl.text = "-" & S_trg_lbl.text
         m_flg = False
    End If
    S_trg_num = S_trg_lbl.text                          '|fffd||635e||fffd||fffd|

    Exit Sub

TRG_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".S_Trg_lbl_Exit()"
    S_trg_lbl.text = 0

End Sub

Private Sub S_trg_off_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo TRG_OFF_ERROR
    
    If val(S_trg_off_lbl.text) > 99999 Then
        S_trg_off_lbl.text = "99999"
    ElseIf val(S_trg_off_lbl.text) < -99999 Then
        S_trg_off_lbl.text = "-99999"
    End If
    
    If Mid(S_trg_off_lbl.text, 1, 1) = "-" Then
        S_trg_off_lbl.text = Mid(S_trg_off_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(S_trg_off_lbl.text) <> 1 And Mid(S_trg_off_lbl.text, 1, 1) = "0" And Mid(S_trg_off_lbl.text, 2, 1) <> ".")
        S_trg_off_lbl.text = Mid(S_trg_off_lbl.text, 2)
    Loop
    If m_flg = True Then
         S_trg_off_lbl.text = "-" & S_trg_off_lbl.text
         m_flg = False
    End If
    S_trg_off_num = S_trg_off_lbl.text

    Exit Sub

TRG_OFF_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".S_trg_off_lbl_Exit()"
    S_trg_off_lbl.text = 0

End Sub

Private Sub Mem_box_Change()
    Dim usb_len As Long
    'Dim buff(0) As Byte
    
    If boInit Then Exit Sub
    If boOnline Then Exit Sub
    
    If Not device_check Then Exit Sub
    
    USBByteCmd ID_START_STOPP, 0, True
    USBByteCmd ID_TASTENDRUCK, &HC, True    ' Simulation S3 lange gedr|fffd|ckt, um in Idle-Mode zu gelangen
    SetMemoryCount 0
    ' Ab Version 3.09.032 auch ID_SET_MEM_MODE m|fffd|glich!
    USBFourByteCmd &HAB, &H79, &HEB, &H2A, &H9F
    FMI_Status.memory_mode = Mem_box.ListIndex
    FMI_Status.mirror_p1 = FMI_Status.mirror_p1 And &H3FFFFF
    If FMI_Status.memory_mode = ID_SINGLE_MEM Then
        FMI_Status.mirror_p1 = FMI_Status.mirror_p1 Or &H400000
    ElseIf FMI_Status.memory_mode = ID_CONTINUOUS_MEM Then
        FMI_Status.mirror_p1 = FMI_Status.mirror_p1 Or &H800000
    End If
    USBWordCmd ID_WRITE_PARAMETER, USER_EE_P1, FMI_Status.mirror_p1
    USBFourByteCmd &HAB, 0, 0, 0, 0
End Sub

Private Sub Trg_on_btn_Click()
    If Trg_on_btn Then
        Fugou_btn_2.Enabled = True
        Fugou_btn_1.Enabled = True
        S_trg_lbl.Enabled = True
        trg_on_en = True
    
    Else
        Fugou_btn_2.Enabled = False
        Fugou_btn_1.Enabled = False
        S_trg_lbl.Enabled = False
        trg_on_en = False
    End If
End Sub

Private Sub Trg_off_btn_Click()
    If Trg_off_btn Then
        Fugou_off_btn_2.Enabled = True
        Fugou_off_btn_1.Enabled = True
        S_trg_off_lbl.Enabled = True
        trg_off_en = True
    
    Else
        Fugou_off_btn_2.Enabled = False
        Fugou_off_btn_1.Enabled = False
        S_trg_off_lbl.Enabled = False
        trg_off_en = False
    End If
End Sub

Private Sub jdg_on_btn_Click()
    If Jdg_on_btn Then
        Jdg_on_btn_2.value = True
        
        jdg_flg = True
    Else
        Jdg_on_btn_2.value = False
                
        jdg_lbl.BackColor = &H808080
        jdg_lbl.Caption = ""
        jdg_lbl.ForeColor = &HC0C0C0
        jdg_lbl_2.BackColor = &H808080
        jdg_lbl_2.Caption = ""
        jdg_lbl_2.ForeColor = &HC0C0C0
        jdg_flg = False
    End If
End Sub

Private Sub jdg_on_btn_2_Click()
    If Jdg_on_btn_2 Then
        Jdg_on_btn.value = True
       
        jdg_flg = True
    Else
        Jdg_on_btn.value = False
        
        jdg_lbl.BackColor = &H808080
        jdg_lbl.Caption = ""
        jdg_lbl.ForeColor = &HC0C0C0
        jdg_lbl_2.BackColor = &H808080
        jdg_lbl_2.Caption = ""
        jdg_lbl_2.ForeColor = &HC0C0C0
        jdg_flg = False
    End If
End Sub

Private Sub UserForm_Initialize()
    Dim bRet As Boolean
    Dim i As Integer
    
    'Me.MousePointer = fmMousePointerHourGlass
    init_form
    usb_len_err = False
    stop_btn_flg = False
    boFMIrunning = True
    'DisableTimer
    
    torikomi(0) = STR_10HZ
    torikomi(1) = STR_20HZ
    torikomi(2) = STR_50HZ
    torikomi(3) = STR_100HZ
    'torikomi(4) = STR_300HZ
    For i = 0 To 3  ' 300 Hz schafft Excel nicht mehr!
        Torikomi_box.AddItem torikomi(i)
    Next
    Torikomi_box.value = torikomi(0)
    
    m_modo(0) = STR_NO_MEM
    m_modo(1) = STR_SINGLE_MEM
    m_modo(2) = STR_CONTINUOUS_MEM

    For i = 0 To 2
        Mem_box.AddItem m_modo(i)
    Next
    boInit = True
    MultiPage.value = 0
    
    P_load_2 = True
    M_load_2 = False
    P_off_load = True
    M_off_load = False
    
    Fugou_btn_2.Enabled = False
    Fugou_btn_2.value = True
    Fugou_btn_1.Enabled = False
    Fugou_btn_1.value = False
    Fugou_off_btn_2.Enabled = False
    Fugou_off_btn_2.value = True
    Fugou_off_btn_1.Enabled = False
    Fugou_off_btn_1.value = False
    
    S_trg_lbl.Enabled = False
    S_trg_off_lbl.Enabled = False
    
    trg_on_en = False
    trg_off_en = False
    jdg_flg = False
    
    Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    Trg_on_btn.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = True
    
    boInit = False
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    If device_check Then
        boAktualisieren = True
        EnableTimer TIMER_MS
        USBByteCmd ID_GET_GRENZWERT, ID_MAX, True    'Grenzwert Max
        USBByteCmd ID_GET_GRENZWERT, ID_MIN, True    'Grenzwert Min
        USBByteCmd ID_INFO, 5, True      ' Anzahl Werte im Memory anfordern
        USBByteCmd ID_PS081_RAM_RD, RAM_MIRROR_P1, True  ' Info |fffd|ber Einheit und Memory-Mode holen
        'USBByteCmd ID_START_STOPP, 0
        boAktualisieren = False
    End If
    
    If (ENTWICKLUNGSVERSION = 0) Then
        Dim boValid As Boolean
        If boCustomized Then
            If Customizing = 0 Then
                boValid = True
            Else
                boValid = False
            End If
        ElseIf ((geraet.variante = VAR_BS30) Or (geraet.variante = VAR_BS50)) Then
            boValid = True
        Else
            boValid = False
        End If
        If boValid Then
            SetColor
        Else
            MsgBox text(102) + " '" + variante_to_string(geraet.variante, geraet.f_max, boCustomized, Customizing) + "'!", vbCritical, XLANAME_K + ".Userform_Initialize()"
            USB_End
        End If
    ElseIf (ENTWICKLUNGSVERSION = 2) Then   ' Nur f|fffd|r W30 (spezielle Kunden)
        If (geraet.variante = VAR_W30) Then
            boValid = True
        Else
            boValid = False
        End If
        If boValid Then
            SetColor
        Else
            MsgBox text(102) + " '" + variante_to_string(geraet.variante, geraet.f_max, boCustomized, Customizing) + "'!", vbCritical, XLANAME_K + ".Userform_Initialize()"
            USB_End
        End If
    Else
        MsgBox "Achtung!" + vbCr + "Entwicklungsversion f|fffd|r alle Ger|fffd|tetypen.", vbExclamation, XLANAME_K
    End If
End Sub

Private Sub UserForm_Activate()
    State.Caption = text(38)            'Bereit
    State.BackColor = &H80FF80

    EnableTimer TIMER_MS                ' erforderlich wenn man vom Graph oder frmGrenzwert_B zur|fffd|ckkommt
    USBByteCmd ID_STATUS, 1             ' Statustelegramm einschalten
    graph_on_flg = False
            
    'P_load_2 = True
    'M_load_2 = False
    'P_off_load = True
    'M_off_load = False
    
    
    'Fugou_btn_2.Enabled = False
    'Fugou_btn_2.value = True
    'Fugou_btn_1.Enabled = False
    'Fugou_btn_1.value = False   '@af
    'Fugou_off_btn_2.Enabled = False
    'Fugou_off_btn_2.value = True
    'Fugou_off_btn_1.Enabled = False
    'Fugou_off_btn_1.value = False
    
    'S_trg_lbl.Enabled = False
    'S_trg_off_lbl.Enabled = False
   
    g_cell_dir = TATE                           ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||fffd||fffd||fffd|
   
    limit_jdg = 1

    'trg_on_en = False
    'trg_off_en = False
    'jdg_flg = False
    
    'Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    'Trg_on_btn.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    'Trg_off_btn.Enabled = True
            
    Graph_on_btn.Enabled = True                     '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    'Start_btn.Enabled = True                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = True                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = True                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = True                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = True                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    RefEdit.Enabled = True                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = True                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = True
End Sub

'************************
'   |fffd|t|fffd|H|fffd|[|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|[|fffd|h
'************************
Public Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    form_close_flg = True   ' Damit streaming() zwar beendet aber anschlie|fffd|end stop_routine() nicht mehr aufgerufen wird.
    boFMIrunning = False
    USB_End
    End
End Sub

'**************
'   OK|fffd|{|fffd|^|fffd||fffd|
'**************
Private Sub start_btn_click()
    cell_limit_flg = True
    
    If Not device_check Then Exit Sub
    
    paketlen = 10
    Select Case frmMain_B.Torikomi_box.ListIndex
        Case ID_10HZ:
             teiler = 10
        Case ID_20HZ:
            teiler = 5
        Case ID_50HZ:
            teiler = 2
        Case ID_100HZ:
            teiler = 1
    End Select
    
    If FMI_Status.mode <> 1 Then                     ' Wir wollen immer einen Takt von 900 Hz haben. Sonst passt eingestellte Abtastrate nicht.
        'If boOnline Then start_stop_toggle      ' Nachfolgende Abfragen gehen nur Offline
        USBByteCmd ID_START_STOPP, 0, True
        USBByteCmd ID_SET_MODE, 1, True     ' Betriebsart PeakIstwert einstellen
        ' weil das Status-Telegramm abgeschaltet wird und diese Info ggf. nicht mehr angkommt
        FMI_Status.IdAnzeige = ID_ISTWERT
        USBByteCmd ID_DELETE_MEMORY, 1, True
        SetMemoryCount 0
    End If
    wait 1
    If Not boOnline Then
        'start_stop_toggle
        USBByteCmd ID_START_STOPP, 1, True          ' Abtastung starten
        'wait 1
    End If
     
    ' Zyklische Online-Erfassung starten
    USBByteCmd ID_STATUS, 0, True                  'Statustelegramm unterbrechen
    wait 1
    USBTwoByteCmd ID_MEASUREMENT, 2, paketlen, True 'Zyklische Messwert|fffd|bertragung der skalierten Weret starten
    wait 1
    boCyclic = True
    last_index = 0
    data_count = 1  ' data_count(0) wird nirgends verwendet!
    DisableTimer

    ite_num = Abs(Ite_lbl.text)                     'Anzahl Werte bis Stopp
    
    If ite_num = 0 Then
        ite_num = 65000
    End If
    
    f_sheet_name = ActiveSheet.Name
    data_count = 1
    
    trg_on_flg = False
    trg_off_flg = False
    trg_on_flanke_en = False
    trg_off_flanke_en = False
    
    S_trg_num = S_trg_lbl.text                      '2nd|fffd|g|fffd||fffd||fffd|K
    S_trg_off_num = S_trg_off_lbl.text
   
    limit_jdg = 1                                   '|fffd||327a||fffd||fffd||fffd||fffd||fffd||83c9||fffd||fffd||fffd|l
    
    If Graph_on_btn.value = True Then
        graph_on_flg = True
    Else
        graph_on_flg = False
    End If
    If Jdg_on_btn.value = True Or Jdg_on_btn_2.value = True Then
        jdg_flg = True
    Else
        jdg_flg = False
    End If
    
    'max_limit = Max_limit_lbl.Caption             'oberer Grenzwert
    'min_limit = Min_limit_lbl.Caption             'unterer Grenzwert
    
    g_areas = RefEdit.text
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    first_Row = ActiveCell.row                      ' |fffd||635e||fffd|J|fffd|n|fffd||fffd||fffd||303|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    first_Col = ActiveCell.Column
    
    RefEdit.text = ""
    
    If frmMain_B.Graph_on_btn Then
        outp_mdl.Sheet_move
    End If
    
    Ite_lbl.Enabled = False                         '|fffd||635e||fffd||fffd|
    Trg_on_btn.Enabled = False                    '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = False
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    Fugou_off_btn_2.Enabled = False
    Fugou_off_btn_1.Enabled = False
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    S_trg_off_lbl.Enabled = False
    Graph_on_btn.Enabled = False                    '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = False                       '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = True                         '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = False                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = False                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = False                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    RefEdit.Enabled = False                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = False                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = False
    Torikomi_box.Enabled = False
    MultiPage.tandoku_page.Enabled = False
    MultiPage.mem_page.Enabled = False
    cmd_S1.Enabled = False
    cmd_S2.Enabled = False
    cmd_S3.Enabled = False
    Zero_btn.Enabled = False
    Peak_reset_btn.Enabled = False
    
    State.Caption = text(41)            'warten
    State.BackColor = &H80FFFF
    
    frmMain_B.jdg_lbl.BackColor = &H808080
    frmMain_B.jdg_lbl.Caption = ""
    frmMain_B.jdg_lbl.ForeColor = &HC0C0C0
    
    Label_Dauer.Caption = "0"
    streaming
       
    Exit Sub
Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".start_btn_click()"
    
    Exit Sub
End Sub

Private Sub stop_btn_Click()
    stop_btn_flg = True
End Sub

Public Sub stop_routine()
    Dim n As Long
        
    EnableTimer TIMER_MS
    USBByteCmd ID_START_STOPP, 0, True ' Abtastung stoppen. Wenn nur Zyklische |fffd|bertragung ausgeschaltet wird, h|fffd|ngt sich gelegentlich die USB-Verbindung zum Ger|fffd|t auf.
    wait 1
    USBByteCmd ID_STATUS, 1, True                  'Statustelegramm wieder starten

    boCyclic = False
    SetColor
    
    Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    Trg_on_btn.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = True
    
    If Trg_on_btn Then
        Fugou_btn_2.Enabled = True
        Fugou_btn_1.Enabled = True
        S_trg_lbl.Enabled = True
    End If
               
    If Trg_off_btn Then
        Fugou_off_btn_2.Enabled = True
        Fugou_off_btn_1.Enabled = True
        S_trg_off_lbl.Enabled = True
    End If
               
    Graph_on_btn.Enabled = True                     '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    'Start_btn.Enabled = True                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = True                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = True                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = True                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = True                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    RefEdit.Enabled = True                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = True                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = True
    MultiPage.renzoku_page.Enabled = True
    MultiPage.tandoku_page.Enabled = True
    MultiPage.mem_page.Enabled = True
    Torikomi_box.Enabled = True
    cmd_S1.Enabled = True
    cmd_S2.Enabled = True
    cmd_S3.Enabled = True
    Zero_btn.Enabled = True
    Peak_reset_btn.Enabled = True
    
'-------------------
    State.Caption = text(38)            'Bereit
    State.BackColor = &H80FF80
   
    calc_mdl.weight_average
    calc_mdl.Max_weight
    calc_mdl.Min_weight
    calc_mdl.Weight_varp
    calc_mdl.P_Max_weight
    calc_mdl.M_Max_weight
    calc_mdl.P_Min_weight
    calc_mdl.M_Min_weight
    
    If frmMain_B.Graph_on_btn Then
        DisableTimer
        frmMain_B.Hide
        outp_mdl.mk_fig
        
        If frmMain_B.Jdg_on_btn.value = True Then
            frmGrenzwert_B.UserForm_Initialize
            frmGrenzwert_B.Show
        Else
            not_frmGrenzwert_B.Show
        End If

        Sheets(f_sheet_name).Activate
        Sheets(f_sheet_name).Cells(first_Row, first_Col).Select
        frmMain_B.Show
        EnableTimer TIMER_MS
    Else
        On Error Resume Next
        ActiveSheet.Cells(first_Row, first_Col + 1).Activate
        With frmMain_B.jdg_lbl
            If jdg_flg = True Then
                If limit_jdg = 1 Then
                    .BackColor = &HF96309
                    .Caption = "OK"
                    .ForeColor = &HFFFF80
                ElseIf limit_jdg = 0 Then
                    .BackColor = COLOR_RED
                    .Caption = "ERR"
                    .ForeColor = &HC0C0FF
                End If
            Else
                .BackColor = &H808080
                .Caption = ""
                .ForeColor = &HC0C0C0
            End If
        End With
    End If
End Sub

Private Sub Mem_clear_btn_Click()
    Dim usb_len As Long
    Dim intRet As Integer
     
    ' Ist auch online erlaubt!
    
    If Not device_check Then Exit Sub
    
    
    intRet = MsgBox(text(50), vbYesNo + vbQuestion, CORP_SHORT + " FMI_connect_USB")
    
    If intRet = vbYes Then
        'USBByteCmd ID_DELETE_MEMORY, 1, True
        'Erst GetMode dann SetMode, damit in Idle-Maske gegangen wird. Dadurch Speicher automatisch gel|fffd|scht
        USBByteCmd ID_GET_MODE, 0   'Parameter nur Dummy
        wait 1
        USBByteCmd ID_SET_MODE, FMI_Status.mode 'um in Idle-Mode zu wechseln, den Mode setzen
    End If
End Sub

Private Sub Mem_input_btn_Click()
    'Dim buff(15) As Byte
    Dim usb_len As Long
    Dim adr As Byte
    
    If boOnline Then Exit Sub
    If Not device_check Then Exit Sub
    
    If FMI_Status.MemCount = 0 Or FMI_Status.memory_mode = 0 Then
        MsgBox text(51), vbOKOnly + vbExclamation, XLANAME_K
        Exit Sub
    End If
    
    g_areas = RefEdit.text
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    RefEdit.text = ""
    Application.Cursor = xlWait
    usb_mdl.data_in
    Application.Cursor = xlDefault
    Exit Sub
Range_err:
    Application.Cursor = xlDefault
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".memd_data_get()"
End Sub

Private Sub Data_in_btn_Click()
    If Not device_check Then Exit Sub

    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
    
    g_areas = RefEdit.text
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    RefEdit.text = ""
    USBByteCmd ID_PS081_RAM_RD, RAM_ISTWERT, True
    outp_mdl.cell_output_single
    Exit Sub
  
Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Data_in_btn_Click()"
End Sub

Private Sub Peak_in_btn_Click()
    If Not device_check Then Exit Sub
    
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
       
    g_areas = RefEdit.text
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit.text = ""
    USBByteCmd ID_PS081_RAM_RD, RAM_PEAK_PLUS, True
    USBByteCmd ID_PS081_RAM_RD, RAM_PEAK_MINUS, True
    outp_mdl.cell_output_peak
    Exit Sub

Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Peak_in_btn_Click()"
End Sub

Private Sub Peak_reset_btn_Click()
    USBByteCmd ID_TARA, 1, True  ' PeakPlus zur|fffd|cksetzen
    USBByteCmd ID_TARA, 2, False  ' PeakMinus zur|fffd|cksetzen
End Sub

Private Sub Zero_btn_Click()
    USBByteCmd ID_TARA, 0, True  ' Istwert zur|fffd|cksetzen
End Sub

Private Sub OptBtn_tate_Click()
    g_cell_dir = TATE                           ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
   
End Sub

Private Sub OptBtn_yoko_Click()
    g_cell_dir = YOKO                           ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
End Sub

Public Sub SetColor()
    If boOnline Then
        Mem_input_btn.Enabled = False
        Mem_clear_btn.Enabled = False
        Mem_box.Enabled = False
        change_btn.Enabled = False
        change_btn_2.Enabled = False
        change_btn_3.Enabled = False
    Else
        Mem_input_btn.Enabled = True
        Mem_clear_btn.Enabled = True
        Mem_box.Enabled = True
        change_btn.Enabled = True
        change_btn_2.Enabled = True
        change_btn_3.Enabled = True
        boMemory = False
    End If
    
    'If boMemory And boOnline Then
    '    With cmd_S2
    '        .BackColor = COLOR_FLESH
    '        .Caption = text(22) + " " + text(8)     'Memory stopp
    '    End With
    'Else
    '    With cmd_S2
    '        .BackColor = &HC0FFC0
    '        .Caption = text(22) + " " + text(7)     'Memory start
    '    End With
    'End If
End Sub

Public Sub start_stop_toggle()
    If device_check Then
        If Not boOnline Then
            USBByteCmd ID_INFO, 3, True             ' Kommainfo holen
            USBByteCmd ID_GET_MODE, 1, True         '
            USBByteCmd ID_START_STOPP, 1, True      ' Abtastung starten
            If FMI_Status.memory_mode = ID_CONTINUOUS_MEM Then
                USBByteCmd ID_INFO, 5, True          ' Anzahl Werte im Memory anfordern
                If (FMI_Status.MemCount < 1000) Then
                    boMemory = True
                End If
            End If
            SetColor
        Else
            USBByteCmd ID_START_STOPP, 0, True ' Abtastung stoppen
            boMemory = False
            SetColor
        End If
    End If
    SetColor
    USBByteCmd ID_INFO, 5, True           ' Anzahl Daten in Memory holen
End Sub

Private Sub init_form()
    Me.Caption = CORP_SHORT + " " + XLANAME_K
    MultiPage.renzoku_page.Caption = text(0)      'Kontinuierlich
    MultiPage.tandoku_page.Caption = text(16)     'Einzelwerte
    MultiPage.mem_page.Caption = text(22)         'Speicher
    Frame51.Caption = text(0)           'Kontinuierlich
    Label117.Caption = text(1)          'Datens|fffd|tze
    Label118.Caption = text(3)          'Abtastrate
    Label136.Caption = text(7)          'Start
    Label134.Caption = text(8)          'Stopp
    Frame43.Caption = text(11)          'Grenzwert|fffd|berwachung
    Frame46.Caption = text(11)          'Grenzwert|fffd|berwachung
    Frame58.Caption = text(11)          'Grenzwert|fffd|berwachung
    Jdg_on_btn.Caption = text(5)        'Ein
    Jdg_on_btn_2.Caption = text(5)      'Ein
    Trg_on_btn.Caption = text(5)        'Ein
    Trg_off_btn.Caption = text(5)       'Ein
    change_btn.Caption = text(12)       'Eingabe
    change_btn_2.Caption = text(12)     'Eingabe
    change_btn_3.Caption = text(12)     'Eingabe
    Label103.Caption = text(13)         'Oberer Grenzwert
    Label104.Caption = text(14)         'Unterer Grenzwert
    Label125.Caption = text(13)         'Oberer Grenzwert
    Label126.Caption = text(14)         'Unterer Grenzwert
    Label131.Caption = text(13)         'Oberer Grenzwert
    Label132.Caption = text(14)         'Unterer Grenzwert
    Label107.Caption = text(15)         'Ergebnis
    Label113.Caption = text(15)         'Ergebnis
    Label116.Caption = text(9)          'Kopfdaten
    Label124.Caption = text(9)          'Kopfdaten
    Header_on_btn.Caption = text(5)     'Ein
    Header_on_btn_2.Caption = text(5)   'Ein
    Label109.Caption = text(10)         'Grafik
    Graph_on_btn.Caption = text(5)      'Ein
    Frame53.Caption = text(16)          'Einzelwerte
    Data_in_btn.Caption = text(17)      'Aktuelle Daten
    Peak_in_btn.Caption = text(18)      'Spitzenwerte
    Frame10.Caption = text(19)          'Zelle
    Opt_btn_tate.Caption = text(20)     'Unten
    Opt_btn_yoko.Caption = text(21)     'Rechts
    Frame56.Caption = text(23)          'Speichermodus
    FrameDatens|fffd|tze.Caption = text(29)  'Anzahl gespeicherte Daten
    Frame54.Caption = text(26)          'Gespeicherte Daten
    Mem_input_btn.Caption = text(27)    'Importieren
    Mem_clear_btn.Caption = text(28)    'L|fffd|schen
    Frame12.Caption = text(32)          'Zur|fffd|cksetzen
    Zero_btn.Caption = text(33)         'Tarieren
    Peak_reset_btn.Caption = text(18)   'Spitzenwerte
    Frame7.Caption = text(35)           'Start Zelle
    Frame39.Caption = text(36)          'Status
    Start_btn.Caption = text(7)         'start
    Stop_btn.Caption = text(8)          'Stopp
End Sub

Private Sub get_info()
    LabelVariante.Caption = text(104) + ": " + variante_to_string(geraet.variante, geraet.f_max, boCustomized, Customizing)
    LabelFmax.Caption = "F_max: " + CStr(geraet.f_max) + " N"
    LabelSerNr.Caption = text(65) + ": " + geraet.seriennr
    LabelKalibDate.Caption = text(72) + ": " + geraet.kalibrierdatum
    LabelGravitation.Caption = text(101) + ": " + Format(CStr(gravitation_to_double(geraet.gravitation)), "0.000000") + " m/s|fffd|"
    LabelFirmwareA.Caption = "Firmware A: " + geraet.firmware_PIC
    LabelFirmwareB.Caption = "Firmware B: " + geraet.firmware_PS081 + vbCrLf
End Sub
Attribute VB_Name = "main_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************
' |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|

Public Const ENTWICKLUNGSVERSION = 0    '0 = Serie, 1 = Axel (alle Ger|fffd|te), 2 = mit W30

'F|fffd|r FMI_B_Connect folgendes zu tun:
' - XLANAME_K umbennen in FMI_B_Connect
' - alle frmXXX_S und deren Verwendung umbennen in frmXXX_B
' - ver_proc_k_fmi_s umbenennen in ver_proc_k_fmi_b

Public Const XLANAME_K = "FMI_B_Connect"
Public Const VERSION_K = "V3.02.004 (07/2015)"
Public Const INFO = "Version information"

Public Const CORP1 = "ALLURIS GmbH & Co. KG"
Public Const CORP1_SHORT = "ALLURIS"
'Public Const CORP2 = "Electromatic Equipment Co., Inc."
'Public Const CORP2_SHORT = "CHECKLINE"

'**********************************************************
'**********************************************************
'**********************************************************
'Hier Eintragen, f|fffd|r welche Firma kompiliert werden soll. '
'                                                         '
Public Const CORP_USED = CORP1                            '
Public Const CORP_SHORT = CORP1_SHORT                     '
'**********************************************************
'**********************************************************
'**********************************************************

'Public Const DEFAULT_PATH = "C:\" + CORP_SHORT + "\"

' |fffd|\|fffd||fffd||fffd|F|fffd|R|fffd|[|fffd|h
Public Const COLOR_FLESH = &HC0E0FF
Public Const COLOR_GREEN = &HFF00&
Public Const COLOR_RED = &HFF&
Public Const COLOR_YELLOW = &HFFFF&

' |fffd|Z|fffd||fffd||fffd||311||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const TATE = 0      ' |fffd|c|fffd||fffd||fffd||fffd|
Public Const YOKO = 1      ' |fffd||fffd||fffd||fffd||fffd||fffd|

'Combobox f|fffd|r Frequenzwahl
Public torikomi(5) As String
Public Const STR_10HZ = "10 Hz"
Public Const STR_20HZ = "20 Hz"
Public Const STR_50HZ = "50 Hz"
Public Const STR_100HZ = "100 Hz"
Public Const STR_300HZ = "300 Hz"

Public Const ID_10HZ = 0
Public Const ID_20HZ = 1
Public Const ID_50HZ = 2
Public Const ID_100HZ = 3
Public Const ID_300HZ = 4

'Combobox f|fffd|r Memory-Mode
Public m_modo(3) As String
Public Const STR_NO_MEM = "No Memory"
Public Const STR_SINGLE_MEM = "Single Memory Mode"
Public Const STR_CONTINUOUS_MEM = "Continuous Memory Mode"

Public Const ID_NO_MEM = 0
Public Const ID_SINGLE_MEM = 1
Public Const ID_CONTINUOUS_MEM = 2


Public XLS_version As Integer

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||3d0||fffd|
'**************************
Public g_areas As Variant               ' |fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd|G|fffd||fffd||fffd|A
Public g_cell_dir As Integer            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public g_hdrout As Boolean              ' |fffd|w|fffd|b|fffd|_|fffd|o|fffd||357|L/|fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public ite_num As Long                  '|fffd||151||fffd||635e||fffd|f|fffd|[|fffd|^|fffd||fffd|
Public data_count As Long               '|fffd||fffd||835e||fffd||42f83|f|fffd|[|fffd|^|fffd||fffd|
'Public renzoku_data(65100) As String    '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^
Public first_Row As Long                '|fffd||14f||fffd||fffd||303|Z|fffd||fffd||fffd||292|u
Public first_Col As Long
Public S_trg_num As Double              '2nd|fffd|g|fffd||fffd||fffd|K
Public S_trg_off_num As Double
Public trg_on_flg As Boolean            'Signalisiert das Triggerereignis zum Einschalten
Public trg_off_flg As Boolean           'Signalisiert das Triggerereignis zum Ausschalten
Public trg_on_flanke_en As Boolean      'Signalisiert, ob Triggerwert schon einmal |fffd|ber- bzw. unterschritten war f|fffd|r eine Flanke
Public trg_off_flanke_en As Boolean     'Signalisiert, ob Triggerwert schon einmal |fffd|ber- bzw. unterschritten war f|fffd|r eine Flanke
Public trg_on_en As Boolean             'Signalisiert, ob Einschalttrigger aktiviert
Public trg_off_en As Boolean            'Signalisiert, ob Ausschalttrigger aktiviert
Public P_load_2 As Boolean              '|fffd|}|fffd|g|fffd||fffd||fffd|K|fffd||752||fffd|
Public M_load_2 As Boolean
Public P_off_load As Boolean
Public M_off_load As Boolean
Public weight_avg As Double             '|fffd||fffd||fffd||fffd||5cf|d|fffd||fffd||fffd||3d2|l
Public max_gf As Double                 '|fffd||151||fffd|l
Public min_gf As Double                 '|fffd||14f||fffd||fffd|l
Public max_p_gf As Double               '+|fffd||151||fffd|l
Public min_p_gf As Double               '+|fffd||14f||fffd||fffd|l
Public max_m_gf As Double               '-|fffd||151||fffd|l
Public min_m_gf As Double               '-|fffd||14f||fffd||fffd|l
Public w_varp As Double                 '|fffd||fffd||fffd|U
Public max_limit_roh As Long
Public max_limit As Double              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l
Public min_limit_roh As Long
Public min_limit As Double              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|l
Public limit_jdg As Integer             '|fffd||327a||fffd||fffd||fffd||fffd||fffd||fffd|
Public jdg_flg As Boolean               '|fffd||327a||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public Sheet_name As String             '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd|
Public Sheet_num As Integer             '|fffd|V|fffd|[|fffd|g|fffd||50d||fffd|
Public graph_sheet_name As String       '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||fffd|
Public f_sheet_name As String           '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||693||fffd||fffd|O|fffd||fffd|SHEET
Public graph_on_flg As Boolean          '|fffd|O|fffd||fffd||fffd|t|fffd||c42c||fffd|t|fffd||fffd||fffd|O
'Public torikomi_name As String          '|fffd|H|fffd|H|fffd|H|fffd|H

Public mem_name_num As Integer
'Public tandoku_data As String           '|fffd|P|fffd||183|f|fffd|[|fffd|^

Public single_val As Double             ' statt tandoku_data
Public cyclic_val(65100) As Double      ' statt renzoku_data; Array, damit ggf. auch ein Diagramm gezeichnet werden kann
'Public cyclic_val(65100) As Long      ' statt renzoku_data; Array, damit ggf. auch ein Diagramm gezeichnet werden kann

'Public P_peak_data As String            '+|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^
Public PeakPlusVal As Double
'Public M_peak_data As String            '-|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^
Public PeakMinusVal As Double
Public stop_btn_flg As Boolean          '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public form_close_flg As Boolean

Public sing_p_max As Double
Public sing_p_min As Double
Public sing_m_max As Double
Public sing_m_min As Double
Public sing_avg As Double
Public sing_dev As Double
Public sing_load(1000) As Double

'Public mem_data_count As Long
Public usb_len_err As Boolean

Public cell_limit_flg As Boolean
Public mem_exit_flg As Boolean
Public boFMIrunning As Boolean

Private Sub frmMain_B_show()
    Dim bRet As Boolean
    Dim aa As Integer
    Dim intRet As Integer
    Dim myBook As Workbook
    Dim book_open As Integer
    book_open = 0
    init_language CInt(GetSetting(XLANAME_K, "Settings", "Language", "0"))
    For Each myBook In Workbooks
        book_open = book_open + 1
    Next myBook
    If book_open = 0 Then
        MsgBox text(44), vbExclamation, XLANAME_K
        Exit Sub
    End If
    
    stop_btn_flg = False
    form_close_flg = False
    boCyclic = False
    Application.Cursor = xlWait
    If (USB_Startup) Then
        boWatchdog = True
    End If
    Application.Cursor = xlDefault
    frmMain_B.Show
End Sub

'*************************
'   Versionsinfo anzeigen
'*************************
Private Sub ver_proc_k_fmi_b()
    Dim ver As String
    XLS_version = val(Application.Version)
    ver = XLANAME_K & " " & VERSION_K
    
    MsgBox ver & vbCrLf & "Excel Version " & XLS_version & vbCrLf & vbCrLf & CORP_USED, vbOKOnly, INFO
End Sub

Private Sub frmLanguage_B_show()
    If (boFMIrunning) Then Exit Sub
    frmLanguage_B.Show
End Sub

Public Function gravitation_to_long(value As Double) As Long
    gravitation_to_long = (value - 9) * (2 ^ 24)
End Function

Public Function gravitation_to_double(value As Long) As Double
    gravitation_to_double = Round((value / (2 ^ 24) + 9), 6)    '6 Nachkommastellen
End Function

Public Function variante_to_string(id_variante As Long, maximalkraft As Long, customized As Boolean, Customizing As Long) As String
    Dim strTyp As String
    Dim boStandard As Boolean
    Dim strDevice As String
    
    If maximalkraft < 10 Then
        strTyp = "A" + CStr(maximalkraft)
    ElseIf maximalkraft < 100 Then
        strTyp = "B" + CStr(CInt(maximalkraft / 10))
    ElseIf maximalkraft < 1000 Then
        strTyp = "C" + CStr(CInt(maximalkraft / 100))
    Else
        strTyp = "K" + CStr(CInt(maximalkraft / 1000))
    End If
   
    If (customized = False) Then
        strDevice = "FMI-S"
        boStandard = True
    ElseIf (Customizing = 0) Then
        strDevice = "FMI-B"
        boStandard = True
    Else
        boStandard = False
    End If
    If boStandard Then
        Select Case id_variante
            Case VAR_BS10:
                variante_to_string = strDevice & "10" & strTyp
            Case VAR_BS20:
                variante_to_string = strDevice & "20" & strTyp
            Case VAR_BS30:
                variante_to_string = strDevice & "30" & strTyp
            Case VAR_BS50:
                variante_to_string = strDevice & "50" & strTyp
            Case VAR_W10:
                variante_to_string = "FMT-W10" & strTyp
            Case VAR_W30:
                variante_to_string = "FMT-W30" & strTyp
            Case VAR_W40:
                variante_to_string = "FMT-W40" & strTyp
            Case VAR_W20:
                variante_to_string = "FMT-W20" & strTyp
            Case Else
                variante_to_string = "FMx-xxx" & strTyp
        End Select
    Else
        Select Case Customizing
            Case 1:
                variante_to_string = "FMT-315" & strTyp
            Case 2:
                variante_to_string = "CTT-200" & strTyp
            Case 3:
                variante_to_string = "CTT-300" & strTyp
            Case Else
                variante_to_string = "FMx-xxx" & strTyp
        End Select
    End If
End Function

Public Function device_check()
    If USB_OutPipe = INVALID_HANDLE_VALUE Or USB_InPipe = INVALID_HANDLE_VALUE Then
        CloseMPUSBDevice    ' Falls nur 1 Handle invalid, beide schlie|fffd|en!
        frmMain_B.State.Caption = text(42)          'Kommunikationsfehler
        frmMain_B.State.BackColor = COLOR_RED
        device_check = False
        DisableTimer
    Else
        device_check = True
    End If
End Function

Public Function FormatValue(value As Double, komma As Long) As String
    If (komma = 0) Then
        FormatValue = Format$(value, "0")
    ElseIf (komma = 1) Then
        FormatValue = Format$(value, "0.0")
    ElseIf (komma = 2) Then
        FormatValue = Format$(value, "0.00")
    ElseIf (komma = 3) Then
        FormatValue = Format$(value, "0.000")
    End If
End Function

Public Function GetUnit() As String
    Select Case FMI_Status.einheit
        Case 1:
            GetUnit = "cN"
        Case 2:
            If (geraet.f_max <= 10) Then
                GetUnit = "g"
            Else
                GetUnit = "kg"
            End If
        Case 4:
            If (geraet.f_max <= 10) Then
                GetUnit = "oz"
            Else
                GetUnit = "lb"
            End If
        Case Else
            GetUnit = "N"
    End Select
End Function

'Public Function ScaleNewton(value As Double) As Double
'    Dim faktor As Double
'    faktor = gravitation_to_double(geraet.gravitation)
'    Select Case GetUnit()
'        Case "N"
'            ScaleNewton = value
'        Case "cN"
'            ScaleNewton = value * 100
'        Case "g"
'            ScaleNewton = value / faktor * 1000
'        Case "kg"
'            ScaleNewton = value / faktor
'        Case "oz"   '1oz = 28,349523g
'            ScaleNewton = value / faktor / 0.028349523
'        Case "lb"   '1lb = 453,592370g
'            ScaleNewton = value / faktor / 0.45359237
'    End Select
'End Function

'Gibt True zur|fffd|ck, wenn sich die Maus noch innerhalb der Buttongrenzen befindet
Public Function CheckMouseUp(x As Single, y As Single, cmd As CommandButton) As Boolean
    If (x > 0 And x < cmd.Width And y > 0 And y < cmd.Height) Then
        CheckMouseUp = True
    Else
        CheckMouseUp = False
    End If
End Function

Attribute VB_Name = "not_frmGrenzwert_B"
Attribute VB_Base = "0{3904BF5E-2A57-41FF-9900-EA52515D5952}{D12DA651-DB22-4B06-B51D-E3EE701021F3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub CommandButton1_Click()
    'not_frmGrenzwert_B.Hide
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = CORP_SHORT + " " + XLANAME_K
    CommandButton1.Caption = text(43)
End Sub
Attribute VB_Name = "outp_mdl"
Option Explicit
'Dim next_graph_sheet_name
Public row_start As Long

'****************************************
' cyclic_val() in Excel-Sheet eintragen
'****************************************
Public Sub cell_output_cyclic(index As Long)
    Dim row As Long
    Dim col As Long
   
    On Error GoTo CELL_ERROR
    cell_limit_flg = True
    row = ActiveCell.row
    col = ActiveCell.Column
    
    If frmMain_B.Header_on_btn Then
        If graph_on_flg = False Then
            ActiveSheet.Cells(row, col) = text(0)   'Kontinuierlich
            row = row + 1
        End If
        frmMain_B.Header_on_btn = False
    End If
    
    If graph_on_flg Then
        ActiveSheet.Cells(row, col) = text(0)   'Kontinuierlich
        row = row + 1
        graph_on_flg = False
    End If
        
    If index <= ite_num Then
        WriteCell row, col, cyclic_val(index)
        ActiveSheet.Cells(row + 1, col).Select
    Else
        ActiveSheet.Cells(row + 1, col).Select
    End If
    
    Exit Sub
CELL_ERROR:
    MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".cell_output_cyclic()"
    cell_limit_flg = False
End Sub

'**************************************
' single_val in Excel-sheet eintragen
'**************************************
Public Sub cell_output_single()
    Dim row As Long
    Dim col As Long
    
    row = ActiveCell.row
    col = ActiveCell.Column
    
    If plot_range(row, col) = False Then
        Exit Sub
    End If
    
    If frmMain_B.Header_on_btn_2 Then
        ActiveSheet.Cells(row, col) = text(17)  'Aktuelle Daten
        
        If g_cell_dir = YOKO Then
            col = col + 1
        Else
            row = row + 1
        End If
        
        frmMain_B.Header_on_btn_2 = False
    End If
    
    If single_val < min_limit And single_val > max_limit Then  '|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|i|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd|j
        limit_jdg = 3
    ElseIf single_val > max_limit Then '|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd||a347|
        limit_jdg = 0           'High
    ElseIf single_val < min_limit Then  '|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        limit_jdg = 2           'low
    Else
        limit_jdg = 1
    End If
            
    WriteCell row, col, single_val
    If g_cell_dir = YOKO Then
        ActiveSheet.Cells(row, col + 1).Select      ' N|fffd|chste freie Zelle nach Rechts anw|fffd|hlen
    Else
        ActiveSheet.Cells(row + 1, col).Select  ' N|fffd|chste freie Zelle nach Unten anw|fffd|hlen
    End If
    
    With frmMain_B.jdg_lbl_2
        If jdg_flg = True Then
            If limit_jdg = 1 Then
                .BackColor = &HF96309
                .Caption = "OK"
                .ForeColor = &HFFFF80
            ElseIf limit_jdg = 0 Then
                .BackColor = COLOR_RED
                .Caption = "HIGH"
                .ForeColor = &HC0C0FF
            ElseIf limit_jdg = 2 Then
                .BackColor = COLOR_RED
                .Caption = "LOW"
                .ForeColor = &HC0C0FF
            ElseIf limit_jdg = 3 Then
                .BackColor = COLOR_RED
                .Caption = "BOTH"
                .ForeColor = &HC0C0FF
            End If
        Else
            .BackColor = &H808080
            .Caption = ""
            .ForeColor = &HC0C0C0
        End If
    End With
   
End Sub

'*********************************
'|fffd|@|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'*********************************
Public Sub cell_output_peak()
    Dim row As Long
    Dim col As Long
   
    row = ActiveCell.row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    col = ActiveCell.Column
    
    If plot_range(row, col) = False Then
        Exit Sub
    End If
    
    With ActiveSheet
        If frmMain_B.Header_on_btn_2 Then
            If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
                .Cells(row, col) = "+Peak"
                .Cells(row + 1, col) = "-Peak"
                col = col + 1
            Else
                .Cells(row, col) = "+Peak"
                .Cells(row, col + 1) = "-Peak"
                row = row + 1
            End If
            frmMain_B.Header_on_btn_2 = False
        End If
        
        WriteCell row, col, PeakPlusVal
        If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
            WriteCell row + 1, col, PeakMinusVal
            .Cells(row, col + 1).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
        Else
            WriteCell row, col + 1, PeakMinusVal
            .Cells(row + 1, col).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
        End If
    End With
    
    frmMain_B.jdg_lbl_2.BackColor = &H808080
    frmMain_B.jdg_lbl_2.Caption = ""
    frmMain_B.jdg_lbl_2.ForeColor = &HC0C0C0

End Sub

' Eine Zelle mit val beschreiben und das Format setzen auf Zahl mit passendem Komma und linksb|fffd|ndig
Private Sub WriteCell(row As Long, col As Long, val As Double)
    ' Zelle zuerst formatieren und dann Wert reinschreiben
    If Not boOverload Then
      Select Case FMI_Status.komma_pos
        Case 0:
            FormatCell row, col, "0"
        Case 1:
            FormatCell row, col, "0.0"
        Case 2:
            FormatCell row, col, "0.00"
        Case 3:
            FormatCell row, col, "0.000"
      End Select
      ActiveSheet.Cells(row, col) = val
    Else
      ActiveSheet.Cells(row, col) = "OVL"
    End If
End Sub

Private Sub FormatCell(row As Long, col As Long, NumberFormat As Variant)
    ActiveSheet.Cells(row, col).Select
    Selection.HorizontalAlignment = xlLeft
    Selection.NumberFormat = NumberFormat
End Sub
'**********************
'|fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|
'**********************
Public Sub mk_fig()
    Dim Sheet_name As String                            ' |fffd|V|fffd|[|fffd|g|fffd||fffd|6|fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||314||50d||fffd|
    
    On Error Resume Next
                  
    Sheet_name = ActiveSheet.Name
    ActiveSheet.ChartObjects.Add(55, 14, 650, 330).Select
    ActiveChart.ChartType = xlXYScatter
    ActiveChart.SetSourceData Source:=ActiveSheet.Range(ActiveSheet.Cells(1, 1), ActiveSheet.Cells(1 + data_count, 1)), PlotBy:=xlColumns
    ActiveChart.Location Where:=xlLocationAsObject, Name:=graph_sheet_name
    With ActiveChart
        .Legend.Select
        Selection.Delete
        .ChartTitle.Select
        Selection.Delete
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Characters.text = text(1)    'Datens|fffd|tze
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Characters.text = text(46)      'Kraft
        .Axes(xlValue).MajorGridlines.Border.ColorIndex = 57                               '|fffd||23d5||fffd||fffd||fffd|J|fffd||fffd||fffd|[
        .Axes(xlValue).MajorGridlines.Border.LineStyle = xlDot
        .PlotArea.Interior.ColorIndex = 2
        .SeriesCollection(1).Border.ColorIndex = 3                      '|fffd||210||fffd||fffd||310|F
        .SeriesCollection(1).Border.LineStyle = 1                       '|fffd||210||fffd||fffd||303|J|fffd||fffd||fffd|[
        .SeriesCollection(1).Border.Weight = xlMedium 'xlThick
        .SeriesCollection(1).MarkerStyle = 0                            '|fffd|}|fffd|[|fffd|J|fffd|[|fffd|X|fffd|^|fffd|C|fffd||fffd|
        .PlotArea.Border.LineStyle = xlNone                          '|fffd|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd||fffd||fffd|E|fffd||fffd||fffd||202||fffd|
        
    End With
    
    With ActiveSheet
        .Cells(28, 3) = text(1)             'Datens|fffd|tze
        .Cells(28, 4) = data_count - 1
        .Cells(29, 3) = text(15)            'Ergebnis
        .Cells(28, 5) = "'+Max"
        .Cells(28, 6) = max_p_gf
        .Cells(29, 5) = "'+Min"
        .Cells(29, 6) = min_p_gf
        .Cells(28, 7) = "'-Max"
        .Cells(28, 8) = max_m_gf
        .Cells(29, 7) = "'-Min"
        .Cells(29, 8) = min_m_gf
        .Cells(28, 9) = text(47)            'Durchschnitt
        .Cells(28, 10) = Round(weight_avg, 3)
        .Cells(29, 9) = text(48)            'Varianz
        .Cells(29, 10) = Round(w_varp, 3)
        .Cells(28, 11) = text(13)           'Oberer Grenzwert
        .Cells(28, 12) = max_limit
        .Cells(29, 11) = text(14)           'Unterer Grenzwert"
        .Cells(29, 12) = min_limit
    
        If jdg_flg = True Then
            If limit_jdg = 1 Then
                .Cells(29, 4) = "OK"
            ElseIf limit_jdg = 0 Then
                .Cells(29, 4) = "ERR"
            End If
        Else
            .Cells(29, 4) = ""
        End If
        .Cells(1, 1).Select
    End With
    
End Sub

'**************************
' |fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||308||693||fffd|
'**************************
Public Sub Sheet_move()
    
    Sheet_name = ActiveSheet.Name        '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd|
    Sheet_num = 1
    graph_sheet_name = "Graph" & Sheet_num           '|fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||fffd|
    
    Do
        If check_Sheet(graph_sheet_name) Then                         '|fffd|@|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347|
            graph_sheet_name = "Graph" & Sheet_num
            Exit Do
        Else
            Exit Do
        End If
    Loop
    
    If Sheets.count >= 255 Then                   '|fffd||402||182||82||303|t|fffd|@|fffd|C|fffd||fffd||fffd||243||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||fffd|225|fffd||82||702||fffd|
        MsgBox text(44), vbOKOnly + vbExclamation, XLANAME_K + ".Sheet_move()"
        ActiveSheet.Cells(1, 1).Select
        Exit Sub
    End If
    
    Worksheets.Add after:=Worksheets(Sheets.count)  '|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||30c||fffd||243|V|fffd|[|fffd|g|fffd||1c9||fffd|
    ActiveSheet.Name = graph_sheet_name              '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||255||3cd|X
    Worksheets(graph_sheet_name).Activate              '|fffd|V|fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
    ActiveSheet.Cells(1, 1).Select                                  '|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||292|u
End Sub
'************************
'  |fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||317|L|fffd||fffd||fffd||fffd||fffd||fffd|
'************************
Private Function check_Sheet(Sheet) As Boolean '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||317|L|fffd||fffd||fffd||314||fffd||fffd||fffd|
    Dim sn As Object
    Dim graph_name As String
    
    check_Sheet = False
    graph_name = Mid(Sheet, 1, 5)
    For Each sn In Sheets
        If LCase(graph_name) = LCase(Mid(sn.Name, 1, 5)) Then             '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Sheet_num = val(Mid(sn.Name, 6, 3)) + 1
           check_Sheet = True
        End If
    Next sn
End Function

'********************************
'   |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub data_output(samplenr As Long, ende As Boolean)
    Dim ii As Long
    
    Dim row As Long
    Dim col As Long
    
    On Error GoTo CELL_ERROR
    row = ActiveCell.row
    col = ActiveCell.Column

    If (ende) Then
        ActiveSheet.Cells(row_start, col + 3).Select
    Else
        With ActiveSheet
            If samplenr = 0 Then
                row_start = row
                .Cells(row, col) = m_modo(FMI_Status.memory_mode)
                row = row + 1
                .Cells(row, col) = text(52)             '"Einheit"
                .Cells(row, col + 1) = GetUnit
                row = row + 1
                .Cells(row, col) = text(29)              'Anzahl gespeicherte Daten
                FormatCell row, col + 1, "0"
                .Cells(row, col + 1) = FMI_Status.MemCount
                row = row + 1
                .Cells(row, col) = "+Peak"
                WriteCell row, col + 1, PeakPlusVal
                row = row + 1
                .Cells(row, col) = "-Peak"
                WriteCell row, col + 1, PeakMinusVal
                row = row + 1
            
                '-------------
                .Cells(row, col) = "'+Max"
                WriteCell row, col + 1, sing_p_max
                row = row + 1
                .Cells(row, col) = "'+Min"
                WriteCell row, col + 1, sing_p_min
                row = row + 1
                .Cells(row, col) = "'-Max"
                WriteCell row, col + 1, sing_m_max
                row = row + 1
                .Cells(row, col) = "'-Min"
                WriteCell row, col + 1, sing_m_min
                row = row + 1
                .Cells(row, col) = text(47)             'Durchschnitt
                WriteCell row, col + 1, sing_avg
                row = row + 1
                ' Deviation hat immer 3 Nachkommastellen!
                .Cells(row, col) = text(48)             'Varianz
                FormatCell row, col + 1, "0.000"
                .Cells(row, col + 1) = sing_dev
                row = row + 1
                .Cells(row, col) = text(13)             'Oberer Grenzwert
                WriteCell row, col + 1, max_limit
                row = row + 1
                .Cells(row, col) = text(14)             'Unterer Grenzwert
                WriteCell row, col + 1, min_limit
                row = row + 1
                .Cells(row, col) = text(2)              'Samplenummer
                .Cells(row, col + 1) = ""
                row = row + 1
                ActiveSheet.Cells(row, col).Select
            Else
                ActiveSheet.Cells(row, col).Select
                FormatCell row, col, "0"
                .Cells(row, col) = samplenr
                WriteCell row, col + 1, sing_load(samplenr - 1)
                row = row + 1
                ActiveSheet.Cells(row, col).Select
            End If
        End With
    End If
    Exit Sub
CELL_ERROR:
    MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".data_output()"
End Sub

Public Function plot_range(tate_range As Long, yoko_range As Long) As Boolean
    plot_range = True
    If tate_range + 1 > 65536 Then
        MsgBox text(49), vbOKOnly + vbExclamation, CORP_SHORT + " FMI_connect_USB"
        plot_range = False
    End If
    If yoko_range + 1 > 256 Then
        MsgBox text(49), vbOKOnly + vbExclamation, CORP_SHORT + " FMI_connect_USB"
        plot_range = False
    End If
End Function
Attribute VB_Name = "request"
Option Explicit

'Befehlskonstanten f|fffd|r USB-Schnittstelle
Public Const ID_MEASUREMENT = &H1
Public Const ID_SAMPLE = &H2
Public Const ID_SET_MODE = &H4
Public Const ID_GET_MODE = &H5
Public Const ID_READ_MEMORY = &H6
Public Const ID_DELETE_MEMORY = &H7
Public Const ID_INFO = &H8
Public Const ID_STATISTIK = &H9
Public Const ID_Z_LAGE = &H10
Public Const ID_Z_I_USB = &H11
Public Const ID_SUPPLY_3V = &H12
Public Const ID_ABSCHALTEN = &H13
Public Const ID_TASTENDRUCK = &H14
Public Const ID_TARA = &H15
Public Const ID_WERKSEINSTELLUNG = &H16
Public Const ID_INIT = &H17
Public Const ID_SET_GRENZWERT = &H18
Public Const ID_GET_GRENZWERT = &H19
Public Const ID_SET_UNIT = &H1A
Public Const ID_GET_UNIT = &H1B
Public Const ID_START_STOPP = &H1C
Public Const ID_SET_MEM_MODE = &H1D
Public Const ID_GET_MEM_MODE = &H1E
Public Const ID_STATUS = &H20
Public Const ID_EEPROM_WR_ON = &H40
Public Const ID_EEPROM_ERASE = &H41
Public Const ID_EEPROM_WR = &H42
Public Const ID_EEPROM_VERIFY = &H43
Public Const ID_PS081_USER_RD = &H44
Public Const ID_PS081_USER_WR = &H45
Public Const ID_PS081_RAM_RD = &H46
Public Const ID_PS081_RAM_WR = &H47
Public Const ID_PS081_RESET = &H48
Public Const ID_PS081_FREQ = &H49
Public Const ID_PS081_RAM_RD_ASYNC = &H4A
Public Const ID_WRITE_PARAMETER = &H50
Public Const ID_SET_AUTOMEM = &H60
Public Const ID_GET_AUTOMEM = &H61
Public Const ID_RESET = &HFF

'Konstanten f|fffd|r das Auslesen vom RAM im PS081
Public Const RAM_STATE_MACHINE = 2
Public Const RAM_ISTWERT = 3
Public Const RAM_PEAK_PLUS = 4
Public Const RAM_PEAK_MINUS = 5
Public Const RAM_MIRROR_TYP = 6
Public Const RAM_N_MESSWERTE = 11
Public Const RAM_MIRROR_P1 = 13

' Adresse f|fffd|r Parameter im User-EEProm
Public Const USER_EE_GRAVITATION = 1
Public Const USER_EE_TYP = 2
Public Const USER_EE_P1 = 4
Public Const USER_EE_OVERLOAD = 10
Public Const USER_EE_CUSTOMIZING = 11
Public Const USER_EE_MOTOROPTION = 13

'Varianten
Public Const VAR_BS10 = 0
Public Const VAR_BS20 = 1
Public Const VAR_BS30 = 2
Public Const VAR_W30 = 3
Public Const VAR_W40 = 4
Public Const VAR_BS50 = 5
Public Const VAR_W20 = 6
Public Const VAR_W10 = 7
'Public Const VAR_B10 = 8
'Public Const VAR_B20 = 9
'Public Const VAR_B30 = 10
'Public Const VAR_BW30 = 11  'Gibt|fffd|s derzeit nicht, w|fffd|re ein W30 mit Batterie
'Public Const VAR_BW40 = 12  'Gibt|fffd|s derzeit nicht, w|fffd|re ein W40 mit Batterie
'Public Const VAR_B50 = 13
'Public Const VAR_BW10 = 14  'Gibt|fffd|s derzeit nicht, w|fffd|re ein W10 mit Batterie
'Public Const VAR_BW20 = 15  'Gibt|fffd|s derzeit nicht, w|fffd|re ein W20 mit Batterie

'IDs f|fffd|r Grenzwerte
Public Const ID_MAX = 0
Public Const ID_MIN = 1

Public ReadMemTemp As Double

Public WaitReceive As Byte
Public Const N_TIMEOUT = 100000 'typisch sind Werte von 10000 bis 25000, es gab auber auch schon Kunden, da ben|fffd|tigte es 80000

Public boAktualisieren As Boolean
Public boInit As Boolean        ' An Form wird was ver|fffd|ndert
Public boOnline As Boolean      ' Messung l|fffd|uft
Public boMemory As Boolean      ' Memory aktiv
Public boOverload As Boolean
'Public boKarenz As Boolean      ' Memory aktiv
Public boUSBError As Boolean
Public boSaved As Boolean   ' Wurde in diesem Zyklus bereits gespeichert?

Public send_len As Long
Public receive_len As Long
Public send_buf(64) As Byte
Public receive_buf(64) As Byte

'Batterieversionen und Sondertypen
Public boCustomized As Boolean
Public Customizing As Long

' Statische Werte aus FMI_S gelesen
Public Type TypeGeraet
    f_max As Long
    variante As Long
    aufloesung As Long
    seriennr As String
    kalibrierdatum As String
    gravitation As Long
    PIC_Version As Long
    firmware_PIC As String
    PS081_Version As Long
    firmware_PS081 As String
End Type
Public geraet As TypeGeraet

' Ver|fffd|nderliche Werte aus FMI_S gelesen
Public Type TypeStatus
    RamStateMachine As Long
    IdAnzeige As Byte
    mode As Byte
    MemCount As Long
    memory_mode As Long
    DisplayInteger As Long
    einheit As Byte
    komma_pos As Long    ' Position des Kommas (0,1,2,3)
    mirror_p1 As Long
    mirror_typ As Long
End Type
Public FMI_Status As TypeStatus

Public Type TypeMotor
    fahrprofil As Byte
    geschwindigkeit As Byte
    wartezeit As Byte
    memory As Byte
    automem As Byte
End Type
Public MotorOption As TypeMotor

' Konstanten f|fffd|r Zustandsbits in RAM_STATE_MACHINE bzw. FMI_Type
Public Const S_BIT_CHECK_LIMIT_MAX = &H2
Public Const S_BIT_CHECK_LIMIT_MIN = &H4
Public Const S_BIT_MEMORY_AKTIV = &H40
Public Const S_BIT_OVERLOAD = &H400
Public Const S_BIT_KARENZZEIT = &H400000
Public Const S_BIT_MESSUNG_AKTIV = &H800000

'Konstanten f|fffd|r IdAnzeige
Public Const ID_IDLE = 0
Public Const ID_ISTWERT = 1
Public Const ID_PEAK_PLUS = 2
Public Const ID_PEAK_MINUS = 3
Public Const ID_MAX_PLUS = 4
Public Const ID_MIN_PLUS = 5
Public Const ID_MAX_MINUS = 6
Public Const ID_MIN_MINUS = 7
Public Const ID_AVG = 8
Public Const ID_DEV = 9

'Indizes innerhalb eines Telegramms
Public Const I_CMD = 0         ' Befehls-ID
Public Const I_LEN = 1         ' Bytel|fffd|nge
Public Const I_DATA = 2        ' Erstes Byte an Nutzdaten
Public Const I_VAL = 3         ' Beim Lesen von RAM und diversen anderen Befehlen ab hier ein Wert der Gr|fffd||fffd|e 1...3 Byte

Public Function USB_Startup() As Boolean
    Dim license(2) As Long
    Dim str_lic(2) As String
    
    max_limit = 0
    min_limit = 0
    With FMI_Status
        .memory_mode = 0
        .einheit = 0
        .komma_pos = 0
        .MemCount = 0
    End With
    With geraet
        .variante = 0
        .f_max = 0
        .kalibrierdatum = 0
        .seriennr = 0
        .gravitation = 0
    End With
    
    'With PruefDef
    '    .kalibrierdatum = "------"
    '    .seriennr = "------"
    '    .pruefgeraet = "------"
    '    .hersteller = "------"
    'End With
    
    boUSBError = False
    
    USB_Startup = False
    USB_Init
    If (OpenMPUSBDevice) Then
        Dim timeout As Long
        EnableTimer TIMER_MS
        USBByteCmd ID_START_STOPP, 0     ' Die meisten der nachfolgenden Befehle funktionieren nur in gestopptem Zustand!
        USBByteCmd ID_PS081_RAM_RD, RAM_STATE_MACHINE, True
        USBByteCmd ID_STATUS, 1          ' Statustelegramm einschalten
        timeout = 500000
        While boOnline And timeout > 0
            DoEvents
            timeout = timeout - 1
        Wend
        If (timeout = 0) Then
            USB_End
            MsgBox text(30) + " online!" + vbCr + text(117), vbInformation, XLANAME_K + ".USB_Startup()"
            Application.Cursor = xlDefault
            End
        End If
        USBByteCmd ID_INFO, 6                       ' Seriennumer
        USBByteCmd ID_INFO, USER_EE_CUSTOMIZING
        'If (boUSBError = False) Then
        '    FMT_W_Connect.ThisWorkbook.strLizenzfile = GetSetting(XLANAME_K, "Settings", "Lizenzfile", "")
        '    If (ReadLizenz(license, str_lic)) Then
        '        boLizenz = CheckLizenz(serjahr, sernummer, license)
        '    Else
        '        boLizenz = False
        '    End If
        'End If
    Else
        boUSBError = True
    End If
    
    'If (boLizenz And boUSBError = False) Then
    If (boUSBError = False) Then
        USBFourByteCmd &HAB, &H79, &HEB, &H2A, &H9F
        USBByteCmd ID_INFO, 0                       ' Version PIC abfragen
        USBByteCmd ID_INFO, 1                       ' Version PS081 abfragen
        USBByteCmd ID_INFO, 2                       ' F_Max
        USBByteCmd ID_INFO, 7                       ' Kalibrierdatum
        USBByteCmd ID_PS081_USER_RD, USER_EE_TYP, False ' Info |fffd|ber Fmax, Variante, Aufl|fffd|sung; wg. Zugriff auf User-EEProm kein WaitForReceive
        wait 1
        If (geraet.PIC_Version < 309031) Then
            MsgBox text(120) + vbCr + XLANAME_K + " " + text(121), vbCritical, XLANAME_K
        End If
        
        'If (boLizenz) Then
            USBByteCmd ID_INFO, 3                   ' Komma-Info anfordern
            USBByteCmd ID_INFO, 8                   ' Gravitation
            USBByteCmd ID_GET_MEM_MODE, 0
            'If (geraet.f_max >= 500 And geraet.variante = VAR_W40) Then         'Nachfolgendes macht nur bei W40 Sinn
            '    USBByteCmd ID_INFO, 13                      ' Motor-Info anfordern
            '    USBByteCmd ID_GET_AUTOMEM, 0
            'Else
            '    MotorOption.automem = 0
            '    MotorOption.fahrprofil = 0
            '    MotorOption.geschwindigkeit = 1
            '    MotorOption.wartezeit = 0
            'End If
        'End If
    Else
        USB_End
        boWatchdog = False
    End If
    
    'LoadRegistry
    
    'If (boLizenz And boUSBError = False) Then
    If (boUSBError = False) Then
        USB_Startup = True
    End If
End Function

Public Sub USB_End()
    If device_check And TimerIsOn Then
        USBByteCmd ID_STATUS, 0, True
        USBByteCmd ID_START_STOPP, 0, True ' Sonst k|fffd|nnte ein messmode > 0 weiterlaufen. Das f|fffd|hrt zu Schwierigkeiten.
    End If
    boWatchdog = False
    DisableTimer
    CloseMPUSBDevice
    If boFMIrunning Then
        frmMain_B.State.Caption = text(37)
        frmMain_B.State.BackColor = COLOR_RED       '&H80FF80
    End If
End Sub

' Abh|fffd|ngig der Kommainformation eine Long-Variable in eine Dezimalzahl wandeln
Public Function long_to_double(lval As Long, komma As Long) As Double
    long_to_double = Round(lval / (10 ^ komma), komma)
End Function

' Abh|fffd|ngig der Kommainformation eine Dezimalzahl in eine Long-Variable wandeln
Public Function double_to_long(dval As Double, komma As Long) As Long
    double_to_long = Round(dval * (10 ^ komma), 0)
    'double_to_long = double_to_long And &HFFFFFF    ' oberstes Byte ausblenden, da wir nur 3 Byte-Zahlen verwenden
End Function

' Aus empfangenen 3 Byte einen Long-Wert bilden.
' Bei negativen Werten werden die oberen Bits automatisch gef|fffd|llt mit Einsen
' data() ist das Empfangene Datenfeld, startindex ist der Index im Array, ab wo 3 Bytes gewandelt werden.
Public Function convert_byte_to_long(Data() As Byte, startindex As Byte, signed As Boolean) As Long
    Dim lval As Long
    Dim ReadRam As Long
    ReadRam = Data(startindex)
    lval = Data(startindex + 1)
    lval = lval * 256
    ReadRam = ReadRam + lval
    lval = Data(startindex + 2)
    lval = lval * 65536
    ReadRam = ReadRam + lval
    If (signed) Then
        If (Data(startindex + 2) > 127) Then
            ReadRam = ReadRam + &HFF000000
        End If
    End If
    convert_byte_to_long = ReadRam
End Function
    
'Warten bis Befehl gesendet wurde mit Timeout
Public Sub WaitForSend()
    Dim nTimeout As Long
    nTimeout = N_TIMEOUT
    While send_len > 0 And nTimeout > 0
        DoEvents
        nTimeout = nTimeout - 1
    Wend
End Sub

Public Sub WaitForReceive()
    Dim nTimeout As Long
    nTimeout = N_TIMEOUT
    
    While WaitReceive <> 0 And nTimeout > 0
        DoEvents
        nTimeout = nTimeout - 1
    Wend
    If (nTimeout = 0) Then
        MsgBox text(42) + vbCr + "timeout=0   IdWaitFor=" + CStr(WaitReceive), vbExclamation, XLANAME_K + ".WaitForReceive()"
        boUSBError = True
    End If
    WaitReceive = 0 ' Falls Timeout
End Sub
    
'Memory an bestimmter Adresse auslesen
Public Function USBReadMemory(adr As Long) As Double
    Dim adr_lo As Byte
    Dim adr_hi As Byte
    Dim temp As Long
    temp = adr And &HFF
    adr_lo = temp
    temp = (adr And &HFF00) / 256
    adr_hi = temp
    
    If (geraet.PIC_Version > 309030) Then
        USBTwoByteCmd ID_READ_MEMORY, adr_lo, adr_hi
    Else
        USBTwoByteCmd ID_READ_MEMORY, adr_lo, adr_hi, False
        wait 1
    End If
    USBReadMemory = ReadMemTemp
End Function
    
Public Sub USBByteCmd(id As Byte, parameter As Byte, Optional WaitRcv As Boolean = True)
    If boUSBError Then Exit Sub
    If (WaitRcv) Then
        WaitReceive = id    'Muss vorher gemacht werden, weil der Empfang manchmal so schnell geht, dass WaitForReceive noch gar nicht aufgerufen
    End If
    send_buf(0) = id
    send_buf(1) = 3
    send_buf(2) = parameter
    send_len = 3
    WaitForSend
    If (WaitRcv) Then
        WaitForReceive
    End If
End Sub

Public Sub USBTwoByteCmd(id As Byte, parameter1 As Byte, parameter2 As Byte, Optional WaitRcv As Boolean = True)
    If boUSBError Then Exit Sub
    If (WaitRcv) Then
        WaitReceive = id    'Muss vorher gemacht werden, weil der Empfang manchmal so schnell geht, dass WaitForReceive noch gar nicht aufgerufen
    End If
    send_buf(0) = id
    send_buf(1) = 4
    send_buf(2) = parameter1
    send_buf(3) = parameter2
    send_len = 4
    WaitForSend
    If (WaitRcv) Then
        WaitForReceive
    End If
End Sub
        
Public Sub USBFourByteCmd(id As Byte, parameter1 As Byte, parameter2 As Byte, parameter3 As Byte, parameter4 As Byte, Optional WaitRcv As Boolean = True)
    If boUSBError Then Exit Sub
    If (WaitRcv) Then
        WaitReceive = id    'Muss vorher gemacht werden, weil der Empfang manchmal so schnell geht, dass WaitForReceive noch gar nicht aufgerufen
    End If
    send_buf(0) = id
    send_buf(1) = 6
    send_buf(2) = parameter1
    send_buf(3) = parameter2
    send_buf(4) = parameter3
    send_buf(5) = parameter4
    send_len = 6
    WaitForSend
    If (WaitRcv) Then
        WaitForReceive
    End If
End Sub

Public Sub USBWordCmd(id As Byte, parameter As Byte, value As Long, Optional WaitRcv As Boolean = True)
    Dim split(3) As Byte
    Dim temp As Long
    
    If boUSBError Then Exit Sub
    
    temp = value And &HFF
    split(0) = temp
    temp = value And &HFF00
    temp = temp / 256
    split(1) = temp And &HFF
    temp = value And &HFF0000
    temp = temp / 65536
    split(2) = temp And &HFF
    
    If (WaitRcv) Then
        WaitReceive = id    'Muss vorher gemacht werden, weil der Empfang manchmal so schnell geht, dass WaitForReceive noch gar nicht aufgerufen
    End If
    
    send_buf(0) = id
    send_buf(1) = 6
    send_buf(2) = parameter
    send_buf(3) = split(0)
    send_buf(4) = split(1)
    send_buf(5) = split(2)
    send_len = 6
    WaitForSend
    If (WaitRcv) Then
        WaitForReceive
    End If
End Sub

'Zur|fffd|ckgegeben wird die Anzahl der gesendeten Daten
Function SendPacket(ByRef SendData() As Byte, sendLength As Long, ByVal SendDelay_ms As Long) As Long
    Dim ret As Long
    Dim sentDataLength As Long
    
    SendPacket = 0
    If (USB_OutPipe <> INVALID_HANDLE_VALUE) Then
        ret = MPUSBWrite(USB_OutPipe, VarPtr(SendData(0)), sendLength, sentDataLength, SendDelay_ms) <> 0
        If ((ret <> 0) And (sentDataLength = sendLength)) Then
            SendPacket = sentDataLength
        End If
    End If
End Function

'Zur|fffd|ckgegeben wird die Anzahl der empfangenen Daten
Function ReceivePacket(ByRef ReceiveData() As Byte, ByRef ReceiveLength As Long, ByVal ReceiveDelay_ms As Long) As Long
    Dim ExpectedReceiveLength As Long
    Dim ret As Long
    Dim temp_read(63) As Byte
    
    ReceivePacket = 0
    If (USB_OutPipe <> INVALID_HANDLE_VALUE) Then
        ExpectedReceiveLength = ReceiveLength
        ReceiveLength = 0
        ret = MPUSBRead(USB_InPipe, VarPtr(temp_read(0)), ExpectedReceiveLength, ReceiveLength, ReceiveDelay_ms)
        If ret <> 0 Then
            Dim n As Integer
            ReceivePacket = ReceiveLength
            For n = 0 To ReceiveLength - 1
                ReceiveData(n) = temp_read(n)
            Next n
        End If
    End If
End Function

' Messwertpaket mit ID_SAMPLE lesen
Public Function reqMesswert(daten() As Long, packetsize As Byte, timeout_ms As Long) As Boolean
    Dim ReceiveLength As Long
    Dim ExpectedReceiveLength As Long
    Dim ret As Long
    Dim n As Byte
    
    ReceiveLength = 5 + 3 * packetsize
    ExpectedReceiveLength = ReceiveLength
    
    If (USB_InPipe <> INVALID_HANDLE_VALUE) Then
        ret = MPUSBRead(USB_InPipe, VarPtr(receive_buf(0)), ExpectedReceiveLength, ReceiveLength, timeout_ms)
        If (ret = MPUSB_SUCCESS And receive_buf(0) = ID_SAMPLE) Then
            If (receive_buf(0) = ID_SAMPLE) Then
                For n = 0 To packetsize - 1
                    daten(n) = convert_byte_to_long(receive_buf, 5 + 3 * n, True)
                Next n
                
                FMI_Status.RamStateMachine = convert_byte_to_long(receive_buf, 2, True)
                CheckStateMachine
                If (display_teiler >= 25) Then  'Displayrate reduzieren, damit gleiches Verhalten, wie wenn Anzeigewert nur |fffd|ber Statustelegramm empfangen wird.
                    FMI_Status.DisplayInteger = daten(0)
                    f_Display
                    display_teiler = 0
                Else
                    display_teiler = display_teiler + 1
                End If
            End If
            reqMesswert = True
        Else
            reqMesswert = False
        End If
    End If
End Function

' Es ist ein USB-Telegramm eingegangen und liegt in receive_buf()
' Diese Werte nun an Hand der ID verteilen
Public Sub USB_Input()
    Dim temp As Long
    
    Select Case receive_buf(I_CMD)
        Case ID_MEASUREMENT:
            temp = temp
        Case ID_STATUS:
            Dim x As Long
            Dim y As Byte
            If (receive_buf(I_LEN) > 3) Then 'Ansonsten nur R|fffd|ckmeldung vom Einschalten des Statustelegramms
                temp = convert_byte_to_long(receive_buf, I_DATA, False)
                If (temp = &HFFFFFF) Then
                    'MsgBox "ERROR!" + vbCr + "ID_STATUS = 0xFFFFFF" + vbCr + "Id= " + CStr(receive_buf(I_DATA)), vbExclamation, XLANAME_K + "USB_Input()"
                    receive_buf(I_CMD) = 0
                Else
                    With FMI_Status
                        .RamStateMachine = temp
                        CheckStateMachine
                        .IdAnzeige = receive_buf(5) And &H3F
                        .mode = (receive_buf(5) And &HC0) / 64
                        
                        x = receive_buf(6) + receive_buf(7) * 256   'memCount
                        temp = convert_byte_to_long(receive_buf, 8, True)
                        'If (temp <> -1) Then    'Dann gab|fffd|s Lesefehler, der im n|fffd|chsten Durchgang behoben ist.
                            .DisplayInteger = temp
                        'End If
                        If (x <> .MemCount Or boAktualisieren) Then
                            SetMemoryCount x
                        End If
                        If (receive_buf(I_LEN) >= 12) Then  'Ab V3.11.004 wird ein zus|fffd|tzliches Byte mit der Einheit gesendet
                            y = .einheit
                            .einheit = receive_buf(11) And &H7
                            .komma_pos = (receive_buf(11) And &HC0) / 64
                            ' Weil sich ggf. das Komma ge|fffd|ndert hat, Grenzwert aktualisieren
                            If (y <> .einheit Or boAktualisieren) Then
                                SetGrenzwert ID_MAX
                                SetGrenzwert ID_MIN
                            End If
                        End If
                        
                        'If (temp <> -1) Then    'Dann gab|fffd|s Lesefehler, der im n|fffd|chsten Durchgang behoben ist.
                            f_Display
                        'End If
                    End With
                End If
            End If
        Case ID_START_STOPP:
            If (receive_buf(I_DATA) > 0) Then
                boOnline = True
            Else
                boOnline = False
            End If
            If (boFMIrunning) Then
                frmMain_B.SetColor
            End If
        Case ID_INFO:
            temp = convert_byte_to_long(receive_buf, I_VAL, False)
            If (temp = &HFFFFFF) Then
                'MsgBox "ERROR!" + vbCr + "ID_INFO = 0xFFFFFF" + vbCr + "Id= " + CStr(receive_buf(I_DATA)), vbExclamation, XLANAME_K + "USB_Input()"
                receive_buf(I_CMD) = 0
            Else
                If (receive_buf(I_DATA) = 0) Then    'Version PIC
                    geraet.PIC_Version = receive_buf(I_VAL) + receive_buf(I_VAL + 1) * 1000 + receive_buf(I_VAL + 2) * 100000
                    geraet.firmware_PIC = CStr(receive_buf(I_VAL + 2)) + "." + Format(CStr(receive_buf(I_VAL + 1)), "00") + "." + Format(CStr(receive_buf(I_VAL)), "000")
                ElseIf (receive_buf(I_DATA) = 1) Then    'Version PS081
                    geraet.PS081_Version = receive_buf(I_VAL) + receive_buf(I_VAL + 1) * 1000 + receive_buf(I_VAL + 2) * 100000
                    geraet.firmware_PS081 = CStr(receive_buf(I_VAL + 2)) + "." + Format(CStr(receive_buf(I_VAL + 1)), "00") + "." + Format(CStr(receive_buf(I_VAL)), "000")
                ElseIf (receive_buf(I_DATA) = 2) Then    'F_max
                    geraet.f_max = convert_byte_to_long(receive_buf, I_VAL, True)
                ElseIf (receive_buf(I_DATA) = 3) Then    'Kommainfo
                    FMI_Status.komma_pos = receive_buf(I_VAL)
                ElseIf (receive_buf(I_DATA) = 4) Then   'Variante
                    FMI_Status.komma_pos = receive_buf(I_VAL)
                ElseIf (receive_buf(I_DATA) = 6) Then   'Seriennr
                    Dim lval As Long
                    Dim sernummer As Long
                    Dim serjahr As Byte
                    
                    sernummer = receive_buf(I_DATA + 1)
                    lval = receive_buf(I_DATA + 2)
                    lval = lval * 256
                    sernummer = sernummer + lval
                    serjahr = receive_buf(I_DATA + 3)
                    geraet.seriennr = Chr(65 + serjahr) & "." & CStr(sernummer)
                ElseIf (receive_buf(I_DATA) = 7) Then   'Kalibrierdatum
                    Dim mm As Single, yy As Single
                    temp = convert_byte_to_long(receive_buf, I_VAL, True)
                    yy = CInt(temp / 100)
                    mm = temp - yy * 100
                    '14 Monate abziehen, da im Ger|fffd|t der n|fffd|chste Kalibriertermin steht und nicht das Kalibrierdatum
                    If (mm > 2) Then
                        mm = mm - 2
                        yy = yy - 1
                    Else
                        mm = mm + 10
                        yy = yy - 2
                    End If
                    geraet.kalibrierdatum = Format$(mm, "00") & "." & CStr(2000 + yy)
                ElseIf (receive_buf(I_DATA) = 8) Then   'Gravitation
                    geraet.gravitation = convert_byte_to_long(receive_buf, I_VAL, False)
                ElseIf (receive_buf(I_DATA) = USER_EE_CUSTOMIZING) Then
                    Customizing = convert_byte_to_long(receive_buf, I_VAL, False) And &HF   'Unteren 4 Bits gleich ausmaskieren
                End If
            End If
        Case ID_PS081_RAM_RD:
            temp = convert_byte_to_long(receive_buf, I_VAL, False)
            'If (temp = &HFFFFFF) Then
            '    'MsgBox "ERROR!" + vbCr + "ID_PS081_RAM_RD = 0xFFFFFF" + vbCr + "Adr= " + CStr(receive_buf(I_DATA)), vbExclamation, XLANAME_K + "USB_Input()"
            '    receive_buf(I_CMD) = 0
            'Else
                If (receive_buf(I_DATA) = RAM_STATE_MACHINE) Then
                    FMI_Status.RamStateMachine = convert_byte_to_long(receive_buf, I_VAL, False)
                    CheckStateMachine
                ElseIf (receive_buf(I_DATA) = RAM_ISTWERT) Then
                    single_val = long_to_double(convert_byte_to_long(receive_buf, I_VAL, True), FMI_Status.komma_pos)
                ElseIf (receive_buf(I_DATA) = RAM_PEAK_PLUS) Then
                    PeakPlusVal = long_to_double(convert_byte_to_long(receive_buf, I_VAL, True), FMI_Status.komma_pos)
                ElseIf (receive_buf(I_DATA) = RAM_PEAK_MINUS) Then
                    PeakMinusVal = long_to_double(convert_byte_to_long(receive_buf, I_VAL, True), FMI_Status.komma_pos)
                ElseIf (receive_buf(I_DATA) = RAM_MIRROR_P1) Then
                    f_GetP1 receive_buf
                ElseIf (receive_buf(I_DATA) = RAM_MIRROR_TYP) Then
                    f_GetTypInfo receive_buf
                Else
                    receive_buf(I_DATA) = receive_buf(I_DATA)
                End If
            'End If
        Case ID_GET_GRENZWERT
            If (receive_buf(I_DATA) = ID_MAX) Then 'Maximum
                max_limit_roh = convert_byte_to_long(receive_buf, I_VAL, True)
                SetGrenzwert ID_MAX
            ElseIf (receive_buf(I_DATA) = ID_MIN) Then 'Minimum
                min_limit_roh = convert_byte_to_long(receive_buf, I_VAL, True)
                SetGrenzwert ID_MIN
            End If
        Case ID_GET_MODE
            FMI_Status.mode = receive_buf(I_DATA)
        Case ID_SET_MODE
            FMI_Status.mode = receive_buf(I_DATA)
        Case ID_READ_MEMORY
            'temp = convert_byte_to_long(receive_buf, I_DATA, False)
            'If (temp = &HFFFFFF) Then
            '    'MsgBox "ERROR!" + vbCr + "ID_READ_MEMORY = 0xFFFFFF" + vbCr + "Id= " + CStr(receive_buf(I_DATA)), vbExclamation, XLANAME_K + "USB_Input()"
            '    receive_buf(I_CMD) = 0
            'Else
                ReadMemTemp = long_to_double(convert_byte_to_long(receive_buf, I_DATA, True), FMI_Status.komma_pos)
            'End If

        Case ID_STATISTIK
            'temp = convert_byte_to_long(receive_buf, I_DATA, False)
            'If (temp = &HFFFFFF) Then
            '    receive_buf(I_CMD) = 0
            '    USBByteCmd ID_STATISTIK, 0, True
            'Else
                sing_p_max = long_to_double(convert_byte_to_long(receive_buf, I_DATA, True), FMI_Status.komma_pos)
                sing_p_min = long_to_double(convert_byte_to_long(receive_buf, I_DATA + 3, True), FMI_Status.komma_pos)
                sing_m_max = long_to_double(convert_byte_to_long(receive_buf, I_DATA + 6, True), FMI_Status.komma_pos)
                sing_m_min = long_to_double(convert_byte_to_long(receive_buf, I_DATA + 9, True), FMI_Status.komma_pos)
                sing_avg = long_to_double(convert_byte_to_long(receive_buf, I_DATA + 12, True), FMI_Status.komma_pos)
                sing_dev = long_to_double(convert_byte_to_long(receive_buf, I_DATA + 15, True), 3) ' Deviation immer mit 3 Nachkommastellen!
            'End If
        Case ID_PS081_USER_RD:
            temp = convert_byte_to_long(receive_buf, I_VAL, False)
            If (temp = &HFFFFFF) Then
                'MsgBox "ERROR!" + vbCr + "ID_PS081_USER_RD = 0xFFFFFF" + vbCr + "Id= " + CStr(receive_buf(I_DATA)), vbExclamation, XLANAME_K + "USB_Input()"
                receive_buf(I_CMD) = 0
            Else
                If (receive_buf(I_DATA) = USER_EE_GRAVITATION) Then
                    geraet.gravitation = convert_byte_to_long(receive_buf, I_VAL, False)
                ElseIf (receive_buf(I_DATA) = USER_EE_TYP) Then
                    f_GetTypInfo receive_buf
                ElseIf (receive_buf(I_DATA) = USER_EE_P1) Then
                    f_GetP1 receive_buf
                ElseIf (receive_buf(I_DATA) = USER_EE_CUSTOMIZING) Then
                    Customizing = convert_byte_to_long(receive_buf, I_DATA, False) And &HF  'Unteren 4 Bits gleich ausmaskieren
                End If
            End If
    End Select
    'If (receive_buf(I_CMD) = WaitReceive) Then
    If ((receive_buf(I_CMD) = WaitReceive) And (WaitReceive <> 0)) Then
        Dim i As Integer
        WaitReceive = 0
        For i = 0 To 20
            DoEvents
        Next i
    End If
    receive_buf(I_CMD) = 0  ' Damit Befehl nur einmal ausgef|fffd|hrt wird
End Sub

Public Sub SetMemoryCount(val As Long)
    'mem_data_count = val
    'frmMain_B.mem_number_lbl.Caption = mem_data_count
    FMI_Status.MemCount = val
    If (boFMIrunning) Then
        frmMain_B.mem_number_lbl.Caption = FMI_Status.MemCount
    End If
End Sub

Public Sub CheckStateMachine()
    Dim online_changed As Boolean
    online_changed = False
    If (FMI_Status.RamStateMachine And S_BIT_MESSUNG_AKTIV) Then
        If Not boOnline Then
            online_changed = True
        End If
        boOnline = True
    Else
        If boOnline Then
            online_changed = True
        End If
        boOnline = False
    End If
    If (FMI_Status.RamStateMachine And S_BIT_MEMORY_AKTIV) Then
        boMemory = True
    Else
        boMemory = False
    End If
    If (FMI_Status.RamStateMachine And S_BIT_OVERLOAD) Then
        boOverload = True
    Else
        boOverload = False
    End If
    'If (FMI_Status.RamStateMachine And S_BIT_KARENZZEIT) Then
    '    boKarenz = True
    'Else
    '    boKarenz = False
    'End If
    If (online_changed) Then
        If (boFMIrunning) Then
            frmMain_B.SetColor
        End If
        If (boOnline) Then
            boSaved = False
        End If
    End If
End Sub

Public Sub f_Display()
    Dim vAnzeige As Double
    Dim ArrowUpVisible As Boolean
    Dim ArrowUpBlink As Boolean
    Dim ArrowDownVisible As Boolean
    Dim ArrowDownBlink As Boolean
    Dim UnitVisible As Boolean
    Dim UnitBlink As Boolean
    
    If boFMIrunning Then
        With FMI_Status
            Select Case .IdAnzeige
                Case ID_IDLE
                    If (.mode = 3) Then
                        frmMain_B.LabelInhalt = text(92)   'Negativer Peakwert
                    ElseIf (.mode = 2) Then
                        frmMain_B.LabelInhalt = text(91)   'Positiver Peakwert
                    Else
                        frmMain_B.LabelInhalt = text(90)   'Istwert
                    End If
                    
                    If (.komma_pos = 3) Then
                        frmMain_B.labelValue = "-,---"
                    ElseIf (.komma_pos = 2) Then
                        frmMain_B.labelValue = "--,--"
                    ElseIf (.komma_pos = 1) Then
                        frmMain_B.labelValue = "---,-"
                    Else
                        frmMain_B.labelValue = "----"
                    End If
                    UnitVisible = True
                    ArrowUpVisible = False
                    ArrowDownVisible = False
                Case ID_ISTWERT
                    frmMain_B.LabelInhalt = text(90)   'Istwert
                    vAnzeige = long_to_double(.DisplayInteger, FMI_Status.komma_pos)
                    frmMain_B.labelValue = FormatValue(vAnzeige, FMI_Status.komma_pos)
                    f_check_limit vAnzeige, ArrowUpVisible, ArrowDownVisible
                    If Not boOnline Then
                        ArrowUpVisible = False
                        ArrowDownVisible = False
                    End If
                    ArrowUpBlink = ArrowUpVisible
                    ArrowDownBlink = ArrowDownVisible
                    UnitVisible = True
                Case ID_PEAK_PLUS
                    frmMain_B.LabelInhalt = text(91)   'Positiver Peakwert
                    vAnzeige = long_to_double(.DisplayInteger, FMI_Status.komma_pos)
                    frmMain_B.labelValue = FormatValue(vAnzeige, FMI_Status.komma_pos)
                    f_check_limit vAnzeige, ArrowUpVisible, ArrowDownVisible
                    'ArrowUpBlink = ArrowUpVisible
                    'ArrowDownBlink = ArrowDownVisible
                    UnitVisible = True
                Case ID_PEAK_MINUS
                    frmMain_B.LabelInhalt = text(92) 'Negativer Peakwert
                    vAnzeige = long_to_double(.DisplayInteger, FMI_Status.komma_pos)
                    frmMain_B.labelValue = FormatValue(vAnzeige, FMI_Status.komma_pos)
                    f_check_limit vAnzeige, ArrowUpVisible, ArrowDownVisible
                    'ArrowUpBlink = ArrowUpVisible
                    'ArrowDownBlink = ArrowDownVisible
                    UnitVisible = True
                Case ID_MAX_PLUS
                    frmMain_B.LabelInhalt = text(93) 'Positives Maximum
                    frmMain_B.labelValue = FormatValue(long_to_double(.DisplayInteger, FMI_Status.komma_pos), FMI_Status.komma_pos)
                    ArrowUpVisible = True
                    ArrowUpBlink = False
                    ArrowDownVisible = False
                    ArrowDownBlink = False
                    UnitVisible = True
                Case ID_MIN_PLUS
                    frmMain_B.LabelInhalt = text(94)   '"Positives Minimum"
                    frmMain_B.labelValue = FormatValue(long_to_double(.DisplayInteger, FMI_Status.komma_pos), FMI_Status.komma_pos)
                    ArrowUpVisible = False
                    ArrowUpBlink = False
                    ArrowDownVisible = True
                    ArrowDownBlink = False
                    UnitVisible = True
                Case ID_MAX_MINUS
                    frmMain_B.LabelInhalt = text(95)     '"Negatives Maximum"
                    frmMain_B.labelValue = FormatValue(long_to_double(.DisplayInteger, FMI_Status.komma_pos), FMI_Status.komma_pos)
                    ArrowUpVisible = True
                    ArrowUpBlink = False
                    ArrowDownVisible = False
                    ArrowDownBlink = False
                    UnitVisible = True
                Case ID_MIN_MINUS
                    frmMain_B.LabelInhalt = text(96)     '"Negatives Minimum"
                    frmMain_B.labelValue = FormatValue(long_to_double(.DisplayInteger, FMI_Status.komma_pos), FMI_Status.komma_pos)
                    ArrowUpVisible = False
                    ArrowUpBlink = False
                    ArrowDownVisible = True
                    ArrowDownBlink = False
                    UnitVisible = True
                Case ID_AVG
                    frmMain_B.LabelInhalt = text(47)
                    frmMain_B.labelValue = FormatValue(long_to_double(.DisplayInteger, FMI_Status.komma_pos), FMI_Status.komma_pos)
                    ArrowUpVisible = False
                    ArrowUpBlink = False
                    ArrowDownVisible = False
                    ArrowDownBlink = False
                    UnitVisible = True
                Case ID_DEV
                    frmMain_B.LabelInhalt = text(48)
                    frmMain_B.labelValue = FormatValue(long_to_double(.DisplayInteger, 3), 3)
                    ArrowUpVisible = False
                    ArrowUpBlink = False
                    ArrowDownVisible = False
                    ArrowDownBlink = False
                    UnitVisible = False
            End Select
            frmMain_B.LabelInhalt.Visible = True
            frmMain_B.labelValue.Visible = True
            frmMain_B.LabelUnit.Caption = GetUnit()
            
            blinktakt = Not blinktakt
            UnitBlink = boOnline
            
            If boOverload Then
                frmMain_B.labelValue = "Overlo"
                frmMain_B.LabelUnit = "ad"
                UnitVisible = True
                UnitBlink = False
            End If
                        
            If UnitVisible And (Not UnitBlink Or (UnitBlink And blinktakt)) Then
                frmMain_B.LabelUnit.Visible = True
            Else
                frmMain_B.LabelUnit.Visible = False
            End If
            
            'If ArrowUpVisible And (Not ArrowUpBlink Or (ArrowUpBlink And blinktakt)) Then
            '    frmMain_B.ImageArrowUp.Visible = True
            'Else
            '    frmMain_B.ImageArrowUp.Visible = False
            'End If
            
            'If ArrowDownVisible And (Not ArrowDownBlink Or (ArrowDownBlink And blinktakt)) Then
            '    frmMain_B.ImageArrowDown.Visible = True
            'Else
            '    frmMain_B.ImageArrowDown.Visible = False
            'End If
            frmMain_B.ImageArrowUp.Visible = ArrowUpVisible
            frmMain_B.ImageArrowDown.Visible = ArrowDownVisible
        End With
        
        If boOnline Then
            frmMain_B.cmd_S1.Caption = text(8)     'Stopp
            If (FMI_Status.memory_mode > 0) Then
                frmMain_B.cmd_S2.Caption = text(88)    'Speichern
            End If
            If FMI_Status.IdAnzeige = ID_ISTWERT Then
                frmMain_B.cmd_S3.Caption = text(33)    'Tarieren
            Else    'ID_PEAK_PLUS/ID_PEAK_MINUS
                frmMain_B.cmd_S3.Caption = text(32)    'Zur|fffd|cksetzen
            End If
            frmMain_B.Start_btn.Enabled = False
            frmMain_B.cmd_S1.BackColor = vbRed
        Else
            frmMain_B.cmd_S1.Caption = text(7)     'Start
            If (FMI_Status.IdAnzeige = ID_IDLE) Then
                frmMain_B.cmd_S2.Caption = text(122)   'Messmodus
                frmMain_B.cmd_S3.Caption = text(52)    'Einheit
            Else
                frmMain_B.cmd_S2.Caption = text(89)    'Anzeige weiter
                frmMain_B.cmd_S3.Caption = text(28)    'L|fffd|schen
            End If
            frmMain_B.cmd_S1.BackColor = vbGreen
            frmMain_B.Start_btn.Enabled = Not frmMain_B.Stop_btn.Enabled
        End If
        If (boSaved Or boOnline = False Or FMI_Status.memory_mode = 0) Then
            frmMain_B.cmd_S2.BackColor = &H8000000F
            If (boOnline) Then
                frmMain_B.cmd_S2.Caption = "--------"
            End If
        Else
            If (frmMain_B.cmd_S2.BackColor = &H80C0FF) Then
                frmMain_B.cmd_S2.BackColor = &H8000000F
            Else
                frmMain_B.cmd_S2.BackColor = &H80C0FF
            End If
        End If
    End If
End Sub

'R|fffd|ckgabe: 0 = no limit
'          1 = min unterschritten
'          2 = max |fffd|berschriten
Public Function f_check_limit(value As Double, ByRef boUp As Boolean, ByRef boDown As Boolean) As Byte
    If (value >= max_limit) Then
        f_check_limit = 2
        boUp = True
        boDown = False
    ElseIf (value <= min_limit) Then
        f_check_limit = 1
        boUp = False
        boDown = True
    Else
        f_check_limit = 0
        boUp = False
        boDown = False
    End If
End Function

Public Sub f_GetTypInfo(ByRef rcv_buf() As Byte)
    FMI_Status.mirror_typ = convert_byte_to_long(rcv_buf, I_VAL, True)
    geraet.f_max = FMI_Status.mirror_typ And &H1FFF
    geraet.variante = (FMI_Status.mirror_typ And &H70000) / (2 ^ 16)
    'If (FMI_Status.mirror_typ And &H2000) Then
    '    geraet.variante = geraet.variante + 8
    'End If
    If (FMI_Status.mirror_typ And &H2000) Then
        boCustomized = True
    Else
        boCustomized = False
    End If
    
    geraet.aufloesung = (FMI_Status.mirror_typ And &H180000) / (2 ^ 19)
End Sub

Public Sub f_GetP1(ByRef rcv_buf() As Byte)
    Dim x As Long
    x = FMI_Status.memory_mode
    FMI_Status.memory_mode = (rcv_buf(I_VAL + 2) And &HC0) / 64
    If ((x <> FMI_Status.memory_mode And FMI_Status.memory_mode < 3 And boFMIrunning) Or boAktualisieren) Then
        boInit = True
        frmMain_B.Mem_box.ListIndex = FMI_Status.memory_mode
        boInit = False
    End If
    FMI_Status.mirror_p1 = convert_byte_to_long(rcv_buf, I_VAL, False) ' wird nirgends gebraucht
    x = FMI_Status.einheit
    FMI_Status.einheit = rcv_buf(I_VAL) And &H7
    If ((x <> FMI_Status.einheit And boFMIrunning) Or boAktualisieren) Then
        SetGrenzwert ID_MAX
        SetGrenzwert ID_MIN
    End If
End Sub

Public Sub SetGrenzwert(id As Byte)
    With FMI_Status
        If (id = ID_MAX) Then 'Maximum
            max_limit = long_to_double(max_limit_roh, .komma_pos)
            If (boFMIrunning) Then
                frmMain_B.Max_limit_lbl.Caption = FormatValue(max_limit, .komma_pos)
                frmMain_B.Max_limit_lbl_2.Caption = FormatValue(max_limit, .komma_pos)
                frmMain_B.Max_limit_lbl_3.Caption = FormatValue(max_limit, .komma_pos)
            End If
        ElseIf (id = ID_MIN) Then 'Minimum
            min_limit = long_to_double(min_limit_roh, .komma_pos)
            If (boFMIrunning) Then
                frmMain_B.Min_limit_lbl.Caption = FormatValue(min_limit, .komma_pos)
                frmMain_B.Min_limit_lbl_2.Caption = FormatValue(min_limit, .komma_pos)
                frmMain_B.Min_limit_lbl_3.Caption = FormatValue(min_limit, .komma_pos)
            End If
        End If
    End With
End Sub

Attribute VB_Name = "usb_mdl"
Option Explicit
Dim usb_len As Long
Dim bRet As Boolean

Public paketlen As Byte 'Maximal 20
Public teiler As Single
Public display_teiler As Long
Public read(20) As Long
Public Data(20) As Long
Public last_index As Byte

' Permanente USB-|fffd|bertragung
Public Sub streaming()
    Dim iii As Long
    Dim val As Long
    Dim messwert As Long    ' |fffd|ber Paketgr|fffd||fffd|e gemittelter Messwert
    Dim mittelwert As Long
    Dim n As Byte
    
    iii = 0
    If (boCyclic) Then
        Do While (data_count <= ite_num) And (cell_limit_flg = True)
            Dim count As Byte
            DoEvents
            ' bei 100 Hz ist ein kleiner Wechselpuffer n|fffd|tig
            If frmMain_B.Torikomi_box.ListIndex = ID_100HZ Then
                For count = 0 To paketlen - 2
                    If (last_index = 0) Then
                        If (reqMesswert(read, paketlen, 2000) = False) Then    ' Falls Timeout beim Lesen, dann Vorgang beenden!
                            boCyclic = False
                            Exit Do
                        End If
                    End If
                    Data(count) = read(last_index)
                    last_index = last_index + 1
                    If (last_index = paketlen) Then
                        last_index = 0
                    End If
                Next count
            Else
                If (reqMesswert(Data, paketlen, 2000) = False) Then    ' Falls Timeout beim Lesen, dann Vorgang beenden!
                    boCyclic = False
                    Exit Do
                End If
            End If
                
            'Ab hier stehen in data() die gew|fffd|nschten Werte
            mittelwert = 0
            For n = 0 To paketlen - 2 ' immer nur 9 Werte mitteln!
                mittelwert = mittelwert + Data(n)
            Next n
            cyclic_val(data_count) = long_to_double((mittelwert / n), FMI_Status.komma_pos)
            
            ' Starttrigger |fffd|berpr|fffd|fen
            If P_load_2 Then    'Positive Startkraft (steigende Flanke)
                If (trg_on_flanke_en = False) Then
                    If cyclic_val(data_count) <= S_trg_num Then
                        trg_on_flanke_en = True
                    End If
                ElseIf cyclic_val(data_count) >= S_trg_num Then
                    trg_on_flg = True
                End If
            ElseIf M_load_2 Then    'Negative Startkraft (fallende Flanke)
                If (trg_on_flanke_en = False) Then
                    If cyclic_val(data_count) >= S_trg_num Then
                        trg_on_flanke_en = True
                    End If
                ElseIf cyclic_val(data_count) <= S_trg_num Then
                    trg_on_flg = True
                End If
            End If
            If trg_on_en = False Then
                trg_on_flg = True
            End If
           
            'Stopptrigger |fffd|berpr|fffd|fen
            If (trg_on_flg And trg_off_en) Then 'Abschalttrigger erst, wenn Einschalttrigger gekommen ist
                If P_off_load Then  'Positive Stoppkraft (steigende Flanke)
                    If (trg_off_flanke_en = False) Then
                        If cyclic_val(data_count) <= S_trg_off_num Then
                            trg_off_flanke_en = True    'Triggerwert einmal erreicht, nun kann steigende Flanke erkannt werden
                        End If
                    ElseIf cyclic_val(data_count) >= S_trg_off_num Then
                        trg_off_flg = True
                        stop_btn_flg = True
                    End If
                ElseIf M_off_load Then  'Negative Stoppkraft
                    If (trg_off_flanke_en = False) Then
                        If cyclic_val(data_count) >= S_trg_off_num Then
                            trg_off_flanke_en = True    'Triggerwert einmal erreicht, nun kann fallende Flanke erkannt werden
                        End If
                    ElseIf cyclic_val(data_count) <= S_trg_off_num Then
                        trg_off_flg = True
                        stop_btn_flg = True
                    End If
                End If
            End If
        
            If trg_on_flg And Not trg_off_flg Then
                frmMain_B.State.Caption = text(30)          'Messung
                frmMain_B.State.BackColor = &HFFFF00
                If iii Mod teiler = 0 Then   'Datenreduktion
                    outp_mdl.cell_output_cyclic data_count
                    data_count = data_count + 1
                End If
                iii = iii + 1
            End If
            If stop_btn_flg Then
                stop_btn_flg = False
                boCyclic = False
                Exit Do
            End If
        
            If form_close_flg = True Then
                'form_close_flg = False
                boCyclic = False
                Exit Do
            End If
        Loop
    Else
        'MsgBox "boCyclic = FALSE"
    End If
    
    If Not form_close_flg Then
        frmMain_B.stop_routine
    End If
    form_close_flg = False
End Sub

Public Sub data_in()
    Dim jj As Long
    Dim bulk_try As Long
    Dim adr As Long

    USBByteCmd ID_STATUS, 0  'Statustelegramm abschalten
    USBByteCmd ID_PS081_RAM_RD, RAM_N_MESSWERTE
    If geraet.PIC_Version > 309030 Then
        USBByteCmd ID_STATISTIK, 0
    Else
        USBByteCmd ID_STATISTIK, 0, False
        wait 3
    End If
    wait 1
    USBByteCmd ID_PS081_RAM_RD, RAM_PEAK_PLUS, True
    USBByteCmd ID_PS081_RAM_RD, RAM_PEAK_MINUS, True
    
    outp_mdl.data_output 0, False   'Um Samplezahl etc. zu schreiben
    wait 1
    For adr = 0 To FMI_Status.MemCount - 1
        sing_load(adr) = USBReadMemory(adr)
        DoEvents
        DoEvents
        outp_mdl.data_output adr + 1, False
        DoEvents
        DoEvents
    Next adr
    outp_mdl.data_output 0, True     'Um n|fffd|chste freie Zelle anzuw|fffd|hlen
    USBByteCmd ID_STATUS, 1, True  'Statustelegramm wieder starten
End Sub




INQUEST-PP=macro
