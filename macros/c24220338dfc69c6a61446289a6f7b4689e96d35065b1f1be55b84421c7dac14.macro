Attribute VB_Name = "HagBrownCalc"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|., 07.2003
Option Explicit

Public Const SecInDay = 86400
Public Const G = 9.8
Public Const Pst = 0.101325
Public Const Step = 90
Public Const AtmToMpa = 0.101325
Public Const pi = 3.1416


Function Nlc_calc(Nl) As Double
Dim Nlc_X(1 To 10) As Double
Dim Nlc_Y(1 To 10) As Double
Dim i, ind As Integer
  
  'Correlation for Nlc
  Nlc_X(1) = 0.002: Nlc_Y(1) = 0.0019
  Nlc_X(2) = 0.005: Nlc_Y(2) = 0.0022
  Nlc_X(3) = 0.01:  Nlc_Y(3) = 0.0024
  Nlc_X(4) = 0.02:  Nlc_Y(4) = 0.0028
  Nlc_X(5) = 0.03:  Nlc_Y(5) = 0.0033
  Nlc_X(6) = 0.06:  Nlc_Y(6) = 0.0047
  Nlc_X(7) = 0.1:   Nlc_Y(7) = 0.0064
  Nlc_X(8) = 0.15:  Nlc_Y(8) = 0.008
  Nlc_X(9) = 0.2:   Nlc_Y(9) = 0.009
  Nlc_X(10) = 0.4:  Nlc_Y(10) = 0.0115

  ind = -1
  For i = 1 To 9
    If ((Log(Nl) > Log(Nlc_X(i))) And (Log(Nl) <= Log(Nlc_X(i + 1)))) Then
      ind = i: Exit For
    Else
    End If
  Next
  
  If ind < 0 Then
    If Log(Nl) < Log(Nlc_X(1)) Then Nlc_calc = Nlc_Y(1)
    If Log(Nl) > Log(Nlc_X(10)) Then Nlc_calc = Nlc_Y(10)
  Else
    Nlc_calc = Log(Nlc_Y(ind)) + (Log(Nlc_Y(ind + 1)) - Log(Nlc_Y(ind))) / (Log(Nlc_X(ind + 1)) - Log(Nlc_X(ind))) * (Log(Nl) - Log(Nlc_X(ind)))
    Nlc_calc = Exp(Nlc_calc)
  End If
  
End Function

Function Psi_calc(num) As Double
  
Dim Psi_X(1 To 12) As Double
Dim Psi_Y(1 To 12) As Double
Dim ind, i As Integer
  
  'Correlation for Psi
  Psi_X(1) = 0.01:  Psi_Y(1) = 1
  Psi_X(2) = 0.02:  Psi_X(2) = 1.1
  Psi_X(3) = 0.025: Psi_X(3) = 1.23
  Psi_X(4) = 0.03:  Psi_X(4) = 1.4
  Psi_X(5) = 0.035: Psi_X(5) = 1.53
  Psi_X(6) = 0.04:  Psi_Y(6) = 1.6
  Psi_X(7) = 0.045: Psi_Y(7) = 1.65
  Psi_X(8) = 0.05:  Psi_Y(8) = 1.68
  Psi_X(9) = 0.06:  Psi_Y(9) = 1.74
  Psi_X(10) = 0.07:  Psi_Y(10) = 1.78
  Psi_X(11) = 0.08:  Psi_Y(11) = 1.8
  Psi_X(12) = 0.09:  Psi_Y(12) = 1.83
  
  ind = -1
  For i = 1 To 11
    If (num > Psi_X(i)) And (num <= Psi_X(i + 1)) Then
      ind = i: Exit For
    Else
    End If
  Next
  
  If ind < 0 Then
    If num < Psi_X(1) Then Psi_calc = Psi_Y(1)
    If num > Psi_X(12) Then Psi_calc = Psi_Y(12)
  Else
    Psi_calc = Psi_Y(ind) + (Psi_Y(ind + 1) - Psi_Y(ind)) / (Psi_X(ind + 1) - Psi_X(ind)) * (num - Psi_X(ind))
  End If
  
End Function

Function Hl_calc(num) As Double
Dim Hl_psi_X(1 To 12) As Double
Dim Hl_psi_Y(1 To 12) As Double
Dim ind, i As Integer

  'correlation for Hl/Psi
  Hl_psi_X(1) = 0.000002: Hl_psi_Y(1) = 0.04
  Hl_psi_X(2) = 0.000005: Hl_psi_Y(2) = 0.09
  Hl_psi_X(3) = 0.00001:  Hl_psi_Y(3) = 0.15
  Hl_psi_X(4) = 0.00002:  Hl_psi_Y(4) = 0.18
  Hl_psi_X(5) = 0.00005:  Hl_psi_Y(5) = 0.25
  Hl_psi_X(6) = 0.0001:   Hl_psi_Y(6) = 0.34
  Hl_psi_X(7) = 0.0002:   Hl_psi_Y(7) = 0.44
  Hl_psi_X(8) = 0.0005:   Hl_psi_Y(8) = 0.65
  Hl_psi_X(9) = 0.001:    Hl_psi_Y(9) = 0.82
  Hl_psi_X(10) = 0.002:   Hl_psi_Y(10) = 0.92
  Hl_psi_X(11) = 0.003:   Hl_psi_Y(11) = 0.96
  Hl_psi_X(12) = 0.01:    Hl_psi_Y(12) = 1
  
  ind = -1
  For i = 1 To 11
    If (Log(num) > Log(Hl_psi_X(i))) And (Log(num) <= Log(Hl_psi_X(i + 1))) Then
      ind = i: Exit For
    Else
    End If
  Next
  
  If ind < 0 Then
    If Log(num) < Log(Hl_psi_X(1)) Then Hl_calc = Hl_psi_Y(1)
    If Log(num) > Log(Hl_psi_X(12)) Then Hl_calc = Hl_psi_Y(12)
  Else
    Hl_calc = Hl_psi_Y(ind) + (Hl_psi_Y(ind + 1) - Hl_psi_Y(ind)) / (Log(Hl_psi_X(ind + 1)) - Log(Hl_psi_X(ind))) * (Log(num) - Log(Hl_psi_X(ind)))
  End If
  
End Function

Public Function CalcBHP(DepthW, DepthP, Ext, Qliq, WC, RoOil, RoWat, GSG, ViscW, Pwh, Pbubl, GOR, TempRes, TempWh, Epipe, D_T, D_C) As Double
Dim Sinus, Qoil, gradT, Temper, Roliq, ViscL, ViscG, SigmaL, d As Double
Dim Qliq_P, Qgas_P, RoOil_P, RoGas_P As Double
Dim StepCount, i As Integer
Dim Pressure() As Double
  
  'set the default values
  If IsMissing(GSG) Then GSG = 0.9
  If IsMissing(ViscW) Then ViscW = 0.105
  If IsMissing(TempRes) Then TempRes = 80
  If IsMissing(TempWh) Then TempWh = 20
  If IsMissing(Epipe) Then Epipe = 0.000016
  If IsMissing(D_T) Then D_T = 0.062
  If IsMissing(D_C) Then D_C = 0.116
    
  Qoil = Qliq * (1 - (WC / 100))
  
  'deviation from horizontal
  Sinus = (DepthW - Ext) / DepthW
  StepCount = Int(DepthW / Step) + 1
  
  'temperature gradient
  gradT = (TempRes - TempWh) / DepthW
  
  'internal diameter of pipe
  d = D_T
  
  'from head to bottomhole of the well
  ReDim Pressure(StepCount)
  Pressure(1) = Pwh * AtmToMpa
  For i = 2 To StepCount
    If ((Step * StepCount) > (Sinus * DepthP)) Then d = D_C
    Temper = 273 + TempWh + i * Step * gradT
    Qliq_P = Qliq * (WC / 100) + Qoil * Boil(Pressure(i - 1), Pbubl * AtmToMpa, GOR, RoOil / 1000, GSG, Temper)
    Qgas_P = GasVolFR(Qoil, Pressure(i - 1), Temper, Pbubl * AtmToMpa, GOR, GSG)
    RoOil_P = OilDensity(Pressure(i - 1), Pbubl * AtmToMpa, GOR, RoOil / 1000, GSG, Temper)
    RoGas_P = GasDensity(Pressure(i - 1), Temper, GSG)
    Roliq = RoWat * WC / 100 + RoOil_P * (1 - (WC / 100))
    ViscL = ViscW / 1000 * WC / 100 + ViscOil(Pressure(i - 1), Pbubl * AtmToMpa, GOR, RoOil / 1000, Temper) / 1000 * (1 - (WC / 100))
    ViscG = ViscGas(RoGas_P, Temper, GSG * 29)
    SigmaL = SigmaLiq(Pressure(i - 1), Temper, RoOil / 1000, WC / 100)
    Pressure(i) = Pressure(i - 1) + Step * 9.8 * GetPressGradientSI(Pressure(i - 1), Qliq_P, Qgas_P, Roliq, RoGas_P, ViscL, ViscG, SigmaL, d, Epipe, Sinus)
  Next i
  CalcBHP = Format(Pressure(StepCount - 1) / AtmToMpa, "###0.0")
  
End Function

Function GetPressGradientSI(P, Ql, Qg, DensL, DensG, ViscL, ViscG, SigmaL, d, Epipe, Sinus) As Double
Dim V_sl, V_sg, V_m, Vs, N_lv, N_gv, N_d, N_l, N_lc, num, Psi, HL, LB, DensNS, Dens As Double
Dim Visc, ReNum, FrictF, FrictGrad, ElGrad, Ekinetic, TotalGrad As Double

  V_sl = Ql / (pi * Sqr(d) / 4) / SecInDay
  V_sg = Qg / (pi * Sqr(d) / 4) / SecInDay
  V_m = V_sl + V_sg
    
  N_lv = V_sl * ((DensL / G / SigmaL) ^ 0.25)
  N_gv = V_sg * ((DensL / G / SigmaL) ^ 0.25)
  N_d = d * ((DensL * G / SigmaL) ^ 0.5)
  N_l = ViscL * ((G / DensL / (SigmaL) ^ 3) ^ 0.25)
   
  'check for single phase flow
  If (V_sl / V_m) = 1 Then
    HL = 1
    GoTo Label2
  ElseIf (V_sl / V_m) = 0 Then
    HL = 0
    GoTo Label2
  End If
  
  GoTo Noreg
  'Griffith and Wallis correction for bubble flow
  LB = 1.071 - 0.2218 * (Sqr(V_m * 3.28) / (d * 3.28))
  'must be greather than 0.13
  If LB < 0.13 Then LB = 0.13
  If (V_sg / V_m) > LB Then GoTo Noreg
  Vs = 0.8 * 0.3048
  HL = 1 - 0.5 * (1 + V_m / Vs - ((1 + V_m / Vs) ^ 2 - 4 * V_sg / Vs) ^ 0.5)
  If HL < (V_sl / V_m) Then HL = V_sl / V_m
  'density calculation
  Dens = DensL * HL + DensG * (1 - HL)
  ReNum = DensL * (V_sl / HL) * d / (ViscL)
  FrictF = 1 / ((1.14 - 2 * Log(Epipe / d + 21.25 / ((ReNum) ^ 0.9))) ^ 2)
  'calculate pressure gradients
  FrictGrad = (FrictF * DensL * (V_sl / HL) ^ 2) / 2 / d / G
  ElGrad = Dens * Sinus
  TotalGrad = (ElGrad + FrictGrad)
  
  'FrictGrad = (FrictF * (DensL * 0.0624) * ((V_sl * 3.28) / HL) ^ 2) / (2 * (D * 3.28) * 32.2 * 144)
  'ElGrad = (Dens * 0.0624) * Sinus / 144
  'TotalGrad = (ElGrad + FrictGrad) * 6894.757 / 0.3048 / 10
  GoTo Result
   
  'liquid holdup calculation
Noreg:
  N_lc = Nlc_calc(N_l)
  num = N_gv * ((N_l) ^ 0.38) / (N_d) ^ 2.14
  Psi = Psi_calc(num)
  num = (N_lv * N_lc) / (((N_gv) ^ 0.575) * N_d) * ((P / Pst) ^ 0.1)
  HL = Hl_calc(num) * Psi
  
  If HL > 1 Then HL = 1
  If HL < 0 Then HL = 0
  If HL < (V_sl / V_m) Then HL = V_sl / V_m
  
  'density calculation
Label2:
  DensNS = DensL * (V_sl / V_m) + DensG * (V_sg / V_m)
  Dens = DensL * HL + DensG * (1 - HL)
  
  'friction factor calculation
  Visc = ((ViscL) ^ HL) * ((ViscG) ^ (1 - HL))
  ReNum = DensNS * (V_m) * d / Visc
  FrictF = 1 / ((1.14 - 2 * Log(Epipe / d + 21.25 / ((ReNum) ^ 0.9))) ^ 2)
  
  'total pressure gradient
  FrictGrad = FrictF * Sqr(DensNS) * Sqr(V_m) / (2 * Dens * d * G)
  ElGrad = Dens * Sinus
  TotalGrad = (ElGrad + FrictGrad)
  
  'FrictGrad = FrictF * Sqr(DensNS * 0.0624) * Sqr(V_m * 3.28) / (2 * (Dens * 0.0624) * (D * 3.28) * 32.2 * 144)
  'ElGrad = (Dens * 0.0624) * Sinus / 144
  'Ekinetic = V_m * V_sg * Dens / P / G
  Ekinetic = 1
  If Ekinetic > 0.95 Then
    'TotalGrad = (ElGrad + FrictGrad) * 6894.757 / 0.3048
    TotalGrad = (ElGrad + FrictGrad)
  Else
    TotalGrad = (ElGrad + FrictGrad) / (1 - Ekinetic)
  End If
Result:
  GetPressGradientSI = TotalGrad / 1000000
End Function

Attribute VB_Name = "Module1"
Public Function GetJd(hp, k, spgrpr, por, Kf) As Double
Dim pi As Double

mD = 9.869233E-16
pi = 3.14159265358979
    
    por = por / 100
    Kf = Kf * mD * 1000
    k = k * mD
    Rw = 0.1
    re = 250
    hf = hp * 1.5
    M = 5 * hp * 1000 / 2
    
    Call DLrp1(hp, hf, rp)
    
    Vf = rp * M / ((1 - por) * (1000 * spgrpr))
    Vr = hp * re ^ 2 * pi
    Nprop = (4 * Vf * Kf) / (k * Vr)
    
    Call FracOpt(Nprop, Jdopt, Cfdopt, Ixopt)

    GetJd = Jdopt
End Function
Public Function GetS(Jdopt) As Double
re = 250
Rw = 0.1
    sf = 1 / Jdopt - Log(re / Rw) + 3 / 4
    GetS = sf
End Function
Sub DLrp1(hp, hf, rp)
'
' Sub recorded 3/17/99 by Peter Valko
'
'
    If hp <= hf Then
     rp = hp / hf
    Else
     rp = 1
    End If
End Sub
'***********************************************************
'*                                Jd                       *
'***********************************************************
Private Function Jd(Nprop As Double, Cfd As Double) As Double
Select Case Nprop
  Case Is <= 0.1
    Jd = Jd1(Nprop, Cfd)
  Case Is <= 1#
    Jd = Jd2(Nprop, Cfd)
  Case Is <= 10#
    Jd = Jd3(Nprop, Cfd)
  Case Else
    Jd = Jd4(Nprop, Cfd)
End Select
End Function
Public Sub FracPI(Npropin, Cfdin, Ixin, Jdout)
'Calculate the variable that is missing from the other two
Dim Nprop As Double, Cfd As Double, Ix As Double
If (Npropin * Cfdin * Ixin <> 0) Then End
If Npropin = 0 Then
 Cfd = Cfdin
 Ix = Ixin
 Nprop = Cfd * Ix ^ 2
End If
If Cfdin = 0 Then
 Nprop = Npropin
 Ix = Ixin
 Cfd = Nprop / Ix ^ 2
End If
If Ix = 0 Then
 Nprop = Npropin
 Cfd = Cfdin
 Ix = Sqr(Nprop / Cfd)
End If
 Jdout = Jd(Nprop, Cfd)
End Sub

Public Sub FracOpt(Npropin, Jdoptout, Cfdoptout, Ixoptout)
Dim Nprop As Double, Jdopt As Double, Cfdopt As Double, Ixopt As Double
Dim xl As Double, xu As Double, R As Double
Dim x1 As Double, x2 As Double, f1 As Double, f2 As Double, d As Double
Nprop = Npropin
'Golden Section
 xu = Nprop / 0.00000001
 xl = Nprop
 R = (Sqr(5) - 1) / 2
 'finding the optimum
 d = R * (xu - xl)
 x1 = xl + d
 x2 = xu - d
 f1 = Jd(Nprop, x1)
 f2 = Jd(Nprop, x2)
 Do
    d = R * d
    If f1 > f2 Then
            xl = x2
            x2 = x1
            f2 = f1
            x1 = xl + d
            f1 = Jd(Nprop, x1)
    Else
            xu = x1
            x1 = x2
            f1 = f2
            x2 = xu - d
            f2 = Jd(Nprop, x2)
    End If
    If Abs(xu - xl) < 0.00001 Then Exit Do
 Loop
 Cfdopt = (xl + xu) / 2
 Ixopt = Sqr(Nprop / Cfdopt)
 Jdopt = Jd(Nprop, Cfdopt)
'
 Cfdoptout = Cfdopt
 Ixoptout = Ixopt
 Jdoptout = Jdopt
End Sub
'***********************************************************
'*                    Jd for Nprop < 0.1                      *
'***********************************************************
Private Function Jd1(Nprop As Double, Cfd As Double) As Double
 Jd1 = 1 / (-0.629 + 0.5 * Log(Cfd / Nprop) + fCL(Cfd))
End Function
'***********************************************************
'*             Jd for Nprop between 0.1 and 1              *
'***********************************************************
Private Function Jd2(Nprop As Double, Cfd As Double) As Double
Dim Ix As Double, delta1 As Double
 Ix = Sqr(Nprop / Cfd)
 delta1 = Jd_Ix1(Nprop) - Jd1(Nprop, Nprop)
 Jd2 = Jd1(Nprop, Cfd) + delta1 * g1(Ix)
End Function
'***********************************************************
'*             Jd for Nprop between 1 and 10               *
'***********************************************************
Private Function Jd3(Nprop As Double, Cfd As Double) As Double
Dim Ix As Double, delta2 As Double
 Ix = Sqr(Nprop / Cfd)
 delta2 = Jd_Ix1(Nprop) - Jd2(1#, Nprop)
 Jd3 = Jd2(1, Cfd) + delta2 * g10(Ix)
End Function
'***********************************************************
'*             Jd for Nprop above 10                       *
'***********************************************************
Private Function Jd4(Nprop As Double, Cfd As Double) As Double
Dim Ix As Double, delta3 As Double, Cfd10 As Double
 Ix = Sqr(Nprop / Cfd)
 Cfd10 = 10 / Ix ^ 2
 delta3 = Jd_Ix1(Nprop) - Jd_Ix1(10#)
 Jd4 = Jd3(10#, Cfd10) + delta3 * hinf(Ix)
End Function
'***********************************************************
'*               Cinco-Ley's Function fCL(CfD)               *
'***********************************************************
Private Function fCL(Cfd As Double) As Double  'Cinco-Ley Function
Dim num As Double, denom As Double
 num = 1.65 - 0.328 * Log(Cfd) + 0.116 * (Log(Cfd)) ^ 2
 denom = 1 + 0.18 * Log(Cfd) + 0.064 * (Log(Cfd)) ^ 2 + 0.005 * (Log(Cfd)) ^ 3
 fCL = num / denom
End Function
'***********************************************************
'*               Jd calculated at Ix = 1                   *
'***********************************************************
Private Function Jd_Ix1(Nprop As Double) As Double
 If (Nprop < 241) Then
  Jd_Ix1 = 1.13576 - 0.0529836 * Log(Nprop) - 0.912619 * (Atn(0.37403 - 0.494469 * Log(Nprop)))
 Else
  Jd_Ix1 = 1.909859
  End If
End Function
'***********************************************************
'*                        g1 function                      *
'***********************************************************
Private Function g1(Ix As Double) As Double
 g1 = 3.357 * Ix ^ 5 - 10.686 * Ix ^ 4 + 10.041 * Ix ^ 3 - 2.1452 * Ix ^ 2 + 0.449 * Ix - 0.01452
End Function
'***********************************************************
'*                        g10 function                     *
'***********************************************************
Private Function g10(Ix As Double) As Double
 g10 = 2.5016 * Ix ^ 5 - 7.8231 * Ix ^ 4 + 6.7988 * Ix ^ 3 - 1.7905 * Ix ^ 2 + 1.272 * Ix + 0.0346 + 1.44845779338554E-03
End Function
'***********************************************************
'*                      hinf function                      *
'***********************************************************
Private Function hinf(Ix As Double) As Double
 hinf = Ix ^ 2
End Function
Attribute VB_Name = "Module2"
Attribute VB_Name = "PVT_correlations"
Option Explicit
'Oil volume factor calculation
Function Boil(P, Pbubl, GOR, OSG, GSG, T) As Double
Dim F, R_, OilCompr As Double
  If P <= Pbubl Then
    'Rs
    R_ = Rs(P, Pbubl, GOR)
    F = 5.615 * R_ * (GSG / OSG) ^ 0.5 + 2.25 * T - 575
    Boil = 0.972 + 0.000147 * (F) ^ 1.175
  Else
    F = 5.615 * GOR * (GSG / OSG) ^ 0.5 + 2.25 * T - 575
    R_ = 0.972 + 0.000147 * (F) ^ 1.175
    'Oil Compressibility
    OilCompr = (28.1 * GOR + 30.6 * T - 1180 * GSG + 1784 / OSG - 10910) / (P * (10) ^ 5)
    Boil = R_ * Exp(OilCompr * (Pbubl - P))
  End If
End Function

'oil volume factor, Standigs correlation
'P = MPa
'T = K
Function Boil_Standing(P, Pbubl, GOR, GSG, OSG, T) As Double
Dim F, Co, Bob, Rs_ As Double
  If P <= Pbubl Then
    Rs_ = Rs(P, Pbubl, GOR)
    F = 5.615 * Rs_ * ((GSG / OSG) ^ 0.5) + 2.25 * T - 575
    Boil_Standing = 0.972 + 0.000147 * (F ^ 1.175)
  Else
    Rs_ = Rs(Pbubl, Pbubl, GOR)
    F = 5.615 * Rs_ * ((GSG / OSG) ^ 0.5) + 2.25 * T - 575
    Bob = 0.972 + 0.000147 * (F ^ 1.175)
    Co = (28.1 * GOR + 30.6 * T - 1180 * GSG + 1784 / OSG - 10910) / (P * (10) ^ 5)
    Boil_Standing = Bob * Exp(Co * (Pbubl - P))
  End If
  
End Function

'Gas volume factor calculation
'P=Mpa
'T=K
Function Bgas(P, GSG, T) As Double
Dim tpc, ppc, tpr, ppr, A, B, C, d, zf As Double
  'Z-factor calculation
  tpc = 94.72 + 170.72 * GSG
  ppc = 4.892 - 0.405 * GSG
  'tpc = 168 + 325 * GSG - 12.5 * (GSG ^ 2)
  'ppc = 677 + 15 * GSG - 37.5 * (GSG ^ 2)
  tpr = T / tpc
  ppr = P / ppc

  A = 1.39 * (tpr - 0.92) ^ 0.5 - 0.36 * tpr - 0.101
  B = ppr * (0.62 - 0.23 * tpr) + (ppr) ^ 2 * (0.066 / (tpr - 0.86) - 0.037) + 0.32 * (ppr) ^ 6 / Exp(20.723 * (tpr - 1))
  C = 0.132 - 0.32 * Log(tpr) / Log(10)
  d = Exp(0.715 - 1.128 * tpr + 0.42 * (tpr) ^ 2)
  zf = A + (1 - A) * Exp(-B) + C * (ppr) ^ d
  'gas volume factor
  'Bgas = 0.3505 * 0.001 * Zf * T / P
  Bgas = 347.22 * zf * T / P
End Function

'Oil density calculation
'Oil density = kg/m3
'P,Pbubl = MPa
Function OilDensity(P, Pbubl, GOR, OSG, GSG, T) As Double
Dim R, Bo As Double
  R = Rs(P, Pbubl, GOR)
  Bo = Boil_Standing(P, Pbubl, GOR, OSG, GSG, T)
  OilDensity = (1000 * OSG + 1.224 * GSG * R) / Bo
End Function

'Gas density calculation
'P = MPa
'T = K
Function GasDensity(P, T, GSG) As Double
Dim A, B, C, d, tpc, ppc, tpr, ppr, zf As Double
  'Z-factor calculation
  tpc = 94.72 + 170.72 * GSG
  ppc = 4.892 - 0.405 * GSG
  'tpc = 168 + 325 * GSG - 12.5 * (GSG ^ 2)
  'ppc = 677 + 15 * GSG - 37.5 * (GSG ^ 2)
  tpr = T / tpc
  ppr = P / ppc

  A = 1.39 * ((tpr - 0.92) ^ 0.5) - 0.36 * tpr - 0.101
  B = ppr * (0.62 - 0.23 * tpr) + (ppr) ^ 2 * (0.066 / (tpr - 0.86) - 0.037) + 0.32 * (ppr) ^ 6 / Exp(20.723 * (tpr - 1))
  C = 0.132 - 0.32 * Log(tpr) / Log(10)
  d = Exp(0.715 - 1.128 * tpr + 0.42 * (tpr) ^ 2)
  zf = A + (1 - A) * Exp(-B) + C * (ppr) ^ d
  
  GasDensity = 3586 * GSG * P / (zf * T)
End Function

'Gas viscosity calculation
'T = K
'RoG = kg/m3
Function ViscGas(RoG, T, M) As Double
Dim A, B, C
  A = (22.7 + 0.0483 * M) * ((T) ^ 1.5) / (209 + 19 * M + 1.8 * T)
  B = (3.5 + 0.01 * M + 547.8 / T)
  C = 2.4 - 0.2 * B
  ViscGas = A * 0.0001 * Exp(B * ((0.001 * RoG) ^ C))
  '!!!!!!!!!!!!!!!
  ViscGas = ViscGas / 1000
  '!!!!!!!!!!!!!!!
End Function

'Oil viscosity Beggs&Robinson
'ViscOil = mPa*s
'P , Pbubl = MPa
'T = K
Function ViscOil(P, Pbubl, GOR, OSG, T) As Double
Dim Rsat, ViscDO, ViscB, ViscSat, A, B As Double
  'Rs
  Rsat = Rs(P, Pbubl, GOR)
  'dead oil viscosity
  'ViscDO = 10 ^ (((1.8 * T - 460) ^ (-1.163)) * 10 ^ (5.6926 - 2.862545 / OSG)) - 1
  A = ((1.8 * T - 460) ^ (-1.163)) * Exp(13.108 - 6.591 / OSG)
  ViscDO = 10 ^ (A) - 1
  'correction for saturated oil
  A = 10.715 * ((5.615 * Rsat + 100) ^ (-0.515))
  B = 5.44 * ((5.615 * Rsat + 150) ^ (-0.338))
  ViscSat = A * (ViscDO) ^ B
  'above the bubble point
  If P > Pbubl Then
    A = 10.715 * ((5.615 * Rsat + 100) ^ (-0.515))
    B = 5.44 * ((5.615 * Rsat + 150) ^ (-0.338))
    ViscB = A * (ViscDO) ^ B
    ViscOil = ViscB * (P / Pbubl) ^ (956.44 * (P ^ 1.187) * Exp(-11.513 - 0.01302 * P))
  Else
    ViscOil = ViscSat
  End If
End Function

'Oil-gas surface tension
Function SigmaOilGas(P, T, OSG) As Double
Dim C As Double
  C = 1 - 0.235 * (P) ^ 0.45
  If (T > 311) Then
    SigmaOilGas = C * 0.001 * (71.31 - 36.38 / OSG)
  Else
    SigmaOilGas = C * 0.001 * ((72.81 - 36.38 / OSG) - (0.026 * T - 1.771))
  End If
End Function

'Water-gas surface tension
'P = MPa
'sigmaWG = n/m
Function SigmaWaterGas(P, T) As Double
  'If P <= 34.5 Then
    'SigmaWaterGas = 0.032 + 0.036 * Sqr(1 - P / 34.5)
  'Else
    'SigmaWaterGas = 0.032
  'End If
  SigmaWaterGas = 75 - 6.296 * (P ^ 0.349) - (1.8 * T - 534) * (22 - 6.296 * (P ^ 0.349) + 2.5256 * (P ^ 0.637)) / 206
End Function

'Liquid-gas surface tension
'sigma = n/m
Function SigmaLiq(P, T, OSG, WC) As Double
  SigmaLiq = SigmaWaterGas(P, T) * WC + SigmaOilGas(P, T, OSG) * (1 - WC)
End Function

'Solution gas/oil ratio Standing
'P = MPa
Function Rs(P, Pbubl, GOR) As Double
  If P >= Pbubl Then
    Rs = GOR
  Else
    Rs = GOR * (P / Pbubl) ^ 1.204
  End If
End Function

'gas volumetric flow rate
Function GasVolFR(Qoil, P, T, Pbubl, GOR, GSG)
Dim Dens_
  If P < Pbubl Then
    Dens_ = GasDensity(P, T, GSG)
    GasVolFR = 1.224 * GSG * GOR * (1 - (P / Pbubl) ^ 1.204) * Qoil / Dens_
  Else
    GasVolFR = 0
  End If
End Function

Function Power(X, Y) As Double
  Power = Exp(Y * Log(X))
End Function



Attribute VB_Name = "Sheet52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub btnCheckTR_Click()
  
  CheckTR (ActiveWorkbook.ActiveSheet.Name)
  
End Sub

Private Sub chbDoReplace_Click()

End Sub

Private Sub CheckBox1_Click()

End Sub



Public Function GetJd(hp, k, spgrpr, por, Kf) As Double


T = 1000
mD = 9.869233E-16
pi = 3.14159265358979
    
 '   spgrpr = Range("AQ3")
 '   por = Range("AQ2") / 100
 '   Kf = Range("AT2") * md * 1000
    por = por / 100
    Kf = Kf * mD * 1000
    k = k * mD
    
    Rw = 0.1
    re = 250
    hf = hp * 1.5
    M = 5 * hp * T / 2
    Call DLrp1(hp, hf, rp)
    Vf = rp * M / ((1 - por) * (1000 * spgrpr))
    Vr = hp * re ^ 2 * pi
    Nprop = (4 * Vf * Kf) / (k * Vr)
    Call FracOpt(Nprop, Jdopt, Cfdopt, Ixopt)
'    sf = 1 / Jdopt - Log(re / Rw) + 3 / 4
'    Folds = (Log(re / rw) - 3 / 4 + spre) / (Log(re / rw) - 3 / 4 + sf)
    GetJd = Jdopt
'    Range("B30") = sf
End Function
Sub DLrp1(hp, hf, rp)
'
' Sub recorded 3/17/99 by Peter Valko
'
'
    If hp <= hf Then
     rp = hp / hf
    Else
     rp = 1
    End If
End Sub
'***********************************************************
'*                                Jd                       *
'***********************************************************
Private Function Jd(Nprop As Double, Cfd As Double) As Double
Select Case Nprop
  Case Is <= 0.1
    Jd = Jd1(Nprop, Cfd)
  Case Is <= 1#
    Jd = Jd2(Nprop, Cfd)
  Case Is <= 10#
    Jd = Jd3(Nprop, Cfd)
  Case Else
    Jd = Jd4(Nprop, Cfd)
End Select
End Function
Public Sub FracPI(Npropin, Cfdin, Ixin, Jdout)
'Calculate the variable that is missing from the other two
Dim Nprop As Double, Cfd As Double, Ix As Double
If (Npropin * Cfdin * Ixin <> 0) Then End
If Npropin = 0 Then
 Cfd = Cfdin
 Ix = Ixin
 Nprop = Cfd * Ix ^ 2
End If
If Cfdin = 0 Then
 Nprop = Npropin
 Ix = Ixin
 Cfd = Nprop / Ix ^ 2
End If
If Ix = 0 Then
 Nprop = Npropin
 Cfd = Cfdin
 Ix = Sqr(Nprop / Cfd)
End If
 Jdout = Jd(Nprop, Cfd)
End Sub

Public Sub FracOpt(Npropin, Jdoptout, Cfdoptout, Ixoptout)
Dim Nprop As Double, Jdopt As Double, Cfdopt As Double, Ixopt As Double
Dim xl As Double, xu As Double, R As Double
Dim x1 As Double, x2 As Double, f1 As Double, f2 As Double, d As Double
Nprop = Npropin
'Golden Section
 xu = Nprop / 0.00000001
 xl = Nprop
 R = (Sqr(5) - 1) / 2
 'finding the optimum
 d = R * (xu - xl)
 x1 = xl + d
 x2 = xu - d
 f1 = Jd(Nprop, x1)
 f2 = Jd(Nprop, x2)
 Do
    d = R * d
    If f1 > f2 Then
            xl = x2
            x2 = x1
            f2 = f1
            x1 = xl + d
            f1 = Jd(Nprop, x1)
    Else
            xu = x1
            x1 = x2
            f1 = f2
            x2 = xu - d
            f2 = Jd(Nprop, x2)
    End If
    If Abs(xu - xl) < 0.00001 Then Exit Do
 Loop
 Cfdopt = (xl + xu) / 2
 Ixopt = Sqr(Nprop / Cfdopt)
 Jdopt = Jd(Nprop, Cfdopt)
'
 Cfdoptout = Cfdopt
 Ixoptout = Ixopt
 Jdoptout = Jdopt
End Sub
'***********************************************************
'*                    Jd for Nprop < 0.1                      *
'***********************************************************
Private Function Jd1(Nprop As Double, Cfd As Double) As Double
 Jd1 = 1 / (-0.629 + 0.5 * Log(Cfd / Nprop) + fCL(Cfd))
End Function
'***********************************************************
'*             Jd for Nprop between 0.1 and 1              *
'***********************************************************
Private Function Jd2(Nprop As Double, Cfd As Double) As Double
Dim Ix As Double, delta1 As Double
 Ix = Sqr(Nprop / Cfd)
 delta1 = Jd_Ix1(Nprop) - Jd1(Nprop, Nprop)
 Jd2 = Jd1(Nprop, Cfd) + delta1 * g1(Ix)
End Function
'***********************************************************
'*             Jd for Nprop between 1 and 10               *
'***********************************************************
Private Function Jd3(Nprop As Double, Cfd As Double) As Double
Dim Ix As Double, delta2 As Double
 Ix = Sqr(Nprop / Cfd)
 delta2 = Jd_Ix1(Nprop) - Jd2(1#, Nprop)
 Jd3 = Jd2(1, Cfd) + delta2 * g10(Ix)
End Function
'***********************************************************
'*             Jd for Nprop above 10                       *
'***********************************************************
Private Function Jd4(Nprop As Double, Cfd As Double) As Double
Dim Ix As Double, delta3 As Double, Cfd10 As Double
 Ix = Sqr(Nprop / Cfd)
 Cfd10 = 10 / Ix ^ 2
 delta3 = Jd_Ix1(Nprop) - Jd_Ix1(10#)
 Jd4 = Jd3(10#, Cfd10) + delta3 * hinf(Ix)
End Function
'***********************************************************
'*               Cinco-Ley's Function fCL(CfD)               *
'***********************************************************
Private Function fCL(Cfd As Double) As Double  'Cinco-Ley Function
Dim num As Double, denom As Double
 num = 1.65 - 0.328 * Log(Cfd) + 0.116 * (Log(Cfd)) ^ 2
 denom = 1 + 0.18 * Log(Cfd) + 0.064 * (Log(Cfd)) ^ 2 + 0.005 * (Log(Cfd)) ^ 3
 fCL = num / denom
End Function
'***********************************************************
'*               Jd calculated at Ix = 1                   *
'***********************************************************
Private Function Jd_Ix1(Nprop As Double) As Double
 If (Nprop < 241) Then
  Jd_Ix1 = 1.13576 - 0.0529836 * Log(Nprop) - 0.912619 * (Atn(0.37403 - 0.494469 * Log(Nprop)))
 Else
  Jd_Ix1 = 1.909859
  End If
End Function
'***********************************************************
'*                        g1 function                      *
'***********************************************************
Private Function g1(Ix As Double) As Double
 g1 = 3.357 * Ix ^ 5 - 10.686 * Ix ^ 4 + 10.041 * Ix ^ 3 - 2.1452 * Ix ^ 2 + 0.449 * Ix - 0.01452
End Function
'***********************************************************
'*                        g10 function                     *
'***********************************************************
Private Function g10(Ix As Double) As Double
 g10 = 2.5016 * Ix ^ 5 - 7.8231 * Ix ^ 4 + 6.7988 * Ix ^ 3 - 1.7905 * Ix ^ 2 + 1.272 * Ix + 0.0346 + 1.44845779338554E-03
End Function
'***********************************************************
'*                      hinf function                      *
'***********************************************************
Private Function hinf(Ix As Double) As Double
 hinf = Ix ^ 2
End Function

Attribute VB_Name = "Skin_calc"
Public Const def_re = 250
Public Const def_rw = 0.1
Public Const def_b_o = 1.2
Public Const def_mu_o = 1.5
Public Const def_darcy_coef = 18.4 '  m3/day , atm , cp ,md
Public Const def_tDa = 0.12

Public Const ln10 = 2.30258509299405
Public Const pi = 3.14159265358979
Public Function PI_from_rate(Qliq, pflow, Pres, Pb)
If (pflow >= Pb) Then
    PI_from_rate = Qliq / (Pres - pflow)
Else
    PI_from_rate = ((1.8 * Qliq) / (Pb * ((1 - 0.2 * pflow / Pb - 0.8 * (pflow / Pb) ^ 2) + ((1.8 * (Pres - Pb) / Pb)))))
End If
End Function


 Sub default_value_skin_package(textdescription)

 Message = textdescription & _
           "Skin calculation package default value" & Chr(10) & _
           "Set for Russian common unit m3/day , atm ,cp , md" & Chr(10) & Chr(10) & _
                "Drainage radius       re  = " & def_re & "m" & Chr(10) & _
                "Wellbore radius       rw  = " & def_rw & "m" & Chr(10) & _
                "Volume factor         Bo  = " & def_b_o & Chr(10) & _
                "Oil Viscosity         mu_o= " & def_mu_o & "cp" & Chr(10) & Chr(10) & _
                "darcy law coefficient     = " & def_darcy_coef & " m3/day , atm ,cp , md" & Chr(10) & _
                "dimemtionless pss time : tDa =" & def_tDa
     MsgBox Message, , "Skin defaul calc"
End Sub

Public Function Qvogel(bhfp, P_Reservoir, P_bubble, ProdIndex)
 If bhfp > P_bubble Then
   Qvogel = ProdIndex * (P_Reservoir - bhfp)
 Else
   q_bubble = ProdIndex * (P_Reservoir - P_bubble)
 
   q_max = q_bubble + (ProdIndex * P_bubble) / 1.8
   Qvogel = q_bubble + (q_max - q_bubble) * (1 - 0.2 * (bhfp / P_bubble) - 0.8 * (bhfp / P_bubble) ^ 2)
 End If
End Function
Public Function PI_kh_skin(kh, Skin, Optional re = def_re, Optional Rw = def_rw, Optional b_o = def_b_o, Optional mu_o = def_mu_o, Optional darcy_coef = def_darcy_coef)
If Trim(kh) = "?" Or Trim(Skin) = "?" Then Call default_value_skin_package("PI_KH_SKIN > get PI from kh and skin " & Chr(10) & Chr(10))

PI_kh_skin = kh / (darcy_coef * mu_o * b_o) / (Log(re / Rw) - 0.75 + Skin)
End Function
'by default using the following unit  PI= q/dP = 1/18.4 * (kh/mu.B) /PD   q= m3/day , k=md h=m , p =atm , mu =cp r=m
Public Function kh_PI_skin(pi, Skin, Optional re = def_re, Optional Rw = def_rw, Optional b_o = def_b_o, Optional mu_o = def_mu_o, Optional darcy_coef = def_darcy_coef)
If Trim(pi) = "?" Or Trim(Skin) = "?" Then Call default_value_skin_package("kh_PI_skin > get kh from PI and skin " & Chr(10) & Chr(10))

kh_PI_skin = pi * darcy_coef * mu_o * b_o * (Log(re / Rw) - 0.75 + Skin)
End Function
Public Function Skin_PI_kh(pi, kh, Optional re = def_re, Optional Rw = def_rw, Optional b_o = def_b_o, Optional mu_o = def_mu_o, Optional darcy_coef = def_darcy_coef)
If Trim(pi) = "?" Or Trim(kh) = "?" Then Call default_value_skin_package("Skin_PI_kh > get Skin from PI and kh " & Chr(10) & Chr(10))

Skin_PI_kh = kh / (darcy_coef * pi * mu_o * b_o) - (Log(re / Rw)) + 0.75
End Function

def_rw
Public Function Skin_FCF_CPB(Xf, fcd, Optional re = def_re, Optional Rw = def_rw, Optional tDa = def_tDa, Optional tdxf = 0)
If Trim(Xf) = "?" Or Trim(fcd) = "?" Then Call default_value_skin_package("Skin_FCF_CPB > skin of Finite conductivity fracture in constant pressure boundary " & Chr(10) & Chr(10))

'calculate td @ psss
td_pss = tDa * pi * re ^ 2 / Xf ^ 2 ' 0.12 from J .Mach fracture in square area

td_pss = max(td_pss, tdxf)

pD_v = pd_FCF(td_pss, fcd) ' * 0.9978  just for better match may be
Skin_FCF_CPB = min(0, pD_v - Log(re / Rw) + 0.75)

End Function
Public Function pd_FCF(tdxf, fcd)
If Trim(tdxf) = "?" Or Trim(fcd) = "?" Then Call default_value_skin_package("pD_FCF_BP_4cell > Interpolated Finite conductivity fracture B.Poe " & Chr(10) & Chr(10))

Dim td(1 To 46) As Double
Dim fcd_v(1 To 44) As Double
Dim pd(1 To 46, 1 To 44) As Double
nbr_of_td = 46
nb_of_fcd = 44
log_td = Log(tdxf) / ln10
log_fcd = Log(fcd) / ln10
If tdxf < 0.000001 Then pd_FCF = "tDxf<1e-6": Exit Function
If tdxf > 1000# Then pd_FCF = "tDxf>1000": Exit Function
If fcd < 0.04 Then pd_FCF = "fcd <0.04": Exit Function
If fcd > 1000 Then pd_FCF = "fcd >1000": Exit Function

fcd_v(1) = 0.04: fcd_v(2) = 0.063: fcd_v(3) = 0.1: fcd_v(4) = 0.125: fcd_v(5) = 0.15: fcd_v(6) = 0.2: fcd_v(7) = 0.25: fcd_v(8) = 0.3: fcd_v(9) = 0.4: fcd_v(10) = 0.5: fcd_v(11) = 0.6: fcd_v(12) = 0.7: fcd_v(13) = 0.75: fcd_v(14) = 0.8: fcd_v(15) = 0.9: fcd_v(16) = 1: fcd_v(17) = 1.1: fcd_v(18) = 1.25: fcd_v(19) = 1.5: fcd_v(20) = 1.75: fcd_v(21) = 2: fcd_v(22) = 2.5: fcd_v(23) = 3: fcd_v(24) = 4: fcd_v(25) = 5: fcd_v(26) = 6: fcd_v(27) = 7: fcd_v(28) = 8: fcd_v(29) = 9: fcd_v(30) = 10: fcd_v(31) = 13: fcd_v(32) = 17: fcd_v(33) = 22: fcd_v(34) = 28: fcd_v(35) = 36: fcd_v(36) = 46: fcd_v(37) = 60: fcd_v(38) = 77: fcd_v(39) = 100: fcd_v(40) = 160: fcd_v(41) = 250: fcd_v(42) = 400: fcd_v(43) = 630: fcd_v(44) = 1000

td(1) = 0.000001
td(2) = 0.0000015849
td(3) = 0.0000025119
td(4) = 0.0000039811
td(5) = 0.0000063096
td(6) = 0.00001
td(7) = 0.000015849
td(8) = 0.000025119
td(9) = 0.000039811
td(10) = 0.000063096
td(11) = 0.0001
td(12) = 0.00015849
td(13) = 0.00025119
td(14) = 0.00039811
td(15) = 0.00063096
td(16) = 0.001
td(17) = 0.0015849
td(18) = 0.0025119
td(19) = 0.0039811
td(20) = 0.0063096
td(21) = 0.01
td(22) = 0.015849
td(23) = 0.025119
td(24) = 0.039811
td(25) = 0.063096
td(26) = 0.1
td(27) = 0.15849
td(28) = 0.25119
td(29) = 0.39811
td(30) = 0.63096
td(31) = 1#
td(32) = 1.5849
td(33) = 2.5119
td(34) = 3.9811
td(35) = 6.3096
td(36) = 10#
td(37) = 15.849
td(38) = 25.119
td(39) = 39.811
td(40) = 63.096
td(41) = 100#
td(42) = 158.49
td(43) = 251.19
td(44) = 398.11
td(45) = 630.96
td(46) = 1000#

pd(1, 1) = 0.42928: pd(1, 2) = 0.35477: pd(1, 3) = 0.26922: pd(1, 4) = 0.23704: pd(1, 5) = 0.21408: pd(1, 6) = 0.18287: pd(1, 7) = 0.16219: pd(1, 8) = 0.14722: pd(1, 9) = 0.12658: pd(1, 10) = 0.11273: pd(1, 11) = 0.1026: pd(1, 12) = 0.094791
pd(2, 1) = 0.47213: pd(2, 2) = 0.38845: pd(2, 3) = 0.29718: pd(2, 4) = 0.26242: pd(2, 5) = 0.23747: pd(2, 6) = 0.20338: pd(2, 7) = 0.18068: pd(2, 8) = 0.16419: pd(2, 9) = 0.14138: pd(2, 10) = 0.12601: pd(2, 11) = 0.11476: pd(2, 12) = 0.10607
pd(3, 1) = 0.5203: pd(3, 2) = 0.42677: pd(3, 3) = 0.32878: pd(3, 4) = 0.29104: pd(3, 5) = 0.26383: pd(3, 6) = 0.22646: pd(3, 7) = 0.20147: pd(3, 8) = 0.18326: pd(3, 9) = 0.15799: pd(3, 10) = 0.14092: pd(3, 11) = 0.12841: pd(3, 12) = 0.11873
pd(4, 1) = 0.57445: pd(4, 2) = 0.46997: pd(4, 3) = 0.36428: pd(4, 4) = 0.32317: pd(4, 5) = 0.29341: pd(4, 6) = 0.25236: pd(4, 7) = 0.22479: pd(4, 8) = 0.20464: pd(4, 9) = 0.17662: pd(4, 10) = 0.15765: pd(4, 11) = 0.14372: pd(4, 12) = 0.13293
pd(5, 1) = 0.63532: pd(5, 2) = 0.51852: pd(5, 3) = 0.40412: pd(5, 4) = 0.35923: pd(5, 5) = 0.32659: pd(5, 6) = 0.28141: pd(5, 7) = 0.25095: pd(5, 8) = 0.22864: pd(5, 9) = 0.19752: pd(5, 10) = 0.17642: pd(5, 11) = 0.1609: pd(5, 12) = 0.14886
pd(6, 1) = 0.70356: pd(6, 2) = 0.57308: pd(6, 3) = 0.44887: pd(6, 4) = 0.39973: pd(6, 5) = 0.36387: pd(6, 6) = 0.31404: pd(6, 7) = 0.28033: pd(6, 8) = 0.25558: pd(6, 9) = 0.221: pd(6, 10) = 0.19749: pd(6, 11) = 0.18018: pd(6, 12) = 0.16675
pd(7, 1) = 0.77967: pd(7, 2) = 0.6344: pd(7, 3) = 0.49914: pd(7, 4) = 0.44522: pd(7, 5) = 0.40573: pd(7, 6) = 0.35068: pd(7, 7) = 0.31332: pd(7, 8) = 0.28583: pd(7, 9) = 0.24735: pd(7, 10) = 0.22115: pd(7, 11) = 0.20183: pd(7, 12) = 0.18682
pd(8, 1) = 0.86408: pd(8, 2) = 0.70308: pd(8, 3) = 0.55548: pd(8, 4) = 0.49621: pd(8, 5) = 0.45267: pd(8, 6) = 0.39177: pd(8, 7) = 0.35032: pd(8, 8) = 0.31976: pd(8, 9) = 0.27691: pd(8, 10) = 0.24768: pd(8, 11) = 0.22611: pd(8, 12) = 0.20935
pd(9, 1) = 0.95713: pd(9, 2) = 0.77959: pd(9, 3) = 0.61836: pd(9, 4) = 0.55318: pd(9, 5) = 0.50513: pd(9, 6) = 0.43773: pd(9, 7) = 0.39172: pd(9, 8) = 0.35774: pd(9, 9) = 0.31001: pd(9, 10) = 0.27741: pd(9, 11) = 0.25332: pd(9, 12) = 0.23459
pd(10, 1) = 1.0592: pd(10, 2) = 0.86436: pd(10, 3) = 0.68826: pd(10, 4) = 0.61659: pd(10, 5) = 0.56359: pd(10, 6) = 0.48901: pd(10, 7) = 0.43797: pd(10, 8) = 0.4002: pd(10, 9) = 0.34705: pd(10, 10) = 0.31068: pd(10, 11) = 0.28379: pd(10, 12) = 0.26286
pd(11, 1) = 1.1705: pd(11, 2) = 0.95775: pd(11, 3) = 0.76566: pd(11, 4) = 0.68694: pd(11, 5) = 0.62855: pd(11, 6) = 0.54611: pd(11, 7) = 0.48952: pd(11, 8) = 0.44756: pd(11, 9) = 0.38841: pd(11, 10) = 0.34788: pd(11, 11) = 0.31786: pd(11, 12) = 0.29449
pd(12, 1) = 1.2914: pd(12, 2) = 1.0601: pd(12, 3) = 0.85103: pd(12, 4) = 0.76474: pd(12, 5) = 0.70051: pd(12, 6) = 0.60952: pd(12, 7) = 0.54687: pd(12, 8) = 0.50032: pd(12, 9) = 0.43456: pd(12, 10) = 0.38941: pd(12, 11) = 0.35594: pd(12, 12) = 0.32986
pd(13, 1) = 1.4219: pd(13, 2) = 1.1718: pd(13, 3) = 0.94483: pd(13, 4) = 0.85049: pd(13, 5) = 0.78: pd(13, 6) = 0.67979: pd(13, 7) = 0.61054: pd(13, 8) = 0.55898: pd(13, 9) = 0.48597: pd(13, 10) = 0.43574: pd(13, 11) = 0.39845: pd(13, 12) = 0.36936
pd(14, 1) = 1.562: pd(14, 2) = 1.2929: pd(14, 3) = 1.0475: pd(14, 4) = 0.94465: pd(14, 5) = 0.86751: pd(14, 6) = 0.75742: pd(14, 7) = 0.68106: pd(14, 8) = 0.62405: pd(14, 9) = 0.54313: pd(14, 10) = 0.48733: pd(14, 11) = 0.44584: pd(14, 12) = 0.41344
pd(15, 1) = 1.7116: pd(15, 2) = 1.4237: pd(15, 3) = 1.1593: pd(15, 4) = 1.0476: pd(15, 5) = 0.96352: pd(15, 6) = 0.84294: pd(15, 7) = 0.75896: pd(15, 8) = 0.69609: pd(15, 9) = 0.60658: pd(15, 10) = 0.54469: pd(15, 11) = 0.4986: pd(15, 12) = 0.46255
pd(16, 1) = 1.8705: pd(16, 2) = 1.5641: pd(16, 3) = 1.2806: pd(16, 4) = 1.1598: pd(16, 5) = 1.0684: pd(16, 6) = 0.93684: pd(16, 7) = 0.84476: pd(16, 8) = 0.77561: pd(16, 9) = 0.67685: pd(16, 10) = 0.60836: pd(16, 11) = 0.55724: pd(16, 12) = 0.5172
pd(17, 1) = 2.0381: pd(17, 2) = 1.714: pd(17, 3) = 1.4115: pd(17, 4) = 1.2814: pd(17, 5) = 1.1826: pd(17, 6) = 1.0395: pd(17, 7) = 0.93894: pd(17, 8) = 0.86312: pd(17, 9) = 0.75447: pd(17, 10) = 0.67885: pd(17, 11) = 0.62229: pd(17, 12) = 0.57791
pd(18, 1) = 2.2139: pd(18, 2) = 1.8731: pd(18, 3) = 1.5519: pd(18, 4) = 1.4126: pd(18, 5) = 1.3062: pd(18, 6) = 1.1514: pd(18, 7) = 1.0419: pd(18, 8) = 0.95911: pd(18, 9) = 0.83996: pd(18, 10) = 0.75672: pd(18, 11) = 0.69428: pd(18, 12) = 0.64519
pd(19, 1) = 2.3974: pd(19, 2) = 2.0409: pd(19, 3) = 1.7018: pd(19, 4) = 1.5534: pd(19, 5) = 1.4394: pd(19, 6) = 1.2726: pd(19, 7) = 1.1541: pd(19, 8) = 1.064: pd(19, 9) = 0.93381: pd(19, 10) = 0.84246: pd(19, 11) = 0.77374: pd(19, 12) = 0.71959
pd(20, 1) = 2.5879: pd(20, 2) = 2.217: pd(20, 3) = 1.8608: pd(20, 4) = 1.7036: pd(20, 5) = 1.5821: pd(20, 6) = 1.4035: pd(20, 7) = 1.2756: pd(20, 8) = 1.1781: pd(20, 9) = 1.0364: pd(20, 10) = 0.93657: pd(20, 11) = 0.86118: pd(20, 12) = 0.80162
pd(21, 1) = 2.7845: pd(21, 2) = 2.4007: pd(21, 3) = 2.0287: pd(21, 4) = 1.8629: pd(21, 5) = 1.7343: pd(21, 6) = 1.5438: pd(21, 7) = 1.4067: pd(21, 8) = 1.3016: pd(21, 9) = 1.1482: pd(21, 10) = 1.0395: pd(21, 11) = 0.95706: pd(21, 12) = 0.89177
pd(22, 1) = 2.9867: pd(22, 2) = 2.5913: pd(22, 3) = 2.2047: pd(22, 4) = 2.031: pd(22, 5) = 1.8955: pd(22, 6) = 1.6937: pd(22, 7) = 1.5474: pd(22, 8) = 1.4347: pd(22, 9) = 1.2693: pd(22, 10) = 1.1515: pd(22, 11) = 1.0618: pd(22, 12) = 0.99049
pd(23, 1) = 3.1936: pd(23, 2) = 2.7881: pd(23, 3) = 2.3884: pd(23, 4) = 2.2073: pd(23, 5) = 2.0653: pd(23, 6) = 1.8526: pd(23, 7) = 1.6975: pd(23, 8) = 1.5773: pd(23, 9) = 1.4: pd(23, 10) = 1.2728: pd(23, 11) = 1.1757: pd(23, 12) = 1.0982
pd(24, 1) = 3.4046: pd(24, 2) = 2.9904: pd(24, 3) = 2.579: pd(24, 4) = 2.3912: pd(24, 5) = 2.2432: pd(24, 6) = 2.0203: pd(24, 7) = 1.8567: pd(24, 8) = 1.7293: pd(24, 9) = 1.5402: pd(24, 10) = 1.4038: pd(24, 11) = 1.2992: pd(24, 12) = 1.2156
pd(25, 1) = 3.619: pd(25, 2) = 3.1974: pd(25, 3) = 2.7757: pd(25, 4) = 2.5819: pd(25, 5) = 2.4285: pd(25, 6) = 2.1962: pd(25, 7) = 2.0246: pd(25, 8) = 1.8903: pd(25, 9) = 1.69: pd(25, 10) = 1.5447: pd(25, 11) = 1.4329: pd(25, 12) = 1.3434
pd(26, 1) = 3.8364: pd(26, 2) = 3.4085: pd(26, 3) = 2.9779: pd(26, 4) = 2.7788: pd(26, 5) = 2.6206: pd(26, 6) = 2.3798: pd(26, 7) = 2.201: pd(26, 8) = 2.0604: pd(26, 9) = 1.8496: pd(26, 10) = 1.6962: pd(26, 11) = 1.5777: pd(26, 12) = 1.4827
pd(27, 1) = 4.0562: pd(27, 2) = 3.6231: pd(27, 3) = 3.185: pd(27, 4) = 2.9814: pd(27, 5) = 2.8191: pd(27, 6) = 2.5709: pd(27, 7) = 2.3857: pd(27, 8) = 2.2396: pd(27, 9) = 2.0196: pd(27, 10) = 1.8589: pd(27, 11) = 1.7346: pd(27, 12) = 1.6348
pd(28, 1) = 4.2782: pd(28, 2) = 3.8408: pd(28, 3) = 3.3966: pd(28, 4) = 3.1893: pd(28, 5) = 3.0235: pd(28, 6) = 2.7692: pd(28, 7) = 2.5786: pd(28, 8) = 2.4279: pd(28, 9) = 2.2003: pd(28, 10) = 2.0334: pd(28, 11) = 1.9042: pd(28, 12) = 1.8003
pd(29, 1) = 4.5021: pd(29, 2) = 4.0614: pd(29, 3) = 3.6124: pd(29, 4) = 3.4021: pd(29, 5) = 3.2336: pd(29, 6) = 2.9744: pd(29, 7) = 2.7797: pd(29, 8) = 2.6252: pd(29, 9) = 2.3914: pd(29, 10) = 2.2197: pd(29, 11) = 2.0864: pd(29, 12) = 1.9793
pd(30, 1) = 4.7276: pd(30, 2) = 4.2844: pd(30, 3) = 3.8318: pd(30, 4) = 3.6194: pd(30, 5) = 3.4489: pd(30, 6) = 3.186: pd(30, 7) = 2.988: pd(30, 8) = 2.8307: pd(30, 9) = 2.5922: pd(30, 10) = 2.4167: pd(30, 11) = 2.2804: pd(30, 12) = 2.1706
pd(31, 1) = 4.9544: pd(31, 2) = 4.5095: pd(31, 3) = 4.0544: pd(31, 4) = 3.8404: pd(31, 5) = 3.6684: pd(31, 6) = 3.4029: pd(31, 7) = 3.2026: pd(31, 8) = 3.0433: pd(31, 9) = 2.8013: pd(31, 10) = 2.6229: pd(31, 11) = 2.4843: pd(31, 12) = 2.3726
pd(32, 1) = 5.1825: pd(32, 2) = 4.7363: pd(32, 3) = 4.2795: pd(32, 4) = 4.0644: pd(32, 5) = 3.8914: pd(32, 6) = 3.624: pd(32, 7) = 3.4221: pd(32, 8) = 3.2613: pd(32, 9) = 3.0169: pd(32, 10) = 2.8365: pd(32, 11) = 2.6962: pd(32, 12) = 2.5831
pd(33, 1) = 5.4114: pd(33, 2) = 4.9644: pd(33, 3) = 4.5063: pd(33, 4) = 4.2904: pd(33, 5) = 4.1168: pd(33, 6) = 3.8482: pd(33, 7) = 3.6452: pd(33, 8) = 3.4835: pd(33, 9) = 3.2373: pd(33, 10) = 3.0556: pd(33, 11) = 2.9142: pd(33, 12) = 2.8001
pd(34, 1) = 5.6407: pd(34, 2) = 5.1929: pd(34, 3) = 4.7344: pd(34, 4) = 4.5181: pd(34, 5) = 4.344: pd(34, 6) = 4.0745: pd(34, 7) = 3.8708: pd(34, 8) = 3.7084: pd(34, 9) = 3.4612: pd(34, 10) = 3.2786: pd(34, 11) = 3.1364: pd(34, 12) = 3.0216
pd(35, 1) = 5.8696: pd(35, 2) = 5.4224: pd(35, 3) = 4.9633: pd(35, 4) = 4.7466: pd(35, 5) = 4.5722: pd(35, 6) = 4.3023: pd(35, 7) = 4.0981: pd(35, 8) = 3.9353: pd(35, 9) = 3.6874: pd(35, 10) = 3.5042: pd(35, 11) = 3.3614: pd(35, 12) = 3.2463
pd(36, 1) = 6.1008: pd(36, 2) = 5.6522: pd(36, 3) = 5.1926: pd(36, 4) = 4.9759: pd(36, 5) = 4.8014: pd(36, 6) = 4.531: pd(36, 7) = 4.3265: pd(36, 8) = 4.1635: pd(36, 9) = 3.9151: pd(36, 10) = 3.7315: pd(36, 11) = 3.5884: pd(36, 12) = 3.4729
pd(37, 1) = 6.3317: pd(37, 2) = 5.8816: pd(37, 3) = 5.4232: pd(37, 4) = 5.2055: pd(37, 5) = 5.0309: pd(37, 6) = 4.7602: pd(37, 7) = 4.5555: pd(37, 8) = 4.3924: pd(37, 9) = 4.1438: pd(37, 10) = 3.96: pd(37, 11) = 3.8166: pd(37, 12) = 3.701
pd(38, 1) = 6.5605: pd(38, 2) = 6.1114: pd(38, 3) = 5.6525: pd(38, 4) = 5.4348: pd(38, 5) = 5.2604: pd(38, 6) = 4.9897: pd(38, 7) = 4.7851: pd(38, 8) = 4.6222: pd(38, 9) = 4.373: pd(38, 10) = 4.1891: pd(38, 11) = 4.0454: pd(38, 12) = 3.9298
pd(39, 1) = 6.7919: pd(39, 2) = 6.3436: pd(39, 3) = 5.8816: pd(39, 4) = 5.6665: pd(39, 5) = 5.4907: pd(39, 6) = 5.2196: pd(39, 7) = 5.0144: pd(39, 8) = 4.851: pd(39, 9) = 4.6027: pd(39, 10) = 4.4186: pd(39, 11) = 4.2751: pd(39, 12) = 4.1592
pd(40, 1) = 7.0212: pd(40, 2) = 6.577: pd(40, 3) = 6.1136: pd(40, 4) = 5.895: pd(40, 5) = 5.7202: pd(40, 6) = 5.4502: pd(40, 7) = 5.2442: pd(40, 8) = 5.0819: pd(40, 9) = 4.832: pd(40, 10) = 4.6486: pd(40, 11) = 4.5047: pd(40, 12) = 4.3887
pd(41, 1) = 7.25: pd(41, 2) = 6.801: pd(41, 3) = 6.3396: pd(41, 4) = 6.1221: pd(41, 5) = 5.9506: pd(41, 6) = 5.6801: pd(41, 7) = 5.4745: pd(41, 8) = 5.3115: pd(41, 9) = 5.063: pd(41, 10) = 4.8776: pd(41, 11) = 4.7348: pd(41, 12) = 4.6191
pd(42, 1) = 7.4979: pd(42, 2) = 7.0346: pd(42, 3) = 6.5792: pd(42, 4) = 6.3564: pd(42, 5) = 6.1774: pd(42, 6) = 5.9108: pd(42, 7) = 5.7043: pd(42, 8) = 5.5407: pd(42, 9) = 5.2931: pd(42, 10) = 5.1084: pd(42, 11) = 4.9655: pd(42, 12) = 4.8491
pd(43, 1) = 7.7143: pd(43, 2) = 7.2572: pd(43, 3) = 6.7947: pd(43, 4) = 6.5928: pd(43, 5) = 6.4081: pd(43, 6) = 6.1435: pd(43, 7) = 5.9378: pd(43, 8) = 5.7691: pd(43, 9) = 5.5254: pd(43, 10) = 5.339: pd(43, 11) = 5.1948: pd(43, 12) = 5.0788
pd(44, 1) = 8.0182: pd(44, 2) = 7.4804: pd(44, 3) = 7.0312: pd(44, 4) = 6.8218: pd(44, 5) = 6.6408: pd(44, 6) = 6.3703: pd(44, 7) = 6.1632: pd(44, 8) = 6.0046: pd(44, 9) = 5.754: pd(44, 10) = 5.5683: pd(44, 11) = 5.4248: pd(44, 12) = 5.3092
pd(45, 1) = 8.1936: pd(45, 2) = 7.7276: pd(45, 3) = 7.2321: pd(45, 4) = 7.0515: pd(45, 5) = 6.866: pd(45, 6) = 6.6055: pd(45, 7) = 6.3983: pd(45, 8) = 6.23: pd(45, 9) = 5.9885: pd(45, 10) = 5.7994: pd(45, 11) = 5.6567: pd(45, 12) = 5.5405
pd(46, 1) = 8.4384: pd(46, 2) = 7.9455: pd(46, 3) = 7.4919: pd(46, 4) = 7.2347: pd(46, 5) = 7.0957: pd(46, 6) = 6.8284: pd(46, 7) = 6.6222: pd(46, 8) = 6.4581: pd(46, 9) = 6.212: pd(46, 10) = 6.0288: pd(46, 11) = 5.8817: pd(46, 12) = 5.7718
: pd(1, 13) = 0.091499: pd(1, 14) = 0.088528: pd(1, 15) = 0.083362: pd(1, 16) = 0.079005: pd(1, 17) = 0.075267: pd(1, 18) = 0.070538: pd(1, 19) = 0.064315: pd(1, 20) = 0.059492: pd(1, 21) = 0.055614: pd(1, 22) = 0.049698: pd(1, 23) = 0.04534: pd(1, 24) = 0.039236: pd(1, 25) = 0.035077: pd(1, 26) = 0.032011: pd(1, 27) = 0.02963: pd(1, 28) = 0.027712: pd(1, 29) = 0.026124: pd(1, 30) = 0.02478: pd(1, 31) = 0.021729: pd(1, 32) = 0.018998: pd(1, 33) = 0.016698: pd(1, 34) = 0.0148: pd(1, 35) = 0.013051: pd(1, 36) = 0.011545: pd(1, 37) = 0.010107: pd(1, 38) = 0.0089209: pd(1, 39) = 0.0078265: pd(1, 40) = 0.0061868: pd(1, 41) = 0.0049624: pd(1, 42) = 0.0039735: pd(1, 43) = 0.0032705: pd(1, 44) = 0.0027641
: pd(2, 13) = 0.10241: pd(2, 14) = 0.099095: pd(2, 15) = 0.093336: pd(2, 16) = 0.088476: pd(2, 17) = 0.084304: pd(2, 18) = 0.079023: pd(2, 19) = 0.072069: pd(2, 20) = 0.066678: pd(2, 21) = 0.062339: pd(2, 22) = 0.055718: pd(2, 23) = 0.050839: pd(2, 24) = 0.044001: pd(2, 25) = 0.039342: pd(2, 26) = 0.035905: pd(2, 27) = 0.033236: pd(2, 28) = 0.031086: pd(2, 29) = 0.029305: pd(2, 30) = 0.027799: pd(2, 31) = 0.024377: pd(2, 32) = 0.021314: pd(2, 33) = 0.018734: pd(2, 34) = 0.016605: pd(2, 35) = 0.014643: pd(2, 36) = 0.012953: pd(2, 37) = 0.01134: pd(2, 38) = 0.010008: pd(2, 39) = 0.0087808: pd(2, 40) = 0.0069476: pd(2, 41) = 0.0055935: pd(2, 42) = 0.00452: pd(2, 43) = 0.0037733: pd(2, 44) = 0.0032459
: pd(3, 13) = 0.11464: pd(3, 14) = 0.11095: pd(3, 15) = 0.10453: pd(3, 16) = 0.099104: pd(3, 17) = 0.094445: pd(3, 18) = 0.088544: pd(3, 19) = 0.08077: pd(3, 20) = 0.07474: pd(3, 21) = 0.069885: pd(3, 22) = 0.062473: pd(3, 23) = 0.057009: pd(3, 24) = 0.049349: pd(3, 25) = 0.044127: pd(3, 26) = 0.040275: pd(3, 27) = 0.037282: pd(3, 28) = 0.034871: pd(3, 29) = 0.032874: pd(3, 30) = 0.031185: pd(3, 31) = 0.027348: pd(3, 32) = 0.023912: pd(3, 33) = 0.021018: pd(3, 34) = 0.01863: pd(3, 35) = 0.016428: pd(3, 36) = 0.014532: pd(3, 37) = 0.012722: pd(3, 38) = 0.011228: pd(3, 39) = 0.0098536: pd(3, 40) = 0.007813: pd(3, 41) = 0.0063281: pd(3, 42) = 0.0051754: pd(3, 43) = 0.0043906: pd(3, 44) = 0.0038456
: pd(4, 13) = 0.12837: pd(4, 14) = 0.12426: pd(4, 15) = 0.11708: pd(4, 16) = 0.11103: pd(4, 17) = 0.10582: pd(4, 18) = 0.099225: pd(4, 19) = 0.090531: pd(4, 20) = 0.083784: pd(4, 21) = 0.078351: pd(4, 22) = 0.070051: pd(4, 23) = 0.063931: pd(4, 24) = 0.055348: pd(4, 25) = 0.049495: pd(4, 26) = 0.045177: pd(4, 27) = 0.041822: pd(4, 28) = 0.039118: pd(4, 29) = 0.036879: pd(4, 30) = 0.034985: pd(4, 31) = 0.030681: pd(4, 32) = 0.026828: pd(4, 33) = 0.023581: pd(4, 34) = 0.020901: pd(4, 35) = 0.018431: pd(4, 36) = 0.016303: pd(4, 37) = 0.014273: pd(4, 38) = 0.012599: pd(4, 39) = 0.011065: pd(4, 40) = 0.0088078: pd(4, 41) = 0.0071961: pd(4, 42) = 0.0059716: pd(4, 43) = 0.0051542: pd(4, 44) = 0.0045948
: pd(5, 13) = 0.14378: pd(5, 14) = 0.13918: pd(5, 15) = 0.13117: pd(5, 16) = 0.1244: pd(5, 17) = 0.11858: pd(5, 18) = 0.11121: pd(5, 19) = 0.10148: pd(5, 20) = 0.093932: pd(5, 21) = 0.087849: pd(5, 22) = 0.078554: pd(5, 23) = 0.071698: pd(5, 24) = 0.062079: pd(5, 25) = 0.055518: pd(5, 26) = 0.050677: pd(5, 27) = 0.046915: pd(5, 28) = 0.043883: pd(5, 29) = 0.041372: pd(5, 30) = 0.039248: pd(5, 31) = 0.034421: pd(5, 32) = 0.030098: pd(5, 33) = 0.026456: pd(5, 34) = 0.023449: pd(5, 35) = 0.020677: pd(5, 36) = 0.01829: pd(5, 37) = 0.016015: pd(5, 38) = 0.014146: pd(5, 39) = 0.012441: pd(5, 40) = 0.0099669: pd(5, 41) = 0.0082364: pd(5, 42) = 0.0069491: pd(5, 43) = 0.0061044: pd(5, 44) = 0.0055331
: pd(6, 13) = 0.16107: pd(6, 14) = 0.15593: pd(6, 15) = 0.14698: pd(6, 16) = 0.13942: pd(6, 17) = 0.13291: pd(6, 18) = 0.12466: pd(6, 19) = 0.11378: pd(6, 20) = 0.10532: pd(6, 21) = 0.098509: pd(6, 22) = 0.088097: pd(6, 23) = 0.080414: pd(6, 24) = 0.069633: pd(6, 25) = 0.062278: pd(6, 26) = 0.056849: pd(6, 27) = 0.05263: pd(6, 28) = 0.04923: pd(6, 29) = 0.046414: pd(6, 30) = 0.044031: pd(6, 31) = 0.038617: pd(6, 32) = 0.033768: pd(6, 33) = 0.029681: pd(6, 34) = 0.026307: pd(6, 35) = 0.023197: pd(6, 36) = 0.020521: pd(6, 37) = 0.017979: pd(6, 38) = 0.015902: pd(6, 39) = 0.014023: pd(6, 40) = 0.011338: pd(6, 41) = 0.0094996: pd(6, 42) = 0.0081584: pd(6, 43) = 0.0072911: pd(6, 44) = 0.0067102
: pd(7, 13) = 0.18048: pd(7, 14) = 0.17474: pd(7, 15) = 0.16473: pd(7, 16) = 0.15627: pd(7, 17) = 0.14899: pd(7, 18) = 0.13976: pd(7, 19) = 0.12757: pd(7, 20) = 0.1181: pd(7, 21) = 0.11047: pd(7, 22) = 0.098805: pd(7, 23) = 0.090195: pd(7, 24) = 0.078109: pd(7, 25) = 0.069862: pd(7, 26) = 0.063774: pd(7, 27) = 0.059043: pd(7, 28) = 0.05523: pd(7, 29) = 0.052071: pd(7, 30) = 0.049399: pd(7, 31) = 0.043324: pd(7, 32) = 0.037884: pd(7, 33) = 0.033298: pd(7, 34) = 0.029512: pd(7, 35) = 0.026027: pd(7, 36) = 0.023036: pd(7, 37) = 0.020208: pd(7, 38) = 0.017917: pd(7, 39) = 0.015866: pd(7, 40) = 0.012982: pd(7, 41) = 0.011049: pd(7, 42) = 0.0096629: pd(7, 43) = 0.0087771: pd(7, 44) = 0.0081884
: pd(8, 13) = 0.20225: pd(8, 14) = 0.19583: pd(8, 15) = 0.18464: pd(8, 16) = 0.17517: pd(8, 17) = 0.16703: pd(8, 18) = 0.15669: pd(8, 19) = 0.14305: pd(8, 20) = 0.13244: pd(8, 21) = 0.12389: pd(8, 22) = 0.11082: pd(8, 23) = 0.10117: pd(8, 24) = 0.087619: pd(8, 25) = 0.078372: pd(8, 26) = 0.071545: pd(8, 27) = 0.066239: pd(8, 28) = 0.061961: pd(8, 29) = 0.058418: pd(8, 30) = 0.05542: pd(8, 31) = 0.048605: pd(8, 32) = 0.042501: pd(8, 33) = 0.037356: pd(8, 34) = 0.033112: pd(8, 35) = 0.029214: pd(8, 36) = 0.025886: pd(8, 37) = 0.022763: pd(8, 38) = 0.020258: pd(8, 39) = 0.018042: pd(8, 40) = 0.014979: pd(8, 41) = 0.012966: pd(8, 42) = 0.011542: pd(8, 43) = 0.010641: pd(8, 44) = 0.010046
: pd(9, 13) = 0.22666: pd(9, 14) = 0.21948: pd(9, 15) = 0.20696: pd(9, 16) = 0.19637: pd(9, 17) = 0.18725: pd(9, 18) = 0.17568: pd(9, 19) = 0.1604: pd(9, 20) = 0.14852: pd(9, 21) = 0.13895: pd(9, 22) = 0.1243: pd(9, 23) = 0.11348: pd(9, 24) = 0.098287: pd(9, 25) = 0.087918: pd(9, 26) = 0.080262: pd(9, 27) = 0.07431: pd(9, 28) = 0.069512: pd(9, 29) = 0.065538: pd(9, 30) = 0.062174: pd(9, 31) = 0.054528: pd(9, 32) = 0.047678: pd(9, 33) = 0.041911: pd(9, 34) = 0.037164: pd(9, 35) = 0.032826: pd(9, 36) = 0.029146: pd(9, 37) = 0.025729: pd(9, 38) = 0.023019: pd(9, 39) = 0.020651: pd(9, 40) = 0.017429: pd(9, 41) = 0.015348: pd(9, 42) = 0.013893: pd(9, 43) = 0.01298: pd(9, 44) = 0.01238
: pd(10, 13) = 0.25399: pd(10, 14) = 0.24597: pd(10, 15) = 0.23197: pd(10, 16) = 0.22012: pd(10, 17) = 0.20992: pd(10, 18) = 0.19697: pd(10, 19) = 0.17986: pd(10, 20) = 0.16655: pd(10, 21) = 0.15582: pd(10, 22) = 0.13941: pd(10, 23) = 0.12728: pd(10, 24) = 0.11025: pd(10, 25) = 0.098625: pd(10, 26) = 0.090039: pd(10, 27) = 0.083364: pd(10, 28) = 0.077982: pd(10, 29) = 0.073522: pd(10, 30) = 0.069749: pd(10, 31) = 0.06117: pd(10, 32) = 0.05349: pd(10, 33) = 0.047039: pd(10, 34) = 0.041752: pd(10, 35) = 0.036954: pd(10, 36) = 0.032922: pd(10, 37) = 0.02922: pd(10, 38) = 0.026321: pd(10, 39) = 0.023817: pd(10, 40) = 0.02046: pd(10, 41) = 0.018322: pd(10, 42) = 0.016842: pd(10, 43) = 0.015918: pd(10, 44) = 0.015314
: pd(11, 13) = 0.28459: pd(11, 14) = 0.27562: pd(11, 15) = 0.25997: pd(11, 16) = 0.24671: pd(11, 17) = 0.2353: pd(11, 18) = 0.22081: pd(11, 19) = 0.20166: pd(11, 20) = 0.18676: pd(11, 21) = 0.17474: pd(11, 22) = 0.15635: pd(11, 23) = 0.14276: pd(11, 24) = 0.12367: pd(11, 25) = 0.11063: pd(11, 26) = 0.101: pd(11, 27) = 0.093516: pd(11, 28) = 0.087478: pd(11, 29) = 0.082475: pd(11, 30) = 0.078242: pd(11, 31) = 0.068623: pd(11, 32) = 0.06003: pd(11, 33) = 0.052842: pd(11, 34) = 0.046992: pd(11, 35) = 0.041729: pd(11, 36) = 0.037357: pd(11, 37) = 0.03339: pd(11, 38) = 0.030321: pd(11, 39) = 0.027699: pd(11, 40) = 0.024227: pd(11, 41) = 0.022042: pd(11, 42) = 0.020541: pd(11, 43) = 0.019609: pd(11, 44) = 0.019
: pd(12, 13) = 0.3188: pd(12, 14) = 0.30878: pd(12, 15) = 0.29129: pd(12, 16) = 0.27647: pd(12, 17) = 0.26371: pd(12, 18) = 0.2475: pd(12, 19) = 0.22607: pd(12, 20) = 0.2094: pd(12, 21) = 0.19594: pd(12, 22) = 0.17533: pd(12, 23) = 0.16011: pd(12, 24) = 0.13871: pd(12, 25) = 0.12409: pd(12, 26) = 0.1133: pd(12, 27) = 0.1049: pd(12, 28) = 0.098125: pd(12, 29) = 0.092515: pd(12, 30) = 0.08777: pd(12, 31) = 0.077004: pd(12, 32) = 0.067424: pd(12, 33) = 0.059464: pd(12, 34) = 0.053045: pd(12, 35) = 0.047332: pd(12, 36) = 0.04264: pd(12, 37) = 0.038435: pd(12, 38) = 0.035217: pd(12, 39) = 0.032494: pd(12, 40) = 0.028925: pd(12, 41) = 0.026701: pd(12, 42) = 0.025182: pd(12, 43) = 0.024243: pd(12, 44) = 0.023632
: pd(13, 13) = 0.35702: pd(13, 14) = 0.34584: pd(13, 15) = 0.32631: pd(13, 16) = 0.30976: pd(13, 17) = 0.2955: pd(13, 18) = 0.27737: pd(13, 19) = 0.25341: pd(13, 20) = 0.23474: pd(13, 21) = 0.21968: pd(13, 22) = 0.19661: pd(13, 23) = 0.17955: pd(13, 24) = 0.15557: pd(13, 25) = 0.13918: pd(13, 26) = 0.12707: pd(13, 27) = 0.11766: pd(13, 28) = 0.11007: pd(13, 29) = 0.10379: pd(13, 30) = 0.098478: pd(13, 31) = 0.086468: pd(13, 32) = 0.07585: pd(13, 33) = 0.067109: pd(13, 34) = 0.060134: pd(13, 35) = 0.053999: pd(13, 36) = 0.049018: pd(13, 37) = 0.044602: pd(13, 38) = 0.041256: pd(13, 39) = 0.038448: pd(13, 40) = 0.034798: pd(13, 41) = 0.032541: pd(13, 42) = 0.031007: pd(13, 43) = 0.030062: pd(13, 44) = 0.029447
: pd(14, 13) = 0.39968: pd(14, 14) = 0.38721: pd(14, 15) = 0.36543: pd(14, 16) = 0.34695: pd(14, 17) = 0.33102: pd(14, 18) = 0.31078: pd(14, 19) = 0.28399: pd(14, 20) = 0.26311: pd(14, 21) = 0.24625: pd(14, 22) = 0.22043: pd(14, 23) = 0.20133: pd(14, 24) = 0.17446: pd(14, 25) = 0.15609: pd(14, 26) = 0.14252: pd(14, 27) = 0.13198: pd(14, 28) = 0.12349: pd(14, 29) = 0.11647: pd(14, 30) = 0.11056: pd(14, 31) = 0.097236: pd(14, 32) = 0.08556: pd(14, 33) = 0.076053: pd(14, 34) = 0.068555: pd(14, 35) = 0.062034: pd(14, 36) = 0.056798: pd(14, 37) = 0.0522: pd(14, 38) = 0.048746: pd(14, 39) = 0.045865: pd(14, 40) = 0.042147: pd(14, 41) = 0.039862: pd(14, 42) = 0.038314: pd(14, 43) = 0.037363: pd(14, 44) = 0.036745
: pd(15, 13) = 0.44724: pd(15, 14) = 0.43335: pd(15, 15) = 0.40907: pd(15, 16) = 0.38847: pd(15, 17) = 0.3707: pd(15, 18) = 0.3481: pd(15, 19) = 0.31817: pd(15, 20) = 0.29484: pd(15, 21) = 0.27599: pd(15, 22) = 0.24709: pd(15, 23) = 0.22571: pd(15, 24) = 0.19561: pd(15, 25) = 0.17504: pd(15, 26) = 0.159859999999986: pd(15, 27) = 0.14808: pd(15, 28) = 0.13863: pd(15, 29) = 0.13083: pd(15, 30) = 0.12428: pd(15, 31) = 0.10961: pd(15, 32) = 0.096895: pd(15, 33) = 0.086664: pd(15, 34) = 0.078687: pd(15, 35) = 0.071824: pd(15, 36) = 0.066365: pd(15, 37) = 0.061611: pd(15, 38) = 0.058064: pd(15, 39) = 0.055121: pd(15, 40) = 0.051345: pd(15, 41) = 0.049034: pd(15, 42) = 0.047475: pd(15, 43) = 0.046517: pd(15, 44) = 0.045897
: pd(16, 13) = 0.50018: pd(16, 14) = 0.48474: pd(16, 15) = 0.45771: pd(16, 16) = 0.43477: pd(16, 17) = 0.41497: pd(16, 18) = 0.38976: pd(16, 19) = 0.35636: pd(16, 20) = 0.3303: pd(16, 21) = 0.30923: pd(16, 22) = 0.27692: pd(16, 23) = 0.25299: pd(16, 24) = 0.21931: pd(16, 25) = 0.19632: pd(16, 26) = 0.17939: pd(16, 27) = 0.1663: pd(16, 28) = 0.15582: pd(16, 29) = 0.14722: pd(16, 30) = 0.14002: pd(16, 31) = 0.12402: pd(16, 32) = 0.11031: pd(16, 33) = 0.099412: pd(16, 34) = 0.091007: pd(16, 35) = 0.083844: pd(16, 36) = 0.078193: pd(16, 37) = 0.073306: pd(16, 38) = 0.069678: pd(16, 39) = 0.066682: pd(16, 40) = 0.062853: pd(16, 41) = 0.06052: pd(16, 42) = 0.058948: pd(16, 43) = 0.057985: pd(16, 44) = 0.057361
: pd(17, 13) = 0.55901: pd(17, 14) = 0.54187: pd(17, 15) = 0.51184: pd(17, 16) = 0.48632: pd(17, 17) = 0.46428: pd(17, 18) = 0.43621: pd(17, 19) = 0.39898: pd(17, 20) = 0.3699: pd(17, 21) = 0.34637: pd(17, 22) = 0.31026: pd(17, 23) = 0.28351: pd(17, 24) = 0.2459: pd(17, 25) = 0.22029: pd(17, 26) = 0.2015: pd(17, 27) = 0.18705: pd(17, 28) = 0.17554: pd(17, 29) = 0.16613: pd(17, 30) = 0.1583: pd(17, 31) = 0.14102: pd(17, 32) = 0.12639: pd(17, 33) = 0.11489: pd(17, 34) = 0.10611: pd(17, 35) = 0.098682: pd(17, 36) = 0.092864: pd(17, 37) = 0.08786: pd(17, 38) = 0.084162: pd(17, 39) = 0.081118: pd(17, 40) = 0.077241: pd(17, 41) = 0.074885: pd(17, 42) = 0.073302: pd(17, 43) = 0.072332: pd(17, 44) = 0.071705
: pd(18, 13) = 0.62427: pd(18, 14) = 0.60527: pd(18, 15) = 0.57197: pd(18, 16) = 0.54364: pd(18, 17) = 0.51915: pd(18, 18) = 0.48793: pd(18, 19) = 0.44646: pd(18, 20) = 0.41405: pd(18, 21) = 0.38781: pd(18, 22) = 0.34752: pd(18, 23) = 0.31768: pd(18, 24) = 0.27583: pd(18, 25) = 0.24746: pd(18, 26) = 0.22677: pd(18, 27) = 0.21094: pd(18, 28) = 0.19841: pd(18, 29) = 0.18823: pd(18, 30) = 0.17978: pd(18, 31) = 0.16131: pd(18, 32) = 0.14585: pd(18, 33) = 0.13382: pd(18, 34) = 0.12471: pd(18, 35) = 0.11705: pd(18, 36) = 0.11109: pd(18, 37) = 0.10598: pd(18, 38) = 0.10222: pd(18, 39) = 0.099129: pd(18, 40) = 0.095205: pd(18, 41) = 0.092826: pd(18, 42) = 0.09123: pd(18, 43) = 0.090253: pd(18, 44) = 0.089622
: pd(19, 13) = 0.69648: pd(19, 14) = 0.67547: pd(19, 15) = 0.63862: pd(19, 16) = 0.60722: pd(19, 17) = 0.58006: pd(19, 18) = 0.5454: pd(19, 19) = 0.49931: pd(19, 20) = 0.46324: pd(19, 21) = 0.43403: pd(19, 22) = 0.3892: pd(19, 23) = 0.35605: pd(19, 24) = 0.30972: pd(19, 25) = 0.27853: pd(19, 26) = 0.25595: pd(19, 27) = 0.23879: pd(19, 28) = 0.22528: pd(19, 29) = 0.21437: pd(19, 30) = 0.20536: pd(19, 31) = 0.1858: pd(19, 32) = 0.16959: pd(19, 33) = 0.15709: pd(19, 34) = 0.14768: pd(19, 35) = 0.13982: pd(19, 36) = 0.13372: pd(19, 37) = 0.12852: pd(19, 38) = 0.1247: pd(19, 39) = 0.12156: pd(19, 40) = 0.11759: pd(19, 41) = 0.11519: pd(19, 42) = 0.11358: pd(19, 43) = 0.11259: pd(19, 44) = 0.11196
: pd(20, 13) = 0.77616: pd(20, 14) = 0.753: pd(20, 15) = 0.71231: pd(20, 16) = 0.67761: pd(20, 17) = 0.64755: pd(20, 18) = 0.60915: pd(20, 19) = 0.55804: pd(20, 20) = 0.51803: pd(20, 21) = 0.48562: pd(20, 22) = 0.43595: pd(20, 23) = 0.39933: pd(20, 24) = 0.34844: pd(20, 25) = 0.31446: pd(20, 26) = 0.29005: pd(20, 27) = 0.27163: pd(20, 28) = 0.25722: pd(20, 29) = 0.24563: pd(20, 30) = 0.2361: pd(20, 31) = 0.21556: pd(20, 32) = 0.19868: pd(20, 33) = 0.18576: pd(20, 34) = 0.17608: pd(20, 35) = 0.16803: pd(20, 36) = 0.16181: pd(20, 37) = 0.15651: pd(20, 38) = 0.15262: pd(20, 39) = 0.14945: pd(20, 40) = 0.14543: pd(20, 41) = 0.143: pd(20, 42) = 0.14137: pd(20, 43) = 0.14037: pd(20, 44) = 0.13973
: pd(21, 13) = 0.86381: pd(21, 14) = 0.83835: pd(21, 15) = 0.79357: pd(21, 16) = 0.75533: pd(21, 17) = 0.72217: pd(21, 18) = 0.67978: pd(21, 19) = 0.62331: pd(21, 20) = 0.5791: pd(21, 21) = 0.54335: pd(21, 22) = 0.48866: pd(21, 23) = 0.44852: pd(21, 24) = 0.39312: pd(21, 25) = 0.35647: pd(21, 26) = 0.33034: pd(21, 27) = 0.31075: pd(21, 28) = 0.29551: pd(21, 29) = 0.2833: pd(21, 30) = 0.27331: pd(21, 31) = 0.25188: pd(21, 32) = 0.23439: pd(21, 33) = 0.22108: pd(21, 34) = 0.21115: pd(21, 35) = 0.20292: pd(21, 36) = 0.19657: pd(21, 37) = 0.19117: pd(21, 38) = 0.18722: pd(21, 39) = 0.184: pd(21, 40) = 0.17992: pd(21, 41) = 0.17746: pd(21, 42) = 0.17581: pd(21, 43) = 0.1748: pd(21, 44) = 0.17415
: pd(22, 13) = 0.9599: pd(22, 14) = 0.93203: pd(22, 15) = 0.88295: pd(22, 16) = 0.84098: pd(22, 17) = 0.80456: pd(22, 18) = 0.75797: pd(22, 19) = 0.69593: pd(22, 20) = 0.64741: pd(22, 21) = 0.60823: pd(22, 22) = 0.54853: pd(22, 23) = 0.50494: pd(22, 24) = 0.44522: pd(22, 25) = 0.40607: pd(22, 26) = 0.37835: pd(22, 27) = 0.35769: pd(22, 28) = 0.34169: pd(22, 29) = 0.32893: pd(22, 30) = 0.31851: pd(22, 31) = 0.29626: pd(22, 32) = 0.2782: pd(22, 33) = 0.26451: pd(22, 34) = 0.25433: pd(22, 35) = 0.24592: pd(22, 36) = 0.23944: pd(22, 37) = 0.23394: pd(22, 38) = 0.22992: pd(22, 39) = 0.22664: pd(22, 40) = 0.2225: pd(22, 41) = 0.22: pd(22, 42) = 0.21833: pd(22, 43) = 0.21731: pd(22, 44) = 0.21665
: pd(23, 13) = 1.065: pd(23, 14) = 1.0346: pd(23, 15) = 0.98108: pd(23, 16) = 0.93529: pd(23, 17) = 0.89553: pd(23, 18) = 0.84469: pd(23, 19) = 0.77703: pd(23, 20) = 0.72422: pd(23, 21) = 0.68169: pd(23, 22) = 0.61713: pd(23, 23) = 0.57027: pd(23, 24) = 0.50651: pd(23, 25) = 0.46505: pd(23, 26) = 0.43588: pd(23, 27) = 0.41423: pd(23, 28) = 0.39753: pd(23, 29) = 0.38425: pd(23, 30) = 0.37343: pd(23, 31) = 0.3504: pd(23, 32) = 0.33179: pd(23, 33) = 0.31772: pd(23, 34) = 0.30729: pd(23, 35) = 0.29868: pd(23, 36) = 0.29206: pd(23, 37) = 0.28645: pd(23, 38) = 0.28236: pd(23, 39) = 0.27901: pd(23, 40) = 0.27479: pd(23, 41) = 0.27225: pd(23, 42) = 0.27055: pd(23, 43) = 0.26951: pd(23, 44) = 0.26884
: pd(24, 13) = 1.1796: pd(24, 14) = 1.1468: pd(24, 15) = 1.0889: pd(24, 16) = 1.0393: pd(24, 17) = 0.99624: pd(24, 18) = 0.94122: pd(24, 19) = 0.86811: pd(24, 20) = 0.8112: pd(24, 21) = 0.76548: pd(24, 22) = 0.69638: pd(24, 23) = 0.64647: pd(24, 24) = 0.579: pd(24, 25) = 0.53541: pd(24, 26) = 0.50489: pd(24, 27) = 0.48233: pd(24, 28) = 0.46496: pd(24, 29) = 0.45118: pd(24, 30) = 0.43998: pd(24, 31) = 0.41619: pd(24, 32) = 0.39702: pd(24, 33) = 0.38257: pd(24, 34) = 0.37187: pd(24, 35) = 0.36304: pd(24, 36) = 0.35626: pd(24, 37) = 0.35053: pd(24, 38) = 0.34634: pd(24, 39) = 0.34292: pd(24, 40) = 0.33862: pd(24, 41) = 0.33602: pd(24, 42) = 0.33429: pd(24, 43) = 0.33323: pd(24, 44) = 0.33254
: pd(25, 13) = 1.3048: pd(25, 14) = 1.2696: pd(25, 15) = 1.2075: pd(25, 16) = 1.1543: pd(25, 17) = 1.1082: pd(25, 18) = 1.0492: pd(25, 19) = 0.97103: pd(25, 20) = 0.9103: pd(25, 21) = 0.86166: pd(25, 22) = 0.78839: pd(25, 23) = 0.7357: pd(25, 24) = 0.66482: pd(25, 25) = 0.61925: pd(25, 26) = 0.58746: pd(25, 27) = 0.56402: pd(25, 28) = 0.54601: pd(25, 29) = 0.53174: pd(25, 30) = 0.52016: pd(25, 31) = 0.4956: pd(25, 32) = 0.47585: pd(25, 33) = 0.46098: pd(25, 34) = 0.44998: pd(25, 35) = 0.44092: pd(25, 36) = 0.43397: pd(25, 37) = 0.42809: pd(25, 38) = 0.4238: pd(25, 39) = 0.4203: pd(25, 40) = 0.41589: pd(25, 41) = 0.41323: pd(25, 42) = 0.41145: pd(25, 43) = 0.41037: pd(25, 44) = 0.40967
: pd(26, 13) = 1.4418: pd(26, 14) = 1.4044: pd(26, 15) = 1.3384: pd(26, 16) = 1.282: pd(26, 17) = 1.233: pd(26, 18) = 1.1705: pd(26, 19) = 1.0877: pd(26, 20) = 1.0236: pd(26, 21) = 0.97229: pd(26, 22) = 0.89525: pd(26, 23) = 0.84002: pd(26, 24) = 0.76599: pd(26, 25) = 0.71856: pd(26, 26) = 0.68555: pd(26, 27) = 0.66125: pd(26, 28) = 0.64261: pd(26, 29) = 0.62785: pd(26, 30) = 0.61588: pd(26, 31) = 0.59053: pd(26, 32) = 0.57017: pd(26, 33) = 0.55486: pd(26, 34) = 0.54355: pd(26, 35) = 0.53423: pd(26, 36) = 0.52708: pd(26, 37) = 0.52104: pd(26, 38) = 0.51663: pd(26, 39) = 0.51304: pd(26, 40) = 0.50851: pd(26, 41) = 0.50578: pd(26, 42) = 0.50396: pd(26, 43) = 0.50285: pd(26, 44) = 0.50213
: pd(27, 13) = 1.5918: pd(27, 14) = 1.5525: pd(27, 15) = 1.4831: pd(27, 16) = 1.4238: pd(27, 17) = 1.3723: pd(27, 18) = 1.3067: pd(27, 19) = 1.2199: pd(27, 20) = 1.1527: pd(27, 21) = 1.0991: pd(27, 22) = 1.0186: pd(27, 23) = 0.96111: pd(27, 24) = 0.88415: pd(27, 25) = 0.83496: pd(27, 26) = 0.80078: pd(27, 27) = 0.77565: pd(27, 28) = 0.75638: pd(27, 29) = 0.74113: pd(27, 30) = 0.72877: pd(27, 31) = 0.70262: pd(27, 32) = 0.68164: pd(27, 33) = 0.66586: pd(27, 34) = 0.65421: pd(27, 35) = 0.64462: pd(27, 36) = 0.63727: pd(27, 37) = 0.63105: pd(27, 38) = 0.62652: pd(27, 39) = 0.62282: pd(27, 40) = 0.61817: pd(27, 41) = 0.61536: pd(27, 42) = 0.61349: pd(27, 43) = 0.61234: pd(27, 44) = 0.61161
: pd(28, 13) = 1.7555: pd(28, 14) = 1.7146: pd(28, 15) = 1.6424: pd(28, 16) = 1.5806: pd(28, 17) = 1.527: pd(28, 18) = 1.4587: pd(28, 19) = 1.3684: pd(28, 20) = 1.2986: pd(28, 21) = 1.2429: pd(28, 22) = 1.1595: pd(28, 23) = 1.0999: pd(28, 24) = 1.0203: pd(28, 25) = 0.96944: pd(28, 26) = 0.93415: pd(28, 27) = 0.90821: pd(28, 28) = 0.88833: pd(28, 29) = 0.87262: pd(28, 30) = 0.85988: pd(28, 31) = 0.83293: pd(28, 32) = 0.81132: pd(28, 33) = 0.79508: pd(28, 34) = 0.7831: pd(28, 35) = 0.77323: pd(28, 36) = 0.76567: pd(28, 37) = 0.75927: pd(28, 38) = 0.75461: pd(28, 39) = 0.75081: pd(28, 40) = 0.74602: pd(28, 41) = 0.74314: pd(28, 42) = 0.74121: pd(28, 43) = 0.74004: pd(28, 44) = 0.73928
: pd(29, 13) = 1.933: pd(29, 14) = 1.8908: pd(29, 15) = 1.8162: pd(29, 16) = 1.7524: pd(29, 17) = 1.6971: pd(29, 18) = 1.6266: pd(29, 19) = 1.5333: pd(29, 20) = 1.4613: pd(29, 21) = 1.4038: pd(29, 22) = 1.3178: pd(29, 23) = 1.2564: pd(29, 24) = 1.1744: pd(29, 25) = 1.122: pd(29, 26) = 1.0857: pd(29, 27) = 1.0591: pd(29, 28) = 1.0386: pd(29, 29) = 1.0225: pd(29, 30) = 1.0094: pd(29, 31) = 0.98169: pd(29, 32) = 0.95949: pd(29, 33) = 0.9428: pd(29, 34) = 0.9305: pd(29, 35) = 0.92037: pd(29, 36) = 0.9126: pd(29, 37) = 0.90603: pd(29, 38) = 0.90125: pd(29, 39) = 0.89735: pd(29, 40) = 0.89243: pd(29, 41) = 0.88947: pd(29, 42) = 0.88749: pd(29, 43) = 0.88629: pd(29, 44) = 0.88551
: pd(30, 13) = 2.1232: pd(30, 14) = 2.0799: pd(30, 15) = 2.0035: pd(30, 16) = 1.9381: pd(30, 17) = 1.8814: pd(30, 18) = 1.8091: pd(30, 19) = 1.7135: pd(30, 20) = 1.6396: pd(30, 21) = 1.5806: pd(30, 22) = 1.4925: pd(30, 23) = 1.4295: pd(30, 24) = 1.3454: pd(30, 25) = 1.2918: pd(30, 26) = 1.2546: pd(30, 27) = 1.2273: pd(30, 28) = 1.2064: pd(30, 29) = 1.1898: pd(30, 30) = 1.1764: pd(30, 31) = 1.1481: pd(30, 32) = 1.1253: pd(30, 33) = 1.1083: pd(30, 34) = 1.0957: pd(30, 35) = 1.0853: pd(30, 36) = 1.0773: pd(30, 37) = 1.0706: pd(30, 38) = 1.0657: pd(30, 39) = 1.0617: pd(30, 40) = 1.0567: pd(30, 41) = 1.0537: pd(30, 42) = 1.0517: pd(30, 43) = 1.0504: pd(30, 44) = 1.0496
: pd(31, 13) = 2.3244: pd(31, 14) = 2.2803: pd(31, 15) = 2.2024: pd(31, 16) = 2.1358: pd(31, 17) = 2.078: pd(31, 18) = 2.0043: pd(31, 19) = 1.9068: pd(31, 20) = 1.8315: pd(31, 21) = 1.7714: pd(31, 22) = 1.6815: pd(31, 23) = 1.6173: pd(31, 24) = 1.5315: pd(31, 25) = 1.4769: pd(31, 26) = 1.439: pd(31, 27) = 1.4111: pd(31, 28) = 1.3897: pd(31, 29) = 1.3729: pd(31, 30) = 1.3592: pd(31, 31) = 1.3303: pd(31, 32) = 1.3071: pd(31, 33) = 1.2897: pd(31, 34) = 1.2769: pd(31, 35) = 1.2663: pd(31, 36) = 1.2582: pd(31, 37) = 1.2513: pd(31, 38) = 1.2464: pd(31, 39) = 1.2423: pd(31, 40) = 1.2372: pd(31, 41) = 1.2341: pd(31, 42) = 1.232: pd(31, 43) = 1.2307: pd(31, 44) = 1.2299
: pd(32, 13) = 2.5343: pd(32, 14) = 2.4896: pd(32, 15) = 2.4107: pd(32, 16) = 2.3432: pd(32, 17) = 2.2846: pd(32, 18) = 2.2098: pd(32, 19) = 2.111: pd(32, 20) = 2.0346: pd(32, 21) = 1.9736: pd(32, 22) = 1.8823: pd(32, 23) = 1.8172: pd(32, 24) = 1.7302: pd(32, 25) = 1.6747: pd(32, 26) = 1.6362: pd(32, 27) = 1.6079: pd(32, 28) = 1.5862: pd(32, 29) = 1.5691: pd(32, 30) = 1.5552: pd(32, 31) = 1.5259: pd(32, 32) = 1.5023: pd(32, 33) = 1.4847: pd(32, 34) = 1.4716: pd(32, 35) = 1.4609: pd(32, 36) = 1.4527: pd(32, 37) = 1.4457: pd(32, 38) = 1.4406: pd(32, 39) = 1.4365: pd(32, 40) = 1.4313: pd(32, 41) = 1.4282: pd(32, 42) = 1.4261: pd(32, 43) = 1.4248: pd(32, 44) = 1.424
: pd(33, 13) = 2.7508: pd(33, 14) = 2.7057: pd(33, 15) = 2.6261: pd(33, 16) = 2.5579: pd(33, 17) = 2.4988: pd(33, 18) = 2.4233: pd(33, 19) = 2.3234: pd(33, 20) = 2.2462: pd(33, 21) = 2.1846: pd(33, 22) = 2.0924: pd(33, 23) = 2.0265: pd(33, 24) = 1.9385: pd(33, 25) = 1.8824: pd(33, 26) = 1.8435: pd(33, 27) = 1.8149: pd(33, 28) = 1.793: pd(33, 29) = 1.7757: pd(33, 30) = 1.7616: pd(33, 31) = 1.732: pd(33, 32) = 1.7082: pd(33, 33) = 1.6903: pd(33, 34) = 1.6771: pd(33, 35) = 1.6663: pd(33, 36) = 1.6579: pd(33, 37) = 1.6509: pd(33, 38) = 1.6458: pd(33, 39) = 1.6416: pd(33, 40) = 1.6363: pd(33, 41) = 1.6332: pd(33, 42) = 1.631: pd(33, 43) = 1.6298: pd(33, 44) = 1.6289
: pd(34, 13) = 2.972: pd(34, 14) = 2.9267: pd(34, 15) = 2.8466: pd(34, 16) = 2.7779: pd(34, 17) = 2.7184: pd(34, 18) = 2.6424: pd(34, 19) = 2.5418: pd(34, 20) = 2.4641: pd(34, 21) = 2.402: pd(34, 22) = 2.3091: pd(34, 23) = 2.2427: pd(34, 24) = 2.1541: pd(34, 25) = 2.0976: pd(34, 26) = 2.0583: pd(34, 27) = 2.0295: pd(34, 28) = 2.0074: pd(34, 29) = 1.99: pd(34, 30) = 1.9758: pd(34, 31) = 1.9459: pd(34, 32) = 1.9219: pd(34, 33) = 1.9039: pd(34, 34) = 1.8906: pd(34, 35) = 1.8797: pd(34, 36) = 1.8713: pd(34, 37) = 1.8642: pd(34, 38) = 1.8591: pd(34, 39) = 1.8548: pd(34, 40) = 1.8495: pd(34, 41) = 1.8463: pd(34, 42) = 1.8442: pd(34, 43) = 1.8429: pd(34, 44) = 1.8421
: pd(35, 13) = 3.1965: pd(35, 14) = 3.1509: pd(35, 15) = 3.0705: pd(35, 16) = 3.0016: pd(35, 17) = 2.9418: pd(35, 18) = 2.8654: pd(35, 19) = 2.7644: pd(35, 20) = 2.6863: pd(35, 21) = 2.6239: pd(35, 22) = 2.5305: pd(35, 23) = 2.4638: pd(35, 24) = 2.3748: pd(35, 25) = 2.3179: pd(35, 26) = 2.2785: pd(35, 27) = 2.2495: pd(35, 28) = 2.2273: pd(35, 29) = 2.2098: pd(35, 30) = 2.1955: pd(35, 31) = 2.1655: pd(35, 32) = 2.1414: pd(35, 33) = 2.1232: pd(35, 34) = 2.1099: pd(35, 35) = 2.0989: pd(35, 36) = 2.0904: pd(35, 37) = 2.0833: pd(35, 38) = 2.0781: pd(35, 39) = 2.0739: pd(35, 40) = 2.0686: pd(35, 41) = 2.0653: pd(35, 42) = 2.0632: pd(35, 43) = 2.0619: pd(35, 44) = 2.061
: pd(36, 13) = 3.423: pd(36, 14) = 3.3774: pd(36, 15) = 3.2968: pd(36, 16) = 3.2276: pd(36, 17) = 3.1676: pd(36, 18) = 3.0911: pd(36, 19) = 2.9897: pd(36, 20) = 2.9114: pd(36, 21) = 2.8488: pd(36, 22) = 2.7551: pd(36, 23) = 2.6882: pd(36, 24) = 2.5988: pd(36, 25) = 2.5418: pd(36, 26) = 2.5022: pd(36, 27) = 2.4732: pd(36, 28) = 2.4509: pd(36, 29) = 2.4333: pd(36, 30) = 2.419: pd(36, 31) = 2.3888: pd(36, 32) = 2.3646: pd(36, 33) = 2.3464: pd(36, 34) = 2.333: pd(36, 35) = 2.322: pd(36, 36) = 2.3135: pd(36, 37) = 2.3064: pd(36, 38) = 2.3011: pd(36, 39) = 2.2969: pd(36, 40) = 2.2915: pd(36, 41) = 2.2883: pd(36, 42) = 2.2862: pd(36, 43) = 2.2848: pd(36, 44) = 2.284
: pd(37, 13) = 3.651: pd(37, 14) = 3.6053: pd(37, 15) = 3.5244: pd(37, 16) = 3.4552: pd(37, 17) = 3.3951: pd(37, 18) = 3.3184: pd(37, 19) = 3.2169: pd(37, 20) = 3.1384: pd(37, 21) = 3.0757: pd(37, 22) = 2.9818: pd(37, 23) = 2.9147: pd(37, 24) = 2.8252: pd(37, 25) = 2.768: pd(37, 26) = 2.7283: pd(37, 27) = 2.6992: pd(37, 28) = 2.6769: pd(37, 29) = 2.6592: pd(37, 30) = 2.6449: pd(37, 31) = 2.6147: pd(37, 32) = 2.5904: pd(37, 33) = 2.5722: pd(37, 34) = 2.5587: pd(37, 35) = 2.5477: pd(37, 36) = 2.5392: pd(37, 37) = 2.532: pd(37, 38) = 2.5268: pd(37, 39) = 2.5225: pd(37, 40) = 2.5172: pd(37, 41) = 2.5139: pd(37, 42) = 2.5118: pd(37, 43) = 2.5105: pd(37, 44) = 2.5096
: pd(38, 13) = 3.8797: pd(38, 14) = 3.8339: pd(38, 15) = 3.7531: pd(38, 16) = 3.6838: pd(38, 17) = 3.6236: pd(38, 18) = 3.5469: pd(38, 19) = 3.4452: pd(38, 20) = 3.3665: pd(38, 21) = 3.3038: pd(38, 22) = 3.2098: pd(38, 23) = 3.1426: pd(38, 24) = 3.0529: pd(38, 25) = 2.9957: pd(38, 26) = 2.956: pd(38, 27) = 2.9268: pd(38, 28) = 2.9044: pd(38, 29) = 2.8867: pd(38, 30) = 2.8724: pd(38, 31) = 2.8421: pd(38, 32) = 2.8178: pd(38, 33) = 2.7996: pd(38, 34) = 2.7861: pd(38, 35) = 2.775: pd(38, 36) = 2.7665: pd(38, 37) = 2.7594: pd(38, 38) = 2.7541: pd(38, 39) = 2.7499: pd(38, 40) = 2.7445: pd(38, 41) = 2.7412: pd(38, 42) = 2.7391: pd(38, 43) = 2.7378: pd(38, 44) = 2.7369
: pd(39, 13) = 4.1091: pd(39, 14) = 4.0633: pd(39, 15) = 3.9823: pd(39, 16) = 3.913: pd(39, 17) = 3.8528: pd(39, 18) = 3.776: pd(39, 19) = 3.6742: pd(39, 20) = 3.5955: pd(39, 21) = 3.5327: pd(39, 22) = 3.4387: pd(39, 23) = 3.3714: pd(39, 24) = 3.2816: pd(39, 25) = 3.2244: pd(39, 26) = 3.1846: pd(39, 27) = 3.1554: pd(39, 28) = 3.133: pd(39, 29) = 3.1153: pd(39, 30) = 3.101: pd(39, 31) = 3.0706: pd(39, 32) = 3.0463: pd(39, 33) = 3.028: pd(39, 34) = 3.0146: pd(39, 35) = 3.0035: pd(39, 36) = 2.995: pd(39, 37) = 2.9878: pd(39, 38) = 2.9825: pd(39, 39) = 2.9783: pd(39, 40) = 2.9729: pd(39, 41) = 2.9696: pd(39, 42) = 2.9675: pd(39, 43) = 2.9662: pd(39, 44) = 2.9653
: pd(40, 13) = 4.3388: pd(40, 14) = 4.2931: pd(40, 15) = 4.2119: pd(40, 16) = 4.1425: pd(40, 17) = 4.0825: pd(40, 18) = 4.0056: pd(40, 19) = 3.9037: pd(40, 20) = 3.825: pd(40, 21) = 3.7622: pd(40, 22) = 3.668: pd(40, 23) = 3.6008: pd(40, 24) = 3.5109: pd(40, 25) = 3.4536: pd(40, 26) = 3.4138: pd(40, 27) = 3.3846: pd(40, 28) = 3.3622: pd(40, 29) = 3.3445: pd(40, 30) = 3.3301: pd(40, 31) = 3.2998: pd(40, 32) = 3.2755: pd(40, 33) = 3.2572: pd(40, 34) = 3.2437: pd(40, 35) = 3.2326: pd(40, 36) = 3.2241: pd(40, 37) = 3.2169: pd(40, 38) = 3.2116: pd(40, 39) = 3.2074: pd(40, 40) = 3.202: pd(40, 41) = 3.1987: pd(40, 42) = 3.1966: pd(40, 43) = 3.1953: pd(40, 44) = 3.1944
: pd(41, 13) = 4.5687: pd(41, 14) = 4.5231: pd(41, 15) = 4.4417: pd(41, 16) = 4.3725: pd(41, 17) = 4.3122: pd(41, 18) = 4.2354: pd(41, 19) = 4.1335: pd(41, 20) = 4.0547: pd(41, 21) = 3.9919: pd(41, 22) = 3.8977: pd(41, 23) = 3.8303: pd(41, 24) = 3.7405: pd(41, 25) = 3.6832: pd(41, 26) = 3.6434: pd(41, 27) = 3.6142: pd(41, 28) = 3.5918: pd(41, 29) = 3.5741: pd(41, 30) = 3.5597: pd(41, 31) = 3.5294: pd(41, 32) = 3.505: pd(41, 33) = 3.4867: pd(41, 34) = 3.4732: pd(41, 35) = 3.4621: pd(41, 36) = 3.4536: pd(41, 37) = 3.4464: pd(41, 38) = 3.4412: pd(41, 39) = 3.4369: pd(41, 40) = 3.4315: pd(41, 41) = 3.4283: pd(41, 42) = 3.4261: pd(41, 43) = 3.4248: pd(41, 44) = 3.4239
: pd(42, 13) = 4.7984: pd(42, 14) = 4.7523: pd(42, 15) = 4.6716: pd(42, 16) = 4.6024: pd(42, 17) = 4.5424: pd(42, 18) = 4.4652: pd(42, 19) = 4.3636: pd(42, 20) = 4.2845: pd(42, 21) = 4.2216: pd(42, 22) = 4.1277: pd(42, 23) = 4.0603: pd(42, 24) = 3.9704: pd(42, 25) = 3.9131: pd(42, 26) = 3.8732: pd(42, 27) = 3.844: pd(42, 28) = 3.8216: pd(42, 29) = 3.8039: pd(42, 30) = 3.7895: pd(42, 31) = 3.7592: pd(42, 32) = 3.7348: pd(42, 33) = 3.7165: pd(42, 34) = 3.703: pd(42, 35) = 3.6919: pd(42, 36) = 3.6834: pd(42, 37) = 3.6762: pd(42, 38) = 3.671: pd(42, 39) = 3.6667: pd(42, 40) = 3.6613: pd(42, 41) = 3.6581: pd(42, 42) = 3.6559: pd(42, 43) = 3.6546: pd(42, 44) = 3.6537
: pd(43, 13) = 5.0297: pd(43, 14) = 4.983: pd(43, 15) = 4.9026: pd(43, 16) = 4.8322: pd(43, 17) = 4.7729: pd(43, 18) = 4.6958: pd(43, 19) = 4.5936: pd(43, 20) = 4.5149: pd(43, 21) = 4.452: pd(43, 22) = 4.3577: pd(43, 23) = 4.2906: pd(43, 24) = 4.2006: pd(43, 25) = 4.143: pd(43, 26) = 4.1033: pd(43, 27) = 4.0741: pd(43, 28) = 4.0516: pd(43, 29) = 4.0339: pd(43, 30) = 4.0196: pd(43, 31) = 3.9892: pd(43, 32) = 3.9648: pd(43, 33) = 3.9465: pd(43, 34) = 3.933: pd(43, 35) = 3.9219: pd(43, 36) = 3.9134: pd(43, 37) = 3.9062: pd(43, 38) = 3.9009: pd(43, 39) = 3.8967: pd(43, 40) = 3.8913: pd(43, 41) = 3.888: pd(43, 42) = 3.8859: pd(43, 43) = 3.8845: pd(43, 44) = 3.8837
: pd(44, 13) = 5.2585: pd(44, 14) = 5.2147: pd(44, 15) = 5.132: pd(44, 16) = 5.0631: pd(44, 17) = 5.0028: pd(44, 18) = 4.926: pd(44, 19) = 4.8238: pd(44, 20) = 4.7449: pd(44, 21) = 4.6821: pd(44, 22) = 4.5873: pd(44, 23) = 4.5206: pd(44, 24) = 4.4305: pd(44, 25) = 4.3732: pd(44, 26) = 4.3333: pd(44, 27) = 4.3041: pd(44, 28) = 4.2818: pd(44, 29) = 4.2639: pd(44, 30) = 4.2496: pd(44, 31) = 4.2192: pd(44, 32) = 4.1949: pd(44, 33) = 4.1766: pd(44, 34) = 4.1631: pd(44, 35) = 4.152: pd(44, 36) = 4.1435: pd(44, 37) = 4.1363: pd(44, 38) = 4.131: pd(44, 39) = 4.1267: pd(44, 40) = 4.1213: pd(44, 41) = 4.1181: pd(44, 42) = 4.1159: pd(44, 43) = 4.1146: pd(44, 44) = 4.1138
: pd(45, 13) = 5.4906: pd(45, 14) = 5.4433: pd(45, 15) = 5.3627: pd(45, 16) = 5.2912: pd(45, 17) = 5.2318: pd(45, 18) = 5.1565: pd(45, 19) = 5.0542: pd(45, 20) = 4.9748: pd(45, 21) = 4.912: pd(45, 22) = 4.818: pd(45, 23) = 4.7511: pd(45, 24) = 4.6605: pd(45, 25) = 4.6033: pd(45, 26) = 4.5638: pd(45, 27) = 4.5343: pd(45, 28) = 4.5118: pd(45, 29) = 4.4942: pd(45, 30) = 4.4798: pd(45, 31) = 4.4494: pd(45, 32) = 4.4251: pd(45, 33) = 4.4067: pd(45, 34) = 4.3932: pd(45, 35) = 4.3821: pd(45, 36) = 4.3736: pd(45, 37) = 4.3664: pd(45, 38) = 4.3611: pd(45, 39) = 4.3569: pd(45, 40) = 4.3515: pd(45, 41) = 4.3483: pd(45, 42) = 4.3461: pd(45, 43) = 4.3448: pd(45, 44) = 4.3439
: pd(46, 13) = 5.7163: pd(46, 14) = 5.6708: pd(46, 15) = 5.5921: pd(46, 16) = 5.5222: pd(46, 17) = 5.4608: pd(46, 18) = 5.3825: pd(46, 19) = 5.2842: pd(46, 20) = 5.2046: pd(46, 21) = 5.1424: pd(46, 22) = 5.0485: pd(46, 23) = 4.9799: pd(46, 24) = 4.891: pd(46, 25) = 4.8336: pd(46, 26) = 4.7938: pd(46, 27) = 4.7643: pd(46, 28) = 4.742: pd(46, 29) = 4.7242: pd(46, 30) = 4.7099: pd(46, 31) = 4.6793: pd(46, 32) = 4.6551: pd(46, 33) = 4.6369: pd(46, 34) = 4.6234: pd(46, 35) = 4.6123: pd(46, 36) = 4.6038: pd(46, 37) = 4.5966: pd(46, 38) = 4.5913: pd(46, 39) = 4.5871: pd(46, 40) = 4.5817: pd(46, 41) = 4.5784: pd(46, 42) = 4.5763: pd(46, 43) = 4.5749: pd(46, 44) = 4.5741


td_index = 1
For i = 1 To nbr_of_td
   If tdxf <= td(i) Then
       td_index = i - 1: Exit For
   Else
   End If
Next
td_index = max(1, min(td_index, nbr_of_td - 1))

fcd_index = 1
For i = 1 To nb_of_fcd
  If fcd <= fcd_v(i) Then
       fcd_index = i - 1: Exit For
  End If
Next
fcd_index = max(1, min(fcd_index, nb_of_fcd - 1))

'interpolate between 4 points
pd_low = inter(fcd_v(fcd_index), (pd(td_index, fcd_index)), fcd_v(fcd_index + 1), (pd(td_index, fcd_index + 1)), fcd)
pd_up = inter(fcd_v(fcd_index), (pd(td_index + 1, fcd_index)), fcd_v(fcd_index + 1), (pd(td_index + 1, fcd_index + 1)), fcd)
pd_inter = inter(Log(td(td_index)), pd_low, Log(td(td_index + 1)), pd_up, Log(tdxf))

pd_FCF = pd_inter
End Function

Private Function inter(x1, y1, x2, y2, X)
If x1 <> x2 Then
inter = (y1 - y2) / (x1 - x2) * (X - x1) + y1
Else
  inter = (y1 + y2) / 2
End If
End Function
Private Function max(A, B)
   If A > B Then max = A: Exit Function
   max = B
End Function
Private Function min(A, B)
   If A < B Then min = A: Exit Function
   min = B
End Function


Attribute VB_Name = "Skin_calc_stac"
Function GetSkin(type_calc, Xf, Wf, Kf, K_, Optional Rw = def_rw, Optional Rc = def_re)
If type_calc = "stac" Then
 getskin1 = GetStacSkin(K_, 0, Kf * 1000, Wf / 2 / 1000, Xf) + 3 / 4
 If getskin1 > 0 Then
  GetSkin = 0
 Else
  GetSkin = getskin1
 End If
Else
 GetSkin = Skin_FCF_CPB(Xf, Kf * Wf / (Xf * K_))
End If

End Function

Function GetStacSkin(K_, h, Kf, Wf, Xf, Optional Rw = def_rw, Optional Rc = def_re)

lambda = (Kf - K_) / (Kf + K_)
q = ((Xf - Wf) / (Xf + Wf)) ^ (1 / 2)
F = (Xf ^ 2 - Wf ^ 2) ^ (1 / 2)

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sum = GetSumSmart(lambda, q)

' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Skin = -lambda * Log(Rc / Rw) + lambda * Log(2 * Rc / F) - (1 - lambda) * Sum

GetStacSkin = Skin

End Function


Public Function GetSumSmart(lambda, q)
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
al = 0.98
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
N = Round(Log(al) / 4 / Log(q))
'N = 10
A = 0
For i = 1 To N - 1
  B = (lambda ^ i) * Log(1 - q ^ (4 * i))
  A = A + B
Next i
 ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 ' 200 |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 0.98
For j = 1 To 200
 temp = lambda * q ^ (4 * j)
 P = P + 1 / j * (temp) ^ N / (1 - temp)
Next j
 
' GetSumSmart = Str(A - P) + "  " + Str(P) + "  " + Str(N)
 GetSumSmart = A - P
 
End Function


Attribute VB_Name = "laroux"




Attribute VB_Name = "laroux1"




Attribute VB_Name = "mdlCheckTR"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0.3
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' 25.06.2003


Option Explicit

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Const FirstRowIndex = 11

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Const LastColIndex = 62

Function IsProperNumber(Value As Variant) As Boolean
  
  IsProperNumber = True
  If IsError(Value) Then
    IsProperNumber = False
  Else
    If IsEmpty(Value) Or (Not IsNumeric(Value)) Or (0 < InStr(Value, " ")) Then IsProperNumber = False
  End If
End Function

Function IsVeryEmpty(Value As Variant) As Boolean
  
  IsVeryEmpty = False
  If Trim(Value) = "" Then IsVeryEmpty = True

End Function


Sub FillArrayByRange(ByRef mass As Variant, rng As Range)
  
  Dim i As Integer
  ReDim mass(1 To rng.Rows.Count)
  For i = 1 To rng.Rows.Count
    If IsEmpty(rng.Cells(i, 1)) Then
      ReDim Preserve mass(1 To i - 1)
      Exit For
    End If
    mass(i) = rng.Cells(i, 1)
  Next i
  
End Sub

Function ParseSpr(ByVal SheetName As String, ByVal Value As String) As String
  
  ParseSpr = ""
  
  'On Error GoTo OnError
  Dim Sheet As Worksheet
  Dim C As Variant
  
  Set Sheet = Sheets(SheetName)
  
  Set C = Sheet.Range("C4:C100").Find(Trim(Value), LookIn:=xlValues)
  If Not (C Is Nothing) Then
    ParseSpr = Sheet.Cells(C.Row, 2)
  End If
    
OnError:
  
End Function

Function InArray(ByVal mass As Variant, Value As Variant) As Boolean
  
  InArray = False
  
  On Error GoTo OnError
  
  Dim i As Integer
  For i = LBound(mass) To UBound(mass)
    If mass(i) = Value Then
      InArray = True
      Exit For
    End If
  Next i
  
OnError:
End Function

Sub CheckTR(SheetName As String)
  On Error GoTo Finish
  
  Dim ErrorMessages, Errors, Warnings As Variant
  
  ReDim ErrorMessages(0 To LastColIndex)
  ReDim Errors(0 To LastColIndex)
  ReDim Warnings(0 To LastColIndex)
  
  ErrorMessages(0) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(4) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(6) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
  ErrorMessages(5) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"  ' new column inserted
  ErrorMessages(8) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(10) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| D|fffd|/|fffd|"
  ErrorMessages(11) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  ErrorMessages(12) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  ErrorMessages(13) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
  ErrorMessages(14) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(15) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(16) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(17) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"  '''''''''''''
  ErrorMessages(20) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
  ErrorMessages(21) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  ErrorMessages(22) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
  ErrorMessages(23) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| P|fffd||fffd||fffd||fffd|"
  ErrorMessages(25) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| P|fffd||fffd||fffd|"
  ErrorMessages(26) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Q|fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(27) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Q|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(28) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(29) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(30) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  ErrorMessages(31) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
  ErrorMessages(32) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| skin"
  ErrorMessages(34) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  ErrorMessages(35) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(36) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(37) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(38) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  ErrorMessages(39) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  ErrorMessages(40) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| H|fffd||fffd||fffd||fffd|"
  ErrorMessages(61) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  
  ' usefull variables
  Dim H_perf_col As Integer
  Dim H_pump_col As Integer
  Dim Pump_type_col As Integer
  Dim P_plast_col As Integer
  Dim Sposob_col As Integer
  Dim Liq_rate_col As Integer
  Dim dyn_level_col As Integer
  
  
  H_perf_col = 11
  H_pump_col = 18
  Pump_type_col = 14
  P_plast_col = 21
  Sposob_col = 13
  Liq_rate_col = 27
  dyn_level_col = 22
  
  Dim NGDUList, SEList, SostList, FirmList, CodesList As Variant
  
  FillArrayByRange CodesList, Sheets("|fffd||fffd||fffd||fffd| OIS").Range(Sheets("|fffd||fffd||fffd||fffd| OIS").Cells(4, 3), Sheets("|fffd||fffd||fffd||fffd| OIS").Cells(600, 3))
  
  Dim Sheet As Worksheet
  
  Set Sheet = Sheets(SheetName)
  
  With Sheet
    .Range(.Cells(FirstRowIndex, 1), .Cells(Sheet.UsedRange.Rows.Count, 100)).Interior.ColorIndex = xlNone
    .Range(.Cells(FirstRowIndex, LastColIndex), .Cells(Sheet.UsedRange.Rows.Count, LastColIndex + 1)).Clear
  End With
  
  Dim i, j As Integer
  
  Dim Value As Variant
  Dim ErrorCol As Integer
  Dim ValueOld As String
  
  Dim WellsCount, ErrorsCount, WarningsCount As Integer
  
  WellsCount = 0
  ErrorsCount = 0
  WarningsCount = 0
  
  Dim isWorkingWell As Boolean
  
  For i = FirstRowIndex To Sheet.UsedRange.Rows.Count
    
    ErrorCol = 0
    
    On Error GoTo ErrorOccured
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Value = Sheet.Cells(i, 5)
    If IsEmpty(Value) Then Exit For
    
    WellsCount = WellsCount + 1
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Value = Trim(Sheet.Cells(i, 5))
    
    For j = 1 To Len(Value)
      If InStr("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm,.- ;'", Mid(Value, j, 1)) > 0 Then
        GoTo ErrorOccured
      End If
    Next j
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    If Value <> Sheet.Cells(i, 5) Then Sheet.Cells(i, 5) = Value
    
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 4
    Value = Sheet.Cells(i, ErrorCol)
    If Not (InArray(CodesList, Value)) Then
      GoTo ErrorOccured
    End If
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 29  ' done
    Value = ParseSpr("|fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Sheet.Cells(i, ErrorCol).Value)
    If Value = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Or Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      isWorkingWell = True
    Else
      isWorkingWell = False
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    If (Value <> "") And (Sheet.Cells(i, ErrorCol).Value <> Value) Then Sheet.Cells(i, ErrorCol).Value = Value
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Value = "" Then
      GoTo ErrorOccured
    End If
    
    ' 0 < D|fffd|/|fffd| < 1000
    ErrorCol = 10 ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value) And (Value < 1000)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' 0 < |fffd||fffd||fffd| < 10000
    ErrorCol = 11  ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value) And (Value < 10000)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' 0 <= |fffd||fffd||fffd| <= H|fffd||fffd|
    ErrorCol = 12   ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value) And (Value <= Sheet.Cells(i, H_perf_col))) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 13    ' done
    Value = ParseSpr("|fffd||fffd||fffd|. |fffd||fffd|", Sheet.Cells(i, ErrorCol))
    If Value = "" Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    If (Value <> "") And (Sheet.Cells(i, ErrorCol).Value <> Value) Then Sheet.Cells(i, ErrorCol).Value = Value
    
    ValueOld = Value
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| >0 (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)
    ErrorCol = 15  ' done
    Value = Sheet.Cells(i, ErrorCol)
    If ValueOld = "|fffd||fffd||fffd|" And Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 16  ' done
    Value = Sheet.Cells(i, ErrorCol)
    If ValueOld = "|fffd||fffd||fffd|" And (InStr(Sheet.Cells(i, Pump_type_col), "|fffd||fffd||fffd|") = 0) And Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)
    ErrorCol = 18 ' done
    Value = Sheet.Cells(i, ErrorCol)
    If ValueOld <> "|fffd||fffd||fffd|" And Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' 0 <= |fffd||fffd| < 1000
    ErrorCol = 20 ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value) And (Value < 1000)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' 0 < |fffd||fffd||fffd| < 1000
    ErrorCol = 21 ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value) And (Value < 1000)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 22 ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Sheet.Cells(i, Sposob_col) <> "|fffd||fffd||fffd|" And Not ((((0 < Value) And IsProperNumber(Value) And (Sheet.Cells(i, Liq_rate_col) <> 0)) Or (Sheet.Cells(i, Liq_rate_col) = 0)) And (Value <= Sheet.Cells(i, H_pump_col))) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' 0 < P|fffd||fffd||fffd||fffd| <= 1000
    ErrorCol = 23  'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value) And (Value <= 1000)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 27   'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 28    'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value) And (Value <= 100)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 30  ' done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value) And (Value <= 300)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 31  'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    ErrorCol = 34  'done
    Value = Sheet.Cells(i, ErrorCol)
    If (Not IsEmpty(Value)) And (Not IsDate(Value) Or Not (DateSerial(1950, 1, 1) < Value And Value <= Date)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    If (Not IsEmpty(Value)) Then
      
      ' |fffd||fffd||fffd||fffd||fffd|
      ErrorCol = 35  'done
      Value = ParseSpr("|fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Sheet.Cells(i, ErrorCol))
      If Value = "" Then
        If isWorkingWell Then
          GoTo ErrorOccured
        Else
          GoTo WarningOccured
        End If
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd|
      If (Value <> "") And (Sheet.Cells(i, ErrorCol).Value <> Value) Then Sheet.Cells(i, ErrorCol).Value = Value
    
    Else
      
      ' |fffd||fffd||fffd||fffd||fffd|
      ErrorCol = 35  'done
      Value = Trim(Sheet.Cells(i, ErrorCol))
      If Not (Value = "") Then
        If isWorkingWell Then
          GoTo ErrorOccured
        Else
          GoTo WarningOccured
        End If
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd|
      If (Sheet.Cells(i, ErrorCol).Value <> Value) Then Sheet.Cells(i, ErrorCol).Value = Value
    
    End If
    
    ' skin
    ErrorCol = 32   'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not IsEmpty(Value) And Not (IsProperNumber(Value) And (-10 <= Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 36   'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 37   'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 38 'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ErrorCol = 39 'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 40 'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 < Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 61 'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not IsEmpty(Value) And Not (IsProperNumber(Value) And (1 <= Value) And (Value <= 10)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    ' P|fffd||fffd||fffd|
    ErrorCol = 25 'done
    Value = Sheet.Cells(i, ErrorCol)
    If IsError(Value) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    Else
      If Not (IsProperNumber(Value) And (0 < Value) And (Value <= Sheet.Cells(i, P_plast_col))) Then
        If isWorkingWell Then
          GoTo ErrorOccured
        Else
          GoTo WarningOccured
        End If
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 26 'done
    Value = Sheet.Cells(i, ErrorCol)
    If Not (IsProperNumber(Value) And (0 <= Value)) Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    

    ' |fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 8 ' done
    Value = Sheet.Cells(i, ErrorCol)
    If IsVeryEmpty(Value) Then
      GoTo WarningOccured
    End If
    
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = Pump_type_col
    Value = Sheet.Cells(i, ErrorCol)
    If IsVeryEmpty(Value) Then
      GoTo WarningOccured
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ErrorCol = H_pump_col
    Value = Sheet.Cells(i, ErrorCol)
    If Sheet.Cells(i, Sposob_col) <> "|fffd||fffd||fffd|" And Not (IsProperNumber(Value) And (Value <= Sheet.Cells(i, H_perf_col))) Then
      GoTo WarningOccured
    End If
    
    
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ErrorCol = 6    ' done
    Value = ParseSpr("|fffd||fffd||fffd|. |fffd||fffd||fffd||fffd|", Sheet.Cells(i, ErrorCol))
    If Value = "" Then
      If isWorkingWell Then
        GoTo ErrorOccured
      Else
        GoTo WarningOccured
      End If
    End If
    
    GoTo NextRow
    
ErrorOccured:
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
    With Sheet
      .Cells(i, LastColIndex + 1) = ErrorMessages(ErrorCol)
      .Range(.Cells(i, 2), .Cells(i, 5)).Interior.ColorIndex = 3
      If ErrorCol > 0 Then .Cells(i, ErrorCol).Interior.ColorIndex = 3
    End With
    
    Errors(ErrorCol) = Errors(ErrorCol) + 1
    ErrorsCount = ErrorsCount + 1
    
    GoTo NextRow

WarningOccured:
    
    With Sheet
      .Cells(i, LastColIndex + 1) = ErrorMessages(ErrorCol)
      .Range(.Cells(i, 2), .Cells(i, 5)).Interior.ColorIndex = 4
      If ErrorCol > 0 Then .Cells(i, ErrorCol).Interior.ColorIndex = 4
    End With
    
    Warnings(ErrorCol) = Warnings(ErrorCol) + 1
    WarningsCount = WarningsCount + 1
    
NextRow:
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Next i
  
  If ErrorsCount > 0 Then MsgBox ("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ErrorsCount & " |fffd||fffd||fffd||fffd||fffd||fffd|") Else MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  
  With Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    
    .Cells(4, 3) = Date & " (" & Time & ")"
    .Cells(5, 3) = WellsCount
    .Cells(6, 3) = ErrorsCount
    .Cells(7, 3) = WarningsCount
    
    Dim CurRowIndex As Integer
    CurRowIndex = 12
    
    .Range(.Cells(CurRowIndex, 1), .Cells(.UsedRange.Rows.Count + 10, 4)).Clear
    
    For i = 0 To LastColIndex
      
      If (Errors(i) > 0) Or (Warnings(i) > 0) Then
        
        .Cells(CurRowIndex, 1) = CurRowIndex - 11
        .Cells(CurRowIndex, 2) = ErrorMessages(i)
        .Cells(CurRowIndex, 3) = Errors(i)
        .Cells(CurRowIndex, 4) = Warnings(i)
        CurRowIndex = CurRowIndex + 1
        
      End If
      
    Next i
    
  End With

Finish:

End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



' InQuest injected base64 decoded content
' \%A4

INQUEST-PP=macro
