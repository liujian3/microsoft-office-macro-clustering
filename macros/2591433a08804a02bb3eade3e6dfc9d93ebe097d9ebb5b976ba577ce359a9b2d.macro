Attribute VB_Name = "Mod1Callbacks"
Dim cpapRibbon As IRibbonUI
Dim MenuCtrlCount As Long
Public MenuCtrlIdx As Long
Dim menuSepFerRap As Long
Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)

Public Sub InvalidateRibbon()
    If Not cpapRibbon Is Nothing Then
        cpapRibbon.Invalidate
    Else
        'Debug.Assert ThisWorkbook.Saved    'Em debug stop aqui e, se n|fffd|o salvar, altera|fffd||fffd|es ser|fffd|o perdidas.
        'ThisWorkbook.Saved = True
        'Application.DisplayAlerts = False
        'ThisWorkbook.ChangeFileAccess xlReadOnly
        'ThisWorkbook.ChangeFileAccess xlReadWrite 'Nao restaura mais, assim so funciona uma vez. Funcinou por anos, mas editando para o 2013, depois de xlReadOnly o arquivo fica Lock. Entao implemente a solucao do MVP Rory Archibald no forum MrExcel. http://www.mrexcel.com/forum/excel-questions/518629-how-preserve-regain-id-my-custom-ribbon-ui.html#post2562883
        Dim lcpapRibPtr As Long: lcpapRibPtr = Sheet1.Range("A1").Value
        CopyMemory cpapRibbon, lcpapRibPtr, LenB(lcpapRibPtr)
        cpapRibbon.Invalidate
    End If
    MenuCtrlCount = 0
    menuSepFerRap = 0
End Sub

Function getMenuCtrlIdx(control As IRibbonControl) As Boolean
    If CommandBars.ActiveMenuBar.Controls.Count = 0 Then Exit Function 'No 2013 de repente uma barra de menu vazia pode ficar ativa.
    
    MenuCtrlIdx = Mid(control.ID, Len("cpapBut") + 1)
    If MenuCtrlCount = 0 Then MenuCtrlCount = CommandBars.ActiveMenuBar.Controls.Count
    getMenuCtrlIdx = MenuCtrlCount > 0 And MenuCtrlIdx <= MenuCtrlCount
    
    If MenuCtrlIdx > CommandBars.ActiveMenuBar.Controls.Count Then getMenuCtrlIdx = False 'No 2013 de repente uma barra de menu ativa pode alterar e nao ser a da Ribbon chamando. Pelo menos evita erro
End Function


'Callback for customUI.onLoad
Sub onLoadRibbon(ribbon As IRibbonUI)
    Set cpapRibbon = ribbon
    Sheet1.Range("A1").Value = ObjPtr(ribbon) 'Estoca para restaurar caso a variavel cpapRibbon seja perdida devido a problemas durante a execucao.
End Sub

'Callback for cpapTab getLabel
Sub getLabelTab(control As IRibbonControl, ByRef returnedVal)
'    returnedVal = "Home" & String(275 - 5, " ")
'    returnedVal = "Inicio" & String(275 - 6, " ")

'    Dim WbM|fffd|dAtivo As String
'    Dim lModSpc As Long
'    On Error Resume Next
'    WbM|fffd|dAtivo = Workbooks("cpap_ex8.mac").Sheets(1).Range("WbM|fffd|dAtivo").Value
'    On Error GoTo 0
'    lModSpc = 50
'    If WbM|fffd|dAtivo = "cpap-avu.mac" Then lModSpc = 50
'    If WbM|fffd|dAtivo = "cpap-jap.pla" Then lModSpc = 50
'    If WbM|fffd|dAtivo = "cpap-ctv.mac" Then lModSpc = 50
'    If WbM|fffd|dAtivo = "cpap-mp.mac" Then lModSpc = 50
'    If WbM|fffd|dAtivo = "cpap-car.mac" Then lModSpc = 50
'    returnedVal = "Menus de Comando" & String(lModSpc, " ") & "Comandos R|fffd|pidos"
    If MenuCtrlCount <> CommandBars.ActiveMenuBar.Controls.Count Then Exit Sub 'No 2013 de repente a barra de menu ativa nao e a ecoada. Talvez seja necesario mais criterios para detectar diferencas.

    If menuSepFerRap = 0 Then
        returnedVal = "Comandos:"
    Else
        returnedVal = "Comandos em Menus:"
        For i = 1 To menuSepFerRap
            j = j + Len(CommandBars.ActiveMenuBar.Controls(i).Caption) + 2
        Next
        '        j = j + 10
        If j - Len(returnedVal) < 10 Then j = Len(returnedVal) + 10
        returnedVal = returnedVal & String(j - Len(returnedVal), " ") & "Comandos R|fffd|pidos:"
    End If

    returnedVal = returnedVal & String(275 - Len(returnedVal), " ")
End Sub
'Callback for cpapGroup getLabel
Sub getLabelGroup(control As IRibbonControl, ByRef returnedVal)
    If Not ActiveWindow Is Nothing Then returnedVal = ActiveWindow.Caption
    If InStr(1, returnedVal, "Atualiza|fffd||fffd|es") > 0 Then returnedVal = "M|fffd|dulo de Atualiza|fffd||fffd|es"
    If InStr(1, returnedVal, "Planos") > 0 Then returnedVal = "M|fffd|dulo de Planos de Pagamentos"
    If InStr(1, returnedVal, "Emiss|fffd|o de Contratos") > 0 Then returnedVal = "M|fffd|dulo de Emiss|fffd|o de Contratos"
    If InStr(1, returnedVal, "Acompanhamentos") > 0 Then returnedVal = "M|fffd|dulo de Acompanhamentos de Contrato"
    If InStr(1, returnedVal, "A Receber") > 0 Then returnedVal = "M|fffd|dulo de Contas A Receber"
End Sub


'Callback for cpapBut1 getLabel
Sub getLabelBut(control As IRibbonControl, ByRef returnedVal)
    If Not getMenuCtrlIdx(control) Then Exit Sub

    If CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Type = msoControlButton Then
        'returnedVal = CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Caption
        'If InStr(1, returnedVal, "  ") > 0 Then returnedVal = Left(returnedVal, InStr(1, returnedVal, "  ") - 1) 'Remove a dica da tecla de atalho
    Else
        returnedVal = CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Caption
        If Len(returnedVal) < 2 Then returnedVal = ""
    End If
End Sub

'Callback for cpapBut1 getImage
Sub getImageBut(control As IRibbonControl, ByRef returnedVal)
    Dim retVal As String
    If Not getMenuCtrlIdx(control) Then Exit Sub

    'BotaoMenu
    If CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Type = msoControlPopup Then
        Select Case Replace(CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Caption, "&", "")
            '        Case "Arquivo": retVal = "MessageNext"  '"BrowseNext" '"ShowFormRegionPage"
            '        Case "Inclus|fffd|es": retVal = "MessageNext"    ' "MessageNext" '"ReadingViewAllowTyping"
            '        Case "Atualiza|fffd||fffd|es": retVal = "MessageNext"    ' "OutlineMoveDown" ' "FileUpdate"
            '        Case "Impress|fffd|o": retVal = "MessageNext"    '"OutlineExpandAll" '"FilePrint"
            '        Case "Janela": retVal = "MessageNext"  '"_3DPerspectiveDecrease" '"CreateFormBlankForm"
            '        Case "Ajuda": retVal = "MessageNext"  '"Help"

            '        Case "Formatar": retVal = "MessageNext"    '"CreateFormBlankForm"
            '        Case "Modelos": retVal = "MessageNext"  '"DocumentPanelTemplate"

        Case "|fffd|"
            menuSepFerRap = MenuCtrlIdx
            Exit Sub    'Sem icone, fica como separador   'retVal = "HappyFace"    ' "DiagramReverseClassic"
        Case "|fffd|"
            returnedVal = "MacroPlay"    '"DiagramReverseClassic"
            menuSepFerRap = MenuCtrlIdx
            Exit Sub

        Case ""
            Exit Sub    'Sem caption e sem icone, fica como espaco

        Case Else
            retVal = "AppointmentColor" & MenuCtrlIdx - 1    '"MessageNext"
        End Select

        'Se o menu tiver onaction definido para agir como botao, colocar icone de leve botao
        On Error Resume Next
        Dim sOnAction As String
        sOnAction = CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).OnAction
        If Len(sOnAction) > 2 Then retVal = "ObjectEffectSoftEdgesGallery"  'BevelShapeGallery TableEffectsCellBevelGallery
        On Error GoTo 0
    End If

    'BotaoBotao
    If CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Type = msoControlButton Then
        'FaceId Buit-in
        Select Case CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).FaceId
        Case "23": retVal = "FileOpen"
        Case "3": retVal = "FileSave"
        Case "128": retVal = "Undo"
        Case "2521": retVal = "FilePrintQuick"
        Case "109": retVal = "FilePrintPreview"

        Case "296": retVal = "TableRowsInsertBelowExcel"
        Case "293": retVal = "TableRowsDeleteExcel"

        Case "989": retVal = "ViewGridlinesToggleExcel"

        Case "1695": retVal = "VisualBasic"     'Configurar Relat|fffd|rio
        Case "928": retVal = "SortDialogClassic"      'Ordenar
        Case "443": retVal = "FreezePanes"     'Paineis

        Case "264": retVal = "Lock"     'Desproteger Planilha
        Case "263": retVal = "FileSaveAsExcelXlsx"     'Editar no Excel

        Case Else
            retVal = "ObjectEffectSoftEdgesGallery"
        End Select

        'FaceId custom, ver ainda se
        Dim DirP As String
        DirP = ThisWorkbook.Path
        If Len(CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Tag) > 2 Then
            Select Case CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Tag
            Case "&AcionEnter": retVal = "AcionEnter.png"
            Case "&AtuNormal": retVal = "AtuNormal.png"
            Case "&Calcular": retVal = "Calcular.png"
            Case "&ColarLinhas": retVal = "ColarLinhas.png"
            Case "&CopiarLinhas": retVal = "CopiarLinhas.png"
            Case "&CortarLinhas": retVal = "CortarLinhas.png"
            Case "&Equival": retVal = "Equival.png"
            Case "&Excluir": retVal = "Excluir.png"
            Case "&Implem": retVal = "Implem.png"
            Case "&Mover": retVal = "Mover.png"
            Case "&M|fffd|dAco": retVal = "ModAco.png"
            Case "&M|fffd|dAnt": retVal = "ModAnt.png"
            Case "&M|fffd|dAtu": retVal = "ModAtu.png"
            Case "&M|fffd|dCaR": retVal = "ModCaR.png"
            Case "&M|fffd|dPlan": retVal = "ModPlan.png"
            Case "&Ocultar": retVal = "Ocultar.png"
            Case "&Sair": retVal = "Sair.png"
            Case "&SalvarComo": retVal = "SalvarComo.png"
            End Select
        End If
    End If

    On Error Resume Next
    If LCase(Right(retVal, 4)) = ".png" Then
        Set returnedVal = LoadPictureGDI(DirP & "\" & retVal)
    Else
        returnedVal = retVal
    End If
End Sub

'Callback for cpapBut1 getSize
Sub getSizeBut(control As IRibbonControl, ByRef returnedVal)
    If Not getMenuCtrlIdx(control) Then Exit Sub

    If CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Type = msoControlButton Then
        returnedVal = MenuCtrlIdx < 25
    Else
        returnedVal = True
    End If
End Sub

'Callback for cpapBut1 getVisible
Sub getVisibleBut(control As IRibbonControl, ByRef returnedVal)
    getMenuCtrlIdx control

    returnedVal = MenuCtrlIdx <= MenuCtrlCount
End Sub

'Callback for cpapBut1 getEnabled
Sub getEnabledBut(control As IRibbonControl, ByRef returnedVal)
    If Not getMenuCtrlIdx(control) Then Exit Sub

    If MenuCtrlIdx <= MenuCtrlCount Then
        returnedVal = CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Enabled
    End If
End Sub

'Callback for cpapBut1 getScreentip
Sub getScreentipBut(control As IRibbonControl, ByRef returnedVal)
    If Not getMenuCtrlIdx(control) Then Exit Sub

    returnedVal = CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx).Caption
    If returnedVal = "|fffd|" Then returnedVal = "Exibir Ferramntas R|fffd|pidas"
End Sub

'Callback for cpapBut1 onAction
Sub onActionBut(control As IRibbonControl)
    If Not getMenuCtrlIdx(control) Then Exit Sub

    'ExecMenuBarCtrl
    Application.OnTime Now, "ExecMenuBarCtrl"
End Sub

'Callback for backstage.onShow
Sub onShowBackstage(contextObject As Object)
 'Simula um desabilitar
 'cpapRibbon.ActivateTab "cpapTab" 'Nao funcionou, talvez porque Backstage nao seja um Tab da Ribbon
   Application.SendKeys "{ESC}" 'Para funcionar foi necessario deixar pelo menos um bot visivel e deixei o FileExit
End Sub

Attribute VB_Name = "Mod2ExecMenu"
Option Explicit
Dim PopMenuBar6 As Office.CommandBar

Sub ExecMenuBarCtrl()
    Dim MenuBarCtrl As Office.CommandBarControl
    Dim bHasOnAction As Boolean

    On Error Resume Next
    Set MenuBarCtrl = Application.CommandBars.ActiveMenuBar.Controls(MenuCtrlIdx)
    If Err.Number <> 0 Then Exit Sub    'Clicks rapidos antes de recompor a Ribbon pode gerar erro

    bHasOnAction = MenuBarCtrl.OnAction <> ""
    Application.CommandBars("PopMenuBar6").Delete
    '    On Error GoTo 0

    If bHasOnAction Then
        'MenuBarCtrl.Execute 'nao funciona
        'Application.Run MenuBarCtrl.OnAction 'Funciona, mas trava a ribbon
        Application.OnTime Now, MenuBarCtrl.OnAction
    Else
        If MenuBarCtrl.Type = msoControlPopup Then
            Dim Ctrl As Office.CommandBarControl
            Dim CtrlC As Office.CommandBarControl
            Set PopMenuBar6 = Application.CommandBars.Add(Name:="PopMenuBar6", Position:=msoBarPopup, Temporary:=True)
            For Each Ctrl In MenuBarCtrl.Controls
                Set CtrlC = Ctrl.Copy(Bar:=PopMenuBar6)
                CtrlC.BeginGroup = Ctrl.BeginGroup
            Next
            PopMenuBar6.ShowPopup
        End If
    End If
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub CloseMe()
    Me.Close
End Sub
Attribute VB_Name = "modLoadPictureGDI"
'This module provides a LoadPictureGDI function, which can
'be used instead of VBA's LoadPicture, to load a wide variety
'of image types from disk - including png.
'
'The png format is used in Office 2007 to provide images that
'include an alpha channel for each pixel's transparency
'
'Author:    Stephen Bullen
'Date:      31 October, 2006
'Email:     stephen@oaltd.co.uk

Option Explicit

'Declare a UDT to store a GUID for the IPicture OLE Interface
Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type

'Declare a UDT to store the bitmap information
Private Type PICTDESC
    Size As Long
Type As Long
    hPic As Long
    hPal As Long
End Type

'Declare a UDT to store the GDI+ Startup information
Private Type GdiplusStartupInput
    GdiplusVersion As Long
    DebugEventCallback As Long
    SuppressBackgroundThread As Long
    SuppressExternalCodecs As Long
End Type

'Windows API calls into the GDI+ library
Private Declare Function GdiplusStartup Lib "GDIPlus" (token As Long, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As Long = 0) As Long
Private Declare Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As Long, bitmap As Long) As Long
Private Declare Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As Long, hbmReturn As Long, ByVal background As Long) As Long
Private Declare Function GdipDisposeImage Lib "GDIPlus" (ByVal image As Long) As Long
Private Declare Function GdiplusShutdown Lib "GDIPlus" (ByVal token As Long) As Long
Private Declare Function OleCreatePictureIndirect Lib "olepro32.dll" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long


' Procedure:    LoadPictureGDI
' Purpose:      Loads an image using GDI+
' Returns:      The image as an IPicture Object
Public Function LoadPictureGDI(ByVal sFilename As String) As IPicture

    Dim uGdiInput As GdiplusStartupInput
    Dim hGdiPlus As Long
    Dim lResult As Long
    Dim hGdiImage As Long
    Dim hBitmap As Long

    'Initialize GDI+
    uGdiInput.GdiplusVersion = 1
    lResult = GdiplusStartup(hGdiPlus, uGdiInput)

    If lResult = 0 Then

        'Load the image
        lResult = GdipCreateBitmapFromFile(StrPtr(sFilename), hGdiImage)

        If lResult = 0 Then

            'Create a bitmap handle from the GDI image
            lResult = GdipCreateHBITMAPFromBitmap(hGdiImage, hBitmap, 0)

            'Create the IPicture object from the bitmap handle
            Set LoadPictureGDI = CreateIPicture(hBitmap)

            'Tidy up
            GdipDisposeImage hGdiImage
        End If

        'Shutdown GDI+
        GdiplusShutdown hGdiPlus
    End If

End Function


' Procedure:    CreateIPicture
' Purpose:      Converts a image handle into an IPicture object.
' Returns:      The IPicture object
Private Function CreateIPicture(ByVal hPic As Long) As IPicture

    Dim lResult As Long, uPicInfo As PICTDESC, IID_IDispatch As GUID, IPic As IPicture

    'OLE Picture types
    Const PICTYPE_BITMAP = 1

    ' Create the Interface GUID (for the IPicture interface)
    With IID_IDispatch
        .Data1 = &H7BF80980
        .Data2 = &HBF32
        .Data3 = &H101A
        .Data4(0) = &H8B
        .Data4(1) = &HBB
        .Data4(2) = &H0
        .Data4(3) = &HAA
        .Data4(4) = &H0
        .Data4(5) = &H30
        .Data4(6) = &HC
        .Data4(7) = &HAB
    End With

    ' Fill uPicInfo with necessary parts.
    With uPicInfo
        .Size = Len(uPicInfo)
        .Type = PICTYPE_BITMAP
        .hPic = hPic
        .hPal = 0
    End With

    ' Create the Picture object.
    lResult = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, IPic)

    ' Return the new Picture object.
    Set CreateIPicture = IPic

End Function


' InQuest injected base64 decoded content
' Z0O*b

INQUEST-PP=macro
