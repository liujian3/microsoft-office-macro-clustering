Attribute VB_Name = "CountForm"
Attribute VB_Base = "0{7B62BA9D-2DC4-458B-AFF4-C1BC42EFE482}{F4744E91-DE7B-454B-B726-A1AF54AB1C7D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ClearButton_Click()
  NoHighlight (1)
End Sub

Private Sub CloseButton_Click()
  CountForm.hide
End Sub

Private Sub GoToButton_Click()
  gotoNextWord (1)
End Sub

Private Sub HighlightButton_Click()
  HighlightWords (1)
End Sub
Attribute VB_Name = "DStats"
Option Explicit
Dim indexHold As Long
Dim pNoChange As Boolean
Dim pSize As Long
Dim pText(4) As String
Dim inlineCount As Long
Dim floatCount As Long
Dim txtboxCount As Long
Dim tBoxCount As Long
Dim picCount As Long
Dim vPoints As Single
Dim hPoints As Single

Private Sub setcounts() ' test routine using inbuilt dialog. not normally executed
Dim wctemp As Dialog
Set wctemp = Dialogs(wdDialogToolsWordCount)
    wctemp.Update
    wctemp.Show
    wctemp.Execute
End Sub

Sub GO_DOCSTATS()
Dim DStats As String
Dim s As String
Dim p As String
Dim l As Long
Dim wCount As Long
Dim sCount As Long
Dim versionNo As Long
Dim wrdNo As Long
Dim k As Long
Dim j As Long
Dim wrdVer()
  wrdVer = Array("< 2002", "2002", "2003", "2007", "2008", "2010", "2013", "2016", "????")
  With DocStatsForm
    .Top = 0
    .Left = 0
    .Show
  End With
  Call GiveScreenPoints(hPoints, vPoints)
  With DocStatsForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hPoints - .Width - 6
    .VersionLabel.Caption = ""
    .StatsLabelA.Caption = ""
    .StatsLabelB.Caption = ""
    .Mercury.Visible = False
    On Error Resume Next
    DStats = ""
    DStats = ActiveDocument.Path & "\" & ActiveDocument.Name
    l = 0
    l = FileLen(DStats) / 1000
       
    pSize = Section_Papersize
    set_Optionbutton (pSize)
  
    On Error GoTo 0
    .Show
    DoEvents
    .OrientationText = Get_OrientationText
    If Len(DStats) < 80 Then DStats = DStats & vbCr
    .FileLabel.Caption = DStats & vbCr & "File size " & Str(l) & " KBytes"
    With ActiveDocument
      versionNo = 8
      On Error Resume Next ' 2007 does not have compatibilityMode
      versionNo = ActiveDocument.CompatibilityMode - 9
      On Error GoTo 0
      wrdNo = Int(Val(Application.Version)) - 9
      If wrdNo < 0 Or wrdNo > 7 Then wrdNo = 0
  
      s = get_LastSaved
      p = get_LastPrinted
 
      On Error GoTo 0
       
      DStats = "Created in Word" & wrdVer(versionNo) & _
          "  " & .BuiltInDocumentProperties("Creation date").Value & "      " & s
      If wrdNo <> versionNo Then DStats = DStats & vbCrLf & "Will be edited in compatibility mode"
      DStats = DStats & vbCrLf & p
      DStats = DStats & _
          vbCrLf & "Original author: " & .BuiltInDocumentProperties(wdPropertyAuthor).Value & _
          "      Last author: " & .BuiltInDocumentProperties(wdPropertyLastAuthor).Value
    
    End With
    .VersionLabel.Caption = DStats
    DoEvents
  End With
  
  CountAllShapes
  
  With ActiveDocument
    sCount = inShapeCount
    wCount = .ComputeStatistics(Statistic:=wdStatisticWords, includefootnotesandendnotes:=True)
    DStats = ""
    DStats = DStats & wCount & "  Words,  " & sCount & " words in shapes"
    DStats = DStats & vbCr & get_pageNo & "  Pages"
    DStats = DStats & vbCr & _
        ActiveDocument.ComputeStatistics(Statistic:=wdStatisticParagraphs, includefootnotesandendnotes:=True) & _
        "  Paragraphs"
    DStats = DStats & vbCr & cCount(4) & "  Sentences"
    DStats = DStats & vbCr & .Sections.Count & "  Sections"
    DStats = DStats & vbCr & .Footnotes.Count & "  Footnotes"
    DStats = DStats & vbCr & .Endnotes.Count & "  Endnotes"
    DStats = DStats & vbCr & countHyperlinks & "  Hyperlinks"
    DStats = DStats & vbCr & floatCount & "  Floating shapes"
    DStats = DStats & vbCr & inlineCount + txtboxCount & "  Inline shapes includes " & picCount & "  pictures"
    DStats = DStats & vbCr & cCount(1) & "  Tables"
    DStats = DStats & vbCr & .Bibliography.Sources.Count & "  Bibliography sources"
    DStats = DStats & vbCr & cCount(6) & "  Revisions (Track Changes)"
    DocStatsForm.StatsLabelA.Caption = DStats
    DoEvents
    DStats = ""
        DStats = DStats & _
        ActiveDocument.ComputeStatistics(Statistic:=wdStatisticCharacters, includefootnotesandendnotes:=True) & _
        "  Characters"
    k = get_BuiltinStyleCount
    DStats = DStats & vbCr & k & "  Builtin & hidden,  " & .Styles.Count - k & "  User Styles"
    DStats = DStats & vbCr & tBoxCount & "  Text boxes"
    DStats = DStats & vbCr & cCount(2) & "  Comments"
    DStats = DStats & vbCr & cCount(3) & "  Bookmarks"
    DStats = DStats & vbCr & countFields & "  Fields"
    DStats = DStats & vbCr & .Lists.Count & "  Lists"
    DStats = DStats & vbCr & .ListParagraphs.Count & "  List Paragraphs"
    DStats = DStats & vbCr & .ListTemplates.Count & "  List Templates"
    DStats = DStats & vbCr & .TablesOfContents.Count & "  TOCs"
    DStats = DStats & vbCr & .TablesOfFigures.Count & "  Figure/Table TOCs"
    DStats = DStats & vbCr & cCount(5) & "  Frames"
    DStats = DStats & vbCr & .Indexes.Count & "  Indexes"
    DStats = DStats & vbCr & .Range.ContentControls.Count & "  Content Controls"
  
    DocStatsForm.StatsLabelB.Caption = DStats
    
    With DocStatsForm.DocInspectListbox
      .Clear
      .ColumnCount = 1
      .ColumnHeads = False
      .ColumnWidths = "650"
      s = DocInspect
      Do
        k = InStr(1, s, vbCrLf)
        j = InStr(1, s, Chr(10))
        If j < k Then k = j
        DocStatsForm.DocInspectListbox.AddItem Mid(s, 1, k - 1)
        If k = j Then
         s = Mid(s, k + 1)
        Else
         s = Mid(s, k + 2)
        End If
      Loop Until Len(s) < 3
    End With
  End With
 
End Sub

Sub showDocumentProperties(k As Long)
Dim s As String
  On Error Resume Next
  With PropertiesForm.PropertiesListbox
    .Clear
    .ColumnCount = 2
    .ColumnHeads = False
    .ColumnWidths = "136;250"
    PropertiesForm.Show
    For k = 1 To ActiveDocument.BuiltInDocumentProperties.Count
      .AddItem
      .List(k - 1, 0) = ActiveDocument.BuiltInDocumentProperties(k).Name
      .List(k - 1, 1) = ActiveDocument.BuiltInDocumentProperties(k).Value
    Next k
    .AddItem
    For k = 1 To ActiveDocument.CustomDocumentProperties.Count
       .AddItem
      .List(k - 1, 0) = ActiveDocument.CustomDocumentProperties(k).Name
      .List(k - 1, 1) = ActiveDocument.CustomDocumentProperties(k).Value
    Next k
    PropertiesForm.Show
  End With
End Sub

Function get_BuiltinStyleCount() As Long
Dim aStyle As Style
Dim k As Long
  k = 0
  For Each aStyle In ActiveDocument.Styles
    If aStyle.BuiltIn Then k = k + 1
  Next aStyle
  get_BuiltinStyleCount = k
End Function
Function get_LastPrinted() As String
Dim s
   On Error GoTo errS
   s = "Last printed " & ActiveDocument.BuiltInDocumentProperties(wdPropertyTimeLastPrinted).Value
   get_LastPrinted = s
   Exit Function
errS:
   get_LastPrinted = "Document has not been printed"
End Function
Function get_LastSaved() As String
   On Error GoTo errS
   get_LastSaved = "Last saved " & ActiveDocument.BuiltInDocumentProperties(wdPropertyTimeLastSaved).Value
   Exit Function
errS:
   get_LastSaved = "Document has not been saved"
End Function
Function get_pageNo() As Long
Dim aRange As Range
  get_pageNo = ActiveDocument.ComputeStatistics(Statistic:=wdStatisticPages, includefootnotesandendnotes:=True)
End Function

Function Section_Papersize() As Long
Dim sct As Section
Dim sctS As Long
  sctS = ActiveDocument.Sections(1).PageSetup.PaperSize
  For Each sct In ActiveDocument.Sections
    If sct.PageSetup.PaperSize <> sctS Then
      Section_Papersize = 999999
      Exit Function
    End If
  Next sct
 Section_Papersize = sctS
End Function

Sub set_Optionbutton(pSize As Long)
  With DocStatsForm
    Select Case pSize
      Case wdPaperLetter
        indexHold = 0
        .PaperButton0.Value = True
      Case wdPaperLegal
        indexHold = 1
        .PaperButton1.Value = True
      Case wdPaperA4
        indexHold = 2
        .Paperbutton2.Value = True
      Case 999999
        indexHold = 4
        .PaperButton4.Value = True
      Case Else
        indexHold = 3
       .PaperButton3.Value = True
    End Select
    pText(0) = "Letter"
    pText(1) = "Legal"
    pText(2) = "A4"
    pText(3) = "Other"
    pText(4) = "Mixed"
 '   .Show
  End With
  
End Sub

Sub pSizeOpt(n As Long)
Dim pCode As Long
  With DocStatsForm
  If n = indexHold Then Exit Sub
  If n > 2 Then
    MsgBox "Invalid selection"
      Select Case indexHold
        Case 0
          .PaperButton0.Value = True
        Case 1
          .PaperButton1.Value = True
        Case 2
          .Paperbutton2.Value = True
        Case 3
          .PaperButton3.Value = True
        Case 4
          .PaperButton4.Value = True
      End Select
    Exit Sub
  Else
    If MsgBox("Do you want to change paper size in all sections from " & pText(indexHold) & " to " & pText(n), vbYesNo) = vbNo Then
      Select Case indexHold
        Case 0
          .PaperButton0.Value = True
        Case 1
          .PaperButton1.Value = True
        Case 2
          .Paperbutton2.Value = True
      End Select
      Exit Sub
    End If
  End If
    Select Case n
      Case 0
        pCode = wdPaperLetter
      Case 1
        pCode = wdPaperLegal
      Case 2
        pCode = wdPaperA4
      Case 3
        pCode = -1
      Case 4
        pCode = -1
    End Select
    indexHold = n
    Change_papersize (pCode)
  End With
End Sub

Sub Change_papersize(pCode As Long)
Dim sct As Section
Dim sCount As Long
Dim sOO() As Long
Dim k As Long
  If pCode < 0 Then Exit Sub
  ReDim sOO(ActiveDocument.Sections.Count)
  sCount = 0
  For Each sct In ActiveDocument.Sections
    sCount = sCount + 1
    With sct.PageSetup
      sOO(sCount) = .Orientation
      If .PaperSize <> pCode Then .PaperSize = pCode
    End With
  Next sct
  With ActiveDocument
   .PageSetup.PaperSize = pCode
    k = 0
    For Each sct In ActiveDocument.Sections
      k = k + 1
      If .Sections(k).PageSetup.Orientation <> sOO(k) Then .Sections(k).PageSetup.Orientation = sOO(k)
    Next sct
  End With
 
End Sub

Function Get_OrientationText() As String
Dim sct As Section
Dim sctO As Long
  On Error GoTo pErr
  sctO = ActiveDocument.Sections(1).PageSetup.Orientation
  For Each sct In ActiveDocument.Sections
    If sct.PageSetup.Orientation <> sctO Then
      Get_OrientationText = "Mixed portrait/landscape"
      Exit Function
    End If
  Next sct
  If sctO = wdOrientPortrait Then
    Get_OrientationText = "All portrait"
  Else
    Get_OrientationText = "All landscape"
  End If
  On Error GoTo 0
  Exit Function
pErr:
  MsgBox "Error in checking page orientation." & vbCrLf & "Close Find & Replace and run again"
  DocStatsForm.hide
End Function

Function inShapeCount() As Long
Dim i As Long
Dim cc As Long
Dim s2 As Shape
Dim r As Range
Dim txtFrame As TextFrame
  cc = 0
  With ActiveDocument
      If .Shapes.Count > 0 Then
      For Each s2 In .Shapes
 '       If s2.Type = msoTextEffect Then GoTo sErr ' this shape will give erroneous results
        'If Right(ActiveDocument.Name, 3) = "doc" And (s2.Type = msoCanvas Or s2.Type = msoLine) Then GoTo sErr
         If s2.Type = msoCanvas Or s2.Type = msoGroup Or s2.Type = msoLine Then GoTo sErr
         Set txtFrame = Nothing
         On Error Resume Next
         Set txtFrame = s2.TextFrame
         On Error GoTo 0
         If Not txtFrame Is Nothing Then
           If s2.TextFrame.HasText Then
            Set r = s2.TextFrame.TextRange
            cc = cc + r.words.Count - r.Paragraphs.Count
            ' could also use range.ComputeStatistics(Statistic:=wdStatisticWords)
          End If
       
        End If
sErr:
        On Error GoTo 0
      Next s2
    End If
  End With
  inShapeCount = cc
End Function

Private Sub CountAllShapes()
Dim aRange As Range
  inlineCount = 0
  floatCount = 0
  txtboxCount = 0
  tBoxCount = 0
  picCount = 0
  For Each aRange In ActiveDocument.StoryRanges
    If aRange.StoryType <> wdTextFrameStory Then
      floatCount = floatCount + countFloatingPics(aRange)
      inlineCount = inlineCount + countInlinePics(aRange)
      txtboxCount = txtboxCount + countInTextboxes(aRange)
    End If
  Next aRange
End Sub

Function countFloatingPics(aRange As Range) As Long
Dim j As Long
Dim k As Long
Dim m As Long
Dim n As Long
Dim pCount As Long
  pCount = 0
  j = aRange.ShapeRange.Count
  If j > 0 Then
   For k = 1 To j
     pCount = pCount + 1
     Select Case aRange.ShapeRange(k).Type
       Case msoPicture
         picCount = picCount + 1
       Case msoGroup ' count pictures in group
         m = aRange.ShapeRange(k).GroupItems.Count
         If m > 0 Then
           For n = 1 To m ' could have individual tests here *********
             If aRange.ShapeRange(k).GroupItems(n).Type = msoPicture Then picCount = picCount + 1
             pCount = pCount + 1
           Next n
         End If
       Case msoCanvas ' count pictures in canvas
         m = aRange.ShapeRange(k).CanvasItems.Count
         If m > 0 Then
           For n = 1 To m
             If aRange.ShapeRange(k).CanvasItems(n).Type = msoPicture Then picCount = picCount + 1
             pCount = pCount + 1
           Next n
         End If
       End Select
     Next k
   End If
  countFloatingPics = pCount
End Function

Function countInlinePics(aRange As Range) As Long
Dim j As Long
Dim k As Long
Dim m As Long
Dim n As Long
Dim pCount As Long
  pCount = 0
  j = aRange.InlineShapes.Count
  If j > 0 Then
    For k = 1 To j
       If aRange.InlineShapes(k).Type = wdInlineShapePicture Then picCount = picCount + 1
       pCount = pCount + 1
     Next k
   End If
  countInlinePics = pCount
End Function

Function countInTextboxes(aRange As Range) As Long
Dim shp As Shape
Dim pCount As Long
Dim m As Long
Dim n As Long
  pCount = 0
  For Each shp In aRange.ShapeRange
    If shp.Type = msoTextBox Then
      tBoxCount = tBoxCount + 1
      m = shp.TextFrame.TextRange.InlineShapes.Count
      If m > 0 Then
        For n = 1 To m
          If shp.TextFrame.TextRange.InlineShapes(n).Type = wdInlineShapePicture Then picCount = picCount + 1
          pCount = pCount + 1
        Next n
      End If
    End If
   Next shp
  countInTextboxes = pCount
End Function

Function countFields() As Long
Dim aStory As Range
Dim k As Long
  k = 0
  For Each aStory In ActiveDocument.StoryRanges
    k = k + aStory.Fields.Count
  Next aStory
  countFields = k
End Function

Function countHyperlinks() As Long
Dim aStory As Range
Dim k As Long
  k = 0
  For Each aStory In ActiveDocument.StoryRanges
    k = k + aStory.Hyperlinks.Count
  Next aStory
  countHyperlinks = k
End Function

Function cCount(n As Long) As Long
Dim k As Long
Dim j As Long
Dim aStory As Range
 On Error Resume Next
  k = 0
  If n = 2 Then k = ActiveDocument.Comments.Count
  For Each aStory In ActiveDocument.StoryRanges
   With aStory
    Select Case n
      Case 1
        j = .Tables.Count
  '    Case 2
  '      j = .Comments.Count
      Case 3
        j = .Bookmarks.Count
      Case 4
        j = .Sentences.Count
      Case 5
        j = .Frames.Count
      Case 6
        j = .Revisions.Count
    End Select
    k = k + j
   End With
  Next aStory
  cCount = k
  On Error GoTo 0
End Function

Sub WordFrequency(n As Long)
' WARNING. If the document has been created in Word 2003 and opened in compatibility mode
'          the statement For each aWord in sRange.words may give fewer words than actual
'          Convert the file to Word 2010 compatible file before running.
    Const maxWords = 9000          'Maximum unique words allowed
    Dim words(maxWords) As String  'Array to hold unique words
    Dim Freq(maxWords) As Integer  'Frequency counter for unique words
    Dim WordNum As Integer         'Number of unique words
    Dim ByFreq As Boolean          'Flag for sorting order
    Dim Excludes As String         'Words to be excluded
    Dim j As Integer, k As Integer
    Dim l As Integer, Temp As Integer
    Dim tWord As String            '
    Dim aWord As Range
    Dim tmpName As String
    Dim sRange As Range
    Dim aRange As Range
    Dim aShape As Shape
    Dim aFootnote As Footnote
    Dim aEndnote As Endnote
    Dim aSection As Section
    Dim aComment As Comment
    Dim aHF As HeaderFooter
    Dim thisDoc As String
    Dim totalWords As Long
    Dim s As String
    Dim st As String
    Dim ss() As String
    Dim tWidth As Single
    ' Set up excluded words
    If DocStatsForm.IgnoreMinorCheckbox Then
      ' string must start and end with a comma
      Excludes = ",the,a,of,is,to,for,by,be,and,are,in,as,it,on,or,an,at,i,if,"
    Else
      Excludes = ""
    End If
    
    ByFreq = DocStatsForm.ByFreqOption
    totalWords = 0
    Selection.HomeKey Unit:=wdStory
    System.Cursor = wdCursorWait
    WordNum = 0
    
    For Each sRange In ActiveDocument.StoryRanges
     
      Select Case sRange.StoryType
     ' 1=main, 2=footnotes, 3=endnotes, 4=comments, 5=textframes, 6=even headers
     ' 7=primary header, 8=even footer, 9=primary footer, 10=firstpage header, 11= first footer,
      Case 1, 10, 11
        If Not CheckWords(sRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
      Case 2 ' footnotes
          For Each aFootnote In ActiveDocument.Footnotes
            Set aRange = aFootnote.Range
            If Not CheckWords(aRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
          Next aFootnote
      Case 3  ' endnotes
          For Each aEndnote In ActiveDocument.Endnotes
            Set aRange = aEndnote.Range
            If Not CheckWords(aRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
          Next aEndnote
      Case 4  ' comments.  You may or may not wish to include these
          For Each aComment In ActiveDocument.Comments
            Set aRange = aComment.Range
            If Not CheckWords(aRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
          Next aComment
      Case 6, 7, 8, 9 ' headers and footers except for firstpage. Also check for textboxes in header/footer
        For Each aSection In ActiveDocument.Sections
          Set aRange = Nothing
          Select Case sRange.StoryType
            Case 6
              Set aHF = aSection.Headers(wdHeaderFooterEvenPages)
              If Not aHF.LinkToPrevious Then Set aRange = aHF.Range
             Case 7
               Set aHF = aSection.Headers(wdHeaderFooterPrimary)
               If Not aHF.LinkToPrevious Then Set aRange = aHF.Range
             Case 8
               Set aHF = aSection.Footers(wdHeaderFooterEvenPages)
               If Not aHF.LinkToPrevious Then Set aRange = aHF.Range
             Case 9
               Set aHF = aSection.Footers(wdHeaderFooterPrimary)
               If Not aHF.LinkToPrevious Then Set aRange = aHF.Range
           End Select
           If Not aRange Is Nothing Then
             If Not CheckWords(aRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
             ' check if there are any textboxes in header/footer
             If aHF.Shapes.Count > 0 Then
               For j = 1 To aHF.Shapes.Count
                 Set aShape = aHF.Shapes(j)
                 With aShape.TextFrame
                   If .HasText Then _
                    If Not CheckWords(.TextRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
                 End With
               Next j
             End If
           End If
      
        Next aSection
      Case 5
        For Each aShape In ActiveDocument.Range.ShapeRange
           With aShape.TextFrame
             If .HasText Then
               Set aRange = .TextRange
               If Not CheckWords(aRange, Excludes, words(), Freq(), WordNum, totalWords) Then GoTo TooMany
             End If
           End With
        Next aShape
      End Select
    Next sRange

    ' Now sort it into word order
     With DocStatsForm
      .Mercury.Visible = True
      .Mercury.Width = 0
      tWidth = .Thermometer.Width
    End With
    
    If ByFreq Then
    
        For j = 1 To WordNum - 1
          For k = j + 1 To WordNum
            If Freq(j) > Freq(k) Or (Freq(j) = Freq(k) And words(j) > words(k)) Then ' reverse freq order
       '     If Freq(j) < Freq(k) Or (Freq(j) = Freq(k) And words(j) > words(k)) Then
                Temp = Freq(k)
                Freq(k) = Freq(j)
                Freq(j) = Temp
                tWord = words(j)
                words(j) = words(k)
                words(k) = tWord
            End If
          Next k
          If j Mod 10 = 0 Then
            DocStatsForm.Mercury.Width = j / WordNum * tWidth
            DoEvents
           End If
        Next j
    Else ' not by freq ie by word
      For j = 1 To WordNum - 1
        k = j
        For l = j + 1 To WordNum
            If (Not ByFreq And words(l) < words(k)) _
              Or (ByFreq And (Freq(l) > Freq(k))) Then k = l
        Next l
        If k <> j Then
            tWord = words(j)
            words(j) = words(k)
            words(k) = tWord
            Temp = Freq(j)
            Freq(j) = Freq(k)
            Freq(k) = Temp
        End If
        If j Mod 10 = 0 Then
          DocStatsForm.Mercury.Width = j / WordNum * tWidth
          DoEvents
        End If
      Next j
    End If

    ' Now write out the results **************************
    DocStatsForm.Mercury.Visible = False
    
  If DocStatsForm.OutputToDocCheckbox.Value Then
    
    thisDoc = ActiveDocument.Name
    tmpName = ActiveDocument.AttachedTemplate.FullName
    Documents.Add Template:=tmpName, NewTemplate:=False
    
    If ActiveWindow.ActivePane.View.Type <> wdPrintView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    End If
          
    ActiveDocument.Range.Text = ""
          
    With ActiveDocument.Styles("Normal")
       With .ParagraphFormat
         .SpaceBefore = 0
         .SpaceAfter = 0
         .LineSpacingRule = wdLineSpaceSingle
       End With
       .NextParagraphStyle = "Normal"
       .NoSpaceBetweenParagraphsOfSameStyle = False
       .Font.Name = "Times New Roman"
       .Font.Size = 10
    End With
    
    System.Cursor = wdCursorNormal
    Selection.End = ActiveDocument.Range.Start
    
    Selection.TypeText "Word frequency count for document " & Chr(34) & thisDoc & Chr(34) & vbCrLf & vbCrLf
    
    Selection.TypeText Trim(Str(WordNum)) & " unique words"
    If DocStatsForm.IgnoreMinorCheckbox Then Selection.TypeText " excluding minor words and numbers"
    
    Selection.TypeText vbCrLf & Trim(Str(totalWords)) & " total words not including special characters and numbers" & vbCrLf
    
    If DocStatsForm.IgnoreMinorCheckbox Then
      Selection.TypeText "Excluded words:"
      ss() = Split(Excludes, ",")
      For j = 1 To UBound(ss)
        Selection.TypeText "  " & ss(j)
      Next j
    End If
    
    Selection.TypeText vbCrLf & vbCrLf
    
    Selection.PageSetup.TextColumns.SetCount numcolumns:=1
    
    Selection.InsertBreak Type:=wdSectionBreakContinuous
    
     With Selection.PageSetup.TextColumns
        .SetCount numcolumns:=5
        .EvenlySpaced = True
        .LineBetween = True
        .Width = CentimetersToPoints(2.8)
        .Spacing = CentimetersToPoints(0.4)
    End With
    With Selection.ParagraphFormat.TabStops
      .ClearAll
      .Add Position:=CentimetersToPoints(0.5), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
      .Add Position:=CentimetersToPoints(0.7), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
      .Add Position:=CentimetersToPoints(0.89), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
    End With
     
    With Selection
        For j = 1 To WordNum
            .TypeText Text:=Trim(Str(Freq(j))) _
              & vbTab & words(j) & vbCrLf
        Next j
    End With
    
    Selection.End = ActiveDocument.Range.Start
    Application.ActiveWindow.ScrollIntoView Selection.Range
    j = MsgBox("There were " & Trim(Str(WordNum)) & _
      " different words in document:" & vbCrLf & thisDoc & vbCrLf & vbCrLf & _
      "Results are stored in document:" & ActiveDocument.Name, vbOKOnly, "Finished")
    Documents(thisDoc).Activate
    Exit Sub
    
  Else ' output to form
    With CountForm.CountListbox
     .Clear
     .ColumnCount = 2
     .ColumnHeads = False
     .ColumnWidths = "26;108"

     For k = 1 To WordNum
     .AddItem ""
       .List(k - 1, 0) = Freq(k)
       .List(k - 1, 1) = words(k)
      Next k
       
      With CountForm
        .StartUpPosition = 0
        .Top = 0
        .Left = hPoints - .Width - 6
        .Show
      End With
  
    End With
    CountForm.wcountLabel.Caption = Trim(Str(WordNum)) & " unique words"
    Exit Sub
  End If
    
TooMany:
    System.Cursor = wdCursorNormal
    Call MsgBox("Error. Too large or damaged document", vbOKOnly)
End Sub

Sub HighlightWords(n As Long)
Dim strng As String
Dim sChar As String
Dim DefaultHighlight
Dim k As Long
  DefaultHighlight = Options.DefaultHighlightColorIndex
  Options.DefaultHighlightColorIndex = wdYellow
  k = CountForm.CountListbox.ListIndex
  If k < 0 Then
    MsgBox "No word selected"
    Exit Sub
  End If
  strng = Trim(CountForm.CountListbox.List(k, 1))
  If Len(strng) > 1 Then
    sChar = Left(strng, 1)
    strng = "(<[" & UCase(sChar) & LCase(sChar) & "]" & Mid(strng, 2) & ">)"
  Else
    strng = "(<[" & UCase(strng) & LCase(strng) & "]>)"
  End If
    With Selection.Find
        .ClearFormatting
        .Replacement.ClearFormatting
        .Replacement.Highlight = True
        .Text = strng
        .Replacement.Text = "\1"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = True
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
  Options.DefaultHighlightColorIndex = DefaultHighlight
End Sub
Sub NoHighlight(n As Long)
    With Selection.Find
        .ClearFormatting
        .Highlight = True
        .Replacement.ClearFormatting
        .Replacement.Highlight = False
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

End Sub

Function CheckWords(aRange As Range, Excludes As String, words() As String, _
         Freq() As Integer, WordNum As Integer, totalWords As Long) As Boolean
Dim SingleWord As String
Dim Found As Boolean
Dim j As Long
Dim aWord As Range
Dim wCount As Long
Dim wSize As Long
Dim chunk As Long
Dim tWidth As Single
  wSize = aRange.words.Count
  chunk = 1
  If wSize > 1000 Then chunk = 100
  If wSize > 10000 Then chunk = 1000
  If wSize > 50000 Then chunk = 5000
  With DocStatsForm
    .Mercury.Visible = True
    .Mercury.Width = 0
    tWidth = .Thermometer.Width
  End With
  wCount = -1
  For Each aWord In aRange.words
    wCount = wCount + 1
    If wCount Mod chunk = 0 Then
      DocStatsForm.Mercury.Width = wCount / wSize * tWidth
      DoEvents
  '    StatusBar = "Story" & Str(aRange.StoryType) & "  " & wCount & " of " & wSize & ", Unique: " & WordNum
    End If
    If wCount < -1 Then
      CheckWords = False
      MsgBox "Error in document. Possibly compatible mode error"
      Exit Function
    End If
    
    SingleWord = Trim(LCase(aWord))
    If SingleWord < "a" Or SingleWord > "z" Then
        SingleWord = ""
    Else
        totalWords = totalWords + 1
    End If
    If InStr(Excludes, "," & SingleWord & ",") Then
        SingleWord = ""
    End If
    If Len(SingleWord) > 0 Then
        Found = False
        For j = 1 To WordNum
            If words(j) = SingleWord Then
                Freq(j) = Freq(j) + 1
                Found = True
                Exit For
            End If
        Next j
        If Not Found Then
            WordNum = WordNum + 1
            words(WordNum) = SingleWord
            Freq(WordNum) = 1
        End If
        If WordNum > 8999 Then
            CheckWords = False
            Exit Function
        End If
    End If
  Next aWord
  CheckWords = True
End Function

Sub gotoNextWord(n As Long)
Dim strng As String
Dim sChar As String
Dim k As Long
  k = CountForm.CountListbox.ListIndex
  If k < 0 Then
    MsgBox "No word selected"
    Exit Sub
  End If
  strng = Trim(CountForm.CountListbox.List(k, 1))
  If Len(strng) > 1 Then
    sChar = Left(strng, 1)
    strng = "<[" & UCase(sChar) & LCase(sChar) & "]" & Mid(strng, 2) & ">"
  Else
    strng = "<[" & UCase(strng) & LCase(strng) & "]>"
  End If
      With Selection.Find
        .ClearFormatting
        .Replacement.ClearFormatting
        .Replacement.Highlight = False
        .Text = strng
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = True
    End With
    Selection.Find.Execute Replace:=wdReplaceNone
    ActiveWindow.LargeScroll up:=1
    ActiveWindow.ScrollIntoView Selection.Range, True
  
End Sub

Function DocInspect() As String
Dim docStatus As MsoDocInspectorStatus
Dim result As String
Dim s As String
Dim docI As DocumentInspector
  s = ""
  For Each docI In ActiveDocument.DocumentInspectors
    docI.Inspect docStatus, result
    s = s & docI.Description & vbCrLf & "  " & result & vbCrLf & vbCrLf
  Next docI
 DocInspect = Left(s, Len(s) - 1)
End Function
Attribute VB_Name = "DocStatsForm"
Attribute VB_Base = "0{7F6848F5-D380-4327-A689-D74148F0D6BE}{05B462FB-BCE2-400C-80F7-4434A6A6D66A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CancelButton_Click()
  DocStatsForm.hide
End Sub

Private Sub CommandButton1_Click()
  ListFontsInDoc (1)
End Sub

Private Sub GetCountButton_Click()
  WordFrequency (1)
End Sub

Private Sub PaperButton0_Click()
  pSizeOpt (0)
End Sub
Private Sub PaperButton1_Click()
  pSizeOpt (1)
End Sub

Private Sub PaperButton2_Click()
  pSizeOpt (2)
End Sub
Private Sub PaperButton3_Click()
  pSizeOpt (3)
End Sub
Private Sub PaperButton4_Click()
  pSizeOpt (4)
End Sub

Private Sub PropertiesButton_Click()
  showDocumentProperties (1)
End Sub
Attribute VB_Name = "FontForm"
Attribute VB_Base = "0{C9D2E1A0-6FE6-4F8B-A411-0C687A11ED38}{B6F3F735-3A14-4E09-9319-C2622934CFB9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub FontCancelButton_Click()
  FontForm.hide
End Sub

Private Sub FontHighlightButton_Click()
  HighlightFonts (1)
End Sub

Private Sub FontsListbox_Click()
  FontForm.ProgressLabel = ""
End Sub

Private Sub FontUnhighlightButton_Click()
  UnHighlightAll (1)
End Sub

Private Sub Label2_Click()

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "FontListModule"
Option Explicit

Public Sub ListFontsInDoc(n As Long)
  Dim rngStory As Word.Range
  Dim rngChar As Range
  Dim fldType As Long
  Dim fSize As Single
  Dim oShp As Word.Shape
  Dim FontName As String
  Dim lngIndex As Long
  Dim lngChar As Long
  Dim lngCharCount As Long
  Dim colFontsUsed As New Collection
  Dim k As Long
  With FontForm
    .FontsListbox.Clear
    .Show
  End With
  For Each rngStory In ActiveDocument.StoryRanges
    lngChar = 0
    lngCharCount = rngStory.Characters.Count
    Do
      For Each rngChar In rngStory.Characters
         lngChar = lngChar + 1
         fSize = rngChar.Font.Size
         FontName = rngChar.Font.Name & Str(fSize)
         If fSize = 9999999 Or rngChar.Font.Name = "" Then
           If rngChar.Fields.Count > 0 Then
             fldType = rngChar.Fields(1).Type
             FontName = FontName & " Field type" & Str(fldType)
           End If
         End If
         If lngChar Mod 1000 = 1 Then
           FontForm.ProgressLabel.Caption = "Evaluauting character " & lngChar & _
             " of " & lngCharCount & " characters in the story range"
             DoEvents
          End If
        Call AddToCollection(colFontsUsed, FontName)
      Next rngChar
       FontForm.ProgressLabel.Caption = ""
      'Evaluate shapes in headers and footers
      Select Case rngStory.StoryType
        Case 6, 7, 8, 9, 10, 11
          'No shape will throw an error that we handle and skip
          On Error GoTo Err_Handler
          If rngStory.ShapeRange.Count > 0 Then
            For Each oShp In rngStory.ShapeRange
              If oShp.TextFrame.HasText Then
                lngChar = 0
                lngCharCount = oShp.TextFrame.TextRange.Characters.Count
                For Each rngChar In oShp.TextFrame.TextRange.Characters
                  lngChar = lngChar + 1
                  fSize = rngChar.Font.Size
                  FontName = rngChar.Font.Name & Str(rngChar.Font.Size)
                  If fSize = 9999999 Or rngChar.Font.Name = "" Then
                    If rngChar.Fields.Count > 0 Then
                      fldType = rngChar.Fields(1).Type
                      FontName = FontName & " Field type" & Str(fldType)
                    End If
                  End If
                  Call AddToCollection(colFontsUsed, FontName)
                Next rngChar
              End If
            Next oShp
          End If
      End Select
SkipRange:
      On Error GoTo 0
      'Get next linked story (if any)
      Set rngStory = rngStory.NextStoryRange
    Loop Until rngStory Is Nothing
  Next rngStory
 
  With FontForm.FontsListbox
    .Clear
    .ColumnCount = 1
    .ColumnHeads = False
    .ColumnWidths = "200"
    For k = 1 To colFontsUsed.Count
      FontForm.FontsListbox.AddItem colFontsUsed(k)
    Next k
  End With
  On Error GoTo 0
Exit Sub
Err_Handler:
  Resume SkipRange
End Sub

Private Sub AddToCollection(cl As Collection, ItmStr As String)
Dim k As Long
  For k = 1 To cl.Count
    If cl(k) = ItmStr Then Exit Sub
    If ItmStr < cl(k) Then
      cl.Add Item:=ItmStr, Before:=k
      Exit Sub
    End If
  Next k
  cl.Add Item:=ItmStr
End Sub

Sub HighlightFonts(n As Long)
Dim fontColor As Long
Dim lngChar As Long
Dim lngCharCount As Long
Dim fnt As String
Dim FontName As String
Dim fldType As Long
Dim fSize As Single
Dim rngStory As Word.Range
Dim rngChar As Range
Dim oShp As Word.Shape
Dim j As Long
Dim k As Long
  fontColor = wdRed
  With FontForm
    If .RedOption Then fontColor = wdPink
    If .YellowOption Then fontColor = wdYellow
    If .GreenOption Then fontColor = wdBrightGreen
    If .BlueOption Then fontColor = wdTurquoise
    If .NoneOption Then fontColor = wdAuto
  End With
  With FontForm.FontsListbox
    j = .ListIndex
    If j = -1 Then
      MsgBox "No font chosen to highlight"
      Exit Sub
    End If
    fnt = .List(j)
  End With

  For Each rngStory In ActiveDocument.StoryRanges
    lngChar = 0
    lngCharCount = rngStory.Characters.Count
    Do
      For Each rngChar In rngStory.Characters
        lngChar = lngChar + 1
        fSize = rngChar.Font.Size
         FontName = rngChar.Font.Name & Str(fSize)
         If fSize = 9999999 Or rngChar.Font.Name = "" Then
           If rngChar.Fields.Count > 0 Then
             fldType = rngChar.Fields(1).Type
             FontName = FontName & " Field type" & Str(fldType)
           End If
         End If
        If lngChar Mod 1000 = 1 Then
            FontForm.ProgressLabel.Caption = "Character " & lngChar & _
             " of " & lngCharCount & " characters in the story range"
             DoEvents
        End If
        
        If FontName = fnt Then
          rngChar.HighlightColorIndex = fontColor
        End If
      Next rngChar
     
      Select Case rngStory.StoryType
        Case 6, 7, 8, 9, 10, 11
          'No shape will throw an error that we handle and skip
          On Error GoTo Err_Handler
          If rngStory.ShapeRange.Count > 0 Then
            For Each oShp In rngStory.ShapeRange
              If oShp.TextFrame.HasText Then
                lngChar = 0
                lngCharCount = oShp.TextFrame.TextRange.Characters.Count
                For Each rngChar In oShp.TextFrame.TextRange.Characters
                  lngChar = lngChar + 1
                  fSize = rngChar.Font.Size
                  FontName = rngChar.Font.Name & Str(fSize)
                  If fSize = 9999999 Or rngChar.Font.Name = "" Then
                    If rngChar.Fields.Count > 0 Then
                      fldType = rngChar.Fields(1).Type
                      FontName = FontName & " Field type" & Str(fldType)
                    End If
                  End If
                  If FontName = fnt Then
                  'If rngChar.Font.Name = fnt And rngChar.Font.Size = fSize Then
                    rngChar.HighlightColorIndex = fontColor
                  End If
                Next rngChar
              End If
            Next oShp
          End If
      End Select
SkipRange:
      On Error GoTo 0
      'Get next linked story (if any)
      Set rngStory = rngStory.NextStoryRange
    Loop Until rngStory Is Nothing
  Next rngStory
  FontForm.ProgressLabel.Caption = "Text with selected font highlighted"
  Exit Sub
Err_Handler:
  Resume SkipRange
End Sub

Sub UnHighlightAll(n As Long)
Dim rngStory As Range
Dim aShape As Shape
Dim aRange As Range
Dim txtFrame As TextFrame
  For Each rngStory In ActiveDocument.StoryRanges
    rngStory.HighlightColorIndex = wdAuto
    Select Case rngStory.StoryType
      Case 6, 7, 8, 9, 10, 11
        For Each aShape In rngStory.ShapeRange
          Set txtFrame = aShape.TextFrame
          If Not txtFrame Is Nothing Then
            If txtFrame.HasText Then
              Set aRange = txtFrame.TextRange
              aRange.HighlightColorIndex = wdAuto
            End If
          End If
        Next aShape
    End Select
  Next rngStory
End Sub




Attribute VB_Name = "PropertiesForm"
Attribute VB_Base = "0{71EE811B-0874-4162-BD71-669518B56144}{B67D8E34-A4E5-42BB-BC1D-32FF567BF90D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub PropertiesCancelButton_Click()
  PropertiesForm.hide
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilityPrograms"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Private Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TWIPSPERINCH / 20 / XPixelsPerInch
    y = y * TWIPSPERINCH / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub
 
 



' InQuest injected base64 decoded content
' jZ N
' j+t*.

INQUEST-PP=macro
