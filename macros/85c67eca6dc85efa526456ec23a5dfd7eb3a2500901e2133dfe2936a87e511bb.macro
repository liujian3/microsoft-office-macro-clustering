Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim lastcell As Range
Dim farbe As Integer

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    
    'Vorhandene Symbolleiste l|fffd|schen
    On Error Resume Next
    Application.CommandBars("mySPSL").Delete
    On Error GoTo 0

End Sub

Private Sub Workbook_Open()
    
    'Eventuell noch vorhandene Symbolleiste l|fffd|schen
    On Error Resume Next
    Application.CommandBars("mySPSL").Delete
    On Error GoTo 0
    
    'Eine neue Symbolleiste erzeugen (ACHTUNG: Application.xxx.xxx (Application MUSS geschrieben werden!))
    Dim CB As CommandBar
    Set CB = Application.CommandBars.Add(Name:="mySPSL", Position:=msoBarRight, MenuBar:=False, Temporary:=True)
    
    'Einer bestimmten Symbolleiste eine neue Schaltfl|fffd|che hinzuf|fffd|gen (die Symbolleiste MUSS vorhanden sein!!!)
    Dim CBB As CommandBarButton
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = False
            .FaceId = 1018
            .Style = msoButtonIcon
            .OnAction = "infocode_work"                         'legt den Namen des Visual Basic-Makros fest.
            .Caption = "Manuelles Pr|fffd|fen"                       'legt den Beschriftungstext fest.
    End With
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = False
            .FaceId = 984
            .Style = msoButtonIcon
            .OnAction = "help_me"                               'legt den Namen des Visual Basic-Makros fest.
            .Caption = "Hilfe und Kontakt"                      'legt den Beschriftungstext fest.
    End With
'***************************

    'Passwortabfrage f|fffd|r Administrator-Modus
    Dim myPasswort As String
    Dim Inputbox_Passwort As String
    
    Inputbox_Passwort = InputBox("Wollen sie die SPSL als Administrator bearbeiten?" & Chr(13) & Chr(10) & _
                                "" & Chr(13) & Chr(10) & "Bitte geben sie Ihr Administrator-Passwort ein!")
    
    myPasswort = "nimda13"

    If Inputbox_Passwort = myPasswort Then

'***************************
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = False
            .FaceId = 449
            .Style = msoButtonIcon
            .OnAction = "infocode_start"                        'legt den Namen des Visual Basic-Makros fest.
            .Caption = "Infocode Liste importieren"             'legt den Beschriftungstext fest.
    End With
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = True
            .FaceId = 134
            .Style = msoButtonIcon
            .OnAction = "show_infocode_liste"                   'legt den Namen des Visual Basic-Makros fest.
            .Caption = "ICL einblenden"                         'legt den Beschriftungstext fest.
    End With
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = False
            .FaceId = 135
            .Style = msoButtonIcon
            .OnAction = "hide_infocode_liste"                   'legt den Namen des Visual Basic-Makros fest.
            .Caption = "ICL ausblenden"                         'legt den Beschriftungstext fest.
    End With
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = True
            .FaceId = 359
            .Style = msoButtonIcon
            .OnAction = "show_log_sheet"                        'legt den Namen des Visual Basic-Makros fest.
            .Caption = "LOG einblenden"                         'legt den Beschriftungstext fest.
    End With
    Set CBB = Application.CommandBars("mySPSL").Controls.Add(Type:=msoControlButton)
    With CBB
            .BeginGroup = False
            .FaceId = 360
            .Style = msoButtonIcon
            .OnAction = "hide_log_sheet"                        'legt den Namen des Visual Basic-Makros fest.
            .Caption = "LOG ausblenden"                         'legt den Beschriftungstext fest.
    End With
    
    End If
    'Symbolleiste sichtbar schalten (Erst nachdem die Buttons eingef|fffd|gt wurden, damit diese sofort sichtbar sind.)
    With CB
            .Visible = True
    End With

    Call hide_infocode_liste
    Call hide_log_sheet
    
End Sub

'Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
'
'    Call rechange_sheetname
'    Call infocode_work
'
'End Sub
'
'Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
'
''    On Error Resume Next
''
''    lastcell.Interior.ColorIndex = farbe
''    farbe = Target.Interior.ColorIndex
''    Target.Interior.ColorIndex = 6
''    Set lastcell = Target
'
'End Sub
Attribute VB_Name = "Modul1"
Public Const sheetname_prefix As String = "mySPSL_"

Dim sheetname As String
Dim sheetlength As Long

Public Sub infocode_start()

    If MsgBox("" & Chr(13) & Chr(10) & _
              "Sollen die folgenden Bearbeitungen der SPSL durchgef|fffd|hrt werden?           " & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "1.  Umbenennen der SPSL (Tabellenblatt 1)" & Chr(13) & Chr(10) & _
              "2.  L|fffd|schen einer eventuell vorhandenen InfoCode-Liste (Tabellenblatt 2)                " & Chr(13) & Chr(10) & _
              "3.  Importieren der InfoCode-Liste (Tabellenblatt 2)" & Chr(13) & Chr(10) & _
              "4.  Umbenennen der InfoCode-Liste (Tabellenblatt 2)" & Chr(13) & Chr(10) & _
              "5.  Vorbereiten der InfoCode-Liste f|fffd|r die Benutzung" & Chr(13) & Chr(10) & _
              "6.  Ausblenden der InfoCode-Liste (Tabellenblatt 2)" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "", vbYesNo + vbQuestion) = vbYes Then

'              "xxx" & Chr(13) & Chr(10) & _
'              "xxx" & Chr(13) & Chr(10) & _
'              "xxx" & Chr(13) & Chr(10) & _
'              "xxx" & Chr(13) & Chr(10) & _

        Call create_log_sheet
        Call rename_sheet
        Call import_infocode_liste
        Call prepare_infocode_liste
        Call my_infocode_last_row
        Call hide_infocode_liste
    
    End If

End Sub

Public Sub rename_sheet()
    
    Application.EnableEvents = False
    
    'Selektieren des Quell-Tabellenblattes
    Sheets(1).Select
    
    'Sichern des Originalnamens in dem Log_Sheet
    Sheets("Log_Sheet").Cells(3, 3).Value = Sheets(1).Name
    
    'Umbenennen des selektierten Blattes/der SPSL
    sheetname = Sheets(1).Name
    If Left(sheetname, Len(sheetname_prefix)) = sheetname_prefix Then
        Exit Sub
    Else
        Sheets(1).Name = sheetname_prefix + sheetname
    End If
    
End Sub

Public Sub toggle_sheetname()
    
    'Selektieren des Quell-Tabellenblattes
    Sheets(1).Select
    
    'Umbenennen des selektierten Blattes/der SPSL
    sheetname = Sheets(1).Name
    If Left(sheetname, Len(sheetname_prefix)) = sheetname_prefix Then
        sheetlength = Len(sheetname) - Len(sheetname_prefix)
        sheetname = Right(sheetname, sheetlength)
        Sheets(1).Name = sheetname
    Else
        Sheets(1).Name = sheetname_prefix + sheetname
    End If
    
End Sub

Public Sub import_infocode_liste()

    Dim wkb As Workbook
    Dim ws As Worksheet
    Dim infocodelist_filepath As Variant
    Dim i As Integer
    
    '|fffd|berpr|fffd|fen ob die Tabelle schon vorhanden ist
        For Each ws In Worksheets
            If ws.Name = "InfoCode_Liste" Then
                Call show_infocode_liste
                Application.DisplayAlerts = False
                Sheets("InfoCode_Liste").Delete
                Application.DisplayAlerts = True
            End If
        Next ws
        
    'Pfad der Infocode-Liste |fffd|ber Dialogbox holen
    infocodelist_filepath = Application.GetOpenFilename("InfoCode_Liste (*.xls), *.xls")
    
    Application.EnableEvents = False
    
    'Erstes Arbeitsblatt importieren
    Set wbk = Workbooks.Open(infocodelist_filepath, 0, True)
        With ThisWorkbook
            'Worksheets(1).Copy after:=.Worksheets(.Worksheets.Count)
            Worksheets(1).Copy after:=.Worksheets(1)
        End With
    wbk.Close savechanges:=False
    
    'Umbenennen der importierten InfoCode_Liste
    Sheets(2).Name = "InfoCode_Liste"
    
    i = Sheets("Log_Sheet").Cells(1, 3).Value
    Sheets("Log_Sheet").Cells(1, 3).Value = i + 1
    
    Application.EnableEvents = True
    
End Sub

Public Sub prepare_infocode_liste()
    
    Application.EnableEvents = False
    
    'Selektieren des Quell-Tabellenblattes
    Sheets("InfoCode_Liste").Select
    
    'Enfernen nicht ben|fffd|tigter Spalten
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft

    Columns("E:E").Select
    Selection.Delete Shift:=xlToLeft

    Columns("F:V").Select
    Selection.Delete Shift:=xlToLeft

    'Anpassen der Spaltenbreite
    Columns("A:A").ColumnWidth = 10
    Columns("B:B").ColumnWidth = 14
    Columns("C:C").ColumnWidth = 14.5
    Columns("D:D").ColumnWidth = 16
    Columns("E:E").ColumnWidth = 90

End Sub

Public Sub hide_infocode_liste()
    
    On Error Resume Next
    
    '|fffd|berpr|fffd|fen ob die Tabelle schon vorhanden ist
    For Each ws In Worksheets
        If ws.Name = "InfoCode_Liste" Then
            Application.DisplayAlerts = False
            i = 1
            Application.DisplayAlerts = True
        End If
    Next ws
    
    If i = 1 Then
        'Selektieren des Quell-Tabellenblattes
        'Sheets("InfoCode_Liste").Select
    Else
        MsgBox ("Es ist keine InfoCode_Liste vorhanden"), vbOKOnly + vbCritical, "ACHTUNG"
    End If
    
    Dim wks As Worksheet
    
    For Each wks In ThisWorkbook.Worksheets
        If wks.Name = "InfoCode_Liste" Then
            wks.Visible = xlVeryHidden
        End If
    Next wks
    
End Sub

Public Sub show_infocode_liste()
    
    Dim wks As Worksheet
    Dim i As Integer
        
    For Each wks In ThisWorkbook.Worksheets
        If wks.Name = "InfoCode_Liste" Then
            wks.Visible = True
        End If
    Next wks
    
    '|fffd|berpr|fffd|fen ob die Tabelle schon vorhanden ist
    For Each ws In Worksheets
        If ws.Name = "InfoCode_Liste" Then
            Application.DisplayAlerts = False
            i = 1
            Application.DisplayAlerts = True
        End If
    Next ws
    
    If i = 1 Then
        'Selektieren des Quell-Tabellenblattes
        Sheets("InfoCode_Liste").Select
    Else
        MsgBox ("Es ist keine InfoCode_Liste vorhanden"), vbOKOnly + vbCritical, "ACHTUNG"
    End If
    
End Sub

Public Sub create_log_sheet()
    
    Dim ws As Worksheet
    
    '|fffd|berpr|fffd|fen ob die Tabelle schon vorhanden ist
    For Each ws In Worksheets
        If ws.Name = "Log_Sheet" Then
            Application.DisplayAlerts = False
            Exit Sub
            Application.DisplayAlerts = True
        End If
    Next ws

    'Erstellen eines neuen Tabellenblattes
    Sheets.Add.Name = "Log_Sheet"
    
    'Verschieben des Tabellenblattes an die letzte Position
    Sheets("Log_Sheet").Move after:=Sheets(Sheets.Count)
    
    
    'Zeilenh|fffd|he
    Columns("A:C").Select
    Selection.RowHeight = 16
    
    'Spaltenbreite
    Columns("A:A").ColumnWidth = 52
    Columns("B:B").ColumnWidth = 1
    Columns("C:C").ColumnWidth = 40
    
    'Spaltentitel
    Sheets("Log_Sheet").Cells(1, 1).Value = "Gesamtanzahl importierter InfoCode_Listen:"
    Sheets("Log_Sheet").Cells(2, 1).Value = "Gesamtanzahl der Versuche das Tabellenblatt umzubenennen:"
    Sheets("Log_Sheet").Cells(3, 1).Value = "Originalname der SPSL:"
'    Sheets("Log_Sheet").Cells(4, 1).Value = ""
'    Sheets("Log_Sheet").Cells(5, 1).Value = ""
'    Sheets("Log_Sheet").Cells(6, 1).Value = ""
    
    Sheets("Log_Sheet").Cells(1, 3).Value = 0
    Sheets("Log_Sheet").Cells(2, 3).Value = 0
    Sheets("Log_Sheet").Cells(3, 3).Value = 0
'    Sheets("Log_Sheet").Cells(4, 3).Value = 0
'    Sheets("Log_Sheet").Cells(5, 3).Value = 0
'    Sheets("Log_Sheet").Cells(6, 3).Value = 0

    For Each ws In ThisWorkbook.Worksheets
        If ws.Name = "Log_Sheet" Then
            ws.Visible = xlSheetVeryHidden
        End If
    Next ws

End Sub
Public Sub show_log_sheet()
    
    Dim wks As Worksheet
    Dim i As Integer
        
    For Each wks In ThisWorkbook.Worksheets
        If wks.Name = "Log_Sheet" Then
            wks.Visible = True
        End If
    Next wks
    
    '|fffd|berpr|fffd|fen ob die Tabelle schon vorhanden ist
    For Each ws In Worksheets
        If ws.Name = "Log_Sheet" Then
            Application.DisplayAlerts = False
            i = 1
            Application.DisplayAlerts = True
        End If
    Next ws
    
    If i = 1 Then
        'Selektieren des Quell-Tabellenblattes
        Sheets("Log_Sheet").Select
    Else
        MsgBox ("Es ist kein Log_Sheet vorhanden"), vbOKOnly + vbCritical, "ACHTUNG"
    End If
    
End Sub

Public Sub hide_log_sheet()
    
    On Error Resume Next
    
    '|fffd|berpr|fffd|fen ob die Tabelle schon vorhanden ist
    For Each ws In Worksheets
        If ws.Name = "Log_Sheet" Then
            Application.DisplayAlerts = False
            i = 1
            Application.DisplayAlerts = True
        End If
    Next ws
    
    If i = 1 Then
        'Selektieren des Quell-Tabellenblattes
        Sheets("Log_Sheet").Select
    Else
        MsgBox ("Es ist kein Log_Sheet vorhanden"), vbOKOnly + vbCritical, "ACHTUNG"
    End If
    
    Dim wks As Worksheet
    
    For Each wks In ThisWorkbook.Worksheets
        If wks.Name = "Log_Sheet" Then
            wks.Visible = xlVeryHidden
        End If
    Next wks
    
End Sub

Attribute VB_Name = "Modul2"
Dim ic_last_row As Long
Dim ic_last_column As Long
Dim ic_last_cell As String

Dim spsl_last_row As Long
Dim spsl_last_column As Long
Dim spsl_last_cell As String

Public Sub infocode_work()
    
    Dim i As Long: i = 22   'Beginnende Zeile der SPSL
    Dim n As Long: n = 2    'Beginnende Zeile der InfoCode Liste
    Dim i2 As Long: i2 = 0
    Dim string_rt As String
    Dim string_code As String
    Dim string_var As String
    Dim string_infocode As String
    Dim prodclass As String
    Dim prodclass_name As String
    
    Application.EnableEvents = False
    
    Call my_infocode_last_row
    Call my_spsl_last_row
    
    Do While i <= spsl_last_row
    
        string_rt = Sheets(1).Cells(i, 23).Value
        string_code = Sheets(1).Cells(i, 24).Value
        string_var = Sheets(1).Cells(i, 25).Value
        string_infocode = string_rt + string_code + string_var
         
        If string_rt = "" Or string_code = "" Or string_var = "" Or string_infocode = "" Then
            Sheets(1).Cells(i, 26).Value = ""
        Else
            
            i2 = 0
            
            Do While n <= ic_last_row
                
                
                prodclass = Sheets("InfoCode_Liste").Cells(n, 1).Value
                
                If prodclass = string_infocode Then
                    prodclass_name = Sheets("InfoCode_Liste").Cells(n, 5).Value
                    Sheets(1).Cells(i, 26).Value = prodclass_name
                    i2 = 1
                End If
                
                n = n + 1
            
            Loop
            
            If string_rt <> "" Or string_code <> "" Or string_var <> "" Or string_infocode <> "" Then
                If i2 = 0 And n > ic_last_row Then
                    MsgBox ("ACHTUNG!   Ung|fffd|ltiger InfoCode in Zeile " + CStr(i) + "!         "), vbOKOnly + vbInformation
                End If
            End If
        
        End If
        
        n = 2
        i = i + 1
        
    Loop

    If Sheets(1).Cells(17, 2).Value = "A" Then
        Sheets(1).Cells(17, 9).Value = "Submarine"
    End If
            
    Application.EnableEvents = True
    
End Sub

Public Sub my_infocode_last_row()
    
    Dim wks As Worksheet
    For Each wks In ThisWorkbook.Worksheets
        If wks.Name = "InfoCode_Liste" Then
            wks.Visible = True
        End If
    Next wks
    
    'Hier wird die letzte Zeile ermittelt
    'Egal in welcher Spalte sich die letzte Zeile befindet
    'Es werden alle Spalten gepr|fffd|ft und die letzte Zeile ausgegeben
    
    ic_last_row = Sheets("InfoCode_Liste").UsedRange.SpecialCells(xlCellTypeLastCell).Row
    
    'Hier wird die letzte Zeile ermittelt
    'Egal in welcher Spalte sich die letzte Zeile befindet
    'Es werden alle Spalten gepr|fffd|ft und die letzte Spalte ausgegeben
    
    ic_last_column = Sheets("InfoCode_Liste").UsedRange.SpecialCells(xlCellTypeLastCell).Column
    
    'Mit diesem Makro wird die Adresse der letzten Zelle (Zeile, Spalte) ermittelt
    ic_last_cell = Range("A1").SpecialCells(xlCellTypeLastCell).Address
    
'    Debug.Print (ic_last_row)
'    Debug.Print (ic_last_column)
'    Debug.Print (ic_last_cell)

    Call hide_infocode_liste

End Sub

Public Sub my_spsl_last_row()
    
    'Selektieren des Quell-Tabellenblattes
    Sheets(1).Select
    
    'Hier wird die letzte Zeile ermittelt
    'Egal in welcher Spalte sich die letzte Zeile befindet
    'Es werden alle Spalten gepr|fffd|ft und die letzte Zeile ausgegeben
    
    spsl_last_row = Sheets(1).UsedRange.SpecialCells(xlCellTypeLastCell).Row
    
    'Hier wird die letzte Zeile ermittelt
    'Egal in welcher Spalte sich die letzte Zeile befindet
    'Es werden alle Spalten gepr|fffd|ft und die letzte Spalte ausgegeben
    
    spsl_last_column = Sheets(1).UsedRange.SpecialCells(xlCellTypeLastCell).Column
    
    'Mit diesem Makro wird die Adresse der letzten Zelle (Zeile, Spalte) ermittelt
    spsl_last_cell = Range("A1").SpecialCells(xlCellTypeLastCell).Address
    
'    Debug.Print (spsl_last_row)
'    Debug.Print (spsl_last_column)
'    Debug.Print (spsl_last_cell)

End Sub
Attribute VB_Name = "Modul3"
Public Const sheetname_prefix As String = "mySPSL_"

Dim logged_sheetname As String
Dim orig_sheetname As String
Dim sheetname As String
Dim sheetlength As Long

Public Sub rechange_sheetname()
    
    Application.EnableEvents = False
    Dim i As Integer
    
    'Originalnamen aus dem Log_Sheet lesen
    logged_sheetname = Sheets("Log_Sheet").Cells(3, 3).Value
    Debug.Print (logged_sheetname)
    
    'Pr|fffd|fen des Originalnamens (aus Log_Sheet)
    If Left(logged_sheetname, Len(sheetname_prefix)) = sheetname_prefix Then
        sheetlength = Len(logged_sheetname) - Len(sheetname_prefix)
        orig_sheetname = Right(logged_sheetname, sheetlength)
        'Debug.Print (orig_sheetname)
    Else
        orig_sheetname = logged_sheetname
        'Debug.Print (orig_sheetname)
    End If
    
    'Pr|fffd|fen des derzeitigen Blattnamens
    If Left(Sheets(1).Name, Len(sheetname_prefix)) = sheetname_prefix Then
        sheetlength = Len(Sheets(1).Name) - Len(sheetname_prefix)
        sheetname = Right(Sheets(1).Name, sheetlength)
        'Debug.Print (sheetname)
    Else
        sheetname = Sheets(1).Name
        'Debug.Print (sheetname)
    End If
    
    'Pr|fffd|fen des derzeitigen Blattnamens
    If sheetname <> orig_sheetname Then
            MsgBox ("Der Name der SPSL wurde unzul|fffd|ssig ver|fffd|ndert!" & Chr(13) & Chr(10) & _
            "" & Chr(13) & Chr(10) & _
            "Der Name wird korrigiert!"), vbOKOnly + vbExclamation
            Sheets(1).Name = sheetname_prefix + orig_sheetname
            i = Sheets("Log_Sheet").Cells(2, 3).Value
            Sheets("Log_Sheet").Cells(2, 3).Value = i + 1

    End If
Application.EnableEvents = True
End Sub

Public Sub help_me()

    If MsgBox("" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "Guten Tag!" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "Hilfe bei Problemen mit dieser SPSL erhalten Sie unter folgenden Kontaktdaten:                      " & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "Redaktionelle Pr|fffd|fung:   Regine Heitmann / Mark Luhm   (0431 700 4654 / 3020)" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "Programmierung:   Dipl.-Ing. Frank T|fffd|nning  (0431 700 12 3680)" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "IT-Pr|fffd|fung:   Dipl.-Wirtsch.Inf. Ricardo Lorenz  (0431 700 12 9014)" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "InfoCodes:   Harry Kuhn  (0431 700 12 2850)" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "" & Chr(13) & Chr(10) & _
              "", vbOKOnly + vbInformation) = vbYes Then
    End If

End Sub

Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
