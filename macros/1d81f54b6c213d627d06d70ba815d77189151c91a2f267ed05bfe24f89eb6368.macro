Attribute VB_Name = "Passwort_2"
Attribute VB_Base = "0{ED95EDC9-F542-4824-8A70-D92A7717FAE5}{C86FAE37-82C6-44CC-8CB9-989229A3B9EE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub Cancel_Click()
    Unload Passwort_2
End Sub

Public Sub Okay_Click()
    
    Dim Pass_E As String
    Dim Pass_O As String
    Dim nlc_pw As String
    
    Pass_E = Passwort_2.Password.Value
    Pass_O = nlc_phb_PW.Range("C2").Value
    nlc_pw = nlc_konstanten.pw_admin
    Unload Passwort_2
    
    If Pass_E = Pass_O Or Pass_E = pw_inno Or Pass_E = pw_admin Then
        
        On Error GoTo ende
        nlc_intern.application_off
        
        Call nlc_intern.nlc_unprotect(nlc_phb_06)
        Call nlc_06.show_admin
                
        'Modus setzen
        If Pass_E = pw_inno Or nlc_konstanten.pw_admin = Pass_E Then
            If Pass_E = pw_inno Then
                nlc_phb_PW.Range("C4").Value = "NLS"
            Else
                nlc_phb_PW.Range("C4").Value = "ADMIN"
            End If
        Else
            nlc_phb_PW.Range("C4").Value = "MASTERDATA"
        End If
        nlc_phb_PW.Calculate
        nlc_phb_61.Calculate
        
        Call nlc_intern.nlc_protect
        Call nlc_intern.blatt_hiddenvisible(Nothing)
        
        
        If nlc_phb_PW.Cells(25, 3).Value = "x" Then
            Call nlc_intern.nlc_unprotect(nlc_phb_00)
            Call nlc_intern.lockPJNr(False)
            Call nlc_intern.nlc_protect(nlc_phb_00)
        End If
        
      
        nlc_phb_00.Select

ende:
        nlc_intern.application_on
                
    Else
        MsgBox nlc_Language_Msgs("password")
    End If
            
End Sub

Private Sub Password_KeyDown(ByVal KeyCode As msforms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then Okay_Click
End Sub

Private Sub UserForm_Initialize()
    'Sprache anpassen
    Passwort_2.Caption = nlc_Language_userforms("Passwort_2", "Passwort_2")
    Cancel.Caption = nlc_Language_userforms("Passwort_2", "Cancel")
End Sub


Attribute VB_Name = "Start_Window"
Attribute VB_Base = "0{D6AB09D0-7E1A-4CF4-BE7D-E96BDB70C108}{E41EADDD-6BBF-4B4A-BB6B-59D3F0AF600A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub Okay_Click()
    Unload Start_Window
End Sub

Private Sub UserForm_Initialize()
    If nlc_phb_PW.Cells(23, 3).Value = "next project light" Then
        If Me.Willkommensbild_plus.Visible = True Then Me.Willkommensbild_plus.Visible = False
    ElseIf nlc_phb_PW.Cells(23, 3).Value = "next project light+" Then
        If Me.Willkommensbild_plus.Visible = False Then Me.Willkommensbild_plus.Visible = True
    End If
    
    Me.Ueberschrift.Caption = nlc_Language_userforms(Me.name, Me.Ueberschrift.Caption) & ":"
    Label2.Caption = nlc_Language_userforms(Me.name, Label2.Caption)
    Label3.Caption = nlc_Language_userforms(Me.name, Label3.Caption)
    Label4.Caption = nlc_Language_userforms(Me.name, Label4.Caption)
    Label5.Caption = "" 'nlc_Language_userforms(Me.name, Label5.Caption)
    Me.Caption = nlc_Language_userforms(Me.name, Me.Caption)
    Aufzaehlung1.Caption = nlc_Language_userforms(Me.name, Aufzaehlung1.Caption)
    
    OKAY.Caption = nlc_Language_userforms(Me.name, OKAY.Caption)
End Sub
Attribute VB_Name = "VBASearchWords"
Public Function findWordInModules(ByVal pSearchWord As String) As Boolean
    'Dim objComponent As VBComponent
    ' VBComponent requires reference to Microsoft Visual Basic
    ' for Applications Extensibility; use late binding instead:
    Dim objComponent As Object
    Dim strMessage As String
    Dim strModuleList As String

    strModuleList = vbNullString
    
    For Each objComponent In Application.VBE.ActiveVBProject.VBComponents
        If objComponent.CodeModule.Find(pSearchWord, 1, 1, -1, -1) = True Then
            strModuleList = strModuleList & "; " & objComponent.name
        End If
    Next objComponent
'    strMessage = "Text '" & pSearchWord & "' found in "
    If Len(strModuleList) > 0 Then
        strMessage = strMessage & "modules: " & Mid(strModuleList, 3)
        findWordInModules = True
        Exit Function
    Else
        strMessage = strMessage & "no modules"
        findWordInModules = False
    End If
'    Debug.Print strMessage
End Function

Public Sub LanguageSearchInModules()
Const searchColumn = 4
Dim i As Integer
'dim ws as worksheet: set ws = nlc_phb_tl   ' Language
'Dim ws As Worksheet: Set ws = nlc_phb_TL2  ' Language-Sheets
'Dim ws As Worksheet: Set ws = nlc_phb_TL3  ' Language-Buttons
'Dim ws As Worksheet: Set ws = nlc_phb_TL4  ' Language-Msgs
Dim ws As Worksheet: Set ws = nlc_phb_TL5   ' Language-UserForms

Dim tempStr As String

i = 4


While ws.Cells(i, searchColumn).Value <> ""
    Debug.Print ws.Cells(i, searchColumn).Value
    If findWordInModules(ws.Cells(i, searchColumn).Value) Then
        ws.Cells(i, searchColumn - 3).Value = "found"
    End If
    'ws.Cells(i, searchColumn - 3).Value = original_findWordInModules(ws.Cells(i, searchColumn).Value)
    i = i + 1
Wend

End Sub

Public Function original_findWordInModules(ByVal pSearchWord As String) As String
    'Dim objComponent As VBComponent
    ' VBComponent requires reference to Microsoft Visual Basic
    ' for Applications Extensibility; use late binding instead:
    Dim objComponent As Object
    Dim strMessage As String
    Dim strModuleList As String

    strModuleList = vbNullString
    For Each objComponent In Application.VBE.ActiveVBProject.VBComponents
        If objComponent.CodeModule.Find(pSearchWord, 1, 1, -1, -1) = True Then
            strModuleList = strModuleList & "; " & objComponent.name
        End If
    Next objComponent
    strMessage = "Text '" & pSearchWord & "' found in "
    If Len(strModuleList) > 0 Then
        strMessage = strMessage & "modules: " & Mid(strModuleList, 3)
    Else
        strMessage = strMessage & "no modules"
    End If
    Debug.Print strMessage
    original_findWordInModules = strMessage
    
End Function



Attribute VB_Name = "clsLabel"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public WithEvents Label1 As msforms.Label
Attribute Label1.VB_VarHelpID = -1

Private Sub Label1_Click()
  ActiveCell.Value = CDate(Label1.tag)
  nlc_phb_06.IsCalOpen = False
    Unload frm_Kalender
End Sub
Attribute VB_Name = "faerben"
Attribute VB_Base = "0{78BD1F94-976F-4D63-9E8C-C29631783A78}{C5806810-BCE4-43D6-9A13-6240F2ED347F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'17 - 18 - 19 - 20 - 21 - 22 - 23 - 24
'25 - 26 - 27 - 28 - 29 - 30 - 31 - 32


Private Sub buttons1_Click()
On Error GoTo ende
    Selection.Interior.ColorIndex = 20
    Selection.Font.ColorIndex = 28
    Selection.ShapeRange.line.Visible = msoFalse
    
    With Selection.ShapeRange.Shadow
        .Type = msoShadow25
        .Visible = msoTrue
        .Style = msoShadowStyleOuterShadow
        .Blur = 0
        .OffsetX = 2.399999926
        .OffsetY = 1.8000000986
        .RotateWithShape = msoFalse
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = -0.25
        .Transparency = 0.5
        .Size = 100
    End With
ende:
End Sub

Private Sub buttons2_Click()
On Error GoTo ende
    Selection.Interior.ColorIndex = 21
    Selection.Font.ColorIndex = 29
    Selection.ShapeRange.line.Visible = msoFalse
    
    With Selection.ShapeRange.Shadow
        .Type = msoShadow25
        .Visible = msoTrue
        .Style = msoShadowStyleOuterShadow
        .Blur = 0
        .OffsetX = 2.399999926
        .OffsetY = 1.8000000986
        .RotateWithShape = msoFalse
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = -0.25
        .Transparency = 0.5
        .Size = 100
    End With
ende:
End Sub

Private Sub buttons3_Click()
On Error GoTo ende
    Selection.Interior.ColorIndex = 22
    Selection.Font.ColorIndex = 30
ende:
End Sub

Private Sub editierbare_Zellen_Click()
On Error GoTo ende
    
    Selection.Interior.ColorIndex = 17
    Selection.Font.ColorIndex = 25
ende:
End Sub


Private Sub nicht_editierbar_Click()
On Error GoTo ende
    'Selection.Interior.Pattern = xlNone
    Selection.Font.ColorIndex = 23
ende:
End Sub

Private Sub rahmen1_Click()
On Error GoTo ende
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
ende:

End Sub

Private Sub rahmen2_Click()
On Error GoTo ende

    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
ende:
End Sub

Private Sub rahmen3_Click()
On Error GoTo ende
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
ende:
End Sub

Private Sub schrift_blau_Click()
On Error GoTo ende
    'Selection.Interior.ColorIndex = 19
    Selection.Font.ColorIndex = 24
    'Selection.Font.Size = 12
ende:
End Sub

Private Sub ueberschrift1_Click()
On Error GoTo ende
    Selection.Interior.ColorIndex = 19
    Selection.Font.ColorIndex = 27
    Selection.Font.Size = 12
ende:
End Sub

Private Sub ueberschrift2_Click()
On Error GoTo ende
    Selection.Interior.ColorIndex = 18
    Selection.Font.ColorIndex = 26
ende:
End Sub

Private Sub UserForm_Initialize()
    editierbare_Zellen.BackColor = ActiveWorkbook.colors(17)
    editierbare_Zellen.ForeColor = ActiveWorkbook.colors(25)
    nicht_editierbar.ForeColor = ActiveWorkbook.colors(23)
    ueberschrift1.BackColor = ActiveWorkbook.colors(19)
    ueberschrift1.ForeColor = ActiveWorkbook.colors(27)
    ueberschrift2.BackColor = ActiveWorkbook.colors(18)
    ueberschrift2.ForeColor = ActiveWorkbook.colors(26)
    buttons1.BackColor = ActiveWorkbook.colors(20)
    buttons1.ForeColor = ActiveWorkbook.colors(28)
    buttons2.BackColor = ActiveWorkbook.colors(21)
    buttons2.ForeColor = ActiveWorkbook.colors(29)
    buttons3.BackColor = ActiveWorkbook.colors(22)
    buttons3.ForeColor = ActiveWorkbook.colors(30)
    rahmen1.BackColor = ActiveWorkbook.colors(31)
    rahmen2.BackColor = ActiveWorkbook.colors(31)
    schrift_blau.ForeColor = ActiveWorkbook.colors(24)
End Sub


Attribute VB_Name = "frm_DBRetry"
Attribute VB_Base = "0{B4BF9698-CD96-47AD-BE7E-D6B35C443CE3}{83570D88-0C6E-4361-830B-D61C88EE24FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Initialize()
    Me.Caption = nlc_Language_userforms(Me.name, "Titel")
    Me.rdb_newDB.Caption = nlc_Language_userforms(Me.name, "rdb_newDB")
    Me.rdb_retry.Caption = nlc_Language_userforms(Me.name, "rdb_retry")
    Me.btn_ok.Caption = nlc_Language_userforms(Me.name, "btn_ok")
    Me.btn_cancel.Caption = nlc_Language_userforms(Me.name, "btn_cancel")
    
    Me.rdb_retry.Value = True
End Sub

Private Sub btn_cancel_Click()
    nls_Database.dbUserReply = nlsCancel
    Unload Me
End Sub

Private Sub btn_ok_Click()
    If Me.rdb_retry.Value Then
        nls_Database.dbUserReply = nlsRetry
    Else
        nls_Database.dbUserReply = nlsNewDB
    End If
    
    Unload Me
End Sub
Attribute VB_Name = "frm_DataButtons"
Attribute VB_Base = "0{82443634-4BF0-484D-A4D7-BA09F167ADF7}{8211BC2F-3972-4F37-A3A6-3C7F07219E3D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim level As Integer, nlc_pw As String
Dim Fehlercode As Integer, Fehlertext As String
Dim zeile As Integer, spalte As Integer, startzeile As Integer, endzeile As Integer
Dim Data_Endzeile_Struktur As Integer
Dim Markierung As Range
Dim Fehlerliste As String

Private Sub btn_BP_Speichern_Click()
    Dim i As Integer
    
    On Error GoTo ende
    'Aktion vorbereiten
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    Call nlc_06.SV_Short
    nlc_phb_06.Calculate
    
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    'Aktion durchf|fffd|hren
    Call Copy_Data_Columns(SpNr_DateA_S, SpNr_DateB_S)
    Call Copy_Data_Columns(SpNr_DateA_E, SpNr_DateB_E)

    For i = 0 To Res_Anz - 1
        Call Copy_Data_Columns(SpNr_ResA_S + (i * Res_Schritt), SpNr_Res_S + (i * Res_Schritt))
    Next i
    Call Copy_Data_Columns(SpNr_ResSumme_Akt, SpNr_ResSumme_Bas)

    For i = 0 To Cost_Anz - 1
        Call Copy_Data_Columns(SpNr_CostA_S + (i * Cost_Schritt), SpNr_Cost_S + (i * Cost_Schritt))
    Next i
    Call Copy_Data_Columns(SpNr_CostSumme_Akt, SpNr_CostSumme_Bas)
        
    nlc_phb_51.Range("AF10").Value = nlc_phb_00.Range("C56").Value
    
    'Aktion nachbereiten
ende:
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
End Sub


Private Sub btn_refresh_Click()
    If nlc_phb_59.Range("BN5").Value = "" Then nlc_phb_59.Range("BN5").Value = nlc_phb_59.Range("BR5").Value
                
    Call refresh_graphics
    
End Sub

Private Sub btn_Calculate_Click()
    Call nlc_06.SV_Berechnung
End Sub
'#########################################################

'Oberen 8 Buttons
'#########################################################
Private Sub btn_ebene_hoch_Click()
    Dim Markierung As Range
    Set Markierung = Selection
    
    Call Outline_hoch
    
    nlc_phb_06.Range(nlc_phb_06.Cells(Markierung.Row, Markierung.Column), nlc_phb_06.Cells(Markierung.Row + Markierung.Rows.count - 1, Markierung.Column + Markierung.Columns.count - 1)).Select
    On Error Resume Next
    VBA.AppActivate "Microsoft Excel"
End Sub

Private Sub btn_ebene_runter_Click()
    Dim Markierung As Range
    Set Markierung = Selection
    
    Call Outline_runter
    
    nlc_phb_06.Range(nlc_phb_06.Cells(Markierung.Row, Markierung.Column), nlc_phb_06.Cells(Markierung.Row + Markierung.Rows.count - 1, Markierung.Column + Markierung.Columns.count - 1)).Select
    On Error Resume Next
    VBA.AppActivate "Microsoft Excel"
End Sub

Private Sub btn_milenstein_Click()
    Dim Markierung As Range
    Set Markierung = Selection
    
    Call MS_AP_Wechsel
    
    nlc_phb_06.Range(nlc_phb_06.Cells(Markierung.Row, Markierung.Column), nlc_phb_06.Cells(Markierung.Row + Markierung.Rows.count - 1, Markierung.Column + Markierung.Columns.count - 1)).Select
    On Error Resume Next
    VBA.AppActivate "Microsoft Excel"
End Sub

Public Sub btn_neu_Click()
    Call Data_Insert
End Sub

Private Sub btn_loeschen_Click()
    Call Data_Delete
End Sub

Private Sub btn_ausschneiden_Click()
    Call Data_Cut
End Sub

Private Sub btn_kopieren_Click()
    Call Data_Copy
End Sub

Private Sub btn_einfuegen_Click()
    Call Data_Paste
End Sub
'#########################################################

'#########################################################


Private Sub UserForm_Initialize()
    frm_DataButtons.btn_neu.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_neu")
    frm_DataButtons.btn_loeschen.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_loeschen")
    frm_DataButtons.btn_milenstein.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_milenstein")
    frm_DataButtons.btn_ausschneiden.ControlTipText = nlc_intern.nlc_Language_userforms("frm_DataButtons", "btn_ausschneiden")
    frm_DataButtons.btn_kopieren.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_kopieren")
    frm_DataButtons.btn_einfuegen.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_einfuegen")
    
    frm_DataButtons.btn_ebene_hoch.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_ebene_hoch")
    frm_DataButtons.btn_ebene_runter.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_ebene_runter")

    frm_DataButtons.btn_Calculate.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_Calculate")
    frm_DataButtons.btn_Refresh.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_Refresh")
    frm_DataButtons.btn_BP_Speichern.ControlTipText = nlc_Language_userforms("frm_DataButtons", "btn_BP_Speichern")

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Call frm_DataButtons.userformclose
End Sub

Sub userformclose()
    'nlc_intern.application_off
    
    If nlc_phb_51.Range("A1").Value = "x" Then
        nlc_phb_06.Range("N7").Value = frm_DataButtons.top
        nlc_phb_06.Range("O7").Value = frm_DataButtons.left
        nlc_phb_51.Range("A1").Value = "x"
    Else
        nlc_phb_06.Range("N7").Value = frm_DataButtons.top
        nlc_phb_06.Range("O7").Value = frm_DataButtons.left
    End If

    'nlc_intern.application_on
End Sub

Sub Data_Delete()
    Dim UID As Integer, antwort As VbMsgBoxResult, ZeilenAnzahl As Integer
    Dim Ebene As Integer, Max_Ebene As Integer
    
    On Error GoTo fehler

    'Aktion vorbereiten
    nlc_intern.application_off
    Set Markierung = Selection
    nlc_pw = nlc_intern.get_pw
    UID = nlc_phb_06.Range("C7").Value
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    startzeile = Markierung.Item(1).Row
    endzeile = Markierung.Item(Markierung.Cells.count).Row
    If Markierung.Areas.count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf startzeile < Data_Startzeile + 1 Or endzeile > Data_Endzeile_Struktur Then
        Fehlercode = 2
        GoTo fehler
    End If
    Max_Ebene = 9
    
    'Aktion durchf|fffd|hren
    For level = startzeile To endzeile
        Ebene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        If Ebene < Max_Ebene Then
            Max_Ebene = Ebene
        End If
    Next level
    While nlc_phb_06.Cells(endzeile + 1, SpNr_Ebene).Value <> "" And nlc_phb_06.Cells(endzeile + 1, SpNr_Ebene).Value > Max_Ebene
        endzeile = endzeile + 1
    Wend
    If startzeile = Data_Startzeile Or (startzeile = Data_Startzeile + 1 And endzeile = Data_Endzeile_Struktur) Then
        Fehlercode = 3
        GoTo fehler
    End If
    ZeilenAnzahl = endzeile - startzeile + 1
    nlc_phb_06.Rows(startzeile & ":" & endzeile).Select
    Application.ScreenUpdating = True
    Application.ScreenUpdating = False
    If ZeilenAnzahl > 1 Then antwort = MsgBox(nlc_Language_Msgs("data_delete"), vbYesNo)
    If ZeilenAnzahl = 1 Or antwort = vbYes Then
        Call nlc_intern.nlc_unprotect(nlc_phb_06)
        nlc_phb_06.Rows(startzeile & ":" & endzeile).Delete Shift:=xlUp
        nlc_phb_06.Range("E7").Value = nlc_phb_06.Range("E7").Value - ZeilenAnzahl
        Call Strukturvervollstaendigung
        Call PSPCode_Generation
        Call nlc_06.SV_Short
        Call Vorgangsformatierung
        Call Vorgangsartkopie
        nlc_phb_06.Range("e7").Calculate
        Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
        Call nlc_intern.nlc_protect(nlc_phb_06)
        On Error Resume Next
        VBA.AppActivate "Microsoft Excel"
        nlc_phb_06.Cells(startzeile, SpNr_Name).Select
    End If
    
    'Aktion nachbereiten
    nlc_intern.application_on
    Exit Sub
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_block_cells")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_no_delete_all")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
End Sub

Sub Data_Insert()
    Dim MaxTasks As Integer
    
    Dim start2 As Integer
    Dim ende2 As Integer
    
    On Error GoTo fehler

    'Aktion vorbereiten
    nlc_intern.application_off
    
    'Sperren_Variable = True
    
    nlc_pw = nlc_intern.get_pw
    MaxTasks = nlc_phb_59.Range("I15").Value
    Set Markierung = Selection
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    'Aktion durchf|fffd|hren
    startzeile = Markierung.Item(1).Row
    endzeile = Markierung.Item(Markierung.Cells.count).Row
    If Markierung.Areas.count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf startzeile < Data_Startzeile + 1 Or endzeile > Data_Endzeile_Struktur + 1 Then
        Fehlercode = 2
        GoTo fehler
    ElseIf Data_Endzeile_Struktur - Data_Startzeile + endzeile - startzeile + 2 > MaxTasks Then
        Fehlercode = 3
        GoTo fehler
    End If
    
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    Call Data_Insert2(startzeile, endzeile, False)

    
    Call Strukturvervollstaendigung
    Call PSPCode_Generation
    nlc_phb_06.Range("e7").Calculate
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    Call nlc_intern.nlc_protect(nlc_phb_06)
    
    'Aktion nachbereiten
    nlc_phb_06.Cells(startzeile, SpNr_Name).Select
    On Error Resume Next
    VBA.AppActivate "Microsoft Excel"
    nlc_intern.application_on
    Exit Sub
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_block_cells")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_maximum_tasks") & MaxTasks & " !"
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
End Sub

Private Sub Data_Insert2(startzeile As Integer, endzeile As Integer, ImportB As Boolean)

    Dim UID As Integer, ZeilenAnzahl As Integer, Ebene As Integer
    
    UID = nlc_phb_06.Range("C7").Value
    ZeilenAnzahl = endzeile - startzeile + 1
    Ebene = nlc_phb_06.Cells(startzeile - 1, SpNr_Ebene).Value
    If nlc_phb_06.Cells(startzeile - 1, SpNr_Art).Value = "SV" Then Ebene = Ebene + 1
    
    
    If Ebene < 2 Then Ebene = 2

    nlc_phb_06.Rows(ZeiNr_VorlageAP & ":" & ZeiNr_VorlageAP).Copy
    nlc_phb_06.Rows(startzeile & ":" & startzeile + ZeilenAnzahl - 1).Insert Shift:=xlDown
    nlc_phb_06.Rows(startzeile & ":" & startzeile + ZeilenAnzahl - 1).Hidden = False
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, SpNr_Header), nlc_phb_06.Cells(startzeile + ZeilenAnzahl - 1, SpNr_Header)).Value = ""
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, SpNr_Ebene), nlc_phb_06.Cells(startzeile + ZeilenAnzahl - 1, SpNr_Ebene)).Value = Ebene
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, SpNr_Name), nlc_phb_06.Cells(startzeile + ZeilenAnzahl - 1, SpNr_Name)).Value = ""
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, SpNr_Art), nlc_phb_06.Cells(startzeile + ZeilenAnzahl - 1, SpNr_Art)).Value = "AP"
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, SpNr_ArtB), nlc_phb_06.Cells(startzeile + ZeilenAnzahl - 1, SpNr_ArtB)).Value = "AP"
    
    For level = 1 To ZeilenAnzahl
        nlc_phb_06.Cells(startzeile, SpNr_UID).Value = UID

        If nlc_phb_06.Cells(ZeiNr_FrEbene, 1).Value > 0 Then Call nlc_06.Format_AP(startzeile)

        startzeile = startzeile + 1
        UID = UID + 1
    Next level
    nlc_phb_06.Range("C7").Value = UID
    nlc_phb_06.Range("E7").Value = nlc_phb_06.Range("E7").Value + ZeilenAnzahl

    
End Sub


Sub Data_Cut()
    Dim UID As Integer, antwort As VbMsgBoxResult
    Dim ZeilenAnzahl As Integer, Ebene As Integer, Max_Ebene As Integer, Differenz As Integer
    
    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    Set Markierung = Selection
    UID = nlc_phb_06.Range("C7").Value
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    startzeile = Markierung.Item(1).Row
    endzeile = Markierung.Item(Markierung.Cells.count).Row
    
    If Markierung.Areas.count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf startzeile < Data_Startzeile Or endzeile > Data_Endzeile_Struktur Then
        Fehlercode = 2
        GoTo fehler
    End If
    Max_Ebene = 9
    
    'Aktion durchf|fffd|hren
    For level = startzeile To endzeile
        Ebene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        If Ebene < Max_Ebene Then
            Max_Ebene = Ebene
        End If
    Next level
    While nlc_phb_06.Cells(endzeile + 1, SpNr_Ebene).Value <> "" And nlc_phb_06.Cells(endzeile + 1, SpNr_Ebene).Value > Max_Ebene
        endzeile = endzeile + 1
    Wend
    If startzeile = Data_Startzeile Or (startzeile = Data_Startzeile + 1 And endzeile = Data_Endzeile_Struktur) Then
        Fehlercode = 3
        GoTo fehler
    End If
    ZeilenAnzahl = endzeile - startzeile + 1
    Differenz = startzeile - Temp_Startzeile
    nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 1), nlc_phb_60.Cells(Temp_Endzeile, Data_Endspalte)).ClearContents
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, Data_Startspalte + 1), nlc_phb_06.Cells(endzeile, Data_Endspalte)).Copy
    nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 1), nlc_phb_60.Cells(endzeile - Differenz, Data_Endspalte)).PasteSpecial xlPasteValues ' xlPasteFormulas '
    For zeile = startzeile To endzeile
        nlc_phb_60.Cells(zeile - Differenz, SpNr_ArtB).ClearContents
    Next zeile
    nlc_phb_60.Range("E7").Value = endzeile - Differenz
    nlc_phb_60.Range("B7").Value = "Cut"
    
    nlc_phb_06.Rows(startzeile & ":" & endzeile).Delete Shift:=xlUp
    nlc_phb_06.Range("E7").Value = nlc_phb_06.Range("E7").Value - ZeilenAnzahl
    
    Call Strukturvervollstaendigung
    Call PSPCode_Generation
    
    'Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    Exit Sub
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_block_cells")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_no_delete_all")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
End Sub

Sub Data_Copy()
    Dim UID As Integer, antwort As VbMsgBoxResult, ZeilenAnzahl As Integer
    Dim Ebene As Integer, Max_Ebene As Integer, Differenz As Integer
    
    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    Set Markierung = Selection
    UID = nlc_phb_06.Range("C7").Value
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    startzeile = Markierung.Item(1).Row
    endzeile = Markierung.Item(Markierung.Cells.count).Row
    
    If Markierung.Areas.count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf startzeile < Data_Startzeile Or endzeile > Data_Endzeile_Struktur Then
        Fehlercode = 2
        GoTo fehler
    End If
    Max_Ebene = 9
    
    'Aktion durchf|fffd|hren
    For level = startzeile To endzeile
        Ebene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        If Ebene < Max_Ebene Then
            Max_Ebene = Ebene
        End If
    Next level
    While nlc_phb_06.Cells(endzeile + 1, SpNr_Ebene).Value <> "" And nlc_phb_06.Cells(endzeile + 1, SpNr_Ebene).Value > Max_Ebene
        endzeile = endzeile + 1
    Wend
    If startzeile = Data_Startzeile Or (startzeile - 1 = Data_Startzeile + 1 And endzeile + 1 = Data_Endzeile_Struktur) Then
        Fehlercode = 3
        GoTo fehler
    End If
    ZeilenAnzahl = endzeile - startzeile + 1
    Differenz = startzeile - Temp_Startzeile
    nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 1), nlc_phb_60.Cells(Temp_Endzeile, Data_Endspalte)).ClearContents
    nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, Data_Startspalte + 1), nlc_phb_06.Cells(endzeile, Data_Endspalte)).Copy
    nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 1), nlc_phb_60.Cells(endzeile - Differenz, Data_Endspalte)).PasteSpecial xlPasteValues 'xlPasteFormulas '
    For zeile = startzeile To endzeile
        nlc_phb_60.Cells(zeile - Differenz, SpNr_UID).ClearContents
        nlc_phb_60.Cells(zeile - Differenz, SpNr_ArtB).ClearContents
        'For Spalte = Data_Startspalte + 1 To Data_Endspalte
        '    If nlc_phb_06.Cells(Zeile, Spalte).HasFormula Then
        '        nlc_phb_60.Cells(Zeile - Differenz, Spalte).Formula = nlc_phb_06.Cells(Zeile, Spalte).Formula
        '    End If
        'Next Spalte
    Next zeile
    nlc_phb_60.Range("E7").Value = endzeile - Differenz
    nlc_phb_60.Range("B7").Value = "Copy"
    nlc_phb_06.Rows(startzeile & ":" & endzeile).Select
    
    'Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    Exit Sub
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_block_cells")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_no_delete_all")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
End Sub

Sub Data_Paste()
    Dim UID As Integer, ZeilenAnzahl As Integer, Ebene As Integer, MinEbene As Integer, MaxEbene As Integer
    Dim Differenz As Integer, EbenenDiff As Integer, MaxTasks As Integer, EbenenLimit As Integer
    
    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    MaxTasks = nlc_phb_59.Range("I15").Value

    EbenenLimit = nlc_phb_59.Range("I10").Value
    
    Set Markierung = Selection
    UID = nlc_phb_06.Range("C7").Value
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    'Aktion durchf|fffd|hren
    zeile = Markierung.Item(1).Row
    ZeilenAnzahl = nlc_phb_60.Range("E7").Value - Temp_Startzeile + 1
    MinEbene = nlc_phb_60.Cells(Temp_Startzeile, SpNr_Ebene).Value
    For level = Temp_Startzeile To Temp_Startzeile + ZeilenAnzahl - 1
        If nlc_phb_60.Cells(level, SpNr_Ebene).Value > MaxEbene Then MaxEbene = nlc_phb_60.Cells(level, SpNr_Ebene).Value
    Next level
    startzeile = zeile
    endzeile = Markierung.Item(Markierung.Cells.count).Row
    Differenz = startzeile - Temp_Startzeile
    endzeile = startzeile + ZeilenAnzahl - 1
    Ebene = nlc_phb_06.Cells(startzeile - 1, SpNr_Ebene).Value
    If Ebene < 2 Then Ebene = 2
    EbenenDiff = Ebene - MinEbene
    If Markierung.Item(1).count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf zeile < Data_Startzeile + 1 Or zeile > Data_Endzeile_Struktur + 1 Then
        Fehlercode = 2
        GoTo fehler
    ElseIf Data_Endzeile_Struktur - Data_Startzeile + 1 + ZeilenAnzahl > MaxTasks Then
        Fehlercode = 4
        GoTo fehler
    ElseIf Ebene + MaxEbene - MinEbene > EbenenLimit Then
        Fehlercode = 5
        GoTo fehler
    ElseIf nlc_phb_60.Range("B7").Value = "Empty" Then
        Fehlercode = 6
        GoTo fehler
    End If

    For level = 1 To ZeilenAnzahl
        nlc_phb_06.Rows(ZeiNr_VorlageAP & ":" & ZeiNr_VorlageAP).Copy
        nlc_phb_06.Rows(startzeile & ":" & startzeile).Insert Shift:=xlDown
        nlc_phb_06.Rows(startzeile).Hidden = False
        nlc_phb_06.Cells(startzeile, SpNr_UID).Value = UID
        If nlc_phb_60.Range("B7").Value = "Copy" Then UID = UID + 1
    Next level
    For level = Temp_Startzeile To Temp_Startzeile + ZeilenAnzahl - 1
        nlc_phb_60.Cells(level, SpNr_Ebene).Value = nlc_phb_60.Cells(level, SpNr_Ebene).Value + EbenenDiff
    Next level
    
    If nlc_phb_60.Range("B7").Value = "Copy" Then
        nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 2), nlc_phb_60.Cells(endzeile - Differenz, Data_Endspalte)).Copy
        nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, Data_Startspalte + 2), nlc_phb_06.Cells(endzeile, Data_Endspalte)).PasteSpecial xlPasteValues 'xlPasteFormulas '
    Else
        nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 1), nlc_phb_60.Cells(endzeile - Differenz, Data_Endspalte)).Copy
        nlc_phb_06.Range(nlc_phb_06.Cells(startzeile, Data_Startspalte + 1), nlc_phb_06.Cells(endzeile, Data_Endspalte)).PasteSpecial xlPasteValues 'xlPasteFormulas '
        nlc_phb_60.Range(nlc_phb_60.Cells(Temp_Startzeile, Data_Startspalte + 1), nlc_phb_60.Cells(Temp_Endzeile, Data_Endspalte)).ClearContents
        nlc_phb_60.Range("E7").Value = 0
        nlc_phb_60.Range("B7").Value = "Empty"
    End If
    
    'Aktion nachbereiten

    nlc_phb_06.Range("C7").Value = UID
    nlc_phb_06.Range("E7").Value = nlc_phb_06.Range("E7").Value + ZeilenAnzahl
    Call Layoutupdate
    Call nlc_intern.nlc_protect(nlc_phb_06)

    nlc_intern.application_on
    Exit Sub
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)

    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_select_insert")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_paste_import")
    If Fehlercode = 4 Then Fehlertext = nlc_Language_Msgs("data_maximum_tasks") & MaxTasks & " !" & VBA.Chr(10) & ZeilenAnzahl & nlc_Language_Msgs("data_tasks_storage")
    If Fehlercode = 5 Then Fehlertext = nlc_Language_Msgs("data_move_above") & EbenenLimit & "." & VBA.Chr(10) & nlc_Language_Msgs("data_tasks_with") & MaxEbene - MinEbene + 1 & nlc_Language_Msgs("data_levels_temporary")
    If Fehlercode = 6 Then Fehlertext = nlc_Language_Msgs("data_temporary_empty")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
End Sub

Sub MS_AP_Wechsel()
    
    Err.Clear
    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    zeile = Selection.Row
    If zeile <= Data_Startzeile + 1 Or zeile > Data_Endzeile_Struktur Then
        Fehlercode = 1
        GoTo fehler
    End If
    
    If nlc_phb_06.Cells(zeile, SpNr_Art).Value = "MS" Then
        nlc_phb_06.Cells(zeile, SpNr_Art).Value = "AP"
        Call nlc_06.Format_AP(zeile)
    ElseIf nlc_phb_06.Cells(zeile, SpNr_Art).Value = "AP" Then
        nlc_phb_06.Cells(zeile, SpNr_Art).Value = "MS"
        Call nlc_06.Format_MS(zeile)
    Else
        Fehlercode = 2
        GoTo fehler
    End If
    
    'Aktion nachbereiten
    'nlc_phb_06.Range("e7").Calculate
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    nlc_phb_06.Cells(zeile, SpNr_Name).Select
    Call nlc_intern.nlc_protect(nlc_phb_06)
    On Error Resume Next
    VBA.AppActivate "Microsoft Excel"
    
    nlc_intern.application_on
    Exit Sub
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_wp_ms")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
End Sub

Sub Outline_Hide()
    Dim MarkStart As Integer, MarkEnde As Integer, Ebene As Integer
    
    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    
    Set Markierung = Selection
    
    MarkStart = Markierung.Item(1).Row
    MarkEnde = Markierung.Item(Markierung.Cells.count).Row
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value

    If Markierung.Areas.count > 1 Then Exit Sub
    If MarkStart < Data_Startzeile Or MarkEnde <> MarkStart Or MarkEnde > Data_Endzeile_Struktur Then Exit Sub
    Ebene = nlc_phb_06.Cells(MarkStart, SpNr_Ebene).Value

    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    level = MarkStart + 1
    
    'Zu stufenden Bereich identifizieren
    While nlc_phb_06.Cells(level, SpNr_Ebene).Value <> "" And nlc_phb_06.Cells(level, SpNr_Ebene).Value > Ebene
        nlc_phb_06.Rows(level).Hidden = True
        level = level + 1
    Wend
    If nlc_phb_06.Rows(MarkStart + 1).Hidden = True Then
        nlc_phb_06.Cells(MarkStart, SpNr_Nr).Interior.ColorIndex = 18
         nlc_phb_06.Cells(MarkStart, SpNr_Nr).Font.ColorIndex = 26
    End If
    
    'Aktion nachbereiten
fehler:
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    
End Sub

Sub Outline_Show()
    Dim MarkStart As Integer, MarkEnde As Integer, Ebene As Integer
    
    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    Set Markierung = Selection
    
    MarkStart = Markierung.Item(1).Row
    MarkEnde = Markierung.Item(Markierung.Cells.count).Row
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value

    If Markierung.Areas.count > 1 Then Exit Sub
    If MarkStart < Data_Startzeile Or MarkEnde <> MarkStart Or MarkEnde > Data_Endzeile_Struktur Then Exit Sub
    Ebene = nlc_phb_06.Cells(MarkStart, SpNr_Ebene).Value
    
    level = MarkStart + 1
    
    'Zu stufenden Bereich identifizieren
    nlc_phb_06.Cells(MarkStart, SpNr_Nr).Interior.ColorIndex = 19
    nlc_phb_06.Cells(MarkStart, SpNr_Nr).Font.ColorIndex = 27
    While nlc_phb_06.Cells(level, SpNr_Ebene).Value <> "" And nlc_phb_06.Cells(level, SpNr_Ebene).Value > Ebene
        nlc_phb_06.Rows(level).Hidden = False
        nlc_phb_06.Cells(level, SpNr_Nr).Interior.ColorIndex = 19
        nlc_phb_06.Cells(level, SpNr_Nr).Font.ColorIndex = 27
        level = level + 1
    Wend
    
    'Aktion nachbereiten
fehler:
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    
End Sub

Public Sub Outline_Level(Ebene As Integer)

    On Error GoTo fehler
    
    'Aktion vorbereiten
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    'Aktion durchf|fffd|hren
    nlc_phb_06.Rows(Data_Startzeile + 1 & ":" & Data_Endzeile_Struktur).Hidden = False
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_Nr), nlc_phb_06.Cells(Data_Endzeile_Struktur, SpNr_Nr)).Interior.ColorIndex = 19
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_Nr), nlc_phb_06.Cells(Data_Endzeile_Struktur, SpNr_Nr)).Font.ColorIndex = 27
    For level = Data_Startzeile + 1 To Data_Endzeile_Struktur
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value = Ebene Then
            If nlc_phb_06.Cells(level, SpNr_Ebene).Value < nlc_phb_06.Cells(level + 1, SpNr_Ebene).Value Then
                nlc_phb_06.Cells(level, SpNr_Nr).Interior.ColorIndex = 18
                 nlc_phb_06.Cells(level, SpNr_Nr).Font.ColorIndex = 26
'                nlc_phb_06.Cells(level, SpNr_Nr).Interior.ColorIndex = 24
'                nlc_phb_06.Cells(level, SpNr_Nr).Font.ColorIndex = 27
            End If
        ElseIf nlc_phb_06.Cells(level, SpNr_Ebene).Value > Ebene Then
            nlc_phb_06.Rows(level).Hidden = True
        End If
    Next level
    
    'Aktion nachbereiten
fehler:
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    
End Sub

Sub Outline_hoch()
    
    On Error GoTo fehler
    Dim MarkStart As Integer, MarkEnde As Integer
    Dim Markierung As Range, MinEbene As Integer, MaxEbene As Integer
    Set Markierung = Selection
    
    'Sperren_Variable = True
    
    'Abfrage ob Bereich korrekt markiert wurde
    On Error Resume Next
    MarkStart = Markierung.Item(1).Row
    MarkEnde = Markierung.Item(Markierung.Cells.count).Row
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    On Error GoTo 0
    If Markierung.Areas.count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf MarkStart < Data_Startzeile Or MarkEnde < MarkStart Or MarkEnde > Data_Endzeile_Struktur Then
        Fehlercode = 2
        GoTo fehler
    End If
    MinEbene = 9
    MaxEbene = 1
    
    'Aktion vorbereiten
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    'Strukturvervollstaendigung
    Call Strukturvervollstaendigung
    
    'Zu stufenden Bereich identifizieren
    For level = MarkStart To MarkEnde
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value < MinEbene Then MinEbene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value > MaxEbene Then MaxEbene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
    Next level
    If MinEbene <= 2 Then
        Fehlercode = 3
        GoTo fehler
    End If
    For level = MarkStart To Data_Startzeile Step -1
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value <= MinEbene Then Exit For
        MarkStart = MarkStart - 1
    Next level
    For level = MarkEnde + 1 To Data_Endzeile_Struktur
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value <= MinEbene Then Exit For
        MarkEnde = MarkEnde + 1
    Next level
    
    'H|fffd|her stufen
    For level = MarkStart To MarkEnde
        nlc_phb_06.Cells(level, SpNr_Ebene).Value = nlc_phb_06.Cells(level, SpNr_Ebene).Value - 1
        nlc_phb_06.Cells(level, SpNr_ArtB).Value = ""
    Next level
    
    'Struktur aktualisieren
    Call Strukturvervollstaendigung
    nlc_phb_06.Calculate
    Call PSPCode_Generation
    Call Vorgangsformatierung
    Call Vorgangsartkopie
    nlc_phb_06.Range("e7").Calculate
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    GoTo ende
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_block_cells")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_move_level1")
    If Fehlercode = 4 Then Fehlertext = nlc_Language_Msgs("data_move_import")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    'Sperren_Variable = False
    Exit Sub
    
ende:
    'Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    'Sperren_Variable = False
        
End Sub

Sub Outline_runter()

    On Error GoTo fehler
    Dim MarkStart As Integer, MarkEnde As Integer
    Dim MinEbene As Integer, MaxEbene As Integer, EbenenLimit As Integer
    Set Markierung = Selection
    
    'Abfrage ob Bereich korrekt markiert wurde
    'Sperren_Variable = True
    On Error Resume Next
    MarkStart = Markierung.Item(1).Row
    MarkEnde = Markierung.Item(Markierung.Cells.count).Row
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    On Error GoTo 0
    If Markierung.Areas.count > 1 Then
        Fehlercode = 1
        GoTo fehler
    ElseIf MarkStart < Data_Startzeile Or MarkEnde < MarkStart Or MarkEnde > Data_Endzeile_Struktur Then
        Fehlercode = 2
        GoTo fehler
    End If
    MaxEbene = 1
    EbenenLimit = nlc_phb_59.Range("I10").Value
    MinEbene = EbenenLimit
    
    'Aktion vorbereiten
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    'Strukturvervollstaendigung
    Call Strukturvervollstaendigung
    
    'Zu stufenden Bereich identifizieren
    For level = MarkStart To Data_Startzeile Step -1
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value <= MinEbene Then Exit For
        MarkStart = MarkStart - 1
    Next level
    For level = MarkEnde + 1 To Data_Endzeile_Struktur
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value <= MinEbene Then Exit For
        MarkEnde = MarkEnde + 1
    Next level
    
    'Check M|fffd|glichkeit
    If nlc_phb_06.Cells(MarkStart, SpNr_Ebene).Value < 2 Or nlc_phb_06.Cells(MarkStart, SpNr_Ebene).Value > nlc_phb_06.Cells(MarkStart - 1, SpNr_Ebene).Value Then
        Fehlercode = 4
        GoTo fehler
    End If

    'Check Ebenen
    For level = MarkStart To MarkEnde
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value < MinEbene Then MinEbene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value > MaxEbene Then MaxEbene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
    Next level
    If MaxEbene >= EbenenLimit Then
        Fehlercode = 3
        GoTo fehler
    End If
    
    'Tiefer stufen
    For level = MarkStart To MarkEnde
        nlc_phb_06.Cells(level, SpNr_Ebene).Value = nlc_phb_06.Cells(level, SpNr_Ebene).Value + 1
        nlc_phb_06.Cells(level, SpNr_ArtB).Value = ""
    Next level
    
    'Struktur aktualisieren
    Call Strukturvervollstaendigung
    nlc_phb_06.Calculate
    Call PSPCode_Generation
    Call Vorgangsformatierung
    Call Vorgangsartkopie
    nlc_phb_06.Range("e7").Calculate
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    GoTo ende
    
fehler:
    On Error Resume Next
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    If Fehlercode = 0 Then Fehlertext = nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    If Fehlercode = 1 Then Fehlertext = nlc_Language_Msgs("data_block_cells")
    If Fehlercode = 2 Then Fehlertext = nlc_Language_Msgs("data_tasks_below")
    If Fehlercode = 3 Then Fehlertext = nlc_Language_Msgs("data_move_below") & EbenenLimit & "!"
    If Fehlercode = 4 Then Fehlertext = nlc_Language_Msgs("data_move_missing")
    If Fehlercode = 5 Then Fehlertext = nlc_Language_Msgs("data_below_import")
    MsgBox Prompt:=Fehlertext, Title:="Error"
    Exit Sub
    
ende:
    'Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    
End Sub

Public Sub refresh_graphics()
    
    On Error GoTo fehler
    'Sperren_Variable = True
    
        nlc_intern.application_off
        
        nlc_phb_06.Range("N7").Value = frm_DataButtons.top
        nlc_phb_06.Range("O7").Value = frm_DataButtons.left
        
        Call nlc_intern.nlc_unprotect(nlc_phb_06)
        'Aktion durchf|fffd|hren
        Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
        Call nlc_aps
        Call nlc_06.SV_Short
        
        nlc_phb_06.Calculate
        DoEvents
        
    If nlc_phb_08.Visible = xlSheetVisible Then
        Application.StatusBar = WorksheetFunction.VLookup("calculatePsP", nlc_phb_TL.Range("B4:E65536"), 4, False)
        Call nlc_08.Refresh
    End If
    If nlc_phb_12.Visible = xlSheetVisible Then
        Application.StatusBar = WorksheetFunction.VLookup("calculatemst", nlc_phb_TL.Range("B4:E65536"), 4, False)
        Call nlc_12.Refresh
    End If
    If nlc_phb_14.Visible = xlSheetVisible Then
        Application.StatusBar = WorksheetFunction.VLookup("calculateGantt", nlc_phb_TL.Range("B4:E65536"), 4, False)
        Call nlc_14.RefreshGantt
    End If
    Application.StatusBar = WorksheetFunction.VLookup("calculateRKV", nlc_phb_TL.Range("B4:E65536"), 4, False)
    Call nlc_53.Refresh
   
    Application.StatusBar = ""

ende:
    'Aktion abschliessen

    nlc_intern.application_on
    
    Call nlc_intern.nlc_protect(nlc_phb_06)


    nlc_phb_06.Select
    nlc_phb_06.Range("A1").Select
    
    Exit Sub

fehler:
    MsgBox nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description

    nlc_intern.application_on
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_phb_06.Select
    nlc_phb_06.Range("A1").Select
End Sub







Attribute VB_Name = "frm_Kalender"
Attribute VB_Base = "0{AE7FAC48-DE5F-4942-B13D-DCA9A1FDFF8A}{B467D52C-7117-454D-BE8F-9658B7A04844}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public aktDat As Date
Public Gewaehlt As Date
Public strDat As String
Public firstSpin As Boolean
Public isDate1 As Boolean





'Private Sub btn_Gewaehlt_Click()
'If isDate1 = True Then
'    Gewaehlt = Selection.Cells(1, 1).Value
'    aktDat = Selection.Cells(1, 1).Value
'    Call Einsetzen2
'End If
'End Sub

'Private Sub Heute_zeigen_Click()
'aktDat = Date
'Call Einsetzen
'End Sub

Private Sub lbl_Gewaehlt_Click()
If isDate1 = True Then
    Gewaehlt = Selection.Cells(1, 1).Value
    aktDat = Selection.Cells(1, 1).Value
    Call Einsetzen2
End If
End Sub

Private Sub lbl_Heute_Click()
aktDat = Date
Call Einsetzen
End Sub

Private Sub SpinButton1_SpinDown_Click()
If isDate1 = True Then Gewaehlt = ActiveCell.Value
If Gewaehlt <> "00:00:00" And firstSpin = True Then
    aktDat = DateSerial(Year(Gewaehlt) - 1, Month(Gewaehlt), 1)
    firstSpin = False
    Call Einsetzen
Else
    aktDat = DateSerial(Year(aktDat) - 1, Month(aktDat), 1)
    Call Einsetzen
End If
End Sub

Private Sub SpinButton1_SpinUp_Click()
If isDate1 = True Then Gewaehlt = ActiveCell.Value
If Gewaehlt <> "00:00:00" And firstSpin = True Then
    aktDat = DateSerial(Year(Gewaehlt) + 1, Month(Gewaehlt), 1)
    firstSpin = False
    Call Einsetzen
Else
    aktDat = DateSerial(Year(aktDat) + 1, Month(aktDat), 1)
    Call Einsetzen
End If
End Sub

Private Sub SpinButton2_SpinDown_Click()
If isDate1 = True Then Gewaehlt = ActiveCell.Value
If Gewaehlt <> "00:00:00" And firstSpin = True Then
    aktDat = DateSerial(Year(Gewaehlt), Month(Gewaehlt) - 1, 1)
    firstSpin = False
    Call Einsetzen
Else
    aktDat = DateSerial(Year(aktDat), Month(aktDat) - 1, 1)
    Call Einsetzen
End If
End Sub

Private Sub SpinButton2_SpinUp_Click()
If isDate1 = True Then Gewaehlt = ActiveCell.Value
If Gewaehlt <> "00:00:00" And firstSpin = True Then
    aktDat = DateSerial(Year(Gewaehlt), Month(Gewaehlt) + 1, 1)
    firstSpin = False
    Call Einsetzen
Else
    aktDat = DateSerial(Year(aktDat), Month(aktDat) + 1, 1)
    Call Einsetzen
End If
End Sub


Public Sub UserForm_Initialize()
    nlc_phb_06.IsCalOpen = True
    Dim iCounter
    Dim LB As Control
    Dim LabelCount1 As Integer
    Dim Gewaehlt As Date
    Dim strGewaehlt As String
    Dim strKontrolle As Boolean
    Dim UserForm As String
    
    UserForm = "frm_Kalender"
    
    If IsDate(Selection.Cells(1, 1).Value) Then
        Gewaehlt = Selection.Cells(1, 1).Value
        firstSpin = True
        strKontrolle = False
        isDate1 = True
    Else
        firstSpin = False
        isDate1 = False
        If Selection.Cells(1, 1).Value <> "" Then
            strGewaehlt = Selection.Cells(1, 1).Value
            strKontrolle = True
        Else
            Gewaehlt = Selection.Cells(1, 1).Value
            strKontrolle = False
        End If
    End If
    '###################################################################################################################################################################################################
    Dim PS As Positions
    Me.StartupPosition = 0
    PS = PositionForm(Me, ActiveCell.Cells(1, 1), 0, 0, cstFhpFormLeftCellRight, cstFvpFormBottomCellBottom)    '   Position der Userform wird festgelegt
    Select Case ActiveWindow.Zoom   ' Kopensiert wage den Zoomfaktor f|fffd|r die Position
        Case Is < 100
            If ActiveSheet.name = nlc_phb_06.name Then
                Me.top = PS.FrmTop + 243
                Me.left = PS.FrmLeft + 250
            Else
                Me.top = PS.FrmTop + 145
                Me.left = PS.FrmLeft - 40
            End If
        Case Is = 100
            If ActiveSheet.name = nlc_phb_06.name Then
                Me.top = PS.FrmTop + 270
                Me.left = PS.FrmLeft + 300
            Else
                Me.top = PS.FrmTop + 165
                Me.left = PS.FrmLeft - 40
            End If
        Case Is <= 120
            If ActiveSheet.name = nlc_phb_06.name Then
                Me.top = PS.FrmTop + 270
                Me.left = PS.FrmLeft + 120
            Else
                Me.top = PS.FrmTop + 190
                Me.left = PS.FrmLeft - 40
            End If
        Case Is <= 150
            If ActiveSheet.name = nlc_phb_06.name Then
                Me.top = PS.FrmTop + 270
                Me.left = PS.FrmLeft + 200
            Else
                Me.top = PS.FrmTop + 240
                Me.left = PS.FrmLeft - 40
            End If
    End Select
    '###################################################################################################################################################################################################
    aktDat = Date
'    Heute_zeigen.Caption = "Heute: "    ' Sprachformel
'    btn_Gewaehlt.Caption = "Gew|fffd|hlt"    ' Sprachformel
    lbl_Heute.Caption = nlc_Language_userforms("frm_Kalender", "Heute_zeigen") & " " & Date     ' lbl_Gewaehlt --> kann hier definiert werden + soll den Inhalt der Gewaehlten Zelle anzeigen - vlt mittels string
    If Gewaehlt <> "00:00:00" Then lbl_Gewaehlt.Caption = nlc_Language_userforms("frm_Kalender", "btn_Gewaehlt") & " " & Gewaehlt
    For Each LB In frm_Kalender.Controls
        If TypeName(LB) = "Label" Then
            LabelCount1 = LabelCount1 + 1
            If LabelCount1 > 6 And LabelCount1 < 49 Then
                ReDim Preserve cLabel(1 To LabelCount1)
                Set cLabel(LabelCount1).Label1 = LB
            End If
        End If
    Next LB
    If Gewaehlt = "00:00:00" Then
        Call Einsetzen
    Else
        Call Einsetzen2
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    nlc_phb_06.IsCalOpen = False
End Sub


Function ErsterKW(KW As Integer, Jhr As Integer) As Double
    Dim Erstertag As Double
    If Month(aktDat) = 1 And KW > 51 Then Jhr = Jhr - 1
    Erstertag = DateSerial(Jhr, 1, 1)
    Do Until DatePart("WW", Erstertag, 2, 2) = 2
        Erstertag = Erstertag + 1
    Loop
    ErsterKW = DateAdd("WW", KW - 2, Erstertag)
End Function

Private Function KWoche(Datum As Date)
    Dim t As Long
    t = DateSerial(Year(Datum + (8 - Weekday(Datum)) Mod 7 - 3), 1, 1)
    KWoche = ((Datum - t - 3 + (Weekday(t) + 1) Mod 7)) \ 7 + 1
End Function
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Function ErsterKW2(KW As Integer, Jhr As Integer) As Double
    Dim Erstertag As Double
    If Month(aktDat) = 1 And KW > 51 Then Jhr = Jhr - 1
    Erstertag = DateSerial(Jhr, 1, 1)
    Do Until DatePart("WW", Erstertag, 2, 2) = 2
        Erstertag = Erstertag + 1
    Loop
    ErsterKW2 = DateAdd("WW", KW - 2, Erstertag)
End Function
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Sub Einsetzen()
    Dim jCounter As Integer, KWZaehler As Integer
    Dim Blue As String, Orange As String, Green As String, Color As String, BorderColor As String
    Dim Gewaehlt As Date
    Dim Tagzaehler As Date
    Dim Feiertag As Date
    
    Blue = "&H00E09D00"
    Orange = "&HBBE0FF"
    Green = "&H0035BFA1"
    
    If isDate1 = True Then Gewaehlt = Selection.Cells(1, 1).Value
    Call SprachAenderung(aktDat)
    Tagzaehler = ErsterKW(KWoche(DateSerial(Year(aktDat), Month(aktDat), 1)), Year(aktDat))
    KWZaehler = 1
    For jCounter = 1 To 6
        frm_Kalender.Controls("Label" & jCounter).Caption = KWoche(DateSerial(Year(aktDat), Month(aktDat), KWZaehler))
        KWZaehler = KWZaehler + 7
    Next jCounter
    For jCounter = 7 To 48
        BorderColor = 14737632
        If Date = Tagzaehler And Gewaehlt = Date Then
            Color = Blue '&HBBE0FF
            BorderColor = Green
        ElseIf Tagzaehler = Date Then
            Color = Blue
        ElseIf Gewaehlt = Tagzaehler Then
            Color = Green
        Else
            Color = &HFFFFFF
        End If
        With frm_Kalender.Controls("Label" & jCounter)
            .tag = Tagzaehler
            .Caption = Format(Tagzaehler, "d")
            .BorderColor = BorderColor '14737632
            .BackColor = Color
            If Feiertag <> "00:00:00" Then
                .ForeColor = &HFF&
                Feiertag = "00:00:00"
            Else
                If Color = &HFFFFFF Then
                    .ForeColor = IIf(Month(Tagzaehler) <> Month(aktDat), &HC0C0C0, IIf(Weekday(Tagzaehler, 2) > 5, &H808080, &H0&))
                Else
                    .ForeColor = &HFFFFFF
                End If
            End If
            
        End With
        Tagzaehler = Tagzaehler + 1
    Next jCounter
End Sub

Sub Einsetzen2()
    Dim jCounter As Integer, KWZaehler As Integer
    Dim Blue As String, Orange As String, Green As String, Color As String
    Dim Gewaehlt As Date
    Dim Tagzaehler As Date
    Dim Feiertag As Date
    
    Blue = "&H00E09D00"
    Orange = "&HBBE0FF"
    Green = "&H0035BFA1"
    Gewaehlt = Selection.Cells(1, 1).Value
    
    If Gewaehlt <> "00:00:00" Then
        Call SprachAenderung(Gewaehlt)
        Tagzaehler = ErsterKW(KWoche(DateSerial(Year(Gewaehlt), Month(Gewaehlt), 1)), Year(Gewaehlt))
        KWZaehler = 1
        For jCounter = 1 To 6
            frm_Kalender.Controls("Label" & jCounter).Caption = KWoche(DateSerial(Year(Gewaehlt), Month(Gewaehlt), KWZaehler))
            KWZaehler = KWZaehler + 7
        Next jCounter
        For jCounter = 7 To 48
            With frm_Kalender.Controls("Label" & jCounter)
                If Date = Tagzaehler And Date = Gewaehlt Then
                    Color = Green
                    .BorderColor = Blue
                    .BorderStyle = fmBorderStyleSingle
                ElseIf Tagzaehler = Date Then
                    Color = Blue
                ElseIf Gewaehlt = Tagzaehler Then
                    Color = Green
                Else
                    Color = &HFFFFFF
                End If
                
                .tag = Tagzaehler
                .Caption = Format(Tagzaehler, "d")
                .BackColor = Color
                If Feiertag <> "00:00:00" Then
                    .ForeColor = &HFF&
                    Feiertag = "00:00:00"
                Else
                    If Color = &HFFFFFF Then
                        .ForeColor = IIf(Month(Tagzaehler) <> Month(Gewaehlt), &HC0C0C0, IIf(Weekday(Tagzaehler, 2) > 5, &H808080, &H0&))
                    Else
                        .ForeColor = &HFFFFFF
                    End If
                End If
                
            End With
            Tagzaehler = Tagzaehler + 1
        Next jCounter
    End If
End Sub

Sub SprachAenderung(Datum As Date)
        frm_Kalender.Caption = nlc_Language_userforms("frm_Kalender", "Titel") '"Today: "
        'Heute_zeigen.Caption = nlc_Language_userforms("frm_Kalender", "Heute_zeigen") '"Today: "
        'btn_Gewaehlt.Caption = nlc_Language_userforms("frm_Kalender", "btn_Gewaehlt") '"Chosen"
    With frm_Kalender
        If nlc_phb_TL.Range("E3").Value <> "deutsch" Then
            .Anzeige.Caption = Application.text(Datum, "[$-409]MMMM YYYY;@")
            .Label50.Caption = "Mon"
            .Label51.Caption = "Tue"
            .Label52.Caption = "Wed"
            .Label53.Caption = "Thu"
            .Label54.Caption = "Fri"
            .Label55.Caption = "Sat"
            .Label56.Caption = "Sun"
            .Label57.Caption = "W"
        Else
            .Anzeige.Caption = VBA.Format(Datum, "mmmm yyyy")
            .Label50.Caption = "Mo"
            .Label51.Caption = "Di"
            .Label52.Caption = "Mi"
            .Label53.Caption = "Do"
            .Label54.Caption = "Fr"
            .Label55.Caption = "Sa"
            .Label56.Caption = "So"
            .Label57.Caption = "KW"
        End If
    End With
End Sub
Attribute VB_Name = "frm_NewDB"
Attribute VB_Base = "0{CF1C0BF3-53E0-4EC0-A6B7-80CA6190AA4E}{35F4BCF3-9C9F-4A73-BD8F-0B3CE660A20D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Initialize()
    Me.Caption = nlc_Language_userforms(Me.name, "Titel")
    Me.rdb_chooseXML.Caption = nlc_Language_userforms(Me.name, "rdb_chooseXML")
    Me.rdb_retry.Caption = nlc_Language_userforms(Me.name, "rdb_retry")
    Me.btn_ok.Caption = nlc_Language_userforms(Me.name, "btn_ok")
    Me.btn_cancel.Caption = nlc_Language_userforms(Me.name, "btn_cancel")
    
    Me.rdb_retry.Value = True
End Sub

Private Sub btn_cancel_Click()
    nls_Database.dbUserReply = nlsCancel
    Unload Me
End Sub

Private Sub btn_ok_Click()
    If Me.rdb_retry.Value Then
        nls_Database.dbUserReply = nlsRetry
    Else
        nls_Database.dbUserReply = nlsChooseXML
    End If
    
    Unload Me
End Sub

Attribute VB_Name = "nlc_00"
Option Explicit
Option Private Module

Dim nlc_pw As String

Private Sub cmblanguage_Change()
    
    Call nlc_00.spracheClick
    nlc_phb_00.Calculate
    nlc_phb_TL5.Calculate
    
End Sub

Public Sub print_allClick(pdf As Boolean)
    Dim i, j As Integer
    Dim nlc_pw As String
    Dim blatt As String
    Dim finished As Boolean
    
    Dim colors As Variant
    
    Dim savepath As String
    Dim temp As String
    
    On Error GoTo fehler
    

    nlc_intern.application_off
    
    If ActiveWorkbook.Path <> "" Then
        colors = ActiveWorkbook.colors(17)
        ActiveWorkbook.colors(17) = RGB(255, 255, 255)
    End If

    Dim blaetterv() As String
    ReDim blaetterv(nlc_phb_TL2.Range("A3").Value - 1)

    i = 4
    j = 0
    While Not IsEmpty(nlc_phb_TL2.Cells(i, 2).Value)
        Err.Clear
        blatt = nlc_intern.nlc_search_name(ThisWorkbook, nlc_phb_TL2.Cells(i, 2).Value)
        If blatt <> "" Then
            If nlc_phb_TL2.Range("A3").Value - 1 >= j Then blaetterv(j) = blatt
            'Sheets(blatt).Visible = xlSheetVisible
            j = j + 1
        End If
        i = i + 1
    Wend
    nlc_phb_00.Select

    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic

    Sheets(blaetterv).Select

    finished = False
    
    If pdf = True Then
        savepath = ActiveWorkbook.Path & "\" & VBA.left(ActiveWorkbook.name, VBA.Len(ActiveWorkbook.name) - 5) & ".pdf"
        temp = Application.GetSaveAsFilename(InitialFileName:=savepath, fileFilter:="PDF Files (*.pdf), *.pdf")
    
        If temp <> "Falsch" Then

            '#If VBA7 Then
                ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, Filename:= _
                    temp, Quality:=xlQualityStandard _
                    , IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:= _
                    True
            '#End If
            finished = 1
        Else
            finished = 0
        End If
    Else
        If Application.Dialogs(xlDialogPrint).Show() = True Then finished = True
    End If

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    nlc_phb_00.Select
    If ActiveWorkbook.Path <> "" Then ActiveWorkbook.colors(17) = colors

fehler:

    nlc_intern.application_on
   ' If nlc_phb_PW.Range("C4").Value = "YES" Then nlc_phb_xs.Protect Password:=nlc_PW, Structure:=True, Windows:=False
    If finished = True Then MsgBox nlc_Language_Msgs("phb_printed"), Title:="Information"

End Sub

Public Sub Sperren_Click()

    On Error Resume Next
    
    If nlc_phb_PW.Range("C4").Value = "YES" Then
        Passwort_2.Show
        Exit Sub
    End If
    
    On Error GoTo fehler
        
    nlc_phb_PW.Range("C4").Value = "YES"
    nlc_intern.application_off
    
    Call nlc_ListGen(0)
    
    'Datenblatt: Spalten ein- und ausblenden, Logo positionieren, Pr|fffd|fen ob Inhalte in Spalten vorhanden sind die ausgeblendet werden
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    Call nlc_06.close_admin(0)
    Call nlc_06.LayoutSpalten
    Call Logo_Positionieren(nlc_phb_06.name, 4, 0)
    
    'Deckblatt: Zeilen der Kategorien ein- und ausblenden
    Call nlc_intern.nlc_unprotect(nlc_phb_00)
    Dim i As Integer
    
    If nlc_phb_PW.Cells(25, 3).Value = "x" Then
        'Call nlc_intern.nlc_unprotect(nlc_phb_00)
        If nlc_phb_90.Range("PJID").Value = "" Then
            Call nlc_intern.lockPJNr(False) 'Wenn keine Projekt ID vorhanden, dann Projektnummer entsperren
        Else
            Call nlc_intern.lockPJNr(True)
        End If
        'Call nlc_intern.nlc_protect(nlc_phb_00)
    End If
    
    nlc_phb_PW.Range("C4").Value = "YES"
    
    nlc_phb_PW.Calculate
    nlc_phb_61.Calculate
    
    Call nlc_intern.nlc_protect
    Call nlc_intern.blatt_hiddenvisible(Nothing)
    
    nlc_phb_00.Select

   
ende:
    nlc_phb_00.Select
    nlc_intern.application_on
    On Error Resume Next
    Exit Sub
fehler:
    nlc_phb_PW.Range("C4").Value = "NO"
    nlc_phb_00.Select
    nlc_intern.application_on
    On Error Resume Next
End Sub

Public Sub print_selectClick(pdf As Boolean)

'
'    Dim blaetterv() As String
'    blaetterv_anz = nlc_phb_01.Range("P6").Value - 1
'    ReDim blaetterv(blaetterv_anz)
'
'    nlc_pw = nlc_intern.get_pw
'    nlc_phb_xs.Unprotect (nlc_pw)
'
'    nlc_phb_57.Visible = xlSheetVisible
'
'    j = 0
'
'    For i = 7 To 56 'alle ausgew|fffd|hlten Bl|fffd|tter einblenden
'        Err.Clear
'        If nlc_phb_01.Cells(i, 4).Value <> "" Then
'            If nlc_phb_01.Cells(i, 12).Value = "x" And nlc_phb_01.Cells(i, 13).Value = "x" And nlc_phb_01.Cells(i, 16).Value > 0 Then
'                If nlc_phb_01.Cells(i, 15).Value = "nlc_phb_35" Then
'                    nlc_35.letzte 'Statusbericht auf den letzten Bl|fffd|ttern
'                    nlc_intern.application_off
'                End If
'
'                If nlc_phb_01.Cells(i, 15).Value = "nlc_phb_10" And nlc_phb_06.Cells(37, SpNr_APSpez).Value > 0 Then  'AP-Spez
'                    Call nlc_10.Refresh
'                    Call nlc_10.generiere_druck
'                    Blatt = nlc_phb_57.name
'                    Call nlc_10.Refresh
'                Else
'                    If nlc_phb_01.Cells(i, 15).Value = "nlc_phb_21" Then nlc_21.SetPageBreaks
'                    Blatt = nlc_intern.nlc_search_name(ThisWorkbook, nlc_phb_01.Cells(i, 15).Value)
'                    Sheets(Blatt).Visible = xlSheetVisible
'                End If
'                blaetterv(j) = Blatt
'                j = j + 1
'            End If
'        End If
'    Next i
'
'    nlc_phb_01.Select
'
'    Call nlc_01.zaehleseiten(16)
'
'    Application.ScreenUpdating = True
'    Application.Calculation = xlCalculationAutomatic
'
'    Sheets(blaetterv).Select
'
'    finished = 2
'
'    If pdf = True Then
'        savepath = ActiveWorkbook.Path & "\" & VBA.left(ActiveWorkbook.name, VBA.Len(ActiveWorkbook.name) - 5) & ".pdf"
'        temp = Application.GetSaveAsFilename(InitialFileName:=savepath, fileFilter:="PDF Files (*.pdf), *.pdf")
'
'        If temp <> "Falsch" Then
'
'            '#If VBA7 Then
'                ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, filename:= _
'                    temp, Quality:=xlQualityStandard _
'                    , IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:= _
'                    True
'            '#End If
'            finished = 0
'        Else
'            finished = 1
'        End If
'    Else
'        If Application.Dialogs(xlDialogPrint).Show() = True Then
'            finished = 0
'        Else
'            finished = 1
'        End If
'    End If
'
'    nlc_intern.application_off
'
'    nlc_phb_57.Select
'    nlc_phb_57.Rows("5:5000").Delete Shift:=xlUp
'
'    If nlc_phb_10.Visible = xlSheetVisible Then
'        nlc_phb_10.Select
'    End If
'
'Fehler:
'    nlc_phb_01.Select
'    If nlc_phb_xs.ProtectStructure = False Then nlc_phb_57.Visible = xlSheetVeryHidden
'
'    nlc_intern.application_on
'
'    If ActiveWorkbook.Path <> "" Then
'        ActiveWorkbook.colors(17) = colors
'    End If
'    If nlc_phb_PW.Range("C4").Value = "YES" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect Password:=nlc_pw, Structure:=True, Windows:=False
'
'    If finished = 0 And pdf = False Then
'        MsgBox nlc_Language_Msgs("phb_printed"), Title:="Information"
'    ElseIf finished = 0 And pdf = True Then
'        MsgBox nlc_Language_Msgs("phb_saved_as_PDF"), Title:="Information"
'    ElseIf finished = 2 Then
'         MsgBox nlc_Language_Msgs("phb_errors_occured"), Title:="Information"
'    End If

End Sub


Public Sub cmdShowEingabefelder_Click()
    
    If ActiveWorkbook.Path = "" Then Exit Sub
    
    On Error GoTo fehler
    If ActiveWorkbook.colors(17) = RGB(255, 255, 204) Then
        ActiveWorkbook.colors(17) = RGB(255, 255, 255)
        nlc_phb_51.Range("AE1").Value = "x"
    Else
        ActiveWorkbook.colors(17) = RGB(255, 255, 204)
        nlc_phb_51.Range("AE1").Value = ""
    End If
    
    'Call change_button("nlc_phb_00", "cmdShowEingabefelder", nlc_functions.nlc_Language(nlc_phb_TL.Range("E3").Value, "show-hide_contents"), "", "")
    nlc_phb_00.Cells(1, 1).Select
    Exit Sub
fehler:
    Err.Clear
    MsgBox Err.Description
End Sub


Public Sub GrafikClick()
    
    Dim XObj As Object
    Dim Logo As Variant
    
    nlc_intern.application_off
    
    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_00)
    
    Logo = ""
    On Error Resume Next
    nlc_phb_00.Pictures("projectlogo").Delete
    Err.Clear
    
    On Error GoTo fehler
    nlc_phb_00.Select
    nlc_phb_00.Range("B19").Select
    Logo = Application.GetOpenFilename("Project or Customer Logo (*.jpg; *.bmp; *.gif; *.png),*.jpg;*.bmp;*.gif;*.png", , "Import Logo")
    If Logo <> "" And Logo <> False Then
        nlc_phb_00.Pictures.Insert(Logo).Select

        Selection.ShapeRange.LockAspectRatio = msoTrue
        Selection.ShapeRange.width = 430
        If Selection.ShapeRange.Height > 300 Then
            Selection.ShapeRange.Height = 300
        End If
        
        Selection.Cut
        ActiveSheet.Pictures.Paste.Select
        
        Selection.name = "projectlogo"
        
        Selection.ShapeRange.top = nlc_phb_00.Cells(19, 2).top
        Selection.ShapeRange.left = nlc_phb_00.Cells(19, 2).left

        SendKeys "w"
        SendKeys "{Enter}"
        SendKeys "{Enter}"
        
        Application.CommandBars.FindControl(ID:=6382).Execute

    End If
        
fehler:
    Err.Clear
    nlc_phb_00.Select
    nlc_phb_00.Range("A1").Select
    
    Call nlc_intern.nlc_protect(nlc_phb_00)
    nlc_intern.application_on
End Sub

Sub spracheClick()
    
    On Error GoTo fehler
    nlc_pw = nlc_intern.get_pw
    nlc_phb_xs.Unprotect (nlc_pw)
    
    Call sprache_refresh
     
    nlc_phb_90.Calculate
    Call nlc_ListGen(0)

fehler:
    If nlc_phb_PW.Range("C4") = "YES" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect Password:=nlc_pw, Structure:=True, Windows:=False
       
    nlc_intern.application_on
End Sub

Sub sprache_refresh()
    Application.CalculateFull
    nlc_intern.application_off
    Call Change_Sheetname
End Sub


    
Attribute VB_Name = "nlc_02"
Option Explicit
Option Private Module

Const startzeile = 1
Const endzeile = 108
Const markspalte = 16

Dim nlc_pw As String

Public Sub nlc_responsibilities()

    Dim zeile As Integer, i As Integer
    Dim spalte As Integer
    Dim startzeile As Integer

    spalte = 16
    startzeile = 11
    zeile = startzeile

    nlc_phb_51.Range(nlc_phb_51.Cells(zeile, spalte), nlc_phb_51.Cells(zeile + 50, spalte)).ClearContents
    If nlc_phb_02.Cells(76, 2).Value <> "" Then
        nlc_phb_51.Cells(zeile, spalte).Value = nlc_phb_02.Cells(76, 2).Value
        zeile = zeile + 1
    End If
    If nlc_phb_02.Cells(76, 7).Value <> "" Then
        nlc_phb_51.Cells(zeile, spalte).Value = nlc_phb_02.Cells(76, 7).Value
        zeile = zeile + 1
    End If
    For i = 82 To 106
        If nlc_phb_02.Cells(i, 2).Value <> "" Then
            nlc_phb_51.Cells(zeile, spalte).Value = nlc_phb_02.Cells(i, 2).Value
            zeile = zeile + 1
        End If
    Next i
    For i = 82 To 106
        If nlc_phb_02.Cells(i, 7).Value <> "" Then
            nlc_phb_51.Cells(zeile, spalte).Value = nlc_phb_02.Cells(i, 7).Value
            zeile = zeile + 1
        End If
    Next i
    If zeile > startzeile Then
        nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, spalte), nlc_phb_51.Cells(zeile - 1, spalte)).Sort Key1:=nlc_phb_51.Cells(startzeile, spalte), Order1:=xlAscending, Header:=xlNo
        ActiveWorkbook.Names.Add name:="verantwortung", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, spalte), nlc_phb_51.Cells(zeile - 1, spalte))
    Else
        ActiveWorkbook.Names.Add name:="verantwortung", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, spalte), nlc_phb_51.Cells(startzeile, spalte))
    End If
End Sub

Public Sub btn_refreshClick()
    
    On Error GoTo ende
    
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_02)
    nlc_02.Refresh
ende:
    Call nlc_intern.nlc_protect(nlc_phb_02)
    nlc_intern.application_on
    
End Sub

Sub Refresh()

    
 'Aktion vorbereiten
    Dim level As Integer
    Dim phasen As String
    Dim zeile As Integer
    Dim spalte As Integer
    Dim anzahl As Integer
    Dim zaehlen As Integer
    
    If MsgBox(nlc_Language_Msgs("assignment"), vbOKCancel) = vbOK Then
        
        nlc_phb_02.Select
        nlc_phb_02.Range("A1").Select
        
    'Start & Enddatum aus aktuelle Termine Daten
        nlc_phb_02.Range("G5").Value = nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_S).Value
        nlc_phb_02.Range("G8").Value = nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value
        
    'Ressourcen & Kosten laden
        zeile = 54
        nlc_phb_02.Range("G54:I56").Value = ""
        For level = 54 To 56
            If (VBA.IsNumeric(nlc_phb_02.Cells(level, 14).Value) And nlc_phb_02.Cells(level, 14).Value <> 0) Or (VBA.IsNumeric(nlc_phb_02.Cells(level, 15).Value) And nlc_phb_02.Cells(level, 15).Value <> 0) Then
                nlc_phb_02.Range(nlc_phb_02.Cells(zeile, 7), nlc_phb_02.Cells(zeile, 9)).Value = nlc_phb_02.Range(nlc_phb_02.Cells(level, 13), nlc_phb_02.Cells(level, 15)).Value
                zeile = zeile + 1
            End If
        Next level
        
     'Phasen laden
        nlc_phb_02.Range("B54:E63").Value = ""
        level = Data_Startzeile
    
        zeile = 54
        While nlc_phb_06.Cells(level, SpNr_Nr).Value <> "END"
            If nlc_phb_06.Cells(level, SpNr_Ebene).Value = 2 And nlc_phb_06.Cells(level, SpNr_Name).Value <> "" Then
                nlc_phb_02.Cells(zeile, 2).Value = nlc_phb_06.Cells(level, SpNr_Name).Value
                nlc_phb_02.Cells(zeile, 5).Value = nlc_phb_06.Cells(level, SpNr_DateA_E).Value
                zeile = zeile + 1
            End If
            level = level + 1
        Wend
                   
        Call zeileneinausblenden
        
     'Aktion nachbereiten
        nlc_phb_02.Select
        nlc_phb_02.Range("A1").Select
    End If
End Sub


Public Sub WorksheetChange(Target As Range)
    If ((Target.Row >= 17 And Target.Row <= 26) And Target.Column = 2) Or ((Target.Row >= 29 And Target.Row <= 38) And Target.Column = 2) Or ((Target.Row >= 41 And Target.Row <= 50) And Target.Column = 2) Then
        Call nlc_intern.nlc_unprotect(nlc_phb_02)
        nlc_intern.application_off
        nlc_phb_02.Rows(Target.Row).EntireRow.AutoFit
'        If Selection.row > Target.row Then
'            Call nlc_02.zeileneinausblenden(Target.row + 1, Target.Column)
'        ElseIf Selection.row < Target.row Then
'            Call nlc_02.zeileneinausblenden(Target.row - 1, Target.Column)
'        Else
'            Call nlc_02.zeileneinausblenden(Target.row, Target.Column)
'        End If
        Call nlc_02.zeileneinausblenden(Selection.Row, Target.Column)
        Call nlc_intern.nlc_protect(nlc_phb_02)
        nlc_intern.application_on
    ElseIf ((Target.Row >= 54 And Target.Row <= 73) Or (Target.Row >= 82 And Target.Row <= 106)) And (Target.Column = 2 Or Target.Column = 3 Or Target.Column = 5 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 10) Then
        Call nlc_intern.nlc_unprotect(nlc_phb_02)
        nlc_intern.application_off
'        If Selection.row > Target.row Then
'            Call nlc_02.zeileneinausblenden(Target.row + 1, Target.Column)
'        ElseIf Selection.row < Target.row Then
'            Call nlc_02.zeileneinausblenden(Target.row - 1, Target.Column)
'        Else
'            Call nlc_02.zeileneinausblenden(Target.row, Target.Column)
'        End If
        Call nlc_02.zeileneinausblenden(Selection.Row, Target.Column)
        Call nlc_intern.nlc_protect(nlc_phb_02)
        nlc_intern.application_on
    End If
End Sub



Public Sub zeileneinausblenden(Optional zeile As Byte = 1, Optional spalte As Byte = 1)
    Dim i As Integer
    
    On Error GoTo ende
    nlc_phb_02.Rows(startzeile & ":" & endzeile).Hidden = False
    
    For i = startzeile To endzeile
        If nlc_phb_02.Cells(i, markspalte).Value = "" Then
            nlc_phb_02.Rows(i).Hidden = True
        End If
    Next i
    
    ActiveSheet.Cells(zeile, spalte).Activate
ende:
End Sub



Attribute VB_Name = "nlc_05"
Option Explicit
Option Private Module

Dim nlc_pw As String

Const startzeile = 36
Const endzeile = 55
Const inhaltsspalte = 3
Const Bereich = "M36:S55"

Public Sub WorksheetChange(Target As Range)
    If (Target.Row >= startzeile And Target.Row <= endzeile) And (Target.Column = 13 Or Target.Column = 18 Or Target.Column = 26 Or Target.Column = 46 Or Target.Column = 56) Then
        Call nlc_intern.nlc_unprotect(nlc_phb_05)
        nlc_intern.application_off
        nlc_phb_05.Rows(Target.Row).EntireRow.AutoFit
        Call nlc_intern.nlc_protect(nlc_phb_05)
        nlc_intern.application_on
    End If
End Sub


Public Sub AKTUELLClick()
    
    nlc_intern.application_off
    nlc_05.Refresh
    nlc_intern.application_on
End Sub


Public Sub Refresh()

' Aktion vorbereiten
    Dim nlc_pw As String
    Dim count As Integer
    Dim level As Integer
    Dim akt_worksheet As Worksheet
    Dim i As Integer
    Dim kWidth As Double
    Dim kHeight As Double
    Dim kTop As Double
    Dim kLeft As Double
    Dim weite As Integer
    Dim hoehe As Integer
    
    Dim cluster As Byte
    
    On Error GoTo ende
    
    nlc_pw = nlc_intern.get_pw
    
    Set akt_worksheet = nlc_phb_05
    
    Call nlc_intern.nlc_unprotect(akt_worksheet)

    Dim nlczoom As Integer
    nlczoom = ActiveWindow.Zoom
    ActiveWindow.Zoom = 100
    
    With akt_worksheet
    
        .Activate
        .Range("A1").Select
'        .Rows(startzeile & ":" & endzeile).Hidden = False

'    ' Leerzeilen filtern
'        count = 0
'        For level = startzeile To endzeile
'        If .Cells(level, inhaltsspalte).Value = "" Then
'            count = count + 1
'            If count > 3 Then
'                If level > startzeile + 4 Then
'                    .Rows(level & ":" & endzeile).Hidden = True
'                Else
'                    .Rows(startzeile + 5 & ":" & endzeile).Hidden = True
'                End If
'                Exit For
'            End If
'        Else
'            count = 0
'        End If
'        Next level
        
    'Umwelten der Hintergrundtabelle zuordnen
        Call zuordnen
        
    'Umwelten l|fffd|schen
        Call deleteShapes
        
    .Rows(nlc_phb_64.Range("A12").Value & ":" & nlc_phb_64.Range("B12").Value).Hidden = False
    
    'Clusterhintergr|fffd|nde formatieren
    cluster = nlc_phb_64.Range("B13").Value
    .Columns(13).Hidden = True
        
    'Umwelten berechnen und erstellen
        weite = nlc_phb_64.Shapes("_UA_template").width
        hoehe = nlc_phb_64.Shapes("_UA_template").Height
            
        kHeight = .Range(nlc_phb_64.Range("D13").Value & ":" & nlc_phb_64.Range("E13").Value).Height
        kWidth = .Range(nlc_phb_64.Range("D13").Value & ":" & nlc_phb_64.Range("E13").Value).width
        
        kTop = .Range(nlc_phb_64.Range("D13")).top
        kLeft = .Range(nlc_phb_64.Range("D13")).left
               
        For i = 1 To 20
            If nlc_phb_64.Cells(14 + i, 6).Value <> "" Then
                Call pushCircle(nlc_phb_64.Cells(i + 14, 4).Value * kWidth / 100 + kLeft - weite / 2, nlc_phb_64.Cells(i + 14, 5).Value * kHeight / 100 + kTop - hoehe / 2, "_UA_" & nlc_phb_64.Cells(i + 14, 2).Value & "_" & nlc_phb_64.Cells(i + 14, 3).Value, nlc_phb_64.Cells(i + 14, 6).Value, nlc_phb_64.Cells(i + 14, 7).Value)
            End If
        Next i
        


    .Rows(nlc_phb_64.Range("A12").Value + 1 & ":" & nlc_phb_64.Range("B12").Value - 1).Hidden = True
    .Rows(nlc_phb_64.Range("D12").Value & ":" & nlc_phb_64.Range("E12").Value).Hidden = False
    

            
ende:
        
    ' Aktion nachbereiten
        .Activate
        .Range("A1").Activate
    End With
    
    ActiveWindow.Zoom = nlczoom
    
    Call nlc_intern.nlc_protect(akt_worksheet)
    DoEvents
    
End Sub

Private Sub deleteShapes()
    Dim objshape As Shape

    For Each objshape In ActiveSheet.Shapes
        If VBA.left(objshape.name, 7) <> "AKTUELL" And VBA.left(objshape.name, 10) <> "btn_Inhalt" And VBA.left(objshape.name, 13) <> "umweltlegende" And VBA.left(objshape.name, 7) <> "projekt" And VBA.left(objshape.name, 7) <> "cluster" And VBA.left(objshape.name, 4) <> "Logo" And VBA.left(objshape.name, 4) <> "Drop" Then
            objshape.Delete
        End If
    Next objshape
End Sub

Public Sub zuordnen()

    Dim i As Integer
    Dim j As Integer
    
    With nlc_phb_64
    
        .Range("F15:J74").Value = ""
        
        For i = startzeile To endzeile
            If nlc_phb_05.Cells(i, 2).Value <> 0 And nlc_phb_05.Rows(i).Hidden = False And nlc_phb_05.Cells(i, 2).Value <= .Range("B13").Value Then
                For j = 15 To 74
                    If .Cells(j, 2).Value = nlc_phb_05.Cells(i, 2).Value And .Cells(j, 6).Value = "" Then
                        .Cells(j, 6).Value = nlc_phb_05.Cells(i, 3).Value
                        .Cells(j, 7).Value = nlc_phb_05.Cells(i, 4).Value
                        Exit For
                    End If
                Next j
                
            End If
        Next i
    End With
End Sub

Sub pushCircle(shLeft As Double, shTop As Double, form, bez As String, hintergrundfarbe)

    On Error GoTo ende
    Dim grpShape As Shape
    
    Dim con As Shape
    
    nlc_phb_64.Activate
    ActiveSheet.Shapes("_UA_template").Select
    Selection.Copy
    nlc_phb_64.Range("A1").Select
    nlc_phb_05.Activate
    ActiveSheet.Paste
    
    Set grpShape = ActiveSheet.Shapes("_UA_template")
    
    With grpShape
        .name = form
        .top = shTop
        .left = shLeft
        .TextFrame2.TextRange.Characters.text = bez
    End With
    
    grpShape.Select
    With Selection
        .ShapeRange.Fill.ForeColor.SchemeColor = hintergrundfarbe
        .ShapeRange.line.ForeColor.ObjectThemeColor = msoThemeColorAccent3 ' SchemeColor = 58
        .ShapeRange.line.Visible = msoTrue
        .ShapeRange.Shadow.Visible = msoFalse
        .PrintObject = True
        .ShapeRange.TextFrame.MarginLeft = 0#
        .ShapeRange.TextFrame.MarginRight = 0#
        .ShapeRange.TextFrame.MarginTop = 0#
        .ShapeRange.TextFrame.MarginBottom = 0#
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
    With Selection.Font
        .name = "Arial"
        .FontStyle = "Standard"
        .Size = 7
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = 23
    End With
    
ende:
    Err.Clear
        
End Sub














Attribute VB_Name = "nlc_06"
Option Explicit
Option Private Module
Dim level As Integer, nlc_pw As String
Dim Fehlercode As Integer, Fehlertext As String
Dim zeile As Integer, spalte As Integer, startzeile As Integer, endzeile As Integer
Dim Data_Endzeile_Struktur As Integer
Dim Markierung As Range
Dim Fehlerliste As String

Private Sub Data_Rebuilder_Click()

    Dim Data_Endzeile_Struktur As Integer
    
    'Aktion vorbereiten
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    
    'Aktion durchf|fffd|hren
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_ArtB), nlc_phb_06.Cells(Data_Endzeile_Struktur, SpNr_ArtB)).ClearContents
    Call nlc_06.Layoutupdate
    
    nlc_phb_06.Range("B2").Value = nlc_phb_59.Range("BN15").Value
    Call nlc_06.LayoutSpalten
    Call Logo_Positionieren(nlc_phb_06.name, 4, 0)
    
    'Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on

End Sub

Sub bedingteformatierung(startzeile, endzeile) 'cardprocess
' Makro1 Makro
    Dim referenz As Variant
    
    With nlc_phb_06
        .Activate
        .Calculate
        .Rows("1:10000").FormatConditions.Delete
        
        '.Range(.Cells(startzeile, SpNr_Status), .Cells(endzeile, SpNr_Status)).Select 'Status f|fffd|rben
        With .Range(.Cells(startzeile, SpNr_Status), .Cells(endzeile, SpNr_Status)) 'Selection
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=green"
            .FormatConditions(1).Font.ColorIndex = 32
            .FormatConditions(1).Interior.ColorIndex = 49
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=yellow"
            .FormatConditions(2).Font.ColorIndex = xlAutomatic
            .FormatConditions(2).Interior.ColorIndex = 33
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=red"
            .FormatConditions(3).Font.ColorIndex = 32
            .FormatConditions(3).Interior.ColorIndex = 56
        End With
        
        referenz = Application.ReferenceStyle
        Application.ReferenceStyle = xlA1
        '.Range(.Cells(startzeile, SpNr_DateA_S), .Cells(endzeile, SpNr_DateA_S)).Select 'Termine f|fffd|rben
        With .Range(.Cells(startzeile, SpNr_DateA_S), .Cells(endzeile, SpNr_DateA_S)) ' Selection
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:="=$" & nlc_phb_51.Range("AI34").Value & ""
            .FormatConditions(1).Font.ColorIndex = 32
            .FormatConditions(1).Interior.ColorIndex = 56
        End With
        
        '.Range(.Cells(startzeile, SpNr_PSP), .Cells(endzeile, SpNr_PSP)).Select 'Termine f|fffd|rben
        With .Range(.Cells(startzeile, SpNr_PSP), .Cells(endzeile, SpNr_PSP)) ' Selection
            .FormatConditions.Add Type:=xlExpression, Formula1:="=$" & nlc_phb_51.Range("AI35").Value & "<>"""""
            .FormatConditions(1).Interior.ColorIndex = 7
        End With
        Application.ReferenceStyle = referenz
        
    End With

End Sub


Public Sub WorksheetBeforeDoubleClick(Target As Range)
    If Target.Column >= Data_Startspalte And Target.Column <= Data_Endspalte And Target.Row = ZeiNr_Layout_User Then
        nlc_intern.application_off
        If nlc_phb_06.Cells(Target.Row, Target.Column).Value = "x" Or nlc_phb_06.Cells(Target.Row, Target.Column).Value = "X" Then
            nlc_phb_06.Cells(Target.Row, Target.Column).Value = ""
        Else
            nlc_phb_06.Cells(Target.Row, Target.Column).Value = "x"
        End If
        nlc_phb_06.Cells(Target.Row, Target.Column).Select
        nlc_intern.application_on
        Exit Sub
    End If
End Sub


Public Sub WorksheetDeactivate()
    'If Sperren_Variable <> True Then
        If nlc_phb_51.Range("A1").Value <> "x" Then
            
            'Aktion vorbereiten
            nlc_intern.application_off
            Call nlc_intern.nlc_unprotect(nlc_phb_06)
             
            'Aktion durchf|fffd|hren
            Call nlc_aps
            Call nlc_06.SV_Short
             
            'Aktion nachbereiten
            Call nlc_intern.nlc_protect(nlc_phb_06)
             
            nlc_intern.application_on
            
        End If

        If frm_DataButtons.Visible = True Then
            nlc_intern.application_off
        
            nlc_phb_06.Range("N7").Value = frm_DataButtons.top
            nlc_phb_06.Range("O7").Value = frm_DataButtons.left
            nlc_phb_51.Range("A1").Value = "x"
        
            nlc_intern.application_on
            Unload frm_DataButtons
         End If
     'End If
End Sub


Public Sub navigationClick()
       
    Dim Markierung As Range
    Set Markierung = Selection
    
    If nlc_phb_06.Range("N7").Value > 507 Then
        frm_DataButtons.top = 507
    Else
        frm_DataButtons.top = nlc_phb_06.Range("N7").Value
    End If
    If nlc_phb_06.Range("O7").Value > 721 Then
        frm_DataButtons.left = 721
    Else
        frm_DataButtons.left = nlc_phb_06.Range("O7").Value
    End If
    frm_DataButtons.Show
'    Dim frm As Object
'    Set frm = Application.Run("'" & ActiveWorkbook.Name & "'!frm_databuttons_start")
'    frm.Show
    
    nlc_phb_06.Range(nlc_phb_06.Cells(Markierung.Row, Markierung.Column), nlc_phb_06.Cells(Markierung.Row + Markierung.Rows.count - 1, Markierung.Column + Markierung.Columns.count - 1)).Select
    On Error Resume Next
    VBA.AppActivate "Microsoft Excel"
    
End Sub

'Public Function frm_databuttons_start() As frm_DataButtons
'    Set frm_databuttons_start = frm_DataButtons
'End Function

'***********************************************************************************************************

Public Sub Vorgangsartkopie()
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_ArtB), nlc_phb_06.Cells(Data_Endzeile_Struktur, SpNr_ArtB)).Value = nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_Art), nlc_phb_06.Cells(Data_Endzeile_Struktur, SpNr_Art)).Value
End Sub

Public Sub Strukturvervollstaendigung() 'Ermittelt die Endzeile, was Sammelvorg|fffd|ge sind und r|fffd|ckt Namen ein
    Dim counter As Integer
    
    level = Data_Startzeile + 1
    While nlc_phb_06.Cells(level, SpNr_Nr).Value <> "END"
        level = level + 1
    Wend
    Data_Endzeile_Struktur = level - 1
    nlc_phb_06.Range("E7").Value = Data_Endzeile_Struktur
    counter = 1
        
    For level = Data_Startzeile To Data_Endzeile_Struktur
        'Vorgangszeilen nummerieren
        nlc_phb_06.Cells(level, SpNr_Nr).Value = counter
        counter = counter + 1
        
        'SV berechnen
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value < nlc_phb_06.Cells(level + 1, SpNr_Ebene).Value And nlc_phb_06.Cells(level + 1, SpNr_Ebene).Value > 1 Then
            nlc_phb_06.Cells(level, SpNr_SV).Value = "x"
            nlc_phb_06.Cells(level, SpNr_Art).Value = "SV"
            If level = Data_Startzeile Then nlc_phb_06.Cells(level, SpNr_Art).Value = "PJ"
        ElseIf nlc_phb_06.Cells(level, SpNr_Art).Value <> "MS" Then
            nlc_phb_06.Cells(level, SpNr_SV).Value = ""
            nlc_phb_06.Cells(level, SpNr_Art).Value = "AP"
        End If
        
        'Namen einr|fffd|cken
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value > 1 Then
            nlc_phb_06.Cells(level, SpNr_Name).IndentLevel = nlc_phb_06.Cells(level, SpNr_Ebene).Value - 1
        End If
        
    Next level
    
End Sub

Public Sub Sammelvorgangsberechnung()

    Dim Data_Endzeile As Integer
    Dim i As Integer, j As Integer, k As Integer, Ebene As Integer, EbenenLimit As Integer
    Dim Kalkulator As String, Z|fffd|hler As Double, Nenner As Double
    Dim Wert As Variant
    Dim first_enddate As String
    
    first_enddate = nlc_phb_51.Cells(8, 68).Value
    
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    For level = Data_Endzeile_Struktur To Data_Startzeile Step -1
        If nlc_phb_06.Cells(level, SpNr_Name).Value <> "" Then
            Data_Endzeile = level
            Exit For
        End If
    Next level
    
    'Berechnung von Sammelvorg|fffd|ngen
    For i = Data_Endzeile To Data_Startzeile Step -1
        If nlc_phb_06.Cells(i, SpNr_SV).Value = "x" Then
            Ebene = nlc_phb_06.Cells(i, SpNr_Ebene).Value
            k = i + 1
            While nlc_phb_06.Cells(k, SpNr_Ebene).Value > Ebene
                k = k + 1
            Wend
            For j = Data_Startspalte + 1 To Data_Endspalte
                EbenenLimit = 10
                If nlc_phb_06.Cells(ZeiNr_FrEbene, j).Value <> "" Then EbenenLimit = nlc_phb_06.Cells(ZeiNr_FrEbene, j).Value
                Kalkulator = nlc_phb_06.Cells(ZeiNr_SV, j).Value
                If Kalkulator <> "" Then
                    Wert = 0
                    Z|fffd|hler = 0
                    Nenner = 1
                    If Kalkulator = "Schnitt" Then Nenner = 0
                    If Kalkulator <> "Formel" Then
                        For level = i + 1 To k - 1
                            If nlc_phb_06.Cells(level, SpNr_Ebene).Value = Ebene + 1 Then
                                Wert = nlc_phb_06.Cells(level, j).Value
                                If Kalkulator = "Min" Then
                                    If Z|fffd|hler = 0 Then Z|fffd|hler = Wert
                                    If Wert > 0 And Wert < Z|fffd|hler Then Z|fffd|hler = Wert
                                ElseIf Kalkulator = "Max" Then
                                    If Wert <> "" And Wert > Z|fffd|hler Then Z|fffd|hler = Wert
                                ElseIf Kalkulator = "Sum" Then
                                    If Wert <> "" Then Z|fffd|hler = Z|fffd|hler + Wert
                                ElseIf Kalkulator = "Schnitt" Then
                                    If Wert <> "" And nlc_phb_06.Cells(level, SpNr_Art).Value <> "MS" Then
                                        Z|fffd|hler = Z|fffd|hler + Wert
                                        Nenner = Nenner + 1
                                    End If
                                Else
                                    Nenner = 0
                                End If
                            End If
                        Next level
                        If Kalkulator = "Inhalte" Or Kalkulator = "Formate" Then
                            'nix...
                        ElseIf Kalkulator = "Leeren" Or Nenner <= 0 Or ((Kalkulator = "Min" Or Kalkulator = "Max") And Z|fffd|hler <= 0) Then
                            nlc_phb_06.Cells(i, j).ClearContents
                        Else
                            If Ebene < EbenenLimit Then nlc_phb_06.Cells(i, j).Value = Z|fffd|hler / Nenner
                        End If
                    End If
                End If
            Next j
        End If
    Next i
    
    nlc_phb_51.Range("A1").Value = "x"
    
End Sub

Public Sub Vorgangsformatierung()
    
    Dim Data_Endzeile As Integer
    Dim level As Integer
    Dim anzahl_zeilen As Integer
    
    Data_Endzeile = nlc_phb_06.Range("E7").Value
    anzahl_zeilen = Data_Endzeile - Data_Startzeile
    
    For level = Data_Startzeile To Data_Endzeile
    'WorksheetFunction.VLookup("updating_cells", nlc_phb_TL.Range("B4:E65536"), 4, False)
        Application.StatusBar = WorksheetFunction.VLookup("updating_cells", nlc_phb_TL.Range("B4:E65536"), 4, False) & "  " & VBA.Round(((level - Data_Startzeile)) * (1 / (anzahl_zeilen / 100)), 0) & "%"
        If nlc_phb_06.Cells(level, SpNr_Art).Value <> nlc_phb_06.Cells(level, SpNr_ArtB).Value Then
            If nlc_phb_06.Cells(level, SpNr_Art).Value = "AP" Then
                Call Format_AP(level)
            ElseIf nlc_phb_06.Cells(level, SpNr_Art).Value = "MS" Then
                Call Format_MS(level)
            ElseIf nlc_phb_06.Cells(level, SpNr_Art).Value = "SV" Then
                Call Format_SV(level)
            End If
            If nlc_phb_06.Cells(level, SpNr_Ebene).Value > 1 Then
                nlc_phb_06.Cells(level, SpNr_Name).IndentLevel = nlc_phb_06.Cells(level, SpNr_Ebene).Value - 1
            End If
        End If
    Next level
    
End Sub

Public Sub Format_MS(zeile As Integer)

    Dim EbenenLimit As Integer, Ebene As Integer
    Ebene = nlc_phb_06.Cells(zeile, SpNr_Ebene).Value

    nlc_phb_06.Range(nlc_phb_06.Cells(ZeiNr_VorlageMS, Data_Startspalte), nlc_phb_06.Cells(ZeiNr_VorlageMS, Data_Endspalte)).Copy
    nlc_phb_06.Range(nlc_phb_06.Cells(zeile, Data_Startspalte), nlc_phb_06.Cells(zeile, Data_Endspalte)).PasteSpecial xlPasteFormats
    nlc_phb_06.Range(nlc_phb_06.Cells(zeile, Data_Startspalte), nlc_phb_06.Cells(zeile, Data_Endspalte)).PasteSpecial xlPasteValidation
    
    For spalte = Data_Startspalte + 1 To Data_Endspalte
        If nlc_phb_06.Cells(ZeiNr_MS, spalte).Value <> "" Then
'            nlc_phb_06.Cells(ZeiNr_VorlageMS, spalte).Copy
'            nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteFormats
'            nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteValidation
            If spalte = SpNr_Name Then nlc_phb_06.Cells(zeile, spalte).IndentLevel = nlc_phb_06.Cells(zeile, SpNr_Ebene).Value - 1
            If nlc_phb_06.Cells(ZeiNr_MS, spalte).Value = "Inhalte" Then
                nlc_phb_06.Cells(ZeiNr_VorlageMS, spalte).Copy
                nlc_phb_06.Cells(zeile, spalte).PasteSpecial Paste:=xlPasteFormulas
            End If
            EbenenLimit = 10
            If nlc_phb_06.Cells(ZeiNr_FrEbene, spalte).Value <> "" Then EbenenLimit = nlc_phb_06.Cells(ZeiNr_FrEbene, spalte).Value
            If Ebene > EbenenLimit Then
                nlc_phb_06.Cells(zeile, spalte).Locked = True
                nlc_phb_06.Cells(zeile, spalte).ClearContents
                With nlc_phb_06.Cells(zeile, spalte)
                    .Interior.ColorIndex = 18
                    .Interior.Pattern = xlSolid
                    .Interior.PatternColorIndex = xlAutomatic
                    .Font.ColorIndex = 9
                End With
            Else
                If nlc_phb_06.Cells(ZeiNr_MS, spalte).Value = "Leeren" Then
                    nlc_phb_06.Cells(zeile, spalte).ClearContents
                End If
            End If
        End If
    Next spalte
    
    nlc_phb_06.Cells(zeile, SpNr_ArtB).Value = nlc_phb_06.Cells(zeile, SpNr_Art).Value
    
End Sub

Public Sub Format_AP(zeile As Integer)
    
    Dim EbenenLimit As Integer, Ebene As Integer
    Ebene = nlc_phb_06.Cells(zeile, SpNr_Ebene).Value
    
    nlc_phb_06.Range(nlc_phb_06.Cells(ZeiNr_VorlageAP, Data_Startspalte), nlc_phb_06.Cells(ZeiNr_VorlageAP, Data_Endspalte)).Copy
    nlc_phb_06.Range(nlc_phb_06.Cells(zeile, Data_Startspalte), nlc_phb_06.Cells(zeile, Data_Endspalte)).PasteSpecial xlPasteFormats
    nlc_phb_06.Range(nlc_phb_06.Cells(zeile, Data_Startspalte), nlc_phb_06.Cells(zeile, Data_Endspalte)).PasteSpecial xlPasteValidation
    For spalte = Data_Startspalte + 1 To Data_Endspalte
        If nlc_phb_06.Cells(ZeiNr_AP, spalte).Value <> "" Then
'            nlc_phb_06.Cells(ZeiNr_VorlageAP, spalte).Copy
'            nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteFormats
'            nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteValidation
            nlc_phb_06.Cells(zeile, spalte).Value = nlc_phb_06.Cells(zeile, spalte).Value
            If spalte = SpNr_Name Then nlc_phb_06.Cells(zeile, spalte).IndentLevel = nlc_phb_06.Cells(zeile, SpNr_Ebene).Value - 1
            If nlc_phb_06.Cells(ZeiNr_AP, spalte).Value = "Inhalte" Then
                nlc_phb_06.Cells(ZeiNr_VorlageAP, spalte).Copy
                nlc_phb_06.Cells(zeile, spalte).PasteSpecial Paste:=xlPasteFormulas
            End If
            EbenenLimit = 10
            If nlc_phb_06.Cells(ZeiNr_FrEbene, spalte).Value <> "" Then EbenenLimit = nlc_phb_06.Cells(ZeiNr_FrEbene, spalte).Value
            If Ebene > EbenenLimit Then
                    nlc_phb_06.Cells(zeile, spalte).Locked = True
                    nlc_phb_06.Cells(zeile, spalte).ClearContents
                    With nlc_phb_06.Cells(zeile, spalte)
                        .Interior.ColorIndex = 18
                        .Interior.Pattern = xlSolid
                        .Interior.PatternColorIndex = xlAutomatic
                        .Font.ColorIndex = 9
                    End With
            Else
                If nlc_phb_06.Cells(ZeiNr_AP, spalte).Value = "Leeren" Then
                    nlc_phb_06.Cells(zeile, spalte).ClearContents
                End If
            End If
        End If
    Next spalte
    
    nlc_phb_06.Cells(zeile, SpNr_ArtB).Value = nlc_phb_06.Cells(zeile, SpNr_Art).Value
    
End Sub
Private Sub Format_SV(zeile As Integer)
    
    Dim EbenenLimit As Integer, Ebene As Integer
    Ebene = nlc_phb_06.Cells(zeile, SpNr_Ebene).Value
    
    nlc_phb_06.Range(nlc_phb_06.Cells(ZeiNr_VorlageSV, Data_Startspalte), nlc_phb_06.Cells(ZeiNr_VorlageSV, Data_Endspalte)).Copy
    nlc_phb_06.Range(nlc_phb_06.Cells(zeile, Data_Startspalte), nlc_phb_06.Cells(zeile, Data_Endspalte)).PasteSpecial xlPasteFormats
    nlc_phb_06.Range(nlc_phb_06.Cells(zeile, Data_Startspalte), nlc_phb_06.Cells(zeile, Data_Endspalte)).PasteSpecial xlPasteValidation
    
    For spalte = Data_Startspalte + 1 To Data_Endspalte
        If nlc_phb_06.Cells(ZeiNr_SV, spalte).Value <> "" Then
            If nlc_phb_06.Cells(zeile, SpNr_Art).Value <> "PJ" And (spalte <> SpNr_Name Or spalte <> SpNr_Status Or spalte <> SpNr_Verantwortung) Then
'                nlc_phb_06.Cells(ZeiNr_VorlageSV, spalte).Copy
'                nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteFormats
'                nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteValidation
                If nlc_phb_06.Cells(ZeiNr_SV, spalte).Value = "Inhalte" Then
                    nlc_phb_06.Cells(ZeiNr_VorlageSV, spalte).Copy
                    nlc_phb_06.Cells(zeile, spalte).PasteSpecial Paste:=xlPasteFormulas
                End If
               EbenenLimit = 10
                If nlc_phb_06.Cells(ZeiNr_FrEbene, spalte).Value <> "" Then EbenenLimit = nlc_phb_06.Cells(ZeiNr_FrEbene, spalte).Value
                If Ebene > EbenenLimit Then
                    nlc_phb_06.Cells(zeile, spalte).Locked = True
                    nlc_phb_06.Cells(zeile, spalte).ClearContents
                    With nlc_phb_06.Cells(zeile, spalte)
                        .Interior.ColorIndex = 18
                        .Interior.Pattern = xlSolid
                        .Interior.PatternColorIndex = xlAutomatic
                        .Font.ColorIndex = 9
                    End With
                Else
                    If Ebene = EbenenLimit Then
                        nlc_phb_06.Cells(ZeiNr_VorlageAP, spalte).Copy
                        nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteFormats
                        nlc_phb_06.Cells(zeile, spalte).PasteSpecial xlPasteValidation
                    End If
                    If nlc_phb_06.Cells(ZeiNr_SV, spalte).Value = "Leeren" Then
                        nlc_phb_06.Cells(zeile, spalte).ClearContents
                    End If
                End If
            End If
        End If
    Next spalte
    
    nlc_phb_06.Cells(zeile, SpNr_ArtB).Value = nlc_phb_06.Cells(zeile, SpNr_Art).Value
    
End Sub


Public Sub Ebenenabgleich()
    
    Dim Ebene As Integer, MaxEbenen As Integer
    
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    MaxEbenen = nlc_phb_59.Range("I10").Value
    Ebene = 1
    
    For level = Data_Startzeile + 1 To Data_Endzeile_Struktur
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value = 1 Then
            Ebene = 2
            nlc_phb_06.Cells(level, SpNr_Ebene).Value = Ebene
        ElseIf nlc_phb_06.Cells(level, SpNr_Ebene).Value > MaxEbenen Then
            If Ebene = MaxEbenen Then
                Ebene = MaxEbenen
            Else
                Ebene = Ebene + 1
            End If
            nlc_phb_06.Cells(level, SpNr_Ebene).Value = Ebene
        ElseIf nlc_phb_06.Cells(level, SpNr_Ebene).Value > Ebene + 1 Then
            Ebene = Ebene + 1
            nlc_phb_06.Cells(level, SpNr_Ebene).Value = Ebene
        ElseIf nlc_phb_06.Cells(level, SpNr_Ebene).Value = "" Then
            nlc_phb_06.Cells(level, SpNr_Ebene).Value = Ebene
        Else
            Ebene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        End If
    Next level
    
End Sub



Public Sub PSPCode_Generation()
    
    Dim EC(15) 'As Integer
    Dim ECounter As Integer, Ebene As Integer
    Dim Connector As String, PSPCode As String
    
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    Connector = "."
    EC(1) = nlc_phb_51.Range("AI31").Value '1
    EC(2) = 0
    
    For level = Data_Startzeile + 1 To Data_Endzeile_Struktur
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value = "" Then nlc_phb_06.Cells(level, SpNr_Ebene).Value = 2
        Ebene = nlc_phb_06.Cells(level, SpNr_Ebene).Value
        EC(Ebene) = EC(Ebene) + 1
        For ECounter = Ebene + 1 To 15
            EC(ECounter) = 0
        Next ECounter
        PSPCode = EC(1)
        ECounter = 2
        While EC(ECounter) <> 0 And ECounter <= 15
            PSPCode = PSPCode & Connector & EC(ECounter)
            ECounter = ECounter + 1
        Wend
        nlc_phb_06.Cells(level, SpNr_PSP).Value = PSPCode
    Next level
    
End Sub


Public Sub LayoutSpalten()

    Dim status As Boolean
    
    For level = Data_Startspalte + 1 To Data_Endspalte
        If nlc_phb_06.Cells(ZeiNr_Layout_User, level).Value = "x" And nlc_phb_06.Cells(ZeiNr_LayoutOFF, level).Value = "x" And nlc_phb_06.Range("B7").Value = "ON" Then
            nlc_phb_06.Columns(level).Hidden = False
        ElseIf nlc_phb_06.Cells(ZeiNr_LayoutOFF, level).Value = "x" And nlc_phb_06.Range("B7").Value = "OFF" Then
            nlc_phb_06.Columns(level).Hidden = False
        Else
            nlc_phb_06.Columns(level).Hidden = True
        End If
    Next level
    
    If nlc_phb_06.Range("B7").Value = "OFF" Then
        nlc_phb_06.Rows(ZeiNr_Layout_User).Hidden = False
    Else
        nlc_phb_06.Rows(ZeiNr_Layout_User).Hidden = True
    End If
    
    'PSP-Code Spaltenbreite anpassen
    
    level = Data_Startzeile
    
    Do While nlc_phb_06.Cells(level, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value > 5 Then
            status = True
            Exit Do
        Else
            status = False
        End If
        level = level + 1
    Loop
    
    If status = True Then
        nlc_phb_06.Columns(SpNr_PSP).columnWidth = 17
    Else
        nlc_phb_06.Columns(SpNr_PSP).columnWidth = 11
    End If
    
End Sub

Sub SV_Berechnung()
    
    'Aktion vorbereiten
    nlc_intern.application_off

    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    'Aktion durchf|fffd|hren
    Call nlc_aps
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    Call nlc_06.SV_Short
    
    'Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
    
End Sub

Public Sub SV_Short() 'ohne entsperren und screenupdating aus
        
    'Aktion durchf|fffd|hren
    Call Sammelvorgangsberechnung
    
End Sub


Public Sub Layoutupdate()
      
    Call Ebenenabgleich
    Call Strukturvervollstaendigung
    Call PSPCode_Generation
    Call nlc_06.SV_Short
    Call Vorgangsformatierung
    'Call Vorgangsartkopie
    Call nlc_aps
    nlc_phb_06.Range("E7").Calculate
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    Call Logo_Positionieren(nlc_phb_06.name, 4, 0)
    nlc_phb_06.Calculate
    nlc_phb_06.Cells(Data_Startzeile, SpNr_Name).Select
    
End Sub


'**************************************************************************************************************

Public Function find_id(PSP As String) As Integer
    Dim i As Integer
    
    i = Data_Startzeile
    While nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(i, SpNr_PSP).Value = PSP Then
            find_id = nlc_phb_06.Cells(i, SpNr_UID).Value
            Exit Function
        End If
        i = i + 1
    Wend
    find_id = 0

End Function


Public Function find_psp_id(ID As Integer) As String
    Dim i As Integer
    
    i = Data_Startzeile
    While nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(i, SpNr_UID).Value = ID Then
            find_psp_id = nlc_phb_06.Cells(i, SpNr_PSP).Value
            Exit Function
        End If
        i = i + 1
    Wend
    find_psp_id = ""

End Function

Public Function find_id_zeile(ID As Integer) As Integer
    
    Dim i As Integer
    
    i = Data_Startzeile
    While nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(i, SpNr_UID).Value = ID Then
            find_id_zeile = i
            Exit Function
        End If
        i = i + 1
    Wend
    find_id_zeile = 0

End Function

Public Function find_phase(zeile As Integer) As String
    
    Dim i As Integer
    
    For i = zeile To Data_Startzeile Step -1
        If nlc_phb_06.Cells(i, SpNr_Ebene).Value = 2 And nlc_phb_06.Cells(i, SpNr_Art).Value = "SV" Then
            find_phase = nlc_phb_06.Cells(i, SpNr_Name).Value
            Exit Function
        End If
    Next i
    find_phase = ""

End Function

Public Sub zeilen_anlegen(anz_zeilen As Integer)
    Dim level As Integer
    Dim zeile As Integer

    nlc_phb_06.Select
    zeile = Data_Startzeile + 1
    nlc_phb_06.Rows(ZeiNr_VorlageAP & ":" & ZeiNr_VorlageAP).Copy

        nlc_phb_06.Rows(zeile & ":" & zeile + anz_zeilen - 1).Select
        Selection.Insert Shift:=xlDown
        Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
        Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
    
'    For level = 1 To anz_zeilen
'        nlc_phb_06.Rows(ZeiNr_VorlageAP & ":" & ZeiNr_VorlageAP).Copy
'        nlc_phb_06.Rows(level + zeile - 1).Select
'        Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
'            SkipBlanks:=False, Transpose:=False
'        Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
'            SkipBlanks:=False, Transpose:=False
'    Next level
    Application.CutCopyMode = False
    nlc_phb_06.Rows(zeile & ":" & zeile + anz_zeilen - 1).Hidden = False

    
End Sub

Public Sub zeilen_loeschen(von As Integer, bis As Integer)

        nlc_phb_06.Rows(von & ":" & bis).Delete 'Shift:=xlUp

End Sub

Public Sub blatt_generieren(blattname As String, blatttext As String, zeile As Integer)

    Dim level As Integer
    
        On Error GoTo ende
    
        endzeile = nlc_phb_06.Range("E7").Value + 1

        nlc_pw = nlc_intern.get_pw
        nlc_phb_xs.Unprotect (nlc_pw)
        Sheets(blattname).Unprotect (nlc_pw)
        
        nlc_intern.application_off
        Sheets(blattname).Activate
        Sheets(blattname).Rows("1:10000").Delete
        nlc_phb_06.Activate
        nlc_phb_06.Cells.Select
        Selection.Copy
        Sheets(blattname).Activate
        Sheets(blattname).Cells.Select
        ActiveSheet.Paste
        Sheets(blattname).Cells.Select
        Selection.Copy
        Sheets(blattname).Cells.Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
        Selection.Locked = True
        Selection.FormulaHidden = True
        Selection.Validation.Delete
        
        While Sheets(blattname).Pictures.count >= 1
            Sheets(blattname).Pictures("Logo").Delete
        Wend
        
        Sheets(blattname).Shapes("AKTUELL").Delete
        
        nlc_phb_06.Pictures("Logo").CopyPicture
        Sheets(blattname).Select
        Sheets(blattname).Cells(4, 1).Select
        ActiveSheet.Paste
        Selection.name = "Logo"
        
        '|fffd|berschriften anpassen
        Sheets(blattname).Rows(Data_Startzeile - 3).RowHeight = nlc_phb_06.Rows(Data_Startzeile - 3).RowHeight
        Sheets(blattname).Rows(Data_Startzeile - 2).RowHeight = nlc_phb_06.Rows(Data_Startzeile - 2).RowHeight
        Sheets(blattname).Rows(Data_Startzeile - 1).RowHeight = nlc_phb_06.Rows(Data_Startzeile - 1).RowHeight

        For level = Data_Endspalte To Data_Startspalte Step -1
            If Sheets(blattname).Cells(zeile, level).Value = "entf" Then
                Sheets(blattname).Columns(level).Delete Shift:=xlToLeft
            ElseIf Sheets(blattname).Cells(zeile, level).Value = "" Then
                Sheets(blattname).Columns(level).Hidden = True
            ElseIf Sheets(blattname).Cells(zeile, level).Value = "x" Then
                Sheets(blattname).Columns(level).Hidden = False
            ElseIf Sheets(blattname).Cells(zeile, level).Value <> "" And IsNumeric(Sheets(blattname).Cells(zeile, level).Value) Then
                Sheets(blattname).Columns(level).columnWidth = Sheets(blattname).Cells(zeile, level).Value
            End If
            Application.ScreenUpdating = False
        Next level

        Sheets(blattname).Columns(2).Delete
        Sheets(blattname).Rows("7:36").Delete Shift:=xlUp

        Call Logo_Positionieren(blattname, 4, 0)
        
        For level = 1 To 1000 Step 1
            If Sheets(blattname).Cells(4, level).Borders(xlEdgeRight).LineStyle = xlContinuous Then Exit For
        Next level
        
        Call ZellenEinfaerben(Sheets(blattname).Range("J11:" & Split(Cells(1, level).Address, "$")(1) & endzeile))

        nlc_intern.application_off

        Sheets(blattname).Range("A4").Value = WorksheetFunction.VLookup(blatttext, nlc_phb_TL.Range("B4:E65536"), 4, False)
        Sheets(blattname).Range("A5").FormulaR1C1 = "=ueberschrift"
        Sheets(blattname).Range("A2").Select

ende:
        Sheets(blattname).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        If nlc_phb_PW.Range("C4") = "YES" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect Password:=nlc_pw, Structure:=True, Windows:=False
        DoEvents
End Sub

Sub ZellenEinfaerben(Bereich As Range)
    Dim rngZelle As Range
    For Each rngZelle In Bereich
        With rngZelle.Interior
         If .ColorIndex = 17 Then
            .Color = RGB(255, 255, 255)
        End If
        End With
    Next rngZelle
End Sub

Public Sub show_admin()
    Dim i As Integer
    For i = Data_Startspalte To Data_Endspalte
        If nlc_phb_06.Cells(ZeiNr_Adminshow, i).Value = "Ext" Then
            nlc_phb_06.Columns(i).Hidden = False
        End If
    Next i
End Sub

Public Sub close_admin(auswahl As Byte)
    Dim i As Integer
    Dim startspalte As Integer
    Dim endspalte As Integer
    Dim nachricht As String
    Dim abfrage As Boolean
    
    '0 = alles
    ' 1 = funktionen
    '2 = ressourcen
    '3= kosten
    
    Select Case auswahl
        Case 2
            startspalte = SpNr_Res_S
            endspalte = SpNr_ResSumme_Bas - 1
            nachricht = nlc_intern.nlc_Language_Msgs("close_admin" & auswahl)
        Case 3
            startspalte = SpNr_Cost_S
            endspalte = SpNr_CostSumme_Bas - 1
            nachricht = nlc_intern.nlc_Language_Msgs("close_admin" & auswahl)
        Case Else
            startspalte = Data_Startspalte
            endspalte = Data_Endspalte
            nachricht = nlc_intern.nlc_Language_Msgs("close_admin")
    End Select
    
    abfrage = False
    
    If nlc_phb_06.Cells(ZeiNr_Adminclose, 2).Value > 0 Then
        For i = startspalte To endspalte
            If nlc_phb_06.Cells(ZeiNr_Adminclose, i).Value = "x" Then
                If abfrage = False Then
                    If MsgBox(nachricht, vbYesNo) = vbYes Then
                        abfrage = True
                    Else
                        Exit For
                    End If
                End If
                nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, i), nlc_phb_06.Cells(nlc_phb_06.Range("E7").Value, i)).ClearContents
            End If
        Next i
    End If
End Sub

Public Sub delete_cost_resource(art As String, nummer As Integer)
    Dim i As Integer
    Dim loeschen As Boolean
    
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    nlc_intern.application_off
    loeschen = False
    If art = "resource" Then
        For i = SpNr_Res_S + nummer * Res_Schritt To SpNr_Res_S + (nummer + 1) * Res_Schritt - 1
            If nlc_phb_06.Cells(ZeiNr_Adminclose, i).Value = "x" Then
                If loeschen = False Then
                    If MsgBox(nlc_intern.nlc_Language_Msgs("delete_cost_ressource"), vbYesNo) = vbYes Then
                        loeschen = True
                    Else
                        GoTo ende
                    End If
                End If
                nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, i), nlc_phb_06.Cells(nlc_phb_06.Range("E7").Value, i)).ClearContents
            End If
        Next i
    Else
        For i = SpNr_Cost_S + nummer * Cost_Schritt To SpNr_Cost_S + (nummer + 1) * Cost_Schritt - 1
            If nlc_phb_06.Cells(ZeiNr_Adminclose, i).Value = "x" Then
                If loeschen = False Then
                    If MsgBox(nlc_intern.nlc_Language_Msgs("delete_cost_ressource"), vbYesNo) = vbYes Then
                        loeschen = True
                    Else
                        GoTo ende
                    End If
                End If
                nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, i), nlc_phb_06.Cells(nlc_phb_06.Range("E7").Value, i)).ClearContents
            End If
        Next i
    End If
ende:
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_intern.application_on
End Sub






Attribute VB_Name = "nlc_08"
Option Explicit
Option Private Module
Dim nlc_pw As String
Dim level As Integer

Private Sub Clear()
    
    Dim lngColumn As Long, lngRow As Long
    With nlc_phb_08
        For lngColumn = .Columns.count To 1 Step -1
            If WorksheetFunction.CountBlank(.Columns(lngColumn)) < .Rows.count Then Exit For
        Next
        For lngRow = .Rows.count To 5 Step -1
            If WorksheetFunction.CountBlank(.Rows(lngRow)) < .Columns.count Then Exit For
        Next
        .Range(.Cells(1, lngColumn + 1), .Cells(.Rows.count, .Columns.count)).Clear
        .Range(.Cells(lngRow + 1, 1), .Cells(.Rows.count, .Columns.count)).Clear
    End With

End Sub

Public Function suche_phasenende(startzeile As Integer)
    Dim i As Integer
    suche_phasenende = nlc_phb_06.Range("E7").Value
    
    For i = startzeile + 1 To nlc_phb_06.Range("E7").Value
        If nlc_phb_06.Cells(i, SpNr_Ebene).Value = 2 Then
            suche_phasenende = i - 1
            Exit Function
        End If
    Next i
End Function

Public Sub Refresh()

    Dim Max_Layouts As Integer, Layoutabstand As Integer, Layoutwahl As String, Layoutstart As Integer
    Dim WBS_Startzeile As Integer, WBS_Startspalte As Integer, WBS_Zeile As Integer, WBS_Spalte As Integer, Data_Zeile As Integer, Data_Spalte As Integer
    Dim WBS_Breite As Integer, WBS_Hoehe As Integer, Max_Ebenen As Integer, WBS_Ebenen As Integer
    Dim Counter_Ebene2 As Integer, Counter_Ebene3 As Integer, Counter_Ebene4 As Integer, Counter_Ebene5 As Integer
    Dim Max_Ebene2 As Integer, Max_Ebene3 As Integer, Max_Ebene4 As Integer, Max_Ebene5 As Integer
    Dim Anz_Ebene1 As Integer, Anz_Ebene2 As Integer, Anz_Ebene3 As Integer, Anz_Ebene4 As Integer, Anz_Ebene5 As Integer
    Dim Zeile_Ebene2 As Integer, Zeile_Ebene3 As Integer, Zeile_Ebene4 As Integer
    Dim Ebene As Integer, Kalk1 As Integer, Kalk2 As Integer, Kalk3 As Integer, Kalk4 As Integer
    Dim MaxZeile As Integer, MaxSpalte As Integer, Data_Endzeile As Integer
    Dim level As Integer
    Dim index As Integer
    Dim nlc_pw As String
    Dim ebene_phase As Byte
    Dim startzeile As Integer
    Dim endzeile As Integer
    Dim spaltenbreite As Integer
    Dim ausgeblendet As Boolean
    
    'Aktion vorbereiten
    nlc_phb_08.Select

    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_08)
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    'PSP Range (doppelklick) leeren
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_left), nlc_phb_06.Cells(nlc_phb_06.Cells(7, 5).Value, SpNr_width)).ClearContents
    
    'Parameter Stammdaten einlesen
    WBS_Startzeile = nlc_phb_59.Range("I5").Value
    WBS_Startspalte = nlc_phb_59.Range("I6").Value
    If nlc_phb_59.Range("I18").Value <> "" And IsNumeric(nlc_phb_59.Range("I18").Value) = True Then
        spaltenbreite = nlc_phb_59.Range("I18").Value
    Else
        spaltenbreite = 2
    End If
        
    Max_Layouts = nlc_phb_59.Range("I7").Value
    Layoutabstand = nlc_phb_59.Range("I8").Value
    If nlc_phb_59.Range("BN5").Value <> "" Then
        Layoutwahl = nlc_phb_59.Range("BN5").Value
        nlc_phb_59.Range("I17").Value = nlc_phb_59.Range("BN5").Value
    Else
        Layoutwahl = nlc_phb_59.Range("BR5").Value
        nlc_phb_59.Range("BN5").Value = nlc_phb_59.Range("BR5").Value
        nlc_phb_59.Range("I17").Value = nlc_phb_59.Range("BR5").Value
    End If
    
    ausgeblendet = nlc_phb_59.Range("BN8").Value
    
    
    nlc_phb_59.Range("BQ5").Calculate
    nlc_phb_59.Range("I16").Value = nlc_phb_59.Range("BQ5").Value
    
    Max_Ebenen = nlc_phb_59.Range("I9").Value
    Max_Ebene2 = nlc_phb_59.Range("I11").Value
    Max_Ebene3 = nlc_phb_59.Range("I12").Value
    Max_Ebene4 = nlc_phb_59.Range("I13").Value
    Max_Ebene5 = nlc_phb_59.Range("I14").Value

    Call nlc_06.SV_Short
    
    Application.ScreenUpdating = False
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    
    'Layout finden
    For level = 23 To ((Max_Layouts - 1) * Layoutabstand) + 23 Step Layoutabstand
        If nlc_phb_59.Cells(level, 6).Value = Layoutwahl Then Layoutstart = level
    Next level
    If Layoutstart = 0 Then GoTo ende
    WBS_Hoehe = nlc_phb_59.Cells(Layoutstart, 2).Value
    WBS_Breite = nlc_phb_59.Cells(Layoutstart, 4).Value
    WBS_Ebenen = nlc_phb_59.Cells(Layoutstart, 14).Value
    'Kalk4 = VBA.Round((256 - 4) / (WBS_Breite + 1), 0)
    'If Kalk4 < Max_Ebene2 Then Max_Ebene2 = Kalk4
    
    'PSP leeren
    Call nlc_08.WBS_Clear
    
    If nlc_phb_59.Range("BN7").Value <> 1 Then
        ebene_phase = 1
        startzeile = find_id_zeile(nlc_phb_59.Range("BN7").Value)
        endzeile = suche_phasenende(startzeile)
    Else
        ebene_phase = 0
        startzeile = Data_Startzeile
        endzeile = nlc_phb_06.Range("E7").Value
    End If
    
    For level = startzeile To endzeile
        If nlc_phb_06.Cells(level, SpNr_Name).Value <> "" Then index = level
    Next level
    
    'Weitere Parameter berechnen
    Data_Zeile = startzeile
    While Data_Zeile <= index 'nlc_phb_06.Cells(Data_Zeile, SpNr_Name).Value <> ""
        Ebene = nlc_phb_06.Cells(Data_Zeile, SpNr_Ebene).Value - ebene_phase
        If Ebene = 1 Then Anz_Ebene1 = Anz_Ebene1 + 1
        If Ebene = 2 Then Anz_Ebene2 = Anz_Ebene2 + 1
        If Ebene = 3 Then Anz_Ebene3 = Anz_Ebene3 + 1
        If Ebene = 4 Then Anz_Ebene4 = Anz_Ebene4 + 1
        If Ebene = 5 Then Anz_Ebene5 = Anz_Ebene5 + 1
        Data_Zeile = Data_Zeile + 1
    Wend
    Data_Endzeile = index 'Data_Zeile - 1
    If Anz_Ebene5 = 0 And Max_Ebenen > 4 Then Max_Ebenen = 4
    If Anz_Ebene4 = 0 And Max_Ebenen > 3 Then Max_Ebenen = 3
    If Anz_Ebene3 = 0 And Max_Ebenen > 2 Then Max_Ebenen = 2
    If Anz_Ebene2 = 0 Then GoTo ende
    If Anz_Ebene2 * WBS_Breite + WBS_Startspalte > 255 Then Anz_Ebene2 = VBA.Round((255 - WBS_Startspalte) / WBS_Breite, 0)
    If Anz_Ebene1 <> 1 Then GoTo ende
    WBS_Zeile = WBS_Startzeile
    WBS_Spalte = VBA.Round(((WBS_Startspalte + (Anz_Ebene2 * (WBS_Breite + 1)) - WBS_Breite) + 1) / 2, 0)
    
    'Projekt (1.Ebene) aufbauen
    Data_Zeile = startzeile
    'Knoten
    Call nlc_08.WP_Builder(Data_Zeile, WBS_Zeile, WBS_Spalte, Layoutstart, ebene_phase)
    'Linie
    WBS_Zeile = WBS_Startzeile + WBS_Hoehe
    Kalk1 = VBA.Round((WBS_Breite - 0.5) / 2, 0)
    With nlc_phb_08.Cells(WBS_Zeile, WBS_Spalte + Kalk1).Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        '.ColorIndex = xlAutomatic
        .ThemeColor = 7
    End With
    
    'Phasen (2.Ebene) aufbauen
    Counter_Ebene2 = 1
    WBS_Zeile = WBS_Startzeile + WBS_Hoehe + 2
    WBS_Spalte = WBS_Startspalte
    For Data_Zeile = startzeile + 1 To Data_Endzeile
        If ausgeblendet = True Or (ausgeblendet = False And nlc_phb_06.Rows(Data_Zeile).Hidden = False) Then
            If nlc_phb_06.Cells(Data_Zeile, SpNr_Ebene).Value - ebene_phase = 2 Then
                'Knoten
                Call nlc_08.WP_Builder(Data_Zeile, WBS_Zeile, WBS_Spalte, Layoutstart, ebene_phase)
                'Linien
                With nlc_phb_08.Cells(WBS_Zeile - 1, WBS_Spalte + Kalk1).Borders(xlEdgeLeft)
                    .LineStyle = xlContinuous
                    .Weight = xlMedium
                    '.ColorIndex = xlAutomatic
                    .ThemeColor = 7
                End With
                If Kalk2 = 0 Then Kalk2 = WBS_Spalte + Kalk1
                Kalk3 = WBS_Spalte + Kalk1 - 1
                WBS_Spalte = WBS_Spalte + WBS_Breite + 1
                Counter_Ebene2 = Counter_Ebene2 + 1
            End If
            If WBS_Spalte > MaxSpalte Then MaxSpalte = WBS_Spalte
            If Counter_Ebene2 > Max_Ebene2 Then Exit For
        End If
    Next Data_Zeile
    
    'Querlinie (1. zur 2.Ebene) aufbauen
    WBS_Zeile = WBS_Startzeile + WBS_Hoehe
    If WBS_Spalte > WBS_Startspalte + WBS_Breite + 1 Then
        With nlc_phb_08.Range(nlc_phb_08.Cells(WBS_Zeile, Kalk2), nlc_phb_08.Cells(WBS_Zeile, Kalk3)).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            '.ColorIndex = xlAutomatic
            .ThemeColor = 7
        End With
    End If
    
    'Arbeitspakete (3-5.Ebene) aufbauen
    Counter_Ebene2 = 1
    WBS_Zeile = WBS_Startzeile + 2 * WBS_Hoehe + 3
    MaxZeile = WBS_Zeile
    Zeile_Ebene2 = WBS_Zeile - 1
    WBS_Spalte = WBS_Startspalte
    Kalk2 = VBA.Round((WBS_Hoehe) / 2, 0) - 1
    For Data_Zeile = startzeile + 2 To Data_Endzeile
        If ausgeblendet = True Or (ausgeblendet = False And nlc_phb_06.Rows(Data_Zeile).Hidden = False) Then
            Kalk1 = nlc_phb_06.Cells(Data_Zeile, SpNr_Ebene).Value - ebene_phase
            If Kalk1 = 2 Then
                WBS_Spalte = WBS_Spalte + WBS_Breite + 1
                WBS_Zeile = WBS_Startzeile + 2 * WBS_Hoehe + 3
                Counter_Ebene3 = 1
                Counter_Ebene2 = Counter_Ebene2 + 1
                If Counter_Ebene2 > Max_Ebene2 Then Exit For
            ElseIf Kalk1 = 3 Then
                Counter_Ebene4 = 1
                If Counter_Ebene3 <= Max_Ebene3 Then
                    'Alle Folgenden If Abfragen in gleicher einreihung werden f|fffd|r die Leerzeilen im Plan verwendet!!
                    If nlc_phb_06.Cells(Data_Zeile, SpNr_Name).Value <> "" Then
                        Call nlc_08.WP_Builder(Data_Zeile, WBS_Zeile, WBS_Spalte, Layoutstart, ebene_phase)
                    End If
                    Zeile_Ebene3 = WBS_Zeile + WBS_Hoehe
                    If nlc_phb_06.Cells(Data_Zeile, SpNr_Name).Value <> "" Then
                        Call nlc_08.Line_Builder(Zeile_Ebene2, WBS_Spalte + 1, WBS_Zeile + Kalk2, WBS_Spalte + 1)
                    End If
                    WBS_Zeile = WBS_Zeile + WBS_Hoehe + 1
                    Counter_Ebene3 = Counter_Ebene3 + 1
                End If
            ElseIf Kalk1 = 4 And Max_Ebenen > 3 And WBS_Ebenen > 3 Then
                Counter_Ebene5 = 1
                If Counter_Ebene4 <= Max_Ebene4 Then
                    If nlc_phb_06.Cells(Data_Zeile, SpNr_Name).Value <> "" Then
                        Call nlc_08.WP_Builder(Data_Zeile, WBS_Zeile, WBS_Spalte, Layoutstart, ebene_phase)
                    End If
                    Zeile_Ebene4 = WBS_Zeile + WBS_Hoehe
                    If nlc_phb_06.Cells(Data_Zeile, SpNr_Name).Value <> "" Then
                        Call nlc_08.Line_Builder(Zeile_Ebene3, WBS_Spalte + 3, WBS_Zeile + Kalk2, WBS_Spalte + 3)
                    End If
                    WBS_Zeile = WBS_Zeile + WBS_Hoehe + 1
                    Counter_Ebene4 = Counter_Ebene4 + 1
                End If
            ElseIf Kalk1 = 5 And Max_Ebenen > 4 And WBS_Ebenen > 4 Then
                If Counter_Ebene5 <= Max_Ebene5 Then
                    If nlc_phb_06.Cells(Data_Zeile, SpNr_Name).Value <> "" Then
                        Call nlc_08.WP_Builder(Data_Zeile, WBS_Zeile, WBS_Spalte, Layoutstart, ebene_phase)
                        Call nlc_08.Line_Builder(Zeile_Ebene4, WBS_Spalte + 5, WBS_Zeile + Kalk2, WBS_Spalte + 5)
                    End If
                    WBS_Zeile = WBS_Zeile + WBS_Hoehe + 1
                    Counter_Ebene5 = Counter_Ebene5 + 1
                End If
            End If
            If WBS_Zeile > MaxZeile Then MaxZeile = WBS_Zeile
            If WBS_Spalte > MaxSpalte Then MaxSpalte = WBS_Spalte
        End If
    Next Data_Zeile
    
    'Legende auftragen und Rahmen ziehen
    If MaxSpalte < 40 Then MaxSpalte = 40
     
    'Spaltenbreite anpassen
    nlc_phb_08.Range(nlc_phb_08.Cells(1, 1), nlc_phb_08.Cells(1, MaxSpalte)).columnWidth = spaltenbreite
    
    Call nlc_08.WBS_Header(3, MaxZeile - 2, MaxSpalte - 1, Layoutstart)
    nlc_phb_06.Range("D7").Value = MaxZeile + 20
    
ende:
    Call nlc_intern.nlc_protect(nlc_phb_06)
    Call nlc_intern.nlc_protect(nlc_phb_08)
    Call Logo_Positionieren(nlc_phb_08.name, 2, 0)
    DoEvents


End Sub

Public Sub refresh_psp()
   
    nlc_intern.application_off
    Call nlc_08.Refresh
    nlc_intern.application_on
End Sub


Public Sub WBS_Clear()
    
    Dim Diagrammhoehe As Integer
    Diagrammhoehe = nlc_phb_06.Range("D7").Value
    
    'Kopfzeile Linien entfernen
    With nlc_phb_08.Range("A1:MZ3")
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    'Diagrammfl|fffd|che zur|fffd|cksetzen
    nlc_phb_08.Rows("4:15000").Delete Shift:=xlUp
        
End Sub

Public Sub WP_Builder(Data_Zeile As Integer, WBS_Zeile As Integer, WBS_Spalte As Integer, Layoutstart As Integer, ebene_phase)
    
    Dim Data_Spalte As Integer, Data_Art As String, Data_Ebene As Integer
    Dim MD_Zeile As Integer, MD_Spalte As Integer, MD_ZeileArt As Integer, MD_ZeileEbene As Integer
    Dim WBS_Hoehe As Integer, WBS_Breite As Integer, WBS_Ebenen As Integer, Max_Ebenen As Integer
    Dim MD_Ebenenhoehe As Integer, MD_Arthoehe As Integer, MD_Layouthoehe As Integer
    Dim Pruefspalte As Integer, Pruefoperator As String, Pruefwert As Variant
    Dim Felderanzahl As Integer, Feldinhalt As Variant
    
    'Parameter Stammdaten einlesen
    WBS_Hoehe = nlc_phb_59.Cells(Layoutstart, 2).Value
    WBS_Breite = nlc_phb_59.Cells(Layoutstart, 4).Value
    WBS_Ebenen = nlc_phb_59.Cells(Layoutstart, 14).Value
    Max_Ebenen = nlc_phb_59.Range("I9").Value
    MD_Spalte = 2
    
    'Weitere Parameter berechnen
    MD_Ebenenhoehe = MDWBS_Hoehe + 4 'Ebene, Filter, Raster und Abstand
    MD_Arthoehe = (MD_Ebenenhoehe * (WBS_Ebenen - 1)) + 1 'Ebene2 bis max. Ebene5
    MD_Layouthoehe = (MD_Arthoehe * 4) + 1 'Arbeitspaket, Meilenstein, Sammelvorgang, Projekt(nur mit 1 Ebene)
    
    Data_Ebene = nlc_phb_06.Cells(Data_Zeile, SpNr_Ebene).Value - ebene_phase
    If Data_Ebene = 1 Then
        Data_Art = "PJ"
    Else
        Data_Art = nlc_phb_06.Cells(Data_Zeile, SpNr_Art).Value
    End If
    
    'Stammdatenknoten suchen
    For MD_ZeileArt = Layoutstart + 1 To MD_Layouthoehe + Layoutstart Step MD_Arthoehe 'Sucht in den 4 Arten
        If nlc_phb_59.Cells(MD_ZeileArt, MD_Spalte).Value = Data_Art Then
            For MD_ZeileEbene = MD_ZeileArt + 1 To MD_ZeileArt + MD_Arthoehe Step MD_Ebenenhoehe 'Sucht Ebenen ab
                If nlc_phb_59.Cells(MD_ZeileEbene, MD_Spalte).Value = Data_Ebene Then
                    MD_Zeile = MD_ZeileEbene + 3
                    While nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte).Value <> ""
                        Pruefspalte = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte).Value
                        Pruefoperator = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte + 3).Value
                        Pruefwert = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte + 6).Value
                        Felderanzahl = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte + 9).Value
                        If Pruefoperator = "=" Then
                            If nlc_phb_06.Cells(Data_Zeile, Pruefspalte).Value = Pruefwert Then Exit For
                        ElseIf Pruefoperator = ">" Then
                            If nlc_phb_06.Cells(Data_Zeile, Pruefspalte).Value > Pruefwert Then Exit For
                        ElseIf Pruefoperator = "<" Then
                            If nlc_phb_06.Cells(Data_Zeile, Pruefspalte).Value < Pruefwert Then Exit For
                        End If
                        MD_Spalte = MD_Spalte + MD_Spaltensprung
                    Wend
                    Exit For
                End If
            Next MD_ZeileEbene
            Exit For
        End If
    Next MD_ZeileArt
    MD_Spalte = MD_Spalte + 1
    
    'Knotenlayout |fffd|bertragen
    nlc_phb_59.Range(nlc_phb_59.Cells(MD_Zeile, MD_Spalte), nlc_phb_59.Cells(MD_Zeile + WBS_Hoehe - 1, MD_Spalte + WBS_Breite - 1)).Copy
    nlc_phb_08.Cells(WBS_Zeile, WBS_Spalte).Select
    ActiveSheet.Paste
    nlc_phb_08.Range(nlc_phb_08.Cells(WBS_Zeile, WBS_Spalte), nlc_phb_08.Cells(WBS_Zeile + WBS_Hoehe - 1, WBS_Spalte + WBS_Breite - 1)).PasteSpecial Paste:=xlPasteFormats
    
    'Knoteninhalte |fffd|bertragen
    MD_Spalte = MD_Spalte + MDWBS_Breite + 1
    For level = 0 To Felderanzahl - 1
        Feldinhalt = nlc_phb_06.Cells(Data_Zeile, VBA.CInt(nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte).Value)).Value
        nlc_phb_08.Cells(WBS_Zeile + nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte + 2).Value - 1, WBS_Spalte + nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte + 1).Value - 1).Value = Feldinhalt
        'MsgBox (nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte + 2).Value & ", " & nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte + 1).Value & ": " & Feldinhalt)
    Next level
    
    
    'Rangebereiche (Koordinaten) speichern
    'Range
    
    If nlc_phb_59.Cells(5, 66).Value = "Small" And nlc_phb_06.Cells(Data_Zeile, SpNr_Art).Value = "MS" Then
        nlc_phb_06.Cells(Data_Zeile, SpNr_left).Value = WBS_Spalte + nlc_phb_59.Cells(MD_Zeile, MD_Spalte + 1).Value - 2  'left
    Else
        nlc_phb_06.Cells(Data_Zeile, SpNr_left).Value = WBS_Spalte + nlc_phb_59.Cells(MD_Zeile, MD_Spalte + 1).Value - 1  'left
    End If
    nlc_phb_06.Cells(Data_Zeile, SpNr_top).Value = WBS_Zeile  'top
    nlc_phb_06.Cells(Data_Zeile, SpNr_height).Value = WBS_Zeile + WBS_Hoehe - 1 'height
    nlc_phb_06.Cells(Data_Zeile, SpNr_width).Value = WBS_Spalte + WBS_Breite - 1 'width
End Sub

Public Sub WP_Builder2(Data_Zeile As Integer, WBS_Zeile As Integer, WBS_Spalte As Integer, Layoutstart As Integer, width As Integer, ebene_phase)
    
    Dim Data_Spalte As Integer, Data_Art As String, Data_Ebene As Integer
    Dim MD_Zeile As Integer, MD_Spalte As Integer, MD_ZeileArt As Integer, MD_ZeileEbene As Integer
    Dim WBS_Hoehe As Integer, WBS_Breite As Integer, WBS_Ebenen As Integer, Max_Ebenen As Integer, wbs_div As Integer
    Dim MD_Ebenenhoehe As Integer, MD_Arthoehe As Integer, MD_Layouthoehe As Integer
    Dim Pruefspalte As Integer, Pruefoperator As String, Pruefwert As Variant
    Dim Felderanzahl As Integer, Feldinhalt As Variant
    
    'Parameter Stammdaten einlesen
    WBS_Hoehe = nlc_phb_59.Cells(Layoutstart, 2).Value
    WBS_Breite = width + 1 'nlc_phb_59.Cells(Layoutstart, 4).Value
    wbs_div = nlc_phb_59.Cells(Layoutstart, 4).Value - WBS_Breite
    WBS_Ebenen = nlc_phb_59.Cells(Layoutstart, 14).Value
    Max_Ebenen = nlc_phb_59.Range("I9").Value
    MD_Spalte = 2
    
    'Weitere Parameter berechnen
    MD_Ebenenhoehe = MDWBS_Hoehe + 4 'Ebene, Filter, Raster und Abstand
    MD_Arthoehe = (MD_Ebenenhoehe * (WBS_Ebenen - 1)) + 1 'Ebene2 bis max. Ebene5
    MD_Layouthoehe = (MD_Arthoehe * 4) + 1 'Arbeitspaket, Meilenstein, Sammelvorgang, Projekt(nur mit 1 Ebene)
    Data_Art = nlc_phb_06.Cells(Data_Zeile, SpNr_Art).Value
    Data_Ebene = nlc_phb_06.Cells(Data_Zeile, SpNr_Ebene).Value - ebene_phase
    
    'Stammdatenknoten suchen
    For MD_ZeileArt = Layoutstart + 1 To MD_Layouthoehe + Layoutstart Step MD_Arthoehe 'Sucht in den 4 Arten
        If nlc_phb_59.Cells(MD_ZeileArt, MD_Spalte).Value = Data_Art Then
            For MD_ZeileEbene = MD_ZeileArt + 1 To MD_ZeileArt + MD_Arthoehe Step MD_Ebenenhoehe 'Sucht Ebenen ab
                If nlc_phb_59.Cells(MD_ZeileEbene, MD_Spalte).Value = Data_Ebene Then
                    MD_Zeile = MD_ZeileEbene + 3
                    While nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte).Value <> ""
                        Pruefspalte = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte).Value
                        Pruefoperator = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte + 3).Value
                        Pruefwert = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte + 6).Value
                        Felderanzahl = nlc_phb_59.Cells(MD_ZeileEbene + 1, MD_Spalte + 9).Value
                        If Pruefoperator = "=" Then
                            If nlc_phb_06.Cells(Data_Zeile, Pruefspalte).Value = Pruefwert Then Exit For
                        ElseIf Pruefoperator = ">" Then
                            If nlc_phb_06.Cells(Data_Zeile, Pruefspalte).Value > Pruefwert Then Exit For
                        ElseIf Pruefoperator = "<" Then
                            If nlc_phb_06.Cells(Data_Zeile, Pruefspalte).Value < Pruefwert Then Exit For
                        End If
                        MD_Spalte = MD_Spalte + MD_Spaltensprung
                    Wend
                    Exit For
                End If
            Next MD_ZeileEbene
            Exit For
        End If
    Next MD_ZeileArt
    MD_Spalte = MD_Spalte + 1
    
    'Knotenlayout |fffd|bertragen
    nlc_phb_59.Range(nlc_phb_59.Cells(MD_Zeile, MD_Spalte + wbs_div), nlc_phb_59.Cells(MD_Zeile + WBS_Hoehe - 1, MD_Spalte + WBS_Breite + wbs_div - 1)).Copy
    nlc_phb_08.Cells(WBS_Zeile, WBS_Spalte + wbs_div).Select
    ActiveSheet.Paste
    nlc_phb_08.Range(nlc_phb_08.Cells(WBS_Zeile, WBS_Spalte + wbs_div), nlc_phb_08.Cells(WBS_Zeile + WBS_Hoehe - 1, WBS_Spalte + WBS_Breite + wbs_div - 1)).PasteSpecial Paste:=xlPasteFormats
    
    'Knoteninhalte |fffd|bertragen
    MD_Spalte = MD_Spalte + MDWBS_Breite + 1
    For level = 0 To Felderanzahl - 1
        Feldinhalt = nlc_phb_06.Cells(Data_Zeile, VBA.CInt(nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte).Value)).Value
        nlc_phb_08.Cells(WBS_Zeile + nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte + 2).Value - 1, WBS_Spalte + nlc_phb_59.Cells(MD_Zeile + level, MD_Spalte + 1).Value - 1).Value = Feldinhalt
    Next level
End Sub

Public Sub Line_Builder(WBS_Zeile1 As Integer, WBS_Spalte1 As Integer, WBS_Zeile2 As Integer, WBS_Spalte2 As Integer)
    
    With nlc_phb_08.Range(nlc_phb_08.Cells(WBS_Zeile1, WBS_Spalte1), nlc_phb_08.Cells(WBS_Zeile2, WBS_Spalte1)).Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        '.ColorIndex = xlAutomatic
        .ThemeColor = 7
    End With
    With nlc_phb_08.Range(nlc_phb_08.Cells(WBS_Zeile2, WBS_Spalte1), nlc_phb_08.Cells(WBS_Zeile2, WBS_Spalte2)).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        '.ColorIndex = xlAutomatic
        .ThemeColor = 7
    End With
    
End Sub

Public Sub WBS_Header(Kopfhoehe As Integer, Diagrammhoehe As Integer, Diagrammbreite As Integer, Layoutstart As Integer)
    
    Dim Legendenbreite As Integer, Legendenhoehe As Integer, Layoutabstand As Integer
    Dim Legendenstartzeile As Integer, Legendenstartspalte As Integer
    Dim Druckbereich As String
    
    Layoutabstand = nlc_phb_59.Range("I8").Value
    Legendenhoehe = 1
    
    'Legende und Trenner Diagramm/Legende
    If nlc_phb_59.Range("BN6").Value = True Then
        Legendenhoehe = nlc_phb_59.Cells(Layoutstart, 16).Value
        Legendenbreite = nlc_phb_59.Cells(Layoutstart, 18).Value
        Legendenstartzeile = Layoutstart + Layoutabstand - 17
        Legendenstartspalte = 3
        nlc_phb_59.Range(nlc_phb_59.Cells(Legendenstartzeile, Legendenstartspalte), nlc_phb_59.Cells(Legendenstartzeile + Legendenhoehe - 1, Legendenstartspalte + Legendenbreite - 1)).Copy
        nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe, 1).Select
        ActiveSheet.Paste
        'nlc_phb_08.Range(nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe, 1), nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1, Legendenbreite)).PasteSpecial Paste:=xlPasteFormats
    
        With nlc_phb_08.Range(nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe, 1), nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1, Diagrammbreite)).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            '.ColorIndex = xlAutomatic
            .ThemeColor = 7
        End With
    End If
    
'    'Horizontal oben
'    With nlc_phb_08.Range(nlc_phb_08.Cells(1, 1), nlc_phb_08.Cells(Kopfhoehe, Diagrammbreite)).Borders(xlEdgeTop)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        '.ColorIndex = xlAutomatic
'        .ThemeColor = 7
'    End With
    'Trenner Kopf/Diagramm
    With nlc_phb_08.Range(nlc_phb_08.Cells(1, 1), nlc_phb_08.Cells(Kopfhoehe, Diagrammbreite)).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ThemeColor = 7
        '.ColorIndex = xlAutomatic
    End With
'    'Horizontal unten
'    With nlc_phb_08.Range(nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe, 1), nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1, Diagrammbreite)).Borders(xlEdgeBottom)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        '.ColorIndex = xlAutomatic
'        .ThemeColor = 7
'    End With

'    'Vertikal links
'    With nlc_phb_08.Range(nlc_phb_08.Cells(1, 1), nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1, Diagrammbreite)).Borders(xlEdgeLeft)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        '.ColorIndex = xlAutomatic
'        .ThemeColor = 7
'    End With

    'Vertikal rechts
    With nlc_phb_08.Range(nlc_phb_08.Cells(1, 1), nlc_phb_08.Cells(Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1, Diagrammbreite)).Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 32
        '.ThemeColor = 7
    End With
    
    If VBA.IsNumeric(nlc_phb_59.Range("I19").Value) = True Then
        If nlc_phb_59.Range("I19").Value > 1 Then
            nlc_phb_08.Rows(Kopfhoehe + 1 & ":" & Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1).RowHeight = nlc_phb_59.Range("I19").Value
        Else
            nlc_phb_08.Rows(Kopfhoehe + 1 & ":" & Kopfhoehe + Diagrammhoehe + Legendenhoehe - 1).RowHeight = 7
        End If
    End If

    
End Sub

Attribute VB_Name = "nlc_12"
Option Explicit
Option Private Module
Dim nlc_pw As String

Public Sub AKTUELLClick()
    
    On Error GoTo ende:
    nlc_intern.application_off
    nlc_12.Refresh
    nlc_phb_12.Select
    nlc_phb_12.Range("A1").Select
ende:
    nlc_intern.application_on

End Sub

Public Sub Refresh()
    Dim i As Integer
    Dim j As Integer
    Dim anzahl As Integer
    
    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_12)
      
    i = Data_Startzeile
    j = 8
    If nlc_phb_12.Range("F4").Value > 7 Then
        nlc_phb_12.Rows("8:" & nlc_phb_12.Range("F4").Value).Delete
        nlc_phb_12.Range("F4").Value = 7
    End If
    
    anzahl = 0
    While (nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END") 'APs im Datenblatt durchgehen
        If nlc_phb_06.Cells(i, SpNr_Art).Value = "MS" Then 'Nur Meilensteine filtern
            anzahl = anzahl + 1
        End If
       i = i + 1
    Wend
    
    If anzahl > 0 Then
    
        nlc_phb_12.Rows("5:5").Hidden = False
        nlc_phb_12.Rows("5:5").Copy
        nlc_phb_12.Rows(8 & ":" & 8 + anzahl - 1).Insert Shift:=xlDown
        i = Data_Startzeile
        j = 8
    
        While (nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END") 'APs im Datenblatt durchgehen
            If nlc_phb_06.Cells(i, SpNr_Art).Value = "MS" Then 'Nur Meilensteine filtern
                nlc_phb_12.Cells(j, 2).Value = nlc_phb_06.Cells(i, SpNr_PSP).Value
                nlc_phb_12.Cells(j, 3).Value = nlc_phb_06.Cells(i, SpNr_Name).Value
                nlc_phb_12.Cells(j, 4).Value = nlc_phb_06.Cells(i, SpNr_Fortschritt).Value
                nlc_phb_12.Cells(j, 6).Value = nlc_phb_06.Cells(i, SpNr_DateB_S).Value
                nlc_phb_12.Cells(j, 7).Value = nlc_phb_06.Cells(i, SpNr_DateA_S).Value
                j = j + 1
            End If
n|fffd|chster:
           i = i + 1
        Wend
        nlc_phb_12.Range("F4").Value = j - 1
           
        nlc_phb_12.Rows("5:5").Hidden = True
        
        nlc_phb_12.Range("A8:H" & i - 1).Sort Key1:=nlc_phb_12.Range("G8"), Order1:=xlAscending, Key2:= _
        nlc_phb_12.Range("C8"), Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:=False, _
        Orientation:=xlTopToBottom, DataOption1:=xlSortNormal, DataOption2:= _
        xlSortNormal
    End If
    
    ' Aktion nachbereiten

    Call nlc_intern.nlc_protect(nlc_phb_12)
    DoEvents
    
End Sub


Attribute VB_Name = "nlc_14"
Option Explicit
Option Private Module
Dim nlc_pw As String

Const ganttcalc_startzeile = 15
Const ganttcalc_startspalte = 4



Public Sub refreshClick()
    
    On Error GoTo ende
    nlc_intern.application_off

    Call nlc_14.RefreshGantt

ende:
    nlc_intern.application_on
End Sub

Public Sub Seitenumbruch()
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    'Seitenumbr|fffd|che anpassen
    
    On Error Resume Next
    Dim row_count As Integer
    Dim quick_counter As Integer
    Dim blatt As String
    
    nlc_phb_14.Select
    nlc_phb_14.ResetAllPageBreaks
    ActiveWindow.VIEW = xlPageBreakPreview
    For row_count = 1 To nlc_phb_14.HPageBreaks.count + 1
        For quick_counter = 1 To 8 Step 1
            If InStr(1, CStr((nlc_phb_14.HPageBreaks(row_count).Location.Row - 27 - (quick_counter - 1)) / 8), ",") = 0 Then
                Set nlc_phb_14.HPageBreaks(row_count).Location = Range("A" & CLng(nlc_phb_14.HPageBreaks(row_count).Location.Row - (quick_counter - 2) - 8) & "")
                Exit For
            End If
        Next quick_counter
    Next row_count
    ActiveWindow.VIEW = xlNormalView

End Sub



Public Sub RefreshGantt()
    
    Dim i%, zeile_calc%, j%, k%
    Dim sp_name%, sp_uid%, sp_fbasis%, sp_faktuell%, sp_plans%, sp_plane%, sp_akts%, sp_akte%, sp_ebene%, sp_mst%, sp_ebene2%, sp_gantt_zeile%, sp_gantt_startspalte%, sp_gantt_endspalte%
    Dim akt_gruppe As String
    Dim zeile_gantt As Integer
    Dim zaehler As Integer
'    Dim startspalte As Integer
    Dim startspalte_get As Integer
    Dim endspalte_get As Integer
    Dim anz_zeilen As Integer
    
    sp_name = 1
    sp_fbasis = 2
    sp_faktuell = 3
    sp_ebene = 4
    sp_mst = 7
    sp_plans = 8
    sp_plane = 9
    sp_akts = 10
    sp_akte = 11
    sp_ebene2 = 13
    sp_uid = 14
    sp_gantt_zeile = 25
    sp_gantt_startspalte = 26
    sp_gantt_endspalte = 27
    
    ' Aktion vorbereiten
    nlc_phb_14.Select
    nlc_phb_14.Range("A1").Select
    'On Error GoTo Error_Gen

    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_14)
    
    nlc_phb_14.Range("B4").Value = nlc_phb_14.Range("G4").Value
    nlc_phb_14.Range("B5").Value = nlc_phb_14.Range("G5").Value
    nlc_phb_14.Range("B6").Value = nlc_phb_14.Range("G6").Value
    nlc_phb_14.Range("B7").Value = nlc_phb_14.Range("G7").Value
    nlc_phb_14.Range("B8").Value = nlc_phb_14.Range("G8").Value
    nlc_phb_14.Range("C4").Value = nlc_phb_14.Range("H4").Value
    nlc_phb_14.Range("C5").Value = nlc_phb_14.Range("H5").Value
    nlc_phb_14.Range("F4").Value = nlc_phb_14.Range("I4").Value
    nlc_phb_14.Range("F5").Value = nlc_phb_14.Range("I5").Value
    nlc_phb_14.Range("F6").Value = nlc_phb_14.Range("I6").Value
    nlc_phb_14.Range("F7").Value = nlc_phb_14.Range("I7").Value
    
    anz_zeilen = datenbasis_aufbauen
    Call anfangsformatierung(anz_zeilen)
    
    'Stichtag eintragen
    If nlc_phb_00.Cells(56, 3).Value <> "" Then
        nlc_phb_14.Cells(21, 2).Value = nlc_phb_00.Cells(56, 3).Value
    Else
        nlc_phb_14.Cells(21, 2).Value = VBA.Format(Now, "dd.mm.yyyy")
    End If
    
    nlc_phb_56.Calculate
    nlc_phb_14.Calculate
    
    Call endformatierung(35 + ((anz_zeilen - 1) * 8))
    
    zeile_calc = ganttcalc_startzeile
    zeile_gantt = 29
    
    While Not IsEmpty(nlc_phb_56.Cells(zeile_calc, ganttcalc_startspalte).Value)
        startspalte_get = 0
        endspalte_get = 0
        
        If nlc_phb_14.Cells(8, 2).Value = "-" And nlc_phb_56.Cells(zeile_calc, sp_mst).Value <> "" Or nlc_phb_14.Cells(8, 2).Value = "x" And nlc_phb_56.Cells(zeile_calc, sp_mst).Value <> "" Or nlc_phb_56.Cells(zeile_calc, sp_mst).Value = "" Then
            If nlc_phb_56.Cells(zeile_calc, sp_mst).Value = "" Then 'Or nlc_phb_14.Cells(8, 2).Value <> "x" Then 'Wenn kein mst
                If nlc_phb_14.Cells(10, 6).Value = "Ja" Then
                    'plan:
                    If nlc_phb_56.Cells(zeile_calc, sp_plans).Value <> "" And nlc_phb_56.Cells(zeile_calc, sp_plane).Value <> "" Then
                        startspalte_get = get_startspalte(nlc_phb_56.Cells(zeile_calc, sp_plans).Value)
                        endspalte_get = get_endspalte(nlc_phb_56.Cells(zeile_calc, sp_plane).Value)
                        
                        If startspalte_get <= endspalte_get Then Call format_bereich(zeile_gantt, startspalte_get, endspalte_get, nlc_phb_56.Cells(zeile_calc, sp_fbasis).Value)
                    End If
                End If
                'aktuell:
                If nlc_phb_56.Cells(zeile_calc, sp_akts).Value <> "" And nlc_phb_56.Cells(zeile_calc, sp_akte).Value <> "" Then
                    startspalte_get = get_startspalte(nlc_phb_56.Cells(zeile_calc, sp_akts).Value)
                    endspalte_get = get_endspalte(nlc_phb_56.Cells(zeile_calc, sp_akte).Value)
                    
                    nlc_phb_56.Cells(zeile_calc, sp_gantt_zeile).Value = zeile_gantt + 4
                    If startspalte_get < 249 And startspalte_get > 10 Then
                        nlc_phb_56.Cells(zeile_calc, sp_gantt_startspalte).Value = startspalte_get - 1
                    Else
                        nlc_phb_56.Cells(zeile_calc, sp_gantt_startspalte).Value = ""
                    End If
                    If endspalte_get < 249 And endspalte_get > 10 Then
                        nlc_phb_56.Cells(zeile_calc, sp_gantt_endspalte).Value = endspalte_get + 1
                    Else
                        nlc_phb_56.Cells(zeile_calc, sp_gantt_endspalte).Value = ""
                    End If
                    
                    If startspalte_get <= endspalte_get Then Call format_bereich(zeile_gantt + 4, startspalte_get, endspalte_get, nlc_phb_56.Cells(zeile_calc, sp_faktuell).Value)
                End If
            Else
                If nlc_phb_14.Cells(10, 6).Value = "Ja" Then
                    'nlc_phb_14.Cells(zeile_gantt - 1, 1).Value = nlc_phb_56.Cells(zeile_calc, sp_name).Value & " (M)"
                    'plan:
                    If nlc_phb_56.Cells(zeile_calc, sp_plane - 1).Value <> "" Then
                        startspalte_get = get_startspalte(nlc_phb_56.Cells(zeile_calc, sp_plane - 1).Value)
                        If startspalte_get <> 0 Then
                            nlc_phb_14.Range(Cells(zeile_gantt, startspalte_get), Cells(zeile_gantt + 1, startspalte_get)).MergeCells = True
                            nlc_phb_14.Range(Cells(zeile_gantt, startspalte_get), Cells(zeile_gantt + 1, startspalte_get)).HorizontalAlignment = xlCenter
                            nlc_phb_14.Range(Cells(zeile_gantt, startspalte_get), Cells(zeile_gantt + 1, startspalte_get)).VerticalAlignment = xlCenter
                            
                            nlc_phb_14.Cells(zeile_gantt, startspalte_get).Value = VBA.ChrW(9660) '"w"
                            nlc_phb_14.Cells(zeile_gantt, startspalte_get).Font.ColorIndex = 48
                        End If
                    End If
                End If
                'aktuell:
                If nlc_phb_56.Cells(zeile_calc, sp_akte - 1).Value <> "" Then
                    startspalte_get = get_startspalte(nlc_phb_56.Cells(zeile_calc, sp_akte - 1).Value)
                    If startspalte_get <> 0 Then
                        nlc_phb_14.Range(Cells(zeile_gantt + 4, startspalte_get), Cells(zeile_gantt + 5, startspalte_get)).MergeCells = True
                        nlc_phb_14.Range(Cells(zeile_gantt + 4, startspalte_get), Cells(zeile_gantt + 5, startspalte_get)).HorizontalAlignment = xlCenter
                        nlc_phb_14.Range(Cells(zeile_gantt + 4, startspalte_get), Cells(zeile_gantt + 5, startspalte_get)).VerticalAlignment = xlCenter
                        nlc_phb_14.Cells(zeile_gantt + 4, startspalte_get).Value = VBA.ChrW(9660) '"w"
                        nlc_phb_14.Cells(zeile_gantt + 4, startspalte_get).Font.ColorIndex = 2
                        
                        nlc_phb_56.Cells(zeile_calc, sp_gantt_zeile).Value = zeile_gantt + 4
                        If startspalte_get < 249 And startspalte_get > 10 Then
                            nlc_phb_56.Cells(zeile_calc, sp_gantt_startspalte).Value = startspalte_get - 1
                            nlc_phb_56.Cells(zeile_calc, sp_gantt_endspalte).Value = startspalte_get + 1
                        Else
                            nlc_phb_56.Cells(zeile_calc, sp_gantt_startspalte).Value = ""
                            nlc_phb_56.Cells(zeile_calc, sp_gantt_endspalte).Value = ""
                        End If
                    End If
                End If
            End If
        End If
        
        zeile_calc = zeile_calc + 1
        zeile_gantt = zeile_gantt + 8
    Wend
    
    For i = 27 To zeile_gantt - 1 Step 8
        If nlc_phb_14.Cells(i + 1, 3).Value <> "" And i <> 24 Then
            nlc_phb_14.Cells(i + 1, 1).Select
            With Selection
                .IndentLevel = nlc_phb_14.Cells(i + 1, 3).Value - 1
            End With
        End If
    Next i
    
    If nlc_phb_14.Cells(9, 6).Value = "Ja" Then Call verbindungen_erstellen
    Call Logo_Positionieren(nlc_phb_14.name, 2, 0)
    Call nlc_14.Seitenumbruch
    
    nlc_phb_14.Cells(27, 251).Value = ""
    ' Aktion nachbereiten
    nlc_phb_14.Select
    nlc_phb_14.Range("F1").Select
    Call nlc_intern.nlc_protect(nlc_phb_14)
    DoEvents
    Exit Sub
    
error_gen:
    nlc_phb_14.Cells(27, 251).Value = ""
    ' Aktion nachbereiten
    Call nlc_intern.nlc_protect(nlc_phb_14)
    nlc_phb_14.Select
    nlc_phb_14.Range("F1").Select
    MsgBox nlc_Language_Msgs("phb_general_error_occured"), Title:="Error"
    DoEvents

End Sub

'Private Function datenbasis_aufbauen() As Integer
'    'Daten holen
'    Dim j As Integer
'    Dim k As Integer
'    Dim i As Integer
'    Dim sinnvoll As Boolean 'bei gefilterten Werten nur wenn im Bereich vorhanden'
'    Dim startdatum As Date
'    Dim enddatum As Date
'
'    j = ganttcalc_startzeile 'Gantt-Calc Zeile
'    i = Data_Startzeile
'    k = ganttcalc_startspalte 'Gantt-Calc Spalte
'
'    'nlc_phb_56.Range("D15:AB100014").ClearContents
'    While (nlc_phb_56.Cells(12, k).Value <> "END")
'        nlc_phb_56.Range(nlc_phb_56.Cells(j, k), nlc_phb_56.Cells(j + 1000, k)).ClearContents
'        k = k + 1
'    Wend
'
'    If (nlc_phb_14.Range("G4").Value = "PS" Or nlc_phb_14.Range("g4").Value = "") And (nlc_phb_14.Range("G5").Value = "PE" Or nlc_phb_14.Range("g5").Value = "") Then
'        sinnvoll = False
'    Else
'        sinnvoll = True
'    End If
'
'    startdatum = nlc_phb_14.Range("A22").Value
'    enddatum = nlc_phb_14.Range("B22").Value
'
'    While (nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END") 'APs im Datenblatt durchgehen
'        If (nlc_phb_06.Cells(i, SpNr_DateA_S).Value <> "" And nlc_phb_06.Cells(i, SpNr_DateA_E).Value <> "" And sinnvoll = True) Or sinnvoll = False Then
'            If nlc_phb_06.Cells(i, SpNr_DateA_S).Value >= startdatum And nlc_phb_06.Cells(i, SpNr_DateA_S).Value <= enddatum Or nlc_phb_06.Cells(i, SpNr_DateA_E).Value >= startdatum And nlc_phb_06.Cells(i, SpNr_DateA_E).Value <= enddatum Or nlc_phb_06.Cells(i, SpNr_DateA_S).Value <= startdatum And nlc_phb_06.Cells(i, SpNr_DateA_E).Value >= enddatum Or sinnvoll = False Then
'                If nlc_phb_14.Range("B8").Value = "x" Or nlc_phb_14.Range("B8").Value = "" Then
'                    If nlc_phb_06.Cells(i, SpNr_Ebene).Value <= VBA.CInt(nlc_phb_56.Range("B1").Value) Or nlc_phb_06.Cells(i, SpNr_Art).Value = "MS" Then 'F|fffd|r Gantt nur relevant ab Ebene x Ausnahme Meilensteine
'                        If (nlc_phb_14.Range("B8").Value = "" And nlc_phb_06.Cells(i, SpNr_Art).Value <> "MS") Or nlc_phb_14.Range("B8").Value = "x" Then
'                            k = ganttcalc_startspalte
'                            While (nlc_phb_56.Cells(12, k).Value <> "END")
'                                If nlc_phb_56.Cells(13, k).Value = "" Then
'                                    If nlc_phb_56.Cells(12, k).Value <> "x" Then
'                                        nlc_phb_56.Cells(j, k).Value = nlc_phb_06.Cells(i, nlc_phb_56.Cells(12, k).Value)
'                                    End If
'                                Else
'                                    If nlc_phb_06.Cells(i, nlc_phb_56.Cells(12, k).Value) = nlc_phb_56.Cells(13, k).Value Then
'                                        nlc_phb_56.Cells(j, k).Value = "x"
'                                    End If
'                                End If
'                                k = k + 1
'                            Wend
'                            j = j + 1
'                        End If
'                    End If
'                ElseIf nlc_phb_14.Range("B8").Value = "-" Then
'                    If nlc_phb_06.Cells(i, SpNr_Ebene).Value <= VBA.CInt(nlc_phb_56.Range("B1").Value) Then 'F|fffd|r Gantt nur relevant ab Ebene x inklusive Milensteine
'                        If nlc_phb_06.Cells(i, SpNr_Art).Value <> "MS" Or nlc_phb_14.Range("B8").Value = "-" Then
'                            k = ganttcalc_startspalte
'                            While (nlc_phb_56.Cells(12, k).Value <> "END")
'                                If nlc_phb_56.Cells(13, k).Value = "" Then
'                                    If nlc_phb_56.Cells(12, k).Value <> "x" Then
'                                        nlc_phb_56.Cells(j, k).Value = nlc_phb_06.Cells(i, nlc_phb_56.Cells(12, k).Value)
'                                    End If
'                                Else
'                                    If nlc_phb_06.Cells(i, nlc_phb_56.Cells(12, k).Value) = nlc_phb_56.Cells(13, k).Value Then
'                                        nlc_phb_56.Cells(j, k).Value = "x"
'                                    End If
'                                End If
'                                k = k + 1
'                            Wend
'                            j = j + 1
'                        End If
'                    End If
'                End If
'            End If
'        End If
'n|fffd|chster:
'       i = i + 1
'    Wend
'    datenbasis_aufbauen = j - ganttcalc_startzeile
'End Function

Private Function datenbasis_aufbauen() As Integer
    'Daten holen
    Dim j As Integer
    Dim i As Integer
    Dim sinnvoll As Boolean 'bei gefilterten Werten nur wenn im Bereich vorhanden'
    Dim startdatum As Date
    Dim enddatum As Date
    
    j = ganttcalc_startzeile 'Gantt-Calc Zeile
    i = Data_Startzeile
    
    Dim k As Integer
    k = ganttcalc_startspalte

    'nlc_phb_56.Range("D15:AB100014").ClearContents
    While (nlc_phb_56.Cells(12, k).Value <> "END")
        nlc_phb_56.Range(nlc_phb_56.Cells(j, k), nlc_phb_56.Cells(j + 1000, k)).ClearContents
        k = k + 1
    Wend
    
    If (nlc_phb_14.Range("G4").Value = "PS" Or nlc_phb_14.Range("g4").Value = "") And (nlc_phb_14.Range("G5").Value = "PE" Or nlc_phb_14.Range("g5").Value = "") Then
        sinnvoll = False
    Else
        sinnvoll = True
    End If
    
    startdatum = nlc_phb_14.Range("A22").Value
    enddatum = nlc_phb_14.Range("B22").Value
    
    While (nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END") 'APs im Datenblatt durchgehen
        If nlc_phb_56.Range("M3").Value = False And nlc_phb_06.Rows(i).Hidden = True Then GoTo n|fffd|chster
        If (nlc_phb_06.Cells(i, SpNr_DateA_S).Value = "" Or nlc_phb_06.Cells(i, SpNr_DateA_E).Value = "") And sinnvoll = True Then GoTo n|fffd|chster

        'If (nlc_phb_06.Cells(i, SpNr_DateA_S).Value <> "" And nlc_phb_06.Cells(i, SpNr_DateA_E).Value <> "" And sinnvoll = True) Or sinnvoll = False Then
            If nlc_phb_06.Cells(i, SpNr_DateA_S).Value >= startdatum And nlc_phb_06.Cells(i, SpNr_DateA_S).Value <= enddatum Or nlc_phb_06.Cells(i, SpNr_DateA_E).Value >= startdatum And nlc_phb_06.Cells(i, SpNr_DateA_E).Value <= enddatum Or nlc_phb_06.Cells(i, SpNr_DateA_S).Value <= startdatum And nlc_phb_06.Cells(i, SpNr_DateA_E).Value >= enddatum Or sinnvoll = False Then
                If nlc_phb_14.Range("B8").Value = "x" Or nlc_phb_14.Range("B8").Value = "" Then
                    If nlc_phb_06.Cells(i, SpNr_Ebene).Value <= VBA.CInt(nlc_phb_56.Range("B1").Value) Or nlc_phb_06.Cells(i, SpNr_Art).Value = "MS" Then 'F|fffd|r Gantt nur relevant ab Ebene x Ausnahme Meilensteine
                        If (nlc_phb_14.Range("B8").Value = "" And nlc_phb_06.Cells(i, SpNr_Art).Value <> "MS") Or nlc_phb_14.Range("B8").Value = "x" Then
                            j = zeile_aufbauen(j, i)
                        End If
                    End If
                ElseIf nlc_phb_14.Range("B8").Value = "-" Then
                    If nlc_phb_06.Cells(i, SpNr_Ebene).Value <= VBA.CInt(nlc_phb_56.Range("B1").Value) Then 'F|fffd|r Gantt nur relevant ab Ebene x inklusive Milensteine
                        If nlc_phb_06.Cells(i, SpNr_Art).Value <> "MS" Or nlc_phb_14.Range("B8").Value = "-" Then
                            j = zeile_aufbauen(j, i)
                        End If
                    End If
                End If
            End If
        'End If
n|fffd|chster:
       i = i + 1
    Wend
    datenbasis_aufbauen = j - ganttcalc_startzeile
End Function

Private Function zeile_aufbauen(zeile As Integer, zeile_data As Integer) As Integer
    Dim k As Integer
    k = ganttcalc_startspalte
    While (nlc_phb_56.Cells(12, k).Value <> "END")
        If nlc_phb_56.Cells(13, k).Value = "" Then
            If nlc_phb_56.Cells(12, k).Value <> "x" Then
                nlc_phb_56.Cells(zeile, k).Value = nlc_phb_06.Cells(zeile_data, nlc_phb_56.Cells(12, k).Value)
            End If
        Else
            If nlc_phb_06.Cells(zeile_data, nlc_phb_56.Cells(12, k).Value) = nlc_phb_56.Cells(13, k).Value Then
                nlc_phb_56.Cells(zeile, k).Value = "x"
            End If
        End If
        k = k + 1
    Wend
    zeile_aufbauen = zeile + 1
End Function

Private Sub anfangsformatierung(anz_zeilen As Integer)
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i As Integer

    nlc_intern.application_off

    Sheets(nlc_phb_14.name).Pictures("Logo").Select
    With Selection
        .left = Sheets(nlc_phb_14.name).Cells(1, 1).left
        .top = Sheets(nlc_phb_14.name).Cells(1, 1).top
    End With
    
    nlc_phb_14.Columns("I:IP").Hidden = False
    
    nlc_phb_14.Range("I28:IP35").ClearFormats
    nlc_phb_14.Range("I28:IP35").Font.Size = 16
    
    Call delete_shapes

'l|fffd|schen
    'nlc_phb_14.Range("A36:G" & nlc_phb_14.Cells(12, 4).Value + 2 + 6).Clear
    nlc_phb_14.Rows("36:" & nlc_phb_14.Cells(12, 4).Value + 2 + 6).Delete
    
    With nlc_phb_14.Range("I28:IP35")
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    
    'Basisplan ausblenden wenn n|fffd|tig
    If nlc_phb_14.Cells(10, 6).Value = "Nein" Then
        nlc_phb_14.Rows(29 & ":" & 32).Hidden = True
    Else
        nlc_phb_14.Rows(29 & ":" & 32).Hidden = False
    End If

    nlc_phb_14.Rows("28:35").AutoFill Destination:=Rows("28:" & (35 + ((anz_zeilen - 1) * 8))), Type:=xlFillCopy
    
    'Zeilen duplizieren
    nlc_phb_14.Cells(12, 4).Value = (35 + ((anz_zeilen - 1) * 8))
    'Legende anf|fffd|gen
    Call add_legend(37 + ((anz_zeilen - 1) * 8))
    Call formatierung
End Sub

Sub add_legend(last_row As Integer)
    nlc_phb_56.Range("E1:J7").Copy '********************************
    nlc_phb_14.Activate
    nlc_phb_14.Cells(last_row, 2).Activate
    ActiveSheet.Paste
    'vorformatieren
    nlc_phb_14.Rows(last_row).RowHeight = 10.5
    nlc_phb_14.Rows(last_row + 2).RowHeight = 10.5
    nlc_phb_14.Rows(last_row + 4).RowHeight = 10.5
    nlc_phb_14.Rows(last_row + 6).RowHeight = 10.5
    'letzte zeile formatieren
    nlc_phb_14.Rows(last_row + 7).RowHeight = 7.5
    'zwischenzeilen formatieren
    nlc_phb_14.Rows(last_row - 1).RowHeight = 3.75
    nlc_phb_14.Rows(last_row + 1).RowHeight = 3.75
    nlc_phb_14.Rows(last_row + 3).RowHeight = 3.75
    nlc_phb_14.Rows(last_row + 5).RowHeight = 3.75
    
    nlc_phb_14.PageSetup.PrintArea = "$A$2:$IQ$" & last_row + 7
    
    nlc_phb_14.Cells(1, 1).Select
End Sub

Private Sub formatierung()
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i As Integer
    Dim t As Date
    Dim d As Date
    Dim hilf As Integer
    Dim ende As Integer
    Dim first_month As Boolean

    first_month = True
   
    nlc_phb_14.Range("I26:IP27").ClearContents
    nlc_phb_14.Calculate
    
    If nlc_phb_14.Range("A24").Value >= 250 Then
        ende = 250
    Else
        ende = nlc_phb_14.Range("A24").Value
    End If
    
    For i = 9 To ende 'nlc_phb_14.Range("A24").Value
        Select Case nlc_phb_14.Range("B6").Value
            Case "D" 'Tage
                nlc_phb_14.Cells(27, i).Value = VBA.Format(nlc_phb_14.Cells(24, i).Value, "DD.MM.YY")
                If VBA.Weekday(nlc_phb_14.Cells(24, i).Value) = 2 Then
                    d = nlc_phb_14.Cells(24, i).Value
                    t = VBA.DateSerial(VBA.Year(d + (8 - VBA.Weekday(d)) Mod 7 - 3), 1, 1)
                    nlc_phb_14.Cells(26, i).Value = nlc_Language(Sheets("Language").Range("E3").Value, "W") & (d - t - 3 + (Weekday(t) + 1) Mod 7) \ 7 + 1
                End If
            Case "W" 'Wochen
                d = nlc_phb_14.Cells(24, i).Value
                t = VBA.DateSerial(VBA.Year(d + (8 - VBA.Weekday(d)) Mod 7 - 3), 1, 1)
                nlc_phb_14.Cells(27, i).Value = nlc_Language(Sheets("Language").Range("E3").Value, "W") & (d - t - 3 + (Weekday(t) + 1) Mod 7) \ 7 + 1
                If VBA.Day(nlc_phb_14.Cells(25, i).Value) <= 7 And (nlc_phb_00.Cells(62, 3).Value <> "deutsch" And nlc_phb_00.Cells(62, 3).Value <> "wienerisch") Then
                    nlc_phb_14.Cells(26, i).Value = Application.text(nlc_phb_14.Cells(25, i).Value, "[$-409]MMM YY;@")
                ElseIf VBA.Day(nlc_phb_14.Cells(25, i).Value) <= 7 And (nlc_phb_00.Cells(62, 3).Value = "deutsch" Or nlc_phb_00.Cells(62, 3).Value = "wienerisch") Then
                    nlc_phb_14.Cells(26, i).Value = VBA.Format(nlc_phb_14.Cells(25, i).Value, "MMM YY")
                End If
            Case "M" 'Monate
                If first_month = True Then
                    nlc_phb_14.Cells(26, i).Value = VBA.Format(nlc_phb_14.Cells(24, i).Value, "YYYY")
                    first_month = False
                Else
                    If VBA.Month(nlc_phb_14.Cells(24, i).Value) = 12 Then
                        first_month = True
                    End If
                End If
                
'                If nlc_phb_TL.Range("E3").Value <> "deutsch" Then
'                    nlc_phb_14.Cells(27, i).Value = Application.text(nlc_phb_14.Cells(24, i).Value, "[$-409]MMM;@")
'                ElseIf nlc_phb_TL.Range("E3").Value = "deutsch" Then
'                    nlc_phb_14.Cells(27, i).Value = VBA.Format(nlc_phb_14.Cells(24, i).Value, "MMM")
'                End If

                ' Deckblatt Sprache auslesen
                If nlc_phb_00.Cells(62, 3).Value <> "deutsch" And nlc_phb_00.Cells(62, 3).Value <> "wienerisch" Then
                    nlc_phb_14.Cells(27, i).Value = Application.text(nlc_phb_14.Cells(24, i).Value, "[$-409]MMM;@")
                ElseIf nlc_phb_00.Cells(62, 3).Value = "deutsch" Or nlc_phb_00.Cells(62, 3).Value = "wienerisch" Then
                    nlc_phb_14.Cells(27, i).Value = VBA.Format(nlc_phb_14.Cells(24, i).Value, "MMM")
                End If
                
                If VBA.Month(nlc_phb_14.Cells(24, i).Value) = 1 Then nlc_phb_14.Cells(26, i).Value = VBA.Format(nlc_phb_14.Cells(24, i).Value, "YYYY")
            Case "Q" 'Quartale
                Select Case VBA.Month(nlc_phb_14.Cells(24, i).Value)
                    Case 1, 2, 3
                        hilf = 1
                    Case 4, 5, 6
                        hilf = 2
                    Case 7, 8, 9
                        hilf = 3
                    Case Else
                        hilf = 4
                End Select
                nlc_phb_14.Cells(27, i).Value = hilf & ". " & nlc_Language(nlc_phb_TL.Range("E3").Value, "quarter")
                If VBA.Month(nlc_phb_14.Cells(24, i).Value) = 1 Then nlc_phb_14.Cells(26, i).Value = VBA.Format(nlc_phb_14.Cells(24, i).Value, "YYYY")
        End Select
        If nlc_phb_14.Cells(22, i).Value = "y" And nlc_phb_14.Cells(26, i).Value <> "" Then nlc_phb_14.Cells(26, i).Value = ""
    Next i
End Sub

Private Sub endformatierung(endzeile As Integer)
'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i As Integer
    'nlc_phb_14.Select
    
    Dim level As Integer
    Dim col_counter As Integer
    Dim Color As Integer
    Dim line As Variant

    'Zellen Verbinden
    For level = 8 To 250
        If nlc_phb_14.Columns(level).Hidden = False Or level = 8 Then
            If nlc_phb_14.Cells(22, level).Value = "x" Then
                nlc_phb_14.Range(nlc_phb_14.Cells(28, level), nlc_phb_14.Cells(endzeile, level)).Select
                With Selection.Borders(xlEdgeRight)
                    .LineStyle = xlContinuous
                    .Weight = xlHairline
                    .ColorIndex = 31
                End With
            End If
       Else
            Exit For
        End If
    Next level

    For i = 28 To endzeile Step 8
        If nlc_phb_14.Cells(i, 8).Value <> "" Then
        nlc_phb_14.Range(nlc_phb_14.Cells(i - 1, 9), nlc_phb_14.Cells(i - 1, 250)).Select
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = 31
            End With
        End If
    Next i
    
    nlc_phb_14.Range(nlc_phb_14.Cells(endzeile, 9), nlc_phb_14.Cells(endzeile, 251 - 1)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 31
'        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    nlc_phb_14.Range(nlc_phb_14.Cells(28, 251), nlc_phb_14.Cells(endzeile, 251)).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 31
    End With
   
    'Stichtag |fffd|ber ganze Spalte formatieren!!!
    
    nlc_phb_14.Range(nlc_phb_14.Cells(27, 9), nlc_phb_14.Cells(27, 251 - 1)).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 31
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    col_counter = 9
    Color = 56
    line = xlDash
    
    Do While nlc_phb_14.Cells(27, col_counter).Value <> ""
        If nlc_phb_14.Cells(21, col_counter).Value = "x" Then
            nlc_phb_14.Range(nlc_phb_14.Cells(27, col_counter), nlc_phb_14.Cells(endzeile, col_counter)).Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = Color
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = Color
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = Color
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = Color
            End With
            
            Exit Do
        End If
        col_counter = col_counter + 1
    Loop
   
    If nlc_phb_14.Range("A24").Value >= 9 And nlc_phb_14.Range("A24").Value <= 250 Then
        nlc_phb_14.Columns(VBA.Split(nlc_phb_14.Cells(1, nlc_phb_14.Range("A24").Value).Address, "$")(1) & ":" & VBA.Split(nlc_phb_14.Cells(1, 250).Address, "$")(1)).Hidden = True
    End If
    
    'nlc_phb_14.PageSetup.PrintArea = "$A$1:$IQ$" & endzeile - 1
End Sub

Private Function get_startspalte(sdate As Date) As Integer
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i
    get_startspalte = 0
    For i = 10 To 250
        If sdate < nlc_phb_14.Cells(24, i).Value Then Exit For
    Next i
    If nlc_phb_14.Cells(25, i - 1).Value < sdate Then
        get_startspalte = 0
    Else
        get_startspalte = i - 1
    End If
    
End Function

Private Function get_endspalte(EDate As Date) As Integer
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i
    get_endspalte = 250
    For i = 9 To 250
        If EDate <= nlc_phb_14.Cells(25, i).Value Then
            get_endspalte = i
            Exit For
        End If
    Next i

End Function

Public Sub format_bereich(Z As Integer, anf As Integer, ende As Integer, f_flaeche As Integer)
    If anf = 0 Then Exit Sub
    
    nlc_phb_14.Select
    'nlc_phb_14.Range(nlc_phb_14.Cells(z, anf), nlc_phb_14.Cells(z + 1, ende)).MergeCells = True
    nlc_phb_14.Range(nlc_phb_14.Cells(Z, anf), nlc_phb_14.Cells(Z + 1, ende)).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 31
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 31
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 31
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 31
    End With
    With Selection.Interior
        .ColorIndex = f_flaeche
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
    
    If anf <> ende Then
        nlc_phb_14.Range(nlc_phb_14.Cells(Z, anf), nlc_phb_14.Cells(Z + 1, ende - 1)).Select
        Selection.Borders(xlEdgeRight).LineStyle = xlNone
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    End If
    
End Sub

Public Sub mst_eintragen(Z As Integer, spalte As Integer, mst As String)
    
    nlc_phb_14.Select
    If nlc_phb_14.Cells(Z, spalte).Value = "" Then
        nlc_phb_14.Cells(Z, spalte).Value = mst
    Else
        nlc_phb_14.Cells(Z, spalte).Value = nlc_phb_14.Cells(Z, spalte).Value & ", " & mst
    End If
    
End Sub

Private Sub delete_shapes()
    Dim counter As Integer
    
    For counter = nlc_phb_14.Shapes.count To 1 Step -1
        If nlc_phb_14.Shapes(counter).name <> "Pfeil_Vorlage" And nlc_phb_14.Shapes(counter).name <> "Pfeil_Vorlage2" _
            And nlc_phb_14.Shapes(counter).name <> "Logo" And nlc_phb_14.Shapes(counter).name <> "refresh" _
            And nlc_phb_14.Shapes(counter).name <> "gantt_options" Then
                nlc_phb_14.Shapes(counter).Delete
        End If
    Next counter
End Sub

Private Sub verbindungen_erstellen()
    
    Dim sp_uid As Integer
    Dim sp_link As Integer
    Dim UID As Integer
    Dim folge As String
    Dim folge_startzeile As Integer
    Dim zeichen_counter As Integer
    Dim calc_row As Integer
    Dim link_count As Integer
    Dim sp_row_gantt As Integer
    Dim pfeil_count As Integer
    
    nlc_phb_14.Rows("11:12").Hidden = False
    
    calc_row = ganttcalc_startzeile
    sp_uid = 14
    sp_link = 15
    sp_row_gantt = 25
            
    While nlc_phb_56.Cells(calc_row, 1).Value <> ""
        link_count = sp_link + 1 - 1
        While link_count <= sp_link + 10 - 1
            'Abfrage ob eine verlinkung besteht
            If nlc_phb_56.Cells(calc_row, link_count).Value <> "" Then
                For zeichen_counter = 1 To Len(nlc_phb_56.Cells(calc_row, link_count).Value)
                    If VBA.IsNumeric(VBA.Mid$(nlc_phb_56.Cells(calc_row, link_count).Value, zeichen_counter, 1)) Then
                        UID = UID & VBA.Mid$(nlc_phb_56.Cells(calc_row, link_count).Value, zeichen_counter, 1)
                    Else
                        folge = folge & VBA.Mid$(nlc_phb_56.Cells(calc_row, link_count).Value, zeichen_counter, 1)
                    End If
                Next zeichen_counter
                folge_startzeile = find_UID(UID, sp_uid)
            
                'If calc_row > folge_startzeile Then
                If nlc_phb_56.Cells(calc_row, sp_row_gantt).Value <> "" And folge_startzeile <> 0 Then
                    Call format_links(nlc_phb_56.Cells(calc_row, sp_row_gantt).Value, (folge_startzeile - 14) * 8 + 25, folge, calc_row, folge_startzeile, pfeil_count) '((zeile_calc - folge_startzeile) * 8) + 33, endspalte_gantt + 1, startzeile_gantt, startspalte_gantt)
                End If
            End If
            
            UID = 0
            folge = ""
            pfeil_count = pfeil_count + 1
            link_count = link_count + 1
        Wend
        calc_row = calc_row + 1
    Wend
    
    nlc_phb_14.Rows("11:12").Hidden = True
    
End Sub

Private Sub format_links(startzeile_gantt As Integer, endzeile_gantt As Integer, folge As String, zeile_calc_start As Integer, zeile_calc_ende As Integer, pfeil_count As Integer)

'startzeile_gantt = aktueller Balken (Zeile)
'endzeile_gantt = zu verkn|fffd|pfender Balken (Zeile)
'folge = Netzplanfolge (AA,EA,EE)
'zeile_calc_start = aktueller Balken im Calc Blatt
'zeile_calc_ende = zu verkn|fffd|pfender Balken im Calc Blatt

'Problem wenn pfeil |fffd|ber raster (spalte 9 und spalte 250) hinaus geht
'sonst funktioniert EA vorerst, wenn A unter E liegt
    
    Dim spalte_gantt_row_calc As Integer 'Spalte f|fffd|r Zeile des Vorgangs im gantt
    Dim spalte_start_calc As Integer    'Spalte f|fffd|r Startspalte aus calc f|fffd|r gantt
    Dim spalte_ende_calc As Integer     'Spalte f|fffd|r Endspalte aus calc f|fffd|r gantt
    Dim spalte_start_ziel As Integer
    Dim spalte_end_ziel As Integer
    Dim spalte_start As Integer         '1. Spalte die gezeichnet wird
    Dim spalte_ende As Integer          'letzte Spalte die gezeichnet wird
    Dim calc_start As Integer
    Dim calc_ende As Integer
    
    calc_start = 10
    calc_ende = 11
    
    'es muss abgefragt werden, welche folge verkn|fffd|pft werden soll, demnach wird end- und startspalte berechnet
    'startzeile = Start der Linie
    'Endzeile = Ende der Linie mit Pfeil
    'Startspalte = Spalte wo 1. Linie raus kommt
    'Endspalte = Spalte wo Linie ende (mit Pfeil)
    
    spalte_gantt_row_calc = 25
    spalte_start_calc = 26
    spalte_ende_calc = 27
    
    If nlc_phb_56.Cells(zeile_calc_start, calc_start).Value <> "" And nlc_phb_56.Cells(zeile_calc_start, calc_ende).Value <> "" And nlc_phb_56.Cells(zeile_calc_ende, calc_start).Value <> "" And nlc_phb_56.Cells(zeile_calc_ende, calc_ende).Value <> "" Then
        Select Case folge
            Case "SS"
                If nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value <> "" And nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value <> "" Then
                    'Wenn Startspalte > Endspalte
                    If nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value Then
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value - 1, startzeile_gantt, endzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile > Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value - 1, startzeile_gantt + 1, endzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    ElseIf nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value = nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value Then
                    'Wenn Endspalte = Startspalte
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, startzeile_gantt, endzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile > Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, startzeile_gantt + 1, endzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    Else
                    'Wenn Endspalte > Startspalte
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, startzeile_gantt, endzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile > Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, startzeile_gantt + 1, endzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    End If
                End If
            Case "ES"
                If nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value <> "" And nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value <> "" Then
                    'Wenn Startspalte > Endspalte
                    If nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value + 2 >= nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value + 1 Then
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, endzeile_gantt + 1, endzeile_gantt + 2)
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, endzeile_gantt + 2)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, endzeile_gantt + 3, startzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile > Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, endzeile_gantt, startzeile_gantt + 3)
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, startzeile_gantt + 2)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, startzeile_gantt + 2, startzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    Else
                    'Wenn Endspalte > Startspalte
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value - 2, startzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value - 2, startzeile_gantt, endzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_ende, spalte_start_calc).Value, endzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile >= Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 2, endzeile_gantt + 1, startzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value - 1, nlc_phb_56.Cells(zeile_calc_start, spalte_start_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    End If
                End If
            Case "EE"
                If nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value <> "" And nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value <> "" Then
                    'Wenn Startspalte > Endspalte
                    If nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value >= nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value Then
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value + 1, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value + 1, startzeile_gantt, endzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value + 1, nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value, startzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile > Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value + 1, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value + 1, startzeile_gantt + 1, endzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value + 1, nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    Else
                    'Wenn Endspalte > Startspalte
                        'Wenn Startzeile > Endzeile
                        If nlc_phb_56.Cells(zeile_calc_start, spalte_gantt_row_calc).Value > nlc_phb_56.Cells(zeile_calc_ende, spalte_gantt_row_calc).Value Then
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, startzeile_gantt, endzeile_gantt + 1)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value, startzeile_gantt, pfeil_count)
                        Else
                        'Wenn Endzeile > Startzeile
                            Call format_linie_horizontal(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, endzeile_gantt)
                            Call format_linie_vertical(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, startzeile_gantt + 1, endzeile_gantt)
                            Call format_pfeil(nlc_phb_56.Cells(zeile_calc_ende, spalte_ende_calc).Value, nlc_phb_56.Cells(zeile_calc_start, spalte_ende_calc).Value, startzeile_gantt, pfeil_count)
                        End If
                    End If
                End If
        End Select
    End If
End Sub
Private Sub format_linie_horizontal(spalte_start As Integer, spalte_ende As Integer, zeile As Integer)
'linie horizontal
    If spalte_start >= 0 And spalte_ende >= 0 And zeile >= 0 Then
        nlc_phb_14.Range(nlc_phb_14.Cells(zeile, spalte_start), nlc_phb_14.Cells(zeile + 1, spalte_ende)).Select
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 50
        End With
    End If
End Sub

Private Sub format_linie_vertical(spalte As Integer, zeile_start As Integer, zeile_ende As Integer)
'linie vertical
    If spalte >= 0 And zeile_start >= 0 And zeile_ende >= 0 Then
        nlc_phb_14.Range(nlc_phb_14.Cells(zeile_start, spalte), nlc_phb_14.Cells(zeile_ende, spalte + 1)).Select
        With Selection.Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 50
        End With
    End If
End Sub


Private Sub format_pfeil(spalte_start As Integer, spalte_ende As Integer, zeile As Integer, pfeil_count As Integer)
'Diese Funktion erstellt den Pfeil in beide Richtungen inkl. dem Strich vor dem Pfeil!

    If spalte_start >= 0 And spalte_ende >= 0 And zeile >= 0 Then
        If spalte_start > spalte_ende Then
            'pfeil nach links zeigend
            'letzte linie horizontal
            nlc_phb_14.Range(nlc_phb_14.Cells(zeile, spalte_start), nlc_phb_14.Cells(zeile + 1, spalte_ende)).Select
            
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = 50
            End With
            
            nlc_phb_14.Range(nlc_phb_14.Cells(zeile + 1, spalte_ende), nlc_phb_14.Cells(zeile + 1, spalte_ende)).Select
            'Pfeilobject erstellen
            nlc_phb_14.Shapes("Pfeil_Vorlage2").Copy
'                nlc_phb_14.Range(nlc_phb_14.Cells(zeile, spalte_start), nlc_phb_14.Cells(zeile + 1, spalte_ende)).Select
            ActiveSheet.Paste
            Selection.name = "Pfeil_" & pfeil_count
            'muss bei jeder Pfeil|fffd|nderung ge|fffd|ndert werden
            Selection.ShapeRange.IncrementTop -4.5
        Else
            'pfeil nach rechts zeigend
            'letzte linie horizontal
            nlc_phb_14.Range(nlc_phb_14.Cells(zeile, spalte_start), nlc_phb_14.Cells(zeile + 1, spalte_ende)).Select
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = 50
            End With
            'Pfeilobject erstellen
            nlc_phb_14.Shapes("Pfeil_Vorlage").Copy
            nlc_phb_14.Range(nlc_phb_14.Cells(zeile, spalte_ende), nlc_phb_14.Cells(zeile + 1, spalte_ende)).Select
            ActiveSheet.Paste
            Selection.name = "Pfeil_" & pfeil_count
            Selection.ShapeRange.IncrementLeft 3.5
            Selection.ShapeRange.IncrementTop 1.5
            'Selection.ShapeRange.IncrementTop -1.5
        End If
    End If
End Sub



Private Function find_UID(UID As Integer, sp_uid As Integer) As Integer
    Dim row_counter As Integer
    
    row_counter = 15
    
    Do While nlc_phb_56.Cells(row_counter, sp_uid).Value <> ""
        If nlc_phb_56.Cells(row_counter, sp_uid).Value = UID Then
            find_UID = row_counter
            Exit Function
        End If
        row_counter = row_counter + 1
    Loop
    
    row_counter = 0
End Function


Attribute VB_Name = "nlc_35"
Option Explicit
Option Private Module
Dim nlc_pw As String

Const rot = 63
Const gr|fffd|n = 56
Const gelb = 40
Const wei|fffd| = 39

Const spalte_calc = 10
Const zeile_calc_start = 30

Const zeile_status = zeile_calc_start - 3

'Const editbereich = "C6:J15,C19:M20,H33:M35,B40:M54,A56:N56"
'Const editbereich_admin = "C6:J15,C19:M20,L16:M16,H25:M35,B40:M54,A56:N56"



Public Sub status_ladenClick()
'Statusladen nur mit Entsperren/Sperren und Application off/on
    nlc_intern.application_off
    Call nlc_intern.nlc_unprotect(nlc_phb_35)
    
    Call daten_holen
    Call refresh_trafficlights
    
ende:
    nlc_phb_35.Select
    nlc_phb_35.Range("A1").Select
    Call nlc_intern.nlc_protect(nlc_phb_35)
    nlc_intern.application_on
End Sub



Sub daten_holen() 'aktuelle Daten laden
    Dim blattvon As String
    Dim blattnach As String
    Dim zeile As Integer
    zeile = zeile_calc_start

    While Not IsEmpty(nlc_phb_51.Cells(zeile, 4).Value)
        If nlc_phb_51.Cells(zeile, 5).Value <> "" Then
            If nlc_phb_51.Cells(zeile, 4).Value <> "" Then
                If nlc_phb_51.Cells(zeile, 3).Value <> "" Then
                    blattnach = nlc_intern.nlc_search_name(ThisWorkbook, nlc_phb_51.Cells(zeile, 3).Value)
                Else
                    blattnach = nlc_phb_35.name
                End If
            End If
            If blattnach <> "" Then Sheets(blattnach).Range(nlc_phb_51.Cells(zeile, 4).Value).Value = nlc_phb_51.Cells(zeile, 6).Value
        End If
        zeile = zeile + 1
    Wend
    
End Sub


Public Sub s_ampelClick(ampname As String, farbe As String, Optional enableWhite As Boolean)

    If nlc_phb_51.Range("status_aktnr").Value = nlc_phb_51.Range("status_letztenr").Value Or nlc_intern.get_isadmin = True Then

        On Error GoTo ende
        ' Aktion vorbereiten
        nlc_intern.application_off
        Call nlc_intern.nlc_unprotect(nlc_phb_35)

        ' Ampelstatus setzen
        Call color_trafficlights(ampname & "_", farbe, False, enableWhite)
        'If ampname = "ampel" Then nlc_phb_06.Range("status").Value = nlc_Language(Sheets("Language").Range("E3").Value, VBA.UCase(farbe))
        If ampname = "ampel" Then nlc_phb_06.Range("status").Value = "=" & farbe 'nlc_Language(Sheets("Language").Range("E3").Value, VBA.UCase(farbe))
        nlc_phb_51.Range(ampname & "_").Value = farbe

ende:
        ' Aktion nachbereiten
        nlc_phb_35.Select
        nlc_phb_35.Range("A1").Select
        Call nlc_intern.nlc_protect(nlc_phb_35)
        nlc_intern.application_on
    End If
End Sub

Private Sub refresh_trafficlights()
    Dim i As Integer
    nlc_phb_51.Calculate
    For i = 14 To 17
        Call color_trafficlights(nlc_phb_51.Cells(i, 2).Value, nlc_phb_51.Cells(i, 3).Value, True)
    Next i
End Sub

Private Sub color_trafficlights(ampel As String, ByRef farbe As String, Optional Automatic As Boolean, Optional enableWhite As Boolean)
Dim escapeColoring As Boolean
Dim farbIndex As Integer
    
    Select Case farbe
        Case "red"
            farbIndex = rot
        Case "yellow"
            farbIndex = gelb
        Case "green"
            farbIndex = gr|fffd|n
        Case "white"
            farbIndex = wei|fffd|
    End Select

    'Im Standard nicht notwendig, so ist es aber m|fffd|glich, dass Kunden die Ampeln auch "wei|fffd|" f|fffd|rben, also demarkieren
    If nlc_phb_35.Shapes(ampel & "red").Fill.ForeColor.SchemeColor = farbIndex Or _
        nlc_phb_35.Shapes(ampel & "yellow").Fill.ForeColor.SchemeColor = farbIndex Or _
            nlc_phb_35.Shapes(ampel & "green").Fill.ForeColor.SchemeColor = farbIndex Then
        escapeColoring = True
    End If
    
    nlc_phb_35.Shapes(ampel & "red").Fill.ForeColor.SchemeColor = wei|fffd|
    nlc_phb_35.Shapes(ampel & "yellow").Fill.ForeColor.SchemeColor = wei|fffd|
    nlc_phb_35.Shapes(ampel & "green").Fill.ForeColor.SchemeColor = wei|fffd|
    
    If enableWhite Then
        If Automatic = False Then
            If escapeColoring Then
                farbe = "white"
                Exit Sub
            End If
        End If
    End If
    
    If farbe <> "white" Then
        If farbe = "" Then
            nlc_phb_35.Shapes(ampel & "green").Fill.ForeColor.SchemeColor = gr|fffd|n
        Else
            nlc_phb_35.Shapes(ampel & farbe).Fill.ForeColor.SchemeColor = farbIndex
        End If
    End If
    
End Sub

'Private Sub color_trafficlights(ampel As String, farbe As String)
'    'Im Standard nicht notwendig, so ist es aber m|fffd|glich, dass Kunden die Ampeln auch "wei|fffd|" f|fffd|rben, also demarkieren
'    nlc_phb_35.Shapes(ampel & "red").Fill.ForeColor.SchemeColor = wei|fffd|
'    nlc_phb_35.Shapes(ampel & "yellow").Fill.ForeColor.SchemeColor = wei|fffd|
'    nlc_phb_35.Shapes(ampel & "green").Fill.ForeColor.SchemeColor = wei|fffd|
'
'    If farbe <> "" Then
'        If farbe = "red" Then nlc_phb_35.Shapes(ampel & "red").Fill.ForeColor.SchemeColor = rot
'        If farbe = "yellow" Then nlc_phb_35.Shapes(ampel & "yellow").Fill.ForeColor.SchemeColor = gelb
'        If farbe = "green" Then nlc_phb_35.Shapes(ampel & "green").Fill.ForeColor.SchemeColor = gr|fffd|n
'    End If
'End Sub


Public Sub WorksheetActivate()
    nlc_35.status_ladenClick
End Sub



Attribute VB_Name = "nlc_37"
Option Explicit
Option Private Module
Dim nlc_pw As String

Public Sub transfer_wpClick()

Dim i As Integer
Dim anzahl As Integer
anzahl = 0

    On Error GoTo ende
    nlc_intern.application_off

    i = Data_Startzeile
    While nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(i, SpNr_Art).Value = "AP" Then
            If nlc_phb_06.Cells(i, SpNr_Name).Value <> "" And nlc_phb_06.Cells(i, SpNr_Fortschritt).Value < 1 And anzahl < 10 Then
                nlc_phb_37.Cells(50 + anzahl, 2).Value = nlc_phb_06.Cells(i, SpNr_Name).Value
                nlc_phb_37.Cells(50 + anzahl, 9).Value = nlc_phb_06.Cells(i, SpNr_Verantwortung).Value
                nlc_phb_37.Cells(50 + anzahl, 10).Value = nlc_phb_06.Cells(i, SpNr_DateA_E).Value
                anzahl = anzahl + 1
            End If
        End If
        i = i + 1
    Wend
    
ende:
    nlc_intern.application_on

End Sub



Public Sub WorksheetBeforeDoubleClick(Target As Range)
   If Target.Column >= 7 And Target.Column <= 10 And Target.Row >= 16 And Target.Row <= 25 Then
            nlc_intern.application_off
            nlc_phb_37.Range(nlc_phb_37.Cells(Target.Row, 7), nlc_phb_37.Cells(Target.Row, 10)).ClearContents
            nlc_phb_37.Cells(Target.Row, Target.Column).Value = "x"
            nlc_intern.application_on
    End If
End Sub

Attribute VB_Name = "nlc_39"
Option Explicit
Option Private Module
Dim nlc_pw As String
Const todo_bereich = "C8:H257"
Const start = 8
Const ende = 257

Private Sub todo_sort(Bereich As String, sort1 As Integer, sort2 As Integer)
    nlc_phb_39.Range(Bereich).Sort Key1:=nlc_phb_39.Cells(start, sort1), Order1:=xlAscending, Key2:=nlc_phb_39.Cells(start, sort2), Order1:=xlAscending, Header:=xlNo
End Sub

Private Sub todo_filter(spalte As Integer)
    Dim level As Integer
    
    For level = start To ende
        If nlc_phb_39.Rows(level).Hidden = False Then
            If spalte = 4 Then
                If VBA.InStr(nlc_phb_39.Cells(level, spalte).Value, nlc_phb_39.Cells(7, spalte).Value) <> 0 Then nlc_phb_39.Rows(level).Hidden = True
            Else
                If nlc_phb_39.Cells(level, spalte).Value <> nlc_phb_39.Cells(7, spalte).Value Then nlc_phb_39.Rows(level).Hidden = True
            End If
        End If
    Next level
End Sub

Public Sub AClick()
    
    On Error GoTo ende
    nlc_intern.application_off
    Call f_aktualisieren
ende:
    nlc_intern.application_on
        
End Sub

Public Sub f_aktualisieren()
    
    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_39)
    
    nlc_phb_39.Rows(start & ":" & ende).Hidden = False
    Call nlc_39.todo_sort(todo_bereich, 3, 4)
    Dim X As Integer
    Dim level As Integer
    
    X = 0
    For level = start To ende
        If nlc_phb_39.Cells(level, 5).Value = "" Then
            X = X + 1
        Else
            X = 0
        End If
        If X > 3 Then
            If level > start + 4 Then
                nlc_phb_39.Rows(level & ":" & ende).Hidden = True
            Else
                nlc_phb_39.Rows(start + 5 & ":" & ende).Hidden = True
            End If
            Exit For
        End If
    Next level

    Call nlc_intern.nlc_protect(nlc_phb_39)
        
End Sub


Public Sub FilterClick(spalte As Integer)

    If spalte >= 3 And spalte <= 8 Then
    
       
        nlc_intern.application_off
        
        nlc_pw = nlc_intern.get_pw
        Call nlc_intern.nlc_unprotect(nlc_phb_39)
        
        Call nlc_39.todo_filter(spalte)
        
        Call nlc_intern.nlc_protect(nlc_phb_39)
        
        nlc_intern.application_on
    End If
    
End Sub


Public Sub SortierenClick(spalte As Integer)
    If spalte >= 3 And spalte <= 8 Then
        
        nlc_pw = nlc_intern.get_pw
        Call nlc_intern.nlc_unprotect(nlc_phb_39)
        Select Case spalte
            Case 6
                Call nlc_39.todo_sort(todo_bereich, spalte, 4)
            Case Else
                Call nlc_39.todo_sort(todo_bereich, spalte, 7)
        End Select
        Call nlc_intern.nlc_protect(nlc_phb_39)
    End If
End Sub

Public Sub XClick()
    
    Dim X As Integer
    Dim level As Integer
    
    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_39)
    nlc_intern.application_off
    
    nlc_phb_39.Rows(start & ":" & ende).Hidden = False
    Call nlc_39.todo_sort(todo_bereich, 7, 4)
    X = 0
    
    For level = start To ende
        If nlc_phb_39.Cells(level, 8).Value = nlc_phb_51.Range("AK7").Value Or nlc_phb_39.Cells(level, 8).Value = nlc_phb_51.Range("AK8").Value Then nlc_phb_39.Rows(level).Hidden = True
        If nlc_phb_39.Cells(level, 5).Value = "" Then X = X + 1
        If X > 3 Then
            nlc_phb_39.Rows(level & ":" & ende).Hidden = True
            Exit For
        End If
    Next level
    
    nlc_intern.application_on
    Call nlc_intern.nlc_protect(nlc_phb_39)
    
End Sub

Public Sub WorksheetActivate()

   ' If Sperren_Variable <> True Then
        Dim i As Integer
        Dim X As String
         
        On Error GoTo ende:
        nlc_intern.application_off
        
        For i = start To ende
            If nlc_phb_39.Cells(i, 2).Value <> "" Then
                X = nlc_06.find_psp_id(nlc_phb_39.Cells(i, 2).Value)
                If X = "" Then
                    nlc_phb_39.Cells(i, 4).Value = ""
                Else
                    nlc_phb_39.Cells(i, 4).Value = X
                End If
            End If
        Next i
        
ende:
        nlc_intern.application_on
   ' End If
End Sub

Public Sub WorksheetDeactivate()
    
   ' If Sperren_Variable <> True Then
        Dim i As Integer
        Dim X As Integer
        On Error GoTo ende
        
        nlc_intern.application_off
        
        nlc_phb_39.Range(nlc_phb_39.Cells(start, 2), nlc_phb_39.Cells(ende, 2)).Value = ""
        For i = start To ende
            If nlc_phb_39.Cells(i, 4).Value = "" Then
            Else
                X = nlc_06.find_id(nlc_phb_39.Cells(i, 4).Value)
                If X <> 0 Then nlc_phb_39.Cells(i, 2).Value = X
            End If
        Next i
        
ende:
        nlc_intern.application_on
    'End If
End Sub


Attribute VB_Name = "nlc_53"
Option Explicit
Option Private Module

Public Sub Refresh()

    'Aktion vorbereiten
    On Error GoTo ende
    nlc_intern.application_off
    nlc_phb_53.Calculate
    
    Dim WertZeile As Integer, level As Integer
    Dim Stichtag As Double
    Dim Perioden As Integer, Ressourcenanzahl As Integer, BasisZeile As Integer, BasisSpalte As Integer
    Dim Ressource As Integer, Arbeitspaket As Integer
    Dim Ressourcennamen As String, APNamen As String
    Dim AP_Art As String, BezeichnungsSpalte As Integer, startspalte As Integer, endspalte As Integer
    Dim ress_basis_start As Integer, cost_basis_start As Integer
    Dim cost As Integer
    Dim Kostenanzahl As Integer
    Dim level2 As Integer
    Dim index As Integer
    Dim counter As Integer
    
    Dim costachse As Boolean
    Dim resachse As Boolean
    Dim zeitachse As Boolean
    
    Dim hilf As Integer
    
    costachse = False
    resachse = False
    zeitachse = False
    
    Perioden = 6 * 12 '6 Jahre x 12 Monate
    WertZeile = 13
    Ressourcenanzahl = Res_Anz 'Anzahl der Ressourcen
    BezeichnungsSpalte = SpNr_Name
    startspalte = SpNr_DateA_S
    endspalte = SpNr_DateA_E
    AP_Art = "AP"
    ress_basis_start = SpNr_ResA_S - 2
    
    nlc_phb_52.Columns("N:CG").Hidden = False
    
    nlc_phb_53.Range(nlc_phb_53.Cells(21, 6), nlc_phb_53.Cells(21 + Ressourcenanzahl - 1, 13 + Perioden - 1)).ClearContents 'Infokategorie 3 leeren
    
    'Aktion Ressourcenvert. durchf|fffd|hren
    For Ressource = 1 To Ressourcenanzahl 'Ressourcenschleife
        BasisSpalte = ress_basis_start + (Ressource - 1) * 3
        Ressourcennamen = nlc_phb_06.Cells(ZeiNr_Beschriftung, BasisSpalte).Value 'Ressourcennamen einlesen
        If Ressourcennamen <> "" Then 'Pr|fffd|fen ob Ressource |fffd|berhaupt belegt ist
            Arbeitspaket = Data_Startzeile + 1
            While nlc_phb_06.Cells(Arbeitspaket, SpNr_Nr).Value <> "END"
                BasisZeile = Arbeitspaket
                APNamen = nlc_phb_06.Cells(BasisZeile, BezeichnungsSpalte).Value 'Ressourcennamen einlesen
                If APNamen <> "" And nlc_phb_06.Cells(BasisZeile, SpNr_Art).Value = AP_Art Then 'Pr|fffd|fen ob Arbeitspaket belegt ist
                    If nlc_phb_06.Cells(BasisZeile, SpNr_ResSumme_Akt).Value > 0 Then
                        'nlc_phb_53.Cells(WertZeile, 1).Value = nlc_phb_06.find_phase(BasisZeile)
                        'nlc_phb_53.Cells(WertZeile, 2).Value = APNamen 'Infokategorie 2 |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 3).Value = Ressourcennamen 'Infokategorie 3 |fffd|bertragen
                        'nlc_phb_53.Cells(WertZeile, 4).Value = "" 'Infokategorie 4 |fffd|bertragen
                        'nlc_phb_53.Cells(WertZeile, 5).Value = "" 'Infokategorie 5 |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 7).Value = nlc_phb_06.Cells(BasisZeile, startspalte).Value 'AP-Start |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 8).Value = nlc_phb_06.Cells(BasisZeile, endspalte).Value 'AP-Ende |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 9).Value = nlc_phb_06.Cells(BasisZeile, BasisSpalte + 1).Value 'Ist-Wert |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 10).Value = VBA.CDbl(nlc_phb_06.Cells(BasisZeile, BasisSpalte + 2).Value) - VBA.CDbl(nlc_phb_06.Cells(BasisZeile, BasisSpalte + 1).Value) 'Rest-Wert |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 11).Value = nlc_phb_06.Cells(BasisZeile, BasisSpalte + 2).Value 'Summen-Wert |fffd|bertragen
                        nlc_phb_53.Range(nlc_phb_53.Cells(WertZeile, 13), nlc_phb_53.Cells(WertZeile, 13 + Perioden - 1)).ClearContents 'Verteilung leeren
                        Call nlc_53.Distribution 'Verteilung berechnen
                        'Verteilungen konsolidieren
                        For level = 21 To 21 + Ressourcenanzahl - 1
                            If nlc_phb_53.Cells(level, 3).Value = nlc_phb_53.Cells(WertZeile, 3).Value Then 'Infokategorie 3 |fffd|bereinstimmung suchen
                                Call nlc_53.Consolidation(level)
                                Exit For
                            End If
                        Next level
                    End If
                End If
                Arbeitspaket = Arbeitspaket + 1
            Wend
        End If
    Next Ressource
    
    Kostenanzahl = Cost_Anz 'Anzahl der Ressourcen
    cost_basis_start = SpNr_CostA_S - 2
    
    nlc_phb_53.Range(nlc_phb_53.Cells(274, 6), nlc_phb_53.Cells(274 + Kostenanzahl - 1, 13 + Perioden - 1)).ClearContents 'Infokategorie 3 leeren

    'Aktion Kostenvert. durchf|fffd|hren
    For cost = 1 To Kostenanzahl 'Kostenschleife
        BasisSpalte = cost_basis_start + (cost - 1) * 3
        Ressourcennamen = nlc_phb_06.Cells(ZeiNr_Beschriftung, BasisSpalte).Value 'Ressourcennamen einlesen
        If Ressourcennamen <> "" Then 'Pr|fffd|fen ob Cost |fffd|berhaupt belegt ist
            Arbeitspaket = Data_Startzeile + 1
            While nlc_phb_06.Cells(Arbeitspaket, SpNr_Nr).Value <> "END"
                BasisZeile = Arbeitspaket
                APNamen = nlc_phb_06.Cells(BasisZeile, BezeichnungsSpalte).Value 'Ressourcennamen einlesen
                If APNamen <> "" And nlc_phb_06.Cells(BasisZeile, SpNr_Art).Value = AP_Art Then 'Pr|fffd|fen ob Arbeitspaket belegt ist
                    If nlc_phb_06.Cells(BasisZeile, SpNr_CostSumme_Akt).Value > 0 Then
                        'nlc_phb_53.Cells(WertZeile, 1).Value = nlc_phb_06.find_phase(BasisZeile)
                        'nlc_phb_53.Cells(WertZeile, 2).Value = APNamen 'Infokategorie 2 |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 3).Value = Ressourcennamen 'Infokategorie 3 |fffd|bertragen
                        'nlc_phb_53.Cells(WertZeile, 4).Value = "" 'Infokategorie 4 |fffd|bertragen
                        'nlc_phb_53.Cells(WertZeile, 5).Value = "" 'Infokategorie 5 |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 7).Value = nlc_phb_06.Cells(BasisZeile, startspalte).Value 'AP-Start |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 8).Value = nlc_phb_06.Cells(BasisZeile, endspalte).Value 'AP-Ende |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 9).Value = nlc_phb_06.Cells(BasisZeile, BasisSpalte + 1).Value 'Ist-Wert |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 10).Value = VBA.CDbl(nlc_phb_06.Cells(BasisZeile, BasisSpalte + 2).Value) - VBA.CDbl(nlc_phb_06.Cells(BasisZeile, BasisSpalte + 1).Value) 'Rest-Wert |fffd|bertragen
                        nlc_phb_53.Cells(WertZeile, 11).Value = nlc_phb_06.Cells(BasisZeile, BasisSpalte + 2).Value 'Summen-Wert |fffd|bertragen
                        nlc_phb_53.Range(nlc_phb_53.Cells(WertZeile, 13), nlc_phb_53.Cells(WertZeile, 13 + Perioden - 1)).ClearContents 'Verteilung leeren
                        Call nlc_53.Distribution 'Verteilung berechnen
                        'Verteilungen konsolidieren
                        For level = 274 To 274 + Kostenanzahl - 1
                            If nlc_phb_53.Cells(level, 3).Value = nlc_phb_53.Cells(WertZeile, 3).Value Then 'Infokategorie 3 |fffd|bereinstimmung suchen
                                Call nlc_53.Consolidation(level)
                                Exit For
                            End If
                        Next level
                    End If
                End If
                Arbeitspaket = Arbeitspaket + 1
            Wend
        End If
    Next cost
    
    'Ressourcen und Kosten des kompletten Projekt |fffd|bertragen
    nlc_phb_52.Rows("1:2000").Hidden = False
'    nlc_phb_52.Rows("56:306").Hidden = False
'    nlc_phb_52.Rows("310:560").Hidden = False
    nlc_phb_52.Calculate
    
    
    'Ressourcen
    hilf = 0
    index = 56
    For level2 = SpNr_Res_S To SpNr_Res_E Step Res_Schritt
        nlc_phb_52.Range("C" & index & ":D" & index).Value = nlc_phb_06.Range(nlc_phb_06.Cells(ZeiNr_Projekt, level2), nlc_phb_06.Cells(ZeiNr_Projekt, level2 + 1)).Value
        nlc_phb_52.Cells(index, 6).Value = nlc_phb_06.Cells(ZeiNr_Projekt, level2 + 2).Value
        
        If (nlc_phb_06.Cells(ZeiNr_Projekt, level2).Value + nlc_phb_06.Cells(ZeiNr_Projekt, level2 + 2).Value) = 0 Then
            nlc_phb_52.Rows(index).Hidden = True
            hilf = hilf + 1
        End If
        index = index + 1
    Next level2
    If hilf <> Res_Anz Then resachse = True
    If index <= 306 Then
        nlc_phb_52.Rows(index & ":306").Hidden = True
        nlc_phb_52.Rows(index + 518 & ":824").Hidden = True
    End If
    
    'Kosten
    hilf = 0
    index = 310
    For level2 = SpNr_Cost_S To SpNr_Cost_E Step Cost_Schritt
        nlc_phb_52.Range("C" & index & ":D" & index).Value = nlc_phb_06.Range(nlc_phb_06.Cells(ZeiNr_Projekt, level2), nlc_phb_06.Cells(ZeiNr_Projekt, level2 + 1)).Value
        nlc_phb_52.Cells(index, 6).Value = nlc_phb_06.Cells(ZeiNr_Projekt, level2 + 2).Value
        
        If (nlc_phb_06.Cells(ZeiNr_Projekt, level2).Value + nlc_phb_06.Cells(ZeiNr_Projekt, level2 + 2).Value) = 0 Then
            nlc_phb_52.Rows(index).Hidden = True
            hilf = hilf + 1
        End If
        index = index + 1
    Next level2
    If hilf <> Cost_Anz Then costachse = True
    If index <= 560 Then
        nlc_phb_52.Rows(index & ":560").Hidden = True
        nlc_phb_52.Rows(index + 519 & ":1079").Hidden = True
    End If
    
    'Ressourcen und Kosten der einzelnen Phasen |fffd|bertragen /L|fffd|schen
    nlc_phb_52.Range("B3:D52").ClearContents
    nlc_phb_52.Range("F3:F52").ClearContents
    nlc_phb_52.Range("H3:I52").ClearContents
    nlc_phb_52.Range("K3:K52").ClearContents
    
'    nlc_phb_52.Rows("3:22").Hidden = False
    
    index = 3
    For level = ZeiNr_Projekt + 1 To nlc_phb_06.Cells(7, 5).Value Step 1
        If nlc_phb_06.Cells(level, SpNr_Ebene).Value = 2 And counter <= 50 Then
            nlc_phb_52.Cells(index, 2).Value = nlc_phb_06.Cells(level, SpNr_Name).Value                     'Phasenname
            
            nlc_phb_52.Range("C" & index & ":D" & index).Value = nlc_phb_06.Range(nlc_phb_06.Cells(level, SpNr_ResSumme_Bas), nlc_phb_06.Cells(level, SpNr_ResSumme_Bas + 1)).Value 'Basis/Ist
            nlc_phb_52.Cells(index, 6).Value = nlc_phb_06.Cells(level, SpNr_ResSumme_Bas + 3).Value                             'Aktuell
            
            nlc_phb_52.Range("H" & index & ":I" & index).Value = nlc_phb_06.Range(nlc_phb_06.Cells(level, SpNr_CostSumme_Bas), nlc_phb_06.Cells(level, SpNr_CostSumme_Bas + 1)).Value    'Basis/Ist
            nlc_phb_52.Cells(index, 11).Value = nlc_phb_06.Cells(level, SpNr_CostSumme_Bas + 3).Value                         'Aktuell
            index = index + 1
            counter = counter + 1
        End If
    Next level
    nlc_phb_52.Rows(index & ":52").Hidden = True
    
    nlc_phb_52.Calculate
    
    'Zeitskala ausblenden
    For level = 85 To 14 Step -1
        If nlc_phb_52.Cells(561, level).Value = 0 Then
            nlc_phb_52.Columns(level).Hidden = True
        Else
            zeitachse = True
            Exit For
        End If
    Next level
    
    nlc_phb_16.Unprotect nlc_intern.get_pw
    If zeitachse = True Then
        If nlc_phb_TL.Range("E3").Value <> "deutsch" Then
            If resachse = True Then
                nlc_phb_16.Activate
                nlc_phb_16.ChartObjects("res_chart").Activate
                ActiveChart.Axes(xlCategory).TickLabels.NumberFormat = "[$-409]mmm/yy;@"
                ActiveChart.SetElement (msoElementChartTitleNone)
            End If
            If costachse = True Then
                nlc_phb_16.Activate
                nlc_phb_16.ChartObjects("cost_chart").Activate
                ActiveChart.Axes(xlCategory).TickLabels.NumberFormat = "[$-409]mmm/yy;@"
                ActiveChart.SetElement (msoElementChartTitleNone)
            End If
        Else
            If resachse = True Then
                nlc_phb_16.Activate
                nlc_phb_16.ChartObjects("res_chart").Activate
                ActiveChart.Axes(xlCategory).TickLabels.NumberFormat = "mmm/yy;@"
                ActiveChart.SetElement (msoElementChartTitleNone)
            End If
            If costachse = True Then
                nlc_phb_16.Activate
                nlc_phb_16.ChartObjects("cost_chart").Activate
                ActiveChart.Axes(xlCategory).TickLabels.NumberFormat = "mmm/yy;@"
                ActiveChart.SetElement (msoElementChartTitleNone)
            End If
        End If
    End If

ende:
    nlc_phb_16.Protect nlc_intern.get_pw
    DoEvents
End Sub

Private Sub Distribution()

    'Aktion vorbereiten
    Dim Stichtag As Double, APStart As Double, APEnde As Double, PeriodenStart As Double, PeriodenEnde As Double 'Datumsfelder
    Dim IstWert As Double, RestWert As Double, SummenWert As Double 'Zahlenfelder
    Dim IstProTag As Double, RestProTag As Double, ErfolgteVerteilung As Double 'Zahlenfelder
    Dim IstLaufzeit As Double, RestLaufzeit As Double 'Zahlenfelder
    Dim WertZeile As Integer, Perioden As Integer, VerteilungsSpalte As Integer, i As Integer  'Ganzzahlenfeld
    Dim Endfolge As Boolean 'Ja/Nein Feld
    Dim X As Double
    
    Endfolge = False
    WertZeile = 13
    Perioden = 6 * 12 '6 Jahre x 12 Monate
    Stichtag = nlc_phb_53.Cells(WertZeile, 6).Value
    APStart = nlc_phb_53.Cells(WertZeile, 7).Value
    APEnde = nlc_phb_53.Cells(WertZeile, 8).Value
    IstWert = nlc_phb_53.Cells(WertZeile, 9).Value
    RestWert = nlc_phb_53.Cells(WertZeile, 10).Value
    SummenWert = nlc_phb_53.Cells(WertZeile, 11).Value

    If SummenWert > 0 And APStart > 0 And APEnde > 0 Then
        'MsgBox Prompt:="IstWert: " & IstWert & ", RestWert: " & RestWert, Title:="Werte"
        IstLaufzeit = Application.WorksheetFunction.Min(Abs(Stichtag - APStart), Abs(APEnde - APStart))
        RestLaufzeit = Application.WorksheetFunction.Min(Abs(APEnde - Stichtag), Abs(APEnde - APStart))
        If Stichtag >= APStart And APEnde >= APStart And IstLaufzeit > 0 Then
            IstProTag = IstWert / (IstLaufzeit + 1) '+1 weg
        Else
            IstLaufzeit = 0
            IstProTag = IstWert
        End If
        If RestLaufzeit > 0 Then
            RestProTag = RestWert / (RestLaufzeit)
        Else
            RestProTag = RestWert
        End If
        If RestProTag < 0 Then RestProTag = 0
        'MsgBox Prompt:="IstProTag: " & IstProTag & ", RestProTag: " & RestProTag, Title:="Werte"
        For VerteilungsSpalte = 13 To (13 + Perioden - 1)
            PeriodenStart = nlc_phb_53.Cells(10, VerteilungsSpalte).Value
            PeriodenEnde = nlc_phb_53.Cells(11, VerteilungsSpalte).Value
            X = 0
            'MsgBox Prompt:=PeriodenStart & ", " & PeriodenEnde, Title:="Start und Ende der Periode"
            'MsgBox Prompt:="PS: " & MStart & " < PE:" & PE & ", MEnde: " & MEnde & " > PE:" & PE, Title:="Kontrolldaten"
            ' Var1: AP bereits abgearbeitet
            If PeriodenStart > APEnde Then
                Exit For
                'MsgBox Prompt:=x, Title:="Var1: AP bereits abgearbeitet"
            ' Var2: Start erst in Zukunft
            ElseIf PeriodenEnde < APStart Then
                X = 0
                'MsgBox Prompt:=x, Title:="Var2: Start erst in Zukunft"
            ' Var3: Start und Ende in Periode
            ElseIf PeriodenStart <= APStart And PeriodenEnde >= APEnde Then
                X = IstWert + RestWert
                'MsgBox Prompt:=x, Title:="Var3: Start und Ende in Periode"
            ' Var4: Nur Start in Periode
            ElseIf PeriodenStart <= APStart And Stichtag > PeriodenEnde Then
                X = IstProTag * (PeriodenEnde - APStart + 1)
                'MsgBox Prompt:=x, Title:="Var4: Nur Start in Periode"
            ' Var5: Endperiode
            ElseIf PeriodenStart <= APEnde And PeriodenEnde >= APEnde Then
                For i = 13 To VerteilungsSpalte - 1
                    ErfolgteVerteilung = ErfolgteVerteilung + nlc_phb_53.Cells(WertZeile, i).Value
                Next i
                X = (IstWert + RestWert) - ErfolgteVerteilung
                Endfolge = True
                'MsgBox Prompt:=x, Title:="Var5: Endperiode"
            ' Var6: Beginnende Zukunftsperiode
            ElseIf PeriodenStart <= APStart And PeriodenEnde < APEnde And Stichtag < APStart Then
                If IstLaufzeit = 0 Then
                    X = RestProTag * (PeriodenEnde - APStart + 1) + IstWert
                Else
                    X = RestProTag * (PeriodenEnde - APStart + 1)
                End If
                'MsgBox Prompt:=x, Title:="Var6: Beginnende Zukunftsperiode"
            ' Var7: Start und Stichtag in Periode
            ElseIf PeriodenStart <= APStart And Stichtag <= APEnde Then
                X = IstWert + RestProTag * (PeriodenEnde - Stichtag)
                'MsgBox Prompt:=x, Title:="Var7: Start und Stichtag in Periode"
            ' Var8: Volle Vergangenheitsperiode
            ElseIf PeriodenStart > APStart And PeriodenEnde < APEnde And Stichtag > PeriodenEnde Then
                X = IstProTag * (PeriodenEnde - PeriodenStart + 1)
                'MsgBox Prompt:=x, Title:="Var8: Volle Vergangenheitsperiode"
            ' Var9: Volle Zukunftsperiode
            ElseIf PeriodenStart > APStart And PeriodenEnde < APEnde And Stichtag < PeriodenStart Then
                X = RestProTag * (PeriodenEnde - PeriodenStart + 1)
                'MsgBox Prompt:=x, Title:="Var9: Volle Zukunftsperiode"
            ' Var10: Stichtag in voller Periode
            ElseIf PeriodenStart > APStart And PeriodenEnde < APEnde Then
                X = IstProTag * (Stichtag - PeriodenStart + 1) + RestProTag * (PeriodenEnde - Stichtag)
                'MsgBox Prompt:=x, Title:="Var10: Stichtag in voller Periode"
            Else
                'MsgBox Prompt:=x, Title:="Var11: Gar nichts trifft zu"
            End If
            If X <= 0 Then X = 0
            nlc_phb_53.Cells(WertZeile, VerteilungsSpalte).Value = Application.WorksheetFunction.Round(X, 2)
            If Endfolge = True Then
                Exit For
            End If
        Next VerteilungsSpalte
    End If

    
End Sub

Private Sub Consolidation(zeile As Integer)

    'Aktion vorbereiten
    Dim WertZeile As Integer, Perioden As Integer, level As Integer
    
    WertZeile = 13
    Perioden = 6 * 12 '6 Jahre x 12 Monate
    
    'Aktion durchf|fffd|hren
    If nlc_phb_53.Cells(WertZeile, 11).Value > 0 Then 'Erst starten wenn |fffd|berhaupt Werte vorhanden
        For level = 9 To 13 + Perioden - 1 'Werte und Verteilung addieren
            If nlc_phb_53.Cells(WertZeile, level).Value > 0 Then
                nlc_phb_53.Cells(zeile, level).Value = nlc_phb_53.Cells(zeile, level).Value + nlc_phb_53.Cells(WertZeile, level).Value
            End If
        Next level
        If nlc_phb_53.Cells(WertZeile, 7).Value > 0 And (nlc_phb_53.Cells(WertZeile, 7).Value < nlc_phb_53.Cells(zeile, 7).Value Or nlc_phb_53.Cells(zeile, 7).Value = 0) Then 'Fr|fffd|hestes Startdatum aktualisieren
            nlc_phb_53.Cells(zeile, 7).Value = nlc_phb_53.Cells(WertZeile, 7).Value
        End If
        If nlc_phb_53.Cells(WertZeile, 8).Value > 0 And nlc_phb_53.Cells(WertZeile, 8).Value > nlc_phb_53.Cells(zeile, 8).Value Then 'Sp|fffd|testes Enddatum aktualisieren
            nlc_phb_53.Cells(zeile, 8).Value = nlc_phb_53.Cells(WertZeile, 8).Value
        End If
    End If
End Sub
Attribute VB_Name = "nlc_58"
Option Explicit
Option Private Module
Dim nlc_pw As String
Dim ErrorMessage As String

Public Sub import(alles As Boolean, stammdaten As Integer)
    
    ' Aktion vorbereiten
    Dim level As Integer
    Dim sfile As Variant
    Dim File_Name As String
    Dim ProjCode As String
    Dim VorhPers As String
    Dim PersCode As String
    Dim PersName As String
    Dim RessArt As String
    Dim ZS As Integer
    Dim sobj As Variant
    Dim mobj As Variant
    Dim Projekt As String
    Dim ap As String
    Dim Altwert As Double
    Dim Neuwert As Double
    Dim suche As Integer
    Dim i, j As Integer
    Dim spalte_ma As Integer
    Dim version As String
    Dim zwischen As String
    
    Dim spalte_version As Integer
    Dim spalte_akt As Integer
    
    Dim zielbereich As Variant
    Dim startbereich As Variant
    Dim starttabelle As Variant
    Dim zieltabelle As Variant
    Dim zeilennummer As Integer
    Dim hilftabstart As Variant
    Dim hilftabziel As Variant
    
    Dim version_aktuell As Boolean
    
    'Sicherheitsabfrage
    If MsgBox(nlc_Language_Msgs("no_undo"), vbYesNo, "Warning") = vbNo Then
        Exit Sub
    End If
    

    
    nlc_intern.application_off
    
    nlc_pw = nlc_intern.get_pw
    nlc_phb_xs.Unprotect (nlc_pw)
    Call nlc_intern.nlc_unprotect
    
    'Sperren_Variable = True
        
        version_aktuell = True 'aktuelle Version

        
        nlc_phb_51.Range("A1").Value = "x"
        
        On Error GoTo Error_File
        sfile = Application.GetOpenFilename("next project (*.xl*), *.xl*", , nlc_Language_Msgs("phb_import"))
        If sfile = False Then
            MsgBox nlc_Language_Msgs("phb_no_file_import_cancelled"), Title:="ERROR"
            GoTo ende
        End If
        
        On Error Resume Next
        DoEvents
        Set sobj = GetObject(sfile)
        If Err.Number <> 0 Then
            Err.Clear
            GoTo Error_File
        End If
        
        Err.Clear
        
        On Error GoTo ende
        
        sobj.Application.CalculateFull
       
        If sobj.CodeName = "nlc_phb_xs" Or sobj.CodeName = "nlc_phb_xl" Then
            starttabelle = nlc_search_name(sobj, "nlc_phb_PW")
            If sobj.CodeName = "nlc_phb_xs" Then
                If sobj.Sheets(starttabelle).Range("C10").Value < 4 Then ' nlc_phb_PW.Range("C10").Value Then
                    MsgBox nlc_Language_Msgs("phb_old")
                    sobj.Saved = True
                    sobj.Close
                    GoTo ende
                End If
                
                zeilennummer = 1
                If sobj.Sheets(starttabelle).Range("C11").Value <> nlc_phb_PW.Range("C11").Value Then
                    version_aktuell = False 'alte Version
                    If sobj.Sheets(starttabelle).Range("C10").Value = "4" And sobj.Sheets(starttabelle).Range("C11").Value = "1" Then
                        version = "V41"
                        zeilennummer = ZeiNr_VerImp41
'                    Else
'                        version = "V50"
'                        version_aktuell = True
                    End If

                ElseIf sobj.Sheets(starttabelle).Range("C7").Value <> "" Then
                    version = sobj.Sheets(starttabelle).Range("C7").Value
                Else
                    version = "1"
                End If

            Else
                 If sobj.Sheets(starttabelle).Range("C10").Value = "4" And sobj.Sheets(starttabelle).Range("C11").Value = "0" Then
                    version = "npj"
                    zeilennummer = ZeiNr_VerImpnpj
                    version_aktuell = False
                Else
                    MsgBox nlc_Language_Msgs("phb_old")
                    sobj.Saved = True
                    sobj.Close
                    GoTo ende
                 End If
            End If
            
            For i = 7 To 101 Step 2
                If nlc_phb_58.Cells(4, i).Value = version Then Exit For
                If i = 101 Then
                    MsgBox nlc_Language_Msgs("phb_version_not_found")
                    sobj.Saved = True
                    sobj.Close
                    GoTo ende
                End If
            Next i
            
           
            nlc_intern.application_off
            
            spalte_akt = 5
            spalte_version = i
            
            Application.DisplayAlerts = False
                        
            nlc_phb_06.Calculate
            
            Call nlc_58.data_importieren(sobj, version_aktuell, zeilennummer, stammdaten, version)
            Call logo_importieren(sobj)

            nlc_intern.application_off
            
            DoEvents
        
            hilftabstart = ""
            hilftabziel = ""
            
                'Copy Paste
            If alles = True Then 'Copy Paste mit Status
                i = nlc_phb_58.Range("G1").Value
            Else 'Copy Paste ohne Status
                i = nlc_phb_58.Range("I1").Value
            End If
            While Not (IsEmpty(nlc_phb_58.Cells(i, spalte_akt).Value))
                If nlc_phb_58.Cells(i, spalte_akt).Value <> "" And nlc_phb_58.Cells(i, spalte_version).Value <> "" Then
                    If nlc_phb_58.Cells(i, spalte_version - 1).Value <> hilftabstart Then
                        starttabelle = nlc_search_name(sobj, nlc_phb_58.Cells(i, spalte_version - 1).Value)
                        hilftabstart = nlc_phb_58.Cells(i, spalte_version - 1).Value
                    End If
                    If nlc_phb_58.Cells(i, spalte_akt - 1).Value <> hilftabziel Then
                        zieltabelle = nlc_search_name(ThisWorkbook, nlc_phb_58.Cells(i, spalte_akt - 1).Value)
                        hilftabziel = nlc_phb_58.Cells(i, spalte_version - 1).Value
                    End If
                    startbereich = nlc_phb_58.Cells(i, spalte_version).Value
                    zielbereich = nlc_phb_58.Cells(i, spalte_akt).Value
                    sobj.Sheets(starttabelle).Range(startbereich).Copy
                    Sheets(zieltabelle).Range(zielbereich).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Wend
            
            hilftabstart = ""
            hilftabziel = ""
        
                'Normaler Bereich
            If alles = True Then 'Normaler Bereich mit Status
                i = nlc_phb_58.Range("G2").Value
            Else 'Normaler Bereich ohne Status
                i = nlc_phb_58.Range("I2").Value
            End If
            
            While Not (IsEmpty(nlc_phb_58.Cells(i, spalte_akt).Value))
                If nlc_phb_58.Cells(i, spalte_akt).Value <> "" And nlc_phb_58.Cells(i, spalte_version).Value <> "" Then
                    If nlc_phb_58.Cells(i, spalte_version - 1).Value <> hilftabstart Then
                        starttabelle = nlc_search_name(sobj, nlc_phb_58.Cells(i, spalte_version - 1).Value)
                        hilftabstart = nlc_phb_58.Cells(i, spalte_version - 1).Value
                    End If
                    If nlc_phb_58.Cells(i, spalte_akt - 1).Value <> hilftabziel Then
                        zieltabelle = nlc_search_name(ThisWorkbook, nlc_phb_58.Cells(i, spalte_akt - 1).Value)
                        hilftabziel = nlc_phb_58.Cells(i, spalte_version - 1).Value
                    End If
                    startbereich = nlc_phb_58.Cells(i, spalte_version).Value
                    zielbereich = nlc_phb_58.Cells(i, spalte_akt).Value
                    Sheets(zieltabelle).Range(zielbereich).Value = sobj.Sheets(starttabelle).Range(startbereich).Value
                End If
                i = i + 1
            Wend
            
'                Stammdaten = 1 '1:1
'                Stammdaten = 2 'Inhalte und Res & Kostenauswahl
'                Stammdaten = 3 'zuordnen
'                Stammdaten = 4 'nur Inhalte
            
            DoEvents
            
            Application.CutCopyMode = False

            sobj.Saved = True
            sobj.Close '(SaveChanges = True) funktioniert nur 2003
            
            On Error Resume Next
            
            Application.Calculate
            nlc_intern.application_off
                       

           ' Call nlc_responsibilities
            Call nlc_39.f_aktualisieren
            
            DoEvents

            Application.Calculate
            
            nlc_phb_xs.Unprotect (nlc_pw)
            Call sprache_refresh
            
            Call nlc_intern.z_refresh_everything
            nlc_intern.application_off
            
            If nlc_phb_90.Range("C2").Value <> "" Then
                Call nlc_intern.lockPJNr(True)
            Else
                Call nlc_intern.lockPJNr(False)
            End If

            nlc_phb_00.Select
            MsgBox nlc_Language_Msgs("phb_successfully_imported"), Title:="INFORMATION"
            GoTo ende
        Else
            MsgBox nlc_Language_Msgs("phb_no_handbook_selected")
            GoTo ende
        End If

ende:

    nlc_phb_00.Select
    nlc_phb_00.Range("A1").Select
    nlc_phb_51.Range("A1").Value = ""
    If nlc_phb_PW.Range("C4") = "YES" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect Password:=nlc_pw, Structure:=True, Windows:=False
    nlc_intern.nlc_protect
    nlc_intern.application_on
    Exit Sub
    
Error_File:

    nlc_phb_51.Range("A1").Value = ""
    If nlc_phb_PW.Range("C4") = "YES" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect Password:=nlc_pw, Structure:=True, Windows:=False = ""
    nlc_intern.nlc_protect
    nlc_intern.application_on
    MsgBox nlc_Language_Msgs("phb_not_able_to_import"), Title:="Error"
    'Sperren_Variable = False

    Exit Sub
    
End Sub




Public Sub data_importieren(ByVal aobj As Object, version As Boolean, versionzeile As Integer, stammdaten As Integer, versionsnummer As String)
    Dim i As Integer
    Dim startzeile As Integer
    Dim endzeile As Integer
    Dim tab_start As String
    Dim tab_end As String
    Dim Data_Endzeile_Struktur As Integer
    Dim spaltevon As Integer
    Dim zuordnen As Boolean
    Dim hilf As Integer
    Dim j As Integer
    Dim k As Integer
    Dim hilfstart As Integer
    Dim resstartsp As Integer
    Dim resendsp As Integer
    Dim costartsp As Integer
    Dim costendsp As Integer
    
    
    If stammdaten = 3 Then
        zuordnen = True
    Else
        zuordnen = False
    End If
    
    tab_start = nlc_intern.nlc_search_name(aobj, "nlc_phb_06")
    tab_end = nlc_phb_06.name
    
    If Data_Startzeile < nlc_phb_06.Range("E7").Value Then
        Call nlc_06.zeilen_loeschen(Data_Startzeile + 1, nlc_phb_06.Range("E7").Value)
    End If
    
    Call nlc_06.zeilen_anlegen(aobj.Sheets(tab_start).Range("E7").Value - Data_Startzeile)

    nlc_intern.application_off
    nlc_phb_06.Activate
    
    startzeile = Data_Startzeile
    endzeile = aobj.Sheets(tab_start).Range("E7").Value
    
    If startzeile <> endzeile Then
        
        Sheets(tab_end).Range("C7:E7").Value = aobj.Sheets(tab_start).Range("C7:E7").Value
        Sheets(tab_end).Range("G7:H7").Value = aobj.Sheets(tab_start).Range("G7:H7").Value

        nlc_intern.application_off
        nlc_phb_06.Select
        nlc_intern.application_off
        
        For i = Data_Startspalte To Data_Endspalte
            If (i >= SpNr_Res_S And i <= SpNr_Res_E And zuordnen = True) Or (i >= SpNr_Cost_S And i <= SpNr_Cost_E And zuordnen = True) Then
                GoTo n|fffd|chster
            ElseIf version = True Or (version = False And nlc_phb_06.Cells(versionzeile, i).Value = "x") Then
                    spaltevon = i
            ElseIf version = False And nlc_phb_06.Cells(versionzeile, i).Value <> "" And VBA.IsNumeric(nlc_phb_06.Cells(versionzeile, i).Value) Then
                    spaltevon = nlc_phb_06.Cells(versionzeile, i).Value
            Else
                GoTo n|fffd|chster
            End If
            
            If version = True Then Sheets(tab_end).Cells(ZeiNr_Layout_User, i).Value = aobj.Sheets(tab_start).Cells(ZeiNr_Layout_User, spaltevon).Value
            If nlc_phb_06.Cells(ZeiNr_VerImp, i).Value <> "" Then
                If nlc_phb_06.Cells(ZeiNr_VerImp, i).Value = "Imp_ohneProjekt" Then 'Import ohne Projektzeile
                    hilfstart = startzeile + 1
                Else
                    hilfstart = startzeile
                End If
                aobj.Sheets(tab_start).Range(aobj.Sheets(tab_start).Cells(hilfstart, spaltevon), aobj.Sheets(tab_start).Cells(endzeile, spaltevon)).Copy
                Sheets(tab_end).Range(Sheets(tab_end).Cells(hilfstart, i), Sheets(tab_end).Cells(endzeile, i)).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            End If
n|fffd|chster:
        Next i
        
        If zuordnen = True Then
            If versionsnummer = "npjlight" Then
                resstartsp = 19
                resendsp = 21
                costartsp = 30
                costendsp = 32
            ElseIf versionsnummer = "V30" Then
                resstartsp = 49
                resendsp = 93
                costartsp = 99
                costendsp = 128
            ElseIf versionsnummer = "V31" Then
                resstartsp = 65
                resendsp = 109
                costartsp = 115
                costendsp = 144
            ElseIf versionsnummer = "V32" Then
                resstartsp = 65
                resendsp = 127
                costartsp = 133
                costendsp = 180
            ElseIf versionsnummer = "V33" Then
                resstartsp = 75
                resendsp = 137
                costartsp = 143
                costendsp = 190
            Else
                resstartsp = SpNr_Res_S
                resendsp = SpNr_Res_E
                costartsp = SpNr_Cost_S
                costendsp = SpNr_Cost_E
            End If
                
            For i = resstartsp To resendsp Step Res_Schritt
                hilf = wbs_search_spalte(SpNr_Res_S, SpNr_Res_E, Res_Schritt, aobj.Sheets(tab_start).Cells(ZeiNr_Kuerzel, i), SpNr_Res_unknown_S)

                For j = 0 To Res_Schritt - 1
                    If nlc_phb_06.Cells(ZeiNr_VerImp, hilf + j).Value <> "" Then
                        If nlc_phb_06.Cells(ZeiNr_VerImp, hilf + j).Value = "Imp_ohneProjekt" Then 'Import ohne Projektzeile
                            hilfstart = startzeile + 1
                        Else
                            hilfstart = startzeile
                        End If
                        If hilf <> SpNr_Res_unknown_S Then
                            aobj.Sheets(tab_start).Range(aobj.Sheets(tab_start).Cells(hilfstart, i + j), aobj.Sheets(tab_start).Cells(endzeile, i + j)).Copy
                            Sheets(tab_end).Range(Sheets(tab_end).Cells(hilfstart, hilf + j), Sheets(tab_end).Cells(endzeile, hilf + j)).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Else
                            For k = hilfstart To endzeile
                                If Sheets(tab_end).Cells(k, hilf + j).Value = "" Then
                                    Sheets(tab_end).Cells(k, hilf + j).Value = aobj.Sheets(tab_start).Cells(k, i + j).Value
                                Else
                                    Sheets(tab_end).Cells(k, hilf + j).Value = Sheets(tab_end).Cells(k, hilf + j).Value + aobj.Sheets(tab_start).Cells(k, i + j).Value
                                End If
                            Next k
                        End If
                    End If
                Next j
            Next i
            
            For i = costartsp To costendsp Step Cost_Schritt
                hilf = wbs_search_spalte(SpNr_Cost_S, SpNr_Cost_E, Cost_Schritt, aobj.Sheets(tab_start).Cells(ZeiNr_Kuerzel, i), SpNr_Cost_unknown_S)
                For j = 0 To Cost_Schritt - 1
                    If nlc_phb_06.Cells(ZeiNr_VerImp, hilf + j).Value <> "" Then
                        If nlc_phb_06.Cells(ZeiNr_VerImp, hilf + j).Value = "Imp_ohneProjekt" Then 'Import ohne Projektzeile
                            hilfstart = startzeile + 1
                        Else
                            hilfstart = startzeile
                        End If
                        If hilf <> SpNr_Cost_unknown_S Then
                            aobj.Sheets(tab_start).Range(aobj.Sheets(tab_start).Cells(hilfstart, i + j), aobj.Sheets(tab_start).Cells(endzeile, i + j)).Copy
                            Sheets(tab_end).Range(Sheets(tab_end).Cells(hilfstart, hilf + j), Sheets(tab_end).Cells(endzeile, hilf + j)).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Else
                            For k = hilfstart To endzeile
                                If Sheets(tab_end).Cells(k, hilf + j).Value = "" Then
                                    Sheets(tab_end).Cells(k, hilf + j).Value = aobj.Sheets(tab_start).Cells(k, i + j).Value
                                Else
                                    Sheets(tab_end).Cells(k, hilf + j).Value = Sheets(tab_end).Cells(k, hilf + j).Value + aobj.Sheets(tab_start).Cells(k, i + j).Value
                                End If
                            Next k
                        End If
                    End If
                Next j
            Next i
        End If
        
    End If
    
    Data_Endzeile_Struktur = nlc_phb_06.Range("E7").Value
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SpNr_ArtB), nlc_phb_06.Cells(Data_Endzeile_Struktur, SpNr_ArtB)).ClearContents
    Call nlc_06.Layoutupdate

End Sub

Function wbs_search_spalte(startspalte As Integer, endspalte As Integer, sprungweite As Integer, suche As String, unknown As Integer) As Integer
    Dim i As Integer
    Dim j As Integer
    
    wbs_search_spalte = unknown
    
    If suche = "" Then Exit Function
    
    For j = startspalte To endspalte Step sprungweite
        If nlc_phb_06.Cells(ZeiNr_Kuerzel, j).Value = suche Then
            wbs_search_spalte = j
            Exit Function
        End If
    Next j

End Function


Public Sub logo_importieren(ByVal aobj As Object)
    Dim i As Integer
    On Error GoTo ende
    
    aobj.Sheets(nlc_phb_00.name).Pictures("projectlogo").CopyPicture
    nlc_phb_00.Select
    nlc_phb_00.Range("B19").Select
    ActiveSheet.Paste
    Selection.name = "projectlogo"
    Exit Sub
ende:
    ErrorMessage = ErrorMessage & VBA.Chr(10) & "Logo Import"

End Sub



Attribute VB_Name = "nlc_90"
Option Explicit
Option Private Module
Dim nlc_pw As String
Dim IDStr As String
Dim consql As Object

Public Function btnWrite_Click() As Boolean
    Dim tmpstr1 As String
    Dim tempstr2 As String
    Dim Rs As Object
    Dim Insert As Boolean
    Dim R As Integer
    Dim X As Integer
    Dim Sqlstr As String
    Dim Z As Integer
    Dim strCon As String
    
    If nlc_phb_00.Range("sprachfeld").Value <> "deutsch" Then
        MsgBox nlc_Language_Msgs("msg_mdb_no_german")
        Exit Function
    End If
    strCon = nls_Database.DbRequired
    If strCon = "" Then GoTo cantConnectToDB

    On Error GoTo fehler
    
    'If nlc_91.btnStammAkt_Click = False Then GoTo errorCalcMD
    'Checken ob Projektnummer und Portfolio hinterlegt ist
    If nlc_phb_00.Cells(11, 2).Value = "" Or UCase(nlc_phb_00.Cells(11, 2).Value) = "PROJEKTNUMMER" Or UCase(nlc_phb_00.Cells(11, 2).Value) = "PROJECTNUMBER" Then GoTo noPJNo
    'If Range("PPFType").Value = "" Then GoTo noPF
    
    On Error GoTo fehler
    Call nlc_intern.application_off
    'nlc_phb_90.Visible = xlSheetVisible
    Insert = True

    'Timestamp setzten
    nlc_phb_90.Cells(2, 8).Value = VBA.CLng(VBA.Now) & VBA.Hour(VBA.Now) & VBA.Minute(VBA.Now) & VBA.Second(VBA.Now)
    tmpstr1 = nlc_phb_90.Cells(2, 8).Value 'VBA.CLng(VBA.Now) & VBA.Hour(VBA.Now) & VBA.Minute(VBA.Now) & VBA.Second(VBA.Now)
    
    'Kategorien ID|fffd|s einlesen
    X = 7
    IDStr = ""
    nlc_phb_90.Range("U7:U1000").ClearContents
    While nlc_phb_90.Cells(X, 2).Value <> "END"
        If nlc_phb_90.Cells(X, 2).Value = "Kategorien" And nlc_phb_90.Cells(X, 3).Value <> "" Then
            IDStr = IDStr & nlc_phb_90.Cells(X, 4).Value & ","
        End If
        X = X + 1
    Wend
    
    nlc_phb_90.Range(nlc_phb_90.Cells(7, 21), nlc_phb_90.Cells(X, 21)).ClearContents
'    nlc_phb_90.Range(nlc_phb_90.Cells(7, 7), nlc_phb_90.Cells(X, 7)).Copy
'    nlc_phb_90.Range("U7").PasteSpecial xlPasteValues
    nlc_phb_90.Range(nlc_phb_90.Cells(7, 21), nlc_phb_90.Cells(X, 21)).Value = nlc_phb_90.Range(nlc_phb_90.Cells(7, 7), nlc_phb_90.Cells(X, 7)).Value
    
    On Error GoTo cantConnectToDB
    Set consql = CreateObject("ADODB.Connection") ' Connection Object
    consql.ConnectionString = strCon
    consql.Open
    Set Rs = CreateObject("ADODB.Recordset")
    
    'Ist das Portfolio gesperrt?
    Sqlstr = "SELECT " & _
                "Locked " & _
            "FROM " & _
                "DB_PPF_Settings " & _
            "WHERE " & _
                "FK_KatDetail_PFType = 88"
    
    Rs.Open Sqlstr, consql
    If Not (Rs.EOF And Rs.bof) Then
        If Rs!Locked = True Then
            MsgBox nlc_Language_Msgs("msg_phb_export_locked")
            GoTo ende
        End If
    End If
    
    'Suchen ob das Projekt schon vorhanden ist?
'    If nlc_phb_90.Range("C2").Value = "" Then
        Set Rs = CreateObject("ADODB.Recordset")
        Sqlstr = "Select id, active from db_projekte where projektcode like '" & nlc_phb_00.Range("B11").Value & "'"
        Rs.Open Sqlstr, consql
        If Not (Rs.EOF And Rs.bof) Then
            Insert = False
            nlc_phb_90.Range("C2").Value = Rs!ID
            
            If Rs!Active = False Then
                MsgBox nlc_Language_Msgs("msg_pj_inactive")
                GoTo ende
            End If
        Else
            Insert = True
            nlc_phb_90.Range("C2").Value = ""
        End If
        
        Rs.Close
'    Else
'        Set Rs = CreateObject("ADODB.Recordset")
'        Sqlstr = "Select id, active from db_projekte where id = " & nlc_phb_90.Range("C2").Value
'
'        Rs.Open Sqlstr, consql
'        If Not (Rs.EOF And Rs.bof) Then
'            Insert = False
'            nlc_phb_90.Range("C2").Value = Rs!ID
'
'            If Rs!Active = False Then
'                MsgBox nlc_Language_Msgs("msg_pj_inactive")
'                GoTo ende
'            End If
'        Else
'            Insert = True
'            nlc_phb_90.Range("C2").Value = ""
'            MsgBox nlc_Language_Msgs("msg_pj_cantAdd")
'            GoTo ende
'        End If
'
'        Rs.Close
'    End If
    
    On Error GoTo fehler
    If MsgBox(nlc_Language_Msgs("refresh_before_export"), vbQuestion + vbYesNo, "Daten neu berechnen?") = vbYes Then
        Call nlc_intern.z_refresh_everything
    End If
    
    If Write2DB(Insert) Then
        btnWrite_Click = True
        'nur sperren, wenn alles erfolgreich ausgef|fffd|hrt wurde
        Call nlc_intern.nlc_unprotect(nlc_phb_00)
        Call nlc_intern.lockPJNr(True)
        Call nlc_intern.nlc_protect(nlc_phb_00)
    End If
    GoTo ende
    
fehler:
    nlc_phb_xs.Unprotect nlc_intern.get_pw
    nlc_phb_90.Cells(2, 3).Value = ""
    nlc_phb_xs.Protect nlc_intern.get_pw
    MsgBox nlc_Language_Msgs("phb_errors_occured")
    GoTo ende

cantConnectToDB:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_DB_Connection"), , True)
    GoTo ende
noPF:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_Portfolio"), , True)
    GoTo ende
noPJNo:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_PJ_No"), , True)
    GoTo ende
errorCalcMD:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrCalcMD"), , True)
    GoTo ende
    
ende:
    'nlc_phb_90.Visible = xlSheetVeryHidden
    On Error Resume Next
    If Rs.State <> 0 Then Rs.Close
    If consql.State <> 0 Then consql.Close
    
    Call nlc_intern.application_on
End Function

Private Function Write2DB(Insert As Boolean) As Boolean
    Dim t_ID As String
    Dim R As Integer
    'Dim consql As Object
    Dim Rs As Object
    Dim Sqlstr As String
    Dim StatementCol As Integer
    Dim Rs2 As Object
    Dim Y As Integer
    Dim X As Integer
    Dim RsD As Object
    Dim RsN As Object
    Dim cRecordset As Object
    Dim DelMSID As String
    Dim tmpMSIst As String

    On Error GoTo fehler
    nlc_phb_90.Calculate
'    Set consql = CreateObject("ADODB.Connection") ' Connection Object
'    consql.ConnectionString = strCon
'    consql.Open
    consql.BeginTrans

    If Insert = True Then
        StatementCol = 24
        'Add New
        R = MsgBox(nlc_Language_Msgs("no_pj_create"), vbYesNo)
        If R = 6 Then
            Set Rs = CreateObject("ADODB.recordset")
            Sqlstr = "Insert into db_projekte  (projektcode, exportdatum, active) values('" & nlc_phb_00.Range("B11").Value & "', '" & VBA.Format(VBA.Now, "dd.mm.yyyy") & "', " & Parse2True & ")"
            'Sqlstr = "Insert into db_projekte  (id,projektcode) values(" & nlc_phb_90.Cells(2, 3).Value & ", '" & nlc_phb_00.Range("B11").Value & "')"
            Set Rs = consql.Execute(Sqlstr)
            Sqlstr = "SELECT max(ID) AS NewID FROM db_projekte"
            
            Set cRecordset = CreateObject("ADODB.Recordset")
            cRecordset.Open Sqlstr, consql
        
            nlc_phb_90.Cells(2, 3).Value = cRecordset!NewID
        Else
            On Error Resume Next
            nlc_phb_90.Range("C2").Value = ""
            consql.RollbackTrans
            consql.Close
            Exit Function
        End If
    Else
        'Projektnamen abfragen
        Set Rs2 = CreateObject("ADODB.Recordset")
        Sqlstr = "Select wert from db_kategoriewerte where fk_kategorie = 8 and fk_projekte = " & nlc_phb_90.Cells(2, 3).Value
        Rs2.Open Sqlstr, consql
        If Not (Rs2.EOF And Rs2.bof) Then
            If Rs2!Wert <> nlc_phb_00.Range("B12").Value Then
            
                R = MsgBox(nlc_Language_Msgs("pjno_pjname") & vbCr & vbCr & nlc_Language_Msgs("overwrite"), vbYesNo)
                If R <> 6 Then
                    On Error Resume Next
                    nlc_phb_90.Range("C2").Value = ""
                    Rs2.Close
                    consql.RollbackTrans
                    consql.Close
                    Exit Function
                End If
            End If
        Rs2.Close
        End If
        
        'Update
        Set Rs = CreateObject("ADODB.recordset")
        Sqlstr = "Update db_projekte set exportdatum = '" & VBA.Format(VBA.Now, "dd.mm.yyyy") & "' where id = " & nlc_phb_90.Cells(2, 3).Value
        Set Rs = consql.Execute(Sqlstr)
        'StatementCol = 19
        ' Kategorien werden nun vorher gel|fffd|st, daher wird nun immer Insert verwendet
        StatementCol = 24
    End If

    'Export Vorgang Loggen
    Set Rs = CreateObject("ADODB.recordset")
    Sqlstr = "INSERT INTO ExportLog (FK_Projekte, WindowsLogin, ExportDate, PHB_Path) " & _
                             "VALUES (" & nlc_phb_90.Cells(2, 3).Value & ", '" & VBA.LCase(get_LoginUser) & "', " & Parse2Date(VBA.Now) & ", '" & ThisWorkbook.Path & "\" & ThisWorkbook.name & "')"
    Set Rs = consql.Execute(Sqlstr)

    'Kategorien
    Set Rs = CreateObject("ADODB.recordset")
    Sqlstr = "Delete from DB_Kategoriewerte where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value & " and FK_Kategorie in ( " & VBA.left(IDStr, VBA.Len(IDStr) - 1) & ")"
    Set Rs = consql.Execute(Sqlstr)
    
    On Error GoTo errCategory
    nlc_phb_90.Calculate
    X = 7
    While nlc_phb_90.Cells(X, 2).Value <> "END"
        If nlc_phb_90.Cells(X, StatementCol).Value <> "" Then
'            'l|fffd|schen
'            Set Rs = CreateObject("ADODB.recordset")
'            Sqlstr = nlc_phb_90.Cells(X, 21).Value
'            Set Rs = consql.Execute(Sqlstr)
            
            'einf|fffd|gen
            Set Rs = CreateObject("ADODB.recordset")
            Sqlstr = nlc_phb_90.Cells(X, StatementCol).Value
            Set Rs = consql.Execute(Sqlstr)
        End If
        X = X + 1
    Wend
    
    'Ressourcen
    On Error GoTo errResources
    Set Rs = CreateObject("ADODB.recordset")
    Sqlstr = "Delete from DB_Ressourcen where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value
    Set Rs = consql.Execute(Sqlstr)
    X = 574
    While nlc_phb_52.Cells(X, 2).Value <> "END"
        If nlc_phb_52.Cells(X, 9).Value <> "" And nlc_phb_52.Cells(X, 9).Value <> 0 Then
            Set Rs = CreateObject("ADODB.Recordset")
            Sqlstr = Insert_Ressources(nlc_phb_52.Cells(X, 10).Value, nlc_phb_90.Cells(2, 3).Value, nlc_phb_52.Cells(X, 9).Value, Nz0(nlc_phb_52.Cells(X, 3).Value), Nz0(nlc_phb_52.Cells(X, 4).Value), Nz0(nlc_phb_52.Cells(X, 6).Value), Nz0(nlc_phb_52.Cells(X, 5).Value), Nz0(nlc_phb_52.Cells(X, 7).Value))
'            Sqlstr = Sqlstr & "; SELECT max(ID) AS NewID FROM [DB_Ressourcen]"
            Set Rs = consql.Execute(Sqlstr)
            
            Sqlstr = "SELECT max(ID) AS NewID FROM [DB_Ressourcen]"
            Rs.Open Sqlstr, consql

            nlc_phb_52.Cells(X, 10).Value = Rs!NewID
            Rs.Close
            'Debug.Print Sqlstr
        End If
        X = X + 1
    Wend
    
    'Kosten
    On Error GoTo errCosts
    Sqlstr = "Delete from DB_Kosten where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value
    Set Rs = consql.Execute(Sqlstr)
    
    X = 829
    While nlc_phb_52.Cells(X, 2).Value <> "END"
        If nlc_phb_52.Cells(X, 8).Value <> "" And nlc_phb_52.Cells(X, 8).Value <> "0" Then
            Set Rs = CreateObject("ADODB.recordset")
            Sqlstr = Insert_Kosten(nlc_phb_52.Cells(X, 9).Value, nlc_phb_90.Cells(2, 3).Value, nlc_phb_52.Cells(X, 8).Value, Nz0(nlc_phb_52.Cells(X, 3).Value), Nz0(nlc_phb_52.Cells(X, 4).Value), Nz0(nlc_phb_52.Cells(X, 6).Value), Nz0(nlc_phb_52.Cells(X, 5).Value), Nz0(nlc_phb_52.Cells(X, 7).Value))
            Set Rs = consql.Execute(Sqlstr)
            
            Sqlstr = "SELECT max(ID) AS NewID FROM [DB_Kosten]"
            Rs.Open Sqlstr, consql

            nlc_phb_52.Cells(X, 9).Value = Rs!NewID
            Rs.Close
        End If
        X = X + 1
    Wend
    
    'Ressourcenverteilung
    On Error GoTo errResourceDistribution
    nlc_phb_53.Calculate
    Sqlstr = "Delete from DB_Ressourcenverteilung where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value
    Set Rs = consql.Execute(Sqlstr)
    X = 21
    While nlc_phb_53.Cells(X, 2).Value <> "END"
        If nlc_phb_53.Cells(X, 2).Value <> "" Then
            For Y = 13 To 84
                If nlc_phb_53.Cells(X, Y).Value <> "" And nlc_phb_53.Cells(X, Y).Value <> 0 Then
                    Set Rs = CreateObject("ADODB.recordset")
                    Sqlstr = Insert_RessVerteilung(nlc_phb_90.Cells(2, 3).Value, nlc_phb_53.Cells(X, 1).Value, Month((nlc_phb_53.Cells(20, Y).Value)), Year(nlc_phb_53.Cells(20, Y).Value), Nz0(nlc_phb_53.Cells(X, Y).Value))
                    Set Rs = consql.Execute(Sqlstr)
                End If
            Next Y
        End If
        X = X + 1
    Wend

    'Kostenverteilung
    On Error GoTo errCostDistribution
    Sqlstr = "Delete from DB_Kostenverteilung where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value
    Set Rs = consql.Execute(Sqlstr)
    X = 274
    While nlc_phb_53.Cells(X, 2).Value <> "END"
        If nlc_phb_53.Cells(X, 2).Value <> "" Then
            For Y = 13 To 84
                If nlc_phb_53.Cells(X, Y).Value <> "" And nlc_phb_53.Cells(X, Y).Value <> 0 Then
                    Set Rs = CreateObject("ADODB.recordset")
                    Sqlstr = Insert_KostenVerteilung(nlc_phb_90.Cells(2, 3).Value, nlc_phb_53.Cells(X, 1).Value, Month((nlc_phb_53.Cells(20, Y).Value)), Year(nlc_phb_53.Cells(20, Y).Value), Nz0(nlc_phb_53.Cells(X, Y).Value))
                    Set Rs = consql.Execute(Sqlstr)
                End If
            Next Y
        End If
        X = X + 1
    Wend
    
    'Meilensteine
    On Error GoTo errMilestones
    
    Sqlstr = "Delete from db_Meilensteine where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value
    Set RsD = consql.Execute(Sqlstr)
    
    DelMSID = ""
    X = 40
    While nlc_phb_06.Cells(X, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(X, SpNr_Art).Value = "MS" Then
            If nlc_phb_06.Cells(X, SpNr_Fortschritt).Value = 1 Then
                tmpMSIst = nlc_phb_06.Cells(X, SpNr_DateA_S).Value
            Else
                tmpMSIst = ""
            End If
            Sqlstr = Insert_Milestone(nlc_phb_90.Cells(2, 3).Value, nlc_phb_06.Cells(X, SpNr_PSP).Value, nlc_phb_06.Cells(X, SpNr_Name).Value, nlc_phb_06.Cells(X, SpNr_UID).Value, nlc_phb_06.Cells(X, SpNr_DateB_S).Value, tmpMSIst, nlc_phb_06.Cells(X, SpNr_DateA_S).Value)
            Set RsN = consql.Execute(Sqlstr)
            DelMSID = DelMSID & nlc_phb_06.Cells(X, SpNr_UID).Value & ","
        End If
        X = X + 1
    Wend
    
'    DelMSID = VBA.left(DelMSID, VBA.Len(DelMSID) - 1)
'    'Meilensteine zu dem Projekt, welche nicht mehr im Handbuch sind l|fffd|schen
'    Set RsD = CreateObject("ADODB.recordset")
'
'    'Vorg|fffd|nger l|fffd|schen
'    Sqlstr = "Delete from DB_Meilenstein_Beziehungen where id in (select ID from View_DE_Meilensteinbez_VOR where FK_Projekte = " & nlc_phb_90.Cells(2, 3).Value & " and MST_ID not in (" & DelMSID & "))"
'    Set RsD = consql.Execute(Sqlstr)
'
'    'Nachfolger l|fffd|schen
'    Sqlstr = "Delete from DB_Meilenstein_Beziehungen where id in (select ID from View_DE_Meilensteinbez_Nach where FK_Projekte = " & nlc_phb_90.Cells(2, 3).Value & " and MST_ID not in (" & DelMSID & "))"
'    Set RsD = consql.Execute(Sqlstr)
    
    'Meilensteine l|fffd|schen
'    Sqlstr = "Delete from db_Meilensteine where fk_projekte = " & nlc_phb_90.Cells(2, 3).Value & " and phb_uid not in (" & DelMSID & ")"
'    Set RsD = consql.Execute(Sqlstr)
    
    Write2DB = True
    
    consql.CommitTrans
    consql.Close
    
    GoTo ende
fehler:
    nlc_phb_90.Cells(2, 3).Value = ""
    'MsgBox Err.Description
    On Error Resume Next
    consql.RollbackTrans
    consql.Close
    Write2DB = False
    
errCategory:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrWriteCat") & nlc_phb_90.Cells(X, 3).Value & ".", , True)
    Write2DB = False
    GoTo ende
errResources:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrWriteRes"), , True)
    Write2DB = False
    GoTo ende
errCosts:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrWriteCost"), , True)
    Write2DB = False
    GoTo ende
errResourceDistribution:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrWriteResDist"), , True)
    Write2DB = False
    GoTo ende
errCostDistribution:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrWriteCostDist"), , True)
    Write2DB = False
    GoTo ende
errMilestones:
    Call nls_Database.logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_ErrWriteMST") & nlc_phb_12.Cells(X, 3).Value & ".", , True)
    Write2DB = False
    GoTo ende
    
ende:
    On Error Resume Next
    If nlc_phb_PW.Cells(3, 3).Value <> "" Then nlc_phb_90.Visible = xlSheetVeryHidden
    Call nlc_intern.application_on
End Function
'F|fffd|gt einen neuen Eintrag in die Tabelle DB_Meilensteine ein
Private Function Insert_Milestone(Projekt_ID As Double, PSP As String, Bezeichnung As String, Optional PHB_UID As Long = 0, Optional Basisdatum As String, Optional Istdatum As String, Optional Aktuelldatum As String) As String
    Dim statement As String
    Dim chkStatement As String
    Dim RsChk As Object
    Dim uBasisdatum As String
    Dim uIstdatum As String
    Dim uAktuellDatum As String
    Dim ChkID As Long
    'Sprache
    Dim datumswerte As String
    Dim Sqlstr As String
    
    ChkID = 0
    
    If PHB_UID <> 0 Then
        datumswerte = VBA.CStr(PHB_UID) & ", "
    Else
        datumswerte = "NULL, "
    End If
    If Basisdatum <> "" Then
        datumswerte = datumswerte & " " & Parse2Date(VBA.CStr(VBA.CDate(Basisdatum))) & " , "
        uBasisdatum = Parse2Date(VBA.CStr(VBA.CDate(Basisdatum)))
    Else
        datumswerte = datumswerte & "NULL, "
        uBasisdatum = "NULL"
    End If
    If Istdatum <> "" Then
        datumswerte = datumswerte & " " & Parse2Date(VBA.CStr(VBA.CDate(Istdatum))) & " , "
        uIstdatum = Parse2Date(VBA.CStr(VBA.CDate(Istdatum)))
    Else
        datumswerte = datumswerte & "NULL, "
        uIstdatum = "NULL"
    End If
    If Aktuelldatum <> "" Then
        datumswerte = datumswerte & " " & Parse2Date(VBA.CStr(VBA.CDate(Aktuelldatum))) & " "
        uAktuellDatum = Parse2Date(VBA.CStr(VBA.CDate(Aktuelldatum)))
    Else
        datumswerte = datumswerte & "NULL"
        uAktuellDatum = "NULL"
    End If
    
    Sqlstr = "Select id from [DB_Meilensteine] where [FK_Projekte] = " & Projekt_ID & " and PHB_UID = " & PHB_UID
    Set RsChk = CreateObject("ADODB.recordset")
    RsChk.Open Sqlstr, consql
    If RsChk.EOF And RsChk.bof Then
        RsChk.Close
        
         statement = "Insert Into [DB_Meilensteine] " & _
                "(FK_Projekte , " & _
                "Name, " & _
                "PHB_UID, " & _
                "Basisdatum, " & _
                "Istdatum, " & _
                "Aktuelldatum, " & _
                "active) " & _
            "Values " & _
                "('" & Projekt_ID & "', '" & _
                Bezeichnung & "', " & _
                datumswerte & ", " & _
                Parse2True & " )"
        
    Else
        ChkID = RsChk!ID
        RsChk.Close
        
         statement = "Update [DB_Meilensteine] Set " & _
                ",Name =  '" & Bezeichnung & "' " & _
                ",Basisdatum = " & uBasisdatum & " " & _
                ",Istdatum = " & uIstdatum & " " & _
                ",Aktuelldatum = " & uAktuellDatum & " " & _
                ",active = " & Parse2True & " " & _
                "Where id = " & ChkID
 
    End If
    
   
        
    'Call Set_LastID("DB_Meilensteine")
    Insert_Milestone = statement
End Function

Private Function Insert_Ressources(ID As Variant, Projekt_ID As Variant, FK_Ressourcenarten As Variant, Basis As Variant, Ist As Variant, Aktuell As Variant, Rest As Variant, Abweichung As Variant) As String
    Dim statement As String
    'Sprache
    statement = "Insert Into [DB_Ressourcen] " & _
                "(FK_Projekte , " & _
                "FK_Ressourcenarten, " & _
                "Basis, " & _
                "ist, " & _
                "Aktuell, " & _
                "Rest, " & _
                "Abweichung) " & _
            "Values " & _
                "(" & Projekt_ID & ", " & _
                FK_Ressourcenarten & ", " & _
                Replace(Basis, ",", ".") & ", " & _
                Replace(Ist, ",", ".") & ", " & _
                Replace(Aktuell, ",", ".") & ", " & _
                Replace(Rest, ",", ".") & ", " & _
                Replace(Abweichung, ",", ".") & ")"
           
    'Call Set_LastID("DB_Meilensteine")
    Insert_Ressources = statement
End Function

Private Function Insert_RessVerteilung(Projekt_ID As Variant, FK_Ressourcen As Variant, monat As Variant, jahr As Variant, Aufwand As Variant) As String
    Dim statement As String
    
    'Sprache
    statement = "Insert Into [DB_Ressourcenverteilung] " & _
                "(FK_Projekte , " & _
                "FK_Ressourcen, " & _
                "Monat, " & _
                "Jahr, " & _
                "Aufwand) " & _
            "Values " & _
                "(" & Projekt_ID & ", " & _
                FK_Ressourcen & ", " & _
                Replace(monat, ",", ".") & ", " & _
                Replace(jahr, ",", ".") & ", " & _
                Replace(Aufwand, ",", ".") & ")"
              
    'Call Set_LastID("DB_Meilensteine")
    Insert_RessVerteilung = statement
End Function

Private Function Insert_Kosten(ID As Variant, Projekt_ID As Variant, FK_Kostenarten As Variant, Basis As Variant, Ist As Variant, Aktuell As Variant, Rest As Variant, Abweichung As Variant) As String
    Dim statement As String
    
    'Sprache
    statement = "Insert Into [DB_Kosten] " & _
                "(FK_Projekte , " & _
                "FK_Kostenarten, " & _
                "Basis, " & _
                "ist, " & _
                "Aktuell, " & _
                "Rest, " & _
                "Abweichung) " & _
            "Values " & _
                "(" & Projekt_ID & ", " & _
                FK_Kostenarten & ", " & _
                Replace(Basis, ",", ".") & ", " & _
                Replace(Ist, ",", ".") & ", " & _
                Replace(Aktuell, ",", ".") & ", " & _
                Replace(Rest, ",", ".") & ", " & _
                Replace(Abweichung, ",", ".") & ")"
        
    'Call Set_LastID("DB_Meilensteine")
    Insert_Kosten = statement
End Function

Private Function Insert_KostenVerteilung(Projekt_ID As Variant, FK_Kosten As Variant, monat As Variant, jahr As Variant, Kosten As Variant) As String
    Dim statement As String
    
    'Sprache
    statement = "Insert Into [DB_Kostenverteilung] " & _
                "(FK_Projekte , " & _
                "FK_Kosten, " & _
                "Monat, " & _
                "Jahr, " & _
                "Kosten) " & _
            "Values " & _
                "(" & Projekt_ID & ", " & _
                FK_Kosten & ", " & _
                Replace(monat, ",", ".") & ", " & _
                Replace(jahr, ",", ".") & ", " & _
                Replace(Kosten, ",", ".") & ")"
              
    'Call Set_LastID("DB_Meilensteine")
    Insert_KostenVerteilung = statement
End Function


Private Function Nz0(gStr As String) As Double
    If gStr = "" Then
        Nz0 = 0
    Else
        Nz0 = gStr
    End If
End Function

Attribute VB_Name = "nlc_91"
Option Explicit
Option Private Module
Dim nlc_pw As String

Public Function btnStammAkt_Click() As Boolean
    Dim consql As Object
    Dim Rs As Object
    Dim RsH As Object
    Dim Sqlstr As String
    Dim nlc_pw As String
    Dim counter As Integer
    Dim strCon As String
    Dim XX As Long
    Dim X As Long
    
    
    strCon = nls_Database.DbRequired
    If strCon = "" Then Exit Function
     
    nlc_pw = nlc_intern.get_pw
    Call nlc_intern.nlc_unprotect(nlc_phb_50)
    Call nlc_intern.application_off
    
    counter = 7
    While nlc_phb_90.Cells(counter, 2).Value <> "END"
        counter = counter + 1
    Wend
    
'    nlc_phb_90.Range("D7:D" & counter - 2).Copy
'    nlc_phb_90.Cells(7, 9).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
'        :=False, Transpose:=False
        
    Application.CutCopyMode = False
    
    nlc_phb_91.Range("B4:E104").ClearContents
    nlc_phb_91.Range("J4:V203").ClearContents
    nlc_phb_91.Range("Z4:AM204").ClearContents
    nlc_phb_91.Range("AR4:BD204").ClearContents
    nlc_phb_91.Calculate
    'On Error GoTo fehler
    
    On Error GoTo DB_ConError
    Set Rs = CreateObject("ADODB.Recordset")
    Set consql = CreateObject("ADODB.Connection") ' Connection Object
    consql.ConnectionString = strCon
    consql.Open
    
    On Error GoTo fehler
    counter = 7
    
    While nlc_phb_90.Cells(counter, 2).Value <> "END" And nlc_phb_90.Cells(counter, 2).Value <> ""
        counter = counter + 1
    Wend
    
    'ID wegschreiben falls daten nicht mehr zugewiesen werden k|fffd|nnen
'    nlc_phb_90.Range("G7:G" & counter).Copy
'    nlc_phb_90.Range("U7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    nlc_phb_90.Range("U7:U" & counter).Value = nlc_phb_90.Range("G7:G" & counter).Value
    
    Set Rs = CreateObject("ADODB.Recordset")

    'Ausgabe in Deutsch f|fffd|r Test
    'Bei Spalte B einf|fffd|gen und Feldart mitnehmen!!!
    Sqlstr = "select distinct  FK_Art, DB_Language.deutsch,DB_Kategorie.ID, 'x' as X  from ((DB_Kategorie left join DB_Kategorie_Detail on DB_Kategorie.ID = DB_Kategorie_Detail.FK_Kategorie) left join DB_Language on DB_Kategorie.FK_Language_Name = DB_Language.Term) " & _
            "where DB_Kategorie_Detail.ID Is Not Null" & _
            " Union " & _
            "select distinct  FK_Art, DB_Language.deutsch,DB_Kategorie.ID,'' as X  from ((DB_Kategorie left join DB_Kategorie_Detail on DB_Kategorie.ID = DB_Kategorie_Detail.FK_Kategorie) left join DB_Language on DB_Kategorie.FK_Language_Name = DB_Language.Term) " & _
            "where DB_Kategorie_Detail.ID Is Null AND DB_Kategorie.active = " & Parse2True
    Rs.Open Sqlstr, consql
    nlc_phb_91.Range("B4").CopyFromRecordset Rs
    Rs.Close
    
    Set Rs = CreateObject("ADODB.Recordset")
    'Ausgabe mit sprachterm, Sprache wir dann mittels funktion |fffd|bersetzt
'    slqstr = "select distinct DB_Kategorie_Detail.ID,DB_Kategorie_Detail.FK_Language_Name,DB_Kategorie_Detail.FK_Kategorie from DB_Kategorie_Detail"

    'Ausgabe in Deutsch f|fffd|r Test
    Sqlstr = "select distinct DB_Kategorie_Detail.ID,DB_Kategorie_Detail.FK_Kategorie,FK_Language_shortName,DB_Language.english,DB_Language.deutsch, '' As Lang3, '' As Lang4, '' As Lang5, '' As Lang6, '' As Lang7, '' As Lang8, '' As Lang9, '' As Lang10,  active  " & _
             "from DB_Kategorie_Detail  left join DB_Language on DB_Kategorie_Detail.FK_Language_Name = DB_Language.Term" ' WHERE DB_Kategorie_Detail.active = 1"
    'Sqlstr = "select distinct DB_Kategorie_Detail.ID,DB_Kategorie_Detail.FK_Kategorie,FK_Language_shortName,DB_Language.english,DB_Language.deutsch from DB_Kategorie_Detail  left join DB_Language on DB_Kategorie_Detail.FK_Language_Name = DB_Language.Term"
    Rs.Open Sqlstr, consql
    nlc_phb_91.Range("J4").CopyFromRecordset Rs
    Rs.Close
    
    For X = 4 To 1000
       If nlc_phb_91.Cells(X, 23).Value <> "" Then
            nlc_phb_91.Cells(X, 23).Value = "x"
       End If
    Next X
    
'    'Ressourcen
'    nlc_phb_50.Range("BF7:BR205").ClearContents
'    nlc_phb_50.Range("BY7:CA205").ClearContents
'
'
'    Set RsH = CreateObject("ADODB.Recordset")
'    Sqlstr = "SELECT  count(FK_Ressourcenarten) as Summe FROM DB_Ressourcenarten where FK_Kostenarten is NULL and  active= " & Parse2True
'    'RsH.cursorlocation = 3
'    RsH.Open Sqlstr, consql
'
'    If RsH!summe > 1 Then
''         Sqlstr = "select DB_Ressourcenarten.ID, DB_Language_1.english + ' (' + DB_Language.english + ')' AS 'english',   DB_Language_1.deutsch + ' (' + DB_Language.deutsch + ')' AS 'deutsch','' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz " & _
''         "FROM ((dbo.DB_Language RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten AS DB_Ressourcenarten_1) RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten ON DB_Ressourcenarten_1.ID = dbo.DB_Ressourcenarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
''        "dbo.DB_Language AS DB_Language_1 ON dbo.DB_Ressourcenarten.FK_Language_Name = DB_Language_1.Term ON " & _
''        "dbo.DB_Language.Term = DB_Ressourcenarten_1.FK_Language_Shortname " & _
''        "where DB_Ressourcenarten.FK_Kostenarten Is Not Null and DB_Ressourcenarten.Active = 1 "
'
'
'        Sqlstr = "SELECT     DB_Ressourcenarten.ID, (DB_Language_1.english + ' (' + (select DB_Language.english  FROM  DB_Ressourcenarten as Res2 LEFT JOIN DB_Language ON Res2.FK_Language_Name = DB_Language.Term where DB_Ressourcenarten.FK_Ressourcenarten =Res2.ID ) + ')') as 'english', (DB_Language_1.deutsch + ' (' + (select DB_Language.deutsch  FROM  DB_Ressourcenarten as Res2 LEFT JOIN DB_Language ON Res2.FK_Language_Name = DB_Language.Term where DB_Ressourcenarten.FK_Ressourcenarten =Res2.ID ) + ')') as 'deutsch' ," & _
'                "'' AS L3, '' AS L4, '' AS L5, '' AS L6, '' AS L7, '' AS L8, '' AS L9, '' AS L10, DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz " & _
'                " FROM         DB_Language AS DB_Language_1 RIGHT OUTER JOIN DB_Ressourcenarten ON DB_Language_1.Term = DB_Ressourcenarten.FK_Language_Name " & _
'                " WHERE(DB_Ressourcenarten.FK_Kostenarten Is Not Null) And (DB_Ressourcenarten.Active = " & Parse2True & ") "
'    Else
''         Sqlstr = "select DB_Ressourcenarten.ID, DB_Language_1.english  AS 'english',   DB_Language_1.deutsch  AS 'deutsch','' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz " & _
''         "FROM ((dbo.DB_Language RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten AS DB_Ressourcenarten_1) RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten ON DB_Ressourcenarten_1.ID = dbo.DB_Ressourcenarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
''        "dbo.DB_Language AS DB_Language_1 ON dbo.DB_Ressourcenarten.FK_Language_Name = DB_Language_1.Term ON " & _
''        "dbo.DB_Language.Term = DB_Ressourcenarten_1.FK_Language_Shortname " & _
''        "where DB_Ressourcenarten.FK_Kostenarten Is Not Null and DB_Ressourcenarten.Active = 1 "
'        Sqlstr = "SELECT     DB_Ressourcenarten.ID, DB_Language_1.english, DB_Language_1.deutsch, '' AS L3, '' AS L4, '' AS L5, '' AS L6, '' AS L7, '' AS L8, '' AS L9, '' AS L10, DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz" & _
'            " FROM         DB_Language AS DB_Language_1 RIGHT OUTER JOIN DB_Ressourcenarten ON DB_Language_1.Term = DB_Ressourcenarten.FK_Language_Name " & _
'            " WHERE (DB_Ressourcenarten.FK_Kostenarten Is Not Null) And (DB_Ressourcenarten.Active = " & Parse2True & ") "
'    End If
'
'    Set Rs = CreateObject("ADODB.Recordset")
'    Rs.Open Sqlstr, consql
'    nlc_phb_50.Range("BF7").CopyFromRecordset Rs
'    Rs.Close
'
'    'Inaktive laden
'    counter = 12
'
'    While nlc_phb_50.Cells(counter, 58) <> ""
'        counter = counter + 1
'    Wend
'
'    If RsH!summe > 1 Then
''         Sqlstr = "select DB_Ressourcenarten.ID, DB_Language_1.english + ' (' + DB_Language.english + ') - ' + '" + nlc_functions.nlc_LanguageByLang("english", "inactive") + "' AS 'english',   DB_Language_1.deutsch + ' (' + DB_Language.deutsch + ') - ' + '" + nlc_functions.nlc_LanguageByLang("deutsch", "inactive") + "' AS 'deutsch','' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz " & _
''         "FROM ((dbo.DB_Language RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten AS DB_Ressourcenarten_1) RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten ON DB_Ressourcenarten_1.ID = dbo.DB_Ressourcenarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
''        "dbo.DB_Language AS DB_Language_1 ON dbo.DB_Ressourcenarten.FK_Language_Name = DB_Language_1.Term ON " & _
''        "dbo.DB_Language.Term = DB_Ressourcenarten_1.FK_Language_Shortname " & _
''        "where DB_Ressourcenarten.FK_Kostenarten Is Not Null and DB_Ressourcenarten.Active = 0 "
'Sqlstr = "SELECT     DB_Ressourcenarten.ID, (DB_Language_1.english + ' (' + (select DB_Language.english  FROM  DB_Ressourcenarten as Res2 LEFT JOIN DB_Language ON Res2.FK_Language_Name = DB_Language.Term where DB_Ressourcenarten.FK_Ressourcenarten =Res2.ID ) + ')') as 'english', (DB_Language_1.deutsch + ' (' + (select DB_Language.deutsch  FROM  DB_Ressourcenarten as Res2 LEFT JOIN DB_Language ON Res2.FK_Language_Name = DB_Language.Term where DB_Ressourcenarten.FK_Ressourcenarten =Res2.ID ) + ')') as 'deutsch' ," & _
'                "'' AS L3, '' AS L4, '' AS L5, '' AS L6, '' AS L7, '' AS L8, '' AS L9, '' AS L10, DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz " & _
'                " FROM         DB_Language AS DB_Language_1 RIGHT OUTER JOIN DB_Ressourcenarten ON DB_Language_1.Term = DB_Ressourcenarten.FK_Language_Name " & _
'                " WHERE(DB_Ressourcenarten.FK_Kostenarten Is Not Null) And (DB_Ressourcenarten.Active = 0) "
'    Else
''         Sqlstr = "select DB_Ressourcenarten.ID, DB_Language_1.english  + ' - ' + '" + nlc_functions.nlc_LanguageByLang("english", "inactive") + "' AS 'english',   DB_Language_1.deutsch  + ' - ' + '" + nlc_functions.nlc_LanguageByLang("deutsch", "inactive") + "' AS 'deutsch','' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz " & _
''         "FROM ((dbo.DB_Language RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten AS DB_Ressourcenarten_1) RIGHT OUTER JOIN " & _
''        "dbo.DB_Ressourcenarten ON DB_Ressourcenarten_1.ID = dbo.DB_Ressourcenarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
''        "dbo.DB_Language AS DB_Language_1 ON dbo.DB_Ressourcenarten.FK_Language_Name = DB_Language_1.Term ON " & _
''        "dbo.DB_Language.Term = DB_Ressourcenarten_1.FK_Language_Shortname " & _
''        "where DB_Ressourcenarten.FK_Kostenarten Is Not Null and DB_Ressourcenarten.Active = 0 "
'        Sqlstr = "SELECT     DB_Ressourcenarten.ID, DB_Language_1.english, DB_Language_1.deutsch, '' AS L3, '' AS L4, '' AS L5, '' AS L6, '' AS L7, '' AS L8, '' AS L9, '' AS L10, DB_Ressourcenarten.FK_Kostenarten, DB_Ressourcenarten.Kostensatz" & _
'            " FROM         DB_Language AS DB_Language_1 RIGHT OUTER JOIN DB_Ressourcenarten ON DB_Language_1.Term = DB_Ressourcenarten.FK_Language_Name " & _
'            " WHERE (DB_Ressourcenarten.FK_Kostenarten Is Not Null) And (DB_Ressourcenarten.Active = 0) "
'    End If
'
'    Set Rs = CreateObject("ADODB.Recordset")
'    Rs.Open Sqlstr, consql
'    nlc_phb_50.Range("BF" & counter).CopyFromRecordset Rs
'    Rs.Close
'    RsH.Close
'
'    'Kosten
'    Set Rs = CreateObject("ADODB.Recordset")
'    Sqlstr = "select DB_Kostenarten.ID, DB_Language.english, DB_Language.deutsch,'' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,'auto' as 'Art' from DB_Language right join DB_Kostenarten on DB_Language.Term = DB_Kostenarten.FK_Language_Name " & _
'    " where DB_Kostenarten.Kostenart = " & Parse2True & " And DB_Kostenarten.Active = " & Parse2True & _
'    " ORDER BY ID"
'
'
'    Rs.Open Sqlstr, consql
'    nlc_phb_50.Range("BY7").CopyFromRecordset Rs
'    Rs.Close
'
'    Sqlstr = " select DB_Kostenarten.ID, DB_Language.english,DB_Language.deutsch,'' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,'man' as 'Art' from DB_Language right join DB_Kostenarten on DB_Language.Term = DB_Kostenarten.FK_Language_Name " & _
'    " where DB_Kostenarten.Kostenart = 0 And DB_Kostenarten.Active = " & Parse2True & _
'    " ORDER BY 'art', DB_Language.deutsch "
'
'
'    Rs.Open Sqlstr, consql
'    nlc_phb_50.Range("BY12").CopyFromRecordset Rs
'    Rs.Close
'
'    'Inaktive laden
'    counter = 12
'
'    While nlc_phb_50.Cells(counter, 77) <> ""
'        counter = counter + 1
'    Wend
'
'    Set Rs = CreateObject("ADODB.Recordset")
'    Sqlstr = " select DB_Kostenarten.ID, DB_Language.english + ' - ' + '" + nlc_functions.nlc_LanguageByLang("english", "inactive") + "',DB_Language.deutsch  + ' - ' + '" + nlc_functions.nlc_LanguageByLang("deutsch", "inactive") + "','' as L3,'' as L4,'' as L5,'' as L6,'' as L7,'' as L8,'' as L9,'' as L10,'man' as 'Art' from DB_Language right join DB_Kostenarten on DB_Language.Term = DB_Kostenarten.FK_Language_Name " & _
'             " where DB_Kostenarten.Kostenart = 0 And DB_Kostenarten.Active = 0 " & _
'             "ORDER BY " + nlc_phb_00.Cells(62, 3).Value
'
'    Rs.Open Sqlstr, consql
'    nlc_phb_50.Range("BY" & counter).CopyFromRecordset Rs
'    Rs.Close
'
'    consql.Close
    
    'Call FillKat
    'Call nlc_intern.nlc_ListGen(12)
    Call nlc_intern.application_off
    Call Stammdaten2phb
    
    Dim row_counter As Integer
    counter = 7
    
    While nlc_phb_90.Cells(counter, 2).Value <> "END"
        row_counter = 4
        If nlc_phb_90.Cells(counter, 9).Value <> "" Then
            Do While nlc_phb_91.Cells(row_counter, 4).Value <> ""
                If nlc_phb_90.Cells(counter, 9).Value = nlc_phb_91.Cells(row_counter, 4).Value Then
                    nlc_phb_90.Cells(counter, 3).Value = nlc_phb_91.Cells(row_counter, 3).Value
                    Exit Do
                End If
                row_counter = row_counter + 1
            Loop
        End If
        counter = counter + 1
    Wend
    
    btnStammAkt_Click = True
    GoTo ende

DB_ConError:
    MsgBox nlc_Language_Msgs("msg_no_DB_Connection"), vbCritical + vbOKOnly, "ERROR"
    btnStammAkt_Click = False
    GoTo ende
    
fehler:
    MsgBox nlc_Language_Msgs("msg_ErrCalcMD"), vbCritical + vbOKOnly, "ERROR"
    btnStammAkt_Click = False
    GoTo ende
    
ende:
    On Error Resume Next
    If Rs.State <> 0 Then Rs.Close
    If consql.State <> 0 Then consql.Close
    
    Call nlc_intern.nlc_protect(nlc_phb_50)
    nlc_phb_00.Activate
    Call nlc_intern.application_on
    
End Function

Public Sub Stammdaten2phb()
    Dim X As Integer
    
    nlc_phb_90.Calculate
    
    nlc_pw = nlc_intern.get_pw
    X = 7
    While nlc_phb_90.Cells(X, 2).Value <> "END" And nlc_phb_90.Cells(X, 2).Value <> ""
        If nlc_phb_90.Cells(X, 1).Value <> "x" Then
            If nlc_phb_90.Cells(X, 2).Value = "Kategorien" And nlc_phb_90.Cells(X, 7).Value <> "" And nlc_phb_90.Cells(X, 5).Value <> nlc_phb_90.Cells(X, 20).Value And nlc_phb_90.Cells(X, 8).Value = "x" Then
                'Worksheets(nlc_phb_90.Cells(X, 11).Value).Unprotect (nlc_pw)
                Worksheets(nlc_phb_90.Cells(X, 17).Value).Range(nlc_phb_90.Cells(X, 18).Value).Value = nlc_phb_90.Cells(X, 5).Value
                'Worksheets(nlc_phb_90.Cells(X, 11).Value).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
            End If
        End If
        X = X + 1
    Wend

End Sub

Attribute VB_Name = "nlc_Kalender"
Option Explicit
Public cLabel() As New clsLabel
Option Compare Text

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Module Name: modFormPositioner
' Date: 22-Sept-2002
' Author: Chip Pearson, www.cpearson.com, chip@cpearson.com
' Copyright: (c) Copyright 2002, Charles H Pearson.
'
' Description:  Calculates to position to display
' a userform relative to a cell.
'
' Usage:
'   Declare a variable of type Positions:
'       Dim PS As Positions
'   Call the PositionForm function, passing it the following
'   parameters:
'       WhatForm        The userform object
'
'       AnchorRange     The cell relative to which the form
'                       should be displayed.
'
'       NudgeRight      Optional: Number of points to nudge the
'                       for to the right.  This is useful with
'                       bordered range.  Typically, this should
'                       be 0, but may be positive or negative.
'
'       NudgeDown       Optional: Number of points to nudge the
'                       for downward.  This is useful with
'                       bordered range.  Typically, this should
'                       be 0, but may be positive or negative.
'
'       HorizOrientation:   Optional: One of the following values:
'            cstFhpNull             = Left of screen
'            cstFhpAppCenter        = Center of Excel screen
'            cstFhpAuto             = Automatic (recommended and default)
'
'            cstFhpFormLeftCellLeft     = left edge of form at left edge of cell
'            cstFhpFormLeftCellRight    = left edge of form at right edge of cell
'            cstFhpFormLeftCellCenter   = left edge of form at center of cell
'
'            cstFhpFormRightCellLeft    = right edge of form at left edge of cell
'            cstFhpFormRightCellRight   = right edge of form at right edge of cell
'            cstFhpFormRightCellCenter  = right edge of form at center of cell
'
'            cstFhpFormCenterCellLeft   = center of form at left edge of cell
'            cstFhpFormCenterCellRight  = center of form at right edge of cell
'            cstFhpFormCenterCellCenter = center of form at center of cell
'
'       VertOrientation     Optional: One of the following values:
'
'            cstFvpNull                 = Top of screen
'            cstFvpAppCenter            = Center of Excel screen
'            cstFvpAuto                 = Automatic (recommended and default)
'
'            cstFvpFormTopCellTop       = top edge of form at top edge of cell
'            cstFvpFormTopCellBottom    = top edge of form at bottom edge of cell
'            cstFvpFormTopCellCenter    = top edge of form at center of cell
'
'            cstFvpFormBottomCellTop    = bottom edge of form at top of edge of cell
'            cstFvpFormBottomCellBottom = bottom edge of form at bottom edge of cell
'            cstFvpFormBottomCellCenter = bottom edge of form at center of cell
'
'            cstFvpFormCenterCellTop    = center of form at top of cell
'            cstFvpFormCenterCellBottom = center of form at bottom of cell
'            cstFvpFormCenterCellCenter = center of form at center of cell
'
'   For example:
'       PS = PositionForm (UserForm1,Range("C12"),0,0,cstFvpAuto,cstFhpAuto)
'
'   Then, position the form using the values from PS:
'        UserForm1.Top = PS.FrmTop
'        UserForm1.Left = PS.FrmLeft
'   Finally, show the form:
'        UserForm1.Show vbModal
'
'   In summary, the code would look like
'
'       Dim PS As Positions
'       PS = PositionForm (UserForm1,ActiveCell,0,0,cstFvpAuto,cstFhpAuto)
'       UserForm1.Top = PS.FrmTop
'       UserForm1.Left = PS.FrmLeft
'       UserForm1.Show vbModal
'
'
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Type: Positions
'
' We store everything in a structure so that we can easily
' pass things around from on procedure to another.  Otherwise,
' we'd quickly run out of stack space passing to the
' optimazation procedures.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type Positions

    FrmTop As Single        ' Userform
    FrmLeft As Single
    FrmHeight As Single
    FrmWidth As Single

    RngTop As Single        ' Passed in cell
    RngLeft As Single
    RngWidth  As Single
    RngHeight As Single


    AppTop As Single        'Application
    AppLeft As Single
    AppWidth  As Single
    AppHeight As Single

    WinTop As Single        ' Window
    WinLeft As Single
    WinWidth  As Single
    WinHeight As Single

    Cell1Top As Single      ' 1st cell in visible range
    Cell1Left As Single
    Cell1Width As Single
    Cell1Height As Single

    LastCellTop As Single   ' last visible cell in window
    LastCellLeft As Single
    LastCellWidth As Single
    LastCellHeight As Single

    BaseLeft As Single      ' the are the screen based coordinates for the upper left corner
    BaseTop As Single       ' of cell.

    VComp As Single         ' compensations for displayed object (toolbars, headers, etc)
    HComp As Single

    NudgeDown As Single     ' allow the user to nudge the positioning by a few pixels.
    NudgeRight As Single

#If VBA6 Then
    OrientationH As cstFormHorizontalPosition
    OrientationV As cstFormVerticalPosition
#Else
    OrientationH As Long
    OrientationV As Long
#End If

End Type
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' End TYPE
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#If VBA6 Then
    Public Enum cstFormHorizontalPosition
        cstFhpNull = -2             ' X = 0, left of screen
        cstFhpAppCenter = -1
        cstFhpAuto = 0

        cstFhpFormLeftCellLeft
        cstFhpFormLeftCellRight
        cstFhpFormLeftCellCenter

        cstFhpFormRightCellLeft
        cstFhpFormRightCellRight
        cstFhpFormRightCellCenter

        cstFhpFormCenterCellLeft
        cstFhpFormCenterCellRight
        cstFhpFormCenterCellCenter
    End Enum

    Public Enum cstFormVerticalPosition
        cstFvpNull = -2             ' Y = 0, top of screen
        cstFvpAppCenter = -1
        cstFvpAuto = 0

        cstFvpFormTopCellTop
        cstFvpFormTopCellBottom
        cstFvpFormTopCellCenter

        cstFvpFormBottomCellTop
        cstFvpFormBottomCellBottom
        cstFvpFormBottomCellCenter

        cstFvpFormCenterCellTop
        cstFvpFormCenterCellBottom
        cstFvpFormCenterCellCenter
    End Enum

#Else

    Public Const cstFhpNull As Long = -2                ' X = 0, left of screen
    Public Const cstFhpAppCenter  As Long = -1
    Public Const cstFhpAuto  As Long = 0

    Public Const cstFhpFormLeftCellLeft  As Long = 1
    Public Const cstFhpFormLeftCellRight  As Long = 2
    Public Const cstFhpFormLeftCellCenter  As Long = 3

    Public Const cstFhpFormRightCellLeft  As Long = 4
    Public Const cstFhpFormRightCellRight  As Long = 5
    Public Const cstFhpFormRightCellCenter  As Long = 6

    Public Const cstFhpFormCenterCellLeft  As Long = 7
    Public Const cstFhpFormCenterCellRight  As Long = 8
    Public Const cstFhpFormCenterCellCenter  As Long = 9

    Public Const cstFvpNull  As Long = -2                ' Y = 0, top of screen
    Public Const cstFvpAppCenter  As Long = -1
    Public Const cstFvpAuto  As Long = 0

    Public Const cstFvpFormTopCellTop As Long = 1
    Public Const cstFvpFormTopCellBottom  As Long = 2
    Public Const cstFvpFormTopCellCenter  As Long = 3

    Public Const cstFvpFormBottomCellTop  As Long = 4
    Public Const cstFvpFormBottomCellBottom  As Long = 5
    Public Const cstFvpFormBottomCellCenter  As Long = 6

    Public Const cstFvpFormCenterCellTop  As Long = 7
    Public Const cstFvpFormCenterCellBottom  As Long = 8
    Public Const cstFvpFormCenterCellCenter  As Long = 9

#End If

Public Const cColHeaderHeight As Single = 9
Public Const cRowHeaderWidth As Single = 20
Public Const cDefaultWindowFrameHeight As Single = 26
Public Const cDefaultWindowFrameWidth As Single = 6
Public Const cDefaultCmdBarHeight = 26
Private Const cLeftBump = 5
Private Const cRightBump = 0
Private Const cUpBump = 0
Private Const cDownBump = 0

#If VBA6 Then
Function PositionForm(WhatForm As Object, AnchorRange As Range, _
    Optional NudgeRight As Single = 0, Optional NudgeDown As Single = 0, _
    Optional ByVal HorizOrientation As cstFormHorizontalPosition = cstFhpAuto, _
    Optional ByVal VertOrientation As cstFormVerticalPosition = cstFvpAuto) As Positions

#Else
Function PositionForm(WhatForm As Object, AnchorRange As Range, _
    Optional NudgeRight As Single = 0, Optional NudgeDown As Single = 0, _
    Optional ByVal HorizOrientation As Long = cstFhpAuto, _
    Optional ByVal VertOrientation As Long = cstFvpAuto) As Positions

#End If
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' PositionForm
'
' The positions the form on the screen according to the specified
' parameters. It returns a Position structure.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim CmdBar As Office.CommandBar
Dim DefaultCmdBarHeight As Single

Dim VCmdArr(0 To 100) As Single  ' hold our command bar widths -- assume fewer that 20 rows
Dim HCmdArr(0 To 100) As Single  ' of command bars.

Dim HasVisibleWindow As Boolean
Dim Win As Window
Dim PS As Positions

Dim Ndx As Long

Dim ColHeaderHeight As Single: ColHeaderHeight = cColHeaderHeight
Dim RowHeaderWidth As Single: RowHeaderWidth = cRowHeaderWidth
Dim DefaultWindowFrameHeight As Single: DefaultWindowFrameHeight = cDefaultWindowFrameHeight
Dim DefaultWindowFrameWidth As Single: DefaultWindowFrameWidth = cDefaultWindowFrameWidth

PS.OrientationH = HorizOrientation
PS.OrientationV = VertOrientation
PS.NudgeRight = NudgeRight
PS.NudgeDown = NudgeDown
'
' If Excel is minimized, set to 0,0 and get out.  The caller should NOT be
' displaying a form when XL is minimized.
'
If Application.WindowState = xlMinimized Then
    WhatForm.top = 0
    WhatForm.left = 0
    PS.FrmTop = 0
    PS.FrmWidth = 0
    PS.OrientationH = cstFhpNull
    PS.OrientationV = cstFvpNull
    Exit Function
End If
'
' If the AnchorRange is not within the visible range of the activewindow,
' then force the form to be displayed as AppCenter.
'
If Application.Intersect(AnchorRange, ActiveWindow.VisibleRange) Is Nothing Then
    HorizOrientation = cstFhpAppCenter
    VertOrientation = cstFvpAppCenter
End If
'
' If there are no windows visible, force AppCenter.
'
For Each Win In Application.Windows
    If Win.Visible = True Then
        HasVisibleWindow = True
        Exit For
    End If
Next Win

If HasVisibleWindow = False Then
    HorizOrientation = cstFhpAppCenter
    VertOrientation = cstFvpAppCenter
End If
'
' get our object coordinates.
'
With Application
    PS.AppTop = .top
    PS.AppLeft = .left
    PS.AppWidth = .width
    PS.AppHeight = .Height
End With

With Application.ActiveWindow
    PS.WinTop = .top
    PS.WinLeft = .left
    PS.WinWidth = .width
    PS.WinHeight = .Height
    With .VisibleRange.Cells(1, 1)
        PS.Cell1Top = .top
        PS.Cell1Left = .left
        PS.Cell1Height = .Height
        PS.Cell1Width = .width
    End With
    With .VisibleRange
        PS.LastCellTop = .Cells(.Cells.count).top
        PS.LastCellLeft = .Cells(.Cells.count).left
        PS.LastCellWidth = .Cells(.Cells.count).width
        PS.LastCellHeight = .Cells(.Cells.count).Height
    End With
End With

With AnchorRange
    PS.RngTop = .top
    PS.RngLeft = .left
    PS.RngWidth = .width
    PS.RngHeight = .Height
End With

PS.FrmHeight = WhatForm.Height
PS.FrmWidth = WhatForm.width
'
' we'll assume that the application's caption bar and the formula
' bar are the same height as the menu bar.  If we can't figure that out, use 26 as a default.
'
If Application.CommandBars.ActiveMenuBar.Visible = True Then
    DefaultCmdBarHeight = Application.CommandBars.ActiveMenuBar.Height
Else
    DefaultCmdBarHeight = cDefaultCmdBarHeight
End If
'
' We have to have a compenstating factor for command bars. Load an array
' with the heights of visible command bars. The index into the array is
' the RowIndex of the command bar, so we won't "double dip" if two or more
' command bars occupy the same row.
'
For Each CmdBar In Application.CommandBars
    With CmdBar
        If (.Visible = True) And (.Position = msoBarTop) Or (.Position = msoBarMenuBar) Then
            If .RowIndex > 0 Then
                VCmdArr(.RowIndex) = .Height
            End If
        End If
        If (.Visible = True) And (.Position = msoBarLeft) Then
            If .RowIndex > 0 Then
                HCmdArr(.RowIndex) = .width
            End If
        End If
    End With
Next CmdBar
'
' Now, add up the values in the array so that we can
' get the compensation neeed for toolbars on the
' top and left side of the screen.
'
For Ndx = LBound(VCmdArr) To UBound(VCmdArr)
    PS.VComp = PS.VComp + VCmdArr(Ndx)
Next Ndx

For Ndx = LBound(HCmdArr) To UBound(HCmdArr)
    PS.HComp = PS.HComp + HCmdArr(Ndx)
Next Ndx

'''''''''''''''''''''''''''''''''''''''''''''''''''
' VERTICAL COMPENSATION
'''''''''''''''''''''''''''''''''''''''''''''''''''
If Application.DisplayFullScreen = True Then
    '''''''''''''''''''''''''''''''''''''''''''''''
    ' FULL SCREEN VERTICAL COMPENSATION - OK
    '''''''''''''''''''''''''''''''''''''''''''''''
    PS.VComp = DefaultCmdBarHeight
    '
    ' compensate for the rown and column headers
    '
    If ActiveWindow.DisplayHeadings = True Then
        PS.VComp = PS.VComp + ColHeaderHeight
    Else
        PS.VComp = PS.VComp - (0.666667 * ColHeaderHeight)
    End If

    ' no formula bar compensation is required since the
    ' formula bar is not displayed in full-screen mode.

Else
    '''''''''''''''''''''''''''''''''''''''''''''''
    ' NORMAL SCREEN VERTICAL COMPENSATION
    '''''''''''''''''''''''''''''''''''''''''''''''
    '
    ' compensate for the rown and column headers
    '
    If ActiveWindow.DisplayHeadings = True Then
        PS.VComp = PS.VComp + ColHeaderHeight
    Else
        PS.VComp = PS.VComp - (0.666667 * ColHeaderHeight)
    End If
    '
    ' compenstate for formula bar
    '
    If Application.DisplayFormulaBar = True Then
        PS.VComp = PS.VComp + DefaultCmdBarHeight
    Else
        PS.VComp = PS.VComp + (ColHeaderHeight * 1.5)
    End If
    ''''''''''''''''''''''''''''''''''''''''''''''''
End If


'''''''''''''''''''''''''''''''''''''''''''''''''''
' HORIZONTAL COMPENSATION
'''''''''''''''''''''''''''''''''''''''''''''''''''
If Application.DisplayFullScreen = True Then
    '''''''''''''''''''''''''''''''''''''''''''''''
    ' FULL SCREEN HORIZONTAL COMPENSATION
    '''''''''''''''''''''''''''''''''''''''''''''''
    PS.HComp = 0
    '''''''''''''''''''''''''''''''''''''''''''''''
'Else
    ' do nothing -- HComp is already correct.
End If
'
' compensate for the row and column headers
'
If ActiveWindow.DisplayHeadings = True Then
    PS.HComp = PS.HComp + RowHeaderWidth
Else
    PS.HComp = PS.HComp
End If


'''''''''''''''''''''''''''''''''''''''''''''''
' Now, adjust for the window
'''''''''''''''''''''''''''''''''''''''''''''''
Select Case Application.ActiveWindow.WindowState

    Case xlMaximized
        '
        ' in the case of a maximized window, the action Window.Top
        ' and Window.Left properties will be negative.  Here,
        ' we want 0. as the basis for the window.
        '
        PS.WinTop = 0
        PS.WinLeft = 0

    Case xlMinimized
        '
        ' In a minimized window, display in the center of
        ' applicaiton. Force the form to the center of the
        ' application.
        '
        HorizOrientation = cstFhpAppCenter
        VertOrientation = cstFvpAppCenter

    Case xlNormal
        PS.WinTop = Abs(ActiveWindow.top) + DefaultWindowFrameHeight
        PS.WinLeft = Abs(ActiveWindow.left) + DefaultWindowFrameWidth

    Case Else
        ' shouldn't happen
End Select

'''''''''''''''''''''''''''''''''''''''''''''''
' Calculate our BaseLeft and BaseRight values.
' We'll use these as the base relative to which
' the form will actually be positioned.
'
' BaseLeft = LEFT edge of cell
' BaseTop= TOP edge of cell
'
'''''''''''''''''''''''''''''''''''''''''''''''
PS.BaseLeft = PS.AppLeft + PS.WinLeft + PS.HComp + (PS.RngLeft - PS.Cell1Left) + PS.NudgeRight
PS.BaseTop = PS.AppTop + PS.WinTop + PS.VComp + (PS.RngTop - PS.Cell1Top) + PS.NudgeDown

Select Case HorizOrientation

    Case cstFhpNull
        PS.FrmLeft = 0

    Case cstFhpAuto
        OptimizeH PS

    Case cstFhpFormLeftCellLeft
        PS.FrmLeft = PS.BaseLeft + cLeftBump

    Case cstFhpFormLeftCellRight
        PS.FrmLeft = PS.BaseLeft + PS.RngWidth

    Case cstFhpFormLeftCellCenter
        PS.FrmLeft = PS.BaseLeft + (PS.RngWidth / 2)

    Case cstFhpFormRightCellLeft
        PS.FrmLeft = PS.BaseLeft - PS.FrmWidth

    Case cstFhpFormRightCellRight
        PS.FrmLeft = PS.BaseLeft + PS.RngWidth

    Case cstFhpFormRightCellCenter
        PS.FrmLeft = PS.BaseLeft + (PS.RngWidth / 2) - PS.FrmWidth

    Case cstFhpFormCenterCellLeft
        PS.FrmLeft = PS.BaseLeft - (PS.FrmWidth / 2)

    Case cstFhpFormCenterCellRight
        PS.FrmLeft = PS.BaseLeft + PS.RngWidth - (PS.FrmWidth / 2)

    Case cstFhpFormCenterCellCenter
        PS.FrmLeft = PS.BaseLeft + (PS.RngWidth / 2) - (PS.FrmWidth / 2)

    Case cstFhpAppCenter    ' same as Case Else
        PS.FrmLeft = PS.AppLeft + (PS.AppWidth / 2) - (PS.FrmWidth / 2)

    Case Else               ' same as Case cstFhpAppCenter
        PS.FrmLeft = PS.AppLeft + (PS.AppWidth / 2) - (PS.FrmWidth / 2)

End Select


Select Case VertOrientation

    Case cstFvpNull
        PS.FrmTop = 0

    Case cstFvpAuto
        OptimizeV PS

    Case cstFvpFormTopCellTop
        PS.FrmTop = PS.BaseTop

    Case cstFvpFormTopCellBottom
        PS.FrmTop = PS.BaseTop + PS.RngHeight

    Case cstFvpFormTopCellCenter
        PS.FrmTop = PS.BaseTop + (PS.RngHeight / 2)

    Case cstFvpFormBottomCellTop
        PS.FrmTop = PS.BaseTop - PS.FrmHeight

    Case cstFvpFormBottomCellBottom
        PS.FrmTop = PS.BaseTop + PS.RngHeight - PS.FrmHeight

    Case cstFvpFormBottomCellCenter
        PS.FrmTop = PS.BaseTop - PS.FrmHeight + (PS.RngHeight / 2)

    Case cstFvpFormCenterCellTop
        PS.FrmTop = PS.BaseTop - (PS.FrmHeight / 2)

    Case cstFvpFormCenterCellBottom
        PS.FrmTop = PS.BaseTop + PS.RngHeight - (PS.FrmHeight / 2)

    Case cstFvpFormCenterCellCenter
        PS.FrmTop = PS.BaseTop + (PS.RngHeight / 2) - (PS.FrmHeight / 2)

    Case cstFvpAppCenter    ' same as case else
        PS.FrmTop = PS.AppTop + (PS.AppHeight / 2) - (PS.FrmHeight / 2)

    Case Else               ' same as cstFvpAppCenter
        PS.FrmTop = PS.AppTop + (PS.AppHeight / 2) - (PS.FrmHeight / 2)

End Select

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Finally, after all that, Move the form to the proper Left and Top
' coordinates.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
WhatForm.Move PS.FrmLeft, PS.FrmTop
PositionForm = PS

End Function

Private Sub OptimizeH(P As Positions)
''''''''''''''''''''''''''''''''''''''''''''''''''''''
' This procedure optimizes the horizontal position
' of the form.  It MUST define SOME (even arbirary)
' horizontal position.  First, we try to fit the
' form to the right of the cell. If this is unsuccessful,
' we try to fit the form on the left side of the cell.
' If this is unsuccessful, we try to fit the form centered
' to the cell.  If this proves unsuccessful, we
' are stuck with centering the form within the
' application.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim WinRight As Single
Dim WinLeft As Single

WinLeft = P.Cell1Left
WinRight = P.LastCellLeft + P.LastCellWidth

' The default horizontal position of the form is aligned on the
' right size of the range.

If P.RngLeft + P.RngWidth + P.FrmWidth < WinRight Then
    P.FrmLeft = P.BaseLeft + P.RngWidth + cLeftBump
    P.OrientationH = cstFhpFormLeftCellRight
    Exit Sub
End If

' If we can't fit it on the right, try the left
'
If P.RngLeft - P.FrmWidth > WinLeft Then
    P.FrmLeft = P.BaseLeft - P.FrmWidth
    P.OrientationH = cstFhpFormRightCellLeft
    Exit Sub
End If

' If we can't fit it on the left, try the center
'
If (P.RngLeft + (P.RngWidth / 2) + (P.FrmWidth / 2) <= WinRight) And _
    (P.RngLeft + (P.RngWidth / 2) - (P.FrmWidth / 2) >= WinLeft) Then
        P.FrmLeft = P.BaseLeft + (P.RngWidth / 2) - (P.FrmWidth / 2)
        P.OrientationH = cstFhpFormCenterCellCenter
        Exit Sub
End If

' If it won't fit on the in the center, we have to go with AppCenter.
'
P.FrmLeft = P.AppLeft + (P.AppWidth / 2) - (P.FrmWidth / 2)
P.OrientationH = cstFhpAppCenter

End Sub

Private Sub OptimizeV(P As Positions)
''''''''''''''''''''''''''''''''''''''''''''''''''''''
' This procedure optimizes the horizontal position
' of the form.  It MUST define SOME (even arbirary)
' horizontal position.
''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim WinTop As Single
Dim WinBottom As Single

WinBottom = P.LastCellTop + P.LastCellHeight
WinTop = P.Cell1Top

' The default position is top aligned. See if we have room
' below.
'
If P.RngTop + P.FrmHeight <= WinBottom Then
    P.FrmTop = P.BaseTop
    P.OrientationV = cstFvpFormTopCellTop
    Exit Sub
End If

' If there is no room below, See if we have room above.
'
If P.RngTop - P.FrmHeight >= WinTop Then
    P.FrmTop = P.BaseTop - P.FrmHeight
    P.OrientationV = cstFvpFormTopCellTop
    Exit Sub
End If

' If there is no room above, try the center
'
If (P.RngTop + (P.RngHeight / 2) - (P.FrmHeight / 2) >= WinTop) And _
    (P.RngTop + (P.RngHeight / 2) + (P.FrmHeight / 2) <= WinBottom) Then
    P.FrmTop = P.BaseTop + P.RngTop + (P.RngHeight / 2)
    P.OrientationV = cstFvpFormCenterCellCenter
    Exit Sub
End If

' If we can't put it anywhere else, we have to go with AppCenter
'
P.FrmTop = P.AppTop + (P.AppHeight / 2) - (P.FrmHeight / 2)
P.OrientationV = cstFvpAppCenter

End Sub

'
'Public Sub Beispiel1()
'    Dim objSpeaker As Object
'    Dim intIndex As Integer
'
'    Set objSpeaker = CreateObject("SAPI.SpVoice")
'
'    For intIndex = 50 To 100 Step 2
'        objSpeaker.Volume = intIndex
'        objSpeaker.Speak "Lock your computer u schall!"
'    Next
'
'    Set objSpeaker = Nothing
'End Sub
Attribute VB_Name = "nlc_excel"
Option Private Module

Dim nlc_pw As String


Public Sub blatt_exportieren(vbaname As Worksheet)
    Dim fehler As String
    
    On Error GoTo ende
    
    nlc_pw = nlc_intern.get_pw
    nlc_phb_xs.Unprotect nlc_pw
    nlc_intern.application_off
                
    fehler = seperate_worksheet(vbaname.name, vbaname)

ende:
    On Error Resume Next
    nlc_intern.application_on
    nlc_phb_xs.Protect nlc_pw
    
    ThisWorkbook.Activate
    vbaname.Activate
    
    If fehler <> "" Then
        Windows(fehler).Activate
        Sheets(1).Activate
    End If
    
End Sub

Function seperate_worksheet(tabname As String, vbaname As Worksheet) As String  'Worksheets separieren
'Aktion vorbereiten

    Dim activename As String
    Dim activesheetname As String
    Dim anzahl, i As Integer

    On Error GoTo ende
    nlc_pw = nlc_intern.get_pw
    
    Call nlc_intern.nlc_unprotect(vbaname)
    
    activename = ActiveWorkbook.name
    activesheetname = vbaname.name
    table1 = ""
    
    Workbooks.Add
    neuname = ActiveWorkbook.name
    table1 = Sheets(1).name
    wb_added = True
    If ActiveWorkbook.Sheets.count > 2 Then
        For i = ActiveWorkbook.Sheets.count To 2 Step -1
            Sheets(i).Delete
        Next i
    End If
'Farben |fffd|bergeben
    Workbooks(neuname).colors = Workbooks(activename).colors
    Workbooks(neuname).colors(17) = RGB(255, 255, 255)
    
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeLight2) = RGB(195, 183, 155)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeDark2) = RGB(58, 87, 104) 'Workbooks(main_wb).Theme.ThemeColorScheme(msoThemeAccent1)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeAccent1) = RGB(79, 129, 189)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeAccent2) = RGB(192, 80, 77)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeAccent3) = RGB(106, 113, 38)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeAccent4) = RGB(128, 100, 162)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeAccent5) = RGB(101, 170, 188)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeAccent6) = RGB(149, 106, 75)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeHyperlink) = RGB(211, 112, 25)
    Workbooks(neuname).Theme.ThemeColorScheme.colors(msoThemeFollowedHyperlink) = RGB(142, 26, 125)
    
    Windows(activename).Activate
'Alte kopieren
    vbaname.Copy Before:=Workbooks(neuname).Sheets(1)
    Windows(neuname).Activate

    Sheets(1).Cells.Select
    If tabname <> "" Then Sheets(1).name = tabname
        
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

'|fffd|berz|fffd|hlige Buttons l|fffd|schen
    anzahl = ActiveSheet.Shapes.count
    For i = anzahl To 1 Step -1
        If ActiveSheet.Shapes(i).Type = 12 Or (ActiveSheet.Shapes(i).Type = msoAutoShape And ActiveSheet.Shapes(i).AutoShapeType = msoShapeRoundedRectangle) Then ActiveSheet.Shapes(i).Delete
    Next i
    If table1 <> "" Then Sheets(table1).Delete

    Windows(activename).Activate
    vbaname.Select
    Call nlc_intern.nlc_protect(vbaname)
   
    Windows(neuname).Activate
    Call bRemoveAllCode(neuname)
    ActiveSheet.Range("A1").Select
    seperate_worksheet = neuname
    Exit Function
    
ende:
    Err.Clear
    seperate_worksheet = neuname
    Windows(activename).Activate
    vbaname.Select
    nlc_intern.nlc_protect (vbaname)

End Function


Sub bRemoveAllCode(ByVal szBook As String)

    On Error GoTo ende

    Const lModule As Long = 1
    Const lOther As Long = 100

    Dim lCount As Long
    Dim objCode As Object
    Dim objComponents As Object
    Dim wkbBook As Workbook

    Set wkbBook = Workbooks(szBook)
    Set objComponents = wkbBook.VBProject.VBComponents
    lCount = wkbBook.VBProject.VBComponents.count

    '''Remove all modules & code
    For Each objCode In objComponents
        If objCode.Type = lModule Then
            objComponents.Remove objCode
        ElseIf objCode.Type = lOther Then
            objCode.CodeModule.DeleteLines 1, objCode.CodeModule.CountOfLines
        End If
    Next objCode

    Exit Sub
ende:
    Err.Clear

End Sub

Attribute VB_Name = "nlc_functions"
Option Explicit



Public Function nlc_search_tabname2(sprache, blatt_vba As String) As String

    Dim i As Integer
    Dim objBl As Object
    
    nlc_search_tabname2 = ""
    For Each objBl In ThisWorkbook.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_tabname2 = objBl.name
            Exit Function
        End If
    Next objBl

End Function

Public Function nlc_Language(Language As String, Term As String) As String
    
    Dim c
    Dim zeile As Integer
    Dim endzeile As Integer
    
    endzeile = nlc_phb_TL.UsedRange.Rows.count
    With nlc_phb_TL.Range("b4:b" & endzeile)
        Set c = .Find(Term, LookIn:=xlValues, lookat:=xlWhole)
        If Not c Is Nothing Then
            nlc_Language = nlc_phb_TL.Cells(c.Row, 5).Value
        Else
            nlc_Language = "<not found>"
        End If
    End With
    
End Function


Public Sub showUnlock()
    Call nlc_00.Sperren_Click
End Sub

Public Sub ShowBuildNr()
    MsgBox ("Interne build-Nr: " & nlc_phb_PW.Range("C7").Value & "." & nlc_phb_PW.Range("C8").Value & vbCrLf & "Externe build-Nr: " & nlc_phb_PW.Range("C9").Value & vbCrLf & "Letze importierte DB-Nr: " & nlc_phb_PW.Range("C13").Value)
End Sub

Public Sub ShowDemo()
    MsgBox ("PHBArt: " & phb_art & vbCrLf & "Useradmin: " & useradmin & vbCrLf & "Demodatum: " & demoversion & vbCrLf)
End Sub



Public Function nlc_LanguageByLang(Language As String, Term As String) As String
    
    Dim c
    Dim zeile As Integer
    Dim endzeile As Integer
    Dim counter As Integer
    
    For counter = 6 To 16 Step 1
        If nlc_phb_TL.Cells(3, counter).Value = Language Then
            Exit For
        End If
    Next counter
    
    
    endzeile = nlc_phb_TL.UsedRange.Rows.count
    With nlc_phb_TL.Range("b4:b" & endzeile)
        Set c = .Find(Term, LookIn:=xlValues, lookat:=xlWhole)
        If Not c Is Nothing Then
            nlc_LanguageByLang = nlc_phb_TL.Cells(c.Row, counter).Value
        Else
            nlc_LanguageByLang = ""
        End If
    End With
    
End Function

Public Function nlc_zeilenhoehe(Bereich As Range) As Double
    nlc_zeilenhoehe = ActiveSheet.Rows(Bereich.Row).RowHeight
End Function

Public Function nlc_colors_white(Bereich As Range) As Boolean
    If ActiveWorkbook.colors(17) = RGB(255, 255, 255) Then
        nlc_colors_white = True
    Else
        nlc_colors_white = False
    End If
End Function

Public Function nlc_Replace(Wert As String) As String
    If VBA.InStr(1, Wert, ",") > 0 Then
        nlc_Replace = VBA.Replace(Wert, ",", ".")
    Else
        nlc_Replace = Wert
    End If
End Function

Public Function nlc_maxKomma(Wert As String, Kommastellen As Integer) As String
    If VBA.Len(VBA.Mid(Wert, VBA.InStr(1, Wert, ",") + 1, VBA.Len(Wert))) > Kommastellen Then
        nlc_maxKomma = VBA.Round(VBA.CDbl(Wert), Kommastellen)
    Else
        nlc_maxKomma = Wert
    End If
End Function

Public Function nlc_task(Bezug As Variant)
    If Bezug <> "" Then
        nlc_task = Bezug
    Else
        nlc_task = ""
    End If
End Function

Public Function nlc_task2(Bezug As Variant)
    If Bezug = "" Or Bezug = "-" Then
        nlc_task2 = ""
    Else
        nlc_task2 = Bezug
    End If
End Function

Public Function nlc_cross(Bezug As String)
    If Bezug = "" Or Bezug = "-" Then
        nlc_cross = ""
    Else
        nlc_cross = "x"
    End If
End Function

Public Function nlc_point(Bezug As String) As String
    If Bezug <> Empty Then
        nlc_point = " -"
    Else
        nlc_point = Empty
    End If
End Function

Public Function nlc_psp(Projektcode As String)
    If Projektcode <> "" Then
        nlc_psp = Projektcode & "."
    Else
        nlc_psp = ""
    End If
End Function

Public Function nlc_time(AktStart As Variant, AktEnde As Variant, PlanStart As Variant, PlanEnde As Variant, skalastart As Variant, skalaende As Variant) As String
    ' Parameter setzen
    nlc_time = "0"
    
    If PlanStart = Empty Or PlanEnde = Empty Then
        PlanStart = #1/12/1999#
        PlanEnde = #1/12/1999#
    End If
    If AktStart = Empty Or AktEnde = Empty Then
        AktStart = #1/12/1999#
        AktEnde = #1/12/1999#
    End If
    
    
    If AktStart <= skalaende And AktEnde >= skalastart Then
        If PlanStart <= skalaende And PlanEnde >= skalastart Then
            nlc_time = "1"
        Else
            nlc_time = "2"
        End If
    Else
        If PlanStart <= skalaende And PlanEnde >= skalastart Then
            nlc_time = "3"
        End If
    End If
        
End Function

Public Function nlc_month(Datum As Date) As Variant
    ' Parameter setzen
    Dim MONTAG As Date
    Dim SONNTAG As Date
    Dim monat As Date
    monat = Empty
    
    If Datum <> Empty Then
        MONTAG = (Datum - VBA.Weekday(Datum, vbMonday) + 1)
        SONNTAG = (Datum - VBA.Weekday(Datum, vbMonday) + 7)
        If VBA.Day(MONTAG) = 1 Or VBA.Month(MONTAG) <> VBA.Month(SONNTAG) Then monat = SONNTAG
    End If
    If monat = Empty Then
        nlc_month = ""
    Else
        nlc_month = monat
        'Format(Monat, "MMM YY") funktioniert nur in 2003
    End If
    
End Function

Public Function nlc_month2(Datum As Date) As String
    ' Parameter setzen
    Dim MONTAG As Date
    Dim SONNTAG As Date
    Dim monat As Date
    monat = Empty
    
    If Datum <> Empty Then
        MONTAG = (Datum - VBA.Weekday(Datum, vbMonday) + 1)
        SONNTAG = (Datum - VBA.Weekday(Datum, vbMonday) + 7)
        If VBA.Day(MONTAG) = 1 Or VBA.Month(MONTAG) <> VBA.Month(SONNTAG) Then monat = SONNTAG
    End If
    If monat = Empty Then
        nlc_month2 = ""
    Else
        nlc_month2 = VBA.Format(monat, "MMM YY")
    End If
    
End Function

Public Function nlc_month3(Datum As Date) As String
       
    If Datum <> Empty Then
        nlc_month3 = VBA.Format(Datum, "MMM YY")
    Else
        nlc_month3 = ""
    End If
    
End Function

Public Function nlc_year(Datum As Date) As Variant

    If VBA.Month(VBA.Date) = 1 Then
        nlc_year = VBA.Year(VBA.Date)
    Else
        nlc_year = ""
    End If
    
End Function

Public Function nlc_KW(Datum As Date)

    Dim start As Date
    Dim StartWT As Date
    Dim Aktuell As Date
    Dim StartKW As Date
    Dim AktuellKW As Single
    Dim DZ As Integer
    Dim MZ As Integer
    Dim DT As String
    Dim MT As String
    
    If Datum = 0 Then
        nlc_KW = "xx/xx -" & VBA.Chr(10) & nlc_Language(Sheets("Language").Range("E3").Value, "W") & "xx"
    Else
        start = VBA.DateSerial(VBA.Year(Datum), 1, 1)
        StartWT = VBA.Weekday(start, vbMonday)
        Aktuell = VBA.DateSerial(VBA.Year(Datum), VBA.Month(Datum), VBA.Day(Datum))
        StartKW = start - VBA.Weekday(start, vbMonday) + 1 + 7
        If StartWT = 1 Or StartWT = 2 Or StartWT = 3 Or StartWT = 4 Then StartKW = StartKW - 7
        AktuellKW = ((Aktuell - VBA.Weekday(Aktuell, vbMonday) + 1) - StartKW) / 7 + 1
        DZ = VBA.Day(Datum)
        MZ = VBA.Month(Datum)
        If DZ < 10 Then
            DT = "0" & DZ
        Else
            DT = DZ
        End If
        If MZ < 10 Then
            MT = "0" & MZ
        Else
            MT = MZ
        End If
        
        nlc_KW = DT & "/" & MT & " - " & VBA.Chr(10) & nlc_Language(Sheets("Language").Range("E3").Value, "W") & AktuellKW
    End If

End Function

Public Function nlc_KW1(Datum As Date)

    Dim start As Date
    Dim StartWT As Date
    Dim Aktuell As Date
    Dim StartKW As Date
    Dim AktuellKW As Single
'    Dim DZ As Integer
'    Dim MZ As Integer
'    Dim DT As String
'    Dim MT As String
    
    If Datum = 0 Then
        nlc_KW1 = nlc_Language(Sheets("Language").Range("E3").Value, "W") & "xx"
    Else
        start = VBA.DateSerial(VBA.Year(Datum), 1, 1)
        StartWT = VBA.Weekday(start, vbMonday)
        Aktuell = VBA.DateSerial(VBA.Year(Datum), VBA.Month(Datum), VBA.Day(Datum))
        StartKW = start - VBA.Weekday(start, vbMonday) + 1 + 7
        If StartWT = 1 Or StartWT = 2 Or StartWT = 3 Or StartWT = 4 Then StartKW = StartKW - 7
        AktuellKW = ((Aktuell - VBA.Weekday(Aktuell, vbMonday) + 1) - StartKW) / 7 + 1
        
        nlc_KW1 = nlc_Language(Sheets("Language").Range("E3").Value, "W") & " " & AktuellKW
    End If

End Function

Public Function nlc_KW2(Datum As Date) As String

    ' Parameter setzen
    Dim start As Date
    Dim StartWT As Date
    Dim Aktuell As Date
    Dim StartKW As Date
    Dim AktuellKW As Single
    Dim KWZ As Single
    Dim KWT As String
    
    If Datum = 0 Then
        If Sheets("Language").Range("E3").Value = "english" Then
            nlc_KW2 = "Wxx"
        Else
            nlc_KW2 = "KWxx"
        End If
    Else
        start = VBA.DateSerial(VBA.Year(Datum), 1, 1)
        StartWT = VBA.Weekday(start, vbMonday)
        Aktuell = VBA.DateSerial(VBA.Year(Datum), VBA.Month(Datum), VBA.Day(Datum))
        StartKW = start - VBA.Weekday(start, vbMonday) + 1 + 7
        If StartWT = 1 Or StartWT = 2 Or StartWT = 3 Or StartWT = 4 Then StartKW = StartKW - 7
        KWZ = ((Aktuell - VBA.Weekday(Aktuell, vbMonday) + 1) - StartKW) / 7 + 1
        If KWZ < 10 Then
            KWT = "0" & KWZ
        Else
            KWT = KWZ
        End If
        
        If Sheets("Language").Range("E3").Value = "english" Then
            nlc_KW2 = "W" & KWT
        Else
            nlc_KW2 = "KW" & KWT
        End If
    End If
        
End Function

Public Function nlc_KW3(Datum As Date) As String
    ' Parameter setzen
    Dim start As Date
    Dim StartWT As Date
    Dim Aktuell As Date
    Dim StartKW As Date
    Dim AktuellKW As Single
    Dim KWZ As Single
    Dim KWT As String
    
    If Datum = 0 Then
        If Sheets("Language").Range("E3").Value = "english" Then
            nlc_KW3 = "Wxx"
        Else
            nlc_KW3 = "KWxx"
        End If
    Else
        If Weekday(Datum) = 2 Then
        
            start = VBA.DateSerial(VBA.Year(Datum), 1, 1)
            StartWT = VBA.Weekday(start, vbMonday)
            Aktuell = VBA.DateSerial(VBA.Year(Datum), VBA.Month(Datum), VBA.Day(Datum))
            StartKW = start - VBA.Weekday(start, vbMonday) + 1 + 7
            If StartWT = 1 Or StartWT = 2 Or StartWT = 3 Or StartWT = 4 Then StartKW = StartKW - 7
            KWZ = ((Aktuell - VBA.Weekday(Aktuell, vbMonday) + 1) - StartKW) / 7 + 1
            If KWZ < 10 Then
                KWT = "0" & KWZ
            Else
                KWT = KWZ
            End If
            
            If Sheets("Language").Range("E3").Value = "english" Then
                nlc_KW3 = "W" & KWT
            Else
                nlc_KW3 = "KW" & KWT
            End If
        
        Else
            nlc_KW3 = ""
        End If
         
     End If
        
End Function

Public Function nlc_weekbefore(Datum As Date) As Date
    ' Parameter setzen
    Dim Aktuell As Date
    
    If Datum = Empty Then
        nlc_weekbefore = #1/1/2000#
    Else
        Aktuell = Datum
        nlc_weekbefore = (Aktuell - VBA.Weekday(Aktuell, vbMonday) + 1) - 7
    End If
    
End Function
    
Public Function nlc_phase(Fortschritt As Double) As String
    If Fortschritt < 0.25 Then
        nlc_phase = "0%"
    ElseIf Fortschritt < 0.5 Then
        nlc_phase = "25%"
    ElseIf Fortschritt < 0.75 Then
        nlc_phase = "50%"
    ElseIf Fortschritt < 1 Then
        nlc_phase = "75%"
    ElseIf Fortschritt = 1 Then
        nlc_phase = "100%"
    Else
        nlc_phase = ""
    End If
    
End Function

Public Function nlc_lfs(Ebene As Range, name As Range, Fortschritt As Range)
    ' Parameter setzen
    Dim level As Integer
    Dim anz As Integer
    Dim AP_Anz As Integer
    Dim AP_FS As Double
    anz = name.Cells.count
    AP_Anz = 0
    AP_FS = 0
    
    For level = 1 To anz
        If name.Item(level).Value <> "" And Ebene.Item(level).Value = "3" Then
            AP_Anz = AP_Anz + 1
            AP_FS = AP_FS + Fortschritt.Item(level).Value
        End If
    Next level
    
    If AP_Anz = 0 Then
        nlc_lfs = 0
    Else
        nlc_lfs = AP_FS / AP_Anz
    End If
    
End Function

Public Function nlc_apanz(Ebene As Range, name As Range)
    ' Parameter setzen
    Dim level As Integer
    Dim anz As Integer
    Dim AP_Anz As Integer
    anz = name.Cells.count
    AP_Anz = 0
    
    For level = 1 To anz
        If name.Item(level).Value <> "" And Ebene.Item(level).Value = "AP" Then AP_Anz = AP_Anz + 1
    Next level
    
    nlc_apanz = AP_Anz
    
End Function

Public Function nlc_resp(Rollen As Range, Funktion As Range, Wert As String)
    ' Parameter setzen
    Dim level As Integer
    Dim anz As Integer
    Dim Verantwortlichkeit As String
    Dim hilf As String
    anz = Rollen.Cells.count
    Verantwortlichkeit = ""
    
    For level = 1 To anz
        If VBA.LCase(Funktion.Item(level).Value) = VBA.LCase(Wert) Then
            If VBA.Right(Rollen.Item(level).Value, 1) = "|fffd|" Or VBA.Right(Rollen.Item(level).Value, 1) = "|fffd|" Or VBA.Right(Rollen.Item(level).Value, 1) = "|fffd|" Then
                hilf = VBA.left(Rollen.Item(level).Value, VBA.Len(Rollen.Item(level).Value) - 1)
            Else
                hilf = Rollen.Item(level).Value
            End If
            If Verantwortlichkeit = "" Then
                Verantwortlichkeit = hilf
            Else
                Verantwortlichkeit = Verantwortlichkeit & ", " & hilf
            End If
        End If
    Next level
    
    nlc_resp = Verantwortlichkeit
    
End Function

Public Function nlc_date_txt(Datum As Date) As String
    nlc_date_txt = VBA.CStr(Datum)
End Function

Public Function nlc_listtrans(Liste1 As Range, Liste2 As Range, Wert As String) As String
    ' Parameter setzen
    Dim level As Integer
    Dim Anz1 As Integer
    Dim Anz2 As Integer
    Anz1 = Liste1.Cells.count
    Anz2 = Liste2.Cells.count
    
    If Anz1 <> Anz2 Or Anz1 = 0 Then
        nlc_listtrans = ""
    Else
        For level = 1 To Anz1
            If Wert = Liste1.Item(level).Value Then
                nlc_listtrans = Liste2.Item(level).Value
                level = Anz1
            End If
        Next level
    End If
End Function

Public Function nlc_iteminlist(Liste As Range, Suchwert As String, Setzwert As String) As String
    ' Parameter setzen
    Dim level As Integer
    Dim anz As Integer
    anz = Liste.Cells.count
    nlc_iteminlist = ""
    
    If Suchwert <> "" Then
        For level = 1 To anz
            If Suchwert = Liste.Item(level).Value Then
                nlc_iteminlist = Setzwert
                level = anz
            End If
        Next level
    End If
    
End Function

Public Function nlc_rescost(Ressourcenbereich As Range, Kostensatzbereich As Range, Kostenart As String, spalte As Integer)

    If Kostenart = "" Then
        nlc_rescost = 0
        Exit Function
    End If
    

    ' Parameter setzen
    Dim level As Integer
    Dim kost As Double
    Dim Satz As Double
    Dim SP As Integer
    
    For level = 1 To Res_Anz
        SP = (level * Res_Schritt) - Res_Schritt + spalte
        If Kostensatzbereich.Item(level, 12).Value = Kostenart Then
            Satz = Kostensatzbereich.Item(level, 13).Value
        Else
            Satz = 0
        End If
        kost = kost + Ressourcenbereich.Item(SP).Value * Satz
    Next level
    
    nlc_rescost = kost
    
End Function

Public Function nlc_rescost2(Ressourcenbereich As Range, Kostensatzbereich As Range, Kostenart As String, spalte As Integer)

    ' Parameter setzen
    Dim level As Integer
    Dim kost As Double
    Dim Satz As Double
    Dim SP As Integer

    If Kostenart = "" Then
        nlc_rescost2 = 0
        Exit Function
    End If
    
    For level = 1 To Res_Anz
        SP = (level * Res_Schritt) - Res_Schritt + spalte
        If Kostensatzbereich.Item(level, 12).Value = Kostenart Then
            Satz = 1
        Else
            Satz = 0
        End If
        kost = kost + Ressourcenbereich.Item(SP).Value * Satz
    Next level
    
    nlc_rescost2 = kost
    
End Function



Public Function nlc_resexp(Ressourcenbereich As Range, Skala As String, Quartalsmonat As Integer) As String

    ' Parameter setzen
    Dim level As Integer
    Dim X As String
    Dim anz As Integer
    Dim RW As Double
    Dim W As String
    Dim a As Integer
    Dim QS As Integer
    
    X = ""
    anz = Ressourcenbereich.Cells.count
    QS = Quartalsmonat
    RW = 0
    
    If Skala = "M" Or Skala = "Q" Then
        For level = 1 To anz
            RW = RW + Ressourcenbereich.Item(level).Value * 10
            RW = Excel.WorksheetFunction.Round(RW, 0)
            QS = QS + 1
            If QS > 3 Or level = anz Then
                QS = 1
                If RW > -1 Then
                    If RW < 10 Then
                        W = "000" & RW
                    ElseIf RW < 100 Then
                        W = "00" & RW
                    ElseIf RW < 1000 Then
                        W = "0" & RW
                    ElseIf RW < 10000 Then
                        W = RW
                    Else
                        W = "9999"
                    End If
                Else
                    W = "0000"
                End If
                If level < anz Then
                    X = X + W & "-"
                Else
                    X = X + W
                End If
                RW = 0
            End If
        Next level
    End If
    
    nlc_resexp = X
    
End Function

Public Function nlc_kostexp(Kostenbereich As Range) As String
    ' Parameter setzen
    Dim level As Integer
    Dim X As String
    Dim anz As Integer
    Dim RW As Double
    Dim W As String
    Dim a As Integer
    X = ""
    anz = Kostenbereich.Columns.count
          
    For level = 1 To anz
        RW = Kostenbereich.Item(level).Value
        RW = Excel.WorksheetFunction.Round(RW, 0)
        If RW > -1 Then
            If RW < 10 Then
                W = "00000000" & RW
            ElseIf RW < 100 Then
                W = "0000000" & RW
            ElseIf RW < 1000 Then
                W = "000000" & RW
            ElseIf RW < 10000 Then
                W = "00000" & RW
            ElseIf RW < 100000 Then
                W = "0000" & RW
            ElseIf RW < 1000000 Then
                W = "000" & RW
            ElseIf RW < 10000000 Then
                W = "00" & RW
            ElseIf RW < 100000000 Then
                W = "0" & RW
            ElseIf RW < 1000000000 Then
                W = RW
            Else
                W = "999999999"
            End If
        Else
            W = "000000000"
        End If
        If level < anz Then
            X = X + W & "-"
        Else
            X = X + W
        End If
    Next level
    
    nlc_kostexp = X
    
End Function

Public Function nlc_reslist(Selektionsbereich As Range, Ressourcenbereich As Range)

    ' Parameter setzen
    Dim level As Integer
    Dim X As String
    Dim Rs As String
    Dim RW As String
    Dim anz As Integer
    
    X = ""
    anz = Selektionsbereich.Rows.count
          
    For level = 1 To anz
        Rs = Selektionsbereich.Item(level).Value
        RW = Ressourcenbereich.Item(level).Value
        If Rs = "x" Then
            If X = "" Then
                X = X & RW
            Else
                X = X & ", " & RW
            End If
        End If
    Next level
    
    nlc_reslist = X
    
End Function

Public Function nlc_QM(Datum As Date)

    ' Parameter setzen
    Dim monat As Integer
    Dim X As Integer
    
    If VBA.IsDate(Datum) Then
        monat = VBA.Month(Datum)
        If monat = 1 Or monat = 4 Or monat = 7 Or monat = 10 Then
            X = 1
        ElseIf monat = 2 Or monat = 5 Or monat = 8 Or monat = 11 Then
            X = 2
        ElseIf monat = 3 Or monat = 6 Or monat = 9 Or monat = 12 Then
            X = 2
        Else
            X = 0
        End If
    Else
        X = 0
    End If
    
    nlc_QM = X
    
End Function

Public Function nlc_Quartal(Datum As Date)
    
    ' Parameter setzen
    Dim monat As Integer
    
    If VBA.IsDate(Datum) Then
        monat = VBA.Month(Datum)
        If monat = 1 Or monat = 2 Or monat = 3 Then
            nlc_Quartal = 1
        ElseIf monat = 4 Or monat = 5 Or monat = 6 Then
            nlc_Quartal = 2
        ElseIf monat = 7 Or monat = 8 Or monat = 9 Then
            nlc_Quartal = 3
        Else
            nlc_Quartal = 4
        End If
    Else
        nlc_Quartal = 0
    End If
    
End Function

Public Function nlc_resfarb(Zust|fffd|ndigkeitsbereich As Range, Ressourcenbereich As Range, Ressourcenart As String) As String
    ' Parameter setzen
    Dim level As Integer
    Dim anz As Integer
    Dim Verantw As String
    Dim Mitarb As String
    Dim X As String
    anz = Zust|fffd|ndigkeitsbereich.Cells.count
    Verantw = nlc_Language(nlc_phb_TL.Range("E3").Value, "R")
    Mitarb = nlc_Language(nlc_phb_TL.Range("E3").Value, "C")
    X = ""
    
    For level = 1 To anz
        If Zust|fffd|ndigkeitsbereich.Item(level).Value = Verantw Or Zust|fffd|ndigkeitsbereich.Item(level).Value = Mitarb Then
            If Ressourcenbereich.Item(level).Value = Ressourcenart And Ressourcenart <> "" Then
                X = "x"
                level = anz
            End If
        End If
    Next level
    
    nlc_resfarb = X
    
End Function

Public Function nlc_impexp(Bezug As Range)
    nlc_impexp = Bezug.Formula
End Function

Public Function PHB_D(startdate As Date, Duration As Integer) As Date
    Dim Richtung As Single
    Dim EndDate As Date
    Dim start As Single
    Dim level As Integer
    Dim SD As Integer
    
    On Error GoTo ErrorHandler
      
    If startdate = 0 Then GoTo ErrorHandler
    EndDate = startdate 'Z|fffd|hler auf StartDatum setzen
    If Duration < -2 Or Duration > 2 Then 'Nur bei negativer oder positiver Dauer gr|fffd||fffd|er als 1 Berechnung erforderlich
        If Duration > 1 Then 'Parameter f|fffd|r Verz|fffd|gerung setzen
            Richtung = 1
            start = 1
        Else
            Richtung = -1
            start = -1
        End If
        SD = Duration - Richtung 'Standarddauer um einen Tag reduzieren (immer morgens bis abends)
        For level = start To SD Step Richtung
            EndDate = EndDate + Richtung
            If VBA.Weekday(EndDate, vbMonday) = 6 Or VBA.Weekday(EndDate, vbMonday) = 7 Then '|fffd|berpr|fffd|fen ob SA od SO (MO = 1)
                level = level - Richtung 'Wochenende bei Schleife nicht mitz|fffd|hlen
            End If
        Next level
    End If
    
    PHB_D = VBA.FormatDateTime(EndDate, vbShortDate)
    
    Exit Function
    
ErrorHandler:
    PHB_D = #1/1/2001#
        
End Function

Public Function PHB_RS(BaseDate As Date, Lag As Integer, Relationship As String) As Date
    Dim Richtung As Single
    Dim EndDate As Date
    Dim start As Single
    Dim level As Integer
    Dim SL As Integer
    Dim AL As Integer
    
    On Error GoTo ErrorHandler
      
    If BaseDate = 0 Then GoTo ErrorHandler
    SL = Lag 'Standardverz|fffd|gerung entspricht Lag
    If Relationship = "SS" Or Relationship = "FF" Then
        AL = 0 'Keine Verl|fffd|ngerung bei Anfangs- oder End-Folge
    Else
        AL = 1 'Automatische Verl|fffd|ngerung um einen Tag bei Normal- oder Sprung-Folge
    End If
    EndDate = BaseDate 'Z|fffd|hler auf BasisDatum setzen
    If SL <> 0 Or AL = 1 Then 'Nur bei Lag Berechnung erforderlich
        If SL < 0 Or Relationship = "SF" Then 'Parameter f|fffd|r Verz|fffd|gerung setzen
            Richtung = -1
            start = -1
            SL = SL - AL
        Else
            Richtung = 1
            start = 1
            SL = SL + AL
        End If
        For level = start To SL Step Richtung
            EndDate = EndDate + Richtung
            If VBA.Weekday(EndDate, vbMonday) = 6 Or VBA.Weekday(EndDate, vbMonday) = 7 Then '|fffd|berpr|fffd|fen ob SA od SO (MO = 1)
                level = level - Richtung 'Wochenende bei Schleife nicht mitz|fffd|hlen
            End If
        Next level
    End If
    
    PHB_RS = VBA.FormatDateTime(EndDate, vbShortDate)
    
    Exit Function
    
ErrorHandler:
    PHB_RS = #1/1/2001#
    
End Function

Public Function nlc_txt(Bezug As Range) As String
    Dim anz, level As Integer
    anz = Bezug.Cells.count
    nlc_txt = ""
    
    For level = 1 To anz
        If Bezug.Item(level).Value <> "" Then
            If nlc_txt = "" Then
                nlc_txt = Bezug.Item(level).Value
            Else
                nlc_txt = nlc_txt & VBA.Chr(10) & Bezug.Item(level).Value
            End If
        End If
    Next level
    
End Function

Public Function nlc_gantt_tag(Datum As Date) As String

    nlc_gantt_tag = VBA.Format(Datum, "DD.MM.YY")
End Function

Public Function nlc_gantt_monat(Datum As Date) As String

    nlc_gantt_monat = VBA.Format(Datum, "MMMM")
End Function

Public Function nlc_gantt_quartal(Datum As Date) As String

    MsgBox (VBA.Format(Datum, "dd.MM. YY", , vbFirstFourDays))
End Function

Public Function nlc_blattname(Bezugszelle As Range) As String

    Dim start, Laenge, Leerz As Integer
    Dim Formelwert, Suchtext1, Suchtext2 As String
    
    Formelwert = Bezugszelle.Formula
    Suchtext1 = "!"
    Suchtext2 = "'"
    Leerz = VBA.InStr(1, Formelwert, Suchtext2)
    If Leerz = 0 Then
        start = 2
    Else
        start = 3
    End If
    Laenge = InStr(start, Formelwert, Suchtext1) - start + 1
    If Leerz > 0 Then Laenge = Laenge - 1
    nlc_blattname = VBA.Mid(Formelwert, start, Laenge - 1)
    
End Function



'Ressourcen Export Blatt Calc-RK
Public Function nlc_RKExport(Arbeitsblatt As String, startspalte As Integer, endspalte As Integer, zeile As Integer, Starttermin As Date, Skalatyp As String, Stellanzahl As Integer, Kommastellen As Integer)

    Dim level As Integer
    Dim monat As Integer
    Dim jahr As Integer
    Dim output As String
    Dim summe As Double
    Dim quatal As Integer
    Dim Aktuell As Boolean
    
    monat = VBA.Format(Starttermin, "mm")
    jahr = VBA.Format(Starttermin, "yyyy")
    
    If Skalatyp = "M" Or Skalatyp = "m" Then                          'Monatsskala
        For level = startspalte To endspalte Step 1
            If output = "" Then
                output = output & CleanBlank(VBA.Round(Application.Worksheets(Arbeitsblatt).Cells(zeile, level).Value, Kommastellen) * (10 ^ Kommastellen), Stellanzahl)
            Else
                output = output & "-" & CleanBlank(VBA.Round(Application.Worksheets(Arbeitsblatt).Cells(zeile, level).Value, Kommastellen) * (10 ^ Kommastellen), Stellanzahl)
            End If
        Next level
    ElseIf Skalatyp = "Q" Or Skalatyp = "q" Then                      'Quatalsskala
        For level = startspalte To endspalte Step 1
            If monat <> 3 And monat <> 6 And monat <> 9 And monat <> 12 Then
                summe = summe + Application.Worksheets(Arbeitsblatt).Cells(zeile, level).Value
            ElseIf monat = 3 Or monat = 6 Or monat = 9 Or monat = 12 Then
                summe = summe + Application.Worksheets(Arbeitsblatt).Cells(zeile, level).Value
                If output = "" Then
                    output = output & CleanBlank(VBA.Round(summe, Kommastellen) * (10 ^ Kommastellen), Stellanzahl)
                Else
                    output = output & "-" & CleanBlank(VBA.Round(summe, Kommastellen) * (10 ^ Kommastellen), Stellanzahl)
                End If
            End If
        
            If monat = 3 Or monat = 6 Or monat = 9 Then
                monat = monat + 1
                summe = 0
            ElseIf monat = 12 Then
                monat = 1
                summe = 0
            Else
                monat = monat + 1
            End If
        Next level
    ElseIf Skalatyp = "J" Or Skalatyp = "j" Then                      'Jahresskala
        For level = startspalte To endspalte Step 1
            If monat < 12 Then
                summe = summe + Application.Worksheets(Arbeitsblatt).Cells(zeile, level).Value
            ElseIf monat = 12 Then
                summe = summe + Application.Worksheets(Arbeitsblatt).Cells(zeile, level).Value
                If output = "" Then
                    output = output & CleanBlank(VBA.Round(summe, Kommastellen) * (10 ^ Kommastellen), Stellanzahl)
                Else
                    output = output & "-" & CleanBlank(VBA.Round(summe, Kommastellen) * (10 ^ Kommastellen), Stellanzahl)
                End If
            End If
        
            If monat = 12 Then
                jahr = jahr + 1
                monat = 1
                summe = 0
            Else
                monat = monat + 1
            End If
        Next level
    End If
    
    nlc_RKExport = output

End Function

Public Function get_demo(d As Range) As Date
    get_demo = nlc_konstanten.demoversion
End Function





Attribute VB_Name = "nlc_intern"
Option Explicit
Option Private Module
Dim nlc_pw As String

Public Function sprache_suchen() 'durchsucht alle Vokabeln der Sprachtabelle in allen Bl|fffd|ttern
    Dim i As Integer
    Dim a As Variant
    Dim b As Workbook
    Set b = ActiveWorkbook
    Dim c As Range
    Dim swert As String
    Dim firstAddress

    Dim counter As Integer

    Sperren_Variable = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    On Error GoTo ende
    

    i = 4
    While (nlc_phb_TL.Cells(i, 2).Value <> "")
    swert = nlc_phb_TL.Cells(i, 2).Value
        'For Each a In b.Sheets
        For a = 4 To 19
            With Sheets(nlc_phb_TL2.Cells(a, 3).Value)
        'If (a.name <> "Language" And a.name <> "Language-Sheets" And a.name <> "Language-Buttons" And a.name <> "Language-Msgs" And a.name <> "Language-UserForms") Then
            'Sheets(a.name).Select
            .Select
            'a.Unprotect nlc_intern.get_pw
            On Error Resume Next
            'With Sheets(a.name).Range("A1:IV65536")
            With .Range("A1:IV65536")
                Set c = .Find(VBA.Chr(34) & swert & VBA.Chr(34), LookIn:=xlFormulas, lookat:=xlPart)  'Set c = .Find(VBA.Chr(34) & swert & VBA.Chr(34), LookIn:=xlFormulas) '.Find("=nlc_Language(Language!$E$3;'" & swert & "')", LookIn:=xlFormulas)  '.Find(VBA.Chr(34) & swert & VBA.Chr(34), LookIn:=xlFormulas)
                If Not c Is Nothing Then
                    firstAddress = c.Address
                    Do
                        'c.Value = 5
                        Set c = .FindNext(c)
                        counter = counter + 1
                    Loop While Not c Is Nothing And c.Address <> firstAddress
                End If
            End With
            'a.Protect nlc_intern.get_pw
       ' End If
            End With
        Next a
        nlc_phb_TL.Cells(i, 1).Value = counter
        counter = 0
        i = i + 1
    Wend

ende:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Sperren_Variable = False
End Function



Private Sub farbe()
    With nlc_phb_PW
        Dim i As Integer
        Dim j As Integer
        For i = 32 To 38
            For j = 10 To 17
                .Cells(i, j).Interior.ColorIndex = .Cells(i, j).Value
            Next j
        Next i
    End With

End Sub

Public Sub open_kalender()

End Sub

Public Function get_pw() As String
    If nlc_phb_PW.Range("C3").Value = "" Then
        get_pw = ""
    Else
        get_pw = nlc_konstanten.pw_admin 'nlc_phb_PW.Range("c3").Value
    End If
End Function


Public Function get_isadmin() As Boolean
    If nlc_phb_PW.Range("C4").Value <> "YES" Then
        get_isadmin = True
    Else
        get_isadmin = False
    End If
End Function

Public Sub nlc_protect(Optional blatt_codename As Worksheet)  'adminmode: keiner= Standarduser, "standardadmin"=norm Admin (Masterdaten), "kundenadmin"=Admin mit Blattpasswort, "nlsadmin"=nlsadmin
    Call nlc_intern.blatt_lockunlock(blatt_codename, True)
End Sub

Public Sub nlc_unprotect(Optional blatt_codename As Worksheet) 'adminmode: keiner= Standarduser, "standardadmin"=norm Admin (Masterdaten), "kundenadmin"=Admin mit Blattpasswort, "nlsadmin"=nlsadmin
    Call nlc_intern.blatt_lockunlock(blatt_codename, False)
End Sub

Public Sub z_refresh_everything()
     
    On Error GoTo fehler

    nlc_intern.application_off
     
    Call nlc_intern.nlc_unprotect(nlc_phb_06)
    Call nlc_intern.nlc_unprotect(nlc_phb_02)
    
    'Aktion durchf|fffd|hren
    Call nlc_06.bedingteformatierung(Data_Startzeile, nlc_phb_06.Range("E7").Value)
    Call nlc_aps
    Call nlc_06.SV_Short
             
    Call nlc_06.LayoutSpalten
    nlc_phb_06.Calculate

     
weiter:

     'Call Logo_Positionieren(nlc_phb_06.Name, 4)
     Call nlc_02.zeileneinausblenden
     If nlc_phb_05.Visible = xlSheetVisible Then
         Application.StatusBar = WorksheetFunction.VLookup("calculatestakeholder", nlc_phb_TL.Range("B4:E65536"), 4, False)
         Call nlc_05.Refresh
     End If
     If nlc_phb_08.Visible = xlSheetVisible Then
         Application.StatusBar = WorksheetFunction.VLookup("calculatePsP", nlc_phb_TL.Range("B4:E65536"), 4, False)
         Call nlc_08.Refresh
     End If
     If nlc_phb_12.Visible = xlSheetVisible Then
         Application.StatusBar = WorksheetFunction.VLookup("calculatemst", nlc_phb_TL.Range("B4:E65536"), 4, False)
         Call nlc_12.Refresh
     End If
     If nlc_phb_14.Visible = xlSheetVisible Then
         Application.StatusBar = WorksheetFunction.VLookup("calculateGantt", nlc_phb_TL.Range("B4:E65536"), 4, False)
         Call nlc_14.RefreshGantt
     End If
     Application.StatusBar = WorksheetFunction.VLookup("calculateRKV", nlc_phb_TL.Range("B4:E65536"), 4, False)
     Call nlc_53.Refresh
     
     Application.StatusBar = False
    
ende:
    'Aktion abschliessen
    Call nlc_intern.nlc_protect(nlc_phb_08)
    Call nlc_intern.nlc_protect(nlc_phb_06)
    Call nlc_intern.nlc_protect(nlc_phb_02)
    nlc_intern.application_on
   
    nlc_phb_06.Select
    nlc_phb_06.Range("A1").Select
    
    Exit Sub
    
fehler:
    MsgBox nlc_Language_Msgs("phb_general_error_occured") & VBA.Chr(10) & "Information: " & Err.Description
    nlc_intern.application_on
    Call nlc_intern.nlc_protect(nlc_phb_06)
    nlc_phb_06.Select
    nlc_phb_06.Range("A1").Select
   
End Sub

Public Sub blatt_hiddenvisible(blatt_codename As Worksheet)

    Dim zeile As Integer
    Dim blattname As String
    Dim adminmodus As String
    
    On Error GoTo ende
    nlc_pw = nlc_intern.get_pw
    
    zeile = nlc_phb_61.Range("C2").Value
    adminmodus = nlc_phb_61.Range("C1").Value
    
    If nlc_phb_xs.ProtectStructure = True Then
        nlc_phb_xs.Unprotect (nlc_konstanten.pw_admin)
        nlc_phb_xs.Unprotect
    End If
                
    While Not IsEmpty(nlc_phb_61.Cells(zeile, 2).Value)
        If blatt_codename Is Nothing Then
            blattname = nlc_intern.nlc_search_name(ThisWorkbook, nlc_phb_61.Cells(zeile, 2).Value)
        ElseIf blatt_codename.CodeName = nlc_phb_61.Cells(zeile, 2).Value Then
            blattname = blatt_codename.name
        Else
            GoTo n|fffd|chster
        End If
        If blattname <> "" Then
            With ThisWorkbook.Sheets(blattname)
                
            'Sichtbarkeit
            
                .Activate
                ActiveWindow.ScrollColumn = 1
                ActiveWindow.ScrollRow = 1
                .Cells(1, 1).Activate

                If adminmodus = "NLS" Then
                    ActiveWindow.DisplayGridlines = True
                    ActiveWindow.DisplayHeadings = True
                Else
                    ActiveWindow.DisplayGridlines = search_sperrwert(zeile, "DisplayGridlines")
                    ActiveWindow.DisplayHeadings = search_sperrwert(zeile, "DisplayHeadings")
                End If

                If adminmodus = "NLS" Then
                   .Visible = xlSheetVisible
                ElseIf adminmodus = "ADMIN" And (nlc_phb_61.Cells(zeile, 4).Value = "x" Or nlc_phb_61.Cells(zeile, 5).Value = "x" Or nlc_phb_61.Cells(zeile, 6).Value = "x") Then
                    .Visible = xlSheetVisible
                ElseIf adminmodus = "MASTERDATA" And (nlc_phb_61.Cells(zeile, 5).Value = "x" Or nlc_phb_61.Cells(zeile, 6).Value = "x") And nlc_phb_PW.Cells(25, 3).Value <> "x" Then
                    .Visible = xlSheetVisible
                ElseIf adminmodus = "MASTERDATA" And nlc_phb_61.Cells(zeile, 6).Value = "x" And nlc_phb_PW.Cells(25, 3).Value = "x" Then 'PPF Nutzer
                    .Visible = xlSheetVisible
                ElseIf nlc_phb_61.Cells(zeile, 6).Value = "x" Then 'Standarduser
                    .Visible = xlSheetVisible
                Else
                    .Visible = xlSheetVeryHidden
                End If
'
'                If .CodeName = "nlc_phb_06" Then
'                    nlc_phb_06.Unprotect (nlc_konstanten.pw_admin)
'                    nlc_phb_06.Protect Password:=nlc_konstanten.pw_admin, AllowFormattingColumns:=True
'                End If
            End With
        End If
n|fffd|chster:
        If Not (blatt_codename Is Nothing) Then
            If blatt_codename.CodeName = nlc_phb_61.Cells(zeile, 2).Value Then GoTo ende
        End If
        zeile = zeile + 1
    Wend

ende:
    If adminmodus <> "NLS" And adminmodus <> "ADMIN" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect (nlc_pw)

    'MsgBox ("Error:" & Err.Number)
End Sub
              
Public Sub blatt_lockunlock(blatt_codename As Worksheet, Sperren As Boolean)

    Dim zeile As Integer
    Dim blattname As String
    Dim adminmodus As String
    
    'On Error GoTo ende
    nlc_pw = nlc_intern.get_pw
    
    zeile = nlc_phb_61.Range("C2").Value
    adminmodus = nlc_phb_61.Range("C1").Value

    While Not IsEmpty(nlc_phb_61.Cells(zeile, 2).Value)
        If blatt_codename Is Nothing Then
            blattname = nlc_intern.nlc_search_name(ThisWorkbook, nlc_phb_61.Cells(zeile, 2).Value)
        ElseIf blatt_codename.CodeName = nlc_phb_61.Cells(zeile, 2).Value Then
            blattname = blatt_codename.name
        Else
            GoTo n|fffd|chster
        End If
        If blattname <> "" Then
            With ThisWorkbook.Sheets(blattname)

                If .ProtectContents = True Then
                    .Unprotect (nlc_konstanten.pw_admin)
                    .Unprotect
                End If
          
'                .Activate
'                ActiveWindow.ScrollColumn = 1
'                ActiveWindow.ScrollRow = 1
'                .Cells(1, 1).Activate
'
'                If adminmodus = "NLS" Then
'                    ActiveWindow.DisplayGridlines = True
'                    ActiveWindow.DisplayHeadings = True
'                    GoTo n|fffd|chster
'                Else
'                    ActiveWindow.DisplayGridlines = search_sperrwert(zeile, "DisplayGridlines")
'                    ActiveWindow.DisplayHeadings = search_sperrwert(zeile, "DisplayHeadings")
'                End If
                
                If Sperren = False Then GoTo n|fffd|chster
                '********* Beim Entsperren ohne weitere hinweise geht er nicht weiter
                
                If nlc_phb_61.Cells(zeile, 3).Value = "x" Then GoTo n|fffd|chster
                '********* nls Bl|fffd|tter werden nicht gesperrt und aus Performance Gr|fffd|nden auch nicht weiter angefasst
                
                'Sperreigenschaften
                If nlc_phb_61.Cells(zeile, 7).Value <> "x" And adminmodus <> "NLS" And adminmodus <> "ADMIN" Then 'Kein nlsBlatt, kein ADMIN und auch nicht unlocked="x"
                    If .CodeName = "nlc_phb_06" And adminmodus = "MASTERDATA" Then 'Im Kundenadmin d|fffd|rfen im Datenblatt Spalten breiter gestellt werden
                        .Protect Password:=nlc_pw _
                        , DrawingObjects:=search_sperrwert(zeile, "DrawingObjects") _
                        , Contents:=search_sperrwert(zeile, "Contents") _
                        , Scenarios:=search_sperrwert(zeile, "Scenarios") _
                        , AllowFormattingCells:=search_sperrwert(zeile, "AllowFormattingCells") _
                        , AllowFormattingColumns:=True _
                        , AllowFormattingRows:=search_sperrwert(zeile, "AllowFormattingRows") _
                        , AllowInsertingColumns:=search_sperrwert(zeile, "AllowInsertingColumns") _
                        , AllowInsertingRows:=search_sperrwert(zeile, "AllowInsertingRows") _
                        , AllowInsertingHyperlinks:=search_sperrwert(zeile, "AllowInsertingHyperlinks") _
                        , AllowDeletingColumns:=search_sperrwert(zeile, "AllowDeletingColumns") _
                        , AllowDeletingRows:=search_sperrwert(zeile, "AllowDeletingRows") _
                        , AllowSorting:=search_sperrwert(zeile, "AllowSorting") _
                        , AllowFiltering:=search_sperrwert(zeile, "AllowFiltering") _
                        , AllowUsingPivotTables:=search_sperrwert(zeile, "AllowUsingPivotTables")
                 Else
                        .Protect Password:=nlc_pw _
                        , DrawingObjects:=search_sperrwert(zeile, "DrawingObjects") _
                        , Contents:=search_sperrwert(zeile, "Contents") _
                        , Scenarios:=search_sperrwert(zeile, "Scenarios") _
                        , AllowFormattingCells:=search_sperrwert(zeile, "AllowFormattingCells") _
                        , AllowFormattingColumns:=search_sperrwert(zeile, "AllowFormattingColumns") _
                        , AllowFormattingRows:=search_sperrwert(zeile, "AllowFormattingRows") _
                        , AllowInsertingColumns:=search_sperrwert(zeile, "AllowInsertingColumns") _
                        , AllowInsertingRows:=search_sperrwert(zeile, "AllowInsertingRows") _
                        , AllowInsertingHyperlinks:=search_sperrwert(zeile, "AllowInsertingHyperlinks") _
                        , AllowDeletingColumns:=search_sperrwert(zeile, "AllowDeletingColumns") _
                        , AllowDeletingRows:=search_sperrwert(zeile, "AllowDeletingRows") _
                        , AllowSorting:=search_sperrwert(zeile, "AllowSorting") _
                        , AllowFiltering:=search_sperrwert(zeile, "AllowFiltering") _
                        , AllowUsingPivotTables:=search_sperrwert(zeile, "AllowUsingPivotTables")
                    End If

                End If
                     
            End With
        End If
n|fffd|chster:
        If Not (blatt_codename Is Nothing) Then
            If blatt_codename.CodeName = nlc_phb_61.Cells(zeile, 2).Value Then GoTo ende
        End If
        zeile = zeile + 1
    Wend

ende:
    'MsgBox ("Error:" & Err.Number)
End Sub

Public Function search_sperrwert(zeile As Integer, spaltenname As String) As Boolean
    Dim endspalte As Integer
    Dim c
    
    search_sperrwert = False
    endspalte = nlc_phb_61.UsedRange.Columns.count
    With nlc_phb_61.Range(nlc_phb_61.Cells(5, 1), nlc_phb_61.Cells(5, endspalte))
        Set c = .Find(spaltenname, LookIn:=xlValues, lookat:=xlWhole)
        If Not c Is Nothing Then
            If nlc_phb_61.Cells(zeile, c.Column).Value = "x" Then
                search_sperrwert = True
            End If
        End If
    End With
End Function

Public Sub blatt_sperren(blattname As String, pw_entsperren As String, Sperren As Boolean, pw_sperren As String, links As Boolean, gitternetzlinien As Boolean, ueberschriften As Boolean)
    
    With Sheets(blattname)
        .Unprotect (pw_entsperren)
        .Activate
        ActiveWindow.ScrollColumn = 1
        ActiveWindow.ScrollRow = 1
        ActiveWindow.DisplayGridlines = gitternetzlinien
        ActiveWindow.DisplayHeadings = ueberschriften
        .Cells(1, 1).Select
        If Sperren = True Then .Protect Password:=pw_sperren, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowInsertingHyperlinks:=links
    End With
End Sub


Public Sub lockPJNr(lockNr As Boolean)
    With nlc_phb_00.Range("B11:D11")
        If lockNr Then
            .Interior.ColorIndex = xlNone
            .Locked = True
            .FormulaHidden = False
        Else
            .Interior.ColorIndex = 17
            .Locked = False
            .FormulaHidden = False
        End If
    End With
End Sub


'Public Function get_folder(msg As String) As String
'
'    Dim sfile As Variant
'    get_folder = ""
'    Dim fd As FileDialog
'
'    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
'
'    With fd
'        .Title = msg
'        If .Show = True Then
'            get_folder = .SelectedItems.Item(1)
'        End If
'    End With
'
'    Set fd = Nothing
'
'
'End Function

Public Function get_folder(Msg As String, ArchiveDir As String) As String
    
    Dim sfile As Variant
    get_folder = ""
    Dim fd As FileDialog

    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    
    With fd
        .Title = Msg
        .InitialFileName = ArchiveDir
        If .Show = True Then
            get_folder = .SelectedItems.Item(1)
        End If
    End With

    Set fd = Nothing

    
End Function

Public Function nlc_Language_Msgs(Term As String) As String

    Dim c
    Dim zeile As Integer
    Dim endzeile As Integer
    
    endzeile = nlc_phb_TL4.UsedRange.Rows.count
    With nlc_phb_TL4.Range("b4:b" & endzeile)
        Set c = .Find(Term, LookIn:=xlValues, lookat:=xlWhole)
        If Not c Is Nothing Then
            nlc_Language_Msgs = nlc_phb_TL4.Cells(c.Row, 5).Value
        Else
            nlc_Language_Msgs = "<not found>"
        End If
    End With

End Function

Public Function nlc_Language_userforms(UserForm As String, Term As String) As String

    Dim c
    Dim zeile As Integer
    Dim endzeile As Integer
    Dim firstAddress As Variant
    
    nlc_Language_userforms = "<not found>"
    
    endzeile = nlc_phb_TL5.UsedRange.Rows.count
    With nlc_phb_TL5.Range("d4:d" & endzeile)
    Set c = .Find(Term, LookIn:=xlValues, lookat:=xlWhole)
    If Not c Is Nothing Then
        firstAddress = c.Address
        If nlc_phb_TL5.Cells(c.Row, 3).Value = UserForm Then
            nlc_Language_userforms = nlc_phb_TL5.Cells(c.Row, 5).Value
            Exit Function
        Else
            Do
                Set c = .FindNext(c)
                If Not c Is Nothing Then
                    If nlc_phb_TL5.Cells(c.Row, 3).Value = UserForm Then
                        nlc_Language_userforms = nlc_phb_TL5.Cells(c.Row, 5).Value
                        Exit Function
                    End If
                End If
            Loop While Not c Is Nothing And c.Address <> firstAddress
        End If
    End If
End With
End Function

Public Sub refresh_holidays(first_enddate As String)
    If first_enddate = "" Then
        GoTo weiter
    ElseIf VBA.CDate(first_enddate) < nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value Then
        GoTo weiter
    End If
    Exit Sub
    
weiter:
    Dim cycle_counter As Integer
        Dim row_counter As Integer
        
        row_counter = 5
        
        For cycle_counter = 1 To nlc_phb_51.Cells(4, 68).Value Step 1
            For row_counter = 5 To nlc_phb_51.Cells(6, 68).Value
                If nlc_phb_51.Cells(row_counter, 67).Value = cycle_counter Then
                    Call generate_holiday_series(nlc_phb_51.Cells(row_counter, 65).Value, nlc_phb_51.Cells(row_counter, 64).Value, cycle_counter, "change")
                    Exit For
                End If
            Next row_counter
        Next cycle_counter
End Sub

Public Sub generate_holiday_series(date_ As String, name_ As String, new_id As Integer, cHange As String)
    Dim start_date As String
    Dim end_Date As String
    
    If cHange <> "new" Then
        If nlc_phb_51.Cells(8, 68).Value = "" Then
            start_date = date_
        Else
            start_date = VBA.DateSerial(nlc_phb_51.Cells(8, 68).Value, VBA.Month(date_), VBA.Day(date_))
        End If
        end_Date = nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value
    Else
        start_date = date_
        end_Date = nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value
    End If

    If start_date <> "" And end_Date <> "" Then
        While VBA.Year(start_date) < VBA.Year(end_Date)
            start_date = DateSerial(VBA.Year(VBA.CDate(start_date)) + 1, VBA.Month(VBA.CDate(start_date)), VBA.Day(VBA.CDate(start_date)))
            nlc_phb_51.Cells(6, 68).Value = nlc_phb_51.Cells(6, 68).Value + 1
            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 64).Value = name_
            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 65).Value = VBA.CDate(start_date)
            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 66).FormulaR1C1 = "=VLOOKUP(""every_year"",sprachtabelle,4,FALSE)"
            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 67).Value = new_id
        Wend
    End If
    
    If end_Date <> "" Then
        nlc_phb_51.Cells(8, 68).Value = VBA.Year(end_Date)
    End If
    
    ActiveWorkbook.Names.Add name:="frm_holidays", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(5, 64), nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 67))
End Sub



Public Sub nlc_responsibilities()

'    Dim zeile As Integer, i As Integer
'    Dim spalte As Integer
'    Dim startzeile As Integer
'
'    spalte = 16
'    startzeile = 11
'    zeile = startzeile
'
'    nlc_phb_51.Range(nlc_phb_51.Cells(zeile, spalte), nlc_phb_51.Cells(zeile + Anz_Org, spalte)).ClearContents
'    For i = 78 To 127
'        If nlc_phb_21.Cells(i, 1).Value <> "" Then
'            nlc_phb_51.Cells(zeile, spalte).Value = nlc_phb_21.Cells(i, 1).Value
'            zeile = zeile + 1
'        End If
'    Next i
'    If zeile > startzeile Then
'        nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, spalte), nlc_phb_51.Cells(zeile - 1, spalte)).Sort Key1:=nlc_phb_51.Cells(startzeile, spalte), Order1:=xlAscending, Header:=xlNo
'        ActiveWorkbook.Names.Add name:="verantwortung", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, spalte), nlc_phb_51.Cells(zeile - 1, spalte))
'    Else
'        ActiveWorkbook.Names.Add name:="verantwortung", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, spalte), nlc_phb_51.Cells(startzeile, spalte))
'    End If
End Sub

Public Sub nlc_aps()
    Dim zeile As Integer
    Dim i As Integer
    Dim next_zeile As Integer
    Dim startzeile As Integer
    
    startzeile = 11
    zeile = startzeile
    
    i = Data_Startzeile + 1
    nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 15), nlc_phb_51.Cells(startzeile + 5000, 15)).ClearContents
    nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 17), nlc_phb_51.Cells(startzeile + 5000, 19)).ClearContents
    While nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(i, SpNr_PSP).Value <> "" And nlc_phb_06.Cells(i, SpNr_Art).Value <> "SV" Then
            nlc_phb_51.Cells(zeile, 15).Value = nlc_phb_06.Cells(i, SpNr_PSP).Value
            
            nlc_phb_51.Cells(zeile, 17).Value = nlc_phb_06.Cells(i, SpNr_PSP).Value & " - " & nlc_phb_06.Cells(i, SpNr_Name).Value
            nlc_phb_51.Cells(zeile, 18).Value = nlc_phb_06.Cells(i, SpNr_UID).Value
            nlc_phb_51.Cells(zeile, 19).Value = nlc_phb_06.Cells(i, SpNr_Nr).Value
            zeile = zeile + 1
        End If
        i = i + 1
    Wend
    
    If zeile > startzeile Then
            ActiveWorkbook.Names.Add name:="psp", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 15), nlc_phb_51.Cells(zeile - 1, 15))
            ActiveWorkbook.Names.Add name:="_psp3", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 17), nlc_phb_51.Cells(zeile - 1, 17))
    Else
            ActiveWorkbook.Names.Add name:="psp", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 15), nlc_phb_51.Cells(startzeile, 15))
            ActiveWorkbook.Names.Add name:="_psp3", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 17), nlc_phb_51.Cells(startzeile, 17))
    End If
    
End Sub

Public Sub nlc_phasen()
    Dim zeile As Integer
    Dim i As Integer
    Dim next_zeile As Integer
    Dim startzeile As Integer
    
    startzeile = 11
    zeile = startzeile
    
    i = Data_Startzeile + 1
    nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 24), nlc_phb_51.Cells(startzeile + 5000, 25)).ClearContents
                
    nlc_phb_51.Cells(zeile, 24).Value = nlc_phb_06.Cells(40, SpNr_UID).Value
    nlc_phb_51.Cells(zeile, 25).Value = WorksheetFunction.VLookup("overall", nlc_phb_TL.Range("B4:E65536"), 4, False)
    
    zeile = zeile + 1
    While nlc_phb_06.Cells(i, SpNr_Nr).Value <> "END"
        If nlc_phb_06.Cells(i, SpNr_Ebene).Value = 2 Then
            nlc_phb_51.Cells(zeile, 24).Value = nlc_phb_06.Cells(i, SpNr_UID).Value
            nlc_phb_51.Cells(zeile, 25).Value = nlc_phb_06.Cells(i, SpNr_PSP).Value & " - " & nlc_phb_06.Cells(i, SpNr_Name).Value
            zeile = zeile + 1
        End If
        i = i + 1
    Wend
    
    If zeile > startzeile Then
            ActiveWorkbook.Names.Add name:="phasen", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 24), nlc_phb_51.Cells(zeile - 1, 25))
    Else
            ActiveWorkbook.Names.Add name:="phasen", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 24), nlc_phb_51.Cells(startzeile, 25))
    End If
End Sub




Public Sub nlc_ListGen(Listgen_Anzahl As Integer) '0 ergibt alle, sonst kann man auch nur die ersten aktualisieren, vor allem f|fffd|r res & cost notwendig
    Dim Listgen_Rows As Integer
    Dim Listgen_Columns As Integer
    Dim listgen_Range As Range
    Dim counter As Integer
    Dim SpNr_Listgen As Integer
    Dim ZeiNr_Listgen As Integer
    Dim Listgen_Zeilenanzahl As Integer
     
    SpNr_Listgen = 50
    ZeiNr_Listgen = 11
    Listgen_Zeilenanzahl = 100
    
    If Listgen_Anzahl <> 0 Then
        Listgen_Anzahl = Listgen_Anzahl - 1
    Else
        Listgen_Anzahl = 13
    End If
    
    nlc_phb_51.Range(nlc_phb_51.Cells(ZeiNr_Listgen, SpNr_Listgen), nlc_phb_51.Cells(ZeiNr_Listgen + Listgen_Zeilenanzahl - 1, SpNr_Listgen + Listgen_Anzahl)).ClearContents
    
    Listgen_Columns = SpNr_Listgen
    
    While nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value <> ""
        If Listgen_Anzahl > 0 And Listgen_Columns > SpNr_Listgen + Listgen_Anzahl Then
            Exit Sub
        Else
            If nlc_phb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value <> "" And nlc_phb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value <> "" And nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value <> "" Then
            
                counter = 1
                Set listgen_Range = Worksheets(nlc_search_name(ThisWorkbook, nlc_phb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value)).Range(nlc_phb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value)
                            
                For Listgen_Rows = 1 To (nlc_phb_51.Cells(ZeiNr_Listgen - 4, Listgen_Columns).Value - nlc_phb_51.Cells(ZeiNr_Listgen - 6, Listgen_Columns).Value) + 1
                    If listgen_Range.Cells(Listgen_Rows, 1).Value <> "" Then
                        nlc_phb_51.Cells(counter + ZeiNr_Listgen - 1, Listgen_Columns).Value = listgen_Range.Cells(Listgen_Rows, 1).Value
                        counter = counter + 1
                    End If
                Next Listgen_Rows
                
                'Liste Generieren
                If counter + ZeiNr_Listgen - 2 < ZeiNr_Listgen Then
                    ActiveWorkbook.Names.Add name:=nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_phb_51.Cells(ZeiNr_Listgen, Listgen_Columns))
                Else
                    ActiveWorkbook.Names.Add name:=nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_phb_51.Cells(counter + ZeiNr_Listgen - 2, Listgen_Columns))
                End If
            End If
        End If
        Listgen_Columns = Listgen_Columns + 1
    Wend
    
End Sub




Public Sub nlc_copypaste(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer, ZB As String, ZZ As Integer, ZS As Integer)

    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).Copy
    Sheets(ZB).Cells(ZZ, ZS).PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
       
End Sub

Public Sub nlc_clear(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer)

    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).ClearContents
       
End Sub

Public Function nlc_search_name(aobj, blatt_vba As String) As String

    Dim i As Integer
    Dim objBl As Object
    
    nlc_search_name = ""
    For Each objBl In aobj.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_name = objBl.name
            Exit Function
        End If
    Next objBl

End Function


Public Function nlc_search_tabname(aobj, blatt_vba As String) As Boolean

    Dim i As Integer
    Dim objBl As Object
    
    nlc_search_tabname = False
    For Each objBl In aobj.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_tabname = True
            Exit Function
        End If
    Next objBl

End Function

Public Function Check_Sheet_Existence(objWB As Object, strblatt As String) As Boolean

    Dim objBl As Object
    
    Check_Sheet_Existence = False
    For Each objBl In objWB.Sheets
        If objBl.name = strblatt Then
            Check_Sheet_Existence = True
            Exit Function
        End If
    Next objBl

End Function

Public Function Get_Data_Zeile(nummer As Integer) As Integer

    Dim level As Integer, Data_Endzeile As Integer
    Data_Endzeile = nlc_phb_06.Range("E7").Value
    
    For level = Data_Startzeile To Data_Endzeile
        If nlc_phb_06.Cells(level, SpNr_Nr).Value = nummer Then
            Get_Data_Zeile = level
            Exit Function
        End If
    Next level
    
End Function

Public Function Check_Multiple_Selection(Markierung As Range) As Boolean

    Dim MarkStart As Integer, MarkEnde As Integer, MarkZellen As Integer
    
    MarkStart = Markierung.Areas.Item(1).Row
    MarkZellen = Markierung.Areas.count
    MarkEnde = Markierung.Areas.Item(MarkZellen).Row
    
    If MarkEnde - MarkStart + 1 <> MarkZellen Then
        Check_Multiple_Selection = True
    Else
        Check_Multiple_Selection = False
    End If
    
End Function


Sub Change_Buttonname() 'Bitte immer wenn buttons dazu oder wegkommen anpassen!!!
    
    Dim level As Integer
    Dim spalte As Integer
    Dim zeile As Integer
    Dim i As Integer
    
    On Error Resume Next
       
    spalte = 5
    i = 4
    
    While Not IsEmpty(nlc_phb_TL3.Cells(i, 2).Value)
        Err.Clear
        Call change_button(nlc_phb_TL3.Cells(i, 2).Value, nlc_phb_TL3.Cells(i, 3).Value, nlc_phb_TL3.Cells(i, spalte).Value, "", "")
        i = i + 1
    Wend
    nlc_phb_00.Select
        
End Sub

Public Sub change_button(vbablattname As String, buttonname As String, btncaption As String, btnfarbe As String, btnschriftfarbe As String)
    Dim blattname As String
    Dim nlc_pw As String
    
    nlc_pw = nlc_intern.get_pw
    blattname = nlc_intern.nlc_search_name(ThisWorkbook, vbablattname)

'    If Sheets(blattname).Visible = xlSheetVisible Then
'        Sheets(blattname).Select
'        Sheets(blattname).Unprotect (nlc_pw)
'        If ActiveSheet.Shapes(buttonname).Visible = True Then
'            ActiveSheet.Shapes(buttonname).Select
'            Selection.Characters.text = btncaption
'        End If
'        Sheets(blattname).Protect (nlc_pw)
'    End If
    
    If Sheets(blattname).Visible = xlSheetVisible Then
        'Sheets(blattname).
        Sheets(blattname).Unprotect (nlc_pw)
        If ActiveSheet.Shapes(buttonname).Visible = True Then
            ActiveSheet.Shapes(buttonname).Select
            Selection.Characters.text = btncaption
        End If
        Sheets(blattname).Protect (nlc_pw)
    End If

'    With Sheets(blattname).OLEObjects(buttonname).Object
'        If btncaption <> "" Then .Caption = btncaption
'        If btnschriftfarbe <> "" Then .ForeColor = btnschriftfarbe
'        If btnfarbe <> "" Then .BackColor = btnfarbe
'    End With
End Sub


Public Sub Change_Sheetname()
    
    Dim level, spalte As Integer
    Dim zeile As Integer
    Dim tabelle As String

    spalte = 5
    zeile = 4
       
    While Not IsEmpty(nlc_phb_TL2.Cells(zeile, 2).Value)
        tabelle = nlc_phb_TL2.Cells(zeile, 3).Value
        If nlc_phb_TL2.Cells(zeile, spalte).Value <> "" Then
            Sheets(tabelle).name = nlc_phb_TL2.Cells(zeile, spalte).Value
            nlc_phb_TL2.Cells(zeile, 3).Value = nlc_phb_TL2.Cells(zeile, spalte).Value
        End If
        zeile = zeile + 1
    Wend
End Sub



Public Function Check_MSP_Multiple_Tasks_Level1(bobj As Object, sheetname As String) As Boolean

    Dim i As Integer
    Dim ebene1 As Boolean
    
    ebene1 = False
    Check_MSP_Multiple_Tasks_Level1 = False
    
    i = 2
    
    With bobj.Sheets(sheetname)
        While Not IsEmpty(.Cells(i, 3).Value)
            If .Cells(i, 3).Value = 1 And ebene1 = False Then
                ebene1 = True
            ElseIf .Cells(i, 3).Value = 1 And ebene1 = True Then
                Check_MSP_Multiple_Tasks_Level1 = True
                Exit Function
            End If
            i = i + 1
        Wend
    End With

End Function


Public Sub Clear_Data_Columns(spalte As Integer)

    Dim Data_Endzeile As Integer
    Data_Endzeile = nlc_phb_06.Range("E7").Value
    
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, spalte), nlc_phb_06.Cells(Data_Endzeile, spalte)).ClearContents
    
End Sub

Public Sub Copy_Data_Columns(SourceSpalte As Integer, DestinationSpalte As Integer)

    Dim Data_Endzeile As Integer
    Data_Endzeile = nlc_phb_06.Range("E7").Value
    
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SourceSpalte), nlc_phb_06.Cells(Data_Endzeile, SourceSpalte)).Copy
    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, DestinationSpalte), nlc_phb_06.Cells(Data_Endzeile, DestinationSpalte)).PasteSpecial xlPasteValues
    
End Sub

Sub Logo_Positionieren(blatt As String, zeile As Integer, spalte As Integer)
    Dim level As Integer
    Dim nlc_pw As String
    Dim schutz As Boolean
    Dim versteckt As Boolean

    nlc_pw = nlc_intern.get_pw
    schutz = Sheets(blatt).ProtectContents


    If spalte = 0 Then
        For level = 1 To 1000 Step 1
            If Sheets(blatt).Cells(zeile, level).Borders(xlEdgeRight).LineStyle = xlContinuous Then Exit For
        Next level
    Else
        level = spalte
    End If

    If Sheets(blatt).CodeName = "nlc_phb_14" Then level = level - 1

    If schutz = True Then Sheets(blatt).Unprotect (nlc_pw)
    versteckt = Sheets(blatt).Visible

    If versteckt = 2 Then Sheets(blatt).Visible = xlSheetVisible
    'Sheets(blatt).Select
    'Sheets(blatt).Range("A1").Select

    Sheets(blatt).Pictures("Logo").left = Sheets(blatt).Cells(zeile, level).left - Sheets(blatt).Pictures("Logo").width
    If Sheets(blatt).CodeName = "nlc_phb_07" Or Sheets(blatt).CodeName = "nlc_phb_17" Or Sheets(blatt).CodeName = "nlc_phb_19" Then
        Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(zeile, level).top + 5
    ElseIf Sheets(blatt).CodeName = "nlc_phb_14" Then
        Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(zeile, level).top + 3
    ElseIf Sheets(blatt).CodeName = "nlc_phb_06" Then
        Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(zeile, level).top + 3
    End If

    'Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(Zeile, level).top

    If schutz = True Then Sheets(blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    If versteckt = 2 Then Sheets(blatt).Visible = 2

End Sub

Function CleanBlank(text As String, Stellenanzahl As Integer)

    Dim MyBuf As String
    Dim MyLen As Integer
    Dim level As Integer
    Dim i As Integer
    i = 1
    MyBuf = ""
    
    MyLen = VBA.Len(text) + 1
    While i < MyLen
        If VBA.Right(VBA.left(text, i), 1) <> "." And VBA.Right(VBA.left(text, i), 1) <> " " And VBA.Right(VBA.left(text, i), 1) <> "," Then
            MyBuf = MyBuf & VBA.Right(VBA.left(text, i), 1)
        End If
        i = i + 1
    Wend
    
    If VBA.Len(MyBuf) < Stellenanzahl + 1 Then
        While VBA.Len(MyBuf) < Stellenanzahl
            MyBuf = "0" & MyBuf
        Wend
    Else
        MyBuf = ""
        While VBA.Len(MyBuf) < Stellenanzahl
            MyBuf = "9" & MyBuf
        Wend
    End If
    
    CleanBlank = MyBuf
End Function

Private Function change_username(username As String) As String
    Dim X As Integer
    Dim username_temp As String
    
    username_temp = ""
    For X = VBA.Len(username) To 1 Step -1
        username_temp = username_temp & VBA.Mid(username, X, 1)
    Next X
    
    change_username = username_temp
End Function

Public Function key_gegen_generieren(username As String, Key As String) As String

    Dim name_counter As Integer
    Dim char_index As Integer
    Dim anzahl_char As Integer
    Dim Rest As Integer
    Dim addieren_ As Integer
    Dim skey As String
    Dim counter As Integer
    Dim counter_2 As Integer
    Dim nValue As Integer
    
    username = tool & change_username(username)
    
    anzahl_char = 10 + 26 'anzahl Zahlen + Anzahl Buchstaben
    
    If Key = pw_inno Then
        skey = "2412"
        name_counter = "2"
    Else
        If IsNumeric(VBA.Mid$(VBA.UCase(Key), 1, 1)) = False Then
            GoTo ende
        End If
    
        skey = VBA.Mid$(VBA.UCase(Key), 1, 4)
        name_counter = VBA.Mid$(VBA.UCase(Key), 1, 1)

        If IsNumeric(VBA.Mid$(VBA.UCase(Key), 1, 1)) <> True Then
            key_gegen_generieren = ""
            Exit Function
        End If
    End If
    
    'Zeichen zum Starten suchen
    On Error GoTo ende
    For counter = 1 To 5
        If skey <> "" Then skey = skey & "-"
        For counter_2 = 1 To 5
            char_index = VBA.Asc(VBA.Mid$(VBA.UCase(username), name_counter, 1))
            addieren_ = counter * counter_2 + name_counter
            nValue = char_index
            If (nValue Mod 10 = 0) Or (nValue Mod 5 = 0) Then 'Or (nValue Mod 3 = 0) Then
              ' Zahl
              Do
                char_index = char_index / addieren_
                nValue = Int(char_index)
              Loop Until nValue >= 1 And nValue <= 9
              skey = skey & VBA.Chr$(48 + nValue)
            
            Else
              ' Buchstabe
              Do
                char_index = char_index / addieren_
                nValue = Int(char_index)
              Loop Until nValue >= 1 And nValue <= 26 And nValue <> 9 And nValue <> 15
              skey = skey & VBA.Chr$(64 + nValue)
            End If

            If name_counter < VBA.Len(username) Then
                name_counter = name_counter + 1
            Else
                name_counter = 1
            End If
            
        Next counter_2
    Next counter
    
    If Key <> pw_inno Then
        If skey = Key Then
            key_gegen_generieren = skey
            Exit Function
        End If
    Else
        key_gegen_generieren = skey
        Exit Function
    End If
    
ende:
    key_gegen_generieren = ""
End Function

Public Function get_LoginUser() As String
'    Dim s As String
'    Dim cnt As Long
'    Dim ret As Long
'    Dim netuser As String
'    Dim pos As Integer
'
'    cnt = 199
'    s = String$(200, 0)
'    ret = GetUserName(s, cnt)
'
'    If ret <> 0 Then
'        netuser = Trim(left$(s, cnt))
'        pos = InStr(netuser, VBA.Chr$(0))
'
'        If pos > 0 Then
'           netuser = left$(netuser, pos - 1)
'        Else
'           netuser = netuser
'        End If
'    Else
'        netuser = ""
'    End If
'
'   get_LoginUser = netuser
    get_LoginUser = VBA.Environ("username")
End Function

Public Sub wb_open()
    nlc_phb_06.Range("N7").Value = 100
    nlc_phb_06.Range("O7").Value = 100
    Start_Window.Show
    
    If nlc_phb_PW.Cells(25, 3).Value = "x" Then
        Call nlc_intern.nlc_unprotect(nlc_phb_00)
        If nlc_phb_90.Range("PJID").Value = "" Then
            Call nlc_intern.lockPJNr(False) 'Wenn keine Projekt ID vorhanden, dann Projektnummer entsperren
        Else
            Call nlc_intern.lockPJNr(True)
        End If
        Call nlc_intern.nlc_protect(nlc_phb_00)
    End If
'    If nlc_intern.check_user = False Then
'        If MsgBox(nlc_Language_Msgs("user_wrong_new"), vbYesNo) = vbYes Then
'        'Wenn neuen User anlegen
'            frm_reg_user.Show
'        End If
'    End If
End Sub


Public Sub application_off()
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableAnimations = False
End Sub

Public Sub application_on()
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    If Application.CutCopyMode <> False Then Application.CutCopyMode = False
    If Application.StatusBar <> False Then Application.StatusBar = False
    Application.EnableAnimations = True
End Sub


Public Function Nz(gStr As Variant) As String
    If IsNull(gStr) Then
        Nz = ""
    Else
        Nz = gStr
    End If
End Function




Attribute VB_Name = "nlc_konstanten"
Option Explicit
Option Private Module

Public Const tool = "phb"

Public Const pw_admin = "open2next"  'Kundenadmin - Modus "ADMIN"
Public Const pw_inno = "nls4ever!" 'nls Admin - Modus "NLS"
Public Const db_Salt = "soul2gether!"
'Public Const strCon = "Provider='SQLOLEDB.1';Data Source='10.1.1.243\SQLEXPRESS';Initial Catalog=projektportfolio;User ID=sa;pwd=soul2gether!"
'Public Const strCon = "Provider='SQLOLEDB.1';Data Source='10.1.1.243\SQLEXPRESS';Initial Catalog=npf_Marinko_testDB;User ID=nls_npf_User;pwd=nls_npf_User"
'Public Const strCon = "Provider='SQLOLEDB.1';Data Source='10.1.1.243\SQLEXPRESS';Initial Catalog=NextPortfolioV1;User ID=nls_npf_User;pwd=nls_npf_User"

Public Const DBUser = "nls_npf_User"
Public Const DBPW = "nls_npf_User"

'###############################################################################################################
'Lizenzvarianten, einfach ben|fffd|tigten Code auskommentieren aufheben (aktiven Code nat|fffd|rlich auskommentieren)
''Demo
'Public Const demoversion = #3/31/2017#      '#monat/tag/jahr# ohne komma!
'Public Const phb_art = "Demo"
'Public Const useradmin = True 'true = Userverwaltung aktiv

''Einzeluserlizenz
'Public Const demoversion = 0   '#monat/tag/jahr# ohne komma!
'Public Const phb_art = "Normal"
'Public Const useradmin = True 'true = Userverwaltung aktiv

'Unternehmenslizenz
Public Const demoversion = 0  '#monat/tag/jahr# ohne komma!
Public Const phb_art = "Normal"
Public Const useradmin = False 'true = Userverwaltung aktiv
'
''Einzelprojektlizenz
''!!!!!WICHTIG!!!!! -> Am nlc_phb_pw Blatt den Button klicken!!!
'Public Const demoversion = 0  '#monat/tag/jahr# ohne komma!
'Public Const phb_art = "Normal"
'Public Const useradmin = False 'true = Userverwaltung aktiv
'###############################################################################################################



Public Const arbeitsmappenschutz = True 'f|fffd|r office 2007

Public Const Res_Anz = 1
Public Const Res_Schritt = 3
Public Const Cost_Anz = 2
Public Const Cost_Schritt = 3
Public Const Anz_Jahre = 6
Public Const Anz_Org = 50

Public Const Toolbezeichnung = "next project"

Public Const Data_Startzeile = 40
Public Const Data_Startspalte = 3
Public Const Data_Endspalte = 47
Public Const MD_Spaltensprung = 25
Public Const Temp_Startzeile = 40
Public Const Temp_Endzeile = Temp_Startzeile + 99

Public Const SpNr_Marker = 1
Public Const SpNr_Header = 2
Public Const SpNr_Nr = 3
Public Const SpNr_UID = 4
Public Const SpNr_ArtB = 5
Public Const SpNr_MSPID = 6
Public Const SpNr_SV = 7
Public Const SpNr_Art = 8
Public Const SpNr_Ebene = 9
Public Const SpNr_PSP = 10 + 3
Public Const SpNr_Name = 11 + 3
Public Const SpNr_Fortschritt = 15
Public Const SpNr_Status = 16
Public Const SpNr_Verantwortung = 17

Public Const SpNr_DateB_S = 18
Public Const SpNr_DateB_E = SpNr_DateB_S + 1

Public Const SpNr_DateA_S = 20
Public Const SpNr_DateA_E = SpNr_DateA_S + 1

Public Const SpNr_Res_S = 23
Public Const SpNr_ResA_S = SpNr_Res_S + Res_Schritt - 1
Public Const SpNr_Res_unknown_S = SpNr_Res_S + (Res_Schritt * (Res_Anz - 1))
Public Const SpNr_Res_E = SpNr_Res_S + (Res_Schritt * Res_Anz) - 1
Public Const SpNr_ResSumme_Bas = SpNr_Res_E + 1
Public Const SpNr_ResSumme_Akt = SpNr_ResSumme_Bas + 3

Public Const SpNr_Cost_S = 31
Public Const SpNr_CostA_S = SpNr_Cost_S + Cost_Schritt - 1
Public Const SpNr_Cost_unknown_S = SpNr_Cost_S + (Cost_Schritt * (Cost_Anz - 1))
Public Const SpNr_Cost_E = SpNr_Cost_S + (Cost_Schritt * Cost_Anz) - 1
Public Const SpNr_CostSumme_Bas = SpNr_Cost_E + 1
Public Const SpNr_CostSumme_Akt = SpNr_CostSumme_Bas + 3

Public Const SpNr_Comment = 42

Public Const SpNr_left = 43
Public Const SpNr_top = SpNr_left + 1
Public Const SpNr_height = SpNr_top + 1
Public Const SpNr_width = SpNr_height + 1


Public Const ZeiNr_VorlageAP = 9
Public Const ZeiNr_VorlageMS = 10
Public Const ZeiNr_VorlageSV = 11
Public Const ZeiNr_VerImp = 13
Public Const ZeiNr_PHBImp = 14
Public Const ZeiNr_MSPImp = 15
Public Const ZeiNr_AP = 16
Public Const ZeiNr_MS = 17
Public Const ZeiNr_SV = 18
Public Const ZeiNr_FrEbene = 19
Public Const ZeiNr_Kuerzel = 20
Public Const ZeiNr_Email = 21
Public Const ZeiNr_LayoutOFF = 22
Public Const ZeiNr_LayoutON = 23
Public Const ZeiNr_VerImpnpj = 24 'Vnpj 4.0
Public Const ZeiNr_VerImp41 = 25 'V3.0

Public Const ZeiNr_Layout_Funktion = 29
Public Const ZeiNr_Layout_Personal = 30
Public Const ZeiNr_Layout_Kosten = 31
Public Const ZeiNr_Adminclose = 32
Public Const ZeiNr_Adminshow = 33
Public Const ZeiNr_Layout_User = 35
Public Const ZeiNr_Beschriftung = 38
Public Const ZeiNr_Projekt = 40

Public Const ZeiNr_Feiertag_start = 5
Public Const SpNr_Feiertag_date = 64

Public Const MDWBS_Hoehe = 10
Public Const MDWBS_Breite = 13
Public Const MDWBS_Abstand = 25

Public Sperren_Variable As Boolean

Attribute VB_Name = "nlc_phb_00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit



Public Sub Sperren()
    Call nlc_00.Sperren_Click
End Sub

Public Sub btnImport_Click()
Attribute btnImport_Click.VB_ProcData.VB_Invoke_Func = "I\n14"
    Call nlc_58.import(True, 2) 'Statusbericht & Inhalte und Res & Kostenauswahl
End Sub

Public Sub faerben_formular()
Attribute faerben_formular.VB_ProcData.VB_Invoke_Func = "F\n14"
    faerben.Show
End Sub

Public Sub cmdShowEingabefelder_Click()
    Call nlc_00.cmdShowEingabefelder_Click
End Sub

Public Sub Grafik_Click()
    Call nlc_00.GrafikClick
End Sub

Public Sub lock_unlock()
Attribute lock_unlock.VB_ProcData.VB_Invoke_Func = "S\n14"
    Call Application.Run("'" & ActiveWorkbook.name & "'!nlc_functions.showUnlock")
End Sub

Public Sub cmdDB_write()
    Call nlc_phb_90.btn_Write_Click
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim deutsch As String: deutsch = nlc_phb_51.Range("language").Cells(2, 1).Value
Dim wienerisch As String: wienerisch = nlc_phb_51.Range("language").Cells(5, 1).Value
    If Target.Column = 3 And Target.Row = 62 Then
        Call nlc_00.spracheClick
        nlc_intern.application_off
        Call nlc_intern.nlc_unprotect(nlc_phb_00)
'        If Target.Value = deutsch Or Target.Value = wienerisch Then
'            nlc_phb_00.Rows("38:40").Hidden = False
'        Else
'            nlc_phb_00.Rows("38:40").Hidden = True
'        End If
        Call nlc_intern.nlc_protect(nlc_phb_00)
        nlc_intern.application_on
    End If
End Sub

Public Sub btn_print()
    Call nlc_00.print_allClick(False)
End Sub

Public Sub btn_Pdf()
    Call nlc_00.print_allClick(True)

End Sub
Attribute VB_Name = "nlc_phb_02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public IsCalOpen As Boolean

Public Sub btn_refresh_Click()
    nlc_02.btn_refreshClick
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        Call nlc_02.WorksheetChange(Target)
    End If
End Sub

Private Sub worksheet_beforedoubleclick(ByVal Target As Range, Cancel As Boolean)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        IsCalOpen = False
        If Target.Locked = False Then
            If (Target.Column = 7 And (Target.Row = 5 Or Target.Row = 8)) Or (Target.Column = 5 And (Target.Row >= 54 And Target.Row <= 73)) Then
                frm_Kalender.Show ' vbModal
                IsCalOpen = True
                Cancel = True
            End If
        End If
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error Resume Next
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        If IsCalOpen = True Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub

Private Sub Worksheet_Deactivate()
    On Error Resume Next
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
        Call nlc_02.nlc_responsibilities
    End If
End Sub






Attribute VB_Name = "nlc_phb_04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public IsCalOpen As Boolean

Public Sub AKTUELL_Click()
    Call nlc_05.AKTUELLClick
End Sub

Private Sub worksheet_beforedoubleclick(ByVal Target As Range, Cancel As Boolean)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        IsCalOpen = False
        If Target.Locked = False Then
            If Target.Column = 19 Then
                frm_Kalender.Show ' vbModal
                IsCalOpen = True
                Cancel = True
            End If
        End If
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub

Private Sub Worksheet_Deactivate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub


Attribute VB_Name = "nlc_phb_06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public IsCalOpen As Boolean

Public Sub navigation_Click()
    nlc_06.navigationClick
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        nlc_phb_51.Range("A1").Value = ""
    End If
End Sub

Private Sub Worksheet_Deactivate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        nlc_06.WorksheetDeactivate
        On Error Resume Next
        Err.Clear
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub

Private Sub worksheet_beforedoubleclick(ByVal Target As Range, Cancel As Boolean)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        Call nlc_06.WorksheetBeforeDoubleClick(Target)
        IsCalOpen = False
        If (Target.Column = SpNr_DateA_S Or Target.Column = SpNr_DateA_E) And Target.Locked = False And Target.Row > ZeiNr_Layout_User Then
            frm_Kalender.Show ' vbModal
            IsCalOpen = True
            Cancel = True
        End If
    End If
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub


Attribute VB_Name = "nlc_phb_08"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_psp_refresh_Click()
    Call nlc_08.refresh_psp
End Sub



Attribute VB_Name = "nlc_phb_10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "nlc_phb_12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub AKTUELL_Click()
    Call nlc_12.AKTUELLClick
End Sub

Attribute VB_Name = "nlc_phb_14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub Refresh_Click()
    Call nlc_14.refreshClick
End Sub

Attribute VB_Name = "nlc_phb_16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub Calc_PersKost_Click()

    Call nlc_53.Refresh
    
End Sub
Attribute VB_Name = "nlc_phb_35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public IsCalOpen As Boolean

Public Sub s_red_Click()
    Call nlc_35.s_ampelClick("ampel", "red")
End Sub

Public Sub s_yellow_Click()
    Call nlc_35.s_ampelClick("ampel", "yellow")
End Sub
 
Public Sub s_green_Click()
    Call nlc_35.s_ampelClick("ampel", "green")
End Sub

Public Sub s_red2_Click()
    Call nlc_35.s_ampelClick("ampelalt", "red", True)
End Sub

Public Sub s_yellow2_Click()
    Call nlc_35.s_ampelClick("ampelalt", "yellow", True)
End Sub
 
Public Sub s_green2_Click()
    Call nlc_35.s_ampelClick("ampelalt", "green", True)
End Sub

Public Sub s_team_red_Click()
    Call nlc_35.s_ampelClick("team", "red")
End Sub

Public Sub s_team_yellow_Click()
    Call nlc_35.s_ampelClick("team", "yellow")
End Sub
 
Public Sub s_team_green_Click()
    Call nlc_35.s_ampelClick("team", "green")
End Sub

Public Sub s_umw_red_Click()
    Call nlc_35.s_ampelClick("umw", "red")
End Sub

Public Sub s_umw_yellow_Click()
    Call nlc_35.s_ampelClick("umw", "yellow")
End Sub
 
Public Sub s_umw_green_Click()
    Call nlc_35.s_ampelClick("umw", "green")
End Sub

Private Sub Worksheet_Activate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then Call nlc_35.WorksheetActivate
End Sub

Private Sub Worksheet_Deactivate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
         On Error Resume Next
         Err.Clear
         If IsCalOpen Then
             Unload frm_Kalender
             IsCalOpen = False
         End If
    End If
End Sub

Private Sub worksheet_beforedoubleclick(ByVal Target As Range, Cancel As Boolean)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        IsCalOpen = False
        If Target.Locked = False Then
            If Target.Column = 12 Then
                frm_Kalender.Show ' vbModal
                IsCalOpen = True
                Cancel = True
            End If
        End If
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub




Attribute VB_Name = "nlc_phb_37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public IsCalOpen As Boolean

Public Sub transfer_wp_Click()
    Call nlc_37.transfer_wpClick
End Sub

Private Sub worksheet_beforedoubleclick(ByVal Target As Range, Cancel As Boolean)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        Call nlc_37.WorksheetBeforeDoubleClick(Target)
        IsCalOpen = False
        If Target.Locked = False Then
            If Target.Column = 10 And Target.Row >= 50 And Target.Row <= 59 Then
                frm_Kalender.Show ' vbModal
                IsCalOpen = True
                Cancel = True
            End If
        End If
    End If
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub

Private Sub Worksheet_Deactivate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub

Attribute VB_Name = "nlc_phb_39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public IsCalOpen As Boolean

Public Sub Btn_S_Click()
    Call nlc_39.SortierenClick(Selection.Column)
End Sub

Public Sub A_Click()
    nlc_39.AClick
End Sub

Public Sub Btn_F_Click()
    Call nlc_39.FilterClick(Selection.Column)
End Sub

Public Sub X_Click()
    Call nlc_39.XClick
End Sub

Private Sub Worksheet_Activate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then Call nlc_39.WorksheetActivate
End Sub

Private Sub Worksheet_Deactivate()
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        Call nlc_39.WorksheetDeactivate
        On Error Resume Next
        Err.Clear
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub

Private Sub worksheet_beforedoubleclick(ByVal Target As Range, Cancel As Boolean)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        IsCalOpen = False
        If Target.Locked = False Then
            If Target.Column = 7 Then
                frm_Kalender.Show ' vbModal
                IsCalOpen = True
                Cancel = True
            End If
        End If
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.CodeName = "nlc_phb_xs" Then
        On Error Resume Next
        If IsCalOpen Then
            Unload frm_Kalender
            IsCalOpen = False
        End If
    End If
End Sub




Attribute VB_Name = "nlc_phb_40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_50"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "nlc_phb_51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

    Call nlc_53.Refresh
    
End Sub
Attribute VB_Name = "nlc_phb_56"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "nlc_phb_58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_59"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_60"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub btn_Ueberschrift_Refresh_Click()

    Dim level As Integer
    Dim PW As String

    nlc_phb_60.Unprotect (PW)
    
    nlc_phb_06.Rows("37:39").Copy
    nlc_phb_60.Rows("37:39").Select
    ActiveSheet.Paste
    
    For level = 1 To 256 Step 1
        nlc_phb_60.Columns(level).columnWidth = nlc_phb_06.Columns(level).columnWidth
    Next level
    
    Application.CutCopyMode = False
    
    nlc_phb_60.Unprotect (PW)

End Sub
Attribute VB_Name = "nlc_phb_61"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub einzelauslesen()
    Dim i As Integer
    
    Dim weite As Integer
    Dim hoehe As Integer
    
    Dim kRow As Integer
    Dim kColumn As Integer
    Dim kWidth As Double
    Dim kHeight As Double
    Dim kTop As Double
    Dim kLeft As Double
    Dim blattname As String
    
    Dim shapename As String
    
    shapename = "Cluster_6"
    
    blattname = ActiveSheet.name
    With Sheets(blattname)
    
    weite = .Shapes(shapename).width
    hoehe = .Shapes(shapename).Height
    
    kHeight = .Range(nlc_phb_64.Range("AQ13").Value & ":" & nlc_phb_64.Range("AR13").Value).Height
    kWidth = .Range(nlc_phb_64.Range("AQ13").Value & ":" & nlc_phb_64.Range("AR13").Value).width
    
    kTop = .Range(nlc_phb_64.Range("AQ13")).top
    kLeft = .Range(nlc_phb_64.Range("AQ13")).left
    
    nlc_phb_64.Cells(10, 43).Value = (.Shapes(shapename).left - kLeft + weite / 2) * 100 / kWidth
    nlc_phb_64.Cells(10, 44).Value = (.Shapes(shapename).top - kTop + hoehe / 2) * 100 / kHeight
    End With

End Sub

Public Sub auslesen()
    Dim i As Integer
    
    Dim weite As Integer
    Dim hoehe As Integer
    
    Dim kRow As Integer
    Dim kColumn As Integer
    Dim kWidth As Double
    Dim kHeight As Double
    Dim kTop As Double
    Dim kLeft As Double
    Dim blattname As String
    
    blattname = ActiveSheet.name
    With Sheets(blattname)
    
    weite = nlc_phb_64.Shapes("_UA_template").width
    hoehe = nlc_phb_64.Shapes("_UA_template").Height
    
    kHeight = .Range(nlc_phb_64.Range("AQ13").Value & ":" & nlc_phb_64.Range("AR13").Value).Height
    kWidth = .Range(nlc_phb_64.Range("AQ13").Value & ":" & nlc_phb_64.Range("AR13").Value).width
    
    kTop = .Range(nlc_phb_64.Range("AQ13")).top
    kLeft = .Range(nlc_phb_64.Range("AQ13")).left
    
    For i = 1 To 60
        nlc_phb_64.Cells(i + 14, 43).Value = (.Shapes(nlc_phb_64.Cells(i + 14, 45).Value).left - kLeft + weite / 2) * 100 / kWidth
        nlc_phb_64.Cells(i + 14, 44).Value = (.Shapes(nlc_phb_64.Cells(i + 14, 45).Value).top - kTop + hoehe / 2) * 100 / kHeight
    Next i
    

'    i = 2
'    nlc_phb_64.Cells(i + 75, 2).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 3).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'    nlc_phb_64.Cells(i + 75, 4).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left + nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).width - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 5).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'
'    i = 3
'    nlc_phb_64.Cells(i + 75, 2).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 3).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'    nlc_phb_64.Cells(i + 75, 4).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).width - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 5).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).Height - kTop) * 100 / kHeight
'
'    i = 4
'    nlc_phb_64.Cells(i + 75, 2).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 3).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'    nlc_phb_64.Cells(i + 75, 4).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left + nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).width - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 5).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'
'    i = 5
'    nlc_phb_64.Cells(i + 75, 2).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 3).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'    nlc_phb_64.Cells(i + 75, 4).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).width - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 5).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).Height - kTop) * 100 / kHeight
'
'    i = 6
'    nlc_phb_64.Cells(i + 75, 2).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 3).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - kTop) * 100 / kHeight
'    nlc_phb_64.Cells(i + 75, 4).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).left - nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).width - kLeft) * 100 / kWidth
'    nlc_phb_64.Cells(i + 75, 5).Value = (nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 75, 6).Value).top - nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 14, 6).Value).Height - kTop) * 100 / kHeight


'    'p= A*100/G
'    For i = 1 To 60
'        nlc_phb_64.Cells(i + 14, 5).Value = nlc_phb_64.Cells(i + 14, 3).Value * 100 / kWidth
'        nlc_phb_64.Cells(i + 14, 6).Value = nlc_phb_64.Cells(i + 14, 4).Value * 100 / kHeight
'    Next i
    


        
    End With
End Sub

'Public Sub positionieren()
'    Dim i As Integer
'
'    Dim kRow As Integer
'    Dim kColumn As Integer
'    Dim kWidth As Double
'    Dim kHeight As Double
'    Dim kTop As Double
'    Dim kLeft As Double
'    Dim weite As Integer
'    Dim hoehe As Integer
'
'    With nlc_phb_05
'
'        weite = nlc_phb_64.Shapes("_UA_template").width
'        hoehe = nlc_phb_64.Shapes("_UA_template").Height
'
'        kHeight = .Range(nlc_phb_64.Range("C8").Value & ":" & nlc_phb_64.Range("d8").Value).Height
'        kWidth = .Range(nlc_phb_64.Range("C8").Value & ":" & nlc_phb_64.Range("d8").Value).width
'
'        kTop = .Range(nlc_phb_64.Range("C8")).top
'        kLeft = .Range(nlc_phb_64.Range("C8")).left
'
'        'A=G*p/100
'        For i = 1 To 60
'            nlc_phb_64.Cells(i + 9, 7).Value = nlc_phb_64.Cells(i + 9, 5).Value * kWidth / 100 + kLeft - weite / 2
'            nlc_phb_64.Cells(i + 9, 8).Value = nlc_phb_64.Cells(i + 9, 6).Value * kHeight / 100 + kTop - hoehe / 2
'        Next i
'
'        For i = 1 To 60
'            nlc_phb_64.Cells(i + 9, 9).Value = nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 9, 2).Value).left
'            nlc_phb_64.Cells(i + 9, 10).Value = nlc_phb_05.Shapes(nlc_phb_64.Cells(i + 9, 2).Value).top
'        Next i
'
'
'    End With
'End Sub
Attribute VB_Name = "nlc_phb_90"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_Write_Click()
    
    If nlc_90.btnWrite_Click Then
        MsgBox nlc_Language_Msgs("successfull_db_export")
    End If
End Sub

Public Sub btn_Read_Stamm()
    
    Call nlc_91.btnStammAkt_Click
End Sub
Attribute VB_Name = "nlc_phb_91"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_PW"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim nlc_pw As String

Public Sub btn_academy_Click() 'Academy erstellen
    On Error GoTo ende
    If ActiveSheet.CodeName = "nlc_phb_PW" Then
        nlc_intern.application_off
        
        If nlc_phb_PW.Cells(22, 3).Value = "" Then
            nlc_phb_PW.Cells(22, 3).Value = "x"
            'Ebene
            nlc_phb_59.Range("I9:I15").Value = nlc_phb_59.Range("M9:M15").Value
                       
            'Zeilen umwelt ausblenden
            nlc_phb_05.Unprotect nlc_intern.get_pw
            nlc_phb_05.Rows("44:55").Hidden = False
            
            'Bl|fffd|tter ausblenden
            nlc_phb_xs.Unprotect nlc_intern.get_pw
            nlc_phb_40.Visible = xlSheetVisible
            nlc_phb_41.Visible = xlSheetVisible
            nlc_phb_42.Visible = xlSheetVisible
            nlc_phb_04.Visible = xlSheetVisible
            nlc_phb_10.Visible = xlSheetVisible

        Else
            nlc_phb_PW.Cells(22, 3).Value = ""
            'Ebene
            nlc_phb_59.Range("I9:I15").Value = nlc_phb_59.Range("L9:L15").Value
                       
            'Zeilen umwelt ausblenden
            nlc_phb_05.Unprotect nlc_intern.get_pw
            nlc_phb_05.Rows("44:55").Hidden = True
            
            'Bl|fffd|tter ausblenden
            nlc_phb_xs.Unprotect nlc_intern.get_pw
            nlc_phb_40.Visible = xlSheetVeryHidden
            nlc_phb_41.Visible = xlSheetVeryHidden
            nlc_phb_42.Visible = xlSheetVeryHidden
            nlc_phb_04.Visible = xlSheetVeryHidden
            nlc_phb_10.Visible = xlSheetVeryHidden
        End If

        nlc_phb_PW.Activate
        Call nlc_00.spracheClick
ende:
        nlc_intern.application_on
    End If
End Sub


Public Sub Logo_Import_Click()

    Dim nlc_pw As String
    Dim level As Integer
    Dim XObj As Object
    Dim Logo As String
    Dim Adresse As String
    Dim blatt As String
    Dim Wn As Single

    If ActiveSheet.CodeName = "nlc_phb_PW" Then
    
        nlc_pw = nlc_intern.get_pw
        ' Aktion vorbereiten
        On Error GoTo ErrorHandler
        nlc_intern.application_off
        Logo = ""
        If nlc_phb_PW.Range("F9").Value <> "" Then
            Adresse = nlc_phb_PW.Range("F9").Value
        Else
            Adresse = ""
        End If
        
        ' Logo importieren
        nlc_phb_PW.Select
        nlc_phb_PW.Range("F16").Select
        Logo = Application.GetOpenFilename("Company Logo (*.jpg; *.bmp; *.gif; *.png; *.tif),*.jpg;*.tif; *.bmp;*.gif; *.png", , "Import Logo")
        'MsgBox Prompt:=Logo
        If Logo = "" Or Logo = "Falsch" Then GoTo ErrorHandler
        nlc_phb_PW.Pictures("Logo").Delete
        nlc_phb_PW.Range("F11").Value = 0
        nlc_phb_PW.Pictures.Insert(Logo).Select
    
       
        Selection.ShapeRange.LockAspectRatio = msoTrue
        Selection.ShapeRange.width = 150
        If Selection.ShapeRange.Height > 60 Then Selection.ShapeRange.Height = 60
        Wn = Selection.ShapeRange.width
          
        Selection.Cut
        ActiveSheet.Pictures.Paste.Select
        
        nlc_phb_PW.Range("F13").Value = Wn
        Selection.name = "Logo"
        If Adresse <> "" Then ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=Adresse
        
        Pictures("Logo").Select
        Selection.CopyPicture
        
        nlc_phb_xs.Unprotect (nlc_pw)
        
        ' Logos austauschen
        
        Dim zeile As Integer
        
        zeile = nlc_phb_61.Range("C2").Value
        While Not IsEmpty(nlc_phb_61.Cells(zeile, 2).Value)
            If nlc_phb_61.Cells(zeile, 24).Value = "x" Then
                Call nlc_logoupload(nlc_phb_61.Cells(zeile, 2).Value, Wn)
            End If
            zeile = zeile + 1
        Wend
        
   
ErrorHandler:
    
    ' Aktion nachbereiten
    
        If nlc_phb_PW.Range("C4") = "YES" And arbeitsmappenschutz = True Then nlc_phb_xs.Protect Password:=nlc_pw, Structure:=True, Windows:=False
    
        nlc_phb_PW.Select
        nlc_phb_PW.Range("A1").Select
        nlc_intern.application_on
    
    End If
    
End Sub

Public Function nlc_logoupload(blattvba As String, weite As Single) As Integer
    
    On Error GoTo ErrorHandler
    
    ' Parameter setzen
    Dim level As Integer
    Dim nlc_pw As String
    Dim WA As Single
    Dim YA As Single
    Dim XA As Single
    Dim Wn As Single
    Dim YN As Single
    Dim XN As Single
    Dim error As String
    Dim schutz As Boolean
    Dim versteckt As Double
    Dim blatt
    
    nlc_pw = nlc_intern.get_pw
    blatt = nlc_intern.nlc_search_name(ThisWorkbook, blattvba)
    schutz = Sheets(blatt).ProtectContents
    If schutz = True Then nlc_intern.nlc_unprotect (blatt)

    versteckt = Sheets(blatt).Visible
    If Sheets(blatt).Visible <> xlSheetVisible Then Sheets(blatt).Visible = xlSheetVisible
    Sheets(blatt).Select
    Sheets(blatt).Range("A1").Select
    Wn = nlc_phb_PW.Range("F13").Value

    YA = Sheets(blatt).Pictures("Logo").top
    XA = Sheets(blatt).Pictures("Logo").left
    WA = Sheets(blatt).Pictures("Logo").width
    Sheets(blatt).Pictures("Logo").Delete
    
    YN = YA
    ActiveSheet.Paste
    Selection.name = "Logo"
    Sheets(blatt).Pictures("Logo").top = YN
    XN = XA + WA - Wn
    Sheets(blatt).Pictures("Logo").left = XN
    
    Selection.ShapeRange.LockAspectRatio = msoFalse
    Sheets(blatt).Pictures("Logo").width = weite
    Selection.ShapeRange.LockAspectRatio = msoTrue
    
    If schutz = True Then nlc_intern.nlc_protect (blatt)
    Sheets(blatt).Visible = versteckt

    Exit Function
ErrorHandler:
    error = nlc_phb_PW.Range("F11").Value
    nlc_phb_PW.Range("F11").Value = error + 1
        
End Function

Attribute VB_Name = "nlc_phb_TL"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Sub import()
    Dim sfile
    Dim sobj As Object
    Dim i As Integer
    Dim zeile As Integer
    
    On Error GoTo ende

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    sfile = Application.GetOpenFilename("Tabelle (*.xl*), *.xl*", , "Choose a project handbook!")
    If sfile = False Then
        MsgBox Prompt:="No file selected. Import cancelled!", Title:="ERROR"
    End If
    
    Set sobj = GetObject(sfile)
    
    i = 4
    
    While Not IsEmpty(sobj.Sheets("Language").Cells(i, 2).Value)
        zeile = begriff_suchen(sobj.Sheets("Language").Cells(i, 2).Value)
        If zeile <> 0 Then
            If sobj.Sheets("Language").Cells(i, 9).Value <> "" Then nlc_phb_TL.Cells(zeile, 9).Value = sobj.Sheets("Language").Cells(i, 9).Value
            If sobj.Sheets("Language").Cells(i, 10).Value <> "" Then nlc_phb_TL.Cells(zeile, 10).Value = sobj.Sheets("Language").Cells(i, 10).Value
            If sobj.Sheets("Language").Cells(i, 11).Value <> "" Then nlc_phb_TL.Cells(zeile, 11).Value = sobj.Sheets("Language").Cells(i, 11).Value
        End If
        i = i + 1
    Wend
    
ende:
    MsgBox (zeile & " - " & i)
    sobj.Close
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    

End Sub

Function begriff_suchen(begriff As String) As Integer
    Dim i As Integer
    
    begriff_suchen = 0
    i = 4
    While Not IsEmpty(nlc_phb_TL.Cells(i, 2).Value)
    If nlc_phb_TL.Cells(i, 2).Value = begriff Then
        begriff_suchen = i
        Exit Function
    End If
    i = i + 1
    Wend
End Function
Attribute VB_Name = "nlc_phb_TL2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Sub import()
    Dim sfile
    Dim sobj As Object
    Dim i As Integer
    Dim zeile As Integer
    
    On Error GoTo ende

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    sfile = Application.GetOpenFilename("Tabelle (*.xl*), *.xl*", , "Choose a project handbook!")
    If sfile = False Then
        MsgBox Prompt:="No file selected. Import cancelled!", Title:="ERROR"
    End If
    
    Set sobj = GetObject(sfile)
    
    i = 4
    
    While Not IsEmpty(sobj.Sheets("Language-Sheets").Cells(i, 2).Value)
        zeile = begriff_suchen(sobj.Sheets("Language-Sheets").Cells(i, 2).Value)
        If zeile <> 0 Then
            If sobj.Sheets("Language-Sheets").Cells(i, 8).Value <> "" Then nlc_phb_TL2.Cells(zeile, 9).Value = sobj.Sheets("Language-Sheets").Cells(i, 8).Value
            If sobj.Sheets("Language-Sheets").Cells(i, 9).Value <> "" Then nlc_phb_TL2.Cells(zeile, 9).Value = sobj.Sheets("Language-Sheets").Cells(i, 9).Value
            If sobj.Sheets("Language-Sheets").Cells(i, 10).Value <> "" Then nlc_phb_TL2.Cells(zeile, 10).Value = sobj.Sheets("Language-Sheets").Cells(i, 10).Value
            If sobj.Sheets("Language-Sheets").Cells(i, 11).Value <> "" Then nlc_phb_TL2.Cells(zeile, 11).Value = sobj.Sheets("Language-Sheets").Cells(i, 11).Value
        End If
        i = i + 1
    Wend
    
ende:
    MsgBox (zeile & " - " & i)
    sobj.Close
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    

End Sub

Function begriff_suchen(begriff As String) As Integer
    Dim i As Integer
    
    begriff_suchen = 0
    i = 4
    While Not IsEmpty(nlc_phb_TL2.Cells(i, 2).Value)
    If nlc_phb_TL2.Cells(i, 2).Value = begriff Then
        begriff_suchen = i
        Exit Function
    End If
    i = i + 1
    Wend
End Function
Attribute VB_Name = "nlc_phb_TL3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_phb_TL4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub import()
    Dim sfile
    Dim sobj As Object
    Dim i As Integer
    Dim zeile As Integer
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    sfile = Application.GetOpenFilename("Tabelle (*.xl*), *.xl*", , "Choose a project handbook!")
    If sfile = False Then
        MsgBox Prompt:="No file selected. Import cancelled!", Title:="ERROR"
    End If
    
    Set sobj = GetObject(sfile)
    
    i = 4
    
    While Not IsEmpty(sobj.Sheets("Language-Msgs").Cells(i, 2).Value)
        zeile = begriff_suchen(sobj.Sheets("Language-Msgs").Cells(i, 2).Value)
        If zeile <> 0 Then
            If sobj.Sheets("Language-Msgs").Cells(i, 9).Value <> "" Then nlc_phb_TL4.Cells(zeile, 9).Value = sobj.Sheets("Language-Msgs").Cells(i, 9).Value
            If sobj.Sheets("Language-Msgs").Cells(i, 10).Value <> "" Then nlc_phb_TL4.Cells(zeile, 10).Value = sobj.Sheets("Language-Msgs").Cells(i, 10).Value
           ' If sobj.Sheets("Language-Msgs").Cells(i, 11).Value <> "" Then nlc_phb_TL2.Cells(zeile, 11).Value = sobj.Sheets("Language-Msgs").Cells(i, 11).Value
        End If
        i = i + 1
    Wend
    
    sobj.Close
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Function begriff_suchen(begriff As String) As Integer
    Dim i As Integer
    
    begriff_suchen = 0
    i = 4
    While Not IsEmpty(nlc_phb_TL4.Cells(i, 2).Value)
    If nlc_phb_TL4.Cells(i, 2).Value = begriff Then
        begriff_suchen = i
        Exit Function
    End If
    i = i + 1
    Wend
End Function

Attribute VB_Name = "nlc_phb_TL5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Sub import()

    Dim sfile
    Dim sobj As Object
    Dim i As Integer
    Dim zeile As Integer
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    sfile = Application.GetOpenFilename("Tabelle (*.xl*), *.xl*", , "Choose a project handbook!")
    If sfile = False Then
        MsgBox Prompt:="No file selected. Import cancelled!", Title:="ERROR"
    End If
    
    Set sobj = GetObject(sfile)
    
    i = 4
    
    While Not IsEmpty(sobj.Sheets("Language-UserForms").Cells(i, 3).Value)
        zeile = begriff_suchen(sobj.Sheets("Language-UserForms").Cells(i, 3).Value, sobj.Sheets("Language-UserForms").Cells(i, 4).Value)
        If zeile <> 0 Then
            If sobj.Sheets("Language-UserForms").Cells(i, 9).Value <> "" Then nlc_phb_TL5.Cells(zeile, 9).Value = sobj.Sheets("Language-UserForms").Cells(i, 9).Value
            If sobj.Sheets("Language-UserForms").Cells(i, 10).Value <> "" Then nlc_phb_TL5.Cells(zeile, 10).Value = sobj.Sheets("Language-UserForms").Cells(i, 10).Value
            If sobj.Sheets("Language-UserForms").Cells(i, 11).Value <> "" Then nlc_phb_TL5.Cells(zeile, 11).Value = sobj.Sheets("Language-UserForms").Cells(i, 11).Value
        End If
        i = i + 1
    Wend
    
    sobj.Close
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Function begriff_suchen(begriff As String, begriff2 As String) As Integer
    Dim i As Integer
    
    begriff_suchen = 0
    i = 4
    While Not IsEmpty(nlc_phb_TL5.Cells(i, 3).Value)
    If nlc_phb_TL5.Cells(i, 3).Value = begriff And nlc_phb_TL5.Cells(i, 4).Value = begriff2 Then
        begriff_suchen = i
        Exit Function
    End If
    i = i + 1
    Wend
End Function


Attribute VB_Name = "nlc_phb_xs"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public schliessen As Boolean

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    schliessen = True
End Sub

'Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
'    On Error Resume Next
'    If schliessen = False Then
'        Call frm_DataButtons.userformclose
'        Unload frm_DataButtons
'        Err.Clear
'        Unload WP_Selection
'        Err.Clear
'        Unload frm_Kalender
'    End If
'End Sub

Private Sub Workbook_Deactivate()
    On Error Resume Next
    If schliessen = False Then
        Call frm_DataButtons.userformclose
        Unload frm_DataButtons
        Err.Clear
        Unload WP_Selection
        Err.Clear
        Unload frm_Kalender
    End If
End Sub



Private Sub Workbook_Open()
    Call nlc_intern.wb_open
    On Error Resume Next
    Application.DisplayDocumentInformationPanel = False
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
'  MsgBox "Datei-Format: " & Me.FileFormat   ' Testzeile
  Dim iFilterIndex As Integer
  Dim savepath As String
  If Me.Path = "" Then 'Pr|fffd|fen, ob Datei schon gespeichert wurde
    Application.EnableEvents = False
    Cancel = True
    If Val(left(Application.version, 2)) >= 12 Then 'Excel-Versionspr|fffd|fung
      'Excelversion 2007 und neuer
      Select Case Me.FileFormat
        Case 52             'xlOpenXMLWorkbookMacroEnabled - Excel 2007 mit Makros
          iFilterIndex = 2  'Standardm|fffd||fffd|ig xlsm  unter Excel 2007
        Case 56             'xlExcel8  - Excel 98 bis 2003
          iFilterIndex = 4  'Standardm|fffd||fffd|ig xls  unter Excel 2007
        Case Else
          iFilterIndex = 1  'Standardm|fffd||fffd|ig xlsx  unter Excel 2007
      End Select
      'Speichern unter Dialog anzeigen
      savepath = ActiveWorkbook.Path & "\" & VBA.left(ActiveWorkbook.name, VBA.Len(ActiveWorkbook.name)) & ".xlsm"
      With Application.FileDialog(2)  '2 = msoFileDialogSaveAs
        .InitialView = 2              '2 = msoFileDialogViewDetails
        .FilterIndex = iFilterIndex
        .InitialFileName = savepath
        If .Show <> False Then
          .Execute
        End If
      End With
    Else
      '|fffd|ltere Excelversionnen - SaveAs Dialog anzeigen
      Application.Dialogs(5).Show     '5 = xlDialogSaveAs

    End If
    Application.EnableEvents = True
  End If
End Sub

'Private Sub Workbook_BeforePrint(Cancel As Boolean) ' Seitenumbr|fffd|che werden auf dem Organisationsblatt angepasst
'    If ActiveSheet.name = nlc_phb_21.name Then  ' nur auf Organisationsblatt!
'        Call nlc_21.SetPageBreaks
'    End If
'End Sub


Attribute VB_Name = "nlc_pptExport"
Public Sub generatePPT()
Dim blatt As String
Dim Bereich As String
Dim appPP As Object
Dim pptVorlagePath As String
Dim aktslide As Integer
Dim ErrorNumber As String
Dim X2 As Integer
Dim colors As Variant

Dim TempString4Date As String

On Error GoTo fehler
    
    ErrorNumber = 1
    pptSavePath = ActiveWorkbook.Path
    
    If ActiveWorkbook.Path <> "" Then
        colors = ActiveWorkbook.colors(17)
        ActiveWorkbook.colors(17) = RGB(255, 255, 255)
    End If
    
    If nlc_phb_51.Range("AF49").Value = "" Then
        nlc_phb_51.Range("AF49").Value = ActiveWorkbook.Path & "\" & "next-project-light_PP-Template.pptx"
    End If
    
    If Dir(nlc_phb_51.Range("AF49").Value) = "" Then
        'MsgBox "File does not exist"
        Datei = Application.GetOpenFilename("MS-Powerpoint (*.pptx), *.pptx", , nlc_Language_Msgs("pptx_import"))
        If Datei <> "Falsch" And Datei <> "False" Then
            nlc_phb_51.Range("AF49").Value = Datei
        Else
            nlc_phb_51.Range("AF49").Value = ""
            If ActiveWorkbook.Path <> "" Then
                ActiveWorkbook.colors(17) = colors
            End If
            MsgBox nlc_Language_Msgs("phb_no_file_import_cancelled")
            Exit Sub
        End If
    End If
    
    pptVorlagePath = nlc_phb_51.Range("AF49").Value
    
     'colors = ActiveWorkbook.colors(17)

  
    
    
    Set appPP = CreateObject("Powerpoint.Application")
    Set active_wb = ActiveWorkbook

    appPP.Visible = True
    appPP.presentations.Open (pptVorlagePath)
    appPP.Activate
    
    Application.ScreenUpdating = False
    
    
    ErrorNumber = 2
    'Deckblatt (Slide 1) ###############################################
    aktslide = 1
    appPP.ActivePresentation.Slides(aktslide).Shapes("Projektname").TextFrame.TextRange.text = nlc_phb_00.Range("projektname").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("Projektdetails").TextFrame.TextRange.text = nlc_phb_00.Range("B11").Value & " " & nlc_phb_00.Range("B13").Value & Chr(10) & nlc_phb_51.Range("AF51").Value & ": " & nlc_phb_00.Range("C51").Value & ", " & nlc_phb_51.Range("AF50").Value & ": " & nlc_phb_00.Range("C52").Value & Chr(10) & nlc_phb_35.Range("L16").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("LogoText").TextFrame.TextRange.text = nlc_phb_35.Range("A2").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("PostIt").TextFrame.TextRange.text = nlc_phb_51.Range("AF52").Value
    
    'Logo kopieren
    On Error Resume Next
    nlc_phb_00.Activate
    nlc_phb_00.Pictures("projectlogo").Select
    If Err.Number = 0 Then
        Selection.Copy
        appPP.Activate
        appPP.ActivePresentation.Slides(aktslide).Select
        appPP.ActivePresentation.Slides(aktslide).Shapes.Paste
      
   
    'Skalieren und Positionieren
        X2 = appPP.ActivePresentation.Slides(aktslide).Shapes.count
        With appPP.ActiveWindow.Selection.SlideRange.Shapes(X2)
            
            .ScaleWidth (160 / (appPP.ActiveWindow.Selection.SlideRange.Shapes(X2).width / 100)) / 100, msoFalse, msoScaleFromBottomRight
            .left = 50
            .top = 395
     
            'If withShadow = True Then
                .Shadow.Transparency = 0.35
                .Shadow.Blur = 23
                .Shadow.OffsetX = 7.77
                .Shadow.OffsetY = 7.77
                .Shadow.Visible = msoTrue
                .Shadow.ForeColor.RGB = RGB(0, 0, 0)
            'End If
        End With
    End If
    
    On Error GoTo fehler
    
    'Gesamt|fffd|berblick (Slide 2) #########################################
    aktslide = 2
    appPP.ActivePresentation.Slides(aktslide).Shapes("Ueberschrift").TextFrame.TextRange.text = nlc_phb_35.Range("C5").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("Gesamtueberblick").TextFrame.TextRange.text = nlc_phb_35.Range("C6").Value
    
   
   ' PRE Ampeln
    If nlc_phb_51.Range("ampelalt_").Value = "green" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.BackColor.RGB = RGB(255, 255, 255)
        
    ElseIf nlc_phb_51.Range("ampelalt_").Value = "yellow" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.BackColor.RGB = RGB(255, 255, 255)
        
    ElseIf nlc_phb_51.Range("ampelalt_").Value = "red" Then
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.BackColor.RGB = RGB(255, 255, 255)
        
    Else
        'Alle Ampeln Wei|fffd| setzten
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Red").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Yellow").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Pre_Green").Fill.BackColor.RGB = RGB(255, 255, 255)
    
    End If
    
     'Akt Ampeln
    If nlc_phb_51.Range("ampel_").Value = "green" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.BackColor.RGB = RGB(255, 255, 255)
        
    ElseIf nlc_phb_51.Range("ampel_").Value = "yellow" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.BackColor.RGB = RGB(255, 255, 255)
        
    ElseIf nlc_phb_51.Range("ampel_").Value = "red" Then
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.BackColor.RGB = RGB(255, 255, 255)
        
    Else
        'Alle Ampeln Wei|fffd| setzten
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Red").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Yellow").Fill.BackColor.RGB = RGB(255, 255, 255)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.Solid
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").line.ForeColor.RGB = RGB(211, 211, 211)
        appPP.ActivePresentation.Slides(2).Shapes("Cur_Green").Fill.BackColor.RGB = RGB(255, 255, 255)
    
    End If

    
    'Stimmung (Slide 3) #########################################
    aktslide = 3
    
    'appPP.ActivePresentation.Slides(aktslide).Shapes("Ueberschrift").TextFrame.TextRange.text = nlc_functions.nlc_Language(nlc_phb_TL.Cells(3, 2).Value, "stimmung")
    appPP.ActivePresentation.Slides(aktslide).Shapes("Ueberschrift").TextFrame.TextRange.text = nlc_phb_35.Range("B18").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("Team Ueberschrift").TextFrame.TextRange.text = nlc_phb_35.Range("B19").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("Team text").TextFrame.TextRange.text = nlc_phb_35.Range("C19").Value
     
    appPP.ActivePresentation.Slides(aktslide).Shapes("Stakeholder Ueberschrift").TextFrame.TextRange.text = nlc_phb_35.Range("B20").Value
    appPP.ActivePresentation.Slides(aktslide).Shapes("Stakeholder text").TextFrame.TextRange.text = nlc_phb_35.Range("C20").Value
    
    
    If nlc_phb_51.Range("team_").Value = "green" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").line.ForeColor.RGB = RGB(206, 206, 207)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").line.ForeColor.RGB = RGB(206, 206, 207)
        
    ElseIf nlc_phb_51.Range("team_").Value = "yellow" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").line.ForeColor.RGB = RGB(206, 206, 207)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").line.ForeColor.RGB = RGB(206, 206, 207)
        
    ElseIf nlc_phb_51.Range("team_").Value = "red" Then
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").line.ForeColor.RGB = RGB(206, 206, 207)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").line.ForeColor.RGB = RGB(206, 206, 207)
        
    Else
         'Alle Ampeln Wei|fffd| setzten
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Red").line.ForeColor.RGB = RGB(206, 206, 207)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Yellow").line.ForeColor.RGB = RGB(206, 206, 207)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Team_Green").line.ForeColor.RGB = RGB(206, 206, 207)
    End If

    'Stakeholder Ampeln
    If nlc_phb_51.Range("umw_").Value = "green" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").line.ForeColor.RGB = RGB(206, 206, 207)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").line.ForeColor.RGB = RGB(206, 206, 207)
        
    ElseIf nlc_phb_51.Range("umw_").Value = "yellow" Then
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").line.ForeColor.RGB = RGB(206, 206, 207)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").line.ForeColor.RGB = RGB(206, 206, 207)
        
    ElseIf nlc_phb_51.Range("umw_").Value = "red" Then
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").line.ForeColor.RGB = RGB(206, 206, 207)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").line.ForeColor.RGB = RGB(206, 206, 207)
        
    Else
         'Alle Ampeln Wei|fffd| setzten
        'rote Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Red").line.ForeColor.RGB = RGB(206, 206, 207)
        'gelbe Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Yellow").line.ForeColor.RGB = RGB(206, 206, 207)
        'gr|fffd|ne Ampel auf Wei|fffd| setzen
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").Fill.Solid
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").Fill.ForeColor.RGB = RGB(255, 255, 255)
        appPP.ActivePresentation.Slides(3).Shapes("Stakeholder_Green").line.ForeColor.RGB = RGB(206, 206, 207)
    End If

    ErrorNumber = 3
    'Status (Slide 4) #########################################
    aktslide = 4
    appPP.ActivePresentation.Slides(aktslide).Shapes("Ueberschrift").TextFrame.TextRange.text = nlc_phb_35.Range("B23").Value
    blatt = nlc_phb_35.name
    Bereich = "B24:M35"
    'nlc_35.status_ladenClick
    Call generate_grafik(blatt, Bereich, appPP, "", aktslide, "W", True)
    
    'Gesamt|fffd|berblick (Slide 5) #########################################
    aktslide = 5
    appPP.ActivePresentation.Slides(aktslide).Shapes("Ueberschrift").TextFrame.TextRange.text = nlc_phb_35.Range("C5").Value
    blatt = nlc_phb_35.name
    Bereich = "B39:M54"
    Call generate_grafik(blatt, Bereich, appPP, "", aktslide, "W", True)

'    'PSP (Slide 6) #########################################
'    aktslide = 6
'    appPP.ActivePresentation.Slides(aktslide).Shapes("Ueberschrift").TextFrame.TextRange.text = nlc_phb_08.Range("A2").Value
'    blatt = nlc_phb_08.name
'
'    'Bereich = "A4:" & Cells(GetPSP_Height, GetPSP_Width).Address
'    Bereich = "A4:" & Cells(nlc_phb_92.Range("J14").Value, nlc_phb_92.Range("K14").Value).Address
'    Call generate_grafik(blatt, Bereich, appPP, "", aktslide, "H", False)
    
    nlc_phb_00.Activate
    ErrorNumber = 4
    
    TempString4Date = Format(Date, "yyyymmdd")
    
    appPP.ActivePresentation.SaveAs pptSavePath & "\Status Report" & "_" & TempString4Date & ".pptx"
    'appPP.Quit
    
     If ActiveWorkbook.Path <> "" Then
        ActiveWorkbook.colors(17) = colors
    End If
    
Exit Sub
fehler:
    If ErrorNumber = 1 Then
        MsgBox nlc_Language_Msgs("ppt_could_not_open"), Title:="Error"
    ElseIf ErrorNumber = 2 Then
        MsgBox nlc_Language_Msgs("ppt_could_not_add_Text"), Title:="Error"
    ElseIf ErrorNumber = 3 Then
        MsgBox nlc_Language_Msgs("ppt_could_not_create_Picture"), Title:="Error"
    ElseIf ErrorNumber = 4 Then
        MsgBox nlc_Language_Msgs("ppt_could_not_save"), Title:="Error"
    End If
    If ActiveWorkbook.Path <> "" Then
        ActiveWorkbook.colors(17) = colors
    End If
    'MsgBox Err.description
End Sub


Sub generate_grafik(blatt As String, Bereich As String, appPP As Object, Header As String, slide As Integer, ScaleArt As String, withShadow As Boolean)
Dim X3 As Integer
Dim B1 As Double
Dim H1 As Double
Dim B2 As Double
Dim H2 As Double
Dim Y1 As Double
Dim X1 As Double
Dim Y2 As Double
Dim X2 As Double

  
    
    'kopieren
    If Application.version = "12.0" Or Application.version = "14.0" Or Application.version = "16.0" Then ' Pr|fffd|fen ob Excel 2007 oder 2010 oder 2016
        Sheets(blatt).Activate
        Sheets(blatt).Range(Bereich).Select
        'tempZoom = ActiveWindow.Zoom
        'ActiveWindow.Zoom = 50
        'Selection.Copy
        
        Sheets(blatt).Range(Bereich).CopyPicture Format:=xlBitmap
        'ActiveWindow.Zoom = tempZoom
    
    Else
        active_wb.Activate
        Sheets(blatt).Activate
        Sheets(blatt).Range(Bereich).CopyPicture 'Format:=xlBitmap
    End If
    
    'einf|fffd|gen
    appPP.Activate
    appPP.ActivePresentation.Slides(slide).Select
    'appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").TextFrame.TextRange2.Paste
    
    'appPP.ActivePresentation.Slides(aktslide).Shapes("Team text").TextFrame.TextRange
    
    
    appPP.ActivePresentation.Slides(slide).Shapes.Paste
    
    
    
    
    'appPP.ActiveWindow.View.Paste
    'Skalieren und Positionieren
    X3 = appPP.ActivePresentation.Slides(slide).Shapes.count
    With appPP.ActiveWindow.Selection.SlideRange.Shapes(X3)
    
        B1 = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").width
        H1 = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").Height
        X1 = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").top
        Y1 = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").left
        
        B2 = .width
        H2 = .Height
        
        If (B1 / H1) < (B2 / H2) Then
            ScaleArt = "W"
        Else
            ScaleArt = "H"
        End If
        
        If ScaleArt = "W" Then
             '650 Breite ist optimal f|fffd|r Powerpoint
            '.ScaleWidth (650 / (Sheets(Blatt).Range(Bereich).width / 100)) / 100, msoFalse, msoScaleFromBottomRight
            '.ScaleWidth (900 / (Sheets(blatt).Range(Bereich).width / 100)) / 100, msoFalse, msoScaleFromBottomRight
            .width = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").width
'            .left = 37
'            .top = 98
            
            'X2 = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").left
        ElseIf ScaleArt = "H" Then
            '410 Breite ist optimal f|fffd|r Powerpoint
            '.ScaleHeight (420 / (Sheets(blatt).Range(Bereich).Height / 100)) / 100, msoFalse, msoScaleFromBottomRight
            .Height = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").Height
            '.ScaleHeight (410 / (Sheets(Blatt).Range(Bereich).Height / 100)) / 100, msoFalse, msoScaleFromBottomRight
            '.left = 37
            '.top = 98
            
        End If
        
        B2 = .width
        H2 = .Height
        
        Y2 = Y1 + (B1 / 2) - (B2 / 2)
        X2 = X1 + (H1 / 2) - (H2 / 2)
        
        .left = Y2
        .top = X2
    
   
        If withShadow = True Then
            .Shadow.Transparency = 0.35
            .Shadow.Blur = 23
            .Shadow.OffsetX = 7.77
            .Shadow.OffsetY = 7.77
            .Shadow.Visible = msoTrue
            .Shadow.ForeColor.RGB = RGB(0, 0, 0)
        End If
    End With
 
    appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").Delete
    Sheets(blatt).Range("A1").Select
    Application.CutCopyMode = False
End Sub

Private Function GetPSP_Width() As Integer
Dim level As Integer
    
    For level = 4 To 10000 Step 1
        If nlc_phb_08.Cells(1, level).Borders(xlEdgeRight).LineStyle = xlContinuous Then Exit For
    Next level
    GetPSP_Width = level
End Function

Private Function GetPSP_Height() As Integer
Dim level As Integer
    
    For level = 4 To 10000 Step 1
        If nlc_phb_08.Cells(level, 1).Borders(xlEdgeBottom).LineStyle = xlContinuous Then Exit For
    Next level
    GetPSP_Height = level - 1
End Function

Attribute VB_Name = "nls_Database"
Option Explicit
Option Private Module

Public logging As New nls_ErrorHandler
Public dbUserReply As DBAction
Private canConnect As Boolean
Private decrypt As New nls_Decrypt
Private xmlReader As New nls_XML_Reader
Dim newXML As Boolean

Public Enum DBAction
    nlsRetry
    nlsNewDB
    nlsChooseXML
    nlsImportXML
    nlsCancel
End Enum
'
''1. DB Con Required
'Public Function DbRequired() As String
'    canConnect = False
'
'    xmlReader.Salt = db_Salt
'    decrypt.Salt = db_Salt
'
'    If CheckDbPath Then
'        If TryConnect() Then
'            'Verbindung konnte aufgebaut werden
'            canConnect = True
'        Else
'            'keine Verbindung m|fffd|glich
'            Call handleRetryForm
'        End If
'    Else
'        'Kein XML Pfad hinterlegt
'        If CheckXMLPath Then
'            Call handleRetryForm
'        Else
'            Call handleChooseXML
'        End If
'    End If
'
'    If canConnect Then
'        DbRequired = getConString & ";Current Language='German'"
'    Else
'        DbRequired = ""
'    End If
'
'
'
'End Function

'Public Function Convert(Term As String, dataType As String) As Variant
'Dim cSQLType As String
'
'    If Term = "" Then
'        Convert = ""
'        Exit Function
'    End If
'
'    If cSQLType = MSSQL Then
'        Select Case dataType
'            Case SQLDataType = "Date"
'                Convert = "CONVERT(datetime, " & Term & ", 104)"
'            Case SQLDataType = "Text"
'                Convert = "CONVERT(varchar, " & Term & ")"
'            Case SQLDataType = "Zahl"
'                Convert = "CONVERT(DECIMAL(9,2), " & Term & ")"
'        End Select
'    ElseIf cSQLType = ACCESS Then
'        Select Case dataType
'            Case SQLDataType = "Date"
'                Convert = "CDATE(" & VBA.Replace(Term, "+", "&") & ")"
'            Case SQLDataType = "Text"
'                Convert = "CSTR(" & Term & ")"
'            Case SQLDataType = "Zahl"
'                Convert = "CDBL(" & Term & ")"
'        End Select
'    End If
'End Function

Public Function Parse2True() As String
Dim cSQLType As String
    cSQLType = nlc_phb_PW.Range("DBArt").Value
    If cSQLType = "MSSQL" Then
        Parse2True = "1"
    ElseIf cSQLType = "ACCESS" Then
        Parse2True = "-1"
    End If
End Function

Public Function Parse2Date(dataValue As Date) As String
    Dim tempString As String
    Dim cSQLType As String
    
    cSQLType = nlc_phb_PW.Range("DBArt").Value
   
    
    tempString = VBA.CStr(dataValue)
    
    If cSQLType = "ACCESS" Then
        tempString = "#" & VBA.Month(dataValue) & "/" & VBA.Day(dataValue) & "/" & VBA.Year(dataValue) & "#"
    ElseIf cSQLType = "MSSQL" Then
        tempString = "'" & tempString & "'"
    End If
    
    Parse2Date = tempString
End Function

Public Function DbRequired() As String
    If newXML = True Then
        DbRequired = True
        Exit Function
    End If
    
    canConnect = False
    
    decrypt.Salt = db_Salt
    
    If CheckDbPath Then
        If TryConnect() Then
            'Verbindung konnte aufgebaut werden
            canConnect = True
        Else
            'keine Verbindung m|fffd|glich
            'Call handleRetryForm
        End If
    Else
        'Kein XML Pfad hinterlegt
        If CheckXMLPath Then
            'Call handleRetryForm
        Else
            'Call handleChooseXML
        End If
    End If
    
     If canConnect Then
        DbRequired = getConString '& ";Current Language='German'"
    Else
        DbRequired = ""
    End If

End Function

'2 Change DB con
Public Sub ChangeDBCon()
    decrypt.Salt = db_Salt
    
    If CheckXMLPath Then
        Call HandleNewDbForm
    Else
        Call handleChooseXML
    End If
    
    
End Sub

Private Sub handleChooseXML()
    'XML Dateiselection ausf|fffd|hren
    If ChooseXMLFile Then
        'Datei ausgew|fffd|hlt
        Call handleReadXML
        
    Else
        'kein XML File gew|fffd|hlt
        Call HandleNewDbForm
    End If
End Sub

Private Sub handleReadXML()
    If ReadXMLValues Then
        If TryConnect(False) Then
            'Verbindung konnte aufgebaut werden
            canConnect = True
        Else
            Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_DB_Connection"), , True)
            Call HandleNewDbForm
        End If
    Else
        'XML File ung|fffd|ltig
        'Call HandleNewDbForm
    End If
End Sub

Private Function getConString() As String
Dim dbConString As String
Dim tempConString As String
'    getConString = "Provider='" & decrypt.decrypt(Range("provider").Value) & "';" & _
'                    "Data Source='" & decrypt.decrypt(Range("servername").Value) & "';" & _
'                    "Initial Catalog=" & decrypt.decrypt(Range("dbname").Value) & ";" & _
'                    "User ID=" & decrypt.decrypt(Range("username").Value) & ";" & _
'                    "pwd=" & decrypt.decrypt(Range("password").Value) & ";" & _
'                    "Connect Timeout=10"
'
                    
                    
                    
                     dbConString = "Data Source='" & decrypt.decrypt(Range("servername").Value) & "';"
    If Range("dbname").Value <> "" Then dbConString = dbConString & "Initial Catalog=" & decrypt.decrypt(Range("dbname").Value) & ";"
    If Range("username").Value <> "" Then dbConString = dbConString & "User ID=" & decrypt.decrypt(Range("username").Value) & ";"
    If Range("password").Value <> "" Then dbConString = dbConString & "pwd=" & decrypt.decrypt(Range("password").Value) & ";"
    
    
     'Check letzten Provider
    If Range("provider").Value <> "" Then
        tempConString = "Provider='" & decrypt.decrypt(Range("provider").Value) & "';" & dbConString
    Else
        tempConString = "Provider='" & decrypt.decrypt(Range("providerlist").Cells(1, 1).Value) & "';" & dbConString
        Range("provider").Value = Range("providerlist").Cells(1, 1).Value
        
    End If
    
     'next project light Version ***********************************
    'If FixedPath = True Then
        tempConString = "Provider='Microsoft.ACE.OLEDB.12.0';Data Source='" & nlc_phb_PW.Range("DBPfad").Value & "';User ID=admin;"
    'End If
    '**************************************************************
    
    
    getConString = tempConString
End Function

'Private Function CheckDbPath() As Boolean
'    If Range("servername").Value = "" Or _
'            Range("dbname").Value = "" Or _
'            Range("username").Value = "" Or _
'            Range("password").Value = "" Then
'        CheckDbPath = False
'    Else
'        CheckDbPath = True
'    End If
'End Function

Private Function CheckDbPath() As Boolean
    If Range("dbname").Value = "" Then
        If Range("servername").Value = "" Then
            CheckDbPath = False
        Else
            CheckDbPath = True
        End If
    Else
        If Range("servername").Value = "" Or _
                Range("username").Value = "" Or _
                Range("password").Value = "" Then
            CheckDbPath = False
        Else
            CheckDbPath = True
        End If
    End If
End Function

Private Function CheckXMLPath() As Boolean
    If nlc_phb_PW.Cells(31, 3).Value = "" Then
        CheckXMLPath = False
    Else
        CheckXMLPath = True
    End If
End Function

Private Sub handleRetryForm()
    'frm_DBRetry.Show
    
    'Erneut versuchen
    If dbUserReply = nlsRetry Then
        If TryConnect(False) Then
            'Verbindung konnte aufgebaut werden
            canConnect = True
            Call logging.HandleMessage(nlsInfo, nlc_Language_Msgs("msg_successDbChanged"), , True)
        Else
            'Verbindung konnte nicht aufgebaut werden
            Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_DB_Connection"), , True)
            Call handleRetryForm
        End If
    'DB |fffd|ndern
    ElseIf dbUserReply = nlsNewDB Then
        'Call HandleNewDbForm
    'Abbrechen
    ElseIf dbUserReply = nlsCancel Then
        Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_noAction"), , True)
    End If
End Sub

Private Sub HandleNewDbForm()
    'frm_NewDB.Show
    
    'XML File |fffd|ndern
    If dbUserReply = nlsChooseXML Then
        Call handleChooseXML
    'XML erneut einlesen
    ElseIf dbUserReply = nlsRetry Then
        Call handleReadXML
    'Abbrechen
    ElseIf dbUserReply = nlsCancel Then
        Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_noAction"), , True)
    End If
End Sub

'Private Function TryConnect(Optional simple As Boolean = True) As Boolean
'    Dim dbConString As String
'    'einfach mal decrypt ausf|fffd|hren um zu schauen ob der Salt geht
'    If decrypt.decrypt(Range("servername").Value) = "err" Then
'        TryConnect = False
'        Exit Function
'    End If
'
'
'
'
'
'    dbConString = "Data Source='" & decrypt.decrypt(Range("servername").Value) & "';" & _
'                            "Initial Catalog=" & decrypt.decrypt(Range("dbname").Value) & ";" & _
'                            "User ID=" & decrypt.decrypt(Range("username").Value) & ";" & _
'                            "pwd=" & decrypt.decrypt(Range("password").Value) & ";" & _
'                            "Connect Timeout=5"
'
'    Dim counter As Integer
'    Dim tempConString As String
'
'
'    'Check letzten Provider
'    If Range("provider").Value <> "" Then
'        tempConString = "Provider='" & decrypt.decrypt(Range("provider").Value) & "';" & dbConString
'    Else
'        tempConString = "Provider='" & decrypt.decrypt(Range("providerlist").Cells(1, 1).Value) & "';" & dbConString
'        Range("provider").Value = Range("providerlist").Cells(1, 1).Value
'    End If
'
'    If TryConnectToDB(tempConString) Then
'        TryConnect = True
'    End If
'
'    If simple = True Or TryConnect = True Then Exit Function
'
'    'Check alle anderen Provider
'    For counter = 1 To Range("providerlist").Rows.count Step 1
'        tempConString = "Provider='" & decrypt.decrypt(Range("providerlist").Cells(counter, 1).Value) & "';" & dbConString
'        If TryConnectToDB(tempConString) Then
'            'Wenn anderer Provider geht, dann diesen als letzt g|fffd|ltigen eintragen
'            Range("provider").Value = Range("providerlist").Cells(counter, 1).Value
'            TryConnect = True
'            Exit Function
'        End If
'    Next counter
'
'    'wenn keine Verbindung aufgebaut werden kann
'    'Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_DB_Connection"), , True)
'
'    Range("provider").Value = ""
'    TryConnect = False
'    Exit Function
'End Function

Private Function TryConnect(Optional simple As Boolean = True) As Boolean
    Dim dbConString As String
    Dim Datei As String
    
    dbConString = "Data Source='" & decrypt.decrypt(Range("servername").Value) & "';"
    If Range("dbname").Value <> "" Then dbConString = dbConString & "Initial Catalog=" & decrypt.decrypt(Range("dbname").Value) & ";"
    If Range("username").Value <> "" Then dbConString = dbConString & "User ID=" & decrypt.decrypt(Range("username").Value) & ";"
    If Range("password").Value <> "" Then dbConString = dbConString & "pwd=" & decrypt.decrypt(Range("password").Value) & ";"
    'dbConString = dbConString & "Connect Timeout=5"
    
    Dim counter As Integer
    Dim tempConString As String
    
    
    'Check letzten Provider
    If Range("provider").Value <> "" Then
        tempConString = "Provider='" & decrypt.decrypt(Range("provider").Value) & "';" & dbConString
    Else
        tempConString = "Provider='" & decrypt.decrypt(Range("providerlist").Cells(1, 1).Value) & "';" & dbConString
        Range("provider").Value = Range("providerlist").Cells(1, 1).Value
        
    End If
    
    'next project light Version ***********************************
    If nlc_phb_PW.Range("DBPfad").Value = "" Then
        nlc_phb_PW.Range("DBPfad").Value = ActiveWorkbook.Path & "\" & "next_portfolio_db.accdb"
    End If
    
    If Dir(nlc_phb_PW.Range("DBPfad").Value) = "" Then
        'MsgBox "File does not exist"
        Datei = Application.GetOpenFilename("MS-Access (*.accdb), *.accdb", , nlc_Language_Msgs("msg_mdb_select_file"))
        If Datei <> "Falsch" And Datei <> "False" Then
            nlc_phb_PW.Range("DBPfad").Value = Datei
        Else
            MsgBox nlc_Language_Msgs("msg_xml_nofileselected")
            TryConnect = False
            Exit Function
        End If
    End If
    '**************************************************************
    
    tempConString = "Provider='Microsoft.ACE.OLEDB.12.0';Data Source='" & nlc_phb_PW.Range("DBPfad").Value & "';User ID=admin;"
    If TryConnectToDB(tempConString) Then
        TryConnect = True
    End If
    
    If simple = True Or TryConnect = True Then Exit Function
    
    'Check alle anderen Provider
    For counter = 1 To Range("providerlist").Rows.count Step 1
        tempConString = "Provider='" & decrypt.decrypt(Range("providerlist").Cells(counter, 1).Value) & "';" & dbConString
        If TryConnectToDB(tempConString) Then
            'Wenn anderer Provider geht, dann diesen als letzt g|fffd|ltigen eintragen
            Range("provider").Value = Range("providerlist").Cells(counter, 1).Value
            TryConnect = True
            Exit Function
        End If
    Next counter

    'wenn keine Verbindung aufgebaut werden kann
    'Call ErrorHandler.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_DB_Connection"), , True)
    
    Range("provider").Value = ""
    TryConnect = False
    Exit Function
End Function

Private Function TryConnectToDB(conString As String) As Boolean
    Dim consql  As Object
    
    On Error GoTo fehler
    Set consql = CreateObject("ADODB.Connection") ' Connection Object
    consql.ConnectionString = conString
    consql.Open
    
    TryConnectToDB = True
    If InStr(1, conString, "ACE") Then
        nlc_phb_PW.Range("DBArt").Value = "ACCESS"
    Else
        nlc_phb_PW.Range("DBArt").Value = "MSSQL"
    End If
    consql.Close
    Exit Function

fehler:
    Set consql = Nothing
    TryConnectToDB = False
End Function

Private Function ChooseXMLFile() As Boolean
    Dim sfile As Variant
    
    On Error GoTo Error_File
    sfile = Application.GetOpenFilename("(*.xml), *.xml", , nlc_Language_Msgs("msg_xml_select_file"))
    
    If sfile = False Then
        Call logging.HandleMessage(nlsInfo, nlc_Language_Msgs("msg_xml_nofileselected"), , True)
        ChooseXMLFile = False
        Exit Function
    End If
    
    Range("XMLPfad").Value = sfile
    ChooseXMLFile = True
    Exit Function
    
Error_File:
    Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_xml_open_error"), , True)
    ChooseXMLFile = False
End Function

Private Function ReadXMLValues() As Boolean
    'Kein XML Pfad hinterlegt
    If CheckXMLPath = False Then
        Call ChooseXMLFile
    End If

    On Error GoTo fehler
    
    Dim counter As Integer
    Dim listItem As Variant
    Dim listValues As Variant
    
    xmlReader.Path = Range("XMLPfad").Value
    
    If xmlReader.loadXML(False) = False Then
        ReadXMLValues = False
        Exit Function
    End If
    
    Range("bezeichnung").Value = decrypt.decrypt(xmlReader.GetValue("bezeichnung"))
    Range("servername").Value = xmlReader.GetValue("server")
    Range("dbname").Value = xmlReader.GetValue("database")
    Range("username").Value = xmlReader.GetValue("username")
    Range("password").Value = xmlReader.GetValue("password")

    'Providerliste
    counter = Range("providerlist").Row
    listValues = xmlReader.GetListOfValues("provider")

    For Each listItem In listValues
        If counter = Range("providerlist").Row + 4 Then
            Exit For
        End If

        nlc_phb_PW.Cells(counter, Range("providerlist").Column).Value = listItem
        counter = counter + 1
    Next listItem
    
    ReadXMLValues = True
    Exit Function
fehler:
    Call logging.HandleMessage(nlsError, nlc_Language_Msgs("msg_xml_invalid"), , True)
    ReadXMLValues = False
End Function


Attribute VB_Name = "nls_Decrypt"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'Werte werden mit einem angegebenen Schl|fffd|ssel entschl|fffd|sselt
'#########################################################################################################################################

Option Explicit

'Versionsnummer
Private Const cVersion = "V1.0"

Private cSalt As String

'Version ausgeben
Public Property Get version() As String
    version = cVersion
End Property

Private Sub Class_Initialize()
    cSalt = "nls"
End Sub

'Salt setzen
Public Property Let Salt(vSalt As String)
    cSalt = vSalt
End Property

'Entschl|fffd|sselt den |fffd|bergebenen String mit dem angegebenen Salt
Public Function decrypt(strInput As String)
    'Der Salt darf nicht leer oder null sein, da es sonst zu LZF kommt!
    If cSalt = "" Or VBA.IsNull(cSalt) Then
        MsgBox "Es ist kein Salt angegeben! Decrypt wird abgebrochen.", vbCritical + vbOKOnly
        decrypt = "err"
        Exit Function
    End If
    
    Dim n As Integer, i As Integer, c As Integer
    
    For i = 1 To Len(strInput)
        n = Asc(Mid(cSalt, i Mod Len(cSalt) + 1, 1)) Mod 256
        c = (Asc(Mid(strInput, i, 1)) - n) Mod 256
        If c < 0 Then
            c = c + 256
        End If
        Mid(strInput, i, 1) = Chr(c)
    Next i
    
    decrypt = strInput
End Function
Attribute VB_Name = "nls_ErrorHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'Es wird ein Textfile erstellt mit Namen des Tools und "_Error_Log".
'Wird kein Ordner angegeben, wird in den Eigenen Dateien ein Ordner "next level solutions" erstellt und dort das Textfile gespeichert
'Wird ein Ordner angegeben, wird kein weiterer Ordner erstellt, sondern das Textfile direkt dort reingeschrieben
'#########################################################################################################################################

Option Explicit

'Versionsnummer
Private Const cVersion = "V1.0"

Private cPath As String
Private cNlsFolder As String
Private cError_Kette As String
Private cStrErrorLevel As String
Private cDebugging As Boolean

Public Enum ErrorLevel
    nlsError
    nlsWarning
    nlsInfo
End Enum

Public Enum MsgPrint
showMsgBox
printInConsole
End Enum

Private Sub Class_Initialize()
    cNlsFolder = "\next level solutions"
    cPath = getMyDocumentsFolder() & "\" & tool & "_Log.txt"
    
    cDebugging = False
End Sub

'Version ausgeben
Public Property Get version() As String
    version = cVersion
End Property

'debugging setzen
Public Property Let Debugging(ByVal vDebugging As Boolean)
    cDebugging = vDebugging
End Property

'Es wird ein Pfad gesetzt
Public Property Let pfad(ByVal vPath As String)
    cPath = vPath
End Property

'Es wird die letzte Fehlermeldung ausgelesen
Public Property Get Error_Msg() As String
    Error_Msg = cError_Kette
End Property

'Handlet Fehlermeldungen und gibt diese als jeweilige Messagebox aus
Public Sub HandleMessage(vLevel As ErrorLevel, vDescription As String, Optional vTitle As String = "", Optional vSaveError As Boolean = False)
    Select Case vLevel
        Case ErrorLevel.nlsError
            cStrErrorLevel = "ERROR"
            
            If vTitle = "" Then
                MsgBox vDescription, vbOKOnly + vbCritical
            Else
                MsgBox vDescription, vbOKOnly + vbCritical, vTitle
            End If
        Case ErrorLevel.nlsInfo
            cStrErrorLevel = "INFO"
            
            If vTitle = "" Then
                MsgBox vDescription, vbOKOnly + vbInformation
            Else
                MsgBox vDescription, vbOKOnly + vbInformation, vTitle
            End If
        Case ErrorLevel.nlsWarning
            cStrErrorLevel = "ERROR"
            
            If vTitle = "" Then
                MsgBox vDescription, vbOKOnly + vbExclamation
            Else
                MsgBox vDescription, vbOKOnly + vbExclamation, vTitle
            End If
    End Select
    
    If vSaveError Then
        Call LogMessage(vTitle, vDescription)
    End If
End Sub

'Der Fehler wird in die Logdatei geschrieben
Private Sub LogMessage(vTitle As String, vDescription As String)
    Dim WriteFile
    
    WriteFile = FreeFile()
    Open cPath For Append As #WriteFile
    
    If vTitle = "" Then
        Print #WriteFile, cStrErrorLevel & " - " & VBA.Now & ": " & vDescription
    Else
        Print #WriteFile, cStrErrorLevel & " - " & VBA.Now & ": " & vTitle & " --- " & vDescription
    End If
    Close #WriteFile
End Sub

'Handelt die Debugmessages und gibt diese nur dann aus, wenn Debugging auf true gesetzt ist
'In Klassen ist Debugging immer aktiviert, es wird jedoch keine Messagebox sondern ein Debug.Print ausgegeben
'Messages aus Klassen werden immer gespeichert.
Public Sub LogDebug(vLevel As ErrorLevel, vDescription As String, Optional vTitle As String = "", Optional vSaveError As Boolean = False, Optional vDebugging As MsgPrint = printInConsole)
    If Not cDebugging Then Exit Sub
    
    Select Case vLevel
        Case ErrorLevel.nlsError
            cStrErrorLevel = "ERROR"
            
            If vDebugging = showMsgBox Then
                If vTitle = "" Then
                    MsgBox vDescription, vbOKOnly + vbCritical
                Else
                    MsgBox vDescription, vbOKOnly + vbCritical, vTitle
                End If
            Else
                If vTitle = "" Then
                    Debug.Print vDescription
                Else
                    Debug.Print vTitle & " --- " & vDescription
                End If
            End If
        Case ErrorLevel.nlsInfo
            cStrErrorLevel = "INFO"
            
            If vDebugging = showMsgBox Then
                If vTitle = "" Then
                    MsgBox vDescription, vbOKOnly + vbInformation
                Else
                    MsgBox vDescription, vbOKOnly + vbInformation, vTitle
                End If
            Else
                If vTitle = "" Then
                    Debug.Print vDescription
                Else
                    Debug.Print vTitle & " --- " & vDescription
                End If
            End If
        Case ErrorLevel.nlsWarning
            cStrErrorLevel = "ERROR"
            
            If vDebugging = showMsgBox Then
                If vTitle = "" Then
                    MsgBox vDescription, vbOKOnly + vbExclamation
                Else
                    MsgBox vDescription, vbOKOnly + vbExclamation, vTitle
                End If
            Else
                If vTitle = "" Then
                    Debug.Print vDescription
                Else
                    Debug.Print vTitle & " --- " & vDescription
                End If
            End If
    End Select
    
    If vSaveError Then
        Call LogMessage(vTitle, vDescription)
    End If
End Sub

'Es wird der Pfad zu dem Ordner "Eigene Dateien" ausgelesen
Private Function getMyDocumentsFolder() As String
    Dim WshShell As Object
    
    Set WshShell = CreateObject("WScript.Shell")
    getMyDocumentsFolder = WshShell.SpecialFolders("MyDocuments") & cNlsFolder
    Set WshShell = Nothing
    
    If Dir(getMyDocumentsFolder, vbDirectory) = "" Then
        MkDir getMyDocumentsFolder
    End If
End Function


Attribute VB_Name = "nls_XML_Reader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'!!!Diese Klasse Verwendet die Klasse nlc_LogError um Fehler speichern zu k|fffd|nnen!!!
'Es k|fffd|nnen XML Dateien ge|fffd|ffnet und gespeichert werden.
'Wenn im angegebenen Pfad keine XML Datei vorhanden ist, wird diese automatisch erstellt.
'#########################################################################################################################################

Option Explicit

Private Const cVersion = "V1.0"

'Private cError As New nlc_LogError
Private cXMLTemp() As String
Private cPath As String
Private cTitle As String
Private cNlsFolder As String
Private cDecrypt As New nls_Decrypt
Private cErrorHandler As New nls_ErrorHandler
Private cErrorInDecrypt As Boolean

'Es werden die Standardparameter f|fffd|r die XML Schnittstelle gesetzt
Private Sub Class_Initialize()
    cNlsFolder = "\next level solutions"
    cPath = getMyDocumentsFolder() & "\" & tool & ".xml"
    ReDim cXMLTemp(0, 1)
    ReDim cOpenNodes(0)
    cDecrypt.Salt = tool
    
    Call checkVersion
End Sub

'Die Versionen der verwendeten Klassen wird gepr|fffd|ft
Private Sub checkVersion()
    Dim errorMsg As String
    
    If VBA.left(cErrorHandler.version, 3) <> "V1." Then
        errorMsg = "Wrong Logging Version!"
        GoTo handleErr
    End If
    
    If VBA.left(cDecrypt.version, 3) <> "V1." Then
        errorMsg = "Wrong Decrypt Version!"
        GoTo handleErr
    End If

    cErrorHandler.Debugging = True
    
    Exit Sub
    
handleErr:
    'Wenn andere Logging Version evtl. anderer aufruf der funktionalit|fffd|t
    If VBA.left(cErrorHandler.version, 3) = "V1." Then
        Call cErrorHandler.LogDebug(nlsError, errorMsg, "Wrong Version", True)
    End If
End Sub

'Allgemein
'Version ausgeben
Public Property Get version() As String
    version = cVersion
End Property

'Pfad ausgeben
Public Property Get Path() As String
    Path = cPath
End Property

'Pfad setzen
Public Property Let Path(vPath As String)
    cPath = vPath
End Property

Public Property Let Salt(vSalt As String)
    cDecrypt.Salt = vSalt
End Property

'Es wird der Pfad zu dem Ordner "Eigene Dateien" ausgelesen
Private Function getMyDocumentsFolder() As String
    Dim WshShell As Object

    Set WshShell = CreateObject("WScript.Shell")
    getMyDocumentsFolder = WshShell.SpecialFolders("MyDocuments") & cNlsFolder
    Set WshShell = Nothing
End Function

'Es wird ein XML File eingelesen und steht dann zum auslesen bereit
Public Function loadXML(Optional decrypt As Boolean = True) As Boolean
    'Array leeren
    ReDim cXMLTemp(0, 1)

    Dim xmlLine As String
    Dim xmlReadFile
    
    cErrorInDecrypt = False
    xmlReadFile = FreeFile()
    Open cPath For Input As #xmlReadFile

    Do Until EOF(xmlReadFile)
        If cErrorInDecrypt Then
            'Fehler beim Decrypt!
            GoTo ende
        End If
        
        Input #xmlReadFile, xmlLine

        Call addNewLineToTemp

        If UBound(cXMLTemp) = 0 Then
            Call addReadHeader(xmlLine, decrypt)
            'cXMLTemp(UBound(cXMLTemp), 0) = xmlLine
        ElseIf checkIfNode(xmlLine) Then
            Call addReadNode(xmlLine, decrypt)
            'cXMLTemp(UBound(cXMLTemp), 0) = TrimNode(xmlLine)
        Else
            Call addReadValue(xmlLine, decrypt)
            'cXMLTemp(UBound(cXMLTemp), 0) = TrimValue(xmlLine)
        End If
    Loop

    Close #xmlReadFile

ende:
    If cErrorInDecrypt Then
        loadXML = False
    Else
        loadXML = True
    End If
    cErrorInDecrypt = False
End Function

'Es wird gepr|fffd|ft die eingelesenen Zeile ein XML Knoten ist
Private Function checkIfNode(vXmlLine As String) As Boolean
    If VBA.InStr(1, vXmlLine, ">") = VBA.InStrRev(vXmlLine, ">") Then
        checkIfNode = True
    Else
        checkIfNode = False
    End If
End Function

'Es wird die die 1. Zeile aus dem XML ausgelesen
Private Function addReadHeader(vHeaderline As String, decrypt As Boolean)
    cXMLTemp(UBound(cXMLTemp), 0) = vHeaderline
End Function

'Ein wird die eingelesene Zeile als Knoten in den Temp Array gespeichert
Private Function addReadNode(vNodename As String, decrypt As Boolean)
    cXMLTemp(UBound(cXMLTemp), 0) = VBA.Mid(vNodename, VBA.InStr(1, vNodename, "<") + 1, VBA.Len(vNodename) - (VBA.InStr(1, vNodename, "<") + 1) - (VBA.Len(vNodename) - VBA.InStrRev(vNodename, ">")))
End Function

'Ein wird die eingelesene Zeile als Wert in den Temp Array gespeichert
Private Function addReadValue(vAttribute As String, decrypt As Boolean)
    Dim counter As Integer
    Dim startTagStart As Boolean
    Dim startTag As String
    Dim endTagStart As Boolean
    Dim endTag As String
    Dim attributeValue As String
    Dim attributeValueStart As Boolean
    Dim attributeValueEncoded As Boolean

    For counter = 1 To VBA.Len(vAttribute) Step 1
        If VBA.Mid(vAttribute, counter, 1) = " " And startTagStart = False Then
            GoTo weiter
        End If

        'Variante 1 immer Zeichen f|fffd|r Zeichen von links nach rechts durchgehen
        'Nachteil, wenn im Text die Zeichenkombination </ verwendet wird, wird dies als start f|fffd|r den EndTag gewertet
        'Variante 2 w|fffd|rde ich von links nach rechts den StartTag auslesen und von rechts nach links den EndTag, der rest in der mitte ist der Wert (noch nicht programmiert)
        If startTagStart = False And endTagStart = False And attributeValueStart = False Then
            If VBA.Mid(vAttribute, counter, 1) = " " Then
                GoTo weiter
            ElseIf VBA.Mid(vAttribute, counter, 1) = "<" Then
                startTagStart = True
            End If
        ElseIf startTagStart = True Then
            If VBA.Mid(vAttribute, counter, 1) = ">" Then
                startTagStart = False
                attributeValueStart = True
            Else
                If VBA.Mid(vAttribute, counter, 14) = "encoded=""true""" Then
                    attributeValueEncoded = True
                    counter = counter + 13
                Else
                    If VBA.Mid(vAttribute, counter, 1) <> " " Then
                        startTag = startTag & VBA.Mid(vAttribute, counter, 1)
                    End If
                End If
            End If
        ElseIf attributeValueStart = True Then
            If VBA.Mid(vAttribute, counter, 1) = "<" And VBA.Mid(vAttribute, counter + 1, 1) = "/" Then
                If attributeValueEncoded And decrypt Then
                    attributeValue = cDecrypt.decrypt(attributeValue)
                    
                    If attributeValue = "err" Then
                        cErrorInDecrypt = True
                        Exit Function
                    End If
                End If
                
                counter = counter + 1
                attributeValueStart = False
                endTagStart = True
            Else
                attributeValue = attributeValue & VBA.Mid(vAttribute, counter, 1)
            End If
        ElseIf endTagStart = True Then
            If VBA.Mid(vAttribute, counter, 1) = ">" Then
                endTagStart = False
                If startTag = endTag Then
                    cXMLTemp(UBound(cXMLTemp), 0) = startTag
                    cXMLTemp(UBound(cXMLTemp), 1) = attributeValue
                End If
            Else
                endTag = endTag & VBA.Mid(vAttribute, counter, 1)
            End If
        Else
            'Tag falsch eingelesen
        End If
weiter:
    Next counter

End Function

'Es wird ein Wert anhand des Tags ausgegeben
Public Function GetValue(vAttribute As String) As String
    Dim counter As Integer

    For counter = 0 To UBound(cXMLTemp) Step 1
        If cXMLTemp(counter, 0) = vAttribute Then
            GetValue = cXMLTemp(counter, 1)
            Exit Function
        End If
    Next counter

    GetValue = "NV"
End Function

'Es wird ein Array mit Werten anhand des Tags ausgelesen
Public Function GetListOfValues(vAttribute As String) As String()
    Dim counter As Integer
    Dim valueArray() As String
    ReDim valueArray(0)

    For counter = 0 To UBound(cXMLTemp) Step 1
        If cXMLTemp(counter, 0) = vAttribute Then
            If valueArray(0) <> "" Then
                ReDim Preserve valueArray(UBound(valueArray) + 1)
            End If

            valueArray(UBound(valueArray)) = cXMLTemp(counter, 1)
        End If
    Next counter

    GetListOfValues = valueArray
End Function

'Es wird eine neue Zeile im  Array angelegt (nur wenn das 1. Element nicht "" ist)
Private Function addNewLineToTemp()
    If UBound(cXMLTemp) <> 0 Or (UBound(cXMLTemp) = 0 And cXMLTemp(0, 0) <> "") Then
        Call ReDim2D(cXMLTemp, UBound(cXMLTemp) + 1, 1)
    End If
End Function

'Es wird ein 2 Dimensionaler Array ge|fffd|ndert, alle Werte bleiben enthalten
Private Sub ReDim2D(ByRef myArray As Variant, ByVal iDimX As Integer, ByVal iDimY As Integer)
  Dim MyTempArray As Variant
  Dim i As Integer
  Dim j As Integer

  MyTempArray = myArray

  ReDim myArray(iDimX, iDimY)

  For i = LBound(MyTempArray, 1) To UBound(MyTempArray, 1)
    For j = LBound(MyTempArray, 2) To UBound(MyTempArray, 2)
      If i <= iDimX And j <= iDimY Then
        myArray(i, j) = MyTempArray(i, j)
      End If
    Next j
  Next i
End Sub

' InQuest injected base64 decoded content
' x)br
' BzYKy
' BzYQ

INQUEST-PP=macro
