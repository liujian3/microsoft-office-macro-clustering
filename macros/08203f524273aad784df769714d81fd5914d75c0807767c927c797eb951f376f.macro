Attribute VB_Name = "Mod1SpellNumber"
'"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
'" FUNCTION:      fSpellNumber()
'"
'" AUTHOR & DATE: FRANCISCO ORLANDO MAGALH|fffd|ES FILHO  07 Nov 2002
'"                Microsoft MVP - Excel
'"                Santa Quit|fffd|ria-Ce - Brazil
'"
'" CONTACT:       orlando@cpap.com.br
'" WEB SITE:      http://cpap.com.br/orlando/
'"
'" DESCRIPTION:   Spell (written out) in English any cardinal number with
'"                or without fraction. The fraction part, if there be, can be written out
'"                in three ways. See FracType argument.
'"
'" ARGUMENTS:     Num - The cardinal number with or without fraction to spell:
'"                  The largest valid number: 1 trillion minus 0.01 (999,999,999,999.99)
'"                  The smallest sensitive fraction: 1 trillionth (0.000,000,000,001)
'"                FracType - 1 to 8 for manners of spelling (writing out) the fraction
'"                  (Optional - Default 3 or 1 if there is UnitNameSing):
'"                  1 - Spells the fraction in cent/cents. Ideal for coins
'"                  2 - Spells decimal point, each zero and the rest of the number as
'"                    an integer. Ideal for percents
'"                  3 - Spells the fraction in tenths to trillionths. Ideal for pure numbers
'"                  4 - Doesn't spell the fraction but writes it as a fraction with denominator
'"                    of 100, 1000, 1000000... Ideal for coins when in fractions lesser than one
'"                    cent, or even in cents, although option 1 occurs about ten times more frequently
'"                  5 - Idem adding 'Only' at the end. Ideal for coins
'"                  6 - Spells the fraction in penny/pennies. Ideal for coins
'"                  7 - Spells the fraction in penny/pence. Ideal for coins
'"                  8 - Spells the fraction in centavo/centavos only. Ideal for coins
'"                UnitNameSing - Unit name in the singular (Optional - The lack de-
'"                  note pure number)
'"                UnitNamePlur - Unit name in the plural (Optional - In the lack the
'"                  pluralization will be done automatically from UnitNameSing)
'"                UnitMasc - Denote unit gender: True (masculine) or False (femini-
'"                  ne) (Optional - Default True (masculine)) (Obs.: Although this isn't
'"                  need in English, it stays here. Maybe it was useful to translate this code
'"                  for another language. The same for the number noun flexibility.)
'"                OneThousand - Write 1.000 complete without omit 'one': True (Yes, 'one thousand')
'"                  or False (No, 'thousand') (Optional - Default True (Complete))
'"                ComBetTh - Denote comma intercalation between thousands: True (Yes)
'"                  or False (No) (Optional - Default False (Don't intercalate))
'"                LetterCase - Format letters in upper/lower case (Optional - Default 1):
'"                  1 - all lower case; 2 - Sentence case (Only the 1|fffd| is upper)
'"                  3 - Title Case (1|fffd| Upper in Each Word); 4 - ALL UPPER CASE.
'"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Option Explicit

Function fSpellNumber(Num As Double, Optional FracType As Integer, Optional UnitNameSing As String, _
        Optional UnitNamePlur As String, Optional UnitMasc As Boolean = True, _
        Optional OneThousand As Boolean = True, Optional ComBetTh As Boolean = False, _
        Optional LetterCase As Long = 1) As String
    Dim SpellInt As String
    Dim SpellFrac As String
    Dim UnitName As String
    Dim FracName As String
    Dim Signif As Long
    Dim e As String
    Dim bNoUnitNoCents As Boolean    'Spell No when zero

    If Num > 999999999999.99 Or Num < 0 Then
        fSpellNumber = "Error! (Valid values: >=0 e < 1 trillion)"
        Exit Function
    End If

    'Preparing unit name, singular and plural
    If UnitNamePlur = "" Then UnitNamePlur = IIf(UnitNameSing = "", "", fPluralize(UnitNameSing))
    'If fPluralize function fails on foreign or English word exception, UnitNamePlur argument can be used

    'Spell integer part
    SpellInt = fSpellNumberInt(Int(CDec(Num)), UnitMasc, OneThousand, ComBetTh)

    'Spell fraction part
    If FracType = 0 And UnitNameSing = "" Then FracType = 3
    If FracType = 0 And UnitNameSing <> "" Then FracType = 1
    Select Case FracType
    Case 1, 6, 7, 8    'Spell the fraction in cents, pennies, pence, centavos only. Ideal for coins
        bNoUnitNoCents = FracType <> 8    'no cenvatos only' would be redundant
        Num = Format(Num, "0.00") * 1   'Round(Num,2)
        SpellFrac = fSpellNumberInt((Num - Int(CDec(Num))) * 100, True, OneThousand, ComBetTh)

        If SpellInt = "" And SpellFrac = "" And Not bNoUnitNoCents Then SpellInt = "zero"

        'Unit Name in singular or plural
        UnitName = IIf(Num < 1, IIf(Num = 0, " " & UnitNamePlur, ""), IIf(UnitNameSing = "" Or Right(SpellInt, 1) = " ", "", " ") & IIf(Int(CDec(Num)) = 1, UnitNameSing, UnitNamePlur) & IIf(Num = Int(CDec(Num)), "", " and "))
        'Fraction name in singular or plural
        FracName = IIf(Num = Int(CDec(Num)), "", IIf(Int(CDec(Num * 100)) - Int(CDec(Num)) * 100 = 1, Choose(FracType, " cent", , , , , " penny", " penny", " centavo only"), Choose(FracType, " cents", , , , , " pennies", " pence", " centavos only")))
        If FracType = 8 And FracName = "" And SpellInt <> "zero" Then UnitName = UnitName & " only"

        If bNoUnitNoCents And UnitNamePlur <> "" And (SpellInt = "" Or SpellFrac = "") Then
            If SpellFrac = "" Then
                SpellFrac = IIf(SpellInt = "", "", " and ") & "no"
                FracName = Choose(FracType, " cents", , , , , " pennies", " pence", " centavos only")
            End If
            If SpellInt = "" Then
                SpellInt = "no"
                UnitName = " " & UnitNamePlur & " and "
            End If
        End If

        fSpellNumber = SpellInt & UnitName & SpellFrac & FracName

    Case 2    'Spell the decimal point, each zero and the rest of the number as integer. Ideal for percent.
        SpellFrac = Num - Int(CDec(Num))
        If SpellFrac = 0 Then
            fSpellNumber = SpellInt
        Else
            SpellFrac = Format(SpellFrac, "0.############")
            SpellFrac = Mid(SpellFrac, 3, 15)
            fSpellNumber = IIf(SpellInt = "", "zero", SpellInt) & " point"
            Do While Left(SpellFrac, 1) = "0"
                fSpellNumber = fSpellNumber & " zero"
                SpellFrac = Mid(SpellFrac, 2, 15)
            Loop
            fSpellNumber = fSpellNumber & " " & fSpellNumberInt(SpellFrac * 1, UnitMasc, OneThousand, ComBetTh)
        End If

        If fSpellNumber = "" Then fSpellNumber = "zero"
        UnitName = IIf(Num = 1, UnitNameSing, UnitNamePlur)
        fSpellNumber = fSpellNumber & IIf(UnitName <> "", " ", "") & UnitName

    Case 3    'Spell the fraction from tenth to billionth. Ideal for pure number.
        SpellFrac = Num - Int(CDec(Num))
        If SpellFrac = 0 Then
            SpellFrac = ""
        Else
            SpellFrac = Format(SpellFrac, "0.############")
            Signif = Len(SpellFrac) - 2
            If Signif > 3 And Signif <> 6 And Signif <> 9 And Signif <> 12 Then Signif = Int(CDec(Signif / 3)) * 3 + 3
            If Signif > 0 Then
                SpellFrac = Format(SpellFrac, "0.000000000000")
                SpellFrac = fSpellNumberInt(Mid(SpellFrac, 3, Signif) * 1, True, OneThousand, ComBetTh)
                FracName = Choose(Signif, "tenth", "hundredth", "thousandth", , , "millionth", , , "billionth", , , "trillionth")
                FracName = " " & FracName & IIf(SpellFrac = "one", "", "s")
            Else
                SpellFrac = ""
            End If
        End If

        If SpellInt = "" And SpellFrac = "" Then SpellInt = "zero"

        If UnitNameSing = "" Then
            fSpellNumber = SpellInt & IIf(SpellInt <> "" And SpellFrac <> "", ", and ", "") & SpellFrac & FracName
        Else
            'Unit name in singular or plural
            UnitName = IIf(Num < 1, IIf(Num = 0, " " & UnitNamePlur, ""), IIf(UnitNameSing = "" Or Right(SpellInt, 1) = " ", "", " ") & IIf(Int(CDec(Num)) = 1, UnitNameSing, UnitNamePlur) & IIf(Num = Int(CDec(Num)), "", " and "))
            'Fraction name in singular or plural
            FracName = IIf(Num = Int(CDec(Num)), "", FracName & " of " & UnitNameSing)

            fSpellNumber = SpellInt & UnitName & SpellFrac & FracName
        End If

    Case 4, 5   'Not spell the fraction but write as a fraction with a denominator of 100, 1000, 1000000... Ideal for coins
        SpellFrac = Num - Int(CDec(Num))
        If SpellFrac = 0 Then
            SpellFrac = IIf(FracType = 4, "no/100", "")
        Else
            SpellFrac = Format(SpellFrac, "0.############")
            Signif = Len(SpellFrac) - 2
            If Signif > 3 And Signif <> 6 And Signif <> 9 And Signif <> 12 Then Signif = Int(CDec(Signif / 3)) * 3 + 3
            If Signif > 1 Then
                SpellFrac = (Num - Int(CDec(Num))) * 10 ^ Signif
                If FracType = 5 And Signif < 4 Then SpellFrac = String(Signif - Len(SpellFrac), "0") & SpellFrac
                SpellFrac = SpellFrac & "/" & 10 ^ Signif
            Else
                SpellFrac = (Num - Int(CDec(Num))) * 10 ^ 2
                SpellFrac = SpellFrac & "/100"
            End If
        End If

        If SpellInt = "" Then SpellInt = IIf(FracType = 4, "zero", "")

        'Unit Name always in plural
        UnitName = UnitNamePlur
        If SpellInt = "" And SpellFrac = "" Then
            fSpellNumber = "zero"
        Else
            fSpellNumber = SpellInt & IIf(SpellInt = "" Or SpellFrac = "", "", " and ") _
                    & SpellFrac & IIf(UnitName = "", "", " " & UnitName) _
                    & IIf(FracType = 4, "", " only")
        End If
    End Select

    Select Case LetterCase
    Case 1
        fSpellNumber = LCase(fSpellNumber)
    Case 2
        fSpellNumber = UCase(Left(fSpellNumber, 1)) & Mid(fSpellNumber, 2, 5000)
    Case 3
        fSpellNumber = StrConv(fSpellNumber, vbProperCase)
        fSpellNumber = MyReplace(fSpellNumber, " And ", " and ")
    Case 4
        fSpellNumber = StrConv(fSpellNumber, vbUpperCase)
    End Select

    'Preserve letter case before a point in UnitName
    Dim lPos As Long
    Dim lPos1 As Long
    Do While InStr(lPos + 1, UnitName, ".") > 1
        lPos = InStr(lPos + 1, UnitName, ".")
        lPos1 = InStr(lPos1 + 1, fSpellNumber, ".")
        fSpellNumber = Left(fSpellNumber, lPos1 - 2) & Mid(UnitName, lPos - 1, 1) & Mid(fSpellNumber, lPos1)
    Loop
End Function

Private Function fSpellNumberInt(Num As Double, UnitMasc As Boolean, OneThousand, ComBetTh As Boolean) As String
'English grammar:
'General rule: Don't intercalate the 'and' conjunction and neither comma between thousand position.
'Exception: If posterior thousand were smaller then 100 or were integer hundred (100,200,300...)
'Many grammarians don't accept this exception while others accept comma.
'The ConjExc variable enables this exception.
'The ComBetTh argument puts comma between thousands.

    Dim NumText As String
    Dim Hu As String
    Dim Th As String
    Dim Mi As String
    Dim Bi As String
    Dim f As String
    Dim ConjExc As Boolean    'Put Conjunction Before of Thousand with only one word (alone or compound)
    ConjExc = False
    If ComBetTh Then ConjExc = False

    If Num = 0 Then
        fSpellNumberInt = ""
        Exit Function
    End If

    NumText = Format(Num, "000,000,000,000")

    '1|fffd| Position of thousand, hundreds
    Hu = Mid(NumText, 13, 3)
    '2|fffd| Position of thousand, thousands
    Th = Mid(NumText, 9, 3)
    '3|fffd| Position of thousand, Millions
    Mi = Mid(NumText, 5, 3)
    '4|fffd| Position of thousand, Billions
    Bi = Mid(NumText, 1, 3)

    f = fThousandText(Bi, UnitMasc) & IIf(Bi > 0, IIf(Bi > 1, " billion", " billion"), "")

    f = f & IIf(ComBetTh And Bi > 0 And Mi > 0, ", ", IIf(Bi > 0 And Mi > 0, " ", ""))
    f = f & IIf(ConjExc And Bi > 0 And Mi > 0 And (Mi < 100 Or Right(Mi, 2) = "00"), "and ", "")

    f = f & fThousandText(Mi, UnitMasc) & IIf(Mi > 0, IIf(Mi > 1, " million", " million"), "")

    f = f & IIf(ComBetTh And Bi + Mi > 0 And Th > 0, ", ", IIf(Bi + Mi > 0 And Th > 0, " ", ""))
    f = f & IIf(ConjExc And Bi + Mi > 0 And Th > 0 And (Th < 100 Or Right(Th, 2) = "00"), "and ", "")

    f = f & fThousandText(Th, UnitMasc) & IIf(Th > 0, IIf(Th > 1, " thousand", " thousand"), "")
    If Not OneThousand Then If f = "one thousand" Then f = "thousand"    'Omit 'one' of 'one thousand'

    f = f & IIf(ComBetTh And Bi + Mi + Th > 0 And Hu > 0, ", ", IIf(Bi + Mi + Th > 0 And Hu > 0, " ", ""))
    f = f & IIf(ConjExc And Bi + Mi + Th > 0 And Hu > 0 And (Hu < 100 Or Right(Hu, 2) = "00"), "and ", "")

    f = f & fThousandText(Hu, UnitMasc) & IIf(Hu > 0, ",", "")

    f = IIf(Right(f, 1) = ",", Mid(f, 1, Len(f) - 1), f)
    '   f = IIf(Right(f, 2) = "on", f & " of", f)
    '   f = IIf(Right(f, 3) = "ons", f & " of", f)
    fSpellNumberInt = f
End Function

Private Function fThousandText(NumText As String, UnitMasc As Boolean)
'English grammar:
'General rule: Don't intercalate the 'and' conjunction between hundreds,
'tenths and unities but it's recommend a hyphen between tenths and unities.

    Dim UnitText As String
    Dim TenthText As String
    Dim HundredText As String
    Const ConjTen_Un = "-"    'Conjunction between Tenth and Unit
    Const ConjHun_Ten = " "    'Conjunction between Hundred and Tenth

    '  Unit text
    If Mid(NumText, 2, 1) <> "1" Then
        UnitText = Choose(Mid(NumText, 3, 1) + 1, "", IIf(UnitMasc, "one", "one"), _
                IIf(UnitMasc, "two", "two"), "three", "four", "five", "six", _
                "seven", "eight", "nine")
    Else
        UnitText = ""
    End If

    'Tenth texto
    If Mid(NumText, 2, 1) <> "1" Then
        TenthText = Choose(Mid(NumText, 2, 1) + 1, "", "ten", "twenty", _
                "thirty", "forty", "fifty", "sixty", "seventy", _
                "eighty", "ninety")
    Else
        TenthText = Choose(Mid(NumText, 3, 1) + 1, "ten", "eleven", _
                "twelve", "thirteen", "fourteen", "fifteen", "sixteen", _
                "seventeen", "eighteen", "nineteen")
    End If

    'Hundred text
    If UnitMasc Then
        HundredText = Choose(Mid(NumText, 1, 1) + 1, "", "one hundred", "two hundred", _
                "three hundred", "four hundred", "five hundred", "six hundred", _
                "seven hundred", "eight hundred", "nine hundred")
    Else
        HundredText = Choose(Mid(NumText, 1, 1) + 1, "", "one hundred", "two hundred", _
                "three hundred", "four hundred", "five hundred", "six hundred", _
                "seven hundred", "eight hundred", "nine hundred")
    End If
    If Mid(NumText, 1, 1) = "1" And Mid(NumText, 2, 2) = "00" Then HundredText = "one hundred"

    'Thousand text
    fThousandText = HundredText & IIf(Mid(NumText, 2, 2) * 1 > 0 And HundredText <> "", ConjHun_Ten, "") _
            & TenthText & IIf(Mid(NumText, 2, 2) * 1 <= 19 Or Right(NumText, 1) = "0", "", ConjTen_Un) _
            & UnitText
End Function

Function fPluralize(Sing As String) As String
    Dim e As String
    Dim e3 As String
    Dim IsLCase As Boolean
    Static sLastSing As String
    Static sLastPluralize As String

    If Sing = sLastSing Then fPluralize = sLastPluralize: Exit Function    'Accelerator

    IsLCase = Right(Sing, 1) = LCase(Right(Sing, 1))

    'General rule:
    fPluralize = IIf(Sing = "", "", Sing & IIf(IsLCase, "s", "S"))

    'Exception: (Almost all)
    ' Noun end in s, z, x, ch and sh
    e = LCase(Right(Sing, 1))
    If e = "s" Or e = "z" Or e = "x" Then fPluralize = Sing & IIf(IsLCase, "es", "ES")
    e = LCase(Right(Sing, 2))
    If e = "ch" Or e = "sh" Then fPluralize = Sing & IIf(IsLCase, "es", "ES")

    ' Noun end in o
    If LCase(Right(Sing, 1)) = "o" And Len(Sing) > 2 Then
        e = LCase(Left(Right(Sing, 2), 1))
        e3 = LCase(Sing)
        If e = "a" Or e = "e" Or e = "i" Or e = "o" Or e = "u" Then            'preceded by vowels
        ElseIf e3 = "peso" Or e3 = "homo" Or e3 = "portico" Or e3 = "pro" Or e3 = "quarto" Then            'some exceptions - latin words
        ElseIf e3 = "piano" Or e3 = "cello" Or e3 = "solo" Then            'some exceptions - musical words
        ElseIf e3 = "albino" Or e3 = "armadillo" Or e3 = "auto" Or e3 = "bravo" Or e3 = "bronco" _
                Or e3 = "canto" Or e3 = "casino" Or e3 = "combo" Or e3 = "gazebo" Or e3 = "inferno" _
                Or e3 = "kimono" Or e3 = "logo" Or e3 = "maraschino" Or e3 = "poncho" Or e3 = "sombrero" _
                Or e3 = "taco" Or e3 = "torso" Or e3 = "tobacco" Or e3 = "typo" Then            'some exceptions - others
        Else
            fPluralize = Sing & IIf(IsLCase, "es", "ES")
        End If
    End If

    ' Noun end in y preceded by a consonant or not proper
    If LCase(Right(Sing, 1)) = "y" And Len(Sing) > 2 Then
        e = LCase(Left(Right(Sing, 2), 1))
        If Not (e = "a" Or e = "e" Or e = "i" Or e = "o" Or e = "u" Or UCase(Left(Sing, 1)) = Left(Sing, 1)) Then fPluralize = Left(Sing, Len(Sing) - 1) & IIf(IsLCase, "ies", "IES")
    End If
    ' Noun end in f
    e = LCase(Right(Sing, 2))
    e3 = LCase(Right(Sing, 3))
    If LCase(Right(Sing, 1)) = "f" And Not (e3 = "oof" Or e3 = "ief" _
            Or e = "rf" Or e = "ff") Then fPluralize = Left(Sing, Len(Sing) - 1) & IIf(IsLCase, "ves", "VES")
    ' Noun end in fe
    If e = "fe" Then fPluralize = Left(Sing, Len(Sing) - 2) & IIf(IsLCase, "ves", "VES")

    sLastSing = Sing
    sLastPluralize = fPluralize
End Function

Private Function MyReplace(vText As String, vTxtFind As String, vTxtRep As String)
'Word 6.0 VBA doesn't have Replace function
    Dim lPos As Long
    lPos = 1 - Len(vTxtRep)
vStart:
    lPos = InStr(lPos + Len(vTxtRep), vText, vTxtFind)
    If lPos = 0 Or vTxtFind = "" Then
        MyReplace = vText
        Exit Function
    End If
    vText = Left(vText, lPos - 1) & vTxtRep & Right(vText, Len(vText) - lPos - Len(vTxtFind) + 1)
    GoTo vStart
End Function



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
