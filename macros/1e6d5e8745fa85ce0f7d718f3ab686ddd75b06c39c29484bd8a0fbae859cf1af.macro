Attribute VB_Name = "AveryAddIn"
Option Explicit

Private Const REGISTRYAVERYASSISTANTPATHPATH As String = "SOFTWARE\Avery\Avery Assistant\3.1\Common"
Private Const REGISTRYAVERYASSISTANTPATHKEY As String = "AppPath"

Private Const REGISTRYMICROSOFTOFFICEPATHPREFIX As String = "SOFTWARE\Microsoft\Office\"
Private Const REGISTRYMICROSOFTOFFICEPATHSUFFIX As String = "Addins\AveryAddIn.Connect"
Private Const REGISTRYMICROSOFTOFFICEAPPEXCEL As String = "Excel\"
Private Const REGISTRYKEYALWAYSWITHDATA As String = "AlwaysWithData"

Private Const EXCELMENUEXTRASID As Integer = 30007          'ID des 'Extras'-Men|fffd|s in Excel
Private Const FILEPARAMETEREXCEL As String = " -Type 2 -FileName "

Private Const BUTTONMENUID As String = "Avery Assistant Menu Button"

Private Const RES_STRING_201  As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Wizard. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|."
Private Const RES_STRING_301  As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
Private Const RES_STRING_1001 As String = "&Avery Wizard..."
Private Const RES_STRING_1002 As String = "Avery Wizard"

Sub Auto_Open()
    MenuItemAddGeneric EXCELMENUEXTRASID
End Sub

Sub Auto_Close()
End Sub

'H|fffd|ngt unseren Men|fffd|punkt in eine Office-Anwendung
Private Sub MenuItemAddGeneric(nMenuID As Integer)
    Dim cbCommandBars As Office.CommandBars
    Dim cbMenuBar As Office.CommandBar
    Dim cbExtrasBar As Office.CommandBarControl
    
    On Error Resume Next
    
    Set cbCommandBars = Application.CommandBars
    
    Set cbMenuBar = cbCommandBars.Item("Menu Bar")
    If (cbMenuBar Is Nothing) Then
        'Excel hat eine etwas andere Struktur
        Set cbMenuBar = cbCommandBars.Item("Worksheet Menu Bar")
    End If
    
    If Not (cbMenuBar Is Nothing) Then
        If (nMenuID > 0) Then
            'Men|fffd|-ID wurde |fffd|bergeben -> Men|fffd| suchen
            Dim nMenuNo As Integer
            nMenuNo = ItemNoByIDGet(cbMenuBar, nMenuID)
            Set cbExtrasBar = cbMenuBar.Controls.Item(nMenuNo)
        Else
            'Keine Men|fffd|-ID |fffd|bergeben -> Men|fffd| nach (deutschem) Namen suchen
            Set cbExtrasBar = cbMenuBar.Controls.Item("E&xtras")
        End If
        
        If Not (cbExtrasBar Is Nothing) Then
            Dim strMenuItem As String
            strMenuItem = RES_STRING_1001
            Dim strToolTip As String
            strToolTip = RES_STRING_1002
            
            'Falls es den Men|fffd|eintrag schon gibt, l|fffd|schen
            Dim btnToolbarAssistant As Office.CommandBarButton     'Button in der Toolbar
            Dim btnMenuAssistant As Office.CommandBarButton        'Button im Men|fffd|

            Set btnMenuAssistant = cbExtrasBar.Controls.Item(strMenuItem)
            If Not (btnMenuAssistant Is Nothing) Then
                btnMenuAssistant.Delete
                Set btnMenuAssistant = Nothing
            End If
            'Neuen Button anlegen
            If (btnMenuAssistant Is Nothing) Then
                Set btnMenuAssistant = cbExtrasBar.Controls.Add(Type:=msoControlButton, Temporary:=True)
                btnMenuAssistant.Caption = strMenuItem
                btnMenuAssistant.Tag = BUTTONMENUID
                btnMenuAssistant.OnAction = "AveryAddIn.OnClickExcel"
                btnMenuAssistant.Visible = True
                btnMenuAssistant.TooltipText = strToolTip
                btnMenuAssistant.Style = msoButtonIconAndCaption
                btnMenuAssistant.BeginGroup = True
                'TODO: Icon
                'MenuItemIconSet m_btnMenuAssistant
            End If
        End If
    End If
    
    Set cbCommandBars = Nothing
    Set cbMenuBar = Nothing
    Set cbExtrasBar = Nothing
End Sub

'Liefert ein Item aus einer CommandBar anhand der ID zur|fffd|ck
' Wenn die ID nicht gefunden wird, wird -1 zur|fffd|ckgeliefert
Private Function ItemNoByIDGet(ByRef colSearch As Office.CommandBar, nID As Integer)
    Dim nCount As Integer
    nCount = colSearch.Controls.Count
    
    Dim i As Integer
    Dim cbcItem As CommandBarControl
    Dim bFound As Boolean
    
    bFound = False
    'Alle Items durchgehen
    For i = 1 To nCount
        Set cbcItem = colSearch.Controls.Item(i)
        If (cbcItem.Id = nID) Then
            'Gesuchtes Item gefunden
            bFound = True
            Exit For
        End If
    Next i
    
    'R|fffd|ckgabewert bestimmen
    If (bFound = True) Then
        ItemNoByIDGet = i
    Else
        ItemNoByIDGet = -1
    End If
End Function

'In Excel wurde auf den Avery-Button geklickt
Private Sub OnClickExcel()

    Dim strTempExcelFile As String

    'Excel-Daten vorbereiten
    If (ExcelSelectionCopy(strTempExcelFile) = True) Then
    
        'Assistenten starten
        AZWizardStart strTempExcelFile
    End If

End Sub

'Kopiert die Selektion in ein neues Excel-Spreadsheet
Private Function ExcelSelectionCopy(ByRef strWordFile As String) As Boolean
    'TODO: Diese Methode |fffd|ber das Clipboard ist sehr schlecht. Eine andere Methode w|fffd|re w|fffd|nschenswert.
    
    On Error Resume Next
    
    Dim xlApp As Excel.Application
    Set xlApp = Application
    
    If (xlApp.Selection.Count <= 1) Then
        'Nicht wirklich brauchbare Auswahl vorhanden
        If (ContinueWithoutSelectionGet() = False) Then
            ' Ohne eine brauchbare Selektion soll nichtweitergemacht werden
            Dim strInvalidSelection As String
            strInvalidSelection = RES_STRING_301
            MsgBox strInvalidSelection
            
            ExcelSelectionCopy = False
            Exit Function
        End If
    End If
            
    xlApp.Selection.Copy                'Auswahl kopieren
    
    'Neue Word-Datei anlegen
    Dim wdApp As Word.Application
    Dim wdDoc As Word.Document
    Set wdApp = CreateObject("Word.Application")
    wdApp.WindowState = wdWindowStateMinimize
    wdApp.ScreenUpdating = False
    
    Set wdDoc = wdApp.Documents.Add()
    wdDoc.ActiveWindow.WindowState = wdWindowStateMinimize
    wdApp.Visible = True
    
    'Pasten
    wdDoc.Content.Paste
    
    'Name der Datei holen
    strWordFile = TempFile.TempFilenameGet
    
    'Datei speichern und schlie|fffd|en
    wdDoc.SaveAs FileName:=strWordFile, AddToRecentFiles:=False
    wdDoc.Close
    
    wdApp.ScreenUpdating = True
    
    ExcelSelectionCopy = True
    
End Function

'Startet den AZWizard
' Wenn strParameterFile leer ist, wird der Assistent ohne Kommandozeile gestartet
Public Sub AZWizardStart(strParameterFile As String)
    
    'Daten muessen aus der Registratur gelesen werden
    Dim strPath As Variant
    
    ' Name und Path des Assistenten
    strPath = RegistryFunctions.QueryValue_LocalMachine(REGISTRYAVERYASSISTANTPATHPATH, REGISTRYAVERYASSISTANTPATHKEY)
    
    If Not (strPath = "") Then
        'Wir haben einen Pfad zum Assistenten
        If Not (strParameterFile = "") Then
            ' Parameter angegeben: Assistent mit Parametern starten
            Shell strPath & FILEPARAMETEREXCEL & Chr(34) & strParameterFile & Chr(34), vbNormalFocus
        Else
            'Assistent ohne Parameter starten
            Shell strPath, vbNormalFocus
        End If
        
    Else
        'Keine Pfadangabe zum Assistenten
        Dim strErrorPathMissing As String
        strErrorPathMissing = RES_STRING_201
        
        MsgBox strErrorPathMissing
    End If
    
End Sub


'Liefert zur|fffd|ck, ob der Assistent bei einer ung|fffd|ltigen Selektion auch gestartet werden soll
Private Function ContinueWithoutSelectionGet() As Boolean
    Dim nAlwaysWithData As Integer
    Dim strRegistryPath As String
    
    'Excel
    strRegistryPath = REGISTRYMICROSOFTOFFICEPATHPREFIX & REGISTRYMICROSOFTOFFICEAPPEXCEL & REGISTRYMICROSOFTOFFICEPATHSUFFIX
    
    nAlwaysWithData = RegistryFunctions.QueryIntValue_LocalMachine(strRegistryPath, REGISTRYKEYALWAYSWITHDATA, 0)
    
    If (nAlwaysWithData = 1) Then
        ContinueWithoutSelectionGet = False
    Else
        ContinueWithoutSelectionGet = True
    End If
    
End Function

Attribute VB_Name = "RegistryFunctions"
Option Explicit
   
Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, ByVal lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueExString Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As String, lpcbData As Long) As Long
Private Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Long, lpcbData As Long) As Long
Private Declare Function RegQueryValueExNULL Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As Long, lpcbData As Long) As Long
Private Declare Function RegSetValueExString Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal lpValue As String, ByVal cbData As Long) As Long
Private Declare Function RegSetValueExLong Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpValue As Long, ByVal cbData As Long) As Long
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long

Const HKEY_CURRENT_USER = &H80000001
Const HKEY_LOCAL_MACHINE = &H80000002

Const KEY_QUERY_VALUE = &H1
Const KEY_ALL_ACCESS = &H3F

Const REG_OPTION_NON_VOLATILE = 0

Const ERROR_NONE = 0

Const REG_SZ = 1
Const REG_EXPAND_SZ = 2
Const REG_DWORD = 4

' Diese Funktion liefert den Inhalt eines Registry-Keys (Sektion HKEY_LOCAL_MACHINE)
Public Function QueryValue_LocalMachine(strKeyName As String, strValueName As String)

   Dim lRetVal As Long      ' API Rueckgabewert
   Dim hKey As Long         ' Handle fuer Registry
   Dim vValue As Variant    ' Wert eines Registry-Keys

   lRetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE, strKeyName, 0, KEY_QUERY_VALUE, hKey)

   lRetVal = QueryValueEx(hKey, strValueName, vValue)
   QueryValue_LocalMachine = vValue
   RegCloseKey (hKey)

End Function

' Diese Funktion liefert den Inhalt eines Registry-Keys (Sektion HKEY_CURRENT_USER)
Public Function QueryValue_CurrentUser(strKeyName As String, strValueName As String)

   Dim lRetVal As Long      ' API Rueckgabewert
   Dim hKey As Long         ' Handle fuer Registry
   Dim vValue As Variant    ' Wert eines Registry-Keys

   lRetVal = RegOpenKeyEx(HKEY_CURRENT_USER, strKeyName, 0, KEY_QUERY_VALUE, hKey)

   lRetVal = QueryValueEx(hKey, strValueName, vValue)
   QueryValue_CurrentUser = vValue
   RegCloseKey (hKey)

End Function

'Diese Funktion setzt einen String in die Registry (Sektion HKEY_CURRENT_USER)
Public Function SetStringValue_CurrentUser(strKeyName As String, strValueName As String, strValue As String)
    Dim lRetVal As Long      'R|fffd|ckgabewert
    Dim hKey As Long
    Dim vValue As Variant
    
    lRetVal = OpenKeyEx(HKEY_CURRENT_USER, strKeyName, KEY_ALL_ACCESS, hKey)
    
    vValue = strValue
    
    lRetVal = SetValueEx(hKey, strValueName, REG_SZ, vValue)
    
    RegCloseKey (hKey)
    
End Function

'Diese Funktion setzt einen Integer in die Registry (Sektion HKEY_CURRENT_USER)
Public Function SetIntValue_CurrentUser(strKeyName As String, strValueName As String, nValue As Integer)
    Dim lRetVal As Long      'R|fffd|ckgabewert
    Dim hKey As Long
    Dim vValue As Variant
    
    lRetVal = OpenKeyEx(HKEY_CURRENT_USER, strKeyName, KEY_ALL_ACCESS, hKey)
    
    vValue = nValue
    
    lRetVal = SetValueEx(hKey, strValueName, REG_DWORD, vValue)
    
    RegCloseKey (hKey)
    
End Function

'Liest einen Integer aus der Registry (Sektion HKEY_CURRENT_USER)
Public Function QueryIntValue_CurrentUser(strKeyName As String, strValueName As String, nDefaultValue As Integer) As Integer
    Dim lRetVal As Long      'R|fffd|ckgabewert
    Dim hKey As Long
    Dim vValue As Variant
    
    lRetVal = RegOpenKeyEx(HKEY_CURRENT_USER, strKeyName, 0, KEY_QUERY_VALUE, hKey)
    
    lRetVal = QueryValueEx(hKey, strValueName, vValue)
    If lRetVal = ERROR_NONE Then
        QueryIntValue_CurrentUser = vValue
    Else
        QueryIntValue_CurrentUser = nDefaultValue
    End If
    
    RegCloseKey (hKey)
End Function

'Liest einen Integer aus der Registry (Sektion HKEY_LOCAL_MACHINE)
Public Function QueryIntValue_LocalMachine(strKeyName As String, strValueName As String, nDefaultValue As Integer) As Integer
    Dim lRetVal As Long      'R|fffd|ckgabewert
    Dim hKey As Long
    Dim vValue As Variant
    
    lRetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE, strKeyName, 0, KEY_QUERY_VALUE, hKey)
    
    lRetVal = QueryValueEx(hKey, strValueName, vValue)
    If lRetVal = ERROR_NONE Then
        QueryIntValue_LocalMachine = vValue
    Else
        QueryIntValue_LocalMachine = nDefaultValue
    End If
    
    RegCloseKey (hKey)
End Function

'Liest einen Wert aus der Registry
Private Function QueryValueEx(ByVal lhKey As Long, ByVal szValueName As String, vValue As Variant) As Long

   Dim cch As Long
   Dim lrc As Long
   Dim lType As Long
   Dim lValue As Long
   Dim sValue As String

   On Error GoTo QueryValueExError

   ' Determine the size and type of data to be read
   lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
   If lrc <> ERROR_NONE Then Error 5
   Select Case lType
       ' Strings
      Case REG_SZ:
         sValue = String(cch, 0)
           lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, sValue, cch)
           If lrc = ERROR_NONE Then
               vValue = Left$(sValue, cch - 1)
           Else
               vValue = Empty
           End If
      Case REG_EXPAND_SZ:
         sValue = String(cch, 0)
         lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, sValue, cch)
         If lrc = ERROR_NONE Then
             vValue = Left$(sValue, cch - 1)
         Else
             vValue = Empty
         End If
      ' DWORD
      Case REG_DWORD:
         lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, lValue, cch)
         If lrc = ERROR_NONE Then vValue = lValue
       Case Else
         ' andere Datentypen unterstuetzen wir nicht
         lrc = -1
   End Select

QueryValueExError:
   QueryValueEx = lrc
   Exit Function
End Function

' Schreibt einen Wert in die Registry
Public Function SetValueEx(ByVal hKey As Long, sValueName As String, lType As Long, vValue As Variant) As Long
    Dim lValue As Long
    Dim sValue As String
    Dim lRetVal As Long
    Select Case lType
        Case REG_SZ
            sValue = vValue & Chr$(0)
            lRetVal = RegSetValueExString(hKey, sValueName, 0&, lType, sValue, Len(sValue))
        Case REG_DWORD
            lValue = vValue
            lRetVal = RegSetValueExLong(hKey, sValueName, 0&, lType, lValue, 4)
    End Select
End Function

'|fffd|ffnet einen Registry Key bzw. legt ihn an
Private Function OpenKeyEx(hKeyTop As Long, strKeyName As String, samDesired As Long, hKeyResult As Long) As Long
    Dim lRetVal As Long
    
    lRetVal = RegOpenKeyEx(hKeyTop, strKeyName, 0, samDesired, hKeyResult)
    If Not (lRetVal = ERROR_NONE) Then
        'Key konnte nicht ge|fffd|ffnet werden -> versuchen, anzulegen
        lRetVal = CreateKeyEx(hKeyTop, strKeyName, hKeyResult)
        
        If (lRetVal = ERROR_NONE) Then
            lRetVal = RegOpenKeyEx(hKeyTop, strKeyName, 0, samDesired, hKeyResult)
        End If
    End If
    
    OpenKeyEx = lRetVal
End Function

'Legt einen Registry Key an
Private Function CreateKeyEx(hKeyTop As Long, strKeyName As String, hKeyResult As Long) As Long
    On Error GoTo Error
    
    Dim strSubKey As String
    Dim strRemaining As String
    Dim nBackslashPos As Integer
    Dim hKey As Long
    Dim bCriticalError As Boolean
    Dim lDisposition As Long
    Dim lResult As Long
    
    hKey = hKeyTop
    bCriticalError = False
    
    strRemaining = strKeyName
    nBackslashPos = InStr(1, strRemaining, "\", vbBinaryCompare)
    
    While (nBackslashPos > 0) And (bCriticalError = False)
        
        strSubKey = Left(strRemaining, nBackslashPos - 1)
        strRemaining = Right(strRemaining, Len(strRemaining) - nBackslashPos)
        
        'Schl|fffd|ssel |fffd|ffnen oder anlegen
        lResult = RegOpenKeyEx(hKey, strSubKey, 0, KEY_ALL_ACCESS, hKeyResult)
        If Not (lResult = ERROR_NONE) Then
            'Schl|fffd|ssel konnte nicht ge|fffd|ffnet werden -> anlegen
            lResult = RegCreateKeyEx(hKey, strSubKey, 0, vbNull, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 0&, hKeyResult, lDisposition)
        End If
        If Not (lResult = ERROR_NONE) Then
            'Fehler
            bCriticalError = True
            CreateKeyEx = lResult
        Else
            'Schl|fffd|ssel offen oder angelegt
            nBackslashPos = InStr(1, strRemaining, "\", vbBinaryCompare)
            hKey = hKeyResult
        End If
    Wend
    
    strSubKey = strRemaining
    
    'Letzten Schl|fffd|ssel |fffd|ffnen oder anlegen
    lResult = RegCreateKeyEx(hKey, strSubKey, 0&, vbNullString, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 0&, hKeyResult, lDisposition)
    If Not (lResult = ERROR_NONE) Then
        'Fehler
        bCriticalError = True
        CreateKeyEx = lResult
    Else
        'Schl|fffd|ssel offen oder angelegt
        nBackslashPos = InStr(1, strRemaining, "\", vbBinaryCompare)
    End If
    
Error:
    CreateKeyEx = lResult
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TempFile"
Option Explicit

Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Private Declare Function GetTempFileName Lib "kernel32" Alias "GetTempFileNameA" (ByVal lpszPath As String, ByVal lpPrefixString As String, ByVal wUnique As Long, ByVal lpTempFileName As String) As Long
Private Declare Function DeleteFile Lib "kernel32.dll" Alias "DeleteFileA" (ByVal lpFileName As String) As Long

Private Const MAXPATHLENGTH As Integer = 1024
Private Const MAXFILENAMELENGTH As Integer = 576

Private Const TEMPINITIALS As String = "AWZ"

Public Function TempFilenameGet() As String

    Dim strPathTemp As String * MAXPATHLENGTH
    Dim strTempFileName As String * MAXFILENAMELENGTH
    Dim nRet As Long
    
    nRet = GetTempPath(MAXPATHLENGTH, strPathTemp)
    If (nRet > 0 And nRet < MAXPATHLENGTH) Then
        nRet = GetTempFileName(strPathTemp, TEMPINITIALS, 0, strTempFileName)
        
        If nRet <> 0 Then
            Dim strFinalFileName As String
            strFinalFileName = Left$(strTempFileName, InStr(strTempFileName, vbNullChar) - 1)
            
            ' Datei wurde angelegt-> wieder l|fffd|schen
            DeleteFile strFinalFileName
                        
            TempFilenameGet = strFinalFileName
        End If
    End If

End Function



Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


' InQuest injected base64 decoded content
' I4X0

INQUEST-PP=macro
