Attribute VB_Name = "CommonRoutines"
Public Sub DeleteSheetIfExists(name As String)

    On Error GoTo ExitSub

    Application.Interactive = False
    Application.DisplayAlerts = False

    Dim sheet As Worksheet
    
    Set sheet = ActiveWorkbook.Worksheets(name)
    
    sheet.Delete
    
ExitSub:

    Application.Interactive = True
    Application.DisplayAlerts = True

End Sub

Public Sub HideSheetIfExists(name As String)

    On Error GoTo ExitSub


    Dim sheet As Worksheet
    
    Set sheet = ActiveWorkbook.Worksheets(name)
    
    sheet.Visible = xlSheetHidden
    
    
ExitSub:

End Sub

Public Function DuplicateTemplate(TemplateName As String, _
                                    AnalysisItems() As String, _
                                    SheetColor As Long, _
                                    HideChartInds() As String, _
                                    InitialSort() As String, _
                                    PositionSheetName As String, _
                                    Optional AfterPosSheetNm As Boolean = True) As Worksheet

    On Error GoTo ErrHandler

    Dim TemplateSheet As Worksheet
    Dim NewSheet As Worksheet
    Dim btn As Button
    
    Set TemplateSheet = ActiveWorkbook.Worksheets(TemplateName)
    
    If TemplateName Like "{Default*" Then
        If AfterPosSheetNm Then
            TemplateSheet.Copy After:=Worksheets(PositionSheetName)
        Else
            TemplateSheet.Copy Before:=Worksheets(PositionSheetName)
        End If
        Application.CutCopyMode = False
    Else
        TemplateSheet.Activate
    End If
    
    Set NewSheet = ActiveWorkbook.ActiveSheet
    
    NewSheet.Tab.Color = SheetColor
    'NewSheet.Range("a3").Value = SheetTitle
    
'    If UCase(HideChart) = "YES" Then
'
'        Dim cos As ChartObjects
'        Set cos = NewSheet.ChartObjects
'        If cos.count = 1 Then
'
'            cos(1).Delete
'
'        End If
'
'    End If
    
    Dim i As Integer
    Dim CurrentLeft, CurrentTop, ButtonWidth As Integer
    Dim LOBFlag As String
    CurrentLeft = 10
    CurrentTop = 75
    ButtonWidth = 175
    
    If UBound(AnalysisItems) = 0 Then
    Else
        For i = 1 To UBound(AnalysisItems) + 1
            Set btn = NewSheet.Buttons.Add(CurrentLeft, CurrentTop, ButtonWidth, 18)
            With btn
                  .OnAction = "ChangeAnalysisItem"
                  .Caption = AnalysisItems(i - 1)
'                  .name = AnalysisItems(i - 1) & HideChartInds(i - 1)
                  LOBFlag = GetAnalysisLOBFlag(AnalysisItems(i - 1))
                  .name = "CB" & CStr(i) & "~~" & _
                            HideChartInds(i - 1) & "~~" & _
                            InitialSort(i - 1) & "~~" & _
                            LOBFlag
                  .Font.name = "Calibri"
                  .Font.FontStyle = "Bold"
                  .Font.Color = RGB(255, 0, 0)
                  .Font.Size = 12
            End With
            If i Mod 5 = 0 Then
                CurrentLeft = 10
                CurrentTop = CurrentTop + 19
            Else
                CurrentLeft = CurrentLeft + ButtonWidth + 5
            End If
            Set btn = Nothing
        Next
    End If
    
    Set DuplicateTemplate = NewSheet
    
Exit Function

    
ErrHandler:

    Debug.Print "DuplicateTemplate"
    Debug.Print Err.Description
    Err.Clear

End Function

Public Sub ChangeAnalysisItem()
                
    On Error Resume Next
    
    Dim cos As ChartObjects
    Dim thissheet As Worksheet
    
    'Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    
    Set thissheet = ActiveSheet
    
    
    
    'ClearFilters thisSheet
    
    Dim AnalysisItem As String
    Dim idx As Long
    Dim tempStr As String
    Dim LOBFlag As String
    Dim InitialSort As String
    AnalysisItem = Trim(Application.Caller)
    Dim sh As Shape
    Set sh = thissheet.Shapes(AnalysisItem)
    
'    If UCase(HideChart) = "YES" Then
'
'
'    End If
    
    Dim tmpAnalysisItem As String
    tmpAnalysisItem = Replace(AnalysisItem, "~~", vbTab)
    Dim tmpButtonParms() As String
    tmpButtonParms = Split(tmpAnalysisItem, vbTab)
    If UBound(tmpButtonParms) > 0 Then
        If UCase(tmpButtonParms(1)) = "YES" Then
            Set cos = thissheet.ChartObjects
            If cos.count = 1 Then
                cos(1).Visible = False
            End If
        Else
            Set cos = thissheet.ChartObjects
            If cos.count = 1 Then
                cos(1).Visible = True
            End If
        End If
        If UBound(tmpButtonParms) > 1 Then
            InitialSort = tmpButtonParms(2)
        Else
            InitialSort = "4"
        End If
        If UBound(tmpButtonParms) > 2 Then
            LOBFlag = tmpButtonParms(3)
        Else
            LOBFlag = ""
        End If
    Else
        Set cos = thissheet.ChartObjects
        If cos.count = 1 Then
            cos(1).Visible = True
        End If
        LOBFlag = ""
    End If
    AnalysisItem = sh.AlternativeText
    
    Dim pt As PivotTable
    Set pt = thissheet.PivotTables(1)
    
    Err.Clear
    SetAnalysisItem thissheet, pt, AnalysisItem, LOBFlag
    Err.Clear
    'Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True

    thissheet.Range("AA1").Value = InitialSort
    SortStandardPivotTable

End Sub

Public Function RouteSheetWithAnalysisItem(AnalysisItem As String, RouteToSheet As Worksheet) As Boolean
                
    On Error Resume Next
    
    Dim cos As ChartObjects
    
    'Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    Dim idx As Long
    Dim tempStr As String
    Dim LOBFlag As String
    Dim InitialSort As String
    Dim sh As Shape
    
    If RouteToSheet.Buttons.count > 0 Then
        For Each sh In RouteToSheet.Shapes
            If sh.AlternativeText = AnalysisItem Then
                Exit For
            End If
        Next sh
        
        If sh Is Nothing Then
            RouteSheetWithAnalysisItem = False
            'Application.Calculation = xlCalculationAutomatic
            Application.ScreenUpdating = True
            Application.DisplayAlerts = True
            Application.EnableEvents = True
            Exit Function
        End If
    Else
    End If
    
'    If UCase(HideChart) = "YES" Then
'
'
'    End If
    
    Dim tmpAnalysisItem As String
    tmpAnalysisItem = Replace(sh.name, "~~", vbTab)
    Dim tmpButtonParms() As String
    tmpButtonParms = Split(tmpAnalysisItem, vbTab)
    If UBound(tmpButtonParms) > 0 Then
        If UCase(tmpButtonParms(1)) = "YES" Then
            Set cos = RouteToSheet.ChartObjects
            If cos.count = 1 Then
                cos(1).Visible = False
            End If
        Else
            Set cos = RouteToSheet.ChartObjects
            If cos.count = 1 Then
                cos(1).Visible = True
            End If
        End If
        If UBound(tmpButtonParms) > 1 Then
            InitialSort = tmpButtonParms(2)
        Else
            InitialSort = "4"
        End If
        If UBound(tmpButtonParms) > 2 Then
            LOBFlag = tmpButtonParms(3)
        Else
            LOBFlag = ""
        End If
    Else
        Set cos = RouteToSheet.ChartObjects
        If cos.count = 1 Then
            cos(1).Visible = True
        End If
        LOBFlag = ""
    End If
    'AnalysisItem = sh.AlternativeText
    If LOBFlag = "WC" Then
        If Worksheets(SheetName_Contents).Range("HasWorkersComp").Value = "N" Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    ElseIf LOBFlag = "AUTO" Then
        If Worksheets(SheetName_Contents).Range("HasAuto").Value = "N" Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    ElseIf AnalysisItem = "Site Level 1" Then
        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Level 1]]")) = 0 Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    ElseIf AnalysisItem = "Site Level 2" Then
        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Level 2]]")) = 0 Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    ElseIf AnalysisItem = "Site Level 3" Then
        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Level 3]]")) = 0 Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    ElseIf AnalysisItem = "Location" Then
        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Lowest Name]]")) = 0 Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    ElseIf AnalysisItem = "Location 2" Then
        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Lowest]]")) = 0 Then
            RouteSheetWithAnalysisItem = False
            Exit Function
        End If
    End If
    
    Dim pt As PivotTable
    Set pt = RouteToSheet.PivotTables(1)
    
    Err.Clear
    SetAnalysisItem RouteToSheet, pt, AnalysisItem, LOBFlag
    Err.Clear
    'Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True

    thissheet.Range("AA1").Value = InitialSort
    SortStandardPivotTable
    RouteSheetWithAnalysisItem = True
    
    RouteToSheet.Activate

End Function

Public Sub SetAnalysisItem(thissheet As Worksheet, _
                            pt As PivotTable, _
                            AnalysisItem As String, _
                            Optional LOBFlag As String = "")
                
    'SortStandardPivotTable
    
    Dim ChartObjs As ChartObjects
    Dim ChartObj As ChartObject
    Dim thisChart As Chart
    Set ChartObjs = thissheet.ChartObjects
    If ChartObjs.count > 0 Then
        Set ChartObj = ChartObjs(1)
        Set thisChart = ChartObj.Chart
        thisChart.ChartTitle.Text = AnalysisItem
    End If
    
    pt.RowFields(1).ClearAllFilters
    
    Dim pfs As Variant
    pfs = GetPageFieldNames(pt, AnalysisItem)
    
    pt.AddFields RowFields:=AnalysisItem
    pt.AddFields RowFields:=AnalysisItem, PageFields:=pfs
    
    pt.RowRange.HorizontalAlignment = xlLeft
    
'    Dim SpecificNumberFormat As String
'    SpecificNumberFormat = GetAnalysisNumberFormat(AnalysisItem)
    If thissheet.name = "When" Then
        If AnalysisItem = "Year/Month" Then
            pt.RowFields("Year/Month").NumberFormat = "mmmm-yy"
            If thisChart Is Nothing Then
            Else
                thisChart.Axes(xlCategory).TickLabels.NumberFormat = "mmmm-yy"
                thisChart.HasAxis(xlCategory, xlSecondary) = True
                thisChart.Axes(xlCategory, xlSecondary).TickLabels.NumberFormat = "[$-409]mmmm-yy;@"
            End If
        End If
    End If
    
    Dim PivotFld As PivotField
    Dim PivotItm As PivotItem
    
    If Len(LOBFlag) > 0 Then
        Set PivotFld = pt.RowFields(AnalysisItem)
        PivotFld.ClearAllFilters
        For Each PivotItm In PivotFld.PivotItems
            If PivotItm.name Like "*Other Coverage*" Then
                PivotItm.Visible = False
                Exit For
            End If
        Next
    End If
    
    Range("$A$1").Select

End Sub

Public Sub ClearFilters(sheet As Worksheet)

    Dim TempPT As PivotTable
    Dim tempPTs As PivotTables
'    For Each TempPT In sheet.PivotTables
'        Dim TempPF As PivotField
'        For Each TempPF In TempPT.PivotFields
'            If Len(Trim(TempPF.name)) > 0 Then _
'                TempPF.ClearAllFilters
'        Next
'    Next

    Set tempPTs = sheet.PivotTables
    For i = 1 To tempPTs.count
        Set TempPT = tempPTs(i)
        TempPT.ClearAllFilters
    Next

End Sub

Private Function GetPageFieldNames(thisPivot As PivotTable, AnalysisItemName) As Variant

    On Error GoTo ErrHandler

    Dim Dimensions As Variant
    
    Dimensions = Array("Coverage", "Claim Level Coverage", "Sub Coverage", "Policy Symbol", _
        "Site Level 1", "Site Level 2", "Site Level 3", "Site Lowest Name", "Site Lowest", _
        "Loss Location State", _
        "Claim Status", "Claim Setup Type", "Calendar Year", "Policy Year", "Weekday", _
        "WC Occupation", "WC Tenure Band", _
        "Accident Category", "Accident Description", "NCCI Injury", "Agent of Loss", _
        "Net Incurred Band")


    Dim a() As String
    ReDim a(0 To 50)
    Dim v As Variant
    
    Dim i As Integer
    i = -1
    
        
    Dim count As Integer
    count = UBound(Dimensions)
    

    Dim FieldIndex As Integer
  
    
    Dim fieldName As String
    
    For FieldIndex = count To 0 Step -1
    
        fieldName = Dimensions(FieldIndex)
        
        If AnalysisItemName <> fieldName Then
            i = i + 1
            a(i) = fieldName
        End If
    
    Next
    
 
    ReDim Preserve a(0 To i)
    v = a
    
    GetPageFieldNames = v
        
    
Exit Function

    
ErrHandler:

    Debug.Print "GetPageFieldNames"
    Debug.Print Err.Description
    Err.Clear


End Function

Public Sub InitializeNewSheet(TemplateName As String, _
                                NewSheet As Worksheet, _
                                SheetName As String, _
                                pt As PivotTable, _
                                InitialSortItem As String)

    On Error GoTo ErrHandler

    'Me.Activate
    
    'Force initial formatting for new sheet
    
    NewSheet.Activate
    
    Dim CleanedSheetName As String
    CleanedSheetName = Replace(SheetName, "/", "-")
    CleanedSheetName = Replace(CleanedSheetName, "\", "-")
    CleanedSheetName = Replace(CleanedSheetName, ":", "-")
    CleanedSheetName = Replace(CleanedSheetName, "?", "-")
    CleanedSheetName = Replace(CleanedSheetName, "*", "-")
    CleanedSheetName = Replace(CleanedSheetName, "[", "-")
    CleanedSheetName = Replace(CleanedSheetName, "]", "-")
    CleanedSheetName = Left(CleanedSheetName, 31)
    
    NewSheet.name = CleanedSheetName
    
    If InitialSortItem <> 0 Then
        SetInitialSort NewSheet, pt, InitialSortItem
    End If
    
    Worksheets(CleanedSheetName).InitializeWorksheet
    
Exit Sub
    
ErrHandler:

    Debug.Print "InitializeNewSheet: " & SheetName
    Debug.Print Err.Description
    Err.Clear
                
End Sub

Public Sub SetInitialSort(NewSheet As Worksheet, pt As PivotTable, InitialSortItem As String)

    On Error GoTo ErrHandler
                
                
    NewSheet.Range("AA1").Value = InitialSortItem
    
    SortStandardPivotTable
                
                
Exit Sub
    
ErrHandler:

    Debug.Print "SetInitialSort: " & NewSheet.name & "-" & Str(InitialSortItem)
    Debug.Print Err.Description
    Err.Clear
                
End Sub


Public Sub SetPrintArea(thissheet As Worksheet, thisPivot As PivotTable)


    
    On Error GoTo ErrHandler
    Application.Calculation = xlCalculationManual
    Dim currScrnUpdVal As Variant
    Dim currDispAlrtVal As Variant
    Dim currEnableEventsVal As Variant
    currScrnUpdVal = Application.ScreenUpdating
    currDispAlrtVal = Application.DisplayAlerts
    currEnableEventsVal = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    
    Dim PTRange As Range

    Dim RowCount As Long, ColumnCount As Integer
    Dim TempPT As PivotTable
    RowCount = 0
    For Each TempPT In thissheet.PivotTables
        Set PTRange = TempPT.TableRange2
        If PTRange.Rows.count + PTRange.Row - 1 > RowCount Then
            RowCount = PTRange.Rows.count + PTRange.Row - 1
        End If
        ColumnCount = ColumnCount + PTRange.Columns.count
    Next
    
    If thissheet.name = "Claim Trending" Then ColumnCount = ColumnCount + 3
    If thissheet.name = "WC Lag Analysis" Then ColumnCount = ColumnCount + 1
    'What's Included
    If thissheet.name = "What's Included" Then
        If RowCount < 40 Then RowCount = 40
    End If
    If ColumnCount < Range("L1").Column Then
        ColumnCount = Range("L1").Column
    End If

    Dim PrintRange As Range
    Set PrintRange = thissheet.Range("a1").Resize(RowCount, ColumnCount)
    
    With thissheet.PageSetup
    
        .PrintArea = PrintRange.Address
    
        .Orientation = xlLandscape
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
        .CenterHorizontally = True
        .BottomMargin = Application.InchesToPoints(1.25)
        .TopMargin = Application.InchesToPoints(0.5)
    
        If thissheet.PivotTables.count > 0 Then
        
            Dim TitleRows As Range, FirstPivot As PivotTable
            Set FirstPivot = thissheet.PivotTables(1)
            
            .PrintTitleRows = FirstPivot.ColumnRange.Columns.Address
    
    
        End If
        
        .LeftFooter = thissheet.name
        .CenterFooter = "&G" & Chr(10) & "Page &P of &N"
        .RightFooter = "Version: &D, &T"
    End With
    

    
    Dim ScrollAddress As String
    If Left(thissheet.name, 1) <> "{" Then
        ScrollAddress = PrintRange.Resize(RowCount + 10, ColumnCount + 5).Address
    Else
        ScrollAddress = ""
    End If
    
    thissheet.ScrollArea = ScrollAddress
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal

Exit Sub

ErrHandler:

    Debug.Print Err.Description
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal


End Sub

Public Sub CreateAnalysisSheets()

    On Error GoTo ErrHandler
    
    Application.Calculation = xlCalculationManual
    Dim currScrnUpdVal As Variant
    Dim currDispAlrtVal As Variant
    Dim currEnableEventsVal As Variant
    currScrnUpdVal = Application.ScreenUpdating
    currDispAlrtVal = Application.DisplayAlerts
    currEnableEventsVal = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    'DeleteAnalysisSheets
    
    ClearAllFilters
    
'    If ActiveWorkbook.Sheets(SheetName_PivotData).ListObjects.count > 0 Then
'    Else
'        ActiveWorkbook.Sheets(SheetName_PivotData).CreateListObjectClaimsTbl 1
'    End If
    
    Dim SheetList As ListObject
    
    Set SheetList = GetSheetList()
    
    If Not SheetList Is Nothing Then
    
    
        Dim i, j, x As Integer
        Dim SheetName As String
        Dim SheetTitle As String
        Dim SheetColor As Long
        Dim TemplateName As String
        Dim AnalysisItemName() As String
        Dim HideChartInds() As String
        Dim InitialSort() As String
        Dim AnalysisItemsCount As Integer
        Dim AdjAnalysisItemName() As String
        Dim AdjHideChartInds() As String
        Dim AdjInitialSort() As String
        Dim InitialSortItem As String
        Dim NewSheet As Worksheet
        Dim LOBFlag As String
        
        Dim Row As ListRow
        Dim HasWorkersCompRng, HasAutoRng As Range
        Set HasWorkersCompRng = _
            Worksheets(SheetName_Contents).Range("HasWorkersComp")
        Set HasAutoRng = _
            Worksheets(SheetName_Contents).Range("HasAuto")
        
        For i = SheetList.ListRows.count To 1 Step -1
            
            Set Row = SheetList.ListRows(i)
            
            SheetName = Row.Range(1, 1).Text
            
            Application.StatusBar = "Creating Sheet " & SheetName
            
            TemplateName = Row.Range(1, 3).Text
            
            Dim tmpString As String
            tmpString = Replace(Row.Range(1, 4).Text, Chr(10), "")
            tmpString = Replace(tmpString, Chr(13), "")
            
            AnalysisItemName = Split(tmpString, ",")
            
            tmpString = Replace(Row.Range(1, 6).Text, Chr(10), "")
            tmpString = Replace(tmpString, Chr(13), "")
            
            HideChartInds = Split(tmpString, ",")
            
            tmpString = Replace(Row.Range(1, 5).Text, Chr(10), "")
            tmpString = Replace(tmpString, Chr(13), "")
            
            InitialSort = Split(tmpString, ",")
            
            AnalysisItemsCount = 0
            
            'HideChart = Row.Range(1, 6).Text
            'SheetTitle = Row.Range(1, 2).Text
            SheetColor = Row.Range.Interior.Color
            
            If SheetName = "WC Lag Analysis" Then
                If HasWorkersCompRng.Value = "N" Then
                    AnalysisItemsCount = 0
                Else
                    AnalysisItemsCount = 1
                End If
            Else
                For x = 0 To UBound(AnalysisItemName)
                    LOBFlag = GetAnalysisLOBFlag(AnalysisItemName(x))
                    If HasWorkersCompRng.Value = "N" Then
                        If InStr(1, LOBFlag, "WC", vbTextCompare) > 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    End If
                    If HasAutoRng.Value = "N" Then
                        If InStr(1, LOBFlag, "AUTO", vbTextCompare) > 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    End If
                    If AnalysisItemName(x) = "Site Level 1" Then
                        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Level 1]]")) = 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    ElseIf AnalysisItemName(x) = "Site Level 2" Then
                        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Level 2]]")) = 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    ElseIf AnalysisItemName(x) = "Site Level 3" Then
                        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Level 3]]")) = 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    ElseIf AnalysisItemName(x) = "Location" Then
                        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Lowest Name]]")) = 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    ElseIf AnalysisItemName(x) = "Location 2" Then
                        If WorksheetFunction.CountA(Range("ClaimsTbl[[#Data],[Site Lowest]]")) = 0 Then
                            AnalysisItemName(x) = ""
                        End If
                    End If
                    If AnalysisItemName(x) <> "" Then AnalysisItemsCount = AnalysisItemsCount + 1
                Next x
            End If
            
            
            If AnalysisItemsCount > 0 Then
                ReDim AdjAnalysisItemName(0 To AnalysisItemsCount - 1)
                ReDim AdjHideChartInds(0 To AnalysisItemsCount - 1)
                ReDim AdjInitialSort(0 To AnalysisItemsCount - 1)
                j = 0
                For x = 0 To UBound(AnalysisItemName)
                    If AnalysisItemName(x) <> "" Then
                        AdjAnalysisItemName(j) = AnalysisItemName(x)
                        AdjHideChartInds(j) = HideChartInds(x)
                        AdjInitialSort(j) = InitialSort(x)
                        j = j + 1
                    End If
                Next x
                
                Set NewSheet = DuplicateTemplate(TemplateName, _
                                                    AdjAnalysisItemName, _
                                                    SheetColor, _
                                                    AdjHideChartInds, _
                                                    AdjInitialSort, _
                                                    SheetName_DefaultTemplate)
                
    
                
                Dim pt As PivotTable
                Set pt = NewSheet.PivotTables(1)
                
                Dim btn As Button
                If Len(Trim(Row.Range(1, 6).Text)) = 0 _
                Or UBound(AdjAnalysisItemName) = 0 Then
                Else
                    If AdjHideChartInds(0) = "Yes" Then
                        Dim cos As ChartObjects
                        Set cos = NewSheet.ChartObjects
                        If cos.count = 1 Then
                            cos(1).Visible = False
                        End If
                    End If
                End If
                
                InitialSortItem = 4
                If Left(TemplateName, 8) = "{Default" Then
                    InitialSortItem = InitialSort(0)
                    SetAnalysisItem NewSheet, pt, _
                        AdjAnalysisItemName(0), _
                        GetAnalysisLOBFlag(AdjAnalysisItemName(0))
                ElseIf Left(TemplateName, 12) = "{LagAnalysis" Then
                    Set PivotFld = pt.RowFields(1)
                    PivotFld.ClearAllFilters
                    For Each PivotItm In PivotFld.PivotItems
                        If PivotItm.name Like "*Other Coverage*" Then
                            PivotItm.Visible = False
                            Exit For
                        End If
                    Next
                    Set pt = NewSheet.PivotTables(2)
                    Set PivotFld = pt.RowFields(1)
                    PivotFld.ClearAllFilters
                    For Each PivotItm In PivotFld.PivotItems
                        If PivotItm.name Like "*Other Coverage*" Then
                            PivotItm.Visible = False
                            Exit For
                        End If
                    Next
                    Set pt = NewSheet.PivotTables(1)
                    SetPrintArea NewSheet, pt
                ElseIf Left(TemplateName, 12) Like "{Trend*" Then
                    InitialSortItem = 1
                    NewSheet.name = SheetName
                    SetPrintArea NewSheet, pt
                End If
                
       
                InitializeNewSheet TemplateName, NewSheet, SheetName, pt, InitialSortItem
                
                    
                Set NewSheet = Nothing
                Set pt = Nothing
            End If
        
        Next i
    
    End If

    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal

Exit Sub
    
ErrHandler:

    Debug.Print "CreateAnalysisSheets"
    Debug.Print Err.Description
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal
    Err.Clear

End Sub


Public Sub ClearAllFilters()

    Dim sheet As Worksheet
    For Each sheet In ActiveWorkbook.Sheets
        If sheet.name Like "{*Template}" Then
            ClearFilters sheet
        End If
    Next
       

End Sub


Public Function GetSheetList() As ListObject

    On Error Resume Next
    
    Dim ControlPanelSheet As Worksheet
    Set ControlPanelSheet = ActiveWorkbook.Sheets(SheetName_ControlPanel)
    Set GetSheetList = ControlPanelSheet.ListObjects("SheetList")
    
End Function

Private Function GetAnalysisLOBFlag(AnalysisFieldName As String) As String

    On Error Resume Next
    
    Dim FieldMappingSheet As Worksheet
    Set FieldMappingSheet = Worksheets(SheetName_FieldMapping)
    
    Dim LOBFlag As String
    
    LOBFlag = WorksheetFunction.VLookup(Trim(AnalysisFieldName), _
                                                FieldMappingSheet.Range(ListName_FieldMapping), _
                                                2, False)
    
    If Err.Number <> 0 Then
        LOBFlag = ""
        Err.Clear
    End If
    
    GetAnalysisLOBFlag = LOBFlag
    
    On Error GoTo 0

End Function

Public Sub clear_test(testValue As String)

    On Error Resume Next
    
    Dim thissheet As Worksheet
    Dim HoldScrollArea As String
    
    For Each thissheet In ActiveWorkbook.Worksheets
        HoldScrollArea = thissheet.ScrollArea
        thissheet.ScrollArea = ""
        thissheet.Cells.SpecialCells(xlCellTypeConstants).Replace What:=testValue, Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
        thissheet.ScrollArea = HoldScrollArea
    Next
    On Error GoTo 0
End Sub
'Private Function GetAnalysisNumberFormat(AnalysisFieldName As String) As String
'
'    On Error GoTo ErrHandler
'
'    Dim FieldMappingSheet As Worksheet
'    Set FieldMappingSheet = Worksheets(SheetName_FieldMapping)
'
'    GetAnalysisNumberFormat = WorksheetFunction.VLookup(Trim(AnalysisFieldName), _
'                                                FieldMappingSheet.Range(ListName_FieldMapping), _
'                                                3, False)
'
'Exit Function
'
'ErrHandler:
'
'    Debug.Print "Analysis Field Not Found: " & AnalysisFieldName
'
'    GetAnalysisNumberFormat = ""
'
'End Function

Public Function CleanString_Trim(Text As String, Optional Coalesce As Variant) As String


    If IsEmpty(Coalesce) Then
        Coalesce = ""
    End If
    
    If Left(Text, 1) = "=" Then
        Text = Mid(Text, 2, Len(Text) - 1)
    End If
    
    Dim retVal As String
    retVal = Trim(Text)
    
    If retVal = "" Then
        retVal = Coalesce
    End If
    
    'If MakeProper Then retVal = Proper(retVal)
    
    CleanString_Trim = retVal

End Function


Public Function CleanString_Proper(Text As String, Optional Coalesce As Variant) As String


    If IsEmpty(Coalesce) Then
        Coalesce = ""
    End If
    
    If Left(Text, 1) = "=" Then
        Text = Mid(Text, 2, Len(Text) - 1)
    End If
    
    Dim retVal As String
    retVal = Trim(Text)
    
    If retVal = "" Then
        retVal = Coalesce
    End If
    
    retVal = WorksheetFunction.Proper(retVal)
    
    CleanString_Proper = retVal

End Function

Public Function CleanString_Upper(Text As String, Optional Coalesce As Variant) As String


    If IsEmpty(Coalesce) Then
        Coalesce = ""
    End If
    
    If Left(Text, 1) = "=" Then
        Text = Mid(Text, 2, Len(Text) - 1)
    End If
    
    Dim retVal As String
    retVal = Trim(Text)
    
    retVal = UCase(retVal)
    
    If retVal = "" Then
        retVal = Coalesce
    End If
    
    
    CleanString_Upper = retVal

End Function

Public Function CleanDate(Text As Variant) As Variant

    Dim retVal As Variant
    
    If Text = "00000000" Then
        retVal = ""
    ElseIf IsDate(Text) Then
        'retVal = DateSerial(Text)
        'retVal = CDate(Text)
        Dim DateParts() As String
        DateParts = Split(Text, "/")
        Select Case Application.International(xlDateOrder)
          Case 0      'month-day-year
                retVal = DateDiff("D", "12/31/1899", DateSerial(DateParts(2), DateParts(0), DateParts(1))) + 1
                'retVal = DateSerial(DateParts(2), DateParts(0), DateParts(1))
          Case 1      'day-month-year
                retVal = DateDiff("D", "12/31/1899", DateSerial(DateParts(2), DateParts(1), DateParts(0))) + 1
                'retVal = DateSerial(DateParts(2), DateParts(1), DateParts(0))
          Case 2      'year-month-day
                retVal = DateDiff("D", "12/31/1899", DateSerial(DateParts(0), DateParts(1), DateParts(2))) + 1
                'retVal = DateSerial(DateParts(0), DateParts(1), DateParts(2))
        End Select
    ElseIf (Text > "19500101") And (Text < "20990101") Then
        retVal = DateDiff("D", "12/31/1899", DateSerial(Left(Text, 4), Mid(Text, 5, 2), Right(Text, 2))) + 1
        'retVal = DateSerial(Left(Text, 4), Mid(Text, 5, 2), Right(Text, 2))
    ElseIf IsNumeric(Text) Then
        retVal = Text
    Else
        retVal = ""
    End If
    
    CleanDate = retVal

End Function

Public Function CleanMoney(Text As Variant) As Currency

    Dim retVal As Currency
    
    If IsNumeric(Text) Then
        retVal = CCur(Text)
    Else
        retVal = 0
    End If

    CleanMoney = retVal
End Function

Attribute VB_Name = "Constants"
Public Const SheetName_PivotData As String = "Data2"
Public Const SheetName_SourceData As String = "Data2"
Public Const SheetName_FieldMapping As String = "{Field Mapping}"
Public Const SheetName_PivotFieldAttributes As String = "{PivotFieldAttributes}"
Public Const SheetName_Contents As String = "Contents"
Public Const SheetName_Disclaimer As String = "RECAT"
Public Const SheetName_DetailedLossLocation As String = "Detailed Loss Location"
Public Const SheetName_CleanData As String = "Data2"
Public Const SheetName_Glossary As String = "Glossary"
Public Const SheetName_WhatsIncluded As String = "What's Included"
Public Const SheetName_Where As String = "Where"
Public Const SheetName_How As String = "How"
Public Const SheetName_Dashboard As String = "Dashboard"
Public Const SheetName_SummaryTemplate As String = "{SummaryTemplate}"
Public Const SheetName_DefaultTemplate As String = "{DefaultTemplate}"
'


Public Const SheetName_DemoData As String = "{Demo Data}"
Public Const SheetName_TestData As String = "{Test Data}"
Public Const SheetName_NullData As String = "{Null Data}"

Public Const SheetName_ControlPanel As String = "{Control Panel}"


Public Const ListName_FieldMapping As String = "FieldMapping"
Public Const ListName_PivotFieldAttributes As String = "PivotFieldAttributeTbl"

Public Const ListName_PivotData As String = "ClaimsTbl"
Public Const ListObjCol_FirstUserDefFld As String = "Field 1 Name"
Public Const ListName_DemoData As String = "DemoDataTbl"
Public Const ListName_TestData As String = "TestDataTbl"


Public Const Address_SourceData_TopLeft As String = "A2"
Public Const Address_SourceData_TopRight As String = "BM2"
Public Const Address_PivotData_TopRight As String = "CR2"

Public Const Color_CalculatedColumn As Long = 10092543

Public Const Address_Customer_Name As String = "Customer_Name"

Public Const Address_As_Of_Date As String = "As_Of_Date"
Public Const Address_Effective_Date As String = "Effective_Date"
Public Const Address_Expiration_Date As String = "Expiration_Date"
'Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Attribute VB_Name = "Disclaimer"
Option Explicit



Public Sub HideAllButDisclaimer()

    Dim TheSheet As Worksheet

    Application.ScreenUpdating = False

    For Each TheSheet In Application.ActiveWorkbook.Sheets
    
        If TheSheet.name <> "RECAT" Then TheSheet.Visible = xlVeryHidden
        
    Next

    Application.ActiveWorkbook.Sheets("RECAT").I_Agree.Value = False

    Application.ScreenUpdating = True


End Sub


Public Sub ShowAllSheets()

    Dim TheSheet As Worksheet
    
    Application.ScreenUpdating = False

    For Each TheSheet In Application.ActiveWorkbook.Sheets
    
        If Left(TheSheet.name, 1) <> "{" Then
        
            TheSheet.Visible = True
        Else
        
            TheSheet.Visible = xlSheetHidden
            
        End If
        
    Next
    
    Application.ScreenUpdating = True

    Application.ActiveWorkbook.Sheets("RECAT").Activate

End Sub



Attribute VB_Name = "Lookups"
Option Explicit
Public Function CoverageIsWC(Coverage As String) As Boolean

    CoverageIsWC = (UCase(Left(Coverage, 4)) = "WORK")

End Function
Public Function CoverageIsGL(Coverage As String) As Boolean

    CoverageIsGL = (UCase(Left(Coverage, 1)) = "G")

End Function
Public Function CoverageIsAuto(Coverage As String) As Boolean

    CoverageIsAuto = (UCase(Left(Coverage, 4)) = "AUTO")

End Function
Public Function CoverageIsProperty(Coverage As String) As Boolean

    CoverageIsProperty = (UCase(Left(Coverage, 4)) = "PROP")

End Function

Public Function StringIsDate(s As String) As Boolean

    StringIsDate = (s > "19500101") And (s < "20990101")
    

End Function
Public Function IncidentCount(Coverage As String, ClaimNumber As String, PreviousClaimNumber As String, DateOfLoss As String, PreviousDateOfLoss As String, Claimant As String, PreviousClaimant As String, Driver As String, PreviousDriver As String, DetailedLossLocation As String, PreviousDetailedLossLocation As String) As Long

    IncidentCount = 0

    If CoverageIsWC(Coverage) Or CoverageIsGL(Coverage) Then
    
        If ClaimNumber <> PreviousClaimNumber Then
        
            IncidentCount = 1
       
        End If
        
    Else
    
        IncidentCount = 1
       
        If ClaimNumber = PreviousClaimNumber Then
        
            
            If PreviousDateOfLoss = DateOfLoss And ((PreviousClaimant = Claimant) Or (PreviousDetailedLossLocation = DetailedLossLocation)) Then
                IncidentCount = 0
                
            ElseIf PreviousClaimant = Claimant And ((PreviousDriver = Driver) Or (PreviousDetailedLossLocation = DetailedLossLocation)) Then
                IncidentCount = 0
                
            End If
                
        
        
        End If
    End If

End Function

Public Function WCTenureBand(Coverage As String, DateOfLossText As String, DateOfHireText As String) As String

    On Error GoTo ErrHandler

    
     If Not CoverageIsWC(Coverage) Then
    
        WCTenureBand = "<Other Coverages>"
   
    Else
    
        Dim ValidDates As Boolean, DateOfLoss As Date, DateOfHire As Date
        ValidDates = True
        
        If IsNumeric(DateOfLossText) And DateOfLossText <> "00000000" Then
            DateOfLoss = CDate(DateOfLossText)
        ElseIf IsDate(DateOfLossText) Then
            DateOfLoss = CDate(DateOfLossText)
        ElseIf (DateOfLossText > "19500101") And (DateOfLossText < "20990101") Then
            DateOfLoss = CDate(Left(DateOfLossText, 4) & "-" & Mid(DateOfLossText, 5, 2) & "-" & Right(DateOfLossText, 2))
        Else
            ValidDates = False
        End If
    
        If IsNumeric(DateOfHireText) And DateOfHireText <> "00000000" Then
            DateOfHire = CDate(DateOfHireText)
        ElseIf IsDate(DateOfHireText) Then
            DateOfHire = CDate(DateOfHireText)
        ElseIf (DateOfHireText > "19500101") And (DateOfHireText < "20990101") Then
            DateOfHire = CDate(Left(DateOfHireText, 4) & "-" & Mid(DateOfHireText, 5, 2) & "-" & Right(DateOfHireText, 2))
        Else
            ValidDates = False
        End If

        
        If Not ValidDates Then
    
            WCTenureBand = "00: Unknown Date of Hire"
        
        
        Else
        
            Dim TenureDays As Integer
            TenureDays = DateOfLoss - DateOfHire
            Dim r As Range, s As Worksheet
            
            Set s = Worksheets("{EmployeeTenureLookup}")
            
            Set r = s.ListObjects(1).DataBodyRange
            
            WCTenureBand = Application.WorksheetFunction.VLookup(TenureDays, r, 2, True)
'
'            If TenureDays <= 29 Then
'                WCTenureBand = "A: 0 to 29 Days"
'            ElseIf TenureDays <= 89 Then
'                WCTenureBand = "B: 30 to 89 Days"
'            ElseIf TenureDays <= 179 Then
'                WCTenureBand = "C: 90 to 179 Days"
'            ElseIf TenureDays <= 365 Then
'                WCTenureBand = "D: 180 to 365 Days"
'            ElseIf TenureDays <= (365 * 5) Then
'               WCTenureBand = "E: 1 to 5 Years"
'            ElseIf TenureDays <= (365 * 10) Then
'               WCTenureBand = "F: 5 to 10 Years"
'            Else
'               WCTenureBand = "G: 10+ Years"
'
'            End If
            
        End If
            
    End If

Exit Function

ErrHandler:

    WCTenureBand = "<Unknown>"
   

End Function


Public Function AutoDriver(Coverage As String, Driver As String) As String


    If Not CoverageIsAuto(Coverage) Then
    
        AutoDriver = "<Other Coverages>"
        
    ElseIf Driver = "" Then
        
        AutoDriver = "<Unknown>"
        
    Else
        AutoDriver = Driver
        
    End If
    


End Function

Public Function WCOccupation(Coverage As String, Occupation As String) As String


    If Not CoverageIsWC(Coverage) Then
    
        WCOccupation = "<Other Coverages>"
        
    ElseIf Occupation = "" Then
        
        WCOccupation = "<Unknown>"
        
    Else
        WCOccupation = Occupation
        
    End If
    


End Function

Public Function WCClaimant(Coverage As String, Claimant As String) As String


    If Not CoverageIsWC(Coverage) Then
    
        WCClaimant = "<Other Coverages>"
        
    ElseIf Claimant = "" Then
        
        WCClaimant = "<Unknown>"
        
    Else
        WCClaimant = Claimant
        
    End If
    


End Function

Private Sub UnitTestWCLostWorkDayCount()

    Debug.Print WCLostWorkDayCount("Workers Compensation", "x", "20080508", "0", "Today")
    

End Sub



Public Function WCLostWorkDayCount(Coverage As String, _
                                    ClaimLevelCoverage As String, _
                                    LastWorkDateText As String, _
                                    ReturnToWorkDateText As String, _
                                    DateOfLossText As String) As Variant


    Dim LastWorkDate As Date
    Dim ReturnToWorkDate As Date
    
    Dim ValidDates As Boolean
    ValidDates = True
    
    If IsNumeric(LastWorkDateText) And LastWorkDateText <> "00000000" Then
        LastWorkDate = CDate(LastWorkDateText)
    ElseIf IsDate(LastWorkDateText) Then
        LastWorkDate = CDate(LastWorkDateText)
    ElseIf (LastWorkDateText > "19500101") And (LastWorkDateText < "20990101") Then
        LastWorkDate = CDate(Left(LastWorkDateText, 4) & _
                        "-" & Mid(LastWorkDateText, 5, 2) _
                        & "-" & Right(LastWorkDateText, 2))
    ElseIf IsDate(DateOfLossText) Then
        LastWorkDate = CDate(DateOfLossText)
    ElseIf (DateOfLossText > "19500101") And (DateOfLossText < "20990101") Then
        LastWorkDate = CDate(Left(DateOfLossText, 4) & _
                        "-" & Mid(DateOfLossText, 5, 2) _
                        & "-" & Right(DateOfLossText, 2))
    Else
        WCLostWorkDayCount = "<No Reported Date Of Loss>"
        Exit Function
    End If
    
    If IsNumeric(ReturnToWorkDateText) And ReturnToWorkDateText <> "00000000" Then
        ReturnToWorkDate = CDate(ReturnToWorkDateText)
    ElseIf IsDate(ReturnToWorkDateText) Then
        ReturnToWorkDate = CDate(ReturnToWorkDateText)
    ElseIf (ReturnToWorkDateText > "19500101") And (ReturnToWorkDateText < "20990101") Then
        ReturnToWorkDate = CDate(Left(ReturnToWorkDateText, 4) & "-" & Mid(ReturnToWorkDateText, 5, 2) & "-" & Right(ReturnToWorkDateText, 2))
    Else
        ReturnToWorkDate = Application.Worksheets(SheetName_Contents).Range(Address_As_Of_Date).Value
    End If
    
    If Not CoverageIsWC(Coverage) Then
    
        WCLostWorkDayCount = 0
    
    ElseIf UCase(ClaimLevelCoverage) = "WORKERS COMP MEDICAL ONLY" Then
    
        WCLostWorkDayCount = 0
        
    ElseIf ValidDates Then
    
        'WCLostWorkDayCount = CInt(ReturnToWorkDate - LastWorkDate)
        WCLostWorkDayCount = DateDiff("d", LastWorkDate, ReturnToWorkDate)
    
    Else
        
        WCLostWorkDayCount = "<Reporting Error>"
        
    End If
    
    
Exit Function
    
ErrHandler:

    WCLostWorkDayCount = -1


End Function

Public Function WCLostWorkDays(Coverage As String, _
                                    ClaimLevelCoverage As String, _
                                    LastWorkDateText As String, _
                                    ReturnToWorkDateText As String, _
                                    DateOfLossText As String) As Variant
                                    
    On Error GoTo ErrHandler
    
    If Not CoverageIsWC(Coverage) Then
    
        WCLostWorkDays = "<Other Coverages>"
    
    ElseIf UCase(ClaimLevelCoverage) = "WORKERS COMP MEDICAL ONLY" Then
    
        WCLostWorkDays = "<Med Only>"
        
    Else
    
        Dim count As Variant
        count = WCLostWorkDayCount(Coverage, ClaimLevelCoverage, LastWorkDateText, ReturnToWorkDateText, DateOfLossText)
        
        If IsNumeric(count) Then
        
            WCLostWorkDays = Str(count) & " Days"
        
        Else
            WCLostWorkDays = count
            
        End If
   
    End If
        
    
Exit Function
    
ErrHandler:

    WCLostWorkDays = "<Reporting Error>"


End Function


Public Function WCLostWorkBand(Coverage As String, _
                                    ClaimLevelCoverage As String, _
                                    LastWorkDateText As String, _
                                    ReturnToWorkDateText As String, _
                                    DateOfLossText As String) As String

    On Error GoTo ErrHandler
    
    If Not CoverageIsWC(Coverage) Then
    
        WCLostWorkBand = "<Other Coverages>"
    
    ElseIf UCase(ClaimLevelCoverage) = "WORKERS COMP MEDICAL ONLY" Then
    
        WCLostWorkBand = "<Med Only>"
        
    Else
    
        Dim LostDayCount As Variant
        LostDayCount = WCLostWorkDayCount(Coverage, ClaimLevelCoverage, LastWorkDateText, ReturnToWorkDateText, DateOfLossText)
        
        If IsNumeric(LostDayCount) Then
        
            Dim r As Range, s As Worksheet
            
            Set s = Worksheets("{LostWorkDayLookup}")
            
            Set r = s.ListObjects(1).DataBodyRange
            
            WCLostWorkBand = Application.WorksheetFunction.VLookup(LostDayCount, r, 2, True)
'             If LostDayCount <= 7 Then
'                 WCLostWorkBand = "A: 0 to 7 Days"
'             ElseIf LostDayCount <= 14 Then
'                 WCLostWorkBand = "B: 8 to 14 Days"
'             ElseIf LostDayCount <= 30 Then
'                 WCLostWorkBand = "C: 15 to 30 Days"
'             ElseIf LostDayCount <= 60 Then
'                 WCLostWorkBand = "D: 31 to 60 Days"
'             ElseIf LostDayCount <= 90 Then
'                 WCLostWorkBand = "E: 61 to 90 Days"
'             ElseIf LostDayCount <= 180 Then
'                 WCLostWorkBand = "F: 90 to 180 Days"
'             ElseIf LostDayCount <= 360 Then
'                 WCLostWorkBand = "G: 181 to 360 Days"
'             ElseIf LostDayCount <= 720 Then
'                 WCLostWorkBand = "H: 361 to 720 Days"
'             Else
'                 WCLostWorkBand = "I: 721+ Days"
'             End If
        Else
        
            WCLostWorkBand = LostDayCount
            
        End If
   
    End If
            
    
Exit Function
    
ErrHandler:

    WCLostWorkBand = "<Reporting Error>"


End Function

Public Function OpenDayCount(DateOfLossText As String, ClosedDateText As String) As Variant

    Dim ClosedDate As Date
    Dim DateOfLoss As Date
    
    Dim ValidDates As Boolean
    ValidDates = True
    
    If IsNumeric(ClosedDateText) And ClosedDateText <> "00000000" Then
        ClosedDate = CDate(ClosedDateText)
    ElseIf IsDate(ClosedDateText) Then
        ClosedDate = CDate(ClosedDateText)
    ElseIf (ClosedDateText > "19500101") And (ClosedDateText < "20990101") Then
        ClosedDate = CDate(Left(ClosedDateText, 4) & "-" & Mid(ClosedDateText, 5, 2) & "-" & Right(ClosedDateText, 2))
    Else
        ClosedDate = Application.Worksheets(SheetName_Contents).Range(Address_As_Of_Date).Value
    End If
    
    If IsNumeric(DateOfLossText) And DateOfLossText <> "00000000" Then
        DateOfLoss = CDate(DateOfLossText)
    ElseIf IsDate(DateOfLossText) Then
        DateOfLoss = CDate(DateOfLossText)
    ElseIf (DateOfLossText > "19500101") And (DateOfLossText < "20990101") Then
        DateOfLoss = CDate(Left(ClosedDateText, 4) & "-" & Mid(ClosedDateText, 5, 2) & "-" & Right(ClosedDateText, 2))
    Else
        ValidDates = False
    End If
    
    If ValidDates Then
    
        'OpenDayCount = CInt(ClosedDate - DateOfLoss)
        OpenDayCount = DateDiff("d", DateOfLoss, ClosedDate)
    
    Else
        
        OpenDayCount = "Reporting Error"
        
    End If
        

End Function


Public Function CalcOpenDays(DateOfLossText As String, ClosedDateText As String) As String

    Dim count As Variant
    count = OpenDayCount(DateOfLossText, ClosedDateText)
    
    If IsNumeric(count) Then
    
        CalcOpenDays = Str(count) & " Days"
    
    Else
        
        CalcOpenDays = "<Reporting Error>"
        
    End If
        

End Function

Private Function CalcOpenDayBand(DateOfLossText As String, ClosedDateText As String) As String

    Dim Days As Variant
    Days = OpenDayCount(DateOfLossText, ClosedDateText)


    If IsNumeric(Days) Then

        If Days <= 14 Then
            CalcOpenDayBand = "A: 0 to 14 Days"
        ElseIf Days <= 30 Then
            CalcOpenDayBand = "B: 15 to 30 Days"
        ElseIf Days <= 60 Then
            CalcOpenDayBand = "C: 31 to 60 Days"
        ElseIf Days <= 90 Then
            CalcOpenDayBand = "D: 61 to 90 Days"
        ElseIf Days <= 180 Then
            CalcOpenDayBand = "E: 91 to 180 Days"
        ElseIf Days <= 270 Then
            CalcOpenDayBand = "F: 181 to 270 Days"
        ElseIf Days <= 360 Then
            CalcOpenDayBand = "G: 271 to 360 Days"
        ElseIf Days <= 720 Then
            CalcOpenDayBand = "H: 361 to 720 Days"
        Else
            CalcOpenDayBand = "I: 721+ Days"
        End If

    Else
    
        CalcOpenDayBand = "<Reporting Error>"
    
    End If

End Function


Public Function ConvertStringToDate(DateText As String) As Date

    ConvertStringToDate = CDate(Left(DateText, 4) & "-" & Mid(DateText, 5, 2) & "-" & Right(DateText, 2))

End Function



Private Function Lag(Milestone1Text As String, Milestone2Text As String) As Variant
        
        Dim Milestone1 As Date, Milestone2 As Date, ValidDates As Boolean
        
        ValidDates = True
        
        If IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" Then
            Milestone1 = CDate(Milestone1Text)
        ElseIf IsDate(Milestone1Text) Then
            Milestone1 = CDate(Milestone1Text)
        ElseIf (Milestone1Text > "19500101") And (Milestone1Text < "20990101") Then
            Milestone1 = CDate(Left(Milestone1Text, 4) & "-" & Mid(Milestone1Text, 5, 2) & "-" & Right(Milestone1Text, 2))
        Else
            ValidDates = False
        End If

        If IsNumeric(Milestone2Text) And Milestone2Text <> "00000000" Then
            Milestone2 = CDate(Milestone2Text)
        ElseIf IsDate(Milestone2Text) Then
            Milestone2 = CDate(Milestone2Text)
        ElseIf (Milestone2Text > "19500101") And (Milestone2Text < "20990101") Then
            Milestone2 = CDate(Left(Milestone2Text, 4) & "-" & Mid(Milestone2Text, 5, 2) & "-" & Right(Milestone2Text, 2))
        Else
            ValidDates = False
        End If
        
        If ValidDates Then
        
            Lag = DateDiff("d", Milestone1, Milestone2)

        Else
            
            Lag = ""
        
        End If

End Function

Private Function LagBand(Days As Integer) As String

        
    Dim r As Range, s As Worksheet
    
    Set s = Worksheets("{LagBandLookup}")
    
    Set r = s.ListObjects(1).DataBodyRange
    
    LagBand = Application.WorksheetFunction.VLookup(Days, r, 2, True)
'    If Days = 0 Then
'
'        LagBand = "A: 0 Days"
'
'    ElseIf Days <= 3 Then
'
'        LagBand = "B: 1 to 3 Days"
'
'    ElseIf Days <= 7 Then
'
'        LagBand = "C: 4 to 7 Days"
'
'    ElseIf Days <= 15 Then
'
'        LagBand = "D: 8 to 15 Days"
'
'    ElseIf Days <= 30 Then
'
'        LagBand = "E: 16 to 30 Days"
'
'     ElseIf Days <= 60 Then
'
'        LagBand = "F: 31 to 60 Days"
'
'   Else
'
'        LagBand = "G: 61 + Days"
'
'    End If

End Function

Public Function WCLag(Coverage As String, ClaimLevelCoverage As String, _
                        Milestone1Text As String, _
                        Milestone2Text As String) As String

    On Error GoTo ErrHandler
    
    Dim count As Variant, retVal As String
    
        
    If Not CoverageIsWC(Coverage) Then
    
        retVal = "<Other Coverages>"
    
'    ElseIf ClaimLevelCoverage = "Workers Comp Medical Only" Then
'
'        retVal = "<Med Only>"
        
    Else
    
        retVal = "<Unknown>"
        If (IsDate(Milestone1Text) And IsDate(Milestone2Text)) _
        Or (IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" And IsNumeric(Milestone2Text) And Milestone2Text <> "00000000") _
        Or (IsDate(Milestone1Text) And IsNumeric(Milestone2Text) And Milestone2Text <> "00000000") _
        Or (IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" And IsDate(Milestone2Text)) Then
            If CDate(Milestone1Text) > CDate(Milestone2Text) Then
                retVal = "<Reporting Error>"
            Else
        
                count = Lag(Milestone1Text, Milestone2Text)
                
                If IsNumeric(count) Then
                
                    retVal = Str(count) & " Days"
                
                End If
            End If
            
        End If
   
    End If
        
        
    WCLag = retVal
    
Exit Function
    
ErrHandler:

    WCLag = "<Reporting Error>"
    
End Function


Public Function WCLagBand(Coverage As String, ClaimLevelCoverage As String, Milestone1Text As String, Milestone2Text As String) As String

    On Error GoTo ErrHandler
    
    
    Dim count As Variant, retVal As String
    
    If Not CoverageIsWC(Coverage) Then
    
        retVal = "<Other Coverages>"
    
'    ElseIf ClaimLevelCoverage = "Workers Comp Medical Only" Then
'
'        retVal = "<Med Only>"
        
    Else
    
        retVal = "<Unknown>"
        If (IsDate(Milestone1Text) And IsDate(Milestone2Text)) _
        Or (IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" And IsNumeric(Milestone2Text) And Milestone2Text <> "00000000") _
        Or (IsDate(Milestone1Text) And IsNumeric(Milestone2Text) And Milestone2Text <> "00000000") _
        Or (IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" And IsDate(Milestone2Text)) Then
        
            If CDate(Milestone1Text) > CDate(Milestone2Text) Then
                retVal = "<Reporting Error>"
            Else
        
                count = Lag(Milestone1Text, Milestone2Text)
                
                If IsNumeric(count) Then
                
                    retVal = LagBand(CInt(count))
                
                End If
            End If

        End If
   
    End If
        
        
    WCLagBand = retVal

        
    
Exit Function
    
ErrHandler:

    WCLagBand = "<Reporting Error>"


End Function

Public Function LagBandTotal(Milestone1Text As String, Milestone2Text As String) As String

    On Error GoTo ErrHandler
    
    
    Dim count As Variant, retVal As String
        
    retVal = "<Unknown>"
    If (IsDate(Milestone1Text) And IsDate(Milestone2Text)) _
    Or (IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" And IsNumeric(Milestone2Text) And Milestone2Text <> "00000000") _
    Or (IsDate(Milestone1Text) And IsNumeric(Milestone2Text) And Milestone2Text <> "00000000") _
    Or (IsNumeric(Milestone1Text) And Milestone1Text <> "00000000" And IsDate(Milestone2Text)) Then
    
        count = Lag(Milestone1Text, Milestone2Text)
        
        If IsNumeric(count) Then
        
            retVal = LagBand(CInt(count))
        
        End If
        
    End If
        
        
    LagBandTotal = retVal

        
    
Exit Function
    
ErrHandler:

    LagBandTotal = "<Reporting Error>"


End Function



Public Function LookupReturnToWorkIndicator(Coverage As String, Index As String) As String

    On Error GoTo ErrHandler
    
    Index = Replace(Index, "'", "")
    
    
    If Not CoverageIsWC(Coverage) Then
    
        LookupReturnToWorkIndicator = "<Other Coverages>"
    
    Else
    
        If Left(Index, 1) = "Y" Then
        
            LookupReturnToWorkIndicator = "Yes"
            
        ElseIf Left(Index, 1) = "N" Then
        
        
            LookupReturnToWorkIndicator = "No"
            
        ElseIf Left(Index, 1) = "U" Then
        
             LookupReturnToWorkIndicator = "Unknown"
       
        Else
        
            LookupReturnToWorkIndicator = "<Unknown>"
          
        End If
   
    End If
        
    
Exit Function
    
ErrHandler:

    LookupReturnToWorkIndicator = "<Unknown>"
    
End Function

Public Function LookupReturnToWorkQualifier(Coverage As String, Index As String) As String

    On Error GoTo ErrHandler
    
    
    Index = Replace(Index, "'", "")
    
    If Not CoverageIsWC(Coverage) Then
    
        LookupReturnToWorkQualifier = "<Other Coverages>"
    
    Else
    
        If Index = "6" Then
        
            LookupReturnToWorkQualifier = "Released with restrictions"
            
        ElseIf Index = "5" Then
        
        
            LookupReturnToWorkQualifier = "Released without restrictions"
            
        ElseIf Index = "2" Then
        
             LookupReturnToWorkQualifier = "Returned with restrictions"
       
         ElseIf Index = "1" Then
        
             LookupReturnToWorkQualifier = "Returned without restrictions"
      
        Else
        
            LookupReturnToWorkQualifier = "<Unknown>"
          
        End If
   
    End If
        
    
Exit Function
    
ErrHandler:

    LookupReturnToWorkQualifier = "<Unknown>"


End Function

Public Function LookupAccidentCategory(Index As String) As String


    On Error GoTo ErrHandler
    
    Dim r As Range, s As Worksheet
    
    Index = Right("00" & Index, 3)
    
    Set s = Worksheets("{AccidentCategoryLookup}")
    
    Set r = s.ListObjects(1).DataBodyRange
    
    Index = "`" & Replace(Index, "'", "")
    
    
    LookupAccidentCategory = Application.WorksheetFunction.VLookup(Index, r, 3, False)
    
    
Exit Function
    
ErrHandler:

    LookupAccidentCategory = "General"


End Function


Public Function LookupAccidentDescription(Index As String) As String


    On Error GoTo ErrHandler
    
    Dim r As Range, s As Worksheet
    
    Index = Right("00" & Index, 3)
    
    Set s = Worksheets("{AccidentCategoryLookup}")
    
    Set r = s.ListObjects(1).DataBodyRange
    
    Index = "`" & Replace(Index, "'", "")
    
    
    LookupAccidentDescription = Application.WorksheetFunction.VLookup(Index, r, 2, False)
    
    
Exit Function
    
ErrHandler:

    LookupAccidentDescription = "<Unknown>"


End Function



Public Function LookupBodyPart(Coverage As String, Index As String) As String


    On Error GoTo ErrHandler
    
    
    
    If Not CoverageIsWC(Coverage) Then

        LookupBodyPart = "<Other Coverages>"

    Else
    
        Dim r As Range, s As Worksheet
        
        Set s = Worksheets("{BodyPartLookup}")
        Set r = s.ListObjects(1).DataBodyRange
        
        
        
        Index = "`" & Replace(Index, "'", "")
    
        LookupBodyPart = Application.WorksheetFunction.VLookup(Index, r, 2, False)
   
    End If
        
    
Exit Function
    
ErrHandler:

    LookupBodyPart = "<Unknown>"


End Function


Public Function LookupNCCIInjury(Coverage As String, ClaimLevelCoverage As String, Index As String) As String


    On Error GoTo ErrHandler
    
    
    If ClaimLevelCoverage = "General Liability Pd Only" Or ClaimLevelCoverage = "Product Liability Pd Only" Or ClaimLevelCoverage = "Auto Physical Damage" Or ClaimLevelCoverage = "Auto Liability / Pd Only" Or ClaimLevelCoverage = "Property" Then

        LookupNCCIInjury = "<Other Coverages>"


    Else
    
        Dim r As Range, s As Worksheet
        
        Set s = Worksheets("{NCCIInjuryLookup}")
        Set r = s.ListObjects(1).DataBodyRange
        
        
        
        Index = "`" & Replace(Index, "'", "")
    
        LookupNCCIInjury = Application.WorksheetFunction.VLookup(Index, r, 2, False)
   
    End If
        
    
Exit Function
    
ErrHandler:

    LookupNCCIInjury = "<Unknown>"


End Function



Public Function LookupAgentOfLoss(Index As String) As String


    On Error GoTo ErrHandler
    
    Dim r As Range, s As Worksheet
    
    Set s = Worksheets("{AgentOfLossLookup}")
    
    Set r = s.ListObjects(1).DataBodyRange
    
    Index = "`" & Replace(Index, "'", "")
    
    
    LookupAgentOfLoss = Application.WorksheetFunction.VLookup(Index, r, 2, False)
    
    
Exit Function
    
ErrHandler:

    LookupAgentOfLoss = "<Unknown>"


End Function



Public Function LookupDetailedLossLocation(Index As String) As String


    On Error GoTo ErrHandler
    
    Dim r As Range, s As Worksheet
    
    Set s = Worksheets("{DetailedLossLocationLookup}")
    
    Set r = s.ListObjects(1).DataBodyRange
    
    Index = "`" & Replace(Index, "'", "")
    
    
    LookupDetailedLossLocation = Application.WorksheetFunction.VLookup(Index, r, 2, False)
    
    
Exit Function
    
ErrHandler:

    LookupDetailedLossLocation = "<Unknown>"


End Function



Public Function NetIncurredBand(Amount As Currency) As String

    If Amount >= 250000 Then
        NetIncurredBand = "H: > $250,000"
    ElseIf Amount >= 100000 Then
        NetIncurredBand = "G: $100,000-$249,999"
    ElseIf Amount >= 75000 Then
        NetIncurredBand = "F: $75,000-$99,999"
    ElseIf Amount >= 50000 Then
        NetIncurredBand = "E: $50,000-$74,999"
    ElseIf Amount >= 25000 Then
        NetIncurredBand = "D: $25,000-$49,999"
    ElseIf Amount >= 10000 Then
        NetIncurredBand = "C: $10,000-$24,999"
    ElseIf Amount >= 5000 Then
        NetIncurredBand = "B: $5,000-$9,999"
    Else
        NetIncurredBand = "A: $0-$4,999"
    End If
    

End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cbDashboard_Click()

    Dim sh As Worksheet
    Set sh = ActiveWorkbook.Sheets("Dashboard")
    sh.Activate
    sh.Range("A1:C1").Select

End Sub


Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

    Dim RouteToSheet As Worksheet
    Dim tmpSheet As Worksheet
    Select Case ActiveCell.Value
        Case "Coverage", "Claim Level Coverage", "Sub Coverage", "COVERAGE"
            On Error Resume Next
            Set tmpSheet = Worksheets("Coverage")
            On Error GoTo 0
            If tmpSheet Is Nothing Then Exit Sub
            If ActiveCell.Value = "COVERAGE" Then
                tmpSheet.Activate
                Exit Sub
            Else
                Set RouteToSheet = tmpSheet
            End If
        Case "WC Claimant", "WC Tenure Band", "WC Occupation", "Auto Driver", "WHO"
            On Error Resume Next
            Set tmpSheet = Worksheets("Who")
            On Error GoTo 0
            If tmpSheet Is Nothing Then Exit Sub
            If ActiveCell.Value = "WHO" Then
                tmpSheet.Activate
                Exit Sub
            Else
                Set RouteToSheet = tmpSheet
            End If
        Case "Accident Category", "Accident Description", "WC Body Part", _
            "NCCI Injury", "Open Band", "Net Incurred Band", "WHAT"
            On Error Resume Next
            Set tmpSheet = Worksheets("What")
            On Error GoTo 0
            If tmpSheet Is Nothing Then Exit Sub
            If ActiveCell.Value = "WHAT" Then
                tmpSheet.Activate
                Exit Sub
            Else
                Set RouteToSheet = tmpSheet
            End If
        Case "Policy Year", "Calendar Year", "Year/Month", "Weekday", "Reporting Lag", "WHEN"
            On Error Resume Next
            Set tmpSheet = Worksheets("When")
            On Error GoTo 0
            If tmpSheet Is Nothing Then Exit Sub
            If ActiveCell.Value = "WHEN" Then
                tmpSheet.Activate
                Exit Sub
            Else
                Set RouteToSheet = tmpSheet
            End If
        Case "Loss Location State", "Site Level 1", "Site Level 2", "Site Level 3", _
            "Site Lowest Name", "Site Lowest", "Detailed Loss Location", "WHERE"
            On Error Resume Next
            Set tmpSheet = Worksheets("Where")
            On Error GoTo 0
            If tmpSheet Is Nothing Then Exit Sub
            If ActiveCell.Value = "WHERE" Then
                tmpSheet.Activate
                Exit Sub
            Else
                Set RouteToSheet = tmpSheet
            End If
        Case "Agent of Loss", "HOW"
            On Error Resume Next
            Set tmpSheet = Worksheets("How")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
        Case "Employee Reporting Lag", "Management Reporting Lag", "WC LAG ANALYSIS"
            On Error Resume Next
            Set tmpSheet = Worksheets("WC Lag Analysis")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
        Case "Claim Trending", "CLAIM TRENDING"
            On Error Resume Next
            Set tmpSheet = Worksheets("Claim Trending")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
        Case "What's Included", "WHAT'S INCLUDED"
            On Error Resume Next
            Set tmpSheet = Worksheets("What's Included")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
        Case "Customer Defined Fields", "CUSTOMER DEFINED FIELDS"
            On Error Resume Next
            Set tmpSheet = Worksheets("Customer Defined Fields")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
        Case "Glossary", "GLOSSARY"
            On Error Resume Next
            Set tmpSheet = Worksheets("Glossary")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
        Case "CLAIM DETAIL", "Claim Detail"
            On Error Resume Next
            CreateClaimDetailSheet
            Set tmpSheet = Worksheets("Claim Detail")
            On Error GoTo 0
            If tmpSheet Is Nothing Then
                MsgBox "You do not have data corresponding to that selection."
                Exit Sub
            End If
            tmpSheet.Activate
            Exit Sub
    End Select
    If RouteSheetWithAnalysisItem(ActiveCell.Value, RouteToSheet) Then
    Else
        MsgBox "You do not have data corresponding to that selection."
    End If

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub

Private Sub CreateClaimDetailSheet()

    Dim sh As Worksheet
    Dim TheSheet As Worksheet
    Set TheSheet = Application.Worksheets(SheetName_PivotData)

    On Error Resume Next
    Set sh = ActiveWorkbook.Sheets("Claim Detail")
    If Err.Number <> 0 Then
        On Error GoTo 0
    Else
        Application.DisplayAlerts = False

        sh.Delete
        Application.DisplayAlerts = True
    
    End If
    
    'Set sh = ActiveWorkbook.Sheets.Add(, TheSheet)
    
    TheSheet.Copy After:=Worksheets(SheetName_PivotData)
    Application.CutCopyMode = False
    
    Set sh = ActiveWorkbook.ActiveSheet
    sh.name = "Claim Detail"
    
    Dim lsObj As ListObject
    Set lsObj = sh.ListObjects(1)
    lsObj.Delete
    On Error Resume Next
    sh.Shapes("CBAddData").Delete
    On Error GoTo 0
    sh.Range("1:1").Delete
    'sh.Rows("1:2").Delete Shift:=xlUp
    sh.Range("$A$1").Select
    
    Set lsObj = sh.ListObjects.Add()
    lsObj.name = "ClaimDetailTbl"
    sh.Range("ClaimDetailTbl[[#Data]]").RowHeight = 31
    
    Dim lsCol As ListColumn
    
    
    Set lsCol = lsObj.ListColumns(1)
    lsCol.name = "Location"
    TheSheet.Range("ClaimsTbl[[#Data],[Site Lowest Name]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Location]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Location]]").ColumnWidth = 39
    sh.Range("ClaimDetailTbl[[#Data],[Location]]").WrapText = True
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Policy Date"
    TheSheet.Range("ClaimsTbl[[#Data],[Ciid Policy Effective Date]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Policy Date]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Policy Date]]").ColumnWidth = 14
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Coverage"
    TheSheet.Range("ClaimsTbl[[#Data],[Coverage]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Coverage]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Coverage]]").ColumnWidth = 23
        
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "ClaimNbr"
    TheSheet.Range("ClaimsTbl[[#Data],[Claim Number]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[ClaimNbr]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[ClaimNbr]]").ColumnWidth = 14
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Status"
    TheSheet.Range("ClaimsTbl[[#Data],[Claim Status]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Status]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Status]]").ColumnWidth = 10
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Loss Date"
    TheSheet.Range("ClaimsTbl[[#Data],[Date Of Loss]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Loss Date]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Loss Date]]").ColumnWidth = 14
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Close Date"
    TheSheet.Range("ClaimsTbl[[#Data],[Claim Closed Date]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Close Date]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Close Date]]").ColumnWidth = 14
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Reporting Lag"
    TheSheet.Range("ClaimsTbl[[#Data],[Reporting Lag]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Reporting Lag]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Reporting Lag]]").ColumnWidth = 19
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "WC Claimant"
    TheSheet.Range("ClaimsTbl[[#Data],[WC Claimant]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[WC Claimant]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[WC Claimant]]").ColumnWidth = 19
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Auto Driver"
    TheSheet.Range("ClaimsTbl[[#Data],[Auto Driver]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Auto Driver]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Auto Driver]]").ColumnWidth = 19
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Accident Category"
    TheSheet.Range("ClaimsTbl[[#Data],[Accident Category]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Accident Category]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Accident Category]]").ColumnWidth = 40
    sh.Range("ClaimDetailTbl[[#Data],[Accident Category]]").WrapText = True
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Accident Narrative"
    TheSheet.Range("ClaimsTbl[[#Data],[Accident Narrative]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Accident Narrative]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Accident Narrative]]").ColumnWidth = 50
    sh.Range("ClaimDetailTbl[[#Data],[Accident Narrative]]").WrapText = True
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Net Paid"
    TheSheet.Range("ClaimsTbl[[#Data],[Net Paid Total]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Net Paid]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Net Paid]]").ColumnWidth = 14
    
    Set lsCol = lsObj.ListColumns.Add()
    lsCol.name = "Net Incurred"
    TheSheet.Range("ClaimsTbl[[#Data],[Net Incurred Total]]").Copy
    sh.Range("ClaimDetailTbl[[#Data],[Net Incurred]]").PasteSpecial (xlPasteValuesAndNumberFormats)
    sh.Range("ClaimDetailTbl[[#Data],[Net Incurred]]").ColumnWidth = 14
    
    Application.CutCopyMode = False

    Dim ContentsSheet As Worksheet
    Set ContentsSheet = Worksheets(SheetName_Contents)
    Call SortForClaimDetailSheet
    
    sh.Rows("1:1").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

    sh.Range("A1").Value = ContentsSheet.Range(Address_Customer_Name).Value & " CLAIM DETAIL SHEET"
    sh.Range("A1").Font.name = "Calibri"
    sh.Range("A1").Font.Size = 14
    sh.Range("A1").Font.ColorIndex = 3   'red
    sh.Range("A1").RowHeight = 25
    With sh.Range("ClaimDetailTbl[[#All]]").Font
        .name = "Calibri"
        .Size = 12
        .ColorIndex = 1
    End With
    With sh.Range("ClaimDetailTbl[[#All]]")
        .RowHeight = 31
    End With
    With sh.Tab
        .Color = RGB(234, 99, 92)
        .TintAndShade = 0
    End With
    
    sh.ResetAllPageBreaks
    Dim PrintRange As Range
    Set PrintRange = sh.Range("a1").Resize(lsObj.Range.Rows.count + 1, lsObj.Range.Columns.count)
    
    With sh.PageSetup
        .PrintArea = PrintRange.Address
        .PrintTitleRows = "$1:$2"
        .PrintTitleColumns = ""
        .Orientation = xlLandscape
        .LeftHeader = ""
        .CenterHeader = ""
        .RightHeader = ""
        .LeftFooter = "Claim Detail"
        .Orientation = xlLandscape
        .Draft = False
        .PaperSize = xlPaperLetter
        .LeftMargin = Application.InchesToPoints(0.7)
        .RightMargin = Application.InchesToPoints(0.7)
        .TopMargin = Application.InchesToPoints(0.75)
        .BottomMargin = Application.InchesToPoints(1.5)
        .HeaderMargin = Application.InchesToPoints(0.3)
        .FooterMargin = Application.InchesToPoints(0.3)
        '.Zoom = True
        .FitToPagesWide = 1
        .FitToPagesTall = False
    End With
    
    sh.Range("A1").Select
    
End Sub

Public Sub SortForClaimDetailSheet()

    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets("Claim Detail")
    Set TheList = TheSheet.ListObjects(1)

    TheList.Sort.SortFields.Clear
    
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimDetailTbl[[#All],[Coverage]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimDetailTbl[[#All],[Loss Date]]"), xlSortOnValues, xlAscending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With

End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean



Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
'
    ActiveWindow.SplitColumn = 0
    'Range("A29").RowHeight = 24
    Me.Select
    Range("$A$1").Select
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:
    PerformingActivate = False
    
End Sub
'Private Sub SetZoom(NewSheet As Worksheet)
'
'    Dim PTRange As Range
'
'    Dim ColumnCount As Integer
'    Dim TempPT As PivotTable
'    RowCount = 0
'    For Each TempPT In NewSheet.PivotTables
'        Set PTRange = TempPT.TableRange2
'        ColumnCount = PTRange.Columns.count + PTRange.Column - 1
'    Next
'
'    Range("$A$1").Offset(0, ColumnCount).Select
'    ActiveWindow.Zoom = True
'
'End Sub



Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub

    If PerformingSort Or PerformingUpdate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True


    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    
    SetPrintArea Me, Target
    PivotTableUpdateSyncChart Me, Target
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:

    PerformingUpdate = False

End Sub


Public Sub InitializeWorksheet()
        
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(1)
'    If Me.ChartObjects.count > 0 Then
'        FormatStandardPivotTable Me, thisPivot, Me.ChartObjects(1)
'    Else
'        FormatStandardPivotTable Me, thisPivot, Nothing
'    End If
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24

ExitSub:
    PerformingActivate = False
    
End Sub




Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean

Private Sub Worksheet_Activate()

    On Error GoTo ExitSub
'    Dim PrevScreenUpdating, PrevDisplayAlerts, PrevEnableEvents As Boolean
'
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then Exit Sub

    PerformingActivate = True
'
'
'
'    SortByAnalysisItem_AZ Me, Me.PivotTables(1)
'
'    FormatLagAnalysisPivotTable Me, Me.PivotTables(2), Me.ChartObjects(2)
'    FormatLagAnalysisPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
'
'
'
'
    Application.StatusBar = ""
    Me.Select
    Range("$A$1").Activate
'
ExitSub:
    PerformingActivate = False
'
End Sub
'
'
'
Public Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub
    If PerformingSort Or PerformingActivate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True
    
    Dim PrevScreenUpdating, PrevDisplayAlerts, PrevEnableEvents As Boolean
    Dim NbrRowsData As Long
    Dim ValuesStartRow As Integer
    Dim ValuesStartCol As Integer
    
    Application.Calculation = xlCalculationManual
    Dim currScrnUpdVal As Variant
    Dim currDispAlrtVal As Variant
    Dim currEnableEventsVal As Variant
    currScrnUpdVal = Application.ScreenUpdating
    currDispAlrtVal = Application.DisplayAlerts
    currEnableEventsVal = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    
'    If Me.name Like "{*" Then
'    Else
'        CopyFilters target
'    End If
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(2)
    
    ValuesStartRow = Me.Range("$A$47").Row
    ValuesStartCol = Me.Range("$A$47").Column

    NbrRowsData = thisPivot.RowRange.count - 2
    If NbrRowsData > 10 Then NbrRowsData = 10
    
    Dim myChartObject As ChartObject
    Set myChartObject = Me.ChartObjects(2)
    Dim ChartOnPage As Chart
    Set ChartOnPage = myChartObject.Chart

    Dim ValuesRange As String
    ValuesRange = "='" & Me.name & "'!" & _
        Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
        Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
    ChartOnPage.SeriesCollection(1).XValues = ValuesRange
    ValuesStartCol = ValuesStartCol + 1
    ValuesRange = "='" & Me.name & "'!" & _
        Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
        Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
    ChartOnPage.SeriesCollection(1).Values = ValuesRange
    ValuesStartCol = ValuesStartCol + 2
    ValuesRange = "='" & Me.name & "'!" & _
        Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
        Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
    ChartOnPage.SeriesCollection(2).Values = ValuesRange
    
    Set myChartObject = Me.ChartObjects(1)
    Set ChartOnPage = myChartObject.Chart
    
    Set thisPivot = Me.PivotTables(1)
    NbrRowsData = thisPivot.RowRange.count - 2
    If NbrRowsData > 10 Then NbrRowsData = 10

    ValuesStartRow = Me.Range("$H$47").Row
    ValuesStartCol = Me.Range("$H$47").Column
    ValuesRange = "='" & Me.name & "'!" & _
        Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
        Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
    ChartOnPage.SeriesCollection(1).XValues = ValuesRange
    ValuesStartCol = ValuesStartCol + 1
    ValuesRange = "='" & Me.name & "'!" & _
        Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
        Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
    ChartOnPage.SeriesCollection(1).Values = ValuesRange
    ValuesStartCol = ValuesStartCol + 2
    ValuesRange = "='" & Me.name & "'!" & _
        Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
        Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
    ChartOnPage.SeriesCollection(2).Values = ValuesRange
    SetPrintArea Me, Target

ExitSub:

    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal

    PerformingUpdate = False

End Sub

Public Sub InitializeWorksheet()
        
    SortByAnalysisItem_AZ Me, Me.PivotTables(1)
    SortByAnalysisItem_AZ Me, Me.PivotTables(2)
    
    Me.PivotTables(1).TableRange2.Font.name = "Calibri"
    Me.PivotTables(1).TableRange2.Font.Size = 10
    Me.PivotTables(2).TableRange2.Font.name = "Calibri"
    Me.PivotTables(2).TableRange2.Font.Size = 10
    
End Sub


'Private Sub CopyFilters(target As PivotTable)
'
'    On Error Resume Next
'
'    Dim pt As PivotTable
'    Dim pitm As PivotItem
'    Dim pf As PivotField
'    Dim pfIsPageField As Boolean
'    For Each pt In Me.PivotTables
'        If pt.name = target.name Then
'        Else
'            For Each pf In pt.PivotFields
'                If pf.Orientation = xlPageField Then
'                    If pf.Orientation = xlPageField Then
'                        pfIsPageField = True
'                        target.PivotFields(pf.name).Orientation = xlRowField
'                    Else
'                        pfIsPageField = False
'                    End If
'                    For Each pitm In pf.PivotItems
'                        pitm.Visible = target.PivotFields(pf.name).PivotItems(pitm.name).Visible
'                    Next
'                    If pfIsPageField Then target.PivotFields(pf.name).Orientation = xlPageField
'                End If
'            Next
'        End If
'
'    Next
'
''    If target.name = "pt_lag1" Then
''        Set pt = Me.PivotTables("pt_lag2")
''        pt.TableRange2.Delete
''        target.TableRange2.Copy
''        Range("H30").PasteSpecial xlPasteAll
''    End If
'
'    On Error GoTo 0
'    Exit Sub
'
'End Sub




Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean



Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
'
    ActiveWindow.SplitColumn = 0
    'Range("A29").RowHeight = 24
    Me.Select
    Range("$A$1").Select
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:
    PerformingActivate = False
    
End Sub
'Private Sub SetZoom(NewSheet As Worksheet)
'
'    Dim PTRange As Range
'
'    Dim ColumnCount As Integer
'    Dim TempPT As PivotTable
'    RowCount = 0
'    For Each TempPT In NewSheet.PivotTables
'        Set PTRange = TempPT.TableRange2
'        ColumnCount = PTRange.Columns.count + PTRange.Column - 1
'    Next
'
'    Range("$A$1").Offset(0, ColumnCount).Select
'    ActiveWindow.Zoom = True
'
'End Sub



Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub

    If PerformingSort Or PerformingUpdate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True


    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    
    SetPrintArea Me, Target
    PivotTableUpdateSyncChart Me, Target
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:

    PerformingUpdate = False

End Sub


Public Sub InitializeWorksheet()
        
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(1)
'    If Me.ChartObjects.count > 0 Then
'        FormatStandardPivotTable Me, thisPivot, Me.ChartObjects(1)
'    Else
'        FormatStandardPivotTable Me, thisPivot, Nothing
'    End If
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24

ExitSub:
    PerformingActivate = False
    
End Sub




Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Public Sub Submit_Click()

    Dim TheSheet As Worksheet
    Dim obCell As Range
    Set obCell = Me.Range("$OSP$1")
 
    If obCell.Value = "I Agree" Then
        
        ShowAllSheets
      
        If ActiveWorkbook.Worksheets(SheetName_PivotData).Cells(3, 1).Value = "" Then
            
            Worksheets(SheetName_SourceData).Activate
            
        Else
            
            Worksheets(SheetName_Contents).Activate
        
        End If
        
            
    ElseIf obCell.Value = "I Disagree" Then
    
        HideAllButDisclaimer
        
        MsgBox "You may not use this tool if you cannot agree to the above terms."
        
    Else
        
        MsgBox "You must either agree or disagree"
            
    End If
    
End Sub

Public Sub I_Agree_Click()

    Dim RECATSheet As Worksheet
    Set RECATSheet = Worksheets("RECAT")
    Dim obCell As Range
    Set obCell = RECATSheet.Range("$OSP$1")
    obCell.Value = "I Agree"

End Sub
Public Sub I_Disagree_Click()

    Dim RECATSheet As Worksheet
    Set RECATSheet = Worksheets("RECAT")
    Dim obCell As Range
    Set obCell = RECATSheet.Range("$OSP$1")
    obCell.Value = "I Disagree"

End Sub


Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean



Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
'
    ActiveWindow.SplitColumn = 0
    'Range("A29").RowHeight = 24
    Me.Select
    Range("$A$1").Select
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:
    PerformingActivate = False
    
End Sub
'Private Sub SetZoom(NewSheet As Worksheet)
'
'    Dim PTRange As Range
'
'    Dim ColumnCount As Integer
'    Dim TempPT As PivotTable
'    RowCount = 0
'    For Each TempPT In NewSheet.PivotTables
'        Set PTRange = TempPT.TableRange2
'        ColumnCount = PTRange.Columns.count + PTRange.Column - 1
'    Next
'
'    Range("$A$1").Offset(0, ColumnCount).Select
'    ActiveWindow.Zoom = True
'
'End Sub



Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub

    If PerformingSort Or PerformingUpdate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True


    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    
    SetPrintArea Me, Target
    PivotTableUpdateSyncChart Me, Target
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:

    PerformingUpdate = False

End Sub


Public Sub InitializeWorksheet()
        
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(1)
'    If Me.ChartObjects.count > 0 Then
'        FormatStandardPivotTable Me, thisPivot, Me.ChartObjects(1)
'    Else
'        FormatStandardPivotTable Me, thisPivot, Nothing
'    End If
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24

ExitSub:
    PerformingActivate = False
    
End Sub




Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean



Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
'
    ActiveWindow.SplitColumn = 0
    'Range("A29").RowHeight = 24
    Me.Select
    Range("$A$1").Select
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:
    PerformingActivate = False
    
End Sub
'Private Sub SetZoom(NewSheet As Worksheet)
'
'    Dim PTRange As Range
'
'    Dim ColumnCount As Integer
'    Dim TempPT As PivotTable
'    RowCount = 0
'    For Each TempPT In NewSheet.PivotTables
'        Set PTRange = TempPT.TableRange2
'        ColumnCount = PTRange.Columns.count + PTRange.Column - 1
'    Next
'
'    Range("$A$1").Offset(0, ColumnCount).Select
'    ActiveWindow.Zoom = True
'
'End Sub



Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub

    If PerformingSort Or PerformingUpdate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True


    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    
    SetPrintArea Me, Target
    PivotTableUpdateSyncChart Me, Target
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:

    PerformingUpdate = False

End Sub


Public Sub InitializeWorksheet()
        
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(1)
'    If Me.ChartObjects.count > 0 Then
'        FormatStandardPivotTable Me, thisPivot, Me.ChartObjects(1)
'    Else
'        FormatStandardPivotTable Me, thisPivot, Nothing
'    End If
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24

ExitSub:
    PerformingActivate = False
    
End Sub




Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean



Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
'
    ActiveWindow.SplitColumn = 0
    'Range("A29").RowHeight = 24
    Me.Select
    Range("$A$1").Select
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:
    PerformingActivate = False
    
End Sub
'Private Sub SetZoom(NewSheet As Worksheet)
'
'    Dim PTRange As Range
'
'    Dim ColumnCount As Integer
'    Dim TempPT As PivotTable
'    RowCount = 0
'    For Each TempPT In NewSheet.PivotTables
'        Set PTRange = TempPT.TableRange2
'        ColumnCount = PTRange.Columns.count + PTRange.Column - 1
'    Next
'
'    Range("$A$1").Offset(0, ColumnCount).Select
'    ActiveWindow.Zoom = True
'
'End Sub



Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub

    If PerformingSort Or PerformingUpdate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True


    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    
    SetPrintArea Me, Target
    PivotTableUpdateSyncChart Me, Target
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:

    PerformingUpdate = False

End Sub


Public Sub InitializeWorksheet()
        
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(1)
'    If Me.ChartObjects.count > 0 Then
'        FormatStandardPivotTable Me, thisPivot, Me.ChartObjects(1)
'    Else
'        FormatStandardPivotTable Me, thisPivot, Nothing
'    End If
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24

ExitSub:
    PerformingActivate = False
    
End Sub




Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean



Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
'
    ActiveWindow.SplitColumn = 0
    'Range("A29").RowHeight = 24
    Me.Select
    Range("$A$1").Select
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:
    PerformingActivate = False
    
End Sub
'Private Sub SetZoom(NewSheet As Worksheet)
'
'    Dim PTRange As Range
'
'    Dim ColumnCount As Integer
'    Dim TempPT As PivotTable
'    RowCount = 0
'    For Each TempPT In NewSheet.PivotTables
'        Set PTRange = TempPT.TableRange2
'        ColumnCount = PTRange.Columns.count + PTRange.Column - 1
'    Next
'
'    Range("$A$1").Offset(0, ColumnCount).Select
'    ActiveWindow.Zoom = True
'
'End Sub



Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    On Error GoTo ExitSub

    If PerformingSort Or PerformingUpdate Or PerformingUpdate Then Exit Sub

    PerformingUpdate = True


    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    
    SetPrintArea Me, Target
    PivotTableUpdateSyncChart Me, Target
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24


ExitSub:

    PerformingUpdate = False

End Sub


Public Sub InitializeWorksheet()
        
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then
        Exit Sub
    End If


    PerformingActivate = True
    
    Dim thisPivot As PivotTable
    Set thisPivot = Me.PivotTables(1)
'    If Me.ChartObjects.count > 0 Then
'        FormatStandardPivotTable Me, thisPivot, Me.ChartObjects(1)
'    Else
'        FormatStandardPivotTable Me, thisPivot, Nothing
'    End If
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    Dim tmpRange As Range
    Set tmpRange = Me.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24

ExitSub:
    PerformingActivate = False
    
End Sub




Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private CommentsForm As New frmComments
Private rangeCleared As Boolean
Private pivottablesUpdated As Integer


Public Sub cbComments_Click()
    Dim Comments As String
    
    CommentsForm.Comments = Me.Range("COM255").Value
    CommentsForm.Show vbModal
    
    If CommentsForm.boolSave = True Then
        Me.Range("COM255").Value = CommentsForm.Comments
    End If
    Set CommentsForm = Nothing

End Sub


Private Sub Worksheet_Activate()

    'Me.Range("A2:A125").ColumnWidth = 61.57
    'Me.Range("B2:B125").ColumnWidth = 25.57
    'Me.Range("C2:C125").ColumnWidth = 37
    'Me.Range("D2:D125").ColumnWidth = 19.71

    'Me.Shapes("Button 2").Height = 24.5
    'Me.Shapes("Button 2").Width = 90.05
    If Me.Cells(66, 1).Value = "" Then
        If ActiveWorkbook.SlicerCaches.count <= 0 Then
        Else
            With ActiveWorkbook.SlicerCaches("Slicer_Policy_Year")
                Dim firstSlicerValue As String
                firstSlicerValue = ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").SlicerItems.Item(1).Value
                .SlicerItems(firstSlicerValue).Selected = True
            End With
            ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").ClearManualFilter
        End If
    End If
    

End Sub

'Private Sub Worksheet_Change(ByVal Target As Range)
    'Me.Range("A2:A125").ColumnWidth = 61.57
    'Me.Range("B2:B125").ColumnWidth = 25.57
    'Me.Range("C2:C125").ColumnWidth = 37
    'Me.Range("D2:D125").ColumnWidth = 19.71
    
    'Me.Shapes("Button 2").Height = 24.5
    'Me.Shapes("Button 2").Width = 90.05

'End Sub

'Private Sub Worksheet_PivotTableAfterValueChange(ByVal TargetPivotTable As PivotTable, ByVal TargetRange As Range)
'    Debug.Print Format(Now, "hh:mm:ss") & vbTab & "Worksheet_PivotTableAfterValueChange"
'End Sub

'Private Sub Worksheet_PivotTableChangeSync(ByVal Target As PivotTable)
'    Debug.Print Format(Now, "hh:mm:ss") & vbTab & "Worksheet_PivotTableChangeSync"
'End Sub

Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    'Debug.Print Format(Now, "hh:mm:ss") & vbTab & "Worksheet_PivotTableUpdate"
    'Debug.Print Format(Now, "hh:mm:ss") & vbTab & Target.name
    'Debug.Print Format(Now, "hh:mm:ss") & vbTab & pivottablesUpdated
    On Error Resume Next
    Dim RngToCover As Range
    Dim ChtOb As ChartObject
    
    If pivottablesUpdated = 0 Then
        Application.Calculation = False
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        Application.EnableEvents = False
        Me.Range(Cells(66, 1), Cells(200, 10)).Clear
        Me.Range(Cells(66, 1), Cells(200, 10)).ClearFormats
        Me.Range(Cells(66, 1), Cells(200, 10)).RowHeight = 15
        Set RngToCover = Me.Cells(100, 100)
        Set ChtOb = Me.ChartObjects("Chart 16")
        ChtOb.Top = RngToCover.Top       ' reposition
        ChtOb.Left = RngToCover.Left     ' reposition
        Me.ResetAllPageBreaks
        Application.Calculation = True
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
        Application.EnableEvents = True
    End If
    
    pivottablesUpdated = pivottablesUpdated + 1
    Dim rowCell As Integer
    Dim ColumnCell As Integer
    
    If pivottablesUpdated >= Me.PivotTables.count Then
        'On Error GoTo ExitSub
        Application.Calculation = False
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        Application.EnableEvents = False
    

        pivottablesUpdated = 0
        
        rowCell = 66
        ColumnCell = 1
        CopyPivotDataToSheet Me.PivotTables("Top10AccCatFreq"), rowCell, ColumnCell
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("Top10AccCatFreq"), "# Claims", rowCell + 1, ColumnCell + 1
        
        ColumnCell = 5
        CopyPivotDataToSheet Me.PivotTables("Top10AccCatSev"), rowCell, ColumnCell
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("Top10AccCatSev"), "$ Net Incurred", rowCell + 1, ColumnCell + 3
        
        If Me.PivotTables("Top10AccCatFreq").RowRange.Rows.count > Me.PivotTables("Top10AccCatSev").RowRange.Rows.count Then
            DrawPTSeparator Me.PivotTables("Top10AccCatFreq"), rowCell, 4
            rowCell = 66 + Me.PivotTables("Top10AccCatFreq").RowRange.Rows.count
        Else
            DrawPTSeparator Me.PivotTables("Top10AccCatSev"), rowCell, 5
            rowCell = 66 + Me.PivotTables("Top10AccCatSev").RowRange.Rows.count
        End If
        
        Me.PivotTables("ClmLvlCovFreq").PivotFields("Claim Level Coverage"). _
            AutoSort xlAscending, "Claim Level Coverage"
        Me.PivotTables("ClmLvlCovSev").PivotFields("Claim Level Coverage"). _
            AutoSort xlAscending, "Claim Level Coverage"


        Me.HPageBreaks.Add Before:=Me.Cells(rowCell, 1)

        Set RngToCover = Me.Cells(rowCell, 1)
        Set ChtOb = Me.ChartObjects("Chart 16")
        ChtOb.Top = RngToCover.Top       ' reposition
        ChtOb.Left = RngToCover.Left     ' reposition
        rowCell = rowCell + 15 'save room for top ten loss location state chart
        ColumnCell = 1
        CopyPivotDataToSheet Me.PivotTables("WCRptLag"), rowCell, ColumnCell
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("WCRptLag"), "# Claims", rowCell + 1, ColumnCell + 1
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("WCRptLag"), "% Net Incurred Total", rowCell + 1, ColumnCell + 3
        
        ColumnCell = 5
        CopyPivotDataToSheet Me.PivotTables("Top10AvgClm"), rowCell, ColumnCell
        Me.Cells(rowCell, ColumnCell).FormulaR1C1 = "=""Top "" & SiteLevelSelected & "" by Highest Average Claims $$"""
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("Top10AvgClm"), "Avg_Claim_Cost", rowCell + 1, ColumnCell + 2
        
        If Me.PivotTables("WCRptLag").RowRange.Rows.count > Me.PivotTables("Top10AvgClm").RowRange.Rows.count Then
            DrawPTSeparator Me.PivotTables("WCRptLag"), rowCell, 4
            rowCell = rowCell + Me.PivotTables("WCRptLag").RowRange.Rows.count
        Else
            DrawPTSeparator Me.PivotTables("Top10AvgClm"), rowCell, 5
            rowCell = rowCell + Me.PivotTables("Top10AvgClm").RowRange.Rows.count
        End If
        ColumnCell = 1
        CopyPivotDataToSheet Me.PivotTables("Top10SiteFreqLowLvlSite"), rowCell, ColumnCell
        Me.Cells(rowCell, ColumnCell).FormulaR1C1 = "=""Top Frequency by  "" & SiteLevelSelected"
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("Top10SiteFreqLowLvlSite"), "# Claims", rowCell + 1, ColumnCell + 1
        
        ColumnCell = 5
        CopyPivotDataToSheet Me.PivotTables("Top10SitesSevLowLvlSite"), rowCell, ColumnCell
        Me.Cells(rowCell, ColumnCell).FormulaR1C1 = "=""Top Severity by  "" & SiteLevelSelected"
        Add_Data_Bars_Dashboard_Rpt_Lag Me.PivotTables("Top10SitesSevLowLvlSite"), "$ Net Incurred", rowCell + 1, ColumnCell + 3
        
        If Me.PivotTables("Top10SiteFreqLowLvlSite").RowRange.Rows.count > Me.PivotTables("Top10SitesSevLowLvlSite").RowRange.Rows.count Then
            DrawPTSeparator Me.PivotTables("Top10SiteFreqLowLvlSite"), rowCell, 4
            rowCell = rowCell + Me.PivotTables("Top10SiteFreqLowLvlSite").RowRange.Rows.count
        Else
            DrawPTSeparator Me.PivotTables("Top10SitesSevLowLvlSite"), rowCell, 5
            rowCell = rowCell + Me.PivotTables("Top10SitesSevLowLvlSite").RowRange.Rows.count
        End If
        
        Dim ScrollAddress As String
        Dim ScrollRange As Range
        Set ScrollRange = Sheets("DashBoard").Range("a1").Resize(rowCell + 5, 9)
        ScrollAddress = ScrollRange.Address
        
        Sheets("DashBoard").ScrollArea = ScrollAddress
        With Me.PageSetup
        
            .PrintArea = ScrollRange.Address
        
            .Orientation = xlLandscape
            .Zoom = False
            .FitToPagesWide = 1
            .FitToPagesTall = False
            .CenterHorizontally = True
            .BottomMargin = Application.InchesToPoints(1.25)
            .TopMargin = Application.InchesToPoints(0.5)
        
            .LeftFooter = Me.name
            .CenterFooter = "&G" & Chr(10) & "Page &P of &N"
            .RightFooter = "Version: &D, &T"
        End With
        Sheets("DashBoard").ResetAllPageBreaks
        Range("I40").Select
        Sheets("DashBoard").HPageBreaks.Add Before:=Me.Cells(41, 1)
        Sheets("DashBoard").HPageBreaks.Add Before:=RngToCover
ExitSub:
    
        Application.StatusBar = ""
        Application.Calculation = True
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
        Application.EnableEvents = True
    End If
End Sub

Private Sub CopyPivotDataToSheet(ByVal Target As PivotTable, rowCell As Integer, ColumnCell As Integer)
        Dim i As Integer
        For i = 0 To Target.RowRange.Rows.count - 1
            Me.Cells(rowCell + i, ColumnCell).Value = "'" & Target.RowRange.Offset(i, 0).Resize(1, 1).Value
            If i = 0 Then
                With Me.Cells(rowCell + i, ColumnCell).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = RGB(0, 51, 153)
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Me.Rows(rowCell)
                    .RowHeight = 30
                    .WrapText = True
                    .Font.Color = RGB(255, 255, 255)
                End With
            End If
            Dim y As Integer
            For y = 1 To Target.ColumnRange.Columns.count
                Me.Cells(rowCell + i, ColumnCell + y).Value = Target.RowRange.Offset(i, y).Resize(1, 1).Value
                If i = 0 Then
                    With Me.Cells(rowCell + i, ColumnCell + y).Interior
                        .Pattern = xlSolid
                        .PatternColorIndex = xlAutomatic
                        .Color = RGB(0, 51, 146)
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    With Me.Cells(rowCell + i, ColumnCell + y)
                        .HorizontalAlignment = xlRight
                    End With
                    If y = 0 Then
                        With Me.Cells(rowCell, ColumnCell)
                            .WrapText = True
                        End With
                    End If
                End If
                If y > 1 Then
                    If Target.name = "WCRptLag" Then
                        With Me.Cells(rowCell + i, ColumnCell + y)
                            .NumberFormat = "0.0%"
                        End With
                    Else
                        With Me.Cells(rowCell + i, ColumnCell + y)
                            .NumberFormat = "$#,##0_);($#,##0)"
                        End With
                    End If
                Else
                    With Me.Cells(rowCell + i, ColumnCell + y)
                        .NumberFormat = "#,##0_);(#,##0)"
                    End With
                End If
            Next
        Next i
End Sub

Private Sub DrawPTSeparator(ByVal Target As PivotTable, rowCell As Integer, ColumnCell As Integer)
    Dim i As Integer
    For i = 0 To Target.RowRange.Rows.count - 1
        If ColumnCell = 5 Then
            With Me.Cells(rowCell + i, ColumnCell)
                .Borders(xlDiagonalDown).LineStyle = xlNone
                .Borders(xlDiagonalUp).LineStyle = xlNone
                .Borders(xlEdgeLeft).LineStyle = xlDash
                .Borders(xlEdgeLeft).ColorIndex = xlAutomatic
                .Borders(xlEdgeLeft).TintAndShade = 0
                .Borders(xlEdgeLeft).Weight = xlMedium
                .Borders(xlEdgeTop).LineStyle = xlNone
                .Borders(xlEdgeBottom).LineStyle = xlNone
                .Borders(xlEdgeRight).LineStyle = xlNone
                .Borders(xlInsideVertical).LineStyle = xlNone
                .Borders(xlInsideHorizontal).LineStyle = xlNone
            End With
        Else
            With Me.Cells(rowCell + i, ColumnCell)
                .Borders(xlDiagonalDown).LineStyle = xlNone
                .Borders(xlDiagonalUp).LineStyle = xlNone
                .Borders(xlEdgeRight).LineStyle = xlDash
                .Borders(xlEdgeRight).ColorIndex = xlAutomatic
                .Borders(xlEdgeRight).TintAndShade = 0
                .Borders(xlEdgeRight).Weight = xlMedium
                .Borders(xlEdgeTop).LineStyle = xlNone
                .Borders(xlEdgeBottom).LineStyle = xlNone
                .Borders(xlEdgeLeft).LineStyle = xlNone
                .Borders(xlInsideVertical).LineStyle = xlNone
                .Borders(xlInsideHorizontal).LineStyle = xlNone
            End With
        End If
    Next i

End Sub

'Private Sub Worksheet_SelectionChange(ByVal Target As Range)
'    Debug.Print Format(Now, "hh:mm:ss") & vbTab & "Worksheet_SelectionChange"
'End Sub


Private Sub Add_Data_Bars_Dashboard_Rpt_Lag(ByVal Target As PivotTable, fieldName As String, rowCell As Integer, ColumnCell As Integer)
    
    Dim wrng As Range
    
    Set wrng = Me.Cells(rowCell, ColumnCell).Resize(Target.PivotFields(fieldName).DataRange.Rows.count, 1)
    wrng.FormatConditions.AddDatabar
    wrng.FormatConditions(wrng.FormatConditions.count).ShowValue = True
    wrng.FormatConditions(wrng.FormatConditions.count).SetFirstPriority
    With wrng.FormatConditions(1)
        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin
        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax
    End With
    With wrng.FormatConditions(1).BarColor
        .Color = 13012579
        .TintAndShade = 0
    End With
    wrng.FormatConditions(1).BarFillType = xlDataBarFillGradient
    wrng.FormatConditions(1).Direction = xlContext
    wrng.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor
    wrng.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid
    wrng.FormatConditions(1).NegativeBarFormat.BorderColorType = _
        xlDataBarColor
    With wrng.FormatConditions(1).BarBorder.Color
        .Color = 13012579
        .TintAndShade = 0
    End With
    wrng.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic
    With wrng.FormatConditions(1).AxisColor
        .Color = 0
        .TintAndShade = 0
    End With
    With wrng.FormatConditions(1).NegativeBarFormat.Color
        .Color = 255
        .TintAndShade = 0
    End With
    With wrng.FormatConditions(1).NegativeBarFormat.BorderColor
        .Color = 255
        .TintAndShade = 0
    End With
    
    
    ActiveWorkbook.ShowPivotTableFieldList = False
    
End Sub

Private Sub test()
        Sheets("DashBoard").ScrollArea = ScrollAddress
        Exit Sub
Dim pt As PivotTable
For Each pt In Sheets("Dashboard").PivotTables
    Debug.Print pt.name
    Debug.Print pt.CacheIndex
Next
End Sub
Private Sub test2()
Dim pt As PivotTable
Dim i As Integer
For i = 1 To Sheets("Dashboard").PivotTables.count
    Set pt = Sheets("Dashboard").PivotTables(i)
    Debug.Print pt.name
    Debug.Print pt.CacheIndex
Next
End Sub

Private Sub testRowRange()
Dim pt As PivotTable
Set pt = Me.PivotTables("Top10AccCatFreq")
            Dim rowCell As Integer
            Dim ColumnCell As Integer
            rowCell = 66
            ColumnCell = 1
            Dim i As Integer
            i = 0
            
            For i = 0 To pt.RowRange.Rows.count - 1
                'Debug.Print Me.Cells(rowCell + i, columnCell).Value
                'Debug.Print pt.RowRange.Offset(i, 0).Resize(1, 1).Value
                Me.Cells(rowCell + i, ColumnCell).Value = pt.RowRange.Offset(i, 0).Resize(1, 1).Value
                Dim y As Integer
                For y = 1 To pt.ColumnRange.Columns.count
                    Me.Cells(rowCell + i, ColumnCell + y).Value = pt.RowRange.Offset(i, y).Resize(1, 1).Value
                Next
            Next i
End Sub


Private Sub test3()
        Me.Range(Cells(66, 1), Cells(200, 10)).Clear
        Me.Range(Cells(66, 1), Cells(200, 10)).ClearFormats
        Me.Range(Cells(66, 1), Cells(200, 10)).RowHeight = 15
        Set RngToCover = Me.Cells(100, 100)
        Set ChtOb = Me.ChartObjects("Chart 16")
        ChtOb.Top = RngToCover.Top       ' reposition
        ChtOb.Left = RngToCover.Left     ' reposition
        Me.ResetAllPageBreaks
        Sheets("DashBoard").ScrollArea = ""

End Sub


Public Sub AddSiteSlicer(SiteLevel As String)

    Dim i As SlicerCaches
    Dim j As SlicerCache
    Dim idx2 As Integer
    
    Set i = ActiveWorkbook.SlicerCaches
    For idx2 = 1 To i.count
        Set j = i.Item(idx2)
        If j.name = "Slicer_Site" Then
            Exit For
        End If
    Next

    If j.name = "Slicer_Site" Then
        Dim pt As PivotTable
        Set pt = Sheets("DashBoard").PivotTables("Top10AvgClm")
        If pt.RowFields(1) = SiteLevel Then
            Exit Sub
        End If
        j.Delete
    End If
    
    Dim sheetDashboard As Worksheet
    Set sheetDashboard = ActiveWorkbook.Sheets("Dashboard")
    
    'Application.EnableEvents = True
    Me.Range("SiteLevelSelected").Value = SiteLevel
    
    Select Case SiteLevel
        Case "Site Level 1"
            ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), _
                "Site Level 1", "Slicer_Site").Slicers.Add Sheets("DashBoard"), , "Site Level 1", "Select Site Level 1", _
                 353.75, 1.44, 186.6, 276.25
            ActiveWorkbook.SlicerCaches("Slicer_Site").Slicers("Site Level 1").Style _
                = "SlicerStyleDark1"
        Case "Site Level 2"
            ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), _
                "Site Level 2", "Slicer_Site").Slicers.Add Sheets("DashBoard"), , "Site Level 2", "Select Site Level 2", _
                 353.75, 1.44, 186.6, 276.25
            ActiveWorkbook.SlicerCaches("Slicer_Site").Slicers("Site Level 2").Style _
                = "SlicerStyleDark1"
        Case "Site Level 3"
            ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), _
                "Site Level 3", "Slicer_Site").Slicers.Add Sheets("DashBoard"), , "Site Level 3", "Select Site Level 3", _
                 353.75, 1.44, 186.6, 276.25
            ActiveWorkbook.SlicerCaches("Slicer_Site").Slicers("Site Level 3").Style _
                = "SlicerStyleDark1"
        Case "Site Lowest Name"
            ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), _
                "Site Lowest Name", "Slicer_Site").Slicers.Add Sheets("DashBoard"), , "Site Lowest Name", "Select Site Lowest Name", _
                 353.75, 1.44, 186.6, 276.25
            ActiveWorkbook.SlicerCaches("Slicer_Site").Slicers("Site Lowest Name").Style _
                = "SlicerStyleDark1"
        Case "Site Lowest"
            ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), _
                "Site Lowest", "Slicer_Site").Slicers.Add Sheets("DashBoard"), , "Site Lowest", "Select Site Lowest", _
                 353.75, 1.44, 186.6, 276.25
            ActiveWorkbook.SlicerCaches("Slicer_Site").Slicers("Site Lowest").Style _
                = "SlicerStyleDark1"
    End Select
    
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("ClmLvlCovSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CovSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CovFreq"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("PolYear"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CalYear"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("NetIncBand"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10LossLocSt"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AvgClm"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AccCatFreq"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AccCatSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("WCRptLag"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10SitesSevLowLvlSite"))
    ActiveWorkbook.SlicerCaches("Slicer_Site").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10SiteFreqLowLvlSite"))
        
    ResetPivotTableAttrs SiteLevel
    'Application.EnableEvents = False
    pivottablesUpdated = Me.PivotTables.count + 10
    Worksheet_PivotTableUpdate Sheets("DashBoard").PivotTables("Top10AvgClm")

End Sub

Public Sub ResetPivotTableAttrs(SiteLevel As String)
    Dim holdEnableEvents As Boolean
    holdEnableEvents = Application.EnableEvents
    Application.EnableEvents = True
    Dim DashBoardSheet As Worksheet
    Set DashBoardSheet = Sheets("DashBoard")
    With DashBoardSheet
        .PivotTables("Top10AvgClm").RowFields(1).ClearAllFilters
        
        .PivotTables("Top10AvgClm").AddFields RowFields:=SiteLevel
        
        .PivotTables("Top10AvgClm").RowRange.HorizontalAlignment = xlLeft
        .PivotTables("Top10AvgClm").PivotFields(SiteLevel).AutoSort xlDescending, "Avg_Claim_Cost"
        If Application.Version >= 15# Then
            .PivotTables("Top10AvgClm").PivotFields( _
                SiteLevel).PivotFilters.Add2 Type:=xlTopCount, DataField:= _
                .PivotTables("Top10AvgClm").PivotFields("Avg_Claim_Cost"), _
                Value1:=10
        Else
            .PivotTables("Top10AvgClm").PivotFields( _
                SiteLevel).PivotFilters.Add Type:=xlTopCount, DataField:= _
                .PivotTables("Top10AvgClm").PivotFields("Avg_Claim_Cost"), _
                Value1:=10
        End If
        
        .PivotTables("Top10SitesSevLowLvlSite").RowFields(1).ClearAllFilters
        
        .PivotTables("Top10SitesSevLowLvlSite").AddFields RowFields:=SiteLevel
        
        .PivotTables("Top10SitesSevLowLvlSite").RowRange.HorizontalAlignment = xlLeft
        
        .PivotTables("Top10SitesSevLowLvlSite").PivotFields(SiteLevel).AutoSort xlDescending, "$ Net Incurred"
        If Application.Version >= 15# Then
            .PivotTables("Top10SitesSevLowLvlSite").PivotFields( _
                SiteLevel).PivotFilters.Add2 Type:=xlTopCount, DataField:= _
                .PivotTables("Top10SitesSevLowLvlSite").PivotFields("$ Net Incurred"), _
                Value1:=10
        Else
            .PivotTables("Top10SitesSevLowLvlSite").PivotFields( _
                SiteLevel).PivotFilters.Add Type:=xlTopCount, DataField:= _
                .PivotTables("Top10SitesSevLowLvlSite").PivotFields("$ Net Incurred"), _
                Value1:=10
        End If
        .PivotTables("Top10SiteFreqLowLvlSite").RowFields(1).ClearAllFilters
        
        .PivotTables("Top10SiteFreqLowLvlSite").AddFields RowFields:=SiteLevel
        
        .PivotTables("Top10SiteFreqLowLvlSite").RowRange.HorizontalAlignment = xlLeft
        .PivotTables("Top10SiteFreqLowLvlSite").PivotFields(SiteLevel).AutoSort xlDescending, "# Claims"
        If Application.Version >= 15# Then
            .PivotTables("Top10SiteFreqLowLvlSite").PivotFields( _
                SiteLevel).PivotFilters.Add2 Type:=xlTopCount, DataField:= _
                .PivotTables("Top10SiteFreqLowLvlSite").PivotFields("# Claims"), _
                Value1:=10
        Else
            .PivotTables("Top10SiteFreqLowLvlSite").PivotFields( _
                SiteLevel).PivotFilters.Add Type:=xlTopCount, DataField:= _
                .PivotTables("Top10SiteFreqLowLvlSite").PivotFields("# Claims"), _
                Value1:=10
        End If
    End With
    
    Application.EnableEvents = holdEnableEvents
    
    'With ActiveWorkbook.SlicerCaches("Slicer_Site")
    '    Dim firstSlicerValue As String
    '    firstSlicerValue = ActiveWorkbook.SlicerCaches("Slicer_Site").SlicerItems.Item(1).Value
    '    .SlicerItems(firstSlicerValue).Selected = True
    'End With
    'ActiveWorkbook.SlicerCaches("Slicer_Site").ClearManualFilter

End Sub

Public Sub SiteLevel1_Click()

    On Error GoTo AddSiteLevel1Error
    
    If Me.Cells(1, 105).Value <> "True" Then
        Exit Sub
    End If
    
    Application.Cursor = xlWait
    Application.Calculation = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    With Me.Shapes("SiteLevel1").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(79, 129, 189)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel1").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    With Me.Shapes("SiteLevel2").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel2").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel3").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel3").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowestName").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowestName").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowest").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowest").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    AddSiteSlicer "Site Level 1"
AddSiteLevel1Error:
    Application.StatusBar = ""
    Application.Calculation = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Cursor = xlDefault

End Sub
Public Sub SiteLevel2_Click()

    On Error GoTo AddSiteLevel2Error
    
    If Me.Cells(1, 106).Value <> "True" Then
        Exit Sub
    End If
    
    Application.Cursor = xlWait
    Application.Calculation = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    With Me.Shapes("SiteLevel2").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(79, 129, 189)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel2").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    With Me.Shapes("SiteLevel1").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel1").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel3").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel3").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowestName").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowestName").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowest").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowest").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    AddSiteSlicer "Site Level 2"

AddSiteLevel2Error:
    Application.StatusBar = ""
    Application.Calculation = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Cursor = xlDefault

End Sub

Public Sub SiteLevel3_Click()

    On Error GoTo AddSiteLevel3Error
    
    If Me.Cells(1, 107).Value <> "True" Then
        Exit Sub
    End If
    
    Application.Cursor = xlWait
    Application.Calculation = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    With Me.Shapes("SiteLevel3").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(79, 129, 189)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel3").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    With Me.Shapes("SiteLevel1").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel1").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel2").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel2").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowestName").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowestName").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowest").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowest").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    AddSiteSlicer "Site Level 3"

AddSiteLevel3Error:
    Application.StatusBar = ""
    Application.Calculation = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Cursor = xlDefault

End Sub

Public Sub SiteLowestName_Click()

    On Error GoTo AddSiteLowestNameError
    
    If Me.Cells(1, 108).Value <> "True" Then
        Exit Sub
    End If
    
    Application.Cursor = xlWait
    Application.Calculation = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    With Me.Shapes("SiteLowestName").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(79, 129, 189)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowestName").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    With Me.Shapes("SiteLevel1").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel1").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel2").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel2").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel3").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel3").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowest").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowest").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    AddSiteSlicer "Site Lowest Name"
    
AddSiteLowestNameError:
    Application.StatusBar = ""
    Application.Calculation = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Cursor = xlDefault

End Sub

Public Sub SiteLowest_Click()

    On Error GoTo AddSiteLowestError
    
    If Me.Cells(1, 109).Value <> "True" Then
        Exit Sub
    End If
    
    Application.Cursor = xlWait
    Application.Calculation = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    With Me.Shapes("SiteLowest").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(79, 129, 189)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowest").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With

    With Me.Shapes("SiteLevel1").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel1").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel2").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel2").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLevel3").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLevel3").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Me.Shapes("SiteLowestName").Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(191, 191, 191)
        .Transparency = 0
        .Solid
    End With
    'Application.CommandBars("Format Object").Visible = False
    With Me.Shapes("SiteLowestName").TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    AddSiteSlicer "Site Lowest"
    
AddSiteLowestError:
    Application.StatusBar = ""
    Application.Calculation = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.Cursor = xlDefault

End Sub

Public Sub CheckIfSiteFieldsHaveData()

    Dim SiteLevel1Col As Variant
    Dim SiteLevel2Col As Variant
    Dim SiteLevel3Col As Variant
    Dim SiteLowestNameCol As Variant
    Dim SiteLowestCol As Variant
    Dim i As Long

    Me.Cells(1, 105).Value = "'False"    'Site Level 1
    Me.Cells(1, 106).Value = "'False"    'Site Level 2
    Me.Cells(1, 107).Value = "'False"    'Site Level 3
    Me.Cells(1, 108).Value = "'False"    'Site Lowest Name
    Me.Cells(1, 109).Value = "'False"    'Site Lowest
    
    SiteLevel1Col = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Site Level 1]]").Value
    SiteLevel2Col = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Site Level 2]]").Value
    SiteLevel3Col = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Site Level 3]]").Value
    SiteLowestNameCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Site Lowest Name]]").Value
    SiteLowestCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Site Lowest]]").Value
    
    For i = 2 To UBound(SiteLevel1Col)
    
        If SiteLevel1Col(i, 1) = "'" Or Len(Trim(SiteLevel1Col(i, 1))) = 0 Then
        Else
            Me.Cells(1, 105).Value = "'True"    'Site Level 1
        End If
        If SiteLevel2Col(i, 1) = "'" Or Len(Trim(SiteLevel2Col(i, 1))) = 0 Then
        Else
            Me.Cells(1, 106).Value = "'True"    'Site Level 2
        End If
        If SiteLevel3Col(i, 1) = "'" Or Len(Trim(SiteLevel3Col(i, 1))) = 0 Then
        Else
            Me.Cells(1, 107).Value = "'True"    'Site Level 3
        End If
        If SiteLowestNameCol(i, 1) = "'" Or Len(Trim(SiteLowestNameCol(i, 1))) = 0 Then
        Else
            Me.Cells(1, 108).Value = "'True"    'Site Lowest Name
        End If
        If SiteLowestCol(i, 1) = "'" Or Len(Trim(SiteLowestCol(i, 1))) = 0 Then
        Else
            Me.Cells(1, 109).Value = "'True"    'Site Lowest
        End If
        If Me.Cells(1, 105).Value = "True" And _
            Me.Cells(1, 106).Value = "True" And _
            Me.Cells(1, 107).Value = "True" And _
            Me.Cells(1, 108).Value = "True" And _
            Me.Cells(1, 109).Value = "True" Then
            Exit For
        End If
    Next
    
End Sub







Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean

Private Sub Worksheet_Activate()

    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then Exit Sub

    PerformingActivate = True
    Me.Select
    Range("$A$1").Select
'
ExitSub:
    PerformingActivate = False
    
End Sub



Public Sub SetChartType()

    If Me.name Like "{*" Then Exit Sub
    
    Dim NbrRowsData As Long
    Dim ValuesStartRow As Integer
    Dim ValuesStartCol As Integer
    Dim ctrlCell, tmpRng As Range
    Set ctrlCell = Range("AB1")
    
    Dim MvngAvgRng As Range
    
    ValuesStartRow = Me.Range("$A$33").Row
    ValuesStartCol = Me.Range("$A$33").Column
    
    Dim thisPT As PivotTable
    Set thisPT = Me.PivotTables(1)

    NbrRowsData = thisPT.RowRange.count - 2
    If ScrollArea <> "" Then
        Set tmpRng = Range(ScrollArea)
        If tmpRng.Rows.count > (thisPT.DataBodyRange.Row + thisPT.DataBodyRange.Rows.count) Then
            Set MvngAvgRng = Cells(thisPT.DataBodyRange.Row + thisPT.DataBodyRange.Rows.count, _
                                    thisPT.TableRange2.Columns.count + 1) _
                                    .Resize(tmpRng.Rows.count - _
                                    (thisPT.DataBodyRange.Row + thisPT.DataBodyRange.Rows.count), 2)
            
            
            MvngAvgRng.Borders(xlEdgeLeft).LineStyle = xlNone
            MvngAvgRng.Borders(xlEdgeTop).LineStyle = xlNone
            MvngAvgRng.Borders(xlEdgeBottom).LineStyle = xlNone
            MvngAvgRng.Borders(xlEdgeRight).LineStyle = xlNone
            MvngAvgRng.Borders(xlInsideVertical).LineStyle = xlNone
            MvngAvgRng.Borders(xlInsideHorizontal).LineStyle = xlNone
        End If
    End If
    
    Set MvngAvgRng = Cells(thisPT.DataBodyRange.Row, _
                            thisPT.TableRange2.Columns.count + 1).Resize(NbrRowsData, 1)
    MvngAvgRng.Value = "=IF(OR(COUNT(C31:C33)<1,A33=""Totals"",A33=""""),"""",AVERAGE(C31:C33))"
    MvngAvgRng.Font.name = "Calibri"
    MvngAvgRng.Font.Size = 10
    MvngAvgRng.NumberFormat = "#,##0"
    Set MvngAvgRng = MvngAvgRng.Offset(0, 1).Resize(NbrRowsData, 1)
    MvngAvgRng.Value = "=IF(OR(COUNT(C31:C33)<1,A33=""Totals"",A33=""""),"""",AVERAGE(G31:G33))"
    MvngAvgRng.Font.name = "Calibri"
    MvngAvgRng.Font.Size = 10
    MvngAvgRng.NumberFormat = "$#,##0"
    Set MvngAvgRng = MvngAvgRng.Offset(0, -1).Resize(NbrRowsData, 2)
    With MvngAvgRng.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With MvngAvgRng.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Set MvngAvgRng = MvngAvgRng.Offset(NbrRowsData, 0).Resize(1, 2)
    With MvngAvgRng.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With MvngAvgRng.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Dim myChartObject As ChartObject
    Set myChartObject = Me.ChartObjects(1)
    Dim ChartOnPage As Chart
    Set ChartOnPage = myChartObject.Chart

    Dim ValuesRange As String
    If ctrlCell.Value = 2 Then
        ValuesRange = "='" & Me.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(1).name = "='Claim Trending'!$J$32"
        ChartOnPage.SeriesCollection(1).XValues = ValuesRange
        ValuesStartCol = ValuesStartCol + 9
        ValuesRange = "='" & Me.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(1).Values = ValuesRange
        ValuesStartCol = ValuesStartCol + 1
        ValuesRange = "='" & Me.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(2).name = "='Claim Trending'!$K$32"
        ChartOnPage.SeriesCollection(2).Values = ValuesRange
        ChartOnPage.ChartTitle.Text = "Three Month Moving Average"
    Else
        ValuesRange = "='" & Me.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(1).name = "='Claim Trending'!$C$32"
        ChartOnPage.SeriesCollection(1).XValues = ValuesRange
        ValuesStartCol = ValuesStartCol + 2
        ValuesRange = "='" & Me.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(1).Values = ValuesRange
        ValuesStartCol = ValuesStartCol + 4
        ValuesRange = "='" & Me.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(2).name = "='Claim Trending'!$G$32"
        ChartOnPage.SeriesCollection(2).Values = ValuesRange
        ChartOnPage.ChartTitle.Text = "Linear"
    End If

End Sub


Public Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    
   
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then Exit Sub

    PerformingUpdate = True
    SetChartType
    SetPrintArea Me, Target

ExitSub:
    PerformingUpdate = False
End Sub

Public Sub InitializeWorksheet()
        
   
    On Error GoTo ExitSub
    If PerformingSort Or PerformingUpdate Or PerformingActivate Then Exit Sub

    PerformingActivate = True
    
    Me.PivotTables(1).TableRange2.Font.name = "Calibri"
    Me.PivotTables(1).TableRange2.Font.Size = 10
    SetChartType

ExitSub:
    PerformingActivate = False
End Sub






Attribute VB_Name = "Sheet53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private PerformingSort As Boolean
Private PerformingActivate As Boolean
Private PerformingUpdate As Boolean





Private Sub Worksheet_Activate()

'    On Error GoTo ExitSub
'    Dim PrevScreenUpdating, PrevDisplayAlerts, PrevEnableEvents As Boolean
'
'    If PerformingSort = True Or PerformingUpdate = True Then Exit Sub
'
'    PerformingActivate = True
'
'
'
'ExitSub:
'
    Application.StatusBar = ""
    Me.Select
    Range("$A$1").Select
'
'    PerformingActivate = False
    
End Sub



'Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
'    On Error GoTo ExitSub
'
'    If PerformingSort = True Or PerformingActivate = True Then Exit Sub
'
'    PerformingUpdate = True
'
'
'
'ExitSub:
'
'    Application.StatusBar = ""
'
'    PerformingUpdate = False
'
'End Sub

Public Sub InitializeWorksheet()
        

End Sub




Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Compare Text
Option Explicit

Public SourceDataRowCount As Integer

Private LoadDataDialog As frmLoadData

Private Sub Worksheet_Activate()
    On Error GoTo ExitSub
    
    Me.Select
    Range("$A$3").Select
    Dim thissheet As Worksheet
    Set thissheet = Worksheets("Data2")

    If Len(Range("$A$3").Value) = 0 Then
        Dim LoadDataShape As Shape
        Set LoadDataShape = Nothing
        Dim testShape As Shape
        For Each testShape In thissheet.Shapes
            If testShape.name = "CBAddData" Then
                Set LoadDataShape = testShape
            End If
        Next
        If (LoadDataShape Is Nothing) Then
            Dim btn As Button
            Set btn = Me.Buttons.Add(0, 0, 170.64, 53.28)
            With btn
                  .OnAction = "btnDataAddition_Click"
                  .Caption = "Add Data"
                  .name = "CBAddData"
                  .Font.name = "Calibri"
                  .Font.FontStyle = "Bold"
                  .Font.Color = RGB(255, 0, 0)
                  .Font.Size = 20
            End With
            Set btn = Nothing
        End If
    End If
    
ExitSub:

'    Range("$A$1").Select

End Sub

Private Sub NotifyUserOfInvalidSourceData(Description As String)

    Dim MsgText As String
    MsgText = "ERROR!" & Chr(13) & Chr(13) _
        & Description & Chr(13) & "Close the template and run the RECAT 2.0 report in BusinessObjects."
    
    If (ActiveWorkbook.Names("AutoOrManual").RefersToRange.Value = "Auto") Then
    
    ActiveWorkbook.Names("errorr").RefersToRange.Value = MsgText
    
    Else
    
    MsgBox MsgText
    
    End If
    
    
End Sub

Private Function ValidateData() As Boolean

    On Err GoTo ErrHandler
    
    Dim thissheet As Worksheet
    Set thissheet = Me
    
    Dim retVal As Boolean

    Application.StatusBar = "Validating Data"

    retVal = ValidateFieldMapping() And ValidateDataSourceShape()
    
    If Not retVal Then
    
        NotifyUserOfInvalidSourceData "Unknown occurred during data validation."
        ValidateData = retVal
        Return

    End If
    
    Application.StatusBar = ""

    ValidateData = retVal
    
Exit Function
    
ErrHandler:

    Debug.Print Err.Description
    
End Function

Private Function ValidateDataSourceShape() As Boolean

    On Error GoTo ErrHandler
    
    Dim thissheet As Worksheet
    Set thissheet = Me
    
    Application.StatusBar = "Validating Data Source Shape"

    Dim retVal As Boolean
    retVal = True
    
    If UCase(thissheet.Range(Address_SourceData_TopLeft).Text) = _
        UCase(thissheet.Range(Address_SourceData_TopLeft).Offset(1, 0).Text) _
        Or UCase(thissheet.Range(Address_SourceData_TopLeft).Offset(0, 1).Text) = _
        UCase(thissheet.Range(Address_SourceData_TopLeft).Offset(1, 1).Text) Then
        
        ValidateDataSourceShape = False
        
        NotifyUserOfInvalidSourceData "Header Row should not be included with the data."
        
        Return

    End If
    
    Dim LastRowFirstCol As Range
    Set LastRowFirstCol = thissheet.Range(Address_SourceData_TopLeft).End(xlDown)
    
        
    While LastRowFirstCol.Value = ""
        Set LastRowFirstCol = LastRowFirstCol.Offset(-1, 0)
    Wend
    
    While LastRowFirstCol.Offset(1, 0).Value <> ""
        Set LastRowFirstCol = LastRowFirstCol.Offset(1, 0)
    Wend
        
    
    Dim LastRowLastCol As Range
    Set LastRowLastCol = thissheet.Range(Address_SourceData_TopRight).End(xlDown)
    If LastRowLastCol.Value = "" Then LastRowLastCol = LastRowLastCol.Offset(-1, 0)
    
    While LastRowLastCol.Value = ""
        Set LastRowLastCol = LastRowLastCol.Offset(-1, 0)
    Wend
    
    While LastRowLastCol.Offset(1, 0).Value <> ""
        Set LastRowLastCol = LastRowLastCol.Offset(1, 0)
    Wend
    
    If LastRowFirstCol.Row <> LastRowLastCol.Row Then
        
        ValidateDataSourceShape = False
        
        NotifyUserOfInvalidSourceData "The data you are trying to load does not match this template."
        Return
    
    End If
    
    ValidateDataSourceShape = retVal
    
    If retVal = False Then Return
    
    If thissheet.ListObjects.count > 0 Then
    Else
        Dim SourceDataRowCount As Long
        SourceDataRowCount = LastRowFirstCol.Row - thissheet.Range(Address_SourceData_TopLeft).Row

        CreateListObjectClaimsTbl (SourceDataRowCount)
    End If
    
    ActiveWindow.SplitColumn = 0
    ActiveWindow.SplitRow = 0
    Application.StatusBar = ""
'    ResizeDataList SheetName_CleanData, SourceDataRowCount
'    ResizeDataList SheetName_PivotData, SourceDataRowCount
    
Exit Function
    
ErrHandler:
    
    Application.StatusBar = ""
    ValidateDataSourceShape = False


End Function

Public Sub CreateListObjectClaimsTbl(SourceDataRowCount As Long)

    On Error GoTo error_exit

    Dim thissheet As Worksheet
    Set thissheet = Me

    Dim NewTbl As ListObject
    Set NewTbl = thissheet.ListObjects.Add(xlSrcRange, _
        Range(Cells(thissheet.Range(Address_SourceData_TopLeft).Row, 1), _
                Cells(thissheet.Range(Address_SourceData_TopLeft).Row + SourceDataRowCount, _
                        thissheet.Range(Address_PivotData_TopRight).Column)), , xlYes)
    
    NewTbl.name = ListName_PivotData

    Dim currScrnUpdVal As Variant
    Dim currDispAlrtVal As Variant
    Dim currEnableEventsVal As Variant
    currScrnUpdVal = Application.ScreenUpdating
    currDispAlrtVal = Application.DisplayAlerts
    currEnableEventsVal = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    ActiveWorkbook.ShowPivotTableFieldList = False
    
    Dim thisPivot As PivotTable

    For Each thissheet In ActiveWorkbook.Worksheets
        For Each thisPivot In thissheet.PivotTables

            ActiveWorkbook.ShowPivotTableFieldList = False
            ActiveWindow.SplitColumn = 0
            thisPivot.SourceData = ListName_PivotData
            'thisPivot.RefreshTable
            thisPivot.PivotCache.MissingItemsLimit = xlMissingItemsNone


        Next thisPivot
        ActiveWorkbook.ShowPivotTableFieldList = False
        ActiveWindow.SplitColumn = 0

    Next thissheet
    
    'ActiveWorkbook.RefreshAll

error_exit:

    ActiveWorkbook.ShowPivotTableFieldList = False
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal

End Sub

Public Sub UnlistClaimsTbl()

    Dim thissheet As Worksheet
    Set thissheet = Me

    Dim NewTbl As ListObject
    Set NewTbl = thissheet.ListObjects(1)
    NewTbl.Unlist

    Set NewTbl = Nothing

End Sub

Private Sub ResizeDataList(SheetName As String, RowCount As Long)

    Dim TheSheet As Worksheet, TheList As ListObject
    Set TheSheet = Worksheets(SheetName)
    Set TheList = TheSheet.ListObjects(1)
    
    If RowCount < 10 Then RowCount = 10
    
    TheList.Resize TheList.Range.Resize(RowCount + 1, TheList.Range.Columns.count)


    Dim AfterData As Range
    Set AfterData = TheList.Range.Offset(TheList.Range.Rows.count)
    Set AfterData = AfterData.Resize(10000)
    AfterData.Clear

End Sub


Private Function ValidateFieldMapping() As Boolean

    On Error GoTo ErrHandler
    
    Dim thissheet As Worksheet
    Set thissheet = Me
    
    Application.StatusBar = "Validating Source Field Names"
    
    Dim retVal As Boolean
    retVal = True
    
    Dim FieldNameRange As Range
    Set FieldNameRange = thissheet.Range(Address_SourceData_TopLeft)

    While FieldNameRange.Text <> ""

        If Not ValidateSourceFieldName(FieldNameRange.Text) Then

            ValidateFieldMapping = False

            NotifyUserOfInvalidSourceData "Unable to map field: " & FieldNameRange.Text
            Return

        End If

        Set FieldNameRange = FieldNameRange.Offset(0, 1)

    Wend
    

    ValidateFieldMapping = retVal
    
Exit Function
    
ErrHandler:
    
    ValidateFieldMapping = False
    
End Function

Private Function ValidateSourceFieldName(SourceFieldName As String) As Boolean

    On Error GoTo ErrHandler
    
    Dim FieldMappingSheet As Worksheet
    Set FieldMappingSheet = Worksheets(SheetName_FieldMapping)
    
    SourceFieldName = Trim(SourceFieldName)
    Dim DestFieldName As String
    
    DestFieldName = WorksheetFunction.VLookup(SourceFieldName, _
                                                FieldMappingSheet.Range(ListName_FieldMapping), _
                                                1, False)
            
    ValidateSourceFieldName = True
    
Exit Function

ErrHandler:

    Debug.Print "Source Field Not Mapped: " & SourceFieldName

    ValidateSourceFieldName = False

End Function



Private Sub ClearPivotDataContents()

    On Error GoTo ErrHandler
    
    Application.StatusBar = "Clearing Pivot Data"

    
    If Me.ListObjects.count = 1 Then

        Dim PivotList As ListObject
        Set PivotList = Me.ListObjects(1)
        
        If Not PivotList Is Nothing Then
        
            PivotList.DataBodyRange.ClearContents
            
        End If
        
        Dim AfterData As Range
        Set AfterData = PivotList.Range.Offset(PivotList.Range.Rows.count)
        Set AfterData = AfterData.Resize(1000)
        
        AfterData.Clear
        
        
        
    End If
    
    
    
    
    Application.StatusBar = ""

Exit Sub
    
ErrHandler:

    Debug.Print "ClearPivotDataContents"
    Debug.Print Err.Description

End Sub


Private Sub ClearSourceDataContents()

    On Error GoTo ErrHandler
    
    Application.StatusBar = "Clearing Source Data"

    Dim DataSheet As Worksheet
    Set DataSheet = Application.Me
    
'    If DataSheet.ListObjects.count = 1 Then
'        DataSheet.ListObjects(1).Unlist
'    End If
    
    Dim DataRange As Range
    
    
    Set DataRange = DataSheet.Range(Address_SourceData_TopLeft & ":" & Address_SourceData_TopRight).Offset(1, 0)
    
    Dim ColumnCount As Long, RowCount As Long
    ColumnCount = DataRange.Columns.count
    RowCount = DataRange.End(xlDown).Row - DataRange.Row
    If RowCount > 500000 Then
        RowCount = 500000
    End If
    
    Set DataRange = DataRange.Resize(RowCount, ColumnCount)
    
    DataRange.Clear
    
    'Clear anything after the data range
    Set DataRange = DataRange.Offset(RowCount, 0).Resize(1000, ColumnCount)
    DataRange.Clear
    
    Set DataRange = DataSheet.Range(Address_SourceData_TopLeft).Offset(1, 0)
    DataRange.Value = "Paste Loss Data Here..."
    
    
    Application.StatusBar = ""
    
Exit Sub
    
ErrHandler:

    Debug.Print "ClearPivotDataContents"
    Debug.Print Err.Description

End Sub


Private Sub SetAnalysisParameters(IsAutoLoad As Boolean)


    On Error GoTo ErrHandler

    Dim CleanSheet As Worksheet, CleanList As ListObject
    Set CleanSheet = Worksheets(SheetName_CleanData)
    Set CleanList = CleanSheet.ListObjects(1)

    Dim ContentsSheet As Worksheet
    
    
    
    
    Set ContentsSheet = Worksheets(SheetName_Contents)
    
    ContentsSheet.Range(Address_Customer_Name).Value = Trim(CleanList.DataBodyRange.Resize(1, 1).Value)
    
    If Not IsAutoLoad Then
        ContentsSheet.Range(Address_As_Of_Date).Value = "'" & Format(Now, "MMMM dd, yyyy")
    End If
    
    Dim EffectiveDate As Date, ExpirationDate As Date, MinEffective As Long, MaxEffective As Long, Cell As Range
    
    Worksheets(SheetName_Dashboard).Range("A1").Value = ContentsSheet.Range(Address_Customer_Name).Value & vbCrLf & "Dashboard"
    
    MinEffective = 99999999
    MaxEffective = 0
    
    Dim EffDtCol As Variant
    Dim i As Long

    EffDtCol = CleanSheet.Range("ClaimsTbl[[#All],[CIID Policy Effective Date]]").Value

    For i = 2 To UBound(EffDtCol)
    
        Application.StatusBar = EffDtCol(i, 1)

        If MinEffective > CleanDate(EffDtCol(i, 1)) Then MinEffective = CleanDate(EffDtCol(i, 1))
        If MaxEffective < CleanDate(EffDtCol(i, 1)) Then MaxEffective = CleanDate(EffDtCol(i, 1))

    Next

    EffectiveDate = CDate(MinEffective)
    ExpirationDate = CDate(MaxEffective)
    ExpirationDate = DateAdd("yyyy", 1, ExpirationDate)
    
    ContentsSheet.Range(Address_Effective_Date).Value = "'" & Format(EffectiveDate, "MMMM dd, yyyy")
    ContentsSheet.Range(Address_Expiration_Date).Value = "'" & Format(ExpirationDate, "MMMM dd, yyyy")
   
Exit Sub
    
ErrHandler:
    Debug.Print "SetAnalysisParameters"
    Debug.Print Err.Description

End Sub

Private Sub Data_Addition_2010()

    On Error GoTo ErrHandler
    
    
    

    If ValidateData() Then


        SetAnalysisParameters IsAutoLoad:=False
                    
        Application.Cursor = xlDefault
        Set LoadDataDialog = New frmLoadData

        LoadDataDialog.Show vbModal
        
        If LoadDataDialog.DoIt Then
        
            Set LoadDataDialog = Nothing
            LoadData
            Dim TheList As ListObject
            Set TheList = Application.Worksheets(SheetName_PivotData).ListObjects(1)
            Dim NetIncurredBandRng As Range
            Set NetIncurredBandRng = TheList.ListColumns.Item("Net Incurred Band").DataBodyRange
            Dim AccidentDescriptionRng As Range
            Set AccidentDescriptionRng = TheList.ListColumns.Item("Accident Description").DataBodyRange
            Dim IncidentsCol As Variant
            IncidentsCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Incidents]]").Value
            Dim i, j As Long
            For i = 2 To UBound(IncidentsCol)
                j = j + IncidentsCol(i, 1)
            Next
        
            If WorksheetFunction.CountA(NetIncurredBandRng) = 0 Or _
               WorksheetFunction.CountA(AccidentDescriptionRng) = 0 Or _
               j = 0 Then
                ' Should be dealt with later. Obstacle in Auto RECAT
                
                MsgBox "Load failed.  Please get a fresh copy of the template and try again.  If the load keeps failing, please contact your technical support group"
                
                ActiveWorkbook.Close False
                Exit Sub
            End If
            Worksheets(SheetName_Dashboard).Range("A1").Value = Worksheets(SheetName_Contents).Range(Address_Customer_Name).Value & vbCrLf & "Dashboard"
        
            Dim pieChart As Chart
            On Error Resume Next
            ActiveWorkbook.DisplayDrawingObjects = xlDisplayShapes
            If Application.Version = "16.0" Then
                Set pieChart = Sheets("DashBoard").ChartObjects("Chart 2").Chart
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
                
                Set pieChart = Sheets("DashBoard").ChartObjects("Chart 3").Chart
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
            Else
                Set pieChart = Sheets("DashBoard").Charts("Chart 2")
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
                
                Set pieChart = Sheets("DashBoard").Charts("Chart 3")
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
            End If
            On Error GoTo ErrHandler
            
            Dim whatsIncludedTB As Object
            Set whatsIncludedTB = Sheets("What's Included").Shapes("TextBox 1")
            whatsIncludedTB.Height = 400
            'ActiveWorkbook.DisplayDrawingObjects = xlHide
            Worksheets(SheetName_Contents).Activate
        Else
            Set LoadDataDialog = Nothing
        End If
        'Application.Cursor = xlWait
        'To prevent race conditions
        
        ActiveWorkbook.ShowPivotTableFieldList = False
        MsgBox "Data Load Completed!"
    End If

Exit Sub
    
ErrHandler:
    Debug.Print "Data_Addition_2010"
    Debug.Print Err.Description

End Sub
Public Function AutoLoad_Data_Addition(fileName As String, AsOfDate As Date) As String

ActiveWorkbook.Names("AutoOrManual").RefersToRange.Value = "Auto"
ActiveWorkbook.Names("statuss").RefersToRange.ClearContents
ActiveWorkbook.Names("errorr").RefersToRange.ClearContents


'Public Function AutoLoad_Data_Addition(fileName As String, AsOfDate As Date) As String
    On Error GoTo ErrHandler
    
    
    If AutoLoadGetDataToLoad(fileName) Then
        If ValidateFieldMapping() And ValidateDataSourceShape() Then
            SetAnalysisParameters IsAutoLoad:=True
            
            Dim ContentsSheet As Worksheet
            Set ContentsSheet = Worksheets(SheetName_Contents)
            Dim reportName As String
            Dim fileNodes() As String
            fileNodes = Split(fileName, "~")
            If UBound(fileNodes) <= 2 Then
                reportName = Replace(fileNodes(1), "_", " ")
            ElseIf UBound(fileNodes) > 2 Then
                reportName = Replace(fileNodes(1), "_", " ") & " " & Replace(fileNodes(2), "_", " ")
            End If
            reportName = Replace(reportName, ".xlsx", "")
            ContentsSheet.Range(Address_Customer_Name).Value = Trim(reportName)
            ContentsSheet.Range(Address_As_Of_Date).Value = "'" & Format(AsOfDate, "MMMM dd, yyyy")
            Worksheets(SheetName_Dashboard).Range("A1").Value = ContentsSheet.Range(Address_Customer_Name).Value & vbCrLf & "Dashboard"
            
            Application.Cursor = xlDefault
            LoadData
            Dim TheList As ListObject
            Set TheList = Application.Worksheets(SheetName_PivotData).ListObjects(1)
            Dim NetIncurredBandRng As Range
            Set NetIncurredBandRng = TheList.ListColumns.Item("Net Incurred Band").DataBodyRange
            Dim AccidentDescriptionRng As Range
            Set AccidentDescriptionRng = TheList.ListColumns.Item("Accident Description").DataBodyRange
            Dim IncidentsCol As Variant
            IncidentsCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Incidents]]").Value
            Dim i, j As Long
            For i = 2 To UBound(IncidentsCol)
                j = j + IncidentsCol(i, 1)
            Next
        
            If WorksheetFunction.CountA(NetIncurredBandRng) = 0 Or _
               WorksheetFunction.CountA(AccidentDescriptionRng) = 0 Or _
               j = 0 Then
               
               'Following block of code needs to be shifted down because it doesn't helps us in giving information about the error
               '
               '
               
               ' AutoLoad_Data_Addition = False
                writetoControlPanel "Failed"
               'If (Err.Description <> "") Then
                'writeErrortoControlPanel Err.Description
                'End If
                writeErrortoControlPanel "Load failed. One possible reason of failure can be missing data. Please get a fresh copy of the template and try again.  If the load keeps failing, please contact your technical support group"
                AutoLoad_Data_Addition = "Failure"
                'ActiveWorkbook.Close False
            Exit Function
            End If
           
            Worksheets(SheetName_Dashboard).Range("A1").Value = Worksheets(SheetName_Contents).Range(Address_Customer_Name).Value & vbCrLf & "Dashboard"
        
            Dim pieChart As Chart
            On Error Resume Next
            ActiveWorkbook.DisplayDrawingObjects = xlDisplayShapes
            If Application.Version = "16.0" Then
                Set pieChart = Sheets("DashBoard").ChartObjects("Chart 2").Chart
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
                
                Set pieChart = Sheets("DashBoard").ChartObjects("Chart 3").Chart
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
            Else
                Set pieChart = Sheets("DashBoard").Charts("Chart 2")
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
                
                Set pieChart = Sheets("DashBoard").Charts("Chart 3")
                pieChart.PlotArea.Width = 220#
                pieChart.PlotArea.Height = 255#
            End If
            On Error GoTo ErrHandler
            
            Dim whatsIncludedTB As Object
            Set whatsIncludedTB = Sheets("What's Included").Shapes("TextBox 1")
            whatsIncludedTB.Height = 400
            
            Worksheets(SheetName_Contents).Activate
            'Application.Cursor = xlWait
            writetoControlPanel "Success"
            AutoLoad_Data_Addition = "Success"
            'AutoLoad_Data_Addition = True
        Else
          writetoControlPanel "Failed"
                If (Err.Description <> "") Then
                writeErrortoControlPanel Err.Description
                End If
                AutoLoad_Data_Addition = "Failure"
            'AutoLoad_Data_Addition = False
              End If
    Else
        'AutoLoad_Data_Addition = False
        writetoControlPanel "Failed"
               If (Err.Description <> "") Then
                writeErrortoControlPanel Err.Description
                End If
                AutoLoad_Data_Addition = "Failure"
 End If
Exit Function
    
ErrHandler:
    Debug.Print "AutoLoad_Data_Addition"
    Debug.Print Err.Description
    writeErrortoControlPanel Err.Description
    AutoLoad_Data_Addition = Err.Description
    'AutoLoad_Data_Addition = False

End Function
Private Sub LoadData()

    On Error Resume Next
    
    Dim Tbl As ListObject
    
    ApplyColumnFormulas
    DefineCalculatedColumns
    Dim HasWorkersCompRng, HasAutoRng As Range
    Set HasWorkersCompRng = _
        Worksheets(SheetName_Contents).Range("HasWorkersComp")
    Set HasAutoRng = _
        Worksheets(SheetName_Contents).Range("HasAuto")
        
    If HasAutoRng.Value = "N" Then
        Range("ClaimsTbl[[#Data],[Driver_ID]]").Value = ""
    End If
    
    ActiveWorkbook.RefreshAll
    Dim thissheet As Worksheet
    
    PrepTemplates False

    CreateAnalysisSheets
    CreateUserDefinedWorksheets
    Application.DisplayAlerts = False
    Dim testValue As String
    Debug.Print "Delete un-needed worksheets"
    For Each thissheet In Worksheets

        If thissheet.name = SheetName_SourceData Then
            'thissheet.Shapes("btnDataAddition").Delete
            thissheet.Shapes("CBAddData").Delete
            thissheet.Range("A1").Value = "Pivot Data"
            thissheet.Range("A1").ColumnWidth = 50
        ElseIf thissheet.name = SheetName_ControlPanel Then
            testValue = thissheet.Cells(100, 1).Value
            thissheet.Delete
        ElseIf Right(thissheet.name, 6) = " Data}" Then
            thissheet.Delete
        ElseIf Right(thissheet.name, 9) = "Template}" Then
            thissheet.Delete
        ElseIf Left(thissheet.name, 1) = "{" Then
            thissheet.Delete
        End If

    Next
    
    Set Tbl = thissheet.ListObjects("Agent")
    Tbl.Unlist
    Names("Agent").Delete
    Set Tbl = thissheet.ListObjects("BodyPart")
    Tbl.Unlist
    Names("BodyPart").Delete
    Set Tbl = thissheet.ListObjects("DayofWeek")
    Tbl.Unlist
    Names("DayofWeek").Delete
    Set Tbl = thissheet.ListObjects("Description")
    Tbl.Unlist
    Names("Description").Delete
    Set Tbl = thissheet.ListObjects("LagBands")
    Tbl.Unlist
    Names("LagBands").Delete
    Set Tbl = thissheet.ListObjects("Location")
    Tbl.Unlist
    Names("Location").Delete
    Set Tbl = thissheet.ListObjects("LostWork")
    Tbl.Unlist
    Names("LostWork").Delete
    Set Tbl = thissheet.ListObjects("MonthName")
    Tbl.Unlist
    Names("MonthName").Delete
    Set Tbl = thissheet.ListObjects("OpenDays")
    Tbl.Unlist
    Names("OpenDays").Delete
    Set Tbl = thissheet.ListObjects("Tenure")
    Tbl.Unlist
    Names("Tenure").Delete
    Set Tbl = thissheet.ListObjects("Weekday")
    Tbl.Unlist
    Names("Weekday").Delete
    Err.Clear

    
    Dim loColumn As ListColumn

    Dim DataSheet As Worksheet
    Set DataSheet = Application.Worksheets(SheetName_PivotData)
    
    Dim SourceDataList As ListObject
    Set SourceDataList = DataSheet.ListObjects("ClaimsTbl")

    For Each loColumn In SourceDataList.ListColumns
        If loColumn.name Like "Field*Name" Then
            loColumn.Delete
        End If
        If loColumn.name Like "Field*Value" Then
            loColumn.Delete
        End If
        If loColumn.name = "Release to Work Date" Then
            loColumn.Delete
        End If
        If loColumn.name = "Return To Work Indicator" Then
            loColumn.Delete
        End If
        If loColumn.name = "Return To Work Qualifier Code" Then
            loColumn.Delete
        End If
        If loColumn.name = "Claimant Last Work Date" Then
            loColumn.Delete
        End If
        If loColumn.name = "WC Return to Work Indicator" Then
            loColumn.Delete
        End If
        If loColumn.name = "WC Return to Work Qualifier" Then
            loColumn.Delete
        End If
        If loColumn.name = "Claimant Return To Work Date" Then
            loColumn.Delete
        End If
        If loColumn.name = "Release Version" Then
            loColumn.Delete
        End If
        If loColumn.name = "Accident Narrative" Then
            loColumn.Range.ColumnWidth = 50
        Else
            loColumn.Range.ColumnWidth = 20
        End If
    Next loColumn
    
    Debug.Print "call RefreshAllPivotTables"
    RefreshAllPivotTables
    ActiveWorkbook.RefreshAll
    
    Call SortForData2Sheet
    
    Application.DisplayAlerts = True
    Err.Clear
    
    Debug.Print Format(Now, "hh:mm:ss") & vbTab & "try to format standard pivot tables"
    PrepTemplates True
    Debug.Print Format(Now, "hh:mm:ss") & vbTab & "update dashboard"

    Call clear_slicers
    Call ChangePivotCache
    Call AddSlicers
    Call clear_test(testValue)

    On Error GoTo 0
End Sub

Private Sub PrepTemplates(boolSort As Boolean)
    Dim thisPivot As PivotTable
    Dim thisSheetsPivotTbls As PivotTables
    Dim thissheet As Worksheet
    
    Debug.Print "try to format standard pivot tables"
    For Each thissheet In Worksheets

        Debug.Print thissheet.name
        Set thisSheetsPivotTbls = thissheet.PivotTables
        If thisSheetsPivotTbls.count = 0 Then
        Else
            Set thisPivot = thisSheetsPivotTbls(1)
            Debug.Print thisPivot.name
            If thisPivot.name = "pt_Standard" Then
                Dim ptRng As Range
                
                Dim tmpRange As Range
                Set tmpRange = thisPivot.PivotTables(1).RowRange
                tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24
                'thissheet.Cells(thisPivot.PivotTables(1).RowRange.Row - 1).RowHeight = 24

                With thissheet.Range("A29:L29").Borders(xlEdgeTop)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                With thissheet.Range("A29:L29").Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                
                Set ptRng = thisPivot.RowRange
                With thissheet.Range("A29:L29").Borders(xlEdgeRight)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                
                Dim pvtFld As PivotField
                For Each pvtFld In thisPivot.PivotFields
                    If pvtFld.name = "{% Open}" _
                    Or pvtFld.name = "{$ Avg Claim}" _
                    Or pvtFld.name = "{$BI/ $PD}" Then
                        Set ptRng = pvtFld.DataRange
                        With ptRng.Borders(xlEdgeRight)
                            .LineStyle = xlContinuous
                            .ColorIndex = 0
                            .TintAndShade = 0
                            .Weight = xlMedium
                        End With
                    ElseIf pvtFld.name Like "{*}" Then
                        Set ptRng = pvtFld.DataRange
                        With ptRng.Borders(xlEdgeRight)
                            .LineStyle = xlContinuous
                            .ColorIndex = 0
                            .TintAndShade = 0
                            .Weight = xlThin
                        End With
                    End If
                Next
                
        
                thissheet.Range("A30:L30").Interior.Color = RGB(83, 141, 213)
                Set ptRng = thisPivot.DataBodyRange
                ptRng.Interior.ColorIndex = xlNone
            End If
        End If

    Next
End Sub
Public Sub SortForData2Sheet()

    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets(SheetName_CleanData)
    Set TheList = TheSheet.ListObjects(1)

    TheList.Sort.SortFields.Clear
    
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Coverage]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Date Of Loss]]"), xlSortOnValues, xlAscending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With

End Sub

Private Sub ApplyColumnFormulas()

    On Error GoTo ErrHandler
    
    'Application.Calculation = xlCalculationManual
    Dim currScrnUpdVal As Variant
    Dim currDispAlrtVal As Variant
    Dim currEnableEventsVal As Variant
    currScrnUpdVal = Application.ScreenUpdating
    currDispAlrtVal = Application.DisplayAlerts
    currEnableEventsVal = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    
    
    Dim SourceDataList As ListObject
    Set SourceDataList = Application.Worksheets(SheetName_PivotData).ListObjects("ClaimsTbl")
    
    Dim FieldMappingSheet As Worksheet
    Set FieldMappingSheet = Worksheets(SheetName_FieldMapping)
    
    Dim SourceColumn, NewColumn As ListColumn
    Dim i As Integer
    Dim TempCol As Variant
    Dim SrcColRng As Range
    Dim ProgressIncrementPerColumn As Single
    Dim TotalProgressSoFar As Single
    
    Set NewColumn = SourceDataList.ListColumns.Add()
    Dim NewColRng As Range
    Set NewColRng = NewColumn.DataBodyRange
    
    For Each SourceColumn In SourceDataList.ListColumns

        If SourceColumn.name = NewColumn.name Then
            Exit For
        End If
        Application.StatusBar = "Processing column: " & SourceColumn.name
        Dim SourceFunction As String
        SourceFunction = WorksheetFunction.VLookup(SourceColumn.name, _
                                                    FieldMappingSheet.Range(ListName_FieldMapping), 3, False)
        If Left(SourceFunction, 1) = "'" Then
            SourceFunction = Mid(SourceFunction, 2)
        End If

        If SourceFunction <> "" Then
            If SourceFunction Like "=CleanDate*" Then
                
                NewColumn.DataBodyRange = SourceFunction
                TempCol = NewColumn.DataBodyRange.Value
                
                NewColumn.DataBodyRange.Clear
                SourceColumn.DataBodyRange.Value = TempCol
                Set SrcColRng = SourceColumn.DataBodyRange
                
            ElseIf SourceFunction Like "=CleanMoney*" Then
                NewColRng.NumberFormat = "0.00"
                Set SrcColRng = SourceColumn.DataBodyRange
                SrcColRng.NumberFormat = "0.00"
                
                NewColumn.DataBodyRange = SourceFunction
                TempCol = NewColumn.DataBodyRange.Value
                
                NewColumn.DataBodyRange.Clear
                SourceColumn.DataBodyRange.Value = TempCol
            ElseIf SourceFunction Like "=DATE*" Then
                NewColRng.NumberFormat = "mmmm-yy"
                
                NewColumn.DataBodyRange = SourceFunction
                TempCol = NewColumn.DataBodyRange.Value
                
                NewColumn.DataBodyRange.Clear
                SourceColumn.DataBodyRange.Value = TempCol
                Set SrcColRng = SourceColumn.DataBodyRange
                SrcColRng.NumberFormat = "mmmm-yy"
            ElseIf Len(SourceFunction) = 0 Then
            Else
                NewColumn.DataBodyRange.NumberFormat = "General"
                NewColumn.DataBodyRange = SourceFunction
                TempCol = NewColumn.DataBodyRange.Value
                NewColumn.DataBodyRange.Clear
                SourceColumn.DataBodyRange.Value = TempCol
                SourceColumn.DataBodyRange.NumberFormat = "General"
            End If
            If SourceFunction Like "=Clean*" _
            Or SourceFunction Like "=""'"" & Clean*" Then
            Else
                SourceColumn.Range.Interior.Color = RGB(255, 255, 153)
            End If
        Else
            SourceColumn.DataBodyRange.NumberFormat = "0"
            SourceColumn.Range.Interior.Color = RGB(255, 255, 153)
        End If

    Next
    
    For Each SourceColumn In SourceDataList.ListColumns

        If SourceColumn.name = NewColumn.name Then
            Exit For
        End If
        Application.StatusBar = "Processing column: " & SourceColumn.name
        SourceFunction = WorksheetFunction.VLookup(SourceColumn.name, _
                                                    FieldMappingSheet.Range(ListName_FieldMapping), 3, False)
        If Left(SourceFunction, 1) = "'" Then
            SourceFunction = Mid(SourceFunction, 2)
        End If

        If SourceFunction <> "" Then
            If SourceFunction Like "=CleanDate*" Then
                'SourceColumn.DataBodyRange.NumberFormat = "@"
                Select Case Application.International(xlDateOrder)
                  Case 0      'month-day-year
                        SourceColumn.DataBodyRange.NumberFormat = "MM/dd/yyyy"
                  Case 1      'day-month-year
                        SourceColumn.DataBodyRange.NumberFormat = "dd/MM/yyyy"
                  Case 2      'year-month-day
                        SourceColumn.DataBodyRange.NumberFormat = "yyyy/MM/dd"
                End Select
            ElseIf SourceFunction Like "=CleanMoney*" Then
                SourceColumn.DataBodyRange.NumberFormat = "0.00"
            ElseIf SourceFunction Like "=DATE*" Then
                SourceColumn.DataBodyRange.NumberFormat = "mmmm-yy"
            ElseIf Len(SourceFunction) = 0 Then
            Else
                SourceColumn.DataBodyRange.NumberFormat = "@"
            End If
        Else
            SourceColumn.DataBodyRange.NumberFormat = "0"
        End If

    Next
    NewColumn.Delete
    Application.StatusBar = ""
    'Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal

Exit Sub
    
ErrHandler:
    Debug.Print "ApplyColumnFormulas"
    Debug.Print Err.Description

    'Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal
End Sub


Private Sub DefineCalculatedColumn(TheList As ListObject, _
                                    fieldName As String, _
                                    Formula As String, _
                                    NumberFormat As String)

    On Error GoTo ErrHandler
    

    Application.StatusBar = "Updating Calculated Columns: " & fieldName

    'Dim HeaderRange As Range, DataRange As Range, AllRange As Range
    Dim DataRange As Range, AllRange As Range
    
    Set DataRange = TheList.ListColumns(fieldName).DataBodyRange
    Set AllRange = TheList.ListColumns(fieldName).Range
   
   
   
   
    With DataRange
        .NumberFormat = NumberFormat
        .FormulaR1C1 = Formula
    End With
    

    Dim i As Interior
    Set i = AllRange.Interior

    With i
        .Color = Color_CalculatedColumn
    End With
    
Exit Sub
    
ErrHandler:

    Debug.Print "DefineCalculatedColumn: " & fieldName
    Debug.Print Err.Description


End Sub

Private Sub DefineClaimantCountingColumns()

    On Error GoTo ErrHandler
    Application.Calculation = xlCalculationManual
   
    Application.StatusBar = "Updating Claimant Counting Columns"

    Dim TheList As ListObject
    Set TheList = Application.Worksheets(SheetName_PivotData).ListObjects(1)


    DefineCalculatedColumn TheList, "Claimants", "0", "0"
  
    SortForClaimantCounting
    
    Dim PreviousClaimantID As String, PreviousIncidentKey As String
    
    Dim ClaimantsCol As Variant
    Dim ClaimantIDCol As Variant
    Dim IncidentKeyCol As Variant
    Dim i As Long

    ClaimantsCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claimants]]").Value
    ClaimantIDCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claimant_ID]]").Value
    IncidentKeyCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Incident Key]]").Value
    
    For i = 2 To UBound(ClaimantIDCol)
        Application.StatusBar = ClaimantIDCol(i, 1)
        
        If (PreviousClaimantID <> ClaimantIDCol(i, 1)) Or _
            (PreviousIncidentKey <> IncidentKeyCol(i, 1)) Then
            ClaimantsCol(i, 1) = 1
        End If
   
        PreviousIncidentKey = IncidentKeyCol(i, 1)
        PreviousClaimantID = ClaimantIDCol(i, 1)
    Next

    Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claimants]]").Value = ClaimantsCol
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""

Exit Sub
    
    
ErrHandler:

    Debug.Print "DefineIncidentCountingColumns"
    Debug.Print Err.Description
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""


End Sub



Private Sub DefineClaimCountingColumns()

    On Error GoTo ErrHandler
    Application.Calculation = xlCalculationManual
    
    Application.StatusBar = "Updating Claim Counting Columns"

    Dim TheList As ListObject
    Set TheList = Application.Worksheets(SheetName_PivotData).ListObjects(1)

    Dim HasWorkersCompRng, HasAutoRng As Range
    Set HasWorkersCompRng = _
        Worksheets(SheetName_Contents).Range("HasWorkersComp")
    Set HasAutoRng = _
        Worksheets(SheetName_Contents).Range("HasAuto")
    HasWorkersCompRng.Value = "N"
    HasAutoRng.Value = "N"

    DefineCalculatedColumn TheList, "Claims", "0", "0"
  
  
    SortForClaimCounting
  
    'Dim PreviousCoverage As String, PreviousClaimNumber As String, ClaimStatus As String
    Dim PreviousClaimNumber As String
    
    Dim ClaimsCol As Variant
    Dim ClaimsOpenCol As Variant
    Dim ClaimsClosedCol As Variant
    Dim ClaimsStatusCol As Variant
    Dim CoverageCol As Variant
    Dim ClaimNumberCol As Variant
    Dim i As Long

    ClaimsCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claims]]").Value
    ClaimsOpenCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claims Open]]").Value
    ClaimsClosedCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claims Closed]]").Value
    ClaimsStatusCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claim Status]]").Value
    CoverageCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Coverage]]").Value
    ClaimNumberCol = Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claim Number]]").Value

    For i = 2 To UBound(ClaimNumberCol)
        Application.StatusBar = ClaimNumberCol(i, 1)

        If PreviousClaimNumber <> ClaimNumberCol(i, 1) Then
            ClaimsCol(i, 1) = 1

            '''MJB''' Fixed to handle "Open" versus "Opened" versus "O"
            If UCase(Left(ClaimsStatusCol(i, 1), 4)) = "OPEN" Then
                ClaimsOpenCol(i, 1) = 1
                ClaimsClosedCol(i, 1) = 0
            Else
                ClaimsClosedCol(i, 1) = 1
                ClaimsOpenCol(i, 1) = 0
            End If
        Else
            ClaimsCol(i, 1) = 0
            ClaimsOpenCol(i, 1) = 0
            ClaimsClosedCol(i, 1) = 0
        End If

        If UCase(CoverageCol(i, 1)) = "WORKERS COMPENSATION" Then
            HasWorkersCompRng.Value = "Y"
        End If
        If UCase(CoverageCol(i, 1)) = "AUTOMOBILE" Then
            HasAutoRng.Value = "Y"
        End If

        'PreviousCoverage = CoverageCol(i, 1)
        PreviousClaimNumber = ClaimNumberCol(i, 1)
    Next

    Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claims]]").Value = ClaimsCol
    Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claims Open]]").Value = ClaimsOpenCol
    Application.Worksheets(SheetName_PivotData).Range("ClaimsTbl[[#All],[Claims Closed]]").Value = ClaimsClosedCol
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""

Exit Sub
    
    
ErrHandler:

    Debug.Print "DefineClaimCountingColumns"
    Debug.Print Err.Description
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""


End Sub

Private Sub DefineIncidentCountingColumns()

    On Error GoTo ErrHandler
    Application.StatusBar = "Updating Claim Counting Columns"
    
    '#Turns off auto calc for performance - need to turn it back on later
     Application.Calculation = xlCalculationManual

    Dim TheSheet As Worksheet
    Set TheSheet = Application.Worksheets(SheetName_PivotData)
    Dim TheList As ListObject
    Set TheList = TheSheet.ListObjects(1)

    '#Clearing out incident counting columns and setting the format
    DefineCalculatedColumn TheList, "Incidents", "0", "0"
    DefineCalculatedColumn TheList, "Incident Key", "I0", "General"
  
  
    DefineIncidentCountingColumns_Auto
    DefineIncidentCountingColumns_NonAuto


    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""

Exit Sub
    
    
ErrHandler:

    Debug.Print "DefineIncidentCountingColumns"
    Debug.Print Err.Description
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""


End Sub

Private Sub DefineIncidentCountingColumns_Auto()

    On Error GoTo ErrHandler
    Application.StatusBar = "Updating Claim Counting Columns"
    
    '#Turns off auto calc for performance - need to turn it back on later
     Application.Calculation = xlCalculationManual

    Dim TheSheet As Worksheet
    Set TheSheet = Application.Worksheets(SheetName_PivotData)
    Dim TheList As ListObject
    Set TheList = TheSheet.ListObjects(1)

     
    SortForIncidentCounting_Auto
 
    
    Dim PreviousCoverage As String, PreviousDateOfLoss As Long, PreviousClaimNumber As String
    Dim PreviousDriverID As String, PreviousAccidentNarrative As String, PreviousLossLocationState As String
    Dim LargestTotalNetIncurredForIncident As Long
    Dim LargestTotalNetIncurredForIncidentIdx As Long
    Dim CurrentDateOfLoss As Date
    Dim IncidentKey As Long
    
    Dim IsNewIncident As Boolean
    
    
    Dim IncidentCol As Variant
    Dim DateOfLossCol As Variant
    Dim DriverIDCol As Variant
    Dim AccidentNarrativeCol As Variant
    Dim LossLocationStateCol As Variant
    Dim IncidentKeyCol As Variant
    Dim CoverageCol As Variant
    Dim ClaimNumberCol As Variant
    Dim TotalNetIncurredCol As Variant
    Dim i As Long
    
    'Pull the data from the spreadsheet into arrays to make it go faster.
    'Previous code did not do this and made it go very slow.

    IncidentCol = TheSheet.Range("ClaimsTbl[[#All],[Incidents]]").Value
    DateOfLossCol = TheSheet.Range("ClaimsTbl[[#All],[Date Of Loss]]").Value
    DriverIDCol = TheSheet.Range("ClaimsTbl[[#All],[Driver_ID]]").Value
    AccidentNarrativeCol = TheSheet.Range("ClaimsTbl[[#All],[Accident Narrative]]").Value
    LossLocationStateCol = TheSheet.Range("ClaimsTbl[[#All],[Loss Location State]]").Value
    IncidentKeyCol = TheSheet.Range("ClaimsTbl[[#All],[Incident Key]]").Value
    CoverageCol = TheSheet.Range("ClaimsTbl[[#All],[Coverage]]").Value
    ClaimNumberCol = TheSheet.Range("ClaimsTbl[[#All],[Claim Number]]").Value
    TotalNetIncurredCol = TheSheet.Range("ClaimsTbl[[#All],[Net Incurred Total]]").Value

'Starting at row 2 because first row is always the heading
    LargestTotalNetIncurredForIncidentIdx = 0
    For i = 2 To UBound(ClaimNumberCol)
        Application.StatusBar = ClaimNumberCol(i, 1)
        
    
            If UCase(CoverageCol(i, 1)) = "AUTOMOBILE" Then
                '#assume we have a new incident and change if needed
                IsNewIncident = True
                
                '#determines if we really don't have a new incident
                If DateOfLossCol(i, 1) = PreviousDateOfLoss Then
                    If PreviousClaimNumber <> ClaimNumberCol(i, 1) _
                    And Left(PreviousClaimNumber, 1) = Left(ClaimNumberCol(i, 1), 1) Then
                    Else
                        '#we have the same date of loss
                        If DriverIDCol(i, 1) = PreviousDriverID _
                        And AccidentNarrativeCol(i, 1) = PreviousAccidentNarrative Then
                            IsNewIncident = False
                        ElseIf DriverIDCol(i, 1) = PreviousDriverID _
                        And LossLocationStateCol(i, 1) = PreviousLossLocationState Then
                            IsNewIncident = False
                        ElseIf AccidentNarrativeCol(i, 1) = PreviousAccidentNarrative _
                        And LossLocationStateCol(i, 1) = PreviousLossLocationState Then
                            IsNewIncident = False
                        End If
                    End If
                    
                ElseIf DateOfLossCol(i, 1) - PreviousDateOfLoss <= 2 Then
                '#we don't have the same date of loss but it is within 2 days
                    If PreviousClaimNumber <> ClaimNumberCol(i, 1) _
                    And Left(PreviousClaimNumber, 1) = Left(ClaimNumberCol(i, 1), 1) Then
                    Else
                        If DriverIDCol(i, 1) = PreviousDriverID _
                        And AccidentNarrativeCol(i, 1) = PreviousAccidentNarrative _
                        And LossLocationStateCol(i, 1) = PreviousLossLocationState Then
                             IsNewIncident = False
                        End If
                    End If
                End If
        

    
                If IsNewIncident Then
                    If LargestTotalNetIncurredForIncidentIdx > 0 Then
                        IncidentCol(LargestTotalNetIncurredForIncidentIdx, 1) = 1
                    End If
                    IncidentKey = IncidentKey + 1
                    LargestTotalNetIncurredForIncident = TotalNetIncurredCol(i, 1)
                    LargestTotalNetIncurredForIncidentIdx = i
                Else
                    IncidentCol(i, 1) = 0
                    IncidentKey = IncidentKey
                    If LargestTotalNetIncurredForIncident < TotalNetIncurredCol(i, 1) Then
                        LargestTotalNetIncurredForIncident = TotalNetIncurredCol(i, 1)
                        LargestTotalNetIncurredForIncidentIdx = i
                    End If
                End If
            
        
                IncidentKeyCol(i, 1) = Format(IncidentKey, "A000000#")
        
        End If
        
    'Prepare for next row by setting previous values to the current values
    
        PreviousCoverage = CoverageCol(i, 1)
        PreviousDateOfLoss = DateOfLossCol(i, 1)
        PreviousClaimNumber = ClaimNumberCol(i, 1)
        PreviousDriverID = DriverIDCol(i, 1)
        PreviousAccidentNarrative = AccidentNarrativeCol(i, 1)
        PreviousLossLocationState = LossLocationStateCol(i, 1)
    Next
   
    If LargestTotalNetIncurredForIncidentIdx > 0 Then
        IncidentCol(LargestTotalNetIncurredForIncidentIdx, 1) = 1
    End If
    '#put the data back into the spreadsheet
    TheSheet.Range("ClaimsTbl[[#All],[Incidents]]").Value = IncidentCol
    TheSheet.Range("ClaimsTbl[[#All],[Incident Key]]").Value = IncidentKeyCol


    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""

Exit Sub
    
    
ErrHandler:

    Debug.Print "DefineIncidentCountingColumns"
    Debug.Print Err.Description
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""


End Sub

Private Sub DefineIncidentCountingColumns_NonAuto()

    On Error GoTo ErrHandler
    Application.StatusBar = "Updating Claim Counting Columns"
    
    '#Turns off auto calc for performance - need to turn it back on later
     Application.Calculation = xlCalculationManual

    Dim TheSheet As Worksheet
    Set TheSheet = Application.Worksheets(SheetName_PivotData)
    Dim TheList As ListObject
    Set TheList = TheSheet.ListObjects(1)

      
    SortForIncidentCounting_NonAuto
 

    Dim PreviousCoverage As String, PreviousDateOfLoss As Date, PreviousClaimNumber As String
    Dim IncidentKey As Long
    
    Dim IsNewIncident As Boolean
    
    
    Dim IncidentCol As Variant
    Dim DateOfLossCol As Variant
    Dim IncidentKeyCol As Variant
    Dim CoverageCol As Variant
    Dim ClaimNumberCol As Variant
    Dim i As Long

    IncidentCol = TheSheet.Range("ClaimsTbl[[#All],[Incidents]]").Value
    DateOfLossCol = TheSheet.Range("ClaimsTbl[[#All],[Date Of Loss]]").Value
    IncidentKeyCol = TheSheet.Range("ClaimsTbl[[#All],[Incident Key]]").Value
    CoverageCol = TheSheet.Range("ClaimsTbl[[#All],[Coverage]]").Value
    ClaimNumberCol = TheSheet.Range("ClaimsTbl[[#All],[Claim Number]]").Value

'Starting at row 2 because first row is always the heading

    For i = 2 To UBound(ClaimNumberCol)
        Application.StatusBar = ClaimNumberCol(i, 1)
        
            If UCase(CoverageCol(i, 1)) <> "AUTOMOBILE" Then
                '#we do not have automobile
                If PreviousCoverage = CoverageCol(i, 1) _
                And PreviousDateOfLoss = DateOfLossCol(i, 1) Then
                    If PreviousClaimNumber <> ClaimNumberCol(i, 1) Then
                        IsNewIncident = True
                    Else
                        IsNewIncident = False
                    End If
                Else
                    IsNewIncident = True
                End If
                
         
        
    
                If IsNewIncident Then
                    IncidentCol(i, 1) = 1
                    IncidentKey = IncidentKey + 1
                Else
                    IncidentCol(i, 1) = 0
                    IncidentKey = IncidentKey
                End If
                    
                
                IncidentKeyCol(i, 1) = Format(IncidentKey, "I000000#")
        End If
        
    'Prepare for next row by setting previous values to the current values
    
        PreviousCoverage = CoverageCol(i, 1)
        PreviousDateOfLoss = DateOfLossCol(i, 1)
        PreviousClaimNumber = ClaimNumberCol(i, 1)
    Next
   
    '#put the data back into the spreadsheet
    TheSheet.Range("ClaimsTbl[[#All],[Incidents]]").Value = IncidentCol
    TheSheet.Range("ClaimsTbl[[#All],[Incident Key]]").Value = IncidentKeyCol


    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""

Exit Sub
    
    
ErrHandler:

    Debug.Print "DefineIncidentCountingColumns"
    Debug.Print Err.Description
    
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = ""


End Sub

Private Sub DefineCalculatedColumns()


    Application.StatusBar = "Updating Calculated Columns"

    Dim TheList As ListObject
    Set TheList = Application.Worksheets(SheetName_PivotData).ListObjects(1)


    On Error Resume Next

    DefineClaimCountingColumns
    
    DefineIncidentCountingColumns
    
    DefineClaimantCountingColumns
    
    Application.Worksheets(SheetName_PivotData).Columns.AutoFit
    
    With TheList.HeaderRowRange.Font
        .Bold = True
        .Size = 10
    End With
    
    
    Application.StatusBar = ""


End Sub

Private Sub CreateUserDefinedWorksheets()

On Error GoTo CopyErr

Application.Calculation = xlCalculationManual
Dim currScrnUpdVal As Variant
Dim currDispAlrtVal As Variant
Dim currEnableEventsVal As Variant
currScrnUpdVal = Application.ScreenUpdating
currDispAlrtVal = Application.DisplayAlerts
currEnableEventsVal = Application.EnableEvents
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Application.EnableEvents = False

Dim DataSheet As Worksheet
Set DataSheet = Application.Worksheets(SheetName_PivotData)

Dim SourceDataList As ListObject
Set SourceDataList = DataSheet.ListObjects("ClaimsTbl")

Dim outRange As Range
Dim StartRow As Integer
Dim LastColumn As Integer
Dim AnalysisItems() As String
Dim HideChartInds() As String
Dim InitialSort() As String
'Dim UsrDefFldsNms As New Collection
Dim UsrDefFldsNmsVals As New Collection
'Dim ColNm As String
Dim i, j As Integer

StartRow = SourceDataList.Range.Cells(1, 1).Row
LastColumn = SourceDataList.ListColumns.count
Set outRange = DataSheet.Cells(StartRow, LastColumn + 5)
'ColNm = "Field 1 Name"

Dim loColumn As ListColumn
Dim NbrNonBlankValues As Integer
Dim UDFNmFound As Boolean
For Each loColumn In SourceDataList.ListColumns
    If loColumn.name Like "Field*Name" Then
        outRange.Value = loColumn.name
        loColumn.Range.AdvancedFilter Action:=xlFilterCopy, CopyToRange:=outRange, Unique:=True
        'outRange.Sort Order1:=xlDescending
        Set outRange = outRange.Resize(Application.Worksheets(SheetName_PivotData).Rows.count - 1)
        NbrNonBlankValues = WorksheetFunction.CountA(outRange)
        Set outRange = outRange.Resize(NbrNonBlankValues + 5)
        With DataSheet.Sort
            'clear current sort options
            .SortFields.Clear
            'set the new sort option - this is just a simple A-Z sort
            .SortFields.Add _
                Key:=outRange, _
                SortOn:=xlSortOnValues, _
                Order:=xlDescending, _
                DataOption:=xlSortNormal
            'do the actual sort
            .SetRange outRange
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlSortColumns
            .SortMethod = xlPinYin
            .Apply
            'clear current sort options
            .SortFields.Clear
        End With
        
        Dim nbrUniqueValsProcessed, nbrUniqueVals As Integer
        
        nbrUniqueValsProcessed = 0
        
        For i = 2 To NbrNonBlankValues
            If outRange(i, 1).Value = "" Then
            
                If nbrUniqueValsProcessed >= NbrNonBlankValues - 1 Then Exit For
            Else
                UDFNmFound = False
                For j = 1 To UsrDefFldsNmsVals.count
                    If Trim(Replace(outRange.Cells(i, 1).Value, vbCrLf, "")) = _
                        UsrDefFldsNmsVals.Item(j) Then
                        UDFNmFound = True
                        Exit For
                    End If
                Next
                
                If UDFNmFound = False Then
                    'UsrDefFldsNms.Add loColumn.name
                    UsrDefFldsNmsVals.Add Trim(Replace(outRange.Cells(i, 1).Value, vbCrLf, ""))
                End If
                nbrUniqueValsProcessed = nbrUniqueValsProcessed + 1
            
            End If

        Next i
        
        outRange.Clear
    End If
Next loColumn

If UsrDefFldsNmsVals.count <= 0 Then Exit Sub

ReDim AnalysisItems(0 To UsrDefFldsNmsVals.count - 1)
ReDim HideChartInds(0 To UsrDefFldsNmsVals.count - 1)
ReDim InitialSort(0 To UsrDefFldsNmsVals.count - 1)

For i = 0 To UBound(AnalysisItems)
    AnalysisItems(i) = UsrDefFldsNmsVals.Item(i + 1)
    HideChartInds(i) = "No"
    InitialSort(i) = "4"
    AddNewUsrDefFld UsrDefFldsNmsVals.Item(i + 1)
Next i

Dim NewSheet As Worksheet
Dim NewSheetName As String
NewSheetName = "Customer Defined Fields"
Application.StatusBar = "Creating Sheet " & NewSheetName

Set NewSheet = DuplicateTemplate("{DefaultTemplate}", _
                                    AnalysisItems, _
                                    RGB(168, 159, 150), _
                                    HideChartInds, _
                                    InitialSort, _
                                    SheetName_How, _
                                    True)

Dim pt As PivotTable
Set pt = NewSheet.PivotTables(1)
Application.StatusBar = "Refreshing Pivot Tables on " & NewSheet.name

pt.SourceData = ListName_PivotData
pt.RefreshTable
pt.PivotCache.MissingItemsLimit = xlMissingItemsNone

ActiveWorkbook.ShowPivotTableFieldList = False
ActiveWindow.SplitColumn = 0

SetAnalysisItem NewSheet, pt, AnalysisItems(0)

InitializeNewSheet "{DefaultTemplate}", NewSheet, NewSheetName, pt, 4

Set NewSheet = Nothing
Set pt = Nothing

Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = currScrnUpdVal
Application.DisplayAlerts = currDispAlrtVal
Application.EnableEvents = currEnableEventsVal

Exit Sub
CopyErr:
Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = currScrnUpdVal
Application.DisplayAlerts = currDispAlrtVal
Application.EnableEvents = currEnableEventsVal
'MsgBox Err.Description
End Sub
Private Sub AddNewUsrDefFld(NewUsrDefFldName As String)

    Dim loClaimsTbl As ListObject
    Set loClaimsTbl = Application.Worksheets(SheetName_PivotData).ListObjects(ListName_PivotData)
    Dim locClaimsTblCols As ListColumns
    Set locClaimsTblCols = loClaimsTbl.ListColumns
    
    Dim SourceColumn, SourceDataColumn, NewColumn As ListColumn
    Dim i As Integer
    Dim TempCol As Variant
    
    Set NewColumn = locClaimsTblCols.Add()
    Dim colNbr As Integer

    NewColumn.name = NewUsrDefFldName
    NewColumn.DataBodyRange.Interior.Color = Color_CalculatedColumn
    
    Set SourceColumn = locClaimsTblCols(ListObjCol_FirstUserDefFld)
    colNbr = SourceColumn.Index
    
    For i = colNbr To colNbr + 20 Step 2
        If Application.WorksheetFunction.CountIf(locClaimsTblCols(i).DataBodyRange, _
                                                    NewUsrDefFldName) > 0 Then
            On Error Resume Next
            With loClaimsTbl.Sort
                'clear current sort options
                .SortFields.Clear
                'set the new sort option - this is just a simple A-Z sort
                .SortFields.Add _
                    locClaimsTblCols(i).DataBodyRange, _
                    SortOn:=xlSortOnValues, _
                    Order:=xlAscending, _
                    DataOption:=xlSortNormal
                'do the actual sort
                '.Header = xlNo
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                '.SortMethod = xlStroke
                .Apply
                'clear current sort options
                .SortFields.Clear
            End With
            With loClaimsTbl
                .Range.AutoFilter Field:=i
                .Range.AutoFilter Field:=i, Criteria1:=NewUsrDefFldName
                Set SourceDataColumn = locClaimsTblCols(i + 1)
                If Err.Number = 0 Then
                    SourceDataColumn.DataBodyRange.SpecialCells(xlCellTypeVisible).Copy
                    NewColumn.DataBodyRange.SpecialCells(xlCellTypeVisible).PasteSpecial xlPasteValues
                    Application.CutCopyMode = False
                End If
                .Range.AutoFilter Field:=i
                ActiveSheet.ShowAllData
                Err.Clear
                On Error GoTo 0
            End With
            'SortForClaimantCounting
        End If
    Next i
End Sub



Public Sub btnDataAddition_Click()

    On Error GoTo ExitSub
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.Cursor = xlWait
    
    If GetDataToLoad Then Data_Addition_2010

ExitSub:

    Application.StatusBar = ""
    Application.Cursor = xlDefault
    Application.Calculation = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True

End Sub

Private Function AutoLoadGetDataToLoad(fileName As String) As Boolean

    On Error GoTo ErrHandler
    Dim WBtoLoad As Workbook
    Dim WStoLoad As Worksheet
    
    Set WBtoLoad = Application.Workbooks.Open(fileName)
    Set WStoLoad = WBtoLoad.Worksheets(1)
    
    Dim NbrRowsOfData As Long
    Dim NbrColsOfData As Integer
    
    If IsEmpty(WStoLoad.Range(Address_SourceData_TopLeft).Offset(1, 1)) Then
        NbrRowsOfData = WStoLoad.Range(Address_SourceData_TopLeft).Row
    Else
        NbrRowsOfData = WStoLoad.Range(Address_SourceData_TopLeft).Offset(0, 1).End(xlDown).Row
    End If
    
    NbrColsOfData = Me.Range(Address_SourceData_TopRight).Column
    
    UnlistClaimsTbl
    
    
    WStoLoad.Range(WStoLoad.Cells(Range(Address_SourceData_TopLeft).Row + 0, _
                                    Range(Address_SourceData_TopLeft).Column + 1), _
                        WStoLoad.Cells(NbrRowsOfData, NbrColsOfData + 1)).Copy
    
    Me.Range(Address_SourceData_TopLeft).Offset(1, 0).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    
    'CreateListObjectClaimsTbl NbrRowsOfData
    Call WBtoLoad.Close(False)
    Set WBtoLoad = Nothing
    AutoLoadGetDataToLoad = True

    Exit Function
    
ErrHandler:

    Print "AutoLoadGetDataToLoad"
    Print Err.Description
    If WBtoLoad Is Nothing Then
    Else
        Call WBtoLoad.Close(False)
        Set WBtoLoad = Nothing
    End If
    AutoLoadGetDataToLoad = False
End Function

Private Function GetDataToLoad() As Boolean

    On Error GoTo ErrHandler
    
    Dim currentWkb As Workbook
    Set currentWkb = Me.Parent
    GetDataToLoad = True
    
    If Trim(Me.Range(Address_SourceData_TopLeft).Offset(1, 0).Value) <> "" Then
        Dim NewTbl As ListObject
        Set NewTbl = Me.ListObjects(1)
        NewTbl.DataBodyRange.Clear
        Set NewTbl = Nothing
'        If currentWkb.Sheets(SheetName_ControlPanel).Range("releasee") & " " & _
'            LCase(currentWkb.Sheets(SheetName_ControlPanel).Range("versionn")) >= _
'            LCase(Me.Cells(3, 50).Value) Then
'            UnlistClaimsTbl
'            GetDataToLoad = True
'            Exit Function
'        Else
'            MsgBox "We have detected an old version of the RECAT template. Please close out, obtain the latest version from the RE Toolbox and try again. Your copy of the obsolete template should be deleted.", vbCritical
'            GetDataToLoad = False
'            Exit Function
'        End If
    End If
    
    Dim laOpenedWorkbooks() As String
    Dim NbrWBsOpen As Integer
    NbrWBsOpen = Application.Workbooks.count
    
    ReDim laOpenedWorkbooks(0 To NbrWBsOpen - 1)
    Dim wkb As Workbook, i As Integer
    
    i = 0
    For Each wkb In Application.Workbooks
        If wkb.name Like "recat_2.0_analysis_template*" _
        Or wkb.name Like "recat_3.0_analysis_template*" _
        Or wkb.Worksheets.count > 1 Then
            'do nothing
        ElseIf wkb.name Like "RECAT*2.0*" _
        Or wkb.name Like "RECAT*2 0*" _
        Or wkb.name Like "RECAT2.0*" _
        Or wkb.name Like "RECAT*3.0*" _
        Or wkb.name Like "~*" Then
            laOpenedWorkbooks(i) = wkb.name
            i = i + 1
        End If
    Next wkb
    
    Dim SelWBToLoad As String
    Dim WBtoLoad As Workbook
    Dim WStoLoad As Worksheet
    If i = 1 Then
        SelWBToLoad = laOpenedWorkbooks(0)
    Else
        Dim SelWBToLoadForm As New frmSelWBtoLoad
        'SelWBToLoadForm.OpenWorkbooks = laOpenedWorkbooks
        For i = 0 To UBound(laOpenedWorkbooks)
            If Trim(laOpenedWorkbooks(i)) = "" Then
            Else
                SelWBToLoadForm.cbOpenWorkbooks.AddItem laOpenedWorkbooks(i)
            End If
        Next i
        SelWBToLoadForm.Show vbModal
        If Trim(SelWBToLoadForm.SelectedWorkbookToLoad) = "" Then
            GetDataToLoad = False
            'Return
        Else
            SelWBToLoad = Trim(SelWBToLoadForm.SelectedWorkbookToLoad)
        End If
        Set SelWBToLoadForm = Nothing
    End If
    
    If GetDataToLoad = False Then Exit Function

    Set WBtoLoad = Application.Workbooks(SelWBToLoad)
    Set WStoLoad = WBtoLoad.Worksheets(1)
'    For i = 1 To Me.Range(Address_SourceData_TopRight).Column
'        If Me.Cells(2, i) <> WStoLoad.Cells(1, i) Then
'            GetDataToLoad = False
'            MsgBox "Workbook: " & SelWBToLoad & _
'                " columns do not match the necessary column order to load.  " & _
'                "Please select a different workbook."
'            Return
'        End If
'    Next

    If currentWkb.Sheets(SheetName_ControlPanel).Range("releasee") & " " & _
        LCase(currentWkb.Sheets(SheetName_ControlPanel).Range("versionn")) = _
        LCase(WStoLoad.Cells(1, 1).Value) Then
    Else
        MsgBox "Data Mismatch. Please ensure you are using a current Business Objects report and the latest version of the RECAT 2.0 template from the RE Toolbox.", vbCritical
        GetDataToLoad = False
        Exit Function
    End If
    
    
    Dim NbrRowsOfData As Long
    Dim NbrColsOfData As Integer
    
    If IsEmpty(WStoLoad.Range(Address_SourceData_TopLeft).Offset(1, 1)) Then
        NbrRowsOfData = WStoLoad.Range(Address_SourceData_TopLeft).Row
    Else
        NbrRowsOfData = WStoLoad.Range(Address_SourceData_TopLeft).Offset(0, 1).End(xlDown).Row
    End If
    
    NbrColsOfData = Me.Range(Address_SourceData_TopRight).Column
    
    UnlistClaimsTbl
    
    
    WStoLoad.Range(WStoLoad.Cells(Range(Address_SourceData_TopLeft).Row + 0, _
                                    Range(Address_SourceData_TopLeft).Column + 1), _
                        WStoLoad.Cells(NbrRowsOfData, NbrColsOfData + 1)).Copy
    
    Me.Range(Address_SourceData_TopLeft).Offset(1, 0).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    
    'CreateListObjectClaimsTbl NbrRowsOfData
    
    GetDataToLoad = True

    Exit Function
    
ErrHandler:

    Print "GetDataToLoad"
    Print Err.Description
    GetDataToLoad = False
    
End Function
Private Sub AddSlicers()
    
    On Error GoTo AddSlicersErrHandler
   
    
    ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), _
        "Policy Year").Slicers.Add Sheets("DashBoard"), , "Policy Year", _
        "Select Policy Year                                                           " & _
        "HOLD DOWN CTRL KEY TO SELECT MULTIPLE VALUES. CLICK ON FILTER ICON TO CLEAR.", 51.12 _
        , 1.44, 972.62, 56
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").Slicers("Policy Year"). _
        NumberOfColumns = 10
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").Slicers("Policy Year").Style _
        = "SlicerStyleDark1"
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("ClmLvlCovSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CovSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CovFreq"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("PolYear"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CalYear"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("NetIncBand"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10LossLocSt"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AvgClm"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AccCatFreq"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AccCatSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("WCRptLag"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10SitesSevLowLvlSite"))
    ActiveWorkbook.SlicerCaches("Slicer_Policy_Year").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10SiteFreqLowLvlSite"))
    '
    
    ActiveWorkbook.SlicerCaches.Add(Sheets("DashBoard").PivotTables("ClmLvlCovFreq"), "Coverage"). _
        Slicers.Add Sheets("DashBoard"), , "Coverage", "Select Coverage", 107, 1.44, 186.6, 120.32
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").Slicers("Coverage").Style _
        = "SlicerStyleDark1"
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("ClmLvlCovSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CovSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CovFreq"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("PolYear"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("CalYear"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("NetIncBand"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10LossLocSt"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AvgClm"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AccCatFreq"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10AccCatSev"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("WCRptLag"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10SitesSevLowLvlSite"))
    ActiveWorkbook.SlicerCaches("Slicer_Coverage").PivotTables.AddPivotTable (Sheets("DashBoard") _
        .PivotTables("Top10SiteFreqLowLvlSite"))
        
    ActiveWorkbook.Sheets("Dashboard").CheckIfSiteFieldsHaveData
    ActiveWorkbook.Sheets("Dashboard").SiteLowestName_Click
        
    Exit Sub
    
AddSlicersErrHandler:

    Debug.Print "AddSlicers"
    Debug.Print Err.Description

End Sub

Private Sub clear_slicers()
Dim i As SlicerCaches
Dim j As Slicers
Dim k As Slicer
Dim idx1 As Integer
Dim idx2 As Integer

Set i = ActiveWorkbook.SlicerCaches
For idx2 = 1 To i.count
    Set j = i.Item(idx2).Slicers
    For idx1 = 1 To j.count
        Set k = j.Item(idx1)
        k.Delete
    Next
Next

End Sub

Private Sub ChangePivotCache()
'pivot table tutorial by contextures.com
'change pivot cache for all Pivot Tables in workbook
Dim pt As PivotTable
Dim wks As Worksheet
On Error Resume Next

    For Each pt In Sheets("DashBoard").PivotTables
        Debug.Print pt.name
        pt.SourceData = "ClaimsTbl"
        If Err.Number = 0 Then
            Debug.Print "Success"
        Else
            Debug.Print "Failed:  " & Err.Number & "   " & Err.Description
        End If
    Next pt
'    For Each wks In ActiveWorkbook.Worksheets
'    Next wks
    For Each pt In Sheets("DashBoard").PivotTables
        pt.CacheIndex = Sheets("Dashboard").PivotTables(1).CacheIndex
    Next pt
    For Each pt In Sheets("Dashboard").PivotTables
        Debug.Print pt.name
        Debug.Print pt.CacheIndex
    Next

End Sub


Sub RelocatePivotTables()
'
' Macro3 Macro
'

'
    With Sheets("DashBoard").PivotTables("Top10AccCatFreq")
        .ColumnGrand = False
        .RowGrand = False
        .Location = "DashBoard!$A$66"
    End With
    With Sheets("DashBoard").PivotTables("Top10AccCatSev")
        .ColumnGrand = False
        .RowGrand = False
        .Location = "DashBoard!$A$77"
    End With
    With Sheets("DashBoard").PivotTables("WCRptLag")
        '.ColumnGrand = False
        '.RowGrand = False
        .Location = "DashBoard!$A$104"
    End With
    With Sheets("DashBoard").PivotTables("Top10AvgClm")
        '.ColumnGrand = False
        '.RowGrand = False
        .Location = "DashBoard!$A$113"
    End With
End Sub

Private Sub Add_Data_Bars_Dashboard_Rpt_Lag()
    
    Dim wks As Worksheet
    Set wks = Worksheets("DashBoard")
    Dim wrng As Range
    Dim pt As PivotTable
    Set pt = wks.PivotTables("WCRptLag")
    
    'Set wrng = Union(pt.PivotFields("% Claims").DataRange.EntireColumn, pt.PivotFields("% Net Incurred Total").DataRange.EntireColumn)
    Set wrng = pt.PivotFields("% Claims").DataRange
    wrng.FormatConditions.AddDatabar
    wrng.FormatConditions(wrng.FormatConditions.count).ShowValue = True
    wrng.FormatConditions(wrng.FormatConditions.count).SetFirstPriority
    With wrng.FormatConditions(1)
        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin
        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax
    End With
    With wrng.FormatConditions(1).BarColor
        .Color = 13012579
        .TintAndShade = 0
    End With
    wrng.FormatConditions(1).BarFillType = xlDataBarFillGradient
    wrng.FormatConditions(1).Direction = xlContext
    wrng.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor
    wrng.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid
    wrng.FormatConditions(1).NegativeBarFormat.BorderColorType = _
        xlDataBarColor
    With wrng.FormatConditions(1).BarBorder.Color
        .Color = 13012579
        .TintAndShade = 0
    End With
    wrng.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic
    With wrng.FormatConditions(1).AxisColor
        .Color = 0
        .TintAndShade = 0
    End With
    With wrng.FormatConditions(1).NegativeBarFormat.Color
        .Color = 255
        .TintAndShade = 0
    End With
    With wrng.FormatConditions(1).NegativeBarFormat.BorderColor
        .Color = 255
        .TintAndShade = 0
    End With
    Set wrng = pt.PivotFields("% Net Incurred Total").DataRange
    wrng.FormatConditions.AddDatabar
    wrng.FormatConditions(wrng.FormatConditions.count).ShowValue = True
    wrng.FormatConditions(wrng.FormatConditions.count).SetFirstPriority
    With wrng.FormatConditions(1)
        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin
        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax
    End With
    With wrng.FormatConditions(1).BarColor
        .Color = 13012579
        .TintAndShade = 0
    End With
    wrng.FormatConditions(1).BarFillType = xlDataBarFillGradient
    wrng.FormatConditions(1).Direction = xlContext
    wrng.FormatConditions(1).NegativeBarFormat.ColorType = xlDataBarColor
    wrng.FormatConditions(1).BarBorder.Type = xlDataBarBorderSolid
    wrng.FormatConditions(1).NegativeBarFormat.BorderColorType = _
        xlDataBarColor
    With wrng.FormatConditions(1).BarBorder.Color
        .Color = 13012579
        .TintAndShade = 0
    End With
    wrng.FormatConditions(1).AxisPosition = xlDataBarAxisAutomatic
    With wrng.FormatConditions(1).AxisColor
        .Color = 0
        .TintAndShade = 0
    End With
    With wrng.FormatConditions(1).NegativeBarFormat.Color
        .Color = 255
        .TintAndShade = 0
    End With
    With wrng.FormatConditions(1).NegativeBarFormat.BorderColor
        .Color = 255
        .TintAndShade = 0
    End With
    'wrng.FormatConditions(1).ScopeType = xlDataFieldScope
    ActiveWorkbook.ShowPivotTableFieldList = False
    
End Sub




Sub writetoControlPanel(Status As String)

ActiveWorkbook.Names("statuss").RefersToRange.Value = Status

'ActiveWorkbook.Names("errorr").RefersToRange.Value = ErrorDesc

'clear the contents when opening the file
End Sub


Sub writeErrortoControlPanel(ErrorDesc As String)

ActiveWorkbook.Names("errorr").RefersToRange.Value = ErrorDesc

End Sub





Attribute VB_Name = "SortForCounting"
Public Sub SortForClaimantCounting()

    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets(SheetName_PivotData)
    Set TheList = TheSheet.ListObjects(1)

    TheList.Sort.SortFields.Clear
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Incident Key]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Claimant_ID]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Net Incurred Total]]"), xlSortOnValues, xlDescending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With
    
End Sub

Public Sub SortForClaimCounting()
    
    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets(SheetName_PivotData)
    Set TheList = TheSheet.ListObjects(1)
    
    TheList.Sort.SortFields.Clear
    
    'TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Coverage]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Claim Number]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Net Incurred Total]]"), xlSortOnValues, xlDescending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With
    
End Sub

Public Sub SortForIncidentCounting()

    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets(SheetName_PivotData)
    Set TheList = TheSheet.ListObjects(1)

    TheList.Sort.SortFields.Clear
    
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Coverage]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Date Of Loss]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Claim Number]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Driver_ID]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Net Incurred Total]]"), xlSortOnValues, xlDescending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With

End Sub

Public Sub SortForIncidentCounting_Auto()

    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets(SheetName_PivotData)
    Set TheList = TheSheet.ListObjects(1)

    TheList.Sort.SortFields.Clear
    
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Coverage]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Date Of Loss]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Driver_ID]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Claim Number]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Accident Narrative]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Loss Location State]]"), xlSortOnValues, xlAscending
    'TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Net Incurred Total]]"), xlSortOnValues, xlDescending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With

End Sub

Public Sub SortForIncidentCounting_NonAuto()

    Dim TheSheet As Worksheet
    Dim TheList As ListObject
    
    Set TheSheet = Worksheets(SheetName_PivotData)
    Set TheList = TheSheet.ListObjects(1)

    TheList.Sort.SortFields.Clear
    
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Coverage]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Date Of Loss]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Claim Number]]"), xlSortOnValues, xlAscending
    TheList.Sort.SortFields.Add TheSheet.Range("ClaimsTbl[[#All],[Net Incurred Total]]"), xlSortOnValues, xlDescending
    
    With TheList.Sort
    
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlSortColumns
        .Apply
        .SortFields.Clear
    End With

End Sub



Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)


    
    On Error Resume Next
'Enable the add-in before generating the workbook so that users of this add-in see it in the same state as before

    Application.COMAddIns("PDFMaker.OfficeAddin").Connect = True
    
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    On Error Resume Next


    Dim RECATSheet As Worksheet
    Set RECATSheet = Worksheets("RECAT")
    Dim obCell As Range
    Set obCell = RECATSheet.Range("$OSP$1")
    
    If obCell.Value = "I Disagree" Then
    ElseIf Not HasControlPanelSheet() Then
    
        ShowDisclaimerToCustomer
    
    End If

End Sub

Private Sub Workbook_Open()

    On Error Resume Next
' Disable the specific add-in because it interferes in the VBA code and asks for a password and prohibits the user in accomplishing the task

    Application.COMAddIns("PDFMaker.OfficeAddin").Connect = False
    
    If HasControlPanelSheet() Then
    
        Worksheets(SheetName_ControlPanel).Activate

    ElseIf HasSourceDataSheet() And Not HasSourceData() Then
    
        Worksheets(SheetName_SourceData).Activate
    
    Else
    
        ShowDisclaimerToCustomer
    
    End If
    
End Sub


Private Sub ShowDisclaimerToCustomer()

    On Error Resume Next

    
    Worksheets(SheetName_Disclaimer).Activate
    
    HideAllButDisclaimer
        

End Sub


Private Function HasControlPanelSheet() As Boolean

    On Error Resume Next
    
    Dim retVal As Boolean
    retVal = False
    
    Dim sheet As Worksheet
    Set sheet = Worksheets(SheetName_ControlPanel)
    
    If Not sheet Is Nothing Then
        
        If sheet.name = SheetName_ControlPanel Then
            retVal = True
        End If

    End If

    HasControlPanelSheet = retVal

End Function

Private Function HasSourceDataSheet() As Boolean

    On Error Resume Next
    
    Dim retVal As Boolean
    retVal = False
    
    Dim sheet As Worksheet
    Set sheet = Worksheets(SheetName_SourceData)
    
    If Not sheet Is Nothing Then
        
        If sheet.name = SheetName_SourceData Then
            retVal = True
        End If

    End If

    HasSourceDataSheet = retVal

End Function


Private Function HasSourceData() As Boolean

    On Error Resume Next
    
    Dim retVal As Boolean
    retVal = False
    
    If HasSourceDataSheet() Then
    
        Dim ds As Worksheet
        Set ds = Worksheets(SheetName_SourceData)
        
        If ds.Range("A4").Value <> "" Then
        
            retVal = True
            
        End If
    
    End If
    


    HasSourceData = retVal

End Function




Attribute VB_Name = "UI_Chart"
Private Sub CopyChartData(thissheet As Worksheet, _
                            thisPivot As PivotTable, _
                            MaxRowCount As Integer)

    On Error GoTo ErrHandler

    Dim ChartDataRange As Range
    Set ChartDataRange = thisPivot.TableRange2.Offset(0, 26)
    ChartDataRange.Clear
    
    If MaxRowCount > 0 Then
        
        If thisPivot.DataBodyRange.Rows.count > MaxRowCount Then
        
            Dim NewRowCount As Integer
            NewRowCount = thisPivot.PageRange.Rows.count + 5 + MaxRowCount
            
            Set ChartDataRange = ChartDataRange.Resize(NewRowCount, ChartDataRange.Columns.count)
        
        End If
    
    End If
    
    thisPivot.TableRange2.Copy
    
    ChartDataRange.PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    
Exit Sub

ErrHandler:

    Debug.Print "CopyChartData"
    Debug.Print Err.Description
    Err.Clear
    
        
End Sub

Public Sub PlaceChartInNook(thissheet As Worksheet, _
                            thisPivot As PivotTable, _
                            ThisChartObject As ChartObject)
    On Error GoTo ErrHandler

    
    Dim Top As Integer
    Dim Left As Integer
    Dim Height As Integer
    Dim Width As Integer
    
    Dim Margin As Integer
    Margin = 8
    
    Top = thisPivot.PageRange.Top
    Left = thisPivot.PageRange.Left + thisPivot.PageRange.Width + Margin
    
    Width = thisPivot.TableRange1.Width - Left - Margin * 2
    Height = thisPivot.PageRange.Height - Margin
    
    
    If thisPivot.RowFields.count > 0 Then
            
            ThisChartObject.Left = Left
            ThisChartObject.Top = Top
            ThisChartObject.Width = Width
            ThisChartObject.Height = Height


    End If
        
Exit Sub

ErrHandler:

    Debug.Print "PlaceChartInNook"
    Debug.Print Err.Description
    Err.Clear
    
End Sub

Public Sub PlaceChartAbove(thissheet As Worksheet, _
                            thisPivot As PivotTable, _
                            ThisChartObject As ChartObject)
    On Error GoTo ErrHandler

    
    Dim Top As Integer
    Dim Left As Integer
    Dim Height As Integer
    Dim Width As Integer
    Dim Margin As Integer
    
    Margin = 5
    Height = (thisPivot.PageRange.Top - Margin) - (thissheet.Range("A7").Top + Margin)
    
    Top = thissheet.Range("A7").Top + Margin
    Left = thisPivot.TableRange1.Cells(1, 1).Left + Margin
    
    Width = thisPivot.TableRange1.Width - 2 * Margin
    
    
    If thisPivot.RowFields.count > 0 Then
            
            ThisChartObject.Left = Left
            ThisChartObject.Top = Top
            ThisChartObject.Width = Width
            ThisChartObject.Height = Height


    End If
        
    
Exit Sub

ErrHandler:

    Debug.Print "PlaceChartAbove"
    Debug.Print Err.Description
    Err.Clear

End Sub

Public Sub FormatLegend(thissheet As Worksheet, thisChart As Chart)

    On Error GoTo ErrHandler
    
    thisChart.Legend.Position = xlLegendPositionTop

    
Exit Sub

ErrHandler:

    Debug.Print "FormatLegend"
    Debug.Print Err.Description
    Err.Clear
End Sub


Public Sub FormatCategoryAxis(thissheet As Worksheet, _
                                thisChart As Chart, _
                                CategoryType As XlCategoryType)

    On Error GoTo ErrHandler

    Dim CategoryAxis As Axis
    Set CategoryAxis = thisChart.Axes(xlCategory)
    CategoryAxis.TickLabels.Font.Size = 10
    CategoryAxis.TickLabels.Orientation = 45
    
    CategoryAxis.CategoryType = CategoryType
    
    If CategoryType = xlTimeScale Then
    
        CategoryAxis.BaseUnit = xlMonths
        CategoryAxis.TickLabels.NumberFormat = "mmmm-yy"
    
    End If
    

Exit Sub

ErrHandler:

    Debug.Print "FormatCategoryAxis"
    Debug.Print Err.Description
    Err.Clear
End Sub

Public Sub FormatPrimaryAxis(thissheet As Worksheet, _
                                thisChart As Chart, _
                                DisplayUnit As XlDisplayUnit, _
                                NumberFormat As String)

    On Error Resume Next
    
    Dim PrimaryAxis As Axis
    Set PrimaryAxis = thisChart.Axes(xlValue)
    PrimaryAxis.TickLabels.Font.Size = 10

    PrimaryAxis.DisplayUnit = DisplayUnit
    
    PrimaryAxis.TickLabels.NumberFormat = NumberFormat

    

Exit Sub



End Sub

Public Sub FormatSecondaryAxis(thissheet As Worksheet, _
                                thisChart As Chart, _
                                DisplayUnit As XlDisplayUnit, _
                                NumberFormat As String)

    On Error Resume Next
    
    Dim SecondaryAxis As Axis
    Set SecondaryAxis = thisChart.Axes(xlValue, xlSecondary)
    SecondaryAxis.TickLabels.Font.Size = 10

    SecondaryAxis.DisplayUnit = DisplayUnit
    
    SecondaryAxis.TickLabels.NumberFormat = NumberFormat
    
    SecondaryAxis.Format = NumberFormat

End Sub


Public Function CreatePrimarySeries(ThisSeriesCollection As SeriesCollection, _
                                    name As String) As Series

    On Error Resume Next

    Dim ThisSeries As Series
    
    Set ThisSeries = ThisSeriesCollection.NewSeries
            
    ThisSeries.AxisGroup = xlPrimary
    ThisSeries.ChartType = xlColumnClustered
    ThisSeries.name = name
    
    
    
    Set CreatePrimarySeries = ThisSeries

End Function

Public Function AddPrimarySeries(ThisSeriesCollection As SeriesCollection, _
                                    name As String) As Series

    On Error Resume Next

    Dim ThisSeries As Series
    
    Set ThisSeries = ThisSeriesCollection.NewSeries
            
    ThisSeries.AxisGroup = xlPrimary
    ThisSeries.ChartType = xlColumnClustered
    ThisSeries.name = name
    
    Set AddPrimarySeries = ThisSeries

End Function

Public Function CreateSecondarySeries(ThisSeriesCollection As SeriesCollection, _
                                        name As String) As Series

    On Error Resume Next

    Dim ThisSeries As Series
    
    Set ThisSeries = ThisSeriesCollection.NewSeries
            
    ThisSeries.AxisGroup = xlSecondary
    ThisSeries.ChartType = xlLineMarkers
    ThisSeries.name = name

    Set CreateSecondarySeries = ThisSeries

End Function

Public Sub SetLineMarkers(ThisSeries As Series, _
                            ThisValueRange As Range, _
                            ThisLabelRange As Range, _
                            MarkerStyle As XlMarkerStyle)

    On Error Resume Next
    
    ThisSeries.Values = ThisValueRange
    ThisSeries.XValues = ThisLabelRange
    ThisSeries.MarkerStyle = MarkerStyle
    ThisSeries.MarkerSize = 8
    With ThisSeries.Format.Line
        .Visible = msoTrue
        .Weight = 2
    End With


End Sub


Public Sub SyncStandardChartData(thissheet As Worksheet, _
                                    thisPivot As PivotTable, _
                                    ThisChartObject As ChartObject)

    On Error GoTo ErrHandler

    

    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
    If thisPivot Is Nothing Then
        Set thisPivot = thissheet.PivotTables(1)
    End If

    If ThisChartObject Is Nothing Then
        If thissheet.ChartObjects.count > 0 Then
            Set ThisChartObject = thissheet.ChartObjects(1)
        End If
    End If

    Dim thisChart As Chart
    Set thisChart = ThisChartObject.Chart
   
     If thisPivot.RowFields.count > 0 Then
         
         
         Dim LabelRangeRowCount As Integer
         LabelRangeRowCount = thisPivot.RowRange.Rows.count - 1
         
         If thisPivot.RowGrand Then
             LabelRangeRowCount = LabelRangeRowCount - 1
         End If
         
         If LabelRangeRowCount > 0 Then
         
            ThisChartObject.Visible = True
             
             CopyChartData thissheet, thisPivot, 15
             
             
             
             If LabelRangeRowCount <= 0 Then
Exit Sub
             End If
             
             If LabelRangeRowCount > 10 Then
                 LabelRangeRowCount = 10
             End If
             
             
             Dim LabelRange As Range
             Set LabelRange = thisPivot.RowRange.Offset(1, 26) _
                 .Resize(LabelRangeRowCount, 1)
         
         
             Dim PrimarySeries1FieldName As String
             Dim PrimarySeries2FieldName As String
             
             PrimarySeries1FieldName = "{% Claims}"
             PrimarySeries2FieldName = "{% Net Incurred}"
             
             Dim PrimarySeries1PivotField As PivotField
             Dim PrimarySeries2PivotField As PivotField
             
             Set PrimarySeries1PivotField = _
                thisPivot.DataFields(PrimarySeries1FieldName)
             Set PrimarySeries2PivotField = _
                thisPivot.DataFields(PrimarySeries2FieldName)
             
             Dim PrimarySeries1Range As Range
             Dim PrimarySeries2Range As Range
             
             Set PrimarySeries1Range = _
                 PrimarySeries1PivotField.DataRange.Offset(0, 26).Resize(LabelRangeRowCount, 1)
             Set PrimarySeries2Range = _
                 PrimarySeries2PivotField.DataRange.Offset(0, 26).Resize(LabelRangeRowCount, 1)
             
             
             Dim ThisSeriesCollection As SeriesCollection
             Set ThisSeriesCollection = thisChart.SeriesCollection
             
             Dim PrimarySeries1 As Series, PrimarySeries2 As Series
             
             If ThisSeriesCollection.count >= 1 Then
                 Set PrimarySeries1 = ThisSeriesCollection.Item(1)
             Else
                 Set PrimarySeries1 = CreatePrimarySeries(ThisSeriesCollection, PrimarySeries1FieldName)
             End If
             
             PrimarySeries1.ChartType = xlColumnClustered
             PrimarySeries1.Values = PrimarySeries1Range
             PrimarySeries1.XValues = LabelRange
            
             FormatStandardDataLabels PrimarySeries1, "##.0%"

            
             If ThisSeriesCollection.count >= 2 Then
                 Set PrimarySeries2 = ThisSeriesCollection.Item(2)
             Else
                 Set PrimarySeries2 = AddPrimarySeries(ThisSeriesCollection, PrimarySeries2FieldName)
             End If
            
             PrimarySeries2.Values = PrimarySeries2Range
             PrimarySeries2.XValues = LabelRange
             
             FormatStandardDataLabels PrimarySeries2, "##.0%"
             
             
            
             PrimarySeries2.name = PrimarySeries2FieldName

     
         Else
     
            ThisChartObject.Visible = False
            
         End If
     
     End If

Exit Sub

ErrHandler:

    Debug.Print "SyncStandardChartData"
    Debug.Print Err.Description
    Err.Clear
    

End Sub

Private Sub FormatStandardDataLabels(ThisSeries As Series, NumberFormat As String)

'    On Error GoTo ErrHandler
'
'        Dim dl As DataLabels
'        ThisSeries.HasDataLabels = True
'        Set dl = ThisSeries.DataLabels
'        dl.NumberFormat = "##.0%"
'        dl.Orientation = 0
'
'        Dim point As point
'        Dim label As DataLabel
'        Dim chars As Characters
'        Dim font As font
'
'        For Each point In ThisSeries.Points
'
'            Set label = point.DataLabel
'            Set chars = label.Characters
'            Set font = chars.font
'            font.Bold = True
'            font.Size = 9
'        Next
'
'    Exit Sub
'
'ErrHandler:
'
'    Debug.Print "SyncStandardChartData"
'    Debug.Print Err.Description
'    Err.Clear
    
End Sub



Public Sub FormatStandardChart(thissheet As Worksheet, _
                                thisPivot As PivotTable, _
                                ThisChartObject As ChartObject)

    On Error GoTo ErrHandler

    

    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
    If thisPivot Is Nothing Then
        Set thisPivot = thissheet.PivotTables(1)
    End If

    If ThisChartObject Is Nothing Then
        Set ThisChartObject = thissheet.ChartObjects(1)
    End If

     
     
     
     Dim thisChart As Chart
     Set thisChart = ThisChartObject.Chart
     
     thisChart.ChartStyle = 26
 
     PlaceChartInNook thissheet, thisPivot, ThisChartObject
     
     
    If thisPivot.RowFields.count > 0 Then
    
        Dim AnalysisItemName As String
    
        AnalysisItemName = thisPivot.RowFields(1).name
        thisChart.HasTitle = True
        thisChart.ChartTitle.Text = AnalysisItemName & " Analysis"
    
    End If
    
     
     
     If thisPivot.RowFields.count > 0 Then
         
         
            Dim LabelRangeRowCount As Integer

             
            FormatLegend thissheet, thisChart
            FormatCategoryAxis thissheet, thisChart, xlAutomaticScale
            FormatPrimaryAxis thissheet, thisChart, False, "##0%"
            
     
    Else

    
    End If
     

    
Exit Sub

ErrHandler:

    Debug.Print "FormatStandardChart"
    Debug.Print Err.Description
    Err.Clear
    
End Sub


Public Sub SyncTrendChartData(thissheet As Worksheet, thisPivot As PivotTable, ThisChartObject As ChartObject)

    On Error GoTo ErrHandler

    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
    If thisPivot Is Nothing Then
        Set thisPivot = thissheet.PivotTables(1)
    End If

    If ThisChartObject Is Nothing Then
        Set ThisChartObject = thissheet.ChartObjects(1)
    End If

    Dim thisChart As Chart
    Set thisChart = ThisChartObject.Chart

    
    If thisPivot.RowFields.count > 0 Then
        
        
        Dim LabelRangeRowCount As Integer
        LabelRangeRowCount = thisPivot.RowRange.Rows.count - 1
        
        If thisPivot.RowGrand Then
            LabelRangeRowCount = LabelRangeRowCount - 1
        End If
        
        If LabelRangeRowCount > 0 Then
        
            CopyChartData thissheet, thisPivot, 0
        
            If LabelRangeRowCount <= 0 Then
Exit Sub
            End If
            
            Dim LabelRange As Range
            Set LabelRange = thisPivot.RowRange.Offset(1, 26) _
                .Resize(LabelRangeRowCount, 1)
        
        
            Dim PrimarySeries1FieldName As String
            Dim SecondarySeries1FieldName As String
            
            PrimarySeries1FieldName = "{# Claims}"
            SecondarySeries1FieldName = "{$ Net Incurred}"
           
            Dim PrimarySeries1PivotField As PivotField
            Dim SecondarySeries1PivotField As PivotField
            
            Set PrimarySeries1PivotField = thisPivot.DataFields(PrimarySeries1FieldName)
            Set SecondarySeries1PivotField = thisPivot.DataFields(SecondarySeries1FieldName)
            
            Dim PrimarySeries1Range As Range
            Dim SecondarySeries1Range As Range
            
            Set PrimarySeries1Range = _
                PrimarySeries1PivotField.DataRange.Offset(0, 26).Resize(LabelRangeRowCount, 1)
            Set SecondarySeries1Range = _
                SecondarySeries1PivotField.DataRange.Offset(0, 26).Resize(LabelRangeRowCount, 1)
            
            
            Dim ThisSeriesCollection As SeriesCollection
            Set ThisSeriesCollection = thisChart.SeriesCollection
            
            Dim PrimarySeries1 As Series, SecondarySeries1 As Series
            
            If ThisSeriesCollection.count >= 1 Then
                Set PrimarySeries1 = ThisSeriesCollection.Item(1)
            Else
                Set PrimarySeries1 = CreatePrimarySeries(ThisSeriesCollection, PrimarySeries1FieldName)
            End If
            
            PrimarySeries1.ChartType = xlColumnClustered
            PrimarySeries1.Values = PrimarySeries1Range
            PrimarySeries1.XValues = LabelRange
           
            PrimarySeries1.name = PrimarySeries1FieldName
            
            
            If ThisSeriesCollection.count >= 2 Then
                Set SecondarySeries1 = ThisSeriesCollection.Item(2)
            Else
                Set SecondarySeries1 = CreateSecondarySeries(ThisSeriesCollection, SecondarySeries1FieldName)
            End If
           
            SecondarySeries1.AxisGroup = xlSecondary
            SecondarySeries1.Values = SecondarySeries1Range
            SecondarySeries1.XValues = LabelRange
            SecondarySeries1.ChartType = xlLineMarkers
            
            SecondarySeries1.name = SecondarySeries1.name
            
            SetLineMarkers SecondarySeries1, SecondarySeries1Range, LabelRange, xlMarkerStyleCircle
           
        Else
    
        
        End If
        
   
    End If
    

Exit Sub

ErrHandler:

    Debug.Print "SyncTrendChartData"
    Debug.Print Err.Description
    Err.Clear

End Sub

Private Sub SetTrendChartsDates(ThisChartObject As ChartObject)


    On Error GoTo ErrHandler

    Dim thisChart As Chart, ThisAxis As Axis
    
    Set thisChart = ThisChartObject.Chart
    
    Set ThisAxis = thisChart.Axes(xlCategory)
    
    
    Dim MinDate As Date, MaxDate As Date
    
    

    
    MinDate = CDate("1/1/" & Str(Year(Worksheets(SheetName_Contents).Range(Address_Effective_Date))))
    MaxDate = CDate("1/1/" & Str(Year(Worksheets(SheetName_Contents).Range(Address_Expiration_Date))))
    
    
    ThisAxis.MinimumScale = MinDate
    ThisAxis.MaximumScale = MaxDate
    
    
    
Exit Sub

ErrHandler:

    Debug.Print "SetTrendChartsDates"
    Debug.Print Err.Description
    Err.Clear

End Sub

Public Sub FormatLagAnalysisChart(thissheet As Worksheet, _
                                    thisPivot As PivotTable, _
                                    ThisChartObject As ChartObject)

    On Error GoTo ErrHandler

    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
    If thisPivot Is Nothing Then
        Set thisPivot = thissheet.PivotTables(1)
    End If

    Dim thisChart As Chart
    Set thisChart = ThisChartObject.Chart
    
    thisChart.ChartStyle = 26

     PlaceChartAbove thissheet, thisPivot, ThisChartObject
     
    If thisPivot.RowFields.count > 0 Then
    
        Dim AnalysisItemName As String
    
        AnalysisItemName = thisPivot.RowFields(1).name
        thisChart.HasTitle = True
        thisChart.ChartTitle.Text = AnalysisItemName
    
    End If
    
     If thisPivot.RowFields.count > 0 Then
         
         
         Dim LabelRangeRowCount As Integer
         LabelRangeRowCount = thisPivot.RowRange.Rows.count - 1
         
         If thisPivot.RowGrand Then
             LabelRangeRowCount = LabelRangeRowCount - 1
         End If
         
         If LabelRangeRowCount > 0 Then
         
             'CopyChartData thisSheet, thisPivot, 15
         
             If LabelRangeRowCount <= 0 Then
                Exit Sub
             End If
             
             Dim LabelRange As Range
             Set LabelRange = thisPivot.RowRange.Offset(1, 26) _
                 .Resize(LabelRangeRowCount, 1)
         
         
             Dim PrimarySeries1FieldName As String
             Dim SecondarySeries1FieldName As String
             
             PrimarySeries1FieldName = "{# Claims}"
             SecondarySeries1FieldName = "{$ Avg Claim}"
            
            
             Dim PrimarySeries1PivotField As PivotField
             Dim SecondarySeries1PivotField As PivotField
             
             Set PrimarySeries1PivotField = _
                thisPivot.DataFields(PrimarySeries1FieldName)
             Set SecondarySeries1PivotField = _
                thisPivot.DataFields(SecondarySeries1FieldName)
             
             Dim PrimarySeries1Range As Range
             Dim SecondarySeries1Range As Range
             
             Set PrimarySeries1Range = _
                 PrimarySeries1PivotField.DataRange.Offset(0, 26). _
                 Resize(LabelRangeRowCount, 1)
             Set SecondarySeries1Range = _
                 SecondarySeries1PivotField.DataRange.Offset(0, 26). _
                 Resize(LabelRangeRowCount, 1)
             
             
             Dim ThisSeriesCollection As SeriesCollection
             Set ThisSeriesCollection = thisChart.SeriesCollection
             
             Dim PrimarySeries1 As Series, SecondarySeries1 As Series
             
             If ThisSeriesCollection.count >= 1 Then
                 Set PrimarySeries1 = ThisSeriesCollection.Item(1)
             Else
                 Set PrimarySeries1 = CreatePrimarySeries(ThisSeriesCollection, _
                    PrimarySeries1FieldName)
             End If
             
             PrimarySeries1.ChartType = xlColumnClustered
             PrimarySeries1.Values = PrimarySeries1Range
             PrimarySeries1.XValues = LabelRange
            
            
             
             If ThisSeriesCollection.count >= 2 Then
                 Set SecondarySeries1 = ThisSeriesCollection.Item(2)
             Else
                 Set SecondarySeries1 = CreateSecondarySeries(ThisSeriesCollection, _
                    SecondarySeries1FieldName)
             End If
            
             SecondarySeries1.AxisGroup = xlSecondary
             SecondarySeries1.Values = SecondarySeries1Range
             SecondarySeries1.XValues = LabelRange
             SecondarySeries1.ChartType = xlLineMarkers
             SetLineMarkers SecondarySeries1, SecondarySeries1Range, LabelRange, xlMarkerStyleCircle
             
             FormatLegend thissheet, thisChart
             
             FormatCategoryAxis thissheet, thisChart, xlTimeScale
             
             FormatPrimaryAxis thissheet, thisChart, False, "#,###0"
             FormatSecondaryAxis thissheet, thisChart, False, "$#,##0"
     
         Else
     
         
         End If
     
     End If

    
Exit Sub

ErrHandler:

    Debug.Print "FormatLagAnalysisChart"
    Debug.Print Err.Description
    Err.Clear
    
End Sub




Attribute VB_Name = "UI_Pivot"
Option Explicit

Public Sub SetGlobalPivotTableAttributes(thissheet As Worksheet, thisPivot As PivotTable)

    On Error GoTo ErrHandler
    
    
    SortPageFields thissheet, thisPivot

    thisPivot.DisplayErrorString = True
    thisPivot.ErrorString = ""
    
    thisPivot.ShowTableStyleColumnHeaders = True
    thisPivot.RowGrand = True
    thisPivot.GrandTotalName = "Totals"
    
    thisPivot.CompactLayoutColumnHeader = ""
    thisPivot.CompactLayoutRowHeader = ""
    thisPivot.DataLabelRange.Offset(-2, -1).Resize(1, 1).Value = "Analysis Item"
    
    Dim tmpRange As Range
    Set tmpRange = thisPivot.PivotTables(1).RowRange
    tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24
    'thisPivot.DataLabelRange.Offset(-1, 0).RowHeight = 24
    
        
    thisPivot.PreserveFormatting = True
    thisPivot.FieldListSortAscending = True
    
    thisPivot.HasAutoFormat = False

    

    'thisPivot.TableStyle2 = "RECAT Pivot"
    thisPivot.TableStyle2 = "New RECAT"

Exit Sub

'Injury, Medical, Loss Time, Property Damage

ErrHandler:

    Debug.Print "SetGlobalPivotTableAttributes"
    Debug.Print Err.Description
    Err.Clear

End Sub

Public Sub SortStandardPivotTable()

    Dim thissheet As Worksheet
    Set thissheet = ActiveSheet
    
    Dim thisPivot As PivotTable
    Set thisPivot = thissheet.PivotTables(1)
    
    Dim SortByKey As Integer
    SortByKey = thissheet.Range("aa1").Value
    
    If SortByKey = 0 Or SortByKey > 20 Then SortByKey = 1
    
    
    
    If SortByKey = 1 Then
        SortByAnalysisItem_AZ thissheet, thisPivot
    ElseIf SortByKey = 2 Then
        SortByAnalysisItem_ZA thissheet, thisPivot
    ElseIf SortByKey = 3 Then
        SortByZA thissheet, thisPivot, "{# Claimants}"
    ElseIf SortByKey = 4 Then
        SortByZA thissheet, thisPivot, "{# Claims}"
    ElseIf SortByKey = 5 Then
        SortByZA thissheet, thisPivot, "{# Incidents}"
    ElseIf SortByKey = 6 Then
        SortByZA thissheet, thisPivot, "{% Open}"
    ElseIf SortByKey = 7 Then
        SortByZA thissheet, thisPivot, "{$ Net Incurred}"
    ElseIf SortByKey = 8 Then
        SortByZA thissheet, thisPivot, "{$ Avg Claim}"
    ElseIf SortByKey = 9 Then
        SortByZA thissheet, thisPivot, "{$ BI Med}"
    ElseIf SortByKey = 10 Then
        SortByZA thissheet, thisPivot, "{$ PD LT}"
    ElseIf SortByKey = 11 Then
        SortByZA thissheet, thisPivot, "{$BI/ $PD}"
    End If


End Sub


Private Sub SetDataColumnColor(thissheet As Worksheet, thisPivot As PivotTable)

    On Error GoTo ErrHandler


    Dim ThisDataField As PivotField
    Dim ThisDataRange As Range
    
    
    
    For Each ThisDataField In thisPivot.DataFields
        
        Application.StatusBar = "Formating Pivot Table on " & thissheet.name & " Column " & ThisDataField.name
        
        
        Set ThisDataRange = ThisDataField.DataRange
        
        If thisPivot.ColumnGrand = True Then
            Set ThisDataRange = ThisDataRange.Resize(ThisDataRange.Rows.count + 1, 1)
        End If
        
        With ThisDataRange.Interior
            .Color = GetPivotFieldColor(ThisDataField.name)
        End With
    
    
    Next


Exit Sub

ErrHandler:

    Debug.Print "SetDataColumnColor"
    Debug.Print Err.Description
    Err.Clear

End Sub

Private Sub SetColumnHeaderColor(thissheet As Worksheet, thisPivot As PivotTable)

    On Error GoTo ErrHandler

    thisPivot.DataBodyRange.ColumnWidth = 13
    thisPivot.ColumnRange.HorizontalAlignment = xlRight
    
    With thisPivot.ColumnRange
    
        .Font.Size = 10
    
        With .Interior
            .Color = RGB(217, 217, 217)
        End With

    End With


Exit Sub

ErrHandler:

    Debug.Print "SetColumnHeaderColor"
    Debug.Print Err.Description
    Err.Clear

End Sub

Private Sub FormatPivotColumns(thissheet As Worksheet, _
                                thisPivot As PivotTable)

    On Error GoTo ErrHandler
   

'    SetColumnHeaderColor thissheet, thisPivot
'    SetDataColumnColor thissheet, thisPivot

    
    


    Dim Field As PivotField
    
'    If IsFullFormat Then
        
        
        For Each Field In thisPivot.DataFields
        
            Application.StatusBar = "Formating Pivot Table on " & thissheet.name & " Column " & Field.name
            
            Field.NumberFormat = GetPivotFieldNumberFormat(Field.name)
        
        'Next Field
        
        'For Each Field In thisPivot.DataFields
        
            'Application.StatusBar = "Formating Pivot Table on " & thisSheet.name & " Column " & Field.name
        
            Field.DataRange.EntireColumn.ColumnWidth = _
                GetPivotFieldWidth(Field.name)
            With Field.DataRange.EntireColumn.Interior
    
                .ColorIndex = xlColorIndexNone
    
            End With
        
            Dim RowOffset As Integer
            Dim RowCount As Long
            
            If Field.LabelRange.Value <> Field.name Then
                RowOffset = -1
                RowCount = Field.DataRange.Rows.count + 1
            Else
                RowOffset = 0
                RowCount = Field.DataRange.Rows.count
                Field.LabelRange.HorizontalAlignment = xlRight
            End If
                
            If thisPivot.RowGrand = True Then
                RowCount = RowCount + 1
            End If
            
            
            
            
            
            
'            With Field.DataRange.Offset(RowOffset, 0).Resize(RowCount, 1).Interior
'                .Color = GetPivotFieldColor(Field.name)
'            End With
'
'            With Field.LabelRange.Offset(RowOffset - 2, 0).Interior
'                .Color = GetPivotFieldColor(Field.name)
'            End With
        
        Next Field
    
'    End If
    
'    thisPivot.DataLabelRange.WrapText = True
'    thisPivot.RowRange.Resize(1, 1).WrapText = True
'    thisPivot.PageRange.Font.Size = 10
    
Exit Sub

ErrHandler:

    Debug.Print "FormatPivotColumns"
    Debug.Print Err.Description
    Err.Clear

End Sub


Private Sub UnitTest_GetPivotFieldNumberFormat()

    Debug.Print GetPivotFieldNumberFormat("a")
    
    Debug.Print GetPivotFieldNumberFormat("{$ Net Incurred}")

End Sub

Private Function GetPivotFieldNumberFormat(fieldName As String) As String

    On Error Resume Next
    
    Dim retVal As String
    retVal = "#,###.##"
    
    retVal = WorksheetFunction.VLookup(fieldName, Range(ListName_PivotFieldAttributes), 3, False)
    
    GetPivotFieldNumberFormat = retVal

End Function

Private Sub UnitTest_GetPivotFieldWidth()

    Debug.Print GetPivotFieldWidth("a")
    
    Debug.Print GetPivotFieldWidth("{$ Net Incurred}")

End Sub

Private Function GetPivotFieldWidth(fieldName As String) As Integer

    On Error Resume Next
    
    Dim retVal As Integer
    retVal = 20
    
    retVal = WorksheetFunction.VLookup(fieldName, _
                                        Range(ListName_PivotFieldAttributes), _
                                        2, False)
    
    GetPivotFieldWidth = retVal

End Function


Private Sub UnitTest_GetPivotFieldColor()

    Debug.Print GetPivotFieldColor("a")
    
    Debug.Print GetPivotFieldColor("{$ Net Incurred}")

End Sub

Private Function GetPivotFieldColor(fieldName As String) As Long

    On Error Resume Next
    
    Dim retVal As Long
    retVal = RGB(255, 255, 255)
    
    
    Dim r As Range
    Set r = Range(ListName_PivotFieldAttributes).Find(fieldName)
    
    If Not r Is Nothing Then
    
        retVal = r.Interior.Color
    
    End If
    
    GetPivotFieldColor = retVal

End Function

Public Sub SortPageFields(thissheet As Worksheet, thisPivot As PivotTable)

    Dim Field As PivotField
    For Each Field In thisPivot.PageFields
    
       
        Field.AutoSort xlAscending, Field.name
        
    Next Field

End Sub




Public Sub FormatOleObjects(thissheet As Worksheet)


    Dim rb As OLEObject
    For Each rb In thissheet.OLEObjects
        rb.Object.BackColor = RGB(217, 217, 217)
    Next


End Sub

Public Sub FormatStandardPivotTable(thissheet As Worksheet, thisPivot As PivotTable, ThisChartObject As ChartObject)

    On Error GoTo ErrHandler
    

    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
'    Dim IsFullFormat As Boolean
'    IsFullFormat = Left(thisSheet.name, 1) = "{"
 
 
'    If IsFullFormat Then
    
    
        If thisPivot Is Nothing Then
            Set thisPivot = thissheet.PivotTables(1)
        End If
    
        If ThisChartObject Is Nothing Then
            If thissheet.ChartObjects.count > 0 Then
                Set ThisChartObject = thissheet.ChartObjects(1)
            End If
        End If
        
    
        
     
        PreFormatAllPivotTables thissheet, thisPivot
     
'        If IsFullFormat Then
'
            SetGlobalPivotTableAttributes thissheet, thisPivot
'
'
'        End If
        
        FormatPivotColumns thissheet, thisPivot
            
        
        FormatOleObjects thissheet
        
            
        If Not ThisChartObject Is Nothing Then
    
    '        SyncStandardChartData ThisSheet, ThisPivot, ThisChartObject
    
'            If IsFullFormat Then
                FormatStandardChart thissheet, thisPivot, ThisChartObject
'            End If
    
        End If
        
        SetPrintArea thissheet, thisPivot
        thisPivot.TableRange2.Font.name = "Calibri"
        thisPivot.TableRange2.Font.Size = 10
        
        Dim ptRng As Range
        Range("A29:L29").Interior.Color = RGB(83, 141, 213)
        Dim tmpRange As Range
        Set tmpRange = thisPivot.PivotTables(1).RowRange
        tmpRange.Offset(-1, 0).Resize(1).RowHeight = 24
        'thissheet.Cells(thisPivot.PivotTables(1).RowRange.Row - 1).RowHeight = 24
        Set ptRng = thisPivot.DataBodyRange
        ptRng.Interior.ColorIndex = xlNone
        
'    End If
            
    Application.StatusBar = ""
   
Exit Sub

ErrHandler:

    Debug.Print "FormatStandardPivotTable"
    Debug.Print Err.Description
    Err.Clear

End Sub
Private Sub PreFormatAllPivotTables(thissheet As Worksheet, thisPivot As PivotTable)
    
    
    On Error GoTo ErrHandler
    
    
    Application.StatusBar = "Formating Pivot Table on " & thissheet.name
    ActiveWorkbook.ShowPivotTableFieldList = False
    
    If thisPivot.DataPivotField.Value <> " " Then
        thisPivot.DataPivotField.Value = " "
    End If
    
    thisPivot.RepeatItemsOnEachPrintedPage = True
    thisPivot.PreserveFormatting = True
    
'    'If there is more than one pivot table, can only set print titles on
'    'the left most one.
'    If ThisPivot.TableRange2.Column = 1 Then
'        ThisPivot.PrintTitles = True
'    Else
'        ThisPivot.PrintTitles = False
'    End If
    
    
Exit Sub
    
ErrHandler:

    Debug.Print "PreFormatAllPivotTables"
    Debug.Print Err.Description
    Err.Clear
    
End Sub

Public Sub FormatTrendPivotTable(thissheet As Worksheet, thisPivot As PivotTable, ThisChartObject As ChartObject)

    On Error GoTo ErrHandler
    


    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
    If thisPivot Is Nothing Then
        Set thisPivot = thissheet.PivotTables(1)
    End If

    PreFormatAllPivotTables thissheet, thisPivot

'    Dim IsFullFormat As Boolean
'    IsFullFormat = Left(thisSheet.name, 1) = "{"
'
'    If IsFullFormat Then
    
    
        SetGlobalPivotTableAttributes thissheet, thisPivot
         
'        ThisPivot.DataLabelRange.Offset(-1, 0).Resize(1, 1).Value = _
'            "Frequency"
'        ThisPivot.DataLabelRange.Offset(-1, -1).Resize(1, 1).Value = _
'            ThisPivot.RowFields(1).name
        
    
'    End If
    
    FormatPivotColumns thissheet, thisPivot
    
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    
    SetPrintArea thissheet, thisPivot

    Application.StatusBar = ""
    
Exit Sub

ErrHandler:

    Debug.Print "FormatTrendPivotTable"
    Debug.Print Err.Description
    Err.Clear

End Sub


Public Sub FormatLagAnalysisPivotTable(thissheet As Worksheet, _
                                        thisPivot As PivotTable, _
                                        ThisChartObject As ChartObject)

    On Error GoTo ErrHandler
    
    If thissheet Is Nothing Then
        Set thissheet = ActiveSheet
    End If
    
    If thisPivot Is Nothing Then
        Set thisPivot = thissheet.PivotTables(1)
    End If

    If ThisChartObject Is Nothing Then
        If thissheet.ChartObjects.count > 0 Then
            Set ThisChartObject = thissheet.ChartObjects(1)
        End If
    End If
    

    PreFormatAllPivotTables thissheet, thisPivot
   
'    Dim IsFullFormat As Boolean
'    IsFullFormat = Left(thisSheet.name, 1) = "{"
'
'    If IsFullFormat Then
'
        SetGlobalPivotTableAttributes thissheet, thisPivot
'
'    End If
    
    FormatPivotColumns thissheet, thisPivot
 
    FormatLagAnalysisChart thissheet, thisPivot, ThisChartObject
        
    thisPivot.TableRange2.Font.name = "Calibri"
    thisPivot.TableRange2.Font.Size = 10
    
    SetPrintArea thissheet, thisPivot
    
    Application.StatusBar = ""
    
Exit Sub

ErrHandler:

    Debug.Print "FormatLagAnalysisPivotTable"
    Debug.Print Err.Description
    Err.Clear

End Sub


Public Sub SortByAnalysisItem_AZ(sheet As Worksheet, Pivot As PivotTable)

    On Error GoTo ErrHandler

    If sheet Is Nothing Then
        Set sheet = ActiveSheet
    End If
    
    If Pivot Is Nothing Then
        Set Pivot = sheet.PivotTables(1)
    End If
    
    
    Dim AnalysisField As PivotField
    
    Set AnalysisField = Pivot.RowFields(1)
    
    AnalysisField.AutoSort xlAscending, AnalysisField.name
    
    'SetColumnSizes Sheet
 
Exit Sub

ErrHandler:

    Debug.Print "SortByAnalysisItem_AZ"
    Debug.Print Err.Description
    Err.Clear

    

End Sub
Public Sub SortByAnalysisItem_ZA(sheet As Worksheet, Pivot As PivotTable)

    On Error GoTo ErrHandler

    If sheet Is Nothing Then
        Set sheet = ActiveSheet
    End If
    
    If Pivot Is Nothing Then
        Set Pivot = sheet.PivotTables(1)
    End If
    
    
    Dim AnalysisField As PivotField
    
    Set AnalysisField = Pivot.RowFields(1)
    
    AnalysisField.AutoSort xlDescending, AnalysisField.name
    
    'SetColumnSizes Sheet
 
Exit Sub

ErrHandler:

    Debug.Print "SortByAnalysisItem_ZA"
    Debug.Print Err.Description
    Err.Clear
    

End Sub
Public Sub SortByAZ(sheet As Worksheet, Pivot As PivotTable, fieldName As String)
    
    On Error GoTo ErrHandler
    
    SortBy sheet, Pivot, fieldName, xlAscending

    
Exit Sub

ErrHandler:

    Debug.Print "SortByAZ"
    Debug.Print Err.Description
    Err.Clear

End Sub


Public Sub SortByZA(sheet As Worksheet, Pivot As PivotTable, fieldName As String)
    
    On Error GoTo ErrHandler
    
    SortBy sheet, Pivot, fieldName, xlDescending

Exit Sub

ErrHandler:

    Debug.Print "SortByZA"
    Debug.Print Err.Description
    Err.Clear
    
End Sub
Private Sub SortBy(sheet As Worksheet, Pivot As PivotTable, fieldName As String, Direction As Integer)

    On Error GoTo ErrHandler
   
    If sheet Is Nothing Then
        Set sheet = ActiveSheet
    End If
    
    If Pivot Is Nothing Then
        Set Pivot = sheet.PivotTables(1)
    End If
    
    
    Dim AnalysisField As PivotField
    
    Set AnalysisField = Pivot.RowFields(1)
    
    AnalysisField.AutoSort Direction, fieldName
    
    
Exit Sub

ErrHandler:

    Debug.Print "SortBy"
    Debug.Print Err.Description
    Err.Clear
    
    

End Sub


Public Sub RefreshAllPivotTables()

    On Error GoTo ErrHandler
    Application.Calculation = xlCalculationManual
    Dim currScrnUpdVal As Variant
    Dim currDispAlrtVal As Variant
    Dim currEnableEventsVal As Variant
    currScrnUpdVal = Application.ScreenUpdating
    currDispAlrtVal = Application.DisplayAlerts
    currEnableEventsVal = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    Application.StatusBar = "Refreshing Pivot Tables"
    
    Dim thissheet As Worksheet
    Dim thisPivot As PivotTable
    
    Dim QuickRefresh As Boolean
    QuickRefresh = False

'    If ActiveWorkbook.PivotCaches.count = 1 Then
'
'        Dim pc As PivotCache
'        Set pc = ActiveWorkbook.PivotCaches(1)
'
'        If pc.SourceData = ListName_PivotData Then
'
'            Application.StatusBar = "Quick Refresh"
'
'            pc.Refresh
'            pc.MissingItemsLimit = xlMissingItemsNone
'
'            QuickRefresh = True
'        End If
'
'    End If
        
    
    'ActiveWorkbook.RefreshAll
            
    For Each thissheet In ActiveWorkbook.Worksheets

        ActiveWorkbook.ShowPivotTableFieldList = False
        ActiveWindow.SplitColumn = 0
'        If Not QuickRefresh Then
'            Application.StatusBar = "Refreshing Pivot Tables on " & thissheet.name
'
''            For Each thisPivot In thisSheet.PivotTables
''
''                thisPivot.SourceData = ListName_PivotData
''                thisPivot.RefreshTable
''                thisPivot.PivotCache.MissingItemsLimit = xlMissingItemsNone
''
''
''            Next thisPivot
'
'            ActiveWorkbook.ShowPivotTableFieldList = False
'            ActiveWindow.SplitColumn = 0
'        End If
        If thissheet.PivotTables.count = 1 Then
            If thissheet.name = "Claim Trending" Then
'                On Error Resume Next
'                Worksheets(thissheet.name).Worksheet_PivotTableUpdate thissheet.PivotTables(1)
'                On Error GoTo 0
            Else
                PivotTableUpdateSyncChart thissheet, thissheet.PivotTables(1)
                SetPrintArea thissheet, thissheet.PivotTables(1)
            End If
        Else
            If thissheet.name = "WC Lag Analysis" Then
                On Error Resume Next
                Worksheets(thissheet.name).Worksheet_PivotTableUpdate thissheet.PivotTables(1)
                Worksheets(thissheet.name).InitializeWorksheet
                On Error GoTo 0
            End If
        End If
        ActiveWorkbook.ShowPivotTableFieldList = False
        ActiveWindow.SplitColumn = 0

'        If thissheet.name Like "WC*" Then
'            On Error Resume Next
'            For Each thisPivot In thissheet.PivotTables
'                Dim CoveragePivotField As PivotField
'                Set CoveragePivotField = thisPivot.PivotFields("Coverage")
'                CoveragePivotField.ClearAllFilters
'                CoveragePivotField.CurrentPage = "Workers Compensation"
'                Set CoveragePivotField = Nothing
'            Next
'            On Error GoTo 0
'        End If
    
    Next thissheet
    
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal
    
Exit Sub

ErrHandler:

    Debug.Print "RefreshAllPivotTables"
    Debug.Print Err.Description
    Err.Clear
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = currScrnUpdVal
    Application.DisplayAlerts = currDispAlrtVal
    Application.EnableEvents = currEnableEventsVal
    
End Sub

Public Sub PivotTableUpdateSyncChart(ByVal PivotSheet As Worksheet, ByVal Target As PivotTable)
    On Error GoTo ExitSub
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    'FormatStandardPivotTable Me, Me.PivotTables(1), Me.ChartObjects(1)
    'SyncStandardChartData Me, Me.PivotTables(1), Me.ChartObjects(1)
    Dim myCharts As ChartObjects
    Set myCharts = PivotSheet.ChartObjects
    If myCharts.count > 0 Then
        Dim NbrRowsData As Long
        Dim ValuesStartRow As Integer
        Dim ValuesStartCol As Integer
        ValuesStartRow = PivotSheet.Range("$AA$32").Row
        ValuesStartCol = PivotSheet.Range("$AA$32").Column

        
        NbrRowsData = Target.RowRange.count - 2
        If PivotSheet.name = "When" Then
            If PivotSheet.Range("aa1").Value = 1 Then
                If NbrRowsData > 12 Then
                    ValuesStartRow = ValuesStartRow + NbrRowsData - 12
                End If
            End If
        End If
        If NbrRowsData > 12 Then NbrRowsData = 12
        
        Dim myChartObject As ChartObject
        Set myChartObject = PivotSheet.ChartObjects(1)
        Dim ChartOnPage As Chart
        Set ChartOnPage = myChartObject.Chart

        Dim ValuesRange As String
        ValuesRange = "='" & PivotSheet.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(1).XValues = ValuesRange
        ChartOnPage.SeriesCollection(2).XValues = ValuesRange
        ValuesStartCol = ValuesStartCol + 1
        ValuesRange = "='" & PivotSheet.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(1).Values = ValuesRange
        ValuesStartCol = ValuesStartCol + 1
        ValuesRange = "='" & PivotSheet.name & "'!" & _
            Cells(ValuesStartRow, ValuesStartCol).Address & ":" & _
            Cells(ValuesStartRow + NbrRowsData - 1, ValuesStartCol).Address
        ChartOnPage.SeriesCollection(2).Values = ValuesRange

    End If

ExitSub:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True

End Sub



Attribute VB_Name = "UI_Sheet"
Option Explicit


Public Sub SetLookupSheetVisibility(Visibility As XlSheetVisibility)

    Dim thissheet As Worksheet
    For Each thissheet In Worksheets
    
        If Right(thissheet.name, 7) = "Lookup}" Then
        
            thissheet.Visible = Visibility
            
        End If
    
    Next
    
End Sub
Attribute VB_Name = "frmComments"
Attribute VB_Base = "0{A105ABFF-B503-4932-8DB7-0A758B4C6D66}{68F04028-7B15-4385-9130-A703D91141F6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Comments As String
Public boolSave As Boolean

Private Sub cbCancel_Click()

    boolSave = False
    Me.Hide
    
End Sub

Private Sub cbSave_Click()

    Comments = Me.tbComments.Value
    boolSave = True
    Me.Hide
    
End Sub

Private Sub tbComments_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    
    If KeyCode = vbKeyReturn Then
        Me.tbComments.Value = Me.tbComments.Value & Chr(13)
        KeyCode = 0
    End If

End Sub

Private Sub UserForm_Activate()

    Me.tbComments.Value = Comments
    Me.tbComments.SelStart = 0
    
End Sub

Attribute VB_Name = "frmLoadData"
Attribute VB_Base = "0{1B2C5BB5-1DBE-45C1-A9D3-7A2F286EF6F5}{5E379668-3E03-4A34-91D3-2A0D1123FF8C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public DoIt As Boolean


Private Sub btnCancel_Click()


    DoIt = False
   
    Me.Hide
    

End Sub

Private Sub btnLoadData_Click()

    DoIt = True
   
    Me.Hide
    

End Sub


Private Sub tbEffectiveDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)

    Dim ContentsSheet As Worksheet
    
    
    
    
    Set ContentsSheet = Worksheets(SheetName_Contents)
    
    If IsDate(tbEffectiveDate.Value) Then
        ContentsSheet.Range(Address_Effective_Date).Value = "'" & Format(tbEffectiveDate.Value, "MMMM dd, yyyy")
        tbEffectiveDate.Value = Format(tbEffectiveDate.Value, "MMMM dd, yyyy")
    Else
        ContentsSheet.Range(Address_Effective_Date).Value = "'" & Format(Now, "MMMM dd, yyyy")
        tbEffectiveDate.Value = Format(Now, "MMMM dd, yyyy")
    End If
End Sub


Private Sub tbExpirationDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)

    Dim ContentsSheet As Worksheet
    
    
    
    
    Set ContentsSheet = Worksheets(SheetName_Contents)
    
    If IsDate(tbExpirationDate.Value) Then
        ContentsSheet.Range(Address_Expiration_Date).Value = "'" & Format(tbExpirationDate.Value, "MMMM dd, yyyy")
        tbExpirationDate.Value = Format(tbExpirationDate.Value, "MMMM dd, yyyy")
    Else
        ContentsSheet.Range(Address_Expiration_Date).Value = "'" & Format(Now, "MMMM dd, yyyy")
        tbExpirationDate.Value = Format(Now, "MMMM dd, yyyy")
    End If
End Sub


Private Sub tbAsOfDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)

    Dim ContentsSheet As Worksheet
    
    
    
    
    Set ContentsSheet = Worksheets(SheetName_Contents)
    
    If IsDate(tbAsOfDate.Value) Then
        ContentsSheet.Range(Address_As_Of_Date).Value = "'" & Format(tbAsOfDate.Value, "MMMM dd, yyyy")
        tbAsOfDate.Value = Format(tbAsOfDate.Value, "MMMM dd, yyyy")
    Else
        ContentsSheet.Range(Address_As_Of_Date).Value = "'" & Format(Now, "MMMM dd, yyyy")
        tbAsOfDate.Value = Format(Now, "MMMM dd, yyyy")
    End If
End Sub

Attribute VB_Name = "frmSelWBtoLoad"
Attribute VB_Base = "0{EC1EFE43-EC64-45F8-B930-9620E734B870}{9060F978-F2F5-46B4-94B0-9537B376B21B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Public SelectedWorkbookToLoad As String


Private Sub btnCancel_Click()

    SelectedWorkbookToLoad = ""
    Me.Hide
    
End Sub

Private Sub btnOK_Click()

    SelectedWorkbookToLoad = cbOpenWorkbooks.Value
    Me.Hide
    
End Sub

' InQuest injected base64 decoded content
' y(^z
' B'v'
' D.jX
' bzWK
' bzWMjg
' ,"w+zg
' 'r'^
' QbzWMjg
' abzWMjg
' Kk*.
' 	e>+

INQUEST-PP=macro
