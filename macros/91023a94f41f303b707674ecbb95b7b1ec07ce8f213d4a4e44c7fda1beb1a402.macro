Attribute VB_Name = "AirNavigation"
Option Explicit

Private Const RadiusEarthNm As Double = 3440.064795 ' In Nautical Miles
Private Const RadiusEarthSm As Double = 3958.755866 ' In Statute Miles
Private Const RadiusEarthKm As Double = 6371 ' In Kilometers Miles
Private Const cPi As Double = 3.14159265358979

Function GrtCircleDist(Lat1 As Double, Long1 As Double, Lat2 As Double, Long2 As Double, Units As String) As Double
' All Lat & Long values entered in sheet cells as decimal degrees

Dim X As Long
Dim Delta As Double
X = 1

' Calculate the central spherical angle
Delta = ((2 * ArcSin(Sqr((Sin((deg2rad(Lat1) - deg2rad(Lat2)) / 2) ^ 2) + _
    Cos(deg2rad(Lat1)) * Cos(deg2rad(Lat2)) * (Sin((deg2rad(Long1) - deg2rad(Long2)) / 2) ^ 2)))))
 
' Get distance by Unit (NM, KM or SM)
        Select Case Units
            Case "NM"
                GrtCircleDist = Delta * RadiusEarthNm
            Case "KM"
                GrtCircleDist = Delta * RadiusEarthKm
            Case Else
                GrtCircleDist = Delta * RadiusEarthSm
            End Select

End Function
Function deg2rad(ByVal deg As Double) As Double
    deg2rad = (deg * cPi / 180)
End Function
Function ArcSin(X As Double) As Double
    ' Custom ArcSin function, ArcSin not built into VBA
    ArcSin = Atn(X / Sqr(-X * X + 1))
End Function

Function DepartureHdg(Lat1 As Double, Long1 As Double, Lat2 As Double, Long2 As Double) As Double

Dim d2r As Double
d2r = cPi / 180#
Dim r As Double

    Lat1 = d2r * Lat1
    Lat2 = d2r * Lat2
    Long1 = d2r * Long1
    Long2 = d2r * Long2
    
    DepartureHdg = WorksheetFunction.Atan2(Cos(Lat1) * Sin(Lat2) - Sin(Lat1) * Cos(Lat2) * Cos(Long1 - Long2), Sin(Long2 - Long1) * Cos(Lat2)) / d2r
    
    If DepartureHdg < 0 Then DepartureHdg = DepartureHdg + 360
    
End Function

Function num2degreedec(ByVal degreenum As Double, CH As String) As Double   'Converts 4 to 7 digit integer to degrees dicimal (242525 ---> 24.42166667)

Dim numlength As Integer
'numlength = Int(degreenum)
numlength = Len(Split(degreenum, ".")(0))

Select Case numlength
    Case Is < 4 'Less that n digits shows an error
        'MsgBox "Coordinated must be 4 to 7 digits only"
    Case 4
        degreenum = degreenum * 100
        num2degreedec = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case 5
        degreenum = degreenum * 10
        num2degreedec = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case 6
        num2degreedec = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case 7
        num2degreedec = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case Is > 7
        'MsgBox "Coordinated must be 4 to 7 digits only"
    End Select
    
    If UCase(CH) = "S" Or UCase(CH) = "W" Then
        num2degreedec = num2degreedec * -1
    End If

End Function

Function num2ddmmss(ByVal degreenum As Double) As Double   'Converts 4 to 7 digit integer to degrees dicimal (242525 ---> 24.42166667)

Dim numlength As Integer
numlength = Len(Split(degreenum, ".")(0))

Select Case numlength
    Case Is < 4
        'MsgBox "Coordinated must be 4 to 7 digits only"
    Case 4
        degreenum = degreenum * 100
        num2ddmmss = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case 5
        degreenum = degreenum * 10
        num2ddmmss = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case 6
        num2ddmmss = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case 7
        num2ddmmss = Int(degreenum / 10000) + (degreenum - (Int(degreenum / 10000) * 10000)) / 100 / 60
    Case Is > 7
        'MsgBox "Coordinated must be 4 to 7 digits only"
    End Select
    num2ddmmss = num2ddmmss / 24
End Function

Function degmmmm2degdec(ByVal degmmmm As Double, CH As String) As Double
Dim numlength As Integer

        degmmmm2degdec = Int(degmmmm) + (degmmmm - Int(degmmmm)) / 60 * 100

    If UCase(CH) = "S" Or UCase(CH) = "W" Then
        degmmmm2degdec = degmmmm2degdec * -1
    End If

End Function
Attribute VB_Name = "AircraftDataForm"
Attribute VB_Base = "0{DF9B5549-21BE-452E-A463-1EE8FA617E92}{DBBFF0B7-A46C-4F95-A91F-D48C5CD48E3A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim currentrow As Long, lastRow As Long, sh As Worksheet 'Global variables


Private Sub UserForm_Initialize()
    currentrow = 4
    txbAircraftID.SetFocus

End Sub
Private Sub cmdClear_Click()
    Call resetAircraftForm
End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub


Private Sub cmdSearch_Click()

Set sh = ThisWorkbook.Sheets("Aircraft Data")
Dim i As Long

lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

If txbAircraftID.Value = "" Then
        MsgBox "Enter the Aircraft number you wish to search for!"
            txbAircraftID.SetFocus
        Exit Sub
End If

For i = 3 To lastRow
    If Right(sh.Cells(i, 2), 3) <> UCase(txbAircraftID.Value) And i = lastRow Then
            If Trim(sh.Cells(i, 2)) <> UCase(txbAircraftID.Value) And i = lastRow Then
                MsgBox "Aircraft not found!"
            End If
    End If

    If Right(sh.Cells(i, 2), 3) = UCase(txbAircraftID.Value) Or Trim(sh.Cells(i, 2)) = UCase(txbAircraftID.Value) Then
    
        txbAircraftID.Value = sh.Cells(i, 2)
        txbType.Value = sh.Cells(i, 3)
        
        If txbType.Value = "B412" Then
                txbBOW.Value = sh.Cells(i, 6)
            Else
                txbBOW.Value = sh.Cells(i, 5)
        End If
        
        If txbType.Value = "B412" Then
                txbArm_mm.BackColor = &H80000004 'Background grey
                txbArm_mm.Enabled = False
                txbArm_mm = ""
        Else
                txbArm_mm.BackColor = &H80000005 'Background white
                txbArm_mm.Enabled = True
                txbArm_mm = sh.Cells(i, 7)
        End If
       
        If txbType.Value = "B412" Then
                txbArm_in.BackColor = &H80000005 'Background white
                txbArm_in.Enabled = True
                txbArm_in = sh.Cells(i, 8)
        Else
                txbArm_in.BackColor = &H80000004 'Background grey
                txbArm_in.Enabled = False
                txbArm_in = ""
        End If
        
            If txbType.Value = "B412" Then
                Opt_Lbs.Value = True
            Else
                Opt_Kgs.Value = True
            End If
        
        currentrow = i 'capture the value of the currentrow
        Exit For
    End If
Next i

End Sub
Private Sub cmdFwd_Click()

Set sh = ThisWorkbook.Sheets("Aircraft Data")
lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

If currentrow = lastRow Then
    MsgBox "You have reached the last record! No more data.", , "Search Results"
Exit Sub
End If

currentrow = currentrow + 1

        txbAircraftID.Value = sh.Cells(currentrow, 2)
        txbType.Value = sh.Cells(currentrow, 3)
        
        If txbType.Value = "B412" Then
                txbBOW.Value = sh.Cells(currentrow, 6)
            Else
                txbBOW.Value = sh.Cells(currentrow, 5)
        End If
        
        If txbType.Value = "B412" Then
                txbArm_mm.BackColor = &H80000004 'Background grey
                txbArm_mm.Enabled = False
                txbArm_mm = ""
        Else
                txbArm_mm.BackColor = &H80000005 'Background white
                txbArm_mm.Enabled = True
                txbArm_mm = sh.Cells(currentrow, 7)
        End If
       
        If txbType.Value = "B412" Then
                txbArm_in.BackColor = &H80000005
                txbArm_in.Enabled = True
                txbArm_in = sh.Cells(currentrow, 8)
        Else
                txbArm_in.BackColor = &H80000004
                txbArm_in.Enabled = False
                txbArm_in = ""
        End If
        
            If txbType.Value = "B412" Then
                Opt_Lbs.Value = True
            Else
                Opt_Kgs.Value = True
            End If
    
End Sub

Private Sub cmdBack_Click()

Set sh = ThisWorkbook.Sheets("Aircraft Data")
lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

If currentrow = 4 Then
    MsgBox "You have reached the first record! No more data.", , "Search Results"
Exit Sub
End If

currentrow = currentrow - 1

        txbAircraftID.Value = sh.Cells(currentrow, 2)
        txbType.Value = sh.Cells(currentrow, 3)
        
        If txbType.Value = "B412" Then
                txbBOW.Value = sh.Cells(currentrow, 6)
            Else
                txbBOW.Value = sh.Cells(currentrow, 5)
        End If
        
        If txbType.Value = "B412" Then
                txbArm_mm.BackColor = &H80000004 'Background grey
                txbArm_mm.Enabled = False
                txbArm_mm = ""
        Else
                txbArm_mm.BackColor = &H80000005 'Background white
                txbArm_mm.Enabled = True
                txbArm_mm = sh.Cells(currentrow, 7)
        End If
       
        If txbType.Value = "B412" Then
                txbArm_in.BackColor = &H80000005 'Background white
                txbArm_in.Enabled = True
                txbArm_in = sh.Cells(currentrow, 8)
        Else
                txbArm_in.BackColor = &H80000004 'Background grey
                txbArm_in.Enabled = False
                txbArm_in = ""
        End If
        
            If txbType.Value = "B412" Then
                Opt_Lbs.Value = True
            Else
                Opt_Kgs.Value = True
            End If
    
End Sub


Private Sub cmdEdit_Click()

Set sh = ThisWorkbook.Sheets("Aircraft Data")
Dim i As Long
Dim replace As Long
Dim rowfound As Long

lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

'Validate entry fields

    If Me.txbAircraftID.Value = "" Then
        MsgBox "Aircraft ID cannot be blank."
    Exit Sub
    End If
    
    If Me.txbType.Value = False Then
        MsgBox "Type must be AW139, B412 or H135"
    Exit Sub
    End If
    
    If Me.txbBOW.Value = False Then
        MsgBox "Please enter aircraft weight."
    Exit Sub
    
    End If
    
    If Me.txbType.Value = "AW139" And txbArm_mm = False Then
        MsgBox "Please enter the aircraft arm in mm."
    Exit Sub
    End If
    
    If Me.txbType.Value = "B412" And txbArm_in = False Then
        MsgBox "Please enter the aircraft arm in inches."
    Exit Sub
    End If
    
'Checks for duplicate ID Numbers

For i = 3 To lastRow
    If Trim(sh.Cells(i, 2)) = Me.txbAircraftID.Value Then
        currentrow = i 'capture the value of the currentrow
        existingrecord = True
            Exit For
    End If
Next i
     
    If existingrecord = True Then
        answer = MsgBox("Are you sure you want to edit this record?", vbYesNo + vbQuestion, "Edit Aircraft")
        If answer = vbYes Then
            sh.Unprotect Password:="VFRPlanner2019"
            
                sh.Range("B" & currentrow).Value = Me.txbAircraftID.Value 'Aircraft
                sh.Range("C" & currentrow).Value = Me.txbType.Value 'Type
                If Me.txbType.Value = "B412" Then
                    sh.Range("F" & currentrow).Value = Me.txbBOW.Value 'BOW lbs
                Else
                    sh.Range("E" & currentrow).Value = Me.txbBOW.Value 'BOW kgs
                End If
                
                If Me.txbType.Value = "B412" Then
                sh.Range("H" & currentrow).Value = Me.txbArm_in.Value 'Arm inches
                Else
                sh.Range("G" & currentrow).Value = Me.txbArm_mm.Value 'Arm kg/mm
                End If
                
            MsgBox "The aircraft " & Me.txbAircraftID.Value & " was updated", vbInformation, "Update"
        Else
            Exit Sub
        
        End If
    End If
    
    sh.Protect Password:="VFRPlanner2019"
    Call resetAircraftForm
    ThisWorkbook.Save

End Sub
Attribute VB_Name = "DFR"
Option Explicit

Sub DFR_CopyPaste_Loop()

 ' Get the worksheets
    Dim shRead As Worksheet
    Set shRead = ThisWorkbook.Worksheets("Waypoints")
    
    Dim shWrite As Worksheet
    Set shWrite = ThisWorkbook.Worksheets("DFR-1")
    
    Dim lastRow As Long
    lastRow = shRead.Range("B" & Application.Rows.Count).End(xlUp).row 'Last row with data!
    
    ' Get the range to copy FROM
    Dim rg As Range
    Set rg = shRead.Range("B4:K" & lastRow)
    
        With shWrite
        ' Clear previous data in destination worksheet
            shWrite.Cells.ClearContents
        End With


Dim i As Long, row As Long
    row = 1
    For i = 4 To lastRow
        
        If rg.Cells(i, 5).Value2 = "Route" Or i = 1 Then
            
            ' Copy using Range.Copy
            shRead.Range("A" & row & ":K" & row).Copy
            shWrite.Range("A" & row).PasteSpecial xlPasteValues
            
            ' move to the next output row
            row = row + 1
            
        End If
        
    Next i
    

End Sub
Attribute VB_Name = "Garmin_DB_Export"
Option Explicit

Sub ExportToGarminFormat()

Dim newWB As Workbook
Dim newS As Worksheet

Dim ExportFile As String
Dim ws As Worksheet
Set ws = ThisWorkbook.Sheets("Waypoints")
Dim r As Long
Dim lastRow As Long
Dim newWBname As String
Dim header1 As String, header2 As String, header3 As String, header4 As String, headerDate As String, ZuluTime As String, headerTime As String
Dim Footer1 As String, footer2 As String

newWBname = ActiveWorkbook.Path & "\" & "Garmin-DB-" & Format(Now, "dd-mm-yyyy")
header1 = ws.Range("Q1").Value
header2 = ws.Range("R1").Value
header3 = "<created>2014-06-09T11:24:34Z</created>"
ZuluTime = DateAdd("h", -4, Now())
headerDate = Format(Now(), "yyyy-mm-dd")
headerTime = Format(ZuluTime, "hh:mm:ss")
Footer1 = "</waypoint-table>"
footer2 = "</flight-plan>"

Application.ScreenUpdating = False

lastRow = ws.Range("B" & Application.Rows.Count).End(xlUp).row 'Find Last row with data

ws.Range("K3:K" & lastRow).Copy
        
'***************************************************************************************************

'Create a new file that will receive the data


    Set newWB = Workbooks.Add
    
    With newWB
        Set newS = newWB.Sheets("Sheet1")
        Sheets("Sheet1").Name = "Waypoints"
        newS.Range("A1").Value = header1
        newS.Range("A2").Value = header2
        newS.Range("A3").Value = "<created>" & headerDate & "T" & headerTime & "Z" & "</created>"
        newS.Range("A4").Value = "<waypoint-table>"
        newS.Range("A5").PasteSpecial Paste:=xlPasteValues
        newS.Range("A1").Select
        lastRow = newS.Range("A" & Application.Rows.Count).End(xlUp).row 'Find Last row with data
        newS.Range("A" & lastRow).Value = Footer1
        lastRow = newS.Range("A" & Application.Rows.Count).End(xlUp).row + 1 'Find Last row with data
        newS.Range("A" & lastRow).Value = footer2
        
    End With
    
'Save the new workbook
    With newWB
        .SaveAs Filename:=newWBname, FileFormat:=xlUnicodeText, CreateBackup:=False
        .Close
    End With

On Error GoTo ErrorFound

Set ws = ThisWorkbook.Sheets("Waypoints")
ws.Range("A1").Select

    MsgBox "A New Garmin Export File has been created" & vbNewLine & "The file name is:  Garmin-DB-" & Format(Now, "dd-mm-yyyy"), vbInformation, "Export"

ErrorFound:

    ws.Protect Password:="VFRPlanner2019"
    Application.ScreenUpdating = True
    
    Exit Sub
End Sub


Function wsExists(wsName As String) As Boolean
    Dim ws: For Each ws In Sheets
    wsExists = (wsName = ws.Name): If wsExists Then Exit Function
    Next ws
End Function


Attribute VB_Name = "Home_Checkboxes"
Option Explicit



Sub clearCheckBoxes()

    Dim fpsheet As Worksheet
    Dim chkBox As Excel.CheckBox
    Set fpsheet = ThisWorkbook.Sheets("Flight Planning")

    For Each chkBox In ActiveSheet.CheckBoxes
        chkBox.Value = xlOff
    Next chkBox
        
End Sub

Sub ClearOffshoreFuel()

    Dim fpsheet As Worksheet
    Dim Ctables As Worksheet
    Dim chkBox As Excel.CheckBox
    Set fpsheet = ThisWorkbook.Sheets("Flight Planning")
    Set Ctables = ThisWorkbook.Sheets("Calculation Tables")

    If Ctables.Range("V10").Value = True Then
    fpsheet.Range("W41:X42").ClearContents
    
    End If
    
End Sub
Attribute VB_Name = "Home_Fuel"
'Sub oneWayfuel()
'
'Dim r As Long
'Dim Fuel As Double
'Dim destination As String
'Dim sh As Worksheet
'Set sh = ThisWorkbook.Worksheets("Flight Planning")
'
'r = 91
'Fuel = sh.Range("BG" & r).Value
'destination = sh.Range("W38").Value
'
'Do While sh.Range("AL" & r).Value <> destination
'    r = r + 1
'    Fuel = Fuel + sh.Range("BG" & r).Value
'    Debug.Print Fuel
'Loop
'
'End Sub


'Function tripfuel(Fuel As Double, destination As String) As Double
'
'Dim r As Long
'Dim sh As Worksheet
'Set sh = ThisWorkbook.Worksheets("Flight Planning")
'
'r = 91
'
'Do While sh.Range("AL" & r).Value <> destination
'    r = r + 1
'    Fuel = Fuel + sh.Range("BH" & r).Value
'    Debug.Print Fuel
'Loop
'
'tripfuel = Fuel
'
'End Function
'
Attribute VB_Name = "Home_HelpCaptions"
Option Explicit

Sub cbhelp_Show()
    Dim Shhome As Worksheet
    Dim HelpShapes()
    Set Shhome = ThisWorkbook.Worksheets("Flight Planning")
    HelpShapes = Array("GroupHelp1", "GroupHelp2", "GroupHelp3")
    
    With Shhome
        If Shhome.Range("AG42").Value = True Then
            .Shapes("GroupHelp1").Visible = True
            .Shapes("GroupHelp2").Visible = True
            .Shapes("GroupHelp3").Visible = True
            .Shapes("GroupHelp4").Visible = True
            .Shapes("GroupHelp5").Visible = True
            .Shapes("GroupHelp6").Visible = True
            .Shapes("GroupHelp7").Visible = True
            .Shapes("GroupHelp8").Visible = True
            .Shapes("RedFrame1").Visible = True
            .Shapes("RedFrame2").Visible = True
            .Shapes("RedFrame3").Visible = True
            .Shapes("RedFrame4").Visible = True
            .Shapes("RedFrame5").Visible = True
            .Shapes("RedFrame6").Visible = True
            .Shapes("RedFrame7").Visible = True
            .Shapes("RedFrame8").Visible = True
            
        Else
            .Shapes("GroupHelp1").Visible = False
            .Shapes("GroupHelp2").Visible = False
            .Shapes("GroupHelp3").Visible = False
            .Shapes("GroupHelp4").Visible = False
            .Shapes("GroupHelp5").Visible = False
            .Shapes("GroupHelp6").Visible = False
            .Shapes("GroupHelp7").Visible = False
            .Shapes("GroupHelp8").Visible = False
            .Shapes("RedFrame1").Visible = False
            .Shapes("RedFrame2").Visible = False
            .Shapes("RedFrame3").Visible = False
            .Shapes("RedFrame4").Visible = False
            .Shapes("RedFrame5").Visible = False
            .Shapes("RedFrame6").Visible = False
            .Shapes("RedFrame7").Visible = False
            .Shapes("RedFrame8").Visible = False
        End If
    End With
    
End Sub

Attribute VB_Name = "Import_Export"
Option Explicit

Sub ExportWaypoints()

Dim newWB As Workbook
Dim newS As Worksheet

Dim ExportFile As String
Dim ws As Worksheet
Set ws = ThisWorkbook.Sheets("Waypoints")
Dim lastRow As Long
Dim newWBname As String
newWBname = ActiveWorkbook.Path & "\" & "Waypoints_Export_" & Format(Now, "dd-mm-yyyy")

Application.ScreenUpdating = False
lastRow = ws.Range("B" & Application.Rows.Count).End(xlUp).row 'Find Last row with data

    ws.Range("B3:H" & lastRow).Copy

'Create a new file that will receive the data
    Set newWB = Workbooks.Add
    With newWB
        Set newS = newWB.Sheets("Sheet1")
        Sheets("Sheet1").Name = "Waypoints"
        newS.Range("A1").PasteSpecial Paste:=xlPasteValues
        newS.Range("A1").Select
    End With
    
'Save the new workbook
    With newWB
        .SaveAs Filename:=newWBname, FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
        .Close
    End With

On Error GoTo ErrorFound


'Workbooks("ADA Flight Planner v1.1.6.dev.xlsm").Activate
Set ws = ThisWorkbook.Sheets("Waypoints")
ws.Range("A1").Select

    MsgBox "All Waypoints exported to a new file," & vbNewLine & "File name is:  Waypoints_Export_" & Format(Now, "dd-mm-yyyy"), vbInformation, "Export"

ErrorFound:

    ws.Protect Password:="VFRPlanner2019"
    Application.ScreenUpdating = True
    
    Exit Sub
End Sub

Sub ImportWaypoint()
    Dim ws As Worksheet
    Dim wsSource As Worksheet
    Dim wkbCurrent As Workbook
    Dim wkbSource As Workbook
    Dim rngSource As Range, rngDest As Range
    Dim Destws As Worksheet
    Dim PrevRng As Range
    Dim lastRow As Long
    Dim Result As Long
    Dim Password As String
    Set wkbCurrent = ActiveWorkbook
    
    Result = MsgBox("WARNING - This will replace the entire Waypoints Database" & vbNewLine & "This cannot be undone, are you sure you wish to proceed?", vbOKCancel + vbExclamation)
        If Result = vbCancel Then
            Exit Sub
        End If
    
    Password = InputBox("Please enter password below", "Password")
        If Password <> "2030" Then
            MsgBox "Incorrect Password"
            Exit Sub
            Else
        End If
        
    ActiveSheet.Unprotect Password:="VFRPlanner2019"
    
    Set Destws = wkbCurrent.Worksheets("Waypoints")
    'Clear previous data from destination worksheet
        lastRow = Destws.Range("B" & Destws.Rows.Count).End(xlUp).row
        Set PrevRng = Destws.Range("B3:H" & lastRow)
        PrevRng.ClearContents
        Set rngDest = Destws.Range("B3")
        
    With Application.FileDialog(msoFileDialogOpen)
        .Filters.Clear
        .Filters.Add "Excel 2007-13", "*.xlsx; *.xlsm"
        .AllowMultiSelect = False
        .Show
        
        Application.ScreenUpdating = False
        
        If .SelectedItems.Count > 0 Then
            Workbooks.Open .SelectedItems(1)
            Set wkbSource = ActiveWorkbook
            Set wsSource = wkbSource.Sheets("Waypoints")
            lastRow = wsSource.Range("A" & Application.Rows.Count).End(xlUp).row 'Find Last row with data
            Set rngSource = wsSource.Range("A1:H" & lastRow)
            wkbCurrent.Activate
            
            rngSource.Copy
            rngDest.PasteSpecial Paste:=xlPasteValues
            'Format incoming data
            Destws.Range("C3:C" & lastRow).NumberFormat = "0.00000"
            Destws.Range("D3:E" & lastRow).NumberFormat = "0.00000"
            Destws.Range("B3").Select
            .Application.CutCopyMode = False
            wkbSource.Close False
            ActiveSheet.Protect Password:="VFRPlanner2019"
        End If
        
    End With
    
    Application.ScreenUpdating = True

End Sub


Function wsExists(wsName As String) As Boolean
    Dim ws: For Each ws In Sheets
    wsExists = (wsName = ws.Name): If wsExists Then Exit Function
    Next ws
End Function



Attribute VB_Name = "Lock_Unlock"
Sub b_Lock_Hide_Sheets()

Application.ScreenUpdating = False

    With ThisWorkbook
        .Sheets("Calculation Tables").Visible = xlSheetVeryHidden
        .Sheets("DFR-1").Visible = xlSheetHidden
        .Sheets("WX").Visible = xlSheetVeryHidden
        .Sheets("H135 W&B Data").Visible = xlSheetVeryHidden
        .Sheets("B412 W&B Data").Visible = xlSheetVeryHidden
        .Sheets("AW139 W&B Data").Visible = xlSheetVeryHidden
        .Sheets("CG Charts").Visible = xlSheetVeryHidden
        .Sheets("W&B Data Check").Visible = xlSheetHidden
        .Sheets("Formulas").Visible = xlSheetVeryHidden
        .Sheets("GoM").Visible = xlSheetHidden
        .Sheets("Airport DB").Visible = xlSheetHidden
    End With
    
    Dim ws As Worksheet
    
    For Each ws In ActiveWorkbook.Worksheets
        ws.Protect Password:="VFRPlanner2019"
    Next ws
        
    With ThisWorkbook
        .Sheets("WX").Unprotect Password:="VFRPlanner2019"
    End With
    
    Call HideRibbons
        
Application.ScreenUpdating = True

End Sub


Sub a_Unlock_UnHide()    'Password Protected Macro

    Dim Password As String
    
    Password = InputBox("Please enter password below", "Password")
        If Password <> "dogsblx" Then
            MsgBox "Incorrect Password"
            Exit Sub
            Else
        End If
        
    Application.ScreenUpdating = False

    Dim ws As Worksheet
        
        For Each ws In ActiveWorkbook.Worksheets
                
        ws.Visible = xlSheetVisible
        ws.Unprotect Password:="VFRPlanner2019"
            
        Next ws
        
        Call ShowRibbons
        
    Application.ScreenUpdating = True

End Sub

Sub HideRibbons()

Application.ExecuteExcel4Macro "show.toolbar(""Ribbon"",False)"
Application.DisplayStatusBar = False


End Sub
Sub ShowRibbons()

Application.ExecuteExcel4Macro "show.toolbar(""Ribbon"",True)"
Application.DisplayStatusBar = True

End Sub

Attribute VB_Name = "PasswordForm"
Attribute VB_Base = "0{EA481496-EB3B-4C12-8D98-0FDF2EBA1589}{67C65808-6CF6-4C9C-90DC-BF10A9A920AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdEnter_Click()

    Dim Password As String
    
        If txbPassword.Value <> "ADAOps" Then
            MsgBox "Incorrect Password"
            Exit Sub
            Else
            Unload Me
            AircraftDataForm.Show
        
        End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "PilotDataEntry"
Attribute VB_Base = "0{530643FE-8789-4DC6-BE51-34B57CA2A010}{DB38C480-FB78-4FF5-9064-81C5188774A1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Dim currentrow As Long  'declares the global variable
Dim lastRow As Long
Private rngFound As Range



Private Sub UserForm_Activate()
    With Me.cbxDesignation
        .Clear
        .AddItem ""
        .AddItem "Co-Pilot"
        .AddItem "Captain"
        .AddItem "Line Trainer"
        .AddItem "TRI"
        .AddItem "TRE"
        .AddItem "Chief Pilot"
        .AddItem "Ops Director"
    End With
    txbLastName.SetFocus
    currentrow = 3
    
End Sub

Private Sub UserForm_Initialize()
    currentrow = 3
    txbFirstName.SetFocus
End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub cmdDelete_Click()

Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")

answer = MsgBox("Are you sure you wish to delete this record?", vbYesNo + vbQuestion, "Delete Record?")
    If answer = vbYes Then
    sh.Unprotect Password:="VFRPlanner2019"
        sh.Range("C" & currentrow, "J" & currentrow).ClearContents
    End If
    Call SortPilotData
        sh.Protect Password:="VFRPlanner2019"
        MsgBox "Captain " & Me.txbLastName.Value & "'s record was deleted.", vbInformation
    Call resetPilotForm
    
End Sub

Private Sub cmdFwd_Click()

Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")

lastRow = sh.Range("C" & Application.Rows.Count).End(xlUp).row

If currentrow = lastRow Then
MsgBox "You have reached the last record! No more data.", , "Search Results"
Exit Sub
End If

currentrow = currentrow + 1

    txbFirstName.Value = sh.Cells(currentrow, 3)
    txbLastName.Value = sh.Cells(currentrow, 4)
    txbIDNum.Value = sh.Cells(currentrow, 6)
    cbxDesignation.Value = sh.Cells(currentrow, 7)
    txbWeight.Value = sh.Cells(currentrow, 8)
    
End Sub

Private Sub cmdBack_Click()
Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")

If currentrow = 4 Then
    MsgBox "You have reached the first record!", , "Search Results"
Exit Sub
End If

currentrow = currentrow - 1

    txbFirstName.Value = sh.Cells(currentrow, 3)
    txbLastName.Value = sh.Cells(currentrow, 4)
    txbIDNum.Value = sh.Cells(currentrow, 6)
    cbxDesignation.Value = sh.Cells(currentrow, 7)
    txbWeight.Value = sh.Cells(currentrow, 8)
    
End Sub

Private Sub cmdSearch_Click()
Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")
Dim i As Long

lastRow = sh.Range("C" & Application.Rows.Count).End(xlUp).row

If txbLastName.Text = "" Then
        MsgBox "Enter the last name you wish to search for!"
    txbLastName.SetFocus
        Exit Sub
End If


For i = 2 To lastRow
    If Trim(sh.Cells(i, 4)) <> WorksheetFunction.Proper(txbLastName.Value) And i = lastRow Then
        MsgBox "Waypoint not found!"
    End If
    If Trim(sh.Cells(i, 4)) = WorksheetFunction.Proper(txbLastName.Value) Then
        txbFirstName.Value = sh.Cells(i, 3)
        txbLastName.Value = sh.Cells(i, 4)
        txbIDNum.Value = sh.Cells(i, 6)
        cbxDesignation.Value = sh.Cells(i, 7)
        txbWeight.Value = sh.Cells(i, 8)
        currentrow = i 'capture the value of the currentrow
        Exit For
    End If
Next i

End Sub


Private Sub cmdAdd_Click()

Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")
Dim i As Long
Dim existingrecord As Boolean

lastRow = sh.Range("C" & Application.Rows.Count).End(xlUp).row + 1 'last row with data

'Validate entry fields

    If Me.txbFirstName.Value = "" Then
        MsgBox "Please enter a First Name or initial"
    Exit Sub
    End If
    If Me.txbLastName.Value = "" Then
        MsgBox "Please enter a Last Name"
    Exit Sub
    End If
    
    If IsNumeric(Me.txbIDNum.Value) = False Then
        MsgBox "Please enter a correct Employee ID"
    Exit Sub
    End If
    
    If Me.cbxDesignation.Value = "" Then
        MsgBox "Please enter a Designation"
    Exit Sub
    End If
    
    If Me.txbWeight.Value = "" Then
        MsgBox "Please enter pilot's weight"
    Exit Sub
    End If
    
'Checks for duplicate ID Numbers

For i = 3 To lastRow
    If Trim(sh.Cells(i, 6)) = Me.txbIDNum.Value Then
    existingrecord = True
    Exit For
    End If
Next i
    If existingrecord = True Then
        answer = MsgBox("This ID already exists, do you with to proceed?", vbYesNo + vbQuestion, "Add Record")
        If answer = vbNo Then
            Exit Sub
        Else
            sh.Unprotect Password:="VFRPlanner2019"
            With sh
                .Range("C" & lastRow).Value = Me.txbFirstName.Value 'First name
                .Range("D" & lastRow).Value = Me.txbLastName.Value 'Last name
                .Range("E" & lastRow).Value = Left(Me.txbFirstName.Value, 1) & ". " & Me.txbLastName.Value 'Concatenats First Initial & Last Name
                .Range("F" & lastRow).Value = Me.txbIDNum.Value 'ID
                .Range("G" & lastRow).Value = Me.cbxDesignation.Value 'Designation
                .Range("H" & lastRow).Value = Me.txbWeight.Value ' Weight
                .Range("I" & lastRow).Value = "25" 'Baggage
               
            End With
    
            MsgBox "A new record has been added"
        End If
    Else
            sh.Unprotect Password:="VFRPlanner2019"
            With sh
                .Range("C" & lastRow).Value = Me.txbFirstName.Value 'First name
                .Range("D" & lastRow).Value = Me.txbLastName.Value 'Last name
                .Range("E" & lastRow).Value = Left(Me.txbFirstName.Value, 1) & ". " & Me.txbLastName.Value 'Concatenats First Initial & Last Name
                .Range("F" & lastRow).Value = Me.txbIDNum.Value 'ID
                .Range("G" & lastRow).Value = Me.cbxDesignation.Value 'Designation
                .Range("H" & lastRow).Value = Me.txbWeight.Value ' Weight
                .Range("I" & lastRow).Value = "25" 'Baggage
                
            End With
    
            MsgBox "Captain " & Me.txbLastName.Value & "'s record was added", vbInformation
    End If
    
    Call SortPilotData
    sh.Protect Password:="VFRPlanner2019"
    Call resetPilotForm
    ThisWorkbook.Save

End Sub
Private Sub cmdEdit_Click()

Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")
Dim i As Long
Dim replace As Long
Dim rowfound As Long

lastRow = sh.Range("C" & Application.Rows.Count).End(xlUp).row + 1 'First empty row

'Validate entry fields

    If Me.txbFirstName.Value = "" Then
        MsgBox "Please enter a First Name or initial"
    Exit Sub
    End If
    
    If Me.txbLastName.Value = "" Then
        MsgBox "Please enter a Last Name"
    Exit Sub
    End If
    
    If IsNumeric(Me.txbIDNum.Value) = False Then
        MsgBox "Please enter a correct Employee ID"
    Exit Sub
    End If
    
    If Me.cbxDesignation.Value = "" Then
        MsgBox "Please enter a Designation"
    Exit Sub
    End If
    
    If Me.txbWeight.Value = "" Then
        MsgBox "Please enter pilot's weight"
    Exit Sub
    End If
    
'Checks for duplicate ID Numbers

For i = 3 To lastRow
    If Trim(sh.Cells(i, 6)) = Me.txbIDNum.Value Then
        currentrow = i 'capture the value of the currentrow
        existingrecord = True
            Exit For
    End If
Next i

    If existingrecord = True Then
        answer = MsgBox("Are you sure you want to Edit this record?", vbYesNo + vbQuestion, "Edit Record")
        If answer = vbYes Then
        sh.Unprotect Password:="VFRPlanner2019"
            With sh
                .Range("C" & currentrow).Value = Me.txbFirstName.Value 'First name
                .Range("D" & currentrow).Value = Me.txbLastName.Value 'Last name
                .Range("E" & currentrow).Value = Left(Me.txbFirstName.Value, 1) & ". " & Me.txbLastName.Value 'Concatenats First Initial & Last Name
                .Range("F" & currentrow).Value = Me.txbIDNum.Value 'ID
                .Range("G" & currentrow).Value = Me.cbxDesignation.Value 'Designation
                .Range("H" & currentrow).Value = Me.txbWeight.Value ' Weight
                .Range("I" & currentrow).Value = "25" 'Baggage
            End With
            MsgBox "Captain " & Me.txbLastName.Value & "'s record was updated", vbInformation
        End If
    End If
    Call SortPilotData
    sh.Protect Password:="VFRPlanner2019"
    Call resetPilotForm
    ThisWorkbook.Save

End Sub

Private Sub cmdClear_Click()
    Call resetPilotForm
End Sub

Function FindRecord(txbIDNum)
Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Pilot Data")
    With sh.Columns(5)
        Set rngFound = .Find(What:=txbIDNum, After:=.Cells(1), LookIn:=xlValues, LookAt:=xlWhole, SearchDirection:=xlNext)
    End With
End Function
Attribute VB_Name = "PrintMod"

Sub Print_A4_NavLog()
      Sheets("A4 Nav Log").PrintOut
End Sub

Sub Print_A5_NavLog()
      Sheets("Kneeboard Nav Log").PrintOut
End Sub

Attribute VB_Name = "Security"
Option Explicit

Sub CheckExpiryDate()

    Dim sh As Worksheet
    Dim ExpirationDate As Date, Tstamp As Date
    Dim Password As String, refSerial As String, serialnumber As String
    
    Set sh = ThisWorkbook.Worksheets("Formulas")
    
    'Time stamp
    If sh.Range("D72").Value = "" Then
        With sh.Range("D72")
            .Value = Now
        End With
    End If

    Tstamp = sh.Range("D72").Value 'Date workbook first opened
        
        If sh.Range("D73").Value = "" Then
            sh.Range("D73") = Tstamp + 365  'Set First expiry date + 1 year
            ThisWorkbook.Save
        End If
        
    ExpirationDate = sh.Range("D73")
    serialnumber = upTstampSerial(Tstamp) ' Serial number changes base on date
    refSerial = sh.Range("D74").Text 'Stores serial number entered by user, if correct
        
    If CDate(Now) > ExpirationDate Then
       
       'check to see if the correct serial number has already been entered by user
       If serialnumber = refSerial Then
            Exit Sub
       
       Else
            Password = InputBox("This workbook has expired, to continue, please enter your Serial Number.", "Product Key")
                
                If Password = serialnumber Then
                    'Update expiry date by +1 year
                    sh.Range("D73") = ExpirationDate + 365 'plus 1 year
                    'Write Serial number to reference cell
                    sh.Range("D74") = serialnumber
                    ThisWorkbook.Save
                    
                    Exit Sub
                Else
            Password = InputBox("Serial number incorrect, please try again.", "Product Key")
            
                If Password = serialnumber Then
                    'Update expiry date by +1 year
                    sh.Range("E7") = ExpirationDate + 365 'plus 1 year
                    'Write Serial number to reference cell
                    sh.Range("H7") = serialnumber
                    ThisWorkbook.Save
                    
                    Exit Sub
                    
                Else
                    MsgBox "Incorrect Serial Number, please contact the developer"
                    ThisWorkbook.Close savechanges:=False
                End If
            End If
        End If
    End If

End Sub


Function upTstampSerial(Tstamp As Date) As String

Dim myserial As String

            If CDate(Now) > Tstamp + 1095 Then 'plus 3 years
                    MsgBox "This program has expired, to obtain a new copy please contact the developer.", , "VFR Flight Planner"
                    ThisWorkbook.Close savechanges:=False
            ElseIf CDate(Now) > Tstamp + 730 Then 'plus 2 years
                myserial = "FR8Q-VS3M-BS26-SDJE-WM2R"
            ElseIf CDate(Now) > Tstamp + 365 Then 'plus 1 year
                myserial = "RE3H-WT8D-SE39-ASEW-KU7S"
            End If
            
            upTstampSerial = myserial

End Function
Attribute VB_Name = "Sheet00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim fpsheet As Worksheet
    Set fpsheet = ThisWorkbook.Sheets("Flight Planning")
    fpsheet.Activate
    fpsheet.Range("J5").Value = Format(Now(), "mm/dd/yyyy")
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim roundTrip As Boolean
roundTrip = ThisWorkbook.Sheets("Flight Planning").Range("AG40")

Dim fpsheet As Worksheet
Set fpsheet = ThisWorkbook.Sheets("Flight Planning")
Dim chkBox As Excel.CheckBox
    
    If Not Intersect(Target, Range("H12")) Is Nothing Then
        Call clearCheckBoxes
        fpsheet.Range("C35:D36").ClearContents  'Clears non-standard altitude
        fpsheet.Range("F58:F59").ClearContents  'Clears Discretionary Fuel
        fpsheet.Range("W38:X39").ClearContents  'Clears Fuel Stop
        fpsheet.Range("W41:X42").ClearContents  'Clears Fuel Amount
        
    End If
    
    If Not Intersect(Target, Range("W41")) Is Nothing And fpsheet.Range("W41") <> "" Then
        fpsheet.CheckBoxes("Check Box 35").Value = False
    
    End If
    
    If Not Intersect(Target, Range("H12")) Is Nothing And roundTrip = True Then
        MsgBox "For round trip flight plans, please enter a destination/" & vbNewLine & "turn around point.", , "Round Trip Flights"
        fpsheet.Range("W38").Select
    End If
    
'    If Not Application.Intersect(Target, Range("W38")) Is Nothing Then
'        Target = UCase(Target)
'    End If

    'Reformats time to add " : ", (700 to 07:00 etc.)
    
    If Intersect(Target, Range("J7")) Is Nothing Then Exit Sub
         
    On Error GoTo ErrHandler:
         
        With Target
            If IsNumeric(.Value) Then
                Application.EnableEvents = False
                Select Case .Value
                Case 0
                    .NumberFormat = "hh:mm"
                Case 1 To 99
                    .Value = TimeSerial(0, .Value, 0)
                    .NumberFormat = "hh:mm"
                Case 100 To 2399
                    .Value = TimeSerial(Int(.Value / 100), .Value Mod 100, 0)
                    .NumberFormat = "hh:mm"
                Case 10000 To 235959
                    .Value = TimeSerial(Int(.Value / 10000), _
                    Int((.Value Mod 10000) / 100), .Value Mod 100)
                    .NumberFormat = "hh:mm:ss"
                Case 240000 To 245959
                    .Value = TimeSerial(0, Int((.Value Mod 10000) / 100), .Value Mod 100)
                    .NumberFormat = "hh:mm:ss"
                Case Else
                End Select
            End If
        End With
ErrHandler:
        Application.EnableEvents = True
    
    Dim TabOrderArray As Variant 'Set tab order for home page (Not working properly yet)
    Dim i As Long

    TabOrderArray = Array("D5:E6", "D7", "J5", "J7", "N5", "S5", "V5", "AB5, H12, Z11, AA11, E21, F21")
    Application.ScreenUpdating = False
    For i = LBound(TabOrderArray) To UBound(TabOrderArray)
        If TabOrderArray(i) = Target.Address(0, 0) Then
            If i = UBound(TabOrderArray) Then
                Me.Range(TabOrderArray(LBound(TabOrderArray))).Select
            Else
                Me.Range(TabOrderArray(i + 1)).Select
            End If
        End If
    Next i
    Application.ScreenUpdating = True
    
End Sub
Attribute VB_Name = "Sheet02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()

'On active page, clear previous data, resets fuel and crew weight cells, call config macro based on aircraft type.
    Call wbConfig

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    Dim wbsheet As Worksheet
    Dim config_num As Integer
    Dim paxCount As Integer
    Dim stdwgt As Boolean
    Dim acType As String
    Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")
    stdwgt = wbsheet.Range("C57").Value
    config_num = wbsheet.Range("S56").Value
    paxCount = wbsheet.Range("C20").Value
    acType = wbsheet.Range("E10").Value
    
    If Not Intersect(Target, Target.Worksheet.Range("E8")) Is Nothing Then
        Call wbConfig
    
    End If
    
    'If "Standard Weights" Box IS checked and user enters number of PAX in cell C19, then auto populate standard weighs
        
    If Not Application.Intersect(Target, Range("C20")) Is Nothing And stdwgt = True Then
        Target.Select
        Call StandardWeights
    End If
    
End Sub
    
'    If Target.Cells.Count > 1 Then Exit Sub
'
'    Private Sub Worksheet_Calculate()  'Check if Aircraft Type has changed
'
'        Static lastVal As Variant
'
'        If Range("E10").Value <> lastVal Then
'            'MsgBox "Cell E10 has recalculated"
'        End If
'            lastVal = Range("E10").Value
'    End Sub


Attribute VB_Name = "Sheet03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
 
Private Sub Worksheet_Change(ByVal Target As Range)
     
    Application.EnableEvents = False
     
    If Not Application.Intersect(Target, Range("D3:J3")) Is Nothing Then
        Target(1).Value = UCase(Target(1).Value)
    End If
    Application.EnableEvents = True
End Sub


'**********************************************************************************************

'Private Sub Worksheet_SelectionChange(ByVal Target As Range)
''Update by Extendoffice: 2018/9/21
'    Dim xCombox As OLEObject
'    Dim xStr As String
'    Dim xWs As Worksheet
'    Dim xArr
'
'    Set xWs = Application.ActiveSheet
'    On Error Resume Next
'    Set xCombox = xWs.OLEObjects("TempCombo")
'    With xCombox
'        .ListFillRange = ""
'        .LinkedCell = ""
'        .Visible = False
'    End With
'    If Target.Validation.Type = 3 Then
'        Target.Validation.InCellDropdown = False
'        Cancel = True
'        xStr = Target.Validation.Formula1
'        xStr = Right(xStr, Len(xStr) - 1)
'        If xStr = "" Then Exit Sub
'        With xCombox
'            .Visible = True
'            .Left = Target.Left
'            .Top = Target.Top
'            .Width = Target.Width + 5
'            .Height = Target.Height + 5
'            .ListFillRange = xStr
'            If .ListFillRange = "" Then
'                xArr = Split(xStr, ",")
'                Me.TempCombo.List = xArr
'            End If
'            .LinkedCell = Target.Address
'        End With
'        xCombox.Activate
'        Me.TempCombo.DropDown
'    End If
'End Sub
'Private Sub TempCombo_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'    Select Case KeyCode
'        Case 9
'            Application.ActiveCell.Offset(0, 1).Activate
'        Case 13
'            Application.ActiveCell.Offset(1, 0).Activate
'    End Select
'End Sub
Attribute VB_Name = "Sheet06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet08"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet09"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub Worksheet_Change(ByVal Target As Range)

Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("GoM")
Dim wpCount As Long


    If Not Intersect(Target, Range("A1")) Is Nothing Then
    
        wpCount = sh.Range("B" & Application.Rows.Count).End(xlUp).row - 3 'Total number of Waypoints
        sh.Range("B1").Value = wpCount 'write to sheet
    
    End If

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Activate()
'
''start_Countdown
'
'        Inactivity_Time = Now() + TimeValue("00:02:00")
'        Application.OnTime Inactivity_Time, "LockWaypoints"
'
'End Sub
'
'Sub stop_Countdown()
'
'        On Error Resume Next
'        Application.OnTime Inactivity_Time, "LockWaypoints", , False
'        On Error GoTo 0
'
'End Sub
'
'Sub whatever()
'Dim time1, time2
'
'time1 = Now
'time2 = Now + TimeValue("0:01:00")
'
'  Do Until time1 >= time2
'        Sheets("Waypoints").Protect Password:="1234"
'        time1 = Now()
'    Loop
'
'End Sub
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Spash"

 
Private Sub KillTheForm()
    Unload SplashUserForm
End Sub
 

Attribute VB_Name = "SplashUserForm"
Attribute VB_Base = "0{A7560CFC-A02A-4C2B-B71E-746ECDE3758C}{D66F9D9F-A921-4F57-AB84-8CABB0FF4F86}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Activate()
    Application.OnTime Now + TimeValue("00:00:03"), "KillTheForm"
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

    HideRibbons
    CheckExpiryDate
    
    Application.ScreenUpdating = False
    ActiveWindow.Visible = False

    Dim fpsheet As Worksheet
    Set fpsheet = ThisWorkbook.Sheets("Flight Planning")
    fpsheet.Activate
    
' Display Splash Screen

    SplashUserForm.Show
    Windows(ThisWorkbook.Name).Visible = True
    Application.ScreenUpdating = True
    
' Sets todays date on home page
    fpsheet.Range("J5").Value = Format(Now(), "mm/dd/yyyy")
    
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ShowRibbons
End Sub

'Private Sub Workbook_BeforePrint(Cancel As Boolean)

'Dim wbsheet As Worksheet
'Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")

    'Application.ScreenUpdating = False
   ' wbsheet.Unprotect Password:="VFRPlanner2019"
    
   ' Application.EnableEvents = False

   ' Cancel = True
    
   ' Call Remove_Colour_From_Cells

   ' wbsheet.Range("B2:AM46").PrintOut

   ' Application.EnableEvents = True
    
  '  Call Add_Color_To_Cells

  '  wbsheet.Protect Password:="VFRPlanner2019"
  '  Application.ScreenUpdating = True

'End Sub

Attribute VB_Name = "TimeModule"
''Option Explicit
'Sub TimeBombWithDefinedName()
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'' TimeBombWithDefinedName
'' This procedure uses a defined name to store this workbook's
'' expiration date. If the expiration date has passed, a
'' MsgBox is displayed and this workbook is closed.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Dim ExpirationDate As String
'
'On Error Resume Next
'ExpirationDate = Mid(ThisWorkbook.Names("ExpirationDate").Value, 2)
'If Err.Number <> 0 Then
'    '''''''''''''''''''''''''''''''''''''''''''
'    ' Name doesn't exist. Create it.
'    '''''''''''''''''''''''''''''''''''''''''''
'    ExpirationDate = CStr(DateSerial(Year(Now), _
'        Month(Now), Day(Now) + C_NUM_DAYS_UNTIL_EXPIRATION))
'    ThisWorkbook.Names.Add Name:="ExpirationDate", _
'        RefersTo:=Format(ExpirationDate, "short date"), _
'        Visible:=False
'End If
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'' If the today is past the expiration date, close the
'' workbook. If the defined name didn't exist, we need
'' to Save the workbook to save the newly created name.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'If CDate(Now) > CDate(ExpirationDate) Then
'    MsgBox "This workbook trial period has expired.", vbOKOnly
'    ThisWorkbook.Close savechanges:=False
'End If
'
'End Sub
'
Attribute VB_Name = "UF_ShowReset"

Sub showPilotForm()
    PilotDataEntry.Show
    PilotDataEntry.txbFirstName.SetFocus
End Sub

Sub showWaypointForm()
    WaypointEntry.Show
End Sub


Sub showPasswordForm()
    PasswordForm.Show
End Sub

Sub showAircraftForm()

    Dim Password As String
    
    Password = InputBox("Please enter password below", "Password")
        If Password <> "ADAOps" Then
            MsgBox "Incorrect Password"
            Exit Sub
            Else
            
            AircraftDataForm.Show
        
        End If
    
End Sub

Sub resetPilotForm()

    Dim ctrl As Control      ' Create a control variable

    For Each ctrl In PilotDataEntry.Controls
        If TypeName(ctrl) = "TextBox" Then
            ctrl.Value = ""      'Clear the value
        End If
    Next ctrl
    
    For Each ctrl In PilotDataEntry.Controls
        If TypeName(ctrl) = "ComboBox" Then
            ctrl.Value = ""      'Clear the value
        End If
    Next ctrl
    
PilotDataEntry.txbFirstName.SetFocus

End Sub

Sub resetWaypointForm()

    Dim ctrl As Control      ' Create a control variable

    For Each ctrl In WaypointEntry.Controls
        If TypeName(ctrl) = "TextBox" Then
            ctrl.Value = ""      'Clear the value
        End If
    Next ctrl
    
    For Each ctrl In WaypointEntry.Controls
        If TypeName(ctrl) = "ComboBox" Then
            ctrl.Value = ""      'Clear the value
        End If
    Next ctrl
    
WaypointEntry.txbWaypointName.SetFocus

End Sub

Sub resetAircraftForm()

    Dim ctrl As Control      ' Create a control variable

    For Each ctrl In AircraftDataForm.Controls
        If TypeName(ctrl) = "TextBox" Then
            ctrl.Value = ""      'Clear the value
        End If
    Next ctrl
    
    For Each ctrl In AircraftDataForm.Controls
        If TypeName(ctrl) = "ComboBox" Then
            ctrl.Value = ""      'Clear the value
        End If
    Next ctrl
    
AircraftDataForm.txbAircraftID.SetFocus

End Sub



Attribute VB_Name = "UF_SortData"
Sub SortPilotData()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Dim ws As Worksheet
    Set ws = Sheets("Pilot Data")
    
    With ws
    
        Dim lastRow As Long, rng As Range
    
        lastRow = .Range("D" & .Rows.Count).End(xlUp).row
        Set rng = .Range("C2:J" & lastRow)
    
        With ws.Sort
    
            With .SortFields
                .Clear
                .Add Key:=ws.Range("D3:D" & lastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End With
    
            .SetRange rng
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
            
        End With
    End With
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub


Sub SortWaypointData()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Dim ws As Worksheet
    Set ws = Sheets("Waypoints")
    
    With ws
    
        Dim lastRow As Long, rng As Range
    
        lastRow = .Range("B" & .Rows.Count).End(xlUp).row
        Set rng = .Range("B3:K" & lastRow)
    
        With ws.Sort
    
            With .SortFields
                .Clear
                .Add Key:=ws.Range("B3:B" & lastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End With
    
            .SetRange rng
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
            
        End With
    End With
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
End Sub

Attribute VB_Name = "WB_Clear"
Option Explicit

Sub clearSeats()
    ThisWorkbook.Sheets("Weight & Balance").Range("H22:Q25,P27:Q27").ClearContents
End Sub

Sub clear_seatCounter()
    
    Dim wbsheet As Worksheet
    Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")
    Dim stdweight As Boolean
    stdweight = wbsheet.Range("C57").Value
    Dim paxCount As Integer
    paxCount = wbsheet.Range("C20").Value
    
    wbsheet.Unprotect Password:="VFRPlanner2019"
    
        If stdweight = True Then
            paxCount = 0 'resets PAX count cell to zero
        ElseIf wbsheet.Range("C57") = False Then
            wbsheet.Range("H22:Q25,P27:Q27").ClearContents
        End If
        
    wbsheet.Protect Password:="VFRPlanner2019"

End Sub

Attribute VB_Name = "WB_Configure"
Option Explicit

Sub wbConfig()

'Configure the Weight & Balance sheet based on aircraft type.

'Weight & Balance Configuration numbers
    'AW139 - 1, 2 & 3
    'Bell 412 - 4, 5 & 6
    'H135 - 7 & 8
    'Other Aircraft (H145 etc.) - 9 +

    Dim wbsheet As Worksheet
    Dim configNum As Integer
    Dim stdweight As Boolean
    Dim paxCount As Integer
    Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")
    configNum = wbsheet.Range("S56").Value
    stdweight = wbsheet.Range("C57").Value
    paxCount = wbsheet.Range("C20").Value

    Application.ScreenUpdating = False
    
    wbsheet.Unprotect Password:="VFRPlanner2019"
    wbsheet.Range("C20:D20").ClearContents
        
            If stdweight = True Then
                paxCount = 0
            ElseIf stdweight = False And wbsheet.Range("E10").Value = "AW139" Then
                wbsheet.Range("C20").Value = _
                "=COUNTA($H$22:$Q$24)-COUNTIF($H$22:$Q$24,""0"")"
            ElseIf stdweight = False And configNum = 4 Then
                wbsheet.Range("C20").Value = _
                "=COUNTA($H$22:$Q$24,$H$25:$Q$25)-COUNTIF($H$25:$Q$25,""=0"")-COUNTIF($H$22:$Q$24,""=0"")"
            ElseIf stdweight = False And configNum = 5 Then
                wbsheet.Range("C20").Value = _
                "=COUNTA($H$22:$Q$24,$H$25:$O$25)-COUNTIF($H$25:$O$25,""=0"")-COUNTIF($H$22:$Q$24,""=0"")"
            ElseIf stdweight = False And configNum = 6 Then 'A6-MED
                wbsheet.Range("C20").Value = _
                "=COUNTA($H$23:$Q$23)-COUNTIF($H$23:$Q$23,""=0"")"
            ElseIf stdweight = False And wbsheet.Range("E10").Value = "H135" Then
                wbsheet.Range("C20").Value = _
                "=COUNTA($J$22:$O$25,$J$20)-COUNTIF($J$20,""=0"")-COUNTIF($J$22:$O$25,""=0"")"
            End If
                
    wbsheet.Unprotect Password:="VFRPlanner2019"
    wbsheet.Range("H22:Q25,P27:Q27").ClearContents    'Clears all Seat and Cargo cells

            
'******* AW139 Actual Weights *******

    If configNum = 1 And stdweight = False Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_139_Seat_Map
        With wbsheet
            .Range("M14").Value = 1450
            .Range("M16").Value = 650
            .Range("S16").Value = 150
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q24,P27:Q27").Locked = False     'Check all required cells are unlocked
            .Range("H25:Q25").Locked = True              'Locks all usused seating cells
            .Range("C20:D20").Locked = True              'Locks Seat count cell
            .Range("H22:I22").Select                     'Selects Seat 1
        End With
            
'******* AW139 Standard Weights *******
            
    ElseIf configNum = 1 And stdweight = True Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_139_Seat_Map
        With wbsheet
            .Range("M14").Value = 1450
            .Range("M16").Value = 650
            .Range("S16").Value = 150
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q25,P27:Q27").Locked = True      'Locks all seating and cargo cells
            .Range("C20:D20").Locked = False             'Unlocks Seat count cell
        End With
            paxCount = 0                                 'Resets seat count cell to zero
            
'******* B412 Actual Weights ******* Old 412 seating
            
    ElseIf configNum = 4 And stdweight = False Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_412_Old_Seat_Map
        With wbsheet
            .Range("M14").Value = 1350
            .Range("M16").Value = 650
            .Range("S16").Value = 100
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q25,P27:Q27").Locked = False            'Unlocks all used seating & cargo cells
            .Range("L22:M22,J24:O25").Locked = True             'Locks all usused seating cells
            .Range("C20:D20").Locked = True                     'Locks Seat count cell
            .Range("H22:I22").Select                            'Seat 1
        End With
        
'******* B412 Actual Weights ******* New 412s Forward Facing Airline Seats
            
    ElseIf configNum = 5 And stdweight = False Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_412_Seat_Map
        With wbsheet
            .Range("M14").Value = 1350
            .Range("M16").Value = 650
            .Range("S16").Value = 100
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q25,P27:Q27").Locked = False            'Unlocks all used seating & cargo cells
            .Range("L22:M22,J24:O25,P24:Q24").Locked = True     'Locks all usused seating cells
            .Range("C20:D20").Locked = True                     'Locks Seat count cell
            .Range("H22:I22").Select                            'Seat 1
        End With
            
'******* B412 Standard Weights ******* Old 412 seating

    ElseIf configNum = 4 And stdweight = True Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_412_Old_Seat_Map
        With wbsheet
            .Range("M14").Value = 1350
            .Range("M16").Value = 650
            .Range("S16").Value = 100
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q25,P27:Q27").Locked = True      'Locks all seating and cargo cells
            .Range("C20:D20").Locked = False       'Unlocks Seat count cell
            .Range("C20").Select
        End With
            paxCount = 0   'Resets seat count cell to zero

'******* B412 Standard Weights ******* New 412s Forward Facing Airline Seats

    ElseIf configNum = 5 And stdweight = True Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_412_Seat_Map
        With wbsheet
            .Range("M14").Value = 1350
            .Range("M16").Value = 650
            .Range("S16").Value = 100
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q25,P27:Q27").Locked = True      'Locks all seating and cargo cells
            .Range("C20:D20").Locked = False       'Unlocks Seat count cell
            .Range("C20").Select
        End With
            paxCount = 0   'Resets seat count cell to zero
            
'******* B412 MED Actual Weights *******
            
    ElseIf configNum = 6 And stdweight = False Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_412MED_Seat_Map
        With wbsheet
            .Range("M14").Value = 2100
            .Range("M16").Value = 650
            .Range("S16").Value = 100
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("H22:Q25").Locked = True
            .Range("J22:K22,N22:O22,H23:I23,P23:Q23").Locked = False
            .Range("J22").Value = 185
            .Range("N22").Value = 185
            .Range("C20:D20").Locked = True
            .Range("P27:Q27").Locked = False 'Unlocks Tail boom Cargo
        End With
            
'******* B412 MED Standard Weights *******
            
    ElseIf configNum = 6 And stdweight = True Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_412MED_Seat_Map
        With wbsheet
            .Range("M14").Value = 2100
            .Range("M16").Value = 650
            .Range("S16").Value = 100
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("J22").Value = 185
            .Range("N22").Value = 185
            .Range("H22:Q25").Locked = True
            .Range("C20:D20").Locked = False
            .Range("P27:Q27").Locked = False 'Unlocks Tail boom Cargo
            .Range("C20").Select
        End With

            paxCount = 0   'Resets seat count cell to zero
            
'******* H135 HEMS Standard Weights *******
    
    ElseIf configNum = 7 And stdweight = True Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_135MED_Seat_Map
            wbsheet.Range("H22:Q27").Locked = True       'Locks all usused seating cells
            wbsheet.Range("C20:D20").Locked = False        'Locks Seat count cell
            paxCount = 0   'Resets seat count cell to zero
            
'******* H135 HEMS Actual Weights *******
            
    ElseIf configNum = 7 And stdweight = False Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_135MED_Seat_Map
            With wbsheet
                .Range("J22:K22,J24:K25,L22:M25,P27:Q27,N23:O24").Locked = True       'Locks all usused seating cells
                .Range("J20:K20,J23:K23,N22:O22,N25:O25").Locked = False       'Check all required cells are unlocked
                .Range("C20:D20").Locked = False        'Locks Seat count cell
                .Range("N20").Value = 90
                .Range("J20").Value = ""
                .Range("M14").Value = 550
                .Range("M16").Value = 200
                .Range("S16").Value = 25
                .Range("J20:K20").Select         'Selects left cockpit seat cell
            End With
            
'******* H135 VIP Standard Weights *******
                
    ElseIf configNum = 8 And stdweight = True Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_135VIP_Seat_Map
            With wbsheet
                .Range("N20").Value = 90
                .Range("J20").Value = ""
                .Range("M14").Value = 550
                .Range("M16").Value = 200
                .Range("S16").Value = 25
                .Range("H22:Q27").Locked = True         'Locks all seating cells
                .Range("C20:D20").Locked = False        'Unlocks Seat count cell
            End With
            
            paxCount = 0    'Resets seat count cell to zero
            
'******* H135 VIP Actual Weights *******
    
    ElseIf configNum = 8 And stdweight = False Then
            wbsheet.Unprotect Password:="VFRPlanner2019"
            Config_135VIP_Seat_Map
        With wbsheet
            .Range("N20").Value = 90
            .Range("J20").Value = ""
            .Range("M14").Value = 550
            .Range("M16").Value = 200
            .Range("S16").Value = 25
            .Range("J23:O24,L25:M25").Locked = True       'Locks all usused seating cells
            .Range("J22:O22,J25:K25,N25:O25,P27:Q27").Locked = False       'Check all required cells are unlocked
            .Range("C20:D20").Locked = True        'Locks Seat count cell
            .Range("J20:K20").Select         'Selects left cockpit seat cell
        End With
            
    End If
        
    Application.ScreenUpdating = True
    wbsheet.Protect Password:="VFRPlanner2019"

End Sub



Attribute VB_Name = "WB_Printing"
Option Explicit


Sub PrintForm()

    Dim wbsheet As Worksheet
    Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")
    
    'Removes green shading from Cells before printing
    
        wbsheet.Unprotect Password:="VFRPlanner2019"
        
            wbsheet.Range("E8:G8,K8,N8,Q8:T8,X8:Z8,AD8:AF8,E10:G10,K10,N10,Q10:T10,X10:Z10,AD10:AF10,M14:N14,M16:N16,S16:T16,AJ8:AL8,AJ10:AL10").Interior.TintAndShade = 1
        wbsheet.Cells(8, 5).Select
        
            wbsheet.Range("B2:AN48").PrintOut
        
            wbsheet.Range("E8:G8,K8,N8,Q8:T8,X8:Z8,AD8:AF8,K10,N10,Q10:T10,X10:Z10,AD10:AF10,M14:N14,M16:N16,S16:T16").Interior.Color = RGB(202, 226, 190)
            wbsheet.Range("E10:G10,AJ8:AL8,AJ10:AL10").Interior.Color = RGB(239, 240, 242)
        wbsheet.Cells(8, 5).Select
        
        wbsheet.Protect Password:="VFRPlanner2019"

End Sub

Attribute VB_Name = "WB_Reset"
Option Explicit

Sub ResetForm()

'Clears user enties on the Weight and Balnce Sheet - linked to "Reset button"

Dim wbsheet As Worksheet
Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")
Dim stdweight As Boolean
Dim configNum As Integer
stdweight = wbsheet.Range("C57").Value
configNum = wbsheet.Range("S56").Value

    Application.ScreenUpdating = False
    ActiveSheet.Unprotect Password:="VFRPlanner2019"

        With wbsheet
            .Range("H22:Q25,P27:Q27").ClearContents    'Clears all Seat and Cargo cells
            .Range("M14").Value = "1350"      'Resets Fuel Quanity Cell to Standard value
            .Range("J20").Value = "=VLOOKUP(Q10,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
            .Range("N20").Value = "=VLOOKUP(Q8,'Pilot Data'!$E$3:$H$153,4,FALSE)"   'Re-links Pilot weight to pilot Data sheet
        End With
        
        If configNum = 6 Then
            wbsheet.Range("J22").Value = 185
            wbsheet.Range("N22").Value = 185
        End If
        
    If stdweight = True Then
        wbsheet.Range("C20").Value = "0" 'resets PAX count cell to zero
        wbsheet.Range("C20").Select     'Selects PAX count cell
    Else
        wbsheet.Range("H22").Select     'Selects PAX 1 Seat
    End If

    ActiveSheet.Protect Password:="VFRPlanner2019"
    Application.ScreenUpdating = True
    
End Sub
Attribute VB_Name = "WB_SeatMaps"


'''''''''This module configures the Seating diagram ''''''''''''


Sub Config_412_Old_Seat_Map() 'Old 412 Seating
Attribute Config_412_Old_Seat_Map.VB_ProcData.VB_Invoke_Func = " \n14"


    Application.ScreenUpdating = False

    With Range("H22:Q25")
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    End With
    
    With Range("H22:Q25,J20:K20").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

    With Range("J25:O25,J24:O24,L22:M22").Interior
        .Pattern = xlLightUp
        .PatternThemeColor = xlThemeColorDark1
        .ColorIndex = xlAutomatic
        .TintAndShade = -4.99893185216834E-02
        .PatternTintAndShade = -0.249946592608417
    End With
    
    Application.ScreenUpdating = True
    
End Sub

Sub Config_412_Seat_Map() 'New ADMA Seating


    Application.ScreenUpdating = False

    With Range("H22:Q25")
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    End With
    
    With Range("H22:Q25,J20:K20").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

    With Range("J25:O25,J24:Q24,L22:M22").Interior
        .Pattern = xlLightUp
        .PatternThemeColor = xlThemeColorDark1
        .ColorIndex = xlAutomatic
        .TintAndShade = -4.99893185216834E-02
        .PatternTintAndShade = -0.249946592608417
    End With
    
    Application.ScreenUpdating = True
    
End Sub

Sub Config_139_Seat_Map()

    Application.ScreenUpdating = False

    With Range("H22:Q25")
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    End With
    
    With Range("H22:Q25,J20:K20").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

    With Range("H25:Q25").Interior
        .Pattern = xlLightUp
        .PatternThemeColor = xlThemeColorDark1
        .ColorIndex = xlAutomatic
        .TintAndShade = -4.99893185216834E-02
        .PatternTintAndShade = -0.249946592608417
    End With
    
    Application.ScreenUpdating = True
    
End Sub

Sub Config_412MED_Seat_Map()

    Application.ScreenUpdating = False

    With Range("H22:Q25")
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    End With
    
    With Range("H23:I23,P23:Q23")
        .Borders(xlEdgeTop).LineStyle = xlDashDot
        .Borders(xlEdgeBottom).LineStyle = xlDashDot

    End With
    
    With Range("H22:Q25,J20:K20").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

    With Range("J23:O25,L22:M22").Interior
        .Pattern = xlLightUp
        .PatternThemeColor = xlThemeColorDark1
        .ColorIndex = xlAutomatic
        .TintAndShade = -4.99893185216834E-02
        .PatternTintAndShade = -0.249946592608417
    End With
    
    With Range("H22:I25,P22:Q25").Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With
    
    With Range("J22:K22,N22:O22").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With
    
    Application.ScreenUpdating = True
    
End Sub

Sub Config_135MED_Seat_Map()
Attribute Config_135MED_Seat_Map.VB_ProcData.VB_Invoke_Func = " \n14"

    Application.ScreenUpdating = False

    Range("H22:Q25").Borders.LineStyle = xlLineStyleNone

    With Range("H22:Q25").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

     With Range("J22:O25")
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    End With
    
    With Range("J23:K23")
        .Borders(xlEdgeTop).LineStyle = xlDashDot
        .Borders(xlEdgeBottom).LineStyle = xlDashDot
    End With
    
    With Range("J22:K25").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With
    
    With Range("N22:O22,J20:K20").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With
    
    Application.ScreenUpdating = True

End Sub

Sub Config_135VIP_Seat_Map()

    Application.ScreenUpdating = False

    Range("H22:Q25").Borders.LineStyle = xlLineStyleNone

    With Range("H22:Q25").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

     With Range("J22:O25")
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.ThemeColor = 1
        .Borders.TintAndShade = -0.499984740745262
        .Borders.Weight = xlThin
    End With
    
    With Range("J22:O22,J25:K25,N25:O25").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With
    
    Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "WB_StandardWgt"
Option Explicit

Sub StandardWeights()

    'Pastes the standard Pax weights into seat cells based on number of pax user inputs.
    
    'Weight & Balance Configuration numbers
        'AW139 - 1, 2 & 3
        'Bell 412 - 4, 5 & 6
        'H135 - 7 & 8
        'Other Aircraft (H145 etc.) - 9 +
        
    Dim wbsheet As Worksheet
    Dim seatCount As Integer
    Dim wbConfig As Integer
    Dim stdweight As Boolean
    Dim pax As Integer
    Dim bag As Integer
    
    Set wbsheet = ThisWorkbook.Sheets("Weight & Balance")
    wbConfig = Range("S56").Value
    stdweight = Range("C57").Value
    seatCount = Range("C20").Value
    pax = 185.22
    bag = 24.3
    
    Application.ScreenUpdating = False
    wbsheet.Unprotect Password:="VFRPlanner2019"
    
        wbsheet.Range("H22:Q25").ClearContents      'Clears any previous user data
        wbsheet.Range("P27:Q27").ClearContents
    
    '******* AW139 Standard Weights *******
    
    If stdweight = True And wbConfig = 1 Then
    
        Select Case seatCount
            Case 0
                
            Case 1
                Range("H22:I22") = pax
                Range("P27:Q27") = bag
            Case 2
                Range("H22:K22") = pax
                Range("P27:Q27") = bag * 2
            Case 3
                Range("H22:M22") = pax
                Range("P27:Q27") = bag * 3
            Case "4"
                Range("H22:O22") = pax
                Range("P27:Q27") = bag * 4
            Case "5"
                Range("H22:Q22") = pax
                Range("P27:Q27") = bag * 5
            Case "6"
                Range("H22:Q22") = pax
                Range("H23:I23") = pax
                Range("P27:Q27") = bag * 6
            Case "7"
                Range("H22:Q22") = pax
                Range("H23:K23") = pax
                Range("P27:Q27") = bag * 7
            Case "8"
                Range("H22:Q22") = pax
                Range("H23:M23") = pax
                Range("P27:Q27") = bag * 8
            Case "9"
                Range("H22:Q22") = pax
                Range("H23:O23") = pax
                Range("P27:Q27") = bag * 9
            Case "10"
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("P27:Q27") = bag * 10
            Case "11"
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("P27:Q27") = bag * 11
            Case "12"
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:K24") = pax
                Range("P27:Q27") = bag * 12
            Case "13"
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:M24") = pax
                Range("P27:Q27") = bag * 13
            Case "14"
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:O24") = pax
                Range("P27:Q27") = bag * 14
            Case "15"
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:Q24") = pax
                Range("P27:Q27") = bag * 15
                
            Case Else
                Range("H22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:Q24") = pax
                Range("P27:Q27") = bag * 15
                Range("C20") = 15
                MsgBox "For AW139, Please enter 15 pax or less"
            End Select
            
    '******* Bell 412 Standard Weights *******
    
    ElseIf stdweight = True And wbConfig = 4 Then
    
        Select Case seatCount
        
            Case 0
            
            Case 1
                Range("H22:I22") = pax
                Range("P27:Q27") = bag
            Case 2
                Range("H22:K22") = pax
                Range("P25:Q25") = bag
                Range("P27:Q27") = bag
            Case 3
                Range("H22:K22") = pax
                Range("O22:Q22") = pax
                Range("P25:Q25") = bag * 1.5
                Range("P27:Q27") = bag * 1.5
            Case "4"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("P25:Q25") = bag * 2
                Range("P27:Q27") = bag * 2
            Case "5"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:I23") = pax
                Range("P25:Q25") = bag * 2.5
                Range("P27:Q27") = bag * 2.5
            Case "6"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:I23") = pax
                Range("P23:Q23") = pax
                Range("P25:Q25") = bag * 3
                Range("P27:Q27") = bag * 3
            Case "7"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:K23") = pax
                Range("P23:Q23") = pax
                Range("P25:Q25") = bag * 3.5
                Range("P27:Q27") = bag * 3.5
            Case "8"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:K23") = pax
                Range("N23:Q23") = pax
                Range("P25:Q25") = bag * 4
                Range("P27:Q27") = bag * 4
            Case "9"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("P25:Q25") = bag * 4.5
                Range("P27:Q27") = bag * 4.5
            Case "10"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("P25:Q25") = bag * 5
                Range("P27:Q27") = bag * 5
            Case "11"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("H25:I25") = pax
                Range("P25:Q25") = bag * 5.5
                Range("P27:Q27") = bag * 5.5
            Case "12"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("H25:I25") = pax
                Range("P24:Q24") = pax
                Range("P27:Q27") = bag * 12
            Case "13"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("H25:I25") = pax
                Range("P24:Q24") = pax
                Range("P25:Q25") = pax
                Range("P27:Q27") = bag * 13
            Case Else
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("H25:I25") = pax
                Range("P24:Q24") = pax
                Range("P25:Q25") = pax
                Range("P27:Q27") = bag * 13
                Range("C20") = 13
                MsgBox "For Bell 412, Please enter 13 pax or less"
            End Select
            
    ElseIf stdweight = True And wbConfig = 5 Then
    
        Select Case seatCount
        
            Case 0
            
            Case 1
                Range("H22:I22") = pax
                Range("P27:Q27") = bag
            Case 2
                Range("H22:K22") = pax
                Range("P25:Q25") = bag
                Range("P27:Q27") = bag
            Case 3
                Range("H22:K22") = pax
                Range("O22:Q22") = pax
                Range("P25:Q25") = bag * 1.5
                Range("P27:Q27") = bag * 1.5
            Case "4"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("P25:Q25") = bag * 2
                Range("P27:Q27") = bag * 2
            Case "5"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:I23") = pax
                Range("P25:Q25") = bag * 2.5
                Range("P27:Q27") = bag * 2.5
            Case "6"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:I23") = pax
                Range("P23:Q23") = pax
                Range("P25:Q25") = bag * 3
                Range("P27:Q27") = bag * 3
            Case "7"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:K23") = pax
                Range("P23:Q23") = pax
                Range("P25:Q25") = bag * 3.5
                Range("P27:Q27") = bag * 3.5
            Case "8"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:K23") = pax
                Range("N23:Q23") = pax
                Range("P25:Q25") = bag * 4
                Range("P27:Q27") = bag * 4
            Case "9"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("P25:Q25") = bag * 4.5
                Range("P27:Q27") = bag * 4.5
            Case "10"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("P25:Q25") = bag * 5
                Range("P27:Q27") = bag * 5
            Case "11"
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("H25:I25") = pax
                Range("P25:Q25") = bag * 5.5
                Range("P27:Q27") = bag * 5.5
            Case Else
                Range("H22:K22") = pax
                Range("N22:Q22") = pax
                Range("H23:Q23") = pax
                Range("H24:I24") = pax
                Range("H25:I25") = pax
                Range("P25:Q25") = bag * 5.5
                Range("P27:Q27") = bag * 5.5
                Range("C20") = 11
                MsgBox "For Bell 412, Please enter 11 pax or less"
                
            End Select
            
    '******* B412 Med Standard Weights *******
    
    ElseIf stdweight = True And wbConfig = 6 Then
    
            Select Case seatCount
            Case 0
                Range("J22:K22") = pax
                Range("N22:O22") = pax
            Case 1
                Range("J22:K22") = pax
                Range("N22:O22") = pax
                Range("P23:Q23") = pax
            Case 2
                Range("J22:K22") = pax
                Range("N22:O22") = pax
                Range("P23:Q23") = pax
                Range("H23:I23") = pax
    
            Case Else
                MsgBox "Bell 412 MED, Maximum of 2 patients"
            End Select
            
    '******* H135 MED Standard Weights *******
            
    ElseIf stdweight = True And wbConfig = 7 Then
            
            Select Case seatCount
            Case 0
                Range("N22:O22") = pax
            Case 1
                Range("N22:O22") = pax
                Range("J23:K23") = pax
            Case Else
                MsgBox "H135 MED, Maximum of 1 patients"
            End Select
           
    '******* H135 VIP Standard Weights *******
    
    ElseIf stdweight = True And wbConfig = 8 Then
    
            Select Case seatCount
            Case 0
            
            Case 1
                Range("J25:K25") = pax
                Range("P27:Q27") = bag
            Case 2
                Range("J25:K25") = pax
                Range("N25:O25") = pax
                Range("P27:Q27") = bag * 2
            Case 3
                Range("J25:K25") = pax
                Range("N25:O25") = pax
                Range("J22:K22") = pax
                Range("P27:Q27") = bag * 3
            Case "4"
                Range("J25:K25") = pax
                Range("N25:O25") = pax
                Range("J22:K22") = pax
                Range("N22:O22") = pax
                Range("P27:Q27") = bag * 4
    
            Case "5"
                Range("J22:O22") = pax
                Range("J25:K25") = pax
                Range("N25:O25") = pax
                Range("P27:Q27") = bag * 5
            Case Else
                Range("J22:O22") = pax
                Range("J25:K25") = pax
                Range("N25:O25") = pax
                Range("P27:Q27") = bag * 5
                Range("C20") = 5
                MsgBox "For H135 VIP, Maximum of 5 pax"
            End Select
    
    End If
        wbsheet.Protect Password:="VFRPlanner2019"
        Application.ScreenUpdating = True
    
End Sub

Attribute VB_Name = "WaypointEntry"
Attribute VB_Base = "0{27D6A7C4-BD1E-44A6-BD7B-054299EC0AE8}{777C1510-7420-4C74-83AA-D1BF41CC8CB0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim currentrow As Long, lastRow As Long, sh As Worksheet 'Global variables

Private Sub UserForm_Activate()
    
    With Me.cbxType
        .Clear
        .AddItem ""
        .AddItem "Airport"
        .AddItem "Helipad"
        .AddItem "Hospital"
        .AddItem "Offshore"
        .AddItem "Route"
        .AddItem "VIP"
    End With
    
    With Me.cbxGroup
        .Clear
        .AddItem ""
        .AddItem "ADOC"
        .AddItem "ADMA"
        .AddItem "BELBAZ"
        .AddItem "BUNDQ"
        .AddItem "HOSPL"
        .AddItem "LULU"
        .AddItem "NASIR"
        .AddItem "ROUTE"
        .AddItem "SARB"
        .AddItem "SATAH"
        .AddItem "TOTAL"
        .AddItem "TRNG"
        .AddItem "VVIP"
        .AddItem "ZADCO"
    End With
    
    Me.txbWaypointName.SetFocus
    currentrow = 2
End Sub

Private Sub cmdClear_Click()
    Call resetWaypointForm
End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub cmdDelete_Click()

Set sh = ThisWorkbook.Sheets("Waypoints")
answer = MsgBox("Are you sure you wish to delete this Waypoint?", vbYesNo + vbQuestion, "Delete Waypoint?")
    If answer = vbYes Then
    sh.Unprotect Password:="VFRPlanner2019"
        sh.Range("B" & currentrow, "K" & currentrow).ClearContents
    End If
    Call SortWaypointData
    sh.Range("B3").Select
    sh.Protect Password:="VFRPlanner2019"
    Call resetWaypointForm
    MsgBox "The waypoint " & Me.txbWaypointName.Value & " was deleted", vbInformation, "Waypoints"
End Sub


Private Sub cmdEdit_Click()

Set sh = ThisWorkbook.Sheets("Waypoints")
Dim i As Long
Dim replace As Long
Dim rowfound As Long
Dim wpCount As Long

lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row + 1 'First Empty row!

'Validate entry fields

    If Me.txbWaypointName.Value = "" Then
        MsgBox "Please enter a Waypoint Name"
    Exit Sub
    End If
    
    If IsNumeric(Me.txbLat.Value) = False Then
        MsgBox "Please enter a Decimal Latitude - no spaces, symbols or commas."
    Exit Sub
    End If
    
    If IsNumeric(Me.txbLong.Value) = False Then
        MsgBox "Please enter a Decimal Logitude - no spaces, symbols or commas."
    Exit Sub
    End If
    
    If Me.txbDescription.Value = "" Then
        MsgBox "Please enter a Waypoint Description"
    Exit Sub
    End If
    
    If Me.cbxType.Value = False Then
        MsgBox "Please enter the Waypoint type."
    Exit Sub
    End If
    
'Checks for duplicate ID Numbers

For i = 3 To lastRow
    If Trim(sh.Cells(i, 2)) = Me.txbWaypointName.Value Then
        currentrow = i 'capture the value of the currentrow
        existingrecord = True
            Exit For
    End If
Next i
     
    If existingrecord = True Then
        answer = MsgBox("Are you sure you want to edit this record?", vbYesNo + vbQuestion, "Edit Waypoint")
        If answer = vbYes Then
            sh.Unprotect Password:="VFRPlanner2019"
            With sh
                .Range("B" & currentrow).Value = Me.txbWaypointName.Value 'Waypoint Name
                .Range("C" & currentrow).Value = Me.txbLat.Value 'Latitude
                .Range("D" & currentrow).Value = Me.txbLong.Value 'Longitude
                .Range("E" & currentrow).Value = Me.txbDescription.Value 'Waypoint Description
                .Range("F" & currentrow).Value = Me.cbxType.Value 'Waypoint Type
                .Range("G" & currentrow).Value = Me.txbAlternate.Value 'VFR Alternate
                .Range("H" & currentrow).Value = Me.txbElevation.Value 'Elevation
                .Range("I" & lastRow).Value = Me.cbxGroup.Value 'Group ID
            End With
            MsgBox "The waypoint " & Me.txbWaypointName.Value & " was updated", vbInformation, "Update"
        Else
            Exit Sub
        
        End If
    End If
    
    Call SortWaypointData
    sh.Protect Password:="VFRPlanner2019"
    Call resetWaypointForm
    ThisWorkbook.Save

End Sub

Private Sub cmdSearch_Click()

Set sh = ThisWorkbook.Sheets("Waypoints")
Dim i As Long
Dim lat As String
Dim lon As Double

txbLat = Format(lat, "###.#####;")
txbLong = Format(lon, "###.#####;")

lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

If txbWaypointName.Value = "" Then
        MsgBox "Enter the Waypoint name you wish to search for!"
            txbWaypointName.SetFocus
        Exit Sub
End If

For i = 3 To lastRow
    If Trim(sh.Cells(i, 2)) <> UCase(txbWaypointName.Value) And i = lastRow Then
        MsgBox "Waypoint not found!"
    End If
    If Trim(sh.Cells(i, 2)) = UCase(txbWaypointName.Value) Then
        txbWaypointName.Value = sh.Cells(i, 2)
        txbLat.Value = sh.Cells(i, 3).Text
        txbLong.Value = sh.Cells(i, 4).Text
        txbDescription.Value = sh.Cells(i, 5)
        cbxType.Value = sh.Cells(i, 6)
        txbAlternate.Value = sh.Cells(i, 7)
        txbElevation.Value = sh.Cells(i, 8)
        cbxGroup.Value = sh.Cells(i, 9)
        
        currentrow = i 'capture the value of the currentrow
        Exit For
    End If
Next i

End Sub

Private Sub cmdFwd_Click()

Dim lat As String
Dim lon As String

txbLat = Format(lat, "###.#####;")
txbLong = Format(lon, "###.#####;")

Set sh = ThisWorkbook.Sheets("Waypoints")
lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

If currentrow = lastRow Then
    MsgBox "You have reached the last record! No more data.", , "Search Results"
Exit Sub
End If

currentrow = currentrow + 1

        txbWaypointName.Value = sh.Cells(currentrow, 2)
        txbLat.Value = sh.Cells(currentrow, 3).Text
        txbLong.Value = sh.Cells(currentrow, 4).Text
        txbDescription.Value = sh.Cells(currentrow, 5)
        cbxType.Value = sh.Cells(currentrow, 6)
        txbAlternate.Value = sh.Cells(currentrow, 7)
        txbElevation.Value = sh.Cells(currentrow, 8)
        cbxGroup.Value = sh.Cells(currentrow, 9)
    
End Sub
Private Sub cmdBack_Click()

Dim lat As String
Dim lon As String

txbLat = Format(lat, "###.#####;")
txbLong = Format(lon, "###.#####;")

Set sh = ThisWorkbook.Sheets("Waypoints")
lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row

If currentrow = 3 Then
    resetWaypointForm
    MsgBox "You have reached the First record! No more data.", , "Search Results"
Exit Sub
End If

currentrow = currentrow - 1

        txbWaypointName.Value = sh.Cells(currentrow, 2)
        txbLat.Value = sh.Cells(currentrow, 3).Text
        txbLong.Value = sh.Cells(currentrow, 4).Text
        txbDescription.Value = sh.Cells(currentrow, 5)
        cbxType.Value = sh.Cells(currentrow, 6)
        txbAlternate.Value = sh.Cells(currentrow, 7)
        txbElevation.Value = sh.Cells(currentrow, 8)
        cbxGroup.Value = sh.Cells(currentrow, 9)
    
End Sub

Private Sub cmdAdd_Click()

    Set sh = ThisWorkbook.Sheets("Waypoints")
    Dim i As Long
    Dim existingrecord As Boolean
    Dim wpCount As Long
    
    lastRow = sh.Range("B" & Application.Rows.Count).End(xlUp).row + 1 'First Empty row!

    'Validate entry fields
    
        If Me.txbWaypointName.Value = "" Then
            MsgBox "Please enter a Waypoint Name"
        Exit Sub
        End If
    
        If IsNumeric(Me.txbLat.Value) = False Then
            MsgBox "Please enter a Decimal Latitude - no spaces, symbols or commas."
        Exit Sub
        End If
    
        If IsNumeric(Me.txbLong.Value) = False Then
            MsgBox "Please enter a Decimal Logitude - no spaces, symbols or commas."
        Exit Sub
        End If
    
        If Me.txbDescription.Value = "" Then
            MsgBox "Please enter a Waypoint Description"
        Exit Sub
        End If
    
        If Me.cbxType.Value = False Then
            MsgBox "Please enter the Waypoint type."
        Exit Sub
        End If
        
    'Checks for duplicate Waypoints

    For i = 3 To lastRow - 1
        If Trim(sh.Cells(i, 2)) = Me.txbWaypointName.Value Then
            existingrecord = True
                Exit For
        End If
    Next i

    If existingrecord = True Then
        MsgBox "This Waypoint already exists, the Waypoint name must be unique!", vbExclamation, "Add Waypoint"
        Exit Sub
    
    Else
            sh.Unprotect Password:="VFRPlanner2019"
            With sh
                .Range("B" & lastRow).Value = Me.txbWaypointName.Value 'Waypoint Name
                .Range("C" & lastRow).Value = Me.txbLat.Value 'Latitude
                .Range("D" & lastRow).Value = Me.txbLong.Value 'Longitude
                .Range("E" & lastRow).Value = Me.txbDescription.Value 'Waypoint Description
                .Range("F" & lastRow).Value = Me.cbxType.Value 'Waypoint Type
                .Range("G" & lastRow).Value = Me.txbAlternate.Value 'VFR Alternate
                .Range("H" & lastRow).Value = Me.txbElevation.Value 'Elevation
                .Range("I" & lastRow).Value = Me.cbxGroup.Value 'Group ID
                .Range("J" & lastRow).Value = 1 'Hidden number, ensure continuous data
                .Range("K3") = "=CONCATENATE($K$1,B3,$L$1,$M$1,C3,$N$1,D3,$O$1,I3,$P$1)": Range("K3:K" & lastRow).FillDown
            End With
            
            MsgBox "The waypoint " & Me.txbWaypointName.Value & " was added", vbInformation, "Waypoints"
    End If
    
    Call SortWaypointData
    Call resetWaypointForm
    
    sh.Protect Password:="VFRPlanner2019"
    ThisWorkbook.Save

End Sub


Attribute VB_Name = "localRoutes"
Sub localRoutes()

'Local routes as an array
Dim sh As Worksheet
Dim locRoute(1 To 5) As String
Dim i As Integer

Set sh = ThisWorkbook.Worksheets("Flight Planning")

    For i = 1 To 5
        locRoute(i) = sh.Range("AL118").Offset(i).Value
    Next i
    
    ' Print Waypoints from the array to the Immediate Window
    Debug.Print "locRoute"
    For i = LBound(locRoute) To UBound(locRoute)
        Debug.Print locRoute(i)
    Next i

End Sub


INQUEST-PP=macro
