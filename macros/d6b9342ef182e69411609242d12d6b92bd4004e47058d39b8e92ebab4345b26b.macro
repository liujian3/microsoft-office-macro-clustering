Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "md_NX_comdty1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub CommandButton1_Click()
    
    Dim blnScreenUpdating As Boolean: blnScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    On Error GoTo errorhandle
    
    Dim ws As Worksheet: Set ws = ActiveSheet
    Dim sFileName$
    sFileName = Application.GetOpenFilename( _
        FileFilter:="Excel Workbooks,*.xls; *.xlsx", _
        Title:="Open Data File Exported From Bloomberg OVDV page with in-the-moneyness column headings", _
        MultiSelect:=False)
    
    If sFileName = "False" Then Exit Sub

    Call Application.Workbooks.Open(sFileName)
    
    Dim wb As Workbook: Set wb = Application.ActiveWorkbook
    Dim dataOVDV As Variant: dataOVDV = getDataRange(ActiveSheet)
    Dim strOVDVVolAnchor$: strOVDVVolAnchor$ = "NX_M_" & ws.Name & "_OVDVVolAnchor"
    Dim rngAnchor As Range: Set rngAnchor = ws.Range(strOVDVVolAnchor)
    
    Call populateOVDVdata(rngAnchor, dataOVDV)
    
    Dim lDisplayAlerts As Boolean: lDisplayAlerts = Application.DisplayAlerts
    Application.DisplayAlerts = False
    Call wb.Close
    Application.DisplayAlerts = lDisplayAlerts
    
    ActiveSheet.Calculate
    
    Application.ScreenUpdating = blnScreenUpdating
    
    Exit Sub
    
errorhandle:

    Application.ScreenUpdating = blnScreenUpdating
    
    MsgBox "Imported Spreadsheet Should Be Originally Exported From Bloomberg OVDV Cmdty page."
    
End Sub

' get OVDV data range from BBG export Excel file and convert to Numerix data convention
Private Function getDataRange(ws As Worksheet)

    ' BBG exported Excel worksheet used range may include rows and columns containing only space characters
    Dim rng As Range: Set rng = ws.UsedRange
    
    If rng Is Nothing Then Exit Function
    
    Dim firstRow As Integer: firstRow = rng.Row
    Dim firstCol As Integer: firstCol = rng.Column
    Dim rowCount As Integer: rowCount = rng.Rows.Count
    Dim colCount As Integer: colCount = rng.Columns.Count
    Dim lastColOffOne As Integer: lastColOffOne = firstCol + colCount

    ' find the first row of BBG OVDV data in the exported Excel datasheet
    Dim i As Integer
    For i = 1 To rowCount
        If rng.Cells(i, 1).End(xlToRight).Column < lastColOffOne Then Exit For
    Next i
    
    If i = rowCount Then Exit Function
    
    Set rng = ws.Cells(i, 1).End(xlToRight).CurrentRegion
    With rng
        rowCount = .Rows.Count
        colCount = .Columns.Count
        Dim vntArray(1 To 3) As Variant
        Dim arrMaturity As Variant: arrMaturity = ws.Range(.Cells(2, 1), .Cells(rowCount, 1))
        Dim arrStrikes As Variant: arrStrikes = ws.Range(.Cells(1, 2), .Cells(1, colCount))
        Dim arrVolatility As Variant: arrVolatility = ws.Range(.Cells(2, 2), .Cells(rowCount, colCount))
    End With
    
    For i = 1 To UBound(arrMaturity, 1)
        arrMaturity(i, 1) = CDate(arrMaturity(i, 1))
    Next i
    
    For i = 1 To UBound(arrStrikes, 2)
        arrStrikes(1, i) = VBA.IIf(UCase(arrStrikes(1, i)) = "ATM", 1#, arrStrikes(1, i))
    Next i
    
    Dim j As Integer
    For i = 1 To UBound(arrVolatility, 1)
        For j = 1 To UBound(arrVolatility, 2)
         arrVolatility(i, j) = arrVolatility(i, j) / 100#
        Next j
    Next i
        
    vntArray(1) = arrMaturity
    vntArray(2) = arrStrikes
    vntArray(3) = arrVolatility
    getDataRange = vntArray
    
End Function

' populate based on current OVDV data table structure on the commodity market data sheet
Private Sub populateOVDVdata(OVDVVolAnchor As Range, OVDVdata As Variant)

    Call clearOVDVdata(OVDVVolAnchor)
    
    OVDVVolAnchor.Offset(-1, 0) = "Volatility Surface from Bloomberg OVDV Function"

    Range(OVDVVolAnchor.Offset(2, 0), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, 0)) = OVDVdata(1)
    Range(OVDVVolAnchor.Offset(0, 1), OVDVVolAnchor.Offset(0, UBound(OVDVdata(2), 2))) = OVDVdata(2)
    Range(OVDVVolAnchor.Offset(2, 1), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, UBound(OVDVdata(2), 2))) = OVDVdata(3)

    Dim strSpotOutput$: strSpotOutput = "NX_M_" & OVDVVolAnchor.Worksheet.Name & "_SpotOutput"
    Dim c As Range: Set c = OVDVVolAnchor.Offset(1, 1)
    Dim i As Integer
    For i = 1 To UBound(OVDVdata(2), 2)
        c.Formula = "=" & strSpotOutput & "*" & c.Offset(-1, 0).AddressLocal
        Set c = c.Offset(0, 1)
    Next i
        
End Sub

Private Sub clearOVDVdata(OVDVVolAnchor As Range)

    OVDVVolAnchor.Offset(2, 0).CurrentRegion.ClearContents

End Sub

Attribute VB_Name = "md_NX_comdty2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub CommandButton1_Click()
    
    Dim blnScreenUpdating As Boolean: blnScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    On Error GoTo errorhandle
    
    Dim ws As Worksheet: Set ws = ActiveSheet
    Dim sFileName$
    sFileName = Application.GetOpenFilename( _
        FileFilter:="Excel Workbooks,*.xls; *.xlsx", _
        Title:="Open Data File Exported From Bloomberg OVDV page with in-the-moneyness column headings", _
        MultiSelect:=False)
    
    If sFileName = "False" Then Exit Sub

    Call Application.Workbooks.Open(sFileName)
    
    Dim wb As Workbook: Set wb = Application.ActiveWorkbook
    Dim dataOVDV As Variant: dataOVDV = getDataRange(ActiveSheet)
    Dim strOVDVVolAnchor$: strOVDVVolAnchor$ = "NX_M_" & ws.Name & "_OVDVVolAnchor"
    Dim rngAnchor As Range: Set rngAnchor = ws.Range(strOVDVVolAnchor)
    
    Call populateOVDVdata(rngAnchor, dataOVDV)
    
    Dim lDisplayAlerts As Boolean: lDisplayAlerts = Application.DisplayAlerts
    Application.DisplayAlerts = False
    Call wb.Close
    Application.DisplayAlerts = lDisplayAlerts
    
    ActiveSheet.Calculate
    
    Application.ScreenUpdating = blnScreenUpdating
    
    Exit Sub
    
errorhandle:

    Application.ScreenUpdating = blnScreenUpdating
    
    MsgBox "Imported Spreadsheet Should Be Originally Exported From Bloomberg OVDV Cmdty page."
    
End Sub

' get OVDV data range from BBG export Excel file and convert to Numerix data convention
Private Function getDataRange(ws As Worksheet)

    ' BBG exported Excel worksheet used range may include rows and columns containing only space characters
    Dim rng As Range: Set rng = ws.UsedRange
    
    If rng Is Nothing Then Exit Function
    
    Dim firstRow As Integer: firstRow = rng.Row
    Dim firstCol As Integer: firstCol = rng.Column
    Dim rowCount As Integer: rowCount = rng.Rows.Count
    Dim colCount As Integer: colCount = rng.Columns.Count
    Dim lastColOffOne As Integer: lastColOffOne = firstCol + colCount

    ' find the first row of BBG OVDV data in the exported Excel datasheet
    Dim i As Integer
    For i = 1 To rowCount
        If rng.Cells(i, 1).End(xlToRight).Column < lastColOffOne Then Exit For
    Next i
    
    If i = rowCount Then Exit Function
    
    Set rng = ws.Cells(i, 1).End(xlToRight).CurrentRegion
    With rng
        rowCount = .Rows.Count
        colCount = .Columns.Count
        Dim vntArray(1 To 3) As Variant
        Dim arrMaturity As Variant: arrMaturity = ws.Range(.Cells(2, 1), .Cells(rowCount, 1))
        Dim arrStrikes As Variant: arrStrikes = ws.Range(.Cells(1, 2), .Cells(1, colCount))
        Dim arrVolatility As Variant: arrVolatility = ws.Range(.Cells(2, 2), .Cells(rowCount, colCount))
    End With
    
    For i = 1 To UBound(arrMaturity, 1)
        arrMaturity(i, 1) = CDate(arrMaturity(i, 1))
    Next i
    
    For i = 1 To UBound(arrStrikes, 2)
        arrStrikes(1, i) = VBA.IIf(UCase(arrStrikes(1, i)) = "ATM", 1#, arrStrikes(1, i))
    Next i
    
    Dim j As Integer
    For i = 1 To UBound(arrVolatility, 1)
        For j = 1 To UBound(arrVolatility, 2)
         arrVolatility(i, j) = arrVolatility(i, j) / 100#
        Next j
    Next i
        
    vntArray(1) = arrMaturity
    vntArray(2) = arrStrikes
    vntArray(3) = arrVolatility
    getDataRange = vntArray
    
End Function

' populate based on current OVDV data table structure on the commodity market data sheet
Private Sub populateOVDVdata(OVDVVolAnchor As Range, OVDVdata As Variant)

    Call clearOVDVdata(OVDVVolAnchor)
    
    OVDVVolAnchor.Offset(-1, 0) = "Volatility Surface from Bloomberg OVDV Function"

    Range(OVDVVolAnchor.Offset(2, 0), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, 0)) = OVDVdata(1)
    Range(OVDVVolAnchor.Offset(0, 1), OVDVVolAnchor.Offset(0, UBound(OVDVdata(2), 2))) = OVDVdata(2)
    Range(OVDVVolAnchor.Offset(2, 1), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, UBound(OVDVdata(2), 2))) = OVDVdata(3)

    Dim strSpotOutput$: strSpotOutput = "NX_M_" & OVDVVolAnchor.Worksheet.Name & "_SpotOutput"
    Dim c As Range: Set c = OVDVVolAnchor.Offset(1, 1)
    Dim i As Integer
    For i = 1 To UBound(OVDVdata(2), 2)
        c.Formula = "=" & strSpotOutput & "*" & c.Offset(-1, 0).AddressLocal
        Set c = c.Offset(0, 1)
    Next i
        
End Sub

Private Sub clearOVDVdata(OVDVVolAnchor As Range)

    OVDVVolAnchor.Offset(2, 0).CurrentRegion.ClearContents

End Sub

Attribute VB_Name = "md_NX_comdty3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub CommandButton1_Click()
    
    Dim blnScreenUpdating As Boolean: blnScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    On Error GoTo errorhandle
    
    Dim ws As Worksheet: Set ws = ActiveSheet
    Dim sFileName$
    sFileName = Application.GetOpenFilename( _
        FileFilter:="Excel Workbooks,*.xls; *.xlsx", _
        Title:="Open Data File Exported From Bloomberg OVDV page with in-the-moneyness column headings", _
        MultiSelect:=False)
    
    If sFileName = "False" Then Exit Sub

    Call Application.Workbooks.Open(sFileName)
    
    Dim wb As Workbook: Set wb = Application.ActiveWorkbook
    Dim dataOVDV As Variant: dataOVDV = getDataRange(ActiveSheet)
    Dim strOVDVVolAnchor$: strOVDVVolAnchor$ = "NX_M_" & ws.Name & "_OVDVVolAnchor"
    Dim rngAnchor As Range: Set rngAnchor = ws.Range(strOVDVVolAnchor)
    
    Call populateOVDVdata(rngAnchor, dataOVDV)
    
    Dim lDisplayAlerts As Boolean: lDisplayAlerts = Application.DisplayAlerts
    Application.DisplayAlerts = False
    Call wb.Close
    Application.DisplayAlerts = lDisplayAlerts
    
    ActiveSheet.Calculate
    
    Application.ScreenUpdating = blnScreenUpdating
    
    Exit Sub
    
errorhandle:

    Application.ScreenUpdating = blnScreenUpdating
    
    MsgBox "Imported Spreadsheet Should Be Originally Exported From Bloomberg OVDV Cmdty page."
    
End Sub

' get OVDV data range from BBG export Excel file and convert to Numerix data convention
Private Function getDataRange(ws As Worksheet)

    ' BBG exported Excel worksheet used range may include rows and columns containing only space characters
    Dim rng As Range: Set rng = ws.UsedRange
    
    If rng Is Nothing Then Exit Function
    
    Dim firstRow As Integer: firstRow = rng.Row
    Dim firstCol As Integer: firstCol = rng.Column
    Dim rowCount As Integer: rowCount = rng.Rows.Count
    Dim colCount As Integer: colCount = rng.Columns.Count
    Dim lastColOffOne As Integer: lastColOffOne = firstCol + colCount

    ' find the first row of BBG OVDV data in the exported Excel datasheet
    Dim i As Integer
    For i = 1 To rowCount
        If rng.Cells(i, 1).End(xlToRight).Column < lastColOffOne Then Exit For
    Next i
    
    If i = rowCount Then Exit Function
    
    Set rng = ws.Cells(i, 1).End(xlToRight).CurrentRegion
    With rng
        rowCount = .Rows.Count
        colCount = .Columns.Count
        Dim vntArray(1 To 3) As Variant
        Dim arrMaturity As Variant: arrMaturity = ws.Range(.Cells(2, 1), .Cells(rowCount, 1))
        Dim arrStrikes As Variant: arrStrikes = ws.Range(.Cells(1, 2), .Cells(1, colCount))
        Dim arrVolatility As Variant: arrVolatility = ws.Range(.Cells(2, 2), .Cells(rowCount, colCount))
    End With
    
    For i = 1 To UBound(arrMaturity, 1)
        arrMaturity(i, 1) = CDate(arrMaturity(i, 1))
    Next i
    
    For i = 1 To UBound(arrStrikes, 2)
        arrStrikes(1, i) = VBA.IIf(UCase(arrStrikes(1, i)) = "ATM", 1#, arrStrikes(1, i))
    Next i
    
    Dim j As Integer
    For i = 1 To UBound(arrVolatility, 1)
        For j = 1 To UBound(arrVolatility, 2)
         arrVolatility(i, j) = arrVolatility(i, j) / 100#
        Next j
    Next i
        
    vntArray(1) = arrMaturity
    vntArray(2) = arrStrikes
    vntArray(3) = arrVolatility
    getDataRange = vntArray
    
End Function

' populate based on current OVDV data table structure on the commodity market data sheet
Private Sub populateOVDVdata(OVDVVolAnchor As Range, OVDVdata As Variant)

    Call clearOVDVdata(OVDVVolAnchor)
    
    OVDVVolAnchor.Offset(-1, 0) = "Volatility Surface from Bloomberg OVDV Function"

    Range(OVDVVolAnchor.Offset(2, 0), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, 0)) = OVDVdata(1)
    Range(OVDVVolAnchor.Offset(0, 1), OVDVVolAnchor.Offset(0, UBound(OVDVdata(2), 2))) = OVDVdata(2)
    Range(OVDVVolAnchor.Offset(2, 1), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, UBound(OVDVdata(2), 2))) = OVDVdata(3)

    Dim strSpotOutput$: strSpotOutput = "NX_M_" & OVDVVolAnchor.Worksheet.Name & "_SpotOutput"
    Dim c As Range: Set c = OVDVVolAnchor.Offset(1, 1)
    Dim i As Integer
    For i = 1 To UBound(OVDVdata(2), 2)
        c.Formula = "=" & strSpotOutput & "*" & c.Offset(-1, 0).AddressLocal
        Set c = c.Offset(0, 1)
    Next i
        
End Sub

Private Sub clearOVDVdata(OVDVVolAnchor As Range)

    OVDVVolAnchor.Offset(2, 0).CurrentRegion.ClearContents

End Sub

Attribute VB_Name = "md_NX_comdty4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub CommandButton1_Click()
    
    Dim blnScreenUpdating As Boolean: blnScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    On Error GoTo errorhandle
    
    Dim ws As Worksheet: Set ws = ActiveSheet
    Dim sFileName$
    sFileName = Application.GetOpenFilename( _
        FileFilter:="Excel Workbooks,*.xls; *.xlsx", _
        Title:="Open Data File Exported From Bloomberg OVDV page with in-the-moneyness column headings", _
        MultiSelect:=False)
    
    If sFileName = "False" Then Exit Sub

    Call Application.Workbooks.Open(sFileName)
    
    Dim wb As Workbook: Set wb = Application.ActiveWorkbook
    Dim dataOVDV As Variant: dataOVDV = getDataRange(ActiveSheet)
    Dim strOVDVVolAnchor$: strOVDVVolAnchor$ = "NX_M_" & ws.Name & "_OVDVVolAnchor"
    Dim rngAnchor As Range: Set rngAnchor = ws.Range(strOVDVVolAnchor)
    
    Call populateOVDVdata(rngAnchor, dataOVDV)
    
    Dim lDisplayAlerts As Boolean: lDisplayAlerts = Application.DisplayAlerts
    Application.DisplayAlerts = False
    Call wb.Close
    Application.DisplayAlerts = lDisplayAlerts
    
    ActiveSheet.Calculate
    
    Application.ScreenUpdating = blnScreenUpdating
    
    Exit Sub
    
errorhandle:

    Application.ScreenUpdating = blnScreenUpdating
    
    MsgBox "Imported Spreadsheet Should Be Originally Exported From Bloomberg OVDV Cmdty page."
    
End Sub

' get OVDV data range from BBG export Excel file and convert to Numerix data convention
Private Function getDataRange(ws As Worksheet)

    ' BBG exported Excel worksheet used range may include rows and columns containing only space characters
    Dim rng As Range: Set rng = ws.UsedRange
    
    If rng Is Nothing Then Exit Function
    
    Dim firstRow As Integer: firstRow = rng.Row
    Dim firstCol As Integer: firstCol = rng.Column
    Dim rowCount As Integer: rowCount = rng.Rows.Count
    Dim colCount As Integer: colCount = rng.Columns.Count
    Dim lastColOffOne As Integer: lastColOffOne = firstCol + colCount

    ' find the first row of BBG OVDV data in the exported Excel datasheet
    Dim i As Integer
    For i = 1 To rowCount
        If rng.Cells(i, 1).End(xlToRight).Column < lastColOffOne Then Exit For
    Next i
    
    If i = rowCount Then Exit Function
    
    Set rng = ws.Cells(i, 1).End(xlToRight).CurrentRegion
    With rng
        rowCount = .Rows.Count
        colCount = .Columns.Count
        Dim vntArray(1 To 3) As Variant
        Dim arrMaturity As Variant: arrMaturity = ws.Range(.Cells(2, 1), .Cells(rowCount, 1))
        Dim arrStrikes As Variant: arrStrikes = ws.Range(.Cells(1, 2), .Cells(1, colCount))
        Dim arrVolatility As Variant: arrVolatility = ws.Range(.Cells(2, 2), .Cells(rowCount, colCount))
    End With
    
    For i = 1 To UBound(arrMaturity, 1)
        arrMaturity(i, 1) = CDate(arrMaturity(i, 1))
    Next i
    
    For i = 1 To UBound(arrStrikes, 2)
        arrStrikes(1, i) = VBA.IIf(UCase(arrStrikes(1, i)) = "ATM", 1#, arrStrikes(1, i))
    Next i
    
    Dim j As Integer
    For i = 1 To UBound(arrVolatility, 1)
        For j = 1 To UBound(arrVolatility, 2)
         arrVolatility(i, j) = arrVolatility(i, j) / 100#
        Next j
    Next i
        
    vntArray(1) = arrMaturity
    vntArray(2) = arrStrikes
    vntArray(3) = arrVolatility
    getDataRange = vntArray
    
End Function

' populate based on current OVDV data table structure on the commodity market data sheet
Private Sub populateOVDVdata(OVDVVolAnchor As Range, OVDVdata As Variant)

    Call clearOVDVdata(OVDVVolAnchor)
    
    OVDVVolAnchor.Offset(-1, 0) = "Volatility Surface from Bloomberg OVDV Function"

    Range(OVDVVolAnchor.Offset(2, 0), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, 0)) = OVDVdata(1)
    Range(OVDVVolAnchor.Offset(0, 1), OVDVVolAnchor.Offset(0, UBound(OVDVdata(2), 2))) = OVDVdata(2)
    Range(OVDVVolAnchor.Offset(2, 1), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, UBound(OVDVdata(2), 2))) = OVDVdata(3)

    Dim strSpotOutput$: strSpotOutput = "NX_M_" & OVDVVolAnchor.Worksheet.Name & "_SpotOutput"
    Dim c As Range: Set c = OVDVVolAnchor.Offset(1, 1)
    Dim i As Integer
    For i = 1 To UBound(OVDVdata(2), 2)
        c.Formula = "=" & strSpotOutput & "*" & c.Offset(-1, 0).AddressLocal
        Set c = c.Offset(0, 1)
    Next i
        
End Sub

Private Sub clearOVDVdata(OVDVVolAnchor As Range)

    OVDVVolAnchor.Offset(2, 0).CurrentRegion.ClearContents

End Sub

Attribute VB_Name = "md_NX_comdty5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub CommandButton1_Click()
    
    Dim blnScreenUpdating As Boolean: blnScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    On Error GoTo errorhandle
    
    Dim ws As Worksheet: Set ws = ActiveSheet
    Dim sFileName$
    sFileName = Application.GetOpenFilename( _
        FileFilter:="Excel Workbooks,*.xls; *.xlsx", _
        Title:="Open Data File Exported From Bloomberg OVDV page with in-the-moneyness column headings", _
        MultiSelect:=False)
    
    If sFileName = "False" Then Exit Sub

    Call Application.Workbooks.Open(sFileName)
    
    Dim wb As Workbook: Set wb = Application.ActiveWorkbook
    Dim dataOVDV As Variant: dataOVDV = getDataRange(ActiveSheet)
    Dim strOVDVVolAnchor$: strOVDVVolAnchor$ = "NX_M_" & ws.Name & "_OVDVVolAnchor"
    Dim rngAnchor As Range: Set rngAnchor = ws.Range(strOVDVVolAnchor)
    
    Call populateOVDVdata(rngAnchor, dataOVDV)
    
    Dim lDisplayAlerts As Boolean: lDisplayAlerts = Application.DisplayAlerts
    Application.DisplayAlerts = False
    Call wb.Close
    Application.DisplayAlerts = lDisplayAlerts
    
    ActiveSheet.Calculate
    
    Application.ScreenUpdating = blnScreenUpdating
    
    Exit Sub
    
errorhandle:

    Application.ScreenUpdating = blnScreenUpdating
    
    MsgBox "Imported Spreadsheet Should Be Originally Exported From Bloomberg OVDV Cmdty page."
    
End Sub

' get OVDV data range from BBG export Excel file and convert to Numerix data convention
Private Function getDataRange(ws As Worksheet)

    ' BBG exported Excel worksheet used range may include rows and columns containing only space characters
    Dim rng As Range: Set rng = ws.UsedRange
    
    If rng Is Nothing Then Exit Function
    
    Dim firstRow As Integer: firstRow = rng.Row
    Dim firstCol As Integer: firstCol = rng.Column
    Dim rowCount As Integer: rowCount = rng.Rows.Count
    Dim colCount As Integer: colCount = rng.Columns.Count
    Dim lastColOffOne As Integer: lastColOffOne = firstCol + colCount

    ' find the first row of BBG OVDV data in the exported Excel datasheet
    Dim i As Integer
    For i = 1 To rowCount
        If rng.Cells(i, 1).End(xlToRight).Column < lastColOffOne Then Exit For
    Next i
    
    If i = rowCount Then Exit Function
    
    Set rng = ws.Cells(i, 1).End(xlToRight).CurrentRegion
    With rng
        rowCount = .Rows.Count
        colCount = .Columns.Count
        Dim vntArray(1 To 3) As Variant
        Dim arrMaturity As Variant: arrMaturity = ws.Range(.Cells(2, 1), .Cells(rowCount, 1))
        Dim arrStrikes As Variant: arrStrikes = ws.Range(.Cells(1, 2), .Cells(1, colCount))
        Dim arrVolatility As Variant: arrVolatility = ws.Range(.Cells(2, 2), .Cells(rowCount, colCount))
    End With
    
    For i = 1 To UBound(arrMaturity, 1)
        arrMaturity(i, 1) = CDate(arrMaturity(i, 1))
    Next i
    
    For i = 1 To UBound(arrStrikes, 2)
        arrStrikes(1, i) = VBA.IIf(UCase(arrStrikes(1, i)) = "ATM", 1#, arrStrikes(1, i))
    Next i
    
    Dim j As Integer
    For i = 1 To UBound(arrVolatility, 1)
        For j = 1 To UBound(arrVolatility, 2)
         arrVolatility(i, j) = arrVolatility(i, j) / 100#
        Next j
    Next i
        
    vntArray(1) = arrMaturity
    vntArray(2) = arrStrikes
    vntArray(3) = arrVolatility
    getDataRange = vntArray
    
End Function

' populate based on current OVDV data table structure on the commodity market data sheet
Private Sub populateOVDVdata(OVDVVolAnchor As Range, OVDVdata As Variant)

    Call clearOVDVdata(OVDVVolAnchor)
    
    OVDVVolAnchor.Offset(-1, 0) = "Volatility Surface from Bloomberg OVDV Function"

    Range(OVDVVolAnchor.Offset(2, 0), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, 0)) = OVDVdata(1)
    Range(OVDVVolAnchor.Offset(0, 1), OVDVVolAnchor.Offset(0, UBound(OVDVdata(2), 2))) = OVDVdata(2)
    Range(OVDVVolAnchor.Offset(2, 1), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, UBound(OVDVdata(2), 2))) = OVDVdata(3)

    Dim strSpotOutput$: strSpotOutput = "NX_M_" & OVDVVolAnchor.Worksheet.Name & "_SpotOutput"
    Dim c As Range: Set c = OVDVVolAnchor.Offset(1, 1)
    Dim i As Integer
    For i = 1 To UBound(OVDVdata(2), 2)
        c.Formula = "=" & strSpotOutput & "*" & c.Offset(-1, 0).AddressLocal
        Set c = c.Offset(0, 1)
    Next i
        
End Sub

Private Sub clearOVDVdata(OVDVVolAnchor As Range)

    OVDVVolAnchor.Offset(2, 0).CurrentRegion.ClearContents

End Sub

Attribute VB_Name = "md_NX_comdty6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub CommandButton1_Click()
    
    Dim blnScreenUpdating As Boolean: blnScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    On Error GoTo errorhandle
    
    Dim ws As Worksheet: Set ws = ActiveSheet
    Dim sFileName$
    sFileName = Application.GetOpenFilename( _
        FileFilter:="Excel Workbooks,*.xls; *.xlsx", _
        Title:="Open Data File Exported From Bloomberg OVDV page with in-the-moneyness column headings", _
        MultiSelect:=False)
    
    If sFileName = "False" Then Exit Sub

    Call Application.Workbooks.Open(sFileName)
    
    Dim wb As Workbook: Set wb = Application.ActiveWorkbook
    Dim dataOVDV As Variant: dataOVDV = getDataRange(ActiveSheet)
    Dim strOVDVVolAnchor$: strOVDVVolAnchor$ = "NX_M_" & ws.Name & "_OVDVVolAnchor"
    Dim rngAnchor As Range: Set rngAnchor = ws.Range(strOVDVVolAnchor)
    
    Call populateOVDVdata(rngAnchor, dataOVDV)
    
    Dim lDisplayAlerts As Boolean: lDisplayAlerts = Application.DisplayAlerts
    Application.DisplayAlerts = False
    Call wb.Close
    Application.DisplayAlerts = lDisplayAlerts
    
    ActiveSheet.Calculate
    
    Application.ScreenUpdating = blnScreenUpdating
    
    Exit Sub
    
errorhandle:

    Application.ScreenUpdating = blnScreenUpdating
    
    MsgBox "Imported Spreadsheet Should Be Originally Exported From Bloomberg OVDV Cmdty page."
    
End Sub

' get OVDV data range from BBG export Excel file and convert to Numerix data convention
Private Function getDataRange(ws As Worksheet)

    ' BBG exported Excel worksheet used range may include rows and columns containing only space characters
    Dim rng As Range: Set rng = ws.UsedRange
    
    If rng Is Nothing Then Exit Function
    
    Dim firstRow As Integer: firstRow = rng.Row
    Dim firstCol As Integer: firstCol = rng.Column
    Dim rowCount As Integer: rowCount = rng.Rows.Count
    Dim colCount As Integer: colCount = rng.Columns.Count
    Dim lastColOffOne As Integer: lastColOffOne = firstCol + colCount

    ' find the first row of BBG OVDV data in the exported Excel datasheet
    Dim i As Integer
    For i = 1 To rowCount
        If rng.Cells(i, 1).End(xlToRight).Column < lastColOffOne Then Exit For
    Next i
    
    If i = rowCount Then Exit Function
    
    Set rng = ws.Cells(i, 1).End(xlToRight).CurrentRegion
    With rng
        rowCount = .Rows.Count
        colCount = .Columns.Count
        Dim vntArray(1 To 3) As Variant
        Dim arrMaturity As Variant: arrMaturity = ws.Range(.Cells(2, 1), .Cells(rowCount, 1))
        Dim arrStrikes As Variant: arrStrikes = ws.Range(.Cells(1, 2), .Cells(1, colCount))
        Dim arrVolatility As Variant: arrVolatility = ws.Range(.Cells(2, 2), .Cells(rowCount, colCount))
    End With
    
    For i = 1 To UBound(arrMaturity, 1)
        arrMaturity(i, 1) = CDate(arrMaturity(i, 1))
    Next i
    
    For i = 1 To UBound(arrStrikes, 2)
        arrStrikes(1, i) = VBA.IIf(UCase(arrStrikes(1, i)) = "ATM", 1#, arrStrikes(1, i))
    Next i
    
    Dim j As Integer
    For i = 1 To UBound(arrVolatility, 1)
        For j = 1 To UBound(arrVolatility, 2)
         arrVolatility(i, j) = arrVolatility(i, j) / 100#
        Next j
    Next i
        
    vntArray(1) = arrMaturity
    vntArray(2) = arrStrikes
    vntArray(3) = arrVolatility
    getDataRange = vntArray
    
End Function

' populate based on current OVDV data table structure on the commodity market data sheet
Private Sub populateOVDVdata(OVDVVolAnchor As Range, OVDVdata As Variant)

    Call clearOVDVdata(OVDVVolAnchor)
    
    OVDVVolAnchor.Offset(-1, 0) = "Volatility Surface from Bloomberg OVDV Function"

    Range(OVDVVolAnchor.Offset(2, 0), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, 0)) = OVDVdata(1)
    Range(OVDVVolAnchor.Offset(0, 1), OVDVVolAnchor.Offset(0, UBound(OVDVdata(2), 2))) = OVDVdata(2)
    Range(OVDVVolAnchor.Offset(2, 1), OVDVVolAnchor.Offset(UBound(OVDVdata(1), 1) + 1, UBound(OVDVdata(2), 2))) = OVDVdata(3)

    Dim strSpotOutput$: strSpotOutput = "NX_M_" & OVDVVolAnchor.Worksheet.Name & "_SpotOutput"
    Dim c As Range: Set c = OVDVVolAnchor.Offset(1, 1)
    Dim i As Integer
    For i = 1 To UBound(OVDVdata(2), 2)
        c.Formula = "=" & strSpotOutput & "*" & c.Offset(-1, 0).AddressLocal
        Set c = c.Offset(0, 1)
    Next i
        
End Sub

Private Sub clearOVDVdata(OVDVVolAnchor As Range)

    OVDVVolAnchor.Offset(2, 0).CurrentRegion.ClearContents

End Sub



INQUEST-PP=macro
