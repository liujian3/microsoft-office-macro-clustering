Attribute VB_Name = "BatchProcess"
''Option Explicit
'
'Sub testprocedure()
'    FileToImport = ReturnAllFiles("C:\Users\zbz0306\Documents\_20 WIP\Material PSI\Sample Data")
'    Call RunTheBatch
'End Sub
'
'Public Sub RunTheBatch()
'    Dim FileCounter As Long
'
''    Application.ScreenUpdating = False
''    Application.DisplayAlerts = False
''    Sync_Name = ActiveWorkbook.Name
'    For FileCounter = LBound(FileToImport, 1) To UBound(FileToImport, 1)
'        CurrentDemandFilePath = FileToImport(FileCounter, PATH_ARRAY_ENTRY)
'        CurrentDemandFileName = FileToImport(FileCounter, NAME_ARRAY_ENTRY)
'
'        'Make sure the file is valid
'        Call CheckFile(CurrentDemandFileName, DemandFileType, _
'                   DemandNumberOfColumns, DemandNumberOfRows, _
'                   DemandNumberOfWeeks)
'
'        If DemandFileType > [_Unknown_Files_First] And _
'           DemandFileType < [_Unknown_Files_Last] Then
'            'Data is not valid
''!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
''   need to put the error code in here
''   Will probably include re-opening the OpenAndVet form
''!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'        End If
'
'        'Run the report generator
'        Exit Sub
'        If Build_Report = False Then
'            Windows(Sync_Name).Activate
'            Sheets("WORKING").Select
'            MsgBox "There's a problem with the file:" & _
'                vbCrLf & FileToImport(FileCounter, NAME_ARRAY_ENTRY)
'            frmOpen.Show
'            Exit Sub
'        End If
'        'Save the generated report
'        Call Spin_Off_File_B(FileCounter, _
'            "C:\Users\zbz0306\Documents\_20 WIP\Material PSI\Sample Data\rpts\", Sync_Name)
'
'        'Reset the workbook for the next file
'        Call SetupForUsers
'    Next FileCounter
'End Sub
'
'Private Function ReturnAllFiles(ByVal SourcePath As String) As Variant
''Returns an array with all of the file paths and names in the selected folder
'    Dim arrFiles() As String
'    Dim FSObject As New FileSystemObject
'    Dim SourceFolder As Folder
'    Dim MaterialFile As File
'    Dim FileCounter As Long
'
'    Set SourceFolder = FSObject.GetFolder(SourcePath)
'
'    ReDim arrFiles(1 To SourceFolder.Files.Count, 1 To 2)
'
'    FileCounter = 1
'    For Each MaterialFile In SourceFolder.Files
'        arrFiles(FileCounter, PATH_ARRAY_ENTRY) = MaterialFile.Path
'        arrFiles(FileCounter, NAME_ARRAY_ENTRY) = MaterialFile.Name
'        FileCounter = FileCounter + 1
'    Next MaterialFile
'    ReturnAllFiles = arrFiles
'End Function
'
'Sub s()
'Dim v As Variant
'Dim FileCounter As Long
' v = ReturnAllFiles("C:\Users\zbz0306\Documents\_20 WIP\Material PSI\Sample Data")
'FileCounter = 1
'For FileCounter = 1 To UBound(v, 1)
'    Debug.Print v(FileCounter, 1) & " " & v(FileCounter, 2)
'Next
'End Sub
'
'Private Function VetFile(ByVal Sync_Name1 As String) As Boolean
''
'On Error GoTo error_line
'    Dim txtFileName As String '
'    txtFileName = Sheets("BIN").Range("E2").Value
'    '
'    Workbooks.Open Filename:=txtFileName, ReadOnly:=True
'    Target_Name = ActiveWorkbook.Name
'    '
'    Windows(Sync_Name1).Activate
'    '
'    If Check_File(Sync_Name1) = True Then
'        VetFile = True
'    Else
'        VetFile = False
'    End If
'Exit Function
'error_line:
'    VetFile = False
'    '
'End Function
'
'Private Function Check_File(ByVal Sync_Name2 As String) As Boolean
'    Dim Col_Total As Long
'    Dim Row_Total As Long
'    Dim File_type As String
'    Dim File_Desc As String
'    Dim Week_Total As Long
'    '
'    Windows(Target_Name).Activate
'    Col_Total = Application.WorksheetFunction.CountA(Range("A1:CZ1"))
'    Row_Total = Application.WorksheetFunction.CountA(Range("A2:A65500"))
'    '
'    '
''=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'    ' Find File Type
''=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'    ' VEN_SUP - Vendor Supply
'    ' VEN_DEM - Vendor Demand
'    '
'    ' MAT_SUP - Material Supply
'    ' MAT_PRO - Material Production
'    '
'    ' PLA_SUP - Planned Supply
'    ' PLA_SUN - Planned Supply NO STANDARD COST
'    ' PLA_DEM - Planned Demand
'    ' PLA_DEN - Planned Deamnd NO STANDARD COST
'    '
'    ' PLM_SUP - Material Planned Supply
'    ' PLM_SUN - Material Planned Supply NO STANDARD COST
'    ' PLM_DEM - Material Planned Demand
'    ' PLM_DEN - Material Planned Deamnd NO STANDARD COST
'    '
'    ' UNK_VEN - Unknown Vendor File
'    ' UNK_MAT - Unknown Material File
'    ' UNK_UNK - Unknown file
'    '
'    '==============
'    If Left((Range("A1").Value), 6) = "Vendor" Then
'    ' VEN_SUP - Vendor Supply
'    ' VEN_DEM - Vendor Demand
'    '==============
'        '
'        ' VEN_SUP
'        ' O/D supply
'        If Right((Range("J1").Value), 6) = "supply" Then
'            '
'            File_type = "VEN_SUP"
'            File_Desc = "Vendor Supply File"
'            Week_Total = Application.WorksheetFunction.CountA(Range("L1:CZ1"))
'            '
'        ' VEN_DEM
'        ' O/D demand
'        ElseIf Right((Range("J1").Value), 6) = "demand" Then
'            '
'            File_type = "VEN_DEM"
'            File_Desc = "Vendor Demand File"
'            Week_Total = Application.WorksheetFunction.CountA(Range("L1:CZ1"))
'            '
'        Else
'            '
'            File_type = "UNK_VEN"
'            File_Desc = "Unknown Vendor File"
'            Week_Total = "NA"
'            '
'        End If
'
'    '==============
'    ElseIf Left((Range("A1").Value), 5) = "Plant" Then
'    ' MAT_SUP - Material Supply
'    ' MAT_PRO - Material Production
'    '==============
'        '
'        ' MAT_SUP
'        ' O/D supply
'        If Right((Range("H1").Value), 6) = "supply" Then
'            '
'            File_type = "MAT_SUP"
'            File_Desc = "Material Supply File"
'            Week_Total = Application.WorksheetFunction.CountA(Range("J1:CZ1"))
'            '
'        ' MAT_PRO
'        ' O/D demand
'        ElseIf Right((Range("H1").Value), 6) = "demand" Then
'            '
'            File_type = "MAT_PRO"
'            File_Desc = "Material Production File"
'            Week_Total = Application.WorksheetFunction.CountA(Range("J1:CZ1"))
'            '
'        Else
'            '
'            File_type = "UNK_MAT"
'            Week_Total = "NA"
'            '
'        End If
'        '
'    '==============
'    ElseIf Left((Range("A1").Value), 3) = "MRP" And Left((Range("B1").Value), 5) = "Vendo" Then
'    ' PLA_SUP - Planned Supply
'    ' PLA_SUN - Planned Supply NO STANDARD COST
'    ' PLA_DEM - Planned Demand
'    ' PLA_DEN - Planned Deamnd NO STANDARD COST
'    '==============
'        '
'        '-----------------
'        ' Standard cost
'        If Left((Range("H1").Value), 8) = "Standard" Then
'            '
'            If Right((Range("L1").Value), 6) = "demand" Then
'                ' PLA_DEM - Planned Demand (with Standard Cost)
'                File_type = "PLA_DEM"
'                File_Desc = "Production Demand File (with Cost)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("N1:CZ1"))
'            Else
'                ' PLA_SUP - Planned Supply (with Standard Cost)
'                File_type = "PLA_SUP"
'                File_Desc = "Production Supply File (with Cost)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("M1:CZ1"))
'
'            End If
'            '
'        '-----------------
'        ' NO Standard cost
'        Else
'            '
'            If Right((Range("K1").Value), 6) = "demand" Then
'                ' PLA_DEN - Planned Demand (with Standard Cost)
'                File_type = "PLA_DEN"
'                File_Desc = "Production Demand File (No Cost Data)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("M1:CZ1"))
'            Else
'                ' PLA_SUN - Planned Supply (with Standard Cost)
'                File_type = "PLA_SUN"
'                File_Desc = "Production Supply File (No Cost Data)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("M1:CZ1"))
'
'            End If
'            '
'        End If
'        '
'    '==============
'    ElseIf Left((Range("A1").Value), 3) = "MRP" And Left((Range("B1").Value), 5) = "Plant" Then
'    ' PLM_SUP - Material Planned Supply
'    ' PLM_SUN - Material Planned Supply NO STANDARD COST
'    ' PLM_DEM - Material Planned Demand
'    ' PLM_DEN - Material Planned Deamnd NO STANDARD COST
'    '==============
'        '
'        '-----------------
'        ' Standard cost
'        If Left((Range("F1").Value), 8) = "Standard" Then
'            '
'            If Right((Range("I1").Value), 5) = "Stock" Then
'                ' PLM_DEM - Material Planned Demand (with Standard Cost)
'                File_type = "PLM_DEM"
'                File_Desc = "Material Production Demand File (with Cost)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("L1:CZ1"))
'            Else
'                ' PLM_SUP - Material Planned Supply (with Standard Cost)
'                File_type = "PLM_SUP"
'                File_Desc = "Material Production Supply File (with Cost)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("K1:CZ1"))
'
'            End If
'            '
'        '-----------------
'        ' NO Standard cost
'        Else
'            '
'            If Right((Range("I1").Value), 6) = "demand" Then
'                ' PLM_DEN - Material Planned Demand (with Standard Cost)
'                File_type = "PLM_DEN"
'                File_Desc = "Material Production Demand File (No Cost Data)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("K1:CZ1"))
'            Else
'                ' PLM_SUN - Material Planned Supply (with Standard Cost)
'                File_type = "PLM_SUN"
'                File_Desc = "Material Production Supply File (No Cost Data)"
'                Week_Total = Application.WorksheetFunction.CountA(Range("K1:CZ1"))
'
'            End If
'            '
'        End If
'        '
'    Else
'        '
'        File_type = "UNK_UNK"
'        File_Desc = "Mystery File"
'        Week_Total = 1
'        '
'    End If
'    '
'    '
''=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'    ' Populate Form
''=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'    '
'    '
'    '
''    lblFileName = Target_Name
''    lblFileType = File_Desc
''    lblWeeks = (Week_Total - 1) ' Account for "total" column
''    lblRows = (Row_Total)
''    lblCode = File_Type
'    '
'    If Left(File_type, 3) = "UNK" Then
'        Check_File = False
'        Exit Function
''        '
''        Windows(Target_Name).Activate
''        ThisWorkbook.Saved = True
''        Windows(Target_Name).Close
''        '`
''        Windows(Sync_Name).Activate
''        Sheets("WORKING").Select
''        cmdProceed.Enabled = False
''        lblProblem.Caption = "PROBLEM: Unrecognized File Type -- Must CANCEL"
''        lblProblem.Visible = True
''        '
'    End If
'
'Windows(Sync_Name2).Activate
'Sheets("BIN").Range("E4").Value = File_type
'Sheets("BIN").Range("E5").Value = File_Desc
'Check_File = True
''
'End Function
'
'Sub Spin_Off_File_B(ByVal report_number As Long, ByVal savePath As String, ByVal Sync_Name1)
''Application.EnableCancelKey = xlDisabled
''Application.ScreenUpdating = False
'Dim DeleteOH As Boolean
'Dim Target_File As String
''
'    '=-=-=-=-=-=-=-=-=-=
'    ' Target
'    '=-=-=-=-=-=-=-=-=-=
'    Workbooks.Add
'    With ActiveWindow
'        .DisplayGridlines = False
'        .DisplayWorkbookTabs = True
'        .DisplayHeadings = True
'    End With
'    '
'    Target_File = ActiveWorkbook.Name
'    '
'    '=-=-=-=-=-=-=-=-=-=
'    ' Sync
'    '=-=-=-=-=-=-=-=-=-=
'    Windows(Sync_Name1).Activate
'    '
'    Cells.Copy
'    '
'    '=-=-=-=-=-=-=-=-=-=
'    ' Target
'    '=-=-=-=-=-=-=-=-=-=
'    Windows(Target_File).Activate
'    ActiveSheet.Paste
'    '
'    Rows("10:10").RowHeight = 30
'    Rows("11:2000").RowHeight = 18.75
'    '
'    Range("A1").Font.Size = 20
'    Range("A2:A3").Font.Size = 10
'    '
'    Rows("4:8").EntireRow.Hidden = True
'    Range("A10").Select
'    '
'    Range("A10").End(xlToRight).AutoFilter
'    '
'    ActiveWorkbook.SaveAs _
'        Filename:=savePath & "SyncReport " & report_number & ".xls", _
'        FileFormat:=xlExcel8, _
'        ConflictResolution:=xlLocalSessionChanges
'    'SaveName = "SyncReport " & report_number
''
'' ++++++++++++++++++++++++++++++
'' Duplicate name entered
'  On Error GoTo ErrorLine
'' ++++++++++++++++++++++++++++++
''
''    Fname = Application.GetSaveAsFilename(InitialFileName:=SaveName, FileFilter:="Excel Workbooks(*.xls),*.xls")
''    '
''    If Fname = False Then
''    Else
''        If Val(Application.Version) < 12 Then
''            ActiveWorkbook.SaveAs Filename:=Fname
''        Else
''            ActiveWorkbook.SaveAs Filename:=Fname, FileFormat:=xlExcel8
''        End If
''    End If
'    '
'    ActiveWorkbook.Close
'    Application.CutCopyMode = False
'    '
'Exit Sub
'ErrorLine:
'    MsgBox "Problem with that NAME (Duplicate?) -- Need to Reset Sync"
'    Call SetupForUsers
'    '
'End Sub


Attribute VB_Name = "ColumnLetters"
Option Explicit


Public Function ColumnLetterFromNumber(ByVal ColumnNumber As Long) As String
'==============================================================================
'   Created By: Ed McGrath
'   Created On: June 24, 2013
'
'   Purpose:    Return the column string for a given the column number
'   Comments:   Works for the first 702 columns in a workbook
'               It will NOT work for the 3 letter columns
'               The letter "A" is the ascii character 65
'
'   Logic:
'       1. The left-most letter is calculated using integer division.
'       2. The last letter is calculated by using the remainder of the
'           integer division of the first letter.
'
'Unable to get the tripple letter working
'       3. If it is a column that has 3 letters (number>702) then the second
'           letter is calculated by taking the integer division of the number
'           minus the whole number of times the first number went into the
'           number.
'==============================================================================
    Dim firstLetterNum As Long
    Dim secondLetterNum As Long
    'Dim thirdLetterNum As Long
    
    Const LETTER_ADJUST As Long = 64    'Adjustment to get to the leter "A"
    Const LAST_SINGLE_LETTER_COLUMN As Long = 26
    Const LAST_SECOND_LETTER_COLUMN As Long = 702
    
    If ColumnNumber <= 0 Or ColumnNumber > 702 Then
        ColumnLetterFromNumber = "~"
        Exit Function
    End If
    
    Select Case ColumnNumber
    Case Is <= LAST_SINGLE_LETTER_COLUMN
        ColumnLetterFromNumber = _
            Chr(ColumnNumber + LETTER_ADJUST)
            
    Case Is <= LAST_SECOND_LETTER_COLUMN
        secondLetterNum = (ColumnNumber - 1) \ LAST_SINGLE_LETTER_COLUMN
        firstLetterNum = ColumnNumber _
            - (secondLetterNum * LAST_SINGLE_LETTER_COLUMN)
        ColumnLetterFromNumber = _
            Chr(secondLetterNum + LETTER_ADJUST) & _
            Chr(firstLetterNum + LETTER_ADJUST)
    
    Case Else
'        thirdLetterNum = (ColumnNumber - 1) \ LAST_SECOND_LETTER_COLUMN
'        secondLetterNum = _
'            (ColumnNumber _
'            - (thirdLetterNum * LAST_SECOND_LETTER_COLUMN) _
'            + (1 * LAST_SINGLE_LETTER_COLUMN)) _
'            \ LAST_SINGLE_LETTER_COLUMN
'        firstLetterNum = ColumnNumber _
'            - (thirdLetterNum * LAST_SECOND_LETTER_COLUMN) _
'            - ((secondLetterNum - 1) * LAST_SINGLE_LETTER_COLUMN)
'
'        If firstLetterNum = 0 Then
'            firstLetterNum = 26
'            secondLetterNum = secondLetterNum - 1
'        End If
'
'        ColumnLetterFromNumber = _
'            Chr(thirdLetterNum + LETTER_ADJUST) & _
'            Chr(secondLetterNum + LETTER_ADJUST) & _
'            Chr(firstLetterNum + LETTER_ADJUST)
    End Select
End Function


Attribute VB_Name = "CombineFile"
Sub testThis()
    'to do testing, you must open the supply file
    CurrentSupplyFileName = "Material supply sample 26 week with std cost 5-2-13.xls"
    'Windows(CurrentSupplyFileName).Activate
    SupplyNumberOfRows = 3187 'Application.WorksheetFunction.CountA(Range("A1:A10000")) - 1
    SupplyNumberOfColumns = Worksheets("BIN").UsedRange.Columns.count 'Application.WorksheetFunction.CountA(Range("1:1"))
    'SupplyFileType = Material_Planned_Supply
    
    Windows(PROGRAM_WORKBOOK_NAME).Activate
    
    'speed enhancement
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    'Call importSupplyToBin( _
            Application.Workbooks(CurrentSupplyFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Bin"), _
            SupplyNumberOfRows, _
            SupplyNumberOfColumns, _
            SupplyFileType)
            
    Call createSummarySupply( _
                Worksheets("Bin"), Worksheets("SumResult"), _
                Worksheets("Bin").UsedRange.Columns.count, _
                SupplyNumberOfRows)
    
    'Call insertSumResultMatch(Worksheets("SumResult"), _
                Worksheets("Report"), _
                Worksheets("SumResult").UsedRange.Columns.Count)
    
    'these line is to clear BIN and Sum Result tab
    'Call CleanSumAndBin(Worksheets("BIN"))
    'Call CleanSumAndBin(Worksheets("SumResult"))
                
    'after these procedure finish run All DFC must be recalculated _
        in below line recalculateAllDFC procedure will be called
    
    'restore all warning to default
    Application.Calculation = xlAutomatic
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End Sub

Sub cleanMess()
    Call CleanSumAndBin(Worksheets("BIN"))
    Call CleanSumAndBin(Worksheets("SumResult"))
End Sub

Public Sub CleanSumAndBin(ByRef SBWorksheet As Worksheet)
'   Clears all the data from the report sheet, but leaves the form controls
'==============================================================================
    SBWorksheet.Cells.Clear
    Worksheets("BIN").UsedRange
    Worksheets("SumResult").UsedRange
    SBWorksheet.Visible = xlSheetHidden
End Sub

Sub importSupplyToBin(ByRef DataSheet As Worksheet, _
                      ByRef ReportWorksheet As Worksheet, _
                      ByVal numRows As Long, _
                      ByVal numCols As Long, _
                      ByVal rptType As FileType)

'==============================================================================
'   1. Parses the data file and imports the data into the correct columns in
'       the report template sheet.
'
'   2. Sorts the data so that the follow up materials are placed below the
'       material that they replace
'==============================================================================
Dim t As Double
t = Timer()
    Dim Header As Range
    Dim colHeadings As Range
    Dim firstFCSTCol As Long
    Dim lastFCSTCol As Long
    Dim LastReportCol As Long
    Dim numForecastColumns As Long
    Dim dmdCell As Range
    Dim consumptionType As String
    
'========
'   1.
'========
    '--------------------------------------------------------------------------
    '   Copy the data
    '--------------------------------------------------------------------------
    Set colHeadings = DataSheet.Range("A1:N1")
        'This may include at some of the forecast columns.
        '   This is to account for all file types
    'OpenAndVet.Hide
    'Application.ScreenUpdating = True
    
    For Each Header In colHeadings.Cells
        Select Case Header.Value
            Case "MRP Controller"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MRP_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Material No"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MAT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Material Desc"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MAT_DESC_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Follow-Up Material"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(FU_MAT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Plant"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(PLNT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Plant Name"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(PLNT_DESC_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "UoM"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(UoM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Safety Stock"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(SS_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Standard price", "STPRS"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(STD_COST_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Stock"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(STOCK_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Vendor"
                VendorNumber = DataSheet.Cells(Header.Row + 1, Header.Column).Value
            Case "Vendor Name"
                VendorName = DataSheet.Cells(Header.Row + 1, Header.Column).Value
            Case Else

        End Select 'header.Value
        'test for forecast column
        If Left(Header.Value, 2) = "W " Or _
            Left(Header.Value, 2) = "D " Or _
            IsNumeric(Left(Header.Value, 2)) = True Then
            firstFCSTCol = Header.Column
            Exit For
        End If
    Next Header
    
    '   Determine the number of FCST Weeks
    '----------------------------------
    DataSheet.Activate
    numForecastColumns = Application.WorksheetFunction. _
        CountA(Range(Cells(1, firstFCSTCol), Cells(1, 150))) - 1
    lastFCSTCol = firstFCSTCol + numForecastColumns - 1
    Range(Cells(1, firstFCSTCol), Cells(numRows + 1, lastFCSTCol)).Copy
    
    ReportWorksheet.Activate
    
    Range(Cells(1, FIRST_REPORT_FCST_COLUMN), _
        Cells(numRows + 1, FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1)) _
        .PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    DataSheet.Parent.Saved = True
    DataSheet.Parent.Close
    LastReportCol = FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1
    ReportNumberOfColumns = LastReportCol
'========
'   2. Sort
'========
    'OpenAndVet.Hide
    'Application.ScreenUpdating = True
    
    'Only sort if there is more than 1 row of data
    If numRows > 2 Then
            'Follow-up Material number is column D
            'Material is column B
    
    '   Set up the values to sort by
    '----------------------------------
        '*****************************************************************
        'Moved the below to the end of the "Copy the data" section.
        'Solves a run-time error when the file has only 1 row of data
        '*****************************************************************
        'LastReportCol = FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1
        '*****************************************************************
        '
        ReportNumberOfColumns = LastReportCol
        
        Cells(1, LastReportCol + 1).Value = "Sort Number"
        
        Cells(2, (LastReportCol + 1)).Select
        Cells(2, (LastReportCol + 1)).Formula = _
             "=IF(D2="""",B2*1,D2-1)"
        Cells(2, (LastReportCol + 1)).NumberFormat = "0"
        
        'copy the values of the formulas in the sorting column down
        Cells(2, LastReportCol + 1).Copy
        Range(Cells(2, LastReportCol + 1), _
            Cells(numRows + 1, LastReportCol + 1)).PasteSpecial xlPasteFormulasAndNumberFormats
        
        ReportWorksheet.Calculate
        
        ReportWorksheet.Range(Cells(2, LastReportCol + 1), _
            Cells(numRows + 1, LastReportCol + 1)).Copy
        ReportWorksheet.Range(Cells(2, LastReportCol + 1), _
            Cells(numRows + 1, LastReportCol + 1)).PasteSpecial xlPasteValues
        
        Application.CutCopyMode = False
        
    '   Do the Sort by item & vendor/plant
    '----------------------------------
        With ReportWorksheet.Sort
            .SortFields.Clear
            .SortFields.Add _
                Key:=Range(Cells(2, LastReportCol + 1), _
                        Cells(numRows + 1, LastReportCol + 1)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
            '.SortFields.Add _
                Key:=Range(Cells(2, PLNT_NUM_COLUMN), _
                        Cells(numRows + 1, PLNT_NUM_COLUMN)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortTextAsNumbers
            .SortFields.Add _
                Key:=Range(Cells(2, MRP_COLUMN), _
                        Cells(numRows + 1, MRP_COLUMN)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
            
            .SetRange Range(Cells(2, 1), _
                Cells(numRows + 1, LastReportCol + 1))
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
            .SortFields.Clear
        End With
        
    '   Delete the Sort Column
    '----------------------------------
     '   ReportWorksheet.Columns(LastReportCol + 1).Delete
     
    End If  'Row Count >2
    
    '   Turn Negative values into positives
    '----------------------------------
    For Each dmdCell In Range(Cells(2, FIRST_REPORT_FCST_COLUMN), _
                        Cells(numRows + 1, LastReportCol)).Cells
        If dmdCell.Value < 0 Then
            dmdCell.Value = -1 * dmdCell.Value
        End If
    Next dmdCell
    
    'copy weeks to compare tab
    Sheets("CompareWeeks").Columns("B:B").ClearContents
    Sheets("BIN").Range(Cells(1, FIRST_REPORT_FCST_COLUMN), Cells(1, LastReportCol)).Copy
    Sheets("CompareWeeks").Select
    Range("B1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=True
    Application.CutCopyMode = False

End Sub

Sub createSummarySupply(ByVal ReportWorksheet As Worksheet, _
                        ByVal SumResultWorksheet As Worksheet, _
                        ByVal numCols, ByVal numRows)
    
    Dim i As Long

'========================================
'1. Remove duplicate of Material Number and Sort key
'========================================
    
    'copy MRP-follow up material
    ReportWorksheet.Select
    Range(Cells(1, MRP_COLUMN), Cells(numRows + 1, FU_MAT_NUM_COLUMN)).Select
    Selection.Copy
    SumResultWorksheet.Select
    Range("A1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    
    'copy sort column
    ReportWorksheet.Select
    Range(Cells(1, numCols), Cells(numRows + 1, numCols)).Select
    Selection.Copy
    SumResultWorksheet.Select
    Range("E1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Selection.NumberFormat = "0"
    'remove duplicate by Material Number and sort column
    Range("C5").Select
    ActiveSheet.Range("$A$1:$E$" & CStr(numRows)).RemoveDuplicates Columns:=Array(2, 5), _
        Header:=xlYes
    
'=======================================
'2. create sumIfs formula
'=======================================
    ReportWorksheet.Select
    Range(Cells(1, STOCK_COLUMN), Cells(1, numCols - 1)).Select
    Selection.Copy
    SumResultWorksheet.Select
    Cells(1, STOCK_COLUMN).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    For i = 2 To ActiveSheet.UsedRange.Rows.count
        Range(Cells(i, STOCK_COLUMN), Cells(i, numCols - 1)).FormulaR1C1 = _
            "=SUMIFS(BIN!R2C:R" & CStr(numRows + 1) & "C,BIN!R2C2:R" & CStr(numRows + 1) & "C2,SumResult!RC2,BIN!R2C" & CStr(numCols) & _
            ":R" & CStr(numRows + 1) & "C" & CStr(numCols) & ",SumResult!RC5)"
        ActiveSheet.Calculate
        
        'convert sumIfs to value
        Range(Cells(i, STOCK_COLUMN), Cells(i, numCols - 1)).Copy
        Range(Cells(i, STOCK_COLUMN), Cells(i, numCols - 1)).PasteSpecial xlPasteValues
        Application.CutCopyMode = False
    Next i

End Sub

Sub insertSumResultMatch(ByVal SumResultWorksheet As Worksheet, _
                        ByVal ReportWorksheet As Worksheet, _
                        ByVal LastReportCol As Byte)
    Dim i As Long, reportCursor As Long
    Dim lastFoundRecord As Long
    Dim comparedMatNo As String
    
    reportCursor = 21
    SumResultWorksheet.Select
    'clear unused cells from Excel's RAM
    Worksheets("SumResult").UsedRange
    
    For i = 2 To SumResultWorksheet.UsedRange.Rows.count
        comparedMatNo = SumResultWorksheet.Cells(i, MAT_NUM_COLUMN).Value
        'if no more material number available in sum result sheet,
        If comparedMatNo = "" Then Exit For
        
With ReportWorksheet
    
    While .Cells(reportCursor, MAT_NUM_COLUMN).Value <> ""
          
        If ReportWorksheet.Cells(reportCursor, ATTRIBUTE_COLUMN).Value = "WFC" Then
            If ReportWorksheet.Cells(reportCursor, MAT_NUM_COLUMN).Value = comparedMatNo Then
                'push sum Result to Supply Row
                
                'copy on hand stock till forecast week
                SumResultWorksheet.Select
                Range(Cells(i, STOCK_COLUMN), Cells(i, LastReportCol)).Copy
                .Select
                Cells(reportCursor - 4, STOCK_COLUMN).PasteSpecial xlPasteValues
                Application.CutCopyMode = False
        
                'move report cursor for next material
                reportCursor = reportCursor + 6
                lastFoundRecord = reportCursor
                GoTo moveToNextStock
            Else
                'move to next data set in report and redo checking
                reportCursor = reportCursor + 6
                
            End If
        Else
            reportCursor = reportCursor + 1
            
        End If
    Wend
End With
        'this condition must not meet because all material in both Demand and supply file must be the same _
            however I put this error handling just in case no match happended
            
        MsgBox "Data Material Number: " & comparedMatNo _
                            & "not found in report."
        'reset report cursor position to next record after last found record
        reportCursor = lastFoundRecord
                    
moveToNextStock:
    Next i
End Sub

Public Sub InsertLinesOnly(ByRef ReportWorksheet As Worksheet, _
                       ByRef TemplateWorksheet As Worksheet, _
                       ByVal numRows As Long, _
                       ByVal numCols As Long)
'==============================================================================
'   1. Inserts lines for the different attributes (Supply, projected, DFC, etc.
'==============================================================================
Dim t As Double
    Dim RowCounter As Long
    Dim LastRow As Long
    Dim firstDataRow As Long
    Dim dfcFormula As String
    Dim plantCount As Long
    Dim dmdCounter As Long
    Dim FollowUp As Boolean
    Dim demandCount As Long
    Dim runOutCountRowAdjust As Long
    
    Const NUM_ROWS_TO_INSERT As Long = 5
    Const FORMULA_ROWS As String = "16:20"
    Const TOTALS_ROWS As String = "9:14"
    
    Const FIRST_TOTAL_ROW As Long = 9
    Const LAST_TOTAL_ROW As Long = 14
    Const FIRST_TOTAL_COL As Long = 11
    Const FIRST_TOTALS_CELL As String = "K9"
    Const DFC_TOTAL_ROW As Long = 13
    
    Const FIRST_FORMULA_ROW As Long = 17
    Const LAST_FORMULA_ROW As Long = 21
    
    Const FIRST_CUSTOM_HEADER_COL As Long = 1
    Const LAST_CUSTOM_HEADER_COL As Long = 15
    
    Const LOCAL_DEMAND_OFFSET As Long = -1
    
    Const DFC_ROW_OFFSET As Long = 3
    Const DEMAND_ROW_OFFSET As Long = -1
    Const INVENTORY_ROW_OFFSET As Long = 1
    Const SUPPLY_ROW_OFFSET As Long = 0
    Const TOTAL_COL_OFFSET As Long = 1
    Const DOLLARS_ROW_OFFSET As Long = 2
    Const WFC_ROW_OFFSET = 4
    
    firstDataRow = HEADER_ROWS_ADJUST + 1
       
    ' Speed enhancements
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    'clear unused cells from Excel's RAM
    Worksheets("Report").UsedRange

    With ReportWorksheet
        .Activate
        t = Timer()
        LastRow = (numRows + HEADER_ROWS_ADJUST)
        plantCount = 0
        FollowUp = False
        
        For RowCounter = (numRows + firstDataRow) _
                                    To firstDataRow + 1 Step -1
            If .Cells(RowCounter - 1, MAT_NUM_COLUMN).Value <> _
               .Cells(RowCounter, MAT_NUM_COLUMN).Value _
            Then
            '   Insert Lines
            '----------------------------------
                .Rows(RowCounter & ":" & RowCounter + 4).Insert Shift:=xlDown
                '.range(.cells(RowCounter, 1), Cells(RowCounter + 4, numCols + 1)).Insert Shift:=xlDown

                '   Copy formulas to the new rows
                '----------------------------------
                TemplateWorksheet.Range(TemplateWorksheet.Cells(FIRST_FORMULA_ROW, 1), _
                    TemplateWorksheet.Cells(LAST_FORMULA_ROW, numCols)).Copy

                .Range(.Cells(RowCounter, 1), .Cells(RowCounter + 4, numCols)) _
                    .PasteSpecial xlPasteAll
                '.Range(.Cells(RowCounter, 1), .Cells(RowCounter + 4, numCols)).Calculate
                
                '   Copy formats to the demand rows
                '----------------------------------
                If .Cells(RowCounter + 5, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88) Then
                    FollowUp = True
                End If
                
                TemplateWorksheet.Range(TemplateWorksheet.Cells(firstDataRow, 1), _
                    TemplateWorksheet.Cells(firstDataRow, numCols)).Copy
                With .Range(.Cells(RowCounter + 5, 1), _
                            .Cells(RowCounter + 5 + plantCount, numCols + 1))
                    .PasteSpecial xlPasteFormats
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
                End With
                With .Range(.Cells(RowCounter + 5, numCols + 1), _
                            .Cells(RowCounter + 5 + plantCount, numCols + 1))
                        .NumberFormat = "#,##0_);[Red](#,##0)"
                        .Font.Bold = True
                End With
                
                If FollowUp = True Then
                    .Cells(RowCounter + 5, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88)
                End If
            
            '   Projected Inventory formula
            '----------------------------------
                demandCount = 0
                Do While .Cells(RowCounter - 2 - demandCount, MAT_NUM_COLUMN).Value = _
                         .Cells(RowCounter - 1, MAT_NUM_COLUMN).Value
                    demandCount = demandCount + 1
                Loop
                
                .Range("N" & RowCounter + INVENTORY_ROW_OFFSET).Formula = _
                    "=SUM(N" & RowCounter + DEMAND_ROW_OFFSET - demandCount & _
                    ":N" & RowCounter & ")"
                .Range(.Cells(RowCounter + INVENTORY_ROW_OFFSET, FIRST_REPORT_FCST_COLUMN), _
                    .Cells(RowCounter + INVENTORY_ROW_OFFSET, numCols)).Formula = _
                    "=N" & RowCounter + INVENTORY_ROW_OFFSET & "-SUM(O" & _
                    RowCounter + DEMAND_ROW_OFFSET - demandCount & ":O" & _
                    RowCounter + DEMAND_ROW_OFFSET & ")" & "+O" & RowCounter

            '   Projected Dollars formula
            '----------------------------------
                .Range(.Cells(RowCounter + DOLLARS_ROW_OFFSET, STOCK_COLUMN), _
                    .Cells(RowCounter + DOLLARS_ROW_OFFSET, numCols)).Formula = _
                    "=N" & RowCounter + INVENTORY_ROW_OFFSET & _
                    "* $J$" & RowCounter + DEMAND_ROW_OFFSET - plantCount

'========================================
'this line is modified so DFc is not supposed to be calculated to speed up time processing
'========================================

            '   DFC Formula
            '----------------------------------
                dfcFormula = "" 'ReportSupport.GenerateDFCformula( _
                    firstDemandRow:=RowCounter + DEMAND_ROW_OFFSET - demandCount, _
                    lastDemandRow:=RowCounter + DEMAND_ROW_OFFSET, _
                    OHrow:=RowCounter + INVENTORY_ROW_OFFSET, _
                    firstDFCcolumn:=STOCK_COLUMN, _
                    lastDFCcolumn:=numCols - 1, _
                    LockLastColumn:=True)

                With .Range(.Cells(RowCounter + DFC_ROW_OFFSET, STOCK_COLUMN), _
                            .Cells(RowCounter + DFC_ROW_OFFSET, numCols - 1))
                    .Formula = dfcFormula
                    .Copy
                    .PasteSpecial xlPasteValues
                End With

            '   WFC formula
            '----------------------------------
                .Range(.Cells(RowCounter + WFC_ROW_OFFSET, STOCK_COLUMN), _
                    .Cells(RowCounter + WFC_ROW_OFFSET, numCols)).Formula = _
                    "=IFERROR((N$" & RowCounter + DFC_ROW_OFFSET & _
                        ")/7," & """" & """" & ")"
            
            '   Run-Out Formula
            '----------------------------------
                runOutCountRowAdjust = 0
                Do While .Cells(RowCounter + 6 + runOutCountRowAdjust, 1).Font.Color <> RGB(255, 255, 255)
                    runOutCountRowAdjust = runOutCountRowAdjust + 1
                    If runOutCountRowAdjust > 30 Then
                        runOutCountRowAdjust = 0
                        Exit Do
                    End If
                Loop
                .Range(.Cells(RowCounter + 5, RUN_OUT_COLUMN), _
                       .Cells(RowCounter + 5 + runOutCountRowAdjust, RUN_OUT_COLUMN)).Formula = _
                       "=IF(ISNUMBER(VALUE(RIGHT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),2)))=TRUE,IF(OR(LEFT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),1)=" & """" & "D" & """" & ",LEFT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),1)=" & """" & "W" & """" & ")=TRUE,MID(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),3,8),MID(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),1,8)),IFERROR(IF(RIGHT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),2)=" & """" & "ck" & """" & "," & """" & "Today" & """" & "," & """" & """" & ")," & """" & """" & "))"

            '   Highlight F/U Materials
            '----------------------------------
                If .Cells(RowCounter - 1 - plantCount, FU_MAT_NUM_COLUMN).Value <> "" Then
                    .Cells(RowCounter - 1 - plantCount, FU_MAT_NUM_COLUMN) _
                        .Interior.Color = RGB(251, 178, 88)
                    If .Cells(RowCounter - 1 - plantCount, FU_MAT_NUM_COLUMN).Value = _
                       .Cells(RowCounter + 6, MAT_NUM_COLUMN) Then
                        .Cells(RowCounter + NUM_ROWS_TO_INSERT, MAT_NUM_COLUMN) _
                            .Interior.Color = RGB(251, 178, 88)
                    End If
                End If

            '   Merge material description cells
            '----------------------------------
                .Range(.Cells(RowCounter + 5, MAT_DESC_COLUMN), _
                    .Cells(RowCounter + 8 + plantCount, MAT_DESC_COLUMN)).Merge
                .Range(.Cells(RowCounter + 5, MAT_DESC_COLUMN), .Cells(RowCounter + 1, MAT_DESC_COLUMN)).WrapText = True
                .Range(.Cells(RowCounter + 5, MAT_DESC_COLUMN), .Cells(RowCounter + 1, MAT_DESC_COLUMN)).VerticalAlignment = xlTop
            
            '   Enter the Totals formulas & formatting
            '----------------------------------
                With .Range(.Cells(RowCounter - 1 - plantCount, numCols + TOTAL_COL_OFFSET), _
                            .Cells(RowCounter - 1, numCols + TOTAL_COL_OFFSET))
                    .NumberFormat = "#,##0_);[Red](#,##0)"
                    .Formula = _
                        "=SUM(" & _
                        ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                        RowCounter - 1 - dmdCounter & ":" & _
                        ColumnLetters.ColumnLetterFromNumber(numCols) & _
                        RowCounter - 1 - dmdCounter & ")"
                End With
                
                .Cells(RowCounter, numCols + TOTAL_COL_OFFSET).Formula = _
                    "=SUM(" & _
                    ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                    RowCounter + SUPPLY_ROW_OFFSET & ":" & _
                    ColumnLetters.ColumnLetterFromNumber(numCols) & _
                    RowCounter + SUPPLY_ROW_OFFSET & ")"
                'Bold & number format
                .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                    .Cells(RowCounter + SUPPLY_ROW_OFFSET, _
                        numCols + TOTAL_COL_OFFSET)) _
                    .Font.Bold = True
                    .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                        .Cells(RowCounter + SUPPLY_ROW_OFFSET, _
                        numCols + TOTAL_COL_OFFSET)).NumberFormat = "#,##0_);[Red](#,##0)"
                'Black
                .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, numCols + 1), _
                    .Cells(RowCounter + SUPPLY_ROW_OFFSET, numCols + 1)) _
                    .Font.Color = RGB(0, 0, 0)
                'Borders
                .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                        .Cells(RowCounter + 4, numCols + TOTAL_COL_OFFSET)) _
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
    
                '   Fill Down the ID values (item, loc, mrp...)
                '----------------------------------
                .Range(.Cells(RowCounter, MRP_COLUMN), _
                    .Cells(RowCounter + NUM_ROWS_TO_INSERT - 1, MAT_NUM_COLUMN)) _
                    .Value = .Range(.Cells(RowCounter - 1, MRP_COLUMN), _
                        .Cells(RowCounter - 1, MAT_NUM_COLUMN)).Value

                .Range(.Cells(RowCounter, PLNT_NUM_COLUMN), _
                    .Cells(RowCounter + NUM_ROWS_TO_INSERT - 1, PLNT_DESC_COLUMN)) _
                    .Value = .Range(.Cells(RowCounter - 1, PLNT_NUM_COLUMN), _
                        .Cells(RowCounter - 1, PLNT_DESC_COLUMN)).Value

                LastRow = LastRow + NUM_ROWS_TO_INSERT ' NEW Last Row
'                If plantCount > 0 Then
'                    RowCounter = RowCounter - plantCount
'                End If
                plantCount = 0
                FollowUp = False
            Else
                plantCount = plantCount + 1
            End If
        Next RowCounter
'==============================================================================
'   End of Individual line formating
'   Begin Sheet and heading formatting
'==============================================================================
    
    '   Format first row
    '----------------------------------
        plantCount = 0
        Do While .Cells(firstDataRow, PLNT_NUM_COLUMN).Value <> _
                 .Cells(firstDataRow + 1 + plantCount, PLNT_NUM_COLUMN).Value
            plantCount = plantCount + 1
        Loop
        
        TemplateWorksheet.Range(TemplateWorksheet.Cells(firstDataRow, 1), _
            TemplateWorksheet.Cells(firstDataRow, numCols)).Copy
        With .Range(.Cells(firstDataRow, 1), _
                    .Cells(firstDataRow + plantCount, numCols + 1))
            .PasteSpecial xlPasteFormats
            .Borders(xlInsideHorizontal).LineStyle = xlNone
        End With
        With .Range(.Cells(firstDataRow, numCols + 1), _
                    .Cells(firstDataRow + plantCount, numCols + 1))
            .NumberFormat = "#,##0_);[Red](#,##0)"
            .Font.Bold = True
        End With
        
    '   Run-Out Formula
    '----------------------------------
        .Range(.Cells(firstDataRow, RUN_OUT_COLUMN), _
               .Cells(firstDataRow + plantCount, RUN_OUT_COLUMN)).Formula = _
               "=IF(ISNUMBER(VALUE(RIGHT(INDEX($N$15:$DZ$15,1,MATCH(0,$M" & firstDataRow + 2 + plantCount & ":$DZ" & firstDataRow + 2 + plantCount & ",-1)),2)))=TRUE,IF(OR(LEFT(INDEX($N$15:$DZ$15,1,MATCH(0,$M" & firstDataRow + 2 + plantCount & ":$DZ" & firstDataRow + 2 + plantCount & ",-1)),1)=" & """" & "D" & """" & ",LEFT(INDEX($N$15:$DZ$15,1,MATCH(0,$M" & firstDataRow + 2 + plantCount & ":$DZ" & firstDataRow + 2 + plantCount & ",-1)),1)=" & """" & "W" & """" & ")=TRUE,MID(INDEX($N$15:$DZ$15,1,MATCH(0,$M" & firstDataRow + 2 + plantCount & ":$DZ" & firstDataRow + 2 + plantCount & ",-1)),3,8),MID(INDEX($N$15:$DZ$15,1,MATCH(0,$M" & firstDataRow + 2 + plantCount & ":$DZ" & firstDataRow + 2 + plantCount & ",-1)),1,8)),IFERROR(IF(RIGHT(INDEX($N$15:$DZ$15,1,MATCH(0,$M" & firstDataRow + 2 + plantCount & ":$DZ" & firstDataRow + 2 + plantCount & ",-1)),2)=" & """" & "ck" & """" & "," & """" & "Today" & """" & "," & """" & """" & ")," & """" & """" & "))"
            
    '   Merget the first material description
    '----------------------------------
        With .Range(.Cells(firstDataRow, MAT_DESC_COLUMN), _
                    .Cells(firstDataRow + 3, MAT_DESC_COLUMN))
            .Merge
            .WrapText = True
            .VerticalAlignment = xlTop
        End With
        
    '   Column Heading titles
    '----------------------------------
        TemplateWorksheet.Range(TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, FIRST_CUSTOM_HEADER_COL), _
            TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, LAST_CUSTOM_HEADER_COL)) _
            .Copy

        .Range(.Cells(HEADER_ROWS_ADJUST, FIRST_CUSTOM_HEADER_COL), _
            .Cells(HEADER_ROWS_ADJUST, LAST_CUSTOM_HEADER_COL)) _
            .PasteSpecial xlPasteAll
        Application.CutCopyMode = False

        ReportWorksheet.Cells(HEADER_ROWS_ADJUST, numCols + 1).Value = "Total"

    '   Column heading formats
    '----------------------------------
        TemplateWorksheet.Range(TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, 1), _
            TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, numCols + 1)).Copy

        ReportWorksheet.Range(.Cells(HEADER_ROWS_ADJUST, 1), _
            .Cells(HEADER_ROWS_ADJUST, numCols + 1)).PasteSpecial xlPasteFormats
        Application.CutCopyMode = False
    
    '   Clear extra rows at the bottom
    '----------------------------------
        .Rows(LastRow + 1).Delete
        Worksheets(REPORT_WORKSHEET_NAME).UsedRange
        
    '   Fit the row height
    '----------------------------------
        .Rows().EntireRow.AutoFit
    
    '   Add the Spark lines for the data rows
    '----------------------------------
        .Range(.Cells(firstDataRow, TREND_LINE_COLUMN), _
               .Cells(LastRow, TREND_LINE_COLUMN)) _
            .SparklineGroups.Add _
                Type:=xlSparkLine, _
                SourceData:="$O$" & firstDataRow & ":$" & _
                    ColumnLetters.ColumnLetterFromNumber(numCols) & _
                    "$" & LastRow

    '   Add border to the bottom cell in the Totals column
    '----------------------------------
        With .Cells(LastRow + 1, numCols + 1)
            .Borders(xlEdgeTop).LineStyle = xlDouble
            .Borders(xlEdgeTop).ThemeColor = 4
            .Borders(xlEdgeTop).TintAndShade = 0
            .Borders(xlEdgeTop).Weight = xlThick
        End With
        .Columns(numCols + 1).ColumnWidth = 14

    '   Totals
    '----------------------------------
        TemplateWorksheet.Range(FIRST_TOTALS_CELL, _
            TemplateWorksheet.Cells(LAST_TOTAL_ROW, numCols)).Copy

        .Range(FIRST_TOTALS_CELL).PasteSpecial xlPasteAll

        Application.CutCopyMode = False
        
        'total DFC
        dfcFormula = ReportSupport.GenerateDFCformula( _
            firstDemandRow:=9, _
            lastDemandRow:=9, OHrow:=11, _
            firstDFCcolumn:=STOCK_COLUMN, _
            lastDFCcolumn:=numCols - 1, _
            LockLastColumn:=True)

        .Cells(DFC_TOTAL_ROW, STOCK_COLUMN) _
        .Formula = dfcFormula

        .Cells(DFC_TOTAL_ROW, STOCK_COLUMN) _
        .Copy

        With .Range(.Cells(DFC_TOTAL_ROW, STOCK_COLUMN), _
                    .Cells(DFC_TOTAL_ROW, numCols - 1))
            .PasteSpecial xlPasteFormulas
            .Calculate
        End With

        'Total WFC
        .Cells(DFC_TOTAL_ROW + 1, STOCK_COLUMN) _
        .Formula = "=IFERROR((N$" & DFC_TOTAL_ROW & _
                        ")/7," & """" & """" & ")"
        
        .Cells(DFC_TOTAL_ROW + 1, STOCK_COLUMN) _
        .Copy

        With .Range(.Cells(DFC_TOTAL_ROW + 1, STOCK_COLUMN), _
                    .Cells(DFC_TOTAL_ROW + 1, numCols - 1))
            .PasteSpecial xlPasteFormulas
            .Calculate
        End With
        
        'total demand
        With .Cells(FIRST_TOTAL_ROW, STOCK_COLUMN)
            .Formula = _
                "=SUMPRODUCT(SUBTOTAL(9,OFFSET(N$16:N$" & _
                LastRow & ",ROW(N$16:N$" & LastRow & ")-MIN(ROW(N$16:N$" & _
                LastRow & ")),,1)), --($M$16:$M$" & LastRow & "=$K9))"
            .Copy
        End With

        .Range(.Cells(FIRST_TOTAL_ROW, STOCK_COLUMN), _
               .Cells(FIRST_TOTAL_ROW + 3, numCols)) _
               .PasteSpecial xlPasteFormulas

        '   Enter the Totals formulas & formatting for the totals
        '----------------------------------
        With ReportWorksheet
            .Cells(FIRST_TOTAL_ROW, numCols + TOTAL_COL_OFFSET).Formula = _
                "=SUM(" & _
                ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                FIRST_TOTAL_ROW & ":" & _
                ColumnLetters.ColumnLetterFromNumber(numCols) & _
                FIRST_TOTAL_ROW & ")"
            .Cells(FIRST_TOTAL_ROW + 1, numCols + TOTAL_COL_OFFSET).Formula = _
                "=SUM(" & _
                ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                FIRST_TOTAL_ROW + 1 & ":" & _
                ColumnLetters.ColumnLetterFromNumber(numCols) & _
                FIRST_TOTAL_ROW + 1 & ")"
        End With 'ReportWorksheet

        With ReportWorksheet.Range(.Cells(FIRST_TOTAL_ROW, numCols + 1), _
                .Cells(FIRST_TOTAL_ROW + 5, numCols + 1))
            'Bold
            .Font.Bold = True

            'Black
            .Font.Color = RGB(0, 0, 0)

            'Size
            .Font.Size = 11

            'Borders
            .Borders(xlEdgeTop).LineStyle = xlSingle
            .Borders(xlEdgeTop).Color = RGB(0, 0, 0)
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeTop).LineStyle = xlSolid

            .Borders(xlEdgeRight).LineStyle = xlSingle
            .Borders(xlEdgeRight).Color = RGB(0, 0, 0)
            .Borders(xlEdgeRight).Weight = xlThin
            .Borders(xlEdgeRight).LineStyle = xlSolid

            .Borders(xlInsideHorizontal).LineStyle = xlSingle
            .Borders(xlInsideHorizontal).Color = RGB(220, 230, 250)
            .Borders(xlInsideHorizontal).Weight = xlThin
            .Borders(xlInsideHorizontal).LineStyle = xlSolid
        End With
    '   Move the file type to a row that can be hidden
    '----------------------------------
        .Range("B7").Cut .Range("B9")
        Application.CutCopyMode = False
        .Activate
        .Range("A2").Activate
        HQMMToolkit.HomePage.Activate
    End With
    Debug.Print "total   :" & Timer() - t
    Application.DisplayAlerts = True
    HQMMToolkit.HomePage.Activate
End Sub

Function isSameWeeks() As Boolean
    Sheets("CompareWeeks").Calculate
    If Sheets("CompareWeeks").Range("D1") = 0 Then
        isSameWeeks = True 'means weeks date are within the same range
    Else
        isSameWeeks = False 'means weeks date are not within same date range
    End If
End Function


Attribute VB_Name = "ConsolidateUserForms"
Option Explicit
Global openMRPFile As Workbook
Global openDir As Boolean


Sub ValidateMRPforecasts()
Dim wb As Workbook
Dim wbs As Workbooks
Dim Ret
Dim i As Integer

Application.ScreenUpdating = False
Application.DisplayAlerts = False
'------------------------------------------------------------------------------
'   Demand File
'------------------------------------------------------------------------------
    'set program workbook name to this file
    PROGRAM_WORKBOOK_NAME = ThisWorkbook.Name
    
    'Sets the file names of the demand and supply files
    
    Do While runMRPYN(counterMRP) = "No" And counterMRP <= numFiles
        If counterMRP = numFiles Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Application.DisplayAlerts = True
            Application.EnableEvents = True
            
            If openDir = True Then
                Shell "explorer.exe" & " " & "C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool", vbNormalFocus
            Else
            End If
            'Application.OnTime Now + TimeSerial(0, 0, numFiles + 2), "close_mrps"
            HomePage.Activate
            Debug.Print Now & " export MRP end"
            Exit Sub
        Else
            counterMRP = counterMRP + 1
        End If
    Loop
    
    CurrentDemandFilePath = findMRPforecast(counterMRP)
    Ret = IsWorkBookOpen(CurrentDemandFilePath)
    If Ret = False Then
        Set openMRPFile = Workbooks.Open(CurrentDemandFilePath)

        CurrentDemandFileName = openMRPFile.Name
    
    ElseIf Ret = True Then
        Set wbs = Application.Workbooks
            For Each wb In wbs
                If wb.Name = Right(CurrentDemandFilePath, Len(wb.Name)) Then
                    Set openMRPFile = wb
                    openMRPFile.Activate
                    CurrentDemandFileName = openMRPFile.Name
                    Exit For
                Else
                End If
            Next wb
    Else
    End If
    
startHereAfterError:
    
    Call CheckFile(CurrentDemandFileName, DemandFileType, _
                   DemandNumberOfWeeks, DemandNumberOfRows)
    'Make sure that the demand file is valid
    If DemandFileType > [_Unknown_Files_First] And _
       DemandFileType < [_Unknown_Files_Last] Then
        'Data is not valid
        MsgBox "You have selected an invalid file type. Please try again."
        Exit Sub
    End If
    
Call runReformattingMRP

End Sub

Sub runReformattingMRP()
Debug.Print Now & " run reformatting MRP"
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False

'Test for now...
    Dim t As Double
    Dim FType As String
    Dim batchCounter As Long
    
    Dim objDic As Object
    Dim var As Variant
    Dim fd As FileDialog
    
    t = Timer()
    'set program workbook name to this file
    PROGRAM_WORKBOOK_NAME = ThisWorkbook.Name
    HQMMToolkit.Report.Visible = xlSheetVisible
    HQMMToolkit.CompareWeeks.Visible = xlSheetVisible
    
    Select Case SelectedTask
        Case SingleFile
            Call ReportGeneration.ImportData( _
            Application.Workbooks(CurrentDemandFileName).ActiveSheet, _
            HQMMToolkit.Report, _
            DemandNumberOfRows, _
            DemandNumberOfColumns, _
            DemandFileType)
        
            Call InsertLines( _
            HQMMToolkit.Report, _
            HQMMToolkit.Template, _
            DemandNumberOfRows, _
            ReportNumberOfColumns, SingleFile)
            
            Debug.Print Timer() - t
            
            Call exportFormattedMRP
    End Select
exitSelect:
    HQMMToolkit.Report.Visible = xlSheetHidden
            
            Debug.Print Now & " reformat MRP end"
End Sub

Sub exportFormattedMRP()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    Debug.Print Now & " export MRP"
DFCchk = True
WFCchk = True

'   Exports the report with the selected criteria
'==============================================================================
    Select Case SelectedTask
    Case Batch
    'if selected task is Batch then do  nothing. Only pass the DFC-WFC value to public variable
    'close this form and continue remaining code in open and vet form
        'Unload Me

    Case Else
        'set program workbook name to this file
        PROGRAM_WORKBOOK_NAME = ThisWorkbook.Name
        Dim Ans  As VbMsgBoxResult
        
        
        
        
        'unhide report tab in program file to received imported data
        HQMMToolkit.Report.Visible = xlSheetVisible
        'ask if user wants to open master file
        
        
        If SelectedTask = SingleFile Then
                
                If email_Actions(counterMRP) = "None - Just Save Files" Then
                    openDir = True
                ElseIf email_Actions(counterMRP) = "Save Formatted MRPs" Then
                    MsgBox "File will be saved in " & fileLocation & "\Vendor Reports"
                    Call ExportVendorFile(DFCchk, WFCchk, SelectedTask)
                    openDir = True
                Else
                    MsgBox "File will be saved in " & fileLocation & "\Vendor Reports"
                    Call ReportSupport.EmailVendorFile(ExportVendorFile(DFCchk, WFCchk, SelectedTask))
                End If
                
                Call ReportGeneration.CleanGeneratorFile(HQMMToolkit.Report)
                
                'reset outApp variable
                Set OutApp = Nothing
                
                counterMRP = counterMRP + 1
'
                If counterMRP > numFiles Then
                    HomePage.Activate
                    Application.ScreenUpdating = True
                    Application.Calculation = xlCalculationAutomatic
                    Application.DisplayAlerts = True
                    Application.EnableEvents = True
                    
                    If openDir = True Then
                        Shell "explorer.exe" & " " & "C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool", vbNormalFocus
                    Else
                    End If
                    'Application.OnTime Now + TimeSerial(0, 0, numFiles + 2), "close_mrps"
                    
                    HomePage.Activate
                    Debug.Print Now & " export MRP end"
                    Exit Sub
                Else
                    Call ValidateMRPforecasts
                End If
              'End If
                'Unload Me
                ''Splash.show
            'End If
        ElseIf SelectedTask = DFCReport Then
        Else
        End If
        
    End Select
    
End Sub




Public Function GetFileOrFolderPath(ByVal PickerType As MsoFileDialogType, _
                                     Optional ByVal InitialPath As String _
                                     ) As String
'returns the name of a file or folder based on the selections
    Dim dialogBox As FileDialog
    Dim startPath As String
    
    Set dialogBox = Application.FileDialog(PickerType)
    
    'Set the path for the file dialog to start in.
    'If one is not provided, use the current path of the workbook
    If Len(InitialPath) = 0 Then
        startPath = ActiveWorkbook.Path
    Else
        startPath = InitialPath
    End If
    
    'Show the dialog box
    With dialogBox
        .Title = "Select the folder containing all of the Consumption files."
        .AllowMultiSelect = False
        .InitialFileName = startPath
        .Show
    End With
    
    'return the results of the file dialog
    If dialogBox.SelectedItems.count = 1 Then
        GetFileOrFolderPath = dialogBox.SelectedItems(1)
    Else
        GetFileOrFolderPath = ""
    End If
    
    'destruct the dialog
    Set dialogBox = Nothing
End Function

Public Function CheckFileCompatibility() As FileCompatability
    If DemandFileType >= [_First_Demand_File] _
        And DemandFileType <= [_Last_Demand_File] Then
        If SupplyFileType = DemandFileType - DEMAND_MINUS_SUPPLY_MATCH Then
            'Is a match
            CheckFileCompatibility = Match_All_Good
        Else
            'Not a match
            CheckFileCompatibility = File_Aggregation_Not_Same
        End If
    Else
        'Not a demand file
        CheckFileCompatibility = Demand_File_Not_Demand
    End If
    
    'check to see if the supply file is a supply file
    If SupplyFileType >= [_First_Supply_File] _
        And SupplyFileType <= [_Last_Supply_File] Then
        'Everything is good, use above results
    Else
        'Not a supply file
        CheckFileCompatibility = Supply_File_Not_Supply
    End If
End Function

Public Sub CheckFile(ByVal targetFileName As String, _
                      ByRef DataFileType As FileType, _
                      ByRef DataNumberOfWeeks As Long, _
                      ByRef DataNumberOfRows As Long)
'Checks the data file (which is already open) to determine what kind of file
'   it is. If it cannot identify it, then it marks it as unknown.
    
    'Windows(targetFileName).Activate
    openMRPFile.Activate
    
    Dim colHeadings As Range
    Dim Header As Range
    
    Set colHeadings = ActiveSheet.Range("A1:J1")
    
    'this select loop code below will seek for material column position in source file _
    once it found, detect the data rows
    '   This is to account for all file types
    For Each Header In colHeadings.Cells
        If Header.Value = "Material No" Then
            'MsgBox "material found in col : " & Header.Column
            DataNumberOfRows = Application.WorksheetFunction.CountA(ActiveSheet.Columns(Header.Column)) - 1
            Exit For
        End If
    Next Header
    
    
    DemandNumberOfColumns = Application.WorksheetFunction.CountA(Range("1:1"))
'------------------------------------------------------------------------------
'   Check for Vendor files
'------------------------------------------------------------------------------
    If Left((Range("A1").Value), 6) = "Vendor" Then
        If WorksheetFunction.Proper(Right((Range("J1").Value), 6)) = "Supply" Then
            DataFileType = Vendor_Supply
            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("L1:CZ1")) - 1
            'MsgBox "We done 3?"
            Exit Sub
            
        ElseIf WorksheetFunction.Proper(Right((Range("J1").Value), 6)) = "Demand" Then
            DataFileType = Vendor_Demand
            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("L1:CZ1")) - 1
            'MsgBox "We done 4?"
            Exit Sub
        Else
            DataFileType = Unknown_Vendor_File
            DataNumberOfWeeks = 0
            'MsgBox "We done 5?"
            Exit Sub
            
        End If
    End If
    
'------------------------------------------------------------------------------
'   Check for Material files
'------------------------------------------------------------------------------
    If Left((Range("A1").Value), 5) = "Plant" Then
        If WorksheetFunction.Proper(Right((Range("H1").Value), 6)) = "Supply" Then
            DataFileType = Material_Supply
            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("J1:CZ1")) - 1
            'MsgBox "W4"
            Exit Sub
            
        ElseIf WorksheetFunction.Proper(Right((Range("H1").Value), 6)) = "Demand" Then
            DataFileType = Material_Production
            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("J1:CZ1")) - 1
            'MsgBox "W5"
            Exit Sub
            
        Else
            DataFileType = Unknown_Material_File
            DataNumberOfWeeks = 0
            'MsgBox "W6"
            Exit Sub
            
        End If
    End If
    
'------------------------------------------------------------------------------
'   Check for Planned Supply or Demand
'------------------------------------------------------------------------------
    If Left((Range("A1").Value), 3) = "MRP" And Left((Range("B1").Value), 5) = "Vendo" Then
    
    '   Standard cost
    '------------------------------------------------------
        If Left((Range("H1").Value), 8) = "Standard" Or Left((Range("H1").Value), 5) = "STPRS" Then
            If WorksheetFunction.Proper(Right((Range("L1").Value), 6)) = "Demand" Then
                DataFileType = Planned_Demand
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("N1:CZ1")) - 1
                'MsgBox "W7"
                Exit Sub
                
            Else
                DataFileType = Planned_Supply
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("M1:CZ1")) - 1
                'MsgBox "W8"
                Exit Sub
                
            End If
            
    '   NO Standard cost
    '------------------------------------------------------
        Else
            'this is the one it goes to!!!!!
            If WorksheetFunction.Proper(Right((Range("K1").Value), 6)) = "Demand" Then
                DataFileType = Planned_Demand__NO_STANDARD_COST
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("M1:CZ1")) - 1
                'MsgBox "W9"
                Exit Sub
                
            Else
                DataFileType = Planned_Supply__NO_STANDARD_COST
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("M1:CZ1")) - 1
                'MsgBox "W10"
                Exit Sub
                
            End If
        End If
    End If
    
'------------------------------------------------------------------------------
'   Check for Material
'------------------------------------------------------------------------------
    If Left((Range("A1").Value), 3) = "MRP" And Left((Range("B1").Value), 5) = "Plant" Then
    
    '   Standard cost
    '------------------------------------------------------
        If Left((Range("F1").Value), 5) = "STPRS" Or Left((Range("F1").Value), 5) = "Stand" Then
            If Right((Range("I1").Value), 5) = "Stock" Then
                DataFileType = Material_Planned_Demand
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("L1:CZ1")) - 1
                'MsgBox "W11"
                Exit Sub
                
            Else
                DataFileType = Material_Planned_Supply
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("K1:CZ1")) - 1
                'MsgBox "W12"
                Exit Sub
            
            End If
            
    '   NO Standard cost
    '------------------------------------------------------
        Else
            If WorksheetFunction.Proper(Right((Range("I1").Value), 6)) = "Demand" Then
                DataFileType = Material_Planned_Demand__NO_STANDARD_COST
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("K1:CZ1")) - 1
                'MsgBox "W13"
                Exit Sub
                
            Else
                DataFileType = Material_Planned_Supply__NO_STANDARD_COST
                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("K1:CZ1")) - 1
                'MsgBox "W14"
                Exit Sub
            
            End If
        End If
    End If
    
    '==============
    ' Unknown file type
    '==============
    DataFileType = Unknown_file
    DataNumberOfWeeks = 0
End Sub


Public Function ExportVendorFile(ByVal HideDFC As Boolean, _
                                 ByVal HideWFC As Boolean, whatTask As Tasks) As String
                                 
Debug.Print Now & " export vendor file begin"
Application.ScreenUpdating = False
Application.DisplayAlerts = False

'   Exports the vendor report
'==============================================================================
    Dim VendorFile As Workbook, MASTERfile As Workbook
    Dim ReportWorksheet As Worksheet
    Dim tempsheet As Worksheet
    Dim vendorFileName As String
    Dim tmpControl As Shape
    
    'set all variable go back to null
    Set VendorFile = Nothing
    Set ReportWorksheet = Nothing
    Set tempsheet = Nothing
    vendorFileName = vbNullString
    Set tmpControl = Nothing
    
    
    Const VENDOR_SUB_FOLDER As String = "Vendor Reports\For the Vendor"
    Const SUB_FOLDER As String = "Vendor Reports"
    
    GENERATOR_WORKBOOK_NAME = ThisWorkbook.Name
    
    '   Hide the home tab in this workbook
    '--------------------------------------------------------------------------
'    HQMMToolkit.HomePage.Visible = xlSheetHidden
'    HQMMToolkit.CompareWeeks.Visible = xlSheetHidden
        
    Application.Calculation = xlCalculationAutomatic
    
    '   freeze pane activated
    '----------------------------------
    With HQMMToolkit.Report
        .Activate
        .Range("E16").Select
    End With
        ActiveWindow.LargeScroll down:=-1
        ActiveWindow.LargeScroll ToRight:=-1
        ActiveWindow.FreezePanes = True
        ActiveWorkbook.Saved = True
    'ActiveWorkbook.Save
    
    '   Check to see if the user has a vendor reports directory
    '--------------------------------------------------------------------------
    If Len(Dir(fileLocation & "\" & SUB_FOLDER, vbDirectory)) = 0 Then
        MkDir fileLocation & "\" & SUB_FOLDER
    End If
'    If Len(Dir("C:\Material PSI" & "\" & SUB_FOLDER, vbDirectory)) = 0 Then
'        MkDir "C:\Material PSI" & "\" & SUB_FOLDER
'    End If

    '   Save the report
    '------------------------------------------------------------------------
    'if dataFileType within this, add time stamp to name to avoid override existing file
If DemandFileType = Material_Production Or DemandFileType = Material_Planned_Demand _
    Or DemandFileType = Material_Planned_Demand__NO_STANDARD_COST _
    Or DemandFileType = Material_Planned_Supply Or DemandFileType = Material_Planned_Supply__NO_STANDARD_COST _
    Or DemandFileType = Material_Supply Then
    
    vendorFileName = fileLocation & "\" & _
        SUB_FOLDER & "\" & VendorName & " (" & VendorNumber & ") - Master - " & _
        Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
    justMasterFileName = VendorName & " (" & VendorNumber & ") - Master - " & _
        Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
        
    'vendorFileName = "C:\Material PSI" & _
        "\" & SUB_FOLDER & "\" & VendorName & " - Master - " & _
        Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
Else

    vendorFileName = fileLocation & "\" & _
        SUB_FOLDER & "\" & VendorName & " - Master - " & _
        Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
    justMasterFileName = VendorName & " - Master - " & _
        Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
        
    'vendorFileName = "C:\Material PSI" & _
        "\" & SUB_FOLDER & "\" & VendorName & " - Master - " & _
        Format(Now(), "mm-dd-yyyy") & ".xlsm"
End If

    'save master file name in its variable for open purpose
    MasterFileName = vendorFileName
    
    On Error GoTo ErrorSaveAsMasterFile
    ActiveWorkbook.SaveCopyAs vendorFileName
    
    Set MASTERfile = Application.Workbooks.Open(vendorFileName)
    Set ReportWorksheet = MASTERfile.Worksheets(REPORT_WORKSHEET_NAME)
    
    Application.DisplayAlerts = False
    For Each tempsheet In MASTERfile.Worksheets
        If tempsheet.Name <> REPORT_WORKSHEET_NAME Then
           tempsheet.Delete
        End If
    Next tempsheet
    Application.DisplayAlerts = True
    
    MASTERfile.Save
    MASTERfile.Saved = True
    MASTERfile.Close
    
    If whatTask = DFCReport Then
        Set VendorFile = Application.Workbooks.Open(vendorFileName)
        Set ReportWorksheet = VendorFile.Worksheets(REPORT_WORKSHEET_NAME)
        With ReportWorksheet
            .Shapes("btnExport").Visible = msoFalse
            .Shapes("btnImport").Visible = msoFalse
            '.Shapes("recCheck").Visible = msoFalse
            .Shapes("lblExport").Visible = msoFalse
            .Shapes("lblImport").Visible = msoFalse
        End With
        'move check boxes to left
        ActiveSheet.Shapes.Range(Array("recCheck", "chkStdCost", "chkDFC", "chkWFC", _
        "ChkTotals")).Select
        Selection.ShapeRange.IncrementLeft -150
        Range("a1").Select
    End If

If whatTask = SingleFile Then
    '   Check to see if the user has a vendor reports-vendor file directory
    '--------------------------------------------------------------------------
    If Len(Dir(fileLocation & "\" & VENDOR_SUB_FOLDER, vbDirectory)) = 0 Then
        MkDir fileLocation & "\" & VENDOR_SUB_FOLDER
    End If
'    If Len(Dir("C:\Material PSI" & "\" & VENDOR_SUB_FOLDER, vbDirectory)) = 0 Then
'        MkDir "C:\Material PSI" & "\" & VENDOR_SUB_FOLDER
'    End If
    
    '   Save the vendor version of the report
    '--------------------------------------------------------------------------
    '!
If DemandFileType = Material_Production Or DemandFileType = Material_Planned_Demand _
    Or DemandFileType = Material_Planned_Demand__NO_STANDARD_COST _
    Or DemandFileType = Material_Planned_Supply Or DemandFileType = Material_Planned_Supply__NO_STANDARD_COST _
    Or DemandFileType = Material_Supply Then
    
    vendorFileName = fileLocation & "\" & _
        VENDOR_SUB_FOLDER & "\" & VendorName & " (" & VendorNumber & ") - " & Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
      justVendorFileName = VendorName & " (" & VendorNumber & ") - " & Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
    'vendorFileName = "C:\Material PSI" & _
        "\" & VENDOR_SUB_FOLDER & "\" & VendorName & " - " & _
        Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
Else

    vendorFileName = fileLocation & "\" & _
                    VENDOR_SUB_FOLDER & "\" & VendorName & " - " & _
                    Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
      justVendorFileName = VendorName & " - " & _
                            Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
    'vendorFileName = "C:\Material PSI" & _
        "\" & VENDOR_SUB_FOLDER & "\" & VendorName & " - " & _
        Format(Now(), "mm-dd-yyyy") & ".xlsm"
End If
    
    On Error GoTo ErrorSaveAsVendorFile
    ActiveWorkbook.SaveCopyAs vendorFileName
    'ActiveWorkbook.Save
    'ActiveWorkbook.Close
    
    Set VendorFile = Application.Workbooks.Open(vendorFileName)
    Set ReportWorksheet = VendorFile.Worksheets(REPORT_WORKSHEET_NAME)
    
    'delete standard cost values
    Range(Cells(3, STD_COST_COLUMN), Cells(Application.WorksheetFunction.CountA(Range("A15:A10000")) + 14, STD_COST_COLUMN)).Value = vbNullString
    
    '   Hide specific metrics & the totals
    '------------------------------------------------------------
    Call ReportSupport.ToggleHiddenData(ReportWorksheet, Standard_Cost, True)
    Call ReportSupport.ToggleHiddenTotals(ReportWorksheet, True)
    
    If HideDFC = True Then
        Call ReportSupport.ToggleHiddenData(ReportWorksheet, DFC, True)
    End If
    
    If HideWFC = True Then
        Call ReportSupport.ToggleHiddenData(ReportWorksheet, WFC, True)
    End If
    
    '   Hide the form controls
    '------------------------------------------------------------
    For Each tmpControl In ReportWorksheet.Shapes
        If tmpControl.Type = msoFormControl Then
            tmpControl.Visible = False
        End If
    Next 'tmpControl
    
    With ReportWorksheet
        .Shapes("btnExport").Visible = msoFalse
        .Shapes("btnImport").Visible = msoFalse
        .Shapes("recCheck").Visible = msoFalse
    End With
    
    '   Protect the report worksheet
    '------------------------------------------------------------
    ReportWorksheet.Protect _
        Password:=VENDOR_PASSWORD, _
        DrawingObjects:=False, _
        Contents:=True, _
        Scenarios:=True, _
        UserInterfaceOnly:=False, _
        AllowFormattingCells:=True, _
        AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, _
        AllowInsertingColumns:=False, _
        AllowInsertingRows:=False, _
        AllowInsertingHyperlinks:=False, _
        AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, _
        AllowSorting:=False, _
        AllowFiltering:=True, _
        AllowUsingPivotTables:=False
        
    ActiveSheet.EnableSelection = xlNoRestrictions 'to allow user select protected cell as well
    
    '   Hide other worksheets
    '------------------------------------------------------------
    Application.DisplayAlerts = False
    For Each tempsheet In VendorFile.Worksheets
        If tempsheet.Name <> REPORT_WORKSHEET_NAME Then
           tempsheet.Delete
        End If
    Next tempsheet
    Application.DisplayAlerts = True
End If
    
    VendorFile.Save
    VendorFile.Saved = True
    VendorFile.Close
    
    ExportVendorFile = vendorFileName
    
    '   UnHide the home tab in this workbook
    '--------------------------------------------------------------------------
    'HQMMToolkit.HomePage.Visible = xlSheetVisible
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    Debug.Print Now & " export vendor file end"
    Exit Function
    
ErrorSaveAsMasterFile:
    Windows(justMasterFileName).Close False
    Resume
    Exit Function

ErrorSaveAsVendorFile:
    Windows(justVendorFileName).Close False
    Resume
    

End Function





Sub Demo()

Call ReportGeneration.CleanGeneratorFile(HQMMToolkit.Report)
HQMMToolkit.HomePage.Visible = xlSheetVisible
HQMMToolkit.HomePage.Activate

End Sub

Sub resetThis()
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.EnableEvents = True

End Sub

Sub nonfsoidnf()




End Sub
Attribute VB_Name = "ExportMasterToVendor"
Sub ExportToVendorOnly()
'opens and begins the export procedure
    ExportVendorOnly.Show
End Sub

Function ExportOnlyVendorFile(ByVal HideDFC As Boolean, _
                                 ByVal HideWFC As Boolean) As String
'   Exports the vendor report
'==============================================================================
    Dim VendorFile As Workbook
    Dim ReportWorksheet As Worksheet
    Dim tempsheet As Worksheet
    Dim vendorFileName As String
    Dim tmpControl As Shape
    
    Const VENDOR_SUB_FOLDER As String = "For the Vendor" 'use that if path is static "Vendor Reports\For the Vendor"
    Application.Calculation = xlCalculationAutomatic
    
    '   Check to see if the user has a vendor reports-vendor file directory
    '--------------------------------------------------------------------------
    If Len(Dir(fileLocation & "\" & VENDOR_SUB_FOLDER, vbDirectory)) = 0 Then
        MkDir fileLocation & "\" & VENDOR_SUB_FOLDER
    End If
'    If Len(Dir("C:\Material PSI" & "\" & VENDOR_SUB_FOLDER, vbDirectory)) = 0 Then
'        MkDir "C:\Material PSI" & "\" & VENDOR_SUB_FOLDER
'    End If
    
    '   Save the vendor version of the report
    '--------------------------------------------------------------------------
    '!
    VendorName = Range(VENDOR_NAME_CELL).Value 'this cell contains only vendor name, hidden in white color
    vendorFileName = fileLocation & "\" & _
        VENDOR_SUB_FOLDER & "\" & VendorName & " - " & Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
    justVendorFileName = VendorName & " - " & Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsm"
    'vendorFileName = "C:\Material PSI" & _
        "\" & VENDOR_SUB_FOLDER & "\" & VendorName & " - " & _
        Format(Now(), "mm-dd-yyyy") & ".xlsm"
        
    On Error GoTo ErrorSaveAsVendorFile
    ActiveWorkbook.SaveCopyAs vendorFileName
    
    Set VendorFile = Application.Workbooks.Open(vendorFileName)
    Set ReportWorksheet = VendorFile.Worksheets(REPORT_WORKSHEET_NAME)
    
    'copy vendor name and file type to upper part
    Range("B8:B9").Copy Range("B2:B3")
    
    'delete standard cost values
    Range(Cells(3, STD_COST_COLUMN), Cells(Application.WorksheetFunction.CountA(Range("A15:A10000")) + 14, STD_COST_COLUMN)).Value = vbNullString
    
    '   Hide specific metrics & the totals
    '------------------------------------------------------------
    Call ReportSupport.ToggleHiddenData(ReportWorksheet, Standard_Cost, True)
    Call ReportSupport.ToggleHiddenTotals(ReportWorksheet, True)
    
    If HideDFC = True Then
        Call ReportSupport.ToggleHiddenData(ReportWorksheet, DFC, True)
    End If
    
    If HideWFC = True Then
        Call ReportSupport.ToggleHiddenData(ReportWorksheet, WFC, True)
    End If
    
    '   Hide the form controls
    '------------------------------------------------------------
    For Each tmpControl In ReportWorksheet.Shapes
        If tmpControl.Type = msoFormControl Then
            tmpControl.Visible = False
        End If
    Next 'tmpControl
    
    With ReportWorksheet
        .Shapes("btnExport").Visible = msoFalse
        .Shapes("btnImport").Visible = msoFalse
        .Shapes("recCheck").Visible = msoFalse
    End With
    
    '   Protect the report worksheet
    '------------------------------------------------------------
    ReportWorksheet.Protect _
        Password:=VENDOR_PASSWORD, _
        DrawingObjects:=False, _
        Contents:=True, _
        Scenarios:=True, _
        UserInterfaceOnly:=False, _
        AllowFormattingCells:=True, _
        AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, _
        AllowInsertingColumns:=False, _
        AllowInsertingRows:=False, _
        AllowInsertingHyperlinks:=False, _
        AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, _
        AllowSorting:=False, _
        AllowFiltering:=True, _
        AllowUsingPivotTables:=False
     ActiveSheet.EnableSelection = xlNoRestrictions 'to allow user select protected cell as well
  
    '   Hide other worksheets
    '------------------------------------------------------------
    For Each tempsheet In VendorFile.Worksheets
        If tempsheet.Name <> REPORT_WORKSHEET_NAME Then
            tempsheet.Visible = xlSheetHidden
        End If
    Next tempsheet
    
    VendorFile.Save
    VendorFile.Saved = True
    VendorFile.Close
    
    ExportOnlyVendorFile = vendorFileName
    Exit Function

ErrorSaveAsVendorFile:
    Windows(justVendorFileName).Close False
    Resume
     
End Function



Attribute VB_Name = "ExportVendorNEmailOption"
Attribute VB_Base = "0{DE68BA72-4BD7-49E3-B6B4-9D4DCC422B3F}{F707909C-8AAB-44BF-BAE5-F99163AF00B3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub colorLables(ByVal labelToColorName As String)
'colors the provided label, sets the others to a transparent background
    Dim ctrl As Control
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "Label" Then
            If ctrl.Name <> labelToColorName Then
                ctrl.BackStyle = fmBackStyleTransparent
            Else
                ctrl.BackStyle = fmBackStyleOpaque
                ctrl.BackColor = RGB(220, 230, 250)
            End If
        End If
    Next ctrl
    
    'reset the header color
    Me.HeaderBack.BackStyle = fmBackStyleOpaque
    
    'comit the color changes
    Me.Repaint
End Sub

Private Sub chbDFC_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblDFC")
End Sub

Private Sub chbEmail_Click()
    Dim Ans As VbMsgBoxResult
    If Me.chbEmail.Value = True Then
        Ans = MsgBox("Please close all outlook email applications and excel files on your computer before running this application. Are you done closing all of them?", vbYesNo, "Close Email Warning")
        If Ans = vbNo Then
            ExitCode = True
            Unload Me
        End If
    End If
End Sub

Private Sub chbEmail_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblEmail")
End Sub

Private Sub chbWFC_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblWFC")
End Sub

Private Sub cmdExit_Click()
'closes the form
    Dim msgResponse As Long
    msgResponse = MsgBox( _
        Prompt:="Are you sure you want to cancel the report generation?", _
        Buttons:=vbYesNo, _
        Title:="Confirm Cancel")
    
    If msgResponse = vbYes Then
        Call ReportGeneration.CleanGeneratorFile(ActiveWorkbook.Worksheets(REPORT_WORKSHEET_NAME))
        ExitCode = True 'this will stop batch process running in openAndVet Form
        Unload Me
    End If
End Sub

Private Sub cmdExport_Click()
'   Exports the report with the selected criteria
'==============================================================================
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    
    If Me.chbDFC.Value = True Then
        DFCchk = False
    Else
        DFCchk = True
    End If
    
    If Me.chbWFC.Value = True Then
        WFCchk = False
    Else
        WFCchk = True
    End If
    
    If Me.chbEmail.Value = True Then
        IsEmailed = True
    Else
        IsEmailed = False
    End If
    
    'MsgBox Me.chbEmail.Value
    'selected task is Batch then do  nothing. Only pass the DFC-WFC value to public variable
    'close this form and continue remaining code in open and vet form
    Unload Me
       
End Sub

Private Sub lblDFC_Click()
'   Toggles the DFC Checkbox
'==============================================================================
    With Me.chbDFC
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
End Sub

Private Sub lblDFC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbDFC.SetFocus
End Sub

Private Sub lblEmail_Click()
'   Toggles the email Checkbox
'==============================================================================
    With Me.chbEmail
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
    
    Dim Ans As VbMsgBoxResult
    If Me.chbEmail.Value = True Then
        'Ans = MsgBox("Please close all outlook email applications and excel files on your computer before running this application. Are you done closing all of them?", vbYesNo, "Close Email Warning")
        If Ans = vbNo Then
            ExitCode = True
            Unload Me
        End If
    End If
End Sub

Private Sub lblEmail_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbEmail.SetFocus
End Sub

Private Sub lblWFC_Click()
'   Toggles the WFC Checkbox
'==============================================================================
    With Me.chbWFC
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
End Sub

Private Sub lblWFC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbWFC.SetFocus
End Sub

Private Sub UserForm_Initialize()
'Sets the colors of the objects

    Me.HeaderBack.BackColor = RGB(220, 230, 250)
    
    Me.cmdExport.BackColor = RGB(220, 230, 250)
    Me.cmdExit.BackColor = RGB(220, 230, 250)

    Me.Repaint
End Sub



Attribute VB_Name = "ExportVendorOnly"
Attribute VB_Base = "0{63D85AD8-CD90-474F-8E3D-576BE954FDEA}{F916EFFF-A39B-4666-A801-4F7578FCB570}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub colorLables(ByVal labelToColorName As String)
'colors the provided label, sets the others to a transparent background
    Dim ctrl As Control
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "Label" Then
            If ctrl.Name <> labelToColorName Then
                ctrl.BackStyle = fmBackStyleTransparent
            Else
                ctrl.BackStyle = fmBackStyleOpaque
                ctrl.BackColor = RGB(220, 230, 250)
            End If
        End If
    Next ctrl
    
    'reset the header color
    Me.HeaderBack.BackStyle = fmBackStyleOpaque
    
    'comit the color changes
    Me.Repaint
End Sub

Private Sub chbDFC_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblDFC")
End Sub

Private Sub chbWFC_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblWFC")
End Sub

Private Sub cmdExit_Click()
'closes the form
    Dim msgResponce As Long
    msgResponce = MsgBox( _
        Prompt:="Are you sure you want to cancel the report generation?", _
        Buttons:=vbYesNo, _
        Title:="Confirm Cancel")
    
    If msgResponce = vbYes Then
        Unload Me
    End If
End Sub

Private Sub cmdExport_Click()
'   Exports the report with the selected criteria
'==============================================================================
    Dim DFC As Boolean
    Dim WFC As Boolean
    Dim Ans As VbMsgBoxResult
    
    Ans = MsgBox("Are you done with making all changes to master file?" _
            , vbYesNo, "Proceed Confirmation")
    If Ans = vbNo Then Exit Sub
            
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    
    If Me.chbDFC.Value = True Then
        DFC = False
    Else
        DFC = True
    End If
    
    If Me.chbWFC.Value = True Then
        WFC = False
    Else
        WFC = True
    End If

    Call ReportSupport.EmailVendorFile(ExportMasterToVendor.ExportOnlyVendorFile(DFC, WFC))
    
    'ActiveWorkbook.Worksheets(1).Activate
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Unload Me
End Sub

Private Sub lblDFC_Click()
'   Toggles the DFC Checkbox
'==============================================================================
    With Me.chbDFC
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
End Sub

Private Sub lblDFC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbDFC.SetFocus
End Sub

Private Sub lblWFC_Click()
'   Toggles the WFC Checkbox
'==============================================================================
    With Me.chbWFC
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
End Sub

Private Sub lblWFC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbWFC.SetFocus
End Sub

Private Sub UserForm_Initialize()
'Sets the colors of the objects

    Me.HeaderBack.BackColor = RGB(220, 230, 250)
    
    Me.cmdExport.BackColor = RGB(220, 230, 250)
    Me.cmdExit.BackColor = RGB(220, 230, 250)

    Me.Repaint
End Sub

Attribute VB_Name = "ExportVendorOptions"
Attribute VB_Base = "0{6A78B94B-57AE-4DAB-9AA0-34568B3229AD}{FEB0E6F5-BF45-46F3-9FB3-05F09513CF88}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub colorLables(ByVal labelToColorName As String)
'colors the provided label, sets the others to a transparent background
    Dim ctrl As Control
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "Label" Then
            If ctrl.Name <> labelToColorName Then
                ctrl.BackStyle = fmBackStyleTransparent
            Else
                ctrl.BackStyle = fmBackStyleOpaque
                ctrl.BackColor = RGB(220, 230, 250)
            End If
        End If
    Next ctrl
    
    'reset the header color
    Me.HeaderBack.BackStyle = fmBackStyleOpaque
    
    'comit the color changes
    Me.Repaint
End Sub

Private Sub chbDFC_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblDFC")
End Sub

Private Sub chbWFC_Enter()
'   Colors the label
'==============================================================================
    Call colorLables("lblWFC")
End Sub

Private Sub cmdExit_Click()
'closes the form
    Dim msgResponce As Long
    msgResponce = MsgBox( _
        Prompt:="Are you sure you want to cancel the report generation?", _
        Buttons:=vbYesNo, _
        Title:="Confirm Cancel")
    
    If msgResponce = vbYes Then
        Call ReportGeneration.CleanGeneratorFile(ActiveWorkbook.Worksheets(REPORT_WORKSHEET_NAME))
        If SelectedTask = Batch Then
            ExitCode = True 'this will stop batch process running in openAndVet Form
            Unload Me
        Else
            Unload Me
            ''Splash.show
        End If
    End If
End Sub

Private Sub cmdExport_Click()
'   Exports the report with the selected criteria
'==============================================================================
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    
    If Me.chbDFC.Value = True Then
        DFCchk = False
    Else
        DFCchk = True
    End If
    
    If Me.chbWFC.Value = True Then
        WFCchk = False
    Else
        WFCchk = True
    End If
    
    Select Case SelectedTask
    Case Batch
    'if selected task is Batch then do  nothing. Only pass the DFC-WFC value to public variable
    'close this form and continue remaining code in open and vet form
        Unload Me
       
    Case Else
        'set program workbook name to this file
        PROGRAM_WORKBOOK_NAME = ActiveWorkbook.Name
        
        MsgBox "File will be saved in " & fileLocation & "\vendor Reports"
        
        'unhide report tab in program file to received imported data
        Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report").Visible = True
        'ask if user wants to open master file
        Dim Ans  As VbMsgBoxResult
        
        If SelectedTask = SingleFile Then
        
            Ans = MsgBox("Do you want to edit the master file prior to sending the vendor file to the vendor?", _
                        vbYesNo, "Open master file")
            If Ans = vbYes Then
                Call ExportVendorFile(DFCchk, WFCchk, SelectedTask)
                Workbooks.Open MasterFileName
                Windows(PROGRAM_WORKBOOK_NAME).Activate
                
                Call ReportGeneration.CleanGeneratorFile(Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"))
                    
                Windows(justMasterFileName).Activate
                
                Application.ScreenUpdating = True
                Application.Calculation = xlCalculationAutomatic
                Application.EnableEvents = True
                Unload Me
            Else
                
                Call ReportSupport.EmailVendorFile(Me.ExportVendorFile(DFCchk, WFCchk, SelectedTask))
                Call ReportGeneration.CleanGeneratorFile(Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"))
                
                'reset outApp variable
                Set OutApp = Nothing
                Application.ScreenUpdating = True
                Application.Calculation = xlCalculationAutomatic
                Application.EnableEvents = True
                
                Unload Me
                ''Splash.show
            End If
        
        ElseIf SelectedTask = DFCReport Then
            Ans = MsgBox("Do you want to edit the master file?", _
                        vbYesNo, "Open master file")
            If Ans = vbYes Then
                Call ExportVendorFile(DFCchk, WFCchk, SelectedTask)
                Workbooks.Open MasterFileName
                Windows(PROGRAM_WORKBOOK_NAME).Activate
                
                Call ReportGeneration.CleanGeneratorFile(Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"))
                    
                Windows(justMasterFileName).Activate
                
                Application.ScreenUpdating = True
                Application.Calculation = xlCalculationAutomatic
                Application.DisplayAlerts = True
                Application.EnableEvents = True
                Unload Me
            Else
                
                Call ExportVendorFile(DFCchk, WFCchk, SelectedTask)
                Call ReportGeneration.CleanGeneratorFile(Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"))
                
                Application.ScreenUpdating = True
                Application.Calculation = xlCalculationAutomatic
                Application.DisplayAlerts = True
                Application.EnableEvents = True
                
                Unload Me
                ''Splash.show
            End If
        End If
    End Select
End Sub

Private Sub lblDFC_Click()
'   Toggles the DFC Checkbox
'==============================================================================
    With Me.chbDFC
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
End Sub

Private Sub lblDFC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbDFC.SetFocus
End Sub

Private Sub lblWFC_Click()
'   Toggles the WFC Checkbox
'==============================================================================
    With Me.chbWFC
        If .Value = False Then
            .Value = True
        Else
            .Value = False
        End If
    End With
End Sub

Private Sub lblWFC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'   Colors the label
'==============================================================================
    Call Me.chbWFC.SetFocus
End Sub

Private Sub Title_Click()

End Sub

Private Sub UserForm_Initialize()
'Sets the colors of the objects

    Me.HeaderBack.BackColor = RGB(220, 230, 250)
    
    Me.cmdExport.BackColor = RGB(220, 230, 250)
    Me.cmdExit.BackColor = RGB(220, 230, 250)
    
    Select Case SelectedTask
    Case SingleFile, Batch
        Me.cmdExport.Caption = "Save The Master" & vbNewLine & "and Vendor Files"
    Case DFCReport
        Me.cmdExport.Caption = "Save The Master Files"
    Case Else
        Me.cmdExport.Caption = "Save The Master" & vbNewLine & "and Vendor Files"
    End Select

    Me.Repaint
End Sub
Attribute VB_Name = "IBS_DOS_DFC"
Option Explicit

Public runCounter As Long

' Modular Math Note
' Simply another way of looking at division, with the concentration on the remainder
' 9 mod 4  = 1
' 12 mod 5 = 2
' 15 mod 6 = 3

'// DOS Weeks function adapted by Ed McGrath
'// DOS follows the same math as the DFC Weeks function, but starts at the last (right most)
'//     cell in the "forecast" range.

Function DOSWeeks(OpeningInv As Double, ForecastRange As Range)
Dim SumRunningInv As Double
Dim Cell As Range
Dim Full_Week_Days As Integer
Dim DFC_Bal As Double
Dim InvBal As Double
Dim intCellCounter As Integer
'
On Error GoTo ErrorLine
'
Application.MacroOptions _
Macro:="DFCWeeks", _
Description:="Calculates the ACTUAL Days Forward Coverage for a given WEEKLY forecast range and a beginning INVENTORY value. "
'
'---------------------------------------------------------------
For intCellCounter = ForecastRange.Cells.count To 1 Step -1 'Each Cell In ForecastRange
     '
     ' If [Previous Months Inv + Current Cell Inv] < [Open Inventory] then Cell is a FULL WEEK
     Set Cell = ForecastRange.Cells(intCellCounter)
     If SumRunningInv + Cell < OpeningInv Then
          '
          SumRunningInv = SumRunningInv + Cell
          Full_Week_Days = Full_Week_Days + 7
          '
     Else
          '
          ' Not a FULL WEEK
          Exit For
          '
     End If
     '
Next intCellCounter
'---------------------------------------------------------------
'
InvBal = OpeningInv - SumRunningInv
'
DFC_Bal = InvBal / (Cell / 7) ' Inventory / Daily Forecast
'
DOSWeeks = Full_Week_Days + DFC_Bal
'
Exit Function
'
ErrorLine:
DOSWeeks = ""
'
End Function

Function DFCWeeks(OpeningInv As Double, ForecastRange As Range)
'This function is ROW oriented. it assumes that time runs horizontally
'   That is, the weeks are in the columns, and there is an inventory row
'   and a forecast row(s)
'==============================================================================
    Dim SumRunningInv As Double
    Dim Cell As Range
    Dim Full_Week_Days As Integer
    Dim DFC_Bal As Double
    Dim InvBal As Double
    Dim fcstSumArray() As Double
    Dim columnCounter As Long
    Dim fcstRowCount As Long
    Dim fcstColumnCount As Long
    Dim fcstRunningRowTotal As Double
    Dim RowCounter As Long
    Dim periodCounter As Long
    Dim lastForecast As Double
    
    On Error GoTo ErrorLine
    
    'Check to see if the on-hand quantity is positive.
    'If it is not positive, then the DFC = 0 days
    If OpeningInv <= 0 Then
        DFCWeeks = 0
        Exit Function
    End If
    
    ' Check to see if the forecast range is a multi dimensional array,
    '   or just a single row/column
    With ForecastRange
        fcstRowCount = .Rows.count
        If fcstRowCount > 1 Then
            fcstColumnCount = .Columns.count
            
            ReDim fcstSumArray(1 To fcstColumnCount)
            For columnCounter = 1 To fcstColumnCount
                fcstRunningRowTotal = 0
                For RowCounter = 1 To fcstRowCount
                    fcstRunningRowTotal = fcstRunningRowTotal + _
                        .Cells(RowCounter, columnCounter).Value
                Next 'RowCounter
                
                fcstSumArray(columnCounter) = fcstRunningRowTotal
            Next 'columnCounter
            
            For periodCounter = 1 To fcstColumnCount
                If SumRunningInv + fcstSumArray(periodCounter) < OpeningInv Then
                    SumRunningInv = SumRunningInv + fcstSumArray(periodCounter)
                    Full_Week_Days = Full_Week_Days + 7
                Else
                    lastForecast = fcstSumArray(periodCounter)
                    Exit For
                End If
            Next 'periodCounter
            
            'Determine the remaining number of days
            '---------------------------------------------------------------
            
            InvBal = OpeningInv - SumRunningInv
            DFC_Bal = InvBal / (lastForecast / 7) ' Inventory / Daily Forecast
            DFCWeeks = Full_Week_Days + DFC_Bal
            Exit Function
        End If
    End With
    
    'Runs the Original methodology if there is only 1 row of fcst
    For Each Cell In ForecastRange
         
         ' If [Previous Months Inv + Current Cell Inv] < [Open Inventory] then Cell is a FULL WEEK
         If SumRunningInv + Cell < OpeningInv Then
              '
              SumRunningInv = SumRunningInv + Cell
              Full_Week_Days = Full_Week_Days + 7
              '
         Else
              '
              ' Not a FULL WEEK
              Exit For
              '
         End If
         '
    Next Cell
    '---------------------------------------------------------------
    '
    InvBal = OpeningInv - SumRunningInv
    '
    DFC_Bal = InvBal / (Cell / 7) ' Inventory / Daily Forecast
    '
    DFCWeeks = Full_Week_Days + DFC_Bal
    '
    Exit Function
    '
ErrorLine:
    DFCWeeks = ""
    '
End Function

Function DFCWeeks_BKK(OpeningInv As Double, ForecastRange As Range)
Dim SumRunningInv As Double
Dim Cell As Range
Dim Full_Week_Days As Integer
Dim DFC_Bal As Double
Dim InvBal As Double
'
On Error GoTo ErrorLine
'
runCounter = runCounter + 1
'Debug.Print runCounter
'Check to see if the on-hand quantity is positive.
'If it is not positive, then the DFC = 0 days
If OpeningInv <= 0 Then
    DFCWeeks = 0
    Exit Function
End If

For Each Cell In ForecastRange
     '
     ' If [Previous Months Inv + Current Cell Inv] < [Open Inventory] then Cell is a FULL WEEK
     If SumRunningInv + Cell < OpeningInv Then
          '
          SumRunningInv = SumRunningInv + Cell
          Full_Week_Days = Full_Week_Days + 7
          '
     Else
          '
          ' Not a FULL WEEK
          Exit For
          '
     End If
     '
Next Cell
'---------------------------------------------------------------
'
InvBal = OpeningInv - SumRunningInv
'
DFC_Bal = InvBal / (Cell / 7) ' Inventory / Daily Forecast
'
DFCWeeks = Full_Week_Days + DFC_Bal
'
Exit Function
'
ErrorLine:
DFCWeeks = ""
'
End Function


Attribute VB_Name = "INITIALIZATION"
'Sub Auto_Open()
'
'ThisWorkbook.Windows(1).WindowState = xlMinimized
'Splash.Show vbModeless
'
'End Sub

Sub startFromRibbon()
ThisWorkbook.Windows(1).WindowState = xlMinimized
Splash.Show vbModeless

End Sub

Sub startfromWB()
Splash.Show
End Sub

Attribute VB_Name = "ImportVendorData"
Attribute VB_Base = "0{40713263-0B68-44DE-8BA1-2BF33BBF15A8}{7B7FD1A6-07B8-455E-82DD-34FB503ED3A8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Function GetFileOrFolderPath(ByVal PickerType As MsoFileDialogType, _
                                     Optional ByVal InitialPath As String _
                                     ) As String
'returns the name of a file or folder based on the selections
    Dim dialogBox As FileDialog
    Dim startPath As String
    
    Set dialogBox = Application.FileDialog(PickerType)
    
    'Set the path for the file dialog to start in.
    'If one is not provided, use the current path of the workbook
    If Len(InitialPath) = 0 Then
        startPath = ActiveWorkbook.Path
    Else
        startPath = InitialPath
    End If
    
    'Show the dialog box
    With dialogBox
        .Title = "Select the vendor file."
        .AllowMultiSelect = False
        .InitialFileName = startPath
        .Show
    End With
    
    'return the results of the file dialog
    If dialogBox.SelectedItems.count = 1 Then
        GetFileOrFolderPath = dialogBox.SelectedItems(1)
    Else
        GetFileOrFolderPath = ""
    End If
    
    'destruct the dialog
    Set dialogBox = Nothing
End Function

Private Sub cmdCancel_Click()
'Close the form and go back to the main menu
    Unload Me
    ''Splash.show
End Sub

Private Sub cmdDemand_Click()
'opens the file dialog box to select the import file
    Me.txtDemand.Caption = GetFileOrFolderPath(msoFileDialogFilePicker, ActiveWorkbook.Path & "\For the vendor\")
End Sub

Private Sub cmdRun_Click()
'Copies the data from the import file to the report

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    
    'copy from MRP column : Plant name Column
    Windows(ImportFileName).Activate
    Worksheets(REPORT_WORKSHEET_NAME).Activate
    ActiveSheet.Unprotect VENDOR_PASSWORD
    ActiveSheet.Columns("A:" & ColumnLetterFromNumber(PLNT_DESC_COLUMN)).Select
    Selection.Copy
    
    Windows(reportName).Activate
    Worksheets(REPORT_WORKSHEET_NAME).Activate
    Range("A1").Select
    ActiveSheet.Paste
    Range("B1").Value = "TRUE"
    Worksheets(REPORT_WORKSHEET_NAME).UsedRange
    Application.CutCopyMode = False
    
    'copy from trend line column : end of column
    Windows(ImportFileName).Activate
    Worksheets(REPORT_WORKSHEET_NAME).Activate
    ActiveSheet.Columns(ColumnLetterFromNumber(TREND_LINE_COLUMN) & ":" & ColumnLetterFromNumber(Application.WorksheetFunction.CountA(Range("A15:DZ15")))).Select
    Selection.Copy
    
    Windows(reportName).Activate
    Worksheets(REPORT_WORKSHEET_NAME).Activate
    Cells(1, TREND_LINE_COLUMN).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    
    'copy comments part which are spread from UOM column : Run Out column
    Dim i As Long
    Dim rowCount As Long
    Dim currMatNum As String
    
    rowCount = Application.WorksheetFunction.CountA(Range("A15:A10000")) + 14
    
    For i = 16 To rowCount
        Windows(ImportFileName).Activate
        Worksheets(REPORT_WORKSHEET_NAME).Activate
        currMatNum = Cells(i, MAT_NUM_COLUMN).Value
        If currMatNum <> Cells(i + 1, MAT_NUM_COLUMN).Value Then
            Range(Cells(i - 4, UoM_COLUMN), Cells(i, RUN_OUT_COLUMN)).Select
            Selection.Copy
        
            Windows(reportName).Activate
            Worksheets(REPORT_WORKSHEET_NAME).Activate
            Range(Cells(i - 4, UoM_COLUMN), Cells(i, RUN_OUT_COLUMN)).Select
            ActiveSheet.Paste
            Application.CutCopyMode = False
            With Selection
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlTop
                .WrapText = True
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
            End With
            Selection.Merge
            Rows(CStr(Cells(i - 4, 1).Row) & ":" & CStr(Cells(i - 4, 1).Row)).EntireRow.AutoFit
            
        End If
    Next i
    
    With Application.Workbooks(ImportFileName)
        .Saved = True
        .Close
    End With
    
    'clear vendor and file type name
    Range("B2:B3").ClearContents
    
    'run recalculate all DFC
    Call RecalculateAllDFC
    MsgBox "All DFC has been recalculated."
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Unload Me
End Sub


Private Sub cmdVet_Click()
'Calls the vetting procedure
    Dim timeStamp As Double
    Dim CurrFileName As String
    
    If Len(Me.txtDemand.Caption) = 0 Then
        MsgBox ("Please select a file before trying to verify it.")
        Exit Sub
    End If
        
    'Grab the time stamp from the report and the name of the report
    reportName = ActiveWorkbook.Name
    timeStamp = ActiveWorkbook.Worksheets(REPORT_WORKSHEET_NAME).Range("C1").Value
    
    'get current master file path to prevent this master reopened
    CurrFileName = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    
    ImportFilePath = Me.txtDemand.Caption
    
    If CurrFileName = ImportFilePath Then
        MsgBox "You are importing master file ." & _
                vbNewLine & "Please import only the vendor file."
        Me.txtDemand.Caption = ""
        Exit Sub
    End If
        
    Application.Workbooks.Open _
        FileName:=ImportFilePath, _
        ReadOnly:=True
        
    'Record the name of the demand file
    ImportFileName = ActiveWorkbook.Name
      
    'Determine the type of file the demand file is
    If ImportFileMatch(Application.Workbooks(ImportFileName), timeStamp) _
        = True Then
        'file is valid, and it can continue
        Me.cmdRun.Enabled = True
        'MsgBox "Validation Completed and Accepted"
    Else
        'file is not valid
        MsgBox ("The file selected does NOT match the current report." _
            & vbCrLf & "Please select the vendor file that was created from " _
            & "this specific report.")
        With Application.Workbooks(ImportFileName)
            .Saved = True
            .Close
        End With
    End If
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
End Sub

Private Sub UserForm_Initialize()
'Sets colors, sets visibility & text based on type of report to create
    Dim ctrl As Control
    
'Set colors
    
    'Set all of the labels to light blue backgrounds
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "Label" Then
            ctrl.BackColor = RGB(220, 230, 250)
        End If
    Next ctrl
    
    'Set Border Colors
    Me.FrameFilePickers.BorderColor = RGB(30, 70, 120)
    
    'Color all of the buttons
    Me.cmdDemand.BackColor = RGB(220, 230, 250)
    Me.cmdCancel.BackColor = RGB(220, 230, 250)
    Me.cmdRun.BackColor = RGB(220, 230, 250)
    Me.cmdVet.BackColor = RGB(220, 230, 250)
        
'Set up form based on what type of report is to be created
'Put in the correct text (file/folder, & plural where needed)
'Set visibility of buttons as needed
'Adjust positions if neccesary
    Me.cmdVet.Visible = True
    Me.cmdRun.Enabled = False
        
    Me.Repaint
End Sub

Public Function ImportFileMatch(ByRef importFileWorkbook As Workbook, _
                                ByVal tStamp As Double) As Boolean
'Checks the import file (which is already open) to make sure it matches
'the report that is importing it
    If importFileWorkbook.Worksheets(REPORT_WORKSHEET_NAME).Range("C1").Value = _
        tStamp Then
        'File matches
        ImportFileMatch = True
    Else
        'File does not match
        ImportFileMatch = False
    End If
End Function
Attribute VB_Name = "Module1"
Sub getridofobject()


End Sub

Sub testingInsertLine()
    Dim t As Double
    t = Timer()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    'set program workbook name to this file
    PROGRAM_WORKBOOK_NAME = ActiveWorkbook.Name
    Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME).Visible = True
    Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("CompareWeeks").Visible = True
    
    SelectedTask = SingleFile
    CurrentDemandFileName = "Bemis Raw Data 091913.xlsx"
    DemandNumberOfRows = 13
    DemandNumberOfColumns = 26
    
    Select Case SelectedTask
        Case Batch
            
        Case SingleFile
            Call ReportGeneration.ImportData( _
            Application.Workbooks(CurrentDemandFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            DemandNumberOfColumns, _
            DemandFileType)
        
            Call InsertLines( _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(TEMPLATE_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            ReportNumberOfColumns, SingleFile)
            
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            
            Debug.Print Timer() - t
            'Unload Me
            'ExportVendorOptions.Show
        
        Case DFCReport
            'import demand data
            Call ReportGeneration.ImportData( _
            Application.Workbooks(CurrentDemandFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            DemandNumberOfColumns, _
            DemandFileType)
            
            'show bin and sumResult sheet
            Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("BIN").Visible = True
            Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("SumResult").Visible = True
            
            'import supply data
            Call CombineFile.importSupplyToBin( _
            Application.Workbooks(CurrentSupplyFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Bin"), _
            SupplyNumberOfRows, _
            SupplyNumberOfColumns, _
            SupplyFileType)
            
            'check is date is within the same range
            If Not isSameWeeks Then
                MsgBox "Date is not within same range."
                Call ReportGeneration.CleanGeneratorFile(Worksheets("Report"))
                Call CombineFile.CleanSumAndBin(Worksheets("BIN"))
                Call CombineFile.CleanSumAndBin(Worksheets("SumResult"))
                GoTo exitSelect
            End If
            
            Call ReportGeneration.InsertLines( _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(TEMPLATE_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            ReportNumberOfColumns, DFCReport)
            
            Call createSummarySupply( _
                Worksheets("Bin"), Worksheets("SumResult"), _
                Worksheets("Bin").UsedRange.Columns.count, _
                SupplyNumberOfRows)
    
            Call insertSumResultMatch(Worksheets("SumResult"), _
                        Worksheets("Report"), _
                        Worksheets("SumResult").UsedRange.Columns.count)
            
            'these line is to clear BIN and Sum Result tab
            Call CleanSumAndBin(Worksheets("BIN"))
            Call CleanSumAndBin(Worksheets("SumResult"))
                    
            'DFC recalculated as separate process
            Call recalculateDFC.RecalculateAllDFC
            
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            
            Debug.Print Timer() - t
            
            'Unload Me
            'ExportVendorOptions.Show
            
    End Select
exitSelect:
    Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME).Visible = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
End Sub

Sub resetAll()
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
End Sub


Sub RemovedProc()
'--------------------------------------
'this procedure is removed from report tab, worksheet change event
'--------------------------------------


'   Checks to see if the DFC function needs to be run
'   If it does, then it populates the cells needed with the formula
'==============================================================================
    'Exit Sub
    Dim dfcFormula As String
    Dim dfcCell As Range
    Dim CellsToUpdate As Range
    Dim lastDFCcolumn As Long
    Dim columnCounter As Long
    Dim plantCount As Long
    Dim NeedToProtect As Boolean
    
    Const DFC_ROW_OFFSET As Long = 3
    Const DEMAND_ROW_OFFSET As Long = -1
    Const INVENTORY_ROW_OFFSET As Long = 1

    '   Check if the target is in a supply column
    '----------------------------------------------------------------------
    If Target.Column > FIRST_FCST_COL And Target.Locked = False Then
        Application.ScreenUpdating = False
        Application.Calculation = xlCalculationManual
        
        '   Check to see if the DFC needs to be added
        '------------------------------
        lastDFCcolumn = _
            Cells(HEADER_ROWS_ADJUST, 1).End(xlToRight).Column - 1
        
        If lastDFCcolumn > Target.Column Then
            '   check to see if the sheet needs to be unprotected
            '------------------------------
            If Me.ProtectContents = True Then
                NeedToProtect = True
            End If
            
            '   Unprotect the sheet
            '------------------------------
            If NeedToProtect = True Then
                Call ReportSupport.ToggleProtection(Me, VENDOR_PASSWORD, False)
            End If
            
            '   DFC for the row it impacts
            '----------------------------------------------------------------------
            'Count the number of demand rows
            'demandCount = 0
            '    Do While .Cells(RowCounter - 2 - demandCount, MAT_NUM_COLUMN).Value = _
            '             .Cells(RowCounter - 1, MAT_NUM_COLUMN).Value
            '        demandCount = demandCount + 1
            '    Loop
            dfcFormula = ReportSupport.GenerateDFCformula( _
                firstDemandRow:=Target.Row + DEMAND_ROW_OFFSET, _
                lastDemandRow:=Target.Row + DEMAND_ROW_OFFSET, _
                OHrow:=Target.Row + INVENTORY_ROW_OFFSET, _
                firstDFCcolumn:=Target.Column, _
                lastDFCcolumn:=lastDFCcolumn, _
                LockLastColumn:=True)
            
            Me.Cells(Target.Row + DFC_ROW_OFFSET, Target.Column) _
                .Formula = dfcFormula
            
            Me.Cells(Target.Row + DFC_ROW_OFFSET, Target.Column) _
                .Copy
            
            With Me.Range(Cells(Target.Row + DFC_ROW_OFFSET, Target.Column), _
                          Cells(Target.Row + DFC_ROW_OFFSET, lastDFCcolumn - 1))
                .PasteSpecial xlPasteFormulas
                .Calculate
                .Copy
                .PasteSpecial xlPasteValues
            End With
            
            Application.CutCopyMode = False
            Application.Calculation = xlCalculationAutomatic
            
            '   Select the next Supply cell.
            '   If the cell edited was the last cell, then it next cell
            '----------------------------------------------------------------------
            Cells(Target.Row, Target.Column + 1).Select
            Application.ScreenUpdating = True
            
            '   Protect the sheet, if needed
            '------------------------------
            If NeedToProtect = True Then
                Call ReportSupport.ToggleProtection(Me, VENDOR_PASSWORD, True)
            End If
            Exit Sub
        Else
            'There is nothing to do.
        End If
    End If
End Sub

Sub revisedInsertLinesProc()
    For RowCounter = (numRows + firstDataRow) To firstDataRow + 1 Step -1
            
            If .Cells(RowCounter - 1, MAT_NUM_COLUMN).Value <> _
               .Cells(RowCounter, MAT_NUM_COLUMN).Value _
            Then
            '   Insert Lines
            '----------------------------------
                .Rows(RowCounter & ":" & RowCounter + 4).Insert Shift:=xlDown
                '.range(.cells(RowCounter, 1), Cells(RowCounter + 4, numCols + 1)).Insert Shift:=xlDown

                '   Copy formulas to the new rows
                '----------------------------------
                TemplateWorksheet.Range(TemplateWorksheet.Cells(FIRST_FORMULA_ROW, 1), _
                    TemplateWorksheet.Cells(LAST_FORMULA_ROW, numCols)).Copy

                .Range(.Cells(RowCounter, 1), .Cells(RowCounter + 4, numCols)) _
                    .PasteSpecial xlPasteAll
                '.Range(.Cells(RowCounter, 1), .Cells(RowCounter + 4, numCols)).Calculate
                
                '   Copy formats to the demand rows
                '----------------------------------
                If .Cells(RowCounter + 5, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88) Then
                    FollowUp = True
                End If
                
                TemplateWorksheet.Range(TemplateWorksheet.Cells(firstDataRow, 1), _
                    TemplateWorksheet.Cells(firstDataRow, numCols)).Copy
                With .Range(.Cells(RowCounter + 5, 1), _
                            .Cells(RowCounter + 5 + plantCount, numCols + 1))
                    .PasteSpecial xlPasteFormats
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
                End With
                With .Range(.Cells(RowCounter + 5, numCols + 1), _
                            .Cells(RowCounter + 5 + plantCount, numCols + 1))
                        .NumberFormat = "#,##0_);[Red](#,##0)"
                        .Font.Bold = True
                End With
                
                If FollowUp = True Then
                    .Cells(RowCounter + 5, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88)
                End If
            
            '   Projected Inventory formula
            '----------------------------------
                demandCount = 0
                Do While .Cells(RowCounter - 2 - demandCount, MAT_NUM_COLUMN).Value = _
                         .Cells(RowCounter - 1, MAT_NUM_COLUMN).Value
                    demandCount = demandCount + 1
                Loop
                
                .Range("N" & RowCounter + INVENTORY_ROW_OFFSET).Formula = _
                    "=SUM(N" & RowCounter + DEMAND_ROW_OFFSET - demandCount & _
                    ":N" & RowCounter & ")"
                .Range(.Cells(RowCounter + INVENTORY_ROW_OFFSET, FIRST_REPORT_FCST_COLUMN), _
                    .Cells(RowCounter + INVENTORY_ROW_OFFSET, numCols)).Formula = _
                    "=N" & RowCounter + INVENTORY_ROW_OFFSET & "-SUM(O" & _
                    RowCounter + DEMAND_ROW_OFFSET - demandCount & ":O" & _
                    RowCounter + DEMAND_ROW_OFFSET & ")" & "+O" & RowCounter

            '   Projected Dollars formula
            '----------------------------------
                .Range(.Cells(RowCounter + DOLLARS_ROW_OFFSET, STOCK_COLUMN), _
                    .Cells(RowCounter + DOLLARS_ROW_OFFSET, numCols)).Formula = _
                    "=N" & RowCounter + INVENTORY_ROW_OFFSET & _
                    "* $J$" & RowCounter + DEMAND_ROW_OFFSET - plantCount

            '   DFC Formula
            '----------------------------------
                dfcFormula = ReportSupport.GenerateDFCformula( _
                    firstDemandRow:=RowCounter + DEMAND_ROW_OFFSET - demandCount, _
                    lastDemandRow:=RowCounter + DEMAND_ROW_OFFSET, _
                    OHrow:=RowCounter + INVENTORY_ROW_OFFSET, _
                    firstDFCcolumn:=STOCK_COLUMN, _
                    lastDFCcolumn:=numCols - 1, _
                    LockLastColumn:=True)

                With .Range(.Cells(RowCounter + DFC_ROW_OFFSET, STOCK_COLUMN), _
                            .Cells(RowCounter + DFC_ROW_OFFSET, numCols - 1))
                    .Formula = dfcFormula
                    .Copy
                    .PasteSpecial xlPasteValues
                End With

            '   WFC formula
            '----------------------------------
                .Range(.Cells(RowCounter + WFC_ROW_OFFSET, STOCK_COLUMN), _
                    .Cells(RowCounter + WFC_ROW_OFFSET, numCols)).Formula = _
                    "=IFERROR((N$" & RowCounter + DFC_ROW_OFFSET & _
                        ")/7," & """" & """" & ")"
            
            '   Run-Out Formula
            '----------------------------------
                runOutCountRowAdjust = 0
                Do While .Cells(RowCounter + 6 + runOutCountRowAdjust, 1).Font.Color <> RGB(255, 255, 255)
                    runOutCountRowAdjust = runOutCountRowAdjust + 1
                    If runOutCountRowAdjust > 30 Then
                        runOutCountRowAdjust = 0
                        Exit Do
                    End If
                Loop
                .Range(.Cells(RowCounter + 5, RUN_OUT_COLUMN), _
                       .Cells(RowCounter + 5 + runOutCountRowAdjust, RUN_OUT_COLUMN)).Formula = _
                       "=IF(ISNUMBER(VALUE(RIGHT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),2)))=TRUE,IF(OR(LEFT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),1)=" & """" & "D" & """" & ",LEFT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),1)=" & """" & "W" & """" & ")=TRUE,MID(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),3,8),MID(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),1,8)),IFERROR(IF(RIGHT(INDEX($N$15:$DZ$15,1,MATCH(0,$M$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ":$DZ$" & _
                       RowCounter + 7 + runOutCountRowAdjust & ",-1)),2)=" & """" & "ck" & """" & "," & """" & "Today" & """" & "," & """" & """" & ")," & """" & """" & "))"

            '   Highlight F/U Materials
            '----------------------------------
                If .Cells(RowCounter - 1 - plantCount, FU_MAT_NUM_COLUMN).Value <> "" Then
                    .Cells(RowCounter - 1 - plantCount, FU_MAT_NUM_COLUMN) _
                        .Interior.Color = RGB(251, 178, 88)
                    If .Cells(RowCounter - 1 - plantCount, FU_MAT_NUM_COLUMN).Value = _
                       .Cells(RowCounter + 6, MAT_NUM_COLUMN) Then
                        .Cells(RowCounter + NUM_ROWS_TO_INSERT, MAT_NUM_COLUMN) _
                            .Interior.Color = RGB(251, 178, 88)
                    End If
                End If

            '   Merge material description cells
            '----------------------------------
                .Range(.Cells(RowCounter + 5, MAT_DESC_COLUMN), _
                    .Cells(RowCounter + 8 + plantCount, MAT_DESC_COLUMN)).Merge
                .Range(.Cells(RowCounter + 5, MAT_DESC_COLUMN), .Cells(RowCounter + 1, MAT_DESC_COLUMN)).WrapText = True
                .Range(.Cells(RowCounter + 5, MAT_DESC_COLUMN), .Cells(RowCounter + 1, MAT_DESC_COLUMN)).VerticalAlignment = xlTop
            
            '   Enter the Totals formulas & formatting
            '----------------------------------
                With .Range(.Cells(RowCounter - 1 - plantCount, numCols + TOTAL_COL_OFFSET), _
                            .Cells(RowCounter - 1, numCols + TOTAL_COL_OFFSET))
                    .NumberFormat = "#,##0_);[Red](#,##0)"
                    .FormulaR1C1 = _
                        "=SUM(RC" & CStr(FIRST_REPORT_FCST_COLUMN) & _
                         ":RC" & CStr(numCols) & ")"
                    '.Formula = _
                        "=SUM(" & _
                        ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                        RowCounter - 1 - dmdCounter & ":" & _
                        ColumnLetters.ColumnLetterFromNumber(numCols) & _
                        RowCounter - 1 - dmdCounter & ")"
                End With
                
                .Cells(RowCounter, numCols + TOTAL_COL_OFFSET).FormulaR1C1 = _
                    "=SUM(RC" & CStr(FIRST_REPORT_FCST_COLUMN) & _
                    ":RC" & CStr(numCols) & ")"
                '.Cells(RowCounter, numCols + TOTAL_COL_OFFSET).Formula = _
                    "=SUM(" & _
                    ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                    RowCounter + SUPPLY_ROW_OFFSET & ":" & _
                    ColumnLetters.ColumnLetterFromNumber(numCols) & _
                    RowCounter + SUPPLY_ROW_OFFSET & ")"
                'Bold & number format
                .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                    .Cells(RowCounter + SUPPLY_ROW_OFFSET, _
                        numCols + TOTAL_COL_OFFSET)) _
                    .Font.Bold = True
                    .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                        .Cells(RowCounter + SUPPLY_ROW_OFFSET, _
                        numCols + TOTAL_COL_OFFSET)).NumberFormat = "#,##0_);[Red](#,##0)"
                'Black
                .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, numCols + 1), _
                    .Cells(RowCounter + SUPPLY_ROW_OFFSET, numCols + 1)) _
                    .Font.Color = RGB(0, 0, 0)
                'Borders
                .Range(.Cells(RowCounter + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                        .Cells(RowCounter + 4, numCols + TOTAL_COL_OFFSET)) _
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
    
                '   Fill Down the ID values (item, loc, mrp...)
                '----------------------------------
                .Range(.Cells(RowCounter, MRP_COLUMN), _
                    .Cells(RowCounter + NUM_ROWS_TO_INSERT - 1, MAT_NUM_COLUMN)) _
                    .Value = .Range(.Cells(RowCounter - 1, MRP_COLUMN), _
                        .Cells(RowCounter - 1, MAT_NUM_COLUMN)).Value

                .Range(.Cells(RowCounter, PLNT_NUM_COLUMN), _
                    .Cells(RowCounter + NUM_ROWS_TO_INSERT - 1, PLNT_DESC_COLUMN)) _
                    .Value = .Range(.Cells(RowCounter - 1, PLNT_NUM_COLUMN), _
                        .Cells(RowCounter - 1, PLNT_DESC_COLUMN)).Value

                LastRow = LastRow + NUM_ROWS_TO_INSERT ' NEW Last Row
'                If plantCount > 0 Then
'                    RowCounter = RowCounter - plantCount
'                End If
                plantCount = 0
                FollowUp = False
            Else
                plantCount = plantCount + 1
            End If
        Next RowCounter
        
End Sub


Attribute VB_Name = "Module2"
Declare PtrSafe Function GetKeyState Lib "User32" (ByVal vKey As Integer) As Integer
Const SHIFT_KEY = 16

Function ShiftPressed() As Boolean
    ShiftPressed = GetKeyState(SHIFT_KEY) < 0
End Function

Function IsWorkBookOpen(FileName As String)
    Dim ff As Long, ErrNo As Long

    On Error Resume Next
    ff = FreeFile()
    Open FileName For Input Lock Read As #ff
    Close ff
    ErrNo = Err
    On Error GoTo 0

    Select Case ErrNo
    Case 0:    IsWorkBookOpen = False
    Case 70:   IsWorkBookOpen = True
    Case Else: Error ErrNo
    End Select
End Function


Sub testingProductionPullForward()
'idea is to make a raw master file and do a vlookup of this data
Application.ScreenUpdating = False

If Target.Address(0, 0) <> "C7" Then Exit Sub

If Environ("USERDOMAIN") <> "MYKFT" Then
    MsgBox "You are not eligible to use this feature. If you believe this is an error, please contact the MRP admin."
    Exit Sub
End If


Dim i As Integer, j As Integer, k As Integer, varChanger As Integer, numWeeks As Integer, PFval As Integer
Dim IncDec As String, oldPF As Integer, countToExit As Integer


    numWeeks = Range("P8").Value
    
    If Range("P7").Value = "" Then 'This is the first time through
        Range("P7").Value = 0
    Else
    End If
        
        oldPF = Range("P7").Value
            
    If Range("D1").Value = "None" Or Range("D1").Value = "" Then
        PFval = 0
    ElseIf Range("D1").Value = "1 Week" Then
        PFval = 1
    ElseIf Range("D1").Value = "2 Weeks" Then
        PFval = 2
    ElseIf Range("D1").Value = "3 Weeks" Then
        PFval = 3
    ElseIf Range("D1").Value = "4 Weeks" Then
        PFval = 4
    Else
        PFval = 0
    End If
    
    
If PFval = oldPF Then Exit Sub 'Do nothing, user didn't change the pull forward

varChanger = PFval - oldPF

If varChanger < 0 Then
    IncDec = "Decrease"
Else
    IncDec = "Increase"
End If

countToExit = 0
'This is going to be for increase
'---------------------------------------------------------------
'---------------------------------------------------------------
If IncDec = "Increase" Then
    For i = 0 To 10000
       If Range("O16").Offset(i).Value = "Demand" Then 'If production requirements then continue
            countToExit = 0
            If Range("Q16").Offset(i, numWeeks).Value = 0 Then 'If there are no production requirements skip, no need to move around a bunch of zeros
            Else
                For j = 0 To numWeeks - 2
                    If Range("Q16").Offset(i, j + varChanger).Value <> 0 Then
                        If j = 0 Then
                            Range("L16").Offset(i).Value = Range("Q16").Offset(i).Value
                        Else
                        
                            Range("Q16").Offset(i, j).Value = Range("Q16").Offset(i, j).Value + Range("Q16").Offset(i, j + varChanger).Value
                            Range("Q16").Offset(i, j + varChanger).Value = 0
                        
                        End If
                    
                    Else
                    End If
                Next j
            End If
        Else
            countToExit = countToExit + 1
            If countToExit > 10 Then Exit For
        End If
    Next i
'This is going to be for decrease
'---------------------------------------------------------------
'---------------------------------------------------------------
ElseIf IncDec = "Decrease" Then
    For i = 0 To 10000
       If Range("O16").Offset(i).Value = "Demand" Then 'If production requirements then continue
            countToExit = 0
            If Range("Q16").Offset(i, numWeeks).Value = 0 Then 'If there are no production requirements skip, no need to move around a bunch of zeros
            Else
                For j = 0 To numWeeks - 2
                    If Range("Q16").Offset(i, j).Value <> 0 Then
                        If j = 0 Then
                            Range("Q16").Offset(i, j + 1).Value = Range("Q16").Offset(i).Value - Range("L16").Offset(i).Value
                            Range("Q16").Offset(i).Value = Range("L16").Offset(i).Value
                            Range("L16").Offset(i).Value = ""
                        Else
                            Range("Q16").Offset(i, j + 1).Value = Range("Q16").Offset(i, j).Value
                            Range("Q16").Offset(i, j).Value = 0
                        End If
                    Else
                    End If
                Next j
            End If
        Else
            countToExit = countToExit + 1
            If countToExit > 10 Then Exit For
        End If
    Next i
End If


Range("P7").Value = PFval
Application.ScreenUpdating = True
End Sub


Sub contactAdmin()

 Application.DisplayAlerts = False
    
    Debug.Print Now & " email vendor file begin"
'   Opens an email window with the vendor file attached
'==============================================================================
    Dim OutMail As Object, signature As String

    On Error Resume Next
    'Get handle to Outlook if already open
    Set OutApp = GetObject(, "Outlook.Application")

    'Create new Outlook object if not open
    If Err.Number = 429 Then
        Set OutApp = CreateObject("Outlook.application")
    End If
    
    Set OutMail = OutApp.CreateItem(0)
    
    With OutMail
        .display
    End With
    
    signature = OutMail.htmlbody
    
    With OutMail
        .To = "Sean.Miller2@kraftheinz.com"
        .CC = ""
        .BCC = ""
        .Subject = "MRP Toolkit Enhancement/Error"
        .htmlbody = "<BODY style=font-side:11pt;font-family:Calibri>" & "<p>" & signature
    End With

    Set OutMail = Nothing
    
    Application.DisplayAlerts = True

End Sub


Sub navigateToToolDirectory()

If Len(Dir("C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool", vbDirectory)) = 0 Then
        MkDir "C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool"
Else
End If

Shell "explorer.exe" & " " & "C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool", vbNormalFocus


End Sub

Sub lititit()
Application.ScreenUpdating = False

Dim i As Integer, j As Integer, k As Integer, varChanger As Integer, numWeeks As Integer, PFval As Integer
Dim IncDec As String, oldPF As Integer, countToExit As Integer

MsgBox "even going here?"
    numWeeks = Range("P8").Value
    
    If Range("P7").Value = "" Then 'This is the first time through
        Range("P7").Value = 0
    Else
    End If
        
        oldPF = Range("P7").Value
            
    If Range("C7").Value = "None" Or Range("C7").Value = "" Then
        PFval = 0
    ElseIf Range("C7").Value = "1 Week" Then
        PFval = 1
    ElseIf Range("C7").Value = "2 Weeks" Then
        PFval = 2
    ElseIf Range("C7").Value = "3 Weeks" Then
        PFval = 3
    ElseIf Range("C7").Value = "4 Weeks" Then
        PFval = 4
    Else
        PFval = 0
    End If
     

If PFval = oldPF Then Exit Sub 'Do nothing, user didn't change the pull forward


varChanger = PFval - oldPF

If varChanger < 0 Then
    IncDec = "Decrease"
Else
    IncDec = "Increase"
End If

countToExit = 0
'This is going to be for increase
'---------------------------------------------------------------
'---------------------------------------------------------------
If IncDec = "Increase" Then
    For i = 0 To 10000
       If Range("O16").Offset(i).Value = "Demand" Then 'If production requirements then continue
            countToExit = 0
            If Range("Q16").Offset(i, numWeeks).Value = 0 Then 'If there are no production requirements skip, no need to move around a bunch of zeros
            Else
                For j = 0 To numWeeks - 2
                    If Range("Q16").Offset(i, j + varChanger).Value <> 0 Then
                        If j = 0 Then
                            Range("L16").Offset(i).Value = Range("Q16").Offset(i).Value
                        Else
                        
                            Range("Q16").Offset(i, j).Value = Range("Q16").Offset(i, j).Value + Range("Q16").Offset(i, j + varChanger).Value
                            Range("Q16").Offset(i, j + varChanger).Value = 0
                        
                        End If
                    
                    Else
                    End If
                Next j
            End If
        Else
            countToExit = countToExit + 1
            If countToExit > 10 Then Exit For
        End If
    Next i
'This is going to be for decrease
'---------------------------------------------------------------
'---------------------------------------------------------------
ElseIf IncDec = "Decrease" Then
    For i = 0 To 10000
       If Range("O16").Offset(i).Value = "Demand" Then 'If production requirements then continue
            countToExit = 0
            If Range("Q16").Offset(i, numWeeks).Value = 0 Then 'If there are no production requirements skip, no need to move around a bunch of zeros
            Else
                For j = 0 To numWeeks - 2
                    If Range("Q16").Offset(i, j).Value <> 0 Then
                        If j = 0 Then
                            Range("Q16").Offset(i, j + 1).Value = Range("Q16").Offset(i).Value - Range("L16").Offset(i).Value
                            Range("Q16").Offset(i).Value = Range("L16").Offset(i).Value
                            Range("L16").Offset(i).Value = ""
                        Else
                            Range("Q16").Offset(i, j + 1).Value = Range("Q16").Offset(i, j).Value
                            Range("Q16").Offset(i, j).Value = 0
                        End If
                    Else
                    End If
                Next j
            End If
        Else
            countToExit = countToExit + 1
            If countToExit > 10 Then Exit For
        End If
    Next i
End If

Range("P7").Value = PFval

Application.ScreenUpdating = True

End Sub


Attribute VB_Name = "Module3"
Attribute VB_Name = "OpenAndVet"
Attribute VB_Base = "0{5667DB12-81F4-47FE-B26A-4DF37675C3C3}{46BFC47D-1B02-4C42-BB29-0C73411DC710}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Function CheckFileCompatibility() As FileCompatability
    If DemandFileType >= [_First_Demand_File] _
        And DemandFileType <= [_Last_Demand_File] Then
        If SupplyFileType = DemandFileType - DEMAND_MINUS_SUPPLY_MATCH Then
            'Is a match
            CheckFileCompatibility = Match_All_Good
        Else
            'Not a match
            CheckFileCompatibility = File_Aggregation_Not_Same
        End If
    Else
        'Not a demand file
        CheckFileCompatibility = Demand_File_Not_Demand
    End If
    
    'check to see if the supply file is a supply file
    If SupplyFileType >= [_First_Supply_File] _
        And SupplyFileType <= [_Last_Supply_File] Then
        'Everything is good, use above results
    Else
        'Not a supply file
        CheckFileCompatibility = Supply_File_Not_Supply
    End If
End Function

Private Function GetFileOrFolderPath(ByVal PickerType As MsoFileDialogType, _
                                     Optional ByVal InitialPath As String _
                                     ) As String
'returns the name of a file or folder based on the selections
    Dim dialogBox As FileDialog
    Dim startPath As String
    
    Set dialogBox = Application.FileDialog(PickerType)
    
    'Set the path for the file dialog to start in.
    'If one is not provided, use the current path of the workbook
    If Len(InitialPath) = 0 Then
        startPath = ActiveWorkbook.Path
    Else
        startPath = InitialPath
    End If
    
    'Show the dialog box
    With dialogBox
        .Title = "Select the folder containing all of the Consumption files."
        .AllowMultiSelect = False
        .InitialFileName = startPath
        .Show
    End With
    
    'return the results of the file dialog
    If dialogBox.SelectedItems.count = 1 Then
        GetFileOrFolderPath = dialogBox.SelectedItems(1)
    Else
        GetFileOrFolderPath = ""
    End If
    
    'destruct the dialog
    Set dialogBox = Nothing
End Function

Private Sub cmdCancel_Click()
'Close the form and go back to the main menu
    Unload Me
    'Splash.show
End Sub

'Private Sub cmdCancel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    'On mouse over color blue.
'    If Me.cmdCancel.BackColor <> RGB(152, 245, 255) Then _
'        Me.cmdCancel.BackColor = RGB(152, 245, 255)
'End Sub

Private Sub cmdDemand_Click()
'opens the file dialog box to select either a file or a folder
    Call HideVetDetails
    Select Case SelectedTask
        Case Batch
            Me.txtDemand.Caption = GetFileOrFolderPath(msoFileDialogFilePicker) ', "C:\Users\zbz0306\Documents\_20 WIP\Material PSI\Sample Data")
        Case Else
            Me.txtDemand.Caption = GetFileOrFolderPath(msoFileDialogFilePicker) ', "C:\Users\zbz0306\Documents\_20 WIP\Material PSI\Sample Data")
    End Select
End Sub

'Private Sub cmdDemand_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    'On mouse over color blue.
'    If Me.cmdDemand.BackColor <> RGB(152, 245, 255) Then _
'        Me.cmdDemand.BackColor = RGB(152, 245, 255)
'End Sub


Private Sub cmdRun_Click()
'Test for now...
    Dim t As Double
    Dim FType As String
    Dim batchCounter As Long
    
    Dim objDic As Object
    Dim var As Variant
    Dim fd As FileDialog
    
    t = Timer()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    'set program workbook name to this file
    PROGRAM_WORKBOOK_NAME = ActiveWorkbook.Name
    Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME).Visible = True
    Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("CompareWeeks").Visible = True
    
    Me.Hide
    
    Select Case SelectedTask
        Case Batch
            Application.ScreenUpdating = False
            'show bin and sumResult sheet
            Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("BIN").Visible = True
        
            FType = Me.lblFileTypeD.Caption
                        
            'grab unique vendor name from demand file
            Set objDic = CreateObject("Scripting.Dictionary")
            With Workbooks(CurrentDemandFileName).ActiveSheet
                .AutoFilterMode = False
                var = .Range("C2:C" & .Cells(.Rows.count, "C").End(xlUp).Row)
            End With
            
            For batchCounter = LBound(var) To UBound(var)
                If Not IsEmpty(var(batchCounter, 1)) Then
                    objDic.Item(var(batchCounter, 1)) = 0
                End If
            Next batchCounter
            var = objDic.Keys
            objDic.RemoveAll
            
            'by default exit code=false
            ExitCode = False
            Me.Hide
            ExportVendorNEmailOption.Show
            
            If ExitCode Then
                Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("BIN").Visible = False
                GoTo AllProcessCanceled
            End If
            
            If IsEmailed Then
                MsgBox UBound(var) + 1 & " emails will be created." _
                        & vbNewLine & "Please wait until tool finish running." _
                        & vbNewLine & "You will be informed when it has finished."
            Else
                MsgBox "Report extraction begins. Please wait until tool finish running." _
                        & vbNewLine & "You will be informed when it has finished."
            End If
            
            For batchCounter = 0 To UBound(var)
                Application.ScreenUpdating = False
                Workbooks(CurrentDemandFileName).ActiveSheet.UsedRange.AutoFilter Field:=3, Criteria1:=var(batchCounter)
           
                'show bin and sumResult sheet
                Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("BIN").Visible = True
                
                'show report sheet
                Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report").Visible = True
                'clear row usage from RAM
                Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report").UsedRange
                
                Call splitVendorFile.PastePerVendor(Application.Workbooks(CurrentDemandFileName).ActiveSheet, _
                            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Bin"), _
                            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"), _
                            FType)
                            
                Call ReportGeneration.InsertLines( _
                            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
                            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(TEMPLATE_WORKSHEET_NAME), _
                            Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME).UsedRange.Rows.count, _
                            ReportNumberOfColumns, SingleFile)
                
                'clean bin then hide it
                Call CleanSumAndBin(Worksheets("BIN"))
                
                'hide hompage and compare weeks sheet
                Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("MRP Toolkit").Visible = False
                Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("CompareWeeks").Visible = False
                
                'MsgBox VendorName
                If IsEmailed Then
                    Call ReportSupport.EmailVendorFile(ExportVendorOptions.ExportVendorFile(DFCchk, WFCchk, SingleFile))
                Else
                    Call ExportVendorOptions.ExportVendorFile(DFCchk, WFCchk, SingleFile)
                End If
                
                Call ReportGeneration.CleanGeneratorFile(Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"))
                        
            Next batchCounter
            
            'these line is to clear BIN tab
            Call CleanSumAndBin(Worksheets("BIN"))
            
            'close data file
            Workbooks(CurrentDemandFileName).Close 0
            Workbooks(PROGRAM_WORKBOOK_NAME).Activate
            
            'set outlook object to nothing
            Set OutApp = Nothing
            
            MsgBox " Multiple Vendor Reports have been completed." _
                    & vbNewLine & UBound(var) + 1 & " master files have been created." _
                    & vbNewLine & "Files are saved in " & ActiveWorkbook.Path & "\vendor Reports"
            
            
AllProcessCanceled:
            Application.ScreenUpdating = True
            Unload Me
            'Splash.show
            
        Case SingleFile
            Call ReportGeneration.ImportData( _
            Application.Workbooks(CurrentDemandFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            DemandNumberOfColumns, _
            DemandFileType)
        
            Call InsertLines( _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(TEMPLATE_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            ReportNumberOfColumns, SingleFile)
            
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            
            Debug.Print Timer() - t
            Unload Me
            ExportVendorOptions.Show
        
        Case DFCReport
            'import demand data
            Call ReportGeneration.ImportData( _
            Application.Workbooks(CurrentDemandFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            DemandNumberOfColumns, _
            DemandFileType)
            
            'show bin and sumResult sheet
            Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("BIN").Visible = True
            Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("SumResult").Visible = True
            
            'import supply data
            Call CombineFile.importSupplyToBin( _
            Application.Workbooks(CurrentSupplyFileName).ActiveSheet, _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Bin"), _
            SupplyNumberOfRows, _
            SupplyNumberOfColumns, _
            SupplyFileType)
            
            'check is date is within the same range
            If Not isSameWeeks Then
                MsgBox "Date is not within same range."
                Call ReportGeneration.CleanGeneratorFile(Worksheets("Report"))
                Call CombineFile.CleanSumAndBin(Worksheets("BIN"))
                Call CombineFile.CleanSumAndBin(Worksheets("SumResult"))
                GoTo exitSelect
            End If
            
            Call ReportGeneration.InsertLines( _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME), _
            Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(TEMPLATE_WORKSHEET_NAME), _
            DemandNumberOfRows, _
            ReportNumberOfColumns, DFCReport)
            
            Call createSummarySupply( _
                Worksheets("Bin"), Worksheets("SumResult"), _
                Worksheets("Bin").UsedRange.Columns.count, _
                SupplyNumberOfRows)
    
            Call insertSumResultMatch(Worksheets("SumResult"), _
                        Worksheets("Report"), _
                        Worksheets("SumResult").UsedRange.Columns.count)
            
            'these line is to clear BIN and Sum Result tab
            Call CleanSumAndBin(Worksheets("BIN"))
            Call CleanSumAndBin(Worksheets("SumResult"))
                    
            'DFC recalculated as separate process
            Call recalculateDFC.RecalculateAllDFC
            MsgBox "Supply data for multiple plants has been aggregated" _
                    & vbNewLine & "and DFC has been auto calculated."
            
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            
            Debug.Print Timer() - t
            
            Unload Me
            ExportVendorOptions.Show
            
    End Select
exitSelect:
    Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(REPORT_WORKSHEET_NAME).Visible = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
End Sub

'Private Sub cmdRun_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    'On mouse over color blue.
'    If Me.cmdRun.BackColor <> RGB(152, 245, 255) Then _
'        Me.cmdRun.BackColor = RGB(152, 245, 255)
'End Sub

Private Sub cmdSupply_Click()
'Opens the dialog box to pick the supply file
    Call HideVetDetails
    Me.txtSupply.Caption = GetFileOrFolderPath(msoFileDialogFilePicker) ', "C:\Users\zbz0306\Documents\_20 WIP\Material PSI\Sample Data")
End Sub

'Private Sub cmdSupply_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    'On mouse over color blue.
'    If Me.cmdSupply.BackColor <> RGB(152, 245, 255) Then _
'        Me.cmdSupply.BackColor = RGB(152, 245, 255)
'End Sub

Private Sub cmdVet_Click()
'Calls the vetting procedure

'------------------------------------------------------------------------------
'   Demand File
'------------------------------------------------------------------------------
    'set display alert off
    'Application.DisplayAlerts = False
    
    'set program workbook name to this file
    PROGRAM_WORKBOOK_NAME = ActiveWorkbook.Name
    
    'Checks to make sure that a file has been selected
    If SelectedTask <> DFCReport Then
        If Len(Me.txtDemand.Caption) = 0 Then
            MsgBox ("Please select a Demand file before trying to verify it.")
            Exit Sub
        End If
    Else
        If Len(Me.txtDemand.Caption) = 0 Or Len(Me.txtSupply.Caption) = 1 Then
            MsgBox ("Please select both a demand and a supply file before trying to verify them.")
            Exit Sub
        End If
    End If
    
    'Sets the file names of the demand and supply files
    On Error GoTo error_line
    
    CurrentDemandFilePath = Me.txtDemand.Caption
    
    Application.Workbooks.Open _
                FileName:=CurrentDemandFilePath, _
                ReadOnly:=True
    'Record the name of the demand file
    CurrentDemandFileName = ActiveWorkbook.Name
    
startHereAfterError:

    'Determine the type of file the demand file is
    Call CheckFile(CurrentDemandFileName, DemandFileType, _
                   DemandNumberOfWeeks, DemandNumberOfRows)
    'MsgBox DemandFileType
    Me.FrameDemand.Visible = True
    
    'Make sure that the demand file is valid
    If DemandFileType > [_Unknown_Files_First] And _
       DemandFileType < [_Unknown_Files_Last] Then
        'Data is not valid
        Me.imgDemandValid.Visible = True
        Exit Sub
    End If
    
    Select Case SelectedTask
    Case Batch
        Me.cmdRun.Enabled = True
        Me.cmdRun.SetFocus
        'Populate the validation info boxes
        Me.lblFileNameD.Caption = CurrentDemandFileName
        Me.lblFileTypeD.Caption = FileTypeDesc(DemandFileType)
        Me.lblWeeksD.Caption = DemandNumberOfWeeks
        Me.lblRowsD.Caption = DemandNumberOfRows
        Application.Workbooks(PROGRAM_WORKBOOK_NAME).Activate
        'MsgBox "Validation complete."
        
    Case SingleFile
        Me.cmdRun.Enabled = True
        Me.cmdRun.SetFocus
        'Populate the validation info boxes
        Me.lblFileNameD.Caption = CurrentDemandFileName
        Me.lblFileTypeD.Caption = FileTypeDesc(DemandFileType)
        Me.lblWeeksD.Caption = DemandNumberOfWeeks
        Me.lblRowsD.Caption = DemandNumberOfRows
        Application.Workbooks(PROGRAM_WORKBOOK_NAME).Activate
        'MsgBox "Validation complete."
    
    Case DFCReport
        'Populate the validation info boxes
        Me.lblFileNameD.Caption = CurrentDemandFileName
        Me.lblFileTypeD.Caption = FileTypeDesc(DemandFileType)
        Me.lblWeeksD.Caption = DemandNumberOfWeeks
        Me.lblRowsD.Caption = DemandNumberOfRows
        
        Application.Workbooks(PROGRAM_WORKBOOK_NAME).Activate
            
'------------------------------------------------------------------------------
'   Supply File
'------------------------------------------------------------------------------
    
        CurrentSupplyFilePath = Me.txtSupply.Caption
            Application.Workbooks.Open _
                FileName:=CurrentSupplyFilePath, _
                ReadOnly:=True
            
        'Record the name of the demand file
        CurrentSupplyFileName = ActiveWorkbook.Name
          
        'Determine the type of file the demand file is
        Call CheckFile(CurrentSupplyFileName, SupplyFileType, _
                       SupplyNumberOfWeeks, SupplyNumberOfRows)
        
        Me.FrameSupply.Visible = True
        
        'Make sure that the Supply file is valid
        If SupplyFileType > [_Unknown_Files_First] And _
           SupplyFileType < [_Unknown_Files_Last] Then
            'Data is not valid
            Me.imgSupplyValid.Visible = True
            Exit Sub
        End If
        
        'Populate the validation info boxes
        Me.lblFileNameS.Caption = CurrentSupplyFileName
        Me.lblFileTypeS.Caption = FileTypeDesc(SupplyFileType)
        Me.lblWeeksS.Caption = SupplyNumberOfWeeks
        Me.lblRowsS.Caption = SupplyNumberOfRows
        
        Application.Workbooks(PROGRAM_WORKBOOK_NAME).Activate
        
    '~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    'update the list of invalid files
        'Check that the demand file is a demand file and
        '   that the supply file is a supply file
    '~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        
        Select Case CheckFileCompatibility
        Case Demand_File_Not_Demand
            Me.imgNotDemand.Visible = True
        Case Supply_File_Not_Supply
            Me.imgNotSupply.Visible = True
            MsgBox "Supply_File_Not_Supply"
        Case File_Aggregation_Not_Same
            MsgBox "File_Aggregation_Not_Same"
        Case Match_All_Good
            'check is number of weeks are the same
            If DemandNumberOfWeeks <> SupplyNumberOfWeeks Then
                MsgBox "Number of weeks are not the same."
                Exit Sub
            End If
            'MsgBox "Validation complete."
            Me.cmdRun.Enabled = True
            Me.cmdRun.SetFocus
        End Select
    End Select
    'set display alert off
    'Application.DisplayAlerts = True
    Exit Sub
    
error_line:
        
        CurrentDemandFileName = Right(CurrentDemandFilePath, Len(CurrentDemandFilePath) - _
                        InStrRev(CurrentDemandFilePath, "\"))
        CurrentSupplyFileName = Right(CurrentSupplyFilePath, Len(CurrentSupplyFilePath) - _
                        InStrRev(CurrentSupplyFilePath, "\"))
        'MsgBox CurrentDemandFileName
        Windows(PROGRAM_WORKBOOK_NAME).Activate
        Resume Next
        'Sheets("WORKING").Select
        'MsgBox "There's a problem with the file. Is it open already? Something else?"
        'frmOpen.Show
        'End
End Sub

'Private Sub cmdVet_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    'On mouse over color blue.
'    If Me.cmdVet.BackColor <> RGB(152, 245, 255) Then _
'        Me.cmdVet.BackColor = RGB(152, 245, 255)
'End Sub



Private Sub UserForm_Initialize()
Application.ScreenUpdating = False
'Sets colors, sets visibility & text based on type of report to create
    Dim ctrl As Control
    Const HIDE_SUPPLY_TOP_ADJUSTMENT As Long = -48
    'set public variable to null
    VendorName = vbNullString
    VendorNumber = vbNullString
    
'Set colors
    
    'Set all of the labels to light blue backgrounds
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "Label" Then
            If Left(ctrl.Name, 3) <> "lbl" Then
                ctrl.BackColor = RGB(220, 230, 250)
            End If
        End If
    Next ctrl
    'Manually set 1 label color
    Me.lblValidFilesTitle.BackColor = RGB(220, 230, 250)
    
    'Set Border Colors
    Me.FrameFilePickers.BorderColor = RGB(30, 70, 120)
    Me.FrameDemand.BorderColor = RGB(30, 70, 120)
    Me.FrameSupply.BorderColor = RGB(30, 70, 120)
    Me.lblValidFiles.BorderColor = RGB(30, 70, 120)
    Me.lblValidFilesTitle.BorderColor = RGB(30, 70, 120)
    
    'Color all of the buttons
    Me.cmdDemand.BackColor = RGB(220, 230, 250)
    Me.cmdSupply.BackColor = RGB(220, 230, 250)
    Me.cmdCancel.BackColor = RGB(220, 230, 250)
    Me.cmdRun.BackColor = RGB(220, 230, 250)
    Me.cmdVet.BackColor = RGB(220, 230, 250)
        
'Set up form based on what type of report is to be created
'Put in the correct text (file/folder, & plural where needed)
'Set visibility of buttons as needed
'Adjust positions if neccesary
    Select Case SelectedTask
        Case Batch
            Me.lblDemandTitle.Caption = Me.lblDemandTitle.Caption & "File"
            Me.cmdDemand.Caption = "Select File"
            
            Me.cmdVet.Visible = True
            Me.cmdRun.Caption = "Create Report"
            Me.cmdRun.Enabled = False
            
            Me.FrameFilePickers.Height = 54
            Me.cmdCancel.Top = Me.cmdCancel.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.cmdRun.Top = Me.cmdRun.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.cmdVet.Top = Me.cmdVet.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.lblValidFiles.Top = Me.lblValidFiles.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.lblValidFilesTitle.Top = Me.lblValidFilesTitle.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.FrameDemand.Top = Me.FrameDemand.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.FrameSupply.Top = Me.FrameSupply.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.Logo.Top = Me.Logo.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.Height = Me.Height + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.Repaint
        
            'Me.lblDemandTitle.Caption = Me.lblDemandTitle.Caption & "Folder"
            'Me.cmdDemand.Caption = "Select Folder"
            'Me.cmdRun.Caption = Me.cmdRun.Caption & "s"
            
            'Me.FrameFilePickers.Height = 54
            'Me.cmdCancel.Top = Me.cmdCancel.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.cmdRun.Top = Me.cmdRun.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.cmdVet.Top = Me.cmdVet.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.lblValidFiles.Top = Me.lblValidFiles.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.lblValidFilesTitle.Top = Me.lblValidFilesTitle.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.FrameDemand.Top = Me.FrameDemand.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.FrameSupply.Top = Me.FrameSupply.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.Logo.Top = Me.Logo.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.Height = Me.Height + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.Repaint
        Case SingleFile
            Me.lblDemandTitle.Caption = Me.lblDemandTitle.Caption & "File"
            Me.cmdDemand.Caption = "Select File"
            
            Me.cmdVet.Visible = True
            Me.cmdRun.Caption = "Create Report"
            Me.cmdRun.Enabled = False
            
            Me.FrameFilePickers.Height = 54
            Me.cmdCancel.Top = Me.cmdCancel.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.cmdRun.Top = Me.cmdRun.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.cmdVet.Top = Me.cmdVet.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.lblValidFiles.Top = Me.lblValidFiles.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.lblValidFilesTitle.Top = Me.lblValidFilesTitle.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.FrameDemand.Top = Me.FrameDemand.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.FrameSupply.Top = Me.FrameSupply.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.Logo.Top = Me.Logo.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.Height = Me.Height + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.Repaint
        
        Case DFCReport
            Me.lblDemandTitle.Caption = Me.lblDemandTitle.Caption & "File"
            Me.cmdDemand.Caption = "Select File"
            
            Me.lblSupplyTitle.Visible = True
            Me.txtSupply.Visible = True
            
            Me.cmdVet.Visible = True
            Me.cmdRun.Caption = "Create Report"
            Me.cmdRun.Enabled = False
            Me.cmdSupply.Visible = True
            
        Case SplitVendor
            Me.lblDemandTitle.Caption = Me.lblDemandTitle.Caption & "File"
            Me.cmdDemand.Caption = "Select File"
            
            Me.cmdVet.Visible = True
            Me.cmdRun.Caption = "Split Input File"
            Me.cmdRun.Enabled = False
            
            Me.FrameFilePickers.Height = 54
            Me.cmdCancel.Top = Me.cmdCancel.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.cmdRun.Top = Me.cmdRun.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.cmdVet.Top = Me.cmdVet.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.lblValidFiles.Top = Me.lblValidFiles.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.lblValidFilesTitle.Top = Me.lblValidFilesTitle.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.FrameDemand.Top = Me.FrameDemand.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.FrameSupply.Top = Me.FrameSupply.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            'Me.Logo.Top = Me.Logo.Top + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.Height = Me.Height + HIDE_SUPPLY_TOP_ADJUSTMENT
            Me.Repaint
    End Select
Application.ScreenUpdating = True
End Sub

Private Sub HideVetDetails()
'hides / resets the vet detail frames
    Me.FrameDemand.Visible = False
    Me.imgDemandValid.Visible = False
    Me.imgNotDemand.Visible = False
    Me.FrameSupply.Visible = False
    Me.imgSupplyValid.Visible = False
    Me.imgNotSupply.Visible = False
End Sub

'Public Sub CheckFile(ByVal targetFileName As String, _
'                      ByRef DataFileType As FileType, _
'                      ByRef DataNumberOfWeeks As Long, _
'                      ByRef DataNumberOfRows As Long)
''Checks the data file (which is already open) to determine what kind of file
''   it is. If it cannot identify it, then it marks it as unknown.
'
'    Windows(targetFileName).Activate
'
'    Dim colHeadings As Range
'    Dim Header As Range
'
'    Set colHeadings = ActiveSheet.Range("A1:J1")
'
'    'this select loop code below will seek for material column position in source file _
'    once it found, detect the data rows
'    '   This is to account for all file types
'    For Each Header In colHeadings.Cells
'        If Header.Value = "Material No" Then
'            'MsgBox "material found in col : " & Header.Column
'            DataNumberOfRows = Application.WorksheetFunction.CountA(ActiveSheet.Columns(Header.Column)) - 1
'            Exit For
'        End If
'    Next Header
'
'
'    DemandNumberOfColumns = Application.WorksheetFunction.CountA(Range("1:1"))
''------------------------------------------------------------------------------
''   Check for Vendor files
''------------------------------------------------------------------------------
'    If Left((Range("A1").Value), 6) = "Vendor" Then
'        If WorksheetFunction.Proper(Right((Range("J1").Value), 6)) = "Supply" Then
'            DataFileType = Vendor_Supply
'            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("L1:CZ1")) - 1
'            Exit Sub
'
'        ElseIf WorksheetFunction.Proper(Right((Range("J1").Value), 6)) = "Demand" Then
'            DataFileType = Vendor_Demand
'            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("L1:CZ1")) - 1
'            Exit Sub
'        Else
'            DataFileType = Unknown_Vendor_File
'            DataNumberOfWeeks = 0
'            Exit Sub
'
'        End If
'    End If
'
''------------------------------------------------------------------------------
''   Check for Material files
''------------------------------------------------------------------------------
'    If Left((Range("A1").Value), 5) = "Plant" Then
'        If WorksheetFunction.Proper(Right((Range("H1").Value), 6)) = "Supply" Then
'            DataFileType = Material_Supply
'            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("J1:CZ1")) - 1
'            Exit Sub
'
'        ElseIf WorksheetFunction.Proper(Right((Range("H1").Value), 6)) = "Demand" Then
'            DataFileType = Material_Production
'            DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("J1:CZ1")) - 1
'            Exit Sub
'
'        Else
'            DataFileType = Unknown_Material_File
'            DataNumberOfWeeks = 0
'            Exit Sub
'
'        End If
'    End If
'
''------------------------------------------------------------------------------
''   Check for Planned Supply or Demand
''------------------------------------------------------------------------------
'    If Left((Range("A1").Value), 3) = "MRP" And Left((Range("B1").Value), 5) = "Vendo" Then
'
'    '   Standard cost
'    '------------------------------------------------------
'        If Left((Range("H1").Value), 8) = "Standard" Or Left((Range("H1").Value), 5) = "STPRS" Then
'            If WorksheetFunction.Proper(Right((Range("L1").Value), 6)) = "Demand" Then
'                DataFileType = Planned_Demand
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("N1:CZ1")) - 1
'                Exit Sub
'
'            Else
'                DataFileType = Planned_Supply
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("M1:CZ1")) - 1
'                Exit Sub
'
'            End If
'
'    '   NO Standard cost
'    '------------------------------------------------------
'        Else
'            If WorksheetFunction.Proper(Right((Range("K1").Value), 6)) = "Demand" Then
'                DataFileType = Planned_Demand__NO_STANDARD_COST
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("M1:CZ1")) - 1
'                Exit Sub
'
'            Else
'                DataFileType = Planned_Supply__NO_STANDARD_COST
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("M1:CZ1")) - 1
'                Exit Sub
'
'            End If
'        End If
'    End If
'
''------------------------------------------------------------------------------
''   Check for Material
''------------------------------------------------------------------------------
'    If Left((Range("A1").Value), 3) = "MRP" And Left((Range("B1").Value), 5) = "Plant" Then
'
'    '   Standard cost
'    '------------------------------------------------------
'        If Left((Range("F1").Value), 5) = "STPRS" Or Left((Range("F1").Value), 5) = "Stand" Then
'            If Right((Range("I1").Value), 5) = "Stock" Then
'                DataFileType = Material_Planned_Demand
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("L1:CZ1")) - 1
'                Exit Sub
'
'            Else
'                DataFileType = Material_Planned_Supply
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("K1:CZ1")) - 1
'                Exit Sub
'
'            End If
'
'    '   NO Standard cost
'    '------------------------------------------------------
'        Else
'            If WorksheetFunction.Proper(Right((Range("I1").Value), 6)) = "Demand" Then
'                DataFileType = Material_Planned_Demand__NO_STANDARD_COST
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("K1:CZ1")) - 1
'                Exit Sub
'
'            Else
'                DataFileType = Material_Planned_Supply__NO_STANDARD_COST
'                DataNumberOfWeeks = Application.WorksheetFunction.CountA(Range("K1:CZ1")) - 1
'                Exit Sub
'
'            End If
'        End If
'    End If
'
'    '==============
'    ' Unknown file type
'    '==============
'    DataFileType = Unknown_file
'    DataNumberOfWeeks = 0
'End Sub

'Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    'on button not mouse over color gone grey
'    If Me.cmdDemand.BackColor <> RGB(220, 230, 250) Then _
'        Me.cmdDemand.BackColor = RGB(220, 230, 250)
'
'    If Me.cmdCancel.BackColor <> RGB(220, 230, 250) Then _
'        Me.cmdCancel.BackColor = RGB(220, 230, 250)
        
'    If Me.cmdRun.BackColor <> RGB(220, 230, 250) Then _
'        Me.cmdRun.BackColor = RGB(220, 230, 250)
        
'    If Me.cmdSupply.BackColor <> RGB(220, 230, 250) Then _
'        Me.cmdSupply.BackColor = RGB(220, 230, 250)
    
'    If Me.cmdVet.BackColor <> RGB(220, 230, 250) Then _
'        Me.cmdVet.BackColor = RGB(220, 230, 250)

'End Sub
Attribute VB_Name = "PublicVariables"
Option Explicit

'==============================================================================
'   Enumerations
'==============================================================================
    Public Enum Tasks
        Batch = 1
        SingleFile = 2
        DFCReport = 3
        SplitVendor = 4
    End Enum
    
    Public Enum FileCompatability
        Demand_File_Not_Demand = 1
        Supply_File_Not_Supply = 2
        File_Aggregation_Not_Same = 11
        Match_All_Good = 101
    End Enum
    
    Public Enum DataAttribute
        Standard_Cost = 1
        DFC = 2
        WFC = 3
        mrp = 4
        Safety_Stock = 5
    End Enum
    
    Public Enum FileType
    'Supply Files
    '------------------------------------------------------------
        [_First_Supply_File] = 1
        Vendor_Supply = 1                               ' VEN_SUP
        Material_Supply = 2                             ' MAT_SUP
        Planned_Supply = 3                              ' PLA_SUP
        Planned_Supply__NO_STANDARD_COST = 4            ' PLA_SUN
        Material_Planned_Supply = 5                     ' PLM_SUP
        Material_Planned_Supply__NO_STANDARD_COST = 6   ' PLM_SUN
        [_Last_Supply_File] = 6
        
    'Demand Files
    '------------------------------------------------------------
        [_First_Demand_File] = 21
        Vendor_Demand = 21                              ' VEN_DEM
        Material_Production = 22                        ' MAT_PRO
        Planned_Demand = 23                             ' PLA_DEM
        Planned_Demand__NO_STANDARD_COST = 24           ' PLA_DEN
        Material_Planned_Demand = 25                    ' PLM_DEM
        Material_Planned_Demand__NO_STANDARD_COST = 26  ' PLM_DEN
        [_Last_Demand_File] = 26
         
    'Unknown Files
    '------------------------------------------------------------
        [_Unknown_Files_First] = 101
        Unknown_Vendor_File = 101
        Unknown_Material_File = 102
        Unknown_file = 103
        [_Unknown_Files_Last] = 199
    End Enum
    
'==============================================================================
'   Variables
'==============================================================================
    Public SelectedTask As Tasks
    Public CurrentDemandFileName As String
    Public CurrentDemandFilePath As String
    Public CurrentSupplyFileName As String
    Public CurrentSupplyFilePath As String
    
    Public DemandFileType As FileType
    Public SupplyFileType As FileType
    
    Public DemandNumberOfRows As Long
    Public DemandNumberOfColumns As Long
    Public DemandNumberOfWeeks As Long
    
    Public SupplyNumberOfRows As Long
    Public SupplyNumberOfColumns As Long
    Public SupplyNumberOfWeeks As Long
    
    Public FileToImport() As String
    
    Public VendorName As String
    Public VendorNumber As String
    Public justVendorFileName As String
    
    Public ReportNumberOfColumns As Long
    
    Public ReportPath As String
    Public reportName As String
    
    Public ImportFileName As String
    Public ImportFilePath As String
    
    Public MasterFileName As String
    Public justMasterFileName As String
    
    Public DFCchk As Boolean
    Public WFCchk As Boolean
    Public IsEmailed As Boolean
    
    Public ExitCode As Boolean
    Public OutApp As Object
    Public OpenOutlook As Boolean
'==============================================================================
'   Constants
'==============================================================================
    Public PROGRAM_WORKBOOK_NAME As String '= "IBS_PSI.xlsm"
    Public Const PATH_ARRAY_ENTRY As Long = 1
    Public Const NAME_ARRAY_ENTRY As Long = 2
    Public Const DEMAND_MINUS_SUPPLY_MATCH As Long = 20
    
    '--------------------------------------------------------------------------
    '   Password that locks the vendor file
    '--------------------------------------------------------------------------
    
    Public Const VENDOR_PASSWORD As String = "KHCmatmgmt"
        
    '--------------------------------------------------------------------------
    '   Worksheet GUI Constants
    '--------------------------------------------------------------------------
    '
    Public Const FILE_NUMBER_RANGE As String = "5:6"
    Public Const PROCESS_STEPS_RANGE As String = "7:11"
    Public Const DATA_WORKSHEET_NAME As String = "Data"
    Public Const REPORT_WORKSHEET_NAME As String = "Report"
    Public Const TEMPLATE_WORKSHEET_NAME As String = "Template"
    Public Const FIRST_FCST_COL As Long = 10
    Public Const HEADER_ROWS_ADJUST As Long = 15
    Public Const TOTAL_ROWS As String = "9:14"
    Public Const LOCKED_INDICATOR_RANGE As String = "B1"
    Public Const VENDOR_NAME_CELL As String = "A1"
    Public GENERATOR_WORKBOOK_NAME As String '= PROGRAM_WORKBOOK_NAME
    
    '--------------------------------------------------------------------------
    '   Attribute Columns
    '--------------------------------------------------------------------------
    Public Const MRP_COLUMN As Long = 1
    Public Const MAT_NUM_COLUMN As Long = 2
    Public Const MAT_DESC_COLUMN As Long = 3
    Public Const FU_MAT_NUM_COLUMN As Long = 4
    Public Const VENDOR_MAT_NUM_COLUMN As Long = 5
    Public Const SUPPLIER_COLUMN As Long = 6
    Public Const MM_LOOKUPS_COLUMN As Long = 7
    Public Const PLNT_NUM_COLUMN As Long = 8
    Public Const PLNT_DESC_COLUMN As Long = 9
    Public Const UoM_COLUMN As Long = 10
    Public Const SS_COLUMN As Long = 11
    Public Const STD_COST_COLUMN As Long = 12
    Public Const RUN_OUT_COLUMN As Long = 13
    Public Const TREND_LINE_COLUMN As Long = 14
    Public Const ATTRIBUTE_COLUMN As Long = 15
    Public Const STOCK_COLUMN As Long = 16
    Public Const FIRST_REPORT_FCST_COLUMN As Long = 17
    
'==============================================================================
'   Function to return the description of the file type
'==============================================================================
Public Function FileTypeDesc(ByVal FType As FileType) As String
    Select Case FType
        Case Vendor_Supply
            FileTypeDesc = "Vendor Supply"
        Case Vendor_Demand
            FileTypeDesc = "Vendor Demand"
        Case Material_Supply
            FileTypeDesc = "Material Supply"
        Case Material_Production
            FileTypeDesc = "Material Production"
        Case Planned_Supply
            FileTypeDesc = "Planned Supply with Standard Cost"
        Case Planned_Supply__NO_STANDARD_COST
            FileTypeDesc = "Planned Supply WITHOUT Standard Cost"
        Case Planned_Demand
            FileTypeDesc = "Planned Demand with Standard Cost"
        Case Planned_Demand__NO_STANDARD_COST
            FileTypeDesc = "Planned Demand WITHOUT Standard Cost"
        Case Material_Planned_Supply
            FileTypeDesc = "Material Planned Supply with Standard Cost"
        Case Material_Planned_Supply__NO_STANDARD_COST
            FileTypeDesc = "Material Planned Supply WITHOUT Standard Cost"
        Case Material_Planned_Demand
            FileTypeDesc = "Material Planned Demand with Standard Cost"
        Case Material_Planned_Demand__NO_STANDARD_COST
            FileTypeDesc = "Material Planned Demand WITHOUT Standard Cost"
        Case Else
            FileTypeDesc = "Unknown File"
    End Select
End Function

Sub ifodnsdiof()

End Sub


Attribute VB_Name = "RP_LRP"
Attribute VB_Base = "0{1DC9DB19-863A-4E6F-9ABA-93516E4E0AF2}{DE7D15E9-1800-4F61-82AE-52A23EA1BEB4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdAddAll_Click()

With lstIncludedPlants

    For i = 0 To lstPlants.ListCount - 1
        .AddItem lstPlants.List(i)
    Next i

End With

End Sub

Private Sub cmdBB1Next_Click()
Application.ScreenUpdating = False
Dim startingPoint As Integer, i As Integer
Dim searchFor As String, searchIn As String
Dim countWhere As Integer
Dim revertOriginal As Integer

searchFor = TextBox1.Value

With lstPlants
    startingPoint = .ListIndex + 1
    For i = startingPoint To .ListCount - 1
        searchIn = .List(i)
        countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
    
        If countWhere > 0 Then
            .Selected(i) = True
            Exit For
        Else
        End If
    Next i
End With

If countWhere = 0 Then
    With lstPlants
        For i = 0 To .ListCount - 1
            searchIn = .List(i)
            countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
        
            If countWhere > 0 Then
                .Selected(i) = True
                Exit For
            Else
            End If
        Next i
    End With
    
    If countWhere = 0 Then
        lstPlants.Selected(0) = True
        lstPlants.Selected(0) = False
    Else
    End If
Else
End If


Application.ScreenUpdating = True
End Sub

Private Sub cmdCancel_Click()
Unload Me
End
End Sub

Private Sub cmdInclude_Click()
Dim i As Integer

On Error Resume Next

With lstIncludedPlants

    .AddItem lstPlants.Value
'    For i = 0 To .ListCount - 1
'        If .Selected(i) = True Then
'        .AddItem .Selected(i)
'        .Selected(.ListCount - 1) = True
'        End If
'    Next i
End With

End Sub

Private Sub cmdRemove_Click()
Dim i As Integer
'Need to use the selected element from the list to find the range on BB1
'Then use the originalColor array to revert back to original color

With lstIncludedPlants
    For i = 0 To .ListCount - 1
        If .Selected(i) = True Then
        .RemoveItem (.ListIndex)
        Else
        End If
    Next i
End With
End Sub



Private Sub cmdRemoveAll_Click()
lstIncludedPlants.Clear
End Sub

Private Sub CommandButton1_Click()
Application.ScreenUpdating = False
Dim startingPoint As Integer, i As Integer
Dim searchFor As String, searchIn As String
Dim countWhere As Integer
Dim revertOriginal As Integer

searchFor = TextBox2.Value

With lstIncludedPlants
    startingPoint = .ListIndex + 1
    For i = startingPoint To .ListCount - 1
        searchIn = .List(i)
        countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
    
        If countWhere > 0 Then
            .Selected(i) = True
            Exit For
        Else
        End If
    Next i
End With

If countWhere = 0 Then
    With lstIncludedPlants
        For i = 0 To .ListCount - 1
            searchIn = .List(i)
            countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
        
            If countWhere > 0 Then
                .Selected(i) = True
                Exit For
            Else
            End If
        Next i
    End With
    
    If countWhere = 0 Then
        lstIncludedPlants.Selected(0) = True
        lstIncludedPlants.Selected(0) = False
    Else
    End If
Else
End If


Application.ScreenUpdating = True


End Sub

Private Sub Run_LRP_Click()

Safety_Stock = chkSS.Value
Standard_Price = chkSTPRS.Value
Raw = chkRaw.Value
Pack = chkPack.Value

With lstIncludedPlants
    ReDim plantsIncluded(.ListCount - 1)
    plantsInLRP = .ListCount - 1
    
    For i = 0 To .ListCount - 1
        plantsIncluded(i) = Left(.List(i), 4)
    Next i
End With

Call LRPinSAP
Unload Me

End Sub

Private Sub TextBox1_Change()
Application.ScreenUpdating = False
Dim searchFor As String, searchIn As String
Dim countWhere As Integer
Dim numRes As Integer, i As Integer
numRes = 0



searchFor = TextBox1.Value

With lstPlants
For i = 0 To .ListCount - 1
    searchIn = .List(i)
    countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
    
    If countWhere > 0 Then
        numRes = numRes + 1
    Else
    End If
    
Next i
End With

If numRes = 120 Then
    lblNumResBB1.Caption = ""
Else
    lblNumResBB1.Caption = "# of Matching Items from Search: " & numRes
End If
With lstPlants
For i = 0 To .ListCount - 1
    searchIn = .List(i)
    countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
    
    If countWhere > 0 Then
        .Selected(i) = True
        Exit For
    Else
    End If
    
Next i

If countWhere = 0 Then
    lstPlants.Selected(0) = True
    lstPlants.Selected(0) = False
Else
End If
End With

Application.ScreenUpdating = True

End Sub

Private Sub TextBox2_Change()
Application.ScreenUpdating = False
Dim searchFor As String, searchIn As String
Dim countWhere As Integer
Dim numRes As Integer, i As Integer
numRes = 0



searchFor = TextBox2.Value

With lstIncludedPlants
For i = 0 To .ListCount - 1
    searchIn = .List(i)
    countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
    
    If countWhere > 0 Then
        numRes = numRes + 1
    Else
    End If
    
Next i
End With

If numRes = 120 Then
    Label2.Caption = ""
Else
    Label2.Caption = "# of Matching Items from Search: " & numRes
End If
With lstIncludedPlants
For i = 0 To .ListCount - 1
    searchIn = .List(i)
    countWhere = InStr(1, searchIn, searchFor, vbTextCompare)
    
    If countWhere > 0 Then
        .Selected(i) = True
        Exit For
    Else
    End If
    
Next i

If countWhere = 0 Then
    lstIncludedPlants.Selected(0) = True
    lstIncludedPlants.Selected(0) = False
Else
End If
End With

Application.ScreenUpdating = True
End Sub

Private Sub UserForm_Initialize()
Dim i As Integer

Call enterPlantCodes

chkSS.Value = True
chkSTPRS.Value = True
chkRaw.Value = True
chkPack.Value = True

With lstPlants

For i = 0 To 44
    .AddItem plantCodes(i)
Next i

End With

End Sub

 Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
        If KeyCode = vbKeyReturn Then
            On Error Resume Next
            
            With lstIncludedPlants
                .AddItem lstPlants.Value
                .Selected(.ListCount - 1) = True
            End With
        
            TextBox1.Value = ""
            'TextBox1.SetFocus
            
            
        End If
   End Sub

Private Sub TextBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
        If KeyCode = vbKeyReturn Then
            On Error Resume Next
            With lstIncludedPlants
                For i = 0 To .ListCount - 1
                    If .Selected(i) = True Then
                    .RemoveItem (.ListIndex)
                    Else
                    End If
                Next i
            End With
        End If
   End Sub

Attribute VB_Name = "Report"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
''   Checks to see if the DFC function needs to be run
''   If it does, then it populates the cells needed with the formula
''==============================================================================
'    'Exit Sub
'
'    '   Check if the target is in a supply column and if changes is done in supply row
'    '----------------------------------------------------------------------
'    If Target.Column > FIRST_FCST_COL And Target.Locked = False Then
'
'        CalculateDFC (Cells(Target.Row, Target.Column))
'
'    'if changes is done in demand row then search the supply row
'    'after supply row found, assign target to be supply row position and
'    'calculate DFC
'    ElseIf Target.Column > FIRST_FCST_COL And Cells(Target.Row, ATTRIBUTE_COLUMN).Value = "Demand" Then
'        Dim Inc As Byte
'        Inc = 1
'        Do While Me.Cells(Target.Row + Inc, Target.Column).Locked = True
'            Inc = Inc + 1
'        Loop
'
'        CalculateDFC (Cells(Target.Row + Inc, Target.Column))
'
'    Else
'        'There is nothing to do.
'    End If
End Sub

Public Sub CalculateDFC(ByVal targetCell As Range)
    Dim dfcFormula As String
    Dim dfcCell As Range
    Dim CellsToUpdate As Range
    Dim lastDFCcolumn As Long
    Dim columnCounter As Long
    Dim plantCount As Long
    Dim NeedToProtect As Boolean
    Dim demandCount As Byte
    
    Const DFC_ROW_OFFSET As Long = 3
    Const DEMAND_ROW_OFFSET As Long = -1
    Const INVENTORY_ROW_OFFSET As Long = 1
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
        
    '   Check to see if the DFC needs to be added
    '------------------------------
    lastDFCcolumn = _
    Cells(HEADER_ROWS_ADJUST, 1).End(xlToRight).Column - 1
        
    If lastDFCcolumn > targetCell.Column Then
        '   check to see if the sheet needs to be unprotected
        '------------------------------
        If Me.ProtectContents = True Then
            NeedToProtect = True
        End If
            
        '   Unprotect the sheet
        '------------------------------
        If NeedToProtect = True Then
            Call ReportSupport.ToggleProtection(Me, VENDOR_PASSWORD, False)
        End If
            
        '   DFC for the row it impacts
        '----------------------------------------------------------------------
        'Count the number of demand rows
        demandCount = 0
        Do While Me.Cells(targetCell.Row - 2 - demandCount, MAT_NUM_COLUMN).Value = _
            Me.Cells(targetCell.Row - 1, MAT_NUM_COLUMN).Value
            demandCount = demandCount + 1
        Loop
        dfcFormula = ReportSupport.GenerateDFCformula( _
            firstDemandRow:=targetCell.Row + DEMAND_ROW_OFFSET, _
            lastDemandRow:=targetCell.Row + DEMAND_ROW_OFFSET - demandCount, _
            OHrow:=targetCell.Row + INVENTORY_ROW_OFFSET, _
            firstDFCcolumn:=targetCell.Column, _
            lastDFCcolumn:=lastDFCcolumn, _
            LockLastColumn:=True)
            
        Me.Cells(targetCell.Row + DFC_ROW_OFFSET, targetCell.Column) _
            .Formula = dfcFormula
            
        Me.Cells(targetCell.Row + DFC_ROW_OFFSET, targetCell.Column) _
            .Copy
            
        With Me.Range(Cells(targetCell.Row + DFC_ROW_OFFSET, targetCell.Column), _
                    Cells(targetCell.Row + DFC_ROW_OFFSET, lastDFCcolumn - 1))
            .PasteSpecial xlPasteFormulas
            .Calculate
            .Copy
            .PasteSpecial xlPasteValues
        End With
            
        Application.CutCopyMode = False
        Application.Calculation = xlCalculationAutomatic
            
        '   Select the next Supply cell.
        '   If the cell edited was the last cell, then it next cell
        '----------------------------------------------------------------------
        Cells(targetCell.Row, targetCell.Column + 1).Select
        Application.ScreenUpdating = True
            
        '   Protect the sheet, if needed
        '------------------------------
        If NeedToProtect = True Then
            Call ReportSupport.ToggleProtection(Me, VENDOR_PASSWORD, True)
        End If
    End If
End Sub


Attribute VB_Name = "ReportGeneration"
Option Explicit

Public Sub ImportData(ByRef DataSheet As Worksheet, _
                      ByRef ReportWorksheet As Worksheet, _
                      ByVal numRows As Long, _
                      ByVal numCols As Long, _
                      ByVal rptType As FileType)
'==============================================================================
'   1. Parses the data file and imports the data into the correct columns in
'       the report template sheet.
'
'   2. Sorts the data so that the follow up materials are placed below the
'       material that they replace
'==============================================================================
Application.ScreenUpdating = False
Application.DisplayAlerts = False

Debug.Print Now & " import data"
Dim t As Double
t = Timer()
    Dim Header As Range
    Dim colHeadings As Range
    Dim firstFCSTCol As Long
    Dim lastFCSTCol As Long
    Dim LastReportCol As Long
    Dim numForecastColumns As Long
    Dim dmdCell As Range
    Dim consumptionType As String
    
'========
'   1.
'========
    '--------------------------------------------------------------------------
    '   Copy the data
    '--------------------------------------------------------------------------
    'make vendor name to null string to avoid overide existing file if no vendor column in a file
    VendorName = ""
    VendorNumber = ""
    
    Set colHeadings = DataSheet.Range("A1:N1")
        'This may include at some of the forecast columns.
        '   This is to account for all file types
    'OpenAndVet.Hide
    'Application.ScreenUpdating = True
    For Each Header In colHeadings.Cells
        Select Case Header.Value
            Case "MRP Controller", "MRPC"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MRP_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Material No"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MAT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Material Desc"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MAT_DESC_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Follow-Up Material"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(FU_MAT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Plant"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(PLNT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Plant Name"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(PLNT_DESC_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "UoM"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(UoM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Safety Stock"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(SS_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Standard price", "STPRS"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(STD_COST_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Stock"
                DataSheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(STOCK_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Vendor"
                VendorNumber = DataSheet.Cells(Header.Row + 1, Header.Column).Value
            Case "Vendor Name"
                VendorName = DataSheet.Cells(Header.Row + 1, Header.Column).Value
                
                'make vendor name clean from / \ ? * " : < > |
                VendorName = Trim(Replace(VendorName, "/", " "))
                VendorName = Trim(Replace(VendorName, "\", " "))
                VendorName = Trim(Replace(VendorName, "?", " "))
                VendorName = Trim(Replace(VendorName, "*", " "))
                VendorName = Trim(Replace(VendorName, """", " "))
                VendorName = Trim(Replace(VendorName, ":", " "))
                VendorName = Trim(Replace(VendorName, "<", " "))
                VendorName = Trim(Replace(VendorName, ">", " "))
                VendorName = Trim(Replace(VendorName, "|", " "))
            Case Else

        End Select 'header.Value
        'test for forecast column
        If Left(Header.Value, 2) = "W " Or _
            Left(Header.Value, 2) = "D " Or _
            IsNumeric(Left(Header.Value, 2)) = True Then
            firstFCSTCol = Header.Column
            Exit For
        End If
    Next Header
    
    '   Determine the number of FCST Weeks
    '----------------------------------
    DataSheet.Activate
    numForecastColumns = Application.WorksheetFunction. _
        CountA(Range(Cells(1, firstFCSTCol), Cells(1, 150))) - 1
    lastFCSTCol = firstFCSTCol + numForecastColumns - 1
    Range(Cells(1, firstFCSTCol), Cells(numRows + 1, lastFCSTCol)).Copy
    
    ReportWorksheet.Activate
    
    Range(Cells(1, FIRST_REPORT_FCST_COLUMN), _
        Cells(numRows + 1, FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1)) _
        .PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    DataSheet.Parent.Saved = True
    DataSheet.Parent.Close
    
    'give name to stock column, even if it is not exist in source file, so the column values will be zero or empty
    ReportWorksheet.Activate
    If Cells(1, STOCK_COLUMN).Value = "" Then
        Cells(1, STOCK_COLUMN).Value = "Stock"
    End If
    LastReportCol = FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1
    ReportNumberOfColumns = LastReportCol
'========
'   2. Sort
'========
    'OpenAndVet.Hide
    'Application.ScreenUpdating = True
    
    'Only sort if there is more than 1 row of data
    If numRows > 2 Then
            'Follow-up Material number is column D
            'Material is column B
    
    '   Set up the values to sort by
    '----------------------------------
        'LastReportCol = FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1
        'ReportNumberOfColumns = LastReportCol
        
        Cells(1, LastReportCol + 1).Value = "Sort Number"
        
        Cells(2, (LastReportCol + 1)).Select
        Cells(2, (LastReportCol + 1)).Formula = _
             "=IF(D2="""",B2*1,D2-1)"
        Cells(2, (LastReportCol + 1)).NumberFormat = "0"
        
        'copy the values of the formulas in the sorting column down
        Cells(2, LastReportCol + 1).Copy
        Range(Cells(2, LastReportCol + 1), _
            Cells(numRows + 1, LastReportCol + 1)).PasteSpecial xlPasteFormulasAndNumberFormats
        
        ReportWorksheet.Calculate
        
        ReportWorksheet.Range(Cells(2, LastReportCol + 1), _
            Cells(numRows + 1, LastReportCol + 1)).Copy
        ReportWorksheet.Range(Cells(2, LastReportCol + 1), _
            Cells(numRows + 1, LastReportCol + 1)).PasteSpecial xlPasteValues
        
        Application.CutCopyMode = False
        
    '   Do the Sort by item & vendor/plant
    '----------------------------------
        With ReportWorksheet.Sort
            .SortFields.Clear
            .SortFields.Add _
                Key:=Range(Cells(2, LastReportCol + 1), _
                        Cells(numRows + 1, LastReportCol + 1)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
            '.SortFields.Add _
                Key:=Range(Cells(2, PLNT_NUM_COLUMN), _
                        Cells(numRows + 1, PLNT_NUM_COLUMN)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortTextAsNumbers
            .SortFields.Add _
                Key:=Range(Cells(2, MRP_COLUMN), _
                        Cells(numRows + 1, MRP_COLUMN)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
            
            .SetRange Range(Cells(2, 1), _
                Cells(numRows + 1, LastReportCol + 1))
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
            .SortFields.Clear
        End With
        
    '   Delete the Sort Column
    '----------------------------------
        ReportWorksheet.Columns(LastReportCol + 1).Delete
    End If  'Row Count >2
    
    '   Turn Negative values into positives
    '----------------------------------
     LastReportCol = FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1
     ReportNumberOfColumns = LastReportCol
    For Each dmdCell In Range(Cells(2, FIRST_REPORT_FCST_COLUMN), _
                        Cells(numRows + 1, LastReportCol)).Cells
        If dmdCell.Value < 0 Then
            dmdCell.Value = -1 * dmdCell.Value
        End If
    Next dmdCell
    
    '   Put in the proper label for the consumption numbers
    '----------------------------------
    If rptType > [_First_Supply_File] And rptType < [_Last_Supply_File] Then
        consumptionType = "Supply"
    ElseIf rptType > [_First_Demand_File] And rptType < [_Last_Demand_File] Then
        consumptionType = "Demand"
    Else
        consumptionType = "Demand"
    End If
    
    For Each dmdCell In ReportWorksheet.Range( _
        Cells(2, ATTRIBUTE_COLUMN), _
        Cells(numRows + 1, ATTRIBUTE_COLUMN)).Cells
        dmdCell.Value = consumptionType
    Next dmdCell

    'copy weeks to compare tab
    Sheets("CompareWeeks").Columns("A:A").ClearContents
    Sheets("Report").Range(Cells(1, FIRST_REPORT_FCST_COLUMN), Cells(1, LastReportCol)).Copy
    Sheets("CompareWeeks").Select
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=True
    Application.CutCopyMode = False

    '   Insert the header rows
    '----------------------------------
    ReportWorksheet.Rows("1:" & HEADER_ROWS_ADJUST - 1).Insert
        
    '   Add File Type and Vendor Name
    '----------------------------------
    With ReportWorksheet
        .Range("B7").Value = PublicVariables.FileTypeDesc(rptType)
    
    If VendorName = "" Then
        VendorName = "Material file"
        'get plant Name for description in bracket
        VendorNumber = .Cells(16, PLNT_DESC_COLUMN).Value
        
        'make Plant name clean from / \ ? * " : < > |
        VendorNumber = Trim(Replace(VendorNumber, "/", " "))
        VendorNumber = Trim(Replace(VendorNumber, "\", " "))
        VendorNumber = Trim(Replace(VendorNumber, "?", " "))
        VendorNumber = Trim(Replace(VendorNumber, "*", " "))
        VendorNumber = Trim(Replace(VendorNumber, """", " "))
        VendorNumber = Trim(Replace(VendorNumber, ":", " "))
        VendorNumber = Trim(Replace(VendorNumber, "<", " "))
        VendorNumber = Trim(Replace(VendorNumber, ">", " "))
        VendorNumber = Trim(Replace(VendorNumber, "|", " "))
        
        .Range(VENDOR_NAME_CELL).Value = VendorName & " (" & VendorNumber & ")"
    Else
        .Range(VENDOR_NAME_CELL).Value = VendorName
    End If
    
        .Range("B8").Value = VendorName & " (" & VendorNumber & ") " & Format(Now(), "mm-dd-yyyy")
        .Range("B8").Font.Size = 12
        
        .Range(VENDOR_NAME_CELL).Font.Color = vbWhite
        .Range(LOCKED_INDICATOR_RANGE).Value = "TRUE"
        .Range(LOCKED_INDICATOR_RANGE).Font.Color = vbWhite
    End With
    
    
    '   Add the Auto Filters
    '----------------------------------
    ReportWorksheet.Range("A" & HEADER_ROWS_ADJUST & ":" & ColumnLetterFromNumber(ATTRIBUTE_COLUMN) & _
        HEADER_ROWS_ADJUST).AutoFilter
    
    '   go back to the home page
    '----------------------------------
    HQMMToolkit.HomePage.Activate
    
    '   Create a unique identifier for this report
    '----------------------------------
    With ReportWorksheet.Range("C1")
        .Value = CDbl(Now())
        .Font.Color = RGB(255, 255, 255)
    End With

Debug.Print Now & " import data end"
End Sub

Public Sub InsertLines(ByRef ReportWorksheet As Worksheet, _
                       ByRef TemplateWorksheet As Worksheet, _
                       ByVal numRows As Long, _
                       ByVal numCols As Long, whatTask As Tasks)
'==============================================================================
'   1. Inserts lines for the different attributes (Supply, projected, DFC, etc.
'==============================================================================
Debug.Print Now & " insertLines"

Dim t As Double
    Dim RowPointer As Long
    Dim LastRow As Long
    Dim firstDataRow As Long
    Dim dfcFormula As String
    Dim plantCount As Long
    Dim dmdCounter As Long
    Dim FollowUp As Boolean
    Dim demandCount As Long
    Dim runOutCountRowAdjust As Long
    Dim LoopCounter As Long
    
    Const NUM_ROWS_TO_INSERT As Long = 5
    Const FORMULA_ROWS As String = "16:20"
    Const TOTALS_ROWS As String = "9:14"
    
    Const FIRST_TOTAL_ROW As Long = 9
    Const LAST_TOTAL_ROW As Long = 14
    Const FIRST_TOTAL_COL As Long = 13
    Const FIRST_TOTALS_CELL As String = "M9"
    Const DFC_TOTAL_ROW As Long = 13
    
    Const FIRST_FORMULA_ROW As Long = 17
    Const LAST_FORMULA_ROW As Long = 21
    
    Const FIRST_CUSTOM_HEADER_COL As Long = 1
    Const LAST_CUSTOM_HEADER_COL As Long = 15
    
    Const LOCAL_DEMAND_OFFSET As Long = -1
    
    Const DFC_ROW_OFFSET As Long = 3
    Const DEMAND_ROW_OFFSET As Long = -1
    Const INVENTORY_ROW_OFFSET As Long = 1
    Const SUPPLY_ROW_OFFSET As Long = 0
    Const TOTAL_COL_OFFSET As Long = 1
    Const DOLLARS_ROW_OFFSET As Long = 2
    Const WFC_ROW_OFFSET = 4
    
    firstDataRow = HEADER_ROWS_ADJUST + 1
       
    ' Speed enhancements
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    Debug.Print Now & " insert lines used range clear begin"
    'clear unused cells from Excel's RAM
    Worksheets("Report").UsedRange
    Debug.Print Now & " insert lines used range clear end"
    With ReportWorksheet
        .Activate
        t = Timer()
        LastRow = (numRows + HEADER_ROWS_ADJUST)
        plantCount = 0
        FollowUp = False
        
        RowPointer = firstDataRow
        For LoopCounter = firstDataRow To LastRow
            
            If .Cells(RowPointer, MAT_NUM_COLUMN).Value <> _
               .Cells(RowPointer + 1, MAT_NUM_COLUMN).Value _
            Then
            '   Insert 5 new Lines
            '----------------------------------
                .Rows(RowPointer + 1 & ":" & RowPointer + 5).Insert Shift:=xlUp

                '   Copy formats to the new rows
                '----------------------------------
                TemplateWorksheet.Range(TemplateWorksheet.Cells(FIRST_FORMULA_ROW, 1), _
                    TemplateWorksheet.Cells(LAST_FORMULA_ROW, numCols + 1)).Copy

                .Range(.Cells(RowPointer + 1, 1), .Cells(RowPointer + 4, numCols + 1)) _
                    .PasteSpecial xlPasteAll
                
                If .Cells(RowPointer + 5, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88) Then
                    FollowUp = True
                End If
                
                If FollowUp = True Then
                    .Cells(RowPointer + 5, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88)
                End If
                
'======================================================
'Starting this line Row pointer is refer to supply row
'======================================================
                RowPointer = RowPointer + 1
            
            '   Projected Inventory formula
            '----------------------------------
                demandCount = 0
                Do While .Cells(RowPointer - 2 - demandCount, MAT_NUM_COLUMN).Value = _
                         .Cells(RowPointer - 1, MAT_NUM_COLUMN).Value
                    demandCount = demandCount + 1
                Loop
                
                .Range(ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN - 1) & RowPointer + INVENTORY_ROW_OFFSET).Formula = _
                    "=SUM(" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN - 1) & RowPointer + DEMAND_ROW_OFFSET - demandCount & _
                    ":" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN - 1) & RowPointer & ")"
                .Range(.Cells(RowPointer + INVENTORY_ROW_OFFSET, FIRST_REPORT_FCST_COLUMN), _
                    .Cells(RowPointer + INVENTORY_ROW_OFFSET, numCols)).Formula = _
                    "=" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN - 1) & RowPointer + INVENTORY_ROW_OFFSET & _
                    "-SUM(" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                    RowPointer + DEMAND_ROW_OFFSET - demandCount & ":" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                    RowPointer + DEMAND_ROW_OFFSET & ")" & "+" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & RowPointer

            '   Projected Dollars formula
            '----------------------------------
                .Range(.Cells(RowPointer + DOLLARS_ROW_OFFSET, STOCK_COLUMN), _
                    .Cells(RowPointer + DOLLARS_ROW_OFFSET, numCols)).Formula = _
                    "=" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN - 1) & RowPointer + INVENTORY_ROW_OFFSET & _
                    "* $" & ColumnLetterFromNumber(STD_COST_COLUMN) & "$" & RowPointer + DEMAND_ROW_OFFSET - plantCount

'========================================
'this line is modified if task is DFC Report then DFc is calculated to speed up time processing
'========================================
            '   DFC Formula
            '----------------------------------
                If whatTask = DFCReport Then
                    dfcFormula = ""
                Else
                    dfcFormula = ReportSupport.GenerateDFCformula( _
                        firstDemandRow:=RowPointer + DEMAND_ROW_OFFSET - demandCount, _
                        lastDemandRow:=RowPointer + DEMAND_ROW_OFFSET, _
                        OHrow:=RowPointer + INVENTORY_ROW_OFFSET, _
                        firstDFCcolumn:=STOCK_COLUMN, _
                        lastDFCcolumn:=numCols - 1, _
                        LockLastColumn:=True)
                End If

                With .Range(.Cells(RowPointer + DFC_ROW_OFFSET, STOCK_COLUMN), _
                            .Cells(RowPointer + DFC_ROW_OFFSET, numCols - 1))
                    .Formula = dfcFormula
                    .Copy
                    .PasteSpecial xlPasteValues
                End With

            '   WFC formula
            '----------------------------------
                .Range(.Cells(RowPointer + WFC_ROW_OFFSET, STOCK_COLUMN), _
                    .Cells(RowPointer + WFC_ROW_OFFSET, numCols)).Formula = _
                    "=IFERROR((" & ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN - 1) & "$" & RowPointer + DFC_ROW_OFFSET & _
                        ")/7," & """" & """" & ")"
            
            '   Run-Out Formula
            '----------------------------------
                runOutCountRowAdjust = 1
                
                .Range(.Cells(RowPointer - 1 - plantCount, RUN_OUT_COLUMN), _
                       .Cells(RowPointer - 1, RUN_OUT_COLUMN)).Formula = _
                       "=IF(ISNUMBER(VALUE(RIGHT(INDEX($P$15:$DZ$15,1,MATCH(0,$O$" & _
                       RowPointer + runOutCountRowAdjust & ":$DZ$" & _
                       RowPointer + runOutCountRowAdjust & ",-1)),2)))=TRUE,IF(OR(LEFT(INDEX($P$15:$DZ$15,1,MATCH(0,$O$" & _
                       RowPointer + runOutCountRowAdjust & ":$DZ$" & _
                       RowPointer + runOutCountRowAdjust & ",-1)),1)=" & """" & "D" & """" & ",LEFT(INDEX($P$15:$DZ$15,1,MATCH(0,$O$" & _
                       RowPointer + runOutCountRowAdjust & ":$DZ$" & _
                       RowPointer + runOutCountRowAdjust & ",-1)),1)=" & """" & "W" & """" & ")=TRUE,MID(INDEX($P$15:$DZ$15,1,MATCH(0,$O$" & _
                       RowPointer + runOutCountRowAdjust & ":$DZ$" & _
                       RowPointer + runOutCountRowAdjust & ",-1)),3,8),MID(INDEX($P$15:$DZ$15,1,MATCH(0,$O$" & _
                       RowPointer + runOutCountRowAdjust & ":$DZ$" & _
                       RowPointer + runOutCountRowAdjust & ",-1)),1,8)),IFERROR(IF(RIGHT(INDEX($P$15:$DZ$15,1,MATCH(0,$O$" & _
                       RowPointer + runOutCountRowAdjust & ":$DZ$" & _
                       RowPointer + runOutCountRowAdjust & ",-1)),2)=" & """" & "ck" & """" & "," & """" & "Today" & """" & "," & """" & """" & ")," & """" & """" & "))"

             '   Copy formats to the new rows
                '----------------------------------
                TemplateWorksheet.Range(TemplateWorksheet.Cells(FIRST_FORMULA_ROW, 1), _
                    TemplateWorksheet.Cells(LAST_FORMULA_ROW, numCols)).Copy

                .Range(.Cells(RowPointer, 1), .Cells(RowPointer + 4, numCols)) _
                    .PasteSpecial Paste:=xlPasteFormats
                '.Range(.Cells(rowpointer, 1), .Cells(rowpointer + 4, numCols)).Calculate
                
                '   Copy formats to the demand rows
                '----------------------------------
                TemplateWorksheet.Range(TemplateWorksheet.Cells(firstDataRow, 1), _
                    TemplateWorksheet.Cells(firstDataRow, numCols + 1)).Copy
                With .Range(.Cells(RowPointer - 1 - plantCount, 1), _
                            .Cells(RowPointer - 1, numCols + 1))
                    .PasteSpecial xlPasteFormats
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
                End With
                With .Range(.Cells(RowPointer - 1 - plantCount, numCols + 1), _
                            .Cells(RowPointer - 1, numCols + 1))
                        .NumberFormat = "#,##0_);[Red](#,##0)"
                        .Font.Bold = True
                End With
             
             '   Highlight F/U Materials
            '----------------------------------
                If .Cells(RowPointer - 1 - plantCount, FU_MAT_NUM_COLUMN).Value <> "" Then
                    .Cells(RowPointer - 1 - plantCount, FU_MAT_NUM_COLUMN) _
                        .Interior.Color = RGB(251, 178, 88)
                    FollowUp = True
                    If .Cells(RowPointer - 1 - plantCount, FU_MAT_NUM_COLUMN).Value = _
                       .Cells(RowPointer + NUM_ROWS_TO_INSERT + 1, MAT_NUM_COLUMN) Then
                        .Cells(RowPointer + NUM_ROWS_TO_INSERT + 1, MAT_NUM_COLUMN) _
                            .Interior.Color = RGB(251, 178, 88)
                    End If
                End If

            '   Merge material description cells
            '----------------------------------
                .Range(.Cells(RowPointer - 1 - plantCount, MAT_DESC_COLUMN), _
                    .Cells(RowPointer + 2, MAT_DESC_COLUMN)).Merge
                .Range(.Cells(RowPointer - 1 - plantCount, MAT_DESC_COLUMN), .Cells(RowPointer + 2, MAT_DESC_COLUMN)).WrapText = True
                .Range(.Cells(RowPointer - 1 - plantCount, MAT_DESC_COLUMN), .Cells(RowPointer + 2, MAT_DESC_COLUMN)).VerticalAlignment = xlTop
                
                If FollowUp = True Then
                    .Cells(RowPointer - 1, FU_MAT_NUM_COLUMN).Interior.Color = RGB(251, 178, 88)
                End If
                
            '   Enter the Totals formulas & formatting
            '----------------------------------
                'total for demand rows
                With .Range(.Cells(RowPointer - 1 - plantCount, numCols + TOTAL_COL_OFFSET), _
                            .Cells(RowPointer - 1, numCols + TOTAL_COL_OFFSET))
                    .NumberFormat = "#,##0_);[Red](#,##0)"
                    .FormulaR1C1 = _
                        "=SUM(RC" & CStr(FIRST_REPORT_FCST_COLUMN) & _
                         ":RC" & CStr(numCols) & ")"
                End With
                
            '   total for supply
            '--------------------------------
                .Cells(RowPointer, numCols + TOTAL_COL_OFFSET).NumberFormat = "#,##0_);[Red](#,##0)"
                .Cells(RowPointer, numCols + TOTAL_COL_OFFSET).FormulaR1C1 = _
                    "=SUM(RC" & CStr(FIRST_REPORT_FCST_COLUMN) & _
                    ":RC" & CStr(numCols) & ")"
                
                'Bold & number format
                .Range(.Cells(RowPointer + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                    .Cells(RowPointer + SUPPLY_ROW_OFFSET, _
                        numCols + TOTAL_COL_OFFSET)) _
                    .Font.Bold = True
                    .Range(.Cells(RowPointer + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                        .Cells(RowPointer + SUPPLY_ROW_OFFSET, _
                        numCols + TOTAL_COL_OFFSET)).NumberFormat = "#,##0_);[Red](#,##0)"
                'Black
                .Range(.Cells(RowPointer + DEMAND_ROW_OFFSET - plantCount, numCols + 1), _
                    .Cells(RowPointer + SUPPLY_ROW_OFFSET, numCols + 1)) _
                    .Font.Color = RGB(0, 0, 0)
                'Borders
                .Range(.Cells(RowPointer + DEMAND_ROW_OFFSET - plantCount, _
                        numCols + TOTAL_COL_OFFSET), _
                        .Cells(RowPointer + 4, numCols + TOTAL_COL_OFFSET)) _
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
    
                '   Fill Down the ID values (item, loc, mrp...)
                '----------------------------------
                .Range(.Cells(RowPointer, MRP_COLUMN), _
                    .Cells(RowPointer + NUM_ROWS_TO_INSERT - 1, MAT_NUM_COLUMN)) _
                    .Value = .Range(.Cells(RowPointer - 1, MRP_COLUMN), _
                        .Cells(RowPointer - 1, MAT_NUM_COLUMN)).Value

                .Range(.Cells(RowPointer, PLNT_NUM_COLUMN), _
                    .Cells(RowPointer + NUM_ROWS_TO_INSERT - 1, PLNT_DESC_COLUMN)) _
                    .Value = .Range(.Cells(RowPointer - 1, PLNT_NUM_COLUMN), _
                        .Cells(RowPointer - 1, PLNT_DESC_COLUMN)).Value

                RowPointer = RowPointer + NUM_ROWS_TO_INSERT  'make Row pointer point to next material row
                'If plantCount > 0 Then
'                    rowpointer = rowpointer - plantCount
'                End If
                plantCount = 0
                FollowUp = False
            Else
                plantCount = plantCount + 1
                RowPointer = RowPointer + 1
            End If
        Next LoopCounter
'==============================================================================
'   End of Individual line formating
'   Begin Sheet and heading formatting
'==============================================================================
        
    '   Column Heading titles
    '----------------------------------
        TemplateWorksheet.Range(TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, FIRST_CUSTOM_HEADER_COL), _
            TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, LAST_CUSTOM_HEADER_COL)) _
            .Copy

        .Range(.Cells(HEADER_ROWS_ADJUST, FIRST_CUSTOM_HEADER_COL), _
            .Cells(HEADER_ROWS_ADJUST, LAST_CUSTOM_HEADER_COL)) _
            .PasteSpecial xlPasteAll
        Application.CutCopyMode = False

        ReportWorksheet.Cells(HEADER_ROWS_ADJUST, numCols + 1).Value = "Total"

    '   Column heading formats
    '----------------------------------
        TemplateWorksheet.Range(TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, 1), _
            TemplateWorksheet.Cells(HEADER_ROWS_ADJUST, numCols + 1)).Copy

        ReportWorksheet.Range(.Cells(HEADER_ROWS_ADJUST, 1), _
            .Cells(HEADER_ROWS_ADJUST, numCols + 1)).PasteSpecial xlPasteFormats
        Application.CutCopyMode = False
    
    '   Clear extra rows at the bottom
    '----------------------------------
        Worksheets(REPORT_WORKSHEET_NAME).UsedRange
        RowPointer = Worksheets(REPORT_WORKSHEET_NAME).UsedRange.Rows.count
        
    '   Fit the row height
    '----------------------------------
        .Rows().EntireRow.AutoFit
    
    '   Add the Spark lines for the data rows
    '----------------------------------
        .Range(.Cells(firstDataRow, TREND_LINE_COLUMN), _
               .Cells(RowPointer, TREND_LINE_COLUMN)) _
            .SparklineGroups.Add _
                Type:=xlSparkLine, _
                SourceData:="$O$" & firstDataRow & ":$" & _
                    ColumnLetters.ColumnLetterFromNumber(numCols) & _
                    "$" & RowPointer

    '   Add border to the bottom cell in the Totals column
    '----------------------------------
        With .Cells(RowPointer, numCols + 1)
            .Borders(xlEdgeTop).LineStyle = xlDouble
            .Borders(xlEdgeTop).ThemeColor = 4
            .Borders(xlEdgeTop).TintAndShade = 0
            .Borders(xlEdgeTop).Weight = xlThick
        End With
        .Columns(numCols + 1).ColumnWidth = 14

    '   Totals
    '----------------------------------
        TemplateWorksheet.Range(FIRST_TOTALS_CELL, _
            TemplateWorksheet.Cells(LAST_TOTAL_ROW, numCols)).Copy

        .Range(FIRST_TOTALS_CELL).PasteSpecial xlPasteAll

        Application.CutCopyMode = False
        
        'total DFC
        dfcFormula = ReportSupport.GenerateDFCformula( _
            firstDemandRow:=9, _
            lastDemandRow:=9, OHrow:=11, _
            firstDFCcolumn:=STOCK_COLUMN, _
            lastDFCcolumn:=numCols - 1, _
            LockLastColumn:=True)

        .Cells(DFC_TOTAL_ROW, STOCK_COLUMN) _
        .Formula = dfcFormula

        .Cells(DFC_TOTAL_ROW, STOCK_COLUMN) _
        .Copy

        With .Range(.Cells(DFC_TOTAL_ROW, STOCK_COLUMN), _
                    .Cells(DFC_TOTAL_ROW, numCols - 1))
            .PasteSpecial xlPasteFormulas
            .Calculate
        End With

        'Total WFC
        .Cells(DFC_TOTAL_ROW + 1, STOCK_COLUMN) _
        .Formula = "=IFERROR((P$" & DFC_TOTAL_ROW & _
                        ")/7," & """" & """" & ")"
        
        .Cells(DFC_TOTAL_ROW + 1, STOCK_COLUMN) _
        .Copy

        With .Range(.Cells(DFC_TOTAL_ROW + 1, STOCK_COLUMN), _
                    .Cells(DFC_TOTAL_ROW + 1, numCols - 1))
            .PasteSpecial xlPasteFormulas
            .Calculate
        End With
        
        'total demand
        With .Cells(FIRST_TOTAL_ROW, STOCK_COLUMN)
            .Formula = _
                "=SUMPRODUCT(SUBTOTAL(9,OFFSET(P$16:P$" & _
                RowPointer - 1 & ",ROW(P$16:P$" & RowPointer - 1 & ")-MIN(ROW(P$16:P$" & _
                RowPointer - 1 & ")),,1)), --($O$16:$O$" & RowPointer - 1 & "=$M9))"
            .Copy
        End With

        .Range(.Cells(FIRST_TOTAL_ROW, STOCK_COLUMN), _
               .Cells(FIRST_TOTAL_ROW + 3, numCols)) _
               .PasteSpecial xlPasteFormulas

        '   Enter the Totals formulas & formatting for the totals
        '----------------------------------
        With ReportWorksheet
            .Cells(FIRST_TOTAL_ROW, numCols + TOTAL_COL_OFFSET).Formula = _
                "=SUM(" & _
                ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                FIRST_TOTAL_ROW & ":" & _
                ColumnLetters.ColumnLetterFromNumber(numCols) & _
                FIRST_TOTAL_ROW & ")"
            .Cells(FIRST_TOTAL_ROW + 1, numCols + TOTAL_COL_OFFSET).Formula = _
                "=SUM(" & _
                ColumnLetters.ColumnLetterFromNumber(FIRST_REPORT_FCST_COLUMN) & _
                FIRST_TOTAL_ROW + 1 & ":" & _
                ColumnLetters.ColumnLetterFromNumber(numCols) & _
                FIRST_TOTAL_ROW + 1 & ")"
        End With 'ReportWorksheet

        With ReportWorksheet.Range(.Cells(FIRST_TOTAL_ROW, numCols + 1), _
                .Cells(FIRST_TOTAL_ROW + 5, numCols + 1))
            'Bold
            .Font.Bold = True

            'Black
            .Font.Color = RGB(0, 0, 0)

            'Size
            .Font.Size = 11

            'Borders
            .Borders(xlEdgeTop).LineStyle = xlSingle
            .Borders(xlEdgeTop).Color = RGB(0, 0, 0)
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeTop).LineStyle = xlSolid

            .Borders(xlEdgeRight).LineStyle = xlSingle
            .Borders(xlEdgeRight).Color = RGB(0, 0, 0)
            .Borders(xlEdgeRight).Weight = xlThin
            .Borders(xlEdgeRight).LineStyle = xlSolid

            .Borders(xlInsideHorizontal).LineStyle = xlSingle
            .Borders(xlInsideHorizontal).Color = RGB(220, 230, 250)
            .Borders(xlInsideHorizontal).Weight = xlThin
            .Borders(xlInsideHorizontal).LineStyle = xlSolid
        End With
        
    '   Add the Spark lines for the Heading rows
    '----------------------------------
        .Range(.Cells(9, TREND_LINE_COLUMN), _
               .Cells(14, TREND_LINE_COLUMN)) _
            .SparklineGroups.Add _
                Type:=xlSparkLine, _
                SourceData:="$O$" & 9 & ":$" & _
                    ColumnLetters.ColumnLetterFromNumber(numCols) & _
                    "$" & 14
                    
    '  set column width to save some space
    '------------------------
    'set MRP column width
    Columns("A:A").ColumnWidth = 13
    'set MRP heading to left alignment
    Range("A15").Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    'set Material No col width
    Columns("B:B").ColumnWidth = 15
    'set material code format as number
    Columns("B:B").NumberFormat = "0"
    'set material description columnwidth
    Columns("C:C").ColumnWidth = 40
    'set Follow up material till vendor material columnwidth
    Columns("D:E").ColumnWidth = 16
    'set follow up material code format as number
    Columns("D:D").NumberFormat = "0"
    'set supplier columnwidth
    Columns("F:F").ColumnWidth = 16
    'set MM Look-Ups columnwidth
    Columns("G:G").ColumnWidth = 12
    'set Plant Number columnwidth
    Columns("H:H").ColumnWidth = 11
    'set Plant Number alignment to left align
    Range("H15").Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    'set plant name column width
    Columns("I:I").ColumnWidth = 22
    'set UOM column width
    Columns("J:J").ColumnWidth = 8
    'set the header vertical alignment to top
    Range("J15").Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    'set safety stock column width to autofit
    Columns("K:K").AutoFit
    'set standard Cost columnwidth
    Columns("L:L").ColumnWidth = 10
    'set run-out date column width
    Columns("M:M").ColumnWidth = 15
    'set trend columnwdith
    Columns("N:N").ColumnWidth = 10
    'set these headers vertical alingment to top
    Range("M15:N15").Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    'set attribute columnwdith
    Columns("O:O").ColumnWidth = 24
    'define forecast columns width
    Columns(ColumnLetterFromNumber(STOCK_COLUMN) & ":" & ColumnLetterFromNumber(ActiveSheet.UsedRange.Columns.count)).ColumnWidth = 16
    Range("A5").Select
        
    '   Move the file type to a row that can be hidden
    '----------------------------------
        .Range("B7").Cut .Range("B9")
        Application.CutCopyMode = False
        .Activate
        .Range("A2").Activate
        HQMMToolkit.HomePage.Activate
    End With
    
    Debug.Print "total   :" & Timer() - t
    
    HQMMToolkit.HomePage.Activate
Debug.Print Now & " insert lines end"
End Sub

Public Sub CleanGeneratorFile(ByRef ReportWorksheet As Worksheet)
'   Clears all the data from the report sheet, but leaves the form controls
'==============================================================================
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    ReportWorksheet.Cells.Clear
    ActiveWindow.FreezePanes = False
    ReportWorksheet.Activate
    ActiveWorkbook.ActiveSheet.UsedRange
    ReportWorksheet.Visible = xlSheetHidden
    HQMMToolkit.CompareWeeks.Visible = False
End Sub

Sub cleanrep()
CleanGeneratorFile Worksheets("report")
End Sub


Attribute VB_Name = "ReportSupport"
Option Explicit
'==============================================================================
'   This module contains the code that support the end-user functionality.
'
'   ExportVendorFile    Exports the report in the vendor layout
'   ImportVendorData    Imports data from a vendor file that
'                           has been returned
'   View adjustments
'   ----------------
'   ViewVendorFormat    Hides all rows and columns that are NOT visible
'                           for vendors
'   ViewStandardCost    Toggles viewing standard cost
'   ViewDFC             Toggles viewing DFC
'   ViewWFC             Toggles viewing WFC
'   ViewTotals          Toggles viewing the totals on the top.
'==============================================================================
Public Const CHECKED As Long = 1
Public Const UNCHECKED As Long = -4146


Public Sub ToggleHiddenData(ByRef ReportWorksheet As Worksheet, _
                            ByVal AttributeToHide As DataAttribute, _
                            ByVal hideMetric As Boolean)
'   Toggles the visability of the specified metric
'==============================================================================
Application.ScreenUpdating = False
Application.DisplayAlerts = False
    Dim RowsToHide As Long
    Dim RowCounter As Long
    Dim AttributeCell As Range
    Dim reportRange As Range
    Dim labelToHide As String
    
    Const COST_TOTAL_ROW As Long = 12
    Const DFC_TOTAL_ROW As Long = 13
    Const WFC_TOTAL_ROW As Long = 14
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    RowsToHide = -1
    
    '   Hide any columns that need to be hid
    '   Set the label to search for to hide in the data
    '   Set the total row to hide
    '--------------------------------------------------------------------------
    With ReportWorksheet
        Select Case AttributeToHide
            Case Standard_Cost
                .Columns(STD_COST_COLUMN).Hidden = hideMetric
                RowsToHide = COST_TOTAL_ROW
                labelToHide = "Projected $"
            Case DFC
                RowsToHide = DFC_TOTAL_ROW
                labelToHide = "DFC"
            Case WFC
                RowsToHide = WFC_TOTAL_ROW
                labelToHide = "WFC"
            Case Safety_Stock
                .Columns(SS_COLUMN).Hidden = hideMetric
                Exit Sub
            Case mrp
                .Columns(MRP_COLUMN).Hidden = hideMetric
                Exit Sub
        End Select
        
        '   Hide the attribute rows in the data
        '----------------------------------------------------------------------
        Set reportRange = .Range(.Cells(HEADER_ROWS_ADJUST, ATTRIBUTE_COLUMN), _
            .Cells(HEADER_ROWS_ADJUST, ATTRIBUTE_COLUMN).End(xlDown))
            
        For Each AttributeCell In reportRange
            If AttributeCell.Value = labelToHide Then
                .Rows(AttributeCell.Row).Hidden = hideMetric
            End If
        Next AttributeCell
        
        'unhide latest row attribute
        Set reportRange = .Range(.Cells(ActiveSheet.UsedRange.Rows.count - 6, ATTRIBUTE_COLUMN), _
                .Cells(ActiveSheet.UsedRange.Rows.count, ATTRIBUTE_COLUMN))
        
        If hideMetric = False Then
            For Each AttributeCell In reportRange
                If AttributeCell.Value = labelToHide Then
                    .Rows(AttributeCell.Row).Hidden = hideMetric
                End If
            Next AttributeCell
        End If
        
        '   Check to see if the total row should be unhidden
        '   Always hide the row if called for
        '----------------------------------------------------------------------
        If hideMetric = False Then
            If ActiveSheet.Shapes("chkTotals").ControlFormat.Value _
               = CHECKED Then
                .Rows(RowsToHide).Hidden = hideMetric
            End If
        Else
            .Rows(RowsToHide).Hidden = hideMetric
        End If
    End With 'ReportWorksheet
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub

Public Sub ToggleHiddenTotals(ByRef ReportWorksheet As Worksheet, _
                              ByVal hideMetric As Boolean)
'   Hides/Unhides the total rows
'==============================================================================
    ReportWorksheet.Rows(TOTAL_ROWS).Hidden = hideMetric
End Sub

Public Sub chkStdCost_Click()
'   Toggles the visability of standard cost
'==============================================================================
    Dim hideMetric As Boolean
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    With ActiveSheet.Shapes("chkStdCost").ControlFormat
        If .Value = CHECKED Then
            hideMetric = False
            .Value = CHECKED
        Else 'Unchecked
            hideMetric = True
            .Value = UNCHECKED
        End If
    End With
    
    Call ReportSupport.ToggleHiddenData(ActiveSheet, Standard_Cost, hideMetric)
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Public Sub chkDFC_Click()
'   Toggles the visability of DFC
'==============================================================================
    Dim hideMetric As Boolean

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    With ActiveSheet.Shapes("chkDFC").ControlFormat
        If .Value = CHECKED Then
            hideMetric = False
            .Value = CHECKED
        Else 'Unchecked
            hideMetric = True
            .Value = UNCHECKED
        End If
    End With
    
    Call ReportSupport.ToggleHiddenData(ActiveWorkbook.ActiveSheet, DFC, hideMetric)
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Public Sub chkWFC_Click()
'   Toggles the visability of WFC
'==============================================================================
    Dim hideMetric As Boolean

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    With ActiveSheet.Shapes("chkWFC").ControlFormat
        If .Value = CHECKED Then
            hideMetric = False
            .Value = CHECKED
        Else 'Unchecked
            hideMetric = True
            .Value = UNCHECKED
        End If
    End With
    
    Call ReportSupport.ToggleHiddenData(ActiveWorkbook.ActiveSheet, WFC, hideMetric)
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Public Sub chkTotals_Click()
'   Toggles the visability of Totals
'==============================================================================
    Dim hideMetric As Boolean
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    With ActiveSheet.Shapes("chkTotals").ControlFormat
        If .Value = CHECKED Then
            hideMetric = False
            .Value = CHECKED
        Else 'Unchecked
            hideMetric = True
            .Value = UNCHECKED
        End If
    End With
    
    Call ReportSupport.ToggleHiddenTotals(ActiveWorkbook.ActiveSheet, hideMetric)
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Public Sub ToggleProtection(ByRef SheetToProtect As Worksheet, _
                            ByVal PasswordString As String, _
                            ByVal ProtectSheet As Boolean)
'   Protects or Unprotects a worksheet
'       Future versions of this will allow for customizing the criteria
'==============================================================================
    Select Case ProtectSheet
    Case True
        SheetToProtect.Protect _
            Password:=PasswordString, _
            DrawingObjects:=False, _
            Contents:=True, _
            Scenarios:=True, _
            UserInterfaceOnly:=False, _
            AllowFormattingCells:=True, _
            AllowFormattingColumns:=False, _
            AllowFormattingRows:=False, _
            AllowInsertingColumns:=False, _
            AllowInsertingRows:=False, _
            AllowInsertingHyperlinks:=False, _
            AllowDeletingColumns:=False, _
            AllowDeletingRows:=False, _
            AllowSorting:=False, _
            AllowFiltering:=True, _
            AllowUsingPivotTables:=False
    Case False
        SheetToProtect.Unprotect _
            Password:=PasswordString
    End Select
End Sub

Public Function GenerateDFCformula( _
                    ByVal firstDemandRow As Long, _
                    ByVal lastDemandRow As Long, _
                    ByVal OHrow As Long, _
                    ByVal firstDFCcolumn As Long, _
                    ByVal lastDFCcolumn As Long, _
                    Optional ByVal LockLastColumn As Boolean = True) As String
'   Generates a DFC function with a locked last column
'       Future versions of this will allow for customizing the criteria
'==============================================================================
    Dim lockString As String
    
    Const LOCK_CHARACTER As String = "$"
    
    '   Set the locking character
    '----------------------------------
    If LockLastColumn = True Then
        lockString = LOCK_CHARACTER
    Else
        lockString = ""
    End If
    
    GenerateDFCformula = "=DFCWeeks(" & _
        ColumnLetterFromNumber(firstDFCcolumn) & OHrow & "," & _
        ColumnLetterFromNumber(firstDFCcolumn + 1) & firstDemandRow & ":" & _
        lockString & _
        ColumnLetterFromNumber(lastDFCcolumn) & lastDemandRow & ")"
End Function

Public Sub EmailVendorFile(ByVal vendorFileLocation As String)
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Debug.Print Now & " email vendor file begin"
'   Opens an email window with the vendor file attached
'==============================================================================
    Dim OutMail As Object, signature As String

    On Error Resume Next
    'Get handle to Outlook if already open
    Set OutApp = GetObject(, "Outlook.Application")

    'Create new Outlook object if not open
    If Err.Number = 429 Then
        Set OutApp = CreateObject("Outlook.application")
    End If
    
    Set OutMail = OutApp.CreateItem(0)
    
    With OutMail
        .display
    End With
    
    signature = OutMail.htmlbody
    
    With OutMail
        If email_Actions(counterMRP) = "Save Populated Draft" Then
            .To = vendor_emails(counterMRP)
            .CC = vendor_emailsCC(counterMRP)
            .BCC = ""
            .Subject = vendor_name(counterMRP) & " - " & category(counterMRP) & " Vendor Forecast File"
            .htmlbody = "<BODY style=font-side:11pt;font-family:Calibri>" & Replace(email_Text(counterMRP), Chr(10), "<p>") & "<p>" & signature
            .Attachments.Add vendorFileLocation
            .Save
            .Close 1
        ElseIf email_Actions(counterMRP) = "Send Directly to Supplier" Then
            .To = vendor_emails(counterMRP)
            .CC = vendor_emailsCC(counterMRP)
            .BCC = ""
            .Subject = vendor_name(counterMRP) & " - " & category(counterMRP) & " Vendor Forecast File"
            .htmlbody = "<BODY style=font-side:11pt;font-family:Calibri>" & Replace(email_Text(counterMRP), Chr(10), "<p>") & "<p>" & signature
            .Attachments.Add vendorFileLocation
            .Send
        ElseIf email_Actions(counterMRP) = "Save Blank Draft" Then
            .To = ""
            .CC = ""
            .BCC = ""
            .Subject = vendor_name(counterMRP) & " - " & category(counterMRP) & " Vendor Forecast File"
            .htmlbody = "<br>" & signature
            .Attachments.Add vendorFileLocation
            .Save
            .Close 1
        End If
    
    End With

    Set OutMail = Nothing
    Debug.Print Now & " email vendor file end"
    
End Sub

Public Sub ImportVendorFile()
'opens and begins the import procedure
    ImportVendorData.Show
End Sub

Sub sss()
'Call ReportSupport.ExportForVendor(False, False)

'Call ReportSupport.ToggleHiddenData(ActiveWorkbook.ActiveSheet, dfc, False)
    
End Sub

Sub testingoutlook()

   Application.DisplayAlerts = False
'   Opens an email window with the vendor file attached
'==============================================================================
    Dim OutMail As Object, signature As String

    On Error Resume Next
    'Get handle to Outlook if already open
    Set OutApp = GetObject(, "Outlook.Application")

    'Create new Outlook object if not open
    If Err.Number = 429 Then
        Set OutApp = CreateObject("Outlook.application")
    End If
    
    Set OutMail = OutApp.CreateItem(0)
    
    With OutMail
        .display
    End With
    
    signature = OutMail.htmlbody
    
    With OutMail
        .To = "Sean.Miller2@kraftheinz.com"
        .CC = ""
        .BCC = ""
        .Subject = "test"
        .htmlbody = "test <br> <br>" & signature
        .Save
        .Close
    End With

    Set OutMail = Nothing
    
    Application.DisplayAlerts = True

End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Option Explicit
'
'Sub t()
''Splash.show
'End Sub
'
'Sub d()
'Unload Splash
'End Sub

'Private Sub Workbook_Open()
'    ''Splash.show
'    If ActiveWorkbook.Path = "https://collaboration.kraftfoods.com/sites/INTEGRATEDSOLUTIONCENTER/Materials Management/" & ActiveWorkbook.Name Then
'        MsgBox ("Please save this file to your computer before using")
'        Exit Sub
'
'    End If
'End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{A50BE9FC-0506-46F2-9BBA-2B828DF84892}{F6BAF913-43BF-45E2-BD50-709A37635536}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{AD3B67C1-9B14-4B13-9265-F0A9BDB85A25}{37656994-A338-4071-B682-99213E3605F1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "WOWChange"
Attribute VB_Base = "0{7F611F7F-0917-4051-8F42-0C04000E1923}{0B820644-F046-4826-99D8-6C07007FA9F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
Unload Me
End
End Sub

Private Sub ToggleButton1_Click()

End Sub

Private Sub UserForm_Initialize()




End Sub
Attribute VB_Name = "aaa_app_mgt"
Sub Unwind()
Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False
'
thisbook = ActiveSheet.Name
'
' Show all tabs and headings
    For Each ws In ActiveWorkbook.Sheets
        ws.Activate
        ActiveWindow.DisplayHeadings = True
        ActiveWindow.DisplayWorkbookTabs = True
    Next ws
    '
    Sheets(thisbook).Select
    '
End Sub

Sub SetupForUsers()
Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False
    '
    Sheets("BIN").Range("E2:E500").ClearContents
    Sheets("BIN").Range("B2").Value = 1
    Call Open_Menu_Color_Selections
    '
' Show all tabs and headings
    For Each ws In ActiveWorkbook.Sheets
        ws.Activate
        ActiveWindow.DisplayHeadings = False
        ActiveWindow.DisplayWorkbookTabs = False
    Next ws
    '
    Sheets("DATA").Select
    Cells.Clear
    '
    Sheets("DATA").Select
    Cells.Clear
    '
    Sheets("FINAL_Master").Select
    Cells.Copy
    Sheets("FINAL").Select
    Range("A1").Select
    ActiveSheet.Paste
    'Range("A1").Select
    'Sheets("FINAL_MASTER").Select
    'Range("A1").Select
    Application.CutCopyMode = False
    '
    Sheets("WORKING").Select
    '
    Sheets("OPEN").Select
    '
    Range("A1").Select
    '
End Sub

Sub Open_Menu_Color_Selections()
Application.EnableCancelKey = xlDisabled
    '
    If Sheets("BIN").Range("B2").Value = 1 Then        '
        Sheets("OPEN").Range("J12:Z12").Interior.ColorIndex = 46
        Sheets("OPEN").Range("J14:Z14").Interior.Color = 12632256
        '
    ElseIf Sheets("BIN").Range("B2").Value = 2 Then
        '
        Sheets("OPEN").Range("J12:Z12").Interior.Color = 12632256
        Sheets("OPEN").Range("J14:Z14").Interior.ColorIndex = 46
        '
    End If
    '
End Sub

Sub Proceed_From_Open()
Application.EnableCancelKey = xlDisabled
    '
    Sync_Name = ActiveWorkbook.Name
    '
    If Sheets("BIN").Range("B2").Value = 1 Then
        '
        Sheets("WORKING").Select
        frmOpen.Show
        '
    ElseIf Sheets("BIN").Range("B2").Value = 2 Then
        '
        MsgBox "Coming Soon"
        '
    End If
    '
End Sub



Attribute VB_Name = "additionaFunction"
Function FileLocked(strFileName As String) As Boolean
   On Error Resume Next
   ' If the file is already opened by another process,
   ' and the specified type of access is not allowed,
   ' the Open operation fails and an error occurs.
   Open strFileName For Binary Access Read Write Lock Read Write As #1
   Close #1
   ' If an error occurs, the document is currently open.
   If Err.Number <> 0 Then
      ' Display the error number and description.
      MsgBox "Error #" & Str(Err.Number) & " - " & Err.Description
      FileLocked = True
      Err.Clear
   End If
End Function

Attribute VB_Name = "appManagement"
Option Explicit

Public Sub Unwind()

    Application.EnableCancelKey = xlDisabled
    Application.ScreenUpdating = False

    Dim wb As Workbook
    Dim ws As Worksheet
'~Set the display headings and workbook tabs to false when the code is complete
    For Each wb In Application.Workbooks
        If wb.Name = "PERSONAL.XLSB" Then
            'Do nothing
        ElseIf wb.Name = Workbooks(HQMMToolkit).Name Then
            For Each ws In wb.Worksheets
                ws.Activate
                ActiveWindow.DisplayHeadings = True
                ActiveWindow.DisplayWorkbookTabs = True
            Next ws
        Else
            wb.Saved = True
            wb.Close
        End If
    Next wb
    
    'activate the "Main" worksheet
    'Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets(HOME_WORKSHEET_NAME).Activate
    HQMMToolkit.HomePage.Activate
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "downloadMRPdata"
Global tester As String
'Global findMRPforecast As String
Global findMRPforecast() As String
Global FileName() As String
Global fileLocation As String
Global numFiles As Integer
Global counterMRP As Integer
Global vendor_name() As String
Global category() As String
Global vendor_emails() As String, vendor_emailsCC() As String, email_Text() As String, email_Actions() As String
Global runMRPYN() As String


Function WriteToClipBoard(vValue As Variant)

   Dim DataObj As Object
 
   '*** Using Late Binding to MSForms.DataObject
 
  Set DataObj = CreateObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
  
   With DataObj
       .SetText vValue
       .PutInClipboard
   End With
   
End Function   'WriteToClipBoard


Sub checkifPOconfirmed()
Application.ScreenUpdating = False

If ActiveCell.Value = "" Then
Else
    Set SapGuiAuto = GetObject("SAPGUI")
    Set SAPApp = SapGuiAuto.GetScriptingEngine
    Set SAPCon = SAPApp.Children(0)
    Set session = SAPCon.Children(0)
    session.findById("wnd[0]").iconify
    session.findById("wnd[0]").sendVKey 0
    session.StartTransaction "ME2A"
    
    On Error GoTo notThere
        'scripting
    session.findById("wnd[0]/usr/ctxtEN_EBELN-LOW").Text = ActiveCell.Value
    session.findById("wnd[0]/usr/ctxtS_EBTYP").Text = "AB"
    session.findById("wnd[0]/usr/ctxtS_EBTYP").caretPosition = 2
    session.findById("wnd[0]/tbar[1]/btn[8]").press
    
    
    session.findById("wnd[0]/usr/cntlGRID1/shellcont/shell").currentCellColumn = "EKET_DATUM"
    
    MsgBox "Confirmed"
    session.findById("wnd[0]/tbar[0]/btn[3]").press
    Application.ScreenUpdating = True
    Exit Sub
    
notThere:
    MsgBox "No"
    session.findById("wnd[0]/tbar[0]/btn[3]").press
    Application.ScreenUpdating = True
End If
End Sub

Sub MD04()

If ActiveCell.Value = "" Then
Else
    Set SapGuiAuto = GetObject("SAPGUI")
    Set SAPApp = SapGuiAuto.GetScriptingEngine
    Set SAPCon = SAPApp.Children(0)
    Set session = SAPCon.Children(0)
    session.findById("wnd[0]").iconify
    session.findById("wnd[0]").sendVKey 0
    session.StartTransaction "MD04"
    
    On Error GoTo notThere
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-MATNR").Text = ActiveCell.Value
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-WERKS").Text = InputBox("Enter Plant Code")
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-WERKS").SetFocus
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-WERKS").caretPosition = 4
    session.findById("wnd[0]").sendVKey 0
    
    Exit Sub
    
notThere:
    MsgBox "Not a valid material number or material not defined in plant"
    session.findById("wnd[0]/tbar[0]/btn[3]").press
    Application.ScreenUpdating = True
End If
End Sub

Sub CheckRelatedSKUs()

If ActiveCell.Value = "" Then
Else
    Set SapGuiAuto = GetObject("SAPGUI")
    Set SAPApp = SapGuiAuto.GetScriptingEngine
    Set SAPCon = SAPApp.Children(0)
    Set session = SAPCon.Children(0)
    session.findById("wnd[0]").sendVKey 0
    session.StartTransaction "MD04"
    session.findById("wnd[0]").maximize
    
    On Error GoTo notThere
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-MATNR").Text = ActiveCell.Value
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-WERKS").Text = InputBox("Enter Plant Code")
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-WERKS").SetFocus
    session.findById("wnd[0]/usr/tabsTAB300/tabpF01/ssubINCLUDE300:SAPMM61R:0301/ctxtRM61R-WERKS").caretPosition = 4
    session.findById("wnd[0]").sendVKey 0
    
    Exit Sub
    
notThere:
    MsgBox "Not a valid material number or material not defined in plant"
    session.findById("wnd[0]/tbar[0]/btn[3]").press
    Application.ScreenUpdating = True
End If
End Sub


Public Sub NavigateToURL(ByVal argURL As String)

  Const READYSTATE_COMPLETE As Integer = 4
  
  Dim i As Integer

  Dim objIE As Object
  
  Set objIE = CreateObject("InternetExplorer.Application")

  With objIE
    .Visible = False
    .Silent = True
    .Navigate argURL
  End With
  
'For i = 1 To ie.document.all.Length     ' step through all the web tags
'
'        If ie.document.all.Item(i).innertext = "Hindi" Then
'            ie.document.all.Item(i).Click   ' if the web tag has the text "Hindi" then click on it
'
'While ie.Busy   ' wait for webpage to finish loading
'    DoEvents
'Wend
'Do Until ie.readystate = READYSTATE_COMPLETE  ' wait for everything to settle down
'    DoEvents
'    Loop
'End If
        
  objIE.Quit
  Set objIE = Nothing
  
End Sub




Sub openSAPECC()

Call NavigateToURL("https://catalystportal.mykft.net/irj/portal")
'Shell ("C:\Users\" & Environ("Username") & "\AppData\Local\Google\Chrome\Application\Chrome.exe -url https://catalystportal.mykft.net/irj/portal")
'ActiveWorkbook.FollowHyperlink Address:="https://catalystportal.mykft.net/irj/portal"


'    'Dim HTMLdoc As HTMLDocument
'    Dim sh
'    Dim eachIE
'    Dim ie As InternetExplorerMedium
'    Set ie = New InternetExplorerMedium
'
'    ie.Visible = True
'    ie.Navigate "https://catalystportal.mykft.net/irj/portal"
'
'Do
'    If ie.ReadyState = READYSTATE_COMPLETE Then
'        If ie.Document.ReadyState = "complete" Then Exit Do
'    End If
'    Application.Wait DateAdd("s", 1, Now)
'Loop
'
'Do
'    Set sh = New Shell32.Shell
'    For Each eachIE In sh.Windows
'        If InStr(1, eachIE.LocationURL, "https://catalystportal.mykft.net/irj/portal") Then
'            Set ie = eachIE
'            Exit Do
'        End If
'    Next eachIE
'Loop
'Set eachIE = Nothing
'Set sh = Nothing
'
'Do
'    If ie.ReadyState = READYSTATE_COMPLETE Then
'        If ie.Document.ReadyState = "complete" Then Exit Do
'    End If
'    Application.Wait DateAdd("s", 1, Now)
'Loop
'
'With ie
'    Set HTMLdoc = .Document
'End With
'    Set ecc = HTMLdoc.getElementsByName("ECC")(0)
'    'Set ecc = HTMLdoc.getElementsByClassName("urTreNl1 ")(0)
'    ecc.Click
'
''ecc.Click
''    For Each l In ie.Document.getElementsByTagName("a")
''        If l.className = "urTreExpNc" Then
''        l.Click
''        Exit For
''        End If
''    Next

End Sub

Sub pullMRP()
Application.ScreenUpdating = False
Application.DisplayAlerts = False

SelectedTask = SingleFile
counterMRP = 0

Dim ws As Worksheet, targetWS As Worksheet
Dim i As Integer, j As Integer, k As Integer
Dim wb As Workbook
Dim numCommas As Integer, mrpCount As Integer, numPlants As Integer, plantCount As Integer, nf2 As Integer
Dim numTimethrough As Integer
Dim inclStandCost As Boolean, debugTime As Date
Dim tempCount As Integer, mrpCountforCopy As Integer

Dim plants() As String, vendor_number() As String, MRP_Controllers() As String
Dim reportSelection() As String, reportInformation() As String, timeBuckets() As String
Dim weeksInDays() As Integer, weeks() As Integer, fourWeekPeriods() As Integer, toPeriod() As Integer
Dim keepSafetyStock() As String, mrpExclusions() As String, tempPlantVer() As String

With HQMMToolkit.MRPVendor
    .Activate
    If .Range("B3").Value = "" Then
        MsgBox "You need to add your information to the MRP Pull table. Please try again!"
    ElseIf .Range("B4").Value = "" Then
        numFiles = 0 'Since not using option base 1, this is actually 1
    ElseIf .Range("B5").Value = "" Then
        numFiles = 1 'Since not using option base 1, this is actually 2
    Else
        numFiles = .Range("A3", Range("A3").End(xlDown)).count - 1
        
    End If
    
    If .Range("H1").Value = "INCLUDE Standard Cost" Then
        inclStandCost = True
    Else
        inclStandCost = False
    End If
    
    fileLocation = "\\KHTULFNP08CP01.mykft.net\appsense_home\" & Environ("username") & ".MYKFT\" & .Range("fileSavLocation").Value
End With

    If Len(Dir("\\KHTULFNP08CP01.mykft.net\appsense_home\" & Environ("username") & ".MYKFT\" & "\My Documents\MRP Pull Tool", vbDirectory)) = 0 Then
        MkDir "\\KHTULFNP08CP01.mykft.net\appsense_home\" & Environ("username") & ".MYKFT\" & "\My Documents\MRP Pull Tool"
               
    Else
    End If
    
    If Len(Dir(fileLocation, vbDirectory)) = 0 Then
        MkDir fileLocation
    Else
    End If

ReDim plants(numFiles), FileName(numFiles), vendor_number(numFiles), MRP_Controllers(numFiles)
ReDim reportSelection(numFiles), reportInformation(numFiles), timeBuckets(numFiles)
ReDim weeksInDays(numFiles), weeks(numFiles), fourWeekPeriods(numFiles), toPeriod(numFiles)
ReDim keepSafetyStock(numFiles), findMRPforecast(numFiles)
ReDim vendor_name(numFiles), category(numFiles), vendor_emails(numFiles), vendor_emailsCC(numFiles), email_Text(numFiles)
ReDim email_Actions(numFiles), mrpExclusions(numFiles), runMRPYN(numFiles)

With HQMMToolkit.MRPVendor
    For i = 0 To numFiles
        runMRPYN(i) = .Range("A3").Offset(i).Value
        plants(i) = .Range("B3").Offset(i).Value
        vendor_number(i) = .Range("C3").Offset(i).Value
        vendor_name(i) = .Range("D3").Offset(i).Value
        MRP_Controllers(i) = .Range("E3").Offset(i).Value
        mrpExclusions(i) = .Range("F3").Offset(i).Value
        reportSelection(i) = .Range("G3").Offset(i).Value
        reportInformation(i) = .Range("H3").Offset(i).Value
        timeBuckets(i) = .Range("I3").Offset(i).Value
        weeksInDays(i) = .Range("J3").Offset(i).Value
        weeks(i) = .Range("K3").Offset(i).Value
        fourWeekPeriods(i) = .Range("L3").Offset(i).Value
        toPeriod(i) = .Range("M3").Offset(i).Value
        category(i) = .Range("N3").Offset(i).Value
        keepSafetyStock(i) = .Range("O3").Offset(i).Value
        FileName(i) = .Range("P3").Offset(i).Value
        email_Actions(i) = .Range("Q3").Offset(i).Value
        vendor_emails(i) = .Range("R3").Offset(i).Value
        vendor_emailsCC(i) = .Range("S3").Offset(i).Value
        email_Text(i) = .Range("T3").Offset(i).Value
    Next i
End With

For i = 0 To numFiles

vendor_name(i) = Trim(Replace(vendor_name(i), "/", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), "\", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), "?", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), "*", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), """", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), ":", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), "<", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), ">", " "))
vendor_name(i) = Trim(Replace(vendor_name(i), "|", " "))

category(i) = Trim(Replace(category(i), "/", " "))
category(i) = Trim(Replace(category(i), "\", " "))
category(i) = Trim(Replace(category(i), "?", " "))
category(i) = Trim(Replace(category(i), "*", " "))
category(i) = Trim(Replace(category(i), """", " "))
category(i) = Trim(Replace(category(i), ":", " "))
category(i) = Trim(Replace(category(i), "<", " "))
category(i) = Trim(Replace(category(i), ">", " "))
category(i) = Trim(Replace(category(i), "|", " "))

plants(i) = Trim(Replace(plants(i), "/", " "))
plants(i) = Trim(Replace(plants(i), "\", " "))
plants(i) = Trim(Replace(plants(i), "?", " "))
plants(i) = Trim(Replace(plants(i), "*", " "))
plants(i) = Trim(Replace(plants(i), """", " "))
plants(i) = Trim(Replace(plants(i), ":", " "))
plants(i) = Trim(Replace(plants(i), "<", " "))
plants(i) = Trim(Replace(plants(i), ">", " "))
plants(i) = Trim(Replace(plants(i), "|", " "))

MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), "/", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), "\", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), "?", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), "*", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), """", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), ":", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), "<", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), ">", " "))
MRP_Controllers(i) = Trim(Replace(MRP_Controllers(i), "|", " "))

mrpExclusions(i) = Trim(Replace(mrpExclusions(i), "/", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), "\", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), "?", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), "*", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), """", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), ":", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), "<", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), ">", " "))
mrpExclusions(i) = Trim(Replace(mrpExclusions(i), "|", " "))

vendor_number(i) = Trim(Replace(vendor_number(i), "/", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), "\", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), "?", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), "*", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), """", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), ":", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), "<", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), ">", " "))
vendor_number(i) = Trim(Replace(vendor_number(i), "|", " "))

vendor_emails(i) = Trim(Replace(vendor_emails(i), ".com,", ".com;"))
vendor_emailsCC(i) = Trim(Replace(vendor_emailsCC(i), ".com,", ".com;"))
vendor_emails(i) = Trim(Replace(vendor_emails(i), ".net,", ".net;"))
vendor_emailsCC(i) = Trim(Replace(vendor_emailsCC(i), ".net,", ".net;"))
vendor_emails(i) = Trim(Replace(vendor_emails(i), ".org,", ".org;"))
vendor_emailsCC(i) = Trim(Replace(vendor_emailsCC(i), ".org,", ".org;"))
Next i

    numTimethrough = 0
    
    Do
        On Error Resume Next 'Looping through error if SAP isn't open
            Set SapGuiAuto = GetObject("SAPGUI")
            Set SAPApp = SapGuiAuto.GetScriptingEngine
            Set SAPCon = SAPApp.Children(0)
            Set session = SAPCon.Children(0)
            'session.findById("wnd[0]").maximize
            session.findById("wnd[0]").iconify
            session.findById("wnd[0]").sendVKey 0
            
        If Err.Number <> 0 And numTimethrough = 0 Then
        
            Dim Ans  As VbMsgBoxResult
            
            Ans = MsgBox("You must open SAP ECC to complete. The portal will now open and excel will wait until a new instance of SAP has been opened. Do you want to proceed?", vbOKCancel, "SAP ECC MUST BE OPEN")
            If Ans = vbOK Then
                Call NavigateToURL("https://catalystportal.mykft.net/irj/portal")
                numTimethrough = numTimethrough + 1
            ElseIf Ans = vbCancel Then
                Exit Sub
            End If
        Else
        End If
    Loop Until (Err.Number = 0)
    
    tempCount = 0
        'scripting
    For i = 0 To numFiles
        If runMRPYN(i) = "No" Then GoTo nextMRP
        
        If tempCount = 0 Then
        Else
            Set session = SAPCon.Children(0)
        End If
        session.StartTransaction "YAGGRDEMAND"
        
        numCommas = 0
        mrpCount = 0
        numPlants = 0
        plantCount = 0
        tempCount = tempCount + 1
        mrpCountforCopy = 0
        
        If tempCount = 1 Then
            debugDate = Now
        Else
        End If
        
        Debug.Print i & " iteration - time taken (seconds) - "; DateDiff("s", debugDate, Now)
        
        debugDate = Now
        
        If reportSelection(i) = "Standard Report" Then
            session.findById("wnd[0]/usr/radR_SREP").Select 'Standard Report Selection
            
            If reportInformation(i) = "Production Demand" Then
                session.findById("wnd[0]/usr/radP_PD").Select 'Production Demand Report Information
            ElseIf reportInformation(i) = "Planned Supply" Then
                session.findById("wnd[0]/usr/radP_CO").Select 'Planned Supply
            ElseIf reportInformation(i) = "Schedule lines/Purchase Orders" Then
                session.findById("wnd[0]/usr/radP_SL").Select 'Schedule lines /Purchase Orders Report Information
            Else
                session.findById("wnd[0]/usr/radP_PD").Select 'Default to production demand
            End If
            
        ElseIf reportSelection(i) = "EM FG" Then
            session.findById("wnd[0]/usr/radR_EMFG").Select 'EM FG Report Selection
            
        ElseIf reportSelection(i) = "Combination" Then
            session.findById("wnd[0]/usr/radR_COMB").Select 'Combination Report Selection
            
        Else 'Default to Standard Report
            session.findById("wnd[0]/usr/radR_SREP").Select 'Default to standard report selection
            
            If reportInformation(i) = "Production Demand" Then
                session.findById("wnd[0]/usr/radP_PD").Select 'Production Demand Report Information
            ElseIf reportInformation(i) = "Planned Supply" Then
                session.findById("wnd[0]/usr/radP_CO").Select 'Planned Supply
            ElseIf reportInformation(i) = "Schedule lines/Purchase Orders" Then
                session.findById("wnd[0]/usr/radP_SL").Select 'Schedule lines /Purchase Orders Report Information
            Else
                session.findById("wnd[0]/usr/radP_PD").Select 'Default to production demand
            End If
            
        End If
        
        session.findById("wnd[0]/usr/ctxtS_LIFNR-LOW").Text = vendor_number(i)
        'session.findById("wnd[0]/usr/ctxtS_MATNR-LOW").Text = "5"
        'session.findById("wnd[0]/usr/ctxtS_MATNR-HIGH").Text = "6"
        'session.findById("wnd[0]/usr/ctxtS_EBELN-LOW").Text = "8"
        'session.findById("wnd[0]/usr/ctxtS_EBELN-HIGH").Text = "9"
        'session.findById("wnd[0]/usr/ctxtS_MTART-LOW").Text = "10"
        'session.findById("wnd[0]/usr/ctxtS_MTART-HIGH").Text = "11"
        'session.findById("wnd[0]/usr/ctxtS_EXTWG-LOW").Text = "12"
        'session.findById("wnd[0]/usr/ctxtS_EXTWG-HIGH").Text = "13"
        
        If timeBuckets(i) = "Weeks" Then
            session.findById("wnd[0]/usr/radR_WEEKS").Select 'Select weeks bucket
            session.findById("wnd[0]/usr/txtP_DAYS").Text = weeksInDays(i)
            session.findById("wnd[0]/usr/txtP_WEEKS").Text = weeks(i)
            session.findById("wnd[0]/usr/txtP_MONTHS").Text = fourWeekPeriods(i)
        ElseIf timeBuckets(i) = "Accounting Months" Then
            session.findById("wnd[0]/usr/radR_ACCPRD").Select 'select accounting months bucket
            session.findById("wnd[0]/usr/txtP_PRD1_L").Text = weeksInDays(i)
            session.findById("wnd[0]/usr/txtP_YR1_L").Text = weeks(i)
            session.findById("wnd[0]/usr/txtP_PRD1_H").Text = fourWeekPeriods(i)
            session.findById("wnd[0]/usr/txtP_YR1_H").Text = toPeriod(i)
        ElseIf timeBuckets(i) = "Calendar Months" Then
            session.findById("wnd[0]/usr/radR_CALPRD").Select 'select calendar months
            session.findById("wnd[0]/usr/txtP_PRD2_L").Text = weeksInDays(i)
            session.findById("wnd[0]/usr/txtP_YR2_L").Text = weeks(i)
            session.findById("wnd[0]/usr/txtP_PRD2_H").Text = fourWeekPeriods(i)
            session.findById("wnd[0]/usr/txtP_YR2_H").Text = toPeriod(i)
        Else
            session.findById("wnd[0]/usr/radR_WEEKS").Select 'default to weeks bucket
            session.findById("wnd[0]/usr/txtP_DAYS").Text = weeksInDays(i)
            session.findById("wnd[0]/usr/txtP_WEEKS").Text = weeks(i)
            session.findById("wnd[0]/usr/txtP_MONTHS").Text = fourWeekPeriods(i)
        End If
        
        If keepSafetyStock(i) = "Yes" Then
            session.findById("wnd[0]/usr/chkP_SFTSTK").Selected = True 'Turn safety stock on
        ElseIf keepSafetyStock(i) = "No" Then
            session.findById("wnd[0]/usr/chkP_SFTSTK").Selected = False 'Turn safety stock off
        Else
            session.findById("wnd[0]/usr/chkP_SFTSTK").Selected = True 'Default to keeping safety stock on
        End If
        
        For j = 0 To Len(plants(i))
            If Mid(plants(i), j + 1, 1) = "," Then
                numPlants = numPlants + 1
            Else
            End If
        Next j
        
        ReDim tempPlantVer(numPlants)
        
        session.findById("wnd[0]/usr/btn%_S_WERKS_%_APP_%-VALU_PUSH").press
        
        HQMMToolkit.MRPControllers.Activate
        With HQMMToolkit.MRPControllers
        
            For j = 0 To numPlants
                
                .Range("H1").Offset(j).Value = "'" & Mid(plants(i), plantCount + 1, 4)
                
                'WriteToClipBoard Mid(plants(i), plantCount + 1, 4)
                tempPlantVer(j) = Mid(plants(i), plantCount + 1, 4)
                
                'session.findById("wnd[1]/tbar[0]/btn[24]").press
                plantCount = plantCount + 6
            Next j
            
            If numPlants = 0 Then
                .Range("H1").Cut
                session.findById("wnd[1]/tbar[0]/btn[24]").press
                .Range("H1").Delete
            ElseIf numPlants = 1 Then
                .Range("H1:H2").Cut
                session.findById("wnd[1]/tbar[0]/btn[24]").press
                .Range("H1:H2").Delete
            Else
                .Range("H1", Range("H1").End(xlDown)).Cut
                session.findById("wnd[1]/tbar[0]/btn[24]").press
                .Range("H1", Range("H1").End(xlDown)).Delete
            End If
            
            session.findById("wnd[1]/tbar[0]/btn[0]").press 'Validate Plants
            session.findById("wnd[1]/tbar[0]/btn[8]").press 'Execute Plants
        
        
        session.findById("wnd[0]/usr/btn%_S_DISPO_%_APP_%-VALU_PUSH").press
        For j = 0 To Len(MRP_Controllers(i))
            If Mid(MRP_Controllers(i), j + 1, 1) = "," Then
                numCommas = numCommas + 1
            Else
            End If
        Next j
        
        Dim lookVal As String, getIt As Boolean
        
        For j = 0 To numCommas
            getIt = False
            
            For k = 0 To numPlants
                lookVal = tempPlantVer(k) & Mid(MRP_Controllers(i), mrpCount + 1, 3)
                
                If Application.WorksheetFunction.CountIf(.Range("MRPLOOKUP"), lookVal) > 0 Then
                    getIt = True
                    Exit For
                Else
                End If
            Next k
            
            If getIt = False Then
            Else
                mrpCountforCopy = mrpCountforCopy + 1
                .Range("I1").Offset(mrpCountforCopy - 1).Value = "'" & Mid(MRP_Controllers(i), mrpCount + 1, 3)
                'WriteToClipBoard Mid(MRP_Controllers(i), mrpCount + 1, 3)
                'session.findById("wnd[1]/tbar[0]/btn[24]").press
            End If
            mrpCount = mrpCount + 5
        Next j
        
        If mrpCountforCopy = 1 Then
            .Range("I1").Cut
            session.findById("wnd[1]/tbar[0]/btn[24]").press
            .Range("I1").Delete
        ElseIf mrpCountforCopy = 2 Then
            .Range("I1:I2").Cut
            session.findById("wnd[1]/tbar[0]/btn[24]").press
            .Range("I1:I2").Delete
        Else
            .Range("I1", Range("I1").End(xlDown)).Cut
            session.findById("wnd[1]/tbar[0]/btn[24]").press
            .Range("I1", Range("I1").End(xlDown)).Delete
        End If
        
        session.findById("wnd[1]/tbar[0]/btn[0]").press 'Validate MRP Controllers
    
        If mrpExclusions(i) <> "" Then
            mrpCountforCopy = 0
            mrpCount = 0
            session.findById("wnd[1]/usr/tabsTAB_STRIP/tabpNOSV").Select
            Application.Wait Now + #12:00:01 AM#
            numCommas = 0
            For j = 0 To Len(mrpExclusions(i))
                If Mid(mrpExclusions(i), j + 1, 1) = "," Then
                    numCommas = numCommas + 1
                Else
                End If
            Next j
            
            For j = 0 To numCommas
                getIt = False
                
                For k = 0 To numPlants
                    lookVal = tempPlantVer(k) & Mid(mrpExclusions(i), mrpCount + 1, 3)
                    
                    If Application.WorksheetFunction.CountIf(MRPControllers.Range("MRPLOOKUP"), lookVal) > 0 Then
                        getIt = True
                        Exit For
                    Else
                    End If
                Next k
                
                If getIt = False Then
                Else
                    mrpCountforCopy = mrpCountforCopy + 1
                    If Left(Mid(mrpExclusions(i), mrpCount + 1, 3), 1) = "0" Then
                        .Range("J1").Offset(mrpCountforCopy - 1).Value = "'" & Mid(mrpExclusions(i), mrpCount + 1, 3)
                    Else
                        .Range("J1").Offset(mrpCountforCopy - 1).Value = Mid(mrpExclusions(i), mrpCount + 1, 3)
                    End If
                    'WriteToClipBoard Mid(mrpExclusions(i), mrpCount + 1, 3)
                    'session.findById("wnd[1]/tbar[0]/btn[24]").press
                End If
                    mrpCount = mrpCount + 5
            Next j
            
            If mrpCountforCopy = 1 Then
                .Range("J1").Cut
                session.findById("wnd[1]/tbar[0]/btn[24]").press
                .Range("J1").Delete
            ElseIf mrpCountforCopy = 2 Then
                .Range("J1:I2").Cut
                session.findById("wnd[1]/tbar[0]/btn[24]").press
                .Range("J1:I2").Delete
            Else
                .Range("J1", Range("J1").End(xlDown)).Cut
                session.findById("wnd[1]/tbar[0]/btn[24]").press
                .Range("J1", Range("J1").End(xlDown)).Delete
            End If
            
            session.findById("wnd[1]/tbar[0]/btn[0]").press 'Validate MRP Controllers
            
        Else
        End If
        
        session.findById("wnd[1]/tbar[0]/btn[8]").press 'Execute MRP Controllers
        
        End With
        
        'Enter Standard Cost layout
        If inclStandCost = True Then
            session.findById("wnd[0]/usr/ctxtP_LAYOUT").Text = "/SYNC STD$"
        Else
        End If
        
        
        session.findById("wnd[0]/tbar[1]/btn[8]").press 'Execute YAGG
        
        
        session.findById("wnd[0]/usr/cntlCONT/shellcont/shell").contextMenu
        session.findById("wnd[0]/usr/cntlCONT/shellcont/shell").selectContextMenuItem "&XXL"
        
        If tempCount = 1 Then
            session.findById("wnd[1]/usr/cmbG_LISTBOX").SetFocus
            session.findById("wnd[1]/usr/cmbG_LISTBOX").Key = "10"
        
            session.findById("wnd[1]/usr/radRB_OTHERS").Select
            session.findById("wnd[1]/usr/chkCB_ALWAYS").Selected = True
        Else
        End If
        
        session.findById("wnd[1]/tbar[0]/btn[0]").press
        
        session.findById("wnd[1]/usr/ctxtDY_PATH").Text = fileLocation
        session.findById("wnd[1]/usr/ctxtDY_FILENAME").Text = FileName(i)
    
        If Len(Dir(fileLocation & "\" & FileName(i), vbNormal)) = 0 Then
            session.findById("wnd[1]").sendVKey 0
        Else
            session.findById("wnd[1]/tbar[0]/btn[11]").press
        End If
            
        session.findById("wnd[0]/tbar[0]/btn[15]").press
        session.findById("wnd[0]/tbar[0]/btn[15]").press
        session.findById("wnd[1]/usr/btnSPOP-OPTION2").press
        
        Set session = Nothing
        'Hopefully this gets rid of error pop-ups
        If tempCount < 5 Then
        ElseIf temcount < 15 Then Application.Wait Now + #12:00:02 AM#
        ElseIf temcount < 20 Then Application.Wait Now + #12:00:03 AM#
        ElseIf temcount < 25 Then Application.Wait Now + #12:00:04 AM#
        Else
            Application.Wait Now + #12:00:05 AM#
        End If
            
        numCommas = 0
        mrpCount = 0
        
        findMRPforecast(i) = fileLocation & "\" & FileName(i)
        
        
nextMRP:
    Next i

MRPControllers.Visible = xlSheetHidden

Call ValidateMRPforecasts

End Sub

Public Sub close_mrps()
On Error Resume Next
Application.ScreenUpdating = False
Application.DisplayAlerts = False


Dim fileLocation As String
Dim ws As Worksheet, targetWS As Worksheet
Dim i As Integer, j As Integer, k As Integer, numFiles As Integer
Dim wb As Workbook
Dim numCommas As Integer, mrpCount As Integer

Dim FileName() As String

With HQMMToolkit.MRPVendor
    .Activate
    If .Range("A3").Value = "" Then
        MsgBox "You need to add your information to the MRP Pull table. Please try again!"
    ElseIf .Range("A4").Value = "" Then
        numFiles = 0 'Since not using option base 1, this is actually 1
    ElseIf .Range("A5").Value = "" Then
        numFiles = 1 'Since not using option base 1, this is actually 2
    Else
        numFiles = .Range("A3", Range("A3").End(xlDown)).count - 1
    End If
    
    fileLocation = "C:\Users\" & Environ("Username") & "\" & .Range("N1").Value
End With
    
ReDim FileName(numFiles)

With ActiveWorkbook.ActiveSheet
    For i = 0 To numFiles
        FileName(i) = .Range("N3").Offset(i).Value
    Next i
End With

    For i = 0 To numFiles
        Workbooks(FileName(i)).Close
    Next i

Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub

Public Sub openecc()
NavigateToURL ("https://catalystportal.mykft.net/irj/portal")
End Sub

Sub resetThis()
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic


End Sub
Attribute VB_Name = "frmAggregation"
Attribute VB_Base = "0{6BF7E18B-F44E-4C52-B719-DFEE9FD11DA0}{2AFBC478-FFAF-48AF-821B-E7BC0BC53F37}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdAggregate_Click()


Dim FileArray() As String
Dim i As Long
Dim j As Long
Dim k As Long
Dim NumberFiles As Long
Dim OpenBid As Workbook
Dim numInputCraft As Long
Dim companyName As String
Dim BU As String
Dim subCategory As String
Dim TypeService As String
Dim Craft() As String
Dim BWage() As Currency
Dim STRates() As Currency
Dim OTRates() As Currency
Dim PTRates() As Currency
Dim PassRates() As Currency
Dim Diem() As String
Dim VarMult(3) As Double
Dim sh As Worksheet
Dim Ret
Dim currentEntries As Long
Dim ticker As Long
Dim OldEntries As Long
Dim RateBook As Workbook
Dim check1 As Boolean
Dim check2 As Boolean
Dim check3 As Boolean
Dim check4 As Boolean
Dim clock As Long
Dim startingPoint As String
Dim firstTimeThrough As Boolean

' Set RateBook = Workbooks.Add

ticker = 0






ReDim FileArray(lbFilesSelected.ListCount)
NumberFiles = lbFilesSelected.ListCount

Application.ScreenUpdating = False
Application.DisplayAlerts = False



For i = 1 To NumberFiles
    FileArray(i - 1) = lbFilesSelected.List(i - 1)
Next i

'Error checking to ensure the correct workbook will be named
For i = 1 To NumberFiles

If i = 1 Then
firstTimeThrough = True
Else
firstTimeThrough = False
End If

ticker = 0

    With Workbooks("Data Aggregation Tool.xlsm").Worksheets("Master Data List")
        .Activate
         If .Range("A2").Value = "" Then
            OldEntries = 0
         ElseIf .Range("A3").Value = "" Then
            OldEntries = 1
         Else
            If firstTimeThrough = True Then
            Else
            OldEntries = .Range("A2", Range("A2").End(xlDown)).count
            'MsgBox OldEntries
            End If
        End If
    End With
    
    'This is necessary because, if one of the bid files is already open, it will cause the macro to crash. This eliminates that risk
    Ret = IsWorkBookOpen(FileArray(i - 1))
    If Ret = False Then
        Set OpenBid = Workbooks.Open(FileArray(i - 1))
    ElseIf Ret = True Then
       Dim wb As Workbook
       Dim wbs As Workbooks
       Set wbs = Application.Workbooks
       For Each wb In wbs
         If wb.Name = Right(FileArray(i - 1), Len(wb.Name)) Then
         Set OpenBid = wb
         Exit For
         Else
         End If
       Next wb
    Else
    End If


    For Each sh In OpenBid.Worksheets
                sh.Activate
                With sh
                    'This is to check where the data begins
                    If sh.Name <> "Instructions" Then
                        
                        clock = 0
                        For j = 1 To 100
                            If .Range("A1").Offset(j - 1).Value <> "Internal Use Only" Then
                                clock = clock + 1
                            Else
                                check1 = True
                                Exit For
                            End If
                        Next j
                        
                    
                        'If the term "Internal Use Only" cannot be found on the sheet, then it is not a sheet that should be imported
                        If clock >= 90 Then
                            Exit For
                        Else
                            clock = clock + 3
                        End If
                        
                        If check1 = True Then
                                .Range("C" & clock & ":M106").Select
                                Selection.Copy
                                
                                With Workbooks("Data Aggregation Tool.xlsm").Worksheets("Master Data List")
                                    .Activate
                                    .Range("E1:O1").Offset(OldEntries + 1).Select
                                    .Paste
                                End With
                                

                            '.Range("C1:M1", Range("C1:M1").Offset(clock).End(xlDown)).Select
                            'Selection.Copy
                            
                        Else
                        End If
                        
                    
                        
                            
                    
                    
                        
                        
'                        'If the very first three base wages are 0, then the sheet should not be imported because the company did not fill it out
'                        If .Range("E1").Offset(clock).Value = 0 Then
'                            If .Range("E1").Offset(clock + 1).Value = 0 Then
'                                If .Range("E1").Offset(clock + 1).Value = 0 Then
'                                    Next sh
'                                Else
'                                End If
'                            Else
'                            End If
'                        Else
'                        End If
'
'                        'This will check the base wages to see how many are entered
'                        For j = 1 To 100
'                            If .Range("E1").Offset(clock + j - 1).Value <> 0 Then
'                                numInputCraft = numInputCraft + 1
'                            ElseIf .Range("E1").Offset(clock + j - 1).Value = 0 Then
'                                Exit For
'                            Else
'                            End If
'                        Next j
'
'                    End If
'
'                    'This is to look to see if the titles are entered

'                    ReDim Craft(numInputCraft)
'                    ReDim BWage(numInputCraft)
'                   ReDim STRates(numInputCraft)
'                    ReDim OTRates(numInputCraft)
'                    ReDim PTRates(numInputCraft)
'                    ReDim PassRates(numInputCraft)
'                    ReDim Diem(numInputCraft)
'
'                    For j = 1 To numInputCraft
'                        Craft(j - 1) = .Range("C54").Offset(j - 1).Value
'                        BWage(j - 1) = .Range("E54").Offset(j - 1).Value
'                        STRates(j - 1) = .Range("F54").Offset(j - 1).Value
'                        OTRates(j - 1) = .Range("G54").Offset(j - 1).Value
'                        PTRates(j - 1) = .Range("H54").Offset(j - 1).Value
'                        PassRates(j - 1) = .Range("I54").Offset(j - 1).Value
'                        Diem(j - 1) = .Range("J54").Offset(j - 1).Value
'                    Next j
'
'                    VarMult(0) = .Range("F52").Value
'                    VarMult(1) = .Range("G52").Value
'                    VarMult(2) = .Range("H52").Value
'
'
'
'                      .Range("A2:G48").Copy
'                    If RateBook.Worksheets(1).Range("A1").Value = "" Then
'                        RateBook.Worksheets(1).Range("A1").PasteSpecial (xlPasteAll)
'                    ElseIf RateBook.Worksheets(2).Range("A1").Value = "" Then
'                        RateBook.Worksheets(2).Range("A1").PasteSpecial (xlPasteAll)
'                    ElseIf RateBook.Worksheets(3).Range("A1").Value = "" Then
'                        RateBook.Worksheets(3).Range("A1").PasteSpecial (xlPasteAll)
'                    Else
'                        RateBook.Sheets.Add(After:=RateBook.Sheets(RateBook.Sheets.count)).Name = sh.Range("D8").Value & " Supervision"
'                        RateBook.ActiveSheet.Range("A1").PasteSpecial (xlPasteAll)
'                    End If
'
'                    With RateBook.ActiveSheet
'                        .Columns.AutoFit
'                        .Columns("B").ColumnWidth = 37.71
'                        .Name = sh.Range("D8").Value & " Supervision"
'                    End With
'
'                End With
'
'                TypeService = "Supervision"
'
'                With Workbooks("Data Aggregation Tool.xlsm").Worksheets("Master Data List")
'                    .Activate
'                    If .Range("E2").Value = "" Then
'                        currentEntries = 0
'                    ElseIf .Range("E3").Value = "" Then
'                        currentEntries = 1
'                    Else
'                        currentEntries = .Range("E2", Range("E2").End(xlDown)).count
'                    End If
'
'                    For j = 1 To numInputCraft
'                        ticker = ticker + 1
'                        .Range("E1").Offset(currentEntries + j).Value = Craft(j - 1)
'                        .Range("F1").Offset(currentEntries + j).Value = BWage(j - 1)
'                        .Range("G1").Offset(currentEntries + j).Value = STRates(j - 1)
'                        .Range("H1").Offset(currentEntries + j).Value = OTRates(j - 1)
'                        .Range("I1").Offset(currentEntries + j).Value = PTRates(j - 1)
'                        .Range("J1").Offset(currentEntries + j).Value = PassRates(j - 1)
'                        .Range("K1").Offset(currentEntries + j).Value = Diem(j - 1)
'                        .Range("L1").Offset(currentEntries + j).Value = VarMult(0)
'                        .Range("M1").Offset(currentEntries + j).Value = VarMult(1)
'                        .Range("N1").Offset(currentEntries + j).Value = VarMult(2)
'                        .Range("D1").Offset(currentEntries + j).Value = TypeService
'                    Next j
'
'                End With
'
'            ElseIf sh.Name = "Craft" Then
'                sh.Activate
'
'                With sh
'                    numInputCraft = .Range("C54", Range("C54").End(xlDown)).count
'                    ReDim Craft(numInputCraft)
'                    ReDim BWage(numInputCraft)
'                    ReDim STRates(numInputCraft)
'                    ReDim OTRates(numInputCraft)
'                    ReDim PTRates(numInputCraft)
'                    ReDim PassRates(numInputCraft)
'                    ReDim Diem(numInputCraft)
'
'                    For j = 1 To numInputCraft
'                        Craft(j - 1) = .Range("C54").Offset(j - 1).Value
'                        BWage(j - 1) = .Range("E54").Offset(j - 1).Value
'                        STRates(j - 1) = .Range("F54").Offset(j - 1).Value
'                        OTRates(j - 1) = .Range("G54").Offset(j - 1).Value
'                        PTRates(j - 1) = .Range("H54").Offset(j - 1).Value
'                        PassRates(j - 1) = .Range("I54").Offset(j - 1).Value
'                        Diem(j - 1) = .Range("E54").Offset(j - 1).Value
'                    Next j
'
'                    VarMult(0) = .Range("F52").Value
'                    VarMult(1) = .Range("G52").Value
'                    VarMult(2) = .Range("H52").Value
'
'                     .Range("A2:G48").Copy
'                    If RateBook.Worksheets(1).Range("A1").Value = "" Then
'                        RateBook.Worksheets(1).Range("A1").PasteSpecial (xlPasteAll)
'                    ElseIf RateBook.Worksheets(2).Range("A1").Value = "" Then
'                        RateBook.Worksheets(2).Range("A1").PasteSpecial (xlPasteAll)
'                    ElseIf RateBook.Worksheets(3).Range("A1").Value = "" Then
'                        RateBook.Worksheets(3).Range("A1").PasteSpecial (xlPasteAll)
'                    Else
'                        RateBook.Sheets.Add(After:=RateBook.Sheets(RateBook.Sheets.count)).Name = sh.Range("D8").Value & " Craft"
'                        RateBook.ActiveSheet.Range("A1").PasteSpecial (xlPasteAll)
'                    End If
'
'                    With RateBook.ActiveSheet
'                        .Columns.AutoFit
'                        .Columns("B").ColumnWidth = 37.71
'                        .Name = sh.Range("D8").Value & " Craft"
'                    End With
'
'                End With
'
'                TypeService = "Craft"
'
'                With Workbooks("Data Aggregation Tool.xlsm").Worksheets("Master Data List")
'                    .Activate
'                    If .Range("E2").Value = "" Then
'                        currentEntries = 0
'                    ElseIf .Range("E3").Value = "" Then
'                        currentEntries = 1
'                    Else
'                        currentEntries = .Range("E2", Range("E2").End(xlDown)).count
'                    End If
'
'                    For j = 1 To numInputCraft
'                        ticker = ticker + 1
'                        .Range("E1").Offset(currentEntries + j).Value = Craft(j - 1)
'                        .Range("F1").Offset(currentEntries + j).Value = BWage(j - 1)
'                        .Range("G1").Offset(currentEntries + j).Value = STRates(j - 1)
'                        .Range("H1").Offset(currentEntries + j).Value = OTRates(j - 1)
'                        .Range("I1").Offset(currentEntries + j).Value = PTRates(j - 1)
'                        .Range("J1").Offset(currentEntries + j).Value = PassRates(j - 1)
'                        .Range("K1").Offset(currentEntries + j).Value = Diem(j - 1)
'                        .Range("L1").Offset(currentEntries + j).Value = VarMult(0)
'                        .Range("M1").Offset(currentEntries + j).Value = VarMult(1)
'                        .Range("N1").Offset(currentEntries + j).Value = VarMult(2)
'                        .Range("D1").Offset(currentEntries + j).Value = TypeService
'                    Next j
'
'                End With
                
                
           ElseIf sh.Name = "Instructions" Then
                With sh
                    companyName = .Range("B13").Value
                    BU = .Range("B26").Value
                    subCategory = .Range("B29").Value
                End With
            Else
            End If
            
            End With
            
          With Workbooks("Data Aggregation Tool.xlsm").Worksheets("Master Data List")
            Dim company(53) As String
            Dim businessUnit(53) As String
            Dim subC(53) As String
            .Activate
            For j = 1 To 53
                company(j - 1) = companyName
                businessUnit(j - 1) = BU
                subC(j - 1) = subCategory
                .Range("A1").Offset(OldEntries + j).Value = companyName
                .Range("B1").Offset(OldEntries + j).Value = BU
                .Range("C1").Offset(OldEntries + j).Value = subCategory
           Next j
           
           For j = 1 To 53
           
           
           
           Next j
         End With
      
      If sh.Name = "Supervision" Or sh.Name = "Craft" Then
            OldEntries = OldEntries + 53
      Else
      End If
            
        Next sh
        

        
OpenBid.Close

Next i

'Call ClearEmptyEntries

Application.DisplayAlerts = True
Application.ScreenUpdating = True

'Dim RBname As String

'RBname = InputBox("Please enter the name of the workbook that holds all the rates for the current bid. Note: SEPARATE FROM THE MASTER LIST")

'RateBook.SaveAs FileName:=RBname



Unload Me
End
End Sub

Private Sub cmdCancel_Click()

    Dim counter As Long
    
    Application.ScreenUpdating = False
    Worksheets("Usage Capture Log").Activate
    
    With Workbooks("Data Aggregation Tool.xlsm").Worksheets("Usage Capture Log")
        If .Range("A2").Value = "" Then
        counter = 1
    ElseIf .Range("A3").Value = "" Then
        counter = 2
    Else
        counter = .Range("A1", Range("A1").End(xlDown)).count
    End If
    
    .Range("A1").Offset(counter - 1, 4).Value = "User cancelled at aggregation screen"
    End With
    
    Worksheets("Data Aggregation Dashboard").Activate
    Application.ScreenUpdating = True
    
    Unload Me
    End
End Sub

Private Sub cmdfilepicker_Click()

Dim fd As FileDialog
Dim myfiles() As String
Dim i As Long
Dim j As Long
Dim count As Long



Set fd = Application.FileDialog(msoFileDialogFilePicker)
    
With fd

    .AllowMultiSelect = True
        
    If .Show Then
        count = count + 1
        ReDim myfiles(.SelectedItems.count)
        
        count = .SelectedItems.count - 1
        
        For i = 0 To count
            myfiles(i) = .SelectedItems(i + 1)
        Next i

    End If
    
End With

With lbFilesSelected
    For i = 0 To count
        .AddItem myfiles(i)
    Next i
End With

End Sub

Private Sub cmdRemove_Click()

Dim removal As String

With lbFilesSelected
    For i = 0 To .ListCount - 1
        If .Selected(i) = True Then
            .RemoveItem (.ListIndex)
        Else
        End If
    Next i
End With


End Sub

Private Sub Image1_Click()

End Sub

Private Sub lblfiles_Click()

End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()

    With Application
        .WindowState = xlMaximized
        Zoom = Int(.width / Me.width * 100)
        width = .width
        Height = .Height
    End With

End Sub
Attribute VB_Name = "recalculateDFC"
Sub RecalculateAllDFC()
    Dim i As Long
    Dim reportRow As Long
    Application.ScreenUpdating = False
    reportRow = Application.WorksheetFunction.CountA(Range("A16:A20000")) + 15
    
    For i = 16 To reportRow
        
        If Cells(i, ATTRIBUTE_COLUMN).Value = "DFC" Then
            'calculate all DFC for that rows
            'Cells(I, STOCK_COLUMN).Select
            Call Report.CalculateDFC(Cells(i - 3, STOCK_COLUMN))
        End If
    Next i
    Cells(13, STOCK_COLUMN).Select
    Application.ScreenUpdating = True
    'MsgBox "All DFC has been recalculated."
End Sub


Attribute VB_Name = "splitInputFile"
Public Sub SplitFile()
    Dim email_rec() As String
    Dim email_recCC() As String
    Dim email_message() As String
    Dim email_act() As String
    Dim venNo() As String
    Dim venName() As String
    Dim vendorParse() As String
    Dim counter As Integer, numCommas As Integer
    Dim numRecs As Integer, i As Integer, j As Integer, k As Integer
    Dim linebreaks As Integer
    Dim signatureParse() As String
    
    
    Dim wbk As Workbook
    Dim strPath As String
    Dim savePath As String
    Dim objDic As Object
    Dim var As Variant
    Dim lng As Long
    Dim objOutlook As Object
    Dim objOutlookMsg As Object
    Dim signature As String
    Dim SplittedVendorFileName As String
    Const SUB_FOLDER As String = "Vendor Files"
    
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    With HQMMToolkit.SPVenFile
        .Activate
        If .Range("A2").Value = "" Then
            MsgBox "No information has been entered in the Split Vendor File spreadsheet. Please do so before resuming."
            Exit Sub
        ElseIf .Range("A3").Value = "" Then
            numRecs = 0
        ElseIf .Range("A4").Value = "" Then
            numRecs = 1
        Else
            numRecs = .Range("A2", Range("A2").End(xlDown)).count - 1
        End If
        
        fileLocation = "C:\Users\" & Environ("Username") & "\" & .Range("I1").Value
    End With
    
    If Len(Dir("C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool", vbDirectory)) = 0 Then
        MkDir "C:\Users\" & Environ("Username") & "\Documents\MRP Pull Tool"
    ElseIf Len(Dir(fileLocation, vbDirectory)) = 0 Then
        MkDir fileLocation
    ElseIf Len(Dir(fileLocation & "\SplitFiles", vbDirectory)) = 0 Then
        MkDir fileLocation & "\SplitFiles"
    End If
    
    fileloction = fileLocation & "\SplitFiles"
    
    ReDim email_rec(numRecs), email_recCC(numRecs), email_message(numRecs), venNo(numRecs), venName(numRecs), email_act(numRecs)
    
    With HQMMToolkit.SPVenFile
        .Activate
        
        For i = 0 To numRecs
            venNo(i) = .Range("A2").Offset(i).Value
            venName(i) = .Range("B2").Offset(i).Value
            email_act(i) = .Range("C2").Offset(i).Value
            email_rec(i) = .Range("D2").Offset(i).Value
            email_recCC(i) = .Range("E2").Offset(i).Value
            email_message(i) = .Range("F2").Offset(i).Value
        Next i
    End With
    
    
    For i = 0 To numRecs
        email_rec(i) = Trim(Replace(email_rec(i), ".com,", ".com;"))
        email_recCC(i) = Trim(Replace(email_recCC(i), ".com,", ".com;"))
        email_rec(i) = Trim(Replace(email_rec(i), ".net,", ".net;"))
        email_recCC(i) = Trim(Replace(email_recCC(i), ".net,", ".net;"))
        email_rec(i) = Trim(Replace(email_rec(i), ".org,", ".org;"))
        email_recCC(i) = Trim(Replace(email_recCC(i), ".org,", ".org;"))
    Next i
    
    savePath = fileLocation
    
    On Error Resume Next
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = "Select the file to be split"
        .Filters.Add "Excel 2007-13", "*.xlsx", 1
        .AllowMultiSelect = False
        .Show
        If .SelectedItems.count Then
            strPath = .SelectedItems(1)
        Else
            MsgBox "Cancelled by user!", vbOKOnly, ""
            Exit Sub
        End If
    End With
    Set wbk = Workbooks.Open(FileName:=strPath)
    Set objDic = CreateObject("Scripting.Dictionary")
    With wbk.Sheets(1)
        .AutoFilterMode = False
        var = .Range("C2:C" & .Cells(.Rows.count, "C").End(xlUp).Row)
    End With
    For lng = LBound(var) To UBound(var)
        If Not IsEmpty(var(lng, 1)) Then
            objDic.Item(var(lng, 1)) = 0
        End If
    Next lng
    var = objDic.Keys
    objDic.RemoveAll
    
    Set objOutlook = GetObject(, "Outlook.Application")
    Err.Clear: On Error GoTo -1: On Error GoTo 0
    If objOutlook Is Nothing Then
        Set objOutlook = CreateObject("Outlook.Application")
    End If
    
    '   Check to see if the user has a vendor reports directory
    '--------------------------------------------------------------------------
    If Len(Dir(fileLocation & "\" & SUB_FOLDER, vbDirectory)) = 0 Then
        MkDir fileLocation & "\" & SUB_FOLDER
    End If
    
    With wbk.Sheets(1)
        For i = 0 To numRecs
            counter = 0
            numCommas = 0
            ReDim vendorParse(numCommas)
            
            For j = 0 To Len(venNo(i))
                If Mid(venNo(i), j + 1, 1) = "," Then
                    numCommas = numCommas + 1
                    ReDim Preserve vendorParse(numCommas)
                    vendorParse(numCommas - 1) = Mid(venNo(i), counter + 1, j - counter)
                    If Mid(venNo(i), j + 2, 1) = " " Then
                        counter = j + 2
                    Else
                        counter = j + 1
                    End If
                Else
                End If
                
                If j = Len(venNo(i)) And numCommas > 0 Then
                    vendorParse(numCommas) = Mid(venNo(i), counter + 1, j - counter)
                Else
                End If
                
            Next j
                
            
                If numCommas = 0 Then
                    vendorParse(0) = venNo(i)
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0)), Operator:=xlFilterValues
                ElseIf numCommas = 1 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1)), Operator:=xlFilterValues
                ElseIf numCommas = 2 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2)), Operator:=xlFilterValues
                ElseIf numCommas = 3 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3)), Operator:=xlFilterValues
                ElseIf numCommas = 4 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4)), Operator:=xlFilterValues
                ElseIf numCommas = 5 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5)), Operator:=xlFilterValues
                ElseIf numCommas = 6 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6)), Operator:=xlFilterValues
                ElseIf numCommas = 7 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7)), Operator:=xlFilterValues
                ElseIf numCommas = 8 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8)), Operator:=xlFilterValues
                ElseIf numCommas = 9 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8), vendorParse(9)), Operator:=xlFilterValues
                ElseIf numCommas = 10 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8), vendorParse(9), vendorParse(10)), Operator:=xlFilterValues
                ElseIf numCommas = 11 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8), vendorParse(9), vendorParse(10), vendorParse(11)), Operator:=xlFilterValues
                ElseIf numCommas = 12 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8), vendorParse(9), vendorParse(10), vendorParse(11), vendorParse(12)), Operator:=xlFilterValues
                ElseIf numCommas = 13 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8), vendorParse(9), vendorParse(10), vendorParse(11), vendorParse(12), vendorParse(13)), Operator:=xlFilterValues
                ElseIf numCommas = 14 Then
                    .UsedRange.AutoFilter Field:=2, Criteria1:=Array( _
                        vendorParse(0), vendorParse(1), vendorParse(2), vendorParse(3), vendorParse(4), vendorParse(5), vendorParse(6), vendorParse(7), vendorParse(8), vendorParse(9), vendorParse(10), vendorParse(11), vendorParse(12), vendorParse(13), vendorParse(14)), Operator:=xlFilterValues
                Else
                    MsgBox "The maximum limit for number of vendors was reached on Row " & numRecs & ". An email will not be created for " & venName(i)
                    GoTo nextiterat
                End If
                
            'If vendor brings up nothing from file then move to next vendor
'            With .AutoFilter.Range
'                Range("A" & .Offset(1, 0).SpecialCells(xlCellTypeVisible)(1).Row).Select
'                If Selection.Value = "" Then
'                    MsgBox Selection.Value
'                    Range("A" & .Offset(2, 0).SpecialCells(xlCellTypeVisible)(1).Row).Select
'                        If Selection.Value = "" Then
'                            MsgBox Selection.Value
'                            Range("A" & .Offset(3, 0).SpecialCells(xlCellTypeVisible)(1).Row).Select
'                                If Selection.Value = "" Then
'                                    MsgBox Selection.Value
'                                    Exit Sub
'                                    'GoTo nextiterat
'                                Else
'                                End If
'                        Else
'                        End If
'                Else
'                End If
'            End With

            VendorName = venName(i)
            'MsgBox "original vendor name: " & VendorName
            'make vendor name clean from / \ ? * " : < > |
            VendorName = Trim(Replace(VendorName, "/", " "))
            VendorName = Trim(Replace(VendorName, "\", " "))
            VendorName = Trim(Replace(VendorName, "?", " "))
            VendorName = Trim(Replace(VendorName, "*", " "))
            VendorName = Trim(Replace(VendorName, """", " "))
            VendorName = Trim(Replace(VendorName, ":", " "))
            VendorName = Trim(Replace(VendorName, "<", " "))
            VendorName = Trim(Replace(VendorName, ">", " "))
            VendorName = Trim(Replace(VendorName, "|", " "))
            
            
            'MsgBox VendorName
           'define vendor file name and saved path
            SplittedVendorFileName = fileLocation & "\" & SUB_FOLDER & "\" & VendorName & " " & Replace(Format(Now(), "mm-dd-yyyy hh:mm"), ":", "_") & ".xlsx"
            
                
            'MsgBox wbk.Sheets(1).UsedRange.Columns("B").Cells(1).Offset(2).Value
            
            With Workbooks.Add(xlWorksheet)
                wbk.Sheets(1).UsedRange.Copy .Sheets(1).Cells(1)
                .Sheets(1).UsedRange.Sort Key1:=.Sheets(1).Cells(2, 1), Order1:=xlAscending, Header:=xlYes
                ActiveWorkbook.Sheets(1).Columns("A:" & ColumnLetterFromNumber(80)).AutoFit
                
                
                Range("B2").Select
                If Selection.Value = "" Then
                    ActiveWorkbook.Close 0
                    GoTo nextiterat
                Else
                End If
                
                'freeze top row
                Range("A2").Select
                With ActiveWindow
                    .SplitColumn = 0
                    .SplitRow = 1
                End With
                ActiveWindow.FreezePanes = True
                
                ActiveWorkbook.SaveAs SplittedVendorFileName
                strPath = SplittedVendorFileName '.FullName
                .Close 0
                
                If email_act(i) = "None - Just Save Files" Then
                    GoTo nextiterat
                Else
                End If
                
                ' Create the message.
                
                Set objOutlookMsg = objOutlook.CreateItem(0)

                With objOutlookMsg
                   ' Add attachments to the message.
                    If Len(Dir(strPath)) <> 0 Then
                        .display
                        signature = .htmlbody
                        
                        If email_act(i) = "Save Populated Draft" Then
                            .To = email_rec(i)
                            .CC = email_recCC(i)
                            .BCC = ""
                            .Subject = VendorName & " - " & Format(Now, "MM-DD-YYYY") & " Vendor Forecast File"
                            .htmlbody = "<BODY style=font-side:11pt;font-family:Calibri>" & Replace(email_message(i), Chr(10), "<p>") & _
                            "<p>" & signature
                            .Attachments.Add strPath
                            .Save
                            .Close 1
                        ElseIf email_act(i) = "Send Directly to Supplier" Then
                            .To = email_rec(i)
                            .CC = email_recCC(i)
                            .BCC = ""
                            .Subject = VendorName & " - " & Format(Now, "MM-DD-YYYY") & " Vendor Forecast File"
                            .htmlbody = "<BODY style=font-side:11pt;font-family:Calibri>" & Replace(email_message(i), Chr(10), "<p>") & "<p>" & signature
                            .Attachments.Add strPath
                            .Send
                        ElseIf email_act(i) = "Save Blank Draft" Then
                            .To = ""
                            .CC = ""
                            .BCC = ""
                            .Subject = VendorName & " - " & Format(Now, "MM-DD-YYYY") & " Vendor Forecast File"
                            .htmlbody = ""
                            .Attachments.Add strPath
                            .Save
                            .Close 1
                        End If
                    Else
                        MsgBox "Unable to find the specified attachment."
                    End If
                End With
            End With
            
            'wbk.Close 0
            

'
'            Exit Sub
            
            With HQMMToolkit.SPVenFile
                .Range("G2").Offset(i).Value = Now
                With .Range("G2").Offset(i).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 5296274
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
            End With
            
nextiterat:
        Next i
    End With
    
    wbk.Close 0
    
    'MsgBox "The files are saved in " & fileLocation
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub


Sub asdasdasda()
'
' asdasdasda Macro
'
Dim crit As String, j As Integer, numCommas As Integer
Dim vendorParse() As String, counter As Integer

counter = 0
numCommas = 0

crit = "2029280, 2000420, 2000313, 20, 20, 20"

For j = 0 To Len(crit)
    If Mid(crit, j + 1, 1) = "," Then
        numCommas = numCommas + 1
        ReDim Preserve vendorParse(numCommas)
        vendorParse(numCommas - 1) = Mid(crit, counter + 1, j - counter)
        counter = j + 2
    Else
    End If
    
    If j = Len(crit) And numCommas > 0 Then
        vendorParse(numCommas) = Mid(crit, counter + 1, j - counter)
    Else
    End If
    
Next j

End Sub


Sub reset()


    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True


End Sub

Sub email_debug()

    Application.DisplayAlerts = False
    
    Debug.Print Now & " email vendor file begin"
'   Opens an email window with the vendor file attached
'==============================================================================
    Dim OutMail As Object, signature As String

    On Error Resume Next
    'Get handle to Outlook if already open
    Set OutApp = GetObject(, "Outlook.Application")

    'Create new Outlook object if not open
    If Err.Number = 429 Then
        Set OutApp = CreateObject("Outlook.application")
    End If
    
    Set OutMail = OutApp.CreateItem(0)
    
    With OutMail
        .display
    End With
    
    signature = OutMail.htmlbody
    
    With OutMail
            .To = ""
            .CC = ""
            .BCC = ""
            .Subject = " Vendor Forecast File"
            .htmlbody = "<BODY style=font-side:11pt;font-family:Calibri>" & "<p>" & signature
            .Attachments.Add vendorFileLocation
            .Save
            .Close
    End With

    Set OutMail = Nothing
    Debug.Print Now & " email vendor file end"
    
    Application.DisplayAlerts = True


End Sub

Sub dkdkdkd()
Dim hasline As Boolean

With HQMMToolkit.SPVenFile

    .Activate
    MsgBox Replace(.Range("F2").Value, Chr(10), vbNewLine)
    
    
End With
End Sub


Attribute VB_Name = "splitVendorFile"
Sub testPaste()
    Dim VendNo As String, vendName As String, stLook As Long
    
    VendNo = "2000041"
    vendName = "BEMIS CO INC"
    stLook = 2
    Application.Calculation = xlCalculationManual
    Call PastePerVendor(Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Bin"), _
                        Application.Workbooks(PROGRAM_WORKBOOK_NAME).Worksheets("Report"), _
                        VendNo, vendName, stLook)
    
    
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub PastePerVendor(ByRef DataSheet As Worksheet, _
                   ByRef BinWorksheet As Worksheet, _
                   ByRef ReportWorksheet As Worksheet, _
                   ByVal FileTypeDesc As String)
     
    Dim colHeadings As Range
    Dim firstFCSTCol As Long
    Dim lastFCSTCol As Long
    Dim LastReportCol As Long
    Dim numForecastColumns As Long
    Dim dmdCell As Range
    Dim consumptionType As String
    
     'copy filetered data sheet to bin Worksheet in PSI Tool
     DataSheet.UsedRange.Copy BinWorksheet.Cells(1)
     
     'sort Bin Worksheet by MRP
     BinWorksheet.UsedRange.Sort Key1:=BinWorksheet.Cells(2, 1), Order1:=xlAscending, Header:=xlYes
     
     'copy from bin to report sheet, arrange by column
     
'========
'   1.
'========
    '--------------------------------------------------------------------------
    '   Copy the data
    '--------------------------------------------------------------------------
    Set colHeadings = BinWorksheet.Range("A1:N1")
        'This may include at some of the forecast columns.
        '   This is to account for all file types
    'OpenAndVet.Hide
    'Application.ScreenUpdating = True
    
    'make vendor name to null string to avoid overide existing file if no vendor column in a file
    VendorName = ""
    VendorNumber = ""
    For Each Header In colHeadings.Cells
        Select Case Header.Value
            Case "MRP Controller"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MRP_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Material No"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MAT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Material Desc"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(MAT_DESC_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Follow-Up Material"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(FU_MAT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Plant"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(PLNT_NUM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Plant Name"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(PLNT_DESC_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "UoM"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(UoM_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Safety Stock"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(SS_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Standard price", "STPRS"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(STD_COST_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Stock"
                BinWorksheet.Columns(Header.Column).Copy
                ReportWorksheet.Columns(STOCK_COLUMN) _
                    .PasteSpecial xlPasteValues
            Case "Vendor"
                VendorNumber = BinWorksheet.Cells(Header.Row + 1, Header.Column).Value
            Case "Vendor Name"
                VendorName = BinWorksheet.Cells(Header.Row + 1, Header.Column).Value
                
                'make vendor name clean from / \ ? * " : < > |
                VendorName = Replace(VendorName, "/", " ")
                VendorName = Replace(VendorName, "\", " ")
                VendorName = Replace(VendorName, "?", " ")
                VendorName = Replace(VendorName, "*", " ")
                VendorName = Replace(VendorName, """", " ")
                VendorName = Replace(VendorName, ":", " ")
                VendorName = Replace(VendorName, "<", " ")
                VendorName = Replace(VendorName, ">", " ")
                VendorName = Replace(VendorName, "|", " ")
            Case Else

        End Select 'header.Value
        'test for forecast column
        If Left(Header.Value, 2) = "W " Or _
            Left(Header.Value, 2) = "D " Or _
            IsNumeric(Left(Header.Value, 2)) = True Then
            firstFCSTCol = Header.Column
            Exit For
        End If
    Next Header
    
    '   Determine the number of FCST Weeks
    '----------------------------------
    BinWorksheet.Activate
    numRows = Application.WorksheetFunction.CountA(Range("B:B"))
    numForecastColumns = Application.WorksheetFunction. _
        CountA(Range(Cells(1, firstFCSTCol), Cells(1, 150))) - 1
    lastFCSTCol = firstFCSTCol + numForecastColumns - 1
    Range(Cells(1, firstFCSTCol), Cells(numRows, lastFCSTCol)).Copy
    
    ReportWorksheet.Activate
    
    Range(Cells(1, FIRST_REPORT_FCST_COLUMN), _
        Cells(numRows + 1, FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1)) _
        .PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    'pass last forecast column to public variable
    ReportNumberOfColumns = FIRST_REPORT_FCST_COLUMN + numForecastColumns - 1
    ReportWorksheet.Activate
      
    'give name to stock column, even if it is not exist in source file, so the column values will be zero or empty
    If Cells(1, STOCK_COLUMN).Value = "" Then
        Cells(1, STOCK_COLUMN).Value = "Stock"
    End If
    
'========
'   2. Sort
'========
    'OpenAndVet.Hide
    'Application.ScreenUpdating = True
    
    ReportNumRows = ActiveSheet.UsedRange.Rows.count
    'Only sort if there is more than 1 row of data
    If ReportNumRows > 2 Then
            'Follow-up Material number is column D
            'Material is column B
    
    '   Set up the values to sort by
    '----------------------------------
                
        Cells(1, ReportNumberOfColumns + 1).Value = "Sort Number"
        
        Cells(2, (ReportNumberOfColumns + 1)).Select
        Cells(2, (ReportNumberOfColumns + 1)).Formula = _
             "=IF(D2="""",B2*1,D2-1)"
        Cells(2, (ReportNumberOfColumns + 1)).NumberFormat = "0"
        
        'copy the values of the formulas in the sorting column down
        Cells(2, ReportNumberOfColumns + 1).Copy
        Range(Cells(2, ReportNumberOfColumns + 1), _
            Cells(ReportNumRows, ReportNumberOfColumns + 1)).PasteSpecial xlPasteFormulasAndNumberFormats
        
        ReportWorksheet.Calculate
        
        ReportWorksheet.Range(Cells(2, ReportNumberOfColumns + 1), _
            Cells(ReportNumRows, ReportNumberOfColumns + 1)).Copy
        ReportWorksheet.Range(Cells(2, ReportNumberOfColumns + 1), _
            Cells(ReportNumRows, ReportNumberOfColumns + 1)).PasteSpecial xlPasteValues
        
        Application.CutCopyMode = False
        
    '   Do the Sort by item & vendor/plant
    '----------------------------------
        With ReportWorksheet.Sort
            .SortFields.Clear
            .SortFields.Add _
                Key:=Range(Cells(2, ReportNumberOfColumns + 1), _
                        Cells(ReportNumRows, ReportNumberOfColumns + 1)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
            '.SortFields.Add _
                Key:=Range(Cells(2, PLNT_NUM_COLUMN), _
                        Cells(reportnumRows + 1, PLNT_NUM_COLUMN)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortTextAsNumbers
            .SortFields.Add _
                Key:=Range(Cells(2, MRP_COLUMN), _
                        Cells(ReportNumRows, MRP_COLUMN)), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
            
            .SetRange Range(Cells(2, 1), _
                Cells(ReportNumRows, ReportNumberOfColumns + 1))
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
            .SortFields.Clear
        End With
        
    '   Delete the Sort Column
    '----------------------------------
        ReportWorksheet.Columns(ReportNumberOfColumns + 1).Delete
     
    End If  'Row Count >2
    
    '   Turn Negative values into positives
    '----------------------------------
    For Each dmdCell In Range(Cells(2, FIRST_REPORT_FCST_COLUMN), _
                        Cells(ReportNumRows, ReportNumberOfColumns)).Cells
        If dmdCell.Value < 0 Then
            dmdCell.Value = -1 * dmdCell.Value
        End If
    Next dmdCell
    
    '   Put in the proper label for the consumption numbers
    '----------------------------------
    'If rptType > [_First_Supply_File] And rptType < [_Last_Supply_File] Then
    '    consumptionType = "Supply"
    'ElseIf rptType > [_First_Demand_File] And rptType < [_Last_Demand_File] Then
    '    consumptionType = "Demand"
    'Else
    '    consumptionType = "Demand"
    'End If
    
    For Each dmdCell In ReportWorksheet.Range( _
        Cells(2, ATTRIBUTE_COLUMN), _
        Cells(ReportNumRows, ATTRIBUTE_COLUMN)).Cells
        dmdCell.Value = "Demand"
    Next dmdCell

    '   Insert the header rows
    '----------------------------------
    ReportWorksheet.Rows("1:" & HEADER_ROWS_ADJUST - 1).Insert
        
    '   Add File Type and Vendor Name
    '----------------------------------
    With ReportWorksheet
        .Range("B7").Value = FileTypeDesc
        
    If VendorName = "" Then
        VendorName = "Material file"
        'get plant Name for description in bracket
        VendorNumber = .Cells(16, PLNT_DESC_COLUMN).Value
        
        'make Plant name clean from / \ ? * " : < > |
        VendorNumber = Trim(Replace(VendorNumber, "/", " "))
        VendorNumber = Trim(Replace(VendorNumber, "\", " "))
        VendorNumber = Trim(Replace(VendorNumber, "?", " "))
        VendorNumber = Trim(Replace(VendorNumber, "*", " "))
        VendorNumber = Trim(Replace(VendorNumber, """", " "))
        VendorNumber = Trim(Replace(VendorNumber, ":", " "))
        VendorNumber = Trim(Replace(VendorNumber, "<", " "))
        VendorNumber = Trim(Replace(VendorNumber, ">", " "))
        VendorNumber = Trim(Replace(VendorNumber, "|", " "))
        
        .Range(VENDOR_NAME_CELL).Value = VendorName & " (" & VendorNumber & ")"
    Else
        .Range(VENDOR_NAME_CELL).Value = VendorName
    End If
    
        .Range("B8").Value = VendorName & " (" & VendorNumber & ") " & Format(Now(), "mm-dd-yyyy")
        .Range("B8").Font.Size = 12
        
        .Range(VENDOR_NAME_CELL).Font.Color = vbWhite
        .Range(LOCKED_INDICATOR_RANGE).Value = "TRUE"
        .Range(LOCKED_INDICATOR_RANGE).Font.Color = vbWhite
    End With
    
    
    '   Add the Auto Filters
    '----------------------------------
    ReportWorksheet.Range("A" & HEADER_ROWS_ADJUST & ":O" & _
        HEADER_ROWS_ADJUST).AutoFilter
    
    '   go back to the home page
    '----------------------------------
    HQMMToolkit.HomePage.Activate
    
    '   Create a unique identifier for this report
    '----------------------------------
    With ReportWorksheet.Range("C1")
        .Value = CDbl(Now())
        .Font.Color = RGB(255, 255, 255)
    End With
End Sub



' InQuest injected base64 decoded content
' bn)b
' ~`ZrD

INQUEST-PP=macro
