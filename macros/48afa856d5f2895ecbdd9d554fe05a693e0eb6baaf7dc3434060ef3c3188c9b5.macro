Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableButton, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateInstrumentsButton, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Function IsValidFreq(x As String) As Boolean
    Dim y As String: y = UCase$(x)
    
    IsValidFreq = (y = "1M" Or y = "2M" Or y = "3M" _
                  Or y = "4M" Or y = "6M")
End Function

Private Function TenorInMonths(x As String) As Integer
    Dim y As String: y = UCase$(x)
    
    If y Like "##Y" Or y Like "#Y" Then
        TenorInMonths = CInt(Left$(x, Len(x) - 1)) * 12
    ElseIf y Like "###M" Or y Like "##M" Or y Like "#M" Then
        TenorInMonths = CInt(Left$(x, Len(x) - 1))
    Else
        Err.Raise 5
    End If
End Function


Private Sub GenerateCapletsSwaptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, k As Integer, counter As Integer: counter = 0
    ClearCapletsSwaptions
    
    'Generate Caplets
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngInCaplets As Range: Set rngInCaplets = Range("NX_" & asn & "_M_CapletsSelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_InstrumentsDefs")
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    'Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue")      Model ID
    Dim ccyVal$: ccyVal = Range("NX_" & asn & "_M_CurrencyValue")
    Dim nameVal$: nameVal = Range("NX_" & asn & "_M_NameValue")
    Dim freqVal$: freqVal = Range("NX_" & asn & "_M_CapletsFreqValue")
    Dim startTenorVal$: startTenorVal = Range("NX_" & asn & "_M_CapletsTableStartTenor")
    Dim endTenorVal$: endTenorVal = Range("NX_" & asn & "_M_CapletsTableEndTenor")
    Dim freqMonths As Integer
    Dim startTenorMonths As Integer
    Dim endTenorMonths As Integer
    Dim CapletsID$
    
'    If IsValidFreq(freqVal) Then
'        freqMonths = TenorInMonths(freqVal)
'    Else
'        GoTo GenerateCaplets_BadFreq
'    End If
    On Error GoTo GenerateCaplets_BadTenor
    freqMonths = TenorInMonths(freqVal)
    startTenorMonths = TenorInMonths(startTenorVal)
    endTenorMonths = TenorInMonths(endTenorVal)
    On Error GoTo 0
    
    'The tenor last observed
    
   ' Dim prevMonths As Integer: prevMonths = startTenorMonths
    
    ' Fill in the caplets
    For j = 2 To rngInCaplets.Rows.Count
        On Error GoTo GenerateCaplets_BadTenor
        Dim nMonths As Integer: nMonths = TenorInMonths(rngInCaplets.Cells(j, 1))
        On Error GoTo 0
        
        For i = 1 To rngInCaplets.Columns.Count
            If rngInCaplets.Cells(j, i) = "Y" Then
                counter = counter + 1
                'rngOt.Cells(counter, 1) = CStr(prevMonths) & "M"
                rngOt.Cells(counter, 1) = rngInCaplets.Cells(j, 1)
                
                If j = rngInCaplets.Rows.Count Then
                    Dim kk As Integer
                    kk = CInt(TenorInMonths(rngInCaplets.Cells(j, 1))) + freqMonths
                    
                    If kk Mod 12 = 0 Then
                        rngOt.Cells(counter, 2) = CStr(kk / 12) & "Y"
                    Else
                        rngOt.Cells(counter, 2) = CStr(kk) & "M"
                    End If
                    
                Else
                    rngOt.Cells(counter, 2) = rngInCaplets.Cells(j + 1, 1)
                End If
                                
                rngOt.Cells(counter, 3) = rngInCaplets.Cells(1, i)
                
          '      If (nMonths - prevMonths > freqMonths) Then
          '          CapletsID = prefixVal & "." & nameVal & "." & ccyVal & ".Cap." & rngOt.Cells(counter, 1) & "." & rngOt.Cells(counter, 2) & "." & rngOt.Cells(counter, 3)
          '      Else
                    CapletsID = prefixVal & "." & nameVal & "." & ccyVal & "." & Range("NX_" & asn & "_M_CapletsFlavor") & "let." & rngOt.Cells(counter, 1) & "." & rngOt.Cells(counter, 2) & "." & rngOt.Cells(counter, 3)
          '      End If
                
                rngOt.Cells(counter, 4).Formula = "=nxInstrumentCapTenor(" & invCom & CapletsID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & "NX_" & asn & "_M_CapletsFlavor," _
                    & rngOt.Cells(counter, 1).Address & "," _
                    & rngOt.Cells(counter, 2).Address & "," _
                    & rngOt.Cells(counter, 3).Address & "," _
                    & "NX_" & asn & "_M_CapletsConventionValue," _
                    & "NX_" & asn & "_M_CapletsFreqValue," _
                    & "NX_" & asn & "_M_CapletsBasisValue," _
                    & "NX_" & asn & "_M_CapletsVolCurveID," _
                    & "NX_" & asn & "_M_CapletsNoticePeriodValue)" _

            End If
        Next
     
 '       prevMonths = nMonths
    Next
    
    
   'Fill in the Swaptions
    
    Dim rngInSwaptions As Range: Set rngInSwaptions = Range("NX_" & asn & "_M_SwaptionsSelectionGrid")
    Dim strikeVal$: strikeVal = Range("NX_" & asn & "_M_SwaptionsStrikeValue")
    Dim flavourAdd$: flavourAdd = Range("NX_" & asn & "_M_SwaptionsFlavor").Address
    Dim sptnVolIDAdd$: sptnVolIDAdd = Range("NX_" & asn & "_M_SwaptionsVolCurveID").Address
    Dim sptnConvAdd$: sptnConvAdd = Range("NX_" & asn & "_M_SwaptionsConventionValue").Address
    Dim sptnID$
    Debug.Print sptnID
    ' fill in the swaptions
    For j = 1 To rngInSwaptions.Rows.Count
        For i = 1 To rngInSwaptions.Columns.Count
           '  If rngInSwaptions.Cells(j, i) = "Y" Then
              If i <> 1 And j <> 1 And rngInSwaptions.Cells(j, i).Value <> vbNullString Then
                    If rngInSwaptions.Cells(j, i).Value = "y" Or rngInSwaptions.Cells(j, i).Value = "ATM" Then
                    
                        counter = counter + 1
                        rngOt.Cells(counter, 1) = rngInSwaptions.Cells(j, 1)
                        rngOt.Cells(counter, 2) = rngInSwaptions.Cells(1, i)
                        'get the Strike Price
                       ' rngOt.Cells(counter, 3).Formula = "=" & strikeAdd
                        rngOt.Cells(counter, 3).Value = strikeVal
                        sptnID = prefixVal & "." & nameVal & "." & ccyVal & ".Swaptions." & rngOt.Cells(counter, 1).Value & "." & rngOt.Cells(counter, 2).Value & "." & rngOt.Cells(counter, 3).Value
                        rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTenor(" & invCom & sptnID & invCom _
                            & "," & CcyAdd & "," & flavourAdd _
                            & "," & rngOt.Cells(counter, 1).Address _
                            & "," & rngOt.Cells(counter, 2).Address _
                            & "," & rngOt.Cells(counter, 3).Address & "," _
                            & sptnVolIDAdd & "," _
                            & sptnConvAdd & ")"
                    
                    ElseIf InStr(rngInSwaptions.Cells(j, i).Value, ";") <> 0 Or IsNumeric(rngInSwaptions.Cells(j, i).Value) Then
                    'Multiple Strikes in one cell
                    
                        Dim multipleStrikes() As String
                        multipleStrikes = Split(Trim(rngInSwaptions.Cells(j, i).Value), ";")
                        
                        For k = LBound(multipleStrikes) To UBound(multipleStrikes)
                            counter = counter + 1
                            rngOt.Cells(counter, 1) = rngInSwaptions.Cells(j, 1)
                            rngOt.Cells(counter, 2) = rngInSwaptions.Cells(1, i)
                            rngOt.Cells(counter, 3) = multipleStrikes(k)
                            sptnID = prefixVal & "." & nameVal & "." & ccyVal & ".Swaptions." & rngOt.Cells(counter, 1).Value & "." & rngOt.Cells(counter, 2).Value & "." & rngOt.Cells(counter, 3).Value
                           rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTenor(" & invCom & sptnID & invCom _
                            & "," & CcyAdd & "," & flavourAdd _
                            & "," & rngOt.Cells(counter, 1).Address _
                            & "," & rngOt.Cells(counter, 2).Address _
                            & "," & rngOt.Cells(counter, 3).Address & "," _
                            & sptnVolIDAdd & "," _
                            & sptnConvAdd & ")"
                                            
                        Next
                   
                  
                    End If
     
            End If
        Next
    Next
   
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 4)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_InstrumentsDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" _
            & invCom & prefixVal & "." & nameVal & ".Collection" & invCom _
            & ",NX_" & asn & "_M_CurrencyValue," _
            & Range(rngOt.Cells(1, 4).Offset(-1, 0), rngOt.Cells(counter, 4)).Address & ")"
     
        Range("E11").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO Caplets and Swaptions"
    End If
    
    Exit Sub
    
'GenerateCaplets_BadFreq:
'    MsgBox "Illegal frequency " & freqVal & "; Frequency must be 1M, 2M, 3M, 4M, 6M or 1y", _
'        vbExclamation, "Invalid Frequency"
'    Exit Sub
    
GenerateCaplets_BadTenor:
    MsgBox "Illegal tenor; Tenors must be of form ##M or ##Y.", _
        vbExclamation, "Invalid Tenor"
    Exit Sub

End Sub


Private Sub ClearCapletsSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_InstrumentsDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub






Private Sub ResizeCapletsTable()

    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_CapletsSelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_CapletsVolCurveID"))

    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadCapVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    Range("NX_" & Me.Name & "_M_CapletsSelectionGrid") = ""

    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0

    Dim freqVal$: freqVal = Range("NX_" & asn & "_M_CapletsFreqValue")
    Dim freqMonths As Integer: freqMonths = TenorInMonths(freqVal)
    
    Dim startTenorVal$: startTenorVal = Range("NX_" & asn & "_M_CapletsTableStartTenor")
    Dim startTenorMonths As Integer: startTenorMonths = TenorInMonths(startTenorVal)
    
    Dim endTenorVal$: endTenorVal = Range("NX_" & asn & "_M_CapletsTableEndTenor")
    Dim endTenorMonths As Integer: endTenorMonths = TenorInMonths(endTenorVal)

    For i = startTenorMonths To endTenorMonths Step freqMonths
        dateCounter = dateCounter + 1
        If i Mod 12 = 0 Then
            anchor.Offset(dateCounter, 0) = CStr(i / 12) & "Y"
        Else
            anchor.Offset(dateCounter, 0) = CStr(i) & "M"
        
        End If
                  
    Next
    

    strikeCounter = strikeCounter + 1
    anchor.Offset(0, strikeCounter) = "ATM"

    For i = 3 To UBound(temp, 2)
        If Not IsNumeric(temp(1, i)) Or Len(temp(1, i)) = 0 Then Exit For
        strikeCounter = strikeCounter + 1
        anchor.Offset(0, strikeCounter) = temp(1, i)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_CapletsSelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeCounter))
    Exit Sub

'ResizeTable_BadFreq:
'    MsgBox "Illegal frequency " & freqVal & "; Frequency must be 1M, 2M, 3M, 4M 6M or 1Y", _
'        vbExclamation, "Invalid Frequency"
'    Exit Sub

ResizeTable_BadCapVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"

End Sub

Private Sub ResizeSwaptionTable()
    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SwaptionsSelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", "Swaption." & Range("NX_" & asn & "_M_CurrencyValue") & ".DATA")
    
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadSwaptionVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
   
    On Error GoTo 0
    Range("NX_" & Me.Name & "_M_SwaptionsSelectionGrid") = ""
    
    Dim i As Integer
    For i = LBound(temp, 2) + 1 To UBound(temp, 2)
        anchor.Offset(0, i - 1) = temp(1, i)
    Next
    For i = LBound(temp) + 1 To UBound(temp)
        anchor.Offset(i - 1, 0) = temp(i, 1)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SwaptionsSelectionGrid", RefersTo:=Range(anchor, anchor.Offset(UBound(temp, 1) - 1, UBound(temp, 2) - 1))
    Exit Sub
ResizeTable_BadSwaptionVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"

End Sub




Private Sub CreateInstrumentsButton_Click()
    GenerateCapletsSwaptions
End Sub

Private Sub ResizeTableButton_Click()
    ResizeCapletsTable
    ResizeSwaptionTable
    

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mktEQDivVol1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modEqBS1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityValue")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue")
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".Opt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & "Call" & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("E11").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub CommandButton1_Click()
    generateOptions
End Sub

Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_OptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

Private Sub CommandButton2_Click()
    ResizeTable
End Sub

Private Sub ResizeTable()
    Range("NX_" & Me.Name & "_M_SelectionGrid") = ""
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_VolCurveID"))
    
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        anchor.Offset(dateCounter, 0) = temp(i, 1)
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next
    
    For i = 2 To UBound(temp, 2)
        If Not IsNumeric(temp(1, i)) Or Len(temp(1, i)) = 0 Then Exit For
        strikeCounter = strikeCounter + 1
        anchor.Offset(0, strikeCounter) = temp(1, i)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeCounter))
    Exit Sub

ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Attribute VB_Name = "repCashflows4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID1", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut1"
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID2", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut2"
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID3", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut3"
    Application.ScreenUpdating = True
End Sub

Private Sub doOneTable(IdRngName$, outRngName$)
    On Error GoTo errorHandler
    Dim outRng As Range: Set outRng = Range(outRngName)
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(IdRngName).Cells(1))
    Dim size As Integer: size = UBound(temp) - 1
    outRng.Clear
    If size = 0 Then Exit Sub
    Range(outRng.Cells(1), outRng.Cells(1).Offset(size - 1, 2)).Select
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    Selection.FormulaArray = "=nxLibView(R[-3]C,R[-1]C:R[-1]C[2])"
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2
        .Pattern = xlSolid
    End With
    outRng.Cells(1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.NumberFormat = "[$-409]d-mmm-yyyy;@"
    outRng.Cells(1).Offset(0, 1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    Range("E2").Formula = "=Today()"
    Range("E3").Formula = "=Now()"
errorHandler:
    Range("E2") = Range("E2").Value
    Range("E3") = Range("E3").Value
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub


INQUEST-PP=macro
