Attribute VB_Name = "Module1"
Attribute VB_Name = "Module2"
Type ScheduleRec
    Team1 As String
    Team2 As String
    StartTime As String
End Type


Sub Macro1()

End Sub
Private Sub Inc_Col(Column_in As String)
On Error Resume Next
'Performs incrementing of columns to next column letter

    Select Case Column_in
        Case "A"
            Column_in = "B"
        Case "B"
            Column_in = "C"
        Case "C"
            Column_in = "D"
        Case "D"
            Column_in = "E"
        Case "E"
            Column_in = "F"
        Case "F"
            Column_in = "G"
        Case "G"
            Column_in = "H"
        Case "H"
            Column_in = "I"
        Case "I"
            Column_in = "J"
        Case "J"
            Column_in = "K"
        Case "K"
            Column_in = "L"
        Case "L"
            Column_in = "M"
        Case "M"
            Column_in = "N"
        Case "N"
            Column_in = "O"
        Case "O"
            Column_in = "P"
        Case "P"
            Column_in = "Q"
        Case "Q"
            Column_in = "R"
        Case "R"
            Column_in = "S"
        Case "S"
            Column_in = "T"
        Case "T"
            Column_in = "U"
        Case "U"
            Column_in = "V"
        Case "V"
            Column_in = "W"
        Case "W"
            Column_in = "X"
        Case "X"
            Column_in = "Y"
        Case "Y"
            Column_in = "Z"
End Select
    
End Sub
Sub Macro2()
On Error Resume Next
'Looks for cross league games
    
    Dim Row As String
    Dim Column As String
    Dim MyArray(500) As String
    Dim i As Single 'used only for looping
    Dim j As Single 'used only for looping
    Dim ArrayCount As Single
    Dim Team1 As String
    Dim Team2 As String
    Dim TrimTeam1 As String
    Dim TrimTeam2 As String
    Dim TeamRow As String
    Dim MaxValue As String
    Dim MinValue As String
    
    Column = "A" 'Starts looking for matches in column A
    
    'Looks for the letter v between two spaces to indicate a team match, i.e. 1 v 4
    For i = 1 To 19
        For j = 10 To 95
            Row = Trim(Str(j)) 'Must be trimmed because string function will add leading space to numeric value
            Sheets("Schedule").Select
            Range(Column + Row).Select
            If InStr(ActiveCell.Value, " v ") Then
                ArrayCount = ArrayCount + 1
                MyArray(ArrayCount) = ActiveCell.Value
            End If
        Next j
        Call Inc_Col(Column)
    Next i
    
    'Identifies teams playing other teams outside of their division/league
    j = 0 'Initialize looping variable back to zero
    For i = 1 To ArrayCount
        Team1 = RTrim(Left(MyArray(i), 2))
        Team2 = Right(MyArray(i), 2)
        
        'If Not (Val(Team1) < 10 And Val(Team2) < 10) Then
            MaxValue = FindMax(Team1)
            MinValue = FindMin(Team1)
            
            'If both team numbers are less than 10, then they are in the same league
             If Val(Trim(Team2)) > Val(MaxValue) Or Val(Trim(Team2)) < Val(MinValue) Then
                j = j + 1
            'This section finds the row for team1 and puts team2 in the crossover column
                TeamRow = FindRow(Team1)
                
                If TeamRow = "" Then
                    MsgBox ("You have team number " & Team1 & " on the schedule but that number is not on the opponent sheet")
                    GoTo Invalid_Team_No
                End If
                Sheets("Opponent Charting").Select
                Range("A" + TeamRow).Select
                If IsEmpty(ActiveCell) Then
                    ActiveCell.Value = Team2
                Else
                    ActiveCell.Value = ActiveCell.Value & ", " & Trim(Team2)
                End If
            'This section finds the row for team2 and puts team1 in the crossover column
                TeamRow = FindRow(Team2)
                If TeamRow = "" Then
                    MsgBox ("You have team number " & Team2 & " on the schedule but that number is not on the opponent sheet")
                    GoTo Invalid_Team_No
                End If
                Sheets("Opponent Charting").Select
                Range("A" + TeamRow).Select
                If IsEmpty(ActiveCell) Then
                    ActiveCell.Value = Team1
                Else
                    ActiveCell.Value = ActiveCell.Value & ", " & Trim(Team1)
                End If
    
Invalid_Team_No:
            End If
        'End If
    Next i
    Sheets("Schedule").Select
    Range("A1").Select
    Sheets("Opponent Charting").Select
    Range("A1").Select
    MsgBox ("Finished!")
End Sub
Function FindMax(ValueIn As String) As String
    For i = 1 To 150
        Sheets("Opponent Charting").Select
        Range("B" + Trim(Str(i))).Select
        If Trim(ActiveCell.Value) = Trim(ValueIn) Then
            'MsgBox (ValueIn)
            For j = i + 1 To i + 15
                Range("B" + Trim(Str(j))).Select
                'If Trim(ActiveCell.Value) = "" Then
                If IsEmpty(ActiveCell.Value) Then
                    Range("B" + Trim(Str(j - 1))).Select
                    FindMax = Trim(ActiveCell.Value)
                    Exit Function
                End If
            Next j
        End If
    Next i
    

End Function
Function FindMin(ValueIn As String) As String
    For i = 1 To 150
    
        Sheets("Opponent Charting").Select
        Range("B" + Trim(Str(i))).Select
        If Trim(ActiveCell.Value) = Trim(ValueIn) Then
            For j = (i - 1) To (i - 15) Step -1
                Range("B" + Trim(Str(j))).Select
                'If Trim(ActiveCell.Value) = "" Then
                If IsEmpty(ActiveCell.Value) Then
                    Range("B" + Trim(Str(j + 1))).Select
                    FindMin = Trim(ActiveCell.Value)
                    Exit Function
                End If
            Next j
        End If
    Next i

End Function
Function FindRow(ValueIn As String) As String
On Error Resume Next

'Determines what row contains the team indicated
'Used for Macro 2 only
    For i = 1 To 95
        Sheets("Opponent Charting").Select
        Range("B" + Trim(Str(i))).Select
        If Trim(ActiveCell.Value) = Trim(ValueIn) Then
            FindRow = Trim(Str(i))
            Exit Function
        End If
    Next i
End Function
Function TeamRow(ValueIn As String) As String
On Error Resume Next

'Determines what row contains the team indicated
'Used for Macro 3 only
    For i = 1 To 95
        Sheets("Starting Time Analysis").Select
        Range("B" + Trim(Str(i))).Select
        If Trim(ActiveCell.Value) = Trim(ValueIn) Then
            TeamRow = Trim(Str(i))
            Exit Function
        End If
    Next i
End Function
Function TimeColumn(ValueIn As String) As String
On Error Resume Next

    Dim LeftTime As String
    Dim RightTime As String
    Dim Column As String

    Column = "A"

    For i = 1 To 8 'Number of columns to check through
        Range(Column & "4").Select
        If InStr(ActiveCell.Value, ":") Then
            LeftTime = Left(ActiveCell.Value, 5)
            If Len(Trim(ActiveCell.Value)) = 5 Then
                RightTime = LeftTime
            Else
                RightTime = Right(ActiveCell.Value, 5)
            End If
            If InStr(LeftTime, "-") Then
                LeftTime = Left(LeftTime, 4)
            End If
            If InStr(RightTime, "-") Then
                RightTime = Right(RightTime, 4)
            End If
            If Trim(ValueIn) >= Trim(LeftTime) And Trim(ValueIn) <= Trim(RightTime) Then
                TimeColumn = Column
                Exit Function
            Else
            End If
        End If
        Call Inc_Col(Column)

    Next i
End Function
Sub Macro3()
On Error Resume Next

    'Reads through the schedule and builds an array of the teams and their start times
    'Then plugs the number of times a team plays in a specified time slot in the Starting Times Analysis worksheet
    
    'Variables
    Dim ScheduleArray(1 To 500) As ScheduleRec
    Dim ArrayCount As Single
    Dim Row As String
    Dim Column As String
    Dim TeamColumn As String
    Dim TempRec As ScheduleRec 'for sorting

    'Code
    Column = "A"
    ArrayCount = 1
    For i = 1 To 19
        For j = 10 To 95
            Row = Trim(Str(j)) 'Must be trimmed because string function will add leading space to numeric value
            Sheets("Schedule").Select
            Range(Column + Row).Select
            If InStr(ActiveCell.Value, ":") Then
                If Left(ActiveCell.Value, 3) <> "Bye" Then
                    ScheduleArray(ArrayCount).StartTime = ActiveCell.Value
                    TeamColumn = Column
                    Call Inc_Col(TeamColumn)
                    Range(TeamColumn + Row).Select
                    If Not IsEmpty(ActiveCell) Then
                        ScheduleArray(ArrayCount).Team1 = Left(ActiveCell.Value, 2)
                        ScheduleArray(ArrayCount).Team2 = Right(ActiveCell.Value, 2)
                        ArrayCount = ArrayCount + 1
                    End If
                End If
            End If
        Next j
        Call Inc_Col(Column)
    Next i
    
    'Plug in counts for time slots
    For i = 1 To (ArrayCount - 1)
        Row = TeamRow(ScheduleArray(i).Team1)
        Column = TimeColumn(ScheduleArray(i).StartTime)
        If IsEmpty(ActiveCell) Then
            Range(Column & Row).Value = "1"
        Else
            Range(Column & Row).Value = Val(Trim(Range(Column & Row).Value)) + 1
        End If
        
        Row = TeamRow(ScheduleArray(i).Team2)
        Column = TimeColumn(ScheduleArray(i).StartTime)
        If IsEmpty(ActiveCell) Then
            Range(Column & Row).Value = "1"
        Else
            Range(Column & Row).Value = Val(Trim(Range(Column & Row).Value)) + 1
        End If
    Next i

    Sheets("Schedule").Select
    Range("a1").Select
    Sheets("Starting Time Analysis").Select
    Range("a1").Select
    MsgBox ("Finished!")
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
