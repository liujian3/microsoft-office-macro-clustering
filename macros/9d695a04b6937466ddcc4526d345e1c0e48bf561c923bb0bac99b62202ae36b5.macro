Attribute VB_Name = "SWS_Contents"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation.


Option Explicit
Private Sub Worksheet_Activate()

' * ' Initialize
      On Error Resume Next
      
      Me.DisplayPageBreaks = False
      
   '  ActiveWindow.DisplayHeadings = True


ES: ' End of Sub
   '  Me.Protect UserInterfaceOnly:=True

End Sub
Private Sub Worksheet_Deactivate()

' * ' Initialize
      On Error Resume Next
      
      Me.DisplayPageBreaks = False
      

ES: ' End of Sub
   '  Me.Protect UserInterfaceOnly:=True

End Sub
Attribute VB_Name = "SWS_Information"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TPP_Colors"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation


' This module contains functions for all my perferred colors.
' The functions are made as 'rgbColorName', with the 'Long' value of the colors, just like the builtin color constants, i.e. 'rgbRed'.
'
' Thus, you can set the interior color of an input cell, with something like: ActiveCell.Interior.Color = rgbInteriorInput
'
' Some colors are different, depending on the version of Excel used, and/or the settings of the current Excel/workbook!
' Thus, it can be somewhat troublesome to set the correct color of these...
' Biggest problem is the 'SystemGrey' color and the 'ColorScheme' color...
'
' If you need to test, if a certion object has one of these 'UDF' colors, you can set the argument,'TestColor', to the 'Long' value,
' of the color to test and the rgbColorFunction will test if the object has any of the possible colors:
'
'     If rgbColorScheme(Selecttion.Interior.Color) = True then ...
'
' Finally the module contains two small macros for resetting the colorindexes for the workbook and for coloring UserForms
'
' The main advantages of this approch (having a module for defining all colors) are:
'
' 1)  All my projects get the same 'look and feel' and everything, like input cells, results, etc. will be easily recognizable for the user.
' 2)  Should it be necessay to change color(s) it need only to be done in one place (this module), thus no need to scan an entire project to change colors.
' 3)  Code vil be easier to read and correct (is is by far easier to recognize a color if it says  .Color = rgbGrey,  rather than  .Color = 13948116.


' List of 'colors' (functions):                 ' The functions containing test-routines, as explained above, is marked with a asterix
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' Border          rgbBorderInside               ' System Grey
'                 rgbBorderOutside              ' Black
'
' Font            rgbFontBoxField               ' Mixture between 'rgbFontInput' and 'rgbFontText' = A very dark, almost black, blue color
'                 rgbFontError                  ' Red
'                 rgbFontFormula                ' Black
'                 rgbFontInput                  ' Blue                  (Like writing with a ballpen :-)    Indtastningscelle
'                 rgbFontSpecial                ' - Not implemented -   (Have plans for this, for an Addin, I'm doing, but haven't gotten around to actually use it yet)
'                 rgbFontText                   ' Black
'                 rgbFontWarning                ' Red
'                 rgbFontZero                   ' Grey, 25%             (Silver)
'                 rgbDisabledText               ' Grey, 50%             (Mainly for use in UserForms)
'
' Interior        rgbInteriorError              ' Yellow                                                    Fejl
'                 rgbInteriorInfo               ' Lavender Blue                                             Information
'                 rgbInteriorInput              ' Honey Dew Green                                           Indtastningsfejl/-celle
'                 rgbInteriorIntermediate       ' Powder Blue                                               Mellemregning
'                 rgbInteriorHeader             ' Medium Turquoise                                          Overskrift
'                 rgbInteriorNotice             ' Yellow                                                    Bem|fffd|rk
'                 rgbInteriorPaper              ' Nearly White          (RGB 254, 254, 254)                 Papir
'                 rgbInteriorPaperSection       ' Almost White          (RGB 253, 253, 253)                 Papirssektion
'                 rgbInteriorResult             ' Lime Green                                                Resultat
'                 rgbInteriorWarning            ' Yellow                                                    Advarsel
'
' Table           rgbInteriorTableHeader        ' Light Teal
'                 rgbInteriorTableStripe        ' Light White Blue
'
' Calender &      rgbInteriorAnniversary        ' Light Green                                               Jubil|fffd|um, |fffd|rsdag
' Planing         rgbInteriorBirthday           ' Pale Red                                                  F|fffd|dselsdag
'                 rgbInteriorBadIllSick         ' Pale Red                                                  Syg/sygemeldt
'                 rgbInteriorEducation          ' Chalkboard Green                                          Kursus, Tr|fffd|ning, Skole (-uphold), (Efter-) Uddannelse
'                 rgbInteriorHealthCare         ' Pale Yellow                                               (Tand-) l|fffd|gebes|fffd|g, genoptr|fffd|ning, Barns 1. sygedag, barselsorlov, m.v.
'                 rgbInteriorHoliday            ' Pale Orange                                               Helligdag
'                 rgbInteriorLeave              ' Light Blue                                                Orlov
'                 rgbInteriorOther              ' Purple
'                 rgbInteriorPaidOff            ' Pale Blue                                                 Betalt fri
'                 rgbInteriorVacation           ' Dark Pale Blue                                            Ferie
'                 rgbInteriorVacationOff        ' Dark Pale Blue                                            Feriefri (-dage/-timer)
'                 rgbInteriorWeddingDay         ' Grey, 50%                                                 Bryllupsdag
'                 rgbInteriorWeekday            ' Dim Pale Green        (Mainly for usage in UserForms)     Ugedag  (mandag - fredag)
'                 rgbInteriorWeekend            ' Light Plae Orange                                         Weekend (l|fffd|rdag & s|fffd|ndag)
'                 rgbInteriorWorkday            ' White                 (Mainly for usage in Worksheets)    Arbejdsdag
'
' UserForm        rgbButtonFace                 ' Ye' old SystemGrey    (RGB 212, 208,200)
'                 rgbDisabledText               ' Grey, 50&
'                 rgbUserForm                   ' Ye' old SystemGrey    (RGB 212, 208,200)
'
' Miscellanous  * rgbColorScheme                ' Main color of the current selected color scheme
'                 rgbGrey                       ' Function for setting grey in percentage, MyColor = rgbGrey(25)
'               * rgbSystemGrey                 ' The grey color of the current system
'
' Special         rgbIRSBlueDark                ' Dark Blue          \
'                 rgbIRSBlueLight               ' Light Blue          > Design colors of IRS in USA
'                 rgbIRSOrange                  ' Orange             /
'                 rgbSkatBlueDark               ' Dark Blue          \
'                 rgbSkatBlueLight              ' Light Blue          > Design colors of IRS in Denmark
'                 rgbSkatOrange                 ' Orange             /

' Functions...    rgbColorIndex                 ' Return the long color value of a given color index, MyColor = rgbColorIndex(14)
'                 WUF_Colors                    ' Function to setup colors on a UserForm from the userForm_Initialize event: Call WUF_Colors(Me)
'                 Resetup_Colors                ' Setup colors for worksheet model, according to all the rest of the colors (Function probbly not usefor to others than me :-)
'                 TableStyle_EXCELGAARD         ' Add my perferred tablestyle to the Active Workbook


' Constants for storage keys in Windows Registry
  Private Const Module_DataSavename As String = "xlFormats"
  Private Const Module_SectionAppID As String = "Colors"

' Transcendance colors - from old vbColors to new rgbColors constants
  Public Const rgbCyan                      As Long = vbCyan
  Public Const rgbMagenta                   As Long = vbMagenta
  Public Const rgbDarkbFuchsia              As Long = rgbDarkMagenta

' Some other colors, just for the fun of it :-)
  Public Const rgbChalkboardGreen           As Long = 4023611         ' RGB (  59 , 101 ,  61 )
  Public Const rgbPantone448C               As Long = 2769226         ' RGB (  74 ,  65 ,  42 )   (Deemed the ugliest color in the world - Google it :-)
  Public Const rgbPullmannBrown             As Long = 1524068         ' RGB ( 100 ,  65 ,  23 )   (UPS Brown)
  Public Const rgbTiffanyBlue               As Long = 11909642        ' RGB (  10 , 186 , 181 )

Option Private Module
Option Explicit


' ***************************
' ***   Font Colors       ***
' ***************************

Public Function rgbFontBoxField() As XlRgbColor

      On Error Resume Next
      rgbFontBoxField = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, BoxField, Font, Color", RGB(0, 0, 96))

End Function
Public Function rgbFontError() As XlRgbColor

      On Error Resume Next
      rgbFontError = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Error, Font, Color", rgbRed)

End Function
Public Function rgbFontFormula() As XlRgbColor

      On Error Resume Next
      rgbFontFormula = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Formula, Font, Color", rgbBlack)

End Function
Public Function rgbFontInput() As XlRgbColor

      On Error Resume Next
      rgbFontInput = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Input, Font, Color", rgbBlue)

End Function
Public Function rgbFontSpecial() As XlRgbColor

      On Error Resume Next
      rgbFontSpecial = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Special, Font, Color", xlNone)

End Function
Public Function rgbFontText() As XlRgbColor

      On Error Resume Next
      rgbFontText = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Text, Font, Color", rgbFontFormula)

End Function
Public Function rgbFontWarning() As XlRgbColor

      On Error Resume Next
      rgbFontWarning = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Warning, Font, Color", rgbFontError)

End Function
Public Function rgbFontZero() As XlRgbColor

      On Error Resume Next
      rgbFontZero = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Zero, Font, Color", rgbGrey(25))

End Function


' ***************************
' ***   Interior Colors   ***
' ***************************

Public Function rgbInteriorCompany() As XlRgbColor

      On Error Resume Next
      rgbInteriorCompany = GetSetting(Module_DataSavename, Module_SectionAppID, "Color, Company", rgbYellow)

End Function
Public Function rgbInteriorDesign() As XlRgbColor

      On Error Resume Next
      rgbInteriorDesign = GetSetting(Module_DataSavename, Module_SectionAppID, "Color, Design", rgbYellow)

End Function
Public Function rgbInteriorError() As XlRgbColor

      On Error Resume Next
      rgbInteriorError = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Error, Interior, Color", rgbYellow)

End Function
Public Function rgbInteriorInfo() As XlRgbColor

      On Error Resume Next
      rgbInteriorInfo = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Info, Interior, Color", rgbLavender)

End Function
Public Function rgbInteriorInput() As XlRgbColor

      On Error Resume Next
      rgbInteriorInput = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Input, Interior, Color", rgbHoneydew)

End Function
Public Function rgbInteriorIntermediate() As XlRgbColor

      On Error Resume Next
      rgbInteriorIntermediate = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Intermediate, Interior, Color", rgbPowderBlue)

End Function
Public Function rgbInteriorHeader() As XlRgbColor

      On Error Resume Next
      rgbInteriorHeader = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Header, Interior, Color", rgbMediumTurquoise)

End Function
Public Function rgbInteriorNotice() As XlRgbColor

      On Error Resume Next
      rgbInteriorNotice = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Notice, Interior, Color", rgbInteriorWarning)

End Function
Function rgbInteriorPaper() As XlRgbColor

      On Error Resume Next
      rgbInteriorPaper = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Paper, Interior, Color", RGB(254, 254, 254))

End Function
Function rgbInteriorPaperInput() As XlRgbColor

      On Error Resume Next
      rgbInteriorPaperInput = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, PaperInput, Interior, Color", RGB(254, 255, 254))

End Function
Function rgbInteriorPaperResult() As XlRgbColor

      On Error Resume Next
      rgbInteriorPaperResult = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, PaperResult, Interior, Color", RGB(253, 255, 253))

End Function
Public Function rgbInteriorPaperSection() As XlRgbColor

      On Error Resume Next
      rgbInteriorPaperSection = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, PaperSection, Interior, Color", RGB(253, 253, 253))

End Function
Public Function rgbInteriorResult() As XlRgbColor

      On Error Resume Next
      rgbInteriorResult = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Result, Interior, Color", rgbLimeGreen)

End Function
Public Function rgbInteriorWarning() As XlRgbColor

      On Error Resume Next
      rgbInteriorWarning = GetSetting(Module_DataSavename, Module_SectionAppID, "Cells, Warning, Interior, Color", rgbInteriorError)

End Function


' ***************************
' ***   Border Colors     ***
' ***************************

Public Function rgbBorderInside() As XlRgbColor

      On Error Resume Next
      rgbBorderInside = GetSetting(Module_DataSavename, Module_SectionAppID, "Border, Inside, Color", rgbGreySystem)

End Function
Public Function rgbBorderOutside() As XlRgbColor

      On Error Resume Next
      rgbBorderOutside = GetSetting(Module_DataSavename, Module_SectionAppID, "Border, Outside, Color", rgbBlack)

End Function


' ***************************
' ***   Table Colors      ***
' ***************************

Public Function rgbInteriorTableHeader() As XlRgbColor

      On Error Resume Next
      rgbInteriorTableHeader = GetSetting(Module_DataSavename, Module_SectionAppID, "Table, Header, Interior, Color", RGB(51, 204, 204))

End Function
Public Function rgbInteriorTableStripe() As XlRgbColor

      On Error Resume Next
      rgbInteriorTableStripe = GetSetting(Module_DataSavename, Module_SectionAppID, "Table, Stripe, Interior, Color", RGB(235, 245, 255))

End Function


' ***************************
' ***   UserForm Colors   ***
' ***************************

Public Function rgbButtonFace() As XlRgbColor

      On Error Resume Next
      rgbButtonFace = GetSetting(Module_DataSavename, Module_SectionAppID, "UserForms, ButtonFace, Color", RGB(212, 208, 200))

End Function
Public Function rgbDisabledText() As XlRgbColor

      On Error Resume Next
      rgbDisabledText = GetSetting(Module_DataSavename, Module_SectionAppID, "UserForms, Text, Disabled, Color", rgbGrey(50))

End Function
Public Function rgbUserForm() As XlRgbColor

      On Error Resume Next
      rgbUserForm = GetSetting(Module_DataSavename, Module_SectionAppID, "UserForms, Backcolor, Color", rgbButtonFace)

End Function

' ***************************
' ***   Calendar Colors   ***
' ***************************

Public Function rgbInteriorAnniversary() As XlRgbColor

      On Error Resume Next
      rgbInteriorAnniversary = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Anniversary, Interior, Color", RGB(128, 255, 128))

End Function
Public Function rgbInteriorBadIllSick() As XlRgbColor

      On Error Resume Next
      rgbInteriorBadIllSick = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, BadIllSick, Interior, Color", RGB(255, 128, 128))

End Function
Public Function rgbInteriorBirthday() As XlRgbColor

      On Error Resume Next
      rgbInteriorBirthday = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Birthday, Interior, Color", RGB(255, 128, 128))

End Function
Public Function rgbInteriorEducation() As XlRgbColor

      On Error Resume Next
      rgbInteriorEducation = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Education, Interior, Color", rgbChalkboardGreen)

End Function
Public Function rgbInteriorHealthCare() As XlRgbColor

' Maternity leave, re-training, etc... (Barn's 1. sygedag)

      On Error Resume Next
      rgbInteriorHealthCare = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, HealthCare, Interior, Color", RGB(255, 255, 128))

End Function
Public Function rgbInteriorHoliday() As XlRgbColor

      On Error Resume Next
      rgbInteriorHoliday = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Holiday, Interior, Color", RGB(255, 230, 153))

End Function
Public Function rgbInteriorLeave() As XlRgbColor

      On Error Resume Next
      rgbInteriorLeave = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Leave, Interior, Color", RGB(128, 255, 255))

End Function
Public Function rgbInteriorOther() As XlRgbColor

      On Error Resume Next
      rgbInteriorOther = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Other, Interior, Color", RGB(255, 128, 255))

End Function
Public Function rgbInteriorPaidOff() As XlRgbColor

      On Error Resume Next
      rgbInteriorPaidOff = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Paid Off, Interior, Color", RGB(128, 192, 255))

End Function
Public Function rgbInteriorVacation() As XlRgbColor

      On Error Resume Next
      rgbInteriorVacation = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Vacation, Interior, Color", RGB(64, 128, 255))

End Function
Public Function rgbInteriorVacationOff() As XlRgbColor

' Feriefri (dage/timer)

      On Error Resume Next
      rgbInteriorVacationOff = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Vacation Off, Interior, Color", RGB(70, 130, 255))

End Function
Public Function rgbInteriorWeddingday() As XlRgbColor

      On Error Resume Next
      rgbInteriorWeddingday = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Weddingday, Interior, Color", RGB(128, 128, 128))

End Function
Public Function rgbInteriorWeekday() As XlRgbColor

' Color for weekdays (mainly for usage in forms)

      On Error Resume Next
      rgbInteriorWeekday = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Weekday, Interior, Color", RGB(176, 204, 176))

End Function
Public Function rgbInteriorWeekend() As XlRgbColor

      On Error Resume Next
      rgbInteriorWeekend = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Weekend, Interior, Color", RGB(255, 242, 204))

End Function
Public Function rgbInteriorWorkday() As XlRgbColor

' Color for workdays (mainly for usage in sheets)

      On Error Resume Next
      rgbInteriorWorkday = GetSetting(Module_DataSavename, Module_SectionAppID, "Calendar, Workday, Interior, Color", rgbWhite)

End Function


' ***************************
' ***   IRS Colors        ***
' ***************************

Public Function rgbIRSOrange() As XlRgbColor

' USA IRS Design colors

      On Error Resume Next
      rgbIRSOrange = GetSetting(Module_DataSavename, Module_SectionAppID, "Logo/Design, IRS, Orange", RGB(253, 80, 35))

End Function
Public Function rgbIRSBlueDark() As XlRgbColor

' USA IRS Design colors

      On Error Resume Next
      rgbIRSBlueDark = GetSetting(Module_DataSavename, Module_SectionAppID, "Logo/Design, IRS, Blue, Dark", RGB(30, 84, 138))

End Function
Public Function rgbIRSBlueLight() As XlRgbColor

' USA IRS Design colors

      On Error Resume Next
      rgbIRSBlueLight = GetSetting(Module_DataSavename, Module_SectionAppID, "Logo/Design, IRS, Blue, Light", RGB(51, 102, 153))

End Function
Public Function rgbSkatOrange() As XlRgbColor

' Danish IRS Design colors

      On Error Resume Next
      rgbSkatOrange = GetSetting(Module_DataSavename, Module_SectionAppID, "Logo/Design, Skat, Orange", RGB(255, 198, 30))

End Function
Public Function rgbSkatBlueDark() As XlRgbColor

' Danish IRS Design colors

      On Error Resume Next
      rgbSkatBlueDark = GetSetting(Module_DataSavename, Module_SectionAppID, "Logo/Design, Logo/Design, Skat, Blue, Dark", RGB(57, 95, 119))

End Function
Public Function rgbSkatBlueLight() As XlRgbColor

' Danish IRS Design colors

      On Error Resume Next
      rgbSkatBlueLight = GetSetting(Module_DataSavename, Module_SectionAppID, "Logo/Design, Skat, Blue, Light", RGB(112, 135, 150))

End Function


' ***************************
' ***   Color Functions   ***
' ***************************

Public Function rgbColorIndex(Optional ColorIndexNumber As Long = 0, Optional InfoType As Long = 0) As Variant
Attribute rgbColorIndex.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' The purpose of this function is to return the long value of one of the standard 56 color indexes.
'
' There are two options: If you pass the colorindex number (1 to 56) the function will return the long value of the colorindex in the current workbook.
'                        If you pass the colorindex number as a negative value (-1 to -56), the function will return the long value of the original color of the colorindex.
'
' The argument, 'InfoType', can have the following options :  0  =  Will return the 'Long'  value of the selected color (default).
'                                                             1  =  Will return the 'Red'   part of the RGB value of the color.
'                                                             2  =  Will return the 'Green' part of the RGB value of the color.
'                                                             3  =  Will return the 'Blue'  part of the RGB value of the color.
'                                                             4  =  Will return the  HTML   color code of the selected color as a string.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      If ColorIndexNumber < -56 Or ColorIndexNumber > 56 Then ColorIndexNumber = 0
      If ColorIndexNumber = 0 Then ColorIndexNumber = 1                                         ' Set the default colorindex here...
      
      Dim Color_Original(56) As Long
      Color_Original(1) = RGB(0, 0, 0)                                                          ' Black                        \
      Color_Original(2) = RGB(255, 255, 255)                                                    ' White                         \
      Color_Original(3) = RGB(255, 0, 0)                                                        ' Red                            \
      Color_Original(4) = RGB(0, 255, 0)                                                        ' Green                           > Basic colors...
      Color_Original(5) = RGB(0, 0, 255)                                                        ' Blue            Same as # 32    > Don't EVER change these...
      Color_Original(6) = RGB(255, 255, 0)                                                      ' Yellow          Same as # 27   /  |fffd||fffd||fffd||fffd||fffd|
      Color_Original(7) = RGB(255, 0, 255)                                                      ' Magenta         Same as # 26  /
      Color_Original(8) = RGB(0, 255, 255)                                                      ' Cyan            Same as # 28 /
      Color_Original(9) = RGB(128, 0, 0)                                                        ' Dark Red        Same as # 30
      Color_Original(10) = RGB(0, 128, 0)                                                       ' Dard Green
      Color_Original(11) = RGB(0, 0, 128)                                                       ' Dark Blue
      Color_Original(12) = RGB(128, 128, 0)                                                     ' Olive Green
      Color_Original(13) = RGB(128, 0, 128)                                                     ' Patriarch       Same as # 29
      Color_Original(14) = RGB(0, 128, 128)                                                     ' Teal            Same as # 31
      Color_Original(15) = RGB(192, 192, 192)                                                   ' Grey, 25%
      Color_Original(16) = RGB(128, 128, 128)                                                   ' Grey, 50%
      Color_Original(17) = RGB(153, 153, 255)                                                   ' Slate Blue                  \
      Color_Original(18) = RGB(153, 51, 102)                                                    ' Plum            Same as # 54 \
      Color_Original(19) = RGB(255, 255, 204)                                                   ' Ivory                         \
      Color_Original(20) = RGB(204, 255, 255)                                                   ' Lavender Blue   Same as # 34   \
      Color_Original(21) = RGB(102, 0, 102)                                                     ' Purple                          \
      Color_Original(22) = RGB(255, 128, 128)                                                   ' Coral                            \
      Color_Original(23) = RGB(0, 102, 204)                                                     ' Ocean Blue                        \
      Color_Original(24) = RGB(204, 204, 255)                                                   ' Periwinkle                         \
      Color_Original(25) = RGB(0, 0, 128)                                                       ' Dark Blue       Same as # 11        > Used by charts/diagrams
      Color_Original(26) = RGB(255, 0, 255)                                                     ' Magenta         Same as #  7       /
      Color_Original(27) = RGB(255, 255, 0)                                                     ' Yellow          Same as #  6      /
      Color_Original(28) = RGB(0, 255, 255)                                                     ' Cyan            Same as #  8     /
      Color_Original(29) = RGB(128, 0, 128)                                                     ' Patriarch       Same as # 13    /
      Color_Original(30) = RGB(128, 0, 0)                                                       ' Dark Red        Same as #  9   /
      Color_Original(31) = RGB(0, 128, 128)                                                     ' Teal            Same as # 14  /
      Color_Original(32) = RGB(0, 0, 255)                                                       ' Blue            Same as #  5 /
      Color_Original(33) = RGB(0, 204, 255)                                                     ' Sky Blue
      Color_Original(34) = RGB(204, 255, 255)                                                   ' Lavender Blue   Same as # 20
      Color_Original(35) = RGB(204, 255, 204)                                                   ' Pale Green  (Dark Honey Dew)
      Color_Original(36) = RGB(255, 255, 153)                                                   ' Pale Yellow
      Color_Original(37) = RGB(153, 204, 255)                                                   ' Pale Blue
      Color_Original(38) = RGB(255, 153, 204)                                                   ' Rose
      Color_Original(39) = RGB(204, 153, 204)                                                   ' Orchid
      Color_Original(40) = RGB(255, 204, 153)                                                   ' Tan
      Color_Original(41) = RGB(51, 102, 255)                                                    ' Iris Blue
      Color_Original(42) = RGB(51, 204, 204)                                                    ' Robin
      Color_Original(43) = RGB(153, 204, 0)                                                     ' Lime
      Color_Original(44) = RGB(255, 204, 0)                                                     ' Gold
      Color_Original(45) = RGB(255, 153, 0)                                                     ' Orange
      Color_Original(46) = RGB(255, 102, 0)                                                     ' Pumpkin
      Color_Original(47) = RGB(102, 102, 153)                                                   ' Grey Blue
      Color_Original(48) = RGB(150, 150, 150)                                                   ' Grey, 40%-ish
      Color_Original(49) = RGB(0, 51, 102)                                                      ' Midnight Blue
      Color_Original(50) = RGB(51, 153, 102)                                                    ' Sea Green
      Color_Original(51) = RGB(0, 51, 0)                                                        ' Brunswick
      Color_Original(52) = RGB(51, 51, 0)                                                       ' Army Green
      Color_Original(53) = RGB(153, 51, 0)                                                      ' Brown
      Color_Original(54) = RGB(153, 51, 102)                                                    ' Plum            Same as # 18
      Color_Original(55) = RGB(51, 51, 153)                                                     ' Indigo
      Color_Original(56) = RGB(51, 51, 51)                                                      ' Grey, 80%

      Dim Color_Current As Long
      Color_Current = ThisWorkbook.Colors(Abs(ColorIndexNumber))
      If ColorIndexNumber < 0 Then Color_Current = Color_Original(Abs(ColorIndexNumber))

      Dim Color_Red   As Long
      Color_Red = Color_Current And 255

      Dim Color_Green As Long
      Color_Green = Color_Current \ 256 And 255

      Dim Color_Blue  As Long
      Color_Blue = Color_Current \ 256 ^ 2 And 255

      Dim Color_HTML As String
      Color_HTML = Right("0" & Hex(Color_Red), 2)                                               ' Red
      Color_HTML = Color_HTML & Right("0" & Hex(Color_Green), 2)                                ' Green
      Color_HTML = Color_HTML & Right("0" & Hex(Color_Blue), 2)                                 ' Blue


' * ' Always reset basic colors (which also have both vbConstants and Format Names, so really... DON'T EVER change these!)
      For ColorIndexNumber = 1 To 8                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|               |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            ActiveWorkbook.Colors(ColorIndexNumber) = Color_Original(ColorIndexNumber)
      Next


EF: ' End of Function
      Select Case InfoType
            Case 1:     rgbColorIndex = Color_Red
            Case 2:     rgbColorIndex = Color_Green
            Case 3:     rgbColorIndex = Color_Blue
            Case 4:     rgbColorIndex = Color_HTML
            Case Else:  rgbColorIndex = Color_Current
      End Select
      If Color_Current < 0 Or Color_Current > RGB(255, 255, 255) Then rgbColorIndex = xlNone

End Function
Public Function rgbColorScheme(Optional TestColor As Long = xlNone) As Long
Attribute rgbColorScheme.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' This little function will return the long value of the main color of the selected ColorScheme


' * ' Initialize
      Const BasicKey As String = "HKEY_CURRENT_USER\Software\Microsoft\Office\!Version!.0\Common\UI Theme"

      On Error Resume Next


' * ' Define variables
      Dim ColorOption(11) As Long
      ColorOption(0) = RGB(192, 192, 192)                                                       ' Grey, 25%    Excel 2003
      ColorOption(1) = RGB(218, 232, 245)                                                       ' Blue     \
      ColorOption(2) = RGB(106, 106, 106)                                                       ' Black     >  Excel 2007 to Excel 2010
      ColorOption(3) = RGB(223, 226, 231)                                                       ' Silver   /
      ColorOption(4) = RGB(255, 255, 255)                                                       ' White    \
      ColorOption(5) = RGB(241, 241, 241)                                                       ' Light     >  Excel 2013
      ColorOption(6) = RGB(222, 222, 222)                                                       ' Dark     /
      ColorOption(7) = RGB(241, 241, 241)                                                       ' Light    \
      ColorOption(8) = RGB(222, 222, 222)                                                       ' Medium    \
      ColorOption(9) = RGB(106, 106, 106)                                                       ' Dark       > Excel 2016 to Excel ????
      ColorOption(10) = RGB(255, 255, 255)                                                      ' White     /
      ColorOption(11) = RGB(230, 230, 230)                                                      ' Colorful /

      If TestColor < 0 Or TestColor > RGB(255, 255, 255) Then TestColor = xlNone

      Dim RegistryKey As String
      RegistryKey = Replace(BasicKey, "!Version!", Val(Application.Version))
      If Val(Application.Version) < 15 Then RegistryKey = Replace(RegistryKey, "UI Theme", "Theme")
      
      Dim WSO As Object                                                                         ' Windows Shell Object
      Set WSO = CreateObject("WScript.Shell")                                                   ' |fffd|       |fffd|     |fffd|

      Dim UIScheme As Long                                                                      ' User Interface Theme Color Scheme
      UIScheme = xlNone

      Dim UIColor As Long                                                                       ' User Interface Theme Color Index
      UIColor = ColorOption(0)                                                                  ' XL2003 is used as default


' * ' Test for color scheme
      If TestColor >= 0 Then
            UIColor = False
            For UIScheme = LBound(ColorOption) To UBound(ColorOption)
                  If TestColor = ColorOption(UIScheme) Then UIColor = True
            Next
            GoTo EF:
      End If


' * ' XL2003 and earlier, which has no color scheme
      If Val(Application.Version) < 12 Then GoTo EF:


' * ' Read color scheme from registry
      Err.Clear
      UIScheme = WSO.RegRead(RegistryKey)
    ' If Err.Number <> 0 Then Debug.Print Err.Number & ", " & Err.Description ' Used for Development


' * ' Return color long value
      If Val(Application.Version) < 15 Then                                                     ' XL2007 to XL2010
            If UIScheme < 1 Or UIScheme > 3 Then UIScheme = 2                                   ' Default for XL2007 and XL2010
            Select Case UIScheme
                  Case 1:     UIColor = ColorOption(1)                                          ' Blue
                  Case 3:     UIColor = ColorOption(2)                                          ' Black
                  Case Else:  UIColor = ColorOption(3)                                          ' Silver = Default   (2)
            End Select
      ElseIf Val(Application.Version) = 15 Then                                                 ' XL2013
            If UIScheme < 0 Or UIScheme > 2 Then UIScheme = 2                                   ' Default for XL2013
            Select Case UIScheme
                  Case 0:     UIColor = ColorOption(4)                                          ' White
                  Case 1:     UIColor = ColorOption(5)                                          ' Light
                  Case Else:  UIColor = ColorOption(6)                                          ' Dark = Default     (2)
            End Select
      Else                                                                                      ' XL2016 to ???
            If UIScheme < 0 Or UIScheme = 4 Or UIScheme > 5 Then UIScheme = 0                   ' Default for XL2016
            Select Case UIScheme
                  Case 1:     UIColor = ColorOption(7)                                          ' Light
                  Case 2:     UIColor = ColorOption(8)                                          ' Medium
                  Case 3:     UIColor = ColorOption(9)                                          ' Dark
                  Case 5:     UIColor = ColorOption(10)                                         ' White
                  Case Else:  UIColor = ColorOption(11)                                         ' Colorful = Default (0)
            End Select
      End If
      If UIColor = RGB(255, 255, 255) Then UIColor = RGB(255, 255, 254)                         ' since we also use white for text pages, we need to be
                                                                                                ' able to disquinse between text white or scheme white...

EF: ' End of Function
      Set WSO = Nothing
      Erase ColorOption

      rgbColorScheme = UIColor

End Function
Public Function rgbGrey(Optional Procentage As Double = -1, Optional UseScale As VbTriState = vbUseDefault) As Long
Attribute rgbGrey.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Define variable
      If UseScale = vbUseDefault Then
            UseScale = vbFalse
            If Procentage > 100 Then UseScale = vbTrue
      End If

      Dim TempGrey As Long
      If Procentage < 0 Then        ' \
            TempGrey = rgbGray      '  > Make sure, we don't mix up the constant 'rgbGrey', with this function 'rgbGrey()'
            GoTo EF:                ' /
      End If


' * ' Calculate grey
      If UseScale = True Then
            If Procentage < 0 Then
                  TempGrey = rgbGreySystem
            ElseIf Procentage <= 0 Then
                  TempGrey = rgbBlack
            ElseIf Procentage >= 255 Then
                  TempGrey = rgbWhite
            Else
                  Procentage = Round(Procentage, 0)
                  TempGrey = RGB(Procentage, Procentage, Procentage)
            End If
      Else
            If Procentage < 0 Then
                  TempGrey = rgbGreySystem
            ElseIf Procentage <= 0 Then
                  TempGrey = rgbWhite
            ElseIf Procentage >= 100 Then
                  TempGrey = rgbBlack
            Else
                  Procentage = 100 - WorksheetFunction.Min(Procentage, 100)
                  Procentage = WorksheetFunction.Min(WorksheetFunction.Max(0, 256 * Procentage / 100), 255)
                  TempGrey = RGB(Procentage, Procentage, Procentage)
            End If
      End If


EF: ' End of Function
      rgbGrey = TempGrey

End Function
Public Function rgbGreySystem(Optional TestColor As Long = xlNone) As Long
Attribute rgbGreySystem.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' This function will return the long value of the 'System Grey' color.
'
' This grey color is different, depending on the version of Excel.
' This grey color is usually the color used for default cell borders.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim ColorOption(11 To 16) As Long
      ColorOption(11) = RGB(212, 208, 200)                                                      ' System Grey for Excel 2003
      ColorOption(12) = RGB(212, 215, 229)                                                      ' System Grey for Excel 2007
      ColorOption(14) = RGB(218, 220, 221)                                                      ' System Grey for Excel 2010
      ColorOption(15) = RGB(212, 212, 212)                                                      ' System Grey for Excel 2013
      ColorOption(16) = RGB(212, 212, 212)                                                      ' System Grey for Excel 2016+

      Dim Counter As Long
      If TestColor < 0 Or TestColor > RGB(255, 255, 255) Then TestColor = xlNone

      Dim UIColor As Long
      UIColor = ColorOption(WorksheetFunction.Min(WorksheetFunction.Max(LBound(ColorOption), Val(Application.Version)), UBound(ColorOption)))


' * ' Test for system grey
      If TestColor >= 0 Then
            UIColor = False
            For Counter = LBound(ColorOption) To UBound(ColorOption)
                  If Counter <> 13 And TestColor = ColorOption(Counter) Then UIColor = True     ' Version 13 of Excel was never made/released
            Next
            GoTo EF:
      End If


EF: ' End of Function
      Erase ColorOption

      rgbGreySystem = GetSetting(Module_DataSavename, Module_SectionAppID, "Color, Grey, System", UIColor)

End Function
Public Sub Resetup_Colors(Optional SheetName_SetColorSchemeBackground As String = vbNullString, Optional WS_Password As String = vbNullString)
Attribute Resetup_Colors.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' This macro will reset the colors of 'ThisWorkbook' for the ColorIndexes that are universally used.
'
' If you provide a worksheet name, the macro will also loop through all cells in 'UsedRange',
' and color those cells accordingly to a few basic rules - the main rule being, that if the cells are not
' already colored, the cell will be given the 'vbColorScheme' color as interior color.


' * ' Initialize
      On Error Resume Next


' * ' Define variale
      Dim WB As Workbook
      If ThisWorkbook.IsAddin = False Then
            Set WB = ThisWorkbook
      Else
            Set WB = ActiveWorkbook
      End If

      Dim WS As Worksheet
      If Len(SheetName_SetColorSchemeBackground) > 1 Then
            Set WS = WB.Worksheets(SheetName_SetColorSchemeBackground)
      Else
            Set WS = ActiveSheet
      End If
      If Len(WS.Name) < 1 Then GoTo ES:

      Dim Celle   As Range
      Dim Omraade As Range

      Dim Counter    As Long
      Dim LastRow    As Long
      Dim LastColumn As Long

      Dim ProtectionFlag As Boolean
      ProtectionFlag = WS.ProtectContents

      Dim ColorFound As Boolean

' * ' Prepare sheet
      WS.DisplayPageBreaks = False
      WS.Unprotect WS_Password


' * ' Find area
      If Len(WS.Name) > 0 Then
            For Counter = 1 To (WS.UsedRange.Row + WS.UsedRange.Rows.Count)
                  If UCase$(WS.Range("A" & Counter).Value) = UCase$("Hide") Then Exit For
            Next
            LastRow = Counter

            For Counter = 1 To (WS.UsedRange.Column + WS.UsedRange.Columns.Count)
                  If UCase$(WS.Cells(1, Counter).Value) = UCase$("Hide") Then Exit For
            Next
            LastColumn = Counter

          ' MsgBox "Column" & vbTab & ":  " & LastColumn & vbNewLine & "Row" & vbTab & ":  " & LastRow

            Counter = rgbColorScheme
            Set Omraade = WS.Range("$A$1:" & Cells(LastRow, LastColumn).Address)
            For Each Celle In Omraade
                  If UCase$(WS.Cells(1, Celle.Column).Value) = UCase$("Input") Then
                        If Celle.Font.Color = rgbFontInput And Celle.Locked = False Then
                              With Celle.MergeArea
                                    If .Interior.Color <> rgbInteriorPaperInput Then .Interior.Color = rgbInteriorInput
                                    With .Borders(xlEdgeTop)
                                          .LineStyle = xlContinuous
                                          .Weight = xlThin
                                          .Color = vbBlack
                                    End With
                                    With .Borders(xlEdgeLeft)
                                          .LineStyle = xlContinuous
                                          .Weight = xlThin
                                          .Color = vbBlack
                                    End With
                                    With .Borders(xlEdgeRight)
                                          .LineStyle = xlContinuous
                                          .Weight = xlThin
                                          .Color = vbBlack
                                    End With
                                    With .Borders(xlEdgeBottom)
                                          .LineStyle = xlContinuous
                                          .Weight = xlThin
                                          .Color = vbBlack
                                    End With
                              End With
                        End If
                  End If

                  If Celle.Interior.Color = rgbInteriorInput Or Celle.Interior.Color = rgbInteriorPaperInput Then
                        Celle.MergeArea.Font.Color = rgbFontInput
                        Celle.MergeArea.Locked = False
                        Celle.MergeArea.FormulaHidden = False
                  End If

                  If Celle.Interior.ColorIndex = xlNone Then Celle.MergeArea.Interior.Color = Counter

                  ColorFound = False
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorAnniversary Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorBadIllSick Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorBirthday Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorCompany Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorDesign Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorEducation Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorError Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorHeader Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorHealthCare Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorHoliday Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorInfo Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorInput Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorIntermediate Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorLeave Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorNotice Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorOther Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorPaidOff Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorPaper Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorPaperInput Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorPaperResult Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorPaperSection Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorResult Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorTableHeader Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorTableStripe Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorVacation Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorVacationOff Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorWarning Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorWeddingday Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorWeekday Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorWeekend Then ColorFound = True
                  If ColorFound = False Then If Celle.Interior.Color = rgbInteriorWorkday Then ColorFound = True

                  If ColorFound = False Then Celle.MergeArea.Interior.Color = Counter
            Next
      End If


' * ' Reset color indexes
      With WB
            .Colors(1) = vbBlack                                                                ' ColorIndex  1
            .Colors(2) = vbWhite                                                                ' ColorIndex  2
            .Colors(3) = vbRed                                                                  ' ColorIndex  3
            .Colors(4) = vbGreen                                                                ' ColorIndex  4
            .Colors(5) = vbBlue                                                                 ' ColorIndex  5
            .Colors(6) = vbYellow                                                               ' ColorIndex  6
            .Colors(7) = vbMagenta                                                              ' ColorIndex  7
            .Colors(8) = vbCyan                                                                 ' ColorIndex  8

            .Colors(13) = rgbColorScheme                                                        ' ColorIndex 13
            .Colors(14) = rgbFontSpecial                                                        ' ColorIndex 14   ' Alternative color for font, that can be used for special purposes...
            .Colors(15) = rgbFontZero                                                           ' ColorIndex 15   ' Alternative color for zero
            .Colors(34) = rgbInteriorIntermediate                                               ' ColorIndex 34
            .Colors(35) = rgbInteriorInput                                                      ' ColorIndex 35   ' Input  Cells Interior
            .Colors(42) = rgbInteriorHeader                                                     ' ColorIndex 42
            .Colors(43) = rgbInteriorResult                                                     ' ColorIndex 43   ' Result Cells Interior
            .Colors(54) = rgbGreySystem                                                         ' ColorIndex 54
      End With


ES: ' End of Sub
      If ProtectionFlag = True Then WS.Protect Password:=WS_Password, UserInterfaceOnly:=True

      Set WB = Nothing

End Sub
Public Sub WUF_Colors(WUF As Object)
Attribute WUF_Colors.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' This macros is for coloring my UserForms with my perferred colors.
'
' Just call this macro, from the 'UserForm_Initialize' with:  Application.Run "WUF_Colors", Me
'
' That way all input boxes will be given the same interior colors as given in a normal worksheet.
'
' The macro work by looking at the type of object, and if it is a TextBox or ComboxBox, the macro will
' test if unlocked, and if it is the case, 'Input' colors are applied, or, if locked, 'Intermediate' colors are applied
'

' * ' Initialize
      Const Font_Name = "Tahoma"
      Const Font_Size = 8
      Const List_Font = "Lucida Console"

      On Error Resume Next


' * ' Define variables
      Dim CTRL As Object


' * ' Color UserForm
      WUF.BackColor = rgbUserForm
      With WUF.Font
            .Name = Font_Name
            .Size = Font_Size
      End With
      For Each CTRL In WUF.Controls
            With CTRL.Font
                  .Name = Font_Name
                  .Size = Font_Size
            End With
            CTRL.BackColor = WUF.BackColor
            If CTRL.ForeColor <> rgbDisabledText Then CTRL.ForeColor = rgbBlack
            
            If TypeName(CTRL) = "TextBox" Or TypeName(CTRL) = "ComboBox" Or TypeName(CTRL) = "RefEdit" Then
                  If CTRL.Locked = True Then
                        If Left$(CTRL.Name, 3) = "RB_" Then
                              CTRL.BackColor = rgbInteriorResult                                ' RB = Result Box
                        Else
                              CTRL.BackColor = rgbInteriorIntermediate                          ' Locked Info Box
                        End If
                        CTRL.ForeColor = rgbBlack
                        If Left$(CTRL.Name, 3) = "LB_" Then CTRL.Font.Name = List_Font
                  Else
                        CTRL.BackColor = rgbInteriorInput                                       ' Input Box
                        If CTRL.ForeColor <> rgbDisabledText Then CTRL.ForeColor = rgbFontInput
                  End If
            End If

            Select Case TypeName(CTRL)
                  Case "Frame":     CTRL.BorderColor = rgbBlack
                  Case "ListBox":   CTRL.BackColor = rgbInteriorIntermediate: CTRL.Font.Name = List_Font
            End Select

            If CTRL.Enabled = False And TypeName(CTRL) <> "Frame" Then CTRL.BackColor = WUF.BackColor
            If CTRL.Enabled = False And TypeName(CTRL) <> "CommandButton" Then CTRL.ForeColor = rgbDisabledText

            If TypeName(CTRL) = "Label" And CTRL.Name = "Lb_Copyright" Then
                  With CTRL
                        .ForeColor = rgbDisabledText
                        .Caption = "(C) 2006 - " & Year(Date) & "  Dan Elgaard   (www.EXCELGAARD.dk)"
                  End With
            End If
      Next


ES: ' End of Sub
      Set WUF = Nothing
      Set CTRL = Nothing

      Err.Clear

End Sub
Sub TableStyle_EXCELGAARD(Optional ByVal TableWB As Excel.Workbook)

' * ' Initialize
      Const TableStyle_Name As String = "EXCELGAARD"

      On Error Resume Next


' * ' Define variables
      If TableWB Is Nothing Then Set TableWB = ActiveWorkbook


' * ' Create table style
      TableWB.TableStyles.Add (TableStyle_Name)
      With TableWB
            .DefaultTableStyle = TableStyle_Name
    
            With .TableStyles(TableStyle_Name)
                  .ShowAsAvailableTableStyle = True
                  .ShowAsAvailableSlicerStyle = False
                  .ShowAsAvailablePivotTableStyle = False
                  
                  With .TableStyleElements(xlWholeTable)
                        .Clear
                        With .Font
                              .Color = rgbBlack
                        End With
                        With .Interior
                              .Pattern = xlNone
                              .TintAndShade = 0
                              .PatternTintAndShade = 0
                        End With
                        With .Borders(xlEdgeTop)
                              .Color = rgbBlack
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                        With .Borders(xlEdgeLeft)
                              .Color = rgbBlack
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                        With .Borders(xlEdgeRight)
                              .Color = rgbBlack
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                        With .Borders(xlEdgeBottom)
                              .Color = rgbBlack
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                        With .Borders(xlInsideVertical)
                              .Color = rgbBorderInside
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                        With .Borders(xlInsideHorizontal)
                              .Color = rgbBorderInside
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                  End With
                  With .TableStyleElements(xlRowStripe1)
                        With .Interior
                              .Pattern = xlSolid
                              .Color = rgbInteriorTableStripe
                        End With
                  End With
                  With .TableStyleElements(xlHeaderRow)
                         .Font.Bold = True
                        With .Interior
                              .Pattern = xlSolid
                              .Color = rgbInteriorTableHeader
                        End With
                        With .Borders(xlEdgeBottom)
                              .Color = rgbBorderOutside
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                  End With
                  With .TableStyleElements(xlTotalRow)
                        .Font.Bold = True
                        With .Interior
                              .Pattern = xlSolid
                              .Color = rgbInteriorResult
                        End With
                        With .Borders(xlEdgeTop)
                              .Color = rgbBorderOutside
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                        With .Borders(xlEdgeBottom)
                              .Color = rgbBorderOutside
                              .Weight = xlThin
                              .LineStyle = xlContinuous
                        End With
                  End With
            End With
      End With


ES: ' End of Sub
      Set TableWB = Nothing

End Sub
Public Function RGBString(rgbColor As Long) As String
Attribute RGBString.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim Red As Long
      Red = rgbColor Mod 256

      Dim Green As Long
      Green = (rgbColor Mod 256 ^ 2) \ 256

      Dim Blue As Long
      Blue = rgbColor \ (256 ^ 2)


EF: ' End of Function
      RGBString = "RGB ( " & Red & " , " & Green & " , " & Blue & " )"
      If RGB(Red, Green, Blue) <> rgbColor Then RGBString = "RGB: " & rgbColor & " <> " & RGB(Red, Green, Blue)

End Function
Sub RGB_String_Test()

      Debug.Print RGBString(rgbPink)

End Sub
Sub Resetup_Colors_Test()

      Call Resetup_Colors(ActiveSheet.Name)

End Sub
Sub TableStyle_EXCELGAARD_Test()
      
' * ' Initialize
      Const TableStyle_Name As String = "EXCELGAARD"

      On Error Resume Next


' * ' Define variables
      Dim WB As Excel.Workbook
      Set WB = ActiveWorkbook

      Dim TS As TableStyle


' * ' Delete all table styles
      For Each TS In WB.TableStyles
            If TS.Name <> TableStyle_Name Then TS.Delete
      Next


ES: ' End of Sub
      Call TableStyle_EXCELGAARD(WB)

      Set WB = Nothing

End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation.


' Module level constant for development purpose
  Private Const Module_DebugPrint As Boolean = False

Option Explicit
Private Sub Workbook_Open()

' * ' Initialize
      On Error Resume Next

      If ThisWorkbook.Path Like "http*" Then
            Application.DisplayAlerts = False
            If Application.LanguageSettings.LanguageID(2) = 1030 Or Application.LanguageSettings.LanguageID(2) = 1080 Then
                  If MsgBox("Denne regnearksfil skal gemmes p|fffd| computeren f|fffd|r regnearksfilen kan benyttes." & vbNewLine & vbNewLine & "Gem regnearksfilen nu?", vbYesNo + vbExclamation) = vbNo Then ThisWorkbook.Close SaveChanges:=False
            Else
                  If MsgBox("This workbook must be saved before using it." & vbNewLine & vbNewLine & "Save it now?.", vbYesNo + vbExclamation) = vbYes Then ThisWorkbook.Close SaveChanges:=False
            End If
            ThisWorkbook.Save
      End If

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .FormulaBarHeight = 1
            .DisplayAlerts = False
            .ScreenUpdating = False
            .CellDragAndDrop = True
            .DisplayStatusBar = True
            .AskToUpdateLinks = False
            .WindowState = xlMaximized
          ' .PrintCommunication = False                           ' Won't work in XL2007 or earlier
            .IgnoreRemoteRequests = False
            .Calculation = xlCalculationManual
      End With
      ThisWorkbook.UpdateRemoteReferences = True
      ThisWorkbook.UpdateLinks = xlUpdateLinksAlways


' * ' Define variable
      Dim Language As String
      If Language = vbNullString Then
            If Application.LanguageSettings.LanguageID(2) = 1030 Or Application.LanguageSettings.LanguageID(2) = 1080 Then Language = "Danish"
      End If

      Dim QuitFlag As Boolean
      QuitFlag = False


' * ' Workbook specific
      Call Resetup
      Call Workbook_BeforeClose(True)


' * ' Version warning
      If xlRelease("Version") < xlExcel2010 And ThisWorkbook.IsAddin = True Then
                  QuitFlag = True
                  Application.Cursor = xlDefault
                  Application.Interactive = True
                  Application.ScreenUpdating = True
                  Select Case Language
                        Case "Danish":    MsgBox "Dette Excel tilf|fffd|jelsesprogram kr|fffd|ver mindst Excel 2013 eller nyere, og vil IKKE virke med " & xlRelease & " eller |fffd|ldre versioner!" & vbNewLine & vbNewLine & "Opdater din Excel f|fffd|r du benytter dette Excel tilf|fffd|jelsesprogram!", vbOKOnly + vbCritical
                        Case Else:        MsgBox "This Excel addin requires Excel 2013 or newer, and will NOT work with " & xlRelease & " or older versions!" & vbNewLine & vbNewLine & "Update your Excel before using this Excel addin!", vbOKOnly + vbCritical
                  End Select
      ElseIf ThisWorkbook.IsAddin = False Then
            If xlRelease("Version") < xlExcel2010 Then
                  QuitFlag = True
                  Application.Cursor = xlDefault
                  Application.Interactive = True
                  Application.ScreenUpdating = True
                  Select Case Language
                        Case "Danish":    MsgBox "Denne Excel fil kr|fffd|ver mindst Excel 2013 eller nyere, og vil IKKE virke med " & xlRelease & " eller |fffd|ldre versioner!" & vbNewLine & vbNewLine & "Opdater din Excel f|fffd|r du benytter denne Excel fil!", vbOKOnly + vbCritical
                        Case Else:        MsgBox "This Excel workbook requires Excel 2013 or newer, and will NOT work with " & xlRelease & " or older versions!" & vbNewLine & vbNewLine & "Update your Excel before using this Excel workbook!", vbOKOnly + vbCritical
                  End Select
            ElseIf xlRelease("Version") < xlExcel2013 Then
                  QuitFlag = False
                  Application.Cursor = xlDefault
                  Application.Interactive = True
                  Application.ScreenUpdating = True
                  Select Case Language
                        Case "Danish":    MsgBox "Denne Excel fil kr|fffd|ver mindst Excel 2013 eller nyere!" & vbNewLine & vbNewLine & "N|fffd|r dette s|fffd| er sagt, s|fffd| er der en rimelig sandsynlighed for at Excel filen m|fffd|ske ogs|fffd| vil virke med " & xlRelease & ", da denne version er relativ kompatibel." & vbNewLine & vbNewLine & "Men, virker det ikke, s|fffd| skal du opdater din Excel f|fffd|r du benytter denne Excel fil!", vbOKOnly + vbExclamation
                        Case Else:        MsgBox "This Excel workbook requires at least Excel 2013 or newer!" & vbNewLine & vbNewLine & "However, there a good chance that the workbook will work with " & xlRelease & ", since this version of Excel is relative compatible." & vbNewLine & vbNewLine & "But, if it doesn't work, you must update your Excel before using this workbook!", vbOKOnly + vbExclamation
                  End Select
            End If
      End If

ES: ' End of Sub
      With Application
            .ExecuteExcel4Macro "SHOW.TOOLBAR(""Ribbon"",True)"
            .Calculation = xlCalculationAutomatic
            .CommandBars("Column").Enabled = True
            .CommandBars("Cell").Enabled = True
            .CommandBars("Row").Enabled = True
            .CommandBars("Ply").Enabled = True
            .EnableCancelKey = xlInterrupt
            .DisplayStatusBar = True
            .ScreenUpdating = True
            .DisplayAlerts = Not (QuitFlag)
            .EnableEvents = True
            .Interactive = True
            .Cursor = xlDefault
            .StatusBar = False
      End With

      With ActiveWindow
            .DisplayWorkbookTabs = True
            .DisplayHorizontalScrollBar = True
      End With

      If ThisWorkbook.IsAddin = False Then
            If QuitFlag = False Then
                  Application.OnTime Now + TimeSerial(0, 0, 1), "ThisWorkbook.Workbook_Saved"
            Else
                  ThisWorkbook.Saved = True                             ' In case that volatile functions are in use...
                  If Workbooks.Count < 2 Then
                        Application.Quit
                  Else
                        ThisWorkbook.Close SaveChanges:=False
                  End If
            End If
      ElseIf QuitFlag = True Then
            ThisWorkbook.Saved = True                                   ' In case that volatile functions are in use...
            ThisWorkbook.Close SaveChanges:=False
      End If

End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)

' * ' Initialize
      On Error Resume Next

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .DisplayAlerts = False
            .ScreenUpdating = False
            .Calculation = xlCalculationManual
      End With


' * ' Define variables
      Dim WB As Workbook
      Set WB = ThisWorkbook

      Dim WBT As Object


' * ' Delete any worksheet from last test run
      For Each WBT In WB.Sheets
          ' If WBT.CodeName <> SWS_Contents.CodeName Then WBT.Delete
      Next


ES: ' End of Sub
      Set WB = Nothing
      Set WBT = Nothing

      With Application
            .Calculation = xlCalculationAutomatic
            .ScreenUpdating = True
            .DisplayAlerts = True
            .EnableEvents = True
            .Cursor = xlDefault
      End With

      With ActiveWindow
            .DisplayWorkbookTabs = True
            .DisplayHorizontalScrollBar = True
      End With

End Sub
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

' * ' Initialize
      On Error Resume Next

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .FormulaBarHeight = 1
            .DisplayAlerts = False
            .ScreenUpdating = False
            .WindowState = xlMaximized
          ' .PrintCommunication = False                           ' Won't work in XL2007 or earlier
            .Calculation = xlCalculationManual
      End With


' * ' Allways save in English
      Call Resetup(True)


ES: ' End of Sub
      Application.EnableEvents = True

End Sub
Private Sub Workbook_AfterSave(ByVal Success As Boolean)

' * ' Initialize
      On Error Resume Next


' * ' Reset to other language than English, if needed
      Call Resetup


ES: ' End of Sub
      With Application
            .Calculation = xlCalculationAutomatic
            .EnableCancelKey = xlInterrupt
            .ScreenUpdating = True
            .DisplayAlerts = True
            .EnableEvents = True
            .Interactive = True
            .Cursor = xlDefault
            .StatusBar = False
      End With

    ' Application.OnTime Now + TimeSerial(0, 0, 1), "ThisWorkbook.Workbook_Saved"

End Sub
Private Sub Workbook_Saved(Optional Dont_Activate_Custom_Ribbon As Boolean = False)

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      If Custom_Ribbon_Visible = False Then Dont_Activate_Custom_Ribbon = True


' * ' Active ribbon
      If Dont_Activate_Custom_Ribbon = False Then Application.Run "EXCELGAARD_RibbonX_ActivateControl", Custom_Ribbon_CodeName


ES: ' End of Sub
      ThisWorkbook.Saved = True

End Sub
Attribute VB_Name = "UDF_LoadURLPicture"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation

' Workbook MUST have reference to 'OLE Automation' library


' User data types
  Private Type GUID                                                                       ' Declare a UDT to store a GUID for the IPicture OLE Interface
      Data1 As Long
      Data2 As Integer
      Data3 As Integer
      Data4(0 To 7) As Byte
  End Type

 #If VBA7 Then
      Private Type BitmapInfo                                                             ' User DataType to store the bitmap information
            Size As Long
            Type As Long
            PictureHandle As LongPtr
            PaletteHandle As LongPtr
      End Type

      Private Type GDIStartupInfo                                                         ' Declare a UDT to store the GDI+ Startup information
            GDIPlusVersion           As Long
            DebugEventCallback       As LongPtr
            SuppressBackgroundThread As Long
            SuppressExternalCodecs   As Long
      End Type
 #Else
      Private Type BitmapInfo                                                             ' User DataType to store the bitmap information
            Size As Long
            Type As Long
            PictureHandle As Long
            PaletteHandle As Long
      End Type

      Private Type GDIStartupInfo                                                         ' Declare a UDT to store the GDI+ Startup information
            GDIPlusVersion           As Long
            DebugEventCallback       As Long
            SuppressBackgroundThread As Long
            SuppressExternalCodecs   As Long
      End Type
 #End If

' API calls
 #If VBA7 Then
      Private Declare PtrSafe Sub GdiplusShutdown Lib "GDIPlus" (ByVal Token As LongPtr)
      Private Declare PtrSafe Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As LongPtr) As Long
      Private Declare PtrSafe Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal FileName As LongPtr, Bitmap As LongPtr) As Long
      Private Declare PtrSafe Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal Bitmap As LongPtr, ReturnValue As LongPtr, ByVal Background As LongPtr) As Long
      Private Declare PtrSafe Function GdiplusStartup Lib "GDIPlus" (Token As LongPtr, InputBuffer As GDIStartupInfo, Optional ByVal OutputBuffer As LongPtr = 0) As Long
      
      Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As BitmapInfo, RefIID As GUID, ByVal PictureHandle As Long, IPic As IPicture) As Long
      
      Private Declare PtrSafe Function MakeDIRs Lib "ImageHLP.DLL" Alias "MakeSureDirectoryPathExists" (ByVal lpPath As String) As Long
      Private Declare PtrSafe Function DownloadURLToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal Caller As Long, ByVal SourceURL As String, ByVal DestinationFile As String, ByVal GetURL As Long, ByVal CB As Long) As Long
 
      Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
      Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
      Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long
      Private Declare PtrSafe Function OpenClipboard Lib "user32" (Optional ByVal hwnd As Long = 0) As Long
 #Else
      Private Declare Sub GdiplusShutdown Lib "GDIPlus" (ByVal Token As Long)
      Private Declare Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As Long) As Long
      Private Declare Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal FileName As Long, Bitmap As Long) As Long
      Private Declare Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal Bitmap As Long, ReturnValue As Long, ByVal Background As Long) As Long
      Private Declare Function GdiplusStartup Lib "GDIPlus" (Token As Long, InputBuffer As GDIStartupInfo, Optional ByVal OutputBuffer As Long = 0) As Long
      Private Declare Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As BitmapInfo, RefIID As GUID, ByVal PictureHandle As Long, IPic As IPicture) As Long
      
      Private Declare Function MakeDIRs Lib "ImageHLP.DLL" Alias "MakeSureDirectoryPathExists" (ByVal lpPath As String) As Long
      Private Declare Function DownloadURLToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal Caller As Long, ByVal SourceURL As String, ByVal DestinationFile As String, ByVal GetURL As Long, ByVal CB As Long) As Long
 
      Private Declare Function CloseClipboard Lib "user32" () As Long
      Private Declare Function EmptyClipboard Lib "user32" () As Long
      Private Declare Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long
      Private Declare Function OpenClipboard Lib "user32" (Optional ByVal hwnd As Long = 0) As Long
 #End If

Option Private Module   ' To prevent the function(s) from appearing the worksheet list of functions (it's a 'for macros only' function)
Option Explicit
Function LoadURLPicture(ByVal PictureFullURL As String, Optional ForceFetch As Boolean = False) As Variant
Attribute LoadURLPicture.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' The purpose of this function is to insert pictures directly into either UserForms or as icons in the Ribbon
'
' The 'OLE Library' already has a function for this, called 'LoadPicture', but that function will only allow you to insert pictures
' into UserForms from a local path.
'
' This function, 'LoadURLPicture', will not only allow you to also insert pictures as icons into the ribbon, but also allow you to
' fetch those pictures either directly from an URL on your Intranet or from the Internet, and will also work with UNC-paths (\\).
'
' And, as an extra added bonus the function will also give you the opportunity to use a huge collection of predesigned user icons for
' either your UserForm or in your ribbons - read more about all this at  www.EXCELGAARD.dk
'
' Finally you can use the good old FaceIDs from the menus and toolbars.
' All you have to do is to pass the picture argument with the prefix of "FaceID", and then the number of the FaceID.
'
' Examples: Set MyPicture  =  LoadURLPicture("http://www.EXCELGAARD.dk/Files/Sample Logo File.GIF")   ' Load picture into variable from Internet
'           Set MyPicture  =  LoadURLPicture("C:\Pictures\MyPicture.JPG")                             ' Load picture into variable from local path
'           Set MyPicture  =  LoadURLPicture("uiEXCELGAARD")                                          ' Use one of the custom icons of the function (.PNG - transparent background))
'           Image1.Picture =  LoadURLPicture("uiEXCELGAARD.BMP")                                      ' Use one of the custom icons in an UserForm  (.BMP - grey background))
'           Image1.Picture =  LoadURLPicture("FaceID 1234")                                           ' Use one of the FaceIDs in an UserForm
'
'           Sub RibbonX_GetImage(RibCTRL As IRibbonControl, ByRef Item_Image)                         ' \
'                                                                                                     '  \
'                 Set Item_Image = LoadURLPicture("uiEXCELGAARD")                                     '   \
'                 Set Item_Image = LoadURLPicture("FaceID 1234")                                      '    > Callback procedure for using the function to provide icons to the Ribbon
'                 Set Item_Image = LoadURLPicture("C:\MyIcons\MyIcon.PNG")                            '   /
'                                                                                                     '  /
'           End Sub                                                                                   ' /
'
' Notice:   The FaceIDs are original only 16 |fffd| 16 pixels in sixe, so you should probably not use these with too much enlargement :-)


' * ' Initialize
      If Replace(PictureFullURL, " ", vbNullString) = vbNullString Then Exit Function     ' Empty string passed = no picture to fetch

      On Error Resume Next


' * ' Local path and filename of last fetched picture
      PictureFullURL = Replace(Replace(Replace(Replace(Replace(Replace(PictureFullURL, "|fffd|", "A"), "|fffd|", "a"), "|fffd|", "O"), "|fffd|", "o"), "|fffd|", "Aa"), "|fffd|", "aa")
      If UCase$(Left$(Replace(PictureFullURL, " ", vbNullString), 4)) = UCase$("Last") Then
            LoadURLPicture = GetSetting("EXCELGARD", "LoadURLPicture", "Last Picture", vbNullString)
            Exit Function
      End If


' * ' Define variables
      Dim FaceID_Number As Long

      Dim SubURL As String
      SubURL = UCase$(Replace(Replace(Replace(Replace(Replace(Replace(PictureFullURL, ".", vbNullString), ",", vbNullString), "-", vbNullString), ":", vbNullString), "=", vbNullString), " ", vbNullString))
      If Left$(SubURL, 6) = "FACEID" Then
            SubURL = Replace(SubURL, "FACEID", vbNullString)
            FaceID_Number = Val(SubURL)
            If FaceID_Number < 1 Then FaceID_Number = 0
      End If


      SubURL = vbNullString
      If InStrRev(PictureFullURL, "/") < 1 Then                                           ' No URL separator and...
      If InStrRev(PictureFullURL, "\") < 1 Then                                           ' ...no path separator either = we've requested one of the  online icons
            If UCase$(Left$(PictureFullURL, 7)) = UCase$("msoIcon") Then
                  PictureFullURL = "msoIcon" & WorksheetFunction.Proper(Replace(Replace(UCase$(PictureFullURL), UCase$("msoIcon"), vbNullString), UCase$("Alert"), "Alert"))
            Else
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("ms") Then PictureFullURL = "ms" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("ui") Then PictureFullURL = "ui" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("vb") Then PictureFullURL = "vb" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("xl") Then PictureFullURL = "xl" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
            End If

            Select Case Left$(PictureFullURL, 2)
                  Case "ms":  SubURL = "Assistant"
                  Case "vb":  SubURL = "MsgBox"
                  Case "xl":  SubURL = "RibbonX"
                  Case "ui":  SubURL = "User"
            End Select
            PictureFullURL = "http://www.EXCELGAARD.dk/Files/Icons" & Replace("/" & SubURL & "/" & PictureFullURL, "//", "/")

            If UCase$(Right$(PictureFullURL, 4)) <> ".BMP" And UCase$(Right$(PictureFullURL, 4)) <> ".GIF" And UCase$(Right$(PictureFullURL, 4)) <> ".PNG" Then
                  PictureFullURL = PictureFullURL & ".BMP"                          ' Default icon format is .BMP - use .PNG, if inserting icon into the ribbon
            Else
                  PictureFullURL = Left$(PictureFullURL, InStrRev(PictureFullURL, ".")) & UCase$(Mid$(PictureFullURL, InStrRev(PictureFullURL, ".") + 1))
            End If
      End If
      End If

      Dim PictureFormatOK As Boolean
      Select Case UCase$(Mid$(PictureFullURL, InStrRev(PictureFullURL, ".")))       ' Test if picture is of one of the allowed formats in a UserForm
            Case ".BMP":      PictureFormatOK = True
            Case ".CUR":      PictureFormatOK = True
            Case ".DB":       PictureFormatOK = True
            Case ".EMF":      PictureFormatOK = True
            Case ".ICO":      PictureFormatOK = True
            Case ".GIF":      PictureFormatOK = True
            Case ".JPG":      PictureFormatOK = True
            Case ".JPEG":     PictureFormatOK = True
            Case ".PNG":      PictureFormatOK = True                                ' For Ribbons, but not for UserForms
            Case ".WMF":      PictureFormatOK = True
            Case Else:        PictureFormatOK = False
      End Select
      If PictureFormatOK = False And FaceID_Number < 1 Then Exit Function

      Dim http As Object
      Set http = CreateObject("MSXML2.XMLHTTP")

      Dim Path_Temp As String                                                       ' Local Temp Path
      If Replace(Path_Temp, " ", vbNullString) = vbNullString Then Path_Temp = Environ("TMP")
      If Replace(Path_Temp, " ", vbNullString) = vbNullString Then Path_Temp = Environ("Temp")
      If Replace(Path_Temp, " ", vbNullString) = vbNullString Then Path_Temp = "C:\Temp\"
      If Right$(Path_Temp, 1) <> Application.PathSeparator Then Path_Temp = Path_Temp & Application.PathSeparator
      Path_Temp = Path_Temp & "EXCELGAARD\LoadURLPictures\"
      If Left$(Path_Temp, 1) = "\" And Left$(Path_Temp, 2) <> "\\" Then Path_Temp = "\" & Path_Temp
      SetAttr Path_Temp, vbNormal

      Dim File_Temp As String
      File_Temp = Mid$(PictureFullURL, InStrRev(PictureFullURL, "/") + 1)
      If File_Temp = PictureFullURL Then File_Temp = Mid$(PictureFullURL, InStrRev(PictureFullURL, Application.PathSeparator) + 1)
      If File_Temp = PictureFullURL And FaceID_Number < 1 Then Exit Function

      Dim LocalCopy As Boolean
      LocalCopy = False

     #If VBA7 Then
            Dim Pic_Handle As LongPtr
     #Else
            Dim Pic_Handle As Long
     #End If


' * ' The image requested is one of the good old FaceIDs :-)
      If FaceID_Number > 0 Then
            Dim CB As CommandBarControl
            Set CB = CommandBars.Add(Position:=msoBarFloating, MenuBar:=False, temporary:=True).Controls.Add(Type:=msoControlButton, temporary:=True)

            CB.FaceId = FaceID_Number
            CB.CopyFace

            OpenClipboard
            Pic_Handle = GetClipboardData(2)
            CloseClipboard

            Set LoadURLPicture = CreateIPictureObject(Pic_Handle)

            CB.Delete
            Set CB = Nothing
            
            GoTo EF:
      End If


' * ' Make sure local path exists before downloading
      MakeDIRs Path_Temp
      SetAttr Path_Temp, vbNormal
      If Dir(Left$(Path_Temp, InStrRev(Path_Temp, Application.PathSeparator) - 1), vbDirectory + vbHidden + vbSystem) = vbNullString Then Exit Function


' * ' We have requested a local file (like with the normal 'LoadPicture')
      If Mid$(PictureFullURL, 2, 2) = ":\" Then
            If Dir(PictureFullURL, vbHidden + vbNormal + vbReadOnly + vbSystem) <> vbNullString Then
                  SetAttr Path_Temp & File_Temp, vbNormal
                  Kill Path_Temp & File_Temp
                  FileCopy PictureFullURL, Path_Temp & File_Temp
                  GoTo EF:
            Else
                  If Dir(Path_Temp & File_Temp, vbNormal + vbHidden + vbReadOnly + vbSystem) <> vbNullString Then GoTo EF:
                  Exit Function
            End If
      End If


' * ' Does a local copy already exists?
      If Dir(Path_Temp & File_Temp, vbNormal + vbHidden + vbReadOnly + vbSystem) <> vbNullString Then
            LocalCopy = True
            If ForceFetch = False Then
                  GoTo EF:
            Else
                  SetAttr Path_Temp & File_Temp, vbNormal
                  Name Path_Temp & File_Temp As Path_Temp & "OLD-" & File_Temp      ' Rename as old file, but keep in case online fetching fails
            End If
      End If


' * ' Clear internet cache
      If ForceFetch = True Then
            Shell "RunDLL32.EXE InetCpl.cpl,ClearMyTracksByProcess 8"               ' Clear Internet cache so we truly fetch, and not just fetch a cached version of the picture
            Application.Wait Now + TimeSerial(0, 0, 3)                              ' Give process time to empty internet cache
      End If


' * ' Test if HTTP URL exists
      http.Open "HEAD", PictureFullURL, False
      http.Send
      PictureFormatOK = (http.Status = 200)                                         ' Re-use of variable
      If PictureFormatOK = False And LocalCopy = False Then Exit Function


' * ' No online file was found, but we have a local copy
      If PictureFormatOK = False And LocalCopy = True Then
            Name Path_Temp & "OLD-" & File_Temp As Path_Temp & File_Temp            ' Rename old file back
            GoTo EF:
      End If


' * ' Now we're (finally :-) going to fetch file online
      PictureFormatOK = DownloadURLToFile(0, PictureFullURL, Path_Temp & File_Temp, 16, 0) = 0


' * ' Man!  Even with all our tests, something went wrong anyway!!!
      If PictureFormatOK = False Then
            If LocalCopy = True Then
                  Name Path_Temp & "OLD-" & File_Temp As Path_Temp & File_Temp      ' Rename old file back
            Else
                  Exit Function
            End If
      End If


EF: ' End of Function
      Set http = Nothing

      If FaceID_Number < 1 Then
            SetAttr Path_Temp & "OLD-" & File_Temp, vbNormal
            Kill Path_Temp & "OLD-" & File_Temp                                     ' Kill old file
            SetAttr Path_Temp, vbHidden + vbSystem

            SaveSetting "EXCELGAARD", "LoadURLPicture", "Last Picture", Path_Temp & File_Temp
      
            Set LoadURLPicture = LoadPictureGDI(Path_Temp & File_Temp)              ' Requires reference to 'OLE Automation'
      Else
          ' Application.OnTime Now + TimeSerial(0, 0, 1), "ClearFaceIDFromClipBoard"
      End If

      Err.Clear

End Function
Private Function LoadPictureGDI(ByVal FileFullName As String) As IPicture

' * ' Initialize
      On Error Resume Next

      If Dir(FileFullName, vbHidden + vbSystem) = vbNullString Then Exit Function   ' File not found


' * ' Define variables
      Dim TestValue As Long
      Dim GDI_Input As GDIStartupInfo

     #If VBA7 Then
            Dim GDI_Bitmap As LongPtr
            Dim GDI_Handle As LongPtr
            Dim Pic_Handle As LongPtr
     #Else
            Dim GDI_Bitmap As Long
            Dim GDI_Handle As Long
            Dim Pic_Handle As Long
     #End If


' * ' Initialize GDI+
      GDI_Input.GDIPlusVersion = 1
      TestValue = GdiplusStartup(GDI_Handle, GDI_Input)
      If TestValue <> 0 Then Exit Function                                          ' GDI could not be initialized


' * ' Load the image
      TestValue = GdipCreateBitmapFromFile(StrPtr(FileFullName), GDI_Bitmap)
      If TestValue <> 0 Then Exit Function                                          ' Wrong filetype
           
           
' * ' Create a bitmap handle from the GDI image
      GdipCreateHBITMAPFromBitmap GDI_Bitmap, Pic_Handle, 0


EF: ' End of Function
      Set LoadPictureGDI = CreateIPictureObject(Pic_Handle)                         ' Create the IPicture object from the bitmap handle

      GdipDisposeImage GDI_Bitmap
      GdiplusShutdown GDI_Handle

End Function
Private Function CreateIPictureObject(ByVal PictureHandle As Variant) As IPicture

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim Interface_GUID As GUID                                                    ' User Defined DataType
      Dim IPictureObject As IPicture                                                ' Requires reference to 'OLE Automation'
      Dim Pic_BitmapInfo As BitmapInfo                                              ' User Defined DataType


' * ' Create the Interface GUID (for the IPicture interface)
      With Interface_GUID
            .Data1 = 2079852928
            .Data2 = -16590
            .Data3 = 4122
            .Data4(0) = 139
            .Data4(1) = 187
            .Data4(2) = 0
            .Data4(3) = 170
            .Data4(4) = 0
            .Data4(5) = 48
            .Data4(6) = 12
            .Data4(7) = 171
      End With


' * ' Fill Pic_BitmapInfo with data for picture
      With Pic_BitmapInfo
            .Size = Len(Pic_BitmapInfo)                                             ' Size of picture
            .Type = 1                                                               ' Type of picture (Bitmap)
            .PictureHandle = PictureHandle                                          ' Handle to picture
            .PaletteHandle = 0                                                      ' Handle to palette (if bitmap)
      End With


' * ' Create the Picture object.
      OleCreatePictureIndirect Pic_BitmapInfo, Interface_GUID, True, IPictureObject


EF: ' End of Function
      Set CreateIPictureObject = IPictureObject                                     ' Return the new IPicture object
      Set IPictureObject = Nothing

End Function
Private Function ClearFaceIDFromClipBoard()

' Hopefully it doesn't come as a big surprise that this little function clears the Windows Clipboard :-)


      On Error Resume Next
      
      Application.CutCopyMode = False
      
      OpenClipboard
      EmptyClipboard
      CloseClipboard

End Function
Attribute VB_Name = "UDF_MAPDISTANCE"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation

' Module version  :  v1.55.18


' https://developers.google.com/maps/documentation/distance-matrix/intro#DistanceMatrixRequests


' Enumerated constants for setting the arguments of the 'MAPDISTANCE()' function
  Enum geoTravelMode
    [_First] = 0
      Driving = 0
      Bicycling = 1
      Walking = 2
      Transit = 3       ' Using public transportation (bus, tram, train, ferry, etc.)
    [_Final] = 3
    [_Default] = geoTravelMode.Driving
  End Enum

  Enum geoTransitMode
    [_First] = 1
      Tram = 1
      Train = 2
      Subway = 4
      Rail = 7          ' Tram, Train & Subway
      Bus = 8
    [_Final] = 15
    [_Default] = 0
  End Enum

 Enum geoRoadType
    [_First] = 1
      Highways = 1
      Tolls = 2
      Ferries = 4
      Indoor = 8
    [_Final] = 8
    [_Default] = 0
 End Enum

Option Explicit
Function MAPDISTANCE(ByVal Origin As String, _
                     ByVal Destination As String, _
            Optional ByVal TravelMode As geoTravelMode = geoTravelMode.[_Default], _
            Optional ByVal ForceRequest As Boolean = False, _
            Optional ByVal ReturnTime As Boolean = False, _
            Optional ByVal Avoid As geoRoadType = geoRoadType.[_Default]) As Double


' This User-Defined Function (UDF) will calculate the distance between a given origin and destination.
' The function does so, by using Google Map API on-line, thus a working active Internet connection must be available.
'
' The 'Origin' and 'Destination' arguments are very versatile and can be virtual everything that Google Maps can recognize.
' The result of the function will be the distance between the two given points (addresses) in kilometers.
'
' In order to use this function, you must have a Google Maps API Key.


' * ' Initialize
      Const API_Key As String = "Enter your Google Maps API Key here..."
      Const API_URL As String = "https://maps.googleapis.com/maps/api/distancematrix/xml?origins=!O!&destinations=!D!&mode=!M!&avoid=!A!&units=metric&key=!K!"

      On Error Resume Next


' * ' Define variables
      If Avoid < geoRoadType.[_First] Or Avoid > geoRoadType.[_Final] Then Avoid = geoRoadType.[_Default]
      If TravelMode < geoTravelMode.[_First] Or TravelMode > geoTravelMode.[_Final] Then TravelMode = geoTravelMode.[_Default]

      Origin = WorksheetFunction.Trim(Origin)
      Destination = WorksheetFunction.Trim(Destination)

      Dim URL         As String
      Dim APIKey      As String
      Dim Distance    As Double
      Dim TravelTime  As Double
      Dim HTTPRequest As Object
      
      Set HTTPRequest = CreateObject("WinHttp.WinHttpRequest.5.1")
      If TypeName(HTTPRequest) = "Nothing" Then Set HTTPRequest = CreateObject("MSXML2.XMLHTTP")
      If TypeName(HTTPRequest) = "Nothing" Then Set HTTPRequest = CreateObject("MSXML2.ServerXMLHTTP")
      If TypeName(HTTPRequest) = "Nothing" Then
            Distance = -10
            GoTo EH:
      End If

      APIKey = GetSetting("Google Maps", "Settings", "API Key, Distance", API_Key)
      If Len(Replace(APIKey, " ", vbNullString)) < 1 Then APIKey = GetSetting("Google Maps", "Settings", "API Key", vbNullString)
      If Len(Replace(APIKey, " ", vbNullString)) < 1 Then
            Distance = -11
            GoTo EH:
      End If
    ' Debug.Print APIKey

    ' API URL
      URL = Replace(API_URL, "!O!", Origin)
      URL = Replace(URL, "!D!", Destination)

      Select Case Avoid
            Case geoRoadType.Highways:    URL = Replace(URL, "!A!", "highways")
            Case geoRoadType.Ferries:     URL = Replace(URL, "!A!", "ferries")
            Case geoRoadType.Indoor:      URL = Replace(URL, "!A!", "indoor")
            Case geoRoadType.Tolls:       URL = Replace(URL, "!A!", "tolls")
            Case Else:                    URL = Replace(URL, "&avoid=!A!", vbNullString)
      End Select
      Select Case TravelMode
            Case geoTravelMode.Driving:   URL = Replace(URL, "!M!", "driving")
            Case geoTravelMode.Bicycling: URL = Replace(URL, "!M!", "bicycling")
            Case geoTravelMode.Walking:   URL = Replace(URL, "!M!", "walking")
            Case geoTravelMode.Transit:   URL = Replace(URL, "!M!", "transit")
      End Select
      URL = LCase$(URL)
      URL = Replace(Replace(Replace(URL, "|fffd|", "ae"), "|fffd|", "o"), "|fffd|", "aa")    ' Special Danish characters
      URL = Replace(Replace(Replace(Replace(Replace(Replace(Replace(URL, " ", "%20"), "<", "%3c"), ">", "%3e"), "#", "%23"), "|", "%7c"), Chr$(34), "%22"), Chr$(160), "%20")
    ' Debug.Print Replace(URL, "!k!", APIKey)

      Dim SettingsString As String
      SettingsString = Origin & " | " & Destination & " | " & TravelMode & " | " & Avoid

      Distance = GetSetting("MAPDISTANCE", "Distances", SettingsString, -3)
      TravelTime = GetSetting("MAPDISTANCE", "Traveltimes", SettingsString, -3)

      If ReturnTime = False And Distance > 0 Then GoTo EF:
      If ReturnTime = True And TravelTime > 0 Then GoTo EF:


' * ' Fetch XML data
      With HTTPRequest
            .Open "GET", Replace(URL, "!k!", APIKey), False
            .Send
         If .Status = 200 Then
                  URL = .ResponseText
         Else
                  Distance = -12
                  GoTo EH:
         End If
      End With
    ' Debug.Print URL


' * ' Calculate distance
      APIKey = URL
      Distance = -3
      Distance = InStr(1, LCase$(APIKey), "<status>")
      If Distance < 1 Then
            Distance = -9
            GoTo EF:
      Else
            APIKey = Mid$(APIKey, Distance + 8)
            APIKey = Left$(APIKey, InStr(1, LCase$(APIKey), "</status>") - 1)
            If UCase$(APIKey) = "OK" Then
                  If ReturnTime = False Then APIKey = Mid$(URL, InStr(1, LCase$(URL), "<distance>") + 10) Else APIKey = URL
                  APIKey = Mid$(APIKey, InStr(1, LCase$(APIKey), "<value>") + 7)
                  APIKey = Left$(APIKey, InStr(1, LCase$(APIKey), "</value>") - 1)
                  Distance = CDbl(Replace(APIKey, " ", vbNullString))
                  TravelTime = CDbl(Replace(APIKey, " ", vbNullString))
                  APIKey = "OK"
            End If
      End If


' * ' Save for future usage
      If UCase$(APIKey) = "OK" Then
            If ReturnTime = False Then
                  If Distance > 0 Then SaveSetting "MAPDISTANCE", "Distances", SettingsString, Distance
            Else
                  If TravelTime > 0 Then SaveSetting "MAPDISTANCE", "Traveltimes", SettingsString, TravelTime
            End If
      End If


EH: ' Error Handler
      If UCase$(APIKey) <> "OK" Then
            Select Case UCase$(APIKey)
                  Case "INVALID_REQUEST":                   Distance = -3     ' This may often be caused by invalid parameter or parameter value.
                  Case "MAX_WAYPOINTS_EXCEEDED":            Distance = -4     ' More then 8 (23 for business subscribers) waypoints was given.
                  Case "NOT_FOUND":                         Distance = -5     ' Origin or destination could not be geocoded.
                  Case "OVER_QUERY_LIMIT":                  Distance = -6     ' The limit of the daily number of requests (2500) has been reached.
                  Case "REQUEST_DENIED":                    Distance = -7     ' The service denied use of the directions service.
                  Case "ZERO_RESULTS":                      Distance = -8     ' No route could be found between the origin and destination.
                  Case Else:                                Distance = -9     ' Most likely the request could not be processed due to a server error.
            End Select
          ' Debug.Print URL
      End If


EF: ' End of Sub
      MAPDISTANCE = Distance
      If ReturnTime = True And Distance >= 0 Then MAPDISTANCE = TravelTime

End Function
Function KORTAFSTAND(ByVal Fra As String, _
                     ByVal Til As String, _
            Optional ByVal Rejseform As geoTravelMode = geoTravelMode.[_Default], _
            Optional ByVal GennemtvingHentning As Boolean = False, _
            Optional ByVal Rejsetid As Boolean = False, _
            Optional ByVal Undg|fffd| As geoRoadType = geoRoadType.[_Default]) As Double

' Danish version of the function, 'MAPDISTANCE()'

      On Error Resume Next
      KORTAFSTAND = MAPDISTANCE(Fra, Til, Rejseform, GennemtvingHentning, Rejsetid, Undg|fffd|)

End Function
Private Sub MAPDISTANCE_Test()

      On Error Resume Next

      Dim O As String
      O = "N|fffd|rg|fffd|rdvej 23 ; 7600 ; Danmark"

      Dim D As String
      D = "Konfektionsvej 4 ; Randers ; Denmark"

      Debug.Print vbNewLine
      Debug.Print " Distance    :  " & MAPDISTANCE(O, D, Driving, False, False) & " meters"
      Debug.Print " Travel time :  " & WorksheetFunction.Round(MAPDISTANCE(O, D, Driving, False, True) / 60, 0) & " minutes"
      Debug.Print vbNewLine

    ' Debug.Print MAPDISTANCE("L|fffd|kjutun 8 ; 387 Gasadalur ; F|fffd|r|fffd|erne", "Eggjarvegur 13 ; 750 Vioareioi ; F|fffd|r|fffd|erne", Driving)
    ' Debug.Print MAPDISTANCE("Estafeta De Correos De Yaviza, Yaviza, Panama", "Deadhorse, Alaska", Driving)

End Sub
Private Sub MAPDISTANCE_Example()
    
    
' * ' Inbitialize
      On Error Resume Next


' * ' Define variables
      Dim WS As Excel.Worksheet
      Set WS = ActiveSheet

      Dim Counter As Long
      Counter = Application.LanguageSettings.LanguageID(2)
      
      Dim Language As String
      Language = Application.Run("RibbonXLanguage")


' * ' Prepare worksheet
      WS.DisplayPageBreaks = False

      WS.Visible = xlSheetVisible
      If WS.Visible <> xlSheetVisible Then GoTo ES:

      WS.Select

      WS.Unprotect
      If WS.ProtectContents = True Then GoTo ES:

      Cells.Delete
      Cells.UnMerge
      Cells.HorizontalAlignment = xlLeft


' * ' Fill worksheet with example
      If Language = "Danish" Then
            Range("B2").Value = "Denne regnearksfil indeholder en bruger-defineret funktion (UDF), kaldet =KORTAFSTAND()"
            Range("B2").Characters(Start:=73, length:=13).Font.Bold = True

            Range("B3").Value = "Form|fffd|let med funktionen er, at finde afstanden (i kilometer) mellemto steder p|fffd| et kort (Google Maps)."
            
            Range("B5:C5").Value = Array("Syntaks:", "'= KORTAFSTAND ( Fra , Til , [ Rejseform ] )")
            With Range("C5")
                  .Characters(Start:=17, length:=3).Font.Italic = True
                  .Characters(Start:=23, length:=3).Font.Italic = True
                  .Characters(Start:=31, length:=9).Font.Italic = True
            End With

            Range("B7").Value = "Argumentet, 'Rejseform' kan v|fffd|re:"
            With Range("B7")
                  .Characters(Start:=14, length:=9).Font.Bold = True
                  .Characters(Start:=14, length:=9).Font.Italic = True
            End With

            Range("E7:F7").Value = Array("K|fffd|rende", "Afstanden ved k|fffd|rsel p|fffd| vej netv|fffd|rket (typisk bil)")
            Range("E8:F8").Value = Array("Cykling", "Afstanden ved cycling p|fffd| cykelstier og foretrukne veje")
            Range("E9:F9").Value = Array("G|fffd|ende", "Afstanden ved at g|fffd| p|fffd| gangstier og foretove")
            Range("E10:F10").Value = Array("Transit", "Afstanden ved brug af offentlige transport midler")
    
            Range("B12").Value = "Argumenterne, 'Fra' og 'Til', er meget fleksible, og kan v|fffd|re, hvad som helst, som Google Maps kan genkende."
            With Range("B12")
                  .Characters(Start:=15, length:=3).Font.Bold = True
                  .Characters(Start:=15, length:=3).Font.Italic = True
                  .Characters(Start:=25, length:=3).Font.Bold = True
                  .Characters(Start:=25, length:=3).Font.Italic = True
            End With

            Range("B14:I14").Value = Array("Eksempler", "Fra", "", "Til", "", "Rejseform", "", "Afstand")
            
            If Counter = 1080 Then
                  Range("B15:G15").Value = Array("Adresser", "L|fffd|kjutun 8 , 387 Gasadalur , F|fffd|r|fffd|erne", "", "Eggjarvegur 13 , 750 Vioareioi , F|fffd|r|fffd|erne", "", 0)
            Else
                  Range("B15:G15").Value = Array("Adresser", "N|fffd|rg|fffd|rdvej 23 , Struer", "", "Mariagervej 40 , Randers", "", 0)
            End If
            Range("B16:G16").Value = Array("Byer", "Struer", "", "K|fffd|benhavn", "", 3)
            Range("B17:G17").Value = Array("Koordinater", "56.2900 , 08.3633", "", "56.3637 , 08.3249", "", 2)
            Range("B18:E18").Value = Array("Lande", "Danmark", "", "Spanien")
            Range("B19:G19").Value = Array("Postnr.", "7600 , Danmark", "", "8700 , Danmark", "", 1)

            Range("I15:I19").FormulaR1C1 = "=KORTAFSTAND(RC[-6],RC[-4],RC[-2])/1000"

            Range("B21").Value = "Bem|fffd|rk, at for at funktionen vil virke, skal der v|fffd|re en aktiv virkende Internet forbindelse tilg|fffd|ngelig, da data hentes fra Google Maps."
            Range("B22").Value = "Og, man skal nok ikke have for mange foresp|fffd|rgsler i sine regneark, da for mange foresp|fffd|rgsler til Internettet virkelig kan sl|fffd|ve sine regnark."
            Range("B24").Value = "Advarsel:"
            Range("C24").Value = "Google Maps har en begr|fffd|nsning p|fffd| 2.500 foresp|fffd|rgsler per dag, og selvom dette kan lyde som mange, skal man huske p|fffd|, at for mange gen-beregninger af sine regneark hurtigt kan opbruge disse foresp|fffd|rgsler!"
            Range("C25").Value = "Is|fffd|r, hvis der er mere end en bruger, bag ved samme IP adresse, ogs|fffd| benytter denne funktion i sine regneark - v|fffd|r forsigtigt, ellers vil man v|fffd|re n|fffd|d til, at v|fffd|re 24 time, f|fffd|r man vil v|fffd|re i stand til, at beregne afstande igen!"
            Range("B27").Value = "Hvis funktion giver en negativ v|fffd|rdi, betyder det, at der er opst|fffd|et en fejl - kig i koden til funktionen for at se, hvad de (negative) fejl koder betyder."
      Else
            Range("B2").Value = "This workbook contains a User-Defined function (UDF), called =MAPDISTANCE()"
            Range("B2").Characters(Start:=62, length:=14).Font.Bold = True

            Range("B3").Value = "The purpose of the function is to find the distance (in metric kilometres) between two places on a map (Google Maps)."
            
            Range("B5:C5").Value = Array("Syntax:", "'= MAPDISTANCE ( From , To , [ Travel Mode ] )")
            With Range("C5")
                  .Characters(Start:=17, length:=4).Font.Italic = True
                  .Characters(Start:=24, length:=2).Font.Italic = True
                  .Characters(Start:=31, length:=11).Font.Italic = True
            End With

            Range("B7").Value = "The 'Travel Mode' can be:"
            With Range("B7")
                  .Characters(Start:=6, length:=11).Font.Bold = True
                  .Characters(Start:=6, length:=11).Font.Italic = True
            End With

            Range("E7:F7").Value = Array("Driving", "Distance driving the road network")
            Range("E8:F8").Value = Array("Bicycling", "Distance using bicycle paths and preferred streets")
            Range("E9:F9").Value = Array("Walking", "Distance walking via pedestrian paths and sidewalks")
            Range("E10:F10").Value = Array("Transit", "Distance using public transit routes")
    
            Range("B12").Value = "The 'From' and 'To' arguments are very versatile and be virtual everything that Google Maps can recognize."
            With Range("B12")
                  .Characters(Start:=6, length:=4).Font.Bold = True
                  .Characters(Start:=6, length:=4).Font.Italic = True
                  .Characters(Start:=17, length:=2).Font.Bold = True
                  .Characters(Start:=17, length:=2).Font.Italic = True
            End With

            Range("B14:I14").Value = Array("Examples", "From", "", "To", "", "Travel Mode", "", "Distance")
            
            Range("B15:G15").Value = Array("Addresses", "1600 Pennsylvania Avenue NW ; 20500 Washington, D.C. ; USA", "", "4200 150th Avenue NE ; 98052 Washington ; USA", "", 0)
            Range("B16:G16").Value = Array("Cities", "London", "", "Liverpool", "", 3)
            Range("B17:G17").Value = Array("Coordinates", "56.2900, 08.3633", "", "56.3637, 08.3249", "", 2)
            Range("B18:E18").Value = Array("Countries", "Denmark", "", "Spain")
            Range("B19:G19").Value = Array("Zip Codes", "7600  Denmark", "", "8700  Denmark", "", 1)

            Range("I15:I19").FormulaR1C1 = "=MAPDISTANCE(RC[-6],RC[-4],RC[-2])/1000"

            Range("B21").Value = "Notice, for the function to work, a working Internet connection must be active, since the data is collected from Google Maps."
            Range("B22").Value = "And, you probably shouldn't have too many request in your spreadsheets, since too many can really slow down the speed of calculation on your spreadsheets (due to the external Internet requests)."
            Range("B24").Value = "Warning:"
            Range("C24").Value = "Google Maps has a limit of 2500 request per day, and even that this seems as a lot, remember that too many re-calculations of your spreadsheets can quickly use up all those requests!"
            Range("C25").Value = "Especially if more than one user, behind the same IP address, are using this function in their spreadsheet - be careful, or you'll have to wait 24 hours before being able to calculate distances again!"
            Range("B27").Value = "If the function returns a negative value, it means that an error has occurred - look in the code for the function, if you want the (negative) error codes mean."
      End If
      Range("D7").Value = 0
      Range("D8").Value = 1
      Range("D9").Value = 2
      Range("D10").Value = 3
      Range("H15:H19").FormulaR1C1 = "=IF(ISERROR(VLOOKUP(RC[-1],R7C4:R10C5,2,0)),R7C5,VLOOKUP(RC[-1],R7C4:R10C5,2,0))"
      Range("B29").FormulaR1C1 = "=EXCELGAARD"


' * ' Format cells
      Range("C5,B14:I14").Font.Bold = True
      Range("C15:G19").Font.Color = rgbFontInput

      Range("B14:F19,H15:H19").IndentLevel = 1
      Range("I15:I19").HorizontalAlignment = xlRight
      Range("D7:D10,G14:G19,H14:I14").HorizontalAlignment = xlCenter
      
      Range("I15:I19").NumberFormat = "#,##0.00_);[Red](#,##0.00)"

      With Range("B14:I14,B14:B19").Interior
            .Pattern = xlSolid
            .Color = rgbInteriorHeader
      End With
      With Range("C15:G19").Interior
            .Pattern = xlSolid
            .Color = rgbInteriorInput
      End With
      With Range("H15:H19").Interior
            .Pattern = xlSolid
            .Color = rgbInteriorIntermediate
      End With
      With Range("I15:I19").Interior
            .Pattern = xlSolid
            .Color = rgbInteriorResult
      End With
      
      With Range("B14:I19")
            .Borders(xlDiagonalUp).LineStyle = xlNone
            .Borders(xlDiagonalDown).LineStyle = xlNone
            With .Borders(xlEdgeLeft)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With
            With .Borders(xlEdgeTop)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With
            With .Borders(xlEdgeBottom)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With
            With .Borders(xlEdgeRight)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With
            With .Borders(xlInsideVertical)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With
            With .Borders(xlInsideHorizontal)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With
      End With

      Range("C15:G19").Locked = False
      Range("C15:I19").FormulaHidden = False

      Range("G14:H14").Merge
      For Counter = 14 To 19
          Range("C" & Counter & ":D" & Counter).Merge
          Range("E" & Counter & ":F" & Counter).Merge
      Next


ES: ' End of Sub
      Set WS = Nothing

End Sub
Private Sub Goggle_Maps_API_Key()

      Const Key2Save As String = "Enter your Google Maps API Key here..."

      On Error Resume Next

      SaveSetting "Google Maps", "Settings", "API Key, Distance", Key2Save
    ' SaveSetting "Google Maps", "Settings", "API Key", Key2Save

End Sub




Attribute VB_Name = "UDF_xlRelease"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation


' Public constants for the releases
  Public Const xlExcel5    As Long = 5    ' We start from Excel 5, since Excel prior to that version didn't have VBA
  Public Const xlExcel95   As Long = 7
  Public Const xlExcel97   As Long = 8
  Public Const xlExcel2000 As Long = 9
  Public Const xlExcelXP   As Long = 10
  Public Const xlExcel2003 As Long = 11
  Public Const xlExcel2007 As Long = 12
  Public Const xlExcel2010 As Long = 14
  Public Const xlExcel2013 As Long = 15
  Public Const xlExcel2016 As Long = 16

' Module leves constant
  Private Const xlRelease_DataBaseSaveName As String = "Excel Editions/Releases/Versions"

Option Private Module
Option Explicit
Function xlRelease(Optional ByVal InfoType As String = "Name", Optional ByVal Excel_Version As Long = 0) As Variant

' It is fairly simple to find information about release version of the current Excel in VBA.
' But, I'm lazy...   :-)
'
' So, I devised this little User-Cefined Function (UDF), which acts as a xlConstant, making it even easier to use in your own macros.
'
' Workbook MUST have reference to 'MS Office Object Library'
'
' Some usages of this could be:  If Val(Application.Version) < xlExcel2010 Then...
'                                MsgBox "You must use at least " & xlRelease("Name", xlExcel2010) & " to use this workbook."
'                                MsgBox "You are using " & xlRelease("Name")
'                                If xlRelease("Bit") <> 32 Then ...
'
' Notice, that many of the information are actually fetched from an on-line database.
' The major benefit of using this function/method is that when ever a new version of Excel is released,
' I don't have to change all the codes in all my projects.
' All I have to do is to update the on-line database, and all the rest of my code, that uses the release/version for anything, will work :-)
' But, don't worry - you won't suffer from loss of speed or band width...
' ...the function will save the database locally (in the Registry) for future usage (and also for off-line usage :-)
'
' Currently the function will tell you... xlRelease("Bit")        Bit architeture of Excel  (16-, 32- or 64-bit)
'                                         xlRelease("GUID")       Global Unique ID of Excel (Same as Application.ProductCode)
'                                         xlRelease("Language")   msoLanguageID             (Same as 'Application.LanguageSettings.LanguageID(msoLanguageIDUI)')
'                                         xlRelease("Name")       Name of Excel as string   (Default = You can also just use 'xlRelease')
'                                         xlRelease("Note")       Small description/note/remarks about the edition/release/version
'                                         xlRelease("Version")    Major version number      (Same as 'Val(Application.Version)')
'                                         xlRelease("Year")       Release year              (Release year of Windows edition)

' ' ' Initialize
      On Error Resume Next


' * ' Define variable
      If Excel_Version < 1 Then Excel_Version = Val(Application.Version)
      
      Dim Excel_Bit As Long
      Excel_Bit = 32
      If Excel_Version < 7 Then Excel_Bit = 16
      If Excel_Version >= 14 Then
           #If Win64 Then
                  Excel_Bit = 64
           #End If
      End If


' * ' Fetch database if needed
      If GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Name", vbNullString) = vbNullString And _
         GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Note", vbNullString) = vbNullString And _
         GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Year", vbNullString) = vbNullString Then
          ' Debug.Print "Database for Excel version not fetched yet..."
            Call xlRelease_Fetch
      ElseIf CLng(GetSetting(xlRelease_DataBaseSaveName, "Last Database Update", "Date, Long", 0)) < CLng(Date - 366) Then
          ' Debug.Print "Database more than a year old..."
            Call xlRelease_Fetch
      End If


EF: ' End of Function
      Select Case UCase$(Replace(InfoType, " ", vbNullString))
            Case UCase$("Bit"):           xlRelease = Excel_Bit
            Case UCase$("GUID"):          xlRelease = Application.ProductCode
            Case UCase$("Language"):      xlRelease = Application.LanguageSettings.LanguageID(msoLanguageIDUI)
            Case UCase$("Version"):       xlRelease = Excel_Version
            Case UCase$("Year"):          xlRelease = Val(GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Year", Year(Date)))
            Case UCase$("Note"):          xlRelease = GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Note", vbNullString)
            Case Else:                    xlRelease = GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Name", vbNullString)
      End Select

End Function
Function xlRelease_Fetch() As Boolean

' This function will fetch a small "database" of Excel releases over the years (actually it is just a small text-file :-)
'
' The "database" will be fetched everytime the 'xlRelease' function encounters a new/unknown version of Excel,
' thus the function needs to go on-line and fetch the database everytime you upgrade your Excel to a new/unknown version,
' hence, the function will probably do this once every 4-5 years - no much bandwidth used for this :-)
'
' The text-file is located at: http://www.EXCELGAARD.dk/Files/Excels.TXT
' ...and, if you're uncertain of its contents, you can download and open it in 'NotePad' first - but it really is totally safe :-)
'
' Once the "database" is downloaded, it is stored in the Windows Registry under the key: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\
' Feel free to take a look at it yourself, to ensure that nothing 'spooky' is going on :-)
'
' Workbook MUST have VB Reference to 'MS WinHTTP Services'


' * ' Initialize
      Const URL As String = "http://www.EXCELGAARD.dk/Files/Excels.TXT"

      On Error Resume Next


' * ' Define variables
      Dim DataCounter    As Long
      Dim ExcelsCounter  As Long
      Dim Excels         As Variant
      Dim ExcelsData     As Variant
      Dim ExcelsDatabase As String
      Dim NewestVersion  As Long

      Dim HTTPRequest As Object
      HTTPRequest = CreateObject("WinHttp.WinHttpRequest.5.1")
      If TypeName(HTTPRequest) = "Nothing" Then HTTPRequest = CreateObject("MSXML2.ServerXMLHTTP")
    ' Dim HTTPRequest    As New WinHttpRequest
      If TypeName(HTTPRequest) = "Nothing" Then GoTo EF:


' * ' Fetch database
      With HTTPRequest
            .Option(0) = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"
            .Open "GET", URL, False
            .Send
         If .Status = 200 Then
            ExcelsDatabase = .ResponseText
            xlRelease_Fetch = True
         Else
            xlRelease_Fetch = False
            GoTo EF:
         End If
      End With


' * ' Substract and save information
      ExcelsDatabase = Replace(Replace(ExcelsDatabase, vbNewLine, vbLf), vbCr, vbLf)
      Excels = Split(ExcelsDatabase, vbLf)
      For ExcelsCounter = LBound(Excels) To UBound(Excels)
            If InStr(1, Excels(ExcelsCounter), "|") > 1 Then
                  ExcelsData = Split(Excels(ExcelsCounter), "|")
                  ExcelsData(0) = Replace(Replace(Replace(ExcelsData(0), " ", vbNullString), "|", vbNullString), vbLf, vbNullString)
                  ExcelsData(1) = WorksheetFunction.Trim(Replace(Replace(ExcelsData(1), "|", vbNullString), vbLf, vbNullString))
                  ExcelsData(2) = Replace(Replace(Replace(ExcelsData(2), " ", vbNullString), "|", vbNullString), vbLf, vbNullString)
                  ExcelsData(3) = WorksheetFunction.Trim(Replace(Replace(Replace(ExcelsData(3), vbLf, vbNullString), "|", vbNullString), ".  ", vbNewLine))
      
                  If Val(ExcelsData(0)) > 0 Then
                        NewestVersion = WorksheetFunction.Max(NewestVersion, Val(ExcelsData(0)))
                        If Len(ExcelsData(1)) > 0 Then SaveSetting xlRelease_DataBaseSaveName, ExcelsData(0), "Name", ExcelsData(1)
                        If Len(ExcelsData(2)) > 0 Then SaveSetting xlRelease_DataBaseSaveName, ExcelsData(0), "Year", ExcelsData(2)
                        If Len(ExcelsData(3)) > 0 Then SaveSetting xlRelease_DataBaseSaveName, ExcelsData(0), "Note", ExcelsData(3)
                  End If
            End If
      Next
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Date", Format(Date, "dd.mm.yyyy")
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Date, Long", CLng(Date)
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Source", URL
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Newest Version", NewestVersion


EF: ' End of Function
      If IsArray(Excels) Then Erase Excels
      If IsArray(ExcelsData) Then Erase ExcelsData

      Set HTTPRequest = Nothing

End Function
Sub xlRelease_Fetch_Now()

' Hit [F5] with the cursor placed in this macro to run the macro
'
' This small macro just force a fetch of the on-line "database" - for more info, take a look at the function 'xlRelease_Fetch' above.


' * ' Initialize
      Const DefaultKeyToOpenAt As String = "HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & xlRelease_DataBaseSaveName

      On Error Resume Next


' * ' Define variables
      Dim WSH As Object                         ' Windows Script Host
      Set WSH = CreateObject("WScript.Shell")   ' |fffd|       |fffd|      |fffd|

      Dim OpenAtKey As String
      If Len(DefaultKeyToOpenAt) > 0 Then OpenAtKey = CreateObject("Shell.Application").Namespace(17).Self.Name & "\" & DefaultKeyToOpenAt


' * ' Fetch database
      Call xlRelease_Fetch


' * ' Open registry editor
      WSH.RegWrite "HKCU\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit\Lastkey", OpenAtKey, "REG_SZ"
    ' Shell "RegEdit.EXE", vbMaximizedFocus     ' Enable this, if you want to see the fetch database in the Registry


ES: ' End of Sub
      Set WSH = Nothing

End Sub
Sub xlRelease_View_Database_Online()

      On Error Resume Next
      ActiveWorkbook.FollowHyperlink Address:="http://www.EXCELGAARD.dk/Files/Excels.TXT", NewWindow:=True, AddHistory:=False

End Sub
Sub xlRelease_View_Database_Registry()

' This macro will open the "Registry Editor", at the "Database" of the 'xlRelease()' function,
' if you hit [F5] with the cursor placed in this macro.


' * ' Initialize
      Const DefaultKeyToOpenAt As String = "HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & xlRelease_DataBaseSaveName

      On Error Resume Next


' * ' Define variables
      Dim WSH As Object                         ' Windows Script Host
      Set WSH = CreateObject("WScript.Shell")   ' |fffd|       |fffd|      |fffd|

      Dim OpenAtKey As String
      If Len(DefaultKeyToOpenAt) > 0 Then OpenAtKey = CreateObject("Shell.Application").Namespace(17).Self.Name & "\" & DefaultKeyToOpenAt


' * ' Open registry editor
      WSH.RegWrite "HKCU\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit\Lastkey", OpenAtKey, "REG_SZ"
      Shell "RegEdit.EXE", vbMaximizedFocus


ES: ' End of Sub
      Set WSH = Nothing

End Sub
Sub xlRelease_Test()

' Call this macro (or hit [F5] with the cursor placed in this macro) to
' view the information, that can be obtained with the 'xlRelease' function.


' * ' Initialize
      On Error Resume Next


' * ' Define variavles
      Dim Excel_Version As Long
      Excel_Version = Val(Application.Version)
      
      Dim MsgBoxText As String
      MsgBoxText = MsgBoxText & "Name           " & vbTab & ":  " & xlRelease("Name", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Version        " & vbTab & ":  " & xlRelease("Version", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "GUID           " & vbTab & ":  " & xlRelease("GUID", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Language       " & vbTab & ":  " & xlRelease("Language", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Bit            " & vbTab & ":  " & xlRelease("Bit", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Year           " & vbTab & ":  " & xlRelease("Year", Excel_Version) & vbNewLine & vbNewLine
      MsgBoxText = MsgBoxText & xlRelease("Note", Excel_Version)

      If xlRelease("Version", Excel_Version) < xlExcel2010 Then
            MsgBoxText = MsgBoxText & vbNewLine & vbNewLine & "Recommendation " & vbTab & ":  " & "Upgrade to at least Excel 2010."
            If xlRelease("Bit", Excel_Version) <> 32 Then
                  MsgBoxText = MsgBoxText & vbNewLine & vbTab & vbTab & "   Make sure you install the 32-bit edition," & vbNewLine & vbTab & vbTab & "   and NOT the 64-bit edition!"
            End If
      ElseIf xlRelease("Bit", Excel_Version) <> 32 Then
            MsgBoxText = MsgBoxText & vbNewLine & vbNewLine & "Recommendation " & vbTab & ":  " & "Uninstall this 64-bit edition of Excel," & vbNewLine & vbTab & vbTab & "   and install the 32-bit edition instead!"
      End If


' * ' Display information about the release
      MsgBox MsgBoxText, vbOKOnly, " Microsoft Excel"

End Sub



Attribute VB_Name = "VBA_Resetup"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation


' Purpose of the macros in this module is to resetup the sheet(s) in this workbook, in case the user have corrupted the sheet(s) by mistake.
'
' Secondary, the macros will also change the language of the contents in the sheet(s) between Danish or English.
' Danish is my native language, so that's why I have that language as secondary language (default/main language will always be English).
'
' The macros are made as a kind of 'standard' setup, so I more or less can use the macros in all my projects - the main difference
' is in the main macro, called 'Resetup', where I create project/workbook specific contents/example/info...
'
' The rest of the macros are sub-macros to the main macro, 'Resetup', which is the one to be called (from Ribbon or other macros).


' Module level variables
  Private RibbonTab      As String
  Private RibbonButton   As String
  Private UseEnglishFlag As Boolean

Option Private Module
Option Explicit
Sub Resetup(Optional ByVal UseEnglish As Boolean = False)
Attribute Resetup.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      On Error Resume Next

      ThisWorkbook.Unprotect                          ' Just in case :-)

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .FormulaBarHeight = 1
            .DisplayAlerts = False
            .ScreenUpdating = False
            .CellDragAndDrop = True
            .AskToUpdateLinks = False
            .WindowState = xlMaximized
          ' .PrintCommunication = False               ' Won't work in XL2007 or earlier
            .IgnoreRemoteRequests = False
            .Calculation = xlCalculationManual
      End With


' * ' Define variable
      RibbonButton = RibCTRLLabel("Button_EXCELGAARD_AA", True)
      RibbonTab = RibCTRLLabel(Custom_Ribbon_CodeName, True)
      UseEnglishFlag = UseEnglish

      Dim WAI As Object                               ' Where Am I?
      Set WAI = ActiveSheet                           ' To be able to return to original sheet

      Dim WS As Worksheet


' * ' Create name for language formula
      ThisWorkbook.Names.Add Name:="LOCEA", RefersToR1C1:="=IF(TEXT(127,""dddd"")=""S|fffd|ndag"",IF(TEXT(127,""mmmm"")=""Maj"",""Danish"",""Norwegian""),IF(TEXT(127,""dddd"")=""Domingo"",IF(TEXT(127,""mmmm"")=""Mayo"",""Spanish"",""Portuguese""),IF(AND(TEXT(127,""dddd"")=""Sonntag"",TEXT(127,""mmmm"")=""Mai""),""German"",IF(AND(TEXT(127,""dddd"")=""Linggo"",TEXT(127,""mmmm"")=""Mayo""),""Filipino"",""English""))))"
      ThisWorkbook.Names("LOCEA").Comment = "Locale Of Current Excel Application"


' * ' Contents
      Set WS = SWS_Contents
      Call Resetup_Prepare_Worksheet(WS)
      If WS.ProtectContents = False Then
            With WS
            With .Range("B5")
                  .Offset(0, 0).Value = "UDF_MAPDISTANCE"
                  .Offset(0, 3).Value = ResetupString("UDF")
                  .Offset(0, 6).Value = "MAPDISTANCE ()"
                  .Offset(0, 9).Value = "Function to calculate the travelling distance between two point on a map."
                  If ResetupLanguage = "Danish" Then
                        .Offset(0, 6).Value = "KORTAFSTAnD ()"
                        .Offset(0, 9).Value = "Funktion til beregne rejseafstand mellem to punkter p|fffd| et kort."
                  End If
            End With
            End With
            Call Resetup_Standard_Contents(WS)
      End If


' * ' Information
      Set WS = SWS_Information
      WS.Cells.Delete
      WS.Visible = xlSheetVeryHidden
    ' Call Resetup_Prepare_Worksheet(Ws)
    ' If Ws.ProtectContents = False Then
    '       If ResetupLanguage = "Danish" Then
    '            With Ws
                 
    '            End With
    '      Else
    '            With Ws
                 
    '            End With
    '       End If
    '       With Ws
            
    '       End With
    '       Call Resetup_Standard_Information(Ws)
    ' End If
    


' * ' Arrange worksheets
    ' SWS_Information.Move Before:=Sheets(1)
      SWS_Contents.Move Before:=Sheets(1)
    ' Table_VAT_Dates.Move After:=Sheets(ThisWorkbook.Worksheets.Count)
    ' SWS_Example.Move After:=Sheets(ThisWorkbook.Worksheets.Count)


ES: ' End of Sub
      Set WS = Nothing
      UseEnglishFlag = False

End Sub
Private Sub Resetup_Prepare_Worksheet(ByVal WSP As Excel.Worksheet, Optional ByVal ClearTable As Boolean = False)

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      Const SheetClassContents As Long = 16764108     ' \
      Const SheetClassChart    As Long = 10485920     '  \
      Const SheetClassExample  As Long = 61680        '   > http://www.EXCELGAARD.dk/Lib/SheetClass/
      Const SheetClassInfo     As Long = 13143180     '  /
      Const SheetClassTable    As Long = 16760832     ' /

      On Error Resume Next


' * ' Define variable
      If Left$(WSP.CodeName, 6) <> "Table_" And Left$(WSP.CodeName, 6) <> "Tabel_" Then ClearTable = True


' * ' Reset window
      ActiveWindow.DisplayHeadings = True
      ActiveWindow.DisplayGridlines = True


' * ' Prepare sheet
      With WSP

      If ThisWorkbook.IsAddin = False Then
            .Select
            If Application.ScreenUpdating = True Then ActiveWindow.FreezePanes = False
      End If

      .DisplayPageBreaks = False

      .Unprotect
      If .ProtectContents = True Then Exit Sub

      .Tab.ColorIndex = xlColorIndexNone
      .Names("EXCELGAARD_SheetClass_Property").Delete


' * ' Prepare cells
      If ClearTable = True Then
            .Cells.UnMerge
            .Cells.Comment.Delete
            .Cells.Validation.Delete
            .Cells.FormatConditions.Delete
            .Cells.EntireRow.Hidden = False
            .Cells.EntireColumn.Hidden = False

            .Cells.Delete

            .Cells.NumberFormat = "General"
            .Cells.HorizontalAlignment = xlLeft

            .Cells.Font.Size = 11
            .Cells.Font.Name = "Times New Roman"
            .Cells.Font.Bold = False
            .Cells.Font.Italic = False
            .Cells.Font.Underline = False

            .Cells.Interior.ColorIndex = xlNone

            .Cells.Locked = True
            .Cells.FormulaHidden = False
            .Range("A:A,1:1").Locked = False
            .Range("A:A,1:1").FormulaHidden = False

            .Cells.EntireRow.AutoFit

            .StandardWidth = 15
            .Cells.ColumnWidth = .StandardWidth
      End If


' * ' Table worksheet
      If Left$(.CodeName, 6) = "Table_" Or Left$(.CodeName, 6) = "Tabel_" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassTable

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassTable, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetTable"

            .Name = "Table"
            If ResetupLanguage = "Danish" Then .Name = "Tabel"
      End If


' * ' Example worksheet
      If .CodeName = "SWS_Example" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassExample

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassExample, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetExample"

            .Name = "Example"
            If ResetupLanguage = "Danish" Then .Name = "Eksempel"
      End If


' * ' Information worksheet
      If Left$(.CodeName, 8) = "SWS_Info" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassInfo

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassInfo, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetInfo"

            .Name = "Information"
      End If


' * ' Contents worksheet
      If .CodeName = "SWS_Contents" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassContents

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassContents, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetContents"

            .Name = "Contents"
            If ResetupLanguage = "Danish" Then .Name = "Indhold"

            .Rows(2).Font.Bold = True
            .Rows(3).RowHeight = 3

            With .Range("B3:P3").Borders(xlEdgeBottom)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With

            .Range("B2").FormulaR1C1 = "=IF(ISERROR(VLOOKUP(LOCEA,{""Danish"";""Filipino"";""German"";""Norwegian"";""Portugese"";""Spanish""},1,0)),""Component"",VLOOKUP(LOCEA,{""Danish"",""Komponent"";""Filipino"",""Sangkap"";""German"",""Komponente"";""Norwegian"",""Komponent"";""Portuguese"",""Componente"";""Spanish"",""Componente""},2,0))"
            .Range("E2").FormulaR1C1 = "=IF(ISERROR(VLOOKUP(LOCEA,{""Danish"";""Filipino"";""German"";""Norwegian"";""Portugese"";""Spanish""},1,0)),""Type"",VLOOKUP(LOCEA,{""Danish"",""Type"";""Filipino"",""Uri"";""German"",""Art"";""Norwegian"",""Type"";""Portuguese"",""Tipo"";""Spanish"",""Tipo""},2,0))"
            .Range("H2").FormulaR1C1 = "=IF(ISERROR(VLOOKUP(LOCEA,{""Danish"";""Filipino"";""German"";""Norwegian"";""Portugese"";""Spanish""},1,0)),""Name"",VLOOKUP(LOCEA,{""Danish"",""Navn"";""Filipino"",""Pangalan"";""German"",""Name"";""Norwegian"",""Navn"";""Portuguese"",""Nome"";""Spanish"",""Nombre""},2,0))"
            .Range("K2").FormulaR1C1 = "=IF(ISERROR(VLOOKUP(LOCEA,{""Danish"";""Filipino"";""German"";""Norwegian"";""Portugese"";""Spanish""},1,0)),""Purpose"",VLOOKUP(LOCEA,{""Danish"",""Form|fffd|l"";""Filipino"",""Layunin"";""German"",""Zweck"";""Norwegian"",""Hensikt"";""Portuguese"",""Prop|fffd|sito"";""Spanish"",""Prop|fffd|sito""},2,0))"
      End If


ES: ' End of Sub
      End With

      Range("A1").Select

End Sub
Private Sub Resetup_Standard_Contents(ByVal WSS As Excel.Worksheet)

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim Counter As Long
      Dim NextRow As Long
      For Counter = 1 To 26
            NextRow = WorksheetFunction.Max(NextRow, WSS.Cells(WSS.Rows.Count, Counter).End(xlUp).Row)
      Next

      Dim CDS As Chart
      Dim WST As Worksheet


' * ' Let's start...
      With WSS


' * ' Make devider between specific modules and standard modules
      NextRow = NextRow + 1
      With .Range("B" & NextRow & ":P" & NextRow).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = rgbBlack
            .Weight = xlThin
      End With
      NextRow = NextRow + 1


' * ' Contents worksheet
      If ResetupCMUF("SWS_Contents") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "SWS_Contents"
                  .Offset(0, 3).Value = ResetupString("Worksheet")
                  .Offset(0, 6).FormulaR1C1 = "=MID(CELL(""Filename"",R1C1),FIND(""*"",SUBSTITUTE(CELL(""Filename"",R1C1),""]"",""*"",LEN(CELL(""Filename"",R1C1))-LEN(SUBSTITUTE(CELL(""Filename"",R1C1),""]"",""""))))+1,99)"
                  .Offset(0, 9).Value = "This worksheet with this list of the contents of this workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Dette regneark med denne oversigt over indholdet i denne regnearksfil."
            End With
      End If


' * ' Information worksheet
    ' If ResetupCMUF("SWS_Information") = True Then
    '       NextRow = NextRow + 1
    '       With .Range("B" & NextRow)
    '             .Value = "SWS_Information"
    '             .Offset(0, 3).Value = ResetupString("Worksheet")
    '             .Offset(0, 6).FormulaR1C1 = SWS_Information.Name
    '             .Offset(0, 9).Value = "Information about the usage of this workbook and its contents."
    '             If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Information om brugen af denne regnearksfil og indholdet i filen."
    '       End With
    ' End If


' * ' Example worksheet
      If ResetupCMUF("SWS_Example") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "SWS_Example"
                  .Offset(0, 3).Value = ResetupString("Worksheet")
                  .Offset(0, 6).Value = "Example"
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Eksempel"
                  .Offset(0, 9).Value = "Example on the usage of this workbook and its contents."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Eksempel p|fffd| brugen af denne regnearksfil og indholdet i filen."
            End With
      End If


' * ' Tables worksheet
      For Each WST In ThisWorkbook.Worksheets
            WST.DisplayPageBreaks = False
            If WST.Visible = xlSheetVisible Then
            If Left$(WST.CodeName, 6) = "Table_" Or Left$(WST.CodeName, 6) = "Tabel_" Then

            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = WST.CodeName
                  .Offset(0, 3).Value = ResetupString("Table")
                  .Offset(0, 9).Value = "Table with data for use in this workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Tabel med data til brug for denne regnearksfil."
            End With

            End If
            End If
      Next


' * ' Charts
      For Each CDS In ThisWorkbook.Charts
            CDS.Tab.Color = 10485920
            If CDS.Visible = xlSheetVisible Then

            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = CDS.CodeName
                  .Offset(0, 3).Value = ResetupString("Chart")
                  .Offset(0, 9).Value = "Chart, that shows the result/usage of the contents in this workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Diagram/graf, der viser resultat/brug af indholdet i denne regnearksfil."
            End With

            End If
      Next


' * ' TPP_Colors
      If ResetupCMUF("TPP_Colors") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "TPP_Colors"
                  .Offset(0, 3).Value = ResetupString("Code Module")
                  .Offset(0, 9).Value = "Code module for setting up the colors used in this project/workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Kodemodul til ops|fffd|tning af de farver, der benytter i dette projekt/regnearksfil."
            End With
      End If


' * ' Credentials ()
      If ResetupCMUF("UDF_Credentials") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_Credentials"
                  .Offset(0, 3).Value = ResetupString("UDF")
                  .Offset(0, 6).Value = "Credentials ()"
                  .Offset(0, 9).Value = "Function to find/get/obtain/read/retrieve credentials for use in this projects."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Funktion til at finde/hente/l|fffd|se/skaffe adgangsinformationer til brug i dette project."
            End With
      End If
      If ResetupCMUF("WUF_Credentials") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "WUF_Credentials"
                  .Offset(0, 3).Value = ResetupString("UserForm")
                  .Offset(0, 6).Value = "WUF_Credentials"
                  .Offset(0, 9).Value = "Used for setting credentials used in the project."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Benyttes til at angive adgangsoplysninger for projektet."
            End With
      End If


' * ' GetSpecialFolder ()
      If ResetupCMUF("UDF_GetSpecialFolder") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_GetSpecialFolder"
                  .Offset(0, 3).Value = ResetupString("UDF")
                  .Offset(0, 6).Value = "GetSpecialFolder ()"
                  .Offset(0, 9).Value = "Function for finding the miscellanous system folders - used as a 'sub-function' in this project."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Funktion til at finde stien til de foreskellige system mapper - benyttes som en 'under-funktion' til dette projekt."
            End With
      End If
      If ResetupCMUF("WUF_GetSpecialFolder") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "WUF_GetSpecialFolder"
                  .Offset(0, 3).Value = ResetupString("UserForm")
                  .Offset(0, 6).Value = "WUF_GetSpecialFolder"
                  .Offset(0, 9).Value = "Used for setting and/or selecting project specific folders."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Benyttes til at angive og/eller v|fffd|lge specifikke mapper for projektet."
            End With
      End If


' * ' LoadURLPicture ()
      If ResetupCMUF("UDF_LoadURLPicture") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_LoadURLPicture"
                  .Offset(0, 3).Value = ResetupString("UDF")
                  .Offset(0, 6).Value = "LoadURLPicture ()"
                  .Offset(0, 9).Value = "Function for inserting custom icons in the Ribbon and/or into UserForms."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Funktion til at s|fffd|tte bruger-ikoner ind i b|fffd|ndet (Ribbon) og/eller i dialogvinduer (UserForms)."
            End With
      End If


' * ' xlRelease
      If ResetupCMUF("UDF_xlRelease") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_xlRelease"
                  .Offset(0, 3).Value = ResetupString("UDF")
                  .Offset(0, 6).Value = "xlRelease"
                  .Offset(0, 9).Value = "Function to test if this Excel is compatible with this project (version, language, 32-bit or 64-bit, etc.)."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Funktion til at teste om den aktuelle Excel er kompatibel med dette projekt (version, sprog, 32-bit eller 64-bit, o.s.v.)."
            End With
      End If


' * ' Resetup
      If ResetupCMUF("VBA_Resetup") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "VBA_Resetup"
                  .Offset(0, 3).Value = ResetupString("Macro")
                  .Offset(0, 6).Value = "Resetup"
                  .Offset(0, 9).Value = "Macro for recreating/resetup this contents worksheet, if you click the button [" & RibCTRLLabel("Button_EXCELGAARD_Resetup") & "] in the Ribbon, under the '" & RibCTRLLabel(Custom_Ribbon_CodeName) & "' tab."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Makro til at genoprette dette indholdsregneark, hvis man trykker p|fffd| knappen [" & RibCTRLLabel("Button_EXCELGAARD_Resetup") & "] i b|fffd|ndet (Ribbon), under '" & RibCTRLLabel(Custom_Ribbon_CodeName) & "' fanen."
            End With
      End If


' * ' RibbonX CallBacks
      If ResetupCMUF("VBA_RibbonX_CallBacks") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "VBA_RibbonX_CallBacks"
                  .Offset(0, 3).Value = ResetupString("Code Module")
                  .Offset(0, 9).Value = "Code module containing all the 'Call Backs' for setting up the custom Ribbon of this workbook, under the '" & RibCTRLLabel(Custom_Ribbon_CodeName) & "' tab."
                  If ResetupLanguage = "Danish" Then .Offset(0, 9).Value = "Kodemodul med alle 'Call Backs' til ops|fffd|tning af det tilpassede b|fffd|nd (Ribbon) i denne regnearksfil, under '" & RibCTRLLabel(Custom_Ribbon_CodeName) & "' fanen."
            End With
      End If


' * ' Make devider between contents and texts describtions
      NextRow = NextRow + 1
      With .Range("B" & NextRow & ":P" & NextRow).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = rgbBlack
            .Weight = xlThin
      End With
      NextRow = NextRow + 1


' * ' Text describtions
      If ResetupLanguage = "Danish" Then
            .Range("B" & .Rows.Count).End(xlUp).Offset(3, 0).Value = "Tryk p|fffd| [Alt] + [F11] for at |fffd|bne Visual Basic Editor (VBE) og for at se alt makro kode"
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "I alle modulerne og i alle makroerne, kan man finde n|fffd|rmere dokumentation og forklaring, eller man kan bes|fffd|ge websitet for fuld dokumentation og forklaring til alt i denne regnearksfil."
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Hvis man benytter noget, fundet i denne regnearksfil, s|fffd| giv da, venligst, beh|fffd|rig kredit og link til www.EXCELGAARD.dk - p|fffd| forh|fffd|nd tak :-)"
      Else
            .Range("B" & .Rows.Count).End(xlUp).Offset(3, 0).Value = "Press [Alt] + [F11] to open the Visual Basic Editor (VBE), and to view the macro code"
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "In all the modules and in all the macros, you find a full in-debt documetion/explanation, or you can visit the website for full documentation and explanation of everything found in this workbook."
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "If you use anything found in this workbook in your own projects, please, give proper credit and link to www.EXCELGAARD.dk - thank you in advance :-)"
      End If

      With .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0)
            .FormulaHidden = True
            .Formula = "=" & ThisWorkbook.VBProject.Name
      End With


ES: ' End of Sub
      .Protect UserInterfaceOnly:=True

      If ActiveSheet.Name = .Name And ThisWorkbook.IsAddin = False Then
            ActiveWindow.Zoom = 100
            ActiveWindow.FreezePanes = False
            Application.ScreenUpdating = True

            Range("A1").Select
      End If

      End With

      Application.Run "EXCELGAARD_RibbonX_Update", False

      Set CDS = Nothing
      Set WST = Nothing

End Sub
Private Sub Resetup_Standard_Information(ByVal WSS As Excel.Worksheet)

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      On Error Resume Next

      With WSS


' * ' Define variable
      Dim NextRow As Long
      NextRow = .Range("B" & .Rows.Count).End(xlUp).Row + 1


' * ' Make devider between contents and texts describtions
      With .Range("B" & NextRow & ":L" & NextRow).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = rgbBlack
            .Weight = xlThin
      End With


' * ' Example part of help text
      If ResetupLanguage = "Danish" Then
            If RibbonButton <> "" And RibbonTab <> "" Then .Range("B" & .Rows.Count).End(xlUp).Offset(3, 0).Value = "Tryk p|fffd| [" & RibbonButton & "] under '" & RibbonTab & "' fanen i menu-b|fffd|ndet for at vise et eksempel p|fffd| brugen af denne macro/VBA kode."
            If ThisWorkbook.IsAddin = True Then
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Bes|fffd|g websitet for fuld forklaring og dokumentation."
            Else
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Tryk p|fffd| [Alt] + [F11] for at |fffd|bne Visual Basic Editor (VBE) og for at se alt makro kode"
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "I alle modulerne og i alle makroerne, kan man finde n|fffd|rmere dokumentation og forklaring, eller man kan bes|fffd|ge websitet for fuld dokumentation og forklaring til alt i denne regnearksfil."
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Hvis man benytter noget, fundet i denne regnearksfil, s|fffd| giv da, venligst, beh|fffd|rig kredit og link til www.EXCELGAARD.dk - p|fffd| forh|fffd|nd tak :-)"
            End If
      Else
            If RibbonButton <> "" And RibbonTab <> "" Then .Range("B" & .Rows.Count).End(xlUp).Offset(3, 0).Value = "Click the [" & RibbonButton & "] button under the '" & RibbonTab & "' tab of the ribbon to show an example on using this macro/VBA code."
            If ThisWorkbook.IsAddin = True Then
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Visit the website for full explanation and documentation."
            Else
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Press [Alt] + [F11] to open the Visual Basic Editor (VBE), and to view the macro code"
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "In all the modules and in all the macros, you find a full in-debt documetion/explanation, or you can visit the website for full documentation and explanation of everything found in this workbook."
                  .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "If you use anything found in this workbook in your own projects, please, give proper credit and link to www.EXCELGAARD.dk - thank you in advance :-)"
            End If
      End If


ES: ' End of Sub
      .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).FormulaHidden = True
      .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Formula = "=" & ThisWorkbook.VBProject.Name

      .Protect UserInterfaceOnly:=True

      If ThisWorkbook.IsAddin = False And ActiveSheet.Name = .Name Then
            ActiveWindow.Zoom = 100
            ActiveWindow.FreezePanes = False
            Application.ScreenUpdating = True

            Range("A1").Select
      End If

      End With

End Sub
Private Function ResetupCMUF(ByVal ComponentName As String) As Boolean

' The purpose of the little function is simply to test if a VB Component with the given name exists in this workbook.
'
' Notice that if the workbook is locked/unreadable, we assume that the VB Component exists, thus returning 'True'
' You can change that for specific VB Components at the end of the function.
'
' For this function to work, the workbook MUST have VB Reference to the 'MS VBA Extensibility' library.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      ComponentName = UCase$(Replace(ComponentName, " ", "_"))

      Dim VBC As VBComponent
      Dim TWB As Excel.Workbook
      Set TWB = ThisWorkbook

      Dim TempResult As Boolean
      If TWB.VBProject.VBComponents.Count > 0 Then
            TempResult = False
      Else
            TempResult = True
            GoTo EF:
      End If


' * ' Search for the given VB Component
      For Each VBC In TWB.VBProject.VBComponents
            If UCase$(VBC.Name) = ComponentName Then TempResult = True
      Next


EF: ' End of Function
      If TWB.VBProject.VBComponents.Count < 1 Then    ' Set specific VB Components to 'False' if VB Project is locked/unreadable
            Select Case ComponentName
                  Case UCase$("SWS_Information"):           TempResult = False
                  Case UCase$("SWS_Example"):               TempResult = False
                  Case UCase$("TPP_Colors"):                TempResult = False
                  Case UCase$("UDF_Credentials"):           TempResult = False
                  Case UCase$("WUF_Credentials"):           TempResult = False
                  Case UCase$("UDF_GetSpecialFolder"):      TempResult = False
                  Case UCase$("WUF_GetSpecialFolder"):      TempResult = False
            End Select
      End If

      ResetupCMUF = TempResult

      Set TWB = Nothing
      Set VBC = Nothing

End Function
Private Function ResetupLanguage() As String

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.
'
' Purpose of this little function is simply to test if we're using Danish or Non-Danish (English) language.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim TempLanguage As String


' * ' (Try to) find language of current Excel
      TempLanguage = Application.Run("LOCEA")         ' Requires EXCELGAARD's 'LOCEA' function to be available/installed
      If Len(TempLanguage) < 1 Then TempLanguage = Application.Run("RibbonXLanguage")
      If Len(TempLanguage) < 1 Then
            Select Case Application.LanguageSettings.LanguageID(2)
                  Case 1030, 1080:  TempLanguage = "Danish"
                  Case Else:        TempLanguage = "English"
            End Select
      End If


EF: ' End of Function
      If UseEnglishFlag = True Or Len(TempLanguage) < 2 Then TempLanguage = "English"

      ResetupLanguage = TempLanguage

End Function
Private Function ResetupString(ByVal StringKey As String) As String

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.
'
' Purpose of this little function is simply to provide standard translations of standard texts in this projects/workbook.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      StringKey = UCase$(Replace(StringKey, " ", vbNullString))
      Dim TempString As String


' * ' Find translated string
      If ResetupLanguage = "Danish" Then
            Select Case StringKey
                  Case UCase$("Chart"):         TempString = "Diagram/Graf"
                  Case UCase$("ClassModule"):   TempString = "VBA Klasse Modul"
                  Case UCase$("CodeModule"):    TempString = "VBA Kode Modul"
                  Case UCase$("Macro"):         TempString = "Makro"
                  Case UCase$("Table"):         TempString = "Tabel (regneark)"
                  Case UCase$("UDF"):           TempString = "Bruger-Defineret Funktion (UDF)"
                  Case UCase$("UserForm"):      TempString = "Dialogboks (UserForm)"
                  Case UCase$("Worksheet"):     TempString = "Regneark"
                  Case UCase$("Workbook"):      TempString = "Regnearksfil"
                  Case Else:                    TempString = vbNullString
            End Select
      Else
            Select Case StringKey
                  Case UCase$("Chart"):         TempString = "Chart/Diagram"
                  Case UCase$("ClassModule"):   TempString = "VBA Class Module"
                  Case UCase$("CodeModule"):    TempString = "VBA Code Module"
                  Case UCase$("Macro"):         TempString = "Macro"
                  Case UCase$("Table"):         TempString = "Table (worksheet)"
                  Case UCase$("UDF"):           TempString = "User-Defined Function (UDF)"
                  Case UCase$("UserForm"):      TempString = "UserForm"
                  Case UCase$("Worksheet"):     TempString = "Worksheet"
                  Case UCase$("Workbook"):      TempString = "Workbook"
                  Case Else:                    TempString = vbNullString
            End Select
      End If


EF: ' End of Function
      ResetupString = TempString

End Function

Attribute VB_Name = "VBA_RibbonX_CallBacks"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation

' The workbook MUST have VB Reference to 'MS Office Object Library'

' This module contains all the call backs of the custom Ribbon built into this project/workbook.


' Constant for showing the ribbon or not
  Public Const Custom_Ribbon_Visible As Boolean = True
  Public Const Custom_Ribbon_CodeName As String = "Tab_EXCELGAARD"

' Constant for development purposes
  Const Module_DebugPrint As Boolean = False

' Assign Ribbon to variable for using it later on...
  Private RibbonX As IRibbonUI                                                            ' Workbook Ribbon Object   (Requires references to 'MS Office Object' Libray (Required for workbooks containing custom rebbons)

' API functions
 #If VBA7 And Win64 Then
      Private Declare PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Long
      Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef source As Any, ByVal length As LongPtr)
      Private Declare PtrSafe Function MaximizeWindow Lib "user32" Alias "ShowWindow" (ByVal hwnd As Long, Optional ByVal WinState As Long = 3) As Long
 #Else
      Private Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Long
      Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef source As Any, ByVal length As Long)
      Private Declare Function MaximizeWindow Lib "user32" Alias "ShowWindow" (ByVal hwnd As Long, Optional ByVal WinState As Long = 3) As Long
 #End If

Option Private Module
Option Explicit
Private Sub RibbonX_Update_Manual()
Attribute RibbonX_Update_Manual.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' Hit [F5] with the cursor placed in this macro, to run this macro...

      On Error Resume Next
      Call EXCELGAARD_RibbonX_Update(False)

End Sub
Sub EXCELGAARD_RibbonX_OnAction(RibCTRL As IRibbonControl)
Attribute EXCELGAARD_RibbonX_OnAction.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim SD As Boolean
      SD = CBool(GetKeyState(vbKeyShift) And -128)
      If CLng(GetKeyState(vbKeyShift) And -128) = 0 Then SD = False

      Dim URL(9) As String
      URL(1) = "http://www.EXCELGAARD.dk/Lib/"
      URL(2) = "http://www.EXCELGAARD.dk/Lib/MAPDISTANCE/"
      URL(3) = "http://www.EXCELGAARD.dk/Lib/FAQ/Disclaimer/"
      URL(4) = "http://www.EXCELGAARD.dk/Lib/FAQ/Donation/"
      If RibbonXLanguage = "Danish" Then
            URL(1) = "http://www.EXCELGAARD.dk/Bib/"
            URL(2) = "http://www.EXCELGAARD.dk/Bib/KORTAFSTAND/"
            URL(3) = "http://www.EXCELGAARD.dk/Bib/FAQ/Forbehold/"
            URL(4) = "http://www.EXCELGAARD.dk/Bib/FAQ/Donation/"
      End If

      URL(5) = URL(5) & "Name" & vbTab & ": " & RTrim$(LTrim$(ThisWorkbook.BuiltinDocumentProperties("Title").Value)) & vbNewLine & vbNewLine
      If Len(Replace(ThisWorkbook.CustomDocumentProperties("Version").Value, " ", vbNullString)) > 1 Then URL(5) = URL(5) & "Version" & vbTab & ": " & RTrim$(LTrim$(ThisWorkbook.CustomDocumentProperties("Version").Value)) & vbNewLine & vbNewLine
      URL(5) = URL(5) & LTrim(ThisWorkbook.BuiltinDocumentProperties("Comments")) & vbNewLine & vbNewLine
      URL(5) = URL(5) & Evaluate(ThisWorkbook.Names("EXCELGAARD").Value)

      URL(6) = "http://www.InternetURL.dk/Wikipedia/Link.Wikipedia, Google Maps.HTM"
      If RibbonXLanguage = "Danish" Then URL(6) = "http://www.InternetURL.dk/Wikipedia/Link.Wikipedia, Google Maps.HTML"

      URL(7) = "http://www.InternetURL.dk/Google/Link.Google, Maps.HTM"
      If RibbonXLanguage = "Danish" Then URL(7) = "http://www.InternetURL.dk/Google/Link.Google, Maps.HTML"

      ActiveSheet.Select


' * ' Perform selected action
      Select Case RibCTRL.ID
            Case "Button_EXCELGAARD_View_Code":       With Application.VBE.MainWindow     ' View code
                                                            .Visible = True
                                                            .SetFocus
                                                            .WindowState = 2              ' Maximized
                                                      End With
            Case "Button_EXCELGAARD_Resetup":         Application.Run "Resetup"
            Case "Button_EXCELGAARD_Help_Button":     ActiveWorkbook.FollowHyperlink Address:=URL(2), NewWindow:=True, AddHistory:=False
            Case "Button_EXCELGAARD_Website":         ActiveWorkbook.FollowHyperlink Address:=URL(1), NewWindow:=True, AddHistory:=True
            Case "Button_EXCELGAARD_Help_Menu":       ActiveWorkbook.FollowHyperlink Address:=URL(2), NewWindow:=True, AddHistory:=False
            Case "Button_EXCELGAARD_Disclaimer":      ActiveWorkbook.FollowHyperlink Address:=URL(3), NewWindow:=True, AddHistory:=False
            Case "Button_EXCELGAARD_Donation":        ActiveWorkbook.FollowHyperlink Address:=URL(4), NewWindow:=True, AddHistory:=False
            Case "Button_EXCELGAARD_Info":            MsgBox URL(5), vbOKOnly + vbInformation, " " & RTrim$(LTrim$(ThisWorkbook.BuiltinDocumentProperties("Title").Value))
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_AA":              Application.Run "MAPDISTANCE_Example"
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_BA":              ActiveWorkbook.FollowHyperlink Address:=URL(7), NewWindow:=True, AddHistory:=False
            Case "Button_EXCELGAARD_BB":              ActiveWorkbook.FollowHyperlink Address:=URL(6), NewWindow:=True, AddHistory:=False
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'OnAction'   :  " & RibCTRL.ID
      End Select


ES: ' End of Sub
      With Application
            .Calculation = xlCalculationAutomatic
            .EnableCancelKey = xlInterrupt
          ' .PrintCommunication = False                                                   ' Won't work in XL2007 or earlier
            .ScreenUpdating = True
            .DisplayAlerts = True
            .EnableEvents = True
            .Interactive = True
            .Cursor = xlDefault
            .StatusBar = False
      End With
      ActiveSheet.DisplayPageBreaks = False
      
End Sub
Function RibCTRLLabel(RibbonControlID As String, Optional RemoveNewLine As Boolean = False) As String
Attribute RibCTRLLabel.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' We set the labels of the RibbonX control using this function, instead of directly setting the labels.
' Reason for using this approch, is to be able to refer to the labels from other macros.
' (And it also makes it easier to add new labels and/or new languages :-)


' * ' Initialize
      On Error Resume Next


' * ' Define variable
      Dim TempLabel As String


' * ' Label the ribbon items
      If RibbonXLanguage = "Danish" Then
            Select Case RibbonControlID
                  Case Custom_Ribbon_CodeName:              TempLabel = "EXCELGAARD":
                  Case "Group_EXCELGAARD_Generic":          TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_View_Code":       TempLabel = "Vis makro kode"
                  Case "Button_EXCELGAARD_Resetup":         TempLabel = "Genopret regneark"
                  Case "Button_EXCELGAARD_Help_Button":     TempLabel = "On-line hj|fffd|lp"
                  Case "Menu_EXCELGAARD":                   TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_Website":         TempLabel = "www.EXCELGAARD.dk"
                  Case "Button_EXCELGAARD_Help_Menu":       TempLabel = "On-line hj|fffd|lp"
                  Case "Button_EXCELGAARD_Disclaimer":      TempLabel = "Ansvarsfraskrivelse"
                  Case "Button_EXCELGAARD_Donation":        TempLabel = "Donation"
                  Case "Button_EXCELGAARD_Info":            TempLabel = "Information"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case "Group_EXCELGAARD_A":                TempLabel = "KORTAFSTAND ()"
                  Case "Button_EXCELGAARD_AA":              TempLabel = "Eksempel"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case "Group_EXCELGAARD_B":                TempLabel = "Google Maps"
                  Case "Button_EXCELGAARD_BA":              TempLabel = "Google" & vbNewLine & "Maps"
                  Case "Button_EXCELGAARD_BB":              TempLabel = "L|fffd|s mere p|fffd|" & vbNewLine & "Wikipedia"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case Else:                                TempLabel = vbNullString
            End Select
      Else                                                ' Use 'ElseIf' when building in more languages
            Select Case RibbonControlID
                  Case Custom_Ribbon_CodeName:              TempLabel = "EXCELGAARD":
                  Case "Group_EXCELGAARD_Generic":          TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_View_Code":       TempLabel = "Show macro code"
                  Case "Button_EXCELGAARD_Resetup":         TempLabel = "Resetup spreadsheet"
                  Case "Button_EXCELGAARD_Help_Button":     TempLabel = "On-line help"
                  Case "Menu_EXCELGAARD":                   TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_Website":         TempLabel = "www.EXCELGAARD.dk"
                  Case "Button_EXCELGAARD_Help_Menu":       TempLabel = "On-line help"
                  Case "Button_EXCELGAARD_Disclaimer":      TempLabel = "Disclaimer"
                  Case "Button_EXCELGAARD_Donation":        TempLabel = "Donation"
                  Case "Button_EXCELGAARD_Info":            TempLabel = "Information"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case "Group_EXCELGAARD_A":                TempLabel = "MAPDISTANCE ()"
                  Case "Button_EXCELGAARD_AA":              TempLabel = "Example"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case "Group_EXCELGAARD_B":                TempLabel = "Google Maps"
                  Case "Button_EXCELGAARD_BA":              TempLabel = "Google" & vbNewLine & "Maps"
                  Case "Button_EXCELGAARD_BB":              TempLabel = "Read more on" & vbNewLine & "Wikipedia"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case Else:                                TempLabel = vbNullString
            End Select
      End If


EF: ' End of function
      If Len(TempLabel) < 1 Then TempLabel = vbNullString
      
      If RemoveNewLine = True Then
            TempLabel = WorksheetFunction.Trim(Replace(Replace(Replace(Replace(TempLabel, vbNewLine, " "), vbCr, " "), vbLf, " "), "&#13;", " "))
      End If

      RibCTRLLabel = TempLabel

End Function
Sub EXCELGAARD_RibbonX_GetLabel(RibCTRL As IRibbonControl, ByRef Item_Label)
Attribute EXCELGAARD_RibbonX_GetLabel.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' The labels are fetched using the function, 'RibCTRLLabel', above.


' * ' Initialize
      On Error Resume Next


' * ' Get the label from the labeling function
      Item_Label = RibCTRLLabel(RibCTRL.ID)


ES: ' End of Sub
      If Len(Item_Label) < 1 Then
            Item_Label = "???"                                                            ' Use a space (" "), if you really don't want a label to show
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'Label'      :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetScreenTip(RibCTRL As IRibbonControl, ByRef Item_ScreenTip)
Attribute EXCELGAARD_RibbonX_GetScreenTip.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' We rarely uses 'ScreenTip', but instead we set the ScreenTip to the same as the Label of the control, at the end of this macro.


' * ' Initialize
      On Error Resume Next


' * ' Label the ribbon items
      If RibbonXLanguage = "Danish" Then
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Resetup":         Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Help_Button":     Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Website":         Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Help_Menu":       Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Disclaimer":      Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Donation":        Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Info":            Item_ScreenTip = " "
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_ScreenTip = " "
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_BA":              Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_BB":              Item_ScreenTip = " "
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_ScreenTip = vbNullString
            End Select
      Else
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Resetup":         Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Help_Button":     Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Website":         Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Help_Menu":       Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Disclaimer":      Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Donation":        Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_Info":            Item_ScreenTip = " "
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_ScreenTip = " "
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_BA":              Item_ScreenTip = " "
                  Case "Button_EXCELGAARD_BB":              Item_ScreenTip = " "
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_ScreenTip = vbNullString
            End Select
      End If


ES: ' End of Sub
      If Len(Item_ScreenTip) < 1 Then
            Item_ScreenTip = RibCTRLLabel(RibCTRL.ID, True)
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'ScreenTip'  :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetSuperTip(RibCTRL As IRibbonControl, ByRef Item_SuperTip)
Attribute EXCELGAARD_RibbonX_GetSuperTip.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' Notice    : To insert a new line in a SuperTip use:  &#13;
' Like this : SuperTip="This is line 1 of the supertip&#13;and this is line 2."
'                                                     |fffd||fffd||fffd||fffd||fffd|
' This macro will also allow you to use the vbConstant, vbNewline, if you want to.


' * ' Initialize
      On Error Resume Next


' * ' Label the ribbon items
      If RibbonXLanguage = "Danish" Then
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_SuperTip = "|fffd|bn Visual Basic Editor (VBE) for at se makro koden."
                  Case "Button_EXCELGAARD_Resetup":         Item_SuperTip = "Genopret (hj|fffd|lpe-) ark."
                  Case "Button_EXCELGAARD_Help_Button":     Item_SuperTip = "Vis projektets side p|fffd| Internettet." & "!DK!"
                  Case "Button_EXCELGAARD_Website":         Item_SuperTip = "Bes|fffd|g www.EXCELGAARD.dk" & "!DK!"
                  Case "Button_EXCELGAARD_Help_Menu":       Item_SuperTip = "Vis projektets side p|fffd| Internettet." & "!DK!"
                  Case "Button_EXCELGAARD_Disclaimer":      Item_SuperTip = "Vis ansvarsfraskrivelse og forbehold for brug af indholdet i dette regneark og andet materiale fundet p|fffd| EXCELGAARD's website." & "!DK!"
                  Case "Button_EXCELGAARD_Donation":        Item_SuperTip = "Giv en donation til EXCELGAARD og hj|fffd|lp med til websites forsatte best|fffd|en." & "!DK!"
                  Case "Button_EXCELGAARD_Info":            Item_SuperTip = "Vis de grundl|fffd|ggende information om dette projekt."
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_SuperTip = "Viser eksempel p|fffd| brugen af funktionen, KORTAFSTAND()."
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_BA":              Item_SuperTip = "Bes|fffd|g Google Maps." & "!DK!"
                  Case "Button_EXCELGAARD_BB":              Item_SuperTip = "L|fffd|s mere om Google Maps p|fffd| Wikipedia." & "!DK!"
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_SuperTip = vbNullString
            End Select
      Else
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_SuperTip = "Open Visual Basic Editor (VBE) to view the macro code."
                  Case "Button_EXCELGAARD_Resetup":         Item_SuperTip = "Resetup (help-) sheet."
                  Case "Button_EXCELGAARD_Help_Button":     Item_SuperTip = "Show the homepage of this project on the Internet." & "!EN!"
                  Case "Button_EXCELGAARD_Website":         Item_SuperTip = "Visit www.EXCELGAARD.dk" & "!EN!"
                  Case "Button_EXCELGAARD_Help_Menu":       Item_SuperTip = "Show the homepage of this project on the Internet." & "!EN!"
                  Case "Button_EXCELGAARD_Disclaimer":      Item_SuperTip = "Show disclaimer for the use of the contents in this workbook and for anything else found on the EXCELGAARD website." & "!EN!"
                  Case "Button_EXCELGAARD_Donation":        Item_SuperTip = "Please, give a donation to EXCELGAARD and help support the continued existence of the website." & "!EN!"
                  Case "Button_EXCELGAARD_Info":            Item_SuperTip = "Show summary information about this project."
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_SuperTip = "Show example on the usage of the function, MAPDISTANCE()."
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_BA":              Item_SuperTip = "Visit Google Maps." & "!EN!"
                  Case "Button_EXCELGAARD_BB":              Item_SuperTip = "Read more about Google Maps on Wikipedia" & "!EN!"
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_SuperTip = vbNullString
            End Select
      End If
      Item_SuperTip = Replace(CStr(Item_SuperTip), "!dk!", vbNewLine & vbNewLine & "Kr|fffd|ver Internet adgang.")
      Item_SuperTip = Replace(CStr(Item_SuperTip), "!en!", vbNewLine & vbNewLine & "Requires Internet access.")
      Item_SuperTip = Replace(CStr(Item_SuperTip), "!DK!", vbNewLine & vbNewLine & "Kr|fffd|ver Internet adgang og vil |fffd|bne et nyt vindue i din Internet browser")
      Item_SuperTip = Replace(CStr(Item_SuperTip), "!EN!", vbNewLine & vbNewLine & "Requires Internet access and will open a new window in your Internet browser")


ES: ' End of Sub
      If Len(Item_SuperTip) < 1 Then
            Item_SuperTip = ThisWorkbook.BuiltinDocumentProperties("Hyperlink base").Value
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'SuperTip'   :  " & RibCTRL.ID
      End If

      If Val(Application.Version) < 14 Then Item_SuperTip = Replace(Replace(Replace(CStr(Item_SuperTip), vbCrLf, vbCr), vbLf, vbCr), vbCr, "&#13;")

    ' Debug.Print vbNewLine & RibCTRL.ID & vbNewLine & Item_SuperTip & vbNewLine

End Sub
Sub EXCELGAARD_RibbonX_GetImage(RibCTRL As IRibbonControl, ByRef Item_Image)
Attribute EXCELGAARD_RibbonX_GetImage.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' This macro will use the User-Defined Function (UDF), called 'LoadURLPicture', to insert custom icons in the Ribbon,
' thus, the function, 'LoadURLPicture', MUST be included in the workbook also!
'
' The function, 'LoadURLPicture', is made by EXCELGAARD, and you can read all about it at: http://www.EXCELGAARD.dk/


' * ' Initialize
      On Error Resume Next


' * ' Set image of ribbon items
      Select Case RibCTRL.ID
            Case "Group_EXCELGAARD_Generic":          Item_Image = "uiEXCELGAARD"
            Case "Button_EXCELGAARD_View_Code":       Item_Image = "ViewVisualBasicCode"
            Case "Button_EXCELGAARD_Resetup":         Item_Image = "uiSheetBuild"
            Case "Button_EXCELGAARD_Help_Button":     Item_Image = "Help"
            Case "Menu_EXCELGAARD":                   Item_Image = "uiEXCELGAARD"
            Case "Button_EXCELGAARD_Website":         Item_Image = "uiInternetSurfer"
            Case "Button_EXCELGAARD_Help_Menu":       Item_Image = "Help"
            Case "Button_EXCELGAARD_Disclaimer":      Item_Image = "uiThemis"
            Case "Button_EXCELGAARD_Donation":        Item_Image = "uiDonation"
            Case "Button_EXCELGAARD_Info":            Item_Image = "Info"
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Group_EXCELGAARD_A":                Item_Image = "uiMapDistance"
            Case "Button_EXCELGAARD_AA":              Item_Image = "uiMapDistance"
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Group_EXCELGAARD_B":                Item_Image = "uiGoogleMaps"
            Case "Button_EXCELGAARD_BA":              Item_Image = "uiGoogleMaps"
            Case "Button_EXCELGAARD_BB":              Item_Image = "uiWikipedia"
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Image = vbNullString
      End Select


' * ' No image set...
      If Len(Item_Image) < 1 Then
            Item_Image = "ChangeToTentativeAcceptInvitation"                                    ' Default image = Question Marks (???)
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'Image'      :  " & RibCTRL.ID
      End If


' * ' User Icon selected
      If Left(Item_Image, 2) = "ui" Then
            Item_Image = Replace(Item_Image, " ", vbNullString)
            If UCase(Right(Item_Image, 4)) = ".BMP" Then Item_Image = Left(Item_Image, Len(Item_Image) - 4)
            If UCase(Right(Item_Image, 4)) <> ".PNG" Then Item_Image = Item_Image & ".PNG"
            Set Item_Image = Application.Run("LoadURLPicture", Item_Image)
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetSize(RibCTRL As IRibbonControl, ByRef Item_Size)
Attribute EXCELGAARD_RibbonX_GetSize.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      Const rbxItemSizeNormal As Long = 0
      Const rbxItemSizeLarge  As Long = 1                                                       ' Default

      On Error Resume Next


' * ' Set size of ribbon items
      Select Case RibCTRL.ID
            Case "Group_EXCELGAARD":                  Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_View_Code":       Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Resetup":         Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Help_Button":     Item_Size = rbxItemSizeNormal
            Case "Menu_EXCELGAARD":                   Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Website":         Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Help_Menu":       Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Disclaimer":      Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Donation":        Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Info":            Item_Size = rbxItemSizeNormal
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_AA":              Item_Size = rbxItemSizeLarge
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_BA":              Item_Size = rbxItemSizeLarge
            Case "Button_EXCELGAARD_BB":              Item_Size = rbxItemSizeLarge
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Size = xlNone
      End Select


ES: ' End of Sub
      If Item_Size = xlNone Then
            Item_Size = rbxItemSizeLarge                                                        ' Default
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'Size'       :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetVisible(RibCTRL As IRibbonControl, ByRef Item_Visible)
Attribute EXCELGAARD_RibbonX_GetVisible.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Set visibility of ribbon items
      Select Case RibCTRL.ID
            Case Custom_Ribbon_CodeName:              Item_Visible = Custom_Ribbon_Visible
            Case "Group_EXCELGAARD_Generic":          Item_Visible = True
            Case "Button_EXCELGAARD_View_Code":       Item_Visible = True
            Case "Button_EXCELGAARD_Resetup":         Item_Visible = True
            Case "Button_EXCELGAARD_Help_Button":     Item_Visible = False
            Case "Menu_EXCELGAARD":                   Item_Visible = True
            Case "Button_EXCELGAARD_Website":         Item_Visible = True
            Case "Button_EXCELGAARD_Help_Menu":       Item_Visible = True
            Case "Button_EXCELGAARD_Disclaimer":      Item_Visible = True
            Case "Button_EXCELGAARD_Donation":        Item_Visible = True
            Case "Button_EXCELGAARD_Info":            Item_Visible = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Group_EXCELGAARD_A":                Item_Visible = True
            Case "Button_EXCELGAARD_AA":              Item_Visible = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Group_EXCELGAARD_B":                Item_Visible = True
            Case "Button_EXCELGAARD_BA":              Item_Visible = True
            Case "Button_EXCELGAARD_BB":              Item_Visible = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Visible = xlNone
      End Select


ES: ' End of Sub
      If Item_Visible = xlNone Then
            If Left$(RibCTRL.ID, 9) = "Separator" Then
                  Item_Visible = False
            Else
                  Item_Visible = True
                  If Module_DebugPrint = True And RibCTRL.ID <> "TabDeveloper" Then Debug.Print ThisWorkbook.Name, "Missing 'Visibility' :  " & RibCTRL.ID
            End If
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetEnabled(RibCTRL As IRibbonControl, ByRef Item_Enabled)
Attribute EXCELGAARD_RibbonX_GetEnabled.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Set visibility of ribbon items
      Select Case RibCTRL.ID
            Case "Group_EXCELGAARD":                  Item_Enabled = True
            Case "Button_EXCELGAARD_View_Code":       Item_Enabled = True
            Case "Button_EXCELGAARD_Resetup":         Item_Enabled = True
            Case "Button_EXCELGAARD_Help_Button":     Item_Enabled = True
            Case "Menu_EXCELGAARD":                   Item_Enabled = True
            Case "Button_EXCELGAARD_Website":         Item_Enabled = True
            Case "Button_EXCELGAARD_Help_Menu":       Item_Enabled = True
            Case "Button_EXCELGAARD_Disclaimer":      Item_Enabled = True
            Case "Button_EXCELGAARD_Donation":        Item_Enabled = True
            Case "Button_EXCELGAARD_Info":            Item_Enabled = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_AA":              Item_Enabled = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_BA":              Item_Enabled = True
            Case "Button_EXCELGAARD_BB":              Item_Enabled = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Enabled = xlNone
      End Select


ES: ' End of Sub
      If Item_Enabled = xlNone Then
            Item_Enabled = True
            If Module_DebugPrint = True And RibCTRL.ID <> "TabDeveloper" Then Debug.Print ThisWorkbook.Name, "Missing 'Enabled'    :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_OnLoad(CustumRibbon As IRibbonUI)
Attribute EXCELGAARD_RibbonX_OnLoad.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Define variable
      Set RibbonX = CustumRibbon


' * ' Save Ribbon handle, in case of state loss
      ThisWorkbook.Names.Add Name:="RibbonX_Handle", RefersToR1C1:=ObjPtr(RibbonX), Visible:=ThisWorkbook.IsAddin
      ThisWorkbook.Names("RibbonX_Handle").Comment = "Stored handle for custom ribbon in case of state loss."


ES: ' End of Sub
      Call EXCELGAARD_RibbonX_Update

End Sub
Sub EXCELGAARD_RibbonX_Update(Optional RecoverStateLoss As Long = 2)
Attribute EXCELGAARD_RibbonX_Update.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      Const TryToRecoveLossState As Boolean = True

      On Error Resume Next

      If Custom_Ribbon_Visible = False Then Exit Sub


' * ' Define variable
      Dim TempRibbon As Object
      If RecoverStateLoss = 2 Then RecoverStateLoss = TryToRecoveLossState                ' Use default, if not set upon calling

      Dim RibbonHandle As Variant
      RibbonHandle = Mid(ThisWorkbook.Names("RibbonX_Handle").Value, 2)                   ' Get Ribbon handle stored in name upon 'OnLoad'

      Dim StateLossText As String
      StateLossText = "RibbonX State was lost - State restored with handle: " & RibbonHandle


' * ' Update ribbon
      If RibbonX Is Nothing Then
            If CBool(RecoverStateLoss) = True Then
                  CopyMemory TempRibbon, CLng(RibbonHandle), LenB(RibbonHandle)
                  If Not TempRibbon Is Nothing Then Set RibbonX = TempRibbon
                  If Module_DebugPrint = True Then Debug.Print StateLossText
                ' MsgBox StateLossText
            Else
                  If Module_DebugPrint = True Then Debug.Print "RibbonX State was lost - State recovery not executed - Ribbon not updated!"
            End If
      End If
      RibbonX.Invalidate


ES: ' End of Sub
      Call EXCELGAARD_RibbonX_ActivateControl(Custom_Ribbon_CodeName)

      Set TempRibbon = Nothing

End Sub
Sub EXCELGAARD_RibbonX_ActivateControl(Optional RibCTRL As String = "TabHome")
Attribute EXCELGAARD_RibbonX_ActivateControl.VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' * ' Initialize
      On Error Resume Next


' * ' Active the given control (tab)
      Select Case RibCTRL
            Case Custom_Ribbon_CodeName:  RibbonX.ActivateTab ControlID:=Custom_Ribbon_CodeName
            Case Else:                    RibbonX.ActivateTabMso "TabHome"
      End Select


ES: ' End of Sub
      If Err.Number <> 0 Then
          If Module_DebugPrint = True Then Debug.Print RibCTRL, Err.Number & ", " & Err.Description
      End If

End Sub
Function RibbonXLanguage() As String

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim Counter      As Long
      Dim TempLanguage As String


' * ' (Try to) find language of current Excel
      For Counter = 1 To 3
            If Counter = 1 Then TempLanguage = Replace(Replace(ThisWorkbook.Names("LOCEA").Value, "=", vbNullString), Chr$(34), vbNullString)
            If Counter = 3 Then TempLanguage = Application.Run("LOCEA")
            
            Select Case UCase$(TempLanguage)
                  Case "DANISH":          TempLanguage = "Danish"
                  Case "ENGLISH":         TempLanguage = "English"
                  Case Else:              TempLanguage = vbNullString
            End Select
            If Len(TempLanguage) > 1 Then Exit For
      Next

      If Len(TempLanguage) < 2 Then
            Select Case Application.LanguageSettings.LanguageID(2)
                  Case 1030, 1080:  TempLanguage = "Danish"
                  Case Else:        TempLanguage = "English"
            End Select
      End If


EF: ' End of Function
      RibbonXLanguage = TempLanguage

      TempLanguage = vbNullString

End Function


' InQuest injected base64 decoded content
' ZrH+
' /j)ZnW
' /j)ZnW
' +-jw

INQUEST-PP=macro
