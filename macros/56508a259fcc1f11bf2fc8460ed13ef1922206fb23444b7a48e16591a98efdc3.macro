Attribute VB_Name = "BookingMacros"
Option Explicit

Sub Booking_Load()
With Sheet1
    Dim BkgRow As Long
    Dim BkgCol As Long
    If .Range("B1").Value = Empty Then Exit Sub
    BkgRow = .Range("B1").Value
    .Range("B2").Value = False 'Set New Booking to False
    .Range("B3").Value = True 'Set Booking Load to True
    For BkgCol = 4 To 9
        .Range(.Cells(14, BkgCol).Value).Value = .Cells(BkgRow, BkgCol).Value 'Load Booking Details
    Next BkgCol
    .Shapes("NewBkgGrp").Visible = msoFalse
    .Shapes("ExistBkgGrp").Visible = msoCTrue
    .Range("B3").Value = False 'Set Booking Load to False
End With
End Sub

Sub Booking_SaveUpdate()
With Sheet1
    Dim BkgRow As Long
    Dim BkgCol As Long
    If .Range("B2").Value = True Then 'New Booking
        BkgRow = .Range("D999").End(xlUp).Row + 1  'First available Row
    Else: 'Existing Booking
        BkgRow = .Range("B1").Value 'Booking Row
    End If
    For BkgCol = 4 To 9
      .Cells(BkgRow, BkgCol).Value = .Range(.Cells(14, BkgCol).Value).Value   'Save Booking Details
    Next BkgCol
        .Shapes("NewBkgGrp").Visible = msoFalse
        .Shapes("ExistBkgGrp").Visible = msoCTrue
        .Range("B2").Value = False 'Set New Booking to False
        .Range("B3").Value = False 'Set Booking Load to False
End With
End Sub
Sub Booking_New()
With Sheet1
    .Range("B2").Value = True 'Set New Booking to true
    .Range("B1,E4:G4,E6,E8:G8,D11:G13,L4:O4,S4:V4").ClearContents 'Clear Booking Fields
    .Range("E4").Select
    .Shapes("NewBkgGrp").Visible = msoCTrue
    .Shapes("ExistBkgGrp").Visible = msoFalse
End With
End Sub

Sub Booking_CancelNew()
If Sheet1.Range("D16").Value <> Empty Then Sheet1.Range("D16").Select
End Sub

Sub Booking_Delete()
With Sheet1
    Dim BkgRow As Long
    Dim LastRow As Long
    If .Range("B1").Value = Empty Then Exit Sub
    LastRow = .Range("D999").End(xlUp).Row 'Last Row of table
    BkgRow = .Range("B1").Value 'Booking Row
    .Range("D" & BkgRow & ":V" & BkgRow).ClearContents
    If LastRow <> BkgRow Then 'Check to make sure the booking row is not the last row
        .Range("D" & BkgRow & ":V" & LastRow - 1).Value = .Range("D" & BkgRow + 1 & ":V" & LastRow).Value 'Move Values Up
        .Range("D" & LastRow & ":V" & LastRow).ClearContents 'Clear Last Row
    End If
    Booking_New
End With
End Sub

Attribute VB_Name = "Sched_Macros"
Option Explicit
Sub CheckIn_Today()
With Sheet1
    .Range("L4").Value = Date
    .Range("N5").Value = Year(Now)
    .Range("J6").Value = .Range("B" & 9 + Month(Now)).Value
End With
End Sub
Sub CheckIn_PrevMonth()
With Sheet1
    If .Range("B4").Value = 1 Then 'Previous year
    .Range("J6").Value = "December"
    .Range("N5").Value = .Range("N5").Value - 1  'Increment Year Down By 1
    Else:
    .Range("J6").Value = .Range("B" & .Range("B4").Value + 9 - 1).Value
    End If
End With
End Sub

Sub CheckIn_NextMonth()
With Sheet1
    If .Range("B4").Value = 12 Then 'Next year
    .Range("J6").Value = "January"
    .Range("N5").Value = .Range("N5").Value + 1  'Increment Year Up By 1
    Else:
    .Range("J6").Value = .Range("B" & .Range("B4").Value + 9 + 1).Value
    End If
End With
End Sub

Sub CheckOut_Today()
With Sheet1
    .Range("S4").Value = Date
    .Range("U5").Value = Year(Now)
    .Range("Q6").Value = .Range("B" & 9 + Month(Now)).Value
End With
End Sub
Sub CheckOut_PrevMonth()
With Sheet1
    If .Range("B5").Value = 1 Then 'Previous year
    .Range("Q6").Value = "December"
    .Range("U5").Value = .Range("U5").Value - 1  'Increment Year Up By 1
    Else:
    .Range("Q6").Value = .Range("B" & .Range("B5").Value + 9 - 1).Value
    End If
End With
End Sub

Sub CheckOut_NextMonth()
With Sheet1
    If .Range("B5").Value = 12 Then 'Next year
    .Range("Q6").Value = "January"
    .Range("U5").Value = .Range("U5").Value + 1  'Increment Year Up By 1
    Else:
    .Range("Q6").Value = .Range("B" & .Range("B5").Value + 9 + 1).Value
    End If
End With
End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
SetOnkey (True)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
If Not Intersect(Target, Range("L4")) Is Nothing And Range("L4").Value <> Empty And Range("B3").Value = False Then
    Range("S4").Select
    End
End If
'On any Accidental Change to the calendars, copy back hidden formulas
If Not Intersect(Target, Range("I8:V13")) Is Nothing And Range("B8").Value = False Then
    Range("B8").Value = True
    Range("Y8:AL13").Copy 'Copy Backup Formulas
    Range("I8:V13").PasteSpecial xlPasteFormulas
    Application.CutCopyMode = False
    Range("L4").Select
    Range("B8").Value = False
    End
End If

End Sub

Private Sub Worksheet_Deactivate()
SetOnkey (False)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)


If Target.Row < 16 Then SetOnkey (True) Else: SetOnkey (False)
If Not Intersect(Target, Range("I8:O13")) Is Nothing And Range("B6").Value = True Then Range("L4").Value = Target.Value 'Selection of Check In Day
If Not Intersect(Target, Range("P8:V13")) Is Nothing And Range("B7").Value = True Then Range("S4").Value = Target.Value 'Selection of Check Out Day

'On Selection of Check In Date Field Set Calendar Display to True and show buttons, otherwise hide all
If Not Intersect(Target, Range("L4,N5,J6")) Is Nothing Then
    Range("B6").Value = True
    Shapes("CheckInGrp").Visible = msoCTrue
Else:
    Range("B6").Value = False
    Shapes("CheckInGrp").Visible = msoFalse
End If

'On Selection of Check Out Date Field Set Calendar Display to True and show buttons, otherwise hide all
If Not Intersect(Target, Range("S4,U5,Q6")) Is Nothing Then
    Range("B7").Value = True
    Shapes("CheckOutGrp").Visible = msoCTrue
Else:
    Range("B7").Value = False
    Shapes("CheckOutGrp").Visible = msoFalse
End If


'On Selection of any booking in table
If Not Intersect(Target, Range("D16:V50")) Is Nothing And Range("D" & Target.Row).Value <> Empty Then
    Range("B1").Value = Target.Row
    Booking_Load
End If


End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TabMacros"
Sub SetOnkey(ByVal state As Boolean)
'Compiled By Randy Austin
'Workbook Provided By www.ExcelForFreelancers.com
    If state Then
        With Application
            .OnKey "{TAB}", "'TabRange xlNext'"
            .OnKey "~", "'TabRange xlNext'"
            .OnKey "{ENTER}", "'TabRange xlNext'"
            .OnKey "{RIGHT}", "'TabRange xlNext'"
            .OnKey "{LEFT}", "'TabRange xlPrevious'"
            .OnKey "+{TAB}", "'TabRange xlPrevious'"
            .OnKey "{DOWN}", "'UpOrDownArrow xlDown'"
            .OnKey "{UP}", "'UpOrDownArrow xlUp'"
        End With
    Else
    'reset keys
        With Application
            .OnKey "{ENTER}"
            .OnKey "{TAB}"
            .OnKey "~"
            .OnKey "+{TAB}"
            .OnKey "{RIGHT}"
            .OnKey "{LEFT}"
            .OnKey "{DOWN}"
            .OnKey "{UP}"
        End With
    End If
End Sub

Sub do_nothing()
'nothing to do
End Sub


Function GetTabOrder() As Variant
'--set the tab order of input cells - change ranges as required
'  don't include "$" in these cell references
    GetTabOrder = Array("E4", "L4", "S4", "E6", "E8", "D11")
    If ActiveCell.Address = "$E$4" Then
        Sheet1.Range("B6").Value = True
        Sheet1.Shapes("CheckInGrp").Visible = msoCTrue
    Else:
        Sheet1.Range("B6").Value = False
        Sheet1.Shapes("CheckInGrp").Visible = msoFalse
    End If
    If ActiveCell.Address = "$L$4" Then
        Sheet1.Range("B7").Value = True
        Sheet1.Shapes("CheckOutGrp").Visible = msoCTrue
    Else:
        Sheet1.Range("B7").Value = False
        Sheet1.Shapes("CheckOutGrp").Visible = msoFalse
    End If
End Function

Sub TabRange(Optional iDirection As Integer = xlNext)
    
Dim vTabOrder As Variant, m As Variant
Dim lItems As Long, iAdjust As Long
On Error GoTo ExitSub
'--get the tab order from shared function
vTabOrder = GetTabOrder
lItems = UBound(vTabOrder) - LBound(vTabOrder) + 1

On Error Resume Next
m = Application.Match(ActiveCell.Address(0, 0), vTabOrder, False)
    

'--if activecell is not in Tab Order return to the first cell
If IsError(m) Then
   m = 1
Else
   '--get adjustment to index
   iAdjust = IIf(iDirection = xlPrevious, -1, 1)

   '--calculate new index wrapping around list
   m = (m + lItems + iAdjust - 1) Mod lItems + 1
End If

'--select cell adjusting for Option Base 0 or 1
Application.EnableEvents = False
Range(vTabOrder(m + (LBound(vTabOrder) = 0))).Select

ExitSub:
   Application.EnableEvents = True
End Sub

Sub UpOrDownArrow(Optional iDirection As Integer = xlUp)

Dim vTabOrder As Variant
Dim lRowClosest As Long, lRowTest As Long
Dim i As Long, iSign As Integer

Dim sActiveCol As String
Dim bFound As Boolean

'--get the tab order from shared function
vTabOrder = GetTabOrder

'--find TabCells in same column as ActiveCell in iDirection
'--  rTest will include ActiveCell

sActiveCol = GetColLtr(ActiveCell.Address(0, 0))

iSign = IIf(iDirection = xlDown, -1, 1)
lRowClosest = IIf(iDirection = xlDown, Rows.Count + 1, 0)

For i = LBound(vTabOrder) To UBound(vTabOrder)
   If GetColLtr(CStr(vTabOrder(i))) = sActiveCol Then
      lRowTest = Range(CStr(vTabOrder(i))).Row

   '--find closest cell to ActiveCell in rTest
      If iSign * lRowTest > iSign * lRowClosest And _
         iSign * lRowTest < iSign * ActiveCell.Row Then
         '--at least one cell in iDirection of same columnn
         bFound = True
         lRowClosest = lRowTest
      End If
   End If
Next i

If bFound Then
   Application.EnableEvents = False
   Cells(lRowClosest, ActiveCell.Column).Select
   Application.EnableEvents = True
End If
End Sub


Private Function GetColLtr(sAddr As String) As String
Dim iPos As Long, sTest As String
Do While iPos < 3
   iPos = iPos + 1
   If IsNumeric(Mid(sAddr, iPos, 1)) Then
      Exit Do
   Else
      sTest = sTest & Mid(sAddr, iPos, 1)
   End If
Loop
GetColLtr = sTest
End Function

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit



INQUEST-PP=macro
